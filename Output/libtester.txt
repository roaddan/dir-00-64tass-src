
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/" -i -L libtester.txt -o libtester.prg libtester.asm
; Sun Nov 27 17:21:11 2022

;Offset	;Hex		;Source

;******  Processing input file: libtester.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0
.080d			main
.080d	20 a0 e7	                jsr k_cls
.0810	a9 00		                lda #$00
.0812	8d 20 d0	                sta $d020
.0815	8d 21 d0	                sta $d021
.0818	a9 01		                lda #$01
.081a	8d 86 02	                sta bascol
.081d	60		                rts
=$01			memmapreg = $01
=$90			kiostatus = $90       ; Kernal I/O status word (st) (byte)
=$b7			curfnlen  = $b7       ; Current filename length (byte)
=$b9			cursecadd = $b9       ; Current secondary address (byte)
=$ba			curdevno  = $ba       ; Current device number (byte)
=$bb			curfptr   = $bb       ; Current file pointer (word)
=$fb			zpage1    = $fb       ; zero page 1 address (word)
=$fd			zpage2    = $fd       ; zero page 2 address (word)
=$fb			zeropage  = zpage1
=$fd			zonepage  = zpage2
=$0286			bascol    = $0286     ;basic next chr colscreenram (byte)
=$0400			scrnram   = $0400     ;video character ram
=$0400			scrram0   = $0400
=$0500			scrram1   = $0500
=$0600			scrram2   = $0600
=$0700			scrram3   = $0700
=$0801			basicsta  = $0801     ;basic start address
=$a000			basicrom  = $a000
=$d000			chargen   = $d000
=$d000			vicii     = $d000
=$d400			sid       = $d400     ;sid base address
=$d800			colorram  = $d800     ;video color ram
=$d800			colram0   = $d800
=$d900			colram1   = $d900
=$da00			colram2   = $da00
=$db00			colram3   = $db00
=$dc00			cia1      = $dc00     ;cia1  base address
=$dd00			cia2      = $dd00     ;cia2 base address
=$e000			kernalrom = $e000
=$03			bstop     =    $03      ;stop
=$05			bwhite    =    $05      ;set color white
=$08			block     =    $08      ;lock the charset
=$09			bunlock   =    $09      ;unlock the charset
=$0d			bcarret   =    $0d
=$0e			btext     =    $0e
=$11			bcrsdn    =    $11      ;cursor down 1 line
=$12			brevcol   =    $12
=$13			bhome     =    $13
=$14			bdelete   =    $14
=$1c			bred      =    $1c
=$1d			bcuright  =    $1d
=$1e			bgreen    =    $1e
=$1f			bblue     =    $1f
=$81			borange   =    $81
=$83			blrun     =    $83
=$85			bfkey1    =    $85
=$86			bfkey2    =    $86
=$87			bfkey3    =    $87
=$88			bfkey4    =    $88
=$89			bfkey5    =    $89
=$8a			bfkey6    =    $8a
=$8b			bfkey7    =    $8b
=$8c			bfkey8    =    $8c
=$8d			bcarret1  =    $8d
=$8e			bgraph    =    $8e
=$90			bblack    =    $90
=$91			bcuup     =    $91
=$92			brevoff   =    $92
=$93			bclear    =    $93
=$94			binsert   =    $94
=$95			bbrown    =    $95
=$96			bltred    =    $96
=$97			bdkgrey   =    $97
=$98			bmdgrey   =    $98
=$99			bltgreen  =    $99
=$9a			bltblue   =    $9a
=$9b			bltgrey   =    $9b
=$9c			bmagenta  =    $9c
=$9d			bculeft   =    $9d
=$9e			byellow   =    $9e
=$9f			bcyan     =    $9f
=$0286			carcol  = $0286
=$030a			ieval   = $030a
=$73			chrget  = $73
=$79			chrgot  = $79
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ff81			cint    = $ff81 ; ($ff5b) Initialize the screen editor and vic-ii chip
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ff8a			restor  = $ff8a ; ($fd15) Restore default I/O vectors.
=$ff8d			vector  = $ff8d ; ($fd1a) Read/set I/O vectors.
=$ff90			setmsg  = $ff90 ; ($fe18) Set kernal message output flag
=$ff93			second  = $ff93 ; ($edb9) Send secondary address after listen
=$ff96			tksa    = $ff96 ; ($edc7) Send a secondary address to a device commanded to talk
=$ff99			memtop  = $ff99 ; ($fe25) Get/Set top of ram
=$ff9c			membot  = $ff9c ; ($fe34) Get/set bottom of memory.
=$ff9f			scankey = $ff9f ; $(ea87) Scan the keyboard
=$ffa2			settmo  = $ffa2 ; ($fe21) Set ieee bus card timeout flag
=$ffa5			acptr   = $ffa5 ; ($ee13) recoit un caractere provenant du port serie
=$ffa8			ciout   = $ffa8 ; ($eddd) Transmit a byte over the serial bus
=$ffab			untlk   = $ffab ; ($edef) Send an untalk command
=$ffae			unlsn   = $ffae ; ($edfe) Send an unlisten command
=$ffb1			listen  = $ffb1 ; ($ed0c) Command a device on the serial bus to listen.
=$ffb4			talk    = $ffb4 ; ($ed09) Command a device on the serial bus to talk
=$ffb7			readst  = $ffb7 ; ($fe07) Read i/o status word
=$ffba			setlfs  = $ffba ; ($fe00) Set up a logical file
=$ffbd			setnam  = $ffbd ; ($fdf9) Set up file name
=$ffc0			open    = $ffc0 ; ($f3a4) Open a logical file
=$ffc3			close   = $ffc3 ; ($f291) Close a logical file
=$ffc6			chkin   = $ffc6 ; ($f20e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; ($f250) Define an output channel.
=$ffcc			clrchn  = $ffcc ; ($f333) - Clear all i/o channels.
=$ffcf			chrin   = $ffcf ; ($f157) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; ($f1ca) Output a character
=$ffd5			load    = $ffd5 ; ($f49e) Load device to RAM.
=$ffd8			save    = $ffd8 ; ($f5dd) Save memory to a device.
=$ffdb			settim  = $ffdb ; ($f6e4) Set the system clock.
=$ffde			rdtim   = $ffde ; ($f6dd) Read system clock
=$ffe1			stop    = $ffe1 ; ($f6ed) Check if stop key is pressed.
=$ffe4			getin   = $ffe4 ; ($f13e) Get a character.
=$ffe7			clall   = $ffe7 ; ($f32f) Close all open files
=$ffea			udtim   = $ffea ; ($f69b) Update the system clock
=$ffed			screen  = $ffed ; ($e505) Return screen format
=$fff0			plot    = $fff0 ; ($e50a) Set or retrieve cursor location x=column, y=line
=$fff3			iobase  = $fff3 ; ($e500) Define i/o memory page
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scankey     ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$f1ca			kd_chrout    =   $f1ca
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.081e	4c 0d 08	pgmstart        jmp      main  ; le programme principale doit s'appeler "main"
.0821			push
.0821	08		               php             ; stack : flg, pcl, pch
.0822	78		               sei
.0823	8d 5d 08	               sta  ra         ; save a
.0826	68		               pla             ; stack : pcl, pch
.0827	8d 5c 08	               sta  rp         ; save rp
.082a	68		               pla             ; stack : pch
.082b	8d 5e 08	               sta  pc         ; save pcl
.082e	68		               pla             ; stack : -
.082f	8d 5f 08	               sta  pc+1       ; save pch
.0832	a5 fb		               lda  zpage1     ; get zpage1 low byte
.0834	48		               pha             ; stack : zp1l
.0835	a5 fc		               lda  zpage1+1   ; get zpage1 High byte
.0837	48		               pha             ; stack : zp1h, zp1l
.0838	a5 fd		               lda  zpage2     ; get zpage2 low byte
.083a	48		               pha             ; stack : zp2l, zp1h, zp1l
.083b	a5 fe		               lda  zpage2+1   ; get zpage2 High byte
.083d	48		               pha             ; stack : zp2h, zp2l, zp1h, zp1l
.083e	ad 5c 08	               lda  rp         ; get rp
.0841	48		               pha             ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0842	ad 5d 08	               lda  ra         ; get a
.0845	48		               pha             ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0846	8a		               txa             ; get x
.0847	48		               pha             ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0848	98		               tya             ; get y
.0849	48		               pha             ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.084a	ad 5f 08	               lda  pc+1       ; get pch
.084d	48		               pha             ; st ack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.084e	ad 5e 08	               lda  pc         ; get pcl
.0851	48		               pha             ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0852	ad 5c 08	               lda  rp         ; get rp
.0855	48		               pha             ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0856	ad 5d 08	               lda  ra         ; get a
.0859	28		               plp             ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.085a	58		               cli
.085b	60		               rts
>085c	00		rp             .byte           0
>085d	00		ra             .byte           0
>085e	00 00		pc             .word           0
.0860			pull
.0860			pop
.0860	78		               sei
.0861	68		               pla             ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0862	8d 95 08	               sta  pc         ; save pcl
.0865	68		               pla             ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0866	8d 96 08	               sta  pc+1       ; save pch
.0869	68		               pla             ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.086a	a8		               tay             ; set y
.086b	68		               pla             ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.086c	aa		               tax             ; set x
.086d	68		               pla             ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.086e	8d 94 08	               sta  ra         ; save a
.0871	68		               pla             ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0872	8d 93 08	               sta  rp         ; save rp
.0875	68		               pla             ; stack : zp2l, zp1h, zp1l
.0876	85 fe		               sta  zpage2+1   ; get zpage1 low byte
.0878	68		               pla             ; stack : zp1h, zp1l
.0879	85 fd		               sta  zpage2     ; get zpage2 High byte
.087b	68		               pla             ; stack : zp1l
.087c	85 fc		               sta  zpage1+1   ; get zpage2 low byte
.087e	68		               pla             ; stack :
.087f	85 fb		               sta  zpage1     ; get zpage1 High byte
.0881	ad 96 08	               lda  pc+1       ; get pch
.0884	48		               pha             ; stack : pch
.0885	ad 95 08	               lda  pc
.0888	48		               pha             ; stack : pcl, pch
.0889	ad 93 08	               lda  rp         ; get rp
.088c	48		               pha             ; stack : rp, pcl, pch
.088d	ad 94 08	               lda  ra         ; set ra
.0890	58		               cli
.0891	28		               plp             ; stack : pcl, pch
.0892	60		               rts
>0893	00		rp             .byte           0
>0894	00		ra             .byte           0
>0895	00 00		pc             .word           0
.0897			add2word
.0897	20 21 08	                jsr push
.089a	84 fc		            sty zpage1+1
.089c	86 fb		            stx zpage1
.089e	20 60 08	            jsr pop
.08a1	60		            rts
.08a2			add2word2
.08a2	20 21 08	            jsr push
.08a5	8c c9 08	            sty adddo+1     ; LSB
.08a8	8c cc 08	            sty adddo2+1    ; LSB
.08ab	8c d1 08	            sty addrep+1    ; LSB
.08ae	8e ca 08	            stx adddo+2     ; MSB
.08b1	8e cd 08	            stx adddo2+2    ; MSB
.08b4	8e d2 08	            stx addrep+2    ; MSB
.08b7	48		            pha             ; Sauve
.08b8	18		            clc
.08b9	a9 01		            lda #$01
.08bb	6d d1 08	            adc addrep+1    ; LSB+1
.08be	8d d1 08	            sta addrep+1
.08c1	90 03		            bcc addsamepage
.08c3	ee d2 08	            inc addrep+2    ; MSB+1
.08c6			addsamepage
.08c6	68		            pla
.08c7	18		            clc
.08c8	6d ff ff	adddo       adc $ffff
.08cb	8d ff ff	adddo2      sta $ffff
.08ce	90 03		            bcc addnorep
.08d0	ee ff ff	addrep      inc $ffff
.08d3	20 60 08	addnorep    jsr pop
.08d6	60		            rts
.08d7			sub2word2
.08d7	20 21 08	            jsr push
.08da	8c 10 09	            sty subdo+1     ; LSB
.08dd	8c 15 09	            sty subdo2+1    ; LSB
.08e0	8c 1a 09	            sty subrep+1    ; LSB
.08e3	8c 1f 09	            sty subrep2+1   ; LSB
.08e6	8e 11 09	            stx subdo+2     ; MSB
.08e9	8e 16 09	            stx subdo2+2    ; MSB
.08ec	8e 1b 09	            stx subrep+2    ; MSB
.08ef	8e 20 09	            stx subrep2+2   ; MSB
.08f2	8d 13 09	            sta subdo+4     ; Sauve
.08f5	18		            clc
.08f6	a9 01		            lda #$01
.08f8	6d 1a 09	            adc subrep+1    ; LSB+1
.08fb	8d 1a 09	            sta subrep+1
.08fe	8d 1f 09	            sta subrep2+1
.0901	90 09		            bcc subsamepage
.0903	ee 1b 09	            inc subrep+2    ; MSB+1
.0906	ad 1b 09	            lda subrep+2
.0909	8d 20 09	            sta subrep2+2
.090c	00		subsamepage brk
.090d	68		            pla
.090e	38		            sec
.090f	ad ff ff	subdo       lda $ffff       ; LSB-1
.0912	e9 ff		            sbc #$ff
.0914	8d ff ff	subdo2      sta $ffff
.0917	90 08		            bcc subnorep
.0919	ad ff ff	subrep      lda $ffff
.091c	e9 00		            sbc #$00        ; MSB-1
.091e	8d ff ff	subrep2     sta $ffff
.0921	ae 2d 09	subnorep    ldx memcount+1
.0924	ac 2c 09	            ldy memcount
.0927	00		            brk
.0928	20 60 08	            jsr pop
.092b	60		            rts
>092c	00 00		memcount       .word $00

;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L v20start.txt -o v20start.prg v20start.asm
; Tue Mar  7 07:49:09 2023

;Offset	;Hex		;Source

;******  Processing input file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-v20ex.asm

>1201	0b 12 0a 00	.word (+), 10       ;$1201 : Debut + 10 =$120b, $0010
>1205	9e 34 36 32	.null $9e, "4621"   ;$1205 : "sys4621" = jsr #120d
>1209	31 00
>120b	00 00		+ .word 0           ;$120b : $0000

;******  Return to file: v20start.asm

=1			TITLELINE=1
=5			BINLINE=5
.120d	20 7a 13	main           jsr  scrmaninit
.1210	48		               pha
.1211	a9 09		               lda #(vblack*16+(vwhite|8))
.1213	8d 0f 90	               sta  vicscrbrd
.1216	68		               pla
.1217	48		               pha
.1218	a9 02		               lda  #vred
.121a	8d 86 02	               sta  bascol
.121d	68		               pla
.121e	8a		               txa
.121f	48		               pha
.1220	98		               tya
.1221	48		               pha
.1222	a2 01		               ldx  #1
.1224	a0 15		               ldy  #21
.1226	20 cc 13	               jsr  gotoxy
.1229	68		               pla
.122a	a8		               tay
.122b	68		               pla
.122c	aa		               tax
.122d	8a		               txa
.122e	48		               pha
.122f	98		               tya
.1230	48		               pha
.1231	a2 35		               ldx  #<string3
.1233	a0 13		               ldy  #>string3
.1235	20 b5 13	               jsr  puts
.1238	68		               pla
.1239	a8		               tay
.123a	68		               pla
.123b	aa		               tax
.123c	48		               pha
.123d	a9 02		               lda  #vred
.123f	8d 86 02	               sta  bascol
.1242	68		               pla
.1243	8a		               txa
.1244	48		               pha
.1245	98		               tya
.1246	48		               pha
.1247	a2 03		               ldx  #3
.1249	a0 01		               ldy  #TITLELINE
.124b	20 cc 13	               jsr  gotoxy
.124e	68		               pla
.124f	a8		               tay
.1250	68		               pla
.1251	aa		               tax
.1252	8a		               txa
.1253	48		               pha
.1254	98		               tya
.1255	48		               pha
.1256	a2 4a		               ldx  #<string1
.1258	a0 13		               ldy  #>string1
.125a	20 b5 13	               jsr  puts
.125d	68		               pla
.125e	a8		               tay
.125f	68		               pla
.1260	aa		               tax
.1261	48		               pha
.1262	a9 05		               lda  #vgreen
.1264	8d 86 02	               sta  bascol
.1267	68		               pla
.1268	8a		               txa
.1269	48		               pha
.126a	98		               tya
.126b	48		               pha
.126c	a2 01		               ldx  #1
.126e	a0 03		               ldy  #BINLINE-2
.1270	20 cc 13	               jsr  gotoxy
.1273	68		               pla
.1274	a8		               tay
.1275	68		               pla
.1276	aa		               tax
.1277	8a		               txa
.1278	48		               pha
.1279	98		               tya
.127a	48		               pha
.127b	a2 5b		               ldx  #<string2
.127d	a0 13		               ldy  #>string2
.127f	20 b5 13	               jsr  puts
.1282	68		               pla
.1283	a8		               tay
.1284	68		               pla
.1285	aa		               tax
.1286	48		               pha
.1287	a9 05		               lda  #vgreen
.1289	8d 86 02	               sta  bascol
.128c	68		               pla
.128d	8a		               txa
.128e	48		               pha
.128f	98		               tya
.1290	48		               pha
.1291	a2 0f		               ldx  #15
.1293	a0 05		               ldy  #BINLINE
.1295	20 cc 13	               jsr  gotoxy
.1298	68		               pla
.1299	a8		               tay
.129a	68		               pla
.129b	aa		               tax
.129c	8a		               txa
.129d	48		               pha
.129e	98		               tya
.129f	48		               pha
.12a0	a2 6a		               ldx  #<string4
.12a2	a0 13		               ldy  #>string4
.12a4	20 b5 13	               jsr  puts
.12a7	68		               pla
.12a8	a8		               tay
.12a9	68		               pla
.12aa	aa		               tax
.12ab	a9 00		               lda  #$00
.12ad	8d 70 13	               sta  count
.12b0	ad 70 13	next           lda  count
.12b3	a9 00		               lda  #$00
.12b5	48		               pha
.12b6	28		               plp
.12b7	a2 10		               ldx  #$10
.12b9	e0 10		               cpx  #$10
.12bb	08		               php
.12bc	68		               pla
.12bd	20 72 17	               jsr  atobin
.12c0	48		               pha
.12c1	48		               pha
.12c2	a9 07		               lda  #vyellow
.12c4	8d 86 02	               sta  bascol
.12c7	68		               pla
.12c8	8a		               txa
.12c9	48		               pha
.12ca	98		               tya
.12cb	48		               pha
.12cc	a2 06		               ldx  #6
.12ce	a0 05		               ldy  #BINLINE
.12d0	20 cc 13	               jsr  gotoxy
.12d3	68		               pla
.12d4	a8		               tay
.12d5	68		               pla
.12d6	aa		               tax
.12d7	48		               pha
.12d8	a9 25		               lda  #"%"
.12da	20 af 13	               jsr  putch
.12dd	68		               pla
.12de	8a		               txa
.12df	48		               pha
.12e0	98		               tya
.12e1	48		               pha
.12e2	a2 93		               ldx  #<abin
.12e4	a0 17		               ldy  #>abin
.12e6	20 b5 13	               jsr  puts
.12e9	68		               pla
.12ea	a8		               tay
.12eb	68		               pla
.12ec	aa		               tax
.12ed	68		               pla
.12ee	20 25 17	               jsr  a2hex
.12f1	48		               pha
.12f2	a9 03		               lda  #vcyan
.12f4	8d 86 02	               sta  bascol
.12f7	68		               pla
.12f8	8a		               txa
.12f9	48		               pha
.12fa	98		               tya
.12fb	48		               pha
.12fc	a2 10		               ldx  #16
.12fe	a0 05		               ldy  #BINLINE
.1300	20 cc 13	               jsr  gotoxy
.1303	68		               pla
.1304	a8		               tay
.1305	68		               pla
.1306	aa		               tax
.1307	48		               pha
.1308	a9 24		               lda  #"$"
.130a	20 af 13	               jsr  putch
.130d	68		               pla
.130e	8a		               txa
.130f	48		               pha
.1310	98		               tya
.1311	48		               pha
.1312	a2 d1		               ldx  #<a2hexstr
.1314	a0 16		               ldy  #>a2hexstr
.1316	20 b5 13	               jsr  puts
.1319	68		               pla
.131a	a8		               tay
.131b	68		               pla
.131c	aa		               tax
.131d	ee 70 13	               inc  count
.1320	4c b0 12	ici            jmp  next
.1323	60		               rts
.1324			delay65536
.1324	20 17 15	               jsr  push
.1327	a2 00		               ldx  #$00
.1329	a0 00		               ldy  #$00
.132b	88		waity          dey
.132c	d0 fd		               bne  waity
.132e	ca		waitx          dex
.132f	d0 fa		               bne  waity
.1331	20 56 15	               jsr  pop
.1334	60		               rts
>1335	50 41 52 3a	string3        .null     "par: daniel lafrance"
>1339	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>1349	00
>134a	43 4f 4d 50	string1        .null     "compteur binaire"
>134e	54 45 55 52 20 42 49 4e 41 49 52 45 00
>135b	46 4c 41 47	string2        .null     "flags:nv-bdizc"
>135f	53 3a 4e 56 2d 42 44 49 5a 43 00
>136a	28 20 20 20	string4        .null     "(   )"
>136e	29 00
>1370	00		count          .byte     0
>1371	00		chr            .byte     0
>1372	00		col            .byte     0
>1373	00		row            .byte     0
>1374	00		lin            .byte     0
>1375	34 12		adresse        .word     $1234

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/cbm-macros.asm


;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/kernal-map-vic20.asm

=$90			kiostatus = $90       ; Kernal I/O status word (st) (byte)
=$b7			curfnlen  = $b7       ; Current filename length (byte)
=$b9			cursecadd = $b9       ; Current secondary address (byte)
=$ba			curdevno  = $ba       ; Current device number (byte)
=$bb			curfptr   = $bb       ; Current file pointer (word)
=$fb			zpage1    = $fb       ; zero page 1 address (word)
=$fd			zpage2    = $fd       ; zero page 2 address (word)
=$fb			zeropage  = zpage1
=$fd			zonepage  = zpage2
=$0286			bascol    = $0286     ;basic next chr colscreenram (byte)
=$1000			scrnram   = $1000     ;video character ram (with ram expansion)
=$1200			basicsta  = $1200     ;basic start address (with ram expansion)
=$9400			colorram  = $9400     ;video color ram (with ram expansion)
=$1000			scrram0   = scrnram   ;
=4352			scrram1   = scrram0+$0100
=$9400			colram0   = colorram   ;
=38144			colram1   = colram0+$0100
=$8000			chargen   = $8000
=$9000			ioblock   = $9000
=$9000			vicchip   = $9000
=$a000			ramblk4   = $a000
=$c000			basicrom  = $c000
=$e000			kernalrom = $e000
=$03			bstop     =    $03      ;stop
=$05			bwhite    =    $05      ;set color white
=$08			block     =    $08      ;lock the charset
=$09			bunlock   =    $09      ;unlock the charset
=$0d			bcarret   =    $0d
=$0e			btext     =    $0e
=$11			bcrsdn    =    $11      ;cursor down 1 line
=$12			brevcol   =    $12
=$13			bhome     =    $13
=$14			bdelete   =    $14
=$1c			bred      =    $1c
=$1d			bcuright  =    $1d
=$1e			bgreen    =    $1e
=$1f			bblue     =    $1f
=$81			borange   =    $81
=$83			blrun     =    $83
=$85			bfkey1    =    $85
=$86			bfkey2    =    $86
=$87			bfkey3    =    $87
=$88			bfkey4    =    $88
=$89			bfkey5    =    $89
=$8a			bfkey6    =    $8a
=$8b			bfkey7    =    $8b
=$8c			bfkey8    =    $8c
=$8d			bcarret1  =    $8d
=$8e			bgraph    =    $8e
=$90			bblack    =    $90
=$91			bcuup     =    $91
=$92			brevoff   =    $92
=$93			bclear    =    $93
=$94			binsert   =    $94
=$95			bbrown    =    $95
=$96			bltred    =    $96
=$97			bdkgrey   =    $97
=$98			bmdgrey   =    $98
=$99			bltgreen  =    $99
=$9a			bltblue   =    $9a
=$9b			bltgrey   =    $9b
=$9c			bmagenta  =    $9c
=$9d			bculeft   =    $9d
=$9e			byellow   =    $9e
=$9f			bcyan     =    $9f
=$0286			carcol  = $0286
=$030a			ieval   = $030a
=$73			chrget  = $73
=$79			chrgot  = $79
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ff81			cint    = $ff81 ; ($ff5b) Initialize the screen editor and vic-ii chip
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ff8a			restor  = $ff8a ; ($fd15) Restore default I/O vectors.
=$ff8d			vector  = $ff8d ; ($fd1a) Read/set I/O vectors.
=$ff90			setmsg  = $ff90 ; ($fe18) Set kernal message output flag
=$ff93			second  = $ff93 ; ($edb9) Send secondary address after listen
=$ff96			tksa    = $ff96 ; ($edc7) Send a secondary address to a device commanded to talk
=$ff99			memtop  = $ff99 ; ($fe25) Get/Set top of ram
=$ff9c			membot  = $ff9c ; ($fe34) Get/set bottom of memory.
=$ff9f			scankey = $ff9f ; $(ea87) Scan the keyboard
=$ffa2			settmo  = $ffa2 ; ($fe21) Set ieee bus card timeout flag
=$ffa5			acptr   = $ffa5 ; ($ee13) recoit un caractere provenant du port serie
=$ffa8			ciout   = $ffa8 ; ($eddd) Transmit a byte over the serial bus
=$ffab			untlk   = $ffab ; ($edef) Send an untalk command
=$ffae			unlsn   = $ffae ; ($edfe) Send an unlisten command
=$ffb1			listen  = $ffb1 ; ($ed0c) Command a device on the serial bus to listen.
=$ffb4			talk    = $ffb4 ; ($ed09) Command a device on the serial bus to talk
=$ffb7			readst  = $ffb7 ; ($fe07) Read i/o status word
=$ffba			setlfs  = $ffba ; ($fe00) Set up a logical file
=$ffbd			setnam  = $ffbd ; ($fdf9) Set up file name
=$ffc0			open    = $ffc0 ; ($f3a4) Open a logical file
=$ffc3			close   = $ffc3 ; ($f291) Close a logical file
=$ffc6			chkin   = $ffc6 ; ($f20e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; ($f250) Define an output channel.
=$ffcc			clrchn  = $ffcc ; ($f333) - Clear all i/o channels.
=$ffcf			chrin   = $ffcf ; ($f157) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; ($f1ca) Output a character
=$ffd5			load    = $ffd5 ; ($f49e) Load device to RAM.
=$ffd8			save    = $ffd8 ; ($f5dd) Save memory to a device.
=$ffdb			settim  = $ffdb ; ($f6e4) Set the system clock.
=$ffde			rdtim   = $ffde ; ($f6dd) Read system clock
=$ffe1			stop    = $ffe1 ; ($f6ed) Check if stop key is pressed.
=$ffe4			getin   = $ffe4 ; ($f13e) Get a character.
=$ffe7			clall   = $ffe7 ; ($f32f) Close all open files
=$ffea			udtim   = $ffea ; ($f69b) Update the system clock
=$ffed			screen  = $ffed ; ($e505) Return screen format
=$fff0			plot    = $fff0 ; ($e50a) Set or retrieve cursor location x=column, y=line
=$fff3			iobase  = $fff3 ; ($e500) Define i/o memory page
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scankey     ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$f1ca			kd_chrout    =   $f1ca
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.1377	4c 0d 12	pgmstart        jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/vic-map.asm

=$9000			vic = $9000			; VicII C64 memorymap base address
=36864			vichorcnt = vic+$00	; $9000, 36864 Bit 0-6 Horizontal centering.
=36865			vicvercnt = vic+$01	; $9001, 36865 Vertical centering.
=36866			viccolnum = vic+$02	; $9002, 36866 Bit 0-6 set # of column.
=36867			vicrownum = vic+$03	; $9003, 36867 Bit 1-6 set # of rows.
=36868			vicsrastr = vic+$04	; $9004, 36868 TV raster beam line.
=36869			viccstart = vic+$05	; $9005, 36869 Bit 0-3 start of character memory (dflt=0).
=36870			vicpenhor = vic+$06	; $9006, 36870 Horizontal position of light pen.
=36871			vicpenver = vic+$07	; $9007, 36871 Vertical position of light pen
=36872			vicpadhor = vic+$08	; $9008, 36872 Digitized value of paddle X
=36873			vicpadver = vic+$09	; $9009, 36873 Digitized value of paddle Y
=36874			vicosclhz = vic+$0a	; $900a, 36874 Oscillator 1 freq. (low) (on: 128-255)
=36875			vicoscmhz = vic+$0b	; $900b, 36875 Oscillator 2 freq. (medium) (on: 128-255)
=36876			vicoschhz = vic+$0c	; $900c, 36876 Oscillator 3 freq. (high) (on: 128-255)
=36877			vicnoizhz = vic+$0d	; $900d, 36877 Noise source freq.
=36878			vicvolume = vic+$0e	; $900e, 36878 Bit 0-3 set volume of all sound.
=36879			vicscrbrd = vic+$0f	; $900f, 36879 Screen and border color register.
=36879			vicbordcol=vicscrbrd
=36879			vicbackcol=vicscrbrd

;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/basic2-map-Vic20.asm

=$c3bb			b_opentxtspc  = $c3bb ;  1) Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$c408			b_chkavailmem = $c408 ;  2) Check available Memory. *1  ;a-y;---; Array top $yyaa
=$c435			b_outofmem    = $c435 ;  3) ?Out of memory.             ;---;---;
=$c437			b_errormesg   = $c437 ;  4) Send BASIC error message.   ;a--;---; a = errno
=$e467			b_warmstart   = $e467 ;  5) Basic warm start.           ;---;---;
=$c48a			b_chrget      = $c48a ;  6) Main CHRGET entry.          ;---;---;
=$c49c			b_newline     = $c49c ;  7) Crunch tokens, insert line. ;-x-;---; x = buff len
=$c52a			b_clrready    = $c52a ;  8) Fix chaining CLR and READY. ;---;---;
=$c533			b_fixchaining = $c533 ;  9) Fix chaining.               ;---;---;
=$c560			b_kbgetline   = $c560 ; 10) Recieve line from keyboard.
=$c579			b_crunchtkns  = $c579 ; 11) Crunch token. *7            ;-x-;---: x = buff len
=$c613			b_findline    = $c613 ; 12) Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$c642			b_new         = $c642 ; 13) Do NEW                      ;---;---;
=$c659			b_resetclr    = $c659 ; 14) Reset BASIC and do CLR      ;---;---;
=$c65e			b_clr         = $c65e ; 15) Do CLR                      ;---;---;
=$c68e			b_rstchrget   = $c68e ; 17) Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$c857			b_continue    = $c857 ; 18) Do CONTINUE.                ;a-y;---; curline $yyaa
=$c96b			b_getint      = $c96b ; 19) Get int from BASIX text.    ;---;---;
=$cad3			b_sndcr       = $cad3 ; 20) Send RETURN, LF in scr mode.;---;a--; a = LF
=$cad7			b_sndcrlf     = $cad7 ; 21) Send RETURN, LINEFEED.      ;---;a--; a = LF
=$cb1e			b_outstr_ay   = $cb1e ; 22) Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$cb1e			b_puts        = b_outstr_ay
=$cb24			b_outstrprep  = $cb24 ; 23) Print precomputated string. ;a--;---; a = strlen
=$cb45			b_printqm     = $cb45 ; 24) Print '?'.                  ;---;---;
=$cb47			b_sendchar    = $cb47 ; 25) Send char in a to device.   ;a--;a--; a = char
=$cd8a			b_frmnum      = $cd8a ; Evaluate numeric expression and/or check for data type mismatch
=$cd9e			b_evalexpr    = $cd9e ; 26) Evaluate expression.
=$cefd			b_chk4comma   = $cefd ; 27) Check for coma.             ;---;a--; a = char
=$cefa			b_chk4lpar    = $cefa ; 28) check for '('.              ;---;a--; a = char
=$cef7			b_chk4rpar    = $cef7 ; 29) check for ')'.              ;---;a--; a = char
=$cf08			b_syntaxerr   = $cf08 ; 30) send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; 31) find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; 32) Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; 33) Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; 34) Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; 35) Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; 36) Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; 37) Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; 38) Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; 39) Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; 40) Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; 41) Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; 42) Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; 43) Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; 44) Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; 45) Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; 46) Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; 47) Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; 48) Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; 49) Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; 50) Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/basic2-lib-Vic20.asm

.137a			scrmaninit
.137a	20 17 15	               jsr  push
.137d	a9 00		               lda  #vnoir
.137f	2a		               rol
.1380	2a		               rol
.1381	2a		               rol
.1382	2a		               rol
.1383	09 05		               ora  #vvert
.1385	09 08		               ora  #%00001000
.1387	8d 0f 90	               sta  vicbackcol
.138a	a9 01		               lda  #vblanc
.138c	8d 86 02	               sta  bascol
.138f	a9 02		               lda  #%00000010
.1391	8d 00 90	               sta  vichorcnt
.1394	20 9b 13	               jsr  cls
.1397	20 56 15	               jsr  pop
.139a	60		               rts
.139b			cls
.139b	08		               php
.139c	48		               pha
.139d	a9 93		               lda  #$93
.139f	20 af 13	               jsr  putch
.13a2	a9 04		               lda  #$04
.13a4	8d 00 90	               sta  vichorcnt
.13a7	a9 1a		               lda  #$1a
.13a9	8d 01 90	               sta  vicvercnt
.13ac	68		               pla
.13ad	28		               plp
.13ae	60		               rts
.13af			putch
.13af	08		               php
.13b0	20 d2 ff	               jsr  $ffd2
.13b3	28		               plp
.13b4	60		               rts
.13b5			puts
.13b5	20 17 15	               jsr  push
.13b8	86 fb		               stx  zpage1
.13ba	84 fc		               sty  zpage1+1
.13bc	a0 00		               ldy  #$00
.13be	b1 fb		next           lda  (zpage1),y
.13c0	f0 06		               beq  out
.13c2	20 af 13	               jsr  putch
.13c5	c8		               iny
.13c6	d0 f6		               bne  next
.13c8	20 56 15	out            jsr  pop
.13cb	60		               rts
.13cc			gotoxy
.13cc	20 17 15	               jsr  push
.13cf	18		               clc
.13d0	98		               tya
.13d1	48		               pha
.13d2	8a		               txa
.13d3	a8		               tay
.13d4	68		               pla
.13d5	aa		               tax
.13d6	20 f0 ff	               jsr  kplot
.13d9	20 56 15	               jsr  pop
.13dc	60		               rts
.13dd			cursor
=$0286			bascol    =    $0286
.13dd	08		               php
.13de	48		               pha
.13df	90 12		               bcc  restore
.13e1	20 f0 ff	               jsr  kplot
.13e4	8c 05 14	               sty  cx
.13e7	8e 06 14	               stx  cy
.13ea	ad 86 02	               lda  bascol
.13ed	8d 07 14	               sta  bcol
.13f0	4c 02 14	               jmp  out
.13f3	ae 06 14	restore        ldx  cy
.13f6	ac 05 14	               ldy  cx
.13f9	20 f0 ff	               jsr  kplot
.13fc	ad 07 14	               lda  bcol
.13ff	8d 86 02	               sta  bascol
.1402	68		out            pla
.1403	28		               plp
.1404	60		               rts
>1405	00		cx   .byte     $00
>1406	00		cy   .byte     $00
>1407	00		bcol .byte     $00
.1408			cursave
.1408	08		               php
.1409	38		               sec
.140a	20 dd 13	               jsr  cursor
.140d	28		               plp
.140e	60		               rts
.140f			curput
.140f	08		               php
.1410	18		               clc
.1411	20 dd 13	               jsr  cursor
.1414	28		               plp
.1415	60		               rts
.1416			putsxy
.1416	08		               php
.1417	8e 7b 14	               stx  straddr
.141a	8c 7c 14	               sty  straddr+1
.141d	48		               pha
.141e	98		               tya
.141f	48		               pha
.1420	8a		               txa
.1421	48		               pha
.1422	a5 fb		               lda  zpage1
.1424	8d 7f 14	               sta  zp1
.1427	a5 fc		               lda  zpage1+1
.1429	8d 80 14	               sta  zp1+1
.142c	ad 7c 14	               lda  straddr+1
.142f	85 fc		               sta  zpage1+1
.1431	ad 7b 14	               lda  straddr
.1434	85 fb		               sta  zpage1
.1436	a0 00		               ldy  #$00
.1438	b1 fb		               lda  (zpage1),y
.143a	8d 7d 14	               sta  px
.143d	c8		               iny
.143e	b1 fb		               lda  (zpage1),y
.1440	8d 7e 14	               sta  py
.1443	aa		               tax
.1444	ac 7d 14	               ldy  px
.1447	20 cc 13	               jsr  gotoxy
.144a	18		               clc
.144b	ee 7b 14	               inc  straddr
.144e	ad 7b 14	               lda  straddr
.1451	8d 7b 14	               sta  straddr
.1454	90 03		               bcc  norep1
.1456	ee 7c 14	               inc  straddr+1
.1459	ee 7b 14	norep1         inc  straddr
.145c	90 03		               bcc  norep2
.145e	ee 7c 14	               inc  straddr+1
.1461	ad 7b 14	norep2         lda  straddr
.1464	ac 7c 14	               ldy  straddr+1
.1467	20 b5 13	               jsr  puts
.146a	ad 80 14	               lda  zp1+1
.146d	85 fc		               sta  zpage1+1
.146f	ad 7f 14	               lda  zp1
.1472	85 fb		               sta  zpage1
.1474	68		               pla
.1475	aa		               tax
.1476	68		               pla
.1477	a8		               tay
.1478	68		               pla
.1479	28		               plp
.147a	60		               rts
>147b	00 00		straddr   .word     $00
>147d	00		px        .byte     $00
>147e	00		py        .byte     $00
>147f	00 00		zp1       .word     $00
.1481			putscxy
.1481	08		               php
.1482	8e d7 14	               stx  straddr
.1485	8c d8 14	               sty  straddr+1
.1488	48		               pha
.1489	98		               tya
.148a	48		               pha
.148b	8a		               txa
.148c	48		               pha
.148d	a5 fb		               lda  zpage1
.148f	8d da 14	               sta  zp1
.1492	a5 fc		               lda  zpage1+1
.1494	8d db 14	               sta  zp1+1
.1497	ad d8 14	               lda  straddr+1
.149a	85 fc		               sta  zpage1+1
.149c	ad d7 14	               lda  straddr
.149f	85 fb		               sta  zpage1
.14a1	ad 86 02	               lda  bascol
.14a4	8d d9 14	               sta  bc
.14a7	a0 00		               ldy #$00
.14a9	b1 fb		               lda  (zpage1),y
.14ab	8d 86 02	               sta  bascol
.14ae	18		               clc
.14af	ee d7 14	               inc  straddr
.14b2	90 03		               bcc  norep1
.14b4	ee d8 14	               inc  straddr+1
.14b7	ad d7 14	norep1         lda  straddr
.14ba	ac d8 14	               ldy  straddr+1
.14bd	20 16 14	               jsr  putsxy
.14c0	ad d9 14	               lda  bc
.14c3	8d 86 02	               sta  bascol
.14c6	ad db 14	               lda  zp1+1
.14c9	85 fc		               sta  zpage1+1
.14cb	ad da 14	               lda  zp1
.14ce	85 fb		               sta  zpage1
.14d0	68		               pla
.14d1	aa		               tax
.14d2	68		               pla
.14d3	a8		               tay
.14d4	68		               pla
.14d5	28		               plp
.14d6	60		               rts
>14d7	00 00		straddr  .word      $00
>14d9	00		bc       .byte      $00
>14da	00 00		zp1      .word      $00
.14dc			putrahex
.14dc	08		               php
.14dd	48		               pha
.14de	20 25 17	               jsr  a2hex
.14e1	a9 d1		               lda  #<a2hexstr
.14e3	a0 16		               ldy  #>a2hexstr
.14e5	20 b5 13	               jsr  puts
.14e8	68		               pla
.14e9	28		               plp
.14ea	60		               rts
.14eb			kputrahexxy
.14eb			bputrahexxy
.14eb			putrahexxy
.14eb	08		               php
.14ec	20 25 17	               jsr  a2hex
.14ef	a9 ce		               lda  #<a2hexpos
.14f1	a0 16		               ldy  #>a2hexpos
.14f3	20 16 14	               jsr  putsxy
.14f6	68		               pla
.14f7	28		               plp
.14f8	60		               rts
.14f9			putrahexcxy
.14f9	08		               php
.14fa	20 25 17	               jsr  a2hex
.14fd	a9 ce		               lda  #<a2hexpos
.14ff	a0 16		               ldy  #>a2hexpos
.1501	20 81 14	               jsr  putscxy
.1504	68		               pla
.1505	28		               plp
.1506	60		               rts
.1507			setinverse
.1507	48		               pha
.1508	a9 12		               lda  #$12
.150a	20 d2 ff	               jsr  $ffd2
.150d	68		               pla
.150e	60		               rts
.150f			clrinverse
.150f	48		               pha
.1510	a9 92		               lda  #$92
.1512	20 d2 ff	               jsr  $ffd2
.1515	68		               pla
.1516	60		               rts

;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/c64-lib-pushpop.asm

.1517			push
.1517	08		          php            ; stack : flg, pcl, pch
.1518	78		          sei
.1519	8d 53 15	          sta  ra        ; save a
.151c	68		          pla            ; stack : pcl, pch
.151d	8d 52 15	          sta  rp        ; save rp
.1520	68		          pla            ; stack : pch
.1521	8d 54 15	          sta  pc        ; save pcl
.1524	68		          pla            ; stack : -
.1525	8d 55 15	          sta  pc+1      ; save pch
.1528	a5 fb		          lda  zpage1    ; get zpage1 low byte
.152a	48		          pha            ; stack : zp1l
.152b	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.152d	48		          pha            ; stack : zp1h, zp1l
.152e	a5 fd		          lda  zpage2    ; get zpage2 low byte
.1530	48		          pha            ; stack : zp2l, zp1h, zp1l
.1531	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.1533	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1534	ad 52 15	          lda  rp        ; get rp
.1537	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1538	ad 53 15	          lda  ra        ; get a
.153b	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.153c	8a		          txa            ; get x
.153d	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.153e	98		          tya            ; get y
.153f	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1540	ad 55 15	          lda  pc+1      ; get pch
.1543	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1544	ad 54 15	          lda  pc        ; get pcl
.1547	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1548	ad 52 15	          lda  rp        ; get rp
.154b	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.154c	ad 53 15	          lda  ra        ; get a
.154f	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1550	58		          cli
.1551	60		          rts
>1552	00		rp        .byte     0
>1553	00		ra        .byte     0
>1554	00 00		pc        .word     0
.1556			pull
.1556			pop
.1556	78		          sei
.1557	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1558	8d 8b 15	          sta  pc        ; save pcl
.155b	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.155c	8d 8c 15	          sta  pc+1      ; save pch
.155f	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1560	a8		          tay            ; set y
.1561	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1562	aa		          tax            ; set x
.1563	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1564	8d 8a 15	          sta  ra        ; save a
.1567	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1568	8d 89 15	          sta  rp        ; save rp
.156b	68		          pla            ; stack : zp2l, zp1h, zp1l
.156c	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.156e	68		          pla            ; stack : zp1h, zp1l
.156f	85 fd		          sta  zpage2    ; get zpage2 High byte
.1571	68		          pla            ; stack : zp1l
.1572	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.1574	68		          pla            ; stack :
.1575	85 fb		          sta  zpage1    ; get zpage1 High byte
.1577	ad 8c 15	          lda  pc+1      ; get pch
.157a	48		          pha            ; stack : pch
.157b	ad 8b 15	          lda  pc
.157e	48		          pha            ; stack : pcl, pch
.157f	ad 89 15	          lda  rp        ; get rp
.1582	48		          pha            ; stack : rp, pcl, pch
.1583	ad 8a 15	          lda  ra        ; set ra
.1586	58		          cli
.1587	28		          plp            ; stack : pcl, pch
.1588	60		          rts
>1589	00		rp        .byte     0
>158a	00		ra        .byte     0
>158b	00 00		pc        .word     0

;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/c64-lib-mem.asm

.158d			blkfill
.158d	20 17 15	bf0            jsr  push
.1590	20 4c 16	               jsr  savezp1
.1593	84 fc		               sty  zpage1+1
.1595	a0 00		               ldy  #$00
.1597	84 fb		               sty  zpage1
.1599	91 fb		bf1            sta  (zpage1),y
.159b	c8		               iny
.159c	d0 fb		               bne  bf1
.159e	20 5b 16	               jsr  restzp1
.15a1	20 56 15	               jsr  pop
.15a4	60		               rts
.15a5			memfill
.15a5	20 17 15	               jsr  push
.15a8	20 8d 15	mf1            jsr  blkfill
.15ab	c8		               iny
.15ac	ca		               dex
.15ad	d0 f9		               bne  mf1
.15af	20 56 15	               jsr  pop
.15b2	60		               rts
.15b3			memmove
.15b3	20 17 15	               jsr  push
.15b6	ba		               tsx            ; On se crée un pointeur ...
.15b7	8a		               txa
.15b8	18		               clc
.15b9	69 0b		               adc  #11
.15bb	a8		               tay
.15bc	a2 06		               ldx  #$06
.15be	b9 00 01	nextbyte       lda  $0100,y
.15c1	99 0d 16	               sta  words,y
.15c4	c8		               iny
.15c5	ca		               dex
.15c6	d0 f6		               bne  nextbyte
.15c8	ad 0d 16	               lda  s
.15cb	8d e4 15	               sta  source+1
.15ce	ad 0e 16	               lda  s+1
.15d1	8d e5 15	               sta  source+2
.15d4	ad 0f 16	               lda  d
.15d7	8d e1 15	               sta  destin+1
.15da	ad 10 16	               lda  d+1
.15dd	8d e2 15	               sta  destin+2
.15e0	ad ff ff	destin         lda  $ffff
.15e3	8d ff ff	source         sta  $ffff
.15e6	ee e1 15	               inc  destin+1
.15e9	d0 03		               bne  src
.15eb	ee e2 15	               inc  destin+2
.15ee	ee e4 15	src            inc  source+1
.15f1	d0 03		               bne  cnt
.15f3	ee e5 15	               inc  source+2
.15f6	ad 11 16	cnt            lda  compte
.15f9	d0 08		               bne  decit
.15fb	ad 12 16	               lda  compte+1
.15fe	f0 09		               beq  fini
.1600	ce 12 16	               dec  compte+1
.1603	ce 11 16	decit          dec  compte
.1606	4c e0 15	               jmp  destin
.1609	20 56 15	fini           jsr  pop
.160c	60		               rts
.160d			words
>160d	00 00		s         .word     $0000
>160f	00 00		d         .word     $0000
>1611	00 00		compte    .word     $0000
.1613			decword
.1613	20 17 15	               jsr  push
.1616	86 fd		               stx  zpage2
.1618	84 fe		               sty  zpage2+1
.161a	20 56 15	               jsr  pop
.161d	60		               rts
.161e			inczp1
.161e	08		               php
.161f	48		               pha
.1620	e6 fb		               inc  zpage1
.1622	d0 02		               bne  nopage
.1624	e6 fc		               inc  zpage1+1
.1626	68		nopage         pla
.1627	28		               plp
.1628	60		               rts
.1629			deczp1
.1629	08		               php
.162a	48		               pha
.162b	a5 fb		               lda  zpage1
.162d	d0 02		               bne  nopage
.162f	c6 fc		               dec  zpage1+1
.1631	c6 fb		nopage         dec  zpage1
.1633	28		               plp
.1634	60		               rts
.1635			inczp2
.1635	08		               php
.1636	48		               pha
.1637	e6 fd		               inc  zpage2
.1639	d0 02		               bne  nopage
.163b	e6 fe		               inc  zpage2+1
.163d	68		nopage         pla
.163e	28		               plp
.163f	60		               rts
.1640			deczp2
.1640	08		               php
.1641	48		               pha
.1642	a5 fd		               lda  zpage2
.1644	d0 02		               bne  nopage
.1646	c6 fe		               dec  zpage2+1
.1648	c6 fd		nopage         dec  zpage2
.164a	28		               plp
.164b	60		               rts
.164c			savezp1
.164c	08		               php
.164d	48		               pha
.164e	a5 fb		               lda  zpage1
.1650	8d c8 16	               sta  zp1
.1653	a5 fc		               lda  zpage1+1
.1655	8d c9 16	               sta  zp1+1
.1658	68		               pla
.1659	28		               plp
.165a	60		               rts
.165b			restzp1
.165b	08		               php
.165c	48		               pha
.165d	ad c8 16	               lda zp1
.1660	85 fb		               sta zpage1
.1662	ad c9 16	               lda zp1+1
.1665	85 fc		               sta zpage1+1
.1667	68		               pla
.1668	28		               plp
.1669	60		               rts
.166a			savezp2
.166a	08		         php
.166b	48		         pha
.166c	a5 fd		         lda zpage2
.166e	8d ca 16	         sta zp2
.1671	a5 fe		         lda zpage2+1
.1673	8d cb 16	         sta zp2+1
.1676	68		         pla
.1677	28		         plp
.1678	60		         rts
.1679			restzp2
.1679	08		                php
.167a	48		                pha
.167b	ad ca 16	                lda  zp2
.167e	85 fd		                sta  zpage2
.1680	ad cb 16	                lda  zp2+1
.1683	85 fe		                sta  zpage2+1
.1685	68		                pla
.1686	28		                plp
.1687	60		                rts
.1688			xy2addr
.1688	08		                php
.1689	48		                pha
.168a	8a		                txa
.168b	48		                pha
.168c	98		                tya
.168d	48		                pha
.168e	ad c3 16	                lda     addr1+1
.1691	8d c5 16	                sta     addr2+1
.1694	ad c2 16	                lda     addr1
.1697	8d c4 16	                sta     addr2
.169a	c0 00		                cpy     #$00
.169c	f0 0f		                beq     addx
.169e	18		moreline        clc
.169f	6d c1 16	                adc     ymult
.16a2	90 03		                bcc     norepy
.16a4	ee c5 16	                inc     addr2+1
.16a7	8d c4 16	norepy          sta     addr2
.16aa	88		                dey
.16ab	d0 f1		                bne     moreline
.16ad	8a		addx            txa
.16ae	18		                clc
.16af	6d c4 16	                adc     addr2
.16b2	90 03		                bcc     thatsit
.16b4	ee c5 16	                inc     addr2+1
.16b7	8d c4 16	thatsit         sta     addr2
.16ba	68		                pla
.16bb	a8		                tay
.16bc	68		                pla
.16bd	aa		                tax
.16be	68		                pla
.16bf	28		                plp
.16c0	60		                rts
>16c1	28		ymult          .byte     40
>16c2	00 00		addr1          .word     $0000
>16c4	00 00		addr2          .word     $0000
>16c6	00 00		bytecnt        .word     $0000
>16c8	00 00		zp1        .word   $0000
>16ca	00 00		zp2        .word   $0000

;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/c64-lib-hex.asm

>16cc	01		a2hexcol       .byte     1              ; pour aputscxy
>16cd	00		a2hexbkcol     .byte     %00000000
.16ce			a2hexpos
>16ce	00		a2hexpx        .byte     0              ; pour aputsxy
>16cf	00		a2hexpy        .byte     0
>16d0	24		a2hexprefix    .byte     "$"            ; pour aputs
>16d1	00 00		a2hexstr       .word     $00
>16d3	00 00		               .word     $00
>16d5	00		               .byte     0              ; 0 end string
.16d6			putahexfmtxy
.16d6	20 17 15	               jsr  push
.16d9	20 25 17	               jsr  a2hex
.16dc	ae ce 16	               ldx  a2hexpx
.16df	ac cf 16	               ldy  a2hexpy
.16e2	20 cc 13	               jsr  gotoxy
.16e5	a2 d0		               ldx  #<a2hexprefix
.16e7	a0 16		               ldy  #>a2hexprefix
.16e9	20 b5 13	               jsr  puts
.16ec	20 56 15	               jsr  pop
.16ef	60		               rts
.16f0			putahexfmt
.16f0	20 17 15	               jsr  push
.16f3	20 25 17	               jsr  a2hex
.16f6	a2 d0		               ldx  #<a2hexprefix
.16f8	a0 16		               ldy  #>a2hexprefix
.16fa	20 b5 13	               jsr  puts
.16fd	20 56 15	               jsr  pop
.1700	60		               rts
.1701			putahex
.1701	20 17 15	               jsr  push
.1704	20 25 17	               jsr  a2hex
.1707	a2 d1		               ldx  #<a2hexstr
.1709	a0 16		               ldy  #>a2hexstr
.170b	20 b5 13	               jsr  puts
.170e	20 56 15	               jsr  pop
.1711	60		               rts
.1712			nib2hex
.1712	08		               php
.1713	29 0f		               and  #$0f
.1715	f8		               sed
.1716	18		               clc
.1717	69 90		               adc  #$90
.1719	69 40		               adc  #$40
.171b	d8		               cld
.171c	28		               plp
.171d	60		               rts
.171e			lsra4bits
.171e	08		               php
.171f	4a		               lsr
.1720	4a		               lsr
.1721	4a		               lsr
.1722	4a		               lsr
.1723	28		               plp
.1724	60		               rts
.1725			a2hex
.1725	08		               php
.1726	48		               pha
.1727	48		               pha
.1728	20 1e 17	               jsr  lsra4bits
.172b	20 12 17	               jsr  nib2hex
.172e	8d d1 16	               sta  a2hexstr
.1731	68		               pla
.1732	20 12 17	               jsr  nib2hex
.1735	8d d2 16	               sta  a2hexstr+1
.1738	a9 00		               lda  #$00                ; set end of string
.173a	8d d3 16	               sta  a2hexstr+2
.173d	68		               pla
.173e	28		               plp
.173f	60		               rts
.1740			xy2hex
.1740	20 17 15	               jsr  push
.1743	20 25 17	               jsr  a2hex
.1746	8a		               txa
.1747	48		               pha
.1748	20 1e 17	               jsr  lsra4bits
.174b	20 12 17	               jsr  nib2hex
.174e	8d d1 16	               sta  a2hexstr
.1751	68		               pla
.1752	20 12 17	               jsr  nib2hex
.1755	8d d2 16	               sta  a2hexstr+1
.1758	98		               tya
.1759	48		               pha
.175a	20 1e 17	               jsr  lsra4bits
.175d	20 12 17	               jsr  nib2hex
.1760	8d d3 16	               sta  a2hexstr+2
.1763	68		               pla
.1764	20 12 17	               jsr  nib2hex
.1767	8d d4 16	               sta  a2hexstr+3
.176a	a9 00		               lda  #$00                ; 0 ended string
.176c	8d d5 16	               sta  a2hexstr+4
.176f	20 56 15	               jsr  pop
.1772			atobin
.1772	20 17 15	               jsr     push
.1775	a2 08		               ldx     #8
.1777	a0 00		               ldy     #0
.1779	2a		nextbit        rol
.177a	48		               pha
.177b	69 00		               adc     #$00
.177d	29 01		               and     #$01
.177f	20 12 17	               jsr     nib2hex
.1782	99 93 17	               sta     abin,y
.1785	68		               pla
.1786	c8		               iny
.1787	ca		               dex
.1788	d0 ef		               bne     nextbit
.178a	a9 00		               lda     #0
.178c	99 93 17	               sta     abin,y
.178f	20 56 15	               jsr     pull
.1792	60		               rts
>1793	30 30 30 30	abin           .null   "00000000"
>1797	30 30 30 30 00
.179c			putabin
.179c	20 72 17	               jsr     atobin
.179f	20 17 15	               jsr     push
.17a2	a2 93		               ldx     #<abin
.17a4	a0 17		               ldy     #>abin
.17a6	20 b5 13	               jsr     puts
.17a9	20 56 15	               jsr     pop
.17ac	60		               rts
.17ad			putabinfmt
.17ad	08		               php
.17ae	48		               pha
.17af	a9 25		               lda     #"%"
.17b1	20 af 13	               jsr     putch
.17b4	68		               pla
.17b5	20 9c 17	               jsr     putabin
.17b8	28		               plp
.17b9	60		               rts
.17ba			putabinxy
.17ba	20 cc 13	               jsr     gotoxy
.17bd	20 9c 17	               jsr     putabin
.17c0	60		               rts
.17c1			putabinfmtxy
.17c1	20 cc 13	               jsr     gotoxy
.17c4	20 ad 17	               jsr     putabinfmt
.17c7	60		               rts

;******  Return to file: v20start.asm


;******  End of listing

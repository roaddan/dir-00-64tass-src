
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L v20start.txt -o v20start.prg v20start.asm
; Thu Jul 11 11:23:52 2024

;Offset	;Hex		;Source

;******  Processing input file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-v20ex.asm

>1201	0b 12 0a 00	.word (+), 10       ;$1201 : Debut + 10 =$120b, $0010
>1205	9e 34 36 32	.null $9e, "4621"   ;$1205 : "sys4621" = jsr #120d
>1209	31 00
>120b	00 00		+ .word 0           ;$120b : $0000

;******  Return to file: v20start.asm

=1			TITLELINE=1
=6			BINLINE=6
=6			BINCOLM=6
=$10			XVAL=$10
=$40			XCPX=$40
=$03			DIFF=$03
.120d	20 fb 13	main            jsr scrmaninit
.1210	48		               pha
.1211	a9 0e		               lda #(vnoir*16+(vbleu|8))
.1213	8d 0f 90	               sta  vicscrbrd
.1216	68		               pla
.1217	48		               pha
.1218	a9 01		               lda  #vblanc
.121a	8d 86 02	               sta  bascol
.121d	68		               pla
.121e	a2 9d		               ldx #<string3
.1220	a0 13		               ldy #>string3
.1222	20 97 14	               jsr putsxy
.1225	a9 10		                lda #XVAL    ; initialise ...
.1227	8d f1 13	                sta count   ; ...le compteur
.122a	ad f1 13	next            lda count
.122d	38		                sec
.122e	ed f2 13	                sbc tstval
.1231	8d f3 13	                sta result
.1234	ae f1 13	                ldx count
.1237	a9 00		                lda #$00
.1239	48		                pha
.123a	28		                plp
.123b	ec f2 13	                cpx tstval
.123e	08		                php
.123f	68		                pla
.1240	20 02 18	                jsr atobin
.1243	48		                pha
.1244	48		               pha
.1245	a9 07		               lda  #vyellow
.1247	8d 86 02	               sta  bascol
.124a	68		               pla
.124b	20 98 15	               jsr  push
.124e	a2 06		               ldx  #BINCOLM
.1250	a0 07		               ldy  #BINLINE+1
.1252	20 4d 14	               jsr  gotoxy
.1255	20 d7 15	               jsr  pop
.1258	a9 25		               lda  #"%"
.125a	20 30 14	               jsr  putch
.125d	20 98 15	               jsr  push
.1260	a2 59		isx            ldx  #<abin
.1262	a0 17		isy            ldy  #>abin
.1264	20 36 14	               jsr  puts
.1267	20 d7 15	               jsr  pull
.126a	8a		                txa
.126b	20 b5 17	                jsr a2hex
.126e	48		               pha
.126f	a9 03		               lda  #vcyan
.1271	8d 86 02	               sta  bascol
.1274	68		               pla
.1275	20 98 15	               jsr  push
.1278	a2 08		               ldx  #BINCOLM+2
.127a	a0 09		               ldy  #BINLINE+3
.127c	20 4d 14	               jsr  gotoxy
.127f	20 d7 15	               jsr  pop
.1282	a9 24		               lda  #"$"
.1284	20 30 14	               jsr  putch
.1287	20 98 15	               jsr  push
.128a	a2 54		isx            ldx  #<a2hexstr
.128c	a0 17		isy            ldy  #>a2hexstr
.128e	20 36 14	               jsr  puts
.1291	20 d7 15	               jsr  pull
.1294	20 98 15	               jsr  push
.1297	a2 06		               ldx  #BINCOLM
.1299	a0 0b		               ldy  #BINLINE+5
.129b	20 4d 14	               jsr  gotoxy
.129e	20 d7 15	               jsr  pop
.12a1	a9 24		               lda  #"$"
.12a3	20 30 14	               jsr  putch
.12a6	20 98 15	               jsr  push
.12a9	a2 54		isx            ldx  #<a2hexstr
.12ab	a0 17		isy            ldy  #>a2hexstr
.12ad	20 36 14	               jsr  puts
.12b0	20 d7 15	               jsr  pull
.12b3	ad f2 13	                lda tstval
.12b6	20 b5 17	                jsr a2hex
.12b9	48		               pha
.12ba	a9 03		               lda  #vcyan
.12bc	8d 86 02	               sta  bascol
.12bf	68		               pla
.12c0	20 98 15	               jsr  push
.12c3	a2 11		               ldx  #BINCOLM+11
.12c5	a0 09		               ldy  #BINLINE+3
.12c7	20 4d 14	               jsr  gotoxy
.12ca	20 d7 15	               jsr  pop
.12cd	a9 24		               lda  #"$"
.12cf	20 30 14	               jsr  putch
.12d2	20 98 15	               jsr  push
.12d5	a2 54		isx            ldx  #<a2hexstr
.12d7	a0 17		isy            ldy  #>a2hexstr
.12d9	20 36 14	               jsr  puts
.12dc	20 d7 15	               jsr  pull
.12df	20 98 15	               jsr  push
.12e2	a2 0c		               ldx  #BINCOLM+6
.12e4	a0 0b		               ldy  #BINLINE+5
.12e6	20 4d 14	               jsr  gotoxy
.12e9	20 d7 15	               jsr  pop
.12ec	a9 24		               lda  #"$"
.12ee	20 30 14	               jsr  putch
.12f1	20 98 15	               jsr  push
.12f4	a2 54		isx            ldx  #<a2hexstr
.12f6	a0 17		isy            ldy  #>a2hexstr
.12f8	20 36 14	               jsr  puts
.12fb	20 d7 15	               jsr  pull
.12fe	ad f3 13	                lda result
.1301	20 b5 17	                jsr a2hex
.1304	48		               pha
.1305	a9 03		               lda  #vcyan
.1307	8d 86 02	               sta  bascol
.130a	68		               pla
.130b	20 98 15	               jsr  push
.130e	a2 11		               ldx  #BINCOLM+11
.1310	a0 0b		               ldy  #BINLINE+5
.1312	20 4d 14	               jsr  gotoxy
.1315	20 d7 15	               jsr  pop
.1318	a9 24		               lda  #"$"
.131a	20 30 14	               jsr  putch
.131d	20 98 15	               jsr  push
.1320	a2 54		isx            ldx  #<a2hexstr
.1322	a0 17		isy            ldy  #>a2hexstr
.1324	20 36 14	               jsr  puts
.1327	20 d7 15	               jsr  pull
.132a	68		                pla
.132b	20 b5 17	                jsr a2hex
.132e	48		               pha
.132f	a9 03		               lda  #vcyan
.1331	8d 86 02	               sta  bascol
.1334	68		               pla
.1335	20 98 15	               jsr  push
.1338	a2 10		               ldx  #BINCOLM+10
.133a	a0 07		               ldy  #BINLINE+1
.133c	20 4d 14	               jsr  gotoxy
.133f	20 d7 15	               jsr  pop
.1342	a9 24		               lda  #"$"
.1344	20 30 14	               jsr  putch
.1347	20 98 15	               jsr  push
.134a	a2 54		isx            ldx  #<a2hexstr
.134c	a0 17		isy            ldy  #>a2hexstr
.134e	20 36 14	               jsr  puts
.1351	20 d7 15	               jsr  pull
.1354	ee f1 13	                inc count
.1357	ad f2 13	                lda tstval
.135a	18		                clc
.135b	69 03		                adc #DIFF
.135d	8d f2 13	                sta tstval
.1360	20 67 13	                jsr delay65536
.1363	4c 63 13	ici             jmp ici
.1366	60		                rts
.1367			delay65536
.1367	20 98 15	                jsr push
.136a	a2 00		                ldx #$00
.136c	a0 00		                ldy #$00
.136e	88		waity           dey
.136f	d0 fd		                bne waity
.1371	ca		waitx           dex
.1372	d0 fa		                bne waity
.1374	20 d7 15	                jsr pop
.1377	60		                rts
>1378	02 01 54 45	string1        .null    BINCOLM-4,TITLELINE,"test drapeaux cpu"
>137c	53 54 20 44 52 41 50 45 41 55 58 20 43 50 55 00
>138c	01 03 46 4c	string2        .null    BINCOLM-5,BINLINE-3,"flags:nv-bdizc"
>1390	41 47 53 3a 4e 56 2d 42 44 49 5a 43 00
>139d	01 15 50 41	string3        .null    1,21,"par: daniel lafrance"
>13a1	52 3a 20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e
>13b1	43 45 00
>13b4	0f 07 28 20	string4        .null    BINCOLM+9,BINLINE+1, "(   )"
>13b8	20 20 29 00
>13bc	07 04 5e 5e	string5        .byte    BINCOLM+1,BINLINE-2,94,94,94,94,94,94,94,94,0
>13c0	5e 5e 5e 5e 5e 5e 00
>13c7	07 05 7d 7d	string6        .byte    BINCOLM+1,BINLINE-1,125,125,125,125,125,125,125,125,0
>13cb	7d 7d 7d 7d 7d 7d 00
>13d2	06 09 58 3d	string7        .null    BINCOLM,BINLINE+3, "x=$   cpx #$"
>13d6	24 20 20 20 43 50 58 20 23 24 00
>13e1	06 0b 24 20	string8        .null    BINCOLM,BINLINE+5, "$   - $   = $"
>13e5	20 20 2d 20 24 20 20 20 3d 20 24 00
>13f1	10		count          .byte    XVAL
>13f2	40		tstval         .byte    XCPX
>13f3	00		result         .byte    0
>13f4	00		row            .byte    0
>13f5	00		lin            .byte    0
>13f6	34 12		adresse        .word     $1234

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-vic20-kernal.asm

=$90			kiostatus   =   $90     ; Kernal I/O status word (st) (byte)
=$b7			curfnlen    =   $b7     ; Current filename length (byte)
=$b9			cursecadd   =   $b9     ; Current secondary address (byte)
=$ba			curdevno    =   $ba     ; Current device number (byte)
=$bb			curfptr     =   $bb     ; Current file pointer (word)
=$fb			zpage1      =   $fb     ; zero page 1 address (word)
=$fd			zpage2      =   $fd     ; zero page 2 address (word)
=$0286			bascol      =   $0286   ; basic next chr colscreenram (byte)
=$1000			scrnramex   =   $1000   ; video character ram (with ram expansion)
=$1200			basicstaex  =   $1200   ; basic start address (with ram expansion)
=$9400			colorramex  =   $9400   ; video color ram (with ram expansion)
=$1e00			scrnram     =   $1e00   ; video character ram (no ram expansion)
=$1000			basicsta    =   $1000   ; basic start address (no ram expansion)
=$9600			colorram    =   $9600   ; video color ram (no ram expansion)
=$1e00			scrram0     =   scrnram
=7936			scrram1     =   scrram0+$0100
=$9600			colram0     =   colorram
=38656			colram1     =   colram0+$0100
=$8000			chargen     =   $8000
=$9000			ioblock     =   $9000   ;
=$9000			vicchip     =   $9000
=$a000			ramblk4     =   $a000
=$c000			basicrom    =   $c000
=$e000			kernalrom   =   $e000
=$03			bstop       =   $03      ;stop
=$05			bwhite      =   $05      ;set color white
=$08			block       =   $08      ;lock the charset
=$09			bunlock     =   $09      ;unlock the charset
=$0d			bcarret     =   $0d
=$0e			btext       =   $0e
=$11			bcrsdn      =   $11      ;cursor down 1 line
=$12			brevcol     =   $12
=$13			bhome       =   $13
=$14			bdelete     =   $14
=$1c			bred        =   $1c
=$1d			bcuright    =   $1d
=$1e			bgreen      =   $1e
=$1f			bblue       =   $1f
=$81			borange     =   $81
=$83			blrun       =   $83
=$85			bfkey1      =   $85
=$86			bfkey2      =   $86
=$87			bfkey3      =   $87
=$88			bfkey4      =   $88
=$89			bfkey5      =   $89
=$8a			bfkey6      =   $8a
=$8b			bfkey7      =   $8b
=$8c			bfkey8      =   $8c
=$8d			bcarret1    =   $8d
=$8e			bgraph      =   $8e
=$90			bblack      =   $90
=$91			bcuup       =   $91
=$92			brevoff     =   $92
=$93			bclear      =   $93
=$94			binsert     =   $94
=$95			bbrown      =   $95
=$96			bltred      =   $96
=$97			bdkgrey     =   $97
=$98			bmdgrey     =   $98
=$99			bltgreen    =   $99
=$9a			bltblue     =   $9a
=$9b			bltgrey     =   $9b
=$9c			bmagenta    =   $9c
=$9d			bculeft     =   $9d
=$9e			byellow     =   $9e
=$9f			bcyan       =   $9f
=$0286			carcol      =   $0286
=$030a			ieval       =   $030a
=$73			chrget      =   $73
=$79			chrgot      =   $79
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$ffb4			stalk   = $ffb4 ; Send Talk command to serial bus.
=$ffb1			slisten = $ffb1 ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$ffa5			acptr   = $ffa5 ; jmp $ef19 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ffa8			ciout   = $ffa8 ; jmp $eee4 Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ffb1			listen  = $ffb1 ; jmp ($ee17) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f542 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe82 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe73 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ffde			rdtim   = $ffde ; jmp $f760 Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe57 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd52 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f675 Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $eb1e Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $eec0 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe50 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe66 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fe49 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f767 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe6f Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ee14 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $eec1 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f734 Update the system clock
=$ffae			unlsn   = $ffae ; jmp $ef04 Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $eef6 Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $f675 Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$f1ca			kd_chrout    =   $f1ca
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.13f8	4c 0d 12	pgmstart        jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-vic20-vic.asm

=$9000			vic = $9000			; VicII C64 memorymap base address
=36864			vichorcnt = vic+$00	; $9000, 36864 Bit 0-6 Horizontal centering.
=36865			vicvercnt = vic+$01	; $9001, 36865 Vertical centering.
=36866			viccolnum = vic+$02	; $9002, 36866 Bit 0-6 set # of column.
=36867			vicrownum = vic+$03	; $9003, 36867 Bit 1-6 set # of rows.
=36868			vicsrastr = vic+$04	; $9004, 36868 TV raster beam line.
=36869			viccstart = vic+$05	; $9005, 36869 Bit 0-3 start of character memory (dflt=0).
=36870			vicpenhor = vic+$06	; $9006, 36870 Horizontal position of light pen.
=36871			vicpenver = vic+$07	; $9007, 36871 Vertical position of light pen
=36872			vicpadhor = vic+$08	; $9008, 36872 Digitized value of paddle X
=36873			vicpadver = vic+$09	; $9009, 36873 Digitized value of paddle Y
=36874			vicosclhz = vic+$0a	; $900a, 36874 Oscillator 1 freq. (low) (on: 128-255)
=36875			vicoscmhz = vic+$0b	; $900b, 36875 Oscillator 2 freq. (medium) (on: 128-255)
=36876			vicoschhz = vic+$0c	; $900c, 36876 Oscillator 3 freq. (high) (on: 128-255)
=36877			vicnoizhz = vic+$0d	; $900d, 36877 Noise source freq.
=36878			vicvolume = vic+$0e	; $900e, 36878 Bit 0-3 set volume of all sound.
=36879			vicscrbrd = vic+$0f	; $900f, 36879 Screen and border color register.
=36879			vicbordcol=vicscrbrd
=36879			vicbackcol=vicscrbrd

;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-Vic20-basic2.asm

=$c3bb			b_opentxtspc  = $c3bb ;  1) Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$c408			b_chkavailmem = $c408 ;  2) Check available Memory. *1  ;a-y;---; Array top $yyaa
=$c435			b_outofmem    = $c435 ;  3) ?Out of memory.             ;---;---;
=$c437			b_errormesg   = $c437 ;  4) Send BASIC error message.   ;a--;---; a = errno
=$e467			b_warmstart   = $e467 ;  5) Basic warm start.           ;---;---;
=$c48a			b_chrget      = $c48a ;  6) Main CHRGET entry.          ;---;---;
=$c49c			b_newline     = $c49c ;  7) Crunch tokens, insert line. ;-x-;---; x = buff len
=$c52a			b_clrready    = $c52a ;  8) Fix chaining CLR and READY. ;---;---;
=$c533			b_fixchaining = $c533 ;  9) Fix chaining.               ;---;---;
=$c560			b_kbgetline   = $c560 ; 10) Recieve line from keyboard.
=$c579			b_crunchtkns  = $c579 ; 11) Crunch token. *7            ;-x-;---: x = buff len
=$c613			b_findline    = $c613 ; 12) Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$c642			b_new         = $c642 ; 13) Do NEW                      ;---;---;
=$c659			b_resetclr    = $c659 ; 14) Reset BASIC and do CLR      ;---;---;
=$c65e			b_clr         = $c65e ; 15) Do CLR                      ;---;---;
=$c68e			b_rstchrget   = $c68e ; 17) Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$c857			b_continue    = $c857 ; 18) Do CONTINUE.                ;a-y;---; curline $yyaa
=$c96b			b_getint      = $c96b ; 19) Get int from BASIX text.    ;---;---;
=$cad3			b_sndcr       = $cad3 ; 20) Send RETURN, LF in scr mode.;---;a--; a = LF
=$cad7			b_sndcrlf     = $cad7 ; 21) Send RETURN, LINEFEED.      ;---;a--; a = LF
=$cb1e			b_outstr_ay   = $cb1e ; 22) Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$cb1e			b_puts        = b_outstr_ay
=$cb24			b_outstrprep  = $cb24 ; 23) Print precomputated string. ;a--;---; a = strlen
=$cb45			b_printqm     = $cb45 ; 24) Print '?'.                  ;---;---;
=$cb47			b_sendchar    = $cb47 ; 25) Send char in a to device.   ;a--;a--; a = char
=$cd8a			b_frmnum      = $cd8a ; Evaluate numeric expression and/or check for data type mismatch
=$cd9e			b_evalexpr    = $cd9e ; 26) Evaluate expression.
=$cefd			b_chk4comma   = $cefd ; 27) Check for coma.             ;---;a--; a = char
=$cefa			b_chk4lpar    = $cefa ; 28) check for '('.              ;---;a--; a = char
=$cef7			b_chk4rpar    = $cef7 ; 29) check for ')'.              ;---;a--; a = char
=$cf08			b_syntaxerr   = $cf08 ; 30) send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; 31) find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; 32) Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; 33) Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; 34) Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; 35) Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; 36) Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; 37) Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; 38) Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; 39) Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; 40) Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; 41) Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; 42) Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; 43) Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; 44) Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; 45) Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; 46) Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; 47) Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; 48) Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; 49) Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; 50) Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-Vic20-basic2.asm

.13fb			scrmaninit
.13fb	20 98 15	               jsr  push
.13fe	a9 00		               lda  #vnoir
.1400	2a		               rol
.1401	2a		               rol
.1402	2a		               rol
.1403	2a		               rol
.1404	09 05		               ora  #vvert
.1406	09 08		               ora  #%00001000
.1408	8d 0f 90	               sta  vicbackcol
.140b	a9 01		               lda  #vblanc
.140d	8d 86 02	               sta  bascol
.1410	a9 02		               lda  #%00000010
.1412	8d 00 90	               sta  vichorcnt
.1415	20 1c 14	               jsr  cls
.1418	20 d7 15	               jsr  pop
.141b	60		               rts
.141c			cls
.141c	08		               php
.141d	48		               pha
.141e	a9 93		               lda  #$93
.1420	20 30 14	               jsr  putch
.1423	a9 04		               lda  #$04
.1425	8d 00 90	               sta  vichorcnt
.1428	a9 1a		               lda  #$1a
.142a	8d 01 90	               sta  vicvercnt
.142d	68		               pla
.142e	28		               plp
.142f	60		               rts
.1430			putch
.1430	08		               php
.1431	20 d2 ff	               jsr  $ffd2
.1434	28		               plp
.1435	60		               rts
.1436			puts
.1436	20 98 15	               jsr  push
.1439	86 fb		               stx  zpage1
.143b	84 fc		               sty  zpage1+1
.143d	a0 00		               ldy  #$00
.143f	b1 fb		next           lda  (zpage1),y
.1441	f0 06		               beq  out
.1443	20 30 14	               jsr  putch
.1446	c8		               iny
.1447	d0 f6		               bne  next
.1449	20 d7 15	out            jsr  pop
.144c	60		               rts
.144d			gotoxy
.144d	20 98 15	               jsr  push
.1450	98		               tya
.1451	48		               pha
.1452	8a		               txa
.1453	a8		               tay
.1454	68		               pla
.1455	aa		               tax
.1456	18		               clc
.1457	20 f0 ff	               jsr  kplot
.145a	20 d7 15	               jsr  pop
.145d	60		               rts
.145e			cursor
=$0286			bascol    =    $0286
.145e	08		               php
.145f	48		               pha
.1460	90 12		               bcc  restore
.1462	20 f0 ff	               jsr  kplot
.1465	8c 86 14	               sty  cx
.1468	8e 87 14	               stx  cy
.146b	ad 86 02	               lda  bascol
.146e	8d 88 14	               sta  bcol
.1471	4c 83 14	               jmp  out
.1474	ae 87 14	restore        ldx  cy
.1477	ac 86 14	               ldy  cx
.147a	20 f0 ff	               jsr  kplot
.147d	ad 88 14	               lda  bcol
.1480	8d 86 02	               sta  bascol
.1483	68		out            pla
.1484	28		               plp
.1485	60		               rts
>1486	00		cx   .byte     $00
>1487	00		cy   .byte     $00
>1488	00		bcol .byte     $00
.1489			cursave
.1489	08		               php
.148a	38		               sec
.148b	20 5e 14	               jsr  cursor
.148e	28		               plp
.148f	60		               rts
.1490			curput
.1490	08		               php
.1491	18		               clc
.1492	20 5e 14	               jsr  cursor
.1495	28		               plp
.1496	60		               rts
.1497			putsxy
.1497	08		               php
.1498	8e fc 14	               stx  straddr
.149b	8c fd 14	               sty  straddr+1
.149e	48		               pha
.149f	98		               tya
.14a0	48		               pha
.14a1	8a		               txa
.14a2	48		               pha
.14a3	a5 fb		               lda  zpage1
.14a5	8d 00 15	               sta  zp1
.14a8	a5 fc		               lda  zpage1+1
.14aa	8d 01 15	               sta  zp1+1
.14ad	ad fd 14	               lda  straddr+1
.14b0	85 fc		               sta  zpage1+1
.14b2	ad fc 14	               lda  straddr
.14b5	85 fb		               sta  zpage1
.14b7	a0 00		               ldy  #$00
.14b9	b1 fb		               lda  (zpage1),y
.14bb	8d fe 14	               sta  px
.14be	c8		               iny
.14bf	b1 fb		               lda  (zpage1),y
.14c1	8d ff 14	               sta  py
.14c4	aa		               tax
.14c5	ac fe 14	               ldy  px
.14c8	20 4d 14	               jsr  gotoxy
.14cb	18		               clc
.14cc	ee fc 14	               inc  straddr
.14cf	ad fc 14	               lda  straddr
.14d2	8d fc 14	               sta  straddr
.14d5	90 03		               bcc  norep1
.14d7	ee fd 14	               inc  straddr+1
.14da	ee fc 14	norep1         inc  straddr
.14dd	90 03		               bcc  norep2
.14df	ee fd 14	               inc  straddr+1
.14e2	ad fc 14	norep2         lda  straddr
.14e5	ac fd 14	               ldy  straddr+1
.14e8	20 36 14	               jsr  puts
.14eb	ad 01 15	               lda  zp1+1
.14ee	85 fc		               sta  zpage1+1
.14f0	ad 00 15	               lda  zp1
.14f3	85 fb		               sta  zpage1
.14f5	68		               pla
.14f6	aa		               tax
.14f7	68		               pla
.14f8	a8		               tay
.14f9	68		               pla
.14fa	28		               plp
.14fb	60		               rts
>14fc	00 00		straddr   .word     $00
>14fe	00		px        .byte     $00
>14ff	00		py        .byte     $00
>1500	00 00		zp1       .word     $00
.1502			putscxy
.1502	08		               php
.1503	8e 58 15	               stx  straddr
.1506	8c 59 15	               sty  straddr+1
.1509	48		               pha
.150a	98		               tya
.150b	48		               pha
.150c	8a		               txa
.150d	48		               pha
.150e	a5 fb		               lda  zpage1
.1510	8d 5b 15	               sta  zp1
.1513	a5 fc		               lda  zpage1+1
.1515	8d 5c 15	               sta  zp1+1
.1518	ad 59 15	               lda  straddr+1
.151b	85 fc		               sta  zpage1+1
.151d	ad 58 15	               lda  straddr
.1520	85 fb		               sta  zpage1
.1522	ad 86 02	               lda  bascol
.1525	8d 5a 15	               sta  bc
.1528	a0 00		               ldy #$00
.152a	b1 fb		               lda  (zpage1),y
.152c	8d 86 02	               sta  bascol
.152f	18		               clc
.1530	ee 58 15	               inc  straddr
.1533	90 03		               bcc  norep1
.1535	ee 59 15	               inc  straddr+1
.1538	ad 58 15	norep1         lda  straddr
.153b	ac 59 15	               ldy  straddr+1
.153e	20 97 14	               jsr  putsxy
.1541	ad 5a 15	               lda  bc
.1544	8d 86 02	               sta  bascol
.1547	ad 5c 15	               lda  zp1+1
.154a	85 fc		               sta  zpage1+1
.154c	ad 5b 15	               lda  zp1
.154f	85 fb		               sta  zpage1
.1551	68		               pla
.1552	aa		               tax
.1553	68		               pla
.1554	a8		               tay
.1555	68		               pla
.1556	28		               plp
.1557	60		               rts
>1558	00 00		straddr  .word      $00
>155a	00		bc       .byte      $00
>155b	00 00		zp1      .word      $00
.155d			putrahex
.155d	08		               php
.155e	48		               pha
.155f	20 b5 17	               jsr  a2hex
.1562	a9 54		               lda  #<a2hexstr
.1564	a0 17		               ldy  #>a2hexstr
.1566	20 36 14	               jsr  puts
.1569	68		               pla
.156a	28		               plp
.156b	60		               rts
.156c			kputrahexxy
.156c			bputrahexxy
.156c			putrahexxy
.156c	08		               php
.156d	20 b5 17	               jsr  a2hex
.1570	a9 51		               lda  #<a2hexpos
.1572	a0 17		               ldy  #>a2hexpos
.1574	20 97 14	               jsr  putsxy
.1577	68		               pla
.1578	28		               plp
.1579	60		               rts
.157a			putrahexcxy
.157a	08		               php
.157b	20 b5 17	               jsr  a2hex
.157e	a9 51		               lda  #<a2hexpos
.1580	a0 17		               ldy  #>a2hexpos
.1582	20 02 15	               jsr  putscxy
.1585	68		               pla
.1586	28		               plp
.1587	60		               rts
.1588			setinverse
.1588	48		               pha
.1589	a9 12		               lda  #$12
.158b	20 d2 ff	               jsr  $ffd2
.158e	68		               pla
.158f	60		               rts
.1590			clrinverse
.1590	48		               pha
.1591	a9 92		               lda  #$92
.1593	20 d2 ff	               jsr  $ffd2
.1596	68		               pla
.1597	60		               rts

;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.1598			push
.1598	08		          php            ; stack : flg, pcl, pch
.1599	78		          sei
.159a	8d d4 15	          sta  ra        ; save a
.159d	68		          pla            ; stack : pcl, pch
.159e	8d d3 15	          sta  rp        ; save rp
.15a1	68		          pla            ; stack : pch
.15a2	8d d5 15	          sta  pc        ; save pcl
.15a5	68		          pla            ; stack : -
.15a6	8d d6 15	          sta  pc+1      ; save pch
.15a9	a5 fb		          lda  zpage1    ; get zpage1 low byte
.15ab	48		          pha            ; stack : zp1l
.15ac	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.15ae	48		          pha            ; stack : zp1h, zp1l
.15af	a5 fd		          lda  zpage2    ; get zpage2 low byte
.15b1	48		          pha            ; stack : zp2l, zp1h, zp1l
.15b2	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.15b4	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.15b5	ad d3 15	          lda  rp        ; get rp
.15b8	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.15b9	ad d4 15	          lda  ra        ; get a
.15bc	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.15bd	8a		          txa            ; get x
.15be	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.15bf	98		          tya            ; get y
.15c0	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.15c1	ad d6 15	          lda  pc+1      ; get pch
.15c4	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.15c5	ad d5 15	          lda  pc        ; get pcl
.15c8	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.15c9	ad d3 15	          lda  rp        ; get rp
.15cc	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.15cd	ad d4 15	          lda  ra        ; get a
.15d0	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.15d1	58		          cli
.15d2	60		          rts
>15d3	00		rp        .byte     0
>15d4	00		ra        .byte     0
>15d5	00 00		pc        .word     0
.15d7			pull
.15d7			pop
.15d7	78		          sei
.15d8	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.15d9	8d 0c 16	          sta  pc        ; save pcl
.15dc	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.15dd	8d 0d 16	          sta  pc+1      ; save pch
.15e0	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.15e1	a8		          tay            ; set y
.15e2	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.15e3	aa		          tax            ; set x
.15e4	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.15e5	8d 0b 16	          sta  ra        ; save a
.15e8	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.15e9	8d 0a 16	          sta  rp        ; save rp
.15ec	68		          pla            ; stack : zp2l, zp1h, zp1l
.15ed	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.15ef	68		          pla            ; stack : zp1h, zp1l
.15f0	85 fd		          sta  zpage2    ; get zpage2 High byte
.15f2	68		          pla            ; stack : zp1l
.15f3	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.15f5	68		          pla            ; stack :
.15f6	85 fb		          sta  zpage1    ; get zpage1 High byte
.15f8	ad 0d 16	          lda  pc+1      ; get pch
.15fb	48		          pha            ; stack : pch
.15fc	ad 0c 16	          lda  pc
.15ff	48		          pha            ; stack : pcl, pch
.1600	ad 0a 16	          lda  rp        ; get rp
.1603	48		          pha            ; stack : rp, pcl, pch
.1604	ad 0b 16	          lda  ra        ; set ra
.1607	58		          cli
.1608	28		          plp            ; stack : pcl, pch
.1609	60		          rts
>160a	00		rp        .byte     0
>160b	00		ra        .byte     0
>160c	00 00		pc        .word     0

;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.160e			blkfill
.160e	20 98 15	bf0            jsr  push
.1611	20 cf 16	               jsr  savezp1
.1614	84 fc		               sty  zpage1+1
.1616	a0 00		               ldy  #$00
.1618	84 fb		               sty  zpage1
.161a	91 fb		bf1            sta  (zpage1),y
.161c	c8		               iny
.161d	d0 fb		               bne  bf1
.161f	20 de 16	               jsr  restzp1
.1622	20 d7 15	               jsr  pop
.1625	60		               rts
.1626			memfill
.1626	20 98 15	               jsr  push
.1629	20 0e 16	mf1            jsr  blkfill
.162c	c8		               iny
.162d	ca		               dex
.162e	d0 f9		               bne  mf1
.1630	20 d7 15	               jsr  pop
.1633	60		               rts
.1634			memmove
.1634	20 98 15	               jsr  push
.1637	ba		               tsx            ; On se crée un pointeur ...
.1638	8a		               txa
.1639	18		               clc
.163a	69 0b		               adc  #11
.163c	a8		               tay
.163d	a2 06		               ldx  #$06
.163f	b9 00 01	nextbyte       lda  $0100,y
.1642	99 8e 16	               sta  words,y
.1645	c8		               iny
.1646	ca		               dex
.1647	d0 f6		               bne  nextbyte
.1649	ad 8e 16	               lda  s
.164c	8d 65 16	               sta  source+1
.164f	ad 8f 16	               lda  s+1
.1652	8d 66 16	               sta  source+2
.1655	ad 90 16	               lda  d
.1658	8d 62 16	               sta  destin+1
.165b	ad 91 16	               lda  d+1
.165e	8d 63 16	               sta  destin+2
.1661	ad ff ff	destin         lda  $ffff
.1664	8d ff ff	source         sta  $ffff
.1667	ee 62 16	               inc  destin+1
.166a	d0 03		               bne  src
.166c	ee 63 16	               inc  destin+2
.166f	ee 65 16	src            inc  source+1
.1672	d0 03		               bne  cnt
.1674	ee 66 16	               inc  source+2
.1677	ad 92 16	cnt            lda  compte
.167a	d0 08		               bne  decit
.167c	ad 93 16	               lda  compte+1
.167f	f0 09		               beq  fini
.1681	ce 93 16	               dec  compte+1
.1684	ce 92 16	decit          dec  compte
.1687	4c 61 16	               jmp  destin
.168a	20 d7 15	fini           jsr  pop
.168d	60		               rts
.168e			words
>168e	00 00		s         .word     $0000
>1690	00 00		d         .word     $0000
>1692	00 00		compte    .word     $0000
.1694			decword
.1694	20 98 15	               jsr  push
.1697	86 fd		               stx  zpage2
.1699	84 fe		               sty  zpage2+1
.169b	20 d7 15	               jsr  pop
.169e	60		               rts
.169f			inczp1
.169f	08		               php
.16a0	48		               pha
.16a1	e6 fb		               inc  zpage1
.16a3	a5 fb		               lda  zpage1
.16a5	d0 02		               bne  nopage
.16a7	e6 fc		               inc  zpage1+1
.16a9	68		nopage         pla
.16aa	28		               plp
.16ab	60		               rts
.16ac			deczp1
.16ac	08		                php
.16ad	48		                pha
.16ae	c6 fb		                dec  zpage1
.16b0	d0 02		                bne  nopage
.16b2	c6 fc		                dec  zpage1+1
.16b4	68		nopage          pla
.16b5	28		                plp
.16b6	60		                rts
.16b7			inczp2
.16b7	08		               php
.16b8	48		               pha
.16b9	e6 fd		               inc  zpage2
.16bb	a5 fd		               lda  zpage2
.16bd	d0 02		               bne  nopage
.16bf	e6 fe		               inc  zpage2+1
.16c1	68		nopage         pla
.16c2	28		               plp
.16c3	60		               rts
.16c4			deczp2
.16c4	08		               php
.16c5	48		               pha
.16c6	a5 fd		               lda  zpage2
.16c8	d0 02		               bne  nopage
.16ca	c6 fe		               dec  zpage2+1
.16cc	68		nopage         pla
.16cd	28		               plp
.16ce	60		               rts
.16cf			savezp1
.16cf	08		               php
.16d0	48		               pha
.16d1	a5 fb		               lda  zpage1
.16d3	8d 4b 17	               sta  zp1
.16d6	a5 fc		               lda  zpage1+1
.16d8	8d 4c 17	               sta  zp1+1
.16db	68		               pla
.16dc	28		               plp
.16dd	60		               rts
.16de			restzp1
.16de	08		               php
.16df	48		               pha
.16e0	ad 4b 17	               lda zp1
.16e3	85 fb		               sta zpage1
.16e5	ad 4c 17	               lda zp1+1
.16e8	85 fc		               sta zpage1+1
.16ea	68		               pla
.16eb	28		               plp
.16ec	60		               rts
.16ed			savezp2
.16ed	08		         php
.16ee	48		         pha
.16ef	a5 fd		         lda zpage2
.16f1	8d 4d 17	         sta zp2
.16f4	a5 fe		         lda zpage2+1
.16f6	8d 4e 17	         sta zp2+1
.16f9	68		         pla
.16fa	28		         plp
.16fb	60		         rts
.16fc			restzp2
.16fc	08		                php
.16fd	48		                pha
.16fe	ad 4d 17	                lda  zp2
.1701	85 fd		                sta  zpage2
.1703	ad 4e 17	                lda  zp2+1
.1706	85 fe		                sta  zpage2+1
.1708	68		                pla
.1709	28		                plp
.170a	60		                rts
.170b			xy2addr
.170b	08		                php
.170c	48		                pha
.170d	8a		                txa
.170e	48		                pha
.170f	98		                tya
.1710	48		                pha
.1711	ad 46 17	                lda     addr1+1
.1714	8d 48 17	                sta     addr2+1
.1717	ad 45 17	                lda     addr1
.171a	8d 47 17	                sta     addr2
.171d	c0 00		                cpy     #$00
.171f	f0 0f		                beq     addx
.1721	18		moreline        clc
.1722	6d 44 17	                adc     ymult
.1725	90 03		                bcc     norepy
.1727	ee 48 17	                inc     addr2+1
.172a	8d 47 17	norepy          sta     addr2
.172d	88		                dey
.172e	d0 f1		                bne     moreline
.1730	8a		addx            txa
.1731	18		                clc
.1732	6d 47 17	                adc     addr2
.1735	90 03		                bcc     thatsit
.1737	ee 48 17	                inc     addr2+1
.173a	8d 47 17	thatsit         sta     addr2
.173d	68		                pla
.173e	a8		                tay
.173f	68		                pla
.1740	aa		                tax
.1741	68		                pla
.1742	28		                plp
.1743	60		                rts
>1744	28		ymult          .byte     40
>1745	00 00		addr1          .word     $0000
>1747	00 00		addr2          .word     $0000
>1749	00 00		bytecnt        .word     $0000
>174b	00 00		zp1        .word   $0000
>174d	00 00		zp2        .word   $0000

;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>174f	01		a2hexcol       .byte     1              ; pour aputscxy
>1750	00		a2hexbkcol     .byte     %00000000
.1751			a2hexpos
>1751	00		a2hexpx        .byte     0              ; pour aputsxy
>1752	00		a2hexpy        .byte     0
>1753	24		a2hexprefix    .byte     "$"            ; pour aputs
>1754	00 00		a2hexstr       .word     $00
>1756	00 00		               .word     $00
>1758	00		               .byte     0              ; 0 end string
>1759	30 30 30 30	abin           .null     "00000000"
>175d	30 30 30 30 00
>1762	20 20 20 00	adec           .null     "   "
.1766			putahexfmtxy
.1766	20 98 15	               jsr  push
.1769	20 b5 17	               jsr  a2hex
.176c	ae 51 17	               ldx  a2hexpx
.176f	ac 52 17	               ldy  a2hexpy
.1772	20 4d 14	               jsr  gotoxy
.1775	a2 53		               ldx  #<a2hexprefix
.1777	a0 17		               ldy  #>a2hexprefix
.1779	20 36 14	               jsr  puts
.177c	20 d7 15	               jsr  pop
.177f	60		               rts
.1780			putahexfmt
.1780	20 98 15	               jsr  push
.1783	20 b5 17	               jsr  a2hex
.1786	a2 53		               ldx  #<a2hexprefix
.1788	a0 17		               ldy  #>a2hexprefix
.178a	20 36 14	               jsr  puts
.178d	20 d7 15	               jsr  pop
.1790	60		               rts
.1791			putahex
.1791	20 98 15	               jsr  push
.1794	20 b5 17	               jsr  a2hex
.1797	a2 54		               ldx  #<a2hexstr
.1799	a0 17		               ldy  #>a2hexstr
.179b	20 36 14	               jsr  puts
.179e	20 d7 15	               jsr  pop
.17a1	60		               rts
.17a2			nib2hex
.17a2	08		               php
.17a3	29 0f		               and  #$0f
.17a5	f8		               sed
.17a6	18		               clc
.17a7	69 90		               adc  #$90
.17a9	69 40		               adc  #$40
.17ab	d8		               cld
.17ac	28		               plp
.17ad	60		               rts
.17ae			lsra4bits
.17ae	08		               php
.17af	4a		               lsr
.17b0	4a		               lsr
.17b1	4a		               lsr
.17b2	4a		               lsr
.17b3	28		               plp
.17b4	60		               rts
.17b5			a2hex
.17b5	08		               php
.17b6	48		               pha
.17b7	48		               pha
.17b8	20 ae 17	               jsr  lsra4bits
.17bb	20 a2 17	               jsr  nib2hex
.17be	8d 54 17	               sta  a2hexstr
.17c1	68		               pla
.17c2	20 a2 17	               jsr  nib2hex
.17c5	8d 55 17	               sta  a2hexstr+1
.17c8	a9 00		               lda  #$00                ; set end of string
.17ca	8d 56 17	               sta  a2hexstr+2
.17cd	68		               pla
.17ce	28		               plp
.17cf	60		               rts
.17d0			xy2hex
.17d0	20 98 15	               jsr  push
.17d3	20 b5 17	               jsr  a2hex
.17d6	8a		               txa
.17d7	48		               pha
.17d8	20 ae 17	               jsr  lsra4bits
.17db	20 a2 17	               jsr  nib2hex
.17de	8d 54 17	               sta  a2hexstr
.17e1	68		               pla
.17e2	20 a2 17	               jsr  nib2hex
.17e5	8d 55 17	               sta  a2hexstr+1
.17e8	98		               tya
.17e9	48		               pha
.17ea	20 ae 17	               jsr  lsra4bits
.17ed	20 a2 17	               jsr  nib2hex
.17f0	8d 56 17	               sta  a2hexstr+2
.17f3	68		               pla
.17f4	20 a2 17	               jsr  nib2hex
.17f7	8d 57 17	               sta  a2hexstr+3
.17fa	a9 00		               lda  #$00                ; 0 ended string
.17fc	8d 58 17	               sta  a2hexstr+4
.17ff	20 d7 15	               jsr  pop
.1802			atobin
.1802	20 98 15	               jsr  push
.1805	a2 08		               ldx  #8
.1807	a0 00		               ldy  #0
.1809	18		               clc
.180a	2a		nextbit        rol
.180b	48		               pha
.180c	69 00		               adc  #$00
.180e	29 01		               and  #$01
.1810	20 a2 17	               jsr  nib2hex
.1813	99 59 17	               sta  abin,y
.1816	68		               pla
.1817	c8		               iny
.1818	ca		               dex
.1819	d0 ef		               bne  nextbit
.181b	a9 00		               lda  #0
.181d	99 59 17	               sta  abin,y
.1820	20 d7 15	               jsr  pull
.1823	60		               rts
.1824			putabin
.1824	20 02 18	               jsr     atobin
.1827	20 98 15	               jsr     push
.182a	a2 59		               ldx     #<abin
.182c	a0 17		               ldy     #>abin
.182e	20 36 14	               jsr     puts
.1831	20 d7 15	               jsr     pop
.1834	60		               rts
.1835			printabin
.1835	20 98 15	               jsr     push
.1838	a2 59		               ldx     #<abin
.183a	a0 17		               ldy     #>abin
.183c	20 36 14	               jsr     puts
.183f	20 d7 15	               jsr     pop
.1842	60		               rts
.1843			putabinfmt
.1843	08		               php
.1844	48		               pha
.1845	a9 25		               lda     #"%"
.1847	20 30 14	               jsr     putch
.184a	68		               pla
.184b	20 24 18	               jsr     putabin
.184e	28		               plp
.184f	60		               rts
.1850			putabinxy
.1850	20 4d 14	               jsr     gotoxy
.1853	20 24 18	               jsr     putabin
.1856	60		               rts
.1857			putabinfmtxy
.1857	20 4d 14	               jsr     gotoxy
.185a	20 43 18	               jsr     putabinfmt
.185d	60		               rts
.185e			atodec
.185e	20 98 15	               jsr  push
.1861	f8		               sed
.1862	aa		               tax
.1863	a0 00		               ldy  #$00
.1865	a9 00		               lda  #$00
.1867	18		nextbit        clc
.1868	69 01		               adc  #$01
.186a	90 01		               bcc  decx
.186c	c8		               iny
.186d	ca		decx           dex
.186e	d0 f7		               bne  nextbit
.1870	48		               pha
.1871	98		               tya
.1872	20 a2 17	               jsr  nib2hex
.1875	8d 62 17	               sta  adec
.1878	68		               pla
.1879	48		               pha
.187a	20 a2 17	               jsr  nib2hex
.187d	8d 64 17	               sta  adec+2
.1880	68		               pla
.1881	6a		               ror
.1882	6a		               ror
.1883	6a		               ror
.1884	6a		               ror
.1885	20 a2 17	               jsr  nib2hex
.1888	8d 63 17	               sta  adec+1
.188b	d8		               cld
.188c	20 d7 15	               jsr  pull
.188f	60		               rts
>1890	00 00 00	buffer         .byte     0,0,0

;******  Return to file: v20start.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L v20start.txt -o v20start.prg v20start.asm
; Thu Jul 11 15:02:52 2024

;Offset	;Hex		;Source

;******  Processing input file: v20start.asm

="20240711-a"		version = "20240711-a"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-v20ex.asm

>1201	0b 12 0a 00	.word (+), 10       ;$1201 : Debut + 10 =$120b, $0010
>1205	9e 34 36 32	.null $9e, "4621"   ;$1205 : "sys4621" = jsr #120d
>1209	31 00
>120b	00 00		+ .word 0           ;$120b : $0000

;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: v20start.asm

=1			TITLELINE=1
=6			BINLINE=6
=6			BINCOLM=6
=$10			XVAL=$10
=$40			XCPX=$40
=$03			DIFF=$03
.120d	20 04 14	main            jsr scrmaninit
.1210	48		               pha
.1211	a9 0e		               lda #(vnoir*16+(vbleu|8))
.1213	8d 0f 90	               sta  vicscrbrd
.1216	68		               pla
.1217	48		               pha
.1218	a9 01		               lda  #vblanc
.121a	8d 86 02	               sta  bascol
.121d	68		               pla
.121e	08		               php
.121f	48		               pha
.1220	a9 0e		               lda  #14
.1222	20 d2 ff	               jsr  $ffd2
.1225	68		               pla
.1226	28		               plp
.1227	a2 a6		               ldx #<string3
.1229	a0 13		               ldy #>string3
.122b	20 a0 14	               jsr putsxy
.122e	a9 10		                lda #XVAL    ; initialise ...
.1230	8d fa 13	                sta count   ; ...le compteur
.1233	ad fa 13	next            lda count
.1236	38		                sec
.1237	ed fb 13	                sbc tstval
.123a	8d fc 13	                sta result
.123d	ae fa 13	                ldx count
.1240	a9 00		                lda #$00
.1242	48		                pha
.1243	28		                plp
.1244	ec fb 13	                cpx tstval
.1247	08		                php
.1248	68		                pla
.1249	20 0b 18	                jsr atobin
.124c	48		                pha
.124d	48		               pha
.124e	a9 07		               lda  #vyellow
.1250	8d 86 02	               sta  bascol
.1253	68		               pla
.1254	20 a1 15	               jsr  push
.1257	a2 06		               ldx  #BINCOLM
.1259	a0 07		               ldy  #BINLINE+1
.125b	20 56 14	               jsr  gotoxy
.125e	20 e0 15	               jsr  pop
.1261	a9 25		               lda  #"%"
.1263	20 39 14	               jsr  putch
.1266	20 a1 15	               jsr  push
.1269	a2 62		isx            ldx  #<abin
.126b	a0 17		isy            ldy  #>abin
.126d	20 3f 14	               jsr  puts
.1270	20 e0 15	               jsr  pull
.1273	8a		                txa
.1274	20 be 17	                jsr a2hex
.1277	48		               pha
.1278	a9 03		               lda  #vcyan
.127a	8d 86 02	               sta  bascol
.127d	68		               pla
.127e	20 a1 15	               jsr  push
.1281	a2 08		               ldx  #BINCOLM+2
.1283	a0 09		               ldy  #BINLINE+3
.1285	20 56 14	               jsr  gotoxy
.1288	20 e0 15	               jsr  pop
.128b	a9 24		               lda  #"$"
.128d	20 39 14	               jsr  putch
.1290	20 a1 15	               jsr  push
.1293	a2 5d		isx            ldx  #<a2hexstr
.1295	a0 17		isy            ldy  #>a2hexstr
.1297	20 3f 14	               jsr  puts
.129a	20 e0 15	               jsr  pull
.129d	20 a1 15	               jsr  push
.12a0	a2 06		               ldx  #BINCOLM
.12a2	a0 0b		               ldy  #BINLINE+5
.12a4	20 56 14	               jsr  gotoxy
.12a7	20 e0 15	               jsr  pop
.12aa	a9 24		               lda  #"$"
.12ac	20 39 14	               jsr  putch
.12af	20 a1 15	               jsr  push
.12b2	a2 5d		isx            ldx  #<a2hexstr
.12b4	a0 17		isy            ldy  #>a2hexstr
.12b6	20 3f 14	               jsr  puts
.12b9	20 e0 15	               jsr  pull
.12bc	ad fb 13	                lda tstval
.12bf	20 be 17	                jsr a2hex
.12c2	48		               pha
.12c3	a9 03		               lda  #vcyan
.12c5	8d 86 02	               sta  bascol
.12c8	68		               pla
.12c9	20 a1 15	               jsr  push
.12cc	a2 11		               ldx  #BINCOLM+11
.12ce	a0 09		               ldy  #BINLINE+3
.12d0	20 56 14	               jsr  gotoxy
.12d3	20 e0 15	               jsr  pop
.12d6	a9 24		               lda  #"$"
.12d8	20 39 14	               jsr  putch
.12db	20 a1 15	               jsr  push
.12de	a2 5d		isx            ldx  #<a2hexstr
.12e0	a0 17		isy            ldy  #>a2hexstr
.12e2	20 3f 14	               jsr  puts
.12e5	20 e0 15	               jsr  pull
.12e8	20 a1 15	               jsr  push
.12eb	a2 0c		               ldx  #BINCOLM+6
.12ed	a0 0b		               ldy  #BINLINE+5
.12ef	20 56 14	               jsr  gotoxy
.12f2	20 e0 15	               jsr  pop
.12f5	a9 24		               lda  #"$"
.12f7	20 39 14	               jsr  putch
.12fa	20 a1 15	               jsr  push
.12fd	a2 5d		isx            ldx  #<a2hexstr
.12ff	a0 17		isy            ldy  #>a2hexstr
.1301	20 3f 14	               jsr  puts
.1304	20 e0 15	               jsr  pull
.1307	ad fc 13	                lda result
.130a	20 be 17	                jsr a2hex
.130d	48		               pha
.130e	a9 03		               lda  #vcyan
.1310	8d 86 02	               sta  bascol
.1313	68		               pla
.1314	20 a1 15	               jsr  push
.1317	a2 11		               ldx  #BINCOLM+11
.1319	a0 0b		               ldy  #BINLINE+5
.131b	20 56 14	               jsr  gotoxy
.131e	20 e0 15	               jsr  pop
.1321	a9 24		               lda  #"$"
.1323	20 39 14	               jsr  putch
.1326	20 a1 15	               jsr  push
.1329	a2 5d		isx            ldx  #<a2hexstr
.132b	a0 17		isy            ldy  #>a2hexstr
.132d	20 3f 14	               jsr  puts
.1330	20 e0 15	               jsr  pull
.1333	68		                pla
.1334	20 be 17	                jsr a2hex
.1337	48		               pha
.1338	a9 03		               lda  #vcyan
.133a	8d 86 02	               sta  bascol
.133d	68		               pla
.133e	20 a1 15	               jsr  push
.1341	a2 10		               ldx  #BINCOLM+10
.1343	a0 07		               ldy  #BINLINE+1
.1345	20 56 14	               jsr  gotoxy
.1348	20 e0 15	               jsr  pop
.134b	a9 24		               lda  #"$"
.134d	20 39 14	               jsr  putch
.1350	20 a1 15	               jsr  push
.1353	a2 5d		isx            ldx  #<a2hexstr
.1355	a0 17		isy            ldy  #>a2hexstr
.1357	20 3f 14	               jsr  puts
.135a	20 e0 15	               jsr  pull
.135d	ee fa 13	                inc count
.1360	ad fb 13	                lda tstval
.1363	18		                clc
.1364	69 03		                adc #DIFF
.1366	8d fb 13	                sta tstval
.1369	20 70 13	                jsr delay65536
.136c	4c 6c 13	ici             jmp ici
.136f	60		                rts
.1370			delay65536
.1370	20 a1 15	                jsr push
.1373	a2 00		                ldx #$00
.1375	a0 00		                ldy #$00
.1377	88		waity           dey
.1378	d0 fd		                bne waity
.137a	ca		waitx           dex
.137b	d0 fa		                bne waity
.137d	20 e0 15	                jsr pop
.1380	60		                rts
>1381	02 01 54 45	string1        .null    BINCOLM-4,TITLELINE,"test drapeaux cpu"
>1385	53 54 20 44 52 41 50 45 41 55 58 20 43 50 55 00
>1395	01 03 46 4c	string2        .null    BINCOLM-5,BINLINE-3,"flags:nv-bdizc"
>1399	41 47 53 3a 4e 56 2d 42 44 49 5a 43 00
>13a6	01 01 d0 c1	string3        .null    1,1,"PAR: DANIEL LAFRANCE"
>13aa	d2 3a 20 c4 c1 ce c9 c5 cc 20 cc c1 c6 d2 c1 ce
>13ba	c3 c5 00
>13bd	0f 07 28 20	string4        .null    BINCOLM+9,BINLINE+1, "(   )"
>13c1	20 20 29 00
>13c5	07 04 5e 5e	string5        .byte    BINCOLM+1,BINLINE-2,94,94,94,94,94,94,94,94,0
>13c9	5e 5e 5e 5e 5e 5e 00
>13d0	07 05 7d 7d	string6        .byte    BINCOLM+1,BINLINE-1,125,125,125,125,125,125,125,125,0
>13d4	7d 7d 7d 7d 7d 7d 00
>13db	06 09 58 3d	string7        .null    BINCOLM,BINLINE+3, "x=$   cpx #$"
>13df	24 20 20 20 43 50 58 20 23 24 00
>13ea	06 0b 24 20	string8        .null    BINCOLM,BINLINE+5, "$   - $   = $"
>13ee	20 20 2d 20 24 20 20 20 3d 20 24 00
>13fa	10		count          .byte    XVAL
>13fb	40		tstval         .byte    XCPX
>13fc	00		result         .byte    0
>13fd	00		row            .byte    0
>13fe	00		lin            .byte    0
>13ff	34 12		adresse        .word     $1234

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-vic20-kernal.asm

=$90			kiostatus   =   $90     ; Kernal I/O status word (st) (byte)
=$b7			curfnlen    =   $b7     ; Current filename length (byte)
=$b9			cursecadd   =   $b9     ; Current secondary address (byte)
=$ba			curdevno    =   $ba     ; Current device number (byte)
=$bb			curfptr     =   $bb     ; Current file pointer (word)
=$fb			zpage1      =   $fb     ; zero page 1 address (word)
=$fd			zpage2      =   $fd     ; zero page 2 address (word)
=$0286			bascol      =   $0286   ; basic next chr colscreenram (byte)
=$1000			scrnramex   =   $1000   ; video character ram (with ram expansion)
=$1200			basicstaex  =   $1200   ; basic start address (with ram expansion)
=$9400			colorramex  =   $9400   ; video color ram (with ram expansion)
=$1e00			scrnram     =   $1e00   ; video character ram (no ram expansion)
=$1000			basicsta    =   $1000   ; basic start address (no ram expansion)
=$9600			colorram    =   $9600   ; video color ram (no ram expansion)
=$1e00			scrram0     =   scrnram
=7936			scrram1     =   scrram0+$0100
=$9600			colram0     =   colorram
=38656			colram1     =   colram0+$0100
=$8000			chargen     =   $8000
=$9000			ioblock     =   $9000   ;
=$9000			vicchip     =   $9000
=$a000			ramblk4     =   $a000
=$c000			basicrom    =   $c000
=$e000			kernalrom   =   $e000
=$03			bstop       =   $03      ;stop
=$05			bwhite      =   $05      ;set color white
=$08			block       =   $08      ;lock the charset
=$09			bunlock     =   $09      ;unlock the charset
=$0d			bcarret     =   $0d
=$0e			btext       =   $0e
=$11			bcrsdn      =   $11      ;cursor down 1 line
=$12			brevcol     =   $12
=$13			bhome       =   $13
=$14			bdelete     =   $14
=$1c			bred        =   $1c
=$1d			bcuright    =   $1d
=$1e			bgreen      =   $1e
=$1f			bblue       =   $1f
=$81			borange     =   $81
=$83			blrun       =   $83
=$85			bfkey1      =   $85
=$86			bfkey2      =   $86
=$87			bfkey3      =   $87
=$88			bfkey4      =   $88
=$89			bfkey5      =   $89
=$8a			bfkey6      =   $8a
=$8b			bfkey7      =   $8b
=$8c			bfkey8      =   $8c
=$8d			bcarret1    =   $8d
=$8e			bgraph      =   $8e
=$90			bblack      =   $90
=$91			bcuup       =   $91
=$92			brevoff     =   $92
=$93			bclear      =   $93
=$94			binsert     =   $94
=$95			bbrown      =   $95
=$96			bltred      =   $96
=$97			bdkgrey     =   $97
=$98			bmdgrey     =   $98
=$99			bltgreen    =   $99
=$9a			bltblue     =   $9a
=$9b			bltgrey     =   $9b
=$9c			bmagenta    =   $9c
=$9d			bculeft     =   $9d
=$9e			byellow     =   $9e
=$9f			bcyan       =   $9f
=$0286			carcol      =   $0286
=$030a			ieval       =   $030a
=$73			chrget      =   $73
=$79			chrgot      =   $79
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$ffb4			stalk   = $ffb4 ; Send Talk command to serial bus.
=$ffb1			slisten = $ffb1 ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$ffa5			acptr   = $ffa5 ; jmp $ef19 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ffa8			ciout   = $ffa8 ; jmp $eee4 Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ffb1			listen  = $ffb1 ; jmp ($ee17) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f542 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe82 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe73 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ffde			rdtim   = $ffde ; jmp $f760 Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe57 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd52 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f675 Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $eb1e Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $eec0 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe50 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe66 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fe49 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f767 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe6f Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ee14 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $eec1 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f734 Update the system clock
=$ffae			unlsn   = $ffae ; jmp $ef04 Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $eef6 Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $f675 Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$f1ca			kd_chrout    =   $f1ca
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.1401	4c 0d 12	pgmstart        jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-vic20-vic.asm

=$9000			vic = $9000			; VicII C64 memorymap base address
=36864			vichorcnt = vic+$00	; $9000, 36864 Bit 0-6 Horizontal centering.
=36865			vicvercnt = vic+$01	; $9001, 36865 Vertical centering.
=36866			viccolnum = vic+$02	; $9002, 36866 Bit 0-6 set # of column.
=36867			vicrownum = vic+$03	; $9003, 36867 Bit 1-6 set # of rows.
=36868			vicsrastr = vic+$04	; $9004, 36868 TV raster beam line.
=36869			viccstart = vic+$05	; $9005, 36869 Bit 0-3 start of character memory (dflt=0).
=36870			vicpenhor = vic+$06	; $9006, 36870 Horizontal position of light pen.
=36871			vicpenver = vic+$07	; $9007, 36871 Vertical position of light pen
=36872			vicpadhor = vic+$08	; $9008, 36872 Digitized value of paddle X
=36873			vicpadver = vic+$09	; $9009, 36873 Digitized value of paddle Y
=36874			vicosclhz = vic+$0a	; $900a, 36874 Oscillator 1 freq. (low) (on: 128-255)
=36875			vicoscmhz = vic+$0b	; $900b, 36875 Oscillator 2 freq. (medium) (on: 128-255)
=36876			vicoschhz = vic+$0c	; $900c, 36876 Oscillator 3 freq. (high) (on: 128-255)
=36877			vicnoizhz = vic+$0d	; $900d, 36877 Noise source freq.
=36878			vicvolume = vic+$0e	; $900e, 36878 Bit 0-3 set volume of all sound.
=36879			vicscrbrd = vic+$0f	; $900f, 36879 Screen and border color register.
=36879			vicbordcol=vicscrbrd
=36879			vicbackcol=vicscrbrd

;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-Vic20-basic2.asm

=$c3bb			b_opentxtspc  = $c3bb ;  1) Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$c408			b_chkavailmem = $c408 ;  2) Check available Memory. *1  ;a-y;---; Array top $yyaa
=$c435			b_outofmem    = $c435 ;  3) ?Out of memory.             ;---;---;
=$c437			b_errormesg   = $c437 ;  4) Send BASIC error message.   ;a--;---; a = errno
=$e467			b_warmstart   = $e467 ;  5) Basic warm start.           ;---;---;
=$c48a			b_chrget      = $c48a ;  6) Main CHRGET entry.          ;---;---;
=$c49c			b_newline     = $c49c ;  7) Crunch tokens, insert line. ;-x-;---; x = buff len
=$c52a			b_clrready    = $c52a ;  8) Fix chaining CLR and READY. ;---;---;
=$c533			b_fixchaining = $c533 ;  9) Fix chaining.               ;---;---;
=$c560			b_kbgetline   = $c560 ; 10) Recieve line from keyboard.
=$c579			b_crunchtkns  = $c579 ; 11) Crunch token. *7            ;-x-;---: x = buff len
=$c613			b_findline    = $c613 ; 12) Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$c642			b_new         = $c642 ; 13) Do NEW                      ;---;---;
=$c659			b_resetclr    = $c659 ; 14) Reset BASIC and do CLR      ;---;---;
=$c65e			b_clr         = $c65e ; 15) Do CLR                      ;---;---;
=$c68e			b_rstchrget   = $c68e ; 17) Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$c857			b_continue    = $c857 ; 18) Do CONTINUE.                ;a-y;---; curline $yyaa
=$c96b			b_getint      = $c96b ; 19) Get int from BASIX text.    ;---;---;
=$cad3			b_sndcr       = $cad3 ; 20) Send RETURN, LF in scr mode.;---;a--; a = LF
=$cad7			b_sndcrlf     = $cad7 ; 21) Send RETURN, LINEFEED.      ;---;a--; a = LF
=$cb1e			b_outstr_ay   = $cb1e ; 22) Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$cb1e			b_puts        = b_outstr_ay
=$cb24			b_outstrprep  = $cb24 ; 23) Print precomputated string. ;a--;---; a = strlen
=$cb45			b_printqm     = $cb45 ; 24) Print '?'.                  ;---;---;
=$cb47			b_sendchar    = $cb47 ; 25) Send char in a to device.   ;a--;a--; a = char
=$cd8a			b_frmnum      = $cd8a ; Evaluate numeric expression and/or check for data type mismatch
=$cd9e			b_evalexpr    = $cd9e ; 26) Evaluate expression.
=$cefd			b_chk4comma   = $cefd ; 27) Check for coma.             ;---;a--; a = char
=$cefa			b_chk4lpar    = $cefa ; 28) check for '('.              ;---;a--; a = char
=$cef7			b_chk4rpar    = $cef7 ; 29) check for ')'.              ;---;a--; a = char
=$cf08			b_syntaxerr   = $cf08 ; 30) send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; 31) find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; 32) Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; 33) Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; 34) Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; 35) Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; 36) Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; 37) Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; 38) Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; 39) Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; 40) Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; 41) Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; 42) Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; 43) Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; 44) Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; 45) Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; 46) Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; 47) Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; 48) Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; 49) Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; 50) Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-Vic20-basic2.asm

.1404			scrmaninit
.1404	20 a1 15	               jsr  push
.1407	a9 00		               lda  #vnoir
.1409	2a		               rol
.140a	2a		               rol
.140b	2a		               rol
.140c	2a		               rol
.140d	09 05		               ora  #vvert         ; Du vert pour ...
.140f	09 08		               ora  #%00001000     ; ???
.1411	8d 0f 90	               sta  vicbackcol     ; ... le fond d'écran.
.1414	a9 01		               lda  #vblanc        ; Du blanc pour ...
.1416	8d 86 02	               sta  bascol         ; les caractères.
.1419	a9 02		               lda  #%00000010     ; ???
.141b	8d 00 90	               sta  vichorcnt      ; ???
.141e	20 25 14	               jsr  cls            ; On efface l'écran
.1421	20 e0 15	               jsr  pop
.1424	60		               rts
.1425			cls
.1425	08		               php
.1426	48		               pha
.1427	a9 93		               lda  #$93
.1429	20 39 14	               jsr  putch
.142c	a9 04		               lda  #$04
.142e	8d 00 90	               sta  vichorcnt
.1431	a9 1a		               lda  #$1a
.1433	8d 01 90	               sta  vicvercnt
.1436	68		               pla
.1437	28		               plp
.1438	60		               rts
.1439			putch
.1439	08		               php
.143a	20 d2 ff	               jsr  $ffd2
.143d	28		               plp
.143e	60		               rts
.143f			puts
.143f	20 a1 15	               jsr  push
.1442	86 fb		               stx  zpage1
.1444	84 fc		               sty  zpage1+1
.1446	a0 00		               ldy  #$00
.1448	b1 fb		next           lda  (zpage1),y
.144a	f0 06		               beq  out
.144c	20 39 14	               jsr  putch
.144f	c8		               iny
.1450	d0 f6		               bne  next
.1452	20 e0 15	out            jsr  pop
.1455	60		               rts
.1456			gotoxy
.1456	20 a1 15	               jsr  push
.1459	98		               tya
.145a	48		               pha
.145b	8a		               txa
.145c	a8		               tay
.145d	68		               pla
.145e	aa		               tax
.145f	18		               clc
.1460	20 f0 ff	               jsr  kplot
.1463	20 e0 15	               jsr  pop
.1466	60		               rts
.1467			cursor
=$0286			bascol    =    $0286
.1467	08		               php
.1468	48		               pha
.1469	90 12		               bcc  restore
.146b	20 f0 ff	               jsr  kplot
.146e	8c 8f 14	               sty  cx
.1471	8e 90 14	               stx  cy
.1474	ad 86 02	               lda  bascol
.1477	8d 91 14	               sta  bcol
.147a	4c 8c 14	               jmp  out
.147d	ae 90 14	restore        ldx  cy
.1480	ac 8f 14	               ldy  cx
.1483	20 f0 ff	               jsr  kplot
.1486	ad 91 14	               lda  bcol
.1489	8d 86 02	               sta  bascol
.148c	68		out            pla
.148d	28		               plp
.148e	60		               rts
>148f	00		cx   .byte     $00
>1490	00		cy   .byte     $00
>1491	00		bcol .byte     $00
.1492			cursave
.1492	08		               php
.1493	38		               sec
.1494	20 67 14	               jsr  cursor
.1497	28		               plp
.1498	60		               rts
.1499			curput
.1499	08		               php
.149a	18		               clc
.149b	20 67 14	               jsr  cursor
.149e	28		               plp
.149f	60		               rts
.14a0			putsxy
.14a0	08		               php
.14a1	8e 05 15	               stx  straddr        ; Save start addr
.14a4	8c 06 15	               sty  straddr+1
.14a7	48		               pha                 ; Sauvegarde rA
.14a8	98		               tya                 ; Prepare la ...
.14a9	48		               pha                 ; ... sauvegarde de rY.
.14aa	8a		               txa                 ; Prepare la ...
.14ab	48		               pha                 ; ... sauvegarde de rX.
.14ac	a5 fb		               lda  zpage1         ; Save zpage1
.14ae	8d 09 15	               sta  zp1
.14b1	a5 fc		               lda  zpage1+1
.14b3	8d 0a 15	               sta  zp1+1
.14b6	ad 06 15	               lda  straddr+1      ; Set zpage1
.14b9	85 fc		               sta  zpage1+1
.14bb	ad 05 15	               lda  straddr
.14be	85 fb		               sta  zpage1
.14c0	a0 00		               ldy  #$00           ; Set z to zptr offset 0 ...
.14c2	b1 fb		               lda  (zpage1),y     ; Load x param
.14c4	8d 07 15	               sta  px             ; and save it
.14c7	c8		               iny                 ; next param
.14c8	b1 fb		               lda  (zpage1),y     ; load y param
.14ca	8d 08 15	               sta  py             ; and save it
.14cd	aa		               tax                 ; tfr a in x reg
.14ce	ac 07 15	               ldy  px             ; load x param in y
.14d1	20 56 14	               jsr  gotoxy         ; position cursor
.14d4	18		               clc                 ; adjusting start addr
.14d5	ee 05 15	               inc  straddr
.14d8	ad 05 15	               lda  straddr
.14db	8d 05 15	               sta  straddr
.14de	90 03		               bcc  norep1
.14e0	ee 06 15	               inc  straddr+1
.14e3	ee 05 15	norep1         inc  straddr
.14e6	90 03		               bcc  norep2
.14e8	ee 06 15	               inc  straddr+1
.14eb	ad 05 15	norep2         lda  straddr
.14ee	ac 06 15	               ldy  straddr+1
.14f1	20 3f 14	               jsr  puts
.14f4	ad 0a 15	               lda  zp1+1
.14f7	85 fc		               sta  zpage1+1
.14f9	ad 09 15	               lda  zp1
.14fc	85 fb		               sta  zpage1
.14fe	68		               pla
.14ff	aa		               tax
.1500	68		               pla
.1501	a8		               tay
.1502	68		               pla
.1503	28		               plp
.1504	60		               rts
>1505	00 00		straddr   .word     $00
>1507	00		px        .byte     $00
>1508	00		py        .byte     $00
>1509	00 00		zp1       .word     $00
.150b			putscxy
.150b	08		               php
.150c	8e 61 15	               stx  straddr        ;save start addr
.150f	8c 62 15	               sty  straddr+1
.1512	48		               pha                 ;save a,y,x
.1513	98		               tya
.1514	48		               pha
.1515	8a		               txa
.1516	48		               pha
.1517	a5 fb		               lda  zpage1         ;save zpage1
.1519	8d 64 15	               sta  zp1
.151c	a5 fc		               lda  zpage1+1
.151e	8d 65 15	               sta  zp1+1
.1521	ad 62 15	               lda  straddr+1      ;set zpage1
.1524	85 fc		               sta  zpage1+1
.1526	ad 61 15	               lda  straddr
.1529	85 fb		               sta  zpage1
.152b	ad 86 02	               lda  bascol         ; save  current basiccolor
.152e	8d 63 15	               sta  bc
.1531	a0 00		               ldy  #$00           ; set y to zptr offset 0
.1533	b1 fb		               lda  (zpage1),y     ; load color param
.1535	8d 86 02	               sta  bascol         ; and set it
.1538	18		               clc                 ; adjusting start addr
.1539	ee 61 15	               inc  straddr
.153c	90 03		               bcc  norep1
.153e	ee 62 15	               inc  straddr+1
.1541	ad 61 15	norep1         lda  straddr        ; get address of remainder
.1544	ac 62 15	               ldy  straddr+1
.1547	20 a0 14	               jsr  putsxy         ; print string at x,y pos.
.154a	ad 63 15	               lda  bc             ; restoring basic color
.154d	8d 86 02	               sta  bascol
.1550	ad 65 15	               lda  zp1+1          ; replacing zpage1 for basic
.1553	85 fc		               sta  zpage1+1
.1555	ad 64 15	               lda  zp1
.1558	85 fb		               sta  zpage1
.155a	68		               pla
.155b	aa		               tax
.155c	68		               pla
.155d	a8		               tay
.155e	68		               pla
.155f	28		               plp
.1560	60		               rts
>1561	00 00		straddr        .word      $00
>1563	00		bc             .byte      $00
>1564	00 00		zp1            .word      $00
.1566			putrahex
.1566	08		               php
.1567	48		               pha
.1568	20 be 17	               jsr  a2hex
.156b	a9 5d		               lda  #<a2hexstr
.156d	a0 17		               ldy  #>a2hexstr
.156f	20 3f 14	               jsr  puts
.1572	68		               pla
.1573	28		               plp
.1574	60		               rts
.1575			kputrahexxy
.1575			bputrahexxy
.1575			putrahexxy
.1575	08		               php
.1576	20 be 17	               jsr  a2hex
.1579	a9 5a		               lda  #<a2hexpos
.157b	a0 17		               ldy  #>a2hexpos
.157d	20 a0 14	               jsr  putsxy
.1580	68		               pla
.1581	28		               plp
.1582	60		               rts
.1583			putrahexcxy
.1583	08		               php
.1584	20 be 17	               jsr  a2hex
.1587	a9 5a		               lda  #<a2hexpos
.1589	a0 17		               ldy  #>a2hexpos
.158b	20 0b 15	               jsr  putscxy
.158e	68		               pla
.158f	28		               plp
.1590	60		               rts
.1591			setinverse
.1591	48		               pha
.1592	a9 12		               lda  #$12
.1594	20 d2 ff	               jsr  $ffd2
.1597	68		               pla
.1598	60		               rts
.1599			clrinverse
.1599	48		               pha
.159a	a9 92		               lda  #$92
.159c	20 d2 ff	               jsr  $ffd2
.159f	68		               pla
.15a0	60		               rts

;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.15a1			push
.15a1	08		          php            ; stack : flg, pcl, pch
.15a2	78		          sei
.15a3	8d dd 15	          sta  ra        ; save a
.15a6	68		          pla            ; stack : pcl, pch
.15a7	8d dc 15	          sta  rp        ; save rp
.15aa	68		          pla            ; stack : pch
.15ab	8d de 15	          sta  pc        ; save pcl
.15ae	68		          pla            ; stack : -
.15af	8d df 15	          sta  pc+1      ; save pch
.15b2	a5 fb		          lda  zpage1    ; get zpage1 low byte
.15b4	48		          pha            ; stack : zp1l
.15b5	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.15b7	48		          pha            ; stack : zp1h, zp1l
.15b8	a5 fd		          lda  zpage2    ; get zpage2 low byte
.15ba	48		          pha            ; stack : zp2l, zp1h, zp1l
.15bb	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.15bd	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.15be	ad dc 15	          lda  rp        ; get rp
.15c1	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.15c2	ad dd 15	          lda  ra        ; get a
.15c5	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.15c6	8a		          txa            ; get x
.15c7	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.15c8	98		          tya            ; get y
.15c9	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.15ca	ad df 15	          lda  pc+1      ; get pch
.15cd	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.15ce	ad de 15	          lda  pc        ; get pcl
.15d1	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.15d2	ad dc 15	          lda  rp        ; get rp
.15d5	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.15d6	ad dd 15	          lda  ra        ; get a
.15d9	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.15da	58		          cli
.15db	60		          rts
>15dc	00		rp        .byte     0
>15dd	00		ra        .byte     0
>15de	00 00		pc        .word     0
.15e0			pull
.15e0			pop
.15e0	78		          sei
.15e1	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.15e2	8d 15 16	          sta  pc        ; save pcl
.15e5	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.15e6	8d 16 16	          sta  pc+1      ; save pch
.15e9	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.15ea	a8		          tay            ; set y
.15eb	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.15ec	aa		          tax            ; set x
.15ed	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.15ee	8d 14 16	          sta  ra        ; save a
.15f1	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.15f2	8d 13 16	          sta  rp        ; save rp
.15f5	68		          pla            ; stack : zp2l, zp1h, zp1l
.15f6	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.15f8	68		          pla            ; stack : zp1h, zp1l
.15f9	85 fd		          sta  zpage2    ; get zpage2 High byte
.15fb	68		          pla            ; stack : zp1l
.15fc	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.15fe	68		          pla            ; stack :
.15ff	85 fb		          sta  zpage1    ; get zpage1 High byte
.1601	ad 16 16	          lda  pc+1      ; get pch
.1604	48		          pha            ; stack : pch
.1605	ad 15 16	          lda  pc
.1608	48		          pha            ; stack : pcl, pch
.1609	ad 13 16	          lda  rp        ; get rp
.160c	48		          pha            ; stack : rp, pcl, pch
.160d	ad 14 16	          lda  ra        ; set ra
.1610	58		          cli
.1611	28		          plp            ; stack : pcl, pch
.1612	60		          rts
>1613	00		rp        .byte     0
>1614	00		ra        .byte     0
>1615	00 00		pc        .word     0

;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.1617			blkfill
.1617	20 a1 15	bf0            jsr  push
.161a	20 d8 16	               jsr  savezp1
.161d	84 fc		               sty  zpage1+1
.161f	a0 00		               ldy  #$00
.1621	84 fb		               sty  zpage1
.1623	91 fb		bf1            sta  (zpage1),y
.1625	c8		               iny
.1626	d0 fb		               bne  bf1
.1628	20 e7 16	               jsr  restzp1
.162b	20 e0 15	               jsr  pop
.162e	60		               rts
.162f			memfill
.162f	20 a1 15	               jsr  push
.1632	20 17 16	mf1            jsr  blkfill
.1635	c8		               iny
.1636	ca		               dex
.1637	d0 f9		               bne  mf1
.1639	20 e0 15	               jsr  pop
.163c	60		               rts
.163d			memmove
.163d	20 a1 15	               jsr  push
.1640	ba		               tsx            ; On se crée un pointeur ...
.1641	8a		               txa
.1642	18		               clc
.1643	69 0b		               adc  #11
.1645	a8		               tay
.1646	a2 06		               ldx  #$06
.1648	b9 00 01	nextbyte       lda  $0100,y
.164b	99 97 16	               sta  words,y
.164e	c8		               iny
.164f	ca		               dex
.1650	d0 f6		               bne  nextbyte
.1652	ad 97 16	               lda  s
.1655	8d 6e 16	               sta  source+1
.1658	ad 98 16	               lda  s+1
.165b	8d 6f 16	               sta  source+2
.165e	ad 99 16	               lda  d
.1661	8d 6b 16	               sta  destin+1
.1664	ad 9a 16	               lda  d+1
.1667	8d 6c 16	               sta  destin+2
.166a	ad ff ff	destin         lda  $ffff
.166d	8d ff ff	source         sta  $ffff
.1670	ee 6b 16	               inc  destin+1
.1673	d0 03		               bne  src
.1675	ee 6c 16	               inc  destin+2
.1678	ee 6e 16	src            inc  source+1
.167b	d0 03		               bne  cnt
.167d	ee 6f 16	               inc  source+2
.1680	ad 9b 16	cnt            lda  compte
.1683	d0 08		               bne  decit
.1685	ad 9c 16	               lda  compte+1
.1688	f0 09		               beq  fini
.168a	ce 9c 16	               dec  compte+1
.168d	ce 9b 16	decit          dec  compte
.1690	4c 6a 16	               jmp  destin
.1693	20 e0 15	fini           jsr  pop
.1696	60		               rts
.1697			words
>1697	00 00		s         .word     $0000
>1699	00 00		d         .word     $0000
>169b	00 00		compte    .word     $0000
.169d			decword
.169d	20 a1 15	               jsr  push
.16a0	86 fd		               stx  zpage2
.16a2	84 fe		               sty  zpage2+1
.16a4	20 e0 15	               jsr  pop
.16a7	60		               rts
.16a8			inczp1
.16a8	08		               php
.16a9	48		               pha
.16aa	e6 fb		               inc  zpage1
.16ac	a5 fb		               lda  zpage1
.16ae	d0 02		               bne  nopage
.16b0	e6 fc		               inc  zpage1+1
.16b2	68		nopage         pla
.16b3	28		               plp
.16b4	60		               rts
.16b5			deczp1
.16b5	08		                php
.16b6	48		                pha
.16b7	c6 fb		                dec  zpage1
.16b9	d0 02		                bne  nopage
.16bb	c6 fc		                dec  zpage1+1
.16bd	68		nopage          pla
.16be	28		                plp
.16bf	60		                rts
.16c0			inczp2
.16c0	08		               php
.16c1	48		               pha
.16c2	e6 fd		               inc  zpage2
.16c4	a5 fd		               lda  zpage2
.16c6	d0 02		               bne  nopage
.16c8	e6 fe		               inc  zpage2+1
.16ca	68		nopage         pla
.16cb	28		               plp
.16cc	60		               rts
.16cd			deczp2
.16cd	08		               php
.16ce	48		               pha
.16cf	a5 fd		               lda  zpage2
.16d1	d0 02		               bne  nopage
.16d3	c6 fe		               dec  zpage2+1
.16d5	68		nopage         pla
.16d6	28		               plp
.16d7	60		               rts
.16d8			savezp1
.16d8	08		               php
.16d9	48		               pha
.16da	a5 fb		               lda  zpage1
.16dc	8d 54 17	               sta  zp1
.16df	a5 fc		               lda  zpage1+1
.16e1	8d 55 17	               sta  zp1+1
.16e4	68		               pla
.16e5	28		               plp
.16e6	60		               rts
.16e7			restzp1
.16e7	08		               php
.16e8	48		               pha
.16e9	ad 54 17	               lda zp1
.16ec	85 fb		               sta zpage1
.16ee	ad 55 17	               lda zp1+1
.16f1	85 fc		               sta zpage1+1
.16f3	68		               pla
.16f4	28		               plp
.16f5	60		               rts
.16f6			savezp2
.16f6	08		         php
.16f7	48		         pha
.16f8	a5 fd		         lda zpage2
.16fa	8d 56 17	         sta zp2
.16fd	a5 fe		         lda zpage2+1
.16ff	8d 57 17	         sta zp2+1
.1702	68		         pla
.1703	28		         plp
.1704	60		         rts
.1705			restzp2
.1705	08		                php
.1706	48		                pha
.1707	ad 56 17	                lda  zp2
.170a	85 fd		                sta  zpage2
.170c	ad 57 17	                lda  zp2+1
.170f	85 fe		                sta  zpage2+1
.1711	68		                pla
.1712	28		                plp
.1713	60		                rts
.1714			xy2addr
.1714	08		                php
.1715	48		                pha
.1716	8a		                txa
.1717	48		                pha
.1718	98		                tya
.1719	48		                pha
.171a	ad 4f 17	                lda     addr1+1
.171d	8d 51 17	                sta     addr2+1
.1720	ad 4e 17	                lda     addr1
.1723	8d 50 17	                sta     addr2
.1726	c0 00		                cpy     #$00
.1728	f0 0f		                beq     addx
.172a	18		moreline        clc
.172b	6d 4d 17	                adc     ymult
.172e	90 03		                bcc     norepy
.1730	ee 51 17	                inc     addr2+1
.1733	8d 50 17	norepy          sta     addr2
.1736	88		                dey
.1737	d0 f1		                bne     moreline
.1739	8a		addx            txa
.173a	18		                clc
.173b	6d 50 17	                adc     addr2
.173e	90 03		                bcc     thatsit
.1740	ee 51 17	                inc     addr2+1
.1743	8d 50 17	thatsit         sta     addr2
.1746	68		                pla
.1747	a8		                tay
.1748	68		                pla
.1749	aa		                tax
.174a	68		                pla
.174b	28		                plp
.174c	60		                rts
>174d	28		ymult          .byte     40
>174e	00 00		addr1          .word     $0000
>1750	00 00		addr2          .word     $0000
>1752	00 00		bytecnt        .word     $0000
>1754	00 00		zp1        .word   $0000
>1756	00 00		zp2        .word   $0000

;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>1758	01		a2hexcol       .byte     1              ; pour aputscxy
>1759	00		a2hexbkcol     .byte     %00000000
.175a			a2hexpos
>175a	00		a2hexpx        .byte     0              ; pour aputsxy
>175b	00		a2hexpy        .byte     0
>175c	24		a2hexprefix    .byte     "$"            ; pour aputs
>175d	00 00		a2hexstr       .word     $00
>175f	00 00		               .word     $00
>1761	00		               .byte     0              ; 0 end string
>1762	30 30 30 30	abin           .null     "00000000"
>1766	30 30 30 30 00
>176b	20 20 20 00	adec           .null     "   "
.176f			putahexfmtxy
.176f	20 a1 15	               jsr  push
.1772	20 be 17	               jsr  a2hex
.1775	ae 5a 17	               ldx  a2hexpx
.1778	ac 5b 17	               ldy  a2hexpy
.177b	20 56 14	               jsr  gotoxy
.177e	a2 5c		               ldx  #<a2hexprefix
.1780	a0 17		               ldy  #>a2hexprefix
.1782	20 3f 14	               jsr  puts
.1785	20 e0 15	               jsr  pop
.1788	60		               rts
.1789			putahexfmt
.1789	20 a1 15	               jsr  push
.178c	20 be 17	               jsr  a2hex
.178f	a2 5c		               ldx  #<a2hexprefix
.1791	a0 17		               ldy  #>a2hexprefix
.1793	20 3f 14	               jsr  puts
.1796	20 e0 15	               jsr  pop
.1799	60		               rts
.179a			putahex
.179a	20 a1 15	               jsr  push
.179d	20 be 17	               jsr  a2hex
.17a0	a2 5d		               ldx  #<a2hexstr
.17a2	a0 17		               ldy  #>a2hexstr
.17a4	20 3f 14	               jsr  puts
.17a7	20 e0 15	               jsr  pop
.17aa	60		               rts
.17ab			nib2hex
.17ab	08		               php
.17ac	29 0f		               and  #$0f
.17ae	f8		               sed
.17af	18		               clc
.17b0	69 90		               adc  #$90
.17b2	69 40		               adc  #$40
.17b4	d8		               cld
.17b5	28		               plp
.17b6	60		               rts
.17b7			lsra4bits
.17b7	08		               php
.17b8	4a		               lsr
.17b9	4a		               lsr
.17ba	4a		               lsr
.17bb	4a		               lsr
.17bc	28		               plp
.17bd	60		               rts
.17be			a2hex
.17be	08		               php
.17bf	48		               pha
.17c0	48		               pha
.17c1	20 b7 17	               jsr  lsra4bits
.17c4	20 ab 17	               jsr  nib2hex
.17c7	8d 5d 17	               sta  a2hexstr
.17ca	68		               pla
.17cb	20 ab 17	               jsr  nib2hex
.17ce	8d 5e 17	               sta  a2hexstr+1
.17d1	a9 00		               lda  #$00                ; set end of string
.17d3	8d 5f 17	               sta  a2hexstr+2
.17d6	68		               pla
.17d7	28		               plp
.17d8	60		               rts
.17d9			xy2hex
.17d9	20 a1 15	               jsr  push
.17dc	20 be 17	               jsr  a2hex
.17df	8a		               txa
.17e0	48		               pha
.17e1	20 b7 17	               jsr  lsra4bits
.17e4	20 ab 17	               jsr  nib2hex
.17e7	8d 5d 17	               sta  a2hexstr
.17ea	68		               pla
.17eb	20 ab 17	               jsr  nib2hex
.17ee	8d 5e 17	               sta  a2hexstr+1
.17f1	98		               tya
.17f2	48		               pha
.17f3	20 b7 17	               jsr  lsra4bits
.17f6	20 ab 17	               jsr  nib2hex
.17f9	8d 5f 17	               sta  a2hexstr+2
.17fc	68		               pla
.17fd	20 ab 17	               jsr  nib2hex
.1800	8d 60 17	               sta  a2hexstr+3
.1803	a9 00		               lda  #$00                ; 0 ended string
.1805	8d 61 17	               sta  a2hexstr+4
.1808	20 e0 15	               jsr  pop
.180b			atobin
.180b	20 a1 15	               jsr  push
.180e	a2 08		               ldx  #8
.1810	a0 00		               ldy  #0
.1812	18		               clc
.1813	2a		nextbit        rol
.1814	48		               pha
.1815	69 00		               adc  #$00
.1817	29 01		               and  #$01
.1819	20 ab 17	               jsr  nib2hex
.181c	99 62 17	               sta  abin,y
.181f	68		               pla
.1820	c8		               iny
.1821	ca		               dex
.1822	d0 ef		               bne  nextbit
.1824	a9 00		               lda  #0
.1826	99 62 17	               sta  abin,y
.1829	20 e0 15	               jsr  pull
.182c	60		               rts
.182d			putabin
.182d	20 0b 18	               jsr     atobin
.1830	20 a1 15	               jsr     push
.1833	a2 62		               ldx     #<abin
.1835	a0 17		               ldy     #>abin
.1837	20 3f 14	               jsr     puts
.183a	20 e0 15	               jsr     pop
.183d	60		               rts
.183e			printabin
.183e	20 a1 15	               jsr     push
.1841	a2 62		               ldx     #<abin
.1843	a0 17		               ldy     #>abin
.1845	20 3f 14	               jsr     puts
.1848	20 e0 15	               jsr     pop
.184b	60		               rts
.184c			putabinfmt
.184c	08		               php
.184d	48		               pha
.184e	a9 25		               lda     #"%"
.1850	20 39 14	               jsr     putch
.1853	68		               pla
.1854	20 2d 18	               jsr     putabin
.1857	28		               plp
.1858	60		               rts
.1859			putabinxy
.1859	20 56 14	               jsr     gotoxy
.185c	20 2d 18	               jsr     putabin
.185f	60		               rts
.1860			putabinfmtxy
.1860	20 56 14	               jsr     gotoxy
.1863	20 4c 18	               jsr     putabinfmt
.1866	60		               rts
.1867			atodec
.1867	20 a1 15	               jsr  push
.186a	f8		               sed
.186b	aa		               tax
.186c	a0 00		               ldy  #$00
.186e	a9 00		               lda  #$00
.1870	18		nextbit        clc
.1871	69 01		               adc  #$01
.1873	90 01		               bcc  decx
.1875	c8		               iny
.1876	ca		decx           dex
.1877	d0 f7		               bne  nextbit
.1879	48		               pha
.187a	98		               tya
.187b	20 ab 17	               jsr  nib2hex
.187e	8d 6b 17	               sta  adec
.1881	68		               pla
.1882	48		               pha
.1883	20 ab 17	               jsr  nib2hex
.1886	8d 6d 17	               sta  adec+2
.1889	68		               pla
.188a	6a		               ror
.188b	6a		               ror
.188c	6a		               ror
.188d	6a		               ror
.188e	20 ab 17	               jsr  nib2hex
.1891	8d 6c 17	               sta  adec+1
.1894	d8		               cld
.1895	20 e0 15	               jsr  pull
.1898	60		               rts
>1899	00 00 00	buffer         .byte     0,0,0

;******  Return to file: v20start.asm


;******  End of listing

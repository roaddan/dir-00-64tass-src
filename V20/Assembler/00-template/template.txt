
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L template.txt -o template.prg template.asm
; Fri Jul 12 12:52:29 2024

;Offset	;Hex		;Source

;******  Processing input file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-v20ex.asm

>1201	0b 12 0a 00	.word (+), 10       ;$1201 : Debut + 10 =$120b, $0010
>1205	9e 34 36 32	.null $9e, "4621"   ;$1205 : "sys4621" = jsr #120d
>1209	31 00
>120b	00 00		+ .word 0           ;$120b : $0000

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: template.asm

=1			TITLELINE=1
=6			BINLINE=6
=6			BINCOLM=6
=$10			XVAL=$10
=$40			XCPX=$40
=$03			DIFF=$03
.120d	20 5c 15	main           jsr scrmaninit
.1210	08		               php
.1211	48		               pha
.1212	a9 0e		               lda  #14
.1214	20 d2 ff	               jsr  $ffd2
.1217	68		               pla
.1218	28		               plp
.1219	48		               pha
.121a	a9 0e		               lda #(vnoir*16+(vbleu|8))
.121c	8d 0f 90	               sta  vicscrbrd
.121f	68		               pla
.1220	48		               pha
.1221	a9 01		               lda  #vblanc
.1223	8d 86 02	               sta  bascol
.1226	68		               pla
.1227	a2 e9		               ldx #<string3
.1229	a0 14		               ldy #>string3
.122b	20 f8 15	               jsr putsxy
.122e	48		               pha
.122f	a9 04		               lda  #vmauve
.1231	8d 86 02	               sta  bascol
.1234	68		               pla
.1235	a2 c1		               ldx #<string1
.1237	a0 14		               ldy #>string1
.1239	20 f8 15	               jsr putsxy
.123c	48		               pha
.123d	a9 01		               lda  #vwhite
.123f	8d 86 02	               sta  bascol
.1242	68		               pla
.1243	a2 d8		               ldx #<string2
.1245	a0 14		               ldy #>string2
.1247	20 f8 15	               jsr putsxy
.124a	48		               pha
.124b	a9 05		               lda  #vgreen
.124d	8d 86 02	               sta  bascol
.1250	68		               pla
.1251	a2 08		               ldx #<string5
.1253	a0 15		               ldy #>string5
.1255	20 f8 15	               jsr putsxy
.1258	48		               pha
.1259	a9 05		               lda  #vgreen
.125b	8d 86 02	               sta  bascol
.125e	68		               pla
.125f	a2 13		               ldx #<string6
.1261	a0 15		               ldy #>string6
.1263	20 f8 15	               jsr putsxy
.1266	48		               pha
.1267	a9 04		               lda  #vmauve
.1269	8d 86 02	               sta  bascol
.126c	68		               pla
.126d	a2 00		               ldx #<string4
.126f	a0 15		               ldy #>string4
.1271	20 f8 15	               jsr putsxy
.1274	48		               pha
.1275	a9 07		               lda  #vjaune
.1277	8d 86 02	               sta  bascol
.127a	68		               pla
.127b	a2 1e		               ldx #<string7
.127d	a0 15		               ldy #>string7
.127f	20 f8 15	               jsr putsxy
.1282	48		               pha
.1283	a9 07		               lda  #vjaune
.1285	8d 86 02	               sta  bascol
.1288	68		               pla
.1289	a2 2d		               ldx #<string8
.128b	a0 15		               ldy #>string8
.128d	20 f8 15	               jsr putsxy
.1290	48		               pha
.1291	a9 01		               lda  #vwhite
.1293	8d 86 02	               sta  bascol
.1296	68		               pla
.1297	20 dc 16	               jsr  push
.129a	a9 57		               lda  #<adresse
.129c	85 fb		               sta  $fb
.129e	a9 15		               lda  #>adresse
.12a0	85 fc		               sta  $fb+1
.12a2	a0 01		               ldy  #$01
.12a4	b1 fb		               lda  ($fb),y
.12a6	20 46 19	               jsr  atobin
.12a9	a9 25		               lda  #"%"
.12ab	20 91 15	               jsr  putch
.12ae	20 dc 16	               jsr  push
.12b1	a2 9d		isx            ldx  #<abin
.12b3	a0 18		isy            ldy  #>abin
.12b5	20 97 15	               jsr  puts
.12b8	20 1b 17	               jsr  pull
.12bb	88		               dey
.12bc	b1 fb		               lda  ($fb),y
.12be	20 46 19	               jsr  atobin
.12c1	20 dc 16	               jsr  push
.12c4	a2 9d		isx            ldx  #<abin
.12c6	a0 18		isy            ldy  #>abin
.12c8	20 97 15	               jsr  puts
.12cb	20 1b 17	               jsr  pull
.12ce	20 1b 17	               jsr  pop
.12d1	a9 10		               lda #XVAL   ; initialise ...
.12d3	8d 52 15	               sta count   ; ...le compteur
.12d6	ad 52 15	next           lda count
.12d9	38		               sec
.12da	ed 53 15	               sbc tstval
.12dd	8d 54 15	               sta result
.12e0	ae 52 15	               ldx count
.12e3	a9 00		               lda #$00
.12e5	48		               pha
.12e6	28		               plp
.12e7	ec 53 15	               cpx tstval
.12ea	08		               php
.12eb	68		               pla
.12ec	20 46 19	               jsr atobin
.12ef	48		               pha
.12f0	48		               pha
.12f1	a9 07		               lda  #vyellow
.12f3	8d 86 02	               sta  bascol
.12f6	68		               pla
.12f7	20 dc 16	               jsr  push
.12fa	a2 06		               ldx  #BINCOLM
.12fc	a0 07		               ldy  #BINLINE+1
.12fe	20 ae 15	               jsr  gotoxy
.1301	20 1b 17	               jsr  pop
.1304	a9 25		               lda  #"%"
.1306	20 91 15	               jsr  putch
.1309	20 dc 16	               jsr  push
.130c	a2 9d		isx            ldx  #<abin
.130e	a0 18		isy            ldy  #>abin
.1310	20 97 15	               jsr  puts
.1313	20 1b 17	               jsr  pull
.1316	8a		               txa
.1317	48		               pha
.1318	20 f9 18	               jsr a2hex
.131b	48		               pha
.131c	a9 03		               lda  #vcyan
.131e	8d 86 02	               sta  bascol
.1321	68		               pla
.1322	20 dc 16	               jsr  push
.1325	a2 02		               ldx  #2
.1327	a0 0c		               ldy  #12
.1329	20 ae 15	               jsr  gotoxy
.132c	20 1b 17	               jsr  pop
.132f	a9 24		               lda  #"$"
.1331	20 91 15	               jsr  putch
.1334	20 dc 16	               jsr  push
.1337	a2 98		isx            ldx  #<a2hexstr
.1339	a0 18		isy            ldy  #>a2hexstr
.133b	20 97 15	               jsr  puts
.133e	20 1b 17	               jsr  pull
.1341	68		               pla
.1342	20 46 19	               jsr atobin
.1345	48		               pha
.1346	a9 03		               lda  #vcyan
.1348	8d 86 02	               sta  bascol
.134b	68		               pla
.134c	20 dc 16	               jsr  push
.134f	a2 07		               ldx  #7
.1351	a0 0c		               ldy  #12
.1353	20 ae 15	               jsr  gotoxy
.1356	20 1b 17	               jsr  pop
.1359	a9 25		               lda  #"%"
.135b	20 91 15	               jsr  putch
.135e	20 dc 16	               jsr  push
.1361	a2 9d		isx            ldx  #<abin
.1363	a0 18		isy            ldy  #>abin
.1365	20 97 15	               jsr  puts
.1368	20 1b 17	               jsr  pull
.136b	ad 53 15	               lda tstval
.136e	48		               pha
.136f	20 f9 18	               jsr a2hex
.1372	48		               pha
.1373	a9 03		               lda  #vcyan
.1375	8d 86 02	               sta  bascol
.1378	68		               pla
.1379	20 dc 16	               jsr  push
.137c	a2 02		               ldx  #2
.137e	a0 0d		               ldy  #13
.1380	20 ae 15	               jsr  gotoxy
.1383	20 1b 17	               jsr  pop
.1386	a9 24		               lda  #"$"
.1388	20 91 15	               jsr  putch
.138b	20 dc 16	               jsr  push
.138e	a2 98		isx            ldx  #<a2hexstr
.1390	a0 18		isy            ldy  #>a2hexstr
.1392	20 97 15	               jsr  puts
.1395	20 1b 17	               jsr  pull
.1398	68		               pla
.1399	20 46 19	               jsr atobin
.139c	48		               pha
.139d	a9 03		               lda  #vcyan
.139f	8d 86 02	               sta  bascol
.13a2	68		               pla
.13a3	20 dc 16	               jsr  push
.13a6	a2 07		               ldx  #7
.13a8	a0 0d		               ldy  #13
.13aa	20 ae 15	               jsr  gotoxy
.13ad	20 1b 17	               jsr  pop
.13b0	a9 25		               lda  #"%"
.13b2	20 91 15	               jsr  putch
.13b5	20 dc 16	               jsr  push
.13b8	a2 9d		isx            ldx  #<abin
.13ba	a0 18		isy            ldy  #>abin
.13bc	20 97 15	               jsr  puts
.13bf	20 1b 17	               jsr  pull
.13c2	ad 54 15	               lda result
.13c5	48		               pha
.13c6	20 f9 18	               jsr a2hex
.13c9	48		               pha
.13ca	a9 03		               lda  #vcyan
.13cc	8d 86 02	               sta  bascol
.13cf	68		               pla
.13d0	20 dc 16	               jsr  push
.13d3	a2 02		               ldx  #2
.13d5	a0 0f		               ldy  #15
.13d7	20 ae 15	               jsr  gotoxy
.13da	20 1b 17	               jsr  pop
.13dd	a9 24		               lda  #"$"
.13df	20 91 15	               jsr  putch
.13e2	20 dc 16	               jsr  push
.13e5	a2 98		isx            ldx  #<a2hexstr
.13e7	a0 18		isy            ldy  #>a2hexstr
.13e9	20 97 15	               jsr  puts
.13ec	20 1b 17	               jsr  pull
.13ef	68		               pla
.13f0	20 46 19	               jsr atobin
.13f3	48		               pha
.13f4	a9 03		               lda  #vcyan
.13f6	8d 86 02	               sta  bascol
.13f9	68		               pla
.13fa	20 dc 16	               jsr  push
.13fd	a2 07		               ldx  #7
.13ff	a0 0f		               ldy  #15
.1401	20 ae 15	               jsr  gotoxy
.1404	20 1b 17	               jsr  pop
.1407	a9 25		               lda  #"%"
.1409	20 91 15	               jsr  putch
.140c	20 dc 16	               jsr  push
.140f	a2 9d		isx            ldx  #<abin
.1411	a0 18		isy            ldy  #>abin
.1413	20 97 15	               jsr  puts
.1416	20 1b 17	               jsr  pull
.1419	68		               pla
.141a	20 f9 18	               jsr a2hex
.141d	48		               pha
.141e	a9 03		               lda  #vcyan
.1420	8d 86 02	               sta  bascol
.1423	68		               pla
.1424	20 dc 16	               jsr  push
.1427	a2 10		               ldx  #BINCOLM+10
.1429	a0 07		               ldy  #BINLINE+1
.142b	20 ae 15	               jsr  gotoxy
.142e	20 1b 17	               jsr  pop
.1431	a9 24		               lda  #"$"
.1433	20 91 15	               jsr  putch
.1436	20 dc 16	               jsr  push
.1439	a2 98		isx            ldx  #<a2hexstr
.143b	a0 18		isy            ldy  #>a2hexstr
.143d	20 97 15	               jsr  puts
.1440	20 1b 17	               jsr  pull
.1443	ee 52 15	               inc count
.1446	ad 53 15	               lda tstval
.1449	18		               clc
.144a	69 03		               adc #DIFF
.144c	8d 53 15	               sta tstval
.144f	20 dc 16	               jsr  push
.1452	a2 01		               ldx  #1
.1454	a0 19		               ldy  #25
.1456	20 ae 15	               jsr  gotoxy
.1459	20 1b 17	               jsr  pop
.145c	48		               pha
.145d	20 fc 1a	               jsr getkey
.1460	c9 51		               cmp  #'q'
.1462	f0 34		               beq out
.1464	48		               pha
.1465	20 dc 16	               jsr  push
.1468	a2 06		               ldx  #6
.146a	a0 12		               ldy  #18
.146c	20 ae 15	               jsr  gotoxy
.146f	20 1b 17	               jsr  pop
.1472	68		               pla
.1473	20 f9 18	               jsr a2hex
.1476	20 dc 16	               jsr  push
.1479	a2 0f		               ldx  #15
.147b	a0 12		               ldy  #18
.147d	20 ae 15	               jsr  gotoxy
.1480	20 1b 17	               jsr  pop
.1483	a9 24		               lda  #"$"
.1485	20 91 15	               jsr  putch
.1488	20 dc 16	               jsr  push
.148b	a2 98		isx            ldx  #<a2hexstr
.148d	a0 18		isy            ldy  #>a2hexstr
.148f	20 97 15	               jsr  puts
.1492	20 1b 17	               jsr  pull
.1495	4c d6 12	               jmp next
.1498	60		out            rts
.1499			delay65536
.1499	20 dc 16	               jsr push
.149c	a2 00		               ldx #$00
.149e	a0 00		               ldy #$00
.14a0	88		waity          dey
.14a1	d0 fd		               bne waity
.14a3	ca		waitx          dex
.14a4	d0 fa		               bne waity
.14a6	20 1b 17	               jsr pop
.14a9	60		               rts
>14aa	01 01 d0 41	string0        .text    1,1,"Par: Daniel Lafrance",0
>14ae	52 3a 20 c4 41 4e 49 45 4c 20 cc 41 46 52 41 4e
>14be	43 45 00
>14c1	01 00 d4 45	string1        .text    1,0,"Test de Drapeaux CPU",0
>14c5	53 54 20 44 45 20 c4 52 41 50 45 41 55 58 20 c3
>14d5	d0 d5 00
>14d8	01 03 c6 cc	string2        .text    BINCOLM-5,BINLINE-3,"FLAGS:NV-BDIZC",0
>14dc	c1 c7 d3 3a ce d6 2d c2 c4 c9 da c3 00
>14e9	01 15 d0 41	string3        .text    1,21,"Par: Daniel Lafrance",0
>14ed	52 3a 20 c4 41 4e 49 45 4c 20 cc 41 46 52 41 4e
>14fd	43 45 00
>1500	0f 07 28 20	string4        .text    BINCOLM+9,BINLINE+1,"(   )",0
>1504	20 20 29 00
>1508	07 04 5e 5e	string5        .byte    BINCOLM+1,BINLINE-2,94,94,32,94,94,94,94,94,0
>150c	20 5e 5e 5e 5e 5e 00
>1513	07 05 7d 7d	string6        .byte    BINCOLM+1,BINLINE-1,125,125,'?',125,125,125,125,125,0
>1517	3f 7d 7d 7d 7d 7d 00
>151e	04 12 c7 45	string7        .text    4,18,"Getkey() = $",0
>1522	54 4b 45 59 28 29 20 3d 20 24 00
>152d	20 20 24 0d	string8        .byte    32,32,'$',13,32,'-','$',32,32,32,'-'
>1531	20 2d 24 20 20 20 2d
>1538	0d 20 20 2d	               .byte    13,32,32,45,45,45,32,32,45,45,45,45,45,45,45,45,45,13
>153c	2d 2d 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 0d
>154a	20		               .byte    32
>154b	3d 24 20 20	               .null    "=$   ="
>154f	20 3d 00
>1552	10		count          .byte    XVAL
>1553	40		tstval         .byte    XCPX
>1554	00		result         .byte    0
>1555	00		row            .byte    0
>1556	00		lin            .byte    0
>1557	0d 12		adresse        .word    main

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-vic20-kernal.asm

=$90			kiostatus   =   $90     ; Kernal I/O status word (st) (byte)
=$b7			curfnlen    =   $b7     ; Current filename length (byte)
=$b9			cursecadd   =   $b9     ; Current secondary address (byte)
=$ba			curdevno    =   $ba     ; Current device number (byte)
=$bb			curfptr     =   $bb     ; Current file pointer (word)
=$fb			zpage1      =   $fb     ; zero page 1 address (word)
=$fd			zpage2      =   $fd     ; zero page 2 address (word)
=$0286			bascol      =   $0286   ; basic next chr colscreenram (byte)
=$1000			scrnramex   =   $1000   ; video character ram (with ram expansion)
=$1200			basicstaex  =   $1200   ; basic start address (with ram expansion)
=$9400			colorramex  =   $9400   ; video color ram (with ram expansion)
=$1e00			scrnram     =   $1e00   ; video character ram (no ram expansion)
=$1000			basicsta    =   $1000   ; basic start address (no ram expansion)
=$9600			colorram    =   $9600   ; video color ram (no ram expansion)
=$1e00			scrram0     =   scrnram
=7936			scrram1     =   scrram0+$0100
=$9600			colram0     =   colorram
=38656			colram1     =   colram0+$0100
=$8000			chargen     =   $8000
=$9000			ioblock     =   $9000   ;
=$9000			vicchip     =   $9000
=$a000			ramblk4     =   $a000
=$c000			basicrom    =   $c000
=$e000			kernalrom   =   $e000
=$03			bstop       =   $03      ;stop
=$05			bwhite      =   $05      ;set color white
=$08			block       =   $08      ;lock the charset
=$09			bunlock     =   $09      ;unlock the charset
=$0d			bcarret     =   $0d
=$0e			btext       =   $0e
=$11			bcrsdn      =   $11      ;cursor down 1 line
=$12			brevcol     =   $12
=$13			bhome       =   $13
=$14			bdelete     =   $14
=$1c			bred        =   $1c
=$1d			bcuright    =   $1d
=$1e			bgreen      =   $1e
=$1f			bblue       =   $1f
=$81			borange     =   $81
=$83			blrun       =   $83
=$85			bfkey1      =   $85
=$86			bfkey2      =   $86
=$87			bfkey3      =   $87
=$88			bfkey4      =   $88
=$89			bfkey5      =   $89
=$8a			bfkey6      =   $8a
=$8b			bfkey7      =   $8b
=$8c			bfkey8      =   $8c
=$8d			bcarret1    =   $8d
=$8e			bgraph      =   $8e
=$90			bblack      =   $90
=$91			bcuup       =   $91
=$92			brevoff     =   $92
=$93			bclear      =   $93
=$94			binsert     =   $94
=$95			bbrown      =   $95
=$96			bltred      =   $96
=$97			bdkgrey     =   $97
=$98			bmdgrey     =   $98
=$99			bltgreen    =   $99
=$9a			bltblue     =   $9a
=$9b			bltgrey     =   $9b
=$9c			bmagenta    =   $9c
=$9d			bculeft     =   $9d
=$9e			byellow     =   $9e
=$9f			bcyan       =   $9f
=$0286			carcol      =   $0286
=$030a			ieval       =   $030a
=$73			chrget      =   $73
=$79			chrgot      =   $79
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$ffb4			stalk   = $ffb4 ; Send Talk command to serial bus.
=$ffb1			slisten = $ffb1 ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$ffa5			acptr   = $ffa5 ; jmp $ef19 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ffa8			ciout   = $ffa8 ; jmp $eee4 Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ffb1			listen  = $ffb1 ; jmp ($ee17) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f542 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe82 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe73 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ffde			rdtim   = $ffde ; jmp $f760 Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe57 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd52 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f675 Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $eb1e Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $eec0 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe50 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe66 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fe49 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f767 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe6f Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ee14 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $eec1 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f734 Update the system clock
=$ffae			unlsn   = $ffae ; jmp $ef04 Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $eef6 Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $f675 Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$f1ca			kd_chrout    =   $f1ca
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.1559	4c 0d 12	pgmstart        jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-vic20-vic.asm

=$9000			vic = $9000			; VicII C64 memorymap base address
=36864			vichorcnt = vic+$00	; $9000, 36864 Bit 0-6 Horizontal centering.
=36865			vicvercnt = vic+$01	; $9001, 36865 Vertical centering.
=36866			viccolnum = vic+$02	; $9002, 36866 Bit 0-6 set # of column.
=36867			vicrownum = vic+$03	; $9003, 36867 Bit 1-6 set # of rows.
=36868			vicsrastr = vic+$04	; $9004, 36868 TV raster beam line.
=36869			viccstart = vic+$05	; $9005, 36869 Bit 0-3 start of character memory (dflt=0).
=36870			vicpenhor = vic+$06	; $9006, 36870 Horizontal position of light pen.
=36871			vicpenver = vic+$07	; $9007, 36871 Vertical position of light pen
=36872			vicpadhor = vic+$08	; $9008, 36872 Digitized value of paddle X
=36873			vicpadver = vic+$09	; $9009, 36873 Digitized value of paddle Y
=36874			vicosclhz = vic+$0a	; $900a, 36874 Oscillator 1 freq. (low) (on: 128-255)
=36875			vicoscmhz = vic+$0b	; $900b, 36875 Oscillator 2 freq. (medium) (on: 128-255)
=36876			vicoschhz = vic+$0c	; $900c, 36876 Oscillator 3 freq. (high) (on: 128-255)
=36877			vicnoizhz = vic+$0d	; $900d, 36877 Noise source freq.
=36878			vicvolume = vic+$0e	; $900e, 36878 Bit 0-3 set volume of all sound.
=36879			vicscrbrd = vic+$0f	; $900f, 36879 Screen and border color register.
=36879			vicbordcol=vicscrbrd
=36879			vicbackcol=vicscrbrd

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-vic20-basic2.asm

=$c3bb			b_opentxtspc  = $c3bb ;  1) Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$c408			b_chkavailmem = $c408 ;  2) Check available Memory. *1  ;a-y;---; Array top $yyaa
=$c435			b_outofmem    = $c435 ;  3) ?Out of memory.             ;---;---;
=$c437			b_errormesg   = $c437 ;  4) Send BASIC error message.   ;a--;---; a = errno
=$e467			b_warmstart   = $e467 ;  5) Basic warm start.           ;---;---;
=$c48a			b_chrget      = $c48a ;  6) Main CHRGET entry.          ;---;---;
=$c49c			b_newline     = $c49c ;  7) Crunch tokens, insert line. ;-x-;---; x = buff len
=$c52a			b_clrready    = $c52a ;  8) Fix chaining CLR and READY. ;---;---;
=$c533			b_fixchaining = $c533 ;  9) Fix chaining.               ;---;---;
=$c560			b_kbgetline   = $c560 ; 10) Recieve line from keyboard.
=$c579			b_crunchtkns  = $c579 ; 11) Crunch token. *7            ;-x-;---: x = buff len
=$c613			b_findline    = $c613 ; 12) Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$c642			b_new         = $c642 ; 13) Do NEW                      ;---;---;
=$c659			b_resetclr    = $c659 ; 14) Reset BASIC and do CLR      ;---;---;
=$c65e			b_clr         = $c65e ; 15) Do CLR                      ;---;---;
=$c68e			b_rstchrget   = $c68e ; 17) Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$c857			b_continue    = $c857 ; 18) Do CONTINUE.                ;a-y;---; curline $yyaa
=$c96b			b_getint      = $c96b ; 19) Get int from BASIX text.    ;---;---;
=$cad3			b_sndcr       = $cad3 ; 20) Send RETURN, LF in scr mode.;---;a--; a = LF
=$cad7			b_sndcrlf     = $cad7 ; 21) Send RETURN, LINEFEED.      ;---;a--; a = LF
=$cb1e			b_outstr_ay   = $cb1e ; 22) Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$cb1e			b_puts        = b_outstr_ay
=$cb24			b_outstrprep  = $cb24 ; 23) Print precomputated string. ;a--;---; a = strlen
=$cb45			b_printqm     = $cb45 ; 24) Print '?'.                  ;---;---;
=$cb47			b_sendchar    = $cb47 ; 25) Send char in a to device.   ;a--;a--; a = char
=$cd8a			b_frmnum      = $cd8a ; Evaluate numeric expression and/or check for data type mismatch
=$cd9e			b_evalexpr    = $cd9e ; 26) Evaluate expression.
=$cefd			b_chk4comma   = $cefd ; 27) Check for coma.             ;---;a--; a = char
=$cefa			b_chk4lpar    = $cefa ; 28) check for '('.              ;---;a--; a = char
=$cef7			b_chk4rpar    = $cef7 ; 29) check for ')'.              ;---;a--; a = char
=$cf08			b_syntaxerr   = $cf08 ; 30) send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; 31) find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; 32) Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; 33) Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; 34) Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; 35) Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; 36) Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; 37) Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; 38) Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; 39) Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; 40) Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; 41) Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; 42) Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; 43) Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; 44) Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; 45) Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; 46) Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; 47) Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; 48) Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; 49) Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; 50) Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-vic20-basic2.asm

.155c			scrmaninit
.155c	20 dc 16	               jsr  push
.155f	a9 00		               lda  #vnoir
.1561	2a		               rol
.1562	2a		               rol
.1563	2a		               rol
.1564	2a		               rol
.1565	09 05		               ora  #vvert         ; Du vert pour ...
.1567	09 08		               ora  #%00001000     ; ???
.1569	8d 0f 90	               sta  vicbackcol     ; ... le fond d'écran.
.156c	a9 01		               lda  #vblanc        ; Du blanc pour ...
.156e	8d 86 02	               sta  bascol         ; les caractères.
.1571	a9 02		               lda  #%00000010     ; ???
.1573	8d 00 90	               sta  vichorcnt      ; ???
.1576	20 7d 15	               jsr  cls            ; On efface l'écran
.1579	20 1b 17	               jsr  pop
.157c	60		               rts
.157d			cls
.157d	08		               php
.157e	48		               pha
.157f	a9 93		               lda  #$93
.1581	20 91 15	               jsr  putch
.1584	a9 04		               lda  #$04
.1586	8d 00 90	               sta  vichorcnt
.1589	a9 1a		               lda  #$1a
.158b	8d 01 90	               sta  vicvercnt
.158e	68		               pla
.158f	28		               plp
.1590	60		               rts
.1591			putch
.1591	08		               php
.1592	20 d2 ff	               jsr  $ffd2
.1595	28		               plp
.1596	60		               rts
.1597			puts
.1597	20 dc 16	               jsr  push
.159a	86 fb		               stx  zpage1
.159c	84 fc		               sty  zpage1+1
.159e	a0 00		               ldy  #$00
.15a0	b1 fb		next           lda  (zpage1),y
.15a2	f0 06		               beq  out
.15a4	20 91 15	               jsr  putch
.15a7	c8		               iny
.15a8	d0 f6		               bne  next
.15aa	20 1b 17	out            jsr  pop
.15ad	60		               rts
.15ae			gotoxy
.15ae	20 dc 16	               jsr  push
.15b1	98		               tya
.15b2	48		               pha
.15b3	8a		               txa
.15b4	a8		               tay
.15b5	68		               pla
.15b6	aa		               tax
.15b7	18		               clc
.15b8	20 f0 ff	               jsr  kplot
.15bb	20 1b 17	               jsr  pop
.15be	60		               rts
.15bf			cursor
=$0286			bascol    =    $0286
.15bf	08		               php
.15c0	48		               pha
.15c1	90 12		               bcc  restore
.15c3	20 f0 ff	               jsr  kplot
.15c6	8c e7 15	               sty  cx
.15c9	8e e8 15	               stx  cy
.15cc	ad 86 02	               lda  bascol
.15cf	8d e9 15	               sta  bcol
.15d2	4c e4 15	               jmp  out
.15d5	ae e8 15	restore        ldx  cy
.15d8	ac e7 15	               ldy  cx
.15db	20 f0 ff	               jsr  kplot
.15de	ad e9 15	               lda  bcol
.15e1	8d 86 02	               sta  bascol
.15e4	68		out            pla
.15e5	28		               plp
.15e6	60		               rts
>15e7	00		cx   .byte     $00
>15e8	00		cy   .byte     $00
>15e9	00		bcol .byte     $00
.15ea			cursave
.15ea	08		               php
.15eb	38		               sec
.15ec	20 bf 15	               jsr  cursor
.15ef	28		               plp
.15f0	60		               rts
.15f1			curput
.15f1	08		               php
.15f2	18		               clc
.15f3	20 bf 15	               jsr  cursor
.15f6	28		               plp
.15f7	60		               rts
.15f8			putsxy
.15f8	08		               php
.15f9	8e 40 16	               stx  straddr         ; Save start addr
.15fc	8c 41 16	               sty  straddr+1
.15ff	48		               pha                  ; Sauvegarde rA
.1600	98		               tya                  ; Prepare la ...
.1601	48		               pha                  ; ... sauvegarde de rY.
.1602	8a		               txa                  ; Prepare la ...
.1603	48		               pha                  ; ... sauvegarde de rX.
.1604	20 13 18	               jsr  savezp1         ; Save zpage1
.1607	ad 41 16	               lda  straddr+1       ; Set zpage1
.160a	85 fc		               sta  zpage1+1
.160c	ad 40 16	               lda  straddr
.160f	85 fb		               sta  zpage1
.1611	a0 00		               ldy  #$00            ; Set z to zptr offset 0 ...
.1613	b1 fb		               lda  (zpage1),y      ; Load x param
.1615	48		               pha                  ; and save it
.1616	c8		               iny                  ; next param
.1617	b1 fb		               lda  (zpage1),y      ; load y param
.1619	a8		               tay                  ; and save it
.161a	68		               pla
.161b	aa		               tax                  ; load x param
.161c	20 ae 15	               jsr  gotoxy          ; position cursor
.161f	ad 40 16	               lda  straddr         ; adjusting start addr for
.1622	18		               clc                  ; puts call.
.1623	69 02		               adc  #$02
.1625	8d 40 16	               sta  straddr
.1628	90 03		               bcc  norep1
.162a	ee 41 16	               inc  straddr+1
.162d	ae 40 16	norep1         ldx  straddr        ; adjusting start addr
.1630	ac 41 16	               ldy  straddr+1
.1633	20 97 15	               jsr  puts
.1636	20 22 18	               jsr  restzp1
.1639	68		               pla
.163a	aa		               tax
.163b	68		               pla
.163c	a8		               tay
.163d	68		               pla
.163e	28		               plp
.163f	60		               rts
>1640	00 00		straddr   .word     $00
>1642	00		px        .byte     $00
>1643	00		py        .byte     $00
>1644	00 00		zp1       .word     $00
.1646			putscxy
.1646	08		               php
.1647	8e 9c 16	               stx  straddr        ;save start addr
.164a	8c 9d 16	               sty  straddr+1
.164d	48		               pha                 ;save a,y,x
.164e	98		               tya
.164f	48		               pha
.1650	8a		               txa
.1651	48		               pha
.1652	a5 fb		               lda  zpage1         ;save zpage1
.1654	8d 9f 16	               sta  zp1
.1657	a5 fc		               lda  zpage1+1
.1659	8d a0 16	               sta  zp1+1
.165c	ad 9d 16	               lda  straddr+1      ;set zpage1
.165f	85 fc		               sta  zpage1+1
.1661	ad 9c 16	               lda  straddr
.1664	85 fb		               sta  zpage1
.1666	ad 86 02	               lda  bascol         ; save  current basiccolor
.1669	8d 9e 16	               sta  bc
.166c	a0 00		               ldy  #$00           ; set y to zptr offset 0
.166e	b1 fb		               lda  (zpage1),y     ; load color param
.1670	8d 86 02	               sta  bascol         ; and set it
.1673	18		               clc                 ; adjusting start addr
.1674	ee 9c 16	               inc  straddr
.1677	90 03		               bcc  norep1
.1679	ee 9d 16	               inc  straddr+1
.167c	ad 9c 16	norep1         lda  straddr        ; get address of remainder
.167f	ac 9d 16	               ldy  straddr+1
.1682	20 f8 15	               jsr  putsxy         ; print string at x,y pos.
.1685	ad 9e 16	               lda  bc             ; restoring basic color
.1688	8d 86 02	               sta  bascol
.168b	ad a0 16	               lda  zp1+1          ; replacing zpage1 for basic
.168e	85 fc		               sta  zpage1+1
.1690	ad 9f 16	               lda  zp1
.1693	85 fb		               sta  zpage1
.1695	68		               pla
.1696	aa		               tax
.1697	68		               pla
.1698	a8		               tay
.1699	68		               pla
.169a	28		               plp
.169b	60		               rts
>169c	00 00		straddr        .word      $00
>169e	00		bc             .byte      $00
>169f	00 00		zp1            .word      $00
.16a1			putrahex
.16a1	08		               php
.16a2	48		               pha
.16a3	20 f9 18	               jsr  a2hex
.16a6	a9 98		               lda  #<a2hexstr
.16a8	a0 18		               ldy  #>a2hexstr
.16aa	20 97 15	               jsr  puts
.16ad	68		               pla
.16ae	28		               plp
.16af	60		               rts
.16b0			kputrahexxy
.16b0			bputrahexxy
.16b0			putrahexxy
.16b0	08		               php
.16b1	20 f9 18	               jsr  a2hex
.16b4	a9 95		               lda  #<a2hexpos
.16b6	a0 18		               ldy  #>a2hexpos
.16b8	20 f8 15	               jsr  putsxy
.16bb	68		               pla
.16bc	28		               plp
.16bd	60		               rts
.16be			putrahexcxy
.16be	08		               php
.16bf	20 f9 18	               jsr  a2hex
.16c2	a9 95		               lda  #<a2hexpos
.16c4	a0 18		               ldy  #>a2hexpos
.16c6	20 46 16	               jsr  putscxy
.16c9	68		               pla
.16ca	28		               plp
.16cb	60		               rts
.16cc			setinverse
.16cc	48		               pha
.16cd	a9 12		               lda  #$12
.16cf	20 d2 ff	               jsr  $ffd2
.16d2	68		               pla
.16d3	60		               rts
.16d4			clrinverse
.16d4	48		               pha
.16d5	a9 92		               lda  #$92
.16d7	20 d2 ff	               jsr  $ffd2
.16da	68		               pla
.16db	60		               rts

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.16dc			push
.16dc	08		          php            ; stack : flg, pcl, pch
.16dd	78		          sei
.16de	8d 18 17	          sta  ra        ; save a
.16e1	68		          pla            ; stack : pcl, pch
.16e2	8d 17 17	          sta  rp        ; save rp
.16e5	68		          pla            ; stack : pch
.16e6	8d 19 17	          sta  pc        ; save pcl
.16e9	68		          pla            ; stack : -
.16ea	8d 1a 17	          sta  pc+1      ; save pch
.16ed	a5 fb		          lda  zpage1    ; get zpage1 low byte
.16ef	48		          pha            ; stack : zp1l
.16f0	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.16f2	48		          pha            ; stack : zp1h, zp1l
.16f3	a5 fd		          lda  zpage2    ; get zpage2 low byte
.16f5	48		          pha            ; stack : zp2l, zp1h, zp1l
.16f6	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.16f8	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.16f9	ad 17 17	          lda  rp        ; get rp
.16fc	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.16fd	ad 18 17	          lda  ra        ; get a
.1700	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1701	8a		          txa            ; get x
.1702	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1703	98		          tya            ; get y
.1704	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1705	ad 1a 17	          lda  pc+1      ; get pch
.1708	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1709	ad 19 17	          lda  pc        ; get pcl
.170c	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.170d	ad 17 17	          lda  rp        ; get rp
.1710	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1711	ad 18 17	          lda  ra        ; get a
.1714	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1715	58		          cli
.1716	60		          rts
>1717	00		rp        .byte     0
>1718	00		ra        .byte     0
>1719	00 00		pc        .word     0
.171b			pull
.171b			pop
.171b	78		          sei
.171c	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.171d	8d 50 17	          sta  pc        ; save pcl
.1720	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1721	8d 51 17	          sta  pc+1      ; save pch
.1724	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1725	a8		          tay            ; set y
.1726	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1727	aa		          tax            ; set x
.1728	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1729	8d 4f 17	          sta  ra        ; save a
.172c	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.172d	8d 4e 17	          sta  rp        ; save rp
.1730	68		          pla            ; stack : zp2l, zp1h, zp1l
.1731	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.1733	68		          pla            ; stack : zp1h, zp1l
.1734	85 fd		          sta  zpage2    ; get zpage2 High byte
.1736	68		          pla            ; stack : zp1l
.1737	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.1739	68		          pla            ; stack :
.173a	85 fb		          sta  zpage1    ; get zpage1 High byte
.173c	ad 51 17	          lda  pc+1      ; get pch
.173f	48		          pha            ; stack : pch
.1740	ad 50 17	          lda  pc
.1743	48		          pha            ; stack : pcl, pch
.1744	ad 4e 17	          lda  rp        ; get rp
.1747	48		          pha            ; stack : rp, pcl, pch
.1748	ad 4f 17	          lda  ra        ; set ra
.174b	58		          cli
.174c	28		          plp            ; stack : pcl, pch
.174d	60		          rts
>174e	00		rp        .byte     0
>174f	00		ra        .byte     0
>1750	00 00		pc        .word     0

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.1752			blkfill
.1752	20 dc 16	bf0            jsr  push
.1755	20 13 18	               jsr  savezp1
.1758	84 fc		               sty  zpage1+1
.175a	a0 00		               ldy  #$00
.175c	84 fb		               sty  zpage1
.175e	91 fb		bf1            sta  (zpage1),y
.1760	c8		               iny
.1761	d0 fb		               bne  bf1
.1763	20 22 18	               jsr  restzp1
.1766	20 1b 17	               jsr  pop
.1769	60		               rts
.176a			memfill
.176a	20 dc 16	               jsr  push
.176d	20 52 17	mf1            jsr  blkfill
.1770	c8		               iny
.1771	ca		               dex
.1772	d0 f9		               bne  mf1
.1774	20 1b 17	               jsr  pop
.1777	60		               rts
.1778			memmove
.1778	20 dc 16	               jsr  push
.177b	ba		               tsx            ; On se crée un pointeur ...
.177c	8a		               txa
.177d	18		               clc
.177e	69 0b		               adc  #11
.1780	a8		               tay
.1781	a2 06		               ldx  #$06
.1783	b9 00 01	nextbyte       lda  $0100,y
.1786	99 d2 17	               sta  words,y
.1789	c8		               iny
.178a	ca		               dex
.178b	d0 f6		               bne  nextbyte
.178d	ad d2 17	               lda  s
.1790	8d a9 17	               sta  source+1
.1793	ad d3 17	               lda  s+1
.1796	8d aa 17	               sta  source+2
.1799	ad d4 17	               lda  d
.179c	8d a6 17	               sta  destin+1
.179f	ad d5 17	               lda  d+1
.17a2	8d a7 17	               sta  destin+2
.17a5	ad ff ff	destin         lda  $ffff
.17a8	8d ff ff	source         sta  $ffff
.17ab	ee a6 17	               inc  destin+1
.17ae	d0 03		               bne  src
.17b0	ee a7 17	               inc  destin+2
.17b3	ee a9 17	src            inc  source+1
.17b6	d0 03		               bne  cnt
.17b8	ee aa 17	               inc  source+2
.17bb	ad d6 17	cnt            lda  compte
.17be	d0 08		               bne  decit
.17c0	ad d7 17	               lda  compte+1
.17c3	f0 09		               beq  fini
.17c5	ce d7 17	               dec  compte+1
.17c8	ce d6 17	decit          dec  compte
.17cb	4c a5 17	               jmp  destin
.17ce	20 1b 17	fini           jsr  pop
.17d1	60		               rts
.17d2			words
>17d2	00 00		s         .word     $0000
>17d4	00 00		d         .word     $0000
>17d6	00 00		compte    .word     $0000
.17d8			decword
.17d8	20 dc 16	               jsr  push
.17db	86 fd		               stx  zpage2
.17dd	84 fe		               sty  zpage2+1
.17df	20 1b 17	               jsr  pop
.17e2	60		               rts
.17e3			inczp1
.17e3	08		               php
.17e4	48		               pha
.17e5	e6 fb		               inc  zpage1
.17e7	a5 fb		               lda  zpage1
.17e9	d0 02		               bne  nopage
.17eb	e6 fc		               inc  zpage1+1
.17ed	68		nopage         pla
.17ee	28		               plp
.17ef	60		               rts
.17f0			deczp1
.17f0	08		                php
.17f1	48		                pha
.17f2	c6 fb		                dec  zpage1
.17f4	d0 02		                bne  nopage
.17f6	c6 fc		                dec  zpage1+1
.17f8	68		nopage          pla
.17f9	28		                plp
.17fa	60		                rts
.17fb			inczp2
.17fb	08		               php
.17fc	48		               pha
.17fd	e6 fd		               inc  zpage2
.17ff	a5 fd		               lda  zpage2
.1801	d0 02		               bne  nopage
.1803	e6 fe		               inc  zpage2+1
.1805	68		nopage         pla
.1806	28		               plp
.1807	60		               rts
.1808			deczp2
.1808	08		               php
.1809	48		               pha
.180a	a5 fd		               lda  zpage2
.180c	d0 02		               bne  nopage
.180e	c6 fe		               dec  zpage2+1
.1810	68		nopage         pla
.1811	28		               plp
.1812	60		               rts
.1813			savezp1
.1813	08		               php
.1814	48		               pha
.1815	a5 fb		               lda  zpage1
.1817	8d 8f 18	               sta  zp1
.181a	a5 fc		               lda  zpage1+1
.181c	8d 90 18	               sta  zp1+1
.181f	68		               pla
.1820	28		               plp
.1821	60		               rts
.1822			restzp1
.1822	08		               php
.1823	48		               pha
.1824	ad 8f 18	               lda zp1
.1827	85 fb		               sta zpage1
.1829	ad 90 18	               lda zp1+1
.182c	85 fc		               sta zpage1+1
.182e	68		               pla
.182f	28		               plp
.1830	60		               rts
.1831			savezp2
.1831	08		         php
.1832	48		         pha
.1833	a5 fd		         lda zpage2
.1835	8d 91 18	         sta zp2
.1838	a5 fe		         lda zpage2+1
.183a	8d 92 18	         sta zp2+1
.183d	68		         pla
.183e	28		         plp
.183f	60		         rts
.1840			restzp2
.1840	08		                php
.1841	48		                pha
.1842	ad 91 18	                lda  zp2
.1845	85 fd		                sta  zpage2
.1847	ad 92 18	                lda  zp2+1
.184a	85 fe		                sta  zpage2+1
.184c	68		                pla
.184d	28		                plp
.184e	60		                rts
.184f			xy2addr
.184f	08		                php
.1850	48		                pha
.1851	8a		                txa
.1852	48		                pha
.1853	98		                tya
.1854	48		                pha
.1855	ad 8a 18	                lda     addr1+1
.1858	8d 8c 18	                sta     addr2+1
.185b	ad 89 18	                lda     addr1
.185e	8d 8b 18	                sta     addr2
.1861	c0 00		                cpy     #$00
.1863	f0 0f		                beq     addx
.1865	18		moreline        clc
.1866	6d 88 18	                adc     ymult
.1869	90 03		                bcc     norepy
.186b	ee 8c 18	                inc     addr2+1
.186e	8d 8b 18	norepy          sta     addr2
.1871	88		                dey
.1872	d0 f1		                bne     moreline
.1874	8a		addx            txa
.1875	18		                clc
.1876	6d 8b 18	                adc     addr2
.1879	90 03		                bcc     thatsit
.187b	ee 8c 18	                inc     addr2+1
.187e	8d 8b 18	thatsit         sta     addr2
.1881	68		                pla
.1882	a8		                tay
.1883	68		                pla
.1884	aa		                tax
.1885	68		                pla
.1886	28		                plp
.1887	60		                rts
>1888	28		ymult          .byte     40
>1889	00 00		addr1          .word     $0000
>188b	00 00		addr2          .word     $0000
>188d	00 00		bytecnt        .word     $0000
>188f	00 00		zp1        .word   $0000
>1891	00 00		zp2        .word   $0000

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>1893	01		a2hexcol       .byte     1              ; pour aputscxy
>1894	00		a2hexbkcol     .byte     %00000000
.1895			a2hexpos
>1895	00		a2hexpx        .byte     0              ; pour aputsxy
>1896	00		a2hexpy        .byte     0
>1897	24		a2hexprefix    .byte     "$"            ; pour aputs
>1898	00 00		a2hexstr       .word     $00
>189a	00 00		               .word     $00
>189c	00		               .byte     0              ; 0 end string
>189d	30 30 30 30	abin           .null     "00000000"
>18a1	30 30 30 30 00
>18a6	20 20 20 00	adec           .null     "   "
.18aa			putahexfmtxy
.18aa	20 dc 16	               jsr  push
.18ad	20 f9 18	               jsr  a2hex
.18b0	ae 95 18	               ldx  a2hexpx
.18b3	ac 96 18	               ldy  a2hexpy
.18b6	20 ae 15	               jsr  gotoxy
.18b9	a2 97		               ldx  #<a2hexprefix
.18bb	a0 18		               ldy  #>a2hexprefix
.18bd	20 97 15	               jsr  puts
.18c0	20 1b 17	               jsr  pop
.18c3	60		               rts
.18c4			putahexfmt
.18c4	20 dc 16	               jsr  push
.18c7	20 f9 18	               jsr  a2hex
.18ca	a2 97		               ldx  #<a2hexprefix
.18cc	a0 18		               ldy  #>a2hexprefix
.18ce	20 97 15	               jsr  puts
.18d1	20 1b 17	               jsr  pop
.18d4	60		               rts
.18d5			putahex
.18d5	20 dc 16	               jsr  push
.18d8	20 f9 18	               jsr  a2hex
.18db	a2 98		               ldx  #<a2hexstr
.18dd	a0 18		               ldy  #>a2hexstr
.18df	20 97 15	               jsr  puts
.18e2	20 1b 17	               jsr  pop
.18e5	60		               rts
.18e6			nib2hex
.18e6	08		               php
.18e7	29 0f		               and  #$0f
.18e9	f8		               sed
.18ea	18		               clc
.18eb	69 90		               adc  #$90
.18ed	69 40		               adc  #$40
.18ef	d8		               cld
.18f0	28		               plp
.18f1	60		               rts
.18f2			lsra4bits
.18f2	08		               php
.18f3	4a		               lsr
.18f4	4a		               lsr
.18f5	4a		               lsr
.18f6	4a		               lsr
.18f7	28		               plp
.18f8	60		               rts
.18f9			a2hex
.18f9	08		               php
.18fa	48		               pha
.18fb	48		               pha
.18fc	20 f2 18	               jsr  lsra4bits
.18ff	20 e6 18	               jsr  nib2hex
.1902	8d 98 18	               sta  a2hexstr
.1905	68		               pla
.1906	20 e6 18	               jsr  nib2hex
.1909	8d 99 18	               sta  a2hexstr+1
.190c	a9 00		               lda  #$00                ; set end of string
.190e	8d 9a 18	               sta  a2hexstr+2
.1911	68		               pla
.1912	28		               plp
.1913	60		               rts
.1914			xy2hex
.1914	20 dc 16	               jsr  push
.1917	20 f9 18	               jsr  a2hex
.191a	8a		               txa
.191b	48		               pha
.191c	20 f2 18	               jsr  lsra4bits
.191f	20 e6 18	               jsr  nib2hex
.1922	8d 98 18	               sta  a2hexstr
.1925	68		               pla
.1926	20 e6 18	               jsr  nib2hex
.1929	8d 99 18	               sta  a2hexstr+1
.192c	98		               tya
.192d	48		               pha
.192e	20 f2 18	               jsr  lsra4bits
.1931	20 e6 18	               jsr  nib2hex
.1934	8d 9a 18	               sta  a2hexstr+2
.1937	68		               pla
.1938	20 e6 18	               jsr  nib2hex
.193b	8d 9b 18	               sta  a2hexstr+3
.193e	a9 00		               lda  #$00                ; 0 ended string
.1940	8d 9c 18	               sta  a2hexstr+4
.1943	20 1b 17	               jsr  pop
.1946			atobin
.1946	20 dc 16	               jsr  push
.1949	a2 08		               ldx  #8
.194b	a0 00		               ldy  #0
.194d	18		               clc
.194e	2a		nextbit        rol
.194f	48		               pha
.1950	69 00		               adc  #$00
.1952	29 01		               and  #$01
.1954	20 e6 18	               jsr  nib2hex
.1957	99 9d 18	               sta  abin,y
.195a	68		               pla
.195b	c8		               iny
.195c	ca		               dex
.195d	d0 ef		               bne  nextbit
.195f	a9 00		               lda  #0
.1961	99 9d 18	               sta  abin,y
.1964	20 1b 17	               jsr  pull
.1967	60		               rts
.1968			putabin
.1968	20 46 19	               jsr     atobin
.196b	20 dc 16	               jsr     push
.196e	a2 9d		               ldx     #<abin
.1970	a0 18		               ldy     #>abin
.1972	20 97 15	               jsr     puts
.1975	20 1b 17	               jsr     pop
.1978	60		               rts
.1979			printabin
.1979	20 dc 16	               jsr     push
.197c	a2 9d		               ldx     #<abin
.197e	a0 18		               ldy     #>abin
.1980	20 97 15	               jsr     puts
.1983	20 1b 17	               jsr     pop
.1986	60		               rts
.1987			putabinfmt
.1987	08		               php
.1988	48		               pha
.1989	a9 25		               lda     #"%"
.198b	20 91 15	               jsr     putch
.198e	68		               pla
.198f	20 68 19	               jsr     putabin
.1992	28		               plp
.1993	60		               rts
.1994			putabinxy
.1994	20 ae 15	               jsr     gotoxy
.1997	20 68 19	               jsr     putabin
.199a	60		               rts
.199b			putabinfmtxy
.199b	20 ae 15	               jsr     gotoxy
.199e	20 87 19	               jsr     putabinfmt
.19a1	60		               rts
.19a2			atodec
.19a2	20 dc 16	               jsr  push
.19a5	f8		               sed
.19a6	aa		               tax
.19a7	a0 00		               ldy  #$00
.19a9	a9 00		               lda  #$00
.19ab	18		nextbit        clc
.19ac	69 01		               adc  #$01
.19ae	90 01		               bcc  decx
.19b0	c8		               iny
.19b1	ca		decx           dex
.19b2	d0 f7		               bne  nextbit
.19b4	48		               pha
.19b5	98		               tya
.19b6	20 e6 18	               jsr  nib2hex
.19b9	8d a6 18	               sta  adec
.19bc	68		               pla
.19bd	48		               pha
.19be	20 e6 18	               jsr  nib2hex
.19c1	8d a8 18	               sta  adec+2
.19c4	68		               pla
.19c5	6a		               ror
.19c6	6a		               ror
.19c7	6a		               ror
.19c8	6a		               ror
.19c9	20 e6 18	               jsr  nib2hex
.19cc	8d a7 18	               sta  adec+1
.19cf	d8		               cld
.19d0	20 1b 17	               jsr  pull
.19d3	60		               rts
>19d4	00 00 00	buffer         .byte     0,0,0

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>19d7	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>19db	00 00 00 00 00 00 00 00 00 0d 00 00
>19e7	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>19eb	00 00 00 00 00 00 00 00 00 00 00 00
>19f7	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>19fb	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1a07	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1a0b	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1a17	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1a1b	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>1a27	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1a2b	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>1a37	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1a3b	00 00 00 00 00 00 00 00 00 00 00 00
>1a47	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1a4b	00 00 00 00 00 00 00 00 00 00 00 00
>1a57	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1a5b	00 00 00 00 00 00 00 00 00 00 00 00
>1a67	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1a6b	00 00 00 00 00 00 00 00 00 00 00 00
>1a77	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>1a7b	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1a87	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1a8b	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1a97	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1a9b	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>1aa7	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>1aab	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>1ab7	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>1abb	00 00 00 00 00 00 00 00 00 00 00 00
>1ac7	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>1acb	00 00 00 00 00 00 00 00 00 00 00 00
.1ad7			waitstop
.1ad7	20 dc 16	               jsr  push
.1ada	20 ed f6	wait           jsr  k_stop
.1add	d0 fb		               bne  wait
.1adf	20 1b 17	               jsr  pop
.1ae2	60		               rts
.1ae3			anykey
.1ae3	08		               php
.1ae4	48		               pha
.1ae5	a5 cb		nokey          lda 203
.1ae7	c9 40		               cmp #64
.1ae9	f0 fa		               beq nokey
.1aeb	20 f1 1a	               jsr releasekey
.1aee	68		               pla
.1aef	28		               plp
.1af0	60		               rts
.1af1			releasekey
.1af1	08		               php
.1af2	48		               pha
.1af3	a5 cb		keypressed     lda 203
.1af5	c9 40		               cmp #64
.1af7	d0 fa		               bne keypressed
.1af9	68		               pla
.1afa	28		               plp
.1afb	60		               rts
.1afc			getkey
.1afc	20 e4 ff	again          jsr  getin
.1aff	c9 00		               cmp  #0
.1b01	f0 f9		               beq  again
.1b03	60		               rts
.1b04			waitkey
.1b04	20 dc 16	               jsr  push
.1b07	8d 55 1b	               sta  thekey
.1b0a	20 e4 ff	nope           jsr  getin
.1b0d	20 d2 ff	               jsr  chrout
.1b10	cd 55 1b	               cmp  thekey
.1b13	d0 f5		               bne  nope
.1b15	20 d2 ff	               jsr  chrout
.1b18	20 1b 17	               jsr  pop
.1b1b	60		               rts
.1b1c			waitspace
.1b1c	20 dc 16	               jsr  push
.1b1f	a9 7f		wait           lda  #$7f  ;%01111111
.1b21	8d 00 dc	               sta  $dc00
.1b24	ad 01 dc	               lda  $dc01
.1b27	29 10		               and  #$10  ;mask %00010000
.1b29	d0 f4		               bne  wait
.1b2b	20 1b 17	               jsr  pop
.1b2e			waitsstop
.1b2e	20 dc 16	               jsr  push
.1b31	20 ed f6	wait           jsr  k_stop  ;%01111111
.1b34	d0 fb		               bne  wait
.1b36	20 1b 17	               jsr  pop
.1b39			waitreturn
.1b39	20 dc 16	               jsr  push
.1b3c	ad 56 1b	               lda  thecount
.1b3f	8d 00 1e	               sta  scrnram
.1b42	a9 02		               lda  #$02
.1b44	8d 00 96	               sta  colorram
.1b47	20 e4 ff	nope           jsr  getin
.1b4a	c9 0d		nohex          cmp  #$0d
.1b4c	d0 f9		               bne  nope
.1b4e	ee 56 1b	               inc  thecount
.1b51	20 1b 17	               jsr  pop
.1b54	60		               rts
>1b55	00		thekey         .byte   0
>1b56	01		thecount       .byte   $01

;******  Return to file: template.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L template.txt -o template.prg template.asm
; Mon Jun 24 17:15:27 2024

;Offset	;Hex		;Source

;******  Processing input file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-v20ex.asm

>1201	0b 12 0a 00	.word (+), 10       ;$1201 : Debut + 10 =$120b, $0010
>1205	9e 34 36 32	.null $9e, "4621"   ;$1205 : "sys4621" = jsr #120d
>1209	31 00
>120b	00 00		+ .word 0           ;$120b : $0000

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: template.asm

=1			TITLELINE=1
=6			BINLINE=6
=6			BINCOLM=6
=$10			XVAL=$10
=$40			XCPX=$40
=$03			DIFF=$03
.120d	20 6b 15	main           jsr scrmaninit
.1210	08		               php
.1211	48		               pha
.1212	a9 0e		               lda  #14
.1214	20 d2 ff	               jsr  $ffd2
.1217	68		               pla
.1218	28		               plp
.1219	48		               pha
.121a	a9 0e		               lda #(vnoir*16+(vbleu|8))
.121c	8d 0f 90	               sta  vicscrbrd
.121f	68		               pla
.1220	48		               pha
.1221	a9 01		               lda  #vblanc
.1223	8d 86 02	               sta  bascol
.1226	68		               pla
.1227	20 08 17	               jsr  push
.122a	a2 01		               ldx  #1
.122c	a0 15		               ldy  #21
.122e	20 bd 15	               jsr  gotoxy
.1231	20 47 17	               jsr  pop
.1234	20 08 17	               jsr  push
.1237	a2 01		isx            ldx  #<string3
.1239	a0 15		isy            ldy  #>string3
.123b	20 a6 15	               jsr  puts
.123e	20 47 17	               jsr  pull
.1241	48		               pha
.1242	a9 02		               lda  #vred
.1244	8d 86 02	               sta  bascol
.1247	68		               pla
.1248	20 08 17	               jsr  push
.124b	a2 01		               ldx  #1
.124d	a0 00		               ldy  #0
.124f	20 bd 15	               jsr  gotoxy
.1252	20 47 17	               jsr  pop
.1255	20 08 17	               jsr  push
.1258	a2 dd		isx            ldx  #<string1
.125a	a0 14		isy            ldy  #>string1
.125c	20 a6 15	               jsr  puts
.125f	20 47 17	               jsr  pull
.1262	48		               pha
.1263	a9 05		               lda  #vgreen
.1265	8d 86 02	               sta  bascol
.1268	68		               pla
.1269	20 08 17	               jsr  push
.126c	a2 01		               ldx  #BINCOLM-5
.126e	a0 03		               ldy  #BINLINE-3
.1270	20 bd 15	               jsr  gotoxy
.1273	20 47 17	               jsr  pop
.1276	20 08 17	               jsr  push
.1279	a2 f2		isx            ldx  #<string2
.127b	a0 14		isy            ldy  #>string2
.127d	20 a6 15	               jsr  puts
.1280	20 47 17	               jsr  pull
.1283	48		               pha
.1284	a9 05		               lda  #vgreen
.1286	8d 86 02	               sta  bascol
.1289	68		               pla
.128a	20 08 17	               jsr  push
.128d	a2 07		               ldx  #BINCOLM+1
.128f	a0 04		               ldy  #BINLINE-2
.1291	20 bd 15	               jsr  gotoxy
.1294	20 47 17	               jsr  pop
.1297	20 08 17	               jsr  push
.129a	a2 1c		isx            ldx  #<string5
.129c	a0 15		isy            ldy  #>string5
.129e	20 a6 15	               jsr  puts
.12a1	20 47 17	               jsr  pull
.12a4	48		               pha
.12a5	a9 05		               lda  #vgreen
.12a7	8d 86 02	               sta  bascol
.12aa	68		               pla
.12ab	20 08 17	               jsr  push
.12ae	a2 07		               ldx  #BINCOLM+1
.12b0	a0 05		               ldy  #BINLINE-1
.12b2	20 bd 15	               jsr  gotoxy
.12b5	20 47 17	               jsr  pop
.12b8	20 08 17	               jsr  push
.12bb	a2 25		isx            ldx  #<string6
.12bd	a0 15		isy            ldy  #>string6
.12bf	20 a6 15	               jsr  puts
.12c2	20 47 17	               jsr  pull
.12c5	48		               pha
.12c6	a9 04		               lda  #vmauve
.12c8	8d 86 02	               sta  bascol
.12cb	68		               pla
.12cc	20 08 17	               jsr  push
.12cf	a2 0f		               ldx  #BINCOLM+9
.12d1	a0 07		               ldy  #BINLINE+1
.12d3	20 bd 15	               jsr  gotoxy
.12d6	20 47 17	               jsr  pop
.12d9	20 08 17	               jsr  push
.12dc	a2 16		isx            ldx  #<string4
.12de	a0 15		isy            ldy  #>string4
.12e0	20 a6 15	               jsr  puts
.12e3	20 47 17	               jsr  pull
.12e6	48		               pha
.12e7	a9 07		               lda  #vjaune
.12e9	8d 86 02	               sta  bascol
.12ec	68		               pla
.12ed	20 08 17	               jsr  push
.12f0	a2 06		               ldx  #BINCOLM
.12f2	a0 09		               ldy  #BINLINE+3
.12f4	20 bd 15	               jsr  gotoxy
.12f7	20 47 17	               jsr  pop
.12fa	20 08 17	               jsr  push
.12fd	a2 2e		isx            ldx  #<string7
.12ff	a0 15		isy            ldy  #>string7
.1301	20 a6 15	               jsr  puts
.1304	20 47 17	               jsr  pull
.1307	48		               pha
.1308	a9 07		               lda  #vjaune
.130a	8d 86 02	               sta  bascol
.130d	68		               pla
.130e	20 08 17	               jsr  push
.1311	a2 00		               ldx  #0
.1313	a0 0c		               ldy  #12
.1315	20 bd 15	               jsr  gotoxy
.1318	20 47 17	               jsr  pop
.131b	20 08 17	               jsr  push
.131e	a2 3c		isx            ldx  #<string8
.1320	a0 15		isy            ldy  #>string8
.1322	20 a6 15	               jsr  puts
.1325	20 47 17	               jsr  pull
.1328	20 08 17	               jsr  push
.132b	a2 02		               ldx  #2
.132d	a0 09		               ldy  #9
.132f	20 bd 15	               jsr  gotoxy
.1332	20 47 17	               jsr  pop
.1335	a9 10		               lda #XVAL   ; initialise ...
.1337	8d 61 15	               sta count   ; ...le compteur
.133a	ad 61 15	next           lda count
.133d	38		               sec
.133e	ed 62 15	               sbc tstval
.1341	8d 63 15	               sta result
.1344	ae 61 15	               ldx count
.1347	a9 00		               lda #$00
.1349	48		               pha
.134a	28		               plp
.134b	ec 62 15	               cpx tstval
.134e	08		               php
.134f	68		               pla
.1350	20 72 19	               jsr atobin
.1353	48		               pha
.1354	48		               pha
.1355	a9 07		               lda  #vyellow
.1357	8d 86 02	               sta  bascol
.135a	68		               pla
.135b	20 08 17	               jsr  push
.135e	a2 06		               ldx  #BINCOLM
.1360	a0 07		               ldy  #BINLINE+1
.1362	20 bd 15	               jsr  gotoxy
.1365	20 47 17	               jsr  pop
.1368	a9 25		               lda  #"%"
.136a	20 a0 15	               jsr  putch
.136d	20 08 17	               jsr  push
.1370	a2 c9		isx            ldx  #<abin
.1372	a0 18		isy            ldy  #>abin
.1374	20 a6 15	               jsr  puts
.1377	20 47 17	               jsr  pull
.137a	8a		               txa
.137b	48		               pha
.137c	20 25 19	               jsr a2hex
.137f	48		               pha
.1380	a9 03		               lda  #vcyan
.1382	8d 86 02	               sta  bascol
.1385	68		               pla
.1386	20 08 17	               jsr  push
.1389	a2 02		               ldx  #2
.138b	a0 0c		               ldy  #12
.138d	20 bd 15	               jsr  gotoxy
.1390	20 47 17	               jsr  pop
.1393	a9 24		               lda  #"$"
.1395	20 a0 15	               jsr  putch
.1398	20 08 17	               jsr  push
.139b	a2 c4		isx            ldx  #<a2hexstr
.139d	a0 18		isy            ldy  #>a2hexstr
.139f	20 a6 15	               jsr  puts
.13a2	20 47 17	               jsr  pull
.13a5	68		               pla
.13a6	20 72 19	               jsr atobin
.13a9	48		               pha
.13aa	a9 03		               lda  #vcyan
.13ac	8d 86 02	               sta  bascol
.13af	68		               pla
.13b0	20 08 17	               jsr  push
.13b3	a2 07		               ldx  #7
.13b5	a0 0c		               ldy  #12
.13b7	20 bd 15	               jsr  gotoxy
.13ba	20 47 17	               jsr  pop
.13bd	a9 25		               lda  #"%"
.13bf	20 a0 15	               jsr  putch
.13c2	20 08 17	               jsr  push
.13c5	a2 c9		isx            ldx  #<abin
.13c7	a0 18		isy            ldy  #>abin
.13c9	20 a6 15	               jsr  puts
.13cc	20 47 17	               jsr  pull
.13cf	ad 62 15	               lda tstval
.13d2	48		               pha
.13d3	20 25 19	               jsr a2hex
.13d6	48		               pha
.13d7	a9 03		               lda  #vcyan
.13d9	8d 86 02	               sta  bascol
.13dc	68		               pla
.13dd	20 08 17	               jsr  push
.13e0	a2 02		               ldx  #2
.13e2	a0 0d		               ldy  #13
.13e4	20 bd 15	               jsr  gotoxy
.13e7	20 47 17	               jsr  pop
.13ea	a9 24		               lda  #"$"
.13ec	20 a0 15	               jsr  putch
.13ef	20 08 17	               jsr  push
.13f2	a2 c4		isx            ldx  #<a2hexstr
.13f4	a0 18		isy            ldy  #>a2hexstr
.13f6	20 a6 15	               jsr  puts
.13f9	20 47 17	               jsr  pull
.13fc	68		               pla
.13fd	20 72 19	               jsr atobin
.1400	48		               pha
.1401	a9 03		               lda  #vcyan
.1403	8d 86 02	               sta  bascol
.1406	68		               pla
.1407	20 08 17	               jsr  push
.140a	a2 07		               ldx  #7
.140c	a0 0d		               ldy  #13
.140e	20 bd 15	               jsr  gotoxy
.1411	20 47 17	               jsr  pop
.1414	a9 25		               lda  #"%"
.1416	20 a0 15	               jsr  putch
.1419	20 08 17	               jsr  push
.141c	a2 c9		isx            ldx  #<abin
.141e	a0 18		isy            ldy  #>abin
.1420	20 a6 15	               jsr  puts
.1423	20 47 17	               jsr  pull
.1426	ad 63 15	               lda result
.1429	48		               pha
.142a	20 25 19	               jsr a2hex
.142d	48		               pha
.142e	a9 03		               lda  #vcyan
.1430	8d 86 02	               sta  bascol
.1433	68		               pla
.1434	20 08 17	               jsr  push
.1437	a2 02		               ldx  #2
.1439	a0 0f		               ldy  #15
.143b	20 bd 15	               jsr  gotoxy
.143e	20 47 17	               jsr  pop
.1441	a9 24		               lda  #"$"
.1443	20 a0 15	               jsr  putch
.1446	20 08 17	               jsr  push
.1449	a2 c4		isx            ldx  #<a2hexstr
.144b	a0 18		isy            ldy  #>a2hexstr
.144d	20 a6 15	               jsr  puts
.1450	20 47 17	               jsr  pull
.1453	68		               pla
.1454	20 72 19	               jsr atobin
.1457	48		               pha
.1458	a9 03		               lda  #vcyan
.145a	8d 86 02	               sta  bascol
.145d	68		               pla
.145e	20 08 17	               jsr  push
.1461	a2 07		               ldx  #7
.1463	a0 0f		               ldy  #15
.1465	20 bd 15	               jsr  gotoxy
.1468	20 47 17	               jsr  pop
.146b	a9 25		               lda  #"%"
.146d	20 a0 15	               jsr  putch
.1470	20 08 17	               jsr  push
.1473	a2 c9		isx            ldx  #<abin
.1475	a0 18		isy            ldy  #>abin
.1477	20 a6 15	               jsr  puts
.147a	20 47 17	               jsr  pull
.147d	68		               pla
.147e	20 25 19	               jsr a2hex
.1481	48		               pha
.1482	a9 03		               lda  #vcyan
.1484	8d 86 02	               sta  bascol
.1487	68		               pla
.1488	20 08 17	               jsr  push
.148b	a2 10		               ldx  #BINCOLM+10
.148d	a0 07		               ldy  #BINLINE+1
.148f	20 bd 15	               jsr  gotoxy
.1492	20 47 17	               jsr  pop
.1495	a9 24		               lda  #"$"
.1497	20 a0 15	               jsr  putch
.149a	20 08 17	               jsr  push
.149d	a2 c4		isx            ldx  #<a2hexstr
.149f	a0 18		isy            ldy  #>a2hexstr
.14a1	20 a6 15	               jsr  puts
.14a4	20 47 17	               jsr  pull
.14a7	ee 61 15	               inc count
.14aa	ad 62 15	               lda tstval
.14ad	18		               clc
.14ae	69 03		               adc #DIFF
.14b0	8d 62 15	               sta tstval
.14b3	20 08 17	               jsr  push
.14b6	a2 01		               ldx  #1
.14b8	a0 19		               ldy  #25
.14ba	20 bd 15	               jsr  gotoxy
.14bd	20 47 17	               jsr  pop
.14c0	48		               pha
.14c1	20 28 1b	               jsr getkey
.14c4	c9 51		               cmp  #'q'
.14c6	f0 03		               beq out
.14c8	4c 3a 13	               jmp next
.14cb	60		out            rts
.14cc			delay65536
.14cc	20 08 17	               jsr push
.14cf	a2 00		               ldx #$00
.14d1	a0 00		               ldy #$00
.14d3	88		waity          dey
.14d4	d0 fd		               bne waity
.14d6	ca		waitx          dex
.14d7	d0 fa		               bne waity
.14d9	20 47 17	               jsr pop
.14dc	60		               rts
>14dd	d4 45 53 54	string1        .null     "Test de Drapeaux CPU"
>14e1	20 44 45 20 c4 52 41 50 45 41 55 58 20 c3 d0 d5
>14f1	00
>14f2	c6 cc c1 c7	string2        .null     "FLAGS:NV-BDIZC"
>14f6	d3 3a ce d6 2d c2 c4 c9 da c3 00
>1501	d0 41 52 3a	string3        .null     "Par: Daniel Lafrance"
>1505	20 c4 41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45
>1515	00
>1516	28 20 20 20	string4        .null     "(   )"
>151a	29 00
>151c	5e 5e 20 5e	string5        .byte     94,94,32,94,94,94,94,94,0
>1520	5e 5e 5e 5e 00
>1525	7d 7d 3f 7d	string6        .byte     125,125,'?',125,125,125,125,125,0
>1529	7d 7d 7d 7d 00
>152e	d8 3d 24 20	string7        .null     "X=$    CPX #$"
>1532	20 20 20 c3 d0 d8 20 23 24 00
>153c	20 20 24 0d	string8        .byte     32,32,'$',13,32,'-','$',32,32,32,'-'
>1540	20 2d 24 20 20 20 2d
>1547	0d 20 20 2d	               .byte     13,32,32,45,45,45,32,32,45,45,45,45,45,45,45,45,45,13
>154b	2d 2d 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 0d
>1559	20		               .byte     32
>155a	3d 24 20 20	               .null     "=$   ="
>155e	20 3d 00
>1561	10		count          .byte     XVAL
>1562	40		tstval         .byte     XCPX
>1563	00		result         .byte     0
>1564	00		row            .byte     0
>1565	00		lin            .byte     0
>1566	0d 12		adresse        .word     main

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-vic20-kernal.asm

=$90			kiostatus   =   $90     ; Kernal I/O status word (st) (byte)
=$b7			curfnlen    =   $b7     ; Current filename length (byte)
=$b9			cursecadd   =   $b9     ; Current secondary address (byte)
=$ba			curdevno    =   $ba     ; Current device number (byte)
=$bb			curfptr     =   $bb     ; Current file pointer (word)
=$fb			zpage1      =   $fb     ; zero page 1 address (word)
=$fd			zpage2      =   $fd     ; zero page 2 address (word)
=$0286			bascol      =   $0286   ; basic next chr colscreenram (byte)
=$1000			scrnramex   =   $1000   ; video character ram (with ram expansion)
=$1200			basicstaex  =   $1200   ; basic start address (with ram expansion)
=$9400			colorramex  =   $9400   ; video color ram (with ram expansion)
=$1e00			scrnram     =   $1e00   ; video character ram (no ram expansion)
=$1000			basicsta    =   $1000   ; basic start address (no ram expansion)
=$9600			colorram    =   $9600   ; video color ram (no ram expansion)
=$1e00			scrram0     =   scrnram
=7936			scrram1     =   scrram0+$0100
=$9600			colram0     =   colorram
=38656			colram1     =   colram0+$0100
=$8000			chargen     =   $8000
=$9000			ioblock     =   $9000   ;
=$9000			vicchip     =   $9000
=$a000			ramblk4     =   $a000
=$c000			basicrom    =   $c000
=$e000			kernalrom   =   $e000
=$03			bstop       =   $03      ;stop
=$05			bwhite      =   $05      ;set color white
=$08			block       =   $08      ;lock the charset
=$09			bunlock     =   $09      ;unlock the charset
=$0d			bcarret     =   $0d
=$0e			btext       =   $0e
=$11			bcrsdn      =   $11      ;cursor down 1 line
=$12			brevcol     =   $12
=$13			bhome       =   $13
=$14			bdelete     =   $14
=$1c			bred        =   $1c
=$1d			bcuright    =   $1d
=$1e			bgreen      =   $1e
=$1f			bblue       =   $1f
=$81			borange     =   $81
=$83			blrun       =   $83
=$85			bfkey1      =   $85
=$86			bfkey2      =   $86
=$87			bfkey3      =   $87
=$88			bfkey4      =   $88
=$89			bfkey5      =   $89
=$8a			bfkey6      =   $8a
=$8b			bfkey7      =   $8b
=$8c			bfkey8      =   $8c
=$8d			bcarret1    =   $8d
=$8e			bgraph      =   $8e
=$90			bblack      =   $90
=$91			bcuup       =   $91
=$92			brevoff     =   $92
=$93			bclear      =   $93
=$94			binsert     =   $94
=$95			bbrown      =   $95
=$96			bltred      =   $96
=$97			bdkgrey     =   $97
=$98			bmdgrey     =   $98
=$99			bltgreen    =   $99
=$9a			bltblue     =   $9a
=$9b			bltgrey     =   $9b
=$9c			bmagenta    =   $9c
=$9d			bculeft     =   $9d
=$9e			byellow     =   $9e
=$9f			bcyan       =   $9f
=$0286			carcol      =   $0286
=$030a			ieval       =   $030a
=$73			chrget      =   $73
=$79			chrgot      =   $79
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$ffb4			stalk   = $ffb4 ; Send Talk command to serial bus.
=$ffb1			slisten = $ffb1 ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$ffa5			acptr   = $ffa5 ; jmp $ef19 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ffa8			ciout   = $ffa8 ; jmp $eee4 Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ffb1			listen  = $ffb1 ; jmp ($ee17) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f542 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe82 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe73 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ffde			rdtim   = $ffde ; jmp $f760 Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe57 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd52 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f675 Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $eb1e Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $eec0 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe50 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe66 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fe49 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f767 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe6f Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ee14 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $eec1 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f734 Update the system clock
=$ffae			unlsn   = $ffae ; jmp $ef04 Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $eef6 Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $f675 Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$f1ca			kd_chrout    =   $f1ca
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.1568	4c 0d 12	pgmstart        jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-vic20-vic.asm

=$9000			vic = $9000			; VicII C64 memorymap base address
=36864			vichorcnt = vic+$00	; $9000, 36864 Bit 0-6 Horizontal centering.
=36865			vicvercnt = vic+$01	; $9001, 36865 Vertical centering.
=36866			viccolnum = vic+$02	; $9002, 36866 Bit 0-6 set # of column.
=36867			vicrownum = vic+$03	; $9003, 36867 Bit 1-6 set # of rows.
=36868			vicsrastr = vic+$04	; $9004, 36868 TV raster beam line.
=36869			viccstart = vic+$05	; $9005, 36869 Bit 0-3 start of character memory (dflt=0).
=36870			vicpenhor = vic+$06	; $9006, 36870 Horizontal position of light pen.
=36871			vicpenver = vic+$07	; $9007, 36871 Vertical position of light pen
=36872			vicpadhor = vic+$08	; $9008, 36872 Digitized value of paddle X
=36873			vicpadver = vic+$09	; $9009, 36873 Digitized value of paddle Y
=36874			vicosclhz = vic+$0a	; $900a, 36874 Oscillator 1 freq. (low) (on: 128-255)
=36875			vicoscmhz = vic+$0b	; $900b, 36875 Oscillator 2 freq. (medium) (on: 128-255)
=36876			vicoschhz = vic+$0c	; $900c, 36876 Oscillator 3 freq. (high) (on: 128-255)
=36877			vicnoizhz = vic+$0d	; $900d, 36877 Noise source freq.
=36878			vicvolume = vic+$0e	; $900e, 36878 Bit 0-3 set volume of all sound.
=36879			vicscrbrd = vic+$0f	; $900f, 36879 Screen and border color register.
=36879			vicbordcol=vicscrbrd
=36879			vicbackcol=vicscrbrd

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-vic20-basic2.asm

=$c3bb			b_opentxtspc  = $c3bb ;  1) Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$c408			b_chkavailmem = $c408 ;  2) Check available Memory. *1  ;a-y;---; Array top $yyaa
=$c435			b_outofmem    = $c435 ;  3) ?Out of memory.             ;---;---;
=$c437			b_errormesg   = $c437 ;  4) Send BASIC error message.   ;a--;---; a = errno
=$e467			b_warmstart   = $e467 ;  5) Basic warm start.           ;---;---;
=$c48a			b_chrget      = $c48a ;  6) Main CHRGET entry.          ;---;---;
=$c49c			b_newline     = $c49c ;  7) Crunch tokens, insert line. ;-x-;---; x = buff len
=$c52a			b_clrready    = $c52a ;  8) Fix chaining CLR and READY. ;---;---;
=$c533			b_fixchaining = $c533 ;  9) Fix chaining.               ;---;---;
=$c560			b_kbgetline   = $c560 ; 10) Recieve line from keyboard.
=$c579			b_crunchtkns  = $c579 ; 11) Crunch token. *7            ;-x-;---: x = buff len
=$c613			b_findline    = $c613 ; 12) Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$c642			b_new         = $c642 ; 13) Do NEW                      ;---;---;
=$c659			b_resetclr    = $c659 ; 14) Reset BASIC and do CLR      ;---;---;
=$c65e			b_clr         = $c65e ; 15) Do CLR                      ;---;---;
=$c68e			b_rstchrget   = $c68e ; 17) Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$c857			b_continue    = $c857 ; 18) Do CONTINUE.                ;a-y;---; curline $yyaa
=$c96b			b_getint      = $c96b ; 19) Get int from BASIX text.    ;---;---;
=$cad3			b_sndcr       = $cad3 ; 20) Send RETURN, LF in scr mode.;---;a--; a = LF
=$cad7			b_sndcrlf     = $cad7 ; 21) Send RETURN, LINEFEED.      ;---;a--; a = LF
=$cb1e			b_outstr_ay   = $cb1e ; 22) Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$cb1e			b_puts        = b_outstr_ay
=$cb24			b_outstrprep  = $cb24 ; 23) Print precomputated string. ;a--;---; a = strlen
=$cb45			b_printqm     = $cb45 ; 24) Print '?'.                  ;---;---;
=$cb47			b_sendchar    = $cb47 ; 25) Send char in a to device.   ;a--;a--; a = char
=$cd8a			b_frmnum      = $cd8a ; Evaluate numeric expression and/or check for data type mismatch
=$cd9e			b_evalexpr    = $cd9e ; 26) Evaluate expression.
=$cefd			b_chk4comma   = $cefd ; 27) Check for coma.             ;---;a--; a = char
=$cefa			b_chk4lpar    = $cefa ; 28) check for '('.              ;---;a--; a = char
=$cef7			b_chk4rpar    = $cef7 ; 29) check for ')'.              ;---;a--; a = char
=$cf08			b_syntaxerr   = $cf08 ; 30) send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; 31) find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; 32) Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; 33) Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; 34) Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; 35) Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; 36) Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; 37) Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; 38) Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; 39) Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; 40) Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; 41) Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; 42) Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; 43) Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; 44) Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; 45) Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; 46) Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; 47) Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; 48) Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; 49) Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; 50) Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-vic20-basic2.asm

.156b			scrmaninit
.156b	20 08 17	               jsr  push
.156e	a9 00		               lda  #vnoir
.1570	2a		               rol
.1571	2a		               rol
.1572	2a		               rol
.1573	2a		               rol
.1574	09 05		               ora  #vvert
.1576	09 08		               ora  #%00001000
.1578	8d 0f 90	               sta  vicbackcol
.157b	a9 01		               lda  #vblanc
.157d	8d 86 02	               sta  bascol
.1580	a9 02		               lda  #%00000010
.1582	8d 00 90	               sta  vichorcnt
.1585	20 8c 15	               jsr  cls
.1588	20 47 17	               jsr  pop
.158b	60		               rts
.158c			cls
.158c	08		               php
.158d	48		               pha
.158e	a9 93		               lda  #$93
.1590	20 a0 15	               jsr  putch
.1593	a9 04		               lda  #$04
.1595	8d 00 90	               sta  vichorcnt
.1598	a9 1a		               lda  #$1a
.159a	8d 01 90	               sta  vicvercnt
.159d	68		               pla
.159e	28		               plp
.159f	60		               rts
.15a0			putch
.15a0	08		               php
.15a1	20 d2 ff	               jsr  $ffd2
.15a4	28		               plp
.15a5	60		               rts
.15a6			puts
.15a6	20 08 17	               jsr  push
.15a9	86 fb		               stx  zpage1
.15ab	84 fc		               sty  zpage1+1
.15ad	a0 00		               ldy  #$00
.15af	b1 fb		next           lda  (zpage1),y
.15b1	f0 06		               beq  out
.15b3	20 a0 15	               jsr  putch
.15b6	c8		               iny
.15b7	d0 f6		               bne  next
.15b9	20 47 17	out            jsr  pop
.15bc	60		               rts
.15bd			gotoxy
.15bd	20 08 17	               jsr  push
.15c0	98		               tya
.15c1	48		               pha
.15c2	8a		               txa
.15c3	a8		               tay
.15c4	68		               pla
.15c5	aa		               tax
.15c6	18		               clc
.15c7	20 f0 ff	               jsr  kplot
.15ca	20 47 17	               jsr  pop
.15cd	60		               rts
.15ce			cursor
=$0286			bascol    =    $0286
.15ce	08		               php
.15cf	48		               pha
.15d0	90 12		               bcc  restore
.15d2	20 f0 ff	               jsr  kplot
.15d5	8c f6 15	               sty  cx
.15d8	8e f7 15	               stx  cy
.15db	ad 86 02	               lda  bascol
.15de	8d f8 15	               sta  bcol
.15e1	4c f3 15	               jmp  out
.15e4	ae f7 15	restore        ldx  cy
.15e7	ac f6 15	               ldy  cx
.15ea	20 f0 ff	               jsr  kplot
.15ed	ad f8 15	               lda  bcol
.15f0	8d 86 02	               sta  bascol
.15f3	68		out            pla
.15f4	28		               plp
.15f5	60		               rts
>15f6	00		cx   .byte     $00
>15f7	00		cy   .byte     $00
>15f8	00		bcol .byte     $00
.15f9			cursave
.15f9	08		               php
.15fa	38		               sec
.15fb	20 ce 15	               jsr  cursor
.15fe	28		               plp
.15ff	60		               rts
.1600			curput
.1600	08		               php
.1601	18		               clc
.1602	20 ce 15	               jsr  cursor
.1605	28		               plp
.1606	60		               rts
.1607			putsxy
.1607	08		               php
.1608	8e 6c 16	               stx  straddr
.160b	8c 6d 16	               sty  straddr+1
.160e	48		               pha
.160f	98		               tya
.1610	48		               pha
.1611	8a		               txa
.1612	48		               pha
.1613	a5 fb		               lda  zpage1
.1615	8d 70 16	               sta  zp1
.1618	a5 fc		               lda  zpage1+1
.161a	8d 71 16	               sta  zp1+1
.161d	ad 6d 16	               lda  straddr+1
.1620	85 fc		               sta  zpage1+1
.1622	ad 6c 16	               lda  straddr
.1625	85 fb		               sta  zpage1
.1627	a0 00		               ldy  #$00
.1629	b1 fb		               lda  (zpage1),y
.162b	8d 6e 16	               sta  px
.162e	c8		               iny
.162f	b1 fb		               lda  (zpage1),y
.1631	8d 6f 16	               sta  py
.1634	aa		               tax
.1635	ac 6e 16	               ldy  px
.1638	20 bd 15	               jsr  gotoxy
.163b	18		               clc
.163c	ee 6c 16	               inc  straddr
.163f	ad 6c 16	               lda  straddr
.1642	8d 6c 16	               sta  straddr
.1645	90 03		               bcc  norep1
.1647	ee 6d 16	               inc  straddr+1
.164a	ee 6c 16	norep1         inc  straddr
.164d	90 03		               bcc  norep2
.164f	ee 6d 16	               inc  straddr+1
.1652	ad 6c 16	norep2         lda  straddr
.1655	ac 6d 16	               ldy  straddr+1
.1658	20 a6 15	               jsr  puts
.165b	ad 71 16	               lda  zp1+1
.165e	85 fc		               sta  zpage1+1
.1660	ad 70 16	               lda  zp1
.1663	85 fb		               sta  zpage1
.1665	68		               pla
.1666	aa		               tax
.1667	68		               pla
.1668	a8		               tay
.1669	68		               pla
.166a	28		               plp
.166b	60		               rts
>166c	00 00		straddr   .word     $00
>166e	00		px        .byte     $00
>166f	00		py        .byte     $00
>1670	00 00		zp1       .word     $00
.1672			putscxy
.1672	08		               php
.1673	8e c8 16	               stx  straddr
.1676	8c c9 16	               sty  straddr+1
.1679	48		               pha
.167a	98		               tya
.167b	48		               pha
.167c	8a		               txa
.167d	48		               pha
.167e	a5 fb		               lda  zpage1
.1680	8d cb 16	               sta  zp1
.1683	a5 fc		               lda  zpage1+1
.1685	8d cc 16	               sta  zp1+1
.1688	ad c9 16	               lda  straddr+1
.168b	85 fc		               sta  zpage1+1
.168d	ad c8 16	               lda  straddr
.1690	85 fb		               sta  zpage1
.1692	ad 86 02	               lda  bascol
.1695	8d ca 16	               sta  bc
.1698	a0 00		               ldy #$00
.169a	b1 fb		               lda  (zpage1),y
.169c	8d 86 02	               sta  bascol
.169f	18		               clc
.16a0	ee c8 16	               inc  straddr
.16a3	90 03		               bcc  norep1
.16a5	ee c9 16	               inc  straddr+1
.16a8	ad c8 16	norep1         lda  straddr
.16ab	ac c9 16	               ldy  straddr+1
.16ae	20 07 16	               jsr  putsxy
.16b1	ad ca 16	               lda  bc
.16b4	8d 86 02	               sta  bascol
.16b7	ad cc 16	               lda  zp1+1
.16ba	85 fc		               sta  zpage1+1
.16bc	ad cb 16	               lda  zp1
.16bf	85 fb		               sta  zpage1
.16c1	68		               pla
.16c2	aa		               tax
.16c3	68		               pla
.16c4	a8		               tay
.16c5	68		               pla
.16c6	28		               plp
.16c7	60		               rts
>16c8	00 00		straddr  .word      $00
>16ca	00		bc       .byte      $00
>16cb	00 00		zp1      .word      $00
.16cd			putrahex
.16cd	08		               php
.16ce	48		               pha
.16cf	20 25 19	               jsr  a2hex
.16d2	a9 c4		               lda  #<a2hexstr
.16d4	a0 18		               ldy  #>a2hexstr
.16d6	20 a6 15	               jsr  puts
.16d9	68		               pla
.16da	28		               plp
.16db	60		               rts
.16dc			kputrahexxy
.16dc			bputrahexxy
.16dc			putrahexxy
.16dc	08		               php
.16dd	20 25 19	               jsr  a2hex
.16e0	a9 c1		               lda  #<a2hexpos
.16e2	a0 18		               ldy  #>a2hexpos
.16e4	20 07 16	               jsr  putsxy
.16e7	68		               pla
.16e8	28		               plp
.16e9	60		               rts
.16ea			putrahexcxy
.16ea	08		               php
.16eb	20 25 19	               jsr  a2hex
.16ee	a9 c1		               lda  #<a2hexpos
.16f0	a0 18		               ldy  #>a2hexpos
.16f2	20 72 16	               jsr  putscxy
.16f5	68		               pla
.16f6	28		               plp
.16f7	60		               rts
.16f8			setinverse
.16f8	48		               pha
.16f9	a9 12		               lda  #$12
.16fb	20 d2 ff	               jsr  $ffd2
.16fe	68		               pla
.16ff	60		               rts
.1700			clrinverse
.1700	48		               pha
.1701	a9 92		               lda  #$92
.1703	20 d2 ff	               jsr  $ffd2
.1706	68		               pla
.1707	60		               rts

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.1708			push
.1708	08		          php            ; stack : flg, pcl, pch
.1709	78		          sei
.170a	8d 44 17	          sta  ra        ; save a
.170d	68		          pla            ; stack : pcl, pch
.170e	8d 43 17	          sta  rp        ; save rp
.1711	68		          pla            ; stack : pch
.1712	8d 45 17	          sta  pc        ; save pcl
.1715	68		          pla            ; stack : -
.1716	8d 46 17	          sta  pc+1      ; save pch
.1719	a5 fb		          lda  zpage1    ; get zpage1 low byte
.171b	48		          pha            ; stack : zp1l
.171c	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.171e	48		          pha            ; stack : zp1h, zp1l
.171f	a5 fd		          lda  zpage2    ; get zpage2 low byte
.1721	48		          pha            ; stack : zp2l, zp1h, zp1l
.1722	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.1724	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1725	ad 43 17	          lda  rp        ; get rp
.1728	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1729	ad 44 17	          lda  ra        ; get a
.172c	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.172d	8a		          txa            ; get x
.172e	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.172f	98		          tya            ; get y
.1730	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1731	ad 46 17	          lda  pc+1      ; get pch
.1734	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1735	ad 45 17	          lda  pc        ; get pcl
.1738	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1739	ad 43 17	          lda  rp        ; get rp
.173c	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.173d	ad 44 17	          lda  ra        ; get a
.1740	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1741	58		          cli
.1742	60		          rts
>1743	00		rp        .byte     0
>1744	00		ra        .byte     0
>1745	00 00		pc        .word     0
.1747			pull
.1747			pop
.1747	78		          sei
.1748	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1749	8d 7c 17	          sta  pc        ; save pcl
.174c	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.174d	8d 7d 17	          sta  pc+1      ; save pch
.1750	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1751	a8		          tay            ; set y
.1752	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1753	aa		          tax            ; set x
.1754	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1755	8d 7b 17	          sta  ra        ; save a
.1758	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1759	8d 7a 17	          sta  rp        ; save rp
.175c	68		          pla            ; stack : zp2l, zp1h, zp1l
.175d	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.175f	68		          pla            ; stack : zp1h, zp1l
.1760	85 fd		          sta  zpage2    ; get zpage2 High byte
.1762	68		          pla            ; stack : zp1l
.1763	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.1765	68		          pla            ; stack :
.1766	85 fb		          sta  zpage1    ; get zpage1 High byte
.1768	ad 7d 17	          lda  pc+1      ; get pch
.176b	48		          pha            ; stack : pch
.176c	ad 7c 17	          lda  pc
.176f	48		          pha            ; stack : pcl, pch
.1770	ad 7a 17	          lda  rp        ; get rp
.1773	48		          pha            ; stack : rp, pcl, pch
.1774	ad 7b 17	          lda  ra        ; set ra
.1777	58		          cli
.1778	28		          plp            ; stack : pcl, pch
.1779	60		          rts
>177a	00		rp        .byte     0
>177b	00		ra        .byte     0
>177c	00 00		pc        .word     0

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.177e			blkfill
.177e	20 08 17	bf0            jsr  push
.1781	20 3f 18	               jsr  savezp1
.1784	84 fc		               sty  zpage1+1
.1786	a0 00		               ldy  #$00
.1788	84 fb		               sty  zpage1
.178a	91 fb		bf1            sta  (zpage1),y
.178c	c8		               iny
.178d	d0 fb		               bne  bf1
.178f	20 4e 18	               jsr  restzp1
.1792	20 47 17	               jsr  pop
.1795	60		               rts
.1796			memfill
.1796	20 08 17	               jsr  push
.1799	20 7e 17	mf1            jsr  blkfill
.179c	c8		               iny
.179d	ca		               dex
.179e	d0 f9		               bne  mf1
.17a0	20 47 17	               jsr  pop
.17a3	60		               rts
.17a4			memmove
.17a4	20 08 17	               jsr  push
.17a7	ba		               tsx            ; On se crée un pointeur ...
.17a8	8a		               txa
.17a9	18		               clc
.17aa	69 0b		               adc  #11
.17ac	a8		               tay
.17ad	a2 06		               ldx  #$06
.17af	b9 00 01	nextbyte       lda  $0100,y
.17b2	99 fe 17	               sta  words,y
.17b5	c8		               iny
.17b6	ca		               dex
.17b7	d0 f6		               bne  nextbyte
.17b9	ad fe 17	               lda  s
.17bc	8d d5 17	               sta  source+1
.17bf	ad ff 17	               lda  s+1
.17c2	8d d6 17	               sta  source+2
.17c5	ad 00 18	               lda  d
.17c8	8d d2 17	               sta  destin+1
.17cb	ad 01 18	               lda  d+1
.17ce	8d d3 17	               sta  destin+2
.17d1	ad ff ff	destin         lda  $ffff
.17d4	8d ff ff	source         sta  $ffff
.17d7	ee d2 17	               inc  destin+1
.17da	d0 03		               bne  src
.17dc	ee d3 17	               inc  destin+2
.17df	ee d5 17	src            inc  source+1
.17e2	d0 03		               bne  cnt
.17e4	ee d6 17	               inc  source+2
.17e7	ad 02 18	cnt            lda  compte
.17ea	d0 08		               bne  decit
.17ec	ad 03 18	               lda  compte+1
.17ef	f0 09		               beq  fini
.17f1	ce 03 18	               dec  compte+1
.17f4	ce 02 18	decit          dec  compte
.17f7	4c d1 17	               jmp  destin
.17fa	20 47 17	fini           jsr  pop
.17fd	60		               rts
.17fe			words
>17fe	00 00		s         .word     $0000
>1800	00 00		d         .word     $0000
>1802	00 00		compte    .word     $0000
.1804			decword
.1804	20 08 17	               jsr  push
.1807	86 fd		               stx  zpage2
.1809	84 fe		               sty  zpage2+1
.180b	20 47 17	               jsr  pop
.180e	60		               rts
.180f			inczp1
.180f	08		               php
.1810	48		               pha
.1811	e6 fb		               inc  zpage1
.1813	a5 fb		               lda  zpage1
.1815	d0 02		               bne  nopage
.1817	e6 fc		               inc  zpage1+1
.1819	68		nopage         pla
.181a	28		               plp
.181b	60		               rts
.181c			deczp1
.181c	08		                php
.181d	48		                pha
.181e	c6 fb		                dec  zpage1
.1820	d0 02		                bne  nopage
.1822	c6 fc		                dec  zpage1+1
.1824	68		nopage          pla
.1825	28		                plp
.1826	60		                rts
.1827			inczp2
.1827	08		               php
.1828	48		               pha
.1829	e6 fd		               inc  zpage2
.182b	a5 fd		               lda  zpage2
.182d	d0 02		               bne  nopage
.182f	e6 fe		               inc  zpage2+1
.1831	68		nopage         pla
.1832	28		               plp
.1833	60		               rts
.1834			deczp2
.1834	08		               php
.1835	48		               pha
.1836	a5 fd		               lda  zpage2
.1838	d0 02		               bne  nopage
.183a	c6 fe		               dec  zpage2+1
.183c	68		nopage         pla
.183d	28		               plp
.183e	60		               rts
.183f			savezp1
.183f	08		               php
.1840	48		               pha
.1841	a5 fb		               lda  zpage1
.1843	8d bb 18	               sta  zp1
.1846	a5 fc		               lda  zpage1+1
.1848	8d bc 18	               sta  zp1+1
.184b	68		               pla
.184c	28		               plp
.184d	60		               rts
.184e			restzp1
.184e	08		               php
.184f	48		               pha
.1850	ad bb 18	               lda zp1
.1853	85 fb		               sta zpage1
.1855	ad bc 18	               lda zp1+1
.1858	85 fc		               sta zpage1+1
.185a	68		               pla
.185b	28		               plp
.185c	60		               rts
.185d			savezp2
.185d	08		         php
.185e	48		         pha
.185f	a5 fd		         lda zpage2
.1861	8d bd 18	         sta zp2
.1864	a5 fe		         lda zpage2+1
.1866	8d be 18	         sta zp2+1
.1869	68		         pla
.186a	28		         plp
.186b	60		         rts
.186c			restzp2
.186c	08		                php
.186d	48		                pha
.186e	ad bd 18	                lda  zp2
.1871	85 fd		                sta  zpage2
.1873	ad be 18	                lda  zp2+1
.1876	85 fe		                sta  zpage2+1
.1878	68		                pla
.1879	28		                plp
.187a	60		                rts
.187b			xy2addr
.187b	08		                php
.187c	48		                pha
.187d	8a		                txa
.187e	48		                pha
.187f	98		                tya
.1880	48		                pha
.1881	ad b6 18	                lda     addr1+1
.1884	8d b8 18	                sta     addr2+1
.1887	ad b5 18	                lda     addr1
.188a	8d b7 18	                sta     addr2
.188d	c0 00		                cpy     #$00
.188f	f0 0f		                beq     addx
.1891	18		moreline        clc
.1892	6d b4 18	                adc     ymult
.1895	90 03		                bcc     norepy
.1897	ee b8 18	                inc     addr2+1
.189a	8d b7 18	norepy          sta     addr2
.189d	88		                dey
.189e	d0 f1		                bne     moreline
.18a0	8a		addx            txa
.18a1	18		                clc
.18a2	6d b7 18	                adc     addr2
.18a5	90 03		                bcc     thatsit
.18a7	ee b8 18	                inc     addr2+1
.18aa	8d b7 18	thatsit         sta     addr2
.18ad	68		                pla
.18ae	a8		                tay
.18af	68		                pla
.18b0	aa		                tax
.18b1	68		                pla
.18b2	28		                plp
.18b3	60		                rts
>18b4	28		ymult          .byte     40
>18b5	00 00		addr1          .word     $0000
>18b7	00 00		addr2          .word     $0000
>18b9	00 00		bytecnt        .word     $0000
>18bb	00 00		zp1        .word   $0000
>18bd	00 00		zp2        .word   $0000

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>18bf	01		a2hexcol       .byte     1              ; pour aputscxy
>18c0	00		a2hexbkcol     .byte     %00000000
.18c1			a2hexpos
>18c1	00		a2hexpx        .byte     0              ; pour aputsxy
>18c2	00		a2hexpy        .byte     0
>18c3	24		a2hexprefix    .byte     "$"            ; pour aputs
>18c4	00 00		a2hexstr       .word     $00
>18c6	00 00		               .word     $00
>18c8	00		               .byte     0              ; 0 end string
>18c9	30 30 30 30	abin           .null     "00000000"
>18cd	30 30 30 30 00
>18d2	20 20 20 00	adec           .null     "   "
.18d6			putahexfmtxy
.18d6	20 08 17	               jsr  push
.18d9	20 25 19	               jsr  a2hex
.18dc	ae c1 18	               ldx  a2hexpx
.18df	ac c2 18	               ldy  a2hexpy
.18e2	20 bd 15	               jsr  gotoxy
.18e5	a2 c3		               ldx  #<a2hexprefix
.18e7	a0 18		               ldy  #>a2hexprefix
.18e9	20 a6 15	               jsr  puts
.18ec	20 47 17	               jsr  pop
.18ef	60		               rts
.18f0			putahexfmt
.18f0	20 08 17	               jsr  push
.18f3	20 25 19	               jsr  a2hex
.18f6	a2 c3		               ldx  #<a2hexprefix
.18f8	a0 18		               ldy  #>a2hexprefix
.18fa	20 a6 15	               jsr  puts
.18fd	20 47 17	               jsr  pop
.1900	60		               rts
.1901			putahex
.1901	20 08 17	               jsr  push
.1904	20 25 19	               jsr  a2hex
.1907	a2 c4		               ldx  #<a2hexstr
.1909	a0 18		               ldy  #>a2hexstr
.190b	20 a6 15	               jsr  puts
.190e	20 47 17	               jsr  pop
.1911	60		               rts
.1912			nib2hex
.1912	08		               php
.1913	29 0f		               and  #$0f
.1915	f8		               sed
.1916	18		               clc
.1917	69 90		               adc  #$90
.1919	69 40		               adc  #$40
.191b	d8		               cld
.191c	28		               plp
.191d	60		               rts
.191e			lsra4bits
.191e	08		               php
.191f	4a		               lsr
.1920	4a		               lsr
.1921	4a		               lsr
.1922	4a		               lsr
.1923	28		               plp
.1924	60		               rts
.1925			a2hex
.1925	08		               php
.1926	48		               pha
.1927	48		               pha
.1928	20 1e 19	               jsr  lsra4bits
.192b	20 12 19	               jsr  nib2hex
.192e	8d c4 18	               sta  a2hexstr
.1931	68		               pla
.1932	20 12 19	               jsr  nib2hex
.1935	8d c5 18	               sta  a2hexstr+1
.1938	a9 00		               lda  #$00                ; set end of string
.193a	8d c6 18	               sta  a2hexstr+2
.193d	68		               pla
.193e	28		               plp
.193f	60		               rts
.1940			xy2hex
.1940	20 08 17	               jsr  push
.1943	20 25 19	               jsr  a2hex
.1946	8a		               txa
.1947	48		               pha
.1948	20 1e 19	               jsr  lsra4bits
.194b	20 12 19	               jsr  nib2hex
.194e	8d c4 18	               sta  a2hexstr
.1951	68		               pla
.1952	20 12 19	               jsr  nib2hex
.1955	8d c5 18	               sta  a2hexstr+1
.1958	98		               tya
.1959	48		               pha
.195a	20 1e 19	               jsr  lsra4bits
.195d	20 12 19	               jsr  nib2hex
.1960	8d c6 18	               sta  a2hexstr+2
.1963	68		               pla
.1964	20 12 19	               jsr  nib2hex
.1967	8d c7 18	               sta  a2hexstr+3
.196a	a9 00		               lda  #$00                ; 0 ended string
.196c	8d c8 18	               sta  a2hexstr+4
.196f	20 47 17	               jsr  pop
.1972			atobin
.1972	20 08 17	               jsr  push
.1975	a2 08		               ldx  #8
.1977	a0 00		               ldy  #0
.1979	18		               clc
.197a	2a		nextbit        rol
.197b	48		               pha
.197c	69 00		               adc  #$00
.197e	29 01		               and  #$01
.1980	20 12 19	               jsr  nib2hex
.1983	99 c9 18	               sta  abin,y
.1986	68		               pla
.1987	c8		               iny
.1988	ca		               dex
.1989	d0 ef		               bne  nextbit
.198b	a9 00		               lda  #0
.198d	99 c9 18	               sta  abin,y
.1990	20 47 17	               jsr  pull
.1993	60		               rts
.1994			putabin
.1994	20 72 19	               jsr     atobin
.1997	20 08 17	               jsr     push
.199a	a2 c9		               ldx     #<abin
.199c	a0 18		               ldy     #>abin
.199e	20 a6 15	               jsr     puts
.19a1	20 47 17	               jsr     pop
.19a4	60		               rts
.19a5			printabin
.19a5	20 08 17	               jsr     push
.19a8	a2 c9		               ldx     #<abin
.19aa	a0 18		               ldy     #>abin
.19ac	20 a6 15	               jsr     puts
.19af	20 47 17	               jsr     pop
.19b2	60		               rts
.19b3			putabinfmt
.19b3	08		               php
.19b4	48		               pha
.19b5	a9 25		               lda     #"%"
.19b7	20 a0 15	               jsr     putch
.19ba	68		               pla
.19bb	20 94 19	               jsr     putabin
.19be	28		               plp
.19bf	60		               rts
.19c0			putabinxy
.19c0	20 bd 15	               jsr     gotoxy
.19c3	20 94 19	               jsr     putabin
.19c6	60		               rts
.19c7			putabinfmtxy
.19c7	20 bd 15	               jsr     gotoxy
.19ca	20 b3 19	               jsr     putabinfmt
.19cd	60		               rts
.19ce			atodec
.19ce	20 08 17	               jsr  push
.19d1	f8		               sed
.19d2	aa		               tax
.19d3	a0 00		               ldy  #$00
.19d5	a9 00		               lda  #$00
.19d7	18		nextbit        clc
.19d8	69 01		               adc  #$01
.19da	90 01		               bcc  decx
.19dc	c8		               iny
.19dd	ca		decx           dex
.19de	d0 f7		               bne  nextbit
.19e0	48		               pha
.19e1	98		               tya
.19e2	20 12 19	               jsr  nib2hex
.19e5	8d d2 18	               sta  adec
.19e8	68		               pla
.19e9	48		               pha
.19ea	20 12 19	               jsr  nib2hex
.19ed	8d d4 18	               sta  adec+2
.19f0	68		               pla
.19f1	6a		               ror
.19f2	6a		               ror
.19f3	6a		               ror
.19f4	6a		               ror
.19f5	20 12 19	               jsr  nib2hex
.19f8	8d d3 18	               sta  adec+1
.19fb	d8		               cld
.19fc	20 47 17	               jsr  pull
.19ff	60		               rts
>1a00	00 00 00	buffer         .byte     0,0,0

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>1a03	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>1a07	00 00 00 00 00 00 00 00 00 0d 00 00
>1a13	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>1a17	00 00 00 00 00 00 00 00 00 00 00 00
>1a23	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>1a27	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1a33	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1a37	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1a43	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1a47	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>1a53	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1a57	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>1a63	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1a67	00 00 00 00 00 00 00 00 00 00 00 00
>1a73	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1a77	00 00 00 00 00 00 00 00 00 00 00 00
>1a83	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1a87	00 00 00 00 00 00 00 00 00 00 00 00
>1a93	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1a97	00 00 00 00 00 00 00 00 00 00 00 00
>1aa3	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>1aa7	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1ab3	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1ab7	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1ac3	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1ac7	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>1ad3	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>1ad7	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>1ae3	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>1ae7	00 00 00 00 00 00 00 00 00 00 00 00
>1af3	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>1af7	00 00 00 00 00 00 00 00 00 00 00 00
.1b03			waitstop
.1b03	20 08 17	               jsr  push
.1b06	20 ed f6	wait           jsr  k_stop
.1b09	d0 fb		               bne  wait
.1b0b	20 47 17	               jsr  pop
.1b0e	60		               rts
.1b0f			anykey
.1b0f	08		               php
.1b10	48		               pha
.1b11	a5 cb		nokey          lda 203
.1b13	c9 40		               cmp #64
.1b15	f0 fa		               beq nokey
.1b17	20 1d 1b	               jsr releasekey
.1b1a	68		               pla
.1b1b	28		               plp
.1b1c	60		               rts
.1b1d			releasekey
.1b1d	08		               php
.1b1e	48		               pha
.1b1f	a5 cb		keypressed     lda 203
.1b21	c9 40		               cmp #64
.1b23	d0 fa		               bne keypressed
.1b25	68		               pla
.1b26	28		               plp
.1b27	60		               rts
.1b28			getkey
.1b28	20 e4 ff	again          jsr  getin
.1b2b	c9 00		               cmp  #0
.1b2d	f0 f9		               beq  again
.1b2f	60		               rts
.1b30			waitkey
.1b30	20 08 17	               jsr  push
.1b33	8d 81 1b	               sta  thekey
.1b36	20 e4 ff	nope           jsr  getin
.1b39	20 d2 ff	               jsr  chrout
.1b3c	cd 81 1b	               cmp  thekey
.1b3f	d0 f5		               bne  nope
.1b41	20 d2 ff	               jsr  chrout
.1b44	20 47 17	               jsr  pop
.1b47	60		               rts
.1b48			waitspace
.1b48	20 08 17	               jsr  push
.1b4b	a9 7f		wait           lda  #$7f  ;%01111111
.1b4d	8d 00 dc	               sta  $dc00
.1b50	ad 01 dc	               lda  $dc01
.1b53	29 10		               and  #$10  ;mask %00010000
.1b55	d0 f4		               bne  wait
.1b57	20 47 17	               jsr  pop
.1b5a			waitsstop
.1b5a	20 08 17	               jsr  push
.1b5d	20 ed f6	wait           jsr  k_stop  ;%01111111
.1b60	d0 fb		               bne  wait
.1b62	20 47 17	               jsr  pop
.1b65			waitreturn
.1b65	20 08 17	               jsr  push
.1b68	ad 82 1b	               lda  thecount
.1b6b	8d 00 1e	               sta  scrnram
.1b6e	a9 02		               lda  #$02
.1b70	8d 00 96	               sta  colorram
.1b73	20 e4 ff	nope           jsr  getin
.1b76	c9 0d		nohex          cmp  #$0d
.1b78	d0 f9		               bne  nope
.1b7a	ee 82 1b	               inc  thecount
.1b7d	20 47 17	               jsr  pop
.1b80	60		               rts
>1b81	00		thekey         .byte   0
>1b82	01		thecount       .byte   $01

;******  Return to file: template.asm


;******  End of listing

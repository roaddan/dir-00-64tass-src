
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L template.txt -o template.prg template.asm
; Mon Jun 24 15:41:22 2024

;Offset	;Hex		;Source

;******  Processing input file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-v20ex.asm

>1201	0b 12 0a 00	.word (+), 10       ;$1201 : Debut + 10 =$120b, $0010
>1205	9e 34 36 32	.null $9e, "4621"   ;$1205 : "sys4621" = jsr #120d
>1209	31 00
>120b	00 00		+ .word 0           ;$120b : $0000

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: template.asm

=1			TITLELINE=1
=6			BINLINE=6
=6			BINCOLM=6
=$10			XVAL=$10
=$40			XCPX=$40
=$03			DIFF=$03
.120d	20 2a 15	main           jsr scrmaninit
.1210	08		               php
.1211	48		               pha
.1212	a9 0e		               lda  #14
.1214	20 d2 ff	               jsr  $ffd2
.1217	68		               pla
.1218	28		               plp
.1219	48		               pha
.121a	a9 0e		               lda #(vnoir*16+(vbleu|8))
.121c	8d 0f 90	               sta  vicscrbrd
.121f	68		               pla
.1220	48		               pha
.1221	a9 01		               lda  #vblanc
.1223	8d 86 02	               sta  bascol
.1226	68		               pla
.1227	20 c7 16	               jsr  push
.122a	a2 01		               ldx  #1
.122c	a0 15		               ldy  #21
.122e	20 7c 15	               jsr  gotoxy
.1231	20 06 17	               jsr  pop
.1234	20 c7 16	               jsr  push
.1237	a2 d8		isx            ldx  #<string3
.1239	a0 14		isy            ldy  #>string3
.123b	20 65 15	               jsr  puts
.123e	20 06 17	               jsr  pull
.1241	48		               pha
.1242	a9 02		               lda  #vred
.1244	8d 86 02	               sta  bascol
.1247	68		               pla
.1248	20 c7 16	               jsr  push
.124b	a2 02		               ldx  #BINCOLM-4
.124d	a0 01		               ldy  #TITLELINE
.124f	20 7c 15	               jsr  gotoxy
.1252	20 06 17	               jsr  pop
.1255	20 c7 16	               jsr  push
.1258	a2 b7		isx            ldx  #<string1
.125a	a0 14		isy            ldy  #>string1
.125c	20 65 15	               jsr  puts
.125f	20 06 17	               jsr  pull
.1262	48		               pha
.1263	a9 05		               lda  #vgreen
.1265	8d 86 02	               sta  bascol
.1268	68		               pla
.1269	20 c7 16	               jsr  push
.126c	a2 01		               ldx  #BINCOLM-5
.126e	a0 03		               ldy  #BINLINE-3
.1270	20 7c 15	               jsr  gotoxy
.1273	20 06 17	               jsr  pop
.1276	20 c7 16	               jsr  push
.1279	a2 c9		isx            ldx  #<string2
.127b	a0 14		isy            ldy  #>string2
.127d	20 65 15	               jsr  puts
.1280	20 06 17	               jsr  pull
.1283	48		               pha
.1284	a9 05		               lda  #vgreen
.1286	8d 86 02	               sta  bascol
.1289	68		               pla
.128a	20 c7 16	               jsr  push
.128d	a2 07		               ldx  #BINCOLM+1
.128f	a0 04		               ldy  #BINLINE-2
.1291	20 7c 15	               jsr  gotoxy
.1294	20 06 17	               jsr  pop
.1297	20 c7 16	               jsr  push
.129a	a2 f3		isx            ldx  #<string5
.129c	a0 14		isy            ldy  #>string5
.129e	20 65 15	               jsr  puts
.12a1	20 06 17	               jsr  pull
.12a4	48		               pha
.12a5	a9 05		               lda  #vgreen
.12a7	8d 86 02	               sta  bascol
.12aa	68		               pla
.12ab	20 c7 16	               jsr  push
.12ae	a2 07		               ldx  #BINCOLM+1
.12b0	a0 05		               ldy  #BINLINE-1
.12b2	20 7c 15	               jsr  gotoxy
.12b5	20 06 17	               jsr  pop
.12b8	20 c7 16	               jsr  push
.12bb	a2 fc		isx            ldx  #<string6
.12bd	a0 14		isy            ldy  #>string6
.12bf	20 65 15	               jsr  puts
.12c2	20 06 17	               jsr  pull
.12c5	48		               pha
.12c6	a9 04		               lda  #vmauve
.12c8	8d 86 02	               sta  bascol
.12cb	68		               pla
.12cc	20 c7 16	               jsr  push
.12cf	a2 0f		               ldx  #BINCOLM+9
.12d1	a0 07		               ldy  #BINLINE+1
.12d3	20 7c 15	               jsr  gotoxy
.12d6	20 06 17	               jsr  pop
.12d9	20 c7 16	               jsr  push
.12dc	a2 ed		isx            ldx  #<string4
.12de	a0 14		isy            ldy  #>string4
.12e0	20 65 15	               jsr  puts
.12e3	20 06 17	               jsr  pull
.12e6	48		               pha
.12e7	a9 07		               lda  #vjaune
.12e9	8d 86 02	               sta  bascol
.12ec	68		               pla
.12ed	20 c7 16	               jsr  push
.12f0	a2 06		               ldx  #BINCOLM
.12f2	a0 09		               ldy  #BINLINE+3
.12f4	20 7c 15	               jsr  gotoxy
.12f7	20 06 17	               jsr  pop
.12fa	20 c7 16	               jsr  push
.12fd	a2 05		isx            ldx  #<string7
.12ff	a0 15		isy            ldy  #>string7
.1301	20 65 15	               jsr  puts
.1304	20 06 17	               jsr  pull
.1307	48		               pha
.1308	a9 07		               lda  #vjaune
.130a	8d 86 02	               sta  bascol
.130d	68		               pla
.130e	20 c7 16	               jsr  push
.1311	a2 06		               ldx  #BINCOLM
.1313	a0 0b		               ldy  #BINLINE+5
.1315	20 7c 15	               jsr  gotoxy
.1318	20 06 17	               jsr  pop
.131b	20 c7 16	               jsr  push
.131e	a2 12		isx            ldx  #<string8
.1320	a0 15		isy            ldy  #>string8
.1322	20 65 15	               jsr  puts
.1325	20 06 17	               jsr  pull
.1328	20 c7 16	               jsr  push
.132b	a2 02		               ldx  #2
.132d	a0 09		               ldy  #9
.132f	20 7c 15	               jsr  gotoxy
.1332	20 06 17	               jsr  pop
.1335	48		               pha
.1336	a9 01		               lda  #vwhite
.1338	8d 86 02	               sta  bascol
.133b	68		               pla
.133c	20 c7 16	               jsr  push
.133f	a9 25		               lda  #<adresse
.1341	85 fb		               sta  $fb
.1343	a9 15		               lda  #>adresse
.1345	85 fc		               sta  $fb+1
.1347	a0 01		               ldy  #$01
.1349	b1 fb		               lda  ($fb),y
.134b	20 31 19	               jsr  atobin
.134e	a9 25		               lda  #"%"
.1350	20 5f 15	               jsr  putch
.1353	20 c7 16	               jsr  push
.1356	a2 88		isx            ldx  #<abin
.1358	a0 18		isy            ldy  #>abin
.135a	20 65 15	               jsr  puts
.135d	20 06 17	               jsr  pull
.1360	88		               dey
.1361	b1 fb		               lda  ($fb),y
.1363	20 31 19	               jsr  atobin
.1366	20 c7 16	               jsr  push
.1369	a2 88		isx            ldx  #<abin
.136b	a0 18		isy            ldy  #>abin
.136d	20 65 15	               jsr  puts
.1370	20 06 17	               jsr  pull
.1373	20 06 17	               jsr  pop
.1376	a9 10		               lda #XVAL   ; initialise ...
.1378	8d 20 15	               sta count   ; ...le compteur
.137b	ad 20 15	next           lda count
.137e	38		               sec
.137f	ed 21 15	               sbc tstval
.1382	8d 22 15	               sta result
.1385	ae 20 15	               ldx count
.1388	a9 00		               lda #$00
.138a	48		               pha
.138b	28		               plp
.138c	ec 21 15	               cpx tstval
.138f	08		               php
.1390	68		               pla
.1391	20 31 19	               jsr atobin
.1394	48		               pha
.1395	48		               pha
.1396	a9 07		               lda  #vyellow
.1398	8d 86 02	               sta  bascol
.139b	68		               pla
.139c	20 c7 16	               jsr  push
.139f	a2 06		               ldx  #BINCOLM
.13a1	a0 07		               ldy  #BINLINE+1
.13a3	20 7c 15	               jsr  gotoxy
.13a6	20 06 17	               jsr  pop
.13a9	a9 25		               lda  #"%"
.13ab	20 5f 15	               jsr  putch
.13ae	20 c7 16	               jsr  push
.13b1	a2 88		isx            ldx  #<abin
.13b3	a0 18		isy            ldy  #>abin
.13b5	20 65 15	               jsr  puts
.13b8	20 06 17	               jsr  pull
.13bb	8a		               txa
.13bc	20 e4 18	               jsr a2hex
.13bf	48		               pha
.13c0	a9 03		               lda  #vcyan
.13c2	8d 86 02	               sta  bascol
.13c5	68		               pla
.13c6	20 c7 16	               jsr  push
.13c9	a2 08		               ldx  #BINCOLM+2
.13cb	a0 09		               ldy  #BINLINE+3
.13cd	20 7c 15	               jsr  gotoxy
.13d0	20 06 17	               jsr  pop
.13d3	a9 24		               lda  #"$"
.13d5	20 5f 15	               jsr  putch
.13d8	20 c7 16	               jsr  push
.13db	a2 83		isx            ldx  #<a2hexstr
.13dd	a0 18		isy            ldy  #>a2hexstr
.13df	20 65 15	               jsr  puts
.13e2	20 06 17	               jsr  pull
.13e5	20 c7 16	               jsr  push
.13e8	a2 06		               ldx  #BINCOLM
.13ea	a0 0b		               ldy  #BINLINE+5
.13ec	20 7c 15	               jsr  gotoxy
.13ef	20 06 17	               jsr  pop
.13f2	a9 24		               lda  #"$"
.13f4	20 5f 15	               jsr  putch
.13f7	20 c7 16	               jsr  push
.13fa	a2 83		isx            ldx  #<a2hexstr
.13fc	a0 18		isy            ldy  #>a2hexstr
.13fe	20 65 15	               jsr  puts
.1401	20 06 17	               jsr  pull
.1404	ad 21 15	               lda tstval
.1407	20 e4 18	               jsr a2hex
.140a	48		               pha
.140b	a9 03		               lda  #vcyan
.140d	8d 86 02	               sta  bascol
.1410	68		               pla
.1411	20 c7 16	               jsr  push
.1414	a2 0c		               ldx  #BINCOLM+6
.1416	a0 0b		               ldy  #BINLINE+5
.1418	20 7c 15	               jsr  gotoxy
.141b	20 06 17	               jsr  pop
.141e	a9 24		               lda  #"$"
.1420	20 5f 15	               jsr  putch
.1423	20 c7 16	               jsr  push
.1426	a2 83		isx            ldx  #<a2hexstr
.1428	a0 18		isy            ldy  #>a2hexstr
.142a	20 65 15	               jsr  puts
.142d	20 06 17	               jsr  pull
.1430	ad 22 15	               lda result
.1433	20 e4 18	               jsr a2hex
.1436	48		               pha
.1437	a9 03		               lda  #vcyan
.1439	8d 86 02	               sta  bascol
.143c	68		               pla
.143d	20 c7 16	               jsr  push
.1440	a2 11		               ldx  #BINCOLM+11
.1442	a0 0b		               ldy  #BINLINE+5
.1444	20 7c 15	               jsr  gotoxy
.1447	20 06 17	               jsr  pop
.144a	a9 24		               lda  #"$"
.144c	20 5f 15	               jsr  putch
.144f	20 c7 16	               jsr  push
.1452	a2 83		isx            ldx  #<a2hexstr
.1454	a0 18		isy            ldy  #>a2hexstr
.1456	20 65 15	               jsr  puts
.1459	20 06 17	               jsr  pull
.145c	68		               pla
.145d	20 e4 18	               jsr a2hex
.1460	48		               pha
.1461	a9 03		               lda  #vcyan
.1463	8d 86 02	               sta  bascol
.1466	68		               pla
.1467	20 c7 16	               jsr  push
.146a	a2 10		               ldx  #BINCOLM+10
.146c	a0 07		               ldy  #BINLINE+1
.146e	20 7c 15	               jsr  gotoxy
.1471	20 06 17	               jsr  pop
.1474	a9 24		               lda  #"$"
.1476	20 5f 15	               jsr  putch
.1479	20 c7 16	               jsr  push
.147c	a2 83		isx            ldx  #<a2hexstr
.147e	a0 18		isy            ldy  #>a2hexstr
.1480	20 65 15	               jsr  puts
.1483	20 06 17	               jsr  pull
.1486	ee 20 15	               inc count
.1489	ad 21 15	               lda tstval
.148c	18		               clc
.148d	69 03		               adc #DIFF
.148f	8d 21 15	               sta tstval
.1492	20 c7 16	               jsr  push
.1495	a2 01		               ldx  #1
.1497	a0 19		               ldy  #25
.1499	20 7c 15	               jsr  gotoxy
.149c	20 06 17	               jsr  pop
.149f	20 ce 1a	               jsr anykey
.14a2	4c 7b 13	               jmp next
.14a5	60		               rts
.14a6			delay65536
.14a6	20 c7 16	               jsr push
.14a9	a2 00		               ldx #$00
.14ab	a0 00		               ldy #$00
.14ad	88		waity          dey
.14ae	d0 fd		               bne waity
.14b0	ca		waitx          dex
.14b1	d0 fa		               bne waity
.14b3	20 06 17	               jsr pop
.14b6	60		               rts
>14b7	d4 c5 d3 d4	string1        .null    "TEST DRAPEAUX CPU"
>14bb	20 c4 d2 c1 d0 c5 c1 d5 d8 20 c3 d0 d5 00
>14c9	c6 cc c1 c7	string2        .null    "FLAGS:NV-BDIZC"
>14cd	d3 3a ce d6 2d c2 c4 c9 da c3 00
>14d8	d0 41 52 3a	string3        .null    "Par: Daniel Lafrance"
>14dc	20 c4 41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45
>14ec	00
>14ed	28 20 20 20	string4        .null    "(   )"
>14f1	29 00
>14f3	5e 5e 20 5e	string5        .byte    94,94,32,94,94,94,94,94,0
>14f7	5e 5e 5e 5e 00
>14fc	7d 7d 3f 7d	string6        .byte    125,125,'?',125,125,125,125,125,0
>1500	7d 7d 7d 7d 00
>1505	d8 3d 24 20	string7        .null    "X=$   CPX #$"
>1509	20 20 c3 d0 d8 20 23 24 00
>1512	24 20 20 20	string8        .null    "$   - $   = $"
>1516	2d 20 24 20 20 20 3d 20 24 00
>1520	10		count          .byte    XVAL
>1521	40		tstval         .byte    XCPX
>1522	00		result         .byte    0
>1523	00		row            .byte    0
>1524	00		lin            .byte    0
>1525	34 12		adresse        .word     $1234

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-vic20-kernal.asm

=$90			kiostatus   =   $90     ; Kernal I/O status word (st) (byte)
=$b7			curfnlen    =   $b7     ; Current filename length (byte)
=$b9			cursecadd   =   $b9     ; Current secondary address (byte)
=$ba			curdevno    =   $ba     ; Current device number (byte)
=$bb			curfptr     =   $bb     ; Current file pointer (word)
=$fb			zpage1      =   $fb     ; zero page 1 address (word)
=$fd			zpage2      =   $fd     ; zero page 2 address (word)
=$0286			bascol      =   $0286   ; basic next chr colscreenram (byte)
=$1000			scrnramex   =   $1000   ; video character ram (with ram expansion)
=$1200			basicstaex  =   $1200   ; basic start address (with ram expansion)
=$9400			colorramex  =   $9400   ; video color ram (with ram expansion)
=$1e00			scrnram     =   $1e00   ; video character ram (no ram expansion)
=$1000			basicsta    =   $1000   ; basic start address (no ram expansion)
=$9600			colorram    =   $9600   ; video color ram (no ram expansion)
=$1e00			scrram0     =   scrnram
=7936			scrram1     =   scrram0+$0100
=$9600			colram0     =   colorram
=38656			colram1     =   colram0+$0100
=$8000			chargen     =   $8000
=$9000			ioblock     =   $9000   ;
=$9000			vicchip     =   $9000
=$a000			ramblk4     =   $a000
=$c000			basicrom    =   $c000
=$e000			kernalrom   =   $e000
=$03			bstop       =   $03      ;stop
=$05			bwhite      =   $05      ;set color white
=$08			block       =   $08      ;lock the charset
=$09			bunlock     =   $09      ;unlock the charset
=$0d			bcarret     =   $0d
=$0e			btext       =   $0e
=$11			bcrsdn      =   $11      ;cursor down 1 line
=$12			brevcol     =   $12
=$13			bhome       =   $13
=$14			bdelete     =   $14
=$1c			bred        =   $1c
=$1d			bcuright    =   $1d
=$1e			bgreen      =   $1e
=$1f			bblue       =   $1f
=$81			borange     =   $81
=$83			blrun       =   $83
=$85			bfkey1      =   $85
=$86			bfkey2      =   $86
=$87			bfkey3      =   $87
=$88			bfkey4      =   $88
=$89			bfkey5      =   $89
=$8a			bfkey6      =   $8a
=$8b			bfkey7      =   $8b
=$8c			bfkey8      =   $8c
=$8d			bcarret1    =   $8d
=$8e			bgraph      =   $8e
=$90			bblack      =   $90
=$91			bcuup       =   $91
=$92			brevoff     =   $92
=$93			bclear      =   $93
=$94			binsert     =   $94
=$95			bbrown      =   $95
=$96			bltred      =   $96
=$97			bdkgrey     =   $97
=$98			bmdgrey     =   $98
=$99			bltgreen    =   $99
=$9a			bltblue     =   $9a
=$9b			bltgrey     =   $9b
=$9c			bmagenta    =   $9c
=$9d			bculeft     =   $9d
=$9e			byellow     =   $9e
=$9f			bcyan       =   $9f
=$0286			carcol      =   $0286
=$030a			ieval       =   $030a
=$73			chrget      =   $73
=$79			chrgot      =   $79
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$ffb4			stalk   = $ffb4 ; Send Talk command to serial bus.
=$ffb1			slisten = $ffb1 ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$ffa5			acptr   = $ffa5 ; jmp $ef19 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ffa8			ciout   = $ffa8 ; jmp $eee4 Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ffb1			listen  = $ffb1 ; jmp ($ee17) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f542 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe82 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe73 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ffde			rdtim   = $ffde ; jmp $f760 Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe57 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd52 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f675 Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $eb1e Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $eec0 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe50 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe66 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fe49 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f767 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe6f Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ee14 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $eec1 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f734 Update the system clock
=$ffae			unlsn   = $ffae ; jmp $ef04 Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $eef6 Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $f675 Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$f1ca			kd_chrout    =   $f1ca
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.1527	4c 0d 12	pgmstart        jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-vic20-vic.asm

=$9000			vic = $9000			; VicII C64 memorymap base address
=36864			vichorcnt = vic+$00	; $9000, 36864 Bit 0-6 Horizontal centering.
=36865			vicvercnt = vic+$01	; $9001, 36865 Vertical centering.
=36866			viccolnum = vic+$02	; $9002, 36866 Bit 0-6 set # of column.
=36867			vicrownum = vic+$03	; $9003, 36867 Bit 1-6 set # of rows.
=36868			vicsrastr = vic+$04	; $9004, 36868 TV raster beam line.
=36869			viccstart = vic+$05	; $9005, 36869 Bit 0-3 start of character memory (dflt=0).
=36870			vicpenhor = vic+$06	; $9006, 36870 Horizontal position of light pen.
=36871			vicpenver = vic+$07	; $9007, 36871 Vertical position of light pen
=36872			vicpadhor = vic+$08	; $9008, 36872 Digitized value of paddle X
=36873			vicpadver = vic+$09	; $9009, 36873 Digitized value of paddle Y
=36874			vicosclhz = vic+$0a	; $900a, 36874 Oscillator 1 freq. (low) (on: 128-255)
=36875			vicoscmhz = vic+$0b	; $900b, 36875 Oscillator 2 freq. (medium) (on: 128-255)
=36876			vicoschhz = vic+$0c	; $900c, 36876 Oscillator 3 freq. (high) (on: 128-255)
=36877			vicnoizhz = vic+$0d	; $900d, 36877 Noise source freq.
=36878			vicvolume = vic+$0e	; $900e, 36878 Bit 0-3 set volume of all sound.
=36879			vicscrbrd = vic+$0f	; $900f, 36879 Screen and border color register.
=36879			vicbordcol=vicscrbrd
=36879			vicbackcol=vicscrbrd

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-vic20-basic2.asm

=$c3bb			b_opentxtspc  = $c3bb ;  1) Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$c408			b_chkavailmem = $c408 ;  2) Check available Memory. *1  ;a-y;---; Array top $yyaa
=$c435			b_outofmem    = $c435 ;  3) ?Out of memory.             ;---;---;
=$c437			b_errormesg   = $c437 ;  4) Send BASIC error message.   ;a--;---; a = errno
=$e467			b_warmstart   = $e467 ;  5) Basic warm start.           ;---;---;
=$c48a			b_chrget      = $c48a ;  6) Main CHRGET entry.          ;---;---;
=$c49c			b_newline     = $c49c ;  7) Crunch tokens, insert line. ;-x-;---; x = buff len
=$c52a			b_clrready    = $c52a ;  8) Fix chaining CLR and READY. ;---;---;
=$c533			b_fixchaining = $c533 ;  9) Fix chaining.               ;---;---;
=$c560			b_kbgetline   = $c560 ; 10) Recieve line from keyboard.
=$c579			b_crunchtkns  = $c579 ; 11) Crunch token. *7            ;-x-;---: x = buff len
=$c613			b_findline    = $c613 ; 12) Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$c642			b_new         = $c642 ; 13) Do NEW                      ;---;---;
=$c659			b_resetclr    = $c659 ; 14) Reset BASIC and do CLR      ;---;---;
=$c65e			b_clr         = $c65e ; 15) Do CLR                      ;---;---;
=$c68e			b_rstchrget   = $c68e ; 17) Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$c857			b_continue    = $c857 ; 18) Do CONTINUE.                ;a-y;---; curline $yyaa
=$c96b			b_getint      = $c96b ; 19) Get int from BASIX text.    ;---;---;
=$cad3			b_sndcr       = $cad3 ; 20) Send RETURN, LF in scr mode.;---;a--; a = LF
=$cad7			b_sndcrlf     = $cad7 ; 21) Send RETURN, LINEFEED.      ;---;a--; a = LF
=$cb1e			b_outstr_ay   = $cb1e ; 22) Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$cb1e			b_puts        = b_outstr_ay
=$cb24			b_outstrprep  = $cb24 ; 23) Print precomputated string. ;a--;---; a = strlen
=$cb45			b_printqm     = $cb45 ; 24) Print '?'.                  ;---;---;
=$cb47			b_sendchar    = $cb47 ; 25) Send char in a to device.   ;a--;a--; a = char
=$cd8a			b_frmnum      = $cd8a ; Evaluate numeric expression and/or check for data type mismatch
=$cd9e			b_evalexpr    = $cd9e ; 26) Evaluate expression.
=$cefd			b_chk4comma   = $cefd ; 27) Check for coma.             ;---;a--; a = char
=$cefa			b_chk4lpar    = $cefa ; 28) check for '('.              ;---;a--; a = char
=$cef7			b_chk4rpar    = $cef7 ; 29) check for ')'.              ;---;a--; a = char
=$cf08			b_syntaxerr   = $cf08 ; 30) send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; 31) find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; 32) Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; 33) Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; 34) Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; 35) Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; 36) Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; 37) Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; 38) Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; 39) Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; 40) Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; 41) Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; 42) Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; 43) Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; 44) Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; 45) Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; 46) Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; 47) Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; 48) Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; 49) Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; 50) Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-vic20-basic2.asm

.152a			scrmaninit
.152a	20 c7 16	               jsr  push
.152d	a9 00		               lda  #vnoir
.152f	2a		               rol
.1530	2a		               rol
.1531	2a		               rol
.1532	2a		               rol
.1533	09 05		               ora  #vvert
.1535	09 08		               ora  #%00001000
.1537	8d 0f 90	               sta  vicbackcol
.153a	a9 01		               lda  #vblanc
.153c	8d 86 02	               sta  bascol
.153f	a9 02		               lda  #%00000010
.1541	8d 00 90	               sta  vichorcnt
.1544	20 4b 15	               jsr  cls
.1547	20 06 17	               jsr  pop
.154a	60		               rts
.154b			cls
.154b	08		               php
.154c	48		               pha
.154d	a9 93		               lda  #$93
.154f	20 5f 15	               jsr  putch
.1552	a9 04		               lda  #$04
.1554	8d 00 90	               sta  vichorcnt
.1557	a9 1a		               lda  #$1a
.1559	8d 01 90	               sta  vicvercnt
.155c	68		               pla
.155d	28		               plp
.155e	60		               rts
.155f			putch
.155f	08		               php
.1560	20 d2 ff	               jsr  $ffd2
.1563	28		               plp
.1564	60		               rts
.1565			puts
.1565	20 c7 16	               jsr  push
.1568	86 fb		               stx  zpage1
.156a	84 fc		               sty  zpage1+1
.156c	a0 00		               ldy  #$00
.156e	b1 fb		next           lda  (zpage1),y
.1570	f0 06		               beq  out
.1572	20 5f 15	               jsr  putch
.1575	c8		               iny
.1576	d0 f6		               bne  next
.1578	20 06 17	out            jsr  pop
.157b	60		               rts
.157c			gotoxy
.157c	20 c7 16	               jsr  push
.157f	98		               tya
.1580	48		               pha
.1581	8a		               txa
.1582	a8		               tay
.1583	68		               pla
.1584	aa		               tax
.1585	18		               clc
.1586	20 f0 ff	               jsr  kplot
.1589	20 06 17	               jsr  pop
.158c	60		               rts
.158d			cursor
=$0286			bascol    =    $0286
.158d	08		               php
.158e	48		               pha
.158f	90 12		               bcc  restore
.1591	20 f0 ff	               jsr  kplot
.1594	8c b5 15	               sty  cx
.1597	8e b6 15	               stx  cy
.159a	ad 86 02	               lda  bascol
.159d	8d b7 15	               sta  bcol
.15a0	4c b2 15	               jmp  out
.15a3	ae b6 15	restore        ldx  cy
.15a6	ac b5 15	               ldy  cx
.15a9	20 f0 ff	               jsr  kplot
.15ac	ad b7 15	               lda  bcol
.15af	8d 86 02	               sta  bascol
.15b2	68		out            pla
.15b3	28		               plp
.15b4	60		               rts
>15b5	00		cx   .byte     $00
>15b6	00		cy   .byte     $00
>15b7	00		bcol .byte     $00
.15b8			cursave
.15b8	08		               php
.15b9	38		               sec
.15ba	20 8d 15	               jsr  cursor
.15bd	28		               plp
.15be	60		               rts
.15bf			curput
.15bf	08		               php
.15c0	18		               clc
.15c1	20 8d 15	               jsr  cursor
.15c4	28		               plp
.15c5	60		               rts
.15c6			putsxy
.15c6	08		               php
.15c7	8e 2b 16	               stx  straddr
.15ca	8c 2c 16	               sty  straddr+1
.15cd	48		               pha
.15ce	98		               tya
.15cf	48		               pha
.15d0	8a		               txa
.15d1	48		               pha
.15d2	a5 fb		               lda  zpage1
.15d4	8d 2f 16	               sta  zp1
.15d7	a5 fc		               lda  zpage1+1
.15d9	8d 30 16	               sta  zp1+1
.15dc	ad 2c 16	               lda  straddr+1
.15df	85 fc		               sta  zpage1+1
.15e1	ad 2b 16	               lda  straddr
.15e4	85 fb		               sta  zpage1
.15e6	a0 00		               ldy  #$00
.15e8	b1 fb		               lda  (zpage1),y
.15ea	8d 2d 16	               sta  px
.15ed	c8		               iny
.15ee	b1 fb		               lda  (zpage1),y
.15f0	8d 2e 16	               sta  py
.15f3	aa		               tax
.15f4	ac 2d 16	               ldy  px
.15f7	20 7c 15	               jsr  gotoxy
.15fa	18		               clc
.15fb	ee 2b 16	               inc  straddr
.15fe	ad 2b 16	               lda  straddr
.1601	8d 2b 16	               sta  straddr
.1604	90 03		               bcc  norep1
.1606	ee 2c 16	               inc  straddr+1
.1609	ee 2b 16	norep1         inc  straddr
.160c	90 03		               bcc  norep2
.160e	ee 2c 16	               inc  straddr+1
.1611	ad 2b 16	norep2         lda  straddr
.1614	ac 2c 16	               ldy  straddr+1
.1617	20 65 15	               jsr  puts
.161a	ad 30 16	               lda  zp1+1
.161d	85 fc		               sta  zpage1+1
.161f	ad 2f 16	               lda  zp1
.1622	85 fb		               sta  zpage1
.1624	68		               pla
.1625	aa		               tax
.1626	68		               pla
.1627	a8		               tay
.1628	68		               pla
.1629	28		               plp
.162a	60		               rts
>162b	00 00		straddr   .word     $00
>162d	00		px        .byte     $00
>162e	00		py        .byte     $00
>162f	00 00		zp1       .word     $00
.1631			putscxy
.1631	08		               php
.1632	8e 87 16	               stx  straddr
.1635	8c 88 16	               sty  straddr+1
.1638	48		               pha
.1639	98		               tya
.163a	48		               pha
.163b	8a		               txa
.163c	48		               pha
.163d	a5 fb		               lda  zpage1
.163f	8d 8a 16	               sta  zp1
.1642	a5 fc		               lda  zpage1+1
.1644	8d 8b 16	               sta  zp1+1
.1647	ad 88 16	               lda  straddr+1
.164a	85 fc		               sta  zpage1+1
.164c	ad 87 16	               lda  straddr
.164f	85 fb		               sta  zpage1
.1651	ad 86 02	               lda  bascol
.1654	8d 89 16	               sta  bc
.1657	a0 00		               ldy #$00
.1659	b1 fb		               lda  (zpage1),y
.165b	8d 86 02	               sta  bascol
.165e	18		               clc
.165f	ee 87 16	               inc  straddr
.1662	90 03		               bcc  norep1
.1664	ee 88 16	               inc  straddr+1
.1667	ad 87 16	norep1         lda  straddr
.166a	ac 88 16	               ldy  straddr+1
.166d	20 c6 15	               jsr  putsxy
.1670	ad 89 16	               lda  bc
.1673	8d 86 02	               sta  bascol
.1676	ad 8b 16	               lda  zp1+1
.1679	85 fc		               sta  zpage1+1
.167b	ad 8a 16	               lda  zp1
.167e	85 fb		               sta  zpage1
.1680	68		               pla
.1681	aa		               tax
.1682	68		               pla
.1683	a8		               tay
.1684	68		               pla
.1685	28		               plp
.1686	60		               rts
>1687	00 00		straddr  .word      $00
>1689	00		bc       .byte      $00
>168a	00 00		zp1      .word      $00
.168c			putrahex
.168c	08		               php
.168d	48		               pha
.168e	20 e4 18	               jsr  a2hex
.1691	a9 83		               lda  #<a2hexstr
.1693	a0 18		               ldy  #>a2hexstr
.1695	20 65 15	               jsr  puts
.1698	68		               pla
.1699	28		               plp
.169a	60		               rts
.169b			kputrahexxy
.169b			bputrahexxy
.169b			putrahexxy
.169b	08		               php
.169c	20 e4 18	               jsr  a2hex
.169f	a9 80		               lda  #<a2hexpos
.16a1	a0 18		               ldy  #>a2hexpos
.16a3	20 c6 15	               jsr  putsxy
.16a6	68		               pla
.16a7	28		               plp
.16a8	60		               rts
.16a9			putrahexcxy
.16a9	08		               php
.16aa	20 e4 18	               jsr  a2hex
.16ad	a9 80		               lda  #<a2hexpos
.16af	a0 18		               ldy  #>a2hexpos
.16b1	20 31 16	               jsr  putscxy
.16b4	68		               pla
.16b5	28		               plp
.16b6	60		               rts
.16b7			setinverse
.16b7	48		               pha
.16b8	a9 12		               lda  #$12
.16ba	20 d2 ff	               jsr  $ffd2
.16bd	68		               pla
.16be	60		               rts
.16bf			clrinverse
.16bf	48		               pha
.16c0	a9 92		               lda  #$92
.16c2	20 d2 ff	               jsr  $ffd2
.16c5	68		               pla
.16c6	60		               rts

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.16c7			push
.16c7	08		          php            ; stack : flg, pcl, pch
.16c8	78		          sei
.16c9	8d 03 17	          sta  ra        ; save a
.16cc	68		          pla            ; stack : pcl, pch
.16cd	8d 02 17	          sta  rp        ; save rp
.16d0	68		          pla            ; stack : pch
.16d1	8d 04 17	          sta  pc        ; save pcl
.16d4	68		          pla            ; stack : -
.16d5	8d 05 17	          sta  pc+1      ; save pch
.16d8	a5 fb		          lda  zpage1    ; get zpage1 low byte
.16da	48		          pha            ; stack : zp1l
.16db	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.16dd	48		          pha            ; stack : zp1h, zp1l
.16de	a5 fd		          lda  zpage2    ; get zpage2 low byte
.16e0	48		          pha            ; stack : zp2l, zp1h, zp1l
.16e1	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.16e3	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.16e4	ad 02 17	          lda  rp        ; get rp
.16e7	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.16e8	ad 03 17	          lda  ra        ; get a
.16eb	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.16ec	8a		          txa            ; get x
.16ed	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.16ee	98		          tya            ; get y
.16ef	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.16f0	ad 05 17	          lda  pc+1      ; get pch
.16f3	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.16f4	ad 04 17	          lda  pc        ; get pcl
.16f7	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.16f8	ad 02 17	          lda  rp        ; get rp
.16fb	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.16fc	ad 03 17	          lda  ra        ; get a
.16ff	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1700	58		          cli
.1701	60		          rts
>1702	00		rp        .byte     0
>1703	00		ra        .byte     0
>1704	00 00		pc        .word     0
.1706			pull
.1706			pop
.1706	78		          sei
.1707	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1708	8d 3b 17	          sta  pc        ; save pcl
.170b	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.170c	8d 3c 17	          sta  pc+1      ; save pch
.170f	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1710	a8		          tay            ; set y
.1711	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1712	aa		          tax            ; set x
.1713	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1714	8d 3a 17	          sta  ra        ; save a
.1717	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1718	8d 39 17	          sta  rp        ; save rp
.171b	68		          pla            ; stack : zp2l, zp1h, zp1l
.171c	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.171e	68		          pla            ; stack : zp1h, zp1l
.171f	85 fd		          sta  zpage2    ; get zpage2 High byte
.1721	68		          pla            ; stack : zp1l
.1722	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.1724	68		          pla            ; stack :
.1725	85 fb		          sta  zpage1    ; get zpage1 High byte
.1727	ad 3c 17	          lda  pc+1      ; get pch
.172a	48		          pha            ; stack : pch
.172b	ad 3b 17	          lda  pc
.172e	48		          pha            ; stack : pcl, pch
.172f	ad 39 17	          lda  rp        ; get rp
.1732	48		          pha            ; stack : rp, pcl, pch
.1733	ad 3a 17	          lda  ra        ; set ra
.1736	58		          cli
.1737	28		          plp            ; stack : pcl, pch
.1738	60		          rts
>1739	00		rp        .byte     0
>173a	00		ra        .byte     0
>173b	00 00		pc        .word     0

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.173d			blkfill
.173d	20 c7 16	bf0            jsr  push
.1740	20 fe 17	               jsr  savezp1
.1743	84 fc		               sty  zpage1+1
.1745	a0 00		               ldy  #$00
.1747	84 fb		               sty  zpage1
.1749	91 fb		bf1            sta  (zpage1),y
.174b	c8		               iny
.174c	d0 fb		               bne  bf1
.174e	20 0d 18	               jsr  restzp1
.1751	20 06 17	               jsr  pop
.1754	60		               rts
.1755			memfill
.1755	20 c7 16	               jsr  push
.1758	20 3d 17	mf1            jsr  blkfill
.175b	c8		               iny
.175c	ca		               dex
.175d	d0 f9		               bne  mf1
.175f	20 06 17	               jsr  pop
.1762	60		               rts
.1763			memmove
.1763	20 c7 16	               jsr  push
.1766	ba		               tsx            ; On se crée un pointeur ...
.1767	8a		               txa
.1768	18		               clc
.1769	69 0b		               adc  #11
.176b	a8		               tay
.176c	a2 06		               ldx  #$06
.176e	b9 00 01	nextbyte       lda  $0100,y
.1771	99 bd 17	               sta  words,y
.1774	c8		               iny
.1775	ca		               dex
.1776	d0 f6		               bne  nextbyte
.1778	ad bd 17	               lda  s
.177b	8d 94 17	               sta  source+1
.177e	ad be 17	               lda  s+1
.1781	8d 95 17	               sta  source+2
.1784	ad bf 17	               lda  d
.1787	8d 91 17	               sta  destin+1
.178a	ad c0 17	               lda  d+1
.178d	8d 92 17	               sta  destin+2
.1790	ad ff ff	destin         lda  $ffff
.1793	8d ff ff	source         sta  $ffff
.1796	ee 91 17	               inc  destin+1
.1799	d0 03		               bne  src
.179b	ee 92 17	               inc  destin+2
.179e	ee 94 17	src            inc  source+1
.17a1	d0 03		               bne  cnt
.17a3	ee 95 17	               inc  source+2
.17a6	ad c1 17	cnt            lda  compte
.17a9	d0 08		               bne  decit
.17ab	ad c2 17	               lda  compte+1
.17ae	f0 09		               beq  fini
.17b0	ce c2 17	               dec  compte+1
.17b3	ce c1 17	decit          dec  compte
.17b6	4c 90 17	               jmp  destin
.17b9	20 06 17	fini           jsr  pop
.17bc	60		               rts
.17bd			words
>17bd	00 00		s         .word     $0000
>17bf	00 00		d         .word     $0000
>17c1	00 00		compte    .word     $0000
.17c3			decword
.17c3	20 c7 16	               jsr  push
.17c6	86 fd		               stx  zpage2
.17c8	84 fe		               sty  zpage2+1
.17ca	20 06 17	               jsr  pop
.17cd	60		               rts
.17ce			inczp1
.17ce	08		               php
.17cf	48		               pha
.17d0	e6 fb		               inc  zpage1
.17d2	a5 fb		               lda  zpage1
.17d4	d0 02		               bne  nopage
.17d6	e6 fc		               inc  zpage1+1
.17d8	68		nopage         pla
.17d9	28		               plp
.17da	60		               rts
.17db			deczp1
.17db	08		                php
.17dc	48		                pha
.17dd	c6 fb		                dec  zpage1
.17df	d0 02		                bne  nopage
.17e1	c6 fc		                dec  zpage1+1
.17e3	68		nopage          pla
.17e4	28		                plp
.17e5	60		                rts
.17e6			inczp2
.17e6	08		               php
.17e7	48		               pha
.17e8	e6 fd		               inc  zpage2
.17ea	a5 fd		               lda  zpage2
.17ec	d0 02		               bne  nopage
.17ee	e6 fe		               inc  zpage2+1
.17f0	68		nopage         pla
.17f1	28		               plp
.17f2	60		               rts
.17f3			deczp2
.17f3	08		               php
.17f4	48		               pha
.17f5	a5 fd		               lda  zpage2
.17f7	d0 02		               bne  nopage
.17f9	c6 fe		               dec  zpage2+1
.17fb	68		nopage         pla
.17fc	28		               plp
.17fd	60		               rts
.17fe			savezp1
.17fe	08		               php
.17ff	48		               pha
.1800	a5 fb		               lda  zpage1
.1802	8d 7a 18	               sta  zp1
.1805	a5 fc		               lda  zpage1+1
.1807	8d 7b 18	               sta  zp1+1
.180a	68		               pla
.180b	28		               plp
.180c	60		               rts
.180d			restzp1
.180d	08		               php
.180e	48		               pha
.180f	ad 7a 18	               lda zp1
.1812	85 fb		               sta zpage1
.1814	ad 7b 18	               lda zp1+1
.1817	85 fc		               sta zpage1+1
.1819	68		               pla
.181a	28		               plp
.181b	60		               rts
.181c			savezp2
.181c	08		         php
.181d	48		         pha
.181e	a5 fd		         lda zpage2
.1820	8d 7c 18	         sta zp2
.1823	a5 fe		         lda zpage2+1
.1825	8d 7d 18	         sta zp2+1
.1828	68		         pla
.1829	28		         plp
.182a	60		         rts
.182b			restzp2
.182b	08		                php
.182c	48		                pha
.182d	ad 7c 18	                lda  zp2
.1830	85 fd		                sta  zpage2
.1832	ad 7d 18	                lda  zp2+1
.1835	85 fe		                sta  zpage2+1
.1837	68		                pla
.1838	28		                plp
.1839	60		                rts
.183a			xy2addr
.183a	08		                php
.183b	48		                pha
.183c	8a		                txa
.183d	48		                pha
.183e	98		                tya
.183f	48		                pha
.1840	ad 75 18	                lda     addr1+1
.1843	8d 77 18	                sta     addr2+1
.1846	ad 74 18	                lda     addr1
.1849	8d 76 18	                sta     addr2
.184c	c0 00		                cpy     #$00
.184e	f0 0f		                beq     addx
.1850	18		moreline        clc
.1851	6d 73 18	                adc     ymult
.1854	90 03		                bcc     norepy
.1856	ee 77 18	                inc     addr2+1
.1859	8d 76 18	norepy          sta     addr2
.185c	88		                dey
.185d	d0 f1		                bne     moreline
.185f	8a		addx            txa
.1860	18		                clc
.1861	6d 76 18	                adc     addr2
.1864	90 03		                bcc     thatsit
.1866	ee 77 18	                inc     addr2+1
.1869	8d 76 18	thatsit         sta     addr2
.186c	68		                pla
.186d	a8		                tay
.186e	68		                pla
.186f	aa		                tax
.1870	68		                pla
.1871	28		                plp
.1872	60		                rts
>1873	28		ymult          .byte     40
>1874	00 00		addr1          .word     $0000
>1876	00 00		addr2          .word     $0000
>1878	00 00		bytecnt        .word     $0000
>187a	00 00		zp1        .word   $0000
>187c	00 00		zp2        .word   $0000

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>187e	01		a2hexcol       .byte     1              ; pour aputscxy
>187f	00		a2hexbkcol     .byte     %00000000
.1880			a2hexpos
>1880	00		a2hexpx        .byte     0              ; pour aputsxy
>1881	00		a2hexpy        .byte     0
>1882	24		a2hexprefix    .byte     "$"            ; pour aputs
>1883	00 00		a2hexstr       .word     $00
>1885	00 00		               .word     $00
>1887	00		               .byte     0              ; 0 end string
>1888	30 30 30 30	abin           .null     "00000000"
>188c	30 30 30 30 00
>1891	20 20 20 00	adec           .null     "   "
.1895			putahexfmtxy
.1895	20 c7 16	               jsr  push
.1898	20 e4 18	               jsr  a2hex
.189b	ae 80 18	               ldx  a2hexpx
.189e	ac 81 18	               ldy  a2hexpy
.18a1	20 7c 15	               jsr  gotoxy
.18a4	a2 82		               ldx  #<a2hexprefix
.18a6	a0 18		               ldy  #>a2hexprefix
.18a8	20 65 15	               jsr  puts
.18ab	20 06 17	               jsr  pop
.18ae	60		               rts
.18af			putahexfmt
.18af	20 c7 16	               jsr  push
.18b2	20 e4 18	               jsr  a2hex
.18b5	a2 82		               ldx  #<a2hexprefix
.18b7	a0 18		               ldy  #>a2hexprefix
.18b9	20 65 15	               jsr  puts
.18bc	20 06 17	               jsr  pop
.18bf	60		               rts
.18c0			putahex
.18c0	20 c7 16	               jsr  push
.18c3	20 e4 18	               jsr  a2hex
.18c6	a2 83		               ldx  #<a2hexstr
.18c8	a0 18		               ldy  #>a2hexstr
.18ca	20 65 15	               jsr  puts
.18cd	20 06 17	               jsr  pop
.18d0	60		               rts
.18d1			nib2hex
.18d1	08		               php
.18d2	29 0f		               and  #$0f
.18d4	f8		               sed
.18d5	18		               clc
.18d6	69 90		               adc  #$90
.18d8	69 40		               adc  #$40
.18da	d8		               cld
.18db	28		               plp
.18dc	60		               rts
.18dd			lsra4bits
.18dd	08		               php
.18de	4a		               lsr
.18df	4a		               lsr
.18e0	4a		               lsr
.18e1	4a		               lsr
.18e2	28		               plp
.18e3	60		               rts
.18e4			a2hex
.18e4	08		               php
.18e5	48		               pha
.18e6	48		               pha
.18e7	20 dd 18	               jsr  lsra4bits
.18ea	20 d1 18	               jsr  nib2hex
.18ed	8d 83 18	               sta  a2hexstr
.18f0	68		               pla
.18f1	20 d1 18	               jsr  nib2hex
.18f4	8d 84 18	               sta  a2hexstr+1
.18f7	a9 00		               lda  #$00                ; set end of string
.18f9	8d 85 18	               sta  a2hexstr+2
.18fc	68		               pla
.18fd	28		               plp
.18fe	60		               rts
.18ff			xy2hex
.18ff	20 c7 16	               jsr  push
.1902	20 e4 18	               jsr  a2hex
.1905	8a		               txa
.1906	48		               pha
.1907	20 dd 18	               jsr  lsra4bits
.190a	20 d1 18	               jsr  nib2hex
.190d	8d 83 18	               sta  a2hexstr
.1910	68		               pla
.1911	20 d1 18	               jsr  nib2hex
.1914	8d 84 18	               sta  a2hexstr+1
.1917	98		               tya
.1918	48		               pha
.1919	20 dd 18	               jsr  lsra4bits
.191c	20 d1 18	               jsr  nib2hex
.191f	8d 85 18	               sta  a2hexstr+2
.1922	68		               pla
.1923	20 d1 18	               jsr  nib2hex
.1926	8d 86 18	               sta  a2hexstr+3
.1929	a9 00		               lda  #$00                ; 0 ended string
.192b	8d 87 18	               sta  a2hexstr+4
.192e	20 06 17	               jsr  pop
.1931			atobin
.1931	20 c7 16	               jsr  push
.1934	a2 08		               ldx  #8
.1936	a0 00		               ldy  #0
.1938	18		               clc
.1939	2a		nextbit        rol
.193a	48		               pha
.193b	69 00		               adc  #$00
.193d	29 01		               and  #$01
.193f	20 d1 18	               jsr  nib2hex
.1942	99 88 18	               sta  abin,y
.1945	68		               pla
.1946	c8		               iny
.1947	ca		               dex
.1948	d0 ef		               bne  nextbit
.194a	a9 00		               lda  #0
.194c	99 88 18	               sta  abin,y
.194f	20 06 17	               jsr  pull
.1952	60		               rts
.1953			putabin
.1953	20 31 19	               jsr     atobin
.1956	20 c7 16	               jsr     push
.1959	a2 88		               ldx     #<abin
.195b	a0 18		               ldy     #>abin
.195d	20 65 15	               jsr     puts
.1960	20 06 17	               jsr     pop
.1963	60		               rts
.1964			printabin
.1964	20 c7 16	               jsr     push
.1967	a2 88		               ldx     #<abin
.1969	a0 18		               ldy     #>abin
.196b	20 65 15	               jsr     puts
.196e	20 06 17	               jsr     pop
.1971	60		               rts
.1972			putabinfmt
.1972	08		               php
.1973	48		               pha
.1974	a9 25		               lda     #"%"
.1976	20 5f 15	               jsr     putch
.1979	68		               pla
.197a	20 53 19	               jsr     putabin
.197d	28		               plp
.197e	60		               rts
.197f			putabinxy
.197f	20 7c 15	               jsr     gotoxy
.1982	20 53 19	               jsr     putabin
.1985	60		               rts
.1986			putabinfmtxy
.1986	20 7c 15	               jsr     gotoxy
.1989	20 72 19	               jsr     putabinfmt
.198c	60		               rts
.198d			atodec
.198d	20 c7 16	               jsr  push
.1990	f8		               sed
.1991	aa		               tax
.1992	a0 00		               ldy  #$00
.1994	a9 00		               lda  #$00
.1996	18		nextbit        clc
.1997	69 01		               adc  #$01
.1999	90 01		               bcc  decx
.199b	c8		               iny
.199c	ca		decx           dex
.199d	d0 f7		               bne  nextbit
.199f	48		               pha
.19a0	98		               tya
.19a1	20 d1 18	               jsr  nib2hex
.19a4	8d 91 18	               sta  adec
.19a7	68		               pla
.19a8	48		               pha
.19a9	20 d1 18	               jsr  nib2hex
.19ac	8d 93 18	               sta  adec+2
.19af	68		               pla
.19b0	6a		               ror
.19b1	6a		               ror
.19b2	6a		               ror
.19b3	6a		               ror
.19b4	20 d1 18	               jsr  nib2hex
.19b7	8d 92 18	               sta  adec+1
.19ba	d8		               cld
.19bb	20 06 17	               jsr  pull
.19be	60		               rts
>19bf	00 00 00	buffer         .byte     0,0,0

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>19c2	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>19c6	00 00 00 00 00 00 00 00 00 0d 00 00
>19d2	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>19d6	00 00 00 00 00 00 00 00 00 00 00 00
>19e2	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>19e6	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>19f2	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>19f6	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1a02	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1a06	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>1a12	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1a16	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>1a22	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1a26	00 00 00 00 00 00 00 00 00 00 00 00
>1a32	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1a36	00 00 00 00 00 00 00 00 00 00 00 00
>1a42	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1a46	00 00 00 00 00 00 00 00 00 00 00 00
>1a52	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1a56	00 00 00 00 00 00 00 00 00 00 00 00
>1a62	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>1a66	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1a72	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1a76	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1a82	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1a86	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>1a92	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>1a96	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>1aa2	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>1aa6	00 00 00 00 00 00 00 00 00 00 00 00
>1ab2	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>1ab6	00 00 00 00 00 00 00 00 00 00 00 00
.1ac2			waitstop
.1ac2	20 c7 16	               jsr  push
.1ac5	20 ed f6	wait           jsr  k_stop
.1ac8	d0 fb		               bne  wait
.1aca	20 06 17	               jsr  pop
.1acd	60		               rts
.1ace			anykey
.1ace	08		               php
.1acf	48		               pha
.1ad0	a5 cb		nokey          lda 203
.1ad2	c9 40		               cmp #64
.1ad4	f0 fa		               beq nokey
.1ad6	20 dc 1a	               jsr releasekey
.1ad9	68		               pla
.1ada	28		               plp
.1adb	60		               rts
.1adc			releasekey
.1adc	08		               php
.1add	48		               pha
.1ade	a5 cb		keypressed     lda 203
.1ae0	c9 40		               cmp #64
.1ae2	d0 fa		               bne keypressed
.1ae4	68		               pla
.1ae5	28		               plp
.1ae6	60		               rts
.1ae7			getkey
.1ae7	20 e4 ff	again          jsr  getin
.1aea	c9 00		               cmp  #0
.1aec	f0 f9		               beq  again
.1aee	60		               rts
.1aef			waitkey
.1aef	20 c7 16	               jsr  push
.1af2	8d 40 1b	               sta  thekey
.1af5	20 e4 ff	nope           jsr  getin
.1af8	20 d2 ff	               jsr  chrout
.1afb	cd 40 1b	               cmp  thekey
.1afe	d0 f5		               bne  nope
.1b00	20 d2 ff	               jsr  chrout
.1b03	20 06 17	               jsr  pop
.1b06	60		               rts
.1b07			waitspace
.1b07	20 c7 16	               jsr  push
.1b0a	a9 7f		wait           lda  #$7f  ;%01111111
.1b0c	8d 00 dc	               sta  $dc00
.1b0f	ad 01 dc	               lda  $dc01
.1b12	29 10		               and  #$10  ;mask %00010000
.1b14	d0 f4		               bne  wait
.1b16	20 06 17	               jsr  pop
.1b19			waitsstop
.1b19	20 c7 16	               jsr  push
.1b1c	20 ed f6	wait           jsr  k_stop  ;%01111111
.1b1f	d0 fb		               bne  wait
.1b21	20 06 17	               jsr  pop
.1b24			waitreturn
.1b24	20 c7 16	               jsr  push
.1b27	ad 41 1b	               lda  thecount
.1b2a	8d 00 1e	               sta  scrnram
.1b2d	a9 02		               lda  #$02
.1b2f	8d 00 96	               sta  colorram
.1b32	20 e4 ff	nope           jsr  getin
.1b35	c9 0d		nohex          cmp  #$0d
.1b37	d0 f9		               bne  nope
.1b39	ee 41 1b	               inc  thecount
.1b3c	20 06 17	               jsr  pop
.1b3f	60		               rts
>1b40	00		thekey         .byte   0
>1b41	01		thecount       .byte   $01

;******  Return to file: template.asm


;******  End of listing

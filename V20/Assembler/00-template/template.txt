
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L template.txt -o template.prg template.asm
; Thu Jul 11 15:18:10 2024

;Offset	;Hex		;Source

;******  Processing input file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-v20ex.asm

>1201	0b 12 0a 00	.word (+), 10       ;$1201 : Debut + 10 =$120b, $0010
>1205	9e 34 36 32	.null $9e, "4621"   ;$1205 : "sys4621" = jsr #120d
>1209	31 00
>120b	00 00		+ .word 0           ;$120b : $0000

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: template.asm

=1			TITLELINE=1
=6			BINLINE=6
=6			BINCOLM=6
=$10			XVAL=$10
=$40			XCPX=$40
=$03			DIFF=$03
.120d	20 ab 14	main           jsr scrmaninit
.1210	08		               php
.1211	48		               pha
.1212	a9 0e		               lda  #14
.1214	20 d2 ff	               jsr  $ffd2
.1217	68		               pla
.1218	28		               plp
.1219	48		               pha
.121a	a9 0e		               lda #(vnoir*16+(vbleu|8))
.121c	8d 0f 90	               sta  vicscrbrd
.121f	68		               pla
.1220	48		               pha
.1221	a9 01		               lda  #vblanc
.1223	8d 86 02	               sta  bascol
.1226	68		               pla
.1227	a2 07		               ldx #<string0
.1229	a0 14		               ldy #>string0
.122b	20 47 15	               jsr putsxy
.122e	a9 10		               lda #XVAL   ; initialise ...
.1230	8d a1 14	               sta count   ; ...le compteur
.1233	ad a1 14	next           lda count
.1236	38		               sec
.1237	ed a2 14	               sbc tstval
.123a	8d a3 14	               sta result
.123d	ae a1 14	               ldx count
.1240	a9 00		               lda #$00
.1242	48		               pha
.1243	28		               plp
.1244	ec a2 14	               cpx tstval
.1247	08		               php
.1248	68		               pla
.1249	20 b2 18	               jsr atobin
.124c	48		               pha
.124d	48		               pha
.124e	a9 07		               lda  #vyellow
.1250	8d 86 02	               sta  bascol
.1253	68		               pla
.1254	20 48 16	               jsr  push
.1257	a2 06		               ldx  #BINCOLM
.1259	a0 07		               ldy  #BINLINE+1
.125b	20 fd 14	               jsr  gotoxy
.125e	20 87 16	               jsr  pop
.1261	a9 25		               lda  #"%"
.1263	20 e0 14	               jsr  putch
.1266	20 48 16	               jsr  push
.1269	a2 09		isx            ldx  #<abin
.126b	a0 18		isy            ldy  #>abin
.126d	20 e6 14	               jsr  puts
.1270	20 87 16	               jsr  pull
.1273	8a		               txa
.1274	48		               pha
.1275	20 65 18	               jsr a2hex
.1278	48		               pha
.1279	a9 03		               lda  #vcyan
.127b	8d 86 02	               sta  bascol
.127e	68		               pla
.127f	20 48 16	               jsr  push
.1282	a2 02		               ldx  #2
.1284	a0 0c		               ldy  #12
.1286	20 fd 14	               jsr  gotoxy
.1289	20 87 16	               jsr  pop
.128c	a9 24		               lda  #"$"
.128e	20 e0 14	               jsr  putch
.1291	20 48 16	               jsr  push
.1294	a2 04		isx            ldx  #<a2hexstr
.1296	a0 18		isy            ldy  #>a2hexstr
.1298	20 e6 14	               jsr  puts
.129b	20 87 16	               jsr  pull
.129e	68		               pla
.129f	20 b2 18	               jsr atobin
.12a2	48		               pha
.12a3	a9 03		               lda  #vcyan
.12a5	8d 86 02	               sta  bascol
.12a8	68		               pla
.12a9	20 48 16	               jsr  push
.12ac	a2 07		               ldx  #7
.12ae	a0 0c		               ldy  #12
.12b0	20 fd 14	               jsr  gotoxy
.12b3	20 87 16	               jsr  pop
.12b6	a9 25		               lda  #"%"
.12b8	20 e0 14	               jsr  putch
.12bb	20 48 16	               jsr  push
.12be	a2 09		isx            ldx  #<abin
.12c0	a0 18		isy            ldy  #>abin
.12c2	20 e6 14	               jsr  puts
.12c5	20 87 16	               jsr  pull
.12c8	ad a2 14	               lda tstval
.12cb	48		               pha
.12cc	20 65 18	               jsr a2hex
.12cf	48		               pha
.12d0	a9 03		               lda  #vcyan
.12d2	8d 86 02	               sta  bascol
.12d5	68		               pla
.12d6	20 48 16	               jsr  push
.12d9	a2 02		               ldx  #2
.12db	a0 0d		               ldy  #13
.12dd	20 fd 14	               jsr  gotoxy
.12e0	20 87 16	               jsr  pop
.12e3	a9 24		               lda  #"$"
.12e5	20 e0 14	               jsr  putch
.12e8	20 48 16	               jsr  push
.12eb	a2 04		isx            ldx  #<a2hexstr
.12ed	a0 18		isy            ldy  #>a2hexstr
.12ef	20 e6 14	               jsr  puts
.12f2	20 87 16	               jsr  pull
.12f5	68		               pla
.12f6	20 b2 18	               jsr atobin
.12f9	48		               pha
.12fa	a9 03		               lda  #vcyan
.12fc	8d 86 02	               sta  bascol
.12ff	68		               pla
.1300	20 48 16	               jsr  push
.1303	a2 07		               ldx  #7
.1305	a0 0d		               ldy  #13
.1307	20 fd 14	               jsr  gotoxy
.130a	20 87 16	               jsr  pop
.130d	a9 25		               lda  #"%"
.130f	20 e0 14	               jsr  putch
.1312	20 48 16	               jsr  push
.1315	a2 09		isx            ldx  #<abin
.1317	a0 18		isy            ldy  #>abin
.1319	20 e6 14	               jsr  puts
.131c	20 87 16	               jsr  pull
.131f	ad a3 14	               lda result
.1322	48		               pha
.1323	20 65 18	               jsr a2hex
.1326	48		               pha
.1327	a9 03		               lda  #vcyan
.1329	8d 86 02	               sta  bascol
.132c	68		               pla
.132d	20 48 16	               jsr  push
.1330	a2 02		               ldx  #2
.1332	a0 0f		               ldy  #15
.1334	20 fd 14	               jsr  gotoxy
.1337	20 87 16	               jsr  pop
.133a	a9 24		               lda  #"$"
.133c	20 e0 14	               jsr  putch
.133f	20 48 16	               jsr  push
.1342	a2 04		isx            ldx  #<a2hexstr
.1344	a0 18		isy            ldy  #>a2hexstr
.1346	20 e6 14	               jsr  puts
.1349	20 87 16	               jsr  pull
.134c	68		               pla
.134d	20 b2 18	               jsr atobin
.1350	48		               pha
.1351	a9 03		               lda  #vcyan
.1353	8d 86 02	               sta  bascol
.1356	68		               pla
.1357	20 48 16	               jsr  push
.135a	a2 07		               ldx  #7
.135c	a0 0f		               ldy  #15
.135e	20 fd 14	               jsr  gotoxy
.1361	20 87 16	               jsr  pop
.1364	a9 25		               lda  #"%"
.1366	20 e0 14	               jsr  putch
.1369	20 48 16	               jsr  push
.136c	a2 09		isx            ldx  #<abin
.136e	a0 18		isy            ldy  #>abin
.1370	20 e6 14	               jsr  puts
.1373	20 87 16	               jsr  pull
.1376	68		               pla
.1377	20 65 18	               jsr a2hex
.137a	48		               pha
.137b	a9 03		               lda  #vcyan
.137d	8d 86 02	               sta  bascol
.1380	68		               pla
.1381	20 48 16	               jsr  push
.1384	a2 10		               ldx  #BINCOLM+10
.1386	a0 07		               ldy  #BINLINE+1
.1388	20 fd 14	               jsr  gotoxy
.138b	20 87 16	               jsr  pop
.138e	a9 24		               lda  #"$"
.1390	20 e0 14	               jsr  putch
.1393	20 48 16	               jsr  push
.1396	a2 04		isx            ldx  #<a2hexstr
.1398	a0 18		isy            ldy  #>a2hexstr
.139a	20 e6 14	               jsr  puts
.139d	20 87 16	               jsr  pull
.13a0	ee a1 14	               inc count
.13a3	ad a2 14	               lda tstval
.13a6	18		               clc
.13a7	69 03		               adc #DIFF
.13a9	8d a2 14	               sta tstval
.13ac	20 48 16	               jsr  push
.13af	a2 01		               ldx  #1
.13b1	a0 19		               ldy  #25
.13b3	20 fd 14	               jsr  gotoxy
.13b6	20 87 16	               jsr  pop
.13b9	48		               pha
.13ba	20 68 1a	               jsr getkey
.13bd	c9 51		               cmp  #'q'
.13bf	f0 34		               beq out
.13c1	48		               pha
.13c2	20 48 16	               jsr  push
.13c5	a2 06		               ldx  #6
.13c7	a0 12		               ldy  #18
.13c9	20 fd 14	               jsr  gotoxy
.13cc	20 87 16	               jsr  pop
.13cf	68		               pla
.13d0	20 65 18	               jsr a2hex
.13d3	20 48 16	               jsr  push
.13d6	a2 0f		               ldx  #15
.13d8	a0 12		               ldy  #18
.13da	20 fd 14	               jsr  gotoxy
.13dd	20 87 16	               jsr  pop
.13e0	a9 24		               lda  #"$"
.13e2	20 e0 14	               jsr  putch
.13e5	20 48 16	               jsr  push
.13e8	a2 04		isx            ldx  #<a2hexstr
.13ea	a0 18		isy            ldy  #>a2hexstr
.13ec	20 e6 14	               jsr  puts
.13ef	20 87 16	               jsr  pull
.13f2	4c 33 12	               jmp next
.13f5	60		out            rts
.13f6			delay65536
.13f6	20 48 16	               jsr push
.13f9	a2 00		               ldx #$00
.13fb	a0 00		               ldy #$00
.13fd	88		waity          dey
.13fe	d0 fd		               bne waity
.1400	ca		waitx          dex
.1401	d0 fa		               bne waity
.1403	20 87 16	               jsr pop
.1406	60		               rts
>1407	01 01 d0 41	string0        .text    1,1,"Par: Daniel Lafrance",0
>140b	52 3a 20 c4 41 4e 49 45 4c 20 cc 41 46 52 41 4e
>141b	43 45 00
>141e	d4 45 53 54	string1        .null    "Test de Drapeaux CPU"
>1422	20 44 45 20 c4 52 41 50 45 41 55 58 20 c3 d0 d5
>1432	00
>1433	c6 cc c1 c7	string2        .null    "FLAGS:NV-BDIZC"
>1437	d3 3a ce d6 2d c2 c4 c9 da c3 00
>1442	d0 41 52 3a	string3        .null    "Par: Daniel Lafrance"
>1446	20 c4 41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45
>1456	00
>1457	28 20 20 20	string4        .null    "(   )"
>145b	29 00
>145d	5e 5e 20 5e	string5        .byte    94,94,32,94,94,94,94,94,0
>1461	5e 5e 5e 5e 00
>1466	7d 7d 3f 7d	string6        .byte    125,125,'?',125,125,125,125,125,0
>146a	7d 7d 7d 7d 00
>146f	c7 45 54 4b	string7        .null    "Getkey() = $"
>1473	45 59 28 29 20 3d 20 24 00
>147c	20 20 24 0d	string8        .byte    32,32,'$',13,32,'-','$',32,32,32,'-'
>1480	20 2d 24 20 20 20 2d
>1487	0d 20 20 2d	               .byte    13,32,32,45,45,45,32,32,45,45,45,45,45,45,45,45,45,13
>148b	2d 2d 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 0d
>1499	20		               .byte    32
>149a	3d 24 20 20	               .null    "=$   ="
>149e	20 3d 00
>14a1	10		count          .byte    XVAL
>14a2	40		tstval         .byte    XCPX
>14a3	00		result         .byte    0
>14a4	00		row            .byte    0
>14a5	00		lin            .byte    0
>14a6	0d 12		adresse        .word    main

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-vic20-kernal.asm

=$90			kiostatus   =   $90     ; Kernal I/O status word (st) (byte)
=$b7			curfnlen    =   $b7     ; Current filename length (byte)
=$b9			cursecadd   =   $b9     ; Current secondary address (byte)
=$ba			curdevno    =   $ba     ; Current device number (byte)
=$bb			curfptr     =   $bb     ; Current file pointer (word)
=$fb			zpage1      =   $fb     ; zero page 1 address (word)
=$fd			zpage2      =   $fd     ; zero page 2 address (word)
=$0286			bascol      =   $0286   ; basic next chr colscreenram (byte)
=$1000			scrnramex   =   $1000   ; video character ram (with ram expansion)
=$1200			basicstaex  =   $1200   ; basic start address (with ram expansion)
=$9400			colorramex  =   $9400   ; video color ram (with ram expansion)
=$1e00			scrnram     =   $1e00   ; video character ram (no ram expansion)
=$1000			basicsta    =   $1000   ; basic start address (no ram expansion)
=$9600			colorram    =   $9600   ; video color ram (no ram expansion)
=$1e00			scrram0     =   scrnram
=7936			scrram1     =   scrram0+$0100
=$9600			colram0     =   colorram
=38656			colram1     =   colram0+$0100
=$8000			chargen     =   $8000
=$9000			ioblock     =   $9000   ;
=$9000			vicchip     =   $9000
=$a000			ramblk4     =   $a000
=$c000			basicrom    =   $c000
=$e000			kernalrom   =   $e000
=$03			bstop       =   $03      ;stop
=$05			bwhite      =   $05      ;set color white
=$08			block       =   $08      ;lock the charset
=$09			bunlock     =   $09      ;unlock the charset
=$0d			bcarret     =   $0d
=$0e			btext       =   $0e
=$11			bcrsdn      =   $11      ;cursor down 1 line
=$12			brevcol     =   $12
=$13			bhome       =   $13
=$14			bdelete     =   $14
=$1c			bred        =   $1c
=$1d			bcuright    =   $1d
=$1e			bgreen      =   $1e
=$1f			bblue       =   $1f
=$81			borange     =   $81
=$83			blrun       =   $83
=$85			bfkey1      =   $85
=$86			bfkey2      =   $86
=$87			bfkey3      =   $87
=$88			bfkey4      =   $88
=$89			bfkey5      =   $89
=$8a			bfkey6      =   $8a
=$8b			bfkey7      =   $8b
=$8c			bfkey8      =   $8c
=$8d			bcarret1    =   $8d
=$8e			bgraph      =   $8e
=$90			bblack      =   $90
=$91			bcuup       =   $91
=$92			brevoff     =   $92
=$93			bclear      =   $93
=$94			binsert     =   $94
=$95			bbrown      =   $95
=$96			bltred      =   $96
=$97			bdkgrey     =   $97
=$98			bmdgrey     =   $98
=$99			bltgreen    =   $99
=$9a			bltblue     =   $9a
=$9b			bltgrey     =   $9b
=$9c			bmagenta    =   $9c
=$9d			bculeft     =   $9d
=$9e			byellow     =   $9e
=$9f			bcyan       =   $9f
=$0286			carcol      =   $0286
=$030a			ieval       =   $030a
=$73			chrget      =   $73
=$79			chrgot      =   $79
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$ffb4			stalk   = $ffb4 ; Send Talk command to serial bus.
=$ffb1			slisten = $ffb1 ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$ffa5			acptr   = $ffa5 ; jmp $ef19 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ffa8			ciout   = $ffa8 ; jmp $eee4 Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ffb1			listen  = $ffb1 ; jmp ($ee17) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f542 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe82 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe73 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ffde			rdtim   = $ffde ; jmp $f760 Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe57 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd52 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f675 Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $eb1e Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $eec0 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe50 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe66 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fe49 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f767 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe6f Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ee14 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $eec1 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f734 Update the system clock
=$ffae			unlsn   = $ffae ; jmp $ef04 Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $eef6 Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $f675 Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$f1ca			kd_chrout    =   $f1ca
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.14a8	4c 0d 12	pgmstart        jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-vic20-vic.asm

=$9000			vic = $9000			; VicII C64 memorymap base address
=36864			vichorcnt = vic+$00	; $9000, 36864 Bit 0-6 Horizontal centering.
=36865			vicvercnt = vic+$01	; $9001, 36865 Vertical centering.
=36866			viccolnum = vic+$02	; $9002, 36866 Bit 0-6 set # of column.
=36867			vicrownum = vic+$03	; $9003, 36867 Bit 1-6 set # of rows.
=36868			vicsrastr = vic+$04	; $9004, 36868 TV raster beam line.
=36869			viccstart = vic+$05	; $9005, 36869 Bit 0-3 start of character memory (dflt=0).
=36870			vicpenhor = vic+$06	; $9006, 36870 Horizontal position of light pen.
=36871			vicpenver = vic+$07	; $9007, 36871 Vertical position of light pen
=36872			vicpadhor = vic+$08	; $9008, 36872 Digitized value of paddle X
=36873			vicpadver = vic+$09	; $9009, 36873 Digitized value of paddle Y
=36874			vicosclhz = vic+$0a	; $900a, 36874 Oscillator 1 freq. (low) (on: 128-255)
=36875			vicoscmhz = vic+$0b	; $900b, 36875 Oscillator 2 freq. (medium) (on: 128-255)
=36876			vicoschhz = vic+$0c	; $900c, 36876 Oscillator 3 freq. (high) (on: 128-255)
=36877			vicnoizhz = vic+$0d	; $900d, 36877 Noise source freq.
=36878			vicvolume = vic+$0e	; $900e, 36878 Bit 0-3 set volume of all sound.
=36879			vicscrbrd = vic+$0f	; $900f, 36879 Screen and border color register.
=36879			vicbordcol=vicscrbrd
=36879			vicbackcol=vicscrbrd

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-vic20-basic2.asm

=$c3bb			b_opentxtspc  = $c3bb ;  1) Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$c408			b_chkavailmem = $c408 ;  2) Check available Memory. *1  ;a-y;---; Array top $yyaa
=$c435			b_outofmem    = $c435 ;  3) ?Out of memory.             ;---;---;
=$c437			b_errormesg   = $c437 ;  4) Send BASIC error message.   ;a--;---; a = errno
=$e467			b_warmstart   = $e467 ;  5) Basic warm start.           ;---;---;
=$c48a			b_chrget      = $c48a ;  6) Main CHRGET entry.          ;---;---;
=$c49c			b_newline     = $c49c ;  7) Crunch tokens, insert line. ;-x-;---; x = buff len
=$c52a			b_clrready    = $c52a ;  8) Fix chaining CLR and READY. ;---;---;
=$c533			b_fixchaining = $c533 ;  9) Fix chaining.               ;---;---;
=$c560			b_kbgetline   = $c560 ; 10) Recieve line from keyboard.
=$c579			b_crunchtkns  = $c579 ; 11) Crunch token. *7            ;-x-;---: x = buff len
=$c613			b_findline    = $c613 ; 12) Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$c642			b_new         = $c642 ; 13) Do NEW                      ;---;---;
=$c659			b_resetclr    = $c659 ; 14) Reset BASIC and do CLR      ;---;---;
=$c65e			b_clr         = $c65e ; 15) Do CLR                      ;---;---;
=$c68e			b_rstchrget   = $c68e ; 17) Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$c857			b_continue    = $c857 ; 18) Do CONTINUE.                ;a-y;---; curline $yyaa
=$c96b			b_getint      = $c96b ; 19) Get int from BASIX text.    ;---;---;
=$cad3			b_sndcr       = $cad3 ; 20) Send RETURN, LF in scr mode.;---;a--; a = LF
=$cad7			b_sndcrlf     = $cad7 ; 21) Send RETURN, LINEFEED.      ;---;a--; a = LF
=$cb1e			b_outstr_ay   = $cb1e ; 22) Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$cb1e			b_puts        = b_outstr_ay
=$cb24			b_outstrprep  = $cb24 ; 23) Print precomputated string. ;a--;---; a = strlen
=$cb45			b_printqm     = $cb45 ; 24) Print '?'.                  ;---;---;
=$cb47			b_sendchar    = $cb47 ; 25) Send char in a to device.   ;a--;a--; a = char
=$cd8a			b_frmnum      = $cd8a ; Evaluate numeric expression and/or check for data type mismatch
=$cd9e			b_evalexpr    = $cd9e ; 26) Evaluate expression.
=$cefd			b_chk4comma   = $cefd ; 27) Check for coma.             ;---;a--; a = char
=$cefa			b_chk4lpar    = $cefa ; 28) check for '('.              ;---;a--; a = char
=$cef7			b_chk4rpar    = $cef7 ; 29) check for ')'.              ;---;a--; a = char
=$cf08			b_syntaxerr   = $cf08 ; 30) send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; 31) find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; 32) Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; 33) Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; 34) Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; 35) Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; 36) Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; 37) Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; 38) Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; 39) Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; 40) Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; 41) Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; 42) Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; 43) Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; 44) Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; 45) Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; 46) Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; 47) Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; 48) Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; 49) Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; 50) Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-vic20-basic2.asm

.14ab			scrmaninit
.14ab	20 48 16	               jsr  push
.14ae	a9 00		               lda  #vnoir
.14b0	2a		               rol
.14b1	2a		               rol
.14b2	2a		               rol
.14b3	2a		               rol
.14b4	09 05		               ora  #vvert         ; Du vert pour ...
.14b6	09 08		               ora  #%00001000     ; ???
.14b8	8d 0f 90	               sta  vicbackcol     ; ... le fond d'écran.
.14bb	a9 01		               lda  #vblanc        ; Du blanc pour ...
.14bd	8d 86 02	               sta  bascol         ; les caractères.
.14c0	a9 02		               lda  #%00000010     ; ???
.14c2	8d 00 90	               sta  vichorcnt      ; ???
.14c5	20 cc 14	               jsr  cls            ; On efface l'écran
.14c8	20 87 16	               jsr  pop
.14cb	60		               rts
.14cc			cls
.14cc	08		               php
.14cd	48		               pha
.14ce	a9 93		               lda  #$93
.14d0	20 e0 14	               jsr  putch
.14d3	a9 04		               lda  #$04
.14d5	8d 00 90	               sta  vichorcnt
.14d8	a9 1a		               lda  #$1a
.14da	8d 01 90	               sta  vicvercnt
.14dd	68		               pla
.14de	28		               plp
.14df	60		               rts
.14e0			putch
.14e0	08		               php
.14e1	20 d2 ff	               jsr  $ffd2
.14e4	28		               plp
.14e5	60		               rts
.14e6			puts
.14e6	20 48 16	               jsr  push
.14e9	86 fb		               stx  zpage1
.14eb	84 fc		               sty  zpage1+1
.14ed	a0 00		               ldy  #$00
.14ef	b1 fb		next           lda  (zpage1),y
.14f1	f0 06		               beq  out
.14f3	20 e0 14	               jsr  putch
.14f6	c8		               iny
.14f7	d0 f6		               bne  next
.14f9	20 87 16	out            jsr  pop
.14fc	60		               rts
.14fd			gotoxy
.14fd	20 48 16	               jsr  push
.1500	98		               tya
.1501	48		               pha
.1502	8a		               txa
.1503	a8		               tay
.1504	68		               pla
.1505	aa		               tax
.1506	18		               clc
.1507	20 f0 ff	               jsr  kplot
.150a	20 87 16	               jsr  pop
.150d	60		               rts
.150e			cursor
=$0286			bascol    =    $0286
.150e	08		               php
.150f	48		               pha
.1510	90 12		               bcc  restore
.1512	20 f0 ff	               jsr  kplot
.1515	8c 36 15	               sty  cx
.1518	8e 37 15	               stx  cy
.151b	ad 86 02	               lda  bascol
.151e	8d 38 15	               sta  bcol
.1521	4c 33 15	               jmp  out
.1524	ae 37 15	restore        ldx  cy
.1527	ac 36 15	               ldy  cx
.152a	20 f0 ff	               jsr  kplot
.152d	ad 38 15	               lda  bcol
.1530	8d 86 02	               sta  bascol
.1533	68		out            pla
.1534	28		               plp
.1535	60		               rts
>1536	00		cx   .byte     $00
>1537	00		cy   .byte     $00
>1538	00		bcol .byte     $00
.1539			cursave
.1539	08		               php
.153a	38		               sec
.153b	20 0e 15	               jsr  cursor
.153e	28		               plp
.153f	60		               rts
.1540			curput
.1540	08		               php
.1541	18		               clc
.1542	20 0e 15	               jsr  cursor
.1545	28		               plp
.1546	60		               rts
.1547			putsxy
.1547	08		               php
.1548	8e ac 15	               stx  straddr        ; Save start addr
.154b	8c ad 15	               sty  straddr+1
.154e	48		               pha                 ; Sauvegarde rA
.154f	98		               tya                 ; Prepare la ...
.1550	48		               pha                 ; ... sauvegarde de rY.
.1551	8a		               txa                 ; Prepare la ...
.1552	48		               pha                 ; ... sauvegarde de rX.
.1553	a5 fb		               lda  zpage1         ; Save zpage1
.1555	8d b0 15	               sta  zp1
.1558	a5 fc		               lda  zpage1+1
.155a	8d b1 15	               sta  zp1+1
.155d	ad ad 15	               lda  straddr+1      ; Set zpage1
.1560	85 fc		               sta  zpage1+1
.1562	ad ac 15	               lda  straddr
.1565	85 fb		               sta  zpage1
.1567	a0 00		               ldy  #$00           ; Set z to zptr offset 0 ...
.1569	b1 fb		               lda  (zpage1),y     ; Load x param
.156b	8d ae 15	               sta  px             ; and save it
.156e	c8		               iny                 ; next param
.156f	b1 fb		               lda  (zpage1),y     ; load y param
.1571	8d af 15	               sta  py             ; and save it
.1574	aa		               tax                 ; tfr a in x reg
.1575	ac ae 15	               ldy  px             ; load x param in y
.1578	20 fd 14	               jsr  gotoxy         ; position cursor
.157b	18		               clc                 ; adjusting start addr
.157c	ee ac 15	               inc  straddr
.157f	ad ac 15	               lda  straddr
.1582	8d ac 15	               sta  straddr
.1585	90 03		               bcc  norep1
.1587	ee ad 15	               inc  straddr+1
.158a	ee ac 15	norep1         inc  straddr
.158d	90 03		               bcc  norep2
.158f	ee ad 15	               inc  straddr+1
.1592	ad ac 15	norep2         lda  straddr
.1595	ac ad 15	               ldy  straddr+1
.1598	20 e6 14	               jsr  puts
.159b	ad b1 15	               lda  zp1+1
.159e	85 fc		               sta  zpage1+1
.15a0	ad b0 15	               lda  zp1
.15a3	85 fb		               sta  zpage1
.15a5	68		               pla
.15a6	aa		               tax
.15a7	68		               pla
.15a8	a8		               tay
.15a9	68		               pla
.15aa	28		               plp
.15ab	60		               rts
>15ac	00 00		straddr   .word     $00
>15ae	00		px        .byte     $00
>15af	00		py        .byte     $00
>15b0	00 00		zp1       .word     $00
.15b2			putscxy
.15b2	08		               php
.15b3	8e 08 16	               stx  straddr        ;save start addr
.15b6	8c 09 16	               sty  straddr+1
.15b9	48		               pha                 ;save a,y,x
.15ba	98		               tya
.15bb	48		               pha
.15bc	8a		               txa
.15bd	48		               pha
.15be	a5 fb		               lda  zpage1         ;save zpage1
.15c0	8d 0b 16	               sta  zp1
.15c3	a5 fc		               lda  zpage1+1
.15c5	8d 0c 16	               sta  zp1+1
.15c8	ad 09 16	               lda  straddr+1      ;set zpage1
.15cb	85 fc		               sta  zpage1+1
.15cd	ad 08 16	               lda  straddr
.15d0	85 fb		               sta  zpage1
.15d2	ad 86 02	               lda  bascol         ; save  current basiccolor
.15d5	8d 0a 16	               sta  bc
.15d8	a0 00		               ldy  #$00           ; set y to zptr offset 0
.15da	b1 fb		               lda  (zpage1),y     ; load color param
.15dc	8d 86 02	               sta  bascol         ; and set it
.15df	18		               clc                 ; adjusting start addr
.15e0	ee 08 16	               inc  straddr
.15e3	90 03		               bcc  norep1
.15e5	ee 09 16	               inc  straddr+1
.15e8	ad 08 16	norep1         lda  straddr        ; get address of remainder
.15eb	ac 09 16	               ldy  straddr+1
.15ee	20 47 15	               jsr  putsxy         ; print string at x,y pos.
.15f1	ad 0a 16	               lda  bc             ; restoring basic color
.15f4	8d 86 02	               sta  bascol
.15f7	ad 0c 16	               lda  zp1+1          ; replacing zpage1 for basic
.15fa	85 fc		               sta  zpage1+1
.15fc	ad 0b 16	               lda  zp1
.15ff	85 fb		               sta  zpage1
.1601	68		               pla
.1602	aa		               tax
.1603	68		               pla
.1604	a8		               tay
.1605	68		               pla
.1606	28		               plp
.1607	60		               rts
>1608	00 00		straddr        .word      $00
>160a	00		bc             .byte      $00
>160b	00 00		zp1            .word      $00
.160d			putrahex
.160d	08		               php
.160e	48		               pha
.160f	20 65 18	               jsr  a2hex
.1612	a9 04		               lda  #<a2hexstr
.1614	a0 18		               ldy  #>a2hexstr
.1616	20 e6 14	               jsr  puts
.1619	68		               pla
.161a	28		               plp
.161b	60		               rts
.161c			kputrahexxy
.161c			bputrahexxy
.161c			putrahexxy
.161c	08		               php
.161d	20 65 18	               jsr  a2hex
.1620	a9 01		               lda  #<a2hexpos
.1622	a0 18		               ldy  #>a2hexpos
.1624	20 47 15	               jsr  putsxy
.1627	68		               pla
.1628	28		               plp
.1629	60		               rts
.162a			putrahexcxy
.162a	08		               php
.162b	20 65 18	               jsr  a2hex
.162e	a9 01		               lda  #<a2hexpos
.1630	a0 18		               ldy  #>a2hexpos
.1632	20 b2 15	               jsr  putscxy
.1635	68		               pla
.1636	28		               plp
.1637	60		               rts
.1638			setinverse
.1638	48		               pha
.1639	a9 12		               lda  #$12
.163b	20 d2 ff	               jsr  $ffd2
.163e	68		               pla
.163f	60		               rts
.1640			clrinverse
.1640	48		               pha
.1641	a9 92		               lda  #$92
.1643	20 d2 ff	               jsr  $ffd2
.1646	68		               pla
.1647	60		               rts

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.1648			push
.1648	08		          php            ; stack : flg, pcl, pch
.1649	78		          sei
.164a	8d 84 16	          sta  ra        ; save a
.164d	68		          pla            ; stack : pcl, pch
.164e	8d 83 16	          sta  rp        ; save rp
.1651	68		          pla            ; stack : pch
.1652	8d 85 16	          sta  pc        ; save pcl
.1655	68		          pla            ; stack : -
.1656	8d 86 16	          sta  pc+1      ; save pch
.1659	a5 fb		          lda  zpage1    ; get zpage1 low byte
.165b	48		          pha            ; stack : zp1l
.165c	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.165e	48		          pha            ; stack : zp1h, zp1l
.165f	a5 fd		          lda  zpage2    ; get zpage2 low byte
.1661	48		          pha            ; stack : zp2l, zp1h, zp1l
.1662	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.1664	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1665	ad 83 16	          lda  rp        ; get rp
.1668	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1669	ad 84 16	          lda  ra        ; get a
.166c	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.166d	8a		          txa            ; get x
.166e	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.166f	98		          tya            ; get y
.1670	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1671	ad 86 16	          lda  pc+1      ; get pch
.1674	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1675	ad 85 16	          lda  pc        ; get pcl
.1678	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1679	ad 83 16	          lda  rp        ; get rp
.167c	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.167d	ad 84 16	          lda  ra        ; get a
.1680	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1681	58		          cli
.1682	60		          rts
>1683	00		rp        .byte     0
>1684	00		ra        .byte     0
>1685	00 00		pc        .word     0
.1687			pull
.1687			pop
.1687	78		          sei
.1688	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1689	8d bc 16	          sta  pc        ; save pcl
.168c	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.168d	8d bd 16	          sta  pc+1      ; save pch
.1690	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1691	a8		          tay            ; set y
.1692	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1693	aa		          tax            ; set x
.1694	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1695	8d bb 16	          sta  ra        ; save a
.1698	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1699	8d ba 16	          sta  rp        ; save rp
.169c	68		          pla            ; stack : zp2l, zp1h, zp1l
.169d	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.169f	68		          pla            ; stack : zp1h, zp1l
.16a0	85 fd		          sta  zpage2    ; get zpage2 High byte
.16a2	68		          pla            ; stack : zp1l
.16a3	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.16a5	68		          pla            ; stack :
.16a6	85 fb		          sta  zpage1    ; get zpage1 High byte
.16a8	ad bd 16	          lda  pc+1      ; get pch
.16ab	48		          pha            ; stack : pch
.16ac	ad bc 16	          lda  pc
.16af	48		          pha            ; stack : pcl, pch
.16b0	ad ba 16	          lda  rp        ; get rp
.16b3	48		          pha            ; stack : rp, pcl, pch
.16b4	ad bb 16	          lda  ra        ; set ra
.16b7	58		          cli
.16b8	28		          plp            ; stack : pcl, pch
.16b9	60		          rts
>16ba	00		rp        .byte     0
>16bb	00		ra        .byte     0
>16bc	00 00		pc        .word     0

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.16be			blkfill
.16be	20 48 16	bf0            jsr  push
.16c1	20 7f 17	               jsr  savezp1
.16c4	84 fc		               sty  zpage1+1
.16c6	a0 00		               ldy  #$00
.16c8	84 fb		               sty  zpage1
.16ca	91 fb		bf1            sta  (zpage1),y
.16cc	c8		               iny
.16cd	d0 fb		               bne  bf1
.16cf	20 8e 17	               jsr  restzp1
.16d2	20 87 16	               jsr  pop
.16d5	60		               rts
.16d6			memfill
.16d6	20 48 16	               jsr  push
.16d9	20 be 16	mf1            jsr  blkfill
.16dc	c8		               iny
.16dd	ca		               dex
.16de	d0 f9		               bne  mf1
.16e0	20 87 16	               jsr  pop
.16e3	60		               rts
.16e4			memmove
.16e4	20 48 16	               jsr  push
.16e7	ba		               tsx            ; On se crée un pointeur ...
.16e8	8a		               txa
.16e9	18		               clc
.16ea	69 0b		               adc  #11
.16ec	a8		               tay
.16ed	a2 06		               ldx  #$06
.16ef	b9 00 01	nextbyte       lda  $0100,y
.16f2	99 3e 17	               sta  words,y
.16f5	c8		               iny
.16f6	ca		               dex
.16f7	d0 f6		               bne  nextbyte
.16f9	ad 3e 17	               lda  s
.16fc	8d 15 17	               sta  source+1
.16ff	ad 3f 17	               lda  s+1
.1702	8d 16 17	               sta  source+2
.1705	ad 40 17	               lda  d
.1708	8d 12 17	               sta  destin+1
.170b	ad 41 17	               lda  d+1
.170e	8d 13 17	               sta  destin+2
.1711	ad ff ff	destin         lda  $ffff
.1714	8d ff ff	source         sta  $ffff
.1717	ee 12 17	               inc  destin+1
.171a	d0 03		               bne  src
.171c	ee 13 17	               inc  destin+2
.171f	ee 15 17	src            inc  source+1
.1722	d0 03		               bne  cnt
.1724	ee 16 17	               inc  source+2
.1727	ad 42 17	cnt            lda  compte
.172a	d0 08		               bne  decit
.172c	ad 43 17	               lda  compte+1
.172f	f0 09		               beq  fini
.1731	ce 43 17	               dec  compte+1
.1734	ce 42 17	decit          dec  compte
.1737	4c 11 17	               jmp  destin
.173a	20 87 16	fini           jsr  pop
.173d	60		               rts
.173e			words
>173e	00 00		s         .word     $0000
>1740	00 00		d         .word     $0000
>1742	00 00		compte    .word     $0000
.1744			decword
.1744	20 48 16	               jsr  push
.1747	86 fd		               stx  zpage2
.1749	84 fe		               sty  zpage2+1
.174b	20 87 16	               jsr  pop
.174e	60		               rts
.174f			inczp1
.174f	08		               php
.1750	48		               pha
.1751	e6 fb		               inc  zpage1
.1753	a5 fb		               lda  zpage1
.1755	d0 02		               bne  nopage
.1757	e6 fc		               inc  zpage1+1
.1759	68		nopage         pla
.175a	28		               plp
.175b	60		               rts
.175c			deczp1
.175c	08		                php
.175d	48		                pha
.175e	c6 fb		                dec  zpage1
.1760	d0 02		                bne  nopage
.1762	c6 fc		                dec  zpage1+1
.1764	68		nopage          pla
.1765	28		                plp
.1766	60		                rts
.1767			inczp2
.1767	08		               php
.1768	48		               pha
.1769	e6 fd		               inc  zpage2
.176b	a5 fd		               lda  zpage2
.176d	d0 02		               bne  nopage
.176f	e6 fe		               inc  zpage2+1
.1771	68		nopage         pla
.1772	28		               plp
.1773	60		               rts
.1774			deczp2
.1774	08		               php
.1775	48		               pha
.1776	a5 fd		               lda  zpage2
.1778	d0 02		               bne  nopage
.177a	c6 fe		               dec  zpage2+1
.177c	68		nopage         pla
.177d	28		               plp
.177e	60		               rts
.177f			savezp1
.177f	08		               php
.1780	48		               pha
.1781	a5 fb		               lda  zpage1
.1783	8d fb 17	               sta  zp1
.1786	a5 fc		               lda  zpage1+1
.1788	8d fc 17	               sta  zp1+1
.178b	68		               pla
.178c	28		               plp
.178d	60		               rts
.178e			restzp1
.178e	08		               php
.178f	48		               pha
.1790	ad fb 17	               lda zp1
.1793	85 fb		               sta zpage1
.1795	ad fc 17	               lda zp1+1
.1798	85 fc		               sta zpage1+1
.179a	68		               pla
.179b	28		               plp
.179c	60		               rts
.179d			savezp2
.179d	08		         php
.179e	48		         pha
.179f	a5 fd		         lda zpage2
.17a1	8d fd 17	         sta zp2
.17a4	a5 fe		         lda zpage2+1
.17a6	8d fe 17	         sta zp2+1
.17a9	68		         pla
.17aa	28		         plp
.17ab	60		         rts
.17ac			restzp2
.17ac	08		                php
.17ad	48		                pha
.17ae	ad fd 17	                lda  zp2
.17b1	85 fd		                sta  zpage2
.17b3	ad fe 17	                lda  zp2+1
.17b6	85 fe		                sta  zpage2+1
.17b8	68		                pla
.17b9	28		                plp
.17ba	60		                rts
.17bb			xy2addr
.17bb	08		                php
.17bc	48		                pha
.17bd	8a		                txa
.17be	48		                pha
.17bf	98		                tya
.17c0	48		                pha
.17c1	ad f6 17	                lda     addr1+1
.17c4	8d f8 17	                sta     addr2+1
.17c7	ad f5 17	                lda     addr1
.17ca	8d f7 17	                sta     addr2
.17cd	c0 00		                cpy     #$00
.17cf	f0 0f		                beq     addx
.17d1	18		moreline        clc
.17d2	6d f4 17	                adc     ymult
.17d5	90 03		                bcc     norepy
.17d7	ee f8 17	                inc     addr2+1
.17da	8d f7 17	norepy          sta     addr2
.17dd	88		                dey
.17de	d0 f1		                bne     moreline
.17e0	8a		addx            txa
.17e1	18		                clc
.17e2	6d f7 17	                adc     addr2
.17e5	90 03		                bcc     thatsit
.17e7	ee f8 17	                inc     addr2+1
.17ea	8d f7 17	thatsit         sta     addr2
.17ed	68		                pla
.17ee	a8		                tay
.17ef	68		                pla
.17f0	aa		                tax
.17f1	68		                pla
.17f2	28		                plp
.17f3	60		                rts
>17f4	28		ymult          .byte     40
>17f5	00 00		addr1          .word     $0000
>17f7	00 00		addr2          .word     $0000
>17f9	00 00		bytecnt        .word     $0000
>17fb	00 00		zp1        .word   $0000
>17fd	00 00		zp2        .word   $0000

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>17ff	01		a2hexcol       .byte     1              ; pour aputscxy
>1800	00		a2hexbkcol     .byte     %00000000
.1801			a2hexpos
>1801	00		a2hexpx        .byte     0              ; pour aputsxy
>1802	00		a2hexpy        .byte     0
>1803	24		a2hexprefix    .byte     "$"            ; pour aputs
>1804	00 00		a2hexstr       .word     $00
>1806	00 00		               .word     $00
>1808	00		               .byte     0              ; 0 end string
>1809	30 30 30 30	abin           .null     "00000000"
>180d	30 30 30 30 00
>1812	20 20 20 00	adec           .null     "   "
.1816			putahexfmtxy
.1816	20 48 16	               jsr  push
.1819	20 65 18	               jsr  a2hex
.181c	ae 01 18	               ldx  a2hexpx
.181f	ac 02 18	               ldy  a2hexpy
.1822	20 fd 14	               jsr  gotoxy
.1825	a2 03		               ldx  #<a2hexprefix
.1827	a0 18		               ldy  #>a2hexprefix
.1829	20 e6 14	               jsr  puts
.182c	20 87 16	               jsr  pop
.182f	60		               rts
.1830			putahexfmt
.1830	20 48 16	               jsr  push
.1833	20 65 18	               jsr  a2hex
.1836	a2 03		               ldx  #<a2hexprefix
.1838	a0 18		               ldy  #>a2hexprefix
.183a	20 e6 14	               jsr  puts
.183d	20 87 16	               jsr  pop
.1840	60		               rts
.1841			putahex
.1841	20 48 16	               jsr  push
.1844	20 65 18	               jsr  a2hex
.1847	a2 04		               ldx  #<a2hexstr
.1849	a0 18		               ldy  #>a2hexstr
.184b	20 e6 14	               jsr  puts
.184e	20 87 16	               jsr  pop
.1851	60		               rts
.1852			nib2hex
.1852	08		               php
.1853	29 0f		               and  #$0f
.1855	f8		               sed
.1856	18		               clc
.1857	69 90		               adc  #$90
.1859	69 40		               adc  #$40
.185b	d8		               cld
.185c	28		               plp
.185d	60		               rts
.185e			lsra4bits
.185e	08		               php
.185f	4a		               lsr
.1860	4a		               lsr
.1861	4a		               lsr
.1862	4a		               lsr
.1863	28		               plp
.1864	60		               rts
.1865			a2hex
.1865	08		               php
.1866	48		               pha
.1867	48		               pha
.1868	20 5e 18	               jsr  lsra4bits
.186b	20 52 18	               jsr  nib2hex
.186e	8d 04 18	               sta  a2hexstr
.1871	68		               pla
.1872	20 52 18	               jsr  nib2hex
.1875	8d 05 18	               sta  a2hexstr+1
.1878	a9 00		               lda  #$00                ; set end of string
.187a	8d 06 18	               sta  a2hexstr+2
.187d	68		               pla
.187e	28		               plp
.187f	60		               rts
.1880			xy2hex
.1880	20 48 16	               jsr  push
.1883	20 65 18	               jsr  a2hex
.1886	8a		               txa
.1887	48		               pha
.1888	20 5e 18	               jsr  lsra4bits
.188b	20 52 18	               jsr  nib2hex
.188e	8d 04 18	               sta  a2hexstr
.1891	68		               pla
.1892	20 52 18	               jsr  nib2hex
.1895	8d 05 18	               sta  a2hexstr+1
.1898	98		               tya
.1899	48		               pha
.189a	20 5e 18	               jsr  lsra4bits
.189d	20 52 18	               jsr  nib2hex
.18a0	8d 06 18	               sta  a2hexstr+2
.18a3	68		               pla
.18a4	20 52 18	               jsr  nib2hex
.18a7	8d 07 18	               sta  a2hexstr+3
.18aa	a9 00		               lda  #$00                ; 0 ended string
.18ac	8d 08 18	               sta  a2hexstr+4
.18af	20 87 16	               jsr  pop
.18b2			atobin
.18b2	20 48 16	               jsr  push
.18b5	a2 08		               ldx  #8
.18b7	a0 00		               ldy  #0
.18b9	18		               clc
.18ba	2a		nextbit        rol
.18bb	48		               pha
.18bc	69 00		               adc  #$00
.18be	29 01		               and  #$01
.18c0	20 52 18	               jsr  nib2hex
.18c3	99 09 18	               sta  abin,y
.18c6	68		               pla
.18c7	c8		               iny
.18c8	ca		               dex
.18c9	d0 ef		               bne  nextbit
.18cb	a9 00		               lda  #0
.18cd	99 09 18	               sta  abin,y
.18d0	20 87 16	               jsr  pull
.18d3	60		               rts
.18d4			putabin
.18d4	20 b2 18	               jsr     atobin
.18d7	20 48 16	               jsr     push
.18da	a2 09		               ldx     #<abin
.18dc	a0 18		               ldy     #>abin
.18de	20 e6 14	               jsr     puts
.18e1	20 87 16	               jsr     pop
.18e4	60		               rts
.18e5			printabin
.18e5	20 48 16	               jsr     push
.18e8	a2 09		               ldx     #<abin
.18ea	a0 18		               ldy     #>abin
.18ec	20 e6 14	               jsr     puts
.18ef	20 87 16	               jsr     pop
.18f2	60		               rts
.18f3			putabinfmt
.18f3	08		               php
.18f4	48		               pha
.18f5	a9 25		               lda     #"%"
.18f7	20 e0 14	               jsr     putch
.18fa	68		               pla
.18fb	20 d4 18	               jsr     putabin
.18fe	28		               plp
.18ff	60		               rts
.1900			putabinxy
.1900	20 fd 14	               jsr     gotoxy
.1903	20 d4 18	               jsr     putabin
.1906	60		               rts
.1907			putabinfmtxy
.1907	20 fd 14	               jsr     gotoxy
.190a	20 f3 18	               jsr     putabinfmt
.190d	60		               rts
.190e			atodec
.190e	20 48 16	               jsr  push
.1911	f8		               sed
.1912	aa		               tax
.1913	a0 00		               ldy  #$00
.1915	a9 00		               lda  #$00
.1917	18		nextbit        clc
.1918	69 01		               adc  #$01
.191a	90 01		               bcc  decx
.191c	c8		               iny
.191d	ca		decx           dex
.191e	d0 f7		               bne  nextbit
.1920	48		               pha
.1921	98		               tya
.1922	20 52 18	               jsr  nib2hex
.1925	8d 12 18	               sta  adec
.1928	68		               pla
.1929	48		               pha
.192a	20 52 18	               jsr  nib2hex
.192d	8d 14 18	               sta  adec+2
.1930	68		               pla
.1931	6a		               ror
.1932	6a		               ror
.1933	6a		               ror
.1934	6a		               ror
.1935	20 52 18	               jsr  nib2hex
.1938	8d 13 18	               sta  adec+1
.193b	d8		               cld
.193c	20 87 16	               jsr  pull
.193f	60		               rts
>1940	00 00 00	buffer         .byte     0,0,0

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>1943	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>1947	00 00 00 00 00 00 00 00 00 0d 00 00
>1953	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>1957	00 00 00 00 00 00 00 00 00 00 00 00
>1963	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>1967	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1973	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1977	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1983	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1987	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>1993	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1997	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>19a3	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>19a7	00 00 00 00 00 00 00 00 00 00 00 00
>19b3	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>19b7	00 00 00 00 00 00 00 00 00 00 00 00
>19c3	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>19c7	00 00 00 00 00 00 00 00 00 00 00 00
>19d3	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>19d7	00 00 00 00 00 00 00 00 00 00 00 00
>19e3	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>19e7	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>19f3	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>19f7	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1a03	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1a07	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>1a13	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>1a17	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>1a23	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>1a27	00 00 00 00 00 00 00 00 00 00 00 00
>1a33	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>1a37	00 00 00 00 00 00 00 00 00 00 00 00
.1a43			waitstop
.1a43	20 48 16	               jsr  push
.1a46	20 ed f6	wait           jsr  k_stop
.1a49	d0 fb		               bne  wait
.1a4b	20 87 16	               jsr  pop
.1a4e	60		               rts
.1a4f			anykey
.1a4f	08		               php
.1a50	48		               pha
.1a51	a5 cb		nokey          lda 203
.1a53	c9 40		               cmp #64
.1a55	f0 fa		               beq nokey
.1a57	20 5d 1a	               jsr releasekey
.1a5a	68		               pla
.1a5b	28		               plp
.1a5c	60		               rts
.1a5d			releasekey
.1a5d	08		               php
.1a5e	48		               pha
.1a5f	a5 cb		keypressed     lda 203
.1a61	c9 40		               cmp #64
.1a63	d0 fa		               bne keypressed
.1a65	68		               pla
.1a66	28		               plp
.1a67	60		               rts
.1a68			getkey
.1a68	20 e4 ff	again          jsr  getin
.1a6b	c9 00		               cmp  #0
.1a6d	f0 f9		               beq  again
.1a6f	60		               rts
.1a70			waitkey
.1a70	20 48 16	               jsr  push
.1a73	8d c1 1a	               sta  thekey
.1a76	20 e4 ff	nope           jsr  getin
.1a79	20 d2 ff	               jsr  chrout
.1a7c	cd c1 1a	               cmp  thekey
.1a7f	d0 f5		               bne  nope
.1a81	20 d2 ff	               jsr  chrout
.1a84	20 87 16	               jsr  pop
.1a87	60		               rts
.1a88			waitspace
.1a88	20 48 16	               jsr  push
.1a8b	a9 7f		wait           lda  #$7f  ;%01111111
.1a8d	8d 00 dc	               sta  $dc00
.1a90	ad 01 dc	               lda  $dc01
.1a93	29 10		               and  #$10  ;mask %00010000
.1a95	d0 f4		               bne  wait
.1a97	20 87 16	               jsr  pop
.1a9a			waitsstop
.1a9a	20 48 16	               jsr  push
.1a9d	20 ed f6	wait           jsr  k_stop  ;%01111111
.1aa0	d0 fb		               bne  wait
.1aa2	20 87 16	               jsr  pop
.1aa5			waitreturn
.1aa5	20 48 16	               jsr  push
.1aa8	ad c2 1a	               lda  thecount
.1aab	8d 00 1e	               sta  scrnram
.1aae	a9 02		               lda  #$02
.1ab0	8d 00 96	               sta  colorram
.1ab3	20 e4 ff	nope           jsr  getin
.1ab6	c9 0d		nohex          cmp  #$0d
.1ab8	d0 f9		               bne  nope
.1aba	ee c2 1a	               inc  thecount
.1abd	20 87 16	               jsr  pop
.1ac0	60		               rts
>1ac1	00		thekey         .byte   0
>1ac2	01		thecount       .byte   $01

;******  Return to file: template.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L template.txt -o template.prg template.asm
; Mon Jun 24 17:50:21 2024

;Offset	;Hex		;Source

;******  Processing input file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-v20ex.asm

>1201	0b 12 0a 00	.word (+), 10       ;$1201 : Debut + 10 =$120b, $0010
>1205	9e 34 36 32	.null $9e, "4621"   ;$1205 : "sys4621" = jsr #120d
>1209	31 00
>120b	00 00		+ .word 0           ;$120b : $0000

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: template.asm

=1			TITLELINE=1
=6			BINLINE=6
=6			BINCOLM=6
=$10			XVAL=$10
=$40			XCPX=$40
=$03			DIFF=$03
.120d	20 9b 15	main           jsr scrmaninit
.1210	08		               php
.1211	48		               pha
.1212	a9 0e		               lda  #14
.1214	20 d2 ff	               jsr  $ffd2
.1217	68		               pla
.1218	28		               plp
.1219	48		               pha
.121a	a9 0e		               lda #(vnoir*16+(vbleu|8))
.121c	8d 0f 90	               sta  vicscrbrd
.121f	68		               pla
.1220	48		               pha
.1221	a9 01		               lda  #vblanc
.1223	8d 86 02	               sta  bascol
.1226	68		               pla
.1227	20 38 17	               jsr  push
.122a	a2 01		               ldx  #1
.122c	a0 15		               ldy  #21
.122e	20 ed 15	               jsr  gotoxy
.1231	20 77 17	               jsr  pop
.1234	20 38 17	               jsr  push
.1237	a2 32		isx            ldx  #<string3
.1239	a0 15		isy            ldy  #>string3
.123b	20 d6 15	               jsr  puts
.123e	20 77 17	               jsr  pull
.1241	48		               pha
.1242	a9 02		               lda  #vred
.1244	8d 86 02	               sta  bascol
.1247	68		               pla
.1248	20 38 17	               jsr  push
.124b	a2 01		               ldx  #1
.124d	a0 00		               ldy  #0
.124f	20 ed 15	               jsr  gotoxy
.1252	20 77 17	               jsr  pop
.1255	20 38 17	               jsr  push
.1258	a2 0e		isx            ldx  #<string1
.125a	a0 15		isy            ldy  #>string1
.125c	20 d6 15	               jsr  puts
.125f	20 77 17	               jsr  pull
.1262	48		               pha
.1263	a9 05		               lda  #vgreen
.1265	8d 86 02	               sta  bascol
.1268	68		               pla
.1269	20 38 17	               jsr  push
.126c	a2 01		               ldx  #BINCOLM-5
.126e	a0 03		               ldy  #BINLINE-3
.1270	20 ed 15	               jsr  gotoxy
.1273	20 77 17	               jsr  pop
.1276	20 38 17	               jsr  push
.1279	a2 23		isx            ldx  #<string2
.127b	a0 15		isy            ldy  #>string2
.127d	20 d6 15	               jsr  puts
.1280	20 77 17	               jsr  pull
.1283	48		               pha
.1284	a9 05		               lda  #vgreen
.1286	8d 86 02	               sta  bascol
.1289	68		               pla
.128a	20 38 17	               jsr  push
.128d	a2 07		               ldx  #BINCOLM+1
.128f	a0 04		               ldy  #BINLINE-2
.1291	20 ed 15	               jsr  gotoxy
.1294	20 77 17	               jsr  pop
.1297	20 38 17	               jsr  push
.129a	a2 4d		isx            ldx  #<string5
.129c	a0 15		isy            ldy  #>string5
.129e	20 d6 15	               jsr  puts
.12a1	20 77 17	               jsr  pull
.12a4	48		               pha
.12a5	a9 05		               lda  #vgreen
.12a7	8d 86 02	               sta  bascol
.12aa	68		               pla
.12ab	20 38 17	               jsr  push
.12ae	a2 07		               ldx  #BINCOLM+1
.12b0	a0 05		               ldy  #BINLINE-1
.12b2	20 ed 15	               jsr  gotoxy
.12b5	20 77 17	               jsr  pop
.12b8	20 38 17	               jsr  push
.12bb	a2 56		isx            ldx  #<string6
.12bd	a0 15		isy            ldy  #>string6
.12bf	20 d6 15	               jsr  puts
.12c2	20 77 17	               jsr  pull
.12c5	48		               pha
.12c6	a9 04		               lda  #vmauve
.12c8	8d 86 02	               sta  bascol
.12cb	68		               pla
.12cc	20 38 17	               jsr  push
.12cf	a2 0f		               ldx  #BINCOLM+9
.12d1	a0 07		               ldy  #BINLINE+1
.12d3	20 ed 15	               jsr  gotoxy
.12d6	20 77 17	               jsr  pop
.12d9	20 38 17	               jsr  push
.12dc	a2 47		isx            ldx  #<string4
.12de	a0 15		isy            ldy  #>string4
.12e0	20 d6 15	               jsr  puts
.12e3	20 77 17	               jsr  pull
.12e6	48		               pha
.12e7	a9 07		               lda  #vjaune
.12e9	8d 86 02	               sta  bascol
.12ec	68		               pla
.12ed	20 38 17	               jsr  push
.12f0	a2 04		               ldx  #4
.12f2	a0 12		               ldy  #18
.12f4	20 ed 15	               jsr  gotoxy
.12f7	20 77 17	               jsr  pop
.12fa	20 38 17	               jsr  push
.12fd	a2 5f		isx            ldx  #<string7
.12ff	a0 15		isy            ldy  #>string7
.1301	20 d6 15	               jsr  puts
.1304	20 77 17	               jsr  pull
.1307	48		               pha
.1308	a9 07		               lda  #vjaune
.130a	8d 86 02	               sta  bascol
.130d	68		               pla
.130e	20 38 17	               jsr  push
.1311	a2 00		               ldx  #0
.1313	a0 0c		               ldy  #12
.1315	20 ed 15	               jsr  gotoxy
.1318	20 77 17	               jsr  pop
.131b	20 38 17	               jsr  push
.131e	a2 6c		isx            ldx  #<string8
.1320	a0 15		isy            ldy  #>string8
.1322	20 d6 15	               jsr  puts
.1325	20 77 17	               jsr  pull
.1328	20 38 17	               jsr  push
.132b	a2 02		               ldx  #2
.132d	a0 09		               ldy  #9
.132f	20 ed 15	               jsr  gotoxy
.1332	20 77 17	               jsr  pop
.1335	a9 10		               lda #XVAL   ; initialise ...
.1337	8d 91 15	               sta count   ; ...le compteur
.133a	ad 91 15	next           lda count
.133d	38		               sec
.133e	ed 92 15	               sbc tstval
.1341	8d 93 15	               sta result
.1344	ae 91 15	               ldx count
.1347	a9 00		               lda #$00
.1349	48		               pha
.134a	28		               plp
.134b	ec 92 15	               cpx tstval
.134e	08		               php
.134f	68		               pla
.1350	20 a2 19	               jsr atobin
.1353	48		               pha
.1354	48		               pha
.1355	a9 07		               lda  #vyellow
.1357	8d 86 02	               sta  bascol
.135a	68		               pla
.135b	20 38 17	               jsr  push
.135e	a2 06		               ldx  #BINCOLM
.1360	a0 07		               ldy  #BINLINE+1
.1362	20 ed 15	               jsr  gotoxy
.1365	20 77 17	               jsr  pop
.1368	a9 25		               lda  #"%"
.136a	20 d0 15	               jsr  putch
.136d	20 38 17	               jsr  push
.1370	a2 f9		isx            ldx  #<abin
.1372	a0 18		isy            ldy  #>abin
.1374	20 d6 15	               jsr  puts
.1377	20 77 17	               jsr  pull
.137a	8a		               txa
.137b	48		               pha
.137c	20 55 19	               jsr a2hex
.137f	48		               pha
.1380	a9 03		               lda  #vcyan
.1382	8d 86 02	               sta  bascol
.1385	68		               pla
.1386	20 38 17	               jsr  push
.1389	a2 02		               ldx  #2
.138b	a0 0c		               ldy  #12
.138d	20 ed 15	               jsr  gotoxy
.1390	20 77 17	               jsr  pop
.1393	a9 24		               lda  #"$"
.1395	20 d0 15	               jsr  putch
.1398	20 38 17	               jsr  push
.139b	a2 f4		isx            ldx  #<a2hexstr
.139d	a0 18		isy            ldy  #>a2hexstr
.139f	20 d6 15	               jsr  puts
.13a2	20 77 17	               jsr  pull
.13a5	68		               pla
.13a6	20 a2 19	               jsr atobin
.13a9	48		               pha
.13aa	a9 03		               lda  #vcyan
.13ac	8d 86 02	               sta  bascol
.13af	68		               pla
.13b0	20 38 17	               jsr  push
.13b3	a2 07		               ldx  #7
.13b5	a0 0c		               ldy  #12
.13b7	20 ed 15	               jsr  gotoxy
.13ba	20 77 17	               jsr  pop
.13bd	a9 25		               lda  #"%"
.13bf	20 d0 15	               jsr  putch
.13c2	20 38 17	               jsr  push
.13c5	a2 f9		isx            ldx  #<abin
.13c7	a0 18		isy            ldy  #>abin
.13c9	20 d6 15	               jsr  puts
.13cc	20 77 17	               jsr  pull
.13cf	ad 92 15	               lda tstval
.13d2	48		               pha
.13d3	20 55 19	               jsr a2hex
.13d6	48		               pha
.13d7	a9 03		               lda  #vcyan
.13d9	8d 86 02	               sta  bascol
.13dc	68		               pla
.13dd	20 38 17	               jsr  push
.13e0	a2 02		               ldx  #2
.13e2	a0 0d		               ldy  #13
.13e4	20 ed 15	               jsr  gotoxy
.13e7	20 77 17	               jsr  pop
.13ea	a9 24		               lda  #"$"
.13ec	20 d0 15	               jsr  putch
.13ef	20 38 17	               jsr  push
.13f2	a2 f4		isx            ldx  #<a2hexstr
.13f4	a0 18		isy            ldy  #>a2hexstr
.13f6	20 d6 15	               jsr  puts
.13f9	20 77 17	               jsr  pull
.13fc	68		               pla
.13fd	20 a2 19	               jsr atobin
.1400	48		               pha
.1401	a9 03		               lda  #vcyan
.1403	8d 86 02	               sta  bascol
.1406	68		               pla
.1407	20 38 17	               jsr  push
.140a	a2 07		               ldx  #7
.140c	a0 0d		               ldy  #13
.140e	20 ed 15	               jsr  gotoxy
.1411	20 77 17	               jsr  pop
.1414	a9 25		               lda  #"%"
.1416	20 d0 15	               jsr  putch
.1419	20 38 17	               jsr  push
.141c	a2 f9		isx            ldx  #<abin
.141e	a0 18		isy            ldy  #>abin
.1420	20 d6 15	               jsr  puts
.1423	20 77 17	               jsr  pull
.1426	ad 93 15	               lda result
.1429	48		               pha
.142a	20 55 19	               jsr a2hex
.142d	48		               pha
.142e	a9 03		               lda  #vcyan
.1430	8d 86 02	               sta  bascol
.1433	68		               pla
.1434	20 38 17	               jsr  push
.1437	a2 02		               ldx  #2
.1439	a0 0f		               ldy  #15
.143b	20 ed 15	               jsr  gotoxy
.143e	20 77 17	               jsr  pop
.1441	a9 24		               lda  #"$"
.1443	20 d0 15	               jsr  putch
.1446	20 38 17	               jsr  push
.1449	a2 f4		isx            ldx  #<a2hexstr
.144b	a0 18		isy            ldy  #>a2hexstr
.144d	20 d6 15	               jsr  puts
.1450	20 77 17	               jsr  pull
.1453	68		               pla
.1454	20 a2 19	               jsr atobin
.1457	48		               pha
.1458	a9 03		               lda  #vcyan
.145a	8d 86 02	               sta  bascol
.145d	68		               pla
.145e	20 38 17	               jsr  push
.1461	a2 07		               ldx  #7
.1463	a0 0f		               ldy  #15
.1465	20 ed 15	               jsr  gotoxy
.1468	20 77 17	               jsr  pop
.146b	a9 25		               lda  #"%"
.146d	20 d0 15	               jsr  putch
.1470	20 38 17	               jsr  push
.1473	a2 f9		isx            ldx  #<abin
.1475	a0 18		isy            ldy  #>abin
.1477	20 d6 15	               jsr  puts
.147a	20 77 17	               jsr  pull
.147d	68		               pla
.147e	20 55 19	               jsr a2hex
.1481	48		               pha
.1482	a9 03		               lda  #vcyan
.1484	8d 86 02	               sta  bascol
.1487	68		               pla
.1488	20 38 17	               jsr  push
.148b	a2 10		               ldx  #BINCOLM+10
.148d	a0 07		               ldy  #BINLINE+1
.148f	20 ed 15	               jsr  gotoxy
.1492	20 77 17	               jsr  pop
.1495	a9 24		               lda  #"$"
.1497	20 d0 15	               jsr  putch
.149a	20 38 17	               jsr  push
.149d	a2 f4		isx            ldx  #<a2hexstr
.149f	a0 18		isy            ldy  #>a2hexstr
.14a1	20 d6 15	               jsr  puts
.14a4	20 77 17	               jsr  pull
.14a7	ee 91 15	               inc count
.14aa	ad 92 15	               lda tstval
.14ad	18		               clc
.14ae	69 03		               adc #DIFF
.14b0	8d 92 15	               sta tstval
.14b3	20 38 17	               jsr  push
.14b6	a2 01		               ldx  #1
.14b8	a0 19		               ldy  #25
.14ba	20 ed 15	               jsr  gotoxy
.14bd	20 77 17	               jsr  pop
.14c0	48		               pha
.14c1	20 58 1b	               jsr getkey
.14c4	c9 51		               cmp  #'q'
.14c6	f0 34		               beq out
.14c8	48		               pha
.14c9	20 38 17	               jsr  push
.14cc	a2 06		               ldx  #6
.14ce	a0 12		               ldy  #18
.14d0	20 ed 15	               jsr  gotoxy
.14d3	20 77 17	               jsr  pop
.14d6	68		               pla
.14d7	20 55 19	               jsr a2hex
.14da	20 38 17	               jsr  push
.14dd	a2 0f		               ldx  #15
.14df	a0 12		               ldy  #18
.14e1	20 ed 15	               jsr  gotoxy
.14e4	20 77 17	               jsr  pop
.14e7	a9 24		               lda  #"$"
.14e9	20 d0 15	               jsr  putch
.14ec	20 38 17	               jsr  push
.14ef	a2 f4		isx            ldx  #<a2hexstr
.14f1	a0 18		isy            ldy  #>a2hexstr
.14f3	20 d6 15	               jsr  puts
.14f6	20 77 17	               jsr  pull
.14f9	4c 3a 13	               jmp next
.14fc	60		out            rts
.14fd			delay65536
.14fd	20 38 17	               jsr push
.1500	a2 00		               ldx #$00
.1502	a0 00		               ldy #$00
.1504	88		waity          dey
.1505	d0 fd		               bne waity
.1507	ca		waitx          dex
.1508	d0 fa		               bne waity
.150a	20 77 17	               jsr pop
.150d	60		               rts
>150e	d4 45 53 54	string1        .null     "Test de Drapeaux CPU"
>1512	20 44 45 20 c4 52 41 50 45 41 55 58 20 c3 d0 d5
>1522	00
>1523	c6 cc c1 c7	string2        .null     "FLAGS:NV-BDIZC"
>1527	d3 3a ce d6 2d c2 c4 c9 da c3 00
>1532	d0 41 52 3a	string3        .null     "Par: Daniel Lafrance"
>1536	20 c4 41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45
>1546	00
>1547	28 20 20 20	string4        .null     "(   )"
>154b	29 00
>154d	5e 5e 20 5e	string5        .byte     94,94,32,94,94,94,94,94,0
>1551	5e 5e 5e 5e 00
>1556	7d 7d 3f 7d	string6        .byte     125,125,'?',125,125,125,125,125,0
>155a	7d 7d 7d 7d 00
>155f	c7 45 54 4b	string7        .null     "Getkey() = $"
>1563	45 59 28 29 20 3d 20 24 00
>156c	20 20 24 0d	string8        .byte     32,32,'$',13,32,'-','$',32,32,32,'-'
>1570	20 2d 24 20 20 20 2d
>1577	0d 20 20 2d	               .byte     13,32,32,45,45,45,32,32,45,45,45,45,45,45,45,45,45,13
>157b	2d 2d 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 0d
>1589	20		               .byte     32
>158a	3d 24 20 20	               .null     "=$   ="
>158e	20 3d 00
>1591	10		count          .byte     XVAL
>1592	40		tstval         .byte     XCPX
>1593	00		result         .byte     0
>1594	00		row            .byte     0
>1595	00		lin            .byte     0
>1596	0d 12		adresse        .word     main

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-vic20-kernal.asm

=$90			kiostatus   =   $90     ; Kernal I/O status word (st) (byte)
=$b7			curfnlen    =   $b7     ; Current filename length (byte)
=$b9			cursecadd   =   $b9     ; Current secondary address (byte)
=$ba			curdevno    =   $ba     ; Current device number (byte)
=$bb			curfptr     =   $bb     ; Current file pointer (word)
=$fb			zpage1      =   $fb     ; zero page 1 address (word)
=$fd			zpage2      =   $fd     ; zero page 2 address (word)
=$0286			bascol      =   $0286   ; basic next chr colscreenram (byte)
=$1000			scrnramex   =   $1000   ; video character ram (with ram expansion)
=$1200			basicstaex  =   $1200   ; basic start address (with ram expansion)
=$9400			colorramex  =   $9400   ; video color ram (with ram expansion)
=$1e00			scrnram     =   $1e00   ; video character ram (no ram expansion)
=$1000			basicsta    =   $1000   ; basic start address (no ram expansion)
=$9600			colorram    =   $9600   ; video color ram (no ram expansion)
=$1e00			scrram0     =   scrnram
=7936			scrram1     =   scrram0+$0100
=$9600			colram0     =   colorram
=38656			colram1     =   colram0+$0100
=$8000			chargen     =   $8000
=$9000			ioblock     =   $9000   ;
=$9000			vicchip     =   $9000
=$a000			ramblk4     =   $a000
=$c000			basicrom    =   $c000
=$e000			kernalrom   =   $e000
=$03			bstop       =   $03      ;stop
=$05			bwhite      =   $05      ;set color white
=$08			block       =   $08      ;lock the charset
=$09			bunlock     =   $09      ;unlock the charset
=$0d			bcarret     =   $0d
=$0e			btext       =   $0e
=$11			bcrsdn      =   $11      ;cursor down 1 line
=$12			brevcol     =   $12
=$13			bhome       =   $13
=$14			bdelete     =   $14
=$1c			bred        =   $1c
=$1d			bcuright    =   $1d
=$1e			bgreen      =   $1e
=$1f			bblue       =   $1f
=$81			borange     =   $81
=$83			blrun       =   $83
=$85			bfkey1      =   $85
=$86			bfkey2      =   $86
=$87			bfkey3      =   $87
=$88			bfkey4      =   $88
=$89			bfkey5      =   $89
=$8a			bfkey6      =   $8a
=$8b			bfkey7      =   $8b
=$8c			bfkey8      =   $8c
=$8d			bcarret1    =   $8d
=$8e			bgraph      =   $8e
=$90			bblack      =   $90
=$91			bcuup       =   $91
=$92			brevoff     =   $92
=$93			bclear      =   $93
=$94			binsert     =   $94
=$95			bbrown      =   $95
=$96			bltred      =   $96
=$97			bdkgrey     =   $97
=$98			bmdgrey     =   $98
=$99			bltgreen    =   $99
=$9a			bltblue     =   $9a
=$9b			bltgrey     =   $9b
=$9c			bmagenta    =   $9c
=$9d			bculeft     =   $9d
=$9e			byellow     =   $9e
=$9f			bcyan       =   $9f
=$0286			carcol      =   $0286
=$030a			ieval       =   $030a
=$73			chrget      =   $73
=$79			chrgot      =   $79
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$ffb4			stalk   = $ffb4 ; Send Talk command to serial bus.
=$ffb1			slisten = $ffb1 ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$ffa5			acptr   = $ffa5 ; jmp $ef19 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ffa8			ciout   = $ffa8 ; jmp $eee4 Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ffb1			listen  = $ffb1 ; jmp ($ee17) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f542 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe82 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe73 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ffde			rdtim   = $ffde ; jmp $f760 Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe57 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd52 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f675 Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $eb1e Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $eec0 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe50 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe66 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fe49 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f767 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe6f Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ee14 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $eec1 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f734 Update the system clock
=$ffae			unlsn   = $ffae ; jmp $ef04 Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $eef6 Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $f675 Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$f1ca			kd_chrout    =   $f1ca
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.1598	4c 0d 12	pgmstart        jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-vic20-vic.asm

=$9000			vic = $9000			; VicII C64 memorymap base address
=36864			vichorcnt = vic+$00	; $9000, 36864 Bit 0-6 Horizontal centering.
=36865			vicvercnt = vic+$01	; $9001, 36865 Vertical centering.
=36866			viccolnum = vic+$02	; $9002, 36866 Bit 0-6 set # of column.
=36867			vicrownum = vic+$03	; $9003, 36867 Bit 1-6 set # of rows.
=36868			vicsrastr = vic+$04	; $9004, 36868 TV raster beam line.
=36869			viccstart = vic+$05	; $9005, 36869 Bit 0-3 start of character memory (dflt=0).
=36870			vicpenhor = vic+$06	; $9006, 36870 Horizontal position of light pen.
=36871			vicpenver = vic+$07	; $9007, 36871 Vertical position of light pen
=36872			vicpadhor = vic+$08	; $9008, 36872 Digitized value of paddle X
=36873			vicpadver = vic+$09	; $9009, 36873 Digitized value of paddle Y
=36874			vicosclhz = vic+$0a	; $900a, 36874 Oscillator 1 freq. (low) (on: 128-255)
=36875			vicoscmhz = vic+$0b	; $900b, 36875 Oscillator 2 freq. (medium) (on: 128-255)
=36876			vicoschhz = vic+$0c	; $900c, 36876 Oscillator 3 freq. (high) (on: 128-255)
=36877			vicnoizhz = vic+$0d	; $900d, 36877 Noise source freq.
=36878			vicvolume = vic+$0e	; $900e, 36878 Bit 0-3 set volume of all sound.
=36879			vicscrbrd = vic+$0f	; $900f, 36879 Screen and border color register.
=36879			vicbordcol=vicscrbrd
=36879			vicbackcol=vicscrbrd

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-vic20-basic2.asm

=$c3bb			b_opentxtspc  = $c3bb ;  1) Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$c408			b_chkavailmem = $c408 ;  2) Check available Memory. *1  ;a-y;---; Array top $yyaa
=$c435			b_outofmem    = $c435 ;  3) ?Out of memory.             ;---;---;
=$c437			b_errormesg   = $c437 ;  4) Send BASIC error message.   ;a--;---; a = errno
=$e467			b_warmstart   = $e467 ;  5) Basic warm start.           ;---;---;
=$c48a			b_chrget      = $c48a ;  6) Main CHRGET entry.          ;---;---;
=$c49c			b_newline     = $c49c ;  7) Crunch tokens, insert line. ;-x-;---; x = buff len
=$c52a			b_clrready    = $c52a ;  8) Fix chaining CLR and READY. ;---;---;
=$c533			b_fixchaining = $c533 ;  9) Fix chaining.               ;---;---;
=$c560			b_kbgetline   = $c560 ; 10) Recieve line from keyboard.
=$c579			b_crunchtkns  = $c579 ; 11) Crunch token. *7            ;-x-;---: x = buff len
=$c613			b_findline    = $c613 ; 12) Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$c642			b_new         = $c642 ; 13) Do NEW                      ;---;---;
=$c659			b_resetclr    = $c659 ; 14) Reset BASIC and do CLR      ;---;---;
=$c65e			b_clr         = $c65e ; 15) Do CLR                      ;---;---;
=$c68e			b_rstchrget   = $c68e ; 17) Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$c857			b_continue    = $c857 ; 18) Do CONTINUE.                ;a-y;---; curline $yyaa
=$c96b			b_getint      = $c96b ; 19) Get int from BASIX text.    ;---;---;
=$cad3			b_sndcr       = $cad3 ; 20) Send RETURN, LF in scr mode.;---;a--; a = LF
=$cad7			b_sndcrlf     = $cad7 ; 21) Send RETURN, LINEFEED.      ;---;a--; a = LF
=$cb1e			b_outstr_ay   = $cb1e ; 22) Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$cb1e			b_puts        = b_outstr_ay
=$cb24			b_outstrprep  = $cb24 ; 23) Print precomputated string. ;a--;---; a = strlen
=$cb45			b_printqm     = $cb45 ; 24) Print '?'.                  ;---;---;
=$cb47			b_sendchar    = $cb47 ; 25) Send char in a to device.   ;a--;a--; a = char
=$cd8a			b_frmnum      = $cd8a ; Evaluate numeric expression and/or check for data type mismatch
=$cd9e			b_evalexpr    = $cd9e ; 26) Evaluate expression.
=$cefd			b_chk4comma   = $cefd ; 27) Check for coma.             ;---;a--; a = char
=$cefa			b_chk4lpar    = $cefa ; 28) check for '('.              ;---;a--; a = char
=$cef7			b_chk4rpar    = $cef7 ; 29) check for ')'.              ;---;a--; a = char
=$cf08			b_syntaxerr   = $cf08 ; 30) send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; 31) find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; 32) Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; 33) Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; 34) Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; 35) Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; 36) Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; 37) Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; 38) Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; 39) Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; 40) Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; 41) Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; 42) Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; 43) Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; 44) Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; 45) Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; 46) Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; 47) Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; 48) Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; 49) Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; 50) Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-vic20-basic2.asm

.159b			scrmaninit
.159b	20 38 17	               jsr  push
.159e	a9 00		               lda  #vnoir
.15a0	2a		               rol
.15a1	2a		               rol
.15a2	2a		               rol
.15a3	2a		               rol
.15a4	09 05		               ora  #vvert
.15a6	09 08		               ora  #%00001000
.15a8	8d 0f 90	               sta  vicbackcol
.15ab	a9 01		               lda  #vblanc
.15ad	8d 86 02	               sta  bascol
.15b0	a9 02		               lda  #%00000010
.15b2	8d 00 90	               sta  vichorcnt
.15b5	20 bc 15	               jsr  cls
.15b8	20 77 17	               jsr  pop
.15bb	60		               rts
.15bc			cls
.15bc	08		               php
.15bd	48		               pha
.15be	a9 93		               lda  #$93
.15c0	20 d0 15	               jsr  putch
.15c3	a9 04		               lda  #$04
.15c5	8d 00 90	               sta  vichorcnt
.15c8	a9 1a		               lda  #$1a
.15ca	8d 01 90	               sta  vicvercnt
.15cd	68		               pla
.15ce	28		               plp
.15cf	60		               rts
.15d0			putch
.15d0	08		               php
.15d1	20 d2 ff	               jsr  $ffd2
.15d4	28		               plp
.15d5	60		               rts
.15d6			puts
.15d6	20 38 17	               jsr  push
.15d9	86 fb		               stx  zpage1
.15db	84 fc		               sty  zpage1+1
.15dd	a0 00		               ldy  #$00
.15df	b1 fb		next           lda  (zpage1),y
.15e1	f0 06		               beq  out
.15e3	20 d0 15	               jsr  putch
.15e6	c8		               iny
.15e7	d0 f6		               bne  next
.15e9	20 77 17	out            jsr  pop
.15ec	60		               rts
.15ed			gotoxy
.15ed	20 38 17	               jsr  push
.15f0	98		               tya
.15f1	48		               pha
.15f2	8a		               txa
.15f3	a8		               tay
.15f4	68		               pla
.15f5	aa		               tax
.15f6	18		               clc
.15f7	20 f0 ff	               jsr  kplot
.15fa	20 77 17	               jsr  pop
.15fd	60		               rts
.15fe			cursor
=$0286			bascol    =    $0286
.15fe	08		               php
.15ff	48		               pha
.1600	90 12		               bcc  restore
.1602	20 f0 ff	               jsr  kplot
.1605	8c 26 16	               sty  cx
.1608	8e 27 16	               stx  cy
.160b	ad 86 02	               lda  bascol
.160e	8d 28 16	               sta  bcol
.1611	4c 23 16	               jmp  out
.1614	ae 27 16	restore        ldx  cy
.1617	ac 26 16	               ldy  cx
.161a	20 f0 ff	               jsr  kplot
.161d	ad 28 16	               lda  bcol
.1620	8d 86 02	               sta  bascol
.1623	68		out            pla
.1624	28		               plp
.1625	60		               rts
>1626	00		cx   .byte     $00
>1627	00		cy   .byte     $00
>1628	00		bcol .byte     $00
.1629			cursave
.1629	08		               php
.162a	38		               sec
.162b	20 fe 15	               jsr  cursor
.162e	28		               plp
.162f	60		               rts
.1630			curput
.1630	08		               php
.1631	18		               clc
.1632	20 fe 15	               jsr  cursor
.1635	28		               plp
.1636	60		               rts
.1637			putsxy
.1637	08		               php
.1638	8e 9c 16	               stx  straddr
.163b	8c 9d 16	               sty  straddr+1
.163e	48		               pha
.163f	98		               tya
.1640	48		               pha
.1641	8a		               txa
.1642	48		               pha
.1643	a5 fb		               lda  zpage1
.1645	8d a0 16	               sta  zp1
.1648	a5 fc		               lda  zpage1+1
.164a	8d a1 16	               sta  zp1+1
.164d	ad 9d 16	               lda  straddr+1
.1650	85 fc		               sta  zpage1+1
.1652	ad 9c 16	               lda  straddr
.1655	85 fb		               sta  zpage1
.1657	a0 00		               ldy  #$00
.1659	b1 fb		               lda  (zpage1),y
.165b	8d 9e 16	               sta  px
.165e	c8		               iny
.165f	b1 fb		               lda  (zpage1),y
.1661	8d 9f 16	               sta  py
.1664	aa		               tax
.1665	ac 9e 16	               ldy  px
.1668	20 ed 15	               jsr  gotoxy
.166b	18		               clc
.166c	ee 9c 16	               inc  straddr
.166f	ad 9c 16	               lda  straddr
.1672	8d 9c 16	               sta  straddr
.1675	90 03		               bcc  norep1
.1677	ee 9d 16	               inc  straddr+1
.167a	ee 9c 16	norep1         inc  straddr
.167d	90 03		               bcc  norep2
.167f	ee 9d 16	               inc  straddr+1
.1682	ad 9c 16	norep2         lda  straddr
.1685	ac 9d 16	               ldy  straddr+1
.1688	20 d6 15	               jsr  puts
.168b	ad a1 16	               lda  zp1+1
.168e	85 fc		               sta  zpage1+1
.1690	ad a0 16	               lda  zp1
.1693	85 fb		               sta  zpage1
.1695	68		               pla
.1696	aa		               tax
.1697	68		               pla
.1698	a8		               tay
.1699	68		               pla
.169a	28		               plp
.169b	60		               rts
>169c	00 00		straddr   .word     $00
>169e	00		px        .byte     $00
>169f	00		py        .byte     $00
>16a0	00 00		zp1       .word     $00
.16a2			putscxy
.16a2	08		               php
.16a3	8e f8 16	               stx  straddr
.16a6	8c f9 16	               sty  straddr+1
.16a9	48		               pha
.16aa	98		               tya
.16ab	48		               pha
.16ac	8a		               txa
.16ad	48		               pha
.16ae	a5 fb		               lda  zpage1
.16b0	8d fb 16	               sta  zp1
.16b3	a5 fc		               lda  zpage1+1
.16b5	8d fc 16	               sta  zp1+1
.16b8	ad f9 16	               lda  straddr+1
.16bb	85 fc		               sta  zpage1+1
.16bd	ad f8 16	               lda  straddr
.16c0	85 fb		               sta  zpage1
.16c2	ad 86 02	               lda  bascol
.16c5	8d fa 16	               sta  bc
.16c8	a0 00		               ldy #$00
.16ca	b1 fb		               lda  (zpage1),y
.16cc	8d 86 02	               sta  bascol
.16cf	18		               clc
.16d0	ee f8 16	               inc  straddr
.16d3	90 03		               bcc  norep1
.16d5	ee f9 16	               inc  straddr+1
.16d8	ad f8 16	norep1         lda  straddr
.16db	ac f9 16	               ldy  straddr+1
.16de	20 37 16	               jsr  putsxy
.16e1	ad fa 16	               lda  bc
.16e4	8d 86 02	               sta  bascol
.16e7	ad fc 16	               lda  zp1+1
.16ea	85 fc		               sta  zpage1+1
.16ec	ad fb 16	               lda  zp1
.16ef	85 fb		               sta  zpage1
.16f1	68		               pla
.16f2	aa		               tax
.16f3	68		               pla
.16f4	a8		               tay
.16f5	68		               pla
.16f6	28		               plp
.16f7	60		               rts
>16f8	00 00		straddr  .word      $00
>16fa	00		bc       .byte      $00
>16fb	00 00		zp1      .word      $00
.16fd			putrahex
.16fd	08		               php
.16fe	48		               pha
.16ff	20 55 19	               jsr  a2hex
.1702	a9 f4		               lda  #<a2hexstr
.1704	a0 18		               ldy  #>a2hexstr
.1706	20 d6 15	               jsr  puts
.1709	68		               pla
.170a	28		               plp
.170b	60		               rts
.170c			kputrahexxy
.170c			bputrahexxy
.170c			putrahexxy
.170c	08		               php
.170d	20 55 19	               jsr  a2hex
.1710	a9 f1		               lda  #<a2hexpos
.1712	a0 18		               ldy  #>a2hexpos
.1714	20 37 16	               jsr  putsxy
.1717	68		               pla
.1718	28		               plp
.1719	60		               rts
.171a			putrahexcxy
.171a	08		               php
.171b	20 55 19	               jsr  a2hex
.171e	a9 f1		               lda  #<a2hexpos
.1720	a0 18		               ldy  #>a2hexpos
.1722	20 a2 16	               jsr  putscxy
.1725	68		               pla
.1726	28		               plp
.1727	60		               rts
.1728			setinverse
.1728	48		               pha
.1729	a9 12		               lda  #$12
.172b	20 d2 ff	               jsr  $ffd2
.172e	68		               pla
.172f	60		               rts
.1730			clrinverse
.1730	48		               pha
.1731	a9 92		               lda  #$92
.1733	20 d2 ff	               jsr  $ffd2
.1736	68		               pla
.1737	60		               rts

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.1738			push
.1738	08		          php            ; stack : flg, pcl, pch
.1739	78		          sei
.173a	8d 74 17	          sta  ra        ; save a
.173d	68		          pla            ; stack : pcl, pch
.173e	8d 73 17	          sta  rp        ; save rp
.1741	68		          pla            ; stack : pch
.1742	8d 75 17	          sta  pc        ; save pcl
.1745	68		          pla            ; stack : -
.1746	8d 76 17	          sta  pc+1      ; save pch
.1749	a5 fb		          lda  zpage1    ; get zpage1 low byte
.174b	48		          pha            ; stack : zp1l
.174c	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.174e	48		          pha            ; stack : zp1h, zp1l
.174f	a5 fd		          lda  zpage2    ; get zpage2 low byte
.1751	48		          pha            ; stack : zp2l, zp1h, zp1l
.1752	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.1754	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1755	ad 73 17	          lda  rp        ; get rp
.1758	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1759	ad 74 17	          lda  ra        ; get a
.175c	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.175d	8a		          txa            ; get x
.175e	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.175f	98		          tya            ; get y
.1760	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1761	ad 76 17	          lda  pc+1      ; get pch
.1764	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1765	ad 75 17	          lda  pc        ; get pcl
.1768	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1769	ad 73 17	          lda  rp        ; get rp
.176c	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.176d	ad 74 17	          lda  ra        ; get a
.1770	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1771	58		          cli
.1772	60		          rts
>1773	00		rp        .byte     0
>1774	00		ra        .byte     0
>1775	00 00		pc        .word     0
.1777			pull
.1777			pop
.1777	78		          sei
.1778	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1779	8d ac 17	          sta  pc        ; save pcl
.177c	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.177d	8d ad 17	          sta  pc+1      ; save pch
.1780	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1781	a8		          tay            ; set y
.1782	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1783	aa		          tax            ; set x
.1784	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1785	8d ab 17	          sta  ra        ; save a
.1788	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1789	8d aa 17	          sta  rp        ; save rp
.178c	68		          pla            ; stack : zp2l, zp1h, zp1l
.178d	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.178f	68		          pla            ; stack : zp1h, zp1l
.1790	85 fd		          sta  zpage2    ; get zpage2 High byte
.1792	68		          pla            ; stack : zp1l
.1793	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.1795	68		          pla            ; stack :
.1796	85 fb		          sta  zpage1    ; get zpage1 High byte
.1798	ad ad 17	          lda  pc+1      ; get pch
.179b	48		          pha            ; stack : pch
.179c	ad ac 17	          lda  pc
.179f	48		          pha            ; stack : pcl, pch
.17a0	ad aa 17	          lda  rp        ; get rp
.17a3	48		          pha            ; stack : rp, pcl, pch
.17a4	ad ab 17	          lda  ra        ; set ra
.17a7	58		          cli
.17a8	28		          plp            ; stack : pcl, pch
.17a9	60		          rts
>17aa	00		rp        .byte     0
>17ab	00		ra        .byte     0
>17ac	00 00		pc        .word     0

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.17ae			blkfill
.17ae	20 38 17	bf0            jsr  push
.17b1	20 6f 18	               jsr  savezp1
.17b4	84 fc		               sty  zpage1+1
.17b6	a0 00		               ldy  #$00
.17b8	84 fb		               sty  zpage1
.17ba	91 fb		bf1            sta  (zpage1),y
.17bc	c8		               iny
.17bd	d0 fb		               bne  bf1
.17bf	20 7e 18	               jsr  restzp1
.17c2	20 77 17	               jsr  pop
.17c5	60		               rts
.17c6			memfill
.17c6	20 38 17	               jsr  push
.17c9	20 ae 17	mf1            jsr  blkfill
.17cc	c8		               iny
.17cd	ca		               dex
.17ce	d0 f9		               bne  mf1
.17d0	20 77 17	               jsr  pop
.17d3	60		               rts
.17d4			memmove
.17d4	20 38 17	               jsr  push
.17d7	ba		               tsx            ; On se crée un pointeur ...
.17d8	8a		               txa
.17d9	18		               clc
.17da	69 0b		               adc  #11
.17dc	a8		               tay
.17dd	a2 06		               ldx  #$06
.17df	b9 00 01	nextbyte       lda  $0100,y
.17e2	99 2e 18	               sta  words,y
.17e5	c8		               iny
.17e6	ca		               dex
.17e7	d0 f6		               bne  nextbyte
.17e9	ad 2e 18	               lda  s
.17ec	8d 05 18	               sta  source+1
.17ef	ad 2f 18	               lda  s+1
.17f2	8d 06 18	               sta  source+2
.17f5	ad 30 18	               lda  d
.17f8	8d 02 18	               sta  destin+1
.17fb	ad 31 18	               lda  d+1
.17fe	8d 03 18	               sta  destin+2
.1801	ad ff ff	destin         lda  $ffff
.1804	8d ff ff	source         sta  $ffff
.1807	ee 02 18	               inc  destin+1
.180a	d0 03		               bne  src
.180c	ee 03 18	               inc  destin+2
.180f	ee 05 18	src            inc  source+1
.1812	d0 03		               bne  cnt
.1814	ee 06 18	               inc  source+2
.1817	ad 32 18	cnt            lda  compte
.181a	d0 08		               bne  decit
.181c	ad 33 18	               lda  compte+1
.181f	f0 09		               beq  fini
.1821	ce 33 18	               dec  compte+1
.1824	ce 32 18	decit          dec  compte
.1827	4c 01 18	               jmp  destin
.182a	20 77 17	fini           jsr  pop
.182d	60		               rts
.182e			words
>182e	00 00		s         .word     $0000
>1830	00 00		d         .word     $0000
>1832	00 00		compte    .word     $0000
.1834			decword
.1834	20 38 17	               jsr  push
.1837	86 fd		               stx  zpage2
.1839	84 fe		               sty  zpage2+1
.183b	20 77 17	               jsr  pop
.183e	60		               rts
.183f			inczp1
.183f	08		               php
.1840	48		               pha
.1841	e6 fb		               inc  zpage1
.1843	a5 fb		               lda  zpage1
.1845	d0 02		               bne  nopage
.1847	e6 fc		               inc  zpage1+1
.1849	68		nopage         pla
.184a	28		               plp
.184b	60		               rts
.184c			deczp1
.184c	08		                php
.184d	48		                pha
.184e	c6 fb		                dec  zpage1
.1850	d0 02		                bne  nopage
.1852	c6 fc		                dec  zpage1+1
.1854	68		nopage          pla
.1855	28		                plp
.1856	60		                rts
.1857			inczp2
.1857	08		               php
.1858	48		               pha
.1859	e6 fd		               inc  zpage2
.185b	a5 fd		               lda  zpage2
.185d	d0 02		               bne  nopage
.185f	e6 fe		               inc  zpage2+1
.1861	68		nopage         pla
.1862	28		               plp
.1863	60		               rts
.1864			deczp2
.1864	08		               php
.1865	48		               pha
.1866	a5 fd		               lda  zpage2
.1868	d0 02		               bne  nopage
.186a	c6 fe		               dec  zpage2+1
.186c	68		nopage         pla
.186d	28		               plp
.186e	60		               rts
.186f			savezp1
.186f	08		               php
.1870	48		               pha
.1871	a5 fb		               lda  zpage1
.1873	8d eb 18	               sta  zp1
.1876	a5 fc		               lda  zpage1+1
.1878	8d ec 18	               sta  zp1+1
.187b	68		               pla
.187c	28		               plp
.187d	60		               rts
.187e			restzp1
.187e	08		               php
.187f	48		               pha
.1880	ad eb 18	               lda zp1
.1883	85 fb		               sta zpage1
.1885	ad ec 18	               lda zp1+1
.1888	85 fc		               sta zpage1+1
.188a	68		               pla
.188b	28		               plp
.188c	60		               rts
.188d			savezp2
.188d	08		         php
.188e	48		         pha
.188f	a5 fd		         lda zpage2
.1891	8d ed 18	         sta zp2
.1894	a5 fe		         lda zpage2+1
.1896	8d ee 18	         sta zp2+1
.1899	68		         pla
.189a	28		         plp
.189b	60		         rts
.189c			restzp2
.189c	08		                php
.189d	48		                pha
.189e	ad ed 18	                lda  zp2
.18a1	85 fd		                sta  zpage2
.18a3	ad ee 18	                lda  zp2+1
.18a6	85 fe		                sta  zpage2+1
.18a8	68		                pla
.18a9	28		                plp
.18aa	60		                rts
.18ab			xy2addr
.18ab	08		                php
.18ac	48		                pha
.18ad	8a		                txa
.18ae	48		                pha
.18af	98		                tya
.18b0	48		                pha
.18b1	ad e6 18	                lda     addr1+1
.18b4	8d e8 18	                sta     addr2+1
.18b7	ad e5 18	                lda     addr1
.18ba	8d e7 18	                sta     addr2
.18bd	c0 00		                cpy     #$00
.18bf	f0 0f		                beq     addx
.18c1	18		moreline        clc
.18c2	6d e4 18	                adc     ymult
.18c5	90 03		                bcc     norepy
.18c7	ee e8 18	                inc     addr2+1
.18ca	8d e7 18	norepy          sta     addr2
.18cd	88		                dey
.18ce	d0 f1		                bne     moreline
.18d0	8a		addx            txa
.18d1	18		                clc
.18d2	6d e7 18	                adc     addr2
.18d5	90 03		                bcc     thatsit
.18d7	ee e8 18	                inc     addr2+1
.18da	8d e7 18	thatsit         sta     addr2
.18dd	68		                pla
.18de	a8		                tay
.18df	68		                pla
.18e0	aa		                tax
.18e1	68		                pla
.18e2	28		                plp
.18e3	60		                rts
>18e4	28		ymult          .byte     40
>18e5	00 00		addr1          .word     $0000
>18e7	00 00		addr2          .word     $0000
>18e9	00 00		bytecnt        .word     $0000
>18eb	00 00		zp1        .word   $0000
>18ed	00 00		zp2        .word   $0000

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>18ef	01		a2hexcol       .byte     1              ; pour aputscxy
>18f0	00		a2hexbkcol     .byte     %00000000
.18f1			a2hexpos
>18f1	00		a2hexpx        .byte     0              ; pour aputsxy
>18f2	00		a2hexpy        .byte     0
>18f3	24		a2hexprefix    .byte     "$"            ; pour aputs
>18f4	00 00		a2hexstr       .word     $00
>18f6	00 00		               .word     $00
>18f8	00		               .byte     0              ; 0 end string
>18f9	30 30 30 30	abin           .null     "00000000"
>18fd	30 30 30 30 00
>1902	20 20 20 00	adec           .null     "   "
.1906			putahexfmtxy
.1906	20 38 17	               jsr  push
.1909	20 55 19	               jsr  a2hex
.190c	ae f1 18	               ldx  a2hexpx
.190f	ac f2 18	               ldy  a2hexpy
.1912	20 ed 15	               jsr  gotoxy
.1915	a2 f3		               ldx  #<a2hexprefix
.1917	a0 18		               ldy  #>a2hexprefix
.1919	20 d6 15	               jsr  puts
.191c	20 77 17	               jsr  pop
.191f	60		               rts
.1920			putahexfmt
.1920	20 38 17	               jsr  push
.1923	20 55 19	               jsr  a2hex
.1926	a2 f3		               ldx  #<a2hexprefix
.1928	a0 18		               ldy  #>a2hexprefix
.192a	20 d6 15	               jsr  puts
.192d	20 77 17	               jsr  pop
.1930	60		               rts
.1931			putahex
.1931	20 38 17	               jsr  push
.1934	20 55 19	               jsr  a2hex
.1937	a2 f4		               ldx  #<a2hexstr
.1939	a0 18		               ldy  #>a2hexstr
.193b	20 d6 15	               jsr  puts
.193e	20 77 17	               jsr  pop
.1941	60		               rts
.1942			nib2hex
.1942	08		               php
.1943	29 0f		               and  #$0f
.1945	f8		               sed
.1946	18		               clc
.1947	69 90		               adc  #$90
.1949	69 40		               adc  #$40
.194b	d8		               cld
.194c	28		               plp
.194d	60		               rts
.194e			lsra4bits
.194e	08		               php
.194f	4a		               lsr
.1950	4a		               lsr
.1951	4a		               lsr
.1952	4a		               lsr
.1953	28		               plp
.1954	60		               rts
.1955			a2hex
.1955	08		               php
.1956	48		               pha
.1957	48		               pha
.1958	20 4e 19	               jsr  lsra4bits
.195b	20 42 19	               jsr  nib2hex
.195e	8d f4 18	               sta  a2hexstr
.1961	68		               pla
.1962	20 42 19	               jsr  nib2hex
.1965	8d f5 18	               sta  a2hexstr+1
.1968	a9 00		               lda  #$00                ; set end of string
.196a	8d f6 18	               sta  a2hexstr+2
.196d	68		               pla
.196e	28		               plp
.196f	60		               rts
.1970			xy2hex
.1970	20 38 17	               jsr  push
.1973	20 55 19	               jsr  a2hex
.1976	8a		               txa
.1977	48		               pha
.1978	20 4e 19	               jsr  lsra4bits
.197b	20 42 19	               jsr  nib2hex
.197e	8d f4 18	               sta  a2hexstr
.1981	68		               pla
.1982	20 42 19	               jsr  nib2hex
.1985	8d f5 18	               sta  a2hexstr+1
.1988	98		               tya
.1989	48		               pha
.198a	20 4e 19	               jsr  lsra4bits
.198d	20 42 19	               jsr  nib2hex
.1990	8d f6 18	               sta  a2hexstr+2
.1993	68		               pla
.1994	20 42 19	               jsr  nib2hex
.1997	8d f7 18	               sta  a2hexstr+3
.199a	a9 00		               lda  #$00                ; 0 ended string
.199c	8d f8 18	               sta  a2hexstr+4
.199f	20 77 17	               jsr  pop
.19a2			atobin
.19a2	20 38 17	               jsr  push
.19a5	a2 08		               ldx  #8
.19a7	a0 00		               ldy  #0
.19a9	18		               clc
.19aa	2a		nextbit        rol
.19ab	48		               pha
.19ac	69 00		               adc  #$00
.19ae	29 01		               and  #$01
.19b0	20 42 19	               jsr  nib2hex
.19b3	99 f9 18	               sta  abin,y
.19b6	68		               pla
.19b7	c8		               iny
.19b8	ca		               dex
.19b9	d0 ef		               bne  nextbit
.19bb	a9 00		               lda  #0
.19bd	99 f9 18	               sta  abin,y
.19c0	20 77 17	               jsr  pull
.19c3	60		               rts
.19c4			putabin
.19c4	20 a2 19	               jsr     atobin
.19c7	20 38 17	               jsr     push
.19ca	a2 f9		               ldx     #<abin
.19cc	a0 18		               ldy     #>abin
.19ce	20 d6 15	               jsr     puts
.19d1	20 77 17	               jsr     pop
.19d4	60		               rts
.19d5			printabin
.19d5	20 38 17	               jsr     push
.19d8	a2 f9		               ldx     #<abin
.19da	a0 18		               ldy     #>abin
.19dc	20 d6 15	               jsr     puts
.19df	20 77 17	               jsr     pop
.19e2	60		               rts
.19e3			putabinfmt
.19e3	08		               php
.19e4	48		               pha
.19e5	a9 25		               lda     #"%"
.19e7	20 d0 15	               jsr     putch
.19ea	68		               pla
.19eb	20 c4 19	               jsr     putabin
.19ee	28		               plp
.19ef	60		               rts
.19f0			putabinxy
.19f0	20 ed 15	               jsr     gotoxy
.19f3	20 c4 19	               jsr     putabin
.19f6	60		               rts
.19f7			putabinfmtxy
.19f7	20 ed 15	               jsr     gotoxy
.19fa	20 e3 19	               jsr     putabinfmt
.19fd	60		               rts
.19fe			atodec
.19fe	20 38 17	               jsr  push
.1a01	f8		               sed
.1a02	aa		               tax
.1a03	a0 00		               ldy  #$00
.1a05	a9 00		               lda  #$00
.1a07	18		nextbit        clc
.1a08	69 01		               adc  #$01
.1a0a	90 01		               bcc  decx
.1a0c	c8		               iny
.1a0d	ca		decx           dex
.1a0e	d0 f7		               bne  nextbit
.1a10	48		               pha
.1a11	98		               tya
.1a12	20 42 19	               jsr  nib2hex
.1a15	8d 02 19	               sta  adec
.1a18	68		               pla
.1a19	48		               pha
.1a1a	20 42 19	               jsr  nib2hex
.1a1d	8d 04 19	               sta  adec+2
.1a20	68		               pla
.1a21	6a		               ror
.1a22	6a		               ror
.1a23	6a		               ror
.1a24	6a		               ror
.1a25	20 42 19	               jsr  nib2hex
.1a28	8d 03 19	               sta  adec+1
.1a2b	d8		               cld
.1a2c	20 77 17	               jsr  pull
.1a2f	60		               rts
>1a30	00 00 00	buffer         .byte     0,0,0

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>1a33	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>1a37	00 00 00 00 00 00 00 00 00 0d 00 00
>1a43	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>1a47	00 00 00 00 00 00 00 00 00 00 00 00
>1a53	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>1a57	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1a63	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1a67	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1a73	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1a77	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>1a83	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1a87	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>1a93	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1a97	00 00 00 00 00 00 00 00 00 00 00 00
>1aa3	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1aa7	00 00 00 00 00 00 00 00 00 00 00 00
>1ab3	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1ab7	00 00 00 00 00 00 00 00 00 00 00 00
>1ac3	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1ac7	00 00 00 00 00 00 00 00 00 00 00 00
>1ad3	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>1ad7	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1ae3	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1ae7	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1af3	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1af7	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>1b03	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>1b07	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>1b13	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>1b17	00 00 00 00 00 00 00 00 00 00 00 00
>1b23	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>1b27	00 00 00 00 00 00 00 00 00 00 00 00
.1b33			waitstop
.1b33	20 38 17	               jsr  push
.1b36	20 ed f6	wait           jsr  k_stop
.1b39	d0 fb		               bne  wait
.1b3b	20 77 17	               jsr  pop
.1b3e	60		               rts
.1b3f			anykey
.1b3f	08		               php
.1b40	48		               pha
.1b41	a5 cb		nokey          lda 203
.1b43	c9 40		               cmp #64
.1b45	f0 fa		               beq nokey
.1b47	20 4d 1b	               jsr releasekey
.1b4a	68		               pla
.1b4b	28		               plp
.1b4c	60		               rts
.1b4d			releasekey
.1b4d	08		               php
.1b4e	48		               pha
.1b4f	a5 cb		keypressed     lda 203
.1b51	c9 40		               cmp #64
.1b53	d0 fa		               bne keypressed
.1b55	68		               pla
.1b56	28		               plp
.1b57	60		               rts
.1b58			getkey
.1b58	20 e4 ff	again          jsr  getin
.1b5b	c9 00		               cmp  #0
.1b5d	f0 f9		               beq  again
.1b5f	60		               rts
.1b60			waitkey
.1b60	20 38 17	               jsr  push
.1b63	8d b1 1b	               sta  thekey
.1b66	20 e4 ff	nope           jsr  getin
.1b69	20 d2 ff	               jsr  chrout
.1b6c	cd b1 1b	               cmp  thekey
.1b6f	d0 f5		               bne  nope
.1b71	20 d2 ff	               jsr  chrout
.1b74	20 77 17	               jsr  pop
.1b77	60		               rts
.1b78			waitspace
.1b78	20 38 17	               jsr  push
.1b7b	a9 7f		wait           lda  #$7f  ;%01111111
.1b7d	8d 00 dc	               sta  $dc00
.1b80	ad 01 dc	               lda  $dc01
.1b83	29 10		               and  #$10  ;mask %00010000
.1b85	d0 f4		               bne  wait
.1b87	20 77 17	               jsr  pop
.1b8a			waitsstop
.1b8a	20 38 17	               jsr  push
.1b8d	20 ed f6	wait           jsr  k_stop  ;%01111111
.1b90	d0 fb		               bne  wait
.1b92	20 77 17	               jsr  pop
.1b95			waitreturn
.1b95	20 38 17	               jsr  push
.1b98	ad b2 1b	               lda  thecount
.1b9b	8d 00 1e	               sta  scrnram
.1b9e	a9 02		               lda  #$02
.1ba0	8d 00 96	               sta  colorram
.1ba3	20 e4 ff	nope           jsr  getin
.1ba6	c9 0d		nohex          cmp  #$0d
.1ba8	d0 f9		               bne  nope
.1baa	ee b2 1b	               inc  thecount
.1bad	20 77 17	               jsr  pop
.1bb0	60		               rts
>1bb1	00		thekey         .byte   0
>1bb2	01		thecount       .byte   $01

;******  Return to file: template.asm


;******  End of listing

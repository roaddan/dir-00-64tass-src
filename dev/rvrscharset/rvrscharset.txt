
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L rvrscharset.txt -o rvrscharset.prg rvrscharset.asm
; Sat Jun 10 23:11:24 2023

;Offset	;Hex		;Source

;******  Processing input file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: rvrscharset.asm

.080d			main
.080d	20 00 0e	               jsr  push
.0810	a9 31		               lda  #$31
.0812	8d d7 0c	               sta  fname+10    ; File suffix = 1
.0815	a9 ff		               lda  #$ff        ; We reverse everythinh
.0817	8d 87 0c	               sta  xor
.081a	20 2d 0c	               jsr  rom2ram     ; Copy reversed charset to ram
.081d	a9 00		               lda  #$00        ; Set charcolor (Background) to black
.081f	8d 86 02	               sta  646
.0822	8d 20 d0	               sta  vicbordcol  ; set the border to black
.0825	a9 01		               lda  #$01        ; Background (character)
.0827	8d 21 d0	               sta  vicbackcol
.082a	a9 18		               lda  #%00011000     ;#24
.082c	8d 18 d0	               sta  $d018          ;53272
.082f	a9 93		               lda  #147
.0831	20 09 0d	               jsr  putch
.0834	a9 0e		               lda  #14
.0836	20 09 0d	               jsr  putch
.0839	20 00 0e	                jsr push
.083c	a2 00		                ldx  #0
.083e	a0 18		                ldy  #24
.0840	20 29 0d	                jsr  gotoxy
.0843	20 3f 0e	                jsr pop
.0846	a2 46		                ldx  #<mesg00a
.0848	a0 09		                ldy  #>mesg00a
.084a	20 0f 0d	                jsr  puts
.084d	a9 0d		                lda  #$0d
.084f	20 09 0d	                jsr  putch
.0852	a2 70		                ldx  #<mesg00b
.0854	a0 09		                ldy  #>mesg00b
.0856	20 0f 0d	                jsr  puts
.0859	a9 0d		                lda  #$0d
.085b	20 09 0d	                jsr  putch
.085e	a2 46		                ldx  #<mesg00a
.0860	a0 09		                ldy  #>mesg00a
.0862	20 0f 0d	                jsr  puts
.0865	a9 0d		                lda  #$0d
.0867	20 09 0d	                jsr  putch
.086a	a2 9a		                ldx  #<mesg01a
.086c	a0 09		                ldy  #>mesg01a
.086e	20 0f 0d	                jsr  puts
.0871	a9 0d		                lda  #$0d
.0873	20 09 0d	                jsr  putch
.0876	a2 c4		                ldx  #<mesg01b
.0878	a0 09		                ldy  #>mesg01b
.087a	20 0f 0d	                jsr  puts
.087d	a9 0d		                lda  #$0d
.087f	20 09 0d	                jsr  putch
.0882	a2 ee		                ldx  #<mesg02a
.0884	a0 09		                ldy  #>mesg02a
.0886	20 0f 0d	                jsr  puts
.0889	a9 0d		                lda  #$0d
.088b	20 09 0d	                jsr  putch
.088e	a2 18		                ldx  #<mesg02b
.0890	a0 0a		                ldy  #>mesg02b
.0892	20 0f 0d	                jsr  puts
.0895	a9 0d		                lda  #$0d
.0897	20 09 0d	                jsr  putch
.089a	a2 42		                ldx  #<mesg02c
.089c	a0 0a		                ldy  #>mesg02c
.089e	20 0f 0d	                jsr  puts
.08a1	a9 0d		                lda  #$0d
.08a3	20 09 0d	                jsr  putch
.08a6	a2 6c		                ldx  #<mesg03a
.08a8	a0 0a		                ldy  #>mesg03a
.08aa	20 0f 0d	                jsr  puts
.08ad	a9 0d		                lda  #$0d
.08af	20 09 0d	                jsr  putch
.08b2	a2 96		                ldx  #<mesg03b
.08b4	a0 0a		                ldy  #>mesg03b
.08b6	20 0f 0d	                jsr  puts
.08b9	a9 0d		                lda  #$0d
.08bb	20 09 0d	                jsr  putch
.08be	a2 c0		                ldx  #<mesg03c
.08c0	a0 0a		                ldy  #>mesg03c
.08c2	20 0f 0d	                jsr  puts
.08c5	a9 0d		                lda  #$0d
.08c7	20 09 0d	                jsr  putch
.08ca	a2 ea		                ldx  #<mesg04a
.08cc	a0 0a		                ldy  #>mesg04a
.08ce	20 0f 0d	                jsr  puts
.08d1	a2 ff		                ldx  #<mesg04b
.08d3	a0 0a		                ldy  #>mesg04b
.08d5	20 0f 0d	                jsr  puts
.08d8	a2 0d		                ldx  #<mesg04c
.08da	a0 0b		                ldy  #>mesg04c
.08dc	20 0f 0d	                jsr  puts
.08df	a9 0d		                lda  #$0d
.08e1	20 09 0d	                jsr  putch
.08e4	a2 23		                ldx  #<mesg04d
.08e6	a0 0b		                ldy  #>mesg04d
.08e8	20 0f 0d	                jsr  puts
.08eb	a9 0d		                lda  #$0d
.08ed	20 09 0d	                jsr  putch
.08f0	a2 4d		                ldx  #<mesg04e
.08f2	a0 0b		                ldy  #>mesg04e
.08f4	20 0f 0d	                jsr  puts
.08f7	a9 0d		                lda  #$0d
.08f9	20 09 0d	                jsr  putch
.08fc	a2 77		                ldx  #<mesg05a
.08fe	a0 0b		                ldy  #>mesg05a
.0900	20 0f 0d	                jsr  puts
.0903	a9 0d		                lda  #$0d
.0905	20 09 0d	                jsr  putch
.0908	a2 a1		                ldx  #<mesg05b
.090a	a0 0b		                ldy  #>mesg05b
.090c	20 0f 0d	                jsr  puts
.090f	a9 0d		                lda  #$0d
.0911	20 09 0d	                jsr  putch
.0914	a2 46		                ldx  #<mesg00a
.0916	a0 09		                ldy  #>mesg00a
.0918	20 0f 0d	                jsr  puts
.091b	20 00 0e	                jsr push
.091e	a2 00		                ldx  #0
.0920	a0 00		                ldy  #0
.0922	20 29 0d	                jsr  gotoxy
.0925	20 3f 0e	                jsr pop
.0928	a2 cb		                ldx  #<mesg06a
.092a	a0 0b		                ldy  #>mesg06a
.092c	20 0f 0d	                jsr  puts
.092f	a9 0d		                lda  #$0d
.0931	20 09 0d	                jsr  putch
.0934	a2 f5		                ldx  #<mesg06b
.0936	a0 0b		                ldy  #>mesg06b
.0938	20 0f 0d	                jsr  puts
.093b	a2 1f		                ldx  #<mesg06c
.093d	a0 0c		                ldy  #>mesg06c
.093f	20 0f 0d	                jsr  puts
.0942	20 3f 0e	               jsr  pop
.0945	60		               rts
>0946	9a 20 2d 2d	mesg00a        .null     b_ltblue, " ------------------------------------- ",b_black
>094a	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>095a	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>096a	2d 2d 2d 20 90 00
>0970	9a 20 20 20	mesg00b        .null     b_ltblue, "      Change made by this program.     ",b_black
>0974	20 20 20 c3 48 41 4e 47 45 20 4d 41 44 45 20 42
>0984	59 20 54 48 49 53 20 50 52 4f 47 52 41 4d 2e 20
>0994	20 20 20 20 90 00
>099a	1f 20 31 29	mesg01a        .null     b_blue,   " 1) Obviously the lowercase character  ",b_black
>099e	20 cf 42 56 49 4f 55 53 4c 59 20 54 48 45 20 4c
>09ae	4f 57 45 52 43 41 53 45 20 43 48 41 52 41 43 54
>09be	45 52 20 20 90 00
>09c4	1f 20 20 20	mesg01b        .null     b_blue,   "    set is now selected.               ",b_black
>09c8	20 53 45 54 20 49 53 20 4e 4f 57 20 53 45 4c 45
>09d8	43 54 45 44 2e 20 20 20 20 20 20 20 20 20 20 20
>09e8	20 20 20 20 90 00
>09ee	9c 20 32 29	mesg02a        .null     b_purple, " 2) The characterset has been modified ",b_black
>09f2	20 d4 48 45 20 43 48 41 52 41 43 54 45 52 53 45
>0a02	54 20 48 41 53 20 42 45 45 4e 20 4d 4f 44 49 46
>0a12	49 45 44 20 90 00
>0a18	9c 20 20 20	mesg02b        .null     b_purple, "    so that the reverse characters are ",b_black
>0a1c	20 53 4f 20 54 48 41 54 20 54 48 45 20 52 45 56
>0a2c	45 52 53 45 20 43 48 41 52 41 43 54 45 52 53 20
>0a3c	41 52 45 20 90 00
>0a42	9c 20 20 20	mesg02c        .null     b_purple, "    now displayed by default.          ",b_black
>0a46	20 4e 4f 57 20 44 49 53 50 4c 41 59 45 44 20 42
>0a56	59 20 44 45 46 41 55 4c 54 2e 20 20 20 20 20 20
>0a66	20 20 20 20 90 00
>0a6c	96 20 33 29	mesg03a        .null     b_ltred,  " 3) The background colour now selects  ",b_black
>0a70	20 d4 48 45 20 42 41 43 4b 47 52 4f 55 4e 44 20
>0a80	43 4f 4c 4f 55 52 20 4e 4f 57 20 53 45 4c 45 43
>0a90	54 53 20 20 90 00
>0a96	96 20 20 20	mesg03b        .null     b_ltred,  "    the character colour and vice-     ",b_black
>0a9a	20 54 48 45 20 43 48 41 52 41 43 54 45 52 20 43
>0aaa	4f 4c 4f 55 52 20 41 4e 44 20 56 49 43 45 2d 20
>0aba	20 20 20 20 90 00
>0ac0	96 20 20 20	mesg03c        .null     b_ltred,  "    versa.                             ",b_black
>0ac4	20 56 45 52 53 41 2e 20 20 20 20 20 20 20 20 20
>0ad4	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0ae4	20 20 20 20 90 00
>0aea	81 20 34 29	mesg04a        .null     b_orange, " 4) Pros: ",158,"i",28,"n",30,"d",31,"i",129
>0aee	20 d0 52 4f 53 3a 20 9e 49 1c 4e 1e 44 1f 49 81
>0afe	00
>0aff	81 56 90 49	mesg04b        .null     b_orange, "v",144,"i",149,"d",150,"u",151,"a",153,"l",155
>0b03	95 44 96 55 97 41 99 4c 9b 00
>0b0d	81 20 43 48	mesg04c        .null     b_orange, " character back-   ",b_black
>0b11	41 52 41 43 54 45 52 20 42 41 43 4b 2d 20 20 20
>0b21	90 00
>0b23	81 20 20 20	mesg04d        .null     b_orange, "    ground colour is now available as  ",b_black
>0b27	20 47 52 4f 55 4e 44 20 43 4f 4c 4f 55 52 20 49
>0b37	53 20 4e 4f 57 20 41 56 41 49 4c 41 42 4c 45 20
>0b47	41 53 20 20 90 00
>0b4d	81 20 20 20	mesg04e        .null     b_orange, "    normal text mode.                  ",b_black
>0b51	20 4e 4f 52 4d 41 4c 20 54 45 58 54 20 4d 4f 44
>0b61	45 2e 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0b71	20 20 20 20 90 00
>0b77	1c 20 35 29	mesg05a        .null     b_red,    " 5) Cons: Only one character colour at ",b_black
>0b7b	20 c3 4f 4e 53 3a 20 cf 4e 4c 59 20 4f 4e 45 20
>0b8b	43 48 41 52 41 43 54 45 52 20 43 4f 4c 4f 55 52
>0b9b	20 41 54 20 90 00
>0ba1	1c 20 20 20	mesg05b        .null     b_red,    "    the time per screen is available.  ",b_black
>0ba5	20 54 48 45 20 54 49 4d 45 20 50 45 52 20 53 43
>0bb5	52 45 45 4e 20 49 53 20 41 56 41 49 4c 41 42 4c
>0bc5	45 2e 20 20 90 00
>0bcb	90 c3 48 41	mesg06a        .null     b_black,  "Change character color with:           ",b_black
>0bcf	4e 47 45 20 43 48 41 52 41 43 54 45 52 20 43 4f
>0bdf	4c 4f 52 20 57 49 54 48 3a 20 20 20 20 20 20 20
>0bef	20 20 20 20 90 00
>0bf5	90 50 4f 4b	mesg06b        .null     b_black,  "poke 53281,13                          ",b_black
>0bf9	45 20 35 33 32 38 31 2c 31 33 20 20 20 20 20 20
>0c09	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0c19	20 20 20 20 90 00
>0c1f	91 1d 1d 1d	mesg06c        .null     b_crsr_up,b_crsr_right,b_crsr_right,b_crsr_right,b_crsr_right,b_crsr_right,b_crsr_right,b_crsr_right,b_crsr_right,b_crsr_right,b_crsr_right,b_crsr_right,b_crsr_right
>0c23	1d 1d 1d 1d 1d 1d 1d 1d 1d 00
.0c2d			rom2ram
.0c2d	20 00 0e	               jsr  push
.0c30	ad 0e dc	               lda  $dc0e          ;56334
.0c33	29 fe		               and  #%11111110     ;$fe ou 254
.0c35	8d 0e dc	               sta  $dc0e          ;56334
.0c38	a5 01		               lda  $01
.0c3a	29 fb		               and  #%11111011     ;$fb ou 251
.0c3c	85 01		               sta  $01
.0c3e	ad 83 0c	               lda  chrom_s
.0c41	85 fb		               sta  zpage1
.0c43	ad 84 0c	               lda  chrom_s+1
.0c46	85 fc		               sta  zpage1+1
.0c48	ad 85 0c	               lda  chram_s
.0c4b	85 fd		               sta  zpage2
.0c4d	ad 86 0c	               lda  chram_s+1
.0c50	85 fe		               sta  zpage2+1
.0c52	a2 10		               ldx  #$10           ; copie 8 page de 256 char.
.0c54	a0 00		               ldy  #$00
.0c56	78		               sei
.0c57	ad 87 0c	               lda  xor
.0c5a	8d 60 0c	               sta  skip+1
.0c5d	b1 fb		nexty          lda  (zpage1),y
.0c5f	49 00		skip           eor  #%00000000
.0c61	91 fd		save           sta  (zpage2),y
.0c63	c8		               iny
.0c64	d0 f7		               bne  nexty
.0c66	ca		               dex
.0c67	f0 07		               beq  out
.0c69	e6 fc		               inc  zpage1+1
.0c6b	e6 fe		               inc  zpage2+1
.0c6d	4c 5d 0c	               jmp  nexty
.0c70			out
.0c70	58		               cli
.0c71	a5 01		               lda  $01
.0c73	09 04		               ora  #%00000100     ;#$04
.0c75	85 01		               sta  $01
.0c77	ad 0e dc	               lda  $dc0e          ;56334
.0c7a	09 01		               ora  #%00000001     ;$01
.0c7c	8d 0e dc	               sta  $dc0e          ;56334
.0c7f	20 3f 0e	               jsr  pop
.0c82	60		               rts
>0c83	00 d0		chrom_s        .word     $d000     ;$d000 a $d800 53284
>0c85	00 20		chram_s        .word     $2000     ;$2000 a $2800 8192
>0c87	00		xor            .byte     $00
.0c88			savetodisk
.0c88	20 00 0e	               jsr  push
.0c8b	a9 00		               lda  #$00
.0c8d	8d dd 11	               sta  dsk_data_s
.0c90	a9 20		               lda  #$20
.0c92	8d de 11	               sta  dsk_data_s+1
.0c95	a9 00		               lda  #$00
.0c97	8d df 11	               sta  dsk_data_e
.0c9a	a9 30		               lda  #$30
.0c9c	8d e0 11	               sta  dsk_data_e+1
.0c9f	a9 08		               lda  #$08
.0ca1	8d e1 11	               sta  dsk_dev
.0ca4	a9 00		               lda  #$00
.0ca6	8d e2 11	               sta  dsk_lfsno
.0ca9	a9 cd		               lda  #<fname
.0cab	8d e3 11	               sta  dsk_fnptr
.0cae	a9 0c		               lda  #>fname
.0cb0	8d e4 11	               sta  dsk_fnptr+1
.0cb3	a9 0b		               lda  #fname_end-fname
.0cb5	8d e5 11	               sta  dsk_fnlen
.0cb8	20 4a 11	               jsr  memtofile
.0cbb	a9 0d		               lda  #$0d
.0cbd	20 09 0d	               jsr  putch
.0cc0	20 b0 10	               jsr  diskerror
.0cc3	20 d3 10	               jsr  diskdir
.0cc6	20 82 11	               jsr  filetomem
.0cc9	20 3f 0e	               jsr  pop
.0ccc	60		               rts
>0ccd	40		fname          .byte 64
>0cce	30 3a 43 48	               .text "0:charset0"
>0cd2	41 52 53 45 54 30
>0cd8	00		fname_end      .byte 0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ;  97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c1			stal            =       $c1     ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.0cd9			libtart

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0cd9			scrmaninit
.0cd9	20 00 0e	               jsr  push
.0cdc	a9 06		               lda  #vbleu
.0cde	8d 21 d0	               sta  vicbackcol
.0ce1	a9 05		               lda  #vvert
.0ce3	8d 20 d0	               sta  vicbordcol
.0ce6	a9 01		               lda  #vblanc
.0ce8	8d 86 02	               sta  bascol
.0ceb	ad 00 04	               lda  scrnram
.0cee	29 fd		               and  #%11111101
.0cf0	8d 00 04	               sta  scrnram
.0cf3	20 fa 0c	               jsr  cls
.0cf6	20 3f 0e	               jsr  pop
.0cf9	60		               rts
.0cfa			cls
.0cfa	08		               php
.0cfb	48		               pha
.0cfc	a9 93		               lda  #$93
.0cfe	20 09 0d	               jsr  putch
.0d01	a9 0e		               lda  #$0e
.0d03	20 09 0d	               jsr  putch
.0d06	68		               pla
.0d07	28		               plp
.0d08	60		               rts
.0d09			putch
.0d09	08		               php
.0d0a	20 d2 ff	               jsr  $ffd2
.0d0d	28		               plp
.0d0e	60		               rts
.0d0f			puts
.0d0f	20 00 0e	               jsr  push
.0d12	86 fb		               stx  zpage1
.0d14	84 fc		               sty  zpage1+1
.0d16	a0 00		               ldy  #0
.0d18	b1 fb		next           lda  (zpage1),y
.0d1a	f0 09		               beq  exit
.0d1c	20 09 0d	               jsr  putch
.0d1f	20 07 0f	               jsr  inczp1
.0d22	4c 18 0d	               jmp  next
.0d25	20 3f 0e	exit           jsr  pop
.0d28	60		               rts
.0d29			gotoxy
.0d29	08		               php
.0d2a	18		               clc
.0d2b	8a		               txa
.0d2c	48		               pha
.0d2d	98		               tya
.0d2e	aa		               tax
.0d2f	68		               pla
.0d30	a8		               tay
.0d31	20 f0 ff	               jsr  kplot
.0d34	28		               plp
.0d35	60		               rts
.0d36			cursor
=$0286			bascol    =    $0286
.0d36	08		               php
.0d37	48		               pha
.0d38	90 12		               bcc  restore
.0d3a	20 f0 ff	               jsr  kplot
.0d3d	8c 5e 0d	               sty  cx
.0d40	8e 5f 0d	               stx  cy
.0d43	ad 86 02	               lda  bascol
.0d46	8d 60 0d	               sta  bcol
.0d49	4c 5b 0d	               jmp  out
.0d4c	ae 5f 0d	restore        ldx  cy
.0d4f	ac 5e 0d	               ldy  cx
.0d52	20 f0 ff	               jsr  kplot
.0d55	ad 60 0d	               lda  bcol
.0d58	8d 86 02	               sta  bascol
.0d5b	68		out            pla
.0d5c	28		               plp
.0d5d	60		               rts
>0d5e	00		cx   .byte     $00
>0d5f	00		cy   .byte     $00
>0d60	00		bcol .byte     $00
.0d61			cursave
.0d61	08		               php
.0d62	38		               sec
.0d63	20 36 0d	               jsr  cursor
.0d66	28		               plp
.0d67	60		               rts
.0d68			curput
.0d68	08		               php
.0d69	18		               clc
.0d6a	20 36 0d	               jsr  cursor
.0d6d	28		               plp
.0d6e	60		               rts
.0d6f			putsxy
.0d6f	20 00 0e	               jsr  push
.0d72	86 fb		               stx  zpage1
.0d74	84 fc		               sty  zpage1+1
.0d76	a0 00		               ldy  #$00
.0d78	b1 fb		               lda  (zpage1),y
.0d7a	aa		               tax
.0d7b	20 07 0f	               jsr  inczp1
.0d7e	b1 fb		               lda  (zpage1),y
.0d80	a8		               tay
.0d81	20 29 0d	               jsr  gotoxy
.0d84	20 07 0f	               jsr  inczp1
.0d87	a6 fb		               ldx  zpage1
.0d89	a4 fc		               ldy  zpage1+1
.0d8b	20 0f 0d	               jsr  puts
.0d8e	20 3f 0e	               jsr  pop
.0d91	60		               rts
>0d92	00 00		straddr   .word     $00
>0d94	00		px        .byte     $00
>0d95	00		py        .byte     $00
>0d96	00 00		zp1       .word     $00
.0d98			putscxy
.0d98	20 00 0e	               jsr  push
.0d9b	84 fc		               sty  zpage1+1
.0d9d	86 fb		               stx  zpage1
.0d9f	ad 86 02	               lda  bascol
.0da2	8d c2 0d	               sta  bc
.0da5	a0 00		               ldy #$00
.0da7	b1 fb		               lda  (zpage1),y
.0da9	8d 86 02	               sta  bascol
.0dac	20 07 0f	               jsr  inczp1
.0daf	a6 fb		               ldx  zpage1
.0db1	a4 fc		               ldy  zpage1+1
.0db3	20 6f 0d	               jsr  putsxy
.0db6	ad c2 0d	               lda  bc
.0db9	8d 86 02	               sta  bascol
.0dbc	20 3f 0e	               jsr  pop
.0dbf	60		               rts
>0dc0	00 00		straddr  .word      $00
>0dc2	00		bc       .byte      $00
>0dc3	00 00		zp1      .word      $00
.0dc5			putrahex
.0dc5	08		               php
.0dc6	48		               pha
.0dc7	20 0d 10	               jsr  a2hex
.0dca	a9 b9		               lda  #<a2hexstr
.0dcc	a0 0f		               ldy  #>a2hexstr
.0dce	20 0f 0d	               jsr  puts
.0dd1	68		               pla
.0dd2	28		               plp
.0dd3	60		               rts
.0dd4			kputrahexxy
.0dd4			bputrahexxy
.0dd4			putrahexxy
.0dd4	08		               php
.0dd5	20 0d 10	               jsr  a2hex
.0dd8	a9 b6		               lda  #<a2hexpos
.0dda	a0 0f		               ldy  #>a2hexpos
.0ddc	20 6f 0d	               jsr  putsxy
.0ddf	68		               pla
.0de0	28		               plp
.0de1	60		               rts
.0de2			putrahexcxy
.0de2	08		               php
.0de3	20 0d 10	               jsr  a2hex
.0de6	a9 b6		               lda  #<a2hexpos
.0de8	a0 0f		               ldy  #>a2hexpos
.0dea	20 98 0d	               jsr  putscxy
.0ded	68		               pla
.0dee	28		               plp
.0def	60		               rts
.0df0			setinverse
.0df0	48		               pha
.0df1	a9 12		               lda  #$12
.0df3	20 d2 ff	               jsr  $ffd2
.0df6	68		               pla
.0df7	60		               rts
.0df8			clrinverse
.0df8	48		               pha
.0df9	a9 92		               lda  #$92
.0dfb	20 d2 ff	               jsr  $ffd2
.0dfe	68		               pla
.0dff	60		               rts

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.0e00			push
.0e00	08		          php            ; stack : flg, pcl, pch
.0e01	78		          sei
.0e02	8d 3c 0e	          sta  ra        ; save a
.0e05	68		          pla            ; stack : pcl, pch
.0e06	8d 3b 0e	          sta  rp        ; save rp
.0e09	68		          pla            ; stack : pch
.0e0a	8d 3d 0e	          sta  pc        ; save pcl
.0e0d	68		          pla            ; stack : -
.0e0e	8d 3e 0e	          sta  pc+1      ; save pch
.0e11	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0e13	48		          pha            ; stack : zp1l
.0e14	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0e16	48		          pha            ; stack : zp1h, zp1l
.0e17	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0e19	48		          pha            ; stack : zp2l, zp1h, zp1l
.0e1a	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0e1c	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0e1d	ad 3b 0e	          lda  rp        ; get rp
.0e20	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0e21	ad 3c 0e	          lda  ra        ; get a
.0e24	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0e25	8a		          txa            ; get x
.0e26	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e27	98		          tya            ; get y
.0e28	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e29	ad 3e 0e	          lda  pc+1      ; get pch
.0e2c	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e2d	ad 3d 0e	          lda  pc        ; get pcl
.0e30	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e31	ad 3b 0e	          lda  rp        ; get rp
.0e34	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e35	ad 3c 0e	          lda  ra        ; get a
.0e38	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e39	58		          cli
.0e3a	60		          rts
>0e3b	00		rp        .byte     0
>0e3c	00		ra        .byte     0
>0e3d	00 00		pc        .word     0
.0e3f			pull
.0e3f			pop
.0e3f	78		          sei
.0e40	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e41	8d 74 0e	          sta  pc        ; save pcl
.0e44	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e45	8d 75 0e	          sta  pc+1      ; save pch
.0e48	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e49	a8		          tay            ; set y
.0e4a	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0e4b	aa		          tax            ; set x
.0e4c	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0e4d	8d 73 0e	          sta  ra        ; save a
.0e50	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0e51	8d 72 0e	          sta  rp        ; save rp
.0e54	68		          pla            ; stack : zp2l, zp1h, zp1l
.0e55	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0e57	68		          pla            ; stack : zp1h, zp1l
.0e58	85 fd		          sta  zpage2    ; get zpage2 High byte
.0e5a	68		          pla            ; stack : zp1l
.0e5b	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0e5d	68		          pla            ; stack :
.0e5e	85 fb		          sta  zpage1    ; get zpage1 High byte
.0e60	ad 75 0e	          lda  pc+1      ; get pch
.0e63	48		          pha            ; stack : pch
.0e64	ad 74 0e	          lda  pc
.0e67	48		          pha            ; stack : pcl, pch
.0e68	ad 72 0e	          lda  rp        ; get rp
.0e6b	48		          pha            ; stack : rp, pcl, pch
.0e6c	ad 73 0e	          lda  ra        ; set ra
.0e6f	58		          cli
.0e70	28		          plp            ; stack : pcl, pch
.0e71	60		          rts
>0e72	00		rp        .byte     0
>0e73	00		ra        .byte     0
>0e74	00 00		pc        .word     0

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.0e76			blkfill
.0e76	20 00 0e	bf0            jsr  push
.0e79	20 34 0f	               jsr  savezp1
.0e7c	84 fc		               sty  zpage1+1
.0e7e	a0 00		               ldy  #$00
.0e80	84 fb		               sty  zpage1
.0e82	91 fb		bf1            sta  (zpage1),y
.0e84	c8		               iny
.0e85	d0 fb		               bne  bf1
.0e87	20 43 0f	               jsr  restzp1
.0e8a	20 3f 0e	               jsr  pop
.0e8d	60		               rts
.0e8e			memfill
.0e8e	20 00 0e	               jsr  push
.0e91	20 76 0e	mf1            jsr  blkfill
.0e94	c8		               iny
.0e95	ca		               dex
.0e96	d0 f9		               bne  mf1
.0e98	20 3f 0e	               jsr  pop
.0e9b	60		               rts
.0e9c			memmove
.0e9c	20 00 0e	               jsr  push
.0e9f	ba		               tsx            ; On se crée un pointeur ...
.0ea0	8a		               txa
.0ea1	18		               clc
.0ea2	69 0b		               adc  #11
.0ea4	a8		               tay
.0ea5	a2 06		               ldx  #$06
.0ea7	b9 00 01	nextbyte       lda  $0100,y
.0eaa	99 f6 0e	               sta  words,y
.0ead	c8		               iny
.0eae	ca		               dex
.0eaf	d0 f6		               bne  nextbyte
.0eb1	ad f6 0e	               lda  s
.0eb4	8d cd 0e	               sta  source+1
.0eb7	ad f7 0e	               lda  s+1
.0eba	8d ce 0e	               sta  source+2
.0ebd	ad f8 0e	               lda  d
.0ec0	8d ca 0e	               sta  destin+1
.0ec3	ad f9 0e	               lda  d+1
.0ec6	8d cb 0e	               sta  destin+2
.0ec9	ad ff ff	destin         lda  $ffff
.0ecc	8d ff ff	source         sta  $ffff
.0ecf	ee ca 0e	               inc  destin+1
.0ed2	d0 03		               bne  src
.0ed4	ee cb 0e	               inc  destin+2
.0ed7	ee cd 0e	src            inc  source+1
.0eda	d0 03		               bne  cnt
.0edc	ee ce 0e	               inc  source+2
.0edf	ad fa 0e	cnt            lda  compte
.0ee2	d0 08		               bne  decit
.0ee4	ad fb 0e	               lda  compte+1
.0ee7	f0 09		               beq  fini
.0ee9	ce fb 0e	               dec  compte+1
.0eec	ce fa 0e	decit          dec  compte
.0eef	4c c9 0e	               jmp  destin
.0ef2	20 3f 0e	fini           jsr  pop
.0ef5	60		               rts
.0ef6			words
>0ef6	00 00		s         .word     $0000
>0ef8	00 00		d         .word     $0000
>0efa	00 00		compte    .word     $0000
.0efc			decword
.0efc	20 00 0e	               jsr  push
.0eff	86 fd		               stx  zpage2
.0f01	84 fe		               sty  zpage2+1
.0f03	20 3f 0e	               jsr  pop
.0f06	60		               rts
.0f07			inczp1
.0f07	08		               php
.0f08	e6 fb		               inc  zpage1
.0f0a	d0 02		               bne  nopage
.0f0c	e6 fc		               inc  zpage1+1
.0f0e	28		nopage         plp
.0f0f	60		               rts
.0f10			deczp1
.0f10	08		                php
.0f11	48		                pha
.0f12	c6 fb		                dec  zpage1
.0f14	d0 02		                bne  nopage
.0f16	c6 fc		                dec  zpage1+1
.0f18	c6 fb		nopage          dec  zpage1
.0f1a	68		                pla
.0f1b	28		                plp
.0f1c	60		                rts
.0f1d			inczp2
.0f1d	08		               php
.0f1e	48		               pha
.0f1f	e6 fd		               inc  zpage2
.0f21	d0 02		               bne  nopage
.0f23	e6 fe		               inc  zpage2+1
.0f25	68		nopage         pla
.0f26	28		               plp
.0f27	60		               rts
.0f28			deczp2
.0f28	08		               php
.0f29	48		               pha
.0f2a	a5 fd		               lda  zpage2
.0f2c	d0 02		               bne  nopage
.0f2e	c6 fe		               dec  zpage2+1
.0f30	c6 fd		nopage         dec  zpage2
.0f32	28		               plp
.0f33	60		               rts
.0f34			savezp1
.0f34	08		               php
.0f35	48		               pha
.0f36	a5 fb		               lda  zpage1
.0f38	8d b0 0f	               sta  zp1
.0f3b	a5 fc		               lda  zpage1+1
.0f3d	8d b1 0f	               sta  zp1+1
.0f40	68		               pla
.0f41	28		               plp
.0f42	60		               rts
.0f43			restzp1
.0f43	08		               php
.0f44	48		               pha
.0f45	ad b0 0f	               lda zp1
.0f48	85 fb		               sta zpage1
.0f4a	ad b1 0f	               lda zp1+1
.0f4d	85 fc		               sta zpage1+1
.0f4f	68		               pla
.0f50	28		               plp
.0f51	60		               rts
.0f52			savezp2
.0f52	08		         php
.0f53	48		         pha
.0f54	a5 fd		         lda zpage2
.0f56	8d b2 0f	         sta zp2
.0f59	a5 fe		         lda zpage2+1
.0f5b	8d b3 0f	         sta zp2+1
.0f5e	68		         pla
.0f5f	28		         plp
.0f60	60		         rts
.0f61			restzp2
.0f61	08		                php
.0f62	48		                pha
.0f63	ad b2 0f	                lda  zp2
.0f66	85 fd		                sta  zpage2
.0f68	ad b3 0f	                lda  zp2+1
.0f6b	85 fe		                sta  zpage2+1
.0f6d	68		                pla
.0f6e	28		                plp
.0f6f	60		                rts
.0f70			xy2addr
.0f70	08		                php
.0f71	48		                pha
.0f72	8a		                txa
.0f73	48		                pha
.0f74	98		                tya
.0f75	48		                pha
.0f76	ad ab 0f	                lda     addr1+1
.0f79	8d ad 0f	                sta     addr2+1
.0f7c	ad aa 0f	                lda     addr1
.0f7f	8d ac 0f	                sta     addr2
.0f82	c0 00		                cpy     #$00
.0f84	f0 0f		                beq     addx
.0f86	18		moreline        clc
.0f87	6d a9 0f	                adc     ymult
.0f8a	90 03		                bcc     norepy
.0f8c	ee ad 0f	                inc     addr2+1
.0f8f	8d ac 0f	norepy          sta     addr2
.0f92	88		                dey
.0f93	d0 f1		                bne     moreline
.0f95	8a		addx            txa
.0f96	18		                clc
.0f97	6d ac 0f	                adc     addr2
.0f9a	90 03		                bcc     thatsit
.0f9c	ee ad 0f	                inc     addr2+1
.0f9f	8d ac 0f	thatsit         sta     addr2
.0fa2	68		                pla
.0fa3	a8		                tay
.0fa4	68		                pla
.0fa5	aa		                tax
.0fa6	68		                pla
.0fa7	28		                plp
.0fa8	60		                rts
>0fa9	28		ymult          .byte     40
>0faa	00 00		addr1          .word     $0000
>0fac	00 00		addr2          .word     $0000
>0fae	00 00		bytecnt        .word     $0000
>0fb0	00 00		zp1        .word   $0000
>0fb2	00 00		zp2        .word   $0000

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>0fb4	01		a2hexcol       .byte     1              ; pour aputscxy
>0fb5	00		a2hexbkcol     .byte     %00000000
.0fb6			a2hexpos
>0fb6	00		a2hexpx        .byte     0              ; pour aputsxy
>0fb7	00		a2hexpy        .byte     0
>0fb8	24		a2hexprefix    .byte     "$"            ; pour aputs
>0fb9	00 00		a2hexstr       .word     $00
>0fbb	00 00		               .word     $00
>0fbd	00		               .byte     0              ; 0 end string
.0fbe			putahexfmtxy
.0fbe	20 00 0e	               jsr  push
.0fc1	20 0d 10	               jsr  a2hex
.0fc4	ae b6 0f	               ldx  a2hexpx
.0fc7	ac b7 0f	               ldy  a2hexpy
.0fca	20 29 0d	               jsr  gotoxy
.0fcd	a2 b8		               ldx  #<a2hexprefix
.0fcf	a0 0f		               ldy  #>a2hexprefix
.0fd1	20 0f 0d	               jsr  puts
.0fd4	20 3f 0e	               jsr  pop
.0fd7	60		               rts
.0fd8			putahexfmt
.0fd8	20 00 0e	               jsr  push
.0fdb	20 0d 10	               jsr  a2hex
.0fde	a2 b8		               ldx  #<a2hexprefix
.0fe0	a0 0f		               ldy  #>a2hexprefix
.0fe2	20 0f 0d	               jsr  puts
.0fe5	20 3f 0e	               jsr  pop
.0fe8	60		               rts
.0fe9			putahex
.0fe9	20 00 0e	               jsr  push
.0fec	20 0d 10	               jsr  a2hex
.0fef	a2 b9		               ldx  #<a2hexstr
.0ff1	a0 0f		               ldy  #>a2hexstr
.0ff3	20 0f 0d	               jsr  puts
.0ff6	20 3f 0e	               jsr  pop
.0ff9	60		               rts
.0ffa			nib2hex
.0ffa	08		               php
.0ffb	29 0f		               and  #$0f
.0ffd	f8		               sed
.0ffe	18		               clc
.0fff	69 90		               adc  #$90
.1001	69 40		               adc  #$40
.1003	d8		               cld
.1004	28		               plp
.1005	60		               rts
.1006			lsra4bits
.1006	08		               php
.1007	4a		               lsr
.1008	4a		               lsr
.1009	4a		               lsr
.100a	4a		               lsr
.100b	28		               plp
.100c	60		               rts
.100d			a2hex
.100d	08		               php
.100e	48		               pha
.100f	48		               pha
.1010	20 06 10	               jsr  lsra4bits
.1013	20 fa 0f	               jsr  nib2hex
.1016	8d b9 0f	               sta  a2hexstr
.1019	68		               pla
.101a	20 fa 0f	               jsr  nib2hex
.101d	8d ba 0f	               sta  a2hexstr+1
.1020	a9 00		               lda  #$00                ; set end of string
.1022	8d bb 0f	               sta  a2hexstr+2
.1025	68		               pla
.1026	28		               plp
.1027	60		               rts
.1028			xy2hex
.1028	20 00 0e	               jsr  push
.102b	20 0d 10	               jsr  a2hex
.102e	8a		               txa
.102f	48		               pha
.1030	20 06 10	               jsr  lsra4bits
.1033	20 fa 0f	               jsr  nib2hex
.1036	8d b9 0f	               sta  a2hexstr
.1039	68		               pla
.103a	20 fa 0f	               jsr  nib2hex
.103d	8d ba 0f	               sta  a2hexstr+1
.1040	98		               tya
.1041	48		               pha
.1042	20 06 10	               jsr  lsra4bits
.1045	20 fa 0f	               jsr  nib2hex
.1048	8d bb 0f	               sta  a2hexstr+2
.104b	68		               pla
.104c	20 fa 0f	               jsr  nib2hex
.104f	8d bc 0f	               sta  a2hexstr+3
.1052	a9 00		               lda  #$00                ; 0 ended string
.1054	8d bd 0f	               sta  a2hexstr+4
.1057	20 3f 0e	               jsr  pop
.105a			atobin
.105a	20 00 0e	               jsr     push
.105d	a2 08		               ldx     #8
.105f	a0 00		               ldy     #0
.1061	2a		nextbit        rol
.1062	48		               pha
.1063	69 00		               adc     #$00
.1065	29 01		               and     #$01
.1067	20 fa 0f	               jsr     nib2hex
.106a	99 7b 10	               sta     abin,y
.106d	68		               pla
.106e	c8		               iny
.106f	ca		               dex
.1070	d0 ef		               bne     nextbit
.1072	a9 00		               lda     #0
.1074	99 7b 10	               sta     abin,y
.1077	20 3f 0e	               jsr     pull
.107a	60		               rts
>107b	30 30 30 30	abin           .null   "00000000"
>107f	30 30 30 30 00
.1084			putabin
.1084	20 5a 10	               jsr     atobin
.1087	20 00 0e	               jsr     push
.108a	a2 7b		               ldx     #<abin
.108c	a0 10		               ldy     #>abin
.108e	20 0f 0d	               jsr     puts
.1091	20 3f 0e	               jsr     pop
.1094	60		               rts
.1095			putabinfmt
.1095	08		               php
.1096	48		               pha
.1097	a9 25		               lda     #"%"
.1099	20 09 0d	               jsr     putch
.109c	68		               pla
.109d	20 84 10	               jsr     putabin
.10a0	28		               plp
.10a1	60		               rts
.10a2			putabinxy
.10a2	20 29 0d	               jsr     gotoxy
.10a5	20 84 10	               jsr     putabin
.10a8	60		               rts
.10a9			putabinfmtxy
.10a9	20 29 0d	               jsr     gotoxy
.10ac	20 95 10	               jsr     putabinfmt
.10af	60		               rts

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-disk.asm

.10b0			diskerror
.10b0	20 00 0e	               jsr  push
.10b3	ad e1 11	               lda  dsk_dev   ; Select device 8
.10b6	85 ba		               sta  $ba       ;
.10b8	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.10bb	a9 6f		               lda  #$6f
.10bd	85 b9		               sta  $b9       ;
.10bf	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.10c2	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.10c5	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.10c8	c9 0d		               cmp  #$0d      ; Is it CR ?
.10ca	d0 f6		               bne  nextchar  ; No, get next char
.10cc	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.10cf	20 3f 0e	               jsr  pop
.10d2	60		               rts
.10d3			diskdir
.10d3	20 00 0e	               jsr  push
.10d6	a9 24		               lda  #$24      ; L012C - Filename is "$"
.10d8	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.10da	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.10dc	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.10de	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.10e0	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.10e2	a9 01		               lda  #$01      ; L0138 - set ...
.10e4	85 b7		               sta  $b7       ; L013A - ... length of current filename
.10e6	ad e1 11	               lda  dsk_dev   ; L013C - set 8 as ...
.10e9	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.10eb	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.10ed	85 b9		               sta  $b9       ; L0142 - ... secondary address
.10ef	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.10f2	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...%10111010
.10f4	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.10f7	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.10f9	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.10fc	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.10fe	85 90		               sta  $90       ; L0153 - ... kernal status word.
.1100	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.1102	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.1104	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.1107	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.1109	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.110b	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.110d	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.1110	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.1112	d0 28		               bne  exit      ; L0167
.1114	a4 fb		               ldy  $fb       ; L0169
.1116	88		               dey            ; L016b
.1117	d0 e9		               bne  loop1     ; L016C - If not last, loop
.1119	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.111b	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.111e	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.1120	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.1123	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.1126	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.1128	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.112a	aa		               tax            ; L017F - tfr a in x
.112b	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.112d	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.1130	4c 23 11	               jmp  loop3     ; L0185 - get another byte
.1133	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.1135	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.1138	a0 02		               ldy  #$02      ; L018D - set Y to 2
.113a	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.113c	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.113f	20 3f 0e	               jsr  pop
.1142	60		               rts            ; L0194
.1143			directory
.1143	20 d3 10	               jsr  diskdir
.1146	20 b0 10	               jsr  diskerror
.1149	60		               rts
.114a			memtofile
.114a	20 bb 11	               jsr  dsk_putmesg
.114d	20 00 0e	               jsr  push
.1150	ad e5 11	               lda  dsk_fnlen
.1153	ae e3 11	               ldx  dsk_fnptr      ; load fname addr. lbyte
.1156	ac e4 11	               ldy  dsk_fnptr+1
.1159	20 bd ff	               jsr  setnam         ; call setnam
.115c	ad e2 11	               lda  dsk_lfsno
.115f	ae e1 11	               ldx  dsk_dev        ; specified device
.1162	a0 00		skip           ldy  #$00
.1164	20 ba ff	               jsr  setlfs         ; call setlfs
.1167	ad dd 11	               lda  dsk_data_s     ; put data start lbyte in stal
.116a	85 c1		               sta  stal
.116c	ad de 11	               lda  dsk_data_s+1   ; put data start hbyte in stal
.116f	85 c2		               sta  stal+1
.1171	ae df 11	               ldx  dsk_data_e     ; put data end lbyte in x
.1174	ac e0 11	               ldy  dsk_data_e+1   ; put data end hbyte in y
.1177	a9 c1		               lda  #stal          ; start address located in $c1/$c2
.1179	20 d8 ff	               jsr  save           ; call save
.117c	90 00		               bcc  noerror        ; if carry set, a load error has happened
.117e	20 3f 0e	noerror        jsr  pop
.1181	60		               rts
.1182			filetomem
.1182	20 00 0e	               jsr push
.1185	ad e5 11	               lda dsk_fnlen
.1188	ae e3 11	               ldx dsk_fnptr
.118b	ac e4 11	               ldy dsk_fnptr+1
.118e	20 bd ff	               jsr setnam     ; call setnam
.1191	ad e2 11	               lda dsk_lfsno
.1194	ae e1 11	               ldx dsk_dev    ; default to device 8
.1197	a0 01		               ldy #$01       ; not $01 means: load to address stored in file
.1199	20 ba ff	               jsr setlfs     ; call setlfs
.119c	a9 00		               lda #$00       ; $00 means: load to memory (not verify)
.119e	20 d5 ff	               jsr load       ; call load
.11a1	90 03		               bcc noerror      ; if carry set, a load error has happened
.11a3	20 aa 11	               jsr  error
.11a6	20 3f 0e	noerror        jsr pop
.11a9	60		               rts
.11aa			error
.11aa	60		               rts
.11ab	a2 f6		error1         ldx  #<dsk_emsg1
.11ad	a0 11		               ldy  #>dsk_emsg1
.11af	20 0f 0d	               jsr  puts
.11b2	60		               rts
.11b3	a2 0a		error2         ldx #<dsk_emsg2
.11b5	a0 12		               ldy #>dsk_emsg2
.11b7	20 0f 0d	               jsr puts
.11ba	60		               rts
.11bb			dsk_putmesg
.11bb	20 00 0e	               jsr push
.11be	a2 e6		               ldx #<dsk_msg0
.11c0	a0 11		               ldy #>dsk_msg0
.11c2	20 0f 0d	               jsr puts
.11c5	a9 20		               lda #$20
.11c7	20 09 0d	               jsr putch
.11ca	ae e3 11	               ldx dsk_fnptr
.11cd	ac e4 11	               ldy dsk_fnptr+1
.11d0	20 0f 0d	               jsr puts
.11d3	ad e2 11	               lda dsk_lfsno
.11d6	20 c3 ff	               jsr close
.11d9	20 3f 0e	               jsr pop
.11dc	60		               rts
>11dd	00 00		dsk_data_s     .word     $0000    ; example addresses
>11df	00 20		dsk_data_e     .word     $2000
>11e1	08		dsk_dev        .byte     $08
>11e2	00		dsk_lfsno      .byte     $00
>11e3	00 00		dsk_fnptr      .word     $00
>11e5	00		dsk_fnlen      .byte     0
>11e6	8d		dsk_msg0       .byte     141
>11e7	53 41 56 49	               .null     "saving"
>11eb	4e 47 00
>11ee	8d		dsk_msg1       .byte     141
>11ef	53 55 43 43	               .null     "succes"
>11f3	45 53 00
>11f6	8d		dsk_emsg1      .byte     141
>11f7	46 49 43 48	               .null     "fichier non ouvert"
>11fb	49 45 52 20 4e 4f 4e 20 4f 55 56 45 52 54 00
>120a	11		dsk_emsg2      .byte     17
>120b	45 52 52 45	               .null     "erreur d'ecriture"
>120f	55 52 20 44 27 45 43 52 49 54 55 52 45 00

;******  Return to file: rvrscharset.asm


;******  End of listing

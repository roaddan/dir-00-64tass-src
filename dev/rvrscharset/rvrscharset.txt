
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L rvrscharset.txt -o rvrscharset.prg rvrscharset.asm
; Thu Jun  8 22:41:22 2023

;Offset	;Hex		;Source

;******  Processing input file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: rvrscharset.asm

.080d			main
.080d	20 4f 0c	               jsr  push
.0810	a9 31		               lda  #$31
.0812	8d 26 0b	               sta  fname+10
.0815	a9 ff		               lda  #$ff
.0817	8d d6 0a	               sta  xor
.081a	20 7c 0a	               jsr  rom2ram
.081d	a9 00		               lda  #$00
.081f	8d 86 02	               sta  646
.0822	8d 20 d0	               sta  vicbordcol
.0825	a9 01		               lda  #$01
.0827	8d 21 d0	               sta  vicbackcol
.082a	a9 18		               lda  #%00011000     ;#24
.082c	8d 18 d0	               sta  $d018          ;53272
.082f	a9 93		               lda  #147
.0831	20 58 0b	               jsr  putch
.0834	a9 0e		               lda  #14
.0836	20 58 0b	               jsr  putch
.0839	a2 cd		                ldx  #<mesg00
.083b	a0 08		                ldy  #>mesg00
.083d	20 5e 0b	                jsr  puts
.0840	a9 0d		                lda  #$0d
.0842	20 58 0b	                jsr  putch
.0845	a2 f7		                ldx  #<mesg01
.0847	a0 08		                ldy  #>mesg01
.0849	20 5e 0b	                jsr  puts
.084c	a9 0d		                lda  #$0d
.084e	20 58 0b	                jsr  putch
.0851	a2 cd		                ldx  #<mesg00
.0853	a0 08		                ldy  #>mesg00
.0855	20 5e 0b	                jsr  puts
.0858	a9 0d		                lda  #$0d
.085a	20 58 0b	                jsr  putch
.085d	a2 21		                ldx  #<mesg02
.085f	a0 09		                ldy  #>mesg02
.0861	20 5e 0b	                jsr  puts
.0864	a9 0d		                lda  #$0d
.0866	20 58 0b	                jsr  putch
.0869	a2 4b		                ldx  #<mesg02b
.086b	a0 09		                ldy  #>mesg02b
.086d	20 5e 0b	                jsr  puts
.0870	a9 0d		                lda  #$0d
.0872	20 58 0b	                jsr  putch
.0875	a2 75		                ldx  #<mesg03
.0877	a0 09		                ldy  #>mesg03
.0879	20 5e 0b	                jsr  puts
.087c	a9 0d		                lda  #$0d
.087e	20 58 0b	                jsr  putch
.0881	a2 9f		                ldx  #<mesg03b
.0883	a0 09		                ldy  #>mesg03b
.0885	20 5e 0b	                jsr  puts
.0888	a9 0d		                lda  #$0d
.088a	20 58 0b	                jsr  putch
.088d	a2 c9		                ldx  #<mesg04
.088f	a0 09		                ldy  #>mesg04
.0891	20 5e 0b	                jsr  puts
.0894	a9 0d		                lda  #$0d
.0896	20 58 0b	                jsr  putch
.0899	a2 f3		                ldx  #<mesg04b
.089b	a0 09		                ldy  #>mesg04b
.089d	20 5e 0b	                jsr  puts
.08a0	a9 0d		                lda  #$0d
.08a2	20 58 0b	                jsr  putch
.08a5	a2 1d		                ldx  #<mesg05
.08a7	a0 0a		                ldy  #>mesg05
.08a9	20 5e 0b	                jsr  puts
.08ac	a9 0d		                lda  #$0d
.08ae	20 58 0b	                jsr  putch
.08b1	a2 52		                ldx  #<mesg05b
.08b3	a0 0a		                ldy  #>mesg05b
.08b5	20 5e 0b	                jsr  puts
.08b8	a9 0d		                lda  #$0d
.08ba	20 58 0b	                jsr  putch
.08bd	a2 cd		                ldx  #<mesg00
.08bf	a0 08		                ldy  #>mesg00
.08c1	20 5e 0b	                jsr  puts
.08c4	a9 0d		                lda  #$0d
.08c6	20 58 0b	                jsr  putch
.08c9	20 8e 0c	               jsr  pop
.08cc	60		               rts
>08cd	05 20 2d 2d	mesg00         .null       5," ------------------------------------- ",144
>08d1	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>08e1	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>08f1	2d 2d 2d 20 90 00
>08f7	1f 20 20 20	mesg01         .null      31,"      Change made by this program.     ",144
>08fb	20 20 20 c3 48 41 4e 47 45 20 4d 41 44 45 20 42
>090b	59 20 54 48 49 53 20 50 52 4f 47 52 41 4d 2e 20
>091b	20 20 20 20 90 00
>0921	90 20 31 29	mesg02         .null     144," 1) Obviously the lowercase character  ",144
>0925	20 cf 42 56 49 4f 55 53 4c 59 20 54 48 45 20 4c
>0935	4f 57 45 52 43 41 53 45 20 43 48 41 52 41 43 54
>0945	45 52 20 20 90 00
>094b	90 20 20 20	mesg02b        .null     144,"    set is now selected.               ",144
>094f	20 53 45 54 20 49 53 20 4e 4f 57 20 53 45 4c 45
>095f	43 54 45 44 2e 20 20 20 20 20 20 20 20 20 20 20
>096f	20 20 20 20 90 00
>0975	97 20 32 29	mesg03         .null     151," 2) The background colour selects the  ",144
>0979	20 d4 48 45 20 42 41 43 4b 47 52 4f 55 4e 44 20
>0989	43 4f 4c 4f 55 52 20 53 45 4c 45 43 54 53 20 54
>0999	48 45 20 20 90 00
>099f	97 20 20 20	mesg03b        .null     151,"    character colour and vice-versa.   ",144
>09a3	20 43 48 41 52 41 43 54 45 52 20 43 4f 4c 4f 55
>09b3	52 20 41 4e 44 20 56 49 43 45 2d 56 45 52 53 41
>09c3	2e 20 20 20 90 00
>09c9	98 20 33 29	mesg04         .null     152," 3) Cons : Only one character colour at",144
>09cd	20 c3 4f 4e 53 20 3a 20 cf 4e 4c 59 20 4f 4e 45
>09dd	20 43 48 41 52 41 43 54 45 52 20 43 4f 4c 4f 55
>09ed	52 20 41 54 90 00
>09f3	98 20 20 20	mesg04b        .null     152,"    the time per screen is available.  ",144
>09f7	20 54 48 45 20 54 49 4d 45 20 50 45 52 20 53 43
>0a07	52 45 45 4e 20 49 53 20 41 56 41 49 4c 41 42 4c
>0a17	45 2e 20 20 90 00
>0a1d	9b 20 34 29	mesg05         .null     155," 4) pros : ",158,"i",28,"n",30,"d",31,"i",129,"v",144,"i",149,"d",150,"u",151,"a",153,"l",155," character back-  ",144
>0a21	20 50 52 4f 53 20 3a 20 9e 49 1c 4e 1e 44 1f 49
>0a31	81 56 90 49 95 44 96 55 97 41 99 4c 9b 20 43 48
>0a41	41 52 41 43 54 45 52 20 42 41 43 4b 2d 20 20 90
>0a51	00
>0a52	9b 20 20 20	mesg05b        .null     155,"    ground colour is now available.    ",144
>0a56	20 47 52 4f 55 4e 44 20 43 4f 4c 4f 55 52 20 49
>0a66	53 20 4e 4f 57 20 41 56 41 49 4c 41 42 4c 45 2e
>0a76	20 20 20 20 90 00
.0a7c			rom2ram
.0a7c	20 4f 0c	               jsr  push
.0a7f	ad 0e dc	               lda  $dc0e          ;56334
.0a82	29 fe		               and  #%11111110     ;$fe ou 254
.0a84	8d 0e dc	               sta  $dc0e          ;56334
.0a87	a5 01		               lda  $01
.0a89	29 fb		               and  #%11111011     ;$fb ou 251
.0a8b	85 01		               sta  $01
.0a8d	ad d2 0a	               lda  chrom_s
.0a90	85 fb		               sta  zpage1
.0a92	ad d3 0a	               lda  chrom_s+1
.0a95	85 fc		               sta  zpage1+1
.0a97	ad d4 0a	               lda  chram_s
.0a9a	85 fd		               sta  zpage2
.0a9c	ad d5 0a	               lda  chram_s+1
.0a9f	85 fe		               sta  zpage2+1
.0aa1	a2 10		               ldx  #$10           ; copie 8 page de 256 char.
.0aa3	a0 00		               ldy  #$00
.0aa5	78		               sei
.0aa6	ad d6 0a	               lda  xor
.0aa9	8d af 0a	               sta  skip+1
.0aac	b1 fb		nexty          lda  (zpage1),y
.0aae	49 00		skip           eor  #%00000000
.0ab0	91 fd		save           sta  (zpage2),y
.0ab2	c8		               iny
.0ab3	d0 f7		               bne  nexty
.0ab5	ca		               dex
.0ab6	f0 07		               beq  out
.0ab8	e6 fc		               inc  zpage1+1
.0aba	e6 fe		               inc  zpage2+1
.0abc	4c ac 0a	               jmp  nexty
.0abf			out
.0abf	58		               cli
.0ac0	a5 01		               lda  $01
.0ac2	09 04		               ora  #%00000100     ;#$04
.0ac4	85 01		               sta  $01
.0ac6	ad 0e dc	               lda  $dc0e          ;56334
.0ac9	09 01		               ora  #%00000001     ;$01
.0acb	8d 0e dc	               sta  $dc0e          ;56334
.0ace	20 8e 0c	               jsr  pop
.0ad1	60		               rts
>0ad2	00 d0		chrom_s        .word     $d000     ;$d000 a $d800 53284
>0ad4	00 20		chram_s        .word     $2000     ;$2000 a $2800 8192
>0ad6	00		xor            .byte     $00
.0ad7			savetodisk
.0ad7	20 4f 0c	               jsr  push
.0ada	a9 00		               lda  #$00
.0adc	8d 2c 10	               sta  dsk_data_s
.0adf	a9 20		               lda  #$20
.0ae1	8d 2d 10	               sta  dsk_data_s+1
.0ae4	a9 00		               lda  #$00
.0ae6	8d 2e 10	               sta  dsk_data_e
.0ae9	a9 30		               lda  #$30
.0aeb	8d 2f 10	               sta  dsk_data_e+1
.0aee	a9 08		               lda  #$08
.0af0	8d 30 10	               sta  dsk_dev
.0af3	a9 00		               lda  #$00
.0af5	8d 31 10	               sta  dsk_lfsno
.0af8	a9 1c		               lda  #<fname
.0afa	8d 32 10	               sta  dsk_fnptr
.0afd	a9 0b		               lda  #>fname
.0aff	8d 33 10	               sta  dsk_fnptr+1
.0b02	a9 0b		               lda  #fname_end-fname
.0b04	8d 34 10	               sta  dsk_fnlen
.0b07	20 99 0f	               jsr  memtofile
.0b0a	a9 0d		               lda  #$0d
.0b0c	20 58 0b	               jsr  putch
.0b0f	20 ff 0e	               jsr  diskerror
.0b12	20 22 0f	               jsr  diskdir
.0b15	20 d1 0f	               jsr  filetomem
.0b18	20 8e 0c	               jsr  pop
.0b1b	60		               rts
>0b1c	40		fname          .byte 64
>0b1d	30 3a 43 48	               .text "0:charset0"
>0b21	41 52 53 45 54 30
>0b27	00		fname_end      .byte 0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ;  97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c1			stal            =       $c1     ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.0b28			libtart

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0b28			scrmaninit
.0b28	20 4f 0c	               jsr  push
.0b2b	a9 06		               lda  #vbleu
.0b2d	8d 21 d0	               sta  vicbackcol
.0b30	a9 05		               lda  #vvert
.0b32	8d 20 d0	               sta  vicbordcol
.0b35	a9 01		               lda  #vblanc
.0b37	8d 86 02	               sta  bascol
.0b3a	ad 00 04	               lda  scrnram
.0b3d	29 fd		               and  #%11111101
.0b3f	8d 00 04	               sta  scrnram
.0b42	20 49 0b	               jsr  cls
.0b45	20 8e 0c	               jsr  pop
.0b48	60		               rts
.0b49			cls
.0b49	08		               php
.0b4a	48		               pha
.0b4b	a9 93		               lda  #$93
.0b4d	20 58 0b	               jsr  putch
.0b50	a9 0e		               lda  #$0e
.0b52	20 58 0b	               jsr  putch
.0b55	68		               pla
.0b56	28		               plp
.0b57	60		               rts
.0b58			putch
.0b58	08		               php
.0b59	20 d2 ff	               jsr  $ffd2
.0b5c	28		               plp
.0b5d	60		               rts
.0b5e			puts
.0b5e	20 4f 0c	               jsr  push
.0b61	86 fb		               stx  zpage1
.0b63	84 fc		               sty  zpage1+1
.0b65	a0 00		               ldy  #0
.0b67	b1 fb		next           lda  (zpage1),y
.0b69	f0 09		               beq  exit
.0b6b	20 58 0b	               jsr  putch
.0b6e	20 56 0d	               jsr  inczp1
.0b71	4c 67 0b	               jmp  next
.0b74	20 8e 0c	exit           jsr  pop
.0b77	60		               rts
.0b78			gotoxy
.0b78	08		               php
.0b79	18		               clc
.0b7a	8a		               txa
.0b7b	48		               pha
.0b7c	98		               tya
.0b7d	aa		               tax
.0b7e	68		               pla
.0b7f	a8		               tay
.0b80	20 f0 ff	               jsr  kplot
.0b83	28		               plp
.0b84	60		               rts
.0b85			cursor
=$0286			bascol    =    $0286
.0b85	08		               php
.0b86	48		               pha
.0b87	90 12		               bcc  restore
.0b89	20 f0 ff	               jsr  kplot
.0b8c	8c ad 0b	               sty  cx
.0b8f	8e ae 0b	               stx  cy
.0b92	ad 86 02	               lda  bascol
.0b95	8d af 0b	               sta  bcol
.0b98	4c aa 0b	               jmp  out
.0b9b	ae ae 0b	restore        ldx  cy
.0b9e	ac ad 0b	               ldy  cx
.0ba1	20 f0 ff	               jsr  kplot
.0ba4	ad af 0b	               lda  bcol
.0ba7	8d 86 02	               sta  bascol
.0baa	68		out            pla
.0bab	28		               plp
.0bac	60		               rts
>0bad	00		cx   .byte     $00
>0bae	00		cy   .byte     $00
>0baf	00		bcol .byte     $00
.0bb0			cursave
.0bb0	08		               php
.0bb1	38		               sec
.0bb2	20 85 0b	               jsr  cursor
.0bb5	28		               plp
.0bb6	60		               rts
.0bb7			curput
.0bb7	08		               php
.0bb8	18		               clc
.0bb9	20 85 0b	               jsr  cursor
.0bbc	28		               plp
.0bbd	60		               rts
.0bbe			putsxy
.0bbe	20 4f 0c	               jsr  push
.0bc1	86 fb		               stx  zpage1
.0bc3	84 fc		               sty  zpage1+1
.0bc5	a0 00		               ldy  #$00
.0bc7	b1 fb		               lda  (zpage1),y
.0bc9	aa		               tax
.0bca	20 56 0d	               jsr  inczp1
.0bcd	b1 fb		               lda  (zpage1),y
.0bcf	a8		               tay
.0bd0	20 78 0b	               jsr  gotoxy
.0bd3	20 56 0d	               jsr  inczp1
.0bd6	a6 fb		               ldx  zpage1
.0bd8	a4 fc		               ldy  zpage1+1
.0bda	20 5e 0b	               jsr  puts
.0bdd	20 8e 0c	               jsr  pop
.0be0	60		               rts
>0be1	00 00		straddr   .word     $00
>0be3	00		px        .byte     $00
>0be4	00		py        .byte     $00
>0be5	00 00		zp1       .word     $00
.0be7			putscxy
.0be7	20 4f 0c	               jsr  push
.0bea	84 fc		               sty  zpage1+1
.0bec	86 fb		               stx  zpage1
.0bee	ad 86 02	               lda  bascol
.0bf1	8d 11 0c	               sta  bc
.0bf4	a0 00		               ldy #$00
.0bf6	b1 fb		               lda  (zpage1),y
.0bf8	8d 86 02	               sta  bascol
.0bfb	20 56 0d	               jsr  inczp1
.0bfe	a6 fb		               ldx  zpage1
.0c00	a4 fc		               ldy  zpage1+1
.0c02	20 be 0b	               jsr  putsxy
.0c05	ad 11 0c	               lda  bc
.0c08	8d 86 02	               sta  bascol
.0c0b	20 8e 0c	               jsr  pop
.0c0e	60		               rts
>0c0f	00 00		straddr  .word      $00
>0c11	00		bc       .byte      $00
>0c12	00 00		zp1      .word      $00
.0c14			putrahex
.0c14	08		               php
.0c15	48		               pha
.0c16	20 5c 0e	               jsr  a2hex
.0c19	a9 08		               lda  #<a2hexstr
.0c1b	a0 0e		               ldy  #>a2hexstr
.0c1d	20 5e 0b	               jsr  puts
.0c20	68		               pla
.0c21	28		               plp
.0c22	60		               rts
.0c23			kputrahexxy
.0c23			bputrahexxy
.0c23			putrahexxy
.0c23	08		               php
.0c24	20 5c 0e	               jsr  a2hex
.0c27	a9 05		               lda  #<a2hexpos
.0c29	a0 0e		               ldy  #>a2hexpos
.0c2b	20 be 0b	               jsr  putsxy
.0c2e	68		               pla
.0c2f	28		               plp
.0c30	60		               rts
.0c31			putrahexcxy
.0c31	08		               php
.0c32	20 5c 0e	               jsr  a2hex
.0c35	a9 05		               lda  #<a2hexpos
.0c37	a0 0e		               ldy  #>a2hexpos
.0c39	20 e7 0b	               jsr  putscxy
.0c3c	68		               pla
.0c3d	28		               plp
.0c3e	60		               rts
.0c3f			setinverse
.0c3f	48		               pha
.0c40	a9 12		               lda  #$12
.0c42	20 d2 ff	               jsr  $ffd2
.0c45	68		               pla
.0c46	60		               rts
.0c47			clrinverse
.0c47	48		               pha
.0c48	a9 92		               lda  #$92
.0c4a	20 d2 ff	               jsr  $ffd2
.0c4d	68		               pla
.0c4e	60		               rts

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.0c4f			push
.0c4f	08		          php            ; stack : flg, pcl, pch
.0c50	78		          sei
.0c51	8d 8b 0c	          sta  ra        ; save a
.0c54	68		          pla            ; stack : pcl, pch
.0c55	8d 8a 0c	          sta  rp        ; save rp
.0c58	68		          pla            ; stack : pch
.0c59	8d 8c 0c	          sta  pc        ; save pcl
.0c5c	68		          pla            ; stack : -
.0c5d	8d 8d 0c	          sta  pc+1      ; save pch
.0c60	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0c62	48		          pha            ; stack : zp1l
.0c63	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0c65	48		          pha            ; stack : zp1h, zp1l
.0c66	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0c68	48		          pha            ; stack : zp2l, zp1h, zp1l
.0c69	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0c6b	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0c6c	ad 8a 0c	          lda  rp        ; get rp
.0c6f	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0c70	ad 8b 0c	          lda  ra        ; get a
.0c73	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0c74	8a		          txa            ; get x
.0c75	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c76	98		          tya            ; get y
.0c77	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c78	ad 8d 0c	          lda  pc+1      ; get pch
.0c7b	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c7c	ad 8c 0c	          lda  pc        ; get pcl
.0c7f	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c80	ad 8a 0c	          lda  rp        ; get rp
.0c83	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c84	ad 8b 0c	          lda  ra        ; get a
.0c87	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c88	58		          cli
.0c89	60		          rts
>0c8a	00		rp        .byte     0
>0c8b	00		ra        .byte     0
>0c8c	00 00		pc        .word     0
.0c8e			pull
.0c8e			pop
.0c8e	78		          sei
.0c8f	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c90	8d c3 0c	          sta  pc        ; save pcl
.0c93	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c94	8d c4 0c	          sta  pc+1      ; save pch
.0c97	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c98	a8		          tay            ; set y
.0c99	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0c9a	aa		          tax            ; set x
.0c9b	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0c9c	8d c2 0c	          sta  ra        ; save a
.0c9f	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0ca0	8d c1 0c	          sta  rp        ; save rp
.0ca3	68		          pla            ; stack : zp2l, zp1h, zp1l
.0ca4	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0ca6	68		          pla            ; stack : zp1h, zp1l
.0ca7	85 fd		          sta  zpage2    ; get zpage2 High byte
.0ca9	68		          pla            ; stack : zp1l
.0caa	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0cac	68		          pla            ; stack :
.0cad	85 fb		          sta  zpage1    ; get zpage1 High byte
.0caf	ad c4 0c	          lda  pc+1      ; get pch
.0cb2	48		          pha            ; stack : pch
.0cb3	ad c3 0c	          lda  pc
.0cb6	48		          pha            ; stack : pcl, pch
.0cb7	ad c1 0c	          lda  rp        ; get rp
.0cba	48		          pha            ; stack : rp, pcl, pch
.0cbb	ad c2 0c	          lda  ra        ; set ra
.0cbe	58		          cli
.0cbf	28		          plp            ; stack : pcl, pch
.0cc0	60		          rts
>0cc1	00		rp        .byte     0
>0cc2	00		ra        .byte     0
>0cc3	00 00		pc        .word     0

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.0cc5			blkfill
.0cc5	20 4f 0c	bf0            jsr  push
.0cc8	20 83 0d	               jsr  savezp1
.0ccb	84 fc		               sty  zpage1+1
.0ccd	a0 00		               ldy  #$00
.0ccf	84 fb		               sty  zpage1
.0cd1	91 fb		bf1            sta  (zpage1),y
.0cd3	c8		               iny
.0cd4	d0 fb		               bne  bf1
.0cd6	20 92 0d	               jsr  restzp1
.0cd9	20 8e 0c	               jsr  pop
.0cdc	60		               rts
.0cdd			memfill
.0cdd	20 4f 0c	               jsr  push
.0ce0	20 c5 0c	mf1            jsr  blkfill
.0ce3	c8		               iny
.0ce4	ca		               dex
.0ce5	d0 f9		               bne  mf1
.0ce7	20 8e 0c	               jsr  pop
.0cea	60		               rts
.0ceb			memmove
.0ceb	20 4f 0c	               jsr  push
.0cee	ba		               tsx            ; On se crée un pointeur ...
.0cef	8a		               txa
.0cf0	18		               clc
.0cf1	69 0b		               adc  #11
.0cf3	a8		               tay
.0cf4	a2 06		               ldx  #$06
.0cf6	b9 00 01	nextbyte       lda  $0100,y
.0cf9	99 45 0d	               sta  words,y
.0cfc	c8		               iny
.0cfd	ca		               dex
.0cfe	d0 f6		               bne  nextbyte
.0d00	ad 45 0d	               lda  s
.0d03	8d 1c 0d	               sta  source+1
.0d06	ad 46 0d	               lda  s+1
.0d09	8d 1d 0d	               sta  source+2
.0d0c	ad 47 0d	               lda  d
.0d0f	8d 19 0d	               sta  destin+1
.0d12	ad 48 0d	               lda  d+1
.0d15	8d 1a 0d	               sta  destin+2
.0d18	ad ff ff	destin         lda  $ffff
.0d1b	8d ff ff	source         sta  $ffff
.0d1e	ee 19 0d	               inc  destin+1
.0d21	d0 03		               bne  src
.0d23	ee 1a 0d	               inc  destin+2
.0d26	ee 1c 0d	src            inc  source+1
.0d29	d0 03		               bne  cnt
.0d2b	ee 1d 0d	               inc  source+2
.0d2e	ad 49 0d	cnt            lda  compte
.0d31	d0 08		               bne  decit
.0d33	ad 4a 0d	               lda  compte+1
.0d36	f0 09		               beq  fini
.0d38	ce 4a 0d	               dec  compte+1
.0d3b	ce 49 0d	decit          dec  compte
.0d3e	4c 18 0d	               jmp  destin
.0d41	20 8e 0c	fini           jsr  pop
.0d44	60		               rts
.0d45			words
>0d45	00 00		s         .word     $0000
>0d47	00 00		d         .word     $0000
>0d49	00 00		compte    .word     $0000
.0d4b			decword
.0d4b	20 4f 0c	               jsr  push
.0d4e	86 fd		               stx  zpage2
.0d50	84 fe		               sty  zpage2+1
.0d52	20 8e 0c	               jsr  pop
.0d55	60		               rts
.0d56			inczp1
.0d56	08		               php
.0d57	e6 fb		               inc  zpage1
.0d59	d0 02		               bne  nopage
.0d5b	e6 fc		               inc  zpage1+1
.0d5d	28		nopage         plp
.0d5e	60		               rts
.0d5f			deczp1
.0d5f	08		                php
.0d60	48		                pha
.0d61	c6 fb		                dec  zpage1
.0d63	d0 02		                bne  nopage
.0d65	c6 fc		                dec  zpage1+1
.0d67	c6 fb		nopage          dec  zpage1
.0d69	68		                pla
.0d6a	28		                plp
.0d6b	60		                rts
.0d6c			inczp2
.0d6c	08		               php
.0d6d	48		               pha
.0d6e	e6 fd		               inc  zpage2
.0d70	d0 02		               bne  nopage
.0d72	e6 fe		               inc  zpage2+1
.0d74	68		nopage         pla
.0d75	28		               plp
.0d76	60		               rts
.0d77			deczp2
.0d77	08		               php
.0d78	48		               pha
.0d79	a5 fd		               lda  zpage2
.0d7b	d0 02		               bne  nopage
.0d7d	c6 fe		               dec  zpage2+1
.0d7f	c6 fd		nopage         dec  zpage2
.0d81	28		               plp
.0d82	60		               rts
.0d83			savezp1
.0d83	08		               php
.0d84	48		               pha
.0d85	a5 fb		               lda  zpage1
.0d87	8d ff 0d	               sta  zp1
.0d8a	a5 fc		               lda  zpage1+1
.0d8c	8d 00 0e	               sta  zp1+1
.0d8f	68		               pla
.0d90	28		               plp
.0d91	60		               rts
.0d92			restzp1
.0d92	08		               php
.0d93	48		               pha
.0d94	ad ff 0d	               lda zp1
.0d97	85 fb		               sta zpage1
.0d99	ad 00 0e	               lda zp1+1
.0d9c	85 fc		               sta zpage1+1
.0d9e	68		               pla
.0d9f	28		               plp
.0da0	60		               rts
.0da1			savezp2
.0da1	08		         php
.0da2	48		         pha
.0da3	a5 fd		         lda zpage2
.0da5	8d 01 0e	         sta zp2
.0da8	a5 fe		         lda zpage2+1
.0daa	8d 02 0e	         sta zp2+1
.0dad	68		         pla
.0dae	28		         plp
.0daf	60		         rts
.0db0			restzp2
.0db0	08		                php
.0db1	48		                pha
.0db2	ad 01 0e	                lda  zp2
.0db5	85 fd		                sta  zpage2
.0db7	ad 02 0e	                lda  zp2+1
.0dba	85 fe		                sta  zpage2+1
.0dbc	68		                pla
.0dbd	28		                plp
.0dbe	60		                rts
.0dbf			xy2addr
.0dbf	08		                php
.0dc0	48		                pha
.0dc1	8a		                txa
.0dc2	48		                pha
.0dc3	98		                tya
.0dc4	48		                pha
.0dc5	ad fa 0d	                lda     addr1+1
.0dc8	8d fc 0d	                sta     addr2+1
.0dcb	ad f9 0d	                lda     addr1
.0dce	8d fb 0d	                sta     addr2
.0dd1	c0 00		                cpy     #$00
.0dd3	f0 0f		                beq     addx
.0dd5	18		moreline        clc
.0dd6	6d f8 0d	                adc     ymult
.0dd9	90 03		                bcc     norepy
.0ddb	ee fc 0d	                inc     addr2+1
.0dde	8d fb 0d	norepy          sta     addr2
.0de1	88		                dey
.0de2	d0 f1		                bne     moreline
.0de4	8a		addx            txa
.0de5	18		                clc
.0de6	6d fb 0d	                adc     addr2
.0de9	90 03		                bcc     thatsit
.0deb	ee fc 0d	                inc     addr2+1
.0dee	8d fb 0d	thatsit         sta     addr2
.0df1	68		                pla
.0df2	a8		                tay
.0df3	68		                pla
.0df4	aa		                tax
.0df5	68		                pla
.0df6	28		                plp
.0df7	60		                rts
>0df8	28		ymult          .byte     40
>0df9	00 00		addr1          .word     $0000
>0dfb	00 00		addr2          .word     $0000
>0dfd	00 00		bytecnt        .word     $0000
>0dff	00 00		zp1        .word   $0000
>0e01	00 00		zp2        .word   $0000

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>0e03	01		a2hexcol       .byte     1              ; pour aputscxy
>0e04	00		a2hexbkcol     .byte     %00000000
.0e05			a2hexpos
>0e05	00		a2hexpx        .byte     0              ; pour aputsxy
>0e06	00		a2hexpy        .byte     0
>0e07	24		a2hexprefix    .byte     "$"            ; pour aputs
>0e08	00 00		a2hexstr       .word     $00
>0e0a	00 00		               .word     $00
>0e0c	00		               .byte     0              ; 0 end string
.0e0d			putahexfmtxy
.0e0d	20 4f 0c	               jsr  push
.0e10	20 5c 0e	               jsr  a2hex
.0e13	ae 05 0e	               ldx  a2hexpx
.0e16	ac 06 0e	               ldy  a2hexpy
.0e19	20 78 0b	               jsr  gotoxy
.0e1c	a2 07		               ldx  #<a2hexprefix
.0e1e	a0 0e		               ldy  #>a2hexprefix
.0e20	20 5e 0b	               jsr  puts
.0e23	20 8e 0c	               jsr  pop
.0e26	60		               rts
.0e27			putahexfmt
.0e27	20 4f 0c	               jsr  push
.0e2a	20 5c 0e	               jsr  a2hex
.0e2d	a2 07		               ldx  #<a2hexprefix
.0e2f	a0 0e		               ldy  #>a2hexprefix
.0e31	20 5e 0b	               jsr  puts
.0e34	20 8e 0c	               jsr  pop
.0e37	60		               rts
.0e38			putahex
.0e38	20 4f 0c	               jsr  push
.0e3b	20 5c 0e	               jsr  a2hex
.0e3e	a2 08		               ldx  #<a2hexstr
.0e40	a0 0e		               ldy  #>a2hexstr
.0e42	20 5e 0b	               jsr  puts
.0e45	20 8e 0c	               jsr  pop
.0e48	60		               rts
.0e49			nib2hex
.0e49	08		               php
.0e4a	29 0f		               and  #$0f
.0e4c	f8		               sed
.0e4d	18		               clc
.0e4e	69 90		               adc  #$90
.0e50	69 40		               adc  #$40
.0e52	d8		               cld
.0e53	28		               plp
.0e54	60		               rts
.0e55			lsra4bits
.0e55	08		               php
.0e56	4a		               lsr
.0e57	4a		               lsr
.0e58	4a		               lsr
.0e59	4a		               lsr
.0e5a	28		               plp
.0e5b	60		               rts
.0e5c			a2hex
.0e5c	08		               php
.0e5d	48		               pha
.0e5e	48		               pha
.0e5f	20 55 0e	               jsr  lsra4bits
.0e62	20 49 0e	               jsr  nib2hex
.0e65	8d 08 0e	               sta  a2hexstr
.0e68	68		               pla
.0e69	20 49 0e	               jsr  nib2hex
.0e6c	8d 09 0e	               sta  a2hexstr+1
.0e6f	a9 00		               lda  #$00                ; set end of string
.0e71	8d 0a 0e	               sta  a2hexstr+2
.0e74	68		               pla
.0e75	28		               plp
.0e76	60		               rts
.0e77			xy2hex
.0e77	20 4f 0c	               jsr  push
.0e7a	20 5c 0e	               jsr  a2hex
.0e7d	8a		               txa
.0e7e	48		               pha
.0e7f	20 55 0e	               jsr  lsra4bits
.0e82	20 49 0e	               jsr  nib2hex
.0e85	8d 08 0e	               sta  a2hexstr
.0e88	68		               pla
.0e89	20 49 0e	               jsr  nib2hex
.0e8c	8d 09 0e	               sta  a2hexstr+1
.0e8f	98		               tya
.0e90	48		               pha
.0e91	20 55 0e	               jsr  lsra4bits
.0e94	20 49 0e	               jsr  nib2hex
.0e97	8d 0a 0e	               sta  a2hexstr+2
.0e9a	68		               pla
.0e9b	20 49 0e	               jsr  nib2hex
.0e9e	8d 0b 0e	               sta  a2hexstr+3
.0ea1	a9 00		               lda  #$00                ; 0 ended string
.0ea3	8d 0c 0e	               sta  a2hexstr+4
.0ea6	20 8e 0c	               jsr  pop
.0ea9			atobin
.0ea9	20 4f 0c	               jsr     push
.0eac	a2 08		               ldx     #8
.0eae	a0 00		               ldy     #0
.0eb0	2a		nextbit        rol
.0eb1	48		               pha
.0eb2	69 00		               adc     #$00
.0eb4	29 01		               and     #$01
.0eb6	20 49 0e	               jsr     nib2hex
.0eb9	99 ca 0e	               sta     abin,y
.0ebc	68		               pla
.0ebd	c8		               iny
.0ebe	ca		               dex
.0ebf	d0 ef		               bne     nextbit
.0ec1	a9 00		               lda     #0
.0ec3	99 ca 0e	               sta     abin,y
.0ec6	20 8e 0c	               jsr     pull
.0ec9	60		               rts
>0eca	30 30 30 30	abin           .null   "00000000"
>0ece	30 30 30 30 00
.0ed3			putabin
.0ed3	20 a9 0e	               jsr     atobin
.0ed6	20 4f 0c	               jsr     push
.0ed9	a2 ca		               ldx     #<abin
.0edb	a0 0e		               ldy     #>abin
.0edd	20 5e 0b	               jsr     puts
.0ee0	20 8e 0c	               jsr     pop
.0ee3	60		               rts
.0ee4			putabinfmt
.0ee4	08		               php
.0ee5	48		               pha
.0ee6	a9 25		               lda     #"%"
.0ee8	20 58 0b	               jsr     putch
.0eeb	68		               pla
.0eec	20 d3 0e	               jsr     putabin
.0eef	28		               plp
.0ef0	60		               rts
.0ef1			putabinxy
.0ef1	20 78 0b	               jsr     gotoxy
.0ef4	20 d3 0e	               jsr     putabin
.0ef7	60		               rts
.0ef8			putabinfmtxy
.0ef8	20 78 0b	               jsr     gotoxy
.0efb	20 e4 0e	               jsr     putabinfmt
.0efe	60		               rts

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-disk.asm

.0eff			diskerror
.0eff	20 4f 0c	               jsr  push
.0f02	ad 30 10	               lda  dsk_dev   ; Select device 8
.0f05	85 ba		               sta  $ba       ;
.0f07	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.0f0a	a9 6f		               lda  #$6f
.0f0c	85 b9		               sta  $b9       ;
.0f0e	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.0f11	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.0f14	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.0f17	c9 0d		               cmp  #$0d      ; Is it CR ?
.0f19	d0 f6		               bne  nextchar  ; No, get next char
.0f1b	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.0f1e	20 8e 0c	               jsr  pop
.0f21	60		               rts
.0f22			diskdir
.0f22	20 4f 0c	               jsr  push
.0f25	a9 24		               lda  #$24      ; L012C - Filename is "$"
.0f27	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.0f29	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.0f2b	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.0f2d	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.0f2f	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.0f31	a9 01		               lda  #$01      ; L0138 - set ...
.0f33	85 b7		               sta  $b7       ; L013A - ... length of current filename
.0f35	ad 30 10	               lda  dsk_dev   ; L013C - set 8 as ...
.0f38	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.0f3a	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.0f3c	85 b9		               sta  $b9       ; L0142 - ... secondary address
.0f3e	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.0f41	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...%10111010
.0f43	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.0f46	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.0f48	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.0f4b	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.0f4d	85 90		               sta  $90       ; L0153 - ... kernal status word.
.0f4f	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.0f51	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.0f53	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.0f56	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.0f58	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.0f5a	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.0f5c	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.0f5f	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.0f61	d0 28		               bne  exit      ; L0167
.0f63	a4 fb		               ldy  $fb       ; L0169
.0f65	88		               dey            ; L016b
.0f66	d0 e9		               bne  loop1     ; L016C - If not last, loop
.0f68	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.0f6a	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.0f6d	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.0f6f	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.0f72	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.0f75	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.0f77	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.0f79	aa		               tax            ; L017F - tfr a in x
.0f7a	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.0f7c	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.0f7f	4c 72 0f	               jmp  loop3     ; L0185 - get another byte
.0f82	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.0f84	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.0f87	a0 02		               ldy  #$02      ; L018D - set Y to 2
.0f89	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.0f8b	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.0f8e	20 8e 0c	               jsr  pop
.0f91	60		               rts            ; L0194
.0f92			directory
.0f92	20 22 0f	               jsr  diskdir
.0f95	20 ff 0e	               jsr  diskerror
.0f98	60		               rts
.0f99			memtofile
.0f99	20 0a 10	               jsr  dsk_putmesg
.0f9c	20 4f 0c	               jsr  push
.0f9f	ad 34 10	               lda  dsk_fnlen
.0fa2	ae 32 10	               ldx  dsk_fnptr      ; load fname addr. lbyte
.0fa5	ac 33 10	               ldy  dsk_fnptr+1
.0fa8	20 bd ff	               jsr  setnam         ; call setnam
.0fab	ad 31 10	               lda  dsk_lfsno
.0fae	ae 30 10	               ldx  dsk_dev        ; specified device
.0fb1	a0 00		skip           ldy  #$00
.0fb3	20 ba ff	               jsr  setlfs         ; call setlfs
.0fb6	ad 2c 10	               lda  dsk_data_s     ; put data start lbyte in stal
.0fb9	85 c1		               sta  stal
.0fbb	ad 2d 10	               lda  dsk_data_s+1   ; put data start hbyte in stal
.0fbe	85 c2		               sta  stal+1
.0fc0	ae 2e 10	               ldx  dsk_data_e     ; put data end lbyte in x
.0fc3	ac 2f 10	               ldy  dsk_data_e+1   ; put data end hbyte in y
.0fc6	a9 c1		               lda  #stal          ; start address located in $c1/$c2
.0fc8	20 d8 ff	               jsr  save           ; call save
.0fcb	90 00		               bcc  noerror        ; if carry set, a load error has happened
.0fcd	20 8e 0c	noerror        jsr  pop
.0fd0	60		               rts
.0fd1			filetomem
.0fd1	20 4f 0c	               jsr push
.0fd4	ad 34 10	               lda dsk_fnlen
.0fd7	ae 32 10	               ldx dsk_fnptr
.0fda	ac 33 10	               ldy dsk_fnptr+1
.0fdd	20 bd ff	               jsr setnam     ; call setnam
.0fe0	ad 31 10	               lda dsk_lfsno
.0fe3	ae 30 10	               ldx dsk_dev    ; default to device 8
.0fe6	a0 01		               ldy #$01       ; not $01 means: load to address stored in file
.0fe8	20 ba ff	               jsr setlfs     ; call setlfs
.0feb	a9 00		               lda #$00       ; $00 means: load to memory (not verify)
.0fed	20 d5 ff	               jsr load       ; call load
.0ff0	90 03		               bcc noerror      ; if carry set, a load error has happened
.0ff2	20 f9 0f	               jsr  error
.0ff5	20 8e 0c	noerror        jsr pop
.0ff8	60		               rts
.0ff9			error
.0ff9	60		               rts
.0ffa	a2 45		error1         ldx  #<dsk_emsg1
.0ffc	a0 10		               ldy  #>dsk_emsg1
.0ffe	20 5e 0b	               jsr  puts
.1001	60		               rts
.1002	a2 59		error2         ldx #<dsk_emsg2
.1004	a0 10		               ldy #>dsk_emsg2
.1006	20 5e 0b	               jsr puts
.1009	60		               rts
.100a			dsk_putmesg
.100a	20 4f 0c	               jsr push
.100d	a2 35		               ldx #<dsk_msg0
.100f	a0 10		               ldy #>dsk_msg0
.1011	20 5e 0b	               jsr puts
.1014	a9 20		               lda #$20
.1016	20 58 0b	               jsr putch
.1019	ae 32 10	               ldx dsk_fnptr
.101c	ac 33 10	               ldy dsk_fnptr+1
.101f	20 5e 0b	               jsr puts
.1022	ad 31 10	               lda dsk_lfsno
.1025	20 c3 ff	               jsr close
.1028	20 8e 0c	               jsr pop
.102b	60		               rts
>102c	00 00		dsk_data_s     .word     $0000    ; example addresses
>102e	00 20		dsk_data_e     .word     $2000
>1030	08		dsk_dev        .byte     $08
>1031	00		dsk_lfsno      .byte     $00
>1032	00 00		dsk_fnptr      .word     $00
>1034	00		dsk_fnlen      .byte     0
>1035	8d		dsk_msg0       .byte     141
>1036	53 41 56 49	               .null     "saving"
>103a	4e 47 00
>103d	8d		dsk_msg1       .byte     141
>103e	53 55 43 43	               .null     "succes"
>1042	45 53 00
>1045	8d		dsk_emsg1      .byte     141
>1046	46 49 43 48	               .null     "fichier non ouvert"
>104a	49 45 52 20 4e 4f 4e 20 4f 55 56 45 52 54 00
>1059	11		dsk_emsg2      .byte     17
>105a	45 52 52 45	               .null     "erreur d'ecriture"
>105e	55 52 20 44 27 45 43 52 49 54 55 52 45 00

;******  Return to file: rvrscharset.asm


;******  End of listing

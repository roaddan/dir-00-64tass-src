
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L rvrscharset.txt -o rvrscharset.prg rvrscharset.asm
; Sun Jun 11 21:57:43 2023

;Offset	;Hex		;Source

;******  Processing input file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: rvrscharset.asm

.080d			main
.080d	20 d3 0d	               jsr  push
.0810	20 85 0c	               jsr  screendis
.0813	a9 ff		               lda  #$ff           ; We reverse everything
.0815	8d 84 0c	               sta  xor
.0818	20 2a 0c	               jsr  rom2ram        ; Copy reversed charset to ram
.081b	a9 00		               lda  #$00           ; Set char colour (i.e. Background) to black.
.081d	8d 86 02	               sta  646
.0820	8d 20 d0	               sta  vicbordcol     ; set the border to black
.0823	a9 01		               lda  #$01           ; Background (character)
.0825	8d 21 d0	               sta  vicbackcol
.0828	a9 18		               lda  #%00011000     ;#24 Points the vicII to the
.082a	8d 18 d0	               sta  $d018          ;53272 ram character set.
.082d	a9 93		               lda  #b_clr_home    ; Clear the screen
.082f	20 dc 0c	               jsr  putch
.0832	a9 0e		               lda  #b_lowercase   ; Set lowercase characterset
.0834	20 dc 0c	               jsr  putch
.0837	20 d3 0d	                jsr push
.083a	a2 00		                ldx  #0
.083c	a0 08		                ldy  #8
.083e	20 fc 0c	                jsr  gotoxy
.0841	20 12 0e	                jsr pop
.0844	a2 50		                ldx  #<mesg00a
.0846	a0 09		                ldy  #>mesg00a
.0848	20 e2 0c	                jsr  puts
.084b	a9 0d		                lda  #$0d
.084d	20 dc 0c	                jsr  putch
.0850	a2 7a		                ldx  #<mesg00b
.0852	a0 09		                ldy  #>mesg00b
.0854	20 e2 0c	                jsr  puts
.0857	a9 0d		                lda  #$0d
.0859	20 dc 0c	                jsr  putch
.085c	a2 50		                ldx  #<mesg00a
.085e	a0 09		                ldy  #>mesg00a
.0860	20 e2 0c	                jsr  puts
.0863	a9 0d		                lda  #$0d
.0865	20 dc 0c	                jsr  putch
.0868	a2 a4		                ldx  #<mesg01a
.086a	a0 09		                ldy  #>mesg01a
.086c	20 e2 0c	                jsr  puts
.086f	a9 0d		                lda  #$0d
.0871	20 dc 0c	                jsr  putch
.0874	a2 ce		                ldx  #<mesg01b
.0876	a0 09		                ldy  #>mesg01b
.0878	20 e2 0c	                jsr  puts
.087b	a9 0d		                lda  #$0d
.087d	20 dc 0c	                jsr  putch
.0880	a2 f8		                ldx  #<mesg02a
.0882	a0 09		                ldy  #>mesg02a
.0884	20 e2 0c	                jsr  puts
.0887	a9 0d		                lda  #$0d
.0889	20 dc 0c	                jsr  putch
.088c	a2 22		                ldx  #<mesg02b
.088e	a0 0a		                ldy  #>mesg02b
.0890	20 e2 0c	                jsr  puts
.0893	a9 0d		                lda  #$0d
.0895	20 dc 0c	                jsr  putch
.0898	a2 4c		                ldx  #<mesg02c
.089a	a0 0a		                ldy  #>mesg02c
.089c	20 e2 0c	                jsr  puts
.089f	a9 0d		                lda  #$0d
.08a1	20 dc 0c	                jsr  putch
.08a4	a2 76		                ldx  #<mesg03a
.08a6	a0 0a		                ldy  #>mesg03a
.08a8	20 e2 0c	                jsr  puts
.08ab	a9 0d		                lda  #$0d
.08ad	20 dc 0c	                jsr  putch
.08b0	a2 a0		                ldx  #<mesg03b
.08b2	a0 0a		                ldy  #>mesg03b
.08b4	20 e2 0c	                jsr  puts
.08b7	a9 0d		                lda  #$0d
.08b9	20 dc 0c	                jsr  putch
.08bc	a2 ca		                ldx  #<mesg03c
.08be	a0 0a		                ldy  #>mesg03c
.08c0	20 e2 0c	                jsr  puts
.08c3	a9 0d		                lda  #$0d
.08c5	20 dc 0c	                jsr  putch
.08c8	a2 f4		                ldx  #<mesg04a
.08ca	a0 0a		                ldy  #>mesg04a
.08cc	20 e2 0c	                jsr  puts
.08cf	a2 09		                ldx  #<mesg04b
.08d1	a0 0b		                ldy  #>mesg04b
.08d3	20 e2 0c	                jsr  puts
.08d6	a2 17		                ldx  #<mesg04c
.08d8	a0 0b		                ldy  #>mesg04c
.08da	20 e2 0c	                jsr  puts
.08dd	a9 0d		                lda  #$0d
.08df	20 dc 0c	                jsr  putch
.08e2	a2 2d		                ldx  #<mesg04d
.08e4	a0 0b		                ldy  #>mesg04d
.08e6	20 e2 0c	                jsr  puts
.08e9	a9 0d		                lda  #$0d
.08eb	20 dc 0c	                jsr  putch
.08ee	a2 57		                ldx  #<mesg04e
.08f0	a0 0b		                ldy  #>mesg04e
.08f2	20 e2 0c	                jsr  puts
.08f5	a9 0d		                lda  #$0d
.08f7	20 dc 0c	                jsr  putch
.08fa	a2 81		                ldx  #<mesg05a
.08fc	a0 0b		                ldy  #>mesg05a
.08fe	20 e2 0c	                jsr  puts
.0901	a9 0d		                lda  #$0d
.0903	20 dc 0c	                jsr  putch
.0906	a2 ab		                ldx  #<mesg05b
.0908	a0 0b		                ldy  #>mesg05b
.090a	20 e2 0c	                jsr  puts
.090d	a9 0d		                lda  #$0d
.090f	20 dc 0c	                jsr  putch
.0912	a2 50		                ldx  #<mesg00a
.0914	a0 09		                ldy  #>mesg00a
.0916	20 e2 0c	                jsr  puts
.0919	a9 13		               lda  #b_home   ; Goto home position
.091b	20 dc 0c	               jsr  putch
.091e	a9 b7		               lda  #183
.0920	a2 27		               ldx  #39
.0922	20 cf 0c	               jsr  putnch    ; Print Acc X times
.0925	a2 d5		                ldx  #<mesg06a
.0927	a0 0b		                ldy  #>mesg06a
.0929	20 e2 0c	                jsr  puts
.092c	a9 0d		                lda  #$0d
.092e	20 dc 0c	                jsr  putch
.0931	a2 00		                ldx  #<mesg06b
.0933	a0 0c		                ldy  #>mesg06b
.0935	20 e2 0c	                jsr  puts
.0938	a9 0d		                lda  #$0d
.093a	20 dc 0c	                jsr  putch
.093d	a9 af		               lda  #175
.093f	a2 27		               ldx  #39
.0941	20 cf 0c	               jsr  putnch
.0944	a9 0d		               lda  #13       ; a simple LF
.0946	20 dc 0c	               jsr  putch
.0949	20 92 0c	               jsr  screenena
.094c	20 12 0e	               jsr  pop
.094f	60		               rts
>0950	9a 20 2d 2d	mesg00a        .null     b_ltblue, " ------------------------------------- ",b_black
>0954	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0964	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0974	2d 2d 2d 20 90 00
>097a	9a 20 20 20	mesg00b        .null     b_ltblue, "      Change made by this program.     ",b_black
>097e	20 20 20 c3 48 41 4e 47 45 20 4d 41 44 45 20 42
>098e	59 20 54 48 49 53 20 50 52 4f 47 52 41 4d 2e 20
>099e	20 20 20 20 90 00
>09a4	1f 20 31 29	mesg01a        .null     b_blue,   " 1) Obviously the lowercase character  ",b_black
>09a8	20 cf 42 56 49 4f 55 53 4c 59 20 54 48 45 20 4c
>09b8	4f 57 45 52 43 41 53 45 20 43 48 41 52 41 43 54
>09c8	45 52 20 20 90 00
>09ce	1f 20 20 20	mesg01b        .null     b_blue,   "    set is now selected.               ",b_black
>09d2	20 53 45 54 20 49 53 20 4e 4f 57 20 53 45 4c 45
>09e2	43 54 45 44 2e 20 20 20 20 20 20 20 20 20 20 20
>09f2	20 20 20 20 90 00
>09f8	9c 20 32 29	mesg02a        .null     b_purple, " 2) The characterset has been modified ",b_black
>09fc	20 d4 48 45 20 43 48 41 52 41 43 54 45 52 53 45
>0a0c	54 20 48 41 53 20 42 45 45 4e 20 4d 4f 44 49 46
>0a1c	49 45 44 20 90 00
>0a22	9c 20 20 20	mesg02b        .null     b_purple, "    so that the reverse characters are ",b_black
>0a26	20 53 4f 20 54 48 41 54 20 54 48 45 20 52 45 56
>0a36	45 52 53 45 20 43 48 41 52 41 43 54 45 52 53 20
>0a46	41 52 45 20 90 00
>0a4c	9c 20 20 20	mesg02c        .null     b_purple, "    now displayed by default.          ",b_black
>0a50	20 4e 4f 57 20 44 49 53 50 4c 41 59 45 44 20 42
>0a60	59 20 44 45 46 41 55 4c 54 2e 20 20 20 20 20 20
>0a70	20 20 20 20 90 00
>0a76	96 20 33 29	mesg03a        .null     b_ltred,  " 3) The background colour now selects  ",b_black
>0a7a	20 d4 48 45 20 42 41 43 4b 47 52 4f 55 4e 44 20
>0a8a	43 4f 4c 4f 55 52 20 4e 4f 57 20 53 45 4c 45 43
>0a9a	54 53 20 20 90 00
>0aa0	96 20 20 20	mesg03b        .null     b_ltred,  "    the character colour and vice-     ",b_black
>0aa4	20 54 48 45 20 43 48 41 52 41 43 54 45 52 20 43
>0ab4	4f 4c 4f 55 52 20 41 4e 44 20 56 49 43 45 2d 20
>0ac4	20 20 20 20 90 00
>0aca	96 20 20 20	mesg03c        .null     b_ltred,  "    versa.                             ",b_black
>0ace	20 56 45 52 53 41 2e 20 20 20 20 20 20 20 20 20
>0ade	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0aee	20 20 20 20 90 00
>0af4	81 20 34 29	mesg04a        .null     b_orange, " 4) Pros: ",158,"i",28,"n",30,"d",31,"i",129
>0af8	20 d0 52 4f 53 3a 20 9e 49 1c 4e 1e 44 1f 49 81
>0b08	00
>0b09	81 56 90 49	mesg04b        .null     b_orange, "v",144,"i",149,"d",150,"u",151,"a",153,"l",155
>0b0d	95 44 96 55 97 41 99 4c 9b 00
>0b17	81 20 43 48	mesg04c        .null     b_orange, " character back-   ",b_black
>0b1b	41 52 41 43 54 45 52 20 42 41 43 4b 2d 20 20 20
>0b2b	90 00
>0b2d	81 20 20 20	mesg04d        .null     b_orange, "    ground colour is now available as  ",b_black
>0b31	20 47 52 4f 55 4e 44 20 43 4f 4c 4f 55 52 20 49
>0b41	53 20 4e 4f 57 20 41 56 41 49 4c 41 42 4c 45 20
>0b51	41 53 20 20 90 00
>0b57	81 20 20 20	mesg04e        .null     b_orange, "    normal text mode.                  ",b_black
>0b5b	20 4e 4f 52 4d 41 4c 20 54 45 58 54 20 4d 4f 44
>0b6b	45 2e 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0b7b	20 20 20 20 90 00
>0b81	1c 20 35 29	mesg05a        .null     b_red,    " 5) Cons: Only one character colour at ",b_black
>0b85	20 c3 4f 4e 53 3a 20 cf 4e 4c 59 20 4f 4e 45 20
>0b95	43 48 41 52 41 43 54 45 52 20 43 4f 4c 4f 55 52
>0ba5	20 41 54 20 90 00
>0bab	1c 20 20 20	mesg05b        .null     b_red,    "    the time per screen is available.  ",b_black
>0baf	20 54 48 45 20 54 49 4d 45 20 50 45 52 20 53 43
>0bbf	52 45 45 4e 20 49 53 20 41 56 41 49 4c 41 42 4c
>0bcf	45 2e 20 20 90 00
>0bd5	0d 90 d4 52	mesg06a        .null  13,b_black,  "Try to change character colour with:   ",b_black
>0bd9	59 20 54 4f 20 43 48 41 4e 47 45 20 43 48 41 52
>0be9	41 43 54 45 52 20 43 4f 4c 4f 55 52 20 57 49 54
>0bf9	48 3a 20 20 20 90 00
>0c00	90 20 20 20	mesg06b        .null     b_black,  "   poke 53281,# (where # is 0 to 15)   ",b_black
>0c04	50 4f 4b 45 20 35 33 32 38 31 2c 23 20 28 57 48
>0c14	45 52 45 20 23 20 49 53 20 30 20 54 4f 20 31 35
>0c24	29 20 20 20 90 00
.0c2a			rom2ram
.0c2a	20 d3 0d	               jsr  push
.0c2d	ad 0e dc	               lda  $dc0e          ;56334
.0c30	29 fe		               and  #%11111110     ;$fe ou 254
.0c32	8d 0e dc	               sta  $dc0e          ;56334
.0c35	a5 01		               lda  $01
.0c37	29 fb		               and  #%11111011     ;$fb ou 251
.0c39	85 01		               sta  $01
.0c3b	ad 80 0c	               lda  chrom_s
.0c3e	85 fb		               sta  zpage1
.0c40	ad 81 0c	               lda  chrom_s+1
.0c43	85 fc		               sta  zpage1+1
.0c45	ad 82 0c	               lda  chram_s
.0c48	85 fd		               sta  zpage2
.0c4a	ad 83 0c	               lda  chram_s+1
.0c4d	85 fe		               sta  zpage2+1
.0c4f	a2 10		               ldx  #$10           ; copie 8 page de 256 char.
.0c51	a0 00		               ldy  #$00
.0c53	78		               sei
.0c54	ad 84 0c	               lda  xor
.0c57	8d 5d 0c	               sta  skip+1
.0c5a	b1 fb		nexty          lda  (zpage1),y
.0c5c	49 00		skip           eor  #%00000000
.0c5e	91 fd		save           sta  (zpage2),y
.0c60	c8		               iny
.0c61	d0 f7		               bne  nexty
.0c63	ca		               dex
.0c64	f0 07		               beq  out
.0c66	e6 fc		               inc  zpage1+1
.0c68	e6 fe		               inc  zpage2+1
.0c6a	4c 5a 0c	               jmp  nexty
.0c6d			out
.0c6d	58		               cli
.0c6e	a5 01		               lda  $01
.0c70	09 04		               ora  #%00000100     ;#$04
.0c72	85 01		               sta  $01
.0c74	ad 0e dc	               lda  $dc0e          ;56334
.0c77	09 01		               ora  #%00000001     ;$01
.0c79	8d 0e dc	               sta  $dc0e          ;56334
.0c7c	20 12 0e	               jsr  pop
.0c7f	60		               rts
>0c80	00 d0		chrom_s        .word     $d000     ;$d000 a $d800 53284
>0c82	00 20		chram_s        .word     $2000     ;$2000 a $2800 8192
>0c84	00		xor            .byte     $00

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ;  97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c1			stal            =       $c1     ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.0c85			libtart

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.0c85			screendis
.0c85	08		               php
.0c86	48		               pha
.0c87	ad 11 d0	               lda  $d011
.0c8a	29 ef		               and  #%11101111
.0c8c	8d 11 d0	               sta  $d011
.0c8f	68		               pla
.0c90	28		               plp
.0c91	60		               rts
.0c92			screenena
.0c92	08		               php
.0c93	48		               pha
.0c94	ad 11 d0	               lda  $d011
.0c97	09 10		               ora  #%00010000
.0c99	8d 11 d0	               sta  $d011
.0c9c	68		               pla
.0c9d	28		               plp
.0c9e	60		               rts

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0c9f			scrmaninit
.0c9f	20 d3 0d	               jsr  push
.0ca2	a9 06		               lda  #vbleu
.0ca4	8d 21 d0	               sta  vicbackcol
.0ca7	a9 05		               lda  #vvert
.0ca9	8d 20 d0	               sta  vicbordcol
.0cac	a9 01		               lda  #vblanc
.0cae	8d 86 02	               sta  bascol
.0cb1	ad 00 04	               lda  scrnram
.0cb4	29 fd		               and  #%11111101
.0cb6	8d 00 04	               sta  scrnram
.0cb9	20 c0 0c	               jsr  cls
.0cbc	20 12 0e	               jsr  pop
.0cbf	60		               rts
.0cc0			cls
.0cc0	08		               php
.0cc1	48		               pha
.0cc2	a9 93		               lda  #$93
.0cc4	20 dc 0c	               jsr  putch
.0cc7	a9 0e		               lda  #$0e
.0cc9	20 dc 0c	               jsr  putch
.0ccc	68		               pla
.0ccd	28		               plp
.0cce	60		               rts
.0ccf			putnch
.0ccf	08		               php
.0cd0	e0 00		               cpx  #$00
.0cd2	f0 06		               beq  out
.0cd4	20 d2 ff	again          jsr  $ffd2
.0cd7	ca		               dex
.0cd8	d0 fa		               bne  again
.0cda	28		out            plp
.0cdb	60		               rts
.0cdc			putch
.0cdc	08		               php
.0cdd	20 d2 ff	               jsr  $ffd2
.0ce0	28		               plp
.0ce1	60		               rts
.0ce2			puts
.0ce2	20 d3 0d	               jsr  push
.0ce5	86 fb		               stx  zpage1
.0ce7	84 fc		               sty  zpage1+1
.0ce9	a0 00		               ldy  #0
.0ceb	b1 fb		next           lda  (zpage1),y
.0ced	f0 09		               beq  exit
.0cef	20 dc 0c	               jsr  putch
.0cf2	20 da 0e	               jsr  inczp1
.0cf5	4c eb 0c	               jmp  next
.0cf8	20 12 0e	exit           jsr  pop
.0cfb	60		               rts
.0cfc			gotoxy
.0cfc	08		               php
.0cfd	18		               clc
.0cfe	8a		               txa
.0cff	48		               pha
.0d00	98		               tya
.0d01	aa		               tax
.0d02	68		               pla
.0d03	a8		               tay
.0d04	20 f0 ff	               jsr  kplot
.0d07	28		               plp
.0d08	60		               rts
.0d09			cursor
=$0286			bascol    =    $0286
.0d09	08		               php
.0d0a	48		               pha
.0d0b	90 12		               bcc  restore
.0d0d	20 f0 ff	               jsr  kplot
.0d10	8c 31 0d	               sty  cx
.0d13	8e 32 0d	               stx  cy
.0d16	ad 86 02	               lda  bascol
.0d19	8d 33 0d	               sta  bcol
.0d1c	4c 2e 0d	               jmp  out
.0d1f	ae 32 0d	restore        ldx  cy
.0d22	ac 31 0d	               ldy  cx
.0d25	20 f0 ff	               jsr  kplot
.0d28	ad 33 0d	               lda  bcol
.0d2b	8d 86 02	               sta  bascol
.0d2e	68		out            pla
.0d2f	28		               plp
.0d30	60		               rts
>0d31	00		cx   .byte     $00
>0d32	00		cy   .byte     $00
>0d33	00		bcol .byte     $00
.0d34			cursave
.0d34	08		               php
.0d35	38		               sec
.0d36	20 09 0d	               jsr  cursor
.0d39	28		               plp
.0d3a	60		               rts
.0d3b			curput
.0d3b	08		               php
.0d3c	18		               clc
.0d3d	20 09 0d	               jsr  cursor
.0d40	28		               plp
.0d41	60		               rts
.0d42			putsxy
.0d42	20 d3 0d	               jsr  push
.0d45	86 fb		               stx  zpage1
.0d47	84 fc		               sty  zpage1+1
.0d49	a0 00		               ldy  #$00
.0d4b	b1 fb		               lda  (zpage1),y
.0d4d	aa		               tax
.0d4e	20 da 0e	               jsr  inczp1
.0d51	b1 fb		               lda  (zpage1),y
.0d53	a8		               tay
.0d54	20 fc 0c	               jsr  gotoxy
.0d57	20 da 0e	               jsr  inczp1
.0d5a	a6 fb		               ldx  zpage1
.0d5c	a4 fc		               ldy  zpage1+1
.0d5e	20 e2 0c	               jsr  puts
.0d61	20 12 0e	               jsr  pop
.0d64	60		               rts
>0d65	00 00		straddr   .word     $00
>0d67	00		px        .byte     $00
>0d68	00		py        .byte     $00
>0d69	00 00		zp1       .word     $00
.0d6b			putscxy
.0d6b	20 d3 0d	               jsr  push
.0d6e	84 fc		               sty  zpage1+1
.0d70	86 fb		               stx  zpage1
.0d72	ad 86 02	               lda  bascol
.0d75	8d 95 0d	               sta  bc
.0d78	a0 00		               ldy #$00
.0d7a	b1 fb		               lda  (zpage1),y
.0d7c	8d 86 02	               sta  bascol
.0d7f	20 da 0e	               jsr  inczp1
.0d82	a6 fb		               ldx  zpage1
.0d84	a4 fc		               ldy  zpage1+1
.0d86	20 42 0d	               jsr  putsxy
.0d89	ad 95 0d	               lda  bc
.0d8c	8d 86 02	               sta  bascol
.0d8f	20 12 0e	               jsr  pop
.0d92	60		               rts
>0d93	00 00		straddr  .word      $00
>0d95	00		bc       .byte      $00
>0d96	00 00		zp1      .word      $00
.0d98			putrahex
.0d98	08		               php
.0d99	48		               pha
.0d9a	20 e0 0f	               jsr  a2hex
.0d9d	a9 8c		               lda  #<a2hexstr
.0d9f	a0 0f		               ldy  #>a2hexstr
.0da1	20 e2 0c	               jsr  puts
.0da4	68		               pla
.0da5	28		               plp
.0da6	60		               rts
.0da7			kputrahexxy
.0da7			bputrahexxy
.0da7			putrahexxy
.0da7	08		               php
.0da8	20 e0 0f	               jsr  a2hex
.0dab	a9 89		               lda  #<a2hexpos
.0dad	a0 0f		               ldy  #>a2hexpos
.0daf	20 42 0d	               jsr  putsxy
.0db2	68		               pla
.0db3	28		               plp
.0db4	60		               rts
.0db5			putrahexcxy
.0db5	08		               php
.0db6	20 e0 0f	               jsr  a2hex
.0db9	a9 89		               lda  #<a2hexpos
.0dbb	a0 0f		               ldy  #>a2hexpos
.0dbd	20 6b 0d	               jsr  putscxy
.0dc0	68		               pla
.0dc1	28		               plp
.0dc2	60		               rts
.0dc3			setinverse
.0dc3	48		               pha
.0dc4	a9 12		               lda  #$12
.0dc6	20 d2 ff	               jsr  $ffd2
.0dc9	68		               pla
.0dca	60		               rts
.0dcb			clrinverse
.0dcb	48		               pha
.0dcc	a9 92		               lda  #$92
.0dce	20 d2 ff	               jsr  $ffd2
.0dd1	68		               pla
.0dd2	60		               rts

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.0dd3			push
.0dd3	08		          php            ; stack : flg, pcl, pch
.0dd4	78		          sei
.0dd5	8d 0f 0e	          sta  ra        ; save a
.0dd8	68		          pla            ; stack : pcl, pch
.0dd9	8d 0e 0e	          sta  rp        ; save rp
.0ddc	68		          pla            ; stack : pch
.0ddd	8d 10 0e	          sta  pc        ; save pcl
.0de0	68		          pla            ; stack : -
.0de1	8d 11 0e	          sta  pc+1      ; save pch
.0de4	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0de6	48		          pha            ; stack : zp1l
.0de7	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0de9	48		          pha            ; stack : zp1h, zp1l
.0dea	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0dec	48		          pha            ; stack : zp2l, zp1h, zp1l
.0ded	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0def	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0df0	ad 0e 0e	          lda  rp        ; get rp
.0df3	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0df4	ad 0f 0e	          lda  ra        ; get a
.0df7	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0df8	8a		          txa            ; get x
.0df9	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0dfa	98		          tya            ; get y
.0dfb	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0dfc	ad 11 0e	          lda  pc+1      ; get pch
.0dff	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e00	ad 10 0e	          lda  pc        ; get pcl
.0e03	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e04	ad 0e 0e	          lda  rp        ; get rp
.0e07	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e08	ad 0f 0e	          lda  ra        ; get a
.0e0b	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e0c	58		          cli
.0e0d	60		          rts
>0e0e	00		rp        .byte     0
>0e0f	00		ra        .byte     0
>0e10	00 00		pc        .word     0
.0e12			pull
.0e12			pop
.0e12	78		          sei
.0e13	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e14	8d 47 0e	          sta  pc        ; save pcl
.0e17	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e18	8d 48 0e	          sta  pc+1      ; save pch
.0e1b	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e1c	a8		          tay            ; set y
.0e1d	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0e1e	aa		          tax            ; set x
.0e1f	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0e20	8d 46 0e	          sta  ra        ; save a
.0e23	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0e24	8d 45 0e	          sta  rp        ; save rp
.0e27	68		          pla            ; stack : zp2l, zp1h, zp1l
.0e28	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0e2a	68		          pla            ; stack : zp1h, zp1l
.0e2b	85 fd		          sta  zpage2    ; get zpage2 High byte
.0e2d	68		          pla            ; stack : zp1l
.0e2e	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0e30	68		          pla            ; stack :
.0e31	85 fb		          sta  zpage1    ; get zpage1 High byte
.0e33	ad 48 0e	          lda  pc+1      ; get pch
.0e36	48		          pha            ; stack : pch
.0e37	ad 47 0e	          lda  pc
.0e3a	48		          pha            ; stack : pcl, pch
.0e3b	ad 45 0e	          lda  rp        ; get rp
.0e3e	48		          pha            ; stack : rp, pcl, pch
.0e3f	ad 46 0e	          lda  ra        ; set ra
.0e42	58		          cli
.0e43	28		          plp            ; stack : pcl, pch
.0e44	60		          rts
>0e45	00		rp        .byte     0
>0e46	00		ra        .byte     0
>0e47	00 00		pc        .word     0

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.0e49			blkfill
.0e49	20 d3 0d	bf0            jsr  push
.0e4c	20 07 0f	               jsr  savezp1
.0e4f	84 fc		               sty  zpage1+1
.0e51	a0 00		               ldy  #$00
.0e53	84 fb		               sty  zpage1
.0e55	91 fb		bf1            sta  (zpage1),y
.0e57	c8		               iny
.0e58	d0 fb		               bne  bf1
.0e5a	20 16 0f	               jsr  restzp1
.0e5d	20 12 0e	               jsr  pop
.0e60	60		               rts
.0e61			memfill
.0e61	20 d3 0d	               jsr  push
.0e64	20 49 0e	mf1            jsr  blkfill
.0e67	c8		               iny
.0e68	ca		               dex
.0e69	d0 f9		               bne  mf1
.0e6b	20 12 0e	               jsr  pop
.0e6e	60		               rts
.0e6f			memmove
.0e6f	20 d3 0d	               jsr  push
.0e72	ba		               tsx            ; On se crée un pointeur ...
.0e73	8a		               txa
.0e74	18		               clc
.0e75	69 0b		               adc  #11
.0e77	a8		               tay
.0e78	a2 06		               ldx  #$06
.0e7a	b9 00 01	nextbyte       lda  $0100,y
.0e7d	99 c9 0e	               sta  words,y
.0e80	c8		               iny
.0e81	ca		               dex
.0e82	d0 f6		               bne  nextbyte
.0e84	ad c9 0e	               lda  s
.0e87	8d a0 0e	               sta  source+1
.0e8a	ad ca 0e	               lda  s+1
.0e8d	8d a1 0e	               sta  source+2
.0e90	ad cb 0e	               lda  d
.0e93	8d 9d 0e	               sta  destin+1
.0e96	ad cc 0e	               lda  d+1
.0e99	8d 9e 0e	               sta  destin+2
.0e9c	ad ff ff	destin         lda  $ffff
.0e9f	8d ff ff	source         sta  $ffff
.0ea2	ee 9d 0e	               inc  destin+1
.0ea5	d0 03		               bne  src
.0ea7	ee 9e 0e	               inc  destin+2
.0eaa	ee a0 0e	src            inc  source+1
.0ead	d0 03		               bne  cnt
.0eaf	ee a1 0e	               inc  source+2
.0eb2	ad cd 0e	cnt            lda  compte
.0eb5	d0 08		               bne  decit
.0eb7	ad ce 0e	               lda  compte+1
.0eba	f0 09		               beq  fini
.0ebc	ce ce 0e	               dec  compte+1
.0ebf	ce cd 0e	decit          dec  compte
.0ec2	4c 9c 0e	               jmp  destin
.0ec5	20 12 0e	fini           jsr  pop
.0ec8	60		               rts
.0ec9			words
>0ec9	00 00		s         .word     $0000
>0ecb	00 00		d         .word     $0000
>0ecd	00 00		compte    .word     $0000
.0ecf			decword
.0ecf	20 d3 0d	               jsr  push
.0ed2	86 fd		               stx  zpage2
.0ed4	84 fe		               sty  zpage2+1
.0ed6	20 12 0e	               jsr  pop
.0ed9	60		               rts
.0eda			inczp1
.0eda	08		               php
.0edb	e6 fb		               inc  zpage1
.0edd	d0 02		               bne  nopage
.0edf	e6 fc		               inc  zpage1+1
.0ee1	28		nopage         plp
.0ee2	60		               rts
.0ee3			deczp1
.0ee3	08		                php
.0ee4	48		                pha
.0ee5	c6 fb		                dec  zpage1
.0ee7	d0 02		                bne  nopage
.0ee9	c6 fc		                dec  zpage1+1
.0eeb	c6 fb		nopage          dec  zpage1
.0eed	68		                pla
.0eee	28		                plp
.0eef	60		                rts
.0ef0			inczp2
.0ef0	08		               php
.0ef1	48		               pha
.0ef2	e6 fd		               inc  zpage2
.0ef4	d0 02		               bne  nopage
.0ef6	e6 fe		               inc  zpage2+1
.0ef8	68		nopage         pla
.0ef9	28		               plp
.0efa	60		               rts
.0efb			deczp2
.0efb	08		               php
.0efc	48		               pha
.0efd	a5 fd		               lda  zpage2
.0eff	d0 02		               bne  nopage
.0f01	c6 fe		               dec  zpage2+1
.0f03	c6 fd		nopage         dec  zpage2
.0f05	28		               plp
.0f06	60		               rts
.0f07			savezp1
.0f07	08		               php
.0f08	48		               pha
.0f09	a5 fb		               lda  zpage1
.0f0b	8d 83 0f	               sta  zp1
.0f0e	a5 fc		               lda  zpage1+1
.0f10	8d 84 0f	               sta  zp1+1
.0f13	68		               pla
.0f14	28		               plp
.0f15	60		               rts
.0f16			restzp1
.0f16	08		               php
.0f17	48		               pha
.0f18	ad 83 0f	               lda zp1
.0f1b	85 fb		               sta zpage1
.0f1d	ad 84 0f	               lda zp1+1
.0f20	85 fc		               sta zpage1+1
.0f22	68		               pla
.0f23	28		               plp
.0f24	60		               rts
.0f25			savezp2
.0f25	08		         php
.0f26	48		         pha
.0f27	a5 fd		         lda zpage2
.0f29	8d 85 0f	         sta zp2
.0f2c	a5 fe		         lda zpage2+1
.0f2e	8d 86 0f	         sta zp2+1
.0f31	68		         pla
.0f32	28		         plp
.0f33	60		         rts
.0f34			restzp2
.0f34	08		                php
.0f35	48		                pha
.0f36	ad 85 0f	                lda  zp2
.0f39	85 fd		                sta  zpage2
.0f3b	ad 86 0f	                lda  zp2+1
.0f3e	85 fe		                sta  zpage2+1
.0f40	68		                pla
.0f41	28		                plp
.0f42	60		                rts
.0f43			xy2addr
.0f43	08		                php
.0f44	48		                pha
.0f45	8a		                txa
.0f46	48		                pha
.0f47	98		                tya
.0f48	48		                pha
.0f49	ad 7e 0f	                lda     addr1+1
.0f4c	8d 80 0f	                sta     addr2+1
.0f4f	ad 7d 0f	                lda     addr1
.0f52	8d 7f 0f	                sta     addr2
.0f55	c0 00		                cpy     #$00
.0f57	f0 0f		                beq     addx
.0f59	18		moreline        clc
.0f5a	6d 7c 0f	                adc     ymult
.0f5d	90 03		                bcc     norepy
.0f5f	ee 80 0f	                inc     addr2+1
.0f62	8d 7f 0f	norepy          sta     addr2
.0f65	88		                dey
.0f66	d0 f1		                bne     moreline
.0f68	8a		addx            txa
.0f69	18		                clc
.0f6a	6d 7f 0f	                adc     addr2
.0f6d	90 03		                bcc     thatsit
.0f6f	ee 80 0f	                inc     addr2+1
.0f72	8d 7f 0f	thatsit         sta     addr2
.0f75	68		                pla
.0f76	a8		                tay
.0f77	68		                pla
.0f78	aa		                tax
.0f79	68		                pla
.0f7a	28		                plp
.0f7b	60		                rts
>0f7c	28		ymult          .byte     40
>0f7d	00 00		addr1          .word     $0000
>0f7f	00 00		addr2          .word     $0000
>0f81	00 00		bytecnt        .word     $0000
>0f83	00 00		zp1        .word   $0000
>0f85	00 00		zp2        .word   $0000

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>0f87	01		a2hexcol       .byte     1              ; pour aputscxy
>0f88	00		a2hexbkcol     .byte     %00000000
.0f89			a2hexpos
>0f89	00		a2hexpx        .byte     0              ; pour aputsxy
>0f8a	00		a2hexpy        .byte     0
>0f8b	24		a2hexprefix    .byte     "$"            ; pour aputs
>0f8c	00 00		a2hexstr       .word     $00
>0f8e	00 00		               .word     $00
>0f90	00		               .byte     0              ; 0 end string
.0f91			putahexfmtxy
.0f91	20 d3 0d	               jsr  push
.0f94	20 e0 0f	               jsr  a2hex
.0f97	ae 89 0f	               ldx  a2hexpx
.0f9a	ac 8a 0f	               ldy  a2hexpy
.0f9d	20 fc 0c	               jsr  gotoxy
.0fa0	a2 8b		               ldx  #<a2hexprefix
.0fa2	a0 0f		               ldy  #>a2hexprefix
.0fa4	20 e2 0c	               jsr  puts
.0fa7	20 12 0e	               jsr  pop
.0faa	60		               rts
.0fab			putahexfmt
.0fab	20 d3 0d	               jsr  push
.0fae	20 e0 0f	               jsr  a2hex
.0fb1	a2 8b		               ldx  #<a2hexprefix
.0fb3	a0 0f		               ldy  #>a2hexprefix
.0fb5	20 e2 0c	               jsr  puts
.0fb8	20 12 0e	               jsr  pop
.0fbb	60		               rts
.0fbc			putahex
.0fbc	20 d3 0d	               jsr  push
.0fbf	20 e0 0f	               jsr  a2hex
.0fc2	a2 8c		               ldx  #<a2hexstr
.0fc4	a0 0f		               ldy  #>a2hexstr
.0fc6	20 e2 0c	               jsr  puts
.0fc9	20 12 0e	               jsr  pop
.0fcc	60		               rts
.0fcd			nib2hex
.0fcd	08		               php
.0fce	29 0f		               and  #$0f
.0fd0	f8		               sed
.0fd1	18		               clc
.0fd2	69 90		               adc  #$90
.0fd4	69 40		               adc  #$40
.0fd6	d8		               cld
.0fd7	28		               plp
.0fd8	60		               rts
.0fd9			lsra4bits
.0fd9	08		               php
.0fda	4a		               lsr
.0fdb	4a		               lsr
.0fdc	4a		               lsr
.0fdd	4a		               lsr
.0fde	28		               plp
.0fdf	60		               rts
.0fe0			a2hex
.0fe0	08		               php
.0fe1	48		               pha
.0fe2	48		               pha
.0fe3	20 d9 0f	               jsr  lsra4bits
.0fe6	20 cd 0f	               jsr  nib2hex
.0fe9	8d 8c 0f	               sta  a2hexstr
.0fec	68		               pla
.0fed	20 cd 0f	               jsr  nib2hex
.0ff0	8d 8d 0f	               sta  a2hexstr+1
.0ff3	a9 00		               lda  #$00                ; set end of string
.0ff5	8d 8e 0f	               sta  a2hexstr+2
.0ff8	68		               pla
.0ff9	28		               plp
.0ffa	60		               rts
.0ffb			xy2hex
.0ffb	20 d3 0d	               jsr  push
.0ffe	20 e0 0f	               jsr  a2hex
.1001	8a		               txa
.1002	48		               pha
.1003	20 d9 0f	               jsr  lsra4bits
.1006	20 cd 0f	               jsr  nib2hex
.1009	8d 8c 0f	               sta  a2hexstr
.100c	68		               pla
.100d	20 cd 0f	               jsr  nib2hex
.1010	8d 8d 0f	               sta  a2hexstr+1
.1013	98		               tya
.1014	48		               pha
.1015	20 d9 0f	               jsr  lsra4bits
.1018	20 cd 0f	               jsr  nib2hex
.101b	8d 8e 0f	               sta  a2hexstr+2
.101e	68		               pla
.101f	20 cd 0f	               jsr  nib2hex
.1022	8d 8f 0f	               sta  a2hexstr+3
.1025	a9 00		               lda  #$00                ; 0 ended string
.1027	8d 90 0f	               sta  a2hexstr+4
.102a	20 12 0e	               jsr  pop
.102d			atobin
.102d	20 d3 0d	               jsr     push
.1030	a2 08		               ldx     #8
.1032	a0 00		               ldy     #0
.1034	2a		nextbit        rol
.1035	48		               pha
.1036	69 00		               adc     #$00
.1038	29 01		               and     #$01
.103a	20 cd 0f	               jsr     nib2hex
.103d	99 4e 10	               sta     abin,y
.1040	68		               pla
.1041	c8		               iny
.1042	ca		               dex
.1043	d0 ef		               bne     nextbit
.1045	a9 00		               lda     #0
.1047	99 4e 10	               sta     abin,y
.104a	20 12 0e	               jsr     pull
.104d	60		               rts
>104e	30 30 30 30	abin           .null   "00000000"
>1052	30 30 30 30 00
.1057			putabin
.1057	20 2d 10	               jsr     atobin
.105a	20 d3 0d	               jsr     push
.105d	a2 4e		               ldx     #<abin
.105f	a0 10		               ldy     #>abin
.1061	20 e2 0c	               jsr     puts
.1064	20 12 0e	               jsr     pop
.1067	60		               rts
.1068			putabinfmt
.1068	08		               php
.1069	48		               pha
.106a	a9 25		               lda     #"%"
.106c	20 dc 0c	               jsr     putch
.106f	68		               pla
.1070	20 57 10	               jsr     putabin
.1073	28		               plp
.1074	60		               rts
.1075			putabinxy
.1075	20 fc 0c	               jsr     gotoxy
.1078	20 57 10	               jsr     putabin
.107b	60		               rts
.107c			putabinfmtxy
.107c	20 fc 0c	               jsr     gotoxy
.107f	20 68 10	               jsr     putabinfmt
.1082	60		               rts

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-disk.asm

.1083			diskerror
.1083	20 d3 0d	               jsr  push
.1086	ad b4 11	               lda  dsk_dev   ; Select device 8
.1089	85 ba		               sta  $ba       ;
.108b	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.108e	a9 6f		               lda  #$6f
.1090	85 b9		               sta  $b9       ;
.1092	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.1095	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.1098	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.109b	c9 0d		               cmp  #$0d      ; Is it CR ?
.109d	d0 f6		               bne  nextchar  ; No, get next char
.109f	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.10a2	20 12 0e	               jsr  pop
.10a5	60		               rts
.10a6			diskdir
.10a6	20 d3 0d	               jsr  push
.10a9	a9 24		               lda  #$24      ; L012C - Filename is "$"
.10ab	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.10ad	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.10af	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.10b1	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.10b3	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.10b5	a9 01		               lda  #$01      ; L0138 - set ...
.10b7	85 b7		               sta  $b7       ; L013A - ... length of current filename
.10b9	ad b4 11	               lda  dsk_dev   ; L013C - set 8 as ...
.10bc	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.10be	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.10c0	85 b9		               sta  $b9       ; L0142 - ... secondary address
.10c2	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.10c5	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...%10111010
.10c7	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.10ca	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.10cc	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.10cf	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.10d1	85 90		               sta  $90       ; L0153 - ... kernal status word.
.10d3	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.10d5	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.10d7	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.10da	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.10dc	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.10de	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.10e0	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.10e3	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.10e5	d0 28		               bne  exit      ; L0167
.10e7	a4 fb		               ldy  $fb       ; L0169
.10e9	88		               dey            ; L016b
.10ea	d0 e9		               bne  loop1     ; L016C - If not last, loop
.10ec	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.10ee	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.10f1	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.10f3	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.10f6	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.10f9	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.10fb	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.10fd	aa		               tax            ; L017F - tfr a in x
.10fe	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.1100	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.1103	4c f6 10	               jmp  loop3     ; L0185 - get another byte
.1106	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.1108	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.110b	a0 02		               ldy  #$02      ; L018D - set Y to 2
.110d	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.110f	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.1112	20 12 0e	               jsr  pop
.1115	60		               rts            ; L0194
.1116			directory
.1116	20 a6 10	               jsr  diskdir
.1119	20 83 10	               jsr  diskerror
.111c	60		               rts
.111d			memtofile
.111d	20 8e 11	               jsr  dsk_putmesg
.1120	20 d3 0d	               jsr  push
.1123	ad b8 11	               lda  dsk_fnlen
.1126	ae b6 11	               ldx  dsk_fnptr      ; load fname addr. lbyte
.1129	ac b7 11	               ldy  dsk_fnptr+1
.112c	20 bd ff	               jsr  setnam         ; call setnam
.112f	ad b5 11	               lda  dsk_lfsno
.1132	ae b4 11	               ldx  dsk_dev        ; specified device
.1135	a0 00		skip           ldy  #$00
.1137	20 ba ff	               jsr  setlfs         ; call setlfs
.113a	ad b0 11	               lda  dsk_data_s     ; put data start lbyte in stal
.113d	85 c1		               sta  stal
.113f	ad b1 11	               lda  dsk_data_s+1   ; put data start hbyte in stal
.1142	85 c2		               sta  stal+1
.1144	ae b2 11	               ldx  dsk_data_e     ; put data end lbyte in x
.1147	ac b3 11	               ldy  dsk_data_e+1   ; put data end hbyte in y
.114a	a9 c1		               lda  #stal          ; start address located in $c1/$c2
.114c	20 d8 ff	               jsr  save           ; call save
.114f	90 00		               bcc  noerror        ; if carry set, a load error has happened
.1151	20 12 0e	noerror        jsr  pop
.1154	60		               rts
.1155			filetomem
.1155	20 d3 0d	               jsr push
.1158	ad b8 11	               lda dsk_fnlen
.115b	ae b6 11	               ldx dsk_fnptr
.115e	ac b7 11	               ldy dsk_fnptr+1
.1161	20 bd ff	               jsr setnam     ; call setnam
.1164	ad b5 11	               lda dsk_lfsno
.1167	ae b4 11	               ldx dsk_dev    ; default to device 8
.116a	a0 01		               ldy #$01       ; not $01 means: load to address stored in file
.116c	20 ba ff	               jsr setlfs     ; call setlfs
.116f	a9 00		               lda #$00       ; $00 means: load to memory (not verify)
.1171	20 d5 ff	               jsr load       ; call load
.1174	90 03		               bcc noerror      ; if carry set, a load error has happened
.1176	20 7d 11	               jsr  error
.1179	20 12 0e	noerror        jsr pop
.117c	60		               rts
.117d			error
.117d	60		               rts
.117e	a2 c9		error1         ldx  #<dsk_emsg1
.1180	a0 11		               ldy  #>dsk_emsg1
.1182	20 e2 0c	               jsr  puts
.1185	60		               rts
.1186	a2 dd		error2         ldx #<dsk_emsg2
.1188	a0 11		               ldy #>dsk_emsg2
.118a	20 e2 0c	               jsr puts
.118d	60		               rts
.118e			dsk_putmesg
.118e	20 d3 0d	               jsr push
.1191	a2 b9		               ldx #<dsk_msg0
.1193	a0 11		               ldy #>dsk_msg0
.1195	20 e2 0c	               jsr puts
.1198	a9 20		               lda #$20
.119a	20 dc 0c	               jsr putch
.119d	ae b6 11	               ldx dsk_fnptr
.11a0	ac b7 11	               ldy dsk_fnptr+1
.11a3	20 e2 0c	               jsr puts
.11a6	ad b5 11	               lda dsk_lfsno
.11a9	20 c3 ff	               jsr close
.11ac	20 12 0e	               jsr pop
.11af	60		               rts
>11b0	00 00		dsk_data_s     .word     $0000    ; example addresses
>11b2	00 20		dsk_data_e     .word     $2000
>11b4	08		dsk_dev        .byte     $08
>11b5	00		dsk_lfsno      .byte     $00
>11b6	00 00		dsk_fnptr      .word     $00
>11b8	00		dsk_fnlen      .byte     0
>11b9	8d		dsk_msg0       .byte     141
>11ba	53 41 56 49	               .null     "saving"
>11be	4e 47 00
>11c1	8d		dsk_msg1       .byte     141
>11c2	53 55 43 43	               .null     "succes"
>11c6	45 53 00
>11c9	8d		dsk_emsg1      .byte     141
>11ca	46 49 43 48	               .null     "fichier non ouvert"
>11ce	49 45 52 20 4e 4f 4e 20 4f 55 56 45 52 54 00
>11dd	11		dsk_emsg2      .byte     17
>11de	45 52 52 45	               .null     "erreur d'ecriture"
>11e2	55 52 20 44 27 45 43 52 49 54 55 52 45 00

;******  Return to file: rvrscharset.asm


;******  End of listing

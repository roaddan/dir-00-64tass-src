;  .include "showregs.s";---------------------------------------------------------------------; Affiche en hexadécimal le contenu des registres A, X, Y, P, S et PC; sur la ligne 25 de l'écran.;---------------------------------------------------------------------showregs          .blockline      =    24coln      =    0colr      =    vgris2bkcol     =    hr_bkcol3          jsr  hr_setinverse          sta  rega           ;stack-> pch, pcl          stx  regx          sty  regy          tsx             stx  regs          php                 ;stack-> p, pch, pcl          pla                 ;stack-> pch, pcl          sta  regp          pla                 ;stack-> pcl               sta  regpcl                   pla                 ;stack->           sta  regpch         ;conversion de A en hexadecimal          lda  rega          pha                 ;stack-> a          jsr  nib2hex          sta  vala+1          pla                 ;stack->           jsr  lsra4bits          jsr  nib2hex          sta  vala;conversion de Y en hexadecimal          lda  regy          pha                 ;stack-> a          jsr  nib2hex          sta  valy+1          pla                 ;stack->           jsr  lsra4bits          jsr  nib2hex          sta  valy;conversion de X en hexadecimal          lda  regx          pha                 ;stack-> a          jsr  nib2hex          sta  valx+1          pla                 ;stack->          jsr  lsra4bits          jsr  nib2hex          sta  valx;conversion de P en hexadecimal          lda  regp          pha                 ;stack-> a          jsr  nib2hex          sta  valp+1          pla                 ;stack->           jsr  lsra4bits          jsr  nib2hex          sta  valp;conversion de S en hexadecimal          lda  regs          pha                 ;stack-> a          jsr  nib2hex          sta  vals+1          pla                 ;stack->           jsr  lsra4bits          jsr  nib2hex          sta  vals;conversion de pch en hexadecimal          lda  regpch          pha                 ;stack-> a          jsr  nib2hex          sta  valpch+1          pla                 ;stack->           jsr  lsra4bits          jsr  nib2hex          sta  valpch;conversion de pcl en hexadecimal          lda  regpcl          pha                 ;stack-> a          jsr  nib2hex          sta  valpcl+1          pla                 ;stack->           jsr  lsra4bits          jsr  nib2hex          sta  valpcl; On affiche les chaines          sei          ldx  #<srega          ldy  #>srega+1          jsr  hr_putscxy          ldx  #<sregx          ldy  #>sregx+1          jsr  hr_putscxy          ldx  #<sregy          ldy  #>sregy+1          jsr  hr_putscxy          ldx  #<sregp          ldy  #>sregp+1          jsr  hr_putscxy          ldx  #<sregs          ldy  #>sregs+1          jsr  hr_putscxy          ldx  #<sregpc          ldy  #>sregpc+1          jsr  hr_putscxy          cli          lda  regpch          pha                 ;stack-> pcl          lda  regpcl          pha                 ;stack-> pch, pcl          ;ldx  regs          ;txs          ldy  regy          ldx  regx          lda  rega          lda  regp          pha                 ;stack-> p, pch, pcl          plp                 ;stack-> pch, pcl          jsr  hr_clrinverse          rts          srega     .byte     colr,bkcol,coln,line          .text     ' a:$' ;4,24vala      .byte     0,0,0sregx     .byte     colr,bkcol,coln+6,line          .text     ' x:$' ;4,24valx      .byte     0,0,0sregy     .byte     colr,bkcol,coln+12,line          .text     ' y:$' ;4,24valy      .byte     0,0,0sregp     .byte     colr,bkcol,coln+18,line          .text     ' p:$' ;4,24valp      .byte     0,0,0sregs     .byte     colr,bkcol,coln+24,line          .text     ' s:$' ;4,24vals      .byte     0,0,0sregpc    .byte     colr,bkcol,coln+30,line          .text     ' pc:$' ;4,24valpch    .byte     0,0valpcl    .byte     0,0,32,0rega      .byte     0regx      .byte     0regy      .byte     0regp      .byte     0regs      .byte     0regpch    .byte     0regpcl    .byte     0          .bend
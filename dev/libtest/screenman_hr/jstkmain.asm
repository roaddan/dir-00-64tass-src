*= $801.word (+), 10.null $9e, "2061"+ .word 0;---------------------------------------------------------------------;;---------------------------------------------------------------------          .include "c64map.asm"          .include "butils.asm"          .include "hexutils.asm"          .include "initnmi.asm"          .include "memutils.asm"          .include "showregs.asm"          .include "sutils.asm"          .include "joystick.asm"main                .block          jmp init          .enc "screen"  ; Encodage écran du texte.bstring1  .byte vvert1,5,0                  .text "  Visualisation des registres  "          .byte 0bstring2  .byte vvert1,5,1          .text " Programme en assembleur 6502. "          .byte 0bstring3  .byte vvert1,9,4          .text "Ceci est en couleur 5."          .byte 0bstring4  .byte vvert1,5,2          .text "      Par Daniel Lafrance.     "          .byte 0init               ;jsr initnmi        ; À utiliser avec TMPreu          jsr  setmyint          jsr  scls          lda  #23          sta  53272          lda  #15          sta  curcol          lda  #vnoir          sta  bakcol          lda  #vgris0          sta  brdcol          jsr  scls          jsr  ssetinversegoagain   ldx  #<bstring1           ldy  #>bstring1          jsr  sputscxy          ldx  #<bstring2           ldy  #>bstring2          jsr  sputscxy          ldx  #<bstring4           ldy  #>bstring4          jsr  sputscxy          jsr  sclrinverselooper    inx          dey          jsr  showregs          jmp  looperout       rts          .bend;---------------------------------------------------------------------          ;          ;---------------------------------------------------------------------                    myintrastlino  =    215          .block          php          pha          ;inc  scrnram0          ;inc  scrncol0          lda  #vbleu0          sta  $d021     scanit    lda  vicscan          cmp  #rastlino+40          bne  scanitgoblack   lda  #vnoir          sta  $d021               pla                    plp          ;jmp  (jumpback)          jmp $ea31          .bendjumpback  .word $00setmyint          .blockintvect   =    $0314          php          pha          lda  intvect          sta  jumpback          lda  intvect+1          sta  jumpback+1          sei            lda  #%01111111     ; switch off interrupt signals from CIA-1          sta  $dc0d          and  $d011          ; clear most significant bit of VIC's raster register          sta  $d011          lda  $dc0d          ; acknowledge pending interrupts from CIA-1          lda  $dd0d          ; acknowledge pending interrupts from CIA-2          lda  #rastlino      ; set rasterline where interrupt shall occur          sta  $d012          lda  #<myint        ; set interrupt vectors, pointing to interrupt service routine below          sta  intvect          lda  #>myint          sta  intvect+1          lda  #%00000001     ; enable raster interrupt signals from VIC          sta  $d01a          cli          pla          plp          rts         .bend

; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --line-numbers --tab-size=4 --cbm-prg -C -m -a -I "/home/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib" -i -L joystick2-mc.txt -o joystick2-mc.prg joystick2-mc.asm
; Sat Apr 30 22:25:39 2022

;Line	;Offset	;Hex			;Source

:1		;******  Processing input file: joystick2-mc.asm

2		>0801	0b 08 0a 00		.word (+), 10
3		>0805	9e 32 30 36		.null $9e, "2061"
		>0809	31 00
4		>080b	00 00			+ .word 0

:2		;******  Processing file: "/home/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_map_kernal.asm"

21		.080d					        c
22		=$90					kiostatus = $90       ; Kernal I/O status word (st) (byte)
23		=$b7					curfnlen  = $b7       ; Current filename length (byte)
24		=$b9					cursecadd = $b9       ; Current secondary address (byte)
25		=$ba					curdevno  = $ba       ; Current device number (byte)
26		=$bb					curfptr   = $bb       ; Current file pointer (word)
27		=$fb					zpage1    = $fb       ; zero page 1 address (word)
28		=$fd					zpage2    = $fd       ; zero page 2 address (word)
29		=$fb					zeropage  = zpage1
30		=$fd					zonepage  = zpage2
31		=$0286					bascol    = $0286     ;basic next chr colscreenram (byte)
32		=$0400					scrnram   = $0400     ;video character ram
33		=$0400					scrram0   = $0400
34		=$0500					scrram1   = $0500
35		=$0600					scrram2   = $0600
36		=$0700					scrram3   = $0700
37		=$0801					basicsta  = $0801     ;basic start address
38		=$a000					basicrom  = $a000
39		=$d400					sid       = $d400     ;sid base address
40		=$d800					colorram  = $d800     ;video color ram
41		=$d800					colram0   = $d800
42		=$d900					colram1   = $d900
43		=$da00					colram2   = $da00
44		=$db00					colram3   = $db00
45		=$dc00					cia1      = $dc00     ;cia1  base address
46		=$dd00					cia2      = $dd00     ;cia2 base address
47		=$e000					kernalrom = $e000
51		=$03					bstop     =    $03      ;stop
52		=$05					bwhite    =    $05      ;set color white
53		=$08					block     =    $08      ;lock the charset
54		=$09					bunlock   =    $09      ;unlock the charset
55		=$0d					bcarret   =    $0d
56		=$0e					btext     =    $0e
57		=$11					bcrsdn    =    $11      ;cursor down 1 line
58		=$12					brevcol   =    $12
59		=$13					bhome     =    $13
60		=$14					bdelete   =    $14
61		=$1c					bred      =    $1c
62		=$1d					bcuright  =    $1d
63		=$1e					bgreen    =    $1e
64		=$1f					bblue     =    $1f
65		=$81					borange   =    $81
66		=$83					blrun     =    $83
67		=$85					bfkey1    =    $85
68		=$86					bfkey2    =    $86
69		=$87					bfkey3    =    $87
70		=$88					bfkey4    =    $88
71		=$89					bfkey5    =    $89
72		=$8a					bfkey6    =    $8a
73		=$8b					bfkey7    =    $8b
74		=$8c					bfkey8    =    $8c
75		=$8d					bcarret1  =    $8d
76		=$8e					bgraph    =    $8e
77		=$90					bblack    =    $90
78		=$91					bcuup     =    $91
79		=$92					brevoff   =    $92
80		=$93					bclear    =    $93
81		=$94					binsert   =    $94
82		=$95					bbrown    =    $95
83		=$96					bltred    =    $96
84		=$97					bdkgrey   =    $97
85		=$98					bmdgrey   =    $98
86		=$99					bltgreen  =    $99
87		=$9a					bltblue   =    $9a
88		=$9b					bltgrey   =    $9b
89		=$9c					bmagenta  =    $9c
90		=$9d					bculeft   =    $9d
91		=$9e					byellow   =    $9e
92		=$9f					bcyan     =    $9f
97		=$0286					carcol  = $0286
98		=$030a					ieval   = $030a
100		=$73					chrget  = $73
101		=$79					chrgot  = $79
131		=$0						cnoir       = $0
132		=$1						cblanc      = $1
133		=$2						crouge      = $2
134		=$3						cocean      = $3
135		=$4						cmauve      = $4
136		=$5						cvert       = $5
137		=$6						cbleu       = $6
138		=$7						cjaune      = $7
139		=$8						corange     = $8
140		=$9						cbrun       = $9
141		=$a						crose       = $a
142		=$b						cgrisfonce  = $b
143		=$c						cgrismoyen  = $c
144		=$d						cvertpale   = $d
145		=$e						cbleupale   = $e
146		=$f						cgrispale   = $f
148		=$0						cblack      = $0
149		=$1						cwhite      = $1
150		=$2						cred        = $2
151		=$3						ccyan       = $3
152		=$4						cpurple     = $4
153		=$5						cgreen      = $5
154		=$6						cblue       = $6
155		=$7						cyellow     = $7
157		=$9						cbrown      = $9
158		=$a						clightred   = $a
159		=$b						cdarkgray   = $b
160		=$c						cmidgray    = $c
161		=$d						clightgreen = $d
162		=$e						clightblue  = $e
163		=$f						clightgray  = $f
176		=$00					vnoir     =    %00000000
177		=$00					vblack    =    %00000000
178		=$01					vblanc    =    %00000001
179		=$01					vwhite    =    %00000001
180		=$02					vrouge    =    %00000010
181		=$02					vred      =    %00000010
182		=$03					vocean    =    %00000011
183		=$03					vcyan     =    %00000011
184		=$04					vmauve    =    %00000100
185		=$04					vpurple   =    %00000100
186		=$05					vvert     =    %00000101
187		=$05					vgreen    =    %00000101
188		=$06					vbleu     =    %00000110
189		=$06					vblue     =    %00000110
190		=$07					vjaune    =    %00000111
191		=$07					vyellow   =    %00000111
192		=$08					vorange   =    %00001000
193		=$09					vbrun     =    %00001001
194		=$09					vbrown    =    %00001001
195		=$0a					vrose     =    %00001010
196		=$0a					vpink     =    %00001010
197		=$0b					vgris     =    %00001011
198		=$0b					vgray     =    %00001011
199		=$0b					vgrey     =    %00001011
200		=$0c					vgris1    =    %00001100
201		=$0c					vgray1    =    %00001100
202		=$0c					vgrey1    =    %00001100
203		=$0d					vvert1    =    %00001101
204		=$0d					vgreen1   =    %00001101
205		=$0e					vbleu1    =    %00001110
206		=$0e					vblue1    =    %00001110
207		=$0f					vgris2    =    %00001111
208		=$0f					vgray2    =    %00001111
209		=$0f					vgrey2    =    %00001111
213		=$ed09					stalk   = $ed09 ; Send Talk command to serial bus.
221		=$ed0c					slisten = $ed0c ; Send LISTEN command to serial bus.
229		=$ed40					sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
238		=$edb9					slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
246		=$edb9					stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
254		=$eddd					sbout   = $eddd ; Write byte to serial bus.
262		=$edef					sutalk  = $edef ; Send UNTalk command to serial bus.
270		=$edfe					sulisten= $edfe ; Send UNLISTEN command to serial bus.
278		=$ee85					sclkhigh= $ee85 ; Set CLOCK OUT to High
286		=$ee8e					sclklow = $ee8e ; Set CLOCK OUT to low
294		=$ee97					sdathigh= $ee97 ; Set DATA OUT to High
302		=$eea0					sdatlow = $eea0 ; Set DATA OUT to low
310		=$eea9					sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
320		=$f1ad					sbread  = $f1ad ; Read one byte from serial port.
328		=$f237					sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
335		=$f279					sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
342		=$f3d5					sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
349		=$f528					sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
355		=$f63f					sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
361		=$f642					sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
368		=$fe21					stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
376		=$ff81					cint    = $ff81 ; ($ff5b) Initialize the screen editor and vic-ii chip
390		=$ff84					ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
404		=$ff87					ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
419		=$ff8a					restor  = $ff8a ; ($fd15) Restore default I/O vectors.
422		=$ff8d					vector  = $ff8d ; ($fd1a) Read/set I/O vectors.
452		=$ff90					setmsg  = $ff90 ; ($fe18) Set kernal message output flag
467		=$ff93					second  = $ff93 ; ($edb9) Send secondary address after listen
488		=$ff96					tksa    = $ff96 ; ($edc7) Send a secondary address to a device commanded to talk
510		=$ff99					memtop  = $ff99 ; ($fe25) Get/Set top of ram
526		=$ff9c					membot  = $ff9c ; ($fe34) Get/set bottom of memory.
546		=$ff9f					scankey = $ff9f ; $(ea87) Scan the keyboard
549		=$ffa2					settmo  = $ffa2 ; ($fe21) Set ieee bus card timeout flag
569		=$ffa5					acptr   = $ffa5 ; ($ee13) recoit un caractere provenant du port serie
589		=$ffa8					ciout   = $ffa8 ; ($eddd) Transmit a byte over the serial bus
610		=$ffab					untlk   = $ffab ; ($edef) Send an untalk command
629		=$ffae					unlsn   = $ffae ; ($edfe) Send an unlisten command
648		=$ffb1					listen  = $ffb1 ; ($ed0c) Command a device on the serial bus to listen.
667		=$ffb4					talk    = $ffb4 ; ($ed09) Command a device on the serial bus to talk
687		=$ffb7					readst  = $ffb7 ; ($fe07) Read i/o status word
703		=$ffba					setlfs  = $ffba ; ($fe00) Set up a logical file
720		=$ffbd					setnam  = $ffbd ; ($fdf9) Set up file name
737		=$ffc0					open    = $ffc0 ; ($f3a4) Open a logical file
760		=$ffc3					close   = $ffc3 ; ($f291) Close a logical file
774		=$ffc6					chkin   = $ffc6 ; ($f20e) Define an input channel.
788		=$ffc9					chkout  = $ffc9 ; ($f250) Define an output channel.
802		=$ffcc					clrchn  = $ffcc ; ($f333) - Clear all i/o channels.
816		=$ffcf					chrin   = $ffcf ; ($f157) Get a character from the input channel
835		=$ffd2					chrout  = $ffd2 ; ($f1ca) Output a character
853		=$ffd5					load    = $ffd5 ; ($f49e) Load device to RAM.
881		=$ffd8					save    = $ffd8 ; ($f5dd) Save memory to a device.
884		=$ffdb					settim  = $ffdb ; ($f6e4) Set the system clock.
900		=$ffde					rdtim   = $ffde ; ($f6dd) Read system clock
916		=$ffe1					stop    = $ffe1 ; ($f6ed) Check if stop key is pressed.
931		=$ffe4					getin   = $ffe4 ; ($f13e) Get a character.
946		=$ffe7					clall   = $ffe7 ; ($f32f) Close all open files
960		=$ffea					udtim   = $ffea ; ($f69b) Update the system clock
974		=$ffed					screen  = $ffed ; ($e505) Return screen format
991		=$fff0					plot    = $fff0 ; ($e50a) Set or retrieve cursor location x=column, y=line
1009	=$fff3					iobase  = $fff3 ; ($e500) Define i/o memory page
1032	=$e043					kd_poly1     =   $e043
1033	=$e059					kd_poly2     =   $e059
1034	=$e08d					kd_rmulc     =   $e08d       ;
1035	=$e092					kd_raddc     =   $e092       ;
1036	=$e097					kd_rnd       =   $e097
1037	=$e12a					kd_sys       =   $e12a
1038	=$e156					kd_save      =   $e156
1039	=$e165					kd_verify    =   $e165
1040	=$e168					kd_load      =   $e168
1041	=$ff81					kcint       =   cint        ;   , init vic + ecran.
1042	=$ff84					kioinit     =   ioinit      ;   , init i/o dev.
1043	=$ff87					kramtas     =   ramtas      ;   , test de memoire.
1044	=$ffa8					kciout      =   ciout       ;a  ,tx byte  acia
1045	=$ff8a					krestor     =   restor      ;   , set ram plafond
1046	=$ff8d					kvector     =   vector      ;
1047	=$ff90					ksetmsg     =   setmsg      ;a  , set sys. msg. out
1048	=$ff93					ksecond     =   second      ;a  , tx adresse sec.
1049	=$ff96					ktksa       =   tksa        ;a  , talk adresse sec.
1050	=$ff99					kmemtop     =   memtop      ; yx, (c) get mem high
1051	=$ff9c					kmembot     =   membot      ; yx, (c) get mem low
1052	=$ff9f					kscankey    =   scankey     ;   , scan clavier
1053	=$ffa2					ksettmo     =   settmo      ;a  , set ieee timeout
1054	=$ffa5					kacptr      =   acptr       ;a  ,rx serie.
1055	=$ffab					kuntlk      =   untlk       ;   , iec-cmc stop talk
1056	=$ffae					kunlsn      =   unlsn       ;   , iec-cmd stop lsn
1057	=$ffb1					klisten     =   listen      ;a  , iec-cmd dev ecout
1058	=$ffb4					ktalk       =   talk        ;a  , iec-cmd dev parle
1059	=$ffb7					kreadst     =   readst      ;a  , lecture i/o stats
1060	=$ffba					ksetlfs     =   setlfs      ;ayx, init fich logi.
1061	=$ffbd					ksetnam     =   setnam      ;ayx, init num.nom.fich
1062	=$ffc0					kopen       =   open        ;axy, ouvre fich-nom
1063	=$ffc3					kclose      =   close       ;a  , ferme fichier #a.
1064	=$ffc6					kchkin      =   chkin       ;  x,open canal in.
1065	=$ffc9					kchkout     =   chkout      ;  x,open canal out
1066	=$ffcc					kclrchn     =   clrchn      ;   , ferme canaux i/o.
1067	=$ffcf					kchrin      =   chrin       ;a  ,recup. un car.
1068	=$ffd2					kchrout     =   chrout      ;a  ,sort un car.
1069	=$f1ca					kd_chrout    =   $f1ca
1070	=$ffd5					kload       =   load        ;ayx, dev->ram
1071	=$ffd8					ksave       =   save        ;   , sauve mem->dev
1072	=$ffdb					ksettim     =   settim      ;axy, init sysclock
1073	=$ffde					krdtim      =   rdtim       ;axy, lecture sysclock
1074	=$ffe1					kstop       =   stop        ;a  , ret. stopkey stat
1075	=$ffe4					kgetin      =   getin       ;a  , recup. car. #dev.
1076	=$ffe7					kclall      =   clall       ;   , ferme fichiers.
1077	=$ffea					kudtim      =   udtim       ;   , maj sysclock
1078	=$ffed					kscreen     =   screen      ; yx, get format ecran
1079	=$fff0					kplot       =   plot        ; yx, (c) get csr pos.
1080	=$fff3					kiobase     =   iobase      ; yx, def. i/o mem page
1084	=$e39a					k_echostartup = $e39a
1085	=$e716					k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
1086	=$e7a0					k_cls         = $e7a0
1087	=$e87c					k_cursordown  = $e87c
1088	=$e8ea					k_scrollup    = $e8ea
1089	=$e94e					k_home        = $e94e
1090	=$e965					k_insertline  = $e965
1091	=$e9c8					k_screlldown  = $e9c8
1092	=$ed0c					k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
1093	=$ee13					k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
1094	=$eef6					k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
1095	=$ef04					k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
1096	=$f12f					k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
1097	=$f291					k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
1098	=$f49e					k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
1099	=$f5af					k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
1100	=$f5b3					k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
1101	=$f5c1					k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
1102	=$f6ed					k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
1103	=$f7ea					k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
1105	=$f7ea					k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
1106	=$f817					k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
1107	=$f841					k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
1108	=$f847					k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
1109	=$f864					k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
1110	=$f869					k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
1111	=$fb8e					k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
1112	=$fcbd					k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
1113	=$fce2					k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
1114	=$fce2					k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
1115	=$fce2					k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
1116	=$fe66					k_warmreset   = $fe66 ;     Warm resetstart
1117	=$fe66					k_warmboot    = $fe66 ;     Warm resetstart
1118	=$ff93					k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
1128	=0						kerr00 = 0      ; routine ended by the stop key.
1129	=1						kerr01 = 1      ; too many files open.
1130	=2						kerr02 = 2      ; file already open.
1131	=3						kerr03 = 3      ; file not open.
1132	=4						kerr04 = 4      ; file not found.
1133	=5						kerr05 = 5      ; device not present.
1134	=6						kerr06 = 6      ; file is not an input file.
1135	=7						kerr07 = 7      ; file is not an output file.
1136	=8						kerr08 = 8      ; file name is missing.
1137	=9						kerr09 = 9      ; illegal device number.
1138	=240					kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
1149	.080d	4c d3 17		pgmstart        jmp      main  ; le programme principale doit s'appeler "main"

:1		;******  Return to file: joystick2-mc.asm


:3		;******  Processing file: "/home/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_map_vicii.asm"

4		=$d000					vic = $d000			; VicII C64 memorymap base address
5		=53248					vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
6		=53249					vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
7		=53250					vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
8		=53251					vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
9		=53252					vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
10		=53253					vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
11		=53254					vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
12		=53255					vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
13		=53256					vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
14		=53257					vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
15		=53258					vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
16		=53259					vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
17		=53260					vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
18		=53261					vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
19		=53262					vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
20		=53263					vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
23		=53264					vicspxmsb = vic+$10	; $D010, 53264
31		=53265					vicctrl0v  = vic+$11	; $d011, 53265
41		=53266					vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
44		=53267					viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
47		=53268					viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
50		=53269					vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
53		=53270					vicctrl1h = vic+$16	; $d016, 53270
63		=53271					vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
66		=53272					vicmemptr  = vic+$18	; $d018, 53272
76		=53273					vicirqreg  = vic+$19	; $d019, 53273
86		=53274					vicirqena  = vic+$1a	; $d01a, 53274
96		=53275					vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
99		=53276					vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
102		=53277					vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
105		=53278					vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
108		=53279					vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
111		=53280					vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
114		=53281					vicbackcol  = vic+$21 	; $d021, 53281
115		=53281					vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
118		=53282					vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
121		=53283					vicback2col= vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
124		=53284					vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
127		=53285					vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
130		=53286					vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
133		=53287					vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
136		=53288					vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
139		=53289					vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
142		=53290					vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
145		=53291					vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
148		=53292					vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
151		=53293					vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
154		=53294					vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

:1		;******  Return to file: joystick2-mc.asm


:4		;******  Processing file: "/home/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_pushpop.asm"

1		.0810					push
2		.0810	08				          php            ; stack : flg, pcl, pch
3		.0811	78				          sei
4		.0812	8d 4c 08		          sta  ra        ; save a
5		.0815	68				          pla            ; stack : pcl, pch
6		.0816	8d 4b 08		          sta  rp        ; save rp
7		.0819	68				          pla            ; stack : pch
8		.081a	8d 4d 08		          sta  pc        ; save pcl
9		.081d	68				          pla            ; stack : -
10		.081e	8d 4e 08		          sta  pc+1      ; save pch
11		.0821	a5 fb			          lda  zpage1    ; get zpage1 low byte
12		.0823	48				          pha            ; stack : zp1l
13		.0824	a5 fc			          lda  zpage1+1  ; get zpage1 High byte
14		.0826	48				          pha            ; stack : zp1h, zp1l
15		.0827	a5 fd			          lda  zpage2    ; get zpage2 low byte
16		.0829	48				          pha            ; stack : zp2l, zp1h, zp1l
17		.082a	a5 fe			          lda  zpage2+1  ; get zpage2 High byte
18		.082c	48				          pha            ; stack : zp2h, zp2l, zp1h, zp1l
19		.082d	ad 4b 08		          lda  rp        ; get rp
20		.0830	48				          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
21		.0831	ad 4c 08		          lda  ra        ; get a
22		.0834	48				          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
23		.0835	8a				          txa            ; get x
24		.0836	48				          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
25		.0837	98				          tya            ; get y
26		.0838	48				          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
27		.0839	ad 4e 08		          lda  pc+1      ; get pch
28		.083c	48				          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
29		.083d	ad 4d 08		          lda  pc        ; get pcl
30		.0840	48				          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
31		.0841	ad 4b 08		          lda  rp        ; get rp
32		.0844	48				          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
33		.0845	ad 4c 08		          lda  ra        ; get a
34		.0848	28				          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
35		.0849	58				          cli
36		.084a	60				          rts
37		>084b	00				rp        .byte     0
38		>084c	00				ra        .byte     0
39		>084d	00 00			pc        .word     0
42		.084f					pull
43		.084f					pop
44		.084f	78				          sei
45		.0850	68				          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
46		.0851	8d 84 08		          sta  pc        ; save pcl
47		.0854	68				          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
48		.0855	8d 85 08		          sta  pc+1      ; save pch
49		.0858	68				          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
50		.0859	a8				          tay            ; set y
51		.085a	68				          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
52		.085b	aa				          tax            ; set x
53		.085c	68				          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
54		.085d	8d 83 08		          sta  ra        ; save a
55		.0860	68				          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
56		.0861	8d 82 08		          sta  rp        ; save rp
57		.0864	68				          pla            ; stack : zp2l, zp1h, zp1l
58		.0865	85 fe			          sta  zpage2+1  ; get zpage1 low byte
59		.0867	68				          pla            ; stack : zp1h, zp1l
60		.0868	85 fd			          sta  zpage2    ; get zpage2 High byte
61		.086a	68				          pla            ; stack : zp1l
62		.086b	85 fc			          sta  zpage1+1  ; get zpage2 low byte
63		.086d	68				          pla            ; stack :
64		.086e	85 fb			          sta  zpage1    ; get zpage1 High byte
65		.0870	ad 85 08		          lda  pc+1      ; get pch
66		.0873	48				          pha            ; stack : pch
67		.0874	ad 84 08		          lda  pc
68		.0877	48				          pha            ; stack : pcl, pch
69		.0878	ad 82 08		          lda  rp        ; get rp
70		.087b	48				          pha            ; stack : rp, pcl, pch
71		.087c	ad 83 08		          lda  ra        ; set ra
72		.087f	58				          cli
73		.0880	28				          plp            ; stack : pcl, pch
74		.0881	60				          rts
75		>0882	00				rp        .byte     0
76		>0883	00				ra        .byte     0
77		>0884	00 00			pc        .word     0

:1		;******  Return to file: joystick2-mc.asm


:5		;******  Processing file: "/home/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_mem.asm"

4		.0886					blkfill
5		.0886	20 10 08		bf0            jsr  push
6		.0889	20 45 09		               jsr  savezp1
7		.088c	84 fc			               sty  zpage1+1
9		.088e	a0 00			               ldy  #$00
10		.0890	84 fb			               sty  zpage1
11		.0892	91 fb			bf1            sta  (zpage1),y
12		.0894	c8				               iny
13		.0895	d0 fb			               bne  bf1
14		.0897	20 54 09		               jsr  restzp1
15		.089a	20 4f 08		               jsr  pop
16		.089d	60				               rts
21		.089e					memfill
22		.089e	20 10 08		               jsr  push
23		.08a1	20 86 08		mf1            jsr  blkfill
25		.08a4	c8				               iny
26		.08a5	ca				               dex
27		.08a6	d0 f9			               bne  mf1
28		.08a8	20 4f 08		               jsr  pop
29		.08ab	60				               rts
34		.08ac					memmove
35		.08ac	20 10 08		               jsr  push
36		.08af	ba				               tsx            ; On se crée un pointeur ...
37		.08b0	8a				               txa
38		.08b1	18				               clc
39		.08b2	69 0b			               adc  #11
40		.08b4	a8				               tay
41		.08b5	a2 06			               ldx  #$06
42		.08b7	b9 00 01		nextbyte       lda  $0100,y
43		.08ba	99 06 09		               sta  words,y
44		.08bd	c8				               iny
45		.08be	ca				               dex
46		.08bf	d0 f6			               bne  nextbyte
47		.08c1	ad 06 09		               lda  s
48		.08c4	8d dd 08		               sta  source+1
49		.08c7	ad 07 09		               lda  s+1
50		.08ca	8d de 08		               sta  source+2
51		.08cd	ad 08 09		               lda  d
52		.08d0	8d da 08		               sta  destin+1
53		.08d3	ad 09 09		               lda  d+1
54		.08d6	8d db 08		               sta  destin+2
55		.08d9	ad ff ff		destin         lda  $ffff
56		.08dc	8d ff ff		source         sta  $ffff
57		.08df	ee da 08		               inc  destin+1
58		.08e2	d0 03			               bne  src
59		.08e4	ee db 08		               inc  destin+2
60		.08e7	ee dd 08		src            inc  source+1
61		.08ea	d0 03			               bne  cnt
62		.08ec	ee de 08		               inc  source+2
63		.08ef	ad 0a 09		cnt            lda  compte
64		.08f2	d0 08			               bne  decit
65		.08f4	ad 0b 09		               lda  compte+1
66		.08f7	f0 09			               beq  fini
67		.08f9	ce 0b 09		               dec  compte+1
68		.08fc	ce 0a 09		decit          dec  compte
70		.08ff	4c d9 08		               jmp  destin
71		.0902	20 4f 08		fini           jsr  pop
72		.0905	60				               rts
73		.0906					words
74		>0906	00 00			s         .word     $0000
75		>0908	00 00			d         .word     $0000
76		>090a	00 00			compte    .word     $0000
81		.090c					decword
82		.090c	20 10 08		               jsr  push
83		.090f	86 fd			               stx  zpage2
84		.0911	84 fe			               sty  zpage2+1
86		.0913	20 4f 08		               jsr  pop
87		.0916	60				               rts
92		.0917					inczp1
93		.0917	08				               php
94		.0918	48				               pha
95		.0919	e6 fb			               inc  zpage1
97		.091b	d0 02			               bne  nopage
98		.091d	e6 fc			               inc  zpage1+1
99		.091f	68				nopage         pla
100		.0920	28				               plp
101		.0921	60				               rts
106		.0922					deczp1
107		.0922	08				               php
108		.0923	48				               pha
109		.0924	a5 fb			               lda  zpage1
110		.0926	d0 02			               bne  nopage
111		.0928	c6 fc			               dec  zpage1+1
112		.092a	c6 fb			nopage         dec  zpage1
113		.092c	28				               plp
114		.092d	60				               rts
119		.092e					inczp2
120		.092e	08				               php
121		.092f	48				               pha
122		.0930	e6 fd			               inc  zpage2
124		.0932	d0 02			               bne  nopage
125		.0934	e6 fe			               inc  zpage2+1
126		.0936	68				nopage         pla
127		.0937	28				               plp
128		.0938	60				               rts
133		.0939					deczp2
134		.0939	08				               php
135		.093a	48				               pha
136		.093b	a5 fd			               lda  zpage2
137		.093d	d0 02			               bne  nopage
138		.093f	c6 fe			               dec  zpage2+1
139		.0941	c6 fd			nopage         dec  zpage2
140		.0943	28				               plp
141		.0944	60				               rts
146		.0945					savezp1
147		.0945	08				               php
148		.0946	48				               pha
149		.0947	a5 fb			               lda  zpage1
150		.0949	8d c1 09		               sta  zp1
151		.094c	a5 fc			               lda  zpage1+1
152		.094e	8d c2 09		               sta  zp1+1
153		.0951	68				               pla
154		.0952	28				               plp
155		.0953	60				               rts
160		.0954					restzp1
161		.0954	08				               php
162		.0955	48				               pha
163		.0956	ad c1 09		               lda zp1
164		.0959	85 fb			               sta zpage1
165		.095b	ad c2 09		               lda zp1+1
166		.095e	85 fc			               sta zpage1+1
167		.0960	68				               pla
168		.0961	28				               plp
169		.0962	60				               rts
174		.0963					savezp2
176		.0963	08				         php
177		.0964	48				         pha
178		.0965	a5 fd			         lda zpage2
179		.0967	8d c3 09		         sta zp2
180		.096a	a5 fe			         lda zpage2+1
181		.096c	8d c4 09		         sta zp2+1
182		.096f	68				         pla
183		.0970	28				         plp
184		.0971	60				         rts
189		.0972					restzp2
191		.0972	08				                php
192		.0973	48				                pha
193		.0974	ad c3 09		                lda  zp2
194		.0977	85 fd			                sta  zpage2
195		.0979	ad c4 09		                lda  zp2+1
196		.097c	85 fe			                sta  zpage2+1
197		.097e	68				                pla
198		.097f	28				                plp
199		.0980	60				                rts
205		.0981					xy2addr
206		.0981	08				                php
207		.0982	48				                pha
208		.0983	8a				                txa
209		.0984	48				                pha
210		.0985	98				                tya
211		.0986	48				                pha
212		.0987	ad bc 09		                lda     addr1+1
213		.098a	8d be 09		                sta     addr2+1
214		.098d	ad bb 09		                lda     addr1
215		.0990	8d bd 09		                sta     addr2
216		.0993	c0 00			                cpy     #$00
217		.0995	f0 0f			                beq     addx
218		.0997	18				moreline        clc
219		.0998	6d ba 09		                adc     ymult
220		.099b	90 03			                bcc     norepy
221		.099d	ee be 09		                inc     addr2+1
222		.09a0	8d bd 09		norepy          sta     addr2
223		.09a3	88				                dey
224		.09a4	d0 f1			                bne     moreline
225		.09a6	8a				addx            txa
226		.09a7	18				                clc
227		.09a8	6d bd 09		                adc     addr2
228		.09ab	90 03			                bcc     thatsit
229		.09ad	ee be 09		                inc     addr2+1
230		.09b0	8d bd 09		thatsit         sta     addr2
231		.09b3	68				                pla
232		.09b4	a8				                tay
233		.09b5	68				                pla
234		.09b6	aa				                tax
235		.09b7	68				                pla
236		.09b8	28				                plp
237		.09b9	60				                rts
242		>09ba	28				ymult          .byte     40
243		>09bb	00 00			addr1          .word     $0000
244		>09bd	00 00			addr2          .word     $0000
245		>09bf	00 00			bytecnt        .word     $0000
246		>09c1	00 00			zp1        .word   $0000
247		>09c3	00 00			zp2        .word   $0000

:1		;******  Return to file: joystick2-mc.asm


:6		;******  Processing file: "/home/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_hex.asm"

12		>09c5	01				a2hexcol       .byte     1              ; pour aputscxy
13		>09c6	00				a2hexbkcol     .byte     %00000000
14		.09c7					a2hexpos
15		>09c7	00				a2hexpx        .byte     0              ; pour aputsxy
16		>09c8	00				a2hexpy        .byte     0
17		>09c9	24				a2hexprefix    .byte     "$"            ; pour aputs
18		>09ca	00 00			a2hexstr       .word     $00
19		>09cc	00 00			               .word     $00
20		>09ce	00				               .byte     0              ; 0 end string
27		.09cf					nib2hex
28		.09cf	08				               php
29		.09d0	29 0f			               and  #$0f
30		.09d2	f8				               sed
31		.09d3	18				               clc
32		.09d4	69 90			               adc  #$90
33		.09d6	69 40			               adc  #$40
34		.09d8	d8				               cld
35		.09d9	28				               plp
36		.09da	60				               rts
42		.09db					lsra4bits
43		.09db	08				               php
44		.09dc	4a				               lsr
45		.09dd	4a				               lsr
46		.09de	4a				               lsr
47		.09df	4a				               lsr
48		.09e0	28				               plp
49		.09e1	60				               rts
68		.09e2					a2hex
69		.09e2	08				               php
70		.09e3	48				               pha
71		.09e4	48				               pha
72		.09e5	20 db 09		               jsr  lsra4bits
73		.09e8	20 cf 09		               jsr  nib2hex
74		.09eb	8d ca 09		               sta  a2hexstr
75		.09ee	68				               pla
76		.09ef	20 cf 09		               jsr  nib2hex
77		.09f2	8d cb 09		               sta  a2hexstr+1
78		.09f5	a9 00			               lda  #$00                ; set end of string
79		.09f7	8d cc 09		               sta  a2hexstr+2
80		.09fa	68				               pla
81		.09fb	28				               plp
82		.09fc	60				               rts
88		.09fd					xy2hex
89		.09fd	20 10 08		               jsr  push
90		.0a00	20 e2 09		               jsr  a2hex
91		.0a03	8a				               txa
92		.0a04	48				               pha
93		.0a05	20 db 09		               jsr  lsra4bits
94		.0a08	20 cf 09		               jsr  nib2hex
95		.0a0b	8d ca 09		               sta  a2hexstr
96		.0a0e	68				               pla
97		.0a0f	20 cf 09		               jsr  nib2hex
98		.0a12	8d cb 09		               sta  a2hexstr+1
100		.0a15	98				               tya
101		.0a16	48				               pha
102		.0a17	20 db 09		               jsr  lsra4bits
103		.0a1a	20 cf 09		               jsr  nib2hex
104		.0a1d	8d cc 09		               sta  a2hexstr+2
105		.0a20	68				               pla
106		.0a21	20 cf 09		               jsr  nib2hex
107		.0a24	8d cd 09		               sta  a2hexstr+3
108		.0a27	a9 00			               lda  #$00                ; 0 ended string
109		.0a29	8d ce 09		               sta  a2hexstr+4
110		.0a2c	20 4f 08		               jsr  pop
116		.0a2f					atobin
117		.0a2f	20 10 08		               jsr     push
118		.0a32	a2 08			               ldx     #8
119		.0a34	a0 00			               ldy     #0
120		.0a36	2a				nextbit        rol
121		.0a37	48				               pha
122		.0a38	29 01			               and     #1
123		.0a3a	20 cf 09		               jsr     nib2hex
124		.0a3d	99 4e 0a		               sta     abin,y
125		.0a40	68				               pla
126		.0a41	c8				               iny
127		.0a42	ca				               dex
128		.0a43	d0 f1			               bne     nextbit
129		.0a45	a9 00			               lda     #0
130		.0a47	99 4e 0a		               sta     abin,y
131		.0a4a	20 4f 08		               jsr     pull
132		.0a4d	60				               rts
134		>0a4e	00 00 00 00		abin           .byte     0,0,0,0,0,0,0,0,0
		>0a52	00 00 00 00 00
139		.0a57					putabin
140		.0a57	20 2f 0a		               jsr     atobin
141		.0a5a	20 10 08		               jsr     push
142		.0a5d	a2 4e			               ldx     #<abin
143		.0a5f	a0 0a			               ldy     #>abin
144		.0a61	20 e0 0b		               jsr     puts
145		.0a64	20 4f 08		               jsr     pop
146		.0a67	60				               rts
153		.0a68					putabinfmt
154		.0a68	08				               php
155		.0a69	48				               pha
156		.0a6a	a9 25			               lda     #"%"
157		.0a6c	20 9c 0b		               jsr     putch
158		.0a6f	68				               pla
159		.0a70	20 57 0a		               jsr     putabin
160		.0a73	28				               plp
161		.0a74	60				               rts
167		.0a75					putabinxy
168		.0a75	20 ee 0b		               jsr     gotoxy
169		.0a78	20 57 0a		               jsr     putabin
170		.0a7b	60				               rts
177		.0a7c					putabinfmtxy
178		.0a7c	20 ee 0b		               jsr     gotoxy
179		.0a7f	20 68 0a		               jsr     putabinfmt
180		.0a82	60				               rts

:1		;******  Return to file: joystick2-mc.asm


:7		;******  Processing file: "/home/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_text_mc.asm"

13		>0a83	00 00			scrptr         .word     $00            ; ... pointe position ecran, ...
14		>0a85	00 00			colptr         .word     $00            ; ... pointe position couleur, ...
15		>0a87	01				curcol         .byte     $01            ; ... la couleur du caractère, ...
16		>0a88	06				brdcol         .byte     vbleu          ; ... la couleur de la bordure et
18		>0a89	00				vicbkcol0      .byte     vnoir  ;$0b    ; 0,
19		>0a8a	02				vicbkcol1      .byte     vrouge ;$0b    ; 1,
20		>0a8b	05				vicbkcol2      .byte     vvert  ;$0b    ; 2,
21		>0a8c	06				vicbkcol3      .byte     vbleu  ;$0b    ; et 3.
22		>0a8d	00				inverse        .byte     $00
23		>0a8e	00 00 00 00		scraddr        .byte     0,0,0,0,0
		>0a92	00
24		>0a93	00 00 00 00		coladdr        .byte     0,0,0,0,0
		>0a97	00
25		>0a98	00				bkcol          .byte     %00000000      ; Pointeur de la couleur actuelle
26		>0a99	00 04			virtaddr       .word     $0400          ; L'adresse de l'ecran virtuel
30		=$00					bkcol0         =         %00000000      ;
31		=$40					bkcol1         =         %01000000
32		=$80					bkcol2         =         %10000000
33		=$c0					bkcol3         =         %11000000
37		.0a9b					scrmaninit
38		.0a9b	08				               php            ; On sauvegarde les registres
39		.0a9c	48				               pha
40		.0a9d	a9 15			               lda  #%00010101; Selectionne la plage memoire video
41		.0a9f	8d 18 d0		               sta  $d018     ; et le jeu de caracteeres.
58		.0aa2	ad 16 d0		               lda  $d016     ; 53270 Lecture valeur actuelle pour ne
59		.0aa5	09 10			               ora  #%00010000; modifier que le bit 4.
60		.0aa7	29 ef			               and  #%11101111
61		.0aa9	8d 16 d0		               sta  $d016 ; 53270
78		.0aac	ad 11 d0		               lda  $d011     ; On ne change que le bit 6 pour
79		.0aaf	09 40			               ora  #%01000000; selectionner le md. couleur de
80		.0ab1	8d 11 d0		               sta  $d011     ; 53270   ; fond etendu.
111		.0ab4	ad 89 0a		               lda  vicbkcol0
112		.0ab7	8d 21 d0		               sta  $d021     ; 53281
113		.0aba	ad 8a 0a		               lda  vicbkcol1
114		.0abd	8d 22 d0		               sta  $d022     ; 53282
115		.0ac0	ad 8b 0a		               lda  vicbkcol2
116		.0ac3	8d 23 d0		               sta  $d023     ; 53283
117		.0ac6	ad 8c 0a		               lda  vicbkcol3
118		.0ac9	8d 24 d0		               sta  $d024     ; 54284
119		.0acc	a5 00			               lda  bkcol0    ; On charge et utilise la couleur de ...
120		.0ace	8d 98 0a		               sta  bkcol     ; ... fond par defaut des caracteres.
121		.0ad1	20 2b 0b		               jsr  cls       ; Finalement on efface l'ecran
122		.0ad4	68				               pla
123		.0ad5	28				               plp
124		.0ad6	60				               rts
129		.0ad7					curshome
130		.0ad7	08				               php                      ; Sauvegarde flags ...
131		.0ad8	48				               pha                      ; ... et accumulateur
132		.0ad9	ad 99 0a		               lda  virtaddr            ; In replace le pointeur ...
133		.0adc	8d 83 0a		               sta  scrptr              ; ... d'écran virtuel à sa ...
134		.0adf	ad 9a 0a		               lda  virtaddr+1          ; ... position initiale.
135		.0ae2	8d 84 0a		               sta  scrptr+1
136		.0ae5	20 16 0b		               jsr  synccolptr          ; On synchronise le ptr couleur.
137		.0ae8	ad 89 0a		               lda  vicbkcol0
138		.0aeb	8d 21 d0		               sta  $d021               ; On recharge les couleurs ...
139		.0aee	ad 8a 0a		               lda  vicbkcol1           ; ... de fond par defaut tel ...
140		.0af1	8d 22 d0		               sta  $d022               ; ... que specifie dans les ...
141		.0af4	ad 8b 0a		               lda  vicbkcol2           ; ... les variables globales.
142		.0af7	8d 23 d0		               sta  $d023
143		.0afa	ad 8c 0a		               lda  vicbkcol3
144		.0afd	8d 24 d0		               sta  $d024
145		.0b00	68				               pla                      ; Récupère l'accumulateur ...
146		.0b01	28				               plp                      ; ... et les flags
147		.0b02	60				               rts
152		.0b03					incscrptr
153		.0b03	08				               php                      ; Sauvegarde flags ...
154		.0b04	48				               pha                      ; ... et accumulateur
155		.0b05	ee 83 0a		               inc  scrptr              ; Incremente le pointeur
156		.0b08	ad 83 0a		               lda  scrptr              ; Regarde si on doit faire un ...
157		.0b0b	d0 03			               bne  pasdereport         ; ... report dans le MSB
158		.0b0d	ee 84 0a		               inc  scrptr+1            ; Si oui on fait le repport
159		.0b10	20 16 0b		pasdereport    jsr  synccolptr          ; On synchronise le ptr couleur.
160		.0b13	68				               pla                      ; Récupère l'accumulateur ...
161		.0b14	28				               plp                      ; ... et les flags
162		.0b15	60				               rts
168		.0b16					synccolptr
169		.0b16	08				               php                      ; Sauvegarde flags ...
170		.0b17	48				               pha                      ; ... et accumulateur
174		.0b18	ad 83 0a		               lda  scrptr              ; Récupère le LSB du scrptr ...
175		.0b1b	8d 85 0a		               sta  colptr              ; ... pour le placer dans le colptr.
189		.0b1e	ad 84 0a		               lda  scrptr+1            ; Récupère le mSB du scrptr, ...
190		.0b21	29 03			               and  #%00000011          ; ... le converti pour pointer ...
191		.0b23	09 d8			               ora  #%11011000          ; ... la RAM couleur ...
192		.0b25	8d 86 0a		               sta  colptr+1            ; ... et le sauvegarde.
193		.0b28	68				               pla                      ; Récupère l'accumulateur ...
194		.0b29	28				               plp                      ; ... et les flags
195		.0b2a	60				               rts
201		.0b2b					cls
202		.0b2b	20 10 08		               jsr  push                ; On sauvegarde les registres
203		.0b2e	ad 99 0a		               lda  virtaddr            ; On replace le curseur d'ecran à
204		.0b31	8d 83 0a		               sta  scrptr
205		.0b34	ad 9a 0a		               lda  virtaddr+1          ; sa position initiale, ($0400).
206		.0b37	8d 84 0a		               sta  scrptr+1
207		.0b3a	20 16 0b		               jsr  synccolptr          ; On synchronise la couleur.
208		.0b3d	20 e2 0c		               jsr  scrptr2zp1          ; L'adresse actuelle dans le ZP1.
209		.0b40	ad 88 0a		               lda  brdcol              ; On place la couleur ...
210		.0b43	8d 20 d0		               sta  vicbordcol          ; ... de la bordure.
211		.0b46	ad 98 0a		               lda  bkcol               ; Associer couleur pour ...
212		.0b49	8d 21 d0		               sta  vicbackcol          ; ... remplir l'ecran ...
213		.0b4c	a9 20			               lda  #$20                ; ... de caracteres espace.
214		.0b4e	a2 04			               ldx  #4                  ; Quatre blocs de ...
215		.0b50	a0 00			nextline       ldy  #0                  ; ... 256 caracteres.
219		.0b52					nextcar
220		.0b52	91 fb			               sta  (zpage1),y          ;
225		.0b54	a5 fc			               lda  zpage1+1
226		.0b56	48				               pha
231		.0b57	29 03			               and  #%00000011
232		.0b59	09 d8			               ora  #%11011000
238		.0b5b	85 fc			               sta  zpage1+1
239		.0b5d	a9 00			               lda  #0
240		.0b5f	91 fb			               sta  (zpage1),y
245		.0b61	68				               pla
246		.0b62	85 fc			               sta  zpage1+1
250		.0b64	a9 20			               lda  #$20
255		.0b66	88				               dey
256		.0b67	d0 e9			               bne  nextcar
260		.0b69	e6 fc			               inc  zpage1+1
265		.0b6b	ca				               dex
266		.0b6c	d0 e4			               bne  nextcar
270		.0b6e	a9 00			               lda  #$00
271		.0b70	8d 83 0a		               sta  scrptr
272		.0b73	a9 04			               lda  #$04
273		.0b75	8d 84 0a		               sta  scrptr+1
277		.0b78	20 16 0b		               jsr  synccolptr
283		.0b7b	20 4f 08		               jsr  pop
284		.0b7e	60				               rts
290		.0b7f					setborder
291		.0b7f	08				               php
292		.0b80	8d 88 0a		               sta  brdcol
293		.0b83	8d 20 d0		               sta  vicbordcol
294		.0b86	28				               plp
295		.0b87	60				               rts
302		.0b88					setinverse
303		.0b88	08				               php
304		.0b89	48				               pha
310		.0b8a	a9 80			               lda  #%10000000
311		.0b8c	8d 8d 0a		               sta  inverse
312		.0b8f	68				               pla
313		.0b90	28				               plp
314		.0b91	60				               rts
320		.0b92					clrinverse
321		.0b92	08				               php
322		.0b93	48				               pha
328		.0b94	a9 00			               lda  #%00000000
329		.0b96	8d 8d 0a		               sta  inverse
330		.0b99	68				               pla
331		.0b9a	28				               plp
332		.0b9b	60				               rts
338		.0b9c					putch
339		.0b9c	20 10 08		               jsr  push           ; On sauvegarde les registres
340		.0b9f	20 e2 0c		               jsr  scrptr2zp1     ; Place le ptr d'ecran sur zp1
341		.0ba2	29 3f			               and  #%00111111     ; Masque des bits 6 et 7 pour la ouleur.
342		.0ba4	0d 98 0a		               ora  bkcol          ; On y ajoute la couleur du fond.
343		.0ba7	a0 00			               ldy  #0             ; Met Y à 0
344		.0ba9	91 fb			               sta  (zpage1),y     ; Affiche le caractere
345		.0bab	ae 86 0a		               ldx  colptr+1       ; Place le MSB du ptr de couleur
346		.0bae	86 fc			               stx  zpage1+1       ; ... dans le MSB du zp1.
347		.0bb0	ad 87 0a		               lda  curcol         ; Charge la couleur voulu dans.
348		.0bb3	91 fb			               sta  (zpage1),y     ; ... la ram de couleur.
349		.0bb5	20 03 0b		               jsr  incscrptr      ; Incremente le pointeur d'ecran.
350		.0bb8	20 4f 08		               jsr  pop            ; Replace tous les registres
351		.0bbb	60				               rts
358		.0bbc					z2putch
359		.0bbc	20 10 08		               jsr  push           ; On sauvegarde les registres
360		.0bbf	a0 00			               ldy  #$0            ; Met Y à 0
361		.0bc1	b1 fd			               lda  (zpage2),y     ; Charge le caractere
362		.0bc3	20 9c 0b		               jsr  putch          ; Appel pour affichage
363		.0bc6	20 4f 08		               jsr  pop            ; Replace tous les registres
364		.0bc9	60				               rts
371		.0bca					z2puts
372		.0bca	20 10 08		               jsr  push           ; On sauvegarde les registres
373		.0bcd	a0 00			               ldy  #$0            ; Met Y à 0
374		.0bcf	b1 fd			nextcar        lda  (zpage2),y     ; Charge le caractere
375		.0bd1	f0 09			               beq  endstr         ; Est-ce le 0 de fin de chaine ?
376		.0bd3	20 bc 0b		               jsr  z2putch        ; Appel pour affichage
377		.0bd6	20 2e 09		               jsr  inczp2         ; On pointe zp2 sur le prochain caractere.
378		.0bd9	4c cf 0b		               jmp  nextcar        ; On passe au prochain
379		.0bdc	20 4f 08		endstr         jsr  pop            ; Replace tous les registres
380		.0bdf	60				               rts
388		.0be0					puts
389		.0be0	20 10 08		               jsr  push           ; On sauvegarde les registres
390		.0be3	86 fd			               stx  zpage2         ; On positionne xp2 en fonction de
391		.0be5	84 fe			               sty  zpage2+1       ; l'adresse reçcu dans X et Y
392		.0be7	20 ca 0b		               jsr  z2puts         ; Appel pour affichage
393		.0bea	20 4f 08		               jsr  pop            ; Replace tous les registres
394		.0bed	60				               rts
400		.0bee					gotoxy
401		.0bee	20 10 08		               jsr  push           ; On sauvegarde les registres
402		.0bf1	20 d7 0a		               jsr  curshome       ;  retourne le curseur virtuel a 0,0.
403		.0bf4	c0 00			yagain         cpy  #0             ; Devons nous changer de ligne ?
404		.0bf6	f0 09			               beq  setx           ; Si non, on verifi les colonnes.
405		.0bf8	a9 28			               lda  #40            ; Si oui on ajoute 40
406		.0bfa	20 7f 0c		               jsr  saddscrptr     ;  à l'adresse du pointeur virtuel autant
407		.0bfd	88				               dey                 ;  de fois qu'il est spécifié dans y.
408		.0bfe	4c f4 0b		               jmp  yagain         ; On passe au prochain y.
409		.0c01	8a				setx           txa                 ; On ajoute la valeur de X
410		.0c02	20 7f 0c		               jsr  saddscrptr     ;  à l'adresse di pointeur virtuel.
411		.0c05	20 16 0b		               jsr  synccolptr     ; Synchro du pointeur des couleurs
412		.0c08	20 4f 08		               jsr  pop            ; Replace tous les registres
413		.0c0b	60				               rts
421		.0c0c					putsxy
422		.0c0c	20 10 08		               jsr  push           ; On sauvegarde les registres et le zp2
423		.0c0f	86 fd			               stx  zpage2         ; Place l'adr de chaine dans zp2
424		.0c11	84 fe			               sty  zpage2+1       ; X = MSB, Y = LSB
425		.0c13	a0 00			               ldy  #0             ; On place le compteur
426		.0c15	b1 fd			               lda  (zpage2),y     ; Lecture de la position X
427		.0c17	aa				               tax                 ; de A à X
428		.0c18	20 2e 09		               jsr  inczp2         ; On deplace le pointeur
429		.0c1b	b1 fd			               lda  (zpage2),y     ; Lecture de la position Y
430		.0c1d	a8				               tay                 ; de A à Y
431		.0c1e	20 ee 0b		               jsr  gotoxy         ; gotoxy : X=col, Y=ligne
432		.0c21	20 2e 09		               jsr  inczp2         ; On deplace le pointeur
433		.0c24	20 ca 0b		               jsr  z2puts         ; On imprime la chaine
434		.0c27	20 4f 08		               jsr  pop            ; Replace tous les registres
435		.0c2a	60				               rts
443		.0c2b					putscxy
444		.0c2b	20 10 08		               jsr  push           ; On Sauvegarde registres et zp2
445		.0c2e	86 fd			               stx  zpage2         ; On place l'adresse de chaine dans zp2
446		.0c30	84 fe			               sty  zpage2+1       ; X = MSB, Y = LSB
447		.0c32	a0 00			               ldy  #0             ; Place le compteur
448		.0c34	b1 fd			               lda  (zpage2),y     ; Charge la couleur
449		.0c36	8d 87 0a		               sta  curcol         ; ... et on la definie
450		.0c39	20 2e 09		               jsr  inczp2         ; Pointe le prochain byte
451		.0c3c	b1 fd			               lda  (zpage2),y     ; Récupere et sauvegarde ...
452		.0c3e	8d 98 0a		               sta  bkcol          ; ... l'index de couleur de fond
453		.0c41	20 2e 09		               jsr  inczp2         ; Deplace le pointeur
454		.0c44	b1 fd			               lda  (zpage2),y     ; Lecture de la position X
455		.0c46	aa				               tax                 ; ... de A à X
456		.0c47	20 2e 09		               jsr  inczp2         ; Deplace le pointeur
457		.0c4a	b1 fd			               lda  (zpage2),y     ; Lecture de la position Y
458		.0c4c	a8				               tay                 ; de A à Y
459		.0c4d	20 ee 0b		               jsr  gotoxy         ; gotoxy : X=col, y=ligne
460		.0c50	20 2e 09		               jsr  inczp2         ; Place le ptr en début de chaine
461		.0c53	20 ca 0b		               jsr  z2puts         ; On imprime la chaine
462		.0c56	20 4f 08		               jsr  pop
463		.0c59	60				               rts
469		.0c5a					setcurcol
470		.0c5a	08				               php
471		.0c5b	8d 87 0a		               sta  curcol
472		.0c5e	28				               plp
473		.0c5f	60				               rts
479		.0c60					setvicbkcol
480		.0c60	08				               php
481		.0c61	48				               pha
482		.0c62	8a				               txa
483		.0c63	29 03			               and  #$03
484		.0c65	aa				               tax
485		.0c66	68				               pla
486		.0c67	9d 89 0a		               sta  vicbkcol0,x
487		.0c6a	9d 21 d0		               sta  $d021,x
488		.0c6d	28				               plp
489		.0c6e	60				               rts
495		.0c6f					setbkcol
496		.0c6f	08				               php
497		.0c70	48				               pha
498		.0c71	0a				               asl
499		.0c72	0a				               asl
500		.0c73	0a				               asl
501		.0c74	0a				               asl
502		.0c75	0a				               asl
503		.0c76	0a				               asl
504		.0c77	29 c0			               and  #$c0
505		.0c79	8d 98 0a		               sta  bkcol
506		.0c7c	68				               pla
507		.0c7d	28				               plp
508		.0c7e	60				               rts
514		.0c7f					saddscrptr
515		.0c7f	08				               php
516		.0c80	48				               pha
517		.0c81	18				               clc
518		.0c82	6d 83 0a		               adc  scrptr
519		.0c85	8d 83 0a		               sta  scrptr
520		.0c88	90 03			               bcc  norep
521		.0c8a	ee 84 0a		               inc  scrptr+1
522		.0c8d	68				norep          pla
523		.0c8e	28				               plp
524		.0c8f	60				               rts
530		.0c90					scrptr2str
534		.0c90	20 10 08		               jsr  push
538		.0c93	ad 84 0a		               lda  scrptr+1
539		.0c96	48				               pha
540		.0c97	20 db 09		               jsr  lsra4bits
541		.0c9a	20 cf 09		               jsr  nib2hex
542		.0c9d	8d 8e 0a		               sta  scraddr
543		.0ca0	68				               pla
544		.0ca1	20 db 09		               jsr  lsra4bits
545		.0ca4	20 cf 09		               jsr  nib2hex
546		.0ca7	8d 8f 0a		               sta  scraddr+1
550		.0caa	ad 84 0a		               lda  scrptr+1
551		.0cad	48				               pha
552		.0cae	20 db 09		               jsr  lsra4bits
553		.0cb1	20 cf 09		               jsr  nib2hex
554		.0cb4	8d 8e 0a		               sta  scraddr
555		.0cb7	68				               pla
556		.0cb8	20 db 09		               jsr  lsra4bits
557		.0cbb	20 cf 09		               jsr  nib2hex
558		.0cbe	8d 8f 0a		               sta  scraddr+1
562		.0cc1	ad 83 0a		               lda  scrptr
563		.0cc4	48				               pha
564		.0cc5	20 db 09		               jsr  lsra4bits
565		.0cc8	20 cf 09		               jsr  nib2hex
566		.0ccb	8d 90 0a		               sta  scraddr+2
567		.0cce	8d 95 0a		               sta  coladdr+2
568		.0cd1	68				               pla
569		.0cd2	20 db 09		               jsr  lsra4bits
570		.0cd5	20 cf 09		               jsr  nib2hex
571		.0cd8	8d 91 0a		               sta  scraddr+3
572		.0cdb	8d 96 0a		               sta  coladdr+3
576		.0cde	20 4f 08		               jsr  pop
577		.0ce1	60				               rts
582		.0ce2					scrptr2zp1
583		.0ce2	08				               php
584		.0ce3	48				               pha
585		.0ce4	ad 83 0a		               lda  scrptr
586		.0ce7	85 fb			               sta  zpage1
587		.0ce9	ad 84 0a		               lda  scrptr+1
588		.0cec	85 fc			               sta  zpage1+1
589		.0cee	68				               pla
590		.0cef	28				               plp
591		.0cf0	60				               rts
596		.0cf1					colptr2zp1
597		.0cf1	08				               php
598		.0cf2	48				               pha
599		.0cf3	ad 85 0a		               lda  colptr
600		.0cf6	85 fb			               sta  zpage1
601		.0cf8	ad 86 0a		               lda  colptr+1
602		.0cfb	85 fc			               sta  zpage1+1
603		.0cfd	68				               pla
604		.0cfe	28				               plp
605		.0cff	60				               rts
610		.0d00					scrptr2zp2
611		.0d00	08				               php
612		.0d01	48				               pha
613		.0d02	ad 83 0a		               lda  scrptr
614		.0d05	85 fd			               sta  zpage2
615		.0d07	ad 84 0a		               lda  scrptr+1
616		.0d0a	85 fe			               sta  zpage2+1
617		.0d0c	68				               pla
618		.0d0d	28				               plp
619		.0d0e	60				               rts
624		.0d0f					colptr2zp2
625		.0d0f	08				               php
626		.0d10	48				               pha
627		.0d11	ad 85 0a		               lda  colptr
628		.0d14	85 fd			               sta  zpage2
629		.0d16	ad 86 0a		               lda  colptr+1
630		.0d19	85 fe			               sta  zpage2+1
631		.0d1b	68				               pla
632		.0d1c	28				               plp
633		.0d1d	60				               rts
643		.0d1e					putrahex
644		.0d1e	08				               php
645		.0d1f	48				               pha
646		.0d20	20 e2 09		               jsr     a2hex
647		.0d23	a2 c5			               ldx     #<a2hexcol
648		.0d25	a0 09			               ldy     #>a2hexcol
649		.0d27	20 e0 0b		               jsr     puts
650		.0d2a	68				               pla
651		.0d2b	28				               plp
652		.0d2c	60				               rts
664		.0d2d					putrahexxy
665		.0d2d	08				               php
666		.0d2e	48				               pha
667		.0d2f	20 e2 09		               jsr  a2hex
668		.0d32	a9 c7			               lda  #<a2hexpos
669		.0d34	a0 09			               ldy  #>a2hexpos
670		.0d36	20 0c 0c		               jsr  putsxy
671		.0d39	68				               pla
672		.0d3a	28				               plp
673		.0d3b	60				               rts
687		.0d3c					putrahexcxy
688		.0d3c	08				               php
689		.0d3d	68				               pla
690		.0d3e	20 e2 09		               jsr  a2hex
691		.0d41	a9 c7			               lda  #<a2hexpos
692		.0d43	a0 09			               ldy  #>a2hexpos
693		.0d45	20 2b 0c		               jsr  putscxy
694		.0d48	68				               pla
695		.0d49	28				               plp
696		.0d4a	60				               rts

:1		;******  Return to file: joystick2-mc.asm


:8		;******  Processing file: "/home/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_showregs.asm"

6		.0d4b					showregs
7		=23						line    =   23
8		=0						coln    =   0
9		=$01					colr    =   vblanc
10		=$c0					bkcol   =   bkcol3
11		.0d4b	08				                php
15		.0d4c	8d fd 0e		                sta  rega
16		.0d4f	68				                pla
20		.0d50	8d 00 0f		                sta  regp
21		.0d53	8e fe 0e		                stx  regx
22		.0d56	8c ff 0e		                sty  regy
23		.0d59	ba				                tsx
24		.0d5a	8e 01 0f		                stx  regs
25		.0d5d	68				                pla
29		.0d5e	8d 03 0f		                sta  regpcl
30		.0d61	8d 04 0f		                sta  regpcl2
31		.0d64	68				                pla
35		.0d65	8d 02 0f		                sta  regpch
39		.0d68	ad fd 0e		                lda  rega
40		.0d6b	48				                pha
44		.0d6c	20 cf 09		                jsr  nib2hex
45		.0d6f	8d a0 0e		                sta  vala+1
46		.0d72	68				                pla
50		.0d73	20 db 09		                jsr  lsra4bits
51		.0d76	20 cf 09		                jsr  nib2hex
52		.0d79	8d 9f 0e		                sta  vala
56		.0d7c	ad ff 0e		                lda  regy
57		.0d7f	48				                pha
61		.0d80	20 cf 09		                jsr  nib2hex
62		.0d83	8d b6 0e		                sta  valy+1
63		.0d86	68				                pla
67		.0d87	20 db 09		                jsr  lsra4bits
68		.0d8a	20 cf 09		                jsr  nib2hex
69		.0d8d	8d b5 0e		                sta  valy
73		.0d90	ad fe 0e		                lda  regx
74		.0d93	48				                pha
78		.0d94	20 cf 09		                jsr  nib2hex
79		.0d97	8d ab 0e		                sta  valx+1
80		.0d9a	68				                pla
84		.0d9b	20 db 09		                jsr  lsra4bits
85		.0d9e	20 cf 09		                jsr  nib2hex
86		.0da1	8d aa 0e		                sta  valx
90		.0da4	ad 00 0f		                lda  regp
91		.0da7	48				                pha
95		.0da8	20 cf 09		                jsr  nib2hex
96		.0dab	8d c1 0e		                sta  valp+1
97		.0dae	68				                pla
101		.0daf	20 db 09		                jsr  lsra4bits
102		.0db2	20 cf 09		                jsr  nib2hex
103		.0db5	8d c0 0e		                sta  valp
107		.0db8	ad 01 0f		                lda  regs
108		.0dbb	48				                pha
112		.0dbc	20 cf 09		                jsr  nib2hex
113		.0dbf	8d cc 0e		                sta  vals+1
114		.0dc2	68				                pla
118		.0dc3	20 db 09		                jsr  lsra4bits
119		.0dc6	20 cf 09		                jsr  nib2hex
120		.0dc9	8d cb 0e		                sta  vals
124		.0dcc	ad 02 0f		                lda  regpch
125		.0dcf	48				                pha
129		.0dd0	20 cf 09		                jsr  nib2hex
130		.0dd3	8d d8 0e		                sta  valpch+1
131		.0dd6	68				                pla
135		.0dd7	20 db 09		                jsr  lsra4bits
136		.0dda	20 cf 09		                jsr  nib2hex
137		.0ddd	8d d7 0e		                sta  valpch
141		.0de0	ad 03 0f		                lda  regpcl
142		.0de3	48				                pha
146		.0de4	20 cf 09		                jsr  nib2hex
147		.0de7	8d da 0e		                sta  valpcl+1
148		.0dea	68				                pla
152		.0deb	20 db 09		                jsr  lsra4bits
153		.0dee	20 cf 09		                jsr  nib2hex
154		.0df1	8d d9 0e		                sta  valpcl
158		.0df4	a5 fb			                lda  zpage1
159		.0df6	48				                pha
160		.0df7	20 cf 09		                jsr  nib2hex
161		.0dfa	8d e9 0e		                sta  valz1l
162		.0dfd	68				                pla
163		.0dfe	20 db 09		                jsr  lsra4bits
164		.0e01	20 cf 09		                jsr  nib2hex
165		.0e04	8d ea 0e		                sta  valz1l+1
167		.0e07	a5 fc			                lda  zpage1+1
168		.0e09	48				                pha
169		.0e0a	20 cf 09		                jsr  nib2hex
170		.0e0d	8d e7 0e		                sta  valz1h
171		.0e10	68				                pla
172		.0e11	20 db 09		                jsr  lsra4bits
173		.0e14	20 cf 09		                jsr  nib2hex
174		.0e17	8d e8 0e		                sta  valz1h+1
176		.0e1a	a5 fd			                lda  zpage2
177		.0e1c	48				                pha
178		.0e1d	20 cf 09		                jsr  nib2hex
179		.0e20	8d f9 0e		                sta  valz2l
180		.0e23	68				                pla
181		.0e24	20 db 09		                jsr  lsra4bits
182		.0e27	20 cf 09		                jsr  nib2hex
183		.0e2a	8d fa 0e		                sta  valz2l+1
185		.0e2d	a5 fe			                lda  zpage2+1
186		.0e2f	48				                pha
187		.0e30	20 cf 09		                jsr  nib2hex
188		.0e33	8d f7 0e		                sta  valz2h
189		.0e36	68				                pla
190		.0e37	20 db 09		                jsr  lsra4bits
191		.0e3a	20 cf 09		                jsr  nib2hex
192		.0e3d	8d f8 0e		                sta  valz2h+1
197		.0e40	20 88 0b		                jsr  setinverse
198		.0e43	78				                sei
199		.0e44	a2 97			                ldx  #<srega
200		.0e46	a0 0e			                ldy  #>srega+1
201		.0e48	20 2b 0c		                jsr  putscxy
202		.0e4b	a2 a2			                ldx  #<sregx
203		.0e4d	a0 0e			                ldy  #>sregx+1
204		.0e4f	20 2b 0c		                jsr  putscxy
205		.0e52	a2 ad			                ldx  #<sregy
206		.0e54	a0 0e			                ldy  #>sregy+1
207		.0e56	20 2b 0c		                jsr  putscxy
208		.0e59	a2 b8			                ldx  #<sregp
209		.0e5b	a0 0e			                ldy  #>sregp+1
210		.0e5d	20 2b 0c		                jsr  putscxy
211		.0e60	a2 c3			                ldx  #<sregs
212		.0e62	a0 0e			                ldy  #>sregs+1
213		.0e64	20 2b 0c		                jsr  putscxy
214		.0e67	a2 ce			                ldx  #<sregpc
215		.0e69	a0 0e			                ldy  #>sregpc+1
216		.0e6b	20 2b 0c		                jsr  putscxy
218		.0e6e	a2 dd			                ldx  #<sregz1
219		.0e70	a0 0e			                ldy  #>sregz1+1
220		.0e72	20 2b 0c		                jsr  putscxy
221		.0e75	a2 ed			                ldx  #<sregz2
222		.0e77	a0 0e			                ldy  #>sregz2+1
223		.0e79	20 2b 0c		                jsr  putscxy
224		.0e7c	58				                cli
225		.0e7d	20 92 0b		                jsr  clrinverse
226		.0e80	ad 02 0f		                lda  regpch
227		.0e83	48				                pha
231		.0e84	ad 03 0f		                lda  regpcl
232		.0e87	48				                pha
238		.0e88	ac ff 0e		                ldy  regy
239		.0e8b	ae fe 0e		                ldx  regx
240		.0e8e	ad 00 0f		                lda  regp
241		.0e91	48				                pha
245		.0e92	ad fd 0e		                lda  rega
246		.0e95	28				                plp
250		.0e96	60				                rts
251		>0e97	01 c0 00 17		srega   .byte   colr,bkcol,coln,line
252		>0e9b	20 41 3a 24		        .text   ' a:$' ;4,24
253		>0e9f	00 00 00		vala    .byte   0,0,0
254		>0ea2	01 c0 06 17		sregx   .byte   colr,bkcol,coln+6,line
255		>0ea6	20 58 3a 24		        .text   ' x:$' ;4,24
256		>0eaa	00 00 00		valx    .byte   0,0,0
257		>0ead	01 c0 0c 17		sregy   .byte   colr,bkcol,coln+12,line
258		>0eb1	20 59 3a 24		        .text   ' y:$' ;4,24
259		>0eb5	00 00 00		valy    .byte   0,0,0
260		>0eb8	01 c0 12 17		sregp   .byte   colr,bkcol,coln+18,line
261		>0ebc	20 50 3a 24		        .text   ' p:$' ;4,24
262		>0ec0	00 00 00		valp    .byte   0,0,0
263		>0ec3	01 c0 18 17		sregs   .byte   colr,bkcol,coln+24,line
264		>0ec7	20 53 3a 24		        .text   ' s:$' ;4,24
265		>0ecb	00 00 00		vals    .byte   0,0,0
266		>0ece	01 c0 1e 17		sregpc  .byte   colr,bkcol,coln+30,line
267		>0ed2	20 50 43 3a		        .text   ' pc:$' ;4,24
		>0ed6	24
268		>0ed7	00 00			valpch  .byte   0,0
269		>0ed9	00 00 20 00		valpcl  .byte   0,0,32,0
271		>0edd	01 c0 03 18		sregz1  .byte   colr,bkcol,coln+3,line+1
272		>0ee1	20 5a 50 31		        .text   ' zp1:$' ;4,24
		>0ee5	3a 24
273		>0ee7	00 00			valz1h  .byte   0,0
274		>0ee9	00 00 20 00		valz1l  .byte   0,0,32,0
276		>0eed	01 c0 0f 18		sregz2  .byte   colr,bkcol,coln+15,line+1
277		>0ef1	20 5a 50 32		        .text   ' zp2:$' ;4,24
		>0ef5	3a 24
278		>0ef7	00 00			valz2h  .byte   0,0
279		>0ef9	00 00 20 00		valz2l  .byte   0,0,32,0
281		>0efd	00				rega    .byte   0
282		>0efe	00				regx    .byte   0
283		>0eff	00				regy    .byte   0
284		>0f00	00				regp    .byte   0
285		>0f01	00				regs    .byte   0
286		>0f02	00				regpch  .byte   0
287		>0f03	00				regpcl  .byte   0
288		>0f04	00				regpcl2 .byte   0
289		>0f05	00				vzp1h   .byte   0
290		>0f06	00				vzp1l   .byte   0
291		>0f07	00				vzp2h   .byte   0
292		>0f08	00				vzp2l   .byte   0

:1		;******  Return to file: joystick2-mc.asm


:9		;******  Processing file: "/home/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_joystick.asm"

5		=$dc00					js_2port       =    $dc00
6		=$dc01					js_1port       =    $dc01
7		=$dc02					js_2dir        =    $dc02
8		=$dc03					js_1dir        =    $dc03
9		=2						js_xoffset     =    2
10		=2						js_yoffset     =    2
11		=0						js_location    =    0
12		.0f09					js_init
13		.0f09	20 10 08		               jsr  push
14		.0f0c	ad 03 dc		               lda  js_1dir
15		.0f0f	29 e0			               and  #$e0
16		.0f11	8d 03 dc		               sta  js_1dir
17		.0f14	ad 02 dc		               lda  js_2dir
18		.0f17	29 e0			               and  #$e0
19		.0f19	8d 02 dc		               sta  js_2dir
20		.0f1c	20 4f 08		               jsr  pop
21		.0f1f	60				               rts
24		.0f20					js_scan
25		.0f20	20 27 0f		               jsr  js_1scan
26		.0f23	20 d6 0f		               jsr  js_2scan
27		.0f26	60				               rts
32		.0f27					js_1scan
33		.0f27	20 10 08		               jsr  push
34		.0f2a	ad 01 dc		               lda  js_1port
35		.0f2d	29 1f			               and  #$1f
36		.0f2f	c9 00			               cmp  #$00
37		.0f31	d0 03			               bne  p1scan
38		.0f33	4c c6 0f		               jmp  port1_out
39		.0f36	49 1f			p1scan         eor  #$1f
42		.0f38	18				               clc
47		.0f39	4a				js_1b0         lsr
49		.0f3a	90 14			               bcc  js_1b1
51		.0f3c	48				               pha
52		.0f3d	ee f0 12		               inc  js_1flag
54		.0f40	ad ec 12		               lda  js_1pixy
56		.0f43	38				               sec
58		.0f44	e9 02			               sbc  #js_yoffset
59		.0f46	c9 f0			               cmp  #$f0
60		.0f48	90 02			               bcc  sto1ym
61		.0f4a	a9 00			               lda  #$00
63		.0f4c	8d ec 12		sto1ym         sta  js_1pixy
65		.0f4f	68				               pla
70		.0f50	4a				js_1b1         lsr
72		.0f51	90 14			               bcc  js_1b2
74		.0f53	48				               pha
75		.0f54	ee f0 12		               inc  js_1flag
77		.0f57	ad ec 12		               lda  js_1pixy
79		.0f5a	18				               clc
81		.0f5b	69 02			               adc  #js_yoffset
82		.0f5d	c9 c7			               cmp  #199
83		.0f5f	90 02			               bcc  sto1yp
84		.0f61	a9 c7			               lda  #199
86		.0f63	8d ec 12		sto1yp         sta  js_1pixy
88		.0f66	68				               pla
93		.0f67	4a				js_1b2         lsr
95		.0f68	90 20			               bcc  js_1b3
97		.0f6a	48				               pha
98		.0f6b	ee f0 12		               inc  js_1flag
100		.0f6e	ad ea 12		               lda  js_1pixx
101		.0f71	0d eb 12		               ora  js_1pixx+1
102		.0f74	f0 13			               beq  js_1b2out
104		.0f76	38				               sec
106		.0f77	ad ea 12		               lda  js_1pixx
108		.0f7a	e9 02			               sbc  #js_xoffset
110		.0f7c	8d ea 12		               sta  js_1pixx
112		.0f7f	b0 08			               bcs  js_1b2out
113		.0f81	ad eb 12		               lda  js_1pixx+1
114		.0f84	f0 03			               beq  js_1b2out
116		.0f86	ce eb 12		               dec  js_1pixx+1
118		.0f89	68				js_1b2out      pla
123		.0f8a	4a				js_1b3         lsr
125		.0f8b	90 22			               bcc  js_1b4
127		.0f8d	48				               pha
128		.0f8e	ee f0 12		               inc  js_1flag
129		.0f91	ad eb 12		               lda  js_1pixx+1
130		.0f94	f0 0a			               beq  incj1x
131		.0f96	ad ea 12		               lda  js_1pixx
132		.0f99	c9 3c			               cmp  #$40-4
133		.0f9b	30 03			               bmi  incj1x
134		.0f9d	4c ae 0f		               jmp  js_1b3out
136		.0fa0	18				incj1x         clc
137		.0fa1	ad ea 12		               lda  js_1pixx
139		.0fa4	69 02			               adc  #js_xoffset
141		.0fa6	8d ea 12		               sta  js_1pixx
143		.0fa9	90 03			               bcc  js_1b3out
145		.0fab	ee eb 12		               inc  js_1pixx+1
147		.0fae	68				js_1b3out      pla
151		.0faf	4a				js_1b4          lsr                     ;Estce le bbouton fire (F)
152		.0fb0	90 14			                bcc     port1_out       ;Oui!
153		.0fb2	ee f0 12		                inc     js_1flag
154		.0fb5	ee ef 12		                inc     js_1fire        ; on augmente le nombre de tir
155		.0fb8	a2 01			js_1wait        ldx     #$01
156		.0fba	a0 ff			                ldy     #$ff
157		.0fbc	c8				js_1rel         iny
159		.0fbd	ad 01 dc		                lda     js_1port
160		.0fc0	49 ff			                eor     #$ff
161		.0fc2	29 10			                and     #$10
163		.0fc4	d0 f6			                bne     js_1rel         ; des boutons
164		.0fc6	ad f0 12		port1_out       lda     js_1flag
165		.0fc9	f0 08			                beq     out
166		.0fcb	20 c8 10		                jsr     js_1correct
167		.0fce	a9 00			                lda     #0
168		.0fd0	8d f0 12		                sta     js_1flag
169		.0fd3	20 4f 08		out             jsr     pop
174		.0fd6					js_2scan
175		.0fd6	20 10 08		                jsr     push
176		.0fd9	ad 00 dc		port2           lda     js_2port
177		.0fdc	29 1f			                and     #$1f
178		.0fde	c9 1f			                cmp	#$1f
179		.0fe0	d0 03			                bne     p2scan
181		.0fe2	4c 99 10		                jmp     port2_out
182		.0fe5	49 1f			p2scan          eor     #$1f
183		.0fe7	a2 02			                ldx     #$02
185		.0fe9	18				                clc
189		.0fea	4a				js_2b0          lsr                     ;On decale js_2 bit 0 dans C
190		.0feb	90 14			                bcc     js_2b1          ;Est-ce vers le haut (U)
191		.0fed	48				                pha                     ;On stack la valeur
192		.0fee	ee fb 12		                inc     js_2flag
193		.0ff1	ad f7 12		                lda     js_2pixy        ;Oui!
194		.0ff4	38				                sec                     ;On place la carry a 1
195		.0ff5	e9 02			                sbc     #js_yoffset     ;On reduit
196		.0ff7	c9 f0			                cmp     #$f0
197		.0ff9	90 02			                bcc     sto2ym
198		.0ffb	a9 00			                lda     #$00
199		.0ffd	8d f7 12		sto2ym          sta     js_2pixy        ; le y
200		.1000	68				                pla                     ;On recupere la valeur
204		.1001	4a				js_2b1          lsr                     ;On decale js_2 bit 0 dans C
205		.1002	90 14			                bcc     js_2b2          ;Est-ce vers le bas (D)
206		.1004	48				                pha                     ;On stack la valeur
207		.1005	ee fb 12		                inc     js_2flag
208		.1008	ad f7 12		                lda     js_2pixy        ;Oui!
209		.100b	18				                clc                     ;On place la carry a 0
210		.100c	69 02			                adc     #js_yoffset     ;On augmente
211		.100e	c9 c7			                cmp     #199
212		.1010	90 02			                bcc     sto2yp
213		.1012	a9 c7			                lda     #199
214		.1014	8d f7 12		sto2yp          sta     js_2pixy        ; le y
215		.1017	68				                pla                     ;On recupere la valeur
219		.1018	4a				js_2b2          lsr                     ;On decale js_2 bit 0 dans C
220		.1019	90 20			                bcc     js_2b3          ;Est-ce vers la gauche (L)
221		.101b	48				                pha                     ;On stack la valeur
222		.101c	ee fb 12		                inc     js_2flag
223		.101f	ad f5 12		                lda     js_2pixx        ;Oui!
224		.1022	0d f6 12		                ora     js_2pixx+1
225		.1025	f0 13			                beq     js_2b2out
226		.1027	38				                sec                     ;On place la carry a 1
227		.1028	ad f5 12		                lda     js_2pixx        ;Oui!
228		.102b	e9 02			                sbc     #js_xoffset     ;On diminue
229		.102d	8d f5 12		                sta     js_2pixx        ; le X
230		.1030	b0 08			                bcs     js_2b2out       ; de offset
231		.1032	ad f6 12		                lda     js_2pixx+1
232		.1035	f0 03			                beq     js_2b2out
233		.1037	ce f6 12		                dec     js_2pixx+1      ; sur 16 bits
234		.103a	68				js_2b2out       pla                     ;On recupere la valeur
238		.103b	4a				js_2b3          lsr                     ;On decale js_2 bit 0 dans C
239		.103c	90 22			                bcc     js_2b4          ;Est-ce vers la droite (R)
240		.103e	48				                pha                     ;On stack la valeur
241		.103f	ee fb 12		                inc     js_2flag
242		.1042	ad f6 12		                lda     js_2pixx+1
243		.1045	f0 0a			                beq     incj2x
244		.1047	ad f5 12		                lda     js_2pixx
245		.104a	c9 3e			                cmp     #$40-js_xoffset
246		.104c	30 03			                bmi     incj2x
247		.104e	4c 5f 10		                jmp     js_2b3out
248		.1051	18				incj2x          clc                     ;On place la carry a 0
249		.1052	ad f5 12		                lda     js_2pixx        ;Oui!
250		.1055	69 02			                adc     #js_xoffset     ;On augmente
251		.1057	8d f5 12		                sta     js_2pixx        ; le X
252		.105a	90 03			                bcc     js_2b3out       ; de offset
253		.105c	ee f6 12		                inc     js_2pixx+1      ; sur 16 bits
254		.105f	68				js_2b3out       pla                     ;On recupere la valeur
258		.1060	4a				js_2b4          lsr                     ;Estce le bbouton fire (F)
259		.1061	90 36			                bcc     port2_out       ;Oui!
260		.1063	ee fb 12		                inc     js_2flag
261		.1066	ee fa 12		                inc     js_2fire        ; on augmente le nombre de tir
262		.1069	a9 01			                lda     #%00000001
263		.106b	8d ff 12		                sta     js_2events
264		.106e	ad f5 12		                lda     js_2pixx
265		.1071	8d fc 12		                sta     js_2clickx
266		.1074	ad f6 12		                lda     js_2pixx+1
267		.1077	8d fd 12		                sta     js_2clickx+1
268		.107a	ad f7 12		                lda     js_2pixy
269		.107d	8d fe 12		                sta     js_2clicky
270		.1080	ad 61 13		                lda     js_2val16a+1
271		.1083	49 40			                eor     #%01000000
272		.1085	8d 61 13		                sta     js_2val16a+1
273		.1088	a2 00			js_2wait        ldx     #$00
274		.108a	a0 ff			                ldy     #$ff
275		.108c	c8				js_2rel         iny
276		.108d	d0 01			                bne     sr1
277		.108f	e8				                inx
278		.1090					sr1
279		.1090	ad 00 dc		                lda     js_2port
280		.1093	49 ff			                eor     #$ff
281		.1095	29 10			                and     #$10
283		.1097	d0 f3			                bne     js_2rel         ; des boutons
284		.1099	ad fb 12		port2_out       lda     js_2flag
285		.109c	f0 08			                beq     out
286		.109e	20 fd 10		                jsr     js_2correct
287		.10a1	a9 00			                lda     #0
288		.10a3	8d fb 12		                sta     js_2flag
289		.10a6	20 4f 08		out             jsr     pop
294		.10a9					js_corrector
295		.10a9	08				                php
296		.10aa	48				                pha
297		.10ab	ad f0 12		                lda     js_1flag
298		.10ae	f0 08			                beq     check2
299		.10b0	20 c8 10		                jsr     js_1correct
300		.10b3	a9 00			                lda     #0
301		.10b5	8d f0 12		                sta     js_1flag
302		.10b8	ad fb 12		check2          lda     js_2flag
303		.10bb	f0 08			                beq     no_update
304		.10bd	20 fd 10		                jsr     js_2correct
305		.10c0	a9 00			                lda     #0
306		.10c2	8d fb 12		                sta     js_2flag
307		.10c5	68				no_update       pla
308		.10c6	28				                plp
309		.10c7	60				                rts
314		.10c8					js_1correct
315		.10c8	08				                php
316		.10c9	48				                pha
318		.10ca	ad ea 12		                lda     js_1pixx
319		.10cd	8d fb 10		                sta     vallsb
320		.10d0	ad eb 12		                lda     js_1pixx+1
321		.10d3	6a				                ror                     ; ex = %0000000100000001 = 257 pixel
322		.10d4	6e fb 10		                ror     vallsb          ; Cnnnnnnn      On divise par 8 pc les
323		.10d7	4e fb 10		                lsr     vallsb          ; 0Cnnnnnn      caracteres de 8 pixels
324		.10da	4e fb 10		                lsr     vallsb          ; 00Cnnnnn
325		.10dd	ad fb 10		                lda     vallsb          ; devient = %00100000 = 32
326		.10e0	8d ed 12		                sta     js_1x
328		.10e3	ad ec 12		                lda     js_1pixy
329		.10e6	8d fb 10		                sta     vallsb
330		.10e9	4e fb 10		                lsr     vallsb          ; Cnnnnnnn     On divise par 8 pc les
331		.10ec	4e fb 10		                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
332		.10ef	4e fb 10		                lsr     vallsb          ; 00Cnnnnn
333		.10f2	ad fb 10		                lda     vallsb          ; devient = %00100000 = 32
334		.10f5	8d ee 12		                sta     js_1y
335		.10f8	68				                pla
336		.10f9	28				                plp
337		.10fa	60				                rts
338		>10fb	00				vallsb          .byte     0
339		>10fc	00				regx            .byte     0
344		.10fd					js_2correct
345		.10fd	08				                php
346		.10fe	48				                pha
348		.10ff	ad f5 12		                lda     js_2pixx
349		.1102	8d 30 11		                sta     vallsb
350		.1105	ad f6 12		                lda     js_2pixx+1
351		.1108	6a				                ror                     ; ex = %0000000100000001 = 257 pixel
352		.1109	6e 30 11		                ror     vallsb          ; Cnnnnnnn     On divise par 8 pc les
353		.110c	4e 30 11		                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
354		.110f	4e 30 11		                lsr     vallsb          ; 00Cnnnnn
355		.1112	ad 30 11		                lda     vallsb          ; devient = %00100000 = 32
356		.1115	8d f8 12		                sta     js_2x
358		.1118	ad f7 12		                lda     js_2pixy
359		.111b	8d 30 11		                sta     vallsb
360		.111e	4e 30 11		                lsr     vallsb          ; Cnnnnnnn     On divise par 8 pc les
361		.1121	4e 30 11		                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
362		.1124	4e 30 11		                lsr     vallsb          ; 00Cnnnnn
363		.1127	ad 30 11		                lda     vallsb          ; devient = %00100000 = 32
364		.112a	8d f9 12		                sta     js_2y
365		.112d	68				                pla
366		.112e	28				                plp
367		.112f	60				                rts
368		>1130	00				vallsb          .byte     0
369		>1131	00				regx            .byte     0
374		.1132					js_showvals
376		.1132	20 c2 11		                jsr     js_2showvals
377		.1135	60				                rts
382		.1136					js_1showvals
383		.1136	20 10 08		                jsr     push
385		.1139	ad ed 12		                lda     js_1x
386		.113c	20 e2 09		                jsr     a2hex
387		.113f	ad cb 09		                lda     a2hexstr+1
388		.1142	8d 13 13		                sta     js_1val8+19
389		.1145	ad cc 09		                lda     a2hexstr+2
390		.1148	8d 14 13		                sta     js_1val8+20
392		.114b	ad ea 12		                lda     js_1pixx
393		.114e	20 e2 09		                jsr     a2hex
394		.1151	ad cb 09		                lda     a2hexstr+1
395		.1154	8d 32 13		                sta     js_1val16+14
396		.1157	ad cc 09		                lda     a2hexstr+2
397		.115a	8d 33 13		                sta     js_1val16+15
398		.115d	ad eb 12		                lda     js_1pixx+1
399		.1160	20 e2 09		                jsr     a2hex
400		.1163	ad cb 09		                lda     a2hexstr+1
401		.1166	8d 30 13		                sta     js_1val16+12
402		.1169	ad cc 09		                lda     a2hexstr+2
403		.116c	8d 31 13		                sta     js_1val16+13
405		.116f	ad ee 12		                lda     js_1y
406		.1172	20 e2 09		                jsr     a2hex
409		.1175	ad cb 09		                lda     a2hexstr+1
410		.1178	8d 17 13		                sta     js_1val8+23
411		.117b	ad cc 09		                lda     a2hexstr+2
412		.117e	8d 18 13		                sta     js_1val8+24
414		.1181	ad ec 12		                lda     js_1pixy
415		.1184	20 e2 09		                jsr     a2hex
416		.1187	ad cb 09		                lda     a2hexstr+1
417		.118a	8d 38 13		                sta     js_1val16+20
418		.118d	ad cc 09		                lda     a2hexstr+2
419		.1190	8d 39 13		                sta     js_1val16+21
420		.1193	a9 00			                lda     #0
421		.1195	20 e2 09		                jsr     a2hex
422		.1198	ad cb 09		                lda     a2hexstr+1
423		.119b	8d 36 13		                sta     js_1val16+18
424		.119e	ad cc 09		                lda     a2hexstr+2
425		.11a1	8d 37 13		                sta     js_1val16+19
427		.11a4	ad ef 12		                lda     js_1fire
428		.11a7	20 e2 09		                jsr     a2hex
429		.11aa	ad cc 09		                lda     a2hexstr+2
430		.11ad	8d 21 13		                sta     js_1val8+33
431		.11b0	a2 00			                ldx     #<js_1val8
432		.11b2	a0 13			                ldy     #>js_1val8
433		.11b4	20 2b 0c		                jsr     putscxy
434		.11b7	a2 24			                ldx     #<js_1val16
435		.11b9	a0 13			                ldy     #>js_1val16
436		.11bb	20 2b 0c		                jsr     putscxy
437		.11be	20 4f 08		                jsr     pop
438		.11c1	60				                rts
443		.11c2					js_2showvals
444		.11c2	20 10 08		                jsr     push                    ; stack : y, x, a, flg
446		.11c5	ad f8 12		                lda     js_2x
447		.11c8	20 e2 09		                jsr     a2hex
448		.11cb	ad ca 09		                lda     a2hexstr
449		.11ce	8d 4f 13		                sta     js_2val8+19
450		.11d1	ad cb 09		                lda     a2hexstr+1
451		.11d4	8d 50 13		                sta     js_2val8+20
454		.11d7	ad fc 12		                lda     js_2clickx
455		.11da	20 e2 09		                jsr     a2hex
456		.11dd	ad ca 09		                lda     a2hexstr
457		.11e0	8d 7d 13		                sta     js_2val16+14
458		.11e3	ad cb 09		                lda     a2hexstr+1
459		.11e6	8d 7e 13		                sta     js_2val16+15
461		.11e9	ad fd 12		                lda     js_2clickx+1
462		.11ec	20 e2 09		                jsr     a2hex
463		.11ef	ad ca 09		                lda     a2hexstr
464		.11f2	8d 7b 13		                sta     js_2val16+12
465		.11f5	ad cb 09		                lda     a2hexstr+1
466		.11f8	8d 7c 13		                sta     js_2val16+13
468		.11fb	ad f9 12		                lda     js_2y
469		.11fe	20 e2 09		                jsr     a2hex
470		.1201	ad ca 09		                lda     a2hexstr
471		.1204	8d 53 13		                sta     js_2val8+23
472		.1207	ad cb 09		                lda     a2hexstr+1
473		.120a	8d 54 13		                sta     js_2val8+24
476		.120d	ad fe 12		                lda     js_2clicky
477		.1210	20 e2 09		                jsr     a2hex
478		.1213	ad ca 09		                lda     a2hexstr
479		.1216	8d 83 13		                sta     js_2val16+20
480		.1219	ad cb 09		                lda     a2hexstr+1
481		.121c	8d 84 13		                sta     js_2val16+21
482		.121f	a9 00			                lda     #0
483		.1221	20 e2 09		                jsr     a2hex
484		.1224	ad ca 09		                lda     a2hexstr
485		.1227	8d 81 13		                sta     js_2val16+18
486		.122a	ad cb 09		                lda     a2hexstr+1
487		.122d	8d 82 13		                sta     js_2val16+19
489		.1230	ad fa 12		                lda     js_2fire
490		.1233	20 e2 09		                jsr     a2hex
491		.1236	ad cb 09		                lda     a2hexstr+1
492		.1239	8d 5d 13		                sta     js_2val8+33
494		.123c	a2 3c			                ldx     #<js_2val8
495		.123e	a0 13			                ldy     #>js_2val8
496		.1240	20 2b 0c		                jsr     putscxy
497		.1243	a2 60			                ldx     #<js_2val16a
498		.1245	a0 13			                ldy     #>js_2val16a
499		.1247	20 2b 0c		                jsr     putscxy
500		.124a	a2 6f			                ldx     #<js_2val16
501		.124c	a0 13			                ldy     #>js_2val16
502		.124e	20 2b 0c		                jsr     putscxy
503		.1251	20 4f 08		                jsr     pop
504		.1254	60				                rts
507		.1255					js_updatecurs
508		.1255	20 10 08		                jsr     push
518		.1258	ad f8 12		running         lda     js_2x
519		.125b	cd e4 12		                cmp     js_x
520		.125e	f0 06			                beq     chky
521		.1260	8d e4 12		                sta     js_x
522		.1263	ee b7 12		                inc     flag
523		.1266	ad f9 12		chky            lda     js_2y
524		.1269	cd e5 12		                cmp     js_y
525		.126c	f0 06			                beq     chkflag
526		.126e	8d e5 12		                sta     js_y
527		.1271	ee b7 12		                inc     flag
528		.1274	ad b7 12		chkflag         lda     flag
529		.1277	f0 1e			                beq     showit
530		.1279	ae e6 12		                ldx     js_oldx
531		.127c	ac e7 12		                ldy     js_oldy
532		.127f	20 b8 12		                jsr     js_eoraddrxy
533		.1282	ae e4 12		                ldx     js_x
534		.1285	ac e5 12		                ldy     js_y
535		.1288	20 b8 12		                jsr     js_eoraddrxy
536		.128b	ad e4 12		                lda     js_x
537		.128e	8d e6 12		                sta     js_oldx
538		.1291	ad e5 12		                lda     js_y
539		.1294	8d e7 12		                sta     js_oldy
540		.1297	a9 00			showit          lda     #0
541		.1299	8d b7 12		                sta     flag
542		.129c	8d bb 09		                sta     addr1
543		.129f	a9 04			                lda     #$04
544		.12a1	8d bc 09		                sta     addr1+1
545		.12a4	ae e4 12		                ldx     js_x
546		.12a7	ac e5 12		                ldy     js_y
547		.12aa	20 81 09		                jsr     xy2addr
548		.12ad	ac bd 09		                ldy     addr2
549		.12b0	ae be 09		                ldx     addr2+1
551		.12b3	20 4f 08		                jsr pop
552		.12b6	60				                rts
553		>12b7	00				flag            .byte   0
556		.12b8					js_eoraddrxy
557		.12b8	20 10 08		                jsr     push
559		.12bb	20 63 09		                jsr     savezp2
560		.12be	a9 04			                lda     #$04
561		.12c0	8d bc 09		                sta     addr1+1
562		.12c3	a9 00			                lda     #0
563		.12c5	8d bb 09		                sta     addr1
564		.12c8	20 81 09		                jsr     xy2addr
565		.12cb	ac bd 09		                ldy     addr2
566		.12ce	84 fd			                sty     zpage2
567		.12d0	ae be 09		                ldx     addr2+1
568		.12d3	86 fe			                stx     zpage2+1
569		.12d5	a0 00			                ldy     #0
570		.12d7	b1 fd			                lda     (zpage2),y
571		.12d9	49 40			                eor     #%01000000
572		.12db	91 fd			                sta     (zpage2),y
573		.12dd	20 72 09		                jsr     restzp2
574		.12e0	20 4f 08		                jsr     pop
575		.12e3	60				                rts
578		>12e4	00				js_x            .byte   0
579		>12e5	00				js_y            .byte   0
580		>12e6	ff				js_oldx         .byte   $ff
581		>12e7	ff				js_oldy         .byte   $ff
582		>12e8	00				js_oldcar       .byte   0
583		>12e9	00				js_oldcol       .byte   0
586		>12ea	00 00			js_1pixx        .word   0
587		>12ec	00				js_1pixy        .byte   0
588		>12ed	00				js_1x           .byte   0
589		>12ee	00				js_1y           .byte   0
590		>12ef	00				js_1fire        .byte   0
591		>12f0	00				js_1flag        .byte   0
592		>12f1	00 00			js_1clickx      .word   0
593		>12f3	00				js_1clicky      .byte   0
594		>12f4	00				js_1events      .byte   0
596		>12f5	00 00			js_2pixx        .word   0
597		>12f7	00				js_2pixy        .byte   0
598		>12f8	00				js_2x           .byte   0
599		>12f9	00				js_2y           .byte   0
600		>12fa	00				js_2fire        .byte   0
601		>12fb	00				js_2flag        .byte   0
602		>12fc	00 00			js_2clickx      .word   0
603		>12fe	00				js_2clicky      .byte   0
604		>12ff	00				js_2events      .byte   0
606		=$03					js_txtcol       =       vcyan
607		=$00					js_txtbak       =       bkcol0
608		>1300	03 00 04 05		js_1val8        .byte     js_txtcol,js_txtbak,4,5
611		>1304	d0 4f 52 54		                .text   "Port 1 (x,y):($00,$00) Fire:(0)"
		>1308	20 31 20 28 58 2c 59 29 3a 28 24 30 30 2c 24 30
		>1318	30 29 20 c6 49 52 45 3a 28 30 29
612		>1323	00				                .byte   0
615		>1324	03 00 0b 07		js_1val16       .byte   js_txtcol,js_txtbak,11,7
616		>1328	28 58 2c 59		                .text   "(x,y):($0000,$0000)"
		>132c	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29
617		>133b	00				                .byte   0
620		>133c	03 00 04 0a		js_2val8        .byte   js_txtcol,js_txtbak,4,10
621		>1340	c3 41 52 d0		                .text   "CarPos (x,y):($00,$00) Fire:(0)"
		>1344	4f 53 20 28 58 2c 59 29 3a 28 24 30 30 2c 24 30
		>1354	30 29 20 c6 49 52 45 3a 28 30 29
622		>135f	00				                .byte   0
623		>1360	01 00 04 0c		js_2val16a      .byte   vblanc,js_txtbak,4,12
624		>1364	c3 4c 49 43		                .text   "Click pos."
		>1368	4b 20 50 4f 53 2e
625		>136e	00				                .byte   0
626		>136f	03 00 10 0c		js_2val16       .byte   js_txtcol,js_txtbak,16,12
627		>1373	28 58 2c 59		                .text   "(x,y):($0000,$0000)"
		>1377	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29
628		>1386	00				                .byte   0

:1		;******  Return to file: joystick2-mc.asm


:10		;******  Processing file: "/home/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_spriteman.asm"

4		.1387					sprt_init
5		.1387	20 10 08		                jsr     push
9		.138a	ad dc 13		                lda     sprt_ptr
10		.138d	20 be 14		                jsr     sprt_loadptr
11		.1390	20 45 09		                jsr     savezp1
12		.1393	20 63 09		                jsr     savezp2
14		.1396	ad 15 d0		                lda     vic+$15 ; enable sprite 2
15		.1399	09 04			                ora     #%00000100
16		.139b	8d 15 d0		                sta     vic+$15
18		.139e	a9 0d			                lda     #$0d
19		.13a0	8d fa 07		                sta     $7fa
21		.13a3	ad 9a 17		                lda     sprt_ptr0
22		.13a6	85 fb			                sta     zpage1
23		.13a8	ad 9b 17		                lda     sprt_ptr0+1
24		.13ab	85 fc			                sta     zpage1+1
26		.13ad	a9 40			                lda     #$40
27		.13af	85 fd			                sta     zpage2
28		.13b1	a9 03			                lda     #$03
29		.13b3	85 fe			                sta     zpage2+1
30		.13b5	a0 41			                ldy     #65
31		.13b7	b1 fb			                lda     (zpage1),y      ; sprite y offset
32		.13b9	8d 01 15		                sta     sprt_yoffset
33		.13bc	88				                dey
34		.13bd	b1 fb			                lda     (zpage1),y      ; sprite x offset
35		.13bf	8d 00 15		                sta     sprt_xoffset
36		.13c2	88				                dey
37		.13c3	b1 fb			                lda     (zpage1),y      ; sprite color
38		.13c5	8d 29 d0		                sta     $d029
39		.13c8	88				                dey
40		.13c9	a0 3e			                ldy     #62
41		.13cb	b1 fb			nextbyte        lda     (zpage1),y
42		.13cd	91 fd			                sta     (zpage2),y
43		.13cf	88				                dey
44		.13d0	d0 f9			                bne     nextbyte
58		.13d2	20 54 09		                jsr     restzp1
59		.13d5	20 72 09		                jsr     restzp2
60		.13d8	20 4f 08		                jsr     pop
61		.13db	60				                rts
63		>13dc	01				sprt_ptr        .byte   $01
67		.13dd					sprt_calcpos
68		.13dd	20 10 08		                jsr     push
69		.13e0	a9 00			                lda     #0
70		.13e2	8d 03 15		                sta     sprt_x+1
71		.13e5	8d 05 15		                sta     sprt_y+1
72		.13e8	ad f6 12		                lda     js_2pixx+1
73		.13eb	18				                clc
74		.13ec	2a				                rol
75		.13ed	2a				                rol
76		.13ee	8d 03 15		                sta     sprt_x+1
77		.13f1	ad f5 12		                lda     js_2pixx
78		.13f4	18				                clc
79		.13f5	6d 00 15		                adc     sprt_xoffset
80		.13f8	8d 02 15		                sta     sprt_x
81		.13fb	90 08			                bcc     norepx
82		.13fd	ad 03 15		                lda     sprt_x+1
83		.1400	09 04			                ora     #$04
84		.1402	8d 03 15		                sta     sprt_x+1
85		.1405	ad f7 12		norepx          lda     js_2pixy
86		.1408	18				                clc
87		.1409	6d 01 15		                adc     sprt_yoffset
88		.140c	8d 04 15		                sta     sprt_y
89		.140f	20 4f 08		                jsr     pop
90		.1412	60				                rts
95		.1413					sprt_move
96		.1413	20 10 08		                jsr     push
97		.1416	20 dd 13		                jsr     sprt_calcpos
98		.1419	ad 02 15		                lda     sprt_x
99		.141c	8d 04 d0		                sta     vic+$04
100		.141f	ad 03 15		                lda     sprt_x+1
101		.1422	8d 10 d0		                sta     vic+$10
102		.1425	ad 04 15		                lda     sprt_y
103		.1428	8d 05 d0		                sta     vic+$05
104		.142b	20 32 14		                jsr     sprt_showpos
105		.142e	20 4f 08		                jsr     pop
106		.1431	60				                rts
111		.1432					sprt_showpos
112		.1432	20 10 08		                jsr     push
114		.1435	ad 02 15		                lda     sprt_x
115		.1438	20 e2 09		                jsr     a2hex
116		.143b	ad ca 09		                lda     a2hexstr
117		.143e	8d c9 17		                sta     sprite_pos+26
118		.1441	ad cb 09		                lda     a2hexstr+1
119		.1444	8d ca 17		                sta     sprite_pos+27
121		.1447	ad 03 15		                lda     sprt_x+1
122		.144a	20 e2 09		                jsr     a2hex
123		.144d	ad ca 09		                lda     a2hexstr
124		.1450	8d c7 17		                sta     sprite_pos+24
125		.1453	ad cb 09		                lda     a2hexstr+1
126		.1456	8d c8 17		                sta     sprite_pos+25
128		.1459	ad 04 15		                lda     sprt_y
129		.145c	20 e2 09		                jsr     a2hex
130		.145f	ad ca 09		                lda     a2hexstr
131		.1462	8d cf 17		                sta     sprite_pos+32
132		.1465	ad cb 09		                lda     a2hexstr+1
133		.1468	8d d0 17		                sta     sprite_pos+33
135		.146b	a9 00			                lda     #0
136		.146d	20 e2 09		                jsr     a2hex
137		.1470	ad ca 09		                lda     a2hexstr
138		.1473	8d cd 17		                sta     sprite_pos+30
139		.1476	ad cb 09		                lda     a2hexstr+1
140		.1479	8d ce 17		                sta     sprite_pos+31
142		.147c	a2 af			                ldx     #<sprite_pos
143		.147e	a0 17			                ldy     #>sprite_pos
144		.1480	20 2b 0c		                jsr     putscxy
145		.1483	20 4f 08		                jsr     pop
146		.1486	60				                rts
151		.1487					sprt_loadptr2
152		.1487	20 10 08		                jsr     push
153		.148a	aa				                tax
154		.148b	8e dc 13		                stx     sprt_ptr
155		.148e	ad 9b 17		                lda     sprt_ptr0+1
156		.1491	8d bd 14		                sta     calcbuff+1
157		.1494	ad 9a 17		                lda     sprt_ptr0
158		.1497	8d bc 14		                sta     calcbuff
159		.149a	e0 00			                cpx     #0
160		.149c	f0 11			                beq     addrok
161		.149e	ad bc 14		                lda     calcbuff
162		.14a1	18				nextx           clc
163		.14a2	69 42			                adc     #66
164		.14a4	90 03			                bcc     nocarry
165		.14a6	ee bd 14		                inc     calcbuff+1
166		.14a9	8d bc 14		nocarry         sta     calcbuff
167		.14ac	ca				                dex
168		.14ad	d0 f2			                bne     nextx
169		.14af	ac bd 14		addrok          ldy     calcbuff+1
170		.14b2	ae bc 14		                ldx     calcbuff
172		.14b5	20 d8 14		                jsr     sprt_setimage
173		.14b8	20 4f 08		                jsr     pop
174		.14bb	60				                rts
175		>14bc	00 00			calcbuff        .word   $0
180		.14be					sprt_loadptr
181		.14be	20 10 08		                jsr     push
182		.14c1	ad dc 13		                lda     sprt_ptr
183		.14c4	18				                clc
184		.14c5	2a				                rol
185		.14c6	a8				                tay
186		.14c7	b9 9a 17		                lda     sprt_ptr0,y
187		.14ca	aa				                tax
188		.14cb	b9 9b 17		                lda     sprt_ptr0+1,y
189		.14ce	a8				                tay
191		.14cf	20 d8 14		                jsr     sprt_setimage
192		.14d2	20 4f 08		                jsr     pop
193		.14d5	60				                rts
194		>14d6	00 00			calcbuff        .word   $0
199		.14d8					sprt_setimage
200		.14d8	20 10 08		                jsr     push
201		.14db	20 45 09		                jsr     savezp1
202		.14de	20 63 09		                jsr     savezp2
203		.14e1	84 fc			                sty     zpage1+1
204		.14e3	86 fb			                stx     zpage1
205		.14e5	a0 15			                ldy     #>sprt_image
206		.14e7	84 fe			                sty     zpage2+1
207		.14e9	a0 06			                ldy     #<sprt_image
208		.14eb	84 fd			                sty     zpage2
209		.14ed	a0 42			                ldy     #66
210		.14ef	b1 fb			nextbyte        lda     (zpage1),y
211		.14f1	91 fd			                sta     (zpage2),y
212		.14f3	88				                dey
213		.14f4	d0 f9			                bne     nextbyte
214		.14f6	20 72 09		                jsr     restzp2
215		.14f9	20 54 09		                jsr     restzp1
216		.14fc	20 4f 08		                jsr     pop
217		.14ff	60				                rts
219		>1500	00				sprt_xoffset    .byte   $00
220		>1501	00				sprt_yoffset    .byte   $00
221		>1502	00 00			sprt_x          .word   $0000
222		>1504	00 00			sprt_y          .word   $0000
224		>1506					sprt_image      .fill 66
226		>1548	00 00 00 00		sprt_crxair     .byte $00, $00, $00, $00, $00, $00 ; 6
		>154c	00 00
227		>154e	00 66 00 00		                .byte $00, $66, $00, $00, $3c, $00 ; 12
		>1552	3c 00
228		>1554	00 18 00 00		                .byte $00, $18, $00, $00, $00, $00 ; 18
		>1558	00 00
229		>155a	00 00 00 00		                .byte $00, $00, $00, $00, $18, $00 ; 24
		>155e	18 00
230		>1560	80 00 01 c0		                .byte $80, $00, $01, $c0, $18, $03 ; 30
		>1564	18 03
231		>1566	66 66 66 c0		                .byte $66, $66, $66, $c0, $18, $03 ; 36
		>156a	18 03
232		>156c	80 00 01 00		                .byte $80, $00, $01, $00, $18, $00 ; 42
		>1570	18 00
233		>1572	00 00 00 00		                .byte $00, $00, $00, $00, $00, $00 ; 48
		>1576	00 00
234		>1578	00 18 00 00		                .byte $00, $18, $00, $00, $3c, $00 ; 54
		>157c	3c 00
235		>157e	00 66 00 00		                .byte $00, $66, $00, $00, $00, $00 ; 60
		>1582	00 00
236		>1584	00 00 00 01		                .byte $00, $00, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
		>1588	0c 28
238		>158a	80 00 00 e0		sprt_mouse      .byte $80, $00, $00, $e0, $00, $00 ; 6
		>158e	00 00
239		>1590	b8 00 00 ce		                .byte $b8, $00, $00, $ce, $00, $00 ; 12
		>1594	00 00
240		>1596	83 80 00 c0		                .byte $83, $80, $00, $c0, $e0, $00 ; 18
		>159a	e0 00
241		>159c	80 18 00 c0		                .byte $80, $18, $00, $c0, $3c, $00 ; 24
		>15a0	3c 00
242		>15a2	80 e0 00 c0		                .byte $80, $e0, $00, $c0, $60, $00 ; 30
		>15a6	60 00
243		>15a8	98 30 00 fc		                .byte $98, $30, $00, $fc, $18, $00 ; 36
		>15ac	18 00
244		>15ae	c6 0c 00 03		                .byte $c6, $0c, $00, $03, $06, $00 ; 42
		>15b2	06 00
245		>15b4	01 9c 00 00		                .byte $01, $9c, $00, $00, $f0, $00 ; 48
		>15b8	f0 00
246		>15ba	00 40 00 00		                .byte $00, $40, $00, $00, $00, $00 ; 54
		>15be	00 00
247		>15c0	00 00 00 00		                .byte $00, $00, $00, $00, $00, $00 ; 60
		>15c4	00 00
248		>15c6	00 00 00 01		                .byte $00, $00, $00, $01, $18, $31 ; 66, X,X,X color, xoffset, yoffset
		>15ca	18 31
250		>15cc	00 7c 00 01		sprt_pointer    .byte $00, $7c, $00, $01, $83, $00 ; 6
		>15d0	83 00
251		>15d2	06 10 c0 08		                .byte $06, $10, $c0, $08, $00, $30 ; 12
		>15d6	00 30
252		>15d8	12 10 88 20		                .byte $12, $10, $88, $20, $00, $08 ; 18
		>15dc	00 08
253		>15de	40 ba 04 40		                .byte $40, $ba, $04, $40, $6c, $04 ; 24
		>15e2	6c 04
254		>15e4	80 c6 02 aa		                .byte $80, $c6, $02, $aa, $82, $aa ; 30
		>15e8	82 aa
255		>15ea	80 c6 02 40		                .byte $80, $c6, $02, $40, $6c, $04 ; 36
		>15ee	6c 04
256		>15f0	40 ba 04 20		                .byte $40, $ba, $04, $20, $00, $08 ; 42
		>15f4	00 08
257		>15f6	12 10 90 08		                .byte $12, $10, $90, $08, $00, $20 ; 48
		>15fa	00 20
258		>15fc	06 10 c0 01		                .byte $06, $10, $c0, $01, $83, $00 ; 54
		>1600	83 00
259		>1602	00 7c 00 00		                .byte $00, $7c, $00, $00, $00, $00 ; 60
		>1606	00 00
260		>1608	00 00 00 01		                .byte $00, $00, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
		>160c	0c 28
262		>160e	55 55 55 aa		sprt_pointer2   .byte $55, $55, $55, $aa, $aa, $aa ; 6
		>1612	aa aa
263		>1614	55 55 55 aa		                .byte $55, $55, $55, $aa, $aa, $aa ; 12
		>1618	aa aa
264		>161a	55 55 55 aa		                .byte $55, $55, $55, $aa, $aa, $aa ; 18
		>161e	aa aa
265		>1620	54 00 55 aa		                .byte $54, $00, $55, $aa, $00, $2a ; 24
		>1624	00 2a
266		>1626	54 00 55 aa		                .byte $54, $00, $55, $aa, $00, $2a ; 30
		>162a	00 2a
267		>162c	54 00 55 aa		                .byte $54, $00, $55, $aa, $00, $2a ; 36
		>1630	00 2a
268		>1632	54 00 55 aa		                .byte $54, $00, $55, $aa, $00, $2a ; 42
		>1636	00 2a
269		>1638	54 00 55 aa		                .byte $54, $00, $55, $aa, $aa, $aa ; 48
		>163c	aa aa
270		>163e	55 55 55 aa		                .byte $55, $55, $55, $aa, $aa, $aa ; 54
		>1642	aa aa
271		>1644	55 55 55 aa		                .byte $55, $55, $55, $aa, $aa, $aa ; 60
		>1648	aa aa
272		>164a	55 55 55 01		                .byte $55, $55, $55, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
		>164e	0c 28
274		>1650	06 00 00 0f		sprt_hand       .byte $06, $00, $00, $0f, $00, $00 ; 6
		>1654	00 00
275		>1656	19 80 00 10		                .byte $19, $80, $00, $10, $80, $00 ; 12
		>165a	80 00
276		>165c	19 80 00 16		                .byte $19, $80, $00, $16, $b1, $8c ; 18
		>1660	b1 8c
277		>1662	10 ca 52 10		                .byte $10, $ca, $52, $10, $84, $21 ; 24
		>1666	84 21
278		>1668	10 84 21 30		                .byte $10, $84, $21, $30, $84, $21 ; 30
		>166c	84 21
279		>166e	50 84 21 90		                .byte $50, $84, $21, $90, $84, $21 ; 36
		>1672	84 21
280		>1674	90 00 01 90		                .byte $90, $00, $01, $90, $00, $01 ; 42
		>1678	00 01
281		>167a	90 7f c1 90		                .byte $90, $7f, $c1, $90, $00, $01 ; 48
		>167e	00 01
282		>1680	40 ff e2 40		                .byte $40, $ff, $e2, $40, $00, $02 ; 54
		>1684	00 02
283		>1686	3c 00 04 02		                .byte $3c, $00, $04, $02, $00, $08 ; 60
		>168a	00 08
284		>168c	03 ff f8 01		                .byte $03, $ff, $f8, $01, $12, $31 ; 66, X,X,X color, xoffset, yoffset
		>1690	12 31
286		>1692	00 3e 00 01		sprt_ultraman   .byte $00, $3e, $00, $01, $c1, $c0 ; 6
		>1696	c1 c0
287		>1698	0e 3e 30 08		                .byte $0e, $3e, $30, $08, $41, $08 ; 12
		>169c	41 08
288		>169e	10 1c 04 10		                .byte $10, $1c, $04, $10, $22, $04 ; 18
		>16a2	22 04
289		>16a4	24 1c 12 23		                .byte $24, $1c, $12, $23, $00, $62 ; 24
		>16a8	00 62
290		>16aa	20 08 02 47		                .byte $20, $08, $02, $47, $c1, $f1 ; 30
		>16ae	c1 f1
291		>16b0	6a aa ab 47		                .byte $6a, $aa, $ab, $47, $c9, $f1 ; 36
		>16b4	c9 f1
292		>16b6	20 08 02 20		                .byte $20, $08, $02, $20, $14, $02 ; 42
		>16ba	14 02
293		>16bc	20 00 02 10		                .byte $20, $00, $02, $10, $00, $04 ; 48
		>16c0	00 04
294		>16c2	10 7f 04 08		                .byte $10, $7f, $04, $08, $00, $08 ; 54
		>16c6	00 08
295		>16c8	06 3e 30 01		                .byte $06, $3e, $30, $01, $c1, $c0 ; 60
		>16cc	c1 c0
296		>16ce	00 3e 00 01		                .byte $00, $3e, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
		>16d2	0c 28
298		>16d4	00 1c 00 00		sprt_male       .byte $00, $1c, $00, $00, $3e, $00 ; 6
		>16d8	3e 00
299		>16da	00 3e 00 00		                .byte $00, $3e, $00, $00, $3e, $00 ; 12
		>16de	3e 00
300		>16e0	00 1c 00 00		                .byte $00, $1c, $00, $00, $08, $00 ; 18
		>16e4	08 00
301		>16e6	00 ff 80 00		                .byte $00, $ff, $80, $00, $ff, $80 ; 24
		>16ea	ff 80
302		>16ec	00 be 80 00		                .byte $00, $be, $80, $00, $9c, $80 ; 30
		>16f0	9c 80
303		>16f2	00 88 80 00		                .byte $00, $88, $80, $00, $be, $80 ; 36
		>16f6	be 80
304		>16f8	00 be 80 01		                .byte $00, $be, $80, $01, $9c, $c0 ; 42
		>16fc	9c c0
305		>16fe	01 94 c0 00		                .byte $01, $94, $c0, $00, $14, $00 ; 48
		>1702	14 00
306		>1704	00 14 00 00		                .byte $00, $14, $00, $00, $14, $00 ; 54
		>1708	14 00
307		>170a	00 36 00 00		                .byte $00, $36, $00, $00, $77, $00 ; 60
		>170e	77 00
308		>1710	00 77 00 01		                .byte $00, $77 ,$00, $01, $0c, $2f ; 66, X,X,X color, xoffset, yoffset
		>1714	0c 2f
310		>1716	00 3c 00 00		sprt_robot      .byte $00, $3c, $00, $00, $24, $00 ; 6
		>171a	24 00
311		>171c	00 66 18 00		                .byte $00, $66, $18, $00, $66, $38 ; 12
		>1720	66 38
312		>1722	00 24 38 00		                .byte $00, $24, $38, $00, $3c, $10 ; 18
		>1726	3c 10
313		>1728	00 18 10 00		                .byte $00, $18, $10, $00, $18, $10 ; 24
		>172c	18 10
314		>172e	0f ff f0 08		                .byte $0f, $ff, $f0, $08, $7e, $00 ; 30
		>1732	7e 00
315		>1734	08 7e 00 08		                .byte $08, $7e, $00, $08, $18, $00 ; 36
		>1738	18 00
316		>173a	1c 18 00 1c		                .byte $1c, $18, $00, $1c, $18, $00 ; 42
		>173e	18 00
317		>1740	18 3c 00 00		                .byte $18, $3c, $00, $00, $3c, $00 ; 48
		>1744	3c 00
318		>1746	00 24 00 00		                .byte $00, $24, $00, $00, $24, $00 ; 54
		>174a	24 00
319		>174c	00 24 00 03		                .byte $00, $24, $00, $03, $e7, $c0 ; 60
		>1750	e7 c0
320		>1752	03 e7 c0 01		                .byte $03, $e7, $c0, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
		>1756	0c 28
322		>1758	00 1c 00 00		sprt_femme      .byte $00, $1c, $00, $00, $3e, $00 ; 6
		>175c	3e 00
323		>175e	00 3e 00 00		                .byte $00, $3e, $00, $00, $3e, $00 ; 12
		>1762	3e 00
324		>1764	00 1c 00 00		                .byte $00, $1c, $00, $00, $08, $00 ; 18
		>1768	08 00
325		>176a	00 7f 00 00		                .byte $00, $7f, $00, $00, $ff, $80 ; 24
		>176e	ff 80
326		>1770	00 be 80 00		                .byte $00, $be, $80, $00, $9c, $80 ; 30
		>1774	9c 80
327		>1776	00 88 80 00		                .byte $00, $88, $80, $00, $9c, $80 ; 36
		>177a	9c 80
328		>177c	00 be 80 01		                .byte $00, $be, $80, $01, $be, $c0 ; 42
		>1780	be c0
329		>1782	01 be c0 00		                .byte $01, $be, $c0, $00, $7f, $00 ; 48
		>1786	7f 00
330		>1788	00 7f 00 00		                .byte $00, $7f, $00, $00, $ff, $80 ; 54
		>178c	ff 80
331		>178e	00 36 00 00		                .byte $00, $36, $00, $00, $77, $00 ; 60
		>1792	77 00
332		>1794	00 55 00 01		                .byte $00, $55 ,$00, $01, $0c, $2f ; 66, X,X,X color, xoffset, yoffset
		>1798	0c 2f
334		>179a	06 15			sprt_ptr0       .word  sprt_image + (0*66)
335		>179c	48 15			sprt_ptr1       .word  sprt_image + (1*66)
336		>179e	8a 15			sprt_ptr2       .word  sprt_image + (2*66)
337		>17a0	cc 15			sprt_ptr3       .word  sprt_image + (3*66)
338		>17a2	0e 16			sprt_ptr4       .word  sprt_image + (4*66)
339		>17a4	50 16			sprt_ptr5       .word  sprt_image + (5*66)
340		>17a6	92 16			sprt_ptr6       .word  sprt_image + (6*66)
341		>17a8	d4 16			sprt_ptr7       .word  sprt_image + (7*66)
342		>17aa	16 17			sprt_ptr8       .word  sprt_image + (8*66)
343		>17ac	58 17			sprt_ptr9       .word  sprt_image + (9*66)
344		>17ae	ff				testbyte        .byte 255
345		=$07					sprt_txtcol     =       vjaune
346		=$00					sprt_txtbak     =       bkcol0
347		=$01					sprt_color      =       vwhite
348		>17af	07 00 04 0e		sprite_pos      .byte   sprt_txtcol,sprt_txtbak,4,14
351		>17b3	d3 50 52 49		                .text       "Sprite pos. (x,y):($0000,$0000)"
		>17b7	54 45 20 50 4f 53 2e 20 28 58 2c 59 29 3a 28 24
		>17c7	30 30 30 30 2c 24 30 30 30 30 29
352		>17d2	00				                .byte   0

:1		;******  Return to file: joystick2-mc.asm

21		.17d3					main
25		.17d3	20 9b 0a		                jsr     scrmaninit
26		.17d6	20 09 0f		                jsr     js_init
27		.17d9	a9 80			                lda     #$80
28		.17db	8d 87 0a		                sta     curcol
29		.17de	a9 00			                lda     #0
30		.17e0	8d 21 d0		                sta     vicbackcol
31		.17e3	a9 06			                lda     #vbleu
32		.17e5	8d 20 d0		                sta     vicbordcol
33		.17e8	20 2b 0b		                jsr     cls
34		.17eb	a9 20			                lda     #$20
35		.17ed	09 00			                ora     #%00000000
36		.17ef	a0 04			                ldy     #$04
37		.17f1	a2 04			                ldx     #$04
38		.17f3	20 9e 08		                jsr     memfill
39		.17f6	a9 00			                lda     #$00
40		.17f8	a0 d8			                ldy     #$d8
41		.17fa	20 9e 08		                jsr     memfill
42		.17fd	20 87 13		                jsr     sprt_init
43		.1800	20 88 0b		goagain         jsr     setinverse
44		.1803	a2 d2			                ldx     #<bstring1
45		.1805	a0 18			                ldy     #>bstring1
46		.1807	20 2b 0c		                jsr     putscxy
48		.180a	a2 ff			                ldx     #<bstring2
49		.180c	a0 18			                ldy     #>bstring2
50		.180e	20 2b 0c		                jsr     putscxy
51		.1811	a2 2c			                ldx     #<bstring3
52		.1813	a0 19			                ldy     #>bstring3
53		.1815	20 2b 0c		                jsr     putscxy
54		.1818	a2 59			                ldx     #<bstring4
55		.181a	a0 19			                ldy     #>bstring4
56		.181c	20 2b 0c		                jsr     putscxy
57		.181f	20 92 0b		                jsr     clrinverse
58		.1822	a2 70			                ldx     #<js_status1
59		.1824	a0 19			                ldy     #>js_status1
60		.1826	20 2b 0c		                jsr     putscxy
61		.1829	a2 88			                ldx     #<js_status2
62		.182b	a0 19			                ldy     #>js_status2
63		.182d	20 2b 0c		                jsr     putscxy
64		.1830	a2 9f			                ldx     #<js_status3
65		.1832	a0 19			                ldy     #>js_status3
66		.1834	20 2b 0c		                jsr     putscxy
67		.1837	a2 b8			                ldx     #<js_status4
68		.1839	a0 19			                ldy     #>js_status4
69		.183b	20 2b 0c		                jsr     putscxy
70		.183e	a2 d1			                ldx     #<js_status5
71		.1840	a0 19			                ldy     #>js_status5
72		.1842	20 2b 0c		                jsr     putscxy
73		.1845	a2 e7			                ldx     #<js_status6
74		.1847	a0 19			                ldy     #>js_status6
75		.1849	20 2b 0c		                jsr     putscxy
77		.184c	a2 00			                ldx     #$00
78		.184e	a0 0f			                ldy     #$0f
79		.1850	20 ee 0b		                jsr     gotoxy
80		.1853	a9 07			                lda     #vjaune
81		.1855	20 5a 0c		                jsr     setcurcol
82		.1858	a2 00			                ldx     #$00
83		.185a	20 6f 0c		                jsr     setbkcol
91		.185d					looper
92		.185d	20 20 0f		               jsr  js_scan
93		.1860	20 32 11		               jsr     js_showvals
95		.1863	20 13 14		               jsr     sprt_move
96		.1866					loopit
98		.1866	a2 16			               ldx     #$16
99		.1868	a0 11			               ldy     #$11
100		.186a	20 ee 0b		               jsr     gotoxy
101		.186d	a9 03			               lda     #3
102		.186f	20 5a 0c		               jsr     setcurcol
103		.1872	ee d1 18		               inc     onebyte
104		.1875	ad d1 18		               lda     onebyte
105		.1878	ad fa 12		               lda     js_2fire
106		.187b	20 68 0a		               jsr     putabinfmt
124		.187e	48				               pha
125		.187f	ad fa 12		               lda     js_2fire
126		.1882	f0 42			               beq     nochange
127		.1884	ad 20 d0		               lda     vicbordcol
128		.1887	18				               clc
129		.1888	69 00			               adc     #$0
130		.188a	29 0f			               and     #$0f
131		.188c	8d 20 d0		               sta     vicbordcol
132		.188f	ad f9 12		               lda     js_2y
133		.1892	c9 04			               cmp     #$04
134		.1894	d0 20			               bne     toborder
135		.1896	ad f8 12		               lda  js_2x
136		.1899	c9 0b			               cmp  #$0b
137		.189b	30 19			               bmi  toborder
138		.189d	c9 1d			               cmp  #$1d
139		.189f	10 15			               bpl  toborder
140		.18a1	ee dc 13		               inc  sprt_ptr
141		.18a4	ad dc 13		               lda  sprt_ptr
142		.18a7	20 4b 0d		               jsr  showregs
143		.18aa	c9 09			               cmp  #9
144		.18ac	90 02			               bcc  drawsptr
145		.18ae	a9 00			               lda  #$00
146		.18b0	8d dc 13		drawsptr       sta  sprt_ptr
147		.18b3	20 87 13		               jsr     sprt_init
149		.18b6	ad 20 d0		toborder       lda     vicbordcol
150		.18b9	38				               sec
151		.18ba	69 00			               adc     #0
152		.18bc	29 0f			               and     #$0f
153		.18be	8d 29 d0		               sta     $d029
154		.18c1	a9 00			               lda     #$00
155		.18c3	8d fa 12		               sta     js_2fire
156		.18c6					nochange
157		.18c6	e8				               inx
158		.18c7	68				               pla
159		.18c8	20 e1 ff		               jsr     kstop
160		.18cb	d0 90			               bne     looper
161		.18cd	20 66 fe		               jsr     k_warmboot
162		.18d0	60				out            rts
163		>18d1	00				onebyte        .byte   0
165		>18d2	07 00 00 00		bstring1       .byte   vjaune,bkcol0,0,0
168		>18d6	20 20 20 20		               .text   "      Visualisation du port jeu #2      "
		>18da	20 20 56 09 13 15 01 0c 09 13 01 14 09 0f 0e 20
		>18ea	04 15 20 10 0f 12 14 20 0a 05 15 20 23 32 20 20
		>18fa	20 20 20 20
169		>18fe	00				               .byte   0
170		>18ff	07 40 00 01		bstring2       .byte   vjaune,bkcol1,0,1
171		>1903	20 50 12 0f		               .text   " Programme assembleur pour 6502 sur C64 "
		>1907	07 12 01 0d 0d 05 20 01 13 13 05 0d 02 0c 05 15
		>1917	12 20 10 0f 15 12 20 36 35 30 32 20 13 15 12 20
		>1927	43 36 34 20
172		>192b	00				               .byte   0
173		>192c	0e 80 00 02		bstring3       .byte   vbleu1,bkcol2,0,2
174		>1930	20 20 20 20		               .text   "      par Daniel Lafrance (2021) C      "
		>1934	20 20 10 01 12 20 44 01 0e 09 05 0c 20 4c 01 06
		>1944	12 01 0e 03 05 20 28 32 30 32 31 29 20 43 20 20
		>1954	20 20 20 20
175		>1958	00				               .byte   0
176		>1959	07 c0 0b 04		bstring4       .byte   vjaune,bkcol3,11,4
177		>195d	20 43 08 01		               .text   " Changer pointeur "
		>1961	0e 07 05 12 20 10 0f 09 0e 14 05 15 12 20
178		>196f	00				               .byte   0
179		>1970	0d 00 13 16		js_status1     .byte   vvert1,bkcol0,19,22
180		>1974	20 20 20 15		               .text   "   up <----1> haut "
		>1978	10 20 3c 2d 2d 2d 2d 31 3e 20 08 01 15 14 20
181		>1987	00				               .byte   0
182		>1988	0e 00 13 15		js_status2     .byte   vbleu1,bkcol0,19,21
183		>198c	20 04 0f 17		               .text   " down <---2-> bas "
		>1990	0e 20 3c 2d 2d 2d 32 2d 3e 20 02 01 13 20
184		>199e	00				               .byte   0
185		>199f	0a 00 13 14		js_status3     .byte   vrose,bkcol0,19,20
186		>19a3	20 0c 05 06		               .text   " left <--4--> gauche"
		>19a7	14 20 3c 2d 2d 34 2d 2d 3e 20 07 01 15 03 08 05
187		>19b7	00				               .byte   0
188		>19b8	07 00 13 13		js_status4     .byte   vjaune,bkcol0,19,19
189		>19bc	12 09 07 08		               .text   "right <-8---> droite"
		>19c0	14 20 3c 2d 38 2d 2d 2d 3e 20 04 12 0f 09 14 05
190		>19d0	00				               .byte   0
191		>19d1	01 00 13 12		js_status5     .byte   vblanc,bkcol0,19,18
192		>19d5	20 46 09 12		               .text   " Fire <1----> Feu"
		>19d9	05 20 3c 31 2d 2d 2d 2d 3e 20 46 05 15
193		>19e6	00				               .byte   0
194		>19e7	03 00 01 17		js_status6     .byte   vcyan,bkcol0,1,23
195		>19eb	2b 2d 3e 20		               .text   "+-> Etat de JS2:     %---FRLDU EOR #$1F"
		>19ef	45 14 01 14 20 04 05 20 4a 53 32 3a 20 20 20 20
		>19ff	20 25 2d 2d 2d 46 52 4c 44 55 20 45 4f 52 20 23
		>1a0f	24 31 46
196		>1a12	00				               .byte   0

;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L joystick2-mc.txt -o joystick2-mc.prg joystick2-mc.asm
; Mon Mar 27 00:18:45 2023

;Offset	;Hex		;Source

;******  Processing input file: joystick2-mc.asm

="20230326-115700"	                VERSION="20230326-115700"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: joystick2-mc.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: joystick2-mc.asm

.080d			main
.080d	20 15 0d	                jsr     scrmaninit
.0810	20 83 11	                jsr     js_init
.0813	a9 80		                lda     #$80
.0815	8d 01 0d	                sta     curcol
.0818	a9 00		                lda     #0
.081a	8d 21 d0	                sta     vicbackcol
.081d	a9 06		                lda     #vbleu
.081f	8d 20 d0	                sta     vicbordcol
.0822	20 a5 0d	                jsr     cls
.0825	a9 20		                lda     #$20
.0827	09 00		                ora     #%00000000
.0829	a0 04		                ldy     #$04
.082b	a2 04		                ldx     #$04
.082d	20 db 0a	                jsr     memfill
.0830	a9 00		                lda     #$00
.0832	a0 d8		                ldy     #$d8
.0834	20 db 0a	                jsr     memfill
.0837	20 01 16	                jsr     sprt_init
.083a	20 02 0e	goagain         jsr     setinverse
.083d	a2 0c		                ldx     #<bstring1
.083f	a0 09		                ldy     #>bstring1
.0841	20 a5 0e	                jsr     putscxy
.0844	a2 39		                ldx     #<bstring2
.0846	a0 09		                ldy     #>bstring2
.0848	20 a5 0e	                jsr     putscxy
.084b	a2 66		                ldx     #<bstring3
.084d	a0 09		                ldy     #>bstring3
.084f	20 a5 0e	                jsr     putscxy
.0852	a2 93		                ldx     #<bstring4
.0854	a0 09		                ldy     #>bstring4
.0856	20 a5 0e	                jsr     putscxy
.0859	20 0c 0e	                jsr     clrinverse
.085c	a2 aa		                ldx     #<js_status1
.085e	a0 09		                ldy     #>js_status1
.0860	20 a5 0e	                jsr     putscxy
.0863	a2 c2		                ldx     #<js_status2
.0865	a0 09		                ldy     #>js_status2
.0867	20 a5 0e	                jsr     putscxy
.086a	a2 d9		                ldx     #<js_status3
.086c	a0 09		                ldy     #>js_status3
.086e	20 a5 0e	                jsr     putscxy
.0871	a2 f2		                ldx     #<js_status4
.0873	a0 09		                ldy     #>js_status4
.0875	20 a5 0e	                jsr     putscxy
.0878	a2 0b		                ldx     #<js_status5
.087a	a0 0a		                ldy     #>js_status5
.087c	20 a5 0e	                jsr     putscxy
.087f	a2 21		                ldx     #<js_status6
.0881	a0 0a		                ldy     #>js_status6
.0883	20 a5 0e	                jsr     putscxy
.0886	a2 00		                ldx     #$00
.0888	a0 0f		                ldy     #$0f
.088a	20 68 0e	                jsr     gotoxy
.088d	a9 07		                lda     #vjaune
.088f	20 d4 0e	                jsr     setcurcol
.0892	a2 00		                ldx     #$00
.0894	20 e9 0e	                jsr     setbkcol
.0897			looper
.0897	20 9a 11	               jsr  js_scan
.089a	20 ac 13	               jsr     js_showvals
.089d	20 8d 16	               jsr     sprt_move
.08a0			loopit
.08a0	a2 16		               ldx     #$16
.08a2	a0 11		               ldy     #$11
.08a4	20 68 0e	               jsr     gotoxy
.08a7	a9 03		               lda     #3
.08a9	20 d4 0e	               jsr     setcurcol
.08ac	ee 0b 09	               inc     onebyte
.08af	ad 0b 09	               lda     onebyte
.08b2	ad 74 15	               lda     js_2fire
.08b5	20 e2 0c	               jsr     putabinfmt
.08b8	48		               pha
.08b9	ad 74 15	               lda     js_2fire
.08bc	f0 42		               beq     nochange
.08be	ad 20 d0	               lda     vicbordcol
.08c1	18		               clc
.08c2	69 00		               adc     #$0
.08c4	29 0f		               and     #$0f
.08c6	8d 20 d0	               sta     vicbordcol
.08c9	ad 73 15	               lda     js_2y
.08cc	c9 04		               cmp     #$04
.08ce	d0 20		               bne     toborder
.08d0	ad 72 15	               lda  js_2x
.08d3	c9 0b		               cmp  #$0b
.08d5	30 19		               bmi  toborder
.08d7	c9 1d		               cmp  #$1d
.08d9	10 15		               bpl  toborder
.08db	ee 56 16	               inc  sprt_ptr
.08de	ad 56 16	               lda  sprt_ptr
.08e1	20 c5 0f	               jsr  showregs
.08e4	c9 09		               cmp  #9
.08e6	90 02		               bcc  drawsptr
.08e8	a9 00		               lda  #$00
.08ea	8d 56 16	drawsptr       sta  sprt_ptr
.08ed	20 01 16	               jsr     sprt_init
.08f0	ad 20 d0	toborder       lda     vicbordcol
.08f3	38		               sec
.08f4	69 00		               adc     #0
.08f6	29 0f		               and     #$0f
.08f8	8d 29 d0	               sta     $d029
.08fb	a9 00		               lda     #$00
.08fd	8d 74 15	               sta     js_2fire
.0900			nochange
.0900	e8		               inx
.0901	68		               pla
.0902	20 e1 ff	               jsr     kstop
.0905	d0 90		               bne     looper
.0907	20 66 fe	               jsr     k_warmboot
.090a	60		out            rts
>090b	00		onebyte        .byte   0
>090c	07 00 00 00	bstring1       .byte   vjaune,bkcol0,0,0
>0910	20 20 20 20	               .text   "      Visualisation du port jeu #2      "
>0914	20 20 56 09 13 15 01 0c 09 13 01 14 09 0f 0e 20
>0924	04 15 20 10 0f 12 14 20 0a 05 15 20 23 32 20 20
>0934	20 20 20 20
>0938	00		               .byte   0
>0939	07 40 00 01	bstring2       .byte   vjaune,bkcol1,0,1
>093d	20 50 12 0f	               .text   " Programme assembleur pour 6502 sur C64 "
>0941	07 12 01 0d 0d 05 20 01 13 13 05 0d 02 0c 05 15
>0951	12 20 10 0f 15 12 20 36 35 30 32 20 13 15 12 20
>0961	43 36 34 20
>0965	00		               .byte   0
>0966	0e 80 00 02	bstring3       .byte   vbleu1,bkcol2,0,2
>096a	20 20 20 20	               .text   "      par Daniel Lafrance (2021) C      "
>096e	20 20 10 01 12 20 44 01 0e 09 05 0c 20 4c 01 06
>097e	12 01 0e 03 05 20 28 32 30 32 31 29 20 43 20 20
>098e	20 20 20 20
>0992	00		               .byte   0
>0993	07 c0 0b 04	bstring4       .byte   vjaune,bkcol3,11,4
>0997	20 43 08 01	               .text   " Changer pointeur "
>099b	0e 07 05 12 20 10 0f 09 0e 14 05 15 12 20
>09a9	00		               .byte   0
>09aa	0d 00 13 16	js_status1     .byte   vvert1,bkcol0,19,22
>09ae	20 20 20 15	               .text   "   up <----1> haut "
>09b2	10 20 3c 2d 2d 2d 2d 31 3e 20 08 01 15 14 20
>09c1	00		               .byte   0
>09c2	0e 00 13 15	js_status2     .byte   vbleu1,bkcol0,19,21
>09c6	20 04 0f 17	               .text   " down <---2-> bas "
>09ca	0e 20 3c 2d 2d 2d 32 2d 3e 20 02 01 13 20
>09d8	00		               .byte   0
>09d9	0a 00 13 14	js_status3     .byte   vrose,bkcol0,19,20
>09dd	20 0c 05 06	               .text   " left <--4--> gauche"
>09e1	14 20 3c 2d 2d 34 2d 2d 3e 20 07 01 15 03 08 05
>09f1	00		               .byte   0
>09f2	07 00 13 13	js_status4     .byte   vjaune,bkcol0,19,19
>09f6	12 09 07 08	               .text   "right <-8---> droite"
>09fa	14 20 3c 2d 38 2d 2d 2d 3e 20 04 12 0f 09 14 05
>0a0a	00		               .byte   0
>0a0b	01 00 13 12	js_status5     .byte   vblanc,bkcol0,19,18
>0a0f	20 46 09 12	               .text   " Fire <1----> Feu"
>0a13	05 20 3c 31 2d 2d 2d 2d 3e 20 46 05 15
>0a20	00		               .byte   0
>0a21	03 00 01 17	js_status6     .byte   vcyan,bkcol0,1,23
>0a25	2b 2d 3e 20	               .text   "+-> Etat de JS2:     %---FRLDU EOR #$1F"
>0a29	45 14 01 14 20 04 05 20 4a 53 32 3a 20 20 20 20
>0a39	20 25 2d 2d 2d 46 52 4c 44 55 20 45 4f 52 20 23
>0a49	24 31 46
>0a4c	00		               .byte   0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$90			kiostatus       =       $90       ; Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7       ; Current filename length (byte)
=$b9			cursecadd       =       $b9       ; Current secondary address (byte)
=$ba			curdevno        =       $ba       ; Current device number (byte)
=$bb			curfptr         =       $bb       ; Current file pointer (word)
=$fb			zpage1          =       $fb       ; zero page 1 address (word)
=$fd			zpage2          =       $fd       ; zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$0286			bascol          =       $0286     ;basic next chr colscreenram (byte)
=$0400			scrnram         =       $0400     ;video character ram
=$0400			scrram0         =       $0400
=$0500			scrram1         =       $0500
=$0600			scrram2         =       $0600
=$0700			scrram3         =       $0700
=$0801			basicsta        =       $0801     ;basic start address
=$a000			basicrom        =       $a000
=$d400			sid             =       $d400     ;sid base address
=$d800			colorram        =       $d800     ;video color ram
=$d800			colram0         =       $d800
=$d900			colram1         =       $d900
=$da00			colram2         =       $da00
=$db00			colram3         =       $db00
=$dc00			cia1            =       $dc00     ;cia1  base address
=$dd00			cia2            =       $dd00     ;cia2 base address
=$e000			kernalrom       =       $e000
=43			txttab          =       43
=$14			linnum          =       $14
=$c6			ndx             =       $c6     ;Number of character in keyboard buffer
=$033c			tpbuff          =       $033c   ;$033c-$03fb (828-1019)
=$277			kbbuff          =       $277
=$28d			shflag          =       $28d    ;653
=828			tbuffer         =       828
=806			ibsout          =       806
=$ea31			irq             =       $ea31
=$314			cinv            =       $314        ; brk instruction interupt
=$c5			lstx            =       $c5         ;matrix coordinate of last key pressed
=$03			bstop           =       $03      ;stop
=$05			bwhite          =       $05      ;set color white
=$08			block           =       $08      ;lock the charset
=$09			bunlock         =       $09      ;unlock the charset
=$0d			bcarret         =       $0d
=$0e			btext           =       $0e
=$11			bcrsdn          =       $11      ;cursor down 1 line
=$12			brevcol         =       $12
=$13			bhome           =       $13
=$14			bdelete         =       $14
=$1c			bred            =       $1c
=$1d			bcuright        =       $1d
=$1e			bgreen          =       $1e
=$1f			bblue           =       $1f
=$81			borange         =       $81
=$83			blrun           =       $83
=$85			bfkey1          =       $85
=$86			bfkey2          =       $86
=$87			bfkey3          =       $87
=$88			bfkey4          =       $88
=$89			bfkey5          =       $89
=$8a			bfkey6          =       $8a
=$8b			bfkey7          =       $8b
=$8c			bfkey8          =       $8c
=$8d			bcarret1        =       $8d
=$8e			bgraph          =       $8e
=$90			bblack          =       $90
=$91			bcuup           =       $91
=$92			brevoff         =       $92
=$93			bclear          =       $93
=$94			binsert         =       $94
=$95			bbrown          =       $95
=$96			bltred          =       $96
=$97			bdkgrey         =       $97
=$98			bmdgrey         =       $98
=$99			bltgreen        =       $99
=$9a			bltblue         =       $9a
=$9b			bltgrey         =       $9b
=$9c			bmagenta        =       $9c
=$9d			bculeft         =       $9d
=$9e			byellow         =       $9e
=$9f			bcyan           =       $9f
=$0286			carcol          =       $0286
=$030a			ieval           =       $030a
=$73			chrget          =       $73
=$79			chrgot          =       $79
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.0a4d			libtart

;******  Return to file: joystick2-mc.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col= vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: joystick2-mc.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.0a4d			push
.0a4d	08		          php            ; stack : flg, pcl, pch
.0a4e	78		          sei
.0a4f	8d 89 0a	          sta  ra        ; save a
.0a52	68		          pla            ; stack : pcl, pch
.0a53	8d 88 0a	          sta  rp        ; save rp
.0a56	68		          pla            ; stack : pch
.0a57	8d 8a 0a	          sta  pc        ; save pcl
.0a5a	68		          pla            ; stack : -
.0a5b	8d 8b 0a	          sta  pc+1      ; save pch
.0a5e	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0a60	48		          pha            ; stack : zp1l
.0a61	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0a63	48		          pha            ; stack : zp1h, zp1l
.0a64	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0a66	48		          pha            ; stack : zp2l, zp1h, zp1l
.0a67	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0a69	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0a6a	ad 88 0a	          lda  rp        ; get rp
.0a6d	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0a6e	ad 89 0a	          lda  ra        ; get a
.0a71	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0a72	8a		          txa            ; get x
.0a73	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a74	98		          tya            ; get y
.0a75	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a76	ad 8b 0a	          lda  pc+1      ; get pch
.0a79	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a7a	ad 8a 0a	          lda  pc        ; get pcl
.0a7d	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a7e	ad 88 0a	          lda  rp        ; get rp
.0a81	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a82	ad 89 0a	          lda  ra        ; get a
.0a85	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a86	58		          cli
.0a87	60		          rts
>0a88	00		rp        .byte     0
>0a89	00		ra        .byte     0
>0a8a	00 00		pc        .word     0
.0a8c			pull
.0a8c			pop
.0a8c	78		          sei
.0a8d	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a8e	8d c1 0a	          sta  pc        ; save pcl
.0a91	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a92	8d c2 0a	          sta  pc+1      ; save pch
.0a95	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a96	a8		          tay            ; set y
.0a97	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0a98	aa		          tax            ; set x
.0a99	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0a9a	8d c0 0a	          sta  ra        ; save a
.0a9d	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0a9e	8d bf 0a	          sta  rp        ; save rp
.0aa1	68		          pla            ; stack : zp2l, zp1h, zp1l
.0aa2	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0aa4	68		          pla            ; stack : zp1h, zp1l
.0aa5	85 fd		          sta  zpage2    ; get zpage2 High byte
.0aa7	68		          pla            ; stack : zp1l
.0aa8	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0aaa	68		          pla            ; stack :
.0aab	85 fb		          sta  zpage1    ; get zpage1 High byte
.0aad	ad c2 0a	          lda  pc+1      ; get pch
.0ab0	48		          pha            ; stack : pch
.0ab1	ad c1 0a	          lda  pc
.0ab4	48		          pha            ; stack : pcl, pch
.0ab5	ad bf 0a	          lda  rp        ; get rp
.0ab8	48		          pha            ; stack : rp, pcl, pch
.0ab9	ad c0 0a	          lda  ra        ; set ra
.0abc	58		          cli
.0abd	28		          plp            ; stack : pcl, pch
.0abe	60		          rts
>0abf	00		rp        .byte     0
>0ac0	00		ra        .byte     0
>0ac1	00 00		pc        .word     0

;******  Return to file: joystick2-mc.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.0ac3			blkfill
.0ac3	20 4d 0a	bf0            jsr  push
.0ac6	20 81 0b	               jsr  savezp1
.0ac9	84 fc		               sty  zpage1+1
.0acb	a0 00		               ldy  #$00
.0acd	84 fb		               sty  zpage1
.0acf	91 fb		bf1            sta  (zpage1),y
.0ad1	c8		               iny
.0ad2	d0 fb		               bne  bf1
.0ad4	20 90 0b	               jsr  restzp1
.0ad7	20 8c 0a	               jsr  pop
.0ada	60		               rts
.0adb			memfill
.0adb	20 4d 0a	               jsr  push
.0ade	20 c3 0a	mf1            jsr  blkfill
.0ae1	c8		               iny
.0ae2	ca		               dex
.0ae3	d0 f9		               bne  mf1
.0ae5	20 8c 0a	               jsr  pop
.0ae8	60		               rts
.0ae9			memmove
.0ae9	20 4d 0a	               jsr  push
.0aec	ba		               tsx            ; On se crée un pointeur ...
.0aed	8a		               txa
.0aee	18		               clc
.0aef	69 0b		               adc  #11
.0af1	a8		               tay
.0af2	a2 06		               ldx  #$06
.0af4	b9 00 01	nextbyte       lda  $0100,y
.0af7	99 43 0b	               sta  words,y
.0afa	c8		               iny
.0afb	ca		               dex
.0afc	d0 f6		               bne  nextbyte
.0afe	ad 43 0b	               lda  s
.0b01	8d 1a 0b	               sta  source+1
.0b04	ad 44 0b	               lda  s+1
.0b07	8d 1b 0b	               sta  source+2
.0b0a	ad 45 0b	               lda  d
.0b0d	8d 17 0b	               sta  destin+1
.0b10	ad 46 0b	               lda  d+1
.0b13	8d 18 0b	               sta  destin+2
.0b16	ad ff ff	destin         lda  $ffff
.0b19	8d ff ff	source         sta  $ffff
.0b1c	ee 17 0b	               inc  destin+1
.0b1f	d0 03		               bne  src
.0b21	ee 18 0b	               inc  destin+2
.0b24	ee 1a 0b	src            inc  source+1
.0b27	d0 03		               bne  cnt
.0b29	ee 1b 0b	               inc  source+2
.0b2c	ad 47 0b	cnt            lda  compte
.0b2f	d0 08		               bne  decit
.0b31	ad 48 0b	               lda  compte+1
.0b34	f0 09		               beq  fini
.0b36	ce 48 0b	               dec  compte+1
.0b39	ce 47 0b	decit          dec  compte
.0b3c	4c 16 0b	               jmp  destin
.0b3f	20 8c 0a	fini           jsr  pop
.0b42	60		               rts
.0b43			words
>0b43	00 00		s         .word     $0000
>0b45	00 00		d         .word     $0000
>0b47	00 00		compte    .word     $0000
.0b49			decword
.0b49	20 4d 0a	               jsr  push
.0b4c	86 fd		               stx  zpage2
.0b4e	84 fe		               sty  zpage2+1
.0b50	20 8c 0a	               jsr  pop
.0b53	60		               rts
.0b54			inczp1
.0b54	08		               php
.0b55	e6 fb		               inc  zpage1
.0b57	d0 02		               bne  nopage
.0b59	e6 fc		               inc  zpage1+1
.0b5b	28		nopage         plp
.0b5c	60		               rts
.0b5d			deczp1
.0b5d	08		                php
.0b5e	48		                pha
.0b5f	c6 fb		                dec  zpage1
.0b61	d0 02		                bne  nopage
.0b63	c6 fc		                dec  zpage1+1
.0b65	c6 fb		nopage          dec  zpage1
.0b67	68		                pla
.0b68	28		                plp
.0b69	60		                rts
.0b6a			inczp2
.0b6a	08		               php
.0b6b	48		               pha
.0b6c	e6 fd		               inc  zpage2
.0b6e	d0 02		               bne  nopage
.0b70	e6 fe		               inc  zpage2+1
.0b72	68		nopage         pla
.0b73	28		               plp
.0b74	60		               rts
.0b75			deczp2
.0b75	08		               php
.0b76	48		               pha
.0b77	a5 fd		               lda  zpage2
.0b79	d0 02		               bne  nopage
.0b7b	c6 fe		               dec  zpage2+1
.0b7d	c6 fd		nopage         dec  zpage2
.0b7f	28		               plp
.0b80	60		               rts
.0b81			savezp1
.0b81	08		               php
.0b82	48		               pha
.0b83	a5 fb		               lda  zpage1
.0b85	8d fd 0b	               sta  zp1
.0b88	a5 fc		               lda  zpage1+1
.0b8a	8d fe 0b	               sta  zp1+1
.0b8d	68		               pla
.0b8e	28		               plp
.0b8f	60		               rts
.0b90			restzp1
.0b90	08		               php
.0b91	48		               pha
.0b92	ad fd 0b	               lda zp1
.0b95	85 fb		               sta zpage1
.0b97	ad fe 0b	               lda zp1+1
.0b9a	85 fc		               sta zpage1+1
.0b9c	68		               pla
.0b9d	28		               plp
.0b9e	60		               rts
.0b9f			savezp2
.0b9f	08		         php
.0ba0	48		         pha
.0ba1	a5 fd		         lda zpage2
.0ba3	8d ff 0b	         sta zp2
.0ba6	a5 fe		         lda zpage2+1
.0ba8	8d 00 0c	         sta zp2+1
.0bab	68		         pla
.0bac	28		         plp
.0bad	60		         rts
.0bae			restzp2
.0bae	08		                php
.0baf	48		                pha
.0bb0	ad ff 0b	                lda  zp2
.0bb3	85 fd		                sta  zpage2
.0bb5	ad 00 0c	                lda  zp2+1
.0bb8	85 fe		                sta  zpage2+1
.0bba	68		                pla
.0bbb	28		                plp
.0bbc	60		                rts
.0bbd			xy2addr
.0bbd	08		                php
.0bbe	48		                pha
.0bbf	8a		                txa
.0bc0	48		                pha
.0bc1	98		                tya
.0bc2	48		                pha
.0bc3	ad f8 0b	                lda     addr1+1
.0bc6	8d fa 0b	                sta     addr2+1
.0bc9	ad f7 0b	                lda     addr1
.0bcc	8d f9 0b	                sta     addr2
.0bcf	c0 00		                cpy     #$00
.0bd1	f0 0f		                beq     addx
.0bd3	18		moreline        clc
.0bd4	6d f6 0b	                adc     ymult
.0bd7	90 03		                bcc     norepy
.0bd9	ee fa 0b	                inc     addr2+1
.0bdc	8d f9 0b	norepy          sta     addr2
.0bdf	88		                dey
.0be0	d0 f1		                bne     moreline
.0be2	8a		addx            txa
.0be3	18		                clc
.0be4	6d f9 0b	                adc     addr2
.0be7	90 03		                bcc     thatsit
.0be9	ee fa 0b	                inc     addr2+1
.0bec	8d f9 0b	thatsit         sta     addr2
.0bef	68		                pla
.0bf0	a8		                tay
.0bf1	68		                pla
.0bf2	aa		                tax
.0bf3	68		                pla
.0bf4	28		                plp
.0bf5	60		                rts
>0bf6	28		ymult          .byte     40
>0bf7	00 00		addr1          .word     $0000
>0bf9	00 00		addr2          .word     $0000
>0bfb	00 00		bytecnt        .word     $0000
>0bfd	00 00		zp1        .word   $0000
>0bff	00 00		zp2        .word   $0000

;******  Return to file: joystick2-mc.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>0c01	01		a2hexcol       .byte     1              ; pour aputscxy
>0c02	00		a2hexbkcol     .byte     %00000000
.0c03			a2hexpos
>0c03	00		a2hexpx        .byte     0              ; pour aputsxy
>0c04	00		a2hexpy        .byte     0
>0c05	24		a2hexprefix    .byte     "$"            ; pour aputs
>0c06	00 00		a2hexstr       .word     $00
>0c08	00 00		               .word     $00
>0c0a	00		               .byte     0              ; 0 end string
.0c0b			putahexfmtxy
.0c0b	20 4d 0a	               jsr  push
.0c0e	20 5a 0c	               jsr  a2hex
.0c11	ae 03 0c	               ldx  a2hexpx
.0c14	ac 04 0c	               ldy  a2hexpy
.0c17	20 68 0e	               jsr  gotoxy
.0c1a	a2 05		               ldx  #<a2hexprefix
.0c1c	a0 0c		               ldy  #>a2hexprefix
.0c1e	20 5a 0e	               jsr  puts
.0c21	20 8c 0a	               jsr  pop
.0c24	60		               rts
.0c25			putahexfmt
.0c25	20 4d 0a	               jsr  push
.0c28	20 5a 0c	               jsr  a2hex
.0c2b	a2 05		               ldx  #<a2hexprefix
.0c2d	a0 0c		               ldy  #>a2hexprefix
.0c2f	20 5a 0e	               jsr  puts
.0c32	20 8c 0a	               jsr  pop
.0c35	60		               rts
.0c36			putahex
.0c36	20 4d 0a	               jsr  push
.0c39	20 5a 0c	               jsr  a2hex
.0c3c	a2 06		               ldx  #<a2hexstr
.0c3e	a0 0c		               ldy  #>a2hexstr
.0c40	20 5a 0e	               jsr  puts
.0c43	20 8c 0a	               jsr  pop
.0c46	60		               rts
.0c47			nib2hex
.0c47	08		               php
.0c48	29 0f		               and  #$0f
.0c4a	f8		               sed
.0c4b	18		               clc
.0c4c	69 90		               adc  #$90
.0c4e	69 40		               adc  #$40
.0c50	d8		               cld
.0c51	28		               plp
.0c52	60		               rts
.0c53			lsra4bits
.0c53	08		               php
.0c54	4a		               lsr
.0c55	4a		               lsr
.0c56	4a		               lsr
.0c57	4a		               lsr
.0c58	28		               plp
.0c59	60		               rts
.0c5a			a2hex
.0c5a	08		               php
.0c5b	48		               pha
.0c5c	48		               pha
.0c5d	20 53 0c	               jsr  lsra4bits
.0c60	20 47 0c	               jsr  nib2hex
.0c63	8d 06 0c	               sta  a2hexstr
.0c66	68		               pla
.0c67	20 47 0c	               jsr  nib2hex
.0c6a	8d 07 0c	               sta  a2hexstr+1
.0c6d	a9 00		               lda  #$00                ; set end of string
.0c6f	8d 08 0c	               sta  a2hexstr+2
.0c72	68		               pla
.0c73	28		               plp
.0c74	60		               rts
.0c75			xy2hex
.0c75	20 4d 0a	               jsr  push
.0c78	20 5a 0c	               jsr  a2hex
.0c7b	8a		               txa
.0c7c	48		               pha
.0c7d	20 53 0c	               jsr  lsra4bits
.0c80	20 47 0c	               jsr  nib2hex
.0c83	8d 06 0c	               sta  a2hexstr
.0c86	68		               pla
.0c87	20 47 0c	               jsr  nib2hex
.0c8a	8d 07 0c	               sta  a2hexstr+1
.0c8d	98		               tya
.0c8e	48		               pha
.0c8f	20 53 0c	               jsr  lsra4bits
.0c92	20 47 0c	               jsr  nib2hex
.0c95	8d 08 0c	               sta  a2hexstr+2
.0c98	68		               pla
.0c99	20 47 0c	               jsr  nib2hex
.0c9c	8d 09 0c	               sta  a2hexstr+3
.0c9f	a9 00		               lda  #$00                ; 0 ended string
.0ca1	8d 0a 0c	               sta  a2hexstr+4
.0ca4	20 8c 0a	               jsr  pop
.0ca7			atobin
.0ca7	20 4d 0a	               jsr     push
.0caa	a2 08		               ldx     #8
.0cac	a0 00		               ldy     #0
.0cae	2a		nextbit        rol
.0caf	48		               pha
.0cb0	69 00		               adc     #$00
.0cb2	29 01		               and     #$01
.0cb4	20 47 0c	               jsr     nib2hex
.0cb7	99 c8 0c	               sta     abin,y
.0cba	68		               pla
.0cbb	c8		               iny
.0cbc	ca		               dex
.0cbd	d0 ef		               bne     nextbit
.0cbf	a9 00		               lda     #0
.0cc1	99 c8 0c	               sta     abin,y
.0cc4	20 8c 0a	               jsr     pull
.0cc7	60		               rts
>0cc8	30 30 30 30	abin           .null   "00000000"
>0ccc	30 30 30 30 00
.0cd1			putabin
.0cd1	20 a7 0c	               jsr     atobin
.0cd4	20 4d 0a	               jsr     push
.0cd7	a2 c8		               ldx     #<abin
.0cd9	a0 0c		               ldy     #>abin
.0cdb	20 5a 0e	               jsr     puts
.0cde	20 8c 0a	               jsr     pop
.0ce1	60		               rts
.0ce2			putabinfmt
.0ce2	08		               php
.0ce3	48		               pha
.0ce4	a9 25		               lda     #"%"
.0ce6	20 16 0e	               jsr     putch
.0ce9	68		               pla
.0cea	20 d1 0c	               jsr     putabin
.0ced	28		               plp
.0cee	60		               rts
.0cef			putabinxy
.0cef	20 68 0e	               jsr     gotoxy
.0cf2	20 d1 0c	               jsr     putabin
.0cf5	60		               rts
.0cf6			putabinfmtxy
.0cf6	20 68 0e	               jsr     gotoxy
.0cf9	20 e2 0c	               jsr     putabinfmt
.0cfc	60		               rts

;******  Return to file: joystick2-mc.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-text-mc.asm

>0cfd	00 00		scrptr         .word     $00            ; ... pointe position ecran, ...
>0cff	00 00		colptr         .word     $00            ; ... pointe position couleur, ...
>0d01	01		curcol         .byte     $01            ; ... la couleur du caractère, ...
>0d02	06		brdcol         .byte     vbleu          ; ... la couleur de la bordure et
>0d03	00		vicbkcol0      .byte     vnoir  ;$0b    ; 0,
>0d04	02		vicbkcol1      .byte     vrouge ;$0b    ; 1,
>0d05	05		vicbkcol2      .byte     vvert  ;$0b    ; 2,
>0d06	06		vicbkcol3      .byte     vbleu  ;$0b    ; et 3.
>0d07	00		inverse        .byte     $00
>0d08	00 00 00 00	scraddr        .byte     0,0,0,0,0
>0d0c	00
>0d0d	00 00 00 00	coladdr        .byte     0,0,0,0,0
>0d11	00
>0d12	00		bkcol          .byte     %00000000      ; Pointeur de la couleur actuelle
>0d13	00 04		virtaddr       .word     $0400          ; L'adresse de l'ecran virtuel
=$00			bkcol0         =         %00000000      ;
=$40			bkcol1         =         %01000000
=$80			bkcol2         =         %10000000
=$c0			bkcol3         =         %11000000
.0d15			scrmaninit
.0d15	08		               php            ; On sauvegarde les registres
.0d16	48		               pha
.0d17	a9 15		               lda  #%00010101; Selectionne la plage memoire video
.0d19	8d 18 d0	               sta  $d018     ; et le jeu de caracteeres.
.0d1c	ad 16 d0	               lda  $d016     ; 53270 Lecture valeur actuelle pour ne
.0d1f	09 10		               ora  #%00010000; modifier que le bit 4.
.0d21	29 ef		               and  #%11101111
.0d23	8d 16 d0	               sta  $d016 ; 53270
.0d26	ad 11 d0	               lda  $d011     ; On ne change que le bit 6 pour
.0d29	09 40		               ora  #%01000000; selectionner le md. couleur de
.0d2b	8d 11 d0	               sta  $d011     ; 53270   ; fond etendu.
.0d2e	ad 03 0d	               lda  vicbkcol0
.0d31	8d 21 d0	               sta  $d021     ; 53281
.0d34	ad 04 0d	               lda  vicbkcol1
.0d37	8d 22 d0	               sta  $d022     ; 53282
.0d3a	ad 05 0d	               lda  vicbkcol2
.0d3d	8d 23 d0	               sta  $d023     ; 53283
.0d40	ad 06 0d	               lda  vicbkcol3
.0d43	8d 24 d0	               sta  $d024     ; 54284
.0d46	a5 00		               lda  bkcol0    ; On charge et utilise la couleur de ...
.0d48	8d 12 0d	               sta  bkcol     ; ... fond par defaut des caracteres.
.0d4b	20 a5 0d	               jsr  cls       ; Finalement on efface l'ecran
.0d4e	68		               pla
.0d4f	28		               plp
.0d50	60		               rts
.0d51			curshome
.0d51	08		               php                      ; Sauvegarde flags ...
.0d52	48		               pha                      ; ... et accumulateur
.0d53	ad 13 0d	               lda  virtaddr            ; In replace le pointeur ...
.0d56	8d fd 0c	               sta  scrptr              ; ... d'écran virtuel à sa ...
.0d59	ad 14 0d	               lda  virtaddr+1          ; ... position initiale.
.0d5c	8d fe 0c	               sta  scrptr+1
.0d5f	20 90 0d	               jsr  synccolptr          ; On synchronise le ptr couleur.
.0d62	ad 03 0d	               lda  vicbkcol0
.0d65	8d 21 d0	               sta  $d021               ; On recharge les couleurs ...
.0d68	ad 04 0d	               lda  vicbkcol1           ; ... de fond par defaut tel ...
.0d6b	8d 22 d0	               sta  $d022               ; ... que specifie dans les ...
.0d6e	ad 05 0d	               lda  vicbkcol2           ; ... les variables globales.
.0d71	8d 23 d0	               sta  $d023
.0d74	ad 06 0d	               lda  vicbkcol3
.0d77	8d 24 d0	               sta  $d024
.0d7a	68		               pla                      ; Récupère l'accumulateur ...
.0d7b	28		               plp                      ; ... et les flags
.0d7c	60		               rts
.0d7d			incscrptr
.0d7d	08		               php                      ; Sauvegarde flags ...
.0d7e	48		               pha                      ; ... et accumulateur
.0d7f	ee fd 0c	               inc  scrptr              ; Incremente le pointeur
.0d82	ad fd 0c	               lda  scrptr              ; Regarde si on doit faire un ...
.0d85	d0 03		               bne  pasdereport         ; ... report dans le MSB
.0d87	ee fe 0c	               inc  scrptr+1            ; Si oui on fait le repport
.0d8a	20 90 0d	pasdereport    jsr  synccolptr          ; On synchronise le ptr couleur.
.0d8d	68		               pla                      ; Récupère l'accumulateur ...
.0d8e	28		               plp                      ; ... et les flags
.0d8f	60		               rts
.0d90			synccolptr
.0d90	08		               php                      ; Sauvegarde flags ...
.0d91	48		               pha                      ; ... et accumulateur
.0d92	ad fd 0c	               lda  scrptr              ; Récupère le LSB du scrptr ...
.0d95	8d ff 0c	               sta  colptr              ; ... pour le placer dans le colptr.
.0d98	ad fe 0c	               lda  scrptr+1            ; Récupère le mSB du scrptr, ...
.0d9b	29 03		               and  #%00000011          ; ... le converti pour pointer ...
.0d9d	09 d8		               ora  #%11011000          ; ... la RAM couleur ...
.0d9f	8d 00 0d	               sta  colptr+1            ; ... et le sauvegarde.
.0da2	68		               pla                      ; Récupère l'accumulateur ...
.0da3	28		               plp                      ; ... et les flags
.0da4	60		               rts
.0da5			cls
.0da5	20 4d 0a	               jsr  push                ; On sauvegarde les registres
.0da8	ad 13 0d	               lda  virtaddr            ; On replace le curseur d'ecran à
.0dab	8d fd 0c	               sta  scrptr
.0dae	ad 14 0d	               lda  virtaddr+1          ; sa position initiale, ($0400).
.0db1	8d fe 0c	               sta  scrptr+1
.0db4	20 90 0d	               jsr  synccolptr          ; On synchronise la couleur.
.0db7	20 5c 0f	               jsr  scrptr2zp1          ; L'adresse actuelle dans le ZP1.
.0dba	ad 02 0d	               lda  brdcol              ; On place la couleur ...
.0dbd	8d 20 d0	               sta  vicbordcol          ; ... de la bordure.
.0dc0	ad 12 0d	               lda  bkcol               ; Associer couleur pour ...
.0dc3	8d 21 d0	               sta  vicbackcol          ; ... remplir l'ecran ...
.0dc6	a9 20		               lda  #$20                ; ... de caracteres espace.
.0dc8	a2 04		               ldx  #4                  ; Quatre blocs de ...
.0dca	a0 00		nextline       ldy  #0                  ; ... 256 caracteres.
.0dcc			nextcar
.0dcc	91 fb		               sta  (zpage1),y          ;
.0dce	a5 fc		               lda  zpage1+1
.0dd0	48		               pha
.0dd1	29 03		               and  #%00000011
.0dd3	09 d8		               ora  #%11011000
.0dd5	85 fc		               sta  zpage1+1
.0dd7	a9 00		               lda  #0
.0dd9	91 fb		               sta  (zpage1),y
.0ddb	68		               pla
.0ddc	85 fc		               sta  zpage1+1
.0dde	a9 20		               lda  #$20
.0de0	88		               dey
.0de1	d0 e9		               bne  nextcar
.0de3	e6 fc		               inc  zpage1+1
.0de5	ca		               dex
.0de6	d0 e4		               bne  nextcar
.0de8	a9 00		               lda  #$00
.0dea	8d fd 0c	               sta  scrptr
.0ded	a9 04		               lda  #$04
.0def	8d fe 0c	               sta  scrptr+1
.0df2	20 90 0d	               jsr  synccolptr
.0df5	20 8c 0a	               jsr  pop
.0df8	60		               rts
.0df9			setborder
.0df9	08		               php
.0dfa	8d 02 0d	               sta  brdcol
.0dfd	8d 20 d0	               sta  vicbordcol
.0e00	28		               plp
.0e01	60		               rts
.0e02			setinverse
.0e02	08		               php
.0e03	48		               pha
.0e04	a9 80		               lda  #%10000000
.0e06	8d 07 0d	               sta  inverse
.0e09	68		               pla
.0e0a	28		               plp
.0e0b	60		               rts
.0e0c			clrinverse
.0e0c	08		               php
.0e0d	48		               pha
.0e0e	a9 00		               lda  #%00000000
.0e10	8d 07 0d	               sta  inverse
.0e13	68		               pla
.0e14	28		               plp
.0e15	60		               rts
.0e16			putch
.0e16	20 4d 0a	               jsr  push           ; On sauvegarde les registres
.0e19	20 5c 0f	               jsr  scrptr2zp1     ; Place le ptr d'ecran sur zp1
.0e1c	29 3f		               and  #%00111111     ; Masque des bits 6 et 7 pour la ouleur.
.0e1e	0d 12 0d	               ora  bkcol          ; On y ajoute la couleur du fond.
.0e21	a0 00		               ldy  #0             ; Met Y à 0
.0e23	91 fb		               sta  (zpage1),y     ; Affiche le caractere
.0e25	ae 00 0d	               ldx  colptr+1       ; Place le MSB du ptr de couleur
.0e28	86 fc		               stx  zpage1+1       ; ... dans le MSB du zp1.
.0e2a	ad 01 0d	               lda  curcol         ; Charge la couleur voulu dans.
.0e2d	91 fb		               sta  (zpage1),y     ; ... la ram de couleur.
.0e2f	20 7d 0d	               jsr  incscrptr      ; Incremente le pointeur d'ecran.
.0e32	20 8c 0a	               jsr  pop            ; Replace tous les registres
.0e35	60		               rts
.0e36			z2putch
.0e36	20 4d 0a	               jsr  push           ; On sauvegarde les registres
.0e39	a0 00		               ldy  #$0            ; Met Y à 0
.0e3b	b1 fd		               lda  (zpage2),y     ; Charge le caractere
.0e3d	20 16 0e	               jsr  putch          ; Appel pour affichage
.0e40	20 8c 0a	               jsr  pop            ; Replace tous les registres
.0e43	60		               rts
.0e44			z2puts
.0e44	20 4d 0a	               jsr  push           ; On sauvegarde les registres
.0e47	a0 00		               ldy  #$0            ; Met Y à 0
.0e49	b1 fd		nextcar        lda  (zpage2),y     ; Charge le caractere
.0e4b	f0 09		               beq  endstr         ; Est-ce le 0 de fin de chaine ?
.0e4d	20 36 0e	               jsr  z2putch        ; Appel pour affichage
.0e50	20 6a 0b	               jsr  inczp2         ; On pointe zp2 sur le prochain caractere.
.0e53	4c 49 0e	               jmp  nextcar        ; On passe au prochain
.0e56	20 8c 0a	endstr         jsr  pop            ; Replace tous les registres
.0e59	60		               rts
.0e5a			puts
.0e5a	20 4d 0a	               jsr  push           ; On sauvegarde les registres
.0e5d	86 fd		               stx  zpage2         ; On positionne xp2 en fonction de
.0e5f	84 fe		               sty  zpage2+1       ; l'adresse reçcu dans X et Y
.0e61	20 44 0e	               jsr  z2puts         ; Appel pour affichage
.0e64	20 8c 0a	               jsr  pop            ; Replace tous les registres
.0e67	60		               rts
.0e68			gotoxy
.0e68	20 4d 0a	               jsr  push           ; On sauvegarde les registres
.0e6b	20 51 0d	               jsr  curshome       ;  retourne le curseur virtuel a 0,0.
.0e6e	c0 00		yagain         cpy  #0             ; Devons nous changer de ligne ?
.0e70	f0 09		               beq  setx           ; Si non, on verifi les colonnes.
.0e72	a9 28		               lda  #40            ; Si oui on ajoute 40
.0e74	20 f9 0e	               jsr  saddscrptr     ;  à l'adresse du pointeur virtuel autant
.0e77	88		               dey                 ;  de fois qu'il est spécifié dans y.
.0e78	4c 6e 0e	               jmp  yagain         ; On passe au prochain y.
.0e7b	8a		setx           txa                 ; On ajoute la valeur de X
.0e7c	20 f9 0e	               jsr  saddscrptr     ;  à l'adresse di pointeur virtuel.
.0e7f	20 90 0d	               jsr  synccolptr     ; Synchro du pointeur des couleurs
.0e82	20 8c 0a	               jsr  pop            ; Replace tous les registres
.0e85	60		               rts
.0e86			putsxy
.0e86	20 4d 0a	               jsr  push           ; On sauvegarde les registres et le zp2
.0e89	86 fd		               stx  zpage2         ; Place l'adr de chaine dans zp2
.0e8b	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.0e8d	a0 00		               ldy  #0             ; On place le compteur
.0e8f	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.0e91	aa		               tax                 ; de A à X
.0e92	20 6a 0b	               jsr  inczp2         ; On deplace le pointeur
.0e95	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.0e97	a8		               tay                 ; de A à Y
.0e98	20 68 0e	               jsr  gotoxy         ; gotoxy : X=col, Y=ligne
.0e9b	20 6a 0b	               jsr  inczp2         ; On deplace le pointeur
.0e9e	20 44 0e	               jsr  z2puts         ; On imprime la chaine
.0ea1	20 8c 0a	               jsr  pop            ; Replace tous les registres
.0ea4	60		               rts
.0ea5			putscxy
.0ea5	20 4d 0a	               jsr  push           ; On Sauvegarde registres et zp2
.0ea8	86 fd		               stx  zpage2         ; On place l'adresse de chaine dans zp2
.0eaa	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.0eac	a0 00		               ldy  #0             ; Place le compteur
.0eae	b1 fd		               lda  (zpage2),y     ; Charge la couleur
.0eb0	8d 01 0d	               sta  curcol         ; ... et on la definie
.0eb3	20 6a 0b	               jsr  inczp2         ; Pointe le prochain byte
.0eb6	b1 fd		               lda  (zpage2),y     ; Récupere et sauvegarde ...
.0eb8	8d 12 0d	               sta  bkcol          ; ... l'index de couleur de fond
.0ebb	20 6a 0b	               jsr  inczp2         ; Deplace le pointeur
.0ebe	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.0ec0	aa		               tax                 ; ... de A à X
.0ec1	20 6a 0b	               jsr  inczp2         ; Deplace le pointeur
.0ec4	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.0ec6	a8		               tay                 ; de A à Y
.0ec7	20 68 0e	               jsr  gotoxy         ; gotoxy : X=col, y=ligne
.0eca	20 6a 0b	               jsr  inczp2         ; Place le ptr en début de chaine
.0ecd	20 44 0e	               jsr  z2puts         ; On imprime la chaine
.0ed0	20 8c 0a	               jsr  pop
.0ed3	60		               rts
.0ed4			setcurcol
.0ed4	08		               php
.0ed5	8d 01 0d	               sta  curcol
.0ed8	28		               plp
.0ed9	60		               rts
.0eda			setvicbkcol
.0eda	08		               php
.0edb	48		               pha
.0edc	8a		               txa
.0edd	29 03		               and  #$03
.0edf	aa		               tax
.0ee0	68		               pla
.0ee1	9d 03 0d	               sta  vicbkcol0,x
.0ee4	9d 21 d0	               sta  $d021,x
.0ee7	28		               plp
.0ee8	60		               rts
.0ee9			setbkcol
.0ee9	08		               php
.0eea	48		               pha
.0eeb	0a		               asl
.0eec	0a		               asl
.0eed	0a		               asl
.0eee	0a		               asl
.0eef	0a		               asl
.0ef0	0a		               asl
.0ef1	29 c0		               and  #$c0
.0ef3	8d 12 0d	               sta  bkcol
.0ef6	68		               pla
.0ef7	28		               plp
.0ef8	60		               rts
.0ef9			saddscrptr
.0ef9	08		               php
.0efa	48		               pha
.0efb	18		               clc
.0efc	6d fd 0c	               adc  scrptr
.0eff	8d fd 0c	               sta  scrptr
.0f02	90 03		               bcc  norep
.0f04	ee fe 0c	               inc  scrptr+1
.0f07	68		norep          pla
.0f08	28		               plp
.0f09	60		               rts
.0f0a			scrptr2str
.0f0a	20 4d 0a	               jsr  push
.0f0d	ad fe 0c	               lda  scrptr+1
.0f10	48		               pha
.0f11	20 53 0c	               jsr  lsra4bits
.0f14	20 47 0c	               jsr  nib2hex
.0f17	8d 08 0d	               sta  scraddr
.0f1a	68		               pla
.0f1b	20 53 0c	               jsr  lsra4bits
.0f1e	20 47 0c	               jsr  nib2hex
.0f21	8d 09 0d	               sta  scraddr+1
.0f24	ad fe 0c	               lda  scrptr+1
.0f27	48		               pha
.0f28	20 53 0c	               jsr  lsra4bits
.0f2b	20 47 0c	               jsr  nib2hex
.0f2e	8d 08 0d	               sta  scraddr
.0f31	68		               pla
.0f32	20 53 0c	               jsr  lsra4bits
.0f35	20 47 0c	               jsr  nib2hex
.0f38	8d 09 0d	               sta  scraddr+1
.0f3b	ad fd 0c	               lda  scrptr
.0f3e	48		               pha
.0f3f	20 53 0c	               jsr  lsra4bits
.0f42	20 47 0c	               jsr  nib2hex
.0f45	8d 0a 0d	               sta  scraddr+2
.0f48	8d 0f 0d	               sta  coladdr+2
.0f4b	68		               pla
.0f4c	20 53 0c	               jsr  lsra4bits
.0f4f	20 47 0c	               jsr  nib2hex
.0f52	8d 0b 0d	               sta  scraddr+3
.0f55	8d 10 0d	               sta  coladdr+3
.0f58	20 8c 0a	               jsr  pop
.0f5b	60		               rts
.0f5c			scrptr2zp1
.0f5c	08		               php
.0f5d	48		               pha
.0f5e	ad fd 0c	               lda  scrptr
.0f61	85 fb		               sta  zpage1
.0f63	ad fe 0c	               lda  scrptr+1
.0f66	85 fc		               sta  zpage1+1
.0f68	68		               pla
.0f69	28		               plp
.0f6a	60		               rts
.0f6b			colptr2zp1
.0f6b	08		               php
.0f6c	48		               pha
.0f6d	ad ff 0c	               lda  colptr
.0f70	85 fb		               sta  zpage1
.0f72	ad 00 0d	               lda  colptr+1
.0f75	85 fc		               sta  zpage1+1
.0f77	68		               pla
.0f78	28		               plp
.0f79	60		               rts
.0f7a			scrptr2zp2
.0f7a	08		               php
.0f7b	48		               pha
.0f7c	ad fd 0c	               lda  scrptr
.0f7f	85 fd		               sta  zpage2
.0f81	ad fe 0c	               lda  scrptr+1
.0f84	85 fe		               sta  zpage2+1
.0f86	68		               pla
.0f87	28		               plp
.0f88	60		               rts
.0f89			colptr2zp2
.0f89	08		               php
.0f8a	48		               pha
.0f8b	ad ff 0c	               lda  colptr
.0f8e	85 fd		               sta  zpage2
.0f90	ad 00 0d	               lda  colptr+1
.0f93	85 fe		               sta  zpage2+1
.0f95	68		               pla
.0f96	28		               plp
.0f97	60		               rts
.0f98			putrahex
.0f98	08		               php
.0f99	48		               pha
.0f9a	20 5a 0c	               jsr     a2hex
.0f9d	a2 01		               ldx     #<a2hexcol
.0f9f	a0 0c		               ldy     #>a2hexcol
.0fa1	20 5a 0e	               jsr     puts
.0fa4	68		               pla
.0fa5	28		               plp
.0fa6	60		               rts
.0fa7			putrahexxy
.0fa7	08		               php
.0fa8	48		               pha
.0fa9	20 5a 0c	               jsr  a2hex
.0fac	a9 03		               lda  #<a2hexpos
.0fae	a0 0c		               ldy  #>a2hexpos
.0fb0	20 86 0e	               jsr  putsxy
.0fb3	68		               pla
.0fb4	28		               plp
.0fb5	60		               rts
.0fb6			putrahexcxy
.0fb6	08		               php
.0fb7	68		               pla
.0fb8	20 5a 0c	               jsr  a2hex
.0fbb	a9 03		               lda  #<a2hexpos
.0fbd	a0 0c		               ldy  #>a2hexpos
.0fbf	20 a5 0e	               jsr  putscxy
.0fc2	68		               pla
.0fc3	28		               plp
.0fc4	60		               rts

;******  Return to file: joystick2-mc.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-showregs.asm

.0fc5			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=$c0			bkcol   =   bkcol3
.0fc5	08		                php
.0fc6	8d 77 11	                sta  rega
.0fc9	68		                pla
.0fca	8d 7a 11	                sta  regp
.0fcd	8e 78 11	                stx  regx
.0fd0	8c 79 11	                sty  regy
.0fd3	ba		                tsx
.0fd4	8e 7b 11	                stx  regs
.0fd7	68		                pla
.0fd8	8d 7d 11	                sta  regpcl
.0fdb	8d 7e 11	                sta  regpcl2
.0fde	68		                pla
.0fdf	8d 7c 11	                sta  regpch
.0fe2	ad 77 11	                lda  rega
.0fe5	48		                pha
.0fe6	20 47 0c	                jsr  nib2hex
.0fe9	8d 1a 11	                sta  vala+1
.0fec	68		                pla
.0fed	20 53 0c	                jsr  lsra4bits
.0ff0	20 47 0c	                jsr  nib2hex
.0ff3	8d 19 11	                sta  vala
.0ff6	ad 79 11	                lda  regy
.0ff9	48		                pha
.0ffa	20 47 0c	                jsr  nib2hex
.0ffd	8d 30 11	                sta  valy+1
.1000	68		                pla
.1001	20 53 0c	                jsr  lsra4bits
.1004	20 47 0c	                jsr  nib2hex
.1007	8d 2f 11	                sta  valy
.100a	ad 78 11	                lda  regx
.100d	48		                pha
.100e	20 47 0c	                jsr  nib2hex
.1011	8d 25 11	                sta  valx+1
.1014	68		                pla
.1015	20 53 0c	                jsr  lsra4bits
.1018	20 47 0c	                jsr  nib2hex
.101b	8d 24 11	                sta  valx
.101e	ad 7a 11	                lda  regp
.1021	48		                pha
.1022	20 47 0c	                jsr  nib2hex
.1025	8d 3b 11	                sta  valp+1
.1028	68		                pla
.1029	20 53 0c	                jsr  lsra4bits
.102c	20 47 0c	                jsr  nib2hex
.102f	8d 3a 11	                sta  valp
.1032	ad 7b 11	                lda  regs
.1035	48		                pha
.1036	20 47 0c	                jsr  nib2hex
.1039	8d 46 11	                sta  vals+1
.103c	68		                pla
.103d	20 53 0c	                jsr  lsra4bits
.1040	20 47 0c	                jsr  nib2hex
.1043	8d 45 11	                sta  vals
.1046	ad 7c 11	                lda  regpch
.1049	48		                pha
.104a	20 47 0c	                jsr  nib2hex
.104d	8d 52 11	                sta  valpch+1
.1050	68		                pla
.1051	20 53 0c	                jsr  lsra4bits
.1054	20 47 0c	                jsr  nib2hex
.1057	8d 51 11	                sta  valpch
.105a	ad 7d 11	                lda  regpcl
.105d	48		                pha
.105e	20 47 0c	                jsr  nib2hex
.1061	8d 54 11	                sta  valpcl+1
.1064	68		                pla
.1065	20 53 0c	                jsr  lsra4bits
.1068	20 47 0c	                jsr  nib2hex
.106b	8d 53 11	                sta  valpcl
.106e	a5 fb		                lda  zpage1
.1070	48		                pha
.1071	20 47 0c	                jsr  nib2hex
.1074	8d 63 11	                sta  valz1l
.1077	68		                pla
.1078	20 53 0c	                jsr  lsra4bits
.107b	20 47 0c	                jsr  nib2hex
.107e	8d 64 11	                sta  valz1l+1
.1081	a5 fc		                lda  zpage1+1
.1083	48		                pha
.1084	20 47 0c	                jsr  nib2hex
.1087	8d 61 11	                sta  valz1h
.108a	68		                pla
.108b	20 53 0c	                jsr  lsra4bits
.108e	20 47 0c	                jsr  nib2hex
.1091	8d 62 11	                sta  valz1h+1
.1094	a5 fd		                lda  zpage2
.1096	48		                pha
.1097	20 47 0c	                jsr  nib2hex
.109a	8d 73 11	                sta  valz2l
.109d	68		                pla
.109e	20 53 0c	                jsr  lsra4bits
.10a1	20 47 0c	                jsr  nib2hex
.10a4	8d 74 11	                sta  valz2l+1
.10a7	a5 fe		                lda  zpage2+1
.10a9	48		                pha
.10aa	20 47 0c	                jsr  nib2hex
.10ad	8d 71 11	                sta  valz2h
.10b0	68		                pla
.10b1	20 53 0c	                jsr  lsra4bits
.10b4	20 47 0c	                jsr  nib2hex
.10b7	8d 72 11	                sta  valz2h+1
.10ba	20 02 0e	                jsr  setinverse
.10bd	78		                sei
.10be	a2 11		                ldx  #<srega
.10c0	a0 11		                ldy  #>srega+1
.10c2	20 a5 0e	                jsr  putscxy
.10c5	a2 1c		                ldx  #<sregx
.10c7	a0 11		                ldy  #>sregx+1
.10c9	20 a5 0e	                jsr  putscxy
.10cc	a2 27		                ldx  #<sregy
.10ce	a0 11		                ldy  #>sregy+1
.10d0	20 a5 0e	                jsr  putscxy
.10d3	a2 32		                ldx  #<sregp
.10d5	a0 11		                ldy  #>sregp+1
.10d7	20 a5 0e	                jsr  putscxy
.10da	a2 3d		                ldx  #<sregs
.10dc	a0 11		                ldy  #>sregs+1
.10de	20 a5 0e	                jsr  putscxy
.10e1	a2 48		                ldx  #<sregpc
.10e3	a0 11		                ldy  #>sregpc+1
.10e5	20 a5 0e	                jsr  putscxy
.10e8	a2 57		                ldx  #<sregz1
.10ea	a0 11		                ldy  #>sregz1+1
.10ec	20 a5 0e	                jsr  putscxy
.10ef	a2 67		                ldx  #<sregz2
.10f1	a0 11		                ldy  #>sregz2+1
.10f3	20 a5 0e	                jsr  putscxy
.10f6	58		                cli
.10f7	20 0c 0e	                jsr  clrinverse
.10fa	ad 7c 11	                lda  regpch
.10fd	48		                pha
.10fe	ad 7d 11	                lda  regpcl
.1101	48		                pha
.1102	ac 79 11	                ldy  regy
.1105	ae 78 11	                ldx  regx
.1108	ad 7a 11	                lda  regp
.110b	48		                pha
.110c	ad 77 11	                lda  rega
.110f	28		                plp
.1110	60		                rts
>1111	01 c0 00 17	srega   .byte   colr,bkcol,coln,line
>1115	20 01 3a 24	        .text   ' a:$' ;4,24
>1119	00 00 00	vala    .byte   0,0,0
>111c	01 c0 06 17	sregx   .byte   colr,bkcol,coln+6,line
>1120	20 18 3a 24	        .text   ' x:$' ;4,24
>1124	00 00 00	valx    .byte   0,0,0
>1127	01 c0 0c 17	sregy   .byte   colr,bkcol,coln+12,line
>112b	20 19 3a 24	        .text   ' y:$' ;4,24
>112f	00 00 00	valy    .byte   0,0,0
>1132	01 c0 12 17	sregp   .byte   colr,bkcol,coln+18,line
>1136	20 10 3a 24	        .text   ' p:$' ;4,24
>113a	00 00 00	valp    .byte   0,0,0
>113d	01 c0 18 17	sregs   .byte   colr,bkcol,coln+24,line
>1141	20 13 3a 24	        .text   ' s:$' ;4,24
>1145	00 00 00	vals    .byte   0,0,0
>1148	01 c0 1e 17	sregpc  .byte   colr,bkcol,coln+30,line
>114c	20 10 03 3a	        .text   ' pc:$' ;4,24
>1150	24
>1151	00 00		valpch  .byte   0,0
>1153	00 00 20 00	valpcl  .byte   0,0,32,0
>1157	01 c0 03 18	sregz1  .byte   colr,bkcol,coln+3,line+1
>115b	20 1a 10 31	        .text   ' zp1:$' ;4,24
>115f	3a 24
>1161	00 00		valz1h  .byte   0,0
>1163	00 00 20 00	valz1l  .byte   0,0,32,0
>1167	01 c0 0f 18	sregz2  .byte   colr,bkcol,coln+15,line+1
>116b	20 1a 10 32	        .text   ' zp2:$' ;4,24
>116f	3a 24
>1171	00 00		valz2h  .byte   0,0
>1173	00 00 20 00	valz2l  .byte   0,0,32,0
>1177	00		rega    .byte   0
>1178	00		regx    .byte   0
>1179	00		regy    .byte   0
>117a	00		regp    .byte   0
>117b	00		regs    .byte   0
>117c	00		regpch  .byte   0
>117d	00		regpcl  .byte   0
>117e	00		regpcl2 .byte   0
>117f	00		vzp1h   .byte   0
>1180	00		vzp1l   .byte   0
>1181	00		vzp2h   .byte   0
>1182	00		vzp2l   .byte   0

;******  Return to file: joystick2-mc.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-joystick.asm

=$dc00			js_2port       =    $dc00
=$dc01			js_1port       =    $dc01
=$dc02			js_2dir        =    $dc02
=$dc03			js_1dir        =    $dc03
=2			js_xoffset     =    2
=2			js_yoffset     =    2
=0			js_location    =    0
.1183			js_init
.1183	20 4d 0a	               jsr  push
.1186	ad 03 dc	               lda  js_1dir
.1189	29 e0		               and  #$e0
.118b	8d 03 dc	               sta  js_1dir
.118e	ad 02 dc	               lda  js_2dir
.1191	29 e0		               and  #$e0
.1193	8d 02 dc	               sta  js_2dir
.1196	20 8c 0a	               jsr  pop
.1199	60		               rts
.119a			js_scan
.119a	20 a1 11	               jsr  js_1scan
.119d	20 50 12	               jsr  js_2scan
.11a0	60		               rts
.11a1			js_1scan
.11a1	20 4d 0a	               jsr  push
.11a4	ad 01 dc	               lda  js_1port
.11a7	29 1f		               and  #$1f
.11a9	c9 00		               cmp  #$00
.11ab	d0 03		               bne  p1scan
.11ad	4c 40 12	               jmp  port1_out
.11b0	49 1f		p1scan         eor  #$1f
.11b2	18		               clc
.11b3	4a		js_1b0         lsr
.11b4	90 14		               bcc  js_1b1
.11b6	48		               pha
.11b7	ee 6a 15	               inc  js_1flag
.11ba	ad 66 15	               lda  js_1pixy
.11bd	38		               sec
.11be	e9 02		               sbc  #js_yoffset
.11c0	c9 f0		               cmp  #$f0
.11c2	90 02		               bcc  sto1ym
.11c4	a9 00		               lda  #$00
.11c6	8d 66 15	sto1ym         sta  js_1pixy
.11c9	68		               pla
.11ca	4a		js_1b1         lsr
.11cb	90 14		               bcc  js_1b2
.11cd	48		               pha
.11ce	ee 6a 15	               inc  js_1flag
.11d1	ad 66 15	               lda  js_1pixy
.11d4	18		               clc
.11d5	69 02		               adc  #js_yoffset
.11d7	c9 c7		               cmp  #199
.11d9	90 02		               bcc  sto1yp
.11db	a9 c7		               lda  #199
.11dd	8d 66 15	sto1yp         sta  js_1pixy
.11e0	68		               pla
.11e1	4a		js_1b2         lsr
.11e2	90 20		               bcc  js_1b3
.11e4	48		               pha
.11e5	ee 6a 15	               inc  js_1flag
.11e8	ad 64 15	               lda  js_1pixx
.11eb	0d 65 15	               ora  js_1pixx+1
.11ee	f0 13		               beq  js_1b2out
.11f0	38		               sec
.11f1	ad 64 15	               lda  js_1pixx
.11f4	e9 02		               sbc  #js_xoffset
.11f6	8d 64 15	               sta  js_1pixx
.11f9	b0 08		               bcs  js_1b2out
.11fb	ad 65 15	               lda  js_1pixx+1
.11fe	f0 03		               beq  js_1b2out
.1200	ce 65 15	               dec  js_1pixx+1
.1203	68		js_1b2out      pla
.1204	4a		js_1b3         lsr
.1205	90 22		               bcc  js_1b4
.1207	48		               pha
.1208	ee 6a 15	               inc  js_1flag
.120b	ad 65 15	               lda  js_1pixx+1
.120e	f0 0a		               beq  incj1x
.1210	ad 64 15	               lda  js_1pixx
.1213	c9 3c		               cmp  #$40-4
.1215	30 03		               bmi  incj1x
.1217	4c 28 12	               jmp  js_1b3out
.121a	18		incj1x         clc
.121b	ad 64 15	               lda  js_1pixx
.121e	69 02		               adc  #js_xoffset
.1220	8d 64 15	               sta  js_1pixx
.1223	90 03		               bcc  js_1b3out
.1225	ee 65 15	               inc  js_1pixx+1
.1228	68		js_1b3out      pla
.1229	4a		js_1b4          lsr                     ;Estce le bbouton fire (F)
.122a	90 14		                bcc     port1_out       ;Oui!
.122c	ee 6a 15	                inc     js_1flag
.122f	ee 69 15	                inc     js_1fire        ; on augmente le nombre de tir
.1232	a2 01		js_1wait        ldx     #$01
.1234	a0 ff		                ldy     #$ff
.1236	c8		js_1rel         iny
.1237	ad 01 dc	                lda     js_1port
.123a	49 ff		                eor     #$ff
.123c	29 10		                and     #$10
.123e	d0 f6		                bne     js_1rel         ; des boutons
.1240	ad 6a 15	port1_out       lda     js_1flag
.1243	f0 08		                beq     out
.1245	20 42 13	                jsr     js_1correct
.1248	a9 00		                lda     #0
.124a	8d 6a 15	                sta     js_1flag
.124d	20 8c 0a	out             jsr     pop
.1250			js_2scan
.1250	20 4d 0a	                jsr     push
.1253	ad 00 dc	port2           lda     js_2port
.1256	29 1f		                and     #$1f
.1258	c9 1f		                cmp	#$1f
.125a	d0 03		                bne     p2scan
.125c	4c 13 13	                jmp     port2_out
.125f	49 1f		p2scan          eor     #$1f
.1261	a2 02		                ldx     #$02
.1263	18		                clc
.1264	4a		js_2b0          lsr                     ;On decale js_2 bit 0 dans C
.1265	90 14		                bcc     js_2b1          ;Est-ce vers le haut (U)
.1267	48		                pha                     ;On stack la valeur
.1268	ee 75 15	                inc     js_2flag
.126b	ad 71 15	                lda     js_2pixy        ;Oui!
.126e	38		                sec                     ;On place la carry a 1
.126f	e9 02		                sbc     #js_yoffset     ;On reduit
.1271	c9 f0		                cmp     #$f0
.1273	90 02		                bcc     sto2ym
.1275	a9 00		                lda     #$00
.1277	8d 71 15	sto2ym          sta     js_2pixy        ; le y
.127a	68		                pla                     ;On recupere la valeur
.127b	4a		js_2b1          lsr                     ;On decale js_2 bit 0 dans C
.127c	90 14		                bcc     js_2b2          ;Est-ce vers le bas (D)
.127e	48		                pha                     ;On stack la valeur
.127f	ee 75 15	                inc     js_2flag
.1282	ad 71 15	                lda     js_2pixy        ;Oui!
.1285	18		                clc                     ;On place la carry a 0
.1286	69 02		                adc     #js_yoffset     ;On augmente
.1288	c9 c7		                cmp     #199
.128a	90 02		                bcc     sto2yp
.128c	a9 c7		                lda     #199
.128e	8d 71 15	sto2yp          sta     js_2pixy        ; le y
.1291	68		                pla                     ;On recupere la valeur
.1292	4a		js_2b2          lsr                     ;On decale js_2 bit 0 dans C
.1293	90 20		                bcc     js_2b3          ;Est-ce vers la gauche (L)
.1295	48		                pha                     ;On stack la valeur
.1296	ee 75 15	                inc     js_2flag
.1299	ad 6f 15	                lda     js_2pixx        ;Oui!
.129c	0d 70 15	                ora     js_2pixx+1
.129f	f0 13		                beq     js_2b2out
.12a1	38		                sec                     ;On place la carry a 1
.12a2	ad 6f 15	                lda     js_2pixx        ;Oui!
.12a5	e9 02		                sbc     #js_xoffset     ;On diminue
.12a7	8d 6f 15	                sta     js_2pixx        ; le X
.12aa	b0 08		                bcs     js_2b2out       ; de offset
.12ac	ad 70 15	                lda     js_2pixx+1
.12af	f0 03		                beq     js_2b2out
.12b1	ce 70 15	                dec     js_2pixx+1      ; sur 16 bits
.12b4	68		js_2b2out       pla                     ;On recupere la valeur
.12b5	4a		js_2b3          lsr                     ;On decale js_2 bit 0 dans C
.12b6	90 22		                bcc     js_2b4          ;Est-ce vers la droite (R)
.12b8	48		                pha                     ;On stack la valeur
.12b9	ee 75 15	                inc     js_2flag
.12bc	ad 70 15	                lda     js_2pixx+1
.12bf	f0 0a		                beq     incj2x
.12c1	ad 6f 15	                lda     js_2pixx
.12c4	c9 3e		                cmp     #$40-js_xoffset
.12c6	30 03		                bmi     incj2x
.12c8	4c d9 12	                jmp     js_2b3out
.12cb	18		incj2x          clc                     ;On place la carry a 0
.12cc	ad 6f 15	                lda     js_2pixx        ;Oui!
.12cf	69 02		                adc     #js_xoffset     ;On augmente
.12d1	8d 6f 15	                sta     js_2pixx        ; le X
.12d4	90 03		                bcc     js_2b3out       ; de offset
.12d6	ee 70 15	                inc     js_2pixx+1      ; sur 16 bits
.12d9	68		js_2b3out       pla                     ;On recupere la valeur
.12da	4a		js_2b4          lsr                     ;Estce le bbouton fire (F)
.12db	90 36		                bcc     port2_out       ;Oui!
.12dd	ee 75 15	                inc     js_2flag
.12e0	ee 74 15	                inc     js_2fire        ; on augmente le nombre de tir
.12e3	a9 01		                lda     #%00000001
.12e5	8d 79 15	                sta     js_2events
.12e8	ad 6f 15	                lda     js_2pixx
.12eb	8d 76 15	                sta     js_2clickx
.12ee	ad 70 15	                lda     js_2pixx+1
.12f1	8d 77 15	                sta     js_2clickx+1
.12f4	ad 71 15	                lda     js_2pixy
.12f7	8d 78 15	                sta     js_2clicky
.12fa	ad db 15	                lda     js_2val16a+1
.12fd	49 40		                eor     #%01000000
.12ff	8d db 15	                sta     js_2val16a+1
.1302	a2 00		js_2wait        ldx     #$00
.1304	a0 ff		                ldy     #$ff
.1306	c8		js_2rel         iny
.1307	d0 01		                bne     sr1
.1309	e8		                inx
.130a			sr1
.130a	ad 00 dc	                lda     js_2port
.130d	49 ff		                eor     #$ff
.130f	29 10		                and     #$10
.1311	d0 f3		                bne     js_2rel         ; des boutons
.1313	ad 75 15	port2_out       lda     js_2flag
.1316	f0 08		                beq     out
.1318	20 77 13	                jsr     js_2correct
.131b	a9 00		                lda     #0
.131d	8d 75 15	                sta     js_2flag
.1320	20 8c 0a	out             jsr     pop
.1323			js_corrector
.1323	08		                php
.1324	48		                pha
.1325	ad 6a 15	                lda     js_1flag
.1328	f0 08		                beq     check2
.132a	20 42 13	                jsr     js_1correct
.132d	a9 00		                lda     #0
.132f	8d 6a 15	                sta     js_1flag
.1332	ad 75 15	check2          lda     js_2flag
.1335	f0 08		                beq     no_update
.1337	20 77 13	                jsr     js_2correct
.133a	a9 00		                lda     #0
.133c	8d 75 15	                sta     js_2flag
.133f	68		no_update       pla
.1340	28		                plp
.1341	60		                rts
.1342			js_1correct
.1342	08		                php
.1343	48		                pha
.1344	ad 64 15	                lda     js_1pixx
.1347	8d 75 13	                sta     vallsb
.134a	ad 65 15	                lda     js_1pixx+1
.134d	6a		                ror                     ; ex = %0000000100000001 = 257 pixel
.134e	6e 75 13	                ror     vallsb          ; Cnnnnnnn      On divise par 8 pc les
.1351	4e 75 13	                lsr     vallsb          ; 0Cnnnnnn      caracteres de 8 pixels
.1354	4e 75 13	                lsr     vallsb          ; 00Cnnnnn
.1357	ad 75 13	                lda     vallsb          ; devient = %00100000 = 32
.135a	8d 67 15	                sta     js_1x
.135d	ad 66 15	                lda     js_1pixy
.1360	8d 75 13	                sta     vallsb
.1363	4e 75 13	                lsr     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.1366	4e 75 13	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.1369	4e 75 13	                lsr     vallsb          ; 00Cnnnnn
.136c	ad 75 13	                lda     vallsb          ; devient = %00100000 = 32
.136f	8d 68 15	                sta     js_1y
.1372	68		                pla
.1373	28		                plp
.1374	60		                rts
>1375	00		vallsb          .byte     0
>1376	00		regx            .byte     0
.1377			js_2correct
.1377	08		                php
.1378	48		                pha
.1379	ad 6f 15	                lda     js_2pixx
.137c	8d aa 13	                sta     vallsb
.137f	ad 70 15	                lda     js_2pixx+1
.1382	6a		                ror                     ; ex = %0000000100000001 = 257 pixel
.1383	6e aa 13	                ror     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.1386	4e aa 13	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.1389	4e aa 13	                lsr     vallsb          ; 00Cnnnnn
.138c	ad aa 13	                lda     vallsb          ; devient = %00100000 = 32
.138f	8d 72 15	                sta     js_2x
.1392	ad 71 15	                lda     js_2pixy
.1395	8d aa 13	                sta     vallsb
.1398	4e aa 13	                lsr     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.139b	4e aa 13	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.139e	4e aa 13	                lsr     vallsb          ; 00Cnnnnn
.13a1	ad aa 13	                lda     vallsb          ; devient = %00100000 = 32
.13a4	8d 73 15	                sta     js_2y
.13a7	68		                pla
.13a8	28		                plp
.13a9	60		                rts
>13aa	00		vallsb          .byte     0
>13ab	00		regx            .byte     0
.13ac			js_showvals
.13ac	20 3c 14	                jsr     js_2showvals
.13af	60		                rts
.13b0			js_1showvals
.13b0	20 4d 0a	                jsr     push
.13b3	ad 67 15	                lda     js_1x
.13b6	20 5a 0c	                jsr     a2hex
.13b9	ad 07 0c	                lda     a2hexstr+1
.13bc	8d 8d 15	                sta     js_1val8+19
.13bf	ad 08 0c	                lda     a2hexstr+2
.13c2	8d 8e 15	                sta     js_1val8+20
.13c5	ad 64 15	                lda     js_1pixx
.13c8	20 5a 0c	                jsr     a2hex
.13cb	ad 07 0c	                lda     a2hexstr+1
.13ce	8d ac 15	                sta     js_1val16+14
.13d1	ad 08 0c	                lda     a2hexstr+2
.13d4	8d ad 15	                sta     js_1val16+15
.13d7	ad 65 15	                lda     js_1pixx+1
.13da	20 5a 0c	                jsr     a2hex
.13dd	ad 07 0c	                lda     a2hexstr+1
.13e0	8d aa 15	                sta     js_1val16+12
.13e3	ad 08 0c	                lda     a2hexstr+2
.13e6	8d ab 15	                sta     js_1val16+13
.13e9	ad 68 15	                lda     js_1y
.13ec	20 5a 0c	                jsr     a2hex
.13ef	ad 07 0c	                lda     a2hexstr+1
.13f2	8d 91 15	                sta     js_1val8+23
.13f5	ad 08 0c	                lda     a2hexstr+2
.13f8	8d 92 15	                sta     js_1val8+24
.13fb	ad 66 15	                lda     js_1pixy
.13fe	20 5a 0c	                jsr     a2hex
.1401	ad 07 0c	                lda     a2hexstr+1
.1404	8d b2 15	                sta     js_1val16+20
.1407	ad 08 0c	                lda     a2hexstr+2
.140a	8d b3 15	                sta     js_1val16+21
.140d	a9 00		                lda     #0
.140f	20 5a 0c	                jsr     a2hex
.1412	ad 07 0c	                lda     a2hexstr+1
.1415	8d b0 15	                sta     js_1val16+18
.1418	ad 08 0c	                lda     a2hexstr+2
.141b	8d b1 15	                sta     js_1val16+19
.141e	ad 69 15	                lda     js_1fire
.1421	20 5a 0c	                jsr     a2hex
.1424	ad 08 0c	                lda     a2hexstr+2
.1427	8d 9b 15	                sta     js_1val8+33
.142a	a2 7a		                ldx     #<js_1val8
.142c	a0 15		                ldy     #>js_1val8
.142e	20 a5 0e	                jsr     putscxy
.1431	a2 9e		                ldx     #<js_1val16
.1433	a0 15		                ldy     #>js_1val16
.1435	20 a5 0e	                jsr     putscxy
.1438	20 8c 0a	                jsr     pop
.143b	60		                rts
.143c			js_2showvals
.143c	20 4d 0a	                jsr     push                    ; stack : y, x, a, flg
.143f	ad 72 15	                lda     js_2x
.1442	20 5a 0c	                jsr     a2hex
.1445	ad 06 0c	                lda     a2hexstr
.1448	8d c9 15	                sta     js_2val8+19
.144b	ad 07 0c	                lda     a2hexstr+1
.144e	8d ca 15	                sta     js_2val8+20
.1451	ad 76 15	                lda     js_2clickx
.1454	20 5a 0c	                jsr     a2hex
.1457	ad 06 0c	                lda     a2hexstr
.145a	8d f7 15	                sta     js_2val16+14
.145d	ad 07 0c	                lda     a2hexstr+1
.1460	8d f8 15	                sta     js_2val16+15
.1463	ad 77 15	                lda     js_2clickx+1
.1466	20 5a 0c	                jsr     a2hex
.1469	ad 06 0c	                lda     a2hexstr
.146c	8d f5 15	                sta     js_2val16+12
.146f	ad 07 0c	                lda     a2hexstr+1
.1472	8d f6 15	                sta     js_2val16+13
.1475	ad 73 15	                lda     js_2y
.1478	20 5a 0c	                jsr     a2hex
.147b	ad 06 0c	                lda     a2hexstr
.147e	8d cd 15	                sta     js_2val8+23
.1481	ad 07 0c	                lda     a2hexstr+1
.1484	8d ce 15	                sta     js_2val8+24
.1487	ad 78 15	                lda     js_2clicky
.148a	20 5a 0c	                jsr     a2hex
.148d	ad 06 0c	                lda     a2hexstr
.1490	8d fd 15	                sta     js_2val16+20
.1493	ad 07 0c	                lda     a2hexstr+1
.1496	8d fe 15	                sta     js_2val16+21
.1499	a9 00		                lda     #0
.149b	20 5a 0c	                jsr     a2hex
.149e	ad 06 0c	                lda     a2hexstr
.14a1	8d fb 15	                sta     js_2val16+18
.14a4	ad 07 0c	                lda     a2hexstr+1
.14a7	8d fc 15	                sta     js_2val16+19
.14aa	ad 74 15	                lda     js_2fire
.14ad	20 5a 0c	                jsr     a2hex
.14b0	ad 07 0c	                lda     a2hexstr+1
.14b3	8d d7 15	                sta     js_2val8+33
.14b6	a2 b6		                ldx     #<js_2val8
.14b8	a0 15		                ldy     #>js_2val8
.14ba	20 a5 0e	                jsr     putscxy
.14bd	a2 da		                ldx     #<js_2val16a
.14bf	a0 15		                ldy     #>js_2val16a
.14c1	20 a5 0e	                jsr     putscxy
.14c4	a2 e9		                ldx     #<js_2val16
.14c6	a0 15		                ldy     #>js_2val16
.14c8	20 a5 0e	                jsr     putscxy
.14cb	20 8c 0a	                jsr     pop
.14ce	60		                rts
.14cf			js_updatecurs
.14cf	20 4d 0a	                jsr     push
.14d2	ad 72 15	running         lda     js_2x
.14d5	cd 5e 15	                cmp     js_x
.14d8	f0 06		                beq     chky
.14da	8d 5e 15	                sta     js_x
.14dd	ee 31 15	                inc     flag
.14e0	ad 73 15	chky            lda     js_2y
.14e3	cd 5f 15	                cmp     js_y
.14e6	f0 06		                beq     chkflag
.14e8	8d 5f 15	                sta     js_y
.14eb	ee 31 15	                inc     flag
.14ee	ad 31 15	chkflag         lda     flag
.14f1	f0 1e		                beq     showit
.14f3	ae 60 15	                ldx     js_oldx
.14f6	ac 61 15	                ldy     js_oldy
.14f9	20 32 15	                jsr     js_eoraddrxy
.14fc	ae 5e 15	                ldx     js_x
.14ff	ac 5f 15	                ldy     js_y
.1502	20 32 15	                jsr     js_eoraddrxy
.1505	ad 5e 15	                lda     js_x
.1508	8d 60 15	                sta     js_oldx
.150b	ad 5f 15	                lda     js_y
.150e	8d 61 15	                sta     js_oldy
.1511	a9 00		showit          lda     #0
.1513	8d 31 15	                sta     flag
.1516	8d f7 0b	                sta     addr1
.1519	a9 04		                lda     #$04
.151b	8d f8 0b	                sta     addr1+1
.151e	ae 5e 15	                ldx     js_x
.1521	ac 5f 15	                ldy     js_y
.1524	20 bd 0b	                jsr     xy2addr
.1527	ac f9 0b	                ldy     addr2
.152a	ae fa 0b	                ldx     addr2+1
.152d	20 8c 0a	                jsr pop
.1530	60		                rts
>1531	00		flag            .byte   0
.1532			js_eoraddrxy
.1532	20 4d 0a	                jsr     push
.1535	20 9f 0b	                jsr     savezp2
.1538	a9 04		                lda     #$04
.153a	8d f8 0b	                sta     addr1+1
.153d	a9 00		                lda     #0
.153f	8d f7 0b	                sta     addr1
.1542	20 bd 0b	                jsr     xy2addr
.1545	ac f9 0b	                ldy     addr2
.1548	84 fd		                sty     zpage2
.154a	ae fa 0b	                ldx     addr2+1
.154d	86 fe		                stx     zpage2+1
.154f	a0 00		                ldy     #0
.1551	b1 fd		                lda     (zpage2),y
.1553	49 40		                eor     #%01000000
.1555	91 fd		                sta     (zpage2),y
.1557	20 ae 0b	                jsr     restzp2
.155a	20 8c 0a	                jsr     pop
.155d	60		                rts
>155e	00		js_x            .byte   0
>155f	00		js_y            .byte   0
>1560	ff		js_oldx         .byte   $ff
>1561	ff		js_oldy         .byte   $ff
>1562	00		js_oldcar       .byte   0
>1563	00		js_oldcol       .byte   0
>1564	00 00		js_1pixx        .word   0
>1566	00		js_1pixy        .byte   0
>1567	00		js_1x           .byte   0
>1568	00		js_1y           .byte   0
>1569	00		js_1fire        .byte   0
>156a	00		js_1flag        .byte   0
>156b	00 00		js_1clickx      .word   0
>156d	00		js_1clicky      .byte   0
>156e	00		js_1events      .byte   0
>156f	00 00		js_2pixx        .word   0
>1571	00		js_2pixy        .byte   0
>1572	00		js_2x           .byte   0
>1573	00		js_2y           .byte   0
>1574	00		js_2fire        .byte   0
>1575	00		js_2flag        .byte   0
>1576	00 00		js_2clickx      .word   0
>1578	00		js_2clicky      .byte   0
>1579	00		js_2events      .byte   0
=$03			js_txtcol       =       vcyan
=$00			js_txtbak       =       bkcol0
>157a	03 00 04 05	js_1val8        .byte     js_txtcol,js_txtbak,4,5
>157e	50 0f 12 14	                .text   "Port 1 (x,y):($00,$00) Fire:(0)"
>1582	20 31 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>1592	30 29 20 46 09 12 05 3a 28 30 29
>159d	00		                .byte   0
>159e	03 00 0b 07	js_1val16       .byte   js_txtcol,js_txtbak,11,7
>15a2	28 18 2c 19	                .text   "(x,y):($0000,$0000)"
>15a6	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29
>15b5	00		                .byte   0
>15b6	03 00 04 0a	js_2val8        .byte   js_txtcol,js_txtbak,4,10
>15ba	43 01 12 50	                .text   "CarPos (x,y):($00,$00) Fire:(0)"
>15be	0f 13 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>15ce	30 29 20 46 09 12 05 3a 28 30 29
>15d9	00		                .byte   0
>15da	01 00 04 0c	js_2val16a      .byte   vblanc,js_txtbak,4,12
>15de	43 0c 09 03	                .text   "Click pos."
>15e2	0b 20 10 0f 13 2e
>15e8	00		                .byte   0
>15e9	03 00 10 0c	js_2val16       .byte   js_txtcol,js_txtbak,16,12
>15ed	28 18 2c 19	                .text   "(x,y):($0000,$0000)"
>15f1	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29
>1600	00		                .byte   0

;******  Return to file: joystick2-mc.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-spriteman.asm

.1601			sprt_init
.1601	20 4d 0a	                jsr     push
.1604	ad 56 16	                lda     sprt_ptr
.1607	20 38 17	                jsr     sprt_loadptr
.160a	20 81 0b	                jsr     savezp1
.160d	20 9f 0b	                jsr     savezp2
.1610	ad 15 d0	                lda     vic+$15 ; enable sprite 2
.1613	09 04		                ora     #%00000100
.1615	8d 15 d0	                sta     vic+$15
.1618	a9 0d		                lda     #$0d
.161a	8d fa 07	                sta     $7fa
.161d	ad 14 1a	                lda     sprt_ptr0
.1620	85 fb		                sta     zpage1
.1622	ad 15 1a	                lda     sprt_ptr0+1
.1625	85 fc		                sta     zpage1+1
.1627	a9 40		                lda     #$40
.1629	85 fd		                sta     zpage2
.162b	a9 03		                lda     #$03
.162d	85 fe		                sta     zpage2+1
.162f	a0 41		                ldy     #65
.1631	b1 fb		                lda     (zpage1),y      ; sprite y offset
.1633	8d 7b 17	                sta     sprt_yoffset
.1636	88		                dey
.1637	b1 fb		                lda     (zpage1),y      ; sprite x offset
.1639	8d 7a 17	                sta     sprt_xoffset
.163c	88		                dey
.163d	b1 fb		                lda     (zpage1),y      ; sprite color
.163f	8d 29 d0	                sta     $d029
.1642	88		                dey
.1643	a0 3e		                ldy     #62
.1645	b1 fb		nextbyte        lda     (zpage1),y
.1647	91 fd		                sta     (zpage2),y
.1649	88		                dey
.164a	d0 f9		                bne     nextbyte
.164c	20 90 0b	                jsr     restzp1
.164f	20 ae 0b	                jsr     restzp2
.1652	20 8c 0a	                jsr     pop
.1655	60		                rts
>1656	01		sprt_ptr        .byte   $01
.1657			sprt_calcpos
.1657	20 4d 0a	                jsr     push
.165a	a9 00		                lda     #0
.165c	8d 7d 17	                sta     sprt_x+1
.165f	8d 7f 17	                sta     sprt_y+1
.1662	ad 70 15	                lda     js_2pixx+1
.1665	18		                clc
.1666	2a		                rol
.1667	2a		                rol
.1668	8d 7d 17	                sta     sprt_x+1
.166b	ad 6f 15	                lda     js_2pixx
.166e	18		                clc
.166f	6d 7a 17	                adc     sprt_xoffset
.1672	8d 7c 17	                sta     sprt_x
.1675	90 08		                bcc     norepx
.1677	ad 7d 17	                lda     sprt_x+1
.167a	09 04		                ora     #$04
.167c	8d 7d 17	                sta     sprt_x+1
.167f	ad 71 15	norepx          lda     js_2pixy
.1682	18		                clc
.1683	6d 7b 17	                adc     sprt_yoffset
.1686	8d 7e 17	                sta     sprt_y
.1689	20 8c 0a	                jsr     pop
.168c	60		                rts
.168d			sprt_move
.168d	20 4d 0a	                jsr     push
.1690	20 57 16	                jsr     sprt_calcpos
.1693	ad 7c 17	                lda     sprt_x
.1696	8d 04 d0	                sta     vic+$04
.1699	ad 7d 17	                lda     sprt_x+1
.169c	8d 10 d0	                sta     vic+$10
.169f	ad 7e 17	                lda     sprt_y
.16a2	8d 05 d0	                sta     vic+$05
.16a5	20 ac 16	                jsr     sprt_showpos
.16a8	20 8c 0a	                jsr     pop
.16ab	60		                rts
.16ac			sprt_showpos
.16ac	20 4d 0a	                jsr     push
.16af	ad 7c 17	                lda     sprt_x
.16b2	20 5a 0c	                jsr     a2hex
.16b5	ad 06 0c	                lda     a2hexstr
.16b8	8d 43 1a	                sta     sprite_pos+26
.16bb	ad 07 0c	                lda     a2hexstr+1
.16be	8d 44 1a	                sta     sprite_pos+27
.16c1	ad 7d 17	                lda     sprt_x+1
.16c4	20 5a 0c	                jsr     a2hex
.16c7	ad 06 0c	                lda     a2hexstr
.16ca	8d 41 1a	                sta     sprite_pos+24
.16cd	ad 07 0c	                lda     a2hexstr+1
.16d0	8d 42 1a	                sta     sprite_pos+25
.16d3	ad 7e 17	                lda     sprt_y
.16d6	20 5a 0c	                jsr     a2hex
.16d9	ad 06 0c	                lda     a2hexstr
.16dc	8d 49 1a	                sta     sprite_pos+32
.16df	ad 07 0c	                lda     a2hexstr+1
.16e2	8d 4a 1a	                sta     sprite_pos+33
.16e5	a9 00		                lda     #0
.16e7	20 5a 0c	                jsr     a2hex
.16ea	ad 06 0c	                lda     a2hexstr
.16ed	8d 47 1a	                sta     sprite_pos+30
.16f0	ad 07 0c	                lda     a2hexstr+1
.16f3	8d 48 1a	                sta     sprite_pos+31
.16f6	a2 29		                ldx     #<sprite_pos
.16f8	a0 1a		                ldy     #>sprite_pos
.16fa	20 a5 0e	                jsr     putscxy
.16fd	20 8c 0a	                jsr     pop
.1700	60		                rts
.1701			sprt_loadptr2
.1701	20 4d 0a	                jsr     push
.1704	aa		                tax
.1705	8e 56 16	                stx     sprt_ptr
.1708	ad 15 1a	                lda     sprt_ptr0+1
.170b	8d 37 17	                sta     calcbuff+1
.170e	ad 14 1a	                lda     sprt_ptr0
.1711	8d 36 17	                sta     calcbuff
.1714	e0 00		                cpx     #0
.1716	f0 11		                beq     addrok
.1718	ad 36 17	                lda     calcbuff
.171b	18		nextx           clc
.171c	69 42		                adc     #66
.171e	90 03		                bcc     nocarry
.1720	ee 37 17	                inc     calcbuff+1
.1723	8d 36 17	nocarry         sta     calcbuff
.1726	ca		                dex
.1727	d0 f2		                bne     nextx
.1729	ac 37 17	addrok          ldy     calcbuff+1
.172c	ae 36 17	                ldx     calcbuff
.172f	20 52 17	                jsr     sprt_setimage
.1732	20 8c 0a	                jsr     pop
.1735	60		                rts
>1736	00 00		calcbuff        .word   $0
.1738			sprt_loadptr
.1738	20 4d 0a	                jsr     push
.173b	ad 56 16	                lda     sprt_ptr
.173e	18		                clc
.173f	2a		                rol
.1740	a8		                tay
.1741	b9 14 1a	                lda     sprt_ptr0,y
.1744	aa		                tax
.1745	b9 15 1a	                lda     sprt_ptr0+1,y
.1748	a8		                tay
.1749	20 52 17	                jsr     sprt_setimage
.174c	20 8c 0a	                jsr     pop
.174f	60		                rts
>1750	00 00		calcbuff        .word   $0
.1752			sprt_setimage
.1752	20 4d 0a	                jsr     push
.1755	20 81 0b	                jsr     savezp1
.1758	20 9f 0b	                jsr     savezp2
.175b	84 fc		                sty     zpage1+1
.175d	86 fb		                stx     zpage1
.175f	a0 17		                ldy     #>sprt_image
.1761	84 fe		                sty     zpage2+1
.1763	a0 80		                ldy     #<sprt_image
.1765	84 fd		                sty     zpage2
.1767	a0 42		                ldy     #66
.1769	b1 fb		nextbyte        lda     (zpage1),y
.176b	91 fd		                sta     (zpage2),y
.176d	88		                dey
.176e	d0 f9		                bne     nextbyte
.1770	20 ae 0b	                jsr     restzp2
.1773	20 90 0b	                jsr     restzp1
.1776	20 8c 0a	                jsr     pop
.1779	60		                rts
>177a	00		sprt_xoffset    .byte   $00
>177b	00		sprt_yoffset    .byte   $00
>177c	00 00		sprt_x          .word   $0000
>177e	00 00		sprt_y          .word   $0000
>1780			sprt_image      .fill 66
>17c2	00 00 00 00	sprt_crxair     .byte $00, $00, $00, $00, $00, $00 ; 6
>17c6	00 00
>17c8	00 66 00 00	                .byte $00, $66, $00, $00, $3c, $00 ; 12
>17cc	3c 00
>17ce	00 18 00 00	                .byte $00, $18, $00, $00, $00, $00 ; 18
>17d2	00 00
>17d4	00 00 00 00	                .byte $00, $00, $00, $00, $18, $00 ; 24
>17d8	18 00
>17da	80 00 01 c0	                .byte $80, $00, $01, $c0, $18, $03 ; 30
>17de	18 03
>17e0	66 66 66 c0	                .byte $66, $66, $66, $c0, $18, $03 ; 36
>17e4	18 03
>17e6	80 00 01 00	                .byte $80, $00, $01, $00, $18, $00 ; 42
>17ea	18 00
>17ec	00 00 00 00	                .byte $00, $00, $00, $00, $00, $00 ; 48
>17f0	00 00
>17f2	00 18 00 00	                .byte $00, $18, $00, $00, $3c, $00 ; 54
>17f6	3c 00
>17f8	00 66 00 00	                .byte $00, $66, $00, $00, $00, $00 ; 60
>17fc	00 00
>17fe	00 00 00 01	                .byte $00, $00, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>1802	0c 28
>1804	80 00 00 e0	sprt_mouse      .byte $80, $00, $00, $e0, $00, $00 ; 6
>1808	00 00
>180a	b8 00 00 ce	                .byte $b8, $00, $00, $ce, $00, $00 ; 12
>180e	00 00
>1810	83 80 00 c0	                .byte $83, $80, $00, $c0, $e0, $00 ; 18
>1814	e0 00
>1816	80 18 00 c0	                .byte $80, $18, $00, $c0, $3c, $00 ; 24
>181a	3c 00
>181c	80 e0 00 c0	                .byte $80, $e0, $00, $c0, $60, $00 ; 30
>1820	60 00
>1822	98 30 00 fc	                .byte $98, $30, $00, $fc, $18, $00 ; 36
>1826	18 00
>1828	c6 0c 00 03	                .byte $c6, $0c, $00, $03, $06, $00 ; 42
>182c	06 00
>182e	01 9c 00 00	                .byte $01, $9c, $00, $00, $f0, $00 ; 48
>1832	f0 00
>1834	00 40 00 00	                .byte $00, $40, $00, $00, $00, $00 ; 54
>1838	00 00
>183a	00 00 00 00	                .byte $00, $00, $00, $00, $00, $00 ; 60
>183e	00 00
>1840	00 00 00 01	                .byte $00, $00, $00, $01, $18, $31 ; 66, X,X,X color, xoffset, yoffset
>1844	18 31
>1846	00 7c 00 01	sprt_pointer    .byte $00, $7c, $00, $01, $83, $00 ; 6
>184a	83 00
>184c	06 10 c0 08	                .byte $06, $10, $c0, $08, $00, $30 ; 12
>1850	00 30
>1852	12 10 88 20	                .byte $12, $10, $88, $20, $00, $08 ; 18
>1856	00 08
>1858	40 ba 04 40	                .byte $40, $ba, $04, $40, $6c, $04 ; 24
>185c	6c 04
>185e	80 c6 02 aa	                .byte $80, $c6, $02, $aa, $82, $aa ; 30
>1862	82 aa
>1864	80 c6 02 40	                .byte $80, $c6, $02, $40, $6c, $04 ; 36
>1868	6c 04
>186a	40 ba 04 20	                .byte $40, $ba, $04, $20, $00, $08 ; 42
>186e	00 08
>1870	12 10 90 08	                .byte $12, $10, $90, $08, $00, $20 ; 48
>1874	00 20
>1876	06 10 c0 01	                .byte $06, $10, $c0, $01, $83, $00 ; 54
>187a	83 00
>187c	00 7c 00 00	                .byte $00, $7c, $00, $00, $00, $00 ; 60
>1880	00 00
>1882	00 00 00 01	                .byte $00, $00, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>1886	0c 28
>1888	55 55 55 aa	sprt_pointer2   .byte $55, $55, $55, $aa, $aa, $aa ; 6
>188c	aa aa
>188e	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 12
>1892	aa aa
>1894	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 18
>1898	aa aa
>189a	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 24
>189e	00 2a
>18a0	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 30
>18a4	00 2a
>18a6	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 36
>18aa	00 2a
>18ac	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 42
>18b0	00 2a
>18b2	54 00 55 aa	                .byte $54, $00, $55, $aa, $aa, $aa ; 48
>18b6	aa aa
>18b8	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 54
>18bc	aa aa
>18be	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 60
>18c2	aa aa
>18c4	55 55 55 01	                .byte $55, $55, $55, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>18c8	0c 28
>18ca	06 00 00 0f	sprt_hand       .byte $06, $00, $00, $0f, $00, $00 ; 6
>18ce	00 00
>18d0	19 80 00 10	                .byte $19, $80, $00, $10, $80, $00 ; 12
>18d4	80 00
>18d6	19 80 00 16	                .byte $19, $80, $00, $16, $b1, $8c ; 18
>18da	b1 8c
>18dc	10 ca 52 10	                .byte $10, $ca, $52, $10, $84, $21 ; 24
>18e0	84 21
>18e2	10 84 21 30	                .byte $10, $84, $21, $30, $84, $21 ; 30
>18e6	84 21
>18e8	50 84 21 90	                .byte $50, $84, $21, $90, $84, $21 ; 36
>18ec	84 21
>18ee	90 00 01 90	                .byte $90, $00, $01, $90, $00, $01 ; 42
>18f2	00 01
>18f4	90 7f c1 90	                .byte $90, $7f, $c1, $90, $00, $01 ; 48
>18f8	00 01
>18fa	40 ff e2 40	                .byte $40, $ff, $e2, $40, $00, $02 ; 54
>18fe	00 02
>1900	3c 00 04 02	                .byte $3c, $00, $04, $02, $00, $08 ; 60
>1904	00 08
>1906	03 ff f8 01	                .byte $03, $ff, $f8, $01, $12, $31 ; 66, X,X,X color, xoffset, yoffset
>190a	12 31
>190c	00 3e 00 01	sprt_ultraman   .byte $00, $3e, $00, $01, $c1, $c0 ; 6
>1910	c1 c0
>1912	0e 3e 30 08	                .byte $0e, $3e, $30, $08, $41, $08 ; 12
>1916	41 08
>1918	10 1c 04 10	                .byte $10, $1c, $04, $10, $22, $04 ; 18
>191c	22 04
>191e	24 1c 12 23	                .byte $24, $1c, $12, $23, $00, $62 ; 24
>1922	00 62
>1924	20 08 02 47	                .byte $20, $08, $02, $47, $c1, $f1 ; 30
>1928	c1 f1
>192a	6a aa ab 47	                .byte $6a, $aa, $ab, $47, $c9, $f1 ; 36
>192e	c9 f1
>1930	20 08 02 20	                .byte $20, $08, $02, $20, $14, $02 ; 42
>1934	14 02
>1936	20 00 02 10	                .byte $20, $00, $02, $10, $00, $04 ; 48
>193a	00 04
>193c	10 7f 04 08	                .byte $10, $7f, $04, $08, $00, $08 ; 54
>1940	00 08
>1942	06 3e 30 01	                .byte $06, $3e, $30, $01, $c1, $c0 ; 60
>1946	c1 c0
>1948	00 3e 00 01	                .byte $00, $3e, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>194c	0c 28
>194e	00 1c 00 00	sprt_male       .byte $00, $1c, $00, $00, $3e, $00 ; 6
>1952	3e 00
>1954	00 3e 00 00	                .byte $00, $3e, $00, $00, $3e, $00 ; 12
>1958	3e 00
>195a	00 1c 00 00	                .byte $00, $1c, $00, $00, $08, $00 ; 18
>195e	08 00
>1960	00 ff 80 00	                .byte $00, $ff, $80, $00, $ff, $80 ; 24
>1964	ff 80
>1966	00 be 80 00	                .byte $00, $be, $80, $00, $9c, $80 ; 30
>196a	9c 80
>196c	00 88 80 00	                .byte $00, $88, $80, $00, $be, $80 ; 36
>1970	be 80
>1972	00 be 80 01	                .byte $00, $be, $80, $01, $9c, $c0 ; 42
>1976	9c c0
>1978	01 94 c0 00	                .byte $01, $94, $c0, $00, $14, $00 ; 48
>197c	14 00
>197e	00 14 00 00	                .byte $00, $14, $00, $00, $14, $00 ; 54
>1982	14 00
>1984	00 36 00 00	                .byte $00, $36, $00, $00, $77, $00 ; 60
>1988	77 00
>198a	00 77 00 01	                .byte $00, $77 ,$00, $01, $0c, $2f ; 66, X,X,X color, xoffset, yoffset
>198e	0c 2f
>1990	00 3c 00 00	sprt_robot      .byte $00, $3c, $00, $00, $24, $00 ; 6
>1994	24 00
>1996	00 66 18 00	                .byte $00, $66, $18, $00, $66, $38 ; 12
>199a	66 38
>199c	00 24 38 00	                .byte $00, $24, $38, $00, $3c, $10 ; 18
>19a0	3c 10
>19a2	00 18 10 00	                .byte $00, $18, $10, $00, $18, $10 ; 24
>19a6	18 10
>19a8	0f ff f0 08	                .byte $0f, $ff, $f0, $08, $7e, $00 ; 30
>19ac	7e 00
>19ae	08 7e 00 08	                .byte $08, $7e, $00, $08, $18, $00 ; 36
>19b2	18 00
>19b4	1c 18 00 1c	                .byte $1c, $18, $00, $1c, $18, $00 ; 42
>19b8	18 00
>19ba	18 3c 00 00	                .byte $18, $3c, $00, $00, $3c, $00 ; 48
>19be	3c 00
>19c0	00 24 00 00	                .byte $00, $24, $00, $00, $24, $00 ; 54
>19c4	24 00
>19c6	00 24 00 03	                .byte $00, $24, $00, $03, $e7, $c0 ; 60
>19ca	e7 c0
>19cc	03 e7 c0 01	                .byte $03, $e7, $c0, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>19d0	0c 28
>19d2	00 1c 00 00	sprt_femme      .byte $00, $1c, $00, $00, $3e, $00 ; 6
>19d6	3e 00
>19d8	00 3e 00 00	                .byte $00, $3e, $00, $00, $3e, $00 ; 12
>19dc	3e 00
>19de	00 1c 00 00	                .byte $00, $1c, $00, $00, $08, $00 ; 18
>19e2	08 00
>19e4	00 7f 00 00	                .byte $00, $7f, $00, $00, $ff, $80 ; 24
>19e8	ff 80
>19ea	00 be 80 00	                .byte $00, $be, $80, $00, $9c, $80 ; 30
>19ee	9c 80
>19f0	00 88 80 00	                .byte $00, $88, $80, $00, $9c, $80 ; 36
>19f4	9c 80
>19f6	00 be 80 01	                .byte $00, $be, $80, $01, $be, $c0 ; 42
>19fa	be c0
>19fc	01 be c0 00	                .byte $01, $be, $c0, $00, $7f, $00 ; 48
>1a00	7f 00
>1a02	00 7f 00 00	                .byte $00, $7f, $00, $00, $ff, $80 ; 54
>1a06	ff 80
>1a08	00 36 00 00	                .byte $00, $36, $00, $00, $77, $00 ; 60
>1a0c	77 00
>1a0e	00 55 00 01	                .byte $00, $55 ,$00, $01, $0c, $2f ; 66, X,X,X color, xoffset, yoffset
>1a12	0c 2f
>1a14	80 17		sprt_ptr0       .word  sprt_image + (0*66)
>1a16	c2 17		sprt_ptr1       .word  sprt_image + (1*66)
>1a18	04 18		sprt_ptr2       .word  sprt_image + (2*66)
>1a1a	46 18		sprt_ptr3       .word  sprt_image + (3*66)
>1a1c	88 18		sprt_ptr4       .word  sprt_image + (4*66)
>1a1e	ca 18		sprt_ptr5       .word  sprt_image + (5*66)
>1a20	0c 19		sprt_ptr6       .word  sprt_image + (6*66)
>1a22	4e 19		sprt_ptr7       .word  sprt_image + (7*66)
>1a24	90 19		sprt_ptr8       .word  sprt_image + (8*66)
>1a26	d2 19		sprt_ptr9       .word  sprt_image + (9*66)
>1a28	ff		testbyte        .byte 255
=$07			sprt_txtcol     =       vjaune
=$00			sprt_txtbak     =       bkcol0
=$01			sprt_color      =       vwhite
>1a29	07 00 04 0e	sprite_pos      .byte   sprt_txtcol,sprt_txtbak,4,14
>1a2d	53 10 12 09	                .text       "Sprite pos. (x,y):($0000,$0000)"
>1a31	14 05 20 10 0f 13 2e 20 28 18 2c 19 29 3a 28 24
>1a41	30 30 30 30 2c 24 30 30 30 30 29
>1a4c	00		                .byte   0

;******  Return to file: joystick2-mc.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib" -i -L mainsd.txt -o mainsd.prg mainsd.asm
; Fri Feb 25 00:54:32 2022

;Offset	;Hex		;Source

;******  Processing input file: mainsd.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_map_kernal.asm"

.080d			        c
=$90			kiostatus = $90       ; Kernal I/O status word (st) (byte)
=$b7			curfnlen  = $b7       ; Current filename length (byte)
=$b9			cursecadd = $b9       ; Current secondary address (byte)
=$ba			curdevno  = $ba       ; Current device number (byte)
=$bb			curfptr   = $bb       ; Current file pointer (word)
=$fb			zpage1    = $fb       ; zero page 1 address (word)
=$fd			zpage2    = $fd       ; zero page 2 address (word)
=$fb			zeropage  = zpage1
=$fd			zonepage  = zpage2
=$0286			bascol    = $0286     ;basic next chr colscreenram (byte)
=$0400			scrnram   = $0400     ;video character ram
=$0400			scrram0   = $0400
=$0500			scrram1   = $0500
=$0600			scrram2   = $0600
=$0700			scrram3   = $0700
=$0801			basicsta  = $0801     ;basic start address
=$a000			basicrom  = $a000
=$d000			vic       = $d000     ;vic base address
=53265			vicreg11  = vic+$11   ;misc vic register
=53266			vicscan   = vic+$12   ;vic raster line number
=$d020			vborder   = $d020     ;video border col.
=$d020			framecol  = $d020
=$d021			backgrnd  = $d021
=$d021			vbkgrnd   = $d021     ;video back col.
=$d400			sid       = $d400     ;sid base address
=$d800			colorram  = $d800     ;video color ram
=$d800			colram0   = $d800
=$d900			colram1   = $d900
=$da00			colram2   = $da00
=$db00			colram3   = $db00
=$dc00			cia1      = $dc00     ;cia1  base address
=$dd00			cia2      = $dd00     ;cia2 base address
=$e000			kernalrom = $e000
=$03			bstop     =    $03      ;stop
=$05			bwhite    =    $05      ;set color white
=$08			block     =    $08      ;lock the charset
=$09			bunlock   =    $09      ;unlock the charset
=$0d			bcarret   =    $0d
=$0e			btext     =    $0e
=$11			bcrsdn    =    $11      ;cursor down 1 line
=$12			brevcol   =    $12
=$13			bhome     =    $13
=$14			bdelete   =    $14
=$1c			bred      =    $1c
=$1d			bcuright  =    $1d
=$1e			bgreen    =    $1e
=$1f			bblue     =    $1f
=$81			borange   =    $81
=$83			blrun     =    $83
=$85			bfkey1    =    $85
=$86			bfkey2    =    $86
=$87			bfkey3    =    $87
=$88			bfkey4    =    $88
=$89			bfkey5    =    $89
=$8a			bfkey6    =    $8a
=$8b			bfkey7    =    $8b
=$8c			bfkey8    =    $8c
=$8d			bcarret1  =    $8d
=$8e			bgraph    =    $8e
=$90			bblack    =    $90
=$91			bcuup     =    $91
=$92			brevoff   =    $92
=$93			bclear    =    $93
=$94			binsert   =    $94
=$95			bbrown    =    $95
=$96			bltred    =    $96
=$97			bdkgrey   =    $97
=$98			bmdgrey   =    $98
=$99			bltgreen  =    $99
=$9a			bltblue   =    $9a
=$9b			bltgrey   =    $9b
=$9c			bmagenta  =    $9c
=$9d			bculeft   =    $9d
=$9e			byellow   =    $9e
=$9f			bcyan     =    $9f
=$0286			carcol  = $0286
=$030a			ieval   = $030a
=$73			chrget  = $73
=$79			chrgot  = $79
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ff81			cint    = $ff81 ; ($ff5b) Initialize the screen editor and vic-ii chip
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ff8a			restor  = $ff8a ; ($fd15) Restore default I/O vectors.
=$ff8d			vector  = $ff8d ; ($fd1a) Read/set I/O vectors.
=$ff90			setmsg  = $ff90 ; ($fe18) Set kernal message output flag
=$ff93			second  = $ff93 ; ($edb9) Send secondary address after listen
=$ff96			tksa    = $ff96 ; ($edc7) Send a secondary address to a device commanded to talk
=$ff99			memtop  = $ff99 ; ($fe25) Get/Set top of ram
=$ff9c			membot  = $ff9c ; ($fe34) Get/set bottom of memory.
=$ff9f			scankey = $ff9f ; $(ea87) Scan the keyboard
=$ffa2			settmo  = $ffa2 ; ($fe21) Set ieee bus card timeout flag
=$ffa5			acptr   = $ffa5 ; ($ee13) recoit un caractere provenant du port serie
=$ffa8			ciout   = $ffa8 ; ($eddd) Transmit a byte over the serial bus
=$ffab			untlk   = $ffab ; ($edef) Send an untalk command
=$ffae			unlsn   = $ffae ; ($edfe) Send an unlisten command
=$ffb1			listen  = $ffb1 ; ($ed0c) Command a device on the serial bus to listen.
=$ffb4			talk    = $ffb4 ; ($ed09) Command a device on the serial bus to talk
=$ffb7			readst  = $ffb7 ; ($fe07) Read i/o status word
=$ffba			setlfs  = $ffba ; ($fe00) Set up a logical file
=$ffbd			setnam  = $ffbd ; ($fdf9) Set up file name
=$ffc0			open    = $ffc0 ; ($f3a4) Open a logical file
=$ffc3			close   = $ffc3 ; ($f291) Close a logical file
=$ffc6			chkin   = $ffc6 ; ($f20e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; ($f250) Define an output channel.
=$ffcc			clrchn  = $ffcc ; ($f333) - Clear all i/o channels.
=$ffcf			chrin   = $ffcf ; ($f157) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; ($f1ca) Output a character
=$ffd5			load    = $ffd5 ; ($f49e) Load device to RAM.
=$ffd8			save    = $ffd8 ; ($f5dd) Save memory to a device.
=$ffdb			settim  = $ffdb ; ($f6e4) Set the system clock.
=$ffde			rdtim   = $ffde ; ($f6dd) Read system clock
=$ffe1			stop    = $ffe1 ; ($f6ed) Check if stop key is pressed.
=$ffe4			getin   = $ffe4 ; ($f13e) Get a character.
=$ffe7			clall   = $ffe7 ; ($f32f) Close all open files
=$ffea			udtim   = $ffea ; ($f69b) Update the system clock
=$ffed			screen  = $ffed ; ($e505) Return screen format
=$fff0			plot    = $fff0 ; ($e50a) Set or retrieve cursor location x=column, y=line
=$fff3			iobase  = $fff3 ; ($e500) Define i/o memory page
=$ff81			kcint     =    cint      ;   , init vic + ecran.
=$ff84			kioinit   =    ioinit    ;   , init i/o dev.
=$ff87			kramtas   =    ramtas    ;   , test de memoire.
=$ffa8			kciout    =    ciout     ;a  ,tx byte  acia
=$ff8a			krestor   =    restor    ;   , set ram plafond
=$ff8d			kvector   =    vector    ;
=$ff90			ksetmsg   =    setmsg    ;a  , set sys. msg. out
=$ff93			ksecond   =    second    ;a  , tx adresse sec.
=$ff96			ktksa     =    tksa      ;a  , talk adresse sec.
=$ff99			kmemtop   =    memtop    ; yx, (c) get mem high
=$ff9c			kmembot   =    membot    ; yx, (c) get mem low
=$ff9f			kscankey  =    scankey   ;   , scan clavier
=$ffa2			ksettmo   =    settmo    ;a  , set ieee timeout
=$ffa5			kacptr    =    acptr     ;a  ,rx serie.
=$ffab			kuntlk    =    untlk     ;   , iec-cmc stop talk
=$ffae			kunlsn    =    unlsn     ;   , iec-cmd stop lsn
=$ffb1			klisten   =    listen    ;a  , iec-cmd dev ecout
=$ffb4			ktalk     =    talk      ;a  , iec-cmd dev parle
=$ffb7			kreadst   =    readst    ;a  , lecture i/o stats
=$ffba			ksetlfs   =    setlfs    ;ayx, init fich logi.
=$ffbd			ksetnam   =    setnam    ;ayx, init num.nom.fich
=$ffc0			kopen     =    open      ;axy, ouvre fich-nom
=$ffc3			kclose    =    close     ;a  , ferme fichier #a.
=$ffc6			kchkin    =    chkin     ;  x,open canal in.
=$ffc9			kchkout   =    chkout    ;  x,open canal out
=$ffcc			kclrchn   =    clrchn    ;   , ferme canaux i/o.
=$ffcf			kchrin    =    chrin     ;a  ,recup. un car.
=$ffd2			kchrout   =    chrout    ;a  ,sort un car.
=$ffd5			kload     =    load      ;ayx, dev->ram
=$ffd8			ksave     =    save      ;   , sauve mem->dev
=$ffdb			ksettim   =    settim    ;axy, init sysclock
=$ffde			krdtim    =    rdtim     ;axy, lecture sysclock
=$ffe1			kstop     =    stop      ;a  , ret. stopkey stat
=$ffe4			kgetin    =    getin     ;a  , recup. car. #dev.
=$ffe7			kclall    =    clall     ;   , ferme fichiers.
=$ffea			kudtim    =    udtim     ;   , maj sysclock
=$ffed			kscreen   =    screen    ; yx, get format ecran
=$fff0			kplot     =    plot      ; yx, (c) get csr pos.
=$fff3			kiobase   =    iobase    ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.080d	4c 87 19	pgmstart        jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: mainsd.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_pushpop.asm"

.0810			push
.0810	08		          php            ; stack : flg, pcl, pch
.0811	78		          sei
.0812	8d 4c 08	          sta  ra        ; save a
.0815	68		          pla            ; stack : pcl, pch
.0816	8d 4b 08	          sta  rp        ; save rp
.0819	68		          pla            ; stack : pch
.081a	8d 4d 08	          sta  pc        ; save pcl
.081d	68		          pla            ; stack : -
.081e	8d 4e 08	          sta  pc+1      ; save pch
.0821	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0823	48		          pha            ; stack : zp1l
.0824	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0826	48		          pha            ; stack : zp1h, zp1l
.0827	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0829	48		          pha            ; stack : zp2l, zp1h, zp1l
.082a	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.082c	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.082d	ad 4b 08	          lda  rp        ; get rp
.0830	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0831	ad 4c 08	          lda  ra        ; get a
.0834	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0835	8a		          txa            ; get x
.0836	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0837	98		          tya            ; get y
.0838	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0839	ad 4e 08	          lda  pc+1      ; get pch
.083c	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.083d	ad 4d 08	          lda  pc        ; get pcl
.0840	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0841	ad 4b 08	          lda  rp        ; get rp
.0844	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0845	ad 4c 08	          lda  ra        ; get a
.0848	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0849	58		          cli
.084a	60		          rts
>084b	00		rp        .byte     0
>084c	00		ra        .byte     0
>084d	00 00		pc        .word     0
.084f			pull
.084f			pop
.084f	78		          sei
.0850	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0851	8d 84 08	          sta  pc        ; save pcl
.0854	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0855	8d 85 08	          sta  pc+1      ; save pch
.0858	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0859	a8		          tay            ; set y
.085a	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.085b	aa		          tax            ; set x
.085c	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.085d	8d 83 08	          sta  ra        ; save a
.0860	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0861	8d 82 08	          sta  rp        ; save rp
.0864	68		          pla            ; stack : zp2l, zp1h, zp1l
.0865	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0867	68		          pla            ; stack : zp1h, zp1l
.0868	85 fd		          sta  zpage2    ; get zpage2 High byte
.086a	68		          pla            ; stack : zp1l
.086b	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.086d	68		          pla            ; stack :
.086e	85 fb		          sta  zpage1    ; get zpage1 High byte
.0870	ad 85 08	          lda  pc+1      ; get pch
.0873	48		          pha            ; stack : pch
.0874	ad 84 08	          lda  pc
.0877	48		          pha            ; stack : pcl, pch
.0878	ad 82 08	          lda  rp        ; get rp
.087b	48		          pha            ; stack : rp, pcl, pch
.087c	ad 83 08	          lda  ra        ; set ra
.087f	58		          cli
.0880	28		          plp            ; stack : pcl, pch
.0881	60		          rts
>0882	00		rp        .byte     0
>0883	00		ra        .byte     0
>0884	00 00		pc        .word     0

;******  Return to file: mainsd.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_mem.asm"

.0886			blkfill
.0886	20 10 08	bf0            jsr  push
.0889	20 45 09	               jsr  savezp1
.088c	84 fc		               sty  zpage1+1
.088e	a0 00		               ldy  #$00
.0890	84 fb		               sty  zpage1
.0892	91 fb		bf1            sta  (zpage1),y
.0894	c8		               iny
.0895	d0 fb		               bne  bf1
.0897	20 54 09	               jsr  restzp1
.089a	20 4f 08	               jsr  pop
.089d	60		               rts
.089e			memfill
.089e	20 10 08	               jsr  push
.08a1	20 86 08	mf1            jsr  blkfill
.08a4	c8		               iny
.08a5	ca		               dex
.08a6	d0 f9		               bne  mf1
.08a8	20 4f 08	               jsr  pop
.08ab	60		               rts
.08ac			memmove
.08ac	20 10 08	               jsr  push
.08af	ba		               tsx            ; On se crée un pointeur ...
.08b0	8a		               txa
.08b1	18		               clc
.08b2	69 0b		               adc  #11
.08b4	a8		               tay
.08b5	a2 06		               ldx  #$06
.08b7	b9 00 01	nextbyte       lda  $0100,y
.08ba	99 06 09	               sta  words,y
.08bd	c8		               iny
.08be	ca		               dex
.08bf	d0 f6		               bne  nextbyte
.08c1	ad 06 09	               lda  s
.08c4	8d dd 08	               sta  source+1
.08c7	ad 07 09	               lda  s+1
.08ca	8d de 08	               sta  source+2
.08cd	ad 08 09	               lda  d
.08d0	8d da 08	               sta  destin+1
.08d3	ad 09 09	               lda  d+1
.08d6	8d db 08	               sta  destin+2
.08d9	ad ff ff	destin         lda  $ffff
.08dc	8d ff ff	source         sta  $ffff
.08df	ee da 08	               inc  destin+1
.08e2	d0 03		               bne  src
.08e4	ee db 08	               inc  destin+2
.08e7	ee dd 08	src            inc  source+1
.08ea	d0 03		               bne  cnt
.08ec	ee de 08	               inc  source+2
.08ef	ad 0a 09	cnt            lda  compte
.08f2	d0 08		               bne  decit
.08f4	ad 0b 09	               lda  compte+1
.08f7	f0 09		               beq  fini
.08f9	ce 0b 09	               dec  compte+1
.08fc	ce 0a 09	decit          dec  compte
.08ff	4c d9 08	               jmp  destin
.0902	20 4f 08	fini           jsr  pop
.0905	60		               rts
.0906			words
>0906	00 00		s         .word     $0000
>0908	00 00		d         .word     $0000
>090a	00 00		compte    .word     $0000
.090c			decword
.090c	20 10 08	               jsr  push
.090f	86 fd		               stx  zpage2
.0911	84 fe		               sty  zpage2+1
.0913	20 4f 08	               jsr  pop
.0916	60		               rts
.0917			inczp1
.0917	08		               php
.0918	48		               pha
.0919	e6 fb		               inc  zpage1
.091b	d0 02		               bne  nopage
.091d	e6 fc		               inc  zpage1+1
.091f	68		nopage         pla
.0920	28		               plp
.0921	60		               rts
.0922			deczp1
.0922	08		               php
.0923	48		               pha
.0924	a5 fb		               lda  zpage1
.0926	d0 02		               bne  nopage
.0928	c6 fc		               dec  zpage1+1
.092a	c6 fb		nopage         dec  zpage1
.092c	28		               plp
.092d	60		               rts
.092e			inczp2
.092e	08		               php
.092f	48		               pha
.0930	e6 fd		               inc  zpage2
.0932	d0 02		               bne  nopage
.0934	e6 fe		               inc  zpage2+1
.0936	68		nopage         pla
.0937	28		               plp
.0938	60		               rts
.0939			deczp2
.0939	08		               php
.093a	48		               pha
.093b	a5 fd		               lda  zpage2
.093d	d0 02		               bne  nopage
.093f	c6 fe		               dec  zpage2+1
.0941	c6 fd		nopage         dec  zpage2
.0943	28		               plp
.0944	60		               rts
.0945			savezp1
.0945	08		               php
.0946	48		               pha
.0947	a5 fb		               lda  zpage1
.0949	8d c1 09	               sta  zp1
.094c	a5 fc		               lda  zpage1+1
.094e	8d c2 09	               sta  zp1+1
.0951	68		               pla
.0952	28		               plp
.0953	60		               rts
.0954			restzp1
.0954	08		               php
.0955	48		               pha
.0956	ad c1 09	               lda zp1
.0959	85 fb		               sta zpage1
.095b	ad c2 09	               lda zp1+1
.095e	85 fc		               sta zpage1+1
.0960	68		               pla
.0961	28		               plp
.0962	60		               rts
.0963			savezp2
.0963	08		         php
.0964	48		         pha
.0965	a5 fd		         lda zpage2
.0967	8d c3 09	         sta zp2
.096a	a5 fe		         lda zpage2+1
.096c	8d c4 09	         sta zp2+1
.096f	68		         pla
.0970	28		         plp
.0971	60		         rts
.0972			restzp2
.0972	08		                php
.0973	48		                pha
.0974	ad c3 09	                lda  zp2
.0977	85 fd		                sta  zpage2
.0979	ad c4 09	                lda  zp2+1
.097c	85 fe		                sta  zpage2+1
.097e	68		                pla
.097f	28		                plp
.0980	60		                rts
.0981			xy2addr
.0981	08		                php
.0982	48		                pha
.0983	8a		                txa
.0984	48		                pha
.0985	98		                tya
.0986	48		                pha
.0987	ad bc 09	                lda     addr1+1
.098a	8d be 09	                sta     addr2+1
.098d	ad bb 09	                lda     addr1
.0990	8d bd 09	                sta     addr2
.0993	c0 00		                cpy     #$00
.0995	f0 0f		                beq     addx
.0997	18		moreline        clc
.0998	6d ba 09	                adc     ymult
.099b	90 03		                bcc     norepy
.099d	ee be 09	                inc     addr2+1
.09a0	8d bd 09	norepy          sta     addr2
.09a3	88		                dey
.09a4	d0 f1		                bne     moreline
.09a6	8a		addx            txa
.09a7	18		                clc
.09a8	6d bd 09	                adc     addr2
.09ab	90 03		                bcc     thatsit
.09ad	ee be 09	                inc     addr2+1
.09b0	8d bd 09	thatsit         sta     addr2
.09b3	68		                pla
.09b4	a8		                tay
.09b5	68		                pla
.09b6	aa		                tax
.09b7	68		                pla
.09b8	28		                plp
.09b9	60		                rts
>09ba	28		ymult          .byte     40
>09bb	00 00		addr1          .word     $0000
>09bd	00 00		addr2          .word     $0000
>09bf	00 00		bytecnt        .word     $0000
>09c1	00 00		zp1        .word   $0000
>09c3	00 00		zp2        .word   $0000

;******  Return to file: mainsd.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_hex.asm"

>09c5	01		a2hexcol       .byte     1    ; pour aputscxy
.09c6			a2hexpos
>09c6	00		a2hexpx        .byte     0    ; pour aputsxy
>09c7	00		a2hexpy        .byte     0
>09c8	24		a2hexstr       .byte     "$"  ; pour aputs
>09c9	00 00		               .word     $00
>09cb	00 00		               .word     $00
>09cd	00		               .byte     0    ; 0 end string
.09ce			nib2hex
.09ce	08		               php
.09cf	29 0f		               and  #$0f
.09d1	f8		               sed
.09d2	18		               clc
.09d3	69 90		               adc  #$90
.09d5	69 40		               adc  #$40
.09d7	d8		               cld
.09d8	28		               plp
.09d9	60		               rts
.09da			lsra4bits
.09da	08		               php
.09db	4a		               lsr
.09dc	4a		               lsr
.09dd	4a		               lsr
.09de	4a		               lsr
.09df	28		               plp
.09e0	60		               rts
.09e1			a2hex
.09e1	08		               php
.09e2	48		               pha
.09e3	48		               pha
.09e4	20 da 09	               jsr  lsra4bits
.09e7	20 ce 09	               jsr  nib2hex
.09ea	8d c9 09	               sta  a2hexstr+1
.09ed	68		               pla
.09ee	20 ce 09	               jsr  nib2hex
.09f1	8d ca 09	               sta  a2hexstr+2
.09f4	a9 00		               lda  #$00
.09f6	8d cb 09	               sta  a2hexstr+3
.09f9	68		               pla
.09fa	28		               plp
.09fb	60		               rts
.09fc			xy2hex
.09fc	20 10 08	               jsr  push
.09ff	20 e1 09	               jsr  a2hex
.0a02	98		               tya
.0a03	48		               pha
.0a04	20 da 09	               jsr  lsra4bits
.0a07	20 ce 09	               jsr  nib2hex
.0a0a	8d cb 09	               sta  a2hexstr+3
.0a0d	68		               pla
.0a0e	20 ce 09	               jsr  nib2hex
.0a11	8d cc 09	               sta  a2hexstr+4
.0a14	a9 00		               lda  #$00
.0a16	8d cd 09	               sta  a2hexstr+5
.0a19	20 4f 08	               jsr  pop
.0a1c			atobin
.0a1c	20 10 08	               jsr     push
.0a1f	a2 08		               ldx     #8
.0a21	a0 00		               ldy     #0
.0a23	2a		nextbit        rol
.0a24	48		               pha
.0a25	29 01		               and     #1
.0a27	20 ce 09	               jsr     nib2hex
.0a2a	99 3b 0a	               sta     abin,y
.0a2d	68		               pla
.0a2e	c8		               iny
.0a2f	ca		               dex
.0a30	d0 f1		               bne     nextbit
.0a32	a9 00		               lda     #0
.0a34	99 3b 0a	               sta     abin,y
.0a37	20 4f 08	               jsr     pull
.0a3a	60		               rts
>0a3b	00 00 00 00	abin           .byte 0,0,0,0,0,0,0,0,0
>0a3f	00 00 00 00 00
.0a44			putabin
.0a44	20 1c 0a	               jsr     atobin
.0a47	20 10 08	               jsr     push
.0a4a	a2 3b		               ldx     #<abin
.0a4c	a0 0a		               ldy     #>abin
.0a4e	20 8e 0a	               jsr     puts
.0a51	20 4f 08	               jsr     pop
.0a54	60		               rts
.0a55			putabinfmt
.0a55	08		               php
.0a56	48		               pha
.0a57	a9 25		               lda     #"%"
.0a59	20 8b 0a	               jsr     putch
.0a5c	68		               pla
.0a5d	20 44 0a	               jsr     putabin
.0a60	28		               plp
.0a61	60		               rts
.0a62			putabinxy
.0a62	20 a0 0a	               jsr     gotoxy
.0a65	20 44 0a	               jsr     putabin
.0a68	60		               rts
.0a69			putabinfmtxy
.0a69	20 a0 0a	               jsr     gotoxy
.0a6c	20 55 0a	               jsr     putabinfmt
.0a6f	60		               rts

;******  Return to file: mainsd.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_sd.asm"

=$00			sd_bkcol       =    %00000000
=$00			sd_bkcol0      =    %00000000
=$40			sd_bkcol1      =    %01000000
=$80			sd_bkcol2      =    %10000000
=$c0			sd_bkcol3      =    %11000000
=$00			bkcol          =    sd_bkcol
=$00			bkcol0         =    sd_bkcol0
=$40			bkcol1         =    sd_bkcol1
=$80			bkcol2         =    sd_bkcol2
=$c0			bkcol3         =    sd_bkcol3
.0a70	4c be 0a	scrmaninit     jmp     nowhere
.0a73	4c be 0a	curshome       jmp     nowhere
.0a76	4c be 0a	incscrptr      jmp     nowhere
.0a79	4c be 0a	synccolptr     jmp     nowhere
.0a7c	4c be 0a	cls            jmp     nowhere
.0a7f	4c be 0a	setinverse     jmp     nowhere
.0a82	4c be 0a	clrinverse     jmp     nowhere
.0a85	4c be 0a	z2putch        jmp     nowhere
.0a88	4c be 0a	z2puts         jmp     nowhere
.0a8b	4c be 0a	putch          jmp     nowhere
.0a8e	4c be 0a	puts           jmp     nowhere
.0a91	4c be 0a	putsxy         jmp     nowhere
.0a94	4c be 0a	putscxy        jmp     nowhere
.0a97	4c be 0a	setcurcol      jmp     nowhere
.0a9a	4c be 0a	setbakcols     jmp     nowhere
.0a9d	4c be 0a	setbkcol       jmp     nowhere
.0aa0	4c be 0a	gotoxy         jmp     nowhere
.0aa3	4c be 0a	saddscrptr     jmp     nowhere
.0aa6	4c be 0a	scrptr2str     jmp     nowhere
.0aa9	4c be 0a	scrptr2zp1     jmp     nowhere
.0aac	4c be 0a	colptr2zp1     jmp     nowhere
.0aaf	4c be 0a	scrptr2zp2     jmp     nowhere
.0ab2	4c be 0a	colptr2zp2     jmp     nowhere
.0ab5	4c be 0a	putrahex       jmp     nowhere
.0ab8	4c be 0a	putrahexxy     jmp     nowhere
.0abb	4c be 0a	putrahexcxy    jmp     nowhere
.0abe	60		nowhere        rts
>0abf	00 00		scrptr          .word   $00
>0ac1	00 00		colptr          .word   $00
>0ac3	00		curcol          .byte   $00
>0ac4	0c		brdcol          .byte   $0c
>0ac5	00		bakcol          .byte   $00
>0ac6	00		bakcol0         .byte   vnoir           ;$0b
>0ac7	02		bakcol1         .byte   vrouge          ;$0b
>0ac8	05		bakcol2         .byte   vvert           ;$0b
>0ac9	06		bakcol3         .byte   vbleu           ;$0b
>0aca	00		inverse         .byte   $00
>0acb	00 00 00 00	scraddr         .byte   0,0,0,0,0
>0acf	00
>0ad0	00 00 00 00	coladdr         .byte   0,0,0,0,0
>0ad4	00
=$0abf			sd_scrptr       =    scrptr
=$0ac1			sd_colptr       =    colptr
=$0ac3			sd_curcol       =    curcol
=$0ac4			sd_brdcol       =    brdcol
=$0ac5			sd_bakcol       =    bakcol
=$0ac6			sd_bakcol0      =    bakcol0
=$0ac7			sd_bakcol1      =    bakcol1
=$0ac8			sd_bakcol2      =    bakcol2
=$0ac9			sd_bakcol3      =    bakcol3
=$0aca			sd_inverse      =    inverse
=$0acb			sd_scraddr      =    scraddr
=$0ad0			sd_coladdr      =    coladdr
=$0ad5			setvectors   =       sd_setvectors
.0ad5			sd_setvectors
.0ad5	20 10 08	               jsr  push
.0ad8	a9 4c		               lda     #$4c
.0ada	8d 70 0a	               sta     scrmaninit
.0add	a9 62		               lda     #<sd_scrmaninit
.0adf	8d 71 0a	               sta     scrmaninit+1
.0ae2	a9 0c		               lda     #>sd_scrmaninit
.0ae4	8d 72 0a	               sta     scrmaninit+2
.0ae7	a9 4c		               lda     #$4c
.0ae9	8d 73 0a	               sta     curshome
.0aec	a9 70		               lda     #<sd_curshome
.0aee	8d 74 0a	               sta     curshome+1
.0af1	a9 0c		               lda     #>sd_curshome
.0af3	8d 75 0a	               sta     curshome+2
.0af6	a9 4c		               lda     #$4c
.0af8	8d 76 0a	               sta     incscrptr
.0afb	a9 9a		               lda     #<sd_incscrptr
.0afd	8d 77 0a	               sta     incscrptr+1
.0b00	a9 0c		               lda     #>sd_incscrptr
.0b02	8d 78 0a	               sta     incscrptr+2
.0b05	a9 4c		               lda     #$4c
.0b07	8d 79 0a	               sta     synccolptr
.0b0a	a9 ad		               lda     #<sd_synccolptr
.0b0c	8d 7a 0a	               sta     synccolptr+1
.0b0f	a9 0c		               lda     #>sd_synccolptr
.0b11	8d 7b 0a	               sta     synccolptr+2
.0b14	a9 4c		               lda     #$4c
.0b16	8d 7c 0a	               sta     cls
.0b19	a9 c2		               lda     #<sd_cls
.0b1b	8d 7d 0a	               sta     cls+1
.0b1e	a9 0c		               lda     #>sd_cls
.0b20	8d 7e 0a	               sta     cls+2
.0b23	a9 4c		               lda     #$4c
.0b25	8d 7f 0a	               sta     setinverse
.0b28	a9 1a		               lda     #<sd_setinverse
.0b2a	8d 80 0a	               sta     setinverse+1
.0b2d	a9 0d		               lda     #>sd_setinverse
.0b2f	8d 81 0a	               sta     setinverse+2
.0b32	a9 4c		               lda     #$4c
.0b34	8d 82 0a	               sta     clrinverse
.0b37	a9 24		               lda     #<sd_clrinverse
.0b39	8d 83 0a	               sta     clrinverse+1
.0b3c	a9 0d		               lda     #>sd_clrinverse
.0b3e	8d 84 0a	               sta     clrinverse+2
.0b41	a9 4c		               lda     #$4c
.0b43	8d 85 0a	               sta     z2putch
.0b46	a9 2e		               lda     #<sd_z2putch
.0b48	8d 86 0a	               sta     z2putch+1
.0b4b	a9 0d		               lda     #>sd_z2putch
.0b4d	8d 87 0a	               sta     z2putch+2
.0b50	a9 4c		                lda     #$4c
.0b52	8d 88 0a	                sta     z2puts
.0b55	a9 3c		                lda     #<sd_z2puts
.0b57	8d 89 0a	                sta     z2puts+1
.0b5a	a9 0d		                lda     #>sd_z2puts
.0b5c	8d 8a 0a	                sta     z2puts+2
.0b5f	a9 4c		                lda     #$4c
.0b61	8d 8b 0a	                sta     putch
.0b64	a9 52		                lda     #<sd_putch
.0b66	8d 8c 0a	                sta     putch+1
.0b69	a9 0d		                lda     #>sd_putch
.0b6b	8d 8d 0a	                sta     putch+2
.0b6e	a9 4c		                lda     #$4c
.0b70	8d 8e 0a	                sta     puts
.0b73	a9 76		                lda     #<sd_puts
.0b75	8d 8f 0a	                sta     puts+1
.0b78	a9 0d		                lda     #>sd_puts
.0b7a	8d 90 0a	                sta     puts+2
.0b7d	a9 4c		                lda     #$4c
.0b7f	8d 91 0a	                sta     putsxy
.0b82	a9 8a		                lda     #<sd_putsxy
.0b84	8d 92 0a	                sta     putsxy+1
.0b87	a9 0d		                lda     #>sd_putsxy
.0b89	8d 93 0a	                sta     putsxy+2
.0b8c	a9 4c		                lda     #$4c
.0b8e	8d 94 0a	                sta     putscxy
.0b91	a9 af		                lda     #<sd_putscxy
.0b93	8d 95 0a	                sta     putscxy+1
.0b96	a9 0d		                lda     #>sd_putscxy
.0b98	8d 96 0a	                sta     putscxy+2
.0b9b	a9 4c		                lda     #$4c
.0b9d	8d 97 0a	                sta     setcurcol
.0ba0	a9 e5		                lda     #<sd_setcurcol
.0ba2	8d 98 0a	                sta     setcurcol+1
.0ba5	a9 0d		                lda     #>sd_setcurcol
.0ba7	8d 99 0a	                sta     setcurcol+2
.0baa	a9 4c		                lda     #$4c
.0bac	8d 9a 0a	                sta     setbakcols
.0baf	a9 eb		                lda     #<sd_setbakcols
.0bb1	8d 9b 0a	                sta     setbakcols+1
.0bb4	a9 0d		                lda     #>sd_setbakcols
.0bb6	8d 9c 0a	                sta     setbakcols+2
.0bb9	a9 4c		                lda     #$4c
.0bbb	8d 9d 0a	                sta     setbkcol
.0bbe	a9 fc		                lda     #<sd_setbkcol
.0bc0	8d 9e 0a	                sta     setbkcol+1
.0bc3	a9 0d		                lda     #>sd_setbkcol
.0bc5	8d 9f 0a	                sta     setbkcol+2
.0bc8	a9 4c		                lda     #$4c
.0bca	8d a0 0a	                sta     gotoxy
.0bcd	a9 14		                lda     #<sd_gotoxy
.0bcf	8d a1 0a	                sta     gotoxy+1
.0bd2	a9 0e		                lda     #>sd_gotoxy
.0bd4	8d a2 0a	                sta     gotoxy+2
.0bd7	a9 4c		                lda     #$4c
.0bd9	8d a3 0a	                sta     saddscrptr
.0bdc	a9 32		                lda     #<sd_saddscrptr
.0bde	8d a4 0a	                sta     saddscrptr+1
.0be1	a9 0e		                lda     #>sd_saddscrptr
.0be3	8d a5 0a	                sta     saddscrptr+2
.0be6	a9 4c		                lda     #$4c
.0be8	8d a6 0a	                sta     scrptr2str
.0beb	a9 43		                lda     #<sd_scrptr2str
.0bed	8d a7 0a	                sta     scrptr2str+1
.0bf0	a9 0e		                lda     #>sd_scrptr2str
.0bf2	8d a8 0a	                sta     scrptr2str+2
.0bf5	a9 4c		                lda     #$4c
.0bf7	8d a9 0a	                sta     scrptr2zp1
.0bfa	a9 95		                lda     #<sd_scrptr2zp1
.0bfc	8d aa 0a	                sta     scrptr2zp1+1
.0bff	a9 0e		                lda     #>sd_scrptr2zp1
.0c01	8d ab 0a	                sta     scrptr2zp1+2
.0c04	a9 4c		                lda     #$4c
.0c06	8d ac 0a	                sta     colptr2zp1
.0c09	a9 a4		                lda     #<sd_colptr2zp1
.0c0b	8d ad 0a	                sta     colptr2zp1+1
.0c0e	a9 0e		                lda     #>sd_colptr2zp1
.0c10	8d ae 0a	                sta     colptr2zp1+2
.0c13	a9 4c		                lda     #$4c
.0c15	8d af 0a	                sta     scrptr2zp2
.0c18	a9 b3		                lda     #<sd_scrptr2zp2
.0c1a	8d b0 0a	                sta     scrptr2zp2+1
.0c1d	a9 0e		                lda     #>sd_scrptr2zp2
.0c1f	8d b1 0a	                sta     scrptr2zp2+2
.0c22	a9 4c		                lda     #$4c
.0c24	8d b2 0a	                sta     colptr2zp2
.0c27	a9 c2		                lda     #<sd_colptr2zp2
.0c29	8d b3 0a	                sta     colptr2zp2+1
.0c2c	a9 0e		                lda     #>sd_colptr2zp2
.0c2e	8d b4 0a	                sta     colptr2zp2+2
.0c31	a9 4c		                lda     #$4c
.0c33	8d b5 0a	                sta     putrahex
.0c36	a9 d1		                lda     #<sd_putrahex
.0c38	8d b6 0a	                sta     putrahex+1
.0c3b	a9 0e		                lda     #>sd_putrahex
.0c3d	8d b7 0a	                sta     putrahex+2
.0c40	a9 4c		                lda     #$4c
.0c42	8d b8 0a	                sta     putrahexxy
.0c45	a9 e0		                lda     #<sd_putrahexxy
.0c47	8d b9 0a	                sta     putrahexxy+1
.0c4a	a9 0e		                lda     #>sd_putrahexxy
.0c4c	8d ba 0a	                sta     putrahexxy+2
.0c4f	a9 4c		                lda     #$4c
.0c51	8d bb 0a	                sta     putrahexcxy
.0c54	a9 ef		                lda     #<sd_putrahexcxy
.0c56	8d bc 0a	                sta     putrahexcxy+1
.0c59	a9 0e		                lda     #>sd_putrahexcxy
.0c5b	8d bd 0a	                sta     putrahexcxy+2
.0c5e	20 4f 08	                jsr     pop
.0c61	60		                rts
.0c62			sd_scrmaninit
.0c62	08		                php
.0c63	48		                pha
.0c64	a9 17		                lda     #%00010111
.0c66	8d 18 d0	                sta     $d018
.0c69	ad 11 d0	                lda     $d011
.0c6c	29 bf		                and     #%10111111
.0c6e	68		                pla
.0c6f	28		                plp
.0c70			sd_curshome
.0c70	08		                php
.0c71	48		                pha
.0c72	a9 00		                lda     #$00
.0c74	8d bf 0a	                sta     sd_scrptr
.0c77	a9 04		                lda     #$04
.0c79	8d c0 0a	                sta     sd_scrptr+1
.0c7c	20 ad 0c	                jsr     sd_synccolptr
.0c7f	ad c6 0a	                lda     sd_bakcol0
.0c82	8d 21 d0	                sta     $d021
.0c85	ad c7 0a	                lda     sd_bakcol1
.0c88	8d 22 d0	                sta     $d022
.0c8b	ad c8 0a	                lda     sd_bakcol2
.0c8e	8d 23 d0	                sta     $d023
.0c91	ad c9 0a	                lda     sd_bakcol3
.0c94	8d 24 d0	                sta     $d024
.0c97	68		                pla
.0c98	28		                plp
.0c99	60		                rts
.0c9a			sd_incscrptr
.0c9a	08		                php
.0c9b	48		                pha
.0c9c	ee bf 0a	                inc     sd_scrptr
.0c9f	ad bf 0a	                lda     sd_scrptr
.0ca2	d0 03		                bne     norep
.0ca4	ee c0 0a	                inc     sd_scrptr+1
.0ca7	20 ad 0c	norep           jsr     sd_synccolptr
.0caa	68		                pla
.0cab	28		                plp
.0cac	60		                rts
.0cad			sd_synccolptr
.0cad	08		                php
.0cae	48		                pha
.0caf	ad bf 0a	                lda     sd_scrptr
.0cb2	8d c1 0a	                sta     sd_colptr
.0cb5	ad c0 0a	                lda     sd_scrptr+1
.0cb8	29 03		                and     #%00000011
.0cba	09 d8		                ora     #%11011000
.0cbc	8d c2 0a	                sta     sd_colptr+1
.0cbf	68		                pla
.0cc0	28		                plp
.0cc1	60		                rts
.0cc2			sd_cls
.0cc2	20 10 08	                jsr     push
.0cc5	a9 00		                lda     #$00
.0cc7	8d bf 0a	                sta     sd_scrptr
.0cca	a9 04		                lda     #$04
.0ccc	8d c0 0a	                sta     sd_scrptr+1
.0ccf	20 ad 0c	                jsr     sd_synccolptr
.0cd2	20 45 09	                jsr     savezp1
.0cd5	20 95 0e	                jsr     sd_scrptr2zp1
.0cd8	ad c4 0a	                lda     sd_brdcol
.0cdb	8d 20 d0	                sta     vborder
.0cde	ad c5 0a	                lda     sd_bakcol
.0ce1	8d 21 d0	                sta     vbkgrnd
.0ce4	a9 20		                lda     #$20
.0ce6	a2 04		                ldx     #4
.0ce8	a0 00		nextline        ldy     #0
.0cea	91 fb		nextcar         sta     (zpage1),y
.0cec	a5 fc		                lda     zpage1+1
.0cee	48		                pha
.0cef	29 03		                and     #%00000011
.0cf1	09 d8		                ora     #%11011000
.0cf3	85 fc		                sta     zpage1+1
.0cf5	a9 00		                lda     #0
.0cf7	91 fb		                sta     (zpage1),y
.0cf9	68		                pla
.0cfa	85 fc		                sta     zpage1+1
.0cfc	a9 20		                lda     #$20
.0cfe	88		                dey
.0cff	d0 e9		                bne     nextcar
.0d01	e6 fc		                inc     zpage1+1
.0d03	ca		                dex
.0d04	d0 e4		                bne     nextcar
.0d06	a9 00		                lda     #$00
.0d08	8d bf 0a	                sta     sd_scrptr
.0d0b	a9 04		                lda     #$04
.0d0d	8d c0 0a	                sta     sd_scrptr+1
.0d10	20 ad 0c	                jsr     sd_synccolptr
.0d13	20 54 09	                jsr     restzp1
.0d16	20 4f 08	                jsr     pop
.0d19	60		                rts
.0d1a			sd_setinverse
.0d1a	08		                php
.0d1b	48		                pha
.0d1c	a9 80		                lda     #%10000000
.0d1e	8d ca 0a	                sta     sd_inverse
.0d21	68		                pla
.0d22	28		                plp
.0d23	60		                rts
.0d24			sd_clrinverse
.0d24	08		                php
.0d25	48		                pha
.0d26	a9 00		                lda     #%00000000
.0d28	8d ca 0a	                sta     sd_inverse
.0d2b	68		                pla
.0d2c	28		                plp
.0d2d	60		                rts
.0d2e			sd_z2putch
.0d2e	20 10 08	                jsr     push
.0d31	a0 00		                ldy     #$0
.0d33	b1 fd		                lda     (zpage2),y
.0d35	20 52 0d	                jsr     sd_putch
.0d38	20 4f 08	                jsr     pop
.0d3b	60		                rts
.0d3c			sd_z2puts
.0d3c	20 10 08	                jsr     push
.0d3f	a0 00		                ldy     #$0
.0d41	b1 fd		nextcar         lda     (zpage2),y
.0d43	f0 09		                beq     endstr
.0d45	20 2e 0d	                jsr     sd_z2putch
.0d48	20 2e 09	                jsr     inczp2
.0d4b	4c 41 0d	                jmp     nextcar
.0d4e	20 4f 08	endstr          jsr     pop
.0d51	60		                rts
.0d52			sd_putch
.0d52	20 10 08	                jsr     push            ; On sauvegarde les registres
.0d55	20 45 09	                jsr     savezp1         ; On sauve le zp1 du progamme appelant
.0d58	20 95 0e	                jsr     sd_scrptr2zp1   ; On place le pointeur d'écran sur zp1
.0d5b	a0 00		                ldy     #0              ; On met Y à 0
.0d5d	0d ca 0a	                ora     sd_inverse
.0d60	91 fb		                sta     (zpage1),y      ; On affiche le caractèere
.0d62	ae c2 0a	                ldx     sd_colptr+1     ; On place le MSB du pointeur de couleur
.0d65	86 fc		                stx     zpage1+1        ; dans le MSB du zp1
.0d67	ad c3 0a	                lda     sd_curcol       ; on charge la couleur voulu dans
.0d6a	91 fb		                sta     (zpage1),y      ; la ram de couleur
.0d6c	20 9a 0c	                jsr     sd_incscrptr    ; On incrémente le pointeur d'écran
.0d6f	20 54 09	                jsr     restzp1         ; On récupèere le zpe du programme appelant
.0d72	20 4f 08	                jsr     pop             ; on replace tous les registres
.0d75	60		                rts
.0d76			sd_puts
.0d76	20 10 08	                jsr     push
.0d79	20 63 09	                jsr     savezp2
.0d7c	86 fd		                stx     zpage2
.0d7e	84 fe		                sty     zpage2+1
.0d80	20 3c 0d	                jsr     sd_z2puts
.0d83	20 72 09	getout          jsr     restzp2
.0d86	20 4f 08	                jsr     pop
.0d89	60		                rts
.0d8a			sd_putsxy
.0d8a	20 10 08	                jsr     push            ; On sauvegarde les registres
.0d8d	20 63 09	                jsr     savezp2         ; et le zp2
.0d90	86 fd		                stx     zpage2          ; On place l'adresse de la
.0d92	84 fe		                sty     zpage2+1        ; X = MSB, Y = LSB
.0d94	a0 00		                ldy     #0              ; On place le compteur
.0d96	b1 fd		                lda     (zpage2),y      ; Lecture de la position X
.0d98	aa		                tax                     ; de A à X
.0d99	20 2e 09	                jsr     inczp2       ; On déplace le pointeur
.0d9c	b1 fd		                lda     (zpage2),y      ;
.0d9e	a8		                tay                     ; de A à Y
.0d9f	20 14 0e	                jsr     sd_gotoxy       ; sd_gotoxy prend X = colonne,
.0da2	20 2e 09	                jsr     inczp2
.0da5	20 3c 0d	                jsr     sd_z2puts
.0da8	20 72 09	                jsr     restzp2
.0dab	20 4f 08	                jsr     pop
.0dae	60		                rts
.0daf			sd_putscxy
.0daf	20 10 08	                jsr     push            ; On sauvegarde les registres et le zp2
.0db2	20 63 09	                jsr     savezp2
.0db5	86 fd		                stx     zpage2          ; On place l'adresse de la chaine dans le zp2
.0db7	84 fe		                sty     zpage2+1        ; X = MSB, Y = LSB
.0db9	a0 00		                ldy     #0              ; On place le compteur
.0dbb	b1 fd		                lda     (zpage2),y      ; on charge la couleur
.0dbd	20 e5 0d	                jsr     sd_setcurcol    ; et on la définie
.0dc0	20 2e 09	                jsr     inczp2       ; On pointe le prochain byte
.0dc3	b1 fd		                lda     (zpage2),y      ; Lecture de la position X
.0dc5	29 c0		                and     #$c0
.0dc7	85 00		                sta     sd_bkcol
.0dc9	20 2e 09	                jsr     inczp2       ; On déplace le pointeur
.0dcc	b1 fd		                lda     (zpage2),y      ; Lecture de la position X
.0dce	aa		                tax                     ; de A à X
.0dcf	20 2e 09	                jsr     inczp2       ; On déplace le pointeur
.0dd2	b1 fd		                lda     (zpage2),y      ;
.0dd4	a8		                tay                     ; de A à Y
.0dd5	20 14 0e	                jsr     sd_gotoxy       ; sd_gotoxy prend X = colonne, y = ligne
.0dd8	20 2e 09	                jsr     inczp2
.0ddb	20 3c 0d	                jsr     sd_z2puts
.0dde	20 72 09	                jsr     restzp2
.0de1	20 4f 08	                jsr     pop
.0de4	60		                rts
.0de5			sd_setcurcol
.0de5	08		                php
.0de6	8d c3 0a	                sta  sd_curcol
.0de9	28		                plp
.0dea	60		                rts
.0deb			sd_setbakcols
.0deb	08		                php
.0dec	48		                pha
.0ded	8a		                txa
.0dee	29 03		                and     #$3
.0df0	aa		                tax
.0df1	68		                pla
.0df2	48		                pha
.0df3	9d c7 0a	                sta     sd_bakcol1,x
.0df6	9d 21 d0	                sta     $d021,x
.0df9	68		                pla
.0dfa	28		                plp
.0dfb	60		                rts
.0dfc			sd_setbkcol
.0dfc	08		                php
.0dfd	48		                pha
.0dfe	29 c0		                and     #$c0
.0e00	85 00		                sta     sd_bkcol
.0e02	4a		                lsr
.0e03	4a		                lsr
.0e04	4a		                lsr
.0e05	4a		                lsr
.0e06	4a		                lsr
.0e07	4a		                lsr
.0e08	29 03		                and     #%00000011
.0e0a	8a		                txa
.0e0b	bd c7 0a	                lda     sd_bakcol1,x
.0e0e	8d c5 0a	                sta     sd_bakcol
.0e11	68		                pla
.0e12	28		                plp
.0e13	60		                rts
.0e14			sd_gotoxy
.0e14	20 10 08	                jsr     push
.0e17	20 70 0c	                jsr     sd_curshome
.0e1a	c0 00		yagain          cpy     #0
.0e1c	f0 09		                beq     setx
.0e1e	a9 28		                lda     #40
.0e20	20 32 0e	                jsr     sd_saddscrptr
.0e23	88		                dey
.0e24	4c 1a 0e	                jmp     yagain
.0e27	8a		setx            txa
.0e28	20 32 0e	                jsr     sd_saddscrptr
.0e2b	20 ad 0c	                jsr     sd_synccolptr
.0e2e	20 4f 08	                jsr     pop
.0e31	60		                rts
.0e32			sd_saddscrptr
.0e32	08		                php
.0e33	48		                pha
.0e34	18		                clc
.0e35	6d bf 0a	                adc     sd_scrptr
.0e38	8d bf 0a	                sta     sd_scrptr
.0e3b	90 03		                bcc     norep
.0e3d	ee c0 0a	                inc     sd_scrptr+1
.0e40	68		norep           pla
.0e41	28		                plp
.0e42	60		                rts
.0e43			sd_scrptr2str
.0e43	20 10 08	                jsr     push
.0e46	ad c0 0a	                lda     sd_scrptr+1
.0e49	48		                pha
.0e4a	20 da 09	                jsr     lsra4bits
.0e4d	20 ce 09	                jsr     nib2hex
.0e50	8d cb 0a	                sta     sd_scraddr
.0e53	68		                pla
.0e54	20 da 09	                jsr     lsra4bits
.0e57	20 ce 09	                jsr     nib2hex
.0e5a	8d cc 0a	                sta     sd_scraddr+1
.0e5d	ad c0 0a	                lda     sd_scrptr+1
.0e60	48		                pha
.0e61	20 da 09	                jsr     lsra4bits
.0e64	20 ce 09	                jsr     nib2hex
.0e67	8d cb 0a	                sta     sd_scraddr
.0e6a	68		                pla
.0e6b	20 da 09	                jsr     lsra4bits
.0e6e	20 ce 09	                jsr     nib2hex
.0e71	8d cc 0a	                sta     sd_scraddr+1
.0e74	ad bf 0a	                lda     sd_scrptr
.0e77	48		                pha
.0e78	20 da 09	                jsr     lsra4bits
.0e7b	20 ce 09	                jsr     nib2hex
.0e7e	8d cd 0a	                sta     sd_scraddr+2
.0e81	8d d2 0a	                sta     sd_coladdr+2
.0e84	68		                pla
.0e85	20 da 09	                jsr     lsra4bits
.0e88	20 ce 09	                jsr     nib2hex
.0e8b	8d ce 0a	                sta     sd_scraddr+3
.0e8e	8d d3 0a	                sta     sd_coladdr+3
.0e91	20 4f 08	                jsr     pop
.0e94	60		                rts
.0e95			sd_scrptr2zp1
.0e95	08		                php
.0e96	48		                pha
.0e97	ad bf 0a	                lda     sd_scrptr
.0e9a	85 fb		                sta     zpage1
.0e9c	ad c0 0a	                lda     sd_scrptr+1
.0e9f	85 fc		                sta     zpage1+1
.0ea1	68		                pla
.0ea2	28		                plp
.0ea3	60		                rts
.0ea4			sd_colptr2zp1
.0ea4	08		                php
.0ea5	48		                pha
.0ea6	ad c1 0a	                lda     sd_colptr
.0ea9	85 fb		                sta     zpage1
.0eab	ad c2 0a	                lda     sd_colptr+1
.0eae	85 fc		                sta     zpage1+1
.0eb0	68		                pla
.0eb1	28		                plp
.0eb2	60		                rts
.0eb3			sd_scrptr2zp2
.0eb3	08		                php
.0eb4	48		                pha
.0eb5	ad bf 0a	                lda     sd_scrptr
.0eb8	85 fd		                sta     zpage2
.0eba	ad c0 0a	                lda     sd_scrptr+1
.0ebd	85 fe		                sta     zpage2+1
.0ebf	68		                pla
.0ec0	28		                plp
.0ec1	60		                rts
.0ec2			sd_colptr2zp2
.0ec2	08		                php
.0ec3	48		                pha
.0ec4	ad c1 0a	                lda     sd_colptr
.0ec7	85 fd		                sta     zpage2
.0ec9	ad c2 0a	                lda     sd_colptr+1
.0ecc	85 fe		                sta     zpage2+1
.0ece	68		                pla
.0ecf	28		                plp
.0ed0	60		                rts
.0ed1			sd_putrahex
.0ed1	08		                php
.0ed2	48		                pha
.0ed3	20 e1 09	                jsr     a2hex
.0ed6	a2 c5		                ldx     #<a2hexcol
.0ed8	a0 09		                ldy     #>a2hexcol
.0eda	20 76 0d	                jsr     sd_puts
.0edd	68		                pla
.0ede	28		                plp
.0edf	60		                rts
.0ee0			sd_putrahexxy
.0ee0	08		                php
.0ee1	48		                pha
.0ee2	20 e1 09	                jsr     a2hex
.0ee5	a9 c6		                lda     #<a2hexpos
.0ee7	a0 09		                ldy     #>a2hexpos
.0ee9	20 8a 0d	                jsr     sd_putsxy
.0eec	68		                pla
.0eed	28		                plp
.0eee	60		                rts
.0eef			sd_putrahexcxy
.0eef	08		                php
.0ef0	68		                pla
.0ef1	20 e1 09	                jsr     a2hex
.0ef4	a9 c6		                lda     #<a2hexpos
.0ef6	a0 09		                ldy     #>a2hexpos
.0ef8	20 af 0d	                jsr     sd_putscxy
.0efb	68		                pla
.0efc	28		                plp
.0efd	60		                rts

;******  Return to file: mainsd.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_showregs.asm"

.0efe			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=$c0			bkcol   =   bkcol3
.0efe	08		                php
.0eff	8d b0 10	                sta  rega
.0f02	68		                pla
.0f03	8d b3 10	                sta  regp
.0f06	8e b1 10	                stx  regx
.0f09	8c b2 10	                sty  regy
.0f0c	ba		                tsx
.0f0d	8e b4 10	                stx  regs
.0f10	68		                pla
.0f11	8d b6 10	                sta  regpcl
.0f14	8d b7 10	                sta  regpcl2
.0f17	68		                pla
.0f18	8d b5 10	                sta  regpch
.0f1b	ad b0 10	                lda  rega
.0f1e	48		                pha
.0f1f	20 ce 09	                jsr  nib2hex
.0f22	8d 53 10	                sta  vala+1
.0f25	68		                pla
.0f26	20 da 09	                jsr  lsra4bits
.0f29	20 ce 09	                jsr  nib2hex
.0f2c	8d 52 10	                sta  vala
.0f2f	ad b2 10	                lda  regy
.0f32	48		                pha
.0f33	20 ce 09	                jsr  nib2hex
.0f36	8d 69 10	                sta  valy+1
.0f39	68		                pla
.0f3a	20 da 09	                jsr  lsra4bits
.0f3d	20 ce 09	                jsr  nib2hex
.0f40	8d 68 10	                sta  valy
.0f43	ad b1 10	                lda  regx
.0f46	48		                pha
.0f47	20 ce 09	                jsr  nib2hex
.0f4a	8d 5e 10	                sta  valx+1
.0f4d	68		                pla
.0f4e	20 da 09	                jsr  lsra4bits
.0f51	20 ce 09	                jsr  nib2hex
.0f54	8d 5d 10	                sta  valx
.0f57	ad b3 10	                lda  regp
.0f5a	48		                pha
.0f5b	20 ce 09	                jsr  nib2hex
.0f5e	8d 74 10	                sta  valp+1
.0f61	68		                pla
.0f62	20 da 09	                jsr  lsra4bits
.0f65	20 ce 09	                jsr  nib2hex
.0f68	8d 73 10	                sta  valp
.0f6b	ad b4 10	                lda  regs
.0f6e	48		                pha
.0f6f	20 ce 09	                jsr  nib2hex
.0f72	8d 7f 10	                sta  vals+1
.0f75	68		                pla
.0f76	20 da 09	                jsr  lsra4bits
.0f79	20 ce 09	                jsr  nib2hex
.0f7c	8d 7e 10	                sta  vals
.0f7f	ad b5 10	                lda  regpch
.0f82	48		                pha
.0f83	20 ce 09	                jsr  nib2hex
.0f86	8d 8b 10	                sta  valpch+1
.0f89	68		                pla
.0f8a	20 da 09	                jsr  lsra4bits
.0f8d	20 ce 09	                jsr  nib2hex
.0f90	8d 8a 10	                sta  valpch
.0f93	ad b6 10	                lda  regpcl
.0f96	48		                pha
.0f97	20 ce 09	                jsr  nib2hex
.0f9a	8d 8d 10	                sta  valpcl+1
.0f9d	68		                pla
.0f9e	20 da 09	                jsr  lsra4bits
.0fa1	20 ce 09	                jsr  nib2hex
.0fa4	8d 8c 10	                sta  valpcl
.0fa7	a5 fb		                lda  zpage1
.0fa9	48		                pha
.0faa	20 ce 09	                jsr  nib2hex
.0fad	8d 9c 10	                sta  valz1l
.0fb0	68		                pla
.0fb1	20 da 09	                jsr  lsra4bits
.0fb4	20 ce 09	                jsr  nib2hex
.0fb7	8d 9d 10	                sta  valz1l+1
.0fba	a5 fc		                lda  zpage1+1
.0fbc	48		                pha
.0fbd	20 ce 09	                jsr  nib2hex
.0fc0	8d 9a 10	                sta  valz1h
.0fc3	68		                pla
.0fc4	20 da 09	                jsr  lsra4bits
.0fc7	20 ce 09	                jsr  nib2hex
.0fca	8d 9b 10	                sta  valz1h+1
.0fcd	a5 fd		                lda  zpage2
.0fcf	48		                pha
.0fd0	20 ce 09	                jsr  nib2hex
.0fd3	8d ac 10	                sta  valz2l
.0fd6	68		                pla
.0fd7	20 da 09	                jsr  lsra4bits
.0fda	20 ce 09	                jsr  nib2hex
.0fdd	8d ad 10	                sta  valz2l+1
.0fe0	a5 fe		                lda  zpage2+1
.0fe2	48		                pha
.0fe3	20 ce 09	                jsr  nib2hex
.0fe6	8d aa 10	                sta  valz2h
.0fe9	68		                pla
.0fea	20 da 09	                jsr  lsra4bits
.0fed	20 ce 09	                jsr  nib2hex
.0ff0	8d ab 10	                sta  valz2h+1
.0ff3	20 7f 0a	                jsr  setinverse
.0ff6	78		                sei
.0ff7	a2 4a		                ldx  #<srega
.0ff9	a0 10		                ldy  #>srega+1
.0ffb	20 94 0a	                jsr  putscxy
.0ffe	a2 55		                ldx  #<sregx
.1000	a0 10		                ldy  #>sregx+1
.1002	20 94 0a	                jsr  putscxy
.1005	a2 60		                ldx  #<sregy
.1007	a0 10		                ldy  #>sregy+1
.1009	20 94 0a	                jsr  putscxy
.100c	a2 6b		                ldx  #<sregp
.100e	a0 10		                ldy  #>sregp+1
.1010	20 94 0a	                jsr  putscxy
.1013	a2 76		                ldx  #<sregs
.1015	a0 10		                ldy  #>sregs+1
.1017	20 94 0a	                jsr  putscxy
.101a	a2 81		                ldx  #<sregpc
.101c	a0 10		                ldy  #>sregpc+1
.101e	20 94 0a	                jsr  putscxy
.1021	a2 90		                ldx  #<sregz1
.1023	a0 10		                ldy  #>sregz1+1
.1025	20 94 0a	                jsr  putscxy
.1028	a2 a0		                ldx  #<sregz2
.102a	a0 10		                ldy  #>sregz2+1
.102c	20 94 0a	                jsr  putscxy
.102f	58		                cli
.1030	20 82 0a	                jsr  clrinverse
.1033	ad b5 10	                lda  regpch
.1036	48		                pha
.1037	ad b6 10	                lda  regpcl
.103a	48		                pha
.103b	ac b2 10	                ldy  regy
.103e	ae b1 10	                ldx  regx
.1041	ad b3 10	                lda  regp
.1044	48		                pha
.1045	ad b0 10	                lda  rega
.1048	28		                plp
.1049	60		                rts
>104a	01 c0 00 17	srega   .byte   colr,bkcol,coln,line
>104e	20 41 3a 24	        .text   ' a:$' ;4,24
>1052	00 00 00	vala    .byte   0,0,0
>1055	01 c0 06 17	sregx   .byte   colr,bkcol,coln+6,line
>1059	20 58 3a 24	        .text   ' x:$' ;4,24
>105d	00 00 00	valx    .byte   0,0,0
>1060	01 c0 0c 17	sregy   .byte   colr,bkcol,coln+12,line
>1064	20 59 3a 24	        .text   ' y:$' ;4,24
>1068	00 00 00	valy    .byte   0,0,0
>106b	01 c0 12 17	sregp   .byte   colr,bkcol,coln+18,line
>106f	20 50 3a 24	        .text   ' p:$' ;4,24
>1073	00 00 00	valp    .byte   0,0,0
>1076	01 c0 18 17	sregs   .byte   colr,bkcol,coln+24,line
>107a	20 53 3a 24	        .text   ' s:$' ;4,24
>107e	00 00 00	vals    .byte   0,0,0
>1081	01 c0 1e 17	sregpc  .byte   colr,bkcol,coln+30,line
>1085	20 50 43 3a	        .text   ' pc:$' ;4,24
>1089	24
>108a	00 00		valpch  .byte   0,0
>108c	00 00 20 00	valpcl  .byte   0,0,32,0
>1090	01 c0 03 18	sregz1  .byte   colr,bkcol,coln+3,line+1
>1094	20 5a 50 31	        .text   ' zp1:$' ;4,24
>1098	3a 24
>109a	00 00		valz1h  .byte   0,0
>109c	00 00 20 00	valz1l  .byte   0,0,32,0
>10a0	01 c0 0f 18	sregz2  .byte   colr,bkcol,coln+15,line+1
>10a4	20 5a 50 32	        .text   ' zp2:$' ;4,24
>10a8	3a 24
>10aa	00 00		valz2h  .byte   0,0
>10ac	00 00 20 00	valz2l  .byte   0,0,32,0
>10b0	00		rega    .byte   0
>10b1	00		regx    .byte   0
>10b2	00		regy    .byte   0
>10b3	00		regp    .byte   0
>10b4	00		regs    .byte   0
>10b5	00		regpch  .byte   0
>10b6	00		regpcl  .byte   0
>10b7	00		regpcl2 .byte   0
>10b8	00		vzp1h   .byte   0
>10b9	00		vzp1l   .byte   0
>10ba	00		vzp2h   .byte   0
>10bb	00		vzp2l   .byte   0

;******  Return to file: mainsd.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_joystick.asm"

=$dc00			js_2port       =    $dc00
=$dc01			js_1port       =    $dc01
=$dc02			js_2dir        =    $dc02
=$dc03			js_1dir        =    $dc03
=2			js_xoffset     =    2
=2			js_yoffset     =    2
=0			js_location    =    0
.10bc			js_init
.10bc	20 10 08	               jsr  push
.10bf	ad 03 dc	               lda  js_1dir
.10c2	29 e0		               and  #$e0
.10c4	8d 03 dc	               sta  js_1dir
.10c7	ad 02 dc	               lda  js_2dir
.10ca	29 e0		               and  #$e0
.10cc	8d 02 dc	               sta  js_2dir
.10cf	20 4f 08	               jsr  pop
.10d2	60		               rts
.10d3			js_scan
.10d3	20 da 10	               jsr  js_1scan
.10d6	20 89 11	               jsr  js_2scan
.10d9	60		               rts
.10da			js_1scan
.10da	20 10 08	               jsr  push
.10dd	ad 01 dc	               lda  js_1port
.10e0	29 1f		               and  #$1f
.10e2	c9 00		               cmp  #$00
.10e4	d0 03		               bne  p1scan
.10e6	4c 79 11	               jmp  port1_out
.10e9	49 1f		p1scan         eor  #$1f
.10eb	18		               clc
.10ec	4a		js_1b0         lsr
.10ed	90 14		               bcc  js_1b1
.10ef	48		               pha
.10f0	ee a3 14	               inc  js_1flag
.10f3	ad 9f 14	               lda  js_1pixy
.10f6	38		               sec
.10f7	e9 02		               sbc  #js_yoffset
.10f9	c9 f0		               cmp  #$f0
.10fb	90 02		               bcc  sto1ym
.10fd	a9 00		               lda  #$00
.10ff	8d 9f 14	sto1ym         sta  js_1pixy
.1102	68		               pla
.1103	4a		js_1b1         lsr
.1104	90 14		               bcc  js_1b2
.1106	48		               pha
.1107	ee a3 14	               inc  js_1flag
.110a	ad 9f 14	               lda  js_1pixy
.110d	18		               clc
.110e	69 02		               adc  #js_yoffset
.1110	c9 c7		               cmp  #199
.1112	90 02		               bcc  sto1yp
.1114	a9 c7		               lda  #199
.1116	8d 9f 14	sto1yp         sta  js_1pixy
.1119	68		               pla
.111a	4a		js_1b2         lsr
.111b	90 20		               bcc  js_1b3
.111d	48		               pha
.111e	ee a3 14	               inc  js_1flag
.1121	ad 9d 14	               lda  js_1pixx
.1124	0d 9e 14	               ora  js_1pixx+1
.1127	f0 13		               beq  js_1b2out
.1129	38		               sec
.112a	ad 9d 14	               lda  js_1pixx
.112d	e9 02		               sbc  #js_xoffset
.112f	8d 9d 14	               sta  js_1pixx
.1132	b0 08		               bcs  js_1b2out
.1134	ad 9e 14	               lda  js_1pixx+1
.1137	f0 03		               beq  js_1b2out
.1139	ce 9e 14	               dec  js_1pixx+1
.113c	68		js_1b2out      pla
.113d	4a		js_1b3         lsr
.113e	90 22		               bcc  js_1b4
.1140	48		               pha
.1141	ee a3 14	               inc  js_1flag
.1144	ad 9e 14	               lda  js_1pixx+1
.1147	f0 0a		               beq  incj1x
.1149	ad 9d 14	               lda  js_1pixx
.114c	c9 3c		               cmp  #$40-4
.114e	30 03		               bmi  incj1x
.1150	4c 61 11	               jmp  js_1b3out
.1153	18		incj1x         clc
.1154	ad 9d 14	               lda  js_1pixx
.1157	69 02		               adc  #js_xoffset
.1159	8d 9d 14	               sta  js_1pixx
.115c	90 03		               bcc  js_1b3out
.115e	ee 9e 14	               inc  js_1pixx+1
.1161	68		js_1b3out      pla
.1162	4a		js_1b4          lsr                     ;Estce le bbouton fire (F)
.1163	90 14		                bcc     port1_out       ;Oui!
.1165	ee a3 14	                inc     js_1flag
.1168	ee a2 14	                inc     js_1fire        ; on augmente le nombre de tir
.116b	a2 01		js_1wait        ldx     #$01
.116d	a0 ff		                ldy     #$ff
.116f	c8		js_1rel         iny
.1170	ad 01 dc	                lda     js_1port
.1173	49 ff		                eor     #$ff
.1175	29 10		                and     #$10
.1177	d0 f6		                bne     js_1rel         ; des boutons
.1179	ad a3 14	port1_out       lda     js_1flag
.117c	f0 08		                beq     out
.117e	20 7b 12	                jsr     js_1correct
.1181	a9 00		                lda     #0
.1183	8d a3 14	                sta     js_1flag
.1186	20 4f 08	out             jsr     pop
.1189			js_2scan
.1189	20 10 08	                jsr     push
.118c	ad 00 dc	port2           lda     js_2port
.118f	29 1f		                and     #$1f
.1191	c9 1f		                cmp	#$1f
.1193	d0 03		                bne     p2scan
.1195	4c 4c 12	                jmp     port2_out
.1198	49 1f		p2scan          eor     #$1f
.119a	a2 02		                ldx     #$02
.119c	18		                clc
.119d	4a		js_2b0          lsr                     ;On decale js_2 bit 0 dans C
.119e	90 14		                bcc     js_2b1          ;Est-ce vers le haut (U)
.11a0	48		                pha                     ;On stack la valeur
.11a1	ee ae 14	                inc     js_2flag
.11a4	ad aa 14	                lda     js_2pixy        ;Oui!
.11a7	38		                sec                     ;On place la carry a 1
.11a8	e9 02		                sbc     #js_yoffset     ;On reduit
.11aa	c9 f0		                cmp     #$f0
.11ac	90 02		                bcc     sto2ym
.11ae	a9 00		                lda     #$00
.11b0	8d aa 14	sto2ym          sta     js_2pixy        ; le y
.11b3	68		                pla                     ;On recupere la valeur
.11b4	4a		js_2b1          lsr                     ;On decale js_2 bit 0 dans C
.11b5	90 14		                bcc     js_2b2          ;Est-ce vers le bas (D)
.11b7	48		                pha                     ;On stack la valeur
.11b8	ee ae 14	                inc     js_2flag
.11bb	ad aa 14	                lda     js_2pixy        ;Oui!
.11be	18		                clc                     ;On place la carry a 0
.11bf	69 02		                adc     #js_yoffset     ;On augmente
.11c1	c9 c7		                cmp     #199
.11c3	90 02		                bcc     sto2yp
.11c5	a9 c7		                lda     #199
.11c7	8d aa 14	sto2yp          sta     js_2pixy        ; le y
.11ca	68		                pla                     ;On recupere la valeur
.11cb	4a		js_2b2          lsr                     ;On decale js_2 bit 0 dans C
.11cc	90 20		                bcc     js_2b3          ;Est-ce vers la gauche (L)
.11ce	48		                pha                     ;On stack la valeur
.11cf	ee ae 14	                inc     js_2flag
.11d2	ad a8 14	                lda     js_2pixx        ;Oui!
.11d5	0d a9 14	                ora     js_2pixx+1
.11d8	f0 13		                beq     js_2b2out
.11da	38		                sec                     ;On place la carry a 1
.11db	ad a8 14	                lda     js_2pixx        ;Oui!
.11de	e9 02		                sbc     #js_xoffset     ;On diminue
.11e0	8d a8 14	                sta     js_2pixx        ; le X
.11e3	b0 08		                bcs     js_2b2out       ; de offset
.11e5	ad a9 14	                lda     js_2pixx+1
.11e8	f0 03		                beq     js_2b2out
.11ea	ce a9 14	                dec     js_2pixx+1      ; sur 16 bits
.11ed	68		js_2b2out       pla                     ;On recupere la valeur
.11ee	4a		js_2b3          lsr                     ;On decale js_2 bit 0 dans C
.11ef	90 22		                bcc     js_2b4          ;Est-ce vers la droite (R)
.11f1	48		                pha                     ;On stack la valeur
.11f2	ee ae 14	                inc     js_2flag
.11f5	ad a9 14	                lda     js_2pixx+1
.11f8	f0 0a		                beq     incj2x
.11fa	ad a8 14	                lda     js_2pixx
.11fd	c9 3e		                cmp     #$40-js_xoffset
.11ff	30 03		                bmi     incj2x
.1201	4c 12 12	                jmp     js_2b3out
.1204	18		incj2x          clc                     ;On place la carry a 0
.1205	ad a8 14	                lda     js_2pixx        ;Oui!
.1208	69 02		                adc     #js_xoffset     ;On augmente
.120a	8d a8 14	                sta     js_2pixx        ; le X
.120d	90 03		                bcc     js_2b3out       ; de offset
.120f	ee a9 14	                inc     js_2pixx+1      ; sur 16 bits
.1212	68		js_2b3out       pla                     ;On recupere la valeur
.1213	4a		js_2b4          lsr                     ;Estce le bbouton fire (F)
.1214	90 36		                bcc     port2_out       ;Oui!
.1216	ee ae 14	                inc     js_2flag
.1219	ee ad 14	                inc     js_2fire        ; on augmente le nombre de tir
.121c	a9 01		                lda     #%00000001
.121e	8d b2 14	                sta     js_2events
.1221	ad a8 14	                lda     js_2pixx
.1224	8d af 14	                sta     js_2clickx
.1227	ad a9 14	                lda     js_2pixx+1
.122a	8d b0 14	                sta     js_2clickx+1
.122d	ad aa 14	                lda     js_2pixy
.1230	8d b1 14	                sta     js_2clicky
.1233	ad 14 15	                lda     js_2val16a+1
.1236	49 40		                eor     #%01000000
.1238	8d 14 15	                sta     js_2val16a+1
.123b	a2 00		js_2wait        ldx     #$00
.123d	a0 ff		                ldy     #$ff
.123f	c8		js_2rel         iny
.1240	d0 01		                bne     sr1
.1242	e8		                inx
.1243			sr1
.1243	ad 00 dc	                lda     js_2port
.1246	49 ff		                eor     #$ff
.1248	29 10		                and     #$10
.124a	d0 f3		                bne     js_2rel         ; des boutons
.124c	ad ae 14	port2_out       lda     js_2flag
.124f	f0 08		                beq     out
.1251	20 b0 12	                jsr     js_2correct
.1254	a9 00		                lda     #0
.1256	8d ae 14	                sta     js_2flag
.1259	20 4f 08	out             jsr     pop
.125c			js_corrector
.125c	08		                php
.125d	48		                pha
.125e	ad a3 14	                lda     js_1flag
.1261	f0 08		                beq     check2
.1263	20 7b 12	                jsr     js_1correct
.1266	a9 00		                lda     #0
.1268	8d a3 14	                sta     js_1flag
.126b	ad ae 14	check2          lda     js_2flag
.126e	f0 08		                beq     no_update
.1270	20 b0 12	                jsr     js_2correct
.1273	a9 00		                lda     #0
.1275	8d ae 14	                sta     js_2flag
.1278	68		no_update       pla
.1279	28		                plp
.127a	60		                rts
.127b			js_1correct
.127b	08		                php
.127c	48		                pha
.127d	ad 9d 14	                lda     js_1pixx
.1280	8d ae 12	                sta     vallsb
.1283	ad 9e 14	                lda     js_1pixx+1
.1286	6a		                ror                     ; ex = %0000000100000001 = 257 pixel
.1287	6e ae 12	                ror     vallsb          ; Cnnnnnnn      On divise par 8 pc les
.128a	4e ae 12	                lsr     vallsb          ; 0Cnnnnnn      caracteres de 8 pixels
.128d	4e ae 12	                lsr     vallsb          ; 00Cnnnnn
.1290	ad ae 12	                lda     vallsb          ; devient = %00100000 = 32
.1293	8d a0 14	                sta     js_1x
.1296	ad 9f 14	                lda     js_1pixy
.1299	8d ae 12	                sta     vallsb
.129c	4e ae 12	                lsr     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.129f	4e ae 12	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.12a2	4e ae 12	                lsr     vallsb          ; 00Cnnnnn
.12a5	ad ae 12	                lda     vallsb          ; devient = %00100000 = 32
.12a8	8d a1 14	                sta     js_1y
.12ab	68		                pla
.12ac	28		                plp
.12ad	60		                rts
>12ae	00		vallsb          .byte     0
>12af	00		regx            .byte     0
.12b0			js_2correct
.12b0	08		                php
.12b1	48		                pha
.12b2	ad a8 14	                lda     js_2pixx
.12b5	8d e3 12	                sta     vallsb
.12b8	ad a9 14	                lda     js_2pixx+1
.12bb	6a		                ror                     ; ex = %0000000100000001 = 257 pixel
.12bc	6e e3 12	                ror     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.12bf	4e e3 12	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.12c2	4e e3 12	                lsr     vallsb          ; 00Cnnnnn
.12c5	ad e3 12	                lda     vallsb          ; devient = %00100000 = 32
.12c8	8d ab 14	                sta     js_2x
.12cb	ad aa 14	                lda     js_2pixy
.12ce	8d e3 12	                sta     vallsb
.12d1	4e e3 12	                lsr     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.12d4	4e e3 12	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.12d7	4e e3 12	                lsr     vallsb          ; 00Cnnnnn
.12da	ad e3 12	                lda     vallsb          ; devient = %00100000 = 32
.12dd	8d ac 14	                sta     js_2y
.12e0	68		                pla
.12e1	28		                plp
.12e2	60		                rts
>12e3	00		vallsb          .byte     0
>12e4	00		regx            .byte     0
.12e5			js_showvals
.12e5	20 75 13	                jsr     js_2showvals
.12e8	60		                rts
.12e9			js_1showvals
.12e9	20 10 08	                jsr     push
.12ec	ad a0 14	                lda     js_1x
.12ef	20 e1 09	                jsr     a2hex
.12f2	ad c9 09	                lda     a2hexstr+1
.12f5	8d c6 14	                sta     js_1val8+19
.12f8	ad ca 09	                lda     a2hexstr+2
.12fb	8d c7 14	                sta     js_1val8+20
.12fe	ad 9d 14	                lda     js_1pixx
.1301	20 e1 09	                jsr     a2hex
.1304	ad c9 09	                lda     a2hexstr+1
.1307	8d e5 14	                sta     js_1val16+14
.130a	ad ca 09	                lda     a2hexstr+2
.130d	8d e6 14	                sta     js_1val16+15
.1310	ad 9e 14	                lda     js_1pixx+1
.1313	20 e1 09	                jsr     a2hex
.1316	ad c9 09	                lda     a2hexstr+1
.1319	8d e3 14	                sta     js_1val16+12
.131c	ad ca 09	                lda     a2hexstr+2
.131f	8d e4 14	                sta     js_1val16+13
.1322	ad a1 14	                lda     js_1y
.1325	20 e1 09	                jsr     a2hex
.1328	ad c9 09	                lda     a2hexstr+1
.132b	8d ca 14	                sta     js_1val8+23
.132e	ad ca 09	                lda     a2hexstr+2
.1331	8d cb 14	                sta     js_1val8+24
.1334	ad 9f 14	                lda     js_1pixy
.1337	20 e1 09	                jsr     a2hex
.133a	ad c9 09	                lda     a2hexstr+1
.133d	8d eb 14	                sta     js_1val16+20
.1340	ad ca 09	                lda     a2hexstr+2
.1343	8d ec 14	                sta     js_1val16+21
.1346	a9 00		                lda     #0
.1348	20 e1 09	                jsr     a2hex
.134b	ad c9 09	                lda     a2hexstr+1
.134e	8d e9 14	                sta     js_1val16+18
.1351	ad ca 09	                lda     a2hexstr+2
.1354	8d ea 14	                sta     js_1val16+19
.1357	ad a2 14	                lda     js_1fire
.135a	20 e1 09	                jsr     a2hex
.135d	ad ca 09	                lda     a2hexstr+2
.1360	8d d4 14	                sta     js_1val8+33
.1363	a2 b3		                ldx     #<js_1val8
.1365	a0 14		                ldy     #>js_1val8
.1367	20 94 0a	                jsr     putscxy
.136a	a2 d7		                ldx     #<js_1val16
.136c	a0 14		                ldy     #>js_1val16
.136e	20 94 0a	                jsr     putscxy
.1371	20 4f 08	                jsr     pop
.1374	60		                rts
.1375			js_2showvals
.1375	20 10 08	                jsr     push                    ; stack : y, x, a, flg
.1378	ad ab 14	                lda     js_2x
.137b	20 e1 09	                jsr     a2hex
.137e	ad c9 09	                lda     a2hexstr+1
.1381	8d 02 15	                sta     js_2val8+19
.1384	ad ca 09	                lda     a2hexstr+2
.1387	8d 03 15	                sta     js_2val8+20
.138a	ad af 14	                lda     js_2clickx
.138d	20 e1 09	                jsr     a2hex
.1390	ad c9 09	                lda     a2hexstr+1
.1393	8d 30 15	                sta     js_2val16+14
.1396	ad ca 09	                lda     a2hexstr+2
.1399	8d 31 15	                sta     js_2val16+15
.139c	ad b0 14	                lda     js_2clickx+1
.139f	20 e1 09	                jsr     a2hex
.13a2	ad c9 09	                lda     a2hexstr+1
.13a5	8d 2e 15	                sta     js_2val16+12
.13a8	ad ca 09	                lda     a2hexstr+2
.13ab	8d 2f 15	                sta     js_2val16+13
.13ae	ad ac 14	                lda     js_2y
.13b1	20 e1 09	                jsr     a2hex
.13b4	ad c9 09	                lda     a2hexstr+1
.13b7	8d 06 15	                sta     js_2val8+23
.13ba	ad ca 09	                lda     a2hexstr+2
.13bd	8d 07 15	                sta     js_2val8+24
.13c0	ad b1 14	                lda     js_2clicky
.13c3	20 e1 09	                jsr     a2hex
.13c6	ad c9 09	                lda     a2hexstr+1
.13c9	8d 36 15	                sta     js_2val16+20
.13cc	ad ca 09	                lda     a2hexstr+2
.13cf	8d 37 15	                sta     js_2val16+21
.13d2	a9 00		                lda     #0
.13d4	20 e1 09	                jsr     a2hex
.13d7	ad c9 09	                lda     a2hexstr+1
.13da	8d 34 15	                sta     js_2val16+18
.13dd	ad ca 09	                lda     a2hexstr+2
.13e0	8d 35 15	                sta     js_2val16+19
.13e3	ad ad 14	                lda     js_2fire
.13e6	20 e1 09	                jsr     a2hex
.13e9	ad ca 09	                lda     a2hexstr+2
.13ec	8d 10 15	                sta     js_2val8+33
.13ef	a2 ef		                ldx     #<js_2val8
.13f1	a0 14		                ldy     #>js_2val8
.13f3	20 94 0a	                jsr     putscxy
.13f6	a2 13		                ldx     #<js_2val16a
.13f8	a0 15		                ldy     #>js_2val16a
.13fa	20 94 0a	                jsr     putscxy
.13fd	a2 22		                ldx     #<js_2val16
.13ff	a0 15		                ldy     #>js_2val16
.1401	20 94 0a	                jsr     putscxy
.1404	20 4f 08	                jsr     pop
.1407	60		                rts
.1408			js_updatecurs
.1408	20 10 08	                jsr     push
.140b	ad ab 14	running         lda     js_2x
.140e	cd 97 14	                cmp     js_x
.1411	f0 06		                beq     chky
.1413	8d 97 14	                sta     js_x
.1416	ee 6a 14	                inc     flag
.1419	ad ac 14	chky            lda     js_2y
.141c	cd 98 14	                cmp     js_y
.141f	f0 06		                beq     chkflag
.1421	8d 98 14	                sta     js_y
.1424	ee 6a 14	                inc     flag
.1427	ad 6a 14	chkflag         lda     flag
.142a	f0 1e		                beq     showit
.142c	ae 99 14	                ldx     js_oldx
.142f	ac 9a 14	                ldy     js_oldy
.1432	20 6b 14	                jsr     js_eoraddrxy
.1435	ae 97 14	                ldx     js_x
.1438	ac 98 14	                ldy     js_y
.143b	20 6b 14	                jsr     js_eoraddrxy
.143e	ad 97 14	                lda     js_x
.1441	8d 99 14	                sta     js_oldx
.1444	ad 98 14	                lda     js_y
.1447	8d 9a 14	                sta     js_oldy
.144a	a9 00		showit          lda     #0
.144c	8d 6a 14	                sta     flag
.144f	8d bb 09	                sta     addr1
.1452	a9 04		                lda     #$04
.1454	8d bc 09	                sta     addr1+1
.1457	ae 97 14	                ldx     js_x
.145a	ac 98 14	                ldy     js_y
.145d	20 81 09	                jsr     xy2addr
.1460	ac bd 09	                ldy     addr2
.1463	ae be 09	                ldx     addr2+1
.1466	20 4f 08	                jsr pop
.1469	60		                rts
>146a	00		flag            .byte   0
.146b			js_eoraddrxy
.146b	20 10 08	                jsr     push
.146e	20 63 09	                jsr     savezp2
.1471	a9 04		                lda     #$04
.1473	8d bc 09	                sta     addr1+1
.1476	a9 00		                lda     #0
.1478	8d bb 09	                sta     addr1
.147b	20 81 09	                jsr     xy2addr
.147e	ac bd 09	                ldy     addr2
.1481	84 fd		                sty     zpage2
.1483	ae be 09	                ldx     addr2+1
.1486	86 fe		                stx     zpage2+1
.1488	a0 00		                ldy     #0
.148a	b1 fd		                lda     (zpage2),y
.148c	49 40		                eor     #%01000000
.148e	91 fd		                sta     (zpage2),y
.1490	20 72 09	                jsr     restzp2
.1493	20 4f 08	                jsr     pop
.1496	60		                rts
>1497	00		js_x            .byte   0
>1498	00		js_y            .byte   0
>1499	ff		js_oldx         .byte   $ff
>149a	ff		js_oldy         .byte   $ff
>149b	00		js_oldcar       .byte   0
>149c	00		js_oldcol       .byte   0
>149d	00 00		js_1pixx        .word   0
>149f	00		js_1pixy        .byte   0
>14a0	00		js_1x           .byte   0
>14a1	00		js_1y           .byte   0
>14a2	00		js_1fire        .byte   0
>14a3	00		js_1flag        .byte   0
>14a4	00 00		js_1clickx      .word   0
>14a6	00		js_1clicky      .byte   0
>14a7	00		js_1events      .byte   0
>14a8	00 00		js_2pixx        .word   0
>14aa	00		js_2pixy        .byte   0
>14ab	00		js_2x           .byte   0
>14ac	00		js_2y           .byte   0
>14ad	00		js_2fire        .byte   0
>14ae	00		js_2flag        .byte   0
>14af	00 00		js_2clickx      .word   0
>14b1	00		js_2clicky      .byte   0
>14b2	00		js_2events      .byte   0
=$03			js_txtcol       =       vcyan
=$00			js_txtbak       =       bkcol0
>14b3	03 00 04 05	js_1val8        .byte     js_txtcol,js_txtbak,4,5
>14b7	d0 4f 52 54	                .text   "Port 1 (x,y):($00,$00) Fire:(0)"
>14bb	20 31 20 28 58 2c 59 29 3a 28 24 30 30 2c 24 30
>14cb	30 29 20 c6 49 52 45 3a 28 30 29
>14d6	00		                .byte   0
>14d7	03 00 0b 07	js_1val16       .byte   js_txtcol,js_txtbak,11,7
>14db	28 58 2c 59	                .text   "(x,y):($0000,$0000)"
>14df	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29
>14ee	00		                .byte   0
>14ef	03 00 04 0a	js_2val8        .byte   js_txtcol,js_txtbak,4,10
>14f3	c3 41 52 d0	                .text   "CarPos (x,y):($00,$00) Fire:(0)"
>14f7	4f 53 20 28 58 2c 59 29 3a 28 24 30 30 2c 24 30
>1507	30 29 20 c6 49 52 45 3a 28 30 29
>1512	00		                .byte   0
>1513	01 00 04 0c	js_2val16a      .byte   vblanc,js_txtbak,4,12
>1517	c3 4c 49 43	                .text   "Click pos."
>151b	4b 20 50 4f 53 2e
>1521	00		                .byte   0
>1522	03 00 10 0c	js_2val16       .byte   js_txtcol,js_txtbak,16,12
>1526	28 58 2c 59	                .text   "(x,y):($0000,$0000)"
>152a	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29
>1539	00		                .byte   0

;******  Return to file: mainsd.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_spriteman.asm"

.153a			sprt_init
.153a	20 10 08	                jsr     push
.153d	ad 8f 15	                lda     sprt_ptr
.1540	20 71 16	                jsr     sprt_loadptr
.1543	20 45 09	                jsr     savezp1
.1546	20 63 09	                jsr     savezp2
.1549	ad 15 d0	                lda     vic+$15 ; enable sprite 2
.154c	09 04		                ora     #%00000100
.154e	8d 15 d0	                sta     vic+$15
.1551	a9 0d		                lda     #$0d
.1553	8d fa 07	                sta     $7fa
.1556	ad 4d 19	                lda     sprt_ptr0
.1559	85 fb		                sta     zpage1
.155b	ad 4e 19	                lda     sprt_ptr0+1
.155e	85 fc		                sta     zpage1+1
.1560	a9 40		                lda     #$40
.1562	85 fd		                sta     zpage2
.1564	a9 03		                lda     #$03
.1566	85 fe		                sta     zpage2+1
.1568	a0 41		                ldy     #65
.156a	b1 fb		                lda     (zpage1),y      ; sprite y offset
.156c	8d b4 16	                sta     sprt_yoffset
.156f	88		                dey
.1570	b1 fb		                lda     (zpage1),y      ; sprite x offset
.1572	8d b3 16	                sta     sprt_xoffset
.1575	88		                dey
.1576	b1 fb		                lda     (zpage1),y      ; sprite color
.1578	8d 29 d0	                sta     $d029
.157b	88		                dey
.157c	a0 3e		                ldy     #62
.157e	b1 fb		nextbyte        lda     (zpage1),y
.1580	91 fd		                sta     (zpage2),y
.1582	88		                dey
.1583	d0 f9		                bne     nextbyte
.1585	20 54 09	                jsr     restzp1
.1588	20 72 09	                jsr     restzp2
.158b	20 4f 08	                jsr     pop
.158e	60		                rts
>158f	01		sprt_ptr        .byte   $01
.1590			sprt_calcpos
.1590	20 10 08	                jsr     push
.1593	a9 00		                lda     #0
.1595	8d b6 16	                sta     sprt_x+1
.1598	8d b8 16	                sta     sprt_y+1
.159b	ad a9 14	                lda     js_2pixx+1
.159e	18		                clc
.159f	2a		                rol
.15a0	2a		                rol
.15a1	8d b6 16	                sta     sprt_x+1
.15a4	ad a8 14	                lda     js_2pixx
.15a7	18		                clc
.15a8	6d b3 16	                adc     sprt_xoffset
.15ab	8d b5 16	                sta     sprt_x
.15ae	90 08		                bcc     norepx
.15b0	ad b6 16	                lda     sprt_x+1
.15b3	09 04		                ora     #$04
.15b5	8d b6 16	                sta     sprt_x+1
.15b8	ad aa 14	norepx          lda     js_2pixy
.15bb	18		                clc
.15bc	6d b4 16	                adc     sprt_yoffset
.15bf	8d b7 16	                sta     sprt_y
.15c2	20 4f 08	                jsr     pop
.15c5	60		                rts
.15c6			sprt_move
.15c6	20 10 08	                jsr     push
.15c9	20 90 15	                jsr     sprt_calcpos
.15cc	ad b5 16	                lda     sprt_x
.15cf	8d 04 d0	                sta     vic+$04
.15d2	ad b6 16	                lda     sprt_x+1
.15d5	8d 10 d0	                sta     vic+$10
.15d8	ad b7 16	                lda     sprt_y
.15db	8d 05 d0	                sta     vic+$05
.15de	20 e5 15	                jsr     sprt_showpos
.15e1	20 4f 08	                jsr     pop
.15e4	60		                rts
.15e5			sprt_showpos
.15e5	20 10 08	                jsr     push
.15e8	ad b5 16	                lda     sprt_x
.15eb	20 e1 09	                jsr     a2hex
.15ee	ad c9 09	                lda     a2hexstr+1
.15f1	8d 7c 19	                sta     sprite_pos+26
.15f4	ad ca 09	                lda     a2hexstr+2
.15f7	8d 7d 19	                sta     sprite_pos+27
.15fa	ad b6 16	                lda     sprt_x+1
.15fd	20 e1 09	                jsr     a2hex
.1600	ad c9 09	                lda     a2hexstr+1
.1603	8d 7a 19	                sta     sprite_pos+24
.1606	ad ca 09	                lda     a2hexstr+2
.1609	8d 7b 19	                sta     sprite_pos+25
.160c	ad b7 16	                lda     sprt_y
.160f	20 e1 09	                jsr     a2hex
.1612	ad c9 09	                lda     a2hexstr+1
.1615	8d 83 19	                sta     sprite_pos+33
.1618	ad ca 09	                lda     a2hexstr+2
.161b	8d 84 19	                sta     sprite_pos+34
.161e	a9 00		                lda     #0
.1620	20 e1 09	                jsr     a2hex
.1623	ad c9 09	                lda     a2hexstr+1
.1626	8d 81 19	                sta     sprite_pos+31
.1629	ad ca 09	                lda     a2hexstr+2
.162c	8d 82 19	                sta     sprite_pos+32
.162f	a2 62		                ldx     #<sprite_pos
.1631	a0 19		                ldy     #>sprite_pos
.1633	20 94 0a	                jsr     putscxy
.1636	20 4f 08	                jsr     pop
.1639	60		                rts
.163a			sprt_loadptr2
.163a	20 10 08	                jsr     push
.163d	aa		                tax
.163e	8e 8f 15	                stx     sprt_ptr
.1641	ad 4e 19	                lda     sprt_ptr0+1
.1644	8d 70 16	                sta     calcbuff+1
.1647	ad 4d 19	                lda     sprt_ptr0
.164a	8d 6f 16	                sta     calcbuff
.164d	e0 00		                cpx     #0
.164f	f0 11		                beq     addrok
.1651	ad 6f 16	                lda     calcbuff
.1654	18		nextx           clc
.1655	69 42		                adc     #66
.1657	90 03		                bcc     nocarry
.1659	ee 70 16	                inc     calcbuff+1
.165c	8d 6f 16	nocarry         sta     calcbuff
.165f	ca		                dex
.1660	d0 f2		                bne     nextx
.1662	ac 70 16	addrok          ldy     calcbuff+1
.1665	ae 6f 16	                ldx     calcbuff
.1668	20 8b 16	                jsr     sprt_setimage
.166b	20 4f 08	                jsr     pop
.166e	60		                rts
>166f	00 00		calcbuff        .word   $0
.1671			sprt_loadptr
.1671	20 10 08	                jsr     push
.1674	ad 8f 15	                lda     sprt_ptr
.1677	18		                clc
.1678	2a		                rol
.1679	a8		                tay
.167a	b9 4d 19	                lda     sprt_ptr0,y
.167d	aa		                tax
.167e	b9 4e 19	                lda     sprt_ptr0+1,y
.1681	a8		                tay
.1682	20 8b 16	                jsr     sprt_setimage
.1685	20 4f 08	                jsr     pop
.1688	60		                rts
>1689	00 00		calcbuff        .word   $0
.168b			sprt_setimage
.168b	20 10 08	                jsr     push
.168e	20 45 09	                jsr     savezp1
.1691	20 63 09	                jsr     savezp2
.1694	84 fc		                sty     zpage1+1
.1696	86 fb		                stx     zpage1
.1698	a0 16		                ldy     #>sprt_image
.169a	84 fe		                sty     zpage2+1
.169c	a0 b9		                ldy     #<sprt_image
.169e	84 fd		                sty     zpage2
.16a0	a0 42		                ldy     #66
.16a2	b1 fb		nextbyte        lda     (zpage1),y
.16a4	91 fd		                sta     (zpage2),y
.16a6	88		                dey
.16a7	d0 f9		                bne     nextbyte
.16a9	20 72 09	                jsr     restzp2
.16ac	20 54 09	                jsr     restzp1
.16af	20 4f 08	                jsr     pop
.16b2	60		                rts
>16b3	00		sprt_xoffset    .byte   $00
>16b4	00		sprt_yoffset    .byte   $00
>16b5	00 00		sprt_x          .word   $0000
>16b7	00 00		sprt_y          .word   $0000
>16b9			sprt_image      .fill 66
>16fb	00 00 00 00	sprt_crxair     .byte $00, $00, $00, $00, $00, $00
>16ff	00 00
>1701	00 66 00 00	                .byte $00, $66, $00, $00, $3c, $00
>1705	3c 00
>1707	00 18 00 00	                .byte $00, $18, $00, $00, $00, $00
>170b	00 00
>170d	00 00 00 00	                .byte $00, $00, $00, $00, $18, $00
>1711	18 00
>1713	80 00 01 c0	                .byte $80, $00, $01, $c0, $18, $03
>1717	18 03
>1719	66 66 66 c0	                .byte $66, $66, $66, $c0, $18, $03
>171d	18 03
>171f	80 00 01 00	                .byte $80, $00, $01, $00, $18, $00
>1723	18 00
>1725	00 00 00 00	                .byte $00, $00, $00, $00, $00, $00
>1729	00 00
>172b	00 18 00 00	                .byte $00, $18, $00, $00, $3c, $00
>172f	3c 00
>1731	00 66 00 00	                .byte $00, $66, $00, $00, $00, $00
>1735	00 00
>1737	00 00 00 01	                .byte $00, $00, $00, $01, $0c, $28
>173b	0c 28
>173d	80 00 00 e0	sprt_mouse      .byte $80, $00, $00, $e0, $00, $00      ;1
>1741	00 00
>1743	b8 00 00 ce	                .byte $b8, $00, $00, $ce, $00, $00
>1747	00 00
>1749	83 80 00 c0	                .byte $83, $80, $00, $c0, $e0, $00
>174d	e0 00
>174f	80 18 00 c0	                .byte $80, $18, $00, $c0, $3c, $00
>1753	3c 00
>1755	80 e0 00 c0	                .byte $80, $e0, $00, $c0, $60, $00
>1759	60 00
>175b	98 30 00 fc	                .byte $98, $30, $00, $fc, $18, $00
>175f	18 00
>1761	c6 0c 00 03	                .byte $c6, $0c, $00, $03, $06, $00
>1765	06 00
>1767	01 9c 00 00	                .byte $01, $9c, $00, $00, $f0, $00
>176b	f0 00
>176d	00 40 00 00	                .byte $00, $40, $00, $00, $00, $00
>1771	00 00
>1773	00 00 00 00	                .byte $00, $00, $00, $00, $00, $00
>1777	00 00
>1779	00 00 00 01	                .byte $00, $00, $00, $01, $18, $31
>177d	18 31
>177f	00 7c 00 01	sprt_pointer    .byte $00, $7c, $00, $01, $83, $00
>1783	83 00
>1785	06 10 c0 08	                .byte $06, $10, $c0, $08, $00, $30
>1789	00 30
>178b	12 10 88 20	                .byte $12, $10, $88, $20, $00, $08
>178f	00 08
>1791	40 ba 04 40	                .byte $40, $ba, $04, $40, $6c, $04
>1795	6c 04
>1797	80 c6 02 aa	                .byte $80, $c6, $02, $aa, $82, $aa
>179b	82 aa
>179d	80 c6 02 40	                .byte $80, $c6, $02, $40, $6c, $04
>17a1	6c 04
>17a3	40 ba 04 20	                .byte $40, $ba, $04, $20, $00, $08
>17a7	00 08
>17a9	12 10 90 08	                .byte $12, $10, $90, $08, $00, $20
>17ad	00 20
>17af	06 10 c0 01	                .byte $06, $10, $c0, $01, $83, $00
>17b3	83 00
>17b5	00 7c 00 00	                .byte $00, $7c, $00, $00, $00, $00
>17b9	00 00
>17bb	00 00 00 01	                .byte $00, $00, $00, $01, $0c, $28
>17bf	0c 28
>17c1	55 55 55 aa	sprt_pointer2   .byte $55, $55, $55, $aa, $aa, $aa     ;6
>17c5	aa aa
>17c7	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa     ;12
>17cb	aa aa
>17cd	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa     ;18
>17d1	aa aa
>17d3	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a     ;24
>17d7	00 2a
>17d9	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a     ;30
>17dd	00 2a
>17df	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a     ;36
>17e3	00 2a
>17e5	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a     ;42
>17e9	00 2a
>17eb	54 00 55 aa	                .byte $54, $00, $55, $aa, $aa, $aa     ;48
>17ef	aa aa
>17f1	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa     ;54
>17f5	aa aa
>17f7	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa     ;60
>17fb	aa aa
>17fd	55 55 55 01	                .byte $55, $55, $55, $01, $0c, $28     ;63
>1801	0c 28
>1803	06 00 00 0f	sprt_hand       .byte $06, $00, $00, $0f, $00, $00
>1807	00 00
>1809	19 80 00 10	                .byte $19, $80, $00, $10, $80, $00
>180d	80 00
>180f	19 80 00 16	                .byte $19, $80, $00, $16, $b1, $8c
>1813	b1 8c
>1815	10 ca 52 10	                .byte $10, $ca, $52, $10, $84, $21
>1819	84 21
>181b	10 84 21 30	                .byte $10, $84, $21, $30, $84, $21
>181f	84 21
>1821	50 84 21 90	                .byte $50, $84, $21, $90, $84, $21
>1825	84 21
>1827	90 00 01 90	                .byte $90, $00, $01, $90, $00, $01
>182b	00 01
>182d	90 7f c1 90	                .byte $90, $7f, $c1, $90, $00, $01
>1831	00 01
>1833	40 ff e2 40	                .byte $40, $ff, $e2, $40, $00, $02
>1837	00 02
>1839	3c 00 04 02	                .byte $3c, $00, $04, $02, $00, $08
>183d	00 08
>183f	03 ff f8 01	                .byte $03, $ff, $f8, $01, $12, $31
>1843	12 31
>1845	00 3e 00 01	sprt_ultraman   .byte $00, $3e, $00, $01, $c1, $c0     ; 6
>1849	c1 c0
>184b	0e 3e 30 08	                .byte $0e, $3e, $30, $08, $41, $08     ; 12
>184f	41 08
>1851	10 1c 04 10	                .byte $10, $1c, $04, $10, $22, $04     ; 18
>1855	22 04
>1857	24 1c 12 23	                .byte $24, $1c, $12, $23, $00, $62     ; 24
>185b	00 62
>185d	20 08 02 47	                .byte $20, $08, $02, $47, $c1, $f1     ; 30
>1861	c1 f1
>1863	6a aa ab 47	                .byte $6a, $aa, $ab, $47, $c9, $f1     ; 36
>1867	c9 f1
>1869	20 08 02 20	                .byte $20, $08, $02, $20, $14, $02     ; 42
>186d	14 02
>186f	20 00 02 10	                .byte $20, $00, $02, $10, $00, $04     ; 48
>1873	00 04
>1875	10 7f 04 08	                .byte $10, $7f, $04, $08, $00, $08     ; 54
>1879	00 08
>187b	06 3e 30 01	                .byte $06, $3e, $30, $01, $c1, $c0     ; 60
>187f	c1 c0
>1881	00 3e 00 01	                .byte $00, $3e, $00, $01, $0c, $28     ; 63
>1885	0c 28
>1887	00 1c 00 00	sprt_male       .byte $00, $1c, $00, $00, $3e, $00 ; 6
>188b	3e 00
>188d	00 3e 00 00	                .byte $00, $3e, $00, $00, $3e, $00 ; 12
>1891	3e 00
>1893	00 1c 00 00	                .byte $00, $1c, $00, $00, $08, $00 ; 18
>1897	08 00
>1899	00 ff 80 00	                .byte $00, $ff, $80, $00, $ff, $80 ; 24
>189d	ff 80
>189f	00 be 80 00	                .byte $00, $be, $80, $00, $9c, $80 ; 30
>18a3	9c 80
>18a5	00 88 80 00	                .byte $00, $88, $80, $00, $be, $80 ; 36
>18a9	be 80
>18ab	00 be 80 01	                .byte $00, $be, $80, $01, $9c, $c0 ; 42
>18af	9c c0
>18b1	01 94 c0 00	                .byte $01, $94, $c0, $00, $14, $00 ; 48
>18b5	14 00
>18b7	00 14 00 00	                .byte $00, $14, $00, $00, $14, $00 ; 54
>18bb	14 00
>18bd	00 36 00 00	                .byte $00, $36, $00, $00, $77, $00 ; 60
>18c1	77 00
>18c3	00 77 00 01	                .byte $00, $77 ,$00, $01, $0c, $2f ; 66, X,X,X color, xoffset, yoffset
>18c7	0c 2f
>18c9	00 3c 00 00	sprt_robot      .byte $00, $3c, $00, $00, $24, $00
>18cd	24 00
>18cf	00 66 18 00	                .byte $00, $66, $18, $00, $66, $38
>18d3	66 38
>18d5	00 24 38 00	                .byte $00, $24, $38, $00, $3c, $10
>18d9	3c 10
>18db	00 18 10 00	                .byte $00, $18, $10, $00, $18, $10
>18df	18 10
>18e1	0f ff f0 08	                .byte $0f, $ff, $f0, $08, $7e, $00
>18e5	7e 00
>18e7	08 7e 00 08	                .byte $08, $7e, $00, $08, $18, $00
>18eb	18 00
>18ed	1c 18 00 1c	                .byte $1c, $18, $00, $1c, $18, $00
>18f1	18 00
>18f3	18 3c 00 00	                .byte $18, $3c, $00, $00, $3c, $00
>18f7	3c 00
>18f9	00 24 00 00	                .byte $00, $24, $00, $00, $24, $00
>18fd	24 00
>18ff	00 24 00 03	                .byte $00, $24, $00, $03, $e7, $c0
>1903	e7 c0
>1905	03 e7 c0 01	                .byte $03, $e7, $c0, $01, $0c, $28
>1909	0c 28
>190b	00 1c 00 00	sprt_femme      .byte $00, $1c, $00, $00, $3e, $00 ; 6
>190f	3e 00
>1911	00 3e 00 00	                .byte $00, $3e, $00, $00, $3e, $00 ; 12
>1915	3e 00
>1917	00 1c 00 00	                .byte $00, $1c, $00, $00, $08, $00 ; 18
>191b	08 00
>191d	00 7f 00 00	                .byte $00, $7f, $00, $00, $ff, $80 ; 24
>1921	ff 80
>1923	00 be 80 00	                .byte $00, $be, $80, $00, $9c, $80 ; 30
>1927	9c 80
>1929	00 88 80 00	                .byte $00, $88, $80, $00, $9c, $80 ; 36
>192d	9c 80
>192f	00 be 80 01	                .byte $00, $be, $80, $01, $be, $c0 ; 42
>1933	be c0
>1935	01 be c0 00	                .byte $01, $be, $c0, $00, $7f, $00 ; 48
>1939	7f 00
>193b	00 7f 00 00	                .byte $00, $7f, $00, $00, $ff, $80 ; 54
>193f	ff 80
>1941	00 36 00 00	                .byte $00, $36, $00, $00, $77, $00 ; 60
>1945	77 00
>1947	00 55 00 01	                .byte $00, $55 ,$00, $01, $0c, $2f ; 66, X,X,X color, xoffset, yoffset
>194b	0c 2f
>194d	b9 16		sprt_ptr0       .word  sprt_image + (0*66)
>194f	fb 16		sprt_ptr1       .word  sprt_image + (1*66)
>1951	3d 17		sprt_ptr2       .word  sprt_image + (2*66)
>1953	7f 17		sprt_ptr3       .word  sprt_image + (3*66)
>1955	c1 17		sprt_ptr4       .word  sprt_image + (4*66)
>1957	03 18		sprt_ptr5       .word  sprt_image + (5*66)
>1959	45 18		sprt_ptr6       .word  sprt_image + (6*66)
>195b	87 18		sprt_ptr7       .word  sprt_image + (7*66)
>195d	c9 18		sprt_ptr8       .word  sprt_image + (8*66)
>195f	0b 19		sprt_ptr9       .word  sprt_image + (9*66)
>1961	ff		testbyte        .byte 255
=$07			sprt_txtcol     =       vjaune
=$00			sprt_txtbak     =       bkcol0
=$01			sprt_color      =       vwhite
>1962	07 00 04 0e	sprite_pos      .byte   sprt_txtcol,sprt_txtbak,4,14
>1966	d3 50 52 49	                .text        "Sprite pos. (x,y):($0000, $0000)"
>196a	54 45 20 50 4f 53 2e 20 28 58 2c 59 29 3a 28 24
>197a	30 30 30 30 2c 20 24 30 30 30 30 29
>1986	00		                .byte   0

;******  Return to file: mainsd.asm

.1987			main
.1987	20 d5 0a	                jsr     sd_setvectors
.198a	20 70 0a	                jsr     scrmaninit
.198d	20 bc 10	                jsr     js_init
.1990	a9 80		                lda     #$80
.1992	8d c3 0a	                sta     curcol
.1995	a9 00		                lda     #0
.1997	8d c5 0a	                sta     bakcol
.199a	a9 06		                lda     #vbleu
.199c	8d c4 0a	                sta     brdcol
.199f	20 7c 0a	                jsr     cls
.19a2	a9 20		                lda     #$20
.19a4	09 00		                ora     #%00000000
.19a6	a0 04		                ldy     #$04
.19a8	a2 04		                ldx     #$04
.19aa	20 9e 08	                jsr     memfill
.19ad	a9 00		                lda     #$00
.19af	a0 d8		                ldy     #$d8
.19b1	20 9e 08	                jsr     memfill
.19b4	20 3a 15	                jsr     sprt_init
.19b7	a2 3d		goagain         ldx     #<bstring1
.19b9	a0 1a		                ldy     #>bstring1
.19bb	20 94 0a	                jsr     putscxy
.19be	a2 6a		                ldx     #<bstring2
.19c0	a0 1a		                ldy     #>bstring2
.19c2	20 94 0a	                jsr     putscxy
.19c5	a2 97		                ldx     #<bstring3
.19c7	a0 1a		                ldy     #>bstring3
.19c9	20 94 0a	                jsr     putscxy
.19cc	a2 f1		                ldx     #<js_status1
.19ce	a0 1a		                ldy     #>js_status1
.19d0	20 94 0a	                jsr     putscxy
.19d3	a2 09		                ldx     #<js_status2
.19d5	a0 1b		                ldy     #>js_status2
.19d7	20 94 0a	                jsr     putscxy
.19da	a2 20		                ldx     #<js_status3
.19dc	a0 1b		                ldy     #>js_status3
.19de	20 94 0a	                jsr     putscxy
.19e1	a2 39		                ldx     #<js_status4
.19e3	a0 1b		                ldy     #>js_status4
.19e5	20 94 0a	                jsr     putscxy
.19e8	a2 52		                ldx     #<js_status5
.19ea	a0 1b		                ldy     #>js_status5
.19ec	20 94 0a	                jsr     putscxy
.19ef	a2 68		                ldx     #<js_status6
.19f1	a0 1b		                ldy     #>js_status6
.19f3	20 94 0a	                jsr     putscxy
.19f6	a2 00		                ldx     #$00
.19f8	a0 0f		                ldy     #$0f
.19fa	20 a0 0a	                jsr     gotoxy
.19fd	a9 07		                lda     #vjaune
.19ff	20 97 0a	                jsr     setcurcol
.1a02	a2 00		                ldx     #$00
.1a04	20 9d 0a	                jsr     setbkcol
.1a07	20 d3 10	looper          jsr     js_scan
.1a0a	20 e5 12	                jsr     js_showvals
.1a0d	20 08 14	                jsr     js_updatecurs
.1a10	20 c6 15	                jsr     sprt_move
.1a13	48		                pha
.1a14	ad ad 14	                lda     js_2fire
.1a17	29 0f		                and     #$0f
.1a19	8d 20 d0	                sta     vborder
.1a1c	49 0f		                eor     #$0f
.1a1e	f0 10		                beq     nochange
.1a20	8d 29 d0	                sta     $d029
.1a23	20 10 08	                jsr     push
.1a26	a2 03		                ldx     #3
.1a28	a0 16		                ldy     #22
.1a2a	20 62 0a	                jsr     putabinxy
.1a2d	20 4f 08	                jsr     pop
.1a30	68		nochange        pla
.1a31	4c 07 1a	                jmp     looper
.1a34	20 e1 ff	                jsr     kstop
.1a37	d0 ce		                bne     looper
.1a39	20 66 fe	                jsr     k_warmboot
.1a3c	60		out             rts
>1a3d	0d 80 00 00	bstring1        .byte   vvert1,bkcol2,0,0
>1a41	20 20 20 20	                .text   "      Visualisation du port jeu #2      "
>1a45	20 20 56 09 13 15 01 0c 09 13 01 14 09 0f 0e 20
>1a55	04 15 20 10 0f 12 14 20 0a 05 15 20 23 32 20 20
>1a65	20 20 20 20
>1a69	00		                .byte   0
>1a6a	0e c0 00 01	bstring2        .byte   vbleu1,bkcol3,0,1
>1a6e	20 20 20 20	                .text   "     Programme assembleur pour 6502     "
>1a72	20 50 12 0f 07 12 01 0d 0d 05 20 01 13 13 05 0d
>1a82	02 0c 05 15 12 20 10 0f 15 12 20 36 35 30 32 20
>1a92	20 20 20 20
>1a96	00		                .byte   0
>1a97	0a 40 00 02	bstring3        .byte   vrose,bkcol1,0,2
>1a9b	20 20 20 20	                .text   "      par Daniel Lafrance (2021) C      "
>1a9f	20 20 10 01 12 20 44 01 0e 09 05 0c 20 4c 01 06
>1aaf	12 01 0e 03 05 20 28 32 30 32 31 29 20 43 20 20
>1abf	20 20 20 20
>1ac3	00		                .byte   0
>1ac4	07 40 00 03	bstring4        .byte   vjaune,bkcol1,0,3
>1ac8	20 20 20 20	                .text   "    Ce programme utilise le port #2     "
>1acc	43 05 20 10 12 0f 07 12 01 0d 0d 05 20 15 14 09
>1adc	0c 09 13 05 20 0c 05 20 10 0f 12 14 20 23 32 20
>1aec	20 20 20 20
>1af0	00		                .byte   0
>1af1	0d 00 13 16	js_status1      .byte   vvert1,bkcol0,19,22
>1af5	20 20 20 15	                .text   "   up <----1> haut "
>1af9	10 20 3c 2d 2d 2d 2d 31 3e 20 08 01 15 14 20
>1b08	00		                .byte   0
>1b09	0e 00 13 15	js_status2      .byte   vbleu1,bkcol0,19,21
>1b0d	20 04 0f 17	                .text   " down <---2-> bas "
>1b11	0e 20 3c 2d 2d 2d 32 2d 3e 20 02 01 13 20
>1b1f	00		                .byte   0
>1b20	0a 00 13 14	js_status3      .byte   vrose,bkcol0,19,20
>1b24	20 0c 05 06	                .text   " left <--4--> gauche"
>1b28	14 20 3c 2d 2d 34 2d 2d 3e 20 07 01 15 03 08 05
>1b38	00		                .byte   0
>1b39	07 00 13 13	js_status4      .byte   vjaune,bkcol0,19,19
>1b3d	12 09 07 08	                .text   "right <-8---> droite"
>1b41	14 20 3c 2d 38 2d 2d 2d 3e 20 04 12 0f 09 14 05
>1b51	00		                .byte   0
>1b52	01 00 13 12	js_status5      .byte   vblanc,bkcol0,19,18
>1b56	20 46 09 12	                .text   " Fire <1----> Feu"
>1b5a	05 20 3c 31 2d 2d 2d 2d 3e 20 46 05 15
>1b67	00		                .byte   0
>1b68	03 00 01 17	js_status6      .byte   vcyan,bkcol0,1,23
>1b6c	2b 2d 3e 20	                .text   "+-> Joystick status: %---FRLDU EOR #$1F"
>1b70	4a 0f 19 13 14 09 03 0b 20 13 14 01 14 15 13 3a
>1b80	20 25 2d 2d 2d 46 52 4c 44 55 20 45 4f 52 20 23
>1b90	24 31 46
>1b93	00		                .byte   0

;******  End of listing

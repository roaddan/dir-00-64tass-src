
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L js2test-mc.txt -o js2test-mc.prg js2test-mc.asm
; Sun Jun 11 22:24:27 2023

;Offset	;Hex		;Source

;******  Processing input file: js2test-mc.asm

="20230611-201549"	               VERSION="20230611-201549"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: js2test-mc.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: js2test-mc.asm

.080d			main
.080d	20 8c 0a	               jsr  screendis
.0810	20 6e 0d	               jsr scrmaninit
.0813	20 dc 11	               jsr js_init
.0816	a9 80		               lda #$80
.0818	8d 5a 0d	               sta curcol
.081b	a9 00		               lda #0
.081d	8d 21 d0	               sta vicbackcol
.0820	a9 06		               lda #vbleu
.0822	8d 20 d0	               sta vicbordcol
.0825	20 fe 0d	               jsr cls
.0828	a9 20		               lda #$20
.082a	09 00		               ora #%00000000
.082c	a0 04		               ldy #$04
.082e	a2 04		               ldx #$04
.0830	20 34 0b	               jsr memfill
.0833	a9 00		               lda #$00
.0835	a0 d8		               ldy #$d8
.0837	20 34 0b	               jsr memfill
.083a	20 68 16	               jsr sprt_init
.083d	20 5b 0e	goagain        jsr setinverse
.0840	a2 1e		                ldx #<bstring1
.0842	a0 09		                ldy #>bstring1
.0844	20 fe 0e	                jsr putscxy
.0847	a2 4b		                ldx #<bstring2
.0849	a0 09		                ldy #>bstring2
.084b	20 fe 0e	                jsr putscxy
.084e	a2 78		                ldx #<bstring3
.0850	a0 09		                ldy #>bstring3
.0852	20 fe 0e	                jsr putscxy
.0855	a2 a5		                ldx #<bstring4
.0857	a0 09		                ldy #>bstring4
.0859	20 fe 0e	                jsr putscxy
.085c	20 65 0e	               jsr clrinverse
.085f	a2 bc		                ldx #<js_status1
.0861	a0 09		                ldy #>js_status1
.0863	20 fe 0e	                jsr putscxy
.0866	a2 d4		                ldx #<js_status2
.0868	a0 09		                ldy #>js_status2
.086a	20 fe 0e	                jsr putscxy
.086d	a2 eb		                ldx #<js_status3
.086f	a0 09		                ldy #>js_status3
.0871	20 fe 0e	                jsr putscxy
.0874	a2 04		                ldx #<js_status4
.0876	a0 0a		                ldy #>js_status4
.0878	20 fe 0e	                jsr putscxy
.087b	a2 1d		                ldx #<js_status5
.087d	a0 0a		                ldy #>js_status5
.087f	20 fe 0e	                jsr putscxy
.0882	a2 33		                ldx #<js_status6
.0884	a0 0a		                ldy #>js_status6
.0886	20 fe 0e	                jsr putscxy
.0889	a2 5f		                ldx #<version
.088b	a0 0a		                ldy #>version
.088d	20 fe 0e	                jsr putscxy
.0890	a2 00		               ldx #$00
.0892	a0 0f		               ldy #$0f
.0894	20 c1 0e	               jsr gotoxy
.0897	a9 07		               lda #vjaune
.0899	20 2d 0f	               jsr setcurcol
.089c	a2 00		               ldx #$00
.089e	20 42 0f	               jsr setbkcol
.08a1	20 99 0a	               jsr screenena
.08a4	20 f3 11	looper         jsr js_scan
.08a7	20 06 09	               jsr putjs2val
.08aa	20 11 14	               jsr js_showvals
.08ad	20 f4 16	               jsr sprt_move
.08b0	48		loopit         pha
.08b1	ad d9 15	               lda js_2fire
.08b4	f0 42		               beq nochange
.08b6	20 06 09	               jsr putjs2val
.08b9	ad 20 d0	               lda vicbordcol
.08bc	18		               clc
.08bd	69 00		               adc #$0
.08bf	29 0f		               and #$0f
.08c1	8d 20 d0	               sta vicbordcol
.08c4	ad d8 15	               lda js_2y
.08c7	c9 04		               cmp #$04
.08c9	d0 1d		               bne toborder
.08cb	ad d7 15	               lda js_2x
.08ce	c9 0b		               cmp #$0b
.08d0	30 16		               bmi toborder
.08d2	c9 1d		               cmp #$1d
.08d4	10 12		               bpl toborder
.08d6	ee bd 16	               inc sprt_ptr
.08d9	ad bd 16	               lda sprt_ptr
.08dc	c9 09		               cmp #9
.08de	90 02		               bcc drawsptr
.08e0	a9 00		               lda #$00
.08e2	8d bd 16	drawsptr       sta sprt_ptr
.08e5	20 68 16	               jsr sprt_init
.08e8	ad 20 d0	toborder       lda vicbordcol
.08eb	38		               sec
.08ec	69 00		               adc #0
.08ee	29 0f		               and #$0f
.08f0	8d 29 d0	               sta $d029
.08f3	a9 00		               lda #$00
.08f5	8d d9 15	               sta js_2fire
.08f8	e8		nochange       inx
.08f9	68		               pla
.08fa	20 e1 ff	               jsr kstop
.08fd	d0 a5		               bne looper
.08ff	4c a4 08	               jmp looper
.0902	20 66 fe	               jsr k_warmboot
.0905	60		out            rts
.0906	08		putjs2val      php
.0907	48		               pha
.0908	a2 16		               ldx #$16
.090a	a0 11		               ldy #$11
.090c	20 c1 0e	               jsr gotoxy
.090f	a9 0d		               lda #vvert1
.0911	20 2d 0f	               jsr setcurcol
.0914	ad 67 16	               lda js_2status
.0917	20 3b 0d	               jsr putabinfmt
.091a	68		               pla
.091b	28		               plp
.091c	60		               rts
>091d	00		onebyte        .byte   0
>091e	01 c0 00 00	bstring1       .byte   vblanc,bkcol3,0,0
>0922	20 20 20 20	               .null   "      Visualisation du port jeu #2      "
>0926	20 20 56 09 13 15 01 0c 09 13 01 14 09 0f 0e 20
>0936	04 15 20 10 0f 12 14 20 0a 05 15 20 23 32 20 20
>0946	20 20 20 20 00
>094b	01 40 00 01	bstring2       .byte   vblanc,bkcol1,0,1
>094f	20 50 12 0f	               .null   " Programme assembleur pour 6510 sur C64 "
>0953	07 12 01 0d 0d 05 20 01 13 13 05 0d 02 0c 05 15
>0963	12 20 10 0f 15 12 20 36 35 31 30 20 13 15 12 20
>0973	43 36 34 20 00
>0978	00 80 00 02	bstring3       .byte   vnoir,bkcol2,0,2
>097c	20 20 20 10	               .null   "   par Daniel Lafrance (c) 2021-2023    "
>0980	01 12 20 44 01 0e 09 05 0c 20 4c 01 06 12 01 0e
>0990	03 05 20 28 03 29 20 32 30 32 31 2d 32 30 32 33
>09a0	20 20 20 20 00
>09a5	03 c0 0b 04	bstring4       .byte   vcyan,bkcol3,11,4
>09a9	20 43 08 01	               .null   " Changer pointeur "
>09ad	0e 07 05 12 20 10 0f 09 0e 14 05 15 12 20 00
>09bc	03 00 13 16	js_status1     .byte   vcyan,bkcol0,19,22
>09c0	20 20 20 15	               .null   "   up <----1> haut "
>09c4	10 20 3c 2d 2d 2d 2d 31 3e 20 08 01 15 14 20 00
>09d4	0e 00 13 15	js_status2     .byte   vbleu1,bkcol0,19,21
>09d8	20 04 0f 17	               .null   " down <---2-> bas "
>09dc	0e 20 3c 2d 2d 2d 32 2d 3e 20 02 01 13 20 00
>09eb	0a 00 13 14	js_status3     .byte   vrose,bkcol0,19,20
>09ef	20 0c 05 06	               .null   " left <--4--> gauche"
>09f3	14 20 3c 2d 2d 34 2d 2d 3e 20 07 01 15 03 08 05
>0a03	00
>0a04	07 00 13 13	js_status4     .byte   vjaune,bkcol0,19,19
>0a08	12 09 07 08	               .null   "right <-8---> droite"
>0a0c	14 20 3c 2d 38 2d 2d 2d 3e 20 04 12 0f 09 14 05
>0a1c	00
>0a1d	01 00 13 12	js_status5     .byte   vblanc,bkcol0,19,18
>0a21	20 46 09 12	               .null   " Fire <1----> Feu"
>0a25	05 20 3c 31 2d 2d 2d 2d 3e 20 46 05 15 00
>0a33	0e 00 01 17	js_status6     .byte   vbleu1,bkcol0,1,23
>0a37	2b 2d 3e 20	               .null   "+-> Etat de JS2:     %---FRLDU EOR #$1F"
>0a3b	45 14 01 14 20 04 05 20 4a 53 32 3a 20 20 20 20
>0a4b	20 25 2d 2d 2d 46 52 4c 44 55 20 45 4f 52 20 23
>0a5b	24 31 46 00
>0a5f	00 c0 00 18	version        .byte   vnoir,bkcol3,0,24
>0a63	20 20 20 20	               .null   format("        Version: %s        ",VERSION)
>0a67	20 20 20 20 56 05 12 13 09 0f 0e 3a 20 32 30 32
>0a77	33 30 36 31 31 2d 32 30 31 35 34 39 20 20 20 20
>0a87	20 20 20 20 00

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ;  97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c1			stal            =       $c1     ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.0a8c			libtart

;******  Return to file: js2test-mc.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: js2test-mc.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.0a8c			screendis
.0a8c	08		               php
.0a8d	48		               pha
.0a8e	ad 11 d0	               lda  $d011
.0a91	29 ef		               and  #%11101111
.0a93	8d 11 d0	               sta  $d011
.0a96	68		               pla
.0a97	28		               plp
.0a98	60		               rts
.0a99			screenena
.0a99	08		               php
.0a9a	48		               pha
.0a9b	ad 11 d0	               lda  $d011
.0a9e	09 10		               ora  #%00010000
.0aa0	8d 11 d0	               sta  $d011
.0aa3	68		               pla
.0aa4	28		               plp
.0aa5	60		               rts

;******  Return to file: js2test-mc.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.0aa6			push
.0aa6	08		          php            ; stack : flg, pcl, pch
.0aa7	78		          sei
.0aa8	8d e2 0a	          sta  ra        ; save a
.0aab	68		          pla            ; stack : pcl, pch
.0aac	8d e1 0a	          sta  rp        ; save rp
.0aaf	68		          pla            ; stack : pch
.0ab0	8d e3 0a	          sta  pc        ; save pcl
.0ab3	68		          pla            ; stack : -
.0ab4	8d e4 0a	          sta  pc+1      ; save pch
.0ab7	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0ab9	48		          pha            ; stack : zp1l
.0aba	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0abc	48		          pha            ; stack : zp1h, zp1l
.0abd	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0abf	48		          pha            ; stack : zp2l, zp1h, zp1l
.0ac0	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0ac2	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0ac3	ad e1 0a	          lda  rp        ; get rp
.0ac6	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0ac7	ad e2 0a	          lda  ra        ; get a
.0aca	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0acb	8a		          txa            ; get x
.0acc	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0acd	98		          tya            ; get y
.0ace	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0acf	ad e4 0a	          lda  pc+1      ; get pch
.0ad2	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ad3	ad e3 0a	          lda  pc        ; get pcl
.0ad6	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ad7	ad e1 0a	          lda  rp        ; get rp
.0ada	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0adb	ad e2 0a	          lda  ra        ; get a
.0ade	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0adf	58		          cli
.0ae0	60		          rts
>0ae1	00		rp        .byte     0
>0ae2	00		ra        .byte     0
>0ae3	00 00		pc        .word     0
.0ae5			pull
.0ae5			pop
.0ae5	78		          sei
.0ae6	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ae7	8d 1a 0b	          sta  pc        ; save pcl
.0aea	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0aeb	8d 1b 0b	          sta  pc+1      ; save pch
.0aee	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0aef	a8		          tay            ; set y
.0af0	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0af1	aa		          tax            ; set x
.0af2	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0af3	8d 19 0b	          sta  ra        ; save a
.0af6	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0af7	8d 18 0b	          sta  rp        ; save rp
.0afa	68		          pla            ; stack : zp2l, zp1h, zp1l
.0afb	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0afd	68		          pla            ; stack : zp1h, zp1l
.0afe	85 fd		          sta  zpage2    ; get zpage2 High byte
.0b00	68		          pla            ; stack : zp1l
.0b01	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0b03	68		          pla            ; stack :
.0b04	85 fb		          sta  zpage1    ; get zpage1 High byte
.0b06	ad 1b 0b	          lda  pc+1      ; get pch
.0b09	48		          pha            ; stack : pch
.0b0a	ad 1a 0b	          lda  pc
.0b0d	48		          pha            ; stack : pcl, pch
.0b0e	ad 18 0b	          lda  rp        ; get rp
.0b11	48		          pha            ; stack : rp, pcl, pch
.0b12	ad 19 0b	          lda  ra        ; set ra
.0b15	58		          cli
.0b16	28		          plp            ; stack : pcl, pch
.0b17	60		          rts
>0b18	00		rp        .byte     0
>0b19	00		ra        .byte     0
>0b1a	00 00		pc        .word     0

;******  Return to file: js2test-mc.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.0b1c			blkfill
.0b1c	20 a6 0a	bf0            jsr  push
.0b1f	20 da 0b	               jsr  savezp1
.0b22	84 fc		               sty  zpage1+1
.0b24	a0 00		               ldy  #$00
.0b26	84 fb		               sty  zpage1
.0b28	91 fb		bf1            sta  (zpage1),y
.0b2a	c8		               iny
.0b2b	d0 fb		               bne  bf1
.0b2d	20 e9 0b	               jsr  restzp1
.0b30	20 e5 0a	               jsr  pop
.0b33	60		               rts
.0b34			memfill
.0b34	20 a6 0a	               jsr  push
.0b37	20 1c 0b	mf1            jsr  blkfill
.0b3a	c8		               iny
.0b3b	ca		               dex
.0b3c	d0 f9		               bne  mf1
.0b3e	20 e5 0a	               jsr  pop
.0b41	60		               rts
.0b42			memmove
.0b42	20 a6 0a	               jsr  push
.0b45	ba		               tsx            ; On se crée un pointeur ...
.0b46	8a		               txa
.0b47	18		               clc
.0b48	69 0b		               adc  #11
.0b4a	a8		               tay
.0b4b	a2 06		               ldx  #$06
.0b4d	b9 00 01	nextbyte       lda  $0100,y
.0b50	99 9c 0b	               sta  words,y
.0b53	c8		               iny
.0b54	ca		               dex
.0b55	d0 f6		               bne  nextbyte
.0b57	ad 9c 0b	               lda  s
.0b5a	8d 73 0b	               sta  source+1
.0b5d	ad 9d 0b	               lda  s+1
.0b60	8d 74 0b	               sta  source+2
.0b63	ad 9e 0b	               lda  d
.0b66	8d 70 0b	               sta  destin+1
.0b69	ad 9f 0b	               lda  d+1
.0b6c	8d 71 0b	               sta  destin+2
.0b6f	ad ff ff	destin         lda  $ffff
.0b72	8d ff ff	source         sta  $ffff
.0b75	ee 70 0b	               inc  destin+1
.0b78	d0 03		               bne  src
.0b7a	ee 71 0b	               inc  destin+2
.0b7d	ee 73 0b	src            inc  source+1
.0b80	d0 03		               bne  cnt
.0b82	ee 74 0b	               inc  source+2
.0b85	ad a0 0b	cnt            lda  compte
.0b88	d0 08		               bne  decit
.0b8a	ad a1 0b	               lda  compte+1
.0b8d	f0 09		               beq  fini
.0b8f	ce a1 0b	               dec  compte+1
.0b92	ce a0 0b	decit          dec  compte
.0b95	4c 6f 0b	               jmp  destin
.0b98	20 e5 0a	fini           jsr  pop
.0b9b	60		               rts
.0b9c			words
>0b9c	00 00		s         .word     $0000
>0b9e	00 00		d         .word     $0000
>0ba0	00 00		compte    .word     $0000
.0ba2			decword
.0ba2	20 a6 0a	               jsr  push
.0ba5	86 fd		               stx  zpage2
.0ba7	84 fe		               sty  zpage2+1
.0ba9	20 e5 0a	               jsr  pop
.0bac	60		               rts
.0bad			inczp1
.0bad	08		               php
.0bae	e6 fb		               inc  zpage1
.0bb0	d0 02		               bne  nopage
.0bb2	e6 fc		               inc  zpage1+1
.0bb4	28		nopage         plp
.0bb5	60		               rts
.0bb6			deczp1
.0bb6	08		                php
.0bb7	48		                pha
.0bb8	c6 fb		                dec  zpage1
.0bba	d0 02		                bne  nopage
.0bbc	c6 fc		                dec  zpage1+1
.0bbe	c6 fb		nopage          dec  zpage1
.0bc0	68		                pla
.0bc1	28		                plp
.0bc2	60		                rts
.0bc3			inczp2
.0bc3	08		               php
.0bc4	48		               pha
.0bc5	e6 fd		               inc  zpage2
.0bc7	d0 02		               bne  nopage
.0bc9	e6 fe		               inc  zpage2+1
.0bcb	68		nopage         pla
.0bcc	28		               plp
.0bcd	60		               rts
.0bce			deczp2
.0bce	08		               php
.0bcf	48		               pha
.0bd0	a5 fd		               lda  zpage2
.0bd2	d0 02		               bne  nopage
.0bd4	c6 fe		               dec  zpage2+1
.0bd6	c6 fd		nopage         dec  zpage2
.0bd8	28		               plp
.0bd9	60		               rts
.0bda			savezp1
.0bda	08		               php
.0bdb	48		               pha
.0bdc	a5 fb		               lda  zpage1
.0bde	8d 56 0c	               sta  zp1
.0be1	a5 fc		               lda  zpage1+1
.0be3	8d 57 0c	               sta  zp1+1
.0be6	68		               pla
.0be7	28		               plp
.0be8	60		               rts
.0be9			restzp1
.0be9	08		               php
.0bea	48		               pha
.0beb	ad 56 0c	               lda zp1
.0bee	85 fb		               sta zpage1
.0bf0	ad 57 0c	               lda zp1+1
.0bf3	85 fc		               sta zpage1+1
.0bf5	68		               pla
.0bf6	28		               plp
.0bf7	60		               rts
.0bf8			savezp2
.0bf8	08		         php
.0bf9	48		         pha
.0bfa	a5 fd		         lda zpage2
.0bfc	8d 58 0c	         sta zp2
.0bff	a5 fe		         lda zpage2+1
.0c01	8d 59 0c	         sta zp2+1
.0c04	68		         pla
.0c05	28		         plp
.0c06	60		         rts
.0c07			restzp2
.0c07	08		                php
.0c08	48		                pha
.0c09	ad 58 0c	                lda  zp2
.0c0c	85 fd		                sta  zpage2
.0c0e	ad 59 0c	                lda  zp2+1
.0c11	85 fe		                sta  zpage2+1
.0c13	68		                pla
.0c14	28		                plp
.0c15	60		                rts
.0c16			xy2addr
.0c16	08		                php
.0c17	48		                pha
.0c18	8a		                txa
.0c19	48		                pha
.0c1a	98		                tya
.0c1b	48		                pha
.0c1c	ad 51 0c	                lda     addr1+1
.0c1f	8d 53 0c	                sta     addr2+1
.0c22	ad 50 0c	                lda     addr1
.0c25	8d 52 0c	                sta     addr2
.0c28	c0 00		                cpy     #$00
.0c2a	f0 0f		                beq     addx
.0c2c	18		moreline        clc
.0c2d	6d 4f 0c	                adc     ymult
.0c30	90 03		                bcc     norepy
.0c32	ee 53 0c	                inc     addr2+1
.0c35	8d 52 0c	norepy          sta     addr2
.0c38	88		                dey
.0c39	d0 f1		                bne     moreline
.0c3b	8a		addx            txa
.0c3c	18		                clc
.0c3d	6d 52 0c	                adc     addr2
.0c40	90 03		                bcc     thatsit
.0c42	ee 53 0c	                inc     addr2+1
.0c45	8d 52 0c	thatsit         sta     addr2
.0c48	68		                pla
.0c49	a8		                tay
.0c4a	68		                pla
.0c4b	aa		                tax
.0c4c	68		                pla
.0c4d	28		                plp
.0c4e	60		                rts
>0c4f	28		ymult          .byte     40
>0c50	00 00		addr1          .word     $0000
>0c52	00 00		addr2          .word     $0000
>0c54	00 00		bytecnt        .word     $0000
>0c56	00 00		zp1        .word   $0000
>0c58	00 00		zp2        .word   $0000

;******  Return to file: js2test-mc.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>0c5a	01		a2hexcol       .byte     1              ; pour aputscxy
>0c5b	00		a2hexbkcol     .byte     %00000000
.0c5c			a2hexpos
>0c5c	00		a2hexpx        .byte     0              ; pour aputsxy
>0c5d	00		a2hexpy        .byte     0
>0c5e	24		a2hexprefix    .byte     "$"            ; pour aputs
>0c5f	00 00		a2hexstr       .word     $00
>0c61	00 00		               .word     $00
>0c63	00		               .byte     0              ; 0 end string
.0c64			putahexfmtxy
.0c64	20 a6 0a	               jsr  push
.0c67	20 b3 0c	               jsr  a2hex
.0c6a	ae 5c 0c	               ldx  a2hexpx
.0c6d	ac 5d 0c	               ldy  a2hexpy
.0c70	20 c1 0e	               jsr  gotoxy
.0c73	a2 5e		               ldx  #<a2hexprefix
.0c75	a0 0c		               ldy  #>a2hexprefix
.0c77	20 b3 0e	               jsr  puts
.0c7a	20 e5 0a	               jsr  pop
.0c7d	60		               rts
.0c7e			putahexfmt
.0c7e	20 a6 0a	               jsr  push
.0c81	20 b3 0c	               jsr  a2hex
.0c84	a2 5e		               ldx  #<a2hexprefix
.0c86	a0 0c		               ldy  #>a2hexprefix
.0c88	20 b3 0e	               jsr  puts
.0c8b	20 e5 0a	               jsr  pop
.0c8e	60		               rts
.0c8f			putahex
.0c8f	20 a6 0a	               jsr  push
.0c92	20 b3 0c	               jsr  a2hex
.0c95	a2 5f		               ldx  #<a2hexstr
.0c97	a0 0c		               ldy  #>a2hexstr
.0c99	20 b3 0e	               jsr  puts
.0c9c	20 e5 0a	               jsr  pop
.0c9f	60		               rts
.0ca0			nib2hex
.0ca0	08		               php
.0ca1	29 0f		               and  #$0f
.0ca3	f8		               sed
.0ca4	18		               clc
.0ca5	69 90		               adc  #$90
.0ca7	69 40		               adc  #$40
.0ca9	d8		               cld
.0caa	28		               plp
.0cab	60		               rts
.0cac			lsra4bits
.0cac	08		               php
.0cad	4a		               lsr
.0cae	4a		               lsr
.0caf	4a		               lsr
.0cb0	4a		               lsr
.0cb1	28		               plp
.0cb2	60		               rts
.0cb3			a2hex
.0cb3	08		               php
.0cb4	48		               pha
.0cb5	48		               pha
.0cb6	20 ac 0c	               jsr  lsra4bits
.0cb9	20 a0 0c	               jsr  nib2hex
.0cbc	8d 5f 0c	               sta  a2hexstr
.0cbf	68		               pla
.0cc0	20 a0 0c	               jsr  nib2hex
.0cc3	8d 60 0c	               sta  a2hexstr+1
.0cc6	a9 00		               lda  #$00                ; set end of string
.0cc8	8d 61 0c	               sta  a2hexstr+2
.0ccb	68		               pla
.0ccc	28		               plp
.0ccd	60		               rts
.0cce			xy2hex
.0cce	20 a6 0a	               jsr  push
.0cd1	20 b3 0c	               jsr  a2hex
.0cd4	8a		               txa
.0cd5	48		               pha
.0cd6	20 ac 0c	               jsr  lsra4bits
.0cd9	20 a0 0c	               jsr  nib2hex
.0cdc	8d 5f 0c	               sta  a2hexstr
.0cdf	68		               pla
.0ce0	20 a0 0c	               jsr  nib2hex
.0ce3	8d 60 0c	               sta  a2hexstr+1
.0ce6	98		               tya
.0ce7	48		               pha
.0ce8	20 ac 0c	               jsr  lsra4bits
.0ceb	20 a0 0c	               jsr  nib2hex
.0cee	8d 61 0c	               sta  a2hexstr+2
.0cf1	68		               pla
.0cf2	20 a0 0c	               jsr  nib2hex
.0cf5	8d 62 0c	               sta  a2hexstr+3
.0cf8	a9 00		               lda  #$00                ; 0 ended string
.0cfa	8d 63 0c	               sta  a2hexstr+4
.0cfd	20 e5 0a	               jsr  pop
.0d00			atobin
.0d00	20 a6 0a	               jsr     push
.0d03	a2 08		               ldx     #8
.0d05	a0 00		               ldy     #0
.0d07	2a		nextbit        rol
.0d08	48		               pha
.0d09	69 00		               adc     #$00
.0d0b	29 01		               and     #$01
.0d0d	20 a0 0c	               jsr     nib2hex
.0d10	99 21 0d	               sta     abin,y
.0d13	68		               pla
.0d14	c8		               iny
.0d15	ca		               dex
.0d16	d0 ef		               bne     nextbit
.0d18	a9 00		               lda     #0
.0d1a	99 21 0d	               sta     abin,y
.0d1d	20 e5 0a	               jsr     pull
.0d20	60		               rts
>0d21	30 30 30 30	abin           .null   "00000000"
>0d25	30 30 30 30 00
.0d2a			putabin
.0d2a	20 00 0d	               jsr     atobin
.0d2d	20 a6 0a	               jsr     push
.0d30	a2 21		               ldx     #<abin
.0d32	a0 0d		               ldy     #>abin
.0d34	20 b3 0e	               jsr     puts
.0d37	20 e5 0a	               jsr     pop
.0d3a	60		               rts
.0d3b			putabinfmt
.0d3b	08		               php
.0d3c	48		               pha
.0d3d	a9 25		               lda     #"%"
.0d3f	20 6f 0e	               jsr     putch
.0d42	68		               pla
.0d43	20 2a 0d	               jsr     putabin
.0d46	28		               plp
.0d47	60		               rts
.0d48			putabinxy
.0d48	20 c1 0e	               jsr     gotoxy
.0d4b	20 2a 0d	               jsr     putabin
.0d4e	60		               rts
.0d4f			putabinfmtxy
.0d4f	20 c1 0e	               jsr     gotoxy
.0d52	20 3b 0d	               jsr     putabinfmt
.0d55	60		               rts

;******  Return to file: js2test-mc.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-text-mc.asm

>0d56	00 00		scrptr         .word     $00            ; ... pointe position ecran, ...
>0d58	00 00		colptr         .word     $00            ; ... pointe position couleur, ...
>0d5a	01		curcol         .byte     $01            ; ... la couleur du caractère, ...
>0d5b	06		brdcol         .byte     vbleu          ; ... la couleur de la bordure et
>0d5c	00		vicbkcol0      .byte     vnoir  ;$0b    ; 0,
>0d5d	02		vicbkcol1      .byte     vrouge ;$0b    ; 1,
>0d5e	05		vicbkcol2      .byte     vvert  ;$0b    ; 2,
>0d5f	06		vicbkcol3      .byte     vbleu  ;$0b    ; et 3.
>0d60	00		inverse        .byte     $00
>0d61	00 00 00 00	scraddr        .byte     0,0,0,0,0
>0d65	00
>0d66	00 00 00 00	coladdr        .byte     0,0,0,0,0
>0d6a	00
>0d6b	00		bkcol          .byte     %00000000      ; Pointeur de la couleur actuelle
>0d6c	00 04		virtaddr       .word     $0400          ; L'adresse de l'ecran virtuel
=$00			bkcol0         =         %00000000      ;
=$40			bkcol1         =         %01000000
=$80			bkcol2         =         %10000000
=$c0			bkcol3         =         %11000000
.0d6e			scrmaninit
.0d6e	08		               php            ; On sauvegarde les registres
.0d6f	48		               pha
.0d70	a9 15		               lda  #%00010101; Selectionne la plage memoire video
.0d72	8d 18 d0	               sta  $d018     ; et le jeu de caracteeres.
.0d75	ad 16 d0	               lda  $d016     ; 53270 Lecture valeur actuelle pour ne
.0d78	09 10		               ora  #%00010000; modifier que le bit 4.
.0d7a	29 ef		               and  #%11101111
.0d7c	8d 16 d0	               sta  $d016 ; 53270
.0d7f	ad 11 d0	               lda  $d011     ; On ne change que le bit 6 pour
.0d82	09 40		               ora  #%01000000; selectionner le md. couleur de
.0d84	8d 11 d0	               sta  $d011     ; 53270   ; fond etendu.
.0d87	ad 5c 0d	               lda  vicbkcol0
.0d8a	8d 21 d0	               sta  $d021     ; 53281
.0d8d	ad 5d 0d	               lda  vicbkcol1
.0d90	8d 22 d0	               sta  $d022     ; 53282
.0d93	ad 5e 0d	               lda  vicbkcol2
.0d96	8d 23 d0	               sta  $d023     ; 53283
.0d99	ad 5f 0d	               lda  vicbkcol3
.0d9c	8d 24 d0	               sta  $d024     ; 54284
.0d9f	a5 00		               lda  bkcol0    ; On charge et utilise la couleur de ...
.0da1	8d 6b 0d	               sta  bkcol     ; ... fond par defaut des caracteres.
.0da4	20 fe 0d	               jsr  cls       ; Finalement on efface l'ecran
.0da7	68		               pla
.0da8	28		               plp
.0da9	60		               rts
.0daa			curshome
.0daa	08		               php                      ; Sauvegarde flags ...
.0dab	48		               pha                      ; ... et accumulateur
.0dac	ad 6c 0d	               lda  virtaddr            ; In replace le pointeur ...
.0daf	8d 56 0d	               sta  scrptr              ; ... d'écran virtuel à sa ...
.0db2	ad 6d 0d	               lda  virtaddr+1          ; ... position initiale.
.0db5	8d 57 0d	               sta  scrptr+1
.0db8	20 e9 0d	               jsr  synccolptr          ; On synchronise le ptr couleur.
.0dbb	ad 5c 0d	               lda  vicbkcol0
.0dbe	8d 21 d0	               sta  $d021               ; On recharge les couleurs ...
.0dc1	ad 5d 0d	               lda  vicbkcol1           ; ... de fond par defaut tel ...
.0dc4	8d 22 d0	               sta  $d022               ; ... que specifie dans les ...
.0dc7	ad 5e 0d	               lda  vicbkcol2           ; ... les variables globales.
.0dca	8d 23 d0	               sta  $d023
.0dcd	ad 5f 0d	               lda  vicbkcol3
.0dd0	8d 24 d0	               sta  $d024
.0dd3	68		               pla                      ; Récupère l'accumulateur ...
.0dd4	28		               plp                      ; ... et les flags
.0dd5	60		               rts
.0dd6			incscrptr
.0dd6	08		               php                      ; Sauvegarde flags ...
.0dd7	48		               pha                      ; ... et accumulateur
.0dd8	ee 56 0d	               inc  scrptr              ; Incremente le pointeur
.0ddb	ad 56 0d	               lda  scrptr              ; Regarde si on doit faire un ...
.0dde	d0 03		               bne  pasdereport         ; ... report dans le MSB
.0de0	ee 57 0d	               inc  scrptr+1            ; Si oui on fait le repport
.0de3	20 e9 0d	pasdereport    jsr  synccolptr          ; On synchronise le ptr couleur.
.0de6	68		               pla                      ; Récupère l'accumulateur ...
.0de7	28		               plp                      ; ... et les flags
.0de8	60		               rts
.0de9			synccolptr
.0de9	08		               php                      ; Sauvegarde flags ...
.0dea	48		               pha                      ; ... et accumulateur
.0deb	ad 56 0d	               lda  scrptr              ; Récupère le LSB du scrptr ...
.0dee	8d 58 0d	               sta  colptr              ; ... pour le placer dans le colptr.
.0df1	ad 57 0d	               lda  scrptr+1            ; Récupère le mSB du scrptr, ...
.0df4	29 03		               and  #%00000011          ; ... le converti pour pointer ...
.0df6	09 d8		               ora  #%11011000          ; ... la RAM couleur ...
.0df8	8d 59 0d	               sta  colptr+1            ; ... et le sauvegarde.
.0dfb	68		               pla                      ; Récupère l'accumulateur ...
.0dfc	28		               plp                      ; ... et les flags
.0dfd	60		               rts
.0dfe			cls
.0dfe	20 a6 0a	               jsr  push                ; On sauvegarde les registres
.0e01	ad 6c 0d	               lda  virtaddr            ; On replace le curseur d'ecran à
.0e04	8d 56 0d	               sta  scrptr
.0e07	ad 6d 0d	               lda  virtaddr+1          ; sa position initiale, ($0400).
.0e0a	8d 57 0d	               sta  scrptr+1
.0e0d	20 e9 0d	               jsr  synccolptr          ; On synchronise la couleur.
.0e10	20 b5 0f	               jsr  scrptr2zp1          ; L'adresse actuelle dans le ZP1.
.0e13	ad 5b 0d	               lda  brdcol              ; On place la couleur ...
.0e16	8d 20 d0	               sta  vicbordcol          ; ... de la bordure.
.0e19	ad 6b 0d	               lda  bkcol               ; Associer couleur pour ...
.0e1c	8d 21 d0	               sta  vicbackcol          ; ... remplir l'ecran ...
.0e1f	a9 20		               lda  #$20                ; ... de caracteres espace.
.0e21	a2 04		               ldx  #4                  ; Quatre blocs de ...
.0e23	a0 00		nextline       ldy  #0                  ; ... 256 caracteres.
.0e25			nextcar
.0e25	91 fb		               sta  (zpage1),y          ;
.0e27	a5 fc		               lda  zpage1+1
.0e29	48		               pha
.0e2a	29 03		               and  #%00000011
.0e2c	09 d8		               ora  #%11011000
.0e2e	85 fc		               sta  zpage1+1
.0e30	a9 00		               lda  #0
.0e32	91 fb		               sta  (zpage1),y
.0e34	68		               pla
.0e35	85 fc		               sta  zpage1+1
.0e37	a9 20		               lda  #$20
.0e39	88		               dey
.0e3a	d0 e9		               bne  nextcar
.0e3c	e6 fc		               inc  zpage1+1
.0e3e	ca		               dex
.0e3f	d0 e4		               bne  nextcar
.0e41	a9 00		               lda  #$00
.0e43	8d 56 0d	               sta  scrptr
.0e46	a9 04		               lda  #$04
.0e48	8d 57 0d	               sta  scrptr+1
.0e4b	20 e9 0d	               jsr  synccolptr
.0e4e	20 e5 0a	               jsr  pop
.0e51	60		               rts
.0e52			setborder
.0e52	08		               php
.0e53	8d 5b 0d	               sta  brdcol
.0e56	8d 20 d0	               sta  vicbordcol
.0e59	28		               plp
.0e5a	60		               rts
.0e5b			setinverse
.0e5b	08		               php
.0e5c	48		               pha
.0e5d	a9 80		               lda  #%10000000
.0e5f	8d 60 0d	               sta  inverse
.0e62	68		               pla
.0e63	28		               plp
.0e64	60		               rts
.0e65			clrinverse
.0e65	08		               php
.0e66	48		               pha
.0e67	a9 00		               lda  #%00000000
.0e69	8d 60 0d	               sta  inverse
.0e6c	68		               pla
.0e6d	28		               plp
.0e6e	60		               rts
.0e6f			putch
.0e6f	20 a6 0a	               jsr  push           ; On sauvegarde les registres
.0e72	20 b5 0f	               jsr  scrptr2zp1     ; Place le ptr d'ecran sur zp1
.0e75	29 3f		               and  #%00111111     ; Masque des bits 6 et 7 pour la ouleur.
.0e77	0d 6b 0d	               ora  bkcol          ; On y ajoute la couleur du fond.
.0e7a	a0 00		               ldy  #0             ; Met Y à 0
.0e7c	91 fb		               sta  (zpage1),y     ; Affiche le caractere
.0e7e	ae 59 0d	               ldx  colptr+1       ; Place le MSB du ptr de couleur
.0e81	86 fc		               stx  zpage1+1       ; ... dans le MSB du zp1.
.0e83	ad 5a 0d	               lda  curcol         ; Charge la couleur voulu dans.
.0e86	91 fb		               sta  (zpage1),y     ; ... la ram de couleur.
.0e88	20 d6 0d	               jsr  incscrptr      ; Incremente le pointeur d'ecran.
.0e8b	20 e5 0a	               jsr  pop            ; Replace tous les registres
.0e8e	60		               rts
.0e8f			z2putch
.0e8f	20 a6 0a	               jsr  push           ; On sauvegarde les registres
.0e92	a0 00		               ldy  #$0            ; Met Y à 0
.0e94	b1 fd		               lda  (zpage2),y     ; Charge le caractere
.0e96	20 6f 0e	               jsr  putch          ; Appel pour affichage
.0e99	20 e5 0a	               jsr  pop            ; Replace tous les registres
.0e9c	60		               rts
.0e9d			z2puts
.0e9d	20 a6 0a	               jsr  push           ; On sauvegarde les registres
.0ea0	a0 00		               ldy  #$0            ; Met Y à 0
.0ea2	b1 fd		nextcar        lda  (zpage2),y     ; Charge le caractere
.0ea4	f0 09		               beq  endstr         ; Est-ce le 0 de fin de chaine ?
.0ea6	20 8f 0e	               jsr  z2putch        ; Appel pour affichage
.0ea9	20 c3 0b	               jsr  inczp2         ; On pointe zp2 sur le prochain caractere.
.0eac	4c a2 0e	               jmp  nextcar        ; On passe au prochain
.0eaf	20 e5 0a	endstr         jsr  pop            ; Replace tous les registres
.0eb2	60		               rts
.0eb3			puts
.0eb3	20 a6 0a	               jsr  push           ; On sauvegarde les registres
.0eb6	86 fd		               stx  zpage2         ; On positionne xp2 en fonction de
.0eb8	84 fe		               sty  zpage2+1       ; l'adresse reçcu dans X et Y
.0eba	20 9d 0e	               jsr  z2puts         ; Appel pour affichage
.0ebd	20 e5 0a	               jsr  pop            ; Replace tous les registres
.0ec0	60		               rts
.0ec1			gotoxy
.0ec1	20 a6 0a	               jsr  push           ; On sauvegarde les registres
.0ec4	20 aa 0d	               jsr  curshome       ;  retourne le curseur virtuel a 0,0.
.0ec7	c0 00		yagain         cpy  #0             ; Devons nous changer de ligne ?
.0ec9	f0 09		               beq  setx           ; Si non, on verifi les colonnes.
.0ecb	a9 28		               lda  #40            ; Si oui on ajoute 40
.0ecd	20 52 0f	               jsr  saddscrptr     ;  à l'adresse du pointeur virtuel autant
.0ed0	88		               dey                 ;  de fois qu'il est spécifié dans y.
.0ed1	4c c7 0e	               jmp  yagain         ; On passe au prochain y.
.0ed4	8a		setx           txa                 ; On ajoute la valeur de X
.0ed5	20 52 0f	               jsr  saddscrptr     ;  à l'adresse di pointeur virtuel.
.0ed8	20 e9 0d	               jsr  synccolptr     ; Synchro du pointeur des couleurs
.0edb	20 e5 0a	               jsr  pop            ; Replace tous les registres
.0ede	60		               rts
.0edf			putsxy
.0edf	20 a6 0a	               jsr  push           ; On sauvegarde les registres et le zp2
.0ee2	86 fd		               stx  zpage2         ; Place l'adr de chaine dans zp2
.0ee4	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.0ee6	a0 00		               ldy  #0             ; On place le compteur
.0ee8	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.0eea	aa		               tax                 ; de A à X
.0eeb	20 c3 0b	               jsr  inczp2         ; On deplace le pointeur
.0eee	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.0ef0	a8		               tay                 ; de A à Y
.0ef1	20 c1 0e	               jsr  gotoxy         ; gotoxy : X=col, Y=ligne
.0ef4	20 c3 0b	               jsr  inczp2         ; On deplace le pointeur
.0ef7	20 9d 0e	               jsr  z2puts         ; On imprime la chaine
.0efa	20 e5 0a	               jsr  pop            ; Replace tous les registres
.0efd	60		               rts
.0efe			putscxy
.0efe	20 a6 0a	               jsr  push           ; On Sauvegarde registres et zp2
.0f01	86 fd		               stx  zpage2         ; On place l'adresse de chaine dans zp2
.0f03	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.0f05	a0 00		               ldy  #0             ; Place le compteur
.0f07	b1 fd		               lda  (zpage2),y     ; Charge la couleur
.0f09	8d 5a 0d	               sta  curcol         ; ... et on la definie
.0f0c	20 c3 0b	               jsr  inczp2         ; Pointe le prochain byte
.0f0f	b1 fd		               lda  (zpage2),y     ; Récupere et sauvegarde ...
.0f11	8d 6b 0d	               sta  bkcol          ; ... l'index de couleur de fond
.0f14	20 c3 0b	               jsr  inczp2         ; Deplace le pointeur
.0f17	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.0f19	aa		               tax                 ; ... de A à X
.0f1a	20 c3 0b	               jsr  inczp2         ; Deplace le pointeur
.0f1d	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.0f1f	a8		               tay                 ; de A à Y
.0f20	20 c1 0e	               jsr  gotoxy         ; gotoxy : X=col, y=ligne
.0f23	20 c3 0b	               jsr  inczp2         ; Place le ptr en début de chaine
.0f26	20 9d 0e	               jsr  z2puts         ; On imprime la chaine
.0f29	20 e5 0a	               jsr  pop
.0f2c	60		               rts
.0f2d			setcurcol
.0f2d	08		               php
.0f2e	8d 5a 0d	               sta  curcol
.0f31	28		               plp
.0f32	60		               rts
.0f33			setvicbkcol
.0f33	08		               php
.0f34	48		               pha
.0f35	8a		               txa
.0f36	29 03		               and  #$03
.0f38	aa		               tax
.0f39	68		               pla
.0f3a	9d 5c 0d	               sta  vicbkcol0,x
.0f3d	9d 21 d0	               sta  $d021,x
.0f40	28		               plp
.0f41	60		               rts
.0f42			setbkcol
.0f42	08		               php
.0f43	48		               pha
.0f44	0a		               asl
.0f45	0a		               asl
.0f46	0a		               asl
.0f47	0a		               asl
.0f48	0a		               asl
.0f49	0a		               asl
.0f4a	29 c0		               and  #$c0
.0f4c	8d 6b 0d	               sta  bkcol
.0f4f	68		               pla
.0f50	28		               plp
.0f51	60		               rts
.0f52			saddscrptr
.0f52	08		               php
.0f53	48		               pha
.0f54	18		               clc
.0f55	6d 56 0d	               adc  scrptr
.0f58	8d 56 0d	               sta  scrptr
.0f5b	90 03		               bcc  norep
.0f5d	ee 57 0d	               inc  scrptr+1
.0f60	68		norep          pla
.0f61	28		               plp
.0f62	60		               rts
.0f63			scrptr2str
.0f63	20 a6 0a	               jsr  push
.0f66	ad 57 0d	               lda  scrptr+1
.0f69	48		               pha
.0f6a	20 ac 0c	               jsr  lsra4bits
.0f6d	20 a0 0c	               jsr  nib2hex
.0f70	8d 61 0d	               sta  scraddr
.0f73	68		               pla
.0f74	20 ac 0c	               jsr  lsra4bits
.0f77	20 a0 0c	               jsr  nib2hex
.0f7a	8d 62 0d	               sta  scraddr+1
.0f7d	ad 57 0d	               lda  scrptr+1
.0f80	48		               pha
.0f81	20 ac 0c	               jsr  lsra4bits
.0f84	20 a0 0c	               jsr  nib2hex
.0f87	8d 61 0d	               sta  scraddr
.0f8a	68		               pla
.0f8b	20 ac 0c	               jsr  lsra4bits
.0f8e	20 a0 0c	               jsr  nib2hex
.0f91	8d 62 0d	               sta  scraddr+1
.0f94	ad 56 0d	               lda  scrptr
.0f97	48		               pha
.0f98	20 ac 0c	               jsr  lsra4bits
.0f9b	20 a0 0c	               jsr  nib2hex
.0f9e	8d 63 0d	               sta  scraddr+2
.0fa1	8d 68 0d	               sta  coladdr+2
.0fa4	68		               pla
.0fa5	20 ac 0c	               jsr  lsra4bits
.0fa8	20 a0 0c	               jsr  nib2hex
.0fab	8d 64 0d	               sta  scraddr+3
.0fae	8d 69 0d	               sta  coladdr+3
.0fb1	20 e5 0a	               jsr  pop
.0fb4	60		               rts
.0fb5			scrptr2zp1
.0fb5	08		               php
.0fb6	48		               pha
.0fb7	ad 56 0d	               lda  scrptr
.0fba	85 fb		               sta  zpage1
.0fbc	ad 57 0d	               lda  scrptr+1
.0fbf	85 fc		               sta  zpage1+1
.0fc1	68		               pla
.0fc2	28		               plp
.0fc3	60		               rts
.0fc4			colptr2zp1
.0fc4	08		               php
.0fc5	48		               pha
.0fc6	ad 58 0d	               lda  colptr
.0fc9	85 fb		               sta  zpage1
.0fcb	ad 59 0d	               lda  colptr+1
.0fce	85 fc		               sta  zpage1+1
.0fd0	68		               pla
.0fd1	28		               plp
.0fd2	60		               rts
.0fd3			scrptr2zp2
.0fd3	08		               php
.0fd4	48		               pha
.0fd5	ad 56 0d	               lda  scrptr
.0fd8	85 fd		               sta  zpage2
.0fda	ad 57 0d	               lda  scrptr+1
.0fdd	85 fe		               sta  zpage2+1
.0fdf	68		               pla
.0fe0	28		               plp
.0fe1	60		               rts
.0fe2			colptr2zp2
.0fe2	08		               php
.0fe3	48		               pha
.0fe4	ad 58 0d	               lda  colptr
.0fe7	85 fd		               sta  zpage2
.0fe9	ad 59 0d	               lda  colptr+1
.0fec	85 fe		               sta  zpage2+1
.0fee	68		               pla
.0fef	28		               plp
.0ff0	60		               rts
.0ff1			putrahex
.0ff1	08		               php
.0ff2	48		               pha
.0ff3	20 b3 0c	               jsr     a2hex
.0ff6	a2 5a		               ldx     #<a2hexcol
.0ff8	a0 0c		               ldy     #>a2hexcol
.0ffa	20 b3 0e	               jsr     puts
.0ffd	68		               pla
.0ffe	28		               plp
.0fff	60		               rts
.1000			putrahexxy
.1000	08		               php
.1001	48		               pha
.1002	20 b3 0c	               jsr  a2hex
.1005	a9 5c		               lda  #<a2hexpos
.1007	a0 0c		               ldy  #>a2hexpos
.1009	20 df 0e	               jsr  putsxy
.100c	68		               pla
.100d	28		               plp
.100e	60		               rts
.100f			putrahexcxy
.100f	08		               php
.1010	68		               pla
.1011	20 b3 0c	               jsr  a2hex
.1014	a9 5c		               lda  #<a2hexpos
.1016	a0 0c		               ldy  #>a2hexpos
.1018	20 fe 0e	               jsr  putscxy
.101b	68		               pla
.101c	28		               plp
.101d	60		               rts

;******  Return to file: js2test-mc.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-showregs.asm

.101e			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=$c0			bkcol   =   bkcol3
.101e	08		                php
.101f	8d d0 11	                sta  rega
.1022	68		                pla
.1023	8d d3 11	                sta  regp
.1026	8e d1 11	                stx  regx
.1029	8c d2 11	                sty  regy
.102c	ba		                tsx
.102d	8e d4 11	                stx  regs
.1030	68		                pla
.1031	8d d6 11	                sta  regpcl
.1034	8d d7 11	                sta  regpcl2
.1037	68		                pla
.1038	8d d5 11	                sta  regpch
.103b	ad d0 11	                lda  rega
.103e	48		                pha
.103f	20 a0 0c	                jsr  nib2hex
.1042	8d 73 11	                sta  vala+1
.1045	68		                pla
.1046	20 ac 0c	                jsr  lsra4bits
.1049	20 a0 0c	                jsr  nib2hex
.104c	8d 72 11	                sta  vala
.104f	ad d2 11	                lda  regy
.1052	48		                pha
.1053	20 a0 0c	                jsr  nib2hex
.1056	8d 89 11	                sta  valy+1
.1059	68		                pla
.105a	20 ac 0c	                jsr  lsra4bits
.105d	20 a0 0c	                jsr  nib2hex
.1060	8d 88 11	                sta  valy
.1063	ad d1 11	                lda  regx
.1066	48		                pha
.1067	20 a0 0c	                jsr  nib2hex
.106a	8d 7e 11	                sta  valx+1
.106d	68		                pla
.106e	20 ac 0c	                jsr  lsra4bits
.1071	20 a0 0c	                jsr  nib2hex
.1074	8d 7d 11	                sta  valx
.1077	ad d3 11	                lda  regp
.107a	48		                pha
.107b	20 a0 0c	                jsr  nib2hex
.107e	8d 94 11	                sta  valp+1
.1081	68		                pla
.1082	20 ac 0c	                jsr  lsra4bits
.1085	20 a0 0c	                jsr  nib2hex
.1088	8d 93 11	                sta  valp
.108b	ad d4 11	                lda  regs
.108e	48		                pha
.108f	20 a0 0c	                jsr  nib2hex
.1092	8d 9f 11	                sta  vals+1
.1095	68		                pla
.1096	20 ac 0c	                jsr  lsra4bits
.1099	20 a0 0c	                jsr  nib2hex
.109c	8d 9e 11	                sta  vals
.109f	ad d5 11	                lda  regpch
.10a2	48		                pha
.10a3	20 a0 0c	                jsr  nib2hex
.10a6	8d ab 11	                sta  valpch+1
.10a9	68		                pla
.10aa	20 ac 0c	                jsr  lsra4bits
.10ad	20 a0 0c	                jsr  nib2hex
.10b0	8d aa 11	                sta  valpch
.10b3	ad d6 11	                lda  regpcl
.10b6	48		                pha
.10b7	20 a0 0c	                jsr  nib2hex
.10ba	8d ad 11	                sta  valpcl+1
.10bd	68		                pla
.10be	20 ac 0c	                jsr  lsra4bits
.10c1	20 a0 0c	                jsr  nib2hex
.10c4	8d ac 11	                sta  valpcl
.10c7	a5 fb		                lda  zpage1
.10c9	48		                pha
.10ca	20 a0 0c	                jsr  nib2hex
.10cd	8d bc 11	                sta  valz1l
.10d0	68		                pla
.10d1	20 ac 0c	                jsr  lsra4bits
.10d4	20 a0 0c	                jsr  nib2hex
.10d7	8d bd 11	                sta  valz1l+1
.10da	a5 fc		                lda  zpage1+1
.10dc	48		                pha
.10dd	20 a0 0c	                jsr  nib2hex
.10e0	8d ba 11	                sta  valz1h
.10e3	68		                pla
.10e4	20 ac 0c	                jsr  lsra4bits
.10e7	20 a0 0c	                jsr  nib2hex
.10ea	8d bb 11	                sta  valz1h+1
.10ed	a5 fd		                lda  zpage2
.10ef	48		                pha
.10f0	20 a0 0c	                jsr  nib2hex
.10f3	8d cc 11	                sta  valz2l
.10f6	68		                pla
.10f7	20 ac 0c	                jsr  lsra4bits
.10fa	20 a0 0c	                jsr  nib2hex
.10fd	8d cd 11	                sta  valz2l+1
.1100	a5 fe		                lda  zpage2+1
.1102	48		                pha
.1103	20 a0 0c	                jsr  nib2hex
.1106	8d ca 11	                sta  valz2h
.1109	68		                pla
.110a	20 ac 0c	                jsr  lsra4bits
.110d	20 a0 0c	                jsr  nib2hex
.1110	8d cb 11	                sta  valz2h+1
.1113	20 5b 0e	                jsr  setinverse
.1116	78		                sei
.1117	a2 6a		                ldx  #<srega
.1119	a0 11		                ldy  #>srega+1
.111b	20 fe 0e	                jsr  putscxy
.111e	a2 75		                ldx  #<sregx
.1120	a0 11		                ldy  #>sregx+1
.1122	20 fe 0e	                jsr  putscxy
.1125	a2 80		                ldx  #<sregy
.1127	a0 11		                ldy  #>sregy+1
.1129	20 fe 0e	                jsr  putscxy
.112c	a2 8b		                ldx  #<sregp
.112e	a0 11		                ldy  #>sregp+1
.1130	20 fe 0e	                jsr  putscxy
.1133	a2 96		                ldx  #<sregs
.1135	a0 11		                ldy  #>sregs+1
.1137	20 fe 0e	                jsr  putscxy
.113a	a2 a1		                ldx  #<sregpc
.113c	a0 11		                ldy  #>sregpc+1
.113e	20 fe 0e	                jsr  putscxy
.1141	a2 b0		                ldx  #<sregz1
.1143	a0 11		                ldy  #>sregz1+1
.1145	20 fe 0e	                jsr  putscxy
.1148	a2 c0		                ldx  #<sregz2
.114a	a0 11		                ldy  #>sregz2+1
.114c	20 fe 0e	                jsr  putscxy
.114f	58		                cli
.1150	20 65 0e	                jsr  clrinverse
.1153	ad d5 11	                lda  regpch
.1156	48		                pha
.1157	ad d6 11	                lda  regpcl
.115a	48		                pha
.115b	ac d2 11	                ldy  regy
.115e	ae d1 11	                ldx  regx
.1161	ad d3 11	                lda  regp
.1164	48		                pha
.1165	ad d0 11	                lda  rega
.1168	28		                plp
.1169	60		                rts
>116a	01 c0 00 17	srega   .byte   colr,bkcol,coln,line
>116e	20 01 3a 24	        .text   ' a:$' ;4,24
>1172	00 00 00	vala    .byte   0,0,0
>1175	01 c0 06 17	sregx   .byte   colr,bkcol,coln+6,line
>1179	20 18 3a 24	        .text   ' x:$' ;4,24
>117d	00 00 00	valx    .byte   0,0,0
>1180	01 c0 0c 17	sregy   .byte   colr,bkcol,coln+12,line
>1184	20 19 3a 24	        .text   ' y:$' ;4,24
>1188	00 00 00	valy    .byte   0,0,0
>118b	01 c0 12 17	sregp   .byte   colr,bkcol,coln+18,line
>118f	20 10 3a 24	        .text   ' p:$' ;4,24
>1193	00 00 00	valp    .byte   0,0,0
>1196	01 c0 18 17	sregs   .byte   colr,bkcol,coln+24,line
>119a	20 13 3a 24	        .text   ' s:$' ;4,24
>119e	00 00 00	vals    .byte   0,0,0
>11a1	01 c0 1e 17	sregpc  .byte   colr,bkcol,coln+30,line
>11a5	20 10 03 3a	        .text   ' pc:$' ;4,24
>11a9	24
>11aa	00 00		valpch  .byte   0,0
>11ac	00 00 20 00	valpcl  .byte   0,0,32,0
>11b0	01 c0 03 18	sregz1  .byte   colr,bkcol,coln+3,line+1
>11b4	20 1a 10 31	        .text   ' zp1:$' ;4,24
>11b8	3a 24
>11ba	00 00		valz1h  .byte   0,0
>11bc	00 00 20 00	valz1l  .byte   0,0,32,0
>11c0	01 c0 0f 18	sregz2  .byte   colr,bkcol,coln+15,line+1
>11c4	20 1a 10 32	        .text   ' zp2:$' ;4,24
>11c8	3a 24
>11ca	00 00		valz2h  .byte   0,0
>11cc	00 00 20 00	valz2l  .byte   0,0,32,0
>11d0	00		rega    .byte   0
>11d1	00		regx    .byte   0
>11d2	00		regy    .byte   0
>11d3	00		regp    .byte   0
>11d4	00		regs    .byte   0
>11d5	00		regpch  .byte   0
>11d6	00		regpcl  .byte   0
>11d7	00		regpcl2 .byte   0
>11d8	00		vzp1h   .byte   0
>11d9	00		vzp1l   .byte   0
>11da	00		vzp2h   .byte   0
>11db	00		vzp2l   .byte   0

;******  Return to file: js2test-mc.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-joystick.asm

=$dc00			js_2port       =    $dc00
=$dc01			js_1port       =    $dc01
=$dc02			js_2dir        =    $dc02
=$dc03			js_1dir        =    $dc03
=2			js_xoffset     =    2
=2			js_yoffset     =    2
=0			js_location    =    0
.11dc			js_init
.11dc	20 a6 0a	               jsr  push
.11df	ad 03 dc	               lda  js_1dir
.11e2	29 e0		               and  #$e0
.11e4	8d 03 dc	               sta  js_1dir
.11e7	ad 02 dc	               lda  js_2dir
.11ea	29 e0		               and  #$e0
.11ec	8d 02 dc	               sta  js_2dir
.11ef	20 e5 0a	               jsr  pop
.11f2	60		               rts
.11f3			js_scan
.11f3	20 fa 11	               jsr  js_1scan
.11f6	20 b0 12	               jsr  js_2scan
.11f9	60		               rts
.11fa			js_1scan
.11fa	20 a6 0a	               jsr  push
.11fd	ad 01 dc	               lda  js_1port
.1200	29 1f		               and  #$1f
.1202	48		               pha
.1203	49 1f		               eor  #$1f
.1205	8d 66 16	               sta  js_1status
.1208	68		               pla
.1209	c9 00		               cmp  #$00
.120b	d0 03		               bne  p1scan
.120d	4c a0 12	               jmp  port1_out
.1210	49 1f		p1scan         eor  #$1f
.1212	18		               clc
.1213	4a		js_1b0         lsr
.1214	90 14		               bcc  js_1b1
.1216	48		               pha
.1217	ee cf 15	               inc  js_1flag
.121a	ad cb 15	               lda  js_1pixy
.121d	38		               sec
.121e	e9 02		               sbc  #js_yoffset
.1220	c9 f0		               cmp  #$f0
.1222	90 02		               bcc  sto1ym
.1224	a9 00		               lda  #$00
.1226	8d cb 15	sto1ym         sta  js_1pixy
.1229	68		               pla
.122a	4a		js_1b1         lsr
.122b	90 14		               bcc  js_1b2
.122d	48		               pha
.122e	ee cf 15	               inc  js_1flag
.1231	ad cb 15	               lda  js_1pixy
.1234	18		               clc
.1235	69 02		               adc  #js_yoffset
.1237	c9 c7		               cmp  #199
.1239	90 02		               bcc  sto1yp
.123b	a9 c7		               lda  #199
.123d	8d cb 15	sto1yp         sta  js_1pixy
.1240	68		               pla
.1241	4a		js_1b2         lsr
.1242	90 20		               bcc  js_1b3
.1244	48		               pha
.1245	ee cf 15	               inc  js_1flag
.1248	ad c9 15	               lda  js_1pixx
.124b	0d ca 15	               ora  js_1pixx+1
.124e	f0 13		               beq  js_1b2out
.1250	38		               sec
.1251	ad c9 15	               lda  js_1pixx
.1254	e9 02		               sbc  #js_xoffset
.1256	8d c9 15	               sta  js_1pixx
.1259	b0 08		               bcs  js_1b2out
.125b	ad ca 15	               lda  js_1pixx+1
.125e	f0 03		               beq  js_1b2out
.1260	ce ca 15	               dec  js_1pixx+1
.1263	68		js_1b2out      pla
.1264	4a		js_1b3         lsr
.1265	90 22		               bcc  js_1b4
.1267	48		               pha
.1268	ee cf 15	               inc  js_1flag
.126b	ad ca 15	               lda  js_1pixx+1
.126e	f0 0a		               beq  incj1x
.1270	ad c9 15	               lda  js_1pixx
.1273	c9 3c		               cmp  #$40-4
.1275	30 03		               bmi  incj1x
.1277	4c 88 12	               jmp  js_1b3out
.127a	18		incj1x         clc
.127b	ad c9 15	               lda  js_1pixx
.127e	69 02		               adc  #js_xoffset
.1280	8d c9 15	               sta  js_1pixx
.1283	90 03		               bcc  js_1b3out
.1285	ee ca 15	               inc  js_1pixx+1
.1288	68		js_1b3out      pla
.1289	4a		js_1b4          lsr                     ;Estce le bbouton fire (F)
.128a	90 14		                bcc     port1_out       ;Oui!
.128c	ee cf 15	                inc     js_1flag
.128f	ee ce 15	                inc     js_1fire        ; on augmente le nombre de tir
.1292	a2 01		js_1wait        ldx     #$01
.1294	a0 ff		                ldy     #$ff
.1296	c8		js_1rel         iny
.1297	ad 01 dc	                lda     js_1port
.129a	49 ff		                eor     #$ff
.129c	29 10		                and     #$10
.129e	d0 f6		                bne     js_1rel         ; des boutons
.12a0	ad cf 15	port1_out       lda     js_1flag
.12a3	f0 08		                beq     out
.12a5	20 a7 13	                jsr     js_1correct
.12a8	a9 00		                lda     #0
.12aa	8d cf 15	                sta     js_1flag
.12ad	20 e5 0a	out             jsr     pop
.12b0			js_2scan
.12b0	20 a6 0a	                jsr     push
.12b3	ad 00 dc	port2           lda     js_2port
.12b6	29 1f		                and     #$1f
.12b8	48		                pha
.12b9	49 1f		                eor     #$1f
.12bb	8d 67 16	                sta js_2status
.12be	68		                pla
.12bf	c9 1f		                cmp	#$1f
.12c1	d0 03		                bne     p2scan
.12c3	4c 78 13	                jmp     port2_out
.12c6	49 1f		p2scan          eor     #$1f
.12c8	18		                clc
.12c9	4a		js_2b0          lsr                     ;On decale js_2 bit 0 dans C
.12ca	90 14		                bcc     js_2b1          ;Est-ce vers le haut (U)
.12cc	48		                pha                     ;On stack la valeur
.12cd	ee da 15	                inc     js_2flag
.12d0	ad d6 15	                lda     js_2pixy        ;Oui!
.12d3	38		                sec                     ;On place la carry a 1
.12d4	e9 02		                sbc     #js_yoffset     ;On reduit
.12d6	c9 f0		                cmp     #$f0
.12d8	90 02		                bcc     sto2ym
.12da	a9 00		                lda     #$00
.12dc	8d d6 15	sto2ym          sta     js_2pixy        ; le y
.12df	68		                pla                     ;On recupere la valeur
.12e0	4a		js_2b1          lsr                     ;On decale js_2 bit 0 dans C
.12e1	90 14		                bcc     js_2b2          ;Est-ce vers le bas (D)
.12e3	48		                pha                     ;On stack la valeur
.12e4	ee da 15	                inc     js_2flag
.12e7	ad d6 15	                lda     js_2pixy        ;Oui!
.12ea	18		                clc                     ;On place la carry a 0
.12eb	69 02		                adc     #js_yoffset     ;On augmente
.12ed	c9 c7		                cmp     #199
.12ef	90 02		                bcc     sto2yp
.12f1	a9 c7		                lda     #199
.12f3	8d d6 15	sto2yp          sta     js_2pixy        ; le y
.12f6	68		                pla                     ;On recupere la valeur
.12f7	4a		js_2b2          lsr                     ;On decale js_2 bit 0 dans C
.12f8	90 20		                bcc     js_2b3          ;Est-ce vers la gauche (L)
.12fa	48		                pha                     ;On stack la valeur
.12fb	ee da 15	                inc     js_2flag
.12fe	ad d4 15	                lda     js_2pixx        ;Oui!
.1301	0d d5 15	                ora     js_2pixx+1
.1304	f0 13		                beq     js_2b2out
.1306	38		                sec                     ;On place la carry a 1
.1307	ad d4 15	                lda     js_2pixx        ;Oui!
.130a	e9 02		                sbc     #js_xoffset     ;On diminue
.130c	8d d4 15	                sta     js_2pixx        ; le X
.130f	b0 08		                bcs     js_2b2out       ; de offset
.1311	ad d5 15	                lda     js_2pixx+1
.1314	f0 03		                beq     js_2b2out
.1316	ce d5 15	                dec     js_2pixx+1      ; sur 16 bits
.1319	68		js_2b2out       pla                     ;On recupere la valeur
.131a	4a		js_2b3          lsr                     ;On decale js_2 bit 0 dans C
.131b	90 22		                bcc     js_2b4          ;Est-ce vers la droite (R)
.131d	48		                pha                     ;On stack la valeur
.131e	ee da 15	                inc     js_2flag
.1321	ad d5 15	                lda     js_2pixx+1
.1324	f0 0a		                beq     incj2x
.1326	ad d4 15	                lda     js_2pixx
.1329	c9 3e		                cmp     #$40-js_xoffset
.132b	30 03		                bmi     incj2x
.132d	4c 3e 13	                jmp     js_2b3out
.1330	18		incj2x          clc                     ;On place la carry a 0
.1331	ad d4 15	                lda     js_2pixx        ;Oui!
.1334	69 02		                adc     #js_xoffset     ;On augmente
.1336	8d d4 15	                sta     js_2pixx        ; le X
.1339	90 03		                bcc     js_2b3out       ; de offset
.133b	ee d5 15	                inc     js_2pixx+1      ; sur 16 bits
.133e	68		js_2b3out       pla                     ;On recupere la valeur
.133f	4a		js_2b4          lsr                     ;Estce le bbouton fire (F)
.1340	90 36		                bcc     port2_out       ;Oui!
.1342	ee da 15	                inc     js_2flag
.1345	ee d9 15	                inc     js_2fire        ; on augmente le nombre de tir
.1348	a9 01		                lda     #%00000001
.134a	8d de 15	                sta     js_2events
.134d	ad d4 15	                lda     js_2pixx
.1350	8d db 15	                sta     js_2clickx
.1353	ad d5 15	                lda     js_2pixx+1
.1356	8d dc 15	                sta     js_2clickx+1
.1359	ad d6 15	                lda     js_2pixy
.135c	8d dd 15	                sta     js_2clicky
.135f	ad 40 16	                lda     js_2val16a+1
.1362	49 40		                eor     #%01000000
.1364	8d 40 16	                sta     js_2val16a+1
.1367	a2 00		js_2wait        ldx     #$00
.1369	a0 ff		                ldy     #$ff
.136b	c8		js_2rel         iny
.136c	d0 01		                bne     sr1
.136e	e8		                inx
.136f			sr1
.136f	ad 00 dc	                lda     js_2port
.1372	49 ff		                eor     #$ff
.1374	29 10		                and     #$10
.1376	d0 f3		                bne     js_2rel         ; des boutons
.1378	ad da 15	port2_out       lda     js_2flag
.137b	f0 08		                beq     out
.137d	20 dc 13	                jsr     js_2correct
.1380	a9 00		                lda     #0
.1382	8d da 15	                sta     js_2flag
.1385	20 e5 0a	out             jsr     pop
.1388			js_corrector
.1388	08		                php
.1389	48		                pha
.138a	ad cf 15	                lda     js_1flag
.138d	f0 08		                beq     check2
.138f	20 a7 13	                jsr     js_1correct
.1392	a9 00		                lda     #0
.1394	8d cf 15	                sta     js_1flag
.1397	ad da 15	check2          lda     js_2flag
.139a	f0 08		                beq     no_update
.139c	20 dc 13	                jsr     js_2correct
.139f	a9 00		                lda     #0
.13a1	8d da 15	                sta     js_2flag
.13a4	68		no_update       pla
.13a5	28		                plp
.13a6	60		                rts
.13a7			js_1correct
.13a7	08		                php
.13a8	48		                pha
.13a9	ad c9 15	                lda     js_1pixx
.13ac	8d da 13	                sta     vallsb
.13af	ad ca 15	                lda     js_1pixx+1
.13b2	6a		                ror                     ; ex = %0000000100000001 = 257 pixel
.13b3	6e da 13	                ror     vallsb          ; Cnnnnnnn      On divise par 8 pc les
.13b6	4e da 13	                lsr     vallsb          ; 0Cnnnnnn      caracteres de 8 pixels
.13b9	4e da 13	                lsr     vallsb          ; 00Cnnnnn
.13bc	ad da 13	                lda     vallsb          ; devient = %00100000 = 32
.13bf	8d cc 15	                sta     js_1x
.13c2	ad cb 15	                lda     js_1pixy
.13c5	8d da 13	                sta     vallsb
.13c8	4e da 13	                lsr     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.13cb	4e da 13	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.13ce	4e da 13	                lsr     vallsb          ; 00Cnnnnn
.13d1	ad da 13	                lda     vallsb          ; devient = %00100000 = 32
.13d4	8d cd 15	                sta     js_1y
.13d7	68		                pla
.13d8	28		                plp
.13d9	60		                rts
>13da	00		vallsb          .byte     0
>13db	00		regx            .byte     0
.13dc			js_2correct
.13dc	08		                php
.13dd	48		                pha
.13de	ad d4 15	                lda     js_2pixx
.13e1	8d 0f 14	                sta     vallsb
.13e4	ad d5 15	                lda     js_2pixx+1
.13e7	6a		                ror                     ; ex = %0000000100000001 = 257 pixel
.13e8	6e 0f 14	                ror     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.13eb	4e 0f 14	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.13ee	4e 0f 14	                lsr     vallsb          ; 00Cnnnnn
.13f1	ad 0f 14	                lda     vallsb          ; devient = %00100000 = 32
.13f4	8d d7 15	                sta     js_2x
.13f7	ad d6 15	                lda     js_2pixy
.13fa	8d 0f 14	                sta     vallsb
.13fd	4e 0f 14	                lsr     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.1400	4e 0f 14	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.1403	4e 0f 14	                lsr     vallsb          ; 00Cnnnnn
.1406	ad 0f 14	                lda     vallsb          ; devient = %00100000 = 32
.1409	8d d8 15	                sta     js_2y
.140c	68		                pla
.140d	28		                plp
.140e	60		                rts
>140f	00		vallsb          .byte     0
>1410	00		regx            .byte     0
.1411			js_showvals
.1411	20 a1 14	                jsr     js_2showvals
.1414	60		                rts
.1415			js_1showvals
.1415	20 a6 0a	                jsr     push
.1418	ad cc 15	                lda     js_1x
.141b	20 b3 0c	                jsr     a2hex
.141e	ad 60 0c	                lda     a2hexstr+1
.1421	8d f2 15	                sta     js_1val8+19
.1424	ad 61 0c	                lda     a2hexstr+2
.1427	8d f3 15	                sta     js_1val8+20
.142a	ad c9 15	                lda     js_1pixx
.142d	20 b3 0c	                jsr     a2hex
.1430	ad 60 0c	                lda     a2hexstr+1
.1433	8d 11 16	                sta     js_1val16+14
.1436	ad 61 0c	                lda     a2hexstr+2
.1439	8d 12 16	                sta     js_1val16+15
.143c	ad ca 15	                lda     js_1pixx+1
.143f	20 b3 0c	                jsr     a2hex
.1442	ad 60 0c	                lda     a2hexstr+1
.1445	8d 0f 16	                sta     js_1val16+12
.1448	ad 61 0c	                lda     a2hexstr+2
.144b	8d 10 16	                sta     js_1val16+13
.144e	ad cd 15	                lda     js_1y
.1451	20 b3 0c	                jsr     a2hex
.1454	ad 60 0c	                lda     a2hexstr+1
.1457	8d f6 15	                sta     js_1val8+23
.145a	ad 61 0c	                lda     a2hexstr+2
.145d	8d f7 15	                sta     js_1val8+24
.1460	ad cb 15	                lda     js_1pixy
.1463	20 b3 0c	                jsr     a2hex
.1466	ad 60 0c	                lda     a2hexstr+1
.1469	8d 17 16	                sta     js_1val16+20
.146c	ad 61 0c	                lda     a2hexstr+2
.146f	8d 18 16	                sta     js_1val16+21
.1472	a9 00		                lda     #0
.1474	20 b3 0c	                jsr     a2hex
.1477	ad 60 0c	                lda     a2hexstr+1
.147a	8d 15 16	                sta     js_1val16+18
.147d	ad 61 0c	                lda     a2hexstr+2
.1480	8d 16 16	                sta     js_1val16+19
.1483	ad ce 15	                lda     js_1fire
.1486	20 b3 0c	                jsr     a2hex
.1489	ad 61 0c	                lda     a2hexstr+2
.148c	8d 00 16	                sta     js_1val8+33
.148f	a2 df		                ldx     #<js_1val8
.1491	a0 15		                ldy     #>js_1val8
.1493	20 fe 0e	                jsr     putscxy
.1496	a2 03		                ldx     #<js_1val16
.1498	a0 16		                ldy     #>js_1val16
.149a	20 fe 0e	                jsr     putscxy
.149d	20 e5 0a	                jsr     pop
.14a0	60		                rts
.14a1			js_2showvals
.14a1	20 a6 0a	                jsr     push                    ; stack : y, x, a, flg
.14a4	ad d7 15	                lda     js_2x
.14a7	20 b3 0c	                jsr     a2hex
.14aa	ad 5f 0c	                lda     a2hexstr
.14ad	8d 2e 16	                sta     js_2val8+19
.14b0	ad 60 0c	                lda     a2hexstr+1
.14b3	8d 2f 16	                sta     js_2val8+20
.14b6	ad db 15	                lda     js_2clickx
.14b9	20 b3 0c	                jsr     a2hex
.14bc	ad 5f 0c	                lda     a2hexstr
.14bf	8d 5c 16	                sta     js_2val16+14
.14c2	ad 60 0c	                lda     a2hexstr+1
.14c5	8d 5d 16	                sta     js_2val16+15
.14c8	ad dc 15	                lda     js_2clickx+1
.14cb	20 b3 0c	                jsr     a2hex
.14ce	ad 5f 0c	                lda     a2hexstr
.14d1	8d 5a 16	                sta     js_2val16+12
.14d4	ad 60 0c	                lda     a2hexstr+1
.14d7	8d 5b 16	                sta     js_2val16+13
.14da	ad d8 15	                lda     js_2y
.14dd	20 b3 0c	                jsr     a2hex
.14e0	ad 5f 0c	                lda     a2hexstr
.14e3	8d 32 16	                sta     js_2val8+23
.14e6	ad 60 0c	                lda     a2hexstr+1
.14e9	8d 33 16	                sta     js_2val8+24
.14ec	ad dd 15	                lda     js_2clicky
.14ef	20 b3 0c	                jsr     a2hex
.14f2	ad 5f 0c	                lda     a2hexstr
.14f5	8d 62 16	                sta     js_2val16+20
.14f8	ad 60 0c	                lda     a2hexstr+1
.14fb	8d 63 16	                sta     js_2val16+21
.14fe	a9 00		                lda     #0
.1500	20 b3 0c	                jsr     a2hex
.1503	ad 5f 0c	                lda     a2hexstr
.1506	8d 60 16	                sta     js_2val16+18
.1509	ad 60 0c	                lda     a2hexstr+1
.150c	8d 61 16	                sta     js_2val16+19
.150f	ad d9 15	                lda     js_2fire
.1512	20 b3 0c	                jsr     a2hex
.1515	ad 60 0c	                lda     a2hexstr+1
.1518	8d 3c 16	                sta     js_2val8+33
.151b	a2 1b		                ldx     #<js_2val8
.151d	a0 16		                ldy     #>js_2val8
.151f	20 fe 0e	                jsr     putscxy
.1522	a2 3f		                ldx     #<js_2val16a
.1524	a0 16		                ldy     #>js_2val16a
.1526	20 fe 0e	                jsr     putscxy
.1529	a2 4e		                ldx     #<js_2val16
.152b	a0 16		                ldy     #>js_2val16
.152d	20 fe 0e	                jsr     putscxy
.1530	20 e5 0a	                jsr     pop
.1533	60		                rts
.1534			js_updatecurs
.1534	20 a6 0a	                jsr     push
.1537	ad d7 15	running         lda     js_2x
.153a	cd c3 15	                cmp     js_x
.153d	f0 06		                beq     chky
.153f	8d c3 15	                sta     js_x
.1542	ee 96 15	                inc     flag
.1545	ad d8 15	chky            lda     js_2y
.1548	cd c4 15	                cmp     js_y
.154b	f0 06		                beq     chkflag
.154d	8d c4 15	                sta     js_y
.1550	ee 96 15	                inc     flag
.1553	ad 96 15	chkflag         lda     flag
.1556	f0 1e		                beq     showit
.1558	ae c5 15	                ldx     js_oldx
.155b	ac c6 15	                ldy     js_oldy
.155e	20 97 15	                jsr     js_eoraddrxy
.1561	ae c3 15	                ldx     js_x
.1564	ac c4 15	                ldy     js_y
.1567	20 97 15	                jsr     js_eoraddrxy
.156a	ad c3 15	                lda     js_x
.156d	8d c5 15	                sta     js_oldx
.1570	ad c4 15	                lda     js_y
.1573	8d c6 15	                sta     js_oldy
.1576	a9 00		showit          lda     #0
.1578	8d 96 15	                sta     flag
.157b	8d 50 0c	                sta     addr1
.157e	a9 04		                lda     #$04
.1580	8d 51 0c	                sta     addr1+1
.1583	ae c3 15	                ldx     js_x
.1586	ac c4 15	                ldy     js_y
.1589	20 16 0c	                jsr     xy2addr
.158c	ac 52 0c	                ldy     addr2
.158f	ae 53 0c	                ldx     addr2+1
.1592	20 e5 0a	                jsr pop
.1595	60		                rts
>1596	00		flag            .byte   0
.1597			js_eoraddrxy
.1597	20 a6 0a	                jsr     push
.159a	20 f8 0b	                jsr     savezp2
.159d	a9 04		                lda     #$04
.159f	8d 51 0c	                sta     addr1+1
.15a2	a9 00		                lda     #0
.15a4	8d 50 0c	                sta     addr1
.15a7	20 16 0c	                jsr     xy2addr
.15aa	ac 52 0c	                ldy     addr2
.15ad	84 fd		                sty     zpage2
.15af	ae 53 0c	                ldx     addr2+1
.15b2	86 fe		                stx     zpage2+1
.15b4	a0 00		                ldy     #0
.15b6	b1 fd		                lda     (zpage2),y
.15b8	49 40		                eor     #%01000000
.15ba	91 fd		                sta     (zpage2),y
.15bc	20 07 0c	                jsr     restzp2
.15bf	20 e5 0a	                jsr     pop
.15c2	60		                rts
>15c3	00		js_x            .byte   0
>15c4	00		js_y            .byte   0
>15c5	ff		js_oldx         .byte   $ff
>15c6	ff		js_oldy         .byte   $ff
>15c7	00		js_oldcar       .byte   0
>15c8	00		js_oldcol       .byte   0
>15c9	00 00		js_1pixx        .word   0
>15cb	00		js_1pixy        .byte   0
>15cc	00		js_1x           .byte   0
>15cd	00		js_1y           .byte   0
>15ce	00		js_1fire        .byte   0
>15cf	00		js_1flag        .byte   0
>15d0	00 00		js_1clickx      .word   0
>15d2	00		js_1clicky      .byte   0
>15d3	00		js_1events      .byte   0
>15d4	00 00		js_2pixx        .word   0
>15d6	00		js_2pixy        .byte   0
>15d7	00		js_2x           .byte   0
>15d8	00		js_2y           .byte   0
>15d9	00		js_2fire        .byte   0
>15da	00		js_2flag        .byte   0
>15db	00 00		js_2clickx      .word   0
>15dd	00		js_2clicky      .byte   0
>15de	00		js_2events      .byte   0
=$03			js_txtcol       =       vcyan
=$00			js_txtbak       =       bkcol0
>15df	03 00 04 05	js_1val8        .byte     js_txtcol,js_txtbak,4,5
>15e3	50 0f 12 14	                .text   "Port 1 (x,y):($00,$00) Fire:(0)"
>15e7	20 31 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>15f7	30 29 20 46 09 12 05 3a 28 30 29
>1602	00		                .byte   0
>1603	03 00 0b 07	js_1val16       .byte   js_txtcol,js_txtbak,11,7
>1607	28 18 2c 19	                .text   "(x,y):($0000,$0000)"
>160b	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29
>161a	00		                .byte   0
>161b	03 00 04 0a	js_2val8        .byte   js_txtcol,js_txtbak,4,10
>161f	43 01 12 50	                .text   "CarPos (x,y):($00,$00) Fire:(0)"
>1623	0f 13 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>1633	30 29 20 46 09 12 05 3a 28 30 29
>163e	00		                .byte   0
>163f	01 00 04 0c	js_2val16a      .byte   vblanc,js_txtbak,4,12
>1643	43 0c 09 03	                .text   "Click pos."
>1647	0b 20 10 0f 13 2e
>164d	00		                .byte   0
>164e	03 00 10 0c	js_2val16       .byte   js_txtcol,js_txtbak,16,12
>1652	28 18 2c 19	                .text   "(x,y):($0000,$0000)"
>1656	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29
>1665	00		                .byte   0
>1666	00		js_1status     .byte 0
>1667	00		js_2status     .byte 0

;******  Return to file: js2test-mc.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-spriteman.asm

.1668			sprt_init
.1668	20 a6 0a	                jsr     push
.166b	ad bd 16	                lda     sprt_ptr
.166e	20 9f 17	                jsr     sprt_loadptr
.1671	20 da 0b	                jsr     savezp1
.1674	20 f8 0b	                jsr     savezp2
.1677	ad 15 d0	                lda     vic+$15 ; enable sprite 2
.167a	09 04		                ora     #%00000100
.167c	8d 15 d0	                sta     vic+$15
.167f	a9 0d		                lda     #$0d
.1681	8d fa 07	                sta     $7fa
.1684	ad 7b 1a	                lda     sprt_ptr0
.1687	85 fb		                sta     zpage1
.1689	ad 7c 1a	                lda     sprt_ptr0+1
.168c	85 fc		                sta     zpage1+1
.168e	a9 40		                lda     #$40
.1690	85 fd		                sta     zpage2
.1692	a9 03		                lda     #$03
.1694	85 fe		                sta     zpage2+1
.1696	a0 41		                ldy     #65
.1698	b1 fb		                lda     (zpage1),y      ; sprite y offset
.169a	8d e2 17	                sta     sprt_yoffset
.169d	88		                dey
.169e	b1 fb		                lda     (zpage1),y      ; sprite x offset
.16a0	8d e1 17	                sta     sprt_xoffset
.16a3	88		                dey
.16a4	b1 fb		                lda     (zpage1),y      ; sprite color
.16a6	8d 29 d0	                sta     $d029
.16a9	88		                dey
.16aa	a0 3e		                ldy     #62
.16ac	b1 fb		nextbyte        lda     (zpage1),y
.16ae	91 fd		                sta     (zpage2),y
.16b0	88		                dey
.16b1	d0 f9		                bne     nextbyte
.16b3	20 e9 0b	                jsr     restzp1
.16b6	20 07 0c	                jsr     restzp2
.16b9	20 e5 0a	                jsr     pop
.16bc	60		                rts
>16bd	01		sprt_ptr        .byte   $01
.16be			sprt_calcpos
.16be	20 a6 0a	                jsr     push
.16c1	a9 00		                lda     #0
.16c3	8d e4 17	                sta     sprt_x+1
.16c6	8d e6 17	                sta     sprt_y+1
.16c9	ad d5 15	                lda     js_2pixx+1
.16cc	18		                clc
.16cd	2a		                rol
.16ce	2a		                rol
.16cf	8d e4 17	                sta     sprt_x+1
.16d2	ad d4 15	                lda     js_2pixx
.16d5	18		                clc
.16d6	6d e1 17	                adc     sprt_xoffset
.16d9	8d e3 17	                sta     sprt_x
.16dc	90 08		                bcc     norepx
.16de	ad e4 17	                lda     sprt_x+1
.16e1	09 04		                ora     #$04
.16e3	8d e4 17	                sta     sprt_x+1
.16e6	ad d6 15	norepx          lda     js_2pixy
.16e9	18		                clc
.16ea	6d e2 17	                adc     sprt_yoffset
.16ed	8d e5 17	                sta     sprt_y
.16f0	20 e5 0a	                jsr     pop
.16f3	60		                rts
.16f4			sprt_move
.16f4	20 a6 0a	                jsr     push
.16f7	20 be 16	                jsr     sprt_calcpos
.16fa	ad e3 17	                lda     sprt_x
.16fd	8d 04 d0	                sta     vic+$04
.1700	ad e4 17	                lda     sprt_x+1
.1703	8d 10 d0	                sta     vic+$10
.1706	ad e5 17	                lda     sprt_y
.1709	8d 05 d0	                sta     vic+$05
.170c	20 13 17	                jsr     sprt_showpos
.170f	20 e5 0a	                jsr     pop
.1712	60		                rts
.1713			sprt_showpos
.1713	20 a6 0a	                jsr     push
.1716	ad e3 17	                lda     sprt_x
.1719	20 b3 0c	                jsr     a2hex
.171c	ad 5f 0c	                lda     a2hexstr
.171f	8d aa 1a	                sta     sprite_pos+26
.1722	ad 60 0c	                lda     a2hexstr+1
.1725	8d ab 1a	                sta     sprite_pos+27
.1728	ad e4 17	                lda     sprt_x+1
.172b	20 b3 0c	                jsr     a2hex
.172e	ad 5f 0c	                lda     a2hexstr
.1731	8d a8 1a	                sta     sprite_pos+24
.1734	ad 60 0c	                lda     a2hexstr+1
.1737	8d a9 1a	                sta     sprite_pos+25
.173a	ad e5 17	                lda     sprt_y
.173d	20 b3 0c	                jsr     a2hex
.1740	ad 5f 0c	                lda     a2hexstr
.1743	8d b0 1a	                sta     sprite_pos+32
.1746	ad 60 0c	                lda     a2hexstr+1
.1749	8d b1 1a	                sta     sprite_pos+33
.174c	a9 00		                lda     #0
.174e	20 b3 0c	                jsr     a2hex
.1751	ad 5f 0c	                lda     a2hexstr
.1754	8d ae 1a	                sta     sprite_pos+30
.1757	ad 60 0c	                lda     a2hexstr+1
.175a	8d af 1a	                sta     sprite_pos+31
.175d	a2 90		                ldx     #<sprite_pos
.175f	a0 1a		                ldy     #>sprite_pos
.1761	20 fe 0e	                jsr     putscxy
.1764	20 e5 0a	                jsr     pop
.1767	60		                rts
.1768			sprt_loadptr2
.1768	20 a6 0a	                jsr     push
.176b	aa		                tax
.176c	8e bd 16	                stx     sprt_ptr
.176f	ad 7c 1a	                lda     sprt_ptr0+1
.1772	8d 9e 17	                sta     calcbuff+1
.1775	ad 7b 1a	                lda     sprt_ptr0
.1778	8d 9d 17	                sta     calcbuff
.177b	e0 00		                cpx     #0
.177d	f0 11		                beq     addrok
.177f	ad 9d 17	                lda     calcbuff
.1782	18		nextx           clc
.1783	69 42		                adc     #66
.1785	90 03		                bcc     nocarry
.1787	ee 9e 17	                inc     calcbuff+1
.178a	8d 9d 17	nocarry         sta     calcbuff
.178d	ca		                dex
.178e	d0 f2		                bne     nextx
.1790	ac 9e 17	addrok          ldy     calcbuff+1
.1793	ae 9d 17	                ldx     calcbuff
.1796	20 b9 17	                jsr     sprt_setimage
.1799	20 e5 0a	                jsr     pop
.179c	60		                rts
>179d	00 00		calcbuff        .word   $0
.179f			sprt_loadptr
.179f	20 a6 0a	                jsr     push
.17a2	ad bd 16	                lda     sprt_ptr
.17a5	18		                clc
.17a6	2a		                rol
.17a7	a8		                tay
.17a8	b9 7b 1a	                lda     sprt_ptr0,y
.17ab	aa		                tax
.17ac	b9 7c 1a	                lda     sprt_ptr0+1,y
.17af	a8		                tay
.17b0	20 b9 17	                jsr     sprt_setimage
.17b3	20 e5 0a	                jsr     pop
.17b6	60		                rts
>17b7	00 00		calcbuff        .word   $0
.17b9			sprt_setimage
.17b9	20 a6 0a	                jsr     push
.17bc	20 da 0b	                jsr     savezp1
.17bf	20 f8 0b	                jsr     savezp2
.17c2	84 fc		                sty     zpage1+1
.17c4	86 fb		                stx     zpage1
.17c6	a0 17		                ldy     #>sprt_image
.17c8	84 fe		                sty     zpage2+1
.17ca	a0 e7		                ldy     #<sprt_image
.17cc	84 fd		                sty     zpage2
.17ce	a0 42		                ldy     #66
.17d0	b1 fb		nextbyte        lda     (zpage1),y
.17d2	91 fd		                sta     (zpage2),y
.17d4	88		                dey
.17d5	d0 f9		                bne     nextbyte
.17d7	20 07 0c	                jsr     restzp2
.17da	20 e9 0b	                jsr     restzp1
.17dd	20 e5 0a	                jsr     pop
.17e0	60		                rts
>17e1	00		sprt_xoffset    .byte   $00
>17e2	00		sprt_yoffset    .byte   $00
>17e3	00 00		sprt_x          .word   $0000
>17e5	00 00		sprt_y          .word   $0000
>17e7			sprt_image      .fill 66
>1829	00 00 00 00	sprt_crxair     .byte $00, $00, $00, $00, $00, $00 ; 6
>182d	00 00
>182f	00 66 00 00	                .byte $00, $66, $00, $00, $3c, $00 ; 12
>1833	3c 00
>1835	00 18 00 00	                .byte $00, $18, $00, $00, $00, $00 ; 18
>1839	00 00
>183b	00 00 00 00	                .byte $00, $00, $00, $00, $18, $00 ; 24
>183f	18 00
>1841	80 00 01 c0	                .byte $80, $00, $01, $c0, $18, $03 ; 30
>1845	18 03
>1847	66 66 66 c0	                .byte $66, $66, $66, $c0, $18, $03 ; 36
>184b	18 03
>184d	80 00 01 00	                .byte $80, $00, $01, $00, $18, $00 ; 42
>1851	18 00
>1853	00 00 00 00	                .byte $00, $00, $00, $00, $00, $00 ; 48
>1857	00 00
>1859	00 18 00 00	                .byte $00, $18, $00, $00, $3c, $00 ; 54
>185d	3c 00
>185f	00 66 00 00	                .byte $00, $66, $00, $00, $00, $00 ; 60
>1863	00 00
>1865	00 00 00 01	                .byte $00, $00, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>1869	0c 28
>186b	80 00 00 e0	sprt_mouse      .byte $80, $00, $00, $e0, $00, $00 ; 6
>186f	00 00
>1871	b8 00 00 ce	                .byte $b8, $00, $00, $ce, $00, $00 ; 12
>1875	00 00
>1877	83 80 00 c0	                .byte $83, $80, $00, $c0, $e0, $00 ; 18
>187b	e0 00
>187d	80 18 00 c0	                .byte $80, $18, $00, $c0, $3c, $00 ; 24
>1881	3c 00
>1883	80 e0 00 c0	                .byte $80, $e0, $00, $c0, $60, $00 ; 30
>1887	60 00
>1889	98 30 00 fc	                .byte $98, $30, $00, $fc, $18, $00 ; 36
>188d	18 00
>188f	c6 0c 00 03	                .byte $c6, $0c, $00, $03, $06, $00 ; 42
>1893	06 00
>1895	01 9c 00 00	                .byte $01, $9c, $00, $00, $f0, $00 ; 48
>1899	f0 00
>189b	00 40 00 00	                .byte $00, $40, $00, $00, $00, $00 ; 54
>189f	00 00
>18a1	00 00 00 00	                .byte $00, $00, $00, $00, $00, $00 ; 60
>18a5	00 00
>18a7	00 00 00 01	                .byte $00, $00, $00, $01, $18, $31 ; 66, X,X,X color, xoffset, yoffset
>18ab	18 31
>18ad	00 7c 00 01	sprt_pointer    .byte $00, $7c, $00, $01, $83, $00 ; 6
>18b1	83 00
>18b3	06 10 c0 08	                .byte $06, $10, $c0, $08, $00, $30 ; 12
>18b7	00 30
>18b9	12 10 88 20	                .byte $12, $10, $88, $20, $00, $08 ; 18
>18bd	00 08
>18bf	40 ba 04 40	                .byte $40, $ba, $04, $40, $6c, $04 ; 24
>18c3	6c 04
>18c5	80 c6 02 aa	                .byte $80, $c6, $02, $aa, $82, $aa ; 30
>18c9	82 aa
>18cb	80 c6 02 40	                .byte $80, $c6, $02, $40, $6c, $04 ; 36
>18cf	6c 04
>18d1	40 ba 04 20	                .byte $40, $ba, $04, $20, $00, $08 ; 42
>18d5	00 08
>18d7	12 10 90 08	                .byte $12, $10, $90, $08, $00, $20 ; 48
>18db	00 20
>18dd	06 10 c0 01	                .byte $06, $10, $c0, $01, $83, $00 ; 54
>18e1	83 00
>18e3	00 7c 00 00	                .byte $00, $7c, $00, $00, $00, $00 ; 60
>18e7	00 00
>18e9	00 00 00 01	                .byte $00, $00, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>18ed	0c 28
>18ef	55 55 55 aa	sprt_pointer2   .byte $55, $55, $55, $aa, $aa, $aa ; 6
>18f3	aa aa
>18f5	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 12
>18f9	aa aa
>18fb	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 18
>18ff	aa aa
>1901	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 24
>1905	00 2a
>1907	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 30
>190b	00 2a
>190d	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 36
>1911	00 2a
>1913	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 42
>1917	00 2a
>1919	54 00 55 aa	                .byte $54, $00, $55, $aa, $aa, $aa ; 48
>191d	aa aa
>191f	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 54
>1923	aa aa
>1925	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 60
>1929	aa aa
>192b	55 55 55 01	                .byte $55, $55, $55, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>192f	0c 28
>1931	06 00 00 0f	sprt_hand       .byte $06, $00, $00, $0f, $00, $00 ; 6
>1935	00 00
>1937	19 80 00 10	                .byte $19, $80, $00, $10, $80, $00 ; 12
>193b	80 00
>193d	19 80 00 16	                .byte $19, $80, $00, $16, $b1, $8c ; 18
>1941	b1 8c
>1943	10 ca 52 10	                .byte $10, $ca, $52, $10, $84, $21 ; 24
>1947	84 21
>1949	10 84 21 30	                .byte $10, $84, $21, $30, $84, $21 ; 30
>194d	84 21
>194f	50 84 21 90	                .byte $50, $84, $21, $90, $84, $21 ; 36
>1953	84 21
>1955	90 00 01 90	                .byte $90, $00, $01, $90, $00, $01 ; 42
>1959	00 01
>195b	90 7f c1 90	                .byte $90, $7f, $c1, $90, $00, $01 ; 48
>195f	00 01
>1961	40 ff e2 40	                .byte $40, $ff, $e2, $40, $00, $02 ; 54
>1965	00 02
>1967	3c 00 04 02	                .byte $3c, $00, $04, $02, $00, $08 ; 60
>196b	00 08
>196d	03 ff f8 01	                .byte $03, $ff, $f8, $01, $12, $31 ; 66, X,X,X color, xoffset, yoffset
>1971	12 31
>1973	00 3e 00 01	sprt_ultraman   .byte $00, $3e, $00, $01, $c1, $c0 ; 6
>1977	c1 c0
>1979	0e 3e 30 08	                .byte $0e, $3e, $30, $08, $41, $08 ; 12
>197d	41 08
>197f	10 1c 04 10	                .byte $10, $1c, $04, $10, $22, $04 ; 18
>1983	22 04
>1985	24 1c 12 23	                .byte $24, $1c, $12, $23, $00, $62 ; 24
>1989	00 62
>198b	20 08 02 47	                .byte $20, $08, $02, $47, $c1, $f1 ; 30
>198f	c1 f1
>1991	6a aa ab 47	                .byte $6a, $aa, $ab, $47, $c9, $f1 ; 36
>1995	c9 f1
>1997	20 08 02 20	                .byte $20, $08, $02, $20, $14, $02 ; 42
>199b	14 02
>199d	20 00 02 10	                .byte $20, $00, $02, $10, $00, $04 ; 48
>19a1	00 04
>19a3	10 7f 04 08	                .byte $10, $7f, $04, $08, $00, $08 ; 54
>19a7	00 08
>19a9	06 3e 30 01	                .byte $06, $3e, $30, $01, $c1, $c0 ; 60
>19ad	c1 c0
>19af	00 3e 00 01	                .byte $00, $3e, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>19b3	0c 28
>19b5	00 1c 00 00	sprt_male       .byte $00, $1c, $00, $00, $3e, $00 ; 6
>19b9	3e 00
>19bb	00 3e 00 00	                .byte $00, $3e, $00, $00, $3e, $00 ; 12
>19bf	3e 00
>19c1	00 1c 00 00	                .byte $00, $1c, $00, $00, $08, $00 ; 18
>19c5	08 00
>19c7	00 ff 80 00	                .byte $00, $ff, $80, $00, $ff, $80 ; 24
>19cb	ff 80
>19cd	00 be 80 00	                .byte $00, $be, $80, $00, $9c, $80 ; 30
>19d1	9c 80
>19d3	00 88 80 00	                .byte $00, $88, $80, $00, $be, $80 ; 36
>19d7	be 80
>19d9	00 be 80 01	                .byte $00, $be, $80, $01, $9c, $c0 ; 42
>19dd	9c c0
>19df	01 94 c0 00	                .byte $01, $94, $c0, $00, $14, $00 ; 48
>19e3	14 00
>19e5	00 14 00 00	                .byte $00, $14, $00, $00, $14, $00 ; 54
>19e9	14 00
>19eb	00 36 00 00	                .byte $00, $36, $00, $00, $77, $00 ; 60
>19ef	77 00
>19f1	00 77 00 01	                .byte $00, $77 ,$00, $01, $0c, $2f ; 66, X,X,X color, xoffset, yoffset
>19f5	0c 2f
>19f7	00 3c 00 00	sprt_robot      .byte $00, $3c, $00, $00, $24, $00 ; 6
>19fb	24 00
>19fd	00 66 18 00	                .byte $00, $66, $18, $00, $66, $38 ; 12
>1a01	66 38
>1a03	00 24 38 00	                .byte $00, $24, $38, $00, $3c, $10 ; 18
>1a07	3c 10
>1a09	00 18 10 00	                .byte $00, $18, $10, $00, $18, $10 ; 24
>1a0d	18 10
>1a0f	0f ff f0 08	                .byte $0f, $ff, $f0, $08, $7e, $00 ; 30
>1a13	7e 00
>1a15	08 7e 00 08	                .byte $08, $7e, $00, $08, $18, $00 ; 36
>1a19	18 00
>1a1b	1c 18 00 1c	                .byte $1c, $18, $00, $1c, $18, $00 ; 42
>1a1f	18 00
>1a21	18 3c 00 00	                .byte $18, $3c, $00, $00, $3c, $00 ; 48
>1a25	3c 00
>1a27	00 24 00 00	                .byte $00, $24, $00, $00, $24, $00 ; 54
>1a2b	24 00
>1a2d	00 24 00 03	                .byte $00, $24, $00, $03, $e7, $c0 ; 60
>1a31	e7 c0
>1a33	03 e7 c0 01	                .byte $03, $e7, $c0, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>1a37	0c 28
>1a39	00 1c 00 00	sprt_femme      .byte $00, $1c, $00, $00, $3e, $00 ; 6
>1a3d	3e 00
>1a3f	00 3e 00 00	                .byte $00, $3e, $00, $00, $3e, $00 ; 12
>1a43	3e 00
>1a45	00 1c 00 00	                .byte $00, $1c, $00, $00, $08, $00 ; 18
>1a49	08 00
>1a4b	00 7f 00 00	                .byte $00, $7f, $00, $00, $ff, $80 ; 24
>1a4f	ff 80
>1a51	00 be 80 00	                .byte $00, $be, $80, $00, $9c, $80 ; 30
>1a55	9c 80
>1a57	00 88 80 00	                .byte $00, $88, $80, $00, $9c, $80 ; 36
>1a5b	9c 80
>1a5d	00 be 80 01	                .byte $00, $be, $80, $01, $be, $c0 ; 42
>1a61	be c0
>1a63	01 be c0 00	                .byte $01, $be, $c0, $00, $7f, $00 ; 48
>1a67	7f 00
>1a69	00 7f 00 00	                .byte $00, $7f, $00, $00, $ff, $80 ; 54
>1a6d	ff 80
>1a6f	00 36 00 00	                .byte $00, $36, $00, $00, $77, $00 ; 60
>1a73	77 00
>1a75	00 55 00 01	                .byte $00, $55 ,$00, $01, $0c, $2f ; 66, X,X,X color, xoffset, yoffset
>1a79	0c 2f
>1a7b	e7 17		sprt_ptr0       .word  sprt_image + (0*66)
>1a7d	29 18		sprt_ptr1       .word  sprt_image + (1*66)
>1a7f	6b 18		sprt_ptr2       .word  sprt_image + (2*66)
>1a81	ad 18		sprt_ptr3       .word  sprt_image + (3*66)
>1a83	ef 18		sprt_ptr4       .word  sprt_image + (4*66)
>1a85	31 19		sprt_ptr5       .word  sprt_image + (5*66)
>1a87	73 19		sprt_ptr6       .word  sprt_image + (6*66)
>1a89	b5 19		sprt_ptr7       .word  sprt_image + (7*66)
>1a8b	f7 19		sprt_ptr8       .word  sprt_image + (8*66)
>1a8d	39 1a		sprt_ptr9       .word  sprt_image + (9*66)
>1a8f	ff		testbyte        .byte 255
=$07			sprt_txtcol     =       vjaune
=$00			sprt_txtbak     =       bkcol0
=$01			sprt_color      =       vwhite
>1a90	07 00 04 0e	sprite_pos      .byte   sprt_txtcol,sprt_txtbak,4,14
>1a94	53 10 12 09	                .text       "Sprite pos. (x,y):($0000,$0000)"
>1a98	14 05 20 10 0f 13 2e 20 28 18 2c 19 29 3a 28 24
>1aa8	30 30 30 30 2c 24 30 30 30 30 29
>1ab3	00		                .byte   0

;******  Return to file: js2test-mc.asm


;******  End of listing

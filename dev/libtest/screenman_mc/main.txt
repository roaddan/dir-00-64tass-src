
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L main.txt -o main.prg main.asm
; Thu Mar  9 22:35:53 2023

;Offset	;Hex		;Source

;******  Processing input file: main.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: main.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/cbm-macros.asm


;******  Return to file: main.asm

.080d			main
.080d	20 17 0d	                jsr scrmaninit
.0810	20 85 11	                jsr js_init
.0813	a9 80		                lda #$80
.0815	8d 03 0d	                sta curcol
.0818	a9 00		                lda #0
.081a	8d 21 d0	                sta vicbackcol
.081d	a9 06		                lda #vbleu
.081f	8d 20 d0	                sta vicbordcol
.0822	20 a7 0d	                jsr cls
.0825	a9 20		                lda #$20
.0827	09 00		                ora #%00000000
.0829	a0 04		                ldy #$04
.082b	a2 04		                ldx #$04
.082d	20 dc 0a	                jsr memfill
.0830	a9 00		                lda #$00
.0832	a0 d8		                ldy #$d8
.0834	20 dc 0a	                jsr memfill
.0837	20 03 16	                jsr sprt_init
.083a	20 04 0e	goagain         jsr setinverse
.083d	a2 0c		                ldx #<bstring1
.083f	a0 09		                ldy #>bstring1
.0841	20 a7 0e	                jsr putscxy
.0844	a2 38		                ldx #<bstring2
.0846	a0 09		                ldy #>bstring2
.0848	20 a7 0e	                jsr putscxy
.084b	a2 65		                ldx #<bstring3
.084d	a0 09		                ldy #>bstring3
.084f	20 a7 0e	                jsr putscxy
.0852	a2 91		                ldx #<bstring4
.0854	a0 09		                ldy #>bstring4
.0856	20 a7 0e	                jsr putscxy
.0859	20 0e 0e	                jsr clrinverse
.085c	a2 a8		                ldx #<js_status1
.085e	a0 09		                ldy #>js_status1
.0860	20 a7 0e	                jsr putscxy
.0863	a2 c0		                ldx #<js_status2
.0865	a0 09		                ldy #>js_status2
.0867	20 a7 0e	                jsr putscxy
.086a	a2 d7		                ldx #<js_status3
.086c	a0 09		                ldy #>js_status3
.086e	20 a7 0e	                jsr putscxy
.0871	a2 f0		                ldx #<js_status4
.0873	a0 09		                ldy #>js_status4
.0875	20 a7 0e	                jsr putscxy
.0878	a2 09		                ldx #<js_status5
.087a	a0 0a		                ldy #>js_status5
.087c	20 a7 0e	                jsr putscxy
.087f	a2 1f		                ldx #<js_status6
.0881	a0 0a		                ldy #>js_status6
.0883	20 a7 0e	                jsr putscxy
.0886	a2 00		                ldx #$00
.0888	a0 0f		                ldy #$0f
.088a	20 6a 0e	                jsr gotoxy
.088d	a9 07		                lda #vjaune
.088f	20 d6 0e	                jsr setcurcol
.0892	a2 00		                ldx #$00
.0894	20 eb 0e	                jsr setbkcol
.0897			looper
.0897	20 9c 11	                jsr js_scan
.089a	20 ae 13	                jsr js_showvals
.089d	20 8f 16	                jsr sprt_move
.08a0			loopit
.08a0	a2 16		                ldx #$16
.08a2	a0 11		                ldy #$11
.08a4	20 6a 0e	                jsr gotoxy
.08a7	a9 03		                lda #3
.08a9	20 d6 0e	                jsr setcurcol
.08ac	ee 0b 09	                inc onebyte
.08af	ad 0b 09	                lda onebyte
.08b2	ad 76 15	                lda js_2fire
.08b5	20 e4 0c	                jsr putabinfmt
.08b8	48		                pha
.08b9	ad 76 15	                lda js_2fire
.08bc	f0 42		                beq nochange
.08be	ad 20 d0	                lda vicbordcol
.08c1	18		                clc
.08c2	69 00		                adc #$0
.08c4	29 0f		                and #$0f
.08c6	8d 20 d0	                sta vicbordcol
.08c9	ad 75 15	                lda js_2y
.08cc	c9 04		                cmp #$04
.08ce	d0 20		                bne toborder
.08d0	ad 74 15	                lda js_2x
.08d3	c9 0b		                cmp #$0b
.08d5	30 19		                bmi toborder
.08d7	c9 1d		                cmp #$1d
.08d9	10 15		                bpl toborder
.08db	ee 58 16	                inc sprt_ptr
.08de	ad 58 16	                lda sprt_ptr
.08e1	20 c7 0f	                jsr showregs
.08e4	c9 09		                cmp #9
.08e6	90 02		                bcc drawsptr
.08e8	a9 00		                lda #$00
.08ea	8d 58 16	drawsptr        sta sprt_ptr
.08ed	20 03 16	                jsr sprt_init
.08f0	ad 20 d0	toborder        lda vicbordcol
.08f3	38		                sec
.08f4	69 00		                adc #0
.08f6	29 0f		                and #$0f
.08f8	8d 29 d0	                sta $d029
.08fb	a9 00		                lda #$00
.08fd	8d 76 15	                sta js_2fire
.0900			nochange
.0900	e8		                inx
.0901	68		                pla
.0902	20 e1 ff	                jsr kstop
.0905	d0 90		                bne looper
.0907	20 66 fe	                jsr k_warmboot
.090a	60		out             rts
>090b	00		onebyte         .byte   0
>090c	01 00 00 00	bstring1        .byte   vblanc,bkcol0,0,0
>0910	20 20 20 20	                .text   "      Visualisation du port jeu #2     "
>0914	20 20 56 09 13 15 01 0c 09 13 01 14 09 0f 0e 20
>0924	04 15 20 10 0f 12 14 20 0a 05 15 20 23 32 20 20
>0934	20 20 20
>0937	00		                .byte   0
>0938	0a 40 00 01	bstring2        .byte   vrose,bkcol1,0,1
>093c	20 50 12 0f	                .text   " Programme assembleur pour 6502 sur C64 "
>0940	07 12 01 0d 0d 05 20 01 13 13 05 0d 02 0c 05 15
>0950	12 20 10 0f 15 12 20 36 35 30 32 20 13 15 12 20
>0960	43 36 34 20
>0964	00		                .byte   0
>0965	0d 80 00 02	bstring3        .byte   vvert1,bkcol2,0,2
>0969	20 20 20 20	                .text   "      par Daniel Lafrance (2021) C     "
>096d	20 20 10 01 12 20 44 01 0e 09 05 0c 20 4c 01 06
>097d	12 01 0e 03 05 20 28 32 30 32 31 29 20 43 20 20
>098d	20 20 20
>0990	00		                .byte   0
>0991	07 c0 0b 04	bstring4        .byte   vjaune,bkcol3,11,4
>0995	20 43 08 01	                .text   " Changer pointeur "
>0999	0e 07 05 12 20 10 0f 09 0e 14 05 15 12 20
>09a7	00		                .byte   0
>09a8	0d 00 13 16	js_status1      .byte   vvert1,bkcol0,19,22
>09ac	20 20 20 15	                .text   "   up <----1> haut "
>09b0	10 20 3c 2d 2d 2d 2d 31 3e 20 08 01 15 14 20
>09bf	00		                .byte   0
>09c0	0e 00 13 15	js_status2      .byte   vbleu1,bkcol0,19,21
>09c4	20 04 0f 17	                .text   " down <---2-> bas "
>09c8	0e 20 3c 2d 2d 2d 32 2d 3e 20 02 01 13 20
>09d6	00		                .byte   0
>09d7	0a 00 13 14	js_status3      .byte   vrose,bkcol0,19,20
>09db	20 0c 05 06	                .text   " left <--4--> gauche"
>09df	14 20 3c 2d 2d 34 2d 2d 3e 20 07 01 15 03 08 05
>09ef	00		                .byte   0
>09f0	07 00 13 13	js_status4      .byte   vjaune,bkcol0,19,19
>09f4	12 09 07 08	                .text   "right <-8---> droite"
>09f8	14 20 3c 2d 38 2d 2d 2d 3e 20 04 12 0f 09 14 05
>0a08	00		                .byte   0
>0a09	01 00 13 12	js_status5      .byte   vblanc,bkcol0,19,18
>0a0d	20 46 09 12	                .text   " Fire <1----> Feu"
>0a11	05 20 3c 31 2d 2d 2d 2d 3e 20 46 05 15
>0a1e	00		                .byte   0
>0a1f	03 00 01 17	js_status6      .byte   vcyan,bkcol0,1,23
>0a23	2b 2d 3e 20	                .text   "+-> Etat de JS2:     %---FRLDU EOR #$1F"
>0a27	45 14 01 14 20 04 05 20 4a 53 32 3a 20 20 20 20
>0a37	20 25 2d 2d 2d 46 52 4c 44 55 20 45 4f 52 20 23
>0a47	24 31 46
>0a4a	00		                .byte   0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/kernal-map-c64.asm

.0a4b			        c
=$90			kiostatus = $90       ; Kernal I/O status word (st) (byte)
=$b7			curfnlen  = $b7       ; Current filename length (byte)
=$b9			cursecadd = $b9       ; Current secondary address (byte)
=$ba			curdevno  = $ba       ; Current device number (byte)
=$bb			curfptr   = $bb       ; Current file pointer (word)
=$fb			zpage1    = $fb       ; zero page 1 address (word)
=$fd			zpage2    = $fd       ; zero page 2 address (word)
=$fb			zeropage  = zpage1
=$fd			zonepage  = zpage2
=$0286			bascol    = $0286     ;basic next chr colscreenram (byte)
=$0400			scrnram   = $0400     ;video character ram
=$0400			scrram0   = $0400
=$0500			scrram1   = $0500
=$0600			scrram2   = $0600
=$0700			scrram3   = $0700
=$0801			basicsta  = $0801     ;basic start address
=$a000			basicrom  = $a000
=$d400			sid       = $d400     ;sid base address
=$d800			colorram  = $d800     ;video color ram
=$d800			colram0   = $d800
=$d900			colram1   = $d900
=$da00			colram2   = $da00
=$db00			colram3   = $db00
=$dc00			cia1      = $dc00     ;cia1  base address
=$dd00			cia2      = $dd00     ;cia2 base address
=$e000			kernalrom = $e000
=$03			bstop     =    $03      ;stop
=$05			bwhite    =    $05      ;set color white
=$08			block     =    $08      ;lock the charset
=$09			bunlock   =    $09      ;unlock the charset
=$0d			bcarret   =    $0d
=$0e			btext     =    $0e
=$11			bcrsdn    =    $11      ;cursor down 1 line
=$12			brevcol   =    $12
=$13			bhome     =    $13
=$14			bdelete   =    $14
=$1c			bred      =    $1c
=$1d			bcuright  =    $1d
=$1e			bgreen    =    $1e
=$1f			bblue     =    $1f
=$81			borange   =    $81
=$83			blrun     =    $83
=$85			bfkey1    =    $85
=$86			bfkey2    =    $86
=$87			bfkey3    =    $87
=$88			bfkey4    =    $88
=$89			bfkey5    =    $89
=$8a			bfkey6    =    $8a
=$8b			bfkey7    =    $8b
=$8c			bfkey8    =    $8c
=$8d			bcarret1  =    $8d
=$8e			bgraph    =    $8e
=$90			bblack    =    $90
=$91			bcuup     =    $91
=$92			brevoff   =    $92
=$93			bclear    =    $93
=$94			binsert   =    $94
=$95			bbrown    =    $95
=$96			bltred    =    $96
=$97			bdkgrey   =    $97
=$98			bmdgrey   =    $98
=$99			bltgreen  =    $99
=$9a			bltblue   =    $9a
=$9b			bltgrey   =    $9b
=$9c			bmagenta  =    $9c
=$9d			bculeft   =    $9d
=$9e			byellow   =    $9e
=$9f			bcyan     =    $9f
=$0286			carcol  = $0286
=$030a			ieval   = $030a
=$73			chrget  = $73
=$79			chrgot  = $79
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ff81			cint    = $ff81 ; ($ff5b) Initialize the screen editor and vic-ii chip
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ff8a			restor  = $ff8a ; ($fd15) Restore default I/O vectors.
=$ff8d			vector  = $ff8d ; ($fd1a) Read/set I/O vectors.
=$ff90			setmsg  = $ff90 ; ($fe18) Set kernal message output flag
=$ff93			second  = $ff93 ; ($edb9) Send secondary address after listen
=$ff96			tksa    = $ff96 ; ($edc7) Send a secondary address to a device commanded to talk
=$ff99			memtop  = $ff99 ; ($fe25) Get/Set top of ram
=$ff9c			membot  = $ff9c ; ($fe34) Get/set bottom of memory.
=$ff9f			scankey = $ff9f ; $(ea87) Scan the keyboard
=$ffa2			settmo  = $ffa2 ; ($fe21) Set ieee bus card timeout flag
=$ffa5			acptr   = $ffa5 ; ($ee13) recoit un caractere provenant du port serie
=$ffa8			ciout   = $ffa8 ; ($eddd) Transmit a byte over the serial bus
=$ffab			untlk   = $ffab ; ($edef) Send an untalk command
=$ffae			unlsn   = $ffae ; ($edfe) Send an unlisten command
=$ffb1			listen  = $ffb1 ; ($ed0c) Command a device on the serial bus to listen.
=$ffb4			talk    = $ffb4 ; ($ed09) Command a device on the serial bus to talk
=$ffb7			readst  = $ffb7 ; ($fe07) Read i/o status word
=$ffba			setlfs  = $ffba ; ($fe00) Set up a logical file
=$ffbd			setnam  = $ffbd ; ($fdf9) Set up file name
=$ffc0			open    = $ffc0 ; ($f3a4) Open a logical file
=$ffc3			close   = $ffc3 ; ($f291) Close a logical file
=$ffc6			chkin   = $ffc6 ; ($f20e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; ($f250) Define an output channel.
=$ffcc			clrchn  = $ffcc ; ($f333) - Clear all i/o channels.
=$ffcf			chrin   = $ffcf ; ($f157) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; ($f1ca) Output a character
=$ffd5			load    = $ffd5 ; ($f49e) Load device to RAM.
=$ffd8			save    = $ffd8 ; ($f5dd) Save memory to a device.
=$ffdb			settim  = $ffdb ; ($f6e4) Set the system clock.
=$ffde			rdtim   = $ffde ; ($f6dd) Read system clock
=$ffe1			stop    = $ffe1 ; ($f6ed) Check if stop key is pressed.
=$ffe4			getin   = $ffe4 ; ($f13e) Get a character.
=$ffe7			clall   = $ffe7 ; ($f32f) Close all open files
=$ffea			udtim   = $ffea ; ($f69b) Update the system clock
=$ffed			screen  = $ffed ; ($e505) Return screen format
=$fff0			plot    = $fff0 ; ($e50a) Set or retrieve cursor location x=column, y=line
=$fff3			iobase  = $fff3 ; ($e500) Define i/o memory page
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scankey     ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$f1ca			kd_chrout    =   $f1ca
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.0a4b	4c 0d 08	pgmstart        jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: main.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/vicii-map.asm

=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col= vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: main.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/c64-lib-pushpop.asm

.0a4e			push
.0a4e	08		          php            ; stack : flg, pcl, pch
.0a4f	78		          sei
.0a50	8d 8a 0a	          sta  ra        ; save a
.0a53	68		          pla            ; stack : pcl, pch
.0a54	8d 89 0a	          sta  rp        ; save rp
.0a57	68		          pla            ; stack : pch
.0a58	8d 8b 0a	          sta  pc        ; save pcl
.0a5b	68		          pla            ; stack : -
.0a5c	8d 8c 0a	          sta  pc+1      ; save pch
.0a5f	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0a61	48		          pha            ; stack : zp1l
.0a62	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0a64	48		          pha            ; stack : zp1h, zp1l
.0a65	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0a67	48		          pha            ; stack : zp2l, zp1h, zp1l
.0a68	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0a6a	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0a6b	ad 89 0a	          lda  rp        ; get rp
.0a6e	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0a6f	ad 8a 0a	          lda  ra        ; get a
.0a72	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0a73	8a		          txa            ; get x
.0a74	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a75	98		          tya            ; get y
.0a76	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a77	ad 8c 0a	          lda  pc+1      ; get pch
.0a7a	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a7b	ad 8b 0a	          lda  pc        ; get pcl
.0a7e	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a7f	ad 89 0a	          lda  rp        ; get rp
.0a82	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a83	ad 8a 0a	          lda  ra        ; get a
.0a86	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a87	58		          cli
.0a88	60		          rts
>0a89	00		rp        .byte     0
>0a8a	00		ra        .byte     0
>0a8b	00 00		pc        .word     0
.0a8d			pull
.0a8d			pop
.0a8d	78		          sei
.0a8e	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a8f	8d c2 0a	          sta  pc        ; save pcl
.0a92	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a93	8d c3 0a	          sta  pc+1      ; save pch
.0a96	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a97	a8		          tay            ; set y
.0a98	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0a99	aa		          tax            ; set x
.0a9a	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0a9b	8d c1 0a	          sta  ra        ; save a
.0a9e	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0a9f	8d c0 0a	          sta  rp        ; save rp
.0aa2	68		          pla            ; stack : zp2l, zp1h, zp1l
.0aa3	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0aa5	68		          pla            ; stack : zp1h, zp1l
.0aa6	85 fd		          sta  zpage2    ; get zpage2 High byte
.0aa8	68		          pla            ; stack : zp1l
.0aa9	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0aab	68		          pla            ; stack :
.0aac	85 fb		          sta  zpage1    ; get zpage1 High byte
.0aae	ad c3 0a	          lda  pc+1      ; get pch
.0ab1	48		          pha            ; stack : pch
.0ab2	ad c2 0a	          lda  pc
.0ab5	48		          pha            ; stack : pcl, pch
.0ab6	ad c0 0a	          lda  rp        ; get rp
.0ab9	48		          pha            ; stack : rp, pcl, pch
.0aba	ad c1 0a	          lda  ra        ; set ra
.0abd	58		          cli
.0abe	28		          plp            ; stack : pcl, pch
.0abf	60		          rts
>0ac0	00		rp        .byte     0
>0ac1	00		ra        .byte     0
>0ac2	00 00		pc        .word     0

;******  Return to file: main.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/c64-lib-mem.asm

.0ac4			blkfill
.0ac4	20 4e 0a	bf0            jsr  push
.0ac7	20 83 0b	               jsr  savezp1
.0aca	84 fc		               sty  zpage1+1
.0acc	a0 00		               ldy  #$00
.0ace	84 fb		               sty  zpage1
.0ad0	91 fb		bf1            sta  (zpage1),y
.0ad2	c8		               iny
.0ad3	d0 fb		               bne  bf1
.0ad5	20 92 0b	               jsr  restzp1
.0ad8	20 8d 0a	               jsr  pop
.0adb	60		               rts
.0adc			memfill
.0adc	20 4e 0a	               jsr  push
.0adf	20 c4 0a	mf1            jsr  blkfill
.0ae2	c8		               iny
.0ae3	ca		               dex
.0ae4	d0 f9		               bne  mf1
.0ae6	20 8d 0a	               jsr  pop
.0ae9	60		               rts
.0aea			memmove
.0aea	20 4e 0a	               jsr  push
.0aed	ba		               tsx            ; On se crée un pointeur ...
.0aee	8a		               txa
.0aef	18		               clc
.0af0	69 0b		               adc  #11
.0af2	a8		               tay
.0af3	a2 06		               ldx  #$06
.0af5	b9 00 01	nextbyte       lda  $0100,y
.0af8	99 44 0b	               sta  words,y
.0afb	c8		               iny
.0afc	ca		               dex
.0afd	d0 f6		               bne  nextbyte
.0aff	ad 44 0b	               lda  s
.0b02	8d 1b 0b	               sta  source+1
.0b05	ad 45 0b	               lda  s+1
.0b08	8d 1c 0b	               sta  source+2
.0b0b	ad 46 0b	               lda  d
.0b0e	8d 18 0b	               sta  destin+1
.0b11	ad 47 0b	               lda  d+1
.0b14	8d 19 0b	               sta  destin+2
.0b17	ad ff ff	destin         lda  $ffff
.0b1a	8d ff ff	source         sta  $ffff
.0b1d	ee 18 0b	               inc  destin+1
.0b20	d0 03		               bne  src
.0b22	ee 19 0b	               inc  destin+2
.0b25	ee 1b 0b	src            inc  source+1
.0b28	d0 03		               bne  cnt
.0b2a	ee 1c 0b	               inc  source+2
.0b2d	ad 48 0b	cnt            lda  compte
.0b30	d0 08		               bne  decit
.0b32	ad 49 0b	               lda  compte+1
.0b35	f0 09		               beq  fini
.0b37	ce 49 0b	               dec  compte+1
.0b3a	ce 48 0b	decit          dec  compte
.0b3d	4c 17 0b	               jmp  destin
.0b40	20 8d 0a	fini           jsr  pop
.0b43	60		               rts
.0b44			words
>0b44	00 00		s         .word     $0000
>0b46	00 00		d         .word     $0000
>0b48	00 00		compte    .word     $0000
.0b4a			decword
.0b4a	20 4e 0a	               jsr  push
.0b4d	86 fd		               stx  zpage2
.0b4f	84 fe		               sty  zpage2+1
.0b51	20 8d 0a	               jsr  pop
.0b54	60		               rts
.0b55			inczp1
.0b55	08		               php
.0b56	48		               pha
.0b57	e6 fb		               inc  zpage1
.0b59	d0 02		               bne  nopage
.0b5b	e6 fc		               inc  zpage1+1
.0b5d	68		nopage         pla
.0b5e	28		               plp
.0b5f	60		               rts
.0b60			deczp1
.0b60	08		               php
.0b61	48		               pha
.0b62	a5 fb		               lda  zpage1
.0b64	d0 02		               bne  nopage
.0b66	c6 fc		               dec  zpage1+1
.0b68	c6 fb		nopage         dec  zpage1
.0b6a	28		               plp
.0b6b	60		               rts
.0b6c			inczp2
.0b6c	08		               php
.0b6d	48		               pha
.0b6e	e6 fd		               inc  zpage2
.0b70	d0 02		               bne  nopage
.0b72	e6 fe		               inc  zpage2+1
.0b74	68		nopage         pla
.0b75	28		               plp
.0b76	60		               rts
.0b77			deczp2
.0b77	08		               php
.0b78	48		               pha
.0b79	a5 fd		               lda  zpage2
.0b7b	d0 02		               bne  nopage
.0b7d	c6 fe		               dec  zpage2+1
.0b7f	c6 fd		nopage         dec  zpage2
.0b81	28		               plp
.0b82	60		               rts
.0b83			savezp1
.0b83	08		               php
.0b84	48		               pha
.0b85	a5 fb		               lda  zpage1
.0b87	8d ff 0b	               sta  zp1
.0b8a	a5 fc		               lda  zpage1+1
.0b8c	8d 00 0c	               sta  zp1+1
.0b8f	68		               pla
.0b90	28		               plp
.0b91	60		               rts
.0b92			restzp1
.0b92	08		               php
.0b93	48		               pha
.0b94	ad ff 0b	               lda zp1
.0b97	85 fb		               sta zpage1
.0b99	ad 00 0c	               lda zp1+1
.0b9c	85 fc		               sta zpage1+1
.0b9e	68		               pla
.0b9f	28		               plp
.0ba0	60		               rts
.0ba1			savezp2
.0ba1	08		         php
.0ba2	48		         pha
.0ba3	a5 fd		         lda zpage2
.0ba5	8d 01 0c	         sta zp2
.0ba8	a5 fe		         lda zpage2+1
.0baa	8d 02 0c	         sta zp2+1
.0bad	68		         pla
.0bae	28		         plp
.0baf	60		         rts
.0bb0			restzp2
.0bb0	08		                php
.0bb1	48		                pha
.0bb2	ad 01 0c	                lda  zp2
.0bb5	85 fd		                sta  zpage2
.0bb7	ad 02 0c	                lda  zp2+1
.0bba	85 fe		                sta  zpage2+1
.0bbc	68		                pla
.0bbd	28		                plp
.0bbe	60		                rts
.0bbf			xy2addr
.0bbf	08		                php
.0bc0	48		                pha
.0bc1	8a		                txa
.0bc2	48		                pha
.0bc3	98		                tya
.0bc4	48		                pha
.0bc5	ad fa 0b	                lda     addr1+1
.0bc8	8d fc 0b	                sta     addr2+1
.0bcb	ad f9 0b	                lda     addr1
.0bce	8d fb 0b	                sta     addr2
.0bd1	c0 00		                cpy     #$00
.0bd3	f0 0f		                beq     addx
.0bd5	18		moreline        clc
.0bd6	6d f8 0b	                adc     ymult
.0bd9	90 03		                bcc     norepy
.0bdb	ee fc 0b	                inc     addr2+1
.0bde	8d fb 0b	norepy          sta     addr2
.0be1	88		                dey
.0be2	d0 f1		                bne     moreline
.0be4	8a		addx            txa
.0be5	18		                clc
.0be6	6d fb 0b	                adc     addr2
.0be9	90 03		                bcc     thatsit
.0beb	ee fc 0b	                inc     addr2+1
.0bee	8d fb 0b	thatsit         sta     addr2
.0bf1	68		                pla
.0bf2	a8		                tay
.0bf3	68		                pla
.0bf4	aa		                tax
.0bf5	68		                pla
.0bf6	28		                plp
.0bf7	60		                rts
>0bf8	28		ymult          .byte     40
>0bf9	00 00		addr1          .word     $0000
>0bfb	00 00		addr2          .word     $0000
>0bfd	00 00		bytecnt        .word     $0000
>0bff	00 00		zp1        .word   $0000
>0c01	00 00		zp2        .word   $0000

;******  Return to file: main.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/c64-lib-hex.asm

>0c03	01		a2hexcol       .byte     1              ; pour aputscxy
>0c04	00		a2hexbkcol     .byte     %00000000
.0c05			a2hexpos
>0c05	00		a2hexpx        .byte     0              ; pour aputsxy
>0c06	00		a2hexpy        .byte     0
>0c07	24		a2hexprefix    .byte     "$"            ; pour aputs
>0c08	00 00		a2hexstr       .word     $00
>0c0a	00 00		               .word     $00
>0c0c	00		               .byte     0              ; 0 end string
.0c0d			putahexfmtxy
.0c0d	20 4e 0a	               jsr  push
.0c10	20 5c 0c	               jsr  a2hex
.0c13	ae 05 0c	               ldx  a2hexpx
.0c16	ac 06 0c	               ldy  a2hexpy
.0c19	20 6a 0e	               jsr  gotoxy
.0c1c	a2 07		               ldx  #<a2hexprefix
.0c1e	a0 0c		               ldy  #>a2hexprefix
.0c20	20 5c 0e	               jsr  puts
.0c23	20 8d 0a	               jsr  pop
.0c26	60		               rts
.0c27			putahexfmt
.0c27	20 4e 0a	               jsr  push
.0c2a	20 5c 0c	               jsr  a2hex
.0c2d	a2 07		               ldx  #<a2hexprefix
.0c2f	a0 0c		               ldy  #>a2hexprefix
.0c31	20 5c 0e	               jsr  puts
.0c34	20 8d 0a	               jsr  pop
.0c37	60		               rts
.0c38			putahex
.0c38	20 4e 0a	               jsr  push
.0c3b	20 5c 0c	               jsr  a2hex
.0c3e	a2 08		               ldx  #<a2hexstr
.0c40	a0 0c		               ldy  #>a2hexstr
.0c42	20 5c 0e	               jsr  puts
.0c45	20 8d 0a	               jsr  pop
.0c48	60		               rts
.0c49			nib2hex
.0c49	08		               php
.0c4a	29 0f		               and  #$0f
.0c4c	f8		               sed
.0c4d	18		               clc
.0c4e	69 90		               adc  #$90
.0c50	69 40		               adc  #$40
.0c52	d8		               cld
.0c53	28		               plp
.0c54	60		               rts
.0c55			lsra4bits
.0c55	08		               php
.0c56	4a		               lsr
.0c57	4a		               lsr
.0c58	4a		               lsr
.0c59	4a		               lsr
.0c5a	28		               plp
.0c5b	60		               rts
.0c5c			a2hex
.0c5c	08		               php
.0c5d	48		               pha
.0c5e	48		               pha
.0c5f	20 55 0c	               jsr  lsra4bits
.0c62	20 49 0c	               jsr  nib2hex
.0c65	8d 08 0c	               sta  a2hexstr
.0c68	68		               pla
.0c69	20 49 0c	               jsr  nib2hex
.0c6c	8d 09 0c	               sta  a2hexstr+1
.0c6f	a9 00		               lda  #$00                ; set end of string
.0c71	8d 0a 0c	               sta  a2hexstr+2
.0c74	68		               pla
.0c75	28		               plp
.0c76	60		               rts
.0c77			xy2hex
.0c77	20 4e 0a	               jsr  push
.0c7a	20 5c 0c	               jsr  a2hex
.0c7d	8a		               txa
.0c7e	48		               pha
.0c7f	20 55 0c	               jsr  lsra4bits
.0c82	20 49 0c	               jsr  nib2hex
.0c85	8d 08 0c	               sta  a2hexstr
.0c88	68		               pla
.0c89	20 49 0c	               jsr  nib2hex
.0c8c	8d 09 0c	               sta  a2hexstr+1
.0c8f	98		               tya
.0c90	48		               pha
.0c91	20 55 0c	               jsr  lsra4bits
.0c94	20 49 0c	               jsr  nib2hex
.0c97	8d 0a 0c	               sta  a2hexstr+2
.0c9a	68		               pla
.0c9b	20 49 0c	               jsr  nib2hex
.0c9e	8d 0b 0c	               sta  a2hexstr+3
.0ca1	a9 00		               lda  #$00                ; 0 ended string
.0ca3	8d 0c 0c	               sta  a2hexstr+4
.0ca6	20 8d 0a	               jsr  pop
.0ca9			atobin
.0ca9	20 4e 0a	               jsr     push
.0cac	a2 08		               ldx     #8
.0cae	a0 00		               ldy     #0
.0cb0	2a		nextbit        rol
.0cb1	48		               pha
.0cb2	69 00		               adc     #$00
.0cb4	29 01		               and     #$01
.0cb6	20 49 0c	               jsr     nib2hex
.0cb9	99 ca 0c	               sta     abin,y
.0cbc	68		               pla
.0cbd	c8		               iny
.0cbe	ca		               dex
.0cbf	d0 ef		               bne     nextbit
.0cc1	a9 00		               lda     #0
.0cc3	99 ca 0c	               sta     abin,y
.0cc6	20 8d 0a	               jsr     pull
.0cc9	60		               rts
>0cca	30 30 30 30	abin           .null   "00000000"
>0cce	30 30 30 30 00
.0cd3			putabin
.0cd3	20 a9 0c	               jsr     atobin
.0cd6	20 4e 0a	               jsr     push
.0cd9	a2 ca		               ldx     #<abin
.0cdb	a0 0c		               ldy     #>abin
.0cdd	20 5c 0e	               jsr     puts
.0ce0	20 8d 0a	               jsr     pop
.0ce3	60		               rts
.0ce4			putabinfmt
.0ce4	08		               php
.0ce5	48		               pha
.0ce6	a9 25		               lda     #"%"
.0ce8	20 18 0e	               jsr     putch
.0ceb	68		               pla
.0cec	20 d3 0c	               jsr     putabin
.0cef	28		               plp
.0cf0	60		               rts
.0cf1			putabinxy
.0cf1	20 6a 0e	               jsr     gotoxy
.0cf4	20 d3 0c	               jsr     putabin
.0cf7	60		               rts
.0cf8			putabinfmtxy
.0cf8	20 6a 0e	               jsr     gotoxy
.0cfb	20 e4 0c	               jsr     putabinfmt
.0cfe	60		               rts

;******  Return to file: main.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/c64-lib-text-mc.asm

>0cff	00 00		scrptr         .word     $00            ; ... pointe position ecran, ...
>0d01	00 00		colptr         .word     $00            ; ... pointe position couleur, ...
>0d03	01		curcol         .byte     $01            ; ... la couleur du caractère, ...
>0d04	06		brdcol         .byte     vbleu          ; ... la couleur de la bordure et
>0d05	00		vicbkcol0      .byte     vnoir  ;$0b    ; 0,
>0d06	02		vicbkcol1      .byte     vrouge ;$0b    ; 1,
>0d07	05		vicbkcol2      .byte     vvert  ;$0b    ; 2,
>0d08	06		vicbkcol3      .byte     vbleu  ;$0b    ; et 3.
>0d09	00		inverse        .byte     $00
>0d0a	00 00 00 00	scraddr        .byte     0,0,0,0,0
>0d0e	00
>0d0f	00 00 00 00	coladdr        .byte     0,0,0,0,0
>0d13	00
>0d14	00		bkcol          .byte     %00000000      ; Pointeur de la couleur actuelle
>0d15	00 04		virtaddr       .word     $0400          ; L'adresse de l'ecran virtuel
=$00			bkcol0         =         %00000000      ;
=$40			bkcol1         =         %01000000
=$80			bkcol2         =         %10000000
=$c0			bkcol3         =         %11000000
.0d17			scrmaninit
.0d17	08		               php            ; On sauvegarde les registres
.0d18	48		               pha
.0d19	a9 15		               lda  #%00010101; Selectionne la plage memoire video
.0d1b	8d 18 d0	               sta  $d018     ; et le jeu de caracteeres.
.0d1e	ad 16 d0	               lda  $d016     ; 53270 Lecture valeur actuelle pour ne
.0d21	09 10		               ora  #%00010000; modifier que le bit 4.
.0d23	29 ef		               and  #%11101111
.0d25	8d 16 d0	               sta  $d016 ; 53270
.0d28	ad 11 d0	               lda  $d011     ; On ne change que le bit 6 pour
.0d2b	09 40		               ora  #%01000000; selectionner le md. couleur de
.0d2d	8d 11 d0	               sta  $d011     ; 53270   ; fond etendu.
.0d30	ad 05 0d	               lda  vicbkcol0
.0d33	8d 21 d0	               sta  $d021     ; 53281
.0d36	ad 06 0d	               lda  vicbkcol1
.0d39	8d 22 d0	               sta  $d022     ; 53282
.0d3c	ad 07 0d	               lda  vicbkcol2
.0d3f	8d 23 d0	               sta  $d023     ; 53283
.0d42	ad 08 0d	               lda  vicbkcol3
.0d45	8d 24 d0	               sta  $d024     ; 54284
.0d48	a5 00		               lda  bkcol0    ; On charge et utilise la couleur de ...
.0d4a	8d 14 0d	               sta  bkcol     ; ... fond par defaut des caracteres.
.0d4d	20 a7 0d	               jsr  cls       ; Finalement on efface l'ecran
.0d50	68		               pla
.0d51	28		               plp
.0d52	60		               rts
.0d53			curshome
.0d53	08		               php                      ; Sauvegarde flags ...
.0d54	48		               pha                      ; ... et accumulateur
.0d55	ad 15 0d	               lda  virtaddr            ; In replace le pointeur ...
.0d58	8d ff 0c	               sta  scrptr              ; ... d'écran virtuel à sa ...
.0d5b	ad 16 0d	               lda  virtaddr+1          ; ... position initiale.
.0d5e	8d 00 0d	               sta  scrptr+1
.0d61	20 92 0d	               jsr  synccolptr          ; On synchronise le ptr couleur.
.0d64	ad 05 0d	               lda  vicbkcol0
.0d67	8d 21 d0	               sta  $d021               ; On recharge les couleurs ...
.0d6a	ad 06 0d	               lda  vicbkcol1           ; ... de fond par defaut tel ...
.0d6d	8d 22 d0	               sta  $d022               ; ... que specifie dans les ...
.0d70	ad 07 0d	               lda  vicbkcol2           ; ... les variables globales.
.0d73	8d 23 d0	               sta  $d023
.0d76	ad 08 0d	               lda  vicbkcol3
.0d79	8d 24 d0	               sta  $d024
.0d7c	68		               pla                      ; Récupère l'accumulateur ...
.0d7d	28		               plp                      ; ... et les flags
.0d7e	60		               rts
.0d7f			incscrptr
.0d7f	08		               php                      ; Sauvegarde flags ...
.0d80	48		               pha                      ; ... et accumulateur
.0d81	ee ff 0c	               inc  scrptr              ; Incremente le pointeur
.0d84	ad ff 0c	               lda  scrptr              ; Regarde si on doit faire un ...
.0d87	d0 03		               bne  pasdereport         ; ... report dans le MSB
.0d89	ee 00 0d	               inc  scrptr+1            ; Si oui on fait le repport
.0d8c	20 92 0d	pasdereport    jsr  synccolptr          ; On synchronise le ptr couleur.
.0d8f	68		               pla                      ; Récupère l'accumulateur ...
.0d90	28		               plp                      ; ... et les flags
.0d91	60		               rts
.0d92			synccolptr
.0d92	08		               php                      ; Sauvegarde flags ...
.0d93	48		               pha                      ; ... et accumulateur
.0d94	ad ff 0c	               lda  scrptr              ; Récupère le LSB du scrptr ...
.0d97	8d 01 0d	               sta  colptr              ; ... pour le placer dans le colptr.
.0d9a	ad 00 0d	               lda  scrptr+1            ; Récupère le mSB du scrptr, ...
.0d9d	29 03		               and  #%00000011          ; ... le converti pour pointer ...
.0d9f	09 d8		               ora  #%11011000          ; ... la RAM couleur ...
.0da1	8d 02 0d	               sta  colptr+1            ; ... et le sauvegarde.
.0da4	68		               pla                      ; Récupère l'accumulateur ...
.0da5	28		               plp                      ; ... et les flags
.0da6	60		               rts
.0da7			cls
.0da7	20 4e 0a	               jsr  push                ; On sauvegarde les registres
.0daa	ad 15 0d	               lda  virtaddr            ; On replace le curseur d'ecran à
.0dad	8d ff 0c	               sta  scrptr
.0db0	ad 16 0d	               lda  virtaddr+1          ; sa position initiale, ($0400).
.0db3	8d 00 0d	               sta  scrptr+1
.0db6	20 92 0d	               jsr  synccolptr          ; On synchronise la couleur.
.0db9	20 5e 0f	               jsr  scrptr2zp1          ; L'adresse actuelle dans le ZP1.
.0dbc	ad 04 0d	               lda  brdcol              ; On place la couleur ...
.0dbf	8d 20 d0	               sta  vicbordcol          ; ... de la bordure.
.0dc2	ad 14 0d	               lda  bkcol               ; Associer couleur pour ...
.0dc5	8d 21 d0	               sta  vicbackcol          ; ... remplir l'ecran ...
.0dc8	a9 20		               lda  #$20                ; ... de caracteres espace.
.0dca	a2 04		               ldx  #4                  ; Quatre blocs de ...
.0dcc	a0 00		nextline       ldy  #0                  ; ... 256 caracteres.
.0dce			nextcar
.0dce	91 fb		               sta  (zpage1),y          ;
.0dd0	a5 fc		               lda  zpage1+1
.0dd2	48		               pha
.0dd3	29 03		               and  #%00000011
.0dd5	09 d8		               ora  #%11011000
.0dd7	85 fc		               sta  zpage1+1
.0dd9	a9 00		               lda  #0
.0ddb	91 fb		               sta  (zpage1),y
.0ddd	68		               pla
.0dde	85 fc		               sta  zpage1+1
.0de0	a9 20		               lda  #$20
.0de2	88		               dey
.0de3	d0 e9		               bne  nextcar
.0de5	e6 fc		               inc  zpage1+1
.0de7	ca		               dex
.0de8	d0 e4		               bne  nextcar
.0dea	a9 00		               lda  #$00
.0dec	8d ff 0c	               sta  scrptr
.0def	a9 04		               lda  #$04
.0df1	8d 00 0d	               sta  scrptr+1
.0df4	20 92 0d	               jsr  synccolptr
.0df7	20 8d 0a	               jsr  pop
.0dfa	60		               rts
.0dfb			setborder
.0dfb	08		               php
.0dfc	8d 04 0d	               sta  brdcol
.0dff	8d 20 d0	               sta  vicbordcol
.0e02	28		               plp
.0e03	60		               rts
.0e04			setinverse
.0e04	08		               php
.0e05	48		               pha
.0e06	a9 80		               lda  #%10000000
.0e08	8d 09 0d	               sta  inverse
.0e0b	68		               pla
.0e0c	28		               plp
.0e0d	60		               rts
.0e0e			clrinverse
.0e0e	08		               php
.0e0f	48		               pha
.0e10	a9 00		               lda  #%00000000
.0e12	8d 09 0d	               sta  inverse
.0e15	68		               pla
.0e16	28		               plp
.0e17	60		               rts
.0e18			putch
.0e18	20 4e 0a	               jsr  push           ; On sauvegarde les registres
.0e1b	20 5e 0f	               jsr  scrptr2zp1     ; Place le ptr d'ecran sur zp1
.0e1e	29 3f		               and  #%00111111     ; Masque des bits 6 et 7 pour la ouleur.
.0e20	0d 14 0d	               ora  bkcol          ; On y ajoute la couleur du fond.
.0e23	a0 00		               ldy  #0             ; Met Y à 0
.0e25	91 fb		               sta  (zpage1),y     ; Affiche le caractere
.0e27	ae 02 0d	               ldx  colptr+1       ; Place le MSB du ptr de couleur
.0e2a	86 fc		               stx  zpage1+1       ; ... dans le MSB du zp1.
.0e2c	ad 03 0d	               lda  curcol         ; Charge la couleur voulu dans.
.0e2f	91 fb		               sta  (zpage1),y     ; ... la ram de couleur.
.0e31	20 7f 0d	               jsr  incscrptr      ; Incremente le pointeur d'ecran.
.0e34	20 8d 0a	               jsr  pop            ; Replace tous les registres
.0e37	60		               rts
.0e38			z2putch
.0e38	20 4e 0a	               jsr  push           ; On sauvegarde les registres
.0e3b	a0 00		               ldy  #$0            ; Met Y à 0
.0e3d	b1 fd		               lda  (zpage2),y     ; Charge le caractere
.0e3f	20 18 0e	               jsr  putch          ; Appel pour affichage
.0e42	20 8d 0a	               jsr  pop            ; Replace tous les registres
.0e45	60		               rts
.0e46			z2puts
.0e46	20 4e 0a	               jsr  push           ; On sauvegarde les registres
.0e49	a0 00		               ldy  #$0            ; Met Y à 0
.0e4b	b1 fd		nextcar        lda  (zpage2),y     ; Charge le caractere
.0e4d	f0 09		               beq  endstr         ; Est-ce le 0 de fin de chaine ?
.0e4f	20 38 0e	               jsr  z2putch        ; Appel pour affichage
.0e52	20 6c 0b	               jsr  inczp2         ; On pointe zp2 sur le prochain caractere.
.0e55	4c 4b 0e	               jmp  nextcar        ; On passe au prochain
.0e58	20 8d 0a	endstr         jsr  pop            ; Replace tous les registres
.0e5b	60		               rts
.0e5c			puts
.0e5c	20 4e 0a	               jsr  push           ; On sauvegarde les registres
.0e5f	86 fd		               stx  zpage2         ; On positionne xp2 en fonction de
.0e61	84 fe		               sty  zpage2+1       ; l'adresse reçcu dans X et Y
.0e63	20 46 0e	               jsr  z2puts         ; Appel pour affichage
.0e66	20 8d 0a	               jsr  pop            ; Replace tous les registres
.0e69	60		               rts
.0e6a			gotoxy
.0e6a	20 4e 0a	               jsr  push           ; On sauvegarde les registres
.0e6d	20 53 0d	               jsr  curshome       ;  retourne le curseur virtuel a 0,0.
.0e70	c0 00		yagain         cpy  #0             ; Devons nous changer de ligne ?
.0e72	f0 09		               beq  setx           ; Si non, on verifi les colonnes.
.0e74	a9 28		               lda  #40            ; Si oui on ajoute 40
.0e76	20 fb 0e	               jsr  saddscrptr     ;  à l'adresse du pointeur virtuel autant
.0e79	88		               dey                 ;  de fois qu'il est spécifié dans y.
.0e7a	4c 70 0e	               jmp  yagain         ; On passe au prochain y.
.0e7d	8a		setx           txa                 ; On ajoute la valeur de X
.0e7e	20 fb 0e	               jsr  saddscrptr     ;  à l'adresse di pointeur virtuel.
.0e81	20 92 0d	               jsr  synccolptr     ; Synchro du pointeur des couleurs
.0e84	20 8d 0a	               jsr  pop            ; Replace tous les registres
.0e87	60		               rts
.0e88			putsxy
.0e88	20 4e 0a	               jsr  push           ; On sauvegarde les registres et le zp2
.0e8b	86 fd		               stx  zpage2         ; Place l'adr de chaine dans zp2
.0e8d	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.0e8f	a0 00		               ldy  #0             ; On place le compteur
.0e91	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.0e93	aa		               tax                 ; de A à X
.0e94	20 6c 0b	               jsr  inczp2         ; On deplace le pointeur
.0e97	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.0e99	a8		               tay                 ; de A à Y
.0e9a	20 6a 0e	               jsr  gotoxy         ; gotoxy : X=col, Y=ligne
.0e9d	20 6c 0b	               jsr  inczp2         ; On deplace le pointeur
.0ea0	20 46 0e	               jsr  z2puts         ; On imprime la chaine
.0ea3	20 8d 0a	               jsr  pop            ; Replace tous les registres
.0ea6	60		               rts
.0ea7			putscxy
.0ea7	20 4e 0a	               jsr  push           ; On Sauvegarde registres et zp2
.0eaa	86 fd		               stx  zpage2         ; On place l'adresse de chaine dans zp2
.0eac	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.0eae	a0 00		               ldy  #0             ; Place le compteur
.0eb0	b1 fd		               lda  (zpage2),y     ; Charge la couleur
.0eb2	8d 03 0d	               sta  curcol         ; ... et on la definie
.0eb5	20 6c 0b	               jsr  inczp2         ; Pointe le prochain byte
.0eb8	b1 fd		               lda  (zpage2),y     ; Récupere et sauvegarde ...
.0eba	8d 14 0d	               sta  bkcol          ; ... l'index de couleur de fond
.0ebd	20 6c 0b	               jsr  inczp2         ; Deplace le pointeur
.0ec0	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.0ec2	aa		               tax                 ; ... de A à X
.0ec3	20 6c 0b	               jsr  inczp2         ; Deplace le pointeur
.0ec6	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.0ec8	a8		               tay                 ; de A à Y
.0ec9	20 6a 0e	               jsr  gotoxy         ; gotoxy : X=col, y=ligne
.0ecc	20 6c 0b	               jsr  inczp2         ; Place le ptr en début de chaine
.0ecf	20 46 0e	               jsr  z2puts         ; On imprime la chaine
.0ed2	20 8d 0a	               jsr  pop
.0ed5	60		               rts
.0ed6			setcurcol
.0ed6	08		               php
.0ed7	8d 03 0d	               sta  curcol
.0eda	28		               plp
.0edb	60		               rts
.0edc			setvicbkcol
.0edc	08		               php
.0edd	48		               pha
.0ede	8a		               txa
.0edf	29 03		               and  #$03
.0ee1	aa		               tax
.0ee2	68		               pla
.0ee3	9d 05 0d	               sta  vicbkcol0,x
.0ee6	9d 21 d0	               sta  $d021,x
.0ee9	28		               plp
.0eea	60		               rts
.0eeb			setbkcol
.0eeb	08		               php
.0eec	48		               pha
.0eed	0a		               asl
.0eee	0a		               asl
.0eef	0a		               asl
.0ef0	0a		               asl
.0ef1	0a		               asl
.0ef2	0a		               asl
.0ef3	29 c0		               and  #$c0
.0ef5	8d 14 0d	               sta  bkcol
.0ef8	68		               pla
.0ef9	28		               plp
.0efa	60		               rts
.0efb			saddscrptr
.0efb	08		               php
.0efc	48		               pha
.0efd	18		               clc
.0efe	6d ff 0c	               adc  scrptr
.0f01	8d ff 0c	               sta  scrptr
.0f04	90 03		               bcc  norep
.0f06	ee 00 0d	               inc  scrptr+1
.0f09	68		norep          pla
.0f0a	28		               plp
.0f0b	60		               rts
.0f0c			scrptr2str
.0f0c	20 4e 0a	               jsr  push
.0f0f	ad 00 0d	               lda  scrptr+1
.0f12	48		               pha
.0f13	20 55 0c	               jsr  lsra4bits
.0f16	20 49 0c	               jsr  nib2hex
.0f19	8d 0a 0d	               sta  scraddr
.0f1c	68		               pla
.0f1d	20 55 0c	               jsr  lsra4bits
.0f20	20 49 0c	               jsr  nib2hex
.0f23	8d 0b 0d	               sta  scraddr+1
.0f26	ad 00 0d	               lda  scrptr+1
.0f29	48		               pha
.0f2a	20 55 0c	               jsr  lsra4bits
.0f2d	20 49 0c	               jsr  nib2hex
.0f30	8d 0a 0d	               sta  scraddr
.0f33	68		               pla
.0f34	20 55 0c	               jsr  lsra4bits
.0f37	20 49 0c	               jsr  nib2hex
.0f3a	8d 0b 0d	               sta  scraddr+1
.0f3d	ad ff 0c	               lda  scrptr
.0f40	48		               pha
.0f41	20 55 0c	               jsr  lsra4bits
.0f44	20 49 0c	               jsr  nib2hex
.0f47	8d 0c 0d	               sta  scraddr+2
.0f4a	8d 11 0d	               sta  coladdr+2
.0f4d	68		               pla
.0f4e	20 55 0c	               jsr  lsra4bits
.0f51	20 49 0c	               jsr  nib2hex
.0f54	8d 0d 0d	               sta  scraddr+3
.0f57	8d 12 0d	               sta  coladdr+3
.0f5a	20 8d 0a	               jsr  pop
.0f5d	60		               rts
.0f5e			scrptr2zp1
.0f5e	08		               php
.0f5f	48		               pha
.0f60	ad ff 0c	               lda  scrptr
.0f63	85 fb		               sta  zpage1
.0f65	ad 00 0d	               lda  scrptr+1
.0f68	85 fc		               sta  zpage1+1
.0f6a	68		               pla
.0f6b	28		               plp
.0f6c	60		               rts
.0f6d			colptr2zp1
.0f6d	08		               php
.0f6e	48		               pha
.0f6f	ad 01 0d	               lda  colptr
.0f72	85 fb		               sta  zpage1
.0f74	ad 02 0d	               lda  colptr+1
.0f77	85 fc		               sta  zpage1+1
.0f79	68		               pla
.0f7a	28		               plp
.0f7b	60		               rts
.0f7c			scrptr2zp2
.0f7c	08		               php
.0f7d	48		               pha
.0f7e	ad ff 0c	               lda  scrptr
.0f81	85 fd		               sta  zpage2
.0f83	ad 00 0d	               lda  scrptr+1
.0f86	85 fe		               sta  zpage2+1
.0f88	68		               pla
.0f89	28		               plp
.0f8a	60		               rts
.0f8b			colptr2zp2
.0f8b	08		               php
.0f8c	48		               pha
.0f8d	ad 01 0d	               lda  colptr
.0f90	85 fd		               sta  zpage2
.0f92	ad 02 0d	               lda  colptr+1
.0f95	85 fe		               sta  zpage2+1
.0f97	68		               pla
.0f98	28		               plp
.0f99	60		               rts
.0f9a			putrahex
.0f9a	08		               php
.0f9b	48		               pha
.0f9c	20 5c 0c	               jsr     a2hex
.0f9f	a2 03		               ldx     #<a2hexcol
.0fa1	a0 0c		               ldy     #>a2hexcol
.0fa3	20 5c 0e	               jsr     puts
.0fa6	68		               pla
.0fa7	28		               plp
.0fa8	60		               rts
.0fa9			putrahexxy
.0fa9	08		               php
.0faa	48		               pha
.0fab	20 5c 0c	               jsr  a2hex
.0fae	a9 05		               lda  #<a2hexpos
.0fb0	a0 0c		               ldy  #>a2hexpos
.0fb2	20 88 0e	               jsr  putsxy
.0fb5	68		               pla
.0fb6	28		               plp
.0fb7	60		               rts
.0fb8			putrahexcxy
.0fb8	08		               php
.0fb9	68		               pla
.0fba	20 5c 0c	               jsr  a2hex
.0fbd	a9 05		               lda  #<a2hexpos
.0fbf	a0 0c		               ldy  #>a2hexpos
.0fc1	20 a7 0e	               jsr  putscxy
.0fc4	68		               pla
.0fc5	28		               plp
.0fc6	60		               rts

;******  Return to file: main.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/c64-lib-showregs.asm

.0fc7			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=$c0			bkcol   =   bkcol3
.0fc7	08		                php
.0fc8	8d 79 11	                sta  rega
.0fcb	68		                pla
.0fcc	8d 7c 11	                sta  regp
.0fcf	8e 7a 11	                stx  regx
.0fd2	8c 7b 11	                sty  regy
.0fd5	ba		                tsx
.0fd6	8e 7d 11	                stx  regs
.0fd9	68		                pla
.0fda	8d 7f 11	                sta  regpcl
.0fdd	8d 80 11	                sta  regpcl2
.0fe0	68		                pla
.0fe1	8d 7e 11	                sta  regpch
.0fe4	ad 79 11	                lda  rega
.0fe7	48		                pha
.0fe8	20 49 0c	                jsr  nib2hex
.0feb	8d 1c 11	                sta  vala+1
.0fee	68		                pla
.0fef	20 55 0c	                jsr  lsra4bits
.0ff2	20 49 0c	                jsr  nib2hex
.0ff5	8d 1b 11	                sta  vala
.0ff8	ad 7b 11	                lda  regy
.0ffb	48		                pha
.0ffc	20 49 0c	                jsr  nib2hex
.0fff	8d 32 11	                sta  valy+1
.1002	68		                pla
.1003	20 55 0c	                jsr  lsra4bits
.1006	20 49 0c	                jsr  nib2hex
.1009	8d 31 11	                sta  valy
.100c	ad 7a 11	                lda  regx
.100f	48		                pha
.1010	20 49 0c	                jsr  nib2hex
.1013	8d 27 11	                sta  valx+1
.1016	68		                pla
.1017	20 55 0c	                jsr  lsra4bits
.101a	20 49 0c	                jsr  nib2hex
.101d	8d 26 11	                sta  valx
.1020	ad 7c 11	                lda  regp
.1023	48		                pha
.1024	20 49 0c	                jsr  nib2hex
.1027	8d 3d 11	                sta  valp+1
.102a	68		                pla
.102b	20 55 0c	                jsr  lsra4bits
.102e	20 49 0c	                jsr  nib2hex
.1031	8d 3c 11	                sta  valp
.1034	ad 7d 11	                lda  regs
.1037	48		                pha
.1038	20 49 0c	                jsr  nib2hex
.103b	8d 48 11	                sta  vals+1
.103e	68		                pla
.103f	20 55 0c	                jsr  lsra4bits
.1042	20 49 0c	                jsr  nib2hex
.1045	8d 47 11	                sta  vals
.1048	ad 7e 11	                lda  regpch
.104b	48		                pha
.104c	20 49 0c	                jsr  nib2hex
.104f	8d 54 11	                sta  valpch+1
.1052	68		                pla
.1053	20 55 0c	                jsr  lsra4bits
.1056	20 49 0c	                jsr  nib2hex
.1059	8d 53 11	                sta  valpch
.105c	ad 7f 11	                lda  regpcl
.105f	48		                pha
.1060	20 49 0c	                jsr  nib2hex
.1063	8d 56 11	                sta  valpcl+1
.1066	68		                pla
.1067	20 55 0c	                jsr  lsra4bits
.106a	20 49 0c	                jsr  nib2hex
.106d	8d 55 11	                sta  valpcl
.1070	a5 fb		                lda  zpage1
.1072	48		                pha
.1073	20 49 0c	                jsr  nib2hex
.1076	8d 65 11	                sta  valz1l
.1079	68		                pla
.107a	20 55 0c	                jsr  lsra4bits
.107d	20 49 0c	                jsr  nib2hex
.1080	8d 66 11	                sta  valz1l+1
.1083	a5 fc		                lda  zpage1+1
.1085	48		                pha
.1086	20 49 0c	                jsr  nib2hex
.1089	8d 63 11	                sta  valz1h
.108c	68		                pla
.108d	20 55 0c	                jsr  lsra4bits
.1090	20 49 0c	                jsr  nib2hex
.1093	8d 64 11	                sta  valz1h+1
.1096	a5 fd		                lda  zpage2
.1098	48		                pha
.1099	20 49 0c	                jsr  nib2hex
.109c	8d 75 11	                sta  valz2l
.109f	68		                pla
.10a0	20 55 0c	                jsr  lsra4bits
.10a3	20 49 0c	                jsr  nib2hex
.10a6	8d 76 11	                sta  valz2l+1
.10a9	a5 fe		                lda  zpage2+1
.10ab	48		                pha
.10ac	20 49 0c	                jsr  nib2hex
.10af	8d 73 11	                sta  valz2h
.10b2	68		                pla
.10b3	20 55 0c	                jsr  lsra4bits
.10b6	20 49 0c	                jsr  nib2hex
.10b9	8d 74 11	                sta  valz2h+1
.10bc	20 04 0e	                jsr  setinverse
.10bf	78		                sei
.10c0	a2 13		                ldx  #<srega
.10c2	a0 11		                ldy  #>srega+1
.10c4	20 a7 0e	                jsr  putscxy
.10c7	a2 1e		                ldx  #<sregx
.10c9	a0 11		                ldy  #>sregx+1
.10cb	20 a7 0e	                jsr  putscxy
.10ce	a2 29		                ldx  #<sregy
.10d0	a0 11		                ldy  #>sregy+1
.10d2	20 a7 0e	                jsr  putscxy
.10d5	a2 34		                ldx  #<sregp
.10d7	a0 11		                ldy  #>sregp+1
.10d9	20 a7 0e	                jsr  putscxy
.10dc	a2 3f		                ldx  #<sregs
.10de	a0 11		                ldy  #>sregs+1
.10e0	20 a7 0e	                jsr  putscxy
.10e3	a2 4a		                ldx  #<sregpc
.10e5	a0 11		                ldy  #>sregpc+1
.10e7	20 a7 0e	                jsr  putscxy
.10ea	a2 59		                ldx  #<sregz1
.10ec	a0 11		                ldy  #>sregz1+1
.10ee	20 a7 0e	                jsr  putscxy
.10f1	a2 69		                ldx  #<sregz2
.10f3	a0 11		                ldy  #>sregz2+1
.10f5	20 a7 0e	                jsr  putscxy
.10f8	58		                cli
.10f9	20 0e 0e	                jsr  clrinverse
.10fc	ad 7e 11	                lda  regpch
.10ff	48		                pha
.1100	ad 7f 11	                lda  regpcl
.1103	48		                pha
.1104	ac 7b 11	                ldy  regy
.1107	ae 7a 11	                ldx  regx
.110a	ad 7c 11	                lda  regp
.110d	48		                pha
.110e	ad 79 11	                lda  rega
.1111	28		                plp
.1112	60		                rts
>1113	01 c0 00 17	srega   .byte   colr,bkcol,coln,line
>1117	20 01 3a 24	        .text   ' a:$' ;4,24
>111b	00 00 00	vala    .byte   0,0,0
>111e	01 c0 06 17	sregx   .byte   colr,bkcol,coln+6,line
>1122	20 18 3a 24	        .text   ' x:$' ;4,24
>1126	00 00 00	valx    .byte   0,0,0
>1129	01 c0 0c 17	sregy   .byte   colr,bkcol,coln+12,line
>112d	20 19 3a 24	        .text   ' y:$' ;4,24
>1131	00 00 00	valy    .byte   0,0,0
>1134	01 c0 12 17	sregp   .byte   colr,bkcol,coln+18,line
>1138	20 10 3a 24	        .text   ' p:$' ;4,24
>113c	00 00 00	valp    .byte   0,0,0
>113f	01 c0 18 17	sregs   .byte   colr,bkcol,coln+24,line
>1143	20 13 3a 24	        .text   ' s:$' ;4,24
>1147	00 00 00	vals    .byte   0,0,0
>114a	01 c0 1e 17	sregpc  .byte   colr,bkcol,coln+30,line
>114e	20 10 03 3a	        .text   ' pc:$' ;4,24
>1152	24
>1153	00 00		valpch  .byte   0,0
>1155	00 00 20 00	valpcl  .byte   0,0,32,0
>1159	01 c0 03 18	sregz1  .byte   colr,bkcol,coln+3,line+1
>115d	20 1a 10 31	        .text   ' zp1:$' ;4,24
>1161	3a 24
>1163	00 00		valz1h  .byte   0,0
>1165	00 00 20 00	valz1l  .byte   0,0,32,0
>1169	01 c0 0f 18	sregz2  .byte   colr,bkcol,coln+15,line+1
>116d	20 1a 10 32	        .text   ' zp2:$' ;4,24
>1171	3a 24
>1173	00 00		valz2h  .byte   0,0
>1175	00 00 20 00	valz2l  .byte   0,0,32,0
>1179	00		rega    .byte   0
>117a	00		regx    .byte   0
>117b	00		regy    .byte   0
>117c	00		regp    .byte   0
>117d	00		regs    .byte   0
>117e	00		regpch  .byte   0
>117f	00		regpcl  .byte   0
>1180	00		regpcl2 .byte   0
>1181	00		vzp1h   .byte   0
>1182	00		vzp1l   .byte   0
>1183	00		vzp2h   .byte   0
>1184	00		vzp2l   .byte   0

;******  Return to file: main.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/c64-lib-joystick.asm

=$dc00			js_2port       =    $dc00
=$dc01			js_1port       =    $dc01
=$dc02			js_2dir        =    $dc02
=$dc03			js_1dir        =    $dc03
=2			js_xoffset     =    2
=2			js_yoffset     =    2
=0			js_location    =    0
.1185			js_init
.1185	20 4e 0a	               jsr  push
.1188	ad 03 dc	               lda  js_1dir
.118b	29 e0		               and  #$e0
.118d	8d 03 dc	               sta  js_1dir
.1190	ad 02 dc	               lda  js_2dir
.1193	29 e0		               and  #$e0
.1195	8d 02 dc	               sta  js_2dir
.1198	20 8d 0a	               jsr  pop
.119b	60		               rts
.119c			js_scan
.119c	20 a3 11	               jsr  js_1scan
.119f	20 52 12	               jsr  js_2scan
.11a2	60		               rts
.11a3			js_1scan
.11a3	20 4e 0a	               jsr  push
.11a6	ad 01 dc	               lda  js_1port
.11a9	29 1f		               and  #$1f
.11ab	c9 00		               cmp  #$00
.11ad	d0 03		               bne  p1scan
.11af	4c 42 12	               jmp  port1_out
.11b2	49 1f		p1scan         eor  #$1f
.11b4	18		               clc
.11b5	4a		js_1b0         lsr
.11b6	90 14		               bcc  js_1b1
.11b8	48		               pha
.11b9	ee 6c 15	               inc  js_1flag
.11bc	ad 68 15	               lda  js_1pixy
.11bf	38		               sec
.11c0	e9 02		               sbc  #js_yoffset
.11c2	c9 f0		               cmp  #$f0
.11c4	90 02		               bcc  sto1ym
.11c6	a9 00		               lda  #$00
.11c8	8d 68 15	sto1ym         sta  js_1pixy
.11cb	68		               pla
.11cc	4a		js_1b1         lsr
.11cd	90 14		               bcc  js_1b2
.11cf	48		               pha
.11d0	ee 6c 15	               inc  js_1flag
.11d3	ad 68 15	               lda  js_1pixy
.11d6	18		               clc
.11d7	69 02		               adc  #js_yoffset
.11d9	c9 c7		               cmp  #199
.11db	90 02		               bcc  sto1yp
.11dd	a9 c7		               lda  #199
.11df	8d 68 15	sto1yp         sta  js_1pixy
.11e2	68		               pla
.11e3	4a		js_1b2         lsr
.11e4	90 20		               bcc  js_1b3
.11e6	48		               pha
.11e7	ee 6c 15	               inc  js_1flag
.11ea	ad 66 15	               lda  js_1pixx
.11ed	0d 67 15	               ora  js_1pixx+1
.11f0	f0 13		               beq  js_1b2out
.11f2	38		               sec
.11f3	ad 66 15	               lda  js_1pixx
.11f6	e9 02		               sbc  #js_xoffset
.11f8	8d 66 15	               sta  js_1pixx
.11fb	b0 08		               bcs  js_1b2out
.11fd	ad 67 15	               lda  js_1pixx+1
.1200	f0 03		               beq  js_1b2out
.1202	ce 67 15	               dec  js_1pixx+1
.1205	68		js_1b2out      pla
.1206	4a		js_1b3         lsr
.1207	90 22		               bcc  js_1b4
.1209	48		               pha
.120a	ee 6c 15	               inc  js_1flag
.120d	ad 67 15	               lda  js_1pixx+1
.1210	f0 0a		               beq  incj1x
.1212	ad 66 15	               lda  js_1pixx
.1215	c9 3c		               cmp  #$40-4
.1217	30 03		               bmi  incj1x
.1219	4c 2a 12	               jmp  js_1b3out
.121c	18		incj1x         clc
.121d	ad 66 15	               lda  js_1pixx
.1220	69 02		               adc  #js_xoffset
.1222	8d 66 15	               sta  js_1pixx
.1225	90 03		               bcc  js_1b3out
.1227	ee 67 15	               inc  js_1pixx+1
.122a	68		js_1b3out      pla
.122b	4a		js_1b4          lsr                     ;Estce le bbouton fire (F)
.122c	90 14		                bcc     port1_out       ;Oui!
.122e	ee 6c 15	                inc     js_1flag
.1231	ee 6b 15	                inc     js_1fire        ; on augmente le nombre de tir
.1234	a2 01		js_1wait        ldx     #$01
.1236	a0 ff		                ldy     #$ff
.1238	c8		js_1rel         iny
.1239	ad 01 dc	                lda     js_1port
.123c	49 ff		                eor     #$ff
.123e	29 10		                and     #$10
.1240	d0 f6		                bne     js_1rel         ; des boutons
.1242	ad 6c 15	port1_out       lda     js_1flag
.1245	f0 08		                beq     out
.1247	20 44 13	                jsr     js_1correct
.124a	a9 00		                lda     #0
.124c	8d 6c 15	                sta     js_1flag
.124f	20 8d 0a	out             jsr     pop
.1252			js_2scan
.1252	20 4e 0a	                jsr     push
.1255	ad 00 dc	port2           lda     js_2port
.1258	29 1f		                and     #$1f
.125a	c9 1f		                cmp	#$1f
.125c	d0 03		                bne     p2scan
.125e	4c 15 13	                jmp     port2_out
.1261	49 1f		p2scan          eor     #$1f
.1263	a2 02		                ldx     #$02
.1265	18		                clc
.1266	4a		js_2b0          lsr                     ;On decale js_2 bit 0 dans C
.1267	90 14		                bcc     js_2b1          ;Est-ce vers le haut (U)
.1269	48		                pha                     ;On stack la valeur
.126a	ee 77 15	                inc     js_2flag
.126d	ad 73 15	                lda     js_2pixy        ;Oui!
.1270	38		                sec                     ;On place la carry a 1
.1271	e9 02		                sbc     #js_yoffset     ;On reduit
.1273	c9 f0		                cmp     #$f0
.1275	90 02		                bcc     sto2ym
.1277	a9 00		                lda     #$00
.1279	8d 73 15	sto2ym          sta     js_2pixy        ; le y
.127c	68		                pla                     ;On recupere la valeur
.127d	4a		js_2b1          lsr                     ;On decale js_2 bit 0 dans C
.127e	90 14		                bcc     js_2b2          ;Est-ce vers le bas (D)
.1280	48		                pha                     ;On stack la valeur
.1281	ee 77 15	                inc     js_2flag
.1284	ad 73 15	                lda     js_2pixy        ;Oui!
.1287	18		                clc                     ;On place la carry a 0
.1288	69 02		                adc     #js_yoffset     ;On augmente
.128a	c9 c7		                cmp     #199
.128c	90 02		                bcc     sto2yp
.128e	a9 c7		                lda     #199
.1290	8d 73 15	sto2yp          sta     js_2pixy        ; le y
.1293	68		                pla                     ;On recupere la valeur
.1294	4a		js_2b2          lsr                     ;On decale js_2 bit 0 dans C
.1295	90 20		                bcc     js_2b3          ;Est-ce vers la gauche (L)
.1297	48		                pha                     ;On stack la valeur
.1298	ee 77 15	                inc     js_2flag
.129b	ad 71 15	                lda     js_2pixx        ;Oui!
.129e	0d 72 15	                ora     js_2pixx+1
.12a1	f0 13		                beq     js_2b2out
.12a3	38		                sec                     ;On place la carry a 1
.12a4	ad 71 15	                lda     js_2pixx        ;Oui!
.12a7	e9 02		                sbc     #js_xoffset     ;On diminue
.12a9	8d 71 15	                sta     js_2pixx        ; le X
.12ac	b0 08		                bcs     js_2b2out       ; de offset
.12ae	ad 72 15	                lda     js_2pixx+1
.12b1	f0 03		                beq     js_2b2out
.12b3	ce 72 15	                dec     js_2pixx+1      ; sur 16 bits
.12b6	68		js_2b2out       pla                     ;On recupere la valeur
.12b7	4a		js_2b3          lsr                     ;On decale js_2 bit 0 dans C
.12b8	90 22		                bcc     js_2b4          ;Est-ce vers la droite (R)
.12ba	48		                pha                     ;On stack la valeur
.12bb	ee 77 15	                inc     js_2flag
.12be	ad 72 15	                lda     js_2pixx+1
.12c1	f0 0a		                beq     incj2x
.12c3	ad 71 15	                lda     js_2pixx
.12c6	c9 3e		                cmp     #$40-js_xoffset
.12c8	30 03		                bmi     incj2x
.12ca	4c db 12	                jmp     js_2b3out
.12cd	18		incj2x          clc                     ;On place la carry a 0
.12ce	ad 71 15	                lda     js_2pixx        ;Oui!
.12d1	69 02		                adc     #js_xoffset     ;On augmente
.12d3	8d 71 15	                sta     js_2pixx        ; le X
.12d6	90 03		                bcc     js_2b3out       ; de offset
.12d8	ee 72 15	                inc     js_2pixx+1      ; sur 16 bits
.12db	68		js_2b3out       pla                     ;On recupere la valeur
.12dc	4a		js_2b4          lsr                     ;Estce le bbouton fire (F)
.12dd	90 36		                bcc     port2_out       ;Oui!
.12df	ee 77 15	                inc     js_2flag
.12e2	ee 76 15	                inc     js_2fire        ; on augmente le nombre de tir
.12e5	a9 01		                lda     #%00000001
.12e7	8d 7b 15	                sta     js_2events
.12ea	ad 71 15	                lda     js_2pixx
.12ed	8d 78 15	                sta     js_2clickx
.12f0	ad 72 15	                lda     js_2pixx+1
.12f3	8d 79 15	                sta     js_2clickx+1
.12f6	ad 73 15	                lda     js_2pixy
.12f9	8d 7a 15	                sta     js_2clicky
.12fc	ad dd 15	                lda     js_2val16a+1
.12ff	49 40		                eor     #%01000000
.1301	8d dd 15	                sta     js_2val16a+1
.1304	a2 00		js_2wait        ldx     #$00
.1306	a0 ff		                ldy     #$ff
.1308	c8		js_2rel         iny
.1309	d0 01		                bne     sr1
.130b	e8		                inx
.130c			sr1
.130c	ad 00 dc	                lda     js_2port
.130f	49 ff		                eor     #$ff
.1311	29 10		                and     #$10
.1313	d0 f3		                bne     js_2rel         ; des boutons
.1315	ad 77 15	port2_out       lda     js_2flag
.1318	f0 08		                beq     out
.131a	20 79 13	                jsr     js_2correct
.131d	a9 00		                lda     #0
.131f	8d 77 15	                sta     js_2flag
.1322	20 8d 0a	out             jsr     pop
.1325			js_corrector
.1325	08		                php
.1326	48		                pha
.1327	ad 6c 15	                lda     js_1flag
.132a	f0 08		                beq     check2
.132c	20 44 13	                jsr     js_1correct
.132f	a9 00		                lda     #0
.1331	8d 6c 15	                sta     js_1flag
.1334	ad 77 15	check2          lda     js_2flag
.1337	f0 08		                beq     no_update
.1339	20 79 13	                jsr     js_2correct
.133c	a9 00		                lda     #0
.133e	8d 77 15	                sta     js_2flag
.1341	68		no_update       pla
.1342	28		                plp
.1343	60		                rts
.1344			js_1correct
.1344	08		                php
.1345	48		                pha
.1346	ad 66 15	                lda     js_1pixx
.1349	8d 77 13	                sta     vallsb
.134c	ad 67 15	                lda     js_1pixx+1
.134f	6a		                ror                     ; ex = %0000000100000001 = 257 pixel
.1350	6e 77 13	                ror     vallsb          ; Cnnnnnnn      On divise par 8 pc les
.1353	4e 77 13	                lsr     vallsb          ; 0Cnnnnnn      caracteres de 8 pixels
.1356	4e 77 13	                lsr     vallsb          ; 00Cnnnnn
.1359	ad 77 13	                lda     vallsb          ; devient = %00100000 = 32
.135c	8d 69 15	                sta     js_1x
.135f	ad 68 15	                lda     js_1pixy
.1362	8d 77 13	                sta     vallsb
.1365	4e 77 13	                lsr     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.1368	4e 77 13	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.136b	4e 77 13	                lsr     vallsb          ; 00Cnnnnn
.136e	ad 77 13	                lda     vallsb          ; devient = %00100000 = 32
.1371	8d 6a 15	                sta     js_1y
.1374	68		                pla
.1375	28		                plp
.1376	60		                rts
>1377	00		vallsb          .byte     0
>1378	00		regx            .byte     0
.1379			js_2correct
.1379	08		                php
.137a	48		                pha
.137b	ad 71 15	                lda     js_2pixx
.137e	8d ac 13	                sta     vallsb
.1381	ad 72 15	                lda     js_2pixx+1
.1384	6a		                ror                     ; ex = %0000000100000001 = 257 pixel
.1385	6e ac 13	                ror     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.1388	4e ac 13	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.138b	4e ac 13	                lsr     vallsb          ; 00Cnnnnn
.138e	ad ac 13	                lda     vallsb          ; devient = %00100000 = 32
.1391	8d 74 15	                sta     js_2x
.1394	ad 73 15	                lda     js_2pixy
.1397	8d ac 13	                sta     vallsb
.139a	4e ac 13	                lsr     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.139d	4e ac 13	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.13a0	4e ac 13	                lsr     vallsb          ; 00Cnnnnn
.13a3	ad ac 13	                lda     vallsb          ; devient = %00100000 = 32
.13a6	8d 75 15	                sta     js_2y
.13a9	68		                pla
.13aa	28		                plp
.13ab	60		                rts
>13ac	00		vallsb          .byte     0
>13ad	00		regx            .byte     0
.13ae			js_showvals
.13ae	20 3e 14	                jsr     js_2showvals
.13b1	60		                rts
.13b2			js_1showvals
.13b2	20 4e 0a	                jsr     push
.13b5	ad 69 15	                lda     js_1x
.13b8	20 5c 0c	                jsr     a2hex
.13bb	ad 09 0c	                lda     a2hexstr+1
.13be	8d 8f 15	                sta     js_1val8+19
.13c1	ad 0a 0c	                lda     a2hexstr+2
.13c4	8d 90 15	                sta     js_1val8+20
.13c7	ad 66 15	                lda     js_1pixx
.13ca	20 5c 0c	                jsr     a2hex
.13cd	ad 09 0c	                lda     a2hexstr+1
.13d0	8d ae 15	                sta     js_1val16+14
.13d3	ad 0a 0c	                lda     a2hexstr+2
.13d6	8d af 15	                sta     js_1val16+15
.13d9	ad 67 15	                lda     js_1pixx+1
.13dc	20 5c 0c	                jsr     a2hex
.13df	ad 09 0c	                lda     a2hexstr+1
.13e2	8d ac 15	                sta     js_1val16+12
.13e5	ad 0a 0c	                lda     a2hexstr+2
.13e8	8d ad 15	                sta     js_1val16+13
.13eb	ad 6a 15	                lda     js_1y
.13ee	20 5c 0c	                jsr     a2hex
.13f1	ad 09 0c	                lda     a2hexstr+1
.13f4	8d 93 15	                sta     js_1val8+23
.13f7	ad 0a 0c	                lda     a2hexstr+2
.13fa	8d 94 15	                sta     js_1val8+24
.13fd	ad 68 15	                lda     js_1pixy
.1400	20 5c 0c	                jsr     a2hex
.1403	ad 09 0c	                lda     a2hexstr+1
.1406	8d b4 15	                sta     js_1val16+20
.1409	ad 0a 0c	                lda     a2hexstr+2
.140c	8d b5 15	                sta     js_1val16+21
.140f	a9 00		                lda     #0
.1411	20 5c 0c	                jsr     a2hex
.1414	ad 09 0c	                lda     a2hexstr+1
.1417	8d b2 15	                sta     js_1val16+18
.141a	ad 0a 0c	                lda     a2hexstr+2
.141d	8d b3 15	                sta     js_1val16+19
.1420	ad 6b 15	                lda     js_1fire
.1423	20 5c 0c	                jsr     a2hex
.1426	ad 0a 0c	                lda     a2hexstr+2
.1429	8d 9d 15	                sta     js_1val8+33
.142c	a2 7c		                ldx     #<js_1val8
.142e	a0 15		                ldy     #>js_1val8
.1430	20 a7 0e	                jsr     putscxy
.1433	a2 a0		                ldx     #<js_1val16
.1435	a0 15		                ldy     #>js_1val16
.1437	20 a7 0e	                jsr     putscxy
.143a	20 8d 0a	                jsr     pop
.143d	60		                rts
.143e			js_2showvals
.143e	20 4e 0a	                jsr     push                    ; stack : y, x, a, flg
.1441	ad 74 15	                lda     js_2x
.1444	20 5c 0c	                jsr     a2hex
.1447	ad 08 0c	                lda     a2hexstr
.144a	8d cb 15	                sta     js_2val8+19
.144d	ad 09 0c	                lda     a2hexstr+1
.1450	8d cc 15	                sta     js_2val8+20
.1453	ad 78 15	                lda     js_2clickx
.1456	20 5c 0c	                jsr     a2hex
.1459	ad 08 0c	                lda     a2hexstr
.145c	8d f9 15	                sta     js_2val16+14
.145f	ad 09 0c	                lda     a2hexstr+1
.1462	8d fa 15	                sta     js_2val16+15
.1465	ad 79 15	                lda     js_2clickx+1
.1468	20 5c 0c	                jsr     a2hex
.146b	ad 08 0c	                lda     a2hexstr
.146e	8d f7 15	                sta     js_2val16+12
.1471	ad 09 0c	                lda     a2hexstr+1
.1474	8d f8 15	                sta     js_2val16+13
.1477	ad 75 15	                lda     js_2y
.147a	20 5c 0c	                jsr     a2hex
.147d	ad 08 0c	                lda     a2hexstr
.1480	8d cf 15	                sta     js_2val8+23
.1483	ad 09 0c	                lda     a2hexstr+1
.1486	8d d0 15	                sta     js_2val8+24
.1489	ad 7a 15	                lda     js_2clicky
.148c	20 5c 0c	                jsr     a2hex
.148f	ad 08 0c	                lda     a2hexstr
.1492	8d ff 15	                sta     js_2val16+20
.1495	ad 09 0c	                lda     a2hexstr+1
.1498	8d 00 16	                sta     js_2val16+21
.149b	a9 00		                lda     #0
.149d	20 5c 0c	                jsr     a2hex
.14a0	ad 08 0c	                lda     a2hexstr
.14a3	8d fd 15	                sta     js_2val16+18
.14a6	ad 09 0c	                lda     a2hexstr+1
.14a9	8d fe 15	                sta     js_2val16+19
.14ac	ad 76 15	                lda     js_2fire
.14af	20 5c 0c	                jsr     a2hex
.14b2	ad 09 0c	                lda     a2hexstr+1
.14b5	8d d9 15	                sta     js_2val8+33
.14b8	a2 b8		                ldx     #<js_2val8
.14ba	a0 15		                ldy     #>js_2val8
.14bc	20 a7 0e	                jsr     putscxy
.14bf	a2 dc		                ldx     #<js_2val16a
.14c1	a0 15		                ldy     #>js_2val16a
.14c3	20 a7 0e	                jsr     putscxy
.14c6	a2 eb		                ldx     #<js_2val16
.14c8	a0 15		                ldy     #>js_2val16
.14ca	20 a7 0e	                jsr     putscxy
.14cd	20 8d 0a	                jsr     pop
.14d0	60		                rts
.14d1			js_updatecurs
.14d1	20 4e 0a	                jsr     push
.14d4	ad 74 15	running         lda     js_2x
.14d7	cd 60 15	                cmp     js_x
.14da	f0 06		                beq     chky
.14dc	8d 60 15	                sta     js_x
.14df	ee 33 15	                inc     flag
.14e2	ad 75 15	chky            lda     js_2y
.14e5	cd 61 15	                cmp     js_y
.14e8	f0 06		                beq     chkflag
.14ea	8d 61 15	                sta     js_y
.14ed	ee 33 15	                inc     flag
.14f0	ad 33 15	chkflag         lda     flag
.14f3	f0 1e		                beq     showit
.14f5	ae 62 15	                ldx     js_oldx
.14f8	ac 63 15	                ldy     js_oldy
.14fb	20 34 15	                jsr     js_eoraddrxy
.14fe	ae 60 15	                ldx     js_x
.1501	ac 61 15	                ldy     js_y
.1504	20 34 15	                jsr     js_eoraddrxy
.1507	ad 60 15	                lda     js_x
.150a	8d 62 15	                sta     js_oldx
.150d	ad 61 15	                lda     js_y
.1510	8d 63 15	                sta     js_oldy
.1513	a9 00		showit          lda     #0
.1515	8d 33 15	                sta     flag
.1518	8d f9 0b	                sta     addr1
.151b	a9 04		                lda     #$04
.151d	8d fa 0b	                sta     addr1+1
.1520	ae 60 15	                ldx     js_x
.1523	ac 61 15	                ldy     js_y
.1526	20 bf 0b	                jsr     xy2addr
.1529	ac fb 0b	                ldy     addr2
.152c	ae fc 0b	                ldx     addr2+1
.152f	20 8d 0a	                jsr pop
.1532	60		                rts
>1533	00		flag            .byte   0
.1534			js_eoraddrxy
.1534	20 4e 0a	                jsr     push
.1537	20 a1 0b	                jsr     savezp2
.153a	a9 04		                lda     #$04
.153c	8d fa 0b	                sta     addr1+1
.153f	a9 00		                lda     #0
.1541	8d f9 0b	                sta     addr1
.1544	20 bf 0b	                jsr     xy2addr
.1547	ac fb 0b	                ldy     addr2
.154a	84 fd		                sty     zpage2
.154c	ae fc 0b	                ldx     addr2+1
.154f	86 fe		                stx     zpage2+1
.1551	a0 00		                ldy     #0
.1553	b1 fd		                lda     (zpage2),y
.1555	49 40		                eor     #%01000000
.1557	91 fd		                sta     (zpage2),y
.1559	20 b0 0b	                jsr     restzp2
.155c	20 8d 0a	                jsr     pop
.155f	60		                rts
>1560	00		js_x            .byte   0
>1561	00		js_y            .byte   0
>1562	ff		js_oldx         .byte   $ff
>1563	ff		js_oldy         .byte   $ff
>1564	00		js_oldcar       .byte   0
>1565	00		js_oldcol       .byte   0
>1566	00 00		js_1pixx        .word   0
>1568	00		js_1pixy        .byte   0
>1569	00		js_1x           .byte   0
>156a	00		js_1y           .byte   0
>156b	00		js_1fire        .byte   0
>156c	00		js_1flag        .byte   0
>156d	00 00		js_1clickx      .word   0
>156f	00		js_1clicky      .byte   0
>1570	00		js_1events      .byte   0
>1571	00 00		js_2pixx        .word   0
>1573	00		js_2pixy        .byte   0
>1574	00		js_2x           .byte   0
>1575	00		js_2y           .byte   0
>1576	00		js_2fire        .byte   0
>1577	00		js_2flag        .byte   0
>1578	00 00		js_2clickx      .word   0
>157a	00		js_2clicky      .byte   0
>157b	00		js_2events      .byte   0
=$03			js_txtcol       =       vcyan
=$00			js_txtbak       =       bkcol0
>157c	03 00 04 05	js_1val8        .byte     js_txtcol,js_txtbak,4,5
>1580	50 0f 12 14	                .text   "Port 1 (x,y):($00,$00) Fire:(0)"
>1584	20 31 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>1594	30 29 20 46 09 12 05 3a 28 30 29
>159f	00		                .byte   0
>15a0	03 00 0b 07	js_1val16       .byte   js_txtcol,js_txtbak,11,7
>15a4	28 18 2c 19	                .text   "(x,y):($0000,$0000)"
>15a8	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29
>15b7	00		                .byte   0
>15b8	03 00 04 0a	js_2val8        .byte   js_txtcol,js_txtbak,4,10
>15bc	43 01 12 50	                .text   "CarPos (x,y):($00,$00) Fire:(0)"
>15c0	0f 13 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>15d0	30 29 20 46 09 12 05 3a 28 30 29
>15db	00		                .byte   0
>15dc	01 00 04 0c	js_2val16a      .byte   vblanc,js_txtbak,4,12
>15e0	43 0c 09 03	                .text   "Click pos."
>15e4	0b 20 10 0f 13 2e
>15ea	00		                .byte   0
>15eb	03 00 10 0c	js_2val16       .byte   js_txtcol,js_txtbak,16,12
>15ef	28 18 2c 19	                .text   "(x,y):($0000,$0000)"
>15f3	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29
>1602	00		                .byte   0

;******  Return to file: main.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/c64-lib-spriteman.asm

.1603			sprt_init
.1603	20 4e 0a	                jsr     push
.1606	ad 58 16	                lda     sprt_ptr
.1609	20 3a 17	                jsr     sprt_loadptr
.160c	20 83 0b	                jsr     savezp1
.160f	20 a1 0b	                jsr     savezp2
.1612	ad 15 d0	                lda     vic+$15 ; enable sprite 2
.1615	09 04		                ora     #%00000100
.1617	8d 15 d0	                sta     vic+$15
.161a	a9 0d		                lda     #$0d
.161c	8d fa 07	                sta     $7fa
.161f	ad 16 1a	                lda     sprt_ptr0
.1622	85 fb		                sta     zpage1
.1624	ad 17 1a	                lda     sprt_ptr0+1
.1627	85 fc		                sta     zpage1+1
.1629	a9 40		                lda     #$40
.162b	85 fd		                sta     zpage2
.162d	a9 03		                lda     #$03
.162f	85 fe		                sta     zpage2+1
.1631	a0 41		                ldy     #65
.1633	b1 fb		                lda     (zpage1),y      ; sprite y offset
.1635	8d 7d 17	                sta     sprt_yoffset
.1638	88		                dey
.1639	b1 fb		                lda     (zpage1),y      ; sprite x offset
.163b	8d 7c 17	                sta     sprt_xoffset
.163e	88		                dey
.163f	b1 fb		                lda     (zpage1),y      ; sprite color
.1641	8d 29 d0	                sta     $d029
.1644	88		                dey
.1645	a0 3e		                ldy     #62
.1647	b1 fb		nextbyte        lda     (zpage1),y
.1649	91 fd		                sta     (zpage2),y
.164b	88		                dey
.164c	d0 f9		                bne     nextbyte
.164e	20 92 0b	                jsr     restzp1
.1651	20 b0 0b	                jsr     restzp2
.1654	20 8d 0a	                jsr     pop
.1657	60		                rts
>1658	01		sprt_ptr        .byte   $01
.1659			sprt_calcpos
.1659	20 4e 0a	                jsr     push
.165c	a9 00		                lda     #0
.165e	8d 7f 17	                sta     sprt_x+1
.1661	8d 81 17	                sta     sprt_y+1
.1664	ad 72 15	                lda     js_2pixx+1
.1667	18		                clc
.1668	2a		                rol
.1669	2a		                rol
.166a	8d 7f 17	                sta     sprt_x+1
.166d	ad 71 15	                lda     js_2pixx
.1670	18		                clc
.1671	6d 7c 17	                adc     sprt_xoffset
.1674	8d 7e 17	                sta     sprt_x
.1677	90 08		                bcc     norepx
.1679	ad 7f 17	                lda     sprt_x+1
.167c	09 04		                ora     #$04
.167e	8d 7f 17	                sta     sprt_x+1
.1681	ad 73 15	norepx          lda     js_2pixy
.1684	18		                clc
.1685	6d 7d 17	                adc     sprt_yoffset
.1688	8d 80 17	                sta     sprt_y
.168b	20 8d 0a	                jsr     pop
.168e	60		                rts
.168f			sprt_move
.168f	20 4e 0a	                jsr     push
.1692	20 59 16	                jsr     sprt_calcpos
.1695	ad 7e 17	                lda     sprt_x
.1698	8d 04 d0	                sta     vic+$04
.169b	ad 7f 17	                lda     sprt_x+1
.169e	8d 10 d0	                sta     vic+$10
.16a1	ad 80 17	                lda     sprt_y
.16a4	8d 05 d0	                sta     vic+$05
.16a7	20 ae 16	                jsr     sprt_showpos
.16aa	20 8d 0a	                jsr     pop
.16ad	60		                rts
.16ae			sprt_showpos
.16ae	20 4e 0a	                jsr     push
.16b1	ad 7e 17	                lda     sprt_x
.16b4	20 5c 0c	                jsr     a2hex
.16b7	ad 08 0c	                lda     a2hexstr
.16ba	8d 45 1a	                sta     sprite_pos+26
.16bd	ad 09 0c	                lda     a2hexstr+1
.16c0	8d 46 1a	                sta     sprite_pos+27
.16c3	ad 7f 17	                lda     sprt_x+1
.16c6	20 5c 0c	                jsr     a2hex
.16c9	ad 08 0c	                lda     a2hexstr
.16cc	8d 43 1a	                sta     sprite_pos+24
.16cf	ad 09 0c	                lda     a2hexstr+1
.16d2	8d 44 1a	                sta     sprite_pos+25
.16d5	ad 80 17	                lda     sprt_y
.16d8	20 5c 0c	                jsr     a2hex
.16db	ad 08 0c	                lda     a2hexstr
.16de	8d 4b 1a	                sta     sprite_pos+32
.16e1	ad 09 0c	                lda     a2hexstr+1
.16e4	8d 4c 1a	                sta     sprite_pos+33
.16e7	a9 00		                lda     #0
.16e9	20 5c 0c	                jsr     a2hex
.16ec	ad 08 0c	                lda     a2hexstr
.16ef	8d 49 1a	                sta     sprite_pos+30
.16f2	ad 09 0c	                lda     a2hexstr+1
.16f5	8d 4a 1a	                sta     sprite_pos+31
.16f8	a2 2b		                ldx     #<sprite_pos
.16fa	a0 1a		                ldy     #>sprite_pos
.16fc	20 a7 0e	                jsr     putscxy
.16ff	20 8d 0a	                jsr     pop
.1702	60		                rts
.1703			sprt_loadptr2
.1703	20 4e 0a	                jsr     push
.1706	aa		                tax
.1707	8e 58 16	                stx     sprt_ptr
.170a	ad 17 1a	                lda     sprt_ptr0+1
.170d	8d 39 17	                sta     calcbuff+1
.1710	ad 16 1a	                lda     sprt_ptr0
.1713	8d 38 17	                sta     calcbuff
.1716	e0 00		                cpx     #0
.1718	f0 11		                beq     addrok
.171a	ad 38 17	                lda     calcbuff
.171d	18		nextx           clc
.171e	69 42		                adc     #66
.1720	90 03		                bcc     nocarry
.1722	ee 39 17	                inc     calcbuff+1
.1725	8d 38 17	nocarry         sta     calcbuff
.1728	ca		                dex
.1729	d0 f2		                bne     nextx
.172b	ac 39 17	addrok          ldy     calcbuff+1
.172e	ae 38 17	                ldx     calcbuff
.1731	20 54 17	                jsr     sprt_setimage
.1734	20 8d 0a	                jsr     pop
.1737	60		                rts
>1738	00 00		calcbuff        .word   $0
.173a			sprt_loadptr
.173a	20 4e 0a	                jsr     push
.173d	ad 58 16	                lda     sprt_ptr
.1740	18		                clc
.1741	2a		                rol
.1742	a8		                tay
.1743	b9 16 1a	                lda     sprt_ptr0,y
.1746	aa		                tax
.1747	b9 17 1a	                lda     sprt_ptr0+1,y
.174a	a8		                tay
.174b	20 54 17	                jsr     sprt_setimage
.174e	20 8d 0a	                jsr     pop
.1751	60		                rts
>1752	00 00		calcbuff        .word   $0
.1754			sprt_setimage
.1754	20 4e 0a	                jsr     push
.1757	20 83 0b	                jsr     savezp1
.175a	20 a1 0b	                jsr     savezp2
.175d	84 fc		                sty     zpage1+1
.175f	86 fb		                stx     zpage1
.1761	a0 17		                ldy     #>sprt_image
.1763	84 fe		                sty     zpage2+1
.1765	a0 82		                ldy     #<sprt_image
.1767	84 fd		                sty     zpage2
.1769	a0 42		                ldy     #66
.176b	b1 fb		nextbyte        lda     (zpage1),y
.176d	91 fd		                sta     (zpage2),y
.176f	88		                dey
.1770	d0 f9		                bne     nextbyte
.1772	20 b0 0b	                jsr     restzp2
.1775	20 92 0b	                jsr     restzp1
.1778	20 8d 0a	                jsr     pop
.177b	60		                rts
>177c	00		sprt_xoffset    .byte   $00
>177d	00		sprt_yoffset    .byte   $00
>177e	00 00		sprt_x          .word   $0000
>1780	00 00		sprt_y          .word   $0000
>1782			sprt_image      .fill 66
>17c4	00 00 00 00	sprt_crxair     .byte $00, $00, $00, $00, $00, $00 ; 6
>17c8	00 00
>17ca	00 66 00 00	                .byte $00, $66, $00, $00, $3c, $00 ; 12
>17ce	3c 00
>17d0	00 18 00 00	                .byte $00, $18, $00, $00, $00, $00 ; 18
>17d4	00 00
>17d6	00 00 00 00	                .byte $00, $00, $00, $00, $18, $00 ; 24
>17da	18 00
>17dc	80 00 01 c0	                .byte $80, $00, $01, $c0, $18, $03 ; 30
>17e0	18 03
>17e2	66 66 66 c0	                .byte $66, $66, $66, $c0, $18, $03 ; 36
>17e6	18 03
>17e8	80 00 01 00	                .byte $80, $00, $01, $00, $18, $00 ; 42
>17ec	18 00
>17ee	00 00 00 00	                .byte $00, $00, $00, $00, $00, $00 ; 48
>17f2	00 00
>17f4	00 18 00 00	                .byte $00, $18, $00, $00, $3c, $00 ; 54
>17f8	3c 00
>17fa	00 66 00 00	                .byte $00, $66, $00, $00, $00, $00 ; 60
>17fe	00 00
>1800	00 00 00 01	                .byte $00, $00, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>1804	0c 28
>1806	80 00 00 e0	sprt_mouse      .byte $80, $00, $00, $e0, $00, $00 ; 6
>180a	00 00
>180c	b8 00 00 ce	                .byte $b8, $00, $00, $ce, $00, $00 ; 12
>1810	00 00
>1812	83 80 00 c0	                .byte $83, $80, $00, $c0, $e0, $00 ; 18
>1816	e0 00
>1818	80 18 00 c0	                .byte $80, $18, $00, $c0, $3c, $00 ; 24
>181c	3c 00
>181e	80 e0 00 c0	                .byte $80, $e0, $00, $c0, $60, $00 ; 30
>1822	60 00
>1824	98 30 00 fc	                .byte $98, $30, $00, $fc, $18, $00 ; 36
>1828	18 00
>182a	c6 0c 00 03	                .byte $c6, $0c, $00, $03, $06, $00 ; 42
>182e	06 00
>1830	01 9c 00 00	                .byte $01, $9c, $00, $00, $f0, $00 ; 48
>1834	f0 00
>1836	00 40 00 00	                .byte $00, $40, $00, $00, $00, $00 ; 54
>183a	00 00
>183c	00 00 00 00	                .byte $00, $00, $00, $00, $00, $00 ; 60
>1840	00 00
>1842	00 00 00 01	                .byte $00, $00, $00, $01, $18, $31 ; 66, X,X,X color, xoffset, yoffset
>1846	18 31
>1848	00 7c 00 01	sprt_pointer    .byte $00, $7c, $00, $01, $83, $00 ; 6
>184c	83 00
>184e	06 10 c0 08	                .byte $06, $10, $c0, $08, $00, $30 ; 12
>1852	00 30
>1854	12 10 88 20	                .byte $12, $10, $88, $20, $00, $08 ; 18
>1858	00 08
>185a	40 ba 04 40	                .byte $40, $ba, $04, $40, $6c, $04 ; 24
>185e	6c 04
>1860	80 c6 02 aa	                .byte $80, $c6, $02, $aa, $82, $aa ; 30
>1864	82 aa
>1866	80 c6 02 40	                .byte $80, $c6, $02, $40, $6c, $04 ; 36
>186a	6c 04
>186c	40 ba 04 20	                .byte $40, $ba, $04, $20, $00, $08 ; 42
>1870	00 08
>1872	12 10 90 08	                .byte $12, $10, $90, $08, $00, $20 ; 48
>1876	00 20
>1878	06 10 c0 01	                .byte $06, $10, $c0, $01, $83, $00 ; 54
>187c	83 00
>187e	00 7c 00 00	                .byte $00, $7c, $00, $00, $00, $00 ; 60
>1882	00 00
>1884	00 00 00 01	                .byte $00, $00, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>1888	0c 28
>188a	55 55 55 aa	sprt_pointer2   .byte $55, $55, $55, $aa, $aa, $aa ; 6
>188e	aa aa
>1890	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 12
>1894	aa aa
>1896	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 18
>189a	aa aa
>189c	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 24
>18a0	00 2a
>18a2	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 30
>18a6	00 2a
>18a8	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 36
>18ac	00 2a
>18ae	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 42
>18b2	00 2a
>18b4	54 00 55 aa	                .byte $54, $00, $55, $aa, $aa, $aa ; 48
>18b8	aa aa
>18ba	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 54
>18be	aa aa
>18c0	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 60
>18c4	aa aa
>18c6	55 55 55 01	                .byte $55, $55, $55, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>18ca	0c 28
>18cc	06 00 00 0f	sprt_hand       .byte $06, $00, $00, $0f, $00, $00 ; 6
>18d0	00 00
>18d2	19 80 00 10	                .byte $19, $80, $00, $10, $80, $00 ; 12
>18d6	80 00
>18d8	19 80 00 16	                .byte $19, $80, $00, $16, $b1, $8c ; 18
>18dc	b1 8c
>18de	10 ca 52 10	                .byte $10, $ca, $52, $10, $84, $21 ; 24
>18e2	84 21
>18e4	10 84 21 30	                .byte $10, $84, $21, $30, $84, $21 ; 30
>18e8	84 21
>18ea	50 84 21 90	                .byte $50, $84, $21, $90, $84, $21 ; 36
>18ee	84 21
>18f0	90 00 01 90	                .byte $90, $00, $01, $90, $00, $01 ; 42
>18f4	00 01
>18f6	90 7f c1 90	                .byte $90, $7f, $c1, $90, $00, $01 ; 48
>18fa	00 01
>18fc	40 ff e2 40	                .byte $40, $ff, $e2, $40, $00, $02 ; 54
>1900	00 02
>1902	3c 00 04 02	                .byte $3c, $00, $04, $02, $00, $08 ; 60
>1906	00 08
>1908	03 ff f8 01	                .byte $03, $ff, $f8, $01, $12, $31 ; 66, X,X,X color, xoffset, yoffset
>190c	12 31
>190e	00 3e 00 01	sprt_ultraman   .byte $00, $3e, $00, $01, $c1, $c0 ; 6
>1912	c1 c0
>1914	0e 3e 30 08	                .byte $0e, $3e, $30, $08, $41, $08 ; 12
>1918	41 08
>191a	10 1c 04 10	                .byte $10, $1c, $04, $10, $22, $04 ; 18
>191e	22 04
>1920	24 1c 12 23	                .byte $24, $1c, $12, $23, $00, $62 ; 24
>1924	00 62
>1926	20 08 02 47	                .byte $20, $08, $02, $47, $c1, $f1 ; 30
>192a	c1 f1
>192c	6a aa ab 47	                .byte $6a, $aa, $ab, $47, $c9, $f1 ; 36
>1930	c9 f1
>1932	20 08 02 20	                .byte $20, $08, $02, $20, $14, $02 ; 42
>1936	14 02
>1938	20 00 02 10	                .byte $20, $00, $02, $10, $00, $04 ; 48
>193c	00 04
>193e	10 7f 04 08	                .byte $10, $7f, $04, $08, $00, $08 ; 54
>1942	00 08
>1944	06 3e 30 01	                .byte $06, $3e, $30, $01, $c1, $c0 ; 60
>1948	c1 c0
>194a	00 3e 00 01	                .byte $00, $3e, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>194e	0c 28
>1950	00 1c 00 00	sprt_male       .byte $00, $1c, $00, $00, $3e, $00 ; 6
>1954	3e 00
>1956	00 3e 00 00	                .byte $00, $3e, $00, $00, $3e, $00 ; 12
>195a	3e 00
>195c	00 1c 00 00	                .byte $00, $1c, $00, $00, $08, $00 ; 18
>1960	08 00
>1962	00 ff 80 00	                .byte $00, $ff, $80, $00, $ff, $80 ; 24
>1966	ff 80
>1968	00 be 80 00	                .byte $00, $be, $80, $00, $9c, $80 ; 30
>196c	9c 80
>196e	00 88 80 00	                .byte $00, $88, $80, $00, $be, $80 ; 36
>1972	be 80
>1974	00 be 80 01	                .byte $00, $be, $80, $01, $9c, $c0 ; 42
>1978	9c c0
>197a	01 94 c0 00	                .byte $01, $94, $c0, $00, $14, $00 ; 48
>197e	14 00
>1980	00 14 00 00	                .byte $00, $14, $00, $00, $14, $00 ; 54
>1984	14 00
>1986	00 36 00 00	                .byte $00, $36, $00, $00, $77, $00 ; 60
>198a	77 00
>198c	00 77 00 01	                .byte $00, $77 ,$00, $01, $0c, $2f ; 66, X,X,X color, xoffset, yoffset
>1990	0c 2f
>1992	00 3c 00 00	sprt_robot      .byte $00, $3c, $00, $00, $24, $00 ; 6
>1996	24 00
>1998	00 66 18 00	                .byte $00, $66, $18, $00, $66, $38 ; 12
>199c	66 38
>199e	00 24 38 00	                .byte $00, $24, $38, $00, $3c, $10 ; 18
>19a2	3c 10
>19a4	00 18 10 00	                .byte $00, $18, $10, $00, $18, $10 ; 24
>19a8	18 10
>19aa	0f ff f0 08	                .byte $0f, $ff, $f0, $08, $7e, $00 ; 30
>19ae	7e 00
>19b0	08 7e 00 08	                .byte $08, $7e, $00, $08, $18, $00 ; 36
>19b4	18 00
>19b6	1c 18 00 1c	                .byte $1c, $18, $00, $1c, $18, $00 ; 42
>19ba	18 00
>19bc	18 3c 00 00	                .byte $18, $3c, $00, $00, $3c, $00 ; 48
>19c0	3c 00
>19c2	00 24 00 00	                .byte $00, $24, $00, $00, $24, $00 ; 54
>19c6	24 00
>19c8	00 24 00 03	                .byte $00, $24, $00, $03, $e7, $c0 ; 60
>19cc	e7 c0
>19ce	03 e7 c0 01	                .byte $03, $e7, $c0, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>19d2	0c 28
>19d4	00 1c 00 00	sprt_femme      .byte $00, $1c, $00, $00, $3e, $00 ; 6
>19d8	3e 00
>19da	00 3e 00 00	                .byte $00, $3e, $00, $00, $3e, $00 ; 12
>19de	3e 00
>19e0	00 1c 00 00	                .byte $00, $1c, $00, $00, $08, $00 ; 18
>19e4	08 00
>19e6	00 7f 00 00	                .byte $00, $7f, $00, $00, $ff, $80 ; 24
>19ea	ff 80
>19ec	00 be 80 00	                .byte $00, $be, $80, $00, $9c, $80 ; 30
>19f0	9c 80
>19f2	00 88 80 00	                .byte $00, $88, $80, $00, $9c, $80 ; 36
>19f6	9c 80
>19f8	00 be 80 01	                .byte $00, $be, $80, $01, $be, $c0 ; 42
>19fc	be c0
>19fe	01 be c0 00	                .byte $01, $be, $c0, $00, $7f, $00 ; 48
>1a02	7f 00
>1a04	00 7f 00 00	                .byte $00, $7f, $00, $00, $ff, $80 ; 54
>1a08	ff 80
>1a0a	00 36 00 00	                .byte $00, $36, $00, $00, $77, $00 ; 60
>1a0e	77 00
>1a10	00 55 00 01	                .byte $00, $55 ,$00, $01, $0c, $2f ; 66, X,X,X color, xoffset, yoffset
>1a14	0c 2f
>1a16	82 17		sprt_ptr0       .word  sprt_image + (0*66)
>1a18	c4 17		sprt_ptr1       .word  sprt_image + (1*66)
>1a1a	06 18		sprt_ptr2       .word  sprt_image + (2*66)
>1a1c	48 18		sprt_ptr3       .word  sprt_image + (3*66)
>1a1e	8a 18		sprt_ptr4       .word  sprt_image + (4*66)
>1a20	cc 18		sprt_ptr5       .word  sprt_image + (5*66)
>1a22	0e 19		sprt_ptr6       .word  sprt_image + (6*66)
>1a24	50 19		sprt_ptr7       .word  sprt_image + (7*66)
>1a26	92 19		sprt_ptr8       .word  sprt_image + (8*66)
>1a28	d4 19		sprt_ptr9       .word  sprt_image + (9*66)
>1a2a	ff		testbyte        .byte 255
=$07			sprt_txtcol     =       vjaune
=$00			sprt_txtbak     =       bkcol0
=$01			sprt_color      =       vwhite
>1a2b	07 00 04 0e	sprite_pos      .byte   sprt_txtcol,sprt_txtbak,4,14
>1a2f	53 10 12 09	                .text       "Sprite pos. (x,y):($0000,$0000)"
>1a33	14 05 20 10 0f 13 2e 20 28 18 2c 19 29 3a 28 24
>1a43	30 30 30 30 2c 24 30 30 30 30 29
>1a4e	00		                .byte   0

;******  Return to file: main.asm


;******  End of listing

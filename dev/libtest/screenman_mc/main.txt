
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L main.txt -o main.prg main.asm
; Mon Mar 27 00:01:24 2023

;Offset	;Hex		;Source

;******  Processing input file: main.asm

="20230326-115700"	                VERSION="20230326-115700"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: main.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: main.asm

.080d			main
.080d	20 13 0d	                jsr scrmaninit
.0810	20 81 11	                jsr js_init
.0813	a9 80		                lda #$80
.0815	8d ff 0c	                sta curcol
.0818	a9 00		                lda #0
.081a	8d 21 d0	                sta vicbackcol
.081d	a9 06		                lda #vbleu
.081f	8d 20 d0	                sta vicbordcol
.0822	20 a3 0d	                jsr cls
.0825	a9 20		                lda #$20
.0827	09 00		                ora #%00000000
.0829	a0 04		                ldy #$04
.082b	a2 04		                ldx #$04
.082d	20 d9 0a	                jsr memfill
.0830	a9 00		                lda #$00
.0832	a0 d8		                ldy #$d8
.0834	20 d9 0a	                jsr memfill
.0837	20 ff 15	                jsr sprt_init
.083a	20 00 0e	goagain         jsr setinverse
.083d	a2 0c		                ldx #<bstring1
.083f	a0 09		                ldy #>bstring1
.0841	20 a3 0e	                jsr putscxy
.0844	a2 38		                ldx #<bstring2
.0846	a0 09		                ldy #>bstring2
.0848	20 a3 0e	                jsr putscxy
.084b	a2 65		                ldx #<bstring3
.084d	a0 09		                ldy #>bstring3
.084f	20 a3 0e	                jsr putscxy
.0852	a2 91		                ldx #<bstring4
.0854	a0 09		                ldy #>bstring4
.0856	20 a3 0e	                jsr putscxy
.0859	20 0a 0e	                jsr clrinverse
.085c	a2 a8		                ldx #<js_status1
.085e	a0 09		                ldy #>js_status1
.0860	20 a3 0e	                jsr putscxy
.0863	a2 c0		                ldx #<js_status2
.0865	a0 09		                ldy #>js_status2
.0867	20 a3 0e	                jsr putscxy
.086a	a2 d7		                ldx #<js_status3
.086c	a0 09		                ldy #>js_status3
.086e	20 a3 0e	                jsr putscxy
.0871	a2 f0		                ldx #<js_status4
.0873	a0 09		                ldy #>js_status4
.0875	20 a3 0e	                jsr putscxy
.0878	a2 09		                ldx #<js_status5
.087a	a0 0a		                ldy #>js_status5
.087c	20 a3 0e	                jsr putscxy
.087f	a2 1f		                ldx #<js_status6
.0881	a0 0a		                ldy #>js_status6
.0883	20 a3 0e	                jsr putscxy
.0886	a2 00		                ldx #$00
.0888	a0 0f		                ldy #$0f
.088a	20 66 0e	                jsr gotoxy
.088d	a9 07		                lda #vjaune
.088f	20 d2 0e	                jsr setcurcol
.0892	a2 00		                ldx #$00
.0894	20 e7 0e	                jsr setbkcol
.0897			looper
.0897	20 98 11	                jsr js_scan
.089a	20 aa 13	                jsr js_showvals
.089d	20 8b 16	                jsr sprt_move
.08a0			loopit
.08a0	a2 16		                ldx #$16
.08a2	a0 11		                ldy #$11
.08a4	20 66 0e	                jsr gotoxy
.08a7	a9 03		                lda #3
.08a9	20 d2 0e	                jsr setcurcol
.08ac	ee 0b 09	                inc onebyte
.08af	ad 0b 09	                lda onebyte
.08b2	ad 72 15	                lda js_2fire
.08b5	20 e0 0c	                jsr putabinfmt
.08b8	48		                pha
.08b9	ad 72 15	                lda js_2fire
.08bc	f0 42		                beq nochange
.08be	ad 20 d0	                lda vicbordcol
.08c1	18		                clc
.08c2	69 00		                adc #$0
.08c4	29 0f		                and #$0f
.08c6	8d 20 d0	                sta vicbordcol
.08c9	ad 71 15	                lda js_2y
.08cc	c9 04		                cmp #$04
.08ce	d0 20		                bne toborder
.08d0	ad 70 15	                lda js_2x
.08d3	c9 0b		                cmp #$0b
.08d5	30 19		                bmi toborder
.08d7	c9 1d		                cmp #$1d
.08d9	10 15		                bpl toborder
.08db	ee 54 16	                inc sprt_ptr
.08de	ad 54 16	                lda sprt_ptr
.08e1	20 c3 0f	                jsr showregs
.08e4	c9 09		                cmp #9
.08e6	90 02		                bcc drawsptr
.08e8	a9 00		                lda #$00
.08ea	8d 54 16	drawsptr        sta sprt_ptr
.08ed	20 ff 15	                jsr sprt_init
.08f0	ad 20 d0	toborder        lda vicbordcol
.08f3	38		                sec
.08f4	69 00		                adc #0
.08f6	29 0f		                and #$0f
.08f8	8d 29 d0	                sta $d029
.08fb	a9 00		                lda #$00
.08fd	8d 72 15	                sta js_2fire
.0900			nochange
.0900	e8		                inx
.0901	68		                pla
.0902	20 e1 ff	                jsr kstop
.0905	d0 90		                bne looper
.0907	20 66 fe	                jsr k_warmboot
.090a	60		out             rts
>090b	00		onebyte         .byte   0
>090c	01 00 00 00	bstring1        .byte   vblanc,bkcol0,0,0
>0910	20 20 20 20	                .text   "      Visualisation du port jeu #2     "
>0914	20 20 56 09 13 15 01 0c 09 13 01 14 09 0f 0e 20
>0924	04 15 20 10 0f 12 14 20 0a 05 15 20 23 32 20 20
>0934	20 20 20
>0937	00		                .byte   0
>0938	0a 40 00 01	bstring2        .byte   vrose,bkcol1,0,1
>093c	20 50 12 0f	                .text   " Programme assembleur pour 6502 sur C64 "
>0940	07 12 01 0d 0d 05 20 01 13 13 05 0d 02 0c 05 15
>0950	12 20 10 0f 15 12 20 36 35 30 32 20 13 15 12 20
>0960	43 36 34 20
>0964	00		                .byte   0
>0965	0d 80 00 02	bstring3        .byte   vvert1,bkcol2,0,2
>0969	20 20 20 20	                .text   "      par Daniel Lafrance (c)2021)     "
>096d	20 20 10 01 12 20 44 01 0e 09 05 0c 20 4c 01 06
>097d	12 01 0e 03 05 20 28 03 29 32 30 32 31 29 20 20
>098d	20 20 20
>0990	00		                .byte   0
>0991	07 c0 0b 04	bstring4        .byte   vjaune,bkcol3,11,4
>0995	20 43 08 01	                .text   " Changer pointeur "
>0999	0e 07 05 12 20 10 0f 09 0e 14 05 15 12 20
>09a7	00		                .byte   0
>09a8	0d 00 13 16	js_status1      .byte   vvert1,bkcol0,19,22
>09ac	20 20 20 15	                .text   "   up <----1> haut "
>09b0	10 20 3c 2d 2d 2d 2d 31 3e 20 08 01 15 14 20
>09bf	00		                .byte   0
>09c0	0e 00 13 15	js_status2      .byte   vbleu1,bkcol0,19,21
>09c4	20 04 0f 17	                .text   " down <---2-> bas "
>09c8	0e 20 3c 2d 2d 2d 32 2d 3e 20 02 01 13 20
>09d6	00		                .byte   0
>09d7	0a 00 13 14	js_status3      .byte   vrose,bkcol0,19,20
>09db	20 0c 05 06	                .text   " left <--4--> gauche"
>09df	14 20 3c 2d 2d 34 2d 2d 3e 20 07 01 15 03 08 05
>09ef	00		                .byte   0
>09f0	07 00 13 13	js_status4      .byte   vjaune,bkcol0,19,19
>09f4	12 09 07 08	                .text   "right <-8---> droite"
>09f8	14 20 3c 2d 38 2d 2d 2d 3e 20 04 12 0f 09 14 05
>0a08	00		                .byte   0
>0a09	01 00 13 12	js_status5      .byte   vblanc,bkcol0,19,18
>0a0d	20 46 09 12	                .text   " Fire <1----> Feu"
>0a11	05 20 3c 31 2d 2d 2d 2d 3e 20 46 05 15
>0a1e	00		                .byte   0
>0a1f	03 00 01 17	js_status6      .byte   vcyan,bkcol0,1,23
>0a23	2b 2d 3e 20	                .text   "+-> Etat de JS2:     %---FRLDU EOR #$1F"
>0a27	45 14 01 14 20 04 05 20 4a 53 32 3a 20 20 20 20
>0a37	20 25 2d 2d 2d 46 52 4c 44 55 20 45 4f 52 20 23
>0a47	24 31 46
>0a4a	00		                .byte   0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$90			kiostatus       =       $90       ; Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7       ; Current filename length (byte)
=$b9			cursecadd       =       $b9       ; Current secondary address (byte)
=$ba			curdevno        =       $ba       ; Current device number (byte)
=$bb			curfptr         =       $bb       ; Current file pointer (word)
=$fb			zpage1          =       $fb       ; zero page 1 address (word)
=$fd			zpage2          =       $fd       ; zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$0286			bascol          =       $0286     ;basic next chr colscreenram (byte)
=$0400			scrnram         =       $0400     ;video character ram
=$0400			scrram0         =       $0400
=$0500			scrram1         =       $0500
=$0600			scrram2         =       $0600
=$0700			scrram3         =       $0700
=$0801			basicsta        =       $0801     ;basic start address
=$a000			basicrom        =       $a000
=$d400			sid             =       $d400     ;sid base address
=$d800			colorram        =       $d800     ;video color ram
=$d800			colram0         =       $d800
=$d900			colram1         =       $d900
=$da00			colram2         =       $da00
=$db00			colram3         =       $db00
=$dc00			cia1            =       $dc00     ;cia1  base address
=$dd00			cia2            =       $dd00     ;cia2 base address
=$e000			kernalrom       =       $e000
=43			txttab          =       43
=$14			linnum          =       $14
=$c6			ndx             =       $c6     ;Number of character in keyboard buffer
=$033c			tpbuff          =       $033c   ;$033c-$03fb (828-1019)
=$277			kbbuff          =       $277
=$28d			shflag          =       $28d    ;653
=828			tbuffer         =       828
=806			ibsout          =       806
=$ea31			irq             =       $ea31
=$314			cinv            =       $314        ; brk instruction interupt
=$c5			lstx            =       $c5         ;matrix coordinate of last key pressed
=$03			bstop           =       $03      ;stop
=$05			bwhite          =       $05      ;set color white
=$08			block           =       $08      ;lock the charset
=$09			bunlock         =       $09      ;unlock the charset
=$0d			bcarret         =       $0d
=$0e			btext           =       $0e
=$11			bcrsdn          =       $11      ;cursor down 1 line
=$12			brevcol         =       $12
=$13			bhome           =       $13
=$14			bdelete         =       $14
=$1c			bred            =       $1c
=$1d			bcuright        =       $1d
=$1e			bgreen          =       $1e
=$1f			bblue           =       $1f
=$81			borange         =       $81
=$83			blrun           =       $83
=$85			bfkey1          =       $85
=$86			bfkey2          =       $86
=$87			bfkey3          =       $87
=$88			bfkey4          =       $88
=$89			bfkey5          =       $89
=$8a			bfkey6          =       $8a
=$8b			bfkey7          =       $8b
=$8c			bfkey8          =       $8c
=$8d			bcarret1        =       $8d
=$8e			bgraph          =       $8e
=$90			bblack          =       $90
=$91			bcuup           =       $91
=$92			brevoff         =       $92
=$93			bclear          =       $93
=$94			binsert         =       $94
=$95			bbrown          =       $95
=$96			bltred          =       $96
=$97			bdkgrey         =       $97
=$98			bmdgrey         =       $98
=$99			bltgreen        =       $99
=$9a			bltblue         =       $9a
=$9b			bltgrey         =       $9b
=$9c			bmagenta        =       $9c
=$9d			bculeft         =       $9d
=$9e			byellow         =       $9e
=$9f			bcyan           =       $9f
=$0286			carcol          =       $0286
=$030a			ieval           =       $030a
=$73			chrget          =       $73
=$79			chrgot          =       $79
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.0a4b			libtart

;******  Return to file: main.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col= vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: main.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.0a4b			push
.0a4b	08		          php            ; stack : flg, pcl, pch
.0a4c	78		          sei
.0a4d	8d 87 0a	          sta  ra        ; save a
.0a50	68		          pla            ; stack : pcl, pch
.0a51	8d 86 0a	          sta  rp        ; save rp
.0a54	68		          pla            ; stack : pch
.0a55	8d 88 0a	          sta  pc        ; save pcl
.0a58	68		          pla            ; stack : -
.0a59	8d 89 0a	          sta  pc+1      ; save pch
.0a5c	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0a5e	48		          pha            ; stack : zp1l
.0a5f	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0a61	48		          pha            ; stack : zp1h, zp1l
.0a62	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0a64	48		          pha            ; stack : zp2l, zp1h, zp1l
.0a65	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0a67	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0a68	ad 86 0a	          lda  rp        ; get rp
.0a6b	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0a6c	ad 87 0a	          lda  ra        ; get a
.0a6f	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0a70	8a		          txa            ; get x
.0a71	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a72	98		          tya            ; get y
.0a73	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a74	ad 89 0a	          lda  pc+1      ; get pch
.0a77	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a78	ad 88 0a	          lda  pc        ; get pcl
.0a7b	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a7c	ad 86 0a	          lda  rp        ; get rp
.0a7f	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a80	ad 87 0a	          lda  ra        ; get a
.0a83	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a84	58		          cli
.0a85	60		          rts
>0a86	00		rp        .byte     0
>0a87	00		ra        .byte     0
>0a88	00 00		pc        .word     0
.0a8a			pull
.0a8a			pop
.0a8a	78		          sei
.0a8b	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a8c	8d bf 0a	          sta  pc        ; save pcl
.0a8f	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a90	8d c0 0a	          sta  pc+1      ; save pch
.0a93	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a94	a8		          tay            ; set y
.0a95	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0a96	aa		          tax            ; set x
.0a97	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0a98	8d be 0a	          sta  ra        ; save a
.0a9b	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0a9c	8d bd 0a	          sta  rp        ; save rp
.0a9f	68		          pla            ; stack : zp2l, zp1h, zp1l
.0aa0	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0aa2	68		          pla            ; stack : zp1h, zp1l
.0aa3	85 fd		          sta  zpage2    ; get zpage2 High byte
.0aa5	68		          pla            ; stack : zp1l
.0aa6	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0aa8	68		          pla            ; stack :
.0aa9	85 fb		          sta  zpage1    ; get zpage1 High byte
.0aab	ad c0 0a	          lda  pc+1      ; get pch
.0aae	48		          pha            ; stack : pch
.0aaf	ad bf 0a	          lda  pc
.0ab2	48		          pha            ; stack : pcl, pch
.0ab3	ad bd 0a	          lda  rp        ; get rp
.0ab6	48		          pha            ; stack : rp, pcl, pch
.0ab7	ad be 0a	          lda  ra        ; set ra
.0aba	58		          cli
.0abb	28		          plp            ; stack : pcl, pch
.0abc	60		          rts
>0abd	00		rp        .byte     0
>0abe	00		ra        .byte     0
>0abf	00 00		pc        .word     0

;******  Return to file: main.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.0ac1			blkfill
.0ac1	20 4b 0a	bf0            jsr  push
.0ac4	20 7f 0b	               jsr  savezp1
.0ac7	84 fc		               sty  zpage1+1
.0ac9	a0 00		               ldy  #$00
.0acb	84 fb		               sty  zpage1
.0acd	91 fb		bf1            sta  (zpage1),y
.0acf	c8		               iny
.0ad0	d0 fb		               bne  bf1
.0ad2	20 8e 0b	               jsr  restzp1
.0ad5	20 8a 0a	               jsr  pop
.0ad8	60		               rts
.0ad9			memfill
.0ad9	20 4b 0a	               jsr  push
.0adc	20 c1 0a	mf1            jsr  blkfill
.0adf	c8		               iny
.0ae0	ca		               dex
.0ae1	d0 f9		               bne  mf1
.0ae3	20 8a 0a	               jsr  pop
.0ae6	60		               rts
.0ae7			memmove
.0ae7	20 4b 0a	               jsr  push
.0aea	ba		               tsx            ; On se crée un pointeur ...
.0aeb	8a		               txa
.0aec	18		               clc
.0aed	69 0b		               adc  #11
.0aef	a8		               tay
.0af0	a2 06		               ldx  #$06
.0af2	b9 00 01	nextbyte       lda  $0100,y
.0af5	99 41 0b	               sta  words,y
.0af8	c8		               iny
.0af9	ca		               dex
.0afa	d0 f6		               bne  nextbyte
.0afc	ad 41 0b	               lda  s
.0aff	8d 18 0b	               sta  source+1
.0b02	ad 42 0b	               lda  s+1
.0b05	8d 19 0b	               sta  source+2
.0b08	ad 43 0b	               lda  d
.0b0b	8d 15 0b	               sta  destin+1
.0b0e	ad 44 0b	               lda  d+1
.0b11	8d 16 0b	               sta  destin+2
.0b14	ad ff ff	destin         lda  $ffff
.0b17	8d ff ff	source         sta  $ffff
.0b1a	ee 15 0b	               inc  destin+1
.0b1d	d0 03		               bne  src
.0b1f	ee 16 0b	               inc  destin+2
.0b22	ee 18 0b	src            inc  source+1
.0b25	d0 03		               bne  cnt
.0b27	ee 19 0b	               inc  source+2
.0b2a	ad 45 0b	cnt            lda  compte
.0b2d	d0 08		               bne  decit
.0b2f	ad 46 0b	               lda  compte+1
.0b32	f0 09		               beq  fini
.0b34	ce 46 0b	               dec  compte+1
.0b37	ce 45 0b	decit          dec  compte
.0b3a	4c 14 0b	               jmp  destin
.0b3d	20 8a 0a	fini           jsr  pop
.0b40	60		               rts
.0b41			words
>0b41	00 00		s         .word     $0000
>0b43	00 00		d         .word     $0000
>0b45	00 00		compte    .word     $0000
.0b47			decword
.0b47	20 4b 0a	               jsr  push
.0b4a	86 fd		               stx  zpage2
.0b4c	84 fe		               sty  zpage2+1
.0b4e	20 8a 0a	               jsr  pop
.0b51	60		               rts
.0b52			inczp1
.0b52	08		               php
.0b53	e6 fb		               inc  zpage1
.0b55	d0 02		               bne  nopage
.0b57	e6 fc		               inc  zpage1+1
.0b59	28		nopage         plp
.0b5a	60		               rts
.0b5b			deczp1
.0b5b	08		                php
.0b5c	48		                pha
.0b5d	c6 fb		                dec  zpage1
.0b5f	d0 02		                bne  nopage
.0b61	c6 fc		                dec  zpage1+1
.0b63	c6 fb		nopage          dec  zpage1
.0b65	68		                pla
.0b66	28		                plp
.0b67	60		                rts
.0b68			inczp2
.0b68	08		               php
.0b69	48		               pha
.0b6a	e6 fd		               inc  zpage2
.0b6c	d0 02		               bne  nopage
.0b6e	e6 fe		               inc  zpage2+1
.0b70	68		nopage         pla
.0b71	28		               plp
.0b72	60		               rts
.0b73			deczp2
.0b73	08		               php
.0b74	48		               pha
.0b75	a5 fd		               lda  zpage2
.0b77	d0 02		               bne  nopage
.0b79	c6 fe		               dec  zpage2+1
.0b7b	c6 fd		nopage         dec  zpage2
.0b7d	28		               plp
.0b7e	60		               rts
.0b7f			savezp1
.0b7f	08		               php
.0b80	48		               pha
.0b81	a5 fb		               lda  zpage1
.0b83	8d fb 0b	               sta  zp1
.0b86	a5 fc		               lda  zpage1+1
.0b88	8d fc 0b	               sta  zp1+1
.0b8b	68		               pla
.0b8c	28		               plp
.0b8d	60		               rts
.0b8e			restzp1
.0b8e	08		               php
.0b8f	48		               pha
.0b90	ad fb 0b	               lda zp1
.0b93	85 fb		               sta zpage1
.0b95	ad fc 0b	               lda zp1+1
.0b98	85 fc		               sta zpage1+1
.0b9a	68		               pla
.0b9b	28		               plp
.0b9c	60		               rts
.0b9d			savezp2
.0b9d	08		         php
.0b9e	48		         pha
.0b9f	a5 fd		         lda zpage2
.0ba1	8d fd 0b	         sta zp2
.0ba4	a5 fe		         lda zpage2+1
.0ba6	8d fe 0b	         sta zp2+1
.0ba9	68		         pla
.0baa	28		         plp
.0bab	60		         rts
.0bac			restzp2
.0bac	08		                php
.0bad	48		                pha
.0bae	ad fd 0b	                lda  zp2
.0bb1	85 fd		                sta  zpage2
.0bb3	ad fe 0b	                lda  zp2+1
.0bb6	85 fe		                sta  zpage2+1
.0bb8	68		                pla
.0bb9	28		                plp
.0bba	60		                rts
.0bbb			xy2addr
.0bbb	08		                php
.0bbc	48		                pha
.0bbd	8a		                txa
.0bbe	48		                pha
.0bbf	98		                tya
.0bc0	48		                pha
.0bc1	ad f6 0b	                lda     addr1+1
.0bc4	8d f8 0b	                sta     addr2+1
.0bc7	ad f5 0b	                lda     addr1
.0bca	8d f7 0b	                sta     addr2
.0bcd	c0 00		                cpy     #$00
.0bcf	f0 0f		                beq     addx
.0bd1	18		moreline        clc
.0bd2	6d f4 0b	                adc     ymult
.0bd5	90 03		                bcc     norepy
.0bd7	ee f8 0b	                inc     addr2+1
.0bda	8d f7 0b	norepy          sta     addr2
.0bdd	88		                dey
.0bde	d0 f1		                bne     moreline
.0be0	8a		addx            txa
.0be1	18		                clc
.0be2	6d f7 0b	                adc     addr2
.0be5	90 03		                bcc     thatsit
.0be7	ee f8 0b	                inc     addr2+1
.0bea	8d f7 0b	thatsit         sta     addr2
.0bed	68		                pla
.0bee	a8		                tay
.0bef	68		                pla
.0bf0	aa		                tax
.0bf1	68		                pla
.0bf2	28		                plp
.0bf3	60		                rts
>0bf4	28		ymult          .byte     40
>0bf5	00 00		addr1          .word     $0000
>0bf7	00 00		addr2          .word     $0000
>0bf9	00 00		bytecnt        .word     $0000
>0bfb	00 00		zp1        .word   $0000
>0bfd	00 00		zp2        .word   $0000

;******  Return to file: main.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>0bff	01		a2hexcol       .byte     1              ; pour aputscxy
>0c00	00		a2hexbkcol     .byte     %00000000
.0c01			a2hexpos
>0c01	00		a2hexpx        .byte     0              ; pour aputsxy
>0c02	00		a2hexpy        .byte     0
>0c03	24		a2hexprefix    .byte     "$"            ; pour aputs
>0c04	00 00		a2hexstr       .word     $00
>0c06	00 00		               .word     $00
>0c08	00		               .byte     0              ; 0 end string
.0c09			putahexfmtxy
.0c09	20 4b 0a	               jsr  push
.0c0c	20 58 0c	               jsr  a2hex
.0c0f	ae 01 0c	               ldx  a2hexpx
.0c12	ac 02 0c	               ldy  a2hexpy
.0c15	20 66 0e	               jsr  gotoxy
.0c18	a2 03		               ldx  #<a2hexprefix
.0c1a	a0 0c		               ldy  #>a2hexprefix
.0c1c	20 58 0e	               jsr  puts
.0c1f	20 8a 0a	               jsr  pop
.0c22	60		               rts
.0c23			putahexfmt
.0c23	20 4b 0a	               jsr  push
.0c26	20 58 0c	               jsr  a2hex
.0c29	a2 03		               ldx  #<a2hexprefix
.0c2b	a0 0c		               ldy  #>a2hexprefix
.0c2d	20 58 0e	               jsr  puts
.0c30	20 8a 0a	               jsr  pop
.0c33	60		               rts
.0c34			putahex
.0c34	20 4b 0a	               jsr  push
.0c37	20 58 0c	               jsr  a2hex
.0c3a	a2 04		               ldx  #<a2hexstr
.0c3c	a0 0c		               ldy  #>a2hexstr
.0c3e	20 58 0e	               jsr  puts
.0c41	20 8a 0a	               jsr  pop
.0c44	60		               rts
.0c45			nib2hex
.0c45	08		               php
.0c46	29 0f		               and  #$0f
.0c48	f8		               sed
.0c49	18		               clc
.0c4a	69 90		               adc  #$90
.0c4c	69 40		               adc  #$40
.0c4e	d8		               cld
.0c4f	28		               plp
.0c50	60		               rts
.0c51			lsra4bits
.0c51	08		               php
.0c52	4a		               lsr
.0c53	4a		               lsr
.0c54	4a		               lsr
.0c55	4a		               lsr
.0c56	28		               plp
.0c57	60		               rts
.0c58			a2hex
.0c58	08		               php
.0c59	48		               pha
.0c5a	48		               pha
.0c5b	20 51 0c	               jsr  lsra4bits
.0c5e	20 45 0c	               jsr  nib2hex
.0c61	8d 04 0c	               sta  a2hexstr
.0c64	68		               pla
.0c65	20 45 0c	               jsr  nib2hex
.0c68	8d 05 0c	               sta  a2hexstr+1
.0c6b	a9 00		               lda  #$00                ; set end of string
.0c6d	8d 06 0c	               sta  a2hexstr+2
.0c70	68		               pla
.0c71	28		               plp
.0c72	60		               rts
.0c73			xy2hex
.0c73	20 4b 0a	               jsr  push
.0c76	20 58 0c	               jsr  a2hex
.0c79	8a		               txa
.0c7a	48		               pha
.0c7b	20 51 0c	               jsr  lsra4bits
.0c7e	20 45 0c	               jsr  nib2hex
.0c81	8d 04 0c	               sta  a2hexstr
.0c84	68		               pla
.0c85	20 45 0c	               jsr  nib2hex
.0c88	8d 05 0c	               sta  a2hexstr+1
.0c8b	98		               tya
.0c8c	48		               pha
.0c8d	20 51 0c	               jsr  lsra4bits
.0c90	20 45 0c	               jsr  nib2hex
.0c93	8d 06 0c	               sta  a2hexstr+2
.0c96	68		               pla
.0c97	20 45 0c	               jsr  nib2hex
.0c9a	8d 07 0c	               sta  a2hexstr+3
.0c9d	a9 00		               lda  #$00                ; 0 ended string
.0c9f	8d 08 0c	               sta  a2hexstr+4
.0ca2	20 8a 0a	               jsr  pop
.0ca5			atobin
.0ca5	20 4b 0a	               jsr     push
.0ca8	a2 08		               ldx     #8
.0caa	a0 00		               ldy     #0
.0cac	2a		nextbit        rol
.0cad	48		               pha
.0cae	69 00		               adc     #$00
.0cb0	29 01		               and     #$01
.0cb2	20 45 0c	               jsr     nib2hex
.0cb5	99 c6 0c	               sta     abin,y
.0cb8	68		               pla
.0cb9	c8		               iny
.0cba	ca		               dex
.0cbb	d0 ef		               bne     nextbit
.0cbd	a9 00		               lda     #0
.0cbf	99 c6 0c	               sta     abin,y
.0cc2	20 8a 0a	               jsr     pull
.0cc5	60		               rts
>0cc6	30 30 30 30	abin           .null   "00000000"
>0cca	30 30 30 30 00
.0ccf			putabin
.0ccf	20 a5 0c	               jsr     atobin
.0cd2	20 4b 0a	               jsr     push
.0cd5	a2 c6		               ldx     #<abin
.0cd7	a0 0c		               ldy     #>abin
.0cd9	20 58 0e	               jsr     puts
.0cdc	20 8a 0a	               jsr     pop
.0cdf	60		               rts
.0ce0			putabinfmt
.0ce0	08		               php
.0ce1	48		               pha
.0ce2	a9 25		               lda     #"%"
.0ce4	20 14 0e	               jsr     putch
.0ce7	68		               pla
.0ce8	20 cf 0c	               jsr     putabin
.0ceb	28		               plp
.0cec	60		               rts
.0ced			putabinxy
.0ced	20 66 0e	               jsr     gotoxy
.0cf0	20 cf 0c	               jsr     putabin
.0cf3	60		               rts
.0cf4			putabinfmtxy
.0cf4	20 66 0e	               jsr     gotoxy
.0cf7	20 e0 0c	               jsr     putabinfmt
.0cfa	60		               rts

;******  Return to file: main.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-text-mc.asm

>0cfb	00 00		scrptr         .word     $00            ; ... pointe position ecran, ...
>0cfd	00 00		colptr         .word     $00            ; ... pointe position couleur, ...
>0cff	01		curcol         .byte     $01            ; ... la couleur du caractère, ...
>0d00	06		brdcol         .byte     vbleu          ; ... la couleur de la bordure et
>0d01	00		vicbkcol0      .byte     vnoir  ;$0b    ; 0,
>0d02	02		vicbkcol1      .byte     vrouge ;$0b    ; 1,
>0d03	05		vicbkcol2      .byte     vvert  ;$0b    ; 2,
>0d04	06		vicbkcol3      .byte     vbleu  ;$0b    ; et 3.
>0d05	00		inverse        .byte     $00
>0d06	00 00 00 00	scraddr        .byte     0,0,0,0,0
>0d0a	00
>0d0b	00 00 00 00	coladdr        .byte     0,0,0,0,0
>0d0f	00
>0d10	00		bkcol          .byte     %00000000      ; Pointeur de la couleur actuelle
>0d11	00 04		virtaddr       .word     $0400          ; L'adresse de l'ecran virtuel
=$00			bkcol0         =         %00000000      ;
=$40			bkcol1         =         %01000000
=$80			bkcol2         =         %10000000
=$c0			bkcol3         =         %11000000
.0d13			scrmaninit
.0d13	08		               php            ; On sauvegarde les registres
.0d14	48		               pha
.0d15	a9 15		               lda  #%00010101; Selectionne la plage memoire video
.0d17	8d 18 d0	               sta  $d018     ; et le jeu de caracteeres.
.0d1a	ad 16 d0	               lda  $d016     ; 53270 Lecture valeur actuelle pour ne
.0d1d	09 10		               ora  #%00010000; modifier que le bit 4.
.0d1f	29 ef		               and  #%11101111
.0d21	8d 16 d0	               sta  $d016 ; 53270
.0d24	ad 11 d0	               lda  $d011     ; On ne change que le bit 6 pour
.0d27	09 40		               ora  #%01000000; selectionner le md. couleur de
.0d29	8d 11 d0	               sta  $d011     ; 53270   ; fond etendu.
.0d2c	ad 01 0d	               lda  vicbkcol0
.0d2f	8d 21 d0	               sta  $d021     ; 53281
.0d32	ad 02 0d	               lda  vicbkcol1
.0d35	8d 22 d0	               sta  $d022     ; 53282
.0d38	ad 03 0d	               lda  vicbkcol2
.0d3b	8d 23 d0	               sta  $d023     ; 53283
.0d3e	ad 04 0d	               lda  vicbkcol3
.0d41	8d 24 d0	               sta  $d024     ; 54284
.0d44	a5 00		               lda  bkcol0    ; On charge et utilise la couleur de ...
.0d46	8d 10 0d	               sta  bkcol     ; ... fond par defaut des caracteres.
.0d49	20 a3 0d	               jsr  cls       ; Finalement on efface l'ecran
.0d4c	68		               pla
.0d4d	28		               plp
.0d4e	60		               rts
.0d4f			curshome
.0d4f	08		               php                      ; Sauvegarde flags ...
.0d50	48		               pha                      ; ... et accumulateur
.0d51	ad 11 0d	               lda  virtaddr            ; In replace le pointeur ...
.0d54	8d fb 0c	               sta  scrptr              ; ... d'écran virtuel à sa ...
.0d57	ad 12 0d	               lda  virtaddr+1          ; ... position initiale.
.0d5a	8d fc 0c	               sta  scrptr+1
.0d5d	20 8e 0d	               jsr  synccolptr          ; On synchronise le ptr couleur.
.0d60	ad 01 0d	               lda  vicbkcol0
.0d63	8d 21 d0	               sta  $d021               ; On recharge les couleurs ...
.0d66	ad 02 0d	               lda  vicbkcol1           ; ... de fond par defaut tel ...
.0d69	8d 22 d0	               sta  $d022               ; ... que specifie dans les ...
.0d6c	ad 03 0d	               lda  vicbkcol2           ; ... les variables globales.
.0d6f	8d 23 d0	               sta  $d023
.0d72	ad 04 0d	               lda  vicbkcol3
.0d75	8d 24 d0	               sta  $d024
.0d78	68		               pla                      ; Récupère l'accumulateur ...
.0d79	28		               plp                      ; ... et les flags
.0d7a	60		               rts
.0d7b			incscrptr
.0d7b	08		               php                      ; Sauvegarde flags ...
.0d7c	48		               pha                      ; ... et accumulateur
.0d7d	ee fb 0c	               inc  scrptr              ; Incremente le pointeur
.0d80	ad fb 0c	               lda  scrptr              ; Regarde si on doit faire un ...
.0d83	d0 03		               bne  pasdereport         ; ... report dans le MSB
.0d85	ee fc 0c	               inc  scrptr+1            ; Si oui on fait le repport
.0d88	20 8e 0d	pasdereport    jsr  synccolptr          ; On synchronise le ptr couleur.
.0d8b	68		               pla                      ; Récupère l'accumulateur ...
.0d8c	28		               plp                      ; ... et les flags
.0d8d	60		               rts
.0d8e			synccolptr
.0d8e	08		               php                      ; Sauvegarde flags ...
.0d8f	48		               pha                      ; ... et accumulateur
.0d90	ad fb 0c	               lda  scrptr              ; Récupère le LSB du scrptr ...
.0d93	8d fd 0c	               sta  colptr              ; ... pour le placer dans le colptr.
.0d96	ad fc 0c	               lda  scrptr+1            ; Récupère le mSB du scrptr, ...
.0d99	29 03		               and  #%00000011          ; ... le converti pour pointer ...
.0d9b	09 d8		               ora  #%11011000          ; ... la RAM couleur ...
.0d9d	8d fe 0c	               sta  colptr+1            ; ... et le sauvegarde.
.0da0	68		               pla                      ; Récupère l'accumulateur ...
.0da1	28		               plp                      ; ... et les flags
.0da2	60		               rts
.0da3			cls
.0da3	20 4b 0a	               jsr  push                ; On sauvegarde les registres
.0da6	ad 11 0d	               lda  virtaddr            ; On replace le curseur d'ecran à
.0da9	8d fb 0c	               sta  scrptr
.0dac	ad 12 0d	               lda  virtaddr+1          ; sa position initiale, ($0400).
.0daf	8d fc 0c	               sta  scrptr+1
.0db2	20 8e 0d	               jsr  synccolptr          ; On synchronise la couleur.
.0db5	20 5a 0f	               jsr  scrptr2zp1          ; L'adresse actuelle dans le ZP1.
.0db8	ad 00 0d	               lda  brdcol              ; On place la couleur ...
.0dbb	8d 20 d0	               sta  vicbordcol          ; ... de la bordure.
.0dbe	ad 10 0d	               lda  bkcol               ; Associer couleur pour ...
.0dc1	8d 21 d0	               sta  vicbackcol          ; ... remplir l'ecran ...
.0dc4	a9 20		               lda  #$20                ; ... de caracteres espace.
.0dc6	a2 04		               ldx  #4                  ; Quatre blocs de ...
.0dc8	a0 00		nextline       ldy  #0                  ; ... 256 caracteres.
.0dca			nextcar
.0dca	91 fb		               sta  (zpage1),y          ;
.0dcc	a5 fc		               lda  zpage1+1
.0dce	48		               pha
.0dcf	29 03		               and  #%00000011
.0dd1	09 d8		               ora  #%11011000
.0dd3	85 fc		               sta  zpage1+1
.0dd5	a9 00		               lda  #0
.0dd7	91 fb		               sta  (zpage1),y
.0dd9	68		               pla
.0dda	85 fc		               sta  zpage1+1
.0ddc	a9 20		               lda  #$20
.0dde	88		               dey
.0ddf	d0 e9		               bne  nextcar
.0de1	e6 fc		               inc  zpage1+1
.0de3	ca		               dex
.0de4	d0 e4		               bne  nextcar
.0de6	a9 00		               lda  #$00
.0de8	8d fb 0c	               sta  scrptr
.0deb	a9 04		               lda  #$04
.0ded	8d fc 0c	               sta  scrptr+1
.0df0	20 8e 0d	               jsr  synccolptr
.0df3	20 8a 0a	               jsr  pop
.0df6	60		               rts
.0df7			setborder
.0df7	08		               php
.0df8	8d 00 0d	               sta  brdcol
.0dfb	8d 20 d0	               sta  vicbordcol
.0dfe	28		               plp
.0dff	60		               rts
.0e00			setinverse
.0e00	08		               php
.0e01	48		               pha
.0e02	a9 80		               lda  #%10000000
.0e04	8d 05 0d	               sta  inverse
.0e07	68		               pla
.0e08	28		               plp
.0e09	60		               rts
.0e0a			clrinverse
.0e0a	08		               php
.0e0b	48		               pha
.0e0c	a9 00		               lda  #%00000000
.0e0e	8d 05 0d	               sta  inverse
.0e11	68		               pla
.0e12	28		               plp
.0e13	60		               rts
.0e14			putch
.0e14	20 4b 0a	               jsr  push           ; On sauvegarde les registres
.0e17	20 5a 0f	               jsr  scrptr2zp1     ; Place le ptr d'ecran sur zp1
.0e1a	29 3f		               and  #%00111111     ; Masque des bits 6 et 7 pour la ouleur.
.0e1c	0d 10 0d	               ora  bkcol          ; On y ajoute la couleur du fond.
.0e1f	a0 00		               ldy  #0             ; Met Y à 0
.0e21	91 fb		               sta  (zpage1),y     ; Affiche le caractere
.0e23	ae fe 0c	               ldx  colptr+1       ; Place le MSB du ptr de couleur
.0e26	86 fc		               stx  zpage1+1       ; ... dans le MSB du zp1.
.0e28	ad ff 0c	               lda  curcol         ; Charge la couleur voulu dans.
.0e2b	91 fb		               sta  (zpage1),y     ; ... la ram de couleur.
.0e2d	20 7b 0d	               jsr  incscrptr      ; Incremente le pointeur d'ecran.
.0e30	20 8a 0a	               jsr  pop            ; Replace tous les registres
.0e33	60		               rts
.0e34			z2putch
.0e34	20 4b 0a	               jsr  push           ; On sauvegarde les registres
.0e37	a0 00		               ldy  #$0            ; Met Y à 0
.0e39	b1 fd		               lda  (zpage2),y     ; Charge le caractere
.0e3b	20 14 0e	               jsr  putch          ; Appel pour affichage
.0e3e	20 8a 0a	               jsr  pop            ; Replace tous les registres
.0e41	60		               rts
.0e42			z2puts
.0e42	20 4b 0a	               jsr  push           ; On sauvegarde les registres
.0e45	a0 00		               ldy  #$0            ; Met Y à 0
.0e47	b1 fd		nextcar        lda  (zpage2),y     ; Charge le caractere
.0e49	f0 09		               beq  endstr         ; Est-ce le 0 de fin de chaine ?
.0e4b	20 34 0e	               jsr  z2putch        ; Appel pour affichage
.0e4e	20 68 0b	               jsr  inczp2         ; On pointe zp2 sur le prochain caractere.
.0e51	4c 47 0e	               jmp  nextcar        ; On passe au prochain
.0e54	20 8a 0a	endstr         jsr  pop            ; Replace tous les registres
.0e57	60		               rts
.0e58			puts
.0e58	20 4b 0a	               jsr  push           ; On sauvegarde les registres
.0e5b	86 fd		               stx  zpage2         ; On positionne xp2 en fonction de
.0e5d	84 fe		               sty  zpage2+1       ; l'adresse reçcu dans X et Y
.0e5f	20 42 0e	               jsr  z2puts         ; Appel pour affichage
.0e62	20 8a 0a	               jsr  pop            ; Replace tous les registres
.0e65	60		               rts
.0e66			gotoxy
.0e66	20 4b 0a	               jsr  push           ; On sauvegarde les registres
.0e69	20 4f 0d	               jsr  curshome       ;  retourne le curseur virtuel a 0,0.
.0e6c	c0 00		yagain         cpy  #0             ; Devons nous changer de ligne ?
.0e6e	f0 09		               beq  setx           ; Si non, on verifi les colonnes.
.0e70	a9 28		               lda  #40            ; Si oui on ajoute 40
.0e72	20 f7 0e	               jsr  saddscrptr     ;  à l'adresse du pointeur virtuel autant
.0e75	88		               dey                 ;  de fois qu'il est spécifié dans y.
.0e76	4c 6c 0e	               jmp  yagain         ; On passe au prochain y.
.0e79	8a		setx           txa                 ; On ajoute la valeur de X
.0e7a	20 f7 0e	               jsr  saddscrptr     ;  à l'adresse di pointeur virtuel.
.0e7d	20 8e 0d	               jsr  synccolptr     ; Synchro du pointeur des couleurs
.0e80	20 8a 0a	               jsr  pop            ; Replace tous les registres
.0e83	60		               rts
.0e84			putsxy
.0e84	20 4b 0a	               jsr  push           ; On sauvegarde les registres et le zp2
.0e87	86 fd		               stx  zpage2         ; Place l'adr de chaine dans zp2
.0e89	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.0e8b	a0 00		               ldy  #0             ; On place le compteur
.0e8d	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.0e8f	aa		               tax                 ; de A à X
.0e90	20 68 0b	               jsr  inczp2         ; On deplace le pointeur
.0e93	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.0e95	a8		               tay                 ; de A à Y
.0e96	20 66 0e	               jsr  gotoxy         ; gotoxy : X=col, Y=ligne
.0e99	20 68 0b	               jsr  inczp2         ; On deplace le pointeur
.0e9c	20 42 0e	               jsr  z2puts         ; On imprime la chaine
.0e9f	20 8a 0a	               jsr  pop            ; Replace tous les registres
.0ea2	60		               rts
.0ea3			putscxy
.0ea3	20 4b 0a	               jsr  push           ; On Sauvegarde registres et zp2
.0ea6	86 fd		               stx  zpage2         ; On place l'adresse de chaine dans zp2
.0ea8	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.0eaa	a0 00		               ldy  #0             ; Place le compteur
.0eac	b1 fd		               lda  (zpage2),y     ; Charge la couleur
.0eae	8d ff 0c	               sta  curcol         ; ... et on la definie
.0eb1	20 68 0b	               jsr  inczp2         ; Pointe le prochain byte
.0eb4	b1 fd		               lda  (zpage2),y     ; Récupere et sauvegarde ...
.0eb6	8d 10 0d	               sta  bkcol          ; ... l'index de couleur de fond
.0eb9	20 68 0b	               jsr  inczp2         ; Deplace le pointeur
.0ebc	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.0ebe	aa		               tax                 ; ... de A à X
.0ebf	20 68 0b	               jsr  inczp2         ; Deplace le pointeur
.0ec2	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.0ec4	a8		               tay                 ; de A à Y
.0ec5	20 66 0e	               jsr  gotoxy         ; gotoxy : X=col, y=ligne
.0ec8	20 68 0b	               jsr  inczp2         ; Place le ptr en début de chaine
.0ecb	20 42 0e	               jsr  z2puts         ; On imprime la chaine
.0ece	20 8a 0a	               jsr  pop
.0ed1	60		               rts
.0ed2			setcurcol
.0ed2	08		               php
.0ed3	8d ff 0c	               sta  curcol
.0ed6	28		               plp
.0ed7	60		               rts
.0ed8			setvicbkcol
.0ed8	08		               php
.0ed9	48		               pha
.0eda	8a		               txa
.0edb	29 03		               and  #$03
.0edd	aa		               tax
.0ede	68		               pla
.0edf	9d 01 0d	               sta  vicbkcol0,x
.0ee2	9d 21 d0	               sta  $d021,x
.0ee5	28		               plp
.0ee6	60		               rts
.0ee7			setbkcol
.0ee7	08		               php
.0ee8	48		               pha
.0ee9	0a		               asl
.0eea	0a		               asl
.0eeb	0a		               asl
.0eec	0a		               asl
.0eed	0a		               asl
.0eee	0a		               asl
.0eef	29 c0		               and  #$c0
.0ef1	8d 10 0d	               sta  bkcol
.0ef4	68		               pla
.0ef5	28		               plp
.0ef6	60		               rts
.0ef7			saddscrptr
.0ef7	08		               php
.0ef8	48		               pha
.0ef9	18		               clc
.0efa	6d fb 0c	               adc  scrptr
.0efd	8d fb 0c	               sta  scrptr
.0f00	90 03		               bcc  norep
.0f02	ee fc 0c	               inc  scrptr+1
.0f05	68		norep          pla
.0f06	28		               plp
.0f07	60		               rts
.0f08			scrptr2str
.0f08	20 4b 0a	               jsr  push
.0f0b	ad fc 0c	               lda  scrptr+1
.0f0e	48		               pha
.0f0f	20 51 0c	               jsr  lsra4bits
.0f12	20 45 0c	               jsr  nib2hex
.0f15	8d 06 0d	               sta  scraddr
.0f18	68		               pla
.0f19	20 51 0c	               jsr  lsra4bits
.0f1c	20 45 0c	               jsr  nib2hex
.0f1f	8d 07 0d	               sta  scraddr+1
.0f22	ad fc 0c	               lda  scrptr+1
.0f25	48		               pha
.0f26	20 51 0c	               jsr  lsra4bits
.0f29	20 45 0c	               jsr  nib2hex
.0f2c	8d 06 0d	               sta  scraddr
.0f2f	68		               pla
.0f30	20 51 0c	               jsr  lsra4bits
.0f33	20 45 0c	               jsr  nib2hex
.0f36	8d 07 0d	               sta  scraddr+1
.0f39	ad fb 0c	               lda  scrptr
.0f3c	48		               pha
.0f3d	20 51 0c	               jsr  lsra4bits
.0f40	20 45 0c	               jsr  nib2hex
.0f43	8d 08 0d	               sta  scraddr+2
.0f46	8d 0d 0d	               sta  coladdr+2
.0f49	68		               pla
.0f4a	20 51 0c	               jsr  lsra4bits
.0f4d	20 45 0c	               jsr  nib2hex
.0f50	8d 09 0d	               sta  scraddr+3
.0f53	8d 0e 0d	               sta  coladdr+3
.0f56	20 8a 0a	               jsr  pop
.0f59	60		               rts
.0f5a			scrptr2zp1
.0f5a	08		               php
.0f5b	48		               pha
.0f5c	ad fb 0c	               lda  scrptr
.0f5f	85 fb		               sta  zpage1
.0f61	ad fc 0c	               lda  scrptr+1
.0f64	85 fc		               sta  zpage1+1
.0f66	68		               pla
.0f67	28		               plp
.0f68	60		               rts
.0f69			colptr2zp1
.0f69	08		               php
.0f6a	48		               pha
.0f6b	ad fd 0c	               lda  colptr
.0f6e	85 fb		               sta  zpage1
.0f70	ad fe 0c	               lda  colptr+1
.0f73	85 fc		               sta  zpage1+1
.0f75	68		               pla
.0f76	28		               plp
.0f77	60		               rts
.0f78			scrptr2zp2
.0f78	08		               php
.0f79	48		               pha
.0f7a	ad fb 0c	               lda  scrptr
.0f7d	85 fd		               sta  zpage2
.0f7f	ad fc 0c	               lda  scrptr+1
.0f82	85 fe		               sta  zpage2+1
.0f84	68		               pla
.0f85	28		               plp
.0f86	60		               rts
.0f87			colptr2zp2
.0f87	08		               php
.0f88	48		               pha
.0f89	ad fd 0c	               lda  colptr
.0f8c	85 fd		               sta  zpage2
.0f8e	ad fe 0c	               lda  colptr+1
.0f91	85 fe		               sta  zpage2+1
.0f93	68		               pla
.0f94	28		               plp
.0f95	60		               rts
.0f96			putrahex
.0f96	08		               php
.0f97	48		               pha
.0f98	20 58 0c	               jsr     a2hex
.0f9b	a2 ff		               ldx     #<a2hexcol
.0f9d	a0 0b		               ldy     #>a2hexcol
.0f9f	20 58 0e	               jsr     puts
.0fa2	68		               pla
.0fa3	28		               plp
.0fa4	60		               rts
.0fa5			putrahexxy
.0fa5	08		               php
.0fa6	48		               pha
.0fa7	20 58 0c	               jsr  a2hex
.0faa	a9 01		               lda  #<a2hexpos
.0fac	a0 0c		               ldy  #>a2hexpos
.0fae	20 84 0e	               jsr  putsxy
.0fb1	68		               pla
.0fb2	28		               plp
.0fb3	60		               rts
.0fb4			putrahexcxy
.0fb4	08		               php
.0fb5	68		               pla
.0fb6	20 58 0c	               jsr  a2hex
.0fb9	a9 01		               lda  #<a2hexpos
.0fbb	a0 0c		               ldy  #>a2hexpos
.0fbd	20 a3 0e	               jsr  putscxy
.0fc0	68		               pla
.0fc1	28		               plp
.0fc2	60		               rts

;******  Return to file: main.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-showregs.asm

.0fc3			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=$c0			bkcol   =   bkcol3
.0fc3	08		                php
.0fc4	8d 75 11	                sta  rega
.0fc7	68		                pla
.0fc8	8d 78 11	                sta  regp
.0fcb	8e 76 11	                stx  regx
.0fce	8c 77 11	                sty  regy
.0fd1	ba		                tsx
.0fd2	8e 79 11	                stx  regs
.0fd5	68		                pla
.0fd6	8d 7b 11	                sta  regpcl
.0fd9	8d 7c 11	                sta  regpcl2
.0fdc	68		                pla
.0fdd	8d 7a 11	                sta  regpch
.0fe0	ad 75 11	                lda  rega
.0fe3	48		                pha
.0fe4	20 45 0c	                jsr  nib2hex
.0fe7	8d 18 11	                sta  vala+1
.0fea	68		                pla
.0feb	20 51 0c	                jsr  lsra4bits
.0fee	20 45 0c	                jsr  nib2hex
.0ff1	8d 17 11	                sta  vala
.0ff4	ad 77 11	                lda  regy
.0ff7	48		                pha
.0ff8	20 45 0c	                jsr  nib2hex
.0ffb	8d 2e 11	                sta  valy+1
.0ffe	68		                pla
.0fff	20 51 0c	                jsr  lsra4bits
.1002	20 45 0c	                jsr  nib2hex
.1005	8d 2d 11	                sta  valy
.1008	ad 76 11	                lda  regx
.100b	48		                pha
.100c	20 45 0c	                jsr  nib2hex
.100f	8d 23 11	                sta  valx+1
.1012	68		                pla
.1013	20 51 0c	                jsr  lsra4bits
.1016	20 45 0c	                jsr  nib2hex
.1019	8d 22 11	                sta  valx
.101c	ad 78 11	                lda  regp
.101f	48		                pha
.1020	20 45 0c	                jsr  nib2hex
.1023	8d 39 11	                sta  valp+1
.1026	68		                pla
.1027	20 51 0c	                jsr  lsra4bits
.102a	20 45 0c	                jsr  nib2hex
.102d	8d 38 11	                sta  valp
.1030	ad 79 11	                lda  regs
.1033	48		                pha
.1034	20 45 0c	                jsr  nib2hex
.1037	8d 44 11	                sta  vals+1
.103a	68		                pla
.103b	20 51 0c	                jsr  lsra4bits
.103e	20 45 0c	                jsr  nib2hex
.1041	8d 43 11	                sta  vals
.1044	ad 7a 11	                lda  regpch
.1047	48		                pha
.1048	20 45 0c	                jsr  nib2hex
.104b	8d 50 11	                sta  valpch+1
.104e	68		                pla
.104f	20 51 0c	                jsr  lsra4bits
.1052	20 45 0c	                jsr  nib2hex
.1055	8d 4f 11	                sta  valpch
.1058	ad 7b 11	                lda  regpcl
.105b	48		                pha
.105c	20 45 0c	                jsr  nib2hex
.105f	8d 52 11	                sta  valpcl+1
.1062	68		                pla
.1063	20 51 0c	                jsr  lsra4bits
.1066	20 45 0c	                jsr  nib2hex
.1069	8d 51 11	                sta  valpcl
.106c	a5 fb		                lda  zpage1
.106e	48		                pha
.106f	20 45 0c	                jsr  nib2hex
.1072	8d 61 11	                sta  valz1l
.1075	68		                pla
.1076	20 51 0c	                jsr  lsra4bits
.1079	20 45 0c	                jsr  nib2hex
.107c	8d 62 11	                sta  valz1l+1
.107f	a5 fc		                lda  zpage1+1
.1081	48		                pha
.1082	20 45 0c	                jsr  nib2hex
.1085	8d 5f 11	                sta  valz1h
.1088	68		                pla
.1089	20 51 0c	                jsr  lsra4bits
.108c	20 45 0c	                jsr  nib2hex
.108f	8d 60 11	                sta  valz1h+1
.1092	a5 fd		                lda  zpage2
.1094	48		                pha
.1095	20 45 0c	                jsr  nib2hex
.1098	8d 71 11	                sta  valz2l
.109b	68		                pla
.109c	20 51 0c	                jsr  lsra4bits
.109f	20 45 0c	                jsr  nib2hex
.10a2	8d 72 11	                sta  valz2l+1
.10a5	a5 fe		                lda  zpage2+1
.10a7	48		                pha
.10a8	20 45 0c	                jsr  nib2hex
.10ab	8d 6f 11	                sta  valz2h
.10ae	68		                pla
.10af	20 51 0c	                jsr  lsra4bits
.10b2	20 45 0c	                jsr  nib2hex
.10b5	8d 70 11	                sta  valz2h+1
.10b8	20 00 0e	                jsr  setinverse
.10bb	78		                sei
.10bc	a2 0f		                ldx  #<srega
.10be	a0 11		                ldy  #>srega+1
.10c0	20 a3 0e	                jsr  putscxy
.10c3	a2 1a		                ldx  #<sregx
.10c5	a0 11		                ldy  #>sregx+1
.10c7	20 a3 0e	                jsr  putscxy
.10ca	a2 25		                ldx  #<sregy
.10cc	a0 11		                ldy  #>sregy+1
.10ce	20 a3 0e	                jsr  putscxy
.10d1	a2 30		                ldx  #<sregp
.10d3	a0 11		                ldy  #>sregp+1
.10d5	20 a3 0e	                jsr  putscxy
.10d8	a2 3b		                ldx  #<sregs
.10da	a0 11		                ldy  #>sregs+1
.10dc	20 a3 0e	                jsr  putscxy
.10df	a2 46		                ldx  #<sregpc
.10e1	a0 11		                ldy  #>sregpc+1
.10e3	20 a3 0e	                jsr  putscxy
.10e6	a2 55		                ldx  #<sregz1
.10e8	a0 11		                ldy  #>sregz1+1
.10ea	20 a3 0e	                jsr  putscxy
.10ed	a2 65		                ldx  #<sregz2
.10ef	a0 11		                ldy  #>sregz2+1
.10f1	20 a3 0e	                jsr  putscxy
.10f4	58		                cli
.10f5	20 0a 0e	                jsr  clrinverse
.10f8	ad 7a 11	                lda  regpch
.10fb	48		                pha
.10fc	ad 7b 11	                lda  regpcl
.10ff	48		                pha
.1100	ac 77 11	                ldy  regy
.1103	ae 76 11	                ldx  regx
.1106	ad 78 11	                lda  regp
.1109	48		                pha
.110a	ad 75 11	                lda  rega
.110d	28		                plp
.110e	60		                rts
>110f	01 c0 00 17	srega   .byte   colr,bkcol,coln,line
>1113	20 01 3a 24	        .text   ' a:$' ;4,24
>1117	00 00 00	vala    .byte   0,0,0
>111a	01 c0 06 17	sregx   .byte   colr,bkcol,coln+6,line
>111e	20 18 3a 24	        .text   ' x:$' ;4,24
>1122	00 00 00	valx    .byte   0,0,0
>1125	01 c0 0c 17	sregy   .byte   colr,bkcol,coln+12,line
>1129	20 19 3a 24	        .text   ' y:$' ;4,24
>112d	00 00 00	valy    .byte   0,0,0
>1130	01 c0 12 17	sregp   .byte   colr,bkcol,coln+18,line
>1134	20 10 3a 24	        .text   ' p:$' ;4,24
>1138	00 00 00	valp    .byte   0,0,0
>113b	01 c0 18 17	sregs   .byte   colr,bkcol,coln+24,line
>113f	20 13 3a 24	        .text   ' s:$' ;4,24
>1143	00 00 00	vals    .byte   0,0,0
>1146	01 c0 1e 17	sregpc  .byte   colr,bkcol,coln+30,line
>114a	20 10 03 3a	        .text   ' pc:$' ;4,24
>114e	24
>114f	00 00		valpch  .byte   0,0
>1151	00 00 20 00	valpcl  .byte   0,0,32,0
>1155	01 c0 03 18	sregz1  .byte   colr,bkcol,coln+3,line+1
>1159	20 1a 10 31	        .text   ' zp1:$' ;4,24
>115d	3a 24
>115f	00 00		valz1h  .byte   0,0
>1161	00 00 20 00	valz1l  .byte   0,0,32,0
>1165	01 c0 0f 18	sregz2  .byte   colr,bkcol,coln+15,line+1
>1169	20 1a 10 32	        .text   ' zp2:$' ;4,24
>116d	3a 24
>116f	00 00		valz2h  .byte   0,0
>1171	00 00 20 00	valz2l  .byte   0,0,32,0
>1175	00		rega    .byte   0
>1176	00		regx    .byte   0
>1177	00		regy    .byte   0
>1178	00		regp    .byte   0
>1179	00		regs    .byte   0
>117a	00		regpch  .byte   0
>117b	00		regpcl  .byte   0
>117c	00		regpcl2 .byte   0
>117d	00		vzp1h   .byte   0
>117e	00		vzp1l   .byte   0
>117f	00		vzp2h   .byte   0
>1180	00		vzp2l   .byte   0

;******  Return to file: main.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-joystick.asm

=$dc00			js_2port       =    $dc00
=$dc01			js_1port       =    $dc01
=$dc02			js_2dir        =    $dc02
=$dc03			js_1dir        =    $dc03
=2			js_xoffset     =    2
=2			js_yoffset     =    2
=0			js_location    =    0
.1181			js_init
.1181	20 4b 0a	               jsr  push
.1184	ad 03 dc	               lda  js_1dir
.1187	29 e0		               and  #$e0
.1189	8d 03 dc	               sta  js_1dir
.118c	ad 02 dc	               lda  js_2dir
.118f	29 e0		               and  #$e0
.1191	8d 02 dc	               sta  js_2dir
.1194	20 8a 0a	               jsr  pop
.1197	60		               rts
.1198			js_scan
.1198	20 9f 11	               jsr  js_1scan
.119b	20 4e 12	               jsr  js_2scan
.119e	60		               rts
.119f			js_1scan
.119f	20 4b 0a	               jsr  push
.11a2	ad 01 dc	               lda  js_1port
.11a5	29 1f		               and  #$1f
.11a7	c9 00		               cmp  #$00
.11a9	d0 03		               bne  p1scan
.11ab	4c 3e 12	               jmp  port1_out
.11ae	49 1f		p1scan         eor  #$1f
.11b0	18		               clc
.11b1	4a		js_1b0         lsr
.11b2	90 14		               bcc  js_1b1
.11b4	48		               pha
.11b5	ee 68 15	               inc  js_1flag
.11b8	ad 64 15	               lda  js_1pixy
.11bb	38		               sec
.11bc	e9 02		               sbc  #js_yoffset
.11be	c9 f0		               cmp  #$f0
.11c0	90 02		               bcc  sto1ym
.11c2	a9 00		               lda  #$00
.11c4	8d 64 15	sto1ym         sta  js_1pixy
.11c7	68		               pla
.11c8	4a		js_1b1         lsr
.11c9	90 14		               bcc  js_1b2
.11cb	48		               pha
.11cc	ee 68 15	               inc  js_1flag
.11cf	ad 64 15	               lda  js_1pixy
.11d2	18		               clc
.11d3	69 02		               adc  #js_yoffset
.11d5	c9 c7		               cmp  #199
.11d7	90 02		               bcc  sto1yp
.11d9	a9 c7		               lda  #199
.11db	8d 64 15	sto1yp         sta  js_1pixy
.11de	68		               pla
.11df	4a		js_1b2         lsr
.11e0	90 20		               bcc  js_1b3
.11e2	48		               pha
.11e3	ee 68 15	               inc  js_1flag
.11e6	ad 62 15	               lda  js_1pixx
.11e9	0d 63 15	               ora  js_1pixx+1
.11ec	f0 13		               beq  js_1b2out
.11ee	38		               sec
.11ef	ad 62 15	               lda  js_1pixx
.11f2	e9 02		               sbc  #js_xoffset
.11f4	8d 62 15	               sta  js_1pixx
.11f7	b0 08		               bcs  js_1b2out
.11f9	ad 63 15	               lda  js_1pixx+1
.11fc	f0 03		               beq  js_1b2out
.11fe	ce 63 15	               dec  js_1pixx+1
.1201	68		js_1b2out      pla
.1202	4a		js_1b3         lsr
.1203	90 22		               bcc  js_1b4
.1205	48		               pha
.1206	ee 68 15	               inc  js_1flag
.1209	ad 63 15	               lda  js_1pixx+1
.120c	f0 0a		               beq  incj1x
.120e	ad 62 15	               lda  js_1pixx
.1211	c9 3c		               cmp  #$40-4
.1213	30 03		               bmi  incj1x
.1215	4c 26 12	               jmp  js_1b3out
.1218	18		incj1x         clc
.1219	ad 62 15	               lda  js_1pixx
.121c	69 02		               adc  #js_xoffset
.121e	8d 62 15	               sta  js_1pixx
.1221	90 03		               bcc  js_1b3out
.1223	ee 63 15	               inc  js_1pixx+1
.1226	68		js_1b3out      pla
.1227	4a		js_1b4          lsr                     ;Estce le bbouton fire (F)
.1228	90 14		                bcc     port1_out       ;Oui!
.122a	ee 68 15	                inc     js_1flag
.122d	ee 67 15	                inc     js_1fire        ; on augmente le nombre de tir
.1230	a2 01		js_1wait        ldx     #$01
.1232	a0 ff		                ldy     #$ff
.1234	c8		js_1rel         iny
.1235	ad 01 dc	                lda     js_1port
.1238	49 ff		                eor     #$ff
.123a	29 10		                and     #$10
.123c	d0 f6		                bne     js_1rel         ; des boutons
.123e	ad 68 15	port1_out       lda     js_1flag
.1241	f0 08		                beq     out
.1243	20 40 13	                jsr     js_1correct
.1246	a9 00		                lda     #0
.1248	8d 68 15	                sta     js_1flag
.124b	20 8a 0a	out             jsr     pop
.124e			js_2scan
.124e	20 4b 0a	                jsr     push
.1251	ad 00 dc	port2           lda     js_2port
.1254	29 1f		                and     #$1f
.1256	c9 1f		                cmp	#$1f
.1258	d0 03		                bne     p2scan
.125a	4c 11 13	                jmp     port2_out
.125d	49 1f		p2scan          eor     #$1f
.125f	a2 02		                ldx     #$02
.1261	18		                clc
.1262	4a		js_2b0          lsr                     ;On decale js_2 bit 0 dans C
.1263	90 14		                bcc     js_2b1          ;Est-ce vers le haut (U)
.1265	48		                pha                     ;On stack la valeur
.1266	ee 73 15	                inc     js_2flag
.1269	ad 6f 15	                lda     js_2pixy        ;Oui!
.126c	38		                sec                     ;On place la carry a 1
.126d	e9 02		                sbc     #js_yoffset     ;On reduit
.126f	c9 f0		                cmp     #$f0
.1271	90 02		                bcc     sto2ym
.1273	a9 00		                lda     #$00
.1275	8d 6f 15	sto2ym          sta     js_2pixy        ; le y
.1278	68		                pla                     ;On recupere la valeur
.1279	4a		js_2b1          lsr                     ;On decale js_2 bit 0 dans C
.127a	90 14		                bcc     js_2b2          ;Est-ce vers le bas (D)
.127c	48		                pha                     ;On stack la valeur
.127d	ee 73 15	                inc     js_2flag
.1280	ad 6f 15	                lda     js_2pixy        ;Oui!
.1283	18		                clc                     ;On place la carry a 0
.1284	69 02		                adc     #js_yoffset     ;On augmente
.1286	c9 c7		                cmp     #199
.1288	90 02		                bcc     sto2yp
.128a	a9 c7		                lda     #199
.128c	8d 6f 15	sto2yp          sta     js_2pixy        ; le y
.128f	68		                pla                     ;On recupere la valeur
.1290	4a		js_2b2          lsr                     ;On decale js_2 bit 0 dans C
.1291	90 20		                bcc     js_2b3          ;Est-ce vers la gauche (L)
.1293	48		                pha                     ;On stack la valeur
.1294	ee 73 15	                inc     js_2flag
.1297	ad 6d 15	                lda     js_2pixx        ;Oui!
.129a	0d 6e 15	                ora     js_2pixx+1
.129d	f0 13		                beq     js_2b2out
.129f	38		                sec                     ;On place la carry a 1
.12a0	ad 6d 15	                lda     js_2pixx        ;Oui!
.12a3	e9 02		                sbc     #js_xoffset     ;On diminue
.12a5	8d 6d 15	                sta     js_2pixx        ; le X
.12a8	b0 08		                bcs     js_2b2out       ; de offset
.12aa	ad 6e 15	                lda     js_2pixx+1
.12ad	f0 03		                beq     js_2b2out
.12af	ce 6e 15	                dec     js_2pixx+1      ; sur 16 bits
.12b2	68		js_2b2out       pla                     ;On recupere la valeur
.12b3	4a		js_2b3          lsr                     ;On decale js_2 bit 0 dans C
.12b4	90 22		                bcc     js_2b4          ;Est-ce vers la droite (R)
.12b6	48		                pha                     ;On stack la valeur
.12b7	ee 73 15	                inc     js_2flag
.12ba	ad 6e 15	                lda     js_2pixx+1
.12bd	f0 0a		                beq     incj2x
.12bf	ad 6d 15	                lda     js_2pixx
.12c2	c9 3e		                cmp     #$40-js_xoffset
.12c4	30 03		                bmi     incj2x
.12c6	4c d7 12	                jmp     js_2b3out
.12c9	18		incj2x          clc                     ;On place la carry a 0
.12ca	ad 6d 15	                lda     js_2pixx        ;Oui!
.12cd	69 02		                adc     #js_xoffset     ;On augmente
.12cf	8d 6d 15	                sta     js_2pixx        ; le X
.12d2	90 03		                bcc     js_2b3out       ; de offset
.12d4	ee 6e 15	                inc     js_2pixx+1      ; sur 16 bits
.12d7	68		js_2b3out       pla                     ;On recupere la valeur
.12d8	4a		js_2b4          lsr                     ;Estce le bbouton fire (F)
.12d9	90 36		                bcc     port2_out       ;Oui!
.12db	ee 73 15	                inc     js_2flag
.12de	ee 72 15	                inc     js_2fire        ; on augmente le nombre de tir
.12e1	a9 01		                lda     #%00000001
.12e3	8d 77 15	                sta     js_2events
.12e6	ad 6d 15	                lda     js_2pixx
.12e9	8d 74 15	                sta     js_2clickx
.12ec	ad 6e 15	                lda     js_2pixx+1
.12ef	8d 75 15	                sta     js_2clickx+1
.12f2	ad 6f 15	                lda     js_2pixy
.12f5	8d 76 15	                sta     js_2clicky
.12f8	ad d9 15	                lda     js_2val16a+1
.12fb	49 40		                eor     #%01000000
.12fd	8d d9 15	                sta     js_2val16a+1
.1300	a2 00		js_2wait        ldx     #$00
.1302	a0 ff		                ldy     #$ff
.1304	c8		js_2rel         iny
.1305	d0 01		                bne     sr1
.1307	e8		                inx
.1308			sr1
.1308	ad 00 dc	                lda     js_2port
.130b	49 ff		                eor     #$ff
.130d	29 10		                and     #$10
.130f	d0 f3		                bne     js_2rel         ; des boutons
.1311	ad 73 15	port2_out       lda     js_2flag
.1314	f0 08		                beq     out
.1316	20 75 13	                jsr     js_2correct
.1319	a9 00		                lda     #0
.131b	8d 73 15	                sta     js_2flag
.131e	20 8a 0a	out             jsr     pop
.1321			js_corrector
.1321	08		                php
.1322	48		                pha
.1323	ad 68 15	                lda     js_1flag
.1326	f0 08		                beq     check2
.1328	20 40 13	                jsr     js_1correct
.132b	a9 00		                lda     #0
.132d	8d 68 15	                sta     js_1flag
.1330	ad 73 15	check2          lda     js_2flag
.1333	f0 08		                beq     no_update
.1335	20 75 13	                jsr     js_2correct
.1338	a9 00		                lda     #0
.133a	8d 73 15	                sta     js_2flag
.133d	68		no_update       pla
.133e	28		                plp
.133f	60		                rts
.1340			js_1correct
.1340	08		                php
.1341	48		                pha
.1342	ad 62 15	                lda     js_1pixx
.1345	8d 73 13	                sta     vallsb
.1348	ad 63 15	                lda     js_1pixx+1
.134b	6a		                ror                     ; ex = %0000000100000001 = 257 pixel
.134c	6e 73 13	                ror     vallsb          ; Cnnnnnnn      On divise par 8 pc les
.134f	4e 73 13	                lsr     vallsb          ; 0Cnnnnnn      caracteres de 8 pixels
.1352	4e 73 13	                lsr     vallsb          ; 00Cnnnnn
.1355	ad 73 13	                lda     vallsb          ; devient = %00100000 = 32
.1358	8d 65 15	                sta     js_1x
.135b	ad 64 15	                lda     js_1pixy
.135e	8d 73 13	                sta     vallsb
.1361	4e 73 13	                lsr     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.1364	4e 73 13	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.1367	4e 73 13	                lsr     vallsb          ; 00Cnnnnn
.136a	ad 73 13	                lda     vallsb          ; devient = %00100000 = 32
.136d	8d 66 15	                sta     js_1y
.1370	68		                pla
.1371	28		                plp
.1372	60		                rts
>1373	00		vallsb          .byte     0
>1374	00		regx            .byte     0
.1375			js_2correct
.1375	08		                php
.1376	48		                pha
.1377	ad 6d 15	                lda     js_2pixx
.137a	8d a8 13	                sta     vallsb
.137d	ad 6e 15	                lda     js_2pixx+1
.1380	6a		                ror                     ; ex = %0000000100000001 = 257 pixel
.1381	6e a8 13	                ror     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.1384	4e a8 13	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.1387	4e a8 13	                lsr     vallsb          ; 00Cnnnnn
.138a	ad a8 13	                lda     vallsb          ; devient = %00100000 = 32
.138d	8d 70 15	                sta     js_2x
.1390	ad 6f 15	                lda     js_2pixy
.1393	8d a8 13	                sta     vallsb
.1396	4e a8 13	                lsr     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.1399	4e a8 13	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.139c	4e a8 13	                lsr     vallsb          ; 00Cnnnnn
.139f	ad a8 13	                lda     vallsb          ; devient = %00100000 = 32
.13a2	8d 71 15	                sta     js_2y
.13a5	68		                pla
.13a6	28		                plp
.13a7	60		                rts
>13a8	00		vallsb          .byte     0
>13a9	00		regx            .byte     0
.13aa			js_showvals
.13aa	20 3a 14	                jsr     js_2showvals
.13ad	60		                rts
.13ae			js_1showvals
.13ae	20 4b 0a	                jsr     push
.13b1	ad 65 15	                lda     js_1x
.13b4	20 58 0c	                jsr     a2hex
.13b7	ad 05 0c	                lda     a2hexstr+1
.13ba	8d 8b 15	                sta     js_1val8+19
.13bd	ad 06 0c	                lda     a2hexstr+2
.13c0	8d 8c 15	                sta     js_1val8+20
.13c3	ad 62 15	                lda     js_1pixx
.13c6	20 58 0c	                jsr     a2hex
.13c9	ad 05 0c	                lda     a2hexstr+1
.13cc	8d aa 15	                sta     js_1val16+14
.13cf	ad 06 0c	                lda     a2hexstr+2
.13d2	8d ab 15	                sta     js_1val16+15
.13d5	ad 63 15	                lda     js_1pixx+1
.13d8	20 58 0c	                jsr     a2hex
.13db	ad 05 0c	                lda     a2hexstr+1
.13de	8d a8 15	                sta     js_1val16+12
.13e1	ad 06 0c	                lda     a2hexstr+2
.13e4	8d a9 15	                sta     js_1val16+13
.13e7	ad 66 15	                lda     js_1y
.13ea	20 58 0c	                jsr     a2hex
.13ed	ad 05 0c	                lda     a2hexstr+1
.13f0	8d 8f 15	                sta     js_1val8+23
.13f3	ad 06 0c	                lda     a2hexstr+2
.13f6	8d 90 15	                sta     js_1val8+24
.13f9	ad 64 15	                lda     js_1pixy
.13fc	20 58 0c	                jsr     a2hex
.13ff	ad 05 0c	                lda     a2hexstr+1
.1402	8d b0 15	                sta     js_1val16+20
.1405	ad 06 0c	                lda     a2hexstr+2
.1408	8d b1 15	                sta     js_1val16+21
.140b	a9 00		                lda     #0
.140d	20 58 0c	                jsr     a2hex
.1410	ad 05 0c	                lda     a2hexstr+1
.1413	8d ae 15	                sta     js_1val16+18
.1416	ad 06 0c	                lda     a2hexstr+2
.1419	8d af 15	                sta     js_1val16+19
.141c	ad 67 15	                lda     js_1fire
.141f	20 58 0c	                jsr     a2hex
.1422	ad 06 0c	                lda     a2hexstr+2
.1425	8d 99 15	                sta     js_1val8+33
.1428	a2 78		                ldx     #<js_1val8
.142a	a0 15		                ldy     #>js_1val8
.142c	20 a3 0e	                jsr     putscxy
.142f	a2 9c		                ldx     #<js_1val16
.1431	a0 15		                ldy     #>js_1val16
.1433	20 a3 0e	                jsr     putscxy
.1436	20 8a 0a	                jsr     pop
.1439	60		                rts
.143a			js_2showvals
.143a	20 4b 0a	                jsr     push                    ; stack : y, x, a, flg
.143d	ad 70 15	                lda     js_2x
.1440	20 58 0c	                jsr     a2hex
.1443	ad 04 0c	                lda     a2hexstr
.1446	8d c7 15	                sta     js_2val8+19
.1449	ad 05 0c	                lda     a2hexstr+1
.144c	8d c8 15	                sta     js_2val8+20
.144f	ad 74 15	                lda     js_2clickx
.1452	20 58 0c	                jsr     a2hex
.1455	ad 04 0c	                lda     a2hexstr
.1458	8d f5 15	                sta     js_2val16+14
.145b	ad 05 0c	                lda     a2hexstr+1
.145e	8d f6 15	                sta     js_2val16+15
.1461	ad 75 15	                lda     js_2clickx+1
.1464	20 58 0c	                jsr     a2hex
.1467	ad 04 0c	                lda     a2hexstr
.146a	8d f3 15	                sta     js_2val16+12
.146d	ad 05 0c	                lda     a2hexstr+1
.1470	8d f4 15	                sta     js_2val16+13
.1473	ad 71 15	                lda     js_2y
.1476	20 58 0c	                jsr     a2hex
.1479	ad 04 0c	                lda     a2hexstr
.147c	8d cb 15	                sta     js_2val8+23
.147f	ad 05 0c	                lda     a2hexstr+1
.1482	8d cc 15	                sta     js_2val8+24
.1485	ad 76 15	                lda     js_2clicky
.1488	20 58 0c	                jsr     a2hex
.148b	ad 04 0c	                lda     a2hexstr
.148e	8d fb 15	                sta     js_2val16+20
.1491	ad 05 0c	                lda     a2hexstr+1
.1494	8d fc 15	                sta     js_2val16+21
.1497	a9 00		                lda     #0
.1499	20 58 0c	                jsr     a2hex
.149c	ad 04 0c	                lda     a2hexstr
.149f	8d f9 15	                sta     js_2val16+18
.14a2	ad 05 0c	                lda     a2hexstr+1
.14a5	8d fa 15	                sta     js_2val16+19
.14a8	ad 72 15	                lda     js_2fire
.14ab	20 58 0c	                jsr     a2hex
.14ae	ad 05 0c	                lda     a2hexstr+1
.14b1	8d d5 15	                sta     js_2val8+33
.14b4	a2 b4		                ldx     #<js_2val8
.14b6	a0 15		                ldy     #>js_2val8
.14b8	20 a3 0e	                jsr     putscxy
.14bb	a2 d8		                ldx     #<js_2val16a
.14bd	a0 15		                ldy     #>js_2val16a
.14bf	20 a3 0e	                jsr     putscxy
.14c2	a2 e7		                ldx     #<js_2val16
.14c4	a0 15		                ldy     #>js_2val16
.14c6	20 a3 0e	                jsr     putscxy
.14c9	20 8a 0a	                jsr     pop
.14cc	60		                rts
.14cd			js_updatecurs
.14cd	20 4b 0a	                jsr     push
.14d0	ad 70 15	running         lda     js_2x
.14d3	cd 5c 15	                cmp     js_x
.14d6	f0 06		                beq     chky
.14d8	8d 5c 15	                sta     js_x
.14db	ee 2f 15	                inc     flag
.14de	ad 71 15	chky            lda     js_2y
.14e1	cd 5d 15	                cmp     js_y
.14e4	f0 06		                beq     chkflag
.14e6	8d 5d 15	                sta     js_y
.14e9	ee 2f 15	                inc     flag
.14ec	ad 2f 15	chkflag         lda     flag
.14ef	f0 1e		                beq     showit
.14f1	ae 5e 15	                ldx     js_oldx
.14f4	ac 5f 15	                ldy     js_oldy
.14f7	20 30 15	                jsr     js_eoraddrxy
.14fa	ae 5c 15	                ldx     js_x
.14fd	ac 5d 15	                ldy     js_y
.1500	20 30 15	                jsr     js_eoraddrxy
.1503	ad 5c 15	                lda     js_x
.1506	8d 5e 15	                sta     js_oldx
.1509	ad 5d 15	                lda     js_y
.150c	8d 5f 15	                sta     js_oldy
.150f	a9 00		showit          lda     #0
.1511	8d 2f 15	                sta     flag
.1514	8d f5 0b	                sta     addr1
.1517	a9 04		                lda     #$04
.1519	8d f6 0b	                sta     addr1+1
.151c	ae 5c 15	                ldx     js_x
.151f	ac 5d 15	                ldy     js_y
.1522	20 bb 0b	                jsr     xy2addr
.1525	ac f7 0b	                ldy     addr2
.1528	ae f8 0b	                ldx     addr2+1
.152b	20 8a 0a	                jsr pop
.152e	60		                rts
>152f	00		flag            .byte   0
.1530			js_eoraddrxy
.1530	20 4b 0a	                jsr     push
.1533	20 9d 0b	                jsr     savezp2
.1536	a9 04		                lda     #$04
.1538	8d f6 0b	                sta     addr1+1
.153b	a9 00		                lda     #0
.153d	8d f5 0b	                sta     addr1
.1540	20 bb 0b	                jsr     xy2addr
.1543	ac f7 0b	                ldy     addr2
.1546	84 fd		                sty     zpage2
.1548	ae f8 0b	                ldx     addr2+1
.154b	86 fe		                stx     zpage2+1
.154d	a0 00		                ldy     #0
.154f	b1 fd		                lda     (zpage2),y
.1551	49 40		                eor     #%01000000
.1553	91 fd		                sta     (zpage2),y
.1555	20 ac 0b	                jsr     restzp2
.1558	20 8a 0a	                jsr     pop
.155b	60		                rts
>155c	00		js_x            .byte   0
>155d	00		js_y            .byte   0
>155e	ff		js_oldx         .byte   $ff
>155f	ff		js_oldy         .byte   $ff
>1560	00		js_oldcar       .byte   0
>1561	00		js_oldcol       .byte   0
>1562	00 00		js_1pixx        .word   0
>1564	00		js_1pixy        .byte   0
>1565	00		js_1x           .byte   0
>1566	00		js_1y           .byte   0
>1567	00		js_1fire        .byte   0
>1568	00		js_1flag        .byte   0
>1569	00 00		js_1clickx      .word   0
>156b	00		js_1clicky      .byte   0
>156c	00		js_1events      .byte   0
>156d	00 00		js_2pixx        .word   0
>156f	00		js_2pixy        .byte   0
>1570	00		js_2x           .byte   0
>1571	00		js_2y           .byte   0
>1572	00		js_2fire        .byte   0
>1573	00		js_2flag        .byte   0
>1574	00 00		js_2clickx      .word   0
>1576	00		js_2clicky      .byte   0
>1577	00		js_2events      .byte   0
=$03			js_txtcol       =       vcyan
=$00			js_txtbak       =       bkcol0
>1578	03 00 04 05	js_1val8        .byte     js_txtcol,js_txtbak,4,5
>157c	50 0f 12 14	                .text   "Port 1 (x,y):($00,$00) Fire:(0)"
>1580	20 31 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>1590	30 29 20 46 09 12 05 3a 28 30 29
>159b	00		                .byte   0
>159c	03 00 0b 07	js_1val16       .byte   js_txtcol,js_txtbak,11,7
>15a0	28 18 2c 19	                .text   "(x,y):($0000,$0000)"
>15a4	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29
>15b3	00		                .byte   0
>15b4	03 00 04 0a	js_2val8        .byte   js_txtcol,js_txtbak,4,10
>15b8	43 01 12 50	                .text   "CarPos (x,y):($00,$00) Fire:(0)"
>15bc	0f 13 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>15cc	30 29 20 46 09 12 05 3a 28 30 29
>15d7	00		                .byte   0
>15d8	01 00 04 0c	js_2val16a      .byte   vblanc,js_txtbak,4,12
>15dc	43 0c 09 03	                .text   "Click pos."
>15e0	0b 20 10 0f 13 2e
>15e6	00		                .byte   0
>15e7	03 00 10 0c	js_2val16       .byte   js_txtcol,js_txtbak,16,12
>15eb	28 18 2c 19	                .text   "(x,y):($0000,$0000)"
>15ef	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29
>15fe	00		                .byte   0

;******  Return to file: main.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-spriteman.asm

.15ff			sprt_init
.15ff	20 4b 0a	                jsr     push
.1602	ad 54 16	                lda     sprt_ptr
.1605	20 36 17	                jsr     sprt_loadptr
.1608	20 7f 0b	                jsr     savezp1
.160b	20 9d 0b	                jsr     savezp2
.160e	ad 15 d0	                lda     vic+$15 ; enable sprite 2
.1611	09 04		                ora     #%00000100
.1613	8d 15 d0	                sta     vic+$15
.1616	a9 0d		                lda     #$0d
.1618	8d fa 07	                sta     $7fa
.161b	ad 12 1a	                lda     sprt_ptr0
.161e	85 fb		                sta     zpage1
.1620	ad 13 1a	                lda     sprt_ptr0+1
.1623	85 fc		                sta     zpage1+1
.1625	a9 40		                lda     #$40
.1627	85 fd		                sta     zpage2
.1629	a9 03		                lda     #$03
.162b	85 fe		                sta     zpage2+1
.162d	a0 41		                ldy     #65
.162f	b1 fb		                lda     (zpage1),y      ; sprite y offset
.1631	8d 79 17	                sta     sprt_yoffset
.1634	88		                dey
.1635	b1 fb		                lda     (zpage1),y      ; sprite x offset
.1637	8d 78 17	                sta     sprt_xoffset
.163a	88		                dey
.163b	b1 fb		                lda     (zpage1),y      ; sprite color
.163d	8d 29 d0	                sta     $d029
.1640	88		                dey
.1641	a0 3e		                ldy     #62
.1643	b1 fb		nextbyte        lda     (zpage1),y
.1645	91 fd		                sta     (zpage2),y
.1647	88		                dey
.1648	d0 f9		                bne     nextbyte
.164a	20 8e 0b	                jsr     restzp1
.164d	20 ac 0b	                jsr     restzp2
.1650	20 8a 0a	                jsr     pop
.1653	60		                rts
>1654	01		sprt_ptr        .byte   $01
.1655			sprt_calcpos
.1655	20 4b 0a	                jsr     push
.1658	a9 00		                lda     #0
.165a	8d 7b 17	                sta     sprt_x+1
.165d	8d 7d 17	                sta     sprt_y+1
.1660	ad 6e 15	                lda     js_2pixx+1
.1663	18		                clc
.1664	2a		                rol
.1665	2a		                rol
.1666	8d 7b 17	                sta     sprt_x+1
.1669	ad 6d 15	                lda     js_2pixx
.166c	18		                clc
.166d	6d 78 17	                adc     sprt_xoffset
.1670	8d 7a 17	                sta     sprt_x
.1673	90 08		                bcc     norepx
.1675	ad 7b 17	                lda     sprt_x+1
.1678	09 04		                ora     #$04
.167a	8d 7b 17	                sta     sprt_x+1
.167d	ad 6f 15	norepx          lda     js_2pixy
.1680	18		                clc
.1681	6d 79 17	                adc     sprt_yoffset
.1684	8d 7c 17	                sta     sprt_y
.1687	20 8a 0a	                jsr     pop
.168a	60		                rts
.168b			sprt_move
.168b	20 4b 0a	                jsr     push
.168e	20 55 16	                jsr     sprt_calcpos
.1691	ad 7a 17	                lda     sprt_x
.1694	8d 04 d0	                sta     vic+$04
.1697	ad 7b 17	                lda     sprt_x+1
.169a	8d 10 d0	                sta     vic+$10
.169d	ad 7c 17	                lda     sprt_y
.16a0	8d 05 d0	                sta     vic+$05
.16a3	20 aa 16	                jsr     sprt_showpos
.16a6	20 8a 0a	                jsr     pop
.16a9	60		                rts
.16aa			sprt_showpos
.16aa	20 4b 0a	                jsr     push
.16ad	ad 7a 17	                lda     sprt_x
.16b0	20 58 0c	                jsr     a2hex
.16b3	ad 04 0c	                lda     a2hexstr
.16b6	8d 41 1a	                sta     sprite_pos+26
.16b9	ad 05 0c	                lda     a2hexstr+1
.16bc	8d 42 1a	                sta     sprite_pos+27
.16bf	ad 7b 17	                lda     sprt_x+1
.16c2	20 58 0c	                jsr     a2hex
.16c5	ad 04 0c	                lda     a2hexstr
.16c8	8d 3f 1a	                sta     sprite_pos+24
.16cb	ad 05 0c	                lda     a2hexstr+1
.16ce	8d 40 1a	                sta     sprite_pos+25
.16d1	ad 7c 17	                lda     sprt_y
.16d4	20 58 0c	                jsr     a2hex
.16d7	ad 04 0c	                lda     a2hexstr
.16da	8d 47 1a	                sta     sprite_pos+32
.16dd	ad 05 0c	                lda     a2hexstr+1
.16e0	8d 48 1a	                sta     sprite_pos+33
.16e3	a9 00		                lda     #0
.16e5	20 58 0c	                jsr     a2hex
.16e8	ad 04 0c	                lda     a2hexstr
.16eb	8d 45 1a	                sta     sprite_pos+30
.16ee	ad 05 0c	                lda     a2hexstr+1
.16f1	8d 46 1a	                sta     sprite_pos+31
.16f4	a2 27		                ldx     #<sprite_pos
.16f6	a0 1a		                ldy     #>sprite_pos
.16f8	20 a3 0e	                jsr     putscxy
.16fb	20 8a 0a	                jsr     pop
.16fe	60		                rts
.16ff			sprt_loadptr2
.16ff	20 4b 0a	                jsr     push
.1702	aa		                tax
.1703	8e 54 16	                stx     sprt_ptr
.1706	ad 13 1a	                lda     sprt_ptr0+1
.1709	8d 35 17	                sta     calcbuff+1
.170c	ad 12 1a	                lda     sprt_ptr0
.170f	8d 34 17	                sta     calcbuff
.1712	e0 00		                cpx     #0
.1714	f0 11		                beq     addrok
.1716	ad 34 17	                lda     calcbuff
.1719	18		nextx           clc
.171a	69 42		                adc     #66
.171c	90 03		                bcc     nocarry
.171e	ee 35 17	                inc     calcbuff+1
.1721	8d 34 17	nocarry         sta     calcbuff
.1724	ca		                dex
.1725	d0 f2		                bne     nextx
.1727	ac 35 17	addrok          ldy     calcbuff+1
.172a	ae 34 17	                ldx     calcbuff
.172d	20 50 17	                jsr     sprt_setimage
.1730	20 8a 0a	                jsr     pop
.1733	60		                rts
>1734	00 00		calcbuff        .word   $0
.1736			sprt_loadptr
.1736	20 4b 0a	                jsr     push
.1739	ad 54 16	                lda     sprt_ptr
.173c	18		                clc
.173d	2a		                rol
.173e	a8		                tay
.173f	b9 12 1a	                lda     sprt_ptr0,y
.1742	aa		                tax
.1743	b9 13 1a	                lda     sprt_ptr0+1,y
.1746	a8		                tay
.1747	20 50 17	                jsr     sprt_setimage
.174a	20 8a 0a	                jsr     pop
.174d	60		                rts
>174e	00 00		calcbuff        .word   $0
.1750			sprt_setimage
.1750	20 4b 0a	                jsr     push
.1753	20 7f 0b	                jsr     savezp1
.1756	20 9d 0b	                jsr     savezp2
.1759	84 fc		                sty     zpage1+1
.175b	86 fb		                stx     zpage1
.175d	a0 17		                ldy     #>sprt_image
.175f	84 fe		                sty     zpage2+1
.1761	a0 7e		                ldy     #<sprt_image
.1763	84 fd		                sty     zpage2
.1765	a0 42		                ldy     #66
.1767	b1 fb		nextbyte        lda     (zpage1),y
.1769	91 fd		                sta     (zpage2),y
.176b	88		                dey
.176c	d0 f9		                bne     nextbyte
.176e	20 ac 0b	                jsr     restzp2
.1771	20 8e 0b	                jsr     restzp1
.1774	20 8a 0a	                jsr     pop
.1777	60		                rts
>1778	00		sprt_xoffset    .byte   $00
>1779	00		sprt_yoffset    .byte   $00
>177a	00 00		sprt_x          .word   $0000
>177c	00 00		sprt_y          .word   $0000
>177e			sprt_image      .fill 66
>17c0	00 00 00 00	sprt_crxair     .byte $00, $00, $00, $00, $00, $00 ; 6
>17c4	00 00
>17c6	00 66 00 00	                .byte $00, $66, $00, $00, $3c, $00 ; 12
>17ca	3c 00
>17cc	00 18 00 00	                .byte $00, $18, $00, $00, $00, $00 ; 18
>17d0	00 00
>17d2	00 00 00 00	                .byte $00, $00, $00, $00, $18, $00 ; 24
>17d6	18 00
>17d8	80 00 01 c0	                .byte $80, $00, $01, $c0, $18, $03 ; 30
>17dc	18 03
>17de	66 66 66 c0	                .byte $66, $66, $66, $c0, $18, $03 ; 36
>17e2	18 03
>17e4	80 00 01 00	                .byte $80, $00, $01, $00, $18, $00 ; 42
>17e8	18 00
>17ea	00 00 00 00	                .byte $00, $00, $00, $00, $00, $00 ; 48
>17ee	00 00
>17f0	00 18 00 00	                .byte $00, $18, $00, $00, $3c, $00 ; 54
>17f4	3c 00
>17f6	00 66 00 00	                .byte $00, $66, $00, $00, $00, $00 ; 60
>17fa	00 00
>17fc	00 00 00 01	                .byte $00, $00, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>1800	0c 28
>1802	80 00 00 e0	sprt_mouse      .byte $80, $00, $00, $e0, $00, $00 ; 6
>1806	00 00
>1808	b8 00 00 ce	                .byte $b8, $00, $00, $ce, $00, $00 ; 12
>180c	00 00
>180e	83 80 00 c0	                .byte $83, $80, $00, $c0, $e0, $00 ; 18
>1812	e0 00
>1814	80 18 00 c0	                .byte $80, $18, $00, $c0, $3c, $00 ; 24
>1818	3c 00
>181a	80 e0 00 c0	                .byte $80, $e0, $00, $c0, $60, $00 ; 30
>181e	60 00
>1820	98 30 00 fc	                .byte $98, $30, $00, $fc, $18, $00 ; 36
>1824	18 00
>1826	c6 0c 00 03	                .byte $c6, $0c, $00, $03, $06, $00 ; 42
>182a	06 00
>182c	01 9c 00 00	                .byte $01, $9c, $00, $00, $f0, $00 ; 48
>1830	f0 00
>1832	00 40 00 00	                .byte $00, $40, $00, $00, $00, $00 ; 54
>1836	00 00
>1838	00 00 00 00	                .byte $00, $00, $00, $00, $00, $00 ; 60
>183c	00 00
>183e	00 00 00 01	                .byte $00, $00, $00, $01, $18, $31 ; 66, X,X,X color, xoffset, yoffset
>1842	18 31
>1844	00 7c 00 01	sprt_pointer    .byte $00, $7c, $00, $01, $83, $00 ; 6
>1848	83 00
>184a	06 10 c0 08	                .byte $06, $10, $c0, $08, $00, $30 ; 12
>184e	00 30
>1850	12 10 88 20	                .byte $12, $10, $88, $20, $00, $08 ; 18
>1854	00 08
>1856	40 ba 04 40	                .byte $40, $ba, $04, $40, $6c, $04 ; 24
>185a	6c 04
>185c	80 c6 02 aa	                .byte $80, $c6, $02, $aa, $82, $aa ; 30
>1860	82 aa
>1862	80 c6 02 40	                .byte $80, $c6, $02, $40, $6c, $04 ; 36
>1866	6c 04
>1868	40 ba 04 20	                .byte $40, $ba, $04, $20, $00, $08 ; 42
>186c	00 08
>186e	12 10 90 08	                .byte $12, $10, $90, $08, $00, $20 ; 48
>1872	00 20
>1874	06 10 c0 01	                .byte $06, $10, $c0, $01, $83, $00 ; 54
>1878	83 00
>187a	00 7c 00 00	                .byte $00, $7c, $00, $00, $00, $00 ; 60
>187e	00 00
>1880	00 00 00 01	                .byte $00, $00, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>1884	0c 28
>1886	55 55 55 aa	sprt_pointer2   .byte $55, $55, $55, $aa, $aa, $aa ; 6
>188a	aa aa
>188c	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 12
>1890	aa aa
>1892	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 18
>1896	aa aa
>1898	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 24
>189c	00 2a
>189e	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 30
>18a2	00 2a
>18a4	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 36
>18a8	00 2a
>18aa	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 42
>18ae	00 2a
>18b0	54 00 55 aa	                .byte $54, $00, $55, $aa, $aa, $aa ; 48
>18b4	aa aa
>18b6	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 54
>18ba	aa aa
>18bc	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 60
>18c0	aa aa
>18c2	55 55 55 01	                .byte $55, $55, $55, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>18c6	0c 28
>18c8	06 00 00 0f	sprt_hand       .byte $06, $00, $00, $0f, $00, $00 ; 6
>18cc	00 00
>18ce	19 80 00 10	                .byte $19, $80, $00, $10, $80, $00 ; 12
>18d2	80 00
>18d4	19 80 00 16	                .byte $19, $80, $00, $16, $b1, $8c ; 18
>18d8	b1 8c
>18da	10 ca 52 10	                .byte $10, $ca, $52, $10, $84, $21 ; 24
>18de	84 21
>18e0	10 84 21 30	                .byte $10, $84, $21, $30, $84, $21 ; 30
>18e4	84 21
>18e6	50 84 21 90	                .byte $50, $84, $21, $90, $84, $21 ; 36
>18ea	84 21
>18ec	90 00 01 90	                .byte $90, $00, $01, $90, $00, $01 ; 42
>18f0	00 01
>18f2	90 7f c1 90	                .byte $90, $7f, $c1, $90, $00, $01 ; 48
>18f6	00 01
>18f8	40 ff e2 40	                .byte $40, $ff, $e2, $40, $00, $02 ; 54
>18fc	00 02
>18fe	3c 00 04 02	                .byte $3c, $00, $04, $02, $00, $08 ; 60
>1902	00 08
>1904	03 ff f8 01	                .byte $03, $ff, $f8, $01, $12, $31 ; 66, X,X,X color, xoffset, yoffset
>1908	12 31
>190a	00 3e 00 01	sprt_ultraman   .byte $00, $3e, $00, $01, $c1, $c0 ; 6
>190e	c1 c0
>1910	0e 3e 30 08	                .byte $0e, $3e, $30, $08, $41, $08 ; 12
>1914	41 08
>1916	10 1c 04 10	                .byte $10, $1c, $04, $10, $22, $04 ; 18
>191a	22 04
>191c	24 1c 12 23	                .byte $24, $1c, $12, $23, $00, $62 ; 24
>1920	00 62
>1922	20 08 02 47	                .byte $20, $08, $02, $47, $c1, $f1 ; 30
>1926	c1 f1
>1928	6a aa ab 47	                .byte $6a, $aa, $ab, $47, $c9, $f1 ; 36
>192c	c9 f1
>192e	20 08 02 20	                .byte $20, $08, $02, $20, $14, $02 ; 42
>1932	14 02
>1934	20 00 02 10	                .byte $20, $00, $02, $10, $00, $04 ; 48
>1938	00 04
>193a	10 7f 04 08	                .byte $10, $7f, $04, $08, $00, $08 ; 54
>193e	00 08
>1940	06 3e 30 01	                .byte $06, $3e, $30, $01, $c1, $c0 ; 60
>1944	c1 c0
>1946	00 3e 00 01	                .byte $00, $3e, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>194a	0c 28
>194c	00 1c 00 00	sprt_male       .byte $00, $1c, $00, $00, $3e, $00 ; 6
>1950	3e 00
>1952	00 3e 00 00	                .byte $00, $3e, $00, $00, $3e, $00 ; 12
>1956	3e 00
>1958	00 1c 00 00	                .byte $00, $1c, $00, $00, $08, $00 ; 18
>195c	08 00
>195e	00 ff 80 00	                .byte $00, $ff, $80, $00, $ff, $80 ; 24
>1962	ff 80
>1964	00 be 80 00	                .byte $00, $be, $80, $00, $9c, $80 ; 30
>1968	9c 80
>196a	00 88 80 00	                .byte $00, $88, $80, $00, $be, $80 ; 36
>196e	be 80
>1970	00 be 80 01	                .byte $00, $be, $80, $01, $9c, $c0 ; 42
>1974	9c c0
>1976	01 94 c0 00	                .byte $01, $94, $c0, $00, $14, $00 ; 48
>197a	14 00
>197c	00 14 00 00	                .byte $00, $14, $00, $00, $14, $00 ; 54
>1980	14 00
>1982	00 36 00 00	                .byte $00, $36, $00, $00, $77, $00 ; 60
>1986	77 00
>1988	00 77 00 01	                .byte $00, $77 ,$00, $01, $0c, $2f ; 66, X,X,X color, xoffset, yoffset
>198c	0c 2f
>198e	00 3c 00 00	sprt_robot      .byte $00, $3c, $00, $00, $24, $00 ; 6
>1992	24 00
>1994	00 66 18 00	                .byte $00, $66, $18, $00, $66, $38 ; 12
>1998	66 38
>199a	00 24 38 00	                .byte $00, $24, $38, $00, $3c, $10 ; 18
>199e	3c 10
>19a0	00 18 10 00	                .byte $00, $18, $10, $00, $18, $10 ; 24
>19a4	18 10
>19a6	0f ff f0 08	                .byte $0f, $ff, $f0, $08, $7e, $00 ; 30
>19aa	7e 00
>19ac	08 7e 00 08	                .byte $08, $7e, $00, $08, $18, $00 ; 36
>19b0	18 00
>19b2	1c 18 00 1c	                .byte $1c, $18, $00, $1c, $18, $00 ; 42
>19b6	18 00
>19b8	18 3c 00 00	                .byte $18, $3c, $00, $00, $3c, $00 ; 48
>19bc	3c 00
>19be	00 24 00 00	                .byte $00, $24, $00, $00, $24, $00 ; 54
>19c2	24 00
>19c4	00 24 00 03	                .byte $00, $24, $00, $03, $e7, $c0 ; 60
>19c8	e7 c0
>19ca	03 e7 c0 01	                .byte $03, $e7, $c0, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>19ce	0c 28
>19d0	00 1c 00 00	sprt_femme      .byte $00, $1c, $00, $00, $3e, $00 ; 6
>19d4	3e 00
>19d6	00 3e 00 00	                .byte $00, $3e, $00, $00, $3e, $00 ; 12
>19da	3e 00
>19dc	00 1c 00 00	                .byte $00, $1c, $00, $00, $08, $00 ; 18
>19e0	08 00
>19e2	00 7f 00 00	                .byte $00, $7f, $00, $00, $ff, $80 ; 24
>19e6	ff 80
>19e8	00 be 80 00	                .byte $00, $be, $80, $00, $9c, $80 ; 30
>19ec	9c 80
>19ee	00 88 80 00	                .byte $00, $88, $80, $00, $9c, $80 ; 36
>19f2	9c 80
>19f4	00 be 80 01	                .byte $00, $be, $80, $01, $be, $c0 ; 42
>19f8	be c0
>19fa	01 be c0 00	                .byte $01, $be, $c0, $00, $7f, $00 ; 48
>19fe	7f 00
>1a00	00 7f 00 00	                .byte $00, $7f, $00, $00, $ff, $80 ; 54
>1a04	ff 80
>1a06	00 36 00 00	                .byte $00, $36, $00, $00, $77, $00 ; 60
>1a0a	77 00
>1a0c	00 55 00 01	                .byte $00, $55 ,$00, $01, $0c, $2f ; 66, X,X,X color, xoffset, yoffset
>1a10	0c 2f
>1a12	7e 17		sprt_ptr0       .word  sprt_image + (0*66)
>1a14	c0 17		sprt_ptr1       .word  sprt_image + (1*66)
>1a16	02 18		sprt_ptr2       .word  sprt_image + (2*66)
>1a18	44 18		sprt_ptr3       .word  sprt_image + (3*66)
>1a1a	86 18		sprt_ptr4       .word  sprt_image + (4*66)
>1a1c	c8 18		sprt_ptr5       .word  sprt_image + (5*66)
>1a1e	0a 19		sprt_ptr6       .word  sprt_image + (6*66)
>1a20	4c 19		sprt_ptr7       .word  sprt_image + (7*66)
>1a22	8e 19		sprt_ptr8       .word  sprt_image + (8*66)
>1a24	d0 19		sprt_ptr9       .word  sprt_image + (9*66)
>1a26	ff		testbyte        .byte 255
=$07			sprt_txtcol     =       vjaune
=$00			sprt_txtbak     =       bkcol0
=$01			sprt_color      =       vwhite
>1a27	07 00 04 0e	sprite_pos      .byte   sprt_txtcol,sprt_txtbak,4,14
>1a2b	53 10 12 09	                .text       "Sprite pos. (x,y):($0000,$0000)"
>1a2f	14 05 20 10 0f 13 2e 20 28 18 2c 19 29 3a 28 24
>1a3f	30 30 30 30 2c 24 30 30 30 30 29
>1a4a	00		                .byte   0

;******  Return to file: main.asm


;******  End of listing

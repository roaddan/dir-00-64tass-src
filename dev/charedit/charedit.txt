
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Fri Nov 17 16:07:20 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm

="20231116-100400"	version  = "20231116-100400"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

=18			fkeyleft       =    18
=9			f1top          =    9
=$0400			scrnnewram     =    $0400
=12			charsdef       =    12
=9			grid_top       =    9
=1			grid_left      =    1
=16			grid_bot       =    grid_top + 7
=8			grid_right     =    grid_left + 7
=$0b			bordure        =    vgris
=$00			fond           =    vnoir
=$03			mesgcol        =    vcyan
=$03			menu1col1      =    vcyan
=$0e			menu1col2      =    vbleu1
=$0d			menu2col1      =    vvert1
=$05			menu2col2      =    vvert
=$01			flashcol       =    vblanc
=$07			whoamicol      =    vjaune
=$01			charcolor      =    vblanc
=$0f			charscolor     =    vgris2
.080d			main
.080d	20 4f 20	               jsr  push
.0810	20 21 1f	               jsr  scrmaninit
.0813	08		               php
.0814	48		               pha
.0815	a9 08		               lda  #$08
.0817	20 d2 ff	               jsr  $ffd2
.081a	68		               pla
.081b	28		               plp
.081c	20 7f 09	               jsr  drawcredits
.081f			wait
.081f	20 07 1f	               jsr  screendis
.0822	20 2d 0f	               jsr  copycharset
.0825	20 41 1f	               jsr  cls
.0828	20 17 0f	               jsr  setscreenptr
.082b	20 de 09	               jsr  setdefaultchar
.082e	20 8e 0f	               jsr  staticscreen
.0831	20 5a 0e	               jsr  drawbitmap
.0834	a9 00		               lda  #$00
.0836	8d 86 08	               sta  fkeyset
.0839	20 ca 0f	               jsr  drawfkeys
.083c	a9 00		               lda  #$00
.083e	20 14 1f	               jsr  screenena
.0841	20 ef 0b	               jsr  keyaction
.0844	20 41 1f	               jsr  cls
.0847	20 7f 09	               jsr  drawcredits
.084a	a2 dc		               ldx #<bye_msg
.084c	a0 1c		               ldy #>bye_msg
.084e	20 e7 1f	               jsr putscxy
.0851	a2 fe		               ldx #<any_msg
.0853	a0 1c		               ldy #>any_msg
.0855	20 e7 1f	               jsr putscxy
.0858	20 6f 24	               jsr  getkey
.085b	20 41 1f	               jsr  cls
.085e	20 8e 20	               jsr  pop
.0861	60		               rts
.0862			savefile
.0862	20 4f 20	               jsr  push
.0865	20 8e 20	               jsr  pop
.0868	60		               rts
>0869	05 1b 03 12	pfname         .byte     vvert,27,3,18
>086d	40 30 3a	fname          .text     "@0:"
>0870	3f 3f 3f 3f	name           .text     "??????"
>0874	3f 3f
>0876	2e 43 48 52	ext            .null     ".chr"
>087a	00
>087b	92 00		device         .byte     146,0
>087d	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>0881	08 04 02 01
>0885	00		editmode       .byte     0
>0886	00		fkeyset        .byte     0
>0887	00		currentchar    .byte     0
>0888	00		currentkey     .byte     0
>0889	00		previouskey    .byte     0
>088a	00		bitmapoffset   .byte     0
>088b	00 00		mapaddr        .word     0
>088d	00 00		byteaddr       .word     0
>088f	00 00		gridaddr       .word     0
>0891	09		cursln         .byte     grid_top
>0892	01		curscl         .byte     grid_left

;******  Processing file: routines.asm

.0893			template
.0893	20 4f 20	               jsr  push
.0896	20 8e 20	               jsr  pop
.0899	60		               rts
.089a			getfname
.089a	20 4f 20	               jsr  push
.089d	20 4f 20	               jsr  push
.08a0	a2 df		               ldx  #<blankmsg
.08a2	a0 18		               ldy  #>blankmsg
.08a4	20 e7 1f	               jsr  putscxy
.08a7	a2 09		               ldx  #<fname_msg
.08a9	a0 1b		               ldy  #>fname_msg
.08ab	20 e7 1f	               jsr  putscxy
.08ae	20 8e 20	               jsr  pop
.08b1	a2 00		               ldx  #$00
.08b3	8e e7 08	               stx  count
.08b6	20 e8 08	getanother     jsr  getalphanum
.08b9	20 58 1f	               jsr  putch
.08bc	ae e7 08	               ldx  count
.08bf	9d 70 08	               sta  name,x
.08c2	ee e7 08	               inc  count
.08c5	ae e7 08	               ldx  count
.08c8	e0 06		               cpx  #$06
.08ca	f0 03		               beq  finish
.08cc	4c b6 08	               jmp  getanother
.08cf			finish
.08cf	20 4f 20	               jsr  push
.08d2	a2 df		               ldx  #<blankmsg
.08d4	a0 18		               ldy  #>blankmsg
.08d6	20 e7 1f	               jsr  putscxy
.08d9	a2 69		               ldx  #<pfname
.08db	a0 08		               ldy  #>pfname
.08dd	20 e7 1f	               jsr  putscxy
.08e0	20 8e 20	               jsr  pop
.08e3	20 8e 20	               jsr  pop
.08e6	60		               rts
>08e7	00		count          .byte     0
.08e8			getalphanum
.08e8	20 4f 20	               jsr  push
.08eb	20 6f 24	getanother     jsr  getkey
.08ee	c9 30		               cmp  #$30      ; 0
.08f0	30 f9		               bmi  getanother
.08f2	c9 3a		               cmp  #$3a      ; 9+1
.08f4	30 0b		               bmi  goodone
.08f6	c9 41		isitletter     cmp  #$41      ; A
.08f8	30 f1		               bmi  getanother
.08fa	c9 5b		               cmp  #$5b      ; Z+1
.08fc	30 03		               bmi  goodone
.08fe	4c eb 08	               jmp  getanother
.0901	8d 0b 09	goodone        sta  tempbyte
.0904	20 8e 20	               jsr  pop
.0907	ad 0b 09	               lda  tempbyte
.090a	60		               rts
>090b	00		tempbyte       .byte     0
.090c			copychar
.090c	20 4f 20	               jsr  push
.090f	20 48 09	               jsr  getvalidkey
.0912	ad 8c 0f	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0915	85 fb		               sta  zpage1
.0917	ad 8d 0f	               lda  bitmapaddr+1
.091a	85 fc		               sta  zpage1+1
.091c	ae 7e 09	               ldx  copykey
.091f	bd 4a 23	               lda  asciitorom,x
.0922	aa		               tax
.0923	e0 00		               cpx  #$00
.0925	f0 08		               beq  no_offset      ; sommes nous déja à 0
.0927	a9 08		addagain       lda  #$08
.0929	20 26 11	               jsr  zp1addnum      ; on augmente de 8 byte ...
.092c	ca		               dex                 ; pour chaque caracteres
.092d	d0 f8		               bne  addagain
.092f	ad 8b 08	no_offset      lda  mapaddr        ; le caractere actuel
.0932	85 fd		               sta  zpage2         ;
.0934	ad 8c 08	               lda  mapaddr+1      ;
.0937	85 fe		               sta  zpage2+1       ;
.0939	a0 00		               ldy  #$00
.093b	b1 fb		nextbyte       lda  (zpage1),y
.093d	91 fd		               sta  (zpage2),y
.093f	c8		               iny
.0940	c0 08		               cpy  #$08
.0942	d0 f7		               bne  nextbyte
.0944	20 8e 20	out            jsr  pop
.0947	60		               rts
.0948			getvalidkey
.0948	20 4f 20	               jsr  push
.094b	20 4f 20	               jsr  push
.094e	a2 df		               ldx  #<blankmsg
.0950	a0 18		               ldy  #>blankmsg
.0952	20 e7 1f	               jsr  putscxy
.0955	a2 e0		               ldx  #<copychar_msg
.0957	a0 1a		               ldy  #>copychar_msg
.0959	20 e7 1f	               jsr  putscxy
.095c	20 8e 20	               jsr  pop
.095f	20 6f 24	getgoodkey     jsr  getkey
.0962	8d 7e 09	               sta  copykey
.0965	aa		               tax
.0966	bc 4a 23	               ldy  asciitorom,x
.0969	c4 00		               cpy  $00
.096b	d0 0a		               bne  goodone
.096d	ae 7e 09	               ldx  copykey
.0970	e0 40		               cpx  #$40
.0972	f0 03		               beq  goodone
.0974	4c 5f 09	               jmp  getgoodkey
.0977	20 58 1f	goodone        jsr  putch
.097a	20 8e 20	               jsr  pop
.097d	60		               rts
>097e	00		copykey        .byte 0
.097f			drawcredits
.097f	20 4f 20	               jsr  push
.0982	20 41 1f	               jsr  cls
.0985	a2 68		               ldx #<whoami0
.0987	a0 1b		               ldy #>whoami0
.0989	20 e7 1f	               jsr putscxy
.098c	a2 8d		               ldx #<whoami1
.098e	a0 1b		               ldy #>whoami1
.0990	20 e7 1f	               jsr putscxy
.0993	a2 b4		               ldx #<whoami2
.0995	a0 1b		               ldy #>whoami2
.0997	20 e7 1f	               jsr putscxy
.099a	a2 d9		               ldx #<whoami3
.099c	a0 1b		               ldy #>whoami3
.099e	20 e7 1f	               jsr putscxy
.09a1	a2 fe		               ldx #<whoami4
.09a3	a0 1b		               ldy #>whoami4
.09a5	20 e7 1f	               jsr putscxy
.09a8	a2 23		               ldx #<whoami5
.09aa	a0 1c		               ldy #>whoami5
.09ac	20 e7 1f	               jsr putscxy
.09af	a2 48		               ldx #<whoami6
.09b1	a0 1c		               ldy #>whoami6
.09b3	20 e7 1f	               jsr putscxy
.09b6	a2 6d		               ldx #<whoami7
.09b8	a0 1c		               ldy #>whoami7
.09ba	20 e7 1f	               jsr putscxy
.09bd	a2 92		               ldx #<whoami8
.09bf	a0 1c		               ldy #>whoami8
.09c1	20 e7 1f	               jsr putscxy
.09c4	a2 b7		               ldx #<whoami9
.09c6	a0 1c		               ldy #>whoami9
.09c8	20 e7 1f	               jsr putscxy
.09cb	20 44 11	               jsr  delay
.09ce	20 44 11	               jsr  delay
.09d1	20 44 11	               jsr  delay
.09d4	20 44 11	               jsr  delay
.09d7	20 44 11	               jsr  delay
.09da	20 8e 20	               jsr  pop
.09dd	60		               rts
.09de			setdefaultchar
.09de	20 4f 20	               jsr  push
.09e1	a9 40		               lda  #$40
.09e3	8d 88 08	               sta  currentkey
.09e6	aa		               tax
.09e7	bc 4a 23	               ldy  asciitorom,x
.09ea	8c 8a 08	               sty  bitmapoffset
.09ed	20 a8 0a	               jsr  drawkeyval
.09f0	20 5a 0e	               jsr  drawbitmap
.09f3	20 4f 20	               jsr  push
.09f6	a2 0d		               ldx  #13
.09f8	a0 0c		               ldy  #12
.09fa	20 78 1f	               jsr  gotoxy
.09fd	20 8e 20	               jsr  pop
.0a00	20 58 1f	               jsr  putch
.0a03	20 4f 20	               jsr  push
.0a06	a2 11		               ldx  #17
.0a08	a0 05		               ldy  #5
.0a0a	20 78 1f	               jsr  gotoxy
.0a0d	20 8e 20	               jsr  pop
.0a10	20 15 23	               jsr  atodec
.0a13	20 4f 20	               jsr  push
.0a16	a2 19		isx            ldx  #<adec
.0a18	a0 22		isy            ldy  #>adec
.0a1a	20 5e 1f	               jsr  puts
.0a1d	20 8e 20	               jsr  pull
.0a20	20 8e 20	               jsr  pop
.0a23	60		               rts
.0a24			resetmenuacolor
.0a24	20 4f 20	               jsr  push
.0a27	a9 03		               lda  #menu1col1
.0a29	8d 57 1d	               sta  f1abutton
.0a2c	8d 8d 1d	               sta  f3abutton
.0a2f	8d c3 1d	               sta  f5abutton
.0a32	8d f9 1d	               sta  f7abutton
.0a35	a9 0e		               lda  #menu1col2
.0a37	8d 72 1d	               sta  f2abutton
.0a3a	8d a8 1d	               sta  f4abutton
.0a3d	8d de 1d	               sta  f6abutton
.0a40	8d 14 1e	               sta  f8abutton
.0a43	20 8e 20	               jsr  pop
.0a46	60		               rts
.0a47			resetmenubcolor
.0a47	20 4f 20	               jsr  push
.0a4a	a9 0d		               lda  #menu2col1
.0a4c	8d 2f 1e	               sta  f1bbutton
.0a4f	8d 65 1e	               sta  f3bbutton
.0a52	8d 9b 1e	               sta  f5bbutton
.0a55	8d d1 1e	               sta  f7bbutton
.0a58	a9 0d		               lda  #menu2col1
.0a5a	8d 4a 1e	               sta  f2bbutton
.0a5d	8d 80 1e	               sta  f4bbutton
.0a60	8d b6 1e	               sta  f6bbutton
.0a63	8d ec 1e	               sta  f8bbutton
.0a66	20 8e 20	               jsr  pop
.0a69	60		               rts
.0a6a			setmenuacolor
.0a6a	20 4f 20	               jsr  push
.0a6d	8d 57 1d	               sta  f1abutton
.0a70	8d 72 1d	               sta  f2abutton
.0a73	8d 8d 1d	               sta  f3abutton
.0a76	8d a8 1d	               sta  f4abutton
.0a79	8d c3 1d	               sta  f5abutton
.0a7c	8d de 1d	               sta  f6abutton
.0a7f	8d f9 1d	               sta  f7abutton
.0a82	8d 14 1e	               sta  f8abutton
.0a85	20 8e 20	               jsr  pop
.0a88	60		               rts
.0a89			setmenubcolor
.0a89	20 4f 20	               jsr  push
.0a8c	8d 2f 1e	               sta  f1bbutton
.0a8f	8d 4a 1e	               sta  f2bbutton
.0a92	8d 65 1e	               sta  f3bbutton
.0a95	8d 80 1e	               sta  f4bbutton
.0a98	8d 9b 1e	               sta  f5bbutton
.0a9b	8d b6 1e	               sta  f6bbutton
.0a9e	8d d1 1e	               sta  f7bbutton
.0aa1	8d ec 1e	               sta  f8bbutton
.0aa4	20 8e 20	               jsr  pop
.0aa7	60		               rts
.0aa8			drawkeyval
.0aa8	20 4f 20	               jsr  push
.0aab	20 4f 20	               jsr  push
.0aae	a2 01		               ldx  #1
.0ab0	a0 13		               ldy  #19
.0ab2	20 78 1f	               jsr  gotoxy
.0ab5	20 8e 20	               jsr  pop
.0ab8	ad 88 08	               lda  currentkey
.0abb	20 58 1f	               jsr  putch
.0abe	48		               pha
.0abf	a9 3d		               lda  #'='
.0ac1	20 58 1f	               jsr  putch
.0ac4	a9 25		               lda  #'%'
.0ac6	20 58 1f	               jsr  putch
.0ac9	68		               pla
.0aca	20 db 22	               jsr  putabin
.0acd	20 4f 20	               jsr  push
.0ad0	a2 01		               ldx  #1
.0ad2	a0 14		               ldy  #20
.0ad4	20 78 1f	               jsr  gotoxy
.0ad7	20 8e 20	               jsr  pop
.0ada	20 4f 20	               jsr  push
.0add	a2 a9		isx            ldx  #<txt1
.0adf	a0 0b		isy            ldy  #>txt1
.0ae1	20 5e 1f	               jsr  puts
.0ae4	20 8e 20	               jsr  pull
.0ae7	a9 24		               lda  #'$'
.0ae9	20 58 1f	               jsr  putch
.0aec	ad 88 08	               lda  currentkey
.0aef	20 48 22	               jsr  putahex
.0af2	20 4f 20	               jsr  push
.0af5	a2 01		               ldx  #1
.0af7	a0 15		               ldy  #21
.0af9	20 78 1f	               jsr  gotoxy
.0afc	20 8e 20	               jsr  pop
.0aff	20 4f 20	               jsr  push
.0b02	a2 b4		isx            ldx  #<txt2
.0b04	a0 0b		isy            ldy  #>txt2
.0b06	20 5e 1f	               jsr  puts
.0b09	20 8e 20	               jsr  pull
.0b0c	a9 24		               lda  #'$'
.0b0e	20 58 1f	               jsr  putch
.0b11	ad 8d 0f	               lda  bitmapaddr+1
.0b14	20 48 22	               jsr  putahex
.0b17	ad 8c 0f	               lda  bitmapaddr
.0b1a	20 48 22	               jsr  putahex
.0b1d	20 4f 20	               jsr  push
.0b20	a2 01		               ldx  #1
.0b22	a0 16		               ldy  #22
.0b24	20 78 1f	               jsr  gotoxy
.0b27	20 8e 20	               jsr  pop
.0b2a	20 4f 20	               jsr  push
.0b2d	a2 bf		isx            ldx  #<txt3
.0b2f	a0 0b		isy            ldy  #>txt3
.0b31	20 5e 1f	               jsr  puts
.0b34	20 8e 20	               jsr  pull
.0b37	a9 24		               lda  #'$'
.0b39	20 58 1f	               jsr  putch
.0b3c	ad 8a 08	               lda  bitmapoffset
.0b3f	20 48 22	               jsr  putahex
.0b42	20 4f 20	               jsr  push
.0b45	a2 01		               ldx  #1
.0b47	a0 17		               ldy  #23
.0b49	20 78 1f	               jsr  gotoxy
.0b4c	20 8e 20	               jsr  pop
.0b4f	20 4f 20	               jsr  push
.0b52	a2 cc		isx            ldx  #<txt4
.0b54	a0 0b		isy            ldy  #>txt4
.0b56	20 5e 1f	               jsr  puts
.0b59	20 8e 20	               jsr  pull
.0b5c	a9 24		               lda  #'$'
.0b5e	20 58 1f	               jsr  putch
.0b61	ad 8c 08	               lda  mapaddr+1
.0b64	20 48 22	               jsr  putahex
.0b67	ad 8b 08	               lda  mapaddr
.0b6a	20 48 22	               jsr  putahex
.0b6d	20 4f 20	               jsr  push
.0b70	a2 01		               ldx  #1
.0b72	a0 18		               ldy  #24
.0b74	20 78 1f	               jsr  gotoxy
.0b77	20 8e 20	               jsr  pop
.0b7a	20 4f 20	               jsr  push
.0b7d	a2 d7		isx            ldx  #<txt5
.0b7f	a0 0b		isy            ldy  #>txt5
.0b81	20 5e 1f	               jsr  puts
.0b84	20 8e 20	               jsr  pull
.0b87	ad 92 08	               lda  curscl
.0b8a	20 48 22	               jsr  putahex
.0b8d	a9 da		               lda  #$da
.0b8f	20 58 1f	               jsr  putch
.0b92	ad 91 08	               lda  cursln
.0b95	20 48 22	               jsr  putahex
.0b98	20 8e 20	               jsr  pop
.0b9b	60		               rts
>0b9c	50 45 54 53	txt0           .null     "petscii :   "
>0ba0	43 49 49 20 3a 20 20 20 00
>0ba9	4b 45 59 20	txt1           .null     "key code: "
>0bad	43 4f 44 45 3a 20 00
>0bb4	42 49 54 4d	txt2           .null     "bitmap..: "
>0bb8	41 50 2e 2e 3a 20 00
>0bbf	4f 46 46 53	txt3           .null     "offset..:   "
>0bc3	45 54 2e 2e 3a 20 20 20 00
>0bcc	4d 41 50 41	txt4           .null     "mapaddr.: "
>0bd0	44 44 52 2e 3a 20 00
>0bd7	43 55 52 53	txt5           .null     "cursval.: "
>0bdb	56 41 4c 2e 3a 20 00
>0be2	53 54 41 43	txt6           .null     "stack......:"
>0be6	4b 2e 2e 2e 2e 2e 2e 3a 00
.0bef			keyaction
.0bef	20 4f 20	               jsr  push
.0bf2	20 6f 24	loop           jsr  getkey
.0bf5	c9 85		f1             cmp  #key_f1
.0bf7	d0 03		               bne  f2
.0bf9	4c 74 0c	               jmp  dof1
.0bfc	c9 89		f2             cmp  #key_f2
.0bfe	d0 03		               bne  f3
.0c00	4c 7a 0c	               jmp  dof2
.0c03	c9 86		f3             cmp  #key_f3
.0c05	d0 03		               bne  f4
.0c07	4c 80 0c	               jmp  dof3
.0c0a	c9 8a		f4             cmp  #key_f4
.0c0c	d0 03		               bne  f5
.0c0e	4c 86 0c	               jmp  dof4
.0c11	c9 87		f5             cmp  #key_f5
.0c13	d0 03		               bne  f6
.0c15	4c 8c 0c	               jmp  dof5
.0c18	c9 8b		f6             cmp  #key_f6
.0c1a	d0 03		               bne  f7
.0c1c	4c 92 0c	               jmp  dof6
.0c1f	c9 88		f7             cmp  #key_f7
.0c21	d0 03		               bne  f8
.0c23	4c 98 0c	               jmp  dof7
.0c26	c9 8c		f8             cmp  #key_f8
.0c28	d0 03		               bne  ctrlx
.0c2a	4c 9e 0c	               jmp  dof8
.0c2d	c9 18		ctrlx          cmp  #ctrl_x
.0c2f	d0 03		               bne  ishex14
.0c31	4c a4 0c	               jmp  doquit
.0c34	c9 14		ishex14        cmp  #$14
.0c36	d0 03		               bne  ishex12
.0c38	4c f2 0b	               jmp  loop
.0c3b	c9 12		ishex12        cmp  #$12
.0c3d	d0 03		               bne  reste
.0c3f	4c f2 0b	               jmp  loop
.0c42			reste
.0c42	20 4f 20	               jsr  push
.0c45	a2 0d		               ldx  #13
.0c47	a0 0c		               ldy  #12
.0c49	20 78 1f	               jsr  gotoxy
.0c4c	20 8e 20	               jsr  pop
.0c4f	c9 20		               cmp  #32
.0c51	10 03		               bpl  ok
.0c53	4c f2 0b	               jmp  loop
.0c56	20 58 1f	ok             jsr  putch
.0c59	48		               pha
.0c5a	ad 88 08	               lda  currentkey
.0c5d	8d 89 08	               sta  previouskey
.0c60	68		               pla
.0c61	8d 88 08	               sta  currentkey
.0c64	aa		               tax
.0c65	bc 4a 23	               ldy  asciitorom,x
.0c68	8c 8a 08	               sty  bitmapoffset
.0c6b	20 a8 0a	               jsr  drawkeyval
.0c6e	20 5a 0e	               jsr  drawbitmap
.0c71	4c f2 0b	               jmp  loop
.0c74	20 5a 11	dof1           jsr  f1action  ;edit/reverse
.0c77	4c f2 0b	               jmp  loop
.0c7a	20 4d 12	dof2           jsr  f2action  ;save/flip vert
.0c7d	4c f2 0b	               jmp  loop
.0c80	20 05 13	dof3           jsr  f3action  ;load/flip horz
.0c83	4c f2 0b	               jmp  loop
.0c86	20 ce 13	dof4           jsr  f4action  ;copy/scroll r
.0c89	4c f2 0b	               jmp  loop
.0c8c	20 97 14	dof5           jsr  f5action  ;clear/scroll l
.0c8f	4c f2 0b	               jmp  loop
.0c92	20 4f 15	dof6           jsr  f6action  ;fill;/scroll up
.0c95	4c f2 0b	               jmp  loop
.0c98	20 07 16	dof7           jsr  f7action  ;clear;/scroll down
.0c9b	4c f2 0b	               jmp  loop
.0c9e	20 c4 16	dof8           jsr  f8action  ; function
.0ca1	4c f2 0b	               jmp  loop
.0ca4	20 8e 20	doquit         jsr  pop
.0ca7	60		               rts
.0ca8			editor
.0ca8	20 4f 20	               jsr  push
.0cab	20 4f 20	               jsr  push
.0cae	a2 df		               ldx  #<blankmsg
.0cb0	a0 18		               ldy  #>blankmsg
.0cb2	20 e7 1f	               jsr  putscxy
.0cb5	a2 53		               ldx  #<exit_msg
.0cb7	a0 1b		               ldy  #>exit_msg
.0cb9	20 e7 1f	               jsr  putscxy
.0cbc	20 8e 20	               jsr  pop
.0cbf	20 4f 20	               jsr  push
.0cc2	a2 df		               ldx  #<blankmsg
.0cc4	a0 18		               ldy  #>blankmsg
.0cc6	20 e7 1f	               jsr  putscxy
.0cc9	a2 26		               ldx  #<edit_msg
.0ccb	a0 19		               ldy  #>edit_msg
.0ccd	20 e7 1f	               jsr  putscxy
.0cd0	20 8e 20	               jsr  pop
.0cd3	20 16 0e	               jsr  setcurs
.0cd6	ad 88 08	               lda  currentkey
.0cd9	20 4f 20	               jsr  push
.0cdc	a2 11		               ldx  #17
.0cde	a0 05		               ldy  #5
.0ce0	20 78 1f	               jsr  gotoxy
.0ce3	20 8e 20	               jsr  pop
.0ce6	20 15 23	               jsr  atodec
.0ce9	20 4f 20	               jsr  push
.0cec	a2 19		isx            ldx  #<adec
.0cee	a0 22		isy            ldy  #>adec
.0cf0	20 5e 1f	               jsr  puts
.0cf3	20 8e 20	               jsr  pull
.0cf6	20 5a 0e	               jsr  drawbitmap
.0cf9	20 6f 24	ed_loop        jsr  getkey
.0cfc	c9 85		f1             cmp  #f1key
.0cfe	d0 03		               bne  cu
.0d00	4c e8 0d	               jmp  do_ctrlx
.0d03	c9 91		cu             cmp  #cursu
.0d05	d0 03		               bne  cd
.0d07	4c 93 0d	               jmp  do_up
.0d0a	c9 11		cd             cmp  #cursd
.0d0c	d0 03		               bne  cl
.0d0e	4c a6 0d	               jmp  do_down
.0d11	c9 9d		cl             cmp  #cursl
.0d13	d0 03		               bne  cr
.0d15	4c b9 0d	               jmp  do_left
.0d18	c9 1d		cr             cmp  #cursr
.0d1a	d0 03		               bne  cx
.0d1c	4c cc 0d	               jmp  do_right
.0d1f	c9 18		cx             cmp  #ctrl_x
.0d21	d0 03		               bne  sp
.0d23	4c e8 0d	               jmp  do_ctrlx
.0d26	c9 20		sp             cmp  #$20
.0d28	d0 03		               bne  ishex14
.0d2a	4c df 0d	               jmp  do_swap
.0d2d	c9 14		ishex14        cmp  #$14
.0d2f	d0 03		               bne  ishex12
.0d31	4c df 0d	               jmp  do_swap
.0d34	c9 12		ishex12        cmp  #$12
.0d36	d0 03		               bne  rest
.0d38	4c df 0d	               jmp  do_swap
.0d3b			rest
.0d3b	20 4f 20	               jsr  push
.0d3e	a2 0d		               ldx  #13
.0d40	a0 0c		               ldy  #12
.0d42	20 78 1f	               jsr  gotoxy
.0d45	20 8e 20	               jsr  pop
.0d48	20 58 1f	               jsr  putch
.0d4b	48		               pha
.0d4c	ad 88 08	               lda  currentkey
.0d4f	8d 89 08	               sta  previouskey
.0d52	68		               pla
.0d53	8d 88 08	               sta  currentkey
.0d56	aa		               tax
.0d57	bc 4a 23	               ldy  asciitorom,x
.0d5a	8c 8a 08	               sty  bitmapoffset
.0d5d	20 a8 0a	               jsr  drawkeyval
.0d60	20 5a 0e	               jsr  drawbitmap
.0d63	20 4f 20	               jsr  push
.0d66	a2 0d		               ldx  #13
.0d68	a0 0c		               ldy  #12
.0d6a	20 78 1f	               jsr  gotoxy
.0d6d	20 8e 20	               jsr  pop
.0d70	20 58 1f	               jsr  putch
.0d73	20 4f 20	               jsr  push
.0d76	a2 11		               ldx  #17
.0d78	a0 05		               ldy  #5
.0d7a	20 78 1f	               jsr  gotoxy
.0d7d	20 8e 20	               jsr  pop
.0d80	20 15 23	               jsr  atodec
.0d83	20 4f 20	               jsr  push
.0d86	a2 19		isx            ldx  #<adec
.0d88	a0 22		isy            ldy  #>adec
.0d8a	20 5e 1f	               jsr  puts
.0d8d	20 8e 20	               jsr  pull
.0d90	4c e5 0d	               jmp  totop
.0d93	ad 91 08	do_up          lda  cursln
.0d96	c9 09		               cmp  #grid_top
.0d98	f0 4b		               beq  totop
.0d9a	20 38 0e	               jsr  clrcurs
.0d9d	ce 91 08	               dec  cursln
.0da0	20 16 0e	               jsr  setcurs
.0da3	4c e5 0d	               jmp  totop
.0da6	ad 91 08	do_down        lda  cursln
.0da9	c9 10		               cmp  #grid_bot
.0dab	f0 38		               beq  totop
.0dad	20 38 0e	               jsr  clrcurs
.0db0	ee 91 08	               inc  cursln
.0db3	20 16 0e	               jsr  setcurs
.0db6	4c e5 0d	               jmp  totop
.0db9	ad 92 08	do_left        lda  curscl
.0dbc	c9 01		               cmp  #grid_left
.0dbe	f0 25		               beq  totop
.0dc0	20 38 0e	               jsr  clrcurs
.0dc3	ce 92 08	               dec  curscl
.0dc6	20 16 0e	               jsr  setcurs
.0dc9	4c e5 0d	               jmp  totop
.0dcc	ad 92 08	do_right       lda  curscl
.0dcf	c9 08		               cmp  #grid_right
.0dd1	f0 12		               beq  totop
.0dd3	20 38 0e	               jsr  clrcurs
.0dd6	ee 92 08	               inc  curscl
.0dd9	20 16 0e	               jsr  setcurs
.0ddc	4c e5 0d	               jmp  totop
.0ddf	20 ef 0d	do_swap        jsr  do_eor
.0de2	20 5a 0e	               jsr  drawbitmap
.0de5	4c f9 0c	totop          jmp  ed_loop
.0de8	20 38 0e	do_ctrlx       jsr  clrcurs
.0deb	20 8e 20	               jsr  pop
.0dee	60		               rts
.0def			do_eor
.0def	20 4f 20	               jsr  push
.0df2	ad 8b 08	               lda  mapaddr
.0df5	85 fd		               sta  zpage2
.0df7	ad 8c 08	               lda  mapaddr+1
.0dfa	85 fe		               sta  zpage2+1
.0dfc	ae 91 08	               ldx  cursln     ; calcul de
.0dff	ca		               dex            ; l'offset de
.0e00	8a		               txa            ; la
.0e01	29 f7		               and  #$f7      ; ligne
.0e03	a8		               tay
.0e04	ae 92 08	               ldx  curscl
.0e07	ca		               dex
.0e08	bd 7d 08	               lda  eorval,x
.0e0b	51 fd		               eor  (zpage2),y
.0e0d	20 a8 0a	               jsr  drawkeyval
.0e10	91 fd		               sta  (zpage2),y
.0e12	20 8e 20	               jsr  pop
.0e15	60		               rts
.0e16			setcurs
.0e16	20 4f 20	               jsr  push
.0e19	a2 01		               ldx  #grid_left
.0e1b	ac 91 08	               ldy  cursln
.0e1e	20 78 1f	               jsr  gotoxy
.0e21	a9 da		               lda  #$da
.0e23	20 58 1f	               jsr  putch
.0e26	ae 92 08	               ldx  curscl
.0e29	e8		               inx
.0e2a	a0 08		               ldy  #grid_top-1
.0e2c	20 78 1f	               jsr  gotoxy
.0e2f	a9 da		               lda  #$da
.0e31	20 58 1f	               jsr  putch
.0e34	20 8e 20	               jsr  pop
.0e37	60		               rts
.0e38			clrcurs
.0e38	20 4f 20	               jsr  push
.0e3b	a2 01		               ldx  #grid_left
.0e3d	ac 91 08	               ldy  cursln
.0e40	20 78 1f	               jsr  gotoxy
.0e43	a9 20		               lda  #$20
.0e45	20 58 1f	               jsr  putch
.0e48	ae 92 08	               ldx  curscl
.0e4b	e8		               inx
.0e4c	a0 08		               ldy  #grid_top-1
.0e4e	20 78 1f	               jsr  gotoxy
.0e51	a9 20		               lda  #$20
.0e53	20 58 1f	               jsr  putch
.0e56	20 8e 20	               jsr  pop
.0e59	60		               rts
.0e5a			drawbitmap
.0e5a	20 4f 20	               jsr  push
.0e5d	20 c1 0e	               jsr  calcmapaddr
.0e60	ad 8b 08	               lda  mapaddr        ; on pointe sur la table des bitmaps
.0e63	85 fb		               sta  zpage1
.0e65	ad 8c 08	               lda  mapaddr+1
.0e68	85 fc		               sta  zpage1+1
.0e6a	a0 00		drawchar       ldy  #$00
.0e6c	a2 09		               ldx  #grid_top      ;on replace la ...
.0e6e	8e 77 0e	               stx  isy+1          ;ligne de départ
.0e71	20 4f 20	nextline       jsr  push
.0e74	a2 02		               ldx  #grid_left+1        ; la colonne
.0e76	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.0e78	20 78 1f	               jsr  gotoxy
.0e7b	20 8e 20	               jsr  pop
.0e7e	b1 fb		               lda  (zpage1),y     ; on li une ligne
.0e80	20 b9 22	               jsr  atobin
.0e83	20 f0 0e	               jsr  abintograph
.0e86	20 4f 20	               jsr  push
.0e89	a2 10		isx            ldx  #<abin
.0e8b	a0 22		isy            ldy  #>abin
.0e8d	20 5e 1f	               jsr  puts
.0e90	20 8e 20	               jsr  pull
.0e93	ee 77 0e	               inc  isy+1
.0e96	c8		               iny
.0e97	c0 08		               cpy  #$08
.0e99	30 d6		               bmi  nextline
.0e9b	20 a2 0e	               jsr  highlight
.0e9e	20 8e 20	               jsr  pop
.0ea1	60		               rts
.0ea2			highlight
.0ea2	20 4f 20	               jsr  push
.0ea5	ae 89 08	               ldx  previouskey
.0ea8	bd 4a 23	               lda  asciitorom,x
.0eab	aa		               tax
.0eac	a9 0f		               lda  #charscolor
.0eae	9d 00 d8	               sta  colorram,x
.0eb1	ae 88 08	               ldx  currentkey
.0eb4	bd 4a 23	               lda  asciitorom,x
.0eb7	aa		               tax
.0eb8	a9 01		               lda  #charcolor
.0eba	9d 00 d8	               sta  colorram,x
.0ebd	20 8e 20	               jsr  pop
.0ec0	60		               rts
.0ec1			calcmapaddr
.0ec1	20 4f 20	               jsr  push
.0ec4	ad 8c 0f	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0ec7	85 fb		               sta  zpage1
.0ec9	ad 8d 0f	               lda  bitmapaddr+1
.0ecc	85 fc		               sta  zpage1+1
.0ece	ae 8a 08	               ldx  bitmapoffset
.0ed1	e0 00		               cpx  #$00
.0ed3	f0 08		               beq  thesame         ; sommes nous déja à 0
.0ed5	a9 08		addagain       lda  #$08
.0ed7	20 26 11	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0eda	ca		               dex                 ; pour chaque caracteres
.0edb	d0 f8		               bne  addagain
.0edd	48		thesame        pha
.0ede	a5 fb		               lda  zpage1
.0ee0	8d 8b 08	               sta  mapaddr
.0ee3	a5 fc		               lda  zpage1+1
.0ee5	8d 8c 08	               sta  mapaddr+1
.0ee8	68		               pla
.0ee9	20 a8 0a	               jsr  drawkeyval
.0eec	20 8e 20	out            jsr  pop
.0eef	60		               rts
.0ef0			abintograph
.0ef0	20 4f 20	               jsr  push
.0ef3	a9 10		               lda  #<abin
.0ef5	85 fb		               sta  zpage1
.0ef7	a9 22		               lda  #>abin+1
.0ef9	85 fc		               sta  zpage1+1
.0efb	a0 00		               ldy  #$00
.0efd	b1 fb		nextbit        lda  (zpage1),y
.0eff	c9 30		               cmp  #$30
.0f01	f0 07		               beq  itszero
.0f03	a9 d1		itsone         lda  #$d1
.0f05	91 fb		               sta  (zpage1),y
.0f07	4c 0e 0f	               jmp  next
.0f0a	a9 2e		itszero        lda  #$2e
.0f0c	91 fb		               sta  (zpage1),y
.0f0e	c8		next           iny
.0f0f	c0 08		               cpy  #$08
.0f11	30 ea		               bmi  nextbit
.0f13	20 8e 20	               jsr  pop
.0f16	60		               rts
.0f17			setscreenptr
.0f17	20 4f 20	               jsr  push
.0f1a	a9 08		               lda  #$08      ; basic commande to disable ...
.0f1c	20 d2 ff	               jsr  chrout    ; ... character set change.
.0f1f	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.0f22	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.0f24	09 0c		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.0f26	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.0f29	20 8e 20	               jsr  pop
.0f2c	60		               rts
.0f2d			copycharset
.0f2d	20 4f 20	               jsr  push
.0f30	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0f33	29 fe		               and  #%11111110     ;254
.0f35	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0f38	a5 01		               lda  u6510map       ;$01
.0f3a	29 fb		               and  #%11111011     ;251
.0f3c	85 01		               sta  u6510map       ;$01
.0f3e	20 53 0f	               jsr  memcopy
.0f41	a5 01		               lda  u6510map       ;$01
.0f43	09 04		               ora  #%00000100
.0f45	85 01		               sta  u6510map       ;$01
.0f47	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0f4a	09 01		               ora  #%00000001     ;254
.0f4c	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0f4f	20 8e 20	               jsr  pop
.0f52	60		               rts
.0f53			memcopy
.0f53	20 4f 20	               jsr  push
.0f56	ad 88 0f	               lda  startaddr
.0f59	85 fb		               sta  zpage1
.0f5b	ad 89 0f	               lda  startaddr+1
.0f5e	85 fc		               sta  zpage1+1
.0f60	ad 8c 0f	               lda  bitmapaddr
.0f63	85 fd		               sta  zpage2
.0f65	ad 8d 0f	               lda  bitmapaddr+1
.0f68	85 fe		               sta  zpage2+1
.0f6a	a0 00		               ldy  #$00
.0f6c	b1 fb		onemore        lda  (zpage1),y
.0f6e	91 fd		               sta  (zpage2),y
.0f70	20 56 21	               jsr  inczp1
.0f73	20 6e 21	               jsr  inczp2
.0f76	a5 fc		               lda  zpage1+1
.0f78	cd 8b 0f	               cmp  stopaddr+1
.0f7b	d0 ef		               bne  onemore
.0f7d	a5 fb		               lda  zpage1
.0f7f	cd 8a 0f	               cmp  stopaddr
.0f82	d0 e8		               bne  onemore
.0f84	20 8e 20	               jsr  pop
.0f87	60		               rts
=12288			bitmapmem =    charsdef * 1024     ;Calcul de la position ram des caracteres.
=61440			mstopaddr =    $d000+(4*$800)
>0f88	00 d0		startaddr      .word     $d000               ; 53248
>0f8a	00 f0		stopaddr       .word     mstopaddr           ; 55296
>0f8c	00 30		bitmapaddr     .word     bitmapmem           ; $3000, 12288
.0f8e			staticscreen
.0f8e	48		               pha
.0f8f	a9 0b		               lda  #bordure
.0f91	8d 20 d0	               sta  $d020
.0f94	68		               pla
.0f95	48		               pha
.0f96	a9 00		               lda  #fond
.0f98	8d 21 d0	               sta  $d021
.0f9b	68		               pla
.0f9c	20 7d 10	               jsr  drawlines
.0f9f	20 59 10	               jsr  drawallchars
.0fa2	20 c5 10	               jsr  drawgrid
.0fa5	20 ca 0f	               jsr  drawfkeys
.0fa8	20 4f 20	               jsr  push
.0fab	a2 df		               ldx  #<blankmsg
.0fad	a0 18		               ldy  #>blankmsg
.0faf	20 e7 1f	               jsr  putscxy
.0fb2	a2 3e		               ldx  #<quit_msg
.0fb4	a0 1b		               ldy  #>quit_msg
.0fb6	20 e7 1f	               jsr  putscxy
.0fb9	20 8e 20	               jsr  pop
.0fbc	20 4f 20	               jsr  push
.0fbf	a2 00		               ldx  #0
.0fc1	a0 07		               ldy  #7
.0fc3	20 78 1f	               jsr  gotoxy
.0fc6	20 8e 20	               jsr  pop
.0fc9	60		               rts
.0fca			drawfkeys
.0fca	20 4f 20	               jsr  push
.0fcd	ad 86 08	               lda  fkeyset
.0fd0	c9 00		               cmp  #$0
.0fd2	d0 42		               bne  secondks
.0fd4	a2 21		               ldx #<titremenu1
.0fd6	a0 1d		               ldy #>titremenu1
.0fd8	20 e7 1f	               jsr putscxy
.0fdb	a2 57		               ldx #<f1abutton
.0fdd	a0 1d		               ldy #>f1abutton
.0fdf	20 e7 1f	               jsr putscxy
.0fe2	a2 72		               ldx #<f2abutton
.0fe4	a0 1d		               ldy #>f2abutton
.0fe6	20 e7 1f	               jsr putscxy
.0fe9	a2 8d		               ldx #<f3abutton
.0feb	a0 1d		               ldy #>f3abutton
.0fed	20 e7 1f	               jsr putscxy
.0ff0	a2 a8		               ldx #<f4abutton
.0ff2	a0 1d		               ldy #>f4abutton
.0ff4	20 e7 1f	               jsr putscxy
.0ff7	a2 c3		               ldx #<f5abutton
.0ff9	a0 1d		               ldy #>f5abutton
.0ffb	20 e7 1f	               jsr putscxy
.0ffe	a2 de		               ldx #<f6abutton
.1000	a0 1d		               ldy #>f6abutton
.1002	20 e7 1f	               jsr putscxy
.1005	a2 f9		               ldx #<f7abutton
.1007	a0 1d		               ldy #>f7abutton
.1009	20 e7 1f	               jsr putscxy
.100c	a2 14		               ldx #<f8abutton
.100e	a0 1e		               ldy #>f8abutton
.1010	20 e7 1f	               jsr putscxy
.1013	4c 55 10	               jmp end
.1016			secondks
.1016	a2 3c		               ldx #<titremenu2
.1018	a0 1d		               ldy #>titremenu2
.101a	20 e7 1f	               jsr putscxy
.101d	a2 2f		               ldx #<f1bbutton
.101f	a0 1e		               ldy #>f1bbutton
.1021	20 e7 1f	               jsr putscxy
.1024	a2 4a		               ldx #<f2bbutton
.1026	a0 1e		               ldy #>f2bbutton
.1028	20 e7 1f	               jsr putscxy
.102b	a2 65		               ldx #<f3bbutton
.102d	a0 1e		               ldy #>f3bbutton
.102f	20 e7 1f	               jsr putscxy
.1032	a2 80		               ldx #<f4bbutton
.1034	a0 1e		               ldy #>f4bbutton
.1036	20 e7 1f	               jsr putscxy
.1039	a2 9b		               ldx #<f5bbutton
.103b	a0 1e		               ldy #>f5bbutton
.103d	20 e7 1f	               jsr putscxy
.1040	a2 b6		               ldx #<f6bbutton
.1042	a0 1e		               ldy #>f6bbutton
.1044	20 e7 1f	               jsr putscxy
.1047	a2 d1		               ldx #<f7bbutton
.1049	a0 1e		               ldy #>f7bbutton
.104b	20 e7 1f	               jsr putscxy
.104e	a2 ec		               ldx #<f8bbutton
.1050	a0 1e		               ldy #>f8bbutton
.1052	20 e7 1f	               jsr putscxy
.1055	20 8e 20	end            jsr  pop
.1058	60		               rts
.1059			drawallchars
.1059	20 4f 20	               jsr push
.105c	20 4f 20	               jsr  push
.105f	a2 00		               ldx  #0
.1061	a0 00		               ldy  #0
.1063	20 78 1f	               jsr  gotoxy
.1066	20 8e 20	               jsr  pop
.1069	a2 00		               ldx  #$00
.106b	8a		nextc          txa
.106c	9d 00 04	               sta  scrnnewram,x
.106f	a9 0f		               lda  #charscolor
.1071	9d 00 d8	               sta  colorram,x
.1074	e8		               inx
.1075	e0 80		               cpx  #$80
.1077	d0 f2		               bne  nextc
.1079	20 8e 20	               jsr  pop
.107c	60		               rts
.107d			drawlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.107d	20 4f 20	               jsr  push
.1080	a2 28		               ldx  #40
.1082	a9 40		               lda  #64
.1084	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.1087	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.108a	ca		               dex
.108b	e0 10		hline          cpx  #vlinepos
.108d	10 03		               bpl  notyet
.108f	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.1092	e0 00		notyet         cpx  #$00
.1094	d0 ee		               bne  nextl
.1096	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.1098	85 fb		               sta  zpage1
.109a	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.109c	85 fc		               sta  zpage1+1
.109e	a0 00		               ldy  #0
.10a0	a9 72		               lda  #114
.10a2	91 fb		               sta  (zpage1),y
.10a4	20 34 11	               jsr  zp1add40
.10a7	a2 12		               ldx  #24-hline2
.10a9	a9 5d		               lda  #93
.10ab	91 fb		another93      sta  (zpage1),y
.10ad	20 34 11	               jsr  zp1add40
.10b0	ca		               dex
.10b1	d0 f8		               bne  another93
.10b3	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.10b5	85 fb		               sta  zpage1
.10b7	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.10b9	85 fc		               sta  zpage1+1
.10bb	a0 00		               ldy  #0
.10bd	a9 73		               lda  #115
.10bf	91 fb		               sta  (zpage1),y
.10c1	20 8e 20	               jsr  pop
.10c4	60		               rts
.10c5			drawgrid
.10c5	20 4f 20	               jsr  push
.10c8	20 07 1f	               jsr  screendis
.10cb	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.10cd	85 fb		               sta  zpage1
.10cf	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.10d1	85 fc		               sta  zpage1+1
.10d3	a2 08		               ldx  #8
.10d5	a9 65		nextbox        lda  #101
.10d7	a0 09		               ldy  #9
.10d9	91 fb		               sta  (zpage1),y
.10db	88		               dey
.10dc	a9 2e		               lda  #$2e
.10de	91 fb		nextcol        sta  (zpage1),y
.10e0	88		               dey
.10e1	d0 fb		               bne  nextcol
.10e3	20 34 11	               jsr  zp1add40
.10e6	ca		               dex
.10e7	d0 ec		               bne  nextbox
.10e9	a0 08		               ldy  #8
.10eb	a9 77		               lda  #119
.10ed	91 fb		nextlin        sta  (zpage1),y
.10ef	88		               dey
.10f0	d0 fb		               bne  nextlin
.10f2	a9 3e		               lda  #$3e
.10f4	8d eb 05	               sta  scrnnewram+(40*(12))+11
.10f7	a9 70		               lda  #$70                     ;+
.10f9	8d c4 05	               sta  scrnnewram+(40*(11))+12
.10fc	a9 43		               lda  #$43                     ;-
.10fe	8d c5 05	               sta  scrnnewram+(40*(11))+13
.1101	a9 6e		               lda  #$6e                     ;+
.1103	8d c6 05	               sta  scrnnewram+(40*(11))+14
.1106	a9 5d		               lda  #$5d                     ;|
.1108	8d ec 05	               sta  scrnnewram+(40*(12))+12
.110b	a9 5d		               lda  #$5d                     ;|
.110d	8d ee 05	               sta  scrnnewram+(40*(12))+14
.1110	a9 6d		               lda  #$6d                     ;+
.1112	8d 14 06	               sta  scrnnewram+(40*(13))+12
.1115	a9 43		               lda  #$43                     ;-
.1117	8d 15 06	               sta  scrnnewram+(40*(13))+13
.111a	a9 7d		               lda  #$7d                     ;+
.111c	8d 16 06	               sta  scrnnewram+(40*(13))+14
.111f	20 14 1f	               jsr screenena
.1122	20 8e 20	               jsr  pop
.1125	60		               rts
.1126			zp1addnum
.1126	08		               php
.1127	48		               pha
.1128	18		               clc
.1129	65 fb		               adc  zpage1
.112b	90 02		               bcc  nocarry
.112d	e6 fc		               inc  zpage1+1
.112f	85 fb		nocarry        sta  zpage1
.1131	68		               pla
.1132	28		               plp
.1133	60		               rts
.1134			zp1add40
.1134	08		               php
.1135	48		               pha
.1136	18		               clc
.1137	a5 fb		               lda  zpage1
.1139	69 28		               adc  #40
.113b	90 02		               bcc  nocarry
.113d	e6 fc		               inc  zpage1+1
.113f	85 fb		nocarry        sta  zpage1
.1141	68		               pla
.1142	28		               plp
.1143	60		               rts
.1144			delay
.1144	20 4f 20	               jsr  push
.1147	a9 00		               lda  #$0
.1149	aa		               tax
.114a	a8		               tay
.114b	ca		xagain         dex
.114c	ca		               dex
.114d	88		yagain         dey
.114e	c0 00		               cpy  #$00
.1150	d0 fb		               bne  yagain
.1152	e0 00		               cpx  #$00
.1154	d0 f5		               bne  xagain
.1156	20 8e 20	               jsr  pop
.1159	60		               rts
.115a			f1action
.115a	48		               pha
.115b	a9 ff		               lda  #$ff
.115d	8d 85 08	               sta  editmode
.1160	ad 86 08	               lda  fkeyset
.1163	f0 03		               beq  menua
.1165	4c ed 11	               jmp  menub
.1168			menua
.1168	20 4f 20	               jsr  push
.116b	a2 df		               ldx  #<blankmsg
.116d	a0 18		               ldy  #>blankmsg
.116f	20 e7 1f	               jsr  putscxy
.1172	a2 26		               ldx  #<f1a_msg
.1174	a0 19		               ldy  #>f1a_msg
.1176	20 e7 1f	               jsr  putscxy
.1179	20 8e 20	               jsr  pop
.117c	08		               php
.117d	48		               pha
.117e	8a		               txa
.117f	48		               pha
.1180	ad 57 1d	               lda  f1abutton
.1183	48		               pha
.1184	a9 92		               lda  #146
.1186	8d 69 1d	               sta  f1abutton+18
.1189	a9 01		               lda  #flashcol
.118b	8d 57 1d	               sta  f1abutton
.118e	a2 57		               ldx  #<f1abutton
.1190	a0 1d		               ldy  #>f1abutton
.1192	20 e7 1f	               jsr  putscxy
.1195	20 44 11	               jsr  delay
.1198	a9 12		               lda  #18
.119a	8d 69 1d	               sta  f1abutton+18
.119d	68		               pla
.119e	8d 57 1d	               sta  f1abutton
.11a1	a2 57		               ldx  #<f1abutton
.11a3	a0 1d		               ldy  #>f1abutton
.11a5	20 e7 1f	               jsr  putscxy
.11a8	68		               pla
.11a9	aa		               tax
.11aa	68		               pla
.11ab	28		               plp
.11ac	a9 0b		               lda  #vgris
.11ae	20 6a 0a	               jsr  setmenuacolor
.11b1	a9 03		               lda  #menu1col1
.11b3	8d 57 1d	               sta  f1abutton
.11b6	20 ca 0f	               jsr  drawfkeys
.11b9	20 a8 0c	               jsr  editor
.11bc	20 4f 20	               jsr  push
.11bf	a2 df		               ldx  #<blankmsg
.11c1	a0 18		               ldy  #>blankmsg
.11c3	20 e7 1f	               jsr  putscxy
.11c6	a2 3e		               ldx  #<quit_msg
.11c8	a0 1b		               ldy  #>quit_msg
.11ca	20 e7 1f	               jsr  putscxy
.11cd	20 8e 20	               jsr  pop
.11d0	20 4f 20	               jsr  push
.11d3	a2 df		               ldx  #<blankmsg
.11d5	a0 18		               ldy  #>blankmsg
.11d7	20 e7 1f	               jsr  putscxy
.11da	a2 9a		               ldx  #<menua_msg
.11dc	a0 1a		               ldy  #>menua_msg
.11de	20 e7 1f	               jsr  putscxy
.11e1	20 8e 20	               jsr  pop
.11e4	20 24 0a	               jsr  resetmenuacolor
.11e7	20 ca 0f	               jsr  drawfkeys
.11ea	4c 37 12	               jmp  out
.11ed			menub
.11ed	20 4f 20	               jsr  push
.11f0	a2 df		               ldx  #<blankmsg
.11f2	a0 18		               ldy  #>blankmsg
.11f4	20 e7 1f	               jsr  putscxy
.11f7	a2 00		               ldx  #<f1b_msg
.11f9	a0 1a		               ldy  #>f1b_msg
.11fb	20 e7 1f	               jsr  putscxy
.11fe	20 8e 20	               jsr  pop
.1201	08		               php
.1202	48		               pha
.1203	8a		               txa
.1204	48		               pha
.1205	ad 2f 1e	               lda  f1bbutton
.1208	48		               pha
.1209	a9 92		               lda  #146
.120b	8d 41 1e	               sta  f1bbutton+18
.120e	a9 01		               lda  #flashcol
.1210	8d 2f 1e	               sta  f1bbutton
.1213	a2 2f		               ldx  #<f1bbutton
.1215	a0 1e		               ldy  #>f1bbutton
.1217	20 e7 1f	               jsr  putscxy
.121a	20 44 11	               jsr  delay
.121d	a9 12		               lda  #18
.121f	8d 41 1e	               sta  f1bbutton+18
.1222	68		               pla
.1223	8d 2f 1e	               sta  f1bbutton
.1226	a2 2f		               ldx  #<f1bbutton
.1228	a0 1e		               ldy  #>f1bbutton
.122a	20 e7 1f	               jsr  putscxy
.122d	68		               pla
.122e	aa		               tax
.122f	68		               pla
.1230	28		               plp
.1231	20 ac 18	               jsr  flipvert
.1234	20 5a 0e	               jsr  drawbitmap
.1237	68		out            pla
.1238	20 4f 20	               jsr  push
.123b	a2 df		               ldx  #<blankmsg
.123d	a0 18		               ldy  #>blankmsg
.123f	20 e7 1f	               jsr  putscxy
.1242	a2 0b		               ldx  #<prompt_msg
.1244	a0 19		               ldy  #>prompt_msg
.1246	20 e7 1f	               jsr  putscxy
.1249	20 8e 20	               jsr  pop
.124c	60		               rts
.124d			f2action
.124d	48		               pha
.124e	a9 00		               lda  #$0
.1250	8d 85 08	               sta  editmode
.1253	ad 86 08	               lda  fkeyset
.1256	d0 4d		               bne  menub
.1258	20 4f 20	               jsr  push
.125b	a2 df		               ldx  #<blankmsg
.125d	a0 18		               ldy  #>blankmsg
.125f	20 e7 1f	               jsr  putscxy
.1262	a2 41		               ldx  #<f2a_msg
.1264	a0 19		               ldy  #>f2a_msg
.1266	20 e7 1f	               jsr  putscxy
.1269	20 8e 20	               jsr  pop
.126c	08		               php
.126d	48		               pha
.126e	8a		               txa
.126f	48		               pha
.1270	ad 72 1d	               lda  f2abutton
.1273	48		               pha
.1274	a9 92		               lda  #146
.1276	8d 84 1d	               sta  f2abutton+18
.1279	a9 01		               lda  #flashcol
.127b	8d 72 1d	               sta  f2abutton
.127e	a2 72		               ldx  #<f2abutton
.1280	a0 1d		               ldy  #>f2abutton
.1282	20 e7 1f	               jsr  putscxy
.1285	20 44 11	               jsr  delay
.1288	a9 12		               lda  #18
.128a	8d 84 1d	               sta  f2abutton+18
.128d	68		               pla
.128e	8d 72 1d	               sta  f2abutton
.1291	a2 72		               ldx  #<f2abutton
.1293	a0 1d		               ldy  #>f2abutton
.1295	20 e7 1f	               jsr  putscxy
.1298	68		               pla
.1299	aa		               tax
.129a	68		               pla
.129b	28		               plp
.129c	20 0c 09	               jsr  copychar
.129f	20 5a 0e	               jsr  drawbitmap
.12a2	4c ef 12	               jmp  out
.12a5			menub
.12a5	20 4f 20	               jsr  push
.12a8	a2 df		               ldx  #<blankmsg
.12aa	a0 18		               ldy  #>blankmsg
.12ac	20 e7 1f	               jsr  putscxy
.12af	a2 19		               ldx  #<f2b_msg
.12b1	a0 1a		               ldy  #>f2b_msg
.12b3	20 e7 1f	               jsr  putscxy
.12b6	20 8e 20	               jsr  pop
.12b9	08		               php
.12ba	48		               pha
.12bb	8a		               txa
.12bc	48		               pha
.12bd	ad 4a 1e	               lda  f2bbutton
.12c0	48		               pha
.12c1	a9 92		               lda  #146
.12c3	8d 5c 1e	               sta  f2bbutton+18
.12c6	a9 01		               lda  #flashcol
.12c8	8d 4a 1e	               sta  f2bbutton
.12cb	a2 4a		               ldx  #<f2bbutton
.12cd	a0 1e		               ldy  #>f2bbutton
.12cf	20 e7 1f	               jsr  putscxy
.12d2	20 44 11	               jsr  delay
.12d5	a9 12		               lda  #18
.12d7	8d 5c 1e	               sta  f2bbutton+18
.12da	68		               pla
.12db	8d 4a 1e	               sta  f2bbutton
.12de	a2 4a		               ldx  #<f2bbutton
.12e0	a0 1e		               ldy  #>f2bbutton
.12e2	20 e7 1f	               jsr  putscxy
.12e5	68		               pla
.12e6	aa		               tax
.12e7	68		               pla
.12e8	28		               plp
.12e9	20 7f 18	               jsr  fliphorz
.12ec	20 5a 0e	               jsr  drawbitmap
.12ef	68		out            pla
.12f0	20 4f 20	               jsr  push
.12f3	a2 df		               ldx  #<blankmsg
.12f5	a0 18		               ldy  #>blankmsg
.12f7	20 e7 1f	               jsr  putscxy
.12fa	a2 0b		               ldx  #<prompt_msg
.12fc	a0 19		               ldy  #>prompt_msg
.12fe	20 e7 1f	               jsr  putscxy
.1301	20 8e 20	               jsr  pop
.1304	60		               rts
.1305			f3action
.1305	48		               pha
.1306	a9 00		               lda  #$0
.1308	8d 85 08	               sta  editmode
.130b	ad 86 08	               lda  fkeyset
.130e	d0 5e		               bne  menub
.1310	08		               php
.1311	48		               pha
.1312	8a		               txa
.1313	48		               pha
.1314	ad 8d 1d	               lda  f3abutton
.1317	48		               pha
.1318	a9 92		               lda  #146
.131a	8d 9f 1d	               sta  f3abutton+18
.131d	a9 01		               lda  #flashcol
.131f	8d 8d 1d	               sta  f3abutton
.1322	a2 8d		               ldx  #<f3abutton
.1324	a0 1d		               ldy  #>f3abutton
.1326	20 e7 1f	               jsr  putscxy
.1329	20 44 11	               jsr  delay
.132c	a9 12		               lda  #18
.132e	8d 9f 1d	               sta  f3abutton+18
.1331	68		               pla
.1332	8d 8d 1d	               sta  f3abutton
.1335	a2 8d		               ldx  #<f3abutton
.1337	a0 1d		               ldy  #>f3abutton
.1339	20 e7 1f	               jsr  putscxy
.133c	68		               pla
.133d	aa		               tax
.133e	68		               pla
.133f	28		               plp
.1340	20 4f 20	               jsr  push
.1343	a2 df		               ldx  #<blankmsg
.1345	a0 18		               ldy  #>blankmsg
.1347	20 e7 1f	               jsr  putscxy
.134a	a2 5e		               ldx  #<f3a_msg
.134c	a0 19		               ldy  #>f3a_msg
.134e	20 e7 1f	               jsr  putscxy
.1351	20 8e 20	               jsr  pop
.1354	20 6f 24	getagain       jsr  getkey
.1357	c9 43		               cmp  #$43
.1359	f0 07		               beq  devok
.135b	c9 44		               cmp  #$44
.135d	f0 03		               beq  devok
.135f	4c 54 13	               jmp  getagain
.1362	8d 7b 08	devok          sta  device
.1365	20 58 1f	               jsr  putch
.1368	20 9a 08	               jsr  getfname
.136b	4c b8 13	               jmp  out
.136e			menub
.136e	20 4f 20	               jsr  push
.1371	a2 df		               ldx  #<blankmsg
.1373	a0 18		               ldy  #>blankmsg
.1375	20 e7 1f	               jsr  putscxy
.1378	a2 34		               ldx  #<f3b_msg
.137a	a0 1a		               ldy  #>f3b_msg
.137c	20 e7 1f	               jsr  putscxy
.137f	20 8e 20	               jsr  pop
.1382	08		               php
.1383	48		               pha
.1384	8a		               txa
.1385	48		               pha
.1386	ad 65 1e	               lda  f3bbutton
.1389	48		               pha
.138a	a9 92		               lda  #146
.138c	8d 77 1e	               sta  f3bbutton+18
.138f	a9 01		               lda  #flashcol
.1391	8d 65 1e	               sta  f3bbutton
.1394	a2 65		               ldx  #<f3bbutton
.1396	a0 1e		               ldy  #>f3bbutton
.1398	20 e7 1f	               jsr  putscxy
.139b	20 44 11	               jsr  delay
.139e	a9 12		               lda  #18
.13a0	8d 77 1e	               sta  f3bbutton+18
.13a3	68		               pla
.13a4	8d 65 1e	               sta  f3bbutton
.13a7	a2 65		               ldx  #<f3bbutton
.13a9	a0 1e		               ldy  #>f3bbutton
.13ab	20 e7 1f	               jsr  putscxy
.13ae	68		               pla
.13af	aa		               tax
.13b0	68		               pla
.13b1	28		               plp
.13b2	20 0a 18	               jsr  scrollright
.13b5	20 5a 0e	               jsr  drawbitmap
.13b8	68		out            pla
.13b9	20 4f 20	               jsr  push
.13bc	a2 df		               ldx  #<blankmsg
.13be	a0 18		               ldy  #>blankmsg
.13c0	20 e7 1f	               jsr  putscxy
.13c3	a2 0b		               ldx  #<prompt_msg
.13c5	a0 19		               ldy  #>prompt_msg
.13c7	20 e7 1f	               jsr  putscxy
.13ca	20 8e 20	               jsr  pop
.13cd	60		               rts
.13ce			f4action
.13ce	48		               pha
.13cf	a9 00		               lda  #$0
.13d1	8d 85 08	               sta  editmode
.13d4	ad 86 08	               lda  fkeyset
.13d7	d0 5e		               bne  menub
.13d9	08		               php
.13da	48		               pha
.13db	8a		               txa
.13dc	48		               pha
.13dd	ad a8 1d	               lda  f4abutton
.13e0	48		               pha
.13e1	a9 92		               lda  #146
.13e3	8d ba 1d	               sta  f4abutton+18
.13e6	a9 01		               lda  #flashcol
.13e8	8d a8 1d	               sta  f4abutton
.13eb	a2 a8		               ldx  #<f4abutton
.13ed	a0 1d		               ldy  #>f4abutton
.13ef	20 e7 1f	               jsr  putscxy
.13f2	20 44 11	               jsr  delay
.13f5	a9 12		               lda  #18
.13f7	8d ba 1d	               sta  f4abutton+18
.13fa	68		               pla
.13fb	8d a8 1d	               sta  f4abutton
.13fe	a2 a8		               ldx  #<f4abutton
.1400	a0 1d		               ldy  #>f4abutton
.1402	20 e7 1f	               jsr  putscxy
.1405	68		               pla
.1406	aa		               tax
.1407	68		               pla
.1408	28		               plp
.1409	20 4f 20	               jsr  push
.140c	a2 df		               ldx  #<blankmsg
.140e	a0 18		               ldy  #>blankmsg
.1410	20 e7 1f	               jsr  putscxy
.1413	a2 85		               ldx  #<f4a_msg
.1415	a0 19		               ldy  #>f4a_msg
.1417	20 e7 1f	               jsr  putscxy
.141a	20 8e 20	               jsr  pop
.141d	20 6f 24	getagain       jsr  getkey
.1420	c9 43		               cmp  #$43
.1422	f0 07		               beq  devok
.1424	c9 44		               cmp  #$44
.1426	f0 03		               beq  devok
.1428	4c 1d 14	               jmp  getagain
.142b	8d 7b 08	devok          sta  device
.142e	20 58 1f	               jsr  putch
.1431	20 9a 08	               jsr  getfname
.1434	4c 81 14	               jmp  out
.1437			menub
.1437	20 4f 20	               jsr  push
.143a	a2 df		               ldx  #<blankmsg
.143c	a0 18		               ldy  #>blankmsg
.143e	20 e7 1f	               jsr  putscxy
.1441	a2 49		               ldx  #<f4b_msg
.1443	a0 1a		               ldy  #>f4b_msg
.1445	20 e7 1f	               jsr  putscxy
.1448	20 8e 20	               jsr  pop
.144b	08		               php
.144c	48		               pha
.144d	8a		               txa
.144e	48		               pha
.144f	ad 80 1e	               lda  f4bbutton
.1452	48		               pha
.1453	a9 92		               lda  #146
.1455	8d 92 1e	               sta  f4bbutton+18
.1458	a9 01		               lda  #flashcol
.145a	8d 80 1e	               sta  f4bbutton
.145d	a2 80		               ldx  #<f4bbutton
.145f	a0 1e		               ldy  #>f4bbutton
.1461	20 e7 1f	               jsr  putscxy
.1464	20 44 11	               jsr  delay
.1467	a9 12		               lda  #18
.1469	8d 92 1e	               sta  f4bbutton+18
.146c	68		               pla
.146d	8d 80 1e	               sta  f4bbutton
.1470	a2 80		               ldx  #<f4bbutton
.1472	a0 1e		               ldy  #>f4bbutton
.1474	20 e7 1f	               jsr  putscxy
.1477	68		               pla
.1478	aa		               tax
.1479	68		               pla
.147a	28		               plp
.147b	20 2f 18	               jsr  scrollleft
.147e	20 5a 0e	               jsr  drawbitmap
.1481	68		out            pla
.1482	20 4f 20	               jsr  push
.1485	a2 df		               ldx  #<blankmsg
.1487	a0 18		               ldy  #>blankmsg
.1489	20 e7 1f	               jsr  putscxy
.148c	a2 0b		               ldx  #<prompt_msg
.148e	a0 19		               ldy  #>prompt_msg
.1490	20 e7 1f	               jsr  putscxy
.1493	20 8e 20	               jsr  pop
.1496	60		               rts
.1497			f5action
.1497	48		               pha
.1498	a9 00		               lda  #$0
.149a	8d 85 08	               sta  editmode
.149d	ad 86 08	               lda  fkeyset
.14a0	d0 4d		               bne  menub
.14a2	20 4f 20	               jsr  push
.14a5	a2 df		               ldx  #<blankmsg
.14a7	a0 18		               ldy  #>blankmsg
.14a9	20 e7 1f	               jsr  putscxy
.14ac	a2 ae		               ldx  #<f5a_msg
.14ae	a0 19		               ldy  #>f5a_msg
.14b0	20 e7 1f	               jsr  putscxy
.14b3	20 8e 20	               jsr  pop
.14b6	08		               php
.14b7	48		               pha
.14b8	8a		               txa
.14b9	48		               pha
.14ba	ad c3 1d	               lda  f5abutton
.14bd	48		               pha
.14be	a9 92		               lda  #146
.14c0	8d d5 1d	               sta  f5abutton+18
.14c3	a9 01		               lda  #flashcol
.14c5	8d c3 1d	               sta  f5abutton
.14c8	a2 c3		               ldx  #<f5abutton
.14ca	a0 1d		               ldy  #>f5abutton
.14cc	20 e7 1f	               jsr  putscxy
.14cf	20 44 11	               jsr  delay
.14d2	a9 12		               lda  #18
.14d4	8d d5 1d	               sta  f5abutton+18
.14d7	68		               pla
.14d8	8d c3 1d	               sta  f5abutton
.14db	a2 c3		               ldx  #<f5abutton
.14dd	a0 1d		               ldy  #>f5abutton
.14df	20 e7 1f	               jsr  putscxy
.14e2	68		               pla
.14e3	aa		               tax
.14e4	68		               pla
.14e5	28		               plp
.14e6	20 5d 18	               jsr  clearchar
.14e9	20 5a 0e	               jsr  drawbitmap
.14ec	4c 39 15	               jmp  out
.14ef			menub
.14ef	20 4f 20	               jsr  push
.14f2	a2 df		               ldx  #<blankmsg
.14f4	a0 18		               ldy  #>blankmsg
.14f6	20 e7 1f	               jsr  putscxy
.14f9	a2 5d		               ldx  #<f5b_msg
.14fb	a0 1a		               ldy  #>f5b_msg
.14fd	20 e7 1f	               jsr  putscxy
.1500	20 8e 20	               jsr  pop
.1503	08		               php
.1504	48		               pha
.1505	8a		               txa
.1506	48		               pha
.1507	ad 9b 1e	               lda  f5bbutton
.150a	48		               pha
.150b	a9 92		               lda  #146
.150d	8d ad 1e	               sta  f5bbutton+18
.1510	a9 01		               lda  #flashcol
.1512	8d 9b 1e	               sta  f5bbutton
.1515	a2 9b		               ldx  #<f5bbutton
.1517	a0 1e		               ldy  #>f5bbutton
.1519	20 e7 1f	               jsr  putscxy
.151c	20 44 11	               jsr  delay
.151f	a9 12		               lda  #18
.1521	8d ad 1e	               sta  f5bbutton+18
.1524	68		               pla
.1525	8d 9b 1e	               sta  f5bbutton
.1528	a2 9b		               ldx  #<f5bbutton
.152a	a0 1e		               ldy  #>f5bbutton
.152c	20 e7 1f	               jsr  putscxy
.152f	68		               pla
.1530	aa		               tax
.1531	68		               pla
.1532	28		               plp
.1533	20 98 17	               jsr  scrollup
.1536	20 5a 0e	               jsr  drawbitmap
.1539	68		out            pla
.153a	20 4f 20	               jsr  push
.153d	a2 df		               ldx  #<blankmsg
.153f	a0 18		               ldy  #>blankmsg
.1541	20 e7 1f	               jsr  putscxy
.1544	a2 0b		               ldx  #<prompt_msg
.1546	a0 19		               ldy  #>prompt_msg
.1548	20 e7 1f	               jsr  putscxy
.154b	20 8e 20	               jsr  pop
.154e	60		               rts
.154f			f6action
.154f	48		               pha
.1550	a9 00		               lda  #$0
.1552	8d 85 08	               sta  editmode
.1555	ad 86 08	               lda  fkeyset
.1558	d0 4d		               bne  menub
.155a	20 4f 20	               jsr  push
.155d	a2 df		               ldx  #<blankmsg
.155f	a0 18		               ldy  #>blankmsg
.1561	20 e7 1f	               jsr  putscxy
.1564	a2 c8		               ldx  #<f6a_msg
.1566	a0 19		               ldy  #>f6a_msg
.1568	20 e7 1f	               jsr  putscxy
.156b	20 8e 20	               jsr  pop
.156e	08		               php
.156f	48		               pha
.1570	8a		               txa
.1571	48		               pha
.1572	ad de 1d	               lda  f6abutton
.1575	48		               pha
.1576	a9 92		               lda  #146
.1578	8d f0 1d	               sta  f6abutton+18
.157b	a9 01		               lda  #flashcol
.157d	8d de 1d	               sta  f6abutton
.1580	a2 de		               ldx  #<f6abutton
.1582	a0 1d		               ldy  #>f6abutton
.1584	20 e7 1f	               jsr  putscxy
.1587	20 44 11	               jsr  delay
.158a	a9 12		               lda  #18
.158c	8d f0 1d	               sta  f6abutton+18
.158f	68		               pla
.1590	8d de 1d	               sta  f6abutton
.1593	a2 de		               ldx  #<f6abutton
.1595	a0 1d		               ldy  #>f6abutton
.1597	20 e7 1f	               jsr  putscxy
.159a	68		               pla
.159b	aa		               tax
.159c	68		               pla
.159d	28		               plp
.159e	20 51 18	               jsr  fillchar
.15a1	20 5a 0e	               jsr  drawbitmap
.15a4	4c f1 15	               jmp  out
.15a7			menub
.15a7	20 4f 20	               jsr  push
.15aa	a2 df		               ldx  #<blankmsg
.15ac	a0 18		               ldy  #>blankmsg
.15ae	20 e7 1f	               jsr  putscxy
.15b1	a2 6f		               ldx  #<f6b_msg
.15b3	a0 1a		               ldy  #>f6b_msg
.15b5	20 e7 1f	               jsr  putscxy
.15b8	20 8e 20	               jsr  pop
.15bb	08		               php
.15bc	48		               pha
.15bd	8a		               txa
.15be	48		               pha
.15bf	ad b6 1e	               lda  f6bbutton
.15c2	48		               pha
.15c3	a9 92		               lda  #146
.15c5	8d c8 1e	               sta  f6bbutton+18
.15c8	a9 01		               lda  #flashcol
.15ca	8d b6 1e	               sta  f6bbutton
.15cd	a2 b6		               ldx  #<f6bbutton
.15cf	a0 1e		               ldy  #>f6bbutton
.15d1	20 e7 1f	               jsr  putscxy
.15d4	20 44 11	               jsr  delay
.15d7	a9 12		               lda  #18
.15d9	8d c8 1e	               sta  f6bbutton+18
.15dc	68		               pla
.15dd	8d b6 1e	               sta  f6bbutton
.15e0	a2 b6		               ldx  #<f6bbutton
.15e2	a0 1e		               ldy  #>f6bbutton
.15e4	20 e7 1f	               jsr  putscxy
.15e7	68		               pla
.15e8	aa		               tax
.15e9	68		               pla
.15ea	28		               plp
.15eb	20 d0 17	               jsr  scrolldown
.15ee	20 5a 0e	               jsr  drawbitmap
.15f1	68		out            pla
.15f2	20 4f 20	               jsr  push
.15f5	a2 df		               ldx  #<blankmsg
.15f7	a0 18		               ldy  #>blankmsg
.15f9	20 e7 1f	               jsr  putscxy
.15fc	a2 0b		               ldx  #<prompt_msg
.15fe	a0 19		               ldy  #>prompt_msg
.1600	20 e7 1f	               jsr  putscxy
.1603	20 8e 20	               jsr  pop
.1606	60		               rts
.1607			f7action
.1607	48		               pha
.1608	a9 00		               lda  #$0
.160a	8d 85 08	               sta  editmode
.160d	ad 86 08	               lda  fkeyset
.1610	d0 4d		               bne  menub
.1612	20 4f 20	               jsr  push
.1615	a2 df		               ldx  #<blankmsg
.1617	a0 18		               ldy  #>blankmsg
.1619	20 e7 1f	               jsr  putscxy
.161c	a2 e2		               ldx  #<f7a_msg
.161e	a0 19		               ldy  #>f7a_msg
.1620	20 e7 1f	               jsr  putscxy
.1623	20 8e 20	               jsr  pop
.1626	08		               php
.1627	48		               pha
.1628	8a		               txa
.1629	48		               pha
.162a	ad f9 1d	               lda  f7abutton
.162d	48		               pha
.162e	a9 92		               lda  #146
.1630	8d 0b 1e	               sta  f7abutton+18
.1633	a9 01		               lda  #flashcol
.1635	8d f9 1d	               sta  f7abutton
.1638	a2 f9		               ldx  #<f7abutton
.163a	a0 1d		               ldy  #>f7abutton
.163c	20 e7 1f	               jsr  putscxy
.163f	20 44 11	               jsr  delay
.1642	a9 12		               lda  #18
.1644	8d 0b 1e	               sta  f7abutton+18
.1647	68		               pla
.1648	8d f9 1d	               sta  f7abutton
.164b	a2 f9		               ldx  #<f7abutton
.164d	a0 1d		               ldy  #>f7abutton
.164f	20 e7 1f	               jsr  putscxy
.1652	68		               pla
.1653	aa		               tax
.1654	68		               pla
.1655	28		               plp
.1656	20 2d 0f	               jsr  copycharset
.1659	20 5a 0e	               jsr  drawbitmap
.165c	4c ae 16	               jmp  out
.165f	a9 00		menub          lda  #$0
.1661	8d 85 08	               sta  editmode
.1664	20 4f 20	               jsr  push
.1667	a2 df		               ldx  #<blankmsg
.1669	a0 18		               ldy  #>blankmsg
.166b	20 e7 1f	               jsr  putscxy
.166e	a2 83		               ldx  #<f7b_msg
.1670	a0 1a		               ldy  #>f7b_msg
.1672	20 e7 1f	               jsr  putscxy
.1675	20 8e 20	               jsr  pop
.1678	08		               php
.1679	48		               pha
.167a	8a		               txa
.167b	48		               pha
.167c	ad d1 1e	               lda  f7bbutton
.167f	48		               pha
.1680	a9 92		               lda  #146
.1682	8d e3 1e	               sta  f7bbutton+18
.1685	a9 01		               lda  #flashcol
.1687	8d d1 1e	               sta  f7bbutton
.168a	a2 d1		               ldx  #<f7bbutton
.168c	a0 1e		               ldy  #>f7bbutton
.168e	20 e7 1f	               jsr  putscxy
.1691	20 44 11	               jsr  delay
.1694	a9 12		               lda  #18
.1696	8d e3 1e	               sta  f7bbutton+18
.1699	68		               pla
.169a	8d d1 1e	               sta  f7bbutton
.169d	a2 d1		               ldx  #<f7bbutton
.169f	a0 1e		               ldy  #>f7bbutton
.16a1	20 e7 1f	               jsr  putscxy
.16a4	68		               pla
.16a5	aa		               tax
.16a6	68		               pla
.16a7	28		               plp
.16a8	20 78 17	               jsr  reverse
.16ab	20 5a 0e	               jsr  drawbitmap
.16ae	68		out            pla
.16af	20 4f 20	               jsr  push
.16b2	a2 df		               ldx  #<blankmsg
.16b4	a0 18		               ldy  #>blankmsg
.16b6	20 e7 1f	               jsr  putscxy
.16b9	a2 0b		               ldx  #<prompt_msg
.16bb	a0 19		               ldy  #>prompt_msg
.16bd	20 e7 1f	               jsr  putscxy
.16c0	20 8e 20	               jsr  pop
.16c3	60		               rts
.16c4			f8action
.16c4	48		               pha
.16c5	a9 00		               lda  #$0
.16c7	8d 85 08	               sta  editmode
.16ca	ad 86 08	               lda  fkeyset
.16cd	d0 47		               bne  menub
.16cf	20 4f 20	               jsr  push
.16d2	a2 df		               ldx  #<blankmsg
.16d4	a0 18		               ldy  #>blankmsg
.16d6	20 e7 1f	               jsr  putscxy
.16d9	a2 bd		               ldx  #<menub_msg
.16db	a0 1a		               ldy  #>menub_msg
.16dd	20 e7 1f	               jsr  putscxy
.16e0	20 8e 20	               jsr  pop
.16e3	08		               php
.16e4	48		               pha
.16e5	8a		               txa
.16e6	48		               pha
.16e7	ad 14 1e	               lda  f8abutton
.16ea	48		               pha
.16eb	a9 92		               lda  #146
.16ed	8d 26 1e	               sta  f8abutton+18
.16f0	a9 01		               lda  #flashcol
.16f2	8d 14 1e	               sta  f8abutton
.16f5	a2 14		               ldx  #<f8abutton
.16f7	a0 1e		               ldy  #>f8abutton
.16f9	20 e7 1f	               jsr  putscxy
.16fc	20 44 11	               jsr  delay
.16ff	a9 12		               lda  #18
.1701	8d 26 1e	               sta  f8abutton+18
.1704	68		               pla
.1705	8d 14 1e	               sta  f8abutton
.1708	a2 14		               ldx  #<f8abutton
.170a	a0 1e		               ldy  #>f8abutton
.170c	20 e7 1f	               jsr  putscxy
.170f	68		               pla
.1710	aa		               tax
.1711	68		               pla
.1712	28		               plp
.1713	4c 5a 17	               jmp  swapit
.1716			menub
.1716	20 4f 20	               jsr  push
.1719	a2 df		               ldx  #<blankmsg
.171b	a0 18		               ldy  #>blankmsg
.171d	20 e7 1f	               jsr  putscxy
.1720	a2 9a		               ldx  #<menua_msg
.1722	a0 1a		               ldy  #>menua_msg
.1724	20 e7 1f	               jsr  putscxy
.1727	20 8e 20	               jsr  pop
.172a	08		               php
.172b	48		               pha
.172c	8a		               txa
.172d	48		               pha
.172e	ad ec 1e	               lda  f8bbutton
.1731	48		               pha
.1732	a9 92		               lda  #146
.1734	8d fe 1e	               sta  f8bbutton+18
.1737	a9 01		               lda  #flashcol
.1739	8d ec 1e	               sta  f8bbutton
.173c	a2 ec		               ldx  #<f8bbutton
.173e	a0 1e		               ldy  #>f8bbutton
.1740	20 e7 1f	               jsr  putscxy
.1743	20 44 11	               jsr  delay
.1746	a9 12		               lda  #18
.1748	8d fe 1e	               sta  f8bbutton+18
.174b	68		               pla
.174c	8d ec 1e	               sta  f8bbutton
.174f	a2 ec		               ldx  #<f8bbutton
.1751	a0 1e		               ldy  #>f8bbutton
.1753	20 e7 1f	               jsr  putscxy
.1756	68		               pla
.1757	aa		               tax
.1758	68		               pla
.1759	28		               plp
.175a	49 ff		swapit         eor  #$ff
.175c	8d 86 08	               sta  fkeyset
.175f	20 ca 0f	               jsr  drawfkeys
.1762	68		               pla
.1763	20 4f 20	               jsr  push
.1766	a2 df		               ldx  #<blankmsg
.1768	a0 18		               ldy  #>blankmsg
.176a	20 e7 1f	               jsr  putscxy
.176d	a2 0b		               ldx  #<prompt_msg
.176f	a0 19		               ldy  #>prompt_msg
.1771	20 e7 1f	               jsr  putscxy
.1774	20 8e 20	               jsr  pop
.1777	60		               rts
.1778			reverse
.1778	20 4f 20	               jsr  push
.177b	48		               pha
.177c	ad 8b 08	               lda  mapaddr
.177f	85 fd		               sta  $fd
.1781	ad 8c 08	               lda  mapaddr+1
.1784	85 fe		               sta  $fe
.1786	68		               pla
.1787	a0 00		               ldy  #$00
.1789	b1 fd		again          lda  (zpage2),y
.178b	49 ff		               eor  #$ff
.178d	91 fd		               sta  (zpage2),y
.178f	c8		               iny
.1790	c0 08		               cpy  #$08
.1792	d0 f5		               bne  again
.1794	20 8e 20	               jsr  pop
.1797	60		               rts
.1798			scrollup
.1798	20 4f 20	               jsr  push
.179b	48		               pha
.179c	ad 8b 08	               lda  mapaddr
.179f	85 fb		               sta  $fb
.17a1	ad 8c 08	               lda  mapaddr+1
.17a4	85 fc		               sta  $fc
.17a6	68		               pla
.17a7	48		               pha
.17a8	ad 8b 08	               lda  mapaddr
.17ab	85 fd		               sta  $fd
.17ad	ad 8c 08	               lda  mapaddr+1
.17b0	85 fe		               sta  $fe
.17b2	68		               pla
.17b3	20 6e 21	               jsr  inczp2
.17b6	a0 00		               ldy  #$00
.17b8	b1 fb		               lda  (zpage1),y
.17ba	8d cf 17	               sta  tmpbyte
.17bd	b1 fd		again          lda  (zpage2),y
.17bf	91 fb		               sta  (zpage1),y
.17c1	c8		               iny
.17c2	c0 07		               cpy  #$07
.17c4	d0 f7		               bne  again
.17c6	ad cf 17	               lda  tmpbyte
.17c9	91 fb		               sta  (zpage1),y
.17cb	20 8e 20	               jsr  pop
.17ce	60		               rts
>17cf	00		tmpbyte        .byte     $00
.17d0			scrolldown
.17d0	20 4f 20	               jsr  push
.17d3	48		               pha
.17d4	ad 8b 08	               lda  mapaddr
.17d7	85 fb		               sta  $fb
.17d9	ad 8c 08	               lda  mapaddr+1
.17dc	85 fc		               sta  $fc
.17de	68		               pla
.17df	48		               pha
.17e0	ad 8b 08	               lda  mapaddr
.17e3	85 fd		               sta  $fd
.17e5	ad 8c 08	               lda  mapaddr+1
.17e8	85 fe		               sta  $fe
.17ea	68		               pla
.17eb	20 6e 21	               jsr  inczp2
.17ee	a0 07		               ldy  #$07                ;xxxxxxxx zpage1
.17f0	b1 fb		               lda  (zpage1),y          ;xxxxxxxx zpage2
.17f2	8d 09 18	               sta  tmpbyte             ;xxxxxxxx
.17f5	88		again          dey                      ;xxxxxxxx
.17f6	b1 fb		               lda  (zpage1),y          ;xxxxxxxx
.17f8	91 fd		               sta  (zpage2),y          ;xxxxxxxx
.17fa	c0 00		               cpy  #$00                ;xxxxxxxx
.17fc	d0 f7		               bne  again               ;xxxxxxxx
.17fe	a0 00		               ldy  #$00
.1800	ad 09 18	               lda  tmpbyte
.1803	91 fb		               sta  (zpage1),y
.1805	20 8e 20	               jsr  pop
.1808	60		               rts
>1809	00		tmpbyte        .byte     $00
.180a			scrollright
.180a	20 4f 20	               jsr  push
.180d	48		               pha
.180e	ad 8b 08	               lda  mapaddr
.1811	85 fb		               sta  $fb
.1813	ad 8c 08	               lda  mapaddr+1
.1816	85 fc		               sta  $fc
.1818	68		               pla
.1819	a0 00		               ldy  #$00
.181b	b1 fb		again          lda  (zpage1),y
.181d	18		               clc
.181e	6a		               ror
.181f	90 03		               bcc  zero
.1821	18		               clc
.1822	69 80		one            adc  #$80
.1824	91 fb		zero           sta  (zpage1),y
.1826	c8		               iny
.1827	c0 08		               cpy  #$08
.1829	d0 f0		               bne  again
.182b	20 8e 20	               jsr  pop
.182e	60		               rts
.182f			scrollleft
.182f	20 4f 20	               jsr  push
.1832	48		               pha
.1833	ad 8b 08	               lda  mapaddr
.1836	85 fb		               sta  $fb
.1838	ad 8c 08	               lda  mapaddr+1
.183b	85 fc		               sta  $fc
.183d	68		               pla
.183e	a0 00		               ldy  #$00
.1840	b1 fb		again          lda  (zpage1),y
.1842	18		               clc
.1843	2a		               rol
.1844	69 00		               adc  #$00
.1846	91 fb		               sta  (zpage1),y
.1848	c8		               iny
.1849	c0 08		               cpy  #$08
.184b	d0 f3		               bne  again
.184d	20 8e 20	               jsr  pop
.1850	60		               rts
.1851			fillchar
.1851	20 4f 20	               jsr  push
.1854	a9 ff		               lda  #$ff
.1856	20 69 18	               jsr  allsame
.1859	20 8e 20	               jsr  pop
.185c	60		               rts
.185d			clearchar
.185d	20 4f 20	               jsr  push
.1860	a9 00		               lda  #$00
.1862	20 69 18	               jsr  allsame
.1865	20 8e 20	               jsr  pop
.1868	60		               rts
.1869			allsame
.1869	48		               pha
.186a	ad 8b 08	               lda  mapaddr
.186d	85 fd		               sta  $fd
.186f	ad 8c 08	               lda  mapaddr+1
.1872	85 fe		               sta  $fe
.1874	68		               pla
.1875	a0 00		               ldy  #$00
.1877	91 fd		again          sta  (zpage2),y
.1879	c8		               iny
.187a	c0 08		               cpy  #$08
.187c	d0 f9		               bne  again
.187e	60		               rts
.187f			fliphorz
.187f	20 4f 20	               jsr  push
.1882	48		               pha
.1883	ad 8b 08	               lda  mapaddr
.1886	85 fd		               sta  $fd
.1888	ad 8c 08	               lda  mapaddr+1
.188b	85 fe		               sta  $fe
.188d	68		               pla
.188e	a0 00		               ldy  #$00
.1890	b1 fd		nextbyte       lda  (zpage2),y
.1892	a2 00		               ldx  #$00
.1894	2a		rolagain       rol
.1895	6e ab 18	               ror  tmpbyte
.1898	e8		               inx
.1899	e0 08		               cpx  #$08
.189b	30 f7		               bmi  rolagain
.189d	ad ab 18	               lda  tmpbyte
.18a0	91 fd		               sta  (zpage2),y
.18a2	c8		               iny
.18a3	c0 08		               cpy  #$08
.18a5	30 e9		               bmi  nextbyte
.18a7	20 8e 20	               jsr  pop
.18aa	60		               rts
>18ab	00		tmpbyte        .byte     $00
.18ac			flipvert
.18ac	20 4f 20	               jsr  push
.18af	48		               pha
.18b0	ad 8b 08	               lda  mapaddr
.18b3	85 fd		               sta  $fd
.18b5	ad 8c 08	               lda  mapaddr+1
.18b8	85 fe		               sta  $fe
.18ba	68		               pla
.18bb	a0 00		               ldy  #$00
.18bd	b1 fd		tostack        lda  (zpage2),y
.18bf	48		               pha
.18c0	c8		               iny
.18c1	c0 08		               cpy  #$08
.18c3	d0 f8		               bne  tostack
.18c5	a0 00		               ldy  #$00
.18c7	68		fromstack      pla
.18c8	91 fd		               sta  (zpage2),y
.18ca	c8		               iny
.18cb	c0 08		               cpy  #$08
.18cd	d0 f8		               bne  fromstack
.18cf	20 8e 20	               jsr  pop
.18d2	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: messages_en.asm

>18d3	0a 01 05	editor_msg     .byte vrose,1,5
>18d6	5b 45 44 49	               .null     "[editor]"
>18da	54 4f 52 5d 00
>18df	03 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>18e3	20 20 20 20	               .null     "                                       "
>18e7	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>18f7	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1907	20 20 20 00
>190b	03 00 05 92	prompt_msg     .byte     mesgcol,0,5,146
>190f	20 45 4e 54	               .null     " enter f-key command :"
>1913	45 52 20 46 2d 4b 45 59 20 43 4f 4d 4d 41 4e 44
>1923	20 3a 00
.1926			f1a_msg
>1926	03 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>192a	20 45 44 49	               .null     " edit mode: chr$(   )",146
>192e	54 20 4d 4f 44 45 3a 20 43 48 52 24 28 20 20 20
>193e	29 92 00
.1941			f2a_msg
>1941	03 00 05	copy_msg       .byte     mesgcol,0,5
>1944	20 45 4e 54	               .null     " enter character to copy:"
>1948	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>1958	43 4f 50 59 3a 00
.195e			f3a_msg
>195e	03 00 05 92	save_msg       .byte     mesgcol,0,5,146
>1962	20 53 41 56	               .null     " save on cassette or disk? (c/d): "
>1966	45 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>1976	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 20 00
.1985			f4a_msg
>1985	03 00 05 92	load_msg       .byte     mesgcol,0,5,146
>1989	20 4c 4f 41	               .null     " load from cassette or disk? (c/d): "
>198d	44 20 46 52 4f 4d 20 43 41 53 53 45 54 54 45 20
>199d	4f 52 20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 20
>19ad	00
.19ae			f5a_msg
>19ae	03 00 05	clear_msg      .byte     mesgcol,0,5
>19b1	20 43 4c 45	               .null     " clear char: chr$(   )"
>19b5	41 52 20 43 48 41 52 3a 20 43 48 52 24 28 20 20
>19c5	20 29 00
.19c8			f6a_msg
>19c8	03 00 05	fill_msg       .byte     mesgcol,0,5
>19cb	20 46 49 4c	               .null     " fill char:  chr$(   )"
>19cf	4c 20 43 48 41 52 3a 20 20 43 48 52 24 28 20 20
>19df	20 29 00
.19e2			f7a_msg
>19e2	03 00 05	work_msg       .byte     mesgcol,0,5
>19e5	20 52 45 53	               .null     " restoring all characters."
>19e9	54 4f 52 49 4e 47 20 41 4c 4c 20 43 48 41 52 41
>19f9	43 54 45 52 53 2e 00
.1a00			f1b_msg
>1a00	03 00 05	invr_msg       .byte     mesgcol,0,5
>1a03	20 46 4c 49	               .null     " flipping vertically:"
>1a07	50 50 49 4e 47 20 56 45 52 54 49 43 41 4c 4c 59
>1a17	3a 00
.1a19			f2b_msg
>1a19	03 00 05	flip_msg       .byte     mesgcol,0,5
>1a1c	20 46 4c 49	               .null     " flipping horizontally:"
>1a20	50 50 49 4e 47 20 48 4f 52 49 5a 4f 4e 54 41 4c
>1a30	4c 59 3a 00
.1a34			f3b_msg
>1a34	03 00 05	scrollr_msg    .byte     mesgcol,0,5
>1a37	20 53 43 52	               .null     " scrolling right:"
>1a3b	4f 4c 4c 49 4e 47 20 52 49 47 48 54 3a 00
.1a49			f4b_msg
>1a49	03 00 05	scrolll_msg    .byte     mesgcol,0,5
>1a4c	20 53 43 52	               .null     " scrolling left:"
>1a50	4f 4c 4c 49 4e 47 20 4c 45 46 54 3a 00
.1a5d			f5b_msg
>1a5d	03 00 05	scrollu_msg    .byte     mesgcol,0,5
>1a60	20 53 43 52	               .null     " scrolling up:"
>1a64	4f 4c 4c 49 4e 47 20 55 50 3a 00
.1a6f			f6b_msg
>1a6f	03 00 05	scrolld_msg    .byte     mesgcol,0,5
>1a72	20 53 43 52	               .null     " scrolling down:"
>1a76	4f 4c 4c 49 4e 47 20 44 4f 57 4e 3a 00
.1a83			f7b_msg
>1a83	03 00 05	rvrs_msg       .byte     mesgcol,0,5
>1a86	20 52 45 56	               .null     " reverse character:"
>1a8a	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
>1a9a	03 00 05	menua_msg      .byte     mesgcol,0,5
>1a9d	20 59 4f 55	               .null     " you are being moved to menu 1."
>1aa1	20 41 52 45 20 42 45 49 4e 47 20 4d 4f 56 45 44
>1ab1	20 54 4f 20 4d 45 4e 55 20 31 2e 00
>1abd	03 00 05	menub_msg      .byte     mesgcol,0,5
>1ac0	20 59 4f 55	               .null     " you are being moved to menu 2."
>1ac4	20 41 52 45 20 42 45 49 4e 47 20 4d 4f 56 45 44
>1ad4	20 54 4f 20 4d 45 4e 55 20 32 2e 00
>1ae0	07 00 05	copychar_msg   .byte     vjaune,0,5
>1ae3	20 45 4e 54	               .null     " enter character to copy from (?).",157,157,157
>1ae7	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>1af7	43 4f 50 59 20 46 52 4f 4d 20 28 3f 29 2e 9d 9d
>1b07	9d 00
>1b09	07 00 05	fname_msg      .byte     vjaune,0,5
>1b0c	20 45 4e 54	               .null     " enter a 6 letter filename : ",$a4,$a4,$a4,$a4,$a4,$a4,".chr",157,157,157,157,157,157,157,157,157,157
>1b10	45 52 20 41 20 36 20 4c 45 54 54 45 52 20 46 49
>1b20	4c 45 4e 41 4d 45 20 3a 20 a4 a4 a4 a4 a4 a4 2e
>1b30	43 48 52 9d 9d 9d 9d 9d 9d 9d 9d 9d 9d 00
>1b3e	0e 15 18 12	quit_msg       .byte     vblue1,21,24,18
>1b42	43 54 52 4c	               .text     "ctrl-x",146
>1b46	2d 58 92
>1b49	20 54 4f 20	               .null     " to quit."
>1b4d	51 55 49 54 2e 00
.1b53			menu_msg
>1b53	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>1b57	43 54 52 4c	               .text     "ctrl-x",146
>1b5b	2d 58 92
>1b5e	20 54 4f 20	               .null     " to menu."
>1b62	4d 45 4e 55 2e 00
>1b68	07 04 06 12	whoami0        .byte     whoamicol,4,6,18
>1b6c	20 20 20 20	               .null     "                               ",146
>1b70	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b80	20 20 20 20 20 20 20 20 20 20 20 92 00
>1b8d	07 04 07 12	whoami1        .byte     whoamicol,4,7,18
>1b91	20 20 20 20	               .null     "          ",146," charedit ",18,"           ",146
>1b95	20 20 20 20 20 20 92 20 43 48 41 52 45 44 49 54
>1ba5	20 12 20 20 20 20 20 20 20 20 20 20 20 92 00
>1bb4	07 04 08 12	whoami2        .byte     whoamicol,4,8,18
>1bb8	20 20 20 20	               .null     "                               ",146
>1bbc	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1bcc	20 20 20 20 20 20 20 20 20 20 20 92 00
>1bd9	07 04 09 12	whoami3        .byte     whoamicol,4,9,18
>1bdd	20 20 49 4e	               .null     "  inspired from john heilborn  ",146
>1be1	53 50 49 52 45 44 20 46 52 4f 4d 20 4a 4f 48 4e
>1bf1	20 48 45 49 4c 42 4f 52 4e 20 20 92 00
>1bfe	07 04 0a 12	whoami4        .byte     whoamicol,4,10,18
>1c02	20 20 20 20	               .null     "      isbn: 0-942386-29-9      ",146
>1c06	20 20 49 53 42 4e 3a 20 30 2d 39 34 32 33 38 36
>1c16	2d 32 39 2d 39 20 20 20 20 20 20 92 00
>1c23	07 04 0b 12	whoami5        .byte     whoamicol,4,11,18
>1c27	20 20 20 20	               .null     "                               ",146
>1c2b	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1c3b	20 20 20 20 20 20 20 20 20 20 20 92 00
>1c48	07 04 0c 12	whoami6        .byte     whoamicol,4,12,18
>1c4c	20 43 4f 44	               .null     " coded in assembly language by ",146
>1c50	45 44 20 49 4e 20 41 53 53 45 4d 42 4c 59 20 4c
>1c60	41 4e 47 55 41 47 45 20 42 59 20 92 00
>1c6d	07 04 0d 12	whoami7        .byte     whoamicol,4,13,18
>1c71	20 20 20 20	               .null     "     daniel lafrance 2023      ",146
>1c75	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>1c85	20 32 30 32 33 20 20 20 20 20 20 92 00
>1c92	07 04 0e 12	whoami8        .byte     whoamicol,4,14,18
>1c96	20 20 20 20	               .null     "    version:",version,"    ",146
>1c9a	56 45 52 53 49 4f 4e 3a 32 30 32 33 31 31 31 36
>1caa	2d 31 30 30 34 30 30 20 20 20 20 92 00
>1cb7	07 04 0f 12	whoami9        .byte     whoamicol,4,15,18
>1cbb	20 20 20 20	               .null     "                               ",146
>1cbf	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1ccf	20 20 20 20 20 20 20 20 20 20 20 92 00
>1cdc	03 06 10 14	bye_msg        .byte     vcyan,6,16,20
>1ce0	20 54 48 41	               .null     " thanks and have a good day ",146
>1ce4	4e 4b 53 20 41 4e 44 20 48 41 56 45 20 41 20 47
>1cf4	4f 4f 44 20 44 41 59 20 92 00
>1cfe	0d 05 18 12	any_msg        .byte     vvert1,5,24,18
>1d02	20 20 55 53	               .null         "  use the [anykey] to basic  ",146
>1d06	45 20 54 48 45 20 5b 41 4e 59 4b 45 59 5d 20 54
>1d16	4f 20 42 41 53 49 43 20 20 92 00
>1d21	03 12 07	titremenu1     .byte     menu1col1,fkeyleft,f1top-2       ;133
>1d24	12 20 20 20	               .null     18,"   function set #1   ",146
>1d28	46 55 4e 43 54 49 4f 4e 20 53 45 54 20 23 31 20
>1d38	20 20 92 00
>1d3c	0d 12 07	titremenu2     .byte     menu2col1,fkeyleft,f1top-2       ;133
>1d3f	12 20 20 20	               .null     18,"   function set #2   ",146
>1d43	46 55 4e 43 54 49 4f 4e 20 53 45 54 20 23 32 20
>1d53	20 20 92 00
>1d57	03 12 09	f1abutton      .byte     menu1col1,fkeyleft,f1top       ;133
>1d5a	45 44 49 54	               .text     "edit character."
>1d5e	20 43 48 41 52 41 43 54 45 52 2e
>1d69	12		               .byte     18             ; position 15
>1d6a	a9 20 46 31	               .null     $a9," f1 ",223,146
>1d6e	20 df 92 00
>1d72	0e 12 0a	f2abutton      .byte     menu1col2,fkeyleft,f1top+1     ;138
>1d75	43 4f 50 59	               .text     "copy from......"
>1d79	20 46 52 4f 4d 2e 2e 2e 2e 2e 2e
>1d84	12		               .byte     18   ; position 15
>1d85	20 20 46 32	               .null     "  f2  ",146
>1d89	20 20 92 00
>1d8d	03 12 0c	f3abutton      .byte     menu1col1,fkeyleft,f1top+3     ;137
>1d90	53 41 56 45	               .text     "save to........"
>1d94	20 54 4f 2e 2e 2e 2e 2e 2e 2e 2e
>1d9f	12		               .byte     18            ; position 15
>1da0	a9 20 46 33	               .null     $a9," f3 ",223,146
>1da4	20 df 92 00
>1da8	0e 12 0d	f4abutton      .byte     menu1col2,fkeyleft,f1top+4     ;134
>1dab	4c 4f 41 44	               .text     "load from......"
>1daf	20 46 52 4f 4d 2e 2e 2e 2e 2e 2e
>1dba	12		               .byte     18             ; position 15
>1dbb	20 20 46 34	               .null     "  f4  ",146
>1dbf	20 20 92 00
>1dc3	03 12 0f	f5abutton      .byte     menu1col1,fkeyleft,f1top+6     ;135
>1dc6	43 4c 45 41	               .text     "clear.........."
>1dca	52 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e
>1dd5	12		               .byte     18             ; position 15
>1dd6	a9 20 46 35	               .null     $a9," f5 ",223,146
>1dda	20 df 92 00
>1dde	0e 12 10	f6abutton      .byte     menu1col2,fkeyleft,f1top+7    ;139
>1de1	46 49 4c 4c	               .text     "fill..........."
>1de5	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e
>1df0	12		               .byte     18             ; position 15
>1df1	20 20 46 36	               .null     "  f6  ",146
>1df5	20 20 92 00
>1df9	03 12 12	f7abutton      .byte     menu1col1,fkeyleft,f1top+9    ;136
>1dfc	52 45 53 54	               .text     "restore all...."
>1e00	4f 52 45 20 41 4c 4c 2e 2e 2e 2e
>1e0b	12		               .byte     18             ; position 15
>1e0c	a9 20 46 37	               .null     $a9," f7 ",223,146
>1e10	20 df 92 00
>1e14	0e 12 13	f8abutton      .byte     menu1col2,fkeyleft,f1top+10
>1e17	47 4f 20 54	               .text     "go to menu #2.."
>1e1b	4f 20 4d 45 4e 55 20 23 32 2e 2e
>1e26	12		               .byte     18             ; position 15
>1e27	20 20 46 38	               .null     "  f8  ", 146
>1e2b	20 20 92 00
>1e2f	0d 12 09	f1bbutton      .byte     menu2col1,fkeyleft,f1top
>1e32	56 45 52 54	               .text     "vertical flip.."
>1e36	49 43 41 4c 20 46 4c 49 50 2e 2e
>1e41	12		               .byte     18             ; position 15
>1e42	a9 20 46 31	               .null     $a9," f1 ",223,146
>1e46	20 df 92 00
>1e4a	05 12 0a	f2bbutton      .byte     menu2col2,fkeyleft,f1top+1
>1e4d	48 4f 52 5a	               .text     "horzontal flip."
>1e51	4f 4e 54 41 4c 20 46 4c 49 50 2e
>1e5c	12		               .byte     18             ; position 15
>1e5d	20 20 46 32	               .null     "  f2  ",146
>1e61	20 20 92 00
>1e65	0d 12 0c	f3bbutton      .byte     menu2col1,fkeyleft,f1top+3
>1e68	53 43 52 4f	               .text     "scroll to right"
>1e6c	4c 4c 20 54 4f 20 52 49 47 48 54
>1e77	12		               .byte     18             ; position 15
>1e78	a9 20 46 33	               .null     $a9," f3 ",223,146
>1e7c	20 df 92 00
>1e80	05 12 0d	f4bbutton      .byte     menu2col2,fkeyleft,f1top+4
>1e83	53 43 52 4f	               .text     "scroll to left."
>1e87	4c 4c 20 54 4f 20 4c 45 46 54 2e
>1e92	12		               .byte     18             ; position 15
>1e93	20 20 46 34	               .null     "  f4  ",146
>1e97	20 20 92 00
>1e9b	0d 12 0f	f5bbutton      .byte     menu2col1,fkeyleft,f1top+6
>1e9e	53 43 52 4f	               .text     "scroll up......"
>1ea2	4c 4c 20 55 50 2e 2e 2e 2e 2e 2e
>1ead	12		               .byte     18             ; position 15
>1eae	a9 20 46 35	               .null     $a9," f5 ",223,146
>1eb2	20 df 92 00
>1eb6	05 12 10	f6bbutton      .byte     menu2col2,fkeyleft,f1top+7
>1eb9	53 43 52 4f	               .text     "scroll down...."
>1ebd	4c 4c 20 44 4f 57 4e 2e 2e 2e 2e
>1ec8	12		               .byte     18             ; position 15
>1ec9	20 20 46 36	               .null     "  f6  ",146
>1ecd	20 20 92 00
>1ed1	0d 12 12	f7bbutton      .byte     menu2col1,fkeyleft,f1top+9
>1ed4	52 45 56 45	               .text     "reverse bits..."
>1ed8	52 53 45 20 42 49 54 53 2e 2e 2e
>1ee3	12		               .byte     18             ; position 15
>1ee4	a9 20 46 37	               .null     $a9," f7 ",223,146
>1ee8	20 df 92 00
>1eec	05 12 13	f8bbutton      .byte     menu2col2,fkeyleft,f1top+10
>1eef	47 4f 20 54	               .text     "go to menu #1.."
>1ef3	4f 20 4d 45 4e 55 20 23 31 2e 2e
>1efe	12		               .byte     18             ; position 15
>1eff	20 20 46 38	               .null     "  f8  ", 146
>1f03	20 20 92 00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.1f07			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.1f07			screendis
.1f07	08		               php
.1f08	48		               pha
.1f09	ad 11 d0	               lda  $d011
.1f0c	29 ef		               and  #%11101111
.1f0e	8d 11 d0	               sta  $d011
.1f11	68		               pla
.1f12	28		               plp
.1f13	60		               rts
.1f14			screenena
.1f14	08		               php
.1f15	48		               pha
.1f16	ad 11 d0	               lda  $d011
.1f19	09 10		               ora  #%00010000
.1f1b	8d 11 d0	               sta  $d011
.1f1e	68		               pla
.1f1f	28		               plp
.1f20	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.1f21			scrmaninit
.1f21	20 4f 20	               jsr  push
.1f24	a9 06		               lda  #vbleu
.1f26	8d 21 d0	               sta  vicbackcol
.1f29	a9 05		               lda  #vvert
.1f2b	8d 20 d0	               sta  vicbordcol
.1f2e	a9 01		               lda  #vblanc
.1f30	8d 86 02	               sta  bascol
.1f33	ad 00 04	               lda  scrnram
.1f36	8d 00 04	               sta  scrnram
.1f39	20 41 1f	               jsr  cls
.1f3c	20 8e 20	               jsr  pop
.1f3f	60		               rts
>1f40	8e		characterset   .byte b_uppercase
.1f41			cls
.1f41	08		               php
.1f42	48		               pha
.1f43	a9 93		               lda  #$93
.1f45	20 58 1f	               jsr  putch
.1f48	68		               pla
.1f49	28		               plp
.1f4a	60		               rts
.1f4b			putnch
.1f4b	08		               php
.1f4c	e0 00		               cpx  #$00
.1f4e	f0 06		               beq  out
.1f50	20 d2 ff	again          jsr  $ffd2
.1f53	ca		               dex
.1f54	d0 fa		               bne  again
.1f56	28		out            plp
.1f57	60		               rts
.1f58			putch
.1f58	08		               php
.1f59	20 d2 ff	               jsr  $ffd2
.1f5c	28		               plp
.1f5d	60		               rts
.1f5e			puts
.1f5e	20 4f 20	               jsr  push
.1f61	86 fb		               stx  zpage1
.1f63	84 fc		               sty  zpage1+1
.1f65	a0 00		               ldy  #0
.1f67	b1 fb		next           lda  (zpage1),y
.1f69	f0 09		               beq  exit
.1f6b	20 58 1f	               jsr  putch
.1f6e	20 56 21	               jsr  inczp1
.1f71	4c 67 1f	               jmp  next
.1f74	20 8e 20	exit           jsr  pop
.1f77	60		               rts
.1f78			gotoxy
.1f78	08		               php
.1f79	18		               clc
.1f7a	8a		               txa
.1f7b	48		               pha
.1f7c	98		               tya
.1f7d	aa		               tax
.1f7e	68		               pla
.1f7f	a8		               tay
.1f80	20 f0 ff	               jsr  kplot
.1f83	28		               plp
.1f84	60		               rts
.1f85			cursor
=$0286			bascol    =    $0286
.1f85	08		               php
.1f86	48		               pha
.1f87	90 12		               bcc  restore
.1f89	20 f0 ff	               jsr  kplot
.1f8c	8c ad 1f	               sty  cx
.1f8f	8e ae 1f	               stx  cy
.1f92	ad 86 02	               lda  bascol
.1f95	8d af 1f	               sta  bcol
.1f98	4c aa 1f	               jmp  out
.1f9b	ae ae 1f	restore        ldx  cy
.1f9e	ac ad 1f	               ldy  cx
.1fa1	20 f0 ff	               jsr  kplot
.1fa4	ad af 1f	               lda  bcol
.1fa7	8d 86 02	               sta  bascol
.1faa	68		out            pla
.1fab	28		               plp
.1fac	60		               rts
>1fad	00		cx   .byte     $00
>1fae	00		cy   .byte     $00
>1faf	00		bcol .byte     $00
.1fb0			cursave
.1fb0	08		               php
.1fb1	38		               sec
.1fb2	20 85 1f	               jsr  cursor
.1fb5	28		               plp
.1fb6	60		               rts
.1fb7			curput
.1fb7	08		               php
.1fb8	18		               clc
.1fb9	20 85 1f	               jsr  cursor
.1fbc	28		               plp
.1fbd	60		               rts
.1fbe			putsxy
.1fbe	20 4f 20	               jsr  push
.1fc1	86 fb		               stx  zpage1
.1fc3	84 fc		               sty  zpage1+1
.1fc5	a0 00		               ldy  #$00
.1fc7	b1 fb		               lda  (zpage1),y
.1fc9	aa		               tax
.1fca	20 56 21	               jsr  inczp1
.1fcd	b1 fb		               lda  (zpage1),y
.1fcf	a8		               tay
.1fd0	20 78 1f	               jsr  gotoxy
.1fd3	20 56 21	               jsr  inczp1
.1fd6	a6 fb		               ldx  zpage1
.1fd8	a4 fc		               ldy  zpage1+1
.1fda	20 5e 1f	               jsr  puts
.1fdd	20 8e 20	               jsr  pop
.1fe0	60		               rts
>1fe1	00 00		straddr   .word     $00
>1fe3	00		px        .byte     $00
>1fe4	00		py        .byte     $00
>1fe5	00 00		zp1       .word     $00
.1fe7			putscxy
.1fe7	20 4f 20	               jsr  push
.1fea	84 fc		               sty  zpage1+1
.1fec	86 fb		               stx  zpage1
.1fee	ad 86 02	               lda  bascol
.1ff1	8d 11 20	               sta  bc
.1ff4	a0 00		               ldy #$00
.1ff6	b1 fb		               lda  (zpage1),y
.1ff8	8d 86 02	               sta  bascol
.1ffb	20 56 21	               jsr  inczp1
.1ffe	a6 fb		               ldx  zpage1
.2000	a4 fc		               ldy  zpage1+1
.2002	20 be 1f	               jsr  putsxy
.2005	ad 11 20	               lda  bc
.2008	8d 86 02	               sta  bascol
.200b	20 8e 20	               jsr  pop
.200e	60		               rts
>200f	00 00		straddr  .word      $00
>2011	00		bc       .byte      $00
>2012	00 00		zp1      .word      $00
.2014			putrahex
.2014	08		               php
.2015	48		               pha
.2016	20 6c 22	               jsr  a2hex
.2019	a9 0b		               lda  #<a2hexstr
.201b	a0 22		               ldy  #>a2hexstr
.201d	20 5e 1f	               jsr  puts
.2020	68		               pla
.2021	28		               plp
.2022	60		               rts
.2023			kputrahexxy
.2023			bputrahexxy
.2023			putrahexxy
.2023	08		               php
.2024	20 6c 22	               jsr  a2hex
.2027	a9 08		               lda  #<a2hexpos
.2029	a0 22		               ldy  #>a2hexpos
.202b	20 be 1f	               jsr  putsxy
.202e	68		               pla
.202f	28		               plp
.2030	60		               rts
.2031			putrahexcxy
.2031	08		               php
.2032	20 6c 22	               jsr  a2hex
.2035	a9 08		               lda  #<a2hexpos
.2037	a0 22		               ldy  #>a2hexpos
.2039	20 e7 1f	               jsr  putscxy
.203c	68		               pla
.203d	28		               plp
.203e	60		               rts
.203f			setinverse
.203f	48		               pha
.2040	a9 12		               lda  #$12
.2042	20 d2 ff	               jsr  $ffd2
.2045	68		               pla
.2046	60		               rts
.2047			clrinverse
.2047	48		               pha
.2048	a9 92		               lda  #$92
.204a	20 d2 ff	               jsr  $ffd2
.204d	68		               pla
.204e	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.204f			push
.204f	08		          php            ; stack : flg, pcl, pch
.2050	78		          sei
.2051	8d 8b 20	          sta  ra        ; save a
.2054	68		          pla            ; stack : pcl, pch
.2055	8d 8a 20	          sta  rp        ; save rp
.2058	68		          pla            ; stack : pch
.2059	8d 8c 20	          sta  pc        ; save pcl
.205c	68		          pla            ; stack : -
.205d	8d 8d 20	          sta  pc+1      ; save pch
.2060	a5 fb		          lda  zpage1    ; get zpage1 low byte
.2062	48		          pha            ; stack : zp1l
.2063	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.2065	48		          pha            ; stack : zp1h, zp1l
.2066	a5 fd		          lda  zpage2    ; get zpage2 low byte
.2068	48		          pha            ; stack : zp2l, zp1h, zp1l
.2069	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.206b	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.206c	ad 8a 20	          lda  rp        ; get rp
.206f	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.2070	ad 8b 20	          lda  ra        ; get a
.2073	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.2074	8a		          txa            ; get x
.2075	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.2076	98		          tya            ; get y
.2077	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2078	ad 8d 20	          lda  pc+1      ; get pch
.207b	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.207c	ad 8c 20	          lda  pc        ; get pcl
.207f	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2080	ad 8a 20	          lda  rp        ; get rp
.2083	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2084	ad 8b 20	          lda  ra        ; get a
.2087	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2088	58		          cli
.2089	60		          rts
>208a	00		rp        .byte     0
>208b	00		ra        .byte     0
>208c	00 00		pc        .word     0
.208e			pull
.208e			pop
.208e	78		          sei
.208f	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2090	8d c3 20	          sta  pc        ; save pcl
.2093	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2094	8d c4 20	          sta  pc+1      ; save pch
.2097	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.2098	a8		          tay            ; set y
.2099	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.209a	aa		          tax            ; set x
.209b	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.209c	8d c2 20	          sta  ra        ; save a
.209f	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.20a0	8d c1 20	          sta  rp        ; save rp
.20a3	68		          pla            ; stack : zp2l, zp1h, zp1l
.20a4	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.20a6	68		          pla            ; stack : zp1h, zp1l
.20a7	85 fd		          sta  zpage2    ; get zpage2 High byte
.20a9	68		          pla            ; stack : zp1l
.20aa	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.20ac	68		          pla            ; stack :
.20ad	85 fb		          sta  zpage1    ; get zpage1 High byte
.20af	ad c4 20	          lda  pc+1      ; get pch
.20b2	48		          pha            ; stack : pch
.20b3	ad c3 20	          lda  pc
.20b6	48		          pha            ; stack : pcl, pch
.20b7	ad c1 20	          lda  rp        ; get rp
.20ba	48		          pha            ; stack : rp, pcl, pch
.20bb	ad c2 20	          lda  ra        ; set ra
.20be	58		          cli
.20bf	28		          plp            ; stack : pcl, pch
.20c0	60		          rts
>20c1	00		rp        .byte     0
>20c2	00		ra        .byte     0
>20c3	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.20c5			blkfill
.20c5	20 4f 20	bf0            jsr  push
.20c8	20 86 21	               jsr  savezp1
.20cb	84 fc		               sty  zpage1+1
.20cd	a0 00		               ldy  #$00
.20cf	84 fb		               sty  zpage1
.20d1	91 fb		bf1            sta  (zpage1),y
.20d3	c8		               iny
.20d4	d0 fb		               bne  bf1
.20d6	20 95 21	               jsr  restzp1
.20d9	20 8e 20	               jsr  pop
.20dc	60		               rts
.20dd			memfill
.20dd	20 4f 20	               jsr  push
.20e0	20 c5 20	mf1            jsr  blkfill
.20e3	c8		               iny
.20e4	ca		               dex
.20e5	d0 f9		               bne  mf1
.20e7	20 8e 20	               jsr  pop
.20ea	60		               rts
.20eb			memmove
.20eb	20 4f 20	               jsr  push
.20ee	ba		               tsx            ; On se crée un pointeur ...
.20ef	8a		               txa
.20f0	18		               clc
.20f1	69 0b		               adc  #11
.20f3	a8		               tay
.20f4	a2 06		               ldx  #$06
.20f6	b9 00 01	nextbyte       lda  $0100,y
.20f9	99 45 21	               sta  words,y
.20fc	c8		               iny
.20fd	ca		               dex
.20fe	d0 f6		               bne  nextbyte
.2100	ad 45 21	               lda  s
.2103	8d 1c 21	               sta  source+1
.2106	ad 46 21	               lda  s+1
.2109	8d 1d 21	               sta  source+2
.210c	ad 47 21	               lda  d
.210f	8d 19 21	               sta  destin+1
.2112	ad 48 21	               lda  d+1
.2115	8d 1a 21	               sta  destin+2
.2118	ad ff ff	destin         lda  $ffff
.211b	8d ff ff	source         sta  $ffff
.211e	ee 19 21	               inc  destin+1
.2121	d0 03		               bne  src
.2123	ee 1a 21	               inc  destin+2
.2126	ee 1c 21	src            inc  source+1
.2129	d0 03		               bne  cnt
.212b	ee 1d 21	               inc  source+2
.212e	ad 49 21	cnt            lda  compte
.2131	d0 08		               bne  decit
.2133	ad 4a 21	               lda  compte+1
.2136	f0 09		               beq  fini
.2138	ce 4a 21	               dec  compte+1
.213b	ce 49 21	decit          dec  compte
.213e	4c 18 21	               jmp  destin
.2141	20 8e 20	fini           jsr  pop
.2144	60		               rts
.2145			words
>2145	00 00		s         .word     $0000
>2147	00 00		d         .word     $0000
>2149	00 00		compte    .word     $0000
.214b			decword
.214b	20 4f 20	               jsr  push
.214e	86 fd		               stx  zpage2
.2150	84 fe		               sty  zpage2+1
.2152	20 8e 20	               jsr  pop
.2155	60		               rts
.2156			inczp1
.2156	08		               php
.2157	48		               pha
.2158	e6 fb		               inc  zpage1
.215a	a5 fb		               lda  zpage1
.215c	d0 02		               bne  nopage
.215e	e6 fc		               inc  zpage1+1
.2160	68		nopage         pla
.2161	28		               plp
.2162	60		               rts
.2163			deczp1
.2163	08		                php
.2164	48		                pha
.2165	c6 fb		                dec  zpage1
.2167	d0 02		                bne  nopage
.2169	c6 fc		                dec  zpage1+1
.216b	68		nopage          pla
.216c	28		                plp
.216d	60		                rts
.216e			inczp2
.216e	08		               php
.216f	48		               pha
.2170	e6 fd		               inc  zpage2
.2172	a5 fd		               lda  zpage2
.2174	d0 02		               bne  nopage
.2176	e6 fe		               inc  zpage2+1
.2178	68		nopage         pla
.2179	28		               plp
.217a	60		               rts
.217b			deczp2
.217b	08		               php
.217c	48		               pha
.217d	a5 fd		               lda  zpage2
.217f	d0 02		               bne  nopage
.2181	c6 fe		               dec  zpage2+1
.2183	68		nopage         pla
.2184	28		               plp
.2185	60		               rts
.2186			savezp1
.2186	08		               php
.2187	48		               pha
.2188	a5 fb		               lda  zpage1
.218a	8d 02 22	               sta  zp1
.218d	a5 fc		               lda  zpage1+1
.218f	8d 03 22	               sta  zp1+1
.2192	68		               pla
.2193	28		               plp
.2194	60		               rts
.2195			restzp1
.2195	08		               php
.2196	48		               pha
.2197	ad 02 22	               lda zp1
.219a	85 fb		               sta zpage1
.219c	ad 03 22	               lda zp1+1
.219f	85 fc		               sta zpage1+1
.21a1	68		               pla
.21a2	28		               plp
.21a3	60		               rts
.21a4			savezp2
.21a4	08		         php
.21a5	48		         pha
.21a6	a5 fd		         lda zpage2
.21a8	8d 04 22	         sta zp2
.21ab	a5 fe		         lda zpage2+1
.21ad	8d 05 22	         sta zp2+1
.21b0	68		         pla
.21b1	28		         plp
.21b2	60		         rts
.21b3			restzp2
.21b3	08		                php
.21b4	48		                pha
.21b5	ad 04 22	                lda  zp2
.21b8	85 fd		                sta  zpage2
.21ba	ad 05 22	                lda  zp2+1
.21bd	85 fe		                sta  zpage2+1
.21bf	68		                pla
.21c0	28		                plp
.21c1	60		                rts
.21c2			xy2addr
.21c2	08		                php
.21c3	48		                pha
.21c4	8a		                txa
.21c5	48		                pha
.21c6	98		                tya
.21c7	48		                pha
.21c8	ad fd 21	                lda     addr1+1
.21cb	8d ff 21	                sta     addr2+1
.21ce	ad fc 21	                lda     addr1
.21d1	8d fe 21	                sta     addr2
.21d4	c0 00		                cpy     #$00
.21d6	f0 0f		                beq     addx
.21d8	18		moreline        clc
.21d9	6d fb 21	                adc     ymult
.21dc	90 03		                bcc     norepy
.21de	ee ff 21	                inc     addr2+1
.21e1	8d fe 21	norepy          sta     addr2
.21e4	88		                dey
.21e5	d0 f1		                bne     moreline
.21e7	8a		addx            txa
.21e8	18		                clc
.21e9	6d fe 21	                adc     addr2
.21ec	90 03		                bcc     thatsit
.21ee	ee ff 21	                inc     addr2+1
.21f1	8d fe 21	thatsit         sta     addr2
.21f4	68		                pla
.21f5	a8		                tay
.21f6	68		                pla
.21f7	aa		                tax
.21f8	68		                pla
.21f9	28		                plp
.21fa	60		                rts
>21fb	28		ymult          .byte     40
>21fc	00 00		addr1          .word     $0000
>21fe	00 00		addr2          .word     $0000
>2200	00 00		bytecnt        .word     $0000
>2202	00 00		zp1        .word   $0000
>2204	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>2206	01		a2hexcol       .byte     1              ; pour aputscxy
>2207	00		a2hexbkcol     .byte     %00000000
.2208			a2hexpos
>2208	00		a2hexpx        .byte     0              ; pour aputsxy
>2209	00		a2hexpy        .byte     0
>220a	24		a2hexprefix    .byte     "$"            ; pour aputs
>220b	00 00		a2hexstr       .word     $00
>220d	00 00		               .word     $00
>220f	00		               .byte     0              ; 0 end string
>2210	30 30 30 30	abin           .null     "00000000"
>2214	30 30 30 30 00
>2219	20 20 20 00	adec           .null     "   "
.221d			putahexfmtxy
.221d	20 4f 20	               jsr  push
.2220	20 6c 22	               jsr  a2hex
.2223	ae 08 22	               ldx  a2hexpx
.2226	ac 09 22	               ldy  a2hexpy
.2229	20 78 1f	               jsr  gotoxy
.222c	a2 0a		               ldx  #<a2hexprefix
.222e	a0 22		               ldy  #>a2hexprefix
.2230	20 5e 1f	               jsr  puts
.2233	20 8e 20	               jsr  pop
.2236	60		               rts
.2237			putahexfmt
.2237	20 4f 20	               jsr  push
.223a	20 6c 22	               jsr  a2hex
.223d	a2 0a		               ldx  #<a2hexprefix
.223f	a0 22		               ldy  #>a2hexprefix
.2241	20 5e 1f	               jsr  puts
.2244	20 8e 20	               jsr  pop
.2247	60		               rts
.2248			putahex
.2248	20 4f 20	               jsr  push
.224b	20 6c 22	               jsr  a2hex
.224e	a2 0b		               ldx  #<a2hexstr
.2250	a0 22		               ldy  #>a2hexstr
.2252	20 5e 1f	               jsr  puts
.2255	20 8e 20	               jsr  pop
.2258	60		               rts
.2259			nib2hex
.2259	08		               php
.225a	29 0f		               and  #$0f
.225c	f8		               sed
.225d	18		               clc
.225e	69 90		               adc  #$90
.2260	69 40		               adc  #$40
.2262	d8		               cld
.2263	28		               plp
.2264	60		               rts
.2265			lsra4bits
.2265	08		               php
.2266	4a		               lsr
.2267	4a		               lsr
.2268	4a		               lsr
.2269	4a		               lsr
.226a	28		               plp
.226b	60		               rts
.226c			a2hex
.226c	08		               php
.226d	48		               pha
.226e	48		               pha
.226f	20 65 22	               jsr  lsra4bits
.2272	20 59 22	               jsr  nib2hex
.2275	8d 0b 22	               sta  a2hexstr
.2278	68		               pla
.2279	20 59 22	               jsr  nib2hex
.227c	8d 0c 22	               sta  a2hexstr+1
.227f	a9 00		               lda  #$00                ; set end of string
.2281	8d 0d 22	               sta  a2hexstr+2
.2284	68		               pla
.2285	28		               plp
.2286	60		               rts
.2287			xy2hex
.2287	20 4f 20	               jsr  push
.228a	20 6c 22	               jsr  a2hex
.228d	8a		               txa
.228e	48		               pha
.228f	20 65 22	               jsr  lsra4bits
.2292	20 59 22	               jsr  nib2hex
.2295	8d 0b 22	               sta  a2hexstr
.2298	68		               pla
.2299	20 59 22	               jsr  nib2hex
.229c	8d 0c 22	               sta  a2hexstr+1
.229f	98		               tya
.22a0	48		               pha
.22a1	20 65 22	               jsr  lsra4bits
.22a4	20 59 22	               jsr  nib2hex
.22a7	8d 0d 22	               sta  a2hexstr+2
.22aa	68		               pla
.22ab	20 59 22	               jsr  nib2hex
.22ae	8d 0e 22	               sta  a2hexstr+3
.22b1	a9 00		               lda  #$00                ; 0 ended string
.22b3	8d 0f 22	               sta  a2hexstr+4
.22b6	20 8e 20	               jsr  pop
.22b9			atobin
.22b9	20 4f 20	               jsr  push
.22bc	a2 08		               ldx  #8
.22be	a0 00		               ldy  #0
.22c0	18		               clc
.22c1	2a		nextbit        rol
.22c2	48		               pha
.22c3	69 00		               adc  #$00
.22c5	29 01		               and  #$01
.22c7	20 59 22	               jsr  nib2hex
.22ca	99 10 22	               sta  abin,y
.22cd	68		               pla
.22ce	c8		               iny
.22cf	ca		               dex
.22d0	d0 ef		               bne  nextbit
.22d2	a9 00		               lda  #0
.22d4	99 10 22	               sta  abin,y
.22d7	20 8e 20	               jsr  pull
.22da	60		               rts
.22db			putabin
.22db	20 b9 22	               jsr     atobin
.22de	20 4f 20	               jsr     push
.22e1	a2 10		               ldx     #<abin
.22e3	a0 22		               ldy     #>abin
.22e5	20 5e 1f	               jsr     puts
.22e8	20 8e 20	               jsr     pop
.22eb	60		               rts
.22ec			printabin
.22ec	20 4f 20	               jsr     push
.22ef	a2 10		               ldx     #<abin
.22f1	a0 22		               ldy     #>abin
.22f3	20 5e 1f	               jsr     puts
.22f6	20 8e 20	               jsr     pop
.22f9	60		               rts
.22fa			putabinfmt
.22fa	08		               php
.22fb	48		               pha
.22fc	a9 25		               lda     #"%"
.22fe	20 58 1f	               jsr     putch
.2301	68		               pla
.2302	20 db 22	               jsr     putabin
.2305	28		               plp
.2306	60		               rts
.2307			putabinxy
.2307	20 78 1f	               jsr     gotoxy
.230a	20 db 22	               jsr     putabin
.230d	60		               rts
.230e			putabinfmtxy
.230e	20 78 1f	               jsr     gotoxy
.2311	20 fa 22	               jsr     putabinfmt
.2314	60		               rts
.2315			atodec
.2315	20 4f 20	               jsr  push
.2318	f8		               sed
.2319	aa		               tax
.231a	a0 00		               ldy  #$00
.231c	a9 00		               lda  #$00
.231e	18		nextbit        clc
.231f	69 01		               adc  #$01
.2321	90 01		               bcc  decx
.2323	c8		               iny
.2324	ca		decx           dex
.2325	d0 f7		               bne  nextbit
.2327	48		               pha
.2328	98		               tya
.2329	20 59 22	               jsr  nib2hex
.232c	8d 19 22	               sta  adec
.232f	68		               pla
.2330	48		               pha
.2331	20 59 22	               jsr  nib2hex
.2334	8d 1b 22	               sta  adec+2
.2337	68		               pla
.2338	6a		               ror
.2339	6a		               ror
.233a	6a		               ror
.233b	6a		               ror
.233c	20 59 22	               jsr  nib2hex
.233f	8d 1a 22	               sta  adec+1
.2342	d8		               cld
.2343	20 8e 20	               jsr  pull
.2346	60		               rts
>2347	00 00 00	buffer         .byte     0,0,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>234a	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>234e	00 00 00 00 00 00 00 00 00 0d 00 00
>235a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>235e	00 00 00 00 00 00 00 00 00 00 00 00
>236a	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>236e	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>237a	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>237e	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>238a	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>238e	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>239a	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>239e	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>23aa	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>23ae	00 00 00 00 00 00 00 00 00 00 00 00
>23ba	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>23be	00 00 00 00 00 00 00 00 00 00 00 00
>23ca	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>23ce	00 00 00 00 00 00 00 00 00 00 00 00
>23da	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>23de	00 00 00 00 00 00 00 00 00 00 00 00
>23ea	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>23ee	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>23fa	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>23fe	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>240a	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>240e	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>241a	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>241e	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>242a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>242e	00 00 00 00 00 00 00 00 00 00 00 00
>243a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>243e	00 00 00 00 00 00 00 00 00 00 00 00
.244a			waitstop
.244a	20 4f 20	               jsr  push
.244d	20 ed f6	wait           jsr  k_stop
.2450	d0 fb		               bne  wait
.2452	20 8e 20	               jsr  pop
.2455	60		               rts
.2456			anykey
.2456	08		               php
.2457	48		               pha
.2458	a5 cb		nokey          lda 203
.245a	c9 40		               cmp #64
.245c	f0 fa		               beq nokey
.245e	20 64 24	               jsr releasekey
.2461	68		               pla
.2462	28		               plp
.2463	60		               rts
.2464			releasekey
.2464	08		               php
.2465	48		               pha
.2466	a5 cb		keypressed     lda 203
.2468	c9 40		               cmp #64
.246a	d0 fa		               bne keypressed
.246c	68		               pla
.246d	28		               plp
.246e	60		               rts
.246f			getkey
.246f	20 e4 ff	again          jsr  getin
.2472	c9 00		               cmp  #0
.2474	f0 f9		               beq  again
.2476	60		               rts
.2477			waitkey
.2477	20 4f 20	               jsr  push
.247a	8d c8 24	               sta  thekey
.247d	20 e4 ff	nope           jsr  getin
.2480	20 d2 ff	               jsr  chrout
.2483	cd c8 24	               cmp  thekey
.2486	d0 f5		               bne  nope
.2488	20 d2 ff	               jsr  chrout
.248b	20 8e 20	               jsr  pop
.248e	60		               rts
.248f			waitspace
.248f	20 4f 20	               jsr  push
.2492	a9 7f		wait           lda  #$7f  ;%01111111
.2494	8d 00 dc	               sta  $dc00
.2497	ad 01 dc	               lda  $dc01
.249a	29 10		               and  #$10  ;mask %00010000
.249c	d0 f4		               bne  wait
.249e	20 8e 20	               jsr  pop
.24a1			waitsstop
.24a1	20 4f 20	               jsr  push
.24a4	20 ed f6	wait           jsr  k_stop  ;%01111111
.24a7	d0 fb		               bne  wait
.24a9	20 8e 20	               jsr  pop
.24ac			waitreturn
.24ac	20 4f 20	               jsr  push
.24af	ad c9 24	               lda  thecount
.24b2	8d 00 04	               sta  scrnram
.24b5	a9 02		               lda  #$02
.24b7	8d 00 d8	               sta  colorram
.24ba	20 e4 ff	nope           jsr  getin
.24bd	c9 0d		nohex          cmp  #$0d
.24bf	d0 f9		               bne  nope
.24c1	ee c9 24	               inc  thecount
.24c4	20 8e 20	               jsr  pop
.24c7	60		               rts
>24c8	00		thekey         .byte   0
>24c9	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  End of listing

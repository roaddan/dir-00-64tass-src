
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Sun Nov  5 00:20:35 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm

=$0d			flashcol = vvert1

;******  Return to file: charedit.asm

.080d			main
.080d	20 25 14	               jsr push
.0810	20 d6 12	               jsr screendis
.0813	20 f0 12	               jsr scrmaninit
.0816	20 6e 0d	               jsr staticscreen
.0819	20 e3 12	               jsr screenena
.081c	20 25 14	               jsr  push
.081f	a2 f9		               ldx  #<blankmsg
.0821	a0 0e		               ldy  #>blankmsg
.0823	20 bd 13	               jsr  putscxy
.0826	a2 24		               ldx  #<edit_msg
.0828	a0 0f		               ldy  #>edit_msg
.082a	20 bd 13	               jsr  putscxy
.082d	20 64 14	               jsr  pop
.0830	a9 00		               lda  #$00
.0832	8d 65 08	               sta  fkeyset
.0835	20 b6 0d	               jsr  showfkeys
.0838	20 64 14	               jsr  pop
.083b	20 6d 08	               jsr  keyaction
.083e	20 12 13	               jsr  cls
.0841	20 25 14	               jsr  push
.0844	a2 f9		               ldx  #<blankmsg
.0846	a0 0e		               ldy  #>blankmsg
.0848	20 bd 13	               jsr  putscxy
.084b	a2 14		               ldx  #<bye_msg
.084d	a0 11		               ldy  #>bye_msg
.084f	20 bd 13	               jsr  putscxy
.0852	20 64 14	               jsr  pop
.0855	8a		               txa
.0856	48		               pha
.0857	98		               tya
.0858	48		               pha
.0859	a2 00		               ldx  #0
.085b	a0 00		               ldy  #0
.085d	20 4e 13	               jsr  gotoxy
.0860	68		               pla
.0861	a8		               tay
.0862	68		               pla
.0863	aa		               tax
.0864	60		               rts
>0865	00		fkeyset        .byte     0
.0866			setscreenptr
.0866	20 25 14	               jsr  push
.0869	20 64 14	               jsr  pop
.086c	60		               rts
.086d			keyaction
.086d	20 25 14	               jsr  push
.0870	20 fa 16	loop           jsr  getkey
.0873	c9 85		               cmp  #key_f1
.0875	f0 23		               beq  f1
.0877	c9 89		               cmp  #key_f2
.0879	f0 25		               beq  f2
.087b	c9 86		               cmp  #key_f3
.087d	f0 27		               beq  f3
.087f	c9 8a		               cmp  #key_f4
.0881	f0 29		               beq  f4
.0883	c9 87		               cmp  #key_f5
.0885	f0 2b		               beq  f5
.0887	c9 8b		               cmp  #key_f6
.0889	f0 2d		               beq  f6
.088b	c9 88		               cmp  #key_f7
.088d	f0 2f		               beq  f7
.088f	c9 8c		               cmp  #key_f8
.0891	f0 31		               beq  f8
.0893	c9 18		               cmp  #ctrl_x
.0895	f0 33		               beq  quit
.0897	4c 70 08	               jmp  loop
.089a	20 ce 08	f1             jsr  f1action
.089d	4c 70 08	               jmp  loop
.08a0	20 61 09	f2             jsr  f2action
.08a3	4c 70 08	               jmp  loop
.08a6	20 f4 09	f3             jsr  f3action
.08a9	4c 70 08	               jmp  loop
.08ac	20 87 0a	f4             jsr  f4action
.08af	4c 70 08	               jmp  loop
.08b2	20 1a 0b	f5             jsr  f5action
.08b5	4c 70 08	               jmp  loop
.08b8	20 ad 0b	f6             jsr  f6action
.08bb	4c 70 08	               jmp  loop
.08be	20 40 0c	f7             jsr  f7action
.08c1	4c 70 08	               jmp  loop
.08c4	20 d3 0c	f8             jsr  f8action
.08c7	4c 70 08	               jmp  loop
.08ca			quit
.08ca	20 64 14	               jsr  pop
.08cd	60		               rts
.08ce			f1action
.08ce	48		               pha
.08cf	ad 65 08	               lda  fkeyset
.08d2	d0 47		               bne  menub
.08d4	08		               php
.08d5	48		               pha
.08d6	8a		               txa
.08d7	48		               pha
.08d8	ad 36 11	               lda  f1abutton
.08db	48		               pha
.08dc	a9 92		               lda  #146
.08de	8d 45 11	               sta  f1abutton+15
.08e1	a9 0d		               lda  #flashcol
.08e3	8d 36 11	               sta  f1abutton
.08e6	a2 36		               ldx  #<f1abutton
.08e8	a0 11		               ldy  #>f1abutton
.08ea	20 bd 13	               jsr  putscxy
.08ed	20 e4 0e	               jsr  delay
.08f0	a9 12		               lda  #18
.08f2	8d 45 11	               sta  f1abutton+15
.08f5	68		               pla
.08f6	8d 36 11	               sta  f1abutton
.08f9	a2 36		               ldx  #<f1abutton
.08fb	a0 11		               ldy  #>f1abutton
.08fd	20 bd 13	               jsr  putscxy
.0900	68		               pla
.0901	aa		               tax
.0902	68		               pla
.0903	28		               plp
.0904	20 25 14	               jsr  push
.0907	a2 f9		               ldx  #<blankmsg
.0909	a0 0e		               ldy  #>blankmsg
.090b	20 bd 13	               jsr  putscxy
.090e	a2 24		               ldx  #<f1a_msg
.0910	a0 0f		               ldy  #>f1a_msg
.0912	20 bd 13	               jsr  putscxy
.0915	20 64 14	               jsr  pop
.0918	4c 5f 09	               jmp  out
.091b			menub
.091b	08		               php
.091c	48		               pha
.091d	8a		               txa
.091e	48		               pha
.091f	ad 06 12	               lda  f1bbutton
.0922	48		               pha
.0923	a9 92		               lda  #146
.0925	8d 15 12	               sta  f1bbutton+15
.0928	a9 0d		               lda  #flashcol
.092a	8d 06 12	               sta  f1bbutton
.092d	a2 06		               ldx  #<f1bbutton
.092f	a0 12		               ldy  #>f1bbutton
.0931	20 bd 13	               jsr  putscxy
.0934	20 e4 0e	               jsr  delay
.0937	a9 12		               lda  #18
.0939	8d 15 12	               sta  f1bbutton+15
.093c	68		               pla
.093d	8d 06 12	               sta  f1bbutton
.0940	a2 06		               ldx  #<f1bbutton
.0942	a0 12		               ldy  #>f1bbutton
.0944	20 bd 13	               jsr  putscxy
.0947	68		               pla
.0948	aa		               tax
.0949	68		               pla
.094a	28		               plp
.094b	20 25 14	               jsr  push
.094e	a2 f9		               ldx  #<blankmsg
.0950	a0 0e		               ldy  #>blankmsg
.0952	20 bd 13	               jsr  putscxy
.0955	a2 f4		               ldx  #<f1b_msg
.0957	a0 0f		               ldy  #>f1b_msg
.0959	20 bd 13	               jsr  putscxy
.095c	20 64 14	               jsr  pop
.095f	68		out            pla
.0960	60		               rts
.0961			f2action
.0961	48		               pha
.0962	ad 65 08	               lda  fkeyset
.0965	d0 47		               bne  menub
.0967	08		               php
.0968	48		               pha
.0969	8a		               txa
.096a	48		               pha
.096b	ad 50 11	               lda  f2abutton
.096e	48		               pha
.096f	a9 92		               lda  #146
.0971	8d 5f 11	               sta  f2abutton+15
.0974	a9 0d		               lda  #flashcol
.0976	8d 50 11	               sta  f2abutton
.0979	a2 50		               ldx  #<f2abutton
.097b	a0 11		               ldy  #>f2abutton
.097d	20 bd 13	               jsr  putscxy
.0980	20 e4 0e	               jsr  delay
.0983	a9 12		               lda  #18
.0985	8d 5f 11	               sta  f2abutton+15
.0988	68		               pla
.0989	8d 50 11	               sta  f2abutton
.098c	a2 50		               ldx  #<f2abutton
.098e	a0 11		               ldy  #>f2abutton
.0990	20 bd 13	               jsr  putscxy
.0993	68		               pla
.0994	aa		               tax
.0995	68		               pla
.0996	28		               plp
.0997	20 25 14	               jsr  push
.099a	a2 f9		               ldx  #<blankmsg
.099c	a0 0e		               ldy  #>blankmsg
.099e	20 bd 13	               jsr  putscxy
.09a1	a2 40		               ldx  #<f2a_msg
.09a3	a0 0f		               ldy  #>f2a_msg
.09a5	20 bd 13	               jsr  putscxy
.09a8	20 64 14	               jsr  pop
.09ab	4c f2 09	               jmp  out
.09ae			menub
.09ae	08		               php
.09af	48		               pha
.09b0	8a		               txa
.09b1	48		               pha
.09b2	ad 20 12	               lda  f2bbutton
.09b5	48		               pha
.09b6	a9 92		               lda  #146
.09b8	8d 2f 12	               sta  f2bbutton+15
.09bb	a9 0d		               lda  #flashcol
.09bd	8d 20 12	               sta  f2bbutton
.09c0	a2 20		               ldx  #<f2bbutton
.09c2	a0 12		               ldy  #>f2bbutton
.09c4	20 bd 13	               jsr  putscxy
.09c7	20 e4 0e	               jsr  delay
.09ca	a9 12		               lda  #18
.09cc	8d 2f 12	               sta  f2bbutton+15
.09cf	68		               pla
.09d0	8d 20 12	               sta  f2bbutton
.09d3	a2 20		               ldx  #<f2bbutton
.09d5	a0 12		               ldy  #>f2bbutton
.09d7	20 bd 13	               jsr  putscxy
.09da	68		               pla
.09db	aa		               tax
.09dc	68		               pla
.09dd	28		               plp
.09de	20 25 14	               jsr  push
.09e1	a2 f9		               ldx  #<blankmsg
.09e3	a0 0e		               ldy  #>blankmsg
.09e5	20 bd 13	               jsr  putscxy
.09e8	a2 0b		               ldx  #<f2b_msg
.09ea	a0 10		               ldy  #>f2b_msg
.09ec	20 bd 13	               jsr  putscxy
.09ef	20 64 14	               jsr  pop
.09f2	68		out            pla
.09f3	60		               rts
.09f4			f3action
.09f4	48		               pha
.09f5	ad 65 08	               lda  fkeyset
.09f8	d0 47		               bne  menub
.09fa	08		               php
.09fb	48		               pha
.09fc	8a		               txa
.09fd	48		               pha
.09fe	ad 6a 11	               lda  f3abutton
.0a01	48		               pha
.0a02	a9 92		               lda  #146
.0a04	8d 79 11	               sta  f3abutton+15
.0a07	a9 0d		               lda  #flashcol
.0a09	8d 6a 11	               sta  f3abutton
.0a0c	a2 6a		               ldx  #<f3abutton
.0a0e	a0 11		               ldy  #>f3abutton
.0a10	20 bd 13	               jsr  putscxy
.0a13	20 e4 0e	               jsr  delay
.0a16	a9 12		               lda  #18
.0a18	8d 79 11	               sta  f3abutton+15
.0a1b	68		               pla
.0a1c	8d 6a 11	               sta  f3abutton
.0a1f	a2 6a		               ldx  #<f3abutton
.0a21	a0 11		               ldy  #>f3abutton
.0a23	20 bd 13	               jsr  putscxy
.0a26	68		               pla
.0a27	aa		               tax
.0a28	68		               pla
.0a29	28		               plp
.0a2a	20 25 14	               jsr  push
.0a2d	a2 f9		               ldx  #<blankmsg
.0a2f	a0 0e		               ldy  #>blankmsg
.0a31	20 bd 13	               jsr  putscxy
.0a34	a2 66		               ldx  #<f3a_msg
.0a36	a0 0f		               ldy  #>f3a_msg
.0a38	20 bd 13	               jsr  putscxy
.0a3b	20 64 14	               jsr  pop
.0a3e	4c 85 0a	               jmp  out
.0a41			menub
.0a41	08		               php
.0a42	48		               pha
.0a43	8a		               txa
.0a44	48		               pha
.0a45	ad 3a 12	               lda  f3bbutton
.0a48	48		               pha
.0a49	a9 92		               lda  #146
.0a4b	8d 49 12	               sta  f3bbutton+15
.0a4e	a9 0d		               lda  #flashcol
.0a50	8d 3a 12	               sta  f3bbutton
.0a53	a2 3a		               ldx  #<f3bbutton
.0a55	a0 12		               ldy  #>f3bbutton
.0a57	20 bd 13	               jsr  putscxy
.0a5a	20 e4 0e	               jsr  delay
.0a5d	a9 12		               lda  #18
.0a5f	8d 49 12	               sta  f3bbutton+15
.0a62	68		               pla
.0a63	8d 3a 12	               sta  f3bbutton
.0a66	a2 3a		               ldx  #<f3bbutton
.0a68	a0 12		               ldy  #>f3bbutton
.0a6a	20 bd 13	               jsr  putscxy
.0a6d	68		               pla
.0a6e	aa		               tax
.0a6f	68		               pla
.0a70	28		               plp
.0a71	20 25 14	               jsr  push
.0a74	a2 f9		               ldx  #<blankmsg
.0a76	a0 0e		               ldy  #>blankmsg
.0a78	20 bd 13	               jsr  putscxy
.0a7b	a2 24		               ldx  #<f3b_msg
.0a7d	a0 10		               ldy  #>f3b_msg
.0a7f	20 bd 13	               jsr  putscxy
.0a82	20 64 14	               jsr  pop
.0a85	68		out            pla
.0a86	60		               rts
.0a87			f4action
.0a87	48		               pha
.0a88	ad 65 08	               lda  fkeyset
.0a8b	d0 47		               bne  menub
.0a8d	08		               php
.0a8e	48		               pha
.0a8f	8a		               txa
.0a90	48		               pha
.0a91	ad 84 11	               lda  f4abutton
.0a94	48		               pha
.0a95	a9 92		               lda  #146
.0a97	8d 93 11	               sta  f4abutton+15
.0a9a	a9 0d		               lda  #flashcol
.0a9c	8d 84 11	               sta  f4abutton
.0a9f	a2 84		               ldx  #<f4abutton
.0aa1	a0 11		               ldy  #>f4abutton
.0aa3	20 bd 13	               jsr  putscxy
.0aa6	20 e4 0e	               jsr  delay
.0aa9	a9 12		               lda  #18
.0aab	8d 93 11	               sta  f4abutton+15
.0aae	68		               pla
.0aaf	8d 84 11	               sta  f4abutton
.0ab2	a2 84		               ldx  #<f4abutton
.0ab4	a0 11		               ldy  #>f4abutton
.0ab6	20 bd 13	               jsr  putscxy
.0ab9	68		               pla
.0aba	aa		               tax
.0abb	68		               pla
.0abc	28		               plp
.0abd	20 25 14	               jsr  push
.0ac0	a2 f9		               ldx  #<blankmsg
.0ac2	a0 0e		               ldy  #>blankmsg
.0ac4	20 bd 13	               jsr  putscxy
.0ac7	a2 8d		               ldx  #<f4a_msg
.0ac9	a0 0f		               ldy  #>f4a_msg
.0acb	20 bd 13	               jsr  putscxy
.0ace	20 64 14	               jsr  pop
.0ad1	4c 18 0b	               jmp  out
.0ad4			menub
.0ad4	08		               php
.0ad5	48		               pha
.0ad6	8a		               txa
.0ad7	48		               pha
.0ad8	ad 54 12	               lda  f4bbutton
.0adb	48		               pha
.0adc	a9 92		               lda  #146
.0ade	8d 63 12	               sta  f4bbutton+15
.0ae1	a9 0d		               lda  #flashcol
.0ae3	8d 54 12	               sta  f4bbutton
.0ae6	a2 54		               ldx  #<f4bbutton
.0ae8	a0 12		               ldy  #>f4bbutton
.0aea	20 bd 13	               jsr  putscxy
.0aed	20 e4 0e	               jsr  delay
.0af0	a9 12		               lda  #18
.0af2	8d 63 12	               sta  f4bbutton+15
.0af5	68		               pla
.0af6	8d 54 12	               sta  f4bbutton
.0af9	a2 54		               ldx  #<f4bbutton
.0afb	a0 12		               ldy  #>f4bbutton
.0afd	20 bd 13	               jsr  putscxy
.0b00	68		               pla
.0b01	aa		               tax
.0b02	68		               pla
.0b03	28		               plp
.0b04	20 25 14	               jsr  push
.0b07	a2 f9		               ldx  #<blankmsg
.0b09	a0 0e		               ldy  #>blankmsg
.0b0b	20 bd 13	               jsr  putscxy
.0b0e	a2 3c		               ldx  #<f4b_msg
.0b10	a0 10		               ldy  #>f4b_msg
.0b12	20 bd 13	               jsr  putscxy
.0b15	20 64 14	               jsr  pop
.0b18	68		out            pla
.0b19	60		               rts
.0b1a			f5action
.0b1a	48		               pha
.0b1b	ad 65 08	               lda  fkeyset
.0b1e	d0 47		               bne  menub
.0b20	08		               php
.0b21	48		               pha
.0b22	8a		               txa
.0b23	48		               pha
.0b24	ad 9e 11	               lda  f5abutton
.0b27	48		               pha
.0b28	a9 92		               lda  #146
.0b2a	8d ad 11	               sta  f5abutton+15
.0b2d	a9 0d		               lda  #flashcol
.0b2f	8d 9e 11	               sta  f5abutton
.0b32	a2 9e		               ldx  #<f5abutton
.0b34	a0 11		               ldy  #>f5abutton
.0b36	20 bd 13	               jsr  putscxy
.0b39	20 e4 0e	               jsr  delay
.0b3c	a9 12		               lda  #18
.0b3e	8d ad 11	               sta  f5abutton+15
.0b41	68		               pla
.0b42	8d 9e 11	               sta  f5abutton
.0b45	a2 9e		               ldx  #<f5abutton
.0b47	a0 11		               ldy  #>f5abutton
.0b49	20 bd 13	               jsr  putscxy
.0b4c	68		               pla
.0b4d	aa		               tax
.0b4e	68		               pla
.0b4f	28		               plp
.0b50	20 25 14	               jsr  push
.0b53	a2 f9		               ldx  #<blankmsg
.0b55	a0 0e		               ldy  #>blankmsg
.0b57	20 bd 13	               jsr  putscxy
.0b5a	a2 aa		               ldx  #<f5a_msg
.0b5c	a0 0f		               ldy  #>f5a_msg
.0b5e	20 bd 13	               jsr  putscxy
.0b61	20 64 14	               jsr  pop
.0b64	4c ab 0b	               jmp  out
.0b67			menub
.0b67	08		               php
.0b68	48		               pha
.0b69	8a		               txa
.0b6a	48		               pha
.0b6b	ad 6e 12	               lda  f5bbutton
.0b6e	48		               pha
.0b6f	a9 92		               lda  #146
.0b71	8d 7d 12	               sta  f5bbutton+15
.0b74	a9 0d		               lda  #flashcol
.0b76	8d 6e 12	               sta  f5bbutton
.0b79	a2 6e		               ldx  #<f5bbutton
.0b7b	a0 12		               ldy  #>f5bbutton
.0b7d	20 bd 13	               jsr  putscxy
.0b80	20 e4 0e	               jsr  delay
.0b83	a9 12		               lda  #18
.0b85	8d 7d 12	               sta  f5bbutton+15
.0b88	68		               pla
.0b89	8d 6e 12	               sta  f5bbutton
.0b8c	a2 6e		               ldx  #<f5bbutton
.0b8e	a0 12		               ldy  #>f5bbutton
.0b90	20 bd 13	               jsr  putscxy
.0b93	68		               pla
.0b94	aa		               tax
.0b95	68		               pla
.0b96	28		               plp
.0b97	20 25 14	               jsr  push
.0b9a	a2 f9		               ldx  #<blankmsg
.0b9c	a0 0e		               ldy  #>blankmsg
.0b9e	20 bd 13	               jsr  putscxy
.0ba1	a2 51		               ldx  #<f5b_msg
.0ba3	a0 10		               ldy  #>f5b_msg
.0ba5	20 bd 13	               jsr  putscxy
.0ba8	20 64 14	               jsr  pop
.0bab	68		out            pla
.0bac	60		               rts
.0bad			f6action
.0bad	48		               pha
.0bae	ad 65 08	               lda  fkeyset
.0bb1	d0 47		               bne  menub
.0bb3	08		               php
.0bb4	48		               pha
.0bb5	8a		               txa
.0bb6	48		               pha
.0bb7	ad b8 11	               lda  f6abutton
.0bba	48		               pha
.0bbb	a9 92		               lda  #146
.0bbd	8d c7 11	               sta  f6abutton+15
.0bc0	a9 0d		               lda  #flashcol
.0bc2	8d b8 11	               sta  f6abutton
.0bc5	a2 b8		               ldx  #<f6abutton
.0bc7	a0 11		               ldy  #>f6abutton
.0bc9	20 bd 13	               jsr  putscxy
.0bcc	20 e4 0e	               jsr  delay
.0bcf	a9 12		               lda  #18
.0bd1	8d c7 11	               sta  f6abutton+15
.0bd4	68		               pla
.0bd5	8d b8 11	               sta  f6abutton
.0bd8	a2 b8		               ldx  #<f6abutton
.0bda	a0 11		               ldy  #>f6abutton
.0bdc	20 bd 13	               jsr  putscxy
.0bdf	68		               pla
.0be0	aa		               tax
.0be1	68		               pla
.0be2	28		               plp
.0be3	20 25 14	               jsr  push
.0be6	a2 f9		               ldx  #<blankmsg
.0be8	a0 0e		               ldy  #>blankmsg
.0bea	20 bd 13	               jsr  putscxy
.0bed	a2 c4		               ldx  #<f6a_msg
.0bef	a0 0f		               ldy  #>f6a_msg
.0bf1	20 bd 13	               jsr  putscxy
.0bf4	20 64 14	               jsr  pop
.0bf7	4c 3e 0c	               jmp  out
.0bfa			menub
.0bfa	08		               php
.0bfb	48		               pha
.0bfc	8a		               txa
.0bfd	48		               pha
.0bfe	ad 88 12	               lda  f6bbutton
.0c01	48		               pha
.0c02	a9 92		               lda  #146
.0c04	8d 97 12	               sta  f6bbutton+15
.0c07	a9 0d		               lda  #flashcol
.0c09	8d 88 12	               sta  f6bbutton
.0c0c	a2 88		               ldx  #<f6bbutton
.0c0e	a0 12		               ldy  #>f6bbutton
.0c10	20 bd 13	               jsr  putscxy
.0c13	20 e4 0e	               jsr  delay
.0c16	a9 12		               lda  #18
.0c18	8d 97 12	               sta  f6bbutton+15
.0c1b	68		               pla
.0c1c	8d 88 12	               sta  f6bbutton
.0c1f	a2 88		               ldx  #<f6bbutton
.0c21	a0 12		               ldy  #>f6bbutton
.0c23	20 bd 13	               jsr  putscxy
.0c26	68		               pla
.0c27	aa		               tax
.0c28	68		               pla
.0c29	28		               plp
.0c2a	20 25 14	               jsr  push
.0c2d	a2 f9		               ldx  #<blankmsg
.0c2f	a0 0e		               ldy  #>blankmsg
.0c31	20 bd 13	               jsr  putscxy
.0c34	a2 65		               ldx  #<f6b_msg
.0c36	a0 10		               ldy  #>f6b_msg
.0c38	20 bd 13	               jsr  putscxy
.0c3b	20 64 14	               jsr  pop
.0c3e	68		out            pla
.0c3f	60		               rts
.0c40			f7action
.0c40	48		               pha
.0c41	ad 65 08	               lda  fkeyset
.0c44	d0 47		               bne  menub
.0c46	08		               php
.0c47	48		               pha
.0c48	8a		               txa
.0c49	48		               pha
.0c4a	ad d2 11	               lda  f7abutton
.0c4d	48		               pha
.0c4e	a9 92		               lda  #146
.0c50	8d e1 11	               sta  f7abutton+15
.0c53	a9 0d		               lda  #flashcol
.0c55	8d d2 11	               sta  f7abutton
.0c58	a2 d2		               ldx  #<f7abutton
.0c5a	a0 11		               ldy  #>f7abutton
.0c5c	20 bd 13	               jsr  putscxy
.0c5f	20 e4 0e	               jsr  delay
.0c62	a9 12		               lda  #18
.0c64	8d e1 11	               sta  f7abutton+15
.0c67	68		               pla
.0c68	8d d2 11	               sta  f7abutton
.0c6b	a2 d2		               ldx  #<f7abutton
.0c6d	a0 11		               ldy  #>f7abutton
.0c6f	20 bd 13	               jsr  putscxy
.0c72	68		               pla
.0c73	aa		               tax
.0c74	68		               pla
.0c75	28		               plp
.0c76	20 25 14	               jsr  push
.0c79	a2 f9		               ldx  #<blankmsg
.0c7b	a0 0e		               ldy  #>blankmsg
.0c7d	20 bd 13	               jsr  putscxy
.0c80	a2 de		               ldx  #<f7a_msg
.0c82	a0 0f		               ldy  #>f7a_msg
.0c84	20 bd 13	               jsr  putscxy
.0c87	20 64 14	               jsr  pop
.0c8a	4c d1 0c	               jmp  out
.0c8d			menub
.0c8d	08		               php
.0c8e	48		               pha
.0c8f	8a		               txa
.0c90	48		               pha
.0c91	ad a2 12	               lda  f7bbutton
.0c94	48		               pha
.0c95	a9 92		               lda  #146
.0c97	8d b1 12	               sta  f7bbutton+15
.0c9a	a9 0d		               lda  #flashcol
.0c9c	8d a2 12	               sta  f7bbutton
.0c9f	a2 a2		               ldx  #<f7bbutton
.0ca1	a0 12		               ldy  #>f7bbutton
.0ca3	20 bd 13	               jsr  putscxy
.0ca6	20 e4 0e	               jsr  delay
.0ca9	a9 12		               lda  #18
.0cab	8d b1 12	               sta  f7bbutton+15
.0cae	68		               pla
.0caf	8d a2 12	               sta  f7bbutton
.0cb2	a2 a2		               ldx  #<f7bbutton
.0cb4	a0 12		               ldy  #>f7bbutton
.0cb6	20 bd 13	               jsr  putscxy
.0cb9	68		               pla
.0cba	aa		               tax
.0cbb	68		               pla
.0cbc	28		               plp
.0cbd	20 25 14	               jsr  push
.0cc0	a2 f9		               ldx  #<blankmsg
.0cc2	a0 0e		               ldy  #>blankmsg
.0cc4	20 bd 13	               jsr  putscxy
.0cc7	a2 77		               ldx  #<f7b_msg
.0cc9	a0 10		               ldy  #>f7b_msg
.0ccb	20 bd 13	               jsr  putscxy
.0cce	20 64 14	               jsr  pop
.0cd1	68		out            pla
.0cd2	60		               rts
.0cd3			f8action
.0cd3	48		               pha
.0cd4	ad 65 08	               lda  fkeyset
.0cd7	d0 47		               bne  menub
.0cd9	08		               php
.0cda	48		               pha
.0cdb	8a		               txa
.0cdc	48		               pha
.0cdd	ad ec 11	               lda  f8abutton
.0ce0	48		               pha
.0ce1	a9 92		               lda  #146
.0ce3	8d fb 11	               sta  f8abutton+15
.0ce6	a9 0d		               lda  #flashcol
.0ce8	8d ec 11	               sta  f8abutton
.0ceb	a2 ec		               ldx  #<f8abutton
.0ced	a0 11		               ldy  #>f8abutton
.0cef	20 bd 13	               jsr  putscxy
.0cf2	20 e4 0e	               jsr  delay
.0cf5	a9 12		               lda  #18
.0cf7	8d fb 11	               sta  f8abutton+15
.0cfa	68		               pla
.0cfb	8d ec 11	               sta  f8abutton
.0cfe	a2 ec		               ldx  #<f8abutton
.0d00	a0 11		               ldy  #>f8abutton
.0d02	20 bd 13	               jsr  putscxy
.0d05	68		               pla
.0d06	aa		               tax
.0d07	68		               pla
.0d08	28		               plp
.0d09	20 25 14	               jsr  push
.0d0c	a2 f9		               ldx  #<blankmsg
.0d0e	a0 0e		               ldy  #>blankmsg
.0d10	20 bd 13	               jsr  putscxy
.0d13	a2 e4		               ldx  #<menub_msg
.0d15	a0 10		               ldy  #>menub_msg
.0d17	20 bd 13	               jsr  putscxy
.0d1a	20 64 14	               jsr  pop
.0d1d	4c 64 0d	               jmp  swapit
.0d20			menub
.0d20	08		               php
.0d21	48		               pha
.0d22	8a		               txa
.0d23	48		               pha
.0d24	ad bc 12	               lda  f8bbutton
.0d27	48		               pha
.0d28	a9 92		               lda  #146
.0d2a	8d cb 12	               sta  f8bbutton+15
.0d2d	a9 0d		               lda  #flashcol
.0d2f	8d bc 12	               sta  f8bbutton
.0d32	a2 bc		               ldx  #<f8bbutton
.0d34	a0 12		               ldy  #>f8bbutton
.0d36	20 bd 13	               jsr  putscxy
.0d39	20 e4 0e	               jsr  delay
.0d3c	a9 12		               lda  #18
.0d3e	8d cb 12	               sta  f8bbutton+15
.0d41	68		               pla
.0d42	8d bc 12	               sta  f8bbutton
.0d45	a2 bc		               ldx  #<f8bbutton
.0d47	a0 12		               ldy  #>f8bbutton
.0d49	20 bd 13	               jsr  putscxy
.0d4c	68		               pla
.0d4d	aa		               tax
.0d4e	68		               pla
.0d4f	28		               plp
.0d50	20 25 14	               jsr  push
.0d53	a2 f9		               ldx  #<blankmsg
.0d55	a0 0e		               ldy  #>blankmsg
.0d57	20 bd 13	               jsr  putscxy
.0d5a	a2 c9		               ldx  #<menua_msg
.0d5c	a0 10		               ldy  #>menua_msg
.0d5e	20 bd 13	               jsr  putscxy
.0d61	20 64 14	               jsr  pop
.0d64	49 ff		swapit         eor  #$ff
.0d66	8d 65 08	               sta  fkeyset
.0d69	20 b6 0d	               jsr  showfkeys
.0d6c	68		               pla
.0d6d	60		               rts
.0d6e			staticscreen
.0d6e	48		               pha
.0d6f	a9 0c		               lda  #vgris1
.0d71	8d 20 d0	               sta  $d020
.0d74	68		               pla
.0d75	48		               pha
.0d76	a9 0b		               lda  #vgris
.0d78	8d 21 d0	               sta  $d021
.0d7b	68		               pla
.0d7c	48		               pha
.0d7d	a9 8e		               lda  #b_uppercase
.0d7f	8d 11 13	               sta  characterset
.0d82	20 d2 ff	               jsr  $ffd2
.0d85	68		               pla
.0d86	20 58 0e	               jsr  showlines
.0d89	20 37 0e	               jsr  showallchars
.0d8c	20 a0 0e	               jsr  showgrid
.0d8f	20 b6 0d	               jsr  showfkeys
.0d92	20 25 14	               jsr  push
.0d95	a2 f9		               ldx  #<blankmsg
.0d97	a0 0e		               ldy  #>blankmsg
.0d99	20 bd 13	               jsr  putscxy
.0d9c	a2 ff		               ldx  #<quit_msg
.0d9e	a0 10		               ldy  #>quit_msg
.0da0	20 bd 13	               jsr  putscxy
.0da3	20 64 14	               jsr  pop
.0da6	8a		               txa
.0da7	48		               pha
.0da8	98		               tya
.0da9	48		               pha
.0daa	a2 00		               ldx  #0
.0dac	a0 07		               ldy  #7
.0dae	20 4e 13	               jsr  gotoxy
.0db1	68		               pla
.0db2	a8		               tay
.0db3	68		               pla
.0db4	aa		               tax
.0db5	60		               rts
.0db6			showfkeys
.0db6	20 25 14	               jsr  push
.0db9	ad 65 08	               lda  fkeyset
.0dbc	c9 00		               cmp  #$0
.0dbe	d0 3b		               bne  secondks
.0dc0	a2 36		                ldx #<f1abutton
.0dc2	a0 11		                ldy #>f1abutton
.0dc4	20 bd 13	                jsr putscxy
.0dc7	a2 50		                ldx #<f2abutton
.0dc9	a0 11		                ldy #>f2abutton
.0dcb	20 bd 13	                jsr putscxy
.0dce	a2 6a		                ldx #<f3abutton
.0dd0	a0 11		                ldy #>f3abutton
.0dd2	20 bd 13	                jsr putscxy
.0dd5	a2 84		                ldx #<f4abutton
.0dd7	a0 11		                ldy #>f4abutton
.0dd9	20 bd 13	                jsr putscxy
.0ddc	a2 9e		                ldx #<f5abutton
.0dde	a0 11		                ldy #>f5abutton
.0de0	20 bd 13	                jsr putscxy
.0de3	a2 b8		                ldx #<f6abutton
.0de5	a0 11		                ldy #>f6abutton
.0de7	20 bd 13	                jsr putscxy
.0dea	a2 d2		                ldx #<f7abutton
.0dec	a0 11		                ldy #>f7abutton
.0dee	20 bd 13	                jsr putscxy
.0df1	a2 ec		                ldx #<f8abutton
.0df3	a0 11		                ldy #>f8abutton
.0df5	20 bd 13	                jsr putscxy
.0df8	4c 33 0e	               jmp end
.0dfb			secondks
.0dfb	a2 06		                ldx #<f1bbutton
.0dfd	a0 12		                ldy #>f1bbutton
.0dff	20 bd 13	                jsr putscxy
.0e02	a2 20		                ldx #<f2bbutton
.0e04	a0 12		                ldy #>f2bbutton
.0e06	20 bd 13	                jsr putscxy
.0e09	a2 3a		                ldx #<f3bbutton
.0e0b	a0 12		                ldy #>f3bbutton
.0e0d	20 bd 13	                jsr putscxy
.0e10	a2 54		                ldx #<f4bbutton
.0e12	a0 12		                ldy #>f4bbutton
.0e14	20 bd 13	                jsr putscxy
.0e17	a2 6e		                ldx #<f5bbutton
.0e19	a0 12		                ldy #>f5bbutton
.0e1b	20 bd 13	                jsr putscxy
.0e1e	a2 88		                ldx #<f6bbutton
.0e20	a0 12		                ldy #>f6bbutton
.0e22	20 bd 13	                jsr putscxy
.0e25	a2 a2		                ldx #<f7bbutton
.0e27	a0 12		                ldy #>f7bbutton
.0e29	20 bd 13	                jsr putscxy
.0e2c	a2 bc		                ldx #<f8bbutton
.0e2e	a0 12		                ldy #>f8bbutton
.0e30	20 bd 13	                jsr putscxy
.0e33	20 64 14	end            jsr  pop
.0e36	60		               rts
.0e37			showallchars
.0e37	20 25 14	               jsr push
.0e3a	8a		               txa
.0e3b	48		               pha
.0e3c	98		               tya
.0e3d	48		               pha
.0e3e	a2 00		               ldx  #0
.0e40	a0 00		               ldy  #0
.0e42	20 4e 13	               jsr  gotoxy
.0e45	68		               pla
.0e46	a8		               tay
.0e47	68		               pla
.0e48	aa		               tax
.0e49	a2 00		               ldx  #$00
.0e4b	8a		nextc          txa
.0e4c	9d 00 04	               sta  scrnram,x
.0e4f	e8		               inx
.0e50	e0 80		               cpx  #$80
.0e52	d0 f7		               bne  nextc
.0e54	20 64 14	               jsr  pop
.0e57	60		               rts
.0e58			showlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnram+(6*40)+8
.0e58	20 25 14	               jsr  push
.0e5b	a2 28		               ldx  #40
.0e5d	a9 40		               lda  #64
.0e5f	9d 9f 04	nextl          sta  scrnram+(40*hline1)-1,x  ;On imprime les deux grande
.0e62	9d ef 04	               sta  scrnram+(40*hline2)-1,x  ; lignes horizontales
.0e65	ca		               dex
.0e66	e0 10		hline          cpx  #vlinepos
.0e68	10 03		               bpl  notyet
.0e6a	9d d0 06	               sta  scrnram+(40*hline3),x    ;On imprime la demiligne horz.
.0e6d	e0 00		notyet         cpx  #$00
.0e6f	d0 ee		               bne  nextl
.0e71	a9 00		               lda  #<scrnram+(40*(hline2))+vlinepos
.0e73	85 fb		               sta  zpage1
.0e75	a9 05		               lda  #>scrnram+(40*(hline2))+vlinepos
.0e77	85 fc		               sta  zpage1+1
.0e79	a0 00		               ldy  #0
.0e7b	a9 72		               lda  #114
.0e7d	91 fb		               sta  (zpage1),y
.0e7f	20 d4 0e	               jsr  zp1add40
.0e82	a2 12		               ldx  #24-hline2
.0e84	a9 5d		               lda  #93
.0e86	91 fb		another93      sta  (zpage1),y
.0e88	20 d4 0e	               jsr  zp1add40
.0e8b	ca		               dex
.0e8c	d0 f8		               bne  another93
.0e8e	a9 e0		               lda  #<scrnram+(40*(hline3))+vlinepos
.0e90	85 fb		               sta  zpage1
.0e92	a9 06		               lda  #>scrnram+(40*(hline3))+vlinepos
.0e94	85 fc		               sta  zpage1+1
.0e96	a0 00		               ldy  #0
.0e98	a9 73		               lda  #115
.0e9a	91 fb		               sta  (zpage1),y
.0e9c	20 64 14	               jsr  pop
.0e9f	60		               rts
.0ea0			showgrid
=8			gligne=8
=1			gcol=1
.0ea0	20 25 14	               jsr  push
.0ea3	20 d6 12	               jsr  screendis
.0ea6	a9 41		               lda  #<scrnram+(40*(gligne))+gcol
.0ea8	85 fb		               sta  zpage1
.0eaa	a9 05		               lda  #>scrnram+(40*(gligne))+gcol
.0eac	85 fc		               sta  zpage1+1
.0eae	a2 08		               ldx  #8
.0eb0	a9 65		nextbox        lda  #101
.0eb2	a0 09		               ldy  #9
.0eb4	91 fb		               sta  (zpage1),y
.0eb6	88		               dey
.0eb7	a9 4f		               lda  #79
.0eb9	91 fb		nextcol        sta  (zpage1),y
.0ebb	88		               dey
.0ebc	d0 fb		               bne  nextcol
.0ebe	20 d4 0e	               jsr  zp1add40
.0ec1	ca		               dex
.0ec2	d0 ec		               bne  nextbox
.0ec4	a0 08		               ldy  #8
.0ec6	a9 77		               lda  #119
.0ec8	91 fb		nextlin        sta  (zpage1),y
.0eca	88		               dey
.0ecb	d0 fb		               bne  nextlin
.0ecd	20 e3 12	               jsr screenena
.0ed0	20 64 14	               jsr  pop
.0ed3	60		               rts
.0ed4			zp1add40
.0ed4	08		               php
.0ed5	48		               pha
.0ed6	18		               clc
.0ed7	a5 fb		               lda  zpage1
.0ed9	69 28		               adc  #40
.0edb	90 02		               bcc  nocarry
.0edd	e6 fc		               inc  zpage1+1
.0edf	85 fb		nocarry        sta  zpage1
.0ee1	68		               pla
.0ee2	28		               plp
.0ee3	60		               rts
.0ee4			delay
.0ee4	20 25 14	               jsr  push
.0ee7	a9 00		               lda  #$0
.0ee9	aa		               tax
.0eea	a8		               tay
.0eeb	ca		xagain         dex
.0eec	88		yagain         dey
.0eed	c0 00		               cpy  #$00
.0eef	d0 fb		               bne  yagain
.0ef1	e0 00		               cpx  #$00
.0ef3	d0 f6		               bne  xagain
.0ef5	20 64 14	               jsr  pop
.0ef8	60		               rts

;******  Processing file: messages.asm

=$07			mesgcol = vjaune
>0ef9	07 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>0efd	20 20 20 20	               .null     "                                      "
>0f01	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0f11	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0f21	20 20 00
.0f24			f1a_msg
>0f24	07 00 05 12	edit_msg       .byte     mesgcol,0,5,18
>0f28	20 45 4e 54	               .null     " entry mode: chr$(   )",146
>0f2c	52 59 20 4d 4f 44 45 3a 20 43 48 52 24 28 20 20
>0f3c	20 29 92 00
.0f40			f2a_msg
>0f40	07 00 05 92	save_msg       .byte     mesgcol,0,5,146
>0f44	20 53 41 56	               .null     " save on cassette or disk? (c/d):"
>0f48	45 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>0f58	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.0f66			f3a_msg
>0f66	07 00 05	load_msg       .byte     mesgcol,0,5
>0f69	20 4c 4f 41	               .null     " load from cassette or disk? (c/d):"
>0f6d	44 20 46 52 4f 4d 20 43 41 53 53 45 54 54 45 20
>0f7d	4f 52 20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.0f8d			f4a_msg
>0f8d	07 00 05	copy_msg       .byte     mesgcol,0,5
>0f90	20 45 4e 54	               .null     " enter character to copy:"
>0f94	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>0fa4	43 4f 50 59 3a 00
.0faa			f5a_msg
>0faa	07 00 05	clear_msg      .byte     mesgcol,0,5
>0fad	20 43 4c 45	               .null     " clear char: chr$(   )"
>0fb1	41 52 20 43 48 41 52 3a 20 43 48 52 24 28 20 20
>0fc1	20 29 00
.0fc4			f6a_msg
>0fc4	07 00 05	fill_msg       .byte     mesgcol,0,5
>0fc7	20 46 49 4c	               .null     " fill char:  chr$(   )"
>0fcb	4c 20 43 48 41 52 3a 20 20 43 48 52 24 28 20 20
>0fdb	20 29 00
.0fde			f7a_msg
>0fde	07 00 05	work_msg       .byte     mesgcol,0,5
>0fe1	20 45 4e 41	               .null     " enable work space"
>0fe5	42 4c 45 20 57 4f 52 4b 20 53 50 41 43 45 00
.0ff4			f1b_msg
>0ff4	07 00 05	rvrs_msg       .byte     mesgcol,0,5
>0ff7	20 52 45 56	               .null     " reverse character:"
>0ffb	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
.100b			f2b_msg
>100b	07 00 05	invr_msg       .byte     mesgcol,0,5
>100e	20 49 4e 56	               .null     " inverting character:"
>1012	45 52 54 49 4e 47 20 43 48 41 52 41 43 54 45 52
>1022	3a 00
.1024			f3b_msg
>1024	07 00 05	flip_msg       .byte     mesgcol,0,5
>1027	20 46 4c 49	               .null     " flipping character:"
>102b	50 50 49 4e 47 20 43 48 41 52 41 43 54 45 52 3a
>103b	00
.103c			f4b_msg
>103c	07 00 05	scrollr_msg    .byte     mesgcol,0,5
>103f	20 53 43 52	               .null     " scrolling right:"
>1043	4f 4c 4c 49 4e 47 20 52 49 47 48 54 3a 00
.1051			f5b_msg
>1051	07 00 05	scrolll_msg    .byte     mesgcol,0,5
>1054	20 53 43 52	               .null     " scrolling left:"
>1058	4f 4c 4c 49 4e 47 20 4c 45 46 54 3a 00
.1065			f6b_msg
>1065	07 00 05	scrollu_msg    .byte     mesgcol,0,5
>1068	20 53 43 52	               .null     " scrolling up:"
>106c	4f 4c 4c 49 4e 47 20 55 50 3a 00
.1077			f7b_msg
>1077	07 00 05	scrolld_msg    .byte     mesgcol,0,5
>107a	20 53 43 52	               .null     " scrolling down:"
>107e	4f 4c 4c 49 4e 47 20 44 4f 57 4e 3a 00
>108b	07 00 05	save_fname_msg .byte     mesgcol,0,5
>108e	20 53 41 56	               .null     " save: file name ------.chr"
>1092	45 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>10a2	2d 2d 2d 2e 43 48 52 00
>10aa	07 00 05	load_fname_msg .byte     mesgcol,0,5
>10ad	20 4c 4f 41	               .null     " load: file name ------.chr"
>10b1	44 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>10c1	2d 2d 2d 2e 43 48 52 00
>10c9	07 00 05	menua_msg      .byte     mesgcol,0,5
>10cc	20 59 4f 55	               .null     " you are now in menu a."
>10d0	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>10e0	20 41 2e 00
>10e4	07 00 05	menub_msg      .byte     mesgcol,0,5
>10e7	20 59 4f 55	               .null     " you are now in menu b."
>10eb	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>10fb	20 42 2e 00
>10ff	0e 16 18 12	quit_msg       .byte     vblue1,22,24,18
>1103	43 54 52 4c	               .text     "ctrl-x",146
>1107	2d 58 92
>110a	20 54 4f 20	               .null     " to quit."
>110e	51 55 49 54 2e 00
>1114	0a 06 0c 12	bye_msg        .byte     vrose,6,12,18
>1118	20 d4 48 41	               .null     " Thanks and have a good day ",146
>111c	4e 4b 53 20 41 4e 44 20 48 41 56 45 20 41 20 47
>112c	4f 4f 44 20 44 41 59 20 92 00
=18			fkeyleft=18
=8			f1top=8
=1			menu1col = 1
=3			menu2col = 3
>1136	01 12 08	f1abutton      .byte     menu1col,fkeyleft,f1top       ;133
>1139	45 44 49 54	               .text     "edit....... "
>113d	2e 2e 2e 2e 2e 2e 2e 20
>1145	12		               .byte     18             ; position 15
>1146	20 20 20 46	               .text     "   f1   "
>114a	31 20 20 20
>114e	92 00		               .byte     146,0
>1150	01 12 0a	f2abutton      .byte     menu1col,fkeyleft,f1top+2     ;137
>1153	53 41 56 45	               .text     "save....... "
>1157	2e 2e 2e 2e 2e 2e 2e 20
>115f	12		               .byte     18            ; position 15
>1160	20 20 20 46	               .text     "   f2   "
>1164	32 20 20 20
>1168	92 00		               .byte     146,0
>116a	01 12 0c	f3abutton      .byte     menu1col,fkeyleft,f1top+4     ;134
>116d	4c 4f 41 44	               .text     "load....... "
>1171	2e 2e 2e 2e 2e 2e 2e 20
>1179	12		               .byte     18             ; position 15
>117a	20 20 20 46	               .text     "   f3   "
>117e	33 20 20 20
>1182	92 00		               .byte     146,0
>1184	01 12 0e	f4abutton      .byte     menu1col,fkeyleft,f1top+6     ;138
>1187	43 4f 50 59	               .text     "copy....... "
>118b	2e 2e 2e 2e 2e 2e 2e 20
>1193	12		               .byte     18             ; position 15
>1194	20 20 20 46	               .text     "   f4   "
>1198	34 20 20 20
>119c	92 00		               .byte     146,0
>119e	01 12 10	f5abutton      .byte     menu1col,fkeyleft,f1top+8     ;135
>11a1	43 4c 45 41	               .text     "clear...... "
>11a5	52 2e 2e 2e 2e 2e 2e 20
>11ad	12		               .byte     18             ; position 15
>11ae	20 20 20 46	               .text     "   f5   "
>11b2	35 20 20 20
>11b6	92 00		               .byte     146,0
>11b8	01 12 12	f6abutton      .byte     menu1col,fkeyleft,f1top+10    ;139
>11bb	46 49 4c 4c	               .text     "fill....... "
>11bf	2e 2e 2e 2e 2e 2e 2e 20
>11c7	12		               .byte     18             ; position 15
>11c8	20 20 20 46	               .text     "   f6   "
>11cc	36 20 20 20
>11d0	92 00		               .byte     146,0
>11d2	01 12 14	f7abutton      .byte     menu1col,fkeyleft,f1top+12    ;136
>11d5	57 4f 52 4b	               .text     "work....... "
>11d9	2e 2e 2e 2e 2e 2e 2e 20
>11e1	12		               .byte     18             ; position 15
>11e2	20 20 20 46	               .text     "   f7   "
>11e6	37 20 20 20
>11ea	92 00		               .byte     146,0
>11ec	01 12 16	f8abutton      .byte     menu1col,fkeyleft,f1top+14    ;140
>11ef	46 55 4e 43	               .text     "function... "
>11f3	54 49 4f 4e 2e 2e 2e 20
>11fb	12		               .byte     18             ; position 15
>11fc	20 20 20 46	               .text     "   f8   "
>1200	38 20 20 20
>1204	92 00		               .byte     146,0
>1206	03 12 08	f1bbutton      .byte     menu2col,fkeyleft,f1top
>1209	52 45 56 45	               .text     "reverse.... "
>120d	52 53 45 2e 2e 2e 2e 20
>1215	12		               .byte     18             ; position 15
>1216	20 20 20 46	               .text     "   f1   "
>121a	31 20 20 20
>121e	92 00		               .byte     146,0
>1220	03 12 0a	f2bbutton      .byte     menu2col,fkeyleft,f1top+2
>1223	49 4e 56 45	               .text     "invert..... "
>1227	52 54 2e 2e 2e 2e 2e 20
>122f	12		               .byte     18             ; position 15
>1230	20 20 20 46	               .text     "   f2   "
>1234	32 20 20 20
>1238	92 00		               .byte     146,0
>123a	03 12 0c	f3bbutton      .byte     menu2col,fkeyleft,f1top+4
>123d	46 4c 49 50	               .text     "flip....... "
>1241	2e 2e 2e 2e 2e 2e 2e 20
>1249	12		               .byte     18             ; position 15
>124a	20 20 20 46	               .text     "   f3   "
>124e	33 20 20 20
>1252	92 00		               .byte     146,0
>1254	03 12 0e	f4bbutton      .byte     menu2col,fkeyleft,f1top+6
>1257	53 43 52 4f	               .text     "scroll r... "
>125b	4c 4c 20 52 2e 2e 2e 20
>1263	12		               .byte     18             ; position 15
>1264	20 20 20 46	               .text     "   f4   "
>1268	34 20 20 20
>126c	92 00		               .byte     146,0
>126e	03 12 10	f5bbutton      .byte     menu2col,fkeyleft,f1top+8
>1271	53 43 52 4f	               .text     "scroll l... "
>1275	4c 4c 20 4c 2e 2e 2e 20
>127d	12		               .byte     18             ; position 15
>127e	20 20 20 46	               .text     "   f5   "
>1282	35 20 20 20
>1286	92 00		               .byte     146,0
>1288	03 12 12	f6bbutton      .byte     menu2col,fkeyleft,f1top+10
>128b	53 43 52 4f	               .text     "scroll u... "
>128f	4c 4c 20 55 2e 2e 2e 20
>1297	12		               .byte     18             ; position 15
>1298	20 20 20 46	               .text     "   f6   "
>129c	36 20 20 20
>12a0	92 00		               .byte     146,0
>12a2	03 12 14	f7bbutton      .byte     menu2col,fkeyleft,f1top+12
>12a5	53 43 52 4f	               .text     "scroll d... "
>12a9	4c 4c 20 44 2e 2e 2e 20
>12b1	12		               .byte     18             ; position 15
>12b2	20 20 20 46	               .text     "   f7   "
>12b6	37 20 20 20
>12ba	92 00		               .byte     146,0
>12bc	03 12 16	f8bbutton      .byte     menu2col,fkeyleft,f1top+14
>12bf	46 55 4e 43	               .text     "function... "
>12c3	54 49 4f 4e 2e 2e 2e 20
>12cb	12		               .byte     18             ; position 15
>12cc	20 20 20 46	               .text     "   f8   "
>12d0	38 20 20 20
>12d4	92 00		               .byte     146,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ;  97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c1			stal            =       $c1     ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.12d6			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.12d6			screendis
.12d6	08		               php
.12d7	48		               pha
.12d8	ad 11 d0	               lda  $d011
.12db	29 ef		               and  #%11101111
.12dd	8d 11 d0	               sta  $d011
.12e0	68		               pla
.12e1	28		               plp
.12e2	60		               rts
.12e3			screenena
.12e3	08		               php
.12e4	48		               pha
.12e5	ad 11 d0	               lda  $d011
.12e8	09 10		               ora  #%00010000
.12ea	8d 11 d0	               sta  $d011
.12ed	68		               pla
.12ee	28		               plp
.12ef	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.12f0			scrmaninit
.12f0	20 25 14	               jsr  push
.12f3	a9 06		               lda  #vbleu
.12f5	8d 21 d0	               sta  vicbackcol
.12f8	a9 05		               lda  #vvert
.12fa	8d 20 d0	               sta  vicbordcol
.12fd	a9 01		               lda  #vblanc
.12ff	8d 86 02	               sta  bascol
.1302	ad 00 04	               lda  scrnram
.1305	29 fd		               and  #%11111101
.1307	8d 00 04	               sta  scrnram
.130a	20 12 13	               jsr  cls
.130d	20 64 14	               jsr  pop
.1310	60		               rts
>1311	8e		characterset   .byte b_uppercase
.1312			cls
.1312	08		               php
.1313	48		               pha
.1314	a9 93		               lda  #$93
.1316	20 2e 13	               jsr  putch
.1319	a9 0e		               lda  #$0e
.131b	20 2e 13	               jsr  putch
.131e	68		               pla
.131f	28		               plp
.1320	60		               rts
.1321			putnch
.1321	08		               php
.1322	e0 00		               cpx  #$00
.1324	f0 06		               beq  out
.1326	20 d2 ff	again          jsr  $ffd2
.1329	ca		               dex
.132a	d0 fa		               bne  again
.132c	28		out            plp
.132d	60		               rts
.132e			putch
.132e	08		               php
.132f	20 d2 ff	               jsr  $ffd2
.1332	28		               plp
.1333	60		               rts
.1334			puts
.1334	20 25 14	               jsr  push
.1337	86 fb		               stx  zpage1
.1339	84 fc		               sty  zpage1+1
.133b	a0 00		               ldy  #0
.133d	b1 fb		next           lda  (zpage1),y
.133f	f0 09		               beq  exit
.1341	20 2e 13	               jsr  putch
.1344	20 2c 15	               jsr  inczp1
.1347	4c 3d 13	               jmp  next
.134a	20 64 14	exit           jsr  pop
.134d	60		               rts
.134e			gotoxy
.134e	08		               php
.134f	18		               clc
.1350	8a		               txa
.1351	48		               pha
.1352	98		               tya
.1353	aa		               tax
.1354	68		               pla
.1355	a8		               tay
.1356	20 f0 ff	               jsr  kplot
.1359	28		               plp
.135a	60		               rts
.135b			cursor
=$0286			bascol    =    $0286
.135b	08		               php
.135c	48		               pha
.135d	90 12		               bcc  restore
.135f	20 f0 ff	               jsr  kplot
.1362	8c 83 13	               sty  cx
.1365	8e 84 13	               stx  cy
.1368	ad 86 02	               lda  bascol
.136b	8d 85 13	               sta  bcol
.136e	4c 80 13	               jmp  out
.1371	ae 84 13	restore        ldx  cy
.1374	ac 83 13	               ldy  cx
.1377	20 f0 ff	               jsr  kplot
.137a	ad 85 13	               lda  bcol
.137d	8d 86 02	               sta  bascol
.1380	68		out            pla
.1381	28		               plp
.1382	60		               rts
>1383	00		cx   .byte     $00
>1384	00		cy   .byte     $00
>1385	00		bcol .byte     $00
.1386			cursave
.1386	08		               php
.1387	38		               sec
.1388	20 5b 13	               jsr  cursor
.138b	28		               plp
.138c	60		               rts
.138d			curput
.138d	08		               php
.138e	18		               clc
.138f	20 5b 13	               jsr  cursor
.1392	28		               plp
.1393	60		               rts
.1394			putsxy
.1394	20 25 14	               jsr  push
.1397	86 fb		               stx  zpage1
.1399	84 fc		               sty  zpage1+1
.139b	a0 00		               ldy  #$00
.139d	b1 fb		               lda  (zpage1),y
.139f	aa		               tax
.13a0	20 2c 15	               jsr  inczp1
.13a3	b1 fb		               lda  (zpage1),y
.13a5	a8		               tay
.13a6	20 4e 13	               jsr  gotoxy
.13a9	20 2c 15	               jsr  inczp1
.13ac	a6 fb		               ldx  zpage1
.13ae	a4 fc		               ldy  zpage1+1
.13b0	20 34 13	               jsr  puts
.13b3	20 64 14	               jsr  pop
.13b6	60		               rts
>13b7	00 00		straddr   .word     $00
>13b9	00		px        .byte     $00
>13ba	00		py        .byte     $00
>13bb	00 00		zp1       .word     $00
.13bd			putscxy
.13bd	20 25 14	               jsr  push
.13c0	84 fc		               sty  zpage1+1
.13c2	86 fb		               stx  zpage1
.13c4	ad 86 02	               lda  bascol
.13c7	8d e7 13	               sta  bc
.13ca	a0 00		               ldy #$00
.13cc	b1 fb		               lda  (zpage1),y
.13ce	8d 86 02	               sta  bascol
.13d1	20 2c 15	               jsr  inczp1
.13d4	a6 fb		               ldx  zpage1
.13d6	a4 fc		               ldy  zpage1+1
.13d8	20 94 13	               jsr  putsxy
.13db	ad e7 13	               lda  bc
.13de	8d 86 02	               sta  bascol
.13e1	20 64 14	               jsr  pop
.13e4	60		               rts
>13e5	00 00		straddr  .word      $00
>13e7	00		bc       .byte      $00
>13e8	00 00		zp1      .word      $00
.13ea			putrahex
.13ea	08		               php
.13eb	48		               pha
.13ec	20 32 16	               jsr  a2hex
.13ef	a9 de		               lda  #<a2hexstr
.13f1	a0 15		               ldy  #>a2hexstr
.13f3	20 34 13	               jsr  puts
.13f6	68		               pla
.13f7	28		               plp
.13f8	60		               rts
.13f9			kputrahexxy
.13f9			bputrahexxy
.13f9			putrahexxy
.13f9	08		               php
.13fa	20 32 16	               jsr  a2hex
.13fd	a9 db		               lda  #<a2hexpos
.13ff	a0 15		               ldy  #>a2hexpos
.1401	20 94 13	               jsr  putsxy
.1404	68		               pla
.1405	28		               plp
.1406	60		               rts
.1407			putrahexcxy
.1407	08		               php
.1408	20 32 16	               jsr  a2hex
.140b	a9 db		               lda  #<a2hexpos
.140d	a0 15		               ldy  #>a2hexpos
.140f	20 bd 13	               jsr  putscxy
.1412	68		               pla
.1413	28		               plp
.1414	60		               rts
.1415			setinverse
.1415	48		               pha
.1416	a9 12		               lda  #$12
.1418	20 d2 ff	               jsr  $ffd2
.141b	68		               pla
.141c	60		               rts
.141d			clrinverse
.141d	48		               pha
.141e	a9 92		               lda  #$92
.1420	20 d2 ff	               jsr  $ffd2
.1423	68		               pla
.1424	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.1425			push
.1425	08		          php            ; stack : flg, pcl, pch
.1426	78		          sei
.1427	8d 61 14	          sta  ra        ; save a
.142a	68		          pla            ; stack : pcl, pch
.142b	8d 60 14	          sta  rp        ; save rp
.142e	68		          pla            ; stack : pch
.142f	8d 62 14	          sta  pc        ; save pcl
.1432	68		          pla            ; stack : -
.1433	8d 63 14	          sta  pc+1      ; save pch
.1436	a5 fb		          lda  zpage1    ; get zpage1 low byte
.1438	48		          pha            ; stack : zp1l
.1439	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.143b	48		          pha            ; stack : zp1h, zp1l
.143c	a5 fd		          lda  zpage2    ; get zpage2 low byte
.143e	48		          pha            ; stack : zp2l, zp1h, zp1l
.143f	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.1441	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1442	ad 60 14	          lda  rp        ; get rp
.1445	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1446	ad 61 14	          lda  ra        ; get a
.1449	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.144a	8a		          txa            ; get x
.144b	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.144c	98		          tya            ; get y
.144d	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.144e	ad 63 14	          lda  pc+1      ; get pch
.1451	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1452	ad 62 14	          lda  pc        ; get pcl
.1455	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1456	ad 60 14	          lda  rp        ; get rp
.1459	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.145a	ad 61 14	          lda  ra        ; get a
.145d	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.145e	58		          cli
.145f	60		          rts
>1460	00		rp        .byte     0
>1461	00		ra        .byte     0
>1462	00 00		pc        .word     0
.1464			pull
.1464			pop
.1464	78		          sei
.1465	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1466	8d 99 14	          sta  pc        ; save pcl
.1469	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.146a	8d 9a 14	          sta  pc+1      ; save pch
.146d	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.146e	a8		          tay            ; set y
.146f	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1470	aa		          tax            ; set x
.1471	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1472	8d 98 14	          sta  ra        ; save a
.1475	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1476	8d 97 14	          sta  rp        ; save rp
.1479	68		          pla            ; stack : zp2l, zp1h, zp1l
.147a	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.147c	68		          pla            ; stack : zp1h, zp1l
.147d	85 fd		          sta  zpage2    ; get zpage2 High byte
.147f	68		          pla            ; stack : zp1l
.1480	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.1482	68		          pla            ; stack :
.1483	85 fb		          sta  zpage1    ; get zpage1 High byte
.1485	ad 9a 14	          lda  pc+1      ; get pch
.1488	48		          pha            ; stack : pch
.1489	ad 99 14	          lda  pc
.148c	48		          pha            ; stack : pcl, pch
.148d	ad 97 14	          lda  rp        ; get rp
.1490	48		          pha            ; stack : rp, pcl, pch
.1491	ad 98 14	          lda  ra        ; set ra
.1494	58		          cli
.1495	28		          plp            ; stack : pcl, pch
.1496	60		          rts
>1497	00		rp        .byte     0
>1498	00		ra        .byte     0
>1499	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.149b			blkfill
.149b	20 25 14	bf0            jsr  push
.149e	20 59 15	               jsr  savezp1
.14a1	84 fc		               sty  zpage1+1
.14a3	a0 00		               ldy  #$00
.14a5	84 fb		               sty  zpage1
.14a7	91 fb		bf1            sta  (zpage1),y
.14a9	c8		               iny
.14aa	d0 fb		               bne  bf1
.14ac	20 68 15	               jsr  restzp1
.14af	20 64 14	               jsr  pop
.14b2	60		               rts
.14b3			memfill
.14b3	20 25 14	               jsr  push
.14b6	20 9b 14	mf1            jsr  blkfill
.14b9	c8		               iny
.14ba	ca		               dex
.14bb	d0 f9		               bne  mf1
.14bd	20 64 14	               jsr  pop
.14c0	60		               rts
.14c1			memmove
.14c1	20 25 14	               jsr  push
.14c4	ba		               tsx            ; On se crée un pointeur ...
.14c5	8a		               txa
.14c6	18		               clc
.14c7	69 0b		               adc  #11
.14c9	a8		               tay
.14ca	a2 06		               ldx  #$06
.14cc	b9 00 01	nextbyte       lda  $0100,y
.14cf	99 1b 15	               sta  words,y
.14d2	c8		               iny
.14d3	ca		               dex
.14d4	d0 f6		               bne  nextbyte
.14d6	ad 1b 15	               lda  s
.14d9	8d f2 14	               sta  source+1
.14dc	ad 1c 15	               lda  s+1
.14df	8d f3 14	               sta  source+2
.14e2	ad 1d 15	               lda  d
.14e5	8d ef 14	               sta  destin+1
.14e8	ad 1e 15	               lda  d+1
.14eb	8d f0 14	               sta  destin+2
.14ee	ad ff ff	destin         lda  $ffff
.14f1	8d ff ff	source         sta  $ffff
.14f4	ee ef 14	               inc  destin+1
.14f7	d0 03		               bne  src
.14f9	ee f0 14	               inc  destin+2
.14fc	ee f2 14	src            inc  source+1
.14ff	d0 03		               bne  cnt
.1501	ee f3 14	               inc  source+2
.1504	ad 1f 15	cnt            lda  compte
.1507	d0 08		               bne  decit
.1509	ad 20 15	               lda  compte+1
.150c	f0 09		               beq  fini
.150e	ce 20 15	               dec  compte+1
.1511	ce 1f 15	decit          dec  compte
.1514	4c ee 14	               jmp  destin
.1517	20 64 14	fini           jsr  pop
.151a	60		               rts
.151b			words
>151b	00 00		s         .word     $0000
>151d	00 00		d         .word     $0000
>151f	00 00		compte    .word     $0000
.1521			decword
.1521	20 25 14	               jsr  push
.1524	86 fd		               stx  zpage2
.1526	84 fe		               sty  zpage2+1
.1528	20 64 14	               jsr  pop
.152b	60		               rts
.152c			inczp1
.152c	08		               php
.152d	e6 fb		               inc  zpage1
.152f	d0 02		               bne  nopage
.1531	e6 fc		               inc  zpage1+1
.1533	28		nopage         plp
.1534	60		               rts
.1535			deczp1
.1535	08		                php
.1536	48		                pha
.1537	c6 fb		                dec  zpage1
.1539	d0 02		                bne  nopage
.153b	c6 fc		                dec  zpage1+1
.153d	c6 fb		nopage          dec  zpage1
.153f	68		                pla
.1540	28		                plp
.1541	60		                rts
.1542			inczp2
.1542	08		               php
.1543	48		               pha
.1544	e6 fd		               inc  zpage2
.1546	d0 02		               bne  nopage
.1548	e6 fe		               inc  zpage2+1
.154a	68		nopage         pla
.154b	28		               plp
.154c	60		               rts
.154d			deczp2
.154d	08		               php
.154e	48		               pha
.154f	a5 fd		               lda  zpage2
.1551	d0 02		               bne  nopage
.1553	c6 fe		               dec  zpage2+1
.1555	c6 fd		nopage         dec  zpage2
.1557	28		               plp
.1558	60		               rts
.1559			savezp1
.1559	08		               php
.155a	48		               pha
.155b	a5 fb		               lda  zpage1
.155d	8d d5 15	               sta  zp1
.1560	a5 fc		               lda  zpage1+1
.1562	8d d6 15	               sta  zp1+1
.1565	68		               pla
.1566	28		               plp
.1567	60		               rts
.1568			restzp1
.1568	08		               php
.1569	48		               pha
.156a	ad d5 15	               lda zp1
.156d	85 fb		               sta zpage1
.156f	ad d6 15	               lda zp1+1
.1572	85 fc		               sta zpage1+1
.1574	68		               pla
.1575	28		               plp
.1576	60		               rts
.1577			savezp2
.1577	08		         php
.1578	48		         pha
.1579	a5 fd		         lda zpage2
.157b	8d d7 15	         sta zp2
.157e	a5 fe		         lda zpage2+1
.1580	8d d8 15	         sta zp2+1
.1583	68		         pla
.1584	28		         plp
.1585	60		         rts
.1586			restzp2
.1586	08		                php
.1587	48		                pha
.1588	ad d7 15	                lda  zp2
.158b	85 fd		                sta  zpage2
.158d	ad d8 15	                lda  zp2+1
.1590	85 fe		                sta  zpage2+1
.1592	68		                pla
.1593	28		                plp
.1594	60		                rts
.1595			xy2addr
.1595	08		                php
.1596	48		                pha
.1597	8a		                txa
.1598	48		                pha
.1599	98		                tya
.159a	48		                pha
.159b	ad d0 15	                lda     addr1+1
.159e	8d d2 15	                sta     addr2+1
.15a1	ad cf 15	                lda     addr1
.15a4	8d d1 15	                sta     addr2
.15a7	c0 00		                cpy     #$00
.15a9	f0 0f		                beq     addx
.15ab	18		moreline        clc
.15ac	6d ce 15	                adc     ymult
.15af	90 03		                bcc     norepy
.15b1	ee d2 15	                inc     addr2+1
.15b4	8d d1 15	norepy          sta     addr2
.15b7	88		                dey
.15b8	d0 f1		                bne     moreline
.15ba	8a		addx            txa
.15bb	18		                clc
.15bc	6d d1 15	                adc     addr2
.15bf	90 03		                bcc     thatsit
.15c1	ee d2 15	                inc     addr2+1
.15c4	8d d1 15	thatsit         sta     addr2
.15c7	68		                pla
.15c8	a8		                tay
.15c9	68		                pla
.15ca	aa		                tax
.15cb	68		                pla
.15cc	28		                plp
.15cd	60		                rts
>15ce	28		ymult          .byte     40
>15cf	00 00		addr1          .word     $0000
>15d1	00 00		addr2          .word     $0000
>15d3	00 00		bytecnt        .word     $0000
>15d5	00 00		zp1        .word   $0000
>15d7	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>15d9	01		a2hexcol       .byte     1              ; pour aputscxy
>15da	00		a2hexbkcol     .byte     %00000000
.15db			a2hexpos
>15db	00		a2hexpx        .byte     0              ; pour aputsxy
>15dc	00		a2hexpy        .byte     0
>15dd	24		a2hexprefix    .byte     "$"            ; pour aputs
>15de	00 00		a2hexstr       .word     $00
>15e0	00 00		               .word     $00
>15e2	00		               .byte     0              ; 0 end string
.15e3			putahexfmtxy
.15e3	20 25 14	               jsr  push
.15e6	20 32 16	               jsr  a2hex
.15e9	ae db 15	               ldx  a2hexpx
.15ec	ac dc 15	               ldy  a2hexpy
.15ef	20 4e 13	               jsr  gotoxy
.15f2	a2 dd		               ldx  #<a2hexprefix
.15f4	a0 15		               ldy  #>a2hexprefix
.15f6	20 34 13	               jsr  puts
.15f9	20 64 14	               jsr  pop
.15fc	60		               rts
.15fd			putahexfmt
.15fd	20 25 14	               jsr  push
.1600	20 32 16	               jsr  a2hex
.1603	a2 dd		               ldx  #<a2hexprefix
.1605	a0 15		               ldy  #>a2hexprefix
.1607	20 34 13	               jsr  puts
.160a	20 64 14	               jsr  pop
.160d	60		               rts
.160e			putahex
.160e	20 25 14	               jsr  push
.1611	20 32 16	               jsr  a2hex
.1614	a2 de		               ldx  #<a2hexstr
.1616	a0 15		               ldy  #>a2hexstr
.1618	20 34 13	               jsr  puts
.161b	20 64 14	               jsr  pop
.161e	60		               rts
.161f			nib2hex
.161f	08		               php
.1620	29 0f		               and  #$0f
.1622	f8		               sed
.1623	18		               clc
.1624	69 90		               adc  #$90
.1626	69 40		               adc  #$40
.1628	d8		               cld
.1629	28		               plp
.162a	60		               rts
.162b			lsra4bits
.162b	08		               php
.162c	4a		               lsr
.162d	4a		               lsr
.162e	4a		               lsr
.162f	4a		               lsr
.1630	28		               plp
.1631	60		               rts
.1632			a2hex
.1632	08		               php
.1633	48		               pha
.1634	48		               pha
.1635	20 2b 16	               jsr  lsra4bits
.1638	20 1f 16	               jsr  nib2hex
.163b	8d de 15	               sta  a2hexstr
.163e	68		               pla
.163f	20 1f 16	               jsr  nib2hex
.1642	8d df 15	               sta  a2hexstr+1
.1645	a9 00		               lda  #$00                ; set end of string
.1647	8d e0 15	               sta  a2hexstr+2
.164a	68		               pla
.164b	28		               plp
.164c	60		               rts
.164d			xy2hex
.164d	20 25 14	               jsr  push
.1650	20 32 16	               jsr  a2hex
.1653	8a		               txa
.1654	48		               pha
.1655	20 2b 16	               jsr  lsra4bits
.1658	20 1f 16	               jsr  nib2hex
.165b	8d de 15	               sta  a2hexstr
.165e	68		               pla
.165f	20 1f 16	               jsr  nib2hex
.1662	8d df 15	               sta  a2hexstr+1
.1665	98		               tya
.1666	48		               pha
.1667	20 2b 16	               jsr  lsra4bits
.166a	20 1f 16	               jsr  nib2hex
.166d	8d e0 15	               sta  a2hexstr+2
.1670	68		               pla
.1671	20 1f 16	               jsr  nib2hex
.1674	8d e1 15	               sta  a2hexstr+3
.1677	a9 00		               lda  #$00                ; 0 ended string
.1679	8d e2 15	               sta  a2hexstr+4
.167c	20 64 14	               jsr  pop
.167f			atobin
.167f	20 25 14	               jsr     push
.1682	a2 08		               ldx     #8
.1684	a0 00		               ldy     #0
.1686	2a		nextbit        rol
.1687	48		               pha
.1688	69 00		               adc     #$00
.168a	29 01		               and     #$01
.168c	20 1f 16	               jsr     nib2hex
.168f	99 a0 16	               sta     abin,y
.1692	68		               pla
.1693	c8		               iny
.1694	ca		               dex
.1695	d0 ef		               bne     nextbit
.1697	a9 00		               lda     #0
.1699	99 a0 16	               sta     abin,y
.169c	20 64 14	               jsr     pull
.169f	60		               rts
>16a0	30 30 30 30	abin           .null   "00000000"
>16a4	30 30 30 30 00
.16a9			putabin
.16a9	20 7f 16	               jsr     atobin
.16ac	20 25 14	               jsr     push
.16af	a2 a0		               ldx     #<abin
.16b1	a0 16		               ldy     #>abin
.16b3	20 34 13	               jsr     puts
.16b6	20 64 14	               jsr     pop
.16b9	60		               rts
.16ba			putabinfmt
.16ba	08		               php
.16bb	48		               pha
.16bc	a9 25		               lda     #"%"
.16be	20 2e 13	               jsr     putch
.16c1	68		               pla
.16c2	20 a9 16	               jsr     putabin
.16c5	28		               plp
.16c6	60		               rts
.16c7			putabinxy
.16c7	20 4e 13	               jsr     gotoxy
.16ca	20 a9 16	               jsr     putabin
.16cd	60		               rts
.16ce			putabinfmtxy
.16ce	20 4e 13	               jsr     gotoxy
.16d1	20 ba 16	               jsr     putabinfmt
.16d4	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a     =    $41
=$42			key_b     =    $42
=$43			key_c     =    $43
=$44			key_d     =    $44
=$45			key_e     =    $45
=$46			key_f     =    $46
=$47			key_g     =    $47
=$48			key_h     =    $48
=$49			key_i     =    $49
=$4a			key_j     =    $4a
=$4b			key_k     =    $4b
=$4c			key_l     =    $4c
=$4d			key_m     =    $4d
=$4e			key_n     =    $4e
=$4f			key_o     =    $4f
=$50			key_p     =    $50
=$51			key_q     =    $51
=$52			key_r     =    $52
=$53			key_s     =    $53
=$54			key_t     =    $54
=$55			key_u     =    $55
=$56			key_v     =    $56
=$57			key_w     =    $57
=$58			key_x     =    $58
=$59			key_y     =    $59
=$5a			key_z     =    $5a
=$c1			shift_a   =    $c1
=$c2			shift_b   =    $c2
=$c3			shift_c   =    $c3
=$c4			shift_d   =    $c4
=$c5			shift_e   =    $c5
=$c6			shift_f   =    $c6
=$c7			shift_g   =    $c7
=$c8			shift_h   =    $c8
=$c9			shift_i   =    $c9
=$ca			shift_j   =    $ca
=$cb			shift_k   =    $cb
=$cc			shift_l   =    $cc
=$cd			shift_m   =    $cd
=$ce			shift_n   =    $ce
=$cf			shift_o   =    $cf
=$d0			shift_p   =    $d0
=$d1			shift_q   =    $d1
=$d2			shift_r   =    $d2
=$d3			shift_s   =    $d3
=$d4			shift_t   =    $d4
=$d5			shift_u   =    $d5
=$d6			shift_v   =    $d6
=$d7			shift_w   =    $d7
=$d8			shift_x   =    $d8
=$d9			shift_y   =    $d9
=$da			shift_z   =    $da
=$01			ctrl_a    =    $01
=$02			ctrl_b    =    $02
=$03			ctrl_c    =    $03
=$04			ctrl_d    =    $04
=$05			ctrl_e    =    $05
=$06			ctrl_f    =    $06
=$07			ctrl_g    =    $07
=$08			ctrl_h    =    $08
=$09			ctrl_i    =    $09
=$0a			ctrl_j    =    $0a
=$0b			ctrl_k    =    $0b
=$0c			ctrl_l    =    $0c
=$0d			ctrl_m    =    $0d
=$0e			ctrl_n    =    $0e
=$0f			ctrl_o    =    $0f
=$10			ctrl_p    =    $10
=$11			ctrl_q    =    $11
=$12			ctrl_r    =    $12
=$13			ctrl_s    =    $13
=$14			ctrl_t    =    $14
=$15			ctrl_u    =    $15
=$16			ctrl_v    =    $16
=$17			ctrl_w    =    $17
=$18			ctrl_x    =    $18
=$19			ctrl_y    =    $19
=$1a			ctrl_z    =    $1a
=$b0			comd_a    =    $b0
=$bf			comd_b    =    $bf
=$bc			comd_c    =    $bc
=$ac			comd_d    =    $ac
=$b1			comd_e    =    $b1
=$bb			comd_f    =    $bb
=$a5			comd_g    =    $a5
=$b4			comd_h    =    $b4
=$a2			comd_i    =    $a2
=$b5			comd_j    =    $b5
=$a1			comd_k    =    $a1
=$b6			comd_l    =    $b6
=$a7			comd_m    =    $a7
=$aa			comd_n    =    $aa
=$b9			comd_o    =    $b9
=$af			comd_p    =    $af
=$ab			comd_q    =    $ab
=$b2			comd_r    =    $b2
=$ae			comd_s    =    $ae
=$a3			comd_t    =    $a3
=$b8			comd_u    =    $b8
=$be			comd_v    =    $be
=$b3			comd_w    =    $b3
=$bd			comd_x    =    $bd
=$b7			comd_y    =    $b7
=$ad			comd_z    =    $ad
.16d5			waitstop
.16d5	20 25 14	               jsr  push
.16d8	20 ed f6	wait           jsr  k_stop
.16db	d0 fb		               bne  wait
.16dd	20 64 14	               jsr  pop
.16e0	60		               rts
.16e1			anykey
.16e1	08		               php
.16e2	48		               pha
.16e3	a5 cb		nokey          lda 203
.16e5	c9 40		               cmp #64
.16e7	f0 fa		               beq nokey
.16e9	20 ef 16	               jsr releasekey
.16ec	68		               pla
.16ed	28		               plp
.16ee	60		               rts
.16ef			releasekey
.16ef	08		               php
.16f0	48		               pha
.16f1	a5 cb		keypressed     lda 203
.16f3	c9 40		               cmp #64
.16f5	d0 fa		               bne keypressed
.16f7	68		               pla
.16f8	28		               plp
.16f9	60		               rts
.16fa			getkey
.16fa	20 e4 ff	again          jsr  getin
.16fd	c9 00		               cmp  #0
.16ff	f0 f9		               beq  again
.1701	60		               rts
.1702			waitkey
.1702	20 25 14	               jsr  push
.1705	8d 53 17	               sta  thekey
.1708	20 e4 ff	nope           jsr  getin
.170b	20 d2 ff	               jsr  chrout
.170e	cd 53 17	               cmp  thekey
.1711	d0 f5		               bne  nope
.1713	20 d2 ff	               jsr  chrout
.1716	20 64 14	               jsr  pop
.1719	60		               rts
.171a			waitspace
.171a	20 25 14	               jsr  push
.171d	a9 7f		wait           lda  #$7f  ;%01111111
.171f	8d 00 dc	               sta  $dc00
.1722	ad 01 dc	               lda  $dc01
.1725	29 10		               and  #$10  ;mask %00010000
.1727	d0 f4		               bne  wait
.1729	20 64 14	               jsr  pop
.172c			waitsstop
.172c	20 25 14	               jsr  push
.172f	20 ed f6	wait           jsr  k_stop  ;%01111111
.1732	d0 fb		               bne  wait
.1734	20 64 14	               jsr  pop
.1737			waitreturn
.1737	20 25 14	               jsr  push
.173a	ad 54 17	               lda  thecount
.173d	8d 00 04	               sta  scrnram
.1740	a9 02		               lda  #$02
.1742	8d 00 d8	               sta  colorram
.1745	20 e4 ff	nope           jsr  getin
.1748	c9 0d		nohex          cmp  #$0d
.174a	d0 f9		               bne  nope
.174c	ee 54 17	               inc  thecount
.174f	20 64 14	               jsr  pop
.1752	60		               rts
>1753	00		thekey         .byte   0
>1754	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  End of listing

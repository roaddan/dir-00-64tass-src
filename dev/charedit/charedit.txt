
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Tue Nov  7 12:32:24 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm

=$0d			flashcol = vvert1

;******  Return to file: charedit.asm

.080d			main
.080d	20 51 15	               jsr  push
.0810	20 02 14	               jsr  screendis
.0813	20 76 08	               jsr  copycharset
.0816	20 1c 14	               jsr  scrmaninit
.0819	20 65 08	               jsr  setscreenptr
.081c	20 d7 08	               jsr  staticscreen
.081f	20 0f 14	               jsr  screenena
.0822	a9 00		               lda  #$00
.0824	8d 58 0b	               sta  fkeyset
.0827	20 1d 09	               jsr  showfkeys
.082a	20 90 15	               jsr  pop
.082d	20 59 0b	               jsr  f1action
.0830	20 66 0a	               jsr  keyaction
.0833	20 3e 14	               jsr  cls
.0836	20 51 15	               jsr  push
.0839	a2 26		               ldx  #<blankmsg
.083b	a0 10		               ldy  #>blankmsg
.083d	20 e9 14	               jsr  putscxy
.0840	a2 40		               ldx  #<bye_msg
.0842	a0 12		               ldy  #>bye_msg
.0844	20 e9 14	               jsr  putscxy
.0847	20 90 15	               jsr  pop
.084a	20 51 15	               jsr  push
.084d	a2 00		               ldx  #0
.084f	a0 00		               ldy  #0
.0851	20 7a 14	               jsr  gotoxy
.0854	20 90 15	               jsr  pop
.0857	20 29 19	               jsr  getkey
.085a	20 66 fe	               jsr  k_warmboot
.085d	60		               rts
.085e			editor
.085e	20 51 15	               jsr  push
.0861	20 90 15	               jsr  pop
.0864	60		               rts
.0865			setscreenptr
.0865	20 51 15	               jsr  push
.0868	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.086b	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.086d	09 0e		               ora  #charsdef      ; on place les bits 3210 Ã  %xxxx001x ce qui ...
.086f	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.0872	20 90 15	               jsr  pop
.0875	60		               rts
=$0400			scrnnewram     = $0400
=14			charsdef       = 14
.0876			copycharset
.0876	20 51 15	               jsr  push
.0879	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.087c	29 fe		               and  #%11111110     ;254
.087e	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0881	a5 01		               lda  u6510map       ;$01
.0883	29 fb		               and  #%11111011     ;251
.0885	85 01		               sta  u6510map       ;$01
.0887	20 9c 08	               jsr  memcopy
.088a	a5 01		               lda  u6510map       ;$01
.088c	09 04		               ora  #%00000100
.088e	85 01		               sta  u6510map       ;$01
.0890	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0893	09 01		               ora  #%00000001     ;254
.0895	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0898	20 90 15	               jsr  pop
.089b	60		               rts
.089c			memcopy
.089c	20 51 15	               jsr  push
.089f	ad d1 08	               lda  startaddr
.08a2	85 fb		               sta  zpage1
.08a4	ad d2 08	               lda  startaddr+1
.08a7	85 fc		               sta  zpage1+1
.08a9	ad d3 08	               lda  destaddr
.08ac	85 fd		               sta  zpage2
.08ae	ad d4 08	               lda  destaddr+1
.08b1	85 fe		               sta  zpage2+1
.08b3	a0 00		               ldy  #$00
.08b5	b1 fb		onemore        lda  (zpage1),y
.08b7	91 fd		               sta  (zpage2),y
.08b9	20 58 16	               jsr  inczp1
.08bc	20 70 16	               jsr  inczp2
.08bf	a5 fc		               lda  zpage1+1
.08c1	cd d6 08	               cmp  stopaddr+1
.08c4	d0 ef		               bne  onemore
.08c6	a5 fb		               lda  zpage1
.08c8	cd d5 08	               cmp  stopaddr
.08cb	d0 e8		               bne  onemore
.08cd	20 90 15	               jsr  pop
.08d0	60		               rts
=14336			bitmapmem =    charsdef * 1024     ;Calcul de la position ram des caracteres.
>08d1	00 d0		startaddr      .word     $d000               ; 53248
>08d3	00 38		destaddr       .word     bitmapmem           ; $3000, 12288
>08d5	d1 28		stopaddr       .word     startaddr+(4*$800)  ; 55296
.08d7			staticscreen
.08d7	48		               pha
.08d8	a9 0c		               lda  #vgris1
.08da	8d 20 d0	               sta  $d020
.08dd	68		               pla
.08de	48		               pha
.08df	a9 0b		               lda  #vgris
.08e1	8d 21 d0	               sta  $d021
.08e4	68		               pla
.08e5	48		               pha
.08e6	a9 8e		               lda  #b_uppercase
.08e8	8d 3d 14	               sta  characterset
.08eb	20 d2 ff	               jsr  $ffd2
.08ee	68		               pla
.08ef	20 bd 09	               jsr  showlines
.08f2	20 9e 09	               jsr  showallchars
.08f5	20 05 0a	               jsr  showgrid
.08f8	20 1d 09	               jsr  showfkeys
.08fb	20 51 15	               jsr  push
.08fe	a2 26		               ldx  #<blankmsg
.0900	a0 10		               ldy  #>blankmsg
.0902	20 e9 14	               jsr  putscxy
.0905	a2 2b		               ldx  #<quit_msg
.0907	a0 12		               ldy  #>quit_msg
.0909	20 e9 14	               jsr  putscxy
.090c	20 90 15	               jsr  pop
.090f	20 51 15	               jsr  push
.0912	a2 00		               ldx  #0
.0914	a0 07		               ldy  #7
.0916	20 7a 14	               jsr  gotoxy
.0919	20 90 15	               jsr  pop
.091c	60		               rts
.091d			showfkeys
.091d	20 51 15	               jsr  push
.0920	ad 58 0b	               lda  fkeyset
.0923	c9 00		               cmp  #$0
.0925	d0 3b		               bne  secondks
.0927	a2 62		               ldx #<f1abutton
.0929	a0 12		               ldy #>f1abutton
.092b	20 e9 14	               jsr putscxy
.092e	a2 7c		               ldx #<f2abutton
.0930	a0 12		               ldy #>f2abutton
.0932	20 e9 14	               jsr putscxy
.0935	a2 96		               ldx #<f3abutton
.0937	a0 12		               ldy #>f3abutton
.0939	20 e9 14	               jsr putscxy
.093c	a2 b0		               ldx #<f4abutton
.093e	a0 12		               ldy #>f4abutton
.0940	20 e9 14	               jsr putscxy
.0943	a2 ca		               ldx #<f5abutton
.0945	a0 12		               ldy #>f5abutton
.0947	20 e9 14	               jsr putscxy
.094a	a2 e4		               ldx #<f6abutton
.094c	a0 12		               ldy #>f6abutton
.094e	20 e9 14	               jsr putscxy
.0951	a2 fe		               ldx #<f7abutton
.0953	a0 12		               ldy #>f7abutton
.0955	20 e9 14	               jsr putscxy
.0958	a2 18		               ldx #<f8abutton
.095a	a0 13		               ldy #>f8abutton
.095c	20 e9 14	               jsr putscxy
.095f	4c 9a 09	               jmp end
.0962			secondks
.0962	a2 32		               ldx #<f1bbutton
.0964	a0 13		               ldy #>f1bbutton
.0966	20 e9 14	               jsr putscxy
.0969	a2 4c		               ldx #<f2bbutton
.096b	a0 13		               ldy #>f2bbutton
.096d	20 e9 14	               jsr putscxy
.0970	a2 66		               ldx #<f3bbutton
.0972	a0 13		               ldy #>f3bbutton
.0974	20 e9 14	               jsr putscxy
.0977	a2 80		               ldx #<f4bbutton
.0979	a0 13		               ldy #>f4bbutton
.097b	20 e9 14	               jsr putscxy
.097e	a2 9a		               ldx #<f5bbutton
.0980	a0 13		               ldy #>f5bbutton
.0982	20 e9 14	               jsr putscxy
.0985	a2 b4		               ldx #<f6bbutton
.0987	a0 13		               ldy #>f6bbutton
.0989	20 e9 14	               jsr putscxy
.098c	a2 ce		               ldx #<f7bbutton
.098e	a0 13		               ldy #>f7bbutton
.0990	20 e9 14	               jsr putscxy
.0993	a2 e8		               ldx #<f8bbutton
.0995	a0 13		               ldy #>f8bbutton
.0997	20 e9 14	               jsr putscxy
.099a	20 90 15	end            jsr  pop
.099d	60		               rts
.099e			showallchars
.099e	20 51 15	               jsr push
.09a1	20 51 15	               jsr  push
.09a4	a2 00		               ldx  #0
.09a6	a0 00		               ldy  #0
.09a8	20 7a 14	               jsr  gotoxy
.09ab	20 90 15	               jsr  pop
.09ae	a2 00		               ldx  #$00
.09b0	8a		nextc          txa
.09b1	9d 00 04	               sta  scrnnewram,x
.09b4	e8		               inx
.09b5	e0 80		               cpx  #$80
.09b7	d0 f7		               bne  nextc
.09b9	20 90 15	               jsr  pop
.09bc	60		               rts
.09bd			showlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.09bd	20 51 15	               jsr  push
.09c0	a2 28		               ldx  #40
.09c2	a9 40		               lda  #64
.09c4	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.09c7	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.09ca	ca		               dex
.09cb	e0 10		hline          cpx  #vlinepos
.09cd	10 03		               bpl  notyet
.09cf	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.09d2	e0 00		notyet         cpx  #$00
.09d4	d0 ee		               bne  nextl
.09d6	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.09d8	85 fb		               sta  zpage1
.09da	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.09dc	85 fc		               sta  zpage1+1
.09de	a0 00		               ldy  #0
.09e0	a9 72		               lda  #114
.09e2	91 fb		               sta  (zpage1),y
.09e4	20 39 0a	               jsr  zp1add40
.09e7	a2 12		               ldx  #24-hline2
.09e9	a9 5d		               lda  #93
.09eb	91 fb		another93      sta  (zpage1),y
.09ed	20 39 0a	               jsr  zp1add40
.09f0	ca		               dex
.09f1	d0 f8		               bne  another93
.09f3	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.09f5	85 fb		               sta  zpage1
.09f7	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.09f9	85 fc		               sta  zpage1+1
.09fb	a0 00		               ldy  #0
.09fd	a9 73		               lda  #115
.09ff	91 fb		               sta  (zpage1),y
.0a01	20 90 15	               jsr  pop
.0a04	60		               rts
.0a05			showgrid
=8			gligne=8
=1			gcol=1
.0a05	20 51 15	               jsr  push
.0a08	20 02 14	               jsr  screendis
.0a0b	a9 41		               lda  #<scrnnewram+(40*(gligne))+gcol
.0a0d	85 fb		               sta  zpage1
.0a0f	a9 05		               lda  #>scrnnewram+(40*(gligne))+gcol
.0a11	85 fc		               sta  zpage1+1
.0a13	a2 08		               ldx  #8
.0a15	a9 65		nextbox        lda  #101
.0a17	a0 09		               ldy  #9
.0a19	91 fb		               sta  (zpage1),y
.0a1b	88		               dey
.0a1c	a9 4f		               lda  #79
.0a1e	91 fb		nextcol        sta  (zpage1),y
.0a20	88		               dey
.0a21	d0 fb		               bne  nextcol
.0a23	20 39 0a	               jsr  zp1add40
.0a26	ca		               dex
.0a27	d0 ec		               bne  nextbox
.0a29	a0 08		               ldy  #8
.0a2b	a9 77		               lda  #119
.0a2d	91 fb		nextlin        sta  (zpage1),y
.0a2f	88		               dey
.0a30	d0 fb		               bne  nextlin
.0a32	20 0f 14	               jsr screenena
.0a35	20 90 15	               jsr  pop
.0a38	60		               rts
.0a39			zp1add40
.0a39	08		               php
.0a3a	48		               pha
.0a3b	18		               clc
.0a3c	a5 fb		               lda  zpage1
.0a3e	69 28		               adc  #40
.0a40	90 02		               bcc  nocarry
.0a42	e6 fc		               inc  zpage1+1
.0a44	85 fb		nocarry        sta  zpage1
.0a46	68		               pla
.0a47	28		               plp
.0a48	60		               rts
.0a49			delay
.0a49	20 51 15	               jsr  push
.0a4c	a9 00		               lda  #$0
.0a4e	aa		               tax
.0a4f	a8		               tay
.0a50	ca		xagain         dex
.0a51	ca		               dex
.0a52	88		yagain         dey
.0a53	c0 00		               cpy  #$00
.0a55	d0 fb		               bne  yagain
.0a57	e0 00		               cpx  #$00
.0a59	d0 f5		               bne  xagain
.0a5b	20 90 15	               jsr  pop
.0a5e	60		               rts
.0a5f			template
.0a5f	20 51 15	               jsr  push
.0a62	20 90 15	               jsr  pop
.0a65	60		               rts
.0a66			keyaction
.0a66	20 51 15	               jsr  push
.0a69	20 29 19	loop           jsr  getkey
.0a6c	20 51 15	               jsr  push
.0a6f	a2 00		               ldx  #0
.0a71	a0 14		               ldy  #20
.0a73	20 7a 14	               jsr  gotoxy
.0a76	20 90 15	               jsr  pop
.0a79	20 5a 14	               jsr  putch
.0a7c	20 51 15	               jsr  push
.0a7f	a2 00		               ldx  #0
.0a81	a0 15		               ldy  #21
.0a83	20 7a 14	               jsr  gotoxy
.0a86	20 90 15	               jsr  pop
.0a89	48		               pha
.0a8a	48		               pha
.0a8b	a9 24		               lda  #'$'
.0a8d	20 5a 14	               jsr  putch
.0a90	68		               pla
.0a91	aa		               tax
.0a92	bd 04 18	               lda  asciitorom,x
.0a95	20 3d 17	               jsr  putahex
.0a98	20 51 15	               jsr  push
.0a9b	a2 42		               ldx  #<txt1
.0a9d	a0 0b		               ldy  #>txt1
.0a9f	20 60 14	               jsr  puts
.0aa2	20 90 15	               jsr  pull
.0aa5	20 51 15	               jsr  push
.0aa8	a2 00		               ldx  #0
.0aaa	a0 16		               ldy  #22
.0aac	20 7a 14	               jsr  gotoxy
.0aaf	20 90 15	               jsr  pop
.0ab2	a9 24		               lda  #'$'
.0ab4	20 5a 14	               jsr  putch
.0ab7	68		               pla
.0ab8	20 3d 17	               jsr  putahex
.0abb	20 51 15	               jsr  push
.0abe	a2 4c		               ldx  #<txt2
.0ac0	a0 0b		               ldy  #>txt2
.0ac2	20 60 14	               jsr  puts
.0ac5	20 90 15	               jsr  pull
.0ac8	c9 85		               cmp  #key_f1
.0aca	f0 3c		               beq  f1
.0acc	c9 89		               cmp  #key_f2
.0ace	f0 3e		               beq  f2
.0ad0	c9 86		               cmp  #key_f3
.0ad2	f0 40		               beq  f3
.0ad4	c9 8a		               cmp  #key_f4
.0ad6	f0 42		               beq  f4
.0ad8	c9 87		               cmp  #key_f5
.0ada	f0 44		               beq  f5
.0adc	c9 8b		               cmp  #key_f6
.0ade	f0 46		               beq  f6
.0ae0	c9 88		               cmp  #key_f7
.0ae2	f0 48		               beq  f7
.0ae4	c9 8c		               cmp  #key_f8
.0ae6	f0 4a		               beq  f8
.0ae8	c9 18		               cmp  #ctrl_x
.0aea	f0 4f		               beq  quit
.0aec	ae 57 0b	               ldx  editmode  ; Sommes nous en mode edition?
.0aef	d0 14		               bne  mainloop  ; Non, on branche vers le menu principale
.0af1	c9 91		               cmp  #cursu    ;
.0af3	f0 43		               beq  toeditor
.0af5	c9 11		               cmp  #cursd
.0af7	f0 3f		               beq  toeditor
.0af9	c9 9d		               cmp  #cursl
.0afb	f0 3b		               beq  toeditor
.0afd	c9 1d		               cmp  #cursr
.0aff	f0 37		               beq  toeditor
.0b01	c9 20		               cmp  #$20
.0b03	f0 33		               beq  toeditor
.0b05	4c 69 0a	mainloop       jmp  loop
.0b08	20 59 0b	f1             jsr  f1action
.0b0b	4c 69 0a	               jmp  loop
.0b0e	20 f6 0b	f2             jsr  f2action
.0b11	4c 69 0a	               jmp  loop
.0b14	20 8e 0c	f3             jsr  f3action
.0b17	4c 69 0a	               jmp  loop
.0b1a	20 26 0d	f4             jsr  f4action
.0b1d	4c 69 0a	               jmp  loop
.0b20	20 be 0d	f5             jsr  f5action
.0b23	4c 69 0a	               jmp  loop
.0b26	20 56 0e	f6             jsr  f6action
.0b29	4c 69 0a	               jmp  loop
.0b2c	20 ee 0e	f7             jsr  f7action
.0b2f	4c 69 0a	               jmp  loop
.0b32	20 86 0f	f8             jsr  f8action
.0b35	4c 69 0a	               jmp  loop
.0b38	20 5e 08	toeditor       jsr  editor
.0b3b	4c 69 0a	quit           jmp  loop
.0b3e	20 90 15	               jsr  pop
.0b41	60		               rts
>0b42	20 52 4f 4d	txt1           .null     " rom pos."
>0b46	20 50 4f 53 2e 00
>0b4c	20 4b 45 59	txt2           .null     " key value"
>0b50	20 56 41 4c 55 45 00
>0b57	00		editmode       .byte     0
>0b58	00		fkeyset        .byte     0
.0b59			f1action
.0b59	48		               pha
.0b5a	a9 ff		               lda  #$ff
.0b5c	8d 57 0b	               sta  editmode
.0b5f	ad 58 0b	               lda  fkeyset
.0b62	d0 47		               bne  menub
.0b64	20 51 15	               jsr  push
.0b67	a2 26		               ldx  #<blankmsg
.0b69	a0 10		               ldy  #>blankmsg
.0b6b	20 e9 14	               jsr  putscxy
.0b6e	a2 51		               ldx  #<f1a_msg
.0b70	a0 10		               ldy  #>f1a_msg
.0b72	20 e9 14	               jsr  putscxy
.0b75	20 90 15	               jsr  pop
.0b78	08		               php
.0b79	48		               pha
.0b7a	8a		               txa
.0b7b	48		               pha
.0b7c	ad 62 12	               lda  f1abutton
.0b7f	48		               pha
.0b80	a9 92		               lda  #146
.0b82	8d 71 12	               sta  f1abutton+15
.0b85	a9 0d		               lda  #flashcol
.0b87	8d 62 12	               sta  f1abutton
.0b8a	a2 62		               ldx  #<f1abutton
.0b8c	a0 12		               ldy  #>f1abutton
.0b8e	20 e9 14	               jsr  putscxy
.0b91	20 49 0a	               jsr  delay
.0b94	a9 12		               lda  #18
.0b96	8d 71 12	               sta  f1abutton+15
.0b99	68		               pla
.0b9a	8d 62 12	               sta  f1abutton
.0b9d	a2 62		               ldx  #<f1abutton
.0b9f	a0 12		               ldy  #>f1abutton
.0ba1	20 e9 14	               jsr  putscxy
.0ba4	68		               pla
.0ba5	aa		               tax
.0ba6	68		               pla
.0ba7	28		               plp
.0ba8	4c f4 0b	               jmp  out
.0bab			menub
.0bab	a9 00		               lda  #$0
.0bad	8d 57 0b	               sta  editmode
.0bb0	20 51 15	               jsr  push
.0bb3	a2 26		               ldx  #<blankmsg
.0bb5	a0 10		               ldy  #>blankmsg
.0bb7	20 e9 14	               jsr  putscxy
.0bba	a2 20		               ldx  #<f1b_msg
.0bbc	a0 11		               ldy  #>f1b_msg
.0bbe	20 e9 14	               jsr  putscxy
.0bc1	20 90 15	               jsr  pop
.0bc4	08		               php
.0bc5	48		               pha
.0bc6	8a		               txa
.0bc7	48		               pha
.0bc8	ad 32 13	               lda  f1bbutton
.0bcb	48		               pha
.0bcc	a9 92		               lda  #146
.0bce	8d 41 13	               sta  f1bbutton+15
.0bd1	a9 0d		               lda  #flashcol
.0bd3	8d 32 13	               sta  f1bbutton
.0bd6	a2 32		               ldx  #<f1bbutton
.0bd8	a0 13		               ldy  #>f1bbutton
.0bda	20 e9 14	               jsr  putscxy
.0bdd	20 49 0a	               jsr  delay
.0be0	a9 12		               lda  #18
.0be2	8d 41 13	               sta  f1bbutton+15
.0be5	68		               pla
.0be6	8d 32 13	               sta  f1bbutton
.0be9	a2 32		               ldx  #<f1bbutton
.0beb	a0 13		               ldy  #>f1bbutton
.0bed	20 e9 14	               jsr  putscxy
.0bf0	68		               pla
.0bf1	aa		               tax
.0bf2	68		               pla
.0bf3	28		               plp
.0bf4	68		out            pla
.0bf5	60		               rts
.0bf6			f2action
.0bf6	48		               pha
.0bf7	a9 00		               lda  #$0
.0bf9	8d 57 0b	               sta  editmode
.0bfc	ad 58 0b	               lda  fkeyset
.0bff	d0 47		               bne  menub
.0c01	20 51 15	               jsr  push
.0c04	a2 26		               ldx  #<blankmsg
.0c06	a0 10		               ldy  #>blankmsg
.0c08	20 e9 14	               jsr  putscxy
.0c0b	a2 6c		               ldx  #<f2a_msg
.0c0d	a0 10		               ldy  #>f2a_msg
.0c0f	20 e9 14	               jsr  putscxy
.0c12	20 90 15	               jsr  pop
.0c15	08		               php
.0c16	48		               pha
.0c17	8a		               txa
.0c18	48		               pha
.0c19	ad 7c 12	               lda  f2abutton
.0c1c	48		               pha
.0c1d	a9 92		               lda  #146
.0c1f	8d 8b 12	               sta  f2abutton+15
.0c22	a9 0d		               lda  #flashcol
.0c24	8d 7c 12	               sta  f2abutton
.0c27	a2 7c		               ldx  #<f2abutton
.0c29	a0 12		               ldy  #>f2abutton
.0c2b	20 e9 14	               jsr  putscxy
.0c2e	20 49 0a	               jsr  delay
.0c31	a9 12		               lda  #18
.0c33	8d 8b 12	               sta  f2abutton+15
.0c36	68		               pla
.0c37	8d 7c 12	               sta  f2abutton
.0c3a	a2 7c		               ldx  #<f2abutton
.0c3c	a0 12		               ldy  #>f2abutton
.0c3e	20 e9 14	               jsr  putscxy
.0c41	68		               pla
.0c42	aa		               tax
.0c43	68		               pla
.0c44	28		               plp
.0c45	4c 8c 0c	               jmp  out
.0c48			menub
.0c48	20 51 15	               jsr  push
.0c4b	a2 26		               ldx  #<blankmsg
.0c4d	a0 10		               ldy  #>blankmsg
.0c4f	20 e9 14	               jsr  putscxy
.0c52	a2 37		               ldx  #<f2b_msg
.0c54	a0 11		               ldy  #>f2b_msg
.0c56	20 e9 14	               jsr  putscxy
.0c59	20 90 15	               jsr  pop
.0c5c	08		               php
.0c5d	48		               pha
.0c5e	8a		               txa
.0c5f	48		               pha
.0c60	ad 4c 13	               lda  f2bbutton
.0c63	48		               pha
.0c64	a9 92		               lda  #146
.0c66	8d 5b 13	               sta  f2bbutton+15
.0c69	a9 0d		               lda  #flashcol
.0c6b	8d 4c 13	               sta  f2bbutton
.0c6e	a2 4c		               ldx  #<f2bbutton
.0c70	a0 13		               ldy  #>f2bbutton
.0c72	20 e9 14	               jsr  putscxy
.0c75	20 49 0a	               jsr  delay
.0c78	a9 12		               lda  #18
.0c7a	8d 5b 13	               sta  f2bbutton+15
.0c7d	68		               pla
.0c7e	8d 4c 13	               sta  f2bbutton
.0c81	a2 4c		               ldx  #<f2bbutton
.0c83	a0 13		               ldy  #>f2bbutton
.0c85	20 e9 14	               jsr  putscxy
.0c88	68		               pla
.0c89	aa		               tax
.0c8a	68		               pla
.0c8b	28		               plp
.0c8c	68		out            pla
.0c8d	60		               rts
.0c8e			f3action
.0c8e	48		               pha
.0c8f	a9 00		               lda  #$0
.0c91	8d 57 0b	               sta  editmode
.0c94	ad 58 0b	               lda  fkeyset
.0c97	d0 47		               bne  menub
.0c99	20 51 15	               jsr  push
.0c9c	a2 26		               ldx  #<blankmsg
.0c9e	a0 10		               ldy  #>blankmsg
.0ca0	20 e9 14	               jsr  putscxy
.0ca3	a2 92		               ldx  #<f3a_msg
.0ca5	a0 10		               ldy  #>f3a_msg
.0ca7	20 e9 14	               jsr  putscxy
.0caa	20 90 15	               jsr  pop
.0cad	08		               php
.0cae	48		               pha
.0caf	8a		               txa
.0cb0	48		               pha
.0cb1	ad 96 12	               lda  f3abutton
.0cb4	48		               pha
.0cb5	a9 92		               lda  #146
.0cb7	8d a5 12	               sta  f3abutton+15
.0cba	a9 0d		               lda  #flashcol
.0cbc	8d 96 12	               sta  f3abutton
.0cbf	a2 96		               ldx  #<f3abutton
.0cc1	a0 12		               ldy  #>f3abutton
.0cc3	20 e9 14	               jsr  putscxy
.0cc6	20 49 0a	               jsr  delay
.0cc9	a9 12		               lda  #18
.0ccb	8d a5 12	               sta  f3abutton+15
.0cce	68		               pla
.0ccf	8d 96 12	               sta  f3abutton
.0cd2	a2 96		               ldx  #<f3abutton
.0cd4	a0 12		               ldy  #>f3abutton
.0cd6	20 e9 14	               jsr  putscxy
.0cd9	68		               pla
.0cda	aa		               tax
.0cdb	68		               pla
.0cdc	28		               plp
.0cdd	4c 24 0d	               jmp  out
.0ce0			menub
.0ce0	20 51 15	               jsr  push
.0ce3	a2 26		               ldx  #<blankmsg
.0ce5	a0 10		               ldy  #>blankmsg
.0ce7	20 e9 14	               jsr  putscxy
.0cea	a2 50		               ldx  #<f3b_msg
.0cec	a0 11		               ldy  #>f3b_msg
.0cee	20 e9 14	               jsr  putscxy
.0cf1	20 90 15	               jsr  pop
.0cf4	08		               php
.0cf5	48		               pha
.0cf6	8a		               txa
.0cf7	48		               pha
.0cf8	ad 66 13	               lda  f3bbutton
.0cfb	48		               pha
.0cfc	a9 92		               lda  #146
.0cfe	8d 75 13	               sta  f3bbutton+15
.0d01	a9 0d		               lda  #flashcol
.0d03	8d 66 13	               sta  f3bbutton
.0d06	a2 66		               ldx  #<f3bbutton
.0d08	a0 13		               ldy  #>f3bbutton
.0d0a	20 e9 14	               jsr  putscxy
.0d0d	20 49 0a	               jsr  delay
.0d10	a9 12		               lda  #18
.0d12	8d 75 13	               sta  f3bbutton+15
.0d15	68		               pla
.0d16	8d 66 13	               sta  f3bbutton
.0d19	a2 66		               ldx  #<f3bbutton
.0d1b	a0 13		               ldy  #>f3bbutton
.0d1d	20 e9 14	               jsr  putscxy
.0d20	68		               pla
.0d21	aa		               tax
.0d22	68		               pla
.0d23	28		               plp
.0d24	68		out            pla
.0d25	60		               rts
.0d26			f4action
.0d26	48		               pha
.0d27	a9 00		               lda  #$0
.0d29	8d 57 0b	               sta  editmode
.0d2c	ad 58 0b	               lda  fkeyset
.0d2f	d0 47		               bne  menub
.0d31	20 51 15	               jsr  push
.0d34	a2 26		               ldx  #<blankmsg
.0d36	a0 10		               ldy  #>blankmsg
.0d38	20 e9 14	               jsr  putscxy
.0d3b	a2 b9		               ldx  #<f4a_msg
.0d3d	a0 10		               ldy  #>f4a_msg
.0d3f	20 e9 14	               jsr  putscxy
.0d42	20 90 15	               jsr  pop
.0d45	08		               php
.0d46	48		               pha
.0d47	8a		               txa
.0d48	48		               pha
.0d49	ad b0 12	               lda  f4abutton
.0d4c	48		               pha
.0d4d	a9 92		               lda  #146
.0d4f	8d bf 12	               sta  f4abutton+15
.0d52	a9 0d		               lda  #flashcol
.0d54	8d b0 12	               sta  f4abutton
.0d57	a2 b0		               ldx  #<f4abutton
.0d59	a0 12		               ldy  #>f4abutton
.0d5b	20 e9 14	               jsr  putscxy
.0d5e	20 49 0a	               jsr  delay
.0d61	a9 12		               lda  #18
.0d63	8d bf 12	               sta  f4abutton+15
.0d66	68		               pla
.0d67	8d b0 12	               sta  f4abutton
.0d6a	a2 b0		               ldx  #<f4abutton
.0d6c	a0 12		               ldy  #>f4abutton
.0d6e	20 e9 14	               jsr  putscxy
.0d71	68		               pla
.0d72	aa		               tax
.0d73	68		               pla
.0d74	28		               plp
.0d75	4c bc 0d	               jmp  out
.0d78			menub
.0d78	20 51 15	               jsr  push
.0d7b	a2 26		               ldx  #<blankmsg
.0d7d	a0 10		               ldy  #>blankmsg
.0d7f	20 e9 14	               jsr  putscxy
.0d82	a2 68		               ldx  #<f4b_msg
.0d84	a0 11		               ldy  #>f4b_msg
.0d86	20 e9 14	               jsr  putscxy
.0d89	20 90 15	               jsr  pop
.0d8c	08		               php
.0d8d	48		               pha
.0d8e	8a		               txa
.0d8f	48		               pha
.0d90	ad 80 13	               lda  f4bbutton
.0d93	48		               pha
.0d94	a9 92		               lda  #146
.0d96	8d 8f 13	               sta  f4bbutton+15
.0d99	a9 0d		               lda  #flashcol
.0d9b	8d 80 13	               sta  f4bbutton
.0d9e	a2 80		               ldx  #<f4bbutton
.0da0	a0 13		               ldy  #>f4bbutton
.0da2	20 e9 14	               jsr  putscxy
.0da5	20 49 0a	               jsr  delay
.0da8	a9 12		               lda  #18
.0daa	8d 8f 13	               sta  f4bbutton+15
.0dad	68		               pla
.0dae	8d 80 13	               sta  f4bbutton
.0db1	a2 80		               ldx  #<f4bbutton
.0db3	a0 13		               ldy  #>f4bbutton
.0db5	20 e9 14	               jsr  putscxy
.0db8	68		               pla
.0db9	aa		               tax
.0dba	68		               pla
.0dbb	28		               plp
.0dbc	68		out            pla
.0dbd	60		               rts
.0dbe			f5action
.0dbe	48		               pha
.0dbf	a9 00		               lda  #$0
.0dc1	8d 57 0b	               sta  editmode
.0dc4	ad 58 0b	               lda  fkeyset
.0dc7	d0 47		               bne  menub
.0dc9	20 51 15	               jsr  push
.0dcc	a2 26		               ldx  #<blankmsg
.0dce	a0 10		               ldy  #>blankmsg
.0dd0	20 e9 14	               jsr  putscxy
.0dd3	a2 d6		               ldx  #<f5a_msg
.0dd5	a0 10		               ldy  #>f5a_msg
.0dd7	20 e9 14	               jsr  putscxy
.0dda	20 90 15	               jsr  pop
.0ddd	08		               php
.0dde	48		               pha
.0ddf	8a		               txa
.0de0	48		               pha
.0de1	ad ca 12	               lda  f5abutton
.0de4	48		               pha
.0de5	a9 92		               lda  #146
.0de7	8d d9 12	               sta  f5abutton+15
.0dea	a9 0d		               lda  #flashcol
.0dec	8d ca 12	               sta  f5abutton
.0def	a2 ca		               ldx  #<f5abutton
.0df1	a0 12		               ldy  #>f5abutton
.0df3	20 e9 14	               jsr  putscxy
.0df6	20 49 0a	               jsr  delay
.0df9	a9 12		               lda  #18
.0dfb	8d d9 12	               sta  f5abutton+15
.0dfe	68		               pla
.0dff	8d ca 12	               sta  f5abutton
.0e02	a2 ca		               ldx  #<f5abutton
.0e04	a0 12		               ldy  #>f5abutton
.0e06	20 e9 14	               jsr  putscxy
.0e09	68		               pla
.0e0a	aa		               tax
.0e0b	68		               pla
.0e0c	28		               plp
.0e0d	4c 54 0e	               jmp  out
.0e10			menub
.0e10	20 51 15	               jsr  push
.0e13	a2 26		               ldx  #<blankmsg
.0e15	a0 10		               ldy  #>blankmsg
.0e17	20 e9 14	               jsr  putscxy
.0e1a	a2 7d		               ldx  #<f5b_msg
.0e1c	a0 11		               ldy  #>f5b_msg
.0e1e	20 e9 14	               jsr  putscxy
.0e21	20 90 15	               jsr  pop
.0e24	08		               php
.0e25	48		               pha
.0e26	8a		               txa
.0e27	48		               pha
.0e28	ad 9a 13	               lda  f5bbutton
.0e2b	48		               pha
.0e2c	a9 92		               lda  #146
.0e2e	8d a9 13	               sta  f5bbutton+15
.0e31	a9 0d		               lda  #flashcol
.0e33	8d 9a 13	               sta  f5bbutton
.0e36	a2 9a		               ldx  #<f5bbutton
.0e38	a0 13		               ldy  #>f5bbutton
.0e3a	20 e9 14	               jsr  putscxy
.0e3d	20 49 0a	               jsr  delay
.0e40	a9 12		               lda  #18
.0e42	8d a9 13	               sta  f5bbutton+15
.0e45	68		               pla
.0e46	8d 9a 13	               sta  f5bbutton
.0e49	a2 9a		               ldx  #<f5bbutton
.0e4b	a0 13		               ldy  #>f5bbutton
.0e4d	20 e9 14	               jsr  putscxy
.0e50	68		               pla
.0e51	aa		               tax
.0e52	68		               pla
.0e53	28		               plp
.0e54	68		out            pla
.0e55	60		               rts
.0e56			f6action
.0e56	48		               pha
.0e57	a9 00		               lda  #$0
.0e59	8d 57 0b	               sta  editmode
.0e5c	ad 58 0b	               lda  fkeyset
.0e5f	d0 47		               bne  menub
.0e61	20 51 15	               jsr  push
.0e64	a2 26		               ldx  #<blankmsg
.0e66	a0 10		               ldy  #>blankmsg
.0e68	20 e9 14	               jsr  putscxy
.0e6b	a2 f0		               ldx  #<f6a_msg
.0e6d	a0 10		               ldy  #>f6a_msg
.0e6f	20 e9 14	               jsr  putscxy
.0e72	20 90 15	               jsr  pop
.0e75	08		               php
.0e76	48		               pha
.0e77	8a		               txa
.0e78	48		               pha
.0e79	ad e4 12	               lda  f6abutton
.0e7c	48		               pha
.0e7d	a9 92		               lda  #146
.0e7f	8d f3 12	               sta  f6abutton+15
.0e82	a9 0d		               lda  #flashcol
.0e84	8d e4 12	               sta  f6abutton
.0e87	a2 e4		               ldx  #<f6abutton
.0e89	a0 12		               ldy  #>f6abutton
.0e8b	20 e9 14	               jsr  putscxy
.0e8e	20 49 0a	               jsr  delay
.0e91	a9 12		               lda  #18
.0e93	8d f3 12	               sta  f6abutton+15
.0e96	68		               pla
.0e97	8d e4 12	               sta  f6abutton
.0e9a	a2 e4		               ldx  #<f6abutton
.0e9c	a0 12		               ldy  #>f6abutton
.0e9e	20 e9 14	               jsr  putscxy
.0ea1	68		               pla
.0ea2	aa		               tax
.0ea3	68		               pla
.0ea4	28		               plp
.0ea5	4c ec 0e	               jmp  out
.0ea8			menub
.0ea8	20 51 15	               jsr  push
.0eab	a2 26		               ldx  #<blankmsg
.0ead	a0 10		               ldy  #>blankmsg
.0eaf	20 e9 14	               jsr  putscxy
.0eb2	a2 91		               ldx  #<f6b_msg
.0eb4	a0 11		               ldy  #>f6b_msg
.0eb6	20 e9 14	               jsr  putscxy
.0eb9	20 90 15	               jsr  pop
.0ebc	08		               php
.0ebd	48		               pha
.0ebe	8a		               txa
.0ebf	48		               pha
.0ec0	ad b4 13	               lda  f6bbutton
.0ec3	48		               pha
.0ec4	a9 92		               lda  #146
.0ec6	8d c3 13	               sta  f6bbutton+15
.0ec9	a9 0d		               lda  #flashcol
.0ecb	8d b4 13	               sta  f6bbutton
.0ece	a2 b4		               ldx  #<f6bbutton
.0ed0	a0 13		               ldy  #>f6bbutton
.0ed2	20 e9 14	               jsr  putscxy
.0ed5	20 49 0a	               jsr  delay
.0ed8	a9 12		               lda  #18
.0eda	8d c3 13	               sta  f6bbutton+15
.0edd	68		               pla
.0ede	8d b4 13	               sta  f6bbutton
.0ee1	a2 b4		               ldx  #<f6bbutton
.0ee3	a0 13		               ldy  #>f6bbutton
.0ee5	20 e9 14	               jsr  putscxy
.0ee8	68		               pla
.0ee9	aa		               tax
.0eea	68		               pla
.0eeb	28		               plp
.0eec	68		out            pla
.0eed	60		               rts
.0eee			f7action
.0eee	48		               pha
.0eef	a9 00		               lda  #$0
.0ef1	8d 57 0b	               sta  editmode
.0ef4	ad 58 0b	               lda  fkeyset
.0ef7	d0 47		               bne  menub
.0ef9	20 51 15	               jsr  push
.0efc	a2 26		               ldx  #<blankmsg
.0efe	a0 10		               ldy  #>blankmsg
.0f00	20 e9 14	               jsr  putscxy
.0f03	a2 0a		               ldx  #<f7a_msg
.0f05	a0 11		               ldy  #>f7a_msg
.0f07	20 e9 14	               jsr  putscxy
.0f0a	20 90 15	               jsr  pop
.0f0d	08		               php
.0f0e	48		               pha
.0f0f	8a		               txa
.0f10	48		               pha
.0f11	ad fe 12	               lda  f7abutton
.0f14	48		               pha
.0f15	a9 92		               lda  #146
.0f17	8d 0d 13	               sta  f7abutton+15
.0f1a	a9 0d		               lda  #flashcol
.0f1c	8d fe 12	               sta  f7abutton
.0f1f	a2 fe		               ldx  #<f7abutton
.0f21	a0 12		               ldy  #>f7abutton
.0f23	20 e9 14	               jsr  putscxy
.0f26	20 49 0a	               jsr  delay
.0f29	a9 12		               lda  #18
.0f2b	8d 0d 13	               sta  f7abutton+15
.0f2e	68		               pla
.0f2f	8d fe 12	               sta  f7abutton
.0f32	a2 fe		               ldx  #<f7abutton
.0f34	a0 12		               ldy  #>f7abutton
.0f36	20 e9 14	               jsr  putscxy
.0f39	68		               pla
.0f3a	aa		               tax
.0f3b	68		               pla
.0f3c	28		               plp
.0f3d	4c 84 0f	               jmp  out
.0f40			menub
.0f40	20 51 15	               jsr  push
.0f43	a2 26		               ldx  #<blankmsg
.0f45	a0 10		               ldy  #>blankmsg
.0f47	20 e9 14	               jsr  putscxy
.0f4a	a2 a3		               ldx  #<f7b_msg
.0f4c	a0 11		               ldy  #>f7b_msg
.0f4e	20 e9 14	               jsr  putscxy
.0f51	20 90 15	               jsr  pop
.0f54	08		               php
.0f55	48		               pha
.0f56	8a		               txa
.0f57	48		               pha
.0f58	ad ce 13	               lda  f7bbutton
.0f5b	48		               pha
.0f5c	a9 92		               lda  #146
.0f5e	8d dd 13	               sta  f7bbutton+15
.0f61	a9 0d		               lda  #flashcol
.0f63	8d ce 13	               sta  f7bbutton
.0f66	a2 ce		               ldx  #<f7bbutton
.0f68	a0 13		               ldy  #>f7bbutton
.0f6a	20 e9 14	               jsr  putscxy
.0f6d	20 49 0a	               jsr  delay
.0f70	a9 12		               lda  #18
.0f72	8d dd 13	               sta  f7bbutton+15
.0f75	68		               pla
.0f76	8d ce 13	               sta  f7bbutton
.0f79	a2 ce		               ldx  #<f7bbutton
.0f7b	a0 13		               ldy  #>f7bbutton
.0f7d	20 e9 14	               jsr  putscxy
.0f80	68		               pla
.0f81	aa		               tax
.0f82	68		               pla
.0f83	28		               plp
.0f84	68		out            pla
.0f85	60		               rts
.0f86			f8action
.0f86	48		               pha
.0f87	a9 00		               lda  #$0
.0f89	8d 57 0b	               sta  editmode
.0f8c	ad 58 0b	               lda  fkeyset
.0f8f	d0 47		               bne  menub
.0f91	20 51 15	               jsr  push
.0f94	a2 26		               ldx  #<blankmsg
.0f96	a0 10		               ldy  #>blankmsg
.0f98	20 e9 14	               jsr  putscxy
.0f9b	a2 10		               ldx  #<menub_msg
.0f9d	a0 12		               ldy  #>menub_msg
.0f9f	20 e9 14	               jsr  putscxy
.0fa2	20 90 15	               jsr  pop
.0fa5	08		               php
.0fa6	48		               pha
.0fa7	8a		               txa
.0fa8	48		               pha
.0fa9	ad 18 13	               lda  f8abutton
.0fac	48		               pha
.0fad	a9 92		               lda  #146
.0faf	8d 27 13	               sta  f8abutton+15
.0fb2	a9 0d		               lda  #flashcol
.0fb4	8d 18 13	               sta  f8abutton
.0fb7	a2 18		               ldx  #<f8abutton
.0fb9	a0 13		               ldy  #>f8abutton
.0fbb	20 e9 14	               jsr  putscxy
.0fbe	20 49 0a	               jsr  delay
.0fc1	a9 12		               lda  #18
.0fc3	8d 27 13	               sta  f8abutton+15
.0fc6	68		               pla
.0fc7	8d 18 13	               sta  f8abutton
.0fca	a2 18		               ldx  #<f8abutton
.0fcc	a0 13		               ldy  #>f8abutton
.0fce	20 e9 14	               jsr  putscxy
.0fd1	68		               pla
.0fd2	aa		               tax
.0fd3	68		               pla
.0fd4	28		               plp
.0fd5	4c 1c 10	               jmp  swapit
.0fd8			menub
.0fd8	20 51 15	               jsr  push
.0fdb	a2 26		               ldx  #<blankmsg
.0fdd	a0 10		               ldy  #>blankmsg
.0fdf	20 e9 14	               jsr  putscxy
.0fe2	a2 f5		               ldx  #<menua_msg
.0fe4	a0 11		               ldy  #>menua_msg
.0fe6	20 e9 14	               jsr  putscxy
.0fe9	20 90 15	               jsr  pop
.0fec	08		               php
.0fed	48		               pha
.0fee	8a		               txa
.0fef	48		               pha
.0ff0	ad e8 13	               lda  f8bbutton
.0ff3	48		               pha
.0ff4	a9 92		               lda  #146
.0ff6	8d f7 13	               sta  f8bbutton+15
.0ff9	a9 0d		               lda  #flashcol
.0ffb	8d e8 13	               sta  f8bbutton
.0ffe	a2 e8		               ldx  #<f8bbutton
.1000	a0 13		               ldy  #>f8bbutton
.1002	20 e9 14	               jsr  putscxy
.1005	20 49 0a	               jsr  delay
.1008	a9 12		               lda  #18
.100a	8d f7 13	               sta  f8bbutton+15
.100d	68		               pla
.100e	8d e8 13	               sta  f8bbutton
.1011	a2 e8		               ldx  #<f8bbutton
.1013	a0 13		               ldy  #>f8bbutton
.1015	20 e9 14	               jsr  putscxy
.1018	68		               pla
.1019	aa		               tax
.101a	68		               pla
.101b	28		               plp
.101c	49 ff		swapit         eor  #$ff
.101e	8d 58 0b	               sta  fkeyset
.1021	20 1d 09	               jsr  showfkeys
.1024	68		               pla
.1025	60		               rts

;******  Processing file: messages.asm

=$07			mesgcol = vjaune
>1026	07 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>102a	20 20 20 20	               .null     "                                      "
>102e	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>103e	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>104e	20 20 00
.1051			f1a_msg
>1051	07 00 05 12	edit_msg       .byte     mesgcol,0,5,18
>1055	20 45 44 49	               .null     " edit mode: chr$(   )",146
>1059	54 20 4d 4f 44 45 3a 20 43 48 52 24 28 20 20 20
>1069	29 92 00
.106c			f2a_msg
>106c	07 00 05 92	save_msg       .byte     mesgcol,0,5,146
>1070	20 53 41 56	               .null     " save on cassette or disk? (c/d):"
>1074	45 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>1084	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.1092			f3a_msg
>1092	07 00 05	load_msg       .byte     mesgcol,0,5
>1095	20 4c 4f 41	               .null     " load from cassette or disk? (c/d):"
>1099	44 20 46 52 4f 4d 20 43 41 53 53 45 54 54 45 20
>10a9	4f 52 20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.10b9			f4a_msg
>10b9	07 00 05	copy_msg       .byte     mesgcol,0,5
>10bc	20 45 4e 54	               .null     " enter character to copy:"
>10c0	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>10d0	43 4f 50 59 3a 00
.10d6			f5a_msg
>10d6	07 00 05	clear_msg      .byte     mesgcol,0,5
>10d9	20 43 4c 45	               .null     " clear char: chr$(   )"
>10dd	41 52 20 43 48 41 52 3a 20 43 48 52 24 28 20 20
>10ed	20 29 00
.10f0			f6a_msg
>10f0	07 00 05	fill_msg       .byte     mesgcol,0,5
>10f3	20 46 49 4c	               .null     " fill char:  chr$(   )"
>10f7	4c 20 43 48 41 52 3a 20 20 43 48 52 24 28 20 20
>1107	20 29 00
.110a			f7a_msg
>110a	07 00 05	work_msg       .byte     mesgcol,0,5
>110d	20 45 4e 41	               .null     " enable work space"
>1111	42 4c 45 20 57 4f 52 4b 20 53 50 41 43 45 00
.1120			f1b_msg
>1120	07 00 05	rvrs_msg       .byte     mesgcol,0,5
>1123	20 52 45 56	               .null     " reverse character:"
>1127	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
.1137			f2b_msg
>1137	07 00 05	invr_msg       .byte     mesgcol,0,5
>113a	20 49 4e 56	               .null     " inverting character:"
>113e	45 52 54 49 4e 47 20 43 48 41 52 41 43 54 45 52
>114e	3a 00
.1150			f3b_msg
>1150	07 00 05	flip_msg       .byte     mesgcol,0,5
>1153	20 46 4c 49	               .null     " flipping character:"
>1157	50 50 49 4e 47 20 43 48 41 52 41 43 54 45 52 3a
>1167	00
.1168			f4b_msg
>1168	07 00 05	scrollr_msg    .byte     mesgcol,0,5
>116b	20 53 43 52	               .null     " scrolling right:"
>116f	4f 4c 4c 49 4e 47 20 52 49 47 48 54 3a 00
.117d			f5b_msg
>117d	07 00 05	scrolll_msg    .byte     mesgcol,0,5
>1180	20 53 43 52	               .null     " scrolling left:"
>1184	4f 4c 4c 49 4e 47 20 4c 45 46 54 3a 00
.1191			f6b_msg
>1191	07 00 05	scrollu_msg    .byte     mesgcol,0,5
>1194	20 53 43 52	               .null     " scrolling up:"
>1198	4f 4c 4c 49 4e 47 20 55 50 3a 00
.11a3			f7b_msg
>11a3	07 00 05	scrolld_msg    .byte     mesgcol,0,5
>11a6	20 53 43 52	               .null     " scrolling down:"
>11aa	4f 4c 4c 49 4e 47 20 44 4f 57 4e 3a 00
>11b7	07 00 05	save_fname_msg .byte     mesgcol,0,5
>11ba	20 53 41 56	               .null     " save: file name ------.chr"
>11be	45 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>11ce	2d 2d 2d 2e 43 48 52 00
>11d6	07 00 05	load_fname_msg .byte     mesgcol,0,5
>11d9	20 4c 4f 41	               .null     " load: file name ------.chr"
>11dd	44 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>11ed	2d 2d 2d 2e 43 48 52 00
>11f5	07 00 05	menua_msg      .byte     mesgcol,0,5
>11f8	20 59 4f 55	               .null     " you are now in menu a."
>11fc	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>120c	20 41 2e 00
>1210	07 00 05	menub_msg      .byte     mesgcol,0,5
>1213	20 59 4f 55	               .null     " you are now in menu b."
>1217	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>1227	20 42 2e 00
>122b	0e 15 18 12	quit_msg       .byte     vblue1,21,24,18
>122f	43 54 52 4c	               .text     "ctrl-x",146
>1233	2d 58 92
>1236	20 54 4f 20	               .null     " to quit."
>123a	51 55 49 54 2e 00
>1240	0a 06 0c 12	bye_msg        .byte     vrose,6,12,18
>1244	20 d4 48 41	               .null     " Thanks and have a good day ",146
>1248	4e 4b 53 20 41 4e 44 20 48 41 56 45 20 41 20 47
>1258	4f 4f 44 20 44 41 59 20 92 00
=18			fkeyleft=18
=8			f1top=8
=1			menu1col = 1
=3			menu2col = 3
>1262	01 12 08	f1abutton      .byte     menu1col,fkeyleft,f1top       ;133
>1265	45 44 49 54	               .text     "edit....... "
>1269	2e 2e 2e 2e 2e 2e 2e 20
>1271	12		               .byte     18             ; position 15
>1272	20 20 20 46	               .text     "   f1   "
>1276	31 20 20 20
>127a	92 00		               .byte     146,0
>127c	01 12 0a	f2abutton      .byte     menu1col,fkeyleft,f1top+2     ;137
>127f	53 41 56 45	               .text     "save....... "
>1283	2e 2e 2e 2e 2e 2e 2e 20
>128b	12		               .byte     18            ; position 15
>128c	20 20 20 46	               .text     "   f2   "
>1290	32 20 20 20
>1294	92 00		               .byte     146,0
>1296	01 12 0c	f3abutton      .byte     menu1col,fkeyleft,f1top+4     ;134
>1299	4c 4f 41 44	               .text     "load....... "
>129d	2e 2e 2e 2e 2e 2e 2e 20
>12a5	12		               .byte     18             ; position 15
>12a6	20 20 20 46	               .text     "   f3   "
>12aa	33 20 20 20
>12ae	92 00		               .byte     146,0
>12b0	01 12 0e	f4abutton      .byte     menu1col,fkeyleft,f1top+6     ;138
>12b3	43 4f 50 59	               .text     "copy....... "
>12b7	2e 2e 2e 2e 2e 2e 2e 20
>12bf	12		               .byte     18             ; position 15
>12c0	20 20 20 46	               .text     "   f4   "
>12c4	34 20 20 20
>12c8	92 00		               .byte     146,0
>12ca	01 12 10	f5abutton      .byte     menu1col,fkeyleft,f1top+8     ;135
>12cd	43 4c 45 41	               .text     "clear...... "
>12d1	52 2e 2e 2e 2e 2e 2e 20
>12d9	12		               .byte     18             ; position 15
>12da	20 20 20 46	               .text     "   f5   "
>12de	35 20 20 20
>12e2	92 00		               .byte     146,0
>12e4	01 12 12	f6abutton      .byte     menu1col,fkeyleft,f1top+10    ;139
>12e7	46 49 4c 4c	               .text     "fill....... "
>12eb	2e 2e 2e 2e 2e 2e 2e 20
>12f3	12		               .byte     18             ; position 15
>12f4	20 20 20 46	               .text     "   f6   "
>12f8	36 20 20 20
>12fc	92 00		               .byte     146,0
>12fe	01 12 14	f7abutton      .byte     menu1col,fkeyleft,f1top+12    ;136
>1301	57 4f 52 4b	               .text     "work....... "
>1305	2e 2e 2e 2e 2e 2e 2e 20
>130d	12		               .byte     18             ; position 15
>130e	20 20 20 46	               .text     "   f7   "
>1312	37 20 20 20
>1316	92 00		               .byte     146,0
>1318	01 12 16	f8abutton      .byte     menu1col,fkeyleft,f1top+14    ;140
>131b	46 55 4e 43	               .text     "function... "
>131f	54 49 4f 4e 2e 2e 2e 20
>1327	12		               .byte     18             ; position 15
>1328	20 20 20 46	               .text     "   f8   "
>132c	38 20 20 20
>1330	92 00		               .byte     146,0
>1332	03 12 08	f1bbutton      .byte     menu2col,fkeyleft,f1top
>1335	52 45 56 45	               .text     "reverse.... "
>1339	52 53 45 2e 2e 2e 2e 20
>1341	12		               .byte     18             ; position 15
>1342	20 20 20 46	               .text     "   f1   "
>1346	31 20 20 20
>134a	92 00		               .byte     146,0
>134c	03 12 0a	f2bbutton      .byte     menu2col,fkeyleft,f1top+2
>134f	49 4e 56 45	               .text     "invert..... "
>1353	52 54 2e 2e 2e 2e 2e 20
>135b	12		               .byte     18             ; position 15
>135c	20 20 20 46	               .text     "   f2   "
>1360	32 20 20 20
>1364	92 00		               .byte     146,0
>1366	03 12 0c	f3bbutton      .byte     menu2col,fkeyleft,f1top+4
>1369	46 4c 49 50	               .text     "flip....... "
>136d	2e 2e 2e 2e 2e 2e 2e 20
>1375	12		               .byte     18             ; position 15
>1376	20 20 20 46	               .text     "   f3   "
>137a	33 20 20 20
>137e	92 00		               .byte     146,0
>1380	03 12 0e	f4bbutton      .byte     menu2col,fkeyleft,f1top+6
>1383	53 43 52 4f	               .text     "scroll r... "
>1387	4c 4c 20 52 2e 2e 2e 20
>138f	12		               .byte     18             ; position 15
>1390	20 20 20 46	               .text     "   f4   "
>1394	34 20 20 20
>1398	92 00		               .byte     146,0
>139a	03 12 10	f5bbutton      .byte     menu2col,fkeyleft,f1top+8
>139d	53 43 52 4f	               .text     "scroll l... "
>13a1	4c 4c 20 4c 2e 2e 2e 20
>13a9	12		               .byte     18             ; position 15
>13aa	20 20 20 46	               .text     "   f5   "
>13ae	35 20 20 20
>13b2	92 00		               .byte     146,0
>13b4	03 12 12	f6bbutton      .byte     menu2col,fkeyleft,f1top+10
>13b7	53 43 52 4f	               .text     "scroll u... "
>13bb	4c 4c 20 55 2e 2e 2e 20
>13c3	12		               .byte     18             ; position 15
>13c4	20 20 20 46	               .text     "   f6   "
>13c8	36 20 20 20
>13cc	92 00		               .byte     146,0
>13ce	03 12 14	f7bbutton      .byte     menu2col,fkeyleft,f1top+12
>13d1	53 43 52 4f	               .text     "scroll d... "
>13d5	4c 4c 20 44 2e 2e 2e 20
>13dd	12		               .byte     18             ; position 15
>13de	20 20 20 46	               .text     "   f7   "
>13e2	37 20 20 20
>13e6	92 00		               .byte     146,0
>13e8	03 12 16	f8bbutton      .byte     menu2col,fkeyleft,f1top+14
>13eb	46 55 4e 43	               .text     "function... "
>13ef	54 49 4f 4e 2e 2e 2e 20
>13f7	12		               .byte     18             ; position 15
>13f8	20 20 20 46	               .text     "   f8   "
>13fc	38 20 20 20
>1400	92 00		               .byte     146,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.1402			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.1402			screendis
.1402	08		               php
.1403	48		               pha
.1404	ad 11 d0	               lda  $d011
.1407	29 ef		               and  #%11101111
.1409	8d 11 d0	               sta  $d011
.140c	68		               pla
.140d	28		               plp
.140e	60		               rts
.140f			screenena
.140f	08		               php
.1410	48		               pha
.1411	ad 11 d0	               lda  $d011
.1414	09 10		               ora  #%00010000
.1416	8d 11 d0	               sta  $d011
.1419	68		               pla
.141a	28		               plp
.141b	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.141c			scrmaninit
.141c	20 51 15	               jsr  push
.141f	a9 06		               lda  #vbleu
.1421	8d 21 d0	               sta  vicbackcol
.1424	a9 05		               lda  #vvert
.1426	8d 20 d0	               sta  vicbordcol
.1429	a9 01		               lda  #vblanc
.142b	8d 86 02	               sta  bascol
.142e	ad 00 04	               lda  scrnram
.1431	29 fd		               and  #%11111101
.1433	8d 00 04	               sta  scrnram
.1436	20 3e 14	               jsr  cls
.1439	20 90 15	               jsr  pop
.143c	60		               rts
>143d	8e		characterset   .byte b_uppercase
.143e			cls
.143e	08		               php
.143f	48		               pha
.1440	a9 93		               lda  #$93
.1442	20 5a 14	               jsr  putch
.1445	a9 0e		               lda  #$0e
.1447	20 5a 14	               jsr  putch
.144a	68		               pla
.144b	28		               plp
.144c	60		               rts
.144d			putnch
.144d	08		               php
.144e	e0 00		               cpx  #$00
.1450	f0 06		               beq  out
.1452	20 d2 ff	again          jsr  $ffd2
.1455	ca		               dex
.1456	d0 fa		               bne  again
.1458	28		out            plp
.1459	60		               rts
.145a			putch
.145a	08		               php
.145b	20 d2 ff	               jsr  $ffd2
.145e	28		               plp
.145f	60		               rts
.1460			puts
.1460	20 51 15	               jsr  push
.1463	86 fb		               stx  zpage1
.1465	84 fc		               sty  zpage1+1
.1467	a0 00		               ldy  #0
.1469	b1 fb		next           lda  (zpage1),y
.146b	f0 09		               beq  exit
.146d	20 5a 14	               jsr  putch
.1470	20 58 16	               jsr  inczp1
.1473	4c 69 14	               jmp  next
.1476	20 90 15	exit           jsr  pop
.1479	60		               rts
.147a			gotoxy
.147a	08		               php
.147b	18		               clc
.147c	8a		               txa
.147d	48		               pha
.147e	98		               tya
.147f	aa		               tax
.1480	68		               pla
.1481	a8		               tay
.1482	20 f0 ff	               jsr  kplot
.1485	28		               plp
.1486	60		               rts
.1487			cursor
=$0286			bascol    =    $0286
.1487	08		               php
.1488	48		               pha
.1489	90 12		               bcc  restore
.148b	20 f0 ff	               jsr  kplot
.148e	8c af 14	               sty  cx
.1491	8e b0 14	               stx  cy
.1494	ad 86 02	               lda  bascol
.1497	8d b1 14	               sta  bcol
.149a	4c ac 14	               jmp  out
.149d	ae b0 14	restore        ldx  cy
.14a0	ac af 14	               ldy  cx
.14a3	20 f0 ff	               jsr  kplot
.14a6	ad b1 14	               lda  bcol
.14a9	8d 86 02	               sta  bascol
.14ac	68		out            pla
.14ad	28		               plp
.14ae	60		               rts
>14af	00		cx   .byte     $00
>14b0	00		cy   .byte     $00
>14b1	00		bcol .byte     $00
.14b2			cursave
.14b2	08		               php
.14b3	38		               sec
.14b4	20 87 14	               jsr  cursor
.14b7	28		               plp
.14b8	60		               rts
.14b9			curput
.14b9	08		               php
.14ba	18		               clc
.14bb	20 87 14	               jsr  cursor
.14be	28		               plp
.14bf	60		               rts
.14c0			putsxy
.14c0	20 51 15	               jsr  push
.14c3	86 fb		               stx  zpage1
.14c5	84 fc		               sty  zpage1+1
.14c7	a0 00		               ldy  #$00
.14c9	b1 fb		               lda  (zpage1),y
.14cb	aa		               tax
.14cc	20 58 16	               jsr  inczp1
.14cf	b1 fb		               lda  (zpage1),y
.14d1	a8		               tay
.14d2	20 7a 14	               jsr  gotoxy
.14d5	20 58 16	               jsr  inczp1
.14d8	a6 fb		               ldx  zpage1
.14da	a4 fc		               ldy  zpage1+1
.14dc	20 60 14	               jsr  puts
.14df	20 90 15	               jsr  pop
.14e2	60		               rts
>14e3	00 00		straddr   .word     $00
>14e5	00		px        .byte     $00
>14e6	00		py        .byte     $00
>14e7	00 00		zp1       .word     $00
.14e9			putscxy
.14e9	20 51 15	               jsr  push
.14ec	84 fc		               sty  zpage1+1
.14ee	86 fb		               stx  zpage1
.14f0	ad 86 02	               lda  bascol
.14f3	8d 13 15	               sta  bc
.14f6	a0 00		               ldy #$00
.14f8	b1 fb		               lda  (zpage1),y
.14fa	8d 86 02	               sta  bascol
.14fd	20 58 16	               jsr  inczp1
.1500	a6 fb		               ldx  zpage1
.1502	a4 fc		               ldy  zpage1+1
.1504	20 c0 14	               jsr  putsxy
.1507	ad 13 15	               lda  bc
.150a	8d 86 02	               sta  bascol
.150d	20 90 15	               jsr  pop
.1510	60		               rts
>1511	00 00		straddr  .word      $00
>1513	00		bc       .byte      $00
>1514	00 00		zp1      .word      $00
.1516			putrahex
.1516	08		               php
.1517	48		               pha
.1518	20 61 17	               jsr  a2hex
.151b	a9 0d		               lda  #<a2hexstr
.151d	a0 17		               ldy  #>a2hexstr
.151f	20 60 14	               jsr  puts
.1522	68		               pla
.1523	28		               plp
.1524	60		               rts
.1525			kputrahexxy
.1525			bputrahexxy
.1525			putrahexxy
.1525	08		               php
.1526	20 61 17	               jsr  a2hex
.1529	a9 0a		               lda  #<a2hexpos
.152b	a0 17		               ldy  #>a2hexpos
.152d	20 c0 14	               jsr  putsxy
.1530	68		               pla
.1531	28		               plp
.1532	60		               rts
.1533			putrahexcxy
.1533	08		               php
.1534	20 61 17	               jsr  a2hex
.1537	a9 0a		               lda  #<a2hexpos
.1539	a0 17		               ldy  #>a2hexpos
.153b	20 e9 14	               jsr  putscxy
.153e	68		               pla
.153f	28		               plp
.1540	60		               rts
.1541			setinverse
.1541	48		               pha
.1542	a9 12		               lda  #$12
.1544	20 d2 ff	               jsr  $ffd2
.1547	68		               pla
.1548	60		               rts
.1549			clrinverse
.1549	48		               pha
.154a	a9 92		               lda  #$92
.154c	20 d2 ff	               jsr  $ffd2
.154f	68		               pla
.1550	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.1551			push
.1551	08		          php            ; stack : flg, pcl, pch
.1552	78		          sei
.1553	8d 8d 15	          sta  ra        ; save a
.1556	68		          pla            ; stack : pcl, pch
.1557	8d 8c 15	          sta  rp        ; save rp
.155a	68		          pla            ; stack : pch
.155b	8d 8e 15	          sta  pc        ; save pcl
.155e	68		          pla            ; stack : -
.155f	8d 8f 15	          sta  pc+1      ; save pch
.1562	a5 fb		          lda  zpage1    ; get zpage1 low byte
.1564	48		          pha            ; stack : zp1l
.1565	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.1567	48		          pha            ; stack : zp1h, zp1l
.1568	a5 fd		          lda  zpage2    ; get zpage2 low byte
.156a	48		          pha            ; stack : zp2l, zp1h, zp1l
.156b	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.156d	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.156e	ad 8c 15	          lda  rp        ; get rp
.1571	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1572	ad 8d 15	          lda  ra        ; get a
.1575	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1576	8a		          txa            ; get x
.1577	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1578	98		          tya            ; get y
.1579	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.157a	ad 8f 15	          lda  pc+1      ; get pch
.157d	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.157e	ad 8e 15	          lda  pc        ; get pcl
.1581	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1582	ad 8c 15	          lda  rp        ; get rp
.1585	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1586	ad 8d 15	          lda  ra        ; get a
.1589	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.158a	58		          cli
.158b	60		          rts
>158c	00		rp        .byte     0
>158d	00		ra        .byte     0
>158e	00 00		pc        .word     0
.1590			pull
.1590			pop
.1590	78		          sei
.1591	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1592	8d c5 15	          sta  pc        ; save pcl
.1595	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1596	8d c6 15	          sta  pc+1      ; save pch
.1599	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.159a	a8		          tay            ; set y
.159b	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.159c	aa		          tax            ; set x
.159d	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.159e	8d c4 15	          sta  ra        ; save a
.15a1	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.15a2	8d c3 15	          sta  rp        ; save rp
.15a5	68		          pla            ; stack : zp2l, zp1h, zp1l
.15a6	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.15a8	68		          pla            ; stack : zp1h, zp1l
.15a9	85 fd		          sta  zpage2    ; get zpage2 High byte
.15ab	68		          pla            ; stack : zp1l
.15ac	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.15ae	68		          pla            ; stack :
.15af	85 fb		          sta  zpage1    ; get zpage1 High byte
.15b1	ad c6 15	          lda  pc+1      ; get pch
.15b4	48		          pha            ; stack : pch
.15b5	ad c5 15	          lda  pc
.15b8	48		          pha            ; stack : pcl, pch
.15b9	ad c3 15	          lda  rp        ; get rp
.15bc	48		          pha            ; stack : rp, pcl, pch
.15bd	ad c4 15	          lda  ra        ; set ra
.15c0	58		          cli
.15c1	28		          plp            ; stack : pcl, pch
.15c2	60		          rts
>15c3	00		rp        .byte     0
>15c4	00		ra        .byte     0
>15c5	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.15c7			blkfill
.15c7	20 51 15	bf0            jsr  push
.15ca	20 88 16	               jsr  savezp1
.15cd	84 fc		               sty  zpage1+1
.15cf	a0 00		               ldy  #$00
.15d1	84 fb		               sty  zpage1
.15d3	91 fb		bf1            sta  (zpage1),y
.15d5	c8		               iny
.15d6	d0 fb		               bne  bf1
.15d8	20 97 16	               jsr  restzp1
.15db	20 90 15	               jsr  pop
.15de	60		               rts
.15df			memfill
.15df	20 51 15	               jsr  push
.15e2	20 c7 15	mf1            jsr  blkfill
.15e5	c8		               iny
.15e6	ca		               dex
.15e7	d0 f9		               bne  mf1
.15e9	20 90 15	               jsr  pop
.15ec	60		               rts
.15ed			memmove
.15ed	20 51 15	               jsr  push
.15f0	ba		               tsx            ; On se crÃ©e un pointeur ...
.15f1	8a		               txa
.15f2	18		               clc
.15f3	69 0b		               adc  #11
.15f5	a8		               tay
.15f6	a2 06		               ldx  #$06
.15f8	b9 00 01	nextbyte       lda  $0100,y
.15fb	99 47 16	               sta  words,y
.15fe	c8		               iny
.15ff	ca		               dex
.1600	d0 f6		               bne  nextbyte
.1602	ad 47 16	               lda  s
.1605	8d 1e 16	               sta  source+1
.1608	ad 48 16	               lda  s+1
.160b	8d 1f 16	               sta  source+2
.160e	ad 49 16	               lda  d
.1611	8d 1b 16	               sta  destin+1
.1614	ad 4a 16	               lda  d+1
.1617	8d 1c 16	               sta  destin+2
.161a	ad ff ff	destin         lda  $ffff
.161d	8d ff ff	source         sta  $ffff
.1620	ee 1b 16	               inc  destin+1
.1623	d0 03		               bne  src
.1625	ee 1c 16	               inc  destin+2
.1628	ee 1e 16	src            inc  source+1
.162b	d0 03		               bne  cnt
.162d	ee 1f 16	               inc  source+2
.1630	ad 4b 16	cnt            lda  compte
.1633	d0 08		               bne  decit
.1635	ad 4c 16	               lda  compte+1
.1638	f0 09		               beq  fini
.163a	ce 4c 16	               dec  compte+1
.163d	ce 4b 16	decit          dec  compte
.1640	4c 1a 16	               jmp  destin
.1643	20 90 15	fini           jsr  pop
.1646	60		               rts
.1647			words
>1647	00 00		s         .word     $0000
>1649	00 00		d         .word     $0000
>164b	00 00		compte    .word     $0000
.164d			decword
.164d	20 51 15	               jsr  push
.1650	86 fd		               stx  zpage2
.1652	84 fe		               sty  zpage2+1
.1654	20 90 15	               jsr  pop
.1657	60		               rts
.1658			inczp1
.1658	08		               php
.1659	48		               pha
.165a	e6 fb		               inc  zpage1
.165c	a5 fb		               lda  zpage1
.165e	d0 02		               bne  nopage
.1660	e6 fc		               inc  zpage1+1
.1662	68		nopage         pla
.1663	28		               plp
.1664	60		               rts
.1665			deczp1
.1665	08		                php
.1666	48		                pha
.1667	c6 fb		                dec  zpage1
.1669	d0 02		                bne  nopage
.166b	c6 fc		                dec  zpage1+1
.166d	68		nopage          pla
.166e	28		                plp
.166f	60		                rts
.1670			inczp2
.1670	08		               php
.1671	48		               pha
.1672	e6 fd		               inc  zpage2
.1674	a5 fd		               lda  zpage2
.1676	d0 02		               bne  nopage
.1678	e6 fe		               inc  zpage2+1
.167a	68		nopage         pla
.167b	28		               plp
.167c	60		               rts
.167d			deczp2
.167d	08		               php
.167e	48		               pha
.167f	a5 fd		               lda  zpage2
.1681	d0 02		               bne  nopage
.1683	c6 fe		               dec  zpage2+1
.1685	68		nopage         pla
.1686	28		               plp
.1687	60		               rts
.1688			savezp1
.1688	08		               php
.1689	48		               pha
.168a	a5 fb		               lda  zpage1
.168c	8d 04 17	               sta  zp1
.168f	a5 fc		               lda  zpage1+1
.1691	8d 05 17	               sta  zp1+1
.1694	68		               pla
.1695	28		               plp
.1696	60		               rts
.1697			restzp1
.1697	08		               php
.1698	48		               pha
.1699	ad 04 17	               lda zp1
.169c	85 fb		               sta zpage1
.169e	ad 05 17	               lda zp1+1
.16a1	85 fc		               sta zpage1+1
.16a3	68		               pla
.16a4	28		               plp
.16a5	60		               rts
.16a6			savezp2
.16a6	08		         php
.16a7	48		         pha
.16a8	a5 fd		         lda zpage2
.16aa	8d 06 17	         sta zp2
.16ad	a5 fe		         lda zpage2+1
.16af	8d 07 17	         sta zp2+1
.16b2	68		         pla
.16b3	28		         plp
.16b4	60		         rts
.16b5			restzp2
.16b5	08		                php
.16b6	48		                pha
.16b7	ad 06 17	                lda  zp2
.16ba	85 fd		                sta  zpage2
.16bc	ad 07 17	                lda  zp2+1
.16bf	85 fe		                sta  zpage2+1
.16c1	68		                pla
.16c2	28		                plp
.16c3	60		                rts
.16c4			xy2addr
.16c4	08		                php
.16c5	48		                pha
.16c6	8a		                txa
.16c7	48		                pha
.16c8	98		                tya
.16c9	48		                pha
.16ca	ad ff 16	                lda     addr1+1
.16cd	8d 01 17	                sta     addr2+1
.16d0	ad fe 16	                lda     addr1
.16d3	8d 00 17	                sta     addr2
.16d6	c0 00		                cpy     #$00
.16d8	f0 0f		                beq     addx
.16da	18		moreline        clc
.16db	6d fd 16	                adc     ymult
.16de	90 03		                bcc     norepy
.16e0	ee 01 17	                inc     addr2+1
.16e3	8d 00 17	norepy          sta     addr2
.16e6	88		                dey
.16e7	d0 f1		                bne     moreline
.16e9	8a		addx            txa
.16ea	18		                clc
.16eb	6d 00 17	                adc     addr2
.16ee	90 03		                bcc     thatsit
.16f0	ee 01 17	                inc     addr2+1
.16f3	8d 00 17	thatsit         sta     addr2
.16f6	68		                pla
.16f7	a8		                tay
.16f8	68		                pla
.16f9	aa		                tax
.16fa	68		                pla
.16fb	28		                plp
.16fc	60		                rts
>16fd	28		ymult          .byte     40
>16fe	00 00		addr1          .word     $0000
>1700	00 00		addr2          .word     $0000
>1702	00 00		bytecnt        .word     $0000
>1704	00 00		zp1        .word   $0000
>1706	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>1708	01		a2hexcol       .byte     1              ; pour aputscxy
>1709	00		a2hexbkcol     .byte     %00000000
.170a			a2hexpos
>170a	00		a2hexpx        .byte     0              ; pour aputsxy
>170b	00		a2hexpy        .byte     0
>170c	24		a2hexprefix    .byte     "$"            ; pour aputs
>170d	00 00		a2hexstr       .word     $00
>170f	00 00		               .word     $00
>1711	00		               .byte     0              ; 0 end string
.1712			putahexfmtxy
.1712	20 51 15	               jsr  push
.1715	20 61 17	               jsr  a2hex
.1718	ae 0a 17	               ldx  a2hexpx
.171b	ac 0b 17	               ldy  a2hexpy
.171e	20 7a 14	               jsr  gotoxy
.1721	a2 0c		               ldx  #<a2hexprefix
.1723	a0 17		               ldy  #>a2hexprefix
.1725	20 60 14	               jsr  puts
.1728	20 90 15	               jsr  pop
.172b	60		               rts
.172c			putahexfmt
.172c	20 51 15	               jsr  push
.172f	20 61 17	               jsr  a2hex
.1732	a2 0c		               ldx  #<a2hexprefix
.1734	a0 17		               ldy  #>a2hexprefix
.1736	20 60 14	               jsr  puts
.1739	20 90 15	               jsr  pop
.173c	60		               rts
.173d			putahex
.173d	20 51 15	               jsr  push
.1740	20 61 17	               jsr  a2hex
.1743	a2 0d		               ldx  #<a2hexstr
.1745	a0 17		               ldy  #>a2hexstr
.1747	20 60 14	               jsr  puts
.174a	20 90 15	               jsr  pop
.174d	60		               rts
.174e			nib2hex
.174e	08		               php
.174f	29 0f		               and  #$0f
.1751	f8		               sed
.1752	18		               clc
.1753	69 90		               adc  #$90
.1755	69 40		               adc  #$40
.1757	d8		               cld
.1758	28		               plp
.1759	60		               rts
.175a			lsra4bits
.175a	08		               php
.175b	4a		               lsr
.175c	4a		               lsr
.175d	4a		               lsr
.175e	4a		               lsr
.175f	28		               plp
.1760	60		               rts
.1761			a2hex
.1761	08		               php
.1762	48		               pha
.1763	48		               pha
.1764	20 5a 17	               jsr  lsra4bits
.1767	20 4e 17	               jsr  nib2hex
.176a	8d 0d 17	               sta  a2hexstr
.176d	68		               pla
.176e	20 4e 17	               jsr  nib2hex
.1771	8d 0e 17	               sta  a2hexstr+1
.1774	a9 00		               lda  #$00                ; set end of string
.1776	8d 0f 17	               sta  a2hexstr+2
.1779	68		               pla
.177a	28		               plp
.177b	60		               rts
.177c			xy2hex
.177c	20 51 15	               jsr  push
.177f	20 61 17	               jsr  a2hex
.1782	8a		               txa
.1783	48		               pha
.1784	20 5a 17	               jsr  lsra4bits
.1787	20 4e 17	               jsr  nib2hex
.178a	8d 0d 17	               sta  a2hexstr
.178d	68		               pla
.178e	20 4e 17	               jsr  nib2hex
.1791	8d 0e 17	               sta  a2hexstr+1
.1794	98		               tya
.1795	48		               pha
.1796	20 5a 17	               jsr  lsra4bits
.1799	20 4e 17	               jsr  nib2hex
.179c	8d 0f 17	               sta  a2hexstr+2
.179f	68		               pla
.17a0	20 4e 17	               jsr  nib2hex
.17a3	8d 10 17	               sta  a2hexstr+3
.17a6	a9 00		               lda  #$00                ; 0 ended string
.17a8	8d 11 17	               sta  a2hexstr+4
.17ab	20 90 15	               jsr  pop
.17ae			atobin
.17ae	20 51 15	               jsr     push
.17b1	a2 08		               ldx     #8
.17b3	a0 00		               ldy     #0
.17b5	2a		nextbit        rol
.17b6	48		               pha
.17b7	69 00		               adc     #$00
.17b9	29 01		               and     #$01
.17bb	20 4e 17	               jsr     nib2hex
.17be	99 cf 17	               sta     abin,y
.17c1	68		               pla
.17c2	c8		               iny
.17c3	ca		               dex
.17c4	d0 ef		               bne     nextbit
.17c6	a9 00		               lda     #0
.17c8	99 cf 17	               sta     abin,y
.17cb	20 90 15	               jsr     pull
.17ce	60		               rts
>17cf	30 30 30 30	abin           .null   "00000000"
>17d3	30 30 30 30 00
.17d8			putabin
.17d8	20 ae 17	               jsr     atobin
.17db	20 51 15	               jsr     push
.17de	a2 cf		               ldx     #<abin
.17e0	a0 17		               ldy     #>abin
.17e2	20 60 14	               jsr     puts
.17e5	20 90 15	               jsr     pop
.17e8	60		               rts
.17e9			putabinfmt
.17e9	08		               php
.17ea	48		               pha
.17eb	a9 25		               lda     #"%"
.17ed	20 5a 14	               jsr     putch
.17f0	68		               pla
.17f1	20 d8 17	               jsr     putabin
.17f4	28		               plp
.17f5	60		               rts
.17f6			putabinxy
.17f6	20 7a 14	               jsr     gotoxy
.17f9	20 d8 17	               jsr     putabin
.17fc	60		               rts
.17fd			putabinfmtxy
.17fd	20 7a 14	               jsr     gotoxy
.1800	20 e9 17	               jsr     putabinfmt
.1803	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>1804	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>1808	00 00 00 00 00 00 00 00 00 0d 00 00
>1814	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>1818	00 00 00 00 00 00 00 00 00 00 00 00
>1824	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>1828	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1834	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1838	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1844	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1848	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>1854	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1858	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>1864	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1868	00 00 00 00 00 00 00 00 00 00 00 00
>1874	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1878	00 00 00 00 00 00 00 00 00 00 00 00
>1884	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1888	00 00 00 00 00 00 00 00 00 00 00 00
>1894	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1898	00 00 00 00 00 00 00 00 00 00 00 00
>18a4	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>18a8	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>18b4	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>18b8	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>18c4	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>18c8	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>18d4	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>18d8	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>18e4	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>18e8	00 00 00 00 00 00 00 00 00 00 00 00
>18f4	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>18f8	00 00 00 00 00 00 00 00 00 00 00 00
.1904			waitstop
.1904	20 51 15	               jsr  push
.1907	20 ed f6	wait           jsr  k_stop
.190a	d0 fb		               bne  wait
.190c	20 90 15	               jsr  pop
.190f	60		               rts
.1910			anykey
.1910	08		               php
.1911	48		               pha
.1912	a5 cb		nokey          lda 203
.1914	c9 40		               cmp #64
.1916	f0 fa		               beq nokey
.1918	20 1e 19	               jsr releasekey
.191b	68		               pla
.191c	28		               plp
.191d	60		               rts
.191e			releasekey
.191e	08		               php
.191f	48		               pha
.1920	a5 cb		keypressed     lda 203
.1922	c9 40		               cmp #64
.1924	d0 fa		               bne keypressed
.1926	68		               pla
.1927	28		               plp
.1928	60		               rts
.1929			getkey
.1929	20 e4 ff	again          jsr  getin
.192c	c9 00		               cmp  #0
.192e	f0 f9		               beq  again
.1930	60		               rts
.1931			waitkey
.1931	20 51 15	               jsr  push
.1934	8d 82 19	               sta  thekey
.1937	20 e4 ff	nope           jsr  getin
.193a	20 d2 ff	               jsr  chrout
.193d	cd 82 19	               cmp  thekey
.1940	d0 f5		               bne  nope
.1942	20 d2 ff	               jsr  chrout
.1945	20 90 15	               jsr  pop
.1948	60		               rts
.1949			waitspace
.1949	20 51 15	               jsr  push
.194c	a9 7f		wait           lda  #$7f  ;%01111111
.194e	8d 00 dc	               sta  $dc00
.1951	ad 01 dc	               lda  $dc01
.1954	29 10		               and  #$10  ;mask %00010000
.1956	d0 f4		               bne  wait
.1958	20 90 15	               jsr  pop
.195b			waitsstop
.195b	20 51 15	               jsr  push
.195e	20 ed f6	wait           jsr  k_stop  ;%01111111
.1961	d0 fb		               bne  wait
.1963	20 90 15	               jsr  pop
.1966			waitreturn
.1966	20 51 15	               jsr  push
.1969	ad 83 19	               lda  thecount
.196c	8d 00 04	               sta  scrnram
.196f	a9 02		               lda  #$02
.1971	8d 00 d8	               sta  colorram
.1974	20 e4 ff	nope           jsr  getin
.1977	c9 0d		nohex          cmp  #$0d
.1979	d0 f9		               bne  nope
.197b	ee 83 19	               inc  thecount
.197e	20 90 15	               jsr  pop
.1981	60		               rts
>1982	00		thekey         .byte   0
>1983	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  End of listing

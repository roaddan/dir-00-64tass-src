
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Thu Nov 23 15:17:30 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm

="20231116-100400"	version  = "20231116-100400"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

=18			fkeyleft       =    18
=9			f1top          =    9
=$0400			scrnnewram     =    $0400
=10			charsdef       =    10
=9			grid_top       =    9
=1			grid_left      =    1
=16			grid_bot       =    grid_top + 7
=8			grid_right     =    grid_left + 7
=$0b			bordure        =    vgris
=$00			fond           =    vnoir
=$03			mesgcol        =    vcyan
=$03			menu1col1      =    vcyan
=$0e			menu1col2      =    vbleu1
=$0f			menu2col1      =    vgris2
=$0c			menu2col2      =    vgris1
=$01			flashcol       =    vblanc
=$07			whoamicol      =    vjaune
=$01			charcolor      =    vblanc
=$0f			charscolor     =    vgris2
.080d			main
.080d	20 19 21	               jsr  push
.0810	20 eb 1f	               jsr  scrmaninit
.0813			wait
.0813	20 bd 0f	               jsr  copycharset
.0816	20 0b 20	               jsr  cls
.0819	20 a7 0f	               jsr  setscreenptr
.081c	20 6d 08	               jsr  savetofile
.081f	4c 69 08	               jmp  endmain
.0822	20 75 0a	               jsr  setdefaultchar
.0825	20 18 10	               jsr  staticscreen
.0828	20 ea 0e	               jsr  drawbitmap
.082b	a9 00		               lda  #$00
.082d	8d 0a 09	               sta  fkeyset
.0830	20 54 10	               jsr  drawfkeys
.0833	a9 00		               lda  #$00
.0835	20 19 21	               jsr  push
.0838	a2 6b		               ldx  #<blankmsg
.083a	a0 19		               ldy  #>blankmsg
.083c	20 b1 20	               jsr  putscxy
.083f	a2 97		               ldx  #<prompt_msg
.0841	a0 19		               ldy  #>prompt_msg
.0843	20 b1 20	               jsr  putscxy
.0846	20 58 21	               jsr  pop
.0849	20 de 1f	               jsr  screenena
.084c	20 86 0c	               jsr  keyaction
.084f	20 0b 20	               jsr  cls
.0852	20 16 0a	               jsr  drawcredits
.0855	a2 a7		               ldx #<bye_msg
.0857	a0 1d		               ldy #>bye_msg
.0859	20 b1 20	               jsr putscxy
.085c	a2 c9		               ldx #<any_msg
.085e	a0 1d		               ldy #>any_msg
.0860	20 b1 20	               jsr putscxy
.0863	20 39 25	               jsr  getkey
.0866	20 0b 20	               jsr  cls
.0869	20 58 21	endmain        jsr  pop
.086c	60		               rts
.086d			savetofile
.086d	20 19 21	               jsr  push
.0870	a9 1b		               lda  #<fname
.0872	8d c7 26	               sta  dsk_fnptr
.0875	a9 09		               lda  #>fname
.0877	8d c8 26	               sta  dsk_fnptr+1
.087a	a9 0d		               lda  #(device-fname-1)
.087c	8d c9 26	               sta  dsk_fnlen
.087f	ad 29 09	               lda  device
.0882	8d c6 26	               sta  dsk_lfsno
.0885	a9 00		               lda  #<bitmapmem
.0887	8d c1 26	               sta  dsk_data_s
.088a	a9 28		               lda  #>bitmapmem
.088c	8d c2 26	               sta  dsk_data_s+1
.088f	a9 00		               lda  #<endofaddr
.0891	8d c3 26	               sta  dsk_data_e
.0894	a9 48		               lda  #>endofaddr
.0896	8d c4 26	               sta  dsk_data_e+1
.0899	a2 6b		               ldx #<blankmsg
.089b	a0 19		               ldy #>blankmsg
.089d	20 b1 20	               jsr putscxy
.08a0	20 19 21	               jsr  push
.08a3	a2 01		               ldx  #1
.08a5	a0 04		               ldy  #4
.08a7	20 42 20	               jsr  gotoxy
.08aa	20 58 21	               jsr  pop
.08ad	20 2e 26	               jsr  memtofile
.08b0	20 58 21	               jsr  pop
.08b3	60		               rts
.08b4			loadfromfile
.08b4	20 19 21	               jsr  push
.08b7	a9 1b		               lda  #<fname
.08b9	8d c7 26	               sta  dsk_fnptr
.08bc	a9 09		               lda  #>fname
.08be	8d c8 26	               sta  dsk_fnptr+1
.08c1	a9 0d		               lda  #(device-fname-1)
.08c3	8d c9 26	               sta  dsk_fnlen
.08c6	ad 29 09	               lda  device
.08c9	8d c6 26	               sta  dsk_lfsno
.08cc	a9 00		               lda  #<bitmapmem
.08ce	8d c1 26	               sta  dsk_data_s
.08d1	a9 28		               lda  #>bitmapmem
.08d3	8d c2 26	               sta  dsk_data_s+1
.08d6	a9 00		               lda  #<endofaddr
.08d8	8d c3 26	               sta  dsk_data_e
.08db	a9 48		               lda  #>endofaddr
.08dd	8d c4 26	               sta  dsk_data_e+1
.08e0	a2 6b		               ldx #<blankmsg
.08e2	a0 19		               ldy #>blankmsg
.08e4	20 b1 20	               jsr putscxy
.08e7	20 19 21	               jsr  push
.08ea	a2 01		               ldx  #1
.08ec	a0 04		               ldy  #4
.08ee	20 42 20	               jsr  gotoxy
.08f1	20 58 21	               jsr  pop
.08f4	20 66 26	               jsr  filetomem
.08f7	20 58 21	               jsr  pop
.08fa	60		               rts
=10240			bitmapmem      =         charsdef * 1024     ;Calcul position ram des caracteres.
=18432			endofaddr      =         (charsdef * 1024) + (4*$800)
=61440			mstopaddr      =         $d000+(4*$800)
>08fb	00 d0		startaddr      .word     $d000               ; 53248
>08fd	00 f0		stopaddr       .word     mstopaddr           ; 55296
>08ff	00 28		bitmapaddr     .word     bitmapmem           ; $3000, 12288
>0901	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>0905	08 04 02 01
>0909	00		editmode       .byte     0
>090a	00		fkeyset        .byte     0
>090b	00		currentchar    .byte     0
>090c	00		currentkey     .byte     0
>090d	00		previouskey    .byte     0
>090e	00		bitmapoffset   .byte     0
>090f	00 00		mapaddr        .word     0
>0911	00 00		byteaddr       .word     0
>0913	00 00		gridaddr       .word     0
>0915	09		cursln         .byte     grid_top
>0916	01		curscl         .byte     grid_left
>0917	05 1b 03 12	pfname         .byte     vvert,27,3,18
>091b	40 30 3a	fname          .text     "@0:"
>091e	52 45 53 54	name           .text     "rester"
>0922	45 52
>0924	2e 43 48 52	ext            .null     ".chr"
>0928	00
>0929	08		device         .byte     8

;******  Processing file: routines.asm

.092a			template
.092a	20 19 21	               jsr  push
.092d	20 58 21	               jsr  pop
.0930	60		               rts
.0931			getfname
.0931	20 19 21	               jsr  push
.0934	20 19 21	               jsr  push
.0937	a2 6b		               ldx  #<blankmsg
.0939	a0 19		               ldy  #>blankmsg
.093b	20 b1 20	               jsr  putscxy
.093e	a2 d4		               ldx  #<fname_msg
.0940	a0 1b		               ldy  #>fname_msg
.0942	20 b1 20	               jsr  putscxy
.0945	20 58 21	               jsr  pop
.0948	a2 00		               ldx  #$00
.094a	8e 7e 09	               stx  count
.094d	20 7f 09	getanother     jsr  getalphanum
.0950	20 22 20	               jsr  putch
.0953	ae 7e 09	               ldx  count
.0956	9d 1e 09	               sta  name,x
.0959	ee 7e 09	               inc  count
.095c	ae 7e 09	               ldx  count
.095f	e0 06		               cpx  #$06
.0961	f0 03		               beq  finish
.0963	4c 4d 09	               jmp  getanother
.0966			finish
.0966	20 19 21	               jsr  push
.0969	a2 6b		               ldx  #<blankmsg
.096b	a0 19		               ldy  #>blankmsg
.096d	20 b1 20	               jsr  putscxy
.0970	a2 17		               ldx  #<pfname
.0972	a0 09		               ldy  #>pfname
.0974	20 b1 20	               jsr  putscxy
.0977	20 58 21	               jsr  pop
.097a	20 58 21	               jsr  pop
.097d	60		               rts
>097e	00		count          .byte     0
.097f			getalphanum
.097f	20 19 21	               jsr  push
.0982	20 39 25	getanother     jsr  getkey
.0985	c9 30		               cmp  #$30      ; 0
.0987	30 f9		               bmi  getanother
.0989	c9 3a		               cmp  #$3a      ; 9+1
.098b	30 0b		               bmi  goodone
.098d	c9 41		isitletter     cmp  #$41      ; A
.098f	30 f1		               bmi  getanother
.0991	c9 5b		               cmp  #$5b      ; Z+1
.0993	30 03		               bmi  goodone
.0995	4c 82 09	               jmp  getanother
.0998	8d a2 09	goodone        sta  tempbyte
.099b	20 58 21	               jsr  pop
.099e	ad a2 09	               lda  tempbyte
.09a1	60		               rts
>09a2	00		tempbyte       .byte     0
.09a3			copychar
.09a3	20 19 21	               jsr  push
.09a6	20 df 09	               jsr  getvalidkey
.09a9	ad ff 08	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.09ac	85 fb		               sta  zpage1
.09ae	ad 00 09	               lda  bitmapaddr+1
.09b1	85 fc		               sta  zpage1+1
.09b3	ae 15 0a	               ldx  copykey
.09b6	bd 14 24	               lda  asciitorom,x
.09b9	aa		               tax
.09ba	e0 00		               cpx  #$00
.09bc	f0 08		               beq  no_offset      ; sommes nous déja à 0
.09be	a9 08		addagain       lda  #$08
.09c0	20 b0 11	               jsr  zp1addnum      ; on augmente de 8 byte ...
.09c3	ca		               dex                 ; pour chaque caracteres
.09c4	d0 f8		               bne  addagain
.09c6	ad 0f 09	no_offset      lda  mapaddr        ; le caractere actuel
.09c9	85 fd		               sta  zpage2         ;
.09cb	ad 10 09	               lda  mapaddr+1      ;
.09ce	85 fe		               sta  zpage2+1       ;
.09d0	a0 00		               ldy  #$00
.09d2	b1 fb		nextbyte       lda  (zpage1),y
.09d4	91 fd		               sta  (zpage2),y
.09d6	c8		               iny
.09d7	c0 08		               cpy  #$08
.09d9	d0 f7		               bne  nextbyte
.09db	20 58 21	out            jsr  pop
.09de	60		               rts
.09df			getvalidkey
.09df	20 19 21	               jsr  push
.09e2	20 19 21	               jsr  push
.09e5	a2 6b		               ldx  #<blankmsg
.09e7	a0 19		               ldy  #>blankmsg
.09e9	20 b1 20	               jsr  putscxy
.09ec	a2 ab		               ldx  #<copychar_msg
.09ee	a0 1b		               ldy  #>copychar_msg
.09f0	20 b1 20	               jsr  putscxy
.09f3	20 58 21	               jsr  pop
.09f6	20 39 25	getgoodkey     jsr  getkey
.09f9	8d 15 0a	               sta  copykey
.09fc	aa		               tax
.09fd	bc 14 24	               ldy  asciitorom,x
.0a00	c4 00		               cpy  $00
.0a02	d0 0a		               bne  goodone
.0a04	ae 15 0a	               ldx  copykey
.0a07	e0 40		               cpx  #$40
.0a09	f0 03		               beq  goodone
.0a0b	4c f6 09	               jmp  getgoodkey
.0a0e	20 22 20	goodone        jsr  putch
.0a11	20 58 21	               jsr  pop
.0a14	60		               rts
>0a15	00		copykey        .byte 0
.0a16			drawcredits
.0a16	20 19 21	               jsr  push
.0a19	20 0b 20	               jsr  cls
.0a1c	a2 33		               ldx #<whoami0
.0a1e	a0 1c		               ldy #>whoami0
.0a20	20 b1 20	               jsr putscxy
.0a23	a2 58		               ldx #<whoami1
.0a25	a0 1c		               ldy #>whoami1
.0a27	20 b1 20	               jsr putscxy
.0a2a	a2 7f		               ldx #<whoami2
.0a2c	a0 1c		               ldy #>whoami2
.0a2e	20 b1 20	               jsr putscxy
.0a31	a2 a4		               ldx #<whoami3
.0a33	a0 1c		               ldy #>whoami3
.0a35	20 b1 20	               jsr putscxy
.0a38	a2 c9		               ldx #<whoami4
.0a3a	a0 1c		               ldy #>whoami4
.0a3c	20 b1 20	               jsr putscxy
.0a3f	a2 ee		               ldx #<whoami5
.0a41	a0 1c		               ldy #>whoami5
.0a43	20 b1 20	               jsr putscxy
.0a46	a2 13		               ldx #<whoami6
.0a48	a0 1d		               ldy #>whoami6
.0a4a	20 b1 20	               jsr putscxy
.0a4d	a2 38		               ldx #<whoami7
.0a4f	a0 1d		               ldy #>whoami7
.0a51	20 b1 20	               jsr putscxy
.0a54	a2 5d		               ldx #<whoami8
.0a56	a0 1d		               ldy #>whoami8
.0a58	20 b1 20	               jsr putscxy
.0a5b	a2 82		               ldx #<whoami9
.0a5d	a0 1d		               ldy #>whoami9
.0a5f	20 b1 20	               jsr putscxy
.0a62	20 ce 11	               jsr  delay
.0a65	20 ce 11	               jsr  delay
.0a68	20 ce 11	               jsr  delay
.0a6b	20 ce 11	               jsr  delay
.0a6e	20 ce 11	               jsr  delay
.0a71	20 58 21	               jsr  pop
.0a74	60		               rts
.0a75			setdefaultchar
.0a75	20 19 21	               jsr  push
.0a78	a9 40		               lda  #$40
.0a7a	8d 0c 09	               sta  currentkey
.0a7d	aa		               tax
.0a7e	bc 14 24	               ldy  asciitorom,x
.0a81	8c 0e 09	               sty  bitmapoffset
.0a84	20 3f 0b	               jsr  drawkeyval
.0a87	20 ea 0e	               jsr  drawbitmap
.0a8a	20 19 21	               jsr  push
.0a8d	a2 0d		               ldx  #13
.0a8f	a0 0c		               ldy  #12
.0a91	20 42 20	               jsr  gotoxy
.0a94	20 58 21	               jsr  pop
.0a97	20 22 20	               jsr  putch
.0a9a	20 19 21	               jsr  push
.0a9d	a2 11		               ldx  #17
.0a9f	a0 05		               ldy  #5
.0aa1	20 42 20	               jsr  gotoxy
.0aa4	20 58 21	               jsr  pop
.0aa7	20 df 23	               jsr  atodec
.0aaa	20 19 21	               jsr  push
.0aad	a2 e3		isx            ldx  #<adec
.0aaf	a0 22		isy            ldy  #>adec
.0ab1	20 28 20	               jsr  puts
.0ab4	20 58 21	               jsr  pull
.0ab7	20 58 21	               jsr  pop
.0aba	60		               rts
.0abb			resetmenuacolor
.0abb	20 19 21	               jsr  push
.0abe	a9 03		               lda  #menu1col1
.0ac0	8d 21 1e	               sta  f1abutton
.0ac3	8d 57 1e	               sta  f3abutton
.0ac6	8d 8d 1e	               sta  f5abutton
.0ac9	8d c3 1e	               sta  f7abutton
.0acc	a9 0e		               lda  #menu1col2
.0ace	8d 3c 1e	               sta  f2abutton
.0ad1	8d 72 1e	               sta  f4abutton
.0ad4	8d a8 1e	               sta  f6abutton
.0ad7	8d de 1e	               sta  f8abutton
.0ada	20 58 21	               jsr  pop
.0add	60		               rts
.0ade			resetmenubcolor
.0ade	20 19 21	               jsr  push
.0ae1	a9 0f		               lda  #menu2col1
.0ae3	8d f9 1e	               sta  f1bbutton
.0ae6	8d 2f 1f	               sta  f3bbutton
.0ae9	8d 65 1f	               sta  f5bbutton
.0aec	8d 9b 1f	               sta  f7bbutton
.0aef	a9 0f		               lda  #menu2col1
.0af1	8d 14 1f	               sta  f2bbutton
.0af4	8d 4a 1f	               sta  f4bbutton
.0af7	8d 80 1f	               sta  f6bbutton
.0afa	8d b6 1f	               sta  f8bbutton
.0afd	20 58 21	               jsr  pop
.0b00	60		               rts
.0b01			setmenuacolor
.0b01	20 19 21	               jsr  push
.0b04	8d 21 1e	               sta  f1abutton
.0b07	8d 3c 1e	               sta  f2abutton
.0b0a	8d 57 1e	               sta  f3abutton
.0b0d	8d 72 1e	               sta  f4abutton
.0b10	8d 8d 1e	               sta  f5abutton
.0b13	8d a8 1e	               sta  f6abutton
.0b16	8d c3 1e	               sta  f7abutton
.0b19	8d de 1e	               sta  f8abutton
.0b1c	20 58 21	               jsr  pop
.0b1f	60		               rts
.0b20			setmenubcolor
.0b20	20 19 21	               jsr  push
.0b23	8d f9 1e	               sta  f1bbutton
.0b26	8d 14 1f	               sta  f2bbutton
.0b29	8d 2f 1f	               sta  f3bbutton
.0b2c	8d 4a 1f	               sta  f4bbutton
.0b2f	8d 65 1f	               sta  f5bbutton
.0b32	8d 80 1f	               sta  f6bbutton
.0b35	8d 9b 1f	               sta  f7bbutton
.0b38	8d b6 1f	               sta  f8bbutton
.0b3b	20 58 21	               jsr  pop
.0b3e	60		               rts
.0b3f			drawkeyval
.0b3f	20 19 21	               jsr  push
.0b42	20 19 21	               jsr  push
.0b45	a2 01		               ldx  #1
.0b47	a0 13		               ldy  #19
.0b49	20 42 20	               jsr  gotoxy
.0b4c	20 58 21	               jsr  pop
.0b4f	ad 0c 09	               lda  currentkey
.0b52	20 22 20	               jsr  putch
.0b55	48		               pha
.0b56	a9 3d		               lda  #'='
.0b58	20 22 20	               jsr  putch
.0b5b	a9 25		               lda  #'%'
.0b5d	20 22 20	               jsr  putch
.0b60	68		               pla
.0b61	20 a5 23	               jsr  putabin
.0b64	20 19 21	               jsr  push
.0b67	a2 01		               ldx  #1
.0b69	a0 14		               ldy  #20
.0b6b	20 42 20	               jsr  gotoxy
.0b6e	20 58 21	               jsr  pop
.0b71	20 19 21	               jsr  push
.0b74	a2 40		isx            ldx  #<txt1
.0b76	a0 0c		isy            ldy  #>txt1
.0b78	20 28 20	               jsr  puts
.0b7b	20 58 21	               jsr  pull
.0b7e	a9 24		               lda  #'$'
.0b80	20 22 20	               jsr  putch
.0b83	ad 0c 09	               lda  currentkey
.0b86	20 12 23	               jsr  putahex
.0b89	20 19 21	               jsr  push
.0b8c	a2 01		               ldx  #1
.0b8e	a0 15		               ldy  #21
.0b90	20 42 20	               jsr  gotoxy
.0b93	20 58 21	               jsr  pop
.0b96	20 19 21	               jsr  push
.0b99	a2 4b		isx            ldx  #<txt2
.0b9b	a0 0c		isy            ldy  #>txt2
.0b9d	20 28 20	               jsr  puts
.0ba0	20 58 21	               jsr  pull
.0ba3	a9 24		               lda  #'$'
.0ba5	20 22 20	               jsr  putch
.0ba8	ad 00 09	               lda  bitmapaddr+1
.0bab	20 12 23	               jsr  putahex
.0bae	ad ff 08	               lda  bitmapaddr
.0bb1	20 12 23	               jsr  putahex
.0bb4	20 19 21	               jsr  push
.0bb7	a2 01		               ldx  #1
.0bb9	a0 16		               ldy  #22
.0bbb	20 42 20	               jsr  gotoxy
.0bbe	20 58 21	               jsr  pop
.0bc1	20 19 21	               jsr  push
.0bc4	a2 56		isx            ldx  #<txt3
.0bc6	a0 0c		isy            ldy  #>txt3
.0bc8	20 28 20	               jsr  puts
.0bcb	20 58 21	               jsr  pull
.0bce	a9 24		               lda  #'$'
.0bd0	20 22 20	               jsr  putch
.0bd3	ad 0e 09	               lda  bitmapoffset
.0bd6	20 12 23	               jsr  putahex
.0bd9	20 19 21	               jsr  push
.0bdc	a2 01		               ldx  #1
.0bde	a0 17		               ldy  #23
.0be0	20 42 20	               jsr  gotoxy
.0be3	20 58 21	               jsr  pop
.0be6	20 19 21	               jsr  push
.0be9	a2 63		isx            ldx  #<txt4
.0beb	a0 0c		isy            ldy  #>txt4
.0bed	20 28 20	               jsr  puts
.0bf0	20 58 21	               jsr  pull
.0bf3	a9 24		               lda  #'$'
.0bf5	20 22 20	               jsr  putch
.0bf8	ad 10 09	               lda  mapaddr+1
.0bfb	20 12 23	               jsr  putahex
.0bfe	ad 0f 09	               lda  mapaddr
.0c01	20 12 23	               jsr  putahex
.0c04	20 19 21	               jsr  push
.0c07	a2 01		               ldx  #1
.0c09	a0 18		               ldy  #24
.0c0b	20 42 20	               jsr  gotoxy
.0c0e	20 58 21	               jsr  pop
.0c11	20 19 21	               jsr  push
.0c14	a2 6e		isx            ldx  #<txt5
.0c16	a0 0c		isy            ldy  #>txt5
.0c18	20 28 20	               jsr  puts
.0c1b	20 58 21	               jsr  pull
.0c1e	ad 16 09	               lda  curscl
.0c21	20 12 23	               jsr  putahex
.0c24	a9 da		               lda  #$da
.0c26	20 22 20	               jsr  putch
.0c29	ad 15 09	               lda  cursln
.0c2c	20 12 23	               jsr  putahex
.0c2f	20 58 21	               jsr  pop
.0c32	60		               rts
>0c33	50 45 54 53	txt0           .null     "petscii :   "
>0c37	43 49 49 20 3a 20 20 20 00
>0c40	4b 45 59 20	txt1           .null     "key code: "
>0c44	43 4f 44 45 3a 20 00
>0c4b	42 49 54 4d	txt2           .null     "bitmap..: "
>0c4f	41 50 2e 2e 3a 20 00
>0c56	4f 46 46 53	txt3           .null     "offset..:   "
>0c5a	45 54 2e 2e 3a 20 20 20 00
>0c63	4d 41 50 41	txt4           .null     "mapaddr.: "
>0c67	44 44 52 2e 3a 20 00
>0c6e	43 55 52 53	txt5           .null     "cursval.: "
>0c72	56 41 4c 2e 3a 20 00
>0c79	53 54 41 43	txt6           .null     "stack......:"
>0c7d	4b 2e 2e 2e 2e 2e 2e 3a 00
.0c86			keyaction
.0c86	20 19 21	               jsr  push
.0c89	20 39 25	loop           jsr  getkey
.0c8c	c9 85		f1             cmp  #key_f1
.0c8e	d0 03		               bne  f2
.0c90	4c 04 0d	               jmp  dof1
.0c93	c9 89		f2             cmp  #key_f2
.0c95	d0 03		               bne  f3
.0c97	4c 0a 0d	               jmp  dof2
.0c9a	c9 86		f3             cmp  #key_f3
.0c9c	d0 03		               bne  f4
.0c9e	4c 10 0d	               jmp  dof3
.0ca1	c9 8a		f4             cmp  #key_f4
.0ca3	d0 03		               bne  f5
.0ca5	4c 16 0d	               jmp  dof4
.0ca8	c9 87		f5             cmp  #key_f5
.0caa	d0 03		               bne  f6
.0cac	4c 1c 0d	               jmp  dof5
.0caf	c9 8b		f6             cmp  #key_f6
.0cb1	d0 03		               bne  f7
.0cb3	4c 22 0d	               jmp  dof6
.0cb6	c9 88		f7             cmp  #key_f7
.0cb8	d0 03		               bne  f8
.0cba	4c 28 0d	               jmp  dof7
.0cbd	c9 8c		f8             cmp  #key_f8
.0cbf	d0 03		               bne  ctrlx
.0cc1	4c 2e 0d	               jmp  dof8
.0cc4	c9 18		ctrlx          cmp  #ctrl_x
.0cc6	d0 03		               bne  ishex14
.0cc8	4c 34 0d	               jmp  doquit
.0ccb	c9 14		ishex14        cmp  #$14
.0ccd	d0 03		               bne  ishex12
.0ccf	4c 89 0c	               jmp  loop
.0cd2	c9 12		ishex12        cmp  #$12
.0cd4	d0 03		               bne  reste
.0cd6	4c 89 0c	               jmp  loop
.0cd9			reste
.0cd9	20 19 21	               jsr  push
.0cdc	a2 0d		               ldx  #13
.0cde	a0 0c		               ldy  #12
.0ce0	20 42 20	               jsr  gotoxy
.0ce3	20 58 21	               jsr  pop
.0ce6	20 22 20	               jsr  putch
.0ce9	48		               pha
.0cea	ad 0c 09	               lda  currentkey
.0ced	8d 0d 09	               sta  previouskey
.0cf0	68		               pla
.0cf1	8d 0c 09	               sta  currentkey
.0cf4	aa		               tax
.0cf5	bc 14 24	               ldy  asciitorom,x
.0cf8	8c 0e 09	               sty  bitmapoffset
.0cfb	20 3f 0b	               jsr  drawkeyval
.0cfe	20 ea 0e	               jsr  drawbitmap
.0d01	4c 89 0c	               jmp  loop
.0d04	20 e4 11	dof1           jsr  f1action  ;edit/reverse
.0d07	4c 89 0c	               jmp  loop
.0d0a	20 d7 12	dof2           jsr  f2action  ;save/flip vert
.0d0d	4c 89 0c	               jmp  loop
.0d10	20 8f 13	dof3           jsr  f3action  ;load/flip horz
.0d13	4c 89 0c	               jmp  loop
.0d16	20 5c 14	dof4           jsr  f4action  ;copy/scroll r
.0d19	4c 89 0c	               jmp  loop
.0d1c	20 22 15	dof5           jsr  f5action  ;clear/scroll l
.0d1f	4c 89 0c	               jmp  loop
.0d22	20 da 15	dof6           jsr  f6action  ;fill;/scroll up
.0d25	4c 89 0c	               jmp  loop
.0d28	20 92 16	dof7           jsr  f7action  ;clear;/scroll down
.0d2b	4c 89 0c	               jmp  loop
.0d2e	20 4f 17	dof8           jsr  f8action  ; function
.0d31	4c 89 0c	               jmp  loop
.0d34	20 58 21	doquit         jsr  pop
.0d37	60		               rts
.0d38			editor
.0d38	20 19 21	               jsr  push
.0d3b	20 19 21	               jsr  push
.0d3e	a2 6b		               ldx  #<blankmsg
.0d40	a0 19		               ldy  #>blankmsg
.0d42	20 b1 20	               jsr  putscxy
.0d45	a2 1e		               ldx  #<exit_msg
.0d47	a0 1c		               ldy  #>exit_msg
.0d49	20 b1 20	               jsr  putscxy
.0d4c	20 58 21	               jsr  pop
.0d4f	20 19 21	               jsr  push
.0d52	a2 6b		               ldx  #<blankmsg
.0d54	a0 19		               ldy  #>blankmsg
.0d56	20 b1 20	               jsr  putscxy
.0d59	a2 bd		               ldx  #<edit_msg
.0d5b	a0 19		               ldy  #>edit_msg
.0d5d	20 b1 20	               jsr  putscxy
.0d60	20 58 21	               jsr  pop
.0d63	20 a6 0e	               jsr  setcurs
.0d66	ad 0c 09	               lda  currentkey
.0d69	20 19 21	               jsr  push
.0d6c	a2 11		               ldx  #17
.0d6e	a0 05		               ldy  #5
.0d70	20 42 20	               jsr  gotoxy
.0d73	20 58 21	               jsr  pop
.0d76	20 df 23	               jsr  atodec
.0d79	20 19 21	               jsr  push
.0d7c	a2 e3		isx            ldx  #<adec
.0d7e	a0 22		isy            ldy  #>adec
.0d80	20 28 20	               jsr  puts
.0d83	20 58 21	               jsr  pull
.0d86	20 ea 0e	               jsr  drawbitmap
.0d89	20 39 25	ed_loop        jsr  getkey
.0d8c	c9 85		f1             cmp  #f1key
.0d8e	d0 03		               bne  cu
.0d90	4c 78 0e	               jmp  do_ctrlx
.0d93	c9 91		cu             cmp  #cursu
.0d95	d0 03		               bne  cd
.0d97	4c 23 0e	               jmp  do_up
.0d9a	c9 11		cd             cmp  #cursd
.0d9c	d0 03		               bne  cl
.0d9e	4c 36 0e	               jmp  do_down
.0da1	c9 9d		cl             cmp  #cursl
.0da3	d0 03		               bne  cr
.0da5	4c 49 0e	               jmp  do_left
.0da8	c9 1d		cr             cmp  #cursr
.0daa	d0 03		               bne  cx
.0dac	4c 5c 0e	               jmp  do_right
.0daf	c9 18		cx             cmp  #ctrl_x
.0db1	d0 03		               bne  sp
.0db3	4c 78 0e	               jmp  do_ctrlx
.0db6	c9 20		sp             cmp  #$20
.0db8	d0 03		               bne  ishex14
.0dba	4c 6f 0e	               jmp  do_swap
.0dbd	c9 14		ishex14        cmp  #$14
.0dbf	d0 03		               bne  ishex12
.0dc1	4c 6f 0e	               jmp  do_swap
.0dc4	c9 12		ishex12        cmp  #$12
.0dc6	d0 03		               bne  rest
.0dc8	4c 6f 0e	               jmp  do_swap
.0dcb			rest
.0dcb	20 19 21	               jsr  push
.0dce	a2 0d		               ldx  #13
.0dd0	a0 0c		               ldy  #12
.0dd2	20 42 20	               jsr  gotoxy
.0dd5	20 58 21	               jsr  pop
.0dd8	20 22 20	               jsr  putch
.0ddb	48		               pha
.0ddc	ad 0c 09	               lda  currentkey
.0ddf	8d 0d 09	               sta  previouskey
.0de2	68		               pla
.0de3	8d 0c 09	               sta  currentkey
.0de6	aa		               tax
.0de7	bc 14 24	               ldy  asciitorom,x
.0dea	8c 0e 09	               sty  bitmapoffset
.0ded	20 3f 0b	               jsr  drawkeyval
.0df0	20 ea 0e	               jsr  drawbitmap
.0df3	20 19 21	               jsr  push
.0df6	a2 0d		               ldx  #13
.0df8	a0 0c		               ldy  #12
.0dfa	20 42 20	               jsr  gotoxy
.0dfd	20 58 21	               jsr  pop
.0e00	20 22 20	               jsr  putch
.0e03	20 19 21	               jsr  push
.0e06	a2 11		               ldx  #17
.0e08	a0 05		               ldy  #5
.0e0a	20 42 20	               jsr  gotoxy
.0e0d	20 58 21	               jsr  pop
.0e10	20 df 23	               jsr  atodec
.0e13	20 19 21	               jsr  push
.0e16	a2 e3		isx            ldx  #<adec
.0e18	a0 22		isy            ldy  #>adec
.0e1a	20 28 20	               jsr  puts
.0e1d	20 58 21	               jsr  pull
.0e20	4c 75 0e	               jmp  totop
.0e23	ad 15 09	do_up          lda  cursln
.0e26	c9 09		               cmp  #grid_top
.0e28	f0 4b		               beq  totop
.0e2a	20 c8 0e	               jsr  clrcurs
.0e2d	ce 15 09	               dec  cursln
.0e30	20 a6 0e	               jsr  setcurs
.0e33	4c 75 0e	               jmp  totop
.0e36	ad 15 09	do_down        lda  cursln
.0e39	c9 10		               cmp  #grid_bot
.0e3b	f0 38		               beq  totop
.0e3d	20 c8 0e	               jsr  clrcurs
.0e40	ee 15 09	               inc  cursln
.0e43	20 a6 0e	               jsr  setcurs
.0e46	4c 75 0e	               jmp  totop
.0e49	ad 16 09	do_left        lda  curscl
.0e4c	c9 01		               cmp  #grid_left
.0e4e	f0 25		               beq  totop
.0e50	20 c8 0e	               jsr  clrcurs
.0e53	ce 16 09	               dec  curscl
.0e56	20 a6 0e	               jsr  setcurs
.0e59	4c 75 0e	               jmp  totop
.0e5c	ad 16 09	do_right       lda  curscl
.0e5f	c9 08		               cmp  #grid_right
.0e61	f0 12		               beq  totop
.0e63	20 c8 0e	               jsr  clrcurs
.0e66	ee 16 09	               inc  curscl
.0e69	20 a6 0e	               jsr  setcurs
.0e6c	4c 75 0e	               jmp  totop
.0e6f	20 7f 0e	do_swap        jsr  do_eor
.0e72	20 ea 0e	               jsr  drawbitmap
.0e75	4c 89 0d	totop          jmp  ed_loop
.0e78	20 c8 0e	do_ctrlx       jsr  clrcurs
.0e7b	20 58 21	               jsr  pop
.0e7e	60		               rts
.0e7f			do_eor
.0e7f	20 19 21	               jsr  push
.0e82	ad 0f 09	               lda  mapaddr
.0e85	85 fd		               sta  zpage2
.0e87	ad 10 09	               lda  mapaddr+1
.0e8a	85 fe		               sta  zpage2+1
.0e8c	ae 15 09	               ldx  cursln     ; calcul de
.0e8f	ca		               dex            ; l'offset de
.0e90	8a		               txa            ; la
.0e91	29 f7		               and  #$f7      ; ligne
.0e93	a8		               tay
.0e94	ae 16 09	               ldx  curscl
.0e97	ca		               dex
.0e98	bd 01 09	               lda  eorval,x
.0e9b	51 fd		               eor  (zpage2),y
.0e9d	20 3f 0b	               jsr  drawkeyval
.0ea0	91 fd		               sta  (zpage2),y
.0ea2	20 58 21	               jsr  pop
.0ea5	60		               rts
.0ea6			setcurs
.0ea6	20 19 21	               jsr  push
.0ea9	a2 01		               ldx  #grid_left
.0eab	ac 15 09	               ldy  cursln
.0eae	20 42 20	               jsr  gotoxy
.0eb1	a9 da		               lda  #$da
.0eb3	20 22 20	               jsr  putch
.0eb6	ae 16 09	               ldx  curscl
.0eb9	e8		               inx
.0eba	a0 08		               ldy  #grid_top-1
.0ebc	20 42 20	               jsr  gotoxy
.0ebf	a9 da		               lda  #$da
.0ec1	20 22 20	               jsr  putch
.0ec4	20 58 21	               jsr  pop
.0ec7	60		               rts
.0ec8			clrcurs
.0ec8	20 19 21	               jsr  push
.0ecb	a2 01		               ldx  #grid_left
.0ecd	ac 15 09	               ldy  cursln
.0ed0	20 42 20	               jsr  gotoxy
.0ed3	a9 20		               lda  #$20
.0ed5	20 22 20	               jsr  putch
.0ed8	ae 16 09	               ldx  curscl
.0edb	e8		               inx
.0edc	a0 08		               ldy  #grid_top-1
.0ede	20 42 20	               jsr  gotoxy
.0ee1	a9 20		               lda  #$20
.0ee3	20 22 20	               jsr  putch
.0ee6	20 58 21	               jsr  pop
.0ee9	60		               rts
.0eea			drawbitmap
.0eea	20 19 21	               jsr  push
.0eed	20 51 0f	               jsr  calcmapaddr
.0ef0	ad 0f 09	               lda  mapaddr        ; on pointe sur la table des bitmaps
.0ef3	85 fb		               sta  zpage1
.0ef5	ad 10 09	               lda  mapaddr+1
.0ef8	85 fc		               sta  zpage1+1
.0efa	a0 00		drawchar       ldy  #$00
.0efc	a2 09		               ldx  #grid_top      ;on replace la ...
.0efe	8e 07 0f	               stx  isy+1          ;ligne de départ
.0f01	20 19 21	nextline       jsr  push
.0f04	a2 02		               ldx  #grid_left+1        ; la colonne
.0f06	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.0f08	20 42 20	               jsr  gotoxy
.0f0b	20 58 21	               jsr  pop
.0f0e	b1 fb		               lda  (zpage1),y     ; on li une ligne
.0f10	20 83 23	               jsr  atobin
.0f13	20 80 0f	               jsr  abintograph
.0f16	20 19 21	               jsr  push
.0f19	a2 da		isx            ldx  #<abin
.0f1b	a0 22		isy            ldy  #>abin
.0f1d	20 28 20	               jsr  puts
.0f20	20 58 21	               jsr  pull
.0f23	ee 07 0f	               inc  isy+1
.0f26	c8		               iny
.0f27	c0 08		               cpy  #$08
.0f29	30 d6		               bmi  nextline
.0f2b	20 32 0f	               jsr  highlight
.0f2e	20 58 21	               jsr  pop
.0f31	60		               rts
.0f32			highlight
.0f32	20 19 21	               jsr  push
.0f35	ae 0d 09	               ldx  previouskey
.0f38	bd 14 24	               lda  asciitorom,x
.0f3b	aa		               tax
.0f3c	a9 0f		               lda  #charscolor
.0f3e	9d 00 d8	               sta  colorram,x
.0f41	ae 0c 09	               ldx  currentkey
.0f44	bd 14 24	               lda  asciitorom,x
.0f47	aa		               tax
.0f48	a9 01		               lda  #charcolor
.0f4a	9d 00 d8	               sta  colorram,x
.0f4d	20 58 21	               jsr  pop
.0f50	60		               rts
.0f51			calcmapaddr
.0f51	20 19 21	               jsr  push
.0f54	ad ff 08	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0f57	85 fb		               sta  zpage1
.0f59	ad 00 09	               lda  bitmapaddr+1
.0f5c	85 fc		               sta  zpage1+1
.0f5e	ae 0e 09	               ldx  bitmapoffset
.0f61	e0 00		               cpx  #$00
.0f63	f0 08		               beq  thesame         ; sommes nous déja à 0
.0f65	a9 08		addagain       lda  #$08
.0f67	20 b0 11	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0f6a	ca		               dex                 ; pour chaque caracteres
.0f6b	d0 f8		               bne  addagain
.0f6d	48		thesame        pha
.0f6e	a5 fb		               lda  zpage1
.0f70	8d 0f 09	               sta  mapaddr
.0f73	a5 fc		               lda  zpage1+1
.0f75	8d 10 09	               sta  mapaddr+1
.0f78	68		               pla
.0f79	20 3f 0b	               jsr  drawkeyval
.0f7c	20 58 21	out            jsr  pop
.0f7f	60		               rts
.0f80			abintograph
.0f80	20 19 21	               jsr  push
.0f83	a9 da		               lda  #<abin
.0f85	85 fb		               sta  zpage1
.0f87	a9 22		               lda  #>abin+1
.0f89	85 fc		               sta  zpage1+1
.0f8b	a0 00		               ldy  #$00
.0f8d	b1 fb		nextbit        lda  (zpage1),y
.0f8f	c9 30		               cmp  #$30
.0f91	f0 07		               beq  itszero
.0f93	a9 d1		itsone         lda  #$d1
.0f95	91 fb		               sta  (zpage1),y
.0f97	4c 9e 0f	               jmp  next
.0f9a	a9 2e		itszero        lda  #$2e
.0f9c	91 fb		               sta  (zpage1),y
.0f9e	c8		next           iny
.0f9f	c0 08		               cpy  #$08
.0fa1	30 ea		               bmi  nextbit
.0fa3	20 58 21	               jsr  pop
.0fa6	60		               rts
.0fa7			setscreenptr
.0fa7	20 19 21	               jsr  push
.0faa	a9 08		               lda  #$08      ; basic commande to disable ...
.0fac	20 d2 ff	               jsr  chrout    ; ... character set change.
.0faf	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.0fb2	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.0fb4	09 0a		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.0fb6	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.0fb9	20 58 21	               jsr  pop
.0fbc	60		               rts
.0fbd			copycharset
.0fbd	20 19 21	               jsr  push
.0fc0	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0fc3	29 fe		               and  #%11111110     ;254
.0fc5	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0fc8	a5 01		               lda  u6510map       ;$01
.0fca	29 fb		               and  #%11111011     ;251
.0fcc	85 01		               sta  u6510map       ;$01
.0fce	20 e3 0f	               jsr  memcopy
.0fd1	a5 01		               lda  u6510map       ;$01
.0fd3	09 04		               ora  #%00000100
.0fd5	85 01		               sta  u6510map       ;$01
.0fd7	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0fda	09 01		               ora  #%00000001     ;254
.0fdc	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0fdf	20 58 21	               jsr  pop
.0fe2	60		               rts
.0fe3			memcopy
.0fe3	20 19 21	               jsr  push
.0fe6	ad fb 08	               lda  startaddr
.0fe9	85 fb		               sta  zpage1
.0feb	ad fc 08	               lda  startaddr+1
.0fee	85 fc		               sta  zpage1+1
.0ff0	ad ff 08	               lda  bitmapaddr
.0ff3	85 fd		               sta  zpage2
.0ff5	ad 00 09	               lda  bitmapaddr+1
.0ff8	85 fe		               sta  zpage2+1
.0ffa	a0 00		               ldy  #$00
.0ffc	b1 fb		onemore        lda  (zpage1),y
.0ffe	91 fd		               sta  (zpage2),y
.1000	20 20 22	               jsr  inczp1
.1003	20 38 22	               jsr  inczp2
.1006	a5 fc		               lda  zpage1+1
.1008	cd fe 08	               cmp  stopaddr+1
.100b	d0 ef		               bne  onemore
.100d	a5 fb		               lda  zpage1
.100f	cd fd 08	               cmp  stopaddr
.1012	d0 e8		               bne  onemore
.1014	20 58 21	               jsr  pop
.1017	60		               rts
.1018			staticscreen
.1018	48		               pha
.1019	a9 0b		               lda  #bordure
.101b	8d 20 d0	               sta  $d020
.101e	68		               pla
.101f	48		               pha
.1020	a9 00		               lda  #fond
.1022	8d 21 d0	               sta  $d021
.1025	68		               pla
.1026	20 07 11	               jsr  drawlines
.1029	20 e3 10	               jsr  drawallchars
.102c	20 4f 11	               jsr  drawgrid
.102f	20 54 10	               jsr  drawfkeys
.1032	20 19 21	               jsr  push
.1035	a2 6b		               ldx  #<blankmsg
.1037	a0 19		               ldy  #>blankmsg
.1039	20 b1 20	               jsr  putscxy
.103c	a2 09		               ldx  #<quit_msg
.103e	a0 1c		               ldy  #>quit_msg
.1040	20 b1 20	               jsr  putscxy
.1043	20 58 21	               jsr  pop
.1046	20 19 21	               jsr  push
.1049	a2 00		               ldx  #0
.104b	a0 07		               ldy  #7
.104d	20 42 20	               jsr  gotoxy
.1050	20 58 21	               jsr  pop
.1053	60		               rts
.1054			drawfkeys
.1054	20 19 21	               jsr  push
.1057	ad 0a 09	               lda  fkeyset
.105a	c9 00		               cmp  #$0
.105c	d0 42		               bne  secondks
.105e	a2 eb		               ldx #<titremenu1
.1060	a0 1d		               ldy #>titremenu1
.1062	20 b1 20	               jsr putscxy
.1065	a2 21		               ldx #<f1abutton
.1067	a0 1e		               ldy #>f1abutton
.1069	20 b1 20	               jsr putscxy
.106c	a2 3c		               ldx #<f2abutton
.106e	a0 1e		               ldy #>f2abutton
.1070	20 b1 20	               jsr putscxy
.1073	a2 57		               ldx #<f3abutton
.1075	a0 1e		               ldy #>f3abutton
.1077	20 b1 20	               jsr putscxy
.107a	a2 72		               ldx #<f4abutton
.107c	a0 1e		               ldy #>f4abutton
.107e	20 b1 20	               jsr putscxy
.1081	a2 8d		               ldx #<f5abutton
.1083	a0 1e		               ldy #>f5abutton
.1085	20 b1 20	               jsr putscxy
.1088	a2 a8		               ldx #<f6abutton
.108a	a0 1e		               ldy #>f6abutton
.108c	20 b1 20	               jsr putscxy
.108f	a2 c3		               ldx #<f7abutton
.1091	a0 1e		               ldy #>f7abutton
.1093	20 b1 20	               jsr putscxy
.1096	a2 de		               ldx #<f8abutton
.1098	a0 1e		               ldy #>f8abutton
.109a	20 b1 20	               jsr putscxy
.109d	4c df 10	               jmp end
.10a0			secondks
.10a0	a2 06		               ldx #<titremenu2
.10a2	a0 1e		               ldy #>titremenu2
.10a4	20 b1 20	               jsr putscxy
.10a7	a2 f9		               ldx #<f1bbutton
.10a9	a0 1e		               ldy #>f1bbutton
.10ab	20 b1 20	               jsr putscxy
.10ae	a2 14		               ldx #<f2bbutton
.10b0	a0 1f		               ldy #>f2bbutton
.10b2	20 b1 20	               jsr putscxy
.10b5	a2 2f		               ldx #<f3bbutton
.10b7	a0 1f		               ldy #>f3bbutton
.10b9	20 b1 20	               jsr putscxy
.10bc	a2 4a		               ldx #<f4bbutton
.10be	a0 1f		               ldy #>f4bbutton
.10c0	20 b1 20	               jsr putscxy
.10c3	a2 65		               ldx #<f5bbutton
.10c5	a0 1f		               ldy #>f5bbutton
.10c7	20 b1 20	               jsr putscxy
.10ca	a2 80		               ldx #<f6bbutton
.10cc	a0 1f		               ldy #>f6bbutton
.10ce	20 b1 20	               jsr putscxy
.10d1	a2 9b		               ldx #<f7bbutton
.10d3	a0 1f		               ldy #>f7bbutton
.10d5	20 b1 20	               jsr putscxy
.10d8	a2 b6		               ldx #<f8bbutton
.10da	a0 1f		               ldy #>f8bbutton
.10dc	20 b1 20	               jsr putscxy
.10df	20 58 21	end            jsr  pop
.10e2	60		               rts
.10e3			drawallchars
.10e3	20 19 21	               jsr push
.10e6	20 19 21	               jsr  push
.10e9	a2 00		               ldx  #0
.10eb	a0 00		               ldy  #0
.10ed	20 42 20	               jsr  gotoxy
.10f0	20 58 21	               jsr  pop
.10f3	a2 00		               ldx  #$00
.10f5	8a		nextc          txa
.10f6	9d 00 04	               sta  scrnnewram,x
.10f9	a9 0f		               lda  #charscolor
.10fb	9d 00 d8	               sta  colorram,x
.10fe	e8		               inx
.10ff	e0 80		               cpx  #$80
.1101	d0 f2		               bne  nextc
.1103	20 58 21	               jsr  pop
.1106	60		               rts
.1107			drawlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.1107	20 19 21	               jsr  push
.110a	a2 28		               ldx  #40
.110c	a9 40		               lda  #64
.110e	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.1111	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.1114	ca		               dex
.1115	e0 10		hline          cpx  #vlinepos
.1117	10 03		               bpl  notyet
.1119	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.111c	e0 00		notyet         cpx  #$00
.111e	d0 ee		               bne  nextl
.1120	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.1122	85 fb		               sta  zpage1
.1124	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.1126	85 fc		               sta  zpage1+1
.1128	a0 00		               ldy  #0
.112a	a9 72		               lda  #114
.112c	91 fb		               sta  (zpage1),y
.112e	20 be 11	               jsr  zp1add40
.1131	a2 12		               ldx  #24-hline2
.1133	a9 5d		               lda  #93
.1135	91 fb		another93      sta  (zpage1),y
.1137	20 be 11	               jsr  zp1add40
.113a	ca		               dex
.113b	d0 f8		               bne  another93
.113d	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.113f	85 fb		               sta  zpage1
.1141	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.1143	85 fc		               sta  zpage1+1
.1145	a0 00		               ldy  #0
.1147	a9 73		               lda  #115
.1149	91 fb		               sta  (zpage1),y
.114b	20 58 21	               jsr  pop
.114e	60		               rts
.114f			drawgrid
.114f	20 19 21	               jsr  push
.1152	20 d1 1f	               jsr  screendis
.1155	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.1157	85 fb		               sta  zpage1
.1159	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.115b	85 fc		               sta  zpage1+1
.115d	a2 08		               ldx  #8
.115f	a9 65		nextbox        lda  #101
.1161	a0 09		               ldy  #9
.1163	91 fb		               sta  (zpage1),y
.1165	88		               dey
.1166	a9 2e		               lda  #$2e
.1168	91 fb		nextcol        sta  (zpage1),y
.116a	88		               dey
.116b	d0 fb		               bne  nextcol
.116d	20 be 11	               jsr  zp1add40
.1170	ca		               dex
.1171	d0 ec		               bne  nextbox
.1173	a0 08		               ldy  #8
.1175	a9 77		               lda  #119
.1177	91 fb		nextlin        sta  (zpage1),y
.1179	88		               dey
.117a	d0 fb		               bne  nextlin
.117c	a9 3e		               lda  #$3e
.117e	8d eb 05	               sta  scrnnewram+(40*(12))+11
.1181	a9 70		               lda  #$70                     ;+
.1183	8d c4 05	               sta  scrnnewram+(40*(11))+12
.1186	a9 43		               lda  #$43                     ;-
.1188	8d c5 05	               sta  scrnnewram+(40*(11))+13
.118b	a9 6e		               lda  #$6e                     ;+
.118d	8d c6 05	               sta  scrnnewram+(40*(11))+14
.1190	a9 5d		               lda  #$5d                     ;|
.1192	8d ec 05	               sta  scrnnewram+(40*(12))+12
.1195	a9 5d		               lda  #$5d                     ;|
.1197	8d ee 05	               sta  scrnnewram+(40*(12))+14
.119a	a9 6d		               lda  #$6d                     ;+
.119c	8d 14 06	               sta  scrnnewram+(40*(13))+12
.119f	a9 43		               lda  #$43                     ;-
.11a1	8d 15 06	               sta  scrnnewram+(40*(13))+13
.11a4	a9 7d		               lda  #$7d                     ;+
.11a6	8d 16 06	               sta  scrnnewram+(40*(13))+14
.11a9	20 de 1f	               jsr screenena
.11ac	20 58 21	               jsr  pop
.11af	60		               rts
.11b0			zp1addnum
.11b0	08		               php
.11b1	48		               pha
.11b2	18		               clc
.11b3	65 fb		               adc  zpage1
.11b5	90 02		               bcc  nocarry
.11b7	e6 fc		               inc  zpage1+1
.11b9	85 fb		nocarry        sta  zpage1
.11bb	68		               pla
.11bc	28		               plp
.11bd	60		               rts
.11be			zp1add40
.11be	08		               php
.11bf	48		               pha
.11c0	18		               clc
.11c1	a5 fb		               lda  zpage1
.11c3	69 28		               adc  #40
.11c5	90 02		               bcc  nocarry
.11c7	e6 fc		               inc  zpage1+1
.11c9	85 fb		nocarry        sta  zpage1
.11cb	68		               pla
.11cc	28		               plp
.11cd	60		               rts
.11ce			delay
.11ce	20 19 21	               jsr  push
.11d1	a9 00		               lda  #$0
.11d3	aa		               tax
.11d4	a8		               tay
.11d5	ca		xagain         dex
.11d6	ca		               dex
.11d7	88		yagain         dey
.11d8	c0 00		               cpy  #$00
.11da	d0 fb		               bne  yagain
.11dc	e0 00		               cpx  #$00
.11de	d0 f5		               bne  xagain
.11e0	20 58 21	               jsr  pop
.11e3	60		               rts
.11e4			f1action
.11e4	48		               pha
.11e5	a9 ff		               lda  #$ff
.11e7	8d 09 09	               sta  editmode
.11ea	ad 0a 09	               lda  fkeyset
.11ed	f0 03		               beq  menua
.11ef	4c 77 12	               jmp  menub
.11f2			menua
.11f2	20 19 21	               jsr  push
.11f5	a2 6b		               ldx  #<blankmsg
.11f7	a0 19		               ldy  #>blankmsg
.11f9	20 b1 20	               jsr  putscxy
.11fc	a2 bd		               ldx  #<f1a_msg
.11fe	a0 19		               ldy  #>f1a_msg
.1200	20 b1 20	               jsr  putscxy
.1203	20 58 21	               jsr  pop
.1206	08		               php
.1207	48		               pha
.1208	8a		               txa
.1209	48		               pha
.120a	ad 21 1e	               lda  f1abutton
.120d	48		               pha
.120e	a9 92		               lda  #146
.1210	8d 33 1e	               sta  f1abutton+18
.1213	a9 01		               lda  #flashcol
.1215	8d 21 1e	               sta  f1abutton
.1218	a2 21		               ldx  #<f1abutton
.121a	a0 1e		               ldy  #>f1abutton
.121c	20 b1 20	               jsr  putscxy
.121f	20 ce 11	               jsr  delay
.1222	a9 12		               lda  #18
.1224	8d 33 1e	               sta  f1abutton+18
.1227	68		               pla
.1228	8d 21 1e	               sta  f1abutton
.122b	a2 21		               ldx  #<f1abutton
.122d	a0 1e		               ldy  #>f1abutton
.122f	20 b1 20	               jsr  putscxy
.1232	68		               pla
.1233	aa		               tax
.1234	68		               pla
.1235	28		               plp
.1236	a9 0b		               lda  #vgris
.1238	20 01 0b	               jsr  setmenuacolor
.123b	a9 03		               lda  #menu1col1
.123d	8d 21 1e	               sta  f1abutton
.1240	20 54 10	               jsr  drawfkeys
.1243	20 38 0d	               jsr  editor
.1246	20 19 21	               jsr  push
.1249	a2 6b		               ldx  #<blankmsg
.124b	a0 19		               ldy  #>blankmsg
.124d	20 b1 20	               jsr  putscxy
.1250	a2 09		               ldx  #<quit_msg
.1252	a0 1c		               ldy  #>quit_msg
.1254	20 b1 20	               jsr  putscxy
.1257	20 58 21	               jsr  pop
.125a	20 19 21	               jsr  push
.125d	a2 6b		               ldx  #<blankmsg
.125f	a0 19		               ldy  #>blankmsg
.1261	20 b1 20	               jsr  putscxy
.1264	a2 61		               ldx  #<menua_msg
.1266	a0 1b		               ldy  #>menua_msg
.1268	20 b1 20	               jsr  putscxy
.126b	20 58 21	               jsr  pop
.126e	20 bb 0a	               jsr  resetmenuacolor
.1271	20 54 10	               jsr  drawfkeys
.1274	4c c1 12	               jmp  out
.1277			menub
.1277	20 19 21	               jsr  push
.127a	a2 6b		               ldx  #<blankmsg
.127c	a0 19		               ldy  #>blankmsg
.127e	20 b1 20	               jsr  putscxy
.1281	a2 a5		               ldx  #<f1b_msg
.1283	a0 1a		               ldy  #>f1b_msg
.1285	20 b1 20	               jsr  putscxy
.1288	20 58 21	               jsr  pop
.128b	08		               php
.128c	48		               pha
.128d	8a		               txa
.128e	48		               pha
.128f	ad f9 1e	               lda  f1bbutton
.1292	48		               pha
.1293	a9 92		               lda  #146
.1295	8d 0b 1f	               sta  f1bbutton+18
.1298	a9 01		               lda  #flashcol
.129a	8d f9 1e	               sta  f1bbutton
.129d	a2 f9		               ldx  #<f1bbutton
.129f	a0 1e		               ldy  #>f1bbutton
.12a1	20 b1 20	               jsr  putscxy
.12a4	20 ce 11	               jsr  delay
.12a7	a9 12		               lda  #18
.12a9	8d 0b 1f	               sta  f1bbutton+18
.12ac	68		               pla
.12ad	8d f9 1e	               sta  f1bbutton
.12b0	a2 f9		               ldx  #<f1bbutton
.12b2	a0 1e		               ldy  #>f1bbutton
.12b4	20 b1 20	               jsr  putscxy
.12b7	68		               pla
.12b8	aa		               tax
.12b9	68		               pla
.12ba	28		               plp
.12bb	20 37 19	               jsr  flipvert
.12be	20 ea 0e	               jsr  drawbitmap
.12c1	68		out            pla
.12c2	20 19 21	               jsr  push
.12c5	a2 6b		               ldx  #<blankmsg
.12c7	a0 19		               ldy  #>blankmsg
.12c9	20 b1 20	               jsr  putscxy
.12cc	a2 97		               ldx  #<prompt_msg
.12ce	a0 19		               ldy  #>prompt_msg
.12d0	20 b1 20	               jsr  putscxy
.12d3	20 58 21	               jsr  pop
.12d6	60		               rts
.12d7			f2action
.12d7	48		               pha
.12d8	a9 00		               lda  #$0
.12da	8d 09 09	               sta  editmode
.12dd	ad 0a 09	               lda  fkeyset
.12e0	d0 4d		               bne  menub
.12e2	20 19 21	               jsr  push
.12e5	a2 6b		               ldx  #<blankmsg
.12e7	a0 19		               ldy  #>blankmsg
.12e9	20 b1 20	               jsr  putscxy
.12ec	a2 d8		               ldx  #<f2a_msg
.12ee	a0 19		               ldy  #>f2a_msg
.12f0	20 b1 20	               jsr  putscxy
.12f3	20 58 21	               jsr  pop
.12f6	08		               php
.12f7	48		               pha
.12f8	8a		               txa
.12f9	48		               pha
.12fa	ad 3c 1e	               lda  f2abutton
.12fd	48		               pha
.12fe	a9 92		               lda  #146
.1300	8d 4e 1e	               sta  f2abutton+18
.1303	a9 01		               lda  #flashcol
.1305	8d 3c 1e	               sta  f2abutton
.1308	a2 3c		               ldx  #<f2abutton
.130a	a0 1e		               ldy  #>f2abutton
.130c	20 b1 20	               jsr  putscxy
.130f	20 ce 11	               jsr  delay
.1312	a9 12		               lda  #18
.1314	8d 4e 1e	               sta  f2abutton+18
.1317	68		               pla
.1318	8d 3c 1e	               sta  f2abutton
.131b	a2 3c		               ldx  #<f2abutton
.131d	a0 1e		               ldy  #>f2abutton
.131f	20 b1 20	               jsr  putscxy
.1322	68		               pla
.1323	aa		               tax
.1324	68		               pla
.1325	28		               plp
.1326	20 a3 09	               jsr  copychar
.1329	20 ea 0e	               jsr  drawbitmap
.132c	4c 79 13	               jmp  out
.132f			menub
.132f	20 19 21	               jsr  push
.1332	a2 6b		               ldx  #<blankmsg
.1334	a0 19		               ldy  #>blankmsg
.1336	20 b1 20	               jsr  putscxy
.1339	a2 c1		               ldx  #<f2b_msg
.133b	a0 1a		               ldy  #>f2b_msg
.133d	20 b1 20	               jsr  putscxy
.1340	20 58 21	               jsr  pop
.1343	08		               php
.1344	48		               pha
.1345	8a		               txa
.1346	48		               pha
.1347	ad 14 1f	               lda  f2bbutton
.134a	48		               pha
.134b	a9 92		               lda  #146
.134d	8d 26 1f	               sta  f2bbutton+18
.1350	a9 01		               lda  #flashcol
.1352	8d 14 1f	               sta  f2bbutton
.1355	a2 14		               ldx  #<f2bbutton
.1357	a0 1f		               ldy  #>f2bbutton
.1359	20 b1 20	               jsr  putscxy
.135c	20 ce 11	               jsr  delay
.135f	a9 12		               lda  #18
.1361	8d 26 1f	               sta  f2bbutton+18
.1364	68		               pla
.1365	8d 14 1f	               sta  f2bbutton
.1368	a2 14		               ldx  #<f2bbutton
.136a	a0 1f		               ldy  #>f2bbutton
.136c	20 b1 20	               jsr  putscxy
.136f	68		               pla
.1370	aa		               tax
.1371	68		               pla
.1372	28		               plp
.1373	20 0a 19	               jsr  fliphorz
.1376	20 ea 0e	               jsr  drawbitmap
.1379	68		out            pla
.137a	20 19 21	               jsr  push
.137d	a2 6b		               ldx  #<blankmsg
.137f	a0 19		               ldy  #>blankmsg
.1381	20 b1 20	               jsr  putscxy
.1384	a2 97		               ldx  #<prompt_msg
.1386	a0 19		               ldy  #>prompt_msg
.1388	20 b1 20	               jsr  putscxy
.138b	20 58 21	               jsr  pop
.138e	60		               rts
.138f			f3action
.138f	48		               pha
.1390	a9 00		               lda  #$0
.1392	8d 09 09	               sta  editmode
.1395	ad 0a 09	               lda  fkeyset
.1398	d0 62		               bne  menub
.139a	08		               php
.139b	48		               pha
.139c	8a		               txa
.139d	48		               pha
.139e	ad 57 1e	               lda  f3abutton
.13a1	48		               pha
.13a2	a9 92		               lda  #146
.13a4	8d 69 1e	               sta  f3abutton+18
.13a7	a9 01		               lda  #flashcol
.13a9	8d 57 1e	               sta  f3abutton
.13ac	a2 57		               ldx  #<f3abutton
.13ae	a0 1e		               ldy  #>f3abutton
.13b0	20 b1 20	               jsr  putscxy
.13b3	20 ce 11	               jsr  delay
.13b6	a9 12		               lda  #18
.13b8	8d 69 1e	               sta  f3abutton+18
.13bb	68		               pla
.13bc	8d 57 1e	               sta  f3abutton
.13bf	a2 57		               ldx  #<f3abutton
.13c1	a0 1e		               ldy  #>f3abutton
.13c3	20 b1 20	               jsr  putscxy
.13c6	68		               pla
.13c7	aa		               tax
.13c8	68		               pla
.13c9	28		               plp
.13ca	20 19 21	               jsr  push
.13cd	a2 6b		               ldx  #<blankmsg
.13cf	a0 19		               ldy  #>blankmsg
.13d1	20 b1 20	               jsr  putscxy
.13d4	a2 f9		               ldx  #<f3a_msg
.13d6	a0 19		               ldy  #>f3a_msg
.13d8	20 b1 20	               jsr  putscxy
.13db	20 58 21	               jsr  pop
.13de	20 39 25	getagain       jsr  getkey
.13e1	c9 31		               cmp  #$31
.13e3	f0 0b		               beq  devok
.13e5	c9 38		               cmp  #$38
.13e7	f0 07		               beq  devok
.13e9	c9 39		               cmp  #$39
.13eb	f0 03		               beq  devok
.13ed	4c de 13	               jmp  getagain
.13f0	8d 29 09	devok          sta  device
.13f3	20 31 09	               jsr  getfname
.13f6	20 b4 08	               jsr  loadfromfile
.13f9	4c 46 14	               jmp  out
.13fc			menub
.13fc	20 19 21	               jsr  push
.13ff	a2 6b		               ldx  #<blankmsg
.1401	a0 19		               ldy  #>blankmsg
.1403	20 b1 20	               jsr  putscxy
.1406	a2 df		               ldx  #<f3b_msg
.1408	a0 1a		               ldy  #>f3b_msg
.140a	20 b1 20	               jsr  putscxy
.140d	20 58 21	               jsr  pop
.1410	08		               php
.1411	48		               pha
.1412	8a		               txa
.1413	48		               pha
.1414	ad 2f 1f	               lda  f3bbutton
.1417	48		               pha
.1418	a9 92		               lda  #146
.141a	8d 41 1f	               sta  f3bbutton+18
.141d	a9 01		               lda  #flashcol
.141f	8d 2f 1f	               sta  f3bbutton
.1422	a2 2f		               ldx  #<f3bbutton
.1424	a0 1f		               ldy  #>f3bbutton
.1426	20 b1 20	               jsr  putscxy
.1429	20 ce 11	               jsr  delay
.142c	a9 12		               lda  #18
.142e	8d 41 1f	               sta  f3bbutton+18
.1431	68		               pla
.1432	8d 2f 1f	               sta  f3bbutton
.1435	a2 2f		               ldx  #<f3bbutton
.1437	a0 1f		               ldy  #>f3bbutton
.1439	20 b1 20	               jsr  putscxy
.143c	68		               pla
.143d	aa		               tax
.143e	68		               pla
.143f	28		               plp
.1440	20 95 18	               jsr  scrollright
.1443	20 ea 0e	               jsr  drawbitmap
.1446	68		out            pla
.1447	20 19 21	               jsr  push
.144a	a2 6b		               ldx  #<blankmsg
.144c	a0 19		               ldy  #>blankmsg
.144e	20 b1 20	               jsr  putscxy
.1451	a2 97		               ldx  #<prompt_msg
.1453	a0 19		               ldy  #>prompt_msg
.1455	20 b1 20	               jsr  putscxy
.1458	20 58 21	               jsr  pop
.145b	60		               rts
.145c			f4action
.145c	48		               pha
.145d	a9 00		               lda  #$0
.145f	8d 09 09	               sta  editmode
.1462	ad 0a 09	               lda  fkeyset
.1465	d0 5b		               bne  menub
.1467	08		               php
.1468	48		               pha
.1469	8a		               txa
.146a	48		               pha
.146b	ad 72 1e	               lda  f4abutton
.146e	48		               pha
.146f	a9 92		               lda  #146
.1471	8d 84 1e	               sta  f4abutton+18
.1474	a9 01		               lda  #flashcol
.1476	8d 72 1e	               sta  f4abutton
.1479	a2 72		               ldx  #<f4abutton
.147b	a0 1e		               ldy  #>f4abutton
.147d	20 b1 20	               jsr  putscxy
.1480	20 ce 11	               jsr  delay
.1483	a9 12		               lda  #18
.1485	8d 84 1e	               sta  f4abutton+18
.1488	68		               pla
.1489	8d 72 1e	               sta  f4abutton
.148c	a2 72		               ldx  #<f4abutton
.148e	a0 1e		               ldy  #>f4abutton
.1490	20 b1 20	               jsr  putscxy
.1493	68		               pla
.1494	aa		               tax
.1495	68		               pla
.1496	28		               plp
.1497	20 19 21	               jsr  push
.149a	a2 6b		               ldx  #<blankmsg
.149c	a0 19		               ldy  #>blankmsg
.149e	20 b1 20	               jsr  putscxy
.14a1	a2 26		               ldx  #<f4a_msg
.14a3	a0 1a		               ldy  #>f4a_msg
.14a5	20 b1 20	               jsr  putscxy
.14a8	20 58 21	               jsr  pop
.14ab	20 39 25	getagain       jsr  getkey
.14ae	c9 43		               cmp  #$43
.14b0	f0 07		               beq  devok
.14b2	c9 44		               cmp  #$44
.14b4	f0 03		               beq  devok
.14b6	4c ab 14	               jmp  getagain
.14b9	8d 29 09	devok          sta  device
.14bc	20 31 09	               jsr  getfname
.14bf	4c 0c 15	               jmp  out
.14c2			menub
.14c2	20 19 21	               jsr  push
.14c5	a2 6b		               ldx  #<blankmsg
.14c7	a0 19		               ldy  #>blankmsg
.14c9	20 b1 20	               jsr  putscxy
.14cc	a2 fb		               ldx  #<f4b_msg
.14ce	a0 1a		               ldy  #>f4b_msg
.14d0	20 b1 20	               jsr  putscxy
.14d3	20 58 21	               jsr  pop
.14d6	08		               php
.14d7	48		               pha
.14d8	8a		               txa
.14d9	48		               pha
.14da	ad 4a 1f	               lda  f4bbutton
.14dd	48		               pha
.14de	a9 92		               lda  #146
.14e0	8d 5c 1f	               sta  f4bbutton+18
.14e3	a9 01		               lda  #flashcol
.14e5	8d 4a 1f	               sta  f4bbutton
.14e8	a2 4a		               ldx  #<f4bbutton
.14ea	a0 1f		               ldy  #>f4bbutton
.14ec	20 b1 20	               jsr  putscxy
.14ef	20 ce 11	               jsr  delay
.14f2	a9 12		               lda  #18
.14f4	8d 5c 1f	               sta  f4bbutton+18
.14f7	68		               pla
.14f8	8d 4a 1f	               sta  f4bbutton
.14fb	a2 4a		               ldx  #<f4bbutton
.14fd	a0 1f		               ldy  #>f4bbutton
.14ff	20 b1 20	               jsr  putscxy
.1502	68		               pla
.1503	aa		               tax
.1504	68		               pla
.1505	28		               plp
.1506	20 ba 18	               jsr  scrollleft
.1509	20 ea 0e	               jsr  drawbitmap
.150c	68		out            pla
.150d	20 19 21	               jsr  push
.1510	a2 6b		               ldx  #<blankmsg
.1512	a0 19		               ldy  #>blankmsg
.1514	20 b1 20	               jsr  putscxy
.1517	a2 97		               ldx  #<prompt_msg
.1519	a0 19		               ldy  #>prompt_msg
.151b	20 b1 20	               jsr  putscxy
.151e	20 58 21	               jsr  pop
.1521	60		               rts
.1522			f5action
.1522	48		               pha
.1523	a9 00		               lda  #$0
.1525	8d 09 09	               sta  editmode
.1528	ad 0a 09	               lda  fkeyset
.152b	d0 4d		               bne  menub
.152d	20 19 21	               jsr  push
.1530	a2 6b		               ldx  #<blankmsg
.1532	a0 19		               ldy  #>blankmsg
.1534	20 b1 20	               jsr  putscxy
.1537	a2 4e		               ldx  #<f5a_msg
.1539	a0 1a		               ldy  #>f5a_msg
.153b	20 b1 20	               jsr  putscxy
.153e	20 58 21	               jsr  pop
.1541	08		               php
.1542	48		               pha
.1543	8a		               txa
.1544	48		               pha
.1545	ad 8d 1e	               lda  f5abutton
.1548	48		               pha
.1549	a9 92		               lda  #146
.154b	8d 9f 1e	               sta  f5abutton+18
.154e	a9 01		               lda  #flashcol
.1550	8d 8d 1e	               sta  f5abutton
.1553	a2 8d		               ldx  #<f5abutton
.1555	a0 1e		               ldy  #>f5abutton
.1557	20 b1 20	               jsr  putscxy
.155a	20 ce 11	               jsr  delay
.155d	a9 12		               lda  #18
.155f	8d 9f 1e	               sta  f5abutton+18
.1562	68		               pla
.1563	8d 8d 1e	               sta  f5abutton
.1566	a2 8d		               ldx  #<f5abutton
.1568	a0 1e		               ldy  #>f5abutton
.156a	20 b1 20	               jsr  putscxy
.156d	68		               pla
.156e	aa		               tax
.156f	68		               pla
.1570	28		               plp
.1571	20 e8 18	               jsr  clearchar
.1574	20 ea 0e	               jsr  drawbitmap
.1577	4c c4 15	               jmp  out
.157a			menub
.157a	20 19 21	               jsr  push
.157d	a2 6b		               ldx  #<blankmsg
.157f	a0 19		               ldy  #>blankmsg
.1581	20 b1 20	               jsr  putscxy
.1584	a2 17		               ldx  #<f5b_msg
.1586	a0 1b		               ldy  #>f5b_msg
.1588	20 b1 20	               jsr  putscxy
.158b	20 58 21	               jsr  pop
.158e	08		               php
.158f	48		               pha
.1590	8a		               txa
.1591	48		               pha
.1592	ad 65 1f	               lda  f5bbutton
.1595	48		               pha
.1596	a9 92		               lda  #146
.1598	8d 77 1f	               sta  f5bbutton+18
.159b	a9 01		               lda  #flashcol
.159d	8d 65 1f	               sta  f5bbutton
.15a0	a2 65		               ldx  #<f5bbutton
.15a2	a0 1f		               ldy  #>f5bbutton
.15a4	20 b1 20	               jsr  putscxy
.15a7	20 ce 11	               jsr  delay
.15aa	a9 12		               lda  #18
.15ac	8d 77 1f	               sta  f5bbutton+18
.15af	68		               pla
.15b0	8d 65 1f	               sta  f5bbutton
.15b3	a2 65		               ldx  #<f5bbutton
.15b5	a0 1f		               ldy  #>f5bbutton
.15b7	20 b1 20	               jsr  putscxy
.15ba	68		               pla
.15bb	aa		               tax
.15bc	68		               pla
.15bd	28		               plp
.15be	20 23 18	               jsr  scrollup
.15c1	20 ea 0e	               jsr  drawbitmap
.15c4	68		out            pla
.15c5	20 19 21	               jsr  push
.15c8	a2 6b		               ldx  #<blankmsg
.15ca	a0 19		               ldy  #>blankmsg
.15cc	20 b1 20	               jsr  putscxy
.15cf	a2 97		               ldx  #<prompt_msg
.15d1	a0 19		               ldy  #>prompt_msg
.15d3	20 b1 20	               jsr  putscxy
.15d6	20 58 21	               jsr  pop
.15d9	60		               rts
.15da			f6action
.15da	48		               pha
.15db	a9 00		               lda  #$0
.15dd	8d 09 09	               sta  editmode
.15e0	ad 0a 09	               lda  fkeyset
.15e3	d0 4d		               bne  menub
.15e5	20 19 21	               jsr  push
.15e8	a2 6b		               ldx  #<blankmsg
.15ea	a0 19		               ldy  #>blankmsg
.15ec	20 b1 20	               jsr  putscxy
.15ef	a2 6a		               ldx  #<f6a_msg
.15f1	a0 1a		               ldy  #>f6a_msg
.15f3	20 b1 20	               jsr  putscxy
.15f6	20 58 21	               jsr  pop
.15f9	08		               php
.15fa	48		               pha
.15fb	8a		               txa
.15fc	48		               pha
.15fd	ad a8 1e	               lda  f6abutton
.1600	48		               pha
.1601	a9 92		               lda  #146
.1603	8d ba 1e	               sta  f6abutton+18
.1606	a9 01		               lda  #flashcol
.1608	8d a8 1e	               sta  f6abutton
.160b	a2 a8		               ldx  #<f6abutton
.160d	a0 1e		               ldy  #>f6abutton
.160f	20 b1 20	               jsr  putscxy
.1612	20 ce 11	               jsr  delay
.1615	a9 12		               lda  #18
.1617	8d ba 1e	               sta  f6abutton+18
.161a	68		               pla
.161b	8d a8 1e	               sta  f6abutton
.161e	a2 a8		               ldx  #<f6abutton
.1620	a0 1e		               ldy  #>f6abutton
.1622	20 b1 20	               jsr  putscxy
.1625	68		               pla
.1626	aa		               tax
.1627	68		               pla
.1628	28		               plp
.1629	20 dc 18	               jsr  fillchar
.162c	20 ea 0e	               jsr  drawbitmap
.162f	4c 7c 16	               jmp  out
.1632			menub
.1632	20 19 21	               jsr  push
.1635	a2 6b		               ldx  #<blankmsg
.1637	a0 19		               ldy  #>blankmsg
.1639	20 b1 20	               jsr  putscxy
.163c	a2 31		               ldx  #<f6b_msg
.163e	a0 1b		               ldy  #>f6b_msg
.1640	20 b1 20	               jsr  putscxy
.1643	20 58 21	               jsr  pop
.1646	08		               php
.1647	48		               pha
.1648	8a		               txa
.1649	48		               pha
.164a	ad 80 1f	               lda  f6bbutton
.164d	48		               pha
.164e	a9 92		               lda  #146
.1650	8d 92 1f	               sta  f6bbutton+18
.1653	a9 01		               lda  #flashcol
.1655	8d 80 1f	               sta  f6bbutton
.1658	a2 80		               ldx  #<f6bbutton
.165a	a0 1f		               ldy  #>f6bbutton
.165c	20 b1 20	               jsr  putscxy
.165f	20 ce 11	               jsr  delay
.1662	a9 12		               lda  #18
.1664	8d 92 1f	               sta  f6bbutton+18
.1667	68		               pla
.1668	8d 80 1f	               sta  f6bbutton
.166b	a2 80		               ldx  #<f6bbutton
.166d	a0 1f		               ldy  #>f6bbutton
.166f	20 b1 20	               jsr  putscxy
.1672	68		               pla
.1673	aa		               tax
.1674	68		               pla
.1675	28		               plp
.1676	20 5b 18	               jsr  scrolldown
.1679	20 ea 0e	               jsr  drawbitmap
.167c	68		out            pla
.167d	20 19 21	               jsr  push
.1680	a2 6b		               ldx  #<blankmsg
.1682	a0 19		               ldy  #>blankmsg
.1684	20 b1 20	               jsr  putscxy
.1687	a2 97		               ldx  #<prompt_msg
.1689	a0 19		               ldy  #>prompt_msg
.168b	20 b1 20	               jsr  putscxy
.168e	20 58 21	               jsr  pop
.1691	60		               rts
.1692			f7action
.1692	48		               pha
.1693	a9 00		               lda  #$0
.1695	8d 09 09	               sta  editmode
.1698	ad 0a 09	               lda  fkeyset
.169b	d0 4d		               bne  menub
.169d	20 19 21	               jsr  push
.16a0	a2 6b		               ldx  #<blankmsg
.16a2	a0 19		               ldy  #>blankmsg
.16a4	20 b1 20	               jsr  putscxy
.16a7	a2 87		               ldx  #<f7a_msg
.16a9	a0 1a		               ldy  #>f7a_msg
.16ab	20 b1 20	               jsr  putscxy
.16ae	20 58 21	               jsr  pop
.16b1	08		               php
.16b2	48		               pha
.16b3	8a		               txa
.16b4	48		               pha
.16b5	ad c3 1e	               lda  f7abutton
.16b8	48		               pha
.16b9	a9 92		               lda  #146
.16bb	8d d5 1e	               sta  f7abutton+18
.16be	a9 01		               lda  #flashcol
.16c0	8d c3 1e	               sta  f7abutton
.16c3	a2 c3		               ldx  #<f7abutton
.16c5	a0 1e		               ldy  #>f7abutton
.16c7	20 b1 20	               jsr  putscxy
.16ca	20 ce 11	               jsr  delay
.16cd	a9 12		               lda  #18
.16cf	8d d5 1e	               sta  f7abutton+18
.16d2	68		               pla
.16d3	8d c3 1e	               sta  f7abutton
.16d6	a2 c3		               ldx  #<f7abutton
.16d8	a0 1e		               ldy  #>f7abutton
.16da	20 b1 20	               jsr  putscxy
.16dd	68		               pla
.16de	aa		               tax
.16df	68		               pla
.16e0	28		               plp
.16e1	20 bd 0f	               jsr  copycharset
.16e4	20 ea 0e	               jsr  drawbitmap
.16e7	4c 39 17	               jmp  out
.16ea	a9 00		menub          lda  #$0
.16ec	8d 09 09	               sta  editmode
.16ef	20 19 21	               jsr  push
.16f2	a2 6b		               ldx  #<blankmsg
.16f4	a0 19		               ldy  #>blankmsg
.16f6	20 b1 20	               jsr  putscxy
.16f9	a2 4a		               ldx  #<f7b_msg
.16fb	a0 1b		               ldy  #>f7b_msg
.16fd	20 b1 20	               jsr  putscxy
.1700	20 58 21	               jsr  pop
.1703	08		               php
.1704	48		               pha
.1705	8a		               txa
.1706	48		               pha
.1707	ad 9b 1f	               lda  f7bbutton
.170a	48		               pha
.170b	a9 92		               lda  #146
.170d	8d ad 1f	               sta  f7bbutton+18
.1710	a9 01		               lda  #flashcol
.1712	8d 9b 1f	               sta  f7bbutton
.1715	a2 9b		               ldx  #<f7bbutton
.1717	a0 1f		               ldy  #>f7bbutton
.1719	20 b1 20	               jsr  putscxy
.171c	20 ce 11	               jsr  delay
.171f	a9 12		               lda  #18
.1721	8d ad 1f	               sta  f7bbutton+18
.1724	68		               pla
.1725	8d 9b 1f	               sta  f7bbutton
.1728	a2 9b		               ldx  #<f7bbutton
.172a	a0 1f		               ldy  #>f7bbutton
.172c	20 b1 20	               jsr  putscxy
.172f	68		               pla
.1730	aa		               tax
.1731	68		               pla
.1732	28		               plp
.1733	20 03 18	               jsr  reverse
.1736	20 ea 0e	               jsr  drawbitmap
.1739	68		out            pla
.173a	20 19 21	               jsr  push
.173d	a2 6b		               ldx  #<blankmsg
.173f	a0 19		               ldy  #>blankmsg
.1741	20 b1 20	               jsr  putscxy
.1744	a2 97		               ldx  #<prompt_msg
.1746	a0 19		               ldy  #>prompt_msg
.1748	20 b1 20	               jsr  putscxy
.174b	20 58 21	               jsr  pop
.174e	60		               rts
.174f			f8action
.174f	48		               pha
.1750	a9 00		               lda  #$0
.1752	8d 09 09	               sta  editmode
.1755	ad 0a 09	               lda  fkeyset
.1758	d0 47		               bne  menub
.175a	20 19 21	               jsr  push
.175d	a2 6b		               ldx  #<blankmsg
.175f	a0 19		               ldy  #>blankmsg
.1761	20 b1 20	               jsr  putscxy
.1764	a2 86		               ldx  #<menub_msg
.1766	a0 1b		               ldy  #>menub_msg
.1768	20 b1 20	               jsr  putscxy
.176b	20 58 21	               jsr  pop
.176e	08		               php
.176f	48		               pha
.1770	8a		               txa
.1771	48		               pha
.1772	ad de 1e	               lda  f8abutton
.1775	48		               pha
.1776	a9 92		               lda  #146
.1778	8d f0 1e	               sta  f8abutton+18
.177b	a9 01		               lda  #flashcol
.177d	8d de 1e	               sta  f8abutton
.1780	a2 de		               ldx  #<f8abutton
.1782	a0 1e		               ldy  #>f8abutton
.1784	20 b1 20	               jsr  putscxy
.1787	20 ce 11	               jsr  delay
.178a	a9 12		               lda  #18
.178c	8d f0 1e	               sta  f8abutton+18
.178f	68		               pla
.1790	8d de 1e	               sta  f8abutton
.1793	a2 de		               ldx  #<f8abutton
.1795	a0 1e		               ldy  #>f8abutton
.1797	20 b1 20	               jsr  putscxy
.179a	68		               pla
.179b	aa		               tax
.179c	68		               pla
.179d	28		               plp
.179e	4c e5 17	               jmp  swapit
.17a1			menub
.17a1	20 19 21	               jsr  push
.17a4	a2 6b		               ldx  #<blankmsg
.17a6	a0 19		               ldy  #>blankmsg
.17a8	20 b1 20	               jsr  putscxy
.17ab	a2 61		               ldx  #<menua_msg
.17ad	a0 1b		               ldy  #>menua_msg
.17af	20 b1 20	               jsr  putscxy
.17b2	20 58 21	               jsr  pop
.17b5	08		               php
.17b6	48		               pha
.17b7	8a		               txa
.17b8	48		               pha
.17b9	ad b6 1f	               lda  f8bbutton
.17bc	48		               pha
.17bd	a9 92		               lda  #146
.17bf	8d c8 1f	               sta  f8bbutton+18
.17c2	a9 01		               lda  #flashcol
.17c4	8d b6 1f	               sta  f8bbutton
.17c7	a2 b6		               ldx  #<f8bbutton
.17c9	a0 1f		               ldy  #>f8bbutton
.17cb	20 b1 20	               jsr  putscxy
.17ce	20 ce 11	               jsr  delay
.17d1	a9 12		               lda  #18
.17d3	8d c8 1f	               sta  f8bbutton+18
.17d6	68		               pla
.17d7	8d b6 1f	               sta  f8bbutton
.17da	a2 b6		               ldx  #<f8bbutton
.17dc	a0 1f		               ldy  #>f8bbutton
.17de	20 b1 20	               jsr  putscxy
.17e1	68		               pla
.17e2	aa		               tax
.17e3	68		               pla
.17e4	28		               plp
.17e5	49 ff		swapit         eor  #$ff
.17e7	8d 0a 09	               sta  fkeyset
.17ea	20 54 10	               jsr  drawfkeys
.17ed	68		               pla
.17ee	20 19 21	               jsr  push
.17f1	a2 6b		               ldx  #<blankmsg
.17f3	a0 19		               ldy  #>blankmsg
.17f5	20 b1 20	               jsr  putscxy
.17f8	a2 97		               ldx  #<prompt_msg
.17fa	a0 19		               ldy  #>prompt_msg
.17fc	20 b1 20	               jsr  putscxy
.17ff	20 58 21	               jsr  pop
.1802	60		               rts
.1803			reverse
.1803	20 19 21	               jsr  push
.1806	48		               pha
.1807	ad 0f 09	               lda  mapaddr
.180a	85 fd		               sta  $fd
.180c	ad 10 09	               lda  mapaddr+1
.180f	85 fe		               sta  $fe
.1811	68		               pla
.1812	a0 00		               ldy  #$00
.1814	b1 fd		again          lda  (zpage2),y
.1816	49 ff		               eor  #$ff
.1818	91 fd		               sta  (zpage2),y
.181a	c8		               iny
.181b	c0 08		               cpy  #$08
.181d	d0 f5		               bne  again
.181f	20 58 21	               jsr  pop
.1822	60		               rts
.1823			scrollup
.1823	20 19 21	               jsr  push
.1826	48		               pha
.1827	ad 0f 09	               lda  mapaddr
.182a	85 fb		               sta  $fb
.182c	ad 10 09	               lda  mapaddr+1
.182f	85 fc		               sta  $fc
.1831	68		               pla
.1832	48		               pha
.1833	ad 0f 09	               lda  mapaddr
.1836	85 fd		               sta  $fd
.1838	ad 10 09	               lda  mapaddr+1
.183b	85 fe		               sta  $fe
.183d	68		               pla
.183e	20 38 22	               jsr  inczp2
.1841	a0 00		               ldy  #$00
.1843	b1 fb		               lda  (zpage1),y
.1845	8d 5a 18	               sta  tmpbyte
.1848	b1 fd		again          lda  (zpage2),y
.184a	91 fb		               sta  (zpage1),y
.184c	c8		               iny
.184d	c0 07		               cpy  #$07
.184f	d0 f7		               bne  again
.1851	ad 5a 18	               lda  tmpbyte
.1854	91 fb		               sta  (zpage1),y
.1856	20 58 21	               jsr  pop
.1859	60		               rts
>185a	00		tmpbyte        .byte     $00
.185b			scrolldown
.185b	20 19 21	               jsr  push
.185e	48		               pha
.185f	ad 0f 09	               lda  mapaddr
.1862	85 fb		               sta  $fb
.1864	ad 10 09	               lda  mapaddr+1
.1867	85 fc		               sta  $fc
.1869	68		               pla
.186a	48		               pha
.186b	ad 0f 09	               lda  mapaddr
.186e	85 fd		               sta  $fd
.1870	ad 10 09	               lda  mapaddr+1
.1873	85 fe		               sta  $fe
.1875	68		               pla
.1876	20 38 22	               jsr  inczp2
.1879	a0 07		               ldy  #$07                ;xxxxxxxx zpage1
.187b	b1 fb		               lda  (zpage1),y          ;xxxxxxxx zpage2
.187d	8d 94 18	               sta  tmpbyte             ;xxxxxxxx
.1880	88		again          dey                      ;xxxxxxxx
.1881	b1 fb		               lda  (zpage1),y          ;xxxxxxxx
.1883	91 fd		               sta  (zpage2),y          ;xxxxxxxx
.1885	c0 00		               cpy  #$00                ;xxxxxxxx
.1887	d0 f7		               bne  again               ;xxxxxxxx
.1889	a0 00		               ldy  #$00
.188b	ad 94 18	               lda  tmpbyte
.188e	91 fb		               sta  (zpage1),y
.1890	20 58 21	               jsr  pop
.1893	60		               rts
>1894	00		tmpbyte        .byte     $00
.1895			scrollright
.1895	20 19 21	               jsr  push
.1898	48		               pha
.1899	ad 0f 09	               lda  mapaddr
.189c	85 fb		               sta  $fb
.189e	ad 10 09	               lda  mapaddr+1
.18a1	85 fc		               sta  $fc
.18a3	68		               pla
.18a4	a0 00		               ldy  #$00
.18a6	b1 fb		again          lda  (zpage1),y
.18a8	18		               clc
.18a9	6a		               ror
.18aa	90 03		               bcc  zero
.18ac	18		               clc
.18ad	69 80		one            adc  #$80
.18af	91 fb		zero           sta  (zpage1),y
.18b1	c8		               iny
.18b2	c0 08		               cpy  #$08
.18b4	d0 f0		               bne  again
.18b6	20 58 21	               jsr  pop
.18b9	60		               rts
.18ba			scrollleft
.18ba	20 19 21	               jsr  push
.18bd	48		               pha
.18be	ad 0f 09	               lda  mapaddr
.18c1	85 fb		               sta  $fb
.18c3	ad 10 09	               lda  mapaddr+1
.18c6	85 fc		               sta  $fc
.18c8	68		               pla
.18c9	a0 00		               ldy  #$00
.18cb	b1 fb		again          lda  (zpage1),y
.18cd	18		               clc
.18ce	2a		               rol
.18cf	69 00		               adc  #$00
.18d1	91 fb		               sta  (zpage1),y
.18d3	c8		               iny
.18d4	c0 08		               cpy  #$08
.18d6	d0 f3		               bne  again
.18d8	20 58 21	               jsr  pop
.18db	60		               rts
.18dc			fillchar
.18dc	20 19 21	               jsr  push
.18df	a9 ff		               lda  #$ff
.18e1	20 f4 18	               jsr  allsame
.18e4	20 58 21	               jsr  pop
.18e7	60		               rts
.18e8			clearchar
.18e8	20 19 21	               jsr  push
.18eb	a9 00		               lda  #$00
.18ed	20 f4 18	               jsr  allsame
.18f0	20 58 21	               jsr  pop
.18f3	60		               rts
.18f4			allsame
.18f4	48		               pha
.18f5	ad 0f 09	               lda  mapaddr
.18f8	85 fd		               sta  $fd
.18fa	ad 10 09	               lda  mapaddr+1
.18fd	85 fe		               sta  $fe
.18ff	68		               pla
.1900	a0 00		               ldy  #$00
.1902	91 fd		again          sta  (zpage2),y
.1904	c8		               iny
.1905	c0 08		               cpy  #$08
.1907	d0 f9		               bne  again
.1909	60		               rts
.190a			fliphorz
.190a	20 19 21	               jsr  push
.190d	48		               pha
.190e	ad 0f 09	               lda  mapaddr
.1911	85 fd		               sta  $fd
.1913	ad 10 09	               lda  mapaddr+1
.1916	85 fe		               sta  $fe
.1918	68		               pla
.1919	a0 00		               ldy  #$00
.191b	b1 fd		nextbyte       lda  (zpage2),y
.191d	a2 00		               ldx  #$00
.191f	2a		rolagain       rol
.1920	6e 36 19	               ror  tmpbyte
.1923	e8		               inx
.1924	e0 08		               cpx  #$08
.1926	30 f7		               bmi  rolagain
.1928	ad 36 19	               lda  tmpbyte
.192b	91 fd		               sta  (zpage2),y
.192d	c8		               iny
.192e	c0 08		               cpy  #$08
.1930	30 e9		               bmi  nextbyte
.1932	20 58 21	               jsr  pop
.1935	60		               rts
>1936	00		tmpbyte        .byte     $00
.1937			flipvert
.1937	20 19 21	               jsr  push
.193a	48		               pha
.193b	ad 0f 09	               lda  mapaddr
.193e	85 fd		               sta  $fd
.1940	ad 10 09	               lda  mapaddr+1
.1943	85 fe		               sta  $fe
.1945	68		               pla
.1946	a0 00		               ldy  #$00
.1948	b1 fd		tostack        lda  (zpage2),y
.194a	48		               pha
.194b	c8		               iny
.194c	c0 08		               cpy  #$08
.194e	d0 f8		               bne  tostack
.1950	a0 00		               ldy  #$00
.1952	68		fromstack      pla
.1953	91 fd		               sta  (zpage2),y
.1955	c8		               iny
.1956	c0 08		               cpy  #$08
.1958	d0 f8		               bne  fromstack
.195a	20 58 21	               jsr  pop
.195d	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: messages_fr.asm

>195e	0a 01 05	editor_msg     .byte vrose,1,5
>1961	5b 45 44 49	               .null     "[editeur]"
>1965	54 45 55 52 5d 00
>196b	03 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>196f	20 20 20 20	               .null     "                                       "
>1973	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1983	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1993	20 20 20 00
>1997	03 00 05 92	prompt_msg     .byte     mesgcol,0,5,146
>199b	20 55 54 49	               .null     " utilisez les clefs de fonction :"
>199f	4c 49 53 45 5a 20 4c 45 53 20 43 4c 45 46 53 20
>19af	44 45 20 46 4f 4e 43 54 49 4f 4e 20 3a 00
.19bd			f1a_msg
>19bd	03 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>19c1	20 4d 4f 44	               .null     " mode edit: chr$(   )",146
>19c5	45 20 45 44 49 54 3a 20 43 48 52 24 28 20 20 20
>19d5	29 92 00
.19d8			f2a_msg
>19d8	03 00 05	copy_msg       .byte     mesgcol,0,5
>19db	20 45 4e 54	               .null     " entez le character a copier:"
>19df	45 5a 20 4c 45 20 43 48 41 52 41 43 54 45 52 20
>19ef	41 20 43 4f 50 49 45 52 3a 00
.19f9			f3a_msg
>19f9	03 00 05 92	save_msg       .byte     mesgcol,0,5,146
>19fd	20 53 41 55	               .null     " sauvegarder sur quel lecteur? (1/8/9): "
>1a01	56 45 47 41 52 44 45 52 20 53 55 52 20 51 55 45
>1a11	4c 20 4c 45 43 54 45 55 52 3f 20 28 31 2f 38 2f
>1a21	39 29 3a 20 00
.1a26			f4a_msg
>1a26	03 00 05 92	load_msg       .byte     mesgcol,0,5,146
>1a2a	20 43 48 41	               .null     " charger de quel lecteur? (1,8,9): "
>1a2e	52 47 45 52 20 44 45 20 51 55 45 4c 20 4c 45 43
>1a3e	54 45 55 52 3f 20 28 31 2c 38 2c 39 29 3a 20 00
.1a4e			f5a_msg
>1a4e	03 00 05	clear_msg      .byte     mesgcol,0,5
>1a51	20 45 46 46	               .null     " effacer char: chr$(   )"
>1a55	41 43 45 52 20 43 48 41 52 3a 20 43 48 52 24 28
>1a65	20 20 20 29 00
.1a6a			f6a_msg
>1a6a	03 00 05	fill_msg       .byte     mesgcol,0,5
>1a6d	20 52 45 4d	               .null     " remplir char:  chr$(   )"
>1a71	50 4c 49 52 20 43 48 41 52 3a 20 20 43 48 52 24
>1a81	28 20 20 20 29 00
.1a87			f7a_msg
>1a87	03 00 05	work_msg       .byte     mesgcol,0,5
>1a8a	20 52 45 43	               .null     " recuperer les caracteres."
>1a8e	55 50 45 52 45 52 20 4c 45 53 20 43 41 52 41 43
>1a9e	54 45 52 45 53 2e 00
.1aa5			f1b_msg
>1aa5	03 00 05	invr_msg       .byte     mesgcol,0,5
>1aa8	20 42 41 53	               .null     " basculer verticalement:"
>1aac	43 55 4c 45 52 20 56 45 52 54 49 43 41 4c 45 4d
>1abc	45 4e 54 3a 00
.1ac1			f2b_msg
>1ac1	03 00 05	flip_msg       .byte     mesgcol,0,5
>1ac4	20 42 41 53	               .null     " basculer horizontalement:"
>1ac8	43 55 4c 45 52 20 48 4f 52 49 5a 4f 4e 54 41 4c
>1ad8	45 4d 45 4e 54 3a 00
.1adf			f3b_msg
>1adf	03 00 05	scrollr_msg    .byte     mesgcol,0,5
>1ae2	20 44 45 46	               .null     " defiler vers la droite:"
>1ae6	49 4c 45 52 20 56 45 52 53 20 4c 41 20 44 52 4f
>1af6	49 54 45 3a 00
.1afb			f4b_msg
>1afb	03 00 05	scrolll_msg    .byte     mesgcol,0,5
>1afe	20 44 45 46	               .null     " defiler vers la gauche:"
>1b02	49 4c 45 52 20 56 45 52 53 20 4c 41 20 47 41 55
>1b12	43 48 45 3a 00
.1b17			f5b_msg
>1b17	03 00 05	scrollu_msg    .byte     mesgcol,0,5
>1b1a	20 44 45 46	               .null     " defiler vers le haut:"
>1b1e	49 4c 45 52 20 56 45 52 53 20 4c 45 20 48 41 55
>1b2e	54 3a 00
.1b31			f6b_msg
>1b31	03 00 05	scrolld_msg    .byte     mesgcol,0,5
>1b34	20 44 45 46	               .null     " defiler vers le bas:"
>1b38	49 4c 45 52 20 56 45 52 53 20 4c 45 20 42 41 53
>1b48	3a 00
.1b4a			f7b_msg
>1b4a	03 00 05	rvrs_msg       .byte     mesgcol,0,5
>1b4d	20 52 45 56	               .null     " reverse character:"
>1b51	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
>1b61	03 00 05	menua_msg      .byte     mesgcol,0,5
>1b64	20 56 4f 55	               .null     " vous etes dirige vers le menu 1."
>1b68	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1b78	52 53 20 4c 45 20 4d 45 4e 55 20 31 2e 00
>1b86	03 00 05	menub_msg      .byte     mesgcol,0,5
>1b89	20 56 4f 55	               .null     " vous etes dirige vers le menu 2."
>1b8d	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1b9d	52 53 20 4c 45 20 4d 45 4e 55 20 32 2e 00
>1bab	07 00 05	copychar_msg   .byte     vjaune,0,5
>1bae	20 45 4e 54	               .null     " entrez le caractera a copier (?).",157,157,157
>1bb2	52 45 5a 20 4c 45 20 43 41 52 41 43 54 45 52 41
>1bc2	20 41 20 43 4f 50 49 45 52 20 28 3f 29 2e 9d 9d
>1bd2	9d 00
>1bd4	07 00 05	fname_msg      .byte     vjaune,0,5
>1bd7	20 4e 4f 4d	               .null     " nom du fichier (6 lettres): ",$a4,$a4,$a4,$a4,$a4,$a4,".chr",157,157,157,157,157,157,157,157,157,157
>1bdb	20 44 55 20 46 49 43 48 49 45 52 20 28 36 20 4c
>1beb	45 54 54 52 45 53 29 3a 20 a4 a4 a4 a4 a4 a4 2e
>1bfb	43 48 52 9d 9d 9d 9d 9d 9d 9d 9d 9d 9d 00
>1c09	0e 15 18 12	quit_msg       .byte     vblue1,21,24,18
>1c0d	43 54 52 4c	               .text     "ctrl-x",146
>1c11	2d 58 92
>1c14	2d 51 55 49	               .null     "-quitter."
>1c18	54 54 45 52 2e 00
.1c1e			menu_msg
>1c1e	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>1c22	43 54 52 4c	               .text     "ctrl-x",146
>1c26	2d 58 92
>1c29	20 41 55 20	               .null     " au menu."
>1c2d	4d 45 4e 55 2e 00
>1c33	07 04 06 12	whoami0        .byte     whoamicol,4,6,18
>1c37	20 20 20 20	               .null     "                               ",146
>1c3b	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1c4b	20 20 20 20 20 20 20 20 20 20 20 92 00
>1c58	07 04 07 12	whoami1        .byte     whoamicol,4,7,18
>1c5c	20 20 20 20	               .null     "       ",146," c h a r e d i t ",18,"       ",146
>1c60	20 20 20 92 20 43 20 48 20 41 20 52 20 45 20 44
>1c70	20 49 20 54 20 12 20 20 20 20 20 20 20 92 00
>1c7f	07 04 08 12	whoami2        .byte     whoamicol,4,8,18
>1c83	20 20 20 20	               .null     "                               ",146
>1c87	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1c97	20 20 20 20 20 20 20 20 20 20 20 92 00
>1ca4	07 04 09 12	whoami3        .byte     whoamicol,4,9,18
>1ca8	20 20 20 20	               .null     "    inspire de john heilborn   ",146
>1cac	49 4e 53 50 49 52 45 20 44 45 20 4a 4f 48 4e 20
>1cbc	48 45 49 4c 42 4f 52 4e 20 20 20 92 00
>1cc9	07 04 0a 12	whoami4        .byte     whoamicol,4,10,18
>1ccd	20 20 20 20	               .null     "      isbn: 0-942386-29-9      ",146
>1cd1	20 20 49 53 42 4e 3a 20 30 2d 39 34 32 33 38 36
>1ce1	2d 32 39 2d 39 20 20 20 20 20 20 92 00
>1cee	07 04 0b 12	whoami5        .byte     whoamicol,4,11,18
>1cf2	20 20 20 20	               .null     "                               ",146
>1cf6	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1d06	20 20 20 20 20 20 20 20 20 20 20 92 00
>1d13	07 04 0c 12	whoami6        .byte     whoamicol,4,12,18
>1d17	20 20 20 20	               .null     "     code en assembleur par    ",146
>1d1b	20 43 4f 44 45 20 45 4e 20 41 53 53 45 4d 42 4c
>1d2b	45 55 52 20 50 41 52 20 20 20 20 92 00
>1d38	07 04 0d 12	whoami7        .byte     whoamicol,4,13,18
>1d3c	20 44 41 4e	               .null     " daniel lafrance quebec/canada ",146
>1d40	49 45 4c 20 4c 41 46 52 41 4e 43 45 20 51 55 45
>1d50	42 45 43 2f 43 41 4e 41 44 41 20 92 00
>1d5d	07 04 0e 12	whoami8        .byte     whoamicol,4,14,18
>1d61	20 20 20 20	               .null     "    version:",version,"    ",146
>1d65	56 45 52 53 49 4f 4e 3a 32 30 32 33 31 31 31 36
>1d75	2d 31 30 30 34 30 30 20 20 20 20 92 00
>1d82	07 04 0f 12	whoami9        .byte     whoamicol,4,15,18
>1d86	20 20 20 20	               .null     "                               ",146
>1d8a	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1d9a	20 20 20 20 20 20 20 20 20 20 20 92 00
>1da7	03 06 10 14	bye_msg        .byte     vcyan,6,16,20
>1dab	20 20 20 20	               .null     "      bonjour et merci      ",146
>1daf	20 20 42 4f 4e 4a 4f 55 52 20 45 54 20 4d 45 52
>1dbf	43 49 20 20 20 20 20 20 92 00
>1dc9	0d 05 18 12	any_msg        .byte     vvert1,5,24,18
>1dcd	20 41 50 50	               .null     " appuyez une cle pour basic ",146
>1dd1	55 59 45 5a 20 55 4e 45 20 43 4c 45 20 50 4f 55
>1de1	52 20 42 41 53 49 43 20 92 00
>1deb	03 12 07	titremenu1     .byte     menu1col1,fkeyleft,f1top-2       ;133
>1dee	12 20 4a 45	               .null     18," jeu de fonctions #1 ",146
>1df2	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>1e02	31 20 92 00
>1e06	0f 12 07	titremenu2     .byte     menu2col1,fkeyleft,f1top-2       ;133
>1e09	12 20 4a 45	               .null     18," jeu de fonctions #2 ",146
>1e0d	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>1e1d	32 20 92 00
>1e21	03 12 09	f1abutton      .byte     menu1col1,fkeyleft,f1top       ;133
>1e24	45 44 49 54	               .text     "editer carac..."
>1e28	45 52 20 43 41 52 41 43 2e 2e 2e
>1e33	12		               .byte     18             ; position 15
>1e34	a9 20 46 31	               .null     $a9," f1 ",223,146
>1e38	20 df 92 00
>1e3c	0e 12 0a	f2abutton      .byte     menu1col2,fkeyleft,f1top+1     ;138
>1e3f	43 4f 50 49	               .text     "copier un carac"
>1e43	45 52 20 55 4e 20 43 41 52 41 43
>1e4e	12		               .byte     18   ; position 15
>1e4f	20 20 46 32	               .null     "  f2  ",146
>1e53	20 20 92 00
>1e57	03 12 0c	f3abutton      .byte     menu1col1,fkeyleft,f1top+3     ;137
>1e5a	53 41 56 45	               .text     "savegarder sur."
>1e5e	47 41 52 44 45 52 20 53 55 52 2e
>1e69	12		               .byte     18            ; position 15
>1e6a	a9 20 46 33	               .null     $a9," f3 ",223,146
>1e6e	20 df 92 00
>1e72	0e 12 0d	f4abutton      .byte     menu1col2,fkeyleft,f1top+4     ;134
>1e75	43 48 41 52	               .text     "charger de....."
>1e79	47 45 52 20 44 45 2e 2e 2e 2e 2e
>1e84	12		               .byte     18             ; position 15
>1e85	20 20 46 34	               .null     "  f4  ",146
>1e89	20 20 92 00
>1e8d	03 12 0f	f5abutton      .byte     menu1col1,fkeyleft,f1top+6     ;135
>1e90	4d 45 54 54	               .text     "mettre tout a 0"
>1e94	52 45 20 54 4f 55 54 20 41 20 30
>1e9f	12		               .byte     18             ; position 15
>1ea0	a9 20 46 35	               .null     $a9," f5 ",223,146
>1ea4	20 df 92 00
>1ea8	0e 12 10	f6abutton      .byte     menu1col2,fkeyleft,f1top+7    ;139
>1eab	4d 45 54 54	               .text     "mettre tout a 1"
>1eaf	52 45 20 54 4f 55 54 20 41 20 31
>1eba	12		               .byte     18             ; position 15
>1ebb	20 20 46 36	               .null     "  f6  ",146
>1ebf	20 20 92 00
>1ec3	03 12 12	f7abutton      .byte     menu1col1,fkeyleft,f1top+9    ;136
>1ec6	52 45 43 55	               .text     "recuperer rom.."
>1eca	50 45 52 45 52 20 52 4f 4d 2e 2e
>1ed5	12		               .byte     18             ; position 15
>1ed6	a9 20 46 37	               .null     $a9," f7 ",223,146
>1eda	20 df 92 00
>1ede	0e 12 13	f8abutton      .byte     menu1col2,fkeyleft,f1top+10
>1ee1	41 4c 4c 45	               .text     "aller au menu2."
>1ee5	52 20 41 55 20 4d 45 4e 55 32 2e
>1ef0	12		               .byte     18             ; position 15
>1ef1	20 20 46 38	               .null     "  f8  ", 146
>1ef5	20 20 92 00
>1ef9	0f 12 09	f1bbutton      .byte     menu2col1,fkeyleft,f1top
>1efc	42 41 53 43	               .text     "basculer vert.."
>1f00	55 4c 45 52 20 56 45 52 54 2e 2e
>1f0b	12		               .byte     18             ; position 15
>1f0c	a9 20 46 31	               .null     $a9," f1 ",223,146
>1f10	20 df 92 00
>1f14	0c 12 0a	f2bbutton      .byte     menu2col2,fkeyleft,f1top+1
>1f17	42 41 53 43	               .text     "basculer horz.."
>1f1b	55 4c 45 52 20 48 4f 52 5a 2e 2e
>1f26	12		               .byte     18             ; position 15
>1f27	20 20 46 32	               .null     "  f2  ",146
>1f2b	20 20 92 00
>1f2f	0f 12 0c	f3bbutton      .byte     menu2col1,fkeyleft,f1top+3
>1f32	44 45 46 49	               .text     "defiler droite."
>1f36	4c 45 52 20 44 52 4f 49 54 45 2e
>1f41	12		               .byte     18             ; position 15
>1f42	a9 20 46 33	               .null     $a9," f3 ",223,146
>1f46	20 df 92 00
>1f4a	0c 12 0d	f4bbutton      .byte     menu2col2,fkeyleft,f1top+4
>1f4d	44 45 46 49	               .text     "defiler gauche."
>1f51	4c 45 52 20 47 41 55 43 48 45 2e
>1f5c	12		               .byte     18             ; position 15
>1f5d	20 20 46 34	               .null     "  f4  ",146
>1f61	20 20 92 00
>1f65	0f 12 0f	f5bbutton      .byte     menu2col1,fkeyleft,f1top+6
>1f68	44 45 46 49	               .text     "defiler haut..."
>1f6c	4c 45 52 20 48 41 55 54 2e 2e 2e
>1f77	12		               .byte     18             ; position 15
>1f78	a9 20 46 35	               .null     $a9," f5 ",223,146
>1f7c	20 df 92 00
>1f80	0c 12 10	f6bbutton      .byte     menu2col2,fkeyleft,f1top+7
>1f83	44 45 46 49	               .text     "defiler bas...."
>1f87	4c 45 52 20 42 41 53 2e 2e 2e 2e
>1f92	12		               .byte     18             ; position 15
>1f93	20 20 46 36	               .null     "  f6  ",146
>1f97	20 20 92 00
>1f9b	0f 12 12	f7bbutton      .byte     menu2col1,fkeyleft,f1top+9
>1f9e	49 4e 56 45	               .text     "inverser bits.."
>1fa2	52 53 45 52 20 42 49 54 53 2e 2e
>1fad	12		               .byte     18             ; position 15
>1fae	a9 20 46 37	               .null     $a9," f7 ",223,146
>1fb2	20 df 92 00
>1fb6	0c 12 13	f8bbutton      .byte     menu2col2,fkeyleft,f1top+10
>1fb9	41 4c 4c 45	               .text     "aller au menu1."
>1fbd	52 20 41 55 20 4d 45 4e 55 31 2e
>1fc8	12		               .byte     18             ; position 15
>1fc9	20 20 46 38	               .null     "  f8  ", 146
>1fcd	20 20 92 00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.1fd1			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.1fd1			screendis
.1fd1	08		               php
.1fd2	48		               pha
.1fd3	ad 11 d0	               lda  $d011
.1fd6	29 ef		               and  #%11101111
.1fd8	8d 11 d0	               sta  $d011
.1fdb	68		               pla
.1fdc	28		               plp
.1fdd	60		               rts
.1fde			screenena
.1fde	08		               php
.1fdf	48		               pha
.1fe0	ad 11 d0	               lda  $d011
.1fe3	09 10		               ora  #%00010000
.1fe5	8d 11 d0	               sta  $d011
.1fe8	68		               pla
.1fe9	28		               plp
.1fea	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.1feb			scrmaninit
.1feb	20 19 21	               jsr  push
.1fee	a9 06		               lda  #vbleu
.1ff0	8d 21 d0	               sta  vicbackcol
.1ff3	a9 05		               lda  #vvert
.1ff5	8d 20 d0	               sta  vicbordcol
.1ff8	a9 01		               lda  #vblanc
.1ffa	8d 86 02	               sta  bascol
.1ffd	ad 00 04	               lda  scrnram
.2000	8d 00 04	               sta  scrnram
.2003	20 0b 20	               jsr  cls
.2006	20 58 21	               jsr  pop
.2009	60		               rts
>200a	8e		characterset   .byte b_uppercase
.200b			cls
.200b	08		               php
.200c	48		               pha
.200d	a9 93		               lda  #$93
.200f	20 22 20	               jsr  putch
.2012	68		               pla
.2013	28		               plp
.2014	60		               rts
.2015			putnch
.2015	08		               php
.2016	e0 00		               cpx  #$00
.2018	f0 06		               beq  out
.201a	20 d2 ff	again          jsr  $ffd2
.201d	ca		               dex
.201e	d0 fa		               bne  again
.2020	28		out            plp
.2021	60		               rts
.2022			putch
.2022	08		               php
.2023	20 d2 ff	               jsr  $ffd2
.2026	28		               plp
.2027	60		               rts
.2028			puts
.2028	20 19 21	               jsr  push
.202b	86 fb		               stx  zpage1
.202d	84 fc		               sty  zpage1+1
.202f	a0 00		               ldy  #0
.2031	b1 fb		next           lda  (zpage1),y
.2033	f0 09		               beq  exit
.2035	20 22 20	               jsr  putch
.2038	20 20 22	               jsr  inczp1
.203b	4c 31 20	               jmp  next
.203e	20 58 21	exit           jsr  pop
.2041	60		               rts
.2042			gotoxy
.2042	08		               php
.2043	18		               clc
.2044	8a		               txa
.2045	48		               pha
.2046	98		               tya
.2047	aa		               tax
.2048	68		               pla
.2049	a8		               tay
.204a	20 f0 ff	               jsr  kplot
.204d	28		               plp
.204e	60		               rts
.204f			cursor
=$0286			bascol    =    $0286
.204f	08		               php
.2050	48		               pha
.2051	90 12		               bcc  restore
.2053	20 f0 ff	               jsr  kplot
.2056	8c 77 20	               sty  cx
.2059	8e 78 20	               stx  cy
.205c	ad 86 02	               lda  bascol
.205f	8d 79 20	               sta  bcol
.2062	4c 74 20	               jmp  out
.2065	ae 78 20	restore        ldx  cy
.2068	ac 77 20	               ldy  cx
.206b	20 f0 ff	               jsr  kplot
.206e	ad 79 20	               lda  bcol
.2071	8d 86 02	               sta  bascol
.2074	68		out            pla
.2075	28		               plp
.2076	60		               rts
>2077	00		cx   .byte     $00
>2078	00		cy   .byte     $00
>2079	00		bcol .byte     $00
.207a			cursave
.207a	08		               php
.207b	38		               sec
.207c	20 4f 20	               jsr  cursor
.207f	28		               plp
.2080	60		               rts
.2081			curput
.2081	08		               php
.2082	18		               clc
.2083	20 4f 20	               jsr  cursor
.2086	28		               plp
.2087	60		               rts
.2088			putsxy
.2088	20 19 21	               jsr  push
.208b	86 fb		               stx  zpage1
.208d	84 fc		               sty  zpage1+1
.208f	a0 00		               ldy  #$00
.2091	b1 fb		               lda  (zpage1),y
.2093	aa		               tax
.2094	20 20 22	               jsr  inczp1
.2097	b1 fb		               lda  (zpage1),y
.2099	a8		               tay
.209a	20 42 20	               jsr  gotoxy
.209d	20 20 22	               jsr  inczp1
.20a0	a6 fb		               ldx  zpage1
.20a2	a4 fc		               ldy  zpage1+1
.20a4	20 28 20	               jsr  puts
.20a7	20 58 21	               jsr  pop
.20aa	60		               rts
>20ab	00 00		straddr   .word     $00
>20ad	00		px        .byte     $00
>20ae	00		py        .byte     $00
>20af	00 00		zp1       .word     $00
.20b1			putscxy
.20b1	20 19 21	               jsr  push
.20b4	84 fc		               sty  zpage1+1
.20b6	86 fb		               stx  zpage1
.20b8	ad 86 02	               lda  bascol
.20bb	8d db 20	               sta  bc
.20be	a0 00		               ldy #$00
.20c0	b1 fb		               lda  (zpage1),y
.20c2	8d 86 02	               sta  bascol
.20c5	20 20 22	               jsr  inczp1
.20c8	a6 fb		               ldx  zpage1
.20ca	a4 fc		               ldy  zpage1+1
.20cc	20 88 20	               jsr  putsxy
.20cf	ad db 20	               lda  bc
.20d2	8d 86 02	               sta  bascol
.20d5	20 58 21	               jsr  pop
.20d8	60		               rts
>20d9	00 00		straddr  .word      $00
>20db	00		bc       .byte      $00
>20dc	00 00		zp1      .word      $00
.20de			putrahex
.20de	08		               php
.20df	48		               pha
.20e0	20 36 23	               jsr  a2hex
.20e3	a9 d5		               lda  #<a2hexstr
.20e5	a0 22		               ldy  #>a2hexstr
.20e7	20 28 20	               jsr  puts
.20ea	68		               pla
.20eb	28		               plp
.20ec	60		               rts
.20ed			kputrahexxy
.20ed			bputrahexxy
.20ed			putrahexxy
.20ed	08		               php
.20ee	20 36 23	               jsr  a2hex
.20f1	a9 d2		               lda  #<a2hexpos
.20f3	a0 22		               ldy  #>a2hexpos
.20f5	20 88 20	               jsr  putsxy
.20f8	68		               pla
.20f9	28		               plp
.20fa	60		               rts
.20fb			putrahexcxy
.20fb	08		               php
.20fc	20 36 23	               jsr  a2hex
.20ff	a9 d2		               lda  #<a2hexpos
.2101	a0 22		               ldy  #>a2hexpos
.2103	20 b1 20	               jsr  putscxy
.2106	68		               pla
.2107	28		               plp
.2108	60		               rts
.2109			setinverse
.2109	48		               pha
.210a	a9 12		               lda  #$12
.210c	20 d2 ff	               jsr  $ffd2
.210f	68		               pla
.2110	60		               rts
.2111			clrinverse
.2111	48		               pha
.2112	a9 92		               lda  #$92
.2114	20 d2 ff	               jsr  $ffd2
.2117	68		               pla
.2118	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.2119			push
.2119	08		          php            ; stack : flg, pcl, pch
.211a	78		          sei
.211b	8d 55 21	          sta  ra        ; save a
.211e	68		          pla            ; stack : pcl, pch
.211f	8d 54 21	          sta  rp        ; save rp
.2122	68		          pla            ; stack : pch
.2123	8d 56 21	          sta  pc        ; save pcl
.2126	68		          pla            ; stack : -
.2127	8d 57 21	          sta  pc+1      ; save pch
.212a	a5 fb		          lda  zpage1    ; get zpage1 low byte
.212c	48		          pha            ; stack : zp1l
.212d	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.212f	48		          pha            ; stack : zp1h, zp1l
.2130	a5 fd		          lda  zpage2    ; get zpage2 low byte
.2132	48		          pha            ; stack : zp2l, zp1h, zp1l
.2133	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.2135	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.2136	ad 54 21	          lda  rp        ; get rp
.2139	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.213a	ad 55 21	          lda  ra        ; get a
.213d	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.213e	8a		          txa            ; get x
.213f	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.2140	98		          tya            ; get y
.2141	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2142	ad 57 21	          lda  pc+1      ; get pch
.2145	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2146	ad 56 21	          lda  pc        ; get pcl
.2149	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.214a	ad 54 21	          lda  rp        ; get rp
.214d	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.214e	ad 55 21	          lda  ra        ; get a
.2151	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2152	58		          cli
.2153	60		          rts
>2154	00		rp        .byte     0
>2155	00		ra        .byte     0
>2156	00 00		pc        .word     0
.2158			pull
.2158			pop
.2158	78		          sei
.2159	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.215a	8d 8d 21	          sta  pc        ; save pcl
.215d	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.215e	8d 8e 21	          sta  pc+1      ; save pch
.2161	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.2162	a8		          tay            ; set y
.2163	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.2164	aa		          tax            ; set x
.2165	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.2166	8d 8c 21	          sta  ra        ; save a
.2169	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.216a	8d 8b 21	          sta  rp        ; save rp
.216d	68		          pla            ; stack : zp2l, zp1h, zp1l
.216e	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.2170	68		          pla            ; stack : zp1h, zp1l
.2171	85 fd		          sta  zpage2    ; get zpage2 High byte
.2173	68		          pla            ; stack : zp1l
.2174	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.2176	68		          pla            ; stack :
.2177	85 fb		          sta  zpage1    ; get zpage1 High byte
.2179	ad 8e 21	          lda  pc+1      ; get pch
.217c	48		          pha            ; stack : pch
.217d	ad 8d 21	          lda  pc
.2180	48		          pha            ; stack : pcl, pch
.2181	ad 8b 21	          lda  rp        ; get rp
.2184	48		          pha            ; stack : rp, pcl, pch
.2185	ad 8c 21	          lda  ra        ; set ra
.2188	58		          cli
.2189	28		          plp            ; stack : pcl, pch
.218a	60		          rts
>218b	00		rp        .byte     0
>218c	00		ra        .byte     0
>218d	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.218f			blkfill
.218f	20 19 21	bf0            jsr  push
.2192	20 50 22	               jsr  savezp1
.2195	84 fc		               sty  zpage1+1
.2197	a0 00		               ldy  #$00
.2199	84 fb		               sty  zpage1
.219b	91 fb		bf1            sta  (zpage1),y
.219d	c8		               iny
.219e	d0 fb		               bne  bf1
.21a0	20 5f 22	               jsr  restzp1
.21a3	20 58 21	               jsr  pop
.21a6	60		               rts
.21a7			memfill
.21a7	20 19 21	               jsr  push
.21aa	20 8f 21	mf1            jsr  blkfill
.21ad	c8		               iny
.21ae	ca		               dex
.21af	d0 f9		               bne  mf1
.21b1	20 58 21	               jsr  pop
.21b4	60		               rts
.21b5			memmove
.21b5	20 19 21	               jsr  push
.21b8	ba		               tsx            ; On se crée un pointeur ...
.21b9	8a		               txa
.21ba	18		               clc
.21bb	69 0b		               adc  #11
.21bd	a8		               tay
.21be	a2 06		               ldx  #$06
.21c0	b9 00 01	nextbyte       lda  $0100,y
.21c3	99 0f 22	               sta  words,y
.21c6	c8		               iny
.21c7	ca		               dex
.21c8	d0 f6		               bne  nextbyte
.21ca	ad 0f 22	               lda  s
.21cd	8d e6 21	               sta  source+1
.21d0	ad 10 22	               lda  s+1
.21d3	8d e7 21	               sta  source+2
.21d6	ad 11 22	               lda  d
.21d9	8d e3 21	               sta  destin+1
.21dc	ad 12 22	               lda  d+1
.21df	8d e4 21	               sta  destin+2
.21e2	ad ff ff	destin         lda  $ffff
.21e5	8d ff ff	source         sta  $ffff
.21e8	ee e3 21	               inc  destin+1
.21eb	d0 03		               bne  src
.21ed	ee e4 21	               inc  destin+2
.21f0	ee e6 21	src            inc  source+1
.21f3	d0 03		               bne  cnt
.21f5	ee e7 21	               inc  source+2
.21f8	ad 13 22	cnt            lda  compte
.21fb	d0 08		               bne  decit
.21fd	ad 14 22	               lda  compte+1
.2200	f0 09		               beq  fini
.2202	ce 14 22	               dec  compte+1
.2205	ce 13 22	decit          dec  compte
.2208	4c e2 21	               jmp  destin
.220b	20 58 21	fini           jsr  pop
.220e	60		               rts
.220f			words
>220f	00 00		s         .word     $0000
>2211	00 00		d         .word     $0000
>2213	00 00		compte    .word     $0000
.2215			decword
.2215	20 19 21	               jsr  push
.2218	86 fd		               stx  zpage2
.221a	84 fe		               sty  zpage2+1
.221c	20 58 21	               jsr  pop
.221f	60		               rts
.2220			inczp1
.2220	08		               php
.2221	48		               pha
.2222	e6 fb		               inc  zpage1
.2224	a5 fb		               lda  zpage1
.2226	d0 02		               bne  nopage
.2228	e6 fc		               inc  zpage1+1
.222a	68		nopage         pla
.222b	28		               plp
.222c	60		               rts
.222d			deczp1
.222d	08		                php
.222e	48		                pha
.222f	c6 fb		                dec  zpage1
.2231	d0 02		                bne  nopage
.2233	c6 fc		                dec  zpage1+1
.2235	68		nopage          pla
.2236	28		                plp
.2237	60		                rts
.2238			inczp2
.2238	08		               php
.2239	48		               pha
.223a	e6 fd		               inc  zpage2
.223c	a5 fd		               lda  zpage2
.223e	d0 02		               bne  nopage
.2240	e6 fe		               inc  zpage2+1
.2242	68		nopage         pla
.2243	28		               plp
.2244	60		               rts
.2245			deczp2
.2245	08		               php
.2246	48		               pha
.2247	a5 fd		               lda  zpage2
.2249	d0 02		               bne  nopage
.224b	c6 fe		               dec  zpage2+1
.224d	68		nopage         pla
.224e	28		               plp
.224f	60		               rts
.2250			savezp1
.2250	08		               php
.2251	48		               pha
.2252	a5 fb		               lda  zpage1
.2254	8d cc 22	               sta  zp1
.2257	a5 fc		               lda  zpage1+1
.2259	8d cd 22	               sta  zp1+1
.225c	68		               pla
.225d	28		               plp
.225e	60		               rts
.225f			restzp1
.225f	08		               php
.2260	48		               pha
.2261	ad cc 22	               lda zp1
.2264	85 fb		               sta zpage1
.2266	ad cd 22	               lda zp1+1
.2269	85 fc		               sta zpage1+1
.226b	68		               pla
.226c	28		               plp
.226d	60		               rts
.226e			savezp2
.226e	08		         php
.226f	48		         pha
.2270	a5 fd		         lda zpage2
.2272	8d ce 22	         sta zp2
.2275	a5 fe		         lda zpage2+1
.2277	8d cf 22	         sta zp2+1
.227a	68		         pla
.227b	28		         plp
.227c	60		         rts
.227d			restzp2
.227d	08		                php
.227e	48		                pha
.227f	ad ce 22	                lda  zp2
.2282	85 fd		                sta  zpage2
.2284	ad cf 22	                lda  zp2+1
.2287	85 fe		                sta  zpage2+1
.2289	68		                pla
.228a	28		                plp
.228b	60		                rts
.228c			xy2addr
.228c	08		                php
.228d	48		                pha
.228e	8a		                txa
.228f	48		                pha
.2290	98		                tya
.2291	48		                pha
.2292	ad c7 22	                lda     addr1+1
.2295	8d c9 22	                sta     addr2+1
.2298	ad c6 22	                lda     addr1
.229b	8d c8 22	                sta     addr2
.229e	c0 00		                cpy     #$00
.22a0	f0 0f		                beq     addx
.22a2	18		moreline        clc
.22a3	6d c5 22	                adc     ymult
.22a6	90 03		                bcc     norepy
.22a8	ee c9 22	                inc     addr2+1
.22ab	8d c8 22	norepy          sta     addr2
.22ae	88		                dey
.22af	d0 f1		                bne     moreline
.22b1	8a		addx            txa
.22b2	18		                clc
.22b3	6d c8 22	                adc     addr2
.22b6	90 03		                bcc     thatsit
.22b8	ee c9 22	                inc     addr2+1
.22bb	8d c8 22	thatsit         sta     addr2
.22be	68		                pla
.22bf	a8		                tay
.22c0	68		                pla
.22c1	aa		                tax
.22c2	68		                pla
.22c3	28		                plp
.22c4	60		                rts
>22c5	28		ymult          .byte     40
>22c6	00 00		addr1          .word     $0000
>22c8	00 00		addr2          .word     $0000
>22ca	00 00		bytecnt        .word     $0000
>22cc	00 00		zp1        .word   $0000
>22ce	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>22d0	01		a2hexcol       .byte     1              ; pour aputscxy
>22d1	00		a2hexbkcol     .byte     %00000000
.22d2			a2hexpos
>22d2	00		a2hexpx        .byte     0              ; pour aputsxy
>22d3	00		a2hexpy        .byte     0
>22d4	24		a2hexprefix    .byte     "$"            ; pour aputs
>22d5	00 00		a2hexstr       .word     $00
>22d7	00 00		               .word     $00
>22d9	00		               .byte     0              ; 0 end string
>22da	30 30 30 30	abin           .null     "00000000"
>22de	30 30 30 30 00
>22e3	20 20 20 00	adec           .null     "   "
.22e7			putahexfmtxy
.22e7	20 19 21	               jsr  push
.22ea	20 36 23	               jsr  a2hex
.22ed	ae d2 22	               ldx  a2hexpx
.22f0	ac d3 22	               ldy  a2hexpy
.22f3	20 42 20	               jsr  gotoxy
.22f6	a2 d4		               ldx  #<a2hexprefix
.22f8	a0 22		               ldy  #>a2hexprefix
.22fa	20 28 20	               jsr  puts
.22fd	20 58 21	               jsr  pop
.2300	60		               rts
.2301			putahexfmt
.2301	20 19 21	               jsr  push
.2304	20 36 23	               jsr  a2hex
.2307	a2 d4		               ldx  #<a2hexprefix
.2309	a0 22		               ldy  #>a2hexprefix
.230b	20 28 20	               jsr  puts
.230e	20 58 21	               jsr  pop
.2311	60		               rts
.2312			putahex
.2312	20 19 21	               jsr  push
.2315	20 36 23	               jsr  a2hex
.2318	a2 d5		               ldx  #<a2hexstr
.231a	a0 22		               ldy  #>a2hexstr
.231c	20 28 20	               jsr  puts
.231f	20 58 21	               jsr  pop
.2322	60		               rts
.2323			nib2hex
.2323	08		               php
.2324	29 0f		               and  #$0f
.2326	f8		               sed
.2327	18		               clc
.2328	69 90		               adc  #$90
.232a	69 40		               adc  #$40
.232c	d8		               cld
.232d	28		               plp
.232e	60		               rts
.232f			lsra4bits
.232f	08		               php
.2330	4a		               lsr
.2331	4a		               lsr
.2332	4a		               lsr
.2333	4a		               lsr
.2334	28		               plp
.2335	60		               rts
.2336			a2hex
.2336	08		               php
.2337	48		               pha
.2338	48		               pha
.2339	20 2f 23	               jsr  lsra4bits
.233c	20 23 23	               jsr  nib2hex
.233f	8d d5 22	               sta  a2hexstr
.2342	68		               pla
.2343	20 23 23	               jsr  nib2hex
.2346	8d d6 22	               sta  a2hexstr+1
.2349	a9 00		               lda  #$00                ; set end of string
.234b	8d d7 22	               sta  a2hexstr+2
.234e	68		               pla
.234f	28		               plp
.2350	60		               rts
.2351			xy2hex
.2351	20 19 21	               jsr  push
.2354	20 36 23	               jsr  a2hex
.2357	8a		               txa
.2358	48		               pha
.2359	20 2f 23	               jsr  lsra4bits
.235c	20 23 23	               jsr  nib2hex
.235f	8d d5 22	               sta  a2hexstr
.2362	68		               pla
.2363	20 23 23	               jsr  nib2hex
.2366	8d d6 22	               sta  a2hexstr+1
.2369	98		               tya
.236a	48		               pha
.236b	20 2f 23	               jsr  lsra4bits
.236e	20 23 23	               jsr  nib2hex
.2371	8d d7 22	               sta  a2hexstr+2
.2374	68		               pla
.2375	20 23 23	               jsr  nib2hex
.2378	8d d8 22	               sta  a2hexstr+3
.237b	a9 00		               lda  #$00                ; 0 ended string
.237d	8d d9 22	               sta  a2hexstr+4
.2380	20 58 21	               jsr  pop
.2383			atobin
.2383	20 19 21	               jsr  push
.2386	a2 08		               ldx  #8
.2388	a0 00		               ldy  #0
.238a	18		               clc
.238b	2a		nextbit        rol
.238c	48		               pha
.238d	69 00		               adc  #$00
.238f	29 01		               and  #$01
.2391	20 23 23	               jsr  nib2hex
.2394	99 da 22	               sta  abin,y
.2397	68		               pla
.2398	c8		               iny
.2399	ca		               dex
.239a	d0 ef		               bne  nextbit
.239c	a9 00		               lda  #0
.239e	99 da 22	               sta  abin,y
.23a1	20 58 21	               jsr  pull
.23a4	60		               rts
.23a5			putabin
.23a5	20 83 23	               jsr     atobin
.23a8	20 19 21	               jsr     push
.23ab	a2 da		               ldx     #<abin
.23ad	a0 22		               ldy     #>abin
.23af	20 28 20	               jsr     puts
.23b2	20 58 21	               jsr     pop
.23b5	60		               rts
.23b6			printabin
.23b6	20 19 21	               jsr     push
.23b9	a2 da		               ldx     #<abin
.23bb	a0 22		               ldy     #>abin
.23bd	20 28 20	               jsr     puts
.23c0	20 58 21	               jsr     pop
.23c3	60		               rts
.23c4			putabinfmt
.23c4	08		               php
.23c5	48		               pha
.23c6	a9 25		               lda     #"%"
.23c8	20 22 20	               jsr     putch
.23cb	68		               pla
.23cc	20 a5 23	               jsr     putabin
.23cf	28		               plp
.23d0	60		               rts
.23d1			putabinxy
.23d1	20 42 20	               jsr     gotoxy
.23d4	20 a5 23	               jsr     putabin
.23d7	60		               rts
.23d8			putabinfmtxy
.23d8	20 42 20	               jsr     gotoxy
.23db	20 c4 23	               jsr     putabinfmt
.23de	60		               rts
.23df			atodec
.23df	20 19 21	               jsr  push
.23e2	f8		               sed
.23e3	aa		               tax
.23e4	a0 00		               ldy  #$00
.23e6	a9 00		               lda  #$00
.23e8	18		nextbit        clc
.23e9	69 01		               adc  #$01
.23eb	90 01		               bcc  decx
.23ed	c8		               iny
.23ee	ca		decx           dex
.23ef	d0 f7		               bne  nextbit
.23f1	48		               pha
.23f2	98		               tya
.23f3	20 23 23	               jsr  nib2hex
.23f6	8d e3 22	               sta  adec
.23f9	68		               pla
.23fa	48		               pha
.23fb	20 23 23	               jsr  nib2hex
.23fe	8d e5 22	               sta  adec+2
.2401	68		               pla
.2402	6a		               ror
.2403	6a		               ror
.2404	6a		               ror
.2405	6a		               ror
.2406	20 23 23	               jsr  nib2hex
.2409	8d e4 22	               sta  adec+1
.240c	d8		               cld
.240d	20 58 21	               jsr  pull
.2410	60		               rts
>2411	00 00 00	buffer         .byte     0,0,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>2414	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>2418	00 00 00 00 00 00 00 00 00 0d 00 00
>2424	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>2428	00 00 00 00 00 00 00 00 00 00 00 00
>2434	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>2438	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>2444	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>2448	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>2454	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>2458	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>2464	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>2468	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>2474	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>2478	00 00 00 00 00 00 00 00 00 00 00 00
>2484	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>2488	00 00 00 00 00 00 00 00 00 00 00 00
>2494	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>2498	00 00 00 00 00 00 00 00 00 00 00 00
>24a4	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>24a8	00 00 00 00 00 00 00 00 00 00 00 00
>24b4	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>24b8	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>24c4	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>24c8	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>24d4	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>24d8	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>24e4	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>24e8	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>24f4	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>24f8	00 00 00 00 00 00 00 00 00 00 00 00
>2504	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>2508	00 00 00 00 00 00 00 00 00 00 00 00
.2514			waitstop
.2514	20 19 21	               jsr  push
.2517	20 ed f6	wait           jsr  k_stop
.251a	d0 fb		               bne  wait
.251c	20 58 21	               jsr  pop
.251f	60		               rts
.2520			anykey
.2520	08		               php
.2521	48		               pha
.2522	a5 cb		nokey          lda 203
.2524	c9 40		               cmp #64
.2526	f0 fa		               beq nokey
.2528	20 2e 25	               jsr releasekey
.252b	68		               pla
.252c	28		               plp
.252d	60		               rts
.252e			releasekey
.252e	08		               php
.252f	48		               pha
.2530	a5 cb		keypressed     lda 203
.2532	c9 40		               cmp #64
.2534	d0 fa		               bne keypressed
.2536	68		               pla
.2537	28		               plp
.2538	60		               rts
.2539			getkey
.2539	20 e4 ff	again          jsr  getin
.253c	c9 00		               cmp  #0
.253e	f0 f9		               beq  again
.2540	60		               rts
.2541			waitkey
.2541	20 19 21	               jsr  push
.2544	8d 92 25	               sta  thekey
.2547	20 e4 ff	nope           jsr  getin
.254a	20 d2 ff	               jsr  chrout
.254d	cd 92 25	               cmp  thekey
.2550	d0 f5		               bne  nope
.2552	20 d2 ff	               jsr  chrout
.2555	20 58 21	               jsr  pop
.2558	60		               rts
.2559			waitspace
.2559	20 19 21	               jsr  push
.255c	a9 7f		wait           lda  #$7f  ;%01111111
.255e	8d 00 dc	               sta  $dc00
.2561	ad 01 dc	               lda  $dc01
.2564	29 10		               and  #$10  ;mask %00010000
.2566	d0 f4		               bne  wait
.2568	20 58 21	               jsr  pop
.256b			waitsstop
.256b	20 19 21	               jsr  push
.256e	20 ed f6	wait           jsr  k_stop  ;%01111111
.2571	d0 fb		               bne  wait
.2573	20 58 21	               jsr  pop
.2576			waitreturn
.2576	20 19 21	               jsr  push
.2579	ad 93 25	               lda  thecount
.257c	8d 00 04	               sta  scrnram
.257f	a9 02		               lda  #$02
.2581	8d 00 d8	               sta  colorram
.2584	20 e4 ff	nope           jsr  getin
.2587	c9 0d		nohex          cmp  #$0d
.2589	d0 f9		               bne  nope
.258b	ee 93 25	               inc  thecount
.258e	20 58 21	               jsr  pop
.2591	60		               rts
>2592	00		thekey         .byte   0
>2593	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-disk.asm

.2594			diskerror
.2594	20 19 21	               jsr  push
.2597	ad c5 26	               lda  dsk_dev   ; Select device 8
.259a	85 ba		               sta  $ba       ;
.259c	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.259f	a9 6f		               lda  #$6f
.25a1	85 b9		               sta  $b9       ;
.25a3	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.25a6	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.25a9	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.25ac	c9 0d		               cmp  #$0d      ; Is it CR ?
.25ae	d0 f6		               bne  nextchar  ; No, get next char
.25b0	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.25b3	20 58 21	               jsr  pop
.25b6	60		               rts
.25b7			diskdir
.25b7	20 19 21	               jsr  push
.25ba	a9 24		               lda  #$24      ; L012C - Filename is "$"
.25bc	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.25be	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.25c0	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.25c2	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.25c4	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.25c6	a9 01		               lda  #$01      ; L0138 - set ...
.25c8	85 b7		               sta  $b7       ; L013A - ... length of current filename
.25ca	ad c5 26	               lda  dsk_dev   ; L013C - set 8 as ...
.25cd	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.25cf	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.25d1	85 b9		               sta  $b9       ; L0142 - ... secondary address
.25d3	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.25d6	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...%10111010
.25d8	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.25db	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.25dd	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.25e0	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.25e2	85 90		               sta  $90       ; L0153 - ... kernal status word.
.25e4	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.25e6	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.25e8	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.25eb	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.25ed	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.25ef	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.25f1	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.25f4	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.25f6	d0 28		               bne  exit      ; L0167
.25f8	a4 fb		               ldy  $fb       ; L0169
.25fa	88		               dey            ; L016b
.25fb	d0 e9		               bne  loop1     ; L016C - If not last, loop
.25fd	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.25ff	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.2602	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.2604	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.2607	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.260a	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.260c	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.260e	aa		               tax            ; L017F - tfr a in x
.260f	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.2611	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.2614	4c 07 26	               jmp  loop3     ; L0185 - get another byte
.2617	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.2619	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.261c	a0 02		               ldy  #$02      ; L018D - set Y to 2
.261e	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.2620	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.2623	20 58 21	               jsr  pop
.2626	60		               rts            ; L0194
.2627			directory
.2627	20 b7 25	               jsr  diskdir
.262a	20 94 25	               jsr  diskerror
.262d	60		               rts
.262e			memtofile
.262e	20 9f 26	               jsr  dsk_putmesg
.2631	20 19 21	               jsr  push
.2634	ad c9 26	               lda  dsk_fnlen
.2637	ae c7 26	               ldx  dsk_fnptr      ; load fname addr. lbyte
.263a	ac c8 26	               ldy  dsk_fnptr+1
.263d	20 bd ff	               jsr  setnam         ; call setnam
.2640	ad c6 26	               lda  dsk_lfsno
.2643	ae c5 26	               ldx  dsk_dev        ; specified device
.2646	a0 00		skip           ldy  #$00
.2648	20 ba ff	               jsr  setlfs         ; call setlfs
.264b	ad c1 26	               lda  dsk_data_s     ; put data start lbyte in stal
.264e	85 c1		               sta  stal
.2650	ad c2 26	               lda  dsk_data_s+1   ; put data start hbyte in stal
.2653	85 c2		               sta  stal+1
.2655	ae c3 26	               ldx  dsk_data_e     ; put data end lbyte in x
.2658	ac c4 26	               ldy  dsk_data_e+1   ; put data end hbyte in y
.265b	a9 c1		               lda  #stal          ; start address located in $c1/$c2
.265d	20 d8 ff	               jsr  save           ; call save
.2660	90 00		               bcc  noerror        ; if carry set, a load error has happened
.2662	20 58 21	noerror        jsr  pop
.2665	60		               rts
.2666			filetomem
.2666	20 19 21	               jsr push
.2669	ad c9 26	               lda dsk_fnlen
.266c	ae c7 26	               ldx dsk_fnptr
.266f	ac c8 26	               ldy dsk_fnptr+1
.2672	20 bd ff	               jsr setnam     ; call setnam
.2675	ad c6 26	               lda dsk_lfsno
.2678	ae c5 26	               ldx dsk_dev    ; default to device 8
.267b	a0 01		               ldy #$01       ; not $01 means: load to address stored in file
.267d	20 ba ff	               jsr setlfs     ; call setlfs
.2680	a9 00		               lda #$00       ; $00 means: load to memory (not verify)
.2682	20 d5 ff	               jsr load       ; call load
.2685	90 03		               bcc noerror      ; if carry set, a load error has happened
.2687	20 8e 26	               jsr  error
.268a	20 58 21	noerror        jsr pop
.268d	60		               rts
.268e			error
.268e	60		               rts
.268f	a2 da		error1         ldx  #<dsk_emsg1
.2691	a0 26		               ldy  #>dsk_emsg1
.2693	20 28 20	               jsr  puts
.2696	60		               rts
.2697	a2 ee		error2         ldx #<dsk_emsg2
.2699	a0 26		               ldy #>dsk_emsg2
.269b	20 28 20	               jsr puts
.269e	60		               rts
.269f			dsk_putmesg
.269f	20 19 21	               jsr push
.26a2	a2 ca		               ldx #<dsk_msg0
.26a4	a0 26		               ldy #>dsk_msg0
.26a6	20 28 20	               jsr puts
.26a9	a9 20		               lda #$20
.26ab	20 22 20	               jsr putch
.26ae	ae c7 26	               ldx dsk_fnptr
.26b1	ac c8 26	               ldy dsk_fnptr+1
.26b4	20 28 20	               jsr puts
.26b7	ad c6 26	               lda dsk_lfsno
.26ba	20 c3 ff	               jsr close
.26bd	20 58 21	               jsr pop
.26c0	60		               rts
>26c1	00 00		dsk_data_s     .word     $0000    ; example addresses
>26c3	00 20		dsk_data_e     .word     $2000
>26c5	08		dsk_dev        .byte     $08
>26c6	00		dsk_lfsno      .byte     $00
>26c7	00 00		dsk_fnptr      .word     $00
>26c9	00		dsk_fnlen      .byte     0
>26ca	8d		dsk_msg0       .byte     141
>26cb	53 41 56 49	               .null     "saving"
>26cf	4e 47 00
>26d2	8d		dsk_msg1       .byte     141
>26d3	53 55 43 43	               .null     "succes"
>26d7	45 53 00
>26da	8d		dsk_emsg1      .byte     141
>26db	46 49 43 48	               .null     "fichier non ouvert"
>26df	49 45 52 20 4e 4f 4e 20 4f 55 56 45 52 54 00
>26ee	11		dsk_emsg2      .byte     17
>26ef	45 52 52 45	               .null     "erreur d'ecriture"
>26f3	55 52 20 44 27 45 43 52 49 54 55 52 45 00

;******  Return to file: charedit.asm


;******  End of listing

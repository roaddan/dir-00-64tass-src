
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Fri Nov  3 23:48:12 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

.080d			main
.080d	20 38 0f	               jsr push
.0810	20 e9 0d	               jsr screendis
.0813	20 03 0e	               jsr scrmaninit
.0816	20 04 09	               jsr staticscreen
.0819	20 f6 0d	               jsr screenena
.081c	8a		               txa
.081d	48		               pha
.081e	98		               tya
.081f	48		               pha
.0820	a2 7b		               ldx  #<blankmsg
.0822	a0 0a		               ldy  #>blankmsg
.0824	20 d0 0e	               jsr  putscxy
.0827	a2 a6		               ldx  #<edit_msg
.0829	a0 0a		               ldy  #>edit_msg
.082b	20 d0 0e	               jsr  putscxy
.082e	68		               pla
.082f	a8		               tay
.0830	68		               pla
.0831	aa		               tax
.0832	20 f4 11	               jsr  anykey
.0835	8a		               txa
.0836	48		               pha
.0837	98		               tya
.0838	48		               pha
.0839	a2 7b		               ldx  #<blankmsg
.083b	a0 0a		               ldy  #>blankmsg
.083d	20 d0 0e	               jsr  putscxy
.0840	a2 c2		               ldx  #<save_msg
.0842	a0 0a		               ldy  #>save_msg
.0844	20 d0 0e	               jsr  putscxy
.0847	68		               pla
.0848	a8		               tay
.0849	68		               pla
.084a	aa		               tax
.084b	20 f4 11	               jsr  anykey
.084e	8a		               txa
.084f	48		               pha
.0850	98		               tya
.0851	48		               pha
.0852	a2 7b		               ldx  #<blankmsg
.0854	a0 0a		               ldy  #>blankmsg
.0856	20 d0 0e	               jsr  putscxy
.0859	a2 74		               ldx  #<rvrs_msg
.085b	a0 0b		               ldy  #>rvrs_msg
.085d	20 d0 0e	               jsr  putscxy
.0860	68		               pla
.0861	a8		               tay
.0862	68		               pla
.0863	aa		               tax
.0864	20 f4 11	               jsr  anykey
.0867	a9 ff		               lda  #$ff
.0869	8d fc 08	               sta  fkeyset
.086c	20 38 09	               jsr  showfkeys
.086f	20 f4 11	               jsr  anykey
.0872	08		               php
.0873	48		               pha
.0874	8a		               txa
.0875	48		               pha
.0876	ad cf 0d	               lda  f8bbutton
.0879	48		               pha
.087a	a9 92		               lda  #146
.087c	8d de 0d	               sta  f8bbutton+15
.087f	a9 0d		               lda  #vvert1
.0881	8d cf 0d	               sta  f8bbutton
.0884	a2 cf		               ldx  #<f8bbutton
.0886	a0 0d		               ldy  #>f8bbutton
.0888	20 d0 0e	               jsr  putscxy
.088b	20 66 0a	               jsr  delay
.088e	a9 12		               lda  #18
.0890	8d de 0d	               sta  f8bbutton+15
.0893	68		               pla
.0894	8d cf 0d	               sta  f8bbutton
.0897	a2 cf		               ldx  #<f8bbutton
.0899	a0 0d		               ldy  #>f8bbutton
.089b	20 d0 0e	               jsr  putscxy
.089e	68		               pla
.089f	aa		               tax
.08a0	68		               pla
.08a1	28		               plp
.08a2	20 f4 11	               jsr  anykey
.08a5	ad fc 08	               lda  fkeyset
.08a8	49 ff		               eor  #$ff
.08aa	8d fc 08	               sta  fkeyset
.08ad	20 38 09	               jsr  showfkeys
.08b0	20 f4 11	               jsr  anykey
.08b3	08		               php
.08b4	48		               pha
.08b5	8a		               txa
.08b6	48		               pha
.08b7	ad 97 0c	               lda  f4abutton
.08ba	48		               pha
.08bb	a9 92		               lda  #146
.08bd	8d a6 0c	               sta  f4abutton+15
.08c0	a9 0d		               lda  #vvert1
.08c2	8d 97 0c	               sta  f4abutton
.08c5	a2 97		               ldx  #<f4abutton
.08c7	a0 0c		               ldy  #>f4abutton
.08c9	20 d0 0e	               jsr  putscxy
.08cc	20 66 0a	               jsr  delay
.08cf	a9 12		               lda  #18
.08d1	8d a6 0c	               sta  f4abutton+15
.08d4	68		               pla
.08d5	8d 97 0c	               sta  f4abutton
.08d8	a2 97		               ldx  #<f4abutton
.08da	a0 0c		               ldy  #>f4abutton
.08dc	20 d0 0e	               jsr  putscxy
.08df	68		               pla
.08e0	aa		               tax
.08e1	68		               pla
.08e2	28		               plp
.08e3	8a		               txa
.08e4	48		               pha
.08e5	98		               tya
.08e6	48		               pha
.08e7	a2 00		               ldx  #0
.08e9	a0 14		               ldy  #20
.08eb	20 61 0e	               jsr  gotoxy
.08ee	68		               pla
.08ef	a8		               tay
.08f0	68		               pla
.08f1	aa		               tax
.08f2	20 0d 12	               jsr  getkey
.08f5	20 41 0e	               jsr  putch
.08f8	20 77 0f	               jsr pop
.08fb	60		               rts
>08fc	00		fkeyset        .byte     0
.08fd			setscreenptr
.08fd	20 38 0f	               jsr  push
.0900	20 77 0f	               jsr  pop
.0903	60		               rts
.0904			staticscreen
.0904	48		               pha
.0905	a9 0c		               lda  #vgris1
.0907	8d 20 d0	               sta  $d020
.090a	68		               pla
.090b	48		               pha
.090c	a9 0b		               lda  #vgris
.090e	8d 21 d0	               sta  $d021
.0911	68		               pla
.0912	48		               pha
.0913	a9 8e		               lda  #b_uppercase
.0915	8d 24 0e	               sta  characterset
.0918	20 d2 ff	               jsr  $ffd2
.091b	68		               pla
.091c	20 da 09	               jsr  showlines
.091f	20 b9 09	               jsr  showallchars
.0922	20 22 0a	               jsr  showgrid
.0925	20 38 09	               jsr  showfkeys
.0928	8a		               txa
.0929	48		               pha
.092a	98		               tya
.092b	48		               pha
.092c	a2 00		               ldx  #0
.092e	a0 07		               ldy  #7
.0930	20 61 0e	               jsr  gotoxy
.0933	68		               pla
.0934	a8		               tay
.0935	68		               pla
.0936	aa		               tax
.0937	60		               rts
.0938			showfkeys
.0938	20 38 0f	               jsr  push
.093b	ad fc 08	               lda  fkeyset
.093e	c9 00		               cmp  #$0
.0940	d0 3b		               bne  secondks
.0942	a2 49		                ldx #<f1abutton
.0944	a0 0c		                ldy #>f1abutton
.0946	20 d0 0e	                jsr putscxy
.0949	a2 63		                ldx #<f2abutton
.094b	a0 0c		                ldy #>f2abutton
.094d	20 d0 0e	                jsr putscxy
.0950	a2 7d		                ldx #<f3abutton
.0952	a0 0c		                ldy #>f3abutton
.0954	20 d0 0e	                jsr putscxy
.0957	a2 97		                ldx #<f4abutton
.0959	a0 0c		                ldy #>f4abutton
.095b	20 d0 0e	                jsr putscxy
.095e	a2 b1		                ldx #<f5abutton
.0960	a0 0c		                ldy #>f5abutton
.0962	20 d0 0e	                jsr putscxy
.0965	a2 cb		                ldx #<f6abutton
.0967	a0 0c		                ldy #>f6abutton
.0969	20 d0 0e	                jsr putscxy
.096c	a2 e5		                ldx #<f7abutton
.096e	a0 0c		                ldy #>f7abutton
.0970	20 d0 0e	                jsr putscxy
.0973	a2 ff		                ldx #<f8abutton
.0975	a0 0c		                ldy #>f8abutton
.0977	20 d0 0e	                jsr putscxy
.097a	4c b5 09	               jmp end
.097d			secondks
.097d	a2 19		                ldx #<f1bbutton
.097f	a0 0d		                ldy #>f1bbutton
.0981	20 d0 0e	                jsr putscxy
.0984	a2 33		                ldx #<f2bbutton
.0986	a0 0d		                ldy #>f2bbutton
.0988	20 d0 0e	                jsr putscxy
.098b	a2 4d		                ldx #<f3bbutton
.098d	a0 0d		                ldy #>f3bbutton
.098f	20 d0 0e	                jsr putscxy
.0992	a2 67		                ldx #<f4bbutton
.0994	a0 0d		                ldy #>f4bbutton
.0996	20 d0 0e	                jsr putscxy
.0999	a2 81		                ldx #<f5bbutton
.099b	a0 0d		                ldy #>f5bbutton
.099d	20 d0 0e	                jsr putscxy
.09a0	a2 9b		                ldx #<f6bbutton
.09a2	a0 0d		                ldy #>f6bbutton
.09a4	20 d0 0e	                jsr putscxy
.09a7	a2 b5		                ldx #<f7bbutton
.09a9	a0 0d		                ldy #>f7bbutton
.09ab	20 d0 0e	                jsr putscxy
.09ae	a2 cf		                ldx #<f8bbutton
.09b0	a0 0d		                ldy #>f8bbutton
.09b2	20 d0 0e	                jsr putscxy
.09b5	20 77 0f	end            jsr  pop
.09b8	60		               rts
.09b9			showallchars
.09b9	20 38 0f	               jsr push
.09bc	8a		               txa
.09bd	48		               pha
.09be	98		               tya
.09bf	48		               pha
.09c0	a2 00		               ldx  #0
.09c2	a0 00		               ldy  #0
.09c4	20 61 0e	               jsr  gotoxy
.09c7	68		               pla
.09c8	a8		               tay
.09c9	68		               pla
.09ca	aa		               tax
.09cb	a2 00		               ldx  #$00
.09cd	8a		nextc          txa
.09ce	9d 00 04	               sta  scrnram,x
.09d1	e8		               inx
.09d2	e0 80		               cpx  #$80
.09d4	d0 f7		               bne  nextc
.09d6	20 77 0f	               jsr  pop
.09d9	60		               rts
.09da			showlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnram+(6*40)+8
.09da	20 38 0f	               jsr  push
.09dd	a2 28		               ldx  #40
.09df	a9 40		               lda  #64
.09e1	9d 9f 04	nextl          sta  scrnram+(40*hline1)-1,x  ;On imprime les deux grande
.09e4	9d ef 04	               sta  scrnram+(40*hline2)-1,x  ; lignes horizontales
.09e7	ca		               dex
.09e8	e0 10		hline          cpx  #vlinepos
.09ea	10 03		               bpl  notyet
.09ec	9d d0 06	               sta  scrnram+(40*hline3),x    ;On imprime la demiligne horz.
.09ef	e0 00		notyet         cpx  #$00
.09f1	d0 ee		               bne  nextl
.09f3	a9 00		               lda  #<scrnram+(40*(hline2))+vlinepos
.09f5	85 fb		               sta  zpage1
.09f7	a9 05		               lda  #>scrnram+(40*(hline2))+vlinepos
.09f9	85 fc		               sta  zpage1+1
.09fb	a0 00		               ldy  #0
.09fd	a9 72		               lda  #114
.09ff	91 fb		               sta  (zpage1),y
.0a01	20 56 0a	               jsr  zp1add40
.0a04	a2 12		               ldx  #24-hline2
.0a06	a9 5d		               lda  #93
.0a08	91 fb		another93      sta  (zpage1),y
.0a0a	20 56 0a	               jsr  zp1add40
.0a0d	ca		               dex
.0a0e	d0 f8		               bne  another93
.0a10	a9 e0		               lda  #<scrnram+(40*(hline3))+vlinepos
.0a12	85 fb		               sta  zpage1
.0a14	a9 06		               lda  #>scrnram+(40*(hline3))+vlinepos
.0a16	85 fc		               sta  zpage1+1
.0a18	a0 00		               ldy  #0
.0a1a	a9 73		               lda  #115
.0a1c	91 fb		               sta  (zpage1),y
.0a1e	20 77 0f	               jsr  pop
.0a21	60		               rts
.0a22			showgrid
=8			gligne=8
=1			gcol=1
.0a22	20 38 0f	               jsr  push
.0a25	20 e9 0d	               jsr  screendis
.0a28	a9 41		               lda  #<scrnram+(40*(gligne))+gcol
.0a2a	85 fb		               sta  zpage1
.0a2c	a9 05		               lda  #>scrnram+(40*(gligne))+gcol
.0a2e	85 fc		               sta  zpage1+1
.0a30	a2 08		               ldx  #8
.0a32	a9 65		nextbox        lda  #101
.0a34	a0 09		               ldy  #9
.0a36	91 fb		               sta  (zpage1),y
.0a38	88		               dey
.0a39	a9 4f		               lda  #79
.0a3b	91 fb		nextcol        sta  (zpage1),y
.0a3d	88		               dey
.0a3e	d0 fb		               bne  nextcol
.0a40	20 56 0a	               jsr  zp1add40
.0a43	ca		               dex
.0a44	d0 ec		               bne  nextbox
.0a46	a0 08		               ldy  #8
.0a48	a9 77		               lda  #119
.0a4a	91 fb		nextlin        sta  (zpage1),y
.0a4c	88		               dey
.0a4d	d0 fb		               bne  nextlin
.0a4f	20 f6 0d	               jsr screenena
.0a52	20 77 0f	               jsr  pop
.0a55	60		               rts
.0a56			zp1add40
.0a56	08		               php
.0a57	48		               pha
.0a58	18		               clc
.0a59	a5 fb		               lda  zpage1
.0a5b	69 28		               adc  #40
.0a5d	90 02		               bcc  nocarry
.0a5f	e6 fc		               inc  zpage1+1
.0a61	85 fb		nocarry        sta  zpage1
.0a63	68		               pla
.0a64	28		               plp
.0a65	60		               rts
.0a66			delay
.0a66	20 38 0f	               jsr  push
.0a69	a9 00		               lda  #$0
.0a6b	aa		               tax
.0a6c	a8		               tay
.0a6d	ca		xagain         dex
.0a6e	88		yagain         dey
.0a6f	c0 00		               cpy  #$00
.0a71	d0 fb		               bne  yagain
.0a73	e0 00		               cpx  #$00
.0a75	d0 f6		               bne  xagain
.0a77	20 77 0f	               jsr  pop
.0a7a	60		               rts

;******  Processing file: messages.asm

=$07			mesgcol = vjaune
>0a7b	07 00 05 92	blankmsg       .byte     vjaune,0,5,146
>0a7f	20 20 20 20	               .null     "                                      "
>0a83	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0a93	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0aa3	20 20 00
>0aa6	07 00 05 12	edit_msg       .byte     vjaune,0,5,18
>0aaa	20 45 4e 54	               .null     " entry mode: chr$(   )",146
>0aae	52 59 20 4d 4f 44 45 3a 20 43 48 52 24 28 20 20
>0abe	20 29 92 00
>0ac2	07 00 05 92	save_msg       .byte     vjaune,0,5,146
>0ac6	20 53 41 56	               .null     " save on cassette or disk? (c/d):"
>0aca	45 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>0ada	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
>0ae8	07 00 05	load_msg       .byte     vjaune,0,5
>0aeb	20 4c 4f 41	               .null     " load on cassette or disk? (c/d):"
>0aef	44 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>0aff	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
>0b0d	07 00 05	copy_msg       .byte     vjaune,0,5
>0b10	20 45 4e 54	               .null     " enter character to copy:"
>0b14	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>0b24	43 4f 50 59 3a 00
>0b2a	07 00 05	clear_msg      .byte     vjaune,0,5
>0b2d	20 43 4c 45	               .null     " clear char: chr$(   )"
>0b31	41 52 20 43 48 41 52 3a 20 43 48 52 24 28 20 20
>0b41	20 29 00
>0b44	07 00 05	fill_msg       .byte     vjaune,0,5
>0b47	20 46 49 4c	               .null     " fill char:  chr$(   )"
>0b4b	4c 20 43 48 41 52 3a 20 20 43 48 52 24 28 20 20
>0b5b	20 29 00
>0b5e	07 00 05	work_msg       .byte     vjaune,0,5
>0b61	20 45 4e 41	               .null     " enable work space"
>0b65	42 4c 45 20 57 4f 52 4b 20 53 50 41 43 45 00
>0b74	07 00 05	rvrs_msg       .byte     vjaune,0,5
>0b77	20 52 45 56	               .null     " reverse character:"
>0b7b	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
>0b8b	07 00 05	invr_msg       .byte     vjaune,0,5
>0b8e	20 49 4e 56	               .null     " inverting character:"
>0b92	45 52 54 49 4e 47 20 43 48 41 52 41 43 54 45 52
>0ba2	3a 00
>0ba4	07 00 05	flip_msg       .byte     vjaune,0,5
>0ba7	20 46 4c 49	               .null     " flipping character:"
>0bab	50 50 49 4e 47 20 43 48 41 52 41 43 54 45 52 3a
>0bbb	00
>0bbc	07 00 05	scrollr_msg    .byte     vjaune,0,5
>0bbf	20 53 43 52	               .null     " scrolling right:"
>0bc3	4f 4c 4c 49 4e 47 20 52 49 47 48 54 3a 00
>0bd1	07 00 05	scrolll_msg    .byte     vjaune,0,5
>0bd4	20 53 43 52	               .null     " scrolling left:"
>0bd8	4f 4c 4c 49 4e 47 20 4c 45 46 54 3a 00
>0be5	07 00 05	scrollu_msg    .byte     vjaune,0,5
>0be8	20 53 43 52	               .null     " scrolling up:"
>0bec	4f 4c 4c 49 4e 47 20 55 50 3a 00
>0bf7	07 00 05	scrolld_msg    .byte     vjaune,0,5
>0bfa	20 53 43 52	               .null     " scrolling down:"
>0bfe	4f 4c 4c 49 4e 47 20 44 4f 57 4e 3a 00
>0c0b	07 00 05	save_fname_msg .byte     vjaune,0,5
>0c0e	20 53 41 56	               .null     " save: file name ------.chr"
>0c12	45 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>0c22	2d 2d 2d 2e 43 48 52 00
>0c2a	07 00 05	load_fname_msg .byte     vjaune,0,5
>0c2d	20 4c 4f 41	               .null     " load: file name ------.chr"
>0c31	44 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>0c41	2d 2d 2d 2e 43 48 52 00
=18			fkeyleft=18
=8			f1top=8
=1			menu1col = 1
=3			menu2col = 3
>0c49	01 12 08	f1abutton      .byte     menu1col,fkeyleft,f1top       ;133
>0c4c	45 44 49 54	               .text     "edit....... "
>0c50	2e 2e 2e 2e 2e 2e 2e 20
>0c58	12		               .byte     18             ; position 15
>0c59	20 20 20 46	               .text     "   f1   "
>0c5d	31 20 20 20
>0c61	92 00		               .byte     146,0
>0c63	01 12 0a	f2abutton      .byte     menu1col,fkeyleft,f1top+2     ;137
>0c66	53 41 56 45	               .text     "save....... "
>0c6a	2e 2e 2e 2e 2e 2e 2e 20
>0c72	12		               .byte     18            ; position 15
>0c73	20 20 20 46	               .text     "   f2   "
>0c77	32 20 20 20
>0c7b	92 00		               .byte     146,0
>0c7d	01 12 0c	f3abutton      .byte     menu1col,fkeyleft,f1top+4     ;134
>0c80	4c 4f 41 44	               .text     "load....... "
>0c84	2e 2e 2e 2e 2e 2e 2e 20
>0c8c	12		               .byte     18             ; position 15
>0c8d	20 20 20 46	               .text     "   f3   "
>0c91	33 20 20 20
>0c95	92 00		               .byte     146,0
>0c97	01 12 0e	f4abutton      .byte     menu1col,fkeyleft,f1top+6     ;138
>0c9a	43 4f 50 59	               .text     "copy....... "
>0c9e	2e 2e 2e 2e 2e 2e 2e 20
>0ca6	12		               .byte     18             ; position 15
>0ca7	20 20 20 46	               .text     "   f4   "
>0cab	34 20 20 20
>0caf	92 00		               .byte     146,0
>0cb1	01 12 10	f5abutton      .byte     menu1col,fkeyleft,f1top+8     ;135
>0cb4	43 4c 45 41	               .text     "clear...... "
>0cb8	52 2e 2e 2e 2e 2e 2e 20
>0cc0	12		               .byte     18             ; position 15
>0cc1	20 20 20 46	               .text     "   f5   "
>0cc5	35 20 20 20
>0cc9	92 00		               .byte     146,0
>0ccb	01 12 12	f6abutton      .byte     menu1col,fkeyleft,f1top+10    ;139
>0cce	46 49 4c 4c	               .text     "fill....... "
>0cd2	2e 2e 2e 2e 2e 2e 2e 20
>0cda	12		               .byte     18             ; position 15
>0cdb	20 20 20 46	               .text     "   f6   "
>0cdf	36 20 20 20
>0ce3	92 00		               .byte     146,0
>0ce5	01 12 14	f7abutton      .byte     menu1col,fkeyleft,f1top+12    ;136
>0ce8	57 4f 52 4b	               .text     "work....... "
>0cec	2e 2e 2e 2e 2e 2e 2e 20
>0cf4	12		               .byte     18             ; position 15
>0cf5	20 20 20 46	               .text     "   f7   "
>0cf9	37 20 20 20
>0cfd	92 00		               .byte     146,0
>0cff	01 12 16	f8abutton      .byte     menu1col,fkeyleft,f1top+14    ;140
>0d02	46 55 4e 43	               .text     "function... "
>0d06	54 49 4f 4e 2e 2e 2e 20
>0d0e	12		               .byte     18             ; position 15
>0d0f	20 20 20 46	               .text     "   f8   "
>0d13	38 20 20 20
>0d17	92 00		               .byte     146,0
>0d19	03 12 08	f1bbutton      .byte     menu2col,fkeyleft,f1top
>0d1c	52 45 56 45	               .text     "reverse.... "
>0d20	52 53 45 2e 2e 2e 2e 20
>0d28	12		               .byte     18             ; position 15
>0d29	20 20 20 46	               .text     "   f1   "
>0d2d	31 20 20 20
>0d31	92 00		               .byte     146,0
>0d33	03 12 0a	f2bbutton      .byte     menu2col,fkeyleft,f1top+2
>0d36	49 4e 56 45	               .text     "invert..... "
>0d3a	52 54 2e 2e 2e 2e 2e 20
>0d42	12		               .byte     18             ; position 15
>0d43	20 20 20 46	               .text     "   f2   "
>0d47	32 20 20 20
>0d4b	92 00		               .byte     146,0
>0d4d	03 12 0c	f3bbutton      .byte     menu2col,fkeyleft,f1top+4
>0d50	46 4c 49 50	               .text     "flip....... "
>0d54	2e 2e 2e 2e 2e 2e 2e 20
>0d5c	12		               .byte     18             ; position 15
>0d5d	20 20 20 46	               .text     "   f3   "
>0d61	33 20 20 20
>0d65	92 00		               .byte     146,0
>0d67	03 12 0e	f4bbutton      .byte     menu2col,fkeyleft,f1top+6
>0d6a	53 43 52 4f	               .text     "scroll r... "
>0d6e	4c 4c 20 52 2e 2e 2e 20
>0d76	12		               .byte     18             ; position 15
>0d77	20 20 20 46	               .text     "   f4   "
>0d7b	34 20 20 20
>0d7f	92 00		               .byte     146,0
>0d81	03 12 10	f5bbutton      .byte     menu2col,fkeyleft,f1top+8
>0d84	53 43 52 4f	               .text     "scroll l... "
>0d88	4c 4c 20 4c 2e 2e 2e 20
>0d90	12		               .byte     18             ; position 15
>0d91	20 20 20 46	               .text     "   f5   "
>0d95	35 20 20 20
>0d99	92 00		               .byte     146,0
>0d9b	03 12 12	f6bbutton      .byte     menu2col,fkeyleft,f1top+10
>0d9e	53 43 52 4f	               .text     "scroll u... "
>0da2	4c 4c 20 55 2e 2e 2e 20
>0daa	12		               .byte     18             ; position 15
>0dab	20 20 20 46	               .text     "   f6   "
>0daf	36 20 20 20
>0db3	92 00		               .byte     146,0
>0db5	03 12 14	f7bbutton      .byte     menu2col,fkeyleft,f1top+12
>0db8	53 43 52 4f	               .text     "scroll d... "
>0dbc	4c 4c 20 44 2e 2e 2e 20
>0dc4	12		               .byte     18             ; position 15
>0dc5	20 20 20 46	               .text     "   f7   "
>0dc9	37 20 20 20
>0dcd	92 00		               .byte     146,0
>0dcf	03 12 16	f8bbutton      .byte     menu2col,fkeyleft,f1top+14
>0dd2	46 55 4e 43	               .text     "function... "
>0dd6	54 49 4f 4e 2e 2e 2e 20
>0dde	12		               .byte     18             ; position 15
>0ddf	20 20 20 46	               .text     "   f8   "
>0de3	38 20 20 20
>0de7	92 00		               .byte     146,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ;  97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c1			stal            =       $c1     ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.0de9			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.0de9			screendis
.0de9	08		               php
.0dea	48		               pha
.0deb	ad 11 d0	               lda  $d011
.0dee	29 ef		               and  #%11101111
.0df0	8d 11 d0	               sta  $d011
.0df3	68		               pla
.0df4	28		               plp
.0df5	60		               rts
.0df6			screenena
.0df6	08		               php
.0df7	48		               pha
.0df8	ad 11 d0	               lda  $d011
.0dfb	09 10		               ora  #%00010000
.0dfd	8d 11 d0	               sta  $d011
.0e00	68		               pla
.0e01	28		               plp
.0e02	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0e03			scrmaninit
.0e03	20 38 0f	               jsr  push
.0e06	a9 06		               lda  #vbleu
.0e08	8d 21 d0	               sta  vicbackcol
.0e0b	a9 05		               lda  #vvert
.0e0d	8d 20 d0	               sta  vicbordcol
.0e10	a9 01		               lda  #vblanc
.0e12	8d 86 02	               sta  bascol
.0e15	ad 00 04	               lda  scrnram
.0e18	29 fd		               and  #%11111101
.0e1a	8d 00 04	               sta  scrnram
.0e1d	20 25 0e	               jsr  cls
.0e20	20 77 0f	               jsr  pop
.0e23	60		               rts
>0e24	8e		characterset   .byte b_uppercase
.0e25			cls
.0e25	08		               php
.0e26	48		               pha
.0e27	a9 93		               lda  #$93
.0e29	20 41 0e	               jsr  putch
.0e2c	a9 0e		               lda  #$0e
.0e2e	20 41 0e	               jsr  putch
.0e31	68		               pla
.0e32	28		               plp
.0e33	60		               rts
.0e34			putnch
.0e34	08		               php
.0e35	e0 00		               cpx  #$00
.0e37	f0 06		               beq  out
.0e39	20 d2 ff	again          jsr  $ffd2
.0e3c	ca		               dex
.0e3d	d0 fa		               bne  again
.0e3f	28		out            plp
.0e40	60		               rts
.0e41			putch
.0e41	08		               php
.0e42	20 d2 ff	               jsr  $ffd2
.0e45	28		               plp
.0e46	60		               rts
.0e47			puts
.0e47	20 38 0f	               jsr  push
.0e4a	86 fb		               stx  zpage1
.0e4c	84 fc		               sty  zpage1+1
.0e4e	a0 00		               ldy  #0
.0e50	b1 fb		next           lda  (zpage1),y
.0e52	f0 09		               beq  exit
.0e54	20 41 0e	               jsr  putch
.0e57	20 3f 10	               jsr  inczp1
.0e5a	4c 50 0e	               jmp  next
.0e5d	20 77 0f	exit           jsr  pop
.0e60	60		               rts
.0e61			gotoxy
.0e61	08		               php
.0e62	18		               clc
.0e63	8a		               txa
.0e64	48		               pha
.0e65	98		               tya
.0e66	aa		               tax
.0e67	68		               pla
.0e68	a8		               tay
.0e69	20 f0 ff	               jsr  kplot
.0e6c	28		               plp
.0e6d	60		               rts
.0e6e			cursor
=$0286			bascol    =    $0286
.0e6e	08		               php
.0e6f	48		               pha
.0e70	90 12		               bcc  restore
.0e72	20 f0 ff	               jsr  kplot
.0e75	8c 96 0e	               sty  cx
.0e78	8e 97 0e	               stx  cy
.0e7b	ad 86 02	               lda  bascol
.0e7e	8d 98 0e	               sta  bcol
.0e81	4c 93 0e	               jmp  out
.0e84	ae 97 0e	restore        ldx  cy
.0e87	ac 96 0e	               ldy  cx
.0e8a	20 f0 ff	               jsr  kplot
.0e8d	ad 98 0e	               lda  bcol
.0e90	8d 86 02	               sta  bascol
.0e93	68		out            pla
.0e94	28		               plp
.0e95	60		               rts
>0e96	00		cx   .byte     $00
>0e97	00		cy   .byte     $00
>0e98	00		bcol .byte     $00
.0e99			cursave
.0e99	08		               php
.0e9a	38		               sec
.0e9b	20 6e 0e	               jsr  cursor
.0e9e	28		               plp
.0e9f	60		               rts
.0ea0			curput
.0ea0	08		               php
.0ea1	18		               clc
.0ea2	20 6e 0e	               jsr  cursor
.0ea5	28		               plp
.0ea6	60		               rts
.0ea7			putsxy
.0ea7	20 38 0f	               jsr  push
.0eaa	86 fb		               stx  zpage1
.0eac	84 fc		               sty  zpage1+1
.0eae	a0 00		               ldy  #$00
.0eb0	b1 fb		               lda  (zpage1),y
.0eb2	aa		               tax
.0eb3	20 3f 10	               jsr  inczp1
.0eb6	b1 fb		               lda  (zpage1),y
.0eb8	a8		               tay
.0eb9	20 61 0e	               jsr  gotoxy
.0ebc	20 3f 10	               jsr  inczp1
.0ebf	a6 fb		               ldx  zpage1
.0ec1	a4 fc		               ldy  zpage1+1
.0ec3	20 47 0e	               jsr  puts
.0ec6	20 77 0f	               jsr  pop
.0ec9	60		               rts
>0eca	00 00		straddr   .word     $00
>0ecc	00		px        .byte     $00
>0ecd	00		py        .byte     $00
>0ece	00 00		zp1       .word     $00
.0ed0			putscxy
.0ed0	20 38 0f	               jsr  push
.0ed3	84 fc		               sty  zpage1+1
.0ed5	86 fb		               stx  zpage1
.0ed7	ad 86 02	               lda  bascol
.0eda	8d fa 0e	               sta  bc
.0edd	a0 00		               ldy #$00
.0edf	b1 fb		               lda  (zpage1),y
.0ee1	8d 86 02	               sta  bascol
.0ee4	20 3f 10	               jsr  inczp1
.0ee7	a6 fb		               ldx  zpage1
.0ee9	a4 fc		               ldy  zpage1+1
.0eeb	20 a7 0e	               jsr  putsxy
.0eee	ad fa 0e	               lda  bc
.0ef1	8d 86 02	               sta  bascol
.0ef4	20 77 0f	               jsr  pop
.0ef7	60		               rts
>0ef8	00 00		straddr  .word      $00
>0efa	00		bc       .byte      $00
>0efb	00 00		zp1      .word      $00
.0efd			putrahex
.0efd	08		               php
.0efe	48		               pha
.0eff	20 45 11	               jsr  a2hex
.0f02	a9 f1		               lda  #<a2hexstr
.0f04	a0 10		               ldy  #>a2hexstr
.0f06	20 47 0e	               jsr  puts
.0f09	68		               pla
.0f0a	28		               plp
.0f0b	60		               rts
.0f0c			kputrahexxy
.0f0c			bputrahexxy
.0f0c			putrahexxy
.0f0c	08		               php
.0f0d	20 45 11	               jsr  a2hex
.0f10	a9 ee		               lda  #<a2hexpos
.0f12	a0 10		               ldy  #>a2hexpos
.0f14	20 a7 0e	               jsr  putsxy
.0f17	68		               pla
.0f18	28		               plp
.0f19	60		               rts
.0f1a			putrahexcxy
.0f1a	08		               php
.0f1b	20 45 11	               jsr  a2hex
.0f1e	a9 ee		               lda  #<a2hexpos
.0f20	a0 10		               ldy  #>a2hexpos
.0f22	20 d0 0e	               jsr  putscxy
.0f25	68		               pla
.0f26	28		               plp
.0f27	60		               rts
.0f28			setinverse
.0f28	48		               pha
.0f29	a9 12		               lda  #$12
.0f2b	20 d2 ff	               jsr  $ffd2
.0f2e	68		               pla
.0f2f	60		               rts
.0f30			clrinverse
.0f30	48		               pha
.0f31	a9 92		               lda  #$92
.0f33	20 d2 ff	               jsr  $ffd2
.0f36	68		               pla
.0f37	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.0f38			push
.0f38	08		          php            ; stack : flg, pcl, pch
.0f39	78		          sei
.0f3a	8d 74 0f	          sta  ra        ; save a
.0f3d	68		          pla            ; stack : pcl, pch
.0f3e	8d 73 0f	          sta  rp        ; save rp
.0f41	68		          pla            ; stack : pch
.0f42	8d 75 0f	          sta  pc        ; save pcl
.0f45	68		          pla            ; stack : -
.0f46	8d 76 0f	          sta  pc+1      ; save pch
.0f49	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0f4b	48		          pha            ; stack : zp1l
.0f4c	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0f4e	48		          pha            ; stack : zp1h, zp1l
.0f4f	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0f51	48		          pha            ; stack : zp2l, zp1h, zp1l
.0f52	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0f54	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0f55	ad 73 0f	          lda  rp        ; get rp
.0f58	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0f59	ad 74 0f	          lda  ra        ; get a
.0f5c	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0f5d	8a		          txa            ; get x
.0f5e	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f5f	98		          tya            ; get y
.0f60	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f61	ad 76 0f	          lda  pc+1      ; get pch
.0f64	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f65	ad 75 0f	          lda  pc        ; get pcl
.0f68	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f69	ad 73 0f	          lda  rp        ; get rp
.0f6c	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f6d	ad 74 0f	          lda  ra        ; get a
.0f70	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f71	58		          cli
.0f72	60		          rts
>0f73	00		rp        .byte     0
>0f74	00		ra        .byte     0
>0f75	00 00		pc        .word     0
.0f77			pull
.0f77			pop
.0f77	78		          sei
.0f78	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f79	8d ac 0f	          sta  pc        ; save pcl
.0f7c	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f7d	8d ad 0f	          sta  pc+1      ; save pch
.0f80	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f81	a8		          tay            ; set y
.0f82	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0f83	aa		          tax            ; set x
.0f84	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0f85	8d ab 0f	          sta  ra        ; save a
.0f88	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0f89	8d aa 0f	          sta  rp        ; save rp
.0f8c	68		          pla            ; stack : zp2l, zp1h, zp1l
.0f8d	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0f8f	68		          pla            ; stack : zp1h, zp1l
.0f90	85 fd		          sta  zpage2    ; get zpage2 High byte
.0f92	68		          pla            ; stack : zp1l
.0f93	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0f95	68		          pla            ; stack :
.0f96	85 fb		          sta  zpage1    ; get zpage1 High byte
.0f98	ad ad 0f	          lda  pc+1      ; get pch
.0f9b	48		          pha            ; stack : pch
.0f9c	ad ac 0f	          lda  pc
.0f9f	48		          pha            ; stack : pcl, pch
.0fa0	ad aa 0f	          lda  rp        ; get rp
.0fa3	48		          pha            ; stack : rp, pcl, pch
.0fa4	ad ab 0f	          lda  ra        ; set ra
.0fa7	58		          cli
.0fa8	28		          plp            ; stack : pcl, pch
.0fa9	60		          rts
>0faa	00		rp        .byte     0
>0fab	00		ra        .byte     0
>0fac	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.0fae			blkfill
.0fae	20 38 0f	bf0            jsr  push
.0fb1	20 6c 10	               jsr  savezp1
.0fb4	84 fc		               sty  zpage1+1
.0fb6	a0 00		               ldy  #$00
.0fb8	84 fb		               sty  zpage1
.0fba	91 fb		bf1            sta  (zpage1),y
.0fbc	c8		               iny
.0fbd	d0 fb		               bne  bf1
.0fbf	20 7b 10	               jsr  restzp1
.0fc2	20 77 0f	               jsr  pop
.0fc5	60		               rts
.0fc6			memfill
.0fc6	20 38 0f	               jsr  push
.0fc9	20 ae 0f	mf1            jsr  blkfill
.0fcc	c8		               iny
.0fcd	ca		               dex
.0fce	d0 f9		               bne  mf1
.0fd0	20 77 0f	               jsr  pop
.0fd3	60		               rts
.0fd4			memmove
.0fd4	20 38 0f	               jsr  push
.0fd7	ba		               tsx            ; On se crée un pointeur ...
.0fd8	8a		               txa
.0fd9	18		               clc
.0fda	69 0b		               adc  #11
.0fdc	a8		               tay
.0fdd	a2 06		               ldx  #$06
.0fdf	b9 00 01	nextbyte       lda  $0100,y
.0fe2	99 2e 10	               sta  words,y
.0fe5	c8		               iny
.0fe6	ca		               dex
.0fe7	d0 f6		               bne  nextbyte
.0fe9	ad 2e 10	               lda  s
.0fec	8d 05 10	               sta  source+1
.0fef	ad 2f 10	               lda  s+1
.0ff2	8d 06 10	               sta  source+2
.0ff5	ad 30 10	               lda  d
.0ff8	8d 02 10	               sta  destin+1
.0ffb	ad 31 10	               lda  d+1
.0ffe	8d 03 10	               sta  destin+2
.1001	ad ff ff	destin         lda  $ffff
.1004	8d ff ff	source         sta  $ffff
.1007	ee 02 10	               inc  destin+1
.100a	d0 03		               bne  src
.100c	ee 03 10	               inc  destin+2
.100f	ee 05 10	src            inc  source+1
.1012	d0 03		               bne  cnt
.1014	ee 06 10	               inc  source+2
.1017	ad 32 10	cnt            lda  compte
.101a	d0 08		               bne  decit
.101c	ad 33 10	               lda  compte+1
.101f	f0 09		               beq  fini
.1021	ce 33 10	               dec  compte+1
.1024	ce 32 10	decit          dec  compte
.1027	4c 01 10	               jmp  destin
.102a	20 77 0f	fini           jsr  pop
.102d	60		               rts
.102e			words
>102e	00 00		s         .word     $0000
>1030	00 00		d         .word     $0000
>1032	00 00		compte    .word     $0000
.1034			decword
.1034	20 38 0f	               jsr  push
.1037	86 fd		               stx  zpage2
.1039	84 fe		               sty  zpage2+1
.103b	20 77 0f	               jsr  pop
.103e	60		               rts
.103f			inczp1
.103f	08		               php
.1040	e6 fb		               inc  zpage1
.1042	d0 02		               bne  nopage
.1044	e6 fc		               inc  zpage1+1
.1046	28		nopage         plp
.1047	60		               rts
.1048			deczp1
.1048	08		                php
.1049	48		                pha
.104a	c6 fb		                dec  zpage1
.104c	d0 02		                bne  nopage
.104e	c6 fc		                dec  zpage1+1
.1050	c6 fb		nopage          dec  zpage1
.1052	68		                pla
.1053	28		                plp
.1054	60		                rts
.1055			inczp2
.1055	08		               php
.1056	48		               pha
.1057	e6 fd		               inc  zpage2
.1059	d0 02		               bne  nopage
.105b	e6 fe		               inc  zpage2+1
.105d	68		nopage         pla
.105e	28		               plp
.105f	60		               rts
.1060			deczp2
.1060	08		               php
.1061	48		               pha
.1062	a5 fd		               lda  zpage2
.1064	d0 02		               bne  nopage
.1066	c6 fe		               dec  zpage2+1
.1068	c6 fd		nopage         dec  zpage2
.106a	28		               plp
.106b	60		               rts
.106c			savezp1
.106c	08		               php
.106d	48		               pha
.106e	a5 fb		               lda  zpage1
.1070	8d e8 10	               sta  zp1
.1073	a5 fc		               lda  zpage1+1
.1075	8d e9 10	               sta  zp1+1
.1078	68		               pla
.1079	28		               plp
.107a	60		               rts
.107b			restzp1
.107b	08		               php
.107c	48		               pha
.107d	ad e8 10	               lda zp1
.1080	85 fb		               sta zpage1
.1082	ad e9 10	               lda zp1+1
.1085	85 fc		               sta zpage1+1
.1087	68		               pla
.1088	28		               plp
.1089	60		               rts
.108a			savezp2
.108a	08		         php
.108b	48		         pha
.108c	a5 fd		         lda zpage2
.108e	8d ea 10	         sta zp2
.1091	a5 fe		         lda zpage2+1
.1093	8d eb 10	         sta zp2+1
.1096	68		         pla
.1097	28		         plp
.1098	60		         rts
.1099			restzp2
.1099	08		                php
.109a	48		                pha
.109b	ad ea 10	                lda  zp2
.109e	85 fd		                sta  zpage2
.10a0	ad eb 10	                lda  zp2+1
.10a3	85 fe		                sta  zpage2+1
.10a5	68		                pla
.10a6	28		                plp
.10a7	60		                rts
.10a8			xy2addr
.10a8	08		                php
.10a9	48		                pha
.10aa	8a		                txa
.10ab	48		                pha
.10ac	98		                tya
.10ad	48		                pha
.10ae	ad e3 10	                lda     addr1+1
.10b1	8d e5 10	                sta     addr2+1
.10b4	ad e2 10	                lda     addr1
.10b7	8d e4 10	                sta     addr2
.10ba	c0 00		                cpy     #$00
.10bc	f0 0f		                beq     addx
.10be	18		moreline        clc
.10bf	6d e1 10	                adc     ymult
.10c2	90 03		                bcc     norepy
.10c4	ee e5 10	                inc     addr2+1
.10c7	8d e4 10	norepy          sta     addr2
.10ca	88		                dey
.10cb	d0 f1		                bne     moreline
.10cd	8a		addx            txa
.10ce	18		                clc
.10cf	6d e4 10	                adc     addr2
.10d2	90 03		                bcc     thatsit
.10d4	ee e5 10	                inc     addr2+1
.10d7	8d e4 10	thatsit         sta     addr2
.10da	68		                pla
.10db	a8		                tay
.10dc	68		                pla
.10dd	aa		                tax
.10de	68		                pla
.10df	28		                plp
.10e0	60		                rts
>10e1	28		ymult          .byte     40
>10e2	00 00		addr1          .word     $0000
>10e4	00 00		addr2          .word     $0000
>10e6	00 00		bytecnt        .word     $0000
>10e8	00 00		zp1        .word   $0000
>10ea	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>10ec	01		a2hexcol       .byte     1              ; pour aputscxy
>10ed	00		a2hexbkcol     .byte     %00000000
.10ee			a2hexpos
>10ee	00		a2hexpx        .byte     0              ; pour aputsxy
>10ef	00		a2hexpy        .byte     0
>10f0	24		a2hexprefix    .byte     "$"            ; pour aputs
>10f1	00 00		a2hexstr       .word     $00
>10f3	00 00		               .word     $00
>10f5	00		               .byte     0              ; 0 end string
.10f6			putahexfmtxy
.10f6	20 38 0f	               jsr  push
.10f9	20 45 11	               jsr  a2hex
.10fc	ae ee 10	               ldx  a2hexpx
.10ff	ac ef 10	               ldy  a2hexpy
.1102	20 61 0e	               jsr  gotoxy
.1105	a2 f0		               ldx  #<a2hexprefix
.1107	a0 10		               ldy  #>a2hexprefix
.1109	20 47 0e	               jsr  puts
.110c	20 77 0f	               jsr  pop
.110f	60		               rts
.1110			putahexfmt
.1110	20 38 0f	               jsr  push
.1113	20 45 11	               jsr  a2hex
.1116	a2 f0		               ldx  #<a2hexprefix
.1118	a0 10		               ldy  #>a2hexprefix
.111a	20 47 0e	               jsr  puts
.111d	20 77 0f	               jsr  pop
.1120	60		               rts
.1121			putahex
.1121	20 38 0f	               jsr  push
.1124	20 45 11	               jsr  a2hex
.1127	a2 f1		               ldx  #<a2hexstr
.1129	a0 10		               ldy  #>a2hexstr
.112b	20 47 0e	               jsr  puts
.112e	20 77 0f	               jsr  pop
.1131	60		               rts
.1132			nib2hex
.1132	08		               php
.1133	29 0f		               and  #$0f
.1135	f8		               sed
.1136	18		               clc
.1137	69 90		               adc  #$90
.1139	69 40		               adc  #$40
.113b	d8		               cld
.113c	28		               plp
.113d	60		               rts
.113e			lsra4bits
.113e	08		               php
.113f	4a		               lsr
.1140	4a		               lsr
.1141	4a		               lsr
.1142	4a		               lsr
.1143	28		               plp
.1144	60		               rts
.1145			a2hex
.1145	08		               php
.1146	48		               pha
.1147	48		               pha
.1148	20 3e 11	               jsr  lsra4bits
.114b	20 32 11	               jsr  nib2hex
.114e	8d f1 10	               sta  a2hexstr
.1151	68		               pla
.1152	20 32 11	               jsr  nib2hex
.1155	8d f2 10	               sta  a2hexstr+1
.1158	a9 00		               lda  #$00                ; set end of string
.115a	8d f3 10	               sta  a2hexstr+2
.115d	68		               pla
.115e	28		               plp
.115f	60		               rts
.1160			xy2hex
.1160	20 38 0f	               jsr  push
.1163	20 45 11	               jsr  a2hex
.1166	8a		               txa
.1167	48		               pha
.1168	20 3e 11	               jsr  lsra4bits
.116b	20 32 11	               jsr  nib2hex
.116e	8d f1 10	               sta  a2hexstr
.1171	68		               pla
.1172	20 32 11	               jsr  nib2hex
.1175	8d f2 10	               sta  a2hexstr+1
.1178	98		               tya
.1179	48		               pha
.117a	20 3e 11	               jsr  lsra4bits
.117d	20 32 11	               jsr  nib2hex
.1180	8d f3 10	               sta  a2hexstr+2
.1183	68		               pla
.1184	20 32 11	               jsr  nib2hex
.1187	8d f4 10	               sta  a2hexstr+3
.118a	a9 00		               lda  #$00                ; 0 ended string
.118c	8d f5 10	               sta  a2hexstr+4
.118f	20 77 0f	               jsr  pop
.1192			atobin
.1192	20 38 0f	               jsr     push
.1195	a2 08		               ldx     #8
.1197	a0 00		               ldy     #0
.1199	2a		nextbit        rol
.119a	48		               pha
.119b	69 00		               adc     #$00
.119d	29 01		               and     #$01
.119f	20 32 11	               jsr     nib2hex
.11a2	99 b3 11	               sta     abin,y
.11a5	68		               pla
.11a6	c8		               iny
.11a7	ca		               dex
.11a8	d0 ef		               bne     nextbit
.11aa	a9 00		               lda     #0
.11ac	99 b3 11	               sta     abin,y
.11af	20 77 0f	               jsr     pull
.11b2	60		               rts
>11b3	30 30 30 30	abin           .null   "00000000"
>11b7	30 30 30 30 00
.11bc			putabin
.11bc	20 92 11	               jsr     atobin
.11bf	20 38 0f	               jsr     push
.11c2	a2 b3		               ldx     #<abin
.11c4	a0 11		               ldy     #>abin
.11c6	20 47 0e	               jsr     puts
.11c9	20 77 0f	               jsr     pop
.11cc	60		               rts
.11cd			putabinfmt
.11cd	08		               php
.11ce	48		               pha
.11cf	a9 25		               lda     #"%"
.11d1	20 41 0e	               jsr     putch
.11d4	68		               pla
.11d5	20 bc 11	               jsr     putabin
.11d8	28		               plp
.11d9	60		               rts
.11da			putabinxy
.11da	20 61 0e	               jsr     gotoxy
.11dd	20 bc 11	               jsr     putabin
.11e0	60		               rts
.11e1			putabinfmtxy
.11e1	20 61 0e	               jsr     gotoxy
.11e4	20 cd 11	               jsr     putabinfmt
.11e7	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

.11e8			waitstop
.11e8	20 38 0f	                jsr     push
.11eb	20 ed f6	wait            jsr     k_stop
.11ee	d0 fb		                bne     wait
.11f0	20 77 0f	                jsr     pop
.11f3	60		                rts
.11f4			anykey
.11f4	08		                php
.11f5	48		                pha
.11f6	a5 cb		nokey           lda 203
.11f8	c9 40		                cmp #64
.11fa	f0 fa		                beq nokey
.11fc	20 02 12	                jsr releasekey
.11ff	68		                pla
.1200	28		                plp
.1201	60		                rts
.1202			releasekey
.1202	08		                php
.1203	48		                pha
.1204	a5 cb		keypressed      lda 203
.1206	c9 40		                cmp #64
.1208	d0 fa		                bne keypressed
.120a	68		                pla
.120b	28		                plp
.120c	60		                rts
.120d			getkey
.120d	20 cf ff	again           jsr     chrin
.1210	d0 fb		                bne     again
.1212	60		                rts
.1213			waitkey
.1213	20 38 0f	                jsr     push
.1216	8d 2b 12	                sta     thekey
.1219	20 e4 ff	nope            jsr     getin
.121c	20 d2 ff	                jsr     chrout
.121f	cd 2b 12	                cmp     thekey
.1222	d0 f5		                bne     nope
.1224	20 d2 ff	                jsr     chrout
.1227	20 77 0f	                jsr     pop
.122a	60		                rts
>122b	00		thekey          .byte   0
.122c			waitspace
.122c	20 38 0f	                jsr     push
.122f	a9 7f		wait            lda     #$7f  ;%01111111
.1231	8d 00 dc	                sta     $dc00
.1234	ad 01 dc	                lda     $dc01
.1237	29 10		                and     #$10  ;mask %00010000
.1239	d0 f4		                bne     wait
.123b	20 77 0f	                jsr     pop
.123e			waitsstop
.123e	20 38 0f	                jsr     push
.1241	20 ed f6	wait            jsr     k_stop  ;%01111111
.1244	d0 fb		                bne     wait
.1246	20 77 0f	                jsr     pop
.1249			waitreturn
.1249	20 38 0f	                jsr     push
.124c	ad 68 12	                lda     thecount
.124f	8d 00 04	                sta     scrnram
.1252	a9 02		                lda     #$02
.1254	8d 00 d8	                sta     colorram
.1257	20 e4 ff	nope            jsr     getin
.125a	20 d2 ff	                jsr     chrout
.125d	c9 0d		                cmp     #$0d
.125f	d0 f6		                bne     nope
.1261	ee 68 12	                inc     thecount
.1264	20 77 0f	                jsr     pop
.1267	60		                rts
>1268	01		thecount        .byte   $01

;******  Return to file: charedit.asm


;******  End of listing

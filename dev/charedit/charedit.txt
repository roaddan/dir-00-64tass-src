
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Wed Nov  1 00:21:52 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm

.080d			main
.080d	20 a6 09	                jsr push
.0810	20 58 08	reload          jsr screendis
.0813	20 72 08	                jsr scrmaninit
.0816	a2 48		                ldx #<data
.0818	a0 08		                ldy #>data
.081a	20 3e 09	                jsr putscxy
.081d	a2 50		                ldx #<data2
.081f	a0 08		                ldy #>data2
.0821	20 3e 09	                jsr putscxy
.0824	48		               pha
.0825	a9 05		               lda  #vvert
.0827	8d 20 d0	               sta  $d020
.082a	68		               pla
.082b	48		               pha
.082c	a9 05		               lda  #vvert
.082e	8d 21 d0	               sta  $d021
.0831	68		               pla
.0832	8a		                txa
.0833	48		                pha
.0834	98		                tya
.0835	48		                pha
.0836	a2 01		                ldx  #1
.0838	a0 14		                ldy  #20
.083a	20 cf 08	                jsr  gotoxy
.083d	68		                pla
.083e	a8		                tay
.083f	68		                pla
.0840	aa		                tax
.0841	20 65 08	                jsr screenena
.0844	20 e5 09	                jsr pop
.0847	60		                rts
>0848	01 00 00	data           .byte 1,0,0
>084b	41 4c 4c 4f	               .text "allo"
>084f	00		               .byte 0
>0850	03 03 04	data2          .byte 3,3,4
>0853	41 4c 4c 4f	               .text "allo"
>0857	00		               .byte 0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ;  97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c1			stal            =       $c1     ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.0858			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.0858			screendis
.0858	08		               php
.0859	48		               pha
.085a	ad 11 d0	               lda  $d011
.085d	29 ef		               and  #%11101111
.085f	8d 11 d0	               sta  $d011
.0862	68		               pla
.0863	28		               plp
.0864	60		               rts
.0865			screenena
.0865	08		               php
.0866	48		               pha
.0867	ad 11 d0	               lda  $d011
.086a	09 10		               ora  #%00010000
.086c	8d 11 d0	               sta  $d011
.086f	68		               pla
.0870	28		               plp
.0871	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0872			scrmaninit
.0872	20 a6 09	               jsr  push
.0875	a9 06		               lda  #vbleu
.0877	8d 21 d0	               sta  vicbackcol
.087a	a9 05		               lda  #vvert
.087c	8d 20 d0	               sta  vicbordcol
.087f	a9 01		               lda  #vblanc
.0881	8d 86 02	               sta  bascol
.0884	ad 00 04	               lda  scrnram
.0887	29 fd		               and  #%11111101
.0889	8d 00 04	               sta  scrnram
.088c	20 93 08	               jsr  cls
.088f	20 e5 09	               jsr  pop
.0892	60		               rts
.0893			cls
.0893	08		               php
.0894	48		               pha
.0895	a9 93		               lda  #$93
.0897	20 af 08	               jsr  putch
.089a	a9 0e		               lda  #$0e
.089c	20 af 08	               jsr  putch
.089f	68		               pla
.08a0	28		               plp
.08a1	60		               rts
.08a2			putnch
.08a2	08		               php
.08a3	e0 00		               cpx  #$00
.08a5	f0 06		               beq  out
.08a7	20 d2 ff	again          jsr  $ffd2
.08aa	ca		               dex
.08ab	d0 fa		               bne  again
.08ad	28		out            plp
.08ae	60		               rts
.08af			putch
.08af	08		               php
.08b0	20 d2 ff	               jsr  $ffd2
.08b3	28		               plp
.08b4	60		               rts
.08b5			puts
.08b5	20 a6 09	               jsr  push
.08b8	86 fb		               stx  zpage1
.08ba	84 fc		               sty  zpage1+1
.08bc	a0 00		               ldy  #0
.08be	b1 fb		next           lda  (zpage1),y
.08c0	f0 09		               beq  exit
.08c2	20 af 08	               jsr  putch
.08c5	20 ad 0a	               jsr  inczp1
.08c8	4c be 08	               jmp  next
.08cb	20 e5 09	exit           jsr  pop
.08ce	60		               rts
.08cf			gotoxy
.08cf	08		               php
.08d0	18		               clc
.08d1	8a		               txa
.08d2	48		               pha
.08d3	98		               tya
.08d4	aa		               tax
.08d5	68		               pla
.08d6	a8		               tay
.08d7	20 f0 ff	               jsr  kplot
.08da	28		               plp
.08db	60		               rts
.08dc			cursor
=$0286			bascol    =    $0286
.08dc	08		               php
.08dd	48		               pha
.08de	90 12		               bcc  restore
.08e0	20 f0 ff	               jsr  kplot
.08e3	8c 04 09	               sty  cx
.08e6	8e 05 09	               stx  cy
.08e9	ad 86 02	               lda  bascol
.08ec	8d 06 09	               sta  bcol
.08ef	4c 01 09	               jmp  out
.08f2	ae 05 09	restore        ldx  cy
.08f5	ac 04 09	               ldy  cx
.08f8	20 f0 ff	               jsr  kplot
.08fb	ad 06 09	               lda  bcol
.08fe	8d 86 02	               sta  bascol
.0901	68		out            pla
.0902	28		               plp
.0903	60		               rts
>0904	00		cx   .byte     $00
>0905	00		cy   .byte     $00
>0906	00		bcol .byte     $00
.0907			cursave
.0907	08		               php
.0908	38		               sec
.0909	20 dc 08	               jsr  cursor
.090c	28		               plp
.090d	60		               rts
.090e			curput
.090e	08		               php
.090f	18		               clc
.0910	20 dc 08	               jsr  cursor
.0913	28		               plp
.0914	60		               rts
.0915			putsxy
.0915	20 a6 09	               jsr  push
.0918	86 fb		               stx  zpage1
.091a	84 fc		               sty  zpage1+1
.091c	a0 00		               ldy  #$00
.091e	b1 fb		               lda  (zpage1),y
.0920	aa		               tax
.0921	20 ad 0a	               jsr  inczp1
.0924	b1 fb		               lda  (zpage1),y
.0926	a8		               tay
.0927	20 cf 08	               jsr  gotoxy
.092a	20 ad 0a	               jsr  inczp1
.092d	a6 fb		               ldx  zpage1
.092f	a4 fc		               ldy  zpage1+1
.0931	20 b5 08	               jsr  puts
.0934	20 e5 09	               jsr  pop
.0937	60		               rts
>0938	00 00		straddr   .word     $00
>093a	00		px        .byte     $00
>093b	00		py        .byte     $00
>093c	00 00		zp1       .word     $00
.093e			putscxy
.093e	20 a6 09	               jsr  push
.0941	84 fc		               sty  zpage1+1
.0943	86 fb		               stx  zpage1
.0945	ad 86 02	               lda  bascol
.0948	8d 68 09	               sta  bc
.094b	a0 00		               ldy #$00
.094d	b1 fb		               lda  (zpage1),y
.094f	8d 86 02	               sta  bascol
.0952	20 ad 0a	               jsr  inczp1
.0955	a6 fb		               ldx  zpage1
.0957	a4 fc		               ldy  zpage1+1
.0959	20 15 09	               jsr  putsxy
.095c	ad 68 09	               lda  bc
.095f	8d 86 02	               sta  bascol
.0962	20 e5 09	               jsr  pop
.0965	60		               rts
>0966	00 00		straddr  .word      $00
>0968	00		bc       .byte      $00
>0969	00 00		zp1      .word      $00
.096b			putrahex
.096b	08		               php
.096c	48		               pha
.096d	20 b3 0b	               jsr  a2hex
.0970	a9 5f		               lda  #<a2hexstr
.0972	a0 0b		               ldy  #>a2hexstr
.0974	20 b5 08	               jsr  puts
.0977	68		               pla
.0978	28		               plp
.0979	60		               rts
.097a			kputrahexxy
.097a			bputrahexxy
.097a			putrahexxy
.097a	08		               php
.097b	20 b3 0b	               jsr  a2hex
.097e	a9 5c		               lda  #<a2hexpos
.0980	a0 0b		               ldy  #>a2hexpos
.0982	20 15 09	               jsr  putsxy
.0985	68		               pla
.0986	28		               plp
.0987	60		               rts
.0988			putrahexcxy
.0988	08		               php
.0989	20 b3 0b	               jsr  a2hex
.098c	a9 5c		               lda  #<a2hexpos
.098e	a0 0b		               ldy  #>a2hexpos
.0990	20 3e 09	               jsr  putscxy
.0993	68		               pla
.0994	28		               plp
.0995	60		               rts
.0996			setinverse
.0996	48		               pha
.0997	a9 12		               lda  #$12
.0999	20 d2 ff	               jsr  $ffd2
.099c	68		               pla
.099d	60		               rts
.099e			clrinverse
.099e	48		               pha
.099f	a9 92		               lda  #$92
.09a1	20 d2 ff	               jsr  $ffd2
.09a4	68		               pla
.09a5	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.09a6			push
.09a6	08		          php            ; stack : flg, pcl, pch
.09a7	78		          sei
.09a8	8d e2 09	          sta  ra        ; save a
.09ab	68		          pla            ; stack : pcl, pch
.09ac	8d e1 09	          sta  rp        ; save rp
.09af	68		          pla            ; stack : pch
.09b0	8d e3 09	          sta  pc        ; save pcl
.09b3	68		          pla            ; stack : -
.09b4	8d e4 09	          sta  pc+1      ; save pch
.09b7	a5 fb		          lda  zpage1    ; get zpage1 low byte
.09b9	48		          pha            ; stack : zp1l
.09ba	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.09bc	48		          pha            ; stack : zp1h, zp1l
.09bd	a5 fd		          lda  zpage2    ; get zpage2 low byte
.09bf	48		          pha            ; stack : zp2l, zp1h, zp1l
.09c0	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.09c2	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.09c3	ad e1 09	          lda  rp        ; get rp
.09c6	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.09c7	ad e2 09	          lda  ra        ; get a
.09ca	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.09cb	8a		          txa            ; get x
.09cc	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.09cd	98		          tya            ; get y
.09ce	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.09cf	ad e4 09	          lda  pc+1      ; get pch
.09d2	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.09d3	ad e3 09	          lda  pc        ; get pcl
.09d6	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.09d7	ad e1 09	          lda  rp        ; get rp
.09da	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.09db	ad e2 09	          lda  ra        ; get a
.09de	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.09df	58		          cli
.09e0	60		          rts
>09e1	00		rp        .byte     0
>09e2	00		ra        .byte     0
>09e3	00 00		pc        .word     0
.09e5			pull
.09e5			pop
.09e5	78		          sei
.09e6	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.09e7	8d 1a 0a	          sta  pc        ; save pcl
.09ea	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.09eb	8d 1b 0a	          sta  pc+1      ; save pch
.09ee	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.09ef	a8		          tay            ; set y
.09f0	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.09f1	aa		          tax            ; set x
.09f2	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.09f3	8d 19 0a	          sta  ra        ; save a
.09f6	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.09f7	8d 18 0a	          sta  rp        ; save rp
.09fa	68		          pla            ; stack : zp2l, zp1h, zp1l
.09fb	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.09fd	68		          pla            ; stack : zp1h, zp1l
.09fe	85 fd		          sta  zpage2    ; get zpage2 High byte
.0a00	68		          pla            ; stack : zp1l
.0a01	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0a03	68		          pla            ; stack :
.0a04	85 fb		          sta  zpage1    ; get zpage1 High byte
.0a06	ad 1b 0a	          lda  pc+1      ; get pch
.0a09	48		          pha            ; stack : pch
.0a0a	ad 1a 0a	          lda  pc
.0a0d	48		          pha            ; stack : pcl, pch
.0a0e	ad 18 0a	          lda  rp        ; get rp
.0a11	48		          pha            ; stack : rp, pcl, pch
.0a12	ad 19 0a	          lda  ra        ; set ra
.0a15	58		          cli
.0a16	28		          plp            ; stack : pcl, pch
.0a17	60		          rts
>0a18	00		rp        .byte     0
>0a19	00		ra        .byte     0
>0a1a	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.0a1c			blkfill
.0a1c	20 a6 09	bf0            jsr  push
.0a1f	20 da 0a	               jsr  savezp1
.0a22	84 fc		               sty  zpage1+1
.0a24	a0 00		               ldy  #$00
.0a26	84 fb		               sty  zpage1
.0a28	91 fb		bf1            sta  (zpage1),y
.0a2a	c8		               iny
.0a2b	d0 fb		               bne  bf1
.0a2d	20 e9 0a	               jsr  restzp1
.0a30	20 e5 09	               jsr  pop
.0a33	60		               rts
.0a34			memfill
.0a34	20 a6 09	               jsr  push
.0a37	20 1c 0a	mf1            jsr  blkfill
.0a3a	c8		               iny
.0a3b	ca		               dex
.0a3c	d0 f9		               bne  mf1
.0a3e	20 e5 09	               jsr  pop
.0a41	60		               rts
.0a42			memmove
.0a42	20 a6 09	               jsr  push
.0a45	ba		               tsx            ; On se crée un pointeur ...
.0a46	8a		               txa
.0a47	18		               clc
.0a48	69 0b		               adc  #11
.0a4a	a8		               tay
.0a4b	a2 06		               ldx  #$06
.0a4d	b9 00 01	nextbyte       lda  $0100,y
.0a50	99 9c 0a	               sta  words,y
.0a53	c8		               iny
.0a54	ca		               dex
.0a55	d0 f6		               bne  nextbyte
.0a57	ad 9c 0a	               lda  s
.0a5a	8d 73 0a	               sta  source+1
.0a5d	ad 9d 0a	               lda  s+1
.0a60	8d 74 0a	               sta  source+2
.0a63	ad 9e 0a	               lda  d
.0a66	8d 70 0a	               sta  destin+1
.0a69	ad 9f 0a	               lda  d+1
.0a6c	8d 71 0a	               sta  destin+2
.0a6f	ad ff ff	destin         lda  $ffff
.0a72	8d ff ff	source         sta  $ffff
.0a75	ee 70 0a	               inc  destin+1
.0a78	d0 03		               bne  src
.0a7a	ee 71 0a	               inc  destin+2
.0a7d	ee 73 0a	src            inc  source+1
.0a80	d0 03		               bne  cnt
.0a82	ee 74 0a	               inc  source+2
.0a85	ad a0 0a	cnt            lda  compte
.0a88	d0 08		               bne  decit
.0a8a	ad a1 0a	               lda  compte+1
.0a8d	f0 09		               beq  fini
.0a8f	ce a1 0a	               dec  compte+1
.0a92	ce a0 0a	decit          dec  compte
.0a95	4c 6f 0a	               jmp  destin
.0a98	20 e5 09	fini           jsr  pop
.0a9b	60		               rts
.0a9c			words
>0a9c	00 00		s         .word     $0000
>0a9e	00 00		d         .word     $0000
>0aa0	00 00		compte    .word     $0000
.0aa2			decword
.0aa2	20 a6 09	               jsr  push
.0aa5	86 fd		               stx  zpage2
.0aa7	84 fe		               sty  zpage2+1
.0aa9	20 e5 09	               jsr  pop
.0aac	60		               rts
.0aad			inczp1
.0aad	08		               php
.0aae	e6 fb		               inc  zpage1
.0ab0	d0 02		               bne  nopage
.0ab2	e6 fc		               inc  zpage1+1
.0ab4	28		nopage         plp
.0ab5	60		               rts
.0ab6			deczp1
.0ab6	08		                php
.0ab7	48		                pha
.0ab8	c6 fb		                dec  zpage1
.0aba	d0 02		                bne  nopage
.0abc	c6 fc		                dec  zpage1+1
.0abe	c6 fb		nopage          dec  zpage1
.0ac0	68		                pla
.0ac1	28		                plp
.0ac2	60		                rts
.0ac3			inczp2
.0ac3	08		               php
.0ac4	48		               pha
.0ac5	e6 fd		               inc  zpage2
.0ac7	d0 02		               bne  nopage
.0ac9	e6 fe		               inc  zpage2+1
.0acb	68		nopage         pla
.0acc	28		               plp
.0acd	60		               rts
.0ace			deczp2
.0ace	08		               php
.0acf	48		               pha
.0ad0	a5 fd		               lda  zpage2
.0ad2	d0 02		               bne  nopage
.0ad4	c6 fe		               dec  zpage2+1
.0ad6	c6 fd		nopage         dec  zpage2
.0ad8	28		               plp
.0ad9	60		               rts
.0ada			savezp1
.0ada	08		               php
.0adb	48		               pha
.0adc	a5 fb		               lda  zpage1
.0ade	8d 56 0b	               sta  zp1
.0ae1	a5 fc		               lda  zpage1+1
.0ae3	8d 57 0b	               sta  zp1+1
.0ae6	68		               pla
.0ae7	28		               plp
.0ae8	60		               rts
.0ae9			restzp1
.0ae9	08		               php
.0aea	48		               pha
.0aeb	ad 56 0b	               lda zp1
.0aee	85 fb		               sta zpage1
.0af0	ad 57 0b	               lda zp1+1
.0af3	85 fc		               sta zpage1+1
.0af5	68		               pla
.0af6	28		               plp
.0af7	60		               rts
.0af8			savezp2
.0af8	08		         php
.0af9	48		         pha
.0afa	a5 fd		         lda zpage2
.0afc	8d 58 0b	         sta zp2
.0aff	a5 fe		         lda zpage2+1
.0b01	8d 59 0b	         sta zp2+1
.0b04	68		         pla
.0b05	28		         plp
.0b06	60		         rts
.0b07			restzp2
.0b07	08		                php
.0b08	48		                pha
.0b09	ad 58 0b	                lda  zp2
.0b0c	85 fd		                sta  zpage2
.0b0e	ad 59 0b	                lda  zp2+1
.0b11	85 fe		                sta  zpage2+1
.0b13	68		                pla
.0b14	28		                plp
.0b15	60		                rts
.0b16			xy2addr
.0b16	08		                php
.0b17	48		                pha
.0b18	8a		                txa
.0b19	48		                pha
.0b1a	98		                tya
.0b1b	48		                pha
.0b1c	ad 51 0b	                lda     addr1+1
.0b1f	8d 53 0b	                sta     addr2+1
.0b22	ad 50 0b	                lda     addr1
.0b25	8d 52 0b	                sta     addr2
.0b28	c0 00		                cpy     #$00
.0b2a	f0 0f		                beq     addx
.0b2c	18		moreline        clc
.0b2d	6d 4f 0b	                adc     ymult
.0b30	90 03		                bcc     norepy
.0b32	ee 53 0b	                inc     addr2+1
.0b35	8d 52 0b	norepy          sta     addr2
.0b38	88		                dey
.0b39	d0 f1		                bne     moreline
.0b3b	8a		addx            txa
.0b3c	18		                clc
.0b3d	6d 52 0b	                adc     addr2
.0b40	90 03		                bcc     thatsit
.0b42	ee 53 0b	                inc     addr2+1
.0b45	8d 52 0b	thatsit         sta     addr2
.0b48	68		                pla
.0b49	a8		                tay
.0b4a	68		                pla
.0b4b	aa		                tax
.0b4c	68		                pla
.0b4d	28		                plp
.0b4e	60		                rts
>0b4f	28		ymult          .byte     40
>0b50	00 00		addr1          .word     $0000
>0b52	00 00		addr2          .word     $0000
>0b54	00 00		bytecnt        .word     $0000
>0b56	00 00		zp1        .word   $0000
>0b58	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>0b5a	01		a2hexcol       .byte     1              ; pour aputscxy
>0b5b	00		a2hexbkcol     .byte     %00000000
.0b5c			a2hexpos
>0b5c	00		a2hexpx        .byte     0              ; pour aputsxy
>0b5d	00		a2hexpy        .byte     0
>0b5e	24		a2hexprefix    .byte     "$"            ; pour aputs
>0b5f	00 00		a2hexstr       .word     $00
>0b61	00 00		               .word     $00
>0b63	00		               .byte     0              ; 0 end string
.0b64			putahexfmtxy
.0b64	20 a6 09	               jsr  push
.0b67	20 b3 0b	               jsr  a2hex
.0b6a	ae 5c 0b	               ldx  a2hexpx
.0b6d	ac 5d 0b	               ldy  a2hexpy
.0b70	20 cf 08	               jsr  gotoxy
.0b73	a2 5e		               ldx  #<a2hexprefix
.0b75	a0 0b		               ldy  #>a2hexprefix
.0b77	20 b5 08	               jsr  puts
.0b7a	20 e5 09	               jsr  pop
.0b7d	60		               rts
.0b7e			putahexfmt
.0b7e	20 a6 09	               jsr  push
.0b81	20 b3 0b	               jsr  a2hex
.0b84	a2 5e		               ldx  #<a2hexprefix
.0b86	a0 0b		               ldy  #>a2hexprefix
.0b88	20 b5 08	               jsr  puts
.0b8b	20 e5 09	               jsr  pop
.0b8e	60		               rts
.0b8f			putahex
.0b8f	20 a6 09	               jsr  push
.0b92	20 b3 0b	               jsr  a2hex
.0b95	a2 5f		               ldx  #<a2hexstr
.0b97	a0 0b		               ldy  #>a2hexstr
.0b99	20 b5 08	               jsr  puts
.0b9c	20 e5 09	               jsr  pop
.0b9f	60		               rts
.0ba0			nib2hex
.0ba0	08		               php
.0ba1	29 0f		               and  #$0f
.0ba3	f8		               sed
.0ba4	18		               clc
.0ba5	69 90		               adc  #$90
.0ba7	69 40		               adc  #$40
.0ba9	d8		               cld
.0baa	28		               plp
.0bab	60		               rts
.0bac			lsra4bits
.0bac	08		               php
.0bad	4a		               lsr
.0bae	4a		               lsr
.0baf	4a		               lsr
.0bb0	4a		               lsr
.0bb1	28		               plp
.0bb2	60		               rts
.0bb3			a2hex
.0bb3	08		               php
.0bb4	48		               pha
.0bb5	48		               pha
.0bb6	20 ac 0b	               jsr  lsra4bits
.0bb9	20 a0 0b	               jsr  nib2hex
.0bbc	8d 5f 0b	               sta  a2hexstr
.0bbf	68		               pla
.0bc0	20 a0 0b	               jsr  nib2hex
.0bc3	8d 60 0b	               sta  a2hexstr+1
.0bc6	a9 00		               lda  #$00                ; set end of string
.0bc8	8d 61 0b	               sta  a2hexstr+2
.0bcb	68		               pla
.0bcc	28		               plp
.0bcd	60		               rts
.0bce			xy2hex
.0bce	20 a6 09	               jsr  push
.0bd1	20 b3 0b	               jsr  a2hex
.0bd4	8a		               txa
.0bd5	48		               pha
.0bd6	20 ac 0b	               jsr  lsra4bits
.0bd9	20 a0 0b	               jsr  nib2hex
.0bdc	8d 5f 0b	               sta  a2hexstr
.0bdf	68		               pla
.0be0	20 a0 0b	               jsr  nib2hex
.0be3	8d 60 0b	               sta  a2hexstr+1
.0be6	98		               tya
.0be7	48		               pha
.0be8	20 ac 0b	               jsr  lsra4bits
.0beb	20 a0 0b	               jsr  nib2hex
.0bee	8d 61 0b	               sta  a2hexstr+2
.0bf1	68		               pla
.0bf2	20 a0 0b	               jsr  nib2hex
.0bf5	8d 62 0b	               sta  a2hexstr+3
.0bf8	a9 00		               lda  #$00                ; 0 ended string
.0bfa	8d 63 0b	               sta  a2hexstr+4
.0bfd	20 e5 09	               jsr  pop
.0c00			atobin
.0c00	20 a6 09	               jsr     push
.0c03	a2 08		               ldx     #8
.0c05	a0 00		               ldy     #0
.0c07	2a		nextbit        rol
.0c08	48		               pha
.0c09	69 00		               adc     #$00
.0c0b	29 01		               and     #$01
.0c0d	20 a0 0b	               jsr     nib2hex
.0c10	99 21 0c	               sta     abin,y
.0c13	68		               pla
.0c14	c8		               iny
.0c15	ca		               dex
.0c16	d0 ef		               bne     nextbit
.0c18	a9 00		               lda     #0
.0c1a	99 21 0c	               sta     abin,y
.0c1d	20 e5 09	               jsr     pull
.0c20	60		               rts
>0c21	30 30 30 30	abin           .null   "00000000"
>0c25	30 30 30 30 00
.0c2a			putabin
.0c2a	20 00 0c	               jsr     atobin
.0c2d	20 a6 09	               jsr     push
.0c30	a2 21		               ldx     #<abin
.0c32	a0 0c		               ldy     #>abin
.0c34	20 b5 08	               jsr     puts
.0c37	20 e5 09	               jsr     pop
.0c3a	60		               rts
.0c3b			putabinfmt
.0c3b	08		               php
.0c3c	48		               pha
.0c3d	a9 25		               lda     #"%"
.0c3f	20 af 08	               jsr     putch
.0c42	68		               pla
.0c43	20 2a 0c	               jsr     putabin
.0c46	28		               plp
.0c47	60		               rts
.0c48			putabinxy
.0c48	20 cf 08	               jsr     gotoxy
.0c4b	20 2a 0c	               jsr     putabin
.0c4e	60		               rts
.0c4f			putabinfmtxy
.0c4f	20 cf 08	               jsr     gotoxy
.0c52	20 3b 0c	               jsr     putabinfmt
.0c55	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-disk.asm

.0c56			diskerror
.0c56	20 a6 09	               jsr  push
.0c59	ad 87 0d	               lda  dsk_dev   ; Select device 8
.0c5c	85 ba		               sta  $ba       ;
.0c5e	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.0c61	a9 6f		               lda  #$6f
.0c63	85 b9		               sta  $b9       ;
.0c65	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.0c68	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.0c6b	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.0c6e	c9 0d		               cmp  #$0d      ; Is it CR ?
.0c70	d0 f6		               bne  nextchar  ; No, get next char
.0c72	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.0c75	20 e5 09	               jsr  pop
.0c78	60		               rts
.0c79			diskdir
.0c79	20 a6 09	               jsr  push
.0c7c	a9 24		               lda  #$24      ; L012C - Filename is "$"
.0c7e	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.0c80	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.0c82	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.0c84	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.0c86	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.0c88	a9 01		               lda  #$01      ; L0138 - set ...
.0c8a	85 b7		               sta  $b7       ; L013A - ... length of current filename
.0c8c	ad 87 0d	               lda  dsk_dev   ; L013C - set 8 as ...
.0c8f	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.0c91	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.0c93	85 b9		               sta  $b9       ; L0142 - ... secondary address
.0c95	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.0c98	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...%10111010
.0c9a	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.0c9d	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.0c9f	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.0ca2	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.0ca4	85 90		               sta  $90       ; L0153 - ... kernal status word.
.0ca6	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.0ca8	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.0caa	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.0cad	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.0caf	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.0cb1	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.0cb3	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.0cb6	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.0cb8	d0 28		               bne  exit      ; L0167
.0cba	a4 fb		               ldy  $fb       ; L0169
.0cbc	88		               dey            ; L016b
.0cbd	d0 e9		               bne  loop1     ; L016C - If not last, loop
.0cbf	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.0cc1	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.0cc4	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.0cc6	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.0cc9	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.0ccc	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.0cce	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.0cd0	aa		               tax            ; L017F - tfr a in x
.0cd1	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.0cd3	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.0cd6	4c c9 0c	               jmp  loop3     ; L0185 - get another byte
.0cd9	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.0cdb	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.0cde	a0 02		               ldy  #$02      ; L018D - set Y to 2
.0ce0	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.0ce2	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.0ce5	20 e5 09	               jsr  pop
.0ce8	60		               rts            ; L0194
.0ce9			directory
.0ce9	20 79 0c	               jsr  diskdir
.0cec	20 56 0c	               jsr  diskerror
.0cef	60		               rts
.0cf0			memtofile
.0cf0	20 61 0d	               jsr  dsk_putmesg
.0cf3	20 a6 09	               jsr  push
.0cf6	ad 8b 0d	               lda  dsk_fnlen
.0cf9	ae 89 0d	               ldx  dsk_fnptr      ; load fname addr. lbyte
.0cfc	ac 8a 0d	               ldy  dsk_fnptr+1
.0cff	20 bd ff	               jsr  setnam         ; call setnam
.0d02	ad 88 0d	               lda  dsk_lfsno
.0d05	ae 87 0d	               ldx  dsk_dev        ; specified device
.0d08	a0 00		skip           ldy  #$00
.0d0a	20 ba ff	               jsr  setlfs         ; call setlfs
.0d0d	ad 83 0d	               lda  dsk_data_s     ; put data start lbyte in stal
.0d10	85 c1		               sta  stal
.0d12	ad 84 0d	               lda  dsk_data_s+1   ; put data start hbyte in stal
.0d15	85 c2		               sta  stal+1
.0d17	ae 85 0d	               ldx  dsk_data_e     ; put data end lbyte in x
.0d1a	ac 86 0d	               ldy  dsk_data_e+1   ; put data end hbyte in y
.0d1d	a9 c1		               lda  #stal          ; start address located in $c1/$c2
.0d1f	20 d8 ff	               jsr  save           ; call save
.0d22	90 00		               bcc  noerror        ; if carry set, a load error has happened
.0d24	20 e5 09	noerror        jsr  pop
.0d27	60		               rts
.0d28			filetomem
.0d28	20 a6 09	               jsr push
.0d2b	ad 8b 0d	               lda dsk_fnlen
.0d2e	ae 89 0d	               ldx dsk_fnptr
.0d31	ac 8a 0d	               ldy dsk_fnptr+1
.0d34	20 bd ff	               jsr setnam     ; call setnam
.0d37	ad 88 0d	               lda dsk_lfsno
.0d3a	ae 87 0d	               ldx dsk_dev    ; default to device 8
.0d3d	a0 01		               ldy #$01       ; not $01 means: load to address stored in file
.0d3f	20 ba ff	               jsr setlfs     ; call setlfs
.0d42	a9 00		               lda #$00       ; $00 means: load to memory (not verify)
.0d44	20 d5 ff	               jsr load       ; call load
.0d47	90 03		               bcc noerror      ; if carry set, a load error has happened
.0d49	20 50 0d	               jsr  error
.0d4c	20 e5 09	noerror        jsr pop
.0d4f	60		               rts
.0d50			error
.0d50	60		               rts
.0d51	a2 9c		error1         ldx  #<dsk_emsg1
.0d53	a0 0d		               ldy  #>dsk_emsg1
.0d55	20 b5 08	               jsr  puts
.0d58	60		               rts
.0d59	a2 b0		error2         ldx #<dsk_emsg2
.0d5b	a0 0d		               ldy #>dsk_emsg2
.0d5d	20 b5 08	               jsr puts
.0d60	60		               rts
.0d61			dsk_putmesg
.0d61	20 a6 09	               jsr push
.0d64	a2 8c		               ldx #<dsk_msg0
.0d66	a0 0d		               ldy #>dsk_msg0
.0d68	20 b5 08	               jsr puts
.0d6b	a9 20		               lda #$20
.0d6d	20 af 08	               jsr putch
.0d70	ae 89 0d	               ldx dsk_fnptr
.0d73	ac 8a 0d	               ldy dsk_fnptr+1
.0d76	20 b5 08	               jsr puts
.0d79	ad 88 0d	               lda dsk_lfsno
.0d7c	20 c3 ff	               jsr close
.0d7f	20 e5 09	               jsr pop
.0d82	60		               rts
>0d83	00 00		dsk_data_s     .word     $0000    ; example addresses
>0d85	00 20		dsk_data_e     .word     $2000
>0d87	08		dsk_dev        .byte     $08
>0d88	00		dsk_lfsno      .byte     $00
>0d89	00 00		dsk_fnptr      .word     $00
>0d8b	00		dsk_fnlen      .byte     0
>0d8c	8d		dsk_msg0       .byte     141
>0d8d	53 41 56 49	               .null     "saving"
>0d91	4e 47 00
>0d94	8d		dsk_msg1       .byte     141
>0d95	53 55 43 43	               .null     "succes"
>0d99	45 53 00
>0d9c	8d		dsk_emsg1      .byte     141
>0d9d	46 49 43 48	               .null     "fichier non ouvert"
>0da1	49 45 52 20 4e 4f 4e 20 4f 55 56 45 52 54 00
>0db0	11		dsk_emsg2      .byte     17
>0db1	45 52 52 45	               .null     "erreur d'ecriture"
>0db5	55 52 20 44 27 45 43 52 49 54 55 52 45 00

;******  Return to file: charedit.asm


;******  End of listing

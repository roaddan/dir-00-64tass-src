
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Sat Nov  4 23:47:01 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm

=$0d			flashcol = vvert1

;******  Return to file: charedit.asm

.080d			main
.080d	20 13 10	               jsr push
.0810	20 c4 0e	               jsr screendis
.0813	20 de 0e	               jsr scrmaninit
.0816	20 a9 09	               jsr staticscreen
.0819	20 d1 0e	               jsr screenena
.081c	20 13 10	               jsr  push
.081f	a2 20		               ldx  #<blankmsg
.0821	a0 0b		               ldy  #>blankmsg
.0823	20 ab 0f	               jsr  putscxy
.0826	a2 4b		               ldx  #<edit_msg
.0828	a0 0b		               ldy  #>edit_msg
.082a	20 ab 0f	               jsr  putscxy
.082d	20 52 10	               jsr  pop
.0830	a9 00		               lda  #$00
.0832	8d 4e 08	               sta  fkeyset
.0835	20 dd 09	               jsr  showfkeys
.0838			again
.0838	8a		               txa
.0839	48		               pha
.083a	98		               tya
.083b	48		               pha
.083c	a2 00		               ldx  #0
.083e	a0 18		               ldy  #24
.0840	20 3c 0f	               jsr  gotoxy
.0843	68		               pla
.0844	a8		               tay
.0845	68		               pla
.0846	aa		               tax
.0847	20 52 10	               jsr  pop
.084a	20 56 08	               jsr  keyaction
.084d	60		               rts
>084e	00		fkeyset        .byte     0
.084f			setscreenptr
.084f	20 13 10	               jsr  push
.0852	20 52 10	               jsr  pop
.0855	60		               rts
.0856			keyaction
.0856	20 13 10	               jsr  push
.0859	20 e8 12	loop           jsr  getkey
.085c	c9 85		               cmp  #key_f1
.085e	f0 0b		               beq  f1
.0860	c9 8c		               cmp  #key_f8
.0862	f0 0d		               beq  f8
.0864	c9 18		               cmp  #ctrl_x
.0866	f0 0f		               beq  quit
.0868	4c 59 08	               jmp  loop
.086b	20 7b 08	f1             jsr  f1action
.086e	4c 59 08	               jmp  loop
.0871	20 0e 09	f8             jsr  f8action
.0874	4c 59 08	               jmp  loop
.0877	20 52 10	quit           jsr  pop
.087a	60		               rts
.087b			f1action
.087b	48		               pha
.087c	ad 4e 08	               lda  fkeyset
.087f	d0 47		               bne  menub
.0881	08		               php
.0882	48		               pha
.0883	8a		               txa
.0884	48		               pha
.0885	ad 24 0d	               lda  f1abutton
.0888	48		               pha
.0889	a9 92		               lda  #146
.088b	8d 33 0d	               sta  f1abutton+15
.088e	a9 0d		               lda  #flashcol
.0890	8d 24 0d	               sta  f1abutton
.0893	a2 24		               ldx  #<f1abutton
.0895	a0 0d		               ldy  #>f1abutton
.0897	20 ab 0f	               jsr  putscxy
.089a	20 0b 0b	               jsr  delay
.089d	a9 12		               lda  #18
.089f	8d 33 0d	               sta  f1abutton+15
.08a2	68		               pla
.08a3	8d 24 0d	               sta  f1abutton
.08a6	a2 24		               ldx  #<f1abutton
.08a8	a0 0d		               ldy  #>f1abutton
.08aa	20 ab 0f	               jsr  putscxy
.08ad	68		               pla
.08ae	aa		               tax
.08af	68		               pla
.08b0	28		               plp
.08b1	20 13 10	               jsr  push
.08b4	a2 20		               ldx  #<blankmsg
.08b6	a0 0b		               ldy  #>blankmsg
.08b8	20 ab 0f	               jsr  putscxy
.08bb	a2 4b		               ldx  #<edit_msg
.08bd	a0 0b		               ldy  #>edit_msg
.08bf	20 ab 0f	               jsr  putscxy
.08c2	20 52 10	               jsr  pop
.08c5	4c 0c 09	               jmp  out
.08c8			menub
.08c8	08		               php
.08c9	48		               pha
.08ca	8a		               txa
.08cb	48		               pha
.08cc	ad f4 0d	               lda  f1bbutton
.08cf	48		               pha
.08d0	a9 92		               lda  #146
.08d2	8d 03 0e	               sta  f1bbutton+15
.08d5	a9 0d		               lda  #flashcol
.08d7	8d f4 0d	               sta  f1bbutton
.08da	a2 f4		               ldx  #<f1bbutton
.08dc	a0 0d		               ldy  #>f1bbutton
.08de	20 ab 0f	               jsr  putscxy
.08e1	20 0b 0b	               jsr  delay
.08e4	a9 12		               lda  #18
.08e6	8d 03 0e	               sta  f1bbutton+15
.08e9	68		               pla
.08ea	8d f4 0d	               sta  f1bbutton
.08ed	a2 f4		               ldx  #<f1bbutton
.08ef	a0 0d		               ldy  #>f1bbutton
.08f1	20 ab 0f	               jsr  putscxy
.08f4	68		               pla
.08f5	aa		               tax
.08f6	68		               pla
.08f7	28		               plp
.08f8	20 13 10	               jsr  push
.08fb	a2 20		               ldx  #<blankmsg
.08fd	a0 0b		               ldy  #>blankmsg
.08ff	20 ab 0f	               jsr  putscxy
.0902	a2 19		               ldx  #<rvrs_msg
.0904	a0 0c		               ldy  #>rvrs_msg
.0906	20 ab 0f	               jsr  putscxy
.0909	20 52 10	               jsr  pop
.090c	68		out            pla
.090d	60		               rts
.090e			f8action
.090e	48		               pha
.090f	ad 4e 08	               lda  fkeyset
.0912	d0 47		               bne  menub
.0914	08		               php
.0915	48		               pha
.0916	8a		               txa
.0917	48		               pha
.0918	ad da 0d	               lda  f8abutton
.091b	48		               pha
.091c	a9 92		               lda  #146
.091e	8d e9 0d	               sta  f8abutton+15
.0921	a9 0d		               lda  #flashcol
.0923	8d da 0d	               sta  f8abutton
.0926	a2 da		               ldx  #<f8abutton
.0928	a0 0d		               ldy  #>f8abutton
.092a	20 ab 0f	               jsr  putscxy
.092d	20 0b 0b	               jsr  delay
.0930	a9 12		               lda  #18
.0932	8d e9 0d	               sta  f8abutton+15
.0935	68		               pla
.0936	8d da 0d	               sta  f8abutton
.0939	a2 da		               ldx  #<f8abutton
.093b	a0 0d		               ldy  #>f8abutton
.093d	20 ab 0f	               jsr  putscxy
.0940	68		               pla
.0941	aa		               tax
.0942	68		               pla
.0943	28		               plp
.0944	20 13 10	               jsr  push
.0947	a2 20		               ldx  #<blankmsg
.0949	a0 0b		               ldy  #>blankmsg
.094b	20 ab 0f	               jsr  putscxy
.094e	a2 09		               ldx  #<menub_msg
.0950	a0 0d		               ldy  #>menub_msg
.0952	20 ab 0f	               jsr  putscxy
.0955	20 52 10	               jsr  pop
.0958	4c 9f 09	               jmp  swapit
.095b			menub
.095b	08		               php
.095c	48		               pha
.095d	8a		               txa
.095e	48		               pha
.095f	ad aa 0e	               lda  f8bbutton
.0962	48		               pha
.0963	a9 92		               lda  #146
.0965	8d b9 0e	               sta  f8bbutton+15
.0968	a9 0d		               lda  #flashcol
.096a	8d aa 0e	               sta  f8bbutton
.096d	a2 aa		               ldx  #<f8bbutton
.096f	a0 0e		               ldy  #>f8bbutton
.0971	20 ab 0f	               jsr  putscxy
.0974	20 0b 0b	               jsr  delay
.0977	a9 12		               lda  #18
.0979	8d b9 0e	               sta  f8bbutton+15
.097c	68		               pla
.097d	8d aa 0e	               sta  f8bbutton
.0980	a2 aa		               ldx  #<f8bbutton
.0982	a0 0e		               ldy  #>f8bbutton
.0984	20 ab 0f	               jsr  putscxy
.0987	68		               pla
.0988	aa		               tax
.0989	68		               pla
.098a	28		               plp
.098b	20 13 10	               jsr  push
.098e	a2 20		               ldx  #<blankmsg
.0990	a0 0b		               ldy  #>blankmsg
.0992	20 ab 0f	               jsr  putscxy
.0995	a2 ee		               ldx  #<menua_msg
.0997	a0 0c		               ldy  #>menua_msg
.0999	20 ab 0f	               jsr  putscxy
.099c	20 52 10	               jsr  pop
.099f	49 ff		swapit         eor  #$ff
.09a1	8d 4e 08	               sta  fkeyset
.09a4	20 dd 09	               jsr  showfkeys
.09a7	68		               pla
.09a8	60		               rts
.09a9			staticscreen
.09a9	48		               pha
.09aa	a9 0c		               lda  #vgris1
.09ac	8d 20 d0	               sta  $d020
.09af	68		               pla
.09b0	48		               pha
.09b1	a9 0b		               lda  #vgris
.09b3	8d 21 d0	               sta  $d021
.09b6	68		               pla
.09b7	48		               pha
.09b8	a9 8e		               lda  #b_uppercase
.09ba	8d ff 0e	               sta  characterset
.09bd	20 d2 ff	               jsr  $ffd2
.09c0	68		               pla
.09c1	20 7f 0a	               jsr  showlines
.09c4	20 5e 0a	               jsr  showallchars
.09c7	20 c7 0a	               jsr  showgrid
.09ca	20 dd 09	               jsr  showfkeys
.09cd	8a		               txa
.09ce	48		               pha
.09cf	98		               tya
.09d0	48		               pha
.09d1	a2 00		               ldx  #0
.09d3	a0 07		               ldy  #7
.09d5	20 3c 0f	               jsr  gotoxy
.09d8	68		               pla
.09d9	a8		               tay
.09da	68		               pla
.09db	aa		               tax
.09dc	60		               rts
.09dd			showfkeys
.09dd	20 13 10	               jsr  push
.09e0	ad 4e 08	               lda  fkeyset
.09e3	c9 00		               cmp  #$0
.09e5	d0 3b		               bne  secondks
.09e7	a2 24		                ldx #<f1abutton
.09e9	a0 0d		                ldy #>f1abutton
.09eb	20 ab 0f	                jsr putscxy
.09ee	a2 3e		                ldx #<f2abutton
.09f0	a0 0d		                ldy #>f2abutton
.09f2	20 ab 0f	                jsr putscxy
.09f5	a2 58		                ldx #<f3abutton
.09f7	a0 0d		                ldy #>f3abutton
.09f9	20 ab 0f	                jsr putscxy
.09fc	a2 72		                ldx #<f4abutton
.09fe	a0 0d		                ldy #>f4abutton
.0a00	20 ab 0f	                jsr putscxy
.0a03	a2 8c		                ldx #<f5abutton
.0a05	a0 0d		                ldy #>f5abutton
.0a07	20 ab 0f	                jsr putscxy
.0a0a	a2 a6		                ldx #<f6abutton
.0a0c	a0 0d		                ldy #>f6abutton
.0a0e	20 ab 0f	                jsr putscxy
.0a11	a2 c0		                ldx #<f7abutton
.0a13	a0 0d		                ldy #>f7abutton
.0a15	20 ab 0f	                jsr putscxy
.0a18	a2 da		                ldx #<f8abutton
.0a1a	a0 0d		                ldy #>f8abutton
.0a1c	20 ab 0f	                jsr putscxy
.0a1f	4c 5a 0a	               jmp end
.0a22			secondks
.0a22	a2 f4		                ldx #<f1bbutton
.0a24	a0 0d		                ldy #>f1bbutton
.0a26	20 ab 0f	                jsr putscxy
.0a29	a2 0e		                ldx #<f2bbutton
.0a2b	a0 0e		                ldy #>f2bbutton
.0a2d	20 ab 0f	                jsr putscxy
.0a30	a2 28		                ldx #<f3bbutton
.0a32	a0 0e		                ldy #>f3bbutton
.0a34	20 ab 0f	                jsr putscxy
.0a37	a2 42		                ldx #<f4bbutton
.0a39	a0 0e		                ldy #>f4bbutton
.0a3b	20 ab 0f	                jsr putscxy
.0a3e	a2 5c		                ldx #<f5bbutton
.0a40	a0 0e		                ldy #>f5bbutton
.0a42	20 ab 0f	                jsr putscxy
.0a45	a2 76		                ldx #<f6bbutton
.0a47	a0 0e		                ldy #>f6bbutton
.0a49	20 ab 0f	                jsr putscxy
.0a4c	a2 90		                ldx #<f7bbutton
.0a4e	a0 0e		                ldy #>f7bbutton
.0a50	20 ab 0f	                jsr putscxy
.0a53	a2 aa		                ldx #<f8bbutton
.0a55	a0 0e		                ldy #>f8bbutton
.0a57	20 ab 0f	                jsr putscxy
.0a5a	20 52 10	end            jsr  pop
.0a5d	60		               rts
.0a5e			showallchars
.0a5e	20 13 10	               jsr push
.0a61	8a		               txa
.0a62	48		               pha
.0a63	98		               tya
.0a64	48		               pha
.0a65	a2 00		               ldx  #0
.0a67	a0 00		               ldy  #0
.0a69	20 3c 0f	               jsr  gotoxy
.0a6c	68		               pla
.0a6d	a8		               tay
.0a6e	68		               pla
.0a6f	aa		               tax
.0a70	a2 00		               ldx  #$00
.0a72	8a		nextc          txa
.0a73	9d 00 04	               sta  scrnram,x
.0a76	e8		               inx
.0a77	e0 80		               cpx  #$80
.0a79	d0 f7		               bne  nextc
.0a7b	20 52 10	               jsr  pop
.0a7e	60		               rts
.0a7f			showlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnram+(6*40)+8
.0a7f	20 13 10	               jsr  push
.0a82	a2 28		               ldx  #40
.0a84	a9 40		               lda  #64
.0a86	9d 9f 04	nextl          sta  scrnram+(40*hline1)-1,x  ;On imprime les deux grande
.0a89	9d ef 04	               sta  scrnram+(40*hline2)-1,x  ; lignes horizontales
.0a8c	ca		               dex
.0a8d	e0 10		hline          cpx  #vlinepos
.0a8f	10 03		               bpl  notyet
.0a91	9d d0 06	               sta  scrnram+(40*hline3),x    ;On imprime la demiligne horz.
.0a94	e0 00		notyet         cpx  #$00
.0a96	d0 ee		               bne  nextl
.0a98	a9 00		               lda  #<scrnram+(40*(hline2))+vlinepos
.0a9a	85 fb		               sta  zpage1
.0a9c	a9 05		               lda  #>scrnram+(40*(hline2))+vlinepos
.0a9e	85 fc		               sta  zpage1+1
.0aa0	a0 00		               ldy  #0
.0aa2	a9 72		               lda  #114
.0aa4	91 fb		               sta  (zpage1),y
.0aa6	20 fb 0a	               jsr  zp1add40
.0aa9	a2 12		               ldx  #24-hline2
.0aab	a9 5d		               lda  #93
.0aad	91 fb		another93      sta  (zpage1),y
.0aaf	20 fb 0a	               jsr  zp1add40
.0ab2	ca		               dex
.0ab3	d0 f8		               bne  another93
.0ab5	a9 e0		               lda  #<scrnram+(40*(hline3))+vlinepos
.0ab7	85 fb		               sta  zpage1
.0ab9	a9 06		               lda  #>scrnram+(40*(hline3))+vlinepos
.0abb	85 fc		               sta  zpage1+1
.0abd	a0 00		               ldy  #0
.0abf	a9 73		               lda  #115
.0ac1	91 fb		               sta  (zpage1),y
.0ac3	20 52 10	               jsr  pop
.0ac6	60		               rts
.0ac7			showgrid
=8			gligne=8
=1			gcol=1
.0ac7	20 13 10	               jsr  push
.0aca	20 c4 0e	               jsr  screendis
.0acd	a9 41		               lda  #<scrnram+(40*(gligne))+gcol
.0acf	85 fb		               sta  zpage1
.0ad1	a9 05		               lda  #>scrnram+(40*(gligne))+gcol
.0ad3	85 fc		               sta  zpage1+1
.0ad5	a2 08		               ldx  #8
.0ad7	a9 65		nextbox        lda  #101
.0ad9	a0 09		               ldy  #9
.0adb	91 fb		               sta  (zpage1),y
.0add	88		               dey
.0ade	a9 4f		               lda  #79
.0ae0	91 fb		nextcol        sta  (zpage1),y
.0ae2	88		               dey
.0ae3	d0 fb		               bne  nextcol
.0ae5	20 fb 0a	               jsr  zp1add40
.0ae8	ca		               dex
.0ae9	d0 ec		               bne  nextbox
.0aeb	a0 08		               ldy  #8
.0aed	a9 77		               lda  #119
.0aef	91 fb		nextlin        sta  (zpage1),y
.0af1	88		               dey
.0af2	d0 fb		               bne  nextlin
.0af4	20 d1 0e	               jsr screenena
.0af7	20 52 10	               jsr  pop
.0afa	60		               rts
.0afb			zp1add40
.0afb	08		               php
.0afc	48		               pha
.0afd	18		               clc
.0afe	a5 fb		               lda  zpage1
.0b00	69 28		               adc  #40
.0b02	90 02		               bcc  nocarry
.0b04	e6 fc		               inc  zpage1+1
.0b06	85 fb		nocarry        sta  zpage1
.0b08	68		               pla
.0b09	28		               plp
.0b0a	60		               rts
.0b0b			delay
.0b0b	20 13 10	               jsr  push
.0b0e	a9 00		               lda  #$0
.0b10	aa		               tax
.0b11	a8		               tay
.0b12	ca		xagain         dex
.0b13	88		yagain         dey
.0b14	c0 00		               cpy  #$00
.0b16	d0 fb		               bne  yagain
.0b18	e0 00		               cpx  #$00
.0b1a	d0 f6		               bne  xagain
.0b1c	20 52 10	               jsr  pop
.0b1f	60		               rts

;******  Processing file: messages.asm

=$07			mesgcol = vjaune
>0b20	07 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>0b24	20 20 20 20	               .null     "                                      "
>0b28	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0b38	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0b48	20 20 00
>0b4b	07 00 05 12	edit_msg       .byte     mesgcol,0,5,18
>0b4f	20 45 4e 54	               .null     " entry mode: chr$(   )",146
>0b53	52 59 20 4d 4f 44 45 3a 20 43 48 52 24 28 20 20
>0b63	20 29 92 00
>0b67	07 00 05 92	save_msg       .byte     mesgcol,0,5,146
>0b6b	20 53 41 56	               .null     " save on cassette or disk? (c/d):"
>0b6f	45 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>0b7f	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
>0b8d	07 00 05	load_msg       .byte     mesgcol,0,5
>0b90	20 4c 4f 41	               .null     " load on cassette or disk? (c/d):"
>0b94	44 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>0ba4	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
>0bb2	07 00 05	copy_msg       .byte     mesgcol,0,5
>0bb5	20 45 4e 54	               .null     " enter character to copy:"
>0bb9	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>0bc9	43 4f 50 59 3a 00
>0bcf	07 00 05	clear_msg      .byte     mesgcol,0,5
>0bd2	20 43 4c 45	               .null     " clear char: chr$(   )"
>0bd6	41 52 20 43 48 41 52 3a 20 43 48 52 24 28 20 20
>0be6	20 29 00
>0be9	07 00 05	fill_msg       .byte     mesgcol,0,5
>0bec	20 46 49 4c	               .null     " fill char:  chr$(   )"
>0bf0	4c 20 43 48 41 52 3a 20 20 43 48 52 24 28 20 20
>0c00	20 29 00
>0c03	07 00 05	work_msg       .byte     mesgcol,0,5
>0c06	20 45 4e 41	               .null     " enable work space"
>0c0a	42 4c 45 20 57 4f 52 4b 20 53 50 41 43 45 00
>0c19	07 00 05	rvrs_msg       .byte     mesgcol,0,5
>0c1c	20 52 45 56	               .null     " reverse character:"
>0c20	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
>0c30	07 00 05	invr_msg       .byte     mesgcol,0,5
>0c33	20 49 4e 56	               .null     " inverting character:"
>0c37	45 52 54 49 4e 47 20 43 48 41 52 41 43 54 45 52
>0c47	3a 00
>0c49	07 00 05	flip_msg       .byte     mesgcol,0,5
>0c4c	20 46 4c 49	               .null     " flipping character:"
>0c50	50 50 49 4e 47 20 43 48 41 52 41 43 54 45 52 3a
>0c60	00
>0c61	07 00 05	scrollr_msg    .byte     mesgcol,0,5
>0c64	20 53 43 52	               .null     " scrolling right:"
>0c68	4f 4c 4c 49 4e 47 20 52 49 47 48 54 3a 00
>0c76	07 00 05	scrolll_msg    .byte     mesgcol,0,5
>0c79	20 53 43 52	               .null     " scrolling left:"
>0c7d	4f 4c 4c 49 4e 47 20 4c 45 46 54 3a 00
>0c8a	07 00 05	scrollu_msg    .byte     mesgcol,0,5
>0c8d	20 53 43 52	               .null     " scrolling up:"
>0c91	4f 4c 4c 49 4e 47 20 55 50 3a 00
>0c9c	07 00 05	scrolld_msg    .byte     mesgcol,0,5
>0c9f	20 53 43 52	               .null     " scrolling down:"
>0ca3	4f 4c 4c 49 4e 47 20 44 4f 57 4e 3a 00
>0cb0	07 00 05	save_fname_msg .byte     mesgcol,0,5
>0cb3	20 53 41 56	               .null     " save: file name ------.chr"
>0cb7	45 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>0cc7	2d 2d 2d 2e 43 48 52 00
>0ccf	07 00 05	load_fname_msg .byte     mesgcol,0,5
>0cd2	20 4c 4f 41	               .null     " load: file name ------.chr"
>0cd6	44 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>0ce6	2d 2d 2d 2e 43 48 52 00
>0cee	07 00 05	menua_msg      .byte     mesgcol,0,5
>0cf1	20 59 4f 55	               .null     " you are now in menu a."
>0cf5	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>0d05	20 41 2e 00
>0d09	07 00 05	menub_msg      .byte     mesgcol,0,5
>0d0c	20 59 4f 55	               .null     " you are now in menu b."
>0d10	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>0d20	20 42 2e 00
=18			fkeyleft=18
=8			f1top=8
=1			menu1col = 1
=3			menu2col = 3
>0d24	01 12 08	f1abutton      .byte     menu1col,fkeyleft,f1top       ;133
>0d27	45 44 49 54	               .text     "edit....... "
>0d2b	2e 2e 2e 2e 2e 2e 2e 20
>0d33	12		               .byte     18             ; position 15
>0d34	20 20 20 46	               .text     "   f1   "
>0d38	31 20 20 20
>0d3c	92 00		               .byte     146,0
>0d3e	01 12 0a	f2abutton      .byte     menu1col,fkeyleft,f1top+2     ;137
>0d41	53 41 56 45	               .text     "save....... "
>0d45	2e 2e 2e 2e 2e 2e 2e 20
>0d4d	12		               .byte     18            ; position 15
>0d4e	20 20 20 46	               .text     "   f2   "
>0d52	32 20 20 20
>0d56	92 00		               .byte     146,0
>0d58	01 12 0c	f3abutton      .byte     menu1col,fkeyleft,f1top+4     ;134
>0d5b	4c 4f 41 44	               .text     "load....... "
>0d5f	2e 2e 2e 2e 2e 2e 2e 20
>0d67	12		               .byte     18             ; position 15
>0d68	20 20 20 46	               .text     "   f3   "
>0d6c	33 20 20 20
>0d70	92 00		               .byte     146,0
>0d72	01 12 0e	f4abutton      .byte     menu1col,fkeyleft,f1top+6     ;138
>0d75	43 4f 50 59	               .text     "copy....... "
>0d79	2e 2e 2e 2e 2e 2e 2e 20
>0d81	12		               .byte     18             ; position 15
>0d82	20 20 20 46	               .text     "   f4   "
>0d86	34 20 20 20
>0d8a	92 00		               .byte     146,0
>0d8c	01 12 10	f5abutton      .byte     menu1col,fkeyleft,f1top+8     ;135
>0d8f	43 4c 45 41	               .text     "clear...... "
>0d93	52 2e 2e 2e 2e 2e 2e 20
>0d9b	12		               .byte     18             ; position 15
>0d9c	20 20 20 46	               .text     "   f5   "
>0da0	35 20 20 20
>0da4	92 00		               .byte     146,0
>0da6	01 12 12	f6abutton      .byte     menu1col,fkeyleft,f1top+10    ;139
>0da9	46 49 4c 4c	               .text     "fill....... "
>0dad	2e 2e 2e 2e 2e 2e 2e 20
>0db5	12		               .byte     18             ; position 15
>0db6	20 20 20 46	               .text     "   f6   "
>0dba	36 20 20 20
>0dbe	92 00		               .byte     146,0
>0dc0	01 12 14	f7abutton      .byte     menu1col,fkeyleft,f1top+12    ;136
>0dc3	57 4f 52 4b	               .text     "work....... "
>0dc7	2e 2e 2e 2e 2e 2e 2e 20
>0dcf	12		               .byte     18             ; position 15
>0dd0	20 20 20 46	               .text     "   f7   "
>0dd4	37 20 20 20
>0dd8	92 00		               .byte     146,0
>0dda	01 12 16	f8abutton      .byte     menu1col,fkeyleft,f1top+14    ;140
>0ddd	46 55 4e 43	               .text     "function... "
>0de1	54 49 4f 4e 2e 2e 2e 20
>0de9	12		               .byte     18             ; position 15
>0dea	20 20 20 46	               .text     "   f8   "
>0dee	38 20 20 20
>0df2	92 00		               .byte     146,0
>0df4	03 12 08	f1bbutton      .byte     menu2col,fkeyleft,f1top
>0df7	52 45 56 45	               .text     "reverse.... "
>0dfb	52 53 45 2e 2e 2e 2e 20
>0e03	12		               .byte     18             ; position 15
>0e04	20 20 20 46	               .text     "   f1   "
>0e08	31 20 20 20
>0e0c	92 00		               .byte     146,0
>0e0e	03 12 0a	f2bbutton      .byte     menu2col,fkeyleft,f1top+2
>0e11	49 4e 56 45	               .text     "invert..... "
>0e15	52 54 2e 2e 2e 2e 2e 20
>0e1d	12		               .byte     18             ; position 15
>0e1e	20 20 20 46	               .text     "   f2   "
>0e22	32 20 20 20
>0e26	92 00		               .byte     146,0
>0e28	03 12 0c	f3bbutton      .byte     menu2col,fkeyleft,f1top+4
>0e2b	46 4c 49 50	               .text     "flip....... "
>0e2f	2e 2e 2e 2e 2e 2e 2e 20
>0e37	12		               .byte     18             ; position 15
>0e38	20 20 20 46	               .text     "   f3   "
>0e3c	33 20 20 20
>0e40	92 00		               .byte     146,0
>0e42	03 12 0e	f4bbutton      .byte     menu2col,fkeyleft,f1top+6
>0e45	53 43 52 4f	               .text     "scroll r... "
>0e49	4c 4c 20 52 2e 2e 2e 20
>0e51	12		               .byte     18             ; position 15
>0e52	20 20 20 46	               .text     "   f4   "
>0e56	34 20 20 20
>0e5a	92 00		               .byte     146,0
>0e5c	03 12 10	f5bbutton      .byte     menu2col,fkeyleft,f1top+8
>0e5f	53 43 52 4f	               .text     "scroll l... "
>0e63	4c 4c 20 4c 2e 2e 2e 20
>0e6b	12		               .byte     18             ; position 15
>0e6c	20 20 20 46	               .text     "   f5   "
>0e70	35 20 20 20
>0e74	92 00		               .byte     146,0
>0e76	03 12 12	f6bbutton      .byte     menu2col,fkeyleft,f1top+10
>0e79	53 43 52 4f	               .text     "scroll u... "
>0e7d	4c 4c 20 55 2e 2e 2e 20
>0e85	12		               .byte     18             ; position 15
>0e86	20 20 20 46	               .text     "   f6   "
>0e8a	36 20 20 20
>0e8e	92 00		               .byte     146,0
>0e90	03 12 14	f7bbutton      .byte     menu2col,fkeyleft,f1top+12
>0e93	53 43 52 4f	               .text     "scroll d... "
>0e97	4c 4c 20 44 2e 2e 2e 20
>0e9f	12		               .byte     18             ; position 15
>0ea0	20 20 20 46	               .text     "   f7   "
>0ea4	37 20 20 20
>0ea8	92 00		               .byte     146,0
>0eaa	03 12 16	f8bbutton      .byte     menu2col,fkeyleft,f1top+14
>0ead	46 55 4e 43	               .text     "function... "
>0eb1	54 49 4f 4e 2e 2e 2e 20
>0eb9	12		               .byte     18             ; position 15
>0eba	20 20 20 46	               .text     "   f8   "
>0ebe	38 20 20 20
>0ec2	92 00		               .byte     146,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ;  97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c1			stal            =       $c1     ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.0ec4			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.0ec4			screendis
.0ec4	08		               php
.0ec5	48		               pha
.0ec6	ad 11 d0	               lda  $d011
.0ec9	29 ef		               and  #%11101111
.0ecb	8d 11 d0	               sta  $d011
.0ece	68		               pla
.0ecf	28		               plp
.0ed0	60		               rts
.0ed1			screenena
.0ed1	08		               php
.0ed2	48		               pha
.0ed3	ad 11 d0	               lda  $d011
.0ed6	09 10		               ora  #%00010000
.0ed8	8d 11 d0	               sta  $d011
.0edb	68		               pla
.0edc	28		               plp
.0edd	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0ede			scrmaninit
.0ede	20 13 10	               jsr  push
.0ee1	a9 06		               lda  #vbleu
.0ee3	8d 21 d0	               sta  vicbackcol
.0ee6	a9 05		               lda  #vvert
.0ee8	8d 20 d0	               sta  vicbordcol
.0eeb	a9 01		               lda  #vblanc
.0eed	8d 86 02	               sta  bascol
.0ef0	ad 00 04	               lda  scrnram
.0ef3	29 fd		               and  #%11111101
.0ef5	8d 00 04	               sta  scrnram
.0ef8	20 00 0f	               jsr  cls
.0efb	20 52 10	               jsr  pop
.0efe	60		               rts
>0eff	8e		characterset   .byte b_uppercase
.0f00			cls
.0f00	08		               php
.0f01	48		               pha
.0f02	a9 93		               lda  #$93
.0f04	20 1c 0f	               jsr  putch
.0f07	a9 0e		               lda  #$0e
.0f09	20 1c 0f	               jsr  putch
.0f0c	68		               pla
.0f0d	28		               plp
.0f0e	60		               rts
.0f0f			putnch
.0f0f	08		               php
.0f10	e0 00		               cpx  #$00
.0f12	f0 06		               beq  out
.0f14	20 d2 ff	again          jsr  $ffd2
.0f17	ca		               dex
.0f18	d0 fa		               bne  again
.0f1a	28		out            plp
.0f1b	60		               rts
.0f1c			putch
.0f1c	08		               php
.0f1d	20 d2 ff	               jsr  $ffd2
.0f20	28		               plp
.0f21	60		               rts
.0f22			puts
.0f22	20 13 10	               jsr  push
.0f25	86 fb		               stx  zpage1
.0f27	84 fc		               sty  zpage1+1
.0f29	a0 00		               ldy  #0
.0f2b	b1 fb		next           lda  (zpage1),y
.0f2d	f0 09		               beq  exit
.0f2f	20 1c 0f	               jsr  putch
.0f32	20 1a 11	               jsr  inczp1
.0f35	4c 2b 0f	               jmp  next
.0f38	20 52 10	exit           jsr  pop
.0f3b	60		               rts
.0f3c			gotoxy
.0f3c	08		               php
.0f3d	18		               clc
.0f3e	8a		               txa
.0f3f	48		               pha
.0f40	98		               tya
.0f41	aa		               tax
.0f42	68		               pla
.0f43	a8		               tay
.0f44	20 f0 ff	               jsr  kplot
.0f47	28		               plp
.0f48	60		               rts
.0f49			cursor
=$0286			bascol    =    $0286
.0f49	08		               php
.0f4a	48		               pha
.0f4b	90 12		               bcc  restore
.0f4d	20 f0 ff	               jsr  kplot
.0f50	8c 71 0f	               sty  cx
.0f53	8e 72 0f	               stx  cy
.0f56	ad 86 02	               lda  bascol
.0f59	8d 73 0f	               sta  bcol
.0f5c	4c 6e 0f	               jmp  out
.0f5f	ae 72 0f	restore        ldx  cy
.0f62	ac 71 0f	               ldy  cx
.0f65	20 f0 ff	               jsr  kplot
.0f68	ad 73 0f	               lda  bcol
.0f6b	8d 86 02	               sta  bascol
.0f6e	68		out            pla
.0f6f	28		               plp
.0f70	60		               rts
>0f71	00		cx   .byte     $00
>0f72	00		cy   .byte     $00
>0f73	00		bcol .byte     $00
.0f74			cursave
.0f74	08		               php
.0f75	38		               sec
.0f76	20 49 0f	               jsr  cursor
.0f79	28		               plp
.0f7a	60		               rts
.0f7b			curput
.0f7b	08		               php
.0f7c	18		               clc
.0f7d	20 49 0f	               jsr  cursor
.0f80	28		               plp
.0f81	60		               rts
.0f82			putsxy
.0f82	20 13 10	               jsr  push
.0f85	86 fb		               stx  zpage1
.0f87	84 fc		               sty  zpage1+1
.0f89	a0 00		               ldy  #$00
.0f8b	b1 fb		               lda  (zpage1),y
.0f8d	aa		               tax
.0f8e	20 1a 11	               jsr  inczp1
.0f91	b1 fb		               lda  (zpage1),y
.0f93	a8		               tay
.0f94	20 3c 0f	               jsr  gotoxy
.0f97	20 1a 11	               jsr  inczp1
.0f9a	a6 fb		               ldx  zpage1
.0f9c	a4 fc		               ldy  zpage1+1
.0f9e	20 22 0f	               jsr  puts
.0fa1	20 52 10	               jsr  pop
.0fa4	60		               rts
>0fa5	00 00		straddr   .word     $00
>0fa7	00		px        .byte     $00
>0fa8	00		py        .byte     $00
>0fa9	00 00		zp1       .word     $00
.0fab			putscxy
.0fab	20 13 10	               jsr  push
.0fae	84 fc		               sty  zpage1+1
.0fb0	86 fb		               stx  zpage1
.0fb2	ad 86 02	               lda  bascol
.0fb5	8d d5 0f	               sta  bc
.0fb8	a0 00		               ldy #$00
.0fba	b1 fb		               lda  (zpage1),y
.0fbc	8d 86 02	               sta  bascol
.0fbf	20 1a 11	               jsr  inczp1
.0fc2	a6 fb		               ldx  zpage1
.0fc4	a4 fc		               ldy  zpage1+1
.0fc6	20 82 0f	               jsr  putsxy
.0fc9	ad d5 0f	               lda  bc
.0fcc	8d 86 02	               sta  bascol
.0fcf	20 52 10	               jsr  pop
.0fd2	60		               rts
>0fd3	00 00		straddr  .word      $00
>0fd5	00		bc       .byte      $00
>0fd6	00 00		zp1      .word      $00
.0fd8			putrahex
.0fd8	08		               php
.0fd9	48		               pha
.0fda	20 20 12	               jsr  a2hex
.0fdd	a9 cc		               lda  #<a2hexstr
.0fdf	a0 11		               ldy  #>a2hexstr
.0fe1	20 22 0f	               jsr  puts
.0fe4	68		               pla
.0fe5	28		               plp
.0fe6	60		               rts
.0fe7			kputrahexxy
.0fe7			bputrahexxy
.0fe7			putrahexxy
.0fe7	08		               php
.0fe8	20 20 12	               jsr  a2hex
.0feb	a9 c9		               lda  #<a2hexpos
.0fed	a0 11		               ldy  #>a2hexpos
.0fef	20 82 0f	               jsr  putsxy
.0ff2	68		               pla
.0ff3	28		               plp
.0ff4	60		               rts
.0ff5			putrahexcxy
.0ff5	08		               php
.0ff6	20 20 12	               jsr  a2hex
.0ff9	a9 c9		               lda  #<a2hexpos
.0ffb	a0 11		               ldy  #>a2hexpos
.0ffd	20 ab 0f	               jsr  putscxy
.1000	68		               pla
.1001	28		               plp
.1002	60		               rts
.1003			setinverse
.1003	48		               pha
.1004	a9 12		               lda  #$12
.1006	20 d2 ff	               jsr  $ffd2
.1009	68		               pla
.100a	60		               rts
.100b			clrinverse
.100b	48		               pha
.100c	a9 92		               lda  #$92
.100e	20 d2 ff	               jsr  $ffd2
.1011	68		               pla
.1012	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.1013			push
.1013	08		          php            ; stack : flg, pcl, pch
.1014	78		          sei
.1015	8d 4f 10	          sta  ra        ; save a
.1018	68		          pla            ; stack : pcl, pch
.1019	8d 4e 10	          sta  rp        ; save rp
.101c	68		          pla            ; stack : pch
.101d	8d 50 10	          sta  pc        ; save pcl
.1020	68		          pla            ; stack : -
.1021	8d 51 10	          sta  pc+1      ; save pch
.1024	a5 fb		          lda  zpage1    ; get zpage1 low byte
.1026	48		          pha            ; stack : zp1l
.1027	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.1029	48		          pha            ; stack : zp1h, zp1l
.102a	a5 fd		          lda  zpage2    ; get zpage2 low byte
.102c	48		          pha            ; stack : zp2l, zp1h, zp1l
.102d	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.102f	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1030	ad 4e 10	          lda  rp        ; get rp
.1033	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1034	ad 4f 10	          lda  ra        ; get a
.1037	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1038	8a		          txa            ; get x
.1039	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.103a	98		          tya            ; get y
.103b	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.103c	ad 51 10	          lda  pc+1      ; get pch
.103f	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1040	ad 50 10	          lda  pc        ; get pcl
.1043	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1044	ad 4e 10	          lda  rp        ; get rp
.1047	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1048	ad 4f 10	          lda  ra        ; get a
.104b	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.104c	58		          cli
.104d	60		          rts
>104e	00		rp        .byte     0
>104f	00		ra        .byte     0
>1050	00 00		pc        .word     0
.1052			pull
.1052			pop
.1052	78		          sei
.1053	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1054	8d 87 10	          sta  pc        ; save pcl
.1057	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1058	8d 88 10	          sta  pc+1      ; save pch
.105b	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.105c	a8		          tay            ; set y
.105d	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.105e	aa		          tax            ; set x
.105f	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1060	8d 86 10	          sta  ra        ; save a
.1063	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1064	8d 85 10	          sta  rp        ; save rp
.1067	68		          pla            ; stack : zp2l, zp1h, zp1l
.1068	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.106a	68		          pla            ; stack : zp1h, zp1l
.106b	85 fd		          sta  zpage2    ; get zpage2 High byte
.106d	68		          pla            ; stack : zp1l
.106e	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.1070	68		          pla            ; stack :
.1071	85 fb		          sta  zpage1    ; get zpage1 High byte
.1073	ad 88 10	          lda  pc+1      ; get pch
.1076	48		          pha            ; stack : pch
.1077	ad 87 10	          lda  pc
.107a	48		          pha            ; stack : pcl, pch
.107b	ad 85 10	          lda  rp        ; get rp
.107e	48		          pha            ; stack : rp, pcl, pch
.107f	ad 86 10	          lda  ra        ; set ra
.1082	58		          cli
.1083	28		          plp            ; stack : pcl, pch
.1084	60		          rts
>1085	00		rp        .byte     0
>1086	00		ra        .byte     0
>1087	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.1089			blkfill
.1089	20 13 10	bf0            jsr  push
.108c	20 47 11	               jsr  savezp1
.108f	84 fc		               sty  zpage1+1
.1091	a0 00		               ldy  #$00
.1093	84 fb		               sty  zpage1
.1095	91 fb		bf1            sta  (zpage1),y
.1097	c8		               iny
.1098	d0 fb		               bne  bf1
.109a	20 56 11	               jsr  restzp1
.109d	20 52 10	               jsr  pop
.10a0	60		               rts
.10a1			memfill
.10a1	20 13 10	               jsr  push
.10a4	20 89 10	mf1            jsr  blkfill
.10a7	c8		               iny
.10a8	ca		               dex
.10a9	d0 f9		               bne  mf1
.10ab	20 52 10	               jsr  pop
.10ae	60		               rts
.10af			memmove
.10af	20 13 10	               jsr  push
.10b2	ba		               tsx            ; On se crée un pointeur ...
.10b3	8a		               txa
.10b4	18		               clc
.10b5	69 0b		               adc  #11
.10b7	a8		               tay
.10b8	a2 06		               ldx  #$06
.10ba	b9 00 01	nextbyte       lda  $0100,y
.10bd	99 09 11	               sta  words,y
.10c0	c8		               iny
.10c1	ca		               dex
.10c2	d0 f6		               bne  nextbyte
.10c4	ad 09 11	               lda  s
.10c7	8d e0 10	               sta  source+1
.10ca	ad 0a 11	               lda  s+1
.10cd	8d e1 10	               sta  source+2
.10d0	ad 0b 11	               lda  d
.10d3	8d dd 10	               sta  destin+1
.10d6	ad 0c 11	               lda  d+1
.10d9	8d de 10	               sta  destin+2
.10dc	ad ff ff	destin         lda  $ffff
.10df	8d ff ff	source         sta  $ffff
.10e2	ee dd 10	               inc  destin+1
.10e5	d0 03		               bne  src
.10e7	ee de 10	               inc  destin+2
.10ea	ee e0 10	src            inc  source+1
.10ed	d0 03		               bne  cnt
.10ef	ee e1 10	               inc  source+2
.10f2	ad 0d 11	cnt            lda  compte
.10f5	d0 08		               bne  decit
.10f7	ad 0e 11	               lda  compte+1
.10fa	f0 09		               beq  fini
.10fc	ce 0e 11	               dec  compte+1
.10ff	ce 0d 11	decit          dec  compte
.1102	4c dc 10	               jmp  destin
.1105	20 52 10	fini           jsr  pop
.1108	60		               rts
.1109			words
>1109	00 00		s         .word     $0000
>110b	00 00		d         .word     $0000
>110d	00 00		compte    .word     $0000
.110f			decword
.110f	20 13 10	               jsr  push
.1112	86 fd		               stx  zpage2
.1114	84 fe		               sty  zpage2+1
.1116	20 52 10	               jsr  pop
.1119	60		               rts
.111a			inczp1
.111a	08		               php
.111b	e6 fb		               inc  zpage1
.111d	d0 02		               bne  nopage
.111f	e6 fc		               inc  zpage1+1
.1121	28		nopage         plp
.1122	60		               rts
.1123			deczp1
.1123	08		                php
.1124	48		                pha
.1125	c6 fb		                dec  zpage1
.1127	d0 02		                bne  nopage
.1129	c6 fc		                dec  zpage1+1
.112b	c6 fb		nopage          dec  zpage1
.112d	68		                pla
.112e	28		                plp
.112f	60		                rts
.1130			inczp2
.1130	08		               php
.1131	48		               pha
.1132	e6 fd		               inc  zpage2
.1134	d0 02		               bne  nopage
.1136	e6 fe		               inc  zpage2+1
.1138	68		nopage         pla
.1139	28		               plp
.113a	60		               rts
.113b			deczp2
.113b	08		               php
.113c	48		               pha
.113d	a5 fd		               lda  zpage2
.113f	d0 02		               bne  nopage
.1141	c6 fe		               dec  zpage2+1
.1143	c6 fd		nopage         dec  zpage2
.1145	28		               plp
.1146	60		               rts
.1147			savezp1
.1147	08		               php
.1148	48		               pha
.1149	a5 fb		               lda  zpage1
.114b	8d c3 11	               sta  zp1
.114e	a5 fc		               lda  zpage1+1
.1150	8d c4 11	               sta  zp1+1
.1153	68		               pla
.1154	28		               plp
.1155	60		               rts
.1156			restzp1
.1156	08		               php
.1157	48		               pha
.1158	ad c3 11	               lda zp1
.115b	85 fb		               sta zpage1
.115d	ad c4 11	               lda zp1+1
.1160	85 fc		               sta zpage1+1
.1162	68		               pla
.1163	28		               plp
.1164	60		               rts
.1165			savezp2
.1165	08		         php
.1166	48		         pha
.1167	a5 fd		         lda zpage2
.1169	8d c5 11	         sta zp2
.116c	a5 fe		         lda zpage2+1
.116e	8d c6 11	         sta zp2+1
.1171	68		         pla
.1172	28		         plp
.1173	60		         rts
.1174			restzp2
.1174	08		                php
.1175	48		                pha
.1176	ad c5 11	                lda  zp2
.1179	85 fd		                sta  zpage2
.117b	ad c6 11	                lda  zp2+1
.117e	85 fe		                sta  zpage2+1
.1180	68		                pla
.1181	28		                plp
.1182	60		                rts
.1183			xy2addr
.1183	08		                php
.1184	48		                pha
.1185	8a		                txa
.1186	48		                pha
.1187	98		                tya
.1188	48		                pha
.1189	ad be 11	                lda     addr1+1
.118c	8d c0 11	                sta     addr2+1
.118f	ad bd 11	                lda     addr1
.1192	8d bf 11	                sta     addr2
.1195	c0 00		                cpy     #$00
.1197	f0 0f		                beq     addx
.1199	18		moreline        clc
.119a	6d bc 11	                adc     ymult
.119d	90 03		                bcc     norepy
.119f	ee c0 11	                inc     addr2+1
.11a2	8d bf 11	norepy          sta     addr2
.11a5	88		                dey
.11a6	d0 f1		                bne     moreline
.11a8	8a		addx            txa
.11a9	18		                clc
.11aa	6d bf 11	                adc     addr2
.11ad	90 03		                bcc     thatsit
.11af	ee c0 11	                inc     addr2+1
.11b2	8d bf 11	thatsit         sta     addr2
.11b5	68		                pla
.11b6	a8		                tay
.11b7	68		                pla
.11b8	aa		                tax
.11b9	68		                pla
.11ba	28		                plp
.11bb	60		                rts
>11bc	28		ymult          .byte     40
>11bd	00 00		addr1          .word     $0000
>11bf	00 00		addr2          .word     $0000
>11c1	00 00		bytecnt        .word     $0000
>11c3	00 00		zp1        .word   $0000
>11c5	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>11c7	01		a2hexcol       .byte     1              ; pour aputscxy
>11c8	00		a2hexbkcol     .byte     %00000000
.11c9			a2hexpos
>11c9	00		a2hexpx        .byte     0              ; pour aputsxy
>11ca	00		a2hexpy        .byte     0
>11cb	24		a2hexprefix    .byte     "$"            ; pour aputs
>11cc	00 00		a2hexstr       .word     $00
>11ce	00 00		               .word     $00
>11d0	00		               .byte     0              ; 0 end string
.11d1			putahexfmtxy
.11d1	20 13 10	               jsr  push
.11d4	20 20 12	               jsr  a2hex
.11d7	ae c9 11	               ldx  a2hexpx
.11da	ac ca 11	               ldy  a2hexpy
.11dd	20 3c 0f	               jsr  gotoxy
.11e0	a2 cb		               ldx  #<a2hexprefix
.11e2	a0 11		               ldy  #>a2hexprefix
.11e4	20 22 0f	               jsr  puts
.11e7	20 52 10	               jsr  pop
.11ea	60		               rts
.11eb			putahexfmt
.11eb	20 13 10	               jsr  push
.11ee	20 20 12	               jsr  a2hex
.11f1	a2 cb		               ldx  #<a2hexprefix
.11f3	a0 11		               ldy  #>a2hexprefix
.11f5	20 22 0f	               jsr  puts
.11f8	20 52 10	               jsr  pop
.11fb	60		               rts
.11fc			putahex
.11fc	20 13 10	               jsr  push
.11ff	20 20 12	               jsr  a2hex
.1202	a2 cc		               ldx  #<a2hexstr
.1204	a0 11		               ldy  #>a2hexstr
.1206	20 22 0f	               jsr  puts
.1209	20 52 10	               jsr  pop
.120c	60		               rts
.120d			nib2hex
.120d	08		               php
.120e	29 0f		               and  #$0f
.1210	f8		               sed
.1211	18		               clc
.1212	69 90		               adc  #$90
.1214	69 40		               adc  #$40
.1216	d8		               cld
.1217	28		               plp
.1218	60		               rts
.1219			lsra4bits
.1219	08		               php
.121a	4a		               lsr
.121b	4a		               lsr
.121c	4a		               lsr
.121d	4a		               lsr
.121e	28		               plp
.121f	60		               rts
.1220			a2hex
.1220	08		               php
.1221	48		               pha
.1222	48		               pha
.1223	20 19 12	               jsr  lsra4bits
.1226	20 0d 12	               jsr  nib2hex
.1229	8d cc 11	               sta  a2hexstr
.122c	68		               pla
.122d	20 0d 12	               jsr  nib2hex
.1230	8d cd 11	               sta  a2hexstr+1
.1233	a9 00		               lda  #$00                ; set end of string
.1235	8d ce 11	               sta  a2hexstr+2
.1238	68		               pla
.1239	28		               plp
.123a	60		               rts
.123b			xy2hex
.123b	20 13 10	               jsr  push
.123e	20 20 12	               jsr  a2hex
.1241	8a		               txa
.1242	48		               pha
.1243	20 19 12	               jsr  lsra4bits
.1246	20 0d 12	               jsr  nib2hex
.1249	8d cc 11	               sta  a2hexstr
.124c	68		               pla
.124d	20 0d 12	               jsr  nib2hex
.1250	8d cd 11	               sta  a2hexstr+1
.1253	98		               tya
.1254	48		               pha
.1255	20 19 12	               jsr  lsra4bits
.1258	20 0d 12	               jsr  nib2hex
.125b	8d ce 11	               sta  a2hexstr+2
.125e	68		               pla
.125f	20 0d 12	               jsr  nib2hex
.1262	8d cf 11	               sta  a2hexstr+3
.1265	a9 00		               lda  #$00                ; 0 ended string
.1267	8d d0 11	               sta  a2hexstr+4
.126a	20 52 10	               jsr  pop
.126d			atobin
.126d	20 13 10	               jsr     push
.1270	a2 08		               ldx     #8
.1272	a0 00		               ldy     #0
.1274	2a		nextbit        rol
.1275	48		               pha
.1276	69 00		               adc     #$00
.1278	29 01		               and     #$01
.127a	20 0d 12	               jsr     nib2hex
.127d	99 8e 12	               sta     abin,y
.1280	68		               pla
.1281	c8		               iny
.1282	ca		               dex
.1283	d0 ef		               bne     nextbit
.1285	a9 00		               lda     #0
.1287	99 8e 12	               sta     abin,y
.128a	20 52 10	               jsr     pull
.128d	60		               rts
>128e	30 30 30 30	abin           .null   "00000000"
>1292	30 30 30 30 00
.1297			putabin
.1297	20 6d 12	               jsr     atobin
.129a	20 13 10	               jsr     push
.129d	a2 8e		               ldx     #<abin
.129f	a0 12		               ldy     #>abin
.12a1	20 22 0f	               jsr     puts
.12a4	20 52 10	               jsr     pop
.12a7	60		               rts
.12a8			putabinfmt
.12a8	08		               php
.12a9	48		               pha
.12aa	a9 25		               lda     #"%"
.12ac	20 1c 0f	               jsr     putch
.12af	68		               pla
.12b0	20 97 12	               jsr     putabin
.12b3	28		               plp
.12b4	60		               rts
.12b5			putabinxy
.12b5	20 3c 0f	               jsr     gotoxy
.12b8	20 97 12	               jsr     putabin
.12bb	60		               rts
.12bc			putabinfmtxy
.12bc	20 3c 0f	               jsr     gotoxy
.12bf	20 a8 12	               jsr     putabinfmt
.12c2	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a     =    $41
=$42			key_b     =    $42
=$43			key_c     =    $43
=$44			key_d     =    $44
=$45			key_e     =    $45
=$46			key_f     =    $46
=$47			key_g     =    $47
=$48			key_h     =    $48
=$49			key_i     =    $49
=$4a			key_j     =    $4a
=$4b			key_k     =    $4b
=$4c			key_l     =    $4c
=$4d			key_m     =    $4d
=$4e			key_n     =    $4e
=$4f			key_o     =    $4f
=$50			key_p     =    $50
=$51			key_q     =    $51
=$52			key_r     =    $52
=$53			key_s     =    $53
=$54			key_t     =    $54
=$55			key_u     =    $55
=$56			key_v     =    $56
=$57			key_w     =    $57
=$58			key_x     =    $58
=$59			key_y     =    $59
=$5a			key_z     =    $5a
=$c1			shift_a   =    $c1
=$c2			shift_b   =    $c2
=$c3			shift_c   =    $c3
=$c4			shift_d   =    $c4
=$c5			shift_e   =    $c5
=$c6			shift_f   =    $c6
=$c7			shift_g   =    $c7
=$c8			shift_h   =    $c8
=$c9			shift_i   =    $c9
=$ca			shift_j   =    $ca
=$cb			shift_k   =    $cb
=$cc			shift_l   =    $cc
=$cd			shift_m   =    $cd
=$ce			shift_n   =    $ce
=$cf			shift_o   =    $cf
=$d0			shift_p   =    $d0
=$d1			shift_q   =    $d1
=$d2			shift_r   =    $d2
=$d3			shift_s   =    $d3
=$d4			shift_t   =    $d4
=$d5			shift_u   =    $d5
=$d6			shift_v   =    $d6
=$d7			shift_w   =    $d7
=$d8			shift_x   =    $d8
=$d9			shift_y   =    $d9
=$da			shift_z   =    $da
=$01			ctrl_a    =    $01
=$02			ctrl_b    =    $02
=$03			ctrl_c    =    $03
=$04			ctrl_d    =    $04
=$05			ctrl_e    =    $05
=$06			ctrl_f    =    $06
=$07			ctrl_g    =    $07
=$08			ctrl_h    =    $08
=$09			ctrl_i    =    $09
=$0a			ctrl_j    =    $0a
=$0b			ctrl_k    =    $0b
=$0c			ctrl_l    =    $0c
=$0d			ctrl_m    =    $0d
=$0e			ctrl_n    =    $0e
=$0f			ctrl_o    =    $0f
=$10			ctrl_p    =    $10
=$11			ctrl_q    =    $11
=$12			ctrl_r    =    $12
=$13			ctrl_s    =    $13
=$14			ctrl_t    =    $14
=$15			ctrl_u    =    $15
=$16			ctrl_v    =    $16
=$17			ctrl_w    =    $17
=$18			ctrl_x    =    $18
=$19			ctrl_y    =    $19
=$1a			ctrl_z    =    $1a
=$b0			comd_a    =    $b0
=$bf			comd_b    =    $bf
=$bc			comd_c    =    $bc
=$ac			comd_d    =    $ac
=$b1			comd_e    =    $b1
=$bb			comd_f    =    $bb
=$a5			comd_g    =    $a5
=$b4			comd_h    =    $b4
=$a2			comd_i    =    $a2
=$b5			comd_j    =    $b5
=$a1			comd_k    =    $a1
=$b6			comd_l    =    $b6
=$a7			comd_m    =    $a7
=$aa			comd_n    =    $aa
=$b9			comd_o    =    $b9
=$af			comd_p    =    $af
=$ab			comd_q    =    $ab
=$b2			comd_r    =    $b2
=$ae			comd_s    =    $ae
=$a3			comd_t    =    $a3
=$b8			comd_u    =    $b8
=$be			comd_v    =    $be
=$b3			comd_w    =    $b3
=$bd			comd_x    =    $bd
=$b7			comd_y    =    $b7
=$ad			comd_z    =    $ad
.12c3			waitstop
.12c3	20 13 10	               jsr  push
.12c6	20 ed f6	wait           jsr  k_stop
.12c9	d0 fb		               bne  wait
.12cb	20 52 10	               jsr  pop
.12ce	60		               rts
.12cf			anykey
.12cf	08		               php
.12d0	48		               pha
.12d1	a5 cb		nokey          lda 203
.12d3	c9 40		               cmp #64
.12d5	f0 fa		               beq nokey
.12d7	20 dd 12	               jsr releasekey
.12da	68		               pla
.12db	28		               plp
.12dc	60		               rts
.12dd			releasekey
.12dd	08		               php
.12de	48		               pha
.12df	a5 cb		keypressed     lda 203
.12e1	c9 40		               cmp #64
.12e3	d0 fa		               bne keypressed
.12e5	68		               pla
.12e6	28		               plp
.12e7	60		               rts
.12e8			getkey
.12e8	20 e4 ff	again          jsr  getin
.12eb	c9 00		               cmp  #0
.12ed	f0 f9		               beq  again
.12ef	60		               rts
.12f0			waitkey
.12f0	20 13 10	               jsr  push
.12f3	8d 41 13	               sta  thekey
.12f6	20 e4 ff	nope           jsr  getin
.12f9	20 d2 ff	               jsr  chrout
.12fc	cd 41 13	               cmp  thekey
.12ff	d0 f5		               bne  nope
.1301	20 d2 ff	               jsr  chrout
.1304	20 52 10	               jsr  pop
.1307	60		               rts
.1308			waitspace
.1308	20 13 10	               jsr  push
.130b	a9 7f		wait           lda  #$7f  ;%01111111
.130d	8d 00 dc	               sta  $dc00
.1310	ad 01 dc	               lda  $dc01
.1313	29 10		               and  #$10  ;mask %00010000
.1315	d0 f4		               bne  wait
.1317	20 52 10	               jsr  pop
.131a			waitsstop
.131a	20 13 10	               jsr  push
.131d	20 ed f6	wait           jsr  k_stop  ;%01111111
.1320	d0 fb		               bne  wait
.1322	20 52 10	               jsr  pop
.1325			waitreturn
.1325	20 13 10	               jsr  push
.1328	ad 42 13	               lda  thecount
.132b	8d 00 04	               sta  scrnram
.132e	a9 02		               lda  #$02
.1330	8d 00 d8	               sta  colorram
.1333	20 e4 ff	nope           jsr  getin
.1336	c9 0d		nohex          cmp  #$0d
.1338	d0 f9		               bne  nope
.133a	ee 42 13	               inc  thecount
.133d	20 52 10	               jsr  pop
.1340	60		               rts
>1341	00		thekey         .byte   0
>1342	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  End of listing

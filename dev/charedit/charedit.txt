
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Wed Nov  8 23:31:10 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm

=$0d			flashcol = vvert1

;******  Return to file: charedit.asm

=$0400			scrnnewram     = $0400
=12			charsdef       = 12
.080d			main
.080d	20 34 17	               jsr  push
.0810	20 e7 15	               jsr  screendis
.0813	20 01 16	               jsr  scrmaninit
.0816	20 ce 0a	               jsr  copycharset
.0819	20 b8 0a	               jsr  setscreenptr
.081c	20 2f 0b	               jsr  staticscreen
.081f	20 f4 15	               jsr  screenena
.0822	a9 00		               lda  #$00
.0824	8d af 09	               sta  fkeyset
.0827	20 6b 0b	               jsr  showfkeys
.082a	20 73 17	               jsr  pop
.082d	20 3b 11	               jsr  f8action
.0830	20 3b 11	               jsr  f8action
.0833	20 3b 09	               jsr  keyaction
.0836	20 34 17	               jsr  push
.0839	a2 00		               ldx  #0
.083b	a0 00		               ldy  #0
.083d	20 5d 16	               jsr  gotoxy
.0840	20 73 17	               jsr  pop
.0843	20 21 16	               jsr  cls
.0846	20 34 17	               jsr  push
.0849	a2 db		               ldx  #<blankmsg
.084b	a0 11		               ldy  #>blankmsg
.084d	20 cc 16	               jsr  putscxy
.0850	a2 0a		               ldx  #<bye_msg
.0852	a0 14		               ldy  #>bye_msg
.0854	20 cc 16	               jsr  putscxy
.0857	20 73 17	               jsr  pop
.085a	20 34 17	               jsr  push
.085d	a2 db		               ldx  #<blankmsg
.085f	a0 11		               ldy  #>blankmsg
.0861	20 cc 16	               jsr  putscxy
.0864	a2 2c		               ldx  #<any_msg
.0866	a0 14		               ldy  #>any_msg
.0868	20 cc 16	               jsr  putscxy
.086b	20 73 17	               jsr  pop
.086e	20 34 17	               jsr  push
.0871	a2 00		               ldx  #0
.0873	a0 00		               ldy  #0
.0875	20 5d 16	               jsr  gotoxy
.0878	20 73 17	               jsr  pop
.087b	20 0c 1b	               jsr  getkey
.087e	20 66 fe	               jsr  k_warmboot
.0881	60		               rts
.0882			template
.0882	20 34 17	               jsr  push
.0885	20 73 17	               jsr  pop
.0888	60		               rts
.0889			showkeyval
.0889	20 34 17	               jsr  push
.088c	20 34 17	               jsr  push
.088f	a2 00		               ldx  #0
.0891	a0 13		               ldy  #19
.0893	20 5d 16	               jsr  gotoxy
.0896	20 73 17	               jsr  pop
.0899	20 3d 16	               jsr  putch
.089c	20 34 17	               jsr  push
.089f	a2 00		               ldx  #0
.08a1	a0 14		               ldy  #20
.08a3	20 5d 16	               jsr  gotoxy
.08a6	20 73 17	               jsr  pop
.08a9	48		               pha            ;1
.08aa	a9 24		               lda  #'$'
.08ac	20 3d 16	               jsr  putch
.08af	68		               pla            ;0
.08b0	48		               pha            ;1
.08b1	aa		               tax
.08b2	bd e7 19	               lda  asciitorom,x
.08b5	20 20 19	               jsr  putahex
.08b8	68		               pla            ;0
.08b9	20 34 17	               jsr  push
.08bc	a2 17		               ldx  #<txt1
.08be	a0 09		               ldy  #>txt1
.08c0	20 43 16	               jsr  puts
.08c3	20 73 17	               jsr  pull
.08c6	20 34 17	               jsr  push
.08c9	a2 00		               ldx  #0
.08cb	a0 15		               ldy  #21
.08cd	20 5d 16	               jsr  gotoxy
.08d0	20 73 17	               jsr  pop
.08d3	48		               pha            ;1
.08d4	a9 24		               lda  #'$'
.08d6	20 3d 16	               jsr  putch
.08d9	68		               pla            ;0
.08da	20 20 19	               jsr  putahex
.08dd	20 34 17	               jsr  push
.08e0	a2 25		               ldx  #<txt2
.08e2	a0 09		               ldy  #>txt2
.08e4	20 43 16	               jsr  puts
.08e7	20 73 17	               jsr  pull
.08ea	48		               pha            ;1
.08eb	20 34 17	               jsr  push
.08ee	a2 00		               ldx  #0
.08f0	a0 18		               ldy  #24
.08f2	20 5d 16	               jsr  gotoxy
.08f5	20 73 17	               jsr  pop
.08f8	20 34 17	               jsr  push
.08fb	a2 33		               ldx  #<txt3
.08fd	a0 09		               ldy  #>txt3
.08ff	20 43 16	               jsr  puts
.0902	20 73 17	               jsr  pull
.0905	a9 25		               lda  #'%'
.0907	20 3d 16	               jsr  putch
.090a	ba		               tsx
.090b	8a		               txa
.090c	20 bb 19	               jsr  putabin
.090f	68		               pla            ;0
.0910	20 d2 0c	               jsr  delay
.0913	20 73 17	               jsr  pop
.0916	60		               rts
>0917	20 50 45 54	txt1           .null     " petscii code"
>091b	53 43 49 49 20 43 4f 44 45 00
>0925	20 47 45 54	txt2           .null     " getkey  code"
>0929	4b 45 59 20 20 43 4f 44 45 00
>0933	53 54 41 43	txt3           .null     "stack: "
>0937	4b 3a 20 00
.093b			keyaction
.093b	20 34 17	               jsr  push
.093e			loop
.093e	20 0c 1b	               jsr  getkey
.0941	20 89 08	               jsr  showkeyval
.0944	c9 85		               cmp  #key_f1
.0946	f0 23		               beq  f1
.0948	c9 89		               cmp  #key_f2
.094a	f0 25		               beq  f2
.094c	c9 86		               cmp  #key_f3
.094e	f0 27		               beq  f3
.0950	c9 8a		               cmp  #key_f4
.0952	f0 29		               beq  f4
.0954	c9 87		               cmp  #key_f5
.0956	f0 2b		               beq  f5
.0958	c9 8b		               cmp  #key_f6
.095a	f0 2d		               beq  f6
.095c	c9 88		               cmp  #key_f7
.095e	f0 2f		               beq  f7
.0960	c9 8c		               cmp  #key_f8
.0962	f0 31		               beq  f8
.0964	c9 18		               cmp  #ctrl_x
.0966	f0 33		               beq  quit
.0968	4c 3e 09	               jmp  loop
.096b	20 e8 0c	f1             jsr  f1action
.096e	4c 3e 09	               jmp  loop
.0971	20 ab 0d	f2             jsr  f2action
.0974	4c 3e 09	               jmp  loop
.0977	20 43 0e	f3             jsr  f3action
.097a	4c 3e 09	               jmp  loop
.097d	20 db 0e	f4             jsr  f4action
.0980	4c 3e 09	               jmp  loop
.0983	20 73 0f	f5             jsr  f5action
.0986	4c 3e 09	               jmp  loop
.0989	20 0b 10	f6             jsr  f6action
.098c	4c 3e 09	               jmp  loop
.098f	20 a3 10	f7             jsr  f7action
.0992	4c 3e 09	               jmp  loop
.0995	20 3b 11	f8             jsr  f8action
.0998	4c 3e 09	               jmp  loop
.099b	20 73 17	quit           jsr  pop
.099e	60		               rts
>099f	0a 01 05	keyaction_msg  .byte vrose,1,5
>09a2	5b 4b 45 59	               .null     "[keyaction]"
>09a6	41 43 54 49 4f 4e 5d 00
>09ae	00		editmode       .byte     0
>09af	00		fkeyset        .byte     0
>09b0	00		currentchar    .byte     0
>09b1	00		bitmapoffset   .byte     0
.09b2			editor
.09b2	20 34 17	               jsr  push
.09b5	20 34 17	               jsr  push
.09b8	a2 db		               ldx  #<blankmsg
.09ba	a0 11		               ldy  #>blankmsg
.09bc	20 cc 16	               jsr  putscxy
.09bf	a2 f5		               ldx  #<exit_msg
.09c1	a0 13		               ldy  #>exit_msg
.09c3	20 cc 16	               jsr  putscxy
.09c6	20 73 17	               jsr  pop
.09c9	20 34 17	               jsr  push
.09cc	a2 db		               ldx  #<blankmsg
.09ce	a0 11		               ldy  #>blankmsg
.09d0	20 cc 16	               jsr  putscxy
.09d3	a2 06		               ldx  #<edit_msg
.09d5	a0 12		               ldy  #>edit_msg
.09d7	20 cc 16	               jsr  putscxy
.09da	20 73 17	               jsr  pop
.09dd			ed_loop
.09dd	20 0c 1b	               jsr  getkey
.09e0	20 89 08	               jsr  showkeyval
.09e3	c9 91		               cmp  #cursu
.09e5	f0 35		               beq  do_up
.09e7	c9 11		               cmp  #cursd
.09e9	f0 34		               beq  do_down
.09eb	c9 9d		               cmp  #cursl
.09ed	f0 33		               beq  do_left
.09ef	c9 1d		               cmp  #cursr
.09f1	f0 32		               beq  do_right
.09f3	c9 20		               cmp  #$20
.09f5	f0 31		               beq  do_swap
.09f7	c9 18		               cmp  #ctrl_x
.09f9	f0 30		               beq  do_ctrlx
.09fb	c9 20		               cmp  #$20
.09fd	30 de		               bmi  ed_loop
.09ff	20 34 17	               jsr  push
.0a02	a2 0d		               ldx  #13
.0a04	a0 0c		               ldy  #12
.0a06	20 5d 16	               jsr  gotoxy
.0a09	20 73 17	               jsr  pop
.0a0c	20 3d 16	               jsr putch
.0a0f	aa		               tax
.0a10	bd e7 19	               lda  asciitorom,x
.0a13	8d b1 09	               sta  bitmapoffset
.0a16	20 4f 0a	               jsr  drawbitmap
.0a19	4c dd 09	               jmp  ed_loop
.0a1c			do_up
.0a1c	4c dd 09	               jmp  ed_loop
.0a1f			do_down
.0a1f	4c dd 09	               jmp  ed_loop
.0a22			do_left
.0a22	4c dd 09	               jmp  ed_loop
.0a25			do_right
.0a25	4c dd 09	               jmp  ed_loop
.0a28			do_swap
.0a28	4c dd 09	               jmp  ed_loop
.0a2b			do_ctrlx
.0a2b	20 34 17	               jsr  push
.0a2e	a2 db		               ldx  #<blankmsg
.0a30	a0 11		               ldy  #>blankmsg
.0a32	20 cc 16	               jsr  putscxy
.0a35	a2 e0		               ldx  #<quit_msg
.0a37	a0 13		               ldy  #>quit_msg
.0a39	20 cc 16	               jsr  putscxy
.0a3c	20 73 17	               jsr  pop
.0a3f	20 73 17	               jsr  pop
.0a42	60		               rts
>0a43	0a 01 05	editor_msg     .byte vrose,1,5
>0a46	5b 45 44 49	               .null     "[editor]"
>0a4a	54 4f 52 5d 00
=8			gligne=8
=1			gcol=1
.0a4f			drawbitmap
.0a4f	20 34 17	               jsr  push
.0a52	a9 af		               lda  #<letext
.0a54	85 fd		               sta  zpage2
.0a56	a9 b0		               lda  #<letext+1
.0a58	85 fe		               sta  zpage2+1
.0a5a	a9 01		               lda  #gcol
.0a5c	8d ad 0a	               sta  textline+1
.0a5f	a9 08		               lda  #gligne
.0a61	8d ae 0a	               sta  textline+2
.0a64	ad 2d 0b	               lda  bitmapaddr
.0a67	85 fb		               sta  zpage1
.0a69	ad 2e 0b	               lda  bitmapaddr+1
.0a6c	85 fc		               sta  zpage1+1
.0a6e	ae b1 09	               ldx  bitmapoffset
.0a71	f0 08		               beq  drawchar
.0a73	a9 08		addagain       lda  #8
.0a75	20 b4 0c	               jsr  zp1addnum
.0a78	ca		               dex
.0a79	d0 f8		               bne  addagain
.0a7b	a2 00		drawchar       ldx  #0        ; 8 bytes to draw
.0a7d	a0 00		               ldy  #0
.0a7f	8a		nextline       txa
.0a80	a8		               tay
.0a81	b1 fb		               lda  (zpage1),y               ; premier byte
.0a83	a0 00		               ldy  #$0
.0a85	0a		nextbit        asl
.0a86	48		               pha
.0a87	b0 05		               bcs  bitset
.0a89	a9 04		bitclear       lda  #$04
.0a8b	4c 90 0a	               jmp  putbit
.0a8e	a9 a0		bitset         lda  #$a0
.0a90	91 fd		putbit         sta  (zpage2),y
.0a92	68		               pla  ; pop pour le prochain asl
.0a93	c8		               iny
.0a94	c0 08		               cpy  #$8
.0a96	30 ed		               bmi  nextbit
.0a98			oktoprint
.0a98	a2 ac		               ldx #<textline
.0a9a	a0 0a		               ldy #>textline
.0a9c	20 a3 16	               jsr putsxy
.0a9f	18		               clc
.0aa0	ee ae 0a	               inc  textline+2
.0aa3	e8		norep          inx
.0aa4	e0 08		               cpx  #$8
.0aa6	30 d7		               bmi  nextline
.0aa8	20 73 17	               jsr  pop
.0aab	60		               rts
>0aac	01 01 08	textline       .byte vblanc,gcol,gligne
>0aaf	20 20 20 20	letext         .null "        "
>0ab3	20 20 20 20 00
.0ab8			setscreenptr
.0ab8	20 34 17	               jsr  push
.0abb	a9 08		               lda  #$08      ; basic commande to disable ...
.0abd	20 d2 ff	               jsr  chrout    ; ... character set change.
.0ac0	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.0ac3	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.0ac5	09 0c		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.0ac7	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.0aca	20 73 17	               jsr  pop
.0acd	60		               rts
.0ace			copycharset
.0ace	20 34 17	               jsr  push
.0ad1	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0ad4	29 fe		               and  #%11111110     ;254
.0ad6	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0ad9	a5 01		               lda  u6510map       ;$01
.0adb	29 fb		               and  #%11111011     ;251
.0add	85 01		               sta  u6510map       ;$01
.0adf	20 f4 0a	               jsr  memcopy
.0ae2	a5 01		               lda  u6510map       ;$01
.0ae4	09 04		               ora  #%00000100
.0ae6	85 01		               sta  u6510map       ;$01
.0ae8	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0aeb	09 01		               ora  #%00000001     ;254
.0aed	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0af0	20 73 17	               jsr  pop
.0af3	60		               rts
.0af4			memcopy
.0af4	20 34 17	               jsr  push
.0af7	ad 29 0b	               lda  startaddr
.0afa	85 fb		               sta  zpage1
.0afc	ad 2a 0b	               lda  startaddr+1
.0aff	85 fc		               sta  zpage1+1
.0b01	ad 2d 0b	               lda  bitmapaddr
.0b04	85 fd		               sta  zpage2
.0b06	ad 2e 0b	               lda  bitmapaddr+1
.0b09	85 fe		               sta  zpage2+1
.0b0b	a0 00		               ldy  #$00
.0b0d	b1 fb		onemore        lda  (zpage1),y
.0b0f	91 fd		               sta  (zpage2),y
.0b11	20 3b 18	               jsr  inczp1
.0b14	20 53 18	               jsr  inczp2
.0b17	a5 fc		               lda  zpage1+1
.0b19	cd 2c 0b	               cmp  stopaddr+1
.0b1c	d0 ef		               bne  onemore
.0b1e	a5 fb		               lda  zpage1
.0b20	cd 2b 0b	               cmp  stopaddr
.0b23	d0 e8		               bne  onemore
.0b25	20 73 17	               jsr  pop
.0b28	60		               rts
=12288			bitmapmem =    charsdef * 1024     ;Calcul de la position ram des caracteres.
=61440			mstopaddr =    $d000+(4*$800)
>0b29	00 d0		startaddr      .word     $d000               ; 53248
>0b2b	00 f0		stopaddr       .word     mstopaddr           ; 55296
>0b2d	00 30		bitmapaddr     .word     bitmapmem           ; $3000, 12288
.0b2f			staticscreen
.0b2f	48		               pha
.0b30	a9 0c		               lda  #vgris1
.0b32	8d 20 d0	               sta  $d020
.0b35	68		               pla
.0b36	48		               pha
.0b37	a9 0b		               lda  #vgris
.0b39	8d 21 d0	               sta  $d021
.0b3c	68		               pla
.0b3d	20 0b 0c	               jsr  showlines
.0b40	20 ec 0b	               jsr  showallchars
.0b43	20 53 0c	               jsr  showgrid
.0b46	20 6b 0b	               jsr  showfkeys
.0b49	20 34 17	               jsr  push
.0b4c	a2 db		               ldx  #<blankmsg
.0b4e	a0 11		               ldy  #>blankmsg
.0b50	20 cc 16	               jsr  putscxy
.0b53	a2 e0		               ldx  #<quit_msg
.0b55	a0 13		               ldy  #>quit_msg
.0b57	20 cc 16	               jsr  putscxy
.0b5a	20 73 17	               jsr  pop
.0b5d	20 34 17	               jsr  push
.0b60	a2 00		               ldx  #0
.0b62	a0 07		               ldy  #7
.0b64	20 5d 16	               jsr  gotoxy
.0b67	20 73 17	               jsr  pop
.0b6a	60		               rts
.0b6b			showfkeys
.0b6b	20 34 17	               jsr  push
.0b6e	ad af 09	               lda  fkeyset
.0b71	c9 00		               cmp  #$0
.0b73	d0 3b		               bne  secondks
.0b75	a2 47		               ldx #<f1abutton
.0b77	a0 14		               ldy #>f1abutton
.0b79	20 cc 16	               jsr putscxy
.0b7c	a2 61		               ldx #<f2abutton
.0b7e	a0 14		               ldy #>f2abutton
.0b80	20 cc 16	               jsr putscxy
.0b83	a2 7b		               ldx #<f3abutton
.0b85	a0 14		               ldy #>f3abutton
.0b87	20 cc 16	               jsr putscxy
.0b8a	a2 95		               ldx #<f4abutton
.0b8c	a0 14		               ldy #>f4abutton
.0b8e	20 cc 16	               jsr putscxy
.0b91	a2 af		               ldx #<f5abutton
.0b93	a0 14		               ldy #>f5abutton
.0b95	20 cc 16	               jsr putscxy
.0b98	a2 c9		               ldx #<f6abutton
.0b9a	a0 14		               ldy #>f6abutton
.0b9c	20 cc 16	               jsr putscxy
.0b9f	a2 e3		               ldx #<f7abutton
.0ba1	a0 14		               ldy #>f7abutton
.0ba3	20 cc 16	               jsr putscxy
.0ba6	a2 fd		               ldx #<f8abutton
.0ba8	a0 14		               ldy #>f8abutton
.0baa	20 cc 16	               jsr putscxy
.0bad	4c e8 0b	               jmp end
.0bb0			secondks
.0bb0	a2 17		               ldx #<f1bbutton
.0bb2	a0 15		               ldy #>f1bbutton
.0bb4	20 cc 16	               jsr putscxy
.0bb7	a2 31		               ldx #<f2bbutton
.0bb9	a0 15		               ldy #>f2bbutton
.0bbb	20 cc 16	               jsr putscxy
.0bbe	a2 4b		               ldx #<f3bbutton
.0bc0	a0 15		               ldy #>f3bbutton
.0bc2	20 cc 16	               jsr putscxy
.0bc5	a2 65		               ldx #<f4bbutton
.0bc7	a0 15		               ldy #>f4bbutton
.0bc9	20 cc 16	               jsr putscxy
.0bcc	a2 7f		               ldx #<f5bbutton
.0bce	a0 15		               ldy #>f5bbutton
.0bd0	20 cc 16	               jsr putscxy
.0bd3	a2 99		               ldx #<f6bbutton
.0bd5	a0 15		               ldy #>f6bbutton
.0bd7	20 cc 16	               jsr putscxy
.0bda	a2 b3		               ldx #<f7bbutton
.0bdc	a0 15		               ldy #>f7bbutton
.0bde	20 cc 16	               jsr putscxy
.0be1	a2 cd		               ldx #<f8bbutton
.0be3	a0 15		               ldy #>f8bbutton
.0be5	20 cc 16	               jsr putscxy
.0be8	20 73 17	end            jsr  pop
.0beb	60		               rts
.0bec			showallchars
.0bec	20 34 17	               jsr push
.0bef	20 34 17	               jsr  push
.0bf2	a2 00		               ldx  #0
.0bf4	a0 00		               ldy  #0
.0bf6	20 5d 16	               jsr  gotoxy
.0bf9	20 73 17	               jsr  pop
.0bfc	a2 00		               ldx  #$00
.0bfe	8a		nextc          txa
.0bff	9d 00 04	               sta  scrnnewram,x
.0c02	e8		               inx
.0c03	e0 80		               cpx  #$80
.0c05	d0 f7		               bne  nextc
.0c07	20 73 17	               jsr  pop
.0c0a	60		               rts
.0c0b			showlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.0c0b	20 34 17	               jsr  push
.0c0e	a2 28		               ldx  #40
.0c10	a9 40		               lda  #64
.0c12	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.0c15	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.0c18	ca		               dex
.0c19	e0 10		hline          cpx  #vlinepos
.0c1b	10 03		               bpl  notyet
.0c1d	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.0c20	e0 00		notyet         cpx  #$00
.0c22	d0 ee		               bne  nextl
.0c24	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.0c26	85 fb		               sta  zpage1
.0c28	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.0c2a	85 fc		               sta  zpage1+1
.0c2c	a0 00		               ldy  #0
.0c2e	a9 72		               lda  #114
.0c30	91 fb		               sta  (zpage1),y
.0c32	20 c2 0c	               jsr  zp1add40
.0c35	a2 12		               ldx  #24-hline2
.0c37	a9 5d		               lda  #93
.0c39	91 fb		another93      sta  (zpage1),y
.0c3b	20 c2 0c	               jsr  zp1add40
.0c3e	ca		               dex
.0c3f	d0 f8		               bne  another93
.0c41	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.0c43	85 fb		               sta  zpage1
.0c45	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.0c47	85 fc		               sta  zpage1+1
.0c49	a0 00		               ldy  #0
.0c4b	a9 73		               lda  #115
.0c4d	91 fb		               sta  (zpage1),y
.0c4f	20 73 17	               jsr  pop
.0c52	60		               rts
.0c53			showgrid
.0c53	20 34 17	               jsr  push
.0c56	20 e7 15	               jsr  screendis
.0c59	a9 41		               lda  #<scrnnewram+(40*(gligne))+gcol
.0c5b	85 fb		               sta  zpage1
.0c5d	a9 05		               lda  #>scrnnewram+(40*(gligne))+gcol
.0c5f	85 fc		               sta  zpage1+1
.0c61	a2 08		               ldx  #8
.0c63	a9 65		nextbox        lda  #101
.0c65	a0 09		               ldy  #9
.0c67	91 fb		               sta  (zpage1),y
.0c69	88		               dey
.0c6a	a9 4f		               lda  #79
.0c6c	91 fb		nextcol        sta  (zpage1),y
.0c6e	88		               dey
.0c6f	d0 fb		               bne  nextcol
.0c71	20 c2 0c	               jsr  zp1add40
.0c74	ca		               dex
.0c75	d0 ec		               bne  nextbox
.0c77	a0 08		               ldy  #8
.0c79	a9 77		               lda  #119
.0c7b	91 fb		nextlin        sta  (zpage1),y
.0c7d	88		               dey
.0c7e	d0 fb		               bne  nextlin
.0c80	a9 3e		               lda  #$3e
.0c82	8d eb 05	               sta  scrnnewram+(40*(12))+11
.0c85	a9 70		               lda  #$70                     ;+
.0c87	8d c4 05	               sta  scrnnewram+(40*(11))+12
.0c8a	a9 43		               lda  #$43                    ;-
.0c8c	8d c5 05	               sta  scrnnewram+(40*(11))+13
.0c8f	a9 6e		               lda  #$6e                     ;+
.0c91	8d c6 05	               sta  scrnnewram+(40*(11))+14
.0c94	a9 5d		               lda  #$5d                     ;|
.0c96	8d ec 05	               sta  scrnnewram+(40*(12))+12
.0c99	a9 5d		               lda  #$5d                     ;|
.0c9b	8d ee 05	               sta  scrnnewram+(40*(12))+14
.0c9e	a9 6d		               lda  #$6d                     ;+
.0ca0	8d 14 06	               sta  scrnnewram+(40*(13))+12
.0ca3	a9 43		               lda  #$43                     ;-
.0ca5	8d 15 06	               sta  scrnnewram+(40*(13))+13
.0ca8	a9 7d		               lda  #$7d                     ;+
.0caa	8d 16 06	               sta  scrnnewram+(40*(13))+14
.0cad	20 f4 15	               jsr screenena
.0cb0	20 73 17	               jsr  pop
.0cb3	60		               rts
.0cb4			zp1addnum
.0cb4	08		               php
.0cb5	48		               pha
.0cb6	18		               clc
.0cb7	65 fb		               adc  zpage1
.0cb9	90 02		               bcc  nocarry
.0cbb	e6 fc		               inc  zpage1+1
.0cbd	85 fb		nocarry        sta  zpage1
.0cbf	68		               pla
.0cc0	28		               plp
.0cc1	60		               rts
.0cc2			zp1add40
.0cc2	08		               php
.0cc3	48		               pha
.0cc4	18		               clc
.0cc5	a5 fb		               lda  zpage1
.0cc7	69 28		               adc  #40
.0cc9	90 02		               bcc  nocarry
.0ccb	e6 fc		               inc  zpage1+1
.0ccd	85 fb		nocarry        sta  zpage1
.0ccf	68		               pla
.0cd0	28		               plp
.0cd1	60		               rts
.0cd2			delay
.0cd2	20 34 17	               jsr  push
.0cd5	a9 00		               lda  #$0
.0cd7	aa		               tax
.0cd8	a8		               tay
.0cd9	ca		xagain         dex
.0cda	ca		               dex
.0cdb	88		yagain         dey
.0cdc	c0 00		               cpy  #$00
.0cde	d0 fb		               bne  yagain
.0ce0	e0 00		               cpx  #$00
.0ce2	d0 f5		               bne  xagain
.0ce4	20 73 17	               jsr  pop
.0ce7	60		               rts
.0ce8			f1action
.0ce8	48		               pha
.0ce9	a9 ff		               lda  #$ff
.0ceb	8d ae 09	               sta  editmode
.0cee	ad af 09	               lda  fkeyset
.0cf1	d0 5e		               bne  menub
.0cf3	20 34 17	               jsr  push
.0cf6	a2 db		               ldx  #<blankmsg
.0cf8	a0 11		               ldy  #>blankmsg
.0cfa	20 cc 16	               jsr  putscxy
.0cfd	a2 06		               ldx  #<f1a_msg
.0cff	a0 12		               ldy  #>f1a_msg
.0d01	20 cc 16	               jsr  putscxy
.0d04	20 73 17	               jsr  pop
.0d07	08		               php
.0d08	48		               pha
.0d09	8a		               txa
.0d0a	48		               pha
.0d0b	ad 47 14	               lda  f1abutton
.0d0e	48		               pha
.0d0f	a9 92		               lda  #146
.0d11	8d 56 14	               sta  f1abutton+15
.0d14	a9 0d		               lda  #flashcol
.0d16	8d 47 14	               sta  f1abutton
.0d19	a2 47		               ldx  #<f1abutton
.0d1b	a0 14		               ldy  #>f1abutton
.0d1d	20 cc 16	               jsr  putscxy
.0d20	20 d2 0c	               jsr  delay
.0d23	a9 12		               lda  #18
.0d25	8d 56 14	               sta  f1abutton+15
.0d28	68		               pla
.0d29	8d 47 14	               sta  f1abutton
.0d2c	a2 47		               ldx  #<f1abutton
.0d2e	a0 14		               ldy  #>f1abutton
.0d30	20 cc 16	               jsr  putscxy
.0d33	68		               pla
.0d34	aa		               tax
.0d35	68		               pla
.0d36	28		               plp
.0d37	20 b2 09	               jsr  editor
.0d3a	20 34 17	               jsr  push
.0d3d	a2 db		               ldx  #<blankmsg
.0d3f	a0 11		               ldy  #>blankmsg
.0d41	20 cc 16	               jsr  putscxy
.0d44	a2 06		               ldx  #<f1a_msg
.0d46	a0 12		               ldy  #>f1a_msg
.0d48	20 cc 16	               jsr  putscxy
.0d4b	20 73 17	               jsr  pop
.0d4e	4c 9a 0d	               jmp  out
.0d51			menub
.0d51	a9 00		               lda  #$0
.0d53	8d ae 09	               sta  editmode
.0d56	20 34 17	               jsr  push
.0d59	a2 db		               ldx  #<blankmsg
.0d5b	a0 11		               ldy  #>blankmsg
.0d5d	20 cc 16	               jsr  putscxy
.0d60	a2 d5		               ldx  #<f1b_msg
.0d62	a0 12		               ldy  #>f1b_msg
.0d64	20 cc 16	               jsr  putscxy
.0d67	20 73 17	               jsr  pop
.0d6a	08		               php
.0d6b	48		               pha
.0d6c	8a		               txa
.0d6d	48		               pha
.0d6e	ad 17 15	               lda  f1bbutton
.0d71	48		               pha
.0d72	a9 92		               lda  #146
.0d74	8d 26 15	               sta  f1bbutton+15
.0d77	a9 0d		               lda  #flashcol
.0d79	8d 17 15	               sta  f1bbutton
.0d7c	a2 17		               ldx  #<f1bbutton
.0d7e	a0 15		               ldy  #>f1bbutton
.0d80	20 cc 16	               jsr  putscxy
.0d83	20 d2 0c	               jsr  delay
.0d86	a9 12		               lda  #18
.0d88	8d 26 15	               sta  f1bbutton+15
.0d8b	68		               pla
.0d8c	8d 17 15	               sta  f1bbutton
.0d8f	a2 17		               ldx  #<f1bbutton
.0d91	a0 15		               ldy  #>f1bbutton
.0d93	20 cc 16	               jsr  putscxy
.0d96	68		               pla
.0d97	aa		               tax
.0d98	68		               pla
.0d99	28		               plp
.0d9a	68		out            pla
.0d9b	60		               rts
>0d9c	01 01 05	test_msg       .byte     vblanc,1,5
>0d9f	5b 46 31 2d	               .null     "[f1-action]"
>0da3	41 43 54 49 4f 4e 5d 00
.0dab			f2action
.0dab	48		               pha
.0dac	a9 00		               lda  #$0
.0dae	8d ae 09	               sta  editmode
.0db1	ad af 09	               lda  fkeyset
.0db4	d0 47		               bne  menub
.0db6	20 34 17	               jsr  push
.0db9	a2 db		               ldx  #<blankmsg
.0dbb	a0 11		               ldy  #>blankmsg
.0dbd	20 cc 16	               jsr  putscxy
.0dc0	a2 21		               ldx  #<f2a_msg
.0dc2	a0 12		               ldy  #>f2a_msg
.0dc4	20 cc 16	               jsr  putscxy
.0dc7	20 73 17	               jsr  pop
.0dca	08		               php
.0dcb	48		               pha
.0dcc	8a		               txa
.0dcd	48		               pha
.0dce	ad 61 14	               lda  f2abutton
.0dd1	48		               pha
.0dd2	a9 92		               lda  #146
.0dd4	8d 70 14	               sta  f2abutton+15
.0dd7	a9 0d		               lda  #flashcol
.0dd9	8d 61 14	               sta  f2abutton
.0ddc	a2 61		               ldx  #<f2abutton
.0dde	a0 14		               ldy  #>f2abutton
.0de0	20 cc 16	               jsr  putscxy
.0de3	20 d2 0c	               jsr  delay
.0de6	a9 12		               lda  #18
.0de8	8d 70 14	               sta  f2abutton+15
.0deb	68		               pla
.0dec	8d 61 14	               sta  f2abutton
.0def	a2 61		               ldx  #<f2abutton
.0df1	a0 14		               ldy  #>f2abutton
.0df3	20 cc 16	               jsr  putscxy
.0df6	68		               pla
.0df7	aa		               tax
.0df8	68		               pla
.0df9	28		               plp
.0dfa	4c 41 0e	               jmp  out
.0dfd			menub
.0dfd	20 34 17	               jsr  push
.0e00	a2 db		               ldx  #<blankmsg
.0e02	a0 11		               ldy  #>blankmsg
.0e04	20 cc 16	               jsr  putscxy
.0e07	a2 ec		               ldx  #<f2b_msg
.0e09	a0 12		               ldy  #>f2b_msg
.0e0b	20 cc 16	               jsr  putscxy
.0e0e	20 73 17	               jsr  pop
.0e11	08		               php
.0e12	48		               pha
.0e13	8a		               txa
.0e14	48		               pha
.0e15	ad 31 15	               lda  f2bbutton
.0e18	48		               pha
.0e19	a9 92		               lda  #146
.0e1b	8d 40 15	               sta  f2bbutton+15
.0e1e	a9 0d		               lda  #flashcol
.0e20	8d 31 15	               sta  f2bbutton
.0e23	a2 31		               ldx  #<f2bbutton
.0e25	a0 15		               ldy  #>f2bbutton
.0e27	20 cc 16	               jsr  putscxy
.0e2a	20 d2 0c	               jsr  delay
.0e2d	a9 12		               lda  #18
.0e2f	8d 40 15	               sta  f2bbutton+15
.0e32	68		               pla
.0e33	8d 31 15	               sta  f2bbutton
.0e36	a2 31		               ldx  #<f2bbutton
.0e38	a0 15		               ldy  #>f2bbutton
.0e3a	20 cc 16	               jsr  putscxy
.0e3d	68		               pla
.0e3e	aa		               tax
.0e3f	68		               pla
.0e40	28		               plp
.0e41	68		out            pla
.0e42	60		               rts
.0e43			f3action
.0e43	48		               pha
.0e44	a9 00		               lda  #$0
.0e46	8d ae 09	               sta  editmode
.0e49	ad af 09	               lda  fkeyset
.0e4c	d0 47		               bne  menub
.0e4e	20 34 17	               jsr  push
.0e51	a2 db		               ldx  #<blankmsg
.0e53	a0 11		               ldy  #>blankmsg
.0e55	20 cc 16	               jsr  putscxy
.0e58	a2 47		               ldx  #<f3a_msg
.0e5a	a0 12		               ldy  #>f3a_msg
.0e5c	20 cc 16	               jsr  putscxy
.0e5f	20 73 17	               jsr  pop
.0e62	08		               php
.0e63	48		               pha
.0e64	8a		               txa
.0e65	48		               pha
.0e66	ad 7b 14	               lda  f3abutton
.0e69	48		               pha
.0e6a	a9 92		               lda  #146
.0e6c	8d 8a 14	               sta  f3abutton+15
.0e6f	a9 0d		               lda  #flashcol
.0e71	8d 7b 14	               sta  f3abutton
.0e74	a2 7b		               ldx  #<f3abutton
.0e76	a0 14		               ldy  #>f3abutton
.0e78	20 cc 16	               jsr  putscxy
.0e7b	20 d2 0c	               jsr  delay
.0e7e	a9 12		               lda  #18
.0e80	8d 8a 14	               sta  f3abutton+15
.0e83	68		               pla
.0e84	8d 7b 14	               sta  f3abutton
.0e87	a2 7b		               ldx  #<f3abutton
.0e89	a0 14		               ldy  #>f3abutton
.0e8b	20 cc 16	               jsr  putscxy
.0e8e	68		               pla
.0e8f	aa		               tax
.0e90	68		               pla
.0e91	28		               plp
.0e92	4c d9 0e	               jmp  out
.0e95			menub
.0e95	20 34 17	               jsr  push
.0e98	a2 db		               ldx  #<blankmsg
.0e9a	a0 11		               ldy  #>blankmsg
.0e9c	20 cc 16	               jsr  putscxy
.0e9f	a2 05		               ldx  #<f3b_msg
.0ea1	a0 13		               ldy  #>f3b_msg
.0ea3	20 cc 16	               jsr  putscxy
.0ea6	20 73 17	               jsr  pop
.0ea9	08		               php
.0eaa	48		               pha
.0eab	8a		               txa
.0eac	48		               pha
.0ead	ad 4b 15	               lda  f3bbutton
.0eb0	48		               pha
.0eb1	a9 92		               lda  #146
.0eb3	8d 5a 15	               sta  f3bbutton+15
.0eb6	a9 0d		               lda  #flashcol
.0eb8	8d 4b 15	               sta  f3bbutton
.0ebb	a2 4b		               ldx  #<f3bbutton
.0ebd	a0 15		               ldy  #>f3bbutton
.0ebf	20 cc 16	               jsr  putscxy
.0ec2	20 d2 0c	               jsr  delay
.0ec5	a9 12		               lda  #18
.0ec7	8d 5a 15	               sta  f3bbutton+15
.0eca	68		               pla
.0ecb	8d 4b 15	               sta  f3bbutton
.0ece	a2 4b		               ldx  #<f3bbutton
.0ed0	a0 15		               ldy  #>f3bbutton
.0ed2	20 cc 16	               jsr  putscxy
.0ed5	68		               pla
.0ed6	aa		               tax
.0ed7	68		               pla
.0ed8	28		               plp
.0ed9	68		out            pla
.0eda	60		               rts
.0edb			f4action
.0edb	48		               pha
.0edc	a9 00		               lda  #$0
.0ede	8d ae 09	               sta  editmode
.0ee1	ad af 09	               lda  fkeyset
.0ee4	d0 47		               bne  menub
.0ee6	20 34 17	               jsr  push
.0ee9	a2 db		               ldx  #<blankmsg
.0eeb	a0 11		               ldy  #>blankmsg
.0eed	20 cc 16	               jsr  putscxy
.0ef0	a2 6e		               ldx  #<f4a_msg
.0ef2	a0 12		               ldy  #>f4a_msg
.0ef4	20 cc 16	               jsr  putscxy
.0ef7	20 73 17	               jsr  pop
.0efa	08		               php
.0efb	48		               pha
.0efc	8a		               txa
.0efd	48		               pha
.0efe	ad 95 14	               lda  f4abutton
.0f01	48		               pha
.0f02	a9 92		               lda  #146
.0f04	8d a4 14	               sta  f4abutton+15
.0f07	a9 0d		               lda  #flashcol
.0f09	8d 95 14	               sta  f4abutton
.0f0c	a2 95		               ldx  #<f4abutton
.0f0e	a0 14		               ldy  #>f4abutton
.0f10	20 cc 16	               jsr  putscxy
.0f13	20 d2 0c	               jsr  delay
.0f16	a9 12		               lda  #18
.0f18	8d a4 14	               sta  f4abutton+15
.0f1b	68		               pla
.0f1c	8d 95 14	               sta  f4abutton
.0f1f	a2 95		               ldx  #<f4abutton
.0f21	a0 14		               ldy  #>f4abutton
.0f23	20 cc 16	               jsr  putscxy
.0f26	68		               pla
.0f27	aa		               tax
.0f28	68		               pla
.0f29	28		               plp
.0f2a	4c 71 0f	               jmp  out
.0f2d			menub
.0f2d	20 34 17	               jsr  push
.0f30	a2 db		               ldx  #<blankmsg
.0f32	a0 11		               ldy  #>blankmsg
.0f34	20 cc 16	               jsr  putscxy
.0f37	a2 1d		               ldx  #<f4b_msg
.0f39	a0 13		               ldy  #>f4b_msg
.0f3b	20 cc 16	               jsr  putscxy
.0f3e	20 73 17	               jsr  pop
.0f41	08		               php
.0f42	48		               pha
.0f43	8a		               txa
.0f44	48		               pha
.0f45	ad 65 15	               lda  f4bbutton
.0f48	48		               pha
.0f49	a9 92		               lda  #146
.0f4b	8d 74 15	               sta  f4bbutton+15
.0f4e	a9 0d		               lda  #flashcol
.0f50	8d 65 15	               sta  f4bbutton
.0f53	a2 65		               ldx  #<f4bbutton
.0f55	a0 15		               ldy  #>f4bbutton
.0f57	20 cc 16	               jsr  putscxy
.0f5a	20 d2 0c	               jsr  delay
.0f5d	a9 12		               lda  #18
.0f5f	8d 74 15	               sta  f4bbutton+15
.0f62	68		               pla
.0f63	8d 65 15	               sta  f4bbutton
.0f66	a2 65		               ldx  #<f4bbutton
.0f68	a0 15		               ldy  #>f4bbutton
.0f6a	20 cc 16	               jsr  putscxy
.0f6d	68		               pla
.0f6e	aa		               tax
.0f6f	68		               pla
.0f70	28		               plp
.0f71	68		out            pla
.0f72	60		               rts
.0f73			f5action
.0f73	48		               pha
.0f74	a9 00		               lda  #$0
.0f76	8d ae 09	               sta  editmode
.0f79	ad af 09	               lda  fkeyset
.0f7c	d0 47		               bne  menub
.0f7e	20 34 17	               jsr  push
.0f81	a2 db		               ldx  #<blankmsg
.0f83	a0 11		               ldy  #>blankmsg
.0f85	20 cc 16	               jsr  putscxy
.0f88	a2 8b		               ldx  #<f5a_msg
.0f8a	a0 12		               ldy  #>f5a_msg
.0f8c	20 cc 16	               jsr  putscxy
.0f8f	20 73 17	               jsr  pop
.0f92	08		               php
.0f93	48		               pha
.0f94	8a		               txa
.0f95	48		               pha
.0f96	ad af 14	               lda  f5abutton
.0f99	48		               pha
.0f9a	a9 92		               lda  #146
.0f9c	8d be 14	               sta  f5abutton+15
.0f9f	a9 0d		               lda  #flashcol
.0fa1	8d af 14	               sta  f5abutton
.0fa4	a2 af		               ldx  #<f5abutton
.0fa6	a0 14		               ldy  #>f5abutton
.0fa8	20 cc 16	               jsr  putscxy
.0fab	20 d2 0c	               jsr  delay
.0fae	a9 12		               lda  #18
.0fb0	8d be 14	               sta  f5abutton+15
.0fb3	68		               pla
.0fb4	8d af 14	               sta  f5abutton
.0fb7	a2 af		               ldx  #<f5abutton
.0fb9	a0 14		               ldy  #>f5abutton
.0fbb	20 cc 16	               jsr  putscxy
.0fbe	68		               pla
.0fbf	aa		               tax
.0fc0	68		               pla
.0fc1	28		               plp
.0fc2	4c 09 10	               jmp  out
.0fc5			menub
.0fc5	20 34 17	               jsr  push
.0fc8	a2 db		               ldx  #<blankmsg
.0fca	a0 11		               ldy  #>blankmsg
.0fcc	20 cc 16	               jsr  putscxy
.0fcf	a2 32		               ldx  #<f5b_msg
.0fd1	a0 13		               ldy  #>f5b_msg
.0fd3	20 cc 16	               jsr  putscxy
.0fd6	20 73 17	               jsr  pop
.0fd9	08		               php
.0fda	48		               pha
.0fdb	8a		               txa
.0fdc	48		               pha
.0fdd	ad 7f 15	               lda  f5bbutton
.0fe0	48		               pha
.0fe1	a9 92		               lda  #146
.0fe3	8d 8e 15	               sta  f5bbutton+15
.0fe6	a9 0d		               lda  #flashcol
.0fe8	8d 7f 15	               sta  f5bbutton
.0feb	a2 7f		               ldx  #<f5bbutton
.0fed	a0 15		               ldy  #>f5bbutton
.0fef	20 cc 16	               jsr  putscxy
.0ff2	20 d2 0c	               jsr  delay
.0ff5	a9 12		               lda  #18
.0ff7	8d 8e 15	               sta  f5bbutton+15
.0ffa	68		               pla
.0ffb	8d 7f 15	               sta  f5bbutton
.0ffe	a2 7f		               ldx  #<f5bbutton
.1000	a0 15		               ldy  #>f5bbutton
.1002	20 cc 16	               jsr  putscxy
.1005	68		               pla
.1006	aa		               tax
.1007	68		               pla
.1008	28		               plp
.1009	68		out            pla
.100a	60		               rts
.100b			f6action
.100b	48		               pha
.100c	a9 00		               lda  #$0
.100e	8d ae 09	               sta  editmode
.1011	ad af 09	               lda  fkeyset
.1014	d0 47		               bne  menub
.1016	20 34 17	               jsr  push
.1019	a2 db		               ldx  #<blankmsg
.101b	a0 11		               ldy  #>blankmsg
.101d	20 cc 16	               jsr  putscxy
.1020	a2 a5		               ldx  #<f6a_msg
.1022	a0 12		               ldy  #>f6a_msg
.1024	20 cc 16	               jsr  putscxy
.1027	20 73 17	               jsr  pop
.102a	08		               php
.102b	48		               pha
.102c	8a		               txa
.102d	48		               pha
.102e	ad c9 14	               lda  f6abutton
.1031	48		               pha
.1032	a9 92		               lda  #146
.1034	8d d8 14	               sta  f6abutton+15
.1037	a9 0d		               lda  #flashcol
.1039	8d c9 14	               sta  f6abutton
.103c	a2 c9		               ldx  #<f6abutton
.103e	a0 14		               ldy  #>f6abutton
.1040	20 cc 16	               jsr  putscxy
.1043	20 d2 0c	               jsr  delay
.1046	a9 12		               lda  #18
.1048	8d d8 14	               sta  f6abutton+15
.104b	68		               pla
.104c	8d c9 14	               sta  f6abutton
.104f	a2 c9		               ldx  #<f6abutton
.1051	a0 14		               ldy  #>f6abutton
.1053	20 cc 16	               jsr  putscxy
.1056	68		               pla
.1057	aa		               tax
.1058	68		               pla
.1059	28		               plp
.105a	4c a1 10	               jmp  out
.105d			menub
.105d	20 34 17	               jsr  push
.1060	a2 db		               ldx  #<blankmsg
.1062	a0 11		               ldy  #>blankmsg
.1064	20 cc 16	               jsr  putscxy
.1067	a2 46		               ldx  #<f6b_msg
.1069	a0 13		               ldy  #>f6b_msg
.106b	20 cc 16	               jsr  putscxy
.106e	20 73 17	               jsr  pop
.1071	08		               php
.1072	48		               pha
.1073	8a		               txa
.1074	48		               pha
.1075	ad 99 15	               lda  f6bbutton
.1078	48		               pha
.1079	a9 92		               lda  #146
.107b	8d a8 15	               sta  f6bbutton+15
.107e	a9 0d		               lda  #flashcol
.1080	8d 99 15	               sta  f6bbutton
.1083	a2 99		               ldx  #<f6bbutton
.1085	a0 15		               ldy  #>f6bbutton
.1087	20 cc 16	               jsr  putscxy
.108a	20 d2 0c	               jsr  delay
.108d	a9 12		               lda  #18
.108f	8d a8 15	               sta  f6bbutton+15
.1092	68		               pla
.1093	8d 99 15	               sta  f6bbutton
.1096	a2 99		               ldx  #<f6bbutton
.1098	a0 15		               ldy  #>f6bbutton
.109a	20 cc 16	               jsr  putscxy
.109d	68		               pla
.109e	aa		               tax
.109f	68		               pla
.10a0	28		               plp
.10a1	68		out            pla
.10a2	60		               rts
.10a3			f7action
.10a3	48		               pha
.10a4	a9 00		               lda  #$0
.10a6	8d ae 09	               sta  editmode
.10a9	ad af 09	               lda  fkeyset
.10ac	d0 47		               bne  menub
.10ae	20 34 17	               jsr  push
.10b1	a2 db		               ldx  #<blankmsg
.10b3	a0 11		               ldy  #>blankmsg
.10b5	20 cc 16	               jsr  putscxy
.10b8	a2 bf		               ldx  #<f7a_msg
.10ba	a0 12		               ldy  #>f7a_msg
.10bc	20 cc 16	               jsr  putscxy
.10bf	20 73 17	               jsr  pop
.10c2	08		               php
.10c3	48		               pha
.10c4	8a		               txa
.10c5	48		               pha
.10c6	ad e3 14	               lda  f7abutton
.10c9	48		               pha
.10ca	a9 92		               lda  #146
.10cc	8d f2 14	               sta  f7abutton+15
.10cf	a9 0d		               lda  #flashcol
.10d1	8d e3 14	               sta  f7abutton
.10d4	a2 e3		               ldx  #<f7abutton
.10d6	a0 14		               ldy  #>f7abutton
.10d8	20 cc 16	               jsr  putscxy
.10db	20 d2 0c	               jsr  delay
.10de	a9 12		               lda  #18
.10e0	8d f2 14	               sta  f7abutton+15
.10e3	68		               pla
.10e4	8d e3 14	               sta  f7abutton
.10e7	a2 e3		               ldx  #<f7abutton
.10e9	a0 14		               ldy  #>f7abutton
.10eb	20 cc 16	               jsr  putscxy
.10ee	68		               pla
.10ef	aa		               tax
.10f0	68		               pla
.10f1	28		               plp
.10f2	4c 39 11	               jmp  out
.10f5			menub
.10f5	20 34 17	               jsr  push
.10f8	a2 db		               ldx  #<blankmsg
.10fa	a0 11		               ldy  #>blankmsg
.10fc	20 cc 16	               jsr  putscxy
.10ff	a2 58		               ldx  #<f7b_msg
.1101	a0 13		               ldy  #>f7b_msg
.1103	20 cc 16	               jsr  putscxy
.1106	20 73 17	               jsr  pop
.1109	08		               php
.110a	48		               pha
.110b	8a		               txa
.110c	48		               pha
.110d	ad b3 15	               lda  f7bbutton
.1110	48		               pha
.1111	a9 92		               lda  #146
.1113	8d c2 15	               sta  f7bbutton+15
.1116	a9 0d		               lda  #flashcol
.1118	8d b3 15	               sta  f7bbutton
.111b	a2 b3		               ldx  #<f7bbutton
.111d	a0 15		               ldy  #>f7bbutton
.111f	20 cc 16	               jsr  putscxy
.1122	20 d2 0c	               jsr  delay
.1125	a9 12		               lda  #18
.1127	8d c2 15	               sta  f7bbutton+15
.112a	68		               pla
.112b	8d b3 15	               sta  f7bbutton
.112e	a2 b3		               ldx  #<f7bbutton
.1130	a0 15		               ldy  #>f7bbutton
.1132	20 cc 16	               jsr  putscxy
.1135	68		               pla
.1136	aa		               tax
.1137	68		               pla
.1138	28		               plp
.1139	68		out            pla
.113a	60		               rts
.113b			f8action
.113b	48		               pha
.113c	a9 00		               lda  #$0
.113e	8d ae 09	               sta  editmode
.1141	ad af 09	               lda  fkeyset
.1144	d0 47		               bne  menub
.1146	20 34 17	               jsr  push
.1149	a2 db		               ldx  #<blankmsg
.114b	a0 11		               ldy  #>blankmsg
.114d	20 cc 16	               jsr  putscxy
.1150	a2 c5		               ldx  #<menub_msg
.1152	a0 13		               ldy  #>menub_msg
.1154	20 cc 16	               jsr  putscxy
.1157	20 73 17	               jsr  pop
.115a	08		               php
.115b	48		               pha
.115c	8a		               txa
.115d	48		               pha
.115e	ad fd 14	               lda  f8abutton
.1161	48		               pha
.1162	a9 92		               lda  #146
.1164	8d 0c 15	               sta  f8abutton+15
.1167	a9 0d		               lda  #flashcol
.1169	8d fd 14	               sta  f8abutton
.116c	a2 fd		               ldx  #<f8abutton
.116e	a0 14		               ldy  #>f8abutton
.1170	20 cc 16	               jsr  putscxy
.1173	20 d2 0c	               jsr  delay
.1176	a9 12		               lda  #18
.1178	8d 0c 15	               sta  f8abutton+15
.117b	68		               pla
.117c	8d fd 14	               sta  f8abutton
.117f	a2 fd		               ldx  #<f8abutton
.1181	a0 14		               ldy  #>f8abutton
.1183	20 cc 16	               jsr  putscxy
.1186	68		               pla
.1187	aa		               tax
.1188	68		               pla
.1189	28		               plp
.118a	4c d1 11	               jmp  swapit
.118d			menub
.118d	20 34 17	               jsr  push
.1190	a2 db		               ldx  #<blankmsg
.1192	a0 11		               ldy  #>blankmsg
.1194	20 cc 16	               jsr  putscxy
.1197	a2 aa		               ldx  #<menua_msg
.1199	a0 13		               ldy  #>menua_msg
.119b	20 cc 16	               jsr  putscxy
.119e	20 73 17	               jsr  pop
.11a1	08		               php
.11a2	48		               pha
.11a3	8a		               txa
.11a4	48		               pha
.11a5	ad cd 15	               lda  f8bbutton
.11a8	48		               pha
.11a9	a9 92		               lda  #146
.11ab	8d dc 15	               sta  f8bbutton+15
.11ae	a9 0d		               lda  #flashcol
.11b0	8d cd 15	               sta  f8bbutton
.11b3	a2 cd		               ldx  #<f8bbutton
.11b5	a0 15		               ldy  #>f8bbutton
.11b7	20 cc 16	               jsr  putscxy
.11ba	20 d2 0c	               jsr  delay
.11bd	a9 12		               lda  #18
.11bf	8d dc 15	               sta  f8bbutton+15
.11c2	68		               pla
.11c3	8d cd 15	               sta  f8bbutton
.11c6	a2 cd		               ldx  #<f8bbutton
.11c8	a0 15		               ldy  #>f8bbutton
.11ca	20 cc 16	               jsr  putscxy
.11cd	68		               pla
.11ce	aa		               tax
.11cf	68		               pla
.11d0	28		               plp
.11d1	49 ff		swapit         eor  #$ff
.11d3	8d af 09	               sta  fkeyset
.11d6	20 6b 0b	               jsr  showfkeys
.11d9	68		               pla
.11da	60		               rts

;******  Processing file: messages.asm

=$07			mesgcol = vjaune
>11db	07 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>11df	20 20 20 20	               .null     "                                      "
>11e3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>11f3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1203	20 20 00
.1206			f1a_msg
>1206	07 00 05 12	edit_msg       .byte     mesgcol,0,5,18
>120a	20 45 44 49	               .null     " edit mode: chr$(   )",146
>120e	54 20 4d 4f 44 45 3a 20 43 48 52 24 28 20 20 20
>121e	29 92 00
.1221			f2a_msg
>1221	07 00 05 92	save_msg       .byte     mesgcol,0,5,146
>1225	20 53 41 56	               .null     " save on cassette or disk? (c/d):"
>1229	45 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>1239	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.1247			f3a_msg
>1247	07 00 05	load_msg       .byte     mesgcol,0,5
>124a	20 4c 4f 41	               .null     " load from cassette or disk? (c/d):"
>124e	44 20 46 52 4f 4d 20 43 41 53 53 45 54 54 45 20
>125e	4f 52 20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.126e			f4a_msg
>126e	07 00 05	copy_msg       .byte     mesgcol,0,5
>1271	20 45 4e 54	               .null     " enter character to copy:"
>1275	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>1285	43 4f 50 59 3a 00
.128b			f5a_msg
>128b	07 00 05	clear_msg      .byte     mesgcol,0,5
>128e	20 43 4c 45	               .null     " clear char: chr$(   )"
>1292	41 52 20 43 48 41 52 3a 20 43 48 52 24 28 20 20
>12a2	20 29 00
.12a5			f6a_msg
>12a5	07 00 05	fill_msg       .byte     mesgcol,0,5
>12a8	20 46 49 4c	               .null     " fill char:  chr$(   )"
>12ac	4c 20 43 48 41 52 3a 20 20 43 48 52 24 28 20 20
>12bc	20 29 00
.12bf			f7a_msg
>12bf	07 00 05	work_msg       .byte     mesgcol,0,5
>12c2	20 45 4e 41	               .null     " enable work space"
>12c6	42 4c 45 20 57 4f 52 4b 20 53 50 41 43 45 00
.12d5			f1b_msg
>12d5	07 00 05	rvrs_msg       .byte     mesgcol,0,5
>12d8	20 52 45 56	               .null     " reverse character:"
>12dc	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
.12ec			f2b_msg
>12ec	07 00 05	invr_msg       .byte     mesgcol,0,5
>12ef	20 49 4e 56	               .null     " inverting character:"
>12f3	45 52 54 49 4e 47 20 43 48 41 52 41 43 54 45 52
>1303	3a 00
.1305			f3b_msg
>1305	07 00 05	flip_msg       .byte     mesgcol,0,5
>1308	20 46 4c 49	               .null     " flipping character:"
>130c	50 50 49 4e 47 20 43 48 41 52 41 43 54 45 52 3a
>131c	00
.131d			f4b_msg
>131d	07 00 05	scrollr_msg    .byte     mesgcol,0,5
>1320	20 53 43 52	               .null     " scrolling right:"
>1324	4f 4c 4c 49 4e 47 20 52 49 47 48 54 3a 00
.1332			f5b_msg
>1332	07 00 05	scrolll_msg    .byte     mesgcol,0,5
>1335	20 53 43 52	               .null     " scrolling left:"
>1339	4f 4c 4c 49 4e 47 20 4c 45 46 54 3a 00
.1346			f6b_msg
>1346	07 00 05	scrollu_msg    .byte     mesgcol,0,5
>1349	20 53 43 52	               .null     " scrolling up:"
>134d	4f 4c 4c 49 4e 47 20 55 50 3a 00
.1358			f7b_msg
>1358	07 00 05	scrolld_msg    .byte     mesgcol,0,5
>135b	20 53 43 52	               .null     " scrolling down:"
>135f	4f 4c 4c 49 4e 47 20 44 4f 57 4e 3a 00
>136c	07 00 05	save_fname_msg .byte     mesgcol,0,5
>136f	20 53 41 56	               .null     " save: file name ------.chr"
>1373	45 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>1383	2d 2d 2d 2e 43 48 52 00
>138b	07 00 05	load_fname_msg .byte     mesgcol,0,5
>138e	20 4c 4f 41	               .null     " load: file name ------.chr"
>1392	44 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>13a2	2d 2d 2d 2e 43 48 52 00
>13aa	07 00 05	menua_msg      .byte     mesgcol,0,5
>13ad	20 59 4f 55	               .null     " you are now in menu a."
>13b1	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>13c1	20 41 2e 00
>13c5	07 00 05	menub_msg      .byte     mesgcol,0,5
>13c8	20 59 4f 55	               .null     " you are now in menu b."
>13cc	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>13dc	20 42 2e 00
>13e0	0e 15 18 12	quit_msg       .byte     vblue1,21,24,18
>13e4	43 54 52 4c	               .text     "ctrl-x",146
>13e8	2d 58 92
>13eb	20 54 4f 20	               .null     " to quit."
>13ef	51 55 49 54 2e 00
>13f5	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>13f9	43 54 52 4c	               .text     "ctrl-x",146
>13fd	2d 58 92
>1400	20 54 4f 20	               .null     " to menu."
>1404	4d 45 4e 55 2e 00
>140a	03 06 0c 12	bye_msg        .byte     vcyan,6,12,18
>140e	20 54 48 41	               .null     " thanks and have a good day ",146
>1412	4e 4b 53 20 41 4e 44 20 48 41 56 45 20 41 20 47
>1422	4f 4f 44 20 44 41 59 20 92 00
>142c	07 0a 18 12	any_msg        .byte     vjaune,10,24,18
>1430	20 41 4e 59	               .null         " any key to continue ",146
>1434	20 4b 45 59 20 54 4f 20 43 4f 4e 54 49 4e 55 45
>1444	20 92 00
=18			fkeyleft=18
=8			f1top=8
=1			menu1col = 1
=3			menu2col = 3
>1447	01 12 08	f1abutton      .byte     menu1col,fkeyleft,f1top       ;133
>144a	45 44 49 54	               .text     "edit....... "
>144e	2e 2e 2e 2e 2e 2e 2e 20
>1456	12		               .byte     18             ; position 15
>1457	20 20 20 46	               .text     "   f1   "
>145b	31 20 20 20
>145f	92 00		               .byte     146,0
>1461	01 12 0a	f2abutton      .byte     menu1col,fkeyleft,f1top+2     ;137
>1464	53 41 56 45	               .text     "save....... "
>1468	2e 2e 2e 2e 2e 2e 2e 20
>1470	12		               .byte     18            ; position 15
>1471	20 20 20 46	               .text     "   f2   "
>1475	32 20 20 20
>1479	92 00		               .byte     146,0
>147b	01 12 0c	f3abutton      .byte     menu1col,fkeyleft,f1top+4     ;134
>147e	4c 4f 41 44	               .text     "load....... "
>1482	2e 2e 2e 2e 2e 2e 2e 20
>148a	12		               .byte     18             ; position 15
>148b	20 20 20 46	               .text     "   f3   "
>148f	33 20 20 20
>1493	92 00		               .byte     146,0
>1495	01 12 0e	f4abutton      .byte     menu1col,fkeyleft,f1top+6     ;138
>1498	43 4f 50 59	               .text     "copy....... "
>149c	2e 2e 2e 2e 2e 2e 2e 20
>14a4	12		               .byte     18             ; position 15
>14a5	20 20 20 46	               .text     "   f4   "
>14a9	34 20 20 20
>14ad	92 00		               .byte     146,0
>14af	01 12 10	f5abutton      .byte     menu1col,fkeyleft,f1top+8     ;135
>14b2	43 4c 45 41	               .text     "clear...... "
>14b6	52 2e 2e 2e 2e 2e 2e 20
>14be	12		               .byte     18             ; position 15
>14bf	20 20 20 46	               .text     "   f5   "
>14c3	35 20 20 20
>14c7	92 00		               .byte     146,0
>14c9	01 12 12	f6abutton      .byte     menu1col,fkeyleft,f1top+10    ;139
>14cc	46 49 4c 4c	               .text     "fill....... "
>14d0	2e 2e 2e 2e 2e 2e 2e 20
>14d8	12		               .byte     18             ; position 15
>14d9	20 20 20 46	               .text     "   f6   "
>14dd	36 20 20 20
>14e1	92 00		               .byte     146,0
>14e3	01 12 14	f7abutton      .byte     menu1col,fkeyleft,f1top+12    ;136
>14e6	57 4f 52 4b	               .text     "work....... "
>14ea	2e 2e 2e 2e 2e 2e 2e 20
>14f2	12		               .byte     18             ; position 15
>14f3	20 20 20 46	               .text     "   f7   "
>14f7	37 20 20 20
>14fb	92 00		               .byte     146,0
>14fd	01 12 16	f8abutton      .byte     menu1col,fkeyleft,f1top+14    ;140
>1500	46 55 4e 43	               .text     "function... "
>1504	54 49 4f 4e 2e 2e 2e 20
>150c	12		               .byte     18             ; position 15
>150d	20 20 20 46	               .text     "   f8   "
>1511	38 20 20 20
>1515	92 00		               .byte     146,0
>1517	03 12 08	f1bbutton      .byte     menu2col,fkeyleft,f1top
>151a	52 45 56 45	               .text     "reverse.... "
>151e	52 53 45 2e 2e 2e 2e 20
>1526	12		               .byte     18             ; position 15
>1527	20 20 20 46	               .text     "   f1   "
>152b	31 20 20 20
>152f	92 00		               .byte     146,0
>1531	03 12 0a	f2bbutton      .byte     menu2col,fkeyleft,f1top+2
>1534	49 4e 56 45	               .text     "invert..... "
>1538	52 54 2e 2e 2e 2e 2e 20
>1540	12		               .byte     18             ; position 15
>1541	20 20 20 46	               .text     "   f2   "
>1545	32 20 20 20
>1549	92 00		               .byte     146,0
>154b	03 12 0c	f3bbutton      .byte     menu2col,fkeyleft,f1top+4
>154e	46 4c 49 50	               .text     "flip....... "
>1552	2e 2e 2e 2e 2e 2e 2e 20
>155a	12		               .byte     18             ; position 15
>155b	20 20 20 46	               .text     "   f3   "
>155f	33 20 20 20
>1563	92 00		               .byte     146,0
>1565	03 12 0e	f4bbutton      .byte     menu2col,fkeyleft,f1top+6
>1568	53 43 52 4f	               .text     "scroll r... "
>156c	4c 4c 20 52 2e 2e 2e 20
>1574	12		               .byte     18             ; position 15
>1575	20 20 20 46	               .text     "   f4   "
>1579	34 20 20 20
>157d	92 00		               .byte     146,0
>157f	03 12 10	f5bbutton      .byte     menu2col,fkeyleft,f1top+8
>1582	53 43 52 4f	               .text     "scroll l... "
>1586	4c 4c 20 4c 2e 2e 2e 20
>158e	12		               .byte     18             ; position 15
>158f	20 20 20 46	               .text     "   f5   "
>1593	35 20 20 20
>1597	92 00		               .byte     146,0
>1599	03 12 12	f6bbutton      .byte     menu2col,fkeyleft,f1top+10
>159c	53 43 52 4f	               .text     "scroll u... "
>15a0	4c 4c 20 55 2e 2e 2e 20
>15a8	12		               .byte     18             ; position 15
>15a9	20 20 20 46	               .text     "   f6   "
>15ad	36 20 20 20
>15b1	92 00		               .byte     146,0
>15b3	03 12 14	f7bbutton      .byte     menu2col,fkeyleft,f1top+12
>15b6	53 43 52 4f	               .text     "scroll d... "
>15ba	4c 4c 20 44 2e 2e 2e 20
>15c2	12		               .byte     18             ; position 15
>15c3	20 20 20 46	               .text     "   f7   "
>15c7	37 20 20 20
>15cb	92 00		               .byte     146,0
>15cd	03 12 16	f8bbutton      .byte     menu2col,fkeyleft,f1top+14
>15d0	46 55 4e 43	               .text     "function... "
>15d4	54 49 4f 4e 2e 2e 2e 20
>15dc	12		               .byte     18             ; position 15
>15dd	20 20 20 46	               .text     "   f8   "
>15e1	38 20 20 20
>15e5	92 00		               .byte     146,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.15e7			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.15e7			screendis
.15e7	08		               php
.15e8	48		               pha
.15e9	ad 11 d0	               lda  $d011
.15ec	29 ef		               and  #%11101111
.15ee	8d 11 d0	               sta  $d011
.15f1	68		               pla
.15f2	28		               plp
.15f3	60		               rts
.15f4			screenena
.15f4	08		               php
.15f5	48		               pha
.15f6	ad 11 d0	               lda  $d011
.15f9	09 10		               ora  #%00010000
.15fb	8d 11 d0	               sta  $d011
.15fe	68		               pla
.15ff	28		               plp
.1600	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.1601			scrmaninit
.1601	20 34 17	               jsr  push
.1604	a9 06		               lda  #vbleu
.1606	8d 21 d0	               sta  vicbackcol
.1609	a9 05		               lda  #vvert
.160b	8d 20 d0	               sta  vicbordcol
.160e	a9 01		               lda  #vblanc
.1610	8d 86 02	               sta  bascol
.1613	ad 00 04	               lda  scrnram
.1616	8d 00 04	               sta  scrnram
.1619	20 21 16	               jsr  cls
.161c	20 73 17	               jsr  pop
.161f	60		               rts
>1620	8e		characterset   .byte b_uppercase
.1621			cls
.1621	08		               php
.1622	48		               pha
.1623	a9 93		               lda  #$93
.1625	20 3d 16	               jsr  putch
.1628	a9 0e		               lda  #$0e
.162a	20 3d 16	               jsr  putch
.162d	68		               pla
.162e	28		               plp
.162f	60		               rts
.1630			putnch
.1630	08		               php
.1631	e0 00		               cpx  #$00
.1633	f0 06		               beq  out
.1635	20 d2 ff	again          jsr  $ffd2
.1638	ca		               dex
.1639	d0 fa		               bne  again
.163b	28		out            plp
.163c	60		               rts
.163d			putch
.163d	08		               php
.163e	20 d2 ff	               jsr  $ffd2
.1641	28		               plp
.1642	60		               rts
.1643			puts
.1643	20 34 17	               jsr  push
.1646	86 fb		               stx  zpage1
.1648	84 fc		               sty  zpage1+1
.164a	a0 00		               ldy  #0
.164c	b1 fb		next           lda  (zpage1),y
.164e	f0 09		               beq  exit
.1650	20 3d 16	               jsr  putch
.1653	20 3b 18	               jsr  inczp1
.1656	4c 4c 16	               jmp  next
.1659	20 73 17	exit           jsr  pop
.165c	60		               rts
.165d			gotoxy
.165d	08		               php
.165e	18		               clc
.165f	8a		               txa
.1660	48		               pha
.1661	98		               tya
.1662	aa		               tax
.1663	68		               pla
.1664	a8		               tay
.1665	20 f0 ff	               jsr  kplot
.1668	28		               plp
.1669	60		               rts
.166a			cursor
=$0286			bascol    =    $0286
.166a	08		               php
.166b	48		               pha
.166c	90 12		               bcc  restore
.166e	20 f0 ff	               jsr  kplot
.1671	8c 92 16	               sty  cx
.1674	8e 93 16	               stx  cy
.1677	ad 86 02	               lda  bascol
.167a	8d 94 16	               sta  bcol
.167d	4c 8f 16	               jmp  out
.1680	ae 93 16	restore        ldx  cy
.1683	ac 92 16	               ldy  cx
.1686	20 f0 ff	               jsr  kplot
.1689	ad 94 16	               lda  bcol
.168c	8d 86 02	               sta  bascol
.168f	68		out            pla
.1690	28		               plp
.1691	60		               rts
>1692	00		cx   .byte     $00
>1693	00		cy   .byte     $00
>1694	00		bcol .byte     $00
.1695			cursave
.1695	08		               php
.1696	38		               sec
.1697	20 6a 16	               jsr  cursor
.169a	28		               plp
.169b	60		               rts
.169c			curput
.169c	08		               php
.169d	18		               clc
.169e	20 6a 16	               jsr  cursor
.16a1	28		               plp
.16a2	60		               rts
.16a3			putsxy
.16a3	20 34 17	               jsr  push
.16a6	86 fb		               stx  zpage1
.16a8	84 fc		               sty  zpage1+1
.16aa	a0 00		               ldy  #$00
.16ac	b1 fb		               lda  (zpage1),y
.16ae	aa		               tax
.16af	20 3b 18	               jsr  inczp1
.16b2	b1 fb		               lda  (zpage1),y
.16b4	a8		               tay
.16b5	20 5d 16	               jsr  gotoxy
.16b8	20 3b 18	               jsr  inczp1
.16bb	a6 fb		               ldx  zpage1
.16bd	a4 fc		               ldy  zpage1+1
.16bf	20 43 16	               jsr  puts
.16c2	20 73 17	               jsr  pop
.16c5	60		               rts
>16c6	00 00		straddr   .word     $00
>16c8	00		px        .byte     $00
>16c9	00		py        .byte     $00
>16ca	00 00		zp1       .word     $00
.16cc			putscxy
.16cc	20 34 17	               jsr  push
.16cf	84 fc		               sty  zpage1+1
.16d1	86 fb		               stx  zpage1
.16d3	ad 86 02	               lda  bascol
.16d6	8d f6 16	               sta  bc
.16d9	a0 00		               ldy #$00
.16db	b1 fb		               lda  (zpage1),y
.16dd	8d 86 02	               sta  bascol
.16e0	20 3b 18	               jsr  inczp1
.16e3	a6 fb		               ldx  zpage1
.16e5	a4 fc		               ldy  zpage1+1
.16e7	20 a3 16	               jsr  putsxy
.16ea	ad f6 16	               lda  bc
.16ed	8d 86 02	               sta  bascol
.16f0	20 73 17	               jsr  pop
.16f3	60		               rts
>16f4	00 00		straddr  .word      $00
>16f6	00		bc       .byte      $00
>16f7	00 00		zp1      .word      $00
.16f9			putrahex
.16f9	08		               php
.16fa	48		               pha
.16fb	20 44 19	               jsr  a2hex
.16fe	a9 f0		               lda  #<a2hexstr
.1700	a0 18		               ldy  #>a2hexstr
.1702	20 43 16	               jsr  puts
.1705	68		               pla
.1706	28		               plp
.1707	60		               rts
.1708			kputrahexxy
.1708			bputrahexxy
.1708			putrahexxy
.1708	08		               php
.1709	20 44 19	               jsr  a2hex
.170c	a9 ed		               lda  #<a2hexpos
.170e	a0 18		               ldy  #>a2hexpos
.1710	20 a3 16	               jsr  putsxy
.1713	68		               pla
.1714	28		               plp
.1715	60		               rts
.1716			putrahexcxy
.1716	08		               php
.1717	20 44 19	               jsr  a2hex
.171a	a9 ed		               lda  #<a2hexpos
.171c	a0 18		               ldy  #>a2hexpos
.171e	20 cc 16	               jsr  putscxy
.1721	68		               pla
.1722	28		               plp
.1723	60		               rts
.1724			setinverse
.1724	48		               pha
.1725	a9 12		               lda  #$12
.1727	20 d2 ff	               jsr  $ffd2
.172a	68		               pla
.172b	60		               rts
.172c			clrinverse
.172c	48		               pha
.172d	a9 92		               lda  #$92
.172f	20 d2 ff	               jsr  $ffd2
.1732	68		               pla
.1733	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.1734			push
.1734	08		          php            ; stack : flg, pcl, pch
.1735	78		          sei
.1736	8d 70 17	          sta  ra        ; save a
.1739	68		          pla            ; stack : pcl, pch
.173a	8d 6f 17	          sta  rp        ; save rp
.173d	68		          pla            ; stack : pch
.173e	8d 71 17	          sta  pc        ; save pcl
.1741	68		          pla            ; stack : -
.1742	8d 72 17	          sta  pc+1      ; save pch
.1745	a5 fb		          lda  zpage1    ; get zpage1 low byte
.1747	48		          pha            ; stack : zp1l
.1748	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.174a	48		          pha            ; stack : zp1h, zp1l
.174b	a5 fd		          lda  zpage2    ; get zpage2 low byte
.174d	48		          pha            ; stack : zp2l, zp1h, zp1l
.174e	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.1750	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1751	ad 6f 17	          lda  rp        ; get rp
.1754	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1755	ad 70 17	          lda  ra        ; get a
.1758	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1759	8a		          txa            ; get x
.175a	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.175b	98		          tya            ; get y
.175c	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.175d	ad 72 17	          lda  pc+1      ; get pch
.1760	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1761	ad 71 17	          lda  pc        ; get pcl
.1764	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1765	ad 6f 17	          lda  rp        ; get rp
.1768	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1769	ad 70 17	          lda  ra        ; get a
.176c	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.176d	58		          cli
.176e	60		          rts
>176f	00		rp        .byte     0
>1770	00		ra        .byte     0
>1771	00 00		pc        .word     0
.1773			pull
.1773			pop
.1773	78		          sei
.1774	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1775	8d a8 17	          sta  pc        ; save pcl
.1778	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1779	8d a9 17	          sta  pc+1      ; save pch
.177c	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.177d	a8		          tay            ; set y
.177e	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.177f	aa		          tax            ; set x
.1780	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1781	8d a7 17	          sta  ra        ; save a
.1784	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1785	8d a6 17	          sta  rp        ; save rp
.1788	68		          pla            ; stack : zp2l, zp1h, zp1l
.1789	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.178b	68		          pla            ; stack : zp1h, zp1l
.178c	85 fd		          sta  zpage2    ; get zpage2 High byte
.178e	68		          pla            ; stack : zp1l
.178f	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.1791	68		          pla            ; stack :
.1792	85 fb		          sta  zpage1    ; get zpage1 High byte
.1794	ad a9 17	          lda  pc+1      ; get pch
.1797	48		          pha            ; stack : pch
.1798	ad a8 17	          lda  pc
.179b	48		          pha            ; stack : pcl, pch
.179c	ad a6 17	          lda  rp        ; get rp
.179f	48		          pha            ; stack : rp, pcl, pch
.17a0	ad a7 17	          lda  ra        ; set ra
.17a3	58		          cli
.17a4	28		          plp            ; stack : pcl, pch
.17a5	60		          rts
>17a6	00		rp        .byte     0
>17a7	00		ra        .byte     0
>17a8	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.17aa			blkfill
.17aa	20 34 17	bf0            jsr  push
.17ad	20 6b 18	               jsr  savezp1
.17b0	84 fc		               sty  zpage1+1
.17b2	a0 00		               ldy  #$00
.17b4	84 fb		               sty  zpage1
.17b6	91 fb		bf1            sta  (zpage1),y
.17b8	c8		               iny
.17b9	d0 fb		               bne  bf1
.17bb	20 7a 18	               jsr  restzp1
.17be	20 73 17	               jsr  pop
.17c1	60		               rts
.17c2			memfill
.17c2	20 34 17	               jsr  push
.17c5	20 aa 17	mf1            jsr  blkfill
.17c8	c8		               iny
.17c9	ca		               dex
.17ca	d0 f9		               bne  mf1
.17cc	20 73 17	               jsr  pop
.17cf	60		               rts
.17d0			memmove
.17d0	20 34 17	               jsr  push
.17d3	ba		               tsx            ; On se crée un pointeur ...
.17d4	8a		               txa
.17d5	18		               clc
.17d6	69 0b		               adc  #11
.17d8	a8		               tay
.17d9	a2 06		               ldx  #$06
.17db	b9 00 01	nextbyte       lda  $0100,y
.17de	99 2a 18	               sta  words,y
.17e1	c8		               iny
.17e2	ca		               dex
.17e3	d0 f6		               bne  nextbyte
.17e5	ad 2a 18	               lda  s
.17e8	8d 01 18	               sta  source+1
.17eb	ad 2b 18	               lda  s+1
.17ee	8d 02 18	               sta  source+2
.17f1	ad 2c 18	               lda  d
.17f4	8d fe 17	               sta  destin+1
.17f7	ad 2d 18	               lda  d+1
.17fa	8d ff 17	               sta  destin+2
.17fd	ad ff ff	destin         lda  $ffff
.1800	8d ff ff	source         sta  $ffff
.1803	ee fe 17	               inc  destin+1
.1806	d0 03		               bne  src
.1808	ee ff 17	               inc  destin+2
.180b	ee 01 18	src            inc  source+1
.180e	d0 03		               bne  cnt
.1810	ee 02 18	               inc  source+2
.1813	ad 2e 18	cnt            lda  compte
.1816	d0 08		               bne  decit
.1818	ad 2f 18	               lda  compte+1
.181b	f0 09		               beq  fini
.181d	ce 2f 18	               dec  compte+1
.1820	ce 2e 18	decit          dec  compte
.1823	4c fd 17	               jmp  destin
.1826	20 73 17	fini           jsr  pop
.1829	60		               rts
.182a			words
>182a	00 00		s         .word     $0000
>182c	00 00		d         .word     $0000
>182e	00 00		compte    .word     $0000
.1830			decword
.1830	20 34 17	               jsr  push
.1833	86 fd		               stx  zpage2
.1835	84 fe		               sty  zpage2+1
.1837	20 73 17	               jsr  pop
.183a	60		               rts
.183b			inczp1
.183b	08		               php
.183c	48		               pha
.183d	e6 fb		               inc  zpage1
.183f	a5 fb		               lda  zpage1
.1841	d0 02		               bne  nopage
.1843	e6 fc		               inc  zpage1+1
.1845	68		nopage         pla
.1846	28		               plp
.1847	60		               rts
.1848			deczp1
.1848	08		                php
.1849	48		                pha
.184a	c6 fb		                dec  zpage1
.184c	d0 02		                bne  nopage
.184e	c6 fc		                dec  zpage1+1
.1850	68		nopage          pla
.1851	28		                plp
.1852	60		                rts
.1853			inczp2
.1853	08		               php
.1854	48		               pha
.1855	e6 fd		               inc  zpage2
.1857	a5 fd		               lda  zpage2
.1859	d0 02		               bne  nopage
.185b	e6 fe		               inc  zpage2+1
.185d	68		nopage         pla
.185e	28		               plp
.185f	60		               rts
.1860			deczp2
.1860	08		               php
.1861	48		               pha
.1862	a5 fd		               lda  zpage2
.1864	d0 02		               bne  nopage
.1866	c6 fe		               dec  zpage2+1
.1868	68		nopage         pla
.1869	28		               plp
.186a	60		               rts
.186b			savezp1
.186b	08		               php
.186c	48		               pha
.186d	a5 fb		               lda  zpage1
.186f	8d e7 18	               sta  zp1
.1872	a5 fc		               lda  zpage1+1
.1874	8d e8 18	               sta  zp1+1
.1877	68		               pla
.1878	28		               plp
.1879	60		               rts
.187a			restzp1
.187a	08		               php
.187b	48		               pha
.187c	ad e7 18	               lda zp1
.187f	85 fb		               sta zpage1
.1881	ad e8 18	               lda zp1+1
.1884	85 fc		               sta zpage1+1
.1886	68		               pla
.1887	28		               plp
.1888	60		               rts
.1889			savezp2
.1889	08		         php
.188a	48		         pha
.188b	a5 fd		         lda zpage2
.188d	8d e9 18	         sta zp2
.1890	a5 fe		         lda zpage2+1
.1892	8d ea 18	         sta zp2+1
.1895	68		         pla
.1896	28		         plp
.1897	60		         rts
.1898			restzp2
.1898	08		                php
.1899	48		                pha
.189a	ad e9 18	                lda  zp2
.189d	85 fd		                sta  zpage2
.189f	ad ea 18	                lda  zp2+1
.18a2	85 fe		                sta  zpage2+1
.18a4	68		                pla
.18a5	28		                plp
.18a6	60		                rts
.18a7			xy2addr
.18a7	08		                php
.18a8	48		                pha
.18a9	8a		                txa
.18aa	48		                pha
.18ab	98		                tya
.18ac	48		                pha
.18ad	ad e2 18	                lda     addr1+1
.18b0	8d e4 18	                sta     addr2+1
.18b3	ad e1 18	                lda     addr1
.18b6	8d e3 18	                sta     addr2
.18b9	c0 00		                cpy     #$00
.18bb	f0 0f		                beq     addx
.18bd	18		moreline        clc
.18be	6d e0 18	                adc     ymult
.18c1	90 03		                bcc     norepy
.18c3	ee e4 18	                inc     addr2+1
.18c6	8d e3 18	norepy          sta     addr2
.18c9	88		                dey
.18ca	d0 f1		                bne     moreline
.18cc	8a		addx            txa
.18cd	18		                clc
.18ce	6d e3 18	                adc     addr2
.18d1	90 03		                bcc     thatsit
.18d3	ee e4 18	                inc     addr2+1
.18d6	8d e3 18	thatsit         sta     addr2
.18d9	68		                pla
.18da	a8		                tay
.18db	68		                pla
.18dc	aa		                tax
.18dd	68		                pla
.18de	28		                plp
.18df	60		                rts
>18e0	28		ymult          .byte     40
>18e1	00 00		addr1          .word     $0000
>18e3	00 00		addr2          .word     $0000
>18e5	00 00		bytecnt        .word     $0000
>18e7	00 00		zp1        .word   $0000
>18e9	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>18eb	01		a2hexcol       .byte     1              ; pour aputscxy
>18ec	00		a2hexbkcol     .byte     %00000000
.18ed			a2hexpos
>18ed	00		a2hexpx        .byte     0              ; pour aputsxy
>18ee	00		a2hexpy        .byte     0
>18ef	24		a2hexprefix    .byte     "$"            ; pour aputs
>18f0	00 00		a2hexstr       .word     $00
>18f2	00 00		               .word     $00
>18f4	00		               .byte     0              ; 0 end string
.18f5			putahexfmtxy
.18f5	20 34 17	               jsr  push
.18f8	20 44 19	               jsr  a2hex
.18fb	ae ed 18	               ldx  a2hexpx
.18fe	ac ee 18	               ldy  a2hexpy
.1901	20 5d 16	               jsr  gotoxy
.1904	a2 ef		               ldx  #<a2hexprefix
.1906	a0 18		               ldy  #>a2hexprefix
.1908	20 43 16	               jsr  puts
.190b	20 73 17	               jsr  pop
.190e	60		               rts
.190f			putahexfmt
.190f	20 34 17	               jsr  push
.1912	20 44 19	               jsr  a2hex
.1915	a2 ef		               ldx  #<a2hexprefix
.1917	a0 18		               ldy  #>a2hexprefix
.1919	20 43 16	               jsr  puts
.191c	20 73 17	               jsr  pop
.191f	60		               rts
.1920			putahex
.1920	20 34 17	               jsr  push
.1923	20 44 19	               jsr  a2hex
.1926	a2 f0		               ldx  #<a2hexstr
.1928	a0 18		               ldy  #>a2hexstr
.192a	20 43 16	               jsr  puts
.192d	20 73 17	               jsr  pop
.1930	60		               rts
.1931			nib2hex
.1931	08		               php
.1932	29 0f		               and  #$0f
.1934	f8		               sed
.1935	18		               clc
.1936	69 90		               adc  #$90
.1938	69 40		               adc  #$40
.193a	d8		               cld
.193b	28		               plp
.193c	60		               rts
.193d			lsra4bits
.193d	08		               php
.193e	4a		               lsr
.193f	4a		               lsr
.1940	4a		               lsr
.1941	4a		               lsr
.1942	28		               plp
.1943	60		               rts
.1944			a2hex
.1944	08		               php
.1945	48		               pha
.1946	48		               pha
.1947	20 3d 19	               jsr  lsra4bits
.194a	20 31 19	               jsr  nib2hex
.194d	8d f0 18	               sta  a2hexstr
.1950	68		               pla
.1951	20 31 19	               jsr  nib2hex
.1954	8d f1 18	               sta  a2hexstr+1
.1957	a9 00		               lda  #$00                ; set end of string
.1959	8d f2 18	               sta  a2hexstr+2
.195c	68		               pla
.195d	28		               plp
.195e	60		               rts
.195f			xy2hex
.195f	20 34 17	               jsr  push
.1962	20 44 19	               jsr  a2hex
.1965	8a		               txa
.1966	48		               pha
.1967	20 3d 19	               jsr  lsra4bits
.196a	20 31 19	               jsr  nib2hex
.196d	8d f0 18	               sta  a2hexstr
.1970	68		               pla
.1971	20 31 19	               jsr  nib2hex
.1974	8d f1 18	               sta  a2hexstr+1
.1977	98		               tya
.1978	48		               pha
.1979	20 3d 19	               jsr  lsra4bits
.197c	20 31 19	               jsr  nib2hex
.197f	8d f2 18	               sta  a2hexstr+2
.1982	68		               pla
.1983	20 31 19	               jsr  nib2hex
.1986	8d f3 18	               sta  a2hexstr+3
.1989	a9 00		               lda  #$00                ; 0 ended string
.198b	8d f4 18	               sta  a2hexstr+4
.198e	20 73 17	               jsr  pop
.1991			atobin
.1991	20 34 17	               jsr     push
.1994	a2 08		               ldx     #8
.1996	a0 00		               ldy     #0
.1998	2a		nextbit        rol
.1999	48		               pha
.199a	69 00		               adc     #$00
.199c	29 01		               and     #$01
.199e	20 31 19	               jsr     nib2hex
.19a1	99 b2 19	               sta     abin,y
.19a4	68		               pla
.19a5	c8		               iny
.19a6	ca		               dex
.19a7	d0 ef		               bne     nextbit
.19a9	a9 00		               lda     #0
.19ab	99 b2 19	               sta     abin,y
.19ae	20 73 17	               jsr     pull
.19b1	60		               rts
>19b2	30 30 30 30	abin           .null   "00000000"
>19b6	30 30 30 30 00
.19bb			putabin
.19bb	20 91 19	               jsr     atobin
.19be	20 34 17	               jsr     push
.19c1	a2 b2		               ldx     #<abin
.19c3	a0 19		               ldy     #>abin
.19c5	20 43 16	               jsr     puts
.19c8	20 73 17	               jsr     pop
.19cb	60		               rts
.19cc			putabinfmt
.19cc	08		               php
.19cd	48		               pha
.19ce	a9 25		               lda     #"%"
.19d0	20 3d 16	               jsr     putch
.19d3	68		               pla
.19d4	20 bb 19	               jsr     putabin
.19d7	28		               plp
.19d8	60		               rts
.19d9			putabinxy
.19d9	20 5d 16	               jsr     gotoxy
.19dc	20 bb 19	               jsr     putabin
.19df	60		               rts
.19e0			putabinfmtxy
.19e0	20 5d 16	               jsr     gotoxy
.19e3	20 cc 19	               jsr     putabinfmt
.19e6	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>19e7	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>19eb	00 00 00 00 00 00 00 00 00 0d 00 00
>19f7	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>19fb	00 00 00 00 00 00 00 00 00 00 00 00
>1a07	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>1a0b	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1a17	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1a1b	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1a27	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1a2b	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>1a37	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1a3b	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>1a47	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1a4b	00 00 00 00 00 00 00 00 00 00 00 00
>1a57	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1a5b	00 00 00 00 00 00 00 00 00 00 00 00
>1a67	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1a6b	00 00 00 00 00 00 00 00 00 00 00 00
>1a77	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1a7b	00 00 00 00 00 00 00 00 00 00 00 00
>1a87	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>1a8b	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1a97	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1a9b	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1aa7	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1aab	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>1ab7	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>1abb	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>1ac7	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>1acb	00 00 00 00 00 00 00 00 00 00 00 00
>1ad7	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>1adb	00 00 00 00 00 00 00 00 00 00 00 00
.1ae7			waitstop
.1ae7	20 34 17	               jsr  push
.1aea	20 ed f6	wait           jsr  k_stop
.1aed	d0 fb		               bne  wait
.1aef	20 73 17	               jsr  pop
.1af2	60		               rts
.1af3			anykey
.1af3	08		               php
.1af4	48		               pha
.1af5	a5 cb		nokey          lda 203
.1af7	c9 40		               cmp #64
.1af9	f0 fa		               beq nokey
.1afb	20 01 1b	               jsr releasekey
.1afe	68		               pla
.1aff	28		               plp
.1b00	60		               rts
.1b01			releasekey
.1b01	08		               php
.1b02	48		               pha
.1b03	a5 cb		keypressed     lda 203
.1b05	c9 40		               cmp #64
.1b07	d0 fa		               bne keypressed
.1b09	68		               pla
.1b0a	28		               plp
.1b0b	60		               rts
.1b0c			getkey
.1b0c	20 e4 ff	again          jsr  getin
.1b0f	c9 00		               cmp  #0
.1b11	f0 f9		               beq  again
.1b13	60		               rts
.1b14			waitkey
.1b14	20 34 17	               jsr  push
.1b17	8d 65 1b	               sta  thekey
.1b1a	20 e4 ff	nope           jsr  getin
.1b1d	20 d2 ff	               jsr  chrout
.1b20	cd 65 1b	               cmp  thekey
.1b23	d0 f5		               bne  nope
.1b25	20 d2 ff	               jsr  chrout
.1b28	20 73 17	               jsr  pop
.1b2b	60		               rts
.1b2c			waitspace
.1b2c	20 34 17	               jsr  push
.1b2f	a9 7f		wait           lda  #$7f  ;%01111111
.1b31	8d 00 dc	               sta  $dc00
.1b34	ad 01 dc	               lda  $dc01
.1b37	29 10		               and  #$10  ;mask %00010000
.1b39	d0 f4		               bne  wait
.1b3b	20 73 17	               jsr  pop
.1b3e			waitsstop
.1b3e	20 34 17	               jsr  push
.1b41	20 ed f6	wait           jsr  k_stop  ;%01111111
.1b44	d0 fb		               bne  wait
.1b46	20 73 17	               jsr  pop
.1b49			waitreturn
.1b49	20 34 17	               jsr  push
.1b4c	ad 66 1b	               lda  thecount
.1b4f	8d 00 04	               sta  scrnram
.1b52	a9 02		               lda  #$02
.1b54	8d 00 d8	               sta  colorram
.1b57	20 e4 ff	nope           jsr  getin
.1b5a	c9 0d		nohex          cmp  #$0d
.1b5c	d0 f9		               bne  nope
.1b5e	ee 66 1b	               inc  thecount
.1b61	20 73 17	               jsr  pop
.1b64	60		               rts
>1b65	00		thekey         .byte   0
>1b66	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  End of listing

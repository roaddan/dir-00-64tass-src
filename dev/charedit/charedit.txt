
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Sun Nov  5 17:54:57 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm

=$0d			flashcol = vvert1

;******  Return to file: charedit.asm

.080d			main
.080d	20 90 14	               jsr push
.0810	20 41 13	               jsr screendis
.0813	20 5b 13	               jsr scrmaninit
.0816	20 dd 0d	               jsr staticscreen
.0819	20 4e 13	               jsr screenena
.081c	20 90 14	               jsr  push
.081f	a2 64		               ldx  #<blankmsg
.0821	a0 0f		               ldy  #>blankmsg
.0823	20 28 14	               jsr  putscxy
.0826	a2 8f		               ldx  #<edit_msg
.0828	a0 0f		               ldy  #>edit_msg
.082a	20 28 14	               jsr  putscxy
.082d	20 cf 14	               jsr  pop
.0830	a9 00		               lda  #$00
.0832	8d 63 08	               sta  fkeyset
.0835	20 23 0e	               jsr  showfkeys
.0838	20 cf 14	               jsr  pop
.083b	20 6b 08	               jsr  keyaction
.083e	20 7d 13	               jsr  cls
.0841	20 90 14	               jsr  push
.0844	a2 64		               ldx  #<blankmsg
.0846	a0 0f		               ldy  #>blankmsg
.0848	20 28 14	               jsr  putscxy
.084b	a2 7f		               ldx  #<bye_msg
.084d	a0 11		               ldy  #>bye_msg
.084f	20 28 14	               jsr  putscxy
.0852	20 cf 14	               jsr  pop
.0855	20 90 14	               jsr  push
.0858	a2 00		               ldx  #0
.085a	a0 00		               ldy  #0
.085c	20 b9 13	               jsr  gotoxy
.085f	20 cf 14	               jsr  pop
.0862	60		               rts
>0863	00		fkeyset        .byte     0
.0864			setscreenptr
.0864	20 90 14	               jsr  push
.0867	20 cf 14	               jsr  pop
.086a	60		               rts
.086b			keyaction
.086b	20 90 14	               jsr  push
.086e	20 65 18	loop           jsr  getkey
.0871	20 90 14	               jsr  push
.0874	a2 00		               ldx  #0
.0876	a0 14		               ldy  #20
.0878	20 b9 13	               jsr  gotoxy
.087b	20 cf 14	               jsr  pop
.087e	20 99 13	               jsr  putch
.0881	20 90 14	               jsr  push
.0884	a2 00		               ldx  #0
.0886	a0 15		               ldy  #21
.0888	20 b9 13	               jsr  gotoxy
.088b	20 cf 14	               jsr  pop
.088e	48		               pha
.088f	48		               pha
.0890	a9 24		               lda  #'$'
.0892	20 99 13	               jsr  putch
.0895	68		               pla
.0896	aa		               tax
.0897	bd 40 17	               lda  asciitorom,x
.089a	20 79 16	               jsr  putahex
.089d	20 90 14	               jsr  push
.08a0	a2 28		               ldx  #<txt1
.08a2	a0 09		               ldy  #>txt1
.08a4	20 9f 13	               jsr  puts
.08a7	20 cf 14	               jsr  pull
.08aa	20 90 14	               jsr  push
.08ad	a2 00		               ldx  #0
.08af	a0 16		               ldy  #22
.08b1	20 b9 13	               jsr  gotoxy
.08b4	20 cf 14	               jsr  pop
.08b7	a9 24		               lda  #'$'
.08b9	20 99 13	               jsr  putch
.08bc	68		               pla
.08bd	20 79 16	               jsr  putahex
.08c0	20 90 14	               jsr  push
.08c3	a2 32		               ldx  #<txt2
.08c5	a0 09		               ldy  #>txt2
.08c7	20 9f 13	               jsr  puts
.08ca	20 cf 14	               jsr  pull
.08cd	c9 85		               cmp  #key_f1
.08cf	f0 23		               beq  f1
.08d1	c9 89		               cmp  #key_f2
.08d3	f0 25		               beq  f2
.08d5	c9 86		               cmp  #key_f3
.08d7	f0 27		               beq  f3
.08d9	c9 8a		               cmp  #key_f4
.08db	f0 29		               beq  f4
.08dd	c9 87		               cmp  #key_f5
.08df	f0 2b		               beq  f5
.08e1	c9 8b		               cmp  #key_f6
.08e3	f0 2d		               beq  f6
.08e5	c9 88		               cmp  #key_f7
.08e7	f0 2f		               beq  f7
.08e9	c9 8c		               cmp  #key_f8
.08eb	f0 31		               beq  f8
.08ed	c9 18		               cmp  #ctrl_x
.08ef	f0 33		               beq  quit
.08f1	4c 6e 08	               jmp  loop
.08f4	20 3d 09	f1             jsr  f1action
.08f7	4c 6e 08	               jmp  loop
.08fa	20 d0 09	f2             jsr  f2action
.08fd	4c 6e 08	               jmp  loop
.0900	20 63 0a	f3             jsr  f3action
.0903	4c 6e 08	               jmp  loop
.0906	20 f6 0a	f4             jsr  f4action
.0909	4c 6e 08	               jmp  loop
.090c	20 89 0b	f5             jsr  f5action
.090f	4c 6e 08	               jmp  loop
.0912	20 1c 0c	f6             jsr  f6action
.0915	4c 6e 08	               jmp  loop
.0918	20 af 0c	f7             jsr  f7action
.091b	4c 6e 08	               jmp  loop
.091e	20 42 0d	f8             jsr  f8action
.0921	4c 6e 08	               jmp  loop
.0924			quit
.0924	20 cf 14	               jsr  pop
.0927	60		               rts
>0928	20 52 4f 4d	txt1           .null     " rom pos."
>092c	20 50 4f 53 2e 00
>0932	20 4b 45 59	txt2           .null     " key value"
>0936	20 56 41 4c 55 45 00
.093d			f1action
.093d	48		               pha
.093e	ad 63 08	               lda  fkeyset
.0941	d0 47		               bne  menub
.0943	08		               php
.0944	48		               pha
.0945	8a		               txa
.0946	48		               pha
.0947	ad a1 11	               lda  f1abutton
.094a	48		               pha
.094b	a9 92		               lda  #146
.094d	8d b0 11	               sta  f1abutton+15
.0950	a9 0d		               lda  #flashcol
.0952	8d a1 11	               sta  f1abutton
.0955	a2 a1		               ldx  #<f1abutton
.0957	a0 11		               ldy  #>f1abutton
.0959	20 28 14	               jsr  putscxy
.095c	20 4f 0f	               jsr  delay
.095f	a9 12		               lda  #18
.0961	8d b0 11	               sta  f1abutton+15
.0964	68		               pla
.0965	8d a1 11	               sta  f1abutton
.0968	a2 a1		               ldx  #<f1abutton
.096a	a0 11		               ldy  #>f1abutton
.096c	20 28 14	               jsr  putscxy
.096f	68		               pla
.0970	aa		               tax
.0971	68		               pla
.0972	28		               plp
.0973	20 90 14	               jsr  push
.0976	a2 64		               ldx  #<blankmsg
.0978	a0 0f		               ldy  #>blankmsg
.097a	20 28 14	               jsr  putscxy
.097d	a2 8f		               ldx  #<f1a_msg
.097f	a0 0f		               ldy  #>f1a_msg
.0981	20 28 14	               jsr  putscxy
.0984	20 cf 14	               jsr  pop
.0987	4c ce 09	               jmp  out
.098a			menub
.098a	08		               php
.098b	48		               pha
.098c	8a		               txa
.098d	48		               pha
.098e	ad 71 12	               lda  f1bbutton
.0991	48		               pha
.0992	a9 92		               lda  #146
.0994	8d 80 12	               sta  f1bbutton+15
.0997	a9 0d		               lda  #flashcol
.0999	8d 71 12	               sta  f1bbutton
.099c	a2 71		               ldx  #<f1bbutton
.099e	a0 12		               ldy  #>f1bbutton
.09a0	20 28 14	               jsr  putscxy
.09a3	20 4f 0f	               jsr  delay
.09a6	a9 12		               lda  #18
.09a8	8d 80 12	               sta  f1bbutton+15
.09ab	68		               pla
.09ac	8d 71 12	               sta  f1bbutton
.09af	a2 71		               ldx  #<f1bbutton
.09b1	a0 12		               ldy  #>f1bbutton
.09b3	20 28 14	               jsr  putscxy
.09b6	68		               pla
.09b7	aa		               tax
.09b8	68		               pla
.09b9	28		               plp
.09ba	20 90 14	               jsr  push
.09bd	a2 64		               ldx  #<blankmsg
.09bf	a0 0f		               ldy  #>blankmsg
.09c1	20 28 14	               jsr  putscxy
.09c4	a2 5f		               ldx  #<f1b_msg
.09c6	a0 10		               ldy  #>f1b_msg
.09c8	20 28 14	               jsr  putscxy
.09cb	20 cf 14	               jsr  pop
.09ce	68		out            pla
.09cf	60		               rts
.09d0			f2action
.09d0	48		               pha
.09d1	ad 63 08	               lda  fkeyset
.09d4	d0 47		               bne  menub
.09d6	08		               php
.09d7	48		               pha
.09d8	8a		               txa
.09d9	48		               pha
.09da	ad bb 11	               lda  f2abutton
.09dd	48		               pha
.09de	a9 92		               lda  #146
.09e0	8d ca 11	               sta  f2abutton+15
.09e3	a9 0d		               lda  #flashcol
.09e5	8d bb 11	               sta  f2abutton
.09e8	a2 bb		               ldx  #<f2abutton
.09ea	a0 11		               ldy  #>f2abutton
.09ec	20 28 14	               jsr  putscxy
.09ef	20 4f 0f	               jsr  delay
.09f2	a9 12		               lda  #18
.09f4	8d ca 11	               sta  f2abutton+15
.09f7	68		               pla
.09f8	8d bb 11	               sta  f2abutton
.09fb	a2 bb		               ldx  #<f2abutton
.09fd	a0 11		               ldy  #>f2abutton
.09ff	20 28 14	               jsr  putscxy
.0a02	68		               pla
.0a03	aa		               tax
.0a04	68		               pla
.0a05	28		               plp
.0a06	20 90 14	               jsr  push
.0a09	a2 64		               ldx  #<blankmsg
.0a0b	a0 0f		               ldy  #>blankmsg
.0a0d	20 28 14	               jsr  putscxy
.0a10	a2 ab		               ldx  #<f2a_msg
.0a12	a0 0f		               ldy  #>f2a_msg
.0a14	20 28 14	               jsr  putscxy
.0a17	20 cf 14	               jsr  pop
.0a1a	4c 61 0a	               jmp  out
.0a1d			menub
.0a1d	08		               php
.0a1e	48		               pha
.0a1f	8a		               txa
.0a20	48		               pha
.0a21	ad 8b 12	               lda  f2bbutton
.0a24	48		               pha
.0a25	a9 92		               lda  #146
.0a27	8d 9a 12	               sta  f2bbutton+15
.0a2a	a9 0d		               lda  #flashcol
.0a2c	8d 8b 12	               sta  f2bbutton
.0a2f	a2 8b		               ldx  #<f2bbutton
.0a31	a0 12		               ldy  #>f2bbutton
.0a33	20 28 14	               jsr  putscxy
.0a36	20 4f 0f	               jsr  delay
.0a39	a9 12		               lda  #18
.0a3b	8d 9a 12	               sta  f2bbutton+15
.0a3e	68		               pla
.0a3f	8d 8b 12	               sta  f2bbutton
.0a42	a2 8b		               ldx  #<f2bbutton
.0a44	a0 12		               ldy  #>f2bbutton
.0a46	20 28 14	               jsr  putscxy
.0a49	68		               pla
.0a4a	aa		               tax
.0a4b	68		               pla
.0a4c	28		               plp
.0a4d	20 90 14	               jsr  push
.0a50	a2 64		               ldx  #<blankmsg
.0a52	a0 0f		               ldy  #>blankmsg
.0a54	20 28 14	               jsr  putscxy
.0a57	a2 76		               ldx  #<f2b_msg
.0a59	a0 10		               ldy  #>f2b_msg
.0a5b	20 28 14	               jsr  putscxy
.0a5e	20 cf 14	               jsr  pop
.0a61	68		out            pla
.0a62	60		               rts
.0a63			f3action
.0a63	48		               pha
.0a64	ad 63 08	               lda  fkeyset
.0a67	d0 47		               bne  menub
.0a69	08		               php
.0a6a	48		               pha
.0a6b	8a		               txa
.0a6c	48		               pha
.0a6d	ad d5 11	               lda  f3abutton
.0a70	48		               pha
.0a71	a9 92		               lda  #146
.0a73	8d e4 11	               sta  f3abutton+15
.0a76	a9 0d		               lda  #flashcol
.0a78	8d d5 11	               sta  f3abutton
.0a7b	a2 d5		               ldx  #<f3abutton
.0a7d	a0 11		               ldy  #>f3abutton
.0a7f	20 28 14	               jsr  putscxy
.0a82	20 4f 0f	               jsr  delay
.0a85	a9 12		               lda  #18
.0a87	8d e4 11	               sta  f3abutton+15
.0a8a	68		               pla
.0a8b	8d d5 11	               sta  f3abutton
.0a8e	a2 d5		               ldx  #<f3abutton
.0a90	a0 11		               ldy  #>f3abutton
.0a92	20 28 14	               jsr  putscxy
.0a95	68		               pla
.0a96	aa		               tax
.0a97	68		               pla
.0a98	28		               plp
.0a99	20 90 14	               jsr  push
.0a9c	a2 64		               ldx  #<blankmsg
.0a9e	a0 0f		               ldy  #>blankmsg
.0aa0	20 28 14	               jsr  putscxy
.0aa3	a2 d1		               ldx  #<f3a_msg
.0aa5	a0 0f		               ldy  #>f3a_msg
.0aa7	20 28 14	               jsr  putscxy
.0aaa	20 cf 14	               jsr  pop
.0aad	4c f4 0a	               jmp  out
.0ab0			menub
.0ab0	08		               php
.0ab1	48		               pha
.0ab2	8a		               txa
.0ab3	48		               pha
.0ab4	ad a5 12	               lda  f3bbutton
.0ab7	48		               pha
.0ab8	a9 92		               lda  #146
.0aba	8d b4 12	               sta  f3bbutton+15
.0abd	a9 0d		               lda  #flashcol
.0abf	8d a5 12	               sta  f3bbutton
.0ac2	a2 a5		               ldx  #<f3bbutton
.0ac4	a0 12		               ldy  #>f3bbutton
.0ac6	20 28 14	               jsr  putscxy
.0ac9	20 4f 0f	               jsr  delay
.0acc	a9 12		               lda  #18
.0ace	8d b4 12	               sta  f3bbutton+15
.0ad1	68		               pla
.0ad2	8d a5 12	               sta  f3bbutton
.0ad5	a2 a5		               ldx  #<f3bbutton
.0ad7	a0 12		               ldy  #>f3bbutton
.0ad9	20 28 14	               jsr  putscxy
.0adc	68		               pla
.0add	aa		               tax
.0ade	68		               pla
.0adf	28		               plp
.0ae0	20 90 14	               jsr  push
.0ae3	a2 64		               ldx  #<blankmsg
.0ae5	a0 0f		               ldy  #>blankmsg
.0ae7	20 28 14	               jsr  putscxy
.0aea	a2 8f		               ldx  #<f3b_msg
.0aec	a0 10		               ldy  #>f3b_msg
.0aee	20 28 14	               jsr  putscxy
.0af1	20 cf 14	               jsr  pop
.0af4	68		out            pla
.0af5	60		               rts
.0af6			f4action
.0af6	48		               pha
.0af7	ad 63 08	               lda  fkeyset
.0afa	d0 47		               bne  menub
.0afc	08		               php
.0afd	48		               pha
.0afe	8a		               txa
.0aff	48		               pha
.0b00	ad ef 11	               lda  f4abutton
.0b03	48		               pha
.0b04	a9 92		               lda  #146
.0b06	8d fe 11	               sta  f4abutton+15
.0b09	a9 0d		               lda  #flashcol
.0b0b	8d ef 11	               sta  f4abutton
.0b0e	a2 ef		               ldx  #<f4abutton
.0b10	a0 11		               ldy  #>f4abutton
.0b12	20 28 14	               jsr  putscxy
.0b15	20 4f 0f	               jsr  delay
.0b18	a9 12		               lda  #18
.0b1a	8d fe 11	               sta  f4abutton+15
.0b1d	68		               pla
.0b1e	8d ef 11	               sta  f4abutton
.0b21	a2 ef		               ldx  #<f4abutton
.0b23	a0 11		               ldy  #>f4abutton
.0b25	20 28 14	               jsr  putscxy
.0b28	68		               pla
.0b29	aa		               tax
.0b2a	68		               pla
.0b2b	28		               plp
.0b2c	20 90 14	               jsr  push
.0b2f	a2 64		               ldx  #<blankmsg
.0b31	a0 0f		               ldy  #>blankmsg
.0b33	20 28 14	               jsr  putscxy
.0b36	a2 f8		               ldx  #<f4a_msg
.0b38	a0 0f		               ldy  #>f4a_msg
.0b3a	20 28 14	               jsr  putscxy
.0b3d	20 cf 14	               jsr  pop
.0b40	4c 87 0b	               jmp  out
.0b43			menub
.0b43	08		               php
.0b44	48		               pha
.0b45	8a		               txa
.0b46	48		               pha
.0b47	ad bf 12	               lda  f4bbutton
.0b4a	48		               pha
.0b4b	a9 92		               lda  #146
.0b4d	8d ce 12	               sta  f4bbutton+15
.0b50	a9 0d		               lda  #flashcol
.0b52	8d bf 12	               sta  f4bbutton
.0b55	a2 bf		               ldx  #<f4bbutton
.0b57	a0 12		               ldy  #>f4bbutton
.0b59	20 28 14	               jsr  putscxy
.0b5c	20 4f 0f	               jsr  delay
.0b5f	a9 12		               lda  #18
.0b61	8d ce 12	               sta  f4bbutton+15
.0b64	68		               pla
.0b65	8d bf 12	               sta  f4bbutton
.0b68	a2 bf		               ldx  #<f4bbutton
.0b6a	a0 12		               ldy  #>f4bbutton
.0b6c	20 28 14	               jsr  putscxy
.0b6f	68		               pla
.0b70	aa		               tax
.0b71	68		               pla
.0b72	28		               plp
.0b73	20 90 14	               jsr  push
.0b76	a2 64		               ldx  #<blankmsg
.0b78	a0 0f		               ldy  #>blankmsg
.0b7a	20 28 14	               jsr  putscxy
.0b7d	a2 a7		               ldx  #<f4b_msg
.0b7f	a0 10		               ldy  #>f4b_msg
.0b81	20 28 14	               jsr  putscxy
.0b84	20 cf 14	               jsr  pop
.0b87	68		out            pla
.0b88	60		               rts
.0b89			f5action
.0b89	48		               pha
.0b8a	ad 63 08	               lda  fkeyset
.0b8d	d0 47		               bne  menub
.0b8f	08		               php
.0b90	48		               pha
.0b91	8a		               txa
.0b92	48		               pha
.0b93	ad 09 12	               lda  f5abutton
.0b96	48		               pha
.0b97	a9 92		               lda  #146
.0b99	8d 18 12	               sta  f5abutton+15
.0b9c	a9 0d		               lda  #flashcol
.0b9e	8d 09 12	               sta  f5abutton
.0ba1	a2 09		               ldx  #<f5abutton
.0ba3	a0 12		               ldy  #>f5abutton
.0ba5	20 28 14	               jsr  putscxy
.0ba8	20 4f 0f	               jsr  delay
.0bab	a9 12		               lda  #18
.0bad	8d 18 12	               sta  f5abutton+15
.0bb0	68		               pla
.0bb1	8d 09 12	               sta  f5abutton
.0bb4	a2 09		               ldx  #<f5abutton
.0bb6	a0 12		               ldy  #>f5abutton
.0bb8	20 28 14	               jsr  putscxy
.0bbb	68		               pla
.0bbc	aa		               tax
.0bbd	68		               pla
.0bbe	28		               plp
.0bbf	20 90 14	               jsr  push
.0bc2	a2 64		               ldx  #<blankmsg
.0bc4	a0 0f		               ldy  #>blankmsg
.0bc6	20 28 14	               jsr  putscxy
.0bc9	a2 15		               ldx  #<f5a_msg
.0bcb	a0 10		               ldy  #>f5a_msg
.0bcd	20 28 14	               jsr  putscxy
.0bd0	20 cf 14	               jsr  pop
.0bd3	4c 1a 0c	               jmp  out
.0bd6			menub
.0bd6	08		               php
.0bd7	48		               pha
.0bd8	8a		               txa
.0bd9	48		               pha
.0bda	ad d9 12	               lda  f5bbutton
.0bdd	48		               pha
.0bde	a9 92		               lda  #146
.0be0	8d e8 12	               sta  f5bbutton+15
.0be3	a9 0d		               lda  #flashcol
.0be5	8d d9 12	               sta  f5bbutton
.0be8	a2 d9		               ldx  #<f5bbutton
.0bea	a0 12		               ldy  #>f5bbutton
.0bec	20 28 14	               jsr  putscxy
.0bef	20 4f 0f	               jsr  delay
.0bf2	a9 12		               lda  #18
.0bf4	8d e8 12	               sta  f5bbutton+15
.0bf7	68		               pla
.0bf8	8d d9 12	               sta  f5bbutton
.0bfb	a2 d9		               ldx  #<f5bbutton
.0bfd	a0 12		               ldy  #>f5bbutton
.0bff	20 28 14	               jsr  putscxy
.0c02	68		               pla
.0c03	aa		               tax
.0c04	68		               pla
.0c05	28		               plp
.0c06	20 90 14	               jsr  push
.0c09	a2 64		               ldx  #<blankmsg
.0c0b	a0 0f		               ldy  #>blankmsg
.0c0d	20 28 14	               jsr  putscxy
.0c10	a2 bc		               ldx  #<f5b_msg
.0c12	a0 10		               ldy  #>f5b_msg
.0c14	20 28 14	               jsr  putscxy
.0c17	20 cf 14	               jsr  pop
.0c1a	68		out            pla
.0c1b	60		               rts
.0c1c			f6action
.0c1c	48		               pha
.0c1d	ad 63 08	               lda  fkeyset
.0c20	d0 47		               bne  menub
.0c22	08		               php
.0c23	48		               pha
.0c24	8a		               txa
.0c25	48		               pha
.0c26	ad 23 12	               lda  f6abutton
.0c29	48		               pha
.0c2a	a9 92		               lda  #146
.0c2c	8d 32 12	               sta  f6abutton+15
.0c2f	a9 0d		               lda  #flashcol
.0c31	8d 23 12	               sta  f6abutton
.0c34	a2 23		               ldx  #<f6abutton
.0c36	a0 12		               ldy  #>f6abutton
.0c38	20 28 14	               jsr  putscxy
.0c3b	20 4f 0f	               jsr  delay
.0c3e	a9 12		               lda  #18
.0c40	8d 32 12	               sta  f6abutton+15
.0c43	68		               pla
.0c44	8d 23 12	               sta  f6abutton
.0c47	a2 23		               ldx  #<f6abutton
.0c49	a0 12		               ldy  #>f6abutton
.0c4b	20 28 14	               jsr  putscxy
.0c4e	68		               pla
.0c4f	aa		               tax
.0c50	68		               pla
.0c51	28		               plp
.0c52	20 90 14	               jsr  push
.0c55	a2 64		               ldx  #<blankmsg
.0c57	a0 0f		               ldy  #>blankmsg
.0c59	20 28 14	               jsr  putscxy
.0c5c	a2 2f		               ldx  #<f6a_msg
.0c5e	a0 10		               ldy  #>f6a_msg
.0c60	20 28 14	               jsr  putscxy
.0c63	20 cf 14	               jsr  pop
.0c66	4c ad 0c	               jmp  out
.0c69			menub
.0c69	08		               php
.0c6a	48		               pha
.0c6b	8a		               txa
.0c6c	48		               pha
.0c6d	ad f3 12	               lda  f6bbutton
.0c70	48		               pha
.0c71	a9 92		               lda  #146
.0c73	8d 02 13	               sta  f6bbutton+15
.0c76	a9 0d		               lda  #flashcol
.0c78	8d f3 12	               sta  f6bbutton
.0c7b	a2 f3		               ldx  #<f6bbutton
.0c7d	a0 12		               ldy  #>f6bbutton
.0c7f	20 28 14	               jsr  putscxy
.0c82	20 4f 0f	               jsr  delay
.0c85	a9 12		               lda  #18
.0c87	8d 02 13	               sta  f6bbutton+15
.0c8a	68		               pla
.0c8b	8d f3 12	               sta  f6bbutton
.0c8e	a2 f3		               ldx  #<f6bbutton
.0c90	a0 12		               ldy  #>f6bbutton
.0c92	20 28 14	               jsr  putscxy
.0c95	68		               pla
.0c96	aa		               tax
.0c97	68		               pla
.0c98	28		               plp
.0c99	20 90 14	               jsr  push
.0c9c	a2 64		               ldx  #<blankmsg
.0c9e	a0 0f		               ldy  #>blankmsg
.0ca0	20 28 14	               jsr  putscxy
.0ca3	a2 d0		               ldx  #<f6b_msg
.0ca5	a0 10		               ldy  #>f6b_msg
.0ca7	20 28 14	               jsr  putscxy
.0caa	20 cf 14	               jsr  pop
.0cad	68		out            pla
.0cae	60		               rts
.0caf			f7action
.0caf	48		               pha
.0cb0	ad 63 08	               lda  fkeyset
.0cb3	d0 47		               bne  menub
.0cb5	08		               php
.0cb6	48		               pha
.0cb7	8a		               txa
.0cb8	48		               pha
.0cb9	ad 3d 12	               lda  f7abutton
.0cbc	48		               pha
.0cbd	a9 92		               lda  #146
.0cbf	8d 4c 12	               sta  f7abutton+15
.0cc2	a9 0d		               lda  #flashcol
.0cc4	8d 3d 12	               sta  f7abutton
.0cc7	a2 3d		               ldx  #<f7abutton
.0cc9	a0 12		               ldy  #>f7abutton
.0ccb	20 28 14	               jsr  putscxy
.0cce	20 4f 0f	               jsr  delay
.0cd1	a9 12		               lda  #18
.0cd3	8d 4c 12	               sta  f7abutton+15
.0cd6	68		               pla
.0cd7	8d 3d 12	               sta  f7abutton
.0cda	a2 3d		               ldx  #<f7abutton
.0cdc	a0 12		               ldy  #>f7abutton
.0cde	20 28 14	               jsr  putscxy
.0ce1	68		               pla
.0ce2	aa		               tax
.0ce3	68		               pla
.0ce4	28		               plp
.0ce5	20 90 14	               jsr  push
.0ce8	a2 64		               ldx  #<blankmsg
.0cea	a0 0f		               ldy  #>blankmsg
.0cec	20 28 14	               jsr  putscxy
.0cef	a2 49		               ldx  #<f7a_msg
.0cf1	a0 10		               ldy  #>f7a_msg
.0cf3	20 28 14	               jsr  putscxy
.0cf6	20 cf 14	               jsr  pop
.0cf9	4c 40 0d	               jmp  out
.0cfc			menub
.0cfc	08		               php
.0cfd	48		               pha
.0cfe	8a		               txa
.0cff	48		               pha
.0d00	ad 0d 13	               lda  f7bbutton
.0d03	48		               pha
.0d04	a9 92		               lda  #146
.0d06	8d 1c 13	               sta  f7bbutton+15
.0d09	a9 0d		               lda  #flashcol
.0d0b	8d 0d 13	               sta  f7bbutton
.0d0e	a2 0d		               ldx  #<f7bbutton
.0d10	a0 13		               ldy  #>f7bbutton
.0d12	20 28 14	               jsr  putscxy
.0d15	20 4f 0f	               jsr  delay
.0d18	a9 12		               lda  #18
.0d1a	8d 1c 13	               sta  f7bbutton+15
.0d1d	68		               pla
.0d1e	8d 0d 13	               sta  f7bbutton
.0d21	a2 0d		               ldx  #<f7bbutton
.0d23	a0 13		               ldy  #>f7bbutton
.0d25	20 28 14	               jsr  putscxy
.0d28	68		               pla
.0d29	aa		               tax
.0d2a	68		               pla
.0d2b	28		               plp
.0d2c	20 90 14	               jsr  push
.0d2f	a2 64		               ldx  #<blankmsg
.0d31	a0 0f		               ldy  #>blankmsg
.0d33	20 28 14	               jsr  putscxy
.0d36	a2 e2		               ldx  #<f7b_msg
.0d38	a0 10		               ldy  #>f7b_msg
.0d3a	20 28 14	               jsr  putscxy
.0d3d	20 cf 14	               jsr  pop
.0d40	68		out            pla
.0d41	60		               rts
.0d42			f8action
.0d42	48		               pha
.0d43	ad 63 08	               lda  fkeyset
.0d46	d0 47		               bne  menub
.0d48	08		               php
.0d49	48		               pha
.0d4a	8a		               txa
.0d4b	48		               pha
.0d4c	ad 57 12	               lda  f8abutton
.0d4f	48		               pha
.0d50	a9 92		               lda  #146
.0d52	8d 66 12	               sta  f8abutton+15
.0d55	a9 0d		               lda  #flashcol
.0d57	8d 57 12	               sta  f8abutton
.0d5a	a2 57		               ldx  #<f8abutton
.0d5c	a0 12		               ldy  #>f8abutton
.0d5e	20 28 14	               jsr  putscxy
.0d61	20 4f 0f	               jsr  delay
.0d64	a9 12		               lda  #18
.0d66	8d 66 12	               sta  f8abutton+15
.0d69	68		               pla
.0d6a	8d 57 12	               sta  f8abutton
.0d6d	a2 57		               ldx  #<f8abutton
.0d6f	a0 12		               ldy  #>f8abutton
.0d71	20 28 14	               jsr  putscxy
.0d74	68		               pla
.0d75	aa		               tax
.0d76	68		               pla
.0d77	28		               plp
.0d78	20 90 14	               jsr  push
.0d7b	a2 64		               ldx  #<blankmsg
.0d7d	a0 0f		               ldy  #>blankmsg
.0d7f	20 28 14	               jsr  putscxy
.0d82	a2 4f		               ldx  #<menub_msg
.0d84	a0 11		               ldy  #>menub_msg
.0d86	20 28 14	               jsr  putscxy
.0d89	20 cf 14	               jsr  pop
.0d8c	4c d3 0d	               jmp  swapit
.0d8f			menub
.0d8f	08		               php
.0d90	48		               pha
.0d91	8a		               txa
.0d92	48		               pha
.0d93	ad 27 13	               lda  f8bbutton
.0d96	48		               pha
.0d97	a9 92		               lda  #146
.0d99	8d 36 13	               sta  f8bbutton+15
.0d9c	a9 0d		               lda  #flashcol
.0d9e	8d 27 13	               sta  f8bbutton
.0da1	a2 27		               ldx  #<f8bbutton
.0da3	a0 13		               ldy  #>f8bbutton
.0da5	20 28 14	               jsr  putscxy
.0da8	20 4f 0f	               jsr  delay
.0dab	a9 12		               lda  #18
.0dad	8d 36 13	               sta  f8bbutton+15
.0db0	68		               pla
.0db1	8d 27 13	               sta  f8bbutton
.0db4	a2 27		               ldx  #<f8bbutton
.0db6	a0 13		               ldy  #>f8bbutton
.0db8	20 28 14	               jsr  putscxy
.0dbb	68		               pla
.0dbc	aa		               tax
.0dbd	68		               pla
.0dbe	28		               plp
.0dbf	20 90 14	               jsr  push
.0dc2	a2 64		               ldx  #<blankmsg
.0dc4	a0 0f		               ldy  #>blankmsg
.0dc6	20 28 14	               jsr  putscxy
.0dc9	a2 34		               ldx  #<menua_msg
.0dcb	a0 11		               ldy  #>menua_msg
.0dcd	20 28 14	               jsr  putscxy
.0dd0	20 cf 14	               jsr  pop
.0dd3	49 ff		swapit         eor  #$ff
.0dd5	8d 63 08	               sta  fkeyset
.0dd8	20 23 0e	               jsr  showfkeys
.0ddb	68		               pla
.0ddc	60		               rts
.0ddd			staticscreen
.0ddd	48		               pha
.0dde	a9 0c		               lda  #vgris1
.0de0	8d 20 d0	               sta  $d020
.0de3	68		               pla
.0de4	48		               pha
.0de5	a9 0b		               lda  #vgris
.0de7	8d 21 d0	               sta  $d021
.0dea	68		               pla
.0deb	48		               pha
.0dec	a9 8e		               lda  #b_uppercase
.0dee	8d 7c 13	               sta  characterset
.0df1	20 d2 ff	               jsr  $ffd2
.0df4	68		               pla
.0df5	20 c3 0e	               jsr  showlines
.0df8	20 a4 0e	               jsr  showallchars
.0dfb	20 0b 0f	               jsr  showgrid
.0dfe	20 23 0e	               jsr  showfkeys
.0e01	20 90 14	               jsr  push
.0e04	a2 64		               ldx  #<blankmsg
.0e06	a0 0f		               ldy  #>blankmsg
.0e08	20 28 14	               jsr  putscxy
.0e0b	a2 6a		               ldx  #<quit_msg
.0e0d	a0 11		               ldy  #>quit_msg
.0e0f	20 28 14	               jsr  putscxy
.0e12	20 cf 14	               jsr  pop
.0e15	20 90 14	               jsr  push
.0e18	a2 00		               ldx  #0
.0e1a	a0 07		               ldy  #7
.0e1c	20 b9 13	               jsr  gotoxy
.0e1f	20 cf 14	               jsr  pop
.0e22	60		               rts
.0e23			showfkeys
.0e23	20 90 14	               jsr  push
.0e26	ad 63 08	               lda  fkeyset
.0e29	c9 00		               cmp  #$0
.0e2b	d0 3b		               bne  secondks
.0e2d	a2 a1		               ldx #<f1abutton
.0e2f	a0 11		               ldy #>f1abutton
.0e31	20 28 14	               jsr putscxy
.0e34	a2 bb		               ldx #<f2abutton
.0e36	a0 11		               ldy #>f2abutton
.0e38	20 28 14	               jsr putscxy
.0e3b	a2 d5		               ldx #<f3abutton
.0e3d	a0 11		               ldy #>f3abutton
.0e3f	20 28 14	               jsr putscxy
.0e42	a2 ef		               ldx #<f4abutton
.0e44	a0 11		               ldy #>f4abutton
.0e46	20 28 14	               jsr putscxy
.0e49	a2 09		               ldx #<f5abutton
.0e4b	a0 12		               ldy #>f5abutton
.0e4d	20 28 14	               jsr putscxy
.0e50	a2 23		               ldx #<f6abutton
.0e52	a0 12		               ldy #>f6abutton
.0e54	20 28 14	               jsr putscxy
.0e57	a2 3d		               ldx #<f7abutton
.0e59	a0 12		               ldy #>f7abutton
.0e5b	20 28 14	               jsr putscxy
.0e5e	a2 57		               ldx #<f8abutton
.0e60	a0 12		               ldy #>f8abutton
.0e62	20 28 14	               jsr putscxy
.0e65	4c a0 0e	               jmp end
.0e68			secondks
.0e68	a2 71		               ldx #<f1bbutton
.0e6a	a0 12		               ldy #>f1bbutton
.0e6c	20 28 14	               jsr putscxy
.0e6f	a2 8b		               ldx #<f2bbutton
.0e71	a0 12		               ldy #>f2bbutton
.0e73	20 28 14	               jsr putscxy
.0e76	a2 a5		               ldx #<f3bbutton
.0e78	a0 12		               ldy #>f3bbutton
.0e7a	20 28 14	               jsr putscxy
.0e7d	a2 bf		               ldx #<f4bbutton
.0e7f	a0 12		               ldy #>f4bbutton
.0e81	20 28 14	               jsr putscxy
.0e84	a2 d9		               ldx #<f5bbutton
.0e86	a0 12		               ldy #>f5bbutton
.0e88	20 28 14	               jsr putscxy
.0e8b	a2 f3		               ldx #<f6bbutton
.0e8d	a0 12		               ldy #>f6bbutton
.0e8f	20 28 14	               jsr putscxy
.0e92	a2 0d		               ldx #<f7bbutton
.0e94	a0 13		               ldy #>f7bbutton
.0e96	20 28 14	               jsr putscxy
.0e99	a2 27		               ldx #<f8bbutton
.0e9b	a0 13		               ldy #>f8bbutton
.0e9d	20 28 14	               jsr putscxy
.0ea0	20 cf 14	end            jsr  pop
.0ea3	60		               rts
.0ea4			showallchars
.0ea4	20 90 14	               jsr push
.0ea7	20 90 14	               jsr  push
.0eaa	a2 00		               ldx  #0
.0eac	a0 00		               ldy  #0
.0eae	20 b9 13	               jsr  gotoxy
.0eb1	20 cf 14	               jsr  pop
.0eb4	a2 00		               ldx  #$00
.0eb6	8a		nextc          txa
.0eb7	9d 00 04	               sta  scrnram,x
.0eba	e8		               inx
.0ebb	e0 80		               cpx  #$80
.0ebd	d0 f7		               bne  nextc
.0ebf	20 cf 14	               jsr  pop
.0ec2	60		               rts
.0ec3			showlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnram+(6*40)+8
.0ec3	20 90 14	               jsr  push
.0ec6	a2 28		               ldx  #40
.0ec8	a9 40		               lda  #64
.0eca	9d 9f 04	nextl          sta  scrnram+(40*hline1)-1,x  ;On imprime les deux grande
.0ecd	9d ef 04	               sta  scrnram+(40*hline2)-1,x  ; lignes horizontales
.0ed0	ca		               dex
.0ed1	e0 10		hline          cpx  #vlinepos
.0ed3	10 03		               bpl  notyet
.0ed5	9d d0 06	               sta  scrnram+(40*hline3),x    ;On imprime la demiligne horz.
.0ed8	e0 00		notyet         cpx  #$00
.0eda	d0 ee		               bne  nextl
.0edc	a9 00		               lda  #<scrnram+(40*(hline2))+vlinepos
.0ede	85 fb		               sta  zpage1
.0ee0	a9 05		               lda  #>scrnram+(40*(hline2))+vlinepos
.0ee2	85 fc		               sta  zpage1+1
.0ee4	a0 00		               ldy  #0
.0ee6	a9 72		               lda  #114
.0ee8	91 fb		               sta  (zpage1),y
.0eea	20 3f 0f	               jsr  zp1add40
.0eed	a2 12		               ldx  #24-hline2
.0eef	a9 5d		               lda  #93
.0ef1	91 fb		another93      sta  (zpage1),y
.0ef3	20 3f 0f	               jsr  zp1add40
.0ef6	ca		               dex
.0ef7	d0 f8		               bne  another93
.0ef9	a9 e0		               lda  #<scrnram+(40*(hline3))+vlinepos
.0efb	85 fb		               sta  zpage1
.0efd	a9 06		               lda  #>scrnram+(40*(hline3))+vlinepos
.0eff	85 fc		               sta  zpage1+1
.0f01	a0 00		               ldy  #0
.0f03	a9 73		               lda  #115
.0f05	91 fb		               sta  (zpage1),y
.0f07	20 cf 14	               jsr  pop
.0f0a	60		               rts
.0f0b			showgrid
=8			gligne=8
=1			gcol=1
.0f0b	20 90 14	               jsr  push
.0f0e	20 41 13	               jsr  screendis
.0f11	a9 41		               lda  #<scrnram+(40*(gligne))+gcol
.0f13	85 fb		               sta  zpage1
.0f15	a9 05		               lda  #>scrnram+(40*(gligne))+gcol
.0f17	85 fc		               sta  zpage1+1
.0f19	a2 08		               ldx  #8
.0f1b	a9 65		nextbox        lda  #101
.0f1d	a0 09		               ldy  #9
.0f1f	91 fb		               sta  (zpage1),y
.0f21	88		               dey
.0f22	a9 4f		               lda  #79
.0f24	91 fb		nextcol        sta  (zpage1),y
.0f26	88		               dey
.0f27	d0 fb		               bne  nextcol
.0f29	20 3f 0f	               jsr  zp1add40
.0f2c	ca		               dex
.0f2d	d0 ec		               bne  nextbox
.0f2f	a0 08		               ldy  #8
.0f31	a9 77		               lda  #119
.0f33	91 fb		nextlin        sta  (zpage1),y
.0f35	88		               dey
.0f36	d0 fb		               bne  nextlin
.0f38	20 4e 13	               jsr screenena
.0f3b	20 cf 14	               jsr  pop
.0f3e	60		               rts
.0f3f			zp1add40
.0f3f	08		               php
.0f40	48		               pha
.0f41	18		               clc
.0f42	a5 fb		               lda  zpage1
.0f44	69 28		               adc  #40
.0f46	90 02		               bcc  nocarry
.0f48	e6 fc		               inc  zpage1+1
.0f4a	85 fb		nocarry        sta  zpage1
.0f4c	68		               pla
.0f4d	28		               plp
.0f4e	60		               rts
.0f4f			delay
.0f4f	20 90 14	               jsr  push
.0f52	a9 00		               lda  #$0
.0f54	aa		               tax
.0f55	a8		               tay
.0f56	ca		xagain         dex
.0f57	88		yagain         dey
.0f58	c0 00		               cpy  #$00
.0f5a	d0 fb		               bne  yagain
.0f5c	e0 00		               cpx  #$00
.0f5e	d0 f6		               bne  xagain
.0f60	20 cf 14	               jsr  pop
.0f63	60		               rts

;******  Processing file: messages.asm

=$07			mesgcol = vjaune
>0f64	07 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>0f68	20 20 20 20	               .null     "                                      "
>0f6c	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0f7c	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0f8c	20 20 00
.0f8f			f1a_msg
>0f8f	07 00 05 12	edit_msg       .byte     mesgcol,0,5,18
>0f93	20 45 4e 54	               .null     " entry mode: chr$(   )",146
>0f97	52 59 20 4d 4f 44 45 3a 20 43 48 52 24 28 20 20
>0fa7	20 29 92 00
.0fab			f2a_msg
>0fab	07 00 05 92	save_msg       .byte     mesgcol,0,5,146
>0faf	20 53 41 56	               .null     " save on cassette or disk? (c/d):"
>0fb3	45 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>0fc3	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.0fd1			f3a_msg
>0fd1	07 00 05	load_msg       .byte     mesgcol,0,5
>0fd4	20 4c 4f 41	               .null     " load from cassette or disk? (c/d):"
>0fd8	44 20 46 52 4f 4d 20 43 41 53 53 45 54 54 45 20
>0fe8	4f 52 20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.0ff8			f4a_msg
>0ff8	07 00 05	copy_msg       .byte     mesgcol,0,5
>0ffb	20 45 4e 54	               .null     " enter character to copy:"
>0fff	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>100f	43 4f 50 59 3a 00
.1015			f5a_msg
>1015	07 00 05	clear_msg      .byte     mesgcol,0,5
>1018	20 43 4c 45	               .null     " clear char: chr$(   )"
>101c	41 52 20 43 48 41 52 3a 20 43 48 52 24 28 20 20
>102c	20 29 00
.102f			f6a_msg
>102f	07 00 05	fill_msg       .byte     mesgcol,0,5
>1032	20 46 49 4c	               .null     " fill char:  chr$(   )"
>1036	4c 20 43 48 41 52 3a 20 20 43 48 52 24 28 20 20
>1046	20 29 00
.1049			f7a_msg
>1049	07 00 05	work_msg       .byte     mesgcol,0,5
>104c	20 45 4e 41	               .null     " enable work space"
>1050	42 4c 45 20 57 4f 52 4b 20 53 50 41 43 45 00
.105f			f1b_msg
>105f	07 00 05	rvrs_msg       .byte     mesgcol,0,5
>1062	20 52 45 56	               .null     " reverse character:"
>1066	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
.1076			f2b_msg
>1076	07 00 05	invr_msg       .byte     mesgcol,0,5
>1079	20 49 4e 56	               .null     " inverting character:"
>107d	45 52 54 49 4e 47 20 43 48 41 52 41 43 54 45 52
>108d	3a 00
.108f			f3b_msg
>108f	07 00 05	flip_msg       .byte     mesgcol,0,5
>1092	20 46 4c 49	               .null     " flipping character:"
>1096	50 50 49 4e 47 20 43 48 41 52 41 43 54 45 52 3a
>10a6	00
.10a7			f4b_msg
>10a7	07 00 05	scrollr_msg    .byte     mesgcol,0,5
>10aa	20 53 43 52	               .null     " scrolling right:"
>10ae	4f 4c 4c 49 4e 47 20 52 49 47 48 54 3a 00
.10bc			f5b_msg
>10bc	07 00 05	scrolll_msg    .byte     mesgcol,0,5
>10bf	20 53 43 52	               .null     " scrolling left:"
>10c3	4f 4c 4c 49 4e 47 20 4c 45 46 54 3a 00
.10d0			f6b_msg
>10d0	07 00 05	scrollu_msg    .byte     mesgcol,0,5
>10d3	20 53 43 52	               .null     " scrolling up:"
>10d7	4f 4c 4c 49 4e 47 20 55 50 3a 00
.10e2			f7b_msg
>10e2	07 00 05	scrolld_msg    .byte     mesgcol,0,5
>10e5	20 53 43 52	               .null     " scrolling down:"
>10e9	4f 4c 4c 49 4e 47 20 44 4f 57 4e 3a 00
>10f6	07 00 05	save_fname_msg .byte     mesgcol,0,5
>10f9	20 53 41 56	               .null     " save: file name ------.chr"
>10fd	45 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>110d	2d 2d 2d 2e 43 48 52 00
>1115	07 00 05	load_fname_msg .byte     mesgcol,0,5
>1118	20 4c 4f 41	               .null     " load: file name ------.chr"
>111c	44 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>112c	2d 2d 2d 2e 43 48 52 00
>1134	07 00 05	menua_msg      .byte     mesgcol,0,5
>1137	20 59 4f 55	               .null     " you are now in menu a."
>113b	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>114b	20 41 2e 00
>114f	07 00 05	menub_msg      .byte     mesgcol,0,5
>1152	20 59 4f 55	               .null     " you are now in menu b."
>1156	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>1166	20 42 2e 00
>116a	0e 15 18 12	quit_msg       .byte     vblue1,21,24,18
>116e	43 54 52 4c	               .text     "ctrl-x",146
>1172	2d 58 92
>1175	20 54 4f 20	               .null     " to quit."
>1179	51 55 49 54 2e 00
>117f	0a 06 0c 12	bye_msg        .byte     vrose,6,12,18
>1183	20 d4 48 41	               .null     " Thanks and have a good day ",146
>1187	4e 4b 53 20 41 4e 44 20 48 41 56 45 20 41 20 47
>1197	4f 4f 44 20 44 41 59 20 92 00
=18			fkeyleft=18
=8			f1top=8
=1			menu1col = 1
=3			menu2col = 3
>11a1	01 12 08	f1abutton      .byte     menu1col,fkeyleft,f1top       ;133
>11a4	45 44 49 54	               .text     "edit....... "
>11a8	2e 2e 2e 2e 2e 2e 2e 20
>11b0	12		               .byte     18             ; position 15
>11b1	20 20 20 46	               .text     "   f1   "
>11b5	31 20 20 20
>11b9	92 00		               .byte     146,0
>11bb	01 12 0a	f2abutton      .byte     menu1col,fkeyleft,f1top+2     ;137
>11be	53 41 56 45	               .text     "save....... "
>11c2	2e 2e 2e 2e 2e 2e 2e 20
>11ca	12		               .byte     18            ; position 15
>11cb	20 20 20 46	               .text     "   f2   "
>11cf	32 20 20 20
>11d3	92 00		               .byte     146,0
>11d5	01 12 0c	f3abutton      .byte     menu1col,fkeyleft,f1top+4     ;134
>11d8	4c 4f 41 44	               .text     "load....... "
>11dc	2e 2e 2e 2e 2e 2e 2e 20
>11e4	12		               .byte     18             ; position 15
>11e5	20 20 20 46	               .text     "   f3   "
>11e9	33 20 20 20
>11ed	92 00		               .byte     146,0
>11ef	01 12 0e	f4abutton      .byte     menu1col,fkeyleft,f1top+6     ;138
>11f2	43 4f 50 59	               .text     "copy....... "
>11f6	2e 2e 2e 2e 2e 2e 2e 20
>11fe	12		               .byte     18             ; position 15
>11ff	20 20 20 46	               .text     "   f4   "
>1203	34 20 20 20
>1207	92 00		               .byte     146,0
>1209	01 12 10	f5abutton      .byte     menu1col,fkeyleft,f1top+8     ;135
>120c	43 4c 45 41	               .text     "clear...... "
>1210	52 2e 2e 2e 2e 2e 2e 20
>1218	12		               .byte     18             ; position 15
>1219	20 20 20 46	               .text     "   f5   "
>121d	35 20 20 20
>1221	92 00		               .byte     146,0
>1223	01 12 12	f6abutton      .byte     menu1col,fkeyleft,f1top+10    ;139
>1226	46 49 4c 4c	               .text     "fill....... "
>122a	2e 2e 2e 2e 2e 2e 2e 20
>1232	12		               .byte     18             ; position 15
>1233	20 20 20 46	               .text     "   f6   "
>1237	36 20 20 20
>123b	92 00		               .byte     146,0
>123d	01 12 14	f7abutton      .byte     menu1col,fkeyleft,f1top+12    ;136
>1240	57 4f 52 4b	               .text     "work....... "
>1244	2e 2e 2e 2e 2e 2e 2e 20
>124c	12		               .byte     18             ; position 15
>124d	20 20 20 46	               .text     "   f7   "
>1251	37 20 20 20
>1255	92 00		               .byte     146,0
>1257	01 12 16	f8abutton      .byte     menu1col,fkeyleft,f1top+14    ;140
>125a	46 55 4e 43	               .text     "function... "
>125e	54 49 4f 4e 2e 2e 2e 20
>1266	12		               .byte     18             ; position 15
>1267	20 20 20 46	               .text     "   f8   "
>126b	38 20 20 20
>126f	92 00		               .byte     146,0
>1271	03 12 08	f1bbutton      .byte     menu2col,fkeyleft,f1top
>1274	52 45 56 45	               .text     "reverse.... "
>1278	52 53 45 2e 2e 2e 2e 20
>1280	12		               .byte     18             ; position 15
>1281	20 20 20 46	               .text     "   f1   "
>1285	31 20 20 20
>1289	92 00		               .byte     146,0
>128b	03 12 0a	f2bbutton      .byte     menu2col,fkeyleft,f1top+2
>128e	49 4e 56 45	               .text     "invert..... "
>1292	52 54 2e 2e 2e 2e 2e 20
>129a	12		               .byte     18             ; position 15
>129b	20 20 20 46	               .text     "   f2   "
>129f	32 20 20 20
>12a3	92 00		               .byte     146,0
>12a5	03 12 0c	f3bbutton      .byte     menu2col,fkeyleft,f1top+4
>12a8	46 4c 49 50	               .text     "flip....... "
>12ac	2e 2e 2e 2e 2e 2e 2e 20
>12b4	12		               .byte     18             ; position 15
>12b5	20 20 20 46	               .text     "   f3   "
>12b9	33 20 20 20
>12bd	92 00		               .byte     146,0
>12bf	03 12 0e	f4bbutton      .byte     menu2col,fkeyleft,f1top+6
>12c2	53 43 52 4f	               .text     "scroll r... "
>12c6	4c 4c 20 52 2e 2e 2e 20
>12ce	12		               .byte     18             ; position 15
>12cf	20 20 20 46	               .text     "   f4   "
>12d3	34 20 20 20
>12d7	92 00		               .byte     146,0
>12d9	03 12 10	f5bbutton      .byte     menu2col,fkeyleft,f1top+8
>12dc	53 43 52 4f	               .text     "scroll l... "
>12e0	4c 4c 20 4c 2e 2e 2e 20
>12e8	12		               .byte     18             ; position 15
>12e9	20 20 20 46	               .text     "   f5   "
>12ed	35 20 20 20
>12f1	92 00		               .byte     146,0
>12f3	03 12 12	f6bbutton      .byte     menu2col,fkeyleft,f1top+10
>12f6	53 43 52 4f	               .text     "scroll u... "
>12fa	4c 4c 20 55 2e 2e 2e 20
>1302	12		               .byte     18             ; position 15
>1303	20 20 20 46	               .text     "   f6   "
>1307	36 20 20 20
>130b	92 00		               .byte     146,0
>130d	03 12 14	f7bbutton      .byte     menu2col,fkeyleft,f1top+12
>1310	53 43 52 4f	               .text     "scroll d... "
>1314	4c 4c 20 44 2e 2e 2e 20
>131c	12		               .byte     18             ; position 15
>131d	20 20 20 46	               .text     "   f7   "
>1321	37 20 20 20
>1325	92 00		               .byte     146,0
>1327	03 12 16	f8bbutton      .byte     menu2col,fkeyleft,f1top+14
>132a	46 55 4e 43	               .text     "function... "
>132e	54 49 4f 4e 2e 2e 2e 20
>1336	12		               .byte     18             ; position 15
>1337	20 20 20 46	               .text     "   f8   "
>133b	38 20 20 20
>133f	92 00		               .byte     146,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ;  97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c1			stal            =       $c1     ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.1341			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.1341			screendis
.1341	08		               php
.1342	48		               pha
.1343	ad 11 d0	               lda  $d011
.1346	29 ef		               and  #%11101111
.1348	8d 11 d0	               sta  $d011
.134b	68		               pla
.134c	28		               plp
.134d	60		               rts
.134e			screenena
.134e	08		               php
.134f	48		               pha
.1350	ad 11 d0	               lda  $d011
.1353	09 10		               ora  #%00010000
.1355	8d 11 d0	               sta  $d011
.1358	68		               pla
.1359	28		               plp
.135a	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.135b			scrmaninit
.135b	20 90 14	               jsr  push
.135e	a9 06		               lda  #vbleu
.1360	8d 21 d0	               sta  vicbackcol
.1363	a9 05		               lda  #vvert
.1365	8d 20 d0	               sta  vicbordcol
.1368	a9 01		               lda  #vblanc
.136a	8d 86 02	               sta  bascol
.136d	ad 00 04	               lda  scrnram
.1370	29 fd		               and  #%11111101
.1372	8d 00 04	               sta  scrnram
.1375	20 7d 13	               jsr  cls
.1378	20 cf 14	               jsr  pop
.137b	60		               rts
>137c	8e		characterset   .byte b_uppercase
.137d			cls
.137d	08		               php
.137e	48		               pha
.137f	a9 93		               lda  #$93
.1381	20 99 13	               jsr  putch
.1384	a9 0e		               lda  #$0e
.1386	20 99 13	               jsr  putch
.1389	68		               pla
.138a	28		               plp
.138b	60		               rts
.138c			putnch
.138c	08		               php
.138d	e0 00		               cpx  #$00
.138f	f0 06		               beq  out
.1391	20 d2 ff	again          jsr  $ffd2
.1394	ca		               dex
.1395	d0 fa		               bne  again
.1397	28		out            plp
.1398	60		               rts
.1399			putch
.1399	08		               php
.139a	20 d2 ff	               jsr  $ffd2
.139d	28		               plp
.139e	60		               rts
.139f			puts
.139f	20 90 14	               jsr  push
.13a2	86 fb		               stx  zpage1
.13a4	84 fc		               sty  zpage1+1
.13a6	a0 00		               ldy  #0
.13a8	b1 fb		next           lda  (zpage1),y
.13aa	f0 09		               beq  exit
.13ac	20 99 13	               jsr  putch
.13af	20 97 15	               jsr  inczp1
.13b2	4c a8 13	               jmp  next
.13b5	20 cf 14	exit           jsr  pop
.13b8	60		               rts
.13b9			gotoxy
.13b9	08		               php
.13ba	18		               clc
.13bb	8a		               txa
.13bc	48		               pha
.13bd	98		               tya
.13be	aa		               tax
.13bf	68		               pla
.13c0	a8		               tay
.13c1	20 f0 ff	               jsr  kplot
.13c4	28		               plp
.13c5	60		               rts
.13c6			cursor
=$0286			bascol    =    $0286
.13c6	08		               php
.13c7	48		               pha
.13c8	90 12		               bcc  restore
.13ca	20 f0 ff	               jsr  kplot
.13cd	8c ee 13	               sty  cx
.13d0	8e ef 13	               stx  cy
.13d3	ad 86 02	               lda  bascol
.13d6	8d f0 13	               sta  bcol
.13d9	4c eb 13	               jmp  out
.13dc	ae ef 13	restore        ldx  cy
.13df	ac ee 13	               ldy  cx
.13e2	20 f0 ff	               jsr  kplot
.13e5	ad f0 13	               lda  bcol
.13e8	8d 86 02	               sta  bascol
.13eb	68		out            pla
.13ec	28		               plp
.13ed	60		               rts
>13ee	00		cx   .byte     $00
>13ef	00		cy   .byte     $00
>13f0	00		bcol .byte     $00
.13f1			cursave
.13f1	08		               php
.13f2	38		               sec
.13f3	20 c6 13	               jsr  cursor
.13f6	28		               plp
.13f7	60		               rts
.13f8			curput
.13f8	08		               php
.13f9	18		               clc
.13fa	20 c6 13	               jsr  cursor
.13fd	28		               plp
.13fe	60		               rts
.13ff			putsxy
.13ff	20 90 14	               jsr  push
.1402	86 fb		               stx  zpage1
.1404	84 fc		               sty  zpage1+1
.1406	a0 00		               ldy  #$00
.1408	b1 fb		               lda  (zpage1),y
.140a	aa		               tax
.140b	20 97 15	               jsr  inczp1
.140e	b1 fb		               lda  (zpage1),y
.1410	a8		               tay
.1411	20 b9 13	               jsr  gotoxy
.1414	20 97 15	               jsr  inczp1
.1417	a6 fb		               ldx  zpage1
.1419	a4 fc		               ldy  zpage1+1
.141b	20 9f 13	               jsr  puts
.141e	20 cf 14	               jsr  pop
.1421	60		               rts
>1422	00 00		straddr   .word     $00
>1424	00		px        .byte     $00
>1425	00		py        .byte     $00
>1426	00 00		zp1       .word     $00
.1428			putscxy
.1428	20 90 14	               jsr  push
.142b	84 fc		               sty  zpage1+1
.142d	86 fb		               stx  zpage1
.142f	ad 86 02	               lda  bascol
.1432	8d 52 14	               sta  bc
.1435	a0 00		               ldy #$00
.1437	b1 fb		               lda  (zpage1),y
.1439	8d 86 02	               sta  bascol
.143c	20 97 15	               jsr  inczp1
.143f	a6 fb		               ldx  zpage1
.1441	a4 fc		               ldy  zpage1+1
.1443	20 ff 13	               jsr  putsxy
.1446	ad 52 14	               lda  bc
.1449	8d 86 02	               sta  bascol
.144c	20 cf 14	               jsr  pop
.144f	60		               rts
>1450	00 00		straddr  .word      $00
>1452	00		bc       .byte      $00
>1453	00 00		zp1      .word      $00
.1455			putrahex
.1455	08		               php
.1456	48		               pha
.1457	20 9d 16	               jsr  a2hex
.145a	a9 49		               lda  #<a2hexstr
.145c	a0 16		               ldy  #>a2hexstr
.145e	20 9f 13	               jsr  puts
.1461	68		               pla
.1462	28		               plp
.1463	60		               rts
.1464			kputrahexxy
.1464			bputrahexxy
.1464			putrahexxy
.1464	08		               php
.1465	20 9d 16	               jsr  a2hex
.1468	a9 46		               lda  #<a2hexpos
.146a	a0 16		               ldy  #>a2hexpos
.146c	20 ff 13	               jsr  putsxy
.146f	68		               pla
.1470	28		               plp
.1471	60		               rts
.1472			putrahexcxy
.1472	08		               php
.1473	20 9d 16	               jsr  a2hex
.1476	a9 46		               lda  #<a2hexpos
.1478	a0 16		               ldy  #>a2hexpos
.147a	20 28 14	               jsr  putscxy
.147d	68		               pla
.147e	28		               plp
.147f	60		               rts
.1480			setinverse
.1480	48		               pha
.1481	a9 12		               lda  #$12
.1483	20 d2 ff	               jsr  $ffd2
.1486	68		               pla
.1487	60		               rts
.1488			clrinverse
.1488	48		               pha
.1489	a9 92		               lda  #$92
.148b	20 d2 ff	               jsr  $ffd2
.148e	68		               pla
.148f	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.1490			push
.1490	08		          php            ; stack : flg, pcl, pch
.1491	78		          sei
.1492	8d cc 14	          sta  ra        ; save a
.1495	68		          pla            ; stack : pcl, pch
.1496	8d cb 14	          sta  rp        ; save rp
.1499	68		          pla            ; stack : pch
.149a	8d cd 14	          sta  pc        ; save pcl
.149d	68		          pla            ; stack : -
.149e	8d ce 14	          sta  pc+1      ; save pch
.14a1	a5 fb		          lda  zpage1    ; get zpage1 low byte
.14a3	48		          pha            ; stack : zp1l
.14a4	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.14a6	48		          pha            ; stack : zp1h, zp1l
.14a7	a5 fd		          lda  zpage2    ; get zpage2 low byte
.14a9	48		          pha            ; stack : zp2l, zp1h, zp1l
.14aa	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.14ac	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.14ad	ad cb 14	          lda  rp        ; get rp
.14b0	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.14b1	ad cc 14	          lda  ra        ; get a
.14b4	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.14b5	8a		          txa            ; get x
.14b6	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.14b7	98		          tya            ; get y
.14b8	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.14b9	ad ce 14	          lda  pc+1      ; get pch
.14bc	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.14bd	ad cd 14	          lda  pc        ; get pcl
.14c0	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.14c1	ad cb 14	          lda  rp        ; get rp
.14c4	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.14c5	ad cc 14	          lda  ra        ; get a
.14c8	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.14c9	58		          cli
.14ca	60		          rts
>14cb	00		rp        .byte     0
>14cc	00		ra        .byte     0
>14cd	00 00		pc        .word     0
.14cf			pull
.14cf			pop
.14cf	78		          sei
.14d0	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.14d1	8d 04 15	          sta  pc        ; save pcl
.14d4	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.14d5	8d 05 15	          sta  pc+1      ; save pch
.14d8	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.14d9	a8		          tay            ; set y
.14da	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.14db	aa		          tax            ; set x
.14dc	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.14dd	8d 03 15	          sta  ra        ; save a
.14e0	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.14e1	8d 02 15	          sta  rp        ; save rp
.14e4	68		          pla            ; stack : zp2l, zp1h, zp1l
.14e5	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.14e7	68		          pla            ; stack : zp1h, zp1l
.14e8	85 fd		          sta  zpage2    ; get zpage2 High byte
.14ea	68		          pla            ; stack : zp1l
.14eb	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.14ed	68		          pla            ; stack :
.14ee	85 fb		          sta  zpage1    ; get zpage1 High byte
.14f0	ad 05 15	          lda  pc+1      ; get pch
.14f3	48		          pha            ; stack : pch
.14f4	ad 04 15	          lda  pc
.14f7	48		          pha            ; stack : pcl, pch
.14f8	ad 02 15	          lda  rp        ; get rp
.14fb	48		          pha            ; stack : rp, pcl, pch
.14fc	ad 03 15	          lda  ra        ; set ra
.14ff	58		          cli
.1500	28		          plp            ; stack : pcl, pch
.1501	60		          rts
>1502	00		rp        .byte     0
>1503	00		ra        .byte     0
>1504	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.1506			blkfill
.1506	20 90 14	bf0            jsr  push
.1509	20 c4 15	               jsr  savezp1
.150c	84 fc		               sty  zpage1+1
.150e	a0 00		               ldy  #$00
.1510	84 fb		               sty  zpage1
.1512	91 fb		bf1            sta  (zpage1),y
.1514	c8		               iny
.1515	d0 fb		               bne  bf1
.1517	20 d3 15	               jsr  restzp1
.151a	20 cf 14	               jsr  pop
.151d	60		               rts
.151e			memfill
.151e	20 90 14	               jsr  push
.1521	20 06 15	mf1            jsr  blkfill
.1524	c8		               iny
.1525	ca		               dex
.1526	d0 f9		               bne  mf1
.1528	20 cf 14	               jsr  pop
.152b	60		               rts
.152c			memmove
.152c	20 90 14	               jsr  push
.152f	ba		               tsx            ; On se crée un pointeur ...
.1530	8a		               txa
.1531	18		               clc
.1532	69 0b		               adc  #11
.1534	a8		               tay
.1535	a2 06		               ldx  #$06
.1537	b9 00 01	nextbyte       lda  $0100,y
.153a	99 86 15	               sta  words,y
.153d	c8		               iny
.153e	ca		               dex
.153f	d0 f6		               bne  nextbyte
.1541	ad 86 15	               lda  s
.1544	8d 5d 15	               sta  source+1
.1547	ad 87 15	               lda  s+1
.154a	8d 5e 15	               sta  source+2
.154d	ad 88 15	               lda  d
.1550	8d 5a 15	               sta  destin+1
.1553	ad 89 15	               lda  d+1
.1556	8d 5b 15	               sta  destin+2
.1559	ad ff ff	destin         lda  $ffff
.155c	8d ff ff	source         sta  $ffff
.155f	ee 5a 15	               inc  destin+1
.1562	d0 03		               bne  src
.1564	ee 5b 15	               inc  destin+2
.1567	ee 5d 15	src            inc  source+1
.156a	d0 03		               bne  cnt
.156c	ee 5e 15	               inc  source+2
.156f	ad 8a 15	cnt            lda  compte
.1572	d0 08		               bne  decit
.1574	ad 8b 15	               lda  compte+1
.1577	f0 09		               beq  fini
.1579	ce 8b 15	               dec  compte+1
.157c	ce 8a 15	decit          dec  compte
.157f	4c 59 15	               jmp  destin
.1582	20 cf 14	fini           jsr  pop
.1585	60		               rts
.1586			words
>1586	00 00		s         .word     $0000
>1588	00 00		d         .word     $0000
>158a	00 00		compte    .word     $0000
.158c			decword
.158c	20 90 14	               jsr  push
.158f	86 fd		               stx  zpage2
.1591	84 fe		               sty  zpage2+1
.1593	20 cf 14	               jsr  pop
.1596	60		               rts
.1597			inczp1
.1597	08		               php
.1598	e6 fb		               inc  zpage1
.159a	d0 02		               bne  nopage
.159c	e6 fc		               inc  zpage1+1
.159e	28		nopage         plp
.159f	60		               rts
.15a0			deczp1
.15a0	08		                php
.15a1	48		                pha
.15a2	c6 fb		                dec  zpage1
.15a4	d0 02		                bne  nopage
.15a6	c6 fc		                dec  zpage1+1
.15a8	c6 fb		nopage          dec  zpage1
.15aa	68		                pla
.15ab	28		                plp
.15ac	60		                rts
.15ad			inczp2
.15ad	08		               php
.15ae	48		               pha
.15af	e6 fd		               inc  zpage2
.15b1	d0 02		               bne  nopage
.15b3	e6 fe		               inc  zpage2+1
.15b5	68		nopage         pla
.15b6	28		               plp
.15b7	60		               rts
.15b8			deczp2
.15b8	08		               php
.15b9	48		               pha
.15ba	a5 fd		               lda  zpage2
.15bc	d0 02		               bne  nopage
.15be	c6 fe		               dec  zpage2+1
.15c0	c6 fd		nopage         dec  zpage2
.15c2	28		               plp
.15c3	60		               rts
.15c4			savezp1
.15c4	08		               php
.15c5	48		               pha
.15c6	a5 fb		               lda  zpage1
.15c8	8d 40 16	               sta  zp1
.15cb	a5 fc		               lda  zpage1+1
.15cd	8d 41 16	               sta  zp1+1
.15d0	68		               pla
.15d1	28		               plp
.15d2	60		               rts
.15d3			restzp1
.15d3	08		               php
.15d4	48		               pha
.15d5	ad 40 16	               lda zp1
.15d8	85 fb		               sta zpage1
.15da	ad 41 16	               lda zp1+1
.15dd	85 fc		               sta zpage1+1
.15df	68		               pla
.15e0	28		               plp
.15e1	60		               rts
.15e2			savezp2
.15e2	08		         php
.15e3	48		         pha
.15e4	a5 fd		         lda zpage2
.15e6	8d 42 16	         sta zp2
.15e9	a5 fe		         lda zpage2+1
.15eb	8d 43 16	         sta zp2+1
.15ee	68		         pla
.15ef	28		         plp
.15f0	60		         rts
.15f1			restzp2
.15f1	08		                php
.15f2	48		                pha
.15f3	ad 42 16	                lda  zp2
.15f6	85 fd		                sta  zpage2
.15f8	ad 43 16	                lda  zp2+1
.15fb	85 fe		                sta  zpage2+1
.15fd	68		                pla
.15fe	28		                plp
.15ff	60		                rts
.1600			xy2addr
.1600	08		                php
.1601	48		                pha
.1602	8a		                txa
.1603	48		                pha
.1604	98		                tya
.1605	48		                pha
.1606	ad 3b 16	                lda     addr1+1
.1609	8d 3d 16	                sta     addr2+1
.160c	ad 3a 16	                lda     addr1
.160f	8d 3c 16	                sta     addr2
.1612	c0 00		                cpy     #$00
.1614	f0 0f		                beq     addx
.1616	18		moreline        clc
.1617	6d 39 16	                adc     ymult
.161a	90 03		                bcc     norepy
.161c	ee 3d 16	                inc     addr2+1
.161f	8d 3c 16	norepy          sta     addr2
.1622	88		                dey
.1623	d0 f1		                bne     moreline
.1625	8a		addx            txa
.1626	18		                clc
.1627	6d 3c 16	                adc     addr2
.162a	90 03		                bcc     thatsit
.162c	ee 3d 16	                inc     addr2+1
.162f	8d 3c 16	thatsit         sta     addr2
.1632	68		                pla
.1633	a8		                tay
.1634	68		                pla
.1635	aa		                tax
.1636	68		                pla
.1637	28		                plp
.1638	60		                rts
>1639	28		ymult          .byte     40
>163a	00 00		addr1          .word     $0000
>163c	00 00		addr2          .word     $0000
>163e	00 00		bytecnt        .word     $0000
>1640	00 00		zp1        .word   $0000
>1642	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>1644	01		a2hexcol       .byte     1              ; pour aputscxy
>1645	00		a2hexbkcol     .byte     %00000000
.1646			a2hexpos
>1646	00		a2hexpx        .byte     0              ; pour aputsxy
>1647	00		a2hexpy        .byte     0
>1648	24		a2hexprefix    .byte     "$"            ; pour aputs
>1649	00 00		a2hexstr       .word     $00
>164b	00 00		               .word     $00
>164d	00		               .byte     0              ; 0 end string
.164e			putahexfmtxy
.164e	20 90 14	               jsr  push
.1651	20 9d 16	               jsr  a2hex
.1654	ae 46 16	               ldx  a2hexpx
.1657	ac 47 16	               ldy  a2hexpy
.165a	20 b9 13	               jsr  gotoxy
.165d	a2 48		               ldx  #<a2hexprefix
.165f	a0 16		               ldy  #>a2hexprefix
.1661	20 9f 13	               jsr  puts
.1664	20 cf 14	               jsr  pop
.1667	60		               rts
.1668			putahexfmt
.1668	20 90 14	               jsr  push
.166b	20 9d 16	               jsr  a2hex
.166e	a2 48		               ldx  #<a2hexprefix
.1670	a0 16		               ldy  #>a2hexprefix
.1672	20 9f 13	               jsr  puts
.1675	20 cf 14	               jsr  pop
.1678	60		               rts
.1679			putahex
.1679	20 90 14	               jsr  push
.167c	20 9d 16	               jsr  a2hex
.167f	a2 49		               ldx  #<a2hexstr
.1681	a0 16		               ldy  #>a2hexstr
.1683	20 9f 13	               jsr  puts
.1686	20 cf 14	               jsr  pop
.1689	60		               rts
.168a			nib2hex
.168a	08		               php
.168b	29 0f		               and  #$0f
.168d	f8		               sed
.168e	18		               clc
.168f	69 90		               adc  #$90
.1691	69 40		               adc  #$40
.1693	d8		               cld
.1694	28		               plp
.1695	60		               rts
.1696			lsra4bits
.1696	08		               php
.1697	4a		               lsr
.1698	4a		               lsr
.1699	4a		               lsr
.169a	4a		               lsr
.169b	28		               plp
.169c	60		               rts
.169d			a2hex
.169d	08		               php
.169e	48		               pha
.169f	48		               pha
.16a0	20 96 16	               jsr  lsra4bits
.16a3	20 8a 16	               jsr  nib2hex
.16a6	8d 49 16	               sta  a2hexstr
.16a9	68		               pla
.16aa	20 8a 16	               jsr  nib2hex
.16ad	8d 4a 16	               sta  a2hexstr+1
.16b0	a9 00		               lda  #$00                ; set end of string
.16b2	8d 4b 16	               sta  a2hexstr+2
.16b5	68		               pla
.16b6	28		               plp
.16b7	60		               rts
.16b8			xy2hex
.16b8	20 90 14	               jsr  push
.16bb	20 9d 16	               jsr  a2hex
.16be	8a		               txa
.16bf	48		               pha
.16c0	20 96 16	               jsr  lsra4bits
.16c3	20 8a 16	               jsr  nib2hex
.16c6	8d 49 16	               sta  a2hexstr
.16c9	68		               pla
.16ca	20 8a 16	               jsr  nib2hex
.16cd	8d 4a 16	               sta  a2hexstr+1
.16d0	98		               tya
.16d1	48		               pha
.16d2	20 96 16	               jsr  lsra4bits
.16d5	20 8a 16	               jsr  nib2hex
.16d8	8d 4b 16	               sta  a2hexstr+2
.16db	68		               pla
.16dc	20 8a 16	               jsr  nib2hex
.16df	8d 4c 16	               sta  a2hexstr+3
.16e2	a9 00		               lda  #$00                ; 0 ended string
.16e4	8d 4d 16	               sta  a2hexstr+4
.16e7	20 cf 14	               jsr  pop
.16ea			atobin
.16ea	20 90 14	               jsr     push
.16ed	a2 08		               ldx     #8
.16ef	a0 00		               ldy     #0
.16f1	2a		nextbit        rol
.16f2	48		               pha
.16f3	69 00		               adc     #$00
.16f5	29 01		               and     #$01
.16f7	20 8a 16	               jsr     nib2hex
.16fa	99 0b 17	               sta     abin,y
.16fd	68		               pla
.16fe	c8		               iny
.16ff	ca		               dex
.1700	d0 ef		               bne     nextbit
.1702	a9 00		               lda     #0
.1704	99 0b 17	               sta     abin,y
.1707	20 cf 14	               jsr     pull
.170a	60		               rts
>170b	30 30 30 30	abin           .null   "00000000"
>170f	30 30 30 30 00
.1714			putabin
.1714	20 ea 16	               jsr     atobin
.1717	20 90 14	               jsr     push
.171a	a2 0b		               ldx     #<abin
.171c	a0 17		               ldy     #>abin
.171e	20 9f 13	               jsr     puts
.1721	20 cf 14	               jsr     pop
.1724	60		               rts
.1725			putabinfmt
.1725	08		               php
.1726	48		               pha
.1727	a9 25		               lda     #"%"
.1729	20 99 13	               jsr     putch
.172c	68		               pla
.172d	20 14 17	               jsr     putabin
.1730	28		               plp
.1731	60		               rts
.1732			putabinxy
.1732	20 b9 13	               jsr     gotoxy
.1735	20 14 17	               jsr     putabin
.1738	60		               rts
.1739			putabinfmtxy
.1739	20 b9 13	               jsr     gotoxy
.173c	20 25 17	               jsr     putabinfmt
.173f	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a     =    $41
=$42			key_b     =    $42
=$43			key_c     =    $43
=$44			key_d     =    $44
=$45			key_e     =    $45
=$46			key_f     =    $46
=$47			key_g     =    $47
=$48			key_h     =    $48
=$49			key_i     =    $49
=$4a			key_j     =    $4a
=$4b			key_k     =    $4b
=$4c			key_l     =    $4c
=$4d			key_m     =    $4d
=$4e			key_n     =    $4e
=$4f			key_o     =    $4f
=$50			key_p     =    $50
=$51			key_q     =    $51
=$52			key_r     =    $52
=$53			key_s     =    $53
=$54			key_t     =    $54
=$55			key_u     =    $55
=$56			key_v     =    $56
=$57			key_w     =    $57
=$58			key_x     =    $58
=$59			key_y     =    $59
=$5a			key_z     =    $5a
=$c1			shift_a   =    $c1
=$c2			shift_b   =    $c2
=$c3			shift_c   =    $c3
=$c4			shift_d   =    $c4
=$c5			shift_e   =    $c5
=$c6			shift_f   =    $c6
=$c7			shift_g   =    $c7
=$c8			shift_h   =    $c8
=$c9			shift_i   =    $c9
=$ca			shift_j   =    $ca
=$cb			shift_k   =    $cb
=$cc			shift_l   =    $cc
=$cd			shift_m   =    $cd
=$ce			shift_n   =    $ce
=$cf			shift_o   =    $cf
=$d0			shift_p   =    $d0
=$d1			shift_q   =    $d1
=$d2			shift_r   =    $d2
=$d3			shift_s   =    $d3
=$d4			shift_t   =    $d4
=$d5			shift_u   =    $d5
=$d6			shift_v   =    $d6
=$d7			shift_w   =    $d7
=$d8			shift_x   =    $d8
=$d9			shift_y   =    $d9
=$da			shift_z   =    $da
=$01			ctrl_a    =    $01
=$02			ctrl_b    =    $02
=$03			ctrl_c    =    $03
=$04			ctrl_d    =    $04
=$05			ctrl_e    =    $05
=$06			ctrl_f    =    $06
=$07			ctrl_g    =    $07
=$08			ctrl_h    =    $08
=$09			ctrl_i    =    $09
=$0a			ctrl_j    =    $0a
=$0b			ctrl_k    =    $0b
=$0c			ctrl_l    =    $0c
=$0d			ctrl_m    =    $0d
=$0e			ctrl_n    =    $0e
=$0f			ctrl_o    =    $0f
=$10			ctrl_p    =    $10
=$11			ctrl_q    =    $11
=$12			ctrl_r    =    $12
=$13			ctrl_s    =    $13
=$14			ctrl_t    =    $14
=$15			ctrl_u    =    $15
=$16			ctrl_v    =    $16
=$17			ctrl_w    =    $17
=$18			ctrl_x    =    $18
=$19			ctrl_y    =    $19
=$1a			ctrl_z    =    $1a
=$b0			comd_a    =    $b0
=$bf			comd_b    =    $bf
=$bc			comd_c    =    $bc
=$ac			comd_d    =    $ac
=$b1			comd_e    =    $b1
=$bb			comd_f    =    $bb
=$a5			comd_g    =    $a5
=$b4			comd_h    =    $b4
=$a2			comd_i    =    $a2
=$b5			comd_j    =    $b5
=$a1			comd_k    =    $a1
=$b6			comd_l    =    $b6
=$a7			comd_m    =    $a7
=$aa			comd_n    =    $aa
=$b9			comd_o    =    $b9
=$af			comd_p    =    $af
=$ab			comd_q    =    $ab
=$b2			comd_r    =    $b2
=$ae			comd_s    =    $ae
=$a3			comd_t    =    $a3
=$b8			comd_u    =    $b8
=$be			comd_v    =    $be
=$b3			comd_w    =    $b3
=$bd			comd_x    =    $bd
=$b7			comd_y    =    $b7
=$ad			comd_z    =    $ad
>1740	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>1744	00 00 00 00 00 00 00 00 00 0d 00 00
>1750	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>1754	00 00 00 00 00 00 00 00 00 00 00 00
>1760	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>1764	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1770	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1774	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1780	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1784	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>1790	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1794	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>17a0	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>17a4	00 00 00 00 00 00 00 00 00 00 00 00
>17b0	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>17b4	00 00 00 00 00 00 00 00 00 00 00 00
>17c0	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>17c4	00 00 00 00 00 00 00 00 00 00 00 00
>17d0	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>17d4	00 00 00 00 00 00 00 00 00 00 00 00
>17e0	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>17e4	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>17f0	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>17f4	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1800	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1804	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>1810	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>1814	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>1820	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>1824	00 00 00 00 00 00 00 00 00 00 00 00
>1830	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>1834	00 00 00 00 00 00 00 00 00 00 00 00
.1840			waitstop
.1840	20 90 14	               jsr  push
.1843	20 ed f6	wait           jsr  k_stop
.1846	d0 fb		               bne  wait
.1848	20 cf 14	               jsr  pop
.184b	60		               rts
.184c			anykey
.184c	08		               php
.184d	48		               pha
.184e	a5 cb		nokey          lda 203
.1850	c9 40		               cmp #64
.1852	f0 fa		               beq nokey
.1854	20 5a 18	               jsr releasekey
.1857	68		               pla
.1858	28		               plp
.1859	60		               rts
.185a			releasekey
.185a	08		               php
.185b	48		               pha
.185c	a5 cb		keypressed     lda 203
.185e	c9 40		               cmp #64
.1860	d0 fa		               bne keypressed
.1862	68		               pla
.1863	28		               plp
.1864	60		               rts
.1865			getkey
.1865	20 e4 ff	again          jsr  getin
.1868	c9 00		               cmp  #0
.186a	f0 f9		               beq  again
.186c	60		               rts
.186d			waitkey
.186d	20 90 14	               jsr  push
.1870	8d be 18	               sta  thekey
.1873	20 e4 ff	nope           jsr  getin
.1876	20 d2 ff	               jsr  chrout
.1879	cd be 18	               cmp  thekey
.187c	d0 f5		               bne  nope
.187e	20 d2 ff	               jsr  chrout
.1881	20 cf 14	               jsr  pop
.1884	60		               rts
.1885			waitspace
.1885	20 90 14	               jsr  push
.1888	a9 7f		wait           lda  #$7f  ;%01111111
.188a	8d 00 dc	               sta  $dc00
.188d	ad 01 dc	               lda  $dc01
.1890	29 10		               and  #$10  ;mask %00010000
.1892	d0 f4		               bne  wait
.1894	20 cf 14	               jsr  pop
.1897			waitsstop
.1897	20 90 14	               jsr  push
.189a	20 ed f6	wait           jsr  k_stop  ;%01111111
.189d	d0 fb		               bne  wait
.189f	20 cf 14	               jsr  pop
.18a2			waitreturn
.18a2	20 90 14	               jsr  push
.18a5	ad bf 18	               lda  thecount
.18a8	8d 00 04	               sta  scrnram
.18ab	a9 02		               lda  #$02
.18ad	8d 00 d8	               sta  colorram
.18b0	20 e4 ff	nope           jsr  getin
.18b3	c9 0d		nohex          cmp  #$0d
.18b5	d0 f9		               bne  nope
.18b7	ee bf 18	               inc  thecount
.18ba	20 cf 14	               jsr  pop
.18bd	60		               rts
>18be	00		thekey         .byte   0
>18bf	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Mon Nov  6 22:09:12 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm

=$0d			flashcol = vvert1

;******  Return to file: charedit.asm

.080d			main
.080d	20 2b 15	               jsr  push
.0810	20 dc 13	               jsr  screendis
.0813	20 9d 08	               jsr  copycharset
.0816	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.0819	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.081b	09 0c		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.081d	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.0820	20 f6 13	               jsr  scrmaninit
.0823	20 fe 08	               jsr  staticscreen
.0826	20 e9 13	               jsr  screenena
.0829	20 2b 15	               jsr  push
.082c	a2 ff		               ldx  #<blankmsg
.082e	a0 0f		               ldy  #>blankmsg
.0830	20 c3 14	               jsr  putscxy
.0833	a2 2a		               ldx  #<edit_msg
.0835	a0 10		               ldy  #>edit_msg
.0837	20 c3 14	               jsr  putscxy
.083a	20 6a 15	               jsr  pop
.083d	a9 00		               lda  #$00
.083f	8d 5e 0b	               sta  fkeyset
.0842	20 44 09	               jsr  showfkeys
.0845	20 6a 15	               jsr  pop
.0848	20 8c 0a	               jsr  keyaction
.084b	20 18 14	               jsr  cls
.084e	20 2b 15	               jsr  push
.0851	a2 ff		               ldx  #<blankmsg
.0853	a0 0f		               ldy  #>blankmsg
.0855	20 c3 14	               jsr  putscxy
.0858	a2 1a		               ldx  #<bye_msg
.085a	a0 12		               ldy  #>bye_msg
.085c	20 c3 14	               jsr  putscxy
.085f	20 6a 15	               jsr  pop
.0862	20 2b 15	               jsr  push
.0865	a2 00		               ldx  #0
.0867	a0 00		               ldy  #0
.0869	20 54 14	               jsr  gotoxy
.086c	20 6a 15	               jsr  pop
.086f	60		               rts
.0870			setscreenptr
.0870	20 2b 15	               jsr  push
.0873	a9 08		               lda  #$08      ; basic commande to disable ...
.0875	20 d2 ff	               jsr  chrout    ; ... character set change.
.0878	ad 02 dd	               lda  cia2ddra  ;$dd02, 56578 cia2 data direction A
.087b	09 11		               ora  #$00000011
.087d	8d 02 dd	               sta  cia2ddra  ;$dd02, 56578 cia2 data direction A
.0880	ad 00 dd	               lda  cia2pra   ;$dd00, 56576 cia2 dataport A
.0883	29 fc		               and  #%11111100
.0885	09 00		               ora  #%00000000
.0887	8d 00 dd	               sta  cia2pra   ;$dd00, 56576 cia2 dataport A
.088a	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.088d	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.088f	09 0c		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.0891	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.0894	a9 04		               lda  #%00000100     ;%11000100 ; 196
.0896	8d 88 02	               sta  $0288          ; On indique au kernal que la mémoire video ...
.0899	20 6a 15	               jsr  pop
.089c	60		               rts
=$0400			scrnnewram     = $0400
=12			charsdef       = 12
.089d			copycharset
.089d	20 2b 15	               jsr  push
.08a0	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.08a3	29 fe		               and  #%11111110     ;254
.08a5	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.08a8	a5 01		               lda  u6510map       ;$01
.08aa	29 fb		               and  #%11111011     ;251
.08ac	85 01		               sta  u6510map       ;$01
.08ae	20 c3 08	               jsr  memcopy
.08b1	a5 01		               lda  u6510map       ;$01
.08b3	09 04		               ora  #%00000100
.08b5	85 01		               sta  u6510map       ;$01
.08b7	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.08ba	09 01		               ora  #%00000001     ;254
.08bc	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.08bf	20 6a 15	               jsr  pop
.08c2	60		               rts
.08c3			memcopy
.08c3	20 2b 15	               jsr  push
.08c6	ad f8 08	               lda  startaddr
.08c9	85 fb		               sta  zpage1
.08cb	ad f9 08	               lda  startaddr+1
.08ce	85 fc		               sta  zpage1+1
.08d0	ad fa 08	               lda  destaddr
.08d3	85 fd		               sta  zpage2
.08d5	ad fb 08	               lda  destaddr+1
.08d8	85 fe		               sta  zpage2+1
.08da	a0 00		               ldy  #$00
.08dc	b1 fb		onemore        lda  (zpage1),y
.08de	91 fd		               sta  (zpage2),y
.08e0	20 32 16	               jsr  inczp1
.08e3	20 4a 16	               jsr  inczp2
.08e6	a5 fc		               lda  zpage1+1
.08e8	cd fd 08	               cmp  stopaddr+1
.08eb	d0 ef		               bne  onemore
.08ed	a5 fb		               lda  zpage1
.08ef	cd fc 08	               cmp  stopaddr
.08f2	d0 e8		               bne  onemore
.08f4	20 6a 15	               jsr  pop
.08f7	60		               rts
=12288			bitmapmem =    charsdef * 1024
>08f8	00 d0		startaddr      .word     $d000     ; 53248
>08fa	00 30		destaddr       .word     bitmapmem ; 12288
>08fc	00 d8		stopaddr       .word     $d800     ; 55296
.08fe			staticscreen
.08fe	48		               pha
.08ff	a9 0c		               lda  #vgris1
.0901	8d 20 d0	               sta  $d020
.0904	68		               pla
.0905	48		               pha
.0906	a9 0b		               lda  #vgris
.0908	8d 21 d0	               sta  $d021
.090b	68		               pla
.090c	48		               pha
.090d	a9 8e		               lda  #b_uppercase
.090f	8d 17 14	               sta  characterset
.0912	20 d2 ff	               jsr  $ffd2
.0915	68		               pla
.0916	20 e4 09	               jsr  showlines
.0919	20 c5 09	               jsr  showallchars
.091c	20 2c 0a	               jsr  showgrid
.091f	20 44 09	               jsr  showfkeys
.0922	20 2b 15	               jsr  push
.0925	a2 ff		               ldx  #<blankmsg
.0927	a0 0f		               ldy  #>blankmsg
.0929	20 c3 14	               jsr  putscxy
.092c	a2 05		               ldx  #<quit_msg
.092e	a0 12		               ldy  #>quit_msg
.0930	20 c3 14	               jsr  putscxy
.0933	20 6a 15	               jsr  pop
.0936	20 2b 15	               jsr  push
.0939	a2 00		               ldx  #0
.093b	a0 07		               ldy  #7
.093d	20 54 14	               jsr  gotoxy
.0940	20 6a 15	               jsr  pop
.0943	60		               rts
.0944			showfkeys
.0944	20 2b 15	               jsr  push
.0947	ad 5e 0b	               lda  fkeyset
.094a	c9 00		               cmp  #$0
.094c	d0 3b		               bne  secondks
.094e	a2 3c		               ldx #<f1abutton
.0950	a0 12		               ldy #>f1abutton
.0952	20 c3 14	               jsr putscxy
.0955	a2 56		               ldx #<f2abutton
.0957	a0 12		               ldy #>f2abutton
.0959	20 c3 14	               jsr putscxy
.095c	a2 70		               ldx #<f3abutton
.095e	a0 12		               ldy #>f3abutton
.0960	20 c3 14	               jsr putscxy
.0963	a2 8a		               ldx #<f4abutton
.0965	a0 12		               ldy #>f4abutton
.0967	20 c3 14	               jsr putscxy
.096a	a2 a4		               ldx #<f5abutton
.096c	a0 12		               ldy #>f5abutton
.096e	20 c3 14	               jsr putscxy
.0971	a2 be		               ldx #<f6abutton
.0973	a0 12		               ldy #>f6abutton
.0975	20 c3 14	               jsr putscxy
.0978	a2 d8		               ldx #<f7abutton
.097a	a0 12		               ldy #>f7abutton
.097c	20 c3 14	               jsr putscxy
.097f	a2 f2		               ldx #<f8abutton
.0981	a0 12		               ldy #>f8abutton
.0983	20 c3 14	               jsr putscxy
.0986	4c c1 09	               jmp end
.0989			secondks
.0989	a2 0c		               ldx #<f1bbutton
.098b	a0 13		               ldy #>f1bbutton
.098d	20 c3 14	               jsr putscxy
.0990	a2 26		               ldx #<f2bbutton
.0992	a0 13		               ldy #>f2bbutton
.0994	20 c3 14	               jsr putscxy
.0997	a2 40		               ldx #<f3bbutton
.0999	a0 13		               ldy #>f3bbutton
.099b	20 c3 14	               jsr putscxy
.099e	a2 5a		               ldx #<f4bbutton
.09a0	a0 13		               ldy #>f4bbutton
.09a2	20 c3 14	               jsr putscxy
.09a5	a2 74		               ldx #<f5bbutton
.09a7	a0 13		               ldy #>f5bbutton
.09a9	20 c3 14	               jsr putscxy
.09ac	a2 8e		               ldx #<f6bbutton
.09ae	a0 13		               ldy #>f6bbutton
.09b0	20 c3 14	               jsr putscxy
.09b3	a2 a8		               ldx #<f7bbutton
.09b5	a0 13		               ldy #>f7bbutton
.09b7	20 c3 14	               jsr putscxy
.09ba	a2 c2		               ldx #<f8bbutton
.09bc	a0 13		               ldy #>f8bbutton
.09be	20 c3 14	               jsr putscxy
.09c1	20 6a 15	end            jsr  pop
.09c4	60		               rts
.09c5			showallchars
.09c5	20 2b 15	               jsr push
.09c8	20 2b 15	               jsr  push
.09cb	a2 00		               ldx  #0
.09cd	a0 00		               ldy  #0
.09cf	20 54 14	               jsr  gotoxy
.09d2	20 6a 15	               jsr  pop
.09d5	a2 00		               ldx  #$00
.09d7	8a		nextc          txa
.09d8	9d 00 04	               sta  scrnnewram,x
.09db	e8		               inx
.09dc	e0 80		               cpx  #$80
.09de	d0 f7		               bne  nextc
.09e0	20 6a 15	               jsr  pop
.09e3	60		               rts
.09e4			showlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.09e4	20 2b 15	               jsr  push
.09e7	a2 28		               ldx  #40
.09e9	a9 40		               lda  #64
.09eb	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.09ee	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.09f1	ca		               dex
.09f2	e0 10		hline          cpx  #vlinepos
.09f4	10 03		               bpl  notyet
.09f6	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.09f9	e0 00		notyet         cpx  #$00
.09fb	d0 ee		               bne  nextl
.09fd	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.09ff	85 fb		               sta  zpage1
.0a01	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.0a03	85 fc		               sta  zpage1+1
.0a05	a0 00		               ldy  #0
.0a07	a9 72		               lda  #114
.0a09	91 fb		               sta  (zpage1),y
.0a0b	20 60 0a	               jsr  zp1add40
.0a0e	a2 12		               ldx  #24-hline2
.0a10	a9 5d		               lda  #93
.0a12	91 fb		another93      sta  (zpage1),y
.0a14	20 60 0a	               jsr  zp1add40
.0a17	ca		               dex
.0a18	d0 f8		               bne  another93
.0a1a	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.0a1c	85 fb		               sta  zpage1
.0a1e	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.0a20	85 fc		               sta  zpage1+1
.0a22	a0 00		               ldy  #0
.0a24	a9 73		               lda  #115
.0a26	91 fb		               sta  (zpage1),y
.0a28	20 6a 15	               jsr  pop
.0a2b	60		               rts
.0a2c			showgrid
=8			gligne=8
=1			gcol=1
.0a2c	20 2b 15	               jsr  push
.0a2f	20 dc 13	               jsr  screendis
.0a32	a9 41		               lda  #<scrnnewram+(40*(gligne))+gcol
.0a34	85 fb		               sta  zpage1
.0a36	a9 05		               lda  #>scrnnewram+(40*(gligne))+gcol
.0a38	85 fc		               sta  zpage1+1
.0a3a	a2 08		               ldx  #8
.0a3c	a9 65		nextbox        lda  #101
.0a3e	a0 09		               ldy  #9
.0a40	91 fb		               sta  (zpage1),y
.0a42	88		               dey
.0a43	a9 4f		               lda  #79
.0a45	91 fb		nextcol        sta  (zpage1),y
.0a47	88		               dey
.0a48	d0 fb		               bne  nextcol
.0a4a	20 60 0a	               jsr  zp1add40
.0a4d	ca		               dex
.0a4e	d0 ec		               bne  nextbox
.0a50	a0 08		               ldy  #8
.0a52	a9 77		               lda  #119
.0a54	91 fb		nextlin        sta  (zpage1),y
.0a56	88		               dey
.0a57	d0 fb		               bne  nextlin
.0a59	20 e9 13	               jsr screenena
.0a5c	20 6a 15	               jsr  pop
.0a5f	60		               rts
.0a60			zp1add40
.0a60	08		               php
.0a61	48		               pha
.0a62	18		               clc
.0a63	a5 fb		               lda  zpage1
.0a65	69 28		               adc  #40
.0a67	90 02		               bcc  nocarry
.0a69	e6 fc		               inc  zpage1+1
.0a6b	85 fb		nocarry        sta  zpage1
.0a6d	68		               pla
.0a6e	28		               plp
.0a6f	60		               rts
.0a70			delay
.0a70	20 2b 15	               jsr  push
.0a73	a9 00		               lda  #$0
.0a75	aa		               tax
.0a76	a8		               tay
.0a77	ca		xagain         dex
.0a78	88		yagain         dey
.0a79	c0 00		               cpy  #$00
.0a7b	d0 fb		               bne  yagain
.0a7d	e0 00		               cpx  #$00
.0a7f	d0 f6		               bne  xagain
.0a81	20 6a 15	               jsr  pop
.0a84	60		               rts
.0a85			template
.0a85	20 2b 15	               jsr  push
.0a88	20 6a 15	               jsr  pop
.0a8b	60		               rts
.0a8c			keyaction
.0a8c	20 2b 15	               jsr  push
.0a8f	20 03 19	loop           jsr  getkey
.0a92	20 2b 15	               jsr  push
.0a95	a2 00		               ldx  #0
.0a97	a0 14		               ldy  #20
.0a99	20 54 14	               jsr  gotoxy
.0a9c	20 6a 15	               jsr  pop
.0a9f	20 34 14	               jsr  putch
.0aa2	20 2b 15	               jsr  push
.0aa5	a2 00		               ldx  #0
.0aa7	a0 15		               ldy  #21
.0aa9	20 54 14	               jsr  gotoxy
.0aac	20 6a 15	               jsr  pop
.0aaf	48		               pha
.0ab0	48		               pha
.0ab1	a9 24		               lda  #'$'
.0ab3	20 34 14	               jsr  putch
.0ab6	68		               pla
.0ab7	aa		               tax
.0ab8	bd de 17	               lda  asciitorom,x
.0abb	20 17 17	               jsr  putahex
.0abe	20 2b 15	               jsr  push
.0ac1	a2 49		               ldx  #<txt1
.0ac3	a0 0b		               ldy  #>txt1
.0ac5	20 3a 14	               jsr  puts
.0ac8	20 6a 15	               jsr  pull
.0acb	20 2b 15	               jsr  push
.0ace	a2 00		               ldx  #0
.0ad0	a0 16		               ldy  #22
.0ad2	20 54 14	               jsr  gotoxy
.0ad5	20 6a 15	               jsr  pop
.0ad8	a9 24		               lda  #'$'
.0ada	20 34 14	               jsr  putch
.0add	68		               pla
.0ade	20 17 17	               jsr  putahex
.0ae1	20 2b 15	               jsr  push
.0ae4	a2 53		               ldx  #<txt2
.0ae6	a0 0b		               ldy  #>txt2
.0ae8	20 3a 14	               jsr  puts
.0aeb	20 6a 15	               jsr  pull
.0aee	c9 85		               cmp  #key_f1
.0af0	f0 23		               beq  f1
.0af2	c9 89		               cmp  #key_f2
.0af4	f0 25		               beq  f2
.0af6	c9 86		               cmp  #key_f3
.0af8	f0 27		               beq  f3
.0afa	c9 8a		               cmp  #key_f4
.0afc	f0 29		               beq  f4
.0afe	c9 87		               cmp  #key_f5
.0b00	f0 2b		               beq  f5
.0b02	c9 8b		               cmp  #key_f6
.0b04	f0 2d		               beq  f6
.0b06	c9 88		               cmp  #key_f7
.0b08	f0 2f		               beq  f7
.0b0a	c9 8c		               cmp  #key_f8
.0b0c	f0 31		               beq  f8
.0b0e	c9 18		               cmp  #ctrl_x
.0b10	f0 33		               beq  quit
.0b12	4c 8f 0a	               jmp  loop
.0b15	20 5f 0b	f1             jsr  f1action
.0b18	4c 8f 0a	               jmp  loop
.0b1b	20 f2 0b	f2             jsr  f2action
.0b1e	4c 8f 0a	               jmp  loop
.0b21	20 85 0c	f3             jsr  f3action
.0b24	4c 8f 0a	               jmp  loop
.0b27	20 18 0d	f4             jsr  f4action
.0b2a	4c 8f 0a	               jmp  loop
.0b2d	20 ab 0d	f5             jsr  f5action
.0b30	4c 8f 0a	               jmp  loop
.0b33	20 3e 0e	f6             jsr  f6action
.0b36	4c 8f 0a	               jmp  loop
.0b39	20 d1 0e	f7             jsr  f7action
.0b3c	4c 8f 0a	               jmp  loop
.0b3f	20 64 0f	f8             jsr  f8action
.0b42	4c 8f 0a	               jmp  loop
.0b45			quit
.0b45	20 6a 15	               jsr  pop
.0b48	60		               rts
>0b49	20 52 4f 4d	txt1           .null     " rom pos."
>0b4d	20 50 4f 53 2e 00
>0b53	20 4b 45 59	txt2           .null     " key value"
>0b57	20 56 41 4c 55 45 00
>0b5e	00		fkeyset        .byte     0
.0b5f			f1action
.0b5f	48		               pha
.0b60	ad 5e 0b	               lda  fkeyset
.0b63	d0 47		               bne  menub
.0b65	08		               php
.0b66	48		               pha
.0b67	8a		               txa
.0b68	48		               pha
.0b69	ad 3c 12	               lda  f1abutton
.0b6c	48		               pha
.0b6d	a9 92		               lda  #146
.0b6f	8d 4b 12	               sta  f1abutton+15
.0b72	a9 0d		               lda  #flashcol
.0b74	8d 3c 12	               sta  f1abutton
.0b77	a2 3c		               ldx  #<f1abutton
.0b79	a0 12		               ldy  #>f1abutton
.0b7b	20 c3 14	               jsr  putscxy
.0b7e	20 70 0a	               jsr  delay
.0b81	a9 12		               lda  #18
.0b83	8d 4b 12	               sta  f1abutton+15
.0b86	68		               pla
.0b87	8d 3c 12	               sta  f1abutton
.0b8a	a2 3c		               ldx  #<f1abutton
.0b8c	a0 12		               ldy  #>f1abutton
.0b8e	20 c3 14	               jsr  putscxy
.0b91	68		               pla
.0b92	aa		               tax
.0b93	68		               pla
.0b94	28		               plp
.0b95	20 2b 15	               jsr  push
.0b98	a2 ff		               ldx  #<blankmsg
.0b9a	a0 0f		               ldy  #>blankmsg
.0b9c	20 c3 14	               jsr  putscxy
.0b9f	a2 2a		               ldx  #<f1a_msg
.0ba1	a0 10		               ldy  #>f1a_msg
.0ba3	20 c3 14	               jsr  putscxy
.0ba6	20 6a 15	               jsr  pop
.0ba9	4c f0 0b	               jmp  out
.0bac			menub
.0bac	08		               php
.0bad	48		               pha
.0bae	8a		               txa
.0baf	48		               pha
.0bb0	ad 0c 13	               lda  f1bbutton
.0bb3	48		               pha
.0bb4	a9 92		               lda  #146
.0bb6	8d 1b 13	               sta  f1bbutton+15
.0bb9	a9 0d		               lda  #flashcol
.0bbb	8d 0c 13	               sta  f1bbutton
.0bbe	a2 0c		               ldx  #<f1bbutton
.0bc0	a0 13		               ldy  #>f1bbutton
.0bc2	20 c3 14	               jsr  putscxy
.0bc5	20 70 0a	               jsr  delay
.0bc8	a9 12		               lda  #18
.0bca	8d 1b 13	               sta  f1bbutton+15
.0bcd	68		               pla
.0bce	8d 0c 13	               sta  f1bbutton
.0bd1	a2 0c		               ldx  #<f1bbutton
.0bd3	a0 13		               ldy  #>f1bbutton
.0bd5	20 c3 14	               jsr  putscxy
.0bd8	68		               pla
.0bd9	aa		               tax
.0bda	68		               pla
.0bdb	28		               plp
.0bdc	20 2b 15	               jsr  push
.0bdf	a2 ff		               ldx  #<blankmsg
.0be1	a0 0f		               ldy  #>blankmsg
.0be3	20 c3 14	               jsr  putscxy
.0be6	a2 fa		               ldx  #<f1b_msg
.0be8	a0 10		               ldy  #>f1b_msg
.0bea	20 c3 14	               jsr  putscxy
.0bed	20 6a 15	               jsr  pop
.0bf0	68		out            pla
.0bf1	60		               rts
.0bf2			f2action
.0bf2	48		               pha
.0bf3	ad 5e 0b	               lda  fkeyset
.0bf6	d0 47		               bne  menub
.0bf8	08		               php
.0bf9	48		               pha
.0bfa	8a		               txa
.0bfb	48		               pha
.0bfc	ad 56 12	               lda  f2abutton
.0bff	48		               pha
.0c00	a9 92		               lda  #146
.0c02	8d 65 12	               sta  f2abutton+15
.0c05	a9 0d		               lda  #flashcol
.0c07	8d 56 12	               sta  f2abutton
.0c0a	a2 56		               ldx  #<f2abutton
.0c0c	a0 12		               ldy  #>f2abutton
.0c0e	20 c3 14	               jsr  putscxy
.0c11	20 70 0a	               jsr  delay
.0c14	a9 12		               lda  #18
.0c16	8d 65 12	               sta  f2abutton+15
.0c19	68		               pla
.0c1a	8d 56 12	               sta  f2abutton
.0c1d	a2 56		               ldx  #<f2abutton
.0c1f	a0 12		               ldy  #>f2abutton
.0c21	20 c3 14	               jsr  putscxy
.0c24	68		               pla
.0c25	aa		               tax
.0c26	68		               pla
.0c27	28		               plp
.0c28	20 2b 15	               jsr  push
.0c2b	a2 ff		               ldx  #<blankmsg
.0c2d	a0 0f		               ldy  #>blankmsg
.0c2f	20 c3 14	               jsr  putscxy
.0c32	a2 46		               ldx  #<f2a_msg
.0c34	a0 10		               ldy  #>f2a_msg
.0c36	20 c3 14	               jsr  putscxy
.0c39	20 6a 15	               jsr  pop
.0c3c	4c 83 0c	               jmp  out
.0c3f			menub
.0c3f	08		               php
.0c40	48		               pha
.0c41	8a		               txa
.0c42	48		               pha
.0c43	ad 26 13	               lda  f2bbutton
.0c46	48		               pha
.0c47	a9 92		               lda  #146
.0c49	8d 35 13	               sta  f2bbutton+15
.0c4c	a9 0d		               lda  #flashcol
.0c4e	8d 26 13	               sta  f2bbutton
.0c51	a2 26		               ldx  #<f2bbutton
.0c53	a0 13		               ldy  #>f2bbutton
.0c55	20 c3 14	               jsr  putscxy
.0c58	20 70 0a	               jsr  delay
.0c5b	a9 12		               lda  #18
.0c5d	8d 35 13	               sta  f2bbutton+15
.0c60	68		               pla
.0c61	8d 26 13	               sta  f2bbutton
.0c64	a2 26		               ldx  #<f2bbutton
.0c66	a0 13		               ldy  #>f2bbutton
.0c68	20 c3 14	               jsr  putscxy
.0c6b	68		               pla
.0c6c	aa		               tax
.0c6d	68		               pla
.0c6e	28		               plp
.0c6f	20 2b 15	               jsr  push
.0c72	a2 ff		               ldx  #<blankmsg
.0c74	a0 0f		               ldy  #>blankmsg
.0c76	20 c3 14	               jsr  putscxy
.0c79	a2 11		               ldx  #<f2b_msg
.0c7b	a0 11		               ldy  #>f2b_msg
.0c7d	20 c3 14	               jsr  putscxy
.0c80	20 6a 15	               jsr  pop
.0c83	68		out            pla
.0c84	60		               rts
.0c85			f3action
.0c85	48		               pha
.0c86	ad 5e 0b	               lda  fkeyset
.0c89	d0 47		               bne  menub
.0c8b	08		               php
.0c8c	48		               pha
.0c8d	8a		               txa
.0c8e	48		               pha
.0c8f	ad 70 12	               lda  f3abutton
.0c92	48		               pha
.0c93	a9 92		               lda  #146
.0c95	8d 7f 12	               sta  f3abutton+15
.0c98	a9 0d		               lda  #flashcol
.0c9a	8d 70 12	               sta  f3abutton
.0c9d	a2 70		               ldx  #<f3abutton
.0c9f	a0 12		               ldy  #>f3abutton
.0ca1	20 c3 14	               jsr  putscxy
.0ca4	20 70 0a	               jsr  delay
.0ca7	a9 12		               lda  #18
.0ca9	8d 7f 12	               sta  f3abutton+15
.0cac	68		               pla
.0cad	8d 70 12	               sta  f3abutton
.0cb0	a2 70		               ldx  #<f3abutton
.0cb2	a0 12		               ldy  #>f3abutton
.0cb4	20 c3 14	               jsr  putscxy
.0cb7	68		               pla
.0cb8	aa		               tax
.0cb9	68		               pla
.0cba	28		               plp
.0cbb	20 2b 15	               jsr  push
.0cbe	a2 ff		               ldx  #<blankmsg
.0cc0	a0 0f		               ldy  #>blankmsg
.0cc2	20 c3 14	               jsr  putscxy
.0cc5	a2 6c		               ldx  #<f3a_msg
.0cc7	a0 10		               ldy  #>f3a_msg
.0cc9	20 c3 14	               jsr  putscxy
.0ccc	20 6a 15	               jsr  pop
.0ccf	4c 16 0d	               jmp  out
.0cd2			menub
.0cd2	08		               php
.0cd3	48		               pha
.0cd4	8a		               txa
.0cd5	48		               pha
.0cd6	ad 40 13	               lda  f3bbutton
.0cd9	48		               pha
.0cda	a9 92		               lda  #146
.0cdc	8d 4f 13	               sta  f3bbutton+15
.0cdf	a9 0d		               lda  #flashcol
.0ce1	8d 40 13	               sta  f3bbutton
.0ce4	a2 40		               ldx  #<f3bbutton
.0ce6	a0 13		               ldy  #>f3bbutton
.0ce8	20 c3 14	               jsr  putscxy
.0ceb	20 70 0a	               jsr  delay
.0cee	a9 12		               lda  #18
.0cf0	8d 4f 13	               sta  f3bbutton+15
.0cf3	68		               pla
.0cf4	8d 40 13	               sta  f3bbutton
.0cf7	a2 40		               ldx  #<f3bbutton
.0cf9	a0 13		               ldy  #>f3bbutton
.0cfb	20 c3 14	               jsr  putscxy
.0cfe	68		               pla
.0cff	aa		               tax
.0d00	68		               pla
.0d01	28		               plp
.0d02	20 2b 15	               jsr  push
.0d05	a2 ff		               ldx  #<blankmsg
.0d07	a0 0f		               ldy  #>blankmsg
.0d09	20 c3 14	               jsr  putscxy
.0d0c	a2 2a		               ldx  #<f3b_msg
.0d0e	a0 11		               ldy  #>f3b_msg
.0d10	20 c3 14	               jsr  putscxy
.0d13	20 6a 15	               jsr  pop
.0d16	68		out            pla
.0d17	60		               rts
.0d18			f4action
.0d18	48		               pha
.0d19	ad 5e 0b	               lda  fkeyset
.0d1c	d0 47		               bne  menub
.0d1e	08		               php
.0d1f	48		               pha
.0d20	8a		               txa
.0d21	48		               pha
.0d22	ad 8a 12	               lda  f4abutton
.0d25	48		               pha
.0d26	a9 92		               lda  #146
.0d28	8d 99 12	               sta  f4abutton+15
.0d2b	a9 0d		               lda  #flashcol
.0d2d	8d 8a 12	               sta  f4abutton
.0d30	a2 8a		               ldx  #<f4abutton
.0d32	a0 12		               ldy  #>f4abutton
.0d34	20 c3 14	               jsr  putscxy
.0d37	20 70 0a	               jsr  delay
.0d3a	a9 12		               lda  #18
.0d3c	8d 99 12	               sta  f4abutton+15
.0d3f	68		               pla
.0d40	8d 8a 12	               sta  f4abutton
.0d43	a2 8a		               ldx  #<f4abutton
.0d45	a0 12		               ldy  #>f4abutton
.0d47	20 c3 14	               jsr  putscxy
.0d4a	68		               pla
.0d4b	aa		               tax
.0d4c	68		               pla
.0d4d	28		               plp
.0d4e	20 2b 15	               jsr  push
.0d51	a2 ff		               ldx  #<blankmsg
.0d53	a0 0f		               ldy  #>blankmsg
.0d55	20 c3 14	               jsr  putscxy
.0d58	a2 93		               ldx  #<f4a_msg
.0d5a	a0 10		               ldy  #>f4a_msg
.0d5c	20 c3 14	               jsr  putscxy
.0d5f	20 6a 15	               jsr  pop
.0d62	4c a9 0d	               jmp  out
.0d65			menub
.0d65	08		               php
.0d66	48		               pha
.0d67	8a		               txa
.0d68	48		               pha
.0d69	ad 5a 13	               lda  f4bbutton
.0d6c	48		               pha
.0d6d	a9 92		               lda  #146
.0d6f	8d 69 13	               sta  f4bbutton+15
.0d72	a9 0d		               lda  #flashcol
.0d74	8d 5a 13	               sta  f4bbutton
.0d77	a2 5a		               ldx  #<f4bbutton
.0d79	a0 13		               ldy  #>f4bbutton
.0d7b	20 c3 14	               jsr  putscxy
.0d7e	20 70 0a	               jsr  delay
.0d81	a9 12		               lda  #18
.0d83	8d 69 13	               sta  f4bbutton+15
.0d86	68		               pla
.0d87	8d 5a 13	               sta  f4bbutton
.0d8a	a2 5a		               ldx  #<f4bbutton
.0d8c	a0 13		               ldy  #>f4bbutton
.0d8e	20 c3 14	               jsr  putscxy
.0d91	68		               pla
.0d92	aa		               tax
.0d93	68		               pla
.0d94	28		               plp
.0d95	20 2b 15	               jsr  push
.0d98	a2 ff		               ldx  #<blankmsg
.0d9a	a0 0f		               ldy  #>blankmsg
.0d9c	20 c3 14	               jsr  putscxy
.0d9f	a2 42		               ldx  #<f4b_msg
.0da1	a0 11		               ldy  #>f4b_msg
.0da3	20 c3 14	               jsr  putscxy
.0da6	20 6a 15	               jsr  pop
.0da9	68		out            pla
.0daa	60		               rts
.0dab			f5action
.0dab	48		               pha
.0dac	ad 5e 0b	               lda  fkeyset
.0daf	d0 47		               bne  menub
.0db1	08		               php
.0db2	48		               pha
.0db3	8a		               txa
.0db4	48		               pha
.0db5	ad a4 12	               lda  f5abutton
.0db8	48		               pha
.0db9	a9 92		               lda  #146
.0dbb	8d b3 12	               sta  f5abutton+15
.0dbe	a9 0d		               lda  #flashcol
.0dc0	8d a4 12	               sta  f5abutton
.0dc3	a2 a4		               ldx  #<f5abutton
.0dc5	a0 12		               ldy  #>f5abutton
.0dc7	20 c3 14	               jsr  putscxy
.0dca	20 70 0a	               jsr  delay
.0dcd	a9 12		               lda  #18
.0dcf	8d b3 12	               sta  f5abutton+15
.0dd2	68		               pla
.0dd3	8d a4 12	               sta  f5abutton
.0dd6	a2 a4		               ldx  #<f5abutton
.0dd8	a0 12		               ldy  #>f5abutton
.0dda	20 c3 14	               jsr  putscxy
.0ddd	68		               pla
.0dde	aa		               tax
.0ddf	68		               pla
.0de0	28		               plp
.0de1	20 2b 15	               jsr  push
.0de4	a2 ff		               ldx  #<blankmsg
.0de6	a0 0f		               ldy  #>blankmsg
.0de8	20 c3 14	               jsr  putscxy
.0deb	a2 b0		               ldx  #<f5a_msg
.0ded	a0 10		               ldy  #>f5a_msg
.0def	20 c3 14	               jsr  putscxy
.0df2	20 6a 15	               jsr  pop
.0df5	4c 3c 0e	               jmp  out
.0df8			menub
.0df8	08		               php
.0df9	48		               pha
.0dfa	8a		               txa
.0dfb	48		               pha
.0dfc	ad 74 13	               lda  f5bbutton
.0dff	48		               pha
.0e00	a9 92		               lda  #146
.0e02	8d 83 13	               sta  f5bbutton+15
.0e05	a9 0d		               lda  #flashcol
.0e07	8d 74 13	               sta  f5bbutton
.0e0a	a2 74		               ldx  #<f5bbutton
.0e0c	a0 13		               ldy  #>f5bbutton
.0e0e	20 c3 14	               jsr  putscxy
.0e11	20 70 0a	               jsr  delay
.0e14	a9 12		               lda  #18
.0e16	8d 83 13	               sta  f5bbutton+15
.0e19	68		               pla
.0e1a	8d 74 13	               sta  f5bbutton
.0e1d	a2 74		               ldx  #<f5bbutton
.0e1f	a0 13		               ldy  #>f5bbutton
.0e21	20 c3 14	               jsr  putscxy
.0e24	68		               pla
.0e25	aa		               tax
.0e26	68		               pla
.0e27	28		               plp
.0e28	20 2b 15	               jsr  push
.0e2b	a2 ff		               ldx  #<blankmsg
.0e2d	a0 0f		               ldy  #>blankmsg
.0e2f	20 c3 14	               jsr  putscxy
.0e32	a2 57		               ldx  #<f5b_msg
.0e34	a0 11		               ldy  #>f5b_msg
.0e36	20 c3 14	               jsr  putscxy
.0e39	20 6a 15	               jsr  pop
.0e3c	68		out            pla
.0e3d	60		               rts
.0e3e			f6action
.0e3e	48		               pha
.0e3f	ad 5e 0b	               lda  fkeyset
.0e42	d0 47		               bne  menub
.0e44	08		               php
.0e45	48		               pha
.0e46	8a		               txa
.0e47	48		               pha
.0e48	ad be 12	               lda  f6abutton
.0e4b	48		               pha
.0e4c	a9 92		               lda  #146
.0e4e	8d cd 12	               sta  f6abutton+15
.0e51	a9 0d		               lda  #flashcol
.0e53	8d be 12	               sta  f6abutton
.0e56	a2 be		               ldx  #<f6abutton
.0e58	a0 12		               ldy  #>f6abutton
.0e5a	20 c3 14	               jsr  putscxy
.0e5d	20 70 0a	               jsr  delay
.0e60	a9 12		               lda  #18
.0e62	8d cd 12	               sta  f6abutton+15
.0e65	68		               pla
.0e66	8d be 12	               sta  f6abutton
.0e69	a2 be		               ldx  #<f6abutton
.0e6b	a0 12		               ldy  #>f6abutton
.0e6d	20 c3 14	               jsr  putscxy
.0e70	68		               pla
.0e71	aa		               tax
.0e72	68		               pla
.0e73	28		               plp
.0e74	20 2b 15	               jsr  push
.0e77	a2 ff		               ldx  #<blankmsg
.0e79	a0 0f		               ldy  #>blankmsg
.0e7b	20 c3 14	               jsr  putscxy
.0e7e	a2 ca		               ldx  #<f6a_msg
.0e80	a0 10		               ldy  #>f6a_msg
.0e82	20 c3 14	               jsr  putscxy
.0e85	20 6a 15	               jsr  pop
.0e88	4c cf 0e	               jmp  out
.0e8b			menub
.0e8b	08		               php
.0e8c	48		               pha
.0e8d	8a		               txa
.0e8e	48		               pha
.0e8f	ad 8e 13	               lda  f6bbutton
.0e92	48		               pha
.0e93	a9 92		               lda  #146
.0e95	8d 9d 13	               sta  f6bbutton+15
.0e98	a9 0d		               lda  #flashcol
.0e9a	8d 8e 13	               sta  f6bbutton
.0e9d	a2 8e		               ldx  #<f6bbutton
.0e9f	a0 13		               ldy  #>f6bbutton
.0ea1	20 c3 14	               jsr  putscxy
.0ea4	20 70 0a	               jsr  delay
.0ea7	a9 12		               lda  #18
.0ea9	8d 9d 13	               sta  f6bbutton+15
.0eac	68		               pla
.0ead	8d 8e 13	               sta  f6bbutton
.0eb0	a2 8e		               ldx  #<f6bbutton
.0eb2	a0 13		               ldy  #>f6bbutton
.0eb4	20 c3 14	               jsr  putscxy
.0eb7	68		               pla
.0eb8	aa		               tax
.0eb9	68		               pla
.0eba	28		               plp
.0ebb	20 2b 15	               jsr  push
.0ebe	a2 ff		               ldx  #<blankmsg
.0ec0	a0 0f		               ldy  #>blankmsg
.0ec2	20 c3 14	               jsr  putscxy
.0ec5	a2 6b		               ldx  #<f6b_msg
.0ec7	a0 11		               ldy  #>f6b_msg
.0ec9	20 c3 14	               jsr  putscxy
.0ecc	20 6a 15	               jsr  pop
.0ecf	68		out            pla
.0ed0	60		               rts
.0ed1			f7action
.0ed1	48		               pha
.0ed2	ad 5e 0b	               lda  fkeyset
.0ed5	d0 47		               bne  menub
.0ed7	08		               php
.0ed8	48		               pha
.0ed9	8a		               txa
.0eda	48		               pha
.0edb	ad d8 12	               lda  f7abutton
.0ede	48		               pha
.0edf	a9 92		               lda  #146
.0ee1	8d e7 12	               sta  f7abutton+15
.0ee4	a9 0d		               lda  #flashcol
.0ee6	8d d8 12	               sta  f7abutton
.0ee9	a2 d8		               ldx  #<f7abutton
.0eeb	a0 12		               ldy  #>f7abutton
.0eed	20 c3 14	               jsr  putscxy
.0ef0	20 70 0a	               jsr  delay
.0ef3	a9 12		               lda  #18
.0ef5	8d e7 12	               sta  f7abutton+15
.0ef8	68		               pla
.0ef9	8d d8 12	               sta  f7abutton
.0efc	a2 d8		               ldx  #<f7abutton
.0efe	a0 12		               ldy  #>f7abutton
.0f00	20 c3 14	               jsr  putscxy
.0f03	68		               pla
.0f04	aa		               tax
.0f05	68		               pla
.0f06	28		               plp
.0f07	20 2b 15	               jsr  push
.0f0a	a2 ff		               ldx  #<blankmsg
.0f0c	a0 0f		               ldy  #>blankmsg
.0f0e	20 c3 14	               jsr  putscxy
.0f11	a2 e4		               ldx  #<f7a_msg
.0f13	a0 10		               ldy  #>f7a_msg
.0f15	20 c3 14	               jsr  putscxy
.0f18	20 6a 15	               jsr  pop
.0f1b	4c 62 0f	               jmp  out
.0f1e			menub
.0f1e	08		               php
.0f1f	48		               pha
.0f20	8a		               txa
.0f21	48		               pha
.0f22	ad a8 13	               lda  f7bbutton
.0f25	48		               pha
.0f26	a9 92		               lda  #146
.0f28	8d b7 13	               sta  f7bbutton+15
.0f2b	a9 0d		               lda  #flashcol
.0f2d	8d a8 13	               sta  f7bbutton
.0f30	a2 a8		               ldx  #<f7bbutton
.0f32	a0 13		               ldy  #>f7bbutton
.0f34	20 c3 14	               jsr  putscxy
.0f37	20 70 0a	               jsr  delay
.0f3a	a9 12		               lda  #18
.0f3c	8d b7 13	               sta  f7bbutton+15
.0f3f	68		               pla
.0f40	8d a8 13	               sta  f7bbutton
.0f43	a2 a8		               ldx  #<f7bbutton
.0f45	a0 13		               ldy  #>f7bbutton
.0f47	20 c3 14	               jsr  putscxy
.0f4a	68		               pla
.0f4b	aa		               tax
.0f4c	68		               pla
.0f4d	28		               plp
.0f4e	20 2b 15	               jsr  push
.0f51	a2 ff		               ldx  #<blankmsg
.0f53	a0 0f		               ldy  #>blankmsg
.0f55	20 c3 14	               jsr  putscxy
.0f58	a2 7d		               ldx  #<f7b_msg
.0f5a	a0 11		               ldy  #>f7b_msg
.0f5c	20 c3 14	               jsr  putscxy
.0f5f	20 6a 15	               jsr  pop
.0f62	68		out            pla
.0f63	60		               rts
.0f64			f8action
.0f64	48		               pha
.0f65	ad 5e 0b	               lda  fkeyset
.0f68	d0 47		               bne  menub
.0f6a	08		               php
.0f6b	48		               pha
.0f6c	8a		               txa
.0f6d	48		               pha
.0f6e	ad f2 12	               lda  f8abutton
.0f71	48		               pha
.0f72	a9 92		               lda  #146
.0f74	8d 01 13	               sta  f8abutton+15
.0f77	a9 0d		               lda  #flashcol
.0f79	8d f2 12	               sta  f8abutton
.0f7c	a2 f2		               ldx  #<f8abutton
.0f7e	a0 12		               ldy  #>f8abutton
.0f80	20 c3 14	               jsr  putscxy
.0f83	20 70 0a	               jsr  delay
.0f86	a9 12		               lda  #18
.0f88	8d 01 13	               sta  f8abutton+15
.0f8b	68		               pla
.0f8c	8d f2 12	               sta  f8abutton
.0f8f	a2 f2		               ldx  #<f8abutton
.0f91	a0 12		               ldy  #>f8abutton
.0f93	20 c3 14	               jsr  putscxy
.0f96	68		               pla
.0f97	aa		               tax
.0f98	68		               pla
.0f99	28		               plp
.0f9a	20 2b 15	               jsr  push
.0f9d	a2 ff		               ldx  #<blankmsg
.0f9f	a0 0f		               ldy  #>blankmsg
.0fa1	20 c3 14	               jsr  putscxy
.0fa4	a2 ea		               ldx  #<menub_msg
.0fa6	a0 11		               ldy  #>menub_msg
.0fa8	20 c3 14	               jsr  putscxy
.0fab	20 6a 15	               jsr  pop
.0fae	4c f5 0f	               jmp  swapit
.0fb1			menub
.0fb1	08		               php
.0fb2	48		               pha
.0fb3	8a		               txa
.0fb4	48		               pha
.0fb5	ad c2 13	               lda  f8bbutton
.0fb8	48		               pha
.0fb9	a9 92		               lda  #146
.0fbb	8d d1 13	               sta  f8bbutton+15
.0fbe	a9 0d		               lda  #flashcol
.0fc0	8d c2 13	               sta  f8bbutton
.0fc3	a2 c2		               ldx  #<f8bbutton
.0fc5	a0 13		               ldy  #>f8bbutton
.0fc7	20 c3 14	               jsr  putscxy
.0fca	20 70 0a	               jsr  delay
.0fcd	a9 12		               lda  #18
.0fcf	8d d1 13	               sta  f8bbutton+15
.0fd2	68		               pla
.0fd3	8d c2 13	               sta  f8bbutton
.0fd6	a2 c2		               ldx  #<f8bbutton
.0fd8	a0 13		               ldy  #>f8bbutton
.0fda	20 c3 14	               jsr  putscxy
.0fdd	68		               pla
.0fde	aa		               tax
.0fdf	68		               pla
.0fe0	28		               plp
.0fe1	20 2b 15	               jsr  push
.0fe4	a2 ff		               ldx  #<blankmsg
.0fe6	a0 0f		               ldy  #>blankmsg
.0fe8	20 c3 14	               jsr  putscxy
.0feb	a2 cf		               ldx  #<menua_msg
.0fed	a0 11		               ldy  #>menua_msg
.0fef	20 c3 14	               jsr  putscxy
.0ff2	20 6a 15	               jsr  pop
.0ff5	49 ff		swapit         eor  #$ff
.0ff7	8d 5e 0b	               sta  fkeyset
.0ffa	20 44 09	               jsr  showfkeys
.0ffd	68		               pla
.0ffe	60		               rts

;******  Processing file: messages.asm

=$07			mesgcol = vjaune
>0fff	07 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>1003	20 20 20 20	               .null     "                                      "
>1007	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1017	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1027	20 20 00
.102a			f1a_msg
>102a	07 00 05 12	edit_msg       .byte     mesgcol,0,5,18
>102e	20 45 4e 54	               .null     " entry mode: chr$(   )",146
>1032	52 59 20 4d 4f 44 45 3a 20 43 48 52 24 28 20 20
>1042	20 29 92 00
.1046			f2a_msg
>1046	07 00 05 92	save_msg       .byte     mesgcol,0,5,146
>104a	20 53 41 56	               .null     " save on cassette or disk? (c/d):"
>104e	45 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>105e	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.106c			f3a_msg
>106c	07 00 05	load_msg       .byte     mesgcol,0,5
>106f	20 4c 4f 41	               .null     " load from cassette or disk? (c/d):"
>1073	44 20 46 52 4f 4d 20 43 41 53 53 45 54 54 45 20
>1083	4f 52 20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.1093			f4a_msg
>1093	07 00 05	copy_msg       .byte     mesgcol,0,5
>1096	20 45 4e 54	               .null     " enter character to copy:"
>109a	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>10aa	43 4f 50 59 3a 00
.10b0			f5a_msg
>10b0	07 00 05	clear_msg      .byte     mesgcol,0,5
>10b3	20 43 4c 45	               .null     " clear char: chr$(   )"
>10b7	41 52 20 43 48 41 52 3a 20 43 48 52 24 28 20 20
>10c7	20 29 00
.10ca			f6a_msg
>10ca	07 00 05	fill_msg       .byte     mesgcol,0,5
>10cd	20 46 49 4c	               .null     " fill char:  chr$(   )"
>10d1	4c 20 43 48 41 52 3a 20 20 43 48 52 24 28 20 20
>10e1	20 29 00
.10e4			f7a_msg
>10e4	07 00 05	work_msg       .byte     mesgcol,0,5
>10e7	20 45 4e 41	               .null     " enable work space"
>10eb	42 4c 45 20 57 4f 52 4b 20 53 50 41 43 45 00
.10fa			f1b_msg
>10fa	07 00 05	rvrs_msg       .byte     mesgcol,0,5
>10fd	20 52 45 56	               .null     " reverse character:"
>1101	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
.1111			f2b_msg
>1111	07 00 05	invr_msg       .byte     mesgcol,0,5
>1114	20 49 4e 56	               .null     " inverting character:"
>1118	45 52 54 49 4e 47 20 43 48 41 52 41 43 54 45 52
>1128	3a 00
.112a			f3b_msg
>112a	07 00 05	flip_msg       .byte     mesgcol,0,5
>112d	20 46 4c 49	               .null     " flipping character:"
>1131	50 50 49 4e 47 20 43 48 41 52 41 43 54 45 52 3a
>1141	00
.1142			f4b_msg
>1142	07 00 05	scrollr_msg    .byte     mesgcol,0,5
>1145	20 53 43 52	               .null     " scrolling right:"
>1149	4f 4c 4c 49 4e 47 20 52 49 47 48 54 3a 00
.1157			f5b_msg
>1157	07 00 05	scrolll_msg    .byte     mesgcol,0,5
>115a	20 53 43 52	               .null     " scrolling left:"
>115e	4f 4c 4c 49 4e 47 20 4c 45 46 54 3a 00
.116b			f6b_msg
>116b	07 00 05	scrollu_msg    .byte     mesgcol,0,5
>116e	20 53 43 52	               .null     " scrolling up:"
>1172	4f 4c 4c 49 4e 47 20 55 50 3a 00
.117d			f7b_msg
>117d	07 00 05	scrolld_msg    .byte     mesgcol,0,5
>1180	20 53 43 52	               .null     " scrolling down:"
>1184	4f 4c 4c 49 4e 47 20 44 4f 57 4e 3a 00
>1191	07 00 05	save_fname_msg .byte     mesgcol,0,5
>1194	20 53 41 56	               .null     " save: file name ------.chr"
>1198	45 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>11a8	2d 2d 2d 2e 43 48 52 00
>11b0	07 00 05	load_fname_msg .byte     mesgcol,0,5
>11b3	20 4c 4f 41	               .null     " load: file name ------.chr"
>11b7	44 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>11c7	2d 2d 2d 2e 43 48 52 00
>11cf	07 00 05	menua_msg      .byte     mesgcol,0,5
>11d2	20 59 4f 55	               .null     " you are now in menu a."
>11d6	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>11e6	20 41 2e 00
>11ea	07 00 05	menub_msg      .byte     mesgcol,0,5
>11ed	20 59 4f 55	               .null     " you are now in menu b."
>11f1	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>1201	20 42 2e 00
>1205	0e 15 18 12	quit_msg       .byte     vblue1,21,24,18
>1209	43 54 52 4c	               .text     "ctrl-x",146
>120d	2d 58 92
>1210	20 54 4f 20	               .null     " to quit."
>1214	51 55 49 54 2e 00
>121a	0a 06 0c 12	bye_msg        .byte     vrose,6,12,18
>121e	20 d4 48 41	               .null     " Thanks and have a good day ",146
>1222	4e 4b 53 20 41 4e 44 20 48 41 56 45 20 41 20 47
>1232	4f 4f 44 20 44 41 59 20 92 00
=18			fkeyleft=18
=8			f1top=8
=1			menu1col = 1
=3			menu2col = 3
>123c	01 12 08	f1abutton      .byte     menu1col,fkeyleft,f1top       ;133
>123f	45 44 49 54	               .text     "edit....... "
>1243	2e 2e 2e 2e 2e 2e 2e 20
>124b	12		               .byte     18             ; position 15
>124c	20 20 20 46	               .text     "   f1   "
>1250	31 20 20 20
>1254	92 00		               .byte     146,0
>1256	01 12 0a	f2abutton      .byte     menu1col,fkeyleft,f1top+2     ;137
>1259	53 41 56 45	               .text     "save....... "
>125d	2e 2e 2e 2e 2e 2e 2e 20
>1265	12		               .byte     18            ; position 15
>1266	20 20 20 46	               .text     "   f2   "
>126a	32 20 20 20
>126e	92 00		               .byte     146,0
>1270	01 12 0c	f3abutton      .byte     menu1col,fkeyleft,f1top+4     ;134
>1273	4c 4f 41 44	               .text     "load....... "
>1277	2e 2e 2e 2e 2e 2e 2e 20
>127f	12		               .byte     18             ; position 15
>1280	20 20 20 46	               .text     "   f3   "
>1284	33 20 20 20
>1288	92 00		               .byte     146,0
>128a	01 12 0e	f4abutton      .byte     menu1col,fkeyleft,f1top+6     ;138
>128d	43 4f 50 59	               .text     "copy....... "
>1291	2e 2e 2e 2e 2e 2e 2e 20
>1299	12		               .byte     18             ; position 15
>129a	20 20 20 46	               .text     "   f4   "
>129e	34 20 20 20
>12a2	92 00		               .byte     146,0
>12a4	01 12 10	f5abutton      .byte     menu1col,fkeyleft,f1top+8     ;135
>12a7	43 4c 45 41	               .text     "clear...... "
>12ab	52 2e 2e 2e 2e 2e 2e 20
>12b3	12		               .byte     18             ; position 15
>12b4	20 20 20 46	               .text     "   f5   "
>12b8	35 20 20 20
>12bc	92 00		               .byte     146,0
>12be	01 12 12	f6abutton      .byte     menu1col,fkeyleft,f1top+10    ;139
>12c1	46 49 4c 4c	               .text     "fill....... "
>12c5	2e 2e 2e 2e 2e 2e 2e 20
>12cd	12		               .byte     18             ; position 15
>12ce	20 20 20 46	               .text     "   f6   "
>12d2	36 20 20 20
>12d6	92 00		               .byte     146,0
>12d8	01 12 14	f7abutton      .byte     menu1col,fkeyleft,f1top+12    ;136
>12db	57 4f 52 4b	               .text     "work....... "
>12df	2e 2e 2e 2e 2e 2e 2e 20
>12e7	12		               .byte     18             ; position 15
>12e8	20 20 20 46	               .text     "   f7   "
>12ec	37 20 20 20
>12f0	92 00		               .byte     146,0
>12f2	01 12 16	f8abutton      .byte     menu1col,fkeyleft,f1top+14    ;140
>12f5	46 55 4e 43	               .text     "function... "
>12f9	54 49 4f 4e 2e 2e 2e 20
>1301	12		               .byte     18             ; position 15
>1302	20 20 20 46	               .text     "   f8   "
>1306	38 20 20 20
>130a	92 00		               .byte     146,0
>130c	03 12 08	f1bbutton      .byte     menu2col,fkeyleft,f1top
>130f	52 45 56 45	               .text     "reverse.... "
>1313	52 53 45 2e 2e 2e 2e 20
>131b	12		               .byte     18             ; position 15
>131c	20 20 20 46	               .text     "   f1   "
>1320	31 20 20 20
>1324	92 00		               .byte     146,0
>1326	03 12 0a	f2bbutton      .byte     menu2col,fkeyleft,f1top+2
>1329	49 4e 56 45	               .text     "invert..... "
>132d	52 54 2e 2e 2e 2e 2e 20
>1335	12		               .byte     18             ; position 15
>1336	20 20 20 46	               .text     "   f2   "
>133a	32 20 20 20
>133e	92 00		               .byte     146,0
>1340	03 12 0c	f3bbutton      .byte     menu2col,fkeyleft,f1top+4
>1343	46 4c 49 50	               .text     "flip....... "
>1347	2e 2e 2e 2e 2e 2e 2e 20
>134f	12		               .byte     18             ; position 15
>1350	20 20 20 46	               .text     "   f3   "
>1354	33 20 20 20
>1358	92 00		               .byte     146,0
>135a	03 12 0e	f4bbutton      .byte     menu2col,fkeyleft,f1top+6
>135d	53 43 52 4f	               .text     "scroll r... "
>1361	4c 4c 20 52 2e 2e 2e 20
>1369	12		               .byte     18             ; position 15
>136a	20 20 20 46	               .text     "   f4   "
>136e	34 20 20 20
>1372	92 00		               .byte     146,0
>1374	03 12 10	f5bbutton      .byte     menu2col,fkeyleft,f1top+8
>1377	53 43 52 4f	               .text     "scroll l... "
>137b	4c 4c 20 4c 2e 2e 2e 20
>1383	12		               .byte     18             ; position 15
>1384	20 20 20 46	               .text     "   f5   "
>1388	35 20 20 20
>138c	92 00		               .byte     146,0
>138e	03 12 12	f6bbutton      .byte     menu2col,fkeyleft,f1top+10
>1391	53 43 52 4f	               .text     "scroll u... "
>1395	4c 4c 20 55 2e 2e 2e 20
>139d	12		               .byte     18             ; position 15
>139e	20 20 20 46	               .text     "   f6   "
>13a2	36 20 20 20
>13a6	92 00		               .byte     146,0
>13a8	03 12 14	f7bbutton      .byte     menu2col,fkeyleft,f1top+12
>13ab	53 43 52 4f	               .text     "scroll d... "
>13af	4c 4c 20 44 2e 2e 2e 20
>13b7	12		               .byte     18             ; position 15
>13b8	20 20 20 46	               .text     "   f7   "
>13bc	37 20 20 20
>13c0	92 00		               .byte     146,0
>13c2	03 12 16	f8bbutton      .byte     menu2col,fkeyleft,f1top+14
>13c5	46 55 4e 43	               .text     "function... "
>13c9	54 49 4f 4e 2e 2e 2e 20
>13d1	12		               .byte     18             ; position 15
>13d2	20 20 20 46	               .text     "   f8   "
>13d6	38 20 20 20
>13da	92 00		               .byte     146,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ;  97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c1			stal            =       $c1     ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.13dc			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.13dc			screendis
.13dc	08		               php
.13dd	48		               pha
.13de	ad 11 d0	               lda  $d011
.13e1	29 ef		               and  #%11101111
.13e3	8d 11 d0	               sta  $d011
.13e6	68		               pla
.13e7	28		               plp
.13e8	60		               rts
.13e9			screenena
.13e9	08		               php
.13ea	48		               pha
.13eb	ad 11 d0	               lda  $d011
.13ee	09 10		               ora  #%00010000
.13f0	8d 11 d0	               sta  $d011
.13f3	68		               pla
.13f4	28		               plp
.13f5	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.13f6			scrmaninit
.13f6	20 2b 15	               jsr  push
.13f9	a9 06		               lda  #vbleu
.13fb	8d 21 d0	               sta  vicbackcol
.13fe	a9 05		               lda  #vvert
.1400	8d 20 d0	               sta  vicbordcol
.1403	a9 01		               lda  #vblanc
.1405	8d 86 02	               sta  bascol
.1408	ad 00 04	               lda  scrnram
.140b	29 fd		               and  #%11111101
.140d	8d 00 04	               sta  scrnram
.1410	20 18 14	               jsr  cls
.1413	20 6a 15	               jsr  pop
.1416	60		               rts
>1417	8e		characterset   .byte b_uppercase
.1418			cls
.1418	08		               php
.1419	48		               pha
.141a	a9 93		               lda  #$93
.141c	20 34 14	               jsr  putch
.141f	a9 0e		               lda  #$0e
.1421	20 34 14	               jsr  putch
.1424	68		               pla
.1425	28		               plp
.1426	60		               rts
.1427			putnch
.1427	08		               php
.1428	e0 00		               cpx  #$00
.142a	f0 06		               beq  out
.142c	20 d2 ff	again          jsr  $ffd2
.142f	ca		               dex
.1430	d0 fa		               bne  again
.1432	28		out            plp
.1433	60		               rts
.1434			putch
.1434	08		               php
.1435	20 d2 ff	               jsr  $ffd2
.1438	28		               plp
.1439	60		               rts
.143a			puts
.143a	20 2b 15	               jsr  push
.143d	86 fb		               stx  zpage1
.143f	84 fc		               sty  zpage1+1
.1441	a0 00		               ldy  #0
.1443	b1 fb		next           lda  (zpage1),y
.1445	f0 09		               beq  exit
.1447	20 34 14	               jsr  putch
.144a	20 32 16	               jsr  inczp1
.144d	4c 43 14	               jmp  next
.1450	20 6a 15	exit           jsr  pop
.1453	60		               rts
.1454			gotoxy
.1454	08		               php
.1455	18		               clc
.1456	8a		               txa
.1457	48		               pha
.1458	98		               tya
.1459	aa		               tax
.145a	68		               pla
.145b	a8		               tay
.145c	20 f0 ff	               jsr  kplot
.145f	28		               plp
.1460	60		               rts
.1461			cursor
=$0286			bascol    =    $0286
.1461	08		               php
.1462	48		               pha
.1463	90 12		               bcc  restore
.1465	20 f0 ff	               jsr  kplot
.1468	8c 89 14	               sty  cx
.146b	8e 8a 14	               stx  cy
.146e	ad 86 02	               lda  bascol
.1471	8d 8b 14	               sta  bcol
.1474	4c 86 14	               jmp  out
.1477	ae 8a 14	restore        ldx  cy
.147a	ac 89 14	               ldy  cx
.147d	20 f0 ff	               jsr  kplot
.1480	ad 8b 14	               lda  bcol
.1483	8d 86 02	               sta  bascol
.1486	68		out            pla
.1487	28		               plp
.1488	60		               rts
>1489	00		cx   .byte     $00
>148a	00		cy   .byte     $00
>148b	00		bcol .byte     $00
.148c			cursave
.148c	08		               php
.148d	38		               sec
.148e	20 61 14	               jsr  cursor
.1491	28		               plp
.1492	60		               rts
.1493			curput
.1493	08		               php
.1494	18		               clc
.1495	20 61 14	               jsr  cursor
.1498	28		               plp
.1499	60		               rts
.149a			putsxy
.149a	20 2b 15	               jsr  push
.149d	86 fb		               stx  zpage1
.149f	84 fc		               sty  zpage1+1
.14a1	a0 00		               ldy  #$00
.14a3	b1 fb		               lda  (zpage1),y
.14a5	aa		               tax
.14a6	20 32 16	               jsr  inczp1
.14a9	b1 fb		               lda  (zpage1),y
.14ab	a8		               tay
.14ac	20 54 14	               jsr  gotoxy
.14af	20 32 16	               jsr  inczp1
.14b2	a6 fb		               ldx  zpage1
.14b4	a4 fc		               ldy  zpage1+1
.14b6	20 3a 14	               jsr  puts
.14b9	20 6a 15	               jsr  pop
.14bc	60		               rts
>14bd	00 00		straddr   .word     $00
>14bf	00		px        .byte     $00
>14c0	00		py        .byte     $00
>14c1	00 00		zp1       .word     $00
.14c3			putscxy
.14c3	20 2b 15	               jsr  push
.14c6	84 fc		               sty  zpage1+1
.14c8	86 fb		               stx  zpage1
.14ca	ad 86 02	               lda  bascol
.14cd	8d ed 14	               sta  bc
.14d0	a0 00		               ldy #$00
.14d2	b1 fb		               lda  (zpage1),y
.14d4	8d 86 02	               sta  bascol
.14d7	20 32 16	               jsr  inczp1
.14da	a6 fb		               ldx  zpage1
.14dc	a4 fc		               ldy  zpage1+1
.14de	20 9a 14	               jsr  putsxy
.14e1	ad ed 14	               lda  bc
.14e4	8d 86 02	               sta  bascol
.14e7	20 6a 15	               jsr  pop
.14ea	60		               rts
>14eb	00 00		straddr  .word      $00
>14ed	00		bc       .byte      $00
>14ee	00 00		zp1      .word      $00
.14f0			putrahex
.14f0	08		               php
.14f1	48		               pha
.14f2	20 3b 17	               jsr  a2hex
.14f5	a9 e7		               lda  #<a2hexstr
.14f7	a0 16		               ldy  #>a2hexstr
.14f9	20 3a 14	               jsr  puts
.14fc	68		               pla
.14fd	28		               plp
.14fe	60		               rts
.14ff			kputrahexxy
.14ff			bputrahexxy
.14ff			putrahexxy
.14ff	08		               php
.1500	20 3b 17	               jsr  a2hex
.1503	a9 e4		               lda  #<a2hexpos
.1505	a0 16		               ldy  #>a2hexpos
.1507	20 9a 14	               jsr  putsxy
.150a	68		               pla
.150b	28		               plp
.150c	60		               rts
.150d			putrahexcxy
.150d	08		               php
.150e	20 3b 17	               jsr  a2hex
.1511	a9 e4		               lda  #<a2hexpos
.1513	a0 16		               ldy  #>a2hexpos
.1515	20 c3 14	               jsr  putscxy
.1518	68		               pla
.1519	28		               plp
.151a	60		               rts
.151b			setinverse
.151b	48		               pha
.151c	a9 12		               lda  #$12
.151e	20 d2 ff	               jsr  $ffd2
.1521	68		               pla
.1522	60		               rts
.1523			clrinverse
.1523	48		               pha
.1524	a9 92		               lda  #$92
.1526	20 d2 ff	               jsr  $ffd2
.1529	68		               pla
.152a	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.152b			push
.152b	08		          php            ; stack : flg, pcl, pch
.152c	78		          sei
.152d	8d 67 15	          sta  ra        ; save a
.1530	68		          pla            ; stack : pcl, pch
.1531	8d 66 15	          sta  rp        ; save rp
.1534	68		          pla            ; stack : pch
.1535	8d 68 15	          sta  pc        ; save pcl
.1538	68		          pla            ; stack : -
.1539	8d 69 15	          sta  pc+1      ; save pch
.153c	a5 fb		          lda  zpage1    ; get zpage1 low byte
.153e	48		          pha            ; stack : zp1l
.153f	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.1541	48		          pha            ; stack : zp1h, zp1l
.1542	a5 fd		          lda  zpage2    ; get zpage2 low byte
.1544	48		          pha            ; stack : zp2l, zp1h, zp1l
.1545	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.1547	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1548	ad 66 15	          lda  rp        ; get rp
.154b	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.154c	ad 67 15	          lda  ra        ; get a
.154f	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1550	8a		          txa            ; get x
.1551	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1552	98		          tya            ; get y
.1553	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1554	ad 69 15	          lda  pc+1      ; get pch
.1557	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1558	ad 68 15	          lda  pc        ; get pcl
.155b	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.155c	ad 66 15	          lda  rp        ; get rp
.155f	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1560	ad 67 15	          lda  ra        ; get a
.1563	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1564	58		          cli
.1565	60		          rts
>1566	00		rp        .byte     0
>1567	00		ra        .byte     0
>1568	00 00		pc        .word     0
.156a			pull
.156a			pop
.156a	78		          sei
.156b	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.156c	8d 9f 15	          sta  pc        ; save pcl
.156f	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1570	8d a0 15	          sta  pc+1      ; save pch
.1573	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1574	a8		          tay            ; set y
.1575	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1576	aa		          tax            ; set x
.1577	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1578	8d 9e 15	          sta  ra        ; save a
.157b	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.157c	8d 9d 15	          sta  rp        ; save rp
.157f	68		          pla            ; stack : zp2l, zp1h, zp1l
.1580	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.1582	68		          pla            ; stack : zp1h, zp1l
.1583	85 fd		          sta  zpage2    ; get zpage2 High byte
.1585	68		          pla            ; stack : zp1l
.1586	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.1588	68		          pla            ; stack :
.1589	85 fb		          sta  zpage1    ; get zpage1 High byte
.158b	ad a0 15	          lda  pc+1      ; get pch
.158e	48		          pha            ; stack : pch
.158f	ad 9f 15	          lda  pc
.1592	48		          pha            ; stack : pcl, pch
.1593	ad 9d 15	          lda  rp        ; get rp
.1596	48		          pha            ; stack : rp, pcl, pch
.1597	ad 9e 15	          lda  ra        ; set ra
.159a	58		          cli
.159b	28		          plp            ; stack : pcl, pch
.159c	60		          rts
>159d	00		rp        .byte     0
>159e	00		ra        .byte     0
>159f	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.15a1			blkfill
.15a1	20 2b 15	bf0            jsr  push
.15a4	20 62 16	               jsr  savezp1
.15a7	84 fc		               sty  zpage1+1
.15a9	a0 00		               ldy  #$00
.15ab	84 fb		               sty  zpage1
.15ad	91 fb		bf1            sta  (zpage1),y
.15af	c8		               iny
.15b0	d0 fb		               bne  bf1
.15b2	20 71 16	               jsr  restzp1
.15b5	20 6a 15	               jsr  pop
.15b8	60		               rts
.15b9			memfill
.15b9	20 2b 15	               jsr  push
.15bc	20 a1 15	mf1            jsr  blkfill
.15bf	c8		               iny
.15c0	ca		               dex
.15c1	d0 f9		               bne  mf1
.15c3	20 6a 15	               jsr  pop
.15c6	60		               rts
.15c7			memmove
.15c7	20 2b 15	               jsr  push
.15ca	ba		               tsx            ; On se crée un pointeur ...
.15cb	8a		               txa
.15cc	18		               clc
.15cd	69 0b		               adc  #11
.15cf	a8		               tay
.15d0	a2 06		               ldx  #$06
.15d2	b9 00 01	nextbyte       lda  $0100,y
.15d5	99 21 16	               sta  words,y
.15d8	c8		               iny
.15d9	ca		               dex
.15da	d0 f6		               bne  nextbyte
.15dc	ad 21 16	               lda  s
.15df	8d f8 15	               sta  source+1
.15e2	ad 22 16	               lda  s+1
.15e5	8d f9 15	               sta  source+2
.15e8	ad 23 16	               lda  d
.15eb	8d f5 15	               sta  destin+1
.15ee	ad 24 16	               lda  d+1
.15f1	8d f6 15	               sta  destin+2
.15f4	ad ff ff	destin         lda  $ffff
.15f7	8d ff ff	source         sta  $ffff
.15fa	ee f5 15	               inc  destin+1
.15fd	d0 03		               bne  src
.15ff	ee f6 15	               inc  destin+2
.1602	ee f8 15	src            inc  source+1
.1605	d0 03		               bne  cnt
.1607	ee f9 15	               inc  source+2
.160a	ad 25 16	cnt            lda  compte
.160d	d0 08		               bne  decit
.160f	ad 26 16	               lda  compte+1
.1612	f0 09		               beq  fini
.1614	ce 26 16	               dec  compte+1
.1617	ce 25 16	decit          dec  compte
.161a	4c f4 15	               jmp  destin
.161d	20 6a 15	fini           jsr  pop
.1620	60		               rts
.1621			words
>1621	00 00		s         .word     $0000
>1623	00 00		d         .word     $0000
>1625	00 00		compte    .word     $0000
.1627			decword
.1627	20 2b 15	               jsr  push
.162a	86 fd		               stx  zpage2
.162c	84 fe		               sty  zpage2+1
.162e	20 6a 15	               jsr  pop
.1631	60		               rts
.1632			inczp1
.1632	08		               php
.1633	48		               pha
.1634	e6 fb		               inc  zpage1
.1636	a5 fb		               lda  zpage1
.1638	d0 02		               bne  nopage
.163a	e6 fc		               inc  zpage1+1
.163c	68		nopage         pla
.163d	28		               plp
.163e	60		               rts
.163f			deczp1
.163f	08		                php
.1640	48		                pha
.1641	c6 fb		                dec  zpage1
.1643	d0 02		                bne  nopage
.1645	c6 fc		                dec  zpage1+1
.1647	68		nopage          pla
.1648	28		                plp
.1649	60		                rts
.164a			inczp2
.164a	08		               php
.164b	48		               pha
.164c	e6 fd		               inc  zpage2
.164e	a5 fd		               lda  zpage2
.1650	d0 02		               bne  nopage
.1652	e6 fe		               inc  zpage2+1
.1654	68		nopage         pla
.1655	28		               plp
.1656	60		               rts
.1657			deczp2
.1657	08		               php
.1658	48		               pha
.1659	a5 fd		               lda  zpage2
.165b	d0 02		               bne  nopage
.165d	c6 fe		               dec  zpage2+1
.165f	68		nopage         pla
.1660	28		               plp
.1661	60		               rts
.1662			savezp1
.1662	08		               php
.1663	48		               pha
.1664	a5 fb		               lda  zpage1
.1666	8d de 16	               sta  zp1
.1669	a5 fc		               lda  zpage1+1
.166b	8d df 16	               sta  zp1+1
.166e	68		               pla
.166f	28		               plp
.1670	60		               rts
.1671			restzp1
.1671	08		               php
.1672	48		               pha
.1673	ad de 16	               lda zp1
.1676	85 fb		               sta zpage1
.1678	ad df 16	               lda zp1+1
.167b	85 fc		               sta zpage1+1
.167d	68		               pla
.167e	28		               plp
.167f	60		               rts
.1680			savezp2
.1680	08		         php
.1681	48		         pha
.1682	a5 fd		         lda zpage2
.1684	8d e0 16	         sta zp2
.1687	a5 fe		         lda zpage2+1
.1689	8d e1 16	         sta zp2+1
.168c	68		         pla
.168d	28		         plp
.168e	60		         rts
.168f			restzp2
.168f	08		                php
.1690	48		                pha
.1691	ad e0 16	                lda  zp2
.1694	85 fd		                sta  zpage2
.1696	ad e1 16	                lda  zp2+1
.1699	85 fe		                sta  zpage2+1
.169b	68		                pla
.169c	28		                plp
.169d	60		                rts
.169e			xy2addr
.169e	08		                php
.169f	48		                pha
.16a0	8a		                txa
.16a1	48		                pha
.16a2	98		                tya
.16a3	48		                pha
.16a4	ad d9 16	                lda     addr1+1
.16a7	8d db 16	                sta     addr2+1
.16aa	ad d8 16	                lda     addr1
.16ad	8d da 16	                sta     addr2
.16b0	c0 00		                cpy     #$00
.16b2	f0 0f		                beq     addx
.16b4	18		moreline        clc
.16b5	6d d7 16	                adc     ymult
.16b8	90 03		                bcc     norepy
.16ba	ee db 16	                inc     addr2+1
.16bd	8d da 16	norepy          sta     addr2
.16c0	88		                dey
.16c1	d0 f1		                bne     moreline
.16c3	8a		addx            txa
.16c4	18		                clc
.16c5	6d da 16	                adc     addr2
.16c8	90 03		                bcc     thatsit
.16ca	ee db 16	                inc     addr2+1
.16cd	8d da 16	thatsit         sta     addr2
.16d0	68		                pla
.16d1	a8		                tay
.16d2	68		                pla
.16d3	aa		                tax
.16d4	68		                pla
.16d5	28		                plp
.16d6	60		                rts
>16d7	28		ymult          .byte     40
>16d8	00 00		addr1          .word     $0000
>16da	00 00		addr2          .word     $0000
>16dc	00 00		bytecnt        .word     $0000
>16de	00 00		zp1        .word   $0000
>16e0	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>16e2	01		a2hexcol       .byte     1              ; pour aputscxy
>16e3	00		a2hexbkcol     .byte     %00000000
.16e4			a2hexpos
>16e4	00		a2hexpx        .byte     0              ; pour aputsxy
>16e5	00		a2hexpy        .byte     0
>16e6	24		a2hexprefix    .byte     "$"            ; pour aputs
>16e7	00 00		a2hexstr       .word     $00
>16e9	00 00		               .word     $00
>16eb	00		               .byte     0              ; 0 end string
.16ec			putahexfmtxy
.16ec	20 2b 15	               jsr  push
.16ef	20 3b 17	               jsr  a2hex
.16f2	ae e4 16	               ldx  a2hexpx
.16f5	ac e5 16	               ldy  a2hexpy
.16f8	20 54 14	               jsr  gotoxy
.16fb	a2 e6		               ldx  #<a2hexprefix
.16fd	a0 16		               ldy  #>a2hexprefix
.16ff	20 3a 14	               jsr  puts
.1702	20 6a 15	               jsr  pop
.1705	60		               rts
.1706			putahexfmt
.1706	20 2b 15	               jsr  push
.1709	20 3b 17	               jsr  a2hex
.170c	a2 e6		               ldx  #<a2hexprefix
.170e	a0 16		               ldy  #>a2hexprefix
.1710	20 3a 14	               jsr  puts
.1713	20 6a 15	               jsr  pop
.1716	60		               rts
.1717			putahex
.1717	20 2b 15	               jsr  push
.171a	20 3b 17	               jsr  a2hex
.171d	a2 e7		               ldx  #<a2hexstr
.171f	a0 16		               ldy  #>a2hexstr
.1721	20 3a 14	               jsr  puts
.1724	20 6a 15	               jsr  pop
.1727	60		               rts
.1728			nib2hex
.1728	08		               php
.1729	29 0f		               and  #$0f
.172b	f8		               sed
.172c	18		               clc
.172d	69 90		               adc  #$90
.172f	69 40		               adc  #$40
.1731	d8		               cld
.1732	28		               plp
.1733	60		               rts
.1734			lsra4bits
.1734	08		               php
.1735	4a		               lsr
.1736	4a		               lsr
.1737	4a		               lsr
.1738	4a		               lsr
.1739	28		               plp
.173a	60		               rts
.173b			a2hex
.173b	08		               php
.173c	48		               pha
.173d	48		               pha
.173e	20 34 17	               jsr  lsra4bits
.1741	20 28 17	               jsr  nib2hex
.1744	8d e7 16	               sta  a2hexstr
.1747	68		               pla
.1748	20 28 17	               jsr  nib2hex
.174b	8d e8 16	               sta  a2hexstr+1
.174e	a9 00		               lda  #$00                ; set end of string
.1750	8d e9 16	               sta  a2hexstr+2
.1753	68		               pla
.1754	28		               plp
.1755	60		               rts
.1756			xy2hex
.1756	20 2b 15	               jsr  push
.1759	20 3b 17	               jsr  a2hex
.175c	8a		               txa
.175d	48		               pha
.175e	20 34 17	               jsr  lsra4bits
.1761	20 28 17	               jsr  nib2hex
.1764	8d e7 16	               sta  a2hexstr
.1767	68		               pla
.1768	20 28 17	               jsr  nib2hex
.176b	8d e8 16	               sta  a2hexstr+1
.176e	98		               tya
.176f	48		               pha
.1770	20 34 17	               jsr  lsra4bits
.1773	20 28 17	               jsr  nib2hex
.1776	8d e9 16	               sta  a2hexstr+2
.1779	68		               pla
.177a	20 28 17	               jsr  nib2hex
.177d	8d ea 16	               sta  a2hexstr+3
.1780	a9 00		               lda  #$00                ; 0 ended string
.1782	8d eb 16	               sta  a2hexstr+4
.1785	20 6a 15	               jsr  pop
.1788			atobin
.1788	20 2b 15	               jsr     push
.178b	a2 08		               ldx     #8
.178d	a0 00		               ldy     #0
.178f	2a		nextbit        rol
.1790	48		               pha
.1791	69 00		               adc     #$00
.1793	29 01		               and     #$01
.1795	20 28 17	               jsr     nib2hex
.1798	99 a9 17	               sta     abin,y
.179b	68		               pla
.179c	c8		               iny
.179d	ca		               dex
.179e	d0 ef		               bne     nextbit
.17a0	a9 00		               lda     #0
.17a2	99 a9 17	               sta     abin,y
.17a5	20 6a 15	               jsr     pull
.17a8	60		               rts
>17a9	30 30 30 30	abin           .null   "00000000"
>17ad	30 30 30 30 00
.17b2			putabin
.17b2	20 88 17	               jsr     atobin
.17b5	20 2b 15	               jsr     push
.17b8	a2 a9		               ldx     #<abin
.17ba	a0 17		               ldy     #>abin
.17bc	20 3a 14	               jsr     puts
.17bf	20 6a 15	               jsr     pop
.17c2	60		               rts
.17c3			putabinfmt
.17c3	08		               php
.17c4	48		               pha
.17c5	a9 25		               lda     #"%"
.17c7	20 34 14	               jsr     putch
.17ca	68		               pla
.17cb	20 b2 17	               jsr     putabin
.17ce	28		               plp
.17cf	60		               rts
.17d0			putabinxy
.17d0	20 54 14	               jsr     gotoxy
.17d3	20 b2 17	               jsr     putabin
.17d6	60		               rts
.17d7			putabinfmtxy
.17d7	20 54 14	               jsr     gotoxy
.17da	20 c3 17	               jsr     putabinfmt
.17dd	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a     =    $41
=$42			key_b     =    $42
=$43			key_c     =    $43
=$44			key_d     =    $44
=$45			key_e     =    $45
=$46			key_f     =    $46
=$47			key_g     =    $47
=$48			key_h     =    $48
=$49			key_i     =    $49
=$4a			key_j     =    $4a
=$4b			key_k     =    $4b
=$4c			key_l     =    $4c
=$4d			key_m     =    $4d
=$4e			key_n     =    $4e
=$4f			key_o     =    $4f
=$50			key_p     =    $50
=$51			key_q     =    $51
=$52			key_r     =    $52
=$53			key_s     =    $53
=$54			key_t     =    $54
=$55			key_u     =    $55
=$56			key_v     =    $56
=$57			key_w     =    $57
=$58			key_x     =    $58
=$59			key_y     =    $59
=$5a			key_z     =    $5a
=$c1			shift_a   =    $c1
=$c2			shift_b   =    $c2
=$c3			shift_c   =    $c3
=$c4			shift_d   =    $c4
=$c5			shift_e   =    $c5
=$c6			shift_f   =    $c6
=$c7			shift_g   =    $c7
=$c8			shift_h   =    $c8
=$c9			shift_i   =    $c9
=$ca			shift_j   =    $ca
=$cb			shift_k   =    $cb
=$cc			shift_l   =    $cc
=$cd			shift_m   =    $cd
=$ce			shift_n   =    $ce
=$cf			shift_o   =    $cf
=$d0			shift_p   =    $d0
=$d1			shift_q   =    $d1
=$d2			shift_r   =    $d2
=$d3			shift_s   =    $d3
=$d4			shift_t   =    $d4
=$d5			shift_u   =    $d5
=$d6			shift_v   =    $d6
=$d7			shift_w   =    $d7
=$d8			shift_x   =    $d8
=$d9			shift_y   =    $d9
=$da			shift_z   =    $da
=$01			ctrl_a    =    $01
=$02			ctrl_b    =    $02
=$03			ctrl_c    =    $03
=$04			ctrl_d    =    $04
=$05			ctrl_e    =    $05
=$06			ctrl_f    =    $06
=$07			ctrl_g    =    $07
=$08			ctrl_h    =    $08
=$09			ctrl_i    =    $09
=$0a			ctrl_j    =    $0a
=$0b			ctrl_k    =    $0b
=$0c			ctrl_l    =    $0c
=$0d			ctrl_m    =    $0d
=$0e			ctrl_n    =    $0e
=$0f			ctrl_o    =    $0f
=$10			ctrl_p    =    $10
=$11			ctrl_q    =    $11
=$12			ctrl_r    =    $12
=$13			ctrl_s    =    $13
=$14			ctrl_t    =    $14
=$15			ctrl_u    =    $15
=$16			ctrl_v    =    $16
=$17			ctrl_w    =    $17
=$18			ctrl_x    =    $18
=$19			ctrl_y    =    $19
=$1a			ctrl_z    =    $1a
=$b0			comd_a    =    $b0
=$bf			comd_b    =    $bf
=$bc			comd_c    =    $bc
=$ac			comd_d    =    $ac
=$b1			comd_e    =    $b1
=$bb			comd_f    =    $bb
=$a5			comd_g    =    $a5
=$b4			comd_h    =    $b4
=$a2			comd_i    =    $a2
=$b5			comd_j    =    $b5
=$a1			comd_k    =    $a1
=$b6			comd_l    =    $b6
=$a7			comd_m    =    $a7
=$aa			comd_n    =    $aa
=$b9			comd_o    =    $b9
=$af			comd_p    =    $af
=$ab			comd_q    =    $ab
=$b2			comd_r    =    $b2
=$ae			comd_s    =    $ae
=$a3			comd_t    =    $a3
=$b8			comd_u    =    $b8
=$be			comd_v    =    $be
=$b3			comd_w    =    $b3
=$bd			comd_x    =    $bd
=$b7			comd_y    =    $b7
=$ad			comd_z    =    $ad
>17de	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>17e2	00 00 00 00 00 00 00 00 00 0d 00 00
>17ee	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>17f2	00 00 00 00 00 00 00 00 00 00 00 00
>17fe	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>1802	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>180e	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1812	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>181e	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1822	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>182e	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1832	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>183e	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1842	00 00 00 00 00 00 00 00 00 00 00 00
>184e	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1852	00 00 00 00 00 00 00 00 00 00 00 00
>185e	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1862	00 00 00 00 00 00 00 00 00 00 00 00
>186e	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1872	00 00 00 00 00 00 00 00 00 00 00 00
>187e	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>1882	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>188e	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1892	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>189e	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>18a2	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>18ae	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>18b2	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>18be	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>18c2	00 00 00 00 00 00 00 00 00 00 00 00
>18ce	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>18d2	00 00 00 00 00 00 00 00 00 00 00 00
.18de			waitstop
.18de	20 2b 15	               jsr  push
.18e1	20 ed f6	wait           jsr  k_stop
.18e4	d0 fb		               bne  wait
.18e6	20 6a 15	               jsr  pop
.18e9	60		               rts
.18ea			anykey
.18ea	08		               php
.18eb	48		               pha
.18ec	a5 cb		nokey          lda 203
.18ee	c9 40		               cmp #64
.18f0	f0 fa		               beq nokey
.18f2	20 f8 18	               jsr releasekey
.18f5	68		               pla
.18f6	28		               plp
.18f7	60		               rts
.18f8			releasekey
.18f8	08		               php
.18f9	48		               pha
.18fa	a5 cb		keypressed     lda 203
.18fc	c9 40		               cmp #64
.18fe	d0 fa		               bne keypressed
.1900	68		               pla
.1901	28		               plp
.1902	60		               rts
.1903			getkey
.1903	20 e4 ff	again          jsr  getin
.1906	c9 00		               cmp  #0
.1908	f0 f9		               beq  again
.190a	60		               rts
.190b			waitkey
.190b	20 2b 15	               jsr  push
.190e	8d 5c 19	               sta  thekey
.1911	20 e4 ff	nope           jsr  getin
.1914	20 d2 ff	               jsr  chrout
.1917	cd 5c 19	               cmp  thekey
.191a	d0 f5		               bne  nope
.191c	20 d2 ff	               jsr  chrout
.191f	20 6a 15	               jsr  pop
.1922	60		               rts
.1923			waitspace
.1923	20 2b 15	               jsr  push
.1926	a9 7f		wait           lda  #$7f  ;%01111111
.1928	8d 00 dc	               sta  $dc00
.192b	ad 01 dc	               lda  $dc01
.192e	29 10		               and  #$10  ;mask %00010000
.1930	d0 f4		               bne  wait
.1932	20 6a 15	               jsr  pop
.1935			waitsstop
.1935	20 2b 15	               jsr  push
.1938	20 ed f6	wait           jsr  k_stop  ;%01111111
.193b	d0 fb		               bne  wait
.193d	20 6a 15	               jsr  pop
.1940			waitreturn
.1940	20 2b 15	               jsr  push
.1943	ad 5d 19	               lda  thecount
.1946	8d 00 04	               sta  scrnram
.1949	a9 02		               lda  #$02
.194b	8d 00 d8	               sta  colorram
.194e	20 e4 ff	nope           jsr  getin
.1951	c9 0d		nohex          cmp  #$0d
.1953	d0 f9		               bne  nope
.1955	ee 5d 19	               inc  thecount
.1958	20 6a 15	               jsr  pop
.195b	60		               rts
>195c	00		thekey         .byte   0
>195d	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  End of listing

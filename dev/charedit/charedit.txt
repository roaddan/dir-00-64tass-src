
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Thu Nov 16 09:45:31 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm

="20231115-164208"	version  = "20231115-164208"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

=$0400			scrnnewram     =    $0400
=14			charsdef       =    14
=9			grid_top       =    9
=1			grid_left      =    1
=16			grid_bot       =    grid_top + 7
=8			grid_right     =    grid_left + 7
=$03			mesgcol        =    vcyan
=$01			menu1col1      =    vblanc   ;vvert1
=$0f			menu1col2      =    vgris2     ;vvert
=$01			menu2col1      =    vblanc
=$0f			menu2col2      =    vgris2
=$01			flashcol       =    vblanc
=$07			whoamicol      =    vjaune
=$0d			charcolor      =    vvert1
=$0c			charscolor     =    vgris1
.080d			main
.080d	20 b5 1f	               jsr  push
.0810	20 87 1e	               jsr  scrmaninit
.0813	08		               php
.0814	48		               pha
.0815	a9 08		               lda  #$08
.0817	20 d2 ff	               jsr  $ffd2
.081a	68		               pla
.081b	28		               plp
.081c	20 5a 09	               jsr  splashscreen
.081f			wait
.081f	20 07 0f	               jsr  copycharset
.0822	20 6d 1e	               jsr  screendis
.0825	20 a7 1e	               jsr  cls
.0828	20 f1 0e	               jsr  setscreenptr
.082b	20 b9 09	               jsr  setdefaultchar
.082e	20 68 0f	               jsr  staticscreen
.0831	20 34 0e	               jsr  drawbitmap
.0834	a9 00		               lda  #$00
.0836	8d 46 09	               sta  fkeyset
.0839	20 a4 0f	               jsr  drawfkeys
.083c	20 80 16	               jsr  f8action
.083f	20 80 16	               jsr  f8action
.0842	a9 00		               lda  #$00
.0844	20 7a 1e	               jsr  screenena
.0847	20 ca 0b	               jsr  keyaction
.084a	20 a7 1e	               jsr  cls
.084d	20 5a 09	               jsr  splashscreen
.0850	20 a7 1e	               jsr  cls
.0853	20 f4 1f	               jsr  pop
.0856	60		               rts
.0857			copychar
.0857	20 b5 1f	               jsr  push
.085a	20 93 08	               jsr  getvalidkey
.085d	ad 66 0f	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0860	85 fb		               sta  zpage1
.0862	ad 67 0f	               lda  bitmapaddr+1
.0865	85 fc		               sta  zpage1+1
.0867	ae c9 08	               ldx  copykey
.086a	bd b0 22	               lda  asciitorom,x
.086d	aa		               tax
.086e	e0 00		               cpx  #$00
.0870	f0 08		               beq  no_offset      ; sommes nous déja à 0
.0872	a9 08		addagain       lda  #$08
.0874	20 f2 10	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0877	ca		               dex                 ; pour chaque caracteres
.0878	d0 f8		               bne  addagain
.087a	ad 4b 09	no_offset      lda  mapaddr        ; le caractere actuel
.087d	85 fd		               sta  zpage2         ;
.087f	ad 4c 09	               lda  mapaddr+1      ;
.0882	85 fe		               sta  zpage2+1       ;
.0884	a0 00		               ldy  #$00
.0886	b1 fb		nextbyte       lda  (zpage1),y
.0888	91 fd		               sta  (zpage2),y
.088a	c8		               iny
.088b	c0 08		               cpy  #$08
.088d	d0 f7		               bne  nextbyte
.088f	20 f4 1f	out            jsr  pop
.0892	60		               rts
.0893			thismapaddr
.0893			getvalidkey
.0893	20 b5 1f	               jsr  push
.0896	20 b5 1f	               jsr  push
.0899	a2 9b		               ldx  #<blankmsg
.089b	a0 18		               ldy  #>blankmsg
.089d	20 4d 1f	               jsr  putscxy
.08a0	a2 8c		               ldx  #<copychar_msg
.08a2	a0 1a		               ldy  #>copychar_msg
.08a4	20 4d 1f	               jsr  putscxy
.08a7	20 f4 1f	               jsr  pop
.08aa	20 d5 23	getgoodkey     jsr  getkey
.08ad	8d c9 08	               sta  copykey
.08b0	aa		               tax
.08b1	bc b0 22	               ldy  asciitorom,x
.08b4	c4 00		               cpy  $00
.08b6	d0 0a		               bne  goodone
.08b8	ae c9 08	               ldx  copykey
.08bb	e0 40		               cpx  #$40
.08bd	f0 03		               beq  goodone
.08bf	4c aa 08	               jmp  getgoodkey
.08c2	20 be 1e	goodone        jsr  putch
.08c5	20 f4 1f	               jsr  pop
.08c8	60		               rts
>08c9	00		copykey        .byte 0
.08ca			getfname
.08ca	20 b5 1f	               jsr  push
.08cd	20 b5 1f	               jsr  push
.08d0	a2 9b		               ldx  #<blankmsg
.08d2	a0 18		               ldy  #>blankmsg
.08d4	20 4d 1f	               jsr  putscxy
.08d7	a2 b5		               ldx  #<fname_msg
.08d9	a0 1a		               ldy  #>fname_msg
.08db	20 4d 1f	               jsr  putscxy
.08de	20 f4 1f	               jsr  pop
.08e1	a2 00		               ldx  #$00
.08e3	8e 2a 09	               stx  count
.08e6	20 d5 23	getanother     jsr  getkey
.08e9	c9 30		               cmp  #$30      ; 0
.08eb	30 f9		               bmi  getanother
.08ed	c9 3a		               cmp  #$3a      ; 9+1
.08ef	30 0b		               bmi  goodone
.08f1	c9 41		isitletter     cmp  #$41      ; A
.08f3	30 f1		               bmi  getanother
.08f5	c9 5b		               cmp  #$5b      ; Z+1
.08f7	30 03		               bmi  goodone
.08f9	4c e6 08	               jmp  getanother
.08fc	20 be 1e	goodone        jsr  putch
.08ff	ae 2a 09	               ldx  count
.0902	9d 31 09	               sta  name,x
.0905	ee 2a 09	               inc  count
.0908	ae 2a 09	               ldx  count
.090b	e0 06		               cpx  #$06
.090d	f0 03		               beq  finish
.090f	4c e6 08	               jmp  getanother
.0912			finish
.0912	20 b5 1f	               jsr  push
.0915	a2 9b		               ldx  #<blankmsg
.0917	a0 18		               ldy  #>blankmsg
.0919	20 4d 1f	               jsr  putscxy
.091c	a2 2b		               ldx  #<pfname
.091e	a0 09		               ldy  #>pfname
.0920	20 4d 1f	               jsr  putscxy
.0923	20 f4 1f	               jsr  pop
.0926	20 f4 1f	               jsr  pop
.0929	60		               rts
>092a	00		count          .byte     0
>092b	01 01 05	pfname         .byte     1,1,5
>092e	40 30 3a	fname          .text     "@0:"
>0931	3f 3f 3f 3f	name           .text     "??????"
>0935	3f 3f
>0937	2e 43 48 52	ext            .null     ".chr"
>093b	00
>093c	00		device         .byte     0
>093d	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>0941	08 04 02 01
>0945	00		editmode       .byte     0
>0946	00		fkeyset        .byte     0
>0947	00		currentchar    .byte     0
>0948	00		currentkey     .byte     0
>0949	00		previouskey    .byte     0
>094a	00		bitmapoffset   .byte     0
>094b	00 00		mapaddr        .word     0
>094d	00 00		byteaddr       .word     0
>094f	00 00		gridaddr       .word     0
>0951	09		cursln         .byte     grid_top
>0952	01		curscl         .byte     grid_left

;******  Processing file: routines.asm

.0953			template
.0953	20 b5 1f	               jsr  push
.0956	20 f4 1f	               jsr  pop
.0959	60		               rts
.095a			splashscreen
.095a	20 b5 1f	               jsr  push
.095d	20 a7 1e	               jsr  cls
.0960	a2 14		               ldx #<whoami0
.0962	a0 1b		               ldy #>whoami0
.0964	20 4d 1f	               jsr putscxy
.0967	a2 39		               ldx #<whoami1
.0969	a0 1b		               ldy #>whoami1
.096b	20 4d 1f	               jsr putscxy
.096e	a2 60		               ldx #<whoami2
.0970	a0 1b		               ldy #>whoami2
.0972	20 4d 1f	               jsr putscxy
.0975	a2 85		               ldx #<whoami3
.0977	a0 1b		               ldy #>whoami3
.0979	20 4d 1f	               jsr putscxy
.097c	a2 aa		               ldx #<whoami4
.097e	a0 1b		               ldy #>whoami4
.0980	20 4d 1f	               jsr putscxy
.0983	a2 cf		               ldx #<whoami5
.0985	a0 1b		               ldy #>whoami5
.0987	20 4d 1f	               jsr putscxy
.098a	a2 f4		               ldx #<whoami6
.098c	a0 1b		               ldy #>whoami6
.098e	20 4d 1f	               jsr putscxy
.0991	a2 19		               ldx #<whoami7
.0993	a0 1c		               ldy #>whoami7
.0995	20 4d 1f	               jsr putscxy
.0998	a2 3e		               ldx #<whoami8
.099a	a0 1c		               ldy #>whoami8
.099c	20 4d 1f	               jsr putscxy
.099f	a2 63		               ldx #<whoami9
.09a1	a0 1c		               ldy #>whoami9
.09a3	20 4d 1f	               jsr putscxy
.09a6	20 10 11	               jsr  delay
.09a9	20 10 11	               jsr  delay
.09ac	20 10 11	               jsr  delay
.09af	20 10 11	               jsr  delay
.09b2	20 10 11	               jsr  delay
.09b5	20 f4 1f	               jsr  pop
.09b8	60		               rts
.09b9			setdefaultchar
.09b9	20 b5 1f	               jsr  push
.09bc	a9 40		               lda  #$40
.09be	8d 48 09	               sta  currentkey
.09c1	aa		               tax
.09c2	bc b0 22	               ldy  asciitorom,x
.09c5	8c 4a 09	               sty  bitmapoffset
.09c8	20 83 0a	               jsr  drawkeyval
.09cb	20 34 0e	               jsr  drawbitmap
.09ce	20 b5 1f	               jsr  push
.09d1	a2 0d		               ldx  #13
.09d3	a0 0c		               ldy  #12
.09d5	20 de 1e	               jsr  gotoxy
.09d8	20 f4 1f	               jsr  pop
.09db	20 be 1e	               jsr  putch
.09de	20 b5 1f	               jsr  push
.09e1	a2 11		               ldx  #17
.09e3	a0 05		               ldy  #5
.09e5	20 de 1e	               jsr  gotoxy
.09e8	20 f4 1f	               jsr  pop
.09eb	20 7b 22	               jsr  atodec
.09ee	20 b5 1f	               jsr  push
.09f1	a2 7f		isx            ldx  #<adec
.09f3	a0 21		isy            ldy  #>adec
.09f5	20 c4 1e	               jsr  puts
.09f8	20 f4 1f	               jsr  pull
.09fb	20 f4 1f	               jsr  pop
.09fe	60		               rts
.09ff			resetmenuacolor
.09ff	20 b5 1f	               jsr  push
.0a02	a9 01		               lda  #menu1col1
.0a04	8d cd 1c	               sta  f1abutton
.0a07	8d 01 1d	               sta  f3abutton
.0a0a	8d 35 1d	               sta  f5abutton
.0a0d	8d 69 1d	               sta  f7abutton
.0a10	a9 0f		               lda  #menu2col2
.0a12	8d e7 1c	               sta  f2abutton
.0a15	8d 1b 1d	               sta  f4abutton
.0a18	8d 4f 1d	               sta  f6abutton
.0a1b	8d 83 1d	               sta  f8abutton
.0a1e	20 f4 1f	               jsr  pop
.0a21	60		               rts
.0a22			resetmenubcolor
.0a22	20 b5 1f	               jsr  push
.0a25	a9 01		               lda  #menu2col1
.0a27	8d 9d 1d	               sta  f1bbutton
.0a2a	8d d1 1d	               sta  f3bbutton
.0a2d	8d 05 1e	               sta  f5bbutton
.0a30	8d 39 1e	               sta  f7bbutton
.0a33	a9 01		               lda  #menu2col1
.0a35	8d b7 1d	               sta  f2bbutton
.0a38	8d eb 1d	               sta  f4bbutton
.0a3b	8d 1f 1e	               sta  f6bbutton
.0a3e	8d 53 1e	               sta  f8bbutton
.0a41	20 f4 1f	               jsr  pop
.0a44	60		               rts
.0a45			setmenuacolor
.0a45	20 b5 1f	               jsr  push
.0a48	8d cd 1c	               sta  f1abutton
.0a4b	8d e7 1c	               sta  f2abutton
.0a4e	8d 01 1d	               sta  f3abutton
.0a51	8d 1b 1d	               sta  f4abutton
.0a54	8d 35 1d	               sta  f5abutton
.0a57	8d 4f 1d	               sta  f6abutton
.0a5a	8d 69 1d	               sta  f7abutton
.0a5d	8d 83 1d	               sta  f8abutton
.0a60	20 f4 1f	               jsr  pop
.0a63	60		               rts
.0a64			setmenubcolor
.0a64	20 b5 1f	               jsr  push
.0a67	8d 9d 1d	               sta  f1bbutton
.0a6a	8d b7 1d	               sta  f2bbutton
.0a6d	8d d1 1d	               sta  f3bbutton
.0a70	8d eb 1d	               sta  f4bbutton
.0a73	8d 05 1e	               sta  f5bbutton
.0a76	8d 1f 1e	               sta  f6bbutton
.0a79	8d 39 1e	               sta  f7bbutton
.0a7c	8d 53 1e	               sta  f8bbutton
.0a7f	20 f4 1f	               jsr  pop
.0a82	60		               rts
.0a83			drawkeyval
.0a83	20 b5 1f	               jsr  push
.0a86	20 b5 1f	               jsr  push
.0a89	a2 01		               ldx  #1
.0a8b	a0 13		               ldy  #19
.0a8d	20 de 1e	               jsr  gotoxy
.0a90	20 f4 1f	               jsr  pop
.0a93	ad 48 09	               lda  currentkey
.0a96	20 be 1e	               jsr  putch
.0a99	48		               pha
.0a9a	a9 3d		               lda  #'='
.0a9c	20 be 1e	               jsr  putch
.0a9f	a9 25		               lda  #'%'
.0aa1	20 be 1e	               jsr  putch
.0aa4	68		               pla
.0aa5	20 41 22	               jsr  putabin
.0aa8	20 b5 1f	               jsr  push
.0aab	a2 01		               ldx  #1
.0aad	a0 14		               ldy  #20
.0aaf	20 de 1e	               jsr  gotoxy
.0ab2	20 f4 1f	               jsr  pop
.0ab5	20 b5 1f	               jsr  push
.0ab8	a2 84		isx            ldx  #<txt1
.0aba	a0 0b		isy            ldy  #>txt1
.0abc	20 c4 1e	               jsr  puts
.0abf	20 f4 1f	               jsr  pull
.0ac2	a9 24		               lda  #'$'
.0ac4	20 be 1e	               jsr  putch
.0ac7	ad 48 09	               lda  currentkey
.0aca	20 ae 21	               jsr  putahex
.0acd	20 b5 1f	               jsr  push
.0ad0	a2 01		               ldx  #1
.0ad2	a0 15		               ldy  #21
.0ad4	20 de 1e	               jsr  gotoxy
.0ad7	20 f4 1f	               jsr  pop
.0ada	20 b5 1f	               jsr  push
.0add	a2 8f		isx            ldx  #<txt2
.0adf	a0 0b		isy            ldy  #>txt2
.0ae1	20 c4 1e	               jsr  puts
.0ae4	20 f4 1f	               jsr  pull
.0ae7	a9 24		               lda  #'$'
.0ae9	20 be 1e	               jsr  putch
.0aec	ad 67 0f	               lda  bitmapaddr+1
.0aef	20 ae 21	               jsr  putahex
.0af2	ad 66 0f	               lda  bitmapaddr
.0af5	20 ae 21	               jsr  putahex
.0af8	20 b5 1f	               jsr  push
.0afb	a2 01		               ldx  #1
.0afd	a0 16		               ldy  #22
.0aff	20 de 1e	               jsr  gotoxy
.0b02	20 f4 1f	               jsr  pop
.0b05	20 b5 1f	               jsr  push
.0b08	a2 9a		isx            ldx  #<txt3
.0b0a	a0 0b		isy            ldy  #>txt3
.0b0c	20 c4 1e	               jsr  puts
.0b0f	20 f4 1f	               jsr  pull
.0b12	a9 24		               lda  #'$'
.0b14	20 be 1e	               jsr  putch
.0b17	ad 4a 09	               lda  bitmapoffset
.0b1a	20 ae 21	               jsr  putahex
.0b1d	20 b5 1f	               jsr  push
.0b20	a2 01		               ldx  #1
.0b22	a0 17		               ldy  #23
.0b24	20 de 1e	               jsr  gotoxy
.0b27	20 f4 1f	               jsr  pop
.0b2a	20 b5 1f	               jsr  push
.0b2d	a2 a7		isx            ldx  #<txt4
.0b2f	a0 0b		isy            ldy  #>txt4
.0b31	20 c4 1e	               jsr  puts
.0b34	20 f4 1f	               jsr  pull
.0b37	a9 24		               lda  #'$'
.0b39	20 be 1e	               jsr  putch
.0b3c	ad 4c 09	               lda  mapaddr+1
.0b3f	20 ae 21	               jsr  putahex
.0b42	ad 4b 09	               lda  mapaddr
.0b45	20 ae 21	               jsr  putahex
.0b48	20 b5 1f	               jsr  push
.0b4b	a2 01		               ldx  #1
.0b4d	a0 18		               ldy  #24
.0b4f	20 de 1e	               jsr  gotoxy
.0b52	20 f4 1f	               jsr  pop
.0b55	20 b5 1f	               jsr  push
.0b58	a2 b2		isx            ldx  #<txt5
.0b5a	a0 0b		isy            ldy  #>txt5
.0b5c	20 c4 1e	               jsr  puts
.0b5f	20 f4 1f	               jsr  pull
.0b62	ad 52 09	               lda  curscl
.0b65	20 ae 21	               jsr  putahex
.0b68	a9 da		               lda  #$da
.0b6a	20 be 1e	               jsr  putch
.0b6d	ad 51 09	               lda  cursln
.0b70	20 ae 21	               jsr  putahex
.0b73	20 f4 1f	               jsr  pop
.0b76	60		               rts
>0b77	50 45 54 53	txt0           .null     "petscii :   "
>0b7b	43 49 49 20 3a 20 20 20 00
>0b84	4b 45 59 20	txt1           .null     "key code: "
>0b88	43 4f 44 45 3a 20 00
>0b8f	42 49 54 4d	txt2           .null     "bitmap..: "
>0b93	41 50 2e 2e 3a 20 00
>0b9a	4f 46 46 53	txt3           .null     "offset..:   "
>0b9e	45 54 2e 2e 3a 20 20 20 00
>0ba7	4d 41 50 41	txt4           .null     "mapaddr.: "
>0bab	44 44 52 2e 3a 20 00
>0bb2	43 55 52 53	txt5           .null     "cursval.: "
>0bb6	56 41 4c 2e 3a 20 00
>0bbd	53 54 41 43	txt6           .null     "stack......:"
>0bc1	4b 2e 2e 2e 2e 2e 2e 3a 00
.0bca			keyaction
.0bca	20 b5 1f	               jsr  push
.0bcd	20 d5 23	loop           jsr  getkey
.0bd0	c9 85		f1             cmp  #key_f1
.0bd2	d0 03		               bne  f2
.0bd4	4c 48 0c	               jmp  dof1
.0bd7	c9 89		f2             cmp  #key_f2
.0bd9	d0 03		               bne  f3
.0bdb	4c 4e 0c	               jmp  dof2
.0bde	c9 86		f3             cmp  #key_f3
.0be0	d0 03		               bne  f4
.0be2	4c 54 0c	               jmp  dof3
.0be5	c9 8a		f4             cmp  #key_f4
.0be7	d0 03		               bne  f5
.0be9	4c 5a 0c	               jmp  dof4
.0bec	c9 87		f5             cmp  #key_f5
.0bee	d0 03		               bne  f6
.0bf0	4c 60 0c	               jmp  dof5
.0bf3	c9 8b		f6             cmp  #key_f6
.0bf5	d0 03		               bne  f7
.0bf7	4c 66 0c	               jmp  dof6
.0bfa	c9 88		f7             cmp  #key_f7
.0bfc	d0 03		               bne  f8
.0bfe	4c 6c 0c	               jmp  dof7
.0c01	c9 8c		f8             cmp  #key_f8
.0c03	d0 03		               bne  ctrlx
.0c05	4c 72 0c	               jmp  dof8
.0c08	c9 18		ctrlx          cmp  #ctrl_x
.0c0a	d0 03		               bne  ishex14
.0c0c	4c 78 0c	               jmp  doquit
.0c0f	c9 14		ishex14        cmp  #$14
.0c11	d0 03		               bne  ishex12
.0c13	4c cd 0b	               jmp  loop
.0c16	c9 12		ishex12        cmp  #$12
.0c18	d0 03		               bne  reste
.0c1a	4c cd 0b	               jmp  loop
.0c1d			reste
.0c1d	20 b5 1f	               jsr  push
.0c20	a2 0d		               ldx  #13
.0c22	a0 0c		               ldy  #12
.0c24	20 de 1e	               jsr  gotoxy
.0c27	20 f4 1f	               jsr  pop
.0c2a	20 be 1e	               jsr  putch
.0c2d	48		               pha
.0c2e	ad 48 09	               lda  currentkey
.0c31	8d 49 09	               sta  previouskey
.0c34	68		               pla
.0c35	8d 48 09	               sta  currentkey
.0c38	aa		               tax
.0c39	bc b0 22	               ldy  asciitorom,x
.0c3c	8c 4a 09	               sty  bitmapoffset
.0c3f	20 83 0a	               jsr  drawkeyval
.0c42	20 34 0e	               jsr  drawbitmap
.0c45	4c cd 0b	               jmp  loop
.0c48	20 26 11	dof1           jsr  f1action  ;edit/reverse
.0c4b	4c cd 0b	               jmp  loop
.0c4e	20 09 12	dof2           jsr  f2action  ;save/flip vert
.0c51	4c cd 0b	               jmp  loop
.0c54	20 c1 12	dof3           jsr  f3action  ;load/flip horz
.0c57	4c cd 0b	               jmp  loop
.0c5a	20 8a 13	dof4           jsr  f4action  ;copy/scroll r
.0c5d	4c cd 0b	               jmp  loop
.0c60	20 53 14	dof5           jsr  f5action  ;clear/scroll l
.0c63	4c cd 0b	               jmp  loop
.0c66	20 0b 15	dof6           jsr  f6action  ;fill;/scroll up
.0c69	4c cd 0b	               jmp  loop
.0c6c	20 c3 15	dof7           jsr  f7action  ;clear;/scroll down
.0c6f	4c cd 0b	               jmp  loop
.0c72	20 80 16	dof8           jsr  f8action  ; function
.0c75	4c cd 0b	               jmp  loop
.0c78	20 f4 1f	doquit         jsr  pop
.0c7b	60		               rts
.0c7c			editor
.0c7c	20 b5 1f	               jsr  push
.0c7f	20 b5 1f	               jsr  push
.0c82	a2 9b		               ldx  #<blankmsg
.0c84	a0 18		               ldy  #>blankmsg
.0c86	20 4d 1f	               jsr  putscxy
.0c89	a2 ff		               ldx  #<exit_msg
.0c8b	a0 1a		               ldy  #>exit_msg
.0c8d	20 4d 1f	               jsr  putscxy
.0c90	20 f4 1f	               jsr  pop
.0c93	20 b5 1f	               jsr  push
.0c96	a2 9b		               ldx  #<blankmsg
.0c98	a0 18		               ldy  #>blankmsg
.0c9a	20 4d 1f	               jsr  putscxy
.0c9d	a2 e2		               ldx  #<edit_msg
.0c9f	a0 18		               ldy  #>edit_msg
.0ca1	20 4d 1f	               jsr  putscxy
.0ca4	20 f4 1f	               jsr  pop
.0ca7	a9 0c		               lda  #vgris1
.0ca9	20 45 0a	               jsr  setmenuacolor
.0cac	a9 01		               lda  #menu1col1
.0cae	8d cd 1c	               sta  f1abutton
.0cb1	20 a4 0f	               jsr  drawfkeys
.0cb4	20 f0 0d	               jsr  setcurs
.0cb7	ad 48 09	               lda  currentkey
.0cba	20 b5 1f	               jsr  push
.0cbd	a2 11		               ldx  #17
.0cbf	a0 05		               ldy  #5
.0cc1	20 de 1e	               jsr  gotoxy
.0cc4	20 f4 1f	               jsr  pop
.0cc7	20 7b 22	               jsr  atodec
.0cca	20 b5 1f	               jsr  push
.0ccd	a2 7f		isx            ldx  #<adec
.0ccf	a0 21		isy            ldy  #>adec
.0cd1	20 c4 1e	               jsr  puts
.0cd4	20 f4 1f	               jsr  pull
.0cd7	20 34 0e	               jsr  drawbitmap
.0cda	20 d5 23	ed_loop        jsr  getkey
.0cdd	c9 91		cu             cmp  #cursu
.0cdf	d0 03		               bne  cd
.0ce1	4c 6d 0d	               jmp  do_up
.0ce4	c9 11		cd             cmp  #cursd
.0ce6	d0 03		               bne  cl
.0ce8	4c 80 0d	               jmp  do_down
.0ceb	c9 9d		cl             cmp  #cursl
.0ced	d0 03		               bne  cr
.0cef	4c 93 0d	               jmp  do_left
.0cf2	c9 1d		cr             cmp  #cursr
.0cf4	d0 03		               bne  cx
.0cf6	4c a6 0d	               jmp  do_right
.0cf9	c9 18		cx             cmp  #ctrl_x
.0cfb	d0 03		               bne  sp
.0cfd	4c c2 0d	               jmp  do_ctrlx
.0d00	c9 20		sp             cmp  #$20
.0d02	d0 03		               bne  ishex14
.0d04	4c b9 0d	               jmp  do_swap
.0d07	c9 14		ishex14        cmp  #$14
.0d09	d0 03		               bne  ishex12
.0d0b	4c b9 0d	               jmp  do_swap
.0d0e	c9 12		ishex12        cmp  #$12
.0d10	d0 03		               bne  rest
.0d12	4c b9 0d	               jmp  do_swap
.0d15			rest
.0d15	20 b5 1f	               jsr  push
.0d18	a2 0d		               ldx  #13
.0d1a	a0 0c		               ldy  #12
.0d1c	20 de 1e	               jsr  gotoxy
.0d1f	20 f4 1f	               jsr  pop
.0d22	20 be 1e	               jsr  putch
.0d25	48		               pha
.0d26	ad 48 09	               lda  currentkey
.0d29	8d 49 09	               sta  previouskey
.0d2c	68		               pla
.0d2d	8d 48 09	               sta  currentkey
.0d30	aa		               tax
.0d31	bc b0 22	               ldy  asciitorom,x
.0d34	8c 4a 09	               sty  bitmapoffset
.0d37	20 83 0a	               jsr  drawkeyval
.0d3a	20 34 0e	               jsr  drawbitmap
.0d3d	20 b5 1f	               jsr  push
.0d40	a2 0d		               ldx  #13
.0d42	a0 0c		               ldy  #12
.0d44	20 de 1e	               jsr  gotoxy
.0d47	20 f4 1f	               jsr  pop
.0d4a	20 be 1e	               jsr  putch
.0d4d	20 b5 1f	               jsr  push
.0d50	a2 11		               ldx  #17
.0d52	a0 05		               ldy  #5
.0d54	20 de 1e	               jsr  gotoxy
.0d57	20 f4 1f	               jsr  pop
.0d5a	20 7b 22	               jsr  atodec
.0d5d	20 b5 1f	               jsr  push
.0d60	a2 7f		isx            ldx  #<adec
.0d62	a0 21		isy            ldy  #>adec
.0d64	20 c4 1e	               jsr  puts
.0d67	20 f4 1f	               jsr  pull
.0d6a	4c bf 0d	               jmp  totop
.0d6d	ad 51 09	do_up          lda  cursln
.0d70	c9 09		               cmp  #grid_top
.0d72	f0 4b		               beq  totop
.0d74	20 12 0e	               jsr  clrcurs
.0d77	ce 51 09	               dec  cursln
.0d7a	20 f0 0d	               jsr  setcurs
.0d7d	4c bf 0d	               jmp  totop
.0d80	ad 51 09	do_down        lda  cursln
.0d83	c9 10		               cmp  #grid_bot
.0d85	f0 38		               beq  totop
.0d87	20 12 0e	               jsr  clrcurs
.0d8a	ee 51 09	               inc  cursln
.0d8d	20 f0 0d	               jsr  setcurs
.0d90	4c bf 0d	               jmp  totop
.0d93	ad 52 09	do_left        lda  curscl
.0d96	c9 01		               cmp  #grid_left
.0d98	f0 25		               beq  totop
.0d9a	20 12 0e	               jsr  clrcurs
.0d9d	ce 52 09	               dec  curscl
.0da0	20 f0 0d	               jsr  setcurs
.0da3	4c bf 0d	               jmp  totop
.0da6	ad 52 09	do_right       lda  curscl
.0da9	c9 08		               cmp  #grid_right
.0dab	f0 12		               beq  totop
.0dad	20 12 0e	               jsr  clrcurs
.0db0	ee 52 09	               inc  curscl
.0db3	20 f0 0d	               jsr  setcurs
.0db6	4c bf 0d	               jmp  totop
.0db9	20 c9 0d	do_swap        jsr  do_eor
.0dbc	20 34 0e	               jsr  drawbitmap
.0dbf	4c da 0c	totop          jmp  ed_loop
.0dc2	20 12 0e	do_ctrlx       jsr  clrcurs
.0dc5	20 f4 1f	               jsr  pop
.0dc8	60		               rts
.0dc9			do_eor
.0dc9	20 b5 1f	               jsr  push
.0dcc	ad 4b 09	               lda  mapaddr
.0dcf	85 fd		               sta  zpage2
.0dd1	ad 4c 09	               lda  mapaddr+1
.0dd4	85 fe		               sta  zpage2+1
.0dd6	ae 51 09	               ldx  cursln     ; calcul de
.0dd9	ca		               dex            ; l'offset de
.0dda	8a		               txa            ; la
.0ddb	29 f7		               and  #$f7      ; ligne
.0ddd	a8		               tay
.0dde	ae 52 09	               ldx  curscl
.0de1	ca		               dex
.0de2	bd 3d 09	               lda  eorval,x
.0de5	51 fd		               eor  (zpage2),y
.0de7	20 83 0a	               jsr  drawkeyval
.0dea	91 fd		               sta  (zpage2),y
.0dec	20 f4 1f	               jsr  pop
.0def	60		               rts
.0df0			setcurs
.0df0	20 b5 1f	               jsr  push
.0df3	a2 01		               ldx  #grid_left
.0df5	ac 51 09	               ldy  cursln
.0df8	20 de 1e	               jsr  gotoxy
.0dfb	a9 da		               lda  #$da
.0dfd	20 be 1e	               jsr  putch
.0e00	ae 52 09	               ldx  curscl
.0e03	e8		               inx
.0e04	a0 08		               ldy  #grid_top-1
.0e06	20 de 1e	               jsr  gotoxy
.0e09	a9 da		               lda  #$da
.0e0b	20 be 1e	               jsr  putch
.0e0e	20 f4 1f	               jsr  pop
.0e11	60		               rts
.0e12			clrcurs
.0e12	20 b5 1f	               jsr  push
.0e15	a2 01		               ldx  #grid_left
.0e17	ac 51 09	               ldy  cursln
.0e1a	20 de 1e	               jsr  gotoxy
.0e1d	a9 20		               lda  #$20
.0e1f	20 be 1e	               jsr  putch
.0e22	ae 52 09	               ldx  curscl
.0e25	e8		               inx
.0e26	a0 08		               ldy  #grid_top-1
.0e28	20 de 1e	               jsr  gotoxy
.0e2b	a9 20		               lda  #$20
.0e2d	20 be 1e	               jsr  putch
.0e30	20 f4 1f	               jsr  pop
.0e33	60		               rts
.0e34			drawbitmap
.0e34	20 b5 1f	               jsr  push
.0e37	20 9b 0e	               jsr  calcmapaddr
.0e3a	ad 4b 09	               lda  mapaddr        ; on pointe sur la table des bitmaps
.0e3d	85 fb		               sta  zpage1
.0e3f	ad 4c 09	               lda  mapaddr+1
.0e42	85 fc		               sta  zpage1+1
.0e44	a0 00		drawchar       ldy  #$00
.0e46	a2 09		               ldx  #grid_top      ;on replace la ...
.0e48	8e 51 0e	               stx  isy+1          ;ligne de départ
.0e4b	20 b5 1f	nextline       jsr  push
.0e4e	a2 02		               ldx  #grid_left+1        ; la colonne
.0e50	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.0e52	20 de 1e	               jsr  gotoxy
.0e55	20 f4 1f	               jsr  pop
.0e58	b1 fb		               lda  (zpage1),y     ; on li une ligne
.0e5a	20 1f 22	               jsr  atobin
.0e5d	20 ca 0e	               jsr  abintograph
.0e60	20 b5 1f	               jsr  push
.0e63	a2 76		isx            ldx  #<abin
.0e65	a0 21		isy            ldy  #>abin
.0e67	20 c4 1e	               jsr  puts
.0e6a	20 f4 1f	               jsr  pull
.0e6d	ee 51 0e	               inc  isy+1
.0e70	c8		               iny
.0e71	c0 08		               cpy  #$08
.0e73	30 d6		               bmi  nextline
.0e75	20 7c 0e	               jsr  highlight
.0e78	20 f4 1f	               jsr  pop
.0e7b	60		               rts
.0e7c			highlight
.0e7c	20 b5 1f	               jsr  push
.0e7f	ae 49 09	               ldx  previouskey
.0e82	bd b0 22	               lda  asciitorom,x
.0e85	aa		               tax
.0e86	a9 0c		               lda  #charscolor
.0e88	9d 00 d8	               sta  colorram,x
.0e8b	ae 48 09	               ldx  currentkey
.0e8e	bd b0 22	               lda  asciitorom,x
.0e91	aa		               tax
.0e92	a9 0d		               lda  #charcolor
.0e94	9d 00 d8	               sta  colorram,x
.0e97	20 f4 1f	               jsr  pop
.0e9a	60		               rts
.0e9b			calcmapaddr
.0e9b	20 b5 1f	               jsr  push
.0e9e	ad 66 0f	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0ea1	85 fb		               sta  zpage1
.0ea3	ad 67 0f	               lda  bitmapaddr+1
.0ea6	85 fc		               sta  zpage1+1
.0ea8	ae 4a 09	               ldx  bitmapoffset
.0eab	e0 00		               cpx  #$00
.0ead	f0 08		               beq  thesame         ; sommes nous déja à 0
.0eaf	a9 08		addagain       lda  #$08
.0eb1	20 f2 10	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0eb4	ca		               dex                 ; pour chaque caracteres
.0eb5	d0 f8		               bne  addagain
.0eb7	48		thesame        pha
.0eb8	a5 fb		               lda  zpage1
.0eba	8d 4b 09	               sta  mapaddr
.0ebd	a5 fc		               lda  zpage1+1
.0ebf	8d 4c 09	               sta  mapaddr+1
.0ec2	68		               pla
.0ec3	20 83 0a	               jsr  drawkeyval
.0ec6	20 f4 1f	out            jsr  pop
.0ec9	60		               rts
.0eca			abintograph
.0eca	20 b5 1f	               jsr  push
.0ecd	a9 76		               lda  #<abin
.0ecf	85 fb		               sta  zpage1
.0ed1	a9 21		               lda  #>abin+1
.0ed3	85 fc		               sta  zpage1+1
.0ed5	a0 00		               ldy  #$00
.0ed7	b1 fb		nextbit        lda  (zpage1),y
.0ed9	c9 30		               cmp  #$30
.0edb	f0 07		               beq  itszero
.0edd	a9 d1		itsone         lda  #$d1
.0edf	91 fb		               sta  (zpage1),y
.0ee1	4c e8 0e	               jmp  next
.0ee4	a9 2e		itszero        lda  #$2e
.0ee6	91 fb		               sta  (zpage1),y
.0ee8	c8		next           iny
.0ee9	c0 08		               cpy  #$08
.0eeb	30 ea		               bmi  nextbit
.0eed	20 f4 1f	               jsr  pop
.0ef0	60		               rts
.0ef1			setscreenptr
.0ef1	20 b5 1f	               jsr  push
.0ef4	a9 08		               lda  #$08      ; basic commande to disable ...
.0ef6	20 d2 ff	               jsr  chrout    ; ... character set change.
.0ef9	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.0efc	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.0efe	09 0e		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.0f00	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.0f03	20 f4 1f	               jsr  pop
.0f06	60		               rts
.0f07			copycharset
.0f07	20 b5 1f	               jsr  push
.0f0a	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0f0d	29 fe		               and  #%11111110     ;254
.0f0f	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0f12	a5 01		               lda  u6510map       ;$01
.0f14	29 fb		               and  #%11111011     ;251
.0f16	85 01		               sta  u6510map       ;$01
.0f18	20 2d 0f	               jsr  memcopy
.0f1b	a5 01		               lda  u6510map       ;$01
.0f1d	09 04		               ora  #%00000100
.0f1f	85 01		               sta  u6510map       ;$01
.0f21	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0f24	09 01		               ora  #%00000001     ;254
.0f26	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0f29	20 f4 1f	               jsr  pop
.0f2c	60		               rts
.0f2d			memcopy
.0f2d	20 b5 1f	               jsr  push
.0f30	ad 62 0f	               lda  startaddr
.0f33	85 fb		               sta  zpage1
.0f35	ad 63 0f	               lda  startaddr+1
.0f38	85 fc		               sta  zpage1+1
.0f3a	ad 66 0f	               lda  bitmapaddr
.0f3d	85 fd		               sta  zpage2
.0f3f	ad 67 0f	               lda  bitmapaddr+1
.0f42	85 fe		               sta  zpage2+1
.0f44	a0 00		               ldy  #$00
.0f46	b1 fb		onemore        lda  (zpage1),y
.0f48	91 fd		               sta  (zpage2),y
.0f4a	20 bc 20	               jsr  inczp1
.0f4d	20 d4 20	               jsr  inczp2
.0f50	a5 fc		               lda  zpage1+1
.0f52	cd 65 0f	               cmp  stopaddr+1
.0f55	d0 ef		               bne  onemore
.0f57	a5 fb		               lda  zpage1
.0f59	cd 64 0f	               cmp  stopaddr
.0f5c	d0 e8		               bne  onemore
.0f5e	20 f4 1f	               jsr  pop
.0f61	60		               rts
=14336			bitmapmem =    charsdef * 1024     ;Calcul de la position ram des caracteres.
=61440			mstopaddr =    $d000+(4*$800)
>0f62	00 d0		startaddr      .word     $d000               ; 53248
>0f64	00 f0		stopaddr       .word     mstopaddr           ; 55296
>0f66	00 38		bitmapaddr     .word     bitmapmem           ; $3000, 12288
.0f68			staticscreen
.0f68	48		               pha
.0f69	a9 0c		               lda  #vgris1
.0f6b	8d 20 d0	               sta  $d020
.0f6e	68		               pla
.0f6f	48		               pha
.0f70	a9 0b		               lda  #vgris
.0f72	8d 21 d0	               sta  $d021
.0f75	68		               pla
.0f76	20 49 10	               jsr  drawlines
.0f79	20 25 10	               jsr  drawallchars
.0f7c	20 91 10	               jsr  drawgrid
.0f7f	20 a4 0f	               jsr  drawfkeys
.0f82	20 b5 1f	               jsr  push
.0f85	a2 9b		               ldx  #<blankmsg
.0f87	a0 18		               ldy  #>blankmsg
.0f89	20 4d 1f	               jsr  putscxy
.0f8c	a2 ea		               ldx  #<quit_msg
.0f8e	a0 1a		               ldy  #>quit_msg
.0f90	20 4d 1f	               jsr  putscxy
.0f93	20 f4 1f	               jsr  pop
.0f96	20 b5 1f	               jsr  push
.0f99	a2 00		               ldx  #0
.0f9b	a0 07		               ldy  #7
.0f9d	20 de 1e	               jsr  gotoxy
.0fa0	20 f4 1f	               jsr  pop
.0fa3	60		               rts
.0fa4			drawfkeys
.0fa4	20 b5 1f	               jsr  push
.0fa7	ad 46 09	               lda  fkeyset
.0faa	c9 00		               cmp  #$0
.0fac	d0 3b		               bne  secondks
.0fae	a2 cd		               ldx #<f1abutton
.0fb0	a0 1c		               ldy #>f1abutton
.0fb2	20 4d 1f	               jsr putscxy
.0fb5	a2 e7		               ldx #<f2abutton
.0fb7	a0 1c		               ldy #>f2abutton
.0fb9	20 4d 1f	               jsr putscxy
.0fbc	a2 01		               ldx #<f3abutton
.0fbe	a0 1d		               ldy #>f3abutton
.0fc0	20 4d 1f	               jsr putscxy
.0fc3	a2 1b		               ldx #<f4abutton
.0fc5	a0 1d		               ldy #>f4abutton
.0fc7	20 4d 1f	               jsr putscxy
.0fca	a2 35		               ldx #<f5abutton
.0fcc	a0 1d		               ldy #>f5abutton
.0fce	20 4d 1f	               jsr putscxy
.0fd1	a2 4f		               ldx #<f6abutton
.0fd3	a0 1d		               ldy #>f6abutton
.0fd5	20 4d 1f	               jsr putscxy
.0fd8	a2 69		               ldx #<f7abutton
.0fda	a0 1d		               ldy #>f7abutton
.0fdc	20 4d 1f	               jsr putscxy
.0fdf	a2 83		               ldx #<f8abutton
.0fe1	a0 1d		               ldy #>f8abutton
.0fe3	20 4d 1f	               jsr putscxy
.0fe6	4c 21 10	               jmp end
.0fe9			secondks
.0fe9	a2 9d		               ldx #<f1bbutton
.0feb	a0 1d		               ldy #>f1bbutton
.0fed	20 4d 1f	               jsr putscxy
.0ff0	a2 b7		               ldx #<f2bbutton
.0ff2	a0 1d		               ldy #>f2bbutton
.0ff4	20 4d 1f	               jsr putscxy
.0ff7	a2 d1		               ldx #<f3bbutton
.0ff9	a0 1d		               ldy #>f3bbutton
.0ffb	20 4d 1f	               jsr putscxy
.0ffe	a2 eb		               ldx #<f4bbutton
.1000	a0 1d		               ldy #>f4bbutton
.1002	20 4d 1f	               jsr putscxy
.1005	a2 05		               ldx #<f5bbutton
.1007	a0 1e		               ldy #>f5bbutton
.1009	20 4d 1f	               jsr putscxy
.100c	a2 1f		               ldx #<f6bbutton
.100e	a0 1e		               ldy #>f6bbutton
.1010	20 4d 1f	               jsr putscxy
.1013	a2 39		               ldx #<f7bbutton
.1015	a0 1e		               ldy #>f7bbutton
.1017	20 4d 1f	               jsr putscxy
.101a	a2 53		               ldx #<f8bbutton
.101c	a0 1e		               ldy #>f8bbutton
.101e	20 4d 1f	               jsr putscxy
.1021	20 f4 1f	end            jsr  pop
.1024	60		               rts
.1025			drawallchars
.1025	20 b5 1f	               jsr push
.1028	20 b5 1f	               jsr  push
.102b	a2 00		               ldx  #0
.102d	a0 00		               ldy  #0
.102f	20 de 1e	               jsr  gotoxy
.1032	20 f4 1f	               jsr  pop
.1035	a2 00		               ldx  #$00
.1037	8a		nextc          txa
.1038	9d 00 04	               sta  scrnnewram,x
.103b	a9 0c		               lda  #charscolor
.103d	9d 00 d8	               sta  colorram,x
.1040	e8		               inx
.1041	e0 80		               cpx  #$80
.1043	d0 f2		               bne  nextc
.1045	20 f4 1f	               jsr  pop
.1048	60		               rts
.1049			drawlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.1049	20 b5 1f	               jsr  push
.104c	a2 28		               ldx  #40
.104e	a9 40		               lda  #64
.1050	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.1053	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.1056	ca		               dex
.1057	e0 10		hline          cpx  #vlinepos
.1059	10 03		               bpl  notyet
.105b	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.105e	e0 00		notyet         cpx  #$00
.1060	d0 ee		               bne  nextl
.1062	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.1064	85 fb		               sta  zpage1
.1066	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.1068	85 fc		               sta  zpage1+1
.106a	a0 00		               ldy  #0
.106c	a9 72		               lda  #114
.106e	91 fb		               sta  (zpage1),y
.1070	20 00 11	               jsr  zp1add40
.1073	a2 12		               ldx  #24-hline2
.1075	a9 5d		               lda  #93
.1077	91 fb		another93      sta  (zpage1),y
.1079	20 00 11	               jsr  zp1add40
.107c	ca		               dex
.107d	d0 f8		               bne  another93
.107f	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.1081	85 fb		               sta  zpage1
.1083	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.1085	85 fc		               sta  zpage1+1
.1087	a0 00		               ldy  #0
.1089	a9 73		               lda  #115
.108b	91 fb		               sta  (zpage1),y
.108d	20 f4 1f	               jsr  pop
.1090	60		               rts
.1091			drawgrid
.1091	20 b5 1f	               jsr  push
.1094	20 6d 1e	               jsr  screendis
.1097	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.1099	85 fb		               sta  zpage1
.109b	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.109d	85 fc		               sta  zpage1+1
.109f	a2 08		               ldx  #8
.10a1	a9 65		nextbox        lda  #101
.10a3	a0 09		               ldy  #9
.10a5	91 fb		               sta  (zpage1),y
.10a7	88		               dey
.10a8	a9 2e		               lda  #$2e
.10aa	91 fb		nextcol        sta  (zpage1),y
.10ac	88		               dey
.10ad	d0 fb		               bne  nextcol
.10af	20 00 11	               jsr  zp1add40
.10b2	ca		               dex
.10b3	d0 ec		               bne  nextbox
.10b5	a0 08		               ldy  #8
.10b7	a9 77		               lda  #119
.10b9	91 fb		nextlin        sta  (zpage1),y
.10bb	88		               dey
.10bc	d0 fb		               bne  nextlin
.10be	a9 3e		               lda  #$3e
.10c0	8d eb 05	               sta  scrnnewram+(40*(12))+11
.10c3	a9 70		               lda  #$70                     ;+
.10c5	8d c4 05	               sta  scrnnewram+(40*(11))+12
.10c8	a9 43		               lda  #$43                     ;-
.10ca	8d c5 05	               sta  scrnnewram+(40*(11))+13
.10cd	a9 6e		               lda  #$6e                     ;+
.10cf	8d c6 05	               sta  scrnnewram+(40*(11))+14
.10d2	a9 5d		               lda  #$5d                     ;|
.10d4	8d ec 05	               sta  scrnnewram+(40*(12))+12
.10d7	a9 5d		               lda  #$5d                     ;|
.10d9	8d ee 05	               sta  scrnnewram+(40*(12))+14
.10dc	a9 6d		               lda  #$6d                     ;+
.10de	8d 14 06	               sta  scrnnewram+(40*(13))+12
.10e1	a9 43		               lda  #$43                     ;-
.10e3	8d 15 06	               sta  scrnnewram+(40*(13))+13
.10e6	a9 7d		               lda  #$7d                     ;+
.10e8	8d 16 06	               sta  scrnnewram+(40*(13))+14
.10eb	20 7a 1e	               jsr screenena
.10ee	20 f4 1f	               jsr  pop
.10f1	60		               rts
.10f2			zp1addnum
.10f2	08		               php
.10f3	48		               pha
.10f4	18		               clc
.10f5	65 fb		               adc  zpage1
.10f7	90 02		               bcc  nocarry
.10f9	e6 fc		               inc  zpage1+1
.10fb	85 fb		nocarry        sta  zpage1
.10fd	68		               pla
.10fe	28		               plp
.10ff	60		               rts
.1100			zp1add40
.1100	08		               php
.1101	48		               pha
.1102	18		               clc
.1103	a5 fb		               lda  zpage1
.1105	69 28		               adc  #40
.1107	90 02		               bcc  nocarry
.1109	e6 fc		               inc  zpage1+1
.110b	85 fb		nocarry        sta  zpage1
.110d	68		               pla
.110e	28		               plp
.110f	60		               rts
.1110			delay
.1110	20 b5 1f	               jsr  push
.1113	a9 00		               lda  #$0
.1115	aa		               tax
.1116	a8		               tay
.1117	ca		xagain         dex
.1118	ca		               dex
.1119	88		yagain         dey
.111a	c0 00		               cpy  #$00
.111c	d0 fb		               bne  yagain
.111e	e0 00		               cpx  #$00
.1120	d0 f5		               bne  xagain
.1122	20 f4 1f	               jsr  pop
.1125	60		               rts
.1126			f1action
.1126	48		               pha
.1127	a9 ff		               lda  #$ff
.1129	8d 45 09	               sta  editmode
.112c	ad 46 09	               lda  fkeyset
.112f	d0 78		               bne  menub
.1131	20 b5 1f	               jsr  push
.1134	a2 9b		               ldx  #<blankmsg
.1136	a0 18		               ldy  #>blankmsg
.1138	20 4d 1f	               jsr  putscxy
.113b	a2 e2		               ldx  #<f1a_msg
.113d	a0 18		               ldy  #>f1a_msg
.113f	20 4d 1f	               jsr  putscxy
.1142	20 f4 1f	               jsr  pop
.1145	08		               php
.1146	48		               pha
.1147	8a		               txa
.1148	48		               pha
.1149	ad cd 1c	               lda  f1abutton
.114c	48		               pha
.114d	a9 92		               lda  #146
.114f	8d dc 1c	               sta  f1abutton+15
.1152	a9 01		               lda  #flashcol
.1154	8d cd 1c	               sta  f1abutton
.1157	a2 cd		               ldx  #<f1abutton
.1159	a0 1c		               ldy  #>f1abutton
.115b	20 4d 1f	               jsr  putscxy
.115e	20 10 11	               jsr  delay
.1161	a9 12		               lda  #18
.1163	8d dc 1c	               sta  f1abutton+15
.1166	68		               pla
.1167	8d cd 1c	               sta  f1abutton
.116a	a2 cd		               ldx  #<f1abutton
.116c	a0 1c		               ldy  #>f1abutton
.116e	20 4d 1f	               jsr  putscxy
.1171	68		               pla
.1172	aa		               tax
.1173	68		               pla
.1174	28		               plp
.1175	20 7c 0c	               jsr  editor
.1178	20 b5 1f	               jsr  push
.117b	a2 9b		               ldx  #<blankmsg
.117d	a0 18		               ldy  #>blankmsg
.117f	20 4d 1f	               jsr  putscxy
.1182	a2 ea		               ldx  #<quit_msg
.1184	a0 1a		               ldy  #>quit_msg
.1186	20 4d 1f	               jsr  putscxy
.1189	20 f4 1f	               jsr  pop
.118c	20 b5 1f	               jsr  push
.118f	a2 9b		               ldx  #<blankmsg
.1191	a0 18		               ldy  #>blankmsg
.1193	20 4d 1f	               jsr  putscxy
.1196	a2 56		               ldx  #<menua_msg
.1198	a0 1a		               ldy  #>menua_msg
.119a	20 4d 1f	               jsr  putscxy
.119d	20 f4 1f	               jsr  pop
.11a0	20 ff 09	               jsr  resetmenuacolor
.11a3	20 a4 0f	               jsr  drawfkeys
.11a6	4c f3 11	               jmp  out
.11a9			menub
.11a9	20 b5 1f	               jsr  push
.11ac	a2 9b		               ldx  #<blankmsg
.11ae	a0 18		               ldy  #>blankmsg
.11b0	20 4d 1f	               jsr  putscxy
.11b3	a2 bc		               ldx  #<f1b_msg
.11b5	a0 19		               ldy  #>f1b_msg
.11b7	20 4d 1f	               jsr  putscxy
.11ba	20 f4 1f	               jsr  pop
.11bd	08		               php
.11be	48		               pha
.11bf	8a		               txa
.11c0	48		               pha
.11c1	ad 9d 1d	               lda  f1bbutton
.11c4	48		               pha
.11c5	a9 92		               lda  #146
.11c7	8d ac 1d	               sta  f1bbutton+15
.11ca	a9 01		               lda  #flashcol
.11cc	8d 9d 1d	               sta  f1bbutton
.11cf	a2 9d		               ldx  #<f1bbutton
.11d1	a0 1d		               ldy  #>f1bbutton
.11d3	20 4d 1f	               jsr  putscxy
.11d6	20 10 11	               jsr  delay
.11d9	a9 12		               lda  #18
.11db	8d ac 1d	               sta  f1bbutton+15
.11de	68		               pla
.11df	8d 9d 1d	               sta  f1bbutton
.11e2	a2 9d		               ldx  #<f1bbutton
.11e4	a0 1d		               ldy  #>f1bbutton
.11e6	20 4d 1f	               jsr  putscxy
.11e9	68		               pla
.11ea	aa		               tax
.11eb	68		               pla
.11ec	28		               plp
.11ed	20 68 18	               jsr  flipvert
.11f0	20 34 0e	               jsr  drawbitmap
.11f3	68		out            pla
.11f4	20 b5 1f	               jsr  push
.11f7	a2 9b		               ldx  #<blankmsg
.11f9	a0 18		               ldy  #>blankmsg
.11fb	20 4d 1f	               jsr  putscxy
.11fe	a2 c7		               ldx  #<prompt_msg
.1200	a0 18		               ldy  #>prompt_msg
.1202	20 4d 1f	               jsr  putscxy
.1205	20 f4 1f	               jsr  pop
.1208	60		               rts
.1209			f2action
.1209	48		               pha
.120a	a9 00		               lda  #$0
.120c	8d 45 09	               sta  editmode
.120f	ad 46 09	               lda  fkeyset
.1212	d0 4d		               bne  menub
.1214	20 b5 1f	               jsr  push
.1217	a2 9b		               ldx  #<blankmsg
.1219	a0 18		               ldy  #>blankmsg
.121b	20 4d 1f	               jsr  putscxy
.121e	a2 fd		               ldx  #<f2a_msg
.1220	a0 18		               ldy  #>f2a_msg
.1222	20 4d 1f	               jsr  putscxy
.1225	20 f4 1f	               jsr  pop
.1228	08		               php
.1229	48		               pha
.122a	8a		               txa
.122b	48		               pha
.122c	ad e7 1c	               lda  f2abutton
.122f	48		               pha
.1230	a9 92		               lda  #146
.1232	8d f6 1c	               sta  f2abutton+15
.1235	a9 01		               lda  #flashcol
.1237	8d e7 1c	               sta  f2abutton
.123a	a2 e7		               ldx  #<f2abutton
.123c	a0 1c		               ldy  #>f2abutton
.123e	20 4d 1f	               jsr  putscxy
.1241	20 10 11	               jsr  delay
.1244	a9 12		               lda  #18
.1246	8d f6 1c	               sta  f2abutton+15
.1249	68		               pla
.124a	8d e7 1c	               sta  f2abutton
.124d	a2 e7		               ldx  #<f2abutton
.124f	a0 1c		               ldy  #>f2abutton
.1251	20 4d 1f	               jsr  putscxy
.1254	68		               pla
.1255	aa		               tax
.1256	68		               pla
.1257	28		               plp
.1258	20 57 08	               jsr  copychar
.125b	20 34 0e	               jsr  drawbitmap
.125e	4c ab 12	               jmp  out
.1261			menub
.1261	20 b5 1f	               jsr  push
.1264	a2 9b		               ldx  #<blankmsg
.1266	a0 18		               ldy  #>blankmsg
.1268	20 4d 1f	               jsr  putscxy
.126b	a2 d5		               ldx  #<f2b_msg
.126d	a0 19		               ldy  #>f2b_msg
.126f	20 4d 1f	               jsr  putscxy
.1272	20 f4 1f	               jsr  pop
.1275	08		               php
.1276	48		               pha
.1277	8a		               txa
.1278	48		               pha
.1279	ad b7 1d	               lda  f2bbutton
.127c	48		               pha
.127d	a9 92		               lda  #146
.127f	8d c6 1d	               sta  f2bbutton+15
.1282	a9 01		               lda  #flashcol
.1284	8d b7 1d	               sta  f2bbutton
.1287	a2 b7		               ldx  #<f2bbutton
.1289	a0 1d		               ldy  #>f2bbutton
.128b	20 4d 1f	               jsr  putscxy
.128e	20 10 11	               jsr  delay
.1291	a9 12		               lda  #18
.1293	8d c6 1d	               sta  f2bbutton+15
.1296	68		               pla
.1297	8d b7 1d	               sta  f2bbutton
.129a	a2 b7		               ldx  #<f2bbutton
.129c	a0 1d		               ldy  #>f2bbutton
.129e	20 4d 1f	               jsr  putscxy
.12a1	68		               pla
.12a2	aa		               tax
.12a3	68		               pla
.12a4	28		               plp
.12a5	20 3b 18	               jsr  fliphorz
.12a8	20 34 0e	               jsr  drawbitmap
.12ab	68		out            pla
.12ac	20 b5 1f	               jsr  push
.12af	a2 9b		               ldx  #<blankmsg
.12b1	a0 18		               ldy  #>blankmsg
.12b3	20 4d 1f	               jsr  putscxy
.12b6	a2 c7		               ldx  #<prompt_msg
.12b8	a0 18		               ldy  #>prompt_msg
.12ba	20 4d 1f	               jsr  putscxy
.12bd	20 f4 1f	               jsr  pop
.12c0	60		               rts
.12c1			f3action
.12c1	48		               pha
.12c2	a9 00		               lda  #$0
.12c4	8d 45 09	               sta  editmode
.12c7	ad 46 09	               lda  fkeyset
.12ca	d0 5e		               bne  menub
.12cc	08		               php
.12cd	48		               pha
.12ce	8a		               txa
.12cf	48		               pha
.12d0	ad 01 1d	               lda  f3abutton
.12d3	48		               pha
.12d4	a9 92		               lda  #146
.12d6	8d 10 1d	               sta  f3abutton+15
.12d9	a9 01		               lda  #flashcol
.12db	8d 01 1d	               sta  f3abutton
.12de	a2 01		               ldx  #<f3abutton
.12e0	a0 1d		               ldy  #>f3abutton
.12e2	20 4d 1f	               jsr  putscxy
.12e5	20 10 11	               jsr  delay
.12e8	a9 12		               lda  #18
.12ea	8d 10 1d	               sta  f3abutton+15
.12ed	68		               pla
.12ee	8d 01 1d	               sta  f3abutton
.12f1	a2 01		               ldx  #<f3abutton
.12f3	a0 1d		               ldy  #>f3abutton
.12f5	20 4d 1f	               jsr  putscxy
.12f8	68		               pla
.12f9	aa		               tax
.12fa	68		               pla
.12fb	28		               plp
.12fc	20 b5 1f	               jsr  push
.12ff	a2 9b		               ldx  #<blankmsg
.1301	a0 18		               ldy  #>blankmsg
.1303	20 4d 1f	               jsr  putscxy
.1306	a2 1a		               ldx  #<f3a_msg
.1308	a0 19		               ldy  #>f3a_msg
.130a	20 4d 1f	               jsr  putscxy
.130d	20 f4 1f	               jsr  pop
.1310	20 d5 23	getagain       jsr  getkey
.1313	c9 43		               cmp  #$43
.1315	f0 07		               beq  devok
.1317	c9 44		               cmp  #$44
.1319	f0 03		               beq  devok
.131b	4c 10 13	               jmp  getagain
.131e	8d 3c 09	devok          sta  device
.1321	20 be 1e	               jsr  putch
.1324	20 ca 08	               jsr  getfname
.1327	4c 74 13	               jmp  out
.132a			menub
.132a	20 b5 1f	               jsr  push
.132d	a2 9b		               ldx  #<blankmsg
.132f	a0 18		               ldy  #>blankmsg
.1331	20 4d 1f	               jsr  putscxy
.1334	a2 f0		               ldx  #<f3b_msg
.1336	a0 19		               ldy  #>f3b_msg
.1338	20 4d 1f	               jsr  putscxy
.133b	20 f4 1f	               jsr  pop
.133e	08		               php
.133f	48		               pha
.1340	8a		               txa
.1341	48		               pha
.1342	ad d1 1d	               lda  f3bbutton
.1345	48		               pha
.1346	a9 92		               lda  #146
.1348	8d e0 1d	               sta  f3bbutton+15
.134b	a9 01		               lda  #flashcol
.134d	8d d1 1d	               sta  f3bbutton
.1350	a2 d1		               ldx  #<f3bbutton
.1352	a0 1d		               ldy  #>f3bbutton
.1354	20 4d 1f	               jsr  putscxy
.1357	20 10 11	               jsr  delay
.135a	a9 12		               lda  #18
.135c	8d e0 1d	               sta  f3bbutton+15
.135f	68		               pla
.1360	8d d1 1d	               sta  f3bbutton
.1363	a2 d1		               ldx  #<f3bbutton
.1365	a0 1d		               ldy  #>f3bbutton
.1367	20 4d 1f	               jsr  putscxy
.136a	68		               pla
.136b	aa		               tax
.136c	68		               pla
.136d	28		               plp
.136e	20 c6 17	               jsr  scrollright
.1371	20 34 0e	               jsr  drawbitmap
.1374	68		out            pla
.1375	20 b5 1f	               jsr  push
.1378	a2 9b		               ldx  #<blankmsg
.137a	a0 18		               ldy  #>blankmsg
.137c	20 4d 1f	               jsr  putscxy
.137f	a2 c7		               ldx  #<prompt_msg
.1381	a0 18		               ldy  #>prompt_msg
.1383	20 4d 1f	               jsr  putscxy
.1386	20 f4 1f	               jsr  pop
.1389	60		               rts
.138a			f4action
.138a	48		               pha
.138b	a9 00		               lda  #$0
.138d	8d 45 09	               sta  editmode
.1390	ad 46 09	               lda  fkeyset
.1393	d0 5e		               bne  menub
.1395	08		               php
.1396	48		               pha
.1397	8a		               txa
.1398	48		               pha
.1399	ad 1b 1d	               lda  f4abutton
.139c	48		               pha
.139d	a9 92		               lda  #146
.139f	8d 2a 1d	               sta  f4abutton+15
.13a2	a9 01		               lda  #flashcol
.13a4	8d 1b 1d	               sta  f4abutton
.13a7	a2 1b		               ldx  #<f4abutton
.13a9	a0 1d		               ldy  #>f4abutton
.13ab	20 4d 1f	               jsr  putscxy
.13ae	20 10 11	               jsr  delay
.13b1	a9 12		               lda  #18
.13b3	8d 2a 1d	               sta  f4abutton+15
.13b6	68		               pla
.13b7	8d 1b 1d	               sta  f4abutton
.13ba	a2 1b		               ldx  #<f4abutton
.13bc	a0 1d		               ldy  #>f4abutton
.13be	20 4d 1f	               jsr  putscxy
.13c1	68		               pla
.13c2	aa		               tax
.13c3	68		               pla
.13c4	28		               plp
.13c5	20 b5 1f	               jsr  push
.13c8	a2 9b		               ldx  #<blankmsg
.13ca	a0 18		               ldy  #>blankmsg
.13cc	20 4d 1f	               jsr  putscxy
.13cf	a2 41		               ldx  #<f4a_msg
.13d1	a0 19		               ldy  #>f4a_msg
.13d3	20 4d 1f	               jsr  putscxy
.13d6	20 f4 1f	               jsr  pop
.13d9	20 d5 23	getagain       jsr  getkey
.13dc	c9 43		               cmp  #$43
.13de	f0 07		               beq  devok
.13e0	c9 44		               cmp  #$44
.13e2	f0 03		               beq  devok
.13e4	4c d9 13	               jmp  getagain
.13e7	8d 3c 09	devok          sta  device
.13ea	20 be 1e	               jsr  putch
.13ed	20 ca 08	               jsr  getfname
.13f0	4c 3d 14	               jmp  out
.13f3			menub
.13f3	20 b5 1f	               jsr  push
.13f6	a2 9b		               ldx  #<blankmsg
.13f8	a0 18		               ldy  #>blankmsg
.13fa	20 4d 1f	               jsr  putscxy
.13fd	a2 05		               ldx  #<f4b_msg
.13ff	a0 1a		               ldy  #>f4b_msg
.1401	20 4d 1f	               jsr  putscxy
.1404	20 f4 1f	               jsr  pop
.1407	08		               php
.1408	48		               pha
.1409	8a		               txa
.140a	48		               pha
.140b	ad eb 1d	               lda  f4bbutton
.140e	48		               pha
.140f	a9 92		               lda  #146
.1411	8d fa 1d	               sta  f4bbutton+15
.1414	a9 01		               lda  #flashcol
.1416	8d eb 1d	               sta  f4bbutton
.1419	a2 eb		               ldx  #<f4bbutton
.141b	a0 1d		               ldy  #>f4bbutton
.141d	20 4d 1f	               jsr  putscxy
.1420	20 10 11	               jsr  delay
.1423	a9 12		               lda  #18
.1425	8d fa 1d	               sta  f4bbutton+15
.1428	68		               pla
.1429	8d eb 1d	               sta  f4bbutton
.142c	a2 eb		               ldx  #<f4bbutton
.142e	a0 1d		               ldy  #>f4bbutton
.1430	20 4d 1f	               jsr  putscxy
.1433	68		               pla
.1434	aa		               tax
.1435	68		               pla
.1436	28		               plp
.1437	20 eb 17	               jsr  scrollleft
.143a	20 34 0e	               jsr  drawbitmap
.143d	68		out            pla
.143e	20 b5 1f	               jsr  push
.1441	a2 9b		               ldx  #<blankmsg
.1443	a0 18		               ldy  #>blankmsg
.1445	20 4d 1f	               jsr  putscxy
.1448	a2 c7		               ldx  #<prompt_msg
.144a	a0 18		               ldy  #>prompt_msg
.144c	20 4d 1f	               jsr  putscxy
.144f	20 f4 1f	               jsr  pop
.1452	60		               rts
.1453			f5action
.1453	48		               pha
.1454	a9 00		               lda  #$0
.1456	8d 45 09	               sta  editmode
.1459	ad 46 09	               lda  fkeyset
.145c	d0 4d		               bne  menub
.145e	20 b5 1f	               jsr  push
.1461	a2 9b		               ldx  #<blankmsg
.1463	a0 18		               ldy  #>blankmsg
.1465	20 4d 1f	               jsr  putscxy
.1468	a2 6a		               ldx  #<f5a_msg
.146a	a0 19		               ldy  #>f5a_msg
.146c	20 4d 1f	               jsr  putscxy
.146f	20 f4 1f	               jsr  pop
.1472	08		               php
.1473	48		               pha
.1474	8a		               txa
.1475	48		               pha
.1476	ad 35 1d	               lda  f5abutton
.1479	48		               pha
.147a	a9 92		               lda  #146
.147c	8d 44 1d	               sta  f5abutton+15
.147f	a9 01		               lda  #flashcol
.1481	8d 35 1d	               sta  f5abutton
.1484	a2 35		               ldx  #<f5abutton
.1486	a0 1d		               ldy  #>f5abutton
.1488	20 4d 1f	               jsr  putscxy
.148b	20 10 11	               jsr  delay
.148e	a9 12		               lda  #18
.1490	8d 44 1d	               sta  f5abutton+15
.1493	68		               pla
.1494	8d 35 1d	               sta  f5abutton
.1497	a2 35		               ldx  #<f5abutton
.1499	a0 1d		               ldy  #>f5abutton
.149b	20 4d 1f	               jsr  putscxy
.149e	68		               pla
.149f	aa		               tax
.14a0	68		               pla
.14a1	28		               plp
.14a2	20 19 18	               jsr  clearchar
.14a5	20 34 0e	               jsr  drawbitmap
.14a8	4c f5 14	               jmp  out
.14ab			menub
.14ab	20 b5 1f	               jsr  push
.14ae	a2 9b		               ldx  #<blankmsg
.14b0	a0 18		               ldy  #>blankmsg
.14b2	20 4d 1f	               jsr  putscxy
.14b5	a2 19		               ldx  #<f5b_msg
.14b7	a0 1a		               ldy  #>f5b_msg
.14b9	20 4d 1f	               jsr  putscxy
.14bc	20 f4 1f	               jsr  pop
.14bf	08		               php
.14c0	48		               pha
.14c1	8a		               txa
.14c2	48		               pha
.14c3	ad 05 1e	               lda  f5bbutton
.14c6	48		               pha
.14c7	a9 92		               lda  #146
.14c9	8d 14 1e	               sta  f5bbutton+15
.14cc	a9 01		               lda  #flashcol
.14ce	8d 05 1e	               sta  f5bbutton
.14d1	a2 05		               ldx  #<f5bbutton
.14d3	a0 1e		               ldy  #>f5bbutton
.14d5	20 4d 1f	               jsr  putscxy
.14d8	20 10 11	               jsr  delay
.14db	a9 12		               lda  #18
.14dd	8d 14 1e	               sta  f5bbutton+15
.14e0	68		               pla
.14e1	8d 05 1e	               sta  f5bbutton
.14e4	a2 05		               ldx  #<f5bbutton
.14e6	a0 1e		               ldy  #>f5bbutton
.14e8	20 4d 1f	               jsr  putscxy
.14eb	68		               pla
.14ec	aa		               tax
.14ed	68		               pla
.14ee	28		               plp
.14ef	20 54 17	               jsr  scrollup
.14f2	20 34 0e	               jsr  drawbitmap
.14f5	68		out            pla
.14f6	20 b5 1f	               jsr  push
.14f9	a2 9b		               ldx  #<blankmsg
.14fb	a0 18		               ldy  #>blankmsg
.14fd	20 4d 1f	               jsr  putscxy
.1500	a2 c7		               ldx  #<prompt_msg
.1502	a0 18		               ldy  #>prompt_msg
.1504	20 4d 1f	               jsr  putscxy
.1507	20 f4 1f	               jsr  pop
.150a	60		               rts
.150b			f6action
.150b	48		               pha
.150c	a9 00		               lda  #$0
.150e	8d 45 09	               sta  editmode
.1511	ad 46 09	               lda  fkeyset
.1514	d0 4d		               bne  menub
.1516	20 b5 1f	               jsr  push
.1519	a2 9b		               ldx  #<blankmsg
.151b	a0 18		               ldy  #>blankmsg
.151d	20 4d 1f	               jsr  putscxy
.1520	a2 84		               ldx  #<f6a_msg
.1522	a0 19		               ldy  #>f6a_msg
.1524	20 4d 1f	               jsr  putscxy
.1527	20 f4 1f	               jsr  pop
.152a	08		               php
.152b	48		               pha
.152c	8a		               txa
.152d	48		               pha
.152e	ad 4f 1d	               lda  f6abutton
.1531	48		               pha
.1532	a9 92		               lda  #146
.1534	8d 5e 1d	               sta  f6abutton+15
.1537	a9 01		               lda  #flashcol
.1539	8d 4f 1d	               sta  f6abutton
.153c	a2 4f		               ldx  #<f6abutton
.153e	a0 1d		               ldy  #>f6abutton
.1540	20 4d 1f	               jsr  putscxy
.1543	20 10 11	               jsr  delay
.1546	a9 12		               lda  #18
.1548	8d 5e 1d	               sta  f6abutton+15
.154b	68		               pla
.154c	8d 4f 1d	               sta  f6abutton
.154f	a2 4f		               ldx  #<f6abutton
.1551	a0 1d		               ldy  #>f6abutton
.1553	20 4d 1f	               jsr  putscxy
.1556	68		               pla
.1557	aa		               tax
.1558	68		               pla
.1559	28		               plp
.155a	20 0d 18	               jsr  fillchar
.155d	20 34 0e	               jsr  drawbitmap
.1560	4c ad 15	               jmp  out
.1563			menub
.1563	20 b5 1f	               jsr  push
.1566	a2 9b		               ldx  #<blankmsg
.1568	a0 18		               ldy  #>blankmsg
.156a	20 4d 1f	               jsr  putscxy
.156d	a2 2b		               ldx  #<f6b_msg
.156f	a0 1a		               ldy  #>f6b_msg
.1571	20 4d 1f	               jsr  putscxy
.1574	20 f4 1f	               jsr  pop
.1577	08		               php
.1578	48		               pha
.1579	8a		               txa
.157a	48		               pha
.157b	ad 1f 1e	               lda  f6bbutton
.157e	48		               pha
.157f	a9 92		               lda  #146
.1581	8d 2e 1e	               sta  f6bbutton+15
.1584	a9 01		               lda  #flashcol
.1586	8d 1f 1e	               sta  f6bbutton
.1589	a2 1f		               ldx  #<f6bbutton
.158b	a0 1e		               ldy  #>f6bbutton
.158d	20 4d 1f	               jsr  putscxy
.1590	20 10 11	               jsr  delay
.1593	a9 12		               lda  #18
.1595	8d 2e 1e	               sta  f6bbutton+15
.1598	68		               pla
.1599	8d 1f 1e	               sta  f6bbutton
.159c	a2 1f		               ldx  #<f6bbutton
.159e	a0 1e		               ldy  #>f6bbutton
.15a0	20 4d 1f	               jsr  putscxy
.15a3	68		               pla
.15a4	aa		               tax
.15a5	68		               pla
.15a6	28		               plp
.15a7	20 8c 17	               jsr  scrolldown
.15aa	20 34 0e	               jsr  drawbitmap
.15ad	68		out            pla
.15ae	20 b5 1f	               jsr  push
.15b1	a2 9b		               ldx  #<blankmsg
.15b3	a0 18		               ldy  #>blankmsg
.15b5	20 4d 1f	               jsr  putscxy
.15b8	a2 c7		               ldx  #<prompt_msg
.15ba	a0 18		               ldy  #>prompt_msg
.15bc	20 4d 1f	               jsr  putscxy
.15bf	20 f4 1f	               jsr  pop
.15c2	60		               rts
.15c3			f7action
.15c3	48		               pha
.15c4	a9 00		               lda  #$0
.15c6	8d 45 09	               sta  editmode
.15c9	ad 46 09	               lda  fkeyset
.15cc	d0 4d		               bne  menub
.15ce	20 b5 1f	               jsr  push
.15d1	a2 9b		               ldx  #<blankmsg
.15d3	a0 18		               ldy  #>blankmsg
.15d5	20 4d 1f	               jsr  putscxy
.15d8	a2 9e		               ldx  #<f7a_msg
.15da	a0 19		               ldy  #>f7a_msg
.15dc	20 4d 1f	               jsr  putscxy
.15df	20 f4 1f	               jsr  pop
.15e2	08		               php
.15e3	48		               pha
.15e4	8a		               txa
.15e5	48		               pha
.15e6	ad 69 1d	               lda  f7abutton
.15e9	48		               pha
.15ea	a9 92		               lda  #146
.15ec	8d 78 1d	               sta  f7abutton+15
.15ef	a9 01		               lda  #flashcol
.15f1	8d 69 1d	               sta  f7abutton
.15f4	a2 69		               ldx  #<f7abutton
.15f6	a0 1d		               ldy  #>f7abutton
.15f8	20 4d 1f	               jsr  putscxy
.15fb	20 10 11	               jsr  delay
.15fe	a9 12		               lda  #18
.1600	8d 78 1d	               sta  f7abutton+15
.1603	68		               pla
.1604	8d 69 1d	               sta  f7abutton
.1607	a2 69		               ldx  #<f7abutton
.1609	a0 1d		               ldy  #>f7abutton
.160b	20 4d 1f	               jsr  putscxy
.160e	68		               pla
.160f	aa		               tax
.1610	68		               pla
.1611	28		               plp
.1612	20 07 0f	               jsr  copycharset
.1615	20 34 0e	               jsr  drawbitmap
.1618	4c 6a 16	               jmp  out
.161b	a9 00		menub          lda  #$0
.161d	8d 45 09	               sta  editmode
.1620	20 b5 1f	               jsr  push
.1623	a2 9b		               ldx  #<blankmsg
.1625	a0 18		               ldy  #>blankmsg
.1627	20 4d 1f	               jsr  putscxy
.162a	a2 3f		               ldx  #<f7b_msg
.162c	a0 1a		               ldy  #>f7b_msg
.162e	20 4d 1f	               jsr  putscxy
.1631	20 f4 1f	               jsr  pop
.1634	08		               php
.1635	48		               pha
.1636	8a		               txa
.1637	48		               pha
.1638	ad 39 1e	               lda  f7bbutton
.163b	48		               pha
.163c	a9 92		               lda  #146
.163e	8d 48 1e	               sta  f7bbutton+15
.1641	a9 01		               lda  #flashcol
.1643	8d 39 1e	               sta  f7bbutton
.1646	a2 39		               ldx  #<f7bbutton
.1648	a0 1e		               ldy  #>f7bbutton
.164a	20 4d 1f	               jsr  putscxy
.164d	20 10 11	               jsr  delay
.1650	a9 12		               lda  #18
.1652	8d 48 1e	               sta  f7bbutton+15
.1655	68		               pla
.1656	8d 39 1e	               sta  f7bbutton
.1659	a2 39		               ldx  #<f7bbutton
.165b	a0 1e		               ldy  #>f7bbutton
.165d	20 4d 1f	               jsr  putscxy
.1660	68		               pla
.1661	aa		               tax
.1662	68		               pla
.1663	28		               plp
.1664	20 34 17	               jsr  reverse
.1667	20 34 0e	               jsr  drawbitmap
.166a	68		out            pla
.166b	20 b5 1f	               jsr  push
.166e	a2 9b		               ldx  #<blankmsg
.1670	a0 18		               ldy  #>blankmsg
.1672	20 4d 1f	               jsr  putscxy
.1675	a2 c7		               ldx  #<prompt_msg
.1677	a0 18		               ldy  #>prompt_msg
.1679	20 4d 1f	               jsr  putscxy
.167c	20 f4 1f	               jsr  pop
.167f	60		               rts
.1680			f8action
.1680	48		               pha
.1681	a9 00		               lda  #$0
.1683	8d 45 09	               sta  editmode
.1686	ad 46 09	               lda  fkeyset
.1689	d0 47		               bne  menub
.168b	20 b5 1f	               jsr  push
.168e	a2 9b		               ldx  #<blankmsg
.1690	a0 18		               ldy  #>blankmsg
.1692	20 4d 1f	               jsr  putscxy
.1695	a2 71		               ldx  #<menub_msg
.1697	a0 1a		               ldy  #>menub_msg
.1699	20 4d 1f	               jsr  putscxy
.169c	20 f4 1f	               jsr  pop
.169f	08		               php
.16a0	48		               pha
.16a1	8a		               txa
.16a2	48		               pha
.16a3	ad 83 1d	               lda  f8abutton
.16a6	48		               pha
.16a7	a9 92		               lda  #146
.16a9	8d 92 1d	               sta  f8abutton+15
.16ac	a9 01		               lda  #flashcol
.16ae	8d 83 1d	               sta  f8abutton
.16b1	a2 83		               ldx  #<f8abutton
.16b3	a0 1d		               ldy  #>f8abutton
.16b5	20 4d 1f	               jsr  putscxy
.16b8	20 10 11	               jsr  delay
.16bb	a9 12		               lda  #18
.16bd	8d 92 1d	               sta  f8abutton+15
.16c0	68		               pla
.16c1	8d 83 1d	               sta  f8abutton
.16c4	a2 83		               ldx  #<f8abutton
.16c6	a0 1d		               ldy  #>f8abutton
.16c8	20 4d 1f	               jsr  putscxy
.16cb	68		               pla
.16cc	aa		               tax
.16cd	68		               pla
.16ce	28		               plp
.16cf	4c 16 17	               jmp  swapit
.16d2			menub
.16d2	20 b5 1f	               jsr  push
.16d5	a2 9b		               ldx  #<blankmsg
.16d7	a0 18		               ldy  #>blankmsg
.16d9	20 4d 1f	               jsr  putscxy
.16dc	a2 56		               ldx  #<menua_msg
.16de	a0 1a		               ldy  #>menua_msg
.16e0	20 4d 1f	               jsr  putscxy
.16e3	20 f4 1f	               jsr  pop
.16e6	08		               php
.16e7	48		               pha
.16e8	8a		               txa
.16e9	48		               pha
.16ea	ad 53 1e	               lda  f8bbutton
.16ed	48		               pha
.16ee	a9 92		               lda  #146
.16f0	8d 62 1e	               sta  f8bbutton+15
.16f3	a9 01		               lda  #flashcol
.16f5	8d 53 1e	               sta  f8bbutton
.16f8	a2 53		               ldx  #<f8bbutton
.16fa	a0 1e		               ldy  #>f8bbutton
.16fc	20 4d 1f	               jsr  putscxy
.16ff	20 10 11	               jsr  delay
.1702	a9 12		               lda  #18
.1704	8d 62 1e	               sta  f8bbutton+15
.1707	68		               pla
.1708	8d 53 1e	               sta  f8bbutton
.170b	a2 53		               ldx  #<f8bbutton
.170d	a0 1e		               ldy  #>f8bbutton
.170f	20 4d 1f	               jsr  putscxy
.1712	68		               pla
.1713	aa		               tax
.1714	68		               pla
.1715	28		               plp
.1716	49 ff		swapit         eor  #$ff
.1718	8d 46 09	               sta  fkeyset
.171b	20 a4 0f	               jsr  drawfkeys
.171e	68		               pla
.171f	20 b5 1f	               jsr  push
.1722	a2 9b		               ldx  #<blankmsg
.1724	a0 18		               ldy  #>blankmsg
.1726	20 4d 1f	               jsr  putscxy
.1729	a2 c7		               ldx  #<prompt_msg
.172b	a0 18		               ldy  #>prompt_msg
.172d	20 4d 1f	               jsr  putscxy
.1730	20 f4 1f	               jsr  pop
.1733	60		               rts
.1734			reverse
.1734	20 b5 1f	               jsr  push
.1737	48		               pha
.1738	ad 4b 09	               lda  mapaddr
.173b	85 fd		               sta  $fd
.173d	ad 4c 09	               lda  mapaddr+1
.1740	85 fe		               sta  $fe
.1742	68		               pla
.1743	a0 00		               ldy  #$00
.1745	b1 fd		again          lda  (zpage2),y
.1747	49 ff		               eor  #$ff
.1749	91 fd		               sta  (zpage2),y
.174b	c8		               iny
.174c	c0 08		               cpy  #$08
.174e	d0 f5		               bne  again
.1750	20 f4 1f	               jsr  pop
.1753	60		               rts
.1754			scrollup
.1754	20 b5 1f	               jsr  push
.1757	48		               pha
.1758	ad 4b 09	               lda  mapaddr
.175b	85 fb		               sta  $fb
.175d	ad 4c 09	               lda  mapaddr+1
.1760	85 fc		               sta  $fc
.1762	68		               pla
.1763	48		               pha
.1764	ad 4b 09	               lda  mapaddr
.1767	85 fd		               sta  $fd
.1769	ad 4c 09	               lda  mapaddr+1
.176c	85 fe		               sta  $fe
.176e	68		               pla
.176f	20 d4 20	               jsr  inczp2
.1772	a0 00		               ldy  #$00
.1774	b1 fb		               lda  (zpage1),y
.1776	8d 8b 17	               sta  tmpbyte
.1779	b1 fd		again          lda  (zpage2),y
.177b	91 fb		               sta  (zpage1),y
.177d	c8		               iny
.177e	c0 07		               cpy  #$07
.1780	d0 f7		               bne  again
.1782	ad 8b 17	               lda  tmpbyte
.1785	91 fb		               sta  (zpage1),y
.1787	20 f4 1f	               jsr  pop
.178a	60		               rts
>178b	00		tmpbyte        .byte     $00
.178c			scrolldown
.178c	20 b5 1f	               jsr  push
.178f	48		               pha
.1790	ad 4b 09	               lda  mapaddr
.1793	85 fb		               sta  $fb
.1795	ad 4c 09	               lda  mapaddr+1
.1798	85 fc		               sta  $fc
.179a	68		               pla
.179b	48		               pha
.179c	ad 4b 09	               lda  mapaddr
.179f	85 fd		               sta  $fd
.17a1	ad 4c 09	               lda  mapaddr+1
.17a4	85 fe		               sta  $fe
.17a6	68		               pla
.17a7	20 d4 20	               jsr  inczp2
.17aa	a0 07		               ldy  #$07                ;xxxxxxxx zpage1
.17ac	b1 fb		               lda  (zpage1),y          ;xxxxxxxx zpage2
.17ae	8d c5 17	               sta  tmpbyte             ;xxxxxxxx
.17b1	88		again          dey                      ;xxxxxxxx
.17b2	b1 fb		               lda  (zpage1),y          ;xxxxxxxx
.17b4	91 fd		               sta  (zpage2),y          ;xxxxxxxx
.17b6	c0 00		               cpy  #$00                ;xxxxxxxx
.17b8	d0 f7		               bne  again               ;xxxxxxxx
.17ba	a0 00		               ldy  #$00
.17bc	ad c5 17	               lda  tmpbyte
.17bf	91 fb		               sta  (zpage1),y
.17c1	20 f4 1f	               jsr  pop
.17c4	60		               rts
>17c5	00		tmpbyte        .byte     $00
.17c6			scrollright
.17c6	20 b5 1f	               jsr  push
.17c9	48		               pha
.17ca	ad 4b 09	               lda  mapaddr
.17cd	85 fb		               sta  $fb
.17cf	ad 4c 09	               lda  mapaddr+1
.17d2	85 fc		               sta  $fc
.17d4	68		               pla
.17d5	a0 00		               ldy  #$00
.17d7	b1 fb		again          lda  (zpage1),y
.17d9	18		               clc
.17da	6a		               ror
.17db	90 03		               bcc  zero
.17dd	18		               clc
.17de	69 80		one            adc  #$80
.17e0	91 fb		zero           sta  (zpage1),y
.17e2	c8		               iny
.17e3	c0 08		               cpy  #$08
.17e5	d0 f0		               bne  again
.17e7	20 f4 1f	               jsr  pop
.17ea	60		               rts
.17eb			scrollleft
.17eb	20 b5 1f	               jsr  push
.17ee	48		               pha
.17ef	ad 4b 09	               lda  mapaddr
.17f2	85 fb		               sta  $fb
.17f4	ad 4c 09	               lda  mapaddr+1
.17f7	85 fc		               sta  $fc
.17f9	68		               pla
.17fa	a0 00		               ldy  #$00
.17fc	b1 fb		again          lda  (zpage1),y
.17fe	18		               clc
.17ff	2a		               rol
.1800	69 00		               adc  #$00
.1802	91 fb		               sta  (zpage1),y
.1804	c8		               iny
.1805	c0 08		               cpy  #$08
.1807	d0 f3		               bne  again
.1809	20 f4 1f	               jsr  pop
.180c	60		               rts
.180d			fillchar
.180d	20 b5 1f	               jsr  push
.1810	a9 ff		               lda  #$ff
.1812	20 25 18	               jsr  allsame
.1815	20 f4 1f	               jsr  pop
.1818	60		               rts
.1819			clearchar
.1819	20 b5 1f	               jsr  push
.181c	a9 00		               lda  #$00
.181e	20 25 18	               jsr  allsame
.1821	20 f4 1f	               jsr  pop
.1824	60		               rts
.1825			allsame
.1825	48		               pha
.1826	ad 4b 09	               lda  mapaddr
.1829	85 fd		               sta  $fd
.182b	ad 4c 09	               lda  mapaddr+1
.182e	85 fe		               sta  $fe
.1830	68		               pla
.1831	a0 00		               ldy  #$00
.1833	91 fd		again          sta  (zpage2),y
.1835	c8		               iny
.1836	c0 08		               cpy  #$08
.1838	d0 f9		               bne  again
.183a	60		               rts
.183b			fliphorz
.183b	20 b5 1f	               jsr  push
.183e	48		               pha
.183f	ad 4b 09	               lda  mapaddr
.1842	85 fd		               sta  $fd
.1844	ad 4c 09	               lda  mapaddr+1
.1847	85 fe		               sta  $fe
.1849	68		               pla
.184a	a0 00		               ldy  #$00
.184c	b1 fd		nextbyte       lda  (zpage2),y
.184e	a2 00		               ldx  #$00
.1850	2a		rolagain       rol
.1851	6e 67 18	               ror  tmpbyte
.1854	e8		               inx
.1855	e0 08		               cpx  #$08
.1857	30 f7		               bmi  rolagain
.1859	ad 67 18	               lda  tmpbyte
.185c	91 fd		               sta  (zpage2),y
.185e	c8		               iny
.185f	c0 08		               cpy  #$08
.1861	30 e9		               bmi  nextbyte
.1863	20 f4 1f	               jsr  pop
.1866	60		               rts
>1867	00		tmpbyte        .byte     $00
.1868			flipvert
.1868	20 b5 1f	               jsr  push
.186b	48		               pha
.186c	ad 4b 09	               lda  mapaddr
.186f	85 fd		               sta  $fd
.1871	ad 4c 09	               lda  mapaddr+1
.1874	85 fe		               sta  $fe
.1876	68		               pla
.1877	a0 00		               ldy  #$00
.1879	b1 fd		tostack        lda  (zpage2),y
.187b	48		               pha
.187c	c8		               iny
.187d	c0 08		               cpy  #$08
.187f	d0 f8		               bne  tostack
.1881	a0 00		               ldy  #$00
.1883	68		fromstack      pla
.1884	91 fd		               sta  (zpage2),y
.1886	c8		               iny
.1887	c0 08		               cpy  #$08
.1889	d0 f8		               bne  fromstack
.188b	20 f4 1f	               jsr  pop
.188e	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: messages.asm

>188f	0a 01 05	editor_msg     .byte vrose,1,5
>1892	5b 45 44 49	               .null     "[editor]"
>1896	54 4f 52 5d 00
>189b	03 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>189f	20 20 20 20	               .null     "                                       "
>18a3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>18b3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>18c3	20 20 20 00
>18c7	03 00 05 92	prompt_msg     .byte     mesgcol,0,5,146
>18cb	20 45 4e 54	               .null     " enter f-key command :"
>18cf	45 52 20 46 2d 4b 45 59 20 43 4f 4d 4d 41 4e 44
>18df	20 3a 00
.18e2			f1a_msg
>18e2	03 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>18e6	20 45 44 49	               .null     " edit mode: chr$(   )",146
>18ea	54 20 4d 4f 44 45 3a 20 43 48 52 24 28 20 20 20
>18fa	29 92 00
.18fd			f2a_msg
>18fd	03 00 05	copy_msg       .byte     mesgcol,0,5
>1900	20 45 4e 54	               .null     " enter character to copy:"
>1904	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>1914	43 4f 50 59 3a 00
.191a			f3a_msg
>191a	03 00 05 92	save_msg       .byte     mesgcol,0,5,146
>191e	20 53 41 56	               .null     " save on cassette or disk? (c/d): "
>1922	45 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>1932	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 20 00
.1941			f4a_msg
>1941	03 00 05 92	load_msg       .byte     mesgcol,0,5,146
>1945	20 4c 4f 41	               .null     " load from cassette or disk? (c/d): "
>1949	44 20 46 52 4f 4d 20 43 41 53 53 45 54 54 45 20
>1959	4f 52 20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 20
>1969	00
.196a			f5a_msg
>196a	03 00 05	clear_msg      .byte     mesgcol,0,5
>196d	20 43 4c 45	               .null     " clear char: chr$(   )"
>1971	41 52 20 43 48 41 52 3a 20 43 48 52 24 28 20 20
>1981	20 29 00
.1984			f6a_msg
>1984	03 00 05	fill_msg       .byte     mesgcol,0,5
>1987	20 46 49 4c	               .null     " fill char:  chr$(   )"
>198b	4c 20 43 48 41 52 3a 20 20 43 48 52 24 28 20 20
>199b	20 29 00
.199e			f7a_msg
>199e	03 00 05	work_msg       .byte     mesgcol,0,5
>19a1	20 52 45 53	               .null     " restoring all characters."
>19a5	54 4f 52 49 4e 47 20 41 4c 4c 20 43 48 41 52 41
>19b5	43 54 45 52 53 2e 00
.19bc			f1b_msg
>19bc	03 00 05	invr_msg       .byte     mesgcol,0,5
>19bf	20 46 4c 49	               .null     " flipping vertically:"
>19c3	50 50 49 4e 47 20 56 45 52 54 49 43 41 4c 4c 59
>19d3	3a 00
.19d5			f2b_msg
>19d5	03 00 05	flip_msg       .byte     mesgcol,0,5
>19d8	20 46 4c 49	               .null     " flipping horizontally:"
>19dc	50 50 49 4e 47 20 48 4f 52 49 5a 4f 4e 54 41 4c
>19ec	4c 59 3a 00
.19f0			f3b_msg
>19f0	03 00 05	scrollr_msg    .byte     mesgcol,0,5
>19f3	20 53 43 52	               .null     " scrolling right:"
>19f7	4f 4c 4c 49 4e 47 20 52 49 47 48 54 3a 00
.1a05			f4b_msg
>1a05	03 00 05	scrolll_msg    .byte     mesgcol,0,5
>1a08	20 53 43 52	               .null     " scrolling left:"
>1a0c	4f 4c 4c 49 4e 47 20 4c 45 46 54 3a 00
.1a19			f5b_msg
>1a19	03 00 05	scrollu_msg    .byte     mesgcol,0,5
>1a1c	20 53 43 52	               .null     " scrolling up:"
>1a20	4f 4c 4c 49 4e 47 20 55 50 3a 00
.1a2b			f6b_msg
>1a2b	03 00 05	scrolld_msg    .byte     mesgcol,0,5
>1a2e	20 53 43 52	               .null     " scrolling down:"
>1a32	4f 4c 4c 49 4e 47 20 44 4f 57 4e 3a 00
.1a3f			f7b_msg
>1a3f	03 00 05	rvrs_msg       .byte     mesgcol,0,5
>1a42	20 52 45 56	               .null     " reverse character:"
>1a46	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
>1a56	03 00 05	menua_msg      .byte     mesgcol,0,5
>1a59	20 59 4f 55	               .null     " you are now in menu a."
>1a5d	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>1a6d	20 41 2e 00
>1a71	03 00 05	menub_msg      .byte     mesgcol,0,5
>1a74	20 59 4f 55	               .null     " you are now in menu b."
>1a78	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>1a88	20 42 2e 00
>1a8c	07 00 05	copychar_msg   .byte     vjaune,0,5
>1a8f	20 45 4e 54	               .null     " enter character to copy from (?).",157,157,157
>1a93	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>1aa3	43 4f 50 59 20 46 52 4f 4d 20 28 3f 29 2e 9d 9d
>1ab3	9d 00
>1ab5	07 00 05	fname_msg      .byte     vjaune,0,5
>1ab8	20 45 4e 54	               .null     " enter a 6 letter filename : ",$a4,$a4,$a4,$a4,$a4,$a4,".chr",157,157,157,157,157,157,157,157,157,157
>1abc	45 52 20 41 20 36 20 4c 45 54 54 45 52 20 46 49
>1acc	4c 45 4e 41 4d 45 20 3a 20 a4 a4 a4 a4 a4 a4 2e
>1adc	43 48 52 9d 9d 9d 9d 9d 9d 9d 9d 9d 9d 00
>1aea	0e 15 18 12	quit_msg       .byte     vblue1,21,24,18
>1aee	43 54 52 4c	               .text     "ctrl-x",146
>1af2	2d 58 92
>1af5	20 54 4f 20	               .null     " to quit."
>1af9	51 55 49 54 2e 00
.1aff			menu_msg
>1aff	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>1b03	43 54 52 4c	               .text     "ctrl-x",146
>1b07	2d 58 92
>1b0a	20 54 4f 20	               .null     " to menu."
>1b0e	4d 45 4e 55 2e 00
>1b14	07 04 06 12	whoami0        .byte     whoamicol,4,6,18
>1b18	20 20 20 20	               .null     "                               ",146
>1b1c	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b2c	20 20 20 20 20 20 20 20 20 20 20 92 00
>1b39	07 04 07 12	whoami1        .byte     whoamicol,4,7,18
>1b3d	20 20 20 20	               .null     "          ",146," charedit ",18,"           ",146
>1b41	20 20 20 20 20 20 92 20 43 48 41 52 45 44 49 54
>1b51	20 12 20 20 20 20 20 20 20 20 20 20 20 92 00
>1b60	07 04 08 12	whoami2        .byte     whoamicol,4,8,18
>1b64	20 20 20 20	               .null     "                               ",146
>1b68	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b78	20 20 20 20 20 20 20 20 20 20 20 92 00
>1b85	07 04 09 12	whoami3        .byte     whoamicol,4,9,18
>1b89	20 20 49 4e	               .null     "  inspired from john heilborn  ",146
>1b8d	53 50 49 52 45 44 20 46 52 4f 4d 20 4a 4f 48 4e
>1b9d	20 48 45 49 4c 42 4f 52 4e 20 20 92 00
>1baa	07 04 0a 12	whoami4        .byte     whoamicol,4,10,18
>1bae	20 20 20 20	               .null     "      isbn: 0-942386-29-9      ",146
>1bb2	20 20 49 53 42 4e 3a 20 30 2d 39 34 32 33 38 36
>1bc2	2d 32 39 2d 39 20 20 20 20 20 20 92 00
>1bcf	07 04 0b 12	whoami5        .byte     whoamicol,4,11,18
>1bd3	20 20 20 20	               .null     "                               ",146
>1bd7	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1be7	20 20 20 20 20 20 20 20 20 20 20 92 00
>1bf4	07 04 0c 12	whoami6        .byte     whoamicol,4,12,18
>1bf8	20 43 4f 44	               .null     " coded in assembly language by ",146
>1bfc	45 44 20 49 4e 20 41 53 53 45 4d 42 4c 59 20 4c
>1c0c	41 4e 47 55 41 47 45 20 42 59 20 92 00
>1c19	07 04 0d 12	whoami7        .byte     whoamicol,4,13,18
>1c1d	20 20 20 20	               .null     "     daniel lafrance 2023      ",146
>1c21	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>1c31	20 32 30 32 33 20 20 20 20 20 20 92 00
>1c3e	07 04 0e 12	whoami8        .byte     whoamicol,4,14,18
>1c42	20 20 20 20	               .null     "    version:",version,"    ",146
>1c46	56 45 52 53 49 4f 4e 3a 32 30 32 33 31 31 31 35
>1c56	2d 31 36 34 32 30 38 20 20 20 20 92 00
>1c63	07 04 0f 12	whoami9        .byte     whoamicol,4,15,18
>1c67	20 20 20 20	               .null     "                               ",146
>1c6b	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1c7b	20 20 20 20 20 20 20 20 20 20 20 92 00
>1c88	03 06 10 14	bye_msg        .byte     vcyan,6,16,20
>1c8c	20 54 48 41	               .null     " thanks and have a good day ",146
>1c90	4e 4b 53 20 41 4e 44 20 48 41 56 45 20 41 20 47
>1ca0	4f 4f 44 20 44 41 59 20 92 00
>1caa	0d 05 18 12	any_msg        .byte     vvert1,5,24,18
>1cae	20 20 55 53	               .null         "  use the [anykey] to basic  ",146
>1cb2	45 20 54 48 45 20 5b 41 4e 59 4b 45 59 5d 20 54
>1cc2	4f 20 42 41 53 49 43 20 20 92 00
=18			fkeyleft=18
=8			f1top=8
>1ccd	01 12 08	f1abutton      .byte     menu1col1,fkeyleft,f1top       ;133
>1cd0	45 44 49 54	               .text     "edit char..."
>1cd4	20 43 48 41 52 2e 2e 2e
>1cdc	12		               .byte     18             ; position 15
>1cdd	a9 20 20 46	               .text     $a9,"  f1  ",223
>1ce1	31 20 20 df
>1ce5	92 00		               .byte     146,0
>1ce7	0f 12 09	f2abutton      .byte     menu1col2,fkeyleft,f1top+1     ;138
>1cea	43 4f 50 59	               .text     "copy from..."
>1cee	20 46 52 4f 4d 2e 2e 2e
>1cf6	12		               .byte     18   ; position 15
>1cf7	20 20 20 46	               .text     "   f2   "
>1cfb	32 20 20 20
>1cff	92 00		               .byte     146,0
>1d01	01 12 0b	f3abutton      .byte     menu1col1,fkeyleft,f1top+3     ;137
>1d04	53 41 56 45	               .text     "save to....."
>1d08	20 54 4f 2e 2e 2e 2e 2e
>1d10	12		               .byte     18            ; position 15
>1d11	a9 20 20 46	               .text     $a9,"  f3  ",223
>1d15	33 20 20 df
>1d19	92 00		               .byte     146,0
>1d1b	0f 12 0c	f4abutton      .byte     menu1col2,fkeyleft,f1top+4     ;134
>1d1e	4c 4f 41 44	               .text     "load from..."
>1d22	20 46 52 4f 4d 2e 2e 2e
>1d2a	12		               .byte     18             ; position 15
>1d2b	20 20 20 46	               .text     "   f4   "
>1d2f	34 20 20 20
>1d33	92 00		               .byte     146,0
>1d35	01 12 0e	f5abutton      .byte     menu1col1,fkeyleft,f1top+6     ;135
>1d38	43 4c 45 41	               .text     "clear......."
>1d3c	52 2e 2e 2e 2e 2e 2e 2e
>1d44	12		               .byte     18             ; position 15
>1d45	a9 20 20 46	               .text     $a9,"  f5  ",223
>1d49	35 20 20 df
>1d4d	92 00		               .byte     146,0
>1d4f	0f 12 0f	f6abutton      .byte     menu1col2,fkeyleft,f1top+7    ;139
>1d52	46 49 4c 4c	               .text     "fill........"
>1d56	2e 2e 2e 2e 2e 2e 2e 2e
>1d5e	12		               .byte     18             ; position 15
>1d5f	20 20 20 46	               .text     "   f6   "
>1d63	36 20 20 20
>1d67	92 00		               .byte     146,0
>1d69	01 12 11	f7abutton      .byte     menu1col1,fkeyleft,f1top+9    ;136
>1d6c	52 45 53 54	               .text     "restore all."
>1d70	4f 52 45 20 41 4c 4c 2e
>1d78	12		               .byte     18             ; position 15
>1d79	a9 20 20 46	               .text     $a9,"  f7  ",223
>1d7d	37 20 20 df
>1d81	92 00		               .byte     146,0
>1d83	0f 12 12	f8abutton      .byte     menu1col2,fkeyleft,f1top+10
>1d86	46 55 4e 43	               .text     "function...."
>1d8a	54 49 4f 4e 2e 2e 2e 2e
>1d92	12		               .byte     18             ; position 15
>1d93	20 20 20 46	               .text     "   f8   "
>1d97	38 20 20 20
>1d9b	92 00		               .byte     146,0
>1d9d	01 12 08	f1bbutton      .byte     menu2col1,fkeyleft,f1top
>1da0	46 4c 49 50	               .text     "flip vert..."
>1da4	20 56 45 52 54 2e 2e 2e
>1dac	12		               .byte     18             ; position 15
>1dad	a9 20 20 46	               .text     $a9,"  f1  ",223
>1db1	31 20 20 df
>1db5	92 00		               .byte     146,0
>1db7	0f 12 09	f2bbutton      .byte     menu2col2,fkeyleft,f1top+1
>1dba	46 4c 49 50	               .text     "flip horz..."
>1dbe	20 48 4f 52 5a 2e 2e 2e
>1dc6	12		               .byte     18             ; position 15
>1dc7	20 20 20 46	               .text     "   f2   "
>1dcb	32 20 20 20
>1dcf	92 00		               .byte     146,0
>1dd1	01 12 0b	f3bbutton      .byte     menu2col1,fkeyleft,f1top+3
>1dd4	53 43 52 4f	               .text     "scroll right"
>1dd8	4c 4c 20 52 49 47 48 54
>1de0	12		               .byte     18             ; position 15
>1de1	a9 20 20 46	               .text     $a9,"  f3  ",223
>1de5	33 20 20 df
>1de9	92 00		               .byte     146,0
>1deb	0f 12 0c	f4bbutton      .byte     menu2col2,fkeyleft,f1top+4
>1dee	53 43 52 4f	               .text     "scroll left."
>1df2	4c 4c 20 4c 45 46 54 2e
>1dfa	12		               .byte     18             ; position 15
>1dfb	20 20 20 46	               .text     "   f4   "
>1dff	34 20 20 20
>1e03	92 00		               .byte     146,0
>1e05	01 12 0e	f5bbutton      .byte     menu2col1,fkeyleft,f1top+6
>1e08	53 43 52 4f	               .text     "scroll up..."
>1e0c	4c 4c 20 55 50 2e 2e 2e
>1e14	12		               .byte     18             ; position 15
>1e15	a9 20 20 46	               .text     $a9,"  f5  ",223
>1e19	35 20 20 df
>1e1d	92 00		               .byte     146,0
>1e1f	0f 12 0f	f6bbutton      .byte     menu2col2,fkeyleft,f1top+7
>1e22	53 43 52 4f	               .text     "scroll down."
>1e26	4c 4c 20 44 4f 57 4e 2e
>1e2e	12		               .byte     18             ; position 15
>1e2f	20 20 20 46	               .text     "   f6   "
>1e33	36 20 20 20
>1e37	92 00		               .byte     146,0
>1e39	01 12 11	f7bbutton      .byte     menu2col1,fkeyleft,f1top+9
>1e3c	52 45 56 45	               .text     "reverse bits"
>1e40	52 53 45 20 42 49 54 53
>1e48	12		               .byte     18             ; position 15
>1e49	a9 20 20 46	               .text     $a9,"  f7  ",223
>1e4d	37 20 20 df
>1e51	92 00		               .byte     146,0
>1e53	0f 12 12	f8bbutton      .byte     menu2col2,fkeyleft,f1top+10
>1e56	46 55 4e 43	               .text     "function...."
>1e5a	54 49 4f 4e 2e 2e 2e 2e
>1e62	12		               .byte     18             ; position 15
>1e63	20 20 20 46	               .text     "   f8   "
>1e67	38 20 20 20
>1e6b	92 00		               .byte     146,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.1e6d			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.1e6d			screendis
.1e6d	08		               php
.1e6e	48		               pha
.1e6f	ad 11 d0	               lda  $d011
.1e72	29 ef		               and  #%11101111
.1e74	8d 11 d0	               sta  $d011
.1e77	68		               pla
.1e78	28		               plp
.1e79	60		               rts
.1e7a			screenena
.1e7a	08		               php
.1e7b	48		               pha
.1e7c	ad 11 d0	               lda  $d011
.1e7f	09 10		               ora  #%00010000
.1e81	8d 11 d0	               sta  $d011
.1e84	68		               pla
.1e85	28		               plp
.1e86	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.1e87			scrmaninit
.1e87	20 b5 1f	               jsr  push
.1e8a	a9 06		               lda  #vbleu
.1e8c	8d 21 d0	               sta  vicbackcol
.1e8f	a9 05		               lda  #vvert
.1e91	8d 20 d0	               sta  vicbordcol
.1e94	a9 01		               lda  #vblanc
.1e96	8d 86 02	               sta  bascol
.1e99	ad 00 04	               lda  scrnram
.1e9c	8d 00 04	               sta  scrnram
.1e9f	20 a7 1e	               jsr  cls
.1ea2	20 f4 1f	               jsr  pop
.1ea5	60		               rts
>1ea6	8e		characterset   .byte b_uppercase
.1ea7			cls
.1ea7	08		               php
.1ea8	48		               pha
.1ea9	a9 93		               lda  #$93
.1eab	20 be 1e	               jsr  putch
.1eae	68		               pla
.1eaf	28		               plp
.1eb0	60		               rts
.1eb1			putnch
.1eb1	08		               php
.1eb2	e0 00		               cpx  #$00
.1eb4	f0 06		               beq  out
.1eb6	20 d2 ff	again          jsr  $ffd2
.1eb9	ca		               dex
.1eba	d0 fa		               bne  again
.1ebc	28		out            plp
.1ebd	60		               rts
.1ebe			putch
.1ebe	08		               php
.1ebf	20 d2 ff	               jsr  $ffd2
.1ec2	28		               plp
.1ec3	60		               rts
.1ec4			puts
.1ec4	20 b5 1f	               jsr  push
.1ec7	86 fb		               stx  zpage1
.1ec9	84 fc		               sty  zpage1+1
.1ecb	a0 00		               ldy  #0
.1ecd	b1 fb		next           lda  (zpage1),y
.1ecf	f0 09		               beq  exit
.1ed1	20 be 1e	               jsr  putch
.1ed4	20 bc 20	               jsr  inczp1
.1ed7	4c cd 1e	               jmp  next
.1eda	20 f4 1f	exit           jsr  pop
.1edd	60		               rts
.1ede			gotoxy
.1ede	08		               php
.1edf	18		               clc
.1ee0	8a		               txa
.1ee1	48		               pha
.1ee2	98		               tya
.1ee3	aa		               tax
.1ee4	68		               pla
.1ee5	a8		               tay
.1ee6	20 f0 ff	               jsr  kplot
.1ee9	28		               plp
.1eea	60		               rts
.1eeb			cursor
=$0286			bascol    =    $0286
.1eeb	08		               php
.1eec	48		               pha
.1eed	90 12		               bcc  restore
.1eef	20 f0 ff	               jsr  kplot
.1ef2	8c 13 1f	               sty  cx
.1ef5	8e 14 1f	               stx  cy
.1ef8	ad 86 02	               lda  bascol
.1efb	8d 15 1f	               sta  bcol
.1efe	4c 10 1f	               jmp  out
.1f01	ae 14 1f	restore        ldx  cy
.1f04	ac 13 1f	               ldy  cx
.1f07	20 f0 ff	               jsr  kplot
.1f0a	ad 15 1f	               lda  bcol
.1f0d	8d 86 02	               sta  bascol
.1f10	68		out            pla
.1f11	28		               plp
.1f12	60		               rts
>1f13	00		cx   .byte     $00
>1f14	00		cy   .byte     $00
>1f15	00		bcol .byte     $00
.1f16			cursave
.1f16	08		               php
.1f17	38		               sec
.1f18	20 eb 1e	               jsr  cursor
.1f1b	28		               plp
.1f1c	60		               rts
.1f1d			curput
.1f1d	08		               php
.1f1e	18		               clc
.1f1f	20 eb 1e	               jsr  cursor
.1f22	28		               plp
.1f23	60		               rts
.1f24			putsxy
.1f24	20 b5 1f	               jsr  push
.1f27	86 fb		               stx  zpage1
.1f29	84 fc		               sty  zpage1+1
.1f2b	a0 00		               ldy  #$00
.1f2d	b1 fb		               lda  (zpage1),y
.1f2f	aa		               tax
.1f30	20 bc 20	               jsr  inczp1
.1f33	b1 fb		               lda  (zpage1),y
.1f35	a8		               tay
.1f36	20 de 1e	               jsr  gotoxy
.1f39	20 bc 20	               jsr  inczp1
.1f3c	a6 fb		               ldx  zpage1
.1f3e	a4 fc		               ldy  zpage1+1
.1f40	20 c4 1e	               jsr  puts
.1f43	20 f4 1f	               jsr  pop
.1f46	60		               rts
>1f47	00 00		straddr   .word     $00
>1f49	00		px        .byte     $00
>1f4a	00		py        .byte     $00
>1f4b	00 00		zp1       .word     $00
.1f4d			putscxy
.1f4d	20 b5 1f	               jsr  push
.1f50	84 fc		               sty  zpage1+1
.1f52	86 fb		               stx  zpage1
.1f54	ad 86 02	               lda  bascol
.1f57	8d 77 1f	               sta  bc
.1f5a	a0 00		               ldy #$00
.1f5c	b1 fb		               lda  (zpage1),y
.1f5e	8d 86 02	               sta  bascol
.1f61	20 bc 20	               jsr  inczp1
.1f64	a6 fb		               ldx  zpage1
.1f66	a4 fc		               ldy  zpage1+1
.1f68	20 24 1f	               jsr  putsxy
.1f6b	ad 77 1f	               lda  bc
.1f6e	8d 86 02	               sta  bascol
.1f71	20 f4 1f	               jsr  pop
.1f74	60		               rts
>1f75	00 00		straddr  .word      $00
>1f77	00		bc       .byte      $00
>1f78	00 00		zp1      .word      $00
.1f7a			putrahex
.1f7a	08		               php
.1f7b	48		               pha
.1f7c	20 d2 21	               jsr  a2hex
.1f7f	a9 71		               lda  #<a2hexstr
.1f81	a0 21		               ldy  #>a2hexstr
.1f83	20 c4 1e	               jsr  puts
.1f86	68		               pla
.1f87	28		               plp
.1f88	60		               rts
.1f89			kputrahexxy
.1f89			bputrahexxy
.1f89			putrahexxy
.1f89	08		               php
.1f8a	20 d2 21	               jsr  a2hex
.1f8d	a9 6e		               lda  #<a2hexpos
.1f8f	a0 21		               ldy  #>a2hexpos
.1f91	20 24 1f	               jsr  putsxy
.1f94	68		               pla
.1f95	28		               plp
.1f96	60		               rts
.1f97			putrahexcxy
.1f97	08		               php
.1f98	20 d2 21	               jsr  a2hex
.1f9b	a9 6e		               lda  #<a2hexpos
.1f9d	a0 21		               ldy  #>a2hexpos
.1f9f	20 4d 1f	               jsr  putscxy
.1fa2	68		               pla
.1fa3	28		               plp
.1fa4	60		               rts
.1fa5			setinverse
.1fa5	48		               pha
.1fa6	a9 12		               lda  #$12
.1fa8	20 d2 ff	               jsr  $ffd2
.1fab	68		               pla
.1fac	60		               rts
.1fad			clrinverse
.1fad	48		               pha
.1fae	a9 92		               lda  #$92
.1fb0	20 d2 ff	               jsr  $ffd2
.1fb3	68		               pla
.1fb4	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.1fb5			push
.1fb5	08		          php            ; stack : flg, pcl, pch
.1fb6	78		          sei
.1fb7	8d f1 1f	          sta  ra        ; save a
.1fba	68		          pla            ; stack : pcl, pch
.1fbb	8d f0 1f	          sta  rp        ; save rp
.1fbe	68		          pla            ; stack : pch
.1fbf	8d f2 1f	          sta  pc        ; save pcl
.1fc2	68		          pla            ; stack : -
.1fc3	8d f3 1f	          sta  pc+1      ; save pch
.1fc6	a5 fb		          lda  zpage1    ; get zpage1 low byte
.1fc8	48		          pha            ; stack : zp1l
.1fc9	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.1fcb	48		          pha            ; stack : zp1h, zp1l
.1fcc	a5 fd		          lda  zpage2    ; get zpage2 low byte
.1fce	48		          pha            ; stack : zp2l, zp1h, zp1l
.1fcf	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.1fd1	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1fd2	ad f0 1f	          lda  rp        ; get rp
.1fd5	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1fd6	ad f1 1f	          lda  ra        ; get a
.1fd9	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1fda	8a		          txa            ; get x
.1fdb	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1fdc	98		          tya            ; get y
.1fdd	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1fde	ad f3 1f	          lda  pc+1      ; get pch
.1fe1	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1fe2	ad f2 1f	          lda  pc        ; get pcl
.1fe5	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1fe6	ad f0 1f	          lda  rp        ; get rp
.1fe9	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1fea	ad f1 1f	          lda  ra        ; get a
.1fed	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1fee	58		          cli
.1fef	60		          rts
>1ff0	00		rp        .byte     0
>1ff1	00		ra        .byte     0
>1ff2	00 00		pc        .word     0
.1ff4			pull
.1ff4			pop
.1ff4	78		          sei
.1ff5	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1ff6	8d 29 20	          sta  pc        ; save pcl
.1ff9	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1ffa	8d 2a 20	          sta  pc+1      ; save pch
.1ffd	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1ffe	a8		          tay            ; set y
.1fff	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.2000	aa		          tax            ; set x
.2001	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.2002	8d 28 20	          sta  ra        ; save a
.2005	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.2006	8d 27 20	          sta  rp        ; save rp
.2009	68		          pla            ; stack : zp2l, zp1h, zp1l
.200a	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.200c	68		          pla            ; stack : zp1h, zp1l
.200d	85 fd		          sta  zpage2    ; get zpage2 High byte
.200f	68		          pla            ; stack : zp1l
.2010	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.2012	68		          pla            ; stack :
.2013	85 fb		          sta  zpage1    ; get zpage1 High byte
.2015	ad 2a 20	          lda  pc+1      ; get pch
.2018	48		          pha            ; stack : pch
.2019	ad 29 20	          lda  pc
.201c	48		          pha            ; stack : pcl, pch
.201d	ad 27 20	          lda  rp        ; get rp
.2020	48		          pha            ; stack : rp, pcl, pch
.2021	ad 28 20	          lda  ra        ; set ra
.2024	58		          cli
.2025	28		          plp            ; stack : pcl, pch
.2026	60		          rts
>2027	00		rp        .byte     0
>2028	00		ra        .byte     0
>2029	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.202b			blkfill
.202b	20 b5 1f	bf0            jsr  push
.202e	20 ec 20	               jsr  savezp1
.2031	84 fc		               sty  zpage1+1
.2033	a0 00		               ldy  #$00
.2035	84 fb		               sty  zpage1
.2037	91 fb		bf1            sta  (zpage1),y
.2039	c8		               iny
.203a	d0 fb		               bne  bf1
.203c	20 fb 20	               jsr  restzp1
.203f	20 f4 1f	               jsr  pop
.2042	60		               rts
.2043			memfill
.2043	20 b5 1f	               jsr  push
.2046	20 2b 20	mf1            jsr  blkfill
.2049	c8		               iny
.204a	ca		               dex
.204b	d0 f9		               bne  mf1
.204d	20 f4 1f	               jsr  pop
.2050	60		               rts
.2051			memmove
.2051	20 b5 1f	               jsr  push
.2054	ba		               tsx            ; On se crée un pointeur ...
.2055	8a		               txa
.2056	18		               clc
.2057	69 0b		               adc  #11
.2059	a8		               tay
.205a	a2 06		               ldx  #$06
.205c	b9 00 01	nextbyte       lda  $0100,y
.205f	99 ab 20	               sta  words,y
.2062	c8		               iny
.2063	ca		               dex
.2064	d0 f6		               bne  nextbyte
.2066	ad ab 20	               lda  s
.2069	8d 82 20	               sta  source+1
.206c	ad ac 20	               lda  s+1
.206f	8d 83 20	               sta  source+2
.2072	ad ad 20	               lda  d
.2075	8d 7f 20	               sta  destin+1
.2078	ad ae 20	               lda  d+1
.207b	8d 80 20	               sta  destin+2
.207e	ad ff ff	destin         lda  $ffff
.2081	8d ff ff	source         sta  $ffff
.2084	ee 7f 20	               inc  destin+1
.2087	d0 03		               bne  src
.2089	ee 80 20	               inc  destin+2
.208c	ee 82 20	src            inc  source+1
.208f	d0 03		               bne  cnt
.2091	ee 83 20	               inc  source+2
.2094	ad af 20	cnt            lda  compte
.2097	d0 08		               bne  decit
.2099	ad b0 20	               lda  compte+1
.209c	f0 09		               beq  fini
.209e	ce b0 20	               dec  compte+1
.20a1	ce af 20	decit          dec  compte
.20a4	4c 7e 20	               jmp  destin
.20a7	20 f4 1f	fini           jsr  pop
.20aa	60		               rts
.20ab			words
>20ab	00 00		s         .word     $0000
>20ad	00 00		d         .word     $0000
>20af	00 00		compte    .word     $0000
.20b1			decword
.20b1	20 b5 1f	               jsr  push
.20b4	86 fd		               stx  zpage2
.20b6	84 fe		               sty  zpage2+1
.20b8	20 f4 1f	               jsr  pop
.20bb	60		               rts
.20bc			inczp1
.20bc	08		               php
.20bd	48		               pha
.20be	e6 fb		               inc  zpage1
.20c0	a5 fb		               lda  zpage1
.20c2	d0 02		               bne  nopage
.20c4	e6 fc		               inc  zpage1+1
.20c6	68		nopage         pla
.20c7	28		               plp
.20c8	60		               rts
.20c9			deczp1
.20c9	08		                php
.20ca	48		                pha
.20cb	c6 fb		                dec  zpage1
.20cd	d0 02		                bne  nopage
.20cf	c6 fc		                dec  zpage1+1
.20d1	68		nopage          pla
.20d2	28		                plp
.20d3	60		                rts
.20d4			inczp2
.20d4	08		               php
.20d5	48		               pha
.20d6	e6 fd		               inc  zpage2
.20d8	a5 fd		               lda  zpage2
.20da	d0 02		               bne  nopage
.20dc	e6 fe		               inc  zpage2+1
.20de	68		nopage         pla
.20df	28		               plp
.20e0	60		               rts
.20e1			deczp2
.20e1	08		               php
.20e2	48		               pha
.20e3	a5 fd		               lda  zpage2
.20e5	d0 02		               bne  nopage
.20e7	c6 fe		               dec  zpage2+1
.20e9	68		nopage         pla
.20ea	28		               plp
.20eb	60		               rts
.20ec			savezp1
.20ec	08		               php
.20ed	48		               pha
.20ee	a5 fb		               lda  zpage1
.20f0	8d 68 21	               sta  zp1
.20f3	a5 fc		               lda  zpage1+1
.20f5	8d 69 21	               sta  zp1+1
.20f8	68		               pla
.20f9	28		               plp
.20fa	60		               rts
.20fb			restzp1
.20fb	08		               php
.20fc	48		               pha
.20fd	ad 68 21	               lda zp1
.2100	85 fb		               sta zpage1
.2102	ad 69 21	               lda zp1+1
.2105	85 fc		               sta zpage1+1
.2107	68		               pla
.2108	28		               plp
.2109	60		               rts
.210a			savezp2
.210a	08		         php
.210b	48		         pha
.210c	a5 fd		         lda zpage2
.210e	8d 6a 21	         sta zp2
.2111	a5 fe		         lda zpage2+1
.2113	8d 6b 21	         sta zp2+1
.2116	68		         pla
.2117	28		         plp
.2118	60		         rts
.2119			restzp2
.2119	08		                php
.211a	48		                pha
.211b	ad 6a 21	                lda  zp2
.211e	85 fd		                sta  zpage2
.2120	ad 6b 21	                lda  zp2+1
.2123	85 fe		                sta  zpage2+1
.2125	68		                pla
.2126	28		                plp
.2127	60		                rts
.2128			xy2addr
.2128	08		                php
.2129	48		                pha
.212a	8a		                txa
.212b	48		                pha
.212c	98		                tya
.212d	48		                pha
.212e	ad 63 21	                lda     addr1+1
.2131	8d 65 21	                sta     addr2+1
.2134	ad 62 21	                lda     addr1
.2137	8d 64 21	                sta     addr2
.213a	c0 00		                cpy     #$00
.213c	f0 0f		                beq     addx
.213e	18		moreline        clc
.213f	6d 61 21	                adc     ymult
.2142	90 03		                bcc     norepy
.2144	ee 65 21	                inc     addr2+1
.2147	8d 64 21	norepy          sta     addr2
.214a	88		                dey
.214b	d0 f1		                bne     moreline
.214d	8a		addx            txa
.214e	18		                clc
.214f	6d 64 21	                adc     addr2
.2152	90 03		                bcc     thatsit
.2154	ee 65 21	                inc     addr2+1
.2157	8d 64 21	thatsit         sta     addr2
.215a	68		                pla
.215b	a8		                tay
.215c	68		                pla
.215d	aa		                tax
.215e	68		                pla
.215f	28		                plp
.2160	60		                rts
>2161	28		ymult          .byte     40
>2162	00 00		addr1          .word     $0000
>2164	00 00		addr2          .word     $0000
>2166	00 00		bytecnt        .word     $0000
>2168	00 00		zp1        .word   $0000
>216a	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>216c	01		a2hexcol       .byte     1              ; pour aputscxy
>216d	00		a2hexbkcol     .byte     %00000000
.216e			a2hexpos
>216e	00		a2hexpx        .byte     0              ; pour aputsxy
>216f	00		a2hexpy        .byte     0
>2170	24		a2hexprefix    .byte     "$"            ; pour aputs
>2171	00 00		a2hexstr       .word     $00
>2173	00 00		               .word     $00
>2175	00		               .byte     0              ; 0 end string
>2176	30 30 30 30	abin           .null     "00000000"
>217a	30 30 30 30 00
>217f	20 20 20 00	adec           .null     "   "
.2183			putahexfmtxy
.2183	20 b5 1f	               jsr  push
.2186	20 d2 21	               jsr  a2hex
.2189	ae 6e 21	               ldx  a2hexpx
.218c	ac 6f 21	               ldy  a2hexpy
.218f	20 de 1e	               jsr  gotoxy
.2192	a2 70		               ldx  #<a2hexprefix
.2194	a0 21		               ldy  #>a2hexprefix
.2196	20 c4 1e	               jsr  puts
.2199	20 f4 1f	               jsr  pop
.219c	60		               rts
.219d			putahexfmt
.219d	20 b5 1f	               jsr  push
.21a0	20 d2 21	               jsr  a2hex
.21a3	a2 70		               ldx  #<a2hexprefix
.21a5	a0 21		               ldy  #>a2hexprefix
.21a7	20 c4 1e	               jsr  puts
.21aa	20 f4 1f	               jsr  pop
.21ad	60		               rts
.21ae			putahex
.21ae	20 b5 1f	               jsr  push
.21b1	20 d2 21	               jsr  a2hex
.21b4	a2 71		               ldx  #<a2hexstr
.21b6	a0 21		               ldy  #>a2hexstr
.21b8	20 c4 1e	               jsr  puts
.21bb	20 f4 1f	               jsr  pop
.21be	60		               rts
.21bf			nib2hex
.21bf	08		               php
.21c0	29 0f		               and  #$0f
.21c2	f8		               sed
.21c3	18		               clc
.21c4	69 90		               adc  #$90
.21c6	69 40		               adc  #$40
.21c8	d8		               cld
.21c9	28		               plp
.21ca	60		               rts
.21cb			lsra4bits
.21cb	08		               php
.21cc	4a		               lsr
.21cd	4a		               lsr
.21ce	4a		               lsr
.21cf	4a		               lsr
.21d0	28		               plp
.21d1	60		               rts
.21d2			a2hex
.21d2	08		               php
.21d3	48		               pha
.21d4	48		               pha
.21d5	20 cb 21	               jsr  lsra4bits
.21d8	20 bf 21	               jsr  nib2hex
.21db	8d 71 21	               sta  a2hexstr
.21de	68		               pla
.21df	20 bf 21	               jsr  nib2hex
.21e2	8d 72 21	               sta  a2hexstr+1
.21e5	a9 00		               lda  #$00                ; set end of string
.21e7	8d 73 21	               sta  a2hexstr+2
.21ea	68		               pla
.21eb	28		               plp
.21ec	60		               rts
.21ed			xy2hex
.21ed	20 b5 1f	               jsr  push
.21f0	20 d2 21	               jsr  a2hex
.21f3	8a		               txa
.21f4	48		               pha
.21f5	20 cb 21	               jsr  lsra4bits
.21f8	20 bf 21	               jsr  nib2hex
.21fb	8d 71 21	               sta  a2hexstr
.21fe	68		               pla
.21ff	20 bf 21	               jsr  nib2hex
.2202	8d 72 21	               sta  a2hexstr+1
.2205	98		               tya
.2206	48		               pha
.2207	20 cb 21	               jsr  lsra4bits
.220a	20 bf 21	               jsr  nib2hex
.220d	8d 73 21	               sta  a2hexstr+2
.2210	68		               pla
.2211	20 bf 21	               jsr  nib2hex
.2214	8d 74 21	               sta  a2hexstr+3
.2217	a9 00		               lda  #$00                ; 0 ended string
.2219	8d 75 21	               sta  a2hexstr+4
.221c	20 f4 1f	               jsr  pop
.221f			atobin
.221f	20 b5 1f	               jsr  push
.2222	a2 08		               ldx  #8
.2224	a0 00		               ldy  #0
.2226	18		               clc
.2227	2a		nextbit        rol
.2228	48		               pha
.2229	69 00		               adc  #$00
.222b	29 01		               and  #$01
.222d	20 bf 21	               jsr  nib2hex
.2230	99 76 21	               sta  abin,y
.2233	68		               pla
.2234	c8		               iny
.2235	ca		               dex
.2236	d0 ef		               bne  nextbit
.2238	a9 00		               lda  #0
.223a	99 76 21	               sta  abin,y
.223d	20 f4 1f	               jsr  pull
.2240	60		               rts
.2241			putabin
.2241	20 1f 22	               jsr     atobin
.2244	20 b5 1f	               jsr     push
.2247	a2 76		               ldx     #<abin
.2249	a0 21		               ldy     #>abin
.224b	20 c4 1e	               jsr     puts
.224e	20 f4 1f	               jsr     pop
.2251	60		               rts
.2252			printabin
.2252	20 b5 1f	               jsr     push
.2255	a2 76		               ldx     #<abin
.2257	a0 21		               ldy     #>abin
.2259	20 c4 1e	               jsr     puts
.225c	20 f4 1f	               jsr     pop
.225f	60		               rts
.2260			putabinfmt
.2260	08		               php
.2261	48		               pha
.2262	a9 25		               lda     #"%"
.2264	20 be 1e	               jsr     putch
.2267	68		               pla
.2268	20 41 22	               jsr     putabin
.226b	28		               plp
.226c	60		               rts
.226d			putabinxy
.226d	20 de 1e	               jsr     gotoxy
.2270	20 41 22	               jsr     putabin
.2273	60		               rts
.2274			putabinfmtxy
.2274	20 de 1e	               jsr     gotoxy
.2277	20 60 22	               jsr     putabinfmt
.227a	60		               rts
.227b			atodec
.227b	20 b5 1f	               jsr  push
.227e	f8		               sed
.227f	aa		               tax
.2280	a0 00		               ldy  #$00
.2282	a9 00		               lda  #$00
.2284	18		nextbit        clc
.2285	69 01		               adc  #$01
.2287	90 01		               bcc  decx
.2289	c8		               iny
.228a	ca		decx           dex
.228b	d0 f7		               bne  nextbit
.228d	48		               pha
.228e	98		               tya
.228f	20 bf 21	               jsr  nib2hex
.2292	8d 7f 21	               sta  adec
.2295	68		               pla
.2296	48		               pha
.2297	20 bf 21	               jsr  nib2hex
.229a	8d 81 21	               sta  adec+2
.229d	68		               pla
.229e	6a		               ror
.229f	6a		               ror
.22a0	6a		               ror
.22a1	6a		               ror
.22a2	20 bf 21	               jsr  nib2hex
.22a5	8d 80 21	               sta  adec+1
.22a8	d8		               cld
.22a9	20 f4 1f	               jsr  pull
.22ac	60		               rts
>22ad	00 00 00	buffer         .byte     0,0,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>22b0	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>22b4	00 00 00 00 00 00 00 00 00 0d 00 00
>22c0	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>22c4	00 00 00 00 00 00 00 00 00 00 00 00
>22d0	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>22d4	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>22e0	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>22e4	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>22f0	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>22f4	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>2300	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>2304	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>2310	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>2314	00 00 00 00 00 00 00 00 00 00 00 00
>2320	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>2324	00 00 00 00 00 00 00 00 00 00 00 00
>2330	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>2334	00 00 00 00 00 00 00 00 00 00 00 00
>2340	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>2344	00 00 00 00 00 00 00 00 00 00 00 00
>2350	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>2354	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>2360	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>2364	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>2370	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>2374	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>2380	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>2384	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>2390	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>2394	00 00 00 00 00 00 00 00 00 00 00 00
>23a0	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>23a4	00 00 00 00 00 00 00 00 00 00 00 00
.23b0			waitstop
.23b0	20 b5 1f	               jsr  push
.23b3	20 ed f6	wait           jsr  k_stop
.23b6	d0 fb		               bne  wait
.23b8	20 f4 1f	               jsr  pop
.23bb	60		               rts
.23bc			anykey
.23bc	08		               php
.23bd	48		               pha
.23be	a5 cb		nokey          lda 203
.23c0	c9 40		               cmp #64
.23c2	f0 fa		               beq nokey
.23c4	20 ca 23	               jsr releasekey
.23c7	68		               pla
.23c8	28		               plp
.23c9	60		               rts
.23ca			releasekey
.23ca	08		               php
.23cb	48		               pha
.23cc	a5 cb		keypressed     lda 203
.23ce	c9 40		               cmp #64
.23d0	d0 fa		               bne keypressed
.23d2	68		               pla
.23d3	28		               plp
.23d4	60		               rts
.23d5			getkey
.23d5	20 e4 ff	again          jsr  getin
.23d8	c9 00		               cmp  #0
.23da	f0 f9		               beq  again
.23dc	60		               rts
.23dd			waitkey
.23dd	20 b5 1f	               jsr  push
.23e0	8d 2e 24	               sta  thekey
.23e3	20 e4 ff	nope           jsr  getin
.23e6	20 d2 ff	               jsr  chrout
.23e9	cd 2e 24	               cmp  thekey
.23ec	d0 f5		               bne  nope
.23ee	20 d2 ff	               jsr  chrout
.23f1	20 f4 1f	               jsr  pop
.23f4	60		               rts
.23f5			waitspace
.23f5	20 b5 1f	               jsr  push
.23f8	a9 7f		wait           lda  #$7f  ;%01111111
.23fa	8d 00 dc	               sta  $dc00
.23fd	ad 01 dc	               lda  $dc01
.2400	29 10		               and  #$10  ;mask %00010000
.2402	d0 f4		               bne  wait
.2404	20 f4 1f	               jsr  pop
.2407			waitsstop
.2407	20 b5 1f	               jsr  push
.240a	20 ed f6	wait           jsr  k_stop  ;%01111111
.240d	d0 fb		               bne  wait
.240f	20 f4 1f	               jsr  pop
.2412			waitreturn
.2412	20 b5 1f	               jsr  push
.2415	ad 2f 24	               lda  thecount
.2418	8d 00 04	               sta  scrnram
.241b	a9 02		               lda  #$02
.241d	8d 00 d8	               sta  colorram
.2420	20 e4 ff	nope           jsr  getin
.2423	c9 0d		nohex          cmp  #$0d
.2425	d0 f9		               bne  nope
.2427	ee 2f 24	               inc  thecount
.242a	20 f4 1f	               jsr  pop
.242d	60		               rts
>242e	00		thekey         .byte   0
>242f	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  End of listing

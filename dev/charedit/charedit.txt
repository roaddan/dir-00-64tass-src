
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Fri Nov 17 19:52:06 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm

="20231116-100400"	version  = "20231116-100400"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

=18			fkeyleft       =    18
=9			f1top          =    9
=$0400			scrnnewram     =    $0400
=10			charsdef       =    10
=9			grid_top       =    9
=1			grid_left      =    1
=16			grid_bot       =    grid_top + 7
=8			grid_right     =    grid_left + 7
=$0b			bordure        =    vgris
=$00			fond           =    vnoir
=$03			mesgcol        =    vcyan
=$03			menu1col1      =    vcyan
=$0e			menu1col2      =    vbleu1
=$0f			menu2col1      =    vgris2
=$0c			menu2col2      =    vgris1
=$01			flashcol       =    vblanc
=$07			whoamicol      =    vjaune
=$01			charcolor      =    vblanc
=$0f			charscolor     =    vgris2
.080d			main
.080d	20 1e 21	               jsr  push
.0810	20 f0 1f	               jsr  scrmaninit
.0813	08		               php
.0814	48		               pha
.0815	a9 08		               lda  #$08
.0817	20 d2 ff	               jsr  $ffd2
.081a	68		               pla
.081b	28		               plp
.081c	20 15 0a	               jsr  drawcredits
.081f			wait
.081f	20 d6 1f	               jsr  screendis
.0822	20 bc 0f	               jsr  copycharset
.0825	20 10 20	               jsr  cls
.0828	20 a6 0f	               jsr  setscreenptr
.082b	20 74 0a	               jsr  setdefaultchar
.082e	20 17 10	               jsr  staticscreen
.0831	20 e9 0e	               jsr  drawbitmap
.0834	a9 00		               lda  #$00
.0836	8d 08 09	               sta  fkeyset
.0839	20 53 10	               jsr  drawfkeys
.083c	a9 00		               lda  #$00
.083e	20 1e 21	               jsr  push
.0841	a2 70		               ldx  #<blankmsg
.0843	a0 19		               ldy  #>blankmsg
.0845	20 b6 20	               jsr  putscxy
.0848	a2 9c		               ldx  #<prompt_msg
.084a	a0 19		               ldy  #>prompt_msg
.084c	20 b6 20	               jsr  putscxy
.084f	20 5d 21	               jsr  pop
.0852	20 e3 1f	               jsr  screenena
.0855	20 85 0c	               jsr  keyaction
.0858	20 10 20	               jsr  cls
.085b	20 15 0a	               jsr  drawcredits
.085e	a2 ac		               ldx #<bye_msg
.0860	a0 1d		               ldy #>bye_msg
.0862	20 b6 20	               jsr putscxy
.0865	a2 ce		               ldx #<any_msg
.0867	a0 1d		               ldy #>any_msg
.0869	20 b6 20	               jsr putscxy
.086c	20 3e 25	               jsr  getkey
.086f	20 66 fe	               jsr  k_warmboot
.0872	20 10 20	               jsr  cls
.0875	20 5d 21	               jsr  pop
.0878	60		               rts
.0879			savetofile
.0879	20 1e 21	               jsr  push
.087c	a9 19		               lda  #<fname
.087e	8d cc 26	               sta  dsk_fnptr
.0881	a9 09		               lda  #>fname
.0883	8d cd 26	               sta  dsk_fnptr+1
.0886	a9 0d		               lda  #13
.0888	8d ce 26	               sta  dsk_fnlen
.088b	ad 28 09	               lda  device
.088e	8d cb 26	               sta  dsk_lfsno
.0891	a9 00		               lda  #<bitmapmem
.0893	8d c6 26	               sta  dsk_data_s
.0896	a9 28		               lda  #>bitmapmem
.0898	8d c7 26	               sta  dsk_data_s+1
.089b	a9 00		               lda  #<endofaddr
.089d	8d c8 26	               sta  dsk_data_e
.08a0	a9 48		               lda  #>endofaddr
.08a2	8d c9 26	               sta  dsk_data_e+1
.08a5	20 1e 21	               jsr  push
.08a8	a2 01		               ldx  #1
.08aa	a0 05		               ldy  #5
.08ac	20 47 20	               jsr  gotoxy
.08af	20 5d 21	               jsr  pop
.08b2	20 33 26	               jsr  memtofile
.08b5	20 5d 21	               jsr  pop
.08b8	60		               rts
.08b9			loadfromfile
.08b9	20 1e 21	               jsr  push
.08bc	a9 19		               lda  #<fname
.08be	8d cc 26	               sta  dsk_fnptr
.08c1	a9 09		               lda  #>fname
.08c3	8d cd 26	               sta  dsk_fnptr+1
.08c6	a9 0d		               lda  #13
.08c8	8d ce 26	               sta  dsk_fnlen
.08cb	ad 28 09	               lda  device
.08ce	8d cb 26	               sta  dsk_lfsno
.08d1	a9 00		               lda  #<bitmapmem
.08d3	8d c6 26	               sta  dsk_data_s
.08d6	a9 28		               lda  #>bitmapmem
.08d8	8d c7 26	               sta  dsk_data_s+1
.08db	a9 00		               lda  #<endofaddr
.08dd	8d c8 26	               sta  dsk_data_e
.08e0	a9 48		               lda  #>endofaddr
.08e2	8d c9 26	               sta  dsk_data_e+1
.08e5	20 1e 21	               jsr  push
.08e8	a2 01		               ldx  #1
.08ea	a0 05		               ldy  #5
.08ec	20 47 20	               jsr  gotoxy
.08ef	20 5d 21	               jsr  pop
.08f2	20 6b 26	               jsr  filetomem
.08f5	20 5d 21	               jsr  pop
.08f8	60		               rts
=10240			bitmapmem      =         charsdef * 1024     ;Calcul position ram des caracteres.
=18432			endofaddr      =         (charsdef * 1024) + (4*$800)
=61440			mstopaddr      =         $d000+(4*$800)
>08f9	00 d0		startaddr      .word     $d000               ; 53248
>08fb	00 f0		stopaddr       .word     mstopaddr           ; 55296
>08fd	00 28		bitmapaddr     .word     bitmapmem           ; $3000, 12288
>08ff	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>0903	08 04 02 01
>0907	00		editmode       .byte     0
>0908	00		fkeyset        .byte     0
>0909	00		currentchar    .byte     0
>090a	00		currentkey     .byte     0
>090b	00		previouskey    .byte     0
>090c	00		bitmapoffset   .byte     0
>090d	00 00		mapaddr        .word     0
>090f	00 00		byteaddr       .word     0
>0911	00 00		gridaddr       .word     0
>0913	09		cursln         .byte     grid_top
>0914	01		curscl         .byte     grid_left
>0915	05 1b 03 12	pfname         .byte     vvert,27,3,18
>0919	40 30 3a	fname          .text     "@0:"
>091c	3f 3f 3f 3f	name           .text     "??????"
>0920	3f 3f
>0922	2e 43 48 52	ext            .null     ".chr",148
>0926	94 00
>0928	00		device         .byte     0

;******  Processing file: routines.asm

.0929			template
.0929	20 1e 21	               jsr  push
.092c	20 5d 21	               jsr  pop
.092f	60		               rts
.0930			getfname
.0930	20 1e 21	               jsr  push
.0933	20 1e 21	               jsr  push
.0936	a2 70		               ldx  #<blankmsg
.0938	a0 19		               ldy  #>blankmsg
.093a	20 b6 20	               jsr  putscxy
.093d	a2 d9		               ldx  #<fname_msg
.093f	a0 1b		               ldy  #>fname_msg
.0941	20 b6 20	               jsr  putscxy
.0944	20 5d 21	               jsr  pop
.0947	a2 00		               ldx  #$00
.0949	8e 7d 09	               stx  count
.094c	20 7e 09	getanother     jsr  getalphanum
.094f	20 27 20	               jsr  putch
.0952	ae 7d 09	               ldx  count
.0955	9d 1c 09	               sta  name,x
.0958	ee 7d 09	               inc  count
.095b	ae 7d 09	               ldx  count
.095e	e0 06		               cpx  #$06
.0960	f0 03		               beq  finish
.0962	4c 4c 09	               jmp  getanother
.0965			finish
.0965	20 1e 21	               jsr  push
.0968	a2 70		               ldx  #<blankmsg
.096a	a0 19		               ldy  #>blankmsg
.096c	20 b6 20	               jsr  putscxy
.096f	a2 15		               ldx  #<pfname
.0971	a0 09		               ldy  #>pfname
.0973	20 b6 20	               jsr  putscxy
.0976	20 5d 21	               jsr  pop
.0979	20 5d 21	               jsr  pop
.097c	60		               rts
>097d	00		count          .byte     0
.097e			getalphanum
.097e	20 1e 21	               jsr  push
.0981	20 3e 25	getanother     jsr  getkey
.0984	c9 30		               cmp  #$30      ; 0
.0986	30 f9		               bmi  getanother
.0988	c9 3a		               cmp  #$3a      ; 9+1
.098a	30 0b		               bmi  goodone
.098c	c9 41		isitletter     cmp  #$41      ; A
.098e	30 f1		               bmi  getanother
.0990	c9 5b		               cmp  #$5b      ; Z+1
.0992	30 03		               bmi  goodone
.0994	4c 81 09	               jmp  getanother
.0997	8d a1 09	goodone        sta  tempbyte
.099a	20 5d 21	               jsr  pop
.099d	ad a1 09	               lda  tempbyte
.09a0	60		               rts
>09a1	00		tempbyte       .byte     0
.09a2			copychar
.09a2	20 1e 21	               jsr  push
.09a5	20 de 09	               jsr  getvalidkey
.09a8	ad fd 08	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.09ab	85 fb		               sta  zpage1
.09ad	ad fe 08	               lda  bitmapaddr+1
.09b0	85 fc		               sta  zpage1+1
.09b2	ae 14 0a	               ldx  copykey
.09b5	bd 19 24	               lda  asciitorom,x
.09b8	aa		               tax
.09b9	e0 00		               cpx  #$00
.09bb	f0 08		               beq  no_offset      ; sommes nous déja à 0
.09bd	a9 08		addagain       lda  #$08
.09bf	20 af 11	               jsr  zp1addnum      ; on augmente de 8 byte ...
.09c2	ca		               dex                 ; pour chaque caracteres
.09c3	d0 f8		               bne  addagain
.09c5	ad 0d 09	no_offset      lda  mapaddr        ; le caractere actuel
.09c8	85 fd		               sta  zpage2         ;
.09ca	ad 0e 09	               lda  mapaddr+1      ;
.09cd	85 fe		               sta  zpage2+1       ;
.09cf	a0 00		               ldy  #$00
.09d1	b1 fb		nextbyte       lda  (zpage1),y
.09d3	91 fd		               sta  (zpage2),y
.09d5	c8		               iny
.09d6	c0 08		               cpy  #$08
.09d8	d0 f7		               bne  nextbyte
.09da	20 5d 21	out            jsr  pop
.09dd	60		               rts
.09de			getvalidkey
.09de	20 1e 21	               jsr  push
.09e1	20 1e 21	               jsr  push
.09e4	a2 70		               ldx  #<blankmsg
.09e6	a0 19		               ldy  #>blankmsg
.09e8	20 b6 20	               jsr  putscxy
.09eb	a2 b0		               ldx  #<copychar_msg
.09ed	a0 1b		               ldy  #>copychar_msg
.09ef	20 b6 20	               jsr  putscxy
.09f2	20 5d 21	               jsr  pop
.09f5	20 3e 25	getgoodkey     jsr  getkey
.09f8	8d 14 0a	               sta  copykey
.09fb	aa		               tax
.09fc	bc 19 24	               ldy  asciitorom,x
.09ff	c4 00		               cpy  $00
.0a01	d0 0a		               bne  goodone
.0a03	ae 14 0a	               ldx  copykey
.0a06	e0 40		               cpx  #$40
.0a08	f0 03		               beq  goodone
.0a0a	4c f5 09	               jmp  getgoodkey
.0a0d	20 27 20	goodone        jsr  putch
.0a10	20 5d 21	               jsr  pop
.0a13	60		               rts
>0a14	00		copykey        .byte 0
.0a15			drawcredits
.0a15	20 1e 21	               jsr  push
.0a18	20 10 20	               jsr  cls
.0a1b	a2 38		               ldx #<whoami0
.0a1d	a0 1c		               ldy #>whoami0
.0a1f	20 b6 20	               jsr putscxy
.0a22	a2 5d		               ldx #<whoami1
.0a24	a0 1c		               ldy #>whoami1
.0a26	20 b6 20	               jsr putscxy
.0a29	a2 84		               ldx #<whoami2
.0a2b	a0 1c		               ldy #>whoami2
.0a2d	20 b6 20	               jsr putscxy
.0a30	a2 a9		               ldx #<whoami3
.0a32	a0 1c		               ldy #>whoami3
.0a34	20 b6 20	               jsr putscxy
.0a37	a2 ce		               ldx #<whoami4
.0a39	a0 1c		               ldy #>whoami4
.0a3b	20 b6 20	               jsr putscxy
.0a3e	a2 f3		               ldx #<whoami5
.0a40	a0 1c		               ldy #>whoami5
.0a42	20 b6 20	               jsr putscxy
.0a45	a2 18		               ldx #<whoami6
.0a47	a0 1d		               ldy #>whoami6
.0a49	20 b6 20	               jsr putscxy
.0a4c	a2 3d		               ldx #<whoami7
.0a4e	a0 1d		               ldy #>whoami7
.0a50	20 b6 20	               jsr putscxy
.0a53	a2 62		               ldx #<whoami8
.0a55	a0 1d		               ldy #>whoami8
.0a57	20 b6 20	               jsr putscxy
.0a5a	a2 87		               ldx #<whoami9
.0a5c	a0 1d		               ldy #>whoami9
.0a5e	20 b6 20	               jsr putscxy
.0a61	20 cd 11	               jsr  delay
.0a64	20 cd 11	               jsr  delay
.0a67	20 cd 11	               jsr  delay
.0a6a	20 cd 11	               jsr  delay
.0a6d	20 cd 11	               jsr  delay
.0a70	20 5d 21	               jsr  pop
.0a73	60		               rts
.0a74			setdefaultchar
.0a74	20 1e 21	               jsr  push
.0a77	a9 40		               lda  #$40
.0a79	8d 0a 09	               sta  currentkey
.0a7c	aa		               tax
.0a7d	bc 19 24	               ldy  asciitorom,x
.0a80	8c 0c 09	               sty  bitmapoffset
.0a83	20 3e 0b	               jsr  drawkeyval
.0a86	20 e9 0e	               jsr  drawbitmap
.0a89	20 1e 21	               jsr  push
.0a8c	a2 0d		               ldx  #13
.0a8e	a0 0c		               ldy  #12
.0a90	20 47 20	               jsr  gotoxy
.0a93	20 5d 21	               jsr  pop
.0a96	20 27 20	               jsr  putch
.0a99	20 1e 21	               jsr  push
.0a9c	a2 11		               ldx  #17
.0a9e	a0 05		               ldy  #5
.0aa0	20 47 20	               jsr  gotoxy
.0aa3	20 5d 21	               jsr  pop
.0aa6	20 e4 23	               jsr  atodec
.0aa9	20 1e 21	               jsr  push
.0aac	a2 e8		isx            ldx  #<adec
.0aae	a0 22		isy            ldy  #>adec
.0ab0	20 2d 20	               jsr  puts
.0ab3	20 5d 21	               jsr  pull
.0ab6	20 5d 21	               jsr  pop
.0ab9	60		               rts
.0aba			resetmenuacolor
.0aba	20 1e 21	               jsr  push
.0abd	a9 03		               lda  #menu1col1
.0abf	8d 26 1e	               sta  f1abutton
.0ac2	8d 5c 1e	               sta  f3abutton
.0ac5	8d 92 1e	               sta  f5abutton
.0ac8	8d c8 1e	               sta  f7abutton
.0acb	a9 0e		               lda  #menu1col2
.0acd	8d 41 1e	               sta  f2abutton
.0ad0	8d 77 1e	               sta  f4abutton
.0ad3	8d ad 1e	               sta  f6abutton
.0ad6	8d e3 1e	               sta  f8abutton
.0ad9	20 5d 21	               jsr  pop
.0adc	60		               rts
.0add			resetmenubcolor
.0add	20 1e 21	               jsr  push
.0ae0	a9 0f		               lda  #menu2col1
.0ae2	8d fe 1e	               sta  f1bbutton
.0ae5	8d 34 1f	               sta  f3bbutton
.0ae8	8d 6a 1f	               sta  f5bbutton
.0aeb	8d a0 1f	               sta  f7bbutton
.0aee	a9 0f		               lda  #menu2col1
.0af0	8d 19 1f	               sta  f2bbutton
.0af3	8d 4f 1f	               sta  f4bbutton
.0af6	8d 85 1f	               sta  f6bbutton
.0af9	8d bb 1f	               sta  f8bbutton
.0afc	20 5d 21	               jsr  pop
.0aff	60		               rts
.0b00			setmenuacolor
.0b00	20 1e 21	               jsr  push
.0b03	8d 26 1e	               sta  f1abutton
.0b06	8d 41 1e	               sta  f2abutton
.0b09	8d 5c 1e	               sta  f3abutton
.0b0c	8d 77 1e	               sta  f4abutton
.0b0f	8d 92 1e	               sta  f5abutton
.0b12	8d ad 1e	               sta  f6abutton
.0b15	8d c8 1e	               sta  f7abutton
.0b18	8d e3 1e	               sta  f8abutton
.0b1b	20 5d 21	               jsr  pop
.0b1e	60		               rts
.0b1f			setmenubcolor
.0b1f	20 1e 21	               jsr  push
.0b22	8d fe 1e	               sta  f1bbutton
.0b25	8d 19 1f	               sta  f2bbutton
.0b28	8d 34 1f	               sta  f3bbutton
.0b2b	8d 4f 1f	               sta  f4bbutton
.0b2e	8d 6a 1f	               sta  f5bbutton
.0b31	8d 85 1f	               sta  f6bbutton
.0b34	8d a0 1f	               sta  f7bbutton
.0b37	8d bb 1f	               sta  f8bbutton
.0b3a	20 5d 21	               jsr  pop
.0b3d	60		               rts
.0b3e			drawkeyval
.0b3e	20 1e 21	               jsr  push
.0b41	20 1e 21	               jsr  push
.0b44	a2 01		               ldx  #1
.0b46	a0 13		               ldy  #19
.0b48	20 47 20	               jsr  gotoxy
.0b4b	20 5d 21	               jsr  pop
.0b4e	ad 0a 09	               lda  currentkey
.0b51	20 27 20	               jsr  putch
.0b54	48		               pha
.0b55	a9 3d		               lda  #'='
.0b57	20 27 20	               jsr  putch
.0b5a	a9 25		               lda  #'%'
.0b5c	20 27 20	               jsr  putch
.0b5f	68		               pla
.0b60	20 aa 23	               jsr  putabin
.0b63	20 1e 21	               jsr  push
.0b66	a2 01		               ldx  #1
.0b68	a0 14		               ldy  #20
.0b6a	20 47 20	               jsr  gotoxy
.0b6d	20 5d 21	               jsr  pop
.0b70	20 1e 21	               jsr  push
.0b73	a2 3f		isx            ldx  #<txt1
.0b75	a0 0c		isy            ldy  #>txt1
.0b77	20 2d 20	               jsr  puts
.0b7a	20 5d 21	               jsr  pull
.0b7d	a9 24		               lda  #'$'
.0b7f	20 27 20	               jsr  putch
.0b82	ad 0a 09	               lda  currentkey
.0b85	20 17 23	               jsr  putahex
.0b88	20 1e 21	               jsr  push
.0b8b	a2 01		               ldx  #1
.0b8d	a0 15		               ldy  #21
.0b8f	20 47 20	               jsr  gotoxy
.0b92	20 5d 21	               jsr  pop
.0b95	20 1e 21	               jsr  push
.0b98	a2 4a		isx            ldx  #<txt2
.0b9a	a0 0c		isy            ldy  #>txt2
.0b9c	20 2d 20	               jsr  puts
.0b9f	20 5d 21	               jsr  pull
.0ba2	a9 24		               lda  #'$'
.0ba4	20 27 20	               jsr  putch
.0ba7	ad fe 08	               lda  bitmapaddr+1
.0baa	20 17 23	               jsr  putahex
.0bad	ad fd 08	               lda  bitmapaddr
.0bb0	20 17 23	               jsr  putahex
.0bb3	20 1e 21	               jsr  push
.0bb6	a2 01		               ldx  #1
.0bb8	a0 16		               ldy  #22
.0bba	20 47 20	               jsr  gotoxy
.0bbd	20 5d 21	               jsr  pop
.0bc0	20 1e 21	               jsr  push
.0bc3	a2 55		isx            ldx  #<txt3
.0bc5	a0 0c		isy            ldy  #>txt3
.0bc7	20 2d 20	               jsr  puts
.0bca	20 5d 21	               jsr  pull
.0bcd	a9 24		               lda  #'$'
.0bcf	20 27 20	               jsr  putch
.0bd2	ad 0c 09	               lda  bitmapoffset
.0bd5	20 17 23	               jsr  putahex
.0bd8	20 1e 21	               jsr  push
.0bdb	a2 01		               ldx  #1
.0bdd	a0 17		               ldy  #23
.0bdf	20 47 20	               jsr  gotoxy
.0be2	20 5d 21	               jsr  pop
.0be5	20 1e 21	               jsr  push
.0be8	a2 62		isx            ldx  #<txt4
.0bea	a0 0c		isy            ldy  #>txt4
.0bec	20 2d 20	               jsr  puts
.0bef	20 5d 21	               jsr  pull
.0bf2	a9 24		               lda  #'$'
.0bf4	20 27 20	               jsr  putch
.0bf7	ad 0e 09	               lda  mapaddr+1
.0bfa	20 17 23	               jsr  putahex
.0bfd	ad 0d 09	               lda  mapaddr
.0c00	20 17 23	               jsr  putahex
.0c03	20 1e 21	               jsr  push
.0c06	a2 01		               ldx  #1
.0c08	a0 18		               ldy  #24
.0c0a	20 47 20	               jsr  gotoxy
.0c0d	20 5d 21	               jsr  pop
.0c10	20 1e 21	               jsr  push
.0c13	a2 6d		isx            ldx  #<txt5
.0c15	a0 0c		isy            ldy  #>txt5
.0c17	20 2d 20	               jsr  puts
.0c1a	20 5d 21	               jsr  pull
.0c1d	ad 14 09	               lda  curscl
.0c20	20 17 23	               jsr  putahex
.0c23	a9 da		               lda  #$da
.0c25	20 27 20	               jsr  putch
.0c28	ad 13 09	               lda  cursln
.0c2b	20 17 23	               jsr  putahex
.0c2e	20 5d 21	               jsr  pop
.0c31	60		               rts
>0c32	50 45 54 53	txt0           .null     "petscii :   "
>0c36	43 49 49 20 3a 20 20 20 00
>0c3f	4b 45 59 20	txt1           .null     "key code: "
>0c43	43 4f 44 45 3a 20 00
>0c4a	42 49 54 4d	txt2           .null     "bitmap..: "
>0c4e	41 50 2e 2e 3a 20 00
>0c55	4f 46 46 53	txt3           .null     "offset..:   "
>0c59	45 54 2e 2e 3a 20 20 20 00
>0c62	4d 41 50 41	txt4           .null     "mapaddr.: "
>0c66	44 44 52 2e 3a 20 00
>0c6d	43 55 52 53	txt5           .null     "cursval.: "
>0c71	56 41 4c 2e 3a 20 00
>0c78	53 54 41 43	txt6           .null     "stack......:"
>0c7c	4b 2e 2e 2e 2e 2e 2e 3a 00
.0c85			keyaction
.0c85	20 1e 21	               jsr  push
.0c88	20 3e 25	loop           jsr  getkey
.0c8b	c9 85		f1             cmp  #key_f1
.0c8d	d0 03		               bne  f2
.0c8f	4c 03 0d	               jmp  dof1
.0c92	c9 89		f2             cmp  #key_f2
.0c94	d0 03		               bne  f3
.0c96	4c 09 0d	               jmp  dof2
.0c99	c9 86		f3             cmp  #key_f3
.0c9b	d0 03		               bne  f4
.0c9d	4c 0f 0d	               jmp  dof3
.0ca0	c9 8a		f4             cmp  #key_f4
.0ca2	d0 03		               bne  f5
.0ca4	4c 15 0d	               jmp  dof4
.0ca7	c9 87		f5             cmp  #key_f5
.0ca9	d0 03		               bne  f6
.0cab	4c 1b 0d	               jmp  dof5
.0cae	c9 8b		f6             cmp  #key_f6
.0cb0	d0 03		               bne  f7
.0cb2	4c 21 0d	               jmp  dof6
.0cb5	c9 88		f7             cmp  #key_f7
.0cb7	d0 03		               bne  f8
.0cb9	4c 27 0d	               jmp  dof7
.0cbc	c9 8c		f8             cmp  #key_f8
.0cbe	d0 03		               bne  ctrlx
.0cc0	4c 2d 0d	               jmp  dof8
.0cc3	c9 18		ctrlx          cmp  #ctrl_x
.0cc5	d0 03		               bne  ishex14
.0cc7	4c 33 0d	               jmp  doquit
.0cca	c9 14		ishex14        cmp  #$14
.0ccc	d0 03		               bne  ishex12
.0cce	4c 88 0c	               jmp  loop
.0cd1	c9 12		ishex12        cmp  #$12
.0cd3	d0 03		               bne  reste
.0cd5	4c 88 0c	               jmp  loop
.0cd8			reste
.0cd8	20 1e 21	               jsr  push
.0cdb	a2 0d		               ldx  #13
.0cdd	a0 0c		               ldy  #12
.0cdf	20 47 20	               jsr  gotoxy
.0ce2	20 5d 21	               jsr  pop
.0ce5	20 27 20	               jsr  putch
.0ce8	48		               pha
.0ce9	ad 0a 09	               lda  currentkey
.0cec	8d 0b 09	               sta  previouskey
.0cef	68		               pla
.0cf0	8d 0a 09	               sta  currentkey
.0cf3	aa		               tax
.0cf4	bc 19 24	               ldy  asciitorom,x
.0cf7	8c 0c 09	               sty  bitmapoffset
.0cfa	20 3e 0b	               jsr  drawkeyval
.0cfd	20 e9 0e	               jsr  drawbitmap
.0d00	4c 88 0c	               jmp  loop
.0d03	20 e3 11	dof1           jsr  f1action  ;edit/reverse
.0d06	4c 88 0c	               jmp  loop
.0d09	20 d6 12	dof2           jsr  f2action  ;save/flip vert
.0d0c	4c 88 0c	               jmp  loop
.0d0f	20 8e 13	dof3           jsr  f3action  ;load/flip horz
.0d12	4c 88 0c	               jmp  loop
.0d15	20 5e 14	dof4           jsr  f4action  ;copy/scroll r
.0d18	4c 88 0c	               jmp  loop
.0d1b	20 27 15	dof5           jsr  f5action  ;clear/scroll l
.0d1e	4c 88 0c	               jmp  loop
.0d21	20 df 15	dof6           jsr  f6action  ;fill;/scroll up
.0d24	4c 88 0c	               jmp  loop
.0d27	20 97 16	dof7           jsr  f7action  ;clear;/scroll down
.0d2a	4c 88 0c	               jmp  loop
.0d2d	20 54 17	dof8           jsr  f8action  ; function
.0d30	4c 88 0c	               jmp  loop
.0d33	20 5d 21	doquit         jsr  pop
.0d36	60		               rts
.0d37			editor
.0d37	20 1e 21	               jsr  push
.0d3a	20 1e 21	               jsr  push
.0d3d	a2 70		               ldx  #<blankmsg
.0d3f	a0 19		               ldy  #>blankmsg
.0d41	20 b6 20	               jsr  putscxy
.0d44	a2 23		               ldx  #<exit_msg
.0d46	a0 1c		               ldy  #>exit_msg
.0d48	20 b6 20	               jsr  putscxy
.0d4b	20 5d 21	               jsr  pop
.0d4e	20 1e 21	               jsr  push
.0d51	a2 70		               ldx  #<blankmsg
.0d53	a0 19		               ldy  #>blankmsg
.0d55	20 b6 20	               jsr  putscxy
.0d58	a2 c2		               ldx  #<edit_msg
.0d5a	a0 19		               ldy  #>edit_msg
.0d5c	20 b6 20	               jsr  putscxy
.0d5f	20 5d 21	               jsr  pop
.0d62	20 a5 0e	               jsr  setcurs
.0d65	ad 0a 09	               lda  currentkey
.0d68	20 1e 21	               jsr  push
.0d6b	a2 11		               ldx  #17
.0d6d	a0 05		               ldy  #5
.0d6f	20 47 20	               jsr  gotoxy
.0d72	20 5d 21	               jsr  pop
.0d75	20 e4 23	               jsr  atodec
.0d78	20 1e 21	               jsr  push
.0d7b	a2 e8		isx            ldx  #<adec
.0d7d	a0 22		isy            ldy  #>adec
.0d7f	20 2d 20	               jsr  puts
.0d82	20 5d 21	               jsr  pull
.0d85	20 e9 0e	               jsr  drawbitmap
.0d88	20 3e 25	ed_loop        jsr  getkey
.0d8b	c9 85		f1             cmp  #f1key
.0d8d	d0 03		               bne  cu
.0d8f	4c 77 0e	               jmp  do_ctrlx
.0d92	c9 91		cu             cmp  #cursu
.0d94	d0 03		               bne  cd
.0d96	4c 22 0e	               jmp  do_up
.0d99	c9 11		cd             cmp  #cursd
.0d9b	d0 03		               bne  cl
.0d9d	4c 35 0e	               jmp  do_down
.0da0	c9 9d		cl             cmp  #cursl
.0da2	d0 03		               bne  cr
.0da4	4c 48 0e	               jmp  do_left
.0da7	c9 1d		cr             cmp  #cursr
.0da9	d0 03		               bne  cx
.0dab	4c 5b 0e	               jmp  do_right
.0dae	c9 18		cx             cmp  #ctrl_x
.0db0	d0 03		               bne  sp
.0db2	4c 77 0e	               jmp  do_ctrlx
.0db5	c9 20		sp             cmp  #$20
.0db7	d0 03		               bne  ishex14
.0db9	4c 6e 0e	               jmp  do_swap
.0dbc	c9 14		ishex14        cmp  #$14
.0dbe	d0 03		               bne  ishex12
.0dc0	4c 6e 0e	               jmp  do_swap
.0dc3	c9 12		ishex12        cmp  #$12
.0dc5	d0 03		               bne  rest
.0dc7	4c 6e 0e	               jmp  do_swap
.0dca			rest
.0dca	20 1e 21	               jsr  push
.0dcd	a2 0d		               ldx  #13
.0dcf	a0 0c		               ldy  #12
.0dd1	20 47 20	               jsr  gotoxy
.0dd4	20 5d 21	               jsr  pop
.0dd7	20 27 20	               jsr  putch
.0dda	48		               pha
.0ddb	ad 0a 09	               lda  currentkey
.0dde	8d 0b 09	               sta  previouskey
.0de1	68		               pla
.0de2	8d 0a 09	               sta  currentkey
.0de5	aa		               tax
.0de6	bc 19 24	               ldy  asciitorom,x
.0de9	8c 0c 09	               sty  bitmapoffset
.0dec	20 3e 0b	               jsr  drawkeyval
.0def	20 e9 0e	               jsr  drawbitmap
.0df2	20 1e 21	               jsr  push
.0df5	a2 0d		               ldx  #13
.0df7	a0 0c		               ldy  #12
.0df9	20 47 20	               jsr  gotoxy
.0dfc	20 5d 21	               jsr  pop
.0dff	20 27 20	               jsr  putch
.0e02	20 1e 21	               jsr  push
.0e05	a2 11		               ldx  #17
.0e07	a0 05		               ldy  #5
.0e09	20 47 20	               jsr  gotoxy
.0e0c	20 5d 21	               jsr  pop
.0e0f	20 e4 23	               jsr  atodec
.0e12	20 1e 21	               jsr  push
.0e15	a2 e8		isx            ldx  #<adec
.0e17	a0 22		isy            ldy  #>adec
.0e19	20 2d 20	               jsr  puts
.0e1c	20 5d 21	               jsr  pull
.0e1f	4c 74 0e	               jmp  totop
.0e22	ad 13 09	do_up          lda  cursln
.0e25	c9 09		               cmp  #grid_top
.0e27	f0 4b		               beq  totop
.0e29	20 c7 0e	               jsr  clrcurs
.0e2c	ce 13 09	               dec  cursln
.0e2f	20 a5 0e	               jsr  setcurs
.0e32	4c 74 0e	               jmp  totop
.0e35	ad 13 09	do_down        lda  cursln
.0e38	c9 10		               cmp  #grid_bot
.0e3a	f0 38		               beq  totop
.0e3c	20 c7 0e	               jsr  clrcurs
.0e3f	ee 13 09	               inc  cursln
.0e42	20 a5 0e	               jsr  setcurs
.0e45	4c 74 0e	               jmp  totop
.0e48	ad 14 09	do_left        lda  curscl
.0e4b	c9 01		               cmp  #grid_left
.0e4d	f0 25		               beq  totop
.0e4f	20 c7 0e	               jsr  clrcurs
.0e52	ce 14 09	               dec  curscl
.0e55	20 a5 0e	               jsr  setcurs
.0e58	4c 74 0e	               jmp  totop
.0e5b	ad 14 09	do_right       lda  curscl
.0e5e	c9 08		               cmp  #grid_right
.0e60	f0 12		               beq  totop
.0e62	20 c7 0e	               jsr  clrcurs
.0e65	ee 14 09	               inc  curscl
.0e68	20 a5 0e	               jsr  setcurs
.0e6b	4c 74 0e	               jmp  totop
.0e6e	20 7e 0e	do_swap        jsr  do_eor
.0e71	20 e9 0e	               jsr  drawbitmap
.0e74	4c 88 0d	totop          jmp  ed_loop
.0e77	20 c7 0e	do_ctrlx       jsr  clrcurs
.0e7a	20 5d 21	               jsr  pop
.0e7d	60		               rts
.0e7e			do_eor
.0e7e	20 1e 21	               jsr  push
.0e81	ad 0d 09	               lda  mapaddr
.0e84	85 fd		               sta  zpage2
.0e86	ad 0e 09	               lda  mapaddr+1
.0e89	85 fe		               sta  zpage2+1
.0e8b	ae 13 09	               ldx  cursln     ; calcul de
.0e8e	ca		               dex            ; l'offset de
.0e8f	8a		               txa            ; la
.0e90	29 f7		               and  #$f7      ; ligne
.0e92	a8		               tay
.0e93	ae 14 09	               ldx  curscl
.0e96	ca		               dex
.0e97	bd ff 08	               lda  eorval,x
.0e9a	51 fd		               eor  (zpage2),y
.0e9c	20 3e 0b	               jsr  drawkeyval
.0e9f	91 fd		               sta  (zpage2),y
.0ea1	20 5d 21	               jsr  pop
.0ea4	60		               rts
.0ea5			setcurs
.0ea5	20 1e 21	               jsr  push
.0ea8	a2 01		               ldx  #grid_left
.0eaa	ac 13 09	               ldy  cursln
.0ead	20 47 20	               jsr  gotoxy
.0eb0	a9 da		               lda  #$da
.0eb2	20 27 20	               jsr  putch
.0eb5	ae 14 09	               ldx  curscl
.0eb8	e8		               inx
.0eb9	a0 08		               ldy  #grid_top-1
.0ebb	20 47 20	               jsr  gotoxy
.0ebe	a9 da		               lda  #$da
.0ec0	20 27 20	               jsr  putch
.0ec3	20 5d 21	               jsr  pop
.0ec6	60		               rts
.0ec7			clrcurs
.0ec7	20 1e 21	               jsr  push
.0eca	a2 01		               ldx  #grid_left
.0ecc	ac 13 09	               ldy  cursln
.0ecf	20 47 20	               jsr  gotoxy
.0ed2	a9 20		               lda  #$20
.0ed4	20 27 20	               jsr  putch
.0ed7	ae 14 09	               ldx  curscl
.0eda	e8		               inx
.0edb	a0 08		               ldy  #grid_top-1
.0edd	20 47 20	               jsr  gotoxy
.0ee0	a9 20		               lda  #$20
.0ee2	20 27 20	               jsr  putch
.0ee5	20 5d 21	               jsr  pop
.0ee8	60		               rts
.0ee9			drawbitmap
.0ee9	20 1e 21	               jsr  push
.0eec	20 50 0f	               jsr  calcmapaddr
.0eef	ad 0d 09	               lda  mapaddr        ; on pointe sur la table des bitmaps
.0ef2	85 fb		               sta  zpage1
.0ef4	ad 0e 09	               lda  mapaddr+1
.0ef7	85 fc		               sta  zpage1+1
.0ef9	a0 00		drawchar       ldy  #$00
.0efb	a2 09		               ldx  #grid_top      ;on replace la ...
.0efd	8e 06 0f	               stx  isy+1          ;ligne de départ
.0f00	20 1e 21	nextline       jsr  push
.0f03	a2 02		               ldx  #grid_left+1        ; la colonne
.0f05	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.0f07	20 47 20	               jsr  gotoxy
.0f0a	20 5d 21	               jsr  pop
.0f0d	b1 fb		               lda  (zpage1),y     ; on li une ligne
.0f0f	20 88 23	               jsr  atobin
.0f12	20 7f 0f	               jsr  abintograph
.0f15	20 1e 21	               jsr  push
.0f18	a2 df		isx            ldx  #<abin
.0f1a	a0 22		isy            ldy  #>abin
.0f1c	20 2d 20	               jsr  puts
.0f1f	20 5d 21	               jsr  pull
.0f22	ee 06 0f	               inc  isy+1
.0f25	c8		               iny
.0f26	c0 08		               cpy  #$08
.0f28	30 d6		               bmi  nextline
.0f2a	20 31 0f	               jsr  highlight
.0f2d	20 5d 21	               jsr  pop
.0f30	60		               rts
.0f31			highlight
.0f31	20 1e 21	               jsr  push
.0f34	ae 0b 09	               ldx  previouskey
.0f37	bd 19 24	               lda  asciitorom,x
.0f3a	aa		               tax
.0f3b	a9 0f		               lda  #charscolor
.0f3d	9d 00 d8	               sta  colorram,x
.0f40	ae 0a 09	               ldx  currentkey
.0f43	bd 19 24	               lda  asciitorom,x
.0f46	aa		               tax
.0f47	a9 01		               lda  #charcolor
.0f49	9d 00 d8	               sta  colorram,x
.0f4c	20 5d 21	               jsr  pop
.0f4f	60		               rts
.0f50			calcmapaddr
.0f50	20 1e 21	               jsr  push
.0f53	ad fd 08	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0f56	85 fb		               sta  zpage1
.0f58	ad fe 08	               lda  bitmapaddr+1
.0f5b	85 fc		               sta  zpage1+1
.0f5d	ae 0c 09	               ldx  bitmapoffset
.0f60	e0 00		               cpx  #$00
.0f62	f0 08		               beq  thesame         ; sommes nous déja à 0
.0f64	a9 08		addagain       lda  #$08
.0f66	20 af 11	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0f69	ca		               dex                 ; pour chaque caracteres
.0f6a	d0 f8		               bne  addagain
.0f6c	48		thesame        pha
.0f6d	a5 fb		               lda  zpage1
.0f6f	8d 0d 09	               sta  mapaddr
.0f72	a5 fc		               lda  zpage1+1
.0f74	8d 0e 09	               sta  mapaddr+1
.0f77	68		               pla
.0f78	20 3e 0b	               jsr  drawkeyval
.0f7b	20 5d 21	out            jsr  pop
.0f7e	60		               rts
.0f7f			abintograph
.0f7f	20 1e 21	               jsr  push
.0f82	a9 df		               lda  #<abin
.0f84	85 fb		               sta  zpage1
.0f86	a9 22		               lda  #>abin+1
.0f88	85 fc		               sta  zpage1+1
.0f8a	a0 00		               ldy  #$00
.0f8c	b1 fb		nextbit        lda  (zpage1),y
.0f8e	c9 30		               cmp  #$30
.0f90	f0 07		               beq  itszero
.0f92	a9 d1		itsone         lda  #$d1
.0f94	91 fb		               sta  (zpage1),y
.0f96	4c 9d 0f	               jmp  next
.0f99	a9 2e		itszero        lda  #$2e
.0f9b	91 fb		               sta  (zpage1),y
.0f9d	c8		next           iny
.0f9e	c0 08		               cpy  #$08
.0fa0	30 ea		               bmi  nextbit
.0fa2	20 5d 21	               jsr  pop
.0fa5	60		               rts
.0fa6			setscreenptr
.0fa6	20 1e 21	               jsr  push
.0fa9	a9 08		               lda  #$08      ; basic commande to disable ...
.0fab	20 d2 ff	               jsr  chrout    ; ... character set change.
.0fae	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.0fb1	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.0fb3	09 0a		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.0fb5	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.0fb8	20 5d 21	               jsr  pop
.0fbb	60		               rts
.0fbc			copycharset
.0fbc	20 1e 21	               jsr  push
.0fbf	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0fc2	29 fe		               and  #%11111110     ;254
.0fc4	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0fc7	a5 01		               lda  u6510map       ;$01
.0fc9	29 fb		               and  #%11111011     ;251
.0fcb	85 01		               sta  u6510map       ;$01
.0fcd	20 e2 0f	               jsr  memcopy
.0fd0	a5 01		               lda  u6510map       ;$01
.0fd2	09 04		               ora  #%00000100
.0fd4	85 01		               sta  u6510map       ;$01
.0fd6	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0fd9	09 01		               ora  #%00000001     ;254
.0fdb	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0fde	20 5d 21	               jsr  pop
.0fe1	60		               rts
.0fe2			memcopy
.0fe2	20 1e 21	               jsr  push
.0fe5	ad f9 08	               lda  startaddr
.0fe8	85 fb		               sta  zpage1
.0fea	ad fa 08	               lda  startaddr+1
.0fed	85 fc		               sta  zpage1+1
.0fef	ad fd 08	               lda  bitmapaddr
.0ff2	85 fd		               sta  zpage2
.0ff4	ad fe 08	               lda  bitmapaddr+1
.0ff7	85 fe		               sta  zpage2+1
.0ff9	a0 00		               ldy  #$00
.0ffb	b1 fb		onemore        lda  (zpage1),y
.0ffd	91 fd		               sta  (zpage2),y
.0fff	20 25 22	               jsr  inczp1
.1002	20 3d 22	               jsr  inczp2
.1005	a5 fc		               lda  zpage1+1
.1007	cd fc 08	               cmp  stopaddr+1
.100a	d0 ef		               bne  onemore
.100c	a5 fb		               lda  zpage1
.100e	cd fb 08	               cmp  stopaddr
.1011	d0 e8		               bne  onemore
.1013	20 5d 21	               jsr  pop
.1016	60		               rts
.1017			staticscreen
.1017	48		               pha
.1018	a9 0b		               lda  #bordure
.101a	8d 20 d0	               sta  $d020
.101d	68		               pla
.101e	48		               pha
.101f	a9 00		               lda  #fond
.1021	8d 21 d0	               sta  $d021
.1024	68		               pla
.1025	20 06 11	               jsr  drawlines
.1028	20 e2 10	               jsr  drawallchars
.102b	20 4e 11	               jsr  drawgrid
.102e	20 53 10	               jsr  drawfkeys
.1031	20 1e 21	               jsr  push
.1034	a2 70		               ldx  #<blankmsg
.1036	a0 19		               ldy  #>blankmsg
.1038	20 b6 20	               jsr  putscxy
.103b	a2 0e		               ldx  #<quit_msg
.103d	a0 1c		               ldy  #>quit_msg
.103f	20 b6 20	               jsr  putscxy
.1042	20 5d 21	               jsr  pop
.1045	20 1e 21	               jsr  push
.1048	a2 00		               ldx  #0
.104a	a0 07		               ldy  #7
.104c	20 47 20	               jsr  gotoxy
.104f	20 5d 21	               jsr  pop
.1052	60		               rts
.1053			drawfkeys
.1053	20 1e 21	               jsr  push
.1056	ad 08 09	               lda  fkeyset
.1059	c9 00		               cmp  #$0
.105b	d0 42		               bne  secondks
.105d	a2 f0		               ldx #<titremenu1
.105f	a0 1d		               ldy #>titremenu1
.1061	20 b6 20	               jsr putscxy
.1064	a2 26		               ldx #<f1abutton
.1066	a0 1e		               ldy #>f1abutton
.1068	20 b6 20	               jsr putscxy
.106b	a2 41		               ldx #<f2abutton
.106d	a0 1e		               ldy #>f2abutton
.106f	20 b6 20	               jsr putscxy
.1072	a2 5c		               ldx #<f3abutton
.1074	a0 1e		               ldy #>f3abutton
.1076	20 b6 20	               jsr putscxy
.1079	a2 77		               ldx #<f4abutton
.107b	a0 1e		               ldy #>f4abutton
.107d	20 b6 20	               jsr putscxy
.1080	a2 92		               ldx #<f5abutton
.1082	a0 1e		               ldy #>f5abutton
.1084	20 b6 20	               jsr putscxy
.1087	a2 ad		               ldx #<f6abutton
.1089	a0 1e		               ldy #>f6abutton
.108b	20 b6 20	               jsr putscxy
.108e	a2 c8		               ldx #<f7abutton
.1090	a0 1e		               ldy #>f7abutton
.1092	20 b6 20	               jsr putscxy
.1095	a2 e3		               ldx #<f8abutton
.1097	a0 1e		               ldy #>f8abutton
.1099	20 b6 20	               jsr putscxy
.109c	4c de 10	               jmp end
.109f			secondks
.109f	a2 0b		               ldx #<titremenu2
.10a1	a0 1e		               ldy #>titremenu2
.10a3	20 b6 20	               jsr putscxy
.10a6	a2 fe		               ldx #<f1bbutton
.10a8	a0 1e		               ldy #>f1bbutton
.10aa	20 b6 20	               jsr putscxy
.10ad	a2 19		               ldx #<f2bbutton
.10af	a0 1f		               ldy #>f2bbutton
.10b1	20 b6 20	               jsr putscxy
.10b4	a2 34		               ldx #<f3bbutton
.10b6	a0 1f		               ldy #>f3bbutton
.10b8	20 b6 20	               jsr putscxy
.10bb	a2 4f		               ldx #<f4bbutton
.10bd	a0 1f		               ldy #>f4bbutton
.10bf	20 b6 20	               jsr putscxy
.10c2	a2 6a		               ldx #<f5bbutton
.10c4	a0 1f		               ldy #>f5bbutton
.10c6	20 b6 20	               jsr putscxy
.10c9	a2 85		               ldx #<f6bbutton
.10cb	a0 1f		               ldy #>f6bbutton
.10cd	20 b6 20	               jsr putscxy
.10d0	a2 a0		               ldx #<f7bbutton
.10d2	a0 1f		               ldy #>f7bbutton
.10d4	20 b6 20	               jsr putscxy
.10d7	a2 bb		               ldx #<f8bbutton
.10d9	a0 1f		               ldy #>f8bbutton
.10db	20 b6 20	               jsr putscxy
.10de	20 5d 21	end            jsr  pop
.10e1	60		               rts
.10e2			drawallchars
.10e2	20 1e 21	               jsr push
.10e5	20 1e 21	               jsr  push
.10e8	a2 00		               ldx  #0
.10ea	a0 00		               ldy  #0
.10ec	20 47 20	               jsr  gotoxy
.10ef	20 5d 21	               jsr  pop
.10f2	a2 00		               ldx  #$00
.10f4	8a		nextc          txa
.10f5	9d 00 04	               sta  scrnnewram,x
.10f8	a9 0f		               lda  #charscolor
.10fa	9d 00 d8	               sta  colorram,x
.10fd	e8		               inx
.10fe	e0 80		               cpx  #$80
.1100	d0 f2		               bne  nextc
.1102	20 5d 21	               jsr  pop
.1105	60		               rts
.1106			drawlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.1106	20 1e 21	               jsr  push
.1109	a2 28		               ldx  #40
.110b	a9 40		               lda  #64
.110d	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.1110	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.1113	ca		               dex
.1114	e0 10		hline          cpx  #vlinepos
.1116	10 03		               bpl  notyet
.1118	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.111b	e0 00		notyet         cpx  #$00
.111d	d0 ee		               bne  nextl
.111f	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.1121	85 fb		               sta  zpage1
.1123	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.1125	85 fc		               sta  zpage1+1
.1127	a0 00		               ldy  #0
.1129	a9 72		               lda  #114
.112b	91 fb		               sta  (zpage1),y
.112d	20 bd 11	               jsr  zp1add40
.1130	a2 12		               ldx  #24-hline2
.1132	a9 5d		               lda  #93
.1134	91 fb		another93      sta  (zpage1),y
.1136	20 bd 11	               jsr  zp1add40
.1139	ca		               dex
.113a	d0 f8		               bne  another93
.113c	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.113e	85 fb		               sta  zpage1
.1140	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.1142	85 fc		               sta  zpage1+1
.1144	a0 00		               ldy  #0
.1146	a9 73		               lda  #115
.1148	91 fb		               sta  (zpage1),y
.114a	20 5d 21	               jsr  pop
.114d	60		               rts
.114e			drawgrid
.114e	20 1e 21	               jsr  push
.1151	20 d6 1f	               jsr  screendis
.1154	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.1156	85 fb		               sta  zpage1
.1158	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.115a	85 fc		               sta  zpage1+1
.115c	a2 08		               ldx  #8
.115e	a9 65		nextbox        lda  #101
.1160	a0 09		               ldy  #9
.1162	91 fb		               sta  (zpage1),y
.1164	88		               dey
.1165	a9 2e		               lda  #$2e
.1167	91 fb		nextcol        sta  (zpage1),y
.1169	88		               dey
.116a	d0 fb		               bne  nextcol
.116c	20 bd 11	               jsr  zp1add40
.116f	ca		               dex
.1170	d0 ec		               bne  nextbox
.1172	a0 08		               ldy  #8
.1174	a9 77		               lda  #119
.1176	91 fb		nextlin        sta  (zpage1),y
.1178	88		               dey
.1179	d0 fb		               bne  nextlin
.117b	a9 3e		               lda  #$3e
.117d	8d eb 05	               sta  scrnnewram+(40*(12))+11
.1180	a9 70		               lda  #$70                     ;+
.1182	8d c4 05	               sta  scrnnewram+(40*(11))+12
.1185	a9 43		               lda  #$43                     ;-
.1187	8d c5 05	               sta  scrnnewram+(40*(11))+13
.118a	a9 6e		               lda  #$6e                     ;+
.118c	8d c6 05	               sta  scrnnewram+(40*(11))+14
.118f	a9 5d		               lda  #$5d                     ;|
.1191	8d ec 05	               sta  scrnnewram+(40*(12))+12
.1194	a9 5d		               lda  #$5d                     ;|
.1196	8d ee 05	               sta  scrnnewram+(40*(12))+14
.1199	a9 6d		               lda  #$6d                     ;+
.119b	8d 14 06	               sta  scrnnewram+(40*(13))+12
.119e	a9 43		               lda  #$43                     ;-
.11a0	8d 15 06	               sta  scrnnewram+(40*(13))+13
.11a3	a9 7d		               lda  #$7d                     ;+
.11a5	8d 16 06	               sta  scrnnewram+(40*(13))+14
.11a8	20 e3 1f	               jsr screenena
.11ab	20 5d 21	               jsr  pop
.11ae	60		               rts
.11af			zp1addnum
.11af	08		               php
.11b0	48		               pha
.11b1	18		               clc
.11b2	65 fb		               adc  zpage1
.11b4	90 02		               bcc  nocarry
.11b6	e6 fc		               inc  zpage1+1
.11b8	85 fb		nocarry        sta  zpage1
.11ba	68		               pla
.11bb	28		               plp
.11bc	60		               rts
.11bd			zp1add40
.11bd	08		               php
.11be	48		               pha
.11bf	18		               clc
.11c0	a5 fb		               lda  zpage1
.11c2	69 28		               adc  #40
.11c4	90 02		               bcc  nocarry
.11c6	e6 fc		               inc  zpage1+1
.11c8	85 fb		nocarry        sta  zpage1
.11ca	68		               pla
.11cb	28		               plp
.11cc	60		               rts
.11cd			delay
.11cd	20 1e 21	               jsr  push
.11d0	a9 00		               lda  #$0
.11d2	aa		               tax
.11d3	a8		               tay
.11d4	ca		xagain         dex
.11d5	ca		               dex
.11d6	88		yagain         dey
.11d7	c0 00		               cpy  #$00
.11d9	d0 fb		               bne  yagain
.11db	e0 00		               cpx  #$00
.11dd	d0 f5		               bne  xagain
.11df	20 5d 21	               jsr  pop
.11e2	60		               rts
.11e3			f1action
.11e3	48		               pha
.11e4	a9 ff		               lda  #$ff
.11e6	8d 07 09	               sta  editmode
.11e9	ad 08 09	               lda  fkeyset
.11ec	f0 03		               beq  menua
.11ee	4c 76 12	               jmp  menub
.11f1			menua
.11f1	20 1e 21	               jsr  push
.11f4	a2 70		               ldx  #<blankmsg
.11f6	a0 19		               ldy  #>blankmsg
.11f8	20 b6 20	               jsr  putscxy
.11fb	a2 c2		               ldx  #<f1a_msg
.11fd	a0 19		               ldy  #>f1a_msg
.11ff	20 b6 20	               jsr  putscxy
.1202	20 5d 21	               jsr  pop
.1205	08		               php
.1206	48		               pha
.1207	8a		               txa
.1208	48		               pha
.1209	ad 26 1e	               lda  f1abutton
.120c	48		               pha
.120d	a9 92		               lda  #146
.120f	8d 38 1e	               sta  f1abutton+18
.1212	a9 01		               lda  #flashcol
.1214	8d 26 1e	               sta  f1abutton
.1217	a2 26		               ldx  #<f1abutton
.1219	a0 1e		               ldy  #>f1abutton
.121b	20 b6 20	               jsr  putscxy
.121e	20 cd 11	               jsr  delay
.1221	a9 12		               lda  #18
.1223	8d 38 1e	               sta  f1abutton+18
.1226	68		               pla
.1227	8d 26 1e	               sta  f1abutton
.122a	a2 26		               ldx  #<f1abutton
.122c	a0 1e		               ldy  #>f1abutton
.122e	20 b6 20	               jsr  putscxy
.1231	68		               pla
.1232	aa		               tax
.1233	68		               pla
.1234	28		               plp
.1235	a9 0b		               lda  #vgris
.1237	20 00 0b	               jsr  setmenuacolor
.123a	a9 03		               lda  #menu1col1
.123c	8d 26 1e	               sta  f1abutton
.123f	20 53 10	               jsr  drawfkeys
.1242	20 37 0d	               jsr  editor
.1245	20 1e 21	               jsr  push
.1248	a2 70		               ldx  #<blankmsg
.124a	a0 19		               ldy  #>blankmsg
.124c	20 b6 20	               jsr  putscxy
.124f	a2 0e		               ldx  #<quit_msg
.1251	a0 1c		               ldy  #>quit_msg
.1253	20 b6 20	               jsr  putscxy
.1256	20 5d 21	               jsr  pop
.1259	20 1e 21	               jsr  push
.125c	a2 70		               ldx  #<blankmsg
.125e	a0 19		               ldy  #>blankmsg
.1260	20 b6 20	               jsr  putscxy
.1263	a2 66		               ldx  #<menua_msg
.1265	a0 1b		               ldy  #>menua_msg
.1267	20 b6 20	               jsr  putscxy
.126a	20 5d 21	               jsr  pop
.126d	20 ba 0a	               jsr  resetmenuacolor
.1270	20 53 10	               jsr  drawfkeys
.1273	4c c0 12	               jmp  out
.1276			menub
.1276	20 1e 21	               jsr  push
.1279	a2 70		               ldx  #<blankmsg
.127b	a0 19		               ldy  #>blankmsg
.127d	20 b6 20	               jsr  putscxy
.1280	a2 aa		               ldx  #<f1b_msg
.1282	a0 1a		               ldy  #>f1b_msg
.1284	20 b6 20	               jsr  putscxy
.1287	20 5d 21	               jsr  pop
.128a	08		               php
.128b	48		               pha
.128c	8a		               txa
.128d	48		               pha
.128e	ad fe 1e	               lda  f1bbutton
.1291	48		               pha
.1292	a9 92		               lda  #146
.1294	8d 10 1f	               sta  f1bbutton+18
.1297	a9 01		               lda  #flashcol
.1299	8d fe 1e	               sta  f1bbutton
.129c	a2 fe		               ldx  #<f1bbutton
.129e	a0 1e		               ldy  #>f1bbutton
.12a0	20 b6 20	               jsr  putscxy
.12a3	20 cd 11	               jsr  delay
.12a6	a9 12		               lda  #18
.12a8	8d 10 1f	               sta  f1bbutton+18
.12ab	68		               pla
.12ac	8d fe 1e	               sta  f1bbutton
.12af	a2 fe		               ldx  #<f1bbutton
.12b1	a0 1e		               ldy  #>f1bbutton
.12b3	20 b6 20	               jsr  putscxy
.12b6	68		               pla
.12b7	aa		               tax
.12b8	68		               pla
.12b9	28		               plp
.12ba	20 3c 19	               jsr  flipvert
.12bd	20 e9 0e	               jsr  drawbitmap
.12c0	68		out            pla
.12c1	20 1e 21	               jsr  push
.12c4	a2 70		               ldx  #<blankmsg
.12c6	a0 19		               ldy  #>blankmsg
.12c8	20 b6 20	               jsr  putscxy
.12cb	a2 9c		               ldx  #<prompt_msg
.12cd	a0 19		               ldy  #>prompt_msg
.12cf	20 b6 20	               jsr  putscxy
.12d2	20 5d 21	               jsr  pop
.12d5	60		               rts
.12d6			f2action
.12d6	48		               pha
.12d7	a9 00		               lda  #$0
.12d9	8d 07 09	               sta  editmode
.12dc	ad 08 09	               lda  fkeyset
.12df	d0 4d		               bne  menub
.12e1	20 1e 21	               jsr  push
.12e4	a2 70		               ldx  #<blankmsg
.12e6	a0 19		               ldy  #>blankmsg
.12e8	20 b6 20	               jsr  putscxy
.12eb	a2 dd		               ldx  #<f2a_msg
.12ed	a0 19		               ldy  #>f2a_msg
.12ef	20 b6 20	               jsr  putscxy
.12f2	20 5d 21	               jsr  pop
.12f5	08		               php
.12f6	48		               pha
.12f7	8a		               txa
.12f8	48		               pha
.12f9	ad 41 1e	               lda  f2abutton
.12fc	48		               pha
.12fd	a9 92		               lda  #146
.12ff	8d 53 1e	               sta  f2abutton+18
.1302	a9 01		               lda  #flashcol
.1304	8d 41 1e	               sta  f2abutton
.1307	a2 41		               ldx  #<f2abutton
.1309	a0 1e		               ldy  #>f2abutton
.130b	20 b6 20	               jsr  putscxy
.130e	20 cd 11	               jsr  delay
.1311	a9 12		               lda  #18
.1313	8d 53 1e	               sta  f2abutton+18
.1316	68		               pla
.1317	8d 41 1e	               sta  f2abutton
.131a	a2 41		               ldx  #<f2abutton
.131c	a0 1e		               ldy  #>f2abutton
.131e	20 b6 20	               jsr  putscxy
.1321	68		               pla
.1322	aa		               tax
.1323	68		               pla
.1324	28		               plp
.1325	20 a2 09	               jsr  copychar
.1328	20 e9 0e	               jsr  drawbitmap
.132b	4c 78 13	               jmp  out
.132e			menub
.132e	20 1e 21	               jsr  push
.1331	a2 70		               ldx  #<blankmsg
.1333	a0 19		               ldy  #>blankmsg
.1335	20 b6 20	               jsr  putscxy
.1338	a2 c6		               ldx  #<f2b_msg
.133a	a0 1a		               ldy  #>f2b_msg
.133c	20 b6 20	               jsr  putscxy
.133f	20 5d 21	               jsr  pop
.1342	08		               php
.1343	48		               pha
.1344	8a		               txa
.1345	48		               pha
.1346	ad 19 1f	               lda  f2bbutton
.1349	48		               pha
.134a	a9 92		               lda  #146
.134c	8d 2b 1f	               sta  f2bbutton+18
.134f	a9 01		               lda  #flashcol
.1351	8d 19 1f	               sta  f2bbutton
.1354	a2 19		               ldx  #<f2bbutton
.1356	a0 1f		               ldy  #>f2bbutton
.1358	20 b6 20	               jsr  putscxy
.135b	20 cd 11	               jsr  delay
.135e	a9 12		               lda  #18
.1360	8d 2b 1f	               sta  f2bbutton+18
.1363	68		               pla
.1364	8d 19 1f	               sta  f2bbutton
.1367	a2 19		               ldx  #<f2bbutton
.1369	a0 1f		               ldy  #>f2bbutton
.136b	20 b6 20	               jsr  putscxy
.136e	68		               pla
.136f	aa		               tax
.1370	68		               pla
.1371	28		               plp
.1372	20 0f 19	               jsr  fliphorz
.1375	20 e9 0e	               jsr  drawbitmap
.1378	68		out            pla
.1379	20 1e 21	               jsr  push
.137c	a2 70		               ldx  #<blankmsg
.137e	a0 19		               ldy  #>blankmsg
.1380	20 b6 20	               jsr  putscxy
.1383	a2 9c		               ldx  #<prompt_msg
.1385	a0 19		               ldy  #>prompt_msg
.1387	20 b6 20	               jsr  putscxy
.138a	20 5d 21	               jsr  pop
.138d	60		               rts
.138e			f3action
.138e	48		               pha
.138f	a9 00		               lda  #$0
.1391	8d 07 09	               sta  editmode
.1394	ad 08 09	               lda  fkeyset
.1397	d0 65		               bne  menub
.1399	08		               php
.139a	48		               pha
.139b	8a		               txa
.139c	48		               pha
.139d	ad 5c 1e	               lda  f3abutton
.13a0	48		               pha
.13a1	a9 92		               lda  #146
.13a3	8d 6e 1e	               sta  f3abutton+18
.13a6	a9 01		               lda  #flashcol
.13a8	8d 5c 1e	               sta  f3abutton
.13ab	a2 5c		               ldx  #<f3abutton
.13ad	a0 1e		               ldy  #>f3abutton
.13af	20 b6 20	               jsr  putscxy
.13b2	20 cd 11	               jsr  delay
.13b5	a9 12		               lda  #18
.13b7	8d 6e 1e	               sta  f3abutton+18
.13ba	68		               pla
.13bb	8d 5c 1e	               sta  f3abutton
.13be	a2 5c		               ldx  #<f3abutton
.13c0	a0 1e		               ldy  #>f3abutton
.13c2	20 b6 20	               jsr  putscxy
.13c5	68		               pla
.13c6	aa		               tax
.13c7	68		               pla
.13c8	28		               plp
.13c9	20 1e 21	               jsr  push
.13cc	a2 70		               ldx  #<blankmsg
.13ce	a0 19		               ldy  #>blankmsg
.13d0	20 b6 20	               jsr  putscxy
.13d3	a2 fe		               ldx  #<f3a_msg
.13d5	a0 19		               ldy  #>f3a_msg
.13d7	20 b6 20	               jsr  putscxy
.13da	20 5d 21	               jsr  pop
.13dd	20 3e 25	getagain       jsr  getkey
.13e0	c9 31		               cmp  #$31
.13e2	f0 0b		               beq  devok
.13e4	c9 38		               cmp  #$38
.13e6	f0 07		               beq  devok
.13e8	c9 39		               cmp  #$39
.13ea	f0 03		               beq  devok
.13ec	4c dd 13	               jmp  getagain
.13ef	8d 28 09	devok          sta  device
.13f2	20 27 20	               jsr  putch
.13f5	20 30 09	               jsr  getfname
.13f8	20 b9 08	               jsr  loadfromfile
.13fb	4c 48 14	               jmp  out
.13fe			menub
.13fe	20 1e 21	               jsr  push
.1401	a2 70		               ldx  #<blankmsg
.1403	a0 19		               ldy  #>blankmsg
.1405	20 b6 20	               jsr  putscxy
.1408	a2 e4		               ldx  #<f3b_msg
.140a	a0 1a		               ldy  #>f3b_msg
.140c	20 b6 20	               jsr  putscxy
.140f	20 5d 21	               jsr  pop
.1412	08		               php
.1413	48		               pha
.1414	8a		               txa
.1415	48		               pha
.1416	ad 34 1f	               lda  f3bbutton
.1419	48		               pha
.141a	a9 92		               lda  #146
.141c	8d 46 1f	               sta  f3bbutton+18
.141f	a9 01		               lda  #flashcol
.1421	8d 34 1f	               sta  f3bbutton
.1424	a2 34		               ldx  #<f3bbutton
.1426	a0 1f		               ldy  #>f3bbutton
.1428	20 b6 20	               jsr  putscxy
.142b	20 cd 11	               jsr  delay
.142e	a9 12		               lda  #18
.1430	8d 46 1f	               sta  f3bbutton+18
.1433	68		               pla
.1434	8d 34 1f	               sta  f3bbutton
.1437	a2 34		               ldx  #<f3bbutton
.1439	a0 1f		               ldy  #>f3bbutton
.143b	20 b6 20	               jsr  putscxy
.143e	68		               pla
.143f	aa		               tax
.1440	68		               pla
.1441	28		               plp
.1442	20 9a 18	               jsr  scrollright
.1445	20 e9 0e	               jsr  drawbitmap
.1448	68		out            pla
.1449	20 1e 21	               jsr  push
.144c	a2 70		               ldx  #<blankmsg
.144e	a0 19		               ldy  #>blankmsg
.1450	20 b6 20	               jsr  putscxy
.1453	a2 9c		               ldx  #<prompt_msg
.1455	a0 19		               ldy  #>prompt_msg
.1457	20 b6 20	               jsr  putscxy
.145a	20 5d 21	               jsr  pop
.145d	60		               rts
.145e			f4action
.145e	48		               pha
.145f	a9 00		               lda  #$0
.1461	8d 07 09	               sta  editmode
.1464	ad 08 09	               lda  fkeyset
.1467	d0 5e		               bne  menub
.1469	08		               php
.146a	48		               pha
.146b	8a		               txa
.146c	48		               pha
.146d	ad 77 1e	               lda  f4abutton
.1470	48		               pha
.1471	a9 92		               lda  #146
.1473	8d 89 1e	               sta  f4abutton+18
.1476	a9 01		               lda  #flashcol
.1478	8d 77 1e	               sta  f4abutton
.147b	a2 77		               ldx  #<f4abutton
.147d	a0 1e		               ldy  #>f4abutton
.147f	20 b6 20	               jsr  putscxy
.1482	20 cd 11	               jsr  delay
.1485	a9 12		               lda  #18
.1487	8d 89 1e	               sta  f4abutton+18
.148a	68		               pla
.148b	8d 77 1e	               sta  f4abutton
.148e	a2 77		               ldx  #<f4abutton
.1490	a0 1e		               ldy  #>f4abutton
.1492	20 b6 20	               jsr  putscxy
.1495	68		               pla
.1496	aa		               tax
.1497	68		               pla
.1498	28		               plp
.1499	20 1e 21	               jsr  push
.149c	a2 70		               ldx  #<blankmsg
.149e	a0 19		               ldy  #>blankmsg
.14a0	20 b6 20	               jsr  putscxy
.14a3	a2 2b		               ldx  #<f4a_msg
.14a5	a0 1a		               ldy  #>f4a_msg
.14a7	20 b6 20	               jsr  putscxy
.14aa	20 5d 21	               jsr  pop
.14ad	20 3e 25	getagain       jsr  getkey
.14b0	c9 43		               cmp  #$43
.14b2	f0 07		               beq  devok
.14b4	c9 44		               cmp  #$44
.14b6	f0 03		               beq  devok
.14b8	4c ad 14	               jmp  getagain
.14bb	8d 28 09	devok          sta  device
.14be	20 27 20	               jsr  putch
.14c1	20 30 09	               jsr  getfname
.14c4	4c 11 15	               jmp  out
.14c7			menub
.14c7	20 1e 21	               jsr  push
.14ca	a2 70		               ldx  #<blankmsg
.14cc	a0 19		               ldy  #>blankmsg
.14ce	20 b6 20	               jsr  putscxy
.14d1	a2 00		               ldx  #<f4b_msg
.14d3	a0 1b		               ldy  #>f4b_msg
.14d5	20 b6 20	               jsr  putscxy
.14d8	20 5d 21	               jsr  pop
.14db	08		               php
.14dc	48		               pha
.14dd	8a		               txa
.14de	48		               pha
.14df	ad 4f 1f	               lda  f4bbutton
.14e2	48		               pha
.14e3	a9 92		               lda  #146
.14e5	8d 61 1f	               sta  f4bbutton+18
.14e8	a9 01		               lda  #flashcol
.14ea	8d 4f 1f	               sta  f4bbutton
.14ed	a2 4f		               ldx  #<f4bbutton
.14ef	a0 1f		               ldy  #>f4bbutton
.14f1	20 b6 20	               jsr  putscxy
.14f4	20 cd 11	               jsr  delay
.14f7	a9 12		               lda  #18
.14f9	8d 61 1f	               sta  f4bbutton+18
.14fc	68		               pla
.14fd	8d 4f 1f	               sta  f4bbutton
.1500	a2 4f		               ldx  #<f4bbutton
.1502	a0 1f		               ldy  #>f4bbutton
.1504	20 b6 20	               jsr  putscxy
.1507	68		               pla
.1508	aa		               tax
.1509	68		               pla
.150a	28		               plp
.150b	20 bf 18	               jsr  scrollleft
.150e	20 e9 0e	               jsr  drawbitmap
.1511	68		out            pla
.1512	20 1e 21	               jsr  push
.1515	a2 70		               ldx  #<blankmsg
.1517	a0 19		               ldy  #>blankmsg
.1519	20 b6 20	               jsr  putscxy
.151c	a2 9c		               ldx  #<prompt_msg
.151e	a0 19		               ldy  #>prompt_msg
.1520	20 b6 20	               jsr  putscxy
.1523	20 5d 21	               jsr  pop
.1526	60		               rts
.1527			f5action
.1527	48		               pha
.1528	a9 00		               lda  #$0
.152a	8d 07 09	               sta  editmode
.152d	ad 08 09	               lda  fkeyset
.1530	d0 4d		               bne  menub
.1532	20 1e 21	               jsr  push
.1535	a2 70		               ldx  #<blankmsg
.1537	a0 19		               ldy  #>blankmsg
.1539	20 b6 20	               jsr  putscxy
.153c	a2 53		               ldx  #<f5a_msg
.153e	a0 1a		               ldy  #>f5a_msg
.1540	20 b6 20	               jsr  putscxy
.1543	20 5d 21	               jsr  pop
.1546	08		               php
.1547	48		               pha
.1548	8a		               txa
.1549	48		               pha
.154a	ad 92 1e	               lda  f5abutton
.154d	48		               pha
.154e	a9 92		               lda  #146
.1550	8d a4 1e	               sta  f5abutton+18
.1553	a9 01		               lda  #flashcol
.1555	8d 92 1e	               sta  f5abutton
.1558	a2 92		               ldx  #<f5abutton
.155a	a0 1e		               ldy  #>f5abutton
.155c	20 b6 20	               jsr  putscxy
.155f	20 cd 11	               jsr  delay
.1562	a9 12		               lda  #18
.1564	8d a4 1e	               sta  f5abutton+18
.1567	68		               pla
.1568	8d 92 1e	               sta  f5abutton
.156b	a2 92		               ldx  #<f5abutton
.156d	a0 1e		               ldy  #>f5abutton
.156f	20 b6 20	               jsr  putscxy
.1572	68		               pla
.1573	aa		               tax
.1574	68		               pla
.1575	28		               plp
.1576	20 ed 18	               jsr  clearchar
.1579	20 e9 0e	               jsr  drawbitmap
.157c	4c c9 15	               jmp  out
.157f			menub
.157f	20 1e 21	               jsr  push
.1582	a2 70		               ldx  #<blankmsg
.1584	a0 19		               ldy  #>blankmsg
.1586	20 b6 20	               jsr  putscxy
.1589	a2 1c		               ldx  #<f5b_msg
.158b	a0 1b		               ldy  #>f5b_msg
.158d	20 b6 20	               jsr  putscxy
.1590	20 5d 21	               jsr  pop
.1593	08		               php
.1594	48		               pha
.1595	8a		               txa
.1596	48		               pha
.1597	ad 6a 1f	               lda  f5bbutton
.159a	48		               pha
.159b	a9 92		               lda  #146
.159d	8d 7c 1f	               sta  f5bbutton+18
.15a0	a9 01		               lda  #flashcol
.15a2	8d 6a 1f	               sta  f5bbutton
.15a5	a2 6a		               ldx  #<f5bbutton
.15a7	a0 1f		               ldy  #>f5bbutton
.15a9	20 b6 20	               jsr  putscxy
.15ac	20 cd 11	               jsr  delay
.15af	a9 12		               lda  #18
.15b1	8d 7c 1f	               sta  f5bbutton+18
.15b4	68		               pla
.15b5	8d 6a 1f	               sta  f5bbutton
.15b8	a2 6a		               ldx  #<f5bbutton
.15ba	a0 1f		               ldy  #>f5bbutton
.15bc	20 b6 20	               jsr  putscxy
.15bf	68		               pla
.15c0	aa		               tax
.15c1	68		               pla
.15c2	28		               plp
.15c3	20 28 18	               jsr  scrollup
.15c6	20 e9 0e	               jsr  drawbitmap
.15c9	68		out            pla
.15ca	20 1e 21	               jsr  push
.15cd	a2 70		               ldx  #<blankmsg
.15cf	a0 19		               ldy  #>blankmsg
.15d1	20 b6 20	               jsr  putscxy
.15d4	a2 9c		               ldx  #<prompt_msg
.15d6	a0 19		               ldy  #>prompt_msg
.15d8	20 b6 20	               jsr  putscxy
.15db	20 5d 21	               jsr  pop
.15de	60		               rts
.15df			f6action
.15df	48		               pha
.15e0	a9 00		               lda  #$0
.15e2	8d 07 09	               sta  editmode
.15e5	ad 08 09	               lda  fkeyset
.15e8	d0 4d		               bne  menub
.15ea	20 1e 21	               jsr  push
.15ed	a2 70		               ldx  #<blankmsg
.15ef	a0 19		               ldy  #>blankmsg
.15f1	20 b6 20	               jsr  putscxy
.15f4	a2 6f		               ldx  #<f6a_msg
.15f6	a0 1a		               ldy  #>f6a_msg
.15f8	20 b6 20	               jsr  putscxy
.15fb	20 5d 21	               jsr  pop
.15fe	08		               php
.15ff	48		               pha
.1600	8a		               txa
.1601	48		               pha
.1602	ad ad 1e	               lda  f6abutton
.1605	48		               pha
.1606	a9 92		               lda  #146
.1608	8d bf 1e	               sta  f6abutton+18
.160b	a9 01		               lda  #flashcol
.160d	8d ad 1e	               sta  f6abutton
.1610	a2 ad		               ldx  #<f6abutton
.1612	a0 1e		               ldy  #>f6abutton
.1614	20 b6 20	               jsr  putscxy
.1617	20 cd 11	               jsr  delay
.161a	a9 12		               lda  #18
.161c	8d bf 1e	               sta  f6abutton+18
.161f	68		               pla
.1620	8d ad 1e	               sta  f6abutton
.1623	a2 ad		               ldx  #<f6abutton
.1625	a0 1e		               ldy  #>f6abutton
.1627	20 b6 20	               jsr  putscxy
.162a	68		               pla
.162b	aa		               tax
.162c	68		               pla
.162d	28		               plp
.162e	20 e1 18	               jsr  fillchar
.1631	20 e9 0e	               jsr  drawbitmap
.1634	4c 81 16	               jmp  out
.1637			menub
.1637	20 1e 21	               jsr  push
.163a	a2 70		               ldx  #<blankmsg
.163c	a0 19		               ldy  #>blankmsg
.163e	20 b6 20	               jsr  putscxy
.1641	a2 36		               ldx  #<f6b_msg
.1643	a0 1b		               ldy  #>f6b_msg
.1645	20 b6 20	               jsr  putscxy
.1648	20 5d 21	               jsr  pop
.164b	08		               php
.164c	48		               pha
.164d	8a		               txa
.164e	48		               pha
.164f	ad 85 1f	               lda  f6bbutton
.1652	48		               pha
.1653	a9 92		               lda  #146
.1655	8d 97 1f	               sta  f6bbutton+18
.1658	a9 01		               lda  #flashcol
.165a	8d 85 1f	               sta  f6bbutton
.165d	a2 85		               ldx  #<f6bbutton
.165f	a0 1f		               ldy  #>f6bbutton
.1661	20 b6 20	               jsr  putscxy
.1664	20 cd 11	               jsr  delay
.1667	a9 12		               lda  #18
.1669	8d 97 1f	               sta  f6bbutton+18
.166c	68		               pla
.166d	8d 85 1f	               sta  f6bbutton
.1670	a2 85		               ldx  #<f6bbutton
.1672	a0 1f		               ldy  #>f6bbutton
.1674	20 b6 20	               jsr  putscxy
.1677	68		               pla
.1678	aa		               tax
.1679	68		               pla
.167a	28		               plp
.167b	20 60 18	               jsr  scrolldown
.167e	20 e9 0e	               jsr  drawbitmap
.1681	68		out            pla
.1682	20 1e 21	               jsr  push
.1685	a2 70		               ldx  #<blankmsg
.1687	a0 19		               ldy  #>blankmsg
.1689	20 b6 20	               jsr  putscxy
.168c	a2 9c		               ldx  #<prompt_msg
.168e	a0 19		               ldy  #>prompt_msg
.1690	20 b6 20	               jsr  putscxy
.1693	20 5d 21	               jsr  pop
.1696	60		               rts
.1697			f7action
.1697	48		               pha
.1698	a9 00		               lda  #$0
.169a	8d 07 09	               sta  editmode
.169d	ad 08 09	               lda  fkeyset
.16a0	d0 4d		               bne  menub
.16a2	20 1e 21	               jsr  push
.16a5	a2 70		               ldx  #<blankmsg
.16a7	a0 19		               ldy  #>blankmsg
.16a9	20 b6 20	               jsr  putscxy
.16ac	a2 8c		               ldx  #<f7a_msg
.16ae	a0 1a		               ldy  #>f7a_msg
.16b0	20 b6 20	               jsr  putscxy
.16b3	20 5d 21	               jsr  pop
.16b6	08		               php
.16b7	48		               pha
.16b8	8a		               txa
.16b9	48		               pha
.16ba	ad c8 1e	               lda  f7abutton
.16bd	48		               pha
.16be	a9 92		               lda  #146
.16c0	8d da 1e	               sta  f7abutton+18
.16c3	a9 01		               lda  #flashcol
.16c5	8d c8 1e	               sta  f7abutton
.16c8	a2 c8		               ldx  #<f7abutton
.16ca	a0 1e		               ldy  #>f7abutton
.16cc	20 b6 20	               jsr  putscxy
.16cf	20 cd 11	               jsr  delay
.16d2	a9 12		               lda  #18
.16d4	8d da 1e	               sta  f7abutton+18
.16d7	68		               pla
.16d8	8d c8 1e	               sta  f7abutton
.16db	a2 c8		               ldx  #<f7abutton
.16dd	a0 1e		               ldy  #>f7abutton
.16df	20 b6 20	               jsr  putscxy
.16e2	68		               pla
.16e3	aa		               tax
.16e4	68		               pla
.16e5	28		               plp
.16e6	20 bc 0f	               jsr  copycharset
.16e9	20 e9 0e	               jsr  drawbitmap
.16ec	4c 3e 17	               jmp  out
.16ef	a9 00		menub          lda  #$0
.16f1	8d 07 09	               sta  editmode
.16f4	20 1e 21	               jsr  push
.16f7	a2 70		               ldx  #<blankmsg
.16f9	a0 19		               ldy  #>blankmsg
.16fb	20 b6 20	               jsr  putscxy
.16fe	a2 4f		               ldx  #<f7b_msg
.1700	a0 1b		               ldy  #>f7b_msg
.1702	20 b6 20	               jsr  putscxy
.1705	20 5d 21	               jsr  pop
.1708	08		               php
.1709	48		               pha
.170a	8a		               txa
.170b	48		               pha
.170c	ad a0 1f	               lda  f7bbutton
.170f	48		               pha
.1710	a9 92		               lda  #146
.1712	8d b2 1f	               sta  f7bbutton+18
.1715	a9 01		               lda  #flashcol
.1717	8d a0 1f	               sta  f7bbutton
.171a	a2 a0		               ldx  #<f7bbutton
.171c	a0 1f		               ldy  #>f7bbutton
.171e	20 b6 20	               jsr  putscxy
.1721	20 cd 11	               jsr  delay
.1724	a9 12		               lda  #18
.1726	8d b2 1f	               sta  f7bbutton+18
.1729	68		               pla
.172a	8d a0 1f	               sta  f7bbutton
.172d	a2 a0		               ldx  #<f7bbutton
.172f	a0 1f		               ldy  #>f7bbutton
.1731	20 b6 20	               jsr  putscxy
.1734	68		               pla
.1735	aa		               tax
.1736	68		               pla
.1737	28		               plp
.1738	20 08 18	               jsr  reverse
.173b	20 e9 0e	               jsr  drawbitmap
.173e	68		out            pla
.173f	20 1e 21	               jsr  push
.1742	a2 70		               ldx  #<blankmsg
.1744	a0 19		               ldy  #>blankmsg
.1746	20 b6 20	               jsr  putscxy
.1749	a2 9c		               ldx  #<prompt_msg
.174b	a0 19		               ldy  #>prompt_msg
.174d	20 b6 20	               jsr  putscxy
.1750	20 5d 21	               jsr  pop
.1753	60		               rts
.1754			f8action
.1754	48		               pha
.1755	a9 00		               lda  #$0
.1757	8d 07 09	               sta  editmode
.175a	ad 08 09	               lda  fkeyset
.175d	d0 47		               bne  menub
.175f	20 1e 21	               jsr  push
.1762	a2 70		               ldx  #<blankmsg
.1764	a0 19		               ldy  #>blankmsg
.1766	20 b6 20	               jsr  putscxy
.1769	a2 8b		               ldx  #<menub_msg
.176b	a0 1b		               ldy  #>menub_msg
.176d	20 b6 20	               jsr  putscxy
.1770	20 5d 21	               jsr  pop
.1773	08		               php
.1774	48		               pha
.1775	8a		               txa
.1776	48		               pha
.1777	ad e3 1e	               lda  f8abutton
.177a	48		               pha
.177b	a9 92		               lda  #146
.177d	8d f5 1e	               sta  f8abutton+18
.1780	a9 01		               lda  #flashcol
.1782	8d e3 1e	               sta  f8abutton
.1785	a2 e3		               ldx  #<f8abutton
.1787	a0 1e		               ldy  #>f8abutton
.1789	20 b6 20	               jsr  putscxy
.178c	20 cd 11	               jsr  delay
.178f	a9 12		               lda  #18
.1791	8d f5 1e	               sta  f8abutton+18
.1794	68		               pla
.1795	8d e3 1e	               sta  f8abutton
.1798	a2 e3		               ldx  #<f8abutton
.179a	a0 1e		               ldy  #>f8abutton
.179c	20 b6 20	               jsr  putscxy
.179f	68		               pla
.17a0	aa		               tax
.17a1	68		               pla
.17a2	28		               plp
.17a3	4c ea 17	               jmp  swapit
.17a6			menub
.17a6	20 1e 21	               jsr  push
.17a9	a2 70		               ldx  #<blankmsg
.17ab	a0 19		               ldy  #>blankmsg
.17ad	20 b6 20	               jsr  putscxy
.17b0	a2 66		               ldx  #<menua_msg
.17b2	a0 1b		               ldy  #>menua_msg
.17b4	20 b6 20	               jsr  putscxy
.17b7	20 5d 21	               jsr  pop
.17ba	08		               php
.17bb	48		               pha
.17bc	8a		               txa
.17bd	48		               pha
.17be	ad bb 1f	               lda  f8bbutton
.17c1	48		               pha
.17c2	a9 92		               lda  #146
.17c4	8d cd 1f	               sta  f8bbutton+18
.17c7	a9 01		               lda  #flashcol
.17c9	8d bb 1f	               sta  f8bbutton
.17cc	a2 bb		               ldx  #<f8bbutton
.17ce	a0 1f		               ldy  #>f8bbutton
.17d0	20 b6 20	               jsr  putscxy
.17d3	20 cd 11	               jsr  delay
.17d6	a9 12		               lda  #18
.17d8	8d cd 1f	               sta  f8bbutton+18
.17db	68		               pla
.17dc	8d bb 1f	               sta  f8bbutton
.17df	a2 bb		               ldx  #<f8bbutton
.17e1	a0 1f		               ldy  #>f8bbutton
.17e3	20 b6 20	               jsr  putscxy
.17e6	68		               pla
.17e7	aa		               tax
.17e8	68		               pla
.17e9	28		               plp
.17ea	49 ff		swapit         eor  #$ff
.17ec	8d 08 09	               sta  fkeyset
.17ef	20 53 10	               jsr  drawfkeys
.17f2	68		               pla
.17f3	20 1e 21	               jsr  push
.17f6	a2 70		               ldx  #<blankmsg
.17f8	a0 19		               ldy  #>blankmsg
.17fa	20 b6 20	               jsr  putscxy
.17fd	a2 9c		               ldx  #<prompt_msg
.17ff	a0 19		               ldy  #>prompt_msg
.1801	20 b6 20	               jsr  putscxy
.1804	20 5d 21	               jsr  pop
.1807	60		               rts
.1808			reverse
.1808	20 1e 21	               jsr  push
.180b	48		               pha
.180c	ad 0d 09	               lda  mapaddr
.180f	85 fd		               sta  $fd
.1811	ad 0e 09	               lda  mapaddr+1
.1814	85 fe		               sta  $fe
.1816	68		               pla
.1817	a0 00		               ldy  #$00
.1819	b1 fd		again          lda  (zpage2),y
.181b	49 ff		               eor  #$ff
.181d	91 fd		               sta  (zpage2),y
.181f	c8		               iny
.1820	c0 08		               cpy  #$08
.1822	d0 f5		               bne  again
.1824	20 5d 21	               jsr  pop
.1827	60		               rts
.1828			scrollup
.1828	20 1e 21	               jsr  push
.182b	48		               pha
.182c	ad 0d 09	               lda  mapaddr
.182f	85 fb		               sta  $fb
.1831	ad 0e 09	               lda  mapaddr+1
.1834	85 fc		               sta  $fc
.1836	68		               pla
.1837	48		               pha
.1838	ad 0d 09	               lda  mapaddr
.183b	85 fd		               sta  $fd
.183d	ad 0e 09	               lda  mapaddr+1
.1840	85 fe		               sta  $fe
.1842	68		               pla
.1843	20 3d 22	               jsr  inczp2
.1846	a0 00		               ldy  #$00
.1848	b1 fb		               lda  (zpage1),y
.184a	8d 5f 18	               sta  tmpbyte
.184d	b1 fd		again          lda  (zpage2),y
.184f	91 fb		               sta  (zpage1),y
.1851	c8		               iny
.1852	c0 07		               cpy  #$07
.1854	d0 f7		               bne  again
.1856	ad 5f 18	               lda  tmpbyte
.1859	91 fb		               sta  (zpage1),y
.185b	20 5d 21	               jsr  pop
.185e	60		               rts
>185f	00		tmpbyte        .byte     $00
.1860			scrolldown
.1860	20 1e 21	               jsr  push
.1863	48		               pha
.1864	ad 0d 09	               lda  mapaddr
.1867	85 fb		               sta  $fb
.1869	ad 0e 09	               lda  mapaddr+1
.186c	85 fc		               sta  $fc
.186e	68		               pla
.186f	48		               pha
.1870	ad 0d 09	               lda  mapaddr
.1873	85 fd		               sta  $fd
.1875	ad 0e 09	               lda  mapaddr+1
.1878	85 fe		               sta  $fe
.187a	68		               pla
.187b	20 3d 22	               jsr  inczp2
.187e	a0 07		               ldy  #$07                ;xxxxxxxx zpage1
.1880	b1 fb		               lda  (zpage1),y          ;xxxxxxxx zpage2
.1882	8d 99 18	               sta  tmpbyte             ;xxxxxxxx
.1885	88		again          dey                      ;xxxxxxxx
.1886	b1 fb		               lda  (zpage1),y          ;xxxxxxxx
.1888	91 fd		               sta  (zpage2),y          ;xxxxxxxx
.188a	c0 00		               cpy  #$00                ;xxxxxxxx
.188c	d0 f7		               bne  again               ;xxxxxxxx
.188e	a0 00		               ldy  #$00
.1890	ad 99 18	               lda  tmpbyte
.1893	91 fb		               sta  (zpage1),y
.1895	20 5d 21	               jsr  pop
.1898	60		               rts
>1899	00		tmpbyte        .byte     $00
.189a			scrollright
.189a	20 1e 21	               jsr  push
.189d	48		               pha
.189e	ad 0d 09	               lda  mapaddr
.18a1	85 fb		               sta  $fb
.18a3	ad 0e 09	               lda  mapaddr+1
.18a6	85 fc		               sta  $fc
.18a8	68		               pla
.18a9	a0 00		               ldy  #$00
.18ab	b1 fb		again          lda  (zpage1),y
.18ad	18		               clc
.18ae	6a		               ror
.18af	90 03		               bcc  zero
.18b1	18		               clc
.18b2	69 80		one            adc  #$80
.18b4	91 fb		zero           sta  (zpage1),y
.18b6	c8		               iny
.18b7	c0 08		               cpy  #$08
.18b9	d0 f0		               bne  again
.18bb	20 5d 21	               jsr  pop
.18be	60		               rts
.18bf			scrollleft
.18bf	20 1e 21	               jsr  push
.18c2	48		               pha
.18c3	ad 0d 09	               lda  mapaddr
.18c6	85 fb		               sta  $fb
.18c8	ad 0e 09	               lda  mapaddr+1
.18cb	85 fc		               sta  $fc
.18cd	68		               pla
.18ce	a0 00		               ldy  #$00
.18d0	b1 fb		again          lda  (zpage1),y
.18d2	18		               clc
.18d3	2a		               rol
.18d4	69 00		               adc  #$00
.18d6	91 fb		               sta  (zpage1),y
.18d8	c8		               iny
.18d9	c0 08		               cpy  #$08
.18db	d0 f3		               bne  again
.18dd	20 5d 21	               jsr  pop
.18e0	60		               rts
.18e1			fillchar
.18e1	20 1e 21	               jsr  push
.18e4	a9 ff		               lda  #$ff
.18e6	20 f9 18	               jsr  allsame
.18e9	20 5d 21	               jsr  pop
.18ec	60		               rts
.18ed			clearchar
.18ed	20 1e 21	               jsr  push
.18f0	a9 00		               lda  #$00
.18f2	20 f9 18	               jsr  allsame
.18f5	20 5d 21	               jsr  pop
.18f8	60		               rts
.18f9			allsame
.18f9	48		               pha
.18fa	ad 0d 09	               lda  mapaddr
.18fd	85 fd		               sta  $fd
.18ff	ad 0e 09	               lda  mapaddr+1
.1902	85 fe		               sta  $fe
.1904	68		               pla
.1905	a0 00		               ldy  #$00
.1907	91 fd		again          sta  (zpage2),y
.1909	c8		               iny
.190a	c0 08		               cpy  #$08
.190c	d0 f9		               bne  again
.190e	60		               rts
.190f			fliphorz
.190f	20 1e 21	               jsr  push
.1912	48		               pha
.1913	ad 0d 09	               lda  mapaddr
.1916	85 fd		               sta  $fd
.1918	ad 0e 09	               lda  mapaddr+1
.191b	85 fe		               sta  $fe
.191d	68		               pla
.191e	a0 00		               ldy  #$00
.1920	b1 fd		nextbyte       lda  (zpage2),y
.1922	a2 00		               ldx  #$00
.1924	2a		rolagain       rol
.1925	6e 3b 19	               ror  tmpbyte
.1928	e8		               inx
.1929	e0 08		               cpx  #$08
.192b	30 f7		               bmi  rolagain
.192d	ad 3b 19	               lda  tmpbyte
.1930	91 fd		               sta  (zpage2),y
.1932	c8		               iny
.1933	c0 08		               cpy  #$08
.1935	30 e9		               bmi  nextbyte
.1937	20 5d 21	               jsr  pop
.193a	60		               rts
>193b	00		tmpbyte        .byte     $00
.193c			flipvert
.193c	20 1e 21	               jsr  push
.193f	48		               pha
.1940	ad 0d 09	               lda  mapaddr
.1943	85 fd		               sta  $fd
.1945	ad 0e 09	               lda  mapaddr+1
.1948	85 fe		               sta  $fe
.194a	68		               pla
.194b	a0 00		               ldy  #$00
.194d	b1 fd		tostack        lda  (zpage2),y
.194f	48		               pha
.1950	c8		               iny
.1951	c0 08		               cpy  #$08
.1953	d0 f8		               bne  tostack
.1955	a0 00		               ldy  #$00
.1957	68		fromstack      pla
.1958	91 fd		               sta  (zpage2),y
.195a	c8		               iny
.195b	c0 08		               cpy  #$08
.195d	d0 f8		               bne  fromstack
.195f	20 5d 21	               jsr  pop
.1962	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: messages_fr.asm

>1963	0a 01 05	editor_msg     .byte vrose,1,5
>1966	5b 45 44 49	               .null     "[editeur]"
>196a	54 45 55 52 5d 00
>1970	03 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>1974	20 20 20 20	               .null     "                                       "
>1978	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1988	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1998	20 20 20 00
>199c	03 00 05 92	prompt_msg     .byte     mesgcol,0,5,146
>19a0	20 55 54 49	               .null     " utilisez les clefs de fonction :"
>19a4	4c 49 53 45 5a 20 4c 45 53 20 43 4c 45 46 53 20
>19b4	44 45 20 46 4f 4e 43 54 49 4f 4e 20 3a 00
.19c2			f1a_msg
>19c2	03 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>19c6	20 4d 4f 44	               .null     " mode edit: chr$(   )",146
>19ca	45 20 45 44 49 54 3a 20 43 48 52 24 28 20 20 20
>19da	29 92 00
.19dd			f2a_msg
>19dd	03 00 05	copy_msg       .byte     mesgcol,0,5
>19e0	20 45 4e 54	               .null     " entez le character a copier:"
>19e4	45 5a 20 4c 45 20 43 48 41 52 41 43 54 45 52 20
>19f4	41 20 43 4f 50 49 45 52 3a 00
.19fe			f3a_msg
>19fe	03 00 05 92	save_msg       .byte     mesgcol,0,5,146
>1a02	20 53 41 55	               .null     " sauvegarder sur quel lecteur? (1/8/9): "
>1a06	56 45 47 41 52 44 45 52 20 53 55 52 20 51 55 45
>1a16	4c 20 4c 45 43 54 45 55 52 3f 20 28 31 2f 38 2f
>1a26	39 29 3a 20 00
.1a2b			f4a_msg
>1a2b	03 00 05 92	load_msg       .byte     mesgcol,0,5,146
>1a2f	20 43 48 41	               .null     " charger de quel lecteur? (1,8,9): "
>1a33	52 47 45 52 20 44 45 20 51 55 45 4c 20 4c 45 43
>1a43	54 45 55 52 3f 20 28 31 2c 38 2c 39 29 3a 20 00
.1a53			f5a_msg
>1a53	03 00 05	clear_msg      .byte     mesgcol,0,5
>1a56	20 45 46 46	               .null     " effacer char: chr$(   )"
>1a5a	41 43 45 52 20 43 48 41 52 3a 20 43 48 52 24 28
>1a6a	20 20 20 29 00
.1a6f			f6a_msg
>1a6f	03 00 05	fill_msg       .byte     mesgcol,0,5
>1a72	20 52 45 4d	               .null     " remplir char:  chr$(   )"
>1a76	50 4c 49 52 20 43 48 41 52 3a 20 20 43 48 52 24
>1a86	28 20 20 20 29 00
.1a8c			f7a_msg
>1a8c	03 00 05	work_msg       .byte     mesgcol,0,5
>1a8f	20 52 45 43	               .null     " recuperer les caracteres."
>1a93	55 50 45 52 45 52 20 4c 45 53 20 43 41 52 41 43
>1aa3	54 45 52 45 53 2e 00
.1aaa			f1b_msg
>1aaa	03 00 05	invr_msg       .byte     mesgcol,0,5
>1aad	20 42 41 53	               .null     " basculer verticalement:"
>1ab1	43 55 4c 45 52 20 56 45 52 54 49 43 41 4c 45 4d
>1ac1	45 4e 54 3a 00
.1ac6			f2b_msg
>1ac6	03 00 05	flip_msg       .byte     mesgcol,0,5
>1ac9	20 42 41 53	               .null     " basculer horizontalement:"
>1acd	43 55 4c 45 52 20 48 4f 52 49 5a 4f 4e 54 41 4c
>1add	45 4d 45 4e 54 3a 00
.1ae4			f3b_msg
>1ae4	03 00 05	scrollr_msg    .byte     mesgcol,0,5
>1ae7	20 44 45 46	               .null     " defiler vers la droite:"
>1aeb	49 4c 45 52 20 56 45 52 53 20 4c 41 20 44 52 4f
>1afb	49 54 45 3a 00
.1b00			f4b_msg
>1b00	03 00 05	scrolll_msg    .byte     mesgcol,0,5
>1b03	20 44 45 46	               .null     " defiler vers la gauche:"
>1b07	49 4c 45 52 20 56 45 52 53 20 4c 41 20 47 41 55
>1b17	43 48 45 3a 00
.1b1c			f5b_msg
>1b1c	03 00 05	scrollu_msg    .byte     mesgcol,0,5
>1b1f	20 44 45 46	               .null     " defiler vers le haut:"
>1b23	49 4c 45 52 20 56 45 52 53 20 4c 45 20 48 41 55
>1b33	54 3a 00
.1b36			f6b_msg
>1b36	03 00 05	scrolld_msg    .byte     mesgcol,0,5
>1b39	20 44 45 46	               .null     " defiler vers le bas:"
>1b3d	49 4c 45 52 20 56 45 52 53 20 4c 45 20 42 41 53
>1b4d	3a 00
.1b4f			f7b_msg
>1b4f	03 00 05	rvrs_msg       .byte     mesgcol,0,5
>1b52	20 52 45 56	               .null     " reverse character:"
>1b56	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
>1b66	03 00 05	menua_msg      .byte     mesgcol,0,5
>1b69	20 56 4f 55	               .null     " vous etes dirige vers le menu 1."
>1b6d	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1b7d	52 53 20 4c 45 20 4d 45 4e 55 20 31 2e 00
>1b8b	03 00 05	menub_msg      .byte     mesgcol,0,5
>1b8e	20 56 4f 55	               .null     " vous etes dirige vers le menu 2."
>1b92	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1ba2	52 53 20 4c 45 20 4d 45 4e 55 20 32 2e 00
>1bb0	07 00 05	copychar_msg   .byte     vjaune,0,5
>1bb3	20 45 4e 54	               .null     " entrez le caractera a copier (?).",157,157,157
>1bb7	52 45 5a 20 4c 45 20 43 41 52 41 43 54 45 52 41
>1bc7	20 41 20 43 4f 50 49 45 52 20 28 3f 29 2e 9d 9d
>1bd7	9d 00
>1bd9	07 00 05	fname_msg      .byte     vjaune,0,5
>1bdc	20 4e 4f 4d	               .null     " nom du fichier (6 lettres): ",$a4,$a4,$a4,$a4,$a4,$a4,".chr",157,157,157,157,157,157,157,157,157,157
>1be0	20 44 55 20 46 49 43 48 49 45 52 20 28 36 20 4c
>1bf0	45 54 54 52 45 53 29 3a 20 a4 a4 a4 a4 a4 a4 2e
>1c00	43 48 52 9d 9d 9d 9d 9d 9d 9d 9d 9d 9d 00
>1c0e	0e 15 18 12	quit_msg       .byte     vblue1,21,24,18
>1c12	43 54 52 4c	               .text     "ctrl-x",146
>1c16	2d 58 92
>1c19	2d 51 55 49	               .null     "-quitter."
>1c1d	54 54 45 52 2e 00
.1c23			menu_msg
>1c23	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>1c27	43 54 52 4c	               .text     "ctrl-x",146
>1c2b	2d 58 92
>1c2e	20 41 55 20	               .null     " au menu."
>1c32	4d 45 4e 55 2e 00
>1c38	07 04 06 12	whoami0        .byte     whoamicol,4,6,18
>1c3c	20 20 20 20	               .null     "                               ",146
>1c40	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1c50	20 20 20 20 20 20 20 20 20 20 20 92 00
>1c5d	07 04 07 12	whoami1        .byte     whoamicol,4,7,18
>1c61	20 20 20 20	               .null     "       ",146," c h a r e d i t ",18,"       ",146
>1c65	20 20 20 92 20 43 20 48 20 41 20 52 20 45 20 44
>1c75	20 49 20 54 20 12 20 20 20 20 20 20 20 92 00
>1c84	07 04 08 12	whoami2        .byte     whoamicol,4,8,18
>1c88	20 20 20 20	               .null     "                               ",146
>1c8c	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1c9c	20 20 20 20 20 20 20 20 20 20 20 92 00
>1ca9	07 04 09 12	whoami3        .byte     whoamicol,4,9,18
>1cad	20 20 20 20	               .null     "    inspire de john heilborn   ",146
>1cb1	49 4e 53 50 49 52 45 20 44 45 20 4a 4f 48 4e 20
>1cc1	48 45 49 4c 42 4f 52 4e 20 20 20 92 00
>1cce	07 04 0a 12	whoami4        .byte     whoamicol,4,10,18
>1cd2	20 20 20 20	               .null     "      isbn: 0-942386-29-9      ",146
>1cd6	20 20 49 53 42 4e 3a 20 30 2d 39 34 32 33 38 36
>1ce6	2d 32 39 2d 39 20 20 20 20 20 20 92 00
>1cf3	07 04 0b 12	whoami5        .byte     whoamicol,4,11,18
>1cf7	20 20 20 20	               .null     "                               ",146
>1cfb	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1d0b	20 20 20 20 20 20 20 20 20 20 20 92 00
>1d18	07 04 0c 12	whoami6        .byte     whoamicol,4,12,18
>1d1c	20 20 20 20	               .null     "     code en assembleur par    ",146
>1d20	20 43 4f 44 45 20 45 4e 20 41 53 53 45 4d 42 4c
>1d30	45 55 52 20 50 41 52 20 20 20 20 92 00
>1d3d	07 04 0d 12	whoami7        .byte     whoamicol,4,13,18
>1d41	20 44 41 4e	               .null     " daniel lafrance quebec/canada ",146
>1d45	49 45 4c 20 4c 41 46 52 41 4e 43 45 20 51 55 45
>1d55	42 45 43 2f 43 41 4e 41 44 41 20 92 00
>1d62	07 04 0e 12	whoami8        .byte     whoamicol,4,14,18
>1d66	20 20 20 20	               .null     "    version:",version,"    ",146
>1d6a	56 45 52 53 49 4f 4e 3a 32 30 32 33 31 31 31 36
>1d7a	2d 31 30 30 34 30 30 20 20 20 20 92 00
>1d87	07 04 0f 12	whoami9        .byte     whoamicol,4,15,18
>1d8b	20 20 20 20	               .null     "                               ",146
>1d8f	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1d9f	20 20 20 20 20 20 20 20 20 20 20 92 00
>1dac	03 06 10 14	bye_msg        .byte     vcyan,6,16,20
>1db0	20 20 20 20	               .null     "      bonjour et merci      ",146
>1db4	20 20 42 4f 4e 4a 4f 55 52 20 45 54 20 4d 45 52
>1dc4	43 49 20 20 20 20 20 20 92 00
>1dce	0d 05 18 12	any_msg        .byte     vvert1,5,24,18
>1dd2	20 41 50 50	               .null     " appuyez une cle pour basic ",146
>1dd6	55 59 45 5a 20 55 4e 45 20 43 4c 45 20 50 4f 55
>1de6	52 20 42 41 53 49 43 20 92 00
>1df0	03 12 07	titremenu1     .byte     menu1col1,fkeyleft,f1top-2       ;133
>1df3	12 20 4a 45	               .null     18," jeu de fonctions #1 ",146
>1df7	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>1e07	31 20 92 00
>1e0b	0f 12 07	titremenu2     .byte     menu2col1,fkeyleft,f1top-2       ;133
>1e0e	12 20 4a 45	               .null     18," jeu de fonctions #2 ",146
>1e12	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>1e22	32 20 92 00
>1e26	03 12 09	f1abutton      .byte     menu1col1,fkeyleft,f1top       ;133
>1e29	45 44 49 54	               .text     "editer carac..."
>1e2d	45 52 20 43 41 52 41 43 2e 2e 2e
>1e38	12		               .byte     18             ; position 15
>1e39	a9 20 46 31	               .null     $a9," f1 ",223,146
>1e3d	20 df 92 00
>1e41	0e 12 0a	f2abutton      .byte     menu1col2,fkeyleft,f1top+1     ;138
>1e44	43 4f 50 49	               .text     "copier un carac"
>1e48	45 52 20 55 4e 20 43 41 52 41 43
>1e53	12		               .byte     18   ; position 15
>1e54	20 20 46 32	               .null     "  f2  ",146
>1e58	20 20 92 00
>1e5c	03 12 0c	f3abutton      .byte     menu1col1,fkeyleft,f1top+3     ;137
>1e5f	53 41 56 45	               .text     "savegarder sur."
>1e63	47 41 52 44 45 52 20 53 55 52 2e
>1e6e	12		               .byte     18            ; position 15
>1e6f	a9 20 46 33	               .null     $a9," f3 ",223,146
>1e73	20 df 92 00
>1e77	0e 12 0d	f4abutton      .byte     menu1col2,fkeyleft,f1top+4     ;134
>1e7a	43 48 41 52	               .text     "charger de....."
>1e7e	47 45 52 20 44 45 2e 2e 2e 2e 2e
>1e89	12		               .byte     18             ; position 15
>1e8a	20 20 46 34	               .null     "  f4  ",146
>1e8e	20 20 92 00
>1e92	03 12 0f	f5abutton      .byte     menu1col1,fkeyleft,f1top+6     ;135
>1e95	4d 45 54 54	               .text     "mettre tout a 0"
>1e99	52 45 20 54 4f 55 54 20 41 20 30
>1ea4	12		               .byte     18             ; position 15
>1ea5	a9 20 46 35	               .null     $a9," f5 ",223,146
>1ea9	20 df 92 00
>1ead	0e 12 10	f6abutton      .byte     menu1col2,fkeyleft,f1top+7    ;139
>1eb0	4d 45 54 54	               .text     "mettre tout a 1"
>1eb4	52 45 20 54 4f 55 54 20 41 20 31
>1ebf	12		               .byte     18             ; position 15
>1ec0	20 20 46 36	               .null     "  f6  ",146
>1ec4	20 20 92 00
>1ec8	03 12 12	f7abutton      .byte     menu1col1,fkeyleft,f1top+9    ;136
>1ecb	52 45 43 55	               .text     "recuperer rom.."
>1ecf	50 45 52 45 52 20 52 4f 4d 2e 2e
>1eda	12		               .byte     18             ; position 15
>1edb	a9 20 46 37	               .null     $a9," f7 ",223,146
>1edf	20 df 92 00
>1ee3	0e 12 13	f8abutton      .byte     menu1col2,fkeyleft,f1top+10
>1ee6	41 4c 4c 45	               .text     "aller au menu2."
>1eea	52 20 41 55 20 4d 45 4e 55 32 2e
>1ef5	12		               .byte     18             ; position 15
>1ef6	20 20 46 38	               .null     "  f8  ", 146
>1efa	20 20 92 00
>1efe	0f 12 09	f1bbutton      .byte     menu2col1,fkeyleft,f1top
>1f01	42 41 53 43	               .text     "basculer vert.."
>1f05	55 4c 45 52 20 56 45 52 54 2e 2e
>1f10	12		               .byte     18             ; position 15
>1f11	a9 20 46 31	               .null     $a9," f1 ",223,146
>1f15	20 df 92 00
>1f19	0c 12 0a	f2bbutton      .byte     menu2col2,fkeyleft,f1top+1
>1f1c	42 41 53 43	               .text     "basculer horz.."
>1f20	55 4c 45 52 20 48 4f 52 5a 2e 2e
>1f2b	12		               .byte     18             ; position 15
>1f2c	20 20 46 32	               .null     "  f2  ",146
>1f30	20 20 92 00
>1f34	0f 12 0c	f3bbutton      .byte     menu2col1,fkeyleft,f1top+3
>1f37	44 45 46 49	               .text     "defiler droite."
>1f3b	4c 45 52 20 44 52 4f 49 54 45 2e
>1f46	12		               .byte     18             ; position 15
>1f47	a9 20 46 33	               .null     $a9," f3 ",223,146
>1f4b	20 df 92 00
>1f4f	0c 12 0d	f4bbutton      .byte     menu2col2,fkeyleft,f1top+4
>1f52	44 45 46 49	               .text     "defiler gauche."
>1f56	4c 45 52 20 47 41 55 43 48 45 2e
>1f61	12		               .byte     18             ; position 15
>1f62	20 20 46 34	               .null     "  f4  ",146
>1f66	20 20 92 00
>1f6a	0f 12 0f	f5bbutton      .byte     menu2col1,fkeyleft,f1top+6
>1f6d	44 45 46 49	               .text     "defiler haut..."
>1f71	4c 45 52 20 48 41 55 54 2e 2e 2e
>1f7c	12		               .byte     18             ; position 15
>1f7d	a9 20 46 35	               .null     $a9," f5 ",223,146
>1f81	20 df 92 00
>1f85	0c 12 10	f6bbutton      .byte     menu2col2,fkeyleft,f1top+7
>1f88	44 45 46 49	               .text     "defiler bas...."
>1f8c	4c 45 52 20 42 41 53 2e 2e 2e 2e
>1f97	12		               .byte     18             ; position 15
>1f98	20 20 46 36	               .null     "  f6  ",146
>1f9c	20 20 92 00
>1fa0	0f 12 12	f7bbutton      .byte     menu2col1,fkeyleft,f1top+9
>1fa3	49 4e 56 45	               .text     "inverser bits.."
>1fa7	52 53 45 52 20 42 49 54 53 2e 2e
>1fb2	12		               .byte     18             ; position 15
>1fb3	a9 20 46 37	               .null     $a9," f7 ",223,146
>1fb7	20 df 92 00
>1fbb	0c 12 13	f8bbutton      .byte     menu2col2,fkeyleft,f1top+10
>1fbe	41 4c 4c 45	               .text     "aller au menu1."
>1fc2	52 20 41 55 20 4d 45 4e 55 31 2e
>1fcd	12		               .byte     18             ; position 15
>1fce	20 20 46 38	               .null     "  f8  ", 146
>1fd2	20 20 92 00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.1fd6			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.1fd6			screendis
.1fd6	08		               php
.1fd7	48		               pha
.1fd8	ad 11 d0	               lda  $d011
.1fdb	29 ef		               and  #%11101111
.1fdd	8d 11 d0	               sta  $d011
.1fe0	68		               pla
.1fe1	28		               plp
.1fe2	60		               rts
.1fe3			screenena
.1fe3	08		               php
.1fe4	48		               pha
.1fe5	ad 11 d0	               lda  $d011
.1fe8	09 10		               ora  #%00010000
.1fea	8d 11 d0	               sta  $d011
.1fed	68		               pla
.1fee	28		               plp
.1fef	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.1ff0			scrmaninit
.1ff0	20 1e 21	               jsr  push
.1ff3	a9 06		               lda  #vbleu
.1ff5	8d 21 d0	               sta  vicbackcol
.1ff8	a9 05		               lda  #vvert
.1ffa	8d 20 d0	               sta  vicbordcol
.1ffd	a9 01		               lda  #vblanc
.1fff	8d 86 02	               sta  bascol
.2002	ad 00 04	               lda  scrnram
.2005	8d 00 04	               sta  scrnram
.2008	20 10 20	               jsr  cls
.200b	20 5d 21	               jsr  pop
.200e	60		               rts
>200f	8e		characterset   .byte b_uppercase
.2010			cls
.2010	08		               php
.2011	48		               pha
.2012	a9 93		               lda  #$93
.2014	20 27 20	               jsr  putch
.2017	68		               pla
.2018	28		               plp
.2019	60		               rts
.201a			putnch
.201a	08		               php
.201b	e0 00		               cpx  #$00
.201d	f0 06		               beq  out
.201f	20 d2 ff	again          jsr  $ffd2
.2022	ca		               dex
.2023	d0 fa		               bne  again
.2025	28		out            plp
.2026	60		               rts
.2027			putch
.2027	08		               php
.2028	20 d2 ff	               jsr  $ffd2
.202b	28		               plp
.202c	60		               rts
.202d			puts
.202d	20 1e 21	               jsr  push
.2030	86 fb		               stx  zpage1
.2032	84 fc		               sty  zpage1+1
.2034	a0 00		               ldy  #0
.2036	b1 fb		next           lda  (zpage1),y
.2038	f0 09		               beq  exit
.203a	20 27 20	               jsr  putch
.203d	20 25 22	               jsr  inczp1
.2040	4c 36 20	               jmp  next
.2043	20 5d 21	exit           jsr  pop
.2046	60		               rts
.2047			gotoxy
.2047	08		               php
.2048	18		               clc
.2049	8a		               txa
.204a	48		               pha
.204b	98		               tya
.204c	aa		               tax
.204d	68		               pla
.204e	a8		               tay
.204f	20 f0 ff	               jsr  kplot
.2052	28		               plp
.2053	60		               rts
.2054			cursor
=$0286			bascol    =    $0286
.2054	08		               php
.2055	48		               pha
.2056	90 12		               bcc  restore
.2058	20 f0 ff	               jsr  kplot
.205b	8c 7c 20	               sty  cx
.205e	8e 7d 20	               stx  cy
.2061	ad 86 02	               lda  bascol
.2064	8d 7e 20	               sta  bcol
.2067	4c 79 20	               jmp  out
.206a	ae 7d 20	restore        ldx  cy
.206d	ac 7c 20	               ldy  cx
.2070	20 f0 ff	               jsr  kplot
.2073	ad 7e 20	               lda  bcol
.2076	8d 86 02	               sta  bascol
.2079	68		out            pla
.207a	28		               plp
.207b	60		               rts
>207c	00		cx   .byte     $00
>207d	00		cy   .byte     $00
>207e	00		bcol .byte     $00
.207f			cursave
.207f	08		               php
.2080	38		               sec
.2081	20 54 20	               jsr  cursor
.2084	28		               plp
.2085	60		               rts
.2086			curput
.2086	08		               php
.2087	18		               clc
.2088	20 54 20	               jsr  cursor
.208b	28		               plp
.208c	60		               rts
.208d			putsxy
.208d	20 1e 21	               jsr  push
.2090	86 fb		               stx  zpage1
.2092	84 fc		               sty  zpage1+1
.2094	a0 00		               ldy  #$00
.2096	b1 fb		               lda  (zpage1),y
.2098	aa		               tax
.2099	20 25 22	               jsr  inczp1
.209c	b1 fb		               lda  (zpage1),y
.209e	a8		               tay
.209f	20 47 20	               jsr  gotoxy
.20a2	20 25 22	               jsr  inczp1
.20a5	a6 fb		               ldx  zpage1
.20a7	a4 fc		               ldy  zpage1+1
.20a9	20 2d 20	               jsr  puts
.20ac	20 5d 21	               jsr  pop
.20af	60		               rts
>20b0	00 00		straddr   .word     $00
>20b2	00		px        .byte     $00
>20b3	00		py        .byte     $00
>20b4	00 00		zp1       .word     $00
.20b6			putscxy
.20b6	20 1e 21	               jsr  push
.20b9	84 fc		               sty  zpage1+1
.20bb	86 fb		               stx  zpage1
.20bd	ad 86 02	               lda  bascol
.20c0	8d e0 20	               sta  bc
.20c3	a0 00		               ldy #$00
.20c5	b1 fb		               lda  (zpage1),y
.20c7	8d 86 02	               sta  bascol
.20ca	20 25 22	               jsr  inczp1
.20cd	a6 fb		               ldx  zpage1
.20cf	a4 fc		               ldy  zpage1+1
.20d1	20 8d 20	               jsr  putsxy
.20d4	ad e0 20	               lda  bc
.20d7	8d 86 02	               sta  bascol
.20da	20 5d 21	               jsr  pop
.20dd	60		               rts
>20de	00 00		straddr  .word      $00
>20e0	00		bc       .byte      $00
>20e1	00 00		zp1      .word      $00
.20e3			putrahex
.20e3	08		               php
.20e4	48		               pha
.20e5	20 3b 23	               jsr  a2hex
.20e8	a9 da		               lda  #<a2hexstr
.20ea	a0 22		               ldy  #>a2hexstr
.20ec	20 2d 20	               jsr  puts
.20ef	68		               pla
.20f0	28		               plp
.20f1	60		               rts
.20f2			kputrahexxy
.20f2			bputrahexxy
.20f2			putrahexxy
.20f2	08		               php
.20f3	20 3b 23	               jsr  a2hex
.20f6	a9 d7		               lda  #<a2hexpos
.20f8	a0 22		               ldy  #>a2hexpos
.20fa	20 8d 20	               jsr  putsxy
.20fd	68		               pla
.20fe	28		               plp
.20ff	60		               rts
.2100			putrahexcxy
.2100	08		               php
.2101	20 3b 23	               jsr  a2hex
.2104	a9 d7		               lda  #<a2hexpos
.2106	a0 22		               ldy  #>a2hexpos
.2108	20 b6 20	               jsr  putscxy
.210b	68		               pla
.210c	28		               plp
.210d	60		               rts
.210e			setinverse
.210e	48		               pha
.210f	a9 12		               lda  #$12
.2111	20 d2 ff	               jsr  $ffd2
.2114	68		               pla
.2115	60		               rts
.2116			clrinverse
.2116	48		               pha
.2117	a9 92		               lda  #$92
.2119	20 d2 ff	               jsr  $ffd2
.211c	68		               pla
.211d	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.211e			push
.211e	08		          php            ; stack : flg, pcl, pch
.211f	78		          sei
.2120	8d 5a 21	          sta  ra        ; save a
.2123	68		          pla            ; stack : pcl, pch
.2124	8d 59 21	          sta  rp        ; save rp
.2127	68		          pla            ; stack : pch
.2128	8d 5b 21	          sta  pc        ; save pcl
.212b	68		          pla            ; stack : -
.212c	8d 5c 21	          sta  pc+1      ; save pch
.212f	a5 fb		          lda  zpage1    ; get zpage1 low byte
.2131	48		          pha            ; stack : zp1l
.2132	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.2134	48		          pha            ; stack : zp1h, zp1l
.2135	a5 fd		          lda  zpage2    ; get zpage2 low byte
.2137	48		          pha            ; stack : zp2l, zp1h, zp1l
.2138	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.213a	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.213b	ad 59 21	          lda  rp        ; get rp
.213e	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.213f	ad 5a 21	          lda  ra        ; get a
.2142	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.2143	8a		          txa            ; get x
.2144	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.2145	98		          tya            ; get y
.2146	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2147	ad 5c 21	          lda  pc+1      ; get pch
.214a	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.214b	ad 5b 21	          lda  pc        ; get pcl
.214e	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.214f	ad 59 21	          lda  rp        ; get rp
.2152	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2153	ad 5a 21	          lda  ra        ; get a
.2156	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2157	58		          cli
.2158	60		          rts
>2159	00		rp        .byte     0
>215a	00		ra        .byte     0
>215b	00 00		pc        .word     0
.215d			pull
.215d			pop
.215d	78		          sei
.215e	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.215f	8d 92 21	          sta  pc        ; save pcl
.2162	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2163	8d 93 21	          sta  pc+1      ; save pch
.2166	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.2167	a8		          tay            ; set y
.2168	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.2169	aa		          tax            ; set x
.216a	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.216b	8d 91 21	          sta  ra        ; save a
.216e	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.216f	8d 90 21	          sta  rp        ; save rp
.2172	68		          pla            ; stack : zp2l, zp1h, zp1l
.2173	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.2175	68		          pla            ; stack : zp1h, zp1l
.2176	85 fd		          sta  zpage2    ; get zpage2 High byte
.2178	68		          pla            ; stack : zp1l
.2179	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.217b	68		          pla            ; stack :
.217c	85 fb		          sta  zpage1    ; get zpage1 High byte
.217e	ad 93 21	          lda  pc+1      ; get pch
.2181	48		          pha            ; stack : pch
.2182	ad 92 21	          lda  pc
.2185	48		          pha            ; stack : pcl, pch
.2186	ad 90 21	          lda  rp        ; get rp
.2189	48		          pha            ; stack : rp, pcl, pch
.218a	ad 91 21	          lda  ra        ; set ra
.218d	58		          cli
.218e	28		          plp            ; stack : pcl, pch
.218f	60		          rts
>2190	00		rp        .byte     0
>2191	00		ra        .byte     0
>2192	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.2194			blkfill
.2194	20 1e 21	bf0            jsr  push
.2197	20 55 22	               jsr  savezp1
.219a	84 fc		               sty  zpage1+1
.219c	a0 00		               ldy  #$00
.219e	84 fb		               sty  zpage1
.21a0	91 fb		bf1            sta  (zpage1),y
.21a2	c8		               iny
.21a3	d0 fb		               bne  bf1
.21a5	20 64 22	               jsr  restzp1
.21a8	20 5d 21	               jsr  pop
.21ab	60		               rts
.21ac			memfill
.21ac	20 1e 21	               jsr  push
.21af	20 94 21	mf1            jsr  blkfill
.21b2	c8		               iny
.21b3	ca		               dex
.21b4	d0 f9		               bne  mf1
.21b6	20 5d 21	               jsr  pop
.21b9	60		               rts
.21ba			memmove
.21ba	20 1e 21	               jsr  push
.21bd	ba		               tsx            ; On se crée un pointeur ...
.21be	8a		               txa
.21bf	18		               clc
.21c0	69 0b		               adc  #11
.21c2	a8		               tay
.21c3	a2 06		               ldx  #$06
.21c5	b9 00 01	nextbyte       lda  $0100,y
.21c8	99 14 22	               sta  words,y
.21cb	c8		               iny
.21cc	ca		               dex
.21cd	d0 f6		               bne  nextbyte
.21cf	ad 14 22	               lda  s
.21d2	8d eb 21	               sta  source+1
.21d5	ad 15 22	               lda  s+1
.21d8	8d ec 21	               sta  source+2
.21db	ad 16 22	               lda  d
.21de	8d e8 21	               sta  destin+1
.21e1	ad 17 22	               lda  d+1
.21e4	8d e9 21	               sta  destin+2
.21e7	ad ff ff	destin         lda  $ffff
.21ea	8d ff ff	source         sta  $ffff
.21ed	ee e8 21	               inc  destin+1
.21f0	d0 03		               bne  src
.21f2	ee e9 21	               inc  destin+2
.21f5	ee eb 21	src            inc  source+1
.21f8	d0 03		               bne  cnt
.21fa	ee ec 21	               inc  source+2
.21fd	ad 18 22	cnt            lda  compte
.2200	d0 08		               bne  decit
.2202	ad 19 22	               lda  compte+1
.2205	f0 09		               beq  fini
.2207	ce 19 22	               dec  compte+1
.220a	ce 18 22	decit          dec  compte
.220d	4c e7 21	               jmp  destin
.2210	20 5d 21	fini           jsr  pop
.2213	60		               rts
.2214			words
>2214	00 00		s         .word     $0000
>2216	00 00		d         .word     $0000
>2218	00 00		compte    .word     $0000
.221a			decword
.221a	20 1e 21	               jsr  push
.221d	86 fd		               stx  zpage2
.221f	84 fe		               sty  zpage2+1
.2221	20 5d 21	               jsr  pop
.2224	60		               rts
.2225			inczp1
.2225	08		               php
.2226	48		               pha
.2227	e6 fb		               inc  zpage1
.2229	a5 fb		               lda  zpage1
.222b	d0 02		               bne  nopage
.222d	e6 fc		               inc  zpage1+1
.222f	68		nopage         pla
.2230	28		               plp
.2231	60		               rts
.2232			deczp1
.2232	08		                php
.2233	48		                pha
.2234	c6 fb		                dec  zpage1
.2236	d0 02		                bne  nopage
.2238	c6 fc		                dec  zpage1+1
.223a	68		nopage          pla
.223b	28		                plp
.223c	60		                rts
.223d			inczp2
.223d	08		               php
.223e	48		               pha
.223f	e6 fd		               inc  zpage2
.2241	a5 fd		               lda  zpage2
.2243	d0 02		               bne  nopage
.2245	e6 fe		               inc  zpage2+1
.2247	68		nopage         pla
.2248	28		               plp
.2249	60		               rts
.224a			deczp2
.224a	08		               php
.224b	48		               pha
.224c	a5 fd		               lda  zpage2
.224e	d0 02		               bne  nopage
.2250	c6 fe		               dec  zpage2+1
.2252	68		nopage         pla
.2253	28		               plp
.2254	60		               rts
.2255			savezp1
.2255	08		               php
.2256	48		               pha
.2257	a5 fb		               lda  zpage1
.2259	8d d1 22	               sta  zp1
.225c	a5 fc		               lda  zpage1+1
.225e	8d d2 22	               sta  zp1+1
.2261	68		               pla
.2262	28		               plp
.2263	60		               rts
.2264			restzp1
.2264	08		               php
.2265	48		               pha
.2266	ad d1 22	               lda zp1
.2269	85 fb		               sta zpage1
.226b	ad d2 22	               lda zp1+1
.226e	85 fc		               sta zpage1+1
.2270	68		               pla
.2271	28		               plp
.2272	60		               rts
.2273			savezp2
.2273	08		         php
.2274	48		         pha
.2275	a5 fd		         lda zpage2
.2277	8d d3 22	         sta zp2
.227a	a5 fe		         lda zpage2+1
.227c	8d d4 22	         sta zp2+1
.227f	68		         pla
.2280	28		         plp
.2281	60		         rts
.2282			restzp2
.2282	08		                php
.2283	48		                pha
.2284	ad d3 22	                lda  zp2
.2287	85 fd		                sta  zpage2
.2289	ad d4 22	                lda  zp2+1
.228c	85 fe		                sta  zpage2+1
.228e	68		                pla
.228f	28		                plp
.2290	60		                rts
.2291			xy2addr
.2291	08		                php
.2292	48		                pha
.2293	8a		                txa
.2294	48		                pha
.2295	98		                tya
.2296	48		                pha
.2297	ad cc 22	                lda     addr1+1
.229a	8d ce 22	                sta     addr2+1
.229d	ad cb 22	                lda     addr1
.22a0	8d cd 22	                sta     addr2
.22a3	c0 00		                cpy     #$00
.22a5	f0 0f		                beq     addx
.22a7	18		moreline        clc
.22a8	6d ca 22	                adc     ymult
.22ab	90 03		                bcc     norepy
.22ad	ee ce 22	                inc     addr2+1
.22b0	8d cd 22	norepy          sta     addr2
.22b3	88		                dey
.22b4	d0 f1		                bne     moreline
.22b6	8a		addx            txa
.22b7	18		                clc
.22b8	6d cd 22	                adc     addr2
.22bb	90 03		                bcc     thatsit
.22bd	ee ce 22	                inc     addr2+1
.22c0	8d cd 22	thatsit         sta     addr2
.22c3	68		                pla
.22c4	a8		                tay
.22c5	68		                pla
.22c6	aa		                tax
.22c7	68		                pla
.22c8	28		                plp
.22c9	60		                rts
>22ca	28		ymult          .byte     40
>22cb	00 00		addr1          .word     $0000
>22cd	00 00		addr2          .word     $0000
>22cf	00 00		bytecnt        .word     $0000
>22d1	00 00		zp1        .word   $0000
>22d3	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>22d5	01		a2hexcol       .byte     1              ; pour aputscxy
>22d6	00		a2hexbkcol     .byte     %00000000
.22d7			a2hexpos
>22d7	00		a2hexpx        .byte     0              ; pour aputsxy
>22d8	00		a2hexpy        .byte     0
>22d9	24		a2hexprefix    .byte     "$"            ; pour aputs
>22da	00 00		a2hexstr       .word     $00
>22dc	00 00		               .word     $00
>22de	00		               .byte     0              ; 0 end string
>22df	30 30 30 30	abin           .null     "00000000"
>22e3	30 30 30 30 00
>22e8	20 20 20 00	adec           .null     "   "
.22ec			putahexfmtxy
.22ec	20 1e 21	               jsr  push
.22ef	20 3b 23	               jsr  a2hex
.22f2	ae d7 22	               ldx  a2hexpx
.22f5	ac d8 22	               ldy  a2hexpy
.22f8	20 47 20	               jsr  gotoxy
.22fb	a2 d9		               ldx  #<a2hexprefix
.22fd	a0 22		               ldy  #>a2hexprefix
.22ff	20 2d 20	               jsr  puts
.2302	20 5d 21	               jsr  pop
.2305	60		               rts
.2306			putahexfmt
.2306	20 1e 21	               jsr  push
.2309	20 3b 23	               jsr  a2hex
.230c	a2 d9		               ldx  #<a2hexprefix
.230e	a0 22		               ldy  #>a2hexprefix
.2310	20 2d 20	               jsr  puts
.2313	20 5d 21	               jsr  pop
.2316	60		               rts
.2317			putahex
.2317	20 1e 21	               jsr  push
.231a	20 3b 23	               jsr  a2hex
.231d	a2 da		               ldx  #<a2hexstr
.231f	a0 22		               ldy  #>a2hexstr
.2321	20 2d 20	               jsr  puts
.2324	20 5d 21	               jsr  pop
.2327	60		               rts
.2328			nib2hex
.2328	08		               php
.2329	29 0f		               and  #$0f
.232b	f8		               sed
.232c	18		               clc
.232d	69 90		               adc  #$90
.232f	69 40		               adc  #$40
.2331	d8		               cld
.2332	28		               plp
.2333	60		               rts
.2334			lsra4bits
.2334	08		               php
.2335	4a		               lsr
.2336	4a		               lsr
.2337	4a		               lsr
.2338	4a		               lsr
.2339	28		               plp
.233a	60		               rts
.233b			a2hex
.233b	08		               php
.233c	48		               pha
.233d	48		               pha
.233e	20 34 23	               jsr  lsra4bits
.2341	20 28 23	               jsr  nib2hex
.2344	8d da 22	               sta  a2hexstr
.2347	68		               pla
.2348	20 28 23	               jsr  nib2hex
.234b	8d db 22	               sta  a2hexstr+1
.234e	a9 00		               lda  #$00                ; set end of string
.2350	8d dc 22	               sta  a2hexstr+2
.2353	68		               pla
.2354	28		               plp
.2355	60		               rts
.2356			xy2hex
.2356	20 1e 21	               jsr  push
.2359	20 3b 23	               jsr  a2hex
.235c	8a		               txa
.235d	48		               pha
.235e	20 34 23	               jsr  lsra4bits
.2361	20 28 23	               jsr  nib2hex
.2364	8d da 22	               sta  a2hexstr
.2367	68		               pla
.2368	20 28 23	               jsr  nib2hex
.236b	8d db 22	               sta  a2hexstr+1
.236e	98		               tya
.236f	48		               pha
.2370	20 34 23	               jsr  lsra4bits
.2373	20 28 23	               jsr  nib2hex
.2376	8d dc 22	               sta  a2hexstr+2
.2379	68		               pla
.237a	20 28 23	               jsr  nib2hex
.237d	8d dd 22	               sta  a2hexstr+3
.2380	a9 00		               lda  #$00                ; 0 ended string
.2382	8d de 22	               sta  a2hexstr+4
.2385	20 5d 21	               jsr  pop
.2388			atobin
.2388	20 1e 21	               jsr  push
.238b	a2 08		               ldx  #8
.238d	a0 00		               ldy  #0
.238f	18		               clc
.2390	2a		nextbit        rol
.2391	48		               pha
.2392	69 00		               adc  #$00
.2394	29 01		               and  #$01
.2396	20 28 23	               jsr  nib2hex
.2399	99 df 22	               sta  abin,y
.239c	68		               pla
.239d	c8		               iny
.239e	ca		               dex
.239f	d0 ef		               bne  nextbit
.23a1	a9 00		               lda  #0
.23a3	99 df 22	               sta  abin,y
.23a6	20 5d 21	               jsr  pull
.23a9	60		               rts
.23aa			putabin
.23aa	20 88 23	               jsr     atobin
.23ad	20 1e 21	               jsr     push
.23b0	a2 df		               ldx     #<abin
.23b2	a0 22		               ldy     #>abin
.23b4	20 2d 20	               jsr     puts
.23b7	20 5d 21	               jsr     pop
.23ba	60		               rts
.23bb			printabin
.23bb	20 1e 21	               jsr     push
.23be	a2 df		               ldx     #<abin
.23c0	a0 22		               ldy     #>abin
.23c2	20 2d 20	               jsr     puts
.23c5	20 5d 21	               jsr     pop
.23c8	60		               rts
.23c9			putabinfmt
.23c9	08		               php
.23ca	48		               pha
.23cb	a9 25		               lda     #"%"
.23cd	20 27 20	               jsr     putch
.23d0	68		               pla
.23d1	20 aa 23	               jsr     putabin
.23d4	28		               plp
.23d5	60		               rts
.23d6			putabinxy
.23d6	20 47 20	               jsr     gotoxy
.23d9	20 aa 23	               jsr     putabin
.23dc	60		               rts
.23dd			putabinfmtxy
.23dd	20 47 20	               jsr     gotoxy
.23e0	20 c9 23	               jsr     putabinfmt
.23e3	60		               rts
.23e4			atodec
.23e4	20 1e 21	               jsr  push
.23e7	f8		               sed
.23e8	aa		               tax
.23e9	a0 00		               ldy  #$00
.23eb	a9 00		               lda  #$00
.23ed	18		nextbit        clc
.23ee	69 01		               adc  #$01
.23f0	90 01		               bcc  decx
.23f2	c8		               iny
.23f3	ca		decx           dex
.23f4	d0 f7		               bne  nextbit
.23f6	48		               pha
.23f7	98		               tya
.23f8	20 28 23	               jsr  nib2hex
.23fb	8d e8 22	               sta  adec
.23fe	68		               pla
.23ff	48		               pha
.2400	20 28 23	               jsr  nib2hex
.2403	8d ea 22	               sta  adec+2
.2406	68		               pla
.2407	6a		               ror
.2408	6a		               ror
.2409	6a		               ror
.240a	6a		               ror
.240b	20 28 23	               jsr  nib2hex
.240e	8d e9 22	               sta  adec+1
.2411	d8		               cld
.2412	20 5d 21	               jsr  pull
.2415	60		               rts
>2416	00 00 00	buffer         .byte     0,0,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>2419	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>241d	00 00 00 00 00 00 00 00 00 0d 00 00
>2429	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>242d	00 00 00 00 00 00 00 00 00 00 00 00
>2439	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>243d	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>2449	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>244d	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>2459	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>245d	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>2469	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>246d	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>2479	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>247d	00 00 00 00 00 00 00 00 00 00 00 00
>2489	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>248d	00 00 00 00 00 00 00 00 00 00 00 00
>2499	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>249d	00 00 00 00 00 00 00 00 00 00 00 00
>24a9	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>24ad	00 00 00 00 00 00 00 00 00 00 00 00
>24b9	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>24bd	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>24c9	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>24cd	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>24d9	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>24dd	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>24e9	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>24ed	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>24f9	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>24fd	00 00 00 00 00 00 00 00 00 00 00 00
>2509	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>250d	00 00 00 00 00 00 00 00 00 00 00 00
.2519			waitstop
.2519	20 1e 21	               jsr  push
.251c	20 ed f6	wait           jsr  k_stop
.251f	d0 fb		               bne  wait
.2521	20 5d 21	               jsr  pop
.2524	60		               rts
.2525			anykey
.2525	08		               php
.2526	48		               pha
.2527	a5 cb		nokey          lda 203
.2529	c9 40		               cmp #64
.252b	f0 fa		               beq nokey
.252d	20 33 25	               jsr releasekey
.2530	68		               pla
.2531	28		               plp
.2532	60		               rts
.2533			releasekey
.2533	08		               php
.2534	48		               pha
.2535	a5 cb		keypressed     lda 203
.2537	c9 40		               cmp #64
.2539	d0 fa		               bne keypressed
.253b	68		               pla
.253c	28		               plp
.253d	60		               rts
.253e			getkey
.253e	20 e4 ff	again          jsr  getin
.2541	c9 00		               cmp  #0
.2543	f0 f9		               beq  again
.2545	60		               rts
.2546			waitkey
.2546	20 1e 21	               jsr  push
.2549	8d 97 25	               sta  thekey
.254c	20 e4 ff	nope           jsr  getin
.254f	20 d2 ff	               jsr  chrout
.2552	cd 97 25	               cmp  thekey
.2555	d0 f5		               bne  nope
.2557	20 d2 ff	               jsr  chrout
.255a	20 5d 21	               jsr  pop
.255d	60		               rts
.255e			waitspace
.255e	20 1e 21	               jsr  push
.2561	a9 7f		wait           lda  #$7f  ;%01111111
.2563	8d 00 dc	               sta  $dc00
.2566	ad 01 dc	               lda  $dc01
.2569	29 10		               and  #$10  ;mask %00010000
.256b	d0 f4		               bne  wait
.256d	20 5d 21	               jsr  pop
.2570			waitsstop
.2570	20 1e 21	               jsr  push
.2573	20 ed f6	wait           jsr  k_stop  ;%01111111
.2576	d0 fb		               bne  wait
.2578	20 5d 21	               jsr  pop
.257b			waitreturn
.257b	20 1e 21	               jsr  push
.257e	ad 98 25	               lda  thecount
.2581	8d 00 04	               sta  scrnram
.2584	a9 02		               lda  #$02
.2586	8d 00 d8	               sta  colorram
.2589	20 e4 ff	nope           jsr  getin
.258c	c9 0d		nohex          cmp  #$0d
.258e	d0 f9		               bne  nope
.2590	ee 98 25	               inc  thecount
.2593	20 5d 21	               jsr  pop
.2596	60		               rts
>2597	00		thekey         .byte   0
>2598	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-disk.asm

.2599			diskerror
.2599	20 1e 21	               jsr  push
.259c	ad ca 26	               lda  dsk_dev   ; Select device 8
.259f	85 ba		               sta  $ba       ;
.25a1	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.25a4	a9 6f		               lda  #$6f
.25a6	85 b9		               sta  $b9       ;
.25a8	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.25ab	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.25ae	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.25b1	c9 0d		               cmp  #$0d      ; Is it CR ?
.25b3	d0 f6		               bne  nextchar  ; No, get next char
.25b5	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.25b8	20 5d 21	               jsr  pop
.25bb	60		               rts
.25bc			diskdir
.25bc	20 1e 21	               jsr  push
.25bf	a9 24		               lda  #$24      ; L012C - Filename is "$"
.25c1	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.25c3	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.25c5	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.25c7	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.25c9	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.25cb	a9 01		               lda  #$01      ; L0138 - set ...
.25cd	85 b7		               sta  $b7       ; L013A - ... length of current filename
.25cf	ad ca 26	               lda  dsk_dev   ; L013C - set 8 as ...
.25d2	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.25d4	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.25d6	85 b9		               sta  $b9       ; L0142 - ... secondary address
.25d8	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.25db	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...%10111010
.25dd	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.25e0	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.25e2	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.25e5	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.25e7	85 90		               sta  $90       ; L0153 - ... kernal status word.
.25e9	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.25eb	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.25ed	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.25f0	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.25f2	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.25f4	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.25f6	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.25f9	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.25fb	d0 28		               bne  exit      ; L0167
.25fd	a4 fb		               ldy  $fb       ; L0169
.25ff	88		               dey            ; L016b
.2600	d0 e9		               bne  loop1     ; L016C - If not last, loop
.2602	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.2604	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.2607	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.2609	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.260c	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.260f	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.2611	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.2613	aa		               tax            ; L017F - tfr a in x
.2614	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.2616	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.2619	4c 0c 26	               jmp  loop3     ; L0185 - get another byte
.261c	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.261e	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.2621	a0 02		               ldy  #$02      ; L018D - set Y to 2
.2623	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.2625	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.2628	20 5d 21	               jsr  pop
.262b	60		               rts            ; L0194
.262c			directory
.262c	20 bc 25	               jsr  diskdir
.262f	20 99 25	               jsr  diskerror
.2632	60		               rts
.2633			memtofile
.2633	20 a4 26	               jsr  dsk_putmesg
.2636	20 1e 21	               jsr  push
.2639	ad ce 26	               lda  dsk_fnlen
.263c	ae cc 26	               ldx  dsk_fnptr      ; load fname addr. lbyte
.263f	ac cd 26	               ldy  dsk_fnptr+1
.2642	20 bd ff	               jsr  setnam         ; call setnam
.2645	ad cb 26	               lda  dsk_lfsno
.2648	ae ca 26	               ldx  dsk_dev        ; specified device
.264b	a0 00		skip           ldy  #$00
.264d	20 ba ff	               jsr  setlfs         ; call setlfs
.2650	ad c6 26	               lda  dsk_data_s     ; put data start lbyte in stal
.2653	85 c1		               sta  stal
.2655	ad c7 26	               lda  dsk_data_s+1   ; put data start hbyte in stal
.2658	85 c2		               sta  stal+1
.265a	ae c8 26	               ldx  dsk_data_e     ; put data end lbyte in x
.265d	ac c9 26	               ldy  dsk_data_e+1   ; put data end hbyte in y
.2660	a9 c1		               lda  #stal          ; start address located in $c1/$c2
.2662	20 d8 ff	               jsr  save           ; call save
.2665	90 00		               bcc  noerror        ; if carry set, a load error has happened
.2667	20 5d 21	noerror        jsr  pop
.266a	60		               rts
.266b			filetomem
.266b	20 1e 21	               jsr push
.266e	ad ce 26	               lda dsk_fnlen
.2671	ae cc 26	               ldx dsk_fnptr
.2674	ac cd 26	               ldy dsk_fnptr+1
.2677	20 bd ff	               jsr setnam     ; call setnam
.267a	ad cb 26	               lda dsk_lfsno
.267d	ae ca 26	               ldx dsk_dev    ; default to device 8
.2680	a0 01		               ldy #$01       ; not $01 means: load to address stored in file
.2682	20 ba ff	               jsr setlfs     ; call setlfs
.2685	a9 00		               lda #$00       ; $00 means: load to memory (not verify)
.2687	20 d5 ff	               jsr load       ; call load
.268a	90 03		               bcc noerror      ; if carry set, a load error has happened
.268c	20 93 26	               jsr  error
.268f	20 5d 21	noerror        jsr pop
.2692	60		               rts
.2693			error
.2693	60		               rts
.2694	a2 df		error1         ldx  #<dsk_emsg1
.2696	a0 26		               ldy  #>dsk_emsg1
.2698	20 2d 20	               jsr  puts
.269b	60		               rts
.269c	a2 f3		error2         ldx #<dsk_emsg2
.269e	a0 26		               ldy #>dsk_emsg2
.26a0	20 2d 20	               jsr puts
.26a3	60		               rts
.26a4			dsk_putmesg
.26a4	20 1e 21	               jsr push
.26a7	a2 cf		               ldx #<dsk_msg0
.26a9	a0 26		               ldy #>dsk_msg0
.26ab	20 2d 20	               jsr puts
.26ae	a9 20		               lda #$20
.26b0	20 27 20	               jsr putch
.26b3	ae cc 26	               ldx dsk_fnptr
.26b6	ac cd 26	               ldy dsk_fnptr+1
.26b9	20 2d 20	               jsr puts
.26bc	ad cb 26	               lda dsk_lfsno
.26bf	20 c3 ff	               jsr close
.26c2	20 5d 21	               jsr pop
.26c5	60		               rts
>26c6	00 00		dsk_data_s     .word     $0000    ; example addresses
>26c8	00 20		dsk_data_e     .word     $2000
>26ca	08		dsk_dev        .byte     $08
>26cb	00		dsk_lfsno      .byte     $00
>26cc	00 00		dsk_fnptr      .word     $00
>26ce	00		dsk_fnlen      .byte     0
>26cf	8d		dsk_msg0       .byte     141
>26d0	53 41 56 49	               .null     "saving"
>26d4	4e 47 00
>26d7	8d		dsk_msg1       .byte     141
>26d8	53 55 43 43	               .null     "succes"
>26dc	45 53 00
>26df	8d		dsk_emsg1      .byte     141
>26e0	46 49 43 48	               .null     "fichier non ouvert"
>26e4	49 45 52 20 4e 4f 4e 20 4f 55 56 45 52 54 00
>26f3	11		dsk_emsg2      .byte     17
>26f4	45 52 52 45	               .null     "erreur d'ecriture"
>26f8	55 52 20 44 27 45 43 52 49 54 55 52 45 00

;******  Return to file: charedit.asm


;******  End of listing

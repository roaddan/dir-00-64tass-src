
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Mon Nov 20 15:01:54 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm

="20231116-100400"	version  = "20231116-100400"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

=18			fkeyleft       =    18
=9			f1top          =    9
=$0400			scrnnewram     =    $0400
=10			charsdef       =    10
=9			grid_top       =    9
=1			grid_left      =    1
=16			grid_bot       =    grid_top + 7
=8			grid_right     =    grid_left + 7
=$0b			bordure        =    vgris
=$00			fond           =    vnoir
=$03			mesgcol        =    vcyan
=$03			menu1col1      =    vcyan
=$0e			menu1col2      =    vbleu1
=$0f			menu2col1      =    vgris2
=$0c			menu2col2      =    vgris1
=$01			flashcol       =    vblanc
=$07			whoamicol      =    vjaune
=$01			charcolor      =    vblanc
=$0f			charscolor     =    vgris2
.080d			main
.080d	20 26 21	               jsr  push
.0810	20 f8 1f	               jsr  scrmaninit
.0813	08		               php
.0814	48		               pha
.0815	a9 08		               lda  #$08
.0817	20 d2 ff	               jsr  $ffd2
.081a	68		               pla
.081b	28		               plp
.081c	20 23 0a	               jsr  drawcredits
.081f			wait
.081f	20 de 1f	               jsr  screendis
.0822	20 ca 0f	               jsr  copycharset
.0825	20 18 20	               jsr  cls
.0828	20 b4 0f	               jsr  setscreenptr
.082b	20 82 0a	               jsr  setdefaultchar
.082e	20 25 10	               jsr  staticscreen
.0831	20 f7 0e	               jsr  drawbitmap
.0834	a9 00		               lda  #$00
.0836	8d 17 09	               sta  fkeyset
.0839	20 61 10	               jsr  drawfkeys
.083c	a9 00		               lda  #$00
.083e	20 26 21	               jsr  push
.0841	a2 78		               ldx  #<blankmsg
.0843	a0 19		               ldy  #>blankmsg
.0845	20 be 20	               jsr  putscxy
.0848	a2 a4		               ldx  #<prompt_msg
.084a	a0 19		               ldy  #>prompt_msg
.084c	20 be 20	               jsr  putscxy
.084f	20 65 21	               jsr  pop
.0852	20 eb 1f	               jsr  screenena
.0855	20 93 0c	               jsr  keyaction
.0858	20 18 20	               jsr  cls
.085b	20 23 0a	               jsr  drawcredits
.085e	a2 b4		               ldx #<bye_msg
.0860	a0 1d		               ldy #>bye_msg
.0862	20 be 20	               jsr putscxy
.0865	a2 d6		               ldx #<any_msg
.0867	a0 1d		               ldy #>any_msg
.0869	20 be 20	               jsr putscxy
.086c	20 46 25	               jsr  getkey
.086f	20 18 20	               jsr  cls
.0872	20 65 21	               jsr  pop
.0875	60		               rts
.0876			savetofile
.0876	20 26 21	               jsr  push
.0879	a9 28		               lda  #<fname
.087b	8d d4 26	               sta  dsk_fnptr
.087e	a9 09		               lda  #>fname
.0880	8d d5 26	               sta  dsk_fnptr+1
.0883	a9 0d		               lda  #(device-fname-1)
.0885	8d d6 26	               sta  dsk_fnlen
.0888	ad 36 09	               lda  device
.088b	29 0f		               and  #$0f
.088d	8d d3 26	               sta  dsk_lfsno
.0890	a9 00		               lda  #<bitmapmem
.0892	8d ce 26	               sta  dsk_data_s
.0895	a9 28		               lda  #>bitmapmem
.0897	8d cf 26	               sta  dsk_data_s+1
.089a	a9 00		               lda  #<endofaddr
.089c	8d d0 26	               sta  dsk_data_e
.089f	a9 48		               lda  #>endofaddr
.08a1	8d d1 26	               sta  dsk_data_e+1
.08a4	a2 78		               ldx #<blankmsg
.08a6	a0 19		               ldy #>blankmsg
.08a8	20 be 20	               jsr putscxy
.08ab	20 26 21	               jsr  push
.08ae	a2 01		               ldx  #1
.08b0	a0 04		               ldy  #4
.08b2	20 4f 20	               jsr  gotoxy
.08b5	20 65 21	               jsr  pop
.08b8	20 3b 26	               jsr  memtofile
.08bb	20 65 21	               jsr  pop
.08be	60		               rts
.08bf			loadfromfile
.08bf	20 26 21	               jsr  push
.08c2	a9 28		               lda  #<fname
.08c4	8d d4 26	               sta  dsk_fnptr
.08c7	a9 09		               lda  #>fname
.08c9	8d d5 26	               sta  dsk_fnptr+1
.08cc	a9 0d		               lda  #(device-fname-1)
.08ce	8d d6 26	               sta  dsk_fnlen
.08d1	ad 36 09	               lda  device
.08d4	29 0f		               and  #$0f
.08d6	8d d3 26	               sta  dsk_lfsno
.08d9	a9 00		               lda  #<bitmapmem
.08db	8d ce 26	               sta  dsk_data_s
.08de	a9 28		               lda  #>bitmapmem
.08e0	8d cf 26	               sta  dsk_data_s+1
.08e3	a9 00		               lda  #<endofaddr
.08e5	8d d0 26	               sta  dsk_data_e
.08e8	a9 48		               lda  #>endofaddr
.08ea	8d d1 26	               sta  dsk_data_e+1
.08ed	a2 78		               ldx #<blankmsg
.08ef	a0 19		               ldy #>blankmsg
.08f1	20 be 20	               jsr putscxy
.08f4	20 26 21	               jsr  push
.08f7	a2 01		               ldx  #1
.08f9	a0 04		               ldy  #4
.08fb	20 4f 20	               jsr  gotoxy
.08fe	20 65 21	               jsr  pop
.0901	20 73 26	               jsr  filetomem
.0904	20 65 21	               jsr  pop
.0907	60		               rts
=10240			bitmapmem      =         charsdef * 1024     ;Calcul position ram des caracteres.
=18432			endofaddr      =         (charsdef * 1024) + (4*$800)
=61440			mstopaddr      =         $d000+(4*$800)
>0908	00 d0		startaddr      .word     $d000               ; 53248
>090a	00 f0		stopaddr       .word     mstopaddr           ; 55296
>090c	00 28		bitmapaddr     .word     bitmapmem           ; $3000, 12288
>090e	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>0912	08 04 02 01
>0916	00		editmode       .byte     0
>0917	00		fkeyset        .byte     0
>0918	00		currentchar    .byte     0
>0919	00		currentkey     .byte     0
>091a	00		previouskey    .byte     0
>091b	00		bitmapoffset   .byte     0
>091c	00 00		mapaddr        .word     0
>091e	00 00		byteaddr       .word     0
>0920	00 00		gridaddr       .word     0
>0922	09		cursln         .byte     grid_top
>0923	01		curscl         .byte     grid_left
>0924	05 1b 03 12	pfname         .byte     vvert,27,3,18
>0928	40 30 3a	fname          .text     "@0:"
>092b	3f 3f 3f 3f	name           .text     "??????"
>092f	3f 3f
>0931	2e 43 48 52	ext            .null     ".chr"
>0935	00
>0936	00		device         .byte     0

;******  Processing file: routines.asm

.0937			template
.0937	20 26 21	               jsr  push
.093a	20 65 21	               jsr  pop
.093d	60		               rts
.093e			getfname
.093e	20 26 21	               jsr  push
.0941	20 26 21	               jsr  push
.0944	a2 78		               ldx  #<blankmsg
.0946	a0 19		               ldy  #>blankmsg
.0948	20 be 20	               jsr  putscxy
.094b	a2 e1		               ldx  #<fname_msg
.094d	a0 1b		               ldy  #>fname_msg
.094f	20 be 20	               jsr  putscxy
.0952	20 65 21	               jsr  pop
.0955	a2 00		               ldx  #$00
.0957	8e 8b 09	               stx  count
.095a	20 8c 09	getanother     jsr  getalphanum
.095d	20 2f 20	               jsr  putch
.0960	ae 8b 09	               ldx  count
.0963	9d 2b 09	               sta  name,x
.0966	ee 8b 09	               inc  count
.0969	ae 8b 09	               ldx  count
.096c	e0 06		               cpx  #$06
.096e	f0 03		               beq  finish
.0970	4c 5a 09	               jmp  getanother
.0973			finish
.0973	20 26 21	               jsr  push
.0976	a2 78		               ldx  #<blankmsg
.0978	a0 19		               ldy  #>blankmsg
.097a	20 be 20	               jsr  putscxy
.097d	a2 24		               ldx  #<pfname
.097f	a0 09		               ldy  #>pfname
.0981	20 be 20	               jsr  putscxy
.0984	20 65 21	               jsr  pop
.0987	20 65 21	               jsr  pop
.098a	60		               rts
>098b	00		count          .byte     0
.098c			getalphanum
.098c	20 26 21	               jsr  push
.098f	20 46 25	getanother     jsr  getkey
.0992	c9 30		               cmp  #$30      ; 0
.0994	30 f9		               bmi  getanother
.0996	c9 3a		               cmp  #$3a      ; 9+1
.0998	30 0b		               bmi  goodone
.099a	c9 41		isitletter     cmp  #$41      ; A
.099c	30 f1		               bmi  getanother
.099e	c9 5b		               cmp  #$5b      ; Z+1
.09a0	30 03		               bmi  goodone
.09a2	4c 8f 09	               jmp  getanother
.09a5	8d af 09	goodone        sta  tempbyte
.09a8	20 65 21	               jsr  pop
.09ab	ad af 09	               lda  tempbyte
.09ae	60		               rts
>09af	00		tempbyte       .byte     0
.09b0			copychar
.09b0	20 26 21	               jsr  push
.09b3	20 ec 09	               jsr  getvalidkey
.09b6	ad 0c 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.09b9	85 fb		               sta  zpage1
.09bb	ad 0d 09	               lda  bitmapaddr+1
.09be	85 fc		               sta  zpage1+1
.09c0	ae 22 0a	               ldx  copykey
.09c3	bd 21 24	               lda  asciitorom,x
.09c6	aa		               tax
.09c7	e0 00		               cpx  #$00
.09c9	f0 08		               beq  no_offset      ; sommes nous déja à 0
.09cb	a9 08		addagain       lda  #$08
.09cd	20 bd 11	               jsr  zp1addnum      ; on augmente de 8 byte ...
.09d0	ca		               dex                 ; pour chaque caracteres
.09d1	d0 f8		               bne  addagain
.09d3	ad 1c 09	no_offset      lda  mapaddr        ; le caractere actuel
.09d6	85 fd		               sta  zpage2         ;
.09d8	ad 1d 09	               lda  mapaddr+1      ;
.09db	85 fe		               sta  zpage2+1       ;
.09dd	a0 00		               ldy  #$00
.09df	b1 fb		nextbyte       lda  (zpage1),y
.09e1	91 fd		               sta  (zpage2),y
.09e3	c8		               iny
.09e4	c0 08		               cpy  #$08
.09e6	d0 f7		               bne  nextbyte
.09e8	20 65 21	out            jsr  pop
.09eb	60		               rts
.09ec			getvalidkey
.09ec	20 26 21	               jsr  push
.09ef	20 26 21	               jsr  push
.09f2	a2 78		               ldx  #<blankmsg
.09f4	a0 19		               ldy  #>blankmsg
.09f6	20 be 20	               jsr  putscxy
.09f9	a2 b8		               ldx  #<copychar_msg
.09fb	a0 1b		               ldy  #>copychar_msg
.09fd	20 be 20	               jsr  putscxy
.0a00	20 65 21	               jsr  pop
.0a03	20 46 25	getgoodkey     jsr  getkey
.0a06	8d 22 0a	               sta  copykey
.0a09	aa		               tax
.0a0a	bc 21 24	               ldy  asciitorom,x
.0a0d	c4 00		               cpy  $00
.0a0f	d0 0a		               bne  goodone
.0a11	ae 22 0a	               ldx  copykey
.0a14	e0 40		               cpx  #$40
.0a16	f0 03		               beq  goodone
.0a18	4c 03 0a	               jmp  getgoodkey
.0a1b	20 2f 20	goodone        jsr  putch
.0a1e	20 65 21	               jsr  pop
.0a21	60		               rts
>0a22	00		copykey        .byte 0
.0a23			drawcredits
.0a23	20 26 21	               jsr  push
.0a26	20 18 20	               jsr  cls
.0a29	a2 40		               ldx #<whoami0
.0a2b	a0 1c		               ldy #>whoami0
.0a2d	20 be 20	               jsr putscxy
.0a30	a2 65		               ldx #<whoami1
.0a32	a0 1c		               ldy #>whoami1
.0a34	20 be 20	               jsr putscxy
.0a37	a2 8c		               ldx #<whoami2
.0a39	a0 1c		               ldy #>whoami2
.0a3b	20 be 20	               jsr putscxy
.0a3e	a2 b1		               ldx #<whoami3
.0a40	a0 1c		               ldy #>whoami3
.0a42	20 be 20	               jsr putscxy
.0a45	a2 d6		               ldx #<whoami4
.0a47	a0 1c		               ldy #>whoami4
.0a49	20 be 20	               jsr putscxy
.0a4c	a2 fb		               ldx #<whoami5
.0a4e	a0 1c		               ldy #>whoami5
.0a50	20 be 20	               jsr putscxy
.0a53	a2 20		               ldx #<whoami6
.0a55	a0 1d		               ldy #>whoami6
.0a57	20 be 20	               jsr putscxy
.0a5a	a2 45		               ldx #<whoami7
.0a5c	a0 1d		               ldy #>whoami7
.0a5e	20 be 20	               jsr putscxy
.0a61	a2 6a		               ldx #<whoami8
.0a63	a0 1d		               ldy #>whoami8
.0a65	20 be 20	               jsr putscxy
.0a68	a2 8f		               ldx #<whoami9
.0a6a	a0 1d		               ldy #>whoami9
.0a6c	20 be 20	               jsr putscxy
.0a6f	20 db 11	               jsr  delay
.0a72	20 db 11	               jsr  delay
.0a75	20 db 11	               jsr  delay
.0a78	20 db 11	               jsr  delay
.0a7b	20 db 11	               jsr  delay
.0a7e	20 65 21	               jsr  pop
.0a81	60		               rts
.0a82			setdefaultchar
.0a82	20 26 21	               jsr  push
.0a85	a9 40		               lda  #$40
.0a87	8d 19 09	               sta  currentkey
.0a8a	aa		               tax
.0a8b	bc 21 24	               ldy  asciitorom,x
.0a8e	8c 1b 09	               sty  bitmapoffset
.0a91	20 4c 0b	               jsr  drawkeyval
.0a94	20 f7 0e	               jsr  drawbitmap
.0a97	20 26 21	               jsr  push
.0a9a	a2 0d		               ldx  #13
.0a9c	a0 0c		               ldy  #12
.0a9e	20 4f 20	               jsr  gotoxy
.0aa1	20 65 21	               jsr  pop
.0aa4	20 2f 20	               jsr  putch
.0aa7	20 26 21	               jsr  push
.0aaa	a2 11		               ldx  #17
.0aac	a0 05		               ldy  #5
.0aae	20 4f 20	               jsr  gotoxy
.0ab1	20 65 21	               jsr  pop
.0ab4	20 ec 23	               jsr  atodec
.0ab7	20 26 21	               jsr  push
.0aba	a2 f0		isx            ldx  #<adec
.0abc	a0 22		isy            ldy  #>adec
.0abe	20 35 20	               jsr  puts
.0ac1	20 65 21	               jsr  pull
.0ac4	20 65 21	               jsr  pop
.0ac7	60		               rts
.0ac8			resetmenuacolor
.0ac8	20 26 21	               jsr  push
.0acb	a9 03		               lda  #menu1col1
.0acd	8d 2e 1e	               sta  f1abutton
.0ad0	8d 64 1e	               sta  f3abutton
.0ad3	8d 9a 1e	               sta  f5abutton
.0ad6	8d d0 1e	               sta  f7abutton
.0ad9	a9 0e		               lda  #menu1col2
.0adb	8d 49 1e	               sta  f2abutton
.0ade	8d 7f 1e	               sta  f4abutton
.0ae1	8d b5 1e	               sta  f6abutton
.0ae4	8d eb 1e	               sta  f8abutton
.0ae7	20 65 21	               jsr  pop
.0aea	60		               rts
.0aeb			resetmenubcolor
.0aeb	20 26 21	               jsr  push
.0aee	a9 0f		               lda  #menu2col1
.0af0	8d 06 1f	               sta  f1bbutton
.0af3	8d 3c 1f	               sta  f3bbutton
.0af6	8d 72 1f	               sta  f5bbutton
.0af9	8d a8 1f	               sta  f7bbutton
.0afc	a9 0f		               lda  #menu2col1
.0afe	8d 21 1f	               sta  f2bbutton
.0b01	8d 57 1f	               sta  f4bbutton
.0b04	8d 8d 1f	               sta  f6bbutton
.0b07	8d c3 1f	               sta  f8bbutton
.0b0a	20 65 21	               jsr  pop
.0b0d	60		               rts
.0b0e			setmenuacolor
.0b0e	20 26 21	               jsr  push
.0b11	8d 2e 1e	               sta  f1abutton
.0b14	8d 49 1e	               sta  f2abutton
.0b17	8d 64 1e	               sta  f3abutton
.0b1a	8d 7f 1e	               sta  f4abutton
.0b1d	8d 9a 1e	               sta  f5abutton
.0b20	8d b5 1e	               sta  f6abutton
.0b23	8d d0 1e	               sta  f7abutton
.0b26	8d eb 1e	               sta  f8abutton
.0b29	20 65 21	               jsr  pop
.0b2c	60		               rts
.0b2d			setmenubcolor
.0b2d	20 26 21	               jsr  push
.0b30	8d 06 1f	               sta  f1bbutton
.0b33	8d 21 1f	               sta  f2bbutton
.0b36	8d 3c 1f	               sta  f3bbutton
.0b39	8d 57 1f	               sta  f4bbutton
.0b3c	8d 72 1f	               sta  f5bbutton
.0b3f	8d 8d 1f	               sta  f6bbutton
.0b42	8d a8 1f	               sta  f7bbutton
.0b45	8d c3 1f	               sta  f8bbutton
.0b48	20 65 21	               jsr  pop
.0b4b	60		               rts
.0b4c			drawkeyval
.0b4c	20 26 21	               jsr  push
.0b4f	20 26 21	               jsr  push
.0b52	a2 01		               ldx  #1
.0b54	a0 13		               ldy  #19
.0b56	20 4f 20	               jsr  gotoxy
.0b59	20 65 21	               jsr  pop
.0b5c	ad 19 09	               lda  currentkey
.0b5f	20 2f 20	               jsr  putch
.0b62	48		               pha
.0b63	a9 3d		               lda  #'='
.0b65	20 2f 20	               jsr  putch
.0b68	a9 25		               lda  #'%'
.0b6a	20 2f 20	               jsr  putch
.0b6d	68		               pla
.0b6e	20 b2 23	               jsr  putabin
.0b71	20 26 21	               jsr  push
.0b74	a2 01		               ldx  #1
.0b76	a0 14		               ldy  #20
.0b78	20 4f 20	               jsr  gotoxy
.0b7b	20 65 21	               jsr  pop
.0b7e	20 26 21	               jsr  push
.0b81	a2 4d		isx            ldx  #<txt1
.0b83	a0 0c		isy            ldy  #>txt1
.0b85	20 35 20	               jsr  puts
.0b88	20 65 21	               jsr  pull
.0b8b	a9 24		               lda  #'$'
.0b8d	20 2f 20	               jsr  putch
.0b90	ad 19 09	               lda  currentkey
.0b93	20 1f 23	               jsr  putahex
.0b96	20 26 21	               jsr  push
.0b99	a2 01		               ldx  #1
.0b9b	a0 15		               ldy  #21
.0b9d	20 4f 20	               jsr  gotoxy
.0ba0	20 65 21	               jsr  pop
.0ba3	20 26 21	               jsr  push
.0ba6	a2 58		isx            ldx  #<txt2
.0ba8	a0 0c		isy            ldy  #>txt2
.0baa	20 35 20	               jsr  puts
.0bad	20 65 21	               jsr  pull
.0bb0	a9 24		               lda  #'$'
.0bb2	20 2f 20	               jsr  putch
.0bb5	ad 0d 09	               lda  bitmapaddr+1
.0bb8	20 1f 23	               jsr  putahex
.0bbb	ad 0c 09	               lda  bitmapaddr
.0bbe	20 1f 23	               jsr  putahex
.0bc1	20 26 21	               jsr  push
.0bc4	a2 01		               ldx  #1
.0bc6	a0 16		               ldy  #22
.0bc8	20 4f 20	               jsr  gotoxy
.0bcb	20 65 21	               jsr  pop
.0bce	20 26 21	               jsr  push
.0bd1	a2 63		isx            ldx  #<txt3
.0bd3	a0 0c		isy            ldy  #>txt3
.0bd5	20 35 20	               jsr  puts
.0bd8	20 65 21	               jsr  pull
.0bdb	a9 24		               lda  #'$'
.0bdd	20 2f 20	               jsr  putch
.0be0	ad 1b 09	               lda  bitmapoffset
.0be3	20 1f 23	               jsr  putahex
.0be6	20 26 21	               jsr  push
.0be9	a2 01		               ldx  #1
.0beb	a0 17		               ldy  #23
.0bed	20 4f 20	               jsr  gotoxy
.0bf0	20 65 21	               jsr  pop
.0bf3	20 26 21	               jsr  push
.0bf6	a2 70		isx            ldx  #<txt4
.0bf8	a0 0c		isy            ldy  #>txt4
.0bfa	20 35 20	               jsr  puts
.0bfd	20 65 21	               jsr  pull
.0c00	a9 24		               lda  #'$'
.0c02	20 2f 20	               jsr  putch
.0c05	ad 1d 09	               lda  mapaddr+1
.0c08	20 1f 23	               jsr  putahex
.0c0b	ad 1c 09	               lda  mapaddr
.0c0e	20 1f 23	               jsr  putahex
.0c11	20 26 21	               jsr  push
.0c14	a2 01		               ldx  #1
.0c16	a0 18		               ldy  #24
.0c18	20 4f 20	               jsr  gotoxy
.0c1b	20 65 21	               jsr  pop
.0c1e	20 26 21	               jsr  push
.0c21	a2 7b		isx            ldx  #<txt5
.0c23	a0 0c		isy            ldy  #>txt5
.0c25	20 35 20	               jsr  puts
.0c28	20 65 21	               jsr  pull
.0c2b	ad 23 09	               lda  curscl
.0c2e	20 1f 23	               jsr  putahex
.0c31	a9 da		               lda  #$da
.0c33	20 2f 20	               jsr  putch
.0c36	ad 22 09	               lda  cursln
.0c39	20 1f 23	               jsr  putahex
.0c3c	20 65 21	               jsr  pop
.0c3f	60		               rts
>0c40	50 45 54 53	txt0           .null     "petscii :   "
>0c44	43 49 49 20 3a 20 20 20 00
>0c4d	4b 45 59 20	txt1           .null     "key code: "
>0c51	43 4f 44 45 3a 20 00
>0c58	42 49 54 4d	txt2           .null     "bitmap..: "
>0c5c	41 50 2e 2e 3a 20 00
>0c63	4f 46 46 53	txt3           .null     "offset..:   "
>0c67	45 54 2e 2e 3a 20 20 20 00
>0c70	4d 41 50 41	txt4           .null     "mapaddr.: "
>0c74	44 44 52 2e 3a 20 00
>0c7b	43 55 52 53	txt5           .null     "cursval.: "
>0c7f	56 41 4c 2e 3a 20 00
>0c86	53 54 41 43	txt6           .null     "stack......:"
>0c8a	4b 2e 2e 2e 2e 2e 2e 3a 00
.0c93			keyaction
.0c93	20 26 21	               jsr  push
.0c96	20 46 25	loop           jsr  getkey
.0c99	c9 85		f1             cmp  #key_f1
.0c9b	d0 03		               bne  f2
.0c9d	4c 11 0d	               jmp  dof1
.0ca0	c9 89		f2             cmp  #key_f2
.0ca2	d0 03		               bne  f3
.0ca4	4c 17 0d	               jmp  dof2
.0ca7	c9 86		f3             cmp  #key_f3
.0ca9	d0 03		               bne  f4
.0cab	4c 1d 0d	               jmp  dof3
.0cae	c9 8a		f4             cmp  #key_f4
.0cb0	d0 03		               bne  f5
.0cb2	4c 23 0d	               jmp  dof4
.0cb5	c9 87		f5             cmp  #key_f5
.0cb7	d0 03		               bne  f6
.0cb9	4c 29 0d	               jmp  dof5
.0cbc	c9 8b		f6             cmp  #key_f6
.0cbe	d0 03		               bne  f7
.0cc0	4c 2f 0d	               jmp  dof6
.0cc3	c9 88		f7             cmp  #key_f7
.0cc5	d0 03		               bne  f8
.0cc7	4c 35 0d	               jmp  dof7
.0cca	c9 8c		f8             cmp  #key_f8
.0ccc	d0 03		               bne  ctrlx
.0cce	4c 3b 0d	               jmp  dof8
.0cd1	c9 18		ctrlx          cmp  #ctrl_x
.0cd3	d0 03		               bne  ishex14
.0cd5	4c 41 0d	               jmp  doquit
.0cd8	c9 14		ishex14        cmp  #$14
.0cda	d0 03		               bne  ishex12
.0cdc	4c 96 0c	               jmp  loop
.0cdf	c9 12		ishex12        cmp  #$12
.0ce1	d0 03		               bne  reste
.0ce3	4c 96 0c	               jmp  loop
.0ce6			reste
.0ce6	20 26 21	               jsr  push
.0ce9	a2 0d		               ldx  #13
.0ceb	a0 0c		               ldy  #12
.0ced	20 4f 20	               jsr  gotoxy
.0cf0	20 65 21	               jsr  pop
.0cf3	20 2f 20	               jsr  putch
.0cf6	48		               pha
.0cf7	ad 19 09	               lda  currentkey
.0cfa	8d 1a 09	               sta  previouskey
.0cfd	68		               pla
.0cfe	8d 19 09	               sta  currentkey
.0d01	aa		               tax
.0d02	bc 21 24	               ldy  asciitorom,x
.0d05	8c 1b 09	               sty  bitmapoffset
.0d08	20 4c 0b	               jsr  drawkeyval
.0d0b	20 f7 0e	               jsr  drawbitmap
.0d0e	4c 96 0c	               jmp  loop
.0d11	20 f1 11	dof1           jsr  f1action  ;edit/reverse
.0d14	4c 96 0c	               jmp  loop
.0d17	20 e4 12	dof2           jsr  f2action  ;save/flip vert
.0d1a	4c 96 0c	               jmp  loop
.0d1d	20 9c 13	dof3           jsr  f3action  ;load/flip horz
.0d20	4c 96 0c	               jmp  loop
.0d23	20 69 14	dof4           jsr  f4action  ;copy/scroll r
.0d26	4c 96 0c	               jmp  loop
.0d29	20 2f 15	dof5           jsr  f5action  ;clear/scroll l
.0d2c	4c 96 0c	               jmp  loop
.0d2f	20 e7 15	dof6           jsr  f6action  ;fill;/scroll up
.0d32	4c 96 0c	               jmp  loop
.0d35	20 9f 16	dof7           jsr  f7action  ;clear;/scroll down
.0d38	4c 96 0c	               jmp  loop
.0d3b	20 5c 17	dof8           jsr  f8action  ; function
.0d3e	4c 96 0c	               jmp  loop
.0d41	20 65 21	doquit         jsr  pop
.0d44	60		               rts
.0d45			editor
.0d45	20 26 21	               jsr  push
.0d48	20 26 21	               jsr  push
.0d4b	a2 78		               ldx  #<blankmsg
.0d4d	a0 19		               ldy  #>blankmsg
.0d4f	20 be 20	               jsr  putscxy
.0d52	a2 2b		               ldx  #<exit_msg
.0d54	a0 1c		               ldy  #>exit_msg
.0d56	20 be 20	               jsr  putscxy
.0d59	20 65 21	               jsr  pop
.0d5c	20 26 21	               jsr  push
.0d5f	a2 78		               ldx  #<blankmsg
.0d61	a0 19		               ldy  #>blankmsg
.0d63	20 be 20	               jsr  putscxy
.0d66	a2 ca		               ldx  #<edit_msg
.0d68	a0 19		               ldy  #>edit_msg
.0d6a	20 be 20	               jsr  putscxy
.0d6d	20 65 21	               jsr  pop
.0d70	20 b3 0e	               jsr  setcurs
.0d73	ad 19 09	               lda  currentkey
.0d76	20 26 21	               jsr  push
.0d79	a2 11		               ldx  #17
.0d7b	a0 05		               ldy  #5
.0d7d	20 4f 20	               jsr  gotoxy
.0d80	20 65 21	               jsr  pop
.0d83	20 ec 23	               jsr  atodec
.0d86	20 26 21	               jsr  push
.0d89	a2 f0		isx            ldx  #<adec
.0d8b	a0 22		isy            ldy  #>adec
.0d8d	20 35 20	               jsr  puts
.0d90	20 65 21	               jsr  pull
.0d93	20 f7 0e	               jsr  drawbitmap
.0d96	20 46 25	ed_loop        jsr  getkey
.0d99	c9 85		f1             cmp  #f1key
.0d9b	d0 03		               bne  cu
.0d9d	4c 85 0e	               jmp  do_ctrlx
.0da0	c9 91		cu             cmp  #cursu
.0da2	d0 03		               bne  cd
.0da4	4c 30 0e	               jmp  do_up
.0da7	c9 11		cd             cmp  #cursd
.0da9	d0 03		               bne  cl
.0dab	4c 43 0e	               jmp  do_down
.0dae	c9 9d		cl             cmp  #cursl
.0db0	d0 03		               bne  cr
.0db2	4c 56 0e	               jmp  do_left
.0db5	c9 1d		cr             cmp  #cursr
.0db7	d0 03		               bne  cx
.0db9	4c 69 0e	               jmp  do_right
.0dbc	c9 18		cx             cmp  #ctrl_x
.0dbe	d0 03		               bne  sp
.0dc0	4c 85 0e	               jmp  do_ctrlx
.0dc3	c9 20		sp             cmp  #$20
.0dc5	d0 03		               bne  ishex14
.0dc7	4c 7c 0e	               jmp  do_swap
.0dca	c9 14		ishex14        cmp  #$14
.0dcc	d0 03		               bne  ishex12
.0dce	4c 7c 0e	               jmp  do_swap
.0dd1	c9 12		ishex12        cmp  #$12
.0dd3	d0 03		               bne  rest
.0dd5	4c 7c 0e	               jmp  do_swap
.0dd8			rest
.0dd8	20 26 21	               jsr  push
.0ddb	a2 0d		               ldx  #13
.0ddd	a0 0c		               ldy  #12
.0ddf	20 4f 20	               jsr  gotoxy
.0de2	20 65 21	               jsr  pop
.0de5	20 2f 20	               jsr  putch
.0de8	48		               pha
.0de9	ad 19 09	               lda  currentkey
.0dec	8d 1a 09	               sta  previouskey
.0def	68		               pla
.0df0	8d 19 09	               sta  currentkey
.0df3	aa		               tax
.0df4	bc 21 24	               ldy  asciitorom,x
.0df7	8c 1b 09	               sty  bitmapoffset
.0dfa	20 4c 0b	               jsr  drawkeyval
.0dfd	20 f7 0e	               jsr  drawbitmap
.0e00	20 26 21	               jsr  push
.0e03	a2 0d		               ldx  #13
.0e05	a0 0c		               ldy  #12
.0e07	20 4f 20	               jsr  gotoxy
.0e0a	20 65 21	               jsr  pop
.0e0d	20 2f 20	               jsr  putch
.0e10	20 26 21	               jsr  push
.0e13	a2 11		               ldx  #17
.0e15	a0 05		               ldy  #5
.0e17	20 4f 20	               jsr  gotoxy
.0e1a	20 65 21	               jsr  pop
.0e1d	20 ec 23	               jsr  atodec
.0e20	20 26 21	               jsr  push
.0e23	a2 f0		isx            ldx  #<adec
.0e25	a0 22		isy            ldy  #>adec
.0e27	20 35 20	               jsr  puts
.0e2a	20 65 21	               jsr  pull
.0e2d	4c 82 0e	               jmp  totop
.0e30	ad 22 09	do_up          lda  cursln
.0e33	c9 09		               cmp  #grid_top
.0e35	f0 4b		               beq  totop
.0e37	20 d5 0e	               jsr  clrcurs
.0e3a	ce 22 09	               dec  cursln
.0e3d	20 b3 0e	               jsr  setcurs
.0e40	4c 82 0e	               jmp  totop
.0e43	ad 22 09	do_down        lda  cursln
.0e46	c9 10		               cmp  #grid_bot
.0e48	f0 38		               beq  totop
.0e4a	20 d5 0e	               jsr  clrcurs
.0e4d	ee 22 09	               inc  cursln
.0e50	20 b3 0e	               jsr  setcurs
.0e53	4c 82 0e	               jmp  totop
.0e56	ad 23 09	do_left        lda  curscl
.0e59	c9 01		               cmp  #grid_left
.0e5b	f0 25		               beq  totop
.0e5d	20 d5 0e	               jsr  clrcurs
.0e60	ce 23 09	               dec  curscl
.0e63	20 b3 0e	               jsr  setcurs
.0e66	4c 82 0e	               jmp  totop
.0e69	ad 23 09	do_right       lda  curscl
.0e6c	c9 08		               cmp  #grid_right
.0e6e	f0 12		               beq  totop
.0e70	20 d5 0e	               jsr  clrcurs
.0e73	ee 23 09	               inc  curscl
.0e76	20 b3 0e	               jsr  setcurs
.0e79	4c 82 0e	               jmp  totop
.0e7c	20 8c 0e	do_swap        jsr  do_eor
.0e7f	20 f7 0e	               jsr  drawbitmap
.0e82	4c 96 0d	totop          jmp  ed_loop
.0e85	20 d5 0e	do_ctrlx       jsr  clrcurs
.0e88	20 65 21	               jsr  pop
.0e8b	60		               rts
.0e8c			do_eor
.0e8c	20 26 21	               jsr  push
.0e8f	ad 1c 09	               lda  mapaddr
.0e92	85 fd		               sta  zpage2
.0e94	ad 1d 09	               lda  mapaddr+1
.0e97	85 fe		               sta  zpage2+1
.0e99	ae 22 09	               ldx  cursln     ; calcul de
.0e9c	ca		               dex            ; l'offset de
.0e9d	8a		               txa            ; la
.0e9e	29 f7		               and  #$f7      ; ligne
.0ea0	a8		               tay
.0ea1	ae 23 09	               ldx  curscl
.0ea4	ca		               dex
.0ea5	bd 0e 09	               lda  eorval,x
.0ea8	51 fd		               eor  (zpage2),y
.0eaa	20 4c 0b	               jsr  drawkeyval
.0ead	91 fd		               sta  (zpage2),y
.0eaf	20 65 21	               jsr  pop
.0eb2	60		               rts
.0eb3			setcurs
.0eb3	20 26 21	               jsr  push
.0eb6	a2 01		               ldx  #grid_left
.0eb8	ac 22 09	               ldy  cursln
.0ebb	20 4f 20	               jsr  gotoxy
.0ebe	a9 da		               lda  #$da
.0ec0	20 2f 20	               jsr  putch
.0ec3	ae 23 09	               ldx  curscl
.0ec6	e8		               inx
.0ec7	a0 08		               ldy  #grid_top-1
.0ec9	20 4f 20	               jsr  gotoxy
.0ecc	a9 da		               lda  #$da
.0ece	20 2f 20	               jsr  putch
.0ed1	20 65 21	               jsr  pop
.0ed4	60		               rts
.0ed5			clrcurs
.0ed5	20 26 21	               jsr  push
.0ed8	a2 01		               ldx  #grid_left
.0eda	ac 22 09	               ldy  cursln
.0edd	20 4f 20	               jsr  gotoxy
.0ee0	a9 20		               lda  #$20
.0ee2	20 2f 20	               jsr  putch
.0ee5	ae 23 09	               ldx  curscl
.0ee8	e8		               inx
.0ee9	a0 08		               ldy  #grid_top-1
.0eeb	20 4f 20	               jsr  gotoxy
.0eee	a9 20		               lda  #$20
.0ef0	20 2f 20	               jsr  putch
.0ef3	20 65 21	               jsr  pop
.0ef6	60		               rts
.0ef7			drawbitmap
.0ef7	20 26 21	               jsr  push
.0efa	20 5e 0f	               jsr  calcmapaddr
.0efd	ad 1c 09	               lda  mapaddr        ; on pointe sur la table des bitmaps
.0f00	85 fb		               sta  zpage1
.0f02	ad 1d 09	               lda  mapaddr+1
.0f05	85 fc		               sta  zpage1+1
.0f07	a0 00		drawchar       ldy  #$00
.0f09	a2 09		               ldx  #grid_top      ;on replace la ...
.0f0b	8e 14 0f	               stx  isy+1          ;ligne de départ
.0f0e	20 26 21	nextline       jsr  push
.0f11	a2 02		               ldx  #grid_left+1        ; la colonne
.0f13	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.0f15	20 4f 20	               jsr  gotoxy
.0f18	20 65 21	               jsr  pop
.0f1b	b1 fb		               lda  (zpage1),y     ; on li une ligne
.0f1d	20 90 23	               jsr  atobin
.0f20	20 8d 0f	               jsr  abintograph
.0f23	20 26 21	               jsr  push
.0f26	a2 e7		isx            ldx  #<abin
.0f28	a0 22		isy            ldy  #>abin
.0f2a	20 35 20	               jsr  puts
.0f2d	20 65 21	               jsr  pull
.0f30	ee 14 0f	               inc  isy+1
.0f33	c8		               iny
.0f34	c0 08		               cpy  #$08
.0f36	30 d6		               bmi  nextline
.0f38	20 3f 0f	               jsr  highlight
.0f3b	20 65 21	               jsr  pop
.0f3e	60		               rts
.0f3f			highlight
.0f3f	20 26 21	               jsr  push
.0f42	ae 1a 09	               ldx  previouskey
.0f45	bd 21 24	               lda  asciitorom,x
.0f48	aa		               tax
.0f49	a9 0f		               lda  #charscolor
.0f4b	9d 00 d8	               sta  colorram,x
.0f4e	ae 19 09	               ldx  currentkey
.0f51	bd 21 24	               lda  asciitorom,x
.0f54	aa		               tax
.0f55	a9 01		               lda  #charcolor
.0f57	9d 00 d8	               sta  colorram,x
.0f5a	20 65 21	               jsr  pop
.0f5d	60		               rts
.0f5e			calcmapaddr
.0f5e	20 26 21	               jsr  push
.0f61	ad 0c 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0f64	85 fb		               sta  zpage1
.0f66	ad 0d 09	               lda  bitmapaddr+1
.0f69	85 fc		               sta  zpage1+1
.0f6b	ae 1b 09	               ldx  bitmapoffset
.0f6e	e0 00		               cpx  #$00
.0f70	f0 08		               beq  thesame         ; sommes nous déja à 0
.0f72	a9 08		addagain       lda  #$08
.0f74	20 bd 11	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0f77	ca		               dex                 ; pour chaque caracteres
.0f78	d0 f8		               bne  addagain
.0f7a	48		thesame        pha
.0f7b	a5 fb		               lda  zpage1
.0f7d	8d 1c 09	               sta  mapaddr
.0f80	a5 fc		               lda  zpage1+1
.0f82	8d 1d 09	               sta  mapaddr+1
.0f85	68		               pla
.0f86	20 4c 0b	               jsr  drawkeyval
.0f89	20 65 21	out            jsr  pop
.0f8c	60		               rts
.0f8d			abintograph
.0f8d	20 26 21	               jsr  push
.0f90	a9 e7		               lda  #<abin
.0f92	85 fb		               sta  zpage1
.0f94	a9 22		               lda  #>abin+1
.0f96	85 fc		               sta  zpage1+1
.0f98	a0 00		               ldy  #$00
.0f9a	b1 fb		nextbit        lda  (zpage1),y
.0f9c	c9 30		               cmp  #$30
.0f9e	f0 07		               beq  itszero
.0fa0	a9 d1		itsone         lda  #$d1
.0fa2	91 fb		               sta  (zpage1),y
.0fa4	4c ab 0f	               jmp  next
.0fa7	a9 2e		itszero        lda  #$2e
.0fa9	91 fb		               sta  (zpage1),y
.0fab	c8		next           iny
.0fac	c0 08		               cpy  #$08
.0fae	30 ea		               bmi  nextbit
.0fb0	20 65 21	               jsr  pop
.0fb3	60		               rts
.0fb4			setscreenptr
.0fb4	20 26 21	               jsr  push
.0fb7	a9 08		               lda  #$08      ; basic commande to disable ...
.0fb9	20 d2 ff	               jsr  chrout    ; ... character set change.
.0fbc	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.0fbf	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.0fc1	09 0a		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.0fc3	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.0fc6	20 65 21	               jsr  pop
.0fc9	60		               rts
.0fca			copycharset
.0fca	20 26 21	               jsr  push
.0fcd	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0fd0	29 fe		               and  #%11111110     ;254
.0fd2	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0fd5	a5 01		               lda  u6510map       ;$01
.0fd7	29 fb		               and  #%11111011     ;251
.0fd9	85 01		               sta  u6510map       ;$01
.0fdb	20 f0 0f	               jsr  memcopy
.0fde	a5 01		               lda  u6510map       ;$01
.0fe0	09 04		               ora  #%00000100
.0fe2	85 01		               sta  u6510map       ;$01
.0fe4	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0fe7	09 01		               ora  #%00000001     ;254
.0fe9	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0fec	20 65 21	               jsr  pop
.0fef	60		               rts
.0ff0			memcopy
.0ff0	20 26 21	               jsr  push
.0ff3	ad 08 09	               lda  startaddr
.0ff6	85 fb		               sta  zpage1
.0ff8	ad 09 09	               lda  startaddr+1
.0ffb	85 fc		               sta  zpage1+1
.0ffd	ad 0c 09	               lda  bitmapaddr
.1000	85 fd		               sta  zpage2
.1002	ad 0d 09	               lda  bitmapaddr+1
.1005	85 fe		               sta  zpage2+1
.1007	a0 00		               ldy  #$00
.1009	b1 fb		onemore        lda  (zpage1),y
.100b	91 fd		               sta  (zpage2),y
.100d	20 2d 22	               jsr  inczp1
.1010	20 45 22	               jsr  inczp2
.1013	a5 fc		               lda  zpage1+1
.1015	cd 0b 09	               cmp  stopaddr+1
.1018	d0 ef		               bne  onemore
.101a	a5 fb		               lda  zpage1
.101c	cd 0a 09	               cmp  stopaddr
.101f	d0 e8		               bne  onemore
.1021	20 65 21	               jsr  pop
.1024	60		               rts
.1025			staticscreen
.1025	48		               pha
.1026	a9 0b		               lda  #bordure
.1028	8d 20 d0	               sta  $d020
.102b	68		               pla
.102c	48		               pha
.102d	a9 00		               lda  #fond
.102f	8d 21 d0	               sta  $d021
.1032	68		               pla
.1033	20 14 11	               jsr  drawlines
.1036	20 f0 10	               jsr  drawallchars
.1039	20 5c 11	               jsr  drawgrid
.103c	20 61 10	               jsr  drawfkeys
.103f	20 26 21	               jsr  push
.1042	a2 78		               ldx  #<blankmsg
.1044	a0 19		               ldy  #>blankmsg
.1046	20 be 20	               jsr  putscxy
.1049	a2 16		               ldx  #<quit_msg
.104b	a0 1c		               ldy  #>quit_msg
.104d	20 be 20	               jsr  putscxy
.1050	20 65 21	               jsr  pop
.1053	20 26 21	               jsr  push
.1056	a2 00		               ldx  #0
.1058	a0 07		               ldy  #7
.105a	20 4f 20	               jsr  gotoxy
.105d	20 65 21	               jsr  pop
.1060	60		               rts
.1061			drawfkeys
.1061	20 26 21	               jsr  push
.1064	ad 17 09	               lda  fkeyset
.1067	c9 00		               cmp  #$0
.1069	d0 42		               bne  secondks
.106b	a2 f8		               ldx #<titremenu1
.106d	a0 1d		               ldy #>titremenu1
.106f	20 be 20	               jsr putscxy
.1072	a2 2e		               ldx #<f1abutton
.1074	a0 1e		               ldy #>f1abutton
.1076	20 be 20	               jsr putscxy
.1079	a2 49		               ldx #<f2abutton
.107b	a0 1e		               ldy #>f2abutton
.107d	20 be 20	               jsr putscxy
.1080	a2 64		               ldx #<f3abutton
.1082	a0 1e		               ldy #>f3abutton
.1084	20 be 20	               jsr putscxy
.1087	a2 7f		               ldx #<f4abutton
.1089	a0 1e		               ldy #>f4abutton
.108b	20 be 20	               jsr putscxy
.108e	a2 9a		               ldx #<f5abutton
.1090	a0 1e		               ldy #>f5abutton
.1092	20 be 20	               jsr putscxy
.1095	a2 b5		               ldx #<f6abutton
.1097	a0 1e		               ldy #>f6abutton
.1099	20 be 20	               jsr putscxy
.109c	a2 d0		               ldx #<f7abutton
.109e	a0 1e		               ldy #>f7abutton
.10a0	20 be 20	               jsr putscxy
.10a3	a2 eb		               ldx #<f8abutton
.10a5	a0 1e		               ldy #>f8abutton
.10a7	20 be 20	               jsr putscxy
.10aa	4c ec 10	               jmp end
.10ad			secondks
.10ad	a2 13		               ldx #<titremenu2
.10af	a0 1e		               ldy #>titremenu2
.10b1	20 be 20	               jsr putscxy
.10b4	a2 06		               ldx #<f1bbutton
.10b6	a0 1f		               ldy #>f1bbutton
.10b8	20 be 20	               jsr putscxy
.10bb	a2 21		               ldx #<f2bbutton
.10bd	a0 1f		               ldy #>f2bbutton
.10bf	20 be 20	               jsr putscxy
.10c2	a2 3c		               ldx #<f3bbutton
.10c4	a0 1f		               ldy #>f3bbutton
.10c6	20 be 20	               jsr putscxy
.10c9	a2 57		               ldx #<f4bbutton
.10cb	a0 1f		               ldy #>f4bbutton
.10cd	20 be 20	               jsr putscxy
.10d0	a2 72		               ldx #<f5bbutton
.10d2	a0 1f		               ldy #>f5bbutton
.10d4	20 be 20	               jsr putscxy
.10d7	a2 8d		               ldx #<f6bbutton
.10d9	a0 1f		               ldy #>f6bbutton
.10db	20 be 20	               jsr putscxy
.10de	a2 a8		               ldx #<f7bbutton
.10e0	a0 1f		               ldy #>f7bbutton
.10e2	20 be 20	               jsr putscxy
.10e5	a2 c3		               ldx #<f8bbutton
.10e7	a0 1f		               ldy #>f8bbutton
.10e9	20 be 20	               jsr putscxy
.10ec	20 65 21	end            jsr  pop
.10ef	60		               rts
.10f0			drawallchars
.10f0	20 26 21	               jsr push
.10f3	20 26 21	               jsr  push
.10f6	a2 00		               ldx  #0
.10f8	a0 00		               ldy  #0
.10fa	20 4f 20	               jsr  gotoxy
.10fd	20 65 21	               jsr  pop
.1100	a2 00		               ldx  #$00
.1102	8a		nextc          txa
.1103	9d 00 04	               sta  scrnnewram,x
.1106	a9 0f		               lda  #charscolor
.1108	9d 00 d8	               sta  colorram,x
.110b	e8		               inx
.110c	e0 80		               cpx  #$80
.110e	d0 f2		               bne  nextc
.1110	20 65 21	               jsr  pop
.1113	60		               rts
.1114			drawlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.1114	20 26 21	               jsr  push
.1117	a2 28		               ldx  #40
.1119	a9 40		               lda  #64
.111b	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.111e	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.1121	ca		               dex
.1122	e0 10		hline          cpx  #vlinepos
.1124	10 03		               bpl  notyet
.1126	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.1129	e0 00		notyet         cpx  #$00
.112b	d0 ee		               bne  nextl
.112d	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.112f	85 fb		               sta  zpage1
.1131	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.1133	85 fc		               sta  zpage1+1
.1135	a0 00		               ldy  #0
.1137	a9 72		               lda  #114
.1139	91 fb		               sta  (zpage1),y
.113b	20 cb 11	               jsr  zp1add40
.113e	a2 12		               ldx  #24-hline2
.1140	a9 5d		               lda  #93
.1142	91 fb		another93      sta  (zpage1),y
.1144	20 cb 11	               jsr  zp1add40
.1147	ca		               dex
.1148	d0 f8		               bne  another93
.114a	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.114c	85 fb		               sta  zpage1
.114e	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.1150	85 fc		               sta  zpage1+1
.1152	a0 00		               ldy  #0
.1154	a9 73		               lda  #115
.1156	91 fb		               sta  (zpage1),y
.1158	20 65 21	               jsr  pop
.115b	60		               rts
.115c			drawgrid
.115c	20 26 21	               jsr  push
.115f	20 de 1f	               jsr  screendis
.1162	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.1164	85 fb		               sta  zpage1
.1166	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.1168	85 fc		               sta  zpage1+1
.116a	a2 08		               ldx  #8
.116c	a9 65		nextbox        lda  #101
.116e	a0 09		               ldy  #9
.1170	91 fb		               sta  (zpage1),y
.1172	88		               dey
.1173	a9 2e		               lda  #$2e
.1175	91 fb		nextcol        sta  (zpage1),y
.1177	88		               dey
.1178	d0 fb		               bne  nextcol
.117a	20 cb 11	               jsr  zp1add40
.117d	ca		               dex
.117e	d0 ec		               bne  nextbox
.1180	a0 08		               ldy  #8
.1182	a9 77		               lda  #119
.1184	91 fb		nextlin        sta  (zpage1),y
.1186	88		               dey
.1187	d0 fb		               bne  nextlin
.1189	a9 3e		               lda  #$3e
.118b	8d eb 05	               sta  scrnnewram+(40*(12))+11
.118e	a9 70		               lda  #$70                     ;+
.1190	8d c4 05	               sta  scrnnewram+(40*(11))+12
.1193	a9 43		               lda  #$43                     ;-
.1195	8d c5 05	               sta  scrnnewram+(40*(11))+13
.1198	a9 6e		               lda  #$6e                     ;+
.119a	8d c6 05	               sta  scrnnewram+(40*(11))+14
.119d	a9 5d		               lda  #$5d                     ;|
.119f	8d ec 05	               sta  scrnnewram+(40*(12))+12
.11a2	a9 5d		               lda  #$5d                     ;|
.11a4	8d ee 05	               sta  scrnnewram+(40*(12))+14
.11a7	a9 6d		               lda  #$6d                     ;+
.11a9	8d 14 06	               sta  scrnnewram+(40*(13))+12
.11ac	a9 43		               lda  #$43                     ;-
.11ae	8d 15 06	               sta  scrnnewram+(40*(13))+13
.11b1	a9 7d		               lda  #$7d                     ;+
.11b3	8d 16 06	               sta  scrnnewram+(40*(13))+14
.11b6	20 eb 1f	               jsr screenena
.11b9	20 65 21	               jsr  pop
.11bc	60		               rts
.11bd			zp1addnum
.11bd	08		               php
.11be	48		               pha
.11bf	18		               clc
.11c0	65 fb		               adc  zpage1
.11c2	90 02		               bcc  nocarry
.11c4	e6 fc		               inc  zpage1+1
.11c6	85 fb		nocarry        sta  zpage1
.11c8	68		               pla
.11c9	28		               plp
.11ca	60		               rts
.11cb			zp1add40
.11cb	08		               php
.11cc	48		               pha
.11cd	18		               clc
.11ce	a5 fb		               lda  zpage1
.11d0	69 28		               adc  #40
.11d2	90 02		               bcc  nocarry
.11d4	e6 fc		               inc  zpage1+1
.11d6	85 fb		nocarry        sta  zpage1
.11d8	68		               pla
.11d9	28		               plp
.11da	60		               rts
.11db			delay
.11db	20 26 21	               jsr  push
.11de	a9 00		               lda  #$0
.11e0	aa		               tax
.11e1	a8		               tay
.11e2	ca		xagain         dex
.11e3	ca		               dex
.11e4	88		yagain         dey
.11e5	c0 00		               cpy  #$00
.11e7	d0 fb		               bne  yagain
.11e9	e0 00		               cpx  #$00
.11eb	d0 f5		               bne  xagain
.11ed	20 65 21	               jsr  pop
.11f0	60		               rts
.11f1			f1action
.11f1	48		               pha
.11f2	a9 ff		               lda  #$ff
.11f4	8d 16 09	               sta  editmode
.11f7	ad 17 09	               lda  fkeyset
.11fa	f0 03		               beq  menua
.11fc	4c 84 12	               jmp  menub
.11ff			menua
.11ff	20 26 21	               jsr  push
.1202	a2 78		               ldx  #<blankmsg
.1204	a0 19		               ldy  #>blankmsg
.1206	20 be 20	               jsr  putscxy
.1209	a2 ca		               ldx  #<f1a_msg
.120b	a0 19		               ldy  #>f1a_msg
.120d	20 be 20	               jsr  putscxy
.1210	20 65 21	               jsr  pop
.1213	08		               php
.1214	48		               pha
.1215	8a		               txa
.1216	48		               pha
.1217	ad 2e 1e	               lda  f1abutton
.121a	48		               pha
.121b	a9 92		               lda  #146
.121d	8d 40 1e	               sta  f1abutton+18
.1220	a9 01		               lda  #flashcol
.1222	8d 2e 1e	               sta  f1abutton
.1225	a2 2e		               ldx  #<f1abutton
.1227	a0 1e		               ldy  #>f1abutton
.1229	20 be 20	               jsr  putscxy
.122c	20 db 11	               jsr  delay
.122f	a9 12		               lda  #18
.1231	8d 40 1e	               sta  f1abutton+18
.1234	68		               pla
.1235	8d 2e 1e	               sta  f1abutton
.1238	a2 2e		               ldx  #<f1abutton
.123a	a0 1e		               ldy  #>f1abutton
.123c	20 be 20	               jsr  putscxy
.123f	68		               pla
.1240	aa		               tax
.1241	68		               pla
.1242	28		               plp
.1243	a9 0b		               lda  #vgris
.1245	20 0e 0b	               jsr  setmenuacolor
.1248	a9 03		               lda  #menu1col1
.124a	8d 2e 1e	               sta  f1abutton
.124d	20 61 10	               jsr  drawfkeys
.1250	20 45 0d	               jsr  editor
.1253	20 26 21	               jsr  push
.1256	a2 78		               ldx  #<blankmsg
.1258	a0 19		               ldy  #>blankmsg
.125a	20 be 20	               jsr  putscxy
.125d	a2 16		               ldx  #<quit_msg
.125f	a0 1c		               ldy  #>quit_msg
.1261	20 be 20	               jsr  putscxy
.1264	20 65 21	               jsr  pop
.1267	20 26 21	               jsr  push
.126a	a2 78		               ldx  #<blankmsg
.126c	a0 19		               ldy  #>blankmsg
.126e	20 be 20	               jsr  putscxy
.1271	a2 6e		               ldx  #<menua_msg
.1273	a0 1b		               ldy  #>menua_msg
.1275	20 be 20	               jsr  putscxy
.1278	20 65 21	               jsr  pop
.127b	20 c8 0a	               jsr  resetmenuacolor
.127e	20 61 10	               jsr  drawfkeys
.1281	4c ce 12	               jmp  out
.1284			menub
.1284	20 26 21	               jsr  push
.1287	a2 78		               ldx  #<blankmsg
.1289	a0 19		               ldy  #>blankmsg
.128b	20 be 20	               jsr  putscxy
.128e	a2 b2		               ldx  #<f1b_msg
.1290	a0 1a		               ldy  #>f1b_msg
.1292	20 be 20	               jsr  putscxy
.1295	20 65 21	               jsr  pop
.1298	08		               php
.1299	48		               pha
.129a	8a		               txa
.129b	48		               pha
.129c	ad 06 1f	               lda  f1bbutton
.129f	48		               pha
.12a0	a9 92		               lda  #146
.12a2	8d 18 1f	               sta  f1bbutton+18
.12a5	a9 01		               lda  #flashcol
.12a7	8d 06 1f	               sta  f1bbutton
.12aa	a2 06		               ldx  #<f1bbutton
.12ac	a0 1f		               ldy  #>f1bbutton
.12ae	20 be 20	               jsr  putscxy
.12b1	20 db 11	               jsr  delay
.12b4	a9 12		               lda  #18
.12b6	8d 18 1f	               sta  f1bbutton+18
.12b9	68		               pla
.12ba	8d 06 1f	               sta  f1bbutton
.12bd	a2 06		               ldx  #<f1bbutton
.12bf	a0 1f		               ldy  #>f1bbutton
.12c1	20 be 20	               jsr  putscxy
.12c4	68		               pla
.12c5	aa		               tax
.12c6	68		               pla
.12c7	28		               plp
.12c8	20 44 19	               jsr  flipvert
.12cb	20 f7 0e	               jsr  drawbitmap
.12ce	68		out            pla
.12cf	20 26 21	               jsr  push
.12d2	a2 78		               ldx  #<blankmsg
.12d4	a0 19		               ldy  #>blankmsg
.12d6	20 be 20	               jsr  putscxy
.12d9	a2 a4		               ldx  #<prompt_msg
.12db	a0 19		               ldy  #>prompt_msg
.12dd	20 be 20	               jsr  putscxy
.12e0	20 65 21	               jsr  pop
.12e3	60		               rts
.12e4			f2action
.12e4	48		               pha
.12e5	a9 00		               lda  #$0
.12e7	8d 16 09	               sta  editmode
.12ea	ad 17 09	               lda  fkeyset
.12ed	d0 4d		               bne  menub
.12ef	20 26 21	               jsr  push
.12f2	a2 78		               ldx  #<blankmsg
.12f4	a0 19		               ldy  #>blankmsg
.12f6	20 be 20	               jsr  putscxy
.12f9	a2 e5		               ldx  #<f2a_msg
.12fb	a0 19		               ldy  #>f2a_msg
.12fd	20 be 20	               jsr  putscxy
.1300	20 65 21	               jsr  pop
.1303	08		               php
.1304	48		               pha
.1305	8a		               txa
.1306	48		               pha
.1307	ad 49 1e	               lda  f2abutton
.130a	48		               pha
.130b	a9 92		               lda  #146
.130d	8d 5b 1e	               sta  f2abutton+18
.1310	a9 01		               lda  #flashcol
.1312	8d 49 1e	               sta  f2abutton
.1315	a2 49		               ldx  #<f2abutton
.1317	a0 1e		               ldy  #>f2abutton
.1319	20 be 20	               jsr  putscxy
.131c	20 db 11	               jsr  delay
.131f	a9 12		               lda  #18
.1321	8d 5b 1e	               sta  f2abutton+18
.1324	68		               pla
.1325	8d 49 1e	               sta  f2abutton
.1328	a2 49		               ldx  #<f2abutton
.132a	a0 1e		               ldy  #>f2abutton
.132c	20 be 20	               jsr  putscxy
.132f	68		               pla
.1330	aa		               tax
.1331	68		               pla
.1332	28		               plp
.1333	20 b0 09	               jsr  copychar
.1336	20 f7 0e	               jsr  drawbitmap
.1339	4c 86 13	               jmp  out
.133c			menub
.133c	20 26 21	               jsr  push
.133f	a2 78		               ldx  #<blankmsg
.1341	a0 19		               ldy  #>blankmsg
.1343	20 be 20	               jsr  putscxy
.1346	a2 ce		               ldx  #<f2b_msg
.1348	a0 1a		               ldy  #>f2b_msg
.134a	20 be 20	               jsr  putscxy
.134d	20 65 21	               jsr  pop
.1350	08		               php
.1351	48		               pha
.1352	8a		               txa
.1353	48		               pha
.1354	ad 21 1f	               lda  f2bbutton
.1357	48		               pha
.1358	a9 92		               lda  #146
.135a	8d 33 1f	               sta  f2bbutton+18
.135d	a9 01		               lda  #flashcol
.135f	8d 21 1f	               sta  f2bbutton
.1362	a2 21		               ldx  #<f2bbutton
.1364	a0 1f		               ldy  #>f2bbutton
.1366	20 be 20	               jsr  putscxy
.1369	20 db 11	               jsr  delay
.136c	a9 12		               lda  #18
.136e	8d 33 1f	               sta  f2bbutton+18
.1371	68		               pla
.1372	8d 21 1f	               sta  f2bbutton
.1375	a2 21		               ldx  #<f2bbutton
.1377	a0 1f		               ldy  #>f2bbutton
.1379	20 be 20	               jsr  putscxy
.137c	68		               pla
.137d	aa		               tax
.137e	68		               pla
.137f	28		               plp
.1380	20 17 19	               jsr  fliphorz
.1383	20 f7 0e	               jsr  drawbitmap
.1386	68		out            pla
.1387	20 26 21	               jsr  push
.138a	a2 78		               ldx  #<blankmsg
.138c	a0 19		               ldy  #>blankmsg
.138e	20 be 20	               jsr  putscxy
.1391	a2 a4		               ldx  #<prompt_msg
.1393	a0 19		               ldy  #>prompt_msg
.1395	20 be 20	               jsr  putscxy
.1398	20 65 21	               jsr  pop
.139b	60		               rts
.139c			f3action
.139c	48		               pha
.139d	a9 00		               lda  #$0
.139f	8d 16 09	               sta  editmode
.13a2	ad 17 09	               lda  fkeyset
.13a5	d0 62		               bne  menub
.13a7	08		               php
.13a8	48		               pha
.13a9	8a		               txa
.13aa	48		               pha
.13ab	ad 64 1e	               lda  f3abutton
.13ae	48		               pha
.13af	a9 92		               lda  #146
.13b1	8d 76 1e	               sta  f3abutton+18
.13b4	a9 01		               lda  #flashcol
.13b6	8d 64 1e	               sta  f3abutton
.13b9	a2 64		               ldx  #<f3abutton
.13bb	a0 1e		               ldy  #>f3abutton
.13bd	20 be 20	               jsr  putscxy
.13c0	20 db 11	               jsr  delay
.13c3	a9 12		               lda  #18
.13c5	8d 76 1e	               sta  f3abutton+18
.13c8	68		               pla
.13c9	8d 64 1e	               sta  f3abutton
.13cc	a2 64		               ldx  #<f3abutton
.13ce	a0 1e		               ldy  #>f3abutton
.13d0	20 be 20	               jsr  putscxy
.13d3	68		               pla
.13d4	aa		               tax
.13d5	68		               pla
.13d6	28		               plp
.13d7	20 26 21	               jsr  push
.13da	a2 78		               ldx  #<blankmsg
.13dc	a0 19		               ldy  #>blankmsg
.13de	20 be 20	               jsr  putscxy
.13e1	a2 06		               ldx  #<f3a_msg
.13e3	a0 1a		               ldy  #>f3a_msg
.13e5	20 be 20	               jsr  putscxy
.13e8	20 65 21	               jsr  pop
.13eb	20 46 25	getagain       jsr  getkey
.13ee	c9 31		               cmp  #$31
.13f0	f0 0b		               beq  devok
.13f2	c9 38		               cmp  #$38
.13f4	f0 07		               beq  devok
.13f6	c9 39		               cmp  #$39
.13f8	f0 03		               beq  devok
.13fa	4c eb 13	               jmp  getagain
.13fd	8d 36 09	devok          sta  device
.1400	20 3e 09	               jsr  getfname
.1403	20 bf 08	               jsr  loadfromfile
.1406	4c 53 14	               jmp  out
.1409			menub
.1409	20 26 21	               jsr  push
.140c	a2 78		               ldx  #<blankmsg
.140e	a0 19		               ldy  #>blankmsg
.1410	20 be 20	               jsr  putscxy
.1413	a2 ec		               ldx  #<f3b_msg
.1415	a0 1a		               ldy  #>f3b_msg
.1417	20 be 20	               jsr  putscxy
.141a	20 65 21	               jsr  pop
.141d	08		               php
.141e	48		               pha
.141f	8a		               txa
.1420	48		               pha
.1421	ad 3c 1f	               lda  f3bbutton
.1424	48		               pha
.1425	a9 92		               lda  #146
.1427	8d 4e 1f	               sta  f3bbutton+18
.142a	a9 01		               lda  #flashcol
.142c	8d 3c 1f	               sta  f3bbutton
.142f	a2 3c		               ldx  #<f3bbutton
.1431	a0 1f		               ldy  #>f3bbutton
.1433	20 be 20	               jsr  putscxy
.1436	20 db 11	               jsr  delay
.1439	a9 12		               lda  #18
.143b	8d 4e 1f	               sta  f3bbutton+18
.143e	68		               pla
.143f	8d 3c 1f	               sta  f3bbutton
.1442	a2 3c		               ldx  #<f3bbutton
.1444	a0 1f		               ldy  #>f3bbutton
.1446	20 be 20	               jsr  putscxy
.1449	68		               pla
.144a	aa		               tax
.144b	68		               pla
.144c	28		               plp
.144d	20 a2 18	               jsr  scrollright
.1450	20 f7 0e	               jsr  drawbitmap
.1453	68		out            pla
.1454	20 26 21	               jsr  push
.1457	a2 78		               ldx  #<blankmsg
.1459	a0 19		               ldy  #>blankmsg
.145b	20 be 20	               jsr  putscxy
.145e	a2 a4		               ldx  #<prompt_msg
.1460	a0 19		               ldy  #>prompt_msg
.1462	20 be 20	               jsr  putscxy
.1465	20 65 21	               jsr  pop
.1468	60		               rts
.1469			f4action
.1469	48		               pha
.146a	a9 00		               lda  #$0
.146c	8d 16 09	               sta  editmode
.146f	ad 17 09	               lda  fkeyset
.1472	d0 5b		               bne  menub
.1474	08		               php
.1475	48		               pha
.1476	8a		               txa
.1477	48		               pha
.1478	ad 7f 1e	               lda  f4abutton
.147b	48		               pha
.147c	a9 92		               lda  #146
.147e	8d 91 1e	               sta  f4abutton+18
.1481	a9 01		               lda  #flashcol
.1483	8d 7f 1e	               sta  f4abutton
.1486	a2 7f		               ldx  #<f4abutton
.1488	a0 1e		               ldy  #>f4abutton
.148a	20 be 20	               jsr  putscxy
.148d	20 db 11	               jsr  delay
.1490	a9 12		               lda  #18
.1492	8d 91 1e	               sta  f4abutton+18
.1495	68		               pla
.1496	8d 7f 1e	               sta  f4abutton
.1499	a2 7f		               ldx  #<f4abutton
.149b	a0 1e		               ldy  #>f4abutton
.149d	20 be 20	               jsr  putscxy
.14a0	68		               pla
.14a1	aa		               tax
.14a2	68		               pla
.14a3	28		               plp
.14a4	20 26 21	               jsr  push
.14a7	a2 78		               ldx  #<blankmsg
.14a9	a0 19		               ldy  #>blankmsg
.14ab	20 be 20	               jsr  putscxy
.14ae	a2 33		               ldx  #<f4a_msg
.14b0	a0 1a		               ldy  #>f4a_msg
.14b2	20 be 20	               jsr  putscxy
.14b5	20 65 21	               jsr  pop
.14b8	20 46 25	getagain       jsr  getkey
.14bb	c9 43		               cmp  #$43
.14bd	f0 07		               beq  devok
.14bf	c9 44		               cmp  #$44
.14c1	f0 03		               beq  devok
.14c3	4c b8 14	               jmp  getagain
.14c6	8d 36 09	devok          sta  device
.14c9	20 3e 09	               jsr  getfname
.14cc	4c 19 15	               jmp  out
.14cf			menub
.14cf	20 26 21	               jsr  push
.14d2	a2 78		               ldx  #<blankmsg
.14d4	a0 19		               ldy  #>blankmsg
.14d6	20 be 20	               jsr  putscxy
.14d9	a2 08		               ldx  #<f4b_msg
.14db	a0 1b		               ldy  #>f4b_msg
.14dd	20 be 20	               jsr  putscxy
.14e0	20 65 21	               jsr  pop
.14e3	08		               php
.14e4	48		               pha
.14e5	8a		               txa
.14e6	48		               pha
.14e7	ad 57 1f	               lda  f4bbutton
.14ea	48		               pha
.14eb	a9 92		               lda  #146
.14ed	8d 69 1f	               sta  f4bbutton+18
.14f0	a9 01		               lda  #flashcol
.14f2	8d 57 1f	               sta  f4bbutton
.14f5	a2 57		               ldx  #<f4bbutton
.14f7	a0 1f		               ldy  #>f4bbutton
.14f9	20 be 20	               jsr  putscxy
.14fc	20 db 11	               jsr  delay
.14ff	a9 12		               lda  #18
.1501	8d 69 1f	               sta  f4bbutton+18
.1504	68		               pla
.1505	8d 57 1f	               sta  f4bbutton
.1508	a2 57		               ldx  #<f4bbutton
.150a	a0 1f		               ldy  #>f4bbutton
.150c	20 be 20	               jsr  putscxy
.150f	68		               pla
.1510	aa		               tax
.1511	68		               pla
.1512	28		               plp
.1513	20 c7 18	               jsr  scrollleft
.1516	20 f7 0e	               jsr  drawbitmap
.1519	68		out            pla
.151a	20 26 21	               jsr  push
.151d	a2 78		               ldx  #<blankmsg
.151f	a0 19		               ldy  #>blankmsg
.1521	20 be 20	               jsr  putscxy
.1524	a2 a4		               ldx  #<prompt_msg
.1526	a0 19		               ldy  #>prompt_msg
.1528	20 be 20	               jsr  putscxy
.152b	20 65 21	               jsr  pop
.152e	60		               rts
.152f			f5action
.152f	48		               pha
.1530	a9 00		               lda  #$0
.1532	8d 16 09	               sta  editmode
.1535	ad 17 09	               lda  fkeyset
.1538	d0 4d		               bne  menub
.153a	20 26 21	               jsr  push
.153d	a2 78		               ldx  #<blankmsg
.153f	a0 19		               ldy  #>blankmsg
.1541	20 be 20	               jsr  putscxy
.1544	a2 5b		               ldx  #<f5a_msg
.1546	a0 1a		               ldy  #>f5a_msg
.1548	20 be 20	               jsr  putscxy
.154b	20 65 21	               jsr  pop
.154e	08		               php
.154f	48		               pha
.1550	8a		               txa
.1551	48		               pha
.1552	ad 9a 1e	               lda  f5abutton
.1555	48		               pha
.1556	a9 92		               lda  #146
.1558	8d ac 1e	               sta  f5abutton+18
.155b	a9 01		               lda  #flashcol
.155d	8d 9a 1e	               sta  f5abutton
.1560	a2 9a		               ldx  #<f5abutton
.1562	a0 1e		               ldy  #>f5abutton
.1564	20 be 20	               jsr  putscxy
.1567	20 db 11	               jsr  delay
.156a	a9 12		               lda  #18
.156c	8d ac 1e	               sta  f5abutton+18
.156f	68		               pla
.1570	8d 9a 1e	               sta  f5abutton
.1573	a2 9a		               ldx  #<f5abutton
.1575	a0 1e		               ldy  #>f5abutton
.1577	20 be 20	               jsr  putscxy
.157a	68		               pla
.157b	aa		               tax
.157c	68		               pla
.157d	28		               plp
.157e	20 f5 18	               jsr  clearchar
.1581	20 f7 0e	               jsr  drawbitmap
.1584	4c d1 15	               jmp  out
.1587			menub
.1587	20 26 21	               jsr  push
.158a	a2 78		               ldx  #<blankmsg
.158c	a0 19		               ldy  #>blankmsg
.158e	20 be 20	               jsr  putscxy
.1591	a2 24		               ldx  #<f5b_msg
.1593	a0 1b		               ldy  #>f5b_msg
.1595	20 be 20	               jsr  putscxy
.1598	20 65 21	               jsr  pop
.159b	08		               php
.159c	48		               pha
.159d	8a		               txa
.159e	48		               pha
.159f	ad 72 1f	               lda  f5bbutton
.15a2	48		               pha
.15a3	a9 92		               lda  #146
.15a5	8d 84 1f	               sta  f5bbutton+18
.15a8	a9 01		               lda  #flashcol
.15aa	8d 72 1f	               sta  f5bbutton
.15ad	a2 72		               ldx  #<f5bbutton
.15af	a0 1f		               ldy  #>f5bbutton
.15b1	20 be 20	               jsr  putscxy
.15b4	20 db 11	               jsr  delay
.15b7	a9 12		               lda  #18
.15b9	8d 84 1f	               sta  f5bbutton+18
.15bc	68		               pla
.15bd	8d 72 1f	               sta  f5bbutton
.15c0	a2 72		               ldx  #<f5bbutton
.15c2	a0 1f		               ldy  #>f5bbutton
.15c4	20 be 20	               jsr  putscxy
.15c7	68		               pla
.15c8	aa		               tax
.15c9	68		               pla
.15ca	28		               plp
.15cb	20 30 18	               jsr  scrollup
.15ce	20 f7 0e	               jsr  drawbitmap
.15d1	68		out            pla
.15d2	20 26 21	               jsr  push
.15d5	a2 78		               ldx  #<blankmsg
.15d7	a0 19		               ldy  #>blankmsg
.15d9	20 be 20	               jsr  putscxy
.15dc	a2 a4		               ldx  #<prompt_msg
.15de	a0 19		               ldy  #>prompt_msg
.15e0	20 be 20	               jsr  putscxy
.15e3	20 65 21	               jsr  pop
.15e6	60		               rts
.15e7			f6action
.15e7	48		               pha
.15e8	a9 00		               lda  #$0
.15ea	8d 16 09	               sta  editmode
.15ed	ad 17 09	               lda  fkeyset
.15f0	d0 4d		               bne  menub
.15f2	20 26 21	               jsr  push
.15f5	a2 78		               ldx  #<blankmsg
.15f7	a0 19		               ldy  #>blankmsg
.15f9	20 be 20	               jsr  putscxy
.15fc	a2 77		               ldx  #<f6a_msg
.15fe	a0 1a		               ldy  #>f6a_msg
.1600	20 be 20	               jsr  putscxy
.1603	20 65 21	               jsr  pop
.1606	08		               php
.1607	48		               pha
.1608	8a		               txa
.1609	48		               pha
.160a	ad b5 1e	               lda  f6abutton
.160d	48		               pha
.160e	a9 92		               lda  #146
.1610	8d c7 1e	               sta  f6abutton+18
.1613	a9 01		               lda  #flashcol
.1615	8d b5 1e	               sta  f6abutton
.1618	a2 b5		               ldx  #<f6abutton
.161a	a0 1e		               ldy  #>f6abutton
.161c	20 be 20	               jsr  putscxy
.161f	20 db 11	               jsr  delay
.1622	a9 12		               lda  #18
.1624	8d c7 1e	               sta  f6abutton+18
.1627	68		               pla
.1628	8d b5 1e	               sta  f6abutton
.162b	a2 b5		               ldx  #<f6abutton
.162d	a0 1e		               ldy  #>f6abutton
.162f	20 be 20	               jsr  putscxy
.1632	68		               pla
.1633	aa		               tax
.1634	68		               pla
.1635	28		               plp
.1636	20 e9 18	               jsr  fillchar
.1639	20 f7 0e	               jsr  drawbitmap
.163c	4c 89 16	               jmp  out
.163f			menub
.163f	20 26 21	               jsr  push
.1642	a2 78		               ldx  #<blankmsg
.1644	a0 19		               ldy  #>blankmsg
.1646	20 be 20	               jsr  putscxy
.1649	a2 3e		               ldx  #<f6b_msg
.164b	a0 1b		               ldy  #>f6b_msg
.164d	20 be 20	               jsr  putscxy
.1650	20 65 21	               jsr  pop
.1653	08		               php
.1654	48		               pha
.1655	8a		               txa
.1656	48		               pha
.1657	ad 8d 1f	               lda  f6bbutton
.165a	48		               pha
.165b	a9 92		               lda  #146
.165d	8d 9f 1f	               sta  f6bbutton+18
.1660	a9 01		               lda  #flashcol
.1662	8d 8d 1f	               sta  f6bbutton
.1665	a2 8d		               ldx  #<f6bbutton
.1667	a0 1f		               ldy  #>f6bbutton
.1669	20 be 20	               jsr  putscxy
.166c	20 db 11	               jsr  delay
.166f	a9 12		               lda  #18
.1671	8d 9f 1f	               sta  f6bbutton+18
.1674	68		               pla
.1675	8d 8d 1f	               sta  f6bbutton
.1678	a2 8d		               ldx  #<f6bbutton
.167a	a0 1f		               ldy  #>f6bbutton
.167c	20 be 20	               jsr  putscxy
.167f	68		               pla
.1680	aa		               tax
.1681	68		               pla
.1682	28		               plp
.1683	20 68 18	               jsr  scrolldown
.1686	20 f7 0e	               jsr  drawbitmap
.1689	68		out            pla
.168a	20 26 21	               jsr  push
.168d	a2 78		               ldx  #<blankmsg
.168f	a0 19		               ldy  #>blankmsg
.1691	20 be 20	               jsr  putscxy
.1694	a2 a4		               ldx  #<prompt_msg
.1696	a0 19		               ldy  #>prompt_msg
.1698	20 be 20	               jsr  putscxy
.169b	20 65 21	               jsr  pop
.169e	60		               rts
.169f			f7action
.169f	48		               pha
.16a0	a9 00		               lda  #$0
.16a2	8d 16 09	               sta  editmode
.16a5	ad 17 09	               lda  fkeyset
.16a8	d0 4d		               bne  menub
.16aa	20 26 21	               jsr  push
.16ad	a2 78		               ldx  #<blankmsg
.16af	a0 19		               ldy  #>blankmsg
.16b1	20 be 20	               jsr  putscxy
.16b4	a2 94		               ldx  #<f7a_msg
.16b6	a0 1a		               ldy  #>f7a_msg
.16b8	20 be 20	               jsr  putscxy
.16bb	20 65 21	               jsr  pop
.16be	08		               php
.16bf	48		               pha
.16c0	8a		               txa
.16c1	48		               pha
.16c2	ad d0 1e	               lda  f7abutton
.16c5	48		               pha
.16c6	a9 92		               lda  #146
.16c8	8d e2 1e	               sta  f7abutton+18
.16cb	a9 01		               lda  #flashcol
.16cd	8d d0 1e	               sta  f7abutton
.16d0	a2 d0		               ldx  #<f7abutton
.16d2	a0 1e		               ldy  #>f7abutton
.16d4	20 be 20	               jsr  putscxy
.16d7	20 db 11	               jsr  delay
.16da	a9 12		               lda  #18
.16dc	8d e2 1e	               sta  f7abutton+18
.16df	68		               pla
.16e0	8d d0 1e	               sta  f7abutton
.16e3	a2 d0		               ldx  #<f7abutton
.16e5	a0 1e		               ldy  #>f7abutton
.16e7	20 be 20	               jsr  putscxy
.16ea	68		               pla
.16eb	aa		               tax
.16ec	68		               pla
.16ed	28		               plp
.16ee	20 ca 0f	               jsr  copycharset
.16f1	20 f7 0e	               jsr  drawbitmap
.16f4	4c 46 17	               jmp  out
.16f7	a9 00		menub          lda  #$0
.16f9	8d 16 09	               sta  editmode
.16fc	20 26 21	               jsr  push
.16ff	a2 78		               ldx  #<blankmsg
.1701	a0 19		               ldy  #>blankmsg
.1703	20 be 20	               jsr  putscxy
.1706	a2 57		               ldx  #<f7b_msg
.1708	a0 1b		               ldy  #>f7b_msg
.170a	20 be 20	               jsr  putscxy
.170d	20 65 21	               jsr  pop
.1710	08		               php
.1711	48		               pha
.1712	8a		               txa
.1713	48		               pha
.1714	ad a8 1f	               lda  f7bbutton
.1717	48		               pha
.1718	a9 92		               lda  #146
.171a	8d ba 1f	               sta  f7bbutton+18
.171d	a9 01		               lda  #flashcol
.171f	8d a8 1f	               sta  f7bbutton
.1722	a2 a8		               ldx  #<f7bbutton
.1724	a0 1f		               ldy  #>f7bbutton
.1726	20 be 20	               jsr  putscxy
.1729	20 db 11	               jsr  delay
.172c	a9 12		               lda  #18
.172e	8d ba 1f	               sta  f7bbutton+18
.1731	68		               pla
.1732	8d a8 1f	               sta  f7bbutton
.1735	a2 a8		               ldx  #<f7bbutton
.1737	a0 1f		               ldy  #>f7bbutton
.1739	20 be 20	               jsr  putscxy
.173c	68		               pla
.173d	aa		               tax
.173e	68		               pla
.173f	28		               plp
.1740	20 10 18	               jsr  reverse
.1743	20 f7 0e	               jsr  drawbitmap
.1746	68		out            pla
.1747	20 26 21	               jsr  push
.174a	a2 78		               ldx  #<blankmsg
.174c	a0 19		               ldy  #>blankmsg
.174e	20 be 20	               jsr  putscxy
.1751	a2 a4		               ldx  #<prompt_msg
.1753	a0 19		               ldy  #>prompt_msg
.1755	20 be 20	               jsr  putscxy
.1758	20 65 21	               jsr  pop
.175b	60		               rts
.175c			f8action
.175c	48		               pha
.175d	a9 00		               lda  #$0
.175f	8d 16 09	               sta  editmode
.1762	ad 17 09	               lda  fkeyset
.1765	d0 47		               bne  menub
.1767	20 26 21	               jsr  push
.176a	a2 78		               ldx  #<blankmsg
.176c	a0 19		               ldy  #>blankmsg
.176e	20 be 20	               jsr  putscxy
.1771	a2 93		               ldx  #<menub_msg
.1773	a0 1b		               ldy  #>menub_msg
.1775	20 be 20	               jsr  putscxy
.1778	20 65 21	               jsr  pop
.177b	08		               php
.177c	48		               pha
.177d	8a		               txa
.177e	48		               pha
.177f	ad eb 1e	               lda  f8abutton
.1782	48		               pha
.1783	a9 92		               lda  #146
.1785	8d fd 1e	               sta  f8abutton+18
.1788	a9 01		               lda  #flashcol
.178a	8d eb 1e	               sta  f8abutton
.178d	a2 eb		               ldx  #<f8abutton
.178f	a0 1e		               ldy  #>f8abutton
.1791	20 be 20	               jsr  putscxy
.1794	20 db 11	               jsr  delay
.1797	a9 12		               lda  #18
.1799	8d fd 1e	               sta  f8abutton+18
.179c	68		               pla
.179d	8d eb 1e	               sta  f8abutton
.17a0	a2 eb		               ldx  #<f8abutton
.17a2	a0 1e		               ldy  #>f8abutton
.17a4	20 be 20	               jsr  putscxy
.17a7	68		               pla
.17a8	aa		               tax
.17a9	68		               pla
.17aa	28		               plp
.17ab	4c f2 17	               jmp  swapit
.17ae			menub
.17ae	20 26 21	               jsr  push
.17b1	a2 78		               ldx  #<blankmsg
.17b3	a0 19		               ldy  #>blankmsg
.17b5	20 be 20	               jsr  putscxy
.17b8	a2 6e		               ldx  #<menua_msg
.17ba	a0 1b		               ldy  #>menua_msg
.17bc	20 be 20	               jsr  putscxy
.17bf	20 65 21	               jsr  pop
.17c2	08		               php
.17c3	48		               pha
.17c4	8a		               txa
.17c5	48		               pha
.17c6	ad c3 1f	               lda  f8bbutton
.17c9	48		               pha
.17ca	a9 92		               lda  #146
.17cc	8d d5 1f	               sta  f8bbutton+18
.17cf	a9 01		               lda  #flashcol
.17d1	8d c3 1f	               sta  f8bbutton
.17d4	a2 c3		               ldx  #<f8bbutton
.17d6	a0 1f		               ldy  #>f8bbutton
.17d8	20 be 20	               jsr  putscxy
.17db	20 db 11	               jsr  delay
.17de	a9 12		               lda  #18
.17e0	8d d5 1f	               sta  f8bbutton+18
.17e3	68		               pla
.17e4	8d c3 1f	               sta  f8bbutton
.17e7	a2 c3		               ldx  #<f8bbutton
.17e9	a0 1f		               ldy  #>f8bbutton
.17eb	20 be 20	               jsr  putscxy
.17ee	68		               pla
.17ef	aa		               tax
.17f0	68		               pla
.17f1	28		               plp
.17f2	49 ff		swapit         eor  #$ff
.17f4	8d 17 09	               sta  fkeyset
.17f7	20 61 10	               jsr  drawfkeys
.17fa	68		               pla
.17fb	20 26 21	               jsr  push
.17fe	a2 78		               ldx  #<blankmsg
.1800	a0 19		               ldy  #>blankmsg
.1802	20 be 20	               jsr  putscxy
.1805	a2 a4		               ldx  #<prompt_msg
.1807	a0 19		               ldy  #>prompt_msg
.1809	20 be 20	               jsr  putscxy
.180c	20 65 21	               jsr  pop
.180f	60		               rts
.1810			reverse
.1810	20 26 21	               jsr  push
.1813	48		               pha
.1814	ad 1c 09	               lda  mapaddr
.1817	85 fd		               sta  $fd
.1819	ad 1d 09	               lda  mapaddr+1
.181c	85 fe		               sta  $fe
.181e	68		               pla
.181f	a0 00		               ldy  #$00
.1821	b1 fd		again          lda  (zpage2),y
.1823	49 ff		               eor  #$ff
.1825	91 fd		               sta  (zpage2),y
.1827	c8		               iny
.1828	c0 08		               cpy  #$08
.182a	d0 f5		               bne  again
.182c	20 65 21	               jsr  pop
.182f	60		               rts
.1830			scrollup
.1830	20 26 21	               jsr  push
.1833	48		               pha
.1834	ad 1c 09	               lda  mapaddr
.1837	85 fb		               sta  $fb
.1839	ad 1d 09	               lda  mapaddr+1
.183c	85 fc		               sta  $fc
.183e	68		               pla
.183f	48		               pha
.1840	ad 1c 09	               lda  mapaddr
.1843	85 fd		               sta  $fd
.1845	ad 1d 09	               lda  mapaddr+1
.1848	85 fe		               sta  $fe
.184a	68		               pla
.184b	20 45 22	               jsr  inczp2
.184e	a0 00		               ldy  #$00
.1850	b1 fb		               lda  (zpage1),y
.1852	8d 67 18	               sta  tmpbyte
.1855	b1 fd		again          lda  (zpage2),y
.1857	91 fb		               sta  (zpage1),y
.1859	c8		               iny
.185a	c0 07		               cpy  #$07
.185c	d0 f7		               bne  again
.185e	ad 67 18	               lda  tmpbyte
.1861	91 fb		               sta  (zpage1),y
.1863	20 65 21	               jsr  pop
.1866	60		               rts
>1867	00		tmpbyte        .byte     $00
.1868			scrolldown
.1868	20 26 21	               jsr  push
.186b	48		               pha
.186c	ad 1c 09	               lda  mapaddr
.186f	85 fb		               sta  $fb
.1871	ad 1d 09	               lda  mapaddr+1
.1874	85 fc		               sta  $fc
.1876	68		               pla
.1877	48		               pha
.1878	ad 1c 09	               lda  mapaddr
.187b	85 fd		               sta  $fd
.187d	ad 1d 09	               lda  mapaddr+1
.1880	85 fe		               sta  $fe
.1882	68		               pla
.1883	20 45 22	               jsr  inczp2
.1886	a0 07		               ldy  #$07                ;xxxxxxxx zpage1
.1888	b1 fb		               lda  (zpage1),y          ;xxxxxxxx zpage2
.188a	8d a1 18	               sta  tmpbyte             ;xxxxxxxx
.188d	88		again          dey                      ;xxxxxxxx
.188e	b1 fb		               lda  (zpage1),y          ;xxxxxxxx
.1890	91 fd		               sta  (zpage2),y          ;xxxxxxxx
.1892	c0 00		               cpy  #$00                ;xxxxxxxx
.1894	d0 f7		               bne  again               ;xxxxxxxx
.1896	a0 00		               ldy  #$00
.1898	ad a1 18	               lda  tmpbyte
.189b	91 fb		               sta  (zpage1),y
.189d	20 65 21	               jsr  pop
.18a0	60		               rts
>18a1	00		tmpbyte        .byte     $00
.18a2			scrollright
.18a2	20 26 21	               jsr  push
.18a5	48		               pha
.18a6	ad 1c 09	               lda  mapaddr
.18a9	85 fb		               sta  $fb
.18ab	ad 1d 09	               lda  mapaddr+1
.18ae	85 fc		               sta  $fc
.18b0	68		               pla
.18b1	a0 00		               ldy  #$00
.18b3	b1 fb		again          lda  (zpage1),y
.18b5	18		               clc
.18b6	6a		               ror
.18b7	90 03		               bcc  zero
.18b9	18		               clc
.18ba	69 80		one            adc  #$80
.18bc	91 fb		zero           sta  (zpage1),y
.18be	c8		               iny
.18bf	c0 08		               cpy  #$08
.18c1	d0 f0		               bne  again
.18c3	20 65 21	               jsr  pop
.18c6	60		               rts
.18c7			scrollleft
.18c7	20 26 21	               jsr  push
.18ca	48		               pha
.18cb	ad 1c 09	               lda  mapaddr
.18ce	85 fb		               sta  $fb
.18d0	ad 1d 09	               lda  mapaddr+1
.18d3	85 fc		               sta  $fc
.18d5	68		               pla
.18d6	a0 00		               ldy  #$00
.18d8	b1 fb		again          lda  (zpage1),y
.18da	18		               clc
.18db	2a		               rol
.18dc	69 00		               adc  #$00
.18de	91 fb		               sta  (zpage1),y
.18e0	c8		               iny
.18e1	c0 08		               cpy  #$08
.18e3	d0 f3		               bne  again
.18e5	20 65 21	               jsr  pop
.18e8	60		               rts
.18e9			fillchar
.18e9	20 26 21	               jsr  push
.18ec	a9 ff		               lda  #$ff
.18ee	20 01 19	               jsr  allsame
.18f1	20 65 21	               jsr  pop
.18f4	60		               rts
.18f5			clearchar
.18f5	20 26 21	               jsr  push
.18f8	a9 00		               lda  #$00
.18fa	20 01 19	               jsr  allsame
.18fd	20 65 21	               jsr  pop
.1900	60		               rts
.1901			allsame
.1901	48		               pha
.1902	ad 1c 09	               lda  mapaddr
.1905	85 fd		               sta  $fd
.1907	ad 1d 09	               lda  mapaddr+1
.190a	85 fe		               sta  $fe
.190c	68		               pla
.190d	a0 00		               ldy  #$00
.190f	91 fd		again          sta  (zpage2),y
.1911	c8		               iny
.1912	c0 08		               cpy  #$08
.1914	d0 f9		               bne  again
.1916	60		               rts
.1917			fliphorz
.1917	20 26 21	               jsr  push
.191a	48		               pha
.191b	ad 1c 09	               lda  mapaddr
.191e	85 fd		               sta  $fd
.1920	ad 1d 09	               lda  mapaddr+1
.1923	85 fe		               sta  $fe
.1925	68		               pla
.1926	a0 00		               ldy  #$00
.1928	b1 fd		nextbyte       lda  (zpage2),y
.192a	a2 00		               ldx  #$00
.192c	2a		rolagain       rol
.192d	6e 43 19	               ror  tmpbyte
.1930	e8		               inx
.1931	e0 08		               cpx  #$08
.1933	30 f7		               bmi  rolagain
.1935	ad 43 19	               lda  tmpbyte
.1938	91 fd		               sta  (zpage2),y
.193a	c8		               iny
.193b	c0 08		               cpy  #$08
.193d	30 e9		               bmi  nextbyte
.193f	20 65 21	               jsr  pop
.1942	60		               rts
>1943	00		tmpbyte        .byte     $00
.1944			flipvert
.1944	20 26 21	               jsr  push
.1947	48		               pha
.1948	ad 1c 09	               lda  mapaddr
.194b	85 fd		               sta  $fd
.194d	ad 1d 09	               lda  mapaddr+1
.1950	85 fe		               sta  $fe
.1952	68		               pla
.1953	a0 00		               ldy  #$00
.1955	b1 fd		tostack        lda  (zpage2),y
.1957	48		               pha
.1958	c8		               iny
.1959	c0 08		               cpy  #$08
.195b	d0 f8		               bne  tostack
.195d	a0 00		               ldy  #$00
.195f	68		fromstack      pla
.1960	91 fd		               sta  (zpage2),y
.1962	c8		               iny
.1963	c0 08		               cpy  #$08
.1965	d0 f8		               bne  fromstack
.1967	20 65 21	               jsr  pop
.196a	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: messages_fr.asm

>196b	0a 01 05	editor_msg     .byte vrose,1,5
>196e	5b 45 44 49	               .null     "[editeur]"
>1972	54 45 55 52 5d 00
>1978	03 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>197c	20 20 20 20	               .null     "                                       "
>1980	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1990	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>19a0	20 20 20 00
>19a4	03 00 05 92	prompt_msg     .byte     mesgcol,0,5,146
>19a8	20 55 54 49	               .null     " utilisez les clefs de fonction :"
>19ac	4c 49 53 45 5a 20 4c 45 53 20 43 4c 45 46 53 20
>19bc	44 45 20 46 4f 4e 43 54 49 4f 4e 20 3a 00
.19ca			f1a_msg
>19ca	03 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>19ce	20 4d 4f 44	               .null     " mode edit: chr$(   )",146
>19d2	45 20 45 44 49 54 3a 20 43 48 52 24 28 20 20 20
>19e2	29 92 00
.19e5			f2a_msg
>19e5	03 00 05	copy_msg       .byte     mesgcol,0,5
>19e8	20 45 4e 54	               .null     " entez le character a copier:"
>19ec	45 5a 20 4c 45 20 43 48 41 52 41 43 54 45 52 20
>19fc	41 20 43 4f 50 49 45 52 3a 00
.1a06			f3a_msg
>1a06	03 00 05 92	save_msg       .byte     mesgcol,0,5,146
>1a0a	20 53 41 55	               .null     " sauvegarder sur quel lecteur? (1/8/9): "
>1a0e	56 45 47 41 52 44 45 52 20 53 55 52 20 51 55 45
>1a1e	4c 20 4c 45 43 54 45 55 52 3f 20 28 31 2f 38 2f
>1a2e	39 29 3a 20 00
.1a33			f4a_msg
>1a33	03 00 05 92	load_msg       .byte     mesgcol,0,5,146
>1a37	20 43 48 41	               .null     " charger de quel lecteur? (1,8,9): "
>1a3b	52 47 45 52 20 44 45 20 51 55 45 4c 20 4c 45 43
>1a4b	54 45 55 52 3f 20 28 31 2c 38 2c 39 29 3a 20 00
.1a5b			f5a_msg
>1a5b	03 00 05	clear_msg      .byte     mesgcol,0,5
>1a5e	20 45 46 46	               .null     " effacer char: chr$(   )"
>1a62	41 43 45 52 20 43 48 41 52 3a 20 43 48 52 24 28
>1a72	20 20 20 29 00
.1a77			f6a_msg
>1a77	03 00 05	fill_msg       .byte     mesgcol,0,5
>1a7a	20 52 45 4d	               .null     " remplir char:  chr$(   )"
>1a7e	50 4c 49 52 20 43 48 41 52 3a 20 20 43 48 52 24
>1a8e	28 20 20 20 29 00
.1a94			f7a_msg
>1a94	03 00 05	work_msg       .byte     mesgcol,0,5
>1a97	20 52 45 43	               .null     " recuperer les caracteres."
>1a9b	55 50 45 52 45 52 20 4c 45 53 20 43 41 52 41 43
>1aab	54 45 52 45 53 2e 00
.1ab2			f1b_msg
>1ab2	03 00 05	invr_msg       .byte     mesgcol,0,5
>1ab5	20 42 41 53	               .null     " basculer verticalement:"
>1ab9	43 55 4c 45 52 20 56 45 52 54 49 43 41 4c 45 4d
>1ac9	45 4e 54 3a 00
.1ace			f2b_msg
>1ace	03 00 05	flip_msg       .byte     mesgcol,0,5
>1ad1	20 42 41 53	               .null     " basculer horizontalement:"
>1ad5	43 55 4c 45 52 20 48 4f 52 49 5a 4f 4e 54 41 4c
>1ae5	45 4d 45 4e 54 3a 00
.1aec			f3b_msg
>1aec	03 00 05	scrollr_msg    .byte     mesgcol,0,5
>1aef	20 44 45 46	               .null     " defiler vers la droite:"
>1af3	49 4c 45 52 20 56 45 52 53 20 4c 41 20 44 52 4f
>1b03	49 54 45 3a 00
.1b08			f4b_msg
>1b08	03 00 05	scrolll_msg    .byte     mesgcol,0,5
>1b0b	20 44 45 46	               .null     " defiler vers la gauche:"
>1b0f	49 4c 45 52 20 56 45 52 53 20 4c 41 20 47 41 55
>1b1f	43 48 45 3a 00
.1b24			f5b_msg
>1b24	03 00 05	scrollu_msg    .byte     mesgcol,0,5
>1b27	20 44 45 46	               .null     " defiler vers le haut:"
>1b2b	49 4c 45 52 20 56 45 52 53 20 4c 45 20 48 41 55
>1b3b	54 3a 00
.1b3e			f6b_msg
>1b3e	03 00 05	scrolld_msg    .byte     mesgcol,0,5
>1b41	20 44 45 46	               .null     " defiler vers le bas:"
>1b45	49 4c 45 52 20 56 45 52 53 20 4c 45 20 42 41 53
>1b55	3a 00
.1b57			f7b_msg
>1b57	03 00 05	rvrs_msg       .byte     mesgcol,0,5
>1b5a	20 52 45 56	               .null     " reverse character:"
>1b5e	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
>1b6e	03 00 05	menua_msg      .byte     mesgcol,0,5
>1b71	20 56 4f 55	               .null     " vous etes dirige vers le menu 1."
>1b75	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1b85	52 53 20 4c 45 20 4d 45 4e 55 20 31 2e 00
>1b93	03 00 05	menub_msg      .byte     mesgcol,0,5
>1b96	20 56 4f 55	               .null     " vous etes dirige vers le menu 2."
>1b9a	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1baa	52 53 20 4c 45 20 4d 45 4e 55 20 32 2e 00
>1bb8	07 00 05	copychar_msg   .byte     vjaune,0,5
>1bbb	20 45 4e 54	               .null     " entrez le caractera a copier (?).",157,157,157
>1bbf	52 45 5a 20 4c 45 20 43 41 52 41 43 54 45 52 41
>1bcf	20 41 20 43 4f 50 49 45 52 20 28 3f 29 2e 9d 9d
>1bdf	9d 00
>1be1	07 00 05	fname_msg      .byte     vjaune,0,5
>1be4	20 4e 4f 4d	               .null     " nom du fichier (6 lettres): ",$a4,$a4,$a4,$a4,$a4,$a4,".chr",157,157,157,157,157,157,157,157,157,157
>1be8	20 44 55 20 46 49 43 48 49 45 52 20 28 36 20 4c
>1bf8	45 54 54 52 45 53 29 3a 20 a4 a4 a4 a4 a4 a4 2e
>1c08	43 48 52 9d 9d 9d 9d 9d 9d 9d 9d 9d 9d 00
>1c16	0e 15 18 12	quit_msg       .byte     vblue1,21,24,18
>1c1a	43 54 52 4c	               .text     "ctrl-x",146
>1c1e	2d 58 92
>1c21	2d 51 55 49	               .null     "-quitter."
>1c25	54 54 45 52 2e 00
.1c2b			menu_msg
>1c2b	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>1c2f	43 54 52 4c	               .text     "ctrl-x",146
>1c33	2d 58 92
>1c36	20 41 55 20	               .null     " au menu."
>1c3a	4d 45 4e 55 2e 00
>1c40	07 04 06 12	whoami0        .byte     whoamicol,4,6,18
>1c44	20 20 20 20	               .null     "                               ",146
>1c48	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1c58	20 20 20 20 20 20 20 20 20 20 20 92 00
>1c65	07 04 07 12	whoami1        .byte     whoamicol,4,7,18
>1c69	20 20 20 20	               .null     "       ",146," c h a r e d i t ",18,"       ",146
>1c6d	20 20 20 92 20 43 20 48 20 41 20 52 20 45 20 44
>1c7d	20 49 20 54 20 12 20 20 20 20 20 20 20 92 00
>1c8c	07 04 08 12	whoami2        .byte     whoamicol,4,8,18
>1c90	20 20 20 20	               .null     "                               ",146
>1c94	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1ca4	20 20 20 20 20 20 20 20 20 20 20 92 00
>1cb1	07 04 09 12	whoami3        .byte     whoamicol,4,9,18
>1cb5	20 20 20 20	               .null     "    inspire de john heilborn   ",146
>1cb9	49 4e 53 50 49 52 45 20 44 45 20 4a 4f 48 4e 20
>1cc9	48 45 49 4c 42 4f 52 4e 20 20 20 92 00
>1cd6	07 04 0a 12	whoami4        .byte     whoamicol,4,10,18
>1cda	20 20 20 20	               .null     "      isbn: 0-942386-29-9      ",146
>1cde	20 20 49 53 42 4e 3a 20 30 2d 39 34 32 33 38 36
>1cee	2d 32 39 2d 39 20 20 20 20 20 20 92 00
>1cfb	07 04 0b 12	whoami5        .byte     whoamicol,4,11,18
>1cff	20 20 20 20	               .null     "                               ",146
>1d03	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1d13	20 20 20 20 20 20 20 20 20 20 20 92 00
>1d20	07 04 0c 12	whoami6        .byte     whoamicol,4,12,18
>1d24	20 20 20 20	               .null     "     code en assembleur par    ",146
>1d28	20 43 4f 44 45 20 45 4e 20 41 53 53 45 4d 42 4c
>1d38	45 55 52 20 50 41 52 20 20 20 20 92 00
>1d45	07 04 0d 12	whoami7        .byte     whoamicol,4,13,18
>1d49	20 44 41 4e	               .null     " daniel lafrance quebec/canada ",146
>1d4d	49 45 4c 20 4c 41 46 52 41 4e 43 45 20 51 55 45
>1d5d	42 45 43 2f 43 41 4e 41 44 41 20 92 00
>1d6a	07 04 0e 12	whoami8        .byte     whoamicol,4,14,18
>1d6e	20 20 20 20	               .null     "    version:",version,"    ",146
>1d72	56 45 52 53 49 4f 4e 3a 32 30 32 33 31 31 31 36
>1d82	2d 31 30 30 34 30 30 20 20 20 20 92 00
>1d8f	07 04 0f 12	whoami9        .byte     whoamicol,4,15,18
>1d93	20 20 20 20	               .null     "                               ",146
>1d97	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1da7	20 20 20 20 20 20 20 20 20 20 20 92 00
>1db4	03 06 10 14	bye_msg        .byte     vcyan,6,16,20
>1db8	20 20 20 20	               .null     "      bonjour et merci      ",146
>1dbc	20 20 42 4f 4e 4a 4f 55 52 20 45 54 20 4d 45 52
>1dcc	43 49 20 20 20 20 20 20 92 00
>1dd6	0d 05 18 12	any_msg        .byte     vvert1,5,24,18
>1dda	20 41 50 50	               .null     " appuyez une cle pour basic ",146
>1dde	55 59 45 5a 20 55 4e 45 20 43 4c 45 20 50 4f 55
>1dee	52 20 42 41 53 49 43 20 92 00
>1df8	03 12 07	titremenu1     .byte     menu1col1,fkeyleft,f1top-2       ;133
>1dfb	12 20 4a 45	               .null     18," jeu de fonctions #1 ",146
>1dff	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>1e0f	31 20 92 00
>1e13	0f 12 07	titremenu2     .byte     menu2col1,fkeyleft,f1top-2       ;133
>1e16	12 20 4a 45	               .null     18," jeu de fonctions #2 ",146
>1e1a	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>1e2a	32 20 92 00
>1e2e	03 12 09	f1abutton      .byte     menu1col1,fkeyleft,f1top       ;133
>1e31	45 44 49 54	               .text     "editer carac..."
>1e35	45 52 20 43 41 52 41 43 2e 2e 2e
>1e40	12		               .byte     18             ; position 15
>1e41	a9 20 46 31	               .null     $a9," f1 ",223,146
>1e45	20 df 92 00
>1e49	0e 12 0a	f2abutton      .byte     menu1col2,fkeyleft,f1top+1     ;138
>1e4c	43 4f 50 49	               .text     "copier un carac"
>1e50	45 52 20 55 4e 20 43 41 52 41 43
>1e5b	12		               .byte     18   ; position 15
>1e5c	20 20 46 32	               .null     "  f2  ",146
>1e60	20 20 92 00
>1e64	03 12 0c	f3abutton      .byte     menu1col1,fkeyleft,f1top+3     ;137
>1e67	53 41 56 45	               .text     "savegarder sur."
>1e6b	47 41 52 44 45 52 20 53 55 52 2e
>1e76	12		               .byte     18            ; position 15
>1e77	a9 20 46 33	               .null     $a9," f3 ",223,146
>1e7b	20 df 92 00
>1e7f	0e 12 0d	f4abutton      .byte     menu1col2,fkeyleft,f1top+4     ;134
>1e82	43 48 41 52	               .text     "charger de....."
>1e86	47 45 52 20 44 45 2e 2e 2e 2e 2e
>1e91	12		               .byte     18             ; position 15
>1e92	20 20 46 34	               .null     "  f4  ",146
>1e96	20 20 92 00
>1e9a	03 12 0f	f5abutton      .byte     menu1col1,fkeyleft,f1top+6     ;135
>1e9d	4d 45 54 54	               .text     "mettre tout a 0"
>1ea1	52 45 20 54 4f 55 54 20 41 20 30
>1eac	12		               .byte     18             ; position 15
>1ead	a9 20 46 35	               .null     $a9," f5 ",223,146
>1eb1	20 df 92 00
>1eb5	0e 12 10	f6abutton      .byte     menu1col2,fkeyleft,f1top+7    ;139
>1eb8	4d 45 54 54	               .text     "mettre tout a 1"
>1ebc	52 45 20 54 4f 55 54 20 41 20 31
>1ec7	12		               .byte     18             ; position 15
>1ec8	20 20 46 36	               .null     "  f6  ",146
>1ecc	20 20 92 00
>1ed0	03 12 12	f7abutton      .byte     menu1col1,fkeyleft,f1top+9    ;136
>1ed3	52 45 43 55	               .text     "recuperer rom.."
>1ed7	50 45 52 45 52 20 52 4f 4d 2e 2e
>1ee2	12		               .byte     18             ; position 15
>1ee3	a9 20 46 37	               .null     $a9," f7 ",223,146
>1ee7	20 df 92 00
>1eeb	0e 12 13	f8abutton      .byte     menu1col2,fkeyleft,f1top+10
>1eee	41 4c 4c 45	               .text     "aller au menu2."
>1ef2	52 20 41 55 20 4d 45 4e 55 32 2e
>1efd	12		               .byte     18             ; position 15
>1efe	20 20 46 38	               .null     "  f8  ", 146
>1f02	20 20 92 00
>1f06	0f 12 09	f1bbutton      .byte     menu2col1,fkeyleft,f1top
>1f09	42 41 53 43	               .text     "basculer vert.."
>1f0d	55 4c 45 52 20 56 45 52 54 2e 2e
>1f18	12		               .byte     18             ; position 15
>1f19	a9 20 46 31	               .null     $a9," f1 ",223,146
>1f1d	20 df 92 00
>1f21	0c 12 0a	f2bbutton      .byte     menu2col2,fkeyleft,f1top+1
>1f24	42 41 53 43	               .text     "basculer horz.."
>1f28	55 4c 45 52 20 48 4f 52 5a 2e 2e
>1f33	12		               .byte     18             ; position 15
>1f34	20 20 46 32	               .null     "  f2  ",146
>1f38	20 20 92 00
>1f3c	0f 12 0c	f3bbutton      .byte     menu2col1,fkeyleft,f1top+3
>1f3f	44 45 46 49	               .text     "defiler droite."
>1f43	4c 45 52 20 44 52 4f 49 54 45 2e
>1f4e	12		               .byte     18             ; position 15
>1f4f	a9 20 46 33	               .null     $a9," f3 ",223,146
>1f53	20 df 92 00
>1f57	0c 12 0d	f4bbutton      .byte     menu2col2,fkeyleft,f1top+4
>1f5a	44 45 46 49	               .text     "defiler gauche."
>1f5e	4c 45 52 20 47 41 55 43 48 45 2e
>1f69	12		               .byte     18             ; position 15
>1f6a	20 20 46 34	               .null     "  f4  ",146
>1f6e	20 20 92 00
>1f72	0f 12 0f	f5bbutton      .byte     menu2col1,fkeyleft,f1top+6
>1f75	44 45 46 49	               .text     "defiler haut..."
>1f79	4c 45 52 20 48 41 55 54 2e 2e 2e
>1f84	12		               .byte     18             ; position 15
>1f85	a9 20 46 35	               .null     $a9," f5 ",223,146
>1f89	20 df 92 00
>1f8d	0c 12 10	f6bbutton      .byte     menu2col2,fkeyleft,f1top+7
>1f90	44 45 46 49	               .text     "defiler bas...."
>1f94	4c 45 52 20 42 41 53 2e 2e 2e 2e
>1f9f	12		               .byte     18             ; position 15
>1fa0	20 20 46 36	               .null     "  f6  ",146
>1fa4	20 20 92 00
>1fa8	0f 12 12	f7bbutton      .byte     menu2col1,fkeyleft,f1top+9
>1fab	49 4e 56 45	               .text     "inverser bits.."
>1faf	52 53 45 52 20 42 49 54 53 2e 2e
>1fba	12		               .byte     18             ; position 15
>1fbb	a9 20 46 37	               .null     $a9," f7 ",223,146
>1fbf	20 df 92 00
>1fc3	0c 12 13	f8bbutton      .byte     menu2col2,fkeyleft,f1top+10
>1fc6	41 4c 4c 45	               .text     "aller au menu1."
>1fca	52 20 41 55 20 4d 45 4e 55 31 2e
>1fd5	12		               .byte     18             ; position 15
>1fd6	20 20 46 38	               .null     "  f8  ", 146
>1fda	20 20 92 00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.1fde			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.1fde			screendis
.1fde	08		               php
.1fdf	48		               pha
.1fe0	ad 11 d0	               lda  $d011
.1fe3	29 ef		               and  #%11101111
.1fe5	8d 11 d0	               sta  $d011
.1fe8	68		               pla
.1fe9	28		               plp
.1fea	60		               rts
.1feb			screenena
.1feb	08		               php
.1fec	48		               pha
.1fed	ad 11 d0	               lda  $d011
.1ff0	09 10		               ora  #%00010000
.1ff2	8d 11 d0	               sta  $d011
.1ff5	68		               pla
.1ff6	28		               plp
.1ff7	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.1ff8			scrmaninit
.1ff8	20 26 21	               jsr  push
.1ffb	a9 06		               lda  #vbleu
.1ffd	8d 21 d0	               sta  vicbackcol
.2000	a9 05		               lda  #vvert
.2002	8d 20 d0	               sta  vicbordcol
.2005	a9 01		               lda  #vblanc
.2007	8d 86 02	               sta  bascol
.200a	ad 00 04	               lda  scrnram
.200d	8d 00 04	               sta  scrnram
.2010	20 18 20	               jsr  cls
.2013	20 65 21	               jsr  pop
.2016	60		               rts
>2017	8e		characterset   .byte b_uppercase
.2018			cls
.2018	08		               php
.2019	48		               pha
.201a	a9 93		               lda  #$93
.201c	20 2f 20	               jsr  putch
.201f	68		               pla
.2020	28		               plp
.2021	60		               rts
.2022			putnch
.2022	08		               php
.2023	e0 00		               cpx  #$00
.2025	f0 06		               beq  out
.2027	20 d2 ff	again          jsr  $ffd2
.202a	ca		               dex
.202b	d0 fa		               bne  again
.202d	28		out            plp
.202e	60		               rts
.202f			putch
.202f	08		               php
.2030	20 d2 ff	               jsr  $ffd2
.2033	28		               plp
.2034	60		               rts
.2035			puts
.2035	20 26 21	               jsr  push
.2038	86 fb		               stx  zpage1
.203a	84 fc		               sty  zpage1+1
.203c	a0 00		               ldy  #0
.203e	b1 fb		next           lda  (zpage1),y
.2040	f0 09		               beq  exit
.2042	20 2f 20	               jsr  putch
.2045	20 2d 22	               jsr  inczp1
.2048	4c 3e 20	               jmp  next
.204b	20 65 21	exit           jsr  pop
.204e	60		               rts
.204f			gotoxy
.204f	08		               php
.2050	18		               clc
.2051	8a		               txa
.2052	48		               pha
.2053	98		               tya
.2054	aa		               tax
.2055	68		               pla
.2056	a8		               tay
.2057	20 f0 ff	               jsr  kplot
.205a	28		               plp
.205b	60		               rts
.205c			cursor
=$0286			bascol    =    $0286
.205c	08		               php
.205d	48		               pha
.205e	90 12		               bcc  restore
.2060	20 f0 ff	               jsr  kplot
.2063	8c 84 20	               sty  cx
.2066	8e 85 20	               stx  cy
.2069	ad 86 02	               lda  bascol
.206c	8d 86 20	               sta  bcol
.206f	4c 81 20	               jmp  out
.2072	ae 85 20	restore        ldx  cy
.2075	ac 84 20	               ldy  cx
.2078	20 f0 ff	               jsr  kplot
.207b	ad 86 20	               lda  bcol
.207e	8d 86 02	               sta  bascol
.2081	68		out            pla
.2082	28		               plp
.2083	60		               rts
>2084	00		cx   .byte     $00
>2085	00		cy   .byte     $00
>2086	00		bcol .byte     $00
.2087			cursave
.2087	08		               php
.2088	38		               sec
.2089	20 5c 20	               jsr  cursor
.208c	28		               plp
.208d	60		               rts
.208e			curput
.208e	08		               php
.208f	18		               clc
.2090	20 5c 20	               jsr  cursor
.2093	28		               plp
.2094	60		               rts
.2095			putsxy
.2095	20 26 21	               jsr  push
.2098	86 fb		               stx  zpage1
.209a	84 fc		               sty  zpage1+1
.209c	a0 00		               ldy  #$00
.209e	b1 fb		               lda  (zpage1),y
.20a0	aa		               tax
.20a1	20 2d 22	               jsr  inczp1
.20a4	b1 fb		               lda  (zpage1),y
.20a6	a8		               tay
.20a7	20 4f 20	               jsr  gotoxy
.20aa	20 2d 22	               jsr  inczp1
.20ad	a6 fb		               ldx  zpage1
.20af	a4 fc		               ldy  zpage1+1
.20b1	20 35 20	               jsr  puts
.20b4	20 65 21	               jsr  pop
.20b7	60		               rts
>20b8	00 00		straddr   .word     $00
>20ba	00		px        .byte     $00
>20bb	00		py        .byte     $00
>20bc	00 00		zp1       .word     $00
.20be			putscxy
.20be	20 26 21	               jsr  push
.20c1	84 fc		               sty  zpage1+1
.20c3	86 fb		               stx  zpage1
.20c5	ad 86 02	               lda  bascol
.20c8	8d e8 20	               sta  bc
.20cb	a0 00		               ldy #$00
.20cd	b1 fb		               lda  (zpage1),y
.20cf	8d 86 02	               sta  bascol
.20d2	20 2d 22	               jsr  inczp1
.20d5	a6 fb		               ldx  zpage1
.20d7	a4 fc		               ldy  zpage1+1
.20d9	20 95 20	               jsr  putsxy
.20dc	ad e8 20	               lda  bc
.20df	8d 86 02	               sta  bascol
.20e2	20 65 21	               jsr  pop
.20e5	60		               rts
>20e6	00 00		straddr  .word      $00
>20e8	00		bc       .byte      $00
>20e9	00 00		zp1      .word      $00
.20eb			putrahex
.20eb	08		               php
.20ec	48		               pha
.20ed	20 43 23	               jsr  a2hex
.20f0	a9 e2		               lda  #<a2hexstr
.20f2	a0 22		               ldy  #>a2hexstr
.20f4	20 35 20	               jsr  puts
.20f7	68		               pla
.20f8	28		               plp
.20f9	60		               rts
.20fa			kputrahexxy
.20fa			bputrahexxy
.20fa			putrahexxy
.20fa	08		               php
.20fb	20 43 23	               jsr  a2hex
.20fe	a9 df		               lda  #<a2hexpos
.2100	a0 22		               ldy  #>a2hexpos
.2102	20 95 20	               jsr  putsxy
.2105	68		               pla
.2106	28		               plp
.2107	60		               rts
.2108			putrahexcxy
.2108	08		               php
.2109	20 43 23	               jsr  a2hex
.210c	a9 df		               lda  #<a2hexpos
.210e	a0 22		               ldy  #>a2hexpos
.2110	20 be 20	               jsr  putscxy
.2113	68		               pla
.2114	28		               plp
.2115	60		               rts
.2116			setinverse
.2116	48		               pha
.2117	a9 12		               lda  #$12
.2119	20 d2 ff	               jsr  $ffd2
.211c	68		               pla
.211d	60		               rts
.211e			clrinverse
.211e	48		               pha
.211f	a9 92		               lda  #$92
.2121	20 d2 ff	               jsr  $ffd2
.2124	68		               pla
.2125	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.2126			push
.2126	08		          php            ; stack : flg, pcl, pch
.2127	78		          sei
.2128	8d 62 21	          sta  ra        ; save a
.212b	68		          pla            ; stack : pcl, pch
.212c	8d 61 21	          sta  rp        ; save rp
.212f	68		          pla            ; stack : pch
.2130	8d 63 21	          sta  pc        ; save pcl
.2133	68		          pla            ; stack : -
.2134	8d 64 21	          sta  pc+1      ; save pch
.2137	a5 fb		          lda  zpage1    ; get zpage1 low byte
.2139	48		          pha            ; stack : zp1l
.213a	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.213c	48		          pha            ; stack : zp1h, zp1l
.213d	a5 fd		          lda  zpage2    ; get zpage2 low byte
.213f	48		          pha            ; stack : zp2l, zp1h, zp1l
.2140	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.2142	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.2143	ad 61 21	          lda  rp        ; get rp
.2146	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.2147	ad 62 21	          lda  ra        ; get a
.214a	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.214b	8a		          txa            ; get x
.214c	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.214d	98		          tya            ; get y
.214e	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.214f	ad 64 21	          lda  pc+1      ; get pch
.2152	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2153	ad 63 21	          lda  pc        ; get pcl
.2156	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2157	ad 61 21	          lda  rp        ; get rp
.215a	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.215b	ad 62 21	          lda  ra        ; get a
.215e	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.215f	58		          cli
.2160	60		          rts
>2161	00		rp        .byte     0
>2162	00		ra        .byte     0
>2163	00 00		pc        .word     0
.2165			pull
.2165			pop
.2165	78		          sei
.2166	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2167	8d 9a 21	          sta  pc        ; save pcl
.216a	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.216b	8d 9b 21	          sta  pc+1      ; save pch
.216e	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.216f	a8		          tay            ; set y
.2170	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.2171	aa		          tax            ; set x
.2172	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.2173	8d 99 21	          sta  ra        ; save a
.2176	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.2177	8d 98 21	          sta  rp        ; save rp
.217a	68		          pla            ; stack : zp2l, zp1h, zp1l
.217b	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.217d	68		          pla            ; stack : zp1h, zp1l
.217e	85 fd		          sta  zpage2    ; get zpage2 High byte
.2180	68		          pla            ; stack : zp1l
.2181	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.2183	68		          pla            ; stack :
.2184	85 fb		          sta  zpage1    ; get zpage1 High byte
.2186	ad 9b 21	          lda  pc+1      ; get pch
.2189	48		          pha            ; stack : pch
.218a	ad 9a 21	          lda  pc
.218d	48		          pha            ; stack : pcl, pch
.218e	ad 98 21	          lda  rp        ; get rp
.2191	48		          pha            ; stack : rp, pcl, pch
.2192	ad 99 21	          lda  ra        ; set ra
.2195	58		          cli
.2196	28		          plp            ; stack : pcl, pch
.2197	60		          rts
>2198	00		rp        .byte     0
>2199	00		ra        .byte     0
>219a	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.219c			blkfill
.219c	20 26 21	bf0            jsr  push
.219f	20 5d 22	               jsr  savezp1
.21a2	84 fc		               sty  zpage1+1
.21a4	a0 00		               ldy  #$00
.21a6	84 fb		               sty  zpage1
.21a8	91 fb		bf1            sta  (zpage1),y
.21aa	c8		               iny
.21ab	d0 fb		               bne  bf1
.21ad	20 6c 22	               jsr  restzp1
.21b0	20 65 21	               jsr  pop
.21b3	60		               rts
.21b4			memfill
.21b4	20 26 21	               jsr  push
.21b7	20 9c 21	mf1            jsr  blkfill
.21ba	c8		               iny
.21bb	ca		               dex
.21bc	d0 f9		               bne  mf1
.21be	20 65 21	               jsr  pop
.21c1	60		               rts
.21c2			memmove
.21c2	20 26 21	               jsr  push
.21c5	ba		               tsx            ; On se crée un pointeur ...
.21c6	8a		               txa
.21c7	18		               clc
.21c8	69 0b		               adc  #11
.21ca	a8		               tay
.21cb	a2 06		               ldx  #$06
.21cd	b9 00 01	nextbyte       lda  $0100,y
.21d0	99 1c 22	               sta  words,y
.21d3	c8		               iny
.21d4	ca		               dex
.21d5	d0 f6		               bne  nextbyte
.21d7	ad 1c 22	               lda  s
.21da	8d f3 21	               sta  source+1
.21dd	ad 1d 22	               lda  s+1
.21e0	8d f4 21	               sta  source+2
.21e3	ad 1e 22	               lda  d
.21e6	8d f0 21	               sta  destin+1
.21e9	ad 1f 22	               lda  d+1
.21ec	8d f1 21	               sta  destin+2
.21ef	ad ff ff	destin         lda  $ffff
.21f2	8d ff ff	source         sta  $ffff
.21f5	ee f0 21	               inc  destin+1
.21f8	d0 03		               bne  src
.21fa	ee f1 21	               inc  destin+2
.21fd	ee f3 21	src            inc  source+1
.2200	d0 03		               bne  cnt
.2202	ee f4 21	               inc  source+2
.2205	ad 20 22	cnt            lda  compte
.2208	d0 08		               bne  decit
.220a	ad 21 22	               lda  compte+1
.220d	f0 09		               beq  fini
.220f	ce 21 22	               dec  compte+1
.2212	ce 20 22	decit          dec  compte
.2215	4c ef 21	               jmp  destin
.2218	20 65 21	fini           jsr  pop
.221b	60		               rts
.221c			words
>221c	00 00		s         .word     $0000
>221e	00 00		d         .word     $0000
>2220	00 00		compte    .word     $0000
.2222			decword
.2222	20 26 21	               jsr  push
.2225	86 fd		               stx  zpage2
.2227	84 fe		               sty  zpage2+1
.2229	20 65 21	               jsr  pop
.222c	60		               rts
.222d			inczp1
.222d	08		               php
.222e	48		               pha
.222f	e6 fb		               inc  zpage1
.2231	a5 fb		               lda  zpage1
.2233	d0 02		               bne  nopage
.2235	e6 fc		               inc  zpage1+1
.2237	68		nopage         pla
.2238	28		               plp
.2239	60		               rts
.223a			deczp1
.223a	08		                php
.223b	48		                pha
.223c	c6 fb		                dec  zpage1
.223e	d0 02		                bne  nopage
.2240	c6 fc		                dec  zpage1+1
.2242	68		nopage          pla
.2243	28		                plp
.2244	60		                rts
.2245			inczp2
.2245	08		               php
.2246	48		               pha
.2247	e6 fd		               inc  zpage2
.2249	a5 fd		               lda  zpage2
.224b	d0 02		               bne  nopage
.224d	e6 fe		               inc  zpage2+1
.224f	68		nopage         pla
.2250	28		               plp
.2251	60		               rts
.2252			deczp2
.2252	08		               php
.2253	48		               pha
.2254	a5 fd		               lda  zpage2
.2256	d0 02		               bne  nopage
.2258	c6 fe		               dec  zpage2+1
.225a	68		nopage         pla
.225b	28		               plp
.225c	60		               rts
.225d			savezp1
.225d	08		               php
.225e	48		               pha
.225f	a5 fb		               lda  zpage1
.2261	8d d9 22	               sta  zp1
.2264	a5 fc		               lda  zpage1+1
.2266	8d da 22	               sta  zp1+1
.2269	68		               pla
.226a	28		               plp
.226b	60		               rts
.226c			restzp1
.226c	08		               php
.226d	48		               pha
.226e	ad d9 22	               lda zp1
.2271	85 fb		               sta zpage1
.2273	ad da 22	               lda zp1+1
.2276	85 fc		               sta zpage1+1
.2278	68		               pla
.2279	28		               plp
.227a	60		               rts
.227b			savezp2
.227b	08		         php
.227c	48		         pha
.227d	a5 fd		         lda zpage2
.227f	8d db 22	         sta zp2
.2282	a5 fe		         lda zpage2+1
.2284	8d dc 22	         sta zp2+1
.2287	68		         pla
.2288	28		         plp
.2289	60		         rts
.228a			restzp2
.228a	08		                php
.228b	48		                pha
.228c	ad db 22	                lda  zp2
.228f	85 fd		                sta  zpage2
.2291	ad dc 22	                lda  zp2+1
.2294	85 fe		                sta  zpage2+1
.2296	68		                pla
.2297	28		                plp
.2298	60		                rts
.2299			xy2addr
.2299	08		                php
.229a	48		                pha
.229b	8a		                txa
.229c	48		                pha
.229d	98		                tya
.229e	48		                pha
.229f	ad d4 22	                lda     addr1+1
.22a2	8d d6 22	                sta     addr2+1
.22a5	ad d3 22	                lda     addr1
.22a8	8d d5 22	                sta     addr2
.22ab	c0 00		                cpy     #$00
.22ad	f0 0f		                beq     addx
.22af	18		moreline        clc
.22b0	6d d2 22	                adc     ymult
.22b3	90 03		                bcc     norepy
.22b5	ee d6 22	                inc     addr2+1
.22b8	8d d5 22	norepy          sta     addr2
.22bb	88		                dey
.22bc	d0 f1		                bne     moreline
.22be	8a		addx            txa
.22bf	18		                clc
.22c0	6d d5 22	                adc     addr2
.22c3	90 03		                bcc     thatsit
.22c5	ee d6 22	                inc     addr2+1
.22c8	8d d5 22	thatsit         sta     addr2
.22cb	68		                pla
.22cc	a8		                tay
.22cd	68		                pla
.22ce	aa		                tax
.22cf	68		                pla
.22d0	28		                plp
.22d1	60		                rts
>22d2	28		ymult          .byte     40
>22d3	00 00		addr1          .word     $0000
>22d5	00 00		addr2          .word     $0000
>22d7	00 00		bytecnt        .word     $0000
>22d9	00 00		zp1        .word   $0000
>22db	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>22dd	01		a2hexcol       .byte     1              ; pour aputscxy
>22de	00		a2hexbkcol     .byte     %00000000
.22df			a2hexpos
>22df	00		a2hexpx        .byte     0              ; pour aputsxy
>22e0	00		a2hexpy        .byte     0
>22e1	24		a2hexprefix    .byte     "$"            ; pour aputs
>22e2	00 00		a2hexstr       .word     $00
>22e4	00 00		               .word     $00
>22e6	00		               .byte     0              ; 0 end string
>22e7	30 30 30 30	abin           .null     "00000000"
>22eb	30 30 30 30 00
>22f0	20 20 20 00	adec           .null     "   "
.22f4			putahexfmtxy
.22f4	20 26 21	               jsr  push
.22f7	20 43 23	               jsr  a2hex
.22fa	ae df 22	               ldx  a2hexpx
.22fd	ac e0 22	               ldy  a2hexpy
.2300	20 4f 20	               jsr  gotoxy
.2303	a2 e1		               ldx  #<a2hexprefix
.2305	a0 22		               ldy  #>a2hexprefix
.2307	20 35 20	               jsr  puts
.230a	20 65 21	               jsr  pop
.230d	60		               rts
.230e			putahexfmt
.230e	20 26 21	               jsr  push
.2311	20 43 23	               jsr  a2hex
.2314	a2 e1		               ldx  #<a2hexprefix
.2316	a0 22		               ldy  #>a2hexprefix
.2318	20 35 20	               jsr  puts
.231b	20 65 21	               jsr  pop
.231e	60		               rts
.231f			putahex
.231f	20 26 21	               jsr  push
.2322	20 43 23	               jsr  a2hex
.2325	a2 e2		               ldx  #<a2hexstr
.2327	a0 22		               ldy  #>a2hexstr
.2329	20 35 20	               jsr  puts
.232c	20 65 21	               jsr  pop
.232f	60		               rts
.2330			nib2hex
.2330	08		               php
.2331	29 0f		               and  #$0f
.2333	f8		               sed
.2334	18		               clc
.2335	69 90		               adc  #$90
.2337	69 40		               adc  #$40
.2339	d8		               cld
.233a	28		               plp
.233b	60		               rts
.233c			lsra4bits
.233c	08		               php
.233d	4a		               lsr
.233e	4a		               lsr
.233f	4a		               lsr
.2340	4a		               lsr
.2341	28		               plp
.2342	60		               rts
.2343			a2hex
.2343	08		               php
.2344	48		               pha
.2345	48		               pha
.2346	20 3c 23	               jsr  lsra4bits
.2349	20 30 23	               jsr  nib2hex
.234c	8d e2 22	               sta  a2hexstr
.234f	68		               pla
.2350	20 30 23	               jsr  nib2hex
.2353	8d e3 22	               sta  a2hexstr+1
.2356	a9 00		               lda  #$00                ; set end of string
.2358	8d e4 22	               sta  a2hexstr+2
.235b	68		               pla
.235c	28		               plp
.235d	60		               rts
.235e			xy2hex
.235e	20 26 21	               jsr  push
.2361	20 43 23	               jsr  a2hex
.2364	8a		               txa
.2365	48		               pha
.2366	20 3c 23	               jsr  lsra4bits
.2369	20 30 23	               jsr  nib2hex
.236c	8d e2 22	               sta  a2hexstr
.236f	68		               pla
.2370	20 30 23	               jsr  nib2hex
.2373	8d e3 22	               sta  a2hexstr+1
.2376	98		               tya
.2377	48		               pha
.2378	20 3c 23	               jsr  lsra4bits
.237b	20 30 23	               jsr  nib2hex
.237e	8d e4 22	               sta  a2hexstr+2
.2381	68		               pla
.2382	20 30 23	               jsr  nib2hex
.2385	8d e5 22	               sta  a2hexstr+3
.2388	a9 00		               lda  #$00                ; 0 ended string
.238a	8d e6 22	               sta  a2hexstr+4
.238d	20 65 21	               jsr  pop
.2390			atobin
.2390	20 26 21	               jsr  push
.2393	a2 08		               ldx  #8
.2395	a0 00		               ldy  #0
.2397	18		               clc
.2398	2a		nextbit        rol
.2399	48		               pha
.239a	69 00		               adc  #$00
.239c	29 01		               and  #$01
.239e	20 30 23	               jsr  nib2hex
.23a1	99 e7 22	               sta  abin,y
.23a4	68		               pla
.23a5	c8		               iny
.23a6	ca		               dex
.23a7	d0 ef		               bne  nextbit
.23a9	a9 00		               lda  #0
.23ab	99 e7 22	               sta  abin,y
.23ae	20 65 21	               jsr  pull
.23b1	60		               rts
.23b2			putabin
.23b2	20 90 23	               jsr     atobin
.23b5	20 26 21	               jsr     push
.23b8	a2 e7		               ldx     #<abin
.23ba	a0 22		               ldy     #>abin
.23bc	20 35 20	               jsr     puts
.23bf	20 65 21	               jsr     pop
.23c2	60		               rts
.23c3			printabin
.23c3	20 26 21	               jsr     push
.23c6	a2 e7		               ldx     #<abin
.23c8	a0 22		               ldy     #>abin
.23ca	20 35 20	               jsr     puts
.23cd	20 65 21	               jsr     pop
.23d0	60		               rts
.23d1			putabinfmt
.23d1	08		               php
.23d2	48		               pha
.23d3	a9 25		               lda     #"%"
.23d5	20 2f 20	               jsr     putch
.23d8	68		               pla
.23d9	20 b2 23	               jsr     putabin
.23dc	28		               plp
.23dd	60		               rts
.23de			putabinxy
.23de	20 4f 20	               jsr     gotoxy
.23e1	20 b2 23	               jsr     putabin
.23e4	60		               rts
.23e5			putabinfmtxy
.23e5	20 4f 20	               jsr     gotoxy
.23e8	20 d1 23	               jsr     putabinfmt
.23eb	60		               rts
.23ec			atodec
.23ec	20 26 21	               jsr  push
.23ef	f8		               sed
.23f0	aa		               tax
.23f1	a0 00		               ldy  #$00
.23f3	a9 00		               lda  #$00
.23f5	18		nextbit        clc
.23f6	69 01		               adc  #$01
.23f8	90 01		               bcc  decx
.23fa	c8		               iny
.23fb	ca		decx           dex
.23fc	d0 f7		               bne  nextbit
.23fe	48		               pha
.23ff	98		               tya
.2400	20 30 23	               jsr  nib2hex
.2403	8d f0 22	               sta  adec
.2406	68		               pla
.2407	48		               pha
.2408	20 30 23	               jsr  nib2hex
.240b	8d f2 22	               sta  adec+2
.240e	68		               pla
.240f	6a		               ror
.2410	6a		               ror
.2411	6a		               ror
.2412	6a		               ror
.2413	20 30 23	               jsr  nib2hex
.2416	8d f1 22	               sta  adec+1
.2419	d8		               cld
.241a	20 65 21	               jsr  pull
.241d	60		               rts
>241e	00 00 00	buffer         .byte     0,0,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>2421	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>2425	00 00 00 00 00 00 00 00 00 0d 00 00
>2431	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>2435	00 00 00 00 00 00 00 00 00 00 00 00
>2441	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>2445	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>2451	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>2455	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>2461	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>2465	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>2471	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>2475	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>2481	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>2485	00 00 00 00 00 00 00 00 00 00 00 00
>2491	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>2495	00 00 00 00 00 00 00 00 00 00 00 00
>24a1	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>24a5	00 00 00 00 00 00 00 00 00 00 00 00
>24b1	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>24b5	00 00 00 00 00 00 00 00 00 00 00 00
>24c1	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>24c5	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>24d1	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>24d5	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>24e1	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>24e5	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>24f1	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>24f5	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>2501	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>2505	00 00 00 00 00 00 00 00 00 00 00 00
>2511	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>2515	00 00 00 00 00 00 00 00 00 00 00 00
.2521			waitstop
.2521	20 26 21	               jsr  push
.2524	20 ed f6	wait           jsr  k_stop
.2527	d0 fb		               bne  wait
.2529	20 65 21	               jsr  pop
.252c	60		               rts
.252d			anykey
.252d	08		               php
.252e	48		               pha
.252f	a5 cb		nokey          lda 203
.2531	c9 40		               cmp #64
.2533	f0 fa		               beq nokey
.2535	20 3b 25	               jsr releasekey
.2538	68		               pla
.2539	28		               plp
.253a	60		               rts
.253b			releasekey
.253b	08		               php
.253c	48		               pha
.253d	a5 cb		keypressed     lda 203
.253f	c9 40		               cmp #64
.2541	d0 fa		               bne keypressed
.2543	68		               pla
.2544	28		               plp
.2545	60		               rts
.2546			getkey
.2546	20 e4 ff	again          jsr  getin
.2549	c9 00		               cmp  #0
.254b	f0 f9		               beq  again
.254d	60		               rts
.254e			waitkey
.254e	20 26 21	               jsr  push
.2551	8d 9f 25	               sta  thekey
.2554	20 e4 ff	nope           jsr  getin
.2557	20 d2 ff	               jsr  chrout
.255a	cd 9f 25	               cmp  thekey
.255d	d0 f5		               bne  nope
.255f	20 d2 ff	               jsr  chrout
.2562	20 65 21	               jsr  pop
.2565	60		               rts
.2566			waitspace
.2566	20 26 21	               jsr  push
.2569	a9 7f		wait           lda  #$7f  ;%01111111
.256b	8d 00 dc	               sta  $dc00
.256e	ad 01 dc	               lda  $dc01
.2571	29 10		               and  #$10  ;mask %00010000
.2573	d0 f4		               bne  wait
.2575	20 65 21	               jsr  pop
.2578			waitsstop
.2578	20 26 21	               jsr  push
.257b	20 ed f6	wait           jsr  k_stop  ;%01111111
.257e	d0 fb		               bne  wait
.2580	20 65 21	               jsr  pop
.2583			waitreturn
.2583	20 26 21	               jsr  push
.2586	ad a0 25	               lda  thecount
.2589	8d 00 04	               sta  scrnram
.258c	a9 02		               lda  #$02
.258e	8d 00 d8	               sta  colorram
.2591	20 e4 ff	nope           jsr  getin
.2594	c9 0d		nohex          cmp  #$0d
.2596	d0 f9		               bne  nope
.2598	ee a0 25	               inc  thecount
.259b	20 65 21	               jsr  pop
.259e	60		               rts
>259f	00		thekey         .byte   0
>25a0	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-disk.asm

.25a1			diskerror
.25a1	20 26 21	               jsr  push
.25a4	ad d2 26	               lda  dsk_dev   ; Select device 8
.25a7	85 ba		               sta  $ba       ;
.25a9	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.25ac	a9 6f		               lda  #$6f
.25ae	85 b9		               sta  $b9       ;
.25b0	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.25b3	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.25b6	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.25b9	c9 0d		               cmp  #$0d      ; Is it CR ?
.25bb	d0 f6		               bne  nextchar  ; No, get next char
.25bd	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.25c0	20 65 21	               jsr  pop
.25c3	60		               rts
.25c4			diskdir
.25c4	20 26 21	               jsr  push
.25c7	a9 24		               lda  #$24      ; L012C - Filename is "$"
.25c9	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.25cb	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.25cd	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.25cf	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.25d1	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.25d3	a9 01		               lda  #$01      ; L0138 - set ...
.25d5	85 b7		               sta  $b7       ; L013A - ... length of current filename
.25d7	ad d2 26	               lda  dsk_dev   ; L013C - set 8 as ...
.25da	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.25dc	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.25de	85 b9		               sta  $b9       ; L0142 - ... secondary address
.25e0	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.25e3	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...%10111010
.25e5	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.25e8	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.25ea	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.25ed	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.25ef	85 90		               sta  $90       ; L0153 - ... kernal status word.
.25f1	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.25f3	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.25f5	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.25f8	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.25fa	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.25fc	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.25fe	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.2601	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.2603	d0 28		               bne  exit      ; L0167
.2605	a4 fb		               ldy  $fb       ; L0169
.2607	88		               dey            ; L016b
.2608	d0 e9		               bne  loop1     ; L016C - If not last, loop
.260a	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.260c	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.260f	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.2611	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.2614	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.2617	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.2619	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.261b	aa		               tax            ; L017F - tfr a in x
.261c	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.261e	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.2621	4c 14 26	               jmp  loop3     ; L0185 - get another byte
.2624	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.2626	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.2629	a0 02		               ldy  #$02      ; L018D - set Y to 2
.262b	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.262d	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.2630	20 65 21	               jsr  pop
.2633	60		               rts            ; L0194
.2634			directory
.2634	20 c4 25	               jsr  diskdir
.2637	20 a1 25	               jsr  diskerror
.263a	60		               rts
.263b			memtofile
.263b	20 ac 26	               jsr  dsk_putmesg
.263e	20 26 21	               jsr  push
.2641	ad d6 26	               lda  dsk_fnlen
.2644	ae d4 26	               ldx  dsk_fnptr      ; load fname addr. lbyte
.2647	ac d5 26	               ldy  dsk_fnptr+1
.264a	20 bd ff	               jsr  setnam         ; call setnam
.264d	ad d3 26	               lda  dsk_lfsno
.2650	ae d2 26	               ldx  dsk_dev        ; specified device
.2653	a0 00		skip           ldy  #$00
.2655	20 ba ff	               jsr  setlfs         ; call setlfs
.2658	ad ce 26	               lda  dsk_data_s     ; put data start lbyte in stal
.265b	85 c1		               sta  stal
.265d	ad cf 26	               lda  dsk_data_s+1   ; put data start hbyte in stal
.2660	85 c2		               sta  stal+1
.2662	ae d0 26	               ldx  dsk_data_e     ; put data end lbyte in x
.2665	ac d1 26	               ldy  dsk_data_e+1   ; put data end hbyte in y
.2668	a9 c1		               lda  #stal          ; start address located in $c1/$c2
.266a	20 d8 ff	               jsr  save           ; call save
.266d	90 00		               bcc  noerror        ; if carry set, a load error has happened
.266f	20 65 21	noerror        jsr  pop
.2672	60		               rts
.2673			filetomem
.2673	20 26 21	               jsr push
.2676	ad d6 26	               lda dsk_fnlen
.2679	ae d4 26	               ldx dsk_fnptr
.267c	ac d5 26	               ldy dsk_fnptr+1
.267f	20 bd ff	               jsr setnam     ; call setnam
.2682	ad d3 26	               lda dsk_lfsno
.2685	ae d2 26	               ldx dsk_dev    ; default to device 8
.2688	a0 01		               ldy #$01       ; not $01 means: load to address stored in file
.268a	20 ba ff	               jsr setlfs     ; call setlfs
.268d	a9 00		               lda #$00       ; $00 means: load to memory (not verify)
.268f	20 d5 ff	               jsr load       ; call load
.2692	90 03		               bcc noerror      ; if carry set, a load error has happened
.2694	20 9b 26	               jsr  error
.2697	20 65 21	noerror        jsr pop
.269a	60		               rts
.269b			error
.269b	60		               rts
.269c	a2 e7		error1         ldx  #<dsk_emsg1
.269e	a0 26		               ldy  #>dsk_emsg1
.26a0	20 35 20	               jsr  puts
.26a3	60		               rts
.26a4	a2 fb		error2         ldx #<dsk_emsg2
.26a6	a0 26		               ldy #>dsk_emsg2
.26a8	20 35 20	               jsr puts
.26ab	60		               rts
.26ac			dsk_putmesg
.26ac	20 26 21	               jsr push
.26af	a2 d7		               ldx #<dsk_msg0
.26b1	a0 26		               ldy #>dsk_msg0
.26b3	20 35 20	               jsr puts
.26b6	a9 20		               lda #$20
.26b8	20 2f 20	               jsr putch
.26bb	ae d4 26	               ldx dsk_fnptr
.26be	ac d5 26	               ldy dsk_fnptr+1
.26c1	20 35 20	               jsr puts
.26c4	ad d3 26	               lda dsk_lfsno
.26c7	20 c3 ff	               jsr close
.26ca	20 65 21	               jsr pop
.26cd	60		               rts
>26ce	00 00		dsk_data_s     .word     $0000    ; example addresses
>26d0	00 20		dsk_data_e     .word     $2000
>26d2	08		dsk_dev        .byte     $08
>26d3	00		dsk_lfsno      .byte     $00
>26d4	00 00		dsk_fnptr      .word     $00
>26d6	00		dsk_fnlen      .byte     0
>26d7	8d		dsk_msg0       .byte     141
>26d8	53 41 56 49	               .null     "saving"
>26dc	4e 47 00
>26df	8d		dsk_msg1       .byte     141
>26e0	53 55 43 43	               .null     "succes"
>26e4	45 53 00
>26e7	8d		dsk_emsg1      .byte     141
>26e8	46 49 43 48	               .null     "fichier non ouvert"
>26ec	49 45 52 20 4e 4f 4e 20 4f 55 56 45 52 54 00
>26fb	11		dsk_emsg2      .byte     17
>26fc	45 52 52 45	               .null     "erreur d'ecriture"
>2700	55 52 20 44 27 45 43 52 49 54 55 52 45 00

;******  Return to file: charedit.asm


;******  End of listing

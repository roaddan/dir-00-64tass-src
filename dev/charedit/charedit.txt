
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Thu Nov  2 02:25:07 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

.080d			main
.080d	20 3d 0d	               jsr push
.0810	20 ee 0b	reload         jsr screendis
.0813	20 08 0c	               jsr scrmaninit
.0816	20 bc 09	               jsr  staticscreen
.0819	20 fb 0b	               jsr screenena
.081c	8a		               txa
.081d	48		               pha
.081e	98		               tya
.081f	48		               pha
.0820	a2 21		               ldx #<blankmsg
.0822	a0 0a		               ldy #>blankmsg
.0824	20 d5 0c	               jsr putscxy
.0827	a2 4c		               ldx #<edit_msg
.0829	a0 0a		               ldy #>edit_msg
.082b	20 d5 0c	               jsr putscxy
.082e	68		               pla
.082f	a8		               tay
.0830	68		               pla
.0831	aa		               tax
.0832	20 f9 0f	               jsr  anykey
.0835	8a		               txa
.0836	48		               pha
.0837	98		               tya
.0838	48		               pha
.0839	a2 21		               ldx #<blankmsg
.083b	a0 0a		               ldy #>blankmsg
.083d	20 d5 0c	               jsr putscxy
.0840	a2 67		               ldx #<save_msg
.0842	a0 0a		               ldy #>save_msg
.0844	20 d5 0c	               jsr putscxy
.0847	68		               pla
.0848	a8		               tay
.0849	68		               pla
.084a	aa		               tax
.084b	20 f9 0f	               jsr  anykey
.084e	8a		               txa
.084f	48		               pha
.0850	98		               tya
.0851	48		               pha
.0852	a2 21		               ldx #<blankmsg
.0854	a0 0a		               ldy #>blankmsg
.0856	20 d5 0c	               jsr putscxy
.0859	a2 8d		               ldx #<load_msg
.085b	a0 0a		               ldy #>load_msg
.085d	20 d5 0c	               jsr putscxy
.0860	68		               pla
.0861	a8		               tay
.0862	68		               pla
.0863	aa		               tax
.0864	20 f9 0f	               jsr  anykey
.0867	8a		               txa
.0868	48		               pha
.0869	98		               tya
.086a	48		               pha
.086b	a2 21		               ldx #<blankmsg
.086d	a0 0a		               ldy #>blankmsg
.086f	20 d5 0c	               jsr putscxy
.0872	a2 b2		               ldx #<copy_msg
.0874	a0 0a		               ldy #>copy_msg
.0876	20 d5 0c	               jsr putscxy
.0879	68		               pla
.087a	a8		               tay
.087b	68		               pla
.087c	aa		               tax
.087d	20 f9 0f	               jsr  anykey
.0880	8a		               txa
.0881	48		               pha
.0882	98		               tya
.0883	48		               pha
.0884	a2 21		               ldx #<blankmsg
.0886	a0 0a		               ldy #>blankmsg
.0888	20 d5 0c	               jsr putscxy
.088b	a2 cf		               ldx #<clear_msg
.088d	a0 0a		               ldy #>clear_msg
.088f	20 d5 0c	               jsr putscxy
.0892	68		               pla
.0893	a8		               tay
.0894	68		               pla
.0895	aa		               tax
.0896	20 f9 0f	               jsr  anykey
.0899	8a		               txa
.089a	48		               pha
.089b	98		               tya
.089c	48		               pha
.089d	a2 21		               ldx #<blankmsg
.089f	a0 0a		               ldy #>blankmsg
.08a1	20 d5 0c	               jsr putscxy
.08a4	a2 e9		               ldx #<fill_msg
.08a6	a0 0a		               ldy #>fill_msg
.08a8	20 d5 0c	               jsr putscxy
.08ab	68		               pla
.08ac	a8		               tay
.08ad	68		               pla
.08ae	aa		               tax
.08af	20 f9 0f	               jsr  anykey
.08b2	8a		               txa
.08b3	48		               pha
.08b4	98		               tya
.08b5	48		               pha
.08b6	a2 21		               ldx #<blankmsg
.08b8	a0 0a		               ldy #>blankmsg
.08ba	20 d5 0c	               jsr putscxy
.08bd	a2 03		               ldx #<work_msg
.08bf	a0 0b		               ldy #>work_msg
.08c1	20 d5 0c	               jsr putscxy
.08c4	68		               pla
.08c5	a8		               tay
.08c6	68		               pla
.08c7	aa		               tax
.08c8	20 f9 0f	               jsr  anykey
.08cb	8a		               txa
.08cc	48		               pha
.08cd	98		               tya
.08ce	48		               pha
.08cf	a2 21		               ldx #<blankmsg
.08d1	a0 0a		               ldy #>blankmsg
.08d3	20 d5 0c	               jsr putscxy
.08d6	a2 19		               ldx #<rvrs_msg
.08d8	a0 0b		               ldy #>rvrs_msg
.08da	20 d5 0c	               jsr putscxy
.08dd	68		               pla
.08de	a8		               tay
.08df	68		               pla
.08e0	aa		               tax
.08e1	20 f9 0f	               jsr  anykey
.08e4	8a		               txa
.08e5	48		               pha
.08e6	98		               tya
.08e7	48		               pha
.08e8	a2 21		               ldx #<blankmsg
.08ea	a0 0a		               ldy #>blankmsg
.08ec	20 d5 0c	               jsr putscxy
.08ef	a2 30		               ldx #<invr_msg
.08f1	a0 0b		               ldy #>invr_msg
.08f3	20 d5 0c	               jsr putscxy
.08f6	68		               pla
.08f7	a8		               tay
.08f8	68		               pla
.08f9	aa		               tax
.08fa	20 f9 0f	               jsr  anykey
.08fd	8a		               txa
.08fe	48		               pha
.08ff	98		               tya
.0900	48		               pha
.0901	a2 21		               ldx #<blankmsg
.0903	a0 0a		               ldy #>blankmsg
.0905	20 d5 0c	               jsr putscxy
.0908	a2 49		               ldx #<flip_msg
.090a	a0 0b		               ldy #>flip_msg
.090c	20 d5 0c	               jsr putscxy
.090f	68		               pla
.0910	a8		               tay
.0911	68		               pla
.0912	aa		               tax
.0913	20 f9 0f	               jsr  anykey
.0916	8a		               txa
.0917	48		               pha
.0918	98		               tya
.0919	48		               pha
.091a	a2 21		               ldx #<blankmsg
.091c	a0 0a		               ldy #>blankmsg
.091e	20 d5 0c	               jsr putscxy
.0921	a2 61		               ldx #<scrollr_msg
.0923	a0 0b		               ldy #>scrollr_msg
.0925	20 d5 0c	               jsr putscxy
.0928	68		               pla
.0929	a8		               tay
.092a	68		               pla
.092b	aa		               tax
.092c	20 f9 0f	               jsr  anykey
.092f	8a		               txa
.0930	48		               pha
.0931	98		               tya
.0932	48		               pha
.0933	a2 21		               ldx #<blankmsg
.0935	a0 0a		               ldy #>blankmsg
.0937	20 d5 0c	               jsr putscxy
.093a	a2 76		               ldx #<scrolll_msg
.093c	a0 0b		               ldy #>scrolll_msg
.093e	20 d5 0c	               jsr putscxy
.0941	68		               pla
.0942	a8		               tay
.0943	68		               pla
.0944	aa		               tax
.0945	20 f9 0f	               jsr  anykey
.0948	8a		               txa
.0949	48		               pha
.094a	98		               tya
.094b	48		               pha
.094c	a2 21		               ldx #<blankmsg
.094e	a0 0a		               ldy #>blankmsg
.0950	20 d5 0c	               jsr putscxy
.0953	a2 8a		               ldx #<scrollu_msg
.0955	a0 0b		               ldy #>scrollu_msg
.0957	20 d5 0c	               jsr putscxy
.095a	68		               pla
.095b	a8		               tay
.095c	68		               pla
.095d	aa		               tax
.095e	20 f9 0f	               jsr  anykey
.0961	8a		               txa
.0962	48		               pha
.0963	98		               tya
.0964	48		               pha
.0965	a2 21		               ldx #<blankmsg
.0967	a0 0a		               ldy #>blankmsg
.0969	20 d5 0c	               jsr putscxy
.096c	a2 9c		               ldx #<scrolld_msg
.096e	a0 0b		               ldy #>scrolld_msg
.0970	20 d5 0c	               jsr putscxy
.0973	68		               pla
.0974	a8		               tay
.0975	68		               pla
.0976	aa		               tax
.0977	20 f9 0f	               jsr  anykey
.097a	8a		               txa
.097b	48		               pha
.097c	98		               tya
.097d	48		               pha
.097e	a2 21		               ldx #<blankmsg
.0980	a0 0a		               ldy #>blankmsg
.0982	20 d5 0c	               jsr putscxy
.0985	a2 b0		               ldx #<save_fname_msg
.0987	a0 0b		               ldy #>save_fname_msg
.0989	20 d5 0c	               jsr putscxy
.098c	68		               pla
.098d	a8		               tay
.098e	68		               pla
.098f	aa		               tax
.0990	20 f9 0f	               jsr  anykey
.0993	8a		               txa
.0994	48		               pha
.0995	98		               tya
.0996	48		               pha
.0997	a2 21		               ldx #<blankmsg
.0999	a0 0a		               ldy #>blankmsg
.099b	20 d5 0c	               jsr putscxy
.099e	a2 cf		               ldx #<load_fname_msg
.09a0	a0 0b		               ldy #>load_fname_msg
.09a2	20 d5 0c	               jsr putscxy
.09a5	68		               pla
.09a6	a8		               tay
.09a7	68		               pla
.09a8	aa		               tax
.09a9	8a		               txa
.09aa	48		               pha
.09ab	98		               tya
.09ac	48		               pha
.09ad	a2 01		               ldx  #1
.09af	a0 07		               ldy  #7
.09b1	20 66 0c	               jsr  gotoxy
.09b4	68		               pla
.09b5	a8		               tay
.09b6	68		               pla
.09b7	aa		               tax
.09b8	20 7c 0d	               jsr pop
.09bb	60		               rts
.09bc			staticscreen
.09bc	48		               pha
.09bd	a9 04		               lda  #vmauve
.09bf	8d 20 d0	               sta  $d020
.09c2	68		               pla
.09c3	48		               pha
.09c4	a9 0a		               lda  #vrose
.09c6	8d 21 d0	               sta  $d021
.09c9	68		               pla
.09ca	48		               pha
.09cb	a9 8e		               lda  #b_uppercase
.09cd	8d 29 0c	               sta  characterset
.09d0	20 d2 ff	               jsr  $ffd2
.09d3	68		               pla
.09d4	20 fc 09	               jsr  showlines
.09d7	20 db 09	               jsr  showallchars
.09da	60		               rts
.09db			showallchars
.09db	20 3d 0d	               jsr push
.09de	8a		               txa
.09df	48		               pha
.09e0	98		               tya
.09e1	48		               pha
.09e2	a2 00		               ldx  #0
.09e4	a0 00		               ldy  #0
.09e6	20 66 0c	               jsr  gotoxy
.09e9	68		               pla
.09ea	a8		               tay
.09eb	68		               pla
.09ec	aa		               tax
.09ed	a2 00		               ldx  #$00
.09ef	8a		nextc          txa
.09f0	9d 00 04	               sta  scrnram,x
.09f3	e8		               inx
.09f4	e0 80		               cpx  #$80
.09f6	d0 f7		               bne  nextc
.09f8	20 7c 0d	               jsr  pop
.09fb	60		               rts
.09fc			showlines
.09fc	20 3d 0d	               jsr  push
.09ff	8a		               txa
.0a00	48		               pha
.0a01	98		               tya
.0a02	48		               pha
.0a03	a2 00		               ldx  #0
.0a05	a0 04		               ldy  #4
.0a07	20 66 0c	               jsr  gotoxy
.0a0a	68		               pla
.0a0b	a8		               tay
.0a0c	68		               pla
.0a0d	aa		               tax
.0a0e	a2 28		               ldx  #40
.0a10	a9 40		               lda  #(192-128)
.0a12	9d 9f 04	nextl          sta  scrnram+(40*4)-1,x
.0a15	9d ef 04	               sta  scrnram+(40*6)-1,x
.0a18	ca		               dex
.0a19	e0 00		               cpx  #$00
.0a1b	d0 f5		               bne  nextl
.0a1d	20 7c 0d	               jsr  pop
.0a20	60		               rts

;******  Processing file: messages.asm

>0a21	01 00 05 92	blankmsg       .byte     1,0,5,146
>0a25	20 20 20 20	               .null     "                                      "
>0a29	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0a39	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0a49	20 20 00
>0a4c	01 00 05 12	edit_msg       .byte     1,0,5,18
>0a50	20 45 4e 54	               .null     " entry mode: chr$(   )"
>0a54	52 59 20 4d 4f 44 45 3a 20 43 48 52 24 28 20 20
>0a64	20 29 00
>0a67	01 00 05 92	save_msg       .byte     1,0,5,146
>0a6b	20 53 41 56	               .null     " save on cassette or disk? (c/d):"
>0a6f	45 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>0a7f	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
>0a8d	01 00 05	load_msg       .byte     1,0,5
>0a90	20 4c 4f 41	               .null     " load on cassette or disk? (c/d):"
>0a94	44 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>0aa4	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
>0ab2	01 00 05	copy_msg       .byte     1,0,5
>0ab5	20 45 4e 54	               .null     " enter character to copy:"
>0ab9	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>0ac9	43 4f 50 59 3a 00
>0acf	01 00 05	clear_msg      .byte     1,0,5
>0ad2	20 43 4c 45	               .null     " clear char: chr$(   )"
>0ad6	41 52 20 43 48 41 52 3a 20 43 48 52 24 28 20 20
>0ae6	20 29 00
>0ae9	01 00 05	fill_msg       .byte     1,0,5
>0aec	20 46 49 4c	               .null     " fill char:  chr$(   )"
>0af0	4c 20 43 48 41 52 3a 20 20 43 48 52 24 28 20 20
>0b00	20 29 00
>0b03	01 00 05	work_msg       .byte     1,0,5
>0b06	20 45 4e 41	               .null     " enable work space"
>0b0a	42 4c 45 20 57 4f 52 4b 20 53 50 41 43 45 00
>0b19	01 00 05	rvrs_msg       .byte     1,0,5
>0b1c	20 52 45 56	               .null     " reverse character:"
>0b20	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
>0b30	01 00 05	invr_msg       .byte     1,0,5
>0b33	20 49 4e 56	               .null     " inverting character:"
>0b37	45 52 54 49 4e 47 20 43 48 41 52 41 43 54 45 52
>0b47	3a 00
>0b49	01 00 05	flip_msg       .byte     1,0,5
>0b4c	20 46 4c 49	               .null     " flipping character:"
>0b50	50 50 49 4e 47 20 43 48 41 52 41 43 54 45 52 3a
>0b60	00
>0b61	01 00 05	scrollr_msg    .byte     1,0,5
>0b64	20 53 43 52	               .null     " scrolling right:"
>0b68	4f 4c 4c 49 4e 47 20 52 49 47 48 54 3a 00
>0b76	01 00 05	scrolll_msg    .byte     1,0,5
>0b79	20 53 43 52	               .null     " scrolling left:"
>0b7d	4f 4c 4c 49 4e 47 20 4c 45 46 54 3a 00
>0b8a	01 00 05	scrollu_msg    .byte     1,0,5
>0b8d	20 53 43 52	               .null     " scrolling up:"
>0b91	4f 4c 4c 49 4e 47 20 55 50 3a 00
>0b9c	01 00 05	scrolld_msg    .byte     1,0,5
>0b9f	20 53 43 52	               .null     " scrolling down:"
>0ba3	4f 4c 4c 49 4e 47 20 44 4f 57 4e 3a 00
>0bb0	01 00 05	save_fname_msg .byte     1,0,5
>0bb3	20 53 41 56	               .null     " save: file name ------.chr"
>0bb7	45 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>0bc7	2d 2d 2d 2e 43 48 52 00
>0bcf	01 00 05	load_fname_msg .byte     1,0,5
>0bd2	20 4c 4f 41	               .null     " load: file name ------.chr"
>0bd6	44 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>0be6	2d 2d 2d 2e 43 48 52 00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ;  97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c1			stal            =       $c1     ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.0bee			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.0bee			screendis
.0bee	08		               php
.0bef	48		               pha
.0bf0	ad 11 d0	               lda  $d011
.0bf3	29 ef		               and  #%11101111
.0bf5	8d 11 d0	               sta  $d011
.0bf8	68		               pla
.0bf9	28		               plp
.0bfa	60		               rts
.0bfb			screenena
.0bfb	08		               php
.0bfc	48		               pha
.0bfd	ad 11 d0	               lda  $d011
.0c00	09 10		               ora  #%00010000
.0c02	8d 11 d0	               sta  $d011
.0c05	68		               pla
.0c06	28		               plp
.0c07	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0c08			scrmaninit
.0c08	20 3d 0d	               jsr  push
.0c0b	a9 06		               lda  #vbleu
.0c0d	8d 21 d0	               sta  vicbackcol
.0c10	a9 05		               lda  #vvert
.0c12	8d 20 d0	               sta  vicbordcol
.0c15	a9 01		               lda  #vblanc
.0c17	8d 86 02	               sta  bascol
.0c1a	ad 00 04	               lda  scrnram
.0c1d	29 fd		               and  #%11111101
.0c1f	8d 00 04	               sta  scrnram
.0c22	20 2a 0c	               jsr  cls
.0c25	20 7c 0d	               jsr  pop
.0c28	60		               rts
>0c29	8e		characterset   .byte b_uppercase
.0c2a			cls
.0c2a	08		               php
.0c2b	48		               pha
.0c2c	a9 93		               lda  #$93
.0c2e	20 46 0c	               jsr  putch
.0c31	a9 0e		               lda  #$0e
.0c33	20 46 0c	               jsr  putch
.0c36	68		               pla
.0c37	28		               plp
.0c38	60		               rts
.0c39			putnch
.0c39	08		               php
.0c3a	e0 00		               cpx  #$00
.0c3c	f0 06		               beq  out
.0c3e	20 d2 ff	again          jsr  $ffd2
.0c41	ca		               dex
.0c42	d0 fa		               bne  again
.0c44	28		out            plp
.0c45	60		               rts
.0c46			putch
.0c46	08		               php
.0c47	20 d2 ff	               jsr  $ffd2
.0c4a	28		               plp
.0c4b	60		               rts
.0c4c			puts
.0c4c	20 3d 0d	               jsr  push
.0c4f	86 fb		               stx  zpage1
.0c51	84 fc		               sty  zpage1+1
.0c53	a0 00		               ldy  #0
.0c55	b1 fb		next           lda  (zpage1),y
.0c57	f0 09		               beq  exit
.0c59	20 46 0c	               jsr  putch
.0c5c	20 44 0e	               jsr  inczp1
.0c5f	4c 55 0c	               jmp  next
.0c62	20 7c 0d	exit           jsr  pop
.0c65	60		               rts
.0c66			gotoxy
.0c66	08		               php
.0c67	18		               clc
.0c68	8a		               txa
.0c69	48		               pha
.0c6a	98		               tya
.0c6b	aa		               tax
.0c6c	68		               pla
.0c6d	a8		               tay
.0c6e	20 f0 ff	               jsr  kplot
.0c71	28		               plp
.0c72	60		               rts
.0c73			cursor
=$0286			bascol    =    $0286
.0c73	08		               php
.0c74	48		               pha
.0c75	90 12		               bcc  restore
.0c77	20 f0 ff	               jsr  kplot
.0c7a	8c 9b 0c	               sty  cx
.0c7d	8e 9c 0c	               stx  cy
.0c80	ad 86 02	               lda  bascol
.0c83	8d 9d 0c	               sta  bcol
.0c86	4c 98 0c	               jmp  out
.0c89	ae 9c 0c	restore        ldx  cy
.0c8c	ac 9b 0c	               ldy  cx
.0c8f	20 f0 ff	               jsr  kplot
.0c92	ad 9d 0c	               lda  bcol
.0c95	8d 86 02	               sta  bascol
.0c98	68		out            pla
.0c99	28		               plp
.0c9a	60		               rts
>0c9b	00		cx   .byte     $00
>0c9c	00		cy   .byte     $00
>0c9d	00		bcol .byte     $00
.0c9e			cursave
.0c9e	08		               php
.0c9f	38		               sec
.0ca0	20 73 0c	               jsr  cursor
.0ca3	28		               plp
.0ca4	60		               rts
.0ca5			curput
.0ca5	08		               php
.0ca6	18		               clc
.0ca7	20 73 0c	               jsr  cursor
.0caa	28		               plp
.0cab	60		               rts
.0cac			putsxy
.0cac	20 3d 0d	               jsr  push
.0caf	86 fb		               stx  zpage1
.0cb1	84 fc		               sty  zpage1+1
.0cb3	a0 00		               ldy  #$00
.0cb5	b1 fb		               lda  (zpage1),y
.0cb7	aa		               tax
.0cb8	20 44 0e	               jsr  inczp1
.0cbb	b1 fb		               lda  (zpage1),y
.0cbd	a8		               tay
.0cbe	20 66 0c	               jsr  gotoxy
.0cc1	20 44 0e	               jsr  inczp1
.0cc4	a6 fb		               ldx  zpage1
.0cc6	a4 fc		               ldy  zpage1+1
.0cc8	20 4c 0c	               jsr  puts
.0ccb	20 7c 0d	               jsr  pop
.0cce	60		               rts
>0ccf	00 00		straddr   .word     $00
>0cd1	00		px        .byte     $00
>0cd2	00		py        .byte     $00
>0cd3	00 00		zp1       .word     $00
.0cd5			putscxy
.0cd5	20 3d 0d	               jsr  push
.0cd8	84 fc		               sty  zpage1+1
.0cda	86 fb		               stx  zpage1
.0cdc	ad 86 02	               lda  bascol
.0cdf	8d ff 0c	               sta  bc
.0ce2	a0 00		               ldy #$00
.0ce4	b1 fb		               lda  (zpage1),y
.0ce6	8d 86 02	               sta  bascol
.0ce9	20 44 0e	               jsr  inczp1
.0cec	a6 fb		               ldx  zpage1
.0cee	a4 fc		               ldy  zpage1+1
.0cf0	20 ac 0c	               jsr  putsxy
.0cf3	ad ff 0c	               lda  bc
.0cf6	8d 86 02	               sta  bascol
.0cf9	20 7c 0d	               jsr  pop
.0cfc	60		               rts
>0cfd	00 00		straddr  .word      $00
>0cff	00		bc       .byte      $00
>0d00	00 00		zp1      .word      $00
.0d02			putrahex
.0d02	08		               php
.0d03	48		               pha
.0d04	20 4a 0f	               jsr  a2hex
.0d07	a9 f6		               lda  #<a2hexstr
.0d09	a0 0e		               ldy  #>a2hexstr
.0d0b	20 4c 0c	               jsr  puts
.0d0e	68		               pla
.0d0f	28		               plp
.0d10	60		               rts
.0d11			kputrahexxy
.0d11			bputrahexxy
.0d11			putrahexxy
.0d11	08		               php
.0d12	20 4a 0f	               jsr  a2hex
.0d15	a9 f3		               lda  #<a2hexpos
.0d17	a0 0e		               ldy  #>a2hexpos
.0d19	20 ac 0c	               jsr  putsxy
.0d1c	68		               pla
.0d1d	28		               plp
.0d1e	60		               rts
.0d1f			putrahexcxy
.0d1f	08		               php
.0d20	20 4a 0f	               jsr  a2hex
.0d23	a9 f3		               lda  #<a2hexpos
.0d25	a0 0e		               ldy  #>a2hexpos
.0d27	20 d5 0c	               jsr  putscxy
.0d2a	68		               pla
.0d2b	28		               plp
.0d2c	60		               rts
.0d2d			setinverse
.0d2d	48		               pha
.0d2e	a9 12		               lda  #$12
.0d30	20 d2 ff	               jsr  $ffd2
.0d33	68		               pla
.0d34	60		               rts
.0d35			clrinverse
.0d35	48		               pha
.0d36	a9 92		               lda  #$92
.0d38	20 d2 ff	               jsr  $ffd2
.0d3b	68		               pla
.0d3c	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.0d3d			push
.0d3d	08		          php            ; stack : flg, pcl, pch
.0d3e	78		          sei
.0d3f	8d 79 0d	          sta  ra        ; save a
.0d42	68		          pla            ; stack : pcl, pch
.0d43	8d 78 0d	          sta  rp        ; save rp
.0d46	68		          pla            ; stack : pch
.0d47	8d 7a 0d	          sta  pc        ; save pcl
.0d4a	68		          pla            ; stack : -
.0d4b	8d 7b 0d	          sta  pc+1      ; save pch
.0d4e	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0d50	48		          pha            ; stack : zp1l
.0d51	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0d53	48		          pha            ; stack : zp1h, zp1l
.0d54	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0d56	48		          pha            ; stack : zp2l, zp1h, zp1l
.0d57	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0d59	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0d5a	ad 78 0d	          lda  rp        ; get rp
.0d5d	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0d5e	ad 79 0d	          lda  ra        ; get a
.0d61	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0d62	8a		          txa            ; get x
.0d63	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d64	98		          tya            ; get y
.0d65	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d66	ad 7b 0d	          lda  pc+1      ; get pch
.0d69	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d6a	ad 7a 0d	          lda  pc        ; get pcl
.0d6d	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d6e	ad 78 0d	          lda  rp        ; get rp
.0d71	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d72	ad 79 0d	          lda  ra        ; get a
.0d75	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d76	58		          cli
.0d77	60		          rts
>0d78	00		rp        .byte     0
>0d79	00		ra        .byte     0
>0d7a	00 00		pc        .word     0
.0d7c			pull
.0d7c			pop
.0d7c	78		          sei
.0d7d	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d7e	8d b1 0d	          sta  pc        ; save pcl
.0d81	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d82	8d b2 0d	          sta  pc+1      ; save pch
.0d85	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d86	a8		          tay            ; set y
.0d87	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0d88	aa		          tax            ; set x
.0d89	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0d8a	8d b0 0d	          sta  ra        ; save a
.0d8d	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0d8e	8d af 0d	          sta  rp        ; save rp
.0d91	68		          pla            ; stack : zp2l, zp1h, zp1l
.0d92	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0d94	68		          pla            ; stack : zp1h, zp1l
.0d95	85 fd		          sta  zpage2    ; get zpage2 High byte
.0d97	68		          pla            ; stack : zp1l
.0d98	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0d9a	68		          pla            ; stack :
.0d9b	85 fb		          sta  zpage1    ; get zpage1 High byte
.0d9d	ad b2 0d	          lda  pc+1      ; get pch
.0da0	48		          pha            ; stack : pch
.0da1	ad b1 0d	          lda  pc
.0da4	48		          pha            ; stack : pcl, pch
.0da5	ad af 0d	          lda  rp        ; get rp
.0da8	48		          pha            ; stack : rp, pcl, pch
.0da9	ad b0 0d	          lda  ra        ; set ra
.0dac	58		          cli
.0dad	28		          plp            ; stack : pcl, pch
.0dae	60		          rts
>0daf	00		rp        .byte     0
>0db0	00		ra        .byte     0
>0db1	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.0db3			blkfill
.0db3	20 3d 0d	bf0            jsr  push
.0db6	20 71 0e	               jsr  savezp1
.0db9	84 fc		               sty  zpage1+1
.0dbb	a0 00		               ldy  #$00
.0dbd	84 fb		               sty  zpage1
.0dbf	91 fb		bf1            sta  (zpage1),y
.0dc1	c8		               iny
.0dc2	d0 fb		               bne  bf1
.0dc4	20 80 0e	               jsr  restzp1
.0dc7	20 7c 0d	               jsr  pop
.0dca	60		               rts
.0dcb			memfill
.0dcb	20 3d 0d	               jsr  push
.0dce	20 b3 0d	mf1            jsr  blkfill
.0dd1	c8		               iny
.0dd2	ca		               dex
.0dd3	d0 f9		               bne  mf1
.0dd5	20 7c 0d	               jsr  pop
.0dd8	60		               rts
.0dd9			memmove
.0dd9	20 3d 0d	               jsr  push
.0ddc	ba		               tsx            ; On se crée un pointeur ...
.0ddd	8a		               txa
.0dde	18		               clc
.0ddf	69 0b		               adc  #11
.0de1	a8		               tay
.0de2	a2 06		               ldx  #$06
.0de4	b9 00 01	nextbyte       lda  $0100,y
.0de7	99 33 0e	               sta  words,y
.0dea	c8		               iny
.0deb	ca		               dex
.0dec	d0 f6		               bne  nextbyte
.0dee	ad 33 0e	               lda  s
.0df1	8d 0a 0e	               sta  source+1
.0df4	ad 34 0e	               lda  s+1
.0df7	8d 0b 0e	               sta  source+2
.0dfa	ad 35 0e	               lda  d
.0dfd	8d 07 0e	               sta  destin+1
.0e00	ad 36 0e	               lda  d+1
.0e03	8d 08 0e	               sta  destin+2
.0e06	ad ff ff	destin         lda  $ffff
.0e09	8d ff ff	source         sta  $ffff
.0e0c	ee 07 0e	               inc  destin+1
.0e0f	d0 03		               bne  src
.0e11	ee 08 0e	               inc  destin+2
.0e14	ee 0a 0e	src            inc  source+1
.0e17	d0 03		               bne  cnt
.0e19	ee 0b 0e	               inc  source+2
.0e1c	ad 37 0e	cnt            lda  compte
.0e1f	d0 08		               bne  decit
.0e21	ad 38 0e	               lda  compte+1
.0e24	f0 09		               beq  fini
.0e26	ce 38 0e	               dec  compte+1
.0e29	ce 37 0e	decit          dec  compte
.0e2c	4c 06 0e	               jmp  destin
.0e2f	20 7c 0d	fini           jsr  pop
.0e32	60		               rts
.0e33			words
>0e33	00 00		s         .word     $0000
>0e35	00 00		d         .word     $0000
>0e37	00 00		compte    .word     $0000
.0e39			decword
.0e39	20 3d 0d	               jsr  push
.0e3c	86 fd		               stx  zpage2
.0e3e	84 fe		               sty  zpage2+1
.0e40	20 7c 0d	               jsr  pop
.0e43	60		               rts
.0e44			inczp1
.0e44	08		               php
.0e45	e6 fb		               inc  zpage1
.0e47	d0 02		               bne  nopage
.0e49	e6 fc		               inc  zpage1+1
.0e4b	28		nopage         plp
.0e4c	60		               rts
.0e4d			deczp1
.0e4d	08		                php
.0e4e	48		                pha
.0e4f	c6 fb		                dec  zpage1
.0e51	d0 02		                bne  nopage
.0e53	c6 fc		                dec  zpage1+1
.0e55	c6 fb		nopage          dec  zpage1
.0e57	68		                pla
.0e58	28		                plp
.0e59	60		                rts
.0e5a			inczp2
.0e5a	08		               php
.0e5b	48		               pha
.0e5c	e6 fd		               inc  zpage2
.0e5e	d0 02		               bne  nopage
.0e60	e6 fe		               inc  zpage2+1
.0e62	68		nopage         pla
.0e63	28		               plp
.0e64	60		               rts
.0e65			deczp2
.0e65	08		               php
.0e66	48		               pha
.0e67	a5 fd		               lda  zpage2
.0e69	d0 02		               bne  nopage
.0e6b	c6 fe		               dec  zpage2+1
.0e6d	c6 fd		nopage         dec  zpage2
.0e6f	28		               plp
.0e70	60		               rts
.0e71			savezp1
.0e71	08		               php
.0e72	48		               pha
.0e73	a5 fb		               lda  zpage1
.0e75	8d ed 0e	               sta  zp1
.0e78	a5 fc		               lda  zpage1+1
.0e7a	8d ee 0e	               sta  zp1+1
.0e7d	68		               pla
.0e7e	28		               plp
.0e7f	60		               rts
.0e80			restzp1
.0e80	08		               php
.0e81	48		               pha
.0e82	ad ed 0e	               lda zp1
.0e85	85 fb		               sta zpage1
.0e87	ad ee 0e	               lda zp1+1
.0e8a	85 fc		               sta zpage1+1
.0e8c	68		               pla
.0e8d	28		               plp
.0e8e	60		               rts
.0e8f			savezp2
.0e8f	08		         php
.0e90	48		         pha
.0e91	a5 fd		         lda zpage2
.0e93	8d ef 0e	         sta zp2
.0e96	a5 fe		         lda zpage2+1
.0e98	8d f0 0e	         sta zp2+1
.0e9b	68		         pla
.0e9c	28		         plp
.0e9d	60		         rts
.0e9e			restzp2
.0e9e	08		                php
.0e9f	48		                pha
.0ea0	ad ef 0e	                lda  zp2
.0ea3	85 fd		                sta  zpage2
.0ea5	ad f0 0e	                lda  zp2+1
.0ea8	85 fe		                sta  zpage2+1
.0eaa	68		                pla
.0eab	28		                plp
.0eac	60		                rts
.0ead			xy2addr
.0ead	08		                php
.0eae	48		                pha
.0eaf	8a		                txa
.0eb0	48		                pha
.0eb1	98		                tya
.0eb2	48		                pha
.0eb3	ad e8 0e	                lda     addr1+1
.0eb6	8d ea 0e	                sta     addr2+1
.0eb9	ad e7 0e	                lda     addr1
.0ebc	8d e9 0e	                sta     addr2
.0ebf	c0 00		                cpy     #$00
.0ec1	f0 0f		                beq     addx
.0ec3	18		moreline        clc
.0ec4	6d e6 0e	                adc     ymult
.0ec7	90 03		                bcc     norepy
.0ec9	ee ea 0e	                inc     addr2+1
.0ecc	8d e9 0e	norepy          sta     addr2
.0ecf	88		                dey
.0ed0	d0 f1		                bne     moreline
.0ed2	8a		addx            txa
.0ed3	18		                clc
.0ed4	6d e9 0e	                adc     addr2
.0ed7	90 03		                bcc     thatsit
.0ed9	ee ea 0e	                inc     addr2+1
.0edc	8d e9 0e	thatsit         sta     addr2
.0edf	68		                pla
.0ee0	a8		                tay
.0ee1	68		                pla
.0ee2	aa		                tax
.0ee3	68		                pla
.0ee4	28		                plp
.0ee5	60		                rts
>0ee6	28		ymult          .byte     40
>0ee7	00 00		addr1          .word     $0000
>0ee9	00 00		addr2          .word     $0000
>0eeb	00 00		bytecnt        .word     $0000
>0eed	00 00		zp1        .word   $0000
>0eef	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>0ef1	01		a2hexcol       .byte     1              ; pour aputscxy
>0ef2	00		a2hexbkcol     .byte     %00000000
.0ef3			a2hexpos
>0ef3	00		a2hexpx        .byte     0              ; pour aputsxy
>0ef4	00		a2hexpy        .byte     0
>0ef5	24		a2hexprefix    .byte     "$"            ; pour aputs
>0ef6	00 00		a2hexstr       .word     $00
>0ef8	00 00		               .word     $00
>0efa	00		               .byte     0              ; 0 end string
.0efb			putahexfmtxy
.0efb	20 3d 0d	               jsr  push
.0efe	20 4a 0f	               jsr  a2hex
.0f01	ae f3 0e	               ldx  a2hexpx
.0f04	ac f4 0e	               ldy  a2hexpy
.0f07	20 66 0c	               jsr  gotoxy
.0f0a	a2 f5		               ldx  #<a2hexprefix
.0f0c	a0 0e		               ldy  #>a2hexprefix
.0f0e	20 4c 0c	               jsr  puts
.0f11	20 7c 0d	               jsr  pop
.0f14	60		               rts
.0f15			putahexfmt
.0f15	20 3d 0d	               jsr  push
.0f18	20 4a 0f	               jsr  a2hex
.0f1b	a2 f5		               ldx  #<a2hexprefix
.0f1d	a0 0e		               ldy  #>a2hexprefix
.0f1f	20 4c 0c	               jsr  puts
.0f22	20 7c 0d	               jsr  pop
.0f25	60		               rts
.0f26			putahex
.0f26	20 3d 0d	               jsr  push
.0f29	20 4a 0f	               jsr  a2hex
.0f2c	a2 f6		               ldx  #<a2hexstr
.0f2e	a0 0e		               ldy  #>a2hexstr
.0f30	20 4c 0c	               jsr  puts
.0f33	20 7c 0d	               jsr  pop
.0f36	60		               rts
.0f37			nib2hex
.0f37	08		               php
.0f38	29 0f		               and  #$0f
.0f3a	f8		               sed
.0f3b	18		               clc
.0f3c	69 90		               adc  #$90
.0f3e	69 40		               adc  #$40
.0f40	d8		               cld
.0f41	28		               plp
.0f42	60		               rts
.0f43			lsra4bits
.0f43	08		               php
.0f44	4a		               lsr
.0f45	4a		               lsr
.0f46	4a		               lsr
.0f47	4a		               lsr
.0f48	28		               plp
.0f49	60		               rts
.0f4a			a2hex
.0f4a	08		               php
.0f4b	48		               pha
.0f4c	48		               pha
.0f4d	20 43 0f	               jsr  lsra4bits
.0f50	20 37 0f	               jsr  nib2hex
.0f53	8d f6 0e	               sta  a2hexstr
.0f56	68		               pla
.0f57	20 37 0f	               jsr  nib2hex
.0f5a	8d f7 0e	               sta  a2hexstr+1
.0f5d	a9 00		               lda  #$00                ; set end of string
.0f5f	8d f8 0e	               sta  a2hexstr+2
.0f62	68		               pla
.0f63	28		               plp
.0f64	60		               rts
.0f65			xy2hex
.0f65	20 3d 0d	               jsr  push
.0f68	20 4a 0f	               jsr  a2hex
.0f6b	8a		               txa
.0f6c	48		               pha
.0f6d	20 43 0f	               jsr  lsra4bits
.0f70	20 37 0f	               jsr  nib2hex
.0f73	8d f6 0e	               sta  a2hexstr
.0f76	68		               pla
.0f77	20 37 0f	               jsr  nib2hex
.0f7a	8d f7 0e	               sta  a2hexstr+1
.0f7d	98		               tya
.0f7e	48		               pha
.0f7f	20 43 0f	               jsr  lsra4bits
.0f82	20 37 0f	               jsr  nib2hex
.0f85	8d f8 0e	               sta  a2hexstr+2
.0f88	68		               pla
.0f89	20 37 0f	               jsr  nib2hex
.0f8c	8d f9 0e	               sta  a2hexstr+3
.0f8f	a9 00		               lda  #$00                ; 0 ended string
.0f91	8d fa 0e	               sta  a2hexstr+4
.0f94	20 7c 0d	               jsr  pop
.0f97			atobin
.0f97	20 3d 0d	               jsr     push
.0f9a	a2 08		               ldx     #8
.0f9c	a0 00		               ldy     #0
.0f9e	2a		nextbit        rol
.0f9f	48		               pha
.0fa0	69 00		               adc     #$00
.0fa2	29 01		               and     #$01
.0fa4	20 37 0f	               jsr     nib2hex
.0fa7	99 b8 0f	               sta     abin,y
.0faa	68		               pla
.0fab	c8		               iny
.0fac	ca		               dex
.0fad	d0 ef		               bne     nextbit
.0faf	a9 00		               lda     #0
.0fb1	99 b8 0f	               sta     abin,y
.0fb4	20 7c 0d	               jsr     pull
.0fb7	60		               rts
>0fb8	30 30 30 30	abin           .null   "00000000"
>0fbc	30 30 30 30 00
.0fc1			putabin
.0fc1	20 97 0f	               jsr     atobin
.0fc4	20 3d 0d	               jsr     push
.0fc7	a2 b8		               ldx     #<abin
.0fc9	a0 0f		               ldy     #>abin
.0fcb	20 4c 0c	               jsr     puts
.0fce	20 7c 0d	               jsr     pop
.0fd1	60		               rts
.0fd2			putabinfmt
.0fd2	08		               php
.0fd3	48		               pha
.0fd4	a9 25		               lda     #"%"
.0fd6	20 46 0c	               jsr     putch
.0fd9	68		               pla
.0fda	20 c1 0f	               jsr     putabin
.0fdd	28		               plp
.0fde	60		               rts
.0fdf			putabinxy
.0fdf	20 66 0c	               jsr     gotoxy
.0fe2	20 c1 0f	               jsr     putabin
.0fe5	60		               rts
.0fe6			putabinfmtxy
.0fe6	20 66 0c	               jsr     gotoxy
.0fe9	20 d2 0f	               jsr     putabinfmt
.0fec	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

.0fed			waitstop
.0fed	20 3d 0d	                jsr     push
.0ff0	20 ed f6	wait            jsr     k_stop
.0ff3	d0 fb		                bne     wait
.0ff5	20 7c 0d	                jsr     pop
.0ff8	60		                rts
.0ff9			anykey
.0ff9	08		                php
.0ffa	48		                pha
.0ffb	a5 cb		nokey           lda 203
.0ffd	c9 40		                cmp #64
.0fff	f0 fa		                beq nokey
.1001	20 07 10	                jsr releasekey
.1004	68		                pla
.1005	28		                plp
.1006	60		                rts
.1007			releasekey
.1007	08		                php
.1008	48		                pha
.1009	a5 cb		keypressed      lda 203
.100b	c9 40		                cmp #64
.100d	d0 fa		                bne keypressed
.100f	68		                pla
.1010	28		                plp
.1011	60		                rts
.1012			getkey
.1012	20 cf ff	again           jsr     chrin
.1015	d0 fb		                bne     again
.1017	60		                rts
.1018			waitkey
.1018	20 3d 0d	                jsr     push
.101b	8d 30 10	                sta     thekey
.101e	20 e4 ff	nope            jsr     getin
.1021	20 d2 ff	                jsr     chrout
.1024	cd 30 10	                cmp     thekey
.1027	d0 f5		                bne     nope
.1029	20 d2 ff	                jsr     chrout
.102c	20 7c 0d	                jsr     pop
.102f	60		                rts
>1030	00		thekey          .byte   0
.1031			waitspace
.1031	20 3d 0d	                jsr     push
.1034	a9 7f		wait            lda     #$7f  ;%01111111
.1036	8d 00 dc	                sta     $dc00
.1039	ad 01 dc	                lda     $dc01
.103c	29 10		                and     #$10  ;mask %00010000
.103e	d0 f4		                bne     wait
.1040	20 7c 0d	                jsr     pop
.1043			waitsstop
.1043	20 3d 0d	                jsr     push
.1046	20 ed f6	wait            jsr     k_stop  ;%01111111
.1049	d0 fb		                bne     wait
.104b	20 7c 0d	                jsr     pop
.104e			waitreturn
.104e	20 3d 0d	                jsr     push
.1051	ad 6d 10	                lda     thecount
.1054	8d 00 04	                sta     scrnram
.1057	a9 02		                lda     #$02
.1059	8d 00 d8	                sta     colorram
.105c	20 e4 ff	nope            jsr     getin
.105f	20 d2 ff	                jsr     chrout
.1062	c9 0d		                cmp     #$0d
.1064	d0 f6		                bne     nope
.1066	ee 6d 10	                inc     thecount
.1069	20 7c 0d	                jsr     pop
.106c	60		                rts
>106d	01		thecount        .byte   $01

;******  Return to file: charedit.asm


;******  End of listing

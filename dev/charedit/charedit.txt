
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Sun Nov 12 17:43:20 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm

=$0d			flashcol = vvert1

;******  Return to file: charedit.asm

=$0400			scrnnewram     = $0400
=14			charsdef       = 14
=$0d			mesgrid_left   = vvert1
=9			grid_top       =         9
=1			grid_left      =         1
=16			grid_bot       =         grid_top + 7
=8			grid_right     =         grid_left + 7
=$0d			mesgcol        =         vvert1
.080d			main
.080d	20 19 19	               jsr  push
.0810	20 cc 17	               jsr  screendis
.0813	20 e6 17	               jsr  scrmaninit
.0816	20 9e 0c	               jsr  copycharset
.0819	20 88 0c	               jsr  setscreenptr
.081c	20 ff 0c	               jsr  staticscreen
.081f	20 d9 17	               jsr  screenena
.0822	a9 00		               lda  #$00
.0824	8d b4 13	               sta  fkeyset
.0827	20 3b 0d	               jsr  showfkeys
.082a	20 58 19	               jsr  pop
.082d	20 0b 13	               jsr  f8action
.0830	20 0b 13	               jsr  f8action
.0833	a9 00		               lda  #$00
.0835	20 c0 09	               jsr  keyaction
.0838	20 19 19	               jsr  push
.083b	a2 00		               ldx  #0
.083d	a0 00		               ldy  #0
.083f	20 42 18	               jsr  gotoxy
.0842	20 58 19	               jsr  pop
.0845	20 06 18	               jsr  cls
.0848	20 19 19	               jsr  push
.084b	a2 c0		               ldx  #<blankmsg
.084d	a0 13		               ldy  #>blankmsg
.084f	20 b1 18	               jsr  putscxy
.0852	a2 ef		               ldx  #<bye_msg
.0854	a0 15		               ldy  #>bye_msg
.0856	20 b1 18	               jsr  putscxy
.0859	20 58 19	               jsr  pop
.085c	20 19 19	               jsr  push
.085f	a2 c0		               ldx  #<blankmsg
.0861	a0 13		               ldy  #>blankmsg
.0863	20 b1 18	               jsr  putscxy
.0866	a2 11		               ldx  #<any_msg
.0868	a0 16		               ldy  #>any_msg
.086a	20 b1 18	               jsr  putscxy
.086d	20 58 19	               jsr  pop
.0870	20 19 19	               jsr  push
.0873	a2 00		               ldx  #0
.0875	a0 00		               ldy  #0
.0877	20 42 18	               jsr  gotoxy
.087a	20 58 19	               jsr  pop
.087d	20 39 1d	               jsr  getkey
.0880	20 66 fe	               jsr  k_warmboot
.0883	60		               rts
.0884			template
.0884	20 19 19	               jsr  push
.0887	20 58 19	               jsr  pop
.088a	60		               rts
.088b			showkeyval
.088b	20 19 19	               jsr  push
.088e	20 19 19	               jsr  push
.0891	a2 01		               ldx  #1
.0893	a0 13		               ldy  #19
.0895	20 42 18	               jsr  gotoxy
.0898	20 58 19	               jsr  pop
.089b	20 a5 1b	               jsr  putabin
.089e	20 19 19	               jsr  push
.08a1	a2 01		               ldx  #1
.08a3	a0 14		               ldy  #20
.08a5	20 42 18	               jsr  gotoxy
.08a8	20 58 19	               jsr  pop
.08ab	20 19 19	               jsr  push
.08ae	a2 7a		isx            ldx  #<txt1
.08b0	a0 09		isy            ldy  #>txt1
.08b2	20 28 18	               jsr  puts
.08b5	20 58 19	               jsr  pull
.08b8	a9 24		               lda  #'$'
.08ba	20 22 18	               jsr  putch
.08bd	ad b6 13	               lda  currentkey
.08c0	20 12 1b	               jsr  putahex
.08c3	20 19 19	               jsr  push
.08c6	a2 01		               ldx  #1
.08c8	a0 15		               ldy  #21
.08ca	20 42 18	               jsr  gotoxy
.08cd	20 58 19	               jsr  pop
.08d0	20 19 19	               jsr  push
.08d3	a2 85		isx            ldx  #<txt2
.08d5	a0 09		isy            ldy  #>txt2
.08d7	20 28 18	               jsr  puts
.08da	20 58 19	               jsr  pull
.08dd	a9 24		               lda  #'$'
.08df	20 22 18	               jsr  putch
.08e2	ad fe 0c	               lda  bitmapaddr+1
.08e5	20 12 1b	               jsr  putahex
.08e8	ad fd 0c	               lda  bitmapaddr
.08eb	20 12 1b	               jsr  putahex
.08ee	20 19 19	               jsr  push
.08f1	a2 01		               ldx  #1
.08f3	a0 16		               ldy  #22
.08f5	20 42 18	               jsr  gotoxy
.08f8	20 58 19	               jsr  pop
.08fb	20 19 19	               jsr  push
.08fe	a2 90		isx            ldx  #<txt3
.0900	a0 09		isy            ldy  #>txt3
.0902	20 28 18	               jsr  puts
.0905	20 58 19	               jsr  pull
.0908	a9 24		               lda  #'$'
.090a	20 22 18	               jsr  putch
.090d	ad b7 13	               lda  bitmapoffset
.0910	20 12 1b	               jsr  putahex
.0913	20 19 19	               jsr  push
.0916	a2 01		               ldx  #1
.0918	a0 17		               ldy  #23
.091a	20 42 18	               jsr  gotoxy
.091d	20 58 19	               jsr  pop
.0920	20 19 19	               jsr  push
.0923	a2 9d		isx            ldx  #<txt4
.0925	a0 09		isy            ldy  #>txt4
.0927	20 28 18	               jsr  puts
.092a	20 58 19	               jsr  pull
.092d	a9 24		               lda  #'$'
.092f	20 22 18	               jsr  putch
.0932	ad b9 13	               lda  mapaddr+1
.0935	20 12 1b	               jsr  putahex
.0938	ad b8 13	               lda  mapaddr
.093b	20 12 1b	               jsr  putahex
.093e	20 19 19	               jsr  push
.0941	a2 01		               ldx  #1
.0943	a0 18		               ldy  #24
.0945	20 42 18	               jsr  gotoxy
.0948	20 58 19	               jsr  pop
.094b	20 19 19	               jsr  push
.094e	a2 a8		isx            ldx  #<txt5
.0950	a0 09		isy            ldy  #>txt5
.0952	20 28 18	               jsr  puts
.0955	20 58 19	               jsr  pull
.0958	ad bf 13	               lda  curscl
.095b	20 12 1b	               jsr  putahex
.095e	a9 da		               lda  #$da
.0960	20 22 18	               jsr  putch
.0963	ad be 13	               lda  cursln
.0966	20 12 1b	               jsr  putahex
.0969	20 58 19	               jsr  pop
.096c	60		               rts
>096d	50 45 54 53	txt0           .null     "petscii :   "
>0971	43 49 49 20 3a 20 20 20 00
>097a	4b 45 59 20	txt1           .null     "key code: "
>097e	43 4f 44 45 3a 20 00
>0985	42 49 54 4d	txt2           .null     "bitmap..: "
>0989	41 50 2e 2e 3a 20 00
>0990	4f 46 46 53	txt3           .null     "offset..:   "
>0994	45 54 2e 2e 3a 20 20 20 00
>099d	4d 41 50 41	txt4           .null     "mapaddr.: "
>09a1	44 44 52 2e 3a 20 00
>09a8	43 55 52 53	txt5           .null     "cursval.: "
>09ac	56 41 4c 2e 3a 20 00
>09b3	53 54 41 43	txt6           .null     "stack......:"
>09b7	4b 2e 2e 2e 2e 2e 2e 3a 00
.09c0			keyaction
.09c0	20 19 19	               jsr  push
.09c3			loop
.09c3	20 39 1d	               jsr  getkey
.09c6	8d b6 13	               sta  currentkey
.09c9	c9 85		               cmp  #key_f1
.09cb	f0 23		               beq  f1
.09cd	c9 89		               cmp  #key_f2
.09cf	f0 25		               beq  f2
.09d1	c9 86		               cmp  #key_f3
.09d3	f0 27		               beq  f3
.09d5	c9 8a		               cmp  #key_f4
.09d7	f0 29		               beq  f4
.09d9	c9 87		               cmp  #key_f5
.09db	f0 2b		               beq  f5
.09dd	c9 8b		               cmp  #key_f6
.09df	f0 2d		               beq  f6
.09e1	c9 88		               cmp  #key_f7
.09e3	f0 2f		               beq  f7
.09e5	c9 8c		               cmp  #key_f8
.09e7	f0 31		               beq  f8
.09e9	c9 18		               cmp  #ctrl_x
.09eb	f0 33		               beq  quit
.09ed	4c c3 09	               jmp  loop
.09f0	20 b8 0e	f1             jsr  f1action
.09f3	4c c3 09	               jmp  loop
.09f6	20 7b 0f	f2             jsr  f2action
.09f9	4c c3 09	               jmp  loop
.09fc	20 13 10	f3             jsr  f3action
.09ff	4c c3 09	               jmp  loop
.0a02	20 ab 10	f4             jsr  f4action
.0a05	4c c3 09	               jmp  loop
.0a08	20 43 11	f5             jsr  f5action
.0a0b	4c c3 09	               jmp  loop
.0a0e	20 db 11	f6             jsr  f6action
.0a11	4c c3 09	               jmp  loop
.0a14	20 73 12	f7             jsr  f7action
.0a17	4c c3 09	               jmp  loop
.0a1a	20 0b 13	f8             jsr  f8action
.0a1d	4c c3 09	               jmp  loop
.0a20	20 58 19	quit           jsr  pop
.0a23	60		               rts
>0a24	0a 01 05	keyaction_msg  .byte vrose,1,5
>0a27	5b 4b 45 59	               .null     "[keyaction]"
>0a2b	41 43 54 49 4f 4e 5d 00
.0a33			editor
.0a33	20 19 19	               jsr  push
.0a36	20 19 19	               jsr  push
.0a39	a2 c0		               ldx  #<blankmsg
.0a3b	a0 13		               ldy  #>blankmsg
.0a3d	20 b1 18	               jsr  putscxy
.0a40	a2 da		               ldx  #<exit_msg
.0a42	a0 15		               ldy  #>exit_msg
.0a44	20 b1 18	               jsr  putscxy
.0a47	20 58 19	               jsr  pop
.0a4a	20 19 19	               jsr  push
.0a4d	a2 c0		               ldx  #<blankmsg
.0a4f	a0 13		               ldy  #>blankmsg
.0a51	20 b1 18	               jsr  putscxy
.0a54	a2 eb		               ldx  #<edit_msg
.0a56	a0 13		               ldy  #>edit_msg
.0a58	20 b1 18	               jsr  putscxy
.0a5b	20 58 19	               jsr  pop
.0a5e	a9 40		               lda  #'@'
.0a60	8d b6 13	               sta  currentkey
.0a63	20 19 19	               jsr  push
.0a66	a2 0d		               ldx  #13
.0a68	a0 0c		               ldy  #12
.0a6a	20 42 18	               jsr  gotoxy
.0a6d	20 58 19	               jsr  pop
.0a70	20 22 18	               jsr  putch
.0a73	aa		               tax
.0a74	bc 14 1c	               ldy  asciitorom,x
.0a77	8c b7 13	               sty  bitmapoffset
.0a7a	20 cf 0b	               jsr  drawbitmap
.0a7d	20 8b 0b	               jsr  setcurs
.0a80			ed_loop
.0a80	20 39 1d	               jsr  getkey
.0a83	8d b6 13	               sta  currentkey
.0a86	aa		               tax
.0a87	bc 14 1c	               ldy  asciitorom,x
.0a8a	8c b7 13	               sty  bitmapoffset
.0a8d	c9 91		cu             cmp  #cursu
.0a8f	d0 03		               bne  cd
.0a91	4c ea 0a	               jmp  do_up
.0a94	c9 11		cd             cmp  #cursd
.0a96	d0 03		               bne  cl
.0a98	4c fd 0a	               jmp  do_down
.0a9b	c9 9d		cl             cmp  #cursl
.0a9d	d0 03		               bne  cr
.0a9f	4c 10 0b	               jmp  do_left
.0aa2	c9 1d		cr             cmp  #cursr
.0aa4	d0 03		               bne  sp
.0aa6	4c 23 0b	               jmp  do_right
.0aa9	c9 20		sp             cmp  #$20
.0aab	d0 03		               bne  cx
.0aad	4c 36 0b	               jmp  do_swap
.0ab0	c9 18		cx             cmp  #ctrl_x
.0ab2	d0 03		               bne  rest
.0ab4	4c 3f 0b	               jmp  do_ctrlx
.0ab7			rest
.0ab7	20 19 19	               jsr  push
.0aba	a2 0d		               ldx  #13
.0abc	a0 0c		               ldy  #12
.0abe	20 42 18	               jsr  gotoxy
.0ac1	20 58 19	               jsr  pop
.0ac4	20 22 18	               jsr  putch
.0ac7	20 19 19	               jsr  push
.0aca	a2 11		               ldx  #17
.0acc	a0 05		               ldy  #5
.0ace	20 42 18	               jsr  gotoxy
.0ad1	20 58 19	               jsr  pop
.0ad4	20 df 1b	               jsr  atodec
.0ad7	20 19 19	               jsr  push
.0ada	a2 e3		isx            ldx  #<adec
.0adc	a0 1a		isy            ldy  #>adec
.0ade	20 28 18	               jsr  puts
.0ae1	20 58 19	               jsr  pull
.0ae4	20 cf 0b	               jsr  drawbitmap
.0ae7	4c 3c 0b	               jmp  totop
.0aea	ad be 13	do_up          lda  cursln
.0aed	c9 09		               cmp  #grid_top
.0aef	f0 4b		               beq  totop
.0af1	20 ad 0b	               jsr  clrcurs
.0af4	ce be 13	               dec  cursln
.0af7	20 8b 0b	               jsr  setcurs
.0afa	4c 3c 0b	               jmp  totop
.0afd	ad be 13	do_down        lda  cursln
.0b00	c9 10		               cmp  #grid_bot
.0b02	f0 38		               beq  totop
.0b04	20 ad 0b	               jsr  clrcurs
.0b07	ee be 13	               inc  cursln
.0b0a	20 8b 0b	               jsr  setcurs
.0b0d	4c 3c 0b	               jmp  totop
.0b10	ad bf 13	do_left        lda  curscl
.0b13	c9 01		               cmp  #grid_left
.0b15	f0 25		               beq  totop
.0b17	20 ad 0b	               jsr  clrcurs
.0b1a	ce bf 13	               dec  curscl
.0b1d	20 8b 0b	               jsr  setcurs
.0b20	4c 3c 0b	               jmp  totop
.0b23	ad bf 13	do_right       lda  curscl
.0b26	c9 08		               cmp  #grid_right
.0b28	f0 12		               beq  totop
.0b2a	20 ad 0b	               jsr  clrcurs
.0b2d	ee bf 13	               inc  curscl
.0b30	20 8b 0b	               jsr  setcurs
.0b33	4c 3c 0b	               jmp  totop
.0b36	20 66 0b	do_swap        jsr  do_eor
.0b39	4c 3c 0b	               jmp  totop
.0b3c			totop
.0b3c	4c 80 0a	               jmp  ed_loop
.0b3f	20 ad 0b	do_ctrlx       jsr  clrcurs
.0b42	20 19 19	               jsr  push
.0b45	a2 c0		               ldx  #<blankmsg
.0b47	a0 13		               ldy  #>blankmsg
.0b49	20 b1 18	               jsr  putscxy
.0b4c	a2 c5		               ldx  #<quit_msg
.0b4e	a0 15		               ldy  #>quit_msg
.0b50	20 b1 18	               jsr  putscxy
.0b53	20 58 19	               jsr  pop
.0b56	20 58 19	               jsr  pop
.0b59	60		               rts
>0b5a	0a 01 05	editor_msg     .byte vrose,1,5
>0b5d	5b 45 44 49	               .null     "[editor]"
>0b61	54 4f 52 5d 00
.0b66			do_eor
.0b66	20 19 19	               jsr  push
.0b69	a9 b8		               lda  #<mapaddr
.0b6b	85 fd		               sta  zpage2
.0b6d	a9 13		               lda  #>mapaddr+1
.0b6f	85 fe		               sta  zpage2+1
.0b71	ae be 13	               ldx  cursln     ; calcul de
.0b74	ca		               dex            ; l'offset de
.0b75	8a		               txa            ; la
.0b76	29 f7		               and  #$f7      ; ligne
.0b78	a8		               tay
.0b79	ae bf 13	               ldx  curscl
.0b7c	ca		               dex
.0b7d	bd ab 13	               lda  eorval,x
.0b80	51 fd		               eor  (zpage2),y
.0b82	20 8b 08	               jsr  showkeyval
.0b85	91 fd		               sta  (zpage2),y
.0b87	20 58 19	               jsr  pop
.0b8a	60		               rts
.0b8b			setcurs
.0b8b	20 19 19	               jsr  push
.0b8e	a2 01		               ldx  #grid_left
.0b90	ac be 13	               ldy  cursln
.0b93	20 42 18	               jsr  gotoxy
.0b96	a9 da		               lda  #$da
.0b98	20 22 18	               jsr  putch
.0b9b	ae bf 13	               ldx  curscl
.0b9e	e8		               inx
.0b9f	a0 08		               ldy  #grid_top-1
.0ba1	20 42 18	               jsr  gotoxy
.0ba4	a9 da		               lda  #$da
.0ba6	20 22 18	               jsr  putch
.0ba9	20 58 19	               jsr  pop
.0bac	60		               rts
.0bad			clrcurs
.0bad	20 19 19	               jsr  push
.0bb0	a2 01		               ldx  #grid_left
.0bb2	ac be 13	               ldy  cursln
.0bb5	20 42 18	               jsr  gotoxy
.0bb8	a9 20		               lda  #$20
.0bba	20 22 18	               jsr  putch
.0bbd	ae bf 13	               ldx  curscl
.0bc0	e8		               inx
.0bc1	a0 08		               ldy  #grid_top-1
.0bc3	20 42 18	               jsr  gotoxy
.0bc6	a9 20		               lda  #$20
.0bc8	20 22 18	               jsr  putch
.0bcb	20 58 19	               jsr  pop
.0bce	60		               rts
.0bcf			drawbitmap
.0bcf	20 19 19	               jsr  push
.0bd2	a9 29		               lda  #<letext       ; le pointeur
.0bd4	85 fd		               sta  zpage2
.0bd6	a9 2a		               lda  #<letext+1
.0bd8	85 fe		               sta  zpage2+1
.0bda	a9 01		               lda  #grid_left          ; la position
.0bdc	8d 27 0c	               sta  textline+1
.0bdf	a9 09		               lda  #grid_top
.0be1	8d 28 0c	               sta  textline+2
.0be4	20 32 0c	               jsr  calcmapaddr
.0be7	ad b8 13	               lda  mapaddr     ; on pointe sur la table des bitmaps
.0bea	85 fb		               sta  zpage1
.0bec	ad b9 13	               lda  mapaddr+1
.0bef	85 fc		               sta  zpage1+1
.0bf1	a0 00		drawchar       ldy  #$00
.0bf3	a2 09		               ldx  #grid_top      ;on replace la ...
.0bf5	8e fe 0b	               stx  isy+1          ;ligne de départ
.0bf8	20 19 19	nextline       jsr  push
.0bfb	a2 02		               ldx  #grid_left+1        ; la colonne
.0bfd	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.0bff	20 42 18	               jsr  gotoxy
.0c02	20 58 19	               jsr  pop
.0c05	b1 fb		               lda  (zpage1),y     ; on li une ligne
.0c07	20 83 1b	               jsr  atobin
.0c0a	20 61 0c	               jsr  abintograph
.0c0d	20 19 19	               jsr  push
.0c10	a2 da		isx            ldx  #<abin
.0c12	a0 1a		isy            ldy  #>abin
.0c14	20 28 18	               jsr  puts
.0c17	20 58 19	               jsr  pull
.0c1a	ee fe 0b	               inc  isy+1
.0c1d	c8		               iny
.0c1e	c0 08		               cpy  #$08
.0c20	30 d6		               bmi  nextline
.0c22	20 58 19	               jsr  pop
.0c25	60		               rts
>0c26	01 01 09	textline       .byte vblanc,grid_left,grid_top
>0c29	20 20 20 20	letext         .null "        "
>0c2d	20 20 20 20 00
.0c32			calcmapaddr
.0c32	20 19 19	               jsr  push
.0c35	ad fd 0c	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0c38	85 fb		               sta  zpage1
.0c3a	ad fe 0c	               lda  bitmapaddr+1
.0c3d	85 fc		               sta  zpage1+1
.0c3f	ae b7 13	               ldx  bitmapoffset
.0c42	e0 00		               cpx  #$00
.0c44	f0 08		               beq  thesame         ; sommes nous déja à 0
.0c46	a9 08		addagain       lda  #8
.0c48	20 84 0e	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0c4b	ca		               dex                 ; pour chaque caracteres
.0c4c	d0 f8		               bne  addagain
.0c4e	48		thesame        pha
.0c4f	a5 fb		               lda  zpage1
.0c51	8d b8 13	               sta  mapaddr
.0c54	a5 fc		               lda  zpage1+1
.0c56	8d b9 13	               sta  mapaddr+1
.0c59	68		               pla
.0c5a	20 8b 08	               jsr  showkeyval
.0c5d	20 58 19	out            jsr  pop
.0c60	60		               rts
.0c61			abintograph
.0c61	20 19 19	               jsr  push
.0c64	a9 da		               lda  #<abin
.0c66	85 fb		               sta  zpage1
.0c68	a9 1a		               lda  #>abin+1
.0c6a	85 fc		               sta  zpage1+1
.0c6c	a0 00		               ldy  #$00
.0c6e	b1 fb		nextbit        lda  (zpage1),y
.0c70	c9 30		               cmp  #$30
.0c72	f0 07		               beq  itszero
.0c74	a9 d1		itsone         lda  #$d1
.0c76	91 fb		               sta  (zpage1),y
.0c78	4c 7f 0c	               jmp  next
.0c7b	a9 20		itszero        lda  #$20
.0c7d	91 fb		               sta  (zpage1),y
.0c7f	c8		next           iny
.0c80	c0 08		               cpy  #$08
.0c82	30 ea		               bmi  nextbit
.0c84	20 58 19	               jsr  pop
.0c87	60		               rts
.0c88			setscreenptr
.0c88	20 19 19	               jsr  push
.0c8b	a9 08		               lda  #$08      ; basic commande to disable ...
.0c8d	20 d2 ff	               jsr  chrout    ; ... character set change.
.0c90	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.0c93	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.0c95	09 0e		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.0c97	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.0c9a	20 58 19	               jsr  pop
.0c9d	60		               rts
.0c9e			copycharset
.0c9e	20 19 19	               jsr  push
.0ca1	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0ca4	29 fe		               and  #%11111110     ;254
.0ca6	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0ca9	a5 01		               lda  u6510map       ;$01
.0cab	29 fb		               and  #%11111011     ;251
.0cad	85 01		               sta  u6510map       ;$01
.0caf	20 c4 0c	               jsr  memcopy
.0cb2	a5 01		               lda  u6510map       ;$01
.0cb4	09 04		               ora  #%00000100
.0cb6	85 01		               sta  u6510map       ;$01
.0cb8	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0cbb	09 01		               ora  #%00000001     ;254
.0cbd	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0cc0	20 58 19	               jsr  pop
.0cc3	60		               rts
.0cc4			memcopy
.0cc4	20 19 19	               jsr  push
.0cc7	ad f9 0c	               lda  startaddr
.0cca	85 fb		               sta  zpage1
.0ccc	ad fa 0c	               lda  startaddr+1
.0ccf	85 fc		               sta  zpage1+1
.0cd1	ad fd 0c	               lda  bitmapaddr
.0cd4	85 fd		               sta  zpage2
.0cd6	ad fe 0c	               lda  bitmapaddr+1
.0cd9	85 fe		               sta  zpage2+1
.0cdb	a0 00		               ldy  #$00
.0cdd	b1 fb		onemore        lda  (zpage1),y
.0cdf	91 fd		               sta  (zpage2),y
.0ce1	20 20 1a	               jsr  inczp1
.0ce4	20 38 1a	               jsr  inczp2
.0ce7	a5 fc		               lda  zpage1+1
.0ce9	cd fc 0c	               cmp  stopaddr+1
.0cec	d0 ef		               bne  onemore
.0cee	a5 fb		               lda  zpage1
.0cf0	cd fb 0c	               cmp  stopaddr
.0cf3	d0 e8		               bne  onemore
.0cf5	20 58 19	               jsr  pop
.0cf8	60		               rts
=14336			bitmapmem =    charsdef * 1024     ;Calcul de la position ram des caracteres.
=61440			mstopaddr =    $d000+(4*$800)
>0cf9	00 d0		startaddr      .word     $d000               ; 53248
>0cfb	00 f0		stopaddr       .word     mstopaddr           ; 55296
>0cfd	00 38		bitmapaddr     .word     bitmapmem           ; $3000, 12288
.0cff			staticscreen
.0cff	48		               pha
.0d00	a9 0c		               lda  #vgris1
.0d02	8d 20 d0	               sta  $d020
.0d05	68		               pla
.0d06	48		               pha
.0d07	a9 0b		               lda  #vgris
.0d09	8d 21 d0	               sta  $d021
.0d0c	68		               pla
.0d0d	20 db 0d	               jsr  showlines
.0d10	20 bc 0d	               jsr  showallchars
.0d13	20 23 0e	               jsr  showgrid
.0d16	20 3b 0d	               jsr  showfkeys
.0d19	20 19 19	               jsr  push
.0d1c	a2 c0		               ldx  #<blankmsg
.0d1e	a0 13		               ldy  #>blankmsg
.0d20	20 b1 18	               jsr  putscxy
.0d23	a2 c5		               ldx  #<quit_msg
.0d25	a0 15		               ldy  #>quit_msg
.0d27	20 b1 18	               jsr  putscxy
.0d2a	20 58 19	               jsr  pop
.0d2d	20 19 19	               jsr  push
.0d30	a2 00		               ldx  #0
.0d32	a0 07		               ldy  #7
.0d34	20 42 18	               jsr  gotoxy
.0d37	20 58 19	               jsr  pop
.0d3a	60		               rts
.0d3b			showfkeys
.0d3b	20 19 19	               jsr  push
.0d3e	ad b4 13	               lda  fkeyset
.0d41	c9 00		               cmp  #$0
.0d43	d0 3b		               bne  secondks
.0d45	a2 2c		               ldx #<f1abutton
.0d47	a0 16		               ldy #>f1abutton
.0d49	20 b1 18	               jsr putscxy
.0d4c	a2 46		               ldx #<f2abutton
.0d4e	a0 16		               ldy #>f2abutton
.0d50	20 b1 18	               jsr putscxy
.0d53	a2 60		               ldx #<f3abutton
.0d55	a0 16		               ldy #>f3abutton
.0d57	20 b1 18	               jsr putscxy
.0d5a	a2 7a		               ldx #<f4abutton
.0d5c	a0 16		               ldy #>f4abutton
.0d5e	20 b1 18	               jsr putscxy
.0d61	a2 94		               ldx #<f5abutton
.0d63	a0 16		               ldy #>f5abutton
.0d65	20 b1 18	               jsr putscxy
.0d68	a2 ae		               ldx #<f6abutton
.0d6a	a0 16		               ldy #>f6abutton
.0d6c	20 b1 18	               jsr putscxy
.0d6f	a2 c8		               ldx #<f7abutton
.0d71	a0 16		               ldy #>f7abutton
.0d73	20 b1 18	               jsr putscxy
.0d76	a2 e2		               ldx #<f8abutton
.0d78	a0 16		               ldy #>f8abutton
.0d7a	20 b1 18	               jsr putscxy
.0d7d	4c b8 0d	               jmp end
.0d80			secondks
.0d80	a2 fc		               ldx #<f1bbutton
.0d82	a0 16		               ldy #>f1bbutton
.0d84	20 b1 18	               jsr putscxy
.0d87	a2 16		               ldx #<f2bbutton
.0d89	a0 17		               ldy #>f2bbutton
.0d8b	20 b1 18	               jsr putscxy
.0d8e	a2 30		               ldx #<f3bbutton
.0d90	a0 17		               ldy #>f3bbutton
.0d92	20 b1 18	               jsr putscxy
.0d95	a2 4a		               ldx #<f4bbutton
.0d97	a0 17		               ldy #>f4bbutton
.0d99	20 b1 18	               jsr putscxy
.0d9c	a2 64		               ldx #<f5bbutton
.0d9e	a0 17		               ldy #>f5bbutton
.0da0	20 b1 18	               jsr putscxy
.0da3	a2 7e		               ldx #<f6bbutton
.0da5	a0 17		               ldy #>f6bbutton
.0da7	20 b1 18	               jsr putscxy
.0daa	a2 98		               ldx #<f7bbutton
.0dac	a0 17		               ldy #>f7bbutton
.0dae	20 b1 18	               jsr putscxy
.0db1	a2 b2		               ldx #<f8bbutton
.0db3	a0 17		               ldy #>f8bbutton
.0db5	20 b1 18	               jsr putscxy
.0db8	20 58 19	end            jsr  pop
.0dbb	60		               rts
.0dbc			showallchars
.0dbc	20 19 19	               jsr push
.0dbf	20 19 19	               jsr  push
.0dc2	a2 00		               ldx  #0
.0dc4	a0 00		               ldy  #0
.0dc6	20 42 18	               jsr  gotoxy
.0dc9	20 58 19	               jsr  pop
.0dcc	a2 00		               ldx  #$00
.0dce	8a		nextc          txa
.0dcf	9d 00 04	               sta  scrnnewram,x
.0dd2	e8		               inx
.0dd3	e0 80		               cpx  #$80
.0dd5	d0 f7		               bne  nextc
.0dd7	20 58 19	               jsr  pop
.0dda	60		               rts
.0ddb			showlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.0ddb	20 19 19	               jsr  push
.0dde	a2 28		               ldx  #40
.0de0	a9 40		               lda  #64
.0de2	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.0de5	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.0de8	ca		               dex
.0de9	e0 10		hline          cpx  #vlinepos
.0deb	10 03		               bpl  notyet
.0ded	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.0df0	e0 00		notyet         cpx  #$00
.0df2	d0 ee		               bne  nextl
.0df4	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.0df6	85 fb		               sta  zpage1
.0df8	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.0dfa	85 fc		               sta  zpage1+1
.0dfc	a0 00		               ldy  #0
.0dfe	a9 72		               lda  #114
.0e00	91 fb		               sta  (zpage1),y
.0e02	20 92 0e	               jsr  zp1add40
.0e05	a2 12		               ldx  #24-hline2
.0e07	a9 5d		               lda  #93
.0e09	91 fb		another93      sta  (zpage1),y
.0e0b	20 92 0e	               jsr  zp1add40
.0e0e	ca		               dex
.0e0f	d0 f8		               bne  another93
.0e11	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.0e13	85 fb		               sta  zpage1
.0e15	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.0e17	85 fc		               sta  zpage1+1
.0e19	a0 00		               ldy  #0
.0e1b	a9 73		               lda  #115
.0e1d	91 fb		               sta  (zpage1),y
.0e1f	20 58 19	               jsr  pop
.0e22	60		               rts
.0e23			showgrid
.0e23	20 19 19	               jsr  push
.0e26	20 cc 17	               jsr  screendis
.0e29	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.0e2b	85 fb		               sta  zpage1
.0e2d	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.0e2f	85 fc		               sta  zpage1+1
.0e31	a2 08		               ldx  #8
.0e33	a9 65		nextbox        lda  #101
.0e35	a0 09		               ldy  #9
.0e37	91 fb		               sta  (zpage1),y
.0e39	88		               dey
.0e3a	a9 4f		               lda  #79
.0e3c	91 fb		nextcol        sta  (zpage1),y
.0e3e	88		               dey
.0e3f	d0 fb		               bne  nextcol
.0e41	20 92 0e	               jsr  zp1add40
.0e44	ca		               dex
.0e45	d0 ec		               bne  nextbox
.0e47	a0 08		               ldy  #8
.0e49	a9 77		               lda  #119
.0e4b	91 fb		nextlin        sta  (zpage1),y
.0e4d	88		               dey
.0e4e	d0 fb		               bne  nextlin
.0e50	a9 3e		               lda  #$3e
.0e52	8d eb 05	               sta  scrnnewram+(40*(12))+11
.0e55	a9 70		               lda  #$70                     ;+
.0e57	8d c4 05	               sta  scrnnewram+(40*(11))+12
.0e5a	a9 43		               lda  #$43                    ;-
.0e5c	8d c5 05	               sta  scrnnewram+(40*(11))+13
.0e5f	a9 6e		               lda  #$6e                     ;+
.0e61	8d c6 05	               sta  scrnnewram+(40*(11))+14
.0e64	a9 5d		               lda  #$5d                     ;|
.0e66	8d ec 05	               sta  scrnnewram+(40*(12))+12
.0e69	a9 5d		               lda  #$5d                     ;|
.0e6b	8d ee 05	               sta  scrnnewram+(40*(12))+14
.0e6e	a9 6d		               lda  #$6d                     ;+
.0e70	8d 14 06	               sta  scrnnewram+(40*(13))+12
.0e73	a9 43		               lda  #$43                     ;-
.0e75	8d 15 06	               sta  scrnnewram+(40*(13))+13
.0e78	a9 7d		               lda  #$7d                     ;+
.0e7a	8d 16 06	               sta  scrnnewram+(40*(13))+14
.0e7d	20 d9 17	               jsr screenena
.0e80	20 58 19	               jsr  pop
.0e83	60		               rts
.0e84			zp1addnum
.0e84	08		               php
.0e85	48		               pha
.0e86	18		               clc
.0e87	65 fb		               adc  zpage1
.0e89	90 02		               bcc  nocarry
.0e8b	e6 fc		               inc  zpage1+1
.0e8d	85 fb		nocarry        sta  zpage1
.0e8f	68		               pla
.0e90	28		               plp
.0e91	60		               rts
.0e92			zp1add40
.0e92	08		               php
.0e93	48		               pha
.0e94	18		               clc
.0e95	a5 fb		               lda  zpage1
.0e97	69 28		               adc  #40
.0e99	90 02		               bcc  nocarry
.0e9b	e6 fc		               inc  zpage1+1
.0e9d	85 fb		nocarry        sta  zpage1
.0e9f	68		               pla
.0ea0	28		               plp
.0ea1	60		               rts
.0ea2			delay
.0ea2	20 19 19	               jsr  push
.0ea5	a9 00		               lda  #$0
.0ea7	aa		               tax
.0ea8	a8		               tay
.0ea9	ca		xagain         dex
.0eaa	ca		               dex
.0eab	88		yagain         dey
.0eac	c0 00		               cpy  #$00
.0eae	d0 fb		               bne  yagain
.0eb0	e0 00		               cpx  #$00
.0eb2	d0 f5		               bne  xagain
.0eb4	20 58 19	               jsr  pop
.0eb7	60		               rts
.0eb8			f1action
.0eb8	48		               pha
.0eb9	a9 ff		               lda  #$ff
.0ebb	8d b3 13	               sta  editmode
.0ebe	ad b4 13	               lda  fkeyset
.0ec1	d0 5e		               bne  menub
.0ec3	20 19 19	               jsr  push
.0ec6	a2 c0		               ldx  #<blankmsg
.0ec8	a0 13		               ldy  #>blankmsg
.0eca	20 b1 18	               jsr  putscxy
.0ecd	a2 eb		               ldx  #<f1a_msg
.0ecf	a0 13		               ldy  #>f1a_msg
.0ed1	20 b1 18	               jsr  putscxy
.0ed4	20 58 19	               jsr  pop
.0ed7	08		               php
.0ed8	48		               pha
.0ed9	8a		               txa
.0eda	48		               pha
.0edb	ad 2c 16	               lda  f1abutton
.0ede	48		               pha
.0edf	a9 92		               lda  #146
.0ee1	8d 3b 16	               sta  f1abutton+15
.0ee4	a9 0d		               lda  #flashcol
.0ee6	8d 2c 16	               sta  f1abutton
.0ee9	a2 2c		               ldx  #<f1abutton
.0eeb	a0 16		               ldy  #>f1abutton
.0eed	20 b1 18	               jsr  putscxy
.0ef0	20 a2 0e	               jsr  delay
.0ef3	a9 12		               lda  #18
.0ef5	8d 3b 16	               sta  f1abutton+15
.0ef8	68		               pla
.0ef9	8d 2c 16	               sta  f1abutton
.0efc	a2 2c		               ldx  #<f1abutton
.0efe	a0 16		               ldy  #>f1abutton
.0f00	20 b1 18	               jsr  putscxy
.0f03	68		               pla
.0f04	aa		               tax
.0f05	68		               pla
.0f06	28		               plp
.0f07	20 33 0a	               jsr  editor
.0f0a	20 19 19	               jsr  push
.0f0d	a2 c0		               ldx  #<blankmsg
.0f0f	a0 13		               ldy  #>blankmsg
.0f11	20 b1 18	               jsr  putscxy
.0f14	a2 eb		               ldx  #<f1a_msg
.0f16	a0 13		               ldy  #>f1a_msg
.0f18	20 b1 18	               jsr  putscxy
.0f1b	20 58 19	               jsr  pop
.0f1e	4c 6a 0f	               jmp  out
.0f21	a9 00		menub          lda  #$0
.0f23	8d b3 13	               sta  editmode
.0f26	20 19 19	               jsr  push
.0f29	a2 c0		               ldx  #<blankmsg
.0f2b	a0 13		               ldy  #>blankmsg
.0f2d	20 b1 18	               jsr  putscxy
.0f30	a2 ba		               ldx  #<f1b_msg
.0f32	a0 14		               ldy  #>f1b_msg
.0f34	20 b1 18	               jsr  putscxy
.0f37	20 58 19	               jsr  pop
.0f3a	08		               php
.0f3b	48		               pha
.0f3c	8a		               txa
.0f3d	48		               pha
.0f3e	ad fc 16	               lda  f1bbutton
.0f41	48		               pha
.0f42	a9 92		               lda  #146
.0f44	8d 0b 17	               sta  f1bbutton+15
.0f47	a9 0d		               lda  #flashcol
.0f49	8d fc 16	               sta  f1bbutton
.0f4c	a2 fc		               ldx  #<f1bbutton
.0f4e	a0 16		               ldy  #>f1bbutton
.0f50	20 b1 18	               jsr  putscxy
.0f53	20 a2 0e	               jsr  delay
.0f56	a9 12		               lda  #18
.0f58	8d 0b 17	               sta  f1bbutton+15
.0f5b	68		               pla
.0f5c	8d fc 16	               sta  f1bbutton
.0f5f	a2 fc		               ldx  #<f1bbutton
.0f61	a0 16		               ldy  #>f1bbutton
.0f63	20 b1 18	               jsr  putscxy
.0f66	68		               pla
.0f67	aa		               tax
.0f68	68		               pla
.0f69	28		               plp
.0f6a	68		out            pla
.0f6b	60		               rts
>0f6c	01 01 05	test_msg       .byte     vblanc,1,5
>0f6f	5b 46 31 2d	               .null     "[f1-action]"
>0f73	41 43 54 49 4f 4e 5d 00
.0f7b			f2action
.0f7b	48		               pha
.0f7c	a9 00		               lda  #$0
.0f7e	8d b3 13	               sta  editmode
.0f81	ad b4 13	               lda  fkeyset
.0f84	d0 47		               bne  menub
.0f86	20 19 19	               jsr  push
.0f89	a2 c0		               ldx  #<blankmsg
.0f8b	a0 13		               ldy  #>blankmsg
.0f8d	20 b1 18	               jsr  putscxy
.0f90	a2 06		               ldx  #<f2a_msg
.0f92	a0 14		               ldy  #>f2a_msg
.0f94	20 b1 18	               jsr  putscxy
.0f97	20 58 19	               jsr  pop
.0f9a	08		               php
.0f9b	48		               pha
.0f9c	8a		               txa
.0f9d	48		               pha
.0f9e	ad 46 16	               lda  f2abutton
.0fa1	48		               pha
.0fa2	a9 92		               lda  #146
.0fa4	8d 55 16	               sta  f2abutton+15
.0fa7	a9 0d		               lda  #flashcol
.0fa9	8d 46 16	               sta  f2abutton
.0fac	a2 46		               ldx  #<f2abutton
.0fae	a0 16		               ldy  #>f2abutton
.0fb0	20 b1 18	               jsr  putscxy
.0fb3	20 a2 0e	               jsr  delay
.0fb6	a9 12		               lda  #18
.0fb8	8d 55 16	               sta  f2abutton+15
.0fbb	68		               pla
.0fbc	8d 46 16	               sta  f2abutton
.0fbf	a2 46		               ldx  #<f2abutton
.0fc1	a0 16		               ldy  #>f2abutton
.0fc3	20 b1 18	               jsr  putscxy
.0fc6	68		               pla
.0fc7	aa		               tax
.0fc8	68		               pla
.0fc9	28		               plp
.0fca	4c 11 10	               jmp  out
.0fcd			menub
.0fcd	20 19 19	               jsr  push
.0fd0	a2 c0		               ldx  #<blankmsg
.0fd2	a0 13		               ldy  #>blankmsg
.0fd4	20 b1 18	               jsr  putscxy
.0fd7	a2 d1		               ldx  #<f2b_msg
.0fd9	a0 14		               ldy  #>f2b_msg
.0fdb	20 b1 18	               jsr  putscxy
.0fde	20 58 19	               jsr  pop
.0fe1	08		               php
.0fe2	48		               pha
.0fe3	8a		               txa
.0fe4	48		               pha
.0fe5	ad 16 17	               lda  f2bbutton
.0fe8	48		               pha
.0fe9	a9 92		               lda  #146
.0feb	8d 25 17	               sta  f2bbutton+15
.0fee	a9 0d		               lda  #flashcol
.0ff0	8d 16 17	               sta  f2bbutton
.0ff3	a2 16		               ldx  #<f2bbutton
.0ff5	a0 17		               ldy  #>f2bbutton
.0ff7	20 b1 18	               jsr  putscxy
.0ffa	20 a2 0e	               jsr  delay
.0ffd	a9 12		               lda  #18
.0fff	8d 25 17	               sta  f2bbutton+15
.1002	68		               pla
.1003	8d 16 17	               sta  f2bbutton
.1006	a2 16		               ldx  #<f2bbutton
.1008	a0 17		               ldy  #>f2bbutton
.100a	20 b1 18	               jsr  putscxy
.100d	68		               pla
.100e	aa		               tax
.100f	68		               pla
.1010	28		               plp
.1011	68		out            pla
.1012	60		               rts
.1013			f3action
.1013	48		               pha
.1014	a9 00		               lda  #$0
.1016	8d b3 13	               sta  editmode
.1019	ad b4 13	               lda  fkeyset
.101c	d0 47		               bne  menub
.101e	20 19 19	               jsr  push
.1021	a2 c0		               ldx  #<blankmsg
.1023	a0 13		               ldy  #>blankmsg
.1025	20 b1 18	               jsr  putscxy
.1028	a2 2c		               ldx  #<f3a_msg
.102a	a0 14		               ldy  #>f3a_msg
.102c	20 b1 18	               jsr  putscxy
.102f	20 58 19	               jsr  pop
.1032	08		               php
.1033	48		               pha
.1034	8a		               txa
.1035	48		               pha
.1036	ad 60 16	               lda  f3abutton
.1039	48		               pha
.103a	a9 92		               lda  #146
.103c	8d 6f 16	               sta  f3abutton+15
.103f	a9 0d		               lda  #flashcol
.1041	8d 60 16	               sta  f3abutton
.1044	a2 60		               ldx  #<f3abutton
.1046	a0 16		               ldy  #>f3abutton
.1048	20 b1 18	               jsr  putscxy
.104b	20 a2 0e	               jsr  delay
.104e	a9 12		               lda  #18
.1050	8d 6f 16	               sta  f3abutton+15
.1053	68		               pla
.1054	8d 60 16	               sta  f3abutton
.1057	a2 60		               ldx  #<f3abutton
.1059	a0 16		               ldy  #>f3abutton
.105b	20 b1 18	               jsr  putscxy
.105e	68		               pla
.105f	aa		               tax
.1060	68		               pla
.1061	28		               plp
.1062	4c a9 10	               jmp  out
.1065			menub
.1065	20 19 19	               jsr  push
.1068	a2 c0		               ldx  #<blankmsg
.106a	a0 13		               ldy  #>blankmsg
.106c	20 b1 18	               jsr  putscxy
.106f	a2 ea		               ldx  #<f3b_msg
.1071	a0 14		               ldy  #>f3b_msg
.1073	20 b1 18	               jsr  putscxy
.1076	20 58 19	               jsr  pop
.1079	08		               php
.107a	48		               pha
.107b	8a		               txa
.107c	48		               pha
.107d	ad 30 17	               lda  f3bbutton
.1080	48		               pha
.1081	a9 92		               lda  #146
.1083	8d 3f 17	               sta  f3bbutton+15
.1086	a9 0d		               lda  #flashcol
.1088	8d 30 17	               sta  f3bbutton
.108b	a2 30		               ldx  #<f3bbutton
.108d	a0 17		               ldy  #>f3bbutton
.108f	20 b1 18	               jsr  putscxy
.1092	20 a2 0e	               jsr  delay
.1095	a9 12		               lda  #18
.1097	8d 3f 17	               sta  f3bbutton+15
.109a	68		               pla
.109b	8d 30 17	               sta  f3bbutton
.109e	a2 30		               ldx  #<f3bbutton
.10a0	a0 17		               ldy  #>f3bbutton
.10a2	20 b1 18	               jsr  putscxy
.10a5	68		               pla
.10a6	aa		               tax
.10a7	68		               pla
.10a8	28		               plp
.10a9	68		out            pla
.10aa	60		               rts
.10ab			f4action
.10ab	48		               pha
.10ac	a9 00		               lda  #$0
.10ae	8d b3 13	               sta  editmode
.10b1	ad b4 13	               lda  fkeyset
.10b4	d0 47		               bne  menub
.10b6	20 19 19	               jsr  push
.10b9	a2 c0		               ldx  #<blankmsg
.10bb	a0 13		               ldy  #>blankmsg
.10bd	20 b1 18	               jsr  putscxy
.10c0	a2 53		               ldx  #<f4a_msg
.10c2	a0 14		               ldy  #>f4a_msg
.10c4	20 b1 18	               jsr  putscxy
.10c7	20 58 19	               jsr  pop
.10ca	08		               php
.10cb	48		               pha
.10cc	8a		               txa
.10cd	48		               pha
.10ce	ad 7a 16	               lda  f4abutton
.10d1	48		               pha
.10d2	a9 92		               lda  #146
.10d4	8d 89 16	               sta  f4abutton+15
.10d7	a9 0d		               lda  #flashcol
.10d9	8d 7a 16	               sta  f4abutton
.10dc	a2 7a		               ldx  #<f4abutton
.10de	a0 16		               ldy  #>f4abutton
.10e0	20 b1 18	               jsr  putscxy
.10e3	20 a2 0e	               jsr  delay
.10e6	a9 12		               lda  #18
.10e8	8d 89 16	               sta  f4abutton+15
.10eb	68		               pla
.10ec	8d 7a 16	               sta  f4abutton
.10ef	a2 7a		               ldx  #<f4abutton
.10f1	a0 16		               ldy  #>f4abutton
.10f3	20 b1 18	               jsr  putscxy
.10f6	68		               pla
.10f7	aa		               tax
.10f8	68		               pla
.10f9	28		               plp
.10fa	4c 41 11	               jmp  out
.10fd			menub
.10fd	20 19 19	               jsr  push
.1100	a2 c0		               ldx  #<blankmsg
.1102	a0 13		               ldy  #>blankmsg
.1104	20 b1 18	               jsr  putscxy
.1107	a2 02		               ldx  #<f4b_msg
.1109	a0 15		               ldy  #>f4b_msg
.110b	20 b1 18	               jsr  putscxy
.110e	20 58 19	               jsr  pop
.1111	08		               php
.1112	48		               pha
.1113	8a		               txa
.1114	48		               pha
.1115	ad 4a 17	               lda  f4bbutton
.1118	48		               pha
.1119	a9 92		               lda  #146
.111b	8d 59 17	               sta  f4bbutton+15
.111e	a9 0d		               lda  #flashcol
.1120	8d 4a 17	               sta  f4bbutton
.1123	a2 4a		               ldx  #<f4bbutton
.1125	a0 17		               ldy  #>f4bbutton
.1127	20 b1 18	               jsr  putscxy
.112a	20 a2 0e	               jsr  delay
.112d	a9 12		               lda  #18
.112f	8d 59 17	               sta  f4bbutton+15
.1132	68		               pla
.1133	8d 4a 17	               sta  f4bbutton
.1136	a2 4a		               ldx  #<f4bbutton
.1138	a0 17		               ldy  #>f4bbutton
.113a	20 b1 18	               jsr  putscxy
.113d	68		               pla
.113e	aa		               tax
.113f	68		               pla
.1140	28		               plp
.1141	68		out            pla
.1142	60		               rts
.1143			f5action
.1143	48		               pha
.1144	a9 00		               lda  #$0
.1146	8d b3 13	               sta  editmode
.1149	ad b4 13	               lda  fkeyset
.114c	d0 47		               bne  menub
.114e	20 19 19	               jsr  push
.1151	a2 c0		               ldx  #<blankmsg
.1153	a0 13		               ldy  #>blankmsg
.1155	20 b1 18	               jsr  putscxy
.1158	a2 70		               ldx  #<f5a_msg
.115a	a0 14		               ldy  #>f5a_msg
.115c	20 b1 18	               jsr  putscxy
.115f	20 58 19	               jsr  pop
.1162	08		               php
.1163	48		               pha
.1164	8a		               txa
.1165	48		               pha
.1166	ad 94 16	               lda  f5abutton
.1169	48		               pha
.116a	a9 92		               lda  #146
.116c	8d a3 16	               sta  f5abutton+15
.116f	a9 0d		               lda  #flashcol
.1171	8d 94 16	               sta  f5abutton
.1174	a2 94		               ldx  #<f5abutton
.1176	a0 16		               ldy  #>f5abutton
.1178	20 b1 18	               jsr  putscxy
.117b	20 a2 0e	               jsr  delay
.117e	a9 12		               lda  #18
.1180	8d a3 16	               sta  f5abutton+15
.1183	68		               pla
.1184	8d 94 16	               sta  f5abutton
.1187	a2 94		               ldx  #<f5abutton
.1189	a0 16		               ldy  #>f5abutton
.118b	20 b1 18	               jsr  putscxy
.118e	68		               pla
.118f	aa		               tax
.1190	68		               pla
.1191	28		               plp
.1192	4c d9 11	               jmp  out
.1195			menub
.1195	20 19 19	               jsr  push
.1198	a2 c0		               ldx  #<blankmsg
.119a	a0 13		               ldy  #>blankmsg
.119c	20 b1 18	               jsr  putscxy
.119f	a2 17		               ldx  #<f5b_msg
.11a1	a0 15		               ldy  #>f5b_msg
.11a3	20 b1 18	               jsr  putscxy
.11a6	20 58 19	               jsr  pop
.11a9	08		               php
.11aa	48		               pha
.11ab	8a		               txa
.11ac	48		               pha
.11ad	ad 64 17	               lda  f5bbutton
.11b0	48		               pha
.11b1	a9 92		               lda  #146
.11b3	8d 73 17	               sta  f5bbutton+15
.11b6	a9 0d		               lda  #flashcol
.11b8	8d 64 17	               sta  f5bbutton
.11bb	a2 64		               ldx  #<f5bbutton
.11bd	a0 17		               ldy  #>f5bbutton
.11bf	20 b1 18	               jsr  putscxy
.11c2	20 a2 0e	               jsr  delay
.11c5	a9 12		               lda  #18
.11c7	8d 73 17	               sta  f5bbutton+15
.11ca	68		               pla
.11cb	8d 64 17	               sta  f5bbutton
.11ce	a2 64		               ldx  #<f5bbutton
.11d0	a0 17		               ldy  #>f5bbutton
.11d2	20 b1 18	               jsr  putscxy
.11d5	68		               pla
.11d6	aa		               tax
.11d7	68		               pla
.11d8	28		               plp
.11d9	68		out            pla
.11da	60		               rts
.11db			f6action
.11db	48		               pha
.11dc	a9 00		               lda  #$0
.11de	8d b3 13	               sta  editmode
.11e1	ad b4 13	               lda  fkeyset
.11e4	d0 47		               bne  menub
.11e6	20 19 19	               jsr  push
.11e9	a2 c0		               ldx  #<blankmsg
.11eb	a0 13		               ldy  #>blankmsg
.11ed	20 b1 18	               jsr  putscxy
.11f0	a2 8a		               ldx  #<f6a_msg
.11f2	a0 14		               ldy  #>f6a_msg
.11f4	20 b1 18	               jsr  putscxy
.11f7	20 58 19	               jsr  pop
.11fa	08		               php
.11fb	48		               pha
.11fc	8a		               txa
.11fd	48		               pha
.11fe	ad ae 16	               lda  f6abutton
.1201	48		               pha
.1202	a9 92		               lda  #146
.1204	8d bd 16	               sta  f6abutton+15
.1207	a9 0d		               lda  #flashcol
.1209	8d ae 16	               sta  f6abutton
.120c	a2 ae		               ldx  #<f6abutton
.120e	a0 16		               ldy  #>f6abutton
.1210	20 b1 18	               jsr  putscxy
.1213	20 a2 0e	               jsr  delay
.1216	a9 12		               lda  #18
.1218	8d bd 16	               sta  f6abutton+15
.121b	68		               pla
.121c	8d ae 16	               sta  f6abutton
.121f	a2 ae		               ldx  #<f6abutton
.1221	a0 16		               ldy  #>f6abutton
.1223	20 b1 18	               jsr  putscxy
.1226	68		               pla
.1227	aa		               tax
.1228	68		               pla
.1229	28		               plp
.122a	4c 71 12	               jmp  out
.122d			menub
.122d	20 19 19	               jsr  push
.1230	a2 c0		               ldx  #<blankmsg
.1232	a0 13		               ldy  #>blankmsg
.1234	20 b1 18	               jsr  putscxy
.1237	a2 2b		               ldx  #<f6b_msg
.1239	a0 15		               ldy  #>f6b_msg
.123b	20 b1 18	               jsr  putscxy
.123e	20 58 19	               jsr  pop
.1241	08		               php
.1242	48		               pha
.1243	8a		               txa
.1244	48		               pha
.1245	ad 7e 17	               lda  f6bbutton
.1248	48		               pha
.1249	a9 92		               lda  #146
.124b	8d 8d 17	               sta  f6bbutton+15
.124e	a9 0d		               lda  #flashcol
.1250	8d 7e 17	               sta  f6bbutton
.1253	a2 7e		               ldx  #<f6bbutton
.1255	a0 17		               ldy  #>f6bbutton
.1257	20 b1 18	               jsr  putscxy
.125a	20 a2 0e	               jsr  delay
.125d	a9 12		               lda  #18
.125f	8d 8d 17	               sta  f6bbutton+15
.1262	68		               pla
.1263	8d 7e 17	               sta  f6bbutton
.1266	a2 7e		               ldx  #<f6bbutton
.1268	a0 17		               ldy  #>f6bbutton
.126a	20 b1 18	               jsr  putscxy
.126d	68		               pla
.126e	aa		               tax
.126f	68		               pla
.1270	28		               plp
.1271	68		out            pla
.1272	60		               rts
.1273			f7action
.1273	48		               pha
.1274	a9 00		               lda  #$0
.1276	8d b3 13	               sta  editmode
.1279	ad b4 13	               lda  fkeyset
.127c	d0 47		               bne  menub
.127e	20 19 19	               jsr  push
.1281	a2 c0		               ldx  #<blankmsg
.1283	a0 13		               ldy  #>blankmsg
.1285	20 b1 18	               jsr  putscxy
.1288	a2 a4		               ldx  #<f7a_msg
.128a	a0 14		               ldy  #>f7a_msg
.128c	20 b1 18	               jsr  putscxy
.128f	20 58 19	               jsr  pop
.1292	08		               php
.1293	48		               pha
.1294	8a		               txa
.1295	48		               pha
.1296	ad c8 16	               lda  f7abutton
.1299	48		               pha
.129a	a9 92		               lda  #146
.129c	8d d7 16	               sta  f7abutton+15
.129f	a9 0d		               lda  #flashcol
.12a1	8d c8 16	               sta  f7abutton
.12a4	a2 c8		               ldx  #<f7abutton
.12a6	a0 16		               ldy  #>f7abutton
.12a8	20 b1 18	               jsr  putscxy
.12ab	20 a2 0e	               jsr  delay
.12ae	a9 12		               lda  #18
.12b0	8d d7 16	               sta  f7abutton+15
.12b3	68		               pla
.12b4	8d c8 16	               sta  f7abutton
.12b7	a2 c8		               ldx  #<f7abutton
.12b9	a0 16		               ldy  #>f7abutton
.12bb	20 b1 18	               jsr  putscxy
.12be	68		               pla
.12bf	aa		               tax
.12c0	68		               pla
.12c1	28		               plp
.12c2	4c 09 13	               jmp  out
.12c5			menub
.12c5	20 19 19	               jsr  push
.12c8	a2 c0		               ldx  #<blankmsg
.12ca	a0 13		               ldy  #>blankmsg
.12cc	20 b1 18	               jsr  putscxy
.12cf	a2 3d		               ldx  #<f7b_msg
.12d1	a0 15		               ldy  #>f7b_msg
.12d3	20 b1 18	               jsr  putscxy
.12d6	20 58 19	               jsr  pop
.12d9	08		               php
.12da	48		               pha
.12db	8a		               txa
.12dc	48		               pha
.12dd	ad 98 17	               lda  f7bbutton
.12e0	48		               pha
.12e1	a9 92		               lda  #146
.12e3	8d a7 17	               sta  f7bbutton+15
.12e6	a9 0d		               lda  #flashcol
.12e8	8d 98 17	               sta  f7bbutton
.12eb	a2 98		               ldx  #<f7bbutton
.12ed	a0 17		               ldy  #>f7bbutton
.12ef	20 b1 18	               jsr  putscxy
.12f2	20 a2 0e	               jsr  delay
.12f5	a9 12		               lda  #18
.12f7	8d a7 17	               sta  f7bbutton+15
.12fa	68		               pla
.12fb	8d 98 17	               sta  f7bbutton
.12fe	a2 98		               ldx  #<f7bbutton
.1300	a0 17		               ldy  #>f7bbutton
.1302	20 b1 18	               jsr  putscxy
.1305	68		               pla
.1306	aa		               tax
.1307	68		               pla
.1308	28		               plp
.1309	68		out            pla
.130a	60		               rts
.130b			f8action
.130b	48		               pha
.130c	a9 00		               lda  #$0
.130e	8d b3 13	               sta  editmode
.1311	ad b4 13	               lda  fkeyset
.1314	d0 47		               bne  menub
.1316	20 19 19	               jsr  push
.1319	a2 c0		               ldx  #<blankmsg
.131b	a0 13		               ldy  #>blankmsg
.131d	20 b1 18	               jsr  putscxy
.1320	a2 aa		               ldx  #<menub_msg
.1322	a0 15		               ldy  #>menub_msg
.1324	20 b1 18	               jsr  putscxy
.1327	20 58 19	               jsr  pop
.132a	08		               php
.132b	48		               pha
.132c	8a		               txa
.132d	48		               pha
.132e	ad e2 16	               lda  f8abutton
.1331	48		               pha
.1332	a9 92		               lda  #146
.1334	8d f1 16	               sta  f8abutton+15
.1337	a9 0d		               lda  #flashcol
.1339	8d e2 16	               sta  f8abutton
.133c	a2 e2		               ldx  #<f8abutton
.133e	a0 16		               ldy  #>f8abutton
.1340	20 b1 18	               jsr  putscxy
.1343	20 a2 0e	               jsr  delay
.1346	a9 12		               lda  #18
.1348	8d f1 16	               sta  f8abutton+15
.134b	68		               pla
.134c	8d e2 16	               sta  f8abutton
.134f	a2 e2		               ldx  #<f8abutton
.1351	a0 16		               ldy  #>f8abutton
.1353	20 b1 18	               jsr  putscxy
.1356	68		               pla
.1357	aa		               tax
.1358	68		               pla
.1359	28		               plp
.135a	4c a1 13	               jmp  swapit
.135d			menub
.135d	20 19 19	               jsr  push
.1360	a2 c0		               ldx  #<blankmsg
.1362	a0 13		               ldy  #>blankmsg
.1364	20 b1 18	               jsr  putscxy
.1367	a2 8f		               ldx  #<menua_msg
.1369	a0 15		               ldy  #>menua_msg
.136b	20 b1 18	               jsr  putscxy
.136e	20 58 19	               jsr  pop
.1371	08		               php
.1372	48		               pha
.1373	8a		               txa
.1374	48		               pha
.1375	ad b2 17	               lda  f8bbutton
.1378	48		               pha
.1379	a9 92		               lda  #146
.137b	8d c1 17	               sta  f8bbutton+15
.137e	a9 0d		               lda  #flashcol
.1380	8d b2 17	               sta  f8bbutton
.1383	a2 b2		               ldx  #<f8bbutton
.1385	a0 17		               ldy  #>f8bbutton
.1387	20 b1 18	               jsr  putscxy
.138a	20 a2 0e	               jsr  delay
.138d	a9 12		               lda  #18
.138f	8d c1 17	               sta  f8bbutton+15
.1392	68		               pla
.1393	8d b2 17	               sta  f8bbutton
.1396	a2 b2		               ldx  #<f8bbutton
.1398	a0 17		               ldy  #>f8bbutton
.139a	20 b1 18	               jsr  putscxy
.139d	68		               pla
.139e	aa		               tax
.139f	68		               pla
.13a0	28		               plp
.13a1	49 ff		swapit         eor  #$ff
.13a3	8d b4 13	               sta  fkeyset
.13a6	20 3b 0d	               jsr  showfkeys
.13a9	68		               pla
.13aa	60		               rts
>13ab	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>13af	08 04 02 01
>13b3	00		editmode       .byte     0
>13b4	00		fkeyset        .byte     0
>13b5	00		currentchar    .byte     0
>13b6	00		currentkey     .byte     0
>13b7	00		bitmapoffset   .byte     0
>13b8	00 00		mapaddr        .word     0
>13ba	00 00		byteaddr       .word     0
>13bc	00 00		gridaddr       .word     0
>13be	09		cursln         .byte     grid_top
>13bf	01		curscl         .byte     grid_left

;******  Processing file: messages.asm

>13c0	0d 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>13c4	20 20 20 20	               .null     "                                      "
>13c8	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>13d8	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>13e8	20 20 00
.13eb			f1a_msg
>13eb	0d 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>13ef	20 45 44 49	               .null     " edit mode: chr$(   )",146
>13f3	54 20 4d 4f 44 45 3a 20 43 48 52 24 28 20 20 20
>1403	29 92 00
.1406			f2a_msg
>1406	0d 00 05 92	save_msg       .byte     mesgcol,0,5,146
>140a	20 53 41 56	               .null     " save on cassette or disk? (c/d):"
>140e	45 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>141e	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.142c			f3a_msg
>142c	0d 00 05	load_msg       .byte     mesgcol,0,5
>142f	20 4c 4f 41	               .null     " load from cassette or disk? (c/d):"
>1433	44 20 46 52 4f 4d 20 43 41 53 53 45 54 54 45 20
>1443	4f 52 20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.1453			f4a_msg
>1453	0d 00 05	copy_msg       .byte     mesgcol,0,5
>1456	20 45 4e 54	               .null     " enter character to copy:"
>145a	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>146a	43 4f 50 59 3a 00
.1470			f5a_msg
>1470	0d 00 05	clear_msg      .byte     mesgcol,0,5
>1473	20 43 4c 45	               .null     " clear char: chr$(   )"
>1477	41 52 20 43 48 41 52 3a 20 43 48 52 24 28 20 20
>1487	20 29 00
.148a			f6a_msg
>148a	0d 00 05	fill_msg       .byte     mesgcol,0,5
>148d	20 46 49 4c	               .null     " fill char:  chr$(   )"
>1491	4c 20 43 48 41 52 3a 20 20 43 48 52 24 28 20 20
>14a1	20 29 00
.14a4			f7a_msg
>14a4	0d 00 05	work_msg       .byte     mesgcol,0,5
>14a7	20 45 4e 41	               .null     " enable work space"
>14ab	42 4c 45 20 57 4f 52 4b 20 53 50 41 43 45 00
.14ba			f1b_msg
>14ba	0d 00 05	rvrs_msg       .byte     mesgcol,0,5
>14bd	20 52 45 56	               .null     " reverse character:"
>14c1	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
.14d1			f2b_msg
>14d1	0d 00 05	invr_msg       .byte     mesgcol,0,5
>14d4	20 49 4e 56	               .null     " inverting character:"
>14d8	45 52 54 49 4e 47 20 43 48 41 52 41 43 54 45 52
>14e8	3a 00
.14ea			f3b_msg
>14ea	0d 00 05	flip_msg       .byte     mesgcol,0,5
>14ed	20 46 4c 49	               .null     " flipping character:"
>14f1	50 50 49 4e 47 20 43 48 41 52 41 43 54 45 52 3a
>1501	00
.1502			f4b_msg
>1502	0d 00 05	scrollr_msg    .byte     mesgcol,0,5
>1505	20 53 43 52	               .null     " scrolling right:"
>1509	4f 4c 4c 49 4e 47 20 52 49 47 48 54 3a 00
.1517			f5b_msg
>1517	0d 00 05	scrolll_msg    .byte     mesgcol,0,5
>151a	20 53 43 52	               .null     " scrolling left:"
>151e	4f 4c 4c 49 4e 47 20 4c 45 46 54 3a 00
.152b			f6b_msg
>152b	0d 00 05	scrollu_msg    .byte     mesgcol,0,5
>152e	20 53 43 52	               .null     " scrolling up:"
>1532	4f 4c 4c 49 4e 47 20 55 50 3a 00
.153d			f7b_msg
>153d	0d 00 05	scrolld_msg    .byte     mesgcol,0,5
>1540	20 53 43 52	               .null     " scrolling down:"
>1544	4f 4c 4c 49 4e 47 20 44 4f 57 4e 3a 00
>1551	0d 00 05	save_fname_msg .byte     mesgcol,0,5
>1554	20 53 41 56	               .null     " save: file name ------.chr"
>1558	45 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>1568	2d 2d 2d 2e 43 48 52 00
>1570	0d 00 05	load_fname_msg .byte     mesgcol,0,5
>1573	20 4c 4f 41	               .null     " load: file name ------.chr"
>1577	44 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>1587	2d 2d 2d 2e 43 48 52 00
>158f	0d 00 05	menua_msg      .byte     mesgcol,0,5
>1592	20 59 4f 55	               .null     " you are now in menu a."
>1596	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>15a6	20 41 2e 00
>15aa	0d 00 05	menub_msg      .byte     mesgcol,0,5
>15ad	20 59 4f 55	               .null     " you are now in menu b."
>15b1	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>15c1	20 42 2e 00
>15c5	0e 15 18 12	quit_msg       .byte     vblue1,21,24,18
>15c9	43 54 52 4c	               .text     "ctrl-x",146
>15cd	2d 58 92
>15d0	20 54 4f 20	               .null     " to quit."
>15d4	51 55 49 54 2e 00
>15da	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>15de	43 54 52 4c	               .text     "ctrl-x",146
>15e2	2d 58 92
>15e5	20 54 4f 20	               .null     " to menu."
>15e9	4d 45 4e 55 2e 00
>15ef	03 06 0c 12	bye_msg        .byte     vcyan,6,12,18
>15f3	20 54 48 41	               .null     " thanks and have a good day ",146
>15f7	4e 4b 53 20 41 4e 44 20 48 41 56 45 20 41 20 47
>1607	4f 4f 44 20 44 41 59 20 92 00
>1611	07 0a 18 12	any_msg        .byte     vjaune,10,24,18
>1615	20 41 4e 59	               .null         " any key to continue ",146
>1619	20 4b 45 59 20 54 4f 20 43 4f 4e 54 49 4e 55 45
>1629	20 92 00
=18			fkeyleft=18
=8			f1top=8
=1			menu1col = 1
=3			menu2col = 3
>162c	01 12 08	f1abutton      .byte     menu1col,fkeyleft,f1top       ;133
>162f	45 44 49 54	               .text     "edit....... "
>1633	2e 2e 2e 2e 2e 2e 2e 20
>163b	12		               .byte     18             ; position 15
>163c	20 20 20 46	               .text     "   f1   "
>1640	31 20 20 20
>1644	92 00		               .byte     146,0
>1646	01 12 0a	f2abutton      .byte     menu1col,fkeyleft,f1top+2     ;137
>1649	53 41 56 45	               .text     "save....... "
>164d	2e 2e 2e 2e 2e 2e 2e 20
>1655	12		               .byte     18            ; position 15
>1656	20 20 20 46	               .text     "   f2   "
>165a	32 20 20 20
>165e	92 00		               .byte     146,0
>1660	01 12 0c	f3abutton      .byte     menu1col,fkeyleft,f1top+4     ;134
>1663	4c 4f 41 44	               .text     "load....... "
>1667	2e 2e 2e 2e 2e 2e 2e 20
>166f	12		               .byte     18             ; position 15
>1670	20 20 20 46	               .text     "   f3   "
>1674	33 20 20 20
>1678	92 00		               .byte     146,0
>167a	01 12 0e	f4abutton      .byte     menu1col,fkeyleft,f1top+6     ;138
>167d	43 4f 50 59	               .text     "copy....... "
>1681	2e 2e 2e 2e 2e 2e 2e 20
>1689	12		               .byte     18             ; position 15
>168a	20 20 20 46	               .text     "   f4   "
>168e	34 20 20 20
>1692	92 00		               .byte     146,0
>1694	01 12 10	f5abutton      .byte     menu1col,fkeyleft,f1top+8     ;135
>1697	43 4c 45 41	               .text     "clear...... "
>169b	52 2e 2e 2e 2e 2e 2e 20
>16a3	12		               .byte     18             ; position 15
>16a4	20 20 20 46	               .text     "   f5   "
>16a8	35 20 20 20
>16ac	92 00		               .byte     146,0
>16ae	01 12 12	f6abutton      .byte     menu1col,fkeyleft,f1top+10    ;139
>16b1	46 49 4c 4c	               .text     "fill....... "
>16b5	2e 2e 2e 2e 2e 2e 2e 20
>16bd	12		               .byte     18             ; position 15
>16be	20 20 20 46	               .text     "   f6   "
>16c2	36 20 20 20
>16c6	92 00		               .byte     146,0
>16c8	01 12 14	f7abutton      .byte     menu1col,fkeyleft,f1top+12    ;136
>16cb	57 4f 52 4b	               .text     "work....... "
>16cf	2e 2e 2e 2e 2e 2e 2e 20
>16d7	12		               .byte     18             ; position 15
>16d8	20 20 20 46	               .text     "   f7   "
>16dc	37 20 20 20
>16e0	92 00		               .byte     146,0
>16e2	01 12 16	f8abutton      .byte     menu1col,fkeyleft,f1top+14    ;140
>16e5	46 55 4e 43	               .text     "function... "
>16e9	54 49 4f 4e 2e 2e 2e 20
>16f1	12		               .byte     18             ; position 15
>16f2	20 20 20 46	               .text     "   f8   "
>16f6	38 20 20 20
>16fa	92 00		               .byte     146,0
>16fc	03 12 08	f1bbutton      .byte     menu2col,fkeyleft,f1top
>16ff	52 45 56 45	               .text     "reverse.... "
>1703	52 53 45 2e 2e 2e 2e 20
>170b	12		               .byte     18             ; position 15
>170c	20 20 20 46	               .text     "   f1   "
>1710	31 20 20 20
>1714	92 00		               .byte     146,0
>1716	03 12 0a	f2bbutton      .byte     menu2col,fkeyleft,f1top+2
>1719	49 4e 56 45	               .text     "invert..... "
>171d	52 54 2e 2e 2e 2e 2e 20
>1725	12		               .byte     18             ; position 15
>1726	20 20 20 46	               .text     "   f2   "
>172a	32 20 20 20
>172e	92 00		               .byte     146,0
>1730	03 12 0c	f3bbutton      .byte     menu2col,fkeyleft,f1top+4
>1733	46 4c 49 50	               .text     "flip....... "
>1737	2e 2e 2e 2e 2e 2e 2e 20
>173f	12		               .byte     18             ; position 15
>1740	20 20 20 46	               .text     "   f3   "
>1744	33 20 20 20
>1748	92 00		               .byte     146,0
>174a	03 12 0e	f4bbutton      .byte     menu2col,fkeyleft,f1top+6
>174d	53 43 52 4f	               .text     "scroll r... "
>1751	4c 4c 20 52 2e 2e 2e 20
>1759	12		               .byte     18             ; position 15
>175a	20 20 20 46	               .text     "   f4   "
>175e	34 20 20 20
>1762	92 00		               .byte     146,0
>1764	03 12 10	f5bbutton      .byte     menu2col,fkeyleft,f1top+8
>1767	53 43 52 4f	               .text     "scroll l... "
>176b	4c 4c 20 4c 2e 2e 2e 20
>1773	12		               .byte     18             ; position 15
>1774	20 20 20 46	               .text     "   f5   "
>1778	35 20 20 20
>177c	92 00		               .byte     146,0
>177e	03 12 12	f6bbutton      .byte     menu2col,fkeyleft,f1top+10
>1781	53 43 52 4f	               .text     "scroll u... "
>1785	4c 4c 20 55 2e 2e 2e 20
>178d	12		               .byte     18             ; position 15
>178e	20 20 20 46	               .text     "   f6   "
>1792	36 20 20 20
>1796	92 00		               .byte     146,0
>1798	03 12 14	f7bbutton      .byte     menu2col,fkeyleft,f1top+12
>179b	53 43 52 4f	               .text     "scroll d... "
>179f	4c 4c 20 44 2e 2e 2e 20
>17a7	12		               .byte     18             ; position 15
>17a8	20 20 20 46	               .text     "   f7   "
>17ac	37 20 20 20
>17b0	92 00		               .byte     146,0
>17b2	03 12 16	f8bbutton      .byte     menu2col,fkeyleft,f1top+14
>17b5	46 55 4e 43	               .text     "function... "
>17b9	54 49 4f 4e 2e 2e 2e 20
>17c1	12		               .byte     18             ; position 15
>17c2	20 20 20 46	               .text     "   f8   "
>17c6	38 20 20 20
>17ca	92 00		               .byte     146,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.17cc			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.17cc			screendis
.17cc	08		               php
.17cd	48		               pha
.17ce	ad 11 d0	               lda  $d011
.17d1	29 ef		               and  #%11101111
.17d3	8d 11 d0	               sta  $d011
.17d6	68		               pla
.17d7	28		               plp
.17d8	60		               rts
.17d9			screenena
.17d9	08		               php
.17da	48		               pha
.17db	ad 11 d0	               lda  $d011
.17de	09 10		               ora  #%00010000
.17e0	8d 11 d0	               sta  $d011
.17e3	68		               pla
.17e4	28		               plp
.17e5	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.17e6			scrmaninit
.17e6	20 19 19	               jsr  push
.17e9	a9 06		               lda  #vbleu
.17eb	8d 21 d0	               sta  vicbackcol
.17ee	a9 05		               lda  #vvert
.17f0	8d 20 d0	               sta  vicbordcol
.17f3	a9 01		               lda  #vblanc
.17f5	8d 86 02	               sta  bascol
.17f8	ad 00 04	               lda  scrnram
.17fb	8d 00 04	               sta  scrnram
.17fe	20 06 18	               jsr  cls
.1801	20 58 19	               jsr  pop
.1804	60		               rts
>1805	8e		characterset   .byte b_uppercase
.1806			cls
.1806	08		               php
.1807	48		               pha
.1808	a9 93		               lda  #$93
.180a	20 22 18	               jsr  putch
.180d	a9 0e		               lda  #$0e
.180f	20 22 18	               jsr  putch
.1812	68		               pla
.1813	28		               plp
.1814	60		               rts
.1815			putnch
.1815	08		               php
.1816	e0 00		               cpx  #$00
.1818	f0 06		               beq  out
.181a	20 d2 ff	again          jsr  $ffd2
.181d	ca		               dex
.181e	d0 fa		               bne  again
.1820	28		out            plp
.1821	60		               rts
.1822			putch
.1822	08		               php
.1823	20 d2 ff	               jsr  $ffd2
.1826	28		               plp
.1827	60		               rts
.1828			puts
.1828	20 19 19	               jsr  push
.182b	86 fb		               stx  zpage1
.182d	84 fc		               sty  zpage1+1
.182f	a0 00		               ldy  #0
.1831	b1 fb		next           lda  (zpage1),y
.1833	f0 09		               beq  exit
.1835	20 22 18	               jsr  putch
.1838	20 20 1a	               jsr  inczp1
.183b	4c 31 18	               jmp  next
.183e	20 58 19	exit           jsr  pop
.1841	60		               rts
.1842			gotoxy
.1842	08		               php
.1843	18		               clc
.1844	8a		               txa
.1845	48		               pha
.1846	98		               tya
.1847	aa		               tax
.1848	68		               pla
.1849	a8		               tay
.184a	20 f0 ff	               jsr  kplot
.184d	28		               plp
.184e	60		               rts
.184f			cursor
=$0286			bascol    =    $0286
.184f	08		               php
.1850	48		               pha
.1851	90 12		               bcc  restore
.1853	20 f0 ff	               jsr  kplot
.1856	8c 77 18	               sty  cx
.1859	8e 78 18	               stx  cy
.185c	ad 86 02	               lda  bascol
.185f	8d 79 18	               sta  bcol
.1862	4c 74 18	               jmp  out
.1865	ae 78 18	restore        ldx  cy
.1868	ac 77 18	               ldy  cx
.186b	20 f0 ff	               jsr  kplot
.186e	ad 79 18	               lda  bcol
.1871	8d 86 02	               sta  bascol
.1874	68		out            pla
.1875	28		               plp
.1876	60		               rts
>1877	00		cx   .byte     $00
>1878	00		cy   .byte     $00
>1879	00		bcol .byte     $00
.187a			cursave
.187a	08		               php
.187b	38		               sec
.187c	20 4f 18	               jsr  cursor
.187f	28		               plp
.1880	60		               rts
.1881			curput
.1881	08		               php
.1882	18		               clc
.1883	20 4f 18	               jsr  cursor
.1886	28		               plp
.1887	60		               rts
.1888			putsxy
.1888	20 19 19	               jsr  push
.188b	86 fb		               stx  zpage1
.188d	84 fc		               sty  zpage1+1
.188f	a0 00		               ldy  #$00
.1891	b1 fb		               lda  (zpage1),y
.1893	aa		               tax
.1894	20 20 1a	               jsr  inczp1
.1897	b1 fb		               lda  (zpage1),y
.1899	a8		               tay
.189a	20 42 18	               jsr  gotoxy
.189d	20 20 1a	               jsr  inczp1
.18a0	a6 fb		               ldx  zpage1
.18a2	a4 fc		               ldy  zpage1+1
.18a4	20 28 18	               jsr  puts
.18a7	20 58 19	               jsr  pop
.18aa	60		               rts
>18ab	00 00		straddr   .word     $00
>18ad	00		px        .byte     $00
>18ae	00		py        .byte     $00
>18af	00 00		zp1       .word     $00
.18b1			putscxy
.18b1	20 19 19	               jsr  push
.18b4	84 fc		               sty  zpage1+1
.18b6	86 fb		               stx  zpage1
.18b8	ad 86 02	               lda  bascol
.18bb	8d db 18	               sta  bc
.18be	a0 00		               ldy #$00
.18c0	b1 fb		               lda  (zpage1),y
.18c2	8d 86 02	               sta  bascol
.18c5	20 20 1a	               jsr  inczp1
.18c8	a6 fb		               ldx  zpage1
.18ca	a4 fc		               ldy  zpage1+1
.18cc	20 88 18	               jsr  putsxy
.18cf	ad db 18	               lda  bc
.18d2	8d 86 02	               sta  bascol
.18d5	20 58 19	               jsr  pop
.18d8	60		               rts
>18d9	00 00		straddr  .word      $00
>18db	00		bc       .byte      $00
>18dc	00 00		zp1      .word      $00
.18de			putrahex
.18de	08		               php
.18df	48		               pha
.18e0	20 36 1b	               jsr  a2hex
.18e3	a9 d5		               lda  #<a2hexstr
.18e5	a0 1a		               ldy  #>a2hexstr
.18e7	20 28 18	               jsr  puts
.18ea	68		               pla
.18eb	28		               plp
.18ec	60		               rts
.18ed			kputrahexxy
.18ed			bputrahexxy
.18ed			putrahexxy
.18ed	08		               php
.18ee	20 36 1b	               jsr  a2hex
.18f1	a9 d2		               lda  #<a2hexpos
.18f3	a0 1a		               ldy  #>a2hexpos
.18f5	20 88 18	               jsr  putsxy
.18f8	68		               pla
.18f9	28		               plp
.18fa	60		               rts
.18fb			putrahexcxy
.18fb	08		               php
.18fc	20 36 1b	               jsr  a2hex
.18ff	a9 d2		               lda  #<a2hexpos
.1901	a0 1a		               ldy  #>a2hexpos
.1903	20 b1 18	               jsr  putscxy
.1906	68		               pla
.1907	28		               plp
.1908	60		               rts
.1909			setinverse
.1909	48		               pha
.190a	a9 12		               lda  #$12
.190c	20 d2 ff	               jsr  $ffd2
.190f	68		               pla
.1910	60		               rts
.1911			clrinverse
.1911	48		               pha
.1912	a9 92		               lda  #$92
.1914	20 d2 ff	               jsr  $ffd2
.1917	68		               pla
.1918	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.1919			push
.1919	08		          php            ; stack : flg, pcl, pch
.191a	78		          sei
.191b	8d 55 19	          sta  ra        ; save a
.191e	68		          pla            ; stack : pcl, pch
.191f	8d 54 19	          sta  rp        ; save rp
.1922	68		          pla            ; stack : pch
.1923	8d 56 19	          sta  pc        ; save pcl
.1926	68		          pla            ; stack : -
.1927	8d 57 19	          sta  pc+1      ; save pch
.192a	a5 fb		          lda  zpage1    ; get zpage1 low byte
.192c	48		          pha            ; stack : zp1l
.192d	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.192f	48		          pha            ; stack : zp1h, zp1l
.1930	a5 fd		          lda  zpage2    ; get zpage2 low byte
.1932	48		          pha            ; stack : zp2l, zp1h, zp1l
.1933	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.1935	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1936	ad 54 19	          lda  rp        ; get rp
.1939	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.193a	ad 55 19	          lda  ra        ; get a
.193d	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.193e	8a		          txa            ; get x
.193f	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1940	98		          tya            ; get y
.1941	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1942	ad 57 19	          lda  pc+1      ; get pch
.1945	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1946	ad 56 19	          lda  pc        ; get pcl
.1949	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.194a	ad 54 19	          lda  rp        ; get rp
.194d	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.194e	ad 55 19	          lda  ra        ; get a
.1951	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1952	58		          cli
.1953	60		          rts
>1954	00		rp        .byte     0
>1955	00		ra        .byte     0
>1956	00 00		pc        .word     0
.1958			pull
.1958			pop
.1958	78		          sei
.1959	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.195a	8d 8d 19	          sta  pc        ; save pcl
.195d	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.195e	8d 8e 19	          sta  pc+1      ; save pch
.1961	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1962	a8		          tay            ; set y
.1963	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1964	aa		          tax            ; set x
.1965	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1966	8d 8c 19	          sta  ra        ; save a
.1969	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.196a	8d 8b 19	          sta  rp        ; save rp
.196d	68		          pla            ; stack : zp2l, zp1h, zp1l
.196e	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.1970	68		          pla            ; stack : zp1h, zp1l
.1971	85 fd		          sta  zpage2    ; get zpage2 High byte
.1973	68		          pla            ; stack : zp1l
.1974	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.1976	68		          pla            ; stack :
.1977	85 fb		          sta  zpage1    ; get zpage1 High byte
.1979	ad 8e 19	          lda  pc+1      ; get pch
.197c	48		          pha            ; stack : pch
.197d	ad 8d 19	          lda  pc
.1980	48		          pha            ; stack : pcl, pch
.1981	ad 8b 19	          lda  rp        ; get rp
.1984	48		          pha            ; stack : rp, pcl, pch
.1985	ad 8c 19	          lda  ra        ; set ra
.1988	58		          cli
.1989	28		          plp            ; stack : pcl, pch
.198a	60		          rts
>198b	00		rp        .byte     0
>198c	00		ra        .byte     0
>198d	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.198f			blkfill
.198f	20 19 19	bf0            jsr  push
.1992	20 50 1a	               jsr  savezp1
.1995	84 fc		               sty  zpage1+1
.1997	a0 00		               ldy  #$00
.1999	84 fb		               sty  zpage1
.199b	91 fb		bf1            sta  (zpage1),y
.199d	c8		               iny
.199e	d0 fb		               bne  bf1
.19a0	20 5f 1a	               jsr  restzp1
.19a3	20 58 19	               jsr  pop
.19a6	60		               rts
.19a7			memfill
.19a7	20 19 19	               jsr  push
.19aa	20 8f 19	mf1            jsr  blkfill
.19ad	c8		               iny
.19ae	ca		               dex
.19af	d0 f9		               bne  mf1
.19b1	20 58 19	               jsr  pop
.19b4	60		               rts
.19b5			memmove
.19b5	20 19 19	               jsr  push
.19b8	ba		               tsx            ; On se crée un pointeur ...
.19b9	8a		               txa
.19ba	18		               clc
.19bb	69 0b		               adc  #11
.19bd	a8		               tay
.19be	a2 06		               ldx  #$06
.19c0	b9 00 01	nextbyte       lda  $0100,y
.19c3	99 0f 1a	               sta  words,y
.19c6	c8		               iny
.19c7	ca		               dex
.19c8	d0 f6		               bne  nextbyte
.19ca	ad 0f 1a	               lda  s
.19cd	8d e6 19	               sta  source+1
.19d0	ad 10 1a	               lda  s+1
.19d3	8d e7 19	               sta  source+2
.19d6	ad 11 1a	               lda  d
.19d9	8d e3 19	               sta  destin+1
.19dc	ad 12 1a	               lda  d+1
.19df	8d e4 19	               sta  destin+2
.19e2	ad ff ff	destin         lda  $ffff
.19e5	8d ff ff	source         sta  $ffff
.19e8	ee e3 19	               inc  destin+1
.19eb	d0 03		               bne  src
.19ed	ee e4 19	               inc  destin+2
.19f0	ee e6 19	src            inc  source+1
.19f3	d0 03		               bne  cnt
.19f5	ee e7 19	               inc  source+2
.19f8	ad 13 1a	cnt            lda  compte
.19fb	d0 08		               bne  decit
.19fd	ad 14 1a	               lda  compte+1
.1a00	f0 09		               beq  fini
.1a02	ce 14 1a	               dec  compte+1
.1a05	ce 13 1a	decit          dec  compte
.1a08	4c e2 19	               jmp  destin
.1a0b	20 58 19	fini           jsr  pop
.1a0e	60		               rts
.1a0f			words
>1a0f	00 00		s         .word     $0000
>1a11	00 00		d         .word     $0000
>1a13	00 00		compte    .word     $0000
.1a15			decword
.1a15	20 19 19	               jsr  push
.1a18	86 fd		               stx  zpage2
.1a1a	84 fe		               sty  zpage2+1
.1a1c	20 58 19	               jsr  pop
.1a1f	60		               rts
.1a20			inczp1
.1a20	08		               php
.1a21	48		               pha
.1a22	e6 fb		               inc  zpage1
.1a24	a5 fb		               lda  zpage1
.1a26	d0 02		               bne  nopage
.1a28	e6 fc		               inc  zpage1+1
.1a2a	68		nopage         pla
.1a2b	28		               plp
.1a2c	60		               rts
.1a2d			deczp1
.1a2d	08		                php
.1a2e	48		                pha
.1a2f	c6 fb		                dec  zpage1
.1a31	d0 02		                bne  nopage
.1a33	c6 fc		                dec  zpage1+1
.1a35	68		nopage          pla
.1a36	28		                plp
.1a37	60		                rts
.1a38			inczp2
.1a38	08		               php
.1a39	48		               pha
.1a3a	e6 fd		               inc  zpage2
.1a3c	a5 fd		               lda  zpage2
.1a3e	d0 02		               bne  nopage
.1a40	e6 fe		               inc  zpage2+1
.1a42	68		nopage         pla
.1a43	28		               plp
.1a44	60		               rts
.1a45			deczp2
.1a45	08		               php
.1a46	48		               pha
.1a47	a5 fd		               lda  zpage2
.1a49	d0 02		               bne  nopage
.1a4b	c6 fe		               dec  zpage2+1
.1a4d	68		nopage         pla
.1a4e	28		               plp
.1a4f	60		               rts
.1a50			savezp1
.1a50	08		               php
.1a51	48		               pha
.1a52	a5 fb		               lda  zpage1
.1a54	8d cc 1a	               sta  zp1
.1a57	a5 fc		               lda  zpage1+1
.1a59	8d cd 1a	               sta  zp1+1
.1a5c	68		               pla
.1a5d	28		               plp
.1a5e	60		               rts
.1a5f			restzp1
.1a5f	08		               php
.1a60	48		               pha
.1a61	ad cc 1a	               lda zp1
.1a64	85 fb		               sta zpage1
.1a66	ad cd 1a	               lda zp1+1
.1a69	85 fc		               sta zpage1+1
.1a6b	68		               pla
.1a6c	28		               plp
.1a6d	60		               rts
.1a6e			savezp2
.1a6e	08		         php
.1a6f	48		         pha
.1a70	a5 fd		         lda zpage2
.1a72	8d ce 1a	         sta zp2
.1a75	a5 fe		         lda zpage2+1
.1a77	8d cf 1a	         sta zp2+1
.1a7a	68		         pla
.1a7b	28		         plp
.1a7c	60		         rts
.1a7d			restzp2
.1a7d	08		                php
.1a7e	48		                pha
.1a7f	ad ce 1a	                lda  zp2
.1a82	85 fd		                sta  zpage2
.1a84	ad cf 1a	                lda  zp2+1
.1a87	85 fe		                sta  zpage2+1
.1a89	68		                pla
.1a8a	28		                plp
.1a8b	60		                rts
.1a8c			xy2addr
.1a8c	08		                php
.1a8d	48		                pha
.1a8e	8a		                txa
.1a8f	48		                pha
.1a90	98		                tya
.1a91	48		                pha
.1a92	ad c7 1a	                lda     addr1+1
.1a95	8d c9 1a	                sta     addr2+1
.1a98	ad c6 1a	                lda     addr1
.1a9b	8d c8 1a	                sta     addr2
.1a9e	c0 00		                cpy     #$00
.1aa0	f0 0f		                beq     addx
.1aa2	18		moreline        clc
.1aa3	6d c5 1a	                adc     ymult
.1aa6	90 03		                bcc     norepy
.1aa8	ee c9 1a	                inc     addr2+1
.1aab	8d c8 1a	norepy          sta     addr2
.1aae	88		                dey
.1aaf	d0 f1		                bne     moreline
.1ab1	8a		addx            txa
.1ab2	18		                clc
.1ab3	6d c8 1a	                adc     addr2
.1ab6	90 03		                bcc     thatsit
.1ab8	ee c9 1a	                inc     addr2+1
.1abb	8d c8 1a	thatsit         sta     addr2
.1abe	68		                pla
.1abf	a8		                tay
.1ac0	68		                pla
.1ac1	aa		                tax
.1ac2	68		                pla
.1ac3	28		                plp
.1ac4	60		                rts
>1ac5	28		ymult          .byte     40
>1ac6	00 00		addr1          .word     $0000
>1ac8	00 00		addr2          .word     $0000
>1aca	00 00		bytecnt        .word     $0000
>1acc	00 00		zp1        .word   $0000
>1ace	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>1ad0	01		a2hexcol       .byte     1              ; pour aputscxy
>1ad1	00		a2hexbkcol     .byte     %00000000
.1ad2			a2hexpos
>1ad2	00		a2hexpx        .byte     0              ; pour aputsxy
>1ad3	00		a2hexpy        .byte     0
>1ad4	24		a2hexprefix    .byte     "$"            ; pour aputs
>1ad5	00 00		a2hexstr       .word     $00
>1ad7	00 00		               .word     $00
>1ad9	00		               .byte     0              ; 0 end string
>1ada	30 30 30 30	abin           .null     "00000000"
>1ade	30 30 30 30 00
>1ae3	20 20 20 00	adec           .null     "   "
.1ae7			putahexfmtxy
.1ae7	20 19 19	               jsr  push
.1aea	20 36 1b	               jsr  a2hex
.1aed	ae d2 1a	               ldx  a2hexpx
.1af0	ac d3 1a	               ldy  a2hexpy
.1af3	20 42 18	               jsr  gotoxy
.1af6	a2 d4		               ldx  #<a2hexprefix
.1af8	a0 1a		               ldy  #>a2hexprefix
.1afa	20 28 18	               jsr  puts
.1afd	20 58 19	               jsr  pop
.1b00	60		               rts
.1b01			putahexfmt
.1b01	20 19 19	               jsr  push
.1b04	20 36 1b	               jsr  a2hex
.1b07	a2 d4		               ldx  #<a2hexprefix
.1b09	a0 1a		               ldy  #>a2hexprefix
.1b0b	20 28 18	               jsr  puts
.1b0e	20 58 19	               jsr  pop
.1b11	60		               rts
.1b12			putahex
.1b12	20 19 19	               jsr  push
.1b15	20 36 1b	               jsr  a2hex
.1b18	a2 d5		               ldx  #<a2hexstr
.1b1a	a0 1a		               ldy  #>a2hexstr
.1b1c	20 28 18	               jsr  puts
.1b1f	20 58 19	               jsr  pop
.1b22	60		               rts
.1b23			nib2hex
.1b23	08		               php
.1b24	29 0f		               and  #$0f
.1b26	f8		               sed
.1b27	18		               clc
.1b28	69 90		               adc  #$90
.1b2a	69 40		               adc  #$40
.1b2c	d8		               cld
.1b2d	28		               plp
.1b2e	60		               rts
.1b2f			lsra4bits
.1b2f	08		               php
.1b30	4a		               lsr
.1b31	4a		               lsr
.1b32	4a		               lsr
.1b33	4a		               lsr
.1b34	28		               plp
.1b35	60		               rts
.1b36			a2hex
.1b36	08		               php
.1b37	48		               pha
.1b38	48		               pha
.1b39	20 2f 1b	               jsr  lsra4bits
.1b3c	20 23 1b	               jsr  nib2hex
.1b3f	8d d5 1a	               sta  a2hexstr
.1b42	68		               pla
.1b43	20 23 1b	               jsr  nib2hex
.1b46	8d d6 1a	               sta  a2hexstr+1
.1b49	a9 00		               lda  #$00                ; set end of string
.1b4b	8d d7 1a	               sta  a2hexstr+2
.1b4e	68		               pla
.1b4f	28		               plp
.1b50	60		               rts
.1b51			xy2hex
.1b51	20 19 19	               jsr  push
.1b54	20 36 1b	               jsr  a2hex
.1b57	8a		               txa
.1b58	48		               pha
.1b59	20 2f 1b	               jsr  lsra4bits
.1b5c	20 23 1b	               jsr  nib2hex
.1b5f	8d d5 1a	               sta  a2hexstr
.1b62	68		               pla
.1b63	20 23 1b	               jsr  nib2hex
.1b66	8d d6 1a	               sta  a2hexstr+1
.1b69	98		               tya
.1b6a	48		               pha
.1b6b	20 2f 1b	               jsr  lsra4bits
.1b6e	20 23 1b	               jsr  nib2hex
.1b71	8d d7 1a	               sta  a2hexstr+2
.1b74	68		               pla
.1b75	20 23 1b	               jsr  nib2hex
.1b78	8d d8 1a	               sta  a2hexstr+3
.1b7b	a9 00		               lda  #$00                ; 0 ended string
.1b7d	8d d9 1a	               sta  a2hexstr+4
.1b80	20 58 19	               jsr  pop
.1b83			atobin
.1b83	20 19 19	               jsr  push
.1b86	a2 08		               ldx  #8
.1b88	a0 00		               ldy  #0
.1b8a	18		               clc
.1b8b	2a		nextbit        rol
.1b8c	48		               pha
.1b8d	69 00		               adc  #$00
.1b8f	29 01		               and  #$01
.1b91	20 23 1b	               jsr  nib2hex
.1b94	99 da 1a	               sta  abin,y
.1b97	68		               pla
.1b98	c8		               iny
.1b99	ca		               dex
.1b9a	d0 ef		               bne  nextbit
.1b9c	a9 00		               lda  #0
.1b9e	99 da 1a	               sta  abin,y
.1ba1	20 58 19	               jsr  pull
.1ba4	60		               rts
.1ba5			putabin
.1ba5	20 83 1b	               jsr     atobin
.1ba8	20 19 19	               jsr     push
.1bab	a2 da		               ldx     #<abin
.1bad	a0 1a		               ldy     #>abin
.1baf	20 28 18	               jsr     puts
.1bb2	20 58 19	               jsr     pop
.1bb5	60		               rts
.1bb6			printabin
.1bb6	20 19 19	               jsr     push
.1bb9	a2 da		               ldx     #<abin
.1bbb	a0 1a		               ldy     #>abin
.1bbd	20 28 18	               jsr     puts
.1bc0	20 58 19	               jsr     pop
.1bc3	60		               rts
.1bc4			putabinfmt
.1bc4	08		               php
.1bc5	48		               pha
.1bc6	a9 25		               lda     #"%"
.1bc8	20 22 18	               jsr     putch
.1bcb	68		               pla
.1bcc	20 a5 1b	               jsr     putabin
.1bcf	28		               plp
.1bd0	60		               rts
.1bd1			putabinxy
.1bd1	20 42 18	               jsr     gotoxy
.1bd4	20 a5 1b	               jsr     putabin
.1bd7	60		               rts
.1bd8			putabinfmtxy
.1bd8	20 42 18	               jsr     gotoxy
.1bdb	20 c4 1b	               jsr     putabinfmt
.1bde	60		               rts
.1bdf			atodec
.1bdf	20 19 19	               jsr  push
.1be2	f8		               sed
.1be3	aa		               tax
.1be4	a0 00		               ldy  #$00
.1be6	a9 00		               lda  #$00
.1be8	18		nextbit        clc
.1be9	69 01		               adc  #$01
.1beb	90 01		               bcc  decx
.1bed	c8		               iny
.1bee	ca		decx           dex
.1bef	d0 f7		               bne  nextbit
.1bf1	48		               pha
.1bf2	98		               tya
.1bf3	20 23 1b	               jsr  nib2hex
.1bf6	8d e3 1a	               sta  adec
.1bf9	68		               pla
.1bfa	48		               pha
.1bfb	20 23 1b	               jsr  nib2hex
.1bfe	8d e5 1a	               sta  adec+2
.1c01	68		               pla
.1c02	6a		               ror
.1c03	6a		               ror
.1c04	6a		               ror
.1c05	6a		               ror
.1c06	20 23 1b	               jsr  nib2hex
.1c09	8d e4 1a	               sta  adec+1
.1c0c	d8		               cld
.1c0d	20 58 19	               jsr  pull
.1c10	60		               rts
>1c11	00 00 00	buffer         .byte     0,0,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>1c14	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>1c18	00 00 00 00 00 00 00 00 00 0d 00 00
>1c24	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>1c28	00 00 00 00 00 00 00 00 00 00 00 00
>1c34	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>1c38	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1c44	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1c48	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1c54	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1c58	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>1c64	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1c68	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>1c74	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1c78	00 00 00 00 00 00 00 00 00 00 00 00
>1c84	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1c88	00 00 00 00 00 00 00 00 00 00 00 00
>1c94	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1c98	00 00 00 00 00 00 00 00 00 00 00 00
>1ca4	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1ca8	00 00 00 00 00 00 00 00 00 00 00 00
>1cb4	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>1cb8	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1cc4	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1cc8	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1cd4	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1cd8	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>1ce4	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>1ce8	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>1cf4	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>1cf8	00 00 00 00 00 00 00 00 00 00 00 00
>1d04	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>1d08	00 00 00 00 00 00 00 00 00 00 00 00
.1d14			waitstop
.1d14	20 19 19	               jsr  push
.1d17	20 ed f6	wait           jsr  k_stop
.1d1a	d0 fb		               bne  wait
.1d1c	20 58 19	               jsr  pop
.1d1f	60		               rts
.1d20			anykey
.1d20	08		               php
.1d21	48		               pha
.1d22	a5 cb		nokey          lda 203
.1d24	c9 40		               cmp #64
.1d26	f0 fa		               beq nokey
.1d28	20 2e 1d	               jsr releasekey
.1d2b	68		               pla
.1d2c	28		               plp
.1d2d	60		               rts
.1d2e			releasekey
.1d2e	08		               php
.1d2f	48		               pha
.1d30	a5 cb		keypressed     lda 203
.1d32	c9 40		               cmp #64
.1d34	d0 fa		               bne keypressed
.1d36	68		               pla
.1d37	28		               plp
.1d38	60		               rts
.1d39			getkey
.1d39	20 e4 ff	again          jsr  getin
.1d3c	c9 00		               cmp  #0
.1d3e	f0 f9		               beq  again
.1d40	60		               rts
.1d41			waitkey
.1d41	20 19 19	               jsr  push
.1d44	8d 92 1d	               sta  thekey
.1d47	20 e4 ff	nope           jsr  getin
.1d4a	20 d2 ff	               jsr  chrout
.1d4d	cd 92 1d	               cmp  thekey
.1d50	d0 f5		               bne  nope
.1d52	20 d2 ff	               jsr  chrout
.1d55	20 58 19	               jsr  pop
.1d58	60		               rts
.1d59			waitspace
.1d59	20 19 19	               jsr  push
.1d5c	a9 7f		wait           lda  #$7f  ;%01111111
.1d5e	8d 00 dc	               sta  $dc00
.1d61	ad 01 dc	               lda  $dc01
.1d64	29 10		               and  #$10  ;mask %00010000
.1d66	d0 f4		               bne  wait
.1d68	20 58 19	               jsr  pop
.1d6b			waitsstop
.1d6b	20 19 19	               jsr  push
.1d6e	20 ed f6	wait           jsr  k_stop  ;%01111111
.1d71	d0 fb		               bne  wait
.1d73	20 58 19	               jsr  pop
.1d76			waitreturn
.1d76	20 19 19	               jsr  push
.1d79	ad 93 1d	               lda  thecount
.1d7c	8d 00 04	               sta  scrnram
.1d7f	a9 02		               lda  #$02
.1d81	8d 00 d8	               sta  colorram
.1d84	20 e4 ff	nope           jsr  getin
.1d87	c9 0d		nohex          cmp  #$0d
.1d89	d0 f9		               bne  nope
.1d8b	ee 93 1d	               inc  thecount
.1d8e	20 58 19	               jsr  pop
.1d91	60		               rts
>1d92	00		thekey         .byte   0
>1d93	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  End of listing

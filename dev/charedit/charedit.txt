
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Mon Nov 20 15:33:17 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm

="20231116-100400"	version  = "20231116-100400"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

=18			fkeyleft       =    18
=9			f1top          =    9
=$0400			scrnnewram     =    $0400
=10			charsdef       =    10
=9			grid_top       =    9
=1			grid_left      =    1
=16			grid_bot       =    grid_top + 7
=8			grid_right     =    grid_left + 7
=$0b			bordure        =    vgris
=$00			fond           =    vnoir
=$03			mesgcol        =    vcyan
=$03			menu1col1      =    vcyan
=$0e			menu1col2      =    vbleu1
=$0f			menu2col1      =    vgris2
=$0c			menu2col2      =    vgris1
=$01			flashcol       =    vblanc
=$07			whoamicol      =    vjaune
=$01			charcolor      =    vblanc
=$0f			charscolor     =    vgris2
.080d			main
.080d	20 22 21	               jsr  push
.0810	20 f4 1f	               jsr  scrmaninit
.0813	08		               php
.0814	48		               pha
.0815	a9 08		               lda  #$08
.0817	20 d2 ff	               jsr  $ffd2
.081a	68		               pla
.081b	28		               plp
.081c	20 1f 0a	               jsr  drawcredits
.081f			wait
.081f	20 da 1f	               jsr  screendis
.0822	20 c6 0f	               jsr  copycharset
.0825	20 14 20	               jsr  cls
.0828	20 b0 0f	               jsr  setscreenptr
.082b	20 7e 0a	               jsr  setdefaultchar
.082e	20 21 10	               jsr  staticscreen
.0831	20 f3 0e	               jsr  drawbitmap
.0834	a9 00		               lda  #$00
.0836	8d 13 09	               sta  fkeyset
.0839	20 5d 10	               jsr  drawfkeys
.083c	a9 00		               lda  #$00
.083e	20 22 21	               jsr  push
.0841	a2 74		               ldx  #<blankmsg
.0843	a0 19		               ldy  #>blankmsg
.0845	20 ba 20	               jsr  putscxy
.0848	a2 a0		               ldx  #<prompt_msg
.084a	a0 19		               ldy  #>prompt_msg
.084c	20 ba 20	               jsr  putscxy
.084f	20 61 21	               jsr  pop
.0852	20 e7 1f	               jsr  screenena
.0855	20 8f 0c	               jsr  keyaction
.0858	20 14 20	               jsr  cls
.085b	20 1f 0a	               jsr  drawcredits
.085e	a2 b0		               ldx #<bye_msg
.0860	a0 1d		               ldy #>bye_msg
.0862	20 ba 20	               jsr putscxy
.0865	a2 d2		               ldx #<any_msg
.0867	a0 1d		               ldy #>any_msg
.0869	20 ba 20	               jsr putscxy
.086c	20 42 25	               jsr  getkey
.086f	20 14 20	               jsr  cls
.0872	20 61 21	               jsr  pop
.0875	60		               rts
.0876			savetofile
.0876	20 22 21	               jsr  push
.0879	a9 24		               lda  #<fname
.087b	8d d0 26	               sta  dsk_fnptr
.087e	a9 09		               lda  #>fname
.0880	8d d1 26	               sta  dsk_fnptr+1
.0883	a9 0d		               lda  #(device-fname-1)
.0885	8d d2 26	               sta  dsk_fnlen
.0888	ad 32 09	               lda  device
.088b	8d cf 26	               sta  dsk_lfsno
.088e	a9 00		               lda  #<bitmapmem
.0890	8d ca 26	               sta  dsk_data_s
.0893	a9 28		               lda  #>bitmapmem
.0895	8d cb 26	               sta  dsk_data_s+1
.0898	a9 00		               lda  #<endofaddr
.089a	8d cc 26	               sta  dsk_data_e
.089d	a9 48		               lda  #>endofaddr
.089f	8d cd 26	               sta  dsk_data_e+1
.08a2	a2 74		               ldx #<blankmsg
.08a4	a0 19		               ldy #>blankmsg
.08a6	20 ba 20	               jsr putscxy
.08a9	20 22 21	               jsr  push
.08ac	a2 01		               ldx  #1
.08ae	a0 04		               ldy  #4
.08b0	20 4b 20	               jsr  gotoxy
.08b3	20 61 21	               jsr  pop
.08b6	20 37 26	               jsr  memtofile
.08b9	20 61 21	               jsr  pop
.08bc	60		               rts
.08bd			loadfromfile
.08bd	20 22 21	               jsr  push
.08c0	a9 24		               lda  #<fname
.08c2	8d d0 26	               sta  dsk_fnptr
.08c5	a9 09		               lda  #>fname
.08c7	8d d1 26	               sta  dsk_fnptr+1
.08ca	a9 0d		               lda  #(device-fname-1)
.08cc	8d d2 26	               sta  dsk_fnlen
.08cf	ad 32 09	               lda  device
.08d2	8d cf 26	               sta  dsk_lfsno
.08d5	a9 00		               lda  #<bitmapmem
.08d7	8d ca 26	               sta  dsk_data_s
.08da	a9 28		               lda  #>bitmapmem
.08dc	8d cb 26	               sta  dsk_data_s+1
.08df	a9 00		               lda  #<endofaddr
.08e1	8d cc 26	               sta  dsk_data_e
.08e4	a9 48		               lda  #>endofaddr
.08e6	8d cd 26	               sta  dsk_data_e+1
.08e9	a2 74		               ldx #<blankmsg
.08eb	a0 19		               ldy #>blankmsg
.08ed	20 ba 20	               jsr putscxy
.08f0	20 22 21	               jsr  push
.08f3	a2 01		               ldx  #1
.08f5	a0 04		               ldy  #4
.08f7	20 4b 20	               jsr  gotoxy
.08fa	20 61 21	               jsr  pop
.08fd	20 6f 26	               jsr  filetomem
.0900	20 61 21	               jsr  pop
.0903	60		               rts
=10240			bitmapmem      =         charsdef * 1024     ;Calcul position ram des caracteres.
=18432			endofaddr      =         (charsdef * 1024) + (4*$800)
=61440			mstopaddr      =         $d000+(4*$800)
>0904	00 d0		startaddr      .word     $d000               ; 53248
>0906	00 f0		stopaddr       .word     mstopaddr           ; 55296
>0908	00 28		bitmapaddr     .word     bitmapmem           ; $3000, 12288
>090a	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>090e	08 04 02 01
>0912	00		editmode       .byte     0
>0913	00		fkeyset        .byte     0
>0914	00		currentchar    .byte     0
>0915	00		currentkey     .byte     0
>0916	00		previouskey    .byte     0
>0917	00		bitmapoffset   .byte     0
>0918	00 00		mapaddr        .word     0
>091a	00 00		byteaddr       .word     0
>091c	00 00		gridaddr       .word     0
>091e	09		cursln         .byte     grid_top
>091f	01		curscl         .byte     grid_left
>0920	05 1b 03 12	pfname         .byte     vvert,27,3,18
>0924	40 30 3a	fname          .text     "@0:"
>0927	3f 3f 3f 3f	name           .text     "??????"
>092b	3f 3f
>092d	2e 43 48 52	ext            .null     ".chr"
>0931	00
>0932	00		device         .byte     0

;******  Processing file: routines.asm

.0933			template
.0933	20 22 21	               jsr  push
.0936	20 61 21	               jsr  pop
.0939	60		               rts
.093a			getfname
.093a	20 22 21	               jsr  push
.093d	20 22 21	               jsr  push
.0940	a2 74		               ldx  #<blankmsg
.0942	a0 19		               ldy  #>blankmsg
.0944	20 ba 20	               jsr  putscxy
.0947	a2 dd		               ldx  #<fname_msg
.0949	a0 1b		               ldy  #>fname_msg
.094b	20 ba 20	               jsr  putscxy
.094e	20 61 21	               jsr  pop
.0951	a2 00		               ldx  #$00
.0953	8e 87 09	               stx  count
.0956	20 88 09	getanother     jsr  getalphanum
.0959	20 2b 20	               jsr  putch
.095c	ae 87 09	               ldx  count
.095f	9d 27 09	               sta  name,x
.0962	ee 87 09	               inc  count
.0965	ae 87 09	               ldx  count
.0968	e0 06		               cpx  #$06
.096a	f0 03		               beq  finish
.096c	4c 56 09	               jmp  getanother
.096f			finish
.096f	20 22 21	               jsr  push
.0972	a2 74		               ldx  #<blankmsg
.0974	a0 19		               ldy  #>blankmsg
.0976	20 ba 20	               jsr  putscxy
.0979	a2 20		               ldx  #<pfname
.097b	a0 09		               ldy  #>pfname
.097d	20 ba 20	               jsr  putscxy
.0980	20 61 21	               jsr  pop
.0983	20 61 21	               jsr  pop
.0986	60		               rts
>0987	00		count          .byte     0
.0988			getalphanum
.0988	20 22 21	               jsr  push
.098b	20 42 25	getanother     jsr  getkey
.098e	c9 30		               cmp  #$30      ; 0
.0990	30 f9		               bmi  getanother
.0992	c9 3a		               cmp  #$3a      ; 9+1
.0994	30 0b		               bmi  goodone
.0996	c9 41		isitletter     cmp  #$41      ; A
.0998	30 f1		               bmi  getanother
.099a	c9 5b		               cmp  #$5b      ; Z+1
.099c	30 03		               bmi  goodone
.099e	4c 8b 09	               jmp  getanother
.09a1	8d ab 09	goodone        sta  tempbyte
.09a4	20 61 21	               jsr  pop
.09a7	ad ab 09	               lda  tempbyte
.09aa	60		               rts
>09ab	00		tempbyte       .byte     0
.09ac			copychar
.09ac	20 22 21	               jsr  push
.09af	20 e8 09	               jsr  getvalidkey
.09b2	ad 08 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.09b5	85 fb		               sta  zpage1
.09b7	ad 09 09	               lda  bitmapaddr+1
.09ba	85 fc		               sta  zpage1+1
.09bc	ae 1e 0a	               ldx  copykey
.09bf	bd 1d 24	               lda  asciitorom,x
.09c2	aa		               tax
.09c3	e0 00		               cpx  #$00
.09c5	f0 08		               beq  no_offset      ; sommes nous déja à 0
.09c7	a9 08		addagain       lda  #$08
.09c9	20 b9 11	               jsr  zp1addnum      ; on augmente de 8 byte ...
.09cc	ca		               dex                 ; pour chaque caracteres
.09cd	d0 f8		               bne  addagain
.09cf	ad 18 09	no_offset      lda  mapaddr        ; le caractere actuel
.09d2	85 fd		               sta  zpage2         ;
.09d4	ad 19 09	               lda  mapaddr+1      ;
.09d7	85 fe		               sta  zpage2+1       ;
.09d9	a0 00		               ldy  #$00
.09db	b1 fb		nextbyte       lda  (zpage1),y
.09dd	91 fd		               sta  (zpage2),y
.09df	c8		               iny
.09e0	c0 08		               cpy  #$08
.09e2	d0 f7		               bne  nextbyte
.09e4	20 61 21	out            jsr  pop
.09e7	60		               rts
.09e8			getvalidkey
.09e8	20 22 21	               jsr  push
.09eb	20 22 21	               jsr  push
.09ee	a2 74		               ldx  #<blankmsg
.09f0	a0 19		               ldy  #>blankmsg
.09f2	20 ba 20	               jsr  putscxy
.09f5	a2 b4		               ldx  #<copychar_msg
.09f7	a0 1b		               ldy  #>copychar_msg
.09f9	20 ba 20	               jsr  putscxy
.09fc	20 61 21	               jsr  pop
.09ff	20 42 25	getgoodkey     jsr  getkey
.0a02	8d 1e 0a	               sta  copykey
.0a05	aa		               tax
.0a06	bc 1d 24	               ldy  asciitorom,x
.0a09	c4 00		               cpy  $00
.0a0b	d0 0a		               bne  goodone
.0a0d	ae 1e 0a	               ldx  copykey
.0a10	e0 40		               cpx  #$40
.0a12	f0 03		               beq  goodone
.0a14	4c ff 09	               jmp  getgoodkey
.0a17	20 2b 20	goodone        jsr  putch
.0a1a	20 61 21	               jsr  pop
.0a1d	60		               rts
>0a1e	00		copykey        .byte 0
.0a1f			drawcredits
.0a1f	20 22 21	               jsr  push
.0a22	20 14 20	               jsr  cls
.0a25	a2 3c		               ldx #<whoami0
.0a27	a0 1c		               ldy #>whoami0
.0a29	20 ba 20	               jsr putscxy
.0a2c	a2 61		               ldx #<whoami1
.0a2e	a0 1c		               ldy #>whoami1
.0a30	20 ba 20	               jsr putscxy
.0a33	a2 88		               ldx #<whoami2
.0a35	a0 1c		               ldy #>whoami2
.0a37	20 ba 20	               jsr putscxy
.0a3a	a2 ad		               ldx #<whoami3
.0a3c	a0 1c		               ldy #>whoami3
.0a3e	20 ba 20	               jsr putscxy
.0a41	a2 d2		               ldx #<whoami4
.0a43	a0 1c		               ldy #>whoami4
.0a45	20 ba 20	               jsr putscxy
.0a48	a2 f7		               ldx #<whoami5
.0a4a	a0 1c		               ldy #>whoami5
.0a4c	20 ba 20	               jsr putscxy
.0a4f	a2 1c		               ldx #<whoami6
.0a51	a0 1d		               ldy #>whoami6
.0a53	20 ba 20	               jsr putscxy
.0a56	a2 41		               ldx #<whoami7
.0a58	a0 1d		               ldy #>whoami7
.0a5a	20 ba 20	               jsr putscxy
.0a5d	a2 66		               ldx #<whoami8
.0a5f	a0 1d		               ldy #>whoami8
.0a61	20 ba 20	               jsr putscxy
.0a64	a2 8b		               ldx #<whoami9
.0a66	a0 1d		               ldy #>whoami9
.0a68	20 ba 20	               jsr putscxy
.0a6b	20 d7 11	               jsr  delay
.0a6e	20 d7 11	               jsr  delay
.0a71	20 d7 11	               jsr  delay
.0a74	20 d7 11	               jsr  delay
.0a77	20 d7 11	               jsr  delay
.0a7a	20 61 21	               jsr  pop
.0a7d	60		               rts
.0a7e			setdefaultchar
.0a7e	20 22 21	               jsr  push
.0a81	a9 40		               lda  #$40
.0a83	8d 15 09	               sta  currentkey
.0a86	aa		               tax
.0a87	bc 1d 24	               ldy  asciitorom,x
.0a8a	8c 17 09	               sty  bitmapoffset
.0a8d	20 48 0b	               jsr  drawkeyval
.0a90	20 f3 0e	               jsr  drawbitmap
.0a93	20 22 21	               jsr  push
.0a96	a2 0d		               ldx  #13
.0a98	a0 0c		               ldy  #12
.0a9a	20 4b 20	               jsr  gotoxy
.0a9d	20 61 21	               jsr  pop
.0aa0	20 2b 20	               jsr  putch
.0aa3	20 22 21	               jsr  push
.0aa6	a2 11		               ldx  #17
.0aa8	a0 05		               ldy  #5
.0aaa	20 4b 20	               jsr  gotoxy
.0aad	20 61 21	               jsr  pop
.0ab0	20 e8 23	               jsr  atodec
.0ab3	20 22 21	               jsr  push
.0ab6	a2 ec		isx            ldx  #<adec
.0ab8	a0 22		isy            ldy  #>adec
.0aba	20 31 20	               jsr  puts
.0abd	20 61 21	               jsr  pull
.0ac0	20 61 21	               jsr  pop
.0ac3	60		               rts
.0ac4			resetmenuacolor
.0ac4	20 22 21	               jsr  push
.0ac7	a9 03		               lda  #menu1col1
.0ac9	8d 2a 1e	               sta  f1abutton
.0acc	8d 60 1e	               sta  f3abutton
.0acf	8d 96 1e	               sta  f5abutton
.0ad2	8d cc 1e	               sta  f7abutton
.0ad5	a9 0e		               lda  #menu1col2
.0ad7	8d 45 1e	               sta  f2abutton
.0ada	8d 7b 1e	               sta  f4abutton
.0add	8d b1 1e	               sta  f6abutton
.0ae0	8d e7 1e	               sta  f8abutton
.0ae3	20 61 21	               jsr  pop
.0ae6	60		               rts
.0ae7			resetmenubcolor
.0ae7	20 22 21	               jsr  push
.0aea	a9 0f		               lda  #menu2col1
.0aec	8d 02 1f	               sta  f1bbutton
.0aef	8d 38 1f	               sta  f3bbutton
.0af2	8d 6e 1f	               sta  f5bbutton
.0af5	8d a4 1f	               sta  f7bbutton
.0af8	a9 0f		               lda  #menu2col1
.0afa	8d 1d 1f	               sta  f2bbutton
.0afd	8d 53 1f	               sta  f4bbutton
.0b00	8d 89 1f	               sta  f6bbutton
.0b03	8d bf 1f	               sta  f8bbutton
.0b06	20 61 21	               jsr  pop
.0b09	60		               rts
.0b0a			setmenuacolor
.0b0a	20 22 21	               jsr  push
.0b0d	8d 2a 1e	               sta  f1abutton
.0b10	8d 45 1e	               sta  f2abutton
.0b13	8d 60 1e	               sta  f3abutton
.0b16	8d 7b 1e	               sta  f4abutton
.0b19	8d 96 1e	               sta  f5abutton
.0b1c	8d b1 1e	               sta  f6abutton
.0b1f	8d cc 1e	               sta  f7abutton
.0b22	8d e7 1e	               sta  f8abutton
.0b25	20 61 21	               jsr  pop
.0b28	60		               rts
.0b29			setmenubcolor
.0b29	20 22 21	               jsr  push
.0b2c	8d 02 1f	               sta  f1bbutton
.0b2f	8d 1d 1f	               sta  f2bbutton
.0b32	8d 38 1f	               sta  f3bbutton
.0b35	8d 53 1f	               sta  f4bbutton
.0b38	8d 6e 1f	               sta  f5bbutton
.0b3b	8d 89 1f	               sta  f6bbutton
.0b3e	8d a4 1f	               sta  f7bbutton
.0b41	8d bf 1f	               sta  f8bbutton
.0b44	20 61 21	               jsr  pop
.0b47	60		               rts
.0b48			drawkeyval
.0b48	20 22 21	               jsr  push
.0b4b	20 22 21	               jsr  push
.0b4e	a2 01		               ldx  #1
.0b50	a0 13		               ldy  #19
.0b52	20 4b 20	               jsr  gotoxy
.0b55	20 61 21	               jsr  pop
.0b58	ad 15 09	               lda  currentkey
.0b5b	20 2b 20	               jsr  putch
.0b5e	48		               pha
.0b5f	a9 3d		               lda  #'='
.0b61	20 2b 20	               jsr  putch
.0b64	a9 25		               lda  #'%'
.0b66	20 2b 20	               jsr  putch
.0b69	68		               pla
.0b6a	20 ae 23	               jsr  putabin
.0b6d	20 22 21	               jsr  push
.0b70	a2 01		               ldx  #1
.0b72	a0 14		               ldy  #20
.0b74	20 4b 20	               jsr  gotoxy
.0b77	20 61 21	               jsr  pop
.0b7a	20 22 21	               jsr  push
.0b7d	a2 49		isx            ldx  #<txt1
.0b7f	a0 0c		isy            ldy  #>txt1
.0b81	20 31 20	               jsr  puts
.0b84	20 61 21	               jsr  pull
.0b87	a9 24		               lda  #'$'
.0b89	20 2b 20	               jsr  putch
.0b8c	ad 15 09	               lda  currentkey
.0b8f	20 1b 23	               jsr  putahex
.0b92	20 22 21	               jsr  push
.0b95	a2 01		               ldx  #1
.0b97	a0 15		               ldy  #21
.0b99	20 4b 20	               jsr  gotoxy
.0b9c	20 61 21	               jsr  pop
.0b9f	20 22 21	               jsr  push
.0ba2	a2 54		isx            ldx  #<txt2
.0ba4	a0 0c		isy            ldy  #>txt2
.0ba6	20 31 20	               jsr  puts
.0ba9	20 61 21	               jsr  pull
.0bac	a9 24		               lda  #'$'
.0bae	20 2b 20	               jsr  putch
.0bb1	ad 09 09	               lda  bitmapaddr+1
.0bb4	20 1b 23	               jsr  putahex
.0bb7	ad 08 09	               lda  bitmapaddr
.0bba	20 1b 23	               jsr  putahex
.0bbd	20 22 21	               jsr  push
.0bc0	a2 01		               ldx  #1
.0bc2	a0 16		               ldy  #22
.0bc4	20 4b 20	               jsr  gotoxy
.0bc7	20 61 21	               jsr  pop
.0bca	20 22 21	               jsr  push
.0bcd	a2 5f		isx            ldx  #<txt3
.0bcf	a0 0c		isy            ldy  #>txt3
.0bd1	20 31 20	               jsr  puts
.0bd4	20 61 21	               jsr  pull
.0bd7	a9 24		               lda  #'$'
.0bd9	20 2b 20	               jsr  putch
.0bdc	ad 17 09	               lda  bitmapoffset
.0bdf	20 1b 23	               jsr  putahex
.0be2	20 22 21	               jsr  push
.0be5	a2 01		               ldx  #1
.0be7	a0 17		               ldy  #23
.0be9	20 4b 20	               jsr  gotoxy
.0bec	20 61 21	               jsr  pop
.0bef	20 22 21	               jsr  push
.0bf2	a2 6c		isx            ldx  #<txt4
.0bf4	a0 0c		isy            ldy  #>txt4
.0bf6	20 31 20	               jsr  puts
.0bf9	20 61 21	               jsr  pull
.0bfc	a9 24		               lda  #'$'
.0bfe	20 2b 20	               jsr  putch
.0c01	ad 19 09	               lda  mapaddr+1
.0c04	20 1b 23	               jsr  putahex
.0c07	ad 18 09	               lda  mapaddr
.0c0a	20 1b 23	               jsr  putahex
.0c0d	20 22 21	               jsr  push
.0c10	a2 01		               ldx  #1
.0c12	a0 18		               ldy  #24
.0c14	20 4b 20	               jsr  gotoxy
.0c17	20 61 21	               jsr  pop
.0c1a	20 22 21	               jsr  push
.0c1d	a2 77		isx            ldx  #<txt5
.0c1f	a0 0c		isy            ldy  #>txt5
.0c21	20 31 20	               jsr  puts
.0c24	20 61 21	               jsr  pull
.0c27	ad 1f 09	               lda  curscl
.0c2a	20 1b 23	               jsr  putahex
.0c2d	a9 da		               lda  #$da
.0c2f	20 2b 20	               jsr  putch
.0c32	ad 1e 09	               lda  cursln
.0c35	20 1b 23	               jsr  putahex
.0c38	20 61 21	               jsr  pop
.0c3b	60		               rts
>0c3c	50 45 54 53	txt0           .null     "petscii :   "
>0c40	43 49 49 20 3a 20 20 20 00
>0c49	4b 45 59 20	txt1           .null     "key code: "
>0c4d	43 4f 44 45 3a 20 00
>0c54	42 49 54 4d	txt2           .null     "bitmap..: "
>0c58	41 50 2e 2e 3a 20 00
>0c5f	4f 46 46 53	txt3           .null     "offset..:   "
>0c63	45 54 2e 2e 3a 20 20 20 00
>0c6c	4d 41 50 41	txt4           .null     "mapaddr.: "
>0c70	44 44 52 2e 3a 20 00
>0c77	43 55 52 53	txt5           .null     "cursval.: "
>0c7b	56 41 4c 2e 3a 20 00
>0c82	53 54 41 43	txt6           .null     "stack......:"
>0c86	4b 2e 2e 2e 2e 2e 2e 3a 00
.0c8f			keyaction
.0c8f	20 22 21	               jsr  push
.0c92	20 42 25	loop           jsr  getkey
.0c95	c9 85		f1             cmp  #key_f1
.0c97	d0 03		               bne  f2
.0c99	4c 0d 0d	               jmp  dof1
.0c9c	c9 89		f2             cmp  #key_f2
.0c9e	d0 03		               bne  f3
.0ca0	4c 13 0d	               jmp  dof2
.0ca3	c9 86		f3             cmp  #key_f3
.0ca5	d0 03		               bne  f4
.0ca7	4c 19 0d	               jmp  dof3
.0caa	c9 8a		f4             cmp  #key_f4
.0cac	d0 03		               bne  f5
.0cae	4c 1f 0d	               jmp  dof4
.0cb1	c9 87		f5             cmp  #key_f5
.0cb3	d0 03		               bne  f6
.0cb5	4c 25 0d	               jmp  dof5
.0cb8	c9 8b		f6             cmp  #key_f6
.0cba	d0 03		               bne  f7
.0cbc	4c 2b 0d	               jmp  dof6
.0cbf	c9 88		f7             cmp  #key_f7
.0cc1	d0 03		               bne  f8
.0cc3	4c 31 0d	               jmp  dof7
.0cc6	c9 8c		f8             cmp  #key_f8
.0cc8	d0 03		               bne  ctrlx
.0cca	4c 37 0d	               jmp  dof8
.0ccd	c9 18		ctrlx          cmp  #ctrl_x
.0ccf	d0 03		               bne  ishex14
.0cd1	4c 3d 0d	               jmp  doquit
.0cd4	c9 14		ishex14        cmp  #$14
.0cd6	d0 03		               bne  ishex12
.0cd8	4c 92 0c	               jmp  loop
.0cdb	c9 12		ishex12        cmp  #$12
.0cdd	d0 03		               bne  reste
.0cdf	4c 92 0c	               jmp  loop
.0ce2			reste
.0ce2	20 22 21	               jsr  push
.0ce5	a2 0d		               ldx  #13
.0ce7	a0 0c		               ldy  #12
.0ce9	20 4b 20	               jsr  gotoxy
.0cec	20 61 21	               jsr  pop
.0cef	20 2b 20	               jsr  putch
.0cf2	48		               pha
.0cf3	ad 15 09	               lda  currentkey
.0cf6	8d 16 09	               sta  previouskey
.0cf9	68		               pla
.0cfa	8d 15 09	               sta  currentkey
.0cfd	aa		               tax
.0cfe	bc 1d 24	               ldy  asciitorom,x
.0d01	8c 17 09	               sty  bitmapoffset
.0d04	20 48 0b	               jsr  drawkeyval
.0d07	20 f3 0e	               jsr  drawbitmap
.0d0a	4c 92 0c	               jmp  loop
.0d0d	20 ed 11	dof1           jsr  f1action  ;edit/reverse
.0d10	4c 92 0c	               jmp  loop
.0d13	20 e0 12	dof2           jsr  f2action  ;save/flip vert
.0d16	4c 92 0c	               jmp  loop
.0d19	20 98 13	dof3           jsr  f3action  ;load/flip horz
.0d1c	4c 92 0c	               jmp  loop
.0d1f	20 65 14	dof4           jsr  f4action  ;copy/scroll r
.0d22	4c 92 0c	               jmp  loop
.0d25	20 2b 15	dof5           jsr  f5action  ;clear/scroll l
.0d28	4c 92 0c	               jmp  loop
.0d2b	20 e3 15	dof6           jsr  f6action  ;fill;/scroll up
.0d2e	4c 92 0c	               jmp  loop
.0d31	20 9b 16	dof7           jsr  f7action  ;clear;/scroll down
.0d34	4c 92 0c	               jmp  loop
.0d37	20 58 17	dof8           jsr  f8action  ; function
.0d3a	4c 92 0c	               jmp  loop
.0d3d	20 61 21	doquit         jsr  pop
.0d40	60		               rts
.0d41			editor
.0d41	20 22 21	               jsr  push
.0d44	20 22 21	               jsr  push
.0d47	a2 74		               ldx  #<blankmsg
.0d49	a0 19		               ldy  #>blankmsg
.0d4b	20 ba 20	               jsr  putscxy
.0d4e	a2 27		               ldx  #<exit_msg
.0d50	a0 1c		               ldy  #>exit_msg
.0d52	20 ba 20	               jsr  putscxy
.0d55	20 61 21	               jsr  pop
.0d58	20 22 21	               jsr  push
.0d5b	a2 74		               ldx  #<blankmsg
.0d5d	a0 19		               ldy  #>blankmsg
.0d5f	20 ba 20	               jsr  putscxy
.0d62	a2 c6		               ldx  #<edit_msg
.0d64	a0 19		               ldy  #>edit_msg
.0d66	20 ba 20	               jsr  putscxy
.0d69	20 61 21	               jsr  pop
.0d6c	20 af 0e	               jsr  setcurs
.0d6f	ad 15 09	               lda  currentkey
.0d72	20 22 21	               jsr  push
.0d75	a2 11		               ldx  #17
.0d77	a0 05		               ldy  #5
.0d79	20 4b 20	               jsr  gotoxy
.0d7c	20 61 21	               jsr  pop
.0d7f	20 e8 23	               jsr  atodec
.0d82	20 22 21	               jsr  push
.0d85	a2 ec		isx            ldx  #<adec
.0d87	a0 22		isy            ldy  #>adec
.0d89	20 31 20	               jsr  puts
.0d8c	20 61 21	               jsr  pull
.0d8f	20 f3 0e	               jsr  drawbitmap
.0d92	20 42 25	ed_loop        jsr  getkey
.0d95	c9 85		f1             cmp  #f1key
.0d97	d0 03		               bne  cu
.0d99	4c 81 0e	               jmp  do_ctrlx
.0d9c	c9 91		cu             cmp  #cursu
.0d9e	d0 03		               bne  cd
.0da0	4c 2c 0e	               jmp  do_up
.0da3	c9 11		cd             cmp  #cursd
.0da5	d0 03		               bne  cl
.0da7	4c 3f 0e	               jmp  do_down
.0daa	c9 9d		cl             cmp  #cursl
.0dac	d0 03		               bne  cr
.0dae	4c 52 0e	               jmp  do_left
.0db1	c9 1d		cr             cmp  #cursr
.0db3	d0 03		               bne  cx
.0db5	4c 65 0e	               jmp  do_right
.0db8	c9 18		cx             cmp  #ctrl_x
.0dba	d0 03		               bne  sp
.0dbc	4c 81 0e	               jmp  do_ctrlx
.0dbf	c9 20		sp             cmp  #$20
.0dc1	d0 03		               bne  ishex14
.0dc3	4c 78 0e	               jmp  do_swap
.0dc6	c9 14		ishex14        cmp  #$14
.0dc8	d0 03		               bne  ishex12
.0dca	4c 78 0e	               jmp  do_swap
.0dcd	c9 12		ishex12        cmp  #$12
.0dcf	d0 03		               bne  rest
.0dd1	4c 78 0e	               jmp  do_swap
.0dd4			rest
.0dd4	20 22 21	               jsr  push
.0dd7	a2 0d		               ldx  #13
.0dd9	a0 0c		               ldy  #12
.0ddb	20 4b 20	               jsr  gotoxy
.0dde	20 61 21	               jsr  pop
.0de1	20 2b 20	               jsr  putch
.0de4	48		               pha
.0de5	ad 15 09	               lda  currentkey
.0de8	8d 16 09	               sta  previouskey
.0deb	68		               pla
.0dec	8d 15 09	               sta  currentkey
.0def	aa		               tax
.0df0	bc 1d 24	               ldy  asciitorom,x
.0df3	8c 17 09	               sty  bitmapoffset
.0df6	20 48 0b	               jsr  drawkeyval
.0df9	20 f3 0e	               jsr  drawbitmap
.0dfc	20 22 21	               jsr  push
.0dff	a2 0d		               ldx  #13
.0e01	a0 0c		               ldy  #12
.0e03	20 4b 20	               jsr  gotoxy
.0e06	20 61 21	               jsr  pop
.0e09	20 2b 20	               jsr  putch
.0e0c	20 22 21	               jsr  push
.0e0f	a2 11		               ldx  #17
.0e11	a0 05		               ldy  #5
.0e13	20 4b 20	               jsr  gotoxy
.0e16	20 61 21	               jsr  pop
.0e19	20 e8 23	               jsr  atodec
.0e1c	20 22 21	               jsr  push
.0e1f	a2 ec		isx            ldx  #<adec
.0e21	a0 22		isy            ldy  #>adec
.0e23	20 31 20	               jsr  puts
.0e26	20 61 21	               jsr  pull
.0e29	4c 7e 0e	               jmp  totop
.0e2c	ad 1e 09	do_up          lda  cursln
.0e2f	c9 09		               cmp  #grid_top
.0e31	f0 4b		               beq  totop
.0e33	20 d1 0e	               jsr  clrcurs
.0e36	ce 1e 09	               dec  cursln
.0e39	20 af 0e	               jsr  setcurs
.0e3c	4c 7e 0e	               jmp  totop
.0e3f	ad 1e 09	do_down        lda  cursln
.0e42	c9 10		               cmp  #grid_bot
.0e44	f0 38		               beq  totop
.0e46	20 d1 0e	               jsr  clrcurs
.0e49	ee 1e 09	               inc  cursln
.0e4c	20 af 0e	               jsr  setcurs
.0e4f	4c 7e 0e	               jmp  totop
.0e52	ad 1f 09	do_left        lda  curscl
.0e55	c9 01		               cmp  #grid_left
.0e57	f0 25		               beq  totop
.0e59	20 d1 0e	               jsr  clrcurs
.0e5c	ce 1f 09	               dec  curscl
.0e5f	20 af 0e	               jsr  setcurs
.0e62	4c 7e 0e	               jmp  totop
.0e65	ad 1f 09	do_right       lda  curscl
.0e68	c9 08		               cmp  #grid_right
.0e6a	f0 12		               beq  totop
.0e6c	20 d1 0e	               jsr  clrcurs
.0e6f	ee 1f 09	               inc  curscl
.0e72	20 af 0e	               jsr  setcurs
.0e75	4c 7e 0e	               jmp  totop
.0e78	20 88 0e	do_swap        jsr  do_eor
.0e7b	20 f3 0e	               jsr  drawbitmap
.0e7e	4c 92 0d	totop          jmp  ed_loop
.0e81	20 d1 0e	do_ctrlx       jsr  clrcurs
.0e84	20 61 21	               jsr  pop
.0e87	60		               rts
.0e88			do_eor
.0e88	20 22 21	               jsr  push
.0e8b	ad 18 09	               lda  mapaddr
.0e8e	85 fd		               sta  zpage2
.0e90	ad 19 09	               lda  mapaddr+1
.0e93	85 fe		               sta  zpage2+1
.0e95	ae 1e 09	               ldx  cursln     ; calcul de
.0e98	ca		               dex            ; l'offset de
.0e99	8a		               txa            ; la
.0e9a	29 f7		               and  #$f7      ; ligne
.0e9c	a8		               tay
.0e9d	ae 1f 09	               ldx  curscl
.0ea0	ca		               dex
.0ea1	bd 0a 09	               lda  eorval,x
.0ea4	51 fd		               eor  (zpage2),y
.0ea6	20 48 0b	               jsr  drawkeyval
.0ea9	91 fd		               sta  (zpage2),y
.0eab	20 61 21	               jsr  pop
.0eae	60		               rts
.0eaf			setcurs
.0eaf	20 22 21	               jsr  push
.0eb2	a2 01		               ldx  #grid_left
.0eb4	ac 1e 09	               ldy  cursln
.0eb7	20 4b 20	               jsr  gotoxy
.0eba	a9 da		               lda  #$da
.0ebc	20 2b 20	               jsr  putch
.0ebf	ae 1f 09	               ldx  curscl
.0ec2	e8		               inx
.0ec3	a0 08		               ldy  #grid_top-1
.0ec5	20 4b 20	               jsr  gotoxy
.0ec8	a9 da		               lda  #$da
.0eca	20 2b 20	               jsr  putch
.0ecd	20 61 21	               jsr  pop
.0ed0	60		               rts
.0ed1			clrcurs
.0ed1	20 22 21	               jsr  push
.0ed4	a2 01		               ldx  #grid_left
.0ed6	ac 1e 09	               ldy  cursln
.0ed9	20 4b 20	               jsr  gotoxy
.0edc	a9 20		               lda  #$20
.0ede	20 2b 20	               jsr  putch
.0ee1	ae 1f 09	               ldx  curscl
.0ee4	e8		               inx
.0ee5	a0 08		               ldy  #grid_top-1
.0ee7	20 4b 20	               jsr  gotoxy
.0eea	a9 20		               lda  #$20
.0eec	20 2b 20	               jsr  putch
.0eef	20 61 21	               jsr  pop
.0ef2	60		               rts
.0ef3			drawbitmap
.0ef3	20 22 21	               jsr  push
.0ef6	20 5a 0f	               jsr  calcmapaddr
.0ef9	ad 18 09	               lda  mapaddr        ; on pointe sur la table des bitmaps
.0efc	85 fb		               sta  zpage1
.0efe	ad 19 09	               lda  mapaddr+1
.0f01	85 fc		               sta  zpage1+1
.0f03	a0 00		drawchar       ldy  #$00
.0f05	a2 09		               ldx  #grid_top      ;on replace la ...
.0f07	8e 10 0f	               stx  isy+1          ;ligne de départ
.0f0a	20 22 21	nextline       jsr  push
.0f0d	a2 02		               ldx  #grid_left+1        ; la colonne
.0f0f	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.0f11	20 4b 20	               jsr  gotoxy
.0f14	20 61 21	               jsr  pop
.0f17	b1 fb		               lda  (zpage1),y     ; on li une ligne
.0f19	20 8c 23	               jsr  atobin
.0f1c	20 89 0f	               jsr  abintograph
.0f1f	20 22 21	               jsr  push
.0f22	a2 e3		isx            ldx  #<abin
.0f24	a0 22		isy            ldy  #>abin
.0f26	20 31 20	               jsr  puts
.0f29	20 61 21	               jsr  pull
.0f2c	ee 10 0f	               inc  isy+1
.0f2f	c8		               iny
.0f30	c0 08		               cpy  #$08
.0f32	30 d6		               bmi  nextline
.0f34	20 3b 0f	               jsr  highlight
.0f37	20 61 21	               jsr  pop
.0f3a	60		               rts
.0f3b			highlight
.0f3b	20 22 21	               jsr  push
.0f3e	ae 16 09	               ldx  previouskey
.0f41	bd 1d 24	               lda  asciitorom,x
.0f44	aa		               tax
.0f45	a9 0f		               lda  #charscolor
.0f47	9d 00 d8	               sta  colorram,x
.0f4a	ae 15 09	               ldx  currentkey
.0f4d	bd 1d 24	               lda  asciitorom,x
.0f50	aa		               tax
.0f51	a9 01		               lda  #charcolor
.0f53	9d 00 d8	               sta  colorram,x
.0f56	20 61 21	               jsr  pop
.0f59	60		               rts
.0f5a			calcmapaddr
.0f5a	20 22 21	               jsr  push
.0f5d	ad 08 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0f60	85 fb		               sta  zpage1
.0f62	ad 09 09	               lda  bitmapaddr+1
.0f65	85 fc		               sta  zpage1+1
.0f67	ae 17 09	               ldx  bitmapoffset
.0f6a	e0 00		               cpx  #$00
.0f6c	f0 08		               beq  thesame         ; sommes nous déja à 0
.0f6e	a9 08		addagain       lda  #$08
.0f70	20 b9 11	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0f73	ca		               dex                 ; pour chaque caracteres
.0f74	d0 f8		               bne  addagain
.0f76	48		thesame        pha
.0f77	a5 fb		               lda  zpage1
.0f79	8d 18 09	               sta  mapaddr
.0f7c	a5 fc		               lda  zpage1+1
.0f7e	8d 19 09	               sta  mapaddr+1
.0f81	68		               pla
.0f82	20 48 0b	               jsr  drawkeyval
.0f85	20 61 21	out            jsr  pop
.0f88	60		               rts
.0f89			abintograph
.0f89	20 22 21	               jsr  push
.0f8c	a9 e3		               lda  #<abin
.0f8e	85 fb		               sta  zpage1
.0f90	a9 22		               lda  #>abin+1
.0f92	85 fc		               sta  zpage1+1
.0f94	a0 00		               ldy  #$00
.0f96	b1 fb		nextbit        lda  (zpage1),y
.0f98	c9 30		               cmp  #$30
.0f9a	f0 07		               beq  itszero
.0f9c	a9 d1		itsone         lda  #$d1
.0f9e	91 fb		               sta  (zpage1),y
.0fa0	4c a7 0f	               jmp  next
.0fa3	a9 2e		itszero        lda  #$2e
.0fa5	91 fb		               sta  (zpage1),y
.0fa7	c8		next           iny
.0fa8	c0 08		               cpy  #$08
.0faa	30 ea		               bmi  nextbit
.0fac	20 61 21	               jsr  pop
.0faf	60		               rts
.0fb0			setscreenptr
.0fb0	20 22 21	               jsr  push
.0fb3	a9 08		               lda  #$08      ; basic commande to disable ...
.0fb5	20 d2 ff	               jsr  chrout    ; ... character set change.
.0fb8	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.0fbb	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.0fbd	09 0a		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.0fbf	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.0fc2	20 61 21	               jsr  pop
.0fc5	60		               rts
.0fc6			copycharset
.0fc6	20 22 21	               jsr  push
.0fc9	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0fcc	29 fe		               and  #%11111110     ;254
.0fce	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0fd1	a5 01		               lda  u6510map       ;$01
.0fd3	29 fb		               and  #%11111011     ;251
.0fd5	85 01		               sta  u6510map       ;$01
.0fd7	20 ec 0f	               jsr  memcopy
.0fda	a5 01		               lda  u6510map       ;$01
.0fdc	09 04		               ora  #%00000100
.0fde	85 01		               sta  u6510map       ;$01
.0fe0	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0fe3	09 01		               ora  #%00000001     ;254
.0fe5	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0fe8	20 61 21	               jsr  pop
.0feb	60		               rts
.0fec			memcopy
.0fec	20 22 21	               jsr  push
.0fef	ad 04 09	               lda  startaddr
.0ff2	85 fb		               sta  zpage1
.0ff4	ad 05 09	               lda  startaddr+1
.0ff7	85 fc		               sta  zpage1+1
.0ff9	ad 08 09	               lda  bitmapaddr
.0ffc	85 fd		               sta  zpage2
.0ffe	ad 09 09	               lda  bitmapaddr+1
.1001	85 fe		               sta  zpage2+1
.1003	a0 00		               ldy  #$00
.1005	b1 fb		onemore        lda  (zpage1),y
.1007	91 fd		               sta  (zpage2),y
.1009	20 29 22	               jsr  inczp1
.100c	20 41 22	               jsr  inczp2
.100f	a5 fc		               lda  zpage1+1
.1011	cd 07 09	               cmp  stopaddr+1
.1014	d0 ef		               bne  onemore
.1016	a5 fb		               lda  zpage1
.1018	cd 06 09	               cmp  stopaddr
.101b	d0 e8		               bne  onemore
.101d	20 61 21	               jsr  pop
.1020	60		               rts
.1021			staticscreen
.1021	48		               pha
.1022	a9 0b		               lda  #bordure
.1024	8d 20 d0	               sta  $d020
.1027	68		               pla
.1028	48		               pha
.1029	a9 00		               lda  #fond
.102b	8d 21 d0	               sta  $d021
.102e	68		               pla
.102f	20 10 11	               jsr  drawlines
.1032	20 ec 10	               jsr  drawallchars
.1035	20 58 11	               jsr  drawgrid
.1038	20 5d 10	               jsr  drawfkeys
.103b	20 22 21	               jsr  push
.103e	a2 74		               ldx  #<blankmsg
.1040	a0 19		               ldy  #>blankmsg
.1042	20 ba 20	               jsr  putscxy
.1045	a2 12		               ldx  #<quit_msg
.1047	a0 1c		               ldy  #>quit_msg
.1049	20 ba 20	               jsr  putscxy
.104c	20 61 21	               jsr  pop
.104f	20 22 21	               jsr  push
.1052	a2 00		               ldx  #0
.1054	a0 07		               ldy  #7
.1056	20 4b 20	               jsr  gotoxy
.1059	20 61 21	               jsr  pop
.105c	60		               rts
.105d			drawfkeys
.105d	20 22 21	               jsr  push
.1060	ad 13 09	               lda  fkeyset
.1063	c9 00		               cmp  #$0
.1065	d0 42		               bne  secondks
.1067	a2 f4		               ldx #<titremenu1
.1069	a0 1d		               ldy #>titremenu1
.106b	20 ba 20	               jsr putscxy
.106e	a2 2a		               ldx #<f1abutton
.1070	a0 1e		               ldy #>f1abutton
.1072	20 ba 20	               jsr putscxy
.1075	a2 45		               ldx #<f2abutton
.1077	a0 1e		               ldy #>f2abutton
.1079	20 ba 20	               jsr putscxy
.107c	a2 60		               ldx #<f3abutton
.107e	a0 1e		               ldy #>f3abutton
.1080	20 ba 20	               jsr putscxy
.1083	a2 7b		               ldx #<f4abutton
.1085	a0 1e		               ldy #>f4abutton
.1087	20 ba 20	               jsr putscxy
.108a	a2 96		               ldx #<f5abutton
.108c	a0 1e		               ldy #>f5abutton
.108e	20 ba 20	               jsr putscxy
.1091	a2 b1		               ldx #<f6abutton
.1093	a0 1e		               ldy #>f6abutton
.1095	20 ba 20	               jsr putscxy
.1098	a2 cc		               ldx #<f7abutton
.109a	a0 1e		               ldy #>f7abutton
.109c	20 ba 20	               jsr putscxy
.109f	a2 e7		               ldx #<f8abutton
.10a1	a0 1e		               ldy #>f8abutton
.10a3	20 ba 20	               jsr putscxy
.10a6	4c e8 10	               jmp end
.10a9			secondks
.10a9	a2 0f		               ldx #<titremenu2
.10ab	a0 1e		               ldy #>titremenu2
.10ad	20 ba 20	               jsr putscxy
.10b0	a2 02		               ldx #<f1bbutton
.10b2	a0 1f		               ldy #>f1bbutton
.10b4	20 ba 20	               jsr putscxy
.10b7	a2 1d		               ldx #<f2bbutton
.10b9	a0 1f		               ldy #>f2bbutton
.10bb	20 ba 20	               jsr putscxy
.10be	a2 38		               ldx #<f3bbutton
.10c0	a0 1f		               ldy #>f3bbutton
.10c2	20 ba 20	               jsr putscxy
.10c5	a2 53		               ldx #<f4bbutton
.10c7	a0 1f		               ldy #>f4bbutton
.10c9	20 ba 20	               jsr putscxy
.10cc	a2 6e		               ldx #<f5bbutton
.10ce	a0 1f		               ldy #>f5bbutton
.10d0	20 ba 20	               jsr putscxy
.10d3	a2 89		               ldx #<f6bbutton
.10d5	a0 1f		               ldy #>f6bbutton
.10d7	20 ba 20	               jsr putscxy
.10da	a2 a4		               ldx #<f7bbutton
.10dc	a0 1f		               ldy #>f7bbutton
.10de	20 ba 20	               jsr putscxy
.10e1	a2 bf		               ldx #<f8bbutton
.10e3	a0 1f		               ldy #>f8bbutton
.10e5	20 ba 20	               jsr putscxy
.10e8	20 61 21	end            jsr  pop
.10eb	60		               rts
.10ec			drawallchars
.10ec	20 22 21	               jsr push
.10ef	20 22 21	               jsr  push
.10f2	a2 00		               ldx  #0
.10f4	a0 00		               ldy  #0
.10f6	20 4b 20	               jsr  gotoxy
.10f9	20 61 21	               jsr  pop
.10fc	a2 00		               ldx  #$00
.10fe	8a		nextc          txa
.10ff	9d 00 04	               sta  scrnnewram,x
.1102	a9 0f		               lda  #charscolor
.1104	9d 00 d8	               sta  colorram,x
.1107	e8		               inx
.1108	e0 80		               cpx  #$80
.110a	d0 f2		               bne  nextc
.110c	20 61 21	               jsr  pop
.110f	60		               rts
.1110			drawlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.1110	20 22 21	               jsr  push
.1113	a2 28		               ldx  #40
.1115	a9 40		               lda  #64
.1117	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.111a	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.111d	ca		               dex
.111e	e0 10		hline          cpx  #vlinepos
.1120	10 03		               bpl  notyet
.1122	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.1125	e0 00		notyet         cpx  #$00
.1127	d0 ee		               bne  nextl
.1129	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.112b	85 fb		               sta  zpage1
.112d	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.112f	85 fc		               sta  zpage1+1
.1131	a0 00		               ldy  #0
.1133	a9 72		               lda  #114
.1135	91 fb		               sta  (zpage1),y
.1137	20 c7 11	               jsr  zp1add40
.113a	a2 12		               ldx  #24-hline2
.113c	a9 5d		               lda  #93
.113e	91 fb		another93      sta  (zpage1),y
.1140	20 c7 11	               jsr  zp1add40
.1143	ca		               dex
.1144	d0 f8		               bne  another93
.1146	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.1148	85 fb		               sta  zpage1
.114a	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.114c	85 fc		               sta  zpage1+1
.114e	a0 00		               ldy  #0
.1150	a9 73		               lda  #115
.1152	91 fb		               sta  (zpage1),y
.1154	20 61 21	               jsr  pop
.1157	60		               rts
.1158			drawgrid
.1158	20 22 21	               jsr  push
.115b	20 da 1f	               jsr  screendis
.115e	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.1160	85 fb		               sta  zpage1
.1162	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.1164	85 fc		               sta  zpage1+1
.1166	a2 08		               ldx  #8
.1168	a9 65		nextbox        lda  #101
.116a	a0 09		               ldy  #9
.116c	91 fb		               sta  (zpage1),y
.116e	88		               dey
.116f	a9 2e		               lda  #$2e
.1171	91 fb		nextcol        sta  (zpage1),y
.1173	88		               dey
.1174	d0 fb		               bne  nextcol
.1176	20 c7 11	               jsr  zp1add40
.1179	ca		               dex
.117a	d0 ec		               bne  nextbox
.117c	a0 08		               ldy  #8
.117e	a9 77		               lda  #119
.1180	91 fb		nextlin        sta  (zpage1),y
.1182	88		               dey
.1183	d0 fb		               bne  nextlin
.1185	a9 3e		               lda  #$3e
.1187	8d eb 05	               sta  scrnnewram+(40*(12))+11
.118a	a9 70		               lda  #$70                     ;+
.118c	8d c4 05	               sta  scrnnewram+(40*(11))+12
.118f	a9 43		               lda  #$43                     ;-
.1191	8d c5 05	               sta  scrnnewram+(40*(11))+13
.1194	a9 6e		               lda  #$6e                     ;+
.1196	8d c6 05	               sta  scrnnewram+(40*(11))+14
.1199	a9 5d		               lda  #$5d                     ;|
.119b	8d ec 05	               sta  scrnnewram+(40*(12))+12
.119e	a9 5d		               lda  #$5d                     ;|
.11a0	8d ee 05	               sta  scrnnewram+(40*(12))+14
.11a3	a9 6d		               lda  #$6d                     ;+
.11a5	8d 14 06	               sta  scrnnewram+(40*(13))+12
.11a8	a9 43		               lda  #$43                     ;-
.11aa	8d 15 06	               sta  scrnnewram+(40*(13))+13
.11ad	a9 7d		               lda  #$7d                     ;+
.11af	8d 16 06	               sta  scrnnewram+(40*(13))+14
.11b2	20 e7 1f	               jsr screenena
.11b5	20 61 21	               jsr  pop
.11b8	60		               rts
.11b9			zp1addnum
.11b9	08		               php
.11ba	48		               pha
.11bb	18		               clc
.11bc	65 fb		               adc  zpage1
.11be	90 02		               bcc  nocarry
.11c0	e6 fc		               inc  zpage1+1
.11c2	85 fb		nocarry        sta  zpage1
.11c4	68		               pla
.11c5	28		               plp
.11c6	60		               rts
.11c7			zp1add40
.11c7	08		               php
.11c8	48		               pha
.11c9	18		               clc
.11ca	a5 fb		               lda  zpage1
.11cc	69 28		               adc  #40
.11ce	90 02		               bcc  nocarry
.11d0	e6 fc		               inc  zpage1+1
.11d2	85 fb		nocarry        sta  zpage1
.11d4	68		               pla
.11d5	28		               plp
.11d6	60		               rts
.11d7			delay
.11d7	20 22 21	               jsr  push
.11da	a9 00		               lda  #$0
.11dc	aa		               tax
.11dd	a8		               tay
.11de	ca		xagain         dex
.11df	ca		               dex
.11e0	88		yagain         dey
.11e1	c0 00		               cpy  #$00
.11e3	d0 fb		               bne  yagain
.11e5	e0 00		               cpx  #$00
.11e7	d0 f5		               bne  xagain
.11e9	20 61 21	               jsr  pop
.11ec	60		               rts
.11ed			f1action
.11ed	48		               pha
.11ee	a9 ff		               lda  #$ff
.11f0	8d 12 09	               sta  editmode
.11f3	ad 13 09	               lda  fkeyset
.11f6	f0 03		               beq  menua
.11f8	4c 80 12	               jmp  menub
.11fb			menua
.11fb	20 22 21	               jsr  push
.11fe	a2 74		               ldx  #<blankmsg
.1200	a0 19		               ldy  #>blankmsg
.1202	20 ba 20	               jsr  putscxy
.1205	a2 c6		               ldx  #<f1a_msg
.1207	a0 19		               ldy  #>f1a_msg
.1209	20 ba 20	               jsr  putscxy
.120c	20 61 21	               jsr  pop
.120f	08		               php
.1210	48		               pha
.1211	8a		               txa
.1212	48		               pha
.1213	ad 2a 1e	               lda  f1abutton
.1216	48		               pha
.1217	a9 92		               lda  #146
.1219	8d 3c 1e	               sta  f1abutton+18
.121c	a9 01		               lda  #flashcol
.121e	8d 2a 1e	               sta  f1abutton
.1221	a2 2a		               ldx  #<f1abutton
.1223	a0 1e		               ldy  #>f1abutton
.1225	20 ba 20	               jsr  putscxy
.1228	20 d7 11	               jsr  delay
.122b	a9 12		               lda  #18
.122d	8d 3c 1e	               sta  f1abutton+18
.1230	68		               pla
.1231	8d 2a 1e	               sta  f1abutton
.1234	a2 2a		               ldx  #<f1abutton
.1236	a0 1e		               ldy  #>f1abutton
.1238	20 ba 20	               jsr  putscxy
.123b	68		               pla
.123c	aa		               tax
.123d	68		               pla
.123e	28		               plp
.123f	a9 0b		               lda  #vgris
.1241	20 0a 0b	               jsr  setmenuacolor
.1244	a9 03		               lda  #menu1col1
.1246	8d 2a 1e	               sta  f1abutton
.1249	20 5d 10	               jsr  drawfkeys
.124c	20 41 0d	               jsr  editor
.124f	20 22 21	               jsr  push
.1252	a2 74		               ldx  #<blankmsg
.1254	a0 19		               ldy  #>blankmsg
.1256	20 ba 20	               jsr  putscxy
.1259	a2 12		               ldx  #<quit_msg
.125b	a0 1c		               ldy  #>quit_msg
.125d	20 ba 20	               jsr  putscxy
.1260	20 61 21	               jsr  pop
.1263	20 22 21	               jsr  push
.1266	a2 74		               ldx  #<blankmsg
.1268	a0 19		               ldy  #>blankmsg
.126a	20 ba 20	               jsr  putscxy
.126d	a2 6a		               ldx  #<menua_msg
.126f	a0 1b		               ldy  #>menua_msg
.1271	20 ba 20	               jsr  putscxy
.1274	20 61 21	               jsr  pop
.1277	20 c4 0a	               jsr  resetmenuacolor
.127a	20 5d 10	               jsr  drawfkeys
.127d	4c ca 12	               jmp  out
.1280			menub
.1280	20 22 21	               jsr  push
.1283	a2 74		               ldx  #<blankmsg
.1285	a0 19		               ldy  #>blankmsg
.1287	20 ba 20	               jsr  putscxy
.128a	a2 ae		               ldx  #<f1b_msg
.128c	a0 1a		               ldy  #>f1b_msg
.128e	20 ba 20	               jsr  putscxy
.1291	20 61 21	               jsr  pop
.1294	08		               php
.1295	48		               pha
.1296	8a		               txa
.1297	48		               pha
.1298	ad 02 1f	               lda  f1bbutton
.129b	48		               pha
.129c	a9 92		               lda  #146
.129e	8d 14 1f	               sta  f1bbutton+18
.12a1	a9 01		               lda  #flashcol
.12a3	8d 02 1f	               sta  f1bbutton
.12a6	a2 02		               ldx  #<f1bbutton
.12a8	a0 1f		               ldy  #>f1bbutton
.12aa	20 ba 20	               jsr  putscxy
.12ad	20 d7 11	               jsr  delay
.12b0	a9 12		               lda  #18
.12b2	8d 14 1f	               sta  f1bbutton+18
.12b5	68		               pla
.12b6	8d 02 1f	               sta  f1bbutton
.12b9	a2 02		               ldx  #<f1bbutton
.12bb	a0 1f		               ldy  #>f1bbutton
.12bd	20 ba 20	               jsr  putscxy
.12c0	68		               pla
.12c1	aa		               tax
.12c2	68		               pla
.12c3	28		               plp
.12c4	20 40 19	               jsr  flipvert
.12c7	20 f3 0e	               jsr  drawbitmap
.12ca	68		out            pla
.12cb	20 22 21	               jsr  push
.12ce	a2 74		               ldx  #<blankmsg
.12d0	a0 19		               ldy  #>blankmsg
.12d2	20 ba 20	               jsr  putscxy
.12d5	a2 a0		               ldx  #<prompt_msg
.12d7	a0 19		               ldy  #>prompt_msg
.12d9	20 ba 20	               jsr  putscxy
.12dc	20 61 21	               jsr  pop
.12df	60		               rts
.12e0			f2action
.12e0	48		               pha
.12e1	a9 00		               lda  #$0
.12e3	8d 12 09	               sta  editmode
.12e6	ad 13 09	               lda  fkeyset
.12e9	d0 4d		               bne  menub
.12eb	20 22 21	               jsr  push
.12ee	a2 74		               ldx  #<blankmsg
.12f0	a0 19		               ldy  #>blankmsg
.12f2	20 ba 20	               jsr  putscxy
.12f5	a2 e1		               ldx  #<f2a_msg
.12f7	a0 19		               ldy  #>f2a_msg
.12f9	20 ba 20	               jsr  putscxy
.12fc	20 61 21	               jsr  pop
.12ff	08		               php
.1300	48		               pha
.1301	8a		               txa
.1302	48		               pha
.1303	ad 45 1e	               lda  f2abutton
.1306	48		               pha
.1307	a9 92		               lda  #146
.1309	8d 57 1e	               sta  f2abutton+18
.130c	a9 01		               lda  #flashcol
.130e	8d 45 1e	               sta  f2abutton
.1311	a2 45		               ldx  #<f2abutton
.1313	a0 1e		               ldy  #>f2abutton
.1315	20 ba 20	               jsr  putscxy
.1318	20 d7 11	               jsr  delay
.131b	a9 12		               lda  #18
.131d	8d 57 1e	               sta  f2abutton+18
.1320	68		               pla
.1321	8d 45 1e	               sta  f2abutton
.1324	a2 45		               ldx  #<f2abutton
.1326	a0 1e		               ldy  #>f2abutton
.1328	20 ba 20	               jsr  putscxy
.132b	68		               pla
.132c	aa		               tax
.132d	68		               pla
.132e	28		               plp
.132f	20 ac 09	               jsr  copychar
.1332	20 f3 0e	               jsr  drawbitmap
.1335	4c 82 13	               jmp  out
.1338			menub
.1338	20 22 21	               jsr  push
.133b	a2 74		               ldx  #<blankmsg
.133d	a0 19		               ldy  #>blankmsg
.133f	20 ba 20	               jsr  putscxy
.1342	a2 ca		               ldx  #<f2b_msg
.1344	a0 1a		               ldy  #>f2b_msg
.1346	20 ba 20	               jsr  putscxy
.1349	20 61 21	               jsr  pop
.134c	08		               php
.134d	48		               pha
.134e	8a		               txa
.134f	48		               pha
.1350	ad 1d 1f	               lda  f2bbutton
.1353	48		               pha
.1354	a9 92		               lda  #146
.1356	8d 2f 1f	               sta  f2bbutton+18
.1359	a9 01		               lda  #flashcol
.135b	8d 1d 1f	               sta  f2bbutton
.135e	a2 1d		               ldx  #<f2bbutton
.1360	a0 1f		               ldy  #>f2bbutton
.1362	20 ba 20	               jsr  putscxy
.1365	20 d7 11	               jsr  delay
.1368	a9 12		               lda  #18
.136a	8d 2f 1f	               sta  f2bbutton+18
.136d	68		               pla
.136e	8d 1d 1f	               sta  f2bbutton
.1371	a2 1d		               ldx  #<f2bbutton
.1373	a0 1f		               ldy  #>f2bbutton
.1375	20 ba 20	               jsr  putscxy
.1378	68		               pla
.1379	aa		               tax
.137a	68		               pla
.137b	28		               plp
.137c	20 13 19	               jsr  fliphorz
.137f	20 f3 0e	               jsr  drawbitmap
.1382	68		out            pla
.1383	20 22 21	               jsr  push
.1386	a2 74		               ldx  #<blankmsg
.1388	a0 19		               ldy  #>blankmsg
.138a	20 ba 20	               jsr  putscxy
.138d	a2 a0		               ldx  #<prompt_msg
.138f	a0 19		               ldy  #>prompt_msg
.1391	20 ba 20	               jsr  putscxy
.1394	20 61 21	               jsr  pop
.1397	60		               rts
.1398			f3action
.1398	48		               pha
.1399	a9 00		               lda  #$0
.139b	8d 12 09	               sta  editmode
.139e	ad 13 09	               lda  fkeyset
.13a1	d0 62		               bne  menub
.13a3	08		               php
.13a4	48		               pha
.13a5	8a		               txa
.13a6	48		               pha
.13a7	ad 60 1e	               lda  f3abutton
.13aa	48		               pha
.13ab	a9 92		               lda  #146
.13ad	8d 72 1e	               sta  f3abutton+18
.13b0	a9 01		               lda  #flashcol
.13b2	8d 60 1e	               sta  f3abutton
.13b5	a2 60		               ldx  #<f3abutton
.13b7	a0 1e		               ldy  #>f3abutton
.13b9	20 ba 20	               jsr  putscxy
.13bc	20 d7 11	               jsr  delay
.13bf	a9 12		               lda  #18
.13c1	8d 72 1e	               sta  f3abutton+18
.13c4	68		               pla
.13c5	8d 60 1e	               sta  f3abutton
.13c8	a2 60		               ldx  #<f3abutton
.13ca	a0 1e		               ldy  #>f3abutton
.13cc	20 ba 20	               jsr  putscxy
.13cf	68		               pla
.13d0	aa		               tax
.13d1	68		               pla
.13d2	28		               plp
.13d3	20 22 21	               jsr  push
.13d6	a2 74		               ldx  #<blankmsg
.13d8	a0 19		               ldy  #>blankmsg
.13da	20 ba 20	               jsr  putscxy
.13dd	a2 02		               ldx  #<f3a_msg
.13df	a0 1a		               ldy  #>f3a_msg
.13e1	20 ba 20	               jsr  putscxy
.13e4	20 61 21	               jsr  pop
.13e7	20 42 25	getagain       jsr  getkey
.13ea	c9 31		               cmp  #$31
.13ec	f0 0b		               beq  devok
.13ee	c9 38		               cmp  #$38
.13f0	f0 07		               beq  devok
.13f2	c9 39		               cmp  #$39
.13f4	f0 03		               beq  devok
.13f6	4c e7 13	               jmp  getagain
.13f9	8d 32 09	devok          sta  device
.13fc	20 3a 09	               jsr  getfname
.13ff	20 bd 08	               jsr  loadfromfile
.1402	4c 4f 14	               jmp  out
.1405			menub
.1405	20 22 21	               jsr  push
.1408	a2 74		               ldx  #<blankmsg
.140a	a0 19		               ldy  #>blankmsg
.140c	20 ba 20	               jsr  putscxy
.140f	a2 e8		               ldx  #<f3b_msg
.1411	a0 1a		               ldy  #>f3b_msg
.1413	20 ba 20	               jsr  putscxy
.1416	20 61 21	               jsr  pop
.1419	08		               php
.141a	48		               pha
.141b	8a		               txa
.141c	48		               pha
.141d	ad 38 1f	               lda  f3bbutton
.1420	48		               pha
.1421	a9 92		               lda  #146
.1423	8d 4a 1f	               sta  f3bbutton+18
.1426	a9 01		               lda  #flashcol
.1428	8d 38 1f	               sta  f3bbutton
.142b	a2 38		               ldx  #<f3bbutton
.142d	a0 1f		               ldy  #>f3bbutton
.142f	20 ba 20	               jsr  putscxy
.1432	20 d7 11	               jsr  delay
.1435	a9 12		               lda  #18
.1437	8d 4a 1f	               sta  f3bbutton+18
.143a	68		               pla
.143b	8d 38 1f	               sta  f3bbutton
.143e	a2 38		               ldx  #<f3bbutton
.1440	a0 1f		               ldy  #>f3bbutton
.1442	20 ba 20	               jsr  putscxy
.1445	68		               pla
.1446	aa		               tax
.1447	68		               pla
.1448	28		               plp
.1449	20 9e 18	               jsr  scrollright
.144c	20 f3 0e	               jsr  drawbitmap
.144f	68		out            pla
.1450	20 22 21	               jsr  push
.1453	a2 74		               ldx  #<blankmsg
.1455	a0 19		               ldy  #>blankmsg
.1457	20 ba 20	               jsr  putscxy
.145a	a2 a0		               ldx  #<prompt_msg
.145c	a0 19		               ldy  #>prompt_msg
.145e	20 ba 20	               jsr  putscxy
.1461	20 61 21	               jsr  pop
.1464	60		               rts
.1465			f4action
.1465	48		               pha
.1466	a9 00		               lda  #$0
.1468	8d 12 09	               sta  editmode
.146b	ad 13 09	               lda  fkeyset
.146e	d0 5b		               bne  menub
.1470	08		               php
.1471	48		               pha
.1472	8a		               txa
.1473	48		               pha
.1474	ad 7b 1e	               lda  f4abutton
.1477	48		               pha
.1478	a9 92		               lda  #146
.147a	8d 8d 1e	               sta  f4abutton+18
.147d	a9 01		               lda  #flashcol
.147f	8d 7b 1e	               sta  f4abutton
.1482	a2 7b		               ldx  #<f4abutton
.1484	a0 1e		               ldy  #>f4abutton
.1486	20 ba 20	               jsr  putscxy
.1489	20 d7 11	               jsr  delay
.148c	a9 12		               lda  #18
.148e	8d 8d 1e	               sta  f4abutton+18
.1491	68		               pla
.1492	8d 7b 1e	               sta  f4abutton
.1495	a2 7b		               ldx  #<f4abutton
.1497	a0 1e		               ldy  #>f4abutton
.1499	20 ba 20	               jsr  putscxy
.149c	68		               pla
.149d	aa		               tax
.149e	68		               pla
.149f	28		               plp
.14a0	20 22 21	               jsr  push
.14a3	a2 74		               ldx  #<blankmsg
.14a5	a0 19		               ldy  #>blankmsg
.14a7	20 ba 20	               jsr  putscxy
.14aa	a2 2f		               ldx  #<f4a_msg
.14ac	a0 1a		               ldy  #>f4a_msg
.14ae	20 ba 20	               jsr  putscxy
.14b1	20 61 21	               jsr  pop
.14b4	20 42 25	getagain       jsr  getkey
.14b7	c9 43		               cmp  #$43
.14b9	f0 07		               beq  devok
.14bb	c9 44		               cmp  #$44
.14bd	f0 03		               beq  devok
.14bf	4c b4 14	               jmp  getagain
.14c2	8d 32 09	devok          sta  device
.14c5	20 3a 09	               jsr  getfname
.14c8	4c 15 15	               jmp  out
.14cb			menub
.14cb	20 22 21	               jsr  push
.14ce	a2 74		               ldx  #<blankmsg
.14d0	a0 19		               ldy  #>blankmsg
.14d2	20 ba 20	               jsr  putscxy
.14d5	a2 04		               ldx  #<f4b_msg
.14d7	a0 1b		               ldy  #>f4b_msg
.14d9	20 ba 20	               jsr  putscxy
.14dc	20 61 21	               jsr  pop
.14df	08		               php
.14e0	48		               pha
.14e1	8a		               txa
.14e2	48		               pha
.14e3	ad 53 1f	               lda  f4bbutton
.14e6	48		               pha
.14e7	a9 92		               lda  #146
.14e9	8d 65 1f	               sta  f4bbutton+18
.14ec	a9 01		               lda  #flashcol
.14ee	8d 53 1f	               sta  f4bbutton
.14f1	a2 53		               ldx  #<f4bbutton
.14f3	a0 1f		               ldy  #>f4bbutton
.14f5	20 ba 20	               jsr  putscxy
.14f8	20 d7 11	               jsr  delay
.14fb	a9 12		               lda  #18
.14fd	8d 65 1f	               sta  f4bbutton+18
.1500	68		               pla
.1501	8d 53 1f	               sta  f4bbutton
.1504	a2 53		               ldx  #<f4bbutton
.1506	a0 1f		               ldy  #>f4bbutton
.1508	20 ba 20	               jsr  putscxy
.150b	68		               pla
.150c	aa		               tax
.150d	68		               pla
.150e	28		               plp
.150f	20 c3 18	               jsr  scrollleft
.1512	20 f3 0e	               jsr  drawbitmap
.1515	68		out            pla
.1516	20 22 21	               jsr  push
.1519	a2 74		               ldx  #<blankmsg
.151b	a0 19		               ldy  #>blankmsg
.151d	20 ba 20	               jsr  putscxy
.1520	a2 a0		               ldx  #<prompt_msg
.1522	a0 19		               ldy  #>prompt_msg
.1524	20 ba 20	               jsr  putscxy
.1527	20 61 21	               jsr  pop
.152a	60		               rts
.152b			f5action
.152b	48		               pha
.152c	a9 00		               lda  #$0
.152e	8d 12 09	               sta  editmode
.1531	ad 13 09	               lda  fkeyset
.1534	d0 4d		               bne  menub
.1536	20 22 21	               jsr  push
.1539	a2 74		               ldx  #<blankmsg
.153b	a0 19		               ldy  #>blankmsg
.153d	20 ba 20	               jsr  putscxy
.1540	a2 57		               ldx  #<f5a_msg
.1542	a0 1a		               ldy  #>f5a_msg
.1544	20 ba 20	               jsr  putscxy
.1547	20 61 21	               jsr  pop
.154a	08		               php
.154b	48		               pha
.154c	8a		               txa
.154d	48		               pha
.154e	ad 96 1e	               lda  f5abutton
.1551	48		               pha
.1552	a9 92		               lda  #146
.1554	8d a8 1e	               sta  f5abutton+18
.1557	a9 01		               lda  #flashcol
.1559	8d 96 1e	               sta  f5abutton
.155c	a2 96		               ldx  #<f5abutton
.155e	a0 1e		               ldy  #>f5abutton
.1560	20 ba 20	               jsr  putscxy
.1563	20 d7 11	               jsr  delay
.1566	a9 12		               lda  #18
.1568	8d a8 1e	               sta  f5abutton+18
.156b	68		               pla
.156c	8d 96 1e	               sta  f5abutton
.156f	a2 96		               ldx  #<f5abutton
.1571	a0 1e		               ldy  #>f5abutton
.1573	20 ba 20	               jsr  putscxy
.1576	68		               pla
.1577	aa		               tax
.1578	68		               pla
.1579	28		               plp
.157a	20 f1 18	               jsr  clearchar
.157d	20 f3 0e	               jsr  drawbitmap
.1580	4c cd 15	               jmp  out
.1583			menub
.1583	20 22 21	               jsr  push
.1586	a2 74		               ldx  #<blankmsg
.1588	a0 19		               ldy  #>blankmsg
.158a	20 ba 20	               jsr  putscxy
.158d	a2 20		               ldx  #<f5b_msg
.158f	a0 1b		               ldy  #>f5b_msg
.1591	20 ba 20	               jsr  putscxy
.1594	20 61 21	               jsr  pop
.1597	08		               php
.1598	48		               pha
.1599	8a		               txa
.159a	48		               pha
.159b	ad 6e 1f	               lda  f5bbutton
.159e	48		               pha
.159f	a9 92		               lda  #146
.15a1	8d 80 1f	               sta  f5bbutton+18
.15a4	a9 01		               lda  #flashcol
.15a6	8d 6e 1f	               sta  f5bbutton
.15a9	a2 6e		               ldx  #<f5bbutton
.15ab	a0 1f		               ldy  #>f5bbutton
.15ad	20 ba 20	               jsr  putscxy
.15b0	20 d7 11	               jsr  delay
.15b3	a9 12		               lda  #18
.15b5	8d 80 1f	               sta  f5bbutton+18
.15b8	68		               pla
.15b9	8d 6e 1f	               sta  f5bbutton
.15bc	a2 6e		               ldx  #<f5bbutton
.15be	a0 1f		               ldy  #>f5bbutton
.15c0	20 ba 20	               jsr  putscxy
.15c3	68		               pla
.15c4	aa		               tax
.15c5	68		               pla
.15c6	28		               plp
.15c7	20 2c 18	               jsr  scrollup
.15ca	20 f3 0e	               jsr  drawbitmap
.15cd	68		out            pla
.15ce	20 22 21	               jsr  push
.15d1	a2 74		               ldx  #<blankmsg
.15d3	a0 19		               ldy  #>blankmsg
.15d5	20 ba 20	               jsr  putscxy
.15d8	a2 a0		               ldx  #<prompt_msg
.15da	a0 19		               ldy  #>prompt_msg
.15dc	20 ba 20	               jsr  putscxy
.15df	20 61 21	               jsr  pop
.15e2	60		               rts
.15e3			f6action
.15e3	48		               pha
.15e4	a9 00		               lda  #$0
.15e6	8d 12 09	               sta  editmode
.15e9	ad 13 09	               lda  fkeyset
.15ec	d0 4d		               bne  menub
.15ee	20 22 21	               jsr  push
.15f1	a2 74		               ldx  #<blankmsg
.15f3	a0 19		               ldy  #>blankmsg
.15f5	20 ba 20	               jsr  putscxy
.15f8	a2 73		               ldx  #<f6a_msg
.15fa	a0 1a		               ldy  #>f6a_msg
.15fc	20 ba 20	               jsr  putscxy
.15ff	20 61 21	               jsr  pop
.1602	08		               php
.1603	48		               pha
.1604	8a		               txa
.1605	48		               pha
.1606	ad b1 1e	               lda  f6abutton
.1609	48		               pha
.160a	a9 92		               lda  #146
.160c	8d c3 1e	               sta  f6abutton+18
.160f	a9 01		               lda  #flashcol
.1611	8d b1 1e	               sta  f6abutton
.1614	a2 b1		               ldx  #<f6abutton
.1616	a0 1e		               ldy  #>f6abutton
.1618	20 ba 20	               jsr  putscxy
.161b	20 d7 11	               jsr  delay
.161e	a9 12		               lda  #18
.1620	8d c3 1e	               sta  f6abutton+18
.1623	68		               pla
.1624	8d b1 1e	               sta  f6abutton
.1627	a2 b1		               ldx  #<f6abutton
.1629	a0 1e		               ldy  #>f6abutton
.162b	20 ba 20	               jsr  putscxy
.162e	68		               pla
.162f	aa		               tax
.1630	68		               pla
.1631	28		               plp
.1632	20 e5 18	               jsr  fillchar
.1635	20 f3 0e	               jsr  drawbitmap
.1638	4c 85 16	               jmp  out
.163b			menub
.163b	20 22 21	               jsr  push
.163e	a2 74		               ldx  #<blankmsg
.1640	a0 19		               ldy  #>blankmsg
.1642	20 ba 20	               jsr  putscxy
.1645	a2 3a		               ldx  #<f6b_msg
.1647	a0 1b		               ldy  #>f6b_msg
.1649	20 ba 20	               jsr  putscxy
.164c	20 61 21	               jsr  pop
.164f	08		               php
.1650	48		               pha
.1651	8a		               txa
.1652	48		               pha
.1653	ad 89 1f	               lda  f6bbutton
.1656	48		               pha
.1657	a9 92		               lda  #146
.1659	8d 9b 1f	               sta  f6bbutton+18
.165c	a9 01		               lda  #flashcol
.165e	8d 89 1f	               sta  f6bbutton
.1661	a2 89		               ldx  #<f6bbutton
.1663	a0 1f		               ldy  #>f6bbutton
.1665	20 ba 20	               jsr  putscxy
.1668	20 d7 11	               jsr  delay
.166b	a9 12		               lda  #18
.166d	8d 9b 1f	               sta  f6bbutton+18
.1670	68		               pla
.1671	8d 89 1f	               sta  f6bbutton
.1674	a2 89		               ldx  #<f6bbutton
.1676	a0 1f		               ldy  #>f6bbutton
.1678	20 ba 20	               jsr  putscxy
.167b	68		               pla
.167c	aa		               tax
.167d	68		               pla
.167e	28		               plp
.167f	20 64 18	               jsr  scrolldown
.1682	20 f3 0e	               jsr  drawbitmap
.1685	68		out            pla
.1686	20 22 21	               jsr  push
.1689	a2 74		               ldx  #<blankmsg
.168b	a0 19		               ldy  #>blankmsg
.168d	20 ba 20	               jsr  putscxy
.1690	a2 a0		               ldx  #<prompt_msg
.1692	a0 19		               ldy  #>prompt_msg
.1694	20 ba 20	               jsr  putscxy
.1697	20 61 21	               jsr  pop
.169a	60		               rts
.169b			f7action
.169b	48		               pha
.169c	a9 00		               lda  #$0
.169e	8d 12 09	               sta  editmode
.16a1	ad 13 09	               lda  fkeyset
.16a4	d0 4d		               bne  menub
.16a6	20 22 21	               jsr  push
.16a9	a2 74		               ldx  #<blankmsg
.16ab	a0 19		               ldy  #>blankmsg
.16ad	20 ba 20	               jsr  putscxy
.16b0	a2 90		               ldx  #<f7a_msg
.16b2	a0 1a		               ldy  #>f7a_msg
.16b4	20 ba 20	               jsr  putscxy
.16b7	20 61 21	               jsr  pop
.16ba	08		               php
.16bb	48		               pha
.16bc	8a		               txa
.16bd	48		               pha
.16be	ad cc 1e	               lda  f7abutton
.16c1	48		               pha
.16c2	a9 92		               lda  #146
.16c4	8d de 1e	               sta  f7abutton+18
.16c7	a9 01		               lda  #flashcol
.16c9	8d cc 1e	               sta  f7abutton
.16cc	a2 cc		               ldx  #<f7abutton
.16ce	a0 1e		               ldy  #>f7abutton
.16d0	20 ba 20	               jsr  putscxy
.16d3	20 d7 11	               jsr  delay
.16d6	a9 12		               lda  #18
.16d8	8d de 1e	               sta  f7abutton+18
.16db	68		               pla
.16dc	8d cc 1e	               sta  f7abutton
.16df	a2 cc		               ldx  #<f7abutton
.16e1	a0 1e		               ldy  #>f7abutton
.16e3	20 ba 20	               jsr  putscxy
.16e6	68		               pla
.16e7	aa		               tax
.16e8	68		               pla
.16e9	28		               plp
.16ea	20 c6 0f	               jsr  copycharset
.16ed	20 f3 0e	               jsr  drawbitmap
.16f0	4c 42 17	               jmp  out
.16f3	a9 00		menub          lda  #$0
.16f5	8d 12 09	               sta  editmode
.16f8	20 22 21	               jsr  push
.16fb	a2 74		               ldx  #<blankmsg
.16fd	a0 19		               ldy  #>blankmsg
.16ff	20 ba 20	               jsr  putscxy
.1702	a2 53		               ldx  #<f7b_msg
.1704	a0 1b		               ldy  #>f7b_msg
.1706	20 ba 20	               jsr  putscxy
.1709	20 61 21	               jsr  pop
.170c	08		               php
.170d	48		               pha
.170e	8a		               txa
.170f	48		               pha
.1710	ad a4 1f	               lda  f7bbutton
.1713	48		               pha
.1714	a9 92		               lda  #146
.1716	8d b6 1f	               sta  f7bbutton+18
.1719	a9 01		               lda  #flashcol
.171b	8d a4 1f	               sta  f7bbutton
.171e	a2 a4		               ldx  #<f7bbutton
.1720	a0 1f		               ldy  #>f7bbutton
.1722	20 ba 20	               jsr  putscxy
.1725	20 d7 11	               jsr  delay
.1728	a9 12		               lda  #18
.172a	8d b6 1f	               sta  f7bbutton+18
.172d	68		               pla
.172e	8d a4 1f	               sta  f7bbutton
.1731	a2 a4		               ldx  #<f7bbutton
.1733	a0 1f		               ldy  #>f7bbutton
.1735	20 ba 20	               jsr  putscxy
.1738	68		               pla
.1739	aa		               tax
.173a	68		               pla
.173b	28		               plp
.173c	20 0c 18	               jsr  reverse
.173f	20 f3 0e	               jsr  drawbitmap
.1742	68		out            pla
.1743	20 22 21	               jsr  push
.1746	a2 74		               ldx  #<blankmsg
.1748	a0 19		               ldy  #>blankmsg
.174a	20 ba 20	               jsr  putscxy
.174d	a2 a0		               ldx  #<prompt_msg
.174f	a0 19		               ldy  #>prompt_msg
.1751	20 ba 20	               jsr  putscxy
.1754	20 61 21	               jsr  pop
.1757	60		               rts
.1758			f8action
.1758	48		               pha
.1759	a9 00		               lda  #$0
.175b	8d 12 09	               sta  editmode
.175e	ad 13 09	               lda  fkeyset
.1761	d0 47		               bne  menub
.1763	20 22 21	               jsr  push
.1766	a2 74		               ldx  #<blankmsg
.1768	a0 19		               ldy  #>blankmsg
.176a	20 ba 20	               jsr  putscxy
.176d	a2 8f		               ldx  #<menub_msg
.176f	a0 1b		               ldy  #>menub_msg
.1771	20 ba 20	               jsr  putscxy
.1774	20 61 21	               jsr  pop
.1777	08		               php
.1778	48		               pha
.1779	8a		               txa
.177a	48		               pha
.177b	ad e7 1e	               lda  f8abutton
.177e	48		               pha
.177f	a9 92		               lda  #146
.1781	8d f9 1e	               sta  f8abutton+18
.1784	a9 01		               lda  #flashcol
.1786	8d e7 1e	               sta  f8abutton
.1789	a2 e7		               ldx  #<f8abutton
.178b	a0 1e		               ldy  #>f8abutton
.178d	20 ba 20	               jsr  putscxy
.1790	20 d7 11	               jsr  delay
.1793	a9 12		               lda  #18
.1795	8d f9 1e	               sta  f8abutton+18
.1798	68		               pla
.1799	8d e7 1e	               sta  f8abutton
.179c	a2 e7		               ldx  #<f8abutton
.179e	a0 1e		               ldy  #>f8abutton
.17a0	20 ba 20	               jsr  putscxy
.17a3	68		               pla
.17a4	aa		               tax
.17a5	68		               pla
.17a6	28		               plp
.17a7	4c ee 17	               jmp  swapit
.17aa			menub
.17aa	20 22 21	               jsr  push
.17ad	a2 74		               ldx  #<blankmsg
.17af	a0 19		               ldy  #>blankmsg
.17b1	20 ba 20	               jsr  putscxy
.17b4	a2 6a		               ldx  #<menua_msg
.17b6	a0 1b		               ldy  #>menua_msg
.17b8	20 ba 20	               jsr  putscxy
.17bb	20 61 21	               jsr  pop
.17be	08		               php
.17bf	48		               pha
.17c0	8a		               txa
.17c1	48		               pha
.17c2	ad bf 1f	               lda  f8bbutton
.17c5	48		               pha
.17c6	a9 92		               lda  #146
.17c8	8d d1 1f	               sta  f8bbutton+18
.17cb	a9 01		               lda  #flashcol
.17cd	8d bf 1f	               sta  f8bbutton
.17d0	a2 bf		               ldx  #<f8bbutton
.17d2	a0 1f		               ldy  #>f8bbutton
.17d4	20 ba 20	               jsr  putscxy
.17d7	20 d7 11	               jsr  delay
.17da	a9 12		               lda  #18
.17dc	8d d1 1f	               sta  f8bbutton+18
.17df	68		               pla
.17e0	8d bf 1f	               sta  f8bbutton
.17e3	a2 bf		               ldx  #<f8bbutton
.17e5	a0 1f		               ldy  #>f8bbutton
.17e7	20 ba 20	               jsr  putscxy
.17ea	68		               pla
.17eb	aa		               tax
.17ec	68		               pla
.17ed	28		               plp
.17ee	49 ff		swapit         eor  #$ff
.17f0	8d 13 09	               sta  fkeyset
.17f3	20 5d 10	               jsr  drawfkeys
.17f6	68		               pla
.17f7	20 22 21	               jsr  push
.17fa	a2 74		               ldx  #<blankmsg
.17fc	a0 19		               ldy  #>blankmsg
.17fe	20 ba 20	               jsr  putscxy
.1801	a2 a0		               ldx  #<prompt_msg
.1803	a0 19		               ldy  #>prompt_msg
.1805	20 ba 20	               jsr  putscxy
.1808	20 61 21	               jsr  pop
.180b	60		               rts
.180c			reverse
.180c	20 22 21	               jsr  push
.180f	48		               pha
.1810	ad 18 09	               lda  mapaddr
.1813	85 fd		               sta  $fd
.1815	ad 19 09	               lda  mapaddr+1
.1818	85 fe		               sta  $fe
.181a	68		               pla
.181b	a0 00		               ldy  #$00
.181d	b1 fd		again          lda  (zpage2),y
.181f	49 ff		               eor  #$ff
.1821	91 fd		               sta  (zpage2),y
.1823	c8		               iny
.1824	c0 08		               cpy  #$08
.1826	d0 f5		               bne  again
.1828	20 61 21	               jsr  pop
.182b	60		               rts
.182c			scrollup
.182c	20 22 21	               jsr  push
.182f	48		               pha
.1830	ad 18 09	               lda  mapaddr
.1833	85 fb		               sta  $fb
.1835	ad 19 09	               lda  mapaddr+1
.1838	85 fc		               sta  $fc
.183a	68		               pla
.183b	48		               pha
.183c	ad 18 09	               lda  mapaddr
.183f	85 fd		               sta  $fd
.1841	ad 19 09	               lda  mapaddr+1
.1844	85 fe		               sta  $fe
.1846	68		               pla
.1847	20 41 22	               jsr  inczp2
.184a	a0 00		               ldy  #$00
.184c	b1 fb		               lda  (zpage1),y
.184e	8d 63 18	               sta  tmpbyte
.1851	b1 fd		again          lda  (zpage2),y
.1853	91 fb		               sta  (zpage1),y
.1855	c8		               iny
.1856	c0 07		               cpy  #$07
.1858	d0 f7		               bne  again
.185a	ad 63 18	               lda  tmpbyte
.185d	91 fb		               sta  (zpage1),y
.185f	20 61 21	               jsr  pop
.1862	60		               rts
>1863	00		tmpbyte        .byte     $00
.1864			scrolldown
.1864	20 22 21	               jsr  push
.1867	48		               pha
.1868	ad 18 09	               lda  mapaddr
.186b	85 fb		               sta  $fb
.186d	ad 19 09	               lda  mapaddr+1
.1870	85 fc		               sta  $fc
.1872	68		               pla
.1873	48		               pha
.1874	ad 18 09	               lda  mapaddr
.1877	85 fd		               sta  $fd
.1879	ad 19 09	               lda  mapaddr+1
.187c	85 fe		               sta  $fe
.187e	68		               pla
.187f	20 41 22	               jsr  inczp2
.1882	a0 07		               ldy  #$07                ;xxxxxxxx zpage1
.1884	b1 fb		               lda  (zpage1),y          ;xxxxxxxx zpage2
.1886	8d 9d 18	               sta  tmpbyte             ;xxxxxxxx
.1889	88		again          dey                      ;xxxxxxxx
.188a	b1 fb		               lda  (zpage1),y          ;xxxxxxxx
.188c	91 fd		               sta  (zpage2),y          ;xxxxxxxx
.188e	c0 00		               cpy  #$00                ;xxxxxxxx
.1890	d0 f7		               bne  again               ;xxxxxxxx
.1892	a0 00		               ldy  #$00
.1894	ad 9d 18	               lda  tmpbyte
.1897	91 fb		               sta  (zpage1),y
.1899	20 61 21	               jsr  pop
.189c	60		               rts
>189d	00		tmpbyte        .byte     $00
.189e			scrollright
.189e	20 22 21	               jsr  push
.18a1	48		               pha
.18a2	ad 18 09	               lda  mapaddr
.18a5	85 fb		               sta  $fb
.18a7	ad 19 09	               lda  mapaddr+1
.18aa	85 fc		               sta  $fc
.18ac	68		               pla
.18ad	a0 00		               ldy  #$00
.18af	b1 fb		again          lda  (zpage1),y
.18b1	18		               clc
.18b2	6a		               ror
.18b3	90 03		               bcc  zero
.18b5	18		               clc
.18b6	69 80		one            adc  #$80
.18b8	91 fb		zero           sta  (zpage1),y
.18ba	c8		               iny
.18bb	c0 08		               cpy  #$08
.18bd	d0 f0		               bne  again
.18bf	20 61 21	               jsr  pop
.18c2	60		               rts
.18c3			scrollleft
.18c3	20 22 21	               jsr  push
.18c6	48		               pha
.18c7	ad 18 09	               lda  mapaddr
.18ca	85 fb		               sta  $fb
.18cc	ad 19 09	               lda  mapaddr+1
.18cf	85 fc		               sta  $fc
.18d1	68		               pla
.18d2	a0 00		               ldy  #$00
.18d4	b1 fb		again          lda  (zpage1),y
.18d6	18		               clc
.18d7	2a		               rol
.18d8	69 00		               adc  #$00
.18da	91 fb		               sta  (zpage1),y
.18dc	c8		               iny
.18dd	c0 08		               cpy  #$08
.18df	d0 f3		               bne  again
.18e1	20 61 21	               jsr  pop
.18e4	60		               rts
.18e5			fillchar
.18e5	20 22 21	               jsr  push
.18e8	a9 ff		               lda  #$ff
.18ea	20 fd 18	               jsr  allsame
.18ed	20 61 21	               jsr  pop
.18f0	60		               rts
.18f1			clearchar
.18f1	20 22 21	               jsr  push
.18f4	a9 00		               lda  #$00
.18f6	20 fd 18	               jsr  allsame
.18f9	20 61 21	               jsr  pop
.18fc	60		               rts
.18fd			allsame
.18fd	48		               pha
.18fe	ad 18 09	               lda  mapaddr
.1901	85 fd		               sta  $fd
.1903	ad 19 09	               lda  mapaddr+1
.1906	85 fe		               sta  $fe
.1908	68		               pla
.1909	a0 00		               ldy  #$00
.190b	91 fd		again          sta  (zpage2),y
.190d	c8		               iny
.190e	c0 08		               cpy  #$08
.1910	d0 f9		               bne  again
.1912	60		               rts
.1913			fliphorz
.1913	20 22 21	               jsr  push
.1916	48		               pha
.1917	ad 18 09	               lda  mapaddr
.191a	85 fd		               sta  $fd
.191c	ad 19 09	               lda  mapaddr+1
.191f	85 fe		               sta  $fe
.1921	68		               pla
.1922	a0 00		               ldy  #$00
.1924	b1 fd		nextbyte       lda  (zpage2),y
.1926	a2 00		               ldx  #$00
.1928	2a		rolagain       rol
.1929	6e 3f 19	               ror  tmpbyte
.192c	e8		               inx
.192d	e0 08		               cpx  #$08
.192f	30 f7		               bmi  rolagain
.1931	ad 3f 19	               lda  tmpbyte
.1934	91 fd		               sta  (zpage2),y
.1936	c8		               iny
.1937	c0 08		               cpy  #$08
.1939	30 e9		               bmi  nextbyte
.193b	20 61 21	               jsr  pop
.193e	60		               rts
>193f	00		tmpbyte        .byte     $00
.1940			flipvert
.1940	20 22 21	               jsr  push
.1943	48		               pha
.1944	ad 18 09	               lda  mapaddr
.1947	85 fd		               sta  $fd
.1949	ad 19 09	               lda  mapaddr+1
.194c	85 fe		               sta  $fe
.194e	68		               pla
.194f	a0 00		               ldy  #$00
.1951	b1 fd		tostack        lda  (zpage2),y
.1953	48		               pha
.1954	c8		               iny
.1955	c0 08		               cpy  #$08
.1957	d0 f8		               bne  tostack
.1959	a0 00		               ldy  #$00
.195b	68		fromstack      pla
.195c	91 fd		               sta  (zpage2),y
.195e	c8		               iny
.195f	c0 08		               cpy  #$08
.1961	d0 f8		               bne  fromstack
.1963	20 61 21	               jsr  pop
.1966	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: messages_fr.asm

>1967	0a 01 05	editor_msg     .byte vrose,1,5
>196a	5b 45 44 49	               .null     "[editeur]"
>196e	54 45 55 52 5d 00
>1974	03 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>1978	20 20 20 20	               .null     "                                       "
>197c	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>198c	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>199c	20 20 20 00
>19a0	03 00 05 92	prompt_msg     .byte     mesgcol,0,5,146
>19a4	20 55 54 49	               .null     " utilisez les clefs de fonction :"
>19a8	4c 49 53 45 5a 20 4c 45 53 20 43 4c 45 46 53 20
>19b8	44 45 20 46 4f 4e 43 54 49 4f 4e 20 3a 00
.19c6			f1a_msg
>19c6	03 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>19ca	20 4d 4f 44	               .null     " mode edit: chr$(   )",146
>19ce	45 20 45 44 49 54 3a 20 43 48 52 24 28 20 20 20
>19de	29 92 00
.19e1			f2a_msg
>19e1	03 00 05	copy_msg       .byte     mesgcol,0,5
>19e4	20 45 4e 54	               .null     " entez le character a copier:"
>19e8	45 5a 20 4c 45 20 43 48 41 52 41 43 54 45 52 20
>19f8	41 20 43 4f 50 49 45 52 3a 00
.1a02			f3a_msg
>1a02	03 00 05 92	save_msg       .byte     mesgcol,0,5,146
>1a06	20 53 41 55	               .null     " sauvegarder sur quel lecteur? (1/8/9): "
>1a0a	56 45 47 41 52 44 45 52 20 53 55 52 20 51 55 45
>1a1a	4c 20 4c 45 43 54 45 55 52 3f 20 28 31 2f 38 2f
>1a2a	39 29 3a 20 00
.1a2f			f4a_msg
>1a2f	03 00 05 92	load_msg       .byte     mesgcol,0,5,146
>1a33	20 43 48 41	               .null     " charger de quel lecteur? (1,8,9): "
>1a37	52 47 45 52 20 44 45 20 51 55 45 4c 20 4c 45 43
>1a47	54 45 55 52 3f 20 28 31 2c 38 2c 39 29 3a 20 00
.1a57			f5a_msg
>1a57	03 00 05	clear_msg      .byte     mesgcol,0,5
>1a5a	20 45 46 46	               .null     " effacer char: chr$(   )"
>1a5e	41 43 45 52 20 43 48 41 52 3a 20 43 48 52 24 28
>1a6e	20 20 20 29 00
.1a73			f6a_msg
>1a73	03 00 05	fill_msg       .byte     mesgcol,0,5
>1a76	20 52 45 4d	               .null     " remplir char:  chr$(   )"
>1a7a	50 4c 49 52 20 43 48 41 52 3a 20 20 43 48 52 24
>1a8a	28 20 20 20 29 00
.1a90			f7a_msg
>1a90	03 00 05	work_msg       .byte     mesgcol,0,5
>1a93	20 52 45 43	               .null     " recuperer les caracteres."
>1a97	55 50 45 52 45 52 20 4c 45 53 20 43 41 52 41 43
>1aa7	54 45 52 45 53 2e 00
.1aae			f1b_msg
>1aae	03 00 05	invr_msg       .byte     mesgcol,0,5
>1ab1	20 42 41 53	               .null     " basculer verticalement:"
>1ab5	43 55 4c 45 52 20 56 45 52 54 49 43 41 4c 45 4d
>1ac5	45 4e 54 3a 00
.1aca			f2b_msg
>1aca	03 00 05	flip_msg       .byte     mesgcol,0,5
>1acd	20 42 41 53	               .null     " basculer horizontalement:"
>1ad1	43 55 4c 45 52 20 48 4f 52 49 5a 4f 4e 54 41 4c
>1ae1	45 4d 45 4e 54 3a 00
.1ae8			f3b_msg
>1ae8	03 00 05	scrollr_msg    .byte     mesgcol,0,5
>1aeb	20 44 45 46	               .null     " defiler vers la droite:"
>1aef	49 4c 45 52 20 56 45 52 53 20 4c 41 20 44 52 4f
>1aff	49 54 45 3a 00
.1b04			f4b_msg
>1b04	03 00 05	scrolll_msg    .byte     mesgcol,0,5
>1b07	20 44 45 46	               .null     " defiler vers la gauche:"
>1b0b	49 4c 45 52 20 56 45 52 53 20 4c 41 20 47 41 55
>1b1b	43 48 45 3a 00
.1b20			f5b_msg
>1b20	03 00 05	scrollu_msg    .byte     mesgcol,0,5
>1b23	20 44 45 46	               .null     " defiler vers le haut:"
>1b27	49 4c 45 52 20 56 45 52 53 20 4c 45 20 48 41 55
>1b37	54 3a 00
.1b3a			f6b_msg
>1b3a	03 00 05	scrolld_msg    .byte     mesgcol,0,5
>1b3d	20 44 45 46	               .null     " defiler vers le bas:"
>1b41	49 4c 45 52 20 56 45 52 53 20 4c 45 20 42 41 53
>1b51	3a 00
.1b53			f7b_msg
>1b53	03 00 05	rvrs_msg       .byte     mesgcol,0,5
>1b56	20 52 45 56	               .null     " reverse character:"
>1b5a	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
>1b6a	03 00 05	menua_msg      .byte     mesgcol,0,5
>1b6d	20 56 4f 55	               .null     " vous etes dirige vers le menu 1."
>1b71	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1b81	52 53 20 4c 45 20 4d 45 4e 55 20 31 2e 00
>1b8f	03 00 05	menub_msg      .byte     mesgcol,0,5
>1b92	20 56 4f 55	               .null     " vous etes dirige vers le menu 2."
>1b96	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1ba6	52 53 20 4c 45 20 4d 45 4e 55 20 32 2e 00
>1bb4	07 00 05	copychar_msg   .byte     vjaune,0,5
>1bb7	20 45 4e 54	               .null     " entrez le caractera a copier (?).",157,157,157
>1bbb	52 45 5a 20 4c 45 20 43 41 52 41 43 54 45 52 41
>1bcb	20 41 20 43 4f 50 49 45 52 20 28 3f 29 2e 9d 9d
>1bdb	9d 00
>1bdd	07 00 05	fname_msg      .byte     vjaune,0,5
>1be0	20 4e 4f 4d	               .null     " nom du fichier (6 lettres): ",$a4,$a4,$a4,$a4,$a4,$a4,".chr",157,157,157,157,157,157,157,157,157,157
>1be4	20 44 55 20 46 49 43 48 49 45 52 20 28 36 20 4c
>1bf4	45 54 54 52 45 53 29 3a 20 a4 a4 a4 a4 a4 a4 2e
>1c04	43 48 52 9d 9d 9d 9d 9d 9d 9d 9d 9d 9d 00
>1c12	0e 15 18 12	quit_msg       .byte     vblue1,21,24,18
>1c16	43 54 52 4c	               .text     "ctrl-x",146
>1c1a	2d 58 92
>1c1d	2d 51 55 49	               .null     "-quitter."
>1c21	54 54 45 52 2e 00
.1c27			menu_msg
>1c27	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>1c2b	43 54 52 4c	               .text     "ctrl-x",146
>1c2f	2d 58 92
>1c32	20 41 55 20	               .null     " au menu."
>1c36	4d 45 4e 55 2e 00
>1c3c	07 04 06 12	whoami0        .byte     whoamicol,4,6,18
>1c40	20 20 20 20	               .null     "                               ",146
>1c44	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1c54	20 20 20 20 20 20 20 20 20 20 20 92 00
>1c61	07 04 07 12	whoami1        .byte     whoamicol,4,7,18
>1c65	20 20 20 20	               .null     "       ",146," c h a r e d i t ",18,"       ",146
>1c69	20 20 20 92 20 43 20 48 20 41 20 52 20 45 20 44
>1c79	20 49 20 54 20 12 20 20 20 20 20 20 20 92 00
>1c88	07 04 08 12	whoami2        .byte     whoamicol,4,8,18
>1c8c	20 20 20 20	               .null     "                               ",146
>1c90	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1ca0	20 20 20 20 20 20 20 20 20 20 20 92 00
>1cad	07 04 09 12	whoami3        .byte     whoamicol,4,9,18
>1cb1	20 20 20 20	               .null     "    inspire de john heilborn   ",146
>1cb5	49 4e 53 50 49 52 45 20 44 45 20 4a 4f 48 4e 20
>1cc5	48 45 49 4c 42 4f 52 4e 20 20 20 92 00
>1cd2	07 04 0a 12	whoami4        .byte     whoamicol,4,10,18
>1cd6	20 20 20 20	               .null     "      isbn: 0-942386-29-9      ",146
>1cda	20 20 49 53 42 4e 3a 20 30 2d 39 34 32 33 38 36
>1cea	2d 32 39 2d 39 20 20 20 20 20 20 92 00
>1cf7	07 04 0b 12	whoami5        .byte     whoamicol,4,11,18
>1cfb	20 20 20 20	               .null     "                               ",146
>1cff	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1d0f	20 20 20 20 20 20 20 20 20 20 20 92 00
>1d1c	07 04 0c 12	whoami6        .byte     whoamicol,4,12,18
>1d20	20 20 20 20	               .null     "     code en assembleur par    ",146
>1d24	20 43 4f 44 45 20 45 4e 20 41 53 53 45 4d 42 4c
>1d34	45 55 52 20 50 41 52 20 20 20 20 92 00
>1d41	07 04 0d 12	whoami7        .byte     whoamicol,4,13,18
>1d45	20 44 41 4e	               .null     " daniel lafrance quebec/canada ",146
>1d49	49 45 4c 20 4c 41 46 52 41 4e 43 45 20 51 55 45
>1d59	42 45 43 2f 43 41 4e 41 44 41 20 92 00
>1d66	07 04 0e 12	whoami8        .byte     whoamicol,4,14,18
>1d6a	20 20 20 20	               .null     "    version:",version,"    ",146
>1d6e	56 45 52 53 49 4f 4e 3a 32 30 32 33 31 31 31 36
>1d7e	2d 31 30 30 34 30 30 20 20 20 20 92 00
>1d8b	07 04 0f 12	whoami9        .byte     whoamicol,4,15,18
>1d8f	20 20 20 20	               .null     "                               ",146
>1d93	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1da3	20 20 20 20 20 20 20 20 20 20 20 92 00
>1db0	03 06 10 14	bye_msg        .byte     vcyan,6,16,20
>1db4	20 20 20 20	               .null     "      bonjour et merci      ",146
>1db8	20 20 42 4f 4e 4a 4f 55 52 20 45 54 20 4d 45 52
>1dc8	43 49 20 20 20 20 20 20 92 00
>1dd2	0d 05 18 12	any_msg        .byte     vvert1,5,24,18
>1dd6	20 41 50 50	               .null     " appuyez une cle pour basic ",146
>1dda	55 59 45 5a 20 55 4e 45 20 43 4c 45 20 50 4f 55
>1dea	52 20 42 41 53 49 43 20 92 00
>1df4	03 12 07	titremenu1     .byte     menu1col1,fkeyleft,f1top-2       ;133
>1df7	12 20 4a 45	               .null     18," jeu de fonctions #1 ",146
>1dfb	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>1e0b	31 20 92 00
>1e0f	0f 12 07	titremenu2     .byte     menu2col1,fkeyleft,f1top-2       ;133
>1e12	12 20 4a 45	               .null     18," jeu de fonctions #2 ",146
>1e16	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>1e26	32 20 92 00
>1e2a	03 12 09	f1abutton      .byte     menu1col1,fkeyleft,f1top       ;133
>1e2d	45 44 49 54	               .text     "editer carac..."
>1e31	45 52 20 43 41 52 41 43 2e 2e 2e
>1e3c	12		               .byte     18             ; position 15
>1e3d	a9 20 46 31	               .null     $a9," f1 ",223,146
>1e41	20 df 92 00
>1e45	0e 12 0a	f2abutton      .byte     menu1col2,fkeyleft,f1top+1     ;138
>1e48	43 4f 50 49	               .text     "copier un carac"
>1e4c	45 52 20 55 4e 20 43 41 52 41 43
>1e57	12		               .byte     18   ; position 15
>1e58	20 20 46 32	               .null     "  f2  ",146
>1e5c	20 20 92 00
>1e60	03 12 0c	f3abutton      .byte     menu1col1,fkeyleft,f1top+3     ;137
>1e63	53 41 56 45	               .text     "savegarder sur."
>1e67	47 41 52 44 45 52 20 53 55 52 2e
>1e72	12		               .byte     18            ; position 15
>1e73	a9 20 46 33	               .null     $a9," f3 ",223,146
>1e77	20 df 92 00
>1e7b	0e 12 0d	f4abutton      .byte     menu1col2,fkeyleft,f1top+4     ;134
>1e7e	43 48 41 52	               .text     "charger de....."
>1e82	47 45 52 20 44 45 2e 2e 2e 2e 2e
>1e8d	12		               .byte     18             ; position 15
>1e8e	20 20 46 34	               .null     "  f4  ",146
>1e92	20 20 92 00
>1e96	03 12 0f	f5abutton      .byte     menu1col1,fkeyleft,f1top+6     ;135
>1e99	4d 45 54 54	               .text     "mettre tout a 0"
>1e9d	52 45 20 54 4f 55 54 20 41 20 30
>1ea8	12		               .byte     18             ; position 15
>1ea9	a9 20 46 35	               .null     $a9," f5 ",223,146
>1ead	20 df 92 00
>1eb1	0e 12 10	f6abutton      .byte     menu1col2,fkeyleft,f1top+7    ;139
>1eb4	4d 45 54 54	               .text     "mettre tout a 1"
>1eb8	52 45 20 54 4f 55 54 20 41 20 31
>1ec3	12		               .byte     18             ; position 15
>1ec4	20 20 46 36	               .null     "  f6  ",146
>1ec8	20 20 92 00
>1ecc	03 12 12	f7abutton      .byte     menu1col1,fkeyleft,f1top+9    ;136
>1ecf	52 45 43 55	               .text     "recuperer rom.."
>1ed3	50 45 52 45 52 20 52 4f 4d 2e 2e
>1ede	12		               .byte     18             ; position 15
>1edf	a9 20 46 37	               .null     $a9," f7 ",223,146
>1ee3	20 df 92 00
>1ee7	0e 12 13	f8abutton      .byte     menu1col2,fkeyleft,f1top+10
>1eea	41 4c 4c 45	               .text     "aller au menu2."
>1eee	52 20 41 55 20 4d 45 4e 55 32 2e
>1ef9	12		               .byte     18             ; position 15
>1efa	20 20 46 38	               .null     "  f8  ", 146
>1efe	20 20 92 00
>1f02	0f 12 09	f1bbutton      .byte     menu2col1,fkeyleft,f1top
>1f05	42 41 53 43	               .text     "basculer vert.."
>1f09	55 4c 45 52 20 56 45 52 54 2e 2e
>1f14	12		               .byte     18             ; position 15
>1f15	a9 20 46 31	               .null     $a9," f1 ",223,146
>1f19	20 df 92 00
>1f1d	0c 12 0a	f2bbutton      .byte     menu2col2,fkeyleft,f1top+1
>1f20	42 41 53 43	               .text     "basculer horz.."
>1f24	55 4c 45 52 20 48 4f 52 5a 2e 2e
>1f2f	12		               .byte     18             ; position 15
>1f30	20 20 46 32	               .null     "  f2  ",146
>1f34	20 20 92 00
>1f38	0f 12 0c	f3bbutton      .byte     menu2col1,fkeyleft,f1top+3
>1f3b	44 45 46 49	               .text     "defiler droite."
>1f3f	4c 45 52 20 44 52 4f 49 54 45 2e
>1f4a	12		               .byte     18             ; position 15
>1f4b	a9 20 46 33	               .null     $a9," f3 ",223,146
>1f4f	20 df 92 00
>1f53	0c 12 0d	f4bbutton      .byte     menu2col2,fkeyleft,f1top+4
>1f56	44 45 46 49	               .text     "defiler gauche."
>1f5a	4c 45 52 20 47 41 55 43 48 45 2e
>1f65	12		               .byte     18             ; position 15
>1f66	20 20 46 34	               .null     "  f4  ",146
>1f6a	20 20 92 00
>1f6e	0f 12 0f	f5bbutton      .byte     menu2col1,fkeyleft,f1top+6
>1f71	44 45 46 49	               .text     "defiler haut..."
>1f75	4c 45 52 20 48 41 55 54 2e 2e 2e
>1f80	12		               .byte     18             ; position 15
>1f81	a9 20 46 35	               .null     $a9," f5 ",223,146
>1f85	20 df 92 00
>1f89	0c 12 10	f6bbutton      .byte     menu2col2,fkeyleft,f1top+7
>1f8c	44 45 46 49	               .text     "defiler bas...."
>1f90	4c 45 52 20 42 41 53 2e 2e 2e 2e
>1f9b	12		               .byte     18             ; position 15
>1f9c	20 20 46 36	               .null     "  f6  ",146
>1fa0	20 20 92 00
>1fa4	0f 12 12	f7bbutton      .byte     menu2col1,fkeyleft,f1top+9
>1fa7	49 4e 56 45	               .text     "inverser bits.."
>1fab	52 53 45 52 20 42 49 54 53 2e 2e
>1fb6	12		               .byte     18             ; position 15
>1fb7	a9 20 46 37	               .null     $a9," f7 ",223,146
>1fbb	20 df 92 00
>1fbf	0c 12 13	f8bbutton      .byte     menu2col2,fkeyleft,f1top+10
>1fc2	41 4c 4c 45	               .text     "aller au menu1."
>1fc6	52 20 41 55 20 4d 45 4e 55 31 2e
>1fd1	12		               .byte     18             ; position 15
>1fd2	20 20 46 38	               .null     "  f8  ", 146
>1fd6	20 20 92 00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.1fda			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.1fda			screendis
.1fda	08		               php
.1fdb	48		               pha
.1fdc	ad 11 d0	               lda  $d011
.1fdf	29 ef		               and  #%11101111
.1fe1	8d 11 d0	               sta  $d011
.1fe4	68		               pla
.1fe5	28		               plp
.1fe6	60		               rts
.1fe7			screenena
.1fe7	08		               php
.1fe8	48		               pha
.1fe9	ad 11 d0	               lda  $d011
.1fec	09 10		               ora  #%00010000
.1fee	8d 11 d0	               sta  $d011
.1ff1	68		               pla
.1ff2	28		               plp
.1ff3	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.1ff4			scrmaninit
.1ff4	20 22 21	               jsr  push
.1ff7	a9 06		               lda  #vbleu
.1ff9	8d 21 d0	               sta  vicbackcol
.1ffc	a9 05		               lda  #vvert
.1ffe	8d 20 d0	               sta  vicbordcol
.2001	a9 01		               lda  #vblanc
.2003	8d 86 02	               sta  bascol
.2006	ad 00 04	               lda  scrnram
.2009	8d 00 04	               sta  scrnram
.200c	20 14 20	               jsr  cls
.200f	20 61 21	               jsr  pop
.2012	60		               rts
>2013	8e		characterset   .byte b_uppercase
.2014			cls
.2014	08		               php
.2015	48		               pha
.2016	a9 93		               lda  #$93
.2018	20 2b 20	               jsr  putch
.201b	68		               pla
.201c	28		               plp
.201d	60		               rts
.201e			putnch
.201e	08		               php
.201f	e0 00		               cpx  #$00
.2021	f0 06		               beq  out
.2023	20 d2 ff	again          jsr  $ffd2
.2026	ca		               dex
.2027	d0 fa		               bne  again
.2029	28		out            plp
.202a	60		               rts
.202b			putch
.202b	08		               php
.202c	20 d2 ff	               jsr  $ffd2
.202f	28		               plp
.2030	60		               rts
.2031			puts
.2031	20 22 21	               jsr  push
.2034	86 fb		               stx  zpage1
.2036	84 fc		               sty  zpage1+1
.2038	a0 00		               ldy  #0
.203a	b1 fb		next           lda  (zpage1),y
.203c	f0 09		               beq  exit
.203e	20 2b 20	               jsr  putch
.2041	20 29 22	               jsr  inczp1
.2044	4c 3a 20	               jmp  next
.2047	20 61 21	exit           jsr  pop
.204a	60		               rts
.204b			gotoxy
.204b	08		               php
.204c	18		               clc
.204d	8a		               txa
.204e	48		               pha
.204f	98		               tya
.2050	aa		               tax
.2051	68		               pla
.2052	a8		               tay
.2053	20 f0 ff	               jsr  kplot
.2056	28		               plp
.2057	60		               rts
.2058			cursor
=$0286			bascol    =    $0286
.2058	08		               php
.2059	48		               pha
.205a	90 12		               bcc  restore
.205c	20 f0 ff	               jsr  kplot
.205f	8c 80 20	               sty  cx
.2062	8e 81 20	               stx  cy
.2065	ad 86 02	               lda  bascol
.2068	8d 82 20	               sta  bcol
.206b	4c 7d 20	               jmp  out
.206e	ae 81 20	restore        ldx  cy
.2071	ac 80 20	               ldy  cx
.2074	20 f0 ff	               jsr  kplot
.2077	ad 82 20	               lda  bcol
.207a	8d 86 02	               sta  bascol
.207d	68		out            pla
.207e	28		               plp
.207f	60		               rts
>2080	00		cx   .byte     $00
>2081	00		cy   .byte     $00
>2082	00		bcol .byte     $00
.2083			cursave
.2083	08		               php
.2084	38		               sec
.2085	20 58 20	               jsr  cursor
.2088	28		               plp
.2089	60		               rts
.208a			curput
.208a	08		               php
.208b	18		               clc
.208c	20 58 20	               jsr  cursor
.208f	28		               plp
.2090	60		               rts
.2091			putsxy
.2091	20 22 21	               jsr  push
.2094	86 fb		               stx  zpage1
.2096	84 fc		               sty  zpage1+1
.2098	a0 00		               ldy  #$00
.209a	b1 fb		               lda  (zpage1),y
.209c	aa		               tax
.209d	20 29 22	               jsr  inczp1
.20a0	b1 fb		               lda  (zpage1),y
.20a2	a8		               tay
.20a3	20 4b 20	               jsr  gotoxy
.20a6	20 29 22	               jsr  inczp1
.20a9	a6 fb		               ldx  zpage1
.20ab	a4 fc		               ldy  zpage1+1
.20ad	20 31 20	               jsr  puts
.20b0	20 61 21	               jsr  pop
.20b3	60		               rts
>20b4	00 00		straddr   .word     $00
>20b6	00		px        .byte     $00
>20b7	00		py        .byte     $00
>20b8	00 00		zp1       .word     $00
.20ba			putscxy
.20ba	20 22 21	               jsr  push
.20bd	84 fc		               sty  zpage1+1
.20bf	86 fb		               stx  zpage1
.20c1	ad 86 02	               lda  bascol
.20c4	8d e4 20	               sta  bc
.20c7	a0 00		               ldy #$00
.20c9	b1 fb		               lda  (zpage1),y
.20cb	8d 86 02	               sta  bascol
.20ce	20 29 22	               jsr  inczp1
.20d1	a6 fb		               ldx  zpage1
.20d3	a4 fc		               ldy  zpage1+1
.20d5	20 91 20	               jsr  putsxy
.20d8	ad e4 20	               lda  bc
.20db	8d 86 02	               sta  bascol
.20de	20 61 21	               jsr  pop
.20e1	60		               rts
>20e2	00 00		straddr  .word      $00
>20e4	00		bc       .byte      $00
>20e5	00 00		zp1      .word      $00
.20e7			putrahex
.20e7	08		               php
.20e8	48		               pha
.20e9	20 3f 23	               jsr  a2hex
.20ec	a9 de		               lda  #<a2hexstr
.20ee	a0 22		               ldy  #>a2hexstr
.20f0	20 31 20	               jsr  puts
.20f3	68		               pla
.20f4	28		               plp
.20f5	60		               rts
.20f6			kputrahexxy
.20f6			bputrahexxy
.20f6			putrahexxy
.20f6	08		               php
.20f7	20 3f 23	               jsr  a2hex
.20fa	a9 db		               lda  #<a2hexpos
.20fc	a0 22		               ldy  #>a2hexpos
.20fe	20 91 20	               jsr  putsxy
.2101	68		               pla
.2102	28		               plp
.2103	60		               rts
.2104			putrahexcxy
.2104	08		               php
.2105	20 3f 23	               jsr  a2hex
.2108	a9 db		               lda  #<a2hexpos
.210a	a0 22		               ldy  #>a2hexpos
.210c	20 ba 20	               jsr  putscxy
.210f	68		               pla
.2110	28		               plp
.2111	60		               rts
.2112			setinverse
.2112	48		               pha
.2113	a9 12		               lda  #$12
.2115	20 d2 ff	               jsr  $ffd2
.2118	68		               pla
.2119	60		               rts
.211a			clrinverse
.211a	48		               pha
.211b	a9 92		               lda  #$92
.211d	20 d2 ff	               jsr  $ffd2
.2120	68		               pla
.2121	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.2122			push
.2122	08		          php            ; stack : flg, pcl, pch
.2123	78		          sei
.2124	8d 5e 21	          sta  ra        ; save a
.2127	68		          pla            ; stack : pcl, pch
.2128	8d 5d 21	          sta  rp        ; save rp
.212b	68		          pla            ; stack : pch
.212c	8d 5f 21	          sta  pc        ; save pcl
.212f	68		          pla            ; stack : -
.2130	8d 60 21	          sta  pc+1      ; save pch
.2133	a5 fb		          lda  zpage1    ; get zpage1 low byte
.2135	48		          pha            ; stack : zp1l
.2136	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.2138	48		          pha            ; stack : zp1h, zp1l
.2139	a5 fd		          lda  zpage2    ; get zpage2 low byte
.213b	48		          pha            ; stack : zp2l, zp1h, zp1l
.213c	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.213e	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.213f	ad 5d 21	          lda  rp        ; get rp
.2142	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.2143	ad 5e 21	          lda  ra        ; get a
.2146	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.2147	8a		          txa            ; get x
.2148	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.2149	98		          tya            ; get y
.214a	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.214b	ad 60 21	          lda  pc+1      ; get pch
.214e	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.214f	ad 5f 21	          lda  pc        ; get pcl
.2152	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2153	ad 5d 21	          lda  rp        ; get rp
.2156	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2157	ad 5e 21	          lda  ra        ; get a
.215a	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.215b	58		          cli
.215c	60		          rts
>215d	00		rp        .byte     0
>215e	00		ra        .byte     0
>215f	00 00		pc        .word     0
.2161			pull
.2161			pop
.2161	78		          sei
.2162	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2163	8d 96 21	          sta  pc        ; save pcl
.2166	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2167	8d 97 21	          sta  pc+1      ; save pch
.216a	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.216b	a8		          tay            ; set y
.216c	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.216d	aa		          tax            ; set x
.216e	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.216f	8d 95 21	          sta  ra        ; save a
.2172	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.2173	8d 94 21	          sta  rp        ; save rp
.2176	68		          pla            ; stack : zp2l, zp1h, zp1l
.2177	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.2179	68		          pla            ; stack : zp1h, zp1l
.217a	85 fd		          sta  zpage2    ; get zpage2 High byte
.217c	68		          pla            ; stack : zp1l
.217d	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.217f	68		          pla            ; stack :
.2180	85 fb		          sta  zpage1    ; get zpage1 High byte
.2182	ad 97 21	          lda  pc+1      ; get pch
.2185	48		          pha            ; stack : pch
.2186	ad 96 21	          lda  pc
.2189	48		          pha            ; stack : pcl, pch
.218a	ad 94 21	          lda  rp        ; get rp
.218d	48		          pha            ; stack : rp, pcl, pch
.218e	ad 95 21	          lda  ra        ; set ra
.2191	58		          cli
.2192	28		          plp            ; stack : pcl, pch
.2193	60		          rts
>2194	00		rp        .byte     0
>2195	00		ra        .byte     0
>2196	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.2198			blkfill
.2198	20 22 21	bf0            jsr  push
.219b	20 59 22	               jsr  savezp1
.219e	84 fc		               sty  zpage1+1
.21a0	a0 00		               ldy  #$00
.21a2	84 fb		               sty  zpage1
.21a4	91 fb		bf1            sta  (zpage1),y
.21a6	c8		               iny
.21a7	d0 fb		               bne  bf1
.21a9	20 68 22	               jsr  restzp1
.21ac	20 61 21	               jsr  pop
.21af	60		               rts
.21b0			memfill
.21b0	20 22 21	               jsr  push
.21b3	20 98 21	mf1            jsr  blkfill
.21b6	c8		               iny
.21b7	ca		               dex
.21b8	d0 f9		               bne  mf1
.21ba	20 61 21	               jsr  pop
.21bd	60		               rts
.21be			memmove
.21be	20 22 21	               jsr  push
.21c1	ba		               tsx            ; On se crée un pointeur ...
.21c2	8a		               txa
.21c3	18		               clc
.21c4	69 0b		               adc  #11
.21c6	a8		               tay
.21c7	a2 06		               ldx  #$06
.21c9	b9 00 01	nextbyte       lda  $0100,y
.21cc	99 18 22	               sta  words,y
.21cf	c8		               iny
.21d0	ca		               dex
.21d1	d0 f6		               bne  nextbyte
.21d3	ad 18 22	               lda  s
.21d6	8d ef 21	               sta  source+1
.21d9	ad 19 22	               lda  s+1
.21dc	8d f0 21	               sta  source+2
.21df	ad 1a 22	               lda  d
.21e2	8d ec 21	               sta  destin+1
.21e5	ad 1b 22	               lda  d+1
.21e8	8d ed 21	               sta  destin+2
.21eb	ad ff ff	destin         lda  $ffff
.21ee	8d ff ff	source         sta  $ffff
.21f1	ee ec 21	               inc  destin+1
.21f4	d0 03		               bne  src
.21f6	ee ed 21	               inc  destin+2
.21f9	ee ef 21	src            inc  source+1
.21fc	d0 03		               bne  cnt
.21fe	ee f0 21	               inc  source+2
.2201	ad 1c 22	cnt            lda  compte
.2204	d0 08		               bne  decit
.2206	ad 1d 22	               lda  compte+1
.2209	f0 09		               beq  fini
.220b	ce 1d 22	               dec  compte+1
.220e	ce 1c 22	decit          dec  compte
.2211	4c eb 21	               jmp  destin
.2214	20 61 21	fini           jsr  pop
.2217	60		               rts
.2218			words
>2218	00 00		s         .word     $0000
>221a	00 00		d         .word     $0000
>221c	00 00		compte    .word     $0000
.221e			decword
.221e	20 22 21	               jsr  push
.2221	86 fd		               stx  zpage2
.2223	84 fe		               sty  zpage2+1
.2225	20 61 21	               jsr  pop
.2228	60		               rts
.2229			inczp1
.2229	08		               php
.222a	48		               pha
.222b	e6 fb		               inc  zpage1
.222d	a5 fb		               lda  zpage1
.222f	d0 02		               bne  nopage
.2231	e6 fc		               inc  zpage1+1
.2233	68		nopage         pla
.2234	28		               plp
.2235	60		               rts
.2236			deczp1
.2236	08		                php
.2237	48		                pha
.2238	c6 fb		                dec  zpage1
.223a	d0 02		                bne  nopage
.223c	c6 fc		                dec  zpage1+1
.223e	68		nopage          pla
.223f	28		                plp
.2240	60		                rts
.2241			inczp2
.2241	08		               php
.2242	48		               pha
.2243	e6 fd		               inc  zpage2
.2245	a5 fd		               lda  zpage2
.2247	d0 02		               bne  nopage
.2249	e6 fe		               inc  zpage2+1
.224b	68		nopage         pla
.224c	28		               plp
.224d	60		               rts
.224e			deczp2
.224e	08		               php
.224f	48		               pha
.2250	a5 fd		               lda  zpage2
.2252	d0 02		               bne  nopage
.2254	c6 fe		               dec  zpage2+1
.2256	68		nopage         pla
.2257	28		               plp
.2258	60		               rts
.2259			savezp1
.2259	08		               php
.225a	48		               pha
.225b	a5 fb		               lda  zpage1
.225d	8d d5 22	               sta  zp1
.2260	a5 fc		               lda  zpage1+1
.2262	8d d6 22	               sta  zp1+1
.2265	68		               pla
.2266	28		               plp
.2267	60		               rts
.2268			restzp1
.2268	08		               php
.2269	48		               pha
.226a	ad d5 22	               lda zp1
.226d	85 fb		               sta zpage1
.226f	ad d6 22	               lda zp1+1
.2272	85 fc		               sta zpage1+1
.2274	68		               pla
.2275	28		               plp
.2276	60		               rts
.2277			savezp2
.2277	08		         php
.2278	48		         pha
.2279	a5 fd		         lda zpage2
.227b	8d d7 22	         sta zp2
.227e	a5 fe		         lda zpage2+1
.2280	8d d8 22	         sta zp2+1
.2283	68		         pla
.2284	28		         plp
.2285	60		         rts
.2286			restzp2
.2286	08		                php
.2287	48		                pha
.2288	ad d7 22	                lda  zp2
.228b	85 fd		                sta  zpage2
.228d	ad d8 22	                lda  zp2+1
.2290	85 fe		                sta  zpage2+1
.2292	68		                pla
.2293	28		                plp
.2294	60		                rts
.2295			xy2addr
.2295	08		                php
.2296	48		                pha
.2297	8a		                txa
.2298	48		                pha
.2299	98		                tya
.229a	48		                pha
.229b	ad d0 22	                lda     addr1+1
.229e	8d d2 22	                sta     addr2+1
.22a1	ad cf 22	                lda     addr1
.22a4	8d d1 22	                sta     addr2
.22a7	c0 00		                cpy     #$00
.22a9	f0 0f		                beq     addx
.22ab	18		moreline        clc
.22ac	6d ce 22	                adc     ymult
.22af	90 03		                bcc     norepy
.22b1	ee d2 22	                inc     addr2+1
.22b4	8d d1 22	norepy          sta     addr2
.22b7	88		                dey
.22b8	d0 f1		                bne     moreline
.22ba	8a		addx            txa
.22bb	18		                clc
.22bc	6d d1 22	                adc     addr2
.22bf	90 03		                bcc     thatsit
.22c1	ee d2 22	                inc     addr2+1
.22c4	8d d1 22	thatsit         sta     addr2
.22c7	68		                pla
.22c8	a8		                tay
.22c9	68		                pla
.22ca	aa		                tax
.22cb	68		                pla
.22cc	28		                plp
.22cd	60		                rts
>22ce	28		ymult          .byte     40
>22cf	00 00		addr1          .word     $0000
>22d1	00 00		addr2          .word     $0000
>22d3	00 00		bytecnt        .word     $0000
>22d5	00 00		zp1        .word   $0000
>22d7	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>22d9	01		a2hexcol       .byte     1              ; pour aputscxy
>22da	00		a2hexbkcol     .byte     %00000000
.22db			a2hexpos
>22db	00		a2hexpx        .byte     0              ; pour aputsxy
>22dc	00		a2hexpy        .byte     0
>22dd	24		a2hexprefix    .byte     "$"            ; pour aputs
>22de	00 00		a2hexstr       .word     $00
>22e0	00 00		               .word     $00
>22e2	00		               .byte     0              ; 0 end string
>22e3	30 30 30 30	abin           .null     "00000000"
>22e7	30 30 30 30 00
>22ec	20 20 20 00	adec           .null     "   "
.22f0			putahexfmtxy
.22f0	20 22 21	               jsr  push
.22f3	20 3f 23	               jsr  a2hex
.22f6	ae db 22	               ldx  a2hexpx
.22f9	ac dc 22	               ldy  a2hexpy
.22fc	20 4b 20	               jsr  gotoxy
.22ff	a2 dd		               ldx  #<a2hexprefix
.2301	a0 22		               ldy  #>a2hexprefix
.2303	20 31 20	               jsr  puts
.2306	20 61 21	               jsr  pop
.2309	60		               rts
.230a			putahexfmt
.230a	20 22 21	               jsr  push
.230d	20 3f 23	               jsr  a2hex
.2310	a2 dd		               ldx  #<a2hexprefix
.2312	a0 22		               ldy  #>a2hexprefix
.2314	20 31 20	               jsr  puts
.2317	20 61 21	               jsr  pop
.231a	60		               rts
.231b			putahex
.231b	20 22 21	               jsr  push
.231e	20 3f 23	               jsr  a2hex
.2321	a2 de		               ldx  #<a2hexstr
.2323	a0 22		               ldy  #>a2hexstr
.2325	20 31 20	               jsr  puts
.2328	20 61 21	               jsr  pop
.232b	60		               rts
.232c			nib2hex
.232c	08		               php
.232d	29 0f		               and  #$0f
.232f	f8		               sed
.2330	18		               clc
.2331	69 90		               adc  #$90
.2333	69 40		               adc  #$40
.2335	d8		               cld
.2336	28		               plp
.2337	60		               rts
.2338			lsra4bits
.2338	08		               php
.2339	4a		               lsr
.233a	4a		               lsr
.233b	4a		               lsr
.233c	4a		               lsr
.233d	28		               plp
.233e	60		               rts
.233f			a2hex
.233f	08		               php
.2340	48		               pha
.2341	48		               pha
.2342	20 38 23	               jsr  lsra4bits
.2345	20 2c 23	               jsr  nib2hex
.2348	8d de 22	               sta  a2hexstr
.234b	68		               pla
.234c	20 2c 23	               jsr  nib2hex
.234f	8d df 22	               sta  a2hexstr+1
.2352	a9 00		               lda  #$00                ; set end of string
.2354	8d e0 22	               sta  a2hexstr+2
.2357	68		               pla
.2358	28		               plp
.2359	60		               rts
.235a			xy2hex
.235a	20 22 21	               jsr  push
.235d	20 3f 23	               jsr  a2hex
.2360	8a		               txa
.2361	48		               pha
.2362	20 38 23	               jsr  lsra4bits
.2365	20 2c 23	               jsr  nib2hex
.2368	8d de 22	               sta  a2hexstr
.236b	68		               pla
.236c	20 2c 23	               jsr  nib2hex
.236f	8d df 22	               sta  a2hexstr+1
.2372	98		               tya
.2373	48		               pha
.2374	20 38 23	               jsr  lsra4bits
.2377	20 2c 23	               jsr  nib2hex
.237a	8d e0 22	               sta  a2hexstr+2
.237d	68		               pla
.237e	20 2c 23	               jsr  nib2hex
.2381	8d e1 22	               sta  a2hexstr+3
.2384	a9 00		               lda  #$00                ; 0 ended string
.2386	8d e2 22	               sta  a2hexstr+4
.2389	20 61 21	               jsr  pop
.238c			atobin
.238c	20 22 21	               jsr  push
.238f	a2 08		               ldx  #8
.2391	a0 00		               ldy  #0
.2393	18		               clc
.2394	2a		nextbit        rol
.2395	48		               pha
.2396	69 00		               adc  #$00
.2398	29 01		               and  #$01
.239a	20 2c 23	               jsr  nib2hex
.239d	99 e3 22	               sta  abin,y
.23a0	68		               pla
.23a1	c8		               iny
.23a2	ca		               dex
.23a3	d0 ef		               bne  nextbit
.23a5	a9 00		               lda  #0
.23a7	99 e3 22	               sta  abin,y
.23aa	20 61 21	               jsr  pull
.23ad	60		               rts
.23ae			putabin
.23ae	20 8c 23	               jsr     atobin
.23b1	20 22 21	               jsr     push
.23b4	a2 e3		               ldx     #<abin
.23b6	a0 22		               ldy     #>abin
.23b8	20 31 20	               jsr     puts
.23bb	20 61 21	               jsr     pop
.23be	60		               rts
.23bf			printabin
.23bf	20 22 21	               jsr     push
.23c2	a2 e3		               ldx     #<abin
.23c4	a0 22		               ldy     #>abin
.23c6	20 31 20	               jsr     puts
.23c9	20 61 21	               jsr     pop
.23cc	60		               rts
.23cd			putabinfmt
.23cd	08		               php
.23ce	48		               pha
.23cf	a9 25		               lda     #"%"
.23d1	20 2b 20	               jsr     putch
.23d4	68		               pla
.23d5	20 ae 23	               jsr     putabin
.23d8	28		               plp
.23d9	60		               rts
.23da			putabinxy
.23da	20 4b 20	               jsr     gotoxy
.23dd	20 ae 23	               jsr     putabin
.23e0	60		               rts
.23e1			putabinfmtxy
.23e1	20 4b 20	               jsr     gotoxy
.23e4	20 cd 23	               jsr     putabinfmt
.23e7	60		               rts
.23e8			atodec
.23e8	20 22 21	               jsr  push
.23eb	f8		               sed
.23ec	aa		               tax
.23ed	a0 00		               ldy  #$00
.23ef	a9 00		               lda  #$00
.23f1	18		nextbit        clc
.23f2	69 01		               adc  #$01
.23f4	90 01		               bcc  decx
.23f6	c8		               iny
.23f7	ca		decx           dex
.23f8	d0 f7		               bne  nextbit
.23fa	48		               pha
.23fb	98		               tya
.23fc	20 2c 23	               jsr  nib2hex
.23ff	8d ec 22	               sta  adec
.2402	68		               pla
.2403	48		               pha
.2404	20 2c 23	               jsr  nib2hex
.2407	8d ee 22	               sta  adec+2
.240a	68		               pla
.240b	6a		               ror
.240c	6a		               ror
.240d	6a		               ror
.240e	6a		               ror
.240f	20 2c 23	               jsr  nib2hex
.2412	8d ed 22	               sta  adec+1
.2415	d8		               cld
.2416	20 61 21	               jsr  pull
.2419	60		               rts
>241a	00 00 00	buffer         .byte     0,0,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>241d	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>2421	00 00 00 00 00 00 00 00 00 0d 00 00
>242d	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>2431	00 00 00 00 00 00 00 00 00 00 00 00
>243d	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>2441	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>244d	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>2451	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>245d	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>2461	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>246d	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>2471	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>247d	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>2481	00 00 00 00 00 00 00 00 00 00 00 00
>248d	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>2491	00 00 00 00 00 00 00 00 00 00 00 00
>249d	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>24a1	00 00 00 00 00 00 00 00 00 00 00 00
>24ad	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>24b1	00 00 00 00 00 00 00 00 00 00 00 00
>24bd	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>24c1	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>24cd	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>24d1	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>24dd	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>24e1	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>24ed	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>24f1	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>24fd	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>2501	00 00 00 00 00 00 00 00 00 00 00 00
>250d	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>2511	00 00 00 00 00 00 00 00 00 00 00 00
.251d			waitstop
.251d	20 22 21	               jsr  push
.2520	20 ed f6	wait           jsr  k_stop
.2523	d0 fb		               bne  wait
.2525	20 61 21	               jsr  pop
.2528	60		               rts
.2529			anykey
.2529	08		               php
.252a	48		               pha
.252b	a5 cb		nokey          lda 203
.252d	c9 40		               cmp #64
.252f	f0 fa		               beq nokey
.2531	20 37 25	               jsr releasekey
.2534	68		               pla
.2535	28		               plp
.2536	60		               rts
.2537			releasekey
.2537	08		               php
.2538	48		               pha
.2539	a5 cb		keypressed     lda 203
.253b	c9 40		               cmp #64
.253d	d0 fa		               bne keypressed
.253f	68		               pla
.2540	28		               plp
.2541	60		               rts
.2542			getkey
.2542	20 e4 ff	again          jsr  getin
.2545	c9 00		               cmp  #0
.2547	f0 f9		               beq  again
.2549	60		               rts
.254a			waitkey
.254a	20 22 21	               jsr  push
.254d	8d 9b 25	               sta  thekey
.2550	20 e4 ff	nope           jsr  getin
.2553	20 d2 ff	               jsr  chrout
.2556	cd 9b 25	               cmp  thekey
.2559	d0 f5		               bne  nope
.255b	20 d2 ff	               jsr  chrout
.255e	20 61 21	               jsr  pop
.2561	60		               rts
.2562			waitspace
.2562	20 22 21	               jsr  push
.2565	a9 7f		wait           lda  #$7f  ;%01111111
.2567	8d 00 dc	               sta  $dc00
.256a	ad 01 dc	               lda  $dc01
.256d	29 10		               and  #$10  ;mask %00010000
.256f	d0 f4		               bne  wait
.2571	20 61 21	               jsr  pop
.2574			waitsstop
.2574	20 22 21	               jsr  push
.2577	20 ed f6	wait           jsr  k_stop  ;%01111111
.257a	d0 fb		               bne  wait
.257c	20 61 21	               jsr  pop
.257f			waitreturn
.257f	20 22 21	               jsr  push
.2582	ad 9c 25	               lda  thecount
.2585	8d 00 04	               sta  scrnram
.2588	a9 02		               lda  #$02
.258a	8d 00 d8	               sta  colorram
.258d	20 e4 ff	nope           jsr  getin
.2590	c9 0d		nohex          cmp  #$0d
.2592	d0 f9		               bne  nope
.2594	ee 9c 25	               inc  thecount
.2597	20 61 21	               jsr  pop
.259a	60		               rts
>259b	00		thekey         .byte   0
>259c	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-disk.asm

.259d			diskerror
.259d	20 22 21	               jsr  push
.25a0	ad ce 26	               lda  dsk_dev   ; Select device 8
.25a3	85 ba		               sta  $ba       ;
.25a5	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.25a8	a9 6f		               lda  #$6f
.25aa	85 b9		               sta  $b9       ;
.25ac	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.25af	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.25b2	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.25b5	c9 0d		               cmp  #$0d      ; Is it CR ?
.25b7	d0 f6		               bne  nextchar  ; No, get next char
.25b9	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.25bc	20 61 21	               jsr  pop
.25bf	60		               rts
.25c0			diskdir
.25c0	20 22 21	               jsr  push
.25c3	a9 24		               lda  #$24      ; L012C - Filename is "$"
.25c5	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.25c7	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.25c9	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.25cb	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.25cd	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.25cf	a9 01		               lda  #$01      ; L0138 - set ...
.25d1	85 b7		               sta  $b7       ; L013A - ... length of current filename
.25d3	ad ce 26	               lda  dsk_dev   ; L013C - set 8 as ...
.25d6	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.25d8	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.25da	85 b9		               sta  $b9       ; L0142 - ... secondary address
.25dc	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.25df	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...%10111010
.25e1	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.25e4	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.25e6	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.25e9	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.25eb	85 90		               sta  $90       ; L0153 - ... kernal status word.
.25ed	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.25ef	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.25f1	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.25f4	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.25f6	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.25f8	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.25fa	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.25fd	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.25ff	d0 28		               bne  exit      ; L0167
.2601	a4 fb		               ldy  $fb       ; L0169
.2603	88		               dey            ; L016b
.2604	d0 e9		               bne  loop1     ; L016C - If not last, loop
.2606	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.2608	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.260b	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.260d	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.2610	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.2613	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.2615	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.2617	aa		               tax            ; L017F - tfr a in x
.2618	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.261a	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.261d	4c 10 26	               jmp  loop3     ; L0185 - get another byte
.2620	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.2622	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.2625	a0 02		               ldy  #$02      ; L018D - set Y to 2
.2627	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.2629	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.262c	20 61 21	               jsr  pop
.262f	60		               rts            ; L0194
.2630			directory
.2630	20 c0 25	               jsr  diskdir
.2633	20 9d 25	               jsr  diskerror
.2636	60		               rts
.2637			memtofile
.2637	20 a8 26	               jsr  dsk_putmesg
.263a	20 22 21	               jsr  push
.263d	ad d2 26	               lda  dsk_fnlen
.2640	ae d0 26	               ldx  dsk_fnptr      ; load fname addr. lbyte
.2643	ac d1 26	               ldy  dsk_fnptr+1
.2646	20 bd ff	               jsr  setnam         ; call setnam
.2649	ad cf 26	               lda  dsk_lfsno
.264c	ae ce 26	               ldx  dsk_dev        ; specified device
.264f	a0 00		skip           ldy  #$00
.2651	20 ba ff	               jsr  setlfs         ; call setlfs
.2654	ad ca 26	               lda  dsk_data_s     ; put data start lbyte in stal
.2657	85 c1		               sta  stal
.2659	ad cb 26	               lda  dsk_data_s+1   ; put data start hbyte in stal
.265c	85 c2		               sta  stal+1
.265e	ae cc 26	               ldx  dsk_data_e     ; put data end lbyte in x
.2661	ac cd 26	               ldy  dsk_data_e+1   ; put data end hbyte in y
.2664	a9 c1		               lda  #stal          ; start address located in $c1/$c2
.2666	20 d8 ff	               jsr  save           ; call save
.2669	90 00		               bcc  noerror        ; if carry set, a load error has happened
.266b	20 61 21	noerror        jsr  pop
.266e	60		               rts
.266f			filetomem
.266f	20 22 21	               jsr push
.2672	ad d2 26	               lda dsk_fnlen
.2675	ae d0 26	               ldx dsk_fnptr
.2678	ac d1 26	               ldy dsk_fnptr+1
.267b	20 bd ff	               jsr setnam     ; call setnam
.267e	ad cf 26	               lda dsk_lfsno
.2681	ae ce 26	               ldx dsk_dev    ; default to device 8
.2684	a0 01		               ldy #$01       ; not $01 means: load to address stored in file
.2686	20 ba ff	               jsr setlfs     ; call setlfs
.2689	a9 00		               lda #$00       ; $00 means: load to memory (not verify)
.268b	20 d5 ff	               jsr load       ; call load
.268e	90 03		               bcc noerror      ; if carry set, a load error has happened
.2690	20 97 26	               jsr  error
.2693	20 61 21	noerror        jsr pop
.2696	60		               rts
.2697			error
.2697	60		               rts
.2698	a2 e3		error1         ldx  #<dsk_emsg1
.269a	a0 26		               ldy  #>dsk_emsg1
.269c	20 31 20	               jsr  puts
.269f	60		               rts
.26a0	a2 f7		error2         ldx #<dsk_emsg2
.26a2	a0 26		               ldy #>dsk_emsg2
.26a4	20 31 20	               jsr puts
.26a7	60		               rts
.26a8			dsk_putmesg
.26a8	20 22 21	               jsr push
.26ab	a2 d3		               ldx #<dsk_msg0
.26ad	a0 26		               ldy #>dsk_msg0
.26af	20 31 20	               jsr puts
.26b2	a9 20		               lda #$20
.26b4	20 2b 20	               jsr putch
.26b7	ae d0 26	               ldx dsk_fnptr
.26ba	ac d1 26	               ldy dsk_fnptr+1
.26bd	20 31 20	               jsr puts
.26c0	ad cf 26	               lda dsk_lfsno
.26c3	20 c3 ff	               jsr close
.26c6	20 61 21	               jsr pop
.26c9	60		               rts
>26ca	00 00		dsk_data_s     .word     $0000    ; example addresses
>26cc	00 20		dsk_data_e     .word     $2000
>26ce	08		dsk_dev        .byte     $08
>26cf	00		dsk_lfsno      .byte     $00
>26d0	00 00		dsk_fnptr      .word     $00
>26d2	00		dsk_fnlen      .byte     0
>26d3	8d		dsk_msg0       .byte     141
>26d4	53 41 56 49	               .null     "saving"
>26d8	4e 47 00
>26db	8d		dsk_msg1       .byte     141
>26dc	53 55 43 43	               .null     "succes"
>26e0	45 53 00
>26e3	8d		dsk_emsg1      .byte     141
>26e4	46 49 43 48	               .null     "fichier non ouvert"
>26e8	49 45 52 20 4e 4f 4e 20 4f 55 56 45 52 54 00
>26f7	11		dsk_emsg2      .byte     17
>26f8	45 52 52 45	               .null     "erreur d'ecriture"
>26fc	55 52 20 44 27 45 43 52 49 54 55 52 45 00

;******  Return to file: charedit.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Mon Nov 13 16:40:22 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

=$0400			scrnnewram     =    $0400
=14			charsdef       =    14
=9			grid_top       =    9
=1			grid_left      =    1
=16			grid_bot       =    grid_top + 7
=8			grid_right     =    grid_left + 7
=$03			mesgcol        =    vcyan
=$07			menu1col       =    vjaune
=$0d			menu2col       =    vvert1
=$01			flashcol       =    vblanc
.080d			main
.080d	20 fd 1c	               jsr  push
.0810	20 b0 1b	               jsr  screendis
.0813	20 ca 1b	               jsr  scrmaninit
.0816	20 cc 0d	               jsr  copycharset
.0819	20 b6 0d	               jsr  setscreenptr
.081c	20 ea 08	               jsr  setdefaultchar
.081f	20 2d 0e	               jsr  staticscreen
.0822	a9 00		               lda  #$00
.0824	8d d7 08	               sta  fkeyset
.0827	20 69 0e	               jsr  showfkeys
.082a	20 7c 14	               jsr  f8action
.082d	20 7c 14	               jsr  f8action
.0830	a9 00		               lda  #$00
.0832	20 bd 1b	               jsr  screenena
.0835	20 b5 0a	               jsr  keyaction
.0838	20 fd 1c	               jsr  push
.083b	a2 00		               ldx  #0
.083d	a0 00		               ldy  #0
.083f	20 26 1c	               jsr  gotoxy
.0842	20 3c 1d	               jsr  pop
.0845	20 ea 1b	               jsr  cls
.0848	a2 d4		               ldx #<bye_msg
.084a	a0 19		               ldy #>bye_msg
.084c	20 95 1c	               jsr putscxy
.084f	a2 f6		               ldx #<any_msg
.0851	a0 19		               ldy #>any_msg
.0853	20 95 1c	               jsr putscxy
.0856	a2 90		               ldx #<whoami0
.0858	a0 18		               ldy #>whoami0
.085a	20 95 1c	               jsr putscxy
.085d	a2 b4		               ldx #<whoami1
.085f	a0 18		               ldy #>whoami1
.0861	20 95 1c	               jsr putscxy
.0864	a2 d8		               ldx #<whoami2
.0866	a0 18		               ldy #>whoami2
.0868	20 95 1c	               jsr putscxy
.086b	a2 fc		               ldx #<whoami3
.086d	a0 18		               ldy #>whoami3
.086f	20 95 1c	               jsr putscxy
.0872	a2 20		               ldx #<whoami4
.0874	a0 19		               ldy #>whoami4
.0876	20 95 1c	               jsr putscxy
.0879	a2 44		               ldx #<whoami5
.087b	a0 19		               ldy #>whoami5
.087d	20 95 1c	               jsr putscxy
.0880	a2 68		               ldx #<whoami6
.0882	a0 19		               ldy #>whoami6
.0884	20 95 1c	               jsr putscxy
.0887	a2 8c		               ldx #<whoami7
.0889	a0 19		               ldy #>whoami7
.088b	20 95 1c	               jsr putscxy
.088e	a2 b0		               ldx #<whoami8
.0890	a0 19		               ldy #>whoami8
.0892	20 95 1c	               jsr putscxy
.0895	20 fd 1c	               jsr  push
.0898	a2 00		               ldx  #0
.089a	a0 00		               ldy  #0
.089c	20 26 1c	               jsr  gotoxy
.089f	20 3c 1d	               jsr  pop
.08a2	20 1d 21	               jsr  getkey
.08a5	20 3c 1d	               jsr  pop
.08a8	60		               rts
.08a9			scrollright
.08a9	20 fd 1c	               jsr  push
.08ac	48		               pha
.08ad	ad db 08	               lda  mapaddr
.08b0	85 fb		               sta  $fb
.08b2	ad dc 08	               lda  mapaddr+1
.08b5	85 fc		               sta  $fc
.08b7	68		               pla
.08b8	a0 00		               ldy  #$00
.08ba	b1 fb		again          lda  (zpage1),y
.08bc	18		               clc
.08bd	6a		               ror
.08be	90 03		               bcc  zero
.08c0	18		               clc
.08c1	69 80		one            adc  #$80
.08c3	91 fb		zero           sta  (zpage1),y
.08c5	c8		               iny
.08c6	c0 08		               cpy  #$08
.08c8	d0 f0		               bne  again
.08ca	20 3c 1d	               jsr  pop
.08cd	60		               rts
>08ce	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>08d2	08 04 02 01
>08d6	00		editmode       .byte     0
>08d7	00		fkeyset        .byte     0
>08d8	00		currentchar    .byte     0
>08d9	00		currentkey     .byte     0
>08da	00		bitmapoffset   .byte     0
>08db	00 00		mapaddr        .word     0
>08dd	00 00		byteaddr       .word     0
>08df	00 00		gridaddr       .word     0
>08e1	09		cursln         .byte     grid_top
>08e2	01		curscl         .byte     grid_left

;******  Processing file: routines.asm

.08e3			template
.08e3	20 fd 1c	               jsr  push
.08e6	20 3c 1d	               jsr  pop
.08e9	60		               rts
.08ea			setdefaultchar
.08ea	20 fd 1c	               jsr  push
.08ed	a9 40		               lda  #$40
.08ef	8d d9 08	               sta  currentkey
.08f2	aa		               tax
.08f3	bc f8 1f	               ldy  asciitorom,x
.08f6	8c da 08	               sty  bitmapoffset
.08f9	20 6e 09	               jsr  showkeyval
.08fc	20 fd 0c	               jsr  drawbitmap
.08ff	20 fd 1c	               jsr  push
.0902	a2 0d		               ldx  #13
.0904	a0 0c		               ldy  #12
.0906	20 26 1c	               jsr  gotoxy
.0909	20 3c 1d	               jsr  pop
.090c	20 06 1c	               jsr  putch
.090f	20 fd 1c	               jsr  push
.0912	a2 11		               ldx  #17
.0914	a0 05		               ldy  #5
.0916	20 26 1c	               jsr  gotoxy
.0919	20 3c 1d	               jsr  pop
.091c	20 c3 1f	               jsr  atodec
.091f	20 fd 1c	               jsr  push
.0922	a2 c7		isx            ldx  #<adec
.0924	a0 1e		isy            ldy  #>adec
.0926	20 0c 1c	               jsr  puts
.0929	20 3c 1d	               jsr  pull
.092c	20 3c 1d	               jsr  pop
.092f	60		               rts
.0930			setmenuacolor
.0930	20 fd 1c	               jsr  push
.0933	8d 10 1a	               sta  f1abutton
.0936	8d 2a 1a	               sta  f2abutton
.0939	8d 44 1a	               sta  f3abutton
.093c	8d 5e 1a	               sta  f4abutton
.093f	8d 78 1a	               sta  f5abutton
.0942	8d 92 1a	               sta  f6abutton
.0945	8d ac 1a	               sta  f7abutton
.0948	8d c6 1a	               sta  f8abutton
.094b	20 3c 1d	               jsr  pop
.094e	60		               rts
.094f			setmenubcolor
.094f	20 fd 1c	               jsr  push
.0952	8d e0 1a	               sta  f1bbutton
.0955	8d fa 1a	               sta  f2bbutton
.0958	8d 14 1b	               sta  f3bbutton
.095b	8d 2e 1b	               sta  f4bbutton
.095e	8d 48 1b	               sta  f5bbutton
.0961	8d 62 1b	               sta  f6bbutton
.0964	8d 7c 1b	               sta  f7bbutton
.0967	8d 96 1b	               sta  f8bbutton
.096a	20 3c 1d	               jsr  pop
.096d	60		               rts
.096e			showkeyval
.096e	20 fd 1c	               jsr  push
.0971	20 fd 1c	               jsr  push
.0974	a2 01		               ldx  #1
.0976	a0 13		               ldy  #19
.0978	20 26 1c	               jsr  gotoxy
.097b	20 3c 1d	               jsr  pop
.097e	ad d9 08	               lda  currentkey
.0981	20 06 1c	               jsr  putch
.0984	48		               pha
.0985	a9 3d		               lda  #'='
.0987	20 06 1c	               jsr  putch
.098a	a9 25		               lda  #'%'
.098c	20 06 1c	               jsr  putch
.098f	68		               pla
.0990	20 89 1f	               jsr  putabin
.0993	20 fd 1c	               jsr  push
.0996	a2 01		               ldx  #1
.0998	a0 14		               ldy  #20
.099a	20 26 1c	               jsr  gotoxy
.099d	20 3c 1d	               jsr  pop
.09a0	20 fd 1c	               jsr  push
.09a3	a2 6f		isx            ldx  #<txt1
.09a5	a0 0a		isy            ldy  #>txt1
.09a7	20 0c 1c	               jsr  puts
.09aa	20 3c 1d	               jsr  pull
.09ad	a9 24		               lda  #'$'
.09af	20 06 1c	               jsr  putch
.09b2	ad d9 08	               lda  currentkey
.09b5	20 f6 1e	               jsr  putahex
.09b8	20 fd 1c	               jsr  push
.09bb	a2 01		               ldx  #1
.09bd	a0 15		               ldy  #21
.09bf	20 26 1c	               jsr  gotoxy
.09c2	20 3c 1d	               jsr  pop
.09c5	20 fd 1c	               jsr  push
.09c8	a2 7a		isx            ldx  #<txt2
.09ca	a0 0a		isy            ldy  #>txt2
.09cc	20 0c 1c	               jsr  puts
.09cf	20 3c 1d	               jsr  pull
.09d2	a9 24		               lda  #'$'
.09d4	20 06 1c	               jsr  putch
.09d7	ad 2c 0e	               lda  bitmapaddr+1
.09da	20 f6 1e	               jsr  putahex
.09dd	ad 2b 0e	               lda  bitmapaddr
.09e0	20 f6 1e	               jsr  putahex
.09e3	20 fd 1c	               jsr  push
.09e6	a2 01		               ldx  #1
.09e8	a0 16		               ldy  #22
.09ea	20 26 1c	               jsr  gotoxy
.09ed	20 3c 1d	               jsr  pop
.09f0	20 fd 1c	               jsr  push
.09f3	a2 85		isx            ldx  #<txt3
.09f5	a0 0a		isy            ldy  #>txt3
.09f7	20 0c 1c	               jsr  puts
.09fa	20 3c 1d	               jsr  pull
.09fd	a9 24		               lda  #'$'
.09ff	20 06 1c	               jsr  putch
.0a02	ad da 08	               lda  bitmapoffset
.0a05	20 f6 1e	               jsr  putahex
.0a08	20 fd 1c	               jsr  push
.0a0b	a2 01		               ldx  #1
.0a0d	a0 17		               ldy  #23
.0a0f	20 26 1c	               jsr  gotoxy
.0a12	20 3c 1d	               jsr  pop
.0a15	20 fd 1c	               jsr  push
.0a18	a2 92		isx            ldx  #<txt4
.0a1a	a0 0a		isy            ldy  #>txt4
.0a1c	20 0c 1c	               jsr  puts
.0a1f	20 3c 1d	               jsr  pull
.0a22	a9 24		               lda  #'$'
.0a24	20 06 1c	               jsr  putch
.0a27	ad dc 08	               lda  mapaddr+1
.0a2a	20 f6 1e	               jsr  putahex
.0a2d	ad db 08	               lda  mapaddr
.0a30	20 f6 1e	               jsr  putahex
.0a33	20 fd 1c	               jsr  push
.0a36	a2 01		               ldx  #1
.0a38	a0 18		               ldy  #24
.0a3a	20 26 1c	               jsr  gotoxy
.0a3d	20 3c 1d	               jsr  pop
.0a40	20 fd 1c	               jsr  push
.0a43	a2 9d		isx            ldx  #<txt5
.0a45	a0 0a		isy            ldy  #>txt5
.0a47	20 0c 1c	               jsr  puts
.0a4a	20 3c 1d	               jsr  pull
.0a4d	ad e2 08	               lda  curscl
.0a50	20 f6 1e	               jsr  putahex
.0a53	a9 da		               lda  #$da
.0a55	20 06 1c	               jsr  putch
.0a58	ad e1 08	               lda  cursln
.0a5b	20 f6 1e	               jsr  putahex
.0a5e	20 3c 1d	               jsr  pop
.0a61	60		               rts
>0a62	50 45 54 53	txt0           .null     "petscii :   "
>0a66	43 49 49 20 3a 20 20 20 00
>0a6f	4b 45 59 20	txt1           .null     "key code: "
>0a73	43 4f 44 45 3a 20 00
>0a7a	42 49 54 4d	txt2           .null     "bitmap..: "
>0a7e	41 50 2e 2e 3a 20 00
>0a85	4f 46 46 53	txt3           .null     "offset..:   "
>0a89	45 54 2e 2e 3a 20 20 20 00
>0a92	4d 41 50 41	txt4           .null     "mapaddr.: "
>0a96	44 44 52 2e 3a 20 00
>0a9d	43 55 52 53	txt5           .null     "cursval.: "
>0aa1	56 41 4c 2e 3a 20 00
>0aa8	53 54 41 43	txt6           .null     "stack......:"
>0aac	4b 2e 2e 2e 2e 2e 2e 3a 00
.0ab5			keyaction
.0ab5	20 fd 1c	               jsr  push
.0ab8	20 1d 21	loop           jsr  getkey
.0abb	20 6e 09	               jsr  showkeyval
.0abe	c9 85		f1             cmp  #key_f1
.0ac0	d0 03		               bne  f2
.0ac2	4c 27 0b	               jmp  dof1
.0ac5	c9 89		f2             cmp  #key_f2
.0ac7	d0 03		               bne  f3
.0ac9	4c 2d 0b	               jmp  dof2
.0acc	c9 86		f3             cmp  #key_f3
.0ace	d0 03		               bne  f4
.0ad0	4c 33 0b	               jmp  dof3
.0ad3	c9 8a		f4             cmp  #key_f4
.0ad5	d0 03		               bne  f5
.0ad7	4c 39 0b	               jmp  dof4
.0ada	c9 87		f5             cmp  #key_f5
.0adc	d0 03		               bne  f6
.0ade	4c 3f 0b	               jmp  dof5
.0ae1	c9 8b		f6             cmp  #key_f6
.0ae3	d0 03		               bne  f7
.0ae5	4c 45 0b	               jmp  dof6
.0ae8	c9 88		f7             cmp  #key_f7
.0aea	d0 03		               bne  f8
.0aec	4c 4b 0b	               jmp  dof7
.0aef	c9 8c		f8             cmp  #key_f8
.0af1	d0 03		               bne  ctrlx
.0af3	4c 51 0b	               jmp  dof8
.0af6	c9 18		ctrlx          cmp  #ctrl_x
.0af8	d0 03		               bne  is18
.0afa	4c 57 0b	               jmp  doquit
.0afd	c9 12		is18           cmp  #18
.0aff	d0 03		               bne  reste
.0b01	4c b8 0a	               jmp  loop
.0b04			reste
.0b04	20 fd 1c	               jsr  push
.0b07	a2 0d		               ldx  #13
.0b09	a0 0c		               ldy  #12
.0b0b	20 26 1c	               jsr  gotoxy
.0b0e	20 3c 1d	               jsr  pop
.0b11	20 06 1c	               jsr  putch
.0b14	8d d9 08	               sta  currentkey
.0b17	aa		               tax
.0b18	bc f8 1f	               ldy  asciitorom,x
.0b1b	8c da 08	               sty  bitmapoffset
.0b1e	20 6e 09	               jsr  showkeyval
.0b21	20 fd 0c	               jsr  drawbitmap
.0b24	4c b8 0a	               jmp  loop
.0b27	20 e6 0f	dof1           jsr  f1action  ;edit/reverse
.0b2a	4c b8 0a	               jmp  loop
.0b2d	20 b7 10	dof2           jsr  f2action  ;save/flip vert
.0b30	4c b8 0a	               jmp  loop
.0b33	20 55 11	dof3           jsr  f3action  ;load/flip horz
.0b36	4c b8 0a	               jmp  loop
.0b39	20 f3 11	dof4           jsr  f4action  ;copy/scroll r
.0b3c	4c b8 0a	               jmp  loop
.0b3f	20 91 12	dof5           jsr  f5action  ;clear/scroll l
.0b42	4c b8 0a	               jmp  loop
.0b45	20 35 13	dof6           jsr  f6action  ;fill;/scroll up
.0b48	4c b8 0a	               jmp  loop
.0b4b	20 d9 13	dof7           jsr  f7action  ;clear;/scroll down
.0b4e	4c b8 0a	               jmp  loop
.0b51	20 7c 14	dof8           jsr  f8action  ; function
.0b54	4c b8 0a	               jmp  loop
.0b57	20 3c 1d	doquit         jsr  pop
.0b5a	60		               rts
.0b5b			editor
.0b5b	20 fd 1c	               jsr  push
.0b5e	20 fd 1c	               jsr  push
.0b61	a2 5e		               ldx  #<blankmsg
.0b63	a0 16		               ldy  #>blankmsg
.0b65	20 95 1c	               jsr  putscxy
.0b68	a2 7b		               ldx  #<exit_msg
.0b6a	a0 18		               ldy  #>exit_msg
.0b6c	20 95 1c	               jsr  putscxy
.0b6f	20 3c 1d	               jsr  pop
.0b72	20 fd 1c	               jsr  push
.0b75	a2 5e		               ldx  #<blankmsg
.0b77	a0 16		               ldy  #>blankmsg
.0b79	20 95 1c	               jsr  putscxy
.0b7c	a2 89		               ldx  #<edit_msg
.0b7e	a0 16		               ldy  #>edit_msg
.0b80	20 95 1c	               jsr  putscxy
.0b83	20 3c 1d	               jsr  pop
.0b86	a9 0c		               lda  #vgris1
.0b88	20 30 09	               jsr  setmenuacolor
.0b8b	a9 0d		               lda  #vvert1
.0b8d	8d 10 1a	               sta  f1abutton
.0b90	20 69 0e	               jsr  showfkeys
.0b93	20 b9 0c	               jsr  setcurs
.0b96	ad d9 08	               lda  currentkey
.0b99	20 fd 1c	               jsr  push
.0b9c	a2 11		               ldx  #17
.0b9e	a0 05		               ldy  #5
.0ba0	20 26 1c	               jsr  gotoxy
.0ba3	20 3c 1d	               jsr  pop
.0ba6	20 c3 1f	               jsr  atodec
.0ba9	20 fd 1c	               jsr  push
.0bac	a2 c7		isx            ldx  #<adec
.0bae	a0 1e		isy            ldy  #>adec
.0bb0	20 0c 1c	               jsr  puts
.0bb3	20 3c 1d	               jsr  pull
.0bb6	20 fd 0c	               jsr  drawbitmap
.0bb9	20 1d 21	ed_loop        jsr  getkey
.0bbc	c9 91		cu             cmp  #cursu
.0bbe	d0 03		               bne  cd
.0bc0	4c 36 0c	               jmp  do_up
.0bc3	c9 11		cd             cmp  #cursd
.0bc5	d0 03		               bne  cl
.0bc7	4c 49 0c	               jmp  do_down
.0bca	c9 9d		cl             cmp  #cursl
.0bcc	d0 03		               bne  cr
.0bce	4c 5c 0c	               jmp  do_left
.0bd1	c9 1d		cr             cmp  #cursr
.0bd3	d0 03		               bne  cx
.0bd5	4c 6f 0c	               jmp  do_right
.0bd8	c9 18		cx             cmp  #ctrl_x
.0bda	d0 03		               bne  sp
.0bdc	4c 8b 0c	               jmp  do_ctrlx
.0bdf	c9 20		sp             cmp  #$20
.0be1	d0 03		               bne  rest
.0be3	4c 82 0c	               jmp  do_swap
.0be6			rest
.0be6	20 fd 1c	               jsr  push
.0be9	a2 0d		               ldx  #13
.0beb	a0 0c		               ldy  #12
.0bed	20 26 1c	               jsr  gotoxy
.0bf0	20 3c 1d	               jsr  pop
.0bf3	20 06 1c	               jsr  putch
.0bf6	8d d9 08	               sta  currentkey
.0bf9	aa		               tax
.0bfa	bc f8 1f	               ldy  asciitorom,x
.0bfd	8c da 08	               sty  bitmapoffset
.0c00	20 6e 09	               jsr  showkeyval
.0c03	20 fd 0c	               jsr  drawbitmap
.0c06	20 fd 1c	               jsr  push
.0c09	a2 0d		               ldx  #13
.0c0b	a0 0c		               ldy  #12
.0c0d	20 26 1c	               jsr  gotoxy
.0c10	20 3c 1d	               jsr  pop
.0c13	20 06 1c	               jsr  putch
.0c16	20 fd 1c	               jsr  push
.0c19	a2 11		               ldx  #17
.0c1b	a0 05		               ldy  #5
.0c1d	20 26 1c	               jsr  gotoxy
.0c20	20 3c 1d	               jsr  pop
.0c23	20 c3 1f	               jsr  atodec
.0c26	20 fd 1c	               jsr  push
.0c29	a2 c7		isx            ldx  #<adec
.0c2b	a0 1e		isy            ldy  #>adec
.0c2d	20 0c 1c	               jsr  puts
.0c30	20 3c 1d	               jsr  pull
.0c33	4c 88 0c	               jmp  totop
.0c36	ad e1 08	do_up          lda  cursln
.0c39	c9 09		               cmp  #grid_top
.0c3b	f0 4b		               beq  totop
.0c3d	20 db 0c	               jsr  clrcurs
.0c40	ce e1 08	               dec  cursln
.0c43	20 b9 0c	               jsr  setcurs
.0c46	4c 88 0c	               jmp  totop
.0c49	ad e1 08	do_down        lda  cursln
.0c4c	c9 10		               cmp  #grid_bot
.0c4e	f0 38		               beq  totop
.0c50	20 db 0c	               jsr  clrcurs
.0c53	ee e1 08	               inc  cursln
.0c56	20 b9 0c	               jsr  setcurs
.0c59	4c 88 0c	               jmp  totop
.0c5c	ad e2 08	do_left        lda  curscl
.0c5f	c9 01		               cmp  #grid_left
.0c61	f0 25		               beq  totop
.0c63	20 db 0c	               jsr  clrcurs
.0c66	ce e2 08	               dec  curscl
.0c69	20 b9 0c	               jsr  setcurs
.0c6c	4c 88 0c	               jmp  totop
.0c6f	ad e2 08	do_right       lda  curscl
.0c72	c9 08		               cmp  #grid_right
.0c74	f0 12		               beq  totop
.0c76	20 db 0c	               jsr  clrcurs
.0c79	ee e2 08	               inc  curscl
.0c7c	20 b9 0c	               jsr  setcurs
.0c7f	4c 88 0c	               jmp  totop
.0c82	20 92 0c	do_swap        jsr  do_eor
.0c85	20 fd 0c	               jsr  drawbitmap
.0c88	4c b9 0b	totop          jmp  ed_loop
.0c8b	20 db 0c	do_ctrlx       jsr  clrcurs
.0c8e	20 3c 1d	               jsr  pop
.0c91	60		               rts
.0c92			do_eor
.0c92	20 fd 1c	               jsr  push
.0c95	ad db 08	               lda  mapaddr
.0c98	85 fd		               sta  zpage2
.0c9a	ad dc 08	               lda  mapaddr+1
.0c9d	85 fe		               sta  zpage2+1
.0c9f	ae e1 08	               ldx  cursln     ; calcul de
.0ca2	ca		               dex            ; l'offset de
.0ca3	8a		               txa            ; la
.0ca4	29 f7		               and  #$f7      ; ligne
.0ca6	a8		               tay
.0ca7	ae e2 08	               ldx  curscl
.0caa	ca		               dex
.0cab	bd ce 08	               lda  eorval,x
.0cae	51 fd		               eor  (zpage2),y
.0cb0	20 6e 09	               jsr  showkeyval
.0cb3	91 fd		               sta  (zpage2),y
.0cb5	20 3c 1d	               jsr  pop
.0cb8	60		               rts
.0cb9			setcurs
.0cb9	20 fd 1c	               jsr  push
.0cbc	a2 01		               ldx  #grid_left
.0cbe	ac e1 08	               ldy  cursln
.0cc1	20 26 1c	               jsr  gotoxy
.0cc4	a9 da		               lda  #$da
.0cc6	20 06 1c	               jsr  putch
.0cc9	ae e2 08	               ldx  curscl
.0ccc	e8		               inx
.0ccd	a0 08		               ldy  #grid_top-1
.0ccf	20 26 1c	               jsr  gotoxy
.0cd2	a9 da		               lda  #$da
.0cd4	20 06 1c	               jsr  putch
.0cd7	20 3c 1d	               jsr  pop
.0cda	60		               rts
.0cdb			clrcurs
.0cdb	20 fd 1c	               jsr  push
.0cde	a2 01		               ldx  #grid_left
.0ce0	ac e1 08	               ldy  cursln
.0ce3	20 26 1c	               jsr  gotoxy
.0ce6	a9 20		               lda  #$20
.0ce8	20 06 1c	               jsr  putch
.0ceb	ae e2 08	               ldx  curscl
.0cee	e8		               inx
.0cef	a0 08		               ldy  #grid_top-1
.0cf1	20 26 1c	               jsr  gotoxy
.0cf4	a9 20		               lda  #$20
.0cf6	20 06 1c	               jsr  putch
.0cf9	20 3c 1d	               jsr  pop
.0cfc	60		               rts
.0cfd			drawbitmap
.0cfd	20 fd 1c	               jsr  push
.0d00	a9 57		               lda  #<letext       ; le pointeur
.0d02	85 fd		               sta  zpage2
.0d04	a9 58		               lda  #<letext+1
.0d06	85 fe		               sta  zpage2+1
.0d08	a9 01		               lda  #grid_left     ; la position
.0d0a	8d 55 0d	               sta  textline+1
.0d0d	a9 09		               lda  #grid_top
.0d0f	8d 56 0d	               sta  textline+2
.0d12	20 60 0d	               jsr  calcmapaddr
.0d15	ad db 08	               lda  mapaddr        ; on pointe sur la table des bitmaps
.0d18	85 fb		               sta  zpage1
.0d1a	ad dc 08	               lda  mapaddr+1
.0d1d	85 fc		               sta  zpage1+1
.0d1f	a0 00		drawchar       ldy  #$00
.0d21	a2 09		               ldx  #grid_top      ;on replace la ...
.0d23	8e 2c 0d	               stx  isy+1          ;ligne de départ
.0d26	20 fd 1c	nextline       jsr  push
.0d29	a2 02		               ldx  #grid_left+1        ; la colonne
.0d2b	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.0d2d	20 26 1c	               jsr  gotoxy
.0d30	20 3c 1d	               jsr  pop
.0d33	b1 fb		               lda  (zpage1),y     ; on li une ligne
.0d35	20 67 1f	               jsr  atobin
.0d38	20 8f 0d	               jsr  abintograph
.0d3b	20 fd 1c	               jsr  push
.0d3e	a2 be		isx            ldx  #<abin
.0d40	a0 1e		isy            ldy  #>abin
.0d42	20 0c 1c	               jsr  puts
.0d45	20 3c 1d	               jsr  pull
.0d48	ee 2c 0d	               inc  isy+1
.0d4b	c8		               iny
.0d4c	c0 08		               cpy  #$08
.0d4e	30 d6		               bmi  nextline
.0d50	20 3c 1d	               jsr  pop
.0d53	60		               rts
>0d54	01 01 09	textline       .byte vblanc,grid_left,grid_top
>0d57	20 20 20 20	letext         .null "        "
>0d5b	20 20 20 20 00
.0d60			calcmapaddr
.0d60	20 fd 1c	               jsr  push
.0d63	ad 2b 0e	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0d66	85 fb		               sta  zpage1
.0d68	ad 2c 0e	               lda  bitmapaddr+1
.0d6b	85 fc		               sta  zpage1+1
.0d6d	ae da 08	               ldx  bitmapoffset
.0d70	e0 00		               cpx  #$00
.0d72	f0 08		               beq  thesame         ; sommes nous déja à 0
.0d74	a9 08		addagain       lda  #8
.0d76	20 b2 0f	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0d79	ca		               dex                 ; pour chaque caracteres
.0d7a	d0 f8		               bne  addagain
.0d7c	48		thesame        pha
.0d7d	a5 fb		               lda  zpage1
.0d7f	8d db 08	               sta  mapaddr
.0d82	a5 fc		               lda  zpage1+1
.0d84	8d dc 08	               sta  mapaddr+1
.0d87	68		               pla
.0d88	20 6e 09	               jsr  showkeyval
.0d8b	20 3c 1d	out            jsr  pop
.0d8e	60		               rts
.0d8f			abintograph
.0d8f	20 fd 1c	               jsr  push
.0d92	a9 be		               lda  #<abin
.0d94	85 fb		               sta  zpage1
.0d96	a9 1e		               lda  #>abin+1
.0d98	85 fc		               sta  zpage1+1
.0d9a	a0 00		               ldy  #$00
.0d9c	b1 fb		nextbit        lda  (zpage1),y
.0d9e	c9 30		               cmp  #$30
.0da0	f0 07		               beq  itszero
.0da2	a9 d1		itsone         lda  #$d1
.0da4	91 fb		               sta  (zpage1),y
.0da6	4c ad 0d	               jmp  next
.0da9	a9 20		itszero        lda  #$20
.0dab	91 fb		               sta  (zpage1),y
.0dad	c8		next           iny
.0dae	c0 08		               cpy  #$08
.0db0	30 ea		               bmi  nextbit
.0db2	20 3c 1d	               jsr  pop
.0db5	60		               rts
.0db6			setscreenptr
.0db6	20 fd 1c	               jsr  push
.0db9	a9 08		               lda  #$08      ; basic commande to disable ...
.0dbb	20 d2 ff	               jsr  chrout    ; ... character set change.
.0dbe	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.0dc1	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.0dc3	09 0e		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.0dc5	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.0dc8	20 3c 1d	               jsr  pop
.0dcb	60		               rts
.0dcc			copycharset
.0dcc	20 fd 1c	               jsr  push
.0dcf	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0dd2	29 fe		               and  #%11111110     ;254
.0dd4	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0dd7	a5 01		               lda  u6510map       ;$01
.0dd9	29 fb		               and  #%11111011     ;251
.0ddb	85 01		               sta  u6510map       ;$01
.0ddd	20 f2 0d	               jsr  memcopy
.0de0	a5 01		               lda  u6510map       ;$01
.0de2	09 04		               ora  #%00000100
.0de4	85 01		               sta  u6510map       ;$01
.0de6	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0de9	09 01		               ora  #%00000001     ;254
.0deb	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0dee	20 3c 1d	               jsr  pop
.0df1	60		               rts
.0df2			memcopy
.0df2	20 fd 1c	               jsr  push
.0df5	ad 27 0e	               lda  startaddr
.0df8	85 fb		               sta  zpage1
.0dfa	ad 28 0e	               lda  startaddr+1
.0dfd	85 fc		               sta  zpage1+1
.0dff	ad 2b 0e	               lda  bitmapaddr
.0e02	85 fd		               sta  zpage2
.0e04	ad 2c 0e	               lda  bitmapaddr+1
.0e07	85 fe		               sta  zpage2+1
.0e09	a0 00		               ldy  #$00
.0e0b	b1 fb		onemore        lda  (zpage1),y
.0e0d	91 fd		               sta  (zpage2),y
.0e0f	20 04 1e	               jsr  inczp1
.0e12	20 1c 1e	               jsr  inczp2
.0e15	a5 fc		               lda  zpage1+1
.0e17	cd 2a 0e	               cmp  stopaddr+1
.0e1a	d0 ef		               bne  onemore
.0e1c	a5 fb		               lda  zpage1
.0e1e	cd 29 0e	               cmp  stopaddr
.0e21	d0 e8		               bne  onemore
.0e23	20 3c 1d	               jsr  pop
.0e26	60		               rts
=14336			bitmapmem =    charsdef * 1024     ;Calcul de la position ram des caracteres.
=61440			mstopaddr =    $d000+(4*$800)
>0e27	00 d0		startaddr      .word     $d000               ; 53248
>0e29	00 f0		stopaddr       .word     mstopaddr           ; 55296
>0e2b	00 38		bitmapaddr     .word     bitmapmem           ; $3000, 12288
.0e2d			staticscreen
.0e2d	48		               pha
.0e2e	a9 0c		               lda  #vgris1
.0e30	8d 20 d0	               sta  $d020
.0e33	68		               pla
.0e34	48		               pha
.0e35	a9 0b		               lda  #vgris
.0e37	8d 21 d0	               sta  $d021
.0e3a	68		               pla
.0e3b	20 09 0f	               jsr  showlines
.0e3e	20 ea 0e	               jsr  showallchars
.0e41	20 51 0f	               jsr  showgrid
.0e44	20 69 0e	               jsr  showfkeys
.0e47	20 fd 1c	               jsr  push
.0e4a	a2 5e		               ldx  #<blankmsg
.0e4c	a0 16		               ldy  #>blankmsg
.0e4e	20 95 1c	               jsr  putscxy
.0e51	a2 66		               ldx  #<quit_msg
.0e53	a0 18		               ldy  #>quit_msg
.0e55	20 95 1c	               jsr  putscxy
.0e58	20 3c 1d	               jsr  pop
.0e5b	20 fd 1c	               jsr  push
.0e5e	a2 00		               ldx  #0
.0e60	a0 07		               ldy  #7
.0e62	20 26 1c	               jsr  gotoxy
.0e65	20 3c 1d	               jsr  pop
.0e68	60		               rts
.0e69			showfkeys
.0e69	20 fd 1c	               jsr  push
.0e6c	ad d7 08	               lda  fkeyset
.0e6f	c9 00		               cmp  #$0
.0e71	d0 3b		               bne  secondks
.0e73	a2 10		               ldx #<f1abutton
.0e75	a0 1a		               ldy #>f1abutton
.0e77	20 95 1c	               jsr putscxy
.0e7a	a2 2a		               ldx #<f2abutton
.0e7c	a0 1a		               ldy #>f2abutton
.0e7e	20 95 1c	               jsr putscxy
.0e81	a2 44		               ldx #<f3abutton
.0e83	a0 1a		               ldy #>f3abutton
.0e85	20 95 1c	               jsr putscxy
.0e88	a2 5e		               ldx #<f4abutton
.0e8a	a0 1a		               ldy #>f4abutton
.0e8c	20 95 1c	               jsr putscxy
.0e8f	a2 78		               ldx #<f5abutton
.0e91	a0 1a		               ldy #>f5abutton
.0e93	20 95 1c	               jsr putscxy
.0e96	a2 92		               ldx #<f6abutton
.0e98	a0 1a		               ldy #>f6abutton
.0e9a	20 95 1c	               jsr putscxy
.0e9d	a2 ac		               ldx #<f7abutton
.0e9f	a0 1a		               ldy #>f7abutton
.0ea1	20 95 1c	               jsr putscxy
.0ea4	a2 c6		               ldx #<f8abutton
.0ea6	a0 1a		               ldy #>f8abutton
.0ea8	20 95 1c	               jsr putscxy
.0eab	4c e6 0e	               jmp end
.0eae			secondks
.0eae	a2 e0		               ldx #<f1bbutton
.0eb0	a0 1a		               ldy #>f1bbutton
.0eb2	20 95 1c	               jsr putscxy
.0eb5	a2 fa		               ldx #<f2bbutton
.0eb7	a0 1a		               ldy #>f2bbutton
.0eb9	20 95 1c	               jsr putscxy
.0ebc	a2 14		               ldx #<f3bbutton
.0ebe	a0 1b		               ldy #>f3bbutton
.0ec0	20 95 1c	               jsr putscxy
.0ec3	a2 2e		               ldx #<f4bbutton
.0ec5	a0 1b		               ldy #>f4bbutton
.0ec7	20 95 1c	               jsr putscxy
.0eca	a2 48		               ldx #<f5bbutton
.0ecc	a0 1b		               ldy #>f5bbutton
.0ece	20 95 1c	               jsr putscxy
.0ed1	a2 62		               ldx #<f6bbutton
.0ed3	a0 1b		               ldy #>f6bbutton
.0ed5	20 95 1c	               jsr putscxy
.0ed8	a2 7c		               ldx #<f7bbutton
.0eda	a0 1b		               ldy #>f7bbutton
.0edc	20 95 1c	               jsr putscxy
.0edf	a2 96		               ldx #<f8bbutton
.0ee1	a0 1b		               ldy #>f8bbutton
.0ee3	20 95 1c	               jsr putscxy
.0ee6	20 3c 1d	end            jsr  pop
.0ee9	60		               rts
.0eea			showallchars
.0eea	20 fd 1c	               jsr push
.0eed	20 fd 1c	               jsr  push
.0ef0	a2 00		               ldx  #0
.0ef2	a0 00		               ldy  #0
.0ef4	20 26 1c	               jsr  gotoxy
.0ef7	20 3c 1d	               jsr  pop
.0efa	a2 00		               ldx  #$00
.0efc	8a		nextc          txa
.0efd	9d 00 04	               sta  scrnnewram,x
.0f00	e8		               inx
.0f01	e0 80		               cpx  #$80
.0f03	d0 f7		               bne  nextc
.0f05	20 3c 1d	               jsr  pop
.0f08	60		               rts
.0f09			showlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.0f09	20 fd 1c	               jsr  push
.0f0c	a2 28		               ldx  #40
.0f0e	a9 40		               lda  #64
.0f10	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.0f13	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.0f16	ca		               dex
.0f17	e0 10		hline          cpx  #vlinepos
.0f19	10 03		               bpl  notyet
.0f1b	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.0f1e	e0 00		notyet         cpx  #$00
.0f20	d0 ee		               bne  nextl
.0f22	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.0f24	85 fb		               sta  zpage1
.0f26	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.0f28	85 fc		               sta  zpage1+1
.0f2a	a0 00		               ldy  #0
.0f2c	a9 72		               lda  #114
.0f2e	91 fb		               sta  (zpage1),y
.0f30	20 c0 0f	               jsr  zp1add40
.0f33	a2 12		               ldx  #24-hline2
.0f35	a9 5d		               lda  #93
.0f37	91 fb		another93      sta  (zpage1),y
.0f39	20 c0 0f	               jsr  zp1add40
.0f3c	ca		               dex
.0f3d	d0 f8		               bne  another93
.0f3f	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.0f41	85 fb		               sta  zpage1
.0f43	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.0f45	85 fc		               sta  zpage1+1
.0f47	a0 00		               ldy  #0
.0f49	a9 73		               lda  #115
.0f4b	91 fb		               sta  (zpage1),y
.0f4d	20 3c 1d	               jsr  pop
.0f50	60		               rts
.0f51			showgrid
.0f51	20 fd 1c	               jsr  push
.0f54	20 b0 1b	               jsr  screendis
.0f57	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.0f59	85 fb		               sta  zpage1
.0f5b	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.0f5d	85 fc		               sta  zpage1+1
.0f5f	a2 08		               ldx  #8
.0f61	a9 65		nextbox        lda  #101
.0f63	a0 09		               ldy  #9
.0f65	91 fb		               sta  (zpage1),y
.0f67	88		               dey
.0f68	a9 4f		               lda  #79
.0f6a	91 fb		nextcol        sta  (zpage1),y
.0f6c	88		               dey
.0f6d	d0 fb		               bne  nextcol
.0f6f	20 c0 0f	               jsr  zp1add40
.0f72	ca		               dex
.0f73	d0 ec		               bne  nextbox
.0f75	a0 08		               ldy  #8
.0f77	a9 77		               lda  #119
.0f79	91 fb		nextlin        sta  (zpage1),y
.0f7b	88		               dey
.0f7c	d0 fb		               bne  nextlin
.0f7e	a9 3e		               lda  #$3e
.0f80	8d eb 05	               sta  scrnnewram+(40*(12))+11
.0f83	a9 70		               lda  #$70                     ;+
.0f85	8d c4 05	               sta  scrnnewram+(40*(11))+12
.0f88	a9 43		               lda  #$43                    ;-
.0f8a	8d c5 05	               sta  scrnnewram+(40*(11))+13
.0f8d	a9 6e		               lda  #$6e                     ;+
.0f8f	8d c6 05	               sta  scrnnewram+(40*(11))+14
.0f92	a9 5d		               lda  #$5d                     ;|
.0f94	8d ec 05	               sta  scrnnewram+(40*(12))+12
.0f97	a9 5d		               lda  #$5d                     ;|
.0f99	8d ee 05	               sta  scrnnewram+(40*(12))+14
.0f9c	a9 6d		               lda  #$6d                     ;+
.0f9e	8d 14 06	               sta  scrnnewram+(40*(13))+12
.0fa1	a9 43		               lda  #$43                     ;-
.0fa3	8d 15 06	               sta  scrnnewram+(40*(13))+13
.0fa6	a9 7d		               lda  #$7d                     ;+
.0fa8	8d 16 06	               sta  scrnnewram+(40*(13))+14
.0fab	20 bd 1b	               jsr screenena
.0fae	20 3c 1d	               jsr  pop
.0fb1	60		               rts
.0fb2			zp1addnum
.0fb2	08		               php
.0fb3	48		               pha
.0fb4	18		               clc
.0fb5	65 fb		               adc  zpage1
.0fb7	90 02		               bcc  nocarry
.0fb9	e6 fc		               inc  zpage1+1
.0fbb	85 fb		nocarry        sta  zpage1
.0fbd	68		               pla
.0fbe	28		               plp
.0fbf	60		               rts
.0fc0			zp1add40
.0fc0	08		               php
.0fc1	48		               pha
.0fc2	18		               clc
.0fc3	a5 fb		               lda  zpage1
.0fc5	69 28		               adc  #40
.0fc7	90 02		               bcc  nocarry
.0fc9	e6 fc		               inc  zpage1+1
.0fcb	85 fb		nocarry        sta  zpage1
.0fcd	68		               pla
.0fce	28		               plp
.0fcf	60		               rts
.0fd0			delay
.0fd0	20 fd 1c	               jsr  push
.0fd3	a9 00		               lda  #$0
.0fd5	aa		               tax
.0fd6	a8		               tay
.0fd7	ca		xagain         dex
.0fd8	ca		               dex
.0fd9	88		yagain         dey
.0fda	c0 00		               cpy  #$00
.0fdc	d0 fb		               bne  yagain
.0fde	e0 00		               cpx  #$00
.0fe0	d0 f5		               bne  xagain
.0fe2	20 3c 1d	               jsr  pop
.0fe5	60		               rts
.0fe6			f1action
.0fe6	48		               pha
.0fe7	a9 ff		               lda  #$ff
.0fe9	8d d6 08	               sta  editmode
.0fec	ad d7 08	               lda  fkeyset
.0fef	d0 7a		               bne  menub
.0ff1	20 fd 1c	               jsr  push
.0ff4	a2 5e		               ldx  #<blankmsg
.0ff6	a0 16		               ldy  #>blankmsg
.0ff8	20 95 1c	               jsr  putscxy
.0ffb	a2 89		               ldx  #<f1a_msg
.0ffd	a0 16		               ldy  #>f1a_msg
.0fff	20 95 1c	               jsr  putscxy
.1002	20 3c 1d	               jsr  pop
.1005	08		               php
.1006	48		               pha
.1007	8a		               txa
.1008	48		               pha
.1009	ad 10 1a	               lda  f1abutton
.100c	48		               pha
.100d	a9 92		               lda  #146
.100f	8d 1f 1a	               sta  f1abutton+15
.1012	a9 01		               lda  #flashcol
.1014	8d 10 1a	               sta  f1abutton
.1017	a2 10		               ldx  #<f1abutton
.1019	a0 1a		               ldy  #>f1abutton
.101b	20 95 1c	               jsr  putscxy
.101e	20 d0 0f	               jsr  delay
.1021	a9 12		               lda  #18
.1023	8d 1f 1a	               sta  f1abutton+15
.1026	68		               pla
.1027	8d 10 1a	               sta  f1abutton
.102a	a2 10		               ldx  #<f1abutton
.102c	a0 1a		               ldy  #>f1abutton
.102e	20 95 1c	               jsr  putscxy
.1031	68		               pla
.1032	aa		               tax
.1033	68		               pla
.1034	28		               plp
.1035	20 5b 0b	               jsr  editor
.1038	20 fd 1c	               jsr  push
.103b	a2 5e		               ldx  #<blankmsg
.103d	a0 16		               ldy  #>blankmsg
.103f	20 95 1c	               jsr  putscxy
.1042	a2 66		               ldx  #<quit_msg
.1044	a0 18		               ldy  #>quit_msg
.1046	20 95 1c	               jsr  putscxy
.1049	20 3c 1d	               jsr  pop
.104c	20 fd 1c	               jsr  push
.104f	a2 5e		               ldx  #<blankmsg
.1051	a0 16		               ldy  #>blankmsg
.1053	20 95 1c	               jsr  putscxy
.1056	a2 30		               ldx  #<menua_msg
.1058	a0 18		               ldy  #>menua_msg
.105a	20 95 1c	               jsr  putscxy
.105d	20 3c 1d	               jsr  pop
.1060	a9 07		               lda  #menu1col
.1062	20 30 09	               jsr  setmenuacolor
.1065	20 69 0e	               jsr  showfkeys
.1068	4c b5 10	               jmp  out
.106b			menub
.106b	20 fd 1c	               jsr  push
.106e	a2 5e		               ldx  #<blankmsg
.1070	a0 16		               ldy  #>blankmsg
.1072	20 95 1c	               jsr  putscxy
.1075	a2 58		               ldx  #<f1b_msg
.1077	a0 17		               ldy  #>f1b_msg
.1079	20 95 1c	               jsr  putscxy
.107c	20 3c 1d	               jsr  pop
.107f	08		               php
.1080	48		               pha
.1081	8a		               txa
.1082	48		               pha
.1083	ad e0 1a	               lda  f1bbutton
.1086	48		               pha
.1087	a9 92		               lda  #146
.1089	8d ef 1a	               sta  f1bbutton+15
.108c	a9 01		               lda  #flashcol
.108e	8d e0 1a	               sta  f1bbutton
.1091	a2 e0		               ldx  #<f1bbutton
.1093	a0 1a		               ldy  #>f1bbutton
.1095	20 95 1c	               jsr  putscxy
.1098	20 d0 0f	               jsr  delay
.109b	a9 12		               lda  #18
.109d	8d ef 1a	               sta  f1bbutton+15
.10a0	68		               pla
.10a1	8d e0 1a	               sta  f1bbutton
.10a4	a2 e0		               ldx  #<f1bbutton
.10a6	a0 1a		               ldy  #>f1bbutton
.10a8	20 95 1c	               jsr  putscxy
.10ab	68		               pla
.10ac	aa		               tax
.10ad	68		               pla
.10ae	28		               plp
.10af	20 09 16	               jsr  flipvert
.10b2	20 fd 0c	               jsr  drawbitmap
.10b5	68		out            pla
.10b6	60		               rts
.10b7			f2action
.10b7	48		               pha
.10b8	a9 00		               lda  #$0
.10ba	8d d6 08	               sta  editmode
.10bd	ad d7 08	               lda  fkeyset
.10c0	d0 47		               bne  menub
.10c2	20 fd 1c	               jsr  push
.10c5	a2 5e		               ldx  #<blankmsg
.10c7	a0 16		               ldy  #>blankmsg
.10c9	20 95 1c	               jsr  putscxy
.10cc	a2 a4		               ldx  #<f2a_msg
.10ce	a0 16		               ldy  #>f2a_msg
.10d0	20 95 1c	               jsr  putscxy
.10d3	20 3c 1d	               jsr  pop
.10d6	08		               php
.10d7	48		               pha
.10d8	8a		               txa
.10d9	48		               pha
.10da	ad 2a 1a	               lda  f2abutton
.10dd	48		               pha
.10de	a9 92		               lda  #146
.10e0	8d 39 1a	               sta  f2abutton+15
.10e3	a9 01		               lda  #flashcol
.10e5	8d 2a 1a	               sta  f2abutton
.10e8	a2 2a		               ldx  #<f2abutton
.10ea	a0 1a		               ldy  #>f2abutton
.10ec	20 95 1c	               jsr  putscxy
.10ef	20 d0 0f	               jsr  delay
.10f2	a9 12		               lda  #18
.10f4	8d 39 1a	               sta  f2abutton+15
.10f7	68		               pla
.10f8	8d 2a 1a	               sta  f2abutton
.10fb	a2 2a		               ldx  #<f2abutton
.10fd	a0 1a		               ldy  #>f2abutton
.10ff	20 95 1c	               jsr  putscxy
.1102	68		               pla
.1103	aa		               tax
.1104	68		               pla
.1105	28		               plp
.1106	4c 53 11	               jmp  out
.1109			menub
.1109	20 fd 1c	               jsr  push
.110c	a2 5e		               ldx  #<blankmsg
.110e	a0 16		               ldy  #>blankmsg
.1110	20 95 1c	               jsr  putscxy
.1113	a2 71		               ldx  #<f2b_msg
.1115	a0 17		               ldy  #>f2b_msg
.1117	20 95 1c	               jsr  putscxy
.111a	20 3c 1d	               jsr  pop
.111d	08		               php
.111e	48		               pha
.111f	8a		               txa
.1120	48		               pha
.1121	ad fa 1a	               lda  f2bbutton
.1124	48		               pha
.1125	a9 92		               lda  #146
.1127	8d 09 1b	               sta  f2bbutton+15
.112a	a9 01		               lda  #flashcol
.112c	8d fa 1a	               sta  f2bbutton
.112f	a2 fa		               ldx  #<f2bbutton
.1131	a0 1a		               ldy  #>f2bbutton
.1133	20 95 1c	               jsr  putscxy
.1136	20 d0 0f	               jsr  delay
.1139	a9 12		               lda  #18
.113b	8d 09 1b	               sta  f2bbutton+15
.113e	68		               pla
.113f	8d fa 1a	               sta  f2bbutton
.1142	a2 fa		               ldx  #<f2bbutton
.1144	a0 1a		               ldy  #>f2bbutton
.1146	20 95 1c	               jsr  putscxy
.1149	68		               pla
.114a	aa		               tax
.114b	68		               pla
.114c	28		               plp
.114d	20 dc 15	               jsr  fliphorz
.1150	20 fd 0c	               jsr  drawbitmap
.1153	68		out            pla
.1154	60		               rts
.1155			f3action
.1155	48		               pha
.1156	a9 00		               lda  #$0
.1158	8d d6 08	               sta  editmode
.115b	ad d7 08	               lda  fkeyset
.115e	d0 47		               bne  menub
.1160	20 fd 1c	               jsr  push
.1163	a2 5e		               ldx  #<blankmsg
.1165	a0 16		               ldy  #>blankmsg
.1167	20 95 1c	               jsr  putscxy
.116a	a2 ca		               ldx  #<f3a_msg
.116c	a0 16		               ldy  #>f3a_msg
.116e	20 95 1c	               jsr  putscxy
.1171	20 3c 1d	               jsr  pop
.1174	08		               php
.1175	48		               pha
.1176	8a		               txa
.1177	48		               pha
.1178	ad 44 1a	               lda  f3abutton
.117b	48		               pha
.117c	a9 92		               lda  #146
.117e	8d 53 1a	               sta  f3abutton+15
.1181	a9 01		               lda  #flashcol
.1183	8d 44 1a	               sta  f3abutton
.1186	a2 44		               ldx  #<f3abutton
.1188	a0 1a		               ldy  #>f3abutton
.118a	20 95 1c	               jsr  putscxy
.118d	20 d0 0f	               jsr  delay
.1190	a9 12		               lda  #18
.1192	8d 53 1a	               sta  f3abutton+15
.1195	68		               pla
.1196	8d 44 1a	               sta  f3abutton
.1199	a2 44		               ldx  #<f3abutton
.119b	a0 1a		               ldy  #>f3abutton
.119d	20 95 1c	               jsr  putscxy
.11a0	68		               pla
.11a1	aa		               tax
.11a2	68		               pla
.11a3	28		               plp
.11a4	4c f1 11	               jmp  out
.11a7			menub
.11a7	20 fd 1c	               jsr  push
.11aa	a2 5e		               ldx  #<blankmsg
.11ac	a0 16		               ldy  #>blankmsg
.11ae	20 95 1c	               jsr  putscxy
.11b1	a2 8c		               ldx  #<f3b_msg
.11b3	a0 17		               ldy  #>f3b_msg
.11b5	20 95 1c	               jsr  putscxy
.11b8	20 3c 1d	               jsr  pop
.11bb	08		               php
.11bc	48		               pha
.11bd	8a		               txa
.11be	48		               pha
.11bf	ad 14 1b	               lda  f3bbutton
.11c2	48		               pha
.11c3	a9 92		               lda  #146
.11c5	8d 23 1b	               sta  f3bbutton+15
.11c8	a9 01		               lda  #flashcol
.11ca	8d 14 1b	               sta  f3bbutton
.11cd	a2 14		               ldx  #<f3bbutton
.11cf	a0 1b		               ldy  #>f3bbutton
.11d1	20 95 1c	               jsr  putscxy
.11d4	20 d0 0f	               jsr  delay
.11d7	a9 12		               lda  #18
.11d9	8d 23 1b	               sta  f3bbutton+15
.11dc	68		               pla
.11dd	8d 14 1b	               sta  f3bbutton
.11e0	a2 14		               ldx  #<f3bbutton
.11e2	a0 1b		               ldy  #>f3bbutton
.11e4	20 95 1c	               jsr  putscxy
.11e7	68		               pla
.11e8	aa		               tax
.11e9	68		               pla
.11ea	28		               plp
.11eb	20 a9 08	               jsr  scrollright
.11ee	20 fd 0c	               jsr  drawbitmap
.11f1	68		out            pla
.11f2	60		               rts
.11f3			f4action
.11f3	48		               pha
.11f4	a9 00		               lda  #$0
.11f6	8d d6 08	               sta  editmode
.11f9	ad d7 08	               lda  fkeyset
.11fc	d0 47		               bne  menub
.11fe	20 fd 1c	               jsr  push
.1201	a2 5e		               ldx  #<blankmsg
.1203	a0 16		               ldy  #>blankmsg
.1205	20 95 1c	               jsr  putscxy
.1208	a2 f1		               ldx  #<f4a_msg
.120a	a0 16		               ldy  #>f4a_msg
.120c	20 95 1c	               jsr  putscxy
.120f	20 3c 1d	               jsr  pop
.1212	08		               php
.1213	48		               pha
.1214	8a		               txa
.1215	48		               pha
.1216	ad 5e 1a	               lda  f4abutton
.1219	48		               pha
.121a	a9 92		               lda  #146
.121c	8d 6d 1a	               sta  f4abutton+15
.121f	a9 01		               lda  #flashcol
.1221	8d 5e 1a	               sta  f4abutton
.1224	a2 5e		               ldx  #<f4abutton
.1226	a0 1a		               ldy  #>f4abutton
.1228	20 95 1c	               jsr  putscxy
.122b	20 d0 0f	               jsr  delay
.122e	a9 12		               lda  #18
.1230	8d 6d 1a	               sta  f4abutton+15
.1233	68		               pla
.1234	8d 5e 1a	               sta  f4abutton
.1237	a2 5e		               ldx  #<f4abutton
.1239	a0 1a		               ldy  #>f4abutton
.123b	20 95 1c	               jsr  putscxy
.123e	68		               pla
.123f	aa		               tax
.1240	68		               pla
.1241	28		               plp
.1242	4c 8f 12	               jmp  out
.1245			menub
.1245	20 fd 1c	               jsr  push
.1248	a2 5e		               ldx  #<blankmsg
.124a	a0 16		               ldy  #>blankmsg
.124c	20 95 1c	               jsr  putscxy
.124f	a2 a1		               ldx  #<f4b_msg
.1251	a0 17		               ldy  #>f4b_msg
.1253	20 95 1c	               jsr  putscxy
.1256	20 3c 1d	               jsr  pop
.1259	08		               php
.125a	48		               pha
.125b	8a		               txa
.125c	48		               pha
.125d	ad 2e 1b	               lda  f4bbutton
.1260	48		               pha
.1261	a9 92		               lda  #146
.1263	8d 3d 1b	               sta  f4bbutton+15
.1266	a9 01		               lda  #flashcol
.1268	8d 2e 1b	               sta  f4bbutton
.126b	a2 2e		               ldx  #<f4bbutton
.126d	a0 1b		               ldy  #>f4bbutton
.126f	20 95 1c	               jsr  putscxy
.1272	20 d0 0f	               jsr  delay
.1275	a9 12		               lda  #18
.1277	8d 3d 1b	               sta  f4bbutton+15
.127a	68		               pla
.127b	8d 2e 1b	               sta  f4bbutton
.127e	a2 2e		               ldx  #<f4bbutton
.1280	a0 1b		               ldy  #>f4bbutton
.1282	20 95 1c	               jsr  putscxy
.1285	68		               pla
.1286	aa		               tax
.1287	68		               pla
.1288	28		               plp
.1289	20 30 16	               jsr  scrollleft
.128c	20 fd 0c	               jsr  drawbitmap
.128f	68		out            pla
.1290	60		               rts
.1291			f5action
.1291	48		               pha
.1292	a9 00		               lda  #$0
.1294	8d d6 08	               sta  editmode
.1297	ad d7 08	               lda  fkeyset
.129a	d0 4d		               bne  menub
.129c	20 fd 1c	               jsr  push
.129f	a2 5e		               ldx  #<blankmsg
.12a1	a0 16		               ldy  #>blankmsg
.12a3	20 95 1c	               jsr  putscxy
.12a6	a2 0e		               ldx  #<f5a_msg
.12a8	a0 17		               ldy  #>f5a_msg
.12aa	20 95 1c	               jsr  putscxy
.12ad	20 3c 1d	               jsr  pop
.12b0	08		               php
.12b1	48		               pha
.12b2	8a		               txa
.12b3	48		               pha
.12b4	ad 78 1a	               lda  f5abutton
.12b7	48		               pha
.12b8	a9 92		               lda  #146
.12ba	8d 87 1a	               sta  f5abutton+15
.12bd	a9 01		               lda  #flashcol
.12bf	8d 78 1a	               sta  f5abutton
.12c2	a2 78		               ldx  #<f5abutton
.12c4	a0 1a		               ldy  #>f5abutton
.12c6	20 95 1c	               jsr  putscxy
.12c9	20 d0 0f	               jsr  delay
.12cc	a9 12		               lda  #18
.12ce	8d 87 1a	               sta  f5abutton+15
.12d1	68		               pla
.12d2	8d 78 1a	               sta  f5abutton
.12d5	a2 78		               ldx  #<f5abutton
.12d7	a0 1a		               ldy  #>f5abutton
.12d9	20 95 1c	               jsr  putscxy
.12dc	68		               pla
.12dd	aa		               tax
.12de	68		               pla
.12df	28		               plp
.12e0	20 ba 15	               jsr  clearchar
.12e3	20 fd 0c	               jsr  drawbitmap
.12e6	4c 33 13	               jmp  out
.12e9			menub
.12e9	20 fd 1c	               jsr  push
.12ec	a2 5e		               ldx  #<blankmsg
.12ee	a0 16		               ldy  #>blankmsg
.12f0	20 95 1c	               jsr  putscxy
.12f3	a2 b5		               ldx  #<f5b_msg
.12f5	a0 17		               ldy  #>f5b_msg
.12f7	20 95 1c	               jsr  putscxy
.12fa	20 3c 1d	               jsr  pop
.12fd	08		               php
.12fe	48		               pha
.12ff	8a		               txa
.1300	48		               pha
.1301	ad 48 1b	               lda  f5bbutton
.1304	48		               pha
.1305	a9 92		               lda  #146
.1307	8d 57 1b	               sta  f5bbutton+15
.130a	a9 01		               lda  #flashcol
.130c	8d 48 1b	               sta  f5bbutton
.130f	a2 48		               ldx  #<f5bbutton
.1311	a0 1b		               ldy  #>f5bbutton
.1313	20 95 1c	               jsr  putscxy
.1316	20 d0 0f	               jsr  delay
.1319	a9 12		               lda  #18
.131b	8d 57 1b	               sta  f5bbutton+15
.131e	68		               pla
.131f	8d 48 1b	               sta  f5bbutton
.1322	a2 48		               ldx  #<f5bbutton
.1324	a0 1b		               ldy  #>f5bbutton
.1326	20 95 1c	               jsr  putscxy
.1329	68		               pla
.132a	aa		               tax
.132b	68		               pla
.132c	28		               plp
.132d	20 3c 15	               jsr  scrollup
.1330	20 fd 0c	               jsr  drawbitmap
.1333	68		out            pla
.1334	60		               rts
.1335			f6action
.1335	48		               pha
.1336	a9 00		               lda  #$0
.1338	8d d6 08	               sta  editmode
.133b	ad d7 08	               lda  fkeyset
.133e	d0 4d		               bne  menub
.1340	20 fd 1c	               jsr  push
.1343	a2 5e		               ldx  #<blankmsg
.1345	a0 16		               ldy  #>blankmsg
.1347	20 95 1c	               jsr  putscxy
.134a	a2 28		               ldx  #<f6a_msg
.134c	a0 17		               ldy  #>f6a_msg
.134e	20 95 1c	               jsr  putscxy
.1351	20 3c 1d	               jsr  pop
.1354	08		               php
.1355	48		               pha
.1356	8a		               txa
.1357	48		               pha
.1358	ad 92 1a	               lda  f6abutton
.135b	48		               pha
.135c	a9 92		               lda  #146
.135e	8d a1 1a	               sta  f6abutton+15
.1361	a9 01		               lda  #flashcol
.1363	8d 92 1a	               sta  f6abutton
.1366	a2 92		               ldx  #<f6abutton
.1368	a0 1a		               ldy  #>f6abutton
.136a	20 95 1c	               jsr  putscxy
.136d	20 d0 0f	               jsr  delay
.1370	a9 12		               lda  #18
.1372	8d a1 1a	               sta  f6abutton+15
.1375	68		               pla
.1376	8d 92 1a	               sta  f6abutton
.1379	a2 92		               ldx  #<f6abutton
.137b	a0 1a		               ldy  #>f6abutton
.137d	20 95 1c	               jsr  putscxy
.1380	68		               pla
.1381	aa		               tax
.1382	68		               pla
.1383	28		               plp
.1384	20 ae 15	               jsr  fillchar
.1387	20 fd 0c	               jsr  drawbitmap
.138a	4c d7 13	               jmp  out
.138d			menub
.138d	20 fd 1c	               jsr  push
.1390	a2 5e		               ldx  #<blankmsg
.1392	a0 16		               ldy  #>blankmsg
.1394	20 95 1c	               jsr  putscxy
.1397	a2 c7		               ldx  #<f6b_msg
.1399	a0 17		               ldy  #>f6b_msg
.139b	20 95 1c	               jsr  putscxy
.139e	20 3c 1d	               jsr  pop
.13a1	08		               php
.13a2	48		               pha
.13a3	8a		               txa
.13a4	48		               pha
.13a5	ad 62 1b	               lda  f6bbutton
.13a8	48		               pha
.13a9	a9 92		               lda  #146
.13ab	8d 71 1b	               sta  f6bbutton+15
.13ae	a9 01		               lda  #flashcol
.13b0	8d 62 1b	               sta  f6bbutton
.13b3	a2 62		               ldx  #<f6bbutton
.13b5	a0 1b		               ldy  #>f6bbutton
.13b7	20 95 1c	               jsr  putscxy
.13ba	20 d0 0f	               jsr  delay
.13bd	a9 12		               lda  #18
.13bf	8d 71 1b	               sta  f6bbutton+15
.13c2	68		               pla
.13c3	8d 62 1b	               sta  f6bbutton
.13c6	a2 62		               ldx  #<f6bbutton
.13c8	a0 1b		               ldy  #>f6bbutton
.13ca	20 95 1c	               jsr  putscxy
.13cd	68		               pla
.13ce	aa		               tax
.13cf	68		               pla
.13d0	28		               plp
.13d1	20 74 15	               jsr  scrolldown
.13d4	20 fd 0c	               jsr  drawbitmap
.13d7	68		out            pla
.13d8	60		               rts
.13d9			f7action
.13d9	48		               pha
.13da	a9 00		               lda  #$0
.13dc	8d d6 08	               sta  editmode
.13df	ad d7 08	               lda  fkeyset
.13e2	d0 47		               bne  menub
.13e4	20 fd 1c	               jsr  push
.13e7	a2 5e		               ldx  #<blankmsg
.13e9	a0 16		               ldy  #>blankmsg
.13eb	20 95 1c	               jsr  putscxy
.13ee	a2 42		               ldx  #<f7a_msg
.13f0	a0 17		               ldy  #>f7a_msg
.13f2	20 95 1c	               jsr  putscxy
.13f5	20 3c 1d	               jsr  pop
.13f8	08		               php
.13f9	48		               pha
.13fa	8a		               txa
.13fb	48		               pha
.13fc	ad ac 1a	               lda  f7abutton
.13ff	48		               pha
.1400	a9 92		               lda  #146
.1402	8d bb 1a	               sta  f7abutton+15
.1405	a9 01		               lda  #flashcol
.1407	8d ac 1a	               sta  f7abutton
.140a	a2 ac		               ldx  #<f7abutton
.140c	a0 1a		               ldy  #>f7abutton
.140e	20 95 1c	               jsr  putscxy
.1411	20 d0 0f	               jsr  delay
.1414	a9 12		               lda  #18
.1416	8d bb 1a	               sta  f7abutton+15
.1419	68		               pla
.141a	8d ac 1a	               sta  f7abutton
.141d	a2 ac		               ldx  #<f7abutton
.141f	a0 1a		               ldy  #>f7abutton
.1421	20 95 1c	               jsr  putscxy
.1424	68		               pla
.1425	aa		               tax
.1426	68		               pla
.1427	28		               plp
.1428	4c 7a 14	               jmp  out
.142b	a9 00		menub          lda  #$0
.142d	8d d6 08	               sta  editmode
.1430	20 fd 1c	               jsr  push
.1433	a2 5e		               ldx  #<blankmsg
.1435	a0 16		               ldy  #>blankmsg
.1437	20 95 1c	               jsr  putscxy
.143a	a2 db		               ldx  #<f7b_msg
.143c	a0 17		               ldy  #>f7b_msg
.143e	20 95 1c	               jsr  putscxy
.1441	20 3c 1d	               jsr  pop
.1444	08		               php
.1445	48		               pha
.1446	8a		               txa
.1447	48		               pha
.1448	ad 7c 1b	               lda  f7bbutton
.144b	48		               pha
.144c	a9 92		               lda  #146
.144e	8d 8b 1b	               sta  f7bbutton+15
.1451	a9 01		               lda  #flashcol
.1453	8d 7c 1b	               sta  f7bbutton
.1456	a2 7c		               ldx  #<f7bbutton
.1458	a0 1b		               ldy  #>f7bbutton
.145a	20 95 1c	               jsr  putscxy
.145d	20 d0 0f	               jsr  delay
.1460	a9 12		               lda  #18
.1462	8d 8b 1b	               sta  f7bbutton+15
.1465	68		               pla
.1466	8d 7c 1b	               sta  f7bbutton
.1469	a2 7c		               ldx  #<f7bbutton
.146b	a0 1b		               ldy  #>f7bbutton
.146d	20 95 1c	               jsr  putscxy
.1470	68		               pla
.1471	aa		               tax
.1472	68		               pla
.1473	28		               plp
.1474	20 1c 15	               jsr  reverse
.1477	20 fd 0c	               jsr  drawbitmap
.147a	68		out            pla
.147b	60		               rts
.147c			f8action
.147c	48		               pha
.147d	a9 00		               lda  #$0
.147f	8d d6 08	               sta  editmode
.1482	ad d7 08	               lda  fkeyset
.1485	d0 47		               bne  menub
.1487	20 fd 1c	               jsr  push
.148a	a2 5e		               ldx  #<blankmsg
.148c	a0 16		               ldy  #>blankmsg
.148e	20 95 1c	               jsr  putscxy
.1491	a2 4b		               ldx  #<menub_msg
.1493	a0 18		               ldy  #>menub_msg
.1495	20 95 1c	               jsr  putscxy
.1498	20 3c 1d	               jsr  pop
.149b	08		               php
.149c	48		               pha
.149d	8a		               txa
.149e	48		               pha
.149f	ad c6 1a	               lda  f8abutton
.14a2	48		               pha
.14a3	a9 92		               lda  #146
.14a5	8d d5 1a	               sta  f8abutton+15
.14a8	a9 01		               lda  #flashcol
.14aa	8d c6 1a	               sta  f8abutton
.14ad	a2 c6		               ldx  #<f8abutton
.14af	a0 1a		               ldy  #>f8abutton
.14b1	20 95 1c	               jsr  putscxy
.14b4	20 d0 0f	               jsr  delay
.14b7	a9 12		               lda  #18
.14b9	8d d5 1a	               sta  f8abutton+15
.14bc	68		               pla
.14bd	8d c6 1a	               sta  f8abutton
.14c0	a2 c6		               ldx  #<f8abutton
.14c2	a0 1a		               ldy  #>f8abutton
.14c4	20 95 1c	               jsr  putscxy
.14c7	68		               pla
.14c8	aa		               tax
.14c9	68		               pla
.14ca	28		               plp
.14cb	4c 12 15	               jmp  swapit
.14ce			menub
.14ce	20 fd 1c	               jsr  push
.14d1	a2 5e		               ldx  #<blankmsg
.14d3	a0 16		               ldy  #>blankmsg
.14d5	20 95 1c	               jsr  putscxy
.14d8	a2 30		               ldx  #<menua_msg
.14da	a0 18		               ldy  #>menua_msg
.14dc	20 95 1c	               jsr  putscxy
.14df	20 3c 1d	               jsr  pop
.14e2	08		               php
.14e3	48		               pha
.14e4	8a		               txa
.14e5	48		               pha
.14e6	ad 96 1b	               lda  f8bbutton
.14e9	48		               pha
.14ea	a9 92		               lda  #146
.14ec	8d a5 1b	               sta  f8bbutton+15
.14ef	a9 01		               lda  #flashcol
.14f1	8d 96 1b	               sta  f8bbutton
.14f4	a2 96		               ldx  #<f8bbutton
.14f6	a0 1b		               ldy  #>f8bbutton
.14f8	20 95 1c	               jsr  putscxy
.14fb	20 d0 0f	               jsr  delay
.14fe	a9 12		               lda  #18
.1500	8d a5 1b	               sta  f8bbutton+15
.1503	68		               pla
.1504	8d 96 1b	               sta  f8bbutton
.1507	a2 96		               ldx  #<f8bbutton
.1509	a0 1b		               ldy  #>f8bbutton
.150b	20 95 1c	               jsr  putscxy
.150e	68		               pla
.150f	aa		               tax
.1510	68		               pla
.1511	28		               plp
.1512	49 ff		swapit         eor  #$ff
.1514	8d d7 08	               sta  fkeyset
.1517	20 69 0e	               jsr  showfkeys
.151a	68		               pla
.151b	60		               rts
.151c			reverse
.151c	20 fd 1c	               jsr  push
.151f	48		               pha
.1520	ad db 08	               lda  mapaddr
.1523	85 fd		               sta  $fd
.1525	ad dc 08	               lda  mapaddr+1
.1528	85 fe		               sta  $fe
.152a	68		               pla
.152b	a0 00		               ldy  #$00
.152d	b1 fd		again          lda  (zpage2),y
.152f	49 ff		               eor  #$ff
.1531	91 fd		               sta  (zpage2),y
.1533	c8		               iny
.1534	c0 08		               cpy  #$08
.1536	d0 f5		               bne  again
.1538	20 3c 1d	               jsr  pop
.153b	60		               rts
.153c			scrollup
.153c	20 fd 1c	               jsr  push
.153f	48		               pha
.1540	ad db 08	               lda  mapaddr
.1543	85 fb		               sta  $fb
.1545	ad dc 08	               lda  mapaddr+1
.1548	85 fc		               sta  $fc
.154a	68		               pla
.154b	48		               pha
.154c	ad db 08	               lda  mapaddr
.154f	85 fd		               sta  $fd
.1551	ad dc 08	               lda  mapaddr+1
.1554	85 fe		               sta  $fe
.1556	68		               pla
.1557	20 1c 1e	               jsr  inczp2
.155a	a0 00		               ldy  #$00
.155c	b1 fb		               lda  (zpage1),y
.155e	8d 73 15	               sta  tmpbyte
.1561	b1 fd		again          lda  (zpage2),y
.1563	91 fb		               sta  (zpage1),y
.1565	c8		               iny
.1566	c0 07		               cpy  #$07
.1568	d0 f7		               bne  again
.156a	ad 73 15	               lda  tmpbyte
.156d	91 fb		               sta  (zpage1),y
.156f	20 3c 1d	               jsr  pop
.1572	60		               rts
>1573	00		tmpbyte        .byte     $00
.1574			scrolldown
.1574	20 fd 1c	               jsr  push
.1577	48		               pha
.1578	ad db 08	               lda  mapaddr
.157b	85 fb		               sta  $fb
.157d	ad dc 08	               lda  mapaddr+1
.1580	85 fc		               sta  $fc
.1582	68		               pla
.1583	48		               pha
.1584	ad db 08	               lda  mapaddr
.1587	85 fd		               sta  $fd
.1589	ad dc 08	               lda  mapaddr+1
.158c	85 fe		               sta  $fe
.158e	68		               pla
.158f	20 1c 1e	               jsr  inczp2
.1592	a0 07		               ldy  #$07                ;xxxxxxxx zpage1
.1594	b1 fb		               lda  (zpage1),y          ;xxxxxxxx zpage2
.1596	8d ad 15	               sta  tmpbyte             ;xxxxxxxx
.1599	88		again          dey                      ;xxxxxxxx
.159a	b1 fb		               lda  (zpage1),y          ;xxxxxxxx
.159c	91 fd		               sta  (zpage2),y          ;xxxxxxxx
.159e	c0 00		               cpy  #$00                ;xxxxxxxx
.15a0	d0 f7		               bne  again               ;xxxxxxxx
.15a2	a0 00		               ldy  #$00
.15a4	ad ad 15	               lda  tmpbyte
.15a7	91 fb		               sta  (zpage1),y
.15a9	20 3c 1d	               jsr  pop
.15ac	60		               rts
>15ad	00		tmpbyte        .byte     $00
.15ae			fillchar
.15ae	20 fd 1c	               jsr  push
.15b1	a9 ff		               lda  #$ff
.15b3	20 c6 15	               jsr  allsame
.15b6	20 3c 1d	               jsr  pop
.15b9	60		               rts
.15ba			clearchar
.15ba	20 fd 1c	               jsr  push
.15bd	a9 00		               lda  #$00
.15bf	20 c6 15	               jsr  allsame
.15c2	20 3c 1d	               jsr  pop
.15c5	60		               rts
.15c6			allsame
.15c6	48		               pha
.15c7	ad db 08	               lda  mapaddr
.15ca	85 fd		               sta  $fd
.15cc	ad dc 08	               lda  mapaddr+1
.15cf	85 fe		               sta  $fe
.15d1	68		               pla
.15d2	a0 00		               ldy  #$00
.15d4	91 fd		again          sta  (zpage2),y
.15d6	c8		               iny
.15d7	c0 08		               cpy  #$08
.15d9	d0 f9		               bne  again
.15db	60		               rts
.15dc			fliphorz
.15dc	20 fd 1c	               jsr  push
.15df	48		               pha
.15e0	ad db 08	               lda  mapaddr
.15e3	85 fd		               sta  $fd
.15e5	ad dc 08	               lda  mapaddr+1
.15e8	85 fe		               sta  $fe
.15ea	68		               pla
.15eb	a0 00		               ldy  #$00
.15ed	b1 fd		nextbyte       lda  (zpage2),y
.15ef	a2 00		               ldx  #$00
.15f1	2a		rolagain       rol
.15f2	6e 08 16	               ror  tmpbyte
.15f5	e8		               inx
.15f6	e0 08		               cpx  #$08
.15f8	30 f7		               bmi  rolagain
.15fa	ad 08 16	               lda  tmpbyte
.15fd	91 fd		               sta  (zpage2),y
.15ff	c8		               iny
.1600	c0 08		               cpy  #$08
.1602	30 e9		               bmi  nextbyte
.1604	20 3c 1d	               jsr  pop
.1607	60		               rts
>1608	00		tmpbyte        .byte     $00
.1609			flipvert
.1609	20 fd 1c	               jsr  push
.160c	48		               pha
.160d	ad db 08	               lda  mapaddr
.1610	85 fd		               sta  $fd
.1612	ad dc 08	               lda  mapaddr+1
.1615	85 fe		               sta  $fe
.1617	68		               pla
.1618	a0 00		               ldy  #$00
.161a	b1 fd		tostack        lda  (zpage2),y
.161c	48		               pha
.161d	c8		               iny
.161e	c0 08		               cpy  #$08
.1620	d0 f8		               bne  tostack
.1622	a0 00		               ldy  #$00
.1624	68		fromstack      pla
.1625	91 fd		               sta  (zpage2),y
.1627	c8		               iny
.1628	c0 08		               cpy  #$08
.162a	d0 f8		               bne  fromstack
.162c	20 3c 1d	               jsr  pop
.162f	60		               rts
.1630			scrollleft
.1630	20 fd 1c	               jsr  push
.1633	48		               pha
.1634	ad db 08	               lda  mapaddr
.1637	85 fb		               sta  $fb
.1639	ad dc 08	               lda  mapaddr+1
.163c	85 fc		               sta  $fc
.163e	68		               pla
.163f	a0 00		               ldy  #$00
.1641	b1 fb		again          lda  (zpage1),y
.1643	18		               clc
.1644	2a		               rol
.1645	69 00		               adc  #$00
.1647	91 fb		               sta  (zpage1),y
.1649	c8		               iny
.164a	c0 08		               cpy  #$08
.164c	d0 f3		               bne  again
.164e	20 3c 1d	               jsr  pop
.1651	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: messages.asm

>1652	0a 01 05	editor_msg     .byte vrose,1,5
>1655	5b 45 44 49	               .null     "[editor]"
>1659	54 4f 52 5d 00
>165e	03 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>1662	20 20 20 20	               .null     "                                      "
>1666	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1676	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1686	20 20 00
.1689			f1a_msg
>1689	03 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>168d	20 45 44 49	               .null     " edit mode: chr$(   )",146
>1691	54 20 4d 4f 44 45 3a 20 43 48 52 24 28 20 20 20
>16a1	29 92 00
.16a4			f2a_msg
>16a4	03 00 05 92	save_msg       .byte     mesgcol,0,5,146
>16a8	20 53 41 56	               .null     " save on cassette or disk? (c/d):"
>16ac	45 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>16bc	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.16ca			f3a_msg
>16ca	03 00 05	load_msg       .byte     mesgcol,0,5
>16cd	20 4c 4f 41	               .null     " load from cassette or disk? (c/d):"
>16d1	44 20 46 52 4f 4d 20 43 41 53 53 45 54 54 45 20
>16e1	4f 52 20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.16f1			f4a_msg
>16f1	03 00 05	copy_msg       .byte     mesgcol,0,5
>16f4	20 45 4e 54	               .null     " enter character to copy:"
>16f8	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>1708	43 4f 50 59 3a 00
.170e			f5a_msg
>170e	03 00 05	clear_msg      .byte     mesgcol,0,5
>1711	20 43 4c 45	               .null     " clear char: chr$(   )"
>1715	41 52 20 43 48 41 52 3a 20 43 48 52 24 28 20 20
>1725	20 29 00
.1728			f6a_msg
>1728	03 00 05	fill_msg       .byte     mesgcol,0,5
>172b	20 46 49 4c	               .null     " fill char:  chr$(   )"
>172f	4c 20 43 48 41 52 3a 20 20 43 48 52 24 28 20 20
>173f	20 29 00
.1742			f7a_msg
>1742	03 00 05	work_msg       .byte     mesgcol,0,5
>1745	20 45 4e 41	               .null     " enable work space"
>1749	42 4c 45 20 57 4f 52 4b 20 53 50 41 43 45 00
.1758			f1b_msg
>1758	03 00 05	invr_msg       .byte     mesgcol,0,5
>175b	20 46 4c 49	               .null     " flipping vertically:"
>175f	50 50 49 4e 47 20 56 45 52 54 49 43 41 4c 4c 59
>176f	3a 00
.1771			f2b_msg
>1771	03 00 05	flip_msg       .byte     mesgcol,0,5
>1774	20 46 4c 49	               .null     " flipping horizontally:"
>1778	50 50 49 4e 47 20 48 4f 52 49 5a 4f 4e 54 41 4c
>1788	4c 59 3a 00
.178c			f3b_msg
>178c	03 00 05	scrollr_msg    .byte     mesgcol,0,5
>178f	20 53 43 52	               .null     " scrolling right:"
>1793	4f 4c 4c 49 4e 47 20 52 49 47 48 54 3a 00
.17a1			f4b_msg
>17a1	03 00 05	scrolll_msg    .byte     mesgcol,0,5
>17a4	20 53 43 52	               .null     " scrolling left:"
>17a8	4f 4c 4c 49 4e 47 20 4c 45 46 54 3a 00
.17b5			f5b_msg
>17b5	03 00 05	scrollu_msg    .byte     mesgcol,0,5
>17b8	20 53 43 52	               .null     " scrolling up:"
>17bc	4f 4c 4c 49 4e 47 20 55 50 3a 00
.17c7			f6b_msg
>17c7	03 00 05	scrolld_msg    .byte     mesgcol,0,5
>17ca	20 53 43 52	               .null     " scrolling down:"
>17ce	4f 4c 4c 49 4e 47 20 44 4f 57 4e 3a 00
.17db			f7b_msg
>17db	03 00 05	rvrs_msg       .byte     mesgcol,0,5
>17de	20 52 45 56	               .null     " reverse character:"
>17e2	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
>17f2	03 00 05	save_fname_msg .byte     mesgcol,0,5
>17f5	20 53 41 56	               .null     " save: file name ------.chr"
>17f9	45 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>1809	2d 2d 2d 2e 43 48 52 00
>1811	03 00 05	load_fname_msg .byte     mesgcol,0,5
>1814	20 4c 4f 41	               .null     " load: file name ------.chr"
>1818	44 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>1828	2d 2d 2d 2e 43 48 52 00
>1830	03 00 05	menua_msg      .byte     mesgcol,0,5
>1833	20 59 4f 55	               .null     " you are now in menu a."
>1837	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>1847	20 41 2e 00
>184b	03 00 05	menub_msg      .byte     mesgcol,0,5
>184e	20 59 4f 55	               .null     " you are now in menu b."
>1852	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>1862	20 42 2e 00
>1866	0e 15 18 12	quit_msg       .byte     vblue1,21,24,18
>186a	43 54 52 4c	               .text     "ctrl-x",146
>186e	2d 58 92
>1871	20 54 4f 20	               .null     " to quit."
>1875	51 55 49 54 2e 00
>187b	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>187f	43 54 52 4c	               .text     "ctrl-x",146
>1883	2d 58 92
>1886	20 54 4f 20	               .null     " to menu."
>188a	4d 45 4e 55 2e 00
=$07			whoamicol       =    vjaune
>1890	07 04 06 12	whoami0        .byte     whoamicol,4,6,18
>1894	20 20 20 20	               .null     "                               "
>1898	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>18a8	20 20 20 20 20 20 20 20 20 20 20 00
>18b4	07 04 07 12	whoami1        .byte     whoamicol,4,7,18
>18b8	20 20 20 20	               .null     "           charedit            "
>18bc	20 20 20 20 20 20 20 43 48 41 52 45 44 49 54 20
>18cc	20 20 20 20 20 20 20 20 20 20 20 00
>18d8	07 04 08 12	whoami2        .byte     whoamicol,4,8,18
>18dc	20 20 20 20	               .null     "                               "
>18e0	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>18f0	20 20 20 20 20 20 20 20 20 20 20 00
>18fc	07 04 09 12	whoami3        .byte     whoamicol,4,9,18
>1900	20 20 49 4e	               .null     "  inspired from john heilborn  "
>1904	53 50 49 52 45 44 20 46 52 4f 4d 20 4a 4f 48 4e
>1914	20 48 45 49 4c 42 4f 52 4e 20 20 00
>1920	07 04 0a 12	whoami4        .byte     whoamicol,4,10,18
>1924	20 20 20 20	               .null     "      isbn: 0-942386-29-9      "
>1928	20 20 49 53 42 4e 3a 20 30 2d 39 34 32 33 38 36
>1938	2d 32 39 2d 39 20 20 20 20 20 20 00
>1944	07 04 0b 12	whoami5        .byte     whoamicol,4,11,18
>1948	20 20 20 20	               .null     "                               "
>194c	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>195c	20 20 20 20 20 20 20 20 20 20 20 00
>1968	07 04 0c 12	whoami6        .byte     whoamicol,4,12,18
>196c	20 43 4f 44	               .null     " coded in assembly language by "
>1970	45 44 20 49 4e 20 41 53 53 45 4d 42 4c 59 20 4c
>1980	41 4e 47 55 41 47 45 20 42 59 20 00
>198c	07 04 0d 12	whoami7        .byte     whoamicol,4,13,18
>1990	20 20 20 20	               .null     "     daniel lafrance 2023      "
>1994	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>19a4	20 32 30 32 33 20 20 20 20 20 20 00
>19b0	07 04 0e 12	whoami8        .byte     whoamicol,4,14,18
>19b4	20 20 20 20	               .null     "                               "
>19b8	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>19c8	20 20 20 20 20 20 20 20 20 20 20 00
>19d4	03 06 10 12	bye_msg        .byte     vcyan,6,16,18
>19d8	20 54 48 41	               .null     " thanks and have a good day ",146
>19dc	4e 4b 53 20 41 4e 44 20 48 41 56 45 20 41 20 47
>19ec	4f 4f 44 20 44 41 59 20 92 00
>19f6	0d 0a 18 12	any_msg        .byte     vvert1,10,24,18
>19fa	20 20 41 4e	               .null         "  any key to basic  ",146
>19fe	59 20 4b 45 59 20 54 4f 20 42 41 53 49 43 20 20
>1a0e	92 00
=18			fkeyleft=18
=8			f1top=8
>1a10	07 12 08	f1abutton      .byte     menu1col,fkeyleft,f1top       ;133
>1a13	45 44 49 54	               .text     "edit........"
>1a17	2e 2e 2e 2e 2e 2e 2e 2e
>1a1f	12		               .byte     18             ; position 15
>1a20	a9 20 20 46	               .text     $a9,"  f1  ",223
>1a24	31 20 20 df
>1a28	92 00		               .byte     146,0
>1a2a	07 12 09	f2abutton      .byte     menu1col,fkeyleft,f1top+1     ;137
>1a2d	53 41 56 45	               .text     "save........"
>1a31	2e 2e 2e 2e 2e 2e 2e 2e
>1a39	12		               .byte     18            ; position 15
>1a3a	20 20 20 46	               .text     "   f2   "
>1a3e	32 20 20 20
>1a42	92 00		               .byte     146,0
>1a44	07 12 0b	f3abutton      .byte     menu1col,fkeyleft,f1top+3     ;134
>1a47	4c 4f 41 44	               .text     "load........"
>1a4b	2e 2e 2e 2e 2e 2e 2e 2e
>1a53	12		               .byte     18             ; position 15
>1a54	a9 20 20 46	               .text     $a9,"  f3  ",223
>1a58	33 20 20 df
>1a5c	92 00		               .byte     146,0
>1a5e	07 12 0c	f4abutton      .byte     menu1col,fkeyleft,f1top+4     ;138
>1a61	43 4f 50 59	               .text     "copy........"
>1a65	2e 2e 2e 2e 2e 2e 2e 2e
>1a6d	12		               .byte     18             ; position 15
>1a6e	20 20 20 46	               .text     "   f4   "
>1a72	34 20 20 20
>1a76	92 00		               .byte     146,0
>1a78	07 12 0e	f5abutton      .byte     menu1col,fkeyleft,f1top+6     ;135
>1a7b	43 4c 45 41	               .text     "clear......."
>1a7f	52 2e 2e 2e 2e 2e 2e 2e
>1a87	12		               .byte     18             ; position 15
>1a88	a9 20 20 46	               .text     $a9,"  f5  ",223
>1a8c	35 20 20 df
>1a90	92 00		               .byte     146,0
>1a92	07 12 0f	f6abutton      .byte     menu1col,fkeyleft,f1top+7    ;139
>1a95	46 49 4c 4c	               .text     "fill........"
>1a99	2e 2e 2e 2e 2e 2e 2e 2e
>1aa1	12		               .byte     18             ; position 15
>1aa2	20 20 20 46	               .text     "   f6   "
>1aa6	36 20 20 20
>1aaa	92 00		               .byte     146,0
>1aac	07 12 11	f7abutton      .byte     menu1col,fkeyleft,f1top+9    ;136
>1aaf	57 4f 52 4b	               .text     "work........"
>1ab3	2e 2e 2e 2e 2e 2e 2e 2e
>1abb	12		               .byte     18             ; position 15
>1abc	a9 20 20 46	               .text     $a9,"  f7  ",223
>1ac0	37 20 20 df
>1ac4	92 00		               .byte     146,0
>1ac6	07 12 12	f8abutton      .byte     menu1col,fkeyleft,f1top+10
>1ac9	46 55 4e 43	               .text     "function...."
>1acd	54 49 4f 4e 2e 2e 2e 2e
>1ad5	12		               .byte     18             ; position 15
>1ad6	20 20 20 46	               .text     "   f8   "
>1ada	38 20 20 20
>1ade	92 00		               .byte     146,0
>1ae0	0d 12 08	f1bbutton      .byte     menu2col,fkeyleft,f1top
>1ae3	46 4c 49 50	               .text     "flip vert..."
>1ae7	20 56 45 52 54 2e 2e 2e
>1aef	12		               .byte     18             ; position 15
>1af0	a9 20 20 46	               .text     $a9,"  f1  ",223
>1af4	31 20 20 df
>1af8	92 00		               .byte     146,0
>1afa	0d 12 09	f2bbutton      .byte     menu2col,fkeyleft,f1top+1
>1afd	46 4c 49 50	               .text     "flip horz..."
>1b01	20 48 4f 52 5a 2e 2e 2e
>1b09	12		               .byte     18             ; position 15
>1b0a	20 20 20 46	               .text     "   f2   "
>1b0e	32 20 20 20
>1b12	92 00		               .byte     146,0
>1b14	0d 12 0b	f3bbutton      .byte     menu2col,fkeyleft,f1top+3
>1b17	53 43 52 4f	               .text     "scroll r...."
>1b1b	4c 4c 20 52 2e 2e 2e 2e
>1b23	12		               .byte     18             ; position 15
>1b24	a9 20 20 46	               .text     $a9,"  f3  ",223
>1b28	33 20 20 df
>1b2c	92 00		               .byte     146,0
>1b2e	0d 12 0c	f4bbutton      .byte     menu2col,fkeyleft,f1top+4
>1b31	53 43 52 4f	               .text     "scroll l...."
>1b35	4c 4c 20 4c 2e 2e 2e 2e
>1b3d	12		               .byte     18             ; position 15
>1b3e	20 20 20 46	               .text     "   f4   "
>1b42	34 20 20 20
>1b46	92 00		               .byte     146,0
>1b48	0d 12 0e	f5bbutton      .byte     menu2col,fkeyleft,f1top+6
>1b4b	53 43 52 4f	               .text     "scroll u...."
>1b4f	4c 4c 20 55 2e 2e 2e 2e
>1b57	12		               .byte     18             ; position 15
>1b58	a9 20 20 46	               .text     $a9,"  f5  ",223
>1b5c	35 20 20 df
>1b60	92 00		               .byte     146,0
>1b62	0d 12 0f	f6bbutton      .byte     menu2col,fkeyleft,f1top+7
>1b65	53 43 52 4f	               .text     "scroll d...."
>1b69	4c 4c 20 44 2e 2e 2e 2e
>1b71	12		               .byte     18             ; position 15
>1b72	20 20 20 46	               .text     "   f6   "
>1b76	36 20 20 20
>1b7a	92 00		               .byte     146,0
>1b7c	0d 12 11	f7bbutton      .byte     menu2col,fkeyleft,f1top+9
>1b7f	52 45 56 45	               .text     "reverse....."
>1b83	52 53 45 2e 2e 2e 2e 2e
>1b8b	12		               .byte     18             ; position 15
>1b8c	a9 20 20 46	               .text     $a9,"  f7  ",223
>1b90	37 20 20 df
>1b94	92 00		               .byte     146,0
>1b96	0d 12 12	f8bbutton      .byte     menu2col,fkeyleft,f1top+10
>1b99	46 55 4e 43	               .text     "function...."
>1b9d	54 49 4f 4e 2e 2e 2e 2e
>1ba5	12		               .byte     18             ; position 15
>1ba6	20 20 20 46	               .text     "   f8   "
>1baa	38 20 20 20
>1bae	92 00		               .byte     146,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.1bb0			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.1bb0			screendis
.1bb0	08		               php
.1bb1	48		               pha
.1bb2	ad 11 d0	               lda  $d011
.1bb5	29 ef		               and  #%11101111
.1bb7	8d 11 d0	               sta  $d011
.1bba	68		               pla
.1bbb	28		               plp
.1bbc	60		               rts
.1bbd			screenena
.1bbd	08		               php
.1bbe	48		               pha
.1bbf	ad 11 d0	               lda  $d011
.1bc2	09 10		               ora  #%00010000
.1bc4	8d 11 d0	               sta  $d011
.1bc7	68		               pla
.1bc8	28		               plp
.1bc9	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.1bca			scrmaninit
.1bca	20 fd 1c	               jsr  push
.1bcd	a9 06		               lda  #vbleu
.1bcf	8d 21 d0	               sta  vicbackcol
.1bd2	a9 05		               lda  #vvert
.1bd4	8d 20 d0	               sta  vicbordcol
.1bd7	a9 01		               lda  #vblanc
.1bd9	8d 86 02	               sta  bascol
.1bdc	ad 00 04	               lda  scrnram
.1bdf	8d 00 04	               sta  scrnram
.1be2	20 ea 1b	               jsr  cls
.1be5	20 3c 1d	               jsr  pop
.1be8	60		               rts
>1be9	8e		characterset   .byte b_uppercase
.1bea			cls
.1bea	08		               php
.1beb	48		               pha
.1bec	a9 93		               lda  #$93
.1bee	20 06 1c	               jsr  putch
.1bf1	a9 0e		               lda  #$0e
.1bf3	20 06 1c	               jsr  putch
.1bf6	68		               pla
.1bf7	28		               plp
.1bf8	60		               rts
.1bf9			putnch
.1bf9	08		               php
.1bfa	e0 00		               cpx  #$00
.1bfc	f0 06		               beq  out
.1bfe	20 d2 ff	again          jsr  $ffd2
.1c01	ca		               dex
.1c02	d0 fa		               bne  again
.1c04	28		out            plp
.1c05	60		               rts
.1c06			putch
.1c06	08		               php
.1c07	20 d2 ff	               jsr  $ffd2
.1c0a	28		               plp
.1c0b	60		               rts
.1c0c			puts
.1c0c	20 fd 1c	               jsr  push
.1c0f	86 fb		               stx  zpage1
.1c11	84 fc		               sty  zpage1+1
.1c13	a0 00		               ldy  #0
.1c15	b1 fb		next           lda  (zpage1),y
.1c17	f0 09		               beq  exit
.1c19	20 06 1c	               jsr  putch
.1c1c	20 04 1e	               jsr  inczp1
.1c1f	4c 15 1c	               jmp  next
.1c22	20 3c 1d	exit           jsr  pop
.1c25	60		               rts
.1c26			gotoxy
.1c26	08		               php
.1c27	18		               clc
.1c28	8a		               txa
.1c29	48		               pha
.1c2a	98		               tya
.1c2b	aa		               tax
.1c2c	68		               pla
.1c2d	a8		               tay
.1c2e	20 f0 ff	               jsr  kplot
.1c31	28		               plp
.1c32	60		               rts
.1c33			cursor
=$0286			bascol    =    $0286
.1c33	08		               php
.1c34	48		               pha
.1c35	90 12		               bcc  restore
.1c37	20 f0 ff	               jsr  kplot
.1c3a	8c 5b 1c	               sty  cx
.1c3d	8e 5c 1c	               stx  cy
.1c40	ad 86 02	               lda  bascol
.1c43	8d 5d 1c	               sta  bcol
.1c46	4c 58 1c	               jmp  out
.1c49	ae 5c 1c	restore        ldx  cy
.1c4c	ac 5b 1c	               ldy  cx
.1c4f	20 f0 ff	               jsr  kplot
.1c52	ad 5d 1c	               lda  bcol
.1c55	8d 86 02	               sta  bascol
.1c58	68		out            pla
.1c59	28		               plp
.1c5a	60		               rts
>1c5b	00		cx   .byte     $00
>1c5c	00		cy   .byte     $00
>1c5d	00		bcol .byte     $00
.1c5e			cursave
.1c5e	08		               php
.1c5f	38		               sec
.1c60	20 33 1c	               jsr  cursor
.1c63	28		               plp
.1c64	60		               rts
.1c65			curput
.1c65	08		               php
.1c66	18		               clc
.1c67	20 33 1c	               jsr  cursor
.1c6a	28		               plp
.1c6b	60		               rts
.1c6c			putsxy
.1c6c	20 fd 1c	               jsr  push
.1c6f	86 fb		               stx  zpage1
.1c71	84 fc		               sty  zpage1+1
.1c73	a0 00		               ldy  #$00
.1c75	b1 fb		               lda  (zpage1),y
.1c77	aa		               tax
.1c78	20 04 1e	               jsr  inczp1
.1c7b	b1 fb		               lda  (zpage1),y
.1c7d	a8		               tay
.1c7e	20 26 1c	               jsr  gotoxy
.1c81	20 04 1e	               jsr  inczp1
.1c84	a6 fb		               ldx  zpage1
.1c86	a4 fc		               ldy  zpage1+1
.1c88	20 0c 1c	               jsr  puts
.1c8b	20 3c 1d	               jsr  pop
.1c8e	60		               rts
>1c8f	00 00		straddr   .word     $00
>1c91	00		px        .byte     $00
>1c92	00		py        .byte     $00
>1c93	00 00		zp1       .word     $00
.1c95			putscxy
.1c95	20 fd 1c	               jsr  push
.1c98	84 fc		               sty  zpage1+1
.1c9a	86 fb		               stx  zpage1
.1c9c	ad 86 02	               lda  bascol
.1c9f	8d bf 1c	               sta  bc
.1ca2	a0 00		               ldy #$00
.1ca4	b1 fb		               lda  (zpage1),y
.1ca6	8d 86 02	               sta  bascol
.1ca9	20 04 1e	               jsr  inczp1
.1cac	a6 fb		               ldx  zpage1
.1cae	a4 fc		               ldy  zpage1+1
.1cb0	20 6c 1c	               jsr  putsxy
.1cb3	ad bf 1c	               lda  bc
.1cb6	8d 86 02	               sta  bascol
.1cb9	20 3c 1d	               jsr  pop
.1cbc	60		               rts
>1cbd	00 00		straddr  .word      $00
>1cbf	00		bc       .byte      $00
>1cc0	00 00		zp1      .word      $00
.1cc2			putrahex
.1cc2	08		               php
.1cc3	48		               pha
.1cc4	20 1a 1f	               jsr  a2hex
.1cc7	a9 b9		               lda  #<a2hexstr
.1cc9	a0 1e		               ldy  #>a2hexstr
.1ccb	20 0c 1c	               jsr  puts
.1cce	68		               pla
.1ccf	28		               plp
.1cd0	60		               rts
.1cd1			kputrahexxy
.1cd1			bputrahexxy
.1cd1			putrahexxy
.1cd1	08		               php
.1cd2	20 1a 1f	               jsr  a2hex
.1cd5	a9 b6		               lda  #<a2hexpos
.1cd7	a0 1e		               ldy  #>a2hexpos
.1cd9	20 6c 1c	               jsr  putsxy
.1cdc	68		               pla
.1cdd	28		               plp
.1cde	60		               rts
.1cdf			putrahexcxy
.1cdf	08		               php
.1ce0	20 1a 1f	               jsr  a2hex
.1ce3	a9 b6		               lda  #<a2hexpos
.1ce5	a0 1e		               ldy  #>a2hexpos
.1ce7	20 95 1c	               jsr  putscxy
.1cea	68		               pla
.1ceb	28		               plp
.1cec	60		               rts
.1ced			setinverse
.1ced	48		               pha
.1cee	a9 12		               lda  #$12
.1cf0	20 d2 ff	               jsr  $ffd2
.1cf3	68		               pla
.1cf4	60		               rts
.1cf5			clrinverse
.1cf5	48		               pha
.1cf6	a9 92		               lda  #$92
.1cf8	20 d2 ff	               jsr  $ffd2
.1cfb	68		               pla
.1cfc	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.1cfd			push
.1cfd	08		          php            ; stack : flg, pcl, pch
.1cfe	78		          sei
.1cff	8d 39 1d	          sta  ra        ; save a
.1d02	68		          pla            ; stack : pcl, pch
.1d03	8d 38 1d	          sta  rp        ; save rp
.1d06	68		          pla            ; stack : pch
.1d07	8d 3a 1d	          sta  pc        ; save pcl
.1d0a	68		          pla            ; stack : -
.1d0b	8d 3b 1d	          sta  pc+1      ; save pch
.1d0e	a5 fb		          lda  zpage1    ; get zpage1 low byte
.1d10	48		          pha            ; stack : zp1l
.1d11	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.1d13	48		          pha            ; stack : zp1h, zp1l
.1d14	a5 fd		          lda  zpage2    ; get zpage2 low byte
.1d16	48		          pha            ; stack : zp2l, zp1h, zp1l
.1d17	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.1d19	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1d1a	ad 38 1d	          lda  rp        ; get rp
.1d1d	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1d1e	ad 39 1d	          lda  ra        ; get a
.1d21	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1d22	8a		          txa            ; get x
.1d23	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1d24	98		          tya            ; get y
.1d25	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1d26	ad 3b 1d	          lda  pc+1      ; get pch
.1d29	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1d2a	ad 3a 1d	          lda  pc        ; get pcl
.1d2d	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1d2e	ad 38 1d	          lda  rp        ; get rp
.1d31	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1d32	ad 39 1d	          lda  ra        ; get a
.1d35	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1d36	58		          cli
.1d37	60		          rts
>1d38	00		rp        .byte     0
>1d39	00		ra        .byte     0
>1d3a	00 00		pc        .word     0
.1d3c			pull
.1d3c			pop
.1d3c	78		          sei
.1d3d	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1d3e	8d 71 1d	          sta  pc        ; save pcl
.1d41	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1d42	8d 72 1d	          sta  pc+1      ; save pch
.1d45	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1d46	a8		          tay            ; set y
.1d47	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1d48	aa		          tax            ; set x
.1d49	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1d4a	8d 70 1d	          sta  ra        ; save a
.1d4d	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1d4e	8d 6f 1d	          sta  rp        ; save rp
.1d51	68		          pla            ; stack : zp2l, zp1h, zp1l
.1d52	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.1d54	68		          pla            ; stack : zp1h, zp1l
.1d55	85 fd		          sta  zpage2    ; get zpage2 High byte
.1d57	68		          pla            ; stack : zp1l
.1d58	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.1d5a	68		          pla            ; stack :
.1d5b	85 fb		          sta  zpage1    ; get zpage1 High byte
.1d5d	ad 72 1d	          lda  pc+1      ; get pch
.1d60	48		          pha            ; stack : pch
.1d61	ad 71 1d	          lda  pc
.1d64	48		          pha            ; stack : pcl, pch
.1d65	ad 6f 1d	          lda  rp        ; get rp
.1d68	48		          pha            ; stack : rp, pcl, pch
.1d69	ad 70 1d	          lda  ra        ; set ra
.1d6c	58		          cli
.1d6d	28		          plp            ; stack : pcl, pch
.1d6e	60		          rts
>1d6f	00		rp        .byte     0
>1d70	00		ra        .byte     0
>1d71	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.1d73			blkfill
.1d73	20 fd 1c	bf0            jsr  push
.1d76	20 34 1e	               jsr  savezp1
.1d79	84 fc		               sty  zpage1+1
.1d7b	a0 00		               ldy  #$00
.1d7d	84 fb		               sty  zpage1
.1d7f	91 fb		bf1            sta  (zpage1),y
.1d81	c8		               iny
.1d82	d0 fb		               bne  bf1
.1d84	20 43 1e	               jsr  restzp1
.1d87	20 3c 1d	               jsr  pop
.1d8a	60		               rts
.1d8b			memfill
.1d8b	20 fd 1c	               jsr  push
.1d8e	20 73 1d	mf1            jsr  blkfill
.1d91	c8		               iny
.1d92	ca		               dex
.1d93	d0 f9		               bne  mf1
.1d95	20 3c 1d	               jsr  pop
.1d98	60		               rts
.1d99			memmove
.1d99	20 fd 1c	               jsr  push
.1d9c	ba		               tsx            ; On se crée un pointeur ...
.1d9d	8a		               txa
.1d9e	18		               clc
.1d9f	69 0b		               adc  #11
.1da1	a8		               tay
.1da2	a2 06		               ldx  #$06
.1da4	b9 00 01	nextbyte       lda  $0100,y
.1da7	99 f3 1d	               sta  words,y
.1daa	c8		               iny
.1dab	ca		               dex
.1dac	d0 f6		               bne  nextbyte
.1dae	ad f3 1d	               lda  s
.1db1	8d ca 1d	               sta  source+1
.1db4	ad f4 1d	               lda  s+1
.1db7	8d cb 1d	               sta  source+2
.1dba	ad f5 1d	               lda  d
.1dbd	8d c7 1d	               sta  destin+1
.1dc0	ad f6 1d	               lda  d+1
.1dc3	8d c8 1d	               sta  destin+2
.1dc6	ad ff ff	destin         lda  $ffff
.1dc9	8d ff ff	source         sta  $ffff
.1dcc	ee c7 1d	               inc  destin+1
.1dcf	d0 03		               bne  src
.1dd1	ee c8 1d	               inc  destin+2
.1dd4	ee ca 1d	src            inc  source+1
.1dd7	d0 03		               bne  cnt
.1dd9	ee cb 1d	               inc  source+2
.1ddc	ad f7 1d	cnt            lda  compte
.1ddf	d0 08		               bne  decit
.1de1	ad f8 1d	               lda  compte+1
.1de4	f0 09		               beq  fini
.1de6	ce f8 1d	               dec  compte+1
.1de9	ce f7 1d	decit          dec  compte
.1dec	4c c6 1d	               jmp  destin
.1def	20 3c 1d	fini           jsr  pop
.1df2	60		               rts
.1df3			words
>1df3	00 00		s         .word     $0000
>1df5	00 00		d         .word     $0000
>1df7	00 00		compte    .word     $0000
.1df9			decword
.1df9	20 fd 1c	               jsr  push
.1dfc	86 fd		               stx  zpage2
.1dfe	84 fe		               sty  zpage2+1
.1e00	20 3c 1d	               jsr  pop
.1e03	60		               rts
.1e04			inczp1
.1e04	08		               php
.1e05	48		               pha
.1e06	e6 fb		               inc  zpage1
.1e08	a5 fb		               lda  zpage1
.1e0a	d0 02		               bne  nopage
.1e0c	e6 fc		               inc  zpage1+1
.1e0e	68		nopage         pla
.1e0f	28		               plp
.1e10	60		               rts
.1e11			deczp1
.1e11	08		                php
.1e12	48		                pha
.1e13	c6 fb		                dec  zpage1
.1e15	d0 02		                bne  nopage
.1e17	c6 fc		                dec  zpage1+1
.1e19	68		nopage          pla
.1e1a	28		                plp
.1e1b	60		                rts
.1e1c			inczp2
.1e1c	08		               php
.1e1d	48		               pha
.1e1e	e6 fd		               inc  zpage2
.1e20	a5 fd		               lda  zpage2
.1e22	d0 02		               bne  nopage
.1e24	e6 fe		               inc  zpage2+1
.1e26	68		nopage         pla
.1e27	28		               plp
.1e28	60		               rts
.1e29			deczp2
.1e29	08		               php
.1e2a	48		               pha
.1e2b	a5 fd		               lda  zpage2
.1e2d	d0 02		               bne  nopage
.1e2f	c6 fe		               dec  zpage2+1
.1e31	68		nopage         pla
.1e32	28		               plp
.1e33	60		               rts
.1e34			savezp1
.1e34	08		               php
.1e35	48		               pha
.1e36	a5 fb		               lda  zpage1
.1e38	8d b0 1e	               sta  zp1
.1e3b	a5 fc		               lda  zpage1+1
.1e3d	8d b1 1e	               sta  zp1+1
.1e40	68		               pla
.1e41	28		               plp
.1e42	60		               rts
.1e43			restzp1
.1e43	08		               php
.1e44	48		               pha
.1e45	ad b0 1e	               lda zp1
.1e48	85 fb		               sta zpage1
.1e4a	ad b1 1e	               lda zp1+1
.1e4d	85 fc		               sta zpage1+1
.1e4f	68		               pla
.1e50	28		               plp
.1e51	60		               rts
.1e52			savezp2
.1e52	08		         php
.1e53	48		         pha
.1e54	a5 fd		         lda zpage2
.1e56	8d b2 1e	         sta zp2
.1e59	a5 fe		         lda zpage2+1
.1e5b	8d b3 1e	         sta zp2+1
.1e5e	68		         pla
.1e5f	28		         plp
.1e60	60		         rts
.1e61			restzp2
.1e61	08		                php
.1e62	48		                pha
.1e63	ad b2 1e	                lda  zp2
.1e66	85 fd		                sta  zpage2
.1e68	ad b3 1e	                lda  zp2+1
.1e6b	85 fe		                sta  zpage2+1
.1e6d	68		                pla
.1e6e	28		                plp
.1e6f	60		                rts
.1e70			xy2addr
.1e70	08		                php
.1e71	48		                pha
.1e72	8a		                txa
.1e73	48		                pha
.1e74	98		                tya
.1e75	48		                pha
.1e76	ad ab 1e	                lda     addr1+1
.1e79	8d ad 1e	                sta     addr2+1
.1e7c	ad aa 1e	                lda     addr1
.1e7f	8d ac 1e	                sta     addr2
.1e82	c0 00		                cpy     #$00
.1e84	f0 0f		                beq     addx
.1e86	18		moreline        clc
.1e87	6d a9 1e	                adc     ymult
.1e8a	90 03		                bcc     norepy
.1e8c	ee ad 1e	                inc     addr2+1
.1e8f	8d ac 1e	norepy          sta     addr2
.1e92	88		                dey
.1e93	d0 f1		                bne     moreline
.1e95	8a		addx            txa
.1e96	18		                clc
.1e97	6d ac 1e	                adc     addr2
.1e9a	90 03		                bcc     thatsit
.1e9c	ee ad 1e	                inc     addr2+1
.1e9f	8d ac 1e	thatsit         sta     addr2
.1ea2	68		                pla
.1ea3	a8		                tay
.1ea4	68		                pla
.1ea5	aa		                tax
.1ea6	68		                pla
.1ea7	28		                plp
.1ea8	60		                rts
>1ea9	28		ymult          .byte     40
>1eaa	00 00		addr1          .word     $0000
>1eac	00 00		addr2          .word     $0000
>1eae	00 00		bytecnt        .word     $0000
>1eb0	00 00		zp1        .word   $0000
>1eb2	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>1eb4	01		a2hexcol       .byte     1              ; pour aputscxy
>1eb5	00		a2hexbkcol     .byte     %00000000
.1eb6			a2hexpos
>1eb6	00		a2hexpx        .byte     0              ; pour aputsxy
>1eb7	00		a2hexpy        .byte     0
>1eb8	24		a2hexprefix    .byte     "$"            ; pour aputs
>1eb9	00 00		a2hexstr       .word     $00
>1ebb	00 00		               .word     $00
>1ebd	00		               .byte     0              ; 0 end string
>1ebe	30 30 30 30	abin           .null     "00000000"
>1ec2	30 30 30 30 00
>1ec7	20 20 20 00	adec           .null     "   "
.1ecb			putahexfmtxy
.1ecb	20 fd 1c	               jsr  push
.1ece	20 1a 1f	               jsr  a2hex
.1ed1	ae b6 1e	               ldx  a2hexpx
.1ed4	ac b7 1e	               ldy  a2hexpy
.1ed7	20 26 1c	               jsr  gotoxy
.1eda	a2 b8		               ldx  #<a2hexprefix
.1edc	a0 1e		               ldy  #>a2hexprefix
.1ede	20 0c 1c	               jsr  puts
.1ee1	20 3c 1d	               jsr  pop
.1ee4	60		               rts
.1ee5			putahexfmt
.1ee5	20 fd 1c	               jsr  push
.1ee8	20 1a 1f	               jsr  a2hex
.1eeb	a2 b8		               ldx  #<a2hexprefix
.1eed	a0 1e		               ldy  #>a2hexprefix
.1eef	20 0c 1c	               jsr  puts
.1ef2	20 3c 1d	               jsr  pop
.1ef5	60		               rts
.1ef6			putahex
.1ef6	20 fd 1c	               jsr  push
.1ef9	20 1a 1f	               jsr  a2hex
.1efc	a2 b9		               ldx  #<a2hexstr
.1efe	a0 1e		               ldy  #>a2hexstr
.1f00	20 0c 1c	               jsr  puts
.1f03	20 3c 1d	               jsr  pop
.1f06	60		               rts
.1f07			nib2hex
.1f07	08		               php
.1f08	29 0f		               and  #$0f
.1f0a	f8		               sed
.1f0b	18		               clc
.1f0c	69 90		               adc  #$90
.1f0e	69 40		               adc  #$40
.1f10	d8		               cld
.1f11	28		               plp
.1f12	60		               rts
.1f13			lsra4bits
.1f13	08		               php
.1f14	4a		               lsr
.1f15	4a		               lsr
.1f16	4a		               lsr
.1f17	4a		               lsr
.1f18	28		               plp
.1f19	60		               rts
.1f1a			a2hex
.1f1a	08		               php
.1f1b	48		               pha
.1f1c	48		               pha
.1f1d	20 13 1f	               jsr  lsra4bits
.1f20	20 07 1f	               jsr  nib2hex
.1f23	8d b9 1e	               sta  a2hexstr
.1f26	68		               pla
.1f27	20 07 1f	               jsr  nib2hex
.1f2a	8d ba 1e	               sta  a2hexstr+1
.1f2d	a9 00		               lda  #$00                ; set end of string
.1f2f	8d bb 1e	               sta  a2hexstr+2
.1f32	68		               pla
.1f33	28		               plp
.1f34	60		               rts
.1f35			xy2hex
.1f35	20 fd 1c	               jsr  push
.1f38	20 1a 1f	               jsr  a2hex
.1f3b	8a		               txa
.1f3c	48		               pha
.1f3d	20 13 1f	               jsr  lsra4bits
.1f40	20 07 1f	               jsr  nib2hex
.1f43	8d b9 1e	               sta  a2hexstr
.1f46	68		               pla
.1f47	20 07 1f	               jsr  nib2hex
.1f4a	8d ba 1e	               sta  a2hexstr+1
.1f4d	98		               tya
.1f4e	48		               pha
.1f4f	20 13 1f	               jsr  lsra4bits
.1f52	20 07 1f	               jsr  nib2hex
.1f55	8d bb 1e	               sta  a2hexstr+2
.1f58	68		               pla
.1f59	20 07 1f	               jsr  nib2hex
.1f5c	8d bc 1e	               sta  a2hexstr+3
.1f5f	a9 00		               lda  #$00                ; 0 ended string
.1f61	8d bd 1e	               sta  a2hexstr+4
.1f64	20 3c 1d	               jsr  pop
.1f67			atobin
.1f67	20 fd 1c	               jsr  push
.1f6a	a2 08		               ldx  #8
.1f6c	a0 00		               ldy  #0
.1f6e	18		               clc
.1f6f	2a		nextbit        rol
.1f70	48		               pha
.1f71	69 00		               adc  #$00
.1f73	29 01		               and  #$01
.1f75	20 07 1f	               jsr  nib2hex
.1f78	99 be 1e	               sta  abin,y
.1f7b	68		               pla
.1f7c	c8		               iny
.1f7d	ca		               dex
.1f7e	d0 ef		               bne  nextbit
.1f80	a9 00		               lda  #0
.1f82	99 be 1e	               sta  abin,y
.1f85	20 3c 1d	               jsr  pull
.1f88	60		               rts
.1f89			putabin
.1f89	20 67 1f	               jsr     atobin
.1f8c	20 fd 1c	               jsr     push
.1f8f	a2 be		               ldx     #<abin
.1f91	a0 1e		               ldy     #>abin
.1f93	20 0c 1c	               jsr     puts
.1f96	20 3c 1d	               jsr     pop
.1f99	60		               rts
.1f9a			printabin
.1f9a	20 fd 1c	               jsr     push
.1f9d	a2 be		               ldx     #<abin
.1f9f	a0 1e		               ldy     #>abin
.1fa1	20 0c 1c	               jsr     puts
.1fa4	20 3c 1d	               jsr     pop
.1fa7	60		               rts
.1fa8			putabinfmt
.1fa8	08		               php
.1fa9	48		               pha
.1faa	a9 25		               lda     #"%"
.1fac	20 06 1c	               jsr     putch
.1faf	68		               pla
.1fb0	20 89 1f	               jsr     putabin
.1fb3	28		               plp
.1fb4	60		               rts
.1fb5			putabinxy
.1fb5	20 26 1c	               jsr     gotoxy
.1fb8	20 89 1f	               jsr     putabin
.1fbb	60		               rts
.1fbc			putabinfmtxy
.1fbc	20 26 1c	               jsr     gotoxy
.1fbf	20 a8 1f	               jsr     putabinfmt
.1fc2	60		               rts
.1fc3			atodec
.1fc3	20 fd 1c	               jsr  push
.1fc6	f8		               sed
.1fc7	aa		               tax
.1fc8	a0 00		               ldy  #$00
.1fca	a9 00		               lda  #$00
.1fcc	18		nextbit        clc
.1fcd	69 01		               adc  #$01
.1fcf	90 01		               bcc  decx
.1fd1	c8		               iny
.1fd2	ca		decx           dex
.1fd3	d0 f7		               bne  nextbit
.1fd5	48		               pha
.1fd6	98		               tya
.1fd7	20 07 1f	               jsr  nib2hex
.1fda	8d c7 1e	               sta  adec
.1fdd	68		               pla
.1fde	48		               pha
.1fdf	20 07 1f	               jsr  nib2hex
.1fe2	8d c9 1e	               sta  adec+2
.1fe5	68		               pla
.1fe6	6a		               ror
.1fe7	6a		               ror
.1fe8	6a		               ror
.1fe9	6a		               ror
.1fea	20 07 1f	               jsr  nib2hex
.1fed	8d c8 1e	               sta  adec+1
.1ff0	d8		               cld
.1ff1	20 3c 1d	               jsr  pull
.1ff4	60		               rts
>1ff5	00 00 00	buffer         .byte     0,0,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>1ff8	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>1ffc	00 00 00 00 00 00 00 00 00 0d 00 00
>2008	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>200c	00 00 00 00 00 00 00 00 00 00 00 00
>2018	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>201c	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>2028	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>202c	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>2038	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>203c	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>2048	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>204c	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>2058	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>205c	00 00 00 00 00 00 00 00 00 00 00 00
>2068	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>206c	00 00 00 00 00 00 00 00 00 00 00 00
>2078	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>207c	00 00 00 00 00 00 00 00 00 00 00 00
>2088	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>208c	00 00 00 00 00 00 00 00 00 00 00 00
>2098	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>209c	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>20a8	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>20ac	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>20b8	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>20bc	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>20c8	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>20cc	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>20d8	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>20dc	00 00 00 00 00 00 00 00 00 00 00 00
>20e8	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>20ec	00 00 00 00 00 00 00 00 00 00 00 00
.20f8			waitstop
.20f8	20 fd 1c	               jsr  push
.20fb	20 ed f6	wait           jsr  k_stop
.20fe	d0 fb		               bne  wait
.2100	20 3c 1d	               jsr  pop
.2103	60		               rts
.2104			anykey
.2104	08		               php
.2105	48		               pha
.2106	a5 cb		nokey          lda 203
.2108	c9 40		               cmp #64
.210a	f0 fa		               beq nokey
.210c	20 12 21	               jsr releasekey
.210f	68		               pla
.2110	28		               plp
.2111	60		               rts
.2112			releasekey
.2112	08		               php
.2113	48		               pha
.2114	a5 cb		keypressed     lda 203
.2116	c9 40		               cmp #64
.2118	d0 fa		               bne keypressed
.211a	68		               pla
.211b	28		               plp
.211c	60		               rts
.211d			getkey
.211d	20 e4 ff	again          jsr  getin
.2120	c9 00		               cmp  #0
.2122	f0 f9		               beq  again
.2124	60		               rts
.2125			waitkey
.2125	20 fd 1c	               jsr  push
.2128	8d 76 21	               sta  thekey
.212b	20 e4 ff	nope           jsr  getin
.212e	20 d2 ff	               jsr  chrout
.2131	cd 76 21	               cmp  thekey
.2134	d0 f5		               bne  nope
.2136	20 d2 ff	               jsr  chrout
.2139	20 3c 1d	               jsr  pop
.213c	60		               rts
.213d			waitspace
.213d	20 fd 1c	               jsr  push
.2140	a9 7f		wait           lda  #$7f  ;%01111111
.2142	8d 00 dc	               sta  $dc00
.2145	ad 01 dc	               lda  $dc01
.2148	29 10		               and  #$10  ;mask %00010000
.214a	d0 f4		               bne  wait
.214c	20 3c 1d	               jsr  pop
.214f			waitsstop
.214f	20 fd 1c	               jsr  push
.2152	20 ed f6	wait           jsr  k_stop  ;%01111111
.2155	d0 fb		               bne  wait
.2157	20 3c 1d	               jsr  pop
.215a			waitreturn
.215a	20 fd 1c	               jsr  push
.215d	ad 77 21	               lda  thecount
.2160	8d 00 04	               sta  scrnram
.2163	a9 02		               lda  #$02
.2165	8d 00 d8	               sta  colorram
.2168	20 e4 ff	nope           jsr  getin
.216b	c9 0d		nohex          cmp  #$0d
.216d	d0 f9		               bne  nope
.216f	ee 77 21	               inc  thecount
.2172	20 3c 1d	               jsr  pop
.2175	60		               rts
>2176	00		thekey         .byte   0
>2177	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Fri Apr  5 01:52:13 2024

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm

="20240404-011030"	version  = "20240404-011030"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

=18			fkeyleft       =    18
=9			f1top          =    9
=$0400			scrnnewram     =    $0400
=10			charsdef       =    10
=9			grid_top       =    9
=1			grid_left      =    1
=16			grid_bot       =    grid_top + 7
=8			grid_right     =    grid_left + 7
=$0b			bordure        =    vgris
=$00			fond           =    vnoir
=$03			mesgcol        =    vcyan
=$03			menu1col1      =    vcyan
=$0e			menu1col2      =    vbleu1
=$0f			menu2col1      =    vgris2
=$0c			menu2col2      =    vgris1
=$01			flashcol       =    vblanc
=$07			whoamicol      =    vjaune
=$01			charcolor      =    vblanc
=$0f			charscolor     =    vgris2
.080d			main
.080d	20 fb 21	               jsr  push
.0810	20 cd 20	               jsr  scrmaninit
.0813	08		               php
.0814	48		               pha
.0815	a9 08		               lda  #$08
.0817	20 d2 ff	               jsr  $ffd2
.081a	68		               pla
.081b	28		               plp
.081c	20 81 0a	               jsr  drawcredits
.081f	a2 ff		               ldx #<menu_msg
.0821	a0 1c		               ldy #>menu_msg
.0823	20 93 21	               jsr putscxy
.0826	20 b3 20	               jsr  screendis
.0829	20 32 10	               jsr  copycharset
.082c	20 ed 20	               jsr  cls
.082f	20 1c 10	               jsr  setscreenptr
.0832	20 e0 0a	               jsr  setdefaultchar
.0835	20 8d 10	               jsr  staticscreen
.0838	20 5f 0f	               jsr  drawbitmap
.083b	a9 00		               lda  #$00
.083d	8d 35 09	               sta  fkeyset
.0840	20 e2 10	               jsr  drawfkeys
.0843	a9 00		               lda  #$00
.0845	20 fb 21	               jsr  push
.0848	a2 5c		               ldx  #<blankmsg
.084a	a0 1a		               ldy  #>blankmsg
.084c	20 93 21	               jsr  putscxy
.084f	a2 88		               ldx  #<prompt_msg
.0851	a0 1a		               ldy  #>prompt_msg
.0853	20 93 21	               jsr  putscxy
.0856	20 3a 22	               jsr  pop
.0859	20 c0 20	               jsr  screenena
.085c	20 f1 0c	               jsr  keyaction
.085f	20 ed 20	               jsr  cls
.0862	20 81 0a	               jsr  drawcredits
.0865	a2 88		               ldx #<bye_msg
.0867	a0 1e		               ldy #>bye_msg
.0869	20 93 21	               jsr putscxy
.086c	a2 aa		               ldx #<any_msg
.086e	a0 1e		               ldy #>any_msg
.0870	20 93 21	               jsr putscxy
.0873	20 1b 26	               jsr  getkey
.0876	20 ed 20	               jsr  cls
.0879	20 3a 22	endmain        jsr  pop
.087c	20 66 fe	               jsr  k_warmboot
.087f	60		               rts
.0880			savetofile
.0880	20 fb 21	               jsr  push
.0883	a9 46		               lda  #<fname
.0885	8d a9 27	               sta  dsk_fnptr
.0888	a9 09		               lda  #>fname
.088a	8d aa 27	               sta  dsk_fnptr+1
.088d	a9 0d		               lda  #(device-fname-1)
.088f	8d ab 27	               sta  dsk_fnlen
.0892	ad 54 09	               lda  device
.0895	29 0f		               and  #$0f
.0897	8d a8 27	               sta  dsk_lfsno
.089a	8d a7 27	               sta  dsk_dev
.089d	a9 00		               lda  #<bitmapmem
.089f	8d a3 27	               sta  dsk_data_s
.08a2	a9 28		               lda  #>bitmapmem
.08a4	8d a4 27	               sta  dsk_data_s+1
.08a7	a9 00		               lda  #<endofaddr
.08a9	8d a5 27	               sta  dsk_data_e
.08ac	a9 48		               lda  #>endofaddr
.08ae	8d a6 27	               sta  dsk_data_e+1
.08b1	a2 5c		               ldx #<blankmsg
.08b3	a0 1a		               ldy #>blankmsg
.08b5	20 93 21	               jsr putscxy
.08b8	a2 a3		               ldx #<wait_msg
.08ba	a0 1a		               ldy #>wait_msg
.08bc	20 93 21	               jsr putscxy
.08bf	20 fb 21	               jsr  push
.08c2	a2 01		               ldx  #1
.08c4	a0 04		               ldy  #4
.08c6	20 24 21	               jsr  gotoxy
.08c9	20 3a 22	               jsr  pop
.08cc	20 10 27	               jsr  memtofile
.08cf	20 3a 22	               jsr  pop
.08d2	60		               rts
.08d3			loadfromfile
.08d3	20 fb 21	               jsr  push
.08d6	a9 46		               lda  #<fname
.08d8	8d a9 27	               sta  dsk_fnptr
.08db	a9 09		               lda  #>fname
.08dd	8d aa 27	               sta  dsk_fnptr+1
.08e0	a9 0d		               lda  #(device-fname-1)
.08e2	8d ab 27	               sta  dsk_fnlen
.08e5	ad 54 09	               lda  device
.08e8	29 0f		               and  #$0f
.08ea	8d a7 27	               sta  dsk_dev
.08ed	8d a8 27	               sta  dsk_lfsno
.08f0	a9 00		               lda  #<bitmapmem
.08f2	8d a3 27	               sta  dsk_data_s
.08f5	a9 28		               lda  #>bitmapmem
.08f7	8d a4 27	               sta  dsk_data_s+1
.08fa	a9 00		               lda  #<endofaddr
.08fc	8d a5 27	               sta  dsk_data_e
.08ff	a9 48		               lda  #>endofaddr
.0901	8d a6 27	               sta  dsk_data_e+1
.0904	a2 5c		               ldx #<blankmsg
.0906	a0 1a		               ldy #>blankmsg
.0908	20 93 21	               jsr putscxy
.090b	a2 a3		               ldx #<wait_msg
.090d	a0 1a		               ldy #>wait_msg
.090f	20 93 21	               jsr putscxy
.0912	20 fb 21	               jsr  push
.0915	a2 01		               ldx  #1
.0917	a0 04		               ldy  #4
.0919	20 24 21	               jsr  gotoxy
.091c	20 3a 22	               jsr  pop
.091f	20 48 27	               jsr  filetomem
.0922	20 3a 22	               jsr  pop
.0925	60		               rts
=10240			bitmapmem      =         charsdef * 1024     ;Calcul position ram des caracteres.
=18432			endofaddr      =         (charsdef * 1024) + (4*$800)
=61440			mstopaddr      =         $d000+(4*$800)
>0926	00 d0		startaddr      .word     $d000               ; 53248
>0928	00 f0		stopaddr       .word     mstopaddr           ; 55296
>092a	00 28		bitmapaddr     .word     bitmapmem           ; $3000, 12288
>092c	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>0930	08 04 02 01
>0934	00		editmode       .byte     0
>0935	00		fkeyset        .byte     0
>0936	00		currentchar    .byte     0
>0937	00		currentkey     .byte     0
>0938	00		previouskey    .byte     0
>0939	00		bitmapoffset   .byte     0
>093a	00 00		mapaddr        .word     0
>093c	00 00		byteaddr       .word     0
>093e	00 00		gridaddr       .word     0
>0940	09		cursln         .byte     grid_top
>0941	01		curscl         .byte     grid_left
>0942	05 1b 03 12	pfname         .byte     vvert,27,3,18
>0946	40 30 3a	fname          .text     "@0:"
>0949	4f 52 49 47	name           .text     "origin"
>094d	49 4e
>094f	2e 43 48 52	ext            .null     ".chr"
>0953	00
>0954	08		device         .byte     8

;******  Processing file: routines.asm

.0955			template
.0955	20 fb 21	               jsr  push
.0958	20 3a 22	               jsr  pop
.095b	60		               rts
.095c			screenredraw
.095c	20 fb 21	               jsr  push
.095f	20 b3 20	               jsr  screendis
.0962	20 ed 20	               jsr  cls
.0965	20 8d 10	               jsr  staticscreen
.0968	20 5f 0f	               jsr  drawbitmap
.096b	20 e2 10	               jsr  drawfkeys
.096e	20 fb 21	               jsr  push
.0971	a2 0d		               ldx  #13
.0973	a0 0c		               ldy  #12
.0975	20 24 21	               jsr  gotoxy
.0978	20 3a 22	               jsr  pop
.097b	ad 37 09	               lda  currentkey
.097e	20 04 21	               jsr  putch
.0981	20 fb 21	               jsr  push
.0984	a2 5c		               ldx  #<blankmsg
.0986	a0 1a		               ldy  #>blankmsg
.0988	20 93 21	               jsr  putscxy
.098b	a2 88		               ldx  #<prompt_msg
.098d	a0 1a		               ldy  #>prompt_msg
.098f	20 93 21	               jsr  putscxy
.0992	20 3a 22	               jsr  pop
.0995	20 c0 20	               jsr  screenena
.0998	20 3a 22	               jsr  pop
.099b	60		               rts
.099c			getfname
.099c	20 fb 21	               jsr  push
.099f	20 fb 21	               jsr  push
.09a2	a2 5c		               ldx  #<blankmsg
.09a4	a0 1a		               ldy  #>blankmsg
.09a6	20 93 21	               jsr  putscxy
.09a9	a2 9e		               ldx  #<fname_msg
.09ab	a0 1c		               ldy  #>fname_msg
.09ad	20 93 21	               jsr  putscxy
.09b0	20 3a 22	               jsr  pop
.09b3	a2 00		               ldx  #$00
.09b5	8e e9 09	               stx  count
.09b8	20 ea 09	getanother     jsr  getalphanum
.09bb	20 04 21	               jsr  putch
.09be	ae e9 09	               ldx  count
.09c1	9d 49 09	               sta  name,x
.09c4	ee e9 09	               inc  count
.09c7	ae e9 09	               ldx  count
.09ca	e0 06		               cpx  #$06
.09cc	f0 03		               beq  finish
.09ce	4c b8 09	               jmp  getanother
.09d1			finish
.09d1	20 fb 21	               jsr  push
.09d4	a2 5c		               ldx  #<blankmsg
.09d6	a0 1a		               ldy  #>blankmsg
.09d8	20 93 21	               jsr  putscxy
.09db	a2 42		               ldx  #<pfname
.09dd	a0 09		               ldy  #>pfname
.09df	20 93 21	               jsr  putscxy
.09e2	20 3a 22	               jsr  pop
.09e5	20 3a 22	               jsr  pop
.09e8	60		               rts
>09e9	00		count          .byte     0
.09ea			getalphanum
.09ea	20 fb 21	               jsr  push
.09ed	20 1b 26	getanother     jsr  getkey
.09f0	c9 30		               cmp  #$30      ; 0
.09f2	30 f9		               bmi  getanother
.09f4	c9 3a		               cmp  #$3a      ; 9+1
.09f6	30 0b		               bmi  goodone
.09f8	c9 41		isitletter     cmp  #$41      ; A
.09fa	30 f1		               bmi  getanother
.09fc	c9 5b		               cmp  #$5b      ; Z+1
.09fe	30 03		               bmi  goodone
.0a00	4c ed 09	               jmp  getanother
.0a03	8d 0d 0a	goodone        sta  tempbyte
.0a06	20 3a 22	               jsr  pop
.0a09	ad 0d 0a	               lda  tempbyte
.0a0c	60		               rts
>0a0d	00		tempbyte       .byte     0
.0a0e			copychar
.0a0e	20 fb 21	               jsr  push
.0a11	20 4a 0a	               jsr  getvalidkey
.0a14	ad 2a 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0a17	85 fb		               sta  zpage1
.0a19	ad 2b 09	               lda  bitmapaddr+1
.0a1c	85 fc		               sta  zpage1+1
.0a1e	ae 80 0a	               ldx  copykey
.0a21	bd f6 24	               lda  asciitorom,x
.0a24	aa		               tax
.0a25	e0 00		               cpx  #$00
.0a27	f0 08		               beq  no_offset      ; sommes nous déja à 0
.0a29	a9 08		addagain       lda  #$08
.0a2b	20 3e 12	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0a2e	ca		               dex                 ; pour chaque caracteres
.0a2f	d0 f8		               bne  addagain
.0a31	ad 3a 09	no_offset      lda  mapaddr        ; le caractere actuel
.0a34	85 fd		               sta  zpage2         ;
.0a36	ad 3b 09	               lda  mapaddr+1      ;
.0a39	85 fe		               sta  zpage2+1       ;
.0a3b	a0 00		               ldy  #$00
.0a3d	b1 fb		nextbyte       lda  (zpage1),y
.0a3f	91 fd		               sta  (zpage2),y
.0a41	c8		               iny
.0a42	c0 08		               cpy  #$08
.0a44	d0 f7		               bne  nextbyte
.0a46	20 3a 22	out            jsr  pop
.0a49	60		               rts
.0a4a			getvalidkey
.0a4a	20 fb 21	               jsr  push
.0a4d	20 fb 21	               jsr  push
.0a50	a2 5c		               ldx  #<blankmsg
.0a52	a0 1a		               ldy  #>blankmsg
.0a54	20 93 21	               jsr  putscxy
.0a57	a2 75		               ldx  #<copychar_msg
.0a59	a0 1c		               ldy  #>copychar_msg
.0a5b	20 93 21	               jsr  putscxy
.0a5e	20 3a 22	               jsr  pop
.0a61	20 1b 26	getgoodkey     jsr  getkey
.0a64	8d 80 0a	               sta  copykey
.0a67	aa		               tax
.0a68	bc f6 24	               ldy  asciitorom,x
.0a6b	c4 00		               cpy  $00
.0a6d	d0 0a		               bne  goodone
.0a6f	ae 80 0a	               ldx  copykey
.0a72	e0 40		               cpx  #$40
.0a74	f0 03		               beq  goodone
.0a76	4c 61 0a	               jmp  getgoodkey
.0a79	20 04 21	goodone        jsr  putch
.0a7c	20 3a 22	               jsr  pop
.0a7f	60		               rts
>0a80	00		copykey        .byte 0
.0a81			drawcredits
.0a81	20 fb 21	               jsr  push
.0a84	20 ed 20	               jsr  cls
.0a87	a2 14		               ldx #<whoami0
.0a89	a0 1d		               ldy #>whoami0
.0a8b	20 93 21	               jsr putscxy
.0a8e	a2 39		               ldx #<whoami1
.0a90	a0 1d		               ldy #>whoami1
.0a92	20 93 21	               jsr putscxy
.0a95	a2 60		               ldx #<whoami2
.0a97	a0 1d		               ldy #>whoami2
.0a99	20 93 21	               jsr putscxy
.0a9c	a2 85		               ldx #<whoami3
.0a9e	a0 1d		               ldy #>whoami3
.0aa0	20 93 21	               jsr putscxy
.0aa3	a2 aa		               ldx #<whoami4
.0aa5	a0 1d		               ldy #>whoami4
.0aa7	20 93 21	               jsr putscxy
.0aaa	a2 cf		               ldx #<whoami5
.0aac	a0 1d		               ldy #>whoami5
.0aae	20 93 21	               jsr putscxy
.0ab1	a2 f4		               ldx #<whoami6
.0ab3	a0 1d		               ldy #>whoami6
.0ab5	20 93 21	               jsr putscxy
.0ab8	a2 19		               ldx #<whoami7
.0aba	a0 1e		               ldy #>whoami7
.0abc	20 93 21	               jsr putscxy
.0abf	a2 3e		               ldx #<whoami8
.0ac1	a0 1e		               ldy #>whoami8
.0ac3	20 93 21	               jsr putscxy
.0ac6	a2 63		               ldx #<whoami9
.0ac8	a0 1e		               ldy #>whoami9
.0aca	20 93 21	               jsr putscxy
.0acd	20 5c 12	               jsr  delay
.0ad0	20 5c 12	               jsr  delay
.0ad3	20 5c 12	               jsr  delay
.0ad6	20 5c 12	               jsr  delay
.0ad9	20 5c 12	               jsr  delay
.0adc	20 3a 22	               jsr  pop
.0adf	60		               rts
.0ae0			setdefaultchar
.0ae0	20 fb 21	               jsr  push
.0ae3	a9 40		               lda  #$40
.0ae5	8d 37 09	               sta  currentkey
.0ae8	aa		               tax
.0ae9	bc f6 24	               ldy  asciitorom,x
.0aec	8c 39 09	               sty  bitmapoffset
.0aef	20 aa 0b	               jsr  drawkeyval
.0af2	20 5f 0f	               jsr  drawbitmap
.0af5	20 fb 21	               jsr  push
.0af8	a2 0d		               ldx  #13
.0afa	a0 0c		               ldy  #12
.0afc	20 24 21	               jsr  gotoxy
.0aff	20 3a 22	               jsr  pop
.0b02	20 04 21	               jsr  putch
.0b05	20 fb 21	               jsr  push
.0b08	a2 11		               ldx  #17
.0b0a	a0 05		               ldy  #5
.0b0c	20 24 21	               jsr  gotoxy
.0b0f	20 3a 22	               jsr  pop
.0b12	20 c1 24	               jsr  atodec
.0b15	20 fb 21	               jsr  push
.0b18	a2 c5		isx            ldx  #<adec
.0b1a	a0 23		isy            ldy  #>adec
.0b1c	20 0a 21	               jsr  puts
.0b1f	20 3a 22	               jsr  pull
.0b22	20 3a 22	               jsr  pop
.0b25	60		               rts
.0b26			resetmenuacolor
.0b26	20 fb 21	               jsr  push
.0b29	a9 03		               lda  #menu1col1
.0b2b	8d 03 1f	               sta  f1abutton
.0b2e	8d 39 1f	               sta  f3abutton
.0b31	8d 6f 1f	               sta  f5abutton
.0b34	8d a5 1f	               sta  f7abutton
.0b37	a9 0e		               lda  #menu1col2
.0b39	8d 1e 1f	               sta  f2abutton
.0b3c	8d 54 1f	               sta  f4abutton
.0b3f	8d 8a 1f	               sta  f6abutton
.0b42	8d c0 1f	               sta  f8abutton
.0b45	20 3a 22	               jsr  pop
.0b48	60		               rts
.0b49			resetmenubcolor
.0b49	20 fb 21	               jsr  push
.0b4c	a9 0f		               lda  #menu2col1
.0b4e	8d db 1f	               sta  f1bbutton
.0b51	8d 11 20	               sta  f3bbutton
.0b54	8d 47 20	               sta  f5bbutton
.0b57	8d 7d 20	               sta  f7bbutton
.0b5a	a9 0f		               lda  #menu2col1
.0b5c	8d f6 1f	               sta  f2bbutton
.0b5f	8d 2c 20	               sta  f4bbutton
.0b62	8d 62 20	               sta  f6bbutton
.0b65	8d 98 20	               sta  f8bbutton
.0b68	20 3a 22	               jsr  pop
.0b6b	60		               rts
.0b6c			setmenuacolor
.0b6c	20 fb 21	               jsr  push
.0b6f	8d 03 1f	               sta  f1abutton
.0b72	8d 1e 1f	               sta  f2abutton
.0b75	8d 39 1f	               sta  f3abutton
.0b78	8d 54 1f	               sta  f4abutton
.0b7b	8d 6f 1f	               sta  f5abutton
.0b7e	8d 8a 1f	               sta  f6abutton
.0b81	8d a5 1f	               sta  f7abutton
.0b84	8d c0 1f	               sta  f8abutton
.0b87	20 3a 22	               jsr  pop
.0b8a	60		               rts
.0b8b			setmenubcolor
.0b8b	20 fb 21	               jsr  push
.0b8e	8d db 1f	               sta  f1bbutton
.0b91	8d f6 1f	               sta  f2bbutton
.0b94	8d 11 20	               sta  f3bbutton
.0b97	8d 2c 20	               sta  f4bbutton
.0b9a	8d 47 20	               sta  f5bbutton
.0b9d	8d 62 20	               sta  f6bbutton
.0ba0	8d 7d 20	               sta  f7bbutton
.0ba3	8d 98 20	               sta  f8bbutton
.0ba6	20 3a 22	               jsr  pop
.0ba9	60		               rts
.0baa			drawkeyval
.0baa	20 fb 21	               jsr  push
.0bad	20 fb 21	               jsr  push
.0bb0	a2 01		               ldx  #1
.0bb2	a0 13		               ldy  #19
.0bb4	20 24 21	               jsr  gotoxy
.0bb7	20 3a 22	               jsr  pop
.0bba	ad 37 09	               lda  currentkey
.0bbd	20 04 21	               jsr  putch
.0bc0	48		               pha
.0bc1	a9 3d		               lda  #'='
.0bc3	20 04 21	               jsr  putch
.0bc6	a9 25		               lda  #'%'
.0bc8	20 04 21	               jsr  putch
.0bcb	68		               pla
.0bcc	20 87 24	               jsr  putabin
.0bcf	20 fb 21	               jsr  push
.0bd2	a2 01		               ldx  #1
.0bd4	a0 14		               ldy  #20
.0bd6	20 24 21	               jsr  gotoxy
.0bd9	20 3a 22	               jsr  pop
.0bdc	20 fb 21	               jsr  push
.0bdf	a2 ab		isx            ldx  #<txt1
.0be1	a0 0c		isy            ldy  #>txt1
.0be3	20 0a 21	               jsr  puts
.0be6	20 3a 22	               jsr  pull
.0be9	a9 24		               lda  #'$'
.0beb	20 04 21	               jsr  putch
.0bee	ad 37 09	               lda  currentkey
.0bf1	20 f4 23	               jsr  putahex
.0bf4	20 fb 21	               jsr  push
.0bf7	a2 01		               ldx  #1
.0bf9	a0 15		               ldy  #21
.0bfb	20 24 21	               jsr  gotoxy
.0bfe	20 3a 22	               jsr  pop
.0c01	20 fb 21	               jsr  push
.0c04	a2 b6		isx            ldx  #<txt2
.0c06	a0 0c		isy            ldy  #>txt2
.0c08	20 0a 21	               jsr  puts
.0c0b	20 3a 22	               jsr  pull
.0c0e	a9 24		               lda  #'$'
.0c10	20 04 21	               jsr  putch
.0c13	ad 2b 09	               lda  bitmapaddr+1
.0c16	20 f4 23	               jsr  putahex
.0c19	ad 2a 09	               lda  bitmapaddr
.0c1c	20 f4 23	               jsr  putahex
.0c1f	20 fb 21	               jsr  push
.0c22	a2 01		               ldx  #1
.0c24	a0 16		               ldy  #22
.0c26	20 24 21	               jsr  gotoxy
.0c29	20 3a 22	               jsr  pop
.0c2c	20 fb 21	               jsr  push
.0c2f	a2 c1		isx            ldx  #<txt3
.0c31	a0 0c		isy            ldy  #>txt3
.0c33	20 0a 21	               jsr  puts
.0c36	20 3a 22	               jsr  pull
.0c39	a9 24		               lda  #'$'
.0c3b	20 04 21	               jsr  putch
.0c3e	ad 39 09	               lda  bitmapoffset
.0c41	20 f4 23	               jsr  putahex
.0c44	20 fb 21	               jsr  push
.0c47	a2 01		               ldx  #1
.0c49	a0 17		               ldy  #23
.0c4b	20 24 21	               jsr  gotoxy
.0c4e	20 3a 22	               jsr  pop
.0c51	20 fb 21	               jsr  push
.0c54	a2 ce		isx            ldx  #<txt4
.0c56	a0 0c		isy            ldy  #>txt4
.0c58	20 0a 21	               jsr  puts
.0c5b	20 3a 22	               jsr  pull
.0c5e	a9 24		               lda  #'$'
.0c60	20 04 21	               jsr  putch
.0c63	ad 3b 09	               lda  mapaddr+1
.0c66	20 f4 23	               jsr  putahex
.0c69	ad 3a 09	               lda  mapaddr
.0c6c	20 f4 23	               jsr  putahex
.0c6f	20 fb 21	               jsr  push
.0c72	a2 01		               ldx  #1
.0c74	a0 18		               ldy  #24
.0c76	20 24 21	               jsr  gotoxy
.0c79	20 3a 22	               jsr  pop
.0c7c	20 fb 21	               jsr  push
.0c7f	a2 d9		isx            ldx  #<txt5
.0c81	a0 0c		isy            ldy  #>txt5
.0c83	20 0a 21	               jsr  puts
.0c86	20 3a 22	               jsr  pull
.0c89	ad 41 09	               lda  curscl
.0c8c	20 f4 23	               jsr  putahex
.0c8f	a9 da		               lda  #$da
.0c91	20 04 21	               jsr  putch
.0c94	ad 40 09	               lda  cursln
.0c97	20 f4 23	               jsr  putahex
.0c9a	20 3a 22	               jsr  pop
.0c9d	60		               rts
>0c9e	50 45 54 53	txt0           .null     "petscii :   "
>0ca2	43 49 49 20 3a 20 20 20 00
>0cab	4b 45 59 20	txt1           .null     "key code: "
>0caf	43 4f 44 45 3a 20 00
>0cb6	42 49 54 4d	txt2           .null     "bitmap..: "
>0cba	41 50 2e 2e 3a 20 00
>0cc1	4f 46 46 53	txt3           .null     "offset..:   "
>0cc5	45 54 2e 2e 3a 20 20 20 00
>0cce	4d 41 50 41	txt4           .null     "mapaddr.: "
>0cd2	44 44 52 2e 3a 20 00
>0cd9	43 55 52 53	txt5           .null     "cursval.: "
>0cdd	56 41 4c 2e 3a 20 00
>0ce4	53 54 41 43	txt6           .null     "stack......:"
>0ce8	4b 2e 2e 2e 2e 2e 2e 3a 00
.0cf1			keyaction
.0cf1	20 fb 21	               jsr  push
.0cf4	20 1b 26	loop           jsr  getkey
.0cf7	c9 85		f1             cmp  #key_f1
.0cf9	d0 03		               bne  f2
.0cfb	4c 79 0d	               jmp  dof1
.0cfe	c9 89		f2             cmp  #key_f2
.0d00	d0 03		               bne  f3
.0d02	4c 7f 0d	               jmp  dof2
.0d05	c9 86		f3             cmp  #key_f3
.0d07	d0 03		               bne  f4
.0d09	4c 85 0d	               jmp  dof3
.0d0c	c9 8a		f4             cmp  #key_f4
.0d0e	d0 03		               bne  f5
.0d10	4c 8b 0d	               jmp  dof4
.0d13	c9 87		f5             cmp  #key_f5
.0d15	d0 03		               bne  f6
.0d17	4c 91 0d	               jmp  dof5
.0d1a	c9 8b		f6             cmp  #key_f6
.0d1c	d0 03		               bne  f7
.0d1e	4c 97 0d	               jmp  dof6
.0d21	c9 88		f7             cmp  #key_f7
.0d23	d0 03		               bne  f8
.0d25	4c 9d 0d	               jmp  dof7
.0d28	c9 8c		f8             cmp  #key_f8
.0d2a	d0 03		               bne  ctrlx
.0d2c	4c a3 0d	               jmp  dof8
.0d2f	c9 18		ctrlx          cmp  #ctrl_x
.0d31	d0 03		               bne  ctrlr
.0d33	4c a9 0d	               jmp  doquit
.0d36	c9 12		ctrlr          cmp  #ctrl_r
.0d38	d0 06		               bne  ishex14
.0d3a	20 5c 09	               jsr  screenredraw
.0d3d	4c f4 0c	               jmp  loop
.0d40	c9 14		ishex14        cmp  #$14
.0d42	d0 03		               bne  ishex12
.0d44	4c f4 0c	               jmp  loop
.0d47	c9 12		ishex12        cmp  #$12
.0d49	d0 03		               bne  reste
.0d4b	4c f4 0c	               jmp  loop
.0d4e			reste
.0d4e	20 fb 21	               jsr  push
.0d51	a2 0d		               ldx  #13
.0d53	a0 0c		               ldy  #12
.0d55	20 24 21	               jsr  gotoxy
.0d58	20 3a 22	               jsr  pop
.0d5b	20 04 21	               jsr  putch
.0d5e	48		               pha
.0d5f	ad 37 09	               lda  currentkey
.0d62	8d 38 09	               sta  previouskey
.0d65	68		               pla
.0d66	8d 37 09	               sta  currentkey
.0d69	aa		               tax
.0d6a	bc f6 24	               ldy  asciitorom,x
.0d6d	8c 39 09	               sty  bitmapoffset
.0d70	20 aa 0b	               jsr  drawkeyval
.0d73	20 5f 0f	               jsr  drawbitmap
.0d76	4c f4 0c	               jmp  loop
.0d79	20 72 12	dof1           jsr  f1action  ;edit/reverse
.0d7c	4c f4 0c	               jmp  loop
.0d7f	20 97 13	dof2           jsr  f2action  ;save/flip vert
.0d82	4c f4 0c	               jmp  loop
.0d85	20 4f 14	dof3           jsr  f3action  ;load/flip horz
.0d88	4c f4 0c	               jmp  loop
.0d8b	20 30 15	dof4           jsr  f4action  ;copy/scroll r
.0d8e	4c f4 0c	               jmp  loop
.0d91	20 14 16	dof5           jsr  f5action  ;clear/scroll l
.0d94	4c f4 0c	               jmp  loop
.0d97	20 cc 16	dof6           jsr  f6action  ;fill;/scroll up
.0d9a	4c f4 0c	               jmp  loop
.0d9d	20 84 17	dof7           jsr  f7action  ;clear;/scroll down
.0da0	4c f4 0c	               jmp  loop
.0da3	20 41 18	dof8           jsr  f8action  ; function
.0da6	4c f4 0c	               jmp  loop
.0da9	20 3a 22	doquit         jsr  pop
.0dac	60		               rts
.0dad			editor
.0dad	20 fb 21	               jsr  push
.0db0	20 fb 21	               jsr  push
.0db3	a2 5c		               ldx  #<blankmsg
.0db5	a0 1a		               ldy  #>blankmsg
.0db7	20 93 21	               jsr  putscxy
.0dba	a2 ff		               ldx  #<exit_msg
.0dbc	a0 1c		               ldy  #>exit_msg
.0dbe	20 93 21	               jsr  putscxy
.0dc1	20 3a 22	               jsr  pop
.0dc4	20 fb 21	               jsr  push
.0dc7	a2 5c		               ldx  #<blankmsg
.0dc9	a0 1a		               ldy  #>blankmsg
.0dcb	20 93 21	               jsr  putscxy
.0dce	a2 bf		               ldx  #<edit_msg
.0dd0	a0 1a		               ldy  #>edit_msg
.0dd2	20 93 21	               jsr  putscxy
.0dd5	20 3a 22	               jsr  pop
.0dd8	20 1b 0f	               jsr  setcurs
.0ddb	ad 37 09	               lda  currentkey
.0dde	20 fb 21	               jsr  push
.0de1	a2 11		               ldx  #17
.0de3	a0 05		               ldy  #5
.0de5	20 24 21	               jsr  gotoxy
.0de8	20 3a 22	               jsr  pop
.0deb	20 c1 24	               jsr  atodec
.0dee	20 fb 21	               jsr  push
.0df1	a2 c5		isx            ldx  #<adec
.0df3	a0 23		isy            ldy  #>adec
.0df5	20 0a 21	               jsr  puts
.0df8	20 3a 22	               jsr  pull
.0dfb	20 5f 0f	               jsr  drawbitmap
.0dfe	20 1b 26	ed_loop        jsr  getkey
.0e01	c9 85		f1             cmp  #f1key
.0e03	d0 03		               bne  cu
.0e05	4c ed 0e	               jmp  do_ctrlx
.0e08	c9 91		cu             cmp  #cursu
.0e0a	d0 03		               bne  cd
.0e0c	4c 98 0e	               jmp  do_up
.0e0f	c9 11		cd             cmp  #cursd
.0e11	d0 03		               bne  cl
.0e13	4c ab 0e	               jmp  do_down
.0e16	c9 9d		cl             cmp  #cursl
.0e18	d0 03		               bne  cr
.0e1a	4c be 0e	               jmp  do_left
.0e1d	c9 1d		cr             cmp  #cursr
.0e1f	d0 03		               bne  cx
.0e21	4c d1 0e	               jmp  do_right
.0e24	c9 18		cx             cmp  #ctrl_x
.0e26	d0 03		               bne  sp
.0e28	4c ed 0e	               jmp  do_ctrlx
.0e2b	c9 20		sp             cmp  #$20
.0e2d	d0 03		               bne  ishex14
.0e2f	4c e4 0e	               jmp  do_swap
.0e32	c9 14		ishex14        cmp  #$14
.0e34	d0 03		               bne  ishex12
.0e36	4c e4 0e	               jmp  do_swap
.0e39	c9 12		ishex12        cmp  #$12
.0e3b	d0 03		               bne  rest
.0e3d	4c e4 0e	               jmp  do_swap
.0e40			rest
.0e40	20 fb 21	               jsr  push
.0e43	a2 0d		               ldx  #13
.0e45	a0 0c		               ldy  #12
.0e47	20 24 21	               jsr  gotoxy
.0e4a	20 3a 22	               jsr  pop
.0e4d	20 04 21	               jsr  putch
.0e50	48		               pha
.0e51	ad 37 09	               lda  currentkey
.0e54	8d 38 09	               sta  previouskey
.0e57	68		               pla
.0e58	8d 37 09	               sta  currentkey
.0e5b	aa		               tax
.0e5c	bc f6 24	               ldy  asciitorom,x
.0e5f	8c 39 09	               sty  bitmapoffset
.0e62	20 aa 0b	               jsr  drawkeyval
.0e65	20 5f 0f	               jsr  drawbitmap
.0e68	20 fb 21	               jsr  push
.0e6b	a2 0d		               ldx  #13
.0e6d	a0 0c		               ldy  #12
.0e6f	20 24 21	               jsr  gotoxy
.0e72	20 3a 22	               jsr  pop
.0e75	20 04 21	               jsr  putch
.0e78	20 fb 21	               jsr  push
.0e7b	a2 11		               ldx  #17
.0e7d	a0 05		               ldy  #5
.0e7f	20 24 21	               jsr  gotoxy
.0e82	20 3a 22	               jsr  pop
.0e85	20 c1 24	               jsr  atodec
.0e88	20 fb 21	               jsr  push
.0e8b	a2 c5		isx            ldx  #<adec
.0e8d	a0 23		isy            ldy  #>adec
.0e8f	20 0a 21	               jsr  puts
.0e92	20 3a 22	               jsr  pull
.0e95	4c ea 0e	               jmp  totop
.0e98	ad 40 09	do_up          lda  cursln
.0e9b	c9 09		               cmp  #grid_top
.0e9d	f0 4b		               beq  totop
.0e9f	20 3d 0f	               jsr  clrcurs
.0ea2	ce 40 09	               dec  cursln
.0ea5	20 1b 0f	               jsr  setcurs
.0ea8	4c ea 0e	               jmp  totop
.0eab	ad 40 09	do_down        lda  cursln
.0eae	c9 10		               cmp  #grid_bot
.0eb0	f0 38		               beq  totop
.0eb2	20 3d 0f	               jsr  clrcurs
.0eb5	ee 40 09	               inc  cursln
.0eb8	20 1b 0f	               jsr  setcurs
.0ebb	4c ea 0e	               jmp  totop
.0ebe	ad 41 09	do_left        lda  curscl
.0ec1	c9 01		               cmp  #grid_left
.0ec3	f0 25		               beq  totop
.0ec5	20 3d 0f	               jsr  clrcurs
.0ec8	ce 41 09	               dec  curscl
.0ecb	20 1b 0f	               jsr  setcurs
.0ece	4c ea 0e	               jmp  totop
.0ed1	ad 41 09	do_right       lda  curscl
.0ed4	c9 08		               cmp  #grid_right
.0ed6	f0 12		               beq  totop
.0ed8	20 3d 0f	               jsr  clrcurs
.0edb	ee 41 09	               inc  curscl
.0ede	20 1b 0f	               jsr  setcurs
.0ee1	4c ea 0e	               jmp  totop
.0ee4	20 f4 0e	do_swap        jsr  do_eor
.0ee7	20 5f 0f	               jsr  drawbitmap
.0eea	4c fe 0d	totop          jmp  ed_loop
.0eed	20 3d 0f	do_ctrlx       jsr  clrcurs
.0ef0	20 3a 22	               jsr  pop
.0ef3	60		               rts
.0ef4			do_eor
.0ef4	20 fb 21	               jsr  push
.0ef7	ad 3a 09	               lda  mapaddr
.0efa	85 fd		               sta  zpage2
.0efc	ad 3b 09	               lda  mapaddr+1
.0eff	85 fe		               sta  zpage2+1
.0f01	ae 40 09	               ldx  cursln     ; calcul de
.0f04	ca		               dex            ; l'offset de
.0f05	8a		               txa            ; la
.0f06	29 f7		               and  #$f7      ; ligne
.0f08	a8		               tay
.0f09	ae 41 09	               ldx  curscl
.0f0c	ca		               dex
.0f0d	bd 2c 09	               lda  eorval,x
.0f10	51 fd		               eor  (zpage2),y
.0f12	20 aa 0b	               jsr  drawkeyval
.0f15	91 fd		               sta  (zpage2),y
.0f17	20 3a 22	               jsr  pop
.0f1a	60		               rts
.0f1b			setcurs
.0f1b	20 fb 21	               jsr  push
.0f1e	a2 01		               ldx  #grid_left
.0f20	ac 40 09	               ldy  cursln
.0f23	20 24 21	               jsr  gotoxy
.0f26	a9 da		               lda  #$da
.0f28	20 04 21	               jsr  putch
.0f2b	ae 41 09	               ldx  curscl
.0f2e	e8		               inx
.0f2f	a0 08		               ldy  #grid_top-1
.0f31	20 24 21	               jsr  gotoxy
.0f34	a9 da		               lda  #$da
.0f36	20 04 21	               jsr  putch
.0f39	20 3a 22	               jsr  pop
.0f3c	60		               rts
.0f3d			clrcurs
.0f3d	20 fb 21	               jsr  push
.0f40	a2 01		               ldx  #grid_left
.0f42	ac 40 09	               ldy  cursln
.0f45	20 24 21	               jsr  gotoxy
.0f48	a9 20		               lda  #$20
.0f4a	20 04 21	               jsr  putch
.0f4d	ae 41 09	               ldx  curscl
.0f50	e8		               inx
.0f51	a0 08		               ldy  #grid_top-1
.0f53	20 24 21	               jsr  gotoxy
.0f56	a9 20		               lda  #$20
.0f58	20 04 21	               jsr  putch
.0f5b	20 3a 22	               jsr  pop
.0f5e	60		               rts
.0f5f			drawbitmap
.0f5f	20 fb 21	               jsr  push
.0f62	20 c6 0f	               jsr  calcmapaddr
.0f65	ad 3a 09	               lda  mapaddr        ; on pointe sur la table des bitmaps
.0f68	85 fb		               sta  zpage1
.0f6a	ad 3b 09	               lda  mapaddr+1
.0f6d	85 fc		               sta  zpage1+1
.0f6f	a0 00		drawchar       ldy  #$00
.0f71	a2 09		               ldx  #grid_top      ;on replace la ...
.0f73	8e 7c 0f	               stx  isy+1          ;ligne de départ
.0f76	20 fb 21	nextline       jsr  push
.0f79	a2 02		               ldx  #grid_left+1        ; la colonne
.0f7b	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.0f7d	20 24 21	               jsr  gotoxy
.0f80	20 3a 22	               jsr  pop
.0f83	b1 fb		               lda  (zpage1),y     ; on li une ligne
.0f85	20 65 24	               jsr  atobin
.0f88	20 f5 0f	               jsr  abintograph
.0f8b	20 fb 21	               jsr  push
.0f8e	a2 bc		isx            ldx  #<abin
.0f90	a0 23		isy            ldy  #>abin
.0f92	20 0a 21	               jsr  puts
.0f95	20 3a 22	               jsr  pull
.0f98	ee 7c 0f	               inc  isy+1
.0f9b	c8		               iny
.0f9c	c0 08		               cpy  #$08
.0f9e	30 d6		               bmi  nextline
.0fa0	20 a7 0f	               jsr  highlight
.0fa3	20 3a 22	               jsr  pop
.0fa6	60		               rts
.0fa7			highlight
.0fa7	20 fb 21	               jsr  push
.0faa	ae 38 09	               ldx  previouskey
.0fad	bd f6 24	               lda  asciitorom,x
.0fb0	aa		               tax
.0fb1	a9 0f		               lda  #charscolor
.0fb3	9d 00 d8	               sta  colorram,x
.0fb6	ae 37 09	               ldx  currentkey
.0fb9	bd f6 24	               lda  asciitorom,x
.0fbc	aa		               tax
.0fbd	a9 01		               lda  #charcolor
.0fbf	9d 00 d8	               sta  colorram,x
.0fc2	20 3a 22	               jsr  pop
.0fc5	60		               rts
.0fc6			calcmapaddr
.0fc6	20 fb 21	               jsr  push
.0fc9	ad 2a 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0fcc	85 fb		               sta  zpage1
.0fce	ad 2b 09	               lda  bitmapaddr+1
.0fd1	85 fc		               sta  zpage1+1
.0fd3	ae 39 09	               ldx  bitmapoffset
.0fd6	e0 00		               cpx  #$00
.0fd8	f0 08		               beq  thesame         ; sommes nous déja à 0
.0fda	a9 08		addagain       lda  #$08
.0fdc	20 3e 12	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0fdf	ca		               dex                 ; pour chaque caracteres
.0fe0	d0 f8		               bne  addagain
.0fe2	48		thesame        pha
.0fe3	a5 fb		               lda  zpage1
.0fe5	8d 3a 09	               sta  mapaddr
.0fe8	a5 fc		               lda  zpage1+1
.0fea	8d 3b 09	               sta  mapaddr+1
.0fed	68		               pla
.0fee	20 aa 0b	               jsr  drawkeyval
.0ff1	20 3a 22	out            jsr  pop
.0ff4	60		               rts
.0ff5			abintograph
.0ff5	20 fb 21	               jsr  push
.0ff8	a9 bc		               lda  #<abin
.0ffa	85 fb		               sta  zpage1
.0ffc	a9 23		               lda  #>abin+1
.0ffe	85 fc		               sta  zpage1+1
.1000	a0 00		               ldy  #$00
.1002	b1 fb		nextbit        lda  (zpage1),y
.1004	c9 30		               cmp  #$30
.1006	f0 07		               beq  itszero
.1008	a9 d1		itsone         lda  #$d1
.100a	91 fb		               sta  (zpage1),y
.100c	4c 13 10	               jmp  next
.100f	a9 2e		itszero        lda  #$2e
.1011	91 fb		               sta  (zpage1),y
.1013	c8		next           iny
.1014	c0 08		               cpy  #$08
.1016	30 ea		               bmi  nextbit
.1018	20 3a 22	               jsr  pop
.101b	60		               rts
.101c			setscreenptr
.101c	20 fb 21	               jsr  push
.101f	a9 08		               lda  #$08      ; basic commande to disable ...
.1021	20 d2 ff	               jsr  chrout    ; ... character set change.
.1024	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.1027	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.1029	09 0a		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.102b	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.102e	20 3a 22	               jsr  pop
.1031	60		               rts
.1032			copycharset
.1032	20 fb 21	               jsr  push
.1035	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.1038	29 fe		               and  #%11111110     ;254
.103a	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.103d	a5 01		               lda  u6510map       ;$01
.103f	29 fb		               and  #%11111011     ;251
.1041	85 01		               sta  u6510map       ;$01
.1043	20 58 10	               jsr  memcopy
.1046	a5 01		               lda  u6510map       ;$01
.1048	09 04		               ora  #%00000100
.104a	85 01		               sta  u6510map       ;$01
.104c	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.104f	09 01		               ora  #%00000001     ;254
.1051	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.1054	20 3a 22	               jsr  pop
.1057	60		               rts
.1058			memcopy
.1058	20 fb 21	               jsr  push
.105b	ad 26 09	               lda  startaddr
.105e	85 fb		               sta  zpage1
.1060	ad 27 09	               lda  startaddr+1
.1063	85 fc		               sta  zpage1+1
.1065	ad 2a 09	               lda  bitmapaddr
.1068	85 fd		               sta  zpage2
.106a	ad 2b 09	               lda  bitmapaddr+1
.106d	85 fe		               sta  zpage2+1
.106f	a0 00		               ldy  #$00
.1071	b1 fb		onemore        lda  (zpage1),y
.1073	91 fd		               sta  (zpage2),y
.1075	20 02 23	               jsr  inczp1
.1078	20 1a 23	               jsr  inczp2
.107b	a5 fc		               lda  zpage1+1
.107d	cd 29 09	               cmp  stopaddr+1
.1080	d0 ef		               bne  onemore
.1082	a5 fb		               lda  zpage1
.1084	cd 28 09	               cmp  stopaddr
.1087	d0 e8		               bne  onemore
.1089	20 3a 22	               jsr  pop
.108c	60		               rts
.108d			staticscreen
.108d	48		               pha
.108e	a9 0b		               lda  #bordure
.1090	8d 20 d0	               sta  $d020
.1093	68		               pla
.1094	48		               pha
.1095	a9 00		               lda  #fond
.1097	8d 21 d0	               sta  $d021
.109a	68		               pla
.109b	20 95 11	               jsr  drawlines
.109e	20 71 11	               jsr  drawallchars
.10a1	20 dd 11	               jsr  drawgrid
.10a4	20 e2 10	               jsr  drawfkeys
.10a7	a9 0a		               lda  #vrose
.10a9	8d e8 1c	               sta  redraw_msg
.10ac	20 fb 21	               jsr  push
.10af	a2 5c		               ldx  #<blankmsg
.10b1	a0 1a		               ldy  #>blankmsg
.10b3	20 93 21	               jsr  putscxy
.10b6	a2 e8		               ldx  #<redraw_msg
.10b8	a0 1c		               ldy  #>redraw_msg
.10ba	20 93 21	               jsr  putscxy
.10bd	20 3a 22	               jsr  pop
.10c0	20 fb 21	               jsr  push
.10c3	a2 5c		               ldx  #<blankmsg
.10c5	a0 1a		               ldy  #>blankmsg
.10c7	20 93 21	               jsr  putscxy
.10ca	a2 d3		               ldx  #<quit_msg
.10cc	a0 1c		               ldy  #>quit_msg
.10ce	20 93 21	               jsr  putscxy
.10d1	20 3a 22	               jsr  pop
.10d4	20 fb 21	               jsr  push
.10d7	a2 00		               ldx  #0
.10d9	a0 07		               ldy  #7
.10db	20 24 21	               jsr  gotoxy
.10de	20 3a 22	               jsr  pop
.10e1	60		               rts
.10e2			drawfkeys
.10e2	20 fb 21	               jsr  push
.10e5	ad 35 09	               lda  fkeyset
.10e8	c9 00		               cmp  #$0
.10ea	d0 42		               bne  secondks
.10ec	a2 cd		               ldx #<titremenu1
.10ee	a0 1e		               ldy #>titremenu1
.10f0	20 93 21	               jsr putscxy
.10f3	a2 03		               ldx #<f1abutton
.10f5	a0 1f		               ldy #>f1abutton
.10f7	20 93 21	               jsr putscxy
.10fa	a2 1e		               ldx #<f2abutton
.10fc	a0 1f		               ldy #>f2abutton
.10fe	20 93 21	               jsr putscxy
.1101	a2 39		               ldx #<f3abutton
.1103	a0 1f		               ldy #>f3abutton
.1105	20 93 21	               jsr putscxy
.1108	a2 54		               ldx #<f4abutton
.110a	a0 1f		               ldy #>f4abutton
.110c	20 93 21	               jsr putscxy
.110f	a2 6f		               ldx #<f5abutton
.1111	a0 1f		               ldy #>f5abutton
.1113	20 93 21	               jsr putscxy
.1116	a2 8a		               ldx #<f6abutton
.1118	a0 1f		               ldy #>f6abutton
.111a	20 93 21	               jsr putscxy
.111d	a2 a5		               ldx #<f7abutton
.111f	a0 1f		               ldy #>f7abutton
.1121	20 93 21	               jsr putscxy
.1124	a2 c0		               ldx #<f8abutton
.1126	a0 1f		               ldy #>f8abutton
.1128	20 93 21	               jsr putscxy
.112b	4c 6d 11	               jmp end
.112e			secondks
.112e	a2 e8		               ldx #<titremenu2
.1130	a0 1e		               ldy #>titremenu2
.1132	20 93 21	               jsr putscxy
.1135	a2 db		               ldx #<f1bbutton
.1137	a0 1f		               ldy #>f1bbutton
.1139	20 93 21	               jsr putscxy
.113c	a2 f6		               ldx #<f2bbutton
.113e	a0 1f		               ldy #>f2bbutton
.1140	20 93 21	               jsr putscxy
.1143	a2 11		               ldx #<f3bbutton
.1145	a0 20		               ldy #>f3bbutton
.1147	20 93 21	               jsr putscxy
.114a	a2 2c		               ldx #<f4bbutton
.114c	a0 20		               ldy #>f4bbutton
.114e	20 93 21	               jsr putscxy
.1151	a2 47		               ldx #<f5bbutton
.1153	a0 20		               ldy #>f5bbutton
.1155	20 93 21	               jsr putscxy
.1158	a2 62		               ldx #<f6bbutton
.115a	a0 20		               ldy #>f6bbutton
.115c	20 93 21	               jsr putscxy
.115f	a2 7d		               ldx #<f7bbutton
.1161	a0 20		               ldy #>f7bbutton
.1163	20 93 21	               jsr putscxy
.1166	a2 98		               ldx #<f8bbutton
.1168	a0 20		               ldy #>f8bbutton
.116a	20 93 21	               jsr putscxy
.116d	20 3a 22	end            jsr  pop
.1170	60		               rts
.1171			drawallchars
.1171	20 fb 21	               jsr push
.1174	20 fb 21	               jsr  push
.1177	a2 00		               ldx  #0
.1179	a0 00		               ldy  #0
.117b	20 24 21	               jsr  gotoxy
.117e	20 3a 22	               jsr  pop
.1181	a2 00		               ldx  #$00
.1183	8a		nextc          txa
.1184	9d 00 04	               sta  scrnnewram,x
.1187	a9 0f		               lda  #charscolor
.1189	9d 00 d8	               sta  colorram,x
.118c	e8		               inx
.118d	e0 80		               cpx  #$80
.118f	d0 f2		               bne  nextc
.1191	20 3a 22	               jsr  pop
.1194	60		               rts
.1195			drawlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.1195	20 fb 21	               jsr  push
.1198	a2 28		               ldx  #40
.119a	a9 40		               lda  #64
.119c	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.119f	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.11a2	ca		               dex
.11a3	e0 10		hline          cpx  #vlinepos
.11a5	10 03		               bpl  notyet
.11a7	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.11aa	e0 00		notyet         cpx  #$00
.11ac	d0 ee		               bne  nextl
.11ae	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.11b0	85 fb		               sta  zpage1
.11b2	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.11b4	85 fc		               sta  zpage1+1
.11b6	a0 00		               ldy  #0
.11b8	a9 72		               lda  #114
.11ba	91 fb		               sta  (zpage1),y
.11bc	20 4c 12	               jsr  zp1add40
.11bf	a2 12		               ldx  #24-hline2
.11c1	a9 5d		               lda  #93
.11c3	91 fb		another93      sta  (zpage1),y
.11c5	20 4c 12	               jsr  zp1add40
.11c8	ca		               dex
.11c9	d0 f8		               bne  another93
.11cb	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.11cd	85 fb		               sta  zpage1
.11cf	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.11d1	85 fc		               sta  zpage1+1
.11d3	a0 00		               ldy  #0
.11d5	a9 73		               lda  #115
.11d7	91 fb		               sta  (zpage1),y
.11d9	20 3a 22	               jsr  pop
.11dc	60		               rts
.11dd			drawgrid
.11dd	20 fb 21	               jsr  push
.11e0	20 b3 20	               jsr  screendis
.11e3	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.11e5	85 fb		               sta  zpage1
.11e7	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.11e9	85 fc		               sta  zpage1+1
.11eb	a2 08		               ldx  #8
.11ed	a9 65		nextbox        lda  #101
.11ef	a0 09		               ldy  #9
.11f1	91 fb		               sta  (zpage1),y
.11f3	88		               dey
.11f4	a9 2e		               lda  #$2e
.11f6	91 fb		nextcol        sta  (zpage1),y
.11f8	88		               dey
.11f9	d0 fb		               bne  nextcol
.11fb	20 4c 12	               jsr  zp1add40
.11fe	ca		               dex
.11ff	d0 ec		               bne  nextbox
.1201	a0 08		               ldy  #8
.1203	a9 77		               lda  #119
.1205	91 fb		nextlin        sta  (zpage1),y
.1207	88		               dey
.1208	d0 fb		               bne  nextlin
.120a	a9 3e		               lda  #$3e
.120c	8d eb 05	               sta  scrnnewram+(40*(12))+11
.120f	a9 70		               lda  #$70                     ;+
.1211	8d c4 05	               sta  scrnnewram+(40*(11))+12
.1214	a9 43		               lda  #$43                     ;-
.1216	8d c5 05	               sta  scrnnewram+(40*(11))+13
.1219	a9 6e		               lda  #$6e                     ;+
.121b	8d c6 05	               sta  scrnnewram+(40*(11))+14
.121e	a9 5d		               lda  #$5d                     ;|
.1220	8d ec 05	               sta  scrnnewram+(40*(12))+12
.1223	a9 5d		               lda  #$5d                     ;|
.1225	8d ee 05	               sta  scrnnewram+(40*(12))+14
.1228	a9 6d		               lda  #$6d                     ;+
.122a	8d 14 06	               sta  scrnnewram+(40*(13))+12
.122d	a9 43		               lda  #$43                     ;-
.122f	8d 15 06	               sta  scrnnewram+(40*(13))+13
.1232	a9 7d		               lda  #$7d                     ;+
.1234	8d 16 06	               sta  scrnnewram+(40*(13))+14
.1237	20 c0 20	               jsr screenena
.123a	20 3a 22	               jsr  pop
.123d	60		               rts
.123e			zp1addnum
.123e	08		               php
.123f	48		               pha
.1240	18		               clc
.1241	65 fb		               adc  zpage1
.1243	90 02		               bcc  nocarry
.1245	e6 fc		               inc  zpage1+1
.1247	85 fb		nocarry        sta  zpage1
.1249	68		               pla
.124a	28		               plp
.124b	60		               rts
.124c			zp1add40
.124c	08		               php
.124d	48		               pha
.124e	18		               clc
.124f	a5 fb		               lda  zpage1
.1251	69 28		               adc  #40
.1253	90 02		               bcc  nocarry
.1255	e6 fc		               inc  zpage1+1
.1257	85 fb		nocarry        sta  zpage1
.1259	68		               pla
.125a	28		               plp
.125b	60		               rts
.125c			delay
.125c	20 fb 21	               jsr  push
.125f	a9 00		               lda  #$0
.1261	aa		               tax
.1262	a8		               tay
.1263	ca		xagain         dex
.1264	ca		               dex
.1265	88		yagain         dey
.1266	c0 00		               cpy  #$00
.1268	d0 fb		               bne  yagain
.126a	e0 00		               cpx  #$00
.126c	d0 f5		               bne  xagain
.126e	20 3a 22	               jsr  pop
.1271	60		               rts
.1272			f1action
.1272	48		               pha
.1273	a9 ff		               lda  #$ff
.1275	8d 34 09	               sta  editmode
.1278	ad 35 09	               lda  fkeyset
.127b	f0 03		               beq  menua
.127d	4c 37 13	               jmp  menub
.1280			menua
.1280	20 fb 21	               jsr  push
.1283	a2 5c		               ldx  #<blankmsg
.1285	a0 1a		               ldy  #>blankmsg
.1287	20 93 21	               jsr  putscxy
.128a	a2 bf		               ldx  #<f1a_msg
.128c	a0 1a		               ldy  #>f1a_msg
.128e	20 93 21	               jsr  putscxy
.1291	20 3a 22	               jsr  pop
.1294	08		               php
.1295	48		               pha
.1296	8a		               txa
.1297	48		               pha
.1298	ad 03 1f	               lda  f1abutton
.129b	48		               pha
.129c	a9 92		               lda  #146
.129e	8d 15 1f	               sta  f1abutton+18
.12a1	a9 01		               lda  #flashcol
.12a3	8d 03 1f	               sta  f1abutton
.12a6	a2 03		               ldx  #<f1abutton
.12a8	a0 1f		               ldy  #>f1abutton
.12aa	20 93 21	               jsr  putscxy
.12ad	20 5c 12	               jsr  delay
.12b0	a9 12		               lda  #18
.12b2	8d 15 1f	               sta  f1abutton+18
.12b5	68		               pla
.12b6	8d 03 1f	               sta  f1abutton
.12b9	a2 03		               ldx  #<f1abutton
.12bb	a0 1f		               ldy  #>f1abutton
.12bd	20 93 21	               jsr  putscxy
.12c0	68		               pla
.12c1	aa		               tax
.12c2	68		               pla
.12c3	28		               plp
.12c4	a9 0b		               lda  #vgris
.12c6	20 6c 0b	               jsr  setmenuacolor
.12c9	a9 03		               lda  #menu1col1
.12cb	8d 03 1f	               sta  f1abutton
.12ce	20 e2 10	               jsr  drawfkeys
.12d1	a9 0b		               lda  #vgris
.12d3	8d e8 1c	               sta  redraw_msg
.12d6	20 fb 21	               jsr  push
.12d9	a2 5c		               ldx  #<blankmsg
.12db	a0 1a		               ldy  #>blankmsg
.12dd	20 93 21	               jsr  putscxy
.12e0	a2 e8		               ldx  #<redraw_msg
.12e2	a0 1c		               ldy  #>redraw_msg
.12e4	20 93 21	               jsr  putscxy
.12e7	20 3a 22	               jsr  pop
.12ea	20 ad 0d	               jsr  editor
.12ed	a9 0a		               lda  #vrose
.12ef	8d e8 1c	               sta  redraw_msg
.12f2	20 fb 21	               jsr  push
.12f5	a2 5c		               ldx  #<blankmsg
.12f7	a0 1a		               ldy  #>blankmsg
.12f9	20 93 21	               jsr  putscxy
.12fc	a2 e8		               ldx  #<redraw_msg
.12fe	a0 1c		               ldy  #>redraw_msg
.1300	20 93 21	               jsr  putscxy
.1303	20 3a 22	               jsr  pop
.1306	20 fb 21	               jsr  push
.1309	a2 5c		               ldx  #<blankmsg
.130b	a0 1a		               ldy  #>blankmsg
.130d	20 93 21	               jsr  putscxy
.1310	a2 d3		               ldx  #<quit_msg
.1312	a0 1c		               ldy  #>quit_msg
.1314	20 93 21	               jsr  putscxy
.1317	20 3a 22	               jsr  pop
.131a	20 fb 21	               jsr  push
.131d	a2 5c		               ldx  #<blankmsg
.131f	a0 1a		               ldy  #>blankmsg
.1321	20 93 21	               jsr  putscxy
.1324	a2 2f		               ldx  #<menua_msg
.1326	a0 1c		               ldy  #>menua_msg
.1328	20 93 21	               jsr  putscxy
.132b	20 3a 22	               jsr  pop
.132e	20 26 0b	               jsr  resetmenuacolor
.1331	20 e2 10	               jsr  drawfkeys
.1334	4c 81 13	               jmp  out
.1337			menub
.1337	20 fb 21	               jsr  push
.133a	a2 5c		               ldx  #<blankmsg
.133c	a0 1a		               ldy  #>blankmsg
.133e	20 93 21	               jsr  putscxy
.1341	a2 95		               ldx  #<f1b_msg
.1343	a0 1b		               ldy  #>f1b_msg
.1345	20 93 21	               jsr  putscxy
.1348	20 3a 22	               jsr  pop
.134b	08		               php
.134c	48		               pha
.134d	8a		               txa
.134e	48		               pha
.134f	ad db 1f	               lda  f1bbutton
.1352	48		               pha
.1353	a9 92		               lda  #146
.1355	8d ed 1f	               sta  f1bbutton+18
.1358	a9 01		               lda  #flashcol
.135a	8d db 1f	               sta  f1bbutton
.135d	a2 db		               ldx  #<f1bbutton
.135f	a0 1f		               ldy  #>f1bbutton
.1361	20 93 21	               jsr  putscxy
.1364	20 5c 12	               jsr  delay
.1367	a9 12		               lda  #18
.1369	8d ed 1f	               sta  f1bbutton+18
.136c	68		               pla
.136d	8d db 1f	               sta  f1bbutton
.1370	a2 db		               ldx  #<f1bbutton
.1372	a0 1f		               ldy  #>f1bbutton
.1374	20 93 21	               jsr  putscxy
.1377	68		               pla
.1378	aa		               tax
.1379	68		               pla
.137a	28		               plp
.137b	20 29 1a	               jsr  flipvert
.137e	20 5f 0f	               jsr  drawbitmap
.1381	68		out            pla
.1382	20 fb 21	               jsr  push
.1385	a2 5c		               ldx  #<blankmsg
.1387	a0 1a		               ldy  #>blankmsg
.1389	20 93 21	               jsr  putscxy
.138c	a2 88		               ldx  #<prompt_msg
.138e	a0 1a		               ldy  #>prompt_msg
.1390	20 93 21	               jsr  putscxy
.1393	20 3a 22	               jsr  pop
.1396	60		               rts
.1397			f2action
.1397	48		               pha
.1398	a9 00		               lda  #$0
.139a	8d 34 09	               sta  editmode
.139d	ad 35 09	               lda  fkeyset
.13a0	d0 4d		               bne  menub
.13a2	20 fb 21	               jsr  push
.13a5	a2 5c		               ldx  #<blankmsg
.13a7	a0 1a		               ldy  #>blankmsg
.13a9	20 93 21	               jsr  putscxy
.13ac	a2 da		               ldx  #<f2a_msg
.13ae	a0 1a		               ldy  #>f2a_msg
.13b0	20 93 21	               jsr  putscxy
.13b3	20 3a 22	               jsr  pop
.13b6	08		               php
.13b7	48		               pha
.13b8	8a		               txa
.13b9	48		               pha
.13ba	ad 1e 1f	               lda  f2abutton
.13bd	48		               pha
.13be	a9 92		               lda  #146
.13c0	8d 30 1f	               sta  f2abutton+18
.13c3	a9 01		               lda  #flashcol
.13c5	8d 1e 1f	               sta  f2abutton
.13c8	a2 1e		               ldx  #<f2abutton
.13ca	a0 1f		               ldy  #>f2abutton
.13cc	20 93 21	               jsr  putscxy
.13cf	20 5c 12	               jsr  delay
.13d2	a9 12		               lda  #18
.13d4	8d 30 1f	               sta  f2abutton+18
.13d7	68		               pla
.13d8	8d 1e 1f	               sta  f2abutton
.13db	a2 1e		               ldx  #<f2abutton
.13dd	a0 1f		               ldy  #>f2abutton
.13df	20 93 21	               jsr  putscxy
.13e2	68		               pla
.13e3	aa		               tax
.13e4	68		               pla
.13e5	28		               plp
.13e6	20 0e 0a	               jsr  copychar
.13e9	20 5f 0f	               jsr  drawbitmap
.13ec	4c 39 14	               jmp  out
.13ef			menub
.13ef	20 fb 21	               jsr  push
.13f2	a2 5c		               ldx  #<blankmsg
.13f4	a0 1a		               ldy  #>blankmsg
.13f6	20 93 21	               jsr  putscxy
.13f9	a2 ae		               ldx  #<f2b_msg
.13fb	a0 1b		               ldy  #>f2b_msg
.13fd	20 93 21	               jsr  putscxy
.1400	20 3a 22	               jsr  pop
.1403	08		               php
.1404	48		               pha
.1405	8a		               txa
.1406	48		               pha
.1407	ad f6 1f	               lda  f2bbutton
.140a	48		               pha
.140b	a9 92		               lda  #146
.140d	8d 08 20	               sta  f2bbutton+18
.1410	a9 01		               lda  #flashcol
.1412	8d f6 1f	               sta  f2bbutton
.1415	a2 f6		               ldx  #<f2bbutton
.1417	a0 1f		               ldy  #>f2bbutton
.1419	20 93 21	               jsr  putscxy
.141c	20 5c 12	               jsr  delay
.141f	a9 12		               lda  #18
.1421	8d 08 20	               sta  f2bbutton+18
.1424	68		               pla
.1425	8d f6 1f	               sta  f2bbutton
.1428	a2 f6		               ldx  #<f2bbutton
.142a	a0 1f		               ldy  #>f2bbutton
.142c	20 93 21	               jsr  putscxy
.142f	68		               pla
.1430	aa		               tax
.1431	68		               pla
.1432	28		               plp
.1433	20 fc 19	               jsr  fliphorz
.1436	20 5f 0f	               jsr  drawbitmap
.1439	68		out            pla
.143a	20 fb 21	               jsr  push
.143d	a2 5c		               ldx  #<blankmsg
.143f	a0 1a		               ldy  #>blankmsg
.1441	20 93 21	               jsr  putscxy
.1444	a2 88		               ldx  #<prompt_msg
.1446	a0 1a		               ldy  #>prompt_msg
.1448	20 93 21	               jsr  putscxy
.144b	20 3a 22	               jsr  pop
.144e	60		               rts
.144f			f3action
.144f	48		               pha
.1450	a9 00		               lda  #$0
.1452	8d 34 09	               sta  editmode
.1455	ad 35 09	               lda  fkeyset
.1458	d0 76		               bne  menub
.145a	08		               php
.145b	48		               pha
.145c	8a		               txa
.145d	48		               pha
.145e	ad 39 1f	               lda  f3abutton
.1461	48		               pha
.1462	a9 92		               lda  #146
.1464	8d 4b 1f	               sta  f3abutton+18
.1467	a9 01		               lda  #flashcol
.1469	8d 39 1f	               sta  f3abutton
.146c	a2 39		               ldx  #<f3abutton
.146e	a0 1f		               ldy  #>f3abutton
.1470	20 93 21	               jsr  putscxy
.1473	20 5c 12	               jsr  delay
.1476	a9 12		               lda  #18
.1478	8d 4b 1f	               sta  f3abutton+18
.147b	68		               pla
.147c	8d 39 1f	               sta  f3abutton
.147f	a2 39		               ldx  #<f3abutton
.1481	a0 1f		               ldy  #>f3abutton
.1483	20 93 21	               jsr  putscxy
.1486	68		               pla
.1487	aa		               tax
.1488	68		               pla
.1489	28		               plp
.148a	20 fb 21	               jsr  push
.148d	a2 5c		               ldx  #<blankmsg
.148f	a0 1a		               ldy  #>blankmsg
.1491	20 93 21	               jsr  putscxy
.1494	a2 f7		               ldx  #<f3a_msg
.1496	a0 1a		               ldy  #>f3a_msg
.1498	20 93 21	               jsr  putscxy
.149b	20 3a 22	               jsr  pop
.149e	20 1b 26	getagain       jsr  getkey
.14a1	c9 31		               cmp  #$31
.14a3	f0 0b		               beq  devok
.14a5	c9 38		               cmp  #$38
.14a7	f0 07		               beq  devok
.14a9	c9 39		               cmp  #$39
.14ab	f0 03		               beq  devok
.14ad	4c 9e 14	               jmp  getagain
.14b0	8d 54 09	devok          sta  device
.14b3	20 9c 09	               jsr  getfname
.14b6	20 fb 21	               jsr  push
.14b9	a2 5c		               ldx  #<blankmsg
.14bb	a0 1a		               ldy  #>blankmsg
.14bd	20 93 21	               jsr  putscxy
.14c0	a2 a3		               ldx  #<wait_msg
.14c2	a0 1a		               ldy  #>wait_msg
.14c4	20 93 21	               jsr  putscxy
.14c7	20 3a 22	               jsr  pop
.14ca	20 80 08	               jsr  savetofile
.14cd	4c 1a 15	               jmp  out
.14d0			menub
.14d0	20 fb 21	               jsr  push
.14d3	a2 5c		               ldx  #<blankmsg
.14d5	a0 1a		               ldy  #>blankmsg
.14d7	20 93 21	               jsr  putscxy
.14da	a2 c9		               ldx  #<f3b_msg
.14dc	a0 1b		               ldy  #>f3b_msg
.14de	20 93 21	               jsr  putscxy
.14e1	20 3a 22	               jsr  pop
.14e4	08		               php
.14e5	48		               pha
.14e6	8a		               txa
.14e7	48		               pha
.14e8	ad 11 20	               lda  f3bbutton
.14eb	48		               pha
.14ec	a9 92		               lda  #146
.14ee	8d 23 20	               sta  f3bbutton+18
.14f1	a9 01		               lda  #flashcol
.14f3	8d 11 20	               sta  f3bbutton
.14f6	a2 11		               ldx  #<f3bbutton
.14f8	a0 20		               ldy  #>f3bbutton
.14fa	20 93 21	               jsr  putscxy
.14fd	20 5c 12	               jsr  delay
.1500	a9 12		               lda  #18
.1502	8d 23 20	               sta  f3bbutton+18
.1505	68		               pla
.1506	8d 11 20	               sta  f3bbutton
.1509	a2 11		               ldx  #<f3bbutton
.150b	a0 20		               ldy  #>f3bbutton
.150d	20 93 21	               jsr  putscxy
.1510	68		               pla
.1511	aa		               tax
.1512	68		               pla
.1513	28		               plp
.1514	20 87 19	               jsr  scrollright
.1517	20 5f 0f	               jsr  drawbitmap
.151a	68		out            pla
.151b	20 fb 21	               jsr  push
.151e	a2 5c		               ldx  #<blankmsg
.1520	a0 1a		               ldy  #>blankmsg
.1522	20 93 21	               jsr  putscxy
.1525	a2 88		               ldx  #<prompt_msg
.1527	a0 1a		               ldy  #>prompt_msg
.1529	20 93 21	               jsr  putscxy
.152c	20 3a 22	               jsr  pop
.152f	60		               rts
.1530			f4action
.1530	48		               pha
.1531	a9 00		               lda  #$0
.1533	8d 34 09	               sta  editmode
.1536	ad 35 09	               lda  fkeyset
.1539	d0 79		               bne  menub
.153b	08		               php
.153c	48		               pha
.153d	8a		               txa
.153e	48		               pha
.153f	ad 54 1f	               lda  f4abutton
.1542	48		               pha
.1543	a9 92		               lda  #146
.1545	8d 66 1f	               sta  f4abutton+18
.1548	a9 01		               lda  #flashcol
.154a	8d 54 1f	               sta  f4abutton
.154d	a2 54		               ldx  #<f4abutton
.154f	a0 1f		               ldy  #>f4abutton
.1551	20 93 21	               jsr  putscxy
.1554	20 5c 12	               jsr  delay
.1557	a9 12		               lda  #18
.1559	8d 66 1f	               sta  f4abutton+18
.155c	68		               pla
.155d	8d 54 1f	               sta  f4abutton
.1560	a2 54		               ldx  #<f4abutton
.1562	a0 1f		               ldy  #>f4abutton
.1564	20 93 21	               jsr  putscxy
.1567	68		               pla
.1568	aa		               tax
.1569	68		               pla
.156a	28		               plp
.156b	20 fb 21	               jsr  push
.156e	a2 5c		               ldx  #<blankmsg
.1570	a0 1a		               ldy  #>blankmsg
.1572	20 93 21	               jsr  putscxy
.1575	a2 1c		               ldx  #<f4a_msg
.1577	a0 1b		               ldy  #>f4a_msg
.1579	20 93 21	               jsr  putscxy
.157c	20 3a 22	               jsr  pop
.157f	20 1b 26	getagain       jsr  getkey
.1582	c9 31		               cmp  #$31
.1584	f0 0b		               beq  devok
.1586	c9 38		               cmp  #$38
.1588	f0 07		               beq  devok
.158a	c9 39		               cmp  #$39
.158c	f0 03		               beq  devok
.158e	4c 7f 15	               jmp  getagain
.1591	8d 54 09	devok          sta  device
.1594	20 9c 09	               jsr  getfname
.1597	20 fb 21	               jsr  push
.159a	a2 5c		               ldx  #<blankmsg
.159c	a0 1a		               ldy  #>blankmsg
.159e	20 93 21	               jsr  putscxy
.15a1	a2 a3		               ldx  #<wait_msg
.15a3	a0 1a		               ldy  #>wait_msg
.15a5	20 93 21	               jsr  putscxy
.15a8	20 3a 22	               jsr  pop
.15ab	20 d3 08	               jsr  loadfromfile
.15ae	20 5c 09	               jsr  screenredraw
.15b1	4c fe 15	               jmp  out
.15b4			menub
.15b4	20 fb 21	               jsr  push
.15b7	a2 5c		               ldx  #<blankmsg
.15b9	a0 1a		               ldy  #>blankmsg
.15bb	20 93 21	               jsr  putscxy
.15be	a2 de		               ldx  #<f4b_msg
.15c0	a0 1b		               ldy  #>f4b_msg
.15c2	20 93 21	               jsr  putscxy
.15c5	20 3a 22	               jsr  pop
.15c8	08		               php
.15c9	48		               pha
.15ca	8a		               txa
.15cb	48		               pha
.15cc	ad 2c 20	               lda  f4bbutton
.15cf	48		               pha
.15d0	a9 92		               lda  #146
.15d2	8d 3e 20	               sta  f4bbutton+18
.15d5	a9 01		               lda  #flashcol
.15d7	8d 2c 20	               sta  f4bbutton
.15da	a2 2c		               ldx  #<f4bbutton
.15dc	a0 20		               ldy  #>f4bbutton
.15de	20 93 21	               jsr  putscxy
.15e1	20 5c 12	               jsr  delay
.15e4	a9 12		               lda  #18
.15e6	8d 3e 20	               sta  f4bbutton+18
.15e9	68		               pla
.15ea	8d 2c 20	               sta  f4bbutton
.15ed	a2 2c		               ldx  #<f4bbutton
.15ef	a0 20		               ldy  #>f4bbutton
.15f1	20 93 21	               jsr  putscxy
.15f4	68		               pla
.15f5	aa		               tax
.15f6	68		               pla
.15f7	28		               plp
.15f8	20 ac 19	               jsr  scrollleft
.15fb	20 5f 0f	               jsr  drawbitmap
.15fe	68		out            pla
.15ff	20 fb 21	               jsr  push
.1602	a2 5c		               ldx  #<blankmsg
.1604	a0 1a		               ldy  #>blankmsg
.1606	20 93 21	               jsr  putscxy
.1609	a2 88		               ldx  #<prompt_msg
.160b	a0 1a		               ldy  #>prompt_msg
.160d	20 93 21	               jsr  putscxy
.1610	20 3a 22	               jsr  pop
.1613	60		               rts
.1614			f5action
.1614	48		               pha
.1615	a9 00		               lda  #$0
.1617	8d 34 09	               sta  editmode
.161a	ad 35 09	               lda  fkeyset
.161d	d0 4d		               bne  menub
.161f	20 fb 21	               jsr  push
.1622	a2 5c		               ldx  #<blankmsg
.1624	a0 1a		               ldy  #>blankmsg
.1626	20 93 21	               jsr  putscxy
.1629	a2 43		               ldx  #<f5a_msg
.162b	a0 1b		               ldy  #>f5a_msg
.162d	20 93 21	               jsr  putscxy
.1630	20 3a 22	               jsr  pop
.1633	08		               php
.1634	48		               pha
.1635	8a		               txa
.1636	48		               pha
.1637	ad 6f 1f	               lda  f5abutton
.163a	48		               pha
.163b	a9 92		               lda  #146
.163d	8d 81 1f	               sta  f5abutton+18
.1640	a9 01		               lda  #flashcol
.1642	8d 6f 1f	               sta  f5abutton
.1645	a2 6f		               ldx  #<f5abutton
.1647	a0 1f		               ldy  #>f5abutton
.1649	20 93 21	               jsr  putscxy
.164c	20 5c 12	               jsr  delay
.164f	a9 12		               lda  #18
.1651	8d 81 1f	               sta  f5abutton+18
.1654	68		               pla
.1655	8d 6f 1f	               sta  f5abutton
.1658	a2 6f		               ldx  #<f5abutton
.165a	a0 1f		               ldy  #>f5abutton
.165c	20 93 21	               jsr  putscxy
.165f	68		               pla
.1660	aa		               tax
.1661	68		               pla
.1662	28		               plp
.1663	20 da 19	               jsr  clearchar
.1666	20 5f 0f	               jsr  drawbitmap
.1669	4c b6 16	               jmp  out
.166c			menub
.166c	20 fb 21	               jsr  push
.166f	a2 5c		               ldx  #<blankmsg
.1671	a0 1a		               ldy  #>blankmsg
.1673	20 93 21	               jsr  putscxy
.1676	a2 f2		               ldx  #<f5b_msg
.1678	a0 1b		               ldy  #>f5b_msg
.167a	20 93 21	               jsr  putscxy
.167d	20 3a 22	               jsr  pop
.1680	08		               php
.1681	48		               pha
.1682	8a		               txa
.1683	48		               pha
.1684	ad 47 20	               lda  f5bbutton
.1687	48		               pha
.1688	a9 92		               lda  #146
.168a	8d 59 20	               sta  f5bbutton+18
.168d	a9 01		               lda  #flashcol
.168f	8d 47 20	               sta  f5bbutton
.1692	a2 47		               ldx  #<f5bbutton
.1694	a0 20		               ldy  #>f5bbutton
.1696	20 93 21	               jsr  putscxy
.1699	20 5c 12	               jsr  delay
.169c	a9 12		               lda  #18
.169e	8d 59 20	               sta  f5bbutton+18
.16a1	68		               pla
.16a2	8d 47 20	               sta  f5bbutton
.16a5	a2 47		               ldx  #<f5bbutton
.16a7	a0 20		               ldy  #>f5bbutton
.16a9	20 93 21	               jsr  putscxy
.16ac	68		               pla
.16ad	aa		               tax
.16ae	68		               pla
.16af	28		               plp
.16b0	20 15 19	               jsr  scrollup
.16b3	20 5f 0f	               jsr  drawbitmap
.16b6	68		out            pla
.16b7	20 fb 21	               jsr  push
.16ba	a2 5c		               ldx  #<blankmsg
.16bc	a0 1a		               ldy  #>blankmsg
.16be	20 93 21	               jsr  putscxy
.16c1	a2 88		               ldx  #<prompt_msg
.16c3	a0 1a		               ldy  #>prompt_msg
.16c5	20 93 21	               jsr  putscxy
.16c8	20 3a 22	               jsr  pop
.16cb	60		               rts
.16cc			f6action
.16cc	48		               pha
.16cd	a9 00		               lda  #$0
.16cf	8d 34 09	               sta  editmode
.16d2	ad 35 09	               lda  fkeyset
.16d5	d0 4d		               bne  menub
.16d7	20 fb 21	               jsr  push
.16da	a2 5c		               ldx  #<blankmsg
.16dc	a0 1a		               ldy  #>blankmsg
.16de	20 93 21	               jsr  putscxy
.16e1	a2 5d		               ldx  #<f6a_msg
.16e3	a0 1b		               ldy  #>f6a_msg
.16e5	20 93 21	               jsr  putscxy
.16e8	20 3a 22	               jsr  pop
.16eb	08		               php
.16ec	48		               pha
.16ed	8a		               txa
.16ee	48		               pha
.16ef	ad 8a 1f	               lda  f6abutton
.16f2	48		               pha
.16f3	a9 92		               lda  #146
.16f5	8d 9c 1f	               sta  f6abutton+18
.16f8	a9 01		               lda  #flashcol
.16fa	8d 8a 1f	               sta  f6abutton
.16fd	a2 8a		               ldx  #<f6abutton
.16ff	a0 1f		               ldy  #>f6abutton
.1701	20 93 21	               jsr  putscxy
.1704	20 5c 12	               jsr  delay
.1707	a9 12		               lda  #18
.1709	8d 9c 1f	               sta  f6abutton+18
.170c	68		               pla
.170d	8d 8a 1f	               sta  f6abutton
.1710	a2 8a		               ldx  #<f6abutton
.1712	a0 1f		               ldy  #>f6abutton
.1714	20 93 21	               jsr  putscxy
.1717	68		               pla
.1718	aa		               tax
.1719	68		               pla
.171a	28		               plp
.171b	20 ce 19	               jsr  fillchar
.171e	20 5f 0f	               jsr  drawbitmap
.1721	4c 6e 17	               jmp  out
.1724			menub
.1724	20 fb 21	               jsr  push
.1727	a2 5c		               ldx  #<blankmsg
.1729	a0 1a		               ldy  #>blankmsg
.172b	20 93 21	               jsr  putscxy
.172e	a2 04		               ldx  #<f6b_msg
.1730	a0 1c		               ldy  #>f6b_msg
.1732	20 93 21	               jsr  putscxy
.1735	20 3a 22	               jsr  pop
.1738	08		               php
.1739	48		               pha
.173a	8a		               txa
.173b	48		               pha
.173c	ad 62 20	               lda  f6bbutton
.173f	48		               pha
.1740	a9 92		               lda  #146
.1742	8d 74 20	               sta  f6bbutton+18
.1745	a9 01		               lda  #flashcol
.1747	8d 62 20	               sta  f6bbutton
.174a	a2 62		               ldx  #<f6bbutton
.174c	a0 20		               ldy  #>f6bbutton
.174e	20 93 21	               jsr  putscxy
.1751	20 5c 12	               jsr  delay
.1754	a9 12		               lda  #18
.1756	8d 74 20	               sta  f6bbutton+18
.1759	68		               pla
.175a	8d 62 20	               sta  f6bbutton
.175d	a2 62		               ldx  #<f6bbutton
.175f	a0 20		               ldy  #>f6bbutton
.1761	20 93 21	               jsr  putscxy
.1764	68		               pla
.1765	aa		               tax
.1766	68		               pla
.1767	28		               plp
.1768	20 4d 19	               jsr  scrolldown
.176b	20 5f 0f	               jsr  drawbitmap
.176e	68		out            pla
.176f	20 fb 21	               jsr  push
.1772	a2 5c		               ldx  #<blankmsg
.1774	a0 1a		               ldy  #>blankmsg
.1776	20 93 21	               jsr  putscxy
.1779	a2 88		               ldx  #<prompt_msg
.177b	a0 1a		               ldy  #>prompt_msg
.177d	20 93 21	               jsr  putscxy
.1780	20 3a 22	               jsr  pop
.1783	60		               rts
.1784			f7action
.1784	48		               pha
.1785	a9 00		               lda  #$0
.1787	8d 34 09	               sta  editmode
.178a	ad 35 09	               lda  fkeyset
.178d	d0 4d		               bne  menub
.178f	20 fb 21	               jsr  push
.1792	a2 5c		               ldx  #<blankmsg
.1794	a0 1a		               ldy  #>blankmsg
.1796	20 93 21	               jsr  putscxy
.1799	a2 77		               ldx  #<f7a_msg
.179b	a0 1b		               ldy  #>f7a_msg
.179d	20 93 21	               jsr  putscxy
.17a0	20 3a 22	               jsr  pop
.17a3	08		               php
.17a4	48		               pha
.17a5	8a		               txa
.17a6	48		               pha
.17a7	ad a5 1f	               lda  f7abutton
.17aa	48		               pha
.17ab	a9 92		               lda  #146
.17ad	8d b7 1f	               sta  f7abutton+18
.17b0	a9 01		               lda  #flashcol
.17b2	8d a5 1f	               sta  f7abutton
.17b5	a2 a5		               ldx  #<f7abutton
.17b7	a0 1f		               ldy  #>f7abutton
.17b9	20 93 21	               jsr  putscxy
.17bc	20 5c 12	               jsr  delay
.17bf	a9 12		               lda  #18
.17c1	8d b7 1f	               sta  f7abutton+18
.17c4	68		               pla
.17c5	8d a5 1f	               sta  f7abutton
.17c8	a2 a5		               ldx  #<f7abutton
.17ca	a0 1f		               ldy  #>f7abutton
.17cc	20 93 21	               jsr  putscxy
.17cf	68		               pla
.17d0	aa		               tax
.17d1	68		               pla
.17d2	28		               plp
.17d3	20 32 10	               jsr  copycharset
.17d6	20 5f 0f	               jsr  drawbitmap
.17d9	4c 2b 18	               jmp  out
.17dc	a9 00		menub          lda  #$0
.17de	8d 34 09	               sta  editmode
.17e1	20 fb 21	               jsr  push
.17e4	a2 5c		               ldx  #<blankmsg
.17e6	a0 1a		               ldy  #>blankmsg
.17e8	20 93 21	               jsr  putscxy
.17eb	a2 18		               ldx  #<f7b_msg
.17ed	a0 1c		               ldy  #>f7b_msg
.17ef	20 93 21	               jsr  putscxy
.17f2	20 3a 22	               jsr  pop
.17f5	08		               php
.17f6	48		               pha
.17f7	8a		               txa
.17f8	48		               pha
.17f9	ad 7d 20	               lda  f7bbutton
.17fc	48		               pha
.17fd	a9 92		               lda  #146
.17ff	8d 8f 20	               sta  f7bbutton+18
.1802	a9 01		               lda  #flashcol
.1804	8d 7d 20	               sta  f7bbutton
.1807	a2 7d		               ldx  #<f7bbutton
.1809	a0 20		               ldy  #>f7bbutton
.180b	20 93 21	               jsr  putscxy
.180e	20 5c 12	               jsr  delay
.1811	a9 12		               lda  #18
.1813	8d 8f 20	               sta  f7bbutton+18
.1816	68		               pla
.1817	8d 7d 20	               sta  f7bbutton
.181a	a2 7d		               ldx  #<f7bbutton
.181c	a0 20		               ldy  #>f7bbutton
.181e	20 93 21	               jsr  putscxy
.1821	68		               pla
.1822	aa		               tax
.1823	68		               pla
.1824	28		               plp
.1825	20 f5 18	               jsr  reverse
.1828	20 5f 0f	               jsr  drawbitmap
.182b	68		out            pla
.182c	20 fb 21	               jsr  push
.182f	a2 5c		               ldx  #<blankmsg
.1831	a0 1a		               ldy  #>blankmsg
.1833	20 93 21	               jsr  putscxy
.1836	a2 88		               ldx  #<prompt_msg
.1838	a0 1a		               ldy  #>prompt_msg
.183a	20 93 21	               jsr  putscxy
.183d	20 3a 22	               jsr  pop
.1840	60		               rts
.1841			f8action
.1841	48		               pha
.1842	a9 00		               lda  #$0
.1844	8d 34 09	               sta  editmode
.1847	ad 35 09	               lda  fkeyset
.184a	d0 47		               bne  menub
.184c	20 fb 21	               jsr  push
.184f	a2 5c		               ldx  #<blankmsg
.1851	a0 1a		               ldy  #>blankmsg
.1853	20 93 21	               jsr  putscxy
.1856	a2 52		               ldx  #<menub_msg
.1858	a0 1c		               ldy  #>menub_msg
.185a	20 93 21	               jsr  putscxy
.185d	20 3a 22	               jsr  pop
.1860	08		               php
.1861	48		               pha
.1862	8a		               txa
.1863	48		               pha
.1864	ad c0 1f	               lda  f8abutton
.1867	48		               pha
.1868	a9 92		               lda  #146
.186a	8d d2 1f	               sta  f8abutton+18
.186d	a9 01		               lda  #flashcol
.186f	8d c0 1f	               sta  f8abutton
.1872	a2 c0		               ldx  #<f8abutton
.1874	a0 1f		               ldy  #>f8abutton
.1876	20 93 21	               jsr  putscxy
.1879	20 5c 12	               jsr  delay
.187c	a9 12		               lda  #18
.187e	8d d2 1f	               sta  f8abutton+18
.1881	68		               pla
.1882	8d c0 1f	               sta  f8abutton
.1885	a2 c0		               ldx  #<f8abutton
.1887	a0 1f		               ldy  #>f8abutton
.1889	20 93 21	               jsr  putscxy
.188c	68		               pla
.188d	aa		               tax
.188e	68		               pla
.188f	28		               plp
.1890	4c d7 18	               jmp  swapit
.1893			menub
.1893	20 fb 21	               jsr  push
.1896	a2 5c		               ldx  #<blankmsg
.1898	a0 1a		               ldy  #>blankmsg
.189a	20 93 21	               jsr  putscxy
.189d	a2 2f		               ldx  #<menua_msg
.189f	a0 1c		               ldy  #>menua_msg
.18a1	20 93 21	               jsr  putscxy
.18a4	20 3a 22	               jsr  pop
.18a7	08		               php
.18a8	48		               pha
.18a9	8a		               txa
.18aa	48		               pha
.18ab	ad 98 20	               lda  f8bbutton
.18ae	48		               pha
.18af	a9 92		               lda  #146
.18b1	8d aa 20	               sta  f8bbutton+18
.18b4	a9 01		               lda  #flashcol
.18b6	8d 98 20	               sta  f8bbutton
.18b9	a2 98		               ldx  #<f8bbutton
.18bb	a0 20		               ldy  #>f8bbutton
.18bd	20 93 21	               jsr  putscxy
.18c0	20 5c 12	               jsr  delay
.18c3	a9 12		               lda  #18
.18c5	8d aa 20	               sta  f8bbutton+18
.18c8	68		               pla
.18c9	8d 98 20	               sta  f8bbutton
.18cc	a2 98		               ldx  #<f8bbutton
.18ce	a0 20		               ldy  #>f8bbutton
.18d0	20 93 21	               jsr  putscxy
.18d3	68		               pla
.18d4	aa		               tax
.18d5	68		               pla
.18d6	28		               plp
.18d7	49 ff		swapit         eor  #$ff
.18d9	8d 35 09	               sta  fkeyset
.18dc	20 e2 10	               jsr  drawfkeys
.18df	68		               pla
.18e0	20 fb 21	               jsr  push
.18e3	a2 5c		               ldx  #<blankmsg
.18e5	a0 1a		               ldy  #>blankmsg
.18e7	20 93 21	               jsr  putscxy
.18ea	a2 88		               ldx  #<prompt_msg
.18ec	a0 1a		               ldy  #>prompt_msg
.18ee	20 93 21	               jsr  putscxy
.18f1	20 3a 22	               jsr  pop
.18f4	60		               rts
.18f5			reverse
.18f5	20 fb 21	               jsr  push
.18f8	48		               pha
.18f9	ad 3a 09	               lda  mapaddr
.18fc	85 fd		               sta  $fd
.18fe	ad 3b 09	               lda  mapaddr+1
.1901	85 fe		               sta  $fe
.1903	68		               pla
.1904	a0 00		               ldy  #$00
.1906	b1 fd		again          lda  (zpage2),y
.1908	49 ff		               eor  #$ff
.190a	91 fd		               sta  (zpage2),y
.190c	c8		               iny
.190d	c0 08		               cpy  #$08
.190f	d0 f5		               bne  again
.1911	20 3a 22	               jsr  pop
.1914	60		               rts
.1915			scrollup
.1915	20 fb 21	               jsr  push
.1918	48		               pha
.1919	ad 3a 09	               lda  mapaddr
.191c	85 fb		               sta  $fb
.191e	ad 3b 09	               lda  mapaddr+1
.1921	85 fc		               sta  $fc
.1923	68		               pla
.1924	48		               pha
.1925	ad 3a 09	               lda  mapaddr
.1928	85 fd		               sta  $fd
.192a	ad 3b 09	               lda  mapaddr+1
.192d	85 fe		               sta  $fe
.192f	68		               pla
.1930	20 1a 23	               jsr  inczp2
.1933	a0 00		               ldy  #$00
.1935	b1 fb		               lda  (zpage1),y
.1937	8d 4c 19	               sta  tmpbyte
.193a	b1 fd		again          lda  (zpage2),y
.193c	91 fb		               sta  (zpage1),y
.193e	c8		               iny
.193f	c0 07		               cpy  #$07
.1941	d0 f7		               bne  again
.1943	ad 4c 19	               lda  tmpbyte
.1946	91 fb		               sta  (zpage1),y
.1948	20 3a 22	               jsr  pop
.194b	60		               rts
>194c	00		tmpbyte        .byte     $00
.194d			scrolldown
.194d	20 fb 21	               jsr  push
.1950	48		               pha
.1951	ad 3a 09	               lda  mapaddr
.1954	85 fb		               sta  $fb
.1956	ad 3b 09	               lda  mapaddr+1
.1959	85 fc		               sta  $fc
.195b	68		               pla
.195c	48		               pha
.195d	ad 3a 09	               lda  mapaddr
.1960	85 fd		               sta  $fd
.1962	ad 3b 09	               lda  mapaddr+1
.1965	85 fe		               sta  $fe
.1967	68		               pla
.1968	20 1a 23	               jsr  inczp2
.196b	a0 07		               ldy  #$07                ;xxxxxxxx zpage1
.196d	b1 fb		               lda  (zpage1),y          ;xxxxxxxx zpage2
.196f	8d 86 19	               sta  tmpbyte             ;xxxxxxxx
.1972	88		again          dey                      ;xxxxxxxx
.1973	b1 fb		               lda  (zpage1),y          ;xxxxxxxx
.1975	91 fd		               sta  (zpage2),y          ;xxxxxxxx
.1977	c0 00		               cpy  #$00                ;xxxxxxxx
.1979	d0 f7		               bne  again               ;xxxxxxxx
.197b	a0 00		               ldy  #$00
.197d	ad 86 19	               lda  tmpbyte
.1980	91 fb		               sta  (zpage1),y
.1982	20 3a 22	               jsr  pop
.1985	60		               rts
>1986	00		tmpbyte        .byte     $00
.1987			scrollright
.1987	20 fb 21	               jsr  push
.198a	48		               pha
.198b	ad 3a 09	               lda  mapaddr
.198e	85 fb		               sta  $fb
.1990	ad 3b 09	               lda  mapaddr+1
.1993	85 fc		               sta  $fc
.1995	68		               pla
.1996	a0 00		               ldy  #$00
.1998	b1 fb		again          lda  (zpage1),y
.199a	18		               clc
.199b	6a		               ror
.199c	90 03		               bcc  zero
.199e	18		               clc
.199f	69 80		one            adc  #$80
.19a1	91 fb		zero           sta  (zpage1),y
.19a3	c8		               iny
.19a4	c0 08		               cpy  #$08
.19a6	d0 f0		               bne  again
.19a8	20 3a 22	               jsr  pop
.19ab	60		               rts
.19ac			scrollleft
.19ac	20 fb 21	               jsr  push
.19af	48		               pha
.19b0	ad 3a 09	               lda  mapaddr
.19b3	85 fb		               sta  $fb
.19b5	ad 3b 09	               lda  mapaddr+1
.19b8	85 fc		               sta  $fc
.19ba	68		               pla
.19bb	a0 00		               ldy  #$00
.19bd	b1 fb		again          lda  (zpage1),y
.19bf	18		               clc
.19c0	2a		               rol
.19c1	69 00		               adc  #$00
.19c3	91 fb		               sta  (zpage1),y
.19c5	c8		               iny
.19c6	c0 08		               cpy  #$08
.19c8	d0 f3		               bne  again
.19ca	20 3a 22	               jsr  pop
.19cd	60		               rts
.19ce			fillchar
.19ce	20 fb 21	               jsr  push
.19d1	a9 ff		               lda  #$ff
.19d3	20 e6 19	               jsr  allsame
.19d6	20 3a 22	               jsr  pop
.19d9	60		               rts
.19da			clearchar
.19da	20 fb 21	               jsr  push
.19dd	a9 00		               lda  #$00
.19df	20 e6 19	               jsr  allsame
.19e2	20 3a 22	               jsr  pop
.19e5	60		               rts
.19e6			allsame
.19e6	48		               pha
.19e7	ad 3a 09	               lda  mapaddr
.19ea	85 fd		               sta  $fd
.19ec	ad 3b 09	               lda  mapaddr+1
.19ef	85 fe		               sta  $fe
.19f1	68		               pla
.19f2	a0 00		               ldy  #$00
.19f4	91 fd		again          sta  (zpage2),y
.19f6	c8		               iny
.19f7	c0 08		               cpy  #$08
.19f9	d0 f9		               bne  again
.19fb	60		               rts
.19fc			fliphorz
.19fc	20 fb 21	               jsr  push
.19ff	48		               pha
.1a00	ad 3a 09	               lda  mapaddr
.1a03	85 fd		               sta  $fd
.1a05	ad 3b 09	               lda  mapaddr+1
.1a08	85 fe		               sta  $fe
.1a0a	68		               pla
.1a0b	a0 00		               ldy  #$00
.1a0d	b1 fd		nextbyte       lda  (zpage2),y
.1a0f	a2 00		               ldx  #$00
.1a11	2a		rolagain       rol
.1a12	6e 28 1a	               ror  tmpbyte
.1a15	e8		               inx
.1a16	e0 08		               cpx  #$08
.1a18	30 f7		               bmi  rolagain
.1a1a	ad 28 1a	               lda  tmpbyte
.1a1d	91 fd		               sta  (zpage2),y
.1a1f	c8		               iny
.1a20	c0 08		               cpy  #$08
.1a22	30 e9		               bmi  nextbyte
.1a24	20 3a 22	               jsr  pop
.1a27	60		               rts
>1a28	00		tmpbyte        .byte     $00
.1a29			flipvert
.1a29	20 fb 21	               jsr  push
.1a2c	48		               pha
.1a2d	ad 3a 09	               lda  mapaddr
.1a30	85 fd		               sta  $fd
.1a32	ad 3b 09	               lda  mapaddr+1
.1a35	85 fe		               sta  $fe
.1a37	68		               pla
.1a38	a0 00		               ldy  #$00
.1a3a	b1 fd		tostack        lda  (zpage2),y
.1a3c	48		               pha
.1a3d	c8		               iny
.1a3e	c0 08		               cpy  #$08
.1a40	d0 f8		               bne  tostack
.1a42	a0 00		               ldy  #$00
.1a44	68		fromstack      pla
.1a45	91 fd		               sta  (zpage2),y
.1a47	c8		               iny
.1a48	c0 08		               cpy  #$08
.1a4a	d0 f8		               bne  fromstack
.1a4c	20 3a 22	               jsr  pop
.1a4f	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: messages_en.asm

>1a50	0a 01 05	editor_msg     .byte vrose,1,5
>1a53	5b 45 44 49	               .null     "[editor]"
>1a57	54 4f 52 5d 00
>1a5c	03 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>1a60	20 20 20 20	               .null     "                                       "
>1a64	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1a74	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1a84	20 20 20 00
>1a88	03 00 05 92	prompt_msg     .byte     mesgcol,0,5,146
>1a8c	20 45 4e 54	               .null     " enter f-key command :"
>1a90	45 52 20 46 2d 4b 45 59 20 43 4f 4d 4d 41 4e 44
>1aa0	20 3a 00
>1aa3	03 00 05 92	wait_msg       .byte     mesgcol,0,5,146
>1aa7	20 4f 4e 45	               .null     " one moment please ... "
>1aab	20 4d 4f 4d 45 4e 54 20 50 4c 45 41 53 45 20 2e
>1abb	2e 2e 20 00
.1abf			f1a_msg
>1abf	03 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>1ac3	20 45 44 49	               .null     " edit mode: chr$(   )",146
>1ac7	54 20 4d 4f 44 45 3a 20 43 48 52 24 28 20 20 20
>1ad7	29 92 00
.1ada			f2a_msg
>1ada	03 00 05	copy_msg       .byte     mesgcol,0,5
>1add	20 45 4e 54	               .null     " enter character to copy:"
>1ae1	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>1af1	43 4f 50 59 3a 00
.1af7			f3a_msg
>1af7	03 00 05 92	save_msg       .byte     mesgcol,0,5,146
>1afb	20 53 41 56	               .null     " save on witch device? (1/8/9): "
>1aff	45 20 4f 4e 20 57 49 54 43 48 20 44 45 56 49 43
>1b0f	45 3f 20 28 31 2f 38 2f 39 29 3a 20 00
.1b1c			f4a_msg
>1b1c	03 00 05 92	load_msg       .byte     mesgcol,0,5,146
>1b20	20 4c 4f 41	               .null     " load from witch device? (1/8/9): "
>1b24	44 20 46 52 4f 4d 20 57 49 54 43 48 20 44 45 56
>1b34	49 43 45 3f 20 28 31 2f 38 2f 39 29 3a 20 00
.1b43			f5a_msg
>1b43	03 00 05	clear_msg      .byte     mesgcol,0,5
>1b46	20 43 4c 45	               .null     " clear char: chr$(   )"
>1b4a	41 52 20 43 48 41 52 3a 20 43 48 52 24 28 20 20
>1b5a	20 29 00
.1b5d			f6a_msg
>1b5d	03 00 05	fill_msg       .byte     mesgcol,0,5
>1b60	20 46 49 4c	               .null     " fill char:  chr$(   )"
>1b64	4c 20 43 48 41 52 3a 20 20 43 48 52 24 28 20 20
>1b74	20 29 00
.1b77			f7a_msg
>1b77	03 00 05	work_msg       .byte     mesgcol,0,5
>1b7a	20 52 45 53	               .null     " restoring all characters."
>1b7e	54 4f 52 49 4e 47 20 41 4c 4c 20 43 48 41 52 41
>1b8e	43 54 45 52 53 2e 00
.1b95			f1b_msg
>1b95	03 00 05	invr_msg       .byte     mesgcol,0,5
>1b98	20 46 4c 49	               .null     " flipping vertically:"
>1b9c	50 50 49 4e 47 20 56 45 52 54 49 43 41 4c 4c 59
>1bac	3a 00
.1bae			f2b_msg
>1bae	03 00 05	flip_msg       .byte     mesgcol,0,5
>1bb1	20 46 4c 49	               .null     " flipping horizontally:"
>1bb5	50 50 49 4e 47 20 48 4f 52 49 5a 4f 4e 54 41 4c
>1bc5	4c 59 3a 00
.1bc9			f3b_msg
>1bc9	03 00 05	scrollr_msg    .byte     mesgcol,0,5
>1bcc	20 53 43 52	               .null     " scrolling right:"
>1bd0	4f 4c 4c 49 4e 47 20 52 49 47 48 54 3a 00
.1bde			f4b_msg
>1bde	03 00 05	scrolll_msg    .byte     mesgcol,0,5
>1be1	20 53 43 52	               .null     " scrolling left:"
>1be5	4f 4c 4c 49 4e 47 20 4c 45 46 54 3a 00
.1bf2			f5b_msg
>1bf2	03 00 05	scrollu_msg    .byte     mesgcol,0,5
>1bf5	20 53 43 52	               .null     " scrolling up:"
>1bf9	4f 4c 4c 49 4e 47 20 55 50 3a 00
.1c04			f6b_msg
>1c04	03 00 05	scrolld_msg    .byte     mesgcol,0,5
>1c07	20 53 43 52	               .null     " scrolling down:"
>1c0b	4f 4c 4c 49 4e 47 20 44 4f 57 4e 3a 00
.1c18			f7b_msg
>1c18	03 00 05	rvrs_msg       .byte     mesgcol,0,5
>1c1b	20 52 45 56	               .null     " reverse character:"
>1c1f	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
>1c2f	03 00 05	menua_msg      .byte     mesgcol,0,5
>1c32	20 59 4f 55	               .null     " you are being moved to menu 1."
>1c36	20 41 52 45 20 42 45 49 4e 47 20 4d 4f 56 45 44
>1c46	20 54 4f 20 4d 45 4e 55 20 31 2e 00
>1c52	03 00 05	menub_msg      .byte     mesgcol,0,5
>1c55	20 59 4f 55	               .null     " you are being moved to menu 2."
>1c59	20 41 52 45 20 42 45 49 4e 47 20 4d 4f 56 45 44
>1c69	20 54 4f 20 4d 45 4e 55 20 32 2e 00
>1c75	07 00 05	copychar_msg   .byte     vjaune,0,5
>1c78	20 45 4e 54	               .null     " enter character to copy from (?).",157,157,157
>1c7c	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>1c8c	43 4f 50 59 20 46 52 4f 4d 20 28 3f 29 2e 9d 9d
>1c9c	9d 00
>1c9e	07 00 05	fname_msg      .byte     vjaune,0,5
>1ca1	20 45 4e 54	               .null     " enter a 6 letter filename : ",$a4,$a4,$a4,$a4,$a4,$a4,".chr",157,157,157,157,157,157,157,157,157,157
>1ca5	45 52 20 41 20 36 20 4c 45 54 54 45 52 20 46 49
>1cb5	4c 45 4e 41 4d 45 20 3a 20 a4 a4 a4 a4 a4 a4 2e
>1cc5	43 48 52 9d 9d 9d 9d 9d 9d 9d 9d 9d 9d 00
>1cd3	04 15 18 12	quit_msg       .byte     vmauve,21,24,18
>1cd7	43 54 52 4c	               .text     "ctrl-x",146
>1cdb	2d 58 92
>1cde	20 54 4f 20	               .null     " to quit."
>1ce2	51 55 49 54 2e 00
>1ce8	0a 14 16 12	redraw_msg     .byte     vrose,20,22,18
>1cec	43 54 52 4c	               .text     "ctrl-r",146
>1cf0	2d 52 92
>1cf3	20 54 4f 20	               .null     " to redraw."
>1cf7	52 45 44 52 41 57 2e 00
.1cff			menu_msg
>1cff	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>1d03	43 54 52 4c	               .text     "ctrl-x",146
>1d07	2d 58 92
>1d0a	20 54 4f 20	               .null     " to menu."
>1d0e	4d 45 4e 55 2e 00
>1d14	07 04 06 12	whoami0        .byte     whoamicol,4,6,18
>1d18	20 20 20 20	               .null     "                               ",146
>1d1c	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1d2c	20 20 20 20 20 20 20 20 20 20 20 92 00
>1d39	07 04 07 12	whoami1        .byte     whoamicol,4,7,18
>1d3d	20 20 20 20	               .null     "          ",146," charedit ",18,"           ",146
>1d41	20 20 20 20 20 20 92 20 43 48 41 52 45 44 49 54
>1d51	20 12 20 20 20 20 20 20 20 20 20 20 20 92 00
>1d60	07 04 08 12	whoami2        .byte     whoamicol,4,8,18
>1d64	20 20 20 20	               .null     "                               ",146
>1d68	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1d78	20 20 20 20 20 20 20 20 20 20 20 92 00
>1d85	07 04 09 12	whoami3        .byte     whoamicol,4,9,18
>1d89	20 20 20 46	               .null     "   from isbn : 0-942386-29-9   ",146
>1d8d	52 4f 4d 20 49 53 42 4e 20 3a 20 30 2d 39 34 32
>1d9d	33 38 36 2d 32 39 2d 39 20 20 20 92 00
>1daa	07 04 0a 12	whoami4        .byte     whoamicol,4,10,18
>1dae	20 20 20 20	               .null     "        by john heilborn       ",146
>1db2	20 20 20 20 42 59 20 4a 4f 48 4e 20 48 45 49 4c
>1dc2	42 4f 52 4e 20 20 20 20 20 20 20 92 00
>1dcf	07 04 0b 12	whoami5        .byte     whoamicol,4,11,18
>1dd3	20 20 20 20	               .null     "                               ",146
>1dd7	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1de7	20 20 20 20 20 20 20 20 20 20 20 92 00
>1df4	07 04 0c 12	whoami6        .byte     whoamicol,4,12,18
>1df8	20 43 4f 44	               .null     " coded in assembly language by ",146
>1dfc	45 44 20 49 4e 20 41 53 53 45 4d 42 4c 59 20 4c
>1e0c	41 4e 47 55 41 47 45 20 42 59 20 92 00
>1e19	07 04 0d 12	whoami7        .byte     whoamicol,4,13,18
>1e1d	20 44 41 4e	               .null     " daniel lafrance quebec/canada ",146
>1e21	49 45 4c 20 4c 41 46 52 41 4e 43 45 20 51 55 45
>1e31	42 45 43 2f 43 41 4e 41 44 41 20 92 00
>1e3e	07 04 0e 12	whoami8        .byte     whoamicol,4,14,18
>1e42	20 20 20 20	               .null     "    version:",version,"    ",146
>1e46	56 45 52 53 49 4f 4e 3a 32 30 32 34 30 34 30 34
>1e56	2d 30 31 31 30 33 30 20 20 20 20 92 00
>1e63	07 04 0f 12	whoami9        .byte     whoamicol,4,15,18
>1e67	20 20 20 20	               .null     "                               ",146
>1e6b	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1e7b	20 20 20 20 20 20 20 20 20 20 20 92 00
>1e88	03 06 10 14	bye_msg        .byte     vcyan,6,16,20
>1e8c	20 54 48 41	               .null     " thanks and have a good day ",146
>1e90	4e 4b 53 20 41 4e 44 20 48 41 56 45 20 41 20 47
>1ea0	4f 4f 44 20 44 41 59 20 92 00
>1eaa	0d 05 18 12	any_msg        .byte     vvert1,5,24,18
>1eae	20 20 55 53	               .null         "  use the [anykey] to basic  ",146
>1eb2	45 20 54 48 45 20 5b 41 4e 59 4b 45 59 5d 20 54
>1ec2	4f 20 42 41 53 49 43 20 20 92 00
>1ecd	03 12 07	titremenu1     .byte     menu1col1,fkeyleft,f1top-2       ;133
>1ed0	12 20 20 20	               .null     18,"   function set #1   ",146
>1ed4	46 55 4e 43 54 49 4f 4e 20 53 45 54 20 23 31 20
>1ee4	20 20 92 00
>1ee8	0f 12 07	titremenu2     .byte     menu2col1,fkeyleft,f1top-2       ;133
>1eeb	12 20 20 20	               .null     18,"   function set #2   ",146
>1eef	46 55 4e 43 54 49 4f 4e 20 53 45 54 20 23 32 20
>1eff	20 20 92 00
>1f03	03 12 09	f1abutton      .byte     menu1col1,fkeyleft,f1top       ;133
>1f06	45 44 49 54	               .text     "edit character."
>1f0a	20 43 48 41 52 41 43 54 45 52 2e
>1f15	12		               .byte     18             ; position 15
>1f16	a9 20 46 31	               .null     $a9," f1 ",223,146
>1f1a	20 df 92 00
>1f1e	0e 12 0a	f2abutton      .byte     menu1col2,fkeyleft,f1top+1     ;138
>1f21	43 4f 50 59	               .text     "copy from......"
>1f25	20 46 52 4f 4d 2e 2e 2e 2e 2e 2e
>1f30	12		               .byte     18   ; position 15
>1f31	20 20 46 32	               .null     "  f2  ",146
>1f35	20 20 92 00
>1f39	03 12 0c	f3abutton      .byte     menu1col1,fkeyleft,f1top+3     ;137
>1f3c	53 41 56 45	               .text     "save to........"
>1f40	20 54 4f 2e 2e 2e 2e 2e 2e 2e 2e
>1f4b	12		               .byte     18            ; position 15
>1f4c	a9 20 46 33	               .null     $a9," f3 ",223,146
>1f50	20 df 92 00
>1f54	0e 12 0d	f4abutton      .byte     menu1col2,fkeyleft,f1top+4     ;134
>1f57	4c 4f 41 44	               .text     "load from......"
>1f5b	20 46 52 4f 4d 2e 2e 2e 2e 2e 2e
>1f66	12		               .byte     18             ; position 15
>1f67	20 20 46 34	               .null     "  f4  ",146
>1f6b	20 20 92 00
>1f6f	03 12 0f	f5abutton      .byte     menu1col1,fkeyleft,f1top+6     ;135
>1f72	43 4c 45 41	               .text     "clear.........."
>1f76	52 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e
>1f81	12		               .byte     18             ; position 15
>1f82	a9 20 46 35	               .null     $a9," f5 ",223,146
>1f86	20 df 92 00
>1f8a	0e 12 10	f6abutton      .byte     menu1col2,fkeyleft,f1top+7    ;139
>1f8d	46 49 4c 4c	               .text     "fill..........."
>1f91	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e
>1f9c	12		               .byte     18             ; position 15
>1f9d	20 20 46 36	               .null     "  f6  ",146
>1fa1	20 20 92 00
>1fa5	03 12 12	f7abutton      .byte     menu1col1,fkeyleft,f1top+9    ;136
>1fa8	52 45 53 54	               .text     "restore all...."
>1fac	4f 52 45 20 41 4c 4c 2e 2e 2e 2e
>1fb7	12		               .byte     18             ; position 15
>1fb8	a9 20 46 37	               .null     $a9," f7 ",223,146
>1fbc	20 df 92 00
>1fc0	0e 12 13	f8abutton      .byte     menu1col2,fkeyleft,f1top+10
>1fc3	47 4f 20 54	               .text     "go to menu #2.."
>1fc7	4f 20 4d 45 4e 55 20 23 32 2e 2e
>1fd2	12		               .byte     18             ; position 15
>1fd3	20 20 46 38	               .null     "  f8  ", 146
>1fd7	20 20 92 00
>1fdb	0f 12 09	f1bbutton      .byte     menu2col1,fkeyleft,f1top
>1fde	56 45 52 54	               .text     "vertical flip.."
>1fe2	49 43 41 4c 20 46 4c 49 50 2e 2e
>1fed	12		               .byte     18             ; position 15
>1fee	a9 20 46 31	               .null     $a9," f1 ",223,146
>1ff2	20 df 92 00
>1ff6	0c 12 0a	f2bbutton      .byte     menu2col2,fkeyleft,f1top+1
>1ff9	48 4f 52 5a	               .text     "horzontal flip."
>1ffd	4f 4e 54 41 4c 20 46 4c 49 50 2e
>2008	12		               .byte     18             ; position 15
>2009	20 20 46 32	               .null     "  f2  ",146
>200d	20 20 92 00
>2011	0f 12 0c	f3bbutton      .byte     menu2col1,fkeyleft,f1top+3
>2014	53 43 52 4f	               .text     "scroll to right"
>2018	4c 4c 20 54 4f 20 52 49 47 48 54
>2023	12		               .byte     18             ; position 15
>2024	a9 20 46 33	               .null     $a9," f3 ",223,146
>2028	20 df 92 00
>202c	0c 12 0d	f4bbutton      .byte     menu2col2,fkeyleft,f1top+4
>202f	53 43 52 4f	               .text     "scroll to left."
>2033	4c 4c 20 54 4f 20 4c 45 46 54 2e
>203e	12		               .byte     18             ; position 15
>203f	20 20 46 34	               .null     "  f4  ",146
>2043	20 20 92 00
>2047	0f 12 0f	f5bbutton      .byte     menu2col1,fkeyleft,f1top+6
>204a	53 43 52 4f	               .text     "scroll up......"
>204e	4c 4c 20 55 50 2e 2e 2e 2e 2e 2e
>2059	12		               .byte     18             ; position 15
>205a	a9 20 46 35	               .null     $a9," f5 ",223,146
>205e	20 df 92 00
>2062	0c 12 10	f6bbutton      .byte     menu2col2,fkeyleft,f1top+7
>2065	53 43 52 4f	               .text     "scroll down...."
>2069	4c 4c 20 44 4f 57 4e 2e 2e 2e 2e
>2074	12		               .byte     18             ; position 15
>2075	20 20 46 36	               .null     "  f6  ",146
>2079	20 20 92 00
>207d	0f 12 12	f7bbutton      .byte     menu2col1,fkeyleft,f1top+9
>2080	52 45 56 45	               .text     "reverse bits..."
>2084	52 53 45 20 42 49 54 53 2e 2e 2e
>208f	12		               .byte     18             ; position 15
>2090	a9 20 46 37	               .null     $a9," f7 ",223,146
>2094	20 df 92 00
>2098	0c 12 13	f8bbutton      .byte     menu2col2,fkeyleft,f1top+10
>209b	47 4f 20 54	               .text     "go to menu #1.."
>209f	4f 20 4d 45 4e 55 20 23 31 2e 2e
>20aa	12		               .byte     18             ; position 15
>20ab	20 20 46 38	               .null     "  f8  ", 146
>20af	20 20 92 00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.20b3			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.20b3			screendis
.20b3	08		               php
.20b4	48		               pha
.20b5	ad 11 d0	               lda  $d011
.20b8	29 ef		               and  #%11101111
.20ba	8d 11 d0	               sta  $d011
.20bd	68		               pla
.20be	28		               plp
.20bf	60		               rts
.20c0			screenena
.20c0	08		               php
.20c1	48		               pha
.20c2	ad 11 d0	               lda  $d011
.20c5	09 10		               ora  #%00010000
.20c7	8d 11 d0	               sta  $d011
.20ca	68		               pla
.20cb	28		               plp
.20cc	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.20cd			scrmaninit
.20cd	20 fb 21	               jsr  push
.20d0	a9 06		               lda  #vbleu
.20d2	8d 21 d0	               sta  vicbackcol
.20d5	a9 05		               lda  #vvert
.20d7	8d 20 d0	               sta  vicbordcol
.20da	a9 01		               lda  #vblanc
.20dc	8d 86 02	               sta  bascol
.20df	ad 00 04	               lda  scrnram
.20e2	8d 00 04	               sta  scrnram
.20e5	20 ed 20	               jsr  cls
.20e8	20 3a 22	               jsr  pop
.20eb	60		               rts
>20ec	8e		characterset   .byte b_uppercase
.20ed			cls
.20ed	08		               php
.20ee	48		               pha
.20ef	a9 93		               lda  #$93
.20f1	20 04 21	               jsr  putch
.20f4	68		               pla
.20f5	28		               plp
.20f6	60		               rts
.20f7			putnch
.20f7	08		               php
.20f8	e0 00		               cpx  #$00
.20fa	f0 06		               beq  out
.20fc	20 d2 ff	again          jsr  $ffd2
.20ff	ca		               dex
.2100	d0 fa		               bne  again
.2102	28		out            plp
.2103	60		               rts
.2104			putch
.2104	08		               php
.2105	20 d2 ff	               jsr  $ffd2
.2108	28		               plp
.2109	60		               rts
.210a			puts
.210a	20 fb 21	               jsr  push
.210d	86 fb		               stx  zpage1
.210f	84 fc		               sty  zpage1+1
.2111	a0 00		               ldy  #0
.2113	b1 fb		next           lda  (zpage1),y
.2115	f0 09		               beq  exit
.2117	20 04 21	               jsr  putch
.211a	20 02 23	               jsr  inczp1
.211d	4c 13 21	               jmp  next
.2120	20 3a 22	exit           jsr  pop
.2123	60		               rts
.2124			gotoxy
.2124	08		               php
.2125	18		               clc
.2126	8a		               txa
.2127	48		               pha
.2128	98		               tya
.2129	aa		               tax
.212a	68		               pla
.212b	a8		               tay
.212c	20 f0 ff	               jsr  kplot
.212f	28		               plp
.2130	60		               rts
.2131			cursor
=$0286			bascol    =    $0286
.2131	08		               php
.2132	48		               pha
.2133	90 12		               bcc  restore
.2135	20 f0 ff	               jsr  kplot
.2138	8c 59 21	               sty  cx
.213b	8e 5a 21	               stx  cy
.213e	ad 86 02	               lda  bascol
.2141	8d 5b 21	               sta  bcol
.2144	4c 56 21	               jmp  out
.2147	ae 5a 21	restore        ldx  cy
.214a	ac 59 21	               ldy  cx
.214d	20 f0 ff	               jsr  kplot
.2150	ad 5b 21	               lda  bcol
.2153	8d 86 02	               sta  bascol
.2156	68		out            pla
.2157	28		               plp
.2158	60		               rts
>2159	00		cx   .byte     $00
>215a	00		cy   .byte     $00
>215b	00		bcol .byte     $00
.215c			cursave
.215c	08		               php
.215d	38		               sec
.215e	20 31 21	               jsr  cursor
.2161	28		               plp
.2162	60		               rts
.2163			curput
.2163	08		               php
.2164	18		               clc
.2165	20 31 21	               jsr  cursor
.2168	28		               plp
.2169	60		               rts
.216a			putsxy
.216a	20 fb 21	               jsr  push
.216d	86 fb		               stx  zpage1
.216f	84 fc		               sty  zpage1+1
.2171	a0 00		               ldy  #$00
.2173	b1 fb		               lda  (zpage1),y
.2175	aa		               tax
.2176	20 02 23	               jsr  inczp1
.2179	b1 fb		               lda  (zpage1),y
.217b	a8		               tay
.217c	20 24 21	               jsr  gotoxy
.217f	20 02 23	               jsr  inczp1
.2182	a6 fb		               ldx  zpage1
.2184	a4 fc		               ldy  zpage1+1
.2186	20 0a 21	               jsr  puts
.2189	20 3a 22	               jsr  pop
.218c	60		               rts
>218d	00 00		straddr   .word     $00
>218f	00		px        .byte     $00
>2190	00		py        .byte     $00
>2191	00 00		zp1       .word     $00
.2193			putscxy
.2193	20 fb 21	               jsr  push
.2196	84 fc		               sty  zpage1+1
.2198	86 fb		               stx  zpage1
.219a	ad 86 02	               lda  bascol
.219d	8d bd 21	               sta  bc
.21a0	a0 00		               ldy #$00
.21a2	b1 fb		               lda  (zpage1),y
.21a4	8d 86 02	               sta  bascol
.21a7	20 02 23	               jsr  inczp1
.21aa	a6 fb		               ldx  zpage1
.21ac	a4 fc		               ldy  zpage1+1
.21ae	20 6a 21	               jsr  putsxy
.21b1	ad bd 21	               lda  bc
.21b4	8d 86 02	               sta  bascol
.21b7	20 3a 22	               jsr  pop
.21ba	60		               rts
>21bb	00 00		straddr  .word      $00
>21bd	00		bc       .byte      $00
>21be	00 00		zp1      .word      $00
.21c0			putrahex
.21c0	08		               php
.21c1	48		               pha
.21c2	20 18 24	               jsr  a2hex
.21c5	a9 b7		               lda  #<a2hexstr
.21c7	a0 23		               ldy  #>a2hexstr
.21c9	20 0a 21	               jsr  puts
.21cc	68		               pla
.21cd	28		               plp
.21ce	60		               rts
.21cf			kputrahexxy
.21cf			bputrahexxy
.21cf			putrahexxy
.21cf	08		               php
.21d0	20 18 24	               jsr  a2hex
.21d3	a9 b4		               lda  #<a2hexpos
.21d5	a0 23		               ldy  #>a2hexpos
.21d7	20 6a 21	               jsr  putsxy
.21da	68		               pla
.21db	28		               plp
.21dc	60		               rts
.21dd			putrahexcxy
.21dd	08		               php
.21de	20 18 24	               jsr  a2hex
.21e1	a9 b4		               lda  #<a2hexpos
.21e3	a0 23		               ldy  #>a2hexpos
.21e5	20 93 21	               jsr  putscxy
.21e8	68		               pla
.21e9	28		               plp
.21ea	60		               rts
.21eb			setinverse
.21eb	48		               pha
.21ec	a9 12		               lda  #$12
.21ee	20 d2 ff	               jsr  $ffd2
.21f1	68		               pla
.21f2	60		               rts
.21f3			clrinverse
.21f3	48		               pha
.21f4	a9 92		               lda  #$92
.21f6	20 d2 ff	               jsr  $ffd2
.21f9	68		               pla
.21fa	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.21fb			push
.21fb	08		          php            ; stack : flg, pcl, pch
.21fc	78		          sei
.21fd	8d 37 22	          sta  ra        ; save a
.2200	68		          pla            ; stack : pcl, pch
.2201	8d 36 22	          sta  rp        ; save rp
.2204	68		          pla            ; stack : pch
.2205	8d 38 22	          sta  pc        ; save pcl
.2208	68		          pla            ; stack : -
.2209	8d 39 22	          sta  pc+1      ; save pch
.220c	a5 fb		          lda  zpage1    ; get zpage1 low byte
.220e	48		          pha            ; stack : zp1l
.220f	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.2211	48		          pha            ; stack : zp1h, zp1l
.2212	a5 fd		          lda  zpage2    ; get zpage2 low byte
.2214	48		          pha            ; stack : zp2l, zp1h, zp1l
.2215	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.2217	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.2218	ad 36 22	          lda  rp        ; get rp
.221b	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.221c	ad 37 22	          lda  ra        ; get a
.221f	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.2220	8a		          txa            ; get x
.2221	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.2222	98		          tya            ; get y
.2223	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2224	ad 39 22	          lda  pc+1      ; get pch
.2227	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2228	ad 38 22	          lda  pc        ; get pcl
.222b	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.222c	ad 36 22	          lda  rp        ; get rp
.222f	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2230	ad 37 22	          lda  ra        ; get a
.2233	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2234	58		          cli
.2235	60		          rts
>2236	00		rp        .byte     0
>2237	00		ra        .byte     0
>2238	00 00		pc        .word     0
.223a			pull
.223a			pop
.223a	78		          sei
.223b	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.223c	8d 6f 22	          sta  pc        ; save pcl
.223f	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2240	8d 70 22	          sta  pc+1      ; save pch
.2243	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.2244	a8		          tay            ; set y
.2245	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.2246	aa		          tax            ; set x
.2247	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.2248	8d 6e 22	          sta  ra        ; save a
.224b	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.224c	8d 6d 22	          sta  rp        ; save rp
.224f	68		          pla            ; stack : zp2l, zp1h, zp1l
.2250	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.2252	68		          pla            ; stack : zp1h, zp1l
.2253	85 fd		          sta  zpage2    ; get zpage2 High byte
.2255	68		          pla            ; stack : zp1l
.2256	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.2258	68		          pla            ; stack :
.2259	85 fb		          sta  zpage1    ; get zpage1 High byte
.225b	ad 70 22	          lda  pc+1      ; get pch
.225e	48		          pha            ; stack : pch
.225f	ad 6f 22	          lda  pc
.2262	48		          pha            ; stack : pcl, pch
.2263	ad 6d 22	          lda  rp        ; get rp
.2266	48		          pha            ; stack : rp, pcl, pch
.2267	ad 6e 22	          lda  ra        ; set ra
.226a	58		          cli
.226b	28		          plp            ; stack : pcl, pch
.226c	60		          rts
>226d	00		rp        .byte     0
>226e	00		ra        .byte     0
>226f	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.2271			blkfill
.2271	20 fb 21	bf0            jsr  push
.2274	20 32 23	               jsr  savezp1
.2277	84 fc		               sty  zpage1+1
.2279	a0 00		               ldy  #$00
.227b	84 fb		               sty  zpage1
.227d	91 fb		bf1            sta  (zpage1),y
.227f	c8		               iny
.2280	d0 fb		               bne  bf1
.2282	20 41 23	               jsr  restzp1
.2285	20 3a 22	               jsr  pop
.2288	60		               rts
.2289			memfill
.2289	20 fb 21	               jsr  push
.228c	20 71 22	mf1            jsr  blkfill
.228f	c8		               iny
.2290	ca		               dex
.2291	d0 f9		               bne  mf1
.2293	20 3a 22	               jsr  pop
.2296	60		               rts
.2297			memmove
.2297	20 fb 21	               jsr  push
.229a	ba		               tsx            ; On se crée un pointeur ...
.229b	8a		               txa
.229c	18		               clc
.229d	69 0b		               adc  #11
.229f	a8		               tay
.22a0	a2 06		               ldx  #$06
.22a2	b9 00 01	nextbyte       lda  $0100,y
.22a5	99 f1 22	               sta  words,y
.22a8	c8		               iny
.22a9	ca		               dex
.22aa	d0 f6		               bne  nextbyte
.22ac	ad f1 22	               lda  s
.22af	8d c8 22	               sta  source+1
.22b2	ad f2 22	               lda  s+1
.22b5	8d c9 22	               sta  source+2
.22b8	ad f3 22	               lda  d
.22bb	8d c5 22	               sta  destin+1
.22be	ad f4 22	               lda  d+1
.22c1	8d c6 22	               sta  destin+2
.22c4	ad ff ff	destin         lda  $ffff
.22c7	8d ff ff	source         sta  $ffff
.22ca	ee c5 22	               inc  destin+1
.22cd	d0 03		               bne  src
.22cf	ee c6 22	               inc  destin+2
.22d2	ee c8 22	src            inc  source+1
.22d5	d0 03		               bne  cnt
.22d7	ee c9 22	               inc  source+2
.22da	ad f5 22	cnt            lda  compte
.22dd	d0 08		               bne  decit
.22df	ad f6 22	               lda  compte+1
.22e2	f0 09		               beq  fini
.22e4	ce f6 22	               dec  compte+1
.22e7	ce f5 22	decit          dec  compte
.22ea	4c c4 22	               jmp  destin
.22ed	20 3a 22	fini           jsr  pop
.22f0	60		               rts
.22f1			words
>22f1	00 00		s         .word     $0000
>22f3	00 00		d         .word     $0000
>22f5	00 00		compte    .word     $0000
.22f7			decword
.22f7	20 fb 21	               jsr  push
.22fa	86 fd		               stx  zpage2
.22fc	84 fe		               sty  zpage2+1
.22fe	20 3a 22	               jsr  pop
.2301	60		               rts
.2302			inczp1
.2302	08		               php
.2303	48		               pha
.2304	e6 fb		               inc  zpage1
.2306	a5 fb		               lda  zpage1
.2308	d0 02		               bne  nopage
.230a	e6 fc		               inc  zpage1+1
.230c	68		nopage         pla
.230d	28		               plp
.230e	60		               rts
.230f			deczp1
.230f	08		                php
.2310	48		                pha
.2311	c6 fb		                dec  zpage1
.2313	d0 02		                bne  nopage
.2315	c6 fc		                dec  zpage1+1
.2317	68		nopage          pla
.2318	28		                plp
.2319	60		                rts
.231a			inczp2
.231a	08		               php
.231b	48		               pha
.231c	e6 fd		               inc  zpage2
.231e	a5 fd		               lda  zpage2
.2320	d0 02		               bne  nopage
.2322	e6 fe		               inc  zpage2+1
.2324	68		nopage         pla
.2325	28		               plp
.2326	60		               rts
.2327			deczp2
.2327	08		               php
.2328	48		               pha
.2329	a5 fd		               lda  zpage2
.232b	d0 02		               bne  nopage
.232d	c6 fe		               dec  zpage2+1
.232f	68		nopage         pla
.2330	28		               plp
.2331	60		               rts
.2332			savezp1
.2332	08		               php
.2333	48		               pha
.2334	a5 fb		               lda  zpage1
.2336	8d ae 23	               sta  zp1
.2339	a5 fc		               lda  zpage1+1
.233b	8d af 23	               sta  zp1+1
.233e	68		               pla
.233f	28		               plp
.2340	60		               rts
.2341			restzp1
.2341	08		               php
.2342	48		               pha
.2343	ad ae 23	               lda zp1
.2346	85 fb		               sta zpage1
.2348	ad af 23	               lda zp1+1
.234b	85 fc		               sta zpage1+1
.234d	68		               pla
.234e	28		               plp
.234f	60		               rts
.2350			savezp2
.2350	08		         php
.2351	48		         pha
.2352	a5 fd		         lda zpage2
.2354	8d b0 23	         sta zp2
.2357	a5 fe		         lda zpage2+1
.2359	8d b1 23	         sta zp2+1
.235c	68		         pla
.235d	28		         plp
.235e	60		         rts
.235f			restzp2
.235f	08		                php
.2360	48		                pha
.2361	ad b0 23	                lda  zp2
.2364	85 fd		                sta  zpage2
.2366	ad b1 23	                lda  zp2+1
.2369	85 fe		                sta  zpage2+1
.236b	68		                pla
.236c	28		                plp
.236d	60		                rts
.236e			xy2addr
.236e	08		                php
.236f	48		                pha
.2370	8a		                txa
.2371	48		                pha
.2372	98		                tya
.2373	48		                pha
.2374	ad a9 23	                lda     addr1+1
.2377	8d ab 23	                sta     addr2+1
.237a	ad a8 23	                lda     addr1
.237d	8d aa 23	                sta     addr2
.2380	c0 00		                cpy     #$00
.2382	f0 0f		                beq     addx
.2384	18		moreline        clc
.2385	6d a7 23	                adc     ymult
.2388	90 03		                bcc     norepy
.238a	ee ab 23	                inc     addr2+1
.238d	8d aa 23	norepy          sta     addr2
.2390	88		                dey
.2391	d0 f1		                bne     moreline
.2393	8a		addx            txa
.2394	18		                clc
.2395	6d aa 23	                adc     addr2
.2398	90 03		                bcc     thatsit
.239a	ee ab 23	                inc     addr2+1
.239d	8d aa 23	thatsit         sta     addr2
.23a0	68		                pla
.23a1	a8		                tay
.23a2	68		                pla
.23a3	aa		                tax
.23a4	68		                pla
.23a5	28		                plp
.23a6	60		                rts
>23a7	28		ymult          .byte     40
>23a8	00 00		addr1          .word     $0000
>23aa	00 00		addr2          .word     $0000
>23ac	00 00		bytecnt        .word     $0000
>23ae	00 00		zp1        .word   $0000
>23b0	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>23b2	01		a2hexcol       .byte     1              ; pour aputscxy
>23b3	00		a2hexbkcol     .byte     %00000000
.23b4			a2hexpos
>23b4	00		a2hexpx        .byte     0              ; pour aputsxy
>23b5	00		a2hexpy        .byte     0
>23b6	24		a2hexprefix    .byte     "$"            ; pour aputs
>23b7	00 00		a2hexstr       .word     $00
>23b9	00 00		               .word     $00
>23bb	00		               .byte     0              ; 0 end string
>23bc	30 30 30 30	abin           .null     "00000000"
>23c0	30 30 30 30 00
>23c5	20 20 20 00	adec           .null     "   "
.23c9			putahexfmtxy
.23c9	20 fb 21	               jsr  push
.23cc	20 18 24	               jsr  a2hex
.23cf	ae b4 23	               ldx  a2hexpx
.23d2	ac b5 23	               ldy  a2hexpy
.23d5	20 24 21	               jsr  gotoxy
.23d8	a2 b6		               ldx  #<a2hexprefix
.23da	a0 23		               ldy  #>a2hexprefix
.23dc	20 0a 21	               jsr  puts
.23df	20 3a 22	               jsr  pop
.23e2	60		               rts
.23e3			putahexfmt
.23e3	20 fb 21	               jsr  push
.23e6	20 18 24	               jsr  a2hex
.23e9	a2 b6		               ldx  #<a2hexprefix
.23eb	a0 23		               ldy  #>a2hexprefix
.23ed	20 0a 21	               jsr  puts
.23f0	20 3a 22	               jsr  pop
.23f3	60		               rts
.23f4			putahex
.23f4	20 fb 21	               jsr  push
.23f7	20 18 24	               jsr  a2hex
.23fa	a2 b7		               ldx  #<a2hexstr
.23fc	a0 23		               ldy  #>a2hexstr
.23fe	20 0a 21	               jsr  puts
.2401	20 3a 22	               jsr  pop
.2404	60		               rts
.2405			nib2hex
.2405	08		               php
.2406	29 0f		               and  #$0f
.2408	f8		               sed
.2409	18		               clc
.240a	69 90		               adc  #$90
.240c	69 40		               adc  #$40
.240e	d8		               cld
.240f	28		               plp
.2410	60		               rts
.2411			lsra4bits
.2411	08		               php
.2412	4a		               lsr
.2413	4a		               lsr
.2414	4a		               lsr
.2415	4a		               lsr
.2416	28		               plp
.2417	60		               rts
.2418			a2hex
.2418	08		               php
.2419	48		               pha
.241a	48		               pha
.241b	20 11 24	               jsr  lsra4bits
.241e	20 05 24	               jsr  nib2hex
.2421	8d b7 23	               sta  a2hexstr
.2424	68		               pla
.2425	20 05 24	               jsr  nib2hex
.2428	8d b8 23	               sta  a2hexstr+1
.242b	a9 00		               lda  #$00                ; set end of string
.242d	8d b9 23	               sta  a2hexstr+2
.2430	68		               pla
.2431	28		               plp
.2432	60		               rts
.2433			xy2hex
.2433	20 fb 21	               jsr  push
.2436	20 18 24	               jsr  a2hex
.2439	8a		               txa
.243a	48		               pha
.243b	20 11 24	               jsr  lsra4bits
.243e	20 05 24	               jsr  nib2hex
.2441	8d b7 23	               sta  a2hexstr
.2444	68		               pla
.2445	20 05 24	               jsr  nib2hex
.2448	8d b8 23	               sta  a2hexstr+1
.244b	98		               tya
.244c	48		               pha
.244d	20 11 24	               jsr  lsra4bits
.2450	20 05 24	               jsr  nib2hex
.2453	8d b9 23	               sta  a2hexstr+2
.2456	68		               pla
.2457	20 05 24	               jsr  nib2hex
.245a	8d ba 23	               sta  a2hexstr+3
.245d	a9 00		               lda  #$00                ; 0 ended string
.245f	8d bb 23	               sta  a2hexstr+4
.2462	20 3a 22	               jsr  pop
.2465			atobin
.2465	20 fb 21	               jsr  push
.2468	a2 08		               ldx  #8
.246a	a0 00		               ldy  #0
.246c	18		               clc
.246d	2a		nextbit        rol
.246e	48		               pha
.246f	69 00		               adc  #$00
.2471	29 01		               and  #$01
.2473	20 05 24	               jsr  nib2hex
.2476	99 bc 23	               sta  abin,y
.2479	68		               pla
.247a	c8		               iny
.247b	ca		               dex
.247c	d0 ef		               bne  nextbit
.247e	a9 00		               lda  #0
.2480	99 bc 23	               sta  abin,y
.2483	20 3a 22	               jsr  pull
.2486	60		               rts
.2487			putabin
.2487	20 65 24	               jsr     atobin
.248a	20 fb 21	               jsr     push
.248d	a2 bc		               ldx     #<abin
.248f	a0 23		               ldy     #>abin
.2491	20 0a 21	               jsr     puts
.2494	20 3a 22	               jsr     pop
.2497	60		               rts
.2498			printabin
.2498	20 fb 21	               jsr     push
.249b	a2 bc		               ldx     #<abin
.249d	a0 23		               ldy     #>abin
.249f	20 0a 21	               jsr     puts
.24a2	20 3a 22	               jsr     pop
.24a5	60		               rts
.24a6			putabinfmt
.24a6	08		               php
.24a7	48		               pha
.24a8	a9 25		               lda     #"%"
.24aa	20 04 21	               jsr     putch
.24ad	68		               pla
.24ae	20 87 24	               jsr     putabin
.24b1	28		               plp
.24b2	60		               rts
.24b3			putabinxy
.24b3	20 24 21	               jsr     gotoxy
.24b6	20 87 24	               jsr     putabin
.24b9	60		               rts
.24ba			putabinfmtxy
.24ba	20 24 21	               jsr     gotoxy
.24bd	20 a6 24	               jsr     putabinfmt
.24c0	60		               rts
.24c1			atodec
.24c1	20 fb 21	               jsr  push
.24c4	f8		               sed
.24c5	aa		               tax
.24c6	a0 00		               ldy  #$00
.24c8	a9 00		               lda  #$00
.24ca	18		nextbit        clc
.24cb	69 01		               adc  #$01
.24cd	90 01		               bcc  decx
.24cf	c8		               iny
.24d0	ca		decx           dex
.24d1	d0 f7		               bne  nextbit
.24d3	48		               pha
.24d4	98		               tya
.24d5	20 05 24	               jsr  nib2hex
.24d8	8d c5 23	               sta  adec
.24db	68		               pla
.24dc	48		               pha
.24dd	20 05 24	               jsr  nib2hex
.24e0	8d c7 23	               sta  adec+2
.24e3	68		               pla
.24e4	6a		               ror
.24e5	6a		               ror
.24e6	6a		               ror
.24e7	6a		               ror
.24e8	20 05 24	               jsr  nib2hex
.24eb	8d c6 23	               sta  adec+1
.24ee	d8		               cld
.24ef	20 3a 22	               jsr  pull
.24f2	60		               rts
>24f3	00 00 00	buffer         .byte     0,0,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>24f6	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>24fa	00 00 00 00 00 00 00 00 00 0d 00 00
>2506	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>250a	00 00 00 00 00 00 00 00 00 00 00 00
>2516	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>251a	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>2526	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>252a	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>2536	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>253a	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>2546	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>254a	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>2556	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>255a	00 00 00 00 00 00 00 00 00 00 00 00
>2566	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>256a	00 00 00 00 00 00 00 00 00 00 00 00
>2576	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>257a	00 00 00 00 00 00 00 00 00 00 00 00
>2586	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>258a	00 00 00 00 00 00 00 00 00 00 00 00
>2596	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>259a	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>25a6	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>25aa	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>25b6	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>25ba	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>25c6	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>25ca	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>25d6	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>25da	00 00 00 00 00 00 00 00 00 00 00 00
>25e6	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>25ea	00 00 00 00 00 00 00 00 00 00 00 00
.25f6			waitstop
.25f6	20 fb 21	               jsr  push
.25f9	20 ed f6	wait           jsr  k_stop
.25fc	d0 fb		               bne  wait
.25fe	20 3a 22	               jsr  pop
.2601	60		               rts
.2602			anykey
.2602	08		               php
.2603	48		               pha
.2604	a5 cb		nokey          lda 203
.2606	c9 40		               cmp #64
.2608	f0 fa		               beq nokey
.260a	20 10 26	               jsr releasekey
.260d	68		               pla
.260e	28		               plp
.260f	60		               rts
.2610			releasekey
.2610	08		               php
.2611	48		               pha
.2612	a5 cb		keypressed     lda 203
.2614	c9 40		               cmp #64
.2616	d0 fa		               bne keypressed
.2618	68		               pla
.2619	28		               plp
.261a	60		               rts
.261b			getkey
.261b	20 e4 ff	again          jsr  getin
.261e	c9 00		               cmp  #0
.2620	f0 f9		               beq  again
.2622	60		               rts
.2623			waitkey
.2623	20 fb 21	               jsr  push
.2626	8d 74 26	               sta  thekey
.2629	20 e4 ff	nope           jsr  getin
.262c	20 d2 ff	               jsr  chrout
.262f	cd 74 26	               cmp  thekey
.2632	d0 f5		               bne  nope
.2634	20 d2 ff	               jsr  chrout
.2637	20 3a 22	               jsr  pop
.263a	60		               rts
.263b			waitspace
.263b	20 fb 21	               jsr  push
.263e	a9 7f		wait           lda  #$7f  ;%01111111
.2640	8d 00 dc	               sta  $dc00
.2643	ad 01 dc	               lda  $dc01
.2646	29 10		               and  #$10  ;mask %00010000
.2648	d0 f4		               bne  wait
.264a	20 3a 22	               jsr  pop
.264d			waitsstop
.264d	20 fb 21	               jsr  push
.2650	20 ed f6	wait           jsr  k_stop  ;%01111111
.2653	d0 fb		               bne  wait
.2655	20 3a 22	               jsr  pop
.2658			waitreturn
.2658	20 fb 21	               jsr  push
.265b	ad 75 26	               lda  thecount
.265e	8d 00 04	               sta  scrnram
.2661	a9 02		               lda  #$02
.2663	8d 00 d8	               sta  colorram
.2666	20 e4 ff	nope           jsr  getin
.2669	c9 0d		nohex          cmp  #$0d
.266b	d0 f9		               bne  nope
.266d	ee 75 26	               inc  thecount
.2670	20 3a 22	               jsr  pop
.2673	60		               rts
>2674	00		thekey         .byte   0
>2675	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-disk.asm

.2676			diskerror
.2676	20 fb 21	               jsr  push
.2679	ad a7 27	               lda  dsk_dev   ; Select device 8
.267c	85 ba		               sta  $ba       ;
.267e	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.2681	a9 6f		               lda  #$6f
.2683	85 b9		               sta  $b9       ;
.2685	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.2688	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.268b	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.268e	c9 0d		               cmp  #$0d      ; Is it CR ?
.2690	d0 f6		               bne  nextchar  ; No, get next char
.2692	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.2695	20 3a 22	               jsr  pop
.2698	60		               rts
.2699			diskdir
.2699	20 fb 21	               jsr  push
.269c	a9 24		               lda  #$24      ; L012C - Filename is "$"
.269e	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.26a0	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.26a2	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.26a4	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.26a6	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.26a8	a9 01		               lda  #$01      ; L0138 - set ...
.26aa	85 b7		               sta  $b7       ; L013A - ... length of current filename
.26ac	ad a7 27	               lda  dsk_dev   ; L013C - set 8 as ...
.26af	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.26b1	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.26b3	85 b9		               sta  $b9       ; L0142 - ... secondary address
.26b5	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.26b8	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...%10111010
.26ba	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.26bd	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.26bf	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.26c2	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.26c4	85 90		               sta  $90       ; L0153 - ... kernal status word.
.26c6	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.26c8	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.26ca	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.26cd	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.26cf	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.26d1	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.26d3	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.26d6	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.26d8	d0 28		               bne  exit      ; L0167
.26da	a4 fb		               ldy  $fb       ; L0169
.26dc	88		               dey            ; L016b
.26dd	d0 e9		               bne  loop1     ; L016C - If not last, loop
.26df	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.26e1	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.26e4	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.26e6	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.26e9	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.26ec	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.26ee	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.26f0	aa		               tax            ; L017F - tfr a in x
.26f1	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.26f3	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.26f6	4c e9 26	               jmp  loop3     ; L0185 - get another byte
.26f9	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.26fb	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.26fe	a0 02		               ldy  #$02      ; L018D - set Y to 2
.2700	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.2702	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.2705	20 3a 22	               jsr  pop
.2708	60		               rts            ; L0194
.2709			directory
.2709	20 99 26	               jsr  diskdir
.270c	20 76 26	               jsr  diskerror
.270f	60		               rts
.2710			memtofile
.2710	20 81 27	               jsr  dsk_putmesg
.2713	20 fb 21	               jsr  push
.2716	ad ab 27	               lda  dsk_fnlen
.2719	ae a9 27	               ldx  dsk_fnptr      ; load fname addr. lbyte
.271c	ac aa 27	               ldy  dsk_fnptr+1
.271f	20 bd ff	               jsr  setnam         ; call setnam
.2722	ad a8 27	               lda  dsk_lfsno
.2725	ae a7 27	               ldx  dsk_dev        ; specified device
.2728	a0 00		skip           ldy  #$00
.272a	20 ba ff	               jsr  setlfs         ; call setlfs
.272d	ad a3 27	               lda  dsk_data_s     ; put data start lbyte in stal
.2730	85 c1		               sta  stal
.2732	ad a4 27	               lda  dsk_data_s+1   ; put data start hbyte in stal
.2735	85 c2		               sta  stal+1
.2737	ae a5 27	               ldx  dsk_data_e     ; put data end lbyte in x
.273a	ac a6 27	               ldy  dsk_data_e+1   ; put data end hbyte in y
.273d	a9 c1		               lda  #stal          ; start address located in $c1/$c2
.273f	20 d8 ff	               jsr  save           ; call save
.2742	90 00		               bcc  noerror        ; if carry set, a load error has happened
.2744	20 3a 22	noerror        jsr  pop
.2747	60		               rts
.2748			filetomem
.2748	20 fb 21	               jsr push
.274b	ad ab 27	               lda dsk_fnlen
.274e	ae a9 27	               ldx dsk_fnptr
.2751	ac aa 27	               ldy dsk_fnptr+1
.2754	20 bd ff	               jsr setnam     ; call setnam
.2757	ad a8 27	               lda dsk_lfsno
.275a	ae a7 27	               ldx dsk_dev    ; default to device 8
.275d	a0 01		               ldy #$01       ; not $01 means: load to address stored in file
.275f	20 ba ff	               jsr setlfs     ; call setlfs
.2762	a9 00		               lda #$00       ; $00 means: load to memory (not verify)
.2764	20 d5 ff	               jsr load       ; call load
.2767	90 03		               bcc noerror      ; if carry set, a load error has happened
.2769	20 70 27	               jsr  error
.276c	20 3a 22	noerror        jsr pop
.276f	60		               rts
.2770			error
.2770	60		               rts
.2771	a2 bc		error1         ldx  #<dsk_emsg1
.2773	a0 27		               ldy  #>dsk_emsg1
.2775	20 0a 21	               jsr  puts
.2778	60		               rts
.2779	a2 d0		error2         ldx #<dsk_emsg2
.277b	a0 27		               ldy #>dsk_emsg2
.277d	20 0a 21	               jsr puts
.2780	60		               rts
.2781			dsk_putmesg
.2781	20 fb 21	               jsr push
.2784	a2 ac		               ldx #<dsk_msg0
.2786	a0 27		               ldy #>dsk_msg0
.2788	20 0a 21	               jsr puts
.278b	a9 20		               lda #$20
.278d	20 04 21	               jsr putch
.2790	ae a9 27	               ldx dsk_fnptr
.2793	ac aa 27	               ldy dsk_fnptr+1
.2796	20 0a 21	               jsr puts
.2799	ad a8 27	               lda dsk_lfsno
.279c	20 c3 ff	               jsr close
.279f	20 3a 22	               jsr pop
.27a2	60		               rts
>27a3	00 00		dsk_data_s     .word     $0000    ; example addresses
>27a5	00 20		dsk_data_e     .word     $2000
>27a7	08		dsk_dev        .byte     $08
>27a8	00		dsk_lfsno      .byte     $00
>27a9	00 00		dsk_fnptr      .word     $00
>27ab	00		dsk_fnlen      .byte     0
>27ac	8d		dsk_msg0       .byte     141
>27ad	53 41 56 49	               .null     "saving"
>27b1	4e 47 00
>27b4	8d		dsk_msg1       .byte     141
>27b5	53 55 43 43	               .null     "succes"
>27b9	45 53 00
>27bc	8d		dsk_emsg1      .byte     141
>27bd	46 49 43 48	               .null     "fichier non ouvert"
>27c1	49 45 52 20 4e 4f 4e 20 4f 55 56 45 52 54 00
>27d0	11		dsk_emsg2      .byte     17
>27d1	45 52 52 45	               .null     "erreur d'ecriture"
>27d5	55 52 20 44 27 45 43 52 49 54 55 52 45 00

;******  Return to file: charedit.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Mon Nov 13 02:48:11 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm

=$0d			flashcol = vvert1

;******  Return to file: charedit.asm

=$0400			scrnnewram     =    $0400
=14			charsdef       =    14
=$0d			mesgrid_left   =    vvert1
=9			grid_top       =    9
=1			grid_left      =    1
=16			grid_bot       =    grid_top + 7
=8			grid_right     =    grid_left + 7
=$03			mesgcol        =    vcyan
=$07			menu1col       =    vjaune
=$0d			menu2col       =    vvert1
.080d			main
.080d	20 6e 1b	               jsr  push
.0810	20 21 1a	               jsr  screendis
.0813	20 3b 1a	               jsr  scrmaninit
.0816	20 96 0d	               jsr  copycharset
.0819	20 80 0d	               jsr  setscreenptr
.081c	20 f7 0d	               jsr  staticscreen
.081f	20 8e 08	               jsr  setdefaultchar
.0822	20 2e 1a	               jsr  screenena
.0825	a9 00		               lda  #$00
.0827	8d 04 16	               sta  fkeyset
.082a	20 33 0e	               jsr  showfkeys
.082d	20 ad 1b	               jsr  pop
.0830	20 5b 15	               jsr  f8action
.0833	20 5b 15	               jsr  f8action
.0836	a9 00		               lda  #$00
.0838	20 59 0a	               jsr  keyaction
.083b	20 6e 1b	               jsr  push
.083e	a2 00		               ldx  #0
.0840	a0 00		               ldy  #0
.0842	20 97 1a	               jsr  gotoxy
.0845	20 ad 1b	               jsr  pop
.0848	20 5b 1a	               jsr  cls
.084b	20 6e 1b	               jsr  push
.084e	a2 10		               ldx  #<blankmsg
.0850	a0 16		               ldy  #>blankmsg
.0852	20 06 1b	               jsr  putscxy
.0855	a2 42		               ldx  #<bye_msg
.0857	a0 18		               ldy  #>bye_msg
.0859	20 06 1b	               jsr  putscxy
.085c	20 ad 1b	               jsr  pop
.085f	20 6e 1b	               jsr  push
.0862	a2 10		               ldx  #<blankmsg
.0864	a0 16		               ldy  #>blankmsg
.0866	20 06 1b	               jsr  putscxy
.0869	a2 64		               ldx  #<any_msg
.086b	a0 18		               ldy  #>any_msg
.086d	20 06 1b	               jsr  putscxy
.0870	20 ad 1b	               jsr  pop
.0873	20 6e 1b	               jsr  push
.0876	a2 00		               ldx  #0
.0878	a0 00		               ldy  #0
.087a	20 97 1a	               jsr  gotoxy
.087d	20 ad 1b	               jsr  pop
.0880	20 8e 1f	               jsr  getkey
.0883	20 66 fe	               jsr  k_warmboot
.0886	60		               rts
.0887			template
.0887	20 6e 1b	               jsr  push
.088a	20 ad 1b	               jsr  pop
.088d	60		               rts
.088e			setdefaultchar
.088e	20 6e 1b	               jsr  push
.0891	a9 40		               lda  #$40
.0893	8d 06 16	               sta  currentkey
.0896	aa		               tax
.0897	bc 69 1e	               ldy  asciitorom,x
.089a	8c 07 16	               sty  bitmapoffset
.089d	20 12 09	               jsr  showkeyval
.08a0	20 c7 0c	               jsr  drawbitmap
.08a3	20 6e 1b	               jsr  push
.08a6	a2 0d		               ldx  #13
.08a8	a0 0c		               ldy  #12
.08aa	20 97 1a	               jsr  gotoxy
.08ad	20 ad 1b	               jsr  pop
.08b0	20 77 1a	               jsr  putch
.08b3	20 6e 1b	               jsr  push
.08b6	a2 11		               ldx  #17
.08b8	a0 05		               ldy  #5
.08ba	20 97 1a	               jsr  gotoxy
.08bd	20 ad 1b	               jsr  pop
.08c0	20 34 1e	               jsr  atodec
.08c3	20 6e 1b	               jsr  push
.08c6	a2 38		isx            ldx  #<adec
.08c8	a0 1d		isy            ldy  #>adec
.08ca	20 7d 1a	               jsr  puts
.08cd	20 ad 1b	               jsr  pull
.08d0	20 ad 1b	               jsr  pop
.08d3	60		               rts
.08d4			setmenuacolor
.08d4	20 6e 1b	               jsr  push
.08d7	8d 7f 18	               sta  f1abutton
.08da	8d 99 18	               sta  f2abutton
.08dd	8d b3 18	               sta  f3abutton
.08e0	8d cd 18	               sta  f4abutton
.08e3	8d e7 18	               sta  f5abutton
.08e6	8d 01 19	               sta  f6abutton
.08e9	8d 1b 19	               sta  f7abutton
.08ec	8d 35 19	               sta  f8abutton
.08ef	20 ad 1b	               jsr  pop
.08f2	60		               rts
.08f3			setmenubcolor
.08f3	20 6e 1b	               jsr  push
.08f6	8d 50 19	               sta  f1bbutton
.08f9	8d 6a 19	               sta  f2bbutton
.08fc	8d 84 19	               sta  f3bbutton
.08ff	8d 9e 19	               sta  f4bbutton
.0902	8d b8 19	               sta  f5bbutton
.0905	8d d2 19	               sta  f6bbutton
.0908	8d ec 19	               sta  f7bbutton
.090b	8d 06 1a	               sta  f8bbutton
.090e	20 ad 1b	               jsr  pop
.0911	60		               rts
.0912			showkeyval
.0912	20 6e 1b	               jsr  push
.0915	20 6e 1b	               jsr  push
.0918	a2 01		               ldx  #1
.091a	a0 13		               ldy  #19
.091c	20 97 1a	               jsr  gotoxy
.091f	20 ad 1b	               jsr  pop
.0922	ad 06 16	               lda  currentkey
.0925	20 77 1a	               jsr  putch
.0928	48		               pha
.0929	a9 3d		               lda  #'='
.092b	20 77 1a	               jsr  putch
.092e	a9 25		               lda  #'%'
.0930	20 77 1a	               jsr  putch
.0933	68		               pla
.0934	20 fa 1d	               jsr  putabin
.0937	20 6e 1b	               jsr  push
.093a	a2 01		               ldx  #1
.093c	a0 14		               ldy  #20
.093e	20 97 1a	               jsr  gotoxy
.0941	20 ad 1b	               jsr  pop
.0944	20 6e 1b	               jsr  push
.0947	a2 13		isx            ldx  #<txt1
.0949	a0 0a		isy            ldy  #>txt1
.094b	20 7d 1a	               jsr  puts
.094e	20 ad 1b	               jsr  pull
.0951	a9 24		               lda  #'$'
.0953	20 77 1a	               jsr  putch
.0956	ad 06 16	               lda  currentkey
.0959	20 67 1d	               jsr  putahex
.095c	20 6e 1b	               jsr  push
.095f	a2 01		               ldx  #1
.0961	a0 15		               ldy  #21
.0963	20 97 1a	               jsr  gotoxy
.0966	20 ad 1b	               jsr  pop
.0969	20 6e 1b	               jsr  push
.096c	a2 1e		isx            ldx  #<txt2
.096e	a0 0a		isy            ldy  #>txt2
.0970	20 7d 1a	               jsr  puts
.0973	20 ad 1b	               jsr  pull
.0976	a9 24		               lda  #'$'
.0978	20 77 1a	               jsr  putch
.097b	ad f6 0d	               lda  bitmapaddr+1
.097e	20 67 1d	               jsr  putahex
.0981	ad f5 0d	               lda  bitmapaddr
.0984	20 67 1d	               jsr  putahex
.0987	20 6e 1b	               jsr  push
.098a	a2 01		               ldx  #1
.098c	a0 16		               ldy  #22
.098e	20 97 1a	               jsr  gotoxy
.0991	20 ad 1b	               jsr  pop
.0994	20 6e 1b	               jsr  push
.0997	a2 29		isx            ldx  #<txt3
.0999	a0 0a		isy            ldy  #>txt3
.099b	20 7d 1a	               jsr  puts
.099e	20 ad 1b	               jsr  pull
.09a1	a9 24		               lda  #'$'
.09a3	20 77 1a	               jsr  putch
.09a6	ad 07 16	               lda  bitmapoffset
.09a9	20 67 1d	               jsr  putahex
.09ac	20 6e 1b	               jsr  push
.09af	a2 01		               ldx  #1
.09b1	a0 17		               ldy  #23
.09b3	20 97 1a	               jsr  gotoxy
.09b6	20 ad 1b	               jsr  pop
.09b9	20 6e 1b	               jsr  push
.09bc	a2 36		isx            ldx  #<txt4
.09be	a0 0a		isy            ldy  #>txt4
.09c0	20 7d 1a	               jsr  puts
.09c3	20 ad 1b	               jsr  pull
.09c6	a9 24		               lda  #'$'
.09c8	20 77 1a	               jsr  putch
.09cb	ad 09 16	               lda  mapaddr+1
.09ce	20 67 1d	               jsr  putahex
.09d1	ad 08 16	               lda  mapaddr
.09d4	20 67 1d	               jsr  putahex
.09d7	20 6e 1b	               jsr  push
.09da	a2 01		               ldx  #1
.09dc	a0 18		               ldy  #24
.09de	20 97 1a	               jsr  gotoxy
.09e1	20 ad 1b	               jsr  pop
.09e4	20 6e 1b	               jsr  push
.09e7	a2 41		isx            ldx  #<txt5
.09e9	a0 0a		isy            ldy  #>txt5
.09eb	20 7d 1a	               jsr  puts
.09ee	20 ad 1b	               jsr  pull
.09f1	ad 0f 16	               lda  curscl
.09f4	20 67 1d	               jsr  putahex
.09f7	a9 da		               lda  #$da
.09f9	20 77 1a	               jsr  putch
.09fc	ad 0e 16	               lda  cursln
.09ff	20 67 1d	               jsr  putahex
.0a02	20 ad 1b	               jsr  pop
.0a05	60		               rts
>0a06	50 45 54 53	txt0           .null     "petscii :   "
>0a0a	43 49 49 20 3a 20 20 20 00
>0a13	4b 45 59 20	txt1           .null     "key code: "
>0a17	43 4f 44 45 3a 20 00
>0a1e	42 49 54 4d	txt2           .null     "bitmap..: "
>0a22	41 50 2e 2e 3a 20 00
>0a29	4f 46 46 53	txt3           .null     "offset..:   "
>0a2d	45 54 2e 2e 3a 20 20 20 00
>0a36	4d 41 50 41	txt4           .null     "mapaddr.: "
>0a3a	44 44 52 2e 3a 20 00
>0a41	43 55 52 53	txt5           .null     "cursval.: "
>0a45	56 41 4c 2e 3a 20 00
>0a4c	53 54 41 43	txt6           .null     "stack......:"
>0a50	4b 2e 2e 2e 2e 2e 2e 3a 00
.0a59			keyaction
.0a59	20 6e 1b	               jsr  push
.0a5c			loop
.0a5c	20 8e 1f	               jsr  getkey
.0a5f	8d 06 16	               sta  currentkey
.0a62	20 12 09	               jsr  showkeyval
.0a65	c9 85		f1             cmp  #key_f1
.0a67	d0 03		               bne  f2
.0a69	4c f4 0a	               jmp  dof1
.0a6c	c9 89		f2             cmp  #key_f2
.0a6e	d0 03		               bne  f3
.0a70	4c fa 0a	               jmp  dof2
.0a73	c9 86		f3             cmp  #key_f3
.0a75	d0 03		               bne  f4
.0a77	4c 00 0b	               jmp  dof3
.0a7a	c9 8a		f4             cmp  #key_f4
.0a7c	d0 03		               bne  f5
.0a7e	4c 06 0b	               jmp  dof4
.0a81	c9 87		f5             cmp  #key_f5
.0a83	d0 03		               bne  f6
.0a85	4c 0c 0b	               jmp  dof5
.0a88	c9 8b		f6             cmp  #key_f6
.0a8a	d0 03		               bne  f7
.0a8c	4c 12 0b	               jmp  dof6
.0a8f	c9 88		f7             cmp  #key_f7
.0a91	d0 03		               bne  f8
.0a93	4c 18 0b	               jmp  dof7
.0a96	c9 8c		f8             cmp  #key_f8
.0a98	d0 03		               bne  ctrlx
.0a9a	4c 1e 0b	               jmp  dof8
.0a9d	c9 18		ctrlx          cmp  #ctrl_x
.0a9f	d0 03		               bne  reste
.0aa1	4c 24 0b	               jmp  doquit
.0aa4			reste
.0aa4	20 6e 1b	               jsr  push
.0aa7	a2 0d		               ldx  #13
.0aa9	a0 0c		               ldy  #12
.0aab	20 97 1a	               jsr  gotoxy
.0aae	20 ad 1b	               jsr  pop
.0ab1	20 77 1a	               jsr  putch
.0ab4	8d 06 16	               sta  currentkey
.0ab7	aa		               tax
.0ab8	bc 69 1e	               ldy  asciitorom,x
.0abb	8c 07 16	               sty  bitmapoffset
.0abe	20 12 09	               jsr  showkeyval
.0ac1	20 c7 0c	               jsr  drawbitmap
.0ac4	20 6e 1b	               jsr  push
.0ac7	a2 0d		               ldx  #13
.0ac9	a0 0c		               ldy  #12
.0acb	20 97 1a	               jsr  gotoxy
.0ace	20 ad 1b	               jsr  pop
.0ad1	20 77 1a	               jsr  putch
.0ad4	20 6e 1b	               jsr  push
.0ad7	a2 11		               ldx  #17
.0ad9	a0 05		               ldy  #5
.0adb	20 97 1a	               jsr  gotoxy
.0ade	20 ad 1b	               jsr  pop
.0ae1	20 34 1e	               jsr  atodec
.0ae4	20 6e 1b	               jsr  push
.0ae7	a2 38		isx            ldx  #<adec
.0ae9	a0 1d		isy            ldy  #>adec
.0aeb	20 7d 1a	               jsr  puts
.0aee	20 ad 1b	               jsr  pull
.0af1	4c 5c 0a	               jmp  loop
.0af4	20 b0 0f	dof1           jsr  f1action  ;edit/reverse
.0af7	4c 5c 0a	               jmp  loop
.0afa	20 b5 10	dof2           jsr  f2action  ;save/flip vert
.0afd	4c 5c 0a	               jmp  loop
.0b00	20 7a 11	dof3           jsr  f3action  ;load/flip horz
.0b03	4c 5c 0a	               jmp  loop
.0b06	20 45 12	dof4           jsr  f4action  ;copy/scroll r
.0b09	4c 5c 0a	               jmp  loop
.0b0c	20 dd 12	dof5           jsr  f5action  ;clear/scroll l
.0b0f	4c 5c 0a	               jmp  loop
.0b12	20 9d 13	dof6           jsr  f6action  ;fill;/scroll up
.0b15	4c 5c 0a	               jmp  loop
.0b18	20 85 14	dof7           jsr  f7action  ;clear;/scroll down
.0b1b	4c 5c 0a	               jmp  loop
.0b1e	20 5b 15	dof8           jsr  f8action  ; function
.0b21	4c 5c 0a	               jmp  loop
.0b24	20 ad 1b	doquit         jsr  pop
.0b27	60		               rts
>0b28	0a 01 05	keyaction_msg  .byte vrose,1,5
>0b2b	5b 4b 45 59	               .null     "[keyaction]"
>0b2f	41 43 54 49 4f 4e 5d 00
.0b37			editor
.0b37	20 6e 1b	               jsr  push
.0b3a	20 6e 1b	               jsr  push
.0b3d	a2 10		               ldx  #<blankmsg
.0b3f	a0 16		               ldy  #>blankmsg
.0b41	20 06 1b	               jsr  putscxy
.0b44	a2 2d		               ldx  #<exit_msg
.0b46	a0 18		               ldy  #>exit_msg
.0b48	20 06 1b	               jsr  putscxy
.0b4b	20 ad 1b	               jsr  pop
.0b4e	20 6e 1b	               jsr  push
.0b51	a2 10		               ldx  #<blankmsg
.0b53	a0 16		               ldy  #>blankmsg
.0b55	20 06 1b	               jsr  putscxy
.0b58	a2 3b		               ldx  #<edit_msg
.0b5a	a0 16		               ldy  #>edit_msg
.0b5c	20 06 1b	               jsr  putscxy
.0b5f	20 ad 1b	               jsr  pop
.0b62	a9 0c		               lda  #vgris1
.0b64	20 d4 08	               jsr  setmenuacolor
.0b67	a9 0d		               lda  #vvert1
.0b69	8d 7f 18	               sta  f1abutton
.0b6c	20 33 0e	               jsr  showfkeys
.0b6f	a9 40		               lda  #'@'
.0b71	20 83 0c	ed_loop        jsr  setcurs
.0b74	20 8e 1f	               jsr  getkey
.0b77	c9 91		cu             cmp  #cursu
.0b79	d0 03		               bne  cd
.0b7b	4c f1 0b	               jmp  do_up
.0b7e	c9 11		cd             cmp  #cursd
.0b80	d0 03		               bne  cl
.0b82	4c 04 0c	               jmp  do_down
.0b85	c9 9d		cl             cmp  #cursl
.0b87	d0 03		               bne  cr
.0b89	4c 17 0c	               jmp  do_left
.0b8c	c9 1d		cr             cmp  #cursr
.0b8e	d0 03		               bne  cx
.0b90	4c 2a 0c	               jmp  do_right
.0b93	c9 18		cx             cmp  #ctrl_x
.0b95	d0 03		               bne  sp
.0b97	4c 49 0c	               jmp  do_ctrlx
.0b9a	c9 20		sp             cmp  #$20
.0b9c	d0 03		               bne  rest
.0b9e	4c 3d 0c	               jmp  do_swap
.0ba1			rest
.0ba1	20 6e 1b	               jsr  push
.0ba4	a2 0d		               ldx  #13
.0ba6	a0 0c		               ldy  #12
.0ba8	20 97 1a	               jsr  gotoxy
.0bab	20 ad 1b	               jsr  pop
.0bae	20 77 1a	               jsr  putch
.0bb1	8d 06 16	               sta  currentkey
.0bb4	aa		               tax
.0bb5	bc 69 1e	               ldy  asciitorom,x
.0bb8	8c 07 16	               sty  bitmapoffset
.0bbb	20 12 09	               jsr  showkeyval
.0bbe	20 c7 0c	               jsr  drawbitmap
.0bc1	20 6e 1b	               jsr  push
.0bc4	a2 0d		               ldx  #13
.0bc6	a0 0c		               ldy  #12
.0bc8	20 97 1a	               jsr  gotoxy
.0bcb	20 ad 1b	               jsr  pop
.0bce	20 77 1a	               jsr  putch
.0bd1	20 6e 1b	               jsr  push
.0bd4	a2 11		               ldx  #17
.0bd6	a0 05		               ldy  #5
.0bd8	20 97 1a	               jsr  gotoxy
.0bdb	20 ad 1b	               jsr  pop
.0bde	20 34 1e	               jsr  atodec
.0be1	20 6e 1b	               jsr  push
.0be4	a2 38		isx            ldx  #<adec
.0be6	a0 1d		isy            ldy  #>adec
.0be8	20 7d 1a	               jsr  puts
.0beb	20 ad 1b	               jsr  pull
.0bee	4c 46 0c	               jmp  totop
.0bf1	ad 0e 16	do_up          lda  cursln
.0bf4	c9 09		               cmp  #grid_top
.0bf6	f0 4e		               beq  totop
.0bf8	20 a5 0c	               jsr  clrcurs
.0bfb	ce 0e 16	               dec  cursln
.0bfe	20 83 0c	               jsr  setcurs
.0c01	4c 46 0c	               jmp  totop
.0c04	ad 0e 16	do_down        lda  cursln
.0c07	c9 10		               cmp  #grid_bot
.0c09	f0 3b		               beq  totop
.0c0b	20 a5 0c	               jsr  clrcurs
.0c0e	ee 0e 16	               inc  cursln
.0c11	20 83 0c	               jsr  setcurs
.0c14	4c 46 0c	               jmp  totop
.0c17	ad 0f 16	do_left        lda  curscl
.0c1a	c9 01		               cmp  #grid_left
.0c1c	f0 28		               beq  totop
.0c1e	20 a5 0c	               jsr  clrcurs
.0c21	ce 0f 16	               dec  curscl
.0c24	20 83 0c	               jsr  setcurs
.0c27	4c 46 0c	               jmp  totop
.0c2a	ad 0f 16	do_right       lda  curscl
.0c2d	c9 08		               cmp  #grid_right
.0c2f	f0 15		               beq  totop
.0c31	20 a5 0c	               jsr  clrcurs
.0c34	ee 0f 16	               inc  curscl
.0c37	20 83 0c	               jsr  setcurs
.0c3a	4c 46 0c	               jmp  totop
.0c3d	20 5c 0c	do_swap        jsr  do_eor
.0c40	20 c7 0c	               jsr  drawbitmap
.0c43	4c 46 0c	               jmp  totop
.0c46	4c 71 0b	totop          jmp  ed_loop
.0c49	20 a5 0c	do_ctrlx       jsr  clrcurs
.0c4c	20 ad 1b	               jsr  pop
.0c4f	60		               rts
>0c50	0a 01 05	editor_msg     .byte vrose,1,5
>0c53	5b 45 44 49	               .null     "[editor]"
>0c57	54 4f 52 5d 00
.0c5c			do_eor
.0c5c	20 6e 1b	               jsr  push
.0c5f	ad 08 16	               lda  mapaddr
.0c62	85 fd		               sta  zpage2
.0c64	ad 09 16	               lda  mapaddr+1
.0c67	85 fe		               sta  zpage2+1
.0c69	ae 0e 16	               ldx  cursln     ; calcul de
.0c6c	ca		               dex            ; l'offset de
.0c6d	8a		               txa            ; la
.0c6e	29 f7		               and  #$f7      ; ligne
.0c70	a8		               tay
.0c71	ae 0f 16	               ldx  curscl
.0c74	ca		               dex
.0c75	bd fb 15	               lda  eorval,x
.0c78	51 fd		               eor  (zpage2),y
.0c7a	20 12 09	               jsr  showkeyval
.0c7d	91 fd		               sta  (zpage2),y
.0c7f	20 ad 1b	               jsr  pop
.0c82	60		               rts
.0c83			setcurs
.0c83	20 6e 1b	               jsr  push
.0c86	a2 01		               ldx  #grid_left
.0c88	ac 0e 16	               ldy  cursln
.0c8b	20 97 1a	               jsr  gotoxy
.0c8e	a9 da		               lda  #$da
.0c90	20 77 1a	               jsr  putch
.0c93	ae 0f 16	               ldx  curscl
.0c96	e8		               inx
.0c97	a0 08		               ldy  #grid_top-1
.0c99	20 97 1a	               jsr  gotoxy
.0c9c	a9 da		               lda  #$da
.0c9e	20 77 1a	               jsr  putch
.0ca1	20 ad 1b	               jsr  pop
.0ca4	60		               rts
.0ca5			clrcurs
.0ca5	20 6e 1b	               jsr  push
.0ca8	a2 01		               ldx  #grid_left
.0caa	ac 0e 16	               ldy  cursln
.0cad	20 97 1a	               jsr  gotoxy
.0cb0	a9 20		               lda  #$20
.0cb2	20 77 1a	               jsr  putch
.0cb5	ae 0f 16	               ldx  curscl
.0cb8	e8		               inx
.0cb9	a0 08		               ldy  #grid_top-1
.0cbb	20 97 1a	               jsr  gotoxy
.0cbe	a9 20		               lda  #$20
.0cc0	20 77 1a	               jsr  putch
.0cc3	20 ad 1b	               jsr  pop
.0cc6	60		               rts
.0cc7			drawbitmap
.0cc7	20 6e 1b	               jsr  push
.0cca	a9 21		               lda  #<letext       ; le pointeur
.0ccc	85 fd		               sta  zpage2
.0cce	a9 22		               lda  #<letext+1
.0cd0	85 fe		               sta  zpage2+1
.0cd2	a9 01		               lda  #grid_left     ; la position
.0cd4	8d 1f 0d	               sta  textline+1
.0cd7	a9 09		               lda  #grid_top
.0cd9	8d 20 0d	               sta  textline+2
.0cdc	20 2a 0d	               jsr  calcmapaddr
.0cdf	ad 08 16	               lda  mapaddr        ; on pointe sur la table des bitmaps
.0ce2	85 fb		               sta  zpage1
.0ce4	ad 09 16	               lda  mapaddr+1
.0ce7	85 fc		               sta  zpage1+1
.0ce9	a0 00		drawchar       ldy  #$00
.0ceb	a2 09		               ldx  #grid_top      ;on replace la ...
.0ced	8e f6 0c	               stx  isy+1          ;ligne de départ
.0cf0	20 6e 1b	nextline       jsr  push
.0cf3	a2 02		               ldx  #grid_left+1        ; la colonne
.0cf5	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.0cf7	20 97 1a	               jsr  gotoxy
.0cfa	20 ad 1b	               jsr  pop
.0cfd	b1 fb		               lda  (zpage1),y     ; on li une ligne
.0cff	20 d8 1d	               jsr  atobin
.0d02	20 59 0d	               jsr  abintograph
.0d05	20 6e 1b	               jsr  push
.0d08	a2 2f		isx            ldx  #<abin
.0d0a	a0 1d		isy            ldy  #>abin
.0d0c	20 7d 1a	               jsr  puts
.0d0f	20 ad 1b	               jsr  pull
.0d12	ee f6 0c	               inc  isy+1
.0d15	c8		               iny
.0d16	c0 08		               cpy  #$08
.0d18	30 d6		               bmi  nextline
.0d1a	20 ad 1b	               jsr  pop
.0d1d	60		               rts
>0d1e	01 01 09	textline       .byte vblanc,grid_left,grid_top
>0d21	20 20 20 20	letext         .null "        "
>0d25	20 20 20 20 00
.0d2a			calcmapaddr
.0d2a	20 6e 1b	               jsr  push
.0d2d	ad f5 0d	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0d30	85 fb		               sta  zpage1
.0d32	ad f6 0d	               lda  bitmapaddr+1
.0d35	85 fc		               sta  zpage1+1
.0d37	ae 07 16	               ldx  bitmapoffset
.0d3a	e0 00		               cpx  #$00
.0d3c	f0 08		               beq  thesame         ; sommes nous déja à 0
.0d3e	a9 08		addagain       lda  #8
.0d40	20 7c 0f	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0d43	ca		               dex                 ; pour chaque caracteres
.0d44	d0 f8		               bne  addagain
.0d46	48		thesame        pha
.0d47	a5 fb		               lda  zpage1
.0d49	8d 08 16	               sta  mapaddr
.0d4c	a5 fc		               lda  zpage1+1
.0d4e	8d 09 16	               sta  mapaddr+1
.0d51	68		               pla
.0d52	20 12 09	               jsr  showkeyval
.0d55	20 ad 1b	out            jsr  pop
.0d58	60		               rts
.0d59			abintograph
.0d59	20 6e 1b	               jsr  push
.0d5c	a9 2f		               lda  #<abin
.0d5e	85 fb		               sta  zpage1
.0d60	a9 1d		               lda  #>abin+1
.0d62	85 fc		               sta  zpage1+1
.0d64	a0 00		               ldy  #$00
.0d66	b1 fb		nextbit        lda  (zpage1),y
.0d68	c9 30		               cmp  #$30
.0d6a	f0 07		               beq  itszero
.0d6c	a9 d1		itsone         lda  #$d1
.0d6e	91 fb		               sta  (zpage1),y
.0d70	4c 77 0d	               jmp  next
.0d73	a9 20		itszero        lda  #$20
.0d75	91 fb		               sta  (zpage1),y
.0d77	c8		next           iny
.0d78	c0 08		               cpy  #$08
.0d7a	30 ea		               bmi  nextbit
.0d7c	20 ad 1b	               jsr  pop
.0d7f	60		               rts
.0d80			setscreenptr
.0d80	20 6e 1b	               jsr  push
.0d83	a9 08		               lda  #$08      ; basic commande to disable ...
.0d85	20 d2 ff	               jsr  chrout    ; ... character set change.
.0d88	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.0d8b	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.0d8d	09 0e		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.0d8f	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.0d92	20 ad 1b	               jsr  pop
.0d95	60		               rts
.0d96			copycharset
.0d96	20 6e 1b	               jsr  push
.0d99	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0d9c	29 fe		               and  #%11111110     ;254
.0d9e	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0da1	a5 01		               lda  u6510map       ;$01
.0da3	29 fb		               and  #%11111011     ;251
.0da5	85 01		               sta  u6510map       ;$01
.0da7	20 bc 0d	               jsr  memcopy
.0daa	a5 01		               lda  u6510map       ;$01
.0dac	09 04		               ora  #%00000100
.0dae	85 01		               sta  u6510map       ;$01
.0db0	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0db3	09 01		               ora  #%00000001     ;254
.0db5	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0db8	20 ad 1b	               jsr  pop
.0dbb	60		               rts
.0dbc			memcopy
.0dbc	20 6e 1b	               jsr  push
.0dbf	ad f1 0d	               lda  startaddr
.0dc2	85 fb		               sta  zpage1
.0dc4	ad f2 0d	               lda  startaddr+1
.0dc7	85 fc		               sta  zpage1+1
.0dc9	ad f5 0d	               lda  bitmapaddr
.0dcc	85 fd		               sta  zpage2
.0dce	ad f6 0d	               lda  bitmapaddr+1
.0dd1	85 fe		               sta  zpage2+1
.0dd3	a0 00		               ldy  #$00
.0dd5	b1 fb		onemore        lda  (zpage1),y
.0dd7	91 fd		               sta  (zpage2),y
.0dd9	20 75 1c	               jsr  inczp1
.0ddc	20 8d 1c	               jsr  inczp2
.0ddf	a5 fc		               lda  zpage1+1
.0de1	cd f4 0d	               cmp  stopaddr+1
.0de4	d0 ef		               bne  onemore
.0de6	a5 fb		               lda  zpage1
.0de8	cd f3 0d	               cmp  stopaddr
.0deb	d0 e8		               bne  onemore
.0ded	20 ad 1b	               jsr  pop
.0df0	60		               rts
=14336			bitmapmem =    charsdef * 1024     ;Calcul de la position ram des caracteres.
=61440			mstopaddr =    $d000+(4*$800)
>0df1	00 d0		startaddr      .word     $d000               ; 53248
>0df3	00 f0		stopaddr       .word     mstopaddr           ; 55296
>0df5	00 38		bitmapaddr     .word     bitmapmem           ; $3000, 12288
.0df7			staticscreen
.0df7	48		               pha
.0df8	a9 0c		               lda  #vgris1
.0dfa	8d 20 d0	               sta  $d020
.0dfd	68		               pla
.0dfe	48		               pha
.0dff	a9 0b		               lda  #vgris
.0e01	8d 21 d0	               sta  $d021
.0e04	68		               pla
.0e05	20 d3 0e	               jsr  showlines
.0e08	20 b4 0e	               jsr  showallchars
.0e0b	20 1b 0f	               jsr  showgrid
.0e0e	20 33 0e	               jsr  showfkeys
.0e11	20 6e 1b	               jsr  push
.0e14	a2 10		               ldx  #<blankmsg
.0e16	a0 16		               ldy  #>blankmsg
.0e18	20 06 1b	               jsr  putscxy
.0e1b	a2 18		               ldx  #<quit_msg
.0e1d	a0 18		               ldy  #>quit_msg
.0e1f	20 06 1b	               jsr  putscxy
.0e22	20 ad 1b	               jsr  pop
.0e25	20 6e 1b	               jsr  push
.0e28	a2 00		               ldx  #0
.0e2a	a0 07		               ldy  #7
.0e2c	20 97 1a	               jsr  gotoxy
.0e2f	20 ad 1b	               jsr  pop
.0e32	60		               rts
.0e33			showfkeys
.0e33	20 6e 1b	               jsr  push
.0e36	ad 04 16	               lda  fkeyset
.0e39	c9 00		               cmp  #$0
.0e3b	d0 3b		               bne  secondks
.0e3d	a2 7f		               ldx #<f1abutton
.0e3f	a0 18		               ldy #>f1abutton
.0e41	20 06 1b	               jsr putscxy
.0e44	a2 99		               ldx #<f2abutton
.0e46	a0 18		               ldy #>f2abutton
.0e48	20 06 1b	               jsr putscxy
.0e4b	a2 b3		               ldx #<f3abutton
.0e4d	a0 18		               ldy #>f3abutton
.0e4f	20 06 1b	               jsr putscxy
.0e52	a2 cd		               ldx #<f4abutton
.0e54	a0 18		               ldy #>f4abutton
.0e56	20 06 1b	               jsr putscxy
.0e59	a2 e7		               ldx #<f5abutton
.0e5b	a0 18		               ldy #>f5abutton
.0e5d	20 06 1b	               jsr putscxy
.0e60	a2 01		               ldx #<f6abutton
.0e62	a0 19		               ldy #>f6abutton
.0e64	20 06 1b	               jsr putscxy
.0e67	a2 1b		               ldx #<f7abutton
.0e69	a0 19		               ldy #>f7abutton
.0e6b	20 06 1b	               jsr putscxy
.0e6e	a2 35		               ldx #<f8abutton
.0e70	a0 19		               ldy #>f8abutton
.0e72	20 06 1b	               jsr putscxy
.0e75	4c b0 0e	               jmp end
.0e78			secondks
.0e78	a2 50		               ldx #<f1bbutton
.0e7a	a0 19		               ldy #>f1bbutton
.0e7c	20 06 1b	               jsr putscxy
.0e7f	a2 6a		               ldx #<f2bbutton
.0e81	a0 19		               ldy #>f2bbutton
.0e83	20 06 1b	               jsr putscxy
.0e86	a2 84		               ldx #<f3bbutton
.0e88	a0 19		               ldy #>f3bbutton
.0e8a	20 06 1b	               jsr putscxy
.0e8d	a2 9e		               ldx #<f4bbutton
.0e8f	a0 19		               ldy #>f4bbutton
.0e91	20 06 1b	               jsr putscxy
.0e94	a2 b8		               ldx #<f5bbutton
.0e96	a0 19		               ldy #>f5bbutton
.0e98	20 06 1b	               jsr putscxy
.0e9b	a2 d2		               ldx #<f6bbutton
.0e9d	a0 19		               ldy #>f6bbutton
.0e9f	20 06 1b	               jsr putscxy
.0ea2	a2 ec		               ldx #<f7bbutton
.0ea4	a0 19		               ldy #>f7bbutton
.0ea6	20 06 1b	               jsr putscxy
.0ea9	a2 06		               ldx #<f8bbutton
.0eab	a0 1a		               ldy #>f8bbutton
.0ead	20 06 1b	               jsr putscxy
.0eb0	20 ad 1b	end            jsr  pop
.0eb3	60		               rts
.0eb4			showallchars
.0eb4	20 6e 1b	               jsr push
.0eb7	20 6e 1b	               jsr  push
.0eba	a2 00		               ldx  #0
.0ebc	a0 00		               ldy  #0
.0ebe	20 97 1a	               jsr  gotoxy
.0ec1	20 ad 1b	               jsr  pop
.0ec4	a2 00		               ldx  #$00
.0ec6	8a		nextc          txa
.0ec7	9d 00 04	               sta  scrnnewram,x
.0eca	e8		               inx
.0ecb	e0 80		               cpx  #$80
.0ecd	d0 f7		               bne  nextc
.0ecf	20 ad 1b	               jsr  pop
.0ed2	60		               rts
.0ed3			showlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.0ed3	20 6e 1b	               jsr  push
.0ed6	a2 28		               ldx  #40
.0ed8	a9 40		               lda  #64
.0eda	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.0edd	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.0ee0	ca		               dex
.0ee1	e0 10		hline          cpx  #vlinepos
.0ee3	10 03		               bpl  notyet
.0ee5	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.0ee8	e0 00		notyet         cpx  #$00
.0eea	d0 ee		               bne  nextl
.0eec	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.0eee	85 fb		               sta  zpage1
.0ef0	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.0ef2	85 fc		               sta  zpage1+1
.0ef4	a0 00		               ldy  #0
.0ef6	a9 72		               lda  #114
.0ef8	91 fb		               sta  (zpage1),y
.0efa	20 8a 0f	               jsr  zp1add40
.0efd	a2 12		               ldx  #24-hline2
.0eff	a9 5d		               lda  #93
.0f01	91 fb		another93      sta  (zpage1),y
.0f03	20 8a 0f	               jsr  zp1add40
.0f06	ca		               dex
.0f07	d0 f8		               bne  another93
.0f09	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.0f0b	85 fb		               sta  zpage1
.0f0d	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.0f0f	85 fc		               sta  zpage1+1
.0f11	a0 00		               ldy  #0
.0f13	a9 73		               lda  #115
.0f15	91 fb		               sta  (zpage1),y
.0f17	20 ad 1b	               jsr  pop
.0f1a	60		               rts
.0f1b			showgrid
.0f1b	20 6e 1b	               jsr  push
.0f1e	20 21 1a	               jsr  screendis
.0f21	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.0f23	85 fb		               sta  zpage1
.0f25	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.0f27	85 fc		               sta  zpage1+1
.0f29	a2 08		               ldx  #8
.0f2b	a9 65		nextbox        lda  #101
.0f2d	a0 09		               ldy  #9
.0f2f	91 fb		               sta  (zpage1),y
.0f31	88		               dey
.0f32	a9 4f		               lda  #79
.0f34	91 fb		nextcol        sta  (zpage1),y
.0f36	88		               dey
.0f37	d0 fb		               bne  nextcol
.0f39	20 8a 0f	               jsr  zp1add40
.0f3c	ca		               dex
.0f3d	d0 ec		               bne  nextbox
.0f3f	a0 08		               ldy  #8
.0f41	a9 77		               lda  #119
.0f43	91 fb		nextlin        sta  (zpage1),y
.0f45	88		               dey
.0f46	d0 fb		               bne  nextlin
.0f48	a9 3e		               lda  #$3e
.0f4a	8d eb 05	               sta  scrnnewram+(40*(12))+11
.0f4d	a9 70		               lda  #$70                     ;+
.0f4f	8d c4 05	               sta  scrnnewram+(40*(11))+12
.0f52	a9 43		               lda  #$43                    ;-
.0f54	8d c5 05	               sta  scrnnewram+(40*(11))+13
.0f57	a9 6e		               lda  #$6e                     ;+
.0f59	8d c6 05	               sta  scrnnewram+(40*(11))+14
.0f5c	a9 5d		               lda  #$5d                     ;|
.0f5e	8d ec 05	               sta  scrnnewram+(40*(12))+12
.0f61	a9 5d		               lda  #$5d                     ;|
.0f63	8d ee 05	               sta  scrnnewram+(40*(12))+14
.0f66	a9 6d		               lda  #$6d                     ;+
.0f68	8d 14 06	               sta  scrnnewram+(40*(13))+12
.0f6b	a9 43		               lda  #$43                     ;-
.0f6d	8d 15 06	               sta  scrnnewram+(40*(13))+13
.0f70	a9 7d		               lda  #$7d                     ;+
.0f72	8d 16 06	               sta  scrnnewram+(40*(13))+14
.0f75	20 2e 1a	               jsr screenena
.0f78	20 ad 1b	               jsr  pop
.0f7b	60		               rts
.0f7c			zp1addnum
.0f7c	08		               php
.0f7d	48		               pha
.0f7e	18		               clc
.0f7f	65 fb		               adc  zpage1
.0f81	90 02		               bcc  nocarry
.0f83	e6 fc		               inc  zpage1+1
.0f85	85 fb		nocarry        sta  zpage1
.0f87	68		               pla
.0f88	28		               plp
.0f89	60		               rts
.0f8a			zp1add40
.0f8a	08		               php
.0f8b	48		               pha
.0f8c	18		               clc
.0f8d	a5 fb		               lda  zpage1
.0f8f	69 28		               adc  #40
.0f91	90 02		               bcc  nocarry
.0f93	e6 fc		               inc  zpage1+1
.0f95	85 fb		nocarry        sta  zpage1
.0f97	68		               pla
.0f98	28		               plp
.0f99	60		               rts
.0f9a			delay
.0f9a	20 6e 1b	               jsr  push
.0f9d	a9 00		               lda  #$0
.0f9f	aa		               tax
.0fa0	a8		               tay
.0fa1	ca		xagain         dex
.0fa2	ca		               dex
.0fa3	88		yagain         dey
.0fa4	c0 00		               cpy  #$00
.0fa6	d0 fb		               bne  yagain
.0fa8	e0 00		               cpx  #$00
.0faa	d0 f5		               bne  xagain
.0fac	20 ad 1b	               jsr  pop
.0faf	60		               rts
.0fb0			f1action
.0fb0	48		               pha
.0fb1	a9 ff		               lda  #$ff
.0fb3	8d 03 16	               sta  editmode
.0fb6	ad 04 16	               lda  fkeyset
.0fb9	d0 7a		               bne  menub
.0fbb	20 6e 1b	               jsr  push
.0fbe	a2 10		               ldx  #<blankmsg
.0fc0	a0 16		               ldy  #>blankmsg
.0fc2	20 06 1b	               jsr  putscxy
.0fc5	a2 3b		               ldx  #<f1a_msg
.0fc7	a0 16		               ldy  #>f1a_msg
.0fc9	20 06 1b	               jsr  putscxy
.0fcc	20 ad 1b	               jsr  pop
.0fcf	08		               php
.0fd0	48		               pha
.0fd1	8a		               txa
.0fd2	48		               pha
.0fd3	ad 7f 18	               lda  f1abutton
.0fd6	48		               pha
.0fd7	a9 92		               lda  #146
.0fd9	8d 8e 18	               sta  f1abutton+15
.0fdc	a9 0d		               lda  #flashcol
.0fde	8d 7f 18	               sta  f1abutton
.0fe1	a2 7f		               ldx  #<f1abutton
.0fe3	a0 18		               ldy  #>f1abutton
.0fe5	20 06 1b	               jsr  putscxy
.0fe8	20 9a 0f	               jsr  delay
.0feb	a9 12		               lda  #18
.0fed	8d 8e 18	               sta  f1abutton+15
.0ff0	68		               pla
.0ff1	8d 7f 18	               sta  f1abutton
.0ff4	a2 7f		               ldx  #<f1abutton
.0ff6	a0 18		               ldy  #>f1abutton
.0ff8	20 06 1b	               jsr  putscxy
.0ffb	68		               pla
.0ffc	aa		               tax
.0ffd	68		               pla
.0ffe	28		               plp
.0fff	20 37 0b	               jsr  editor
.1002	20 6e 1b	               jsr  push
.1005	a2 10		               ldx  #<blankmsg
.1007	a0 16		               ldy  #>blankmsg
.1009	20 06 1b	               jsr  putscxy
.100c	a2 18		               ldx  #<quit_msg
.100e	a0 18		               ldy  #>quit_msg
.1010	20 06 1b	               jsr  putscxy
.1013	20 ad 1b	               jsr  pop
.1016	20 6e 1b	               jsr  push
.1019	a2 10		               ldx  #<blankmsg
.101b	a0 16		               ldy  #>blankmsg
.101d	20 06 1b	               jsr  putscxy
.1020	a2 e2		               ldx  #<menua_msg
.1022	a0 17		               ldy  #>menua_msg
.1024	20 06 1b	               jsr  putscxy
.1027	20 ad 1b	               jsr  pop
.102a	a9 07		               lda  #menu1col
.102c	20 d4 08	               jsr  setmenuacolor
.102f	20 33 0e	               jsr  showfkeys
.1032	4c 84 10	               jmp  out
.1035	a9 00		menub          lda  #$0
.1037	8d 03 16	               sta  editmode
.103a	20 6e 1b	               jsr  push
.103d	a2 10		               ldx  #<blankmsg
.103f	a0 16		               ldy  #>blankmsg
.1041	20 06 1b	               jsr  putscxy
.1044	a2 0a		               ldx  #<f1b_msg
.1046	a0 17		               ldy  #>f1b_msg
.1048	20 06 1b	               jsr  putscxy
.104b	20 ad 1b	               jsr  pop
.104e	08		               php
.104f	48		               pha
.1050	8a		               txa
.1051	48		               pha
.1052	ad 50 19	               lda  f1bbutton
.1055	48		               pha
.1056	a9 92		               lda  #146
.1058	8d 5f 19	               sta  f1bbutton+15
.105b	a9 0d		               lda  #flashcol
.105d	8d 50 19	               sta  f1bbutton
.1060	a2 50		               ldx  #<f1bbutton
.1062	a0 19		               ldy  #>f1bbutton
.1064	20 06 1b	               jsr  putscxy
.1067	20 9a 0f	               jsr  delay
.106a	a9 12		               lda  #18
.106c	8d 5f 19	               sta  f1bbutton+15
.106f	68		               pla
.1070	8d 50 19	               sta  f1bbutton
.1073	a2 50		               ldx  #<f1bbutton
.1075	a0 19		               ldy  #>f1bbutton
.1077	20 06 1b	               jsr  putscxy
.107a	68		               pla
.107b	aa		               tax
.107c	68		               pla
.107d	28		               plp
.107e	20 95 10	               jsr  reverse
.1081	20 c7 0c	               jsr  drawbitmap
.1084	68		out            pla
.1085	60		               rts
>1086	01 01 05	test_msg       .byte     vblanc,1,5
>1089	5b 46 31 2d	               .null     "[f1-action]"
>108d	41 43 54 49 4f 4e 5d 00
.1095			reverse
.1095	20 6e 1b	               jsr  push
.1098	48		               pha
.1099	ad 08 16	               lda  mapaddr
.109c	85 fd		               sta  $fd
.109e	ad 09 16	               lda  mapaddr+1
.10a1	85 fe		               sta  $fe
.10a3	68		               pla
.10a4	a0 00		               ldy  #$00
.10a6	b1 fd		again          lda  (zpage2),y
.10a8	49 ff		               eor  #$ff
.10aa	91 fd		               sta  (zpage2),y
.10ac	c8		               iny
.10ad	c0 08		               cpy  #$08
.10af	d0 f5		               bne  again
.10b1	20 ad 1b	               jsr  pop
.10b4	60		               rts
.10b5			f2action
.10b5	48		               pha
.10b6	a9 00		               lda  #$0
.10b8	8d 03 16	               sta  editmode
.10bb	ad 04 16	               lda  fkeyset
.10be	d0 47		               bne  menub
.10c0	20 6e 1b	               jsr  push
.10c3	a2 10		               ldx  #<blankmsg
.10c5	a0 16		               ldy  #>blankmsg
.10c7	20 06 1b	               jsr  putscxy
.10ca	a2 56		               ldx  #<f2a_msg
.10cc	a0 16		               ldy  #>f2a_msg
.10ce	20 06 1b	               jsr  putscxy
.10d1	20 ad 1b	               jsr  pop
.10d4	08		               php
.10d5	48		               pha
.10d6	8a		               txa
.10d7	48		               pha
.10d8	ad 99 18	               lda  f2abutton
.10db	48		               pha
.10dc	a9 92		               lda  #146
.10de	8d a8 18	               sta  f2abutton+15
.10e1	a9 0d		               lda  #flashcol
.10e3	8d 99 18	               sta  f2abutton
.10e6	a2 99		               ldx  #<f2abutton
.10e8	a0 18		               ldy  #>f2abutton
.10ea	20 06 1b	               jsr  putscxy
.10ed	20 9a 0f	               jsr  delay
.10f0	a9 12		               lda  #18
.10f2	8d a8 18	               sta  f2abutton+15
.10f5	68		               pla
.10f6	8d 99 18	               sta  f2abutton
.10f9	a2 99		               ldx  #<f2abutton
.10fb	a0 18		               ldy  #>f2abutton
.10fd	20 06 1b	               jsr  putscxy
.1100	68		               pla
.1101	aa		               tax
.1102	68		               pla
.1103	28		               plp
.1104	4c 51 11	               jmp  out
.1107			menub
.1107	20 6e 1b	               jsr  push
.110a	a2 10		               ldx  #<blankmsg
.110c	a0 16		               ldy  #>blankmsg
.110e	20 06 1b	               jsr  putscxy
.1111	a2 21		               ldx  #<f2b_msg
.1113	a0 17		               ldy  #>f2b_msg
.1115	20 06 1b	               jsr  putscxy
.1118	20 ad 1b	               jsr  pop
.111b	08		               php
.111c	48		               pha
.111d	8a		               txa
.111e	48		               pha
.111f	ad 6a 19	               lda  f2bbutton
.1122	48		               pha
.1123	a9 92		               lda  #146
.1125	8d 79 19	               sta  f2bbutton+15
.1128	a9 0d		               lda  #flashcol
.112a	8d 6a 19	               sta  f2bbutton
.112d	a2 6a		               ldx  #<f2bbutton
.112f	a0 19		               ldy  #>f2bbutton
.1131	20 06 1b	               jsr  putscxy
.1134	20 9a 0f	               jsr  delay
.1137	a9 12		               lda  #18
.1139	8d 79 19	               sta  f2bbutton+15
.113c	68		               pla
.113d	8d 6a 19	               sta  f2bbutton
.1140	a2 6a		               ldx  #<f2bbutton
.1142	a0 19		               ldy  #>f2bbutton
.1144	20 06 1b	               jsr  putscxy
.1147	68		               pla
.1148	aa		               tax
.1149	68		               pla
.114a	28		               plp
.114b	20 53 11	               jsr  flipvert
.114e	20 c7 0c	               jsr  drawbitmap
.1151	68		out            pla
.1152	60		               rts
.1153			flipvert
.1153	20 6e 1b	               jsr  push
.1156	48		               pha
.1157	ad 08 16	               lda  mapaddr
.115a	85 fd		               sta  $fd
.115c	ad 09 16	               lda  mapaddr+1
.115f	85 fe		               sta  $fe
.1161	68		               pla
.1162	a0 00		               ldy  #$00
.1164	b1 fd		tostack        lda  (zpage2),y
.1166	48		               pha
.1167	c8		               iny
.1168	c0 08		               cpy  #$08
.116a	d0 f8		               bne  tostack
.116c	a0 00		               ldy  #$00
.116e	68		fromstack      pla
.116f	91 fd		               sta  (zpage2),y
.1171	c8		               iny
.1172	c0 08		               cpy  #$08
.1174	d0 f8		               bne  fromstack
.1176	20 ad 1b	               jsr  pop
.1179	60		               rts
.117a			f3action
.117a	48		               pha
.117b	a9 00		               lda  #$0
.117d	8d 03 16	               sta  editmode
.1180	ad 04 16	               lda  fkeyset
.1183	d0 47		               bne  menub
.1185	20 6e 1b	               jsr  push
.1188	a2 10		               ldx  #<blankmsg
.118a	a0 16		               ldy  #>blankmsg
.118c	20 06 1b	               jsr  putscxy
.118f	a2 7c		               ldx  #<f3a_msg
.1191	a0 16		               ldy  #>f3a_msg
.1193	20 06 1b	               jsr  putscxy
.1196	20 ad 1b	               jsr  pop
.1199	08		               php
.119a	48		               pha
.119b	8a		               txa
.119c	48		               pha
.119d	ad b3 18	               lda  f3abutton
.11a0	48		               pha
.11a1	a9 92		               lda  #146
.11a3	8d c2 18	               sta  f3abutton+15
.11a6	a9 0d		               lda  #flashcol
.11a8	8d b3 18	               sta  f3abutton
.11ab	a2 b3		               ldx  #<f3abutton
.11ad	a0 18		               ldy  #>f3abutton
.11af	20 06 1b	               jsr  putscxy
.11b2	20 9a 0f	               jsr  delay
.11b5	a9 12		               lda  #18
.11b7	8d c2 18	               sta  f3abutton+15
.11ba	68		               pla
.11bb	8d b3 18	               sta  f3abutton
.11be	a2 b3		               ldx  #<f3abutton
.11c0	a0 18		               ldy  #>f3abutton
.11c2	20 06 1b	               jsr  putscxy
.11c5	68		               pla
.11c6	aa		               tax
.11c7	68		               pla
.11c8	28		               plp
.11c9	4c 16 12	               jmp  out
.11cc			menub
.11cc	20 6e 1b	               jsr  push
.11cf	a2 10		               ldx  #<blankmsg
.11d1	a0 16		               ldy  #>blankmsg
.11d3	20 06 1b	               jsr  putscxy
.11d6	a2 3a		               ldx  #<f3b_msg
.11d8	a0 17		               ldy  #>f3b_msg
.11da	20 06 1b	               jsr  putscxy
.11dd	20 ad 1b	               jsr  pop
.11e0	08		               php
.11e1	48		               pha
.11e2	8a		               txa
.11e3	48		               pha
.11e4	ad 84 19	               lda  f3bbutton
.11e7	48		               pha
.11e8	a9 92		               lda  #146
.11ea	8d 93 19	               sta  f3bbutton+15
.11ed	a9 0d		               lda  #flashcol
.11ef	8d 84 19	               sta  f3bbutton
.11f2	a2 84		               ldx  #<f3bbutton
.11f4	a0 19		               ldy  #>f3bbutton
.11f6	20 06 1b	               jsr  putscxy
.11f9	20 9a 0f	               jsr  delay
.11fc	a9 12		               lda  #18
.11fe	8d 93 19	               sta  f3bbutton+15
.1201	68		               pla
.1202	8d 84 19	               sta  f3bbutton
.1205	a2 84		               ldx  #<f3bbutton
.1207	a0 19		               ldy  #>f3bbutton
.1209	20 06 1b	               jsr  putscxy
.120c	68		               pla
.120d	aa		               tax
.120e	68		               pla
.120f	28		               plp
.1210	20 18 12	               jsr  fliphorz
.1213	20 c7 0c	               jsr  drawbitmap
.1216	68		out            pla
.1217	60		               rts
.1218			fliphorz
.1218	20 6e 1b	               jsr  push
.121b	48		               pha
.121c	ad 08 16	               lda  mapaddr
.121f	85 fd		               sta  $fd
.1221	ad 09 16	               lda  mapaddr+1
.1224	85 fe		               sta  $fe
.1226	68		               pla
.1227	a0 00		               ldy  #$00
.1229	b1 fd		nextbyte       lda  (zpage2),y
.122b	a2 00		               ldx  #$00
.122d	2a		rolagain       rol
.122e	6e 44 12	               ror  tmpbyte
.1231	e8		               inx
.1232	e0 08		               cpx  #$08
.1234	30 f7		               bmi  rolagain
.1236	ad 44 12	               lda  tmpbyte
.1239	91 fd		               sta  (zpage2),y
.123b	c8		               iny
.123c	c0 08		               cpy  #$08
.123e	30 e9		               bmi  nextbyte
.1240	20 ad 1b	               jsr  pop
.1243	60		               rts
>1244	00		tmpbyte        .byte     $00
.1245			f4action
.1245	48		               pha
.1246	a9 00		               lda  #$0
.1248	8d 03 16	               sta  editmode
.124b	ad 04 16	               lda  fkeyset
.124e	d0 47		               bne  menub
.1250	20 6e 1b	               jsr  push
.1253	a2 10		               ldx  #<blankmsg
.1255	a0 16		               ldy  #>blankmsg
.1257	20 06 1b	               jsr  putscxy
.125a	a2 a3		               ldx  #<f4a_msg
.125c	a0 16		               ldy  #>f4a_msg
.125e	20 06 1b	               jsr  putscxy
.1261	20 ad 1b	               jsr  pop
.1264	08		               php
.1265	48		               pha
.1266	8a		               txa
.1267	48		               pha
.1268	ad cd 18	               lda  f4abutton
.126b	48		               pha
.126c	a9 92		               lda  #146
.126e	8d dc 18	               sta  f4abutton+15
.1271	a9 0d		               lda  #flashcol
.1273	8d cd 18	               sta  f4abutton
.1276	a2 cd		               ldx  #<f4abutton
.1278	a0 18		               ldy  #>f4abutton
.127a	20 06 1b	               jsr  putscxy
.127d	20 9a 0f	               jsr  delay
.1280	a9 12		               lda  #18
.1282	8d dc 18	               sta  f4abutton+15
.1285	68		               pla
.1286	8d cd 18	               sta  f4abutton
.1289	a2 cd		               ldx  #<f4abutton
.128b	a0 18		               ldy  #>f4abutton
.128d	20 06 1b	               jsr  putscxy
.1290	68		               pla
.1291	aa		               tax
.1292	68		               pla
.1293	28		               plp
.1294	4c db 12	               jmp  out
.1297			menub
.1297	20 6e 1b	               jsr  push
.129a	a2 10		               ldx  #<blankmsg
.129c	a0 16		               ldy  #>blankmsg
.129e	20 06 1b	               jsr  putscxy
.12a1	a2 55		               ldx  #<f4b_msg
.12a3	a0 17		               ldy  #>f4b_msg
.12a5	20 06 1b	               jsr  putscxy
.12a8	20 ad 1b	               jsr  pop
.12ab	08		               php
.12ac	48		               pha
.12ad	8a		               txa
.12ae	48		               pha
.12af	ad 9e 19	               lda  f4bbutton
.12b2	48		               pha
.12b3	a9 92		               lda  #146
.12b5	8d ad 19	               sta  f4bbutton+15
.12b8	a9 0d		               lda  #flashcol
.12ba	8d 9e 19	               sta  f4bbutton
.12bd	a2 9e		               ldx  #<f4bbutton
.12bf	a0 19		               ldy  #>f4bbutton
.12c1	20 06 1b	               jsr  putscxy
.12c4	20 9a 0f	               jsr  delay
.12c7	a9 12		               lda  #18
.12c9	8d ad 19	               sta  f4bbutton+15
.12cc	68		               pla
.12cd	8d 9e 19	               sta  f4bbutton
.12d0	a2 9e		               ldx  #<f4bbutton
.12d2	a0 19		               ldy  #>f4bbutton
.12d4	20 06 1b	               jsr  putscxy
.12d7	68		               pla
.12d8	aa		               tax
.12d9	68		               pla
.12da	28		               plp
.12db	68		out            pla
.12dc	60		               rts
.12dd			f5action
.12dd	48		               pha
.12de	a9 00		               lda  #$0
.12e0	8d 03 16	               sta  editmode
.12e3	ad 04 16	               lda  fkeyset
.12e6	d0 4d		               bne  menub
.12e8	20 6e 1b	               jsr  push
.12eb	a2 10		               ldx  #<blankmsg
.12ed	a0 16		               ldy  #>blankmsg
.12ef	20 06 1b	               jsr  putscxy
.12f2	a2 c0		               ldx  #<f5a_msg
.12f4	a0 16		               ldy  #>f5a_msg
.12f6	20 06 1b	               jsr  putscxy
.12f9	20 ad 1b	               jsr  pop
.12fc	08		               php
.12fd	48		               pha
.12fe	8a		               txa
.12ff	48		               pha
.1300	ad e7 18	               lda  f5abutton
.1303	48		               pha
.1304	a9 92		               lda  #146
.1306	8d f6 18	               sta  f5abutton+15
.1309	a9 0d		               lda  #flashcol
.130b	8d e7 18	               sta  f5abutton
.130e	a2 e7		               ldx  #<f5abutton
.1310	a0 18		               ldy  #>f5abutton
.1312	20 06 1b	               jsr  putscxy
.1315	20 9a 0f	               jsr  delay
.1318	a9 12		               lda  #18
.131a	8d f6 18	               sta  f5abutton+15
.131d	68		               pla
.131e	8d e7 18	               sta  f5abutton
.1321	a2 e7		               ldx  #<f5abutton
.1323	a0 18		               ldy  #>f5abutton
.1325	20 06 1b	               jsr  putscxy
.1328	68		               pla
.1329	aa		               tax
.132a	68		               pla
.132b	28		               plp
.132c	20 7b 13	               jsr  clearchar
.132f	20 c7 0c	               jsr  drawbitmap
.1332	4c 79 13	               jmp  out
.1335			menub
.1335	20 6e 1b	               jsr  push
.1338	a2 10		               ldx  #<blankmsg
.133a	a0 16		               ldy  #>blankmsg
.133c	20 06 1b	               jsr  putscxy
.133f	a2 6a		               ldx  #<f5b_msg
.1341	a0 17		               ldy  #>f5b_msg
.1343	20 06 1b	               jsr  putscxy
.1346	20 ad 1b	               jsr  pop
.1349	08		               php
.134a	48		               pha
.134b	8a		               txa
.134c	48		               pha
.134d	ad b8 19	               lda  f5bbutton
.1350	48		               pha
.1351	a9 92		               lda  #146
.1353	8d c7 19	               sta  f5bbutton+15
.1356	a9 0d		               lda  #flashcol
.1358	8d b8 19	               sta  f5bbutton
.135b	a2 b8		               ldx  #<f5bbutton
.135d	a0 19		               ldy  #>f5bbutton
.135f	20 06 1b	               jsr  putscxy
.1362	20 9a 0f	               jsr  delay
.1365	a9 12		               lda  #18
.1367	8d c7 19	               sta  f5bbutton+15
.136a	68		               pla
.136b	8d b8 19	               sta  f5bbutton
.136e	a2 b8		               ldx  #<f5bbutton
.1370	a0 19		               ldy  #>f5bbutton
.1372	20 06 1b	               jsr  putscxy
.1375	68		               pla
.1376	aa		               tax
.1377	68		               pla
.1378	28		               plp
.1379	68		out            pla
.137a	60		               rts
.137b			clearchar
.137b	20 6e 1b	               jsr  push
.137e	a9 00		               lda  #$00
.1380	20 87 13	               jsr  allsame
.1383	20 ad 1b	               jsr  pop
.1386	60		               rts
.1387			allsame
.1387	48		               pha
.1388	ad 08 16	               lda  mapaddr
.138b	85 fd		               sta  $fd
.138d	ad 09 16	               lda  mapaddr+1
.1390	85 fe		               sta  $fe
.1392	68		               pla
.1393	a0 00		               ldy  #$00
.1395	91 fd		again          sta  (zpage2),y
.1397	c8		               iny
.1398	c0 08		               cpy  #$08
.139a	d0 f9		               bne  again
.139c	60		               rts
.139d			f6action
.139d	48		               pha
.139e	a9 00		               lda  #$0
.13a0	8d 03 16	               sta  editmode
.13a3	ad 04 16	               lda  fkeyset
.13a6	d0 4d		               bne  menub
.13a8	20 6e 1b	               jsr  push
.13ab	a2 10		               ldx  #<blankmsg
.13ad	a0 16		               ldy  #>blankmsg
.13af	20 06 1b	               jsr  putscxy
.13b2	a2 da		               ldx  #<f6a_msg
.13b4	a0 16		               ldy  #>f6a_msg
.13b6	20 06 1b	               jsr  putscxy
.13b9	20 ad 1b	               jsr  pop
.13bc	08		               php
.13bd	48		               pha
.13be	8a		               txa
.13bf	48		               pha
.13c0	ad 01 19	               lda  f6abutton
.13c3	48		               pha
.13c4	a9 92		               lda  #146
.13c6	8d 10 19	               sta  f6abutton+15
.13c9	a9 0d		               lda  #flashcol
.13cb	8d 01 19	               sta  f6abutton
.13ce	a2 01		               ldx  #<f6abutton
.13d0	a0 19		               ldy  #>f6abutton
.13d2	20 06 1b	               jsr  putscxy
.13d5	20 9a 0f	               jsr  delay
.13d8	a9 12		               lda  #18
.13da	8d 10 19	               sta  f6abutton+15
.13dd	68		               pla
.13de	8d 01 19	               sta  f6abutton
.13e1	a2 01		               ldx  #<f6abutton
.13e3	a0 19		               ldy  #>f6abutton
.13e5	20 06 1b	               jsr  putscxy
.13e8	68		               pla
.13e9	aa		               tax
.13ea	68		               pla
.13eb	28		               plp
.13ec	20 41 14	               jsr  fillchar
.13ef	20 c7 0c	               jsr  drawbitmap
.13f2	4c 3f 14	               jmp  out
.13f5			menub
.13f5	20 6e 1b	               jsr  push
.13f8	a2 10		               ldx  #<blankmsg
.13fa	a0 16		               ldy  #>blankmsg
.13fc	20 06 1b	               jsr  putscxy
.13ff	a2 7e		               ldx  #<f6b_msg
.1401	a0 17		               ldy  #>f6b_msg
.1403	20 06 1b	               jsr  putscxy
.1406	20 ad 1b	               jsr  pop
.1409	08		               php
.140a	48		               pha
.140b	8a		               txa
.140c	48		               pha
.140d	ad d2 19	               lda  f6bbutton
.1410	48		               pha
.1411	a9 92		               lda  #146
.1413	8d e1 19	               sta  f6bbutton+15
.1416	a9 0d		               lda  #flashcol
.1418	8d d2 19	               sta  f6bbutton
.141b	a2 d2		               ldx  #<f6bbutton
.141d	a0 19		               ldy  #>f6bbutton
.141f	20 06 1b	               jsr  putscxy
.1422	20 9a 0f	               jsr  delay
.1425	a9 12		               lda  #18
.1427	8d e1 19	               sta  f6bbutton+15
.142a	68		               pla
.142b	8d d2 19	               sta  f6bbutton
.142e	a2 d2		               ldx  #<f6bbutton
.1430	a0 19		               ldy  #>f6bbutton
.1432	20 06 1b	               jsr  putscxy
.1435	68		               pla
.1436	aa		               tax
.1437	68		               pla
.1438	28		               plp
.1439	20 4d 14	               jsr  scrollup
.143c	20 c7 0c	               jsr  drawbitmap
.143f	68		out            pla
.1440	60		               rts
.1441			fillchar
.1441	20 6e 1b	               jsr  push
.1444	a9 ff		               lda  #$ff
.1446	20 87 13	               jsr  allsame
.1449	20 ad 1b	               jsr  pop
.144c	60		               rts
.144d			scrollup
.144d	20 6e 1b	               jsr  push
.1450	48		               pha
.1451	ad 08 16	               lda  mapaddr
.1454	85 fb		               sta  $fb
.1456	ad 09 16	               lda  mapaddr+1
.1459	85 fc		               sta  $fc
.145b	68		               pla
.145c	48		               pha
.145d	ad 08 16	               lda  mapaddr
.1460	85 fd		               sta  $fd
.1462	ad 09 16	               lda  mapaddr+1
.1465	85 fe		               sta  $fe
.1467	68		               pla
.1468	20 8d 1c	               jsr  inczp2
.146b	a0 00		               ldy  #$00
.146d	b1 fb		               lda  (zpage1),y
.146f	8d 84 14	               sta  tmpbyte
.1472	b1 fd		again          lda  (zpage2),y
.1474	91 fb		               sta  (zpage1),y
.1476	c8		               iny
.1477	c0 07		               cpy  #$07
.1479	d0 f7		               bne  again
.147b	ad 84 14	               lda  tmpbyte
.147e	91 fb		               sta  (zpage1),y
.1480	20 ad 1b	               jsr  pop
.1483	60		               rts
>1484	00		tmpbyte        .byte     $00
.1485			f7action
.1485	48		               pha
.1486	a9 00		               lda  #$0
.1488	8d 03 16	               sta  editmode
.148b	ad 04 16	               lda  fkeyset
.148e	d0 47		               bne  menub
.1490	20 6e 1b	               jsr  push
.1493	a2 10		               ldx  #<blankmsg
.1495	a0 16		               ldy  #>blankmsg
.1497	20 06 1b	               jsr  putscxy
.149a	a2 f4		               ldx  #<f7a_msg
.149c	a0 16		               ldy  #>f7a_msg
.149e	20 06 1b	               jsr  putscxy
.14a1	20 ad 1b	               jsr  pop
.14a4	08		               php
.14a5	48		               pha
.14a6	8a		               txa
.14a7	48		               pha
.14a8	ad 1b 19	               lda  f7abutton
.14ab	48		               pha
.14ac	a9 92		               lda  #146
.14ae	8d 2a 19	               sta  f7abutton+15
.14b1	a9 0d		               lda  #flashcol
.14b3	8d 1b 19	               sta  f7abutton
.14b6	a2 1b		               ldx  #<f7abutton
.14b8	a0 19		               ldy  #>f7abutton
.14ba	20 06 1b	               jsr  putscxy
.14bd	20 9a 0f	               jsr  delay
.14c0	a9 12		               lda  #18
.14c2	8d 2a 19	               sta  f7abutton+15
.14c5	68		               pla
.14c6	8d 1b 19	               sta  f7abutton
.14c9	a2 1b		               ldx  #<f7abutton
.14cb	a0 19		               ldy  #>f7abutton
.14cd	20 06 1b	               jsr  putscxy
.14d0	68		               pla
.14d1	aa		               tax
.14d2	68		               pla
.14d3	28		               plp
.14d4	4c 21 15	               jmp  out
.14d7			menub
.14d7	20 6e 1b	               jsr  push
.14da	a2 10		               ldx  #<blankmsg
.14dc	a0 16		               ldy  #>blankmsg
.14de	20 06 1b	               jsr  putscxy
.14e1	a2 90		               ldx  #<f7b_msg
.14e3	a0 17		               ldy  #>f7b_msg
.14e5	20 06 1b	               jsr  putscxy
.14e8	20 ad 1b	               jsr  pop
.14eb	08		               php
.14ec	48		               pha
.14ed	8a		               txa
.14ee	48		               pha
.14ef	ad ec 19	               lda  f7bbutton
.14f2	48		               pha
.14f3	a9 92		               lda  #146
.14f5	8d fb 19	               sta  f7bbutton+15
.14f8	a9 0d		               lda  #flashcol
.14fa	8d ec 19	               sta  f7bbutton
.14fd	a2 ec		               ldx  #<f7bbutton
.14ff	a0 19		               ldy  #>f7bbutton
.1501	20 06 1b	               jsr  putscxy
.1504	20 9a 0f	               jsr  delay
.1507	a9 12		               lda  #18
.1509	8d fb 19	               sta  f7bbutton+15
.150c	68		               pla
.150d	8d ec 19	               sta  f7bbutton
.1510	a2 ec		               ldx  #<f7bbutton
.1512	a0 19		               ldy  #>f7bbutton
.1514	20 06 1b	               jsr  putscxy
.1517	68		               pla
.1518	aa		               tax
.1519	68		               pla
.151a	28		               plp
.151b	20 23 15	               jsr  scrolldown
.151e	20 c7 0c	               jsr  drawbitmap
.1521	68		out            pla
.1522	60		               rts
.1523			scrolldown
.1523	20 6e 1b	               jsr  push
.1526	48		               pha
.1527	ad 08 16	               lda  mapaddr
.152a	85 fb		               sta  $fb
.152c	ad 09 16	               lda  mapaddr+1
.152f	85 fc		               sta  $fc
.1531	68		               pla
.1532	48		               pha
.1533	ad 08 16	               lda  mapaddr
.1536	85 fd		               sta  $fd
.1538	ad 09 16	               lda  mapaddr+1
.153b	85 fe		               sta  $fe
.153d	68		               pla
.153e	20 9a 1c	               jsr  deczp2
.1541	a0 07		               ldy  #$07
.1543	b1 fb		               lda  (zpage1),y
.1545	8d 5a 15	               sta  tmpbyte
.1548	88		again          dey
.1549	b1 fb		               lda  (zpage1),y
.154b	91 fd		               sta  (zpage2),y
.154d	c0 01		               cpy  #$01
.154f	d0 f7		               bne  again
.1551	ad 5a 15	               lda  tmpbyte
.1554	91 fd		               sta  (zpage2),y
.1556	20 ad 1b	               jsr  pop
.1559	60		               rts
>155a	00		tmpbyte        .byte     $00
.155b			f8action
.155b	48		               pha
.155c	a9 00		               lda  #$0
.155e	8d 03 16	               sta  editmode
.1561	ad 04 16	               lda  fkeyset
.1564	d0 47		               bne  menub
.1566	20 6e 1b	               jsr  push
.1569	a2 10		               ldx  #<blankmsg
.156b	a0 16		               ldy  #>blankmsg
.156d	20 06 1b	               jsr  putscxy
.1570	a2 fd		               ldx  #<menub_msg
.1572	a0 17		               ldy  #>menub_msg
.1574	20 06 1b	               jsr  putscxy
.1577	20 ad 1b	               jsr  pop
.157a	08		               php
.157b	48		               pha
.157c	8a		               txa
.157d	48		               pha
.157e	ad 35 19	               lda  f8abutton
.1581	48		               pha
.1582	a9 92		               lda  #146
.1584	8d 44 19	               sta  f8abutton+15
.1587	a9 0d		               lda  #flashcol
.1589	8d 35 19	               sta  f8abutton
.158c	a2 35		               ldx  #<f8abutton
.158e	a0 19		               ldy  #>f8abutton
.1590	20 06 1b	               jsr  putscxy
.1593	20 9a 0f	               jsr  delay
.1596	a9 12		               lda  #18
.1598	8d 44 19	               sta  f8abutton+15
.159b	68		               pla
.159c	8d 35 19	               sta  f8abutton
.159f	a2 35		               ldx  #<f8abutton
.15a1	a0 19		               ldy  #>f8abutton
.15a3	20 06 1b	               jsr  putscxy
.15a6	68		               pla
.15a7	aa		               tax
.15a8	68		               pla
.15a9	28		               plp
.15aa	4c f1 15	               jmp  swapit
.15ad			menub
.15ad	20 6e 1b	               jsr  push
.15b0	a2 10		               ldx  #<blankmsg
.15b2	a0 16		               ldy  #>blankmsg
.15b4	20 06 1b	               jsr  putscxy
.15b7	a2 e2		               ldx  #<menua_msg
.15b9	a0 17		               ldy  #>menua_msg
.15bb	20 06 1b	               jsr  putscxy
.15be	20 ad 1b	               jsr  pop
.15c1	08		               php
.15c2	48		               pha
.15c3	8a		               txa
.15c4	48		               pha
.15c5	ad 06 1a	               lda  f8bbutton
.15c8	48		               pha
.15c9	a9 92		               lda  #146
.15cb	8d 15 1a	               sta  f8bbutton+15
.15ce	a9 0d		               lda  #flashcol
.15d0	8d 06 1a	               sta  f8bbutton
.15d3	a2 06		               ldx  #<f8bbutton
.15d5	a0 1a		               ldy  #>f8bbutton
.15d7	20 06 1b	               jsr  putscxy
.15da	20 9a 0f	               jsr  delay
.15dd	a9 12		               lda  #18
.15df	8d 15 1a	               sta  f8bbutton+15
.15e2	68		               pla
.15e3	8d 06 1a	               sta  f8bbutton
.15e6	a2 06		               ldx  #<f8bbutton
.15e8	a0 1a		               ldy  #>f8bbutton
.15ea	20 06 1b	               jsr  putscxy
.15ed	68		               pla
.15ee	aa		               tax
.15ef	68		               pla
.15f0	28		               plp
.15f1	49 ff		swapit         eor  #$ff
.15f3	8d 04 16	               sta  fkeyset
.15f6	20 33 0e	               jsr  showfkeys
.15f9	68		               pla
.15fa	60		               rts
>15fb	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>15ff	08 04 02 01
>1603	00		editmode       .byte     0
>1604	00		fkeyset        .byte     0
>1605	00		currentchar    .byte     0
>1606	00		currentkey     .byte     0
>1607	00		bitmapoffset   .byte     0
>1608	00 00		mapaddr        .word     0
>160a	00 00		byteaddr       .word     0
>160c	00 00		gridaddr       .word     0
>160e	09		cursln         .byte     grid_top
>160f	01		curscl         .byte     grid_left

;******  Processing file: messages.asm

>1610	03 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>1614	20 20 20 20	               .null     "                                      "
>1618	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1628	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1638	20 20 00
.163b			f1a_msg
>163b	03 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>163f	20 45 44 49	               .null     " edit mode: chr$(   )",146
>1643	54 20 4d 4f 44 45 3a 20 43 48 52 24 28 20 20 20
>1653	29 92 00
.1656			f2a_msg
>1656	03 00 05 92	save_msg       .byte     mesgcol,0,5,146
>165a	20 53 41 56	               .null     " save on cassette or disk? (c/d):"
>165e	45 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>166e	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.167c			f3a_msg
>167c	03 00 05	load_msg       .byte     mesgcol,0,5
>167f	20 4c 4f 41	               .null     " load from cassette or disk? (c/d):"
>1683	44 20 46 52 4f 4d 20 43 41 53 53 45 54 54 45 20
>1693	4f 52 20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.16a3			f4a_msg
>16a3	03 00 05	copy_msg       .byte     mesgcol,0,5
>16a6	20 45 4e 54	               .null     " enter character to copy:"
>16aa	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>16ba	43 4f 50 59 3a 00
.16c0			f5a_msg
>16c0	03 00 05	clear_msg      .byte     mesgcol,0,5
>16c3	20 43 4c 45	               .null     " clear char: chr$(   )"
>16c7	41 52 20 43 48 41 52 3a 20 43 48 52 24 28 20 20
>16d7	20 29 00
.16da			f6a_msg
>16da	03 00 05	fill_msg       .byte     mesgcol,0,5
>16dd	20 46 49 4c	               .null     " fill char:  chr$(   )"
>16e1	4c 20 43 48 41 52 3a 20 20 43 48 52 24 28 20 20
>16f1	20 29 00
.16f4			f7a_msg
>16f4	03 00 05	work_msg       .byte     mesgcol,0,5
>16f7	20 45 4e 41	               .null     " enable work space"
>16fb	42 4c 45 20 57 4f 52 4b 20 53 50 41 43 45 00
.170a			f1b_msg
>170a	03 00 05	rvrs_msg       .byte     mesgcol,0,5
>170d	20 52 45 56	               .null     " reverse character:"
>1711	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
.1721			f2b_msg
>1721	03 00 05	invr_msg       .byte     mesgcol,0,5
>1724	20 46 4c 49	               .null     " flipping vertically:"
>1728	50 50 49 4e 47 20 56 45 52 54 49 43 41 4c 4c 59
>1738	3a 00
.173a			f3b_msg
>173a	03 00 05	flip_msg       .byte     mesgcol,0,5
>173d	20 46 4c 49	               .null     " flipping horizontally:"
>1741	50 50 49 4e 47 20 48 4f 52 49 5a 4f 4e 54 41 4c
>1751	4c 59 3a 00
.1755			f4b_msg
>1755	03 00 05	scrollr_msg    .byte     mesgcol,0,5
>1758	20 53 43 52	               .null     " scrolling right:"
>175c	4f 4c 4c 49 4e 47 20 52 49 47 48 54 3a 00
.176a			f5b_msg
>176a	03 00 05	scrolll_msg    .byte     mesgcol,0,5
>176d	20 53 43 52	               .null     " scrolling left:"
>1771	4f 4c 4c 49 4e 47 20 4c 45 46 54 3a 00
.177e			f6b_msg
>177e	03 00 05	scrollu_msg    .byte     mesgcol,0,5
>1781	20 53 43 52	               .null     " scrolling up:"
>1785	4f 4c 4c 49 4e 47 20 55 50 3a 00
.1790			f7b_msg
>1790	03 00 05	scrolld_msg    .byte     mesgcol,0,5
>1793	20 53 43 52	               .null     " scrolling down:"
>1797	4f 4c 4c 49 4e 47 20 44 4f 57 4e 3a 00
>17a4	03 00 05	save_fname_msg .byte     mesgcol,0,5
>17a7	20 53 41 56	               .null     " save: file name ------.chr"
>17ab	45 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>17bb	2d 2d 2d 2e 43 48 52 00
>17c3	03 00 05	load_fname_msg .byte     mesgcol,0,5
>17c6	20 4c 4f 41	               .null     " load: file name ------.chr"
>17ca	44 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>17da	2d 2d 2d 2e 43 48 52 00
>17e2	03 00 05	menua_msg      .byte     mesgcol,0,5
>17e5	20 59 4f 55	               .null     " you are now in menu a."
>17e9	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>17f9	20 41 2e 00
>17fd	03 00 05	menub_msg      .byte     mesgcol,0,5
>1800	20 59 4f 55	               .null     " you are now in menu b."
>1804	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>1814	20 42 2e 00
>1818	0e 15 18 12	quit_msg       .byte     vblue1,21,24,18
>181c	43 54 52 4c	               .text     "ctrl-x",146
>1820	2d 58 92
>1823	20 54 4f 20	               .null     " to quit."
>1827	51 55 49 54 2e 00
>182d	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>1831	43 54 52 4c	               .text     "ctrl-x",146
>1835	2d 58 92
>1838	20 54 4f 20	               .null     " to menu."
>183c	4d 45 4e 55 2e 00
>1842	03 06 0c 12	bye_msg        .byte     vcyan,6,12,18
>1846	20 54 48 41	               .null     " thanks and have a good day ",146
>184a	4e 4b 53 20 41 4e 44 20 48 41 56 45 20 41 20 47
>185a	4f 4f 44 20 44 41 59 20 92 00
>1864	07 0a 18 12	any_msg        .byte     vjaune,10,24,18
>1868	20 41 4e 59	               .null         " any key to continue ",146
>186c	20 4b 45 59 20 54 4f 20 43 4f 4e 54 49 4e 55 45
>187c	20 92 00
=18			fkeyleft=18
=8			f1top=8
>187f	07 12 08	f1abutton      .byte     menu1col,fkeyleft,f1top       ;133
>1882	45 44 49 54	               .text     "edit........"
>1886	2e 2e 2e 2e 2e 2e 2e 2e
>188e	12		               .byte     18             ; position 15
>188f	20 20 20 46	               .text     "   f1   "
>1893	31 20 20 20
>1897	92 00		               .byte     146,0
>1899	07 12 0a	f2abutton      .byte     menu1col,fkeyleft,f1top+2     ;137
>189c	53 41 56 45	               .text     "save........"
>18a0	2e 2e 2e 2e 2e 2e 2e 2e
>18a8	12		               .byte     18            ; position 15
>18a9	20 20 20 46	               .text     "   f2   "
>18ad	32 20 20 20
>18b1	92 00		               .byte     146,0
>18b3	07 12 0c	f3abutton      .byte     menu1col,fkeyleft,f1top+4     ;134
>18b6	4c 4f 41 44	               .text     "load........"
>18ba	2e 2e 2e 2e 2e 2e 2e 2e
>18c2	12		               .byte     18             ; position 15
>18c3	20 20 20 46	               .text     "   f3   "
>18c7	33 20 20 20
>18cb	92 00		               .byte     146,0
>18cd	07 12 0e	f4abutton      .byte     menu1col,fkeyleft,f1top+6     ;138
>18d0	43 4f 50 59	               .text     "copy........"
>18d4	2e 2e 2e 2e 2e 2e 2e 2e
>18dc	12		               .byte     18             ; position 15
>18dd	20 20 20 46	               .text     "   f4   "
>18e1	34 20 20 20
>18e5	92 00		               .byte     146,0
>18e7	07 12 10	f5abutton      .byte     menu1col,fkeyleft,f1top+8     ;135
>18ea	43 4c 45 41	               .text     "clear......."
>18ee	52 2e 2e 2e 2e 2e 2e 2e
>18f6	12		               .byte     18             ; position 15
>18f7	20 20 20 46	               .text     "   f5   "
>18fb	35 20 20 20
>18ff	92 00		               .byte     146,0
>1901	07 12 12	f6abutton      .byte     menu1col,fkeyleft,f1top+10    ;139
>1904	46 49 4c 4c	               .text     "fill........"
>1908	2e 2e 2e 2e 2e 2e 2e 2e
>1910	12		               .byte     18             ; position 15
>1911	20 20 20 46	               .text     "   f6   "
>1915	36 20 20 20
>1919	92 00		               .byte     146,0
>191b	07 12 14	f7abutton      .byte     menu1col,fkeyleft,f1top+12    ;136
>191e	57 4f 52 4b	               .text     "work........"
>1922	2e 2e 2e 2e 2e 2e 2e 2e
>192a	12		               .byte     18             ; position 15
>192b	20 20 20 46	               .text     "   f7   "
>192f	37 20 20 20
>1933	92 00		               .byte     146,0
>1935	07 12 16	f8abutton      .byte     menu1col,fkeyleft,f1top+14
>1938	46 55 4e 43	               .text     "function.... "
>193c	54 49 4f 4e 2e 2e 2e 2e 20
>1945	12		               .byte     18             ; position 15
>1946	20 20 20 46	               .text     "   f8   "
>194a	38 20 20 20
>194e	92 00		               .byte     146,0
>1950	0d 12 08	f1bbutton      .byte     menu2col,fkeyleft,f1top
>1953	52 45 56 45	               .text     "reverse....."
>1957	52 53 45 2e 2e 2e 2e 2e
>195f	12		               .byte     18             ; position 15
>1960	20 20 20 46	               .text     "   f1   "
>1964	31 20 20 20
>1968	92 00		               .byte     146,0
>196a	0d 12 0a	f2bbutton      .byte     menu2col,fkeyleft,f1top+2
>196d	46 4c 49 50	               .text     "flip vert..."
>1971	20 56 45 52 54 2e 2e 2e
>1979	12		               .byte     18             ; position 15
>197a	20 20 20 46	               .text     "   f2   "
>197e	32 20 20 20
>1982	92 00		               .byte     146,0
>1984	0d 12 0c	f3bbutton      .byte     menu2col,fkeyleft,f1top+4
>1987	46 4c 49 50	               .text     "flip horz..."
>198b	20 48 4f 52 5a 2e 2e 2e
>1993	12		               .byte     18             ; position 15
>1994	20 20 20 46	               .text     "   f3   "
>1998	33 20 20 20
>199c	92 00		               .byte     146,0
>199e	0d 12 0e	f4bbutton      .byte     menu2col,fkeyleft,f1top+6
>19a1	53 43 52 4f	               .text     "scroll r...."
>19a5	4c 4c 20 52 2e 2e 2e 2e
>19ad	12		               .byte     18             ; position 15
>19ae	20 20 20 46	               .text     "   f4   "
>19b2	34 20 20 20
>19b6	92 00		               .byte     146,0
>19b8	0d 12 10	f5bbutton      .byte     menu2col,fkeyleft,f1top+8
>19bb	53 43 52 4f	               .text     "scroll l...."
>19bf	4c 4c 20 4c 2e 2e 2e 2e
>19c7	12		               .byte     18             ; position 15
>19c8	20 20 20 46	               .text     "   f5   "
>19cc	35 20 20 20
>19d0	92 00		               .byte     146,0
>19d2	0d 12 12	f6bbutton      .byte     menu2col,fkeyleft,f1top+10
>19d5	53 43 52 4f	               .text     "scroll u...."
>19d9	4c 4c 20 55 2e 2e 2e 2e
>19e1	12		               .byte     18             ; position 15
>19e2	20 20 20 46	               .text     "   f6   "
>19e6	36 20 20 20
>19ea	92 00		               .byte     146,0
>19ec	0d 12 14	f7bbutton      .byte     menu2col,fkeyleft,f1top+12
>19ef	53 43 52 4f	               .text     "scroll d...."
>19f3	4c 4c 20 44 2e 2e 2e 2e
>19fb	12		               .byte     18             ; position 15
>19fc	20 20 20 46	               .text     "   f7   "
>1a00	37 20 20 20
>1a04	92 00		               .byte     146,0
>1a06	0d 12 16	f8bbutton      .byte     menu2col,fkeyleft,f1top+14
>1a09	46 55 4e 43	               .text     "function.... "
>1a0d	54 49 4f 4e 2e 2e 2e 2e 20
>1a16	12		               .byte     18             ; position 15
>1a17	20 20 20 46	               .text     "   f8   "
>1a1b	38 20 20 20
>1a1f	92 00		               .byte     146,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.1a21			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.1a21			screendis
.1a21	08		               php
.1a22	48		               pha
.1a23	ad 11 d0	               lda  $d011
.1a26	29 ef		               and  #%11101111
.1a28	8d 11 d0	               sta  $d011
.1a2b	68		               pla
.1a2c	28		               plp
.1a2d	60		               rts
.1a2e			screenena
.1a2e	08		               php
.1a2f	48		               pha
.1a30	ad 11 d0	               lda  $d011
.1a33	09 10		               ora  #%00010000
.1a35	8d 11 d0	               sta  $d011
.1a38	68		               pla
.1a39	28		               plp
.1a3a	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.1a3b			scrmaninit
.1a3b	20 6e 1b	               jsr  push
.1a3e	a9 06		               lda  #vbleu
.1a40	8d 21 d0	               sta  vicbackcol
.1a43	a9 05		               lda  #vvert
.1a45	8d 20 d0	               sta  vicbordcol
.1a48	a9 01		               lda  #vblanc
.1a4a	8d 86 02	               sta  bascol
.1a4d	ad 00 04	               lda  scrnram
.1a50	8d 00 04	               sta  scrnram
.1a53	20 5b 1a	               jsr  cls
.1a56	20 ad 1b	               jsr  pop
.1a59	60		               rts
>1a5a	8e		characterset   .byte b_uppercase
.1a5b			cls
.1a5b	08		               php
.1a5c	48		               pha
.1a5d	a9 93		               lda  #$93
.1a5f	20 77 1a	               jsr  putch
.1a62	a9 0e		               lda  #$0e
.1a64	20 77 1a	               jsr  putch
.1a67	68		               pla
.1a68	28		               plp
.1a69	60		               rts
.1a6a			putnch
.1a6a	08		               php
.1a6b	e0 00		               cpx  #$00
.1a6d	f0 06		               beq  out
.1a6f	20 d2 ff	again          jsr  $ffd2
.1a72	ca		               dex
.1a73	d0 fa		               bne  again
.1a75	28		out            plp
.1a76	60		               rts
.1a77			putch
.1a77	08		               php
.1a78	20 d2 ff	               jsr  $ffd2
.1a7b	28		               plp
.1a7c	60		               rts
.1a7d			puts
.1a7d	20 6e 1b	               jsr  push
.1a80	86 fb		               stx  zpage1
.1a82	84 fc		               sty  zpage1+1
.1a84	a0 00		               ldy  #0
.1a86	b1 fb		next           lda  (zpage1),y
.1a88	f0 09		               beq  exit
.1a8a	20 77 1a	               jsr  putch
.1a8d	20 75 1c	               jsr  inczp1
.1a90	4c 86 1a	               jmp  next
.1a93	20 ad 1b	exit           jsr  pop
.1a96	60		               rts
.1a97			gotoxy
.1a97	08		               php
.1a98	18		               clc
.1a99	8a		               txa
.1a9a	48		               pha
.1a9b	98		               tya
.1a9c	aa		               tax
.1a9d	68		               pla
.1a9e	a8		               tay
.1a9f	20 f0 ff	               jsr  kplot
.1aa2	28		               plp
.1aa3	60		               rts
.1aa4			cursor
=$0286			bascol    =    $0286
.1aa4	08		               php
.1aa5	48		               pha
.1aa6	90 12		               bcc  restore
.1aa8	20 f0 ff	               jsr  kplot
.1aab	8c cc 1a	               sty  cx
.1aae	8e cd 1a	               stx  cy
.1ab1	ad 86 02	               lda  bascol
.1ab4	8d ce 1a	               sta  bcol
.1ab7	4c c9 1a	               jmp  out
.1aba	ae cd 1a	restore        ldx  cy
.1abd	ac cc 1a	               ldy  cx
.1ac0	20 f0 ff	               jsr  kplot
.1ac3	ad ce 1a	               lda  bcol
.1ac6	8d 86 02	               sta  bascol
.1ac9	68		out            pla
.1aca	28		               plp
.1acb	60		               rts
>1acc	00		cx   .byte     $00
>1acd	00		cy   .byte     $00
>1ace	00		bcol .byte     $00
.1acf			cursave
.1acf	08		               php
.1ad0	38		               sec
.1ad1	20 a4 1a	               jsr  cursor
.1ad4	28		               plp
.1ad5	60		               rts
.1ad6			curput
.1ad6	08		               php
.1ad7	18		               clc
.1ad8	20 a4 1a	               jsr  cursor
.1adb	28		               plp
.1adc	60		               rts
.1add			putsxy
.1add	20 6e 1b	               jsr  push
.1ae0	86 fb		               stx  zpage1
.1ae2	84 fc		               sty  zpage1+1
.1ae4	a0 00		               ldy  #$00
.1ae6	b1 fb		               lda  (zpage1),y
.1ae8	aa		               tax
.1ae9	20 75 1c	               jsr  inczp1
.1aec	b1 fb		               lda  (zpage1),y
.1aee	a8		               tay
.1aef	20 97 1a	               jsr  gotoxy
.1af2	20 75 1c	               jsr  inczp1
.1af5	a6 fb		               ldx  zpage1
.1af7	a4 fc		               ldy  zpage1+1
.1af9	20 7d 1a	               jsr  puts
.1afc	20 ad 1b	               jsr  pop
.1aff	60		               rts
>1b00	00 00		straddr   .word     $00
>1b02	00		px        .byte     $00
>1b03	00		py        .byte     $00
>1b04	00 00		zp1       .word     $00
.1b06			putscxy
.1b06	20 6e 1b	               jsr  push
.1b09	84 fc		               sty  zpage1+1
.1b0b	86 fb		               stx  zpage1
.1b0d	ad 86 02	               lda  bascol
.1b10	8d 30 1b	               sta  bc
.1b13	a0 00		               ldy #$00
.1b15	b1 fb		               lda  (zpage1),y
.1b17	8d 86 02	               sta  bascol
.1b1a	20 75 1c	               jsr  inczp1
.1b1d	a6 fb		               ldx  zpage1
.1b1f	a4 fc		               ldy  zpage1+1
.1b21	20 dd 1a	               jsr  putsxy
.1b24	ad 30 1b	               lda  bc
.1b27	8d 86 02	               sta  bascol
.1b2a	20 ad 1b	               jsr  pop
.1b2d	60		               rts
>1b2e	00 00		straddr  .word      $00
>1b30	00		bc       .byte      $00
>1b31	00 00		zp1      .word      $00
.1b33			putrahex
.1b33	08		               php
.1b34	48		               pha
.1b35	20 8b 1d	               jsr  a2hex
.1b38	a9 2a		               lda  #<a2hexstr
.1b3a	a0 1d		               ldy  #>a2hexstr
.1b3c	20 7d 1a	               jsr  puts
.1b3f	68		               pla
.1b40	28		               plp
.1b41	60		               rts
.1b42			kputrahexxy
.1b42			bputrahexxy
.1b42			putrahexxy
.1b42	08		               php
.1b43	20 8b 1d	               jsr  a2hex
.1b46	a9 27		               lda  #<a2hexpos
.1b48	a0 1d		               ldy  #>a2hexpos
.1b4a	20 dd 1a	               jsr  putsxy
.1b4d	68		               pla
.1b4e	28		               plp
.1b4f	60		               rts
.1b50			putrahexcxy
.1b50	08		               php
.1b51	20 8b 1d	               jsr  a2hex
.1b54	a9 27		               lda  #<a2hexpos
.1b56	a0 1d		               ldy  #>a2hexpos
.1b58	20 06 1b	               jsr  putscxy
.1b5b	68		               pla
.1b5c	28		               plp
.1b5d	60		               rts
.1b5e			setinverse
.1b5e	48		               pha
.1b5f	a9 12		               lda  #$12
.1b61	20 d2 ff	               jsr  $ffd2
.1b64	68		               pla
.1b65	60		               rts
.1b66			clrinverse
.1b66	48		               pha
.1b67	a9 92		               lda  #$92
.1b69	20 d2 ff	               jsr  $ffd2
.1b6c	68		               pla
.1b6d	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.1b6e			push
.1b6e	08		          php            ; stack : flg, pcl, pch
.1b6f	78		          sei
.1b70	8d aa 1b	          sta  ra        ; save a
.1b73	68		          pla            ; stack : pcl, pch
.1b74	8d a9 1b	          sta  rp        ; save rp
.1b77	68		          pla            ; stack : pch
.1b78	8d ab 1b	          sta  pc        ; save pcl
.1b7b	68		          pla            ; stack : -
.1b7c	8d ac 1b	          sta  pc+1      ; save pch
.1b7f	a5 fb		          lda  zpage1    ; get zpage1 low byte
.1b81	48		          pha            ; stack : zp1l
.1b82	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.1b84	48		          pha            ; stack : zp1h, zp1l
.1b85	a5 fd		          lda  zpage2    ; get zpage2 low byte
.1b87	48		          pha            ; stack : zp2l, zp1h, zp1l
.1b88	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.1b8a	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1b8b	ad a9 1b	          lda  rp        ; get rp
.1b8e	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1b8f	ad aa 1b	          lda  ra        ; get a
.1b92	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1b93	8a		          txa            ; get x
.1b94	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1b95	98		          tya            ; get y
.1b96	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1b97	ad ac 1b	          lda  pc+1      ; get pch
.1b9a	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1b9b	ad ab 1b	          lda  pc        ; get pcl
.1b9e	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1b9f	ad a9 1b	          lda  rp        ; get rp
.1ba2	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1ba3	ad aa 1b	          lda  ra        ; get a
.1ba6	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1ba7	58		          cli
.1ba8	60		          rts
>1ba9	00		rp        .byte     0
>1baa	00		ra        .byte     0
>1bab	00 00		pc        .word     0
.1bad			pull
.1bad			pop
.1bad	78		          sei
.1bae	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1baf	8d e2 1b	          sta  pc        ; save pcl
.1bb2	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1bb3	8d e3 1b	          sta  pc+1      ; save pch
.1bb6	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1bb7	a8		          tay            ; set y
.1bb8	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1bb9	aa		          tax            ; set x
.1bba	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1bbb	8d e1 1b	          sta  ra        ; save a
.1bbe	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1bbf	8d e0 1b	          sta  rp        ; save rp
.1bc2	68		          pla            ; stack : zp2l, zp1h, zp1l
.1bc3	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.1bc5	68		          pla            ; stack : zp1h, zp1l
.1bc6	85 fd		          sta  zpage2    ; get zpage2 High byte
.1bc8	68		          pla            ; stack : zp1l
.1bc9	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.1bcb	68		          pla            ; stack :
.1bcc	85 fb		          sta  zpage1    ; get zpage1 High byte
.1bce	ad e3 1b	          lda  pc+1      ; get pch
.1bd1	48		          pha            ; stack : pch
.1bd2	ad e2 1b	          lda  pc
.1bd5	48		          pha            ; stack : pcl, pch
.1bd6	ad e0 1b	          lda  rp        ; get rp
.1bd9	48		          pha            ; stack : rp, pcl, pch
.1bda	ad e1 1b	          lda  ra        ; set ra
.1bdd	58		          cli
.1bde	28		          plp            ; stack : pcl, pch
.1bdf	60		          rts
>1be0	00		rp        .byte     0
>1be1	00		ra        .byte     0
>1be2	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.1be4			blkfill
.1be4	20 6e 1b	bf0            jsr  push
.1be7	20 a5 1c	               jsr  savezp1
.1bea	84 fc		               sty  zpage1+1
.1bec	a0 00		               ldy  #$00
.1bee	84 fb		               sty  zpage1
.1bf0	91 fb		bf1            sta  (zpage1),y
.1bf2	c8		               iny
.1bf3	d0 fb		               bne  bf1
.1bf5	20 b4 1c	               jsr  restzp1
.1bf8	20 ad 1b	               jsr  pop
.1bfb	60		               rts
.1bfc			memfill
.1bfc	20 6e 1b	               jsr  push
.1bff	20 e4 1b	mf1            jsr  blkfill
.1c02	c8		               iny
.1c03	ca		               dex
.1c04	d0 f9		               bne  mf1
.1c06	20 ad 1b	               jsr  pop
.1c09	60		               rts
.1c0a			memmove
.1c0a	20 6e 1b	               jsr  push
.1c0d	ba		               tsx            ; On se crée un pointeur ...
.1c0e	8a		               txa
.1c0f	18		               clc
.1c10	69 0b		               adc  #11
.1c12	a8		               tay
.1c13	a2 06		               ldx  #$06
.1c15	b9 00 01	nextbyte       lda  $0100,y
.1c18	99 64 1c	               sta  words,y
.1c1b	c8		               iny
.1c1c	ca		               dex
.1c1d	d0 f6		               bne  nextbyte
.1c1f	ad 64 1c	               lda  s
.1c22	8d 3b 1c	               sta  source+1
.1c25	ad 65 1c	               lda  s+1
.1c28	8d 3c 1c	               sta  source+2
.1c2b	ad 66 1c	               lda  d
.1c2e	8d 38 1c	               sta  destin+1
.1c31	ad 67 1c	               lda  d+1
.1c34	8d 39 1c	               sta  destin+2
.1c37	ad ff ff	destin         lda  $ffff
.1c3a	8d ff ff	source         sta  $ffff
.1c3d	ee 38 1c	               inc  destin+1
.1c40	d0 03		               bne  src
.1c42	ee 39 1c	               inc  destin+2
.1c45	ee 3b 1c	src            inc  source+1
.1c48	d0 03		               bne  cnt
.1c4a	ee 3c 1c	               inc  source+2
.1c4d	ad 68 1c	cnt            lda  compte
.1c50	d0 08		               bne  decit
.1c52	ad 69 1c	               lda  compte+1
.1c55	f0 09		               beq  fini
.1c57	ce 69 1c	               dec  compte+1
.1c5a	ce 68 1c	decit          dec  compte
.1c5d	4c 37 1c	               jmp  destin
.1c60	20 ad 1b	fini           jsr  pop
.1c63	60		               rts
.1c64			words
>1c64	00 00		s         .word     $0000
>1c66	00 00		d         .word     $0000
>1c68	00 00		compte    .word     $0000
.1c6a			decword
.1c6a	20 6e 1b	               jsr  push
.1c6d	86 fd		               stx  zpage2
.1c6f	84 fe		               sty  zpage2+1
.1c71	20 ad 1b	               jsr  pop
.1c74	60		               rts
.1c75			inczp1
.1c75	08		               php
.1c76	48		               pha
.1c77	e6 fb		               inc  zpage1
.1c79	a5 fb		               lda  zpage1
.1c7b	d0 02		               bne  nopage
.1c7d	e6 fc		               inc  zpage1+1
.1c7f	68		nopage         pla
.1c80	28		               plp
.1c81	60		               rts
.1c82			deczp1
.1c82	08		                php
.1c83	48		                pha
.1c84	c6 fb		                dec  zpage1
.1c86	d0 02		                bne  nopage
.1c88	c6 fc		                dec  zpage1+1
.1c8a	68		nopage          pla
.1c8b	28		                plp
.1c8c	60		                rts
.1c8d			inczp2
.1c8d	08		               php
.1c8e	48		               pha
.1c8f	e6 fd		               inc  zpage2
.1c91	a5 fd		               lda  zpage2
.1c93	d0 02		               bne  nopage
.1c95	e6 fe		               inc  zpage2+1
.1c97	68		nopage         pla
.1c98	28		               plp
.1c99	60		               rts
.1c9a			deczp2
.1c9a	08		               php
.1c9b	48		               pha
.1c9c	a5 fd		               lda  zpage2
.1c9e	d0 02		               bne  nopage
.1ca0	c6 fe		               dec  zpage2+1
.1ca2	68		nopage         pla
.1ca3	28		               plp
.1ca4	60		               rts
.1ca5			savezp1
.1ca5	08		               php
.1ca6	48		               pha
.1ca7	a5 fb		               lda  zpage1
.1ca9	8d 21 1d	               sta  zp1
.1cac	a5 fc		               lda  zpage1+1
.1cae	8d 22 1d	               sta  zp1+1
.1cb1	68		               pla
.1cb2	28		               plp
.1cb3	60		               rts
.1cb4			restzp1
.1cb4	08		               php
.1cb5	48		               pha
.1cb6	ad 21 1d	               lda zp1
.1cb9	85 fb		               sta zpage1
.1cbb	ad 22 1d	               lda zp1+1
.1cbe	85 fc		               sta zpage1+1
.1cc0	68		               pla
.1cc1	28		               plp
.1cc2	60		               rts
.1cc3			savezp2
.1cc3	08		         php
.1cc4	48		         pha
.1cc5	a5 fd		         lda zpage2
.1cc7	8d 23 1d	         sta zp2
.1cca	a5 fe		         lda zpage2+1
.1ccc	8d 24 1d	         sta zp2+1
.1ccf	68		         pla
.1cd0	28		         plp
.1cd1	60		         rts
.1cd2			restzp2
.1cd2	08		                php
.1cd3	48		                pha
.1cd4	ad 23 1d	                lda  zp2
.1cd7	85 fd		                sta  zpage2
.1cd9	ad 24 1d	                lda  zp2+1
.1cdc	85 fe		                sta  zpage2+1
.1cde	68		                pla
.1cdf	28		                plp
.1ce0	60		                rts
.1ce1			xy2addr
.1ce1	08		                php
.1ce2	48		                pha
.1ce3	8a		                txa
.1ce4	48		                pha
.1ce5	98		                tya
.1ce6	48		                pha
.1ce7	ad 1c 1d	                lda     addr1+1
.1cea	8d 1e 1d	                sta     addr2+1
.1ced	ad 1b 1d	                lda     addr1
.1cf0	8d 1d 1d	                sta     addr2
.1cf3	c0 00		                cpy     #$00
.1cf5	f0 0f		                beq     addx
.1cf7	18		moreline        clc
.1cf8	6d 1a 1d	                adc     ymult
.1cfb	90 03		                bcc     norepy
.1cfd	ee 1e 1d	                inc     addr2+1
.1d00	8d 1d 1d	norepy          sta     addr2
.1d03	88		                dey
.1d04	d0 f1		                bne     moreline
.1d06	8a		addx            txa
.1d07	18		                clc
.1d08	6d 1d 1d	                adc     addr2
.1d0b	90 03		                bcc     thatsit
.1d0d	ee 1e 1d	                inc     addr2+1
.1d10	8d 1d 1d	thatsit         sta     addr2
.1d13	68		                pla
.1d14	a8		                tay
.1d15	68		                pla
.1d16	aa		                tax
.1d17	68		                pla
.1d18	28		                plp
.1d19	60		                rts
>1d1a	28		ymult          .byte     40
>1d1b	00 00		addr1          .word     $0000
>1d1d	00 00		addr2          .word     $0000
>1d1f	00 00		bytecnt        .word     $0000
>1d21	00 00		zp1        .word   $0000
>1d23	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>1d25	01		a2hexcol       .byte     1              ; pour aputscxy
>1d26	00		a2hexbkcol     .byte     %00000000
.1d27			a2hexpos
>1d27	00		a2hexpx        .byte     0              ; pour aputsxy
>1d28	00		a2hexpy        .byte     0
>1d29	24		a2hexprefix    .byte     "$"            ; pour aputs
>1d2a	00 00		a2hexstr       .word     $00
>1d2c	00 00		               .word     $00
>1d2e	00		               .byte     0              ; 0 end string
>1d2f	30 30 30 30	abin           .null     "00000000"
>1d33	30 30 30 30 00
>1d38	20 20 20 00	adec           .null     "   "
.1d3c			putahexfmtxy
.1d3c	20 6e 1b	               jsr  push
.1d3f	20 8b 1d	               jsr  a2hex
.1d42	ae 27 1d	               ldx  a2hexpx
.1d45	ac 28 1d	               ldy  a2hexpy
.1d48	20 97 1a	               jsr  gotoxy
.1d4b	a2 29		               ldx  #<a2hexprefix
.1d4d	a0 1d		               ldy  #>a2hexprefix
.1d4f	20 7d 1a	               jsr  puts
.1d52	20 ad 1b	               jsr  pop
.1d55	60		               rts
.1d56			putahexfmt
.1d56	20 6e 1b	               jsr  push
.1d59	20 8b 1d	               jsr  a2hex
.1d5c	a2 29		               ldx  #<a2hexprefix
.1d5e	a0 1d		               ldy  #>a2hexprefix
.1d60	20 7d 1a	               jsr  puts
.1d63	20 ad 1b	               jsr  pop
.1d66	60		               rts
.1d67			putahex
.1d67	20 6e 1b	               jsr  push
.1d6a	20 8b 1d	               jsr  a2hex
.1d6d	a2 2a		               ldx  #<a2hexstr
.1d6f	a0 1d		               ldy  #>a2hexstr
.1d71	20 7d 1a	               jsr  puts
.1d74	20 ad 1b	               jsr  pop
.1d77	60		               rts
.1d78			nib2hex
.1d78	08		               php
.1d79	29 0f		               and  #$0f
.1d7b	f8		               sed
.1d7c	18		               clc
.1d7d	69 90		               adc  #$90
.1d7f	69 40		               adc  #$40
.1d81	d8		               cld
.1d82	28		               plp
.1d83	60		               rts
.1d84			lsra4bits
.1d84	08		               php
.1d85	4a		               lsr
.1d86	4a		               lsr
.1d87	4a		               lsr
.1d88	4a		               lsr
.1d89	28		               plp
.1d8a	60		               rts
.1d8b			a2hex
.1d8b	08		               php
.1d8c	48		               pha
.1d8d	48		               pha
.1d8e	20 84 1d	               jsr  lsra4bits
.1d91	20 78 1d	               jsr  nib2hex
.1d94	8d 2a 1d	               sta  a2hexstr
.1d97	68		               pla
.1d98	20 78 1d	               jsr  nib2hex
.1d9b	8d 2b 1d	               sta  a2hexstr+1
.1d9e	a9 00		               lda  #$00                ; set end of string
.1da0	8d 2c 1d	               sta  a2hexstr+2
.1da3	68		               pla
.1da4	28		               plp
.1da5	60		               rts
.1da6			xy2hex
.1da6	20 6e 1b	               jsr  push
.1da9	20 8b 1d	               jsr  a2hex
.1dac	8a		               txa
.1dad	48		               pha
.1dae	20 84 1d	               jsr  lsra4bits
.1db1	20 78 1d	               jsr  nib2hex
.1db4	8d 2a 1d	               sta  a2hexstr
.1db7	68		               pla
.1db8	20 78 1d	               jsr  nib2hex
.1dbb	8d 2b 1d	               sta  a2hexstr+1
.1dbe	98		               tya
.1dbf	48		               pha
.1dc0	20 84 1d	               jsr  lsra4bits
.1dc3	20 78 1d	               jsr  nib2hex
.1dc6	8d 2c 1d	               sta  a2hexstr+2
.1dc9	68		               pla
.1dca	20 78 1d	               jsr  nib2hex
.1dcd	8d 2d 1d	               sta  a2hexstr+3
.1dd0	a9 00		               lda  #$00                ; 0 ended string
.1dd2	8d 2e 1d	               sta  a2hexstr+4
.1dd5	20 ad 1b	               jsr  pop
.1dd8			atobin
.1dd8	20 6e 1b	               jsr  push
.1ddb	a2 08		               ldx  #8
.1ddd	a0 00		               ldy  #0
.1ddf	18		               clc
.1de0	2a		nextbit        rol
.1de1	48		               pha
.1de2	69 00		               adc  #$00
.1de4	29 01		               and  #$01
.1de6	20 78 1d	               jsr  nib2hex
.1de9	99 2f 1d	               sta  abin,y
.1dec	68		               pla
.1ded	c8		               iny
.1dee	ca		               dex
.1def	d0 ef		               bne  nextbit
.1df1	a9 00		               lda  #0
.1df3	99 2f 1d	               sta  abin,y
.1df6	20 ad 1b	               jsr  pull
.1df9	60		               rts
.1dfa			putabin
.1dfa	20 d8 1d	               jsr     atobin
.1dfd	20 6e 1b	               jsr     push
.1e00	a2 2f		               ldx     #<abin
.1e02	a0 1d		               ldy     #>abin
.1e04	20 7d 1a	               jsr     puts
.1e07	20 ad 1b	               jsr     pop
.1e0a	60		               rts
.1e0b			printabin
.1e0b	20 6e 1b	               jsr     push
.1e0e	a2 2f		               ldx     #<abin
.1e10	a0 1d		               ldy     #>abin
.1e12	20 7d 1a	               jsr     puts
.1e15	20 ad 1b	               jsr     pop
.1e18	60		               rts
.1e19			putabinfmt
.1e19	08		               php
.1e1a	48		               pha
.1e1b	a9 25		               lda     #"%"
.1e1d	20 77 1a	               jsr     putch
.1e20	68		               pla
.1e21	20 fa 1d	               jsr     putabin
.1e24	28		               plp
.1e25	60		               rts
.1e26			putabinxy
.1e26	20 97 1a	               jsr     gotoxy
.1e29	20 fa 1d	               jsr     putabin
.1e2c	60		               rts
.1e2d			putabinfmtxy
.1e2d	20 97 1a	               jsr     gotoxy
.1e30	20 19 1e	               jsr     putabinfmt
.1e33	60		               rts
.1e34			atodec
.1e34	20 6e 1b	               jsr  push
.1e37	f8		               sed
.1e38	aa		               tax
.1e39	a0 00		               ldy  #$00
.1e3b	a9 00		               lda  #$00
.1e3d	18		nextbit        clc
.1e3e	69 01		               adc  #$01
.1e40	90 01		               bcc  decx
.1e42	c8		               iny
.1e43	ca		decx           dex
.1e44	d0 f7		               bne  nextbit
.1e46	48		               pha
.1e47	98		               tya
.1e48	20 78 1d	               jsr  nib2hex
.1e4b	8d 38 1d	               sta  adec
.1e4e	68		               pla
.1e4f	48		               pha
.1e50	20 78 1d	               jsr  nib2hex
.1e53	8d 3a 1d	               sta  adec+2
.1e56	68		               pla
.1e57	6a		               ror
.1e58	6a		               ror
.1e59	6a		               ror
.1e5a	6a		               ror
.1e5b	20 78 1d	               jsr  nib2hex
.1e5e	8d 39 1d	               sta  adec+1
.1e61	d8		               cld
.1e62	20 ad 1b	               jsr  pull
.1e65	60		               rts
>1e66	00 00 00	buffer         .byte     0,0,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>1e69	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>1e6d	00 00 00 00 00 00 00 00 00 0d 00 00
>1e79	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>1e7d	00 00 00 00 00 00 00 00 00 00 00 00
>1e89	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>1e8d	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1e99	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1e9d	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1ea9	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1ead	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>1eb9	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1ebd	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>1ec9	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1ecd	00 00 00 00 00 00 00 00 00 00 00 00
>1ed9	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1edd	00 00 00 00 00 00 00 00 00 00 00 00
>1ee9	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1eed	00 00 00 00 00 00 00 00 00 00 00 00
>1ef9	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1efd	00 00 00 00 00 00 00 00 00 00 00 00
>1f09	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>1f0d	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1f19	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1f1d	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1f29	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1f2d	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>1f39	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>1f3d	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>1f49	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>1f4d	00 00 00 00 00 00 00 00 00 00 00 00
>1f59	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>1f5d	00 00 00 00 00 00 00 00 00 00 00 00
.1f69			waitstop
.1f69	20 6e 1b	               jsr  push
.1f6c	20 ed f6	wait           jsr  k_stop
.1f6f	d0 fb		               bne  wait
.1f71	20 ad 1b	               jsr  pop
.1f74	60		               rts
.1f75			anykey
.1f75	08		               php
.1f76	48		               pha
.1f77	a5 cb		nokey          lda 203
.1f79	c9 40		               cmp #64
.1f7b	f0 fa		               beq nokey
.1f7d	20 83 1f	               jsr releasekey
.1f80	68		               pla
.1f81	28		               plp
.1f82	60		               rts
.1f83			releasekey
.1f83	08		               php
.1f84	48		               pha
.1f85	a5 cb		keypressed     lda 203
.1f87	c9 40		               cmp #64
.1f89	d0 fa		               bne keypressed
.1f8b	68		               pla
.1f8c	28		               plp
.1f8d	60		               rts
.1f8e			getkey
.1f8e	20 e4 ff	again          jsr  getin
.1f91	c9 00		               cmp  #0
.1f93	f0 f9		               beq  again
.1f95	60		               rts
.1f96			waitkey
.1f96	20 6e 1b	               jsr  push
.1f99	8d e7 1f	               sta  thekey
.1f9c	20 e4 ff	nope           jsr  getin
.1f9f	20 d2 ff	               jsr  chrout
.1fa2	cd e7 1f	               cmp  thekey
.1fa5	d0 f5		               bne  nope
.1fa7	20 d2 ff	               jsr  chrout
.1faa	20 ad 1b	               jsr  pop
.1fad	60		               rts
.1fae			waitspace
.1fae	20 6e 1b	               jsr  push
.1fb1	a9 7f		wait           lda  #$7f  ;%01111111
.1fb3	8d 00 dc	               sta  $dc00
.1fb6	ad 01 dc	               lda  $dc01
.1fb9	29 10		               and  #$10  ;mask %00010000
.1fbb	d0 f4		               bne  wait
.1fbd	20 ad 1b	               jsr  pop
.1fc0			waitsstop
.1fc0	20 6e 1b	               jsr  push
.1fc3	20 ed f6	wait           jsr  k_stop  ;%01111111
.1fc6	d0 fb		               bne  wait
.1fc8	20 ad 1b	               jsr  pop
.1fcb			waitreturn
.1fcb	20 6e 1b	               jsr  push
.1fce	ad e8 1f	               lda  thecount
.1fd1	8d 00 04	               sta  scrnram
.1fd4	a9 02		               lda  #$02
.1fd6	8d 00 d8	               sta  colorram
.1fd9	20 e4 ff	nope           jsr  getin
.1fdc	c9 0d		nohex          cmp  #$0d
.1fde	d0 f9		               bne  nope
.1fe0	ee e8 1f	               inc  thecount
.1fe3	20 ad 1b	               jsr  pop
.1fe6	60		               rts
>1fe7	00		thekey         .byte   0
>1fe8	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  End of listing

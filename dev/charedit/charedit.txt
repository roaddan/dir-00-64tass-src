
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Tue Nov 14 12:45:39 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm

="20231113-164208"	version  = "20231113-164208"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

=$0400			scrnnewram     =    $0400
=14			charsdef       =    14
=9			grid_top       =    9
=1			grid_left      =    1
=16			grid_bot       =    grid_top + 7
=8			grid_right     =    grid_left + 7
=$03			mesgcol        =    vcyan
=$0d			menu1col       =    vvert1
=$0a			menu2col       =    vrose
=$01			flashcol       =    vblanc
.080d			main
.080d	20 5c 1d	               jsr  push
.0810	20 2e 1c	               jsr  scrmaninit
.0813	08		               php
.0814	48		               pha
.0815	a9 08		               lda  #$08
.0817	20 d2 ff	               jsr  $ffd2
.081a	68		               pla
.081b	28		               plp
.081c	20 9e 08	               jsr  splashscreen
.081f	a2 a6		               ldx #<menu_msg
.0821	a0 18		               ldy #>menu_msg
.0823	20 f4 1c	               jsr putscxy
.0826	20 7c 21	wait           jsr  getkey
.0829	c9 18		               cmp  #ctrl_x
.082b	d0 f9		               bne  wait
.082d	20 4e 1c	               jsr  cls
.0830	20 14 1c	               jsr  screendis
.0833	20 c4 0d	               jsr  copycharset
.0836	20 ae 0d	               jsr  setscreenptr
.0839	20 ee 08	               jsr  setdefaultchar
.083c	20 25 0e	               jsr  staticscreen
.083f	20 13 0d	               jsr  drawbitmap
.0842	a9 00		               lda  #$00
.0844	8d 8b 08	               sta  fkeyset
.0847	20 61 0e	               jsr  showfkeys
.084a	20 7a 14	               jsr  f8action
.084d	20 7a 14	               jsr  f8action
.0850	a9 00		               lda  #$00
.0852	20 21 1c	               jsr  screenena
.0855	20 b9 0a	               jsr  keyaction
.0858	20 4e 1c	               jsr  cls
.085b	08		               php
.085c	48		               pha
.085d	a9 0e		               lda  #b_lowercase
.085f	8d 4d 1c	               sta  characterset
.0862	20 d2 ff	               jsr  $ffd2
.0865	68		               pla
.0866	28		               plp
.0867	20 9e 08	               jsr  splashscreen
.086a	a2 2f		               ldx #<bye_msg
.086c	a0 1a		               ldy #>bye_msg
.086e	20 f4 1c	               jsr putscxy
.0871	a2 51		               ldx #<any_msg
.0873	a0 1a		               ldy #>any_msg
.0875	20 f4 1c	               jsr putscxy
.0878	20 7c 21	               jsr  getkey
.087b	20 66 fe	               jsr  k_warmboot
.087e	20 9b 1d	               jsr  pop
.0881	60		               rts
>0882	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>0886	08 04 02 01
>088a	00		editmode       .byte     0
>088b	00		fkeyset        .byte     0
>088c	00		currentchar    .byte     0
>088d	00		currentkey     .byte     0
>088e	00		bitmapoffset   .byte     0
>088f	00 00		mapaddr        .word     0
>0891	00 00		byteaddr       .word     0
>0893	00 00		gridaddr       .word     0
>0895	09		cursln         .byte     grid_top
>0896	01		curscl         .byte     grid_left

;******  Processing file: routines.asm

.0897			template
.0897	20 5c 1d	               jsr  push
.089a	20 9b 1d	               jsr  pop
.089d	60		               rts
.089e			splashscreen
.089e	20 5c 1d	               jsr  push
.08a1	20 4e 1c	               jsr  cls
.08a4	a2 bb		               ldx #<whoami0
.08a6	a0 18		               ldy #>whoami0
.08a8	20 f4 1c	               jsr putscxy
.08ab	a2 e0		               ldx #<whoami1
.08ad	a0 18		               ldy #>whoami1
.08af	20 f4 1c	               jsr putscxy
.08b2	a2 07		               ldx #<whoami2
.08b4	a0 19		               ldy #>whoami2
.08b6	20 f4 1c	               jsr putscxy
.08b9	a2 2c		               ldx #<whoami3
.08bb	a0 19		               ldy #>whoami3
.08bd	20 f4 1c	               jsr putscxy
.08c0	a2 51		               ldx #<whoami4
.08c2	a0 19		               ldy #>whoami4
.08c4	20 f4 1c	               jsr putscxy
.08c7	a2 76		               ldx #<whoami5
.08c9	a0 19		               ldy #>whoami5
.08cb	20 f4 1c	               jsr putscxy
.08ce	a2 9b		               ldx #<whoami6
.08d0	a0 19		               ldy #>whoami6
.08d2	20 f4 1c	               jsr putscxy
.08d5	a2 c0		               ldx #<whoami7
.08d7	a0 19		               ldy #>whoami7
.08d9	20 f4 1c	               jsr putscxy
.08dc	a2 e5		               ldx #<whoami8
.08de	a0 19		               ldy #>whoami8
.08e0	20 f4 1c	               jsr putscxy
.08e3	a2 0a		               ldx #<whoami9
.08e5	a0 1a		               ldy #>whoami9
.08e7	20 f4 1c	               jsr putscxy
.08ea	20 9b 1d	               jsr  pop
.08ed	60		               rts
.08ee			setdefaultchar
.08ee	20 5c 1d	               jsr  push
.08f1	a9 40		               lda  #$40
.08f3	8d 8d 08	               sta  currentkey
.08f6	aa		               tax
.08f7	bc 57 20	               ldy  asciitorom,x
.08fa	8c 8e 08	               sty  bitmapoffset
.08fd	20 72 09	               jsr  showkeyval
.0900	20 13 0d	               jsr  drawbitmap
.0903	20 5c 1d	               jsr  push
.0906	a2 0d		               ldx  #13
.0908	a0 0c		               ldy  #12
.090a	20 85 1c	               jsr  gotoxy
.090d	20 9b 1d	               jsr  pop
.0910	20 65 1c	               jsr  putch
.0913	20 5c 1d	               jsr  push
.0916	a2 11		               ldx  #17
.0918	a0 05		               ldy  #5
.091a	20 85 1c	               jsr  gotoxy
.091d	20 9b 1d	               jsr  pop
.0920	20 22 20	               jsr  atodec
.0923	20 5c 1d	               jsr  push
.0926	a2 26		isx            ldx  #<adec
.0928	a0 1f		isy            ldy  #>adec
.092a	20 6b 1c	               jsr  puts
.092d	20 9b 1d	               jsr  pull
.0930	20 9b 1d	               jsr  pop
.0933	60		               rts
.0934			setmenuacolor
.0934	20 5c 1d	               jsr  push
.0937	8d 74 1a	               sta  f1abutton
.093a	8d 8e 1a	               sta  f2abutton
.093d	8d a8 1a	               sta  f3abutton
.0940	8d c2 1a	               sta  f4abutton
.0943	8d dc 1a	               sta  f5abutton
.0946	8d f6 1a	               sta  f6abutton
.0949	8d 10 1b	               sta  f7abutton
.094c	8d 2a 1b	               sta  f8abutton
.094f	20 9b 1d	               jsr  pop
.0952	60		               rts
.0953			setmenubcolor
.0953	20 5c 1d	               jsr  push
.0956	8d 44 1b	               sta  f1bbutton
.0959	8d 5e 1b	               sta  f2bbutton
.095c	8d 78 1b	               sta  f3bbutton
.095f	8d 92 1b	               sta  f4bbutton
.0962	8d ac 1b	               sta  f5bbutton
.0965	8d c6 1b	               sta  f6bbutton
.0968	8d e0 1b	               sta  f7bbutton
.096b	8d fa 1b	               sta  f8bbutton
.096e	20 9b 1d	               jsr  pop
.0971	60		               rts
.0972			showkeyval
.0972	20 5c 1d	               jsr  push
.0975	20 5c 1d	               jsr  push
.0978	a2 01		               ldx  #1
.097a	a0 13		               ldy  #19
.097c	20 85 1c	               jsr  gotoxy
.097f	20 9b 1d	               jsr  pop
.0982	ad 8d 08	               lda  currentkey
.0985	20 65 1c	               jsr  putch
.0988	48		               pha
.0989	a9 3d		               lda  #'='
.098b	20 65 1c	               jsr  putch
.098e	a9 25		               lda  #'%'
.0990	20 65 1c	               jsr  putch
.0993	68		               pla
.0994	20 e8 1f	               jsr  putabin
.0997	20 5c 1d	               jsr  push
.099a	a2 01		               ldx  #1
.099c	a0 14		               ldy  #20
.099e	20 85 1c	               jsr  gotoxy
.09a1	20 9b 1d	               jsr  pop
.09a4	20 5c 1d	               jsr  push
.09a7	a2 73		isx            ldx  #<txt1
.09a9	a0 0a		isy            ldy  #>txt1
.09ab	20 6b 1c	               jsr  puts
.09ae	20 9b 1d	               jsr  pull
.09b1	a9 24		               lda  #'$'
.09b3	20 65 1c	               jsr  putch
.09b6	ad 8d 08	               lda  currentkey
.09b9	20 55 1f	               jsr  putahex
.09bc	20 5c 1d	               jsr  push
.09bf	a2 01		               ldx  #1
.09c1	a0 15		               ldy  #21
.09c3	20 85 1c	               jsr  gotoxy
.09c6	20 9b 1d	               jsr  pop
.09c9	20 5c 1d	               jsr  push
.09cc	a2 7e		isx            ldx  #<txt2
.09ce	a0 0a		isy            ldy  #>txt2
.09d0	20 6b 1c	               jsr  puts
.09d3	20 9b 1d	               jsr  pull
.09d6	a9 24		               lda  #'$'
.09d8	20 65 1c	               jsr  putch
.09db	ad 24 0e	               lda  bitmapaddr+1
.09de	20 55 1f	               jsr  putahex
.09e1	ad 23 0e	               lda  bitmapaddr
.09e4	20 55 1f	               jsr  putahex
.09e7	20 5c 1d	               jsr  push
.09ea	a2 01		               ldx  #1
.09ec	a0 16		               ldy  #22
.09ee	20 85 1c	               jsr  gotoxy
.09f1	20 9b 1d	               jsr  pop
.09f4	20 5c 1d	               jsr  push
.09f7	a2 89		isx            ldx  #<txt3
.09f9	a0 0a		isy            ldy  #>txt3
.09fb	20 6b 1c	               jsr  puts
.09fe	20 9b 1d	               jsr  pull
.0a01	a9 24		               lda  #'$'
.0a03	20 65 1c	               jsr  putch
.0a06	ad 8e 08	               lda  bitmapoffset
.0a09	20 55 1f	               jsr  putahex
.0a0c	20 5c 1d	               jsr  push
.0a0f	a2 01		               ldx  #1
.0a11	a0 17		               ldy  #23
.0a13	20 85 1c	               jsr  gotoxy
.0a16	20 9b 1d	               jsr  pop
.0a19	20 5c 1d	               jsr  push
.0a1c	a2 96		isx            ldx  #<txt4
.0a1e	a0 0a		isy            ldy  #>txt4
.0a20	20 6b 1c	               jsr  puts
.0a23	20 9b 1d	               jsr  pull
.0a26	a9 24		               lda  #'$'
.0a28	20 65 1c	               jsr  putch
.0a2b	ad 90 08	               lda  mapaddr+1
.0a2e	20 55 1f	               jsr  putahex
.0a31	ad 8f 08	               lda  mapaddr
.0a34	20 55 1f	               jsr  putahex
.0a37	20 5c 1d	               jsr  push
.0a3a	a2 01		               ldx  #1
.0a3c	a0 18		               ldy  #24
.0a3e	20 85 1c	               jsr  gotoxy
.0a41	20 9b 1d	               jsr  pop
.0a44	20 5c 1d	               jsr  push
.0a47	a2 a1		isx            ldx  #<txt5
.0a49	a0 0a		isy            ldy  #>txt5
.0a4b	20 6b 1c	               jsr  puts
.0a4e	20 9b 1d	               jsr  pull
.0a51	ad 96 08	               lda  curscl
.0a54	20 55 1f	               jsr  putahex
.0a57	a9 da		               lda  #$da
.0a59	20 65 1c	               jsr  putch
.0a5c	ad 95 08	               lda  cursln
.0a5f	20 55 1f	               jsr  putahex
.0a62	20 9b 1d	               jsr  pop
.0a65	60		               rts
>0a66	50 45 54 53	txt0           .null     "petscii :   "
>0a6a	43 49 49 20 3a 20 20 20 00
>0a73	4b 45 59 20	txt1           .null     "key code: "
>0a77	43 4f 44 45 3a 20 00
>0a7e	42 49 54 4d	txt2           .null     "bitmap..: "
>0a82	41 50 2e 2e 3a 20 00
>0a89	4f 46 46 53	txt3           .null     "offset..:   "
>0a8d	45 54 2e 2e 3a 20 20 20 00
>0a96	4d 41 50 41	txt4           .null     "mapaddr.: "
>0a9a	44 44 52 2e 3a 20 00
>0aa1	43 55 52 53	txt5           .null     "cursval.: "
>0aa5	56 41 4c 2e 3a 20 00
>0aac	53 54 41 43	txt6           .null     "stack......:"
>0ab0	4b 2e 2e 2e 2e 2e 2e 3a 00
.0ab9			keyaction
.0ab9	20 5c 1d	               jsr  push
.0abc	20 7c 21	loop           jsr  getkey
.0abf	c9 85		f1             cmp  #key_f1
.0ac1	d0 03		               bne  f2
.0ac3	4c 2f 0b	               jmp  dof1
.0ac6	c9 89		f2             cmp  #key_f2
.0ac8	d0 03		               bne  f3
.0aca	4c 35 0b	               jmp  dof2
.0acd	c9 86		f3             cmp  #key_f3
.0acf	d0 03		               bne  f4
.0ad1	4c 3b 0b	               jmp  dof3
.0ad4	c9 8a		f4             cmp  #key_f4
.0ad6	d0 03		               bne  f5
.0ad8	4c 41 0b	               jmp  dof4
.0adb	c9 87		f5             cmp  #key_f5
.0add	d0 03		               bne  f6
.0adf	4c 47 0b	               jmp  dof5
.0ae2	c9 8b		f6             cmp  #key_f6
.0ae4	d0 03		               bne  f7
.0ae6	4c 4d 0b	               jmp  dof6
.0ae9	c9 88		f7             cmp  #key_f7
.0aeb	d0 03		               bne  f8
.0aed	4c 53 0b	               jmp  dof7
.0af0	c9 8c		f8             cmp  #key_f8
.0af2	d0 03		               bne  ctrlx
.0af4	4c 59 0b	               jmp  dof8
.0af7	c9 18		ctrlx          cmp  #ctrl_x
.0af9	d0 03		               bne  ishex14
.0afb	4c 5f 0b	               jmp  doquit
.0afe	c9 14		ishex14        cmp  #$14
.0b00	d0 03		               bne  ishex12
.0b02	4c bc 0a	               jmp  loop
.0b05	c9 12		ishex12        cmp  #$12
.0b07	d0 03		               bne  reste
.0b09	4c bc 0a	               jmp  loop
.0b0c			reste
.0b0c	20 5c 1d	               jsr  push
.0b0f	a2 0d		               ldx  #13
.0b11	a0 0c		               ldy  #12
.0b13	20 85 1c	               jsr  gotoxy
.0b16	20 9b 1d	               jsr  pop
.0b19	20 65 1c	               jsr  putch
.0b1c	8d 8d 08	               sta  currentkey
.0b1f	aa		               tax
.0b20	bc 57 20	               ldy  asciitorom,x
.0b23	8c 8e 08	               sty  bitmapoffset
.0b26	20 72 09	               jsr  showkeyval
.0b29	20 13 0d	               jsr  drawbitmap
.0b2c	4c bc 0a	               jmp  loop
.0b2f	20 de 0f	dof1           jsr  f1action  ;edit/reverse
.0b32	4c bc 0a	               jmp  loop
.0b35	20 af 10	dof2           jsr  f2action  ;save/flip vert
.0b38	4c bc 0a	               jmp  loop
.0b3b	20 4d 11	dof3           jsr  f3action  ;load/flip horz
.0b3e	4c bc 0a	               jmp  loop
.0b41	20 eb 11	dof4           jsr  f4action  ;copy/scroll r
.0b44	4c bc 0a	               jmp  loop
.0b47	20 89 12	dof5           jsr  f5action  ;clear/scroll l
.0b4a	4c bc 0a	               jmp  loop
.0b4d	20 2d 13	dof6           jsr  f6action  ;fill;/scroll up
.0b50	4c bc 0a	               jmp  loop
.0b53	20 d1 13	dof7           jsr  f7action  ;clear;/scroll down
.0b56	4c bc 0a	               jmp  loop
.0b59	20 7a 14	dof8           jsr  f8action  ; function
.0b5c	4c bc 0a	               jmp  loop
.0b5f	20 9b 1d	doquit         jsr  pop
.0b62	60		               rts
.0b63			editor
.0b63	20 5c 1d	               jsr  push
.0b66	20 5c 1d	               jsr  push
.0b69	a2 81		               ldx  #<blankmsg
.0b6b	a0 16		               ldy  #>blankmsg
.0b6d	20 f4 1c	               jsr  putscxy
.0b70	a2 a6		               ldx  #<exit_msg
.0b72	a0 18		               ldy  #>exit_msg
.0b74	20 f4 1c	               jsr  putscxy
.0b77	20 9b 1d	               jsr  pop
.0b7a	20 5c 1d	               jsr  push
.0b7d	a2 81		               ldx  #<blankmsg
.0b7f	a0 16		               ldy  #>blankmsg
.0b81	20 f4 1c	               jsr  putscxy
.0b84	a2 ac		               ldx  #<edit_msg
.0b86	a0 16		               ldy  #>edit_msg
.0b88	20 f4 1c	               jsr  putscxy
.0b8b	20 9b 1d	               jsr  pop
.0b8e	a9 0c		               lda  #vgris1
.0b90	20 34 09	               jsr  setmenuacolor
.0b93	a9 0d		               lda  #vvert1
.0b95	8d 74 1a	               sta  f1abutton
.0b98	20 61 0e	               jsr  showfkeys
.0b9b	20 cf 0c	               jsr  setcurs
.0b9e	ad 8d 08	               lda  currentkey
.0ba1	20 5c 1d	               jsr  push
.0ba4	a2 11		               ldx  #17
.0ba6	a0 05		               ldy  #5
.0ba8	20 85 1c	               jsr  gotoxy
.0bab	20 9b 1d	               jsr  pop
.0bae	20 22 20	               jsr  atodec
.0bb1	20 5c 1d	               jsr  push
.0bb4	a2 26		isx            ldx  #<adec
.0bb6	a0 1f		isy            ldy  #>adec
.0bb8	20 6b 1c	               jsr  puts
.0bbb	20 9b 1d	               jsr  pull
.0bbe	20 13 0d	               jsr  drawbitmap
.0bc1	20 7c 21	ed_loop        jsr  getkey
.0bc4	c9 91		cu             cmp  #cursu
.0bc6	d0 03		               bne  cd
.0bc8	4c 4c 0c	               jmp  do_up
.0bcb	c9 11		cd             cmp  #cursd
.0bcd	d0 03		               bne  cl
.0bcf	4c 5f 0c	               jmp  do_down
.0bd2	c9 9d		cl             cmp  #cursl
.0bd4	d0 03		               bne  cr
.0bd6	4c 72 0c	               jmp  do_left
.0bd9	c9 1d		cr             cmp  #cursr
.0bdb	d0 03		               bne  cx
.0bdd	4c 85 0c	               jmp  do_right
.0be0	c9 18		cx             cmp  #ctrl_x
.0be2	d0 03		               bne  sp
.0be4	4c a1 0c	               jmp  do_ctrlx
.0be7	c9 20		sp             cmp  #$20
.0be9	d0 03		               bne  ishex14
.0beb	4c 98 0c	               jmp  do_swap
.0bee	c9 14		ishex14        cmp  #$14
.0bf0	d0 03		               bne  ishex12
.0bf2	4c 98 0c	               jmp  do_swap
.0bf5	c9 12		ishex12        cmp  #$12
.0bf7	d0 03		               bne  rest
.0bf9	4c 98 0c	               jmp  do_swap
.0bfc			rest
.0bfc	20 5c 1d	               jsr  push
.0bff	a2 0d		               ldx  #13
.0c01	a0 0c		               ldy  #12
.0c03	20 85 1c	               jsr  gotoxy
.0c06	20 9b 1d	               jsr  pop
.0c09	20 65 1c	               jsr  putch
.0c0c	8d 8d 08	               sta  currentkey
.0c0f	aa		               tax
.0c10	bc 57 20	               ldy  asciitorom,x
.0c13	8c 8e 08	               sty  bitmapoffset
.0c16	20 72 09	               jsr  showkeyval
.0c19	20 13 0d	               jsr  drawbitmap
.0c1c	20 5c 1d	               jsr  push
.0c1f	a2 0d		               ldx  #13
.0c21	a0 0c		               ldy  #12
.0c23	20 85 1c	               jsr  gotoxy
.0c26	20 9b 1d	               jsr  pop
.0c29	20 65 1c	               jsr  putch
.0c2c	20 5c 1d	               jsr  push
.0c2f	a2 11		               ldx  #17
.0c31	a0 05		               ldy  #5
.0c33	20 85 1c	               jsr  gotoxy
.0c36	20 9b 1d	               jsr  pop
.0c39	20 22 20	               jsr  atodec
.0c3c	20 5c 1d	               jsr  push
.0c3f	a2 26		isx            ldx  #<adec
.0c41	a0 1f		isy            ldy  #>adec
.0c43	20 6b 1c	               jsr  puts
.0c46	20 9b 1d	               jsr  pull
.0c49	4c 9e 0c	               jmp  totop
.0c4c	ad 95 08	do_up          lda  cursln
.0c4f	c9 09		               cmp  #grid_top
.0c51	f0 4b		               beq  totop
.0c53	20 f1 0c	               jsr  clrcurs
.0c56	ce 95 08	               dec  cursln
.0c59	20 cf 0c	               jsr  setcurs
.0c5c	4c 9e 0c	               jmp  totop
.0c5f	ad 95 08	do_down        lda  cursln
.0c62	c9 10		               cmp  #grid_bot
.0c64	f0 38		               beq  totop
.0c66	20 f1 0c	               jsr  clrcurs
.0c69	ee 95 08	               inc  cursln
.0c6c	20 cf 0c	               jsr  setcurs
.0c6f	4c 9e 0c	               jmp  totop
.0c72	ad 96 08	do_left        lda  curscl
.0c75	c9 01		               cmp  #grid_left
.0c77	f0 25		               beq  totop
.0c79	20 f1 0c	               jsr  clrcurs
.0c7c	ce 96 08	               dec  curscl
.0c7f	20 cf 0c	               jsr  setcurs
.0c82	4c 9e 0c	               jmp  totop
.0c85	ad 96 08	do_right       lda  curscl
.0c88	c9 08		               cmp  #grid_right
.0c8a	f0 12		               beq  totop
.0c8c	20 f1 0c	               jsr  clrcurs
.0c8f	ee 96 08	               inc  curscl
.0c92	20 cf 0c	               jsr  setcurs
.0c95	4c 9e 0c	               jmp  totop
.0c98	20 a8 0c	do_swap        jsr  do_eor
.0c9b	20 13 0d	               jsr  drawbitmap
.0c9e	4c c1 0b	totop          jmp  ed_loop
.0ca1	20 f1 0c	do_ctrlx       jsr  clrcurs
.0ca4	20 9b 1d	               jsr  pop
.0ca7	60		               rts
.0ca8			do_eor
.0ca8	20 5c 1d	               jsr  push
.0cab	ad 8f 08	               lda  mapaddr
.0cae	85 fd		               sta  zpage2
.0cb0	ad 90 08	               lda  mapaddr+1
.0cb3	85 fe		               sta  zpage2+1
.0cb5	ae 95 08	               ldx  cursln     ; calcul de
.0cb8	ca		               dex            ; l'offset de
.0cb9	8a		               txa            ; la
.0cba	29 f7		               and  #$f7      ; ligne
.0cbc	a8		               tay
.0cbd	ae 96 08	               ldx  curscl
.0cc0	ca		               dex
.0cc1	bd 82 08	               lda  eorval,x
.0cc4	51 fd		               eor  (zpage2),y
.0cc6	20 72 09	               jsr  showkeyval
.0cc9	91 fd		               sta  (zpage2),y
.0ccb	20 9b 1d	               jsr  pop
.0cce	60		               rts
.0ccf			setcurs
.0ccf	20 5c 1d	               jsr  push
.0cd2	a2 01		               ldx  #grid_left
.0cd4	ac 95 08	               ldy  cursln
.0cd7	20 85 1c	               jsr  gotoxy
.0cda	a9 da		               lda  #$da
.0cdc	20 65 1c	               jsr  putch
.0cdf	ae 96 08	               ldx  curscl
.0ce2	e8		               inx
.0ce3	a0 08		               ldy  #grid_top-1
.0ce5	20 85 1c	               jsr  gotoxy
.0ce8	a9 da		               lda  #$da
.0cea	20 65 1c	               jsr  putch
.0ced	20 9b 1d	               jsr  pop
.0cf0	60		               rts
.0cf1			clrcurs
.0cf1	20 5c 1d	               jsr  push
.0cf4	a2 01		               ldx  #grid_left
.0cf6	ac 95 08	               ldy  cursln
.0cf9	20 85 1c	               jsr  gotoxy
.0cfc	a9 20		               lda  #$20
.0cfe	20 65 1c	               jsr  putch
.0d01	ae 96 08	               ldx  curscl
.0d04	e8		               inx
.0d05	a0 08		               ldy  #grid_top-1
.0d07	20 85 1c	               jsr  gotoxy
.0d0a	a9 20		               lda  #$20
.0d0c	20 65 1c	               jsr  putch
.0d0f	20 9b 1d	               jsr  pop
.0d12	60		               rts
.0d13			drawbitmap
.0d13	20 5c 1d	               jsr  push
.0d16	20 58 0d	               jsr  calcmapaddr
.0d19	ad 8f 08	               lda  mapaddr        ; on pointe sur la table des bitmaps
.0d1c	85 fb		               sta  zpage1
.0d1e	ad 90 08	               lda  mapaddr+1
.0d21	85 fc		               sta  zpage1+1
.0d23	a0 00		drawchar       ldy  #$00
.0d25	a2 09		               ldx  #grid_top      ;on replace la ...
.0d27	8e 30 0d	               stx  isy+1          ;ligne de départ
.0d2a	20 5c 1d	nextline       jsr  push
.0d2d	a2 02		               ldx  #grid_left+1        ; la colonne
.0d2f	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.0d31	20 85 1c	               jsr  gotoxy
.0d34	20 9b 1d	               jsr  pop
.0d37	b1 fb		               lda  (zpage1),y     ; on li une ligne
.0d39	20 c6 1f	               jsr  atobin
.0d3c	20 87 0d	               jsr  abintograph
.0d3f	20 5c 1d	               jsr  push
.0d42	a2 1d		isx            ldx  #<abin
.0d44	a0 1f		isy            ldy  #>abin
.0d46	20 6b 1c	               jsr  puts
.0d49	20 9b 1d	               jsr  pull
.0d4c	ee 30 0d	               inc  isy+1
.0d4f	c8		               iny
.0d50	c0 08		               cpy  #$08
.0d52	30 d6		               bmi  nextline
.0d54	20 9b 1d	               jsr  pop
.0d57	60		               rts
.0d58			calcmapaddr
.0d58	20 5c 1d	               jsr  push
.0d5b	ad 23 0e	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0d5e	85 fb		               sta  zpage1
.0d60	ad 24 0e	               lda  bitmapaddr+1
.0d63	85 fc		               sta  zpage1+1
.0d65	ae 8e 08	               ldx  bitmapoffset
.0d68	e0 00		               cpx  #$00
.0d6a	f0 08		               beq  thesame         ; sommes nous déja à 0
.0d6c	a9 08		addagain       lda  #8
.0d6e	20 aa 0f	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0d71	ca		               dex                 ; pour chaque caracteres
.0d72	d0 f8		               bne  addagain
.0d74	48		thesame        pha
.0d75	a5 fb		               lda  zpage1
.0d77	8d 8f 08	               sta  mapaddr
.0d7a	a5 fc		               lda  zpage1+1
.0d7c	8d 90 08	               sta  mapaddr+1
.0d7f	68		               pla
.0d80	20 72 09	               jsr  showkeyval
.0d83	20 9b 1d	out            jsr  pop
.0d86	60		               rts
.0d87			abintograph
.0d87	20 5c 1d	               jsr  push
.0d8a	a9 1d		               lda  #<abin
.0d8c	85 fb		               sta  zpage1
.0d8e	a9 1f		               lda  #>abin+1
.0d90	85 fc		               sta  zpage1+1
.0d92	a0 00		               ldy  #$00
.0d94	b1 fb		nextbit        lda  (zpage1),y
.0d96	c9 30		               cmp  #$30
.0d98	f0 07		               beq  itszero
.0d9a	a9 d1		itsone         lda  #$d1
.0d9c	91 fb		               sta  (zpage1),y
.0d9e	4c a5 0d	               jmp  next
.0da1	a9 2e		itszero        lda  #$2e
.0da3	91 fb		               sta  (zpage1),y
.0da5	c8		next           iny
.0da6	c0 08		               cpy  #$08
.0da8	30 ea		               bmi  nextbit
.0daa	20 9b 1d	               jsr  pop
.0dad	60		               rts
.0dae			setscreenptr
.0dae	20 5c 1d	               jsr  push
.0db1	a9 08		               lda  #$08      ; basic commande to disable ...
.0db3	20 d2 ff	               jsr  chrout    ; ... character set change.
.0db6	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.0db9	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.0dbb	09 0e		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.0dbd	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.0dc0	20 9b 1d	               jsr  pop
.0dc3	60		               rts
.0dc4			copycharset
.0dc4	20 5c 1d	               jsr  push
.0dc7	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0dca	29 fe		               and  #%11111110     ;254
.0dcc	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0dcf	a5 01		               lda  u6510map       ;$01
.0dd1	29 fb		               and  #%11111011     ;251
.0dd3	85 01		               sta  u6510map       ;$01
.0dd5	20 ea 0d	               jsr  memcopy
.0dd8	a5 01		               lda  u6510map       ;$01
.0dda	09 04		               ora  #%00000100
.0ddc	85 01		               sta  u6510map       ;$01
.0dde	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0de1	09 01		               ora  #%00000001     ;254
.0de3	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0de6	20 9b 1d	               jsr  pop
.0de9	60		               rts
.0dea			memcopy
.0dea	20 5c 1d	               jsr  push
.0ded	ad 1f 0e	               lda  startaddr
.0df0	85 fb		               sta  zpage1
.0df2	ad 20 0e	               lda  startaddr+1
.0df5	85 fc		               sta  zpage1+1
.0df7	ad 23 0e	               lda  bitmapaddr
.0dfa	85 fd		               sta  zpage2
.0dfc	ad 24 0e	               lda  bitmapaddr+1
.0dff	85 fe		               sta  zpage2+1
.0e01	a0 00		               ldy  #$00
.0e03	b1 fb		onemore        lda  (zpage1),y
.0e05	91 fd		               sta  (zpage2),y
.0e07	20 63 1e	               jsr  inczp1
.0e0a	20 7b 1e	               jsr  inczp2
.0e0d	a5 fc		               lda  zpage1+1
.0e0f	cd 22 0e	               cmp  stopaddr+1
.0e12	d0 ef		               bne  onemore
.0e14	a5 fb		               lda  zpage1
.0e16	cd 21 0e	               cmp  stopaddr
.0e19	d0 e8		               bne  onemore
.0e1b	20 9b 1d	               jsr  pop
.0e1e	60		               rts
=14336			bitmapmem =    charsdef * 1024     ;Calcul de la position ram des caracteres.
=61440			mstopaddr =    $d000+(4*$800)
>0e1f	00 d0		startaddr      .word     $d000               ; 53248
>0e21	00 f0		stopaddr       .word     mstopaddr           ; 55296
>0e23	00 38		bitmapaddr     .word     bitmapmem           ; $3000, 12288
.0e25			staticscreen
.0e25	48		               pha
.0e26	a9 0c		               lda  #vgris1
.0e28	8d 20 d0	               sta  $d020
.0e2b	68		               pla
.0e2c	48		               pha
.0e2d	a9 0b		               lda  #vgris
.0e2f	8d 21 d0	               sta  $d021
.0e32	68		               pla
.0e33	20 01 0f	               jsr  showlines
.0e36	20 e2 0e	               jsr  showallchars
.0e39	20 49 0f	               jsr  showgrid
.0e3c	20 61 0e	               jsr  showfkeys
.0e3f	20 5c 1d	               jsr  push
.0e42	a2 81		               ldx  #<blankmsg
.0e44	a0 16		               ldy  #>blankmsg
.0e46	20 f4 1c	               jsr  putscxy
.0e49	a2 91		               ldx  #<quit_msg
.0e4b	a0 18		               ldy  #>quit_msg
.0e4d	20 f4 1c	               jsr  putscxy
.0e50	20 9b 1d	               jsr  pop
.0e53	20 5c 1d	               jsr  push
.0e56	a2 00		               ldx  #0
.0e58	a0 07		               ldy  #7
.0e5a	20 85 1c	               jsr  gotoxy
.0e5d	20 9b 1d	               jsr  pop
.0e60	60		               rts
.0e61			showfkeys
.0e61	20 5c 1d	               jsr  push
.0e64	ad 8b 08	               lda  fkeyset
.0e67	c9 00		               cmp  #$0
.0e69	d0 3b		               bne  secondks
.0e6b	a2 74		               ldx #<f1abutton
.0e6d	a0 1a		               ldy #>f1abutton
.0e6f	20 f4 1c	               jsr putscxy
.0e72	a2 8e		               ldx #<f2abutton
.0e74	a0 1a		               ldy #>f2abutton
.0e76	20 f4 1c	               jsr putscxy
.0e79	a2 a8		               ldx #<f3abutton
.0e7b	a0 1a		               ldy #>f3abutton
.0e7d	20 f4 1c	               jsr putscxy
.0e80	a2 c2		               ldx #<f4abutton
.0e82	a0 1a		               ldy #>f4abutton
.0e84	20 f4 1c	               jsr putscxy
.0e87	a2 dc		               ldx #<f5abutton
.0e89	a0 1a		               ldy #>f5abutton
.0e8b	20 f4 1c	               jsr putscxy
.0e8e	a2 f6		               ldx #<f6abutton
.0e90	a0 1a		               ldy #>f6abutton
.0e92	20 f4 1c	               jsr putscxy
.0e95	a2 10		               ldx #<f7abutton
.0e97	a0 1b		               ldy #>f7abutton
.0e99	20 f4 1c	               jsr putscxy
.0e9c	a2 2a		               ldx #<f8abutton
.0e9e	a0 1b		               ldy #>f8abutton
.0ea0	20 f4 1c	               jsr putscxy
.0ea3	4c de 0e	               jmp end
.0ea6			secondks
.0ea6	a2 44		               ldx #<f1bbutton
.0ea8	a0 1b		               ldy #>f1bbutton
.0eaa	20 f4 1c	               jsr putscxy
.0ead	a2 5e		               ldx #<f2bbutton
.0eaf	a0 1b		               ldy #>f2bbutton
.0eb1	20 f4 1c	               jsr putscxy
.0eb4	a2 78		               ldx #<f3bbutton
.0eb6	a0 1b		               ldy #>f3bbutton
.0eb8	20 f4 1c	               jsr putscxy
.0ebb	a2 92		               ldx #<f4bbutton
.0ebd	a0 1b		               ldy #>f4bbutton
.0ebf	20 f4 1c	               jsr putscxy
.0ec2	a2 ac		               ldx #<f5bbutton
.0ec4	a0 1b		               ldy #>f5bbutton
.0ec6	20 f4 1c	               jsr putscxy
.0ec9	a2 c6		               ldx #<f6bbutton
.0ecb	a0 1b		               ldy #>f6bbutton
.0ecd	20 f4 1c	               jsr putscxy
.0ed0	a2 e0		               ldx #<f7bbutton
.0ed2	a0 1b		               ldy #>f7bbutton
.0ed4	20 f4 1c	               jsr putscxy
.0ed7	a2 fa		               ldx #<f8bbutton
.0ed9	a0 1b		               ldy #>f8bbutton
.0edb	20 f4 1c	               jsr putscxy
.0ede	20 9b 1d	end            jsr  pop
.0ee1	60		               rts
.0ee2			showallchars
.0ee2	20 5c 1d	               jsr push
.0ee5	20 5c 1d	               jsr  push
.0ee8	a2 00		               ldx  #0
.0eea	a0 00		               ldy  #0
.0eec	20 85 1c	               jsr  gotoxy
.0eef	20 9b 1d	               jsr  pop
.0ef2	a2 00		               ldx  #$00
.0ef4	8a		nextc          txa
.0ef5	9d 00 04	               sta  scrnnewram,x
.0ef8	e8		               inx
.0ef9	e0 80		               cpx  #$80
.0efb	d0 f7		               bne  nextc
.0efd	20 9b 1d	               jsr  pop
.0f00	60		               rts
.0f01			showlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.0f01	20 5c 1d	               jsr  push
.0f04	a2 28		               ldx  #40
.0f06	a9 40		               lda  #64
.0f08	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.0f0b	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.0f0e	ca		               dex
.0f0f	e0 10		hline          cpx  #vlinepos
.0f11	10 03		               bpl  notyet
.0f13	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.0f16	e0 00		notyet         cpx  #$00
.0f18	d0 ee		               bne  nextl
.0f1a	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.0f1c	85 fb		               sta  zpage1
.0f1e	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.0f20	85 fc		               sta  zpage1+1
.0f22	a0 00		               ldy  #0
.0f24	a9 72		               lda  #114
.0f26	91 fb		               sta  (zpage1),y
.0f28	20 b8 0f	               jsr  zp1add40
.0f2b	a2 12		               ldx  #24-hline2
.0f2d	a9 5d		               lda  #93
.0f2f	91 fb		another93      sta  (zpage1),y
.0f31	20 b8 0f	               jsr  zp1add40
.0f34	ca		               dex
.0f35	d0 f8		               bne  another93
.0f37	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.0f39	85 fb		               sta  zpage1
.0f3b	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.0f3d	85 fc		               sta  zpage1+1
.0f3f	a0 00		               ldy  #0
.0f41	a9 73		               lda  #115
.0f43	91 fb		               sta  (zpage1),y
.0f45	20 9b 1d	               jsr  pop
.0f48	60		               rts
.0f49			showgrid
.0f49	20 5c 1d	               jsr  push
.0f4c	20 14 1c	               jsr  screendis
.0f4f	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.0f51	85 fb		               sta  zpage1
.0f53	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.0f55	85 fc		               sta  zpage1+1
.0f57	a2 08		               ldx  #8
.0f59	a9 65		nextbox        lda  #101
.0f5b	a0 09		               ldy  #9
.0f5d	91 fb		               sta  (zpage1),y
.0f5f	88		               dey
.0f60	a9 2e		               lda  #$2e
.0f62	91 fb		nextcol        sta  (zpage1),y
.0f64	88		               dey
.0f65	d0 fb		               bne  nextcol
.0f67	20 b8 0f	               jsr  zp1add40
.0f6a	ca		               dex
.0f6b	d0 ec		               bne  nextbox
.0f6d	a0 08		               ldy  #8
.0f6f	a9 77		               lda  #119
.0f71	91 fb		nextlin        sta  (zpage1),y
.0f73	88		               dey
.0f74	d0 fb		               bne  nextlin
.0f76	a9 3e		               lda  #$3e
.0f78	8d eb 05	               sta  scrnnewram+(40*(12))+11
.0f7b	a9 70		               lda  #$70                     ;+
.0f7d	8d c4 05	               sta  scrnnewram+(40*(11))+12
.0f80	a9 43		               lda  #$43                     ;-
.0f82	8d c5 05	               sta  scrnnewram+(40*(11))+13
.0f85	a9 6e		               lda  #$6e                     ;+
.0f87	8d c6 05	               sta  scrnnewram+(40*(11))+14
.0f8a	a9 5d		               lda  #$5d                     ;|
.0f8c	8d ec 05	               sta  scrnnewram+(40*(12))+12
.0f8f	a9 5d		               lda  #$5d                     ;|
.0f91	8d ee 05	               sta  scrnnewram+(40*(12))+14
.0f94	a9 6d		               lda  #$6d                     ;+
.0f96	8d 14 06	               sta  scrnnewram+(40*(13))+12
.0f99	a9 43		               lda  #$43                     ;-
.0f9b	8d 15 06	               sta  scrnnewram+(40*(13))+13
.0f9e	a9 7d		               lda  #$7d                     ;+
.0fa0	8d 16 06	               sta  scrnnewram+(40*(13))+14
.0fa3	20 21 1c	               jsr screenena
.0fa6	20 9b 1d	               jsr  pop
.0fa9	60		               rts
.0faa			zp1addnum
.0faa	08		               php
.0fab	48		               pha
.0fac	18		               clc
.0fad	65 fb		               adc  zpage1
.0faf	90 02		               bcc  nocarry
.0fb1	e6 fc		               inc  zpage1+1
.0fb3	85 fb		nocarry        sta  zpage1
.0fb5	68		               pla
.0fb6	28		               plp
.0fb7	60		               rts
.0fb8			zp1add40
.0fb8	08		               php
.0fb9	48		               pha
.0fba	18		               clc
.0fbb	a5 fb		               lda  zpage1
.0fbd	69 28		               adc  #40
.0fbf	90 02		               bcc  nocarry
.0fc1	e6 fc		               inc  zpage1+1
.0fc3	85 fb		nocarry        sta  zpage1
.0fc5	68		               pla
.0fc6	28		               plp
.0fc7	60		               rts
.0fc8			delay
.0fc8	20 5c 1d	               jsr  push
.0fcb	a9 00		               lda  #$0
.0fcd	aa		               tax
.0fce	a8		               tay
.0fcf	ca		xagain         dex
.0fd0	ca		               dex
.0fd1	88		yagain         dey
.0fd2	c0 00		               cpy  #$00
.0fd4	d0 fb		               bne  yagain
.0fd6	e0 00		               cpx  #$00
.0fd8	d0 f5		               bne  xagain
.0fda	20 9b 1d	               jsr  pop
.0fdd	60		               rts
.0fde			f1action
.0fde	48		               pha
.0fdf	a9 ff		               lda  #$ff
.0fe1	8d 8a 08	               sta  editmode
.0fe4	ad 8b 08	               lda  fkeyset
.0fe7	d0 7a		               bne  menub
.0fe9	20 5c 1d	               jsr  push
.0fec	a2 81		               ldx  #<blankmsg
.0fee	a0 16		               ldy  #>blankmsg
.0ff0	20 f4 1c	               jsr  putscxy
.0ff3	a2 ac		               ldx  #<f1a_msg
.0ff5	a0 16		               ldy  #>f1a_msg
.0ff7	20 f4 1c	               jsr  putscxy
.0ffa	20 9b 1d	               jsr  pop
.0ffd	08		               php
.0ffe	48		               pha
.0fff	8a		               txa
.1000	48		               pha
.1001	ad 74 1a	               lda  f1abutton
.1004	48		               pha
.1005	a9 92		               lda  #146
.1007	8d 83 1a	               sta  f1abutton+15
.100a	a9 01		               lda  #flashcol
.100c	8d 74 1a	               sta  f1abutton
.100f	a2 74		               ldx  #<f1abutton
.1011	a0 1a		               ldy  #>f1abutton
.1013	20 f4 1c	               jsr  putscxy
.1016	20 c8 0f	               jsr  delay
.1019	a9 12		               lda  #18
.101b	8d 83 1a	               sta  f1abutton+15
.101e	68		               pla
.101f	8d 74 1a	               sta  f1abutton
.1022	a2 74		               ldx  #<f1abutton
.1024	a0 1a		               ldy  #>f1abutton
.1026	20 f4 1c	               jsr  putscxy
.1029	68		               pla
.102a	aa		               tax
.102b	68		               pla
.102c	28		               plp
.102d	20 63 0b	               jsr  editor
.1030	20 5c 1d	               jsr  push
.1033	a2 81		               ldx  #<blankmsg
.1035	a0 16		               ldy  #>blankmsg
.1037	20 f4 1c	               jsr  putscxy
.103a	a2 91		               ldx  #<quit_msg
.103c	a0 18		               ldy  #>quit_msg
.103e	20 f4 1c	               jsr  putscxy
.1041	20 9b 1d	               jsr  pop
.1044	20 5c 1d	               jsr  push
.1047	a2 81		               ldx  #<blankmsg
.1049	a0 16		               ldy  #>blankmsg
.104b	20 f4 1c	               jsr  putscxy
.104e	a2 5b		               ldx  #<menua_msg
.1050	a0 18		               ldy  #>menua_msg
.1052	20 f4 1c	               jsr  putscxy
.1055	20 9b 1d	               jsr  pop
.1058	a9 0d		               lda  #menu1col
.105a	20 34 09	               jsr  setmenuacolor
.105d	20 61 0e	               jsr  showfkeys
.1060	4c ad 10	               jmp  out
.1063			menub
.1063	20 5c 1d	               jsr  push
.1066	a2 81		               ldx  #<blankmsg
.1068	a0 16		               ldy  #>blankmsg
.106a	20 f4 1c	               jsr  putscxy
.106d	a2 83		               ldx  #<f1b_msg
.106f	a0 17		               ldy  #>f1b_msg
.1071	20 f4 1c	               jsr  putscxy
.1074	20 9b 1d	               jsr  pop
.1077	08		               php
.1078	48		               pha
.1079	8a		               txa
.107a	48		               pha
.107b	ad 44 1b	               lda  f1bbutton
.107e	48		               pha
.107f	a9 92		               lda  #146
.1081	8d 53 1b	               sta  f1bbutton+15
.1084	a9 01		               lda  #flashcol
.1086	8d 44 1b	               sta  f1bbutton
.1089	a2 44		               ldx  #<f1bbutton
.108b	a0 1b		               ldy  #>f1bbutton
.108d	20 f4 1c	               jsr  putscxy
.1090	20 c8 0f	               jsr  delay
.1093	a9 12		               lda  #18
.1095	8d 53 1b	               sta  f1bbutton+15
.1098	68		               pla
.1099	8d 44 1b	               sta  f1bbutton
.109c	a2 44		               ldx  #<f1bbutton
.109e	a0 1b		               ldy  #>f1bbutton
.10a0	20 f4 1c	               jsr  putscxy
.10a3	68		               pla
.10a4	aa		               tax
.10a5	68		               pla
.10a6	28		               plp
.10a7	20 4e 16	               jsr  flipvert
.10aa	20 13 0d	               jsr  drawbitmap
.10ad	68		out            pla
.10ae	60		               rts
.10af			f2action
.10af	48		               pha
.10b0	a9 00		               lda  #$0
.10b2	8d 8a 08	               sta  editmode
.10b5	ad 8b 08	               lda  fkeyset
.10b8	d0 47		               bne  menub
.10ba	20 5c 1d	               jsr  push
.10bd	a2 81		               ldx  #<blankmsg
.10bf	a0 16		               ldy  #>blankmsg
.10c1	20 f4 1c	               jsr  putscxy
.10c4	a2 c7		               ldx  #<f2a_msg
.10c6	a0 16		               ldy  #>f2a_msg
.10c8	20 f4 1c	               jsr  putscxy
.10cb	20 9b 1d	               jsr  pop
.10ce	08		               php
.10cf	48		               pha
.10d0	8a		               txa
.10d1	48		               pha
.10d2	ad 8e 1a	               lda  f2abutton
.10d5	48		               pha
.10d6	a9 92		               lda  #146
.10d8	8d 9d 1a	               sta  f2abutton+15
.10db	a9 01		               lda  #flashcol
.10dd	8d 8e 1a	               sta  f2abutton
.10e0	a2 8e		               ldx  #<f2abutton
.10e2	a0 1a		               ldy  #>f2abutton
.10e4	20 f4 1c	               jsr  putscxy
.10e7	20 c8 0f	               jsr  delay
.10ea	a9 12		               lda  #18
.10ec	8d 9d 1a	               sta  f2abutton+15
.10ef	68		               pla
.10f0	8d 8e 1a	               sta  f2abutton
.10f3	a2 8e		               ldx  #<f2abutton
.10f5	a0 1a		               ldy  #>f2abutton
.10f7	20 f4 1c	               jsr  putscxy
.10fa	68		               pla
.10fb	aa		               tax
.10fc	68		               pla
.10fd	28		               plp
.10fe	4c 4b 11	               jmp  out
.1101			menub
.1101	20 5c 1d	               jsr  push
.1104	a2 81		               ldx  #<blankmsg
.1106	a0 16		               ldy  #>blankmsg
.1108	20 f4 1c	               jsr  putscxy
.110b	a2 9c		               ldx  #<f2b_msg
.110d	a0 17		               ldy  #>f2b_msg
.110f	20 f4 1c	               jsr  putscxy
.1112	20 9b 1d	               jsr  pop
.1115	08		               php
.1116	48		               pha
.1117	8a		               txa
.1118	48		               pha
.1119	ad 5e 1b	               lda  f2bbutton
.111c	48		               pha
.111d	a9 92		               lda  #146
.111f	8d 6d 1b	               sta  f2bbutton+15
.1122	a9 01		               lda  #flashcol
.1124	8d 5e 1b	               sta  f2bbutton
.1127	a2 5e		               ldx  #<f2bbutton
.1129	a0 1b		               ldy  #>f2bbutton
.112b	20 f4 1c	               jsr  putscxy
.112e	20 c8 0f	               jsr  delay
.1131	a9 12		               lda  #18
.1133	8d 6d 1b	               sta  f2bbutton+15
.1136	68		               pla
.1137	8d 5e 1b	               sta  f2bbutton
.113a	a2 5e		               ldx  #<f2bbutton
.113c	a0 1b		               ldy  #>f2bbutton
.113e	20 f4 1c	               jsr  putscxy
.1141	68		               pla
.1142	aa		               tax
.1143	68		               pla
.1144	28		               plp
.1145	20 21 16	               jsr  fliphorz
.1148	20 13 0d	               jsr  drawbitmap
.114b	68		out            pla
.114c	60		               rts
.114d			f3action
.114d	48		               pha
.114e	a9 00		               lda  #$0
.1150	8d 8a 08	               sta  editmode
.1153	ad 8b 08	               lda  fkeyset
.1156	d0 47		               bne  menub
.1158	20 5c 1d	               jsr  push
.115b	a2 81		               ldx  #<blankmsg
.115d	a0 16		               ldy  #>blankmsg
.115f	20 f4 1c	               jsr  putscxy
.1162	a2 e4		               ldx  #<f3a_msg
.1164	a0 16		               ldy  #>f3a_msg
.1166	20 f4 1c	               jsr  putscxy
.1169	20 9b 1d	               jsr  pop
.116c	08		               php
.116d	48		               pha
.116e	8a		               txa
.116f	48		               pha
.1170	ad a8 1a	               lda  f3abutton
.1173	48		               pha
.1174	a9 92		               lda  #146
.1176	8d b7 1a	               sta  f3abutton+15
.1179	a9 01		               lda  #flashcol
.117b	8d a8 1a	               sta  f3abutton
.117e	a2 a8		               ldx  #<f3abutton
.1180	a0 1a		               ldy  #>f3abutton
.1182	20 f4 1c	               jsr  putscxy
.1185	20 c8 0f	               jsr  delay
.1188	a9 12		               lda  #18
.118a	8d b7 1a	               sta  f3abutton+15
.118d	68		               pla
.118e	8d a8 1a	               sta  f3abutton
.1191	a2 a8		               ldx  #<f3abutton
.1193	a0 1a		               ldy  #>f3abutton
.1195	20 f4 1c	               jsr  putscxy
.1198	68		               pla
.1199	aa		               tax
.119a	68		               pla
.119b	28		               plp
.119c	4c e9 11	               jmp  out
.119f			menub
.119f	20 5c 1d	               jsr  push
.11a2	a2 81		               ldx  #<blankmsg
.11a4	a0 16		               ldy  #>blankmsg
.11a6	20 f4 1c	               jsr  putscxy
.11a9	a2 b7		               ldx  #<f3b_msg
.11ab	a0 17		               ldy  #>f3b_msg
.11ad	20 f4 1c	               jsr  putscxy
.11b0	20 9b 1d	               jsr  pop
.11b3	08		               php
.11b4	48		               pha
.11b5	8a		               txa
.11b6	48		               pha
.11b7	ad 78 1b	               lda  f3bbutton
.11ba	48		               pha
.11bb	a9 92		               lda  #146
.11bd	8d 87 1b	               sta  f3bbutton+15
.11c0	a9 01		               lda  #flashcol
.11c2	8d 78 1b	               sta  f3bbutton
.11c5	a2 78		               ldx  #<f3bbutton
.11c7	a0 1b		               ldy  #>f3bbutton
.11c9	20 f4 1c	               jsr  putscxy
.11cc	20 c8 0f	               jsr  delay
.11cf	a9 12		               lda  #18
.11d1	8d 87 1b	               sta  f3bbutton+15
.11d4	68		               pla
.11d5	8d 78 1b	               sta  f3bbutton
.11d8	a2 78		               ldx  #<f3bbutton
.11da	a0 1b		               ldy  #>f3bbutton
.11dc	20 f4 1c	               jsr  putscxy
.11df	68		               pla
.11e0	aa		               tax
.11e1	68		               pla
.11e2	28		               plp
.11e3	20 ac 15	               jsr  scrollright
.11e6	20 13 0d	               jsr  drawbitmap
.11e9	68		out            pla
.11ea	60		               rts
.11eb			f4action
.11eb	48		               pha
.11ec	a9 00		               lda  #$0
.11ee	8d 8a 08	               sta  editmode
.11f1	ad 8b 08	               lda  fkeyset
.11f4	d0 47		               bne  menub
.11f6	20 5c 1d	               jsr  push
.11f9	a2 81		               ldx  #<blankmsg
.11fb	a0 16		               ldy  #>blankmsg
.11fd	20 f4 1c	               jsr  putscxy
.1200	a2 0a		               ldx  #<f4a_msg
.1202	a0 17		               ldy  #>f4a_msg
.1204	20 f4 1c	               jsr  putscxy
.1207	20 9b 1d	               jsr  pop
.120a	08		               php
.120b	48		               pha
.120c	8a		               txa
.120d	48		               pha
.120e	ad c2 1a	               lda  f4abutton
.1211	48		               pha
.1212	a9 92		               lda  #146
.1214	8d d1 1a	               sta  f4abutton+15
.1217	a9 01		               lda  #flashcol
.1219	8d c2 1a	               sta  f4abutton
.121c	a2 c2		               ldx  #<f4abutton
.121e	a0 1a		               ldy  #>f4abutton
.1220	20 f4 1c	               jsr  putscxy
.1223	20 c8 0f	               jsr  delay
.1226	a9 12		               lda  #18
.1228	8d d1 1a	               sta  f4abutton+15
.122b	68		               pla
.122c	8d c2 1a	               sta  f4abutton
.122f	a2 c2		               ldx  #<f4abutton
.1231	a0 1a		               ldy  #>f4abutton
.1233	20 f4 1c	               jsr  putscxy
.1236	68		               pla
.1237	aa		               tax
.1238	68		               pla
.1239	28		               plp
.123a	4c 87 12	               jmp  out
.123d			menub
.123d	20 5c 1d	               jsr  push
.1240	a2 81		               ldx  #<blankmsg
.1242	a0 16		               ldy  #>blankmsg
.1244	20 f4 1c	               jsr  putscxy
.1247	a2 cc		               ldx  #<f4b_msg
.1249	a0 17		               ldy  #>f4b_msg
.124b	20 f4 1c	               jsr  putscxy
.124e	20 9b 1d	               jsr  pop
.1251	08		               php
.1252	48		               pha
.1253	8a		               txa
.1254	48		               pha
.1255	ad 92 1b	               lda  f4bbutton
.1258	48		               pha
.1259	a9 92		               lda  #146
.125b	8d a1 1b	               sta  f4bbutton+15
.125e	a9 01		               lda  #flashcol
.1260	8d 92 1b	               sta  f4bbutton
.1263	a2 92		               ldx  #<f4bbutton
.1265	a0 1b		               ldy  #>f4bbutton
.1267	20 f4 1c	               jsr  putscxy
.126a	20 c8 0f	               jsr  delay
.126d	a9 12		               lda  #18
.126f	8d a1 1b	               sta  f4bbutton+15
.1272	68		               pla
.1273	8d 92 1b	               sta  f4bbutton
.1276	a2 92		               ldx  #<f4bbutton
.1278	a0 1b		               ldy  #>f4bbutton
.127a	20 f4 1c	               jsr  putscxy
.127d	68		               pla
.127e	aa		               tax
.127f	68		               pla
.1280	28		               plp
.1281	20 d1 15	               jsr  scrollleft
.1284	20 13 0d	               jsr  drawbitmap
.1287	68		out            pla
.1288	60		               rts
.1289			f5action
.1289	48		               pha
.128a	a9 00		               lda  #$0
.128c	8d 8a 08	               sta  editmode
.128f	ad 8b 08	               lda  fkeyset
.1292	d0 4d		               bne  menub
.1294	20 5c 1d	               jsr  push
.1297	a2 81		               ldx  #<blankmsg
.1299	a0 16		               ldy  #>blankmsg
.129b	20 f4 1c	               jsr  putscxy
.129e	a2 31		               ldx  #<f5a_msg
.12a0	a0 17		               ldy  #>f5a_msg
.12a2	20 f4 1c	               jsr  putscxy
.12a5	20 9b 1d	               jsr  pop
.12a8	08		               php
.12a9	48		               pha
.12aa	8a		               txa
.12ab	48		               pha
.12ac	ad dc 1a	               lda  f5abutton
.12af	48		               pha
.12b0	a9 92		               lda  #146
.12b2	8d eb 1a	               sta  f5abutton+15
.12b5	a9 01		               lda  #flashcol
.12b7	8d dc 1a	               sta  f5abutton
.12ba	a2 dc		               ldx  #<f5abutton
.12bc	a0 1a		               ldy  #>f5abutton
.12be	20 f4 1c	               jsr  putscxy
.12c1	20 c8 0f	               jsr  delay
.12c4	a9 12		               lda  #18
.12c6	8d eb 1a	               sta  f5abutton+15
.12c9	68		               pla
.12ca	8d dc 1a	               sta  f5abutton
.12cd	a2 dc		               ldx  #<f5abutton
.12cf	a0 1a		               ldy  #>f5abutton
.12d1	20 f4 1c	               jsr  putscxy
.12d4	68		               pla
.12d5	aa		               tax
.12d6	68		               pla
.12d7	28		               plp
.12d8	20 ff 15	               jsr  clearchar
.12db	20 13 0d	               jsr  drawbitmap
.12de	4c 2b 13	               jmp  out
.12e1			menub
.12e1	20 5c 1d	               jsr  push
.12e4	a2 81		               ldx  #<blankmsg
.12e6	a0 16		               ldy  #>blankmsg
.12e8	20 f4 1c	               jsr  putscxy
.12eb	a2 e0		               ldx  #<f5b_msg
.12ed	a0 17		               ldy  #>f5b_msg
.12ef	20 f4 1c	               jsr  putscxy
.12f2	20 9b 1d	               jsr  pop
.12f5	08		               php
.12f6	48		               pha
.12f7	8a		               txa
.12f8	48		               pha
.12f9	ad ac 1b	               lda  f5bbutton
.12fc	48		               pha
.12fd	a9 92		               lda  #146
.12ff	8d bb 1b	               sta  f5bbutton+15
.1302	a9 01		               lda  #flashcol
.1304	8d ac 1b	               sta  f5bbutton
.1307	a2 ac		               ldx  #<f5bbutton
.1309	a0 1b		               ldy  #>f5bbutton
.130b	20 f4 1c	               jsr  putscxy
.130e	20 c8 0f	               jsr  delay
.1311	a9 12		               lda  #18
.1313	8d bb 1b	               sta  f5bbutton+15
.1316	68		               pla
.1317	8d ac 1b	               sta  f5bbutton
.131a	a2 ac		               ldx  #<f5bbutton
.131c	a0 1b		               ldy  #>f5bbutton
.131e	20 f4 1c	               jsr  putscxy
.1321	68		               pla
.1322	aa		               tax
.1323	68		               pla
.1324	28		               plp
.1325	20 3a 15	               jsr  scrollup
.1328	20 13 0d	               jsr  drawbitmap
.132b	68		out            pla
.132c	60		               rts
.132d			f6action
.132d	48		               pha
.132e	a9 00		               lda  #$0
.1330	8d 8a 08	               sta  editmode
.1333	ad 8b 08	               lda  fkeyset
.1336	d0 4d		               bne  menub
.1338	20 5c 1d	               jsr  push
.133b	a2 81		               ldx  #<blankmsg
.133d	a0 16		               ldy  #>blankmsg
.133f	20 f4 1c	               jsr  putscxy
.1342	a2 4b		               ldx  #<f6a_msg
.1344	a0 17		               ldy  #>f6a_msg
.1346	20 f4 1c	               jsr  putscxy
.1349	20 9b 1d	               jsr  pop
.134c	08		               php
.134d	48		               pha
.134e	8a		               txa
.134f	48		               pha
.1350	ad f6 1a	               lda  f6abutton
.1353	48		               pha
.1354	a9 92		               lda  #146
.1356	8d 05 1b	               sta  f6abutton+15
.1359	a9 01		               lda  #flashcol
.135b	8d f6 1a	               sta  f6abutton
.135e	a2 f6		               ldx  #<f6abutton
.1360	a0 1a		               ldy  #>f6abutton
.1362	20 f4 1c	               jsr  putscxy
.1365	20 c8 0f	               jsr  delay
.1368	a9 12		               lda  #18
.136a	8d 05 1b	               sta  f6abutton+15
.136d	68		               pla
.136e	8d f6 1a	               sta  f6abutton
.1371	a2 f6		               ldx  #<f6abutton
.1373	a0 1a		               ldy  #>f6abutton
.1375	20 f4 1c	               jsr  putscxy
.1378	68		               pla
.1379	aa		               tax
.137a	68		               pla
.137b	28		               plp
.137c	20 f3 15	               jsr  fillchar
.137f	20 13 0d	               jsr  drawbitmap
.1382	4c cf 13	               jmp  out
.1385			menub
.1385	20 5c 1d	               jsr  push
.1388	a2 81		               ldx  #<blankmsg
.138a	a0 16		               ldy  #>blankmsg
.138c	20 f4 1c	               jsr  putscxy
.138f	a2 f2		               ldx  #<f6b_msg
.1391	a0 17		               ldy  #>f6b_msg
.1393	20 f4 1c	               jsr  putscxy
.1396	20 9b 1d	               jsr  pop
.1399	08		               php
.139a	48		               pha
.139b	8a		               txa
.139c	48		               pha
.139d	ad c6 1b	               lda  f6bbutton
.13a0	48		               pha
.13a1	a9 92		               lda  #146
.13a3	8d d5 1b	               sta  f6bbutton+15
.13a6	a9 01		               lda  #flashcol
.13a8	8d c6 1b	               sta  f6bbutton
.13ab	a2 c6		               ldx  #<f6bbutton
.13ad	a0 1b		               ldy  #>f6bbutton
.13af	20 f4 1c	               jsr  putscxy
.13b2	20 c8 0f	               jsr  delay
.13b5	a9 12		               lda  #18
.13b7	8d d5 1b	               sta  f6bbutton+15
.13ba	68		               pla
.13bb	8d c6 1b	               sta  f6bbutton
.13be	a2 c6		               ldx  #<f6bbutton
.13c0	a0 1b		               ldy  #>f6bbutton
.13c2	20 f4 1c	               jsr  putscxy
.13c5	68		               pla
.13c6	aa		               tax
.13c7	68		               pla
.13c8	28		               plp
.13c9	20 72 15	               jsr  scrolldown
.13cc	20 13 0d	               jsr  drawbitmap
.13cf	68		out            pla
.13d0	60		               rts
.13d1			f7action
.13d1	48		               pha
.13d2	a9 00		               lda  #$0
.13d4	8d 8a 08	               sta  editmode
.13d7	ad 8b 08	               lda  fkeyset
.13da	d0 4d		               bne  menub
.13dc	20 5c 1d	               jsr  push
.13df	a2 81		               ldx  #<blankmsg
.13e1	a0 16		               ldy  #>blankmsg
.13e3	20 f4 1c	               jsr  putscxy
.13e6	a2 65		               ldx  #<f7a_msg
.13e8	a0 17		               ldy  #>f7a_msg
.13ea	20 f4 1c	               jsr  putscxy
.13ed	20 9b 1d	               jsr  pop
.13f0	08		               php
.13f1	48		               pha
.13f2	8a		               txa
.13f3	48		               pha
.13f4	ad 10 1b	               lda  f7abutton
.13f7	48		               pha
.13f8	a9 92		               lda  #146
.13fa	8d 1f 1b	               sta  f7abutton+15
.13fd	a9 01		               lda  #flashcol
.13ff	8d 10 1b	               sta  f7abutton
.1402	a2 10		               ldx  #<f7abutton
.1404	a0 1b		               ldy  #>f7abutton
.1406	20 f4 1c	               jsr  putscxy
.1409	20 c8 0f	               jsr  delay
.140c	a9 12		               lda  #18
.140e	8d 1f 1b	               sta  f7abutton+15
.1411	68		               pla
.1412	8d 10 1b	               sta  f7abutton
.1415	a2 10		               ldx  #<f7abutton
.1417	a0 1b		               ldy  #>f7abutton
.1419	20 f4 1c	               jsr  putscxy
.141c	68		               pla
.141d	aa		               tax
.141e	68		               pla
.141f	28		               plp
.1420	20 c4 0d	               jsr  copycharset
.1423	20 13 0d	               jsr  drawbitmap
.1426	4c 78 14	               jmp  out
.1429	a9 00		menub          lda  #$0
.142b	8d 8a 08	               sta  editmode
.142e	20 5c 1d	               jsr  push
.1431	a2 81		               ldx  #<blankmsg
.1433	a0 16		               ldy  #>blankmsg
.1435	20 f4 1c	               jsr  putscxy
.1438	a2 06		               ldx  #<f7b_msg
.143a	a0 18		               ldy  #>f7b_msg
.143c	20 f4 1c	               jsr  putscxy
.143f	20 9b 1d	               jsr  pop
.1442	08		               php
.1443	48		               pha
.1444	8a		               txa
.1445	48		               pha
.1446	ad e0 1b	               lda  f7bbutton
.1449	48		               pha
.144a	a9 92		               lda  #146
.144c	8d ef 1b	               sta  f7bbutton+15
.144f	a9 01		               lda  #flashcol
.1451	8d e0 1b	               sta  f7bbutton
.1454	a2 e0		               ldx  #<f7bbutton
.1456	a0 1b		               ldy  #>f7bbutton
.1458	20 f4 1c	               jsr  putscxy
.145b	20 c8 0f	               jsr  delay
.145e	a9 12		               lda  #18
.1460	8d ef 1b	               sta  f7bbutton+15
.1463	68		               pla
.1464	8d e0 1b	               sta  f7bbutton
.1467	a2 e0		               ldx  #<f7bbutton
.1469	a0 1b		               ldy  #>f7bbutton
.146b	20 f4 1c	               jsr  putscxy
.146e	68		               pla
.146f	aa		               tax
.1470	68		               pla
.1471	28		               plp
.1472	20 1a 15	               jsr  reverse
.1475	20 13 0d	               jsr  drawbitmap
.1478	68		out            pla
.1479	60		               rts
.147a			f8action
.147a	48		               pha
.147b	a9 00		               lda  #$0
.147d	8d 8a 08	               sta  editmode
.1480	ad 8b 08	               lda  fkeyset
.1483	d0 47		               bne  menub
.1485	20 5c 1d	               jsr  push
.1488	a2 81		               ldx  #<blankmsg
.148a	a0 16		               ldy  #>blankmsg
.148c	20 f4 1c	               jsr  putscxy
.148f	a2 76		               ldx  #<menub_msg
.1491	a0 18		               ldy  #>menub_msg
.1493	20 f4 1c	               jsr  putscxy
.1496	20 9b 1d	               jsr  pop
.1499	08		               php
.149a	48		               pha
.149b	8a		               txa
.149c	48		               pha
.149d	ad 2a 1b	               lda  f8abutton
.14a0	48		               pha
.14a1	a9 92		               lda  #146
.14a3	8d 39 1b	               sta  f8abutton+15
.14a6	a9 01		               lda  #flashcol
.14a8	8d 2a 1b	               sta  f8abutton
.14ab	a2 2a		               ldx  #<f8abutton
.14ad	a0 1b		               ldy  #>f8abutton
.14af	20 f4 1c	               jsr  putscxy
.14b2	20 c8 0f	               jsr  delay
.14b5	a9 12		               lda  #18
.14b7	8d 39 1b	               sta  f8abutton+15
.14ba	68		               pla
.14bb	8d 2a 1b	               sta  f8abutton
.14be	a2 2a		               ldx  #<f8abutton
.14c0	a0 1b		               ldy  #>f8abutton
.14c2	20 f4 1c	               jsr  putscxy
.14c5	68		               pla
.14c6	aa		               tax
.14c7	68		               pla
.14c8	28		               plp
.14c9	4c 10 15	               jmp  swapit
.14cc			menub
.14cc	20 5c 1d	               jsr  push
.14cf	a2 81		               ldx  #<blankmsg
.14d1	a0 16		               ldy  #>blankmsg
.14d3	20 f4 1c	               jsr  putscxy
.14d6	a2 5b		               ldx  #<menua_msg
.14d8	a0 18		               ldy  #>menua_msg
.14da	20 f4 1c	               jsr  putscxy
.14dd	20 9b 1d	               jsr  pop
.14e0	08		               php
.14e1	48		               pha
.14e2	8a		               txa
.14e3	48		               pha
.14e4	ad fa 1b	               lda  f8bbutton
.14e7	48		               pha
.14e8	a9 92		               lda  #146
.14ea	8d 09 1c	               sta  f8bbutton+15
.14ed	a9 01		               lda  #flashcol
.14ef	8d fa 1b	               sta  f8bbutton
.14f2	a2 fa		               ldx  #<f8bbutton
.14f4	a0 1b		               ldy  #>f8bbutton
.14f6	20 f4 1c	               jsr  putscxy
.14f9	20 c8 0f	               jsr  delay
.14fc	a9 12		               lda  #18
.14fe	8d 09 1c	               sta  f8bbutton+15
.1501	68		               pla
.1502	8d fa 1b	               sta  f8bbutton
.1505	a2 fa		               ldx  #<f8bbutton
.1507	a0 1b		               ldy  #>f8bbutton
.1509	20 f4 1c	               jsr  putscxy
.150c	68		               pla
.150d	aa		               tax
.150e	68		               pla
.150f	28		               plp
.1510	49 ff		swapit         eor  #$ff
.1512	8d 8b 08	               sta  fkeyset
.1515	20 61 0e	               jsr  showfkeys
.1518	68		               pla
.1519	60		               rts
.151a			reverse
.151a	20 5c 1d	               jsr  push
.151d	48		               pha
.151e	ad 8f 08	               lda  mapaddr
.1521	85 fd		               sta  $fd
.1523	ad 90 08	               lda  mapaddr+1
.1526	85 fe		               sta  $fe
.1528	68		               pla
.1529	a0 00		               ldy  #$00
.152b	b1 fd		again          lda  (zpage2),y
.152d	49 ff		               eor  #$ff
.152f	91 fd		               sta  (zpage2),y
.1531	c8		               iny
.1532	c0 08		               cpy  #$08
.1534	d0 f5		               bne  again
.1536	20 9b 1d	               jsr  pop
.1539	60		               rts
.153a			scrollup
.153a	20 5c 1d	               jsr  push
.153d	48		               pha
.153e	ad 8f 08	               lda  mapaddr
.1541	85 fb		               sta  $fb
.1543	ad 90 08	               lda  mapaddr+1
.1546	85 fc		               sta  $fc
.1548	68		               pla
.1549	48		               pha
.154a	ad 8f 08	               lda  mapaddr
.154d	85 fd		               sta  $fd
.154f	ad 90 08	               lda  mapaddr+1
.1552	85 fe		               sta  $fe
.1554	68		               pla
.1555	20 7b 1e	               jsr  inczp2
.1558	a0 00		               ldy  #$00
.155a	b1 fb		               lda  (zpage1),y
.155c	8d 71 15	               sta  tmpbyte
.155f	b1 fd		again          lda  (zpage2),y
.1561	91 fb		               sta  (zpage1),y
.1563	c8		               iny
.1564	c0 07		               cpy  #$07
.1566	d0 f7		               bne  again
.1568	ad 71 15	               lda  tmpbyte
.156b	91 fb		               sta  (zpage1),y
.156d	20 9b 1d	               jsr  pop
.1570	60		               rts
>1571	00		tmpbyte        .byte     $00
.1572			scrolldown
.1572	20 5c 1d	               jsr  push
.1575	48		               pha
.1576	ad 8f 08	               lda  mapaddr
.1579	85 fb		               sta  $fb
.157b	ad 90 08	               lda  mapaddr+1
.157e	85 fc		               sta  $fc
.1580	68		               pla
.1581	48		               pha
.1582	ad 8f 08	               lda  mapaddr
.1585	85 fd		               sta  $fd
.1587	ad 90 08	               lda  mapaddr+1
.158a	85 fe		               sta  $fe
.158c	68		               pla
.158d	20 7b 1e	               jsr  inczp2
.1590	a0 07		               ldy  #$07                ;xxxxxxxx zpage1
.1592	b1 fb		               lda  (zpage1),y          ;xxxxxxxx zpage2
.1594	8d ab 15	               sta  tmpbyte             ;xxxxxxxx
.1597	88		again          dey                      ;xxxxxxxx
.1598	b1 fb		               lda  (zpage1),y          ;xxxxxxxx
.159a	91 fd		               sta  (zpage2),y          ;xxxxxxxx
.159c	c0 00		               cpy  #$00                ;xxxxxxxx
.159e	d0 f7		               bne  again               ;xxxxxxxx
.15a0	a0 00		               ldy  #$00
.15a2	ad ab 15	               lda  tmpbyte
.15a5	91 fb		               sta  (zpage1),y
.15a7	20 9b 1d	               jsr  pop
.15aa	60		               rts
>15ab	00		tmpbyte        .byte     $00
.15ac			scrollright
.15ac	20 5c 1d	               jsr  push
.15af	48		               pha
.15b0	ad 8f 08	               lda  mapaddr
.15b3	85 fb		               sta  $fb
.15b5	ad 90 08	               lda  mapaddr+1
.15b8	85 fc		               sta  $fc
.15ba	68		               pla
.15bb	a0 00		               ldy  #$00
.15bd	b1 fb		again          lda  (zpage1),y
.15bf	18		               clc
.15c0	6a		               ror
.15c1	90 03		               bcc  zero
.15c3	18		               clc
.15c4	69 80		one            adc  #$80
.15c6	91 fb		zero           sta  (zpage1),y
.15c8	c8		               iny
.15c9	c0 08		               cpy  #$08
.15cb	d0 f0		               bne  again
.15cd	20 9b 1d	               jsr  pop
.15d0	60		               rts
.15d1			scrollleft
.15d1	20 5c 1d	               jsr  push
.15d4	48		               pha
.15d5	ad 8f 08	               lda  mapaddr
.15d8	85 fb		               sta  $fb
.15da	ad 90 08	               lda  mapaddr+1
.15dd	85 fc		               sta  $fc
.15df	68		               pla
.15e0	a0 00		               ldy  #$00
.15e2	b1 fb		again          lda  (zpage1),y
.15e4	18		               clc
.15e5	2a		               rol
.15e6	69 00		               adc  #$00
.15e8	91 fb		               sta  (zpage1),y
.15ea	c8		               iny
.15eb	c0 08		               cpy  #$08
.15ed	d0 f3		               bne  again
.15ef	20 9b 1d	               jsr  pop
.15f2	60		               rts
.15f3			fillchar
.15f3	20 5c 1d	               jsr  push
.15f6	a9 ff		               lda  #$ff
.15f8	20 0b 16	               jsr  allsame
.15fb	20 9b 1d	               jsr  pop
.15fe	60		               rts
.15ff			clearchar
.15ff	20 5c 1d	               jsr  push
.1602	a9 00		               lda  #$00
.1604	20 0b 16	               jsr  allsame
.1607	20 9b 1d	               jsr  pop
.160a	60		               rts
.160b			allsame
.160b	48		               pha
.160c	ad 8f 08	               lda  mapaddr
.160f	85 fd		               sta  $fd
.1611	ad 90 08	               lda  mapaddr+1
.1614	85 fe		               sta  $fe
.1616	68		               pla
.1617	a0 00		               ldy  #$00
.1619	91 fd		again          sta  (zpage2),y
.161b	c8		               iny
.161c	c0 08		               cpy  #$08
.161e	d0 f9		               bne  again
.1620	60		               rts
.1621			fliphorz
.1621	20 5c 1d	               jsr  push
.1624	48		               pha
.1625	ad 8f 08	               lda  mapaddr
.1628	85 fd		               sta  $fd
.162a	ad 90 08	               lda  mapaddr+1
.162d	85 fe		               sta  $fe
.162f	68		               pla
.1630	a0 00		               ldy  #$00
.1632	b1 fd		nextbyte       lda  (zpage2),y
.1634	a2 00		               ldx  #$00
.1636	2a		rolagain       rol
.1637	6e 4d 16	               ror  tmpbyte
.163a	e8		               inx
.163b	e0 08		               cpx  #$08
.163d	30 f7		               bmi  rolagain
.163f	ad 4d 16	               lda  tmpbyte
.1642	91 fd		               sta  (zpage2),y
.1644	c8		               iny
.1645	c0 08		               cpy  #$08
.1647	30 e9		               bmi  nextbyte
.1649	20 9b 1d	               jsr  pop
.164c	60		               rts
>164d	00		tmpbyte        .byte     $00
.164e			flipvert
.164e	20 5c 1d	               jsr  push
.1651	48		               pha
.1652	ad 8f 08	               lda  mapaddr
.1655	85 fd		               sta  $fd
.1657	ad 90 08	               lda  mapaddr+1
.165a	85 fe		               sta  $fe
.165c	68		               pla
.165d	a0 00		               ldy  #$00
.165f	b1 fd		tostack        lda  (zpage2),y
.1661	48		               pha
.1662	c8		               iny
.1663	c0 08		               cpy  #$08
.1665	d0 f8		               bne  tostack
.1667	a0 00		               ldy  #$00
.1669	68		fromstack      pla
.166a	91 fd		               sta  (zpage2),y
.166c	c8		               iny
.166d	c0 08		               cpy  #$08
.166f	d0 f8		               bne  fromstack
.1671	20 9b 1d	               jsr  pop
.1674	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: messages.asm

>1675	0a 01 05	editor_msg     .byte vrose,1,5
>1678	5b 45 44 49	               .null     "[editor]"
>167c	54 4f 52 5d 00
>1681	03 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>1685	20 20 20 20	               .null     "                                      "
>1689	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1699	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>16a9	20 20 00
.16ac			f1a_msg
>16ac	03 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>16b0	20 45 44 49	               .null     " edit mode: chr$(   )",146
>16b4	54 20 4d 4f 44 45 3a 20 43 48 52 24 28 20 20 20
>16c4	29 92 00
.16c7			f2a_msg
>16c7	03 00 05	copy_msg       .byte     mesgcol,0,5
>16ca	20 45 4e 54	               .null     " enter character to copy:"
>16ce	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>16de	43 4f 50 59 3a 00
.16e4			f3a_msg
>16e4	03 00 05 92	save_msg       .byte     mesgcol,0,5,146
>16e8	20 53 41 56	               .null     " save on cassette or disk? (c/d):"
>16ec	45 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>16fc	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.170a			f4a_msg
>170a	03 00 05	load_msg       .byte     mesgcol,0,5
>170d	20 4c 4f 41	               .null     " load from cassette or disk? (c/d):"
>1711	44 20 46 52 4f 4d 20 43 41 53 53 45 54 54 45 20
>1721	4f 52 20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.1731			f5a_msg
>1731	03 00 05	clear_msg      .byte     mesgcol,0,5
>1734	20 43 4c 45	               .null     " clear char: chr$(   )"
>1738	41 52 20 43 48 41 52 3a 20 43 48 52 24 28 20 20
>1748	20 29 00
.174b			f6a_msg
>174b	03 00 05	fill_msg       .byte     mesgcol,0,5
>174e	20 46 49 4c	               .null     " fill char:  chr$(   )"
>1752	4c 20 43 48 41 52 3a 20 20 43 48 52 24 28 20 20
>1762	20 29 00
.1765			f7a_msg
>1765	03 00 05	work_msg       .byte     mesgcol,0,5
>1768	20 52 45 53	               .null     " restoring all characters."
>176c	54 4f 52 49 4e 47 20 41 4c 4c 20 43 48 41 52 41
>177c	43 54 45 52 53 2e 00
.1783			f1b_msg
>1783	03 00 05	invr_msg       .byte     mesgcol,0,5
>1786	20 46 4c 49	               .null     " flipping vertically:"
>178a	50 50 49 4e 47 20 56 45 52 54 49 43 41 4c 4c 59
>179a	3a 00
.179c			f2b_msg
>179c	03 00 05	flip_msg       .byte     mesgcol,0,5
>179f	20 46 4c 49	               .null     " flipping horizontally:"
>17a3	50 50 49 4e 47 20 48 4f 52 49 5a 4f 4e 54 41 4c
>17b3	4c 59 3a 00
.17b7			f3b_msg
>17b7	03 00 05	scrollr_msg    .byte     mesgcol,0,5
>17ba	20 53 43 52	               .null     " scrolling right:"
>17be	4f 4c 4c 49 4e 47 20 52 49 47 48 54 3a 00
.17cc			f4b_msg
>17cc	03 00 05	scrolll_msg    .byte     mesgcol,0,5
>17cf	20 53 43 52	               .null     " scrolling left:"
>17d3	4f 4c 4c 49 4e 47 20 4c 45 46 54 3a 00
.17e0			f5b_msg
>17e0	03 00 05	scrollu_msg    .byte     mesgcol,0,5
>17e3	20 53 43 52	               .null     " scrolling up:"
>17e7	4f 4c 4c 49 4e 47 20 55 50 3a 00
.17f2			f6b_msg
>17f2	03 00 05	scrolld_msg    .byte     mesgcol,0,5
>17f5	20 53 43 52	               .null     " scrolling down:"
>17f9	4f 4c 4c 49 4e 47 20 44 4f 57 4e 3a 00
.1806			f7b_msg
>1806	03 00 05	rvrs_msg       .byte     mesgcol,0,5
>1809	20 52 45 56	               .null     " reverse character:"
>180d	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
>181d	03 00 05	save_fname_msg .byte     mesgcol,0,5
>1820	20 53 41 56	               .null     " save: file name ------.chr"
>1824	45 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>1834	2d 2d 2d 2e 43 48 52 00
>183c	03 00 05	load_fname_msg .byte     mesgcol,0,5
>183f	20 4c 4f 41	               .null     " load: file name ------.chr"
>1843	44 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>1853	2d 2d 2d 2e 43 48 52 00
>185b	03 00 05	menua_msg      .byte     mesgcol,0,5
>185e	20 59 4f 55	               .null     " you are now in menu a."
>1862	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>1872	20 41 2e 00
>1876	03 00 05	menub_msg      .byte     mesgcol,0,5
>1879	20 59 4f 55	               .null     " you are now in menu b."
>187d	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>188d	20 42 2e 00
>1891	0e 15 18 12	quit_msg       .byte     vblue1,21,24,18
>1895	43 54 52 4c	               .text     "ctrl-x",146
>1899	2d 58 92
>189c	20 54 4f 20	               .null     " to quit."
>18a0	51 55 49 54 2e 00
.18a6			menu_msg
>18a6	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>18aa	43 54 52 4c	               .text     "ctrl-x",146
>18ae	2d 58 92
>18b1	20 54 4f 20	               .null     " to menu."
>18b5	4d 45 4e 55 2e 00
=$07			whoamicol       =    vjaune
>18bb	07 04 06 12	whoami0        .byte     whoamicol,4,6,18
>18bf	20 20 20 20	               .null     "                               ",146
>18c3	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>18d3	20 20 20 20 20 20 20 20 20 20 20 92 00
>18e0	07 04 07 12	whoami1        .byte     whoamicol,4,7,18
>18e4	20 20 20 20	               .null     "          ",146," charedit ",18,"           ",146
>18e8	20 20 20 20 20 20 92 20 43 48 41 52 45 44 49 54
>18f8	20 12 20 20 20 20 20 20 20 20 20 20 20 92 00
>1907	07 04 08 12	whoami2        .byte     whoamicol,4,8,18
>190b	20 20 20 20	               .null     "                               ",146
>190f	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>191f	20 20 20 20 20 20 20 20 20 20 20 92 00
>192c	07 04 09 12	whoami3        .byte     whoamicol,4,9,18
>1930	20 20 49 4e	               .null     "  inspired from john heilborn  ",146
>1934	53 50 49 52 45 44 20 46 52 4f 4d 20 4a 4f 48 4e
>1944	20 48 45 49 4c 42 4f 52 4e 20 20 92 00
>1951	07 04 0a 12	whoami4        .byte     whoamicol,4,10,18
>1955	20 20 20 20	               .null     "      isbn: 0-942386-29-9      ",146
>1959	20 20 49 53 42 4e 3a 20 30 2d 39 34 32 33 38 36
>1969	2d 32 39 2d 39 20 20 20 20 20 20 92 00
>1976	07 04 0b 12	whoami5        .byte     whoamicol,4,11,18
>197a	20 20 20 20	               .null     "                               ",146
>197e	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>198e	20 20 20 20 20 20 20 20 20 20 20 92 00
>199b	07 04 0c 12	whoami6        .byte     whoamicol,4,12,18
>199f	20 43 4f 44	               .null     " coded in assembly language by ",146
>19a3	45 44 20 49 4e 20 41 53 53 45 4d 42 4c 59 20 4c
>19b3	41 4e 47 55 41 47 45 20 42 59 20 92 00
>19c0	07 04 0d 12	whoami7        .byte     whoamicol,4,13,18
>19c4	20 20 20 20	               .null     "     daniel lafrance 2023      ",146
>19c8	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>19d8	20 32 30 32 33 20 20 20 20 20 20 92 00
>19e5	07 04 0e 12	whoami8        .byte     whoamicol,4,14,18
>19e9	20 20 20 20	               .null     "    version:",version,"    ",146
>19ed	56 45 52 53 49 4f 4e 3a 32 30 32 33 31 31 31 33
>19fd	2d 31 36 34 32 30 38 20 20 20 20 92 00
>1a0a	07 04 0f 12	whoami9        .byte     whoamicol,4,15,18
>1a0e	20 20 20 20	               .null     "                               ",146
>1a12	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1a22	20 20 20 20 20 20 20 20 20 20 20 92 00
>1a2f	03 06 10 14	bye_msg        .byte     vcyan,6,16,20
>1a33	20 54 48 41	               .null     " thanks and have a good day ",146
>1a37	4e 4b 53 20 41 4e 44 20 48 41 56 45 20 41 20 47
>1a47	4f 4f 44 20 44 41 59 20 92 00
>1a51	0d 05 18 12	any_msg        .byte     vvert1,5,24,18
>1a55	20 20 55 53	               .null         "  use the [anykey] to basic  ",146
>1a59	45 20 54 48 45 20 5b 41 4e 59 4b 45 59 5d 20 54
>1a69	4f 20 42 41 53 49 43 20 20 92 00
=18			fkeyleft=18
=8			f1top=8
>1a74	0d 12 08	f1abutton      .byte     menu1col,fkeyleft,f1top       ;133
>1a77	45 44 49 54	               .text     "edit........"
>1a7b	2e 2e 2e 2e 2e 2e 2e 2e
>1a83	12		               .byte     18             ; position 15
>1a84	a9 20 20 46	               .text     $a9,"  f1  ",223
>1a88	31 20 20 df
>1a8c	92 00		               .byte     146,0
>1a8e	0c 12 09	f2abutton      .byte     vgris1,fkeyleft,f1top+1     ;138
>1a91	43 4f 50 59	               .text     "copy........"
>1a95	2e 2e 2e 2e 2e 2e 2e 2e
>1a9d	12		               .byte     18             ; position 15
>1a9e	20 20 20 46	               .text     "   f2   "
>1aa2	32 20 20 20
>1aa6	92 00		               .byte     146,0
>1aa8	0c 12 0b	f3abutton      .byte     vgris1,fkeyleft,f1top+3     ;137
>1aab	53 41 56 45	               .text     "save........"
>1aaf	2e 2e 2e 2e 2e 2e 2e 2e
>1ab7	12		               .byte     18            ; position 15
>1ab8	a9 20 20 46	               .text     $a9,"  f3  ",223
>1abc	33 20 20 df
>1ac0	92 00		               .byte     146,0
>1ac2	0c 12 0c	f4abutton      .byte     vgris1,fkeyleft,f1top+4     ;134
>1ac5	4c 4f 41 44	               .text     "load........"
>1ac9	2e 2e 2e 2e 2e 2e 2e 2e
>1ad1	12		               .byte     18             ; position 15
>1ad2	20 20 20 46	               .text     "   f4   "
>1ad6	34 20 20 20
>1ada	92 00		               .byte     146,0
>1adc	0d 12 0e	f5abutton      .byte     menu1col,fkeyleft,f1top+6     ;135
>1adf	43 4c 45 41	               .text     "clear......."
>1ae3	52 2e 2e 2e 2e 2e 2e 2e
>1aeb	12		               .byte     18             ; position 15
>1aec	a9 20 20 46	               .text     $a9,"  f5  ",223
>1af0	35 20 20 df
>1af4	92 00		               .byte     146,0
>1af6	0d 12 0f	f6abutton      .byte     menu1col,fkeyleft,f1top+7    ;139
>1af9	46 49 4c 4c	               .text     "fill........"
>1afd	2e 2e 2e 2e 2e 2e 2e 2e
>1b05	12		               .byte     18             ; position 15
>1b06	20 20 20 46	               .text     "   f6   "
>1b0a	36 20 20 20
>1b0e	92 00		               .byte     146,0
>1b10	0d 12 11	f7abutton      .byte     menu1col,fkeyleft,f1top+9    ;136
>1b13	52 45 53 54	               .text     "restore all."
>1b17	4f 52 45 20 41 4c 4c 2e
>1b1f	12		               .byte     18             ; position 15
>1b20	a9 20 20 46	               .text     $a9,"  f7  ",223
>1b24	37 20 20 df
>1b28	92 00		               .byte     146,0
>1b2a	0d 12 12	f8abutton      .byte     menu1col,fkeyleft,f1top+10
>1b2d	46 55 4e 43	               .text     "function...."
>1b31	54 49 4f 4e 2e 2e 2e 2e
>1b39	12		               .byte     18             ; position 15
>1b3a	20 20 20 46	               .text     "   f8   "
>1b3e	38 20 20 20
>1b42	92 00		               .byte     146,0
>1b44	0a 12 08	f1bbutton      .byte     menu2col,fkeyleft,f1top
>1b47	46 4c 49 50	               .text     "flip vert..."
>1b4b	20 56 45 52 54 2e 2e 2e
>1b53	12		               .byte     18             ; position 15
>1b54	a9 20 20 46	               .text     $a9,"  f1  ",223
>1b58	31 20 20 df
>1b5c	92 00		               .byte     146,0
>1b5e	0a 12 09	f2bbutton      .byte     menu2col,fkeyleft,f1top+1
>1b61	46 4c 49 50	               .text     "flip horz..."
>1b65	20 48 4f 52 5a 2e 2e 2e
>1b6d	12		               .byte     18             ; position 15
>1b6e	20 20 20 46	               .text     "   f2   "
>1b72	32 20 20 20
>1b76	92 00		               .byte     146,0
>1b78	0a 12 0b	f3bbutton      .byte     menu2col,fkeyleft,f1top+3
>1b7b	53 43 52 4f	               .text     "scroll r...."
>1b7f	4c 4c 20 52 2e 2e 2e 2e
>1b87	12		               .byte     18             ; position 15
>1b88	a9 20 20 46	               .text     $a9,"  f3  ",223
>1b8c	33 20 20 df
>1b90	92 00		               .byte     146,0
>1b92	0a 12 0c	f4bbutton      .byte     menu2col,fkeyleft,f1top+4
>1b95	53 43 52 4f	               .text     "scroll l...."
>1b99	4c 4c 20 4c 2e 2e 2e 2e
>1ba1	12		               .byte     18             ; position 15
>1ba2	20 20 20 46	               .text     "   f4   "
>1ba6	34 20 20 20
>1baa	92 00		               .byte     146,0
>1bac	0a 12 0e	f5bbutton      .byte     menu2col,fkeyleft,f1top+6
>1baf	53 43 52 4f	               .text     "scroll u...."
>1bb3	4c 4c 20 55 2e 2e 2e 2e
>1bbb	12		               .byte     18             ; position 15
>1bbc	a9 20 20 46	               .text     $a9,"  f5  ",223
>1bc0	35 20 20 df
>1bc4	92 00		               .byte     146,0
>1bc6	0a 12 0f	f6bbutton      .byte     menu2col,fkeyleft,f1top+7
>1bc9	53 43 52 4f	               .text     "scroll d...."
>1bcd	4c 4c 20 44 2e 2e 2e 2e
>1bd5	12		               .byte     18             ; position 15
>1bd6	20 20 20 46	               .text     "   f6   "
>1bda	36 20 20 20
>1bde	92 00		               .byte     146,0
>1be0	0a 12 11	f7bbutton      .byte     menu2col,fkeyleft,f1top+9
>1be3	52 45 56 45	               .text     "reverse....."
>1be7	52 53 45 2e 2e 2e 2e 2e
>1bef	12		               .byte     18             ; position 15
>1bf0	a9 20 20 46	               .text     $a9,"  f7  ",223
>1bf4	37 20 20 df
>1bf8	92 00		               .byte     146,0
>1bfa	0a 12 12	f8bbutton      .byte     menu2col,fkeyleft,f1top+10
>1bfd	46 55 4e 43	               .text     "function...."
>1c01	54 49 4f 4e 2e 2e 2e 2e
>1c09	12		               .byte     18             ; position 15
>1c0a	20 20 20 46	               .text     "   f8   "
>1c0e	38 20 20 20
>1c12	92 00		               .byte     146,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.1c14			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.1c14			screendis
.1c14	08		               php
.1c15	48		               pha
.1c16	ad 11 d0	               lda  $d011
.1c19	29 ef		               and  #%11101111
.1c1b	8d 11 d0	               sta  $d011
.1c1e	68		               pla
.1c1f	28		               plp
.1c20	60		               rts
.1c21			screenena
.1c21	08		               php
.1c22	48		               pha
.1c23	ad 11 d0	               lda  $d011
.1c26	09 10		               ora  #%00010000
.1c28	8d 11 d0	               sta  $d011
.1c2b	68		               pla
.1c2c	28		               plp
.1c2d	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.1c2e			scrmaninit
.1c2e	20 5c 1d	               jsr  push
.1c31	a9 06		               lda  #vbleu
.1c33	8d 21 d0	               sta  vicbackcol
.1c36	a9 05		               lda  #vvert
.1c38	8d 20 d0	               sta  vicbordcol
.1c3b	a9 01		               lda  #vblanc
.1c3d	8d 86 02	               sta  bascol
.1c40	ad 00 04	               lda  scrnram
.1c43	8d 00 04	               sta  scrnram
.1c46	20 4e 1c	               jsr  cls
.1c49	20 9b 1d	               jsr  pop
.1c4c	60		               rts
>1c4d	8e		characterset   .byte b_uppercase
.1c4e			cls
.1c4e	08		               php
.1c4f	48		               pha
.1c50	a9 93		               lda  #$93
.1c52	20 65 1c	               jsr  putch
.1c55	68		               pla
.1c56	28		               plp
.1c57	60		               rts
.1c58			putnch
.1c58	08		               php
.1c59	e0 00		               cpx  #$00
.1c5b	f0 06		               beq  out
.1c5d	20 d2 ff	again          jsr  $ffd2
.1c60	ca		               dex
.1c61	d0 fa		               bne  again
.1c63	28		out            plp
.1c64	60		               rts
.1c65			putch
.1c65	08		               php
.1c66	20 d2 ff	               jsr  $ffd2
.1c69	28		               plp
.1c6a	60		               rts
.1c6b			puts
.1c6b	20 5c 1d	               jsr  push
.1c6e	86 fb		               stx  zpage1
.1c70	84 fc		               sty  zpage1+1
.1c72	a0 00		               ldy  #0
.1c74	b1 fb		next           lda  (zpage1),y
.1c76	f0 09		               beq  exit
.1c78	20 65 1c	               jsr  putch
.1c7b	20 63 1e	               jsr  inczp1
.1c7e	4c 74 1c	               jmp  next
.1c81	20 9b 1d	exit           jsr  pop
.1c84	60		               rts
.1c85			gotoxy
.1c85	08		               php
.1c86	18		               clc
.1c87	8a		               txa
.1c88	48		               pha
.1c89	98		               tya
.1c8a	aa		               tax
.1c8b	68		               pla
.1c8c	a8		               tay
.1c8d	20 f0 ff	               jsr  kplot
.1c90	28		               plp
.1c91	60		               rts
.1c92			cursor
=$0286			bascol    =    $0286
.1c92	08		               php
.1c93	48		               pha
.1c94	90 12		               bcc  restore
.1c96	20 f0 ff	               jsr  kplot
.1c99	8c ba 1c	               sty  cx
.1c9c	8e bb 1c	               stx  cy
.1c9f	ad 86 02	               lda  bascol
.1ca2	8d bc 1c	               sta  bcol
.1ca5	4c b7 1c	               jmp  out
.1ca8	ae bb 1c	restore        ldx  cy
.1cab	ac ba 1c	               ldy  cx
.1cae	20 f0 ff	               jsr  kplot
.1cb1	ad bc 1c	               lda  bcol
.1cb4	8d 86 02	               sta  bascol
.1cb7	68		out            pla
.1cb8	28		               plp
.1cb9	60		               rts
>1cba	00		cx   .byte     $00
>1cbb	00		cy   .byte     $00
>1cbc	00		bcol .byte     $00
.1cbd			cursave
.1cbd	08		               php
.1cbe	38		               sec
.1cbf	20 92 1c	               jsr  cursor
.1cc2	28		               plp
.1cc3	60		               rts
.1cc4			curput
.1cc4	08		               php
.1cc5	18		               clc
.1cc6	20 92 1c	               jsr  cursor
.1cc9	28		               plp
.1cca	60		               rts
.1ccb			putsxy
.1ccb	20 5c 1d	               jsr  push
.1cce	86 fb		               stx  zpage1
.1cd0	84 fc		               sty  zpage1+1
.1cd2	a0 00		               ldy  #$00
.1cd4	b1 fb		               lda  (zpage1),y
.1cd6	aa		               tax
.1cd7	20 63 1e	               jsr  inczp1
.1cda	b1 fb		               lda  (zpage1),y
.1cdc	a8		               tay
.1cdd	20 85 1c	               jsr  gotoxy
.1ce0	20 63 1e	               jsr  inczp1
.1ce3	a6 fb		               ldx  zpage1
.1ce5	a4 fc		               ldy  zpage1+1
.1ce7	20 6b 1c	               jsr  puts
.1cea	20 9b 1d	               jsr  pop
.1ced	60		               rts
>1cee	00 00		straddr   .word     $00
>1cf0	00		px        .byte     $00
>1cf1	00		py        .byte     $00
>1cf2	00 00		zp1       .word     $00
.1cf4			putscxy
.1cf4	20 5c 1d	               jsr  push
.1cf7	84 fc		               sty  zpage1+1
.1cf9	86 fb		               stx  zpage1
.1cfb	ad 86 02	               lda  bascol
.1cfe	8d 1e 1d	               sta  bc
.1d01	a0 00		               ldy #$00
.1d03	b1 fb		               lda  (zpage1),y
.1d05	8d 86 02	               sta  bascol
.1d08	20 63 1e	               jsr  inczp1
.1d0b	a6 fb		               ldx  zpage1
.1d0d	a4 fc		               ldy  zpage1+1
.1d0f	20 cb 1c	               jsr  putsxy
.1d12	ad 1e 1d	               lda  bc
.1d15	8d 86 02	               sta  bascol
.1d18	20 9b 1d	               jsr  pop
.1d1b	60		               rts
>1d1c	00 00		straddr  .word      $00
>1d1e	00		bc       .byte      $00
>1d1f	00 00		zp1      .word      $00
.1d21			putrahex
.1d21	08		               php
.1d22	48		               pha
.1d23	20 79 1f	               jsr  a2hex
.1d26	a9 18		               lda  #<a2hexstr
.1d28	a0 1f		               ldy  #>a2hexstr
.1d2a	20 6b 1c	               jsr  puts
.1d2d	68		               pla
.1d2e	28		               plp
.1d2f	60		               rts
.1d30			kputrahexxy
.1d30			bputrahexxy
.1d30			putrahexxy
.1d30	08		               php
.1d31	20 79 1f	               jsr  a2hex
.1d34	a9 15		               lda  #<a2hexpos
.1d36	a0 1f		               ldy  #>a2hexpos
.1d38	20 cb 1c	               jsr  putsxy
.1d3b	68		               pla
.1d3c	28		               plp
.1d3d	60		               rts
.1d3e			putrahexcxy
.1d3e	08		               php
.1d3f	20 79 1f	               jsr  a2hex
.1d42	a9 15		               lda  #<a2hexpos
.1d44	a0 1f		               ldy  #>a2hexpos
.1d46	20 f4 1c	               jsr  putscxy
.1d49	68		               pla
.1d4a	28		               plp
.1d4b	60		               rts
.1d4c			setinverse
.1d4c	48		               pha
.1d4d	a9 12		               lda  #$12
.1d4f	20 d2 ff	               jsr  $ffd2
.1d52	68		               pla
.1d53	60		               rts
.1d54			clrinverse
.1d54	48		               pha
.1d55	a9 92		               lda  #$92
.1d57	20 d2 ff	               jsr  $ffd2
.1d5a	68		               pla
.1d5b	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.1d5c			push
.1d5c	08		          php            ; stack : flg, pcl, pch
.1d5d	78		          sei
.1d5e	8d 98 1d	          sta  ra        ; save a
.1d61	68		          pla            ; stack : pcl, pch
.1d62	8d 97 1d	          sta  rp        ; save rp
.1d65	68		          pla            ; stack : pch
.1d66	8d 99 1d	          sta  pc        ; save pcl
.1d69	68		          pla            ; stack : -
.1d6a	8d 9a 1d	          sta  pc+1      ; save pch
.1d6d	a5 fb		          lda  zpage1    ; get zpage1 low byte
.1d6f	48		          pha            ; stack : zp1l
.1d70	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.1d72	48		          pha            ; stack : zp1h, zp1l
.1d73	a5 fd		          lda  zpage2    ; get zpage2 low byte
.1d75	48		          pha            ; stack : zp2l, zp1h, zp1l
.1d76	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.1d78	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1d79	ad 97 1d	          lda  rp        ; get rp
.1d7c	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1d7d	ad 98 1d	          lda  ra        ; get a
.1d80	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1d81	8a		          txa            ; get x
.1d82	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1d83	98		          tya            ; get y
.1d84	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1d85	ad 9a 1d	          lda  pc+1      ; get pch
.1d88	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1d89	ad 99 1d	          lda  pc        ; get pcl
.1d8c	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1d8d	ad 97 1d	          lda  rp        ; get rp
.1d90	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1d91	ad 98 1d	          lda  ra        ; get a
.1d94	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1d95	58		          cli
.1d96	60		          rts
>1d97	00		rp        .byte     0
>1d98	00		ra        .byte     0
>1d99	00 00		pc        .word     0
.1d9b			pull
.1d9b			pop
.1d9b	78		          sei
.1d9c	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1d9d	8d d0 1d	          sta  pc        ; save pcl
.1da0	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1da1	8d d1 1d	          sta  pc+1      ; save pch
.1da4	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1da5	a8		          tay            ; set y
.1da6	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1da7	aa		          tax            ; set x
.1da8	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1da9	8d cf 1d	          sta  ra        ; save a
.1dac	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1dad	8d ce 1d	          sta  rp        ; save rp
.1db0	68		          pla            ; stack : zp2l, zp1h, zp1l
.1db1	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.1db3	68		          pla            ; stack : zp1h, zp1l
.1db4	85 fd		          sta  zpage2    ; get zpage2 High byte
.1db6	68		          pla            ; stack : zp1l
.1db7	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.1db9	68		          pla            ; stack :
.1dba	85 fb		          sta  zpage1    ; get zpage1 High byte
.1dbc	ad d1 1d	          lda  pc+1      ; get pch
.1dbf	48		          pha            ; stack : pch
.1dc0	ad d0 1d	          lda  pc
.1dc3	48		          pha            ; stack : pcl, pch
.1dc4	ad ce 1d	          lda  rp        ; get rp
.1dc7	48		          pha            ; stack : rp, pcl, pch
.1dc8	ad cf 1d	          lda  ra        ; set ra
.1dcb	58		          cli
.1dcc	28		          plp            ; stack : pcl, pch
.1dcd	60		          rts
>1dce	00		rp        .byte     0
>1dcf	00		ra        .byte     0
>1dd0	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.1dd2			blkfill
.1dd2	20 5c 1d	bf0            jsr  push
.1dd5	20 93 1e	               jsr  savezp1
.1dd8	84 fc		               sty  zpage1+1
.1dda	a0 00		               ldy  #$00
.1ddc	84 fb		               sty  zpage1
.1dde	91 fb		bf1            sta  (zpage1),y
.1de0	c8		               iny
.1de1	d0 fb		               bne  bf1
.1de3	20 a2 1e	               jsr  restzp1
.1de6	20 9b 1d	               jsr  pop
.1de9	60		               rts
.1dea			memfill
.1dea	20 5c 1d	               jsr  push
.1ded	20 d2 1d	mf1            jsr  blkfill
.1df0	c8		               iny
.1df1	ca		               dex
.1df2	d0 f9		               bne  mf1
.1df4	20 9b 1d	               jsr  pop
.1df7	60		               rts
.1df8			memmove
.1df8	20 5c 1d	               jsr  push
.1dfb	ba		               tsx            ; On se crée un pointeur ...
.1dfc	8a		               txa
.1dfd	18		               clc
.1dfe	69 0b		               adc  #11
.1e00	a8		               tay
.1e01	a2 06		               ldx  #$06
.1e03	b9 00 01	nextbyte       lda  $0100,y
.1e06	99 52 1e	               sta  words,y
.1e09	c8		               iny
.1e0a	ca		               dex
.1e0b	d0 f6		               bne  nextbyte
.1e0d	ad 52 1e	               lda  s
.1e10	8d 29 1e	               sta  source+1
.1e13	ad 53 1e	               lda  s+1
.1e16	8d 2a 1e	               sta  source+2
.1e19	ad 54 1e	               lda  d
.1e1c	8d 26 1e	               sta  destin+1
.1e1f	ad 55 1e	               lda  d+1
.1e22	8d 27 1e	               sta  destin+2
.1e25	ad ff ff	destin         lda  $ffff
.1e28	8d ff ff	source         sta  $ffff
.1e2b	ee 26 1e	               inc  destin+1
.1e2e	d0 03		               bne  src
.1e30	ee 27 1e	               inc  destin+2
.1e33	ee 29 1e	src            inc  source+1
.1e36	d0 03		               bne  cnt
.1e38	ee 2a 1e	               inc  source+2
.1e3b	ad 56 1e	cnt            lda  compte
.1e3e	d0 08		               bne  decit
.1e40	ad 57 1e	               lda  compte+1
.1e43	f0 09		               beq  fini
.1e45	ce 57 1e	               dec  compte+1
.1e48	ce 56 1e	decit          dec  compte
.1e4b	4c 25 1e	               jmp  destin
.1e4e	20 9b 1d	fini           jsr  pop
.1e51	60		               rts
.1e52			words
>1e52	00 00		s         .word     $0000
>1e54	00 00		d         .word     $0000
>1e56	00 00		compte    .word     $0000
.1e58			decword
.1e58	20 5c 1d	               jsr  push
.1e5b	86 fd		               stx  zpage2
.1e5d	84 fe		               sty  zpage2+1
.1e5f	20 9b 1d	               jsr  pop
.1e62	60		               rts
.1e63			inczp1
.1e63	08		               php
.1e64	48		               pha
.1e65	e6 fb		               inc  zpage1
.1e67	a5 fb		               lda  zpage1
.1e69	d0 02		               bne  nopage
.1e6b	e6 fc		               inc  zpage1+1
.1e6d	68		nopage         pla
.1e6e	28		               plp
.1e6f	60		               rts
.1e70			deczp1
.1e70	08		                php
.1e71	48		                pha
.1e72	c6 fb		                dec  zpage1
.1e74	d0 02		                bne  nopage
.1e76	c6 fc		                dec  zpage1+1
.1e78	68		nopage          pla
.1e79	28		                plp
.1e7a	60		                rts
.1e7b			inczp2
.1e7b	08		               php
.1e7c	48		               pha
.1e7d	e6 fd		               inc  zpage2
.1e7f	a5 fd		               lda  zpage2
.1e81	d0 02		               bne  nopage
.1e83	e6 fe		               inc  zpage2+1
.1e85	68		nopage         pla
.1e86	28		               plp
.1e87	60		               rts
.1e88			deczp2
.1e88	08		               php
.1e89	48		               pha
.1e8a	a5 fd		               lda  zpage2
.1e8c	d0 02		               bne  nopage
.1e8e	c6 fe		               dec  zpage2+1
.1e90	68		nopage         pla
.1e91	28		               plp
.1e92	60		               rts
.1e93			savezp1
.1e93	08		               php
.1e94	48		               pha
.1e95	a5 fb		               lda  zpage1
.1e97	8d 0f 1f	               sta  zp1
.1e9a	a5 fc		               lda  zpage1+1
.1e9c	8d 10 1f	               sta  zp1+1
.1e9f	68		               pla
.1ea0	28		               plp
.1ea1	60		               rts
.1ea2			restzp1
.1ea2	08		               php
.1ea3	48		               pha
.1ea4	ad 0f 1f	               lda zp1
.1ea7	85 fb		               sta zpage1
.1ea9	ad 10 1f	               lda zp1+1
.1eac	85 fc		               sta zpage1+1
.1eae	68		               pla
.1eaf	28		               plp
.1eb0	60		               rts
.1eb1			savezp2
.1eb1	08		         php
.1eb2	48		         pha
.1eb3	a5 fd		         lda zpage2
.1eb5	8d 11 1f	         sta zp2
.1eb8	a5 fe		         lda zpage2+1
.1eba	8d 12 1f	         sta zp2+1
.1ebd	68		         pla
.1ebe	28		         plp
.1ebf	60		         rts
.1ec0			restzp2
.1ec0	08		                php
.1ec1	48		                pha
.1ec2	ad 11 1f	                lda  zp2
.1ec5	85 fd		                sta  zpage2
.1ec7	ad 12 1f	                lda  zp2+1
.1eca	85 fe		                sta  zpage2+1
.1ecc	68		                pla
.1ecd	28		                plp
.1ece	60		                rts
.1ecf			xy2addr
.1ecf	08		                php
.1ed0	48		                pha
.1ed1	8a		                txa
.1ed2	48		                pha
.1ed3	98		                tya
.1ed4	48		                pha
.1ed5	ad 0a 1f	                lda     addr1+1
.1ed8	8d 0c 1f	                sta     addr2+1
.1edb	ad 09 1f	                lda     addr1
.1ede	8d 0b 1f	                sta     addr2
.1ee1	c0 00		                cpy     #$00
.1ee3	f0 0f		                beq     addx
.1ee5	18		moreline        clc
.1ee6	6d 08 1f	                adc     ymult
.1ee9	90 03		                bcc     norepy
.1eeb	ee 0c 1f	                inc     addr2+1
.1eee	8d 0b 1f	norepy          sta     addr2
.1ef1	88		                dey
.1ef2	d0 f1		                bne     moreline
.1ef4	8a		addx            txa
.1ef5	18		                clc
.1ef6	6d 0b 1f	                adc     addr2
.1ef9	90 03		                bcc     thatsit
.1efb	ee 0c 1f	                inc     addr2+1
.1efe	8d 0b 1f	thatsit         sta     addr2
.1f01	68		                pla
.1f02	a8		                tay
.1f03	68		                pla
.1f04	aa		                tax
.1f05	68		                pla
.1f06	28		                plp
.1f07	60		                rts
>1f08	28		ymult          .byte     40
>1f09	00 00		addr1          .word     $0000
>1f0b	00 00		addr2          .word     $0000
>1f0d	00 00		bytecnt        .word     $0000
>1f0f	00 00		zp1        .word   $0000
>1f11	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>1f13	01		a2hexcol       .byte     1              ; pour aputscxy
>1f14	00		a2hexbkcol     .byte     %00000000
.1f15			a2hexpos
>1f15	00		a2hexpx        .byte     0              ; pour aputsxy
>1f16	00		a2hexpy        .byte     0
>1f17	24		a2hexprefix    .byte     "$"            ; pour aputs
>1f18	00 00		a2hexstr       .word     $00
>1f1a	00 00		               .word     $00
>1f1c	00		               .byte     0              ; 0 end string
>1f1d	30 30 30 30	abin           .null     "00000000"
>1f21	30 30 30 30 00
>1f26	20 20 20 00	adec           .null     "   "
.1f2a			putahexfmtxy
.1f2a	20 5c 1d	               jsr  push
.1f2d	20 79 1f	               jsr  a2hex
.1f30	ae 15 1f	               ldx  a2hexpx
.1f33	ac 16 1f	               ldy  a2hexpy
.1f36	20 85 1c	               jsr  gotoxy
.1f39	a2 17		               ldx  #<a2hexprefix
.1f3b	a0 1f		               ldy  #>a2hexprefix
.1f3d	20 6b 1c	               jsr  puts
.1f40	20 9b 1d	               jsr  pop
.1f43	60		               rts
.1f44			putahexfmt
.1f44	20 5c 1d	               jsr  push
.1f47	20 79 1f	               jsr  a2hex
.1f4a	a2 17		               ldx  #<a2hexprefix
.1f4c	a0 1f		               ldy  #>a2hexprefix
.1f4e	20 6b 1c	               jsr  puts
.1f51	20 9b 1d	               jsr  pop
.1f54	60		               rts
.1f55			putahex
.1f55	20 5c 1d	               jsr  push
.1f58	20 79 1f	               jsr  a2hex
.1f5b	a2 18		               ldx  #<a2hexstr
.1f5d	a0 1f		               ldy  #>a2hexstr
.1f5f	20 6b 1c	               jsr  puts
.1f62	20 9b 1d	               jsr  pop
.1f65	60		               rts
.1f66			nib2hex
.1f66	08		               php
.1f67	29 0f		               and  #$0f
.1f69	f8		               sed
.1f6a	18		               clc
.1f6b	69 90		               adc  #$90
.1f6d	69 40		               adc  #$40
.1f6f	d8		               cld
.1f70	28		               plp
.1f71	60		               rts
.1f72			lsra4bits
.1f72	08		               php
.1f73	4a		               lsr
.1f74	4a		               lsr
.1f75	4a		               lsr
.1f76	4a		               lsr
.1f77	28		               plp
.1f78	60		               rts
.1f79			a2hex
.1f79	08		               php
.1f7a	48		               pha
.1f7b	48		               pha
.1f7c	20 72 1f	               jsr  lsra4bits
.1f7f	20 66 1f	               jsr  nib2hex
.1f82	8d 18 1f	               sta  a2hexstr
.1f85	68		               pla
.1f86	20 66 1f	               jsr  nib2hex
.1f89	8d 19 1f	               sta  a2hexstr+1
.1f8c	a9 00		               lda  #$00                ; set end of string
.1f8e	8d 1a 1f	               sta  a2hexstr+2
.1f91	68		               pla
.1f92	28		               plp
.1f93	60		               rts
.1f94			xy2hex
.1f94	20 5c 1d	               jsr  push
.1f97	20 79 1f	               jsr  a2hex
.1f9a	8a		               txa
.1f9b	48		               pha
.1f9c	20 72 1f	               jsr  lsra4bits
.1f9f	20 66 1f	               jsr  nib2hex
.1fa2	8d 18 1f	               sta  a2hexstr
.1fa5	68		               pla
.1fa6	20 66 1f	               jsr  nib2hex
.1fa9	8d 19 1f	               sta  a2hexstr+1
.1fac	98		               tya
.1fad	48		               pha
.1fae	20 72 1f	               jsr  lsra4bits
.1fb1	20 66 1f	               jsr  nib2hex
.1fb4	8d 1a 1f	               sta  a2hexstr+2
.1fb7	68		               pla
.1fb8	20 66 1f	               jsr  nib2hex
.1fbb	8d 1b 1f	               sta  a2hexstr+3
.1fbe	a9 00		               lda  #$00                ; 0 ended string
.1fc0	8d 1c 1f	               sta  a2hexstr+4
.1fc3	20 9b 1d	               jsr  pop
.1fc6			atobin
.1fc6	20 5c 1d	               jsr  push
.1fc9	a2 08		               ldx  #8
.1fcb	a0 00		               ldy  #0
.1fcd	18		               clc
.1fce	2a		nextbit        rol
.1fcf	48		               pha
.1fd0	69 00		               adc  #$00
.1fd2	29 01		               and  #$01
.1fd4	20 66 1f	               jsr  nib2hex
.1fd7	99 1d 1f	               sta  abin,y
.1fda	68		               pla
.1fdb	c8		               iny
.1fdc	ca		               dex
.1fdd	d0 ef		               bne  nextbit
.1fdf	a9 00		               lda  #0
.1fe1	99 1d 1f	               sta  abin,y
.1fe4	20 9b 1d	               jsr  pull
.1fe7	60		               rts
.1fe8			putabin
.1fe8	20 c6 1f	               jsr     atobin
.1feb	20 5c 1d	               jsr     push
.1fee	a2 1d		               ldx     #<abin
.1ff0	a0 1f		               ldy     #>abin
.1ff2	20 6b 1c	               jsr     puts
.1ff5	20 9b 1d	               jsr     pop
.1ff8	60		               rts
.1ff9			printabin
.1ff9	20 5c 1d	               jsr     push
.1ffc	a2 1d		               ldx     #<abin
.1ffe	a0 1f		               ldy     #>abin
.2000	20 6b 1c	               jsr     puts
.2003	20 9b 1d	               jsr     pop
.2006	60		               rts
.2007			putabinfmt
.2007	08		               php
.2008	48		               pha
.2009	a9 25		               lda     #"%"
.200b	20 65 1c	               jsr     putch
.200e	68		               pla
.200f	20 e8 1f	               jsr     putabin
.2012	28		               plp
.2013	60		               rts
.2014			putabinxy
.2014	20 85 1c	               jsr     gotoxy
.2017	20 e8 1f	               jsr     putabin
.201a	60		               rts
.201b			putabinfmtxy
.201b	20 85 1c	               jsr     gotoxy
.201e	20 07 20	               jsr     putabinfmt
.2021	60		               rts
.2022			atodec
.2022	20 5c 1d	               jsr  push
.2025	f8		               sed
.2026	aa		               tax
.2027	a0 00		               ldy  #$00
.2029	a9 00		               lda  #$00
.202b	18		nextbit        clc
.202c	69 01		               adc  #$01
.202e	90 01		               bcc  decx
.2030	c8		               iny
.2031	ca		decx           dex
.2032	d0 f7		               bne  nextbit
.2034	48		               pha
.2035	98		               tya
.2036	20 66 1f	               jsr  nib2hex
.2039	8d 26 1f	               sta  adec
.203c	68		               pla
.203d	48		               pha
.203e	20 66 1f	               jsr  nib2hex
.2041	8d 28 1f	               sta  adec+2
.2044	68		               pla
.2045	6a		               ror
.2046	6a		               ror
.2047	6a		               ror
.2048	6a		               ror
.2049	20 66 1f	               jsr  nib2hex
.204c	8d 27 1f	               sta  adec+1
.204f	d8		               cld
.2050	20 9b 1d	               jsr  pull
.2053	60		               rts
>2054	00 00 00	buffer         .byte     0,0,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>2057	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>205b	00 00 00 00 00 00 00 00 00 0d 00 00
>2067	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>206b	00 00 00 00 00 00 00 00 00 00 00 00
>2077	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>207b	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>2087	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>208b	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>2097	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>209b	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>20a7	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>20ab	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>20b7	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>20bb	00 00 00 00 00 00 00 00 00 00 00 00
>20c7	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>20cb	00 00 00 00 00 00 00 00 00 00 00 00
>20d7	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>20db	00 00 00 00 00 00 00 00 00 00 00 00
>20e7	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>20eb	00 00 00 00 00 00 00 00 00 00 00 00
>20f7	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>20fb	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>2107	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>210b	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>2117	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>211b	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>2127	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>212b	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>2137	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>213b	00 00 00 00 00 00 00 00 00 00 00 00
>2147	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>214b	00 00 00 00 00 00 00 00 00 00 00 00
.2157			waitstop
.2157	20 5c 1d	               jsr  push
.215a	20 ed f6	wait           jsr  k_stop
.215d	d0 fb		               bne  wait
.215f	20 9b 1d	               jsr  pop
.2162	60		               rts
.2163			anykey
.2163	08		               php
.2164	48		               pha
.2165	a5 cb		nokey          lda 203
.2167	c9 40		               cmp #64
.2169	f0 fa		               beq nokey
.216b	20 71 21	               jsr releasekey
.216e	68		               pla
.216f	28		               plp
.2170	60		               rts
.2171			releasekey
.2171	08		               php
.2172	48		               pha
.2173	a5 cb		keypressed     lda 203
.2175	c9 40		               cmp #64
.2177	d0 fa		               bne keypressed
.2179	68		               pla
.217a	28		               plp
.217b	60		               rts
.217c			getkey
.217c	20 e4 ff	again          jsr  getin
.217f	c9 00		               cmp  #0
.2181	f0 f9		               beq  again
.2183	60		               rts
.2184			waitkey
.2184	20 5c 1d	               jsr  push
.2187	8d d5 21	               sta  thekey
.218a	20 e4 ff	nope           jsr  getin
.218d	20 d2 ff	               jsr  chrout
.2190	cd d5 21	               cmp  thekey
.2193	d0 f5		               bne  nope
.2195	20 d2 ff	               jsr  chrout
.2198	20 9b 1d	               jsr  pop
.219b	60		               rts
.219c			waitspace
.219c	20 5c 1d	               jsr  push
.219f	a9 7f		wait           lda  #$7f  ;%01111111
.21a1	8d 00 dc	               sta  $dc00
.21a4	ad 01 dc	               lda  $dc01
.21a7	29 10		               and  #$10  ;mask %00010000
.21a9	d0 f4		               bne  wait
.21ab	20 9b 1d	               jsr  pop
.21ae			waitsstop
.21ae	20 5c 1d	               jsr  push
.21b1	20 ed f6	wait           jsr  k_stop  ;%01111111
.21b4	d0 fb		               bne  wait
.21b6	20 9b 1d	               jsr  pop
.21b9			waitreturn
.21b9	20 5c 1d	               jsr  push
.21bc	ad d6 21	               lda  thecount
.21bf	8d 00 04	               sta  scrnram
.21c2	a9 02		               lda  #$02
.21c4	8d 00 d8	               sta  colorram
.21c7	20 e4 ff	nope           jsr  getin
.21ca	c9 0d		nohex          cmp  #$0d
.21cc	d0 f9		               bne  nope
.21ce	ee d6 21	               inc  thecount
.21d1	20 9b 1d	               jsr  pop
.21d4	60		               rts
>21d5	00		thekey         .byte   0
>21d6	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Thu Nov 16 03:13:58 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm

="20231115-164208"	version  = "20231115-164208"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

=$0400			scrnnewram     =    $0400
=14			charsdef       =    14
=9			grid_top       =    9
=1			grid_left      =    1
=16			grid_bot       =    grid_top + 7
=8			grid_right     =    grid_left + 7
=$03			mesgcol        =    vcyan
=$01			menu1col1      =    vblanc   ;vvert1
=$0f			menu1col2      =    vgris2     ;vvert
=$01			menu2col1      =    vblanc
=$0f			menu2col2      =    vgris2
=$01			flashcol       =    vblanc
=$07			whoamicol      =    vjaune
=$0d			charcolor      =    vvert1
.080d			main
.080d	20 82 1f	               jsr  push
.0810	20 54 1e	               jsr  scrmaninit
.0813	08		               php
.0814	48		               pha
.0815	a9 08		               lda  #$08
.0817	20 d2 ff	               jsr  $ffd2
.081a	68		               pla
.081b	28		               plp
.081c	20 59 09	               jsr  splashscreen
.081f			wait
.081f	20 d4 0e	               jsr  copycharset
.0822	20 3a 1e	               jsr  screendis
.0825	20 74 1e	               jsr  cls
.0828	20 be 0e	               jsr  setscreenptr
.082b	20 b8 09	               jsr  setdefaultchar
.082e	20 35 0f	               jsr  staticscreen
.0831	20 23 0e	               jsr  drawbitmap
.0834	a9 00		               lda  #$00
.0836	8d 46 09	               sta  fkeyset
.0839	20 71 0f	               jsr  showfkeys
.083c	20 4d 16	               jsr  f8action
.083f	20 4d 16	               jsr  f8action
.0842	a9 00		               lda  #$00
.0844	20 47 1e	               jsr  screenena
.0847	20 c9 0b	               jsr  keyaction
.084a	20 74 1e	               jsr  cls
.084d	20 59 09	               jsr  splashscreen
.0850	20 74 1e	               jsr  cls
.0853	20 c1 1f	               jsr  pop
.0856	60		               rts
.0857			copychar
.0857	20 82 1f	               jsr  push
.085a	20 93 08	               jsr  getvalidkey
.085d	ad 33 0f	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0860	85 fb		               sta  zpage1
.0862	ad 34 0f	               lda  bitmapaddr+1
.0865	85 fc		               sta  zpage1+1
.0867	ae c9 08	               ldx  copykey
.086a	bd 7d 22	               lda  asciitorom,x
.086d	aa		               tax
.086e	e0 00		               cpx  #$00
.0870	f0 08		               beq  no_offset      ; sommes nous déja à 0
.0872	a9 08		addagain       lda  #$08
.0874	20 bf 10	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0877	ca		               dex                 ; pour chaque caracteres
.0878	d0 f8		               bne  addagain
.087a	ad 4a 09	no_offset      lda  mapaddr        ; le caractere actuel
.087d	85 fd		               sta  zpage2         ;
.087f	ad 4b 09	               lda  mapaddr+1      ;
.0882	85 fe		               sta  zpage2+1       ;
.0884	a0 00		               ldy  #$00
.0886	b1 fb		nextbyte       lda  (zpage1),y
.0888	91 fd		               sta  (zpage2),y
.088a	c8		               iny
.088b	c0 08		               cpy  #$08
.088d	d0 f7		               bne  nextbyte
.088f	20 c1 1f	out            jsr  pop
.0892	60		               rts
.0893			thismapaddr
.0893			getvalidkey
.0893	20 82 1f	               jsr  push
.0896	20 82 1f	               jsr  push
.0899	a2 68		               ldx  #<blankmsg
.089b	a0 18		               ldy  #>blankmsg
.089d	20 1a 1f	               jsr  putscxy
.08a0	a2 59		               ldx  #<copychar_msg
.08a2	a0 1a		               ldy  #>copychar_msg
.08a4	20 1a 1f	               jsr  putscxy
.08a7	20 c1 1f	               jsr  pop
.08aa	20 a2 23	getgoodkey     jsr  getkey
.08ad	8d c9 08	               sta  copykey
.08b0	aa		               tax
.08b1	bc 7d 22	               ldy  asciitorom,x
.08b4	c4 00		               cpy  $00
.08b6	d0 0a		               bne  goodone
.08b8	ae c9 08	               ldx  copykey
.08bb	e0 40		               cpx  #$40
.08bd	f0 03		               beq  goodone
.08bf	4c aa 08	               jmp  getgoodkey
.08c2	20 8b 1e	goodone        jsr  putch
.08c5	20 c1 1f	               jsr  pop
.08c8	60		               rts
>08c9	00		copykey        .byte 0
.08ca			getfname
.08ca	20 82 1f	               jsr  push
.08cd	20 82 1f	               jsr  push
.08d0	a2 68		               ldx  #<blankmsg
.08d2	a0 18		               ldy  #>blankmsg
.08d4	20 1a 1f	               jsr  putscxy
.08d7	a2 82		               ldx  #<fname_msg
.08d9	a0 1a		               ldy  #>fname_msg
.08db	20 1a 1f	               jsr  putscxy
.08de	20 c1 1f	               jsr  pop
.08e1	a2 00		               ldx  #$00
.08e3	8e 2a 09	               stx  count
.08e6	20 a2 23	getanother     jsr  getkey
.08e9	c9 30		               cmp  #$30      ; 0
.08eb	30 f9		               bmi  getanother
.08ed	c9 3a		               cmp  #$3a      ; 9+1
.08ef	30 0b		               bmi  goodone
.08f1	c9 41		isitletter     cmp  #$41      ; A
.08f3	30 f1		               bmi  getanother
.08f5	c9 5b		               cmp  #$5b      ; Z+1
.08f7	30 03		               bmi  goodone
.08f9	4c e6 08	               jmp  getanother
.08fc	20 8b 1e	goodone        jsr  putch
.08ff	ae 2a 09	               ldx  count
.0902	9d 31 09	               sta  name,x
.0905	ee 2a 09	               inc  count
.0908	ae 2a 09	               ldx  count
.090b	e0 06		               cpx  #$06
.090d	f0 03		               beq  finish
.090f	4c e6 08	               jmp  getanother
.0912			finish
.0912	20 82 1f	               jsr  push
.0915	a2 68		               ldx  #<blankmsg
.0917	a0 18		               ldy  #>blankmsg
.0919	20 1a 1f	               jsr  putscxy
.091c	a2 2b		               ldx  #<pfname
.091e	a0 09		               ldy  #>pfname
.0920	20 1a 1f	               jsr  putscxy
.0923	20 c1 1f	               jsr  pop
.0926	20 c1 1f	               jsr  pop
.0929	60		               rts
>092a	00		count          .byte     0
>092b	01 01 05	pfname         .byte     1,1,5
>092e	40 30 3a	fname          .text     "@0:"
>0931	3f 3f 3f 3f	name           .text     "??????"
>0935	3f 3f
>0937	2e 43 48 52	ext            .null     ".chr"
>093b	00
>093c	00		device         .byte     0
>093d	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>0941	08 04 02 01
>0945	00		editmode       .byte     0
>0946	00		fkeyset        .byte     0
>0947	00		currentchar    .byte     0
>0948	00		currentkey     .byte     0
>0949	00		bitmapoffset   .byte     0
>094a	00 00		mapaddr        .word     0
>094c	00 00		byteaddr       .word     0
>094e	00 00		gridaddr       .word     0
>0950	09		cursln         .byte     grid_top
>0951	01		curscl         .byte     grid_left

;******  Processing file: routines.asm

.0952			template
.0952	20 82 1f	               jsr  push
.0955	20 c1 1f	               jsr  pop
.0958	60		               rts
.0959			splashscreen
.0959	20 82 1f	               jsr  push
.095c	20 74 1e	               jsr  cls
.095f	a2 e1		               ldx #<whoami0
.0961	a0 1a		               ldy #>whoami0
.0963	20 1a 1f	               jsr putscxy
.0966	a2 06		               ldx #<whoami1
.0968	a0 1b		               ldy #>whoami1
.096a	20 1a 1f	               jsr putscxy
.096d	a2 2d		               ldx #<whoami2
.096f	a0 1b		               ldy #>whoami2
.0971	20 1a 1f	               jsr putscxy
.0974	a2 52		               ldx #<whoami3
.0976	a0 1b		               ldy #>whoami3
.0978	20 1a 1f	               jsr putscxy
.097b	a2 77		               ldx #<whoami4
.097d	a0 1b		               ldy #>whoami4
.097f	20 1a 1f	               jsr putscxy
.0982	a2 9c		               ldx #<whoami5
.0984	a0 1b		               ldy #>whoami5
.0986	20 1a 1f	               jsr putscxy
.0989	a2 c1		               ldx #<whoami6
.098b	a0 1b		               ldy #>whoami6
.098d	20 1a 1f	               jsr putscxy
.0990	a2 e6		               ldx #<whoami7
.0992	a0 1b		               ldy #>whoami7
.0994	20 1a 1f	               jsr putscxy
.0997	a2 0b		               ldx #<whoami8
.0999	a0 1c		               ldy #>whoami8
.099b	20 1a 1f	               jsr putscxy
.099e	a2 30		               ldx #<whoami9
.09a0	a0 1c		               ldy #>whoami9
.09a2	20 1a 1f	               jsr putscxy
.09a5	20 dd 10	               jsr  delay
.09a8	20 dd 10	               jsr  delay
.09ab	20 dd 10	               jsr  delay
.09ae	20 dd 10	               jsr  delay
.09b1	20 dd 10	               jsr  delay
.09b4	20 c1 1f	               jsr  pop
.09b7	60		               rts
.09b8			setdefaultchar
.09b8	20 82 1f	               jsr  push
.09bb	a9 40		               lda  #$40
.09bd	8d 48 09	               sta  currentkey
.09c0	aa		               tax
.09c1	bc 7d 22	               ldy  asciitorom,x
.09c4	8c 49 09	               sty  bitmapoffset
.09c7	20 82 0a	               jsr  showkeyval
.09ca	20 23 0e	               jsr  drawbitmap
.09cd	20 82 1f	               jsr  push
.09d0	a2 0d		               ldx  #13
.09d2	a0 0c		               ldy  #12
.09d4	20 ab 1e	               jsr  gotoxy
.09d7	20 c1 1f	               jsr  pop
.09da	20 8b 1e	               jsr  putch
.09dd	20 82 1f	               jsr  push
.09e0	a2 11		               ldx  #17
.09e2	a0 05		               ldy  #5
.09e4	20 ab 1e	               jsr  gotoxy
.09e7	20 c1 1f	               jsr  pop
.09ea	20 48 22	               jsr  atodec
.09ed	20 82 1f	               jsr  push
.09f0	a2 4c		isx            ldx  #<adec
.09f2	a0 21		isy            ldy  #>adec
.09f4	20 91 1e	               jsr  puts
.09f7	20 c1 1f	               jsr  pull
.09fa	20 c1 1f	               jsr  pop
.09fd	60		               rts
.09fe			resetmenuacolor
.09fe	20 82 1f	               jsr  push
.0a01	a9 01		               lda  #menu1col1
.0a03	8d 9a 1c	               sta  f1abutton
.0a06	8d ce 1c	               sta  f3abutton
.0a09	8d 02 1d	               sta  f5abutton
.0a0c	8d 36 1d	               sta  f7abutton
.0a0f	a9 0f		               lda  #menu2col2
.0a11	8d b4 1c	               sta  f2abutton
.0a14	8d e8 1c	               sta  f4abutton
.0a17	8d 1c 1d	               sta  f6abutton
.0a1a	8d 50 1d	               sta  f8abutton
.0a1d	20 c1 1f	               jsr  pop
.0a20	60		               rts
.0a21			resetmenubcolor
.0a21	20 82 1f	               jsr  push
.0a24	a9 01		               lda  #menu2col1
.0a26	8d 6a 1d	               sta  f1bbutton
.0a29	8d 9e 1d	               sta  f3bbutton
.0a2c	8d d2 1d	               sta  f5bbutton
.0a2f	8d 06 1e	               sta  f7bbutton
.0a32	a9 01		               lda  #menu2col1
.0a34	8d 84 1d	               sta  f2bbutton
.0a37	8d b8 1d	               sta  f4bbutton
.0a3a	8d ec 1d	               sta  f6bbutton
.0a3d	8d 20 1e	               sta  f8bbutton
.0a40	20 c1 1f	               jsr  pop
.0a43	60		               rts
.0a44			setmenuacolor
.0a44	20 82 1f	               jsr  push
.0a47	8d 9a 1c	               sta  f1abutton
.0a4a	8d b4 1c	               sta  f2abutton
.0a4d	8d ce 1c	               sta  f3abutton
.0a50	8d e8 1c	               sta  f4abutton
.0a53	8d 02 1d	               sta  f5abutton
.0a56	8d 1c 1d	               sta  f6abutton
.0a59	8d 36 1d	               sta  f7abutton
.0a5c	8d 50 1d	               sta  f8abutton
.0a5f	20 c1 1f	               jsr  pop
.0a62	60		               rts
.0a63			setmenubcolor
.0a63	20 82 1f	               jsr  push
.0a66	8d 6a 1d	               sta  f1bbutton
.0a69	8d 84 1d	               sta  f2bbutton
.0a6c	8d 9e 1d	               sta  f3bbutton
.0a6f	8d b8 1d	               sta  f4bbutton
.0a72	8d d2 1d	               sta  f5bbutton
.0a75	8d ec 1d	               sta  f6bbutton
.0a78	8d 06 1e	               sta  f7bbutton
.0a7b	8d 20 1e	               sta  f8bbutton
.0a7e	20 c1 1f	               jsr  pop
.0a81	60		               rts
.0a82			showkeyval
.0a82	20 82 1f	               jsr  push
.0a85	20 82 1f	               jsr  push
.0a88	a2 01		               ldx  #1
.0a8a	a0 13		               ldy  #19
.0a8c	20 ab 1e	               jsr  gotoxy
.0a8f	20 c1 1f	               jsr  pop
.0a92	ad 48 09	               lda  currentkey
.0a95	20 8b 1e	               jsr  putch
.0a98	48		               pha
.0a99	a9 3d		               lda  #'='
.0a9b	20 8b 1e	               jsr  putch
.0a9e	a9 25		               lda  #'%'
.0aa0	20 8b 1e	               jsr  putch
.0aa3	68		               pla
.0aa4	20 0e 22	               jsr  putabin
.0aa7	20 82 1f	               jsr  push
.0aaa	a2 01		               ldx  #1
.0aac	a0 14		               ldy  #20
.0aae	20 ab 1e	               jsr  gotoxy
.0ab1	20 c1 1f	               jsr  pop
.0ab4	20 82 1f	               jsr  push
.0ab7	a2 83		isx            ldx  #<txt1
.0ab9	a0 0b		isy            ldy  #>txt1
.0abb	20 91 1e	               jsr  puts
.0abe	20 c1 1f	               jsr  pull
.0ac1	a9 24		               lda  #'$'
.0ac3	20 8b 1e	               jsr  putch
.0ac6	ad 48 09	               lda  currentkey
.0ac9	20 7b 21	               jsr  putahex
.0acc	20 82 1f	               jsr  push
.0acf	a2 01		               ldx  #1
.0ad1	a0 15		               ldy  #21
.0ad3	20 ab 1e	               jsr  gotoxy
.0ad6	20 c1 1f	               jsr  pop
.0ad9	20 82 1f	               jsr  push
.0adc	a2 8e		isx            ldx  #<txt2
.0ade	a0 0b		isy            ldy  #>txt2
.0ae0	20 91 1e	               jsr  puts
.0ae3	20 c1 1f	               jsr  pull
.0ae6	a9 24		               lda  #'$'
.0ae8	20 8b 1e	               jsr  putch
.0aeb	ad 34 0f	               lda  bitmapaddr+1
.0aee	20 7b 21	               jsr  putahex
.0af1	ad 33 0f	               lda  bitmapaddr
.0af4	20 7b 21	               jsr  putahex
.0af7	20 82 1f	               jsr  push
.0afa	a2 01		               ldx  #1
.0afc	a0 16		               ldy  #22
.0afe	20 ab 1e	               jsr  gotoxy
.0b01	20 c1 1f	               jsr  pop
.0b04	20 82 1f	               jsr  push
.0b07	a2 99		isx            ldx  #<txt3
.0b09	a0 0b		isy            ldy  #>txt3
.0b0b	20 91 1e	               jsr  puts
.0b0e	20 c1 1f	               jsr  pull
.0b11	a9 24		               lda  #'$'
.0b13	20 8b 1e	               jsr  putch
.0b16	ad 49 09	               lda  bitmapoffset
.0b19	20 7b 21	               jsr  putahex
.0b1c	20 82 1f	               jsr  push
.0b1f	a2 01		               ldx  #1
.0b21	a0 17		               ldy  #23
.0b23	20 ab 1e	               jsr  gotoxy
.0b26	20 c1 1f	               jsr  pop
.0b29	20 82 1f	               jsr  push
.0b2c	a2 a6		isx            ldx  #<txt4
.0b2e	a0 0b		isy            ldy  #>txt4
.0b30	20 91 1e	               jsr  puts
.0b33	20 c1 1f	               jsr  pull
.0b36	a9 24		               lda  #'$'
.0b38	20 8b 1e	               jsr  putch
.0b3b	ad 4b 09	               lda  mapaddr+1
.0b3e	20 7b 21	               jsr  putahex
.0b41	ad 4a 09	               lda  mapaddr
.0b44	20 7b 21	               jsr  putahex
.0b47	20 82 1f	               jsr  push
.0b4a	a2 01		               ldx  #1
.0b4c	a0 18		               ldy  #24
.0b4e	20 ab 1e	               jsr  gotoxy
.0b51	20 c1 1f	               jsr  pop
.0b54	20 82 1f	               jsr  push
.0b57	a2 b1		isx            ldx  #<txt5
.0b59	a0 0b		isy            ldy  #>txt5
.0b5b	20 91 1e	               jsr  puts
.0b5e	20 c1 1f	               jsr  pull
.0b61	ad 51 09	               lda  curscl
.0b64	20 7b 21	               jsr  putahex
.0b67	a9 da		               lda  #$da
.0b69	20 8b 1e	               jsr  putch
.0b6c	ad 50 09	               lda  cursln
.0b6f	20 7b 21	               jsr  putahex
.0b72	20 c1 1f	               jsr  pop
.0b75	60		               rts
>0b76	50 45 54 53	txt0           .null     "petscii :   "
>0b7a	43 49 49 20 3a 20 20 20 00
>0b83	4b 45 59 20	txt1           .null     "key code: "
>0b87	43 4f 44 45 3a 20 00
>0b8e	42 49 54 4d	txt2           .null     "bitmap..: "
>0b92	41 50 2e 2e 3a 20 00
>0b99	4f 46 46 53	txt3           .null     "offset..:   "
>0b9d	45 54 2e 2e 3a 20 20 20 00
>0ba6	4d 41 50 41	txt4           .null     "mapaddr.: "
>0baa	44 44 52 2e 3a 20 00
>0bb1	43 55 52 53	txt5           .null     "cursval.: "
>0bb5	56 41 4c 2e 3a 20 00
>0bbc	53 54 41 43	txt6           .null     "stack......:"
>0bc0	4b 2e 2e 2e 2e 2e 2e 3a 00
.0bc9			keyaction
.0bc9	20 82 1f	               jsr  push
.0bcc	20 a2 23	loop           jsr  getkey
.0bcf	c9 85		f1             cmp  #key_f1
.0bd1	d0 03		               bne  f2
.0bd3	4c 3f 0c	               jmp  dof1
.0bd6	c9 89		f2             cmp  #key_f2
.0bd8	d0 03		               bne  f3
.0bda	4c 45 0c	               jmp  dof2
.0bdd	c9 86		f3             cmp  #key_f3
.0bdf	d0 03		               bne  f4
.0be1	4c 4b 0c	               jmp  dof3
.0be4	c9 8a		f4             cmp  #key_f4
.0be6	d0 03		               bne  f5
.0be8	4c 51 0c	               jmp  dof4
.0beb	c9 87		f5             cmp  #key_f5
.0bed	d0 03		               bne  f6
.0bef	4c 57 0c	               jmp  dof5
.0bf2	c9 8b		f6             cmp  #key_f6
.0bf4	d0 03		               bne  f7
.0bf6	4c 5d 0c	               jmp  dof6
.0bf9	c9 88		f7             cmp  #key_f7
.0bfb	d0 03		               bne  f8
.0bfd	4c 63 0c	               jmp  dof7
.0c00	c9 8c		f8             cmp  #key_f8
.0c02	d0 03		               bne  ctrlx
.0c04	4c 69 0c	               jmp  dof8
.0c07	c9 18		ctrlx          cmp  #ctrl_x
.0c09	d0 03		               bne  ishex14
.0c0b	4c 6f 0c	               jmp  doquit
.0c0e	c9 14		ishex14        cmp  #$14
.0c10	d0 03		               bne  ishex12
.0c12	4c cc 0b	               jmp  loop
.0c15	c9 12		ishex12        cmp  #$12
.0c17	d0 03		               bne  reste
.0c19	4c cc 0b	               jmp  loop
.0c1c			reste
.0c1c	20 82 1f	               jsr  push
.0c1f	a2 0d		               ldx  #13
.0c21	a0 0c		               ldy  #12
.0c23	20 ab 1e	               jsr  gotoxy
.0c26	20 c1 1f	               jsr  pop
.0c29	20 8b 1e	               jsr  putch
.0c2c	8d 48 09	               sta  currentkey
.0c2f	aa		               tax
.0c30	bc 7d 22	               ldy  asciitorom,x
.0c33	8c 49 09	               sty  bitmapoffset
.0c36	20 82 0a	               jsr  showkeyval
.0c39	20 23 0e	               jsr  drawbitmap
.0c3c	4c cc 0b	               jmp  loop
.0c3f	20 f3 10	dof1           jsr  f1action  ;edit/reverse
.0c42	4c cc 0b	               jmp  loop
.0c45	20 d6 11	dof2           jsr  f2action  ;save/flip vert
.0c48	4c cc 0b	               jmp  loop
.0c4b	20 8e 12	dof3           jsr  f3action  ;load/flip horz
.0c4e	4c cc 0b	               jmp  loop
.0c51	20 57 13	dof4           jsr  f4action  ;copy/scroll r
.0c54	4c cc 0b	               jmp  loop
.0c57	20 20 14	dof5           jsr  f5action  ;clear/scroll l
.0c5a	4c cc 0b	               jmp  loop
.0c5d	20 d8 14	dof6           jsr  f6action  ;fill;/scroll up
.0c60	4c cc 0b	               jmp  loop
.0c63	20 90 15	dof7           jsr  f7action  ;clear;/scroll down
.0c66	4c cc 0b	               jmp  loop
.0c69	20 4d 16	dof8           jsr  f8action  ; function
.0c6c	4c cc 0b	               jmp  loop
.0c6f	20 c1 1f	doquit         jsr  pop
.0c72	60		               rts
.0c73			editor
.0c73	20 82 1f	               jsr  push
.0c76	20 82 1f	               jsr  push
.0c79	a2 68		               ldx  #<blankmsg
.0c7b	a0 18		               ldy  #>blankmsg
.0c7d	20 1a 1f	               jsr  putscxy
.0c80	a2 cc		               ldx  #<exit_msg
.0c82	a0 1a		               ldy  #>exit_msg
.0c84	20 1a 1f	               jsr  putscxy
.0c87	20 c1 1f	               jsr  pop
.0c8a	20 82 1f	               jsr  push
.0c8d	a2 68		               ldx  #<blankmsg
.0c8f	a0 18		               ldy  #>blankmsg
.0c91	20 1a 1f	               jsr  putscxy
.0c94	a2 af		               ldx  #<edit_msg
.0c96	a0 18		               ldy  #>edit_msg
.0c98	20 1a 1f	               jsr  putscxy
.0c9b	20 c1 1f	               jsr  pop
.0c9e	a9 0c		               lda  #vgris1
.0ca0	20 44 0a	               jsr  setmenuacolor
.0ca3	a9 01		               lda  #menu1col1
.0ca5	8d 9a 1c	               sta  f1abutton
.0ca8	20 71 0f	               jsr  showfkeys
.0cab	20 df 0d	               jsr  setcurs
.0cae	ad 48 09	               lda  currentkey
.0cb1	20 82 1f	               jsr  push
.0cb4	a2 11		               ldx  #17
.0cb6	a0 05		               ldy  #5
.0cb8	20 ab 1e	               jsr  gotoxy
.0cbb	20 c1 1f	               jsr  pop
.0cbe	20 48 22	               jsr  atodec
.0cc1	20 82 1f	               jsr  push
.0cc4	a2 4c		isx            ldx  #<adec
.0cc6	a0 21		isy            ldy  #>adec
.0cc8	20 91 1e	               jsr  puts
.0ccb	20 c1 1f	               jsr  pull
.0cce	20 23 0e	               jsr  drawbitmap
.0cd1	20 a2 23	ed_loop        jsr  getkey
.0cd4	c9 91		cu             cmp  #cursu
.0cd6	d0 03		               bne  cd
.0cd8	4c 5c 0d	               jmp  do_up
.0cdb	c9 11		cd             cmp  #cursd
.0cdd	d0 03		               bne  cl
.0cdf	4c 6f 0d	               jmp  do_down
.0ce2	c9 9d		cl             cmp  #cursl
.0ce4	d0 03		               bne  cr
.0ce6	4c 82 0d	               jmp  do_left
.0ce9	c9 1d		cr             cmp  #cursr
.0ceb	d0 03		               bne  cx
.0ced	4c 95 0d	               jmp  do_right
.0cf0	c9 18		cx             cmp  #ctrl_x
.0cf2	d0 03		               bne  sp
.0cf4	4c b1 0d	               jmp  do_ctrlx
.0cf7	c9 20		sp             cmp  #$20
.0cf9	d0 03		               bne  ishex14
.0cfb	4c a8 0d	               jmp  do_swap
.0cfe	c9 14		ishex14        cmp  #$14
.0d00	d0 03		               bne  ishex12
.0d02	4c a8 0d	               jmp  do_swap
.0d05	c9 12		ishex12        cmp  #$12
.0d07	d0 03		               bne  rest
.0d09	4c a8 0d	               jmp  do_swap
.0d0c			rest
.0d0c	20 82 1f	               jsr  push
.0d0f	a2 0d		               ldx  #13
.0d11	a0 0c		               ldy  #12
.0d13	20 ab 1e	               jsr  gotoxy
.0d16	20 c1 1f	               jsr  pop
.0d19	20 8b 1e	               jsr  putch
.0d1c	8d 48 09	               sta  currentkey
.0d1f	aa		               tax
.0d20	bc 7d 22	               ldy  asciitorom,x
.0d23	8c 49 09	               sty  bitmapoffset
.0d26	20 82 0a	               jsr  showkeyval
.0d29	20 23 0e	               jsr  drawbitmap
.0d2c	20 82 1f	               jsr  push
.0d2f	a2 0d		               ldx  #13
.0d31	a0 0c		               ldy  #12
.0d33	20 ab 1e	               jsr  gotoxy
.0d36	20 c1 1f	               jsr  pop
.0d39	20 8b 1e	               jsr  putch
.0d3c	20 82 1f	               jsr  push
.0d3f	a2 11		               ldx  #17
.0d41	a0 05		               ldy  #5
.0d43	20 ab 1e	               jsr  gotoxy
.0d46	20 c1 1f	               jsr  pop
.0d49	20 48 22	               jsr  atodec
.0d4c	20 82 1f	               jsr  push
.0d4f	a2 4c		isx            ldx  #<adec
.0d51	a0 21		isy            ldy  #>adec
.0d53	20 91 1e	               jsr  puts
.0d56	20 c1 1f	               jsr  pull
.0d59	4c ae 0d	               jmp  totop
.0d5c	ad 50 09	do_up          lda  cursln
.0d5f	c9 09		               cmp  #grid_top
.0d61	f0 4b		               beq  totop
.0d63	20 01 0e	               jsr  clrcurs
.0d66	ce 50 09	               dec  cursln
.0d69	20 df 0d	               jsr  setcurs
.0d6c	4c ae 0d	               jmp  totop
.0d6f	ad 50 09	do_down        lda  cursln
.0d72	c9 10		               cmp  #grid_bot
.0d74	f0 38		               beq  totop
.0d76	20 01 0e	               jsr  clrcurs
.0d79	ee 50 09	               inc  cursln
.0d7c	20 df 0d	               jsr  setcurs
.0d7f	4c ae 0d	               jmp  totop
.0d82	ad 51 09	do_left        lda  curscl
.0d85	c9 01		               cmp  #grid_left
.0d87	f0 25		               beq  totop
.0d89	20 01 0e	               jsr  clrcurs
.0d8c	ce 51 09	               dec  curscl
.0d8f	20 df 0d	               jsr  setcurs
.0d92	4c ae 0d	               jmp  totop
.0d95	ad 51 09	do_right       lda  curscl
.0d98	c9 08		               cmp  #grid_right
.0d9a	f0 12		               beq  totop
.0d9c	20 01 0e	               jsr  clrcurs
.0d9f	ee 51 09	               inc  curscl
.0da2	20 df 0d	               jsr  setcurs
.0da5	4c ae 0d	               jmp  totop
.0da8	20 b8 0d	do_swap        jsr  do_eor
.0dab	20 23 0e	               jsr  drawbitmap
.0dae	4c d1 0c	totop          jmp  ed_loop
.0db1	20 01 0e	do_ctrlx       jsr  clrcurs
.0db4	20 c1 1f	               jsr  pop
.0db7	60		               rts
.0db8			do_eor
.0db8	20 82 1f	               jsr  push
.0dbb	ad 4a 09	               lda  mapaddr
.0dbe	85 fd		               sta  zpage2
.0dc0	ad 4b 09	               lda  mapaddr+1
.0dc3	85 fe		               sta  zpage2+1
.0dc5	ae 50 09	               ldx  cursln     ; calcul de
.0dc8	ca		               dex            ; l'offset de
.0dc9	8a		               txa            ; la
.0dca	29 f7		               and  #$f7      ; ligne
.0dcc	a8		               tay
.0dcd	ae 51 09	               ldx  curscl
.0dd0	ca		               dex
.0dd1	bd 3d 09	               lda  eorval,x
.0dd4	51 fd		               eor  (zpage2),y
.0dd6	20 82 0a	               jsr  showkeyval
.0dd9	91 fd		               sta  (zpage2),y
.0ddb	20 c1 1f	               jsr  pop
.0dde	60		               rts
.0ddf			setcurs
.0ddf	20 82 1f	               jsr  push
.0de2	a2 01		               ldx  #grid_left
.0de4	ac 50 09	               ldy  cursln
.0de7	20 ab 1e	               jsr  gotoxy
.0dea	a9 da		               lda  #$da
.0dec	20 8b 1e	               jsr  putch
.0def	ae 51 09	               ldx  curscl
.0df2	e8		               inx
.0df3	a0 08		               ldy  #grid_top-1
.0df5	20 ab 1e	               jsr  gotoxy
.0df8	a9 da		               lda  #$da
.0dfa	20 8b 1e	               jsr  putch
.0dfd	20 c1 1f	               jsr  pop
.0e00	60		               rts
.0e01			clrcurs
.0e01	20 82 1f	               jsr  push
.0e04	a2 01		               ldx  #grid_left
.0e06	ac 50 09	               ldy  cursln
.0e09	20 ab 1e	               jsr  gotoxy
.0e0c	a9 20		               lda  #$20
.0e0e	20 8b 1e	               jsr  putch
.0e11	ae 51 09	               ldx  curscl
.0e14	e8		               inx
.0e15	a0 08		               ldy  #grid_top-1
.0e17	20 ab 1e	               jsr  gotoxy
.0e1a	a9 20		               lda  #$20
.0e1c	20 8b 1e	               jsr  putch
.0e1f	20 c1 1f	               jsr  pop
.0e22	60		               rts
.0e23			drawbitmap
.0e23	20 82 1f	               jsr  push
.0e26	20 68 0e	               jsr  calcmapaddr
.0e29	ad 4a 09	               lda  mapaddr        ; on pointe sur la table des bitmaps
.0e2c	85 fb		               sta  zpage1
.0e2e	ad 4b 09	               lda  mapaddr+1
.0e31	85 fc		               sta  zpage1+1
.0e33	a0 00		drawchar       ldy  #$00
.0e35	a2 09		               ldx  #grid_top      ;on replace la ...
.0e37	8e 40 0e	               stx  isy+1          ;ligne de départ
.0e3a	20 82 1f	nextline       jsr  push
.0e3d	a2 02		               ldx  #grid_left+1        ; la colonne
.0e3f	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.0e41	20 ab 1e	               jsr  gotoxy
.0e44	20 c1 1f	               jsr  pop
.0e47	b1 fb		               lda  (zpage1),y     ; on li une ligne
.0e49	20 ec 21	               jsr  atobin
.0e4c	20 97 0e	               jsr  abintograph
.0e4f	20 82 1f	               jsr  push
.0e52	a2 43		isx            ldx  #<abin
.0e54	a0 21		isy            ldy  #>abin
.0e56	20 91 1e	               jsr  puts
.0e59	20 c1 1f	               jsr  pull
.0e5c	ee 40 0e	               inc  isy+1
.0e5f	c8		               iny
.0e60	c0 08		               cpy  #$08
.0e62	30 d6		               bmi  nextline
.0e64	20 c1 1f	               jsr  pop
.0e67	60		               rts
.0e68			calcmapaddr
.0e68	20 82 1f	               jsr  push
.0e6b	ad 33 0f	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0e6e	85 fb		               sta  zpage1
.0e70	ad 34 0f	               lda  bitmapaddr+1
.0e73	85 fc		               sta  zpage1+1
.0e75	ae 49 09	               ldx  bitmapoffset
.0e78	e0 00		               cpx  #$00
.0e7a	f0 08		               beq  thesame         ; sommes nous déja à 0
.0e7c	a9 08		addagain       lda  #$08
.0e7e	20 bf 10	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0e81	ca		               dex                 ; pour chaque caracteres
.0e82	d0 f8		               bne  addagain
.0e84	48		thesame        pha
.0e85	a5 fb		               lda  zpage1
.0e87	8d 4a 09	               sta  mapaddr
.0e8a	a5 fc		               lda  zpage1+1
.0e8c	8d 4b 09	               sta  mapaddr+1
.0e8f	68		               pla
.0e90	20 82 0a	               jsr  showkeyval
.0e93	20 c1 1f	out            jsr  pop
.0e96	60		               rts
.0e97			abintograph
.0e97	20 82 1f	               jsr  push
.0e9a	a9 43		               lda  #<abin
.0e9c	85 fb		               sta  zpage1
.0e9e	a9 21		               lda  #>abin+1
.0ea0	85 fc		               sta  zpage1+1
.0ea2	a0 00		               ldy  #$00
.0ea4	b1 fb		nextbit        lda  (zpage1),y
.0ea6	c9 30		               cmp  #$30
.0ea8	f0 07		               beq  itszero
.0eaa	a9 d1		itsone         lda  #$d1
.0eac	91 fb		               sta  (zpage1),y
.0eae	4c b5 0e	               jmp  next
.0eb1	a9 2e		itszero        lda  #$2e
.0eb3	91 fb		               sta  (zpage1),y
.0eb5	c8		next           iny
.0eb6	c0 08		               cpy  #$08
.0eb8	30 ea		               bmi  nextbit
.0eba	20 c1 1f	               jsr  pop
.0ebd	60		               rts
.0ebe			setscreenptr
.0ebe	20 82 1f	               jsr  push
.0ec1	a9 08		               lda  #$08      ; basic commande to disable ...
.0ec3	20 d2 ff	               jsr  chrout    ; ... character set change.
.0ec6	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.0ec9	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.0ecb	09 0e		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.0ecd	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.0ed0	20 c1 1f	               jsr  pop
.0ed3	60		               rts
.0ed4			copycharset
.0ed4	20 82 1f	               jsr  push
.0ed7	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0eda	29 fe		               and  #%11111110     ;254
.0edc	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0edf	a5 01		               lda  u6510map       ;$01
.0ee1	29 fb		               and  #%11111011     ;251
.0ee3	85 01		               sta  u6510map       ;$01
.0ee5	20 fa 0e	               jsr  memcopy
.0ee8	a5 01		               lda  u6510map       ;$01
.0eea	09 04		               ora  #%00000100
.0eec	85 01		               sta  u6510map       ;$01
.0eee	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0ef1	09 01		               ora  #%00000001     ;254
.0ef3	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0ef6	20 c1 1f	               jsr  pop
.0ef9	60		               rts
.0efa			memcopy
.0efa	20 82 1f	               jsr  push
.0efd	ad 2f 0f	               lda  startaddr
.0f00	85 fb		               sta  zpage1
.0f02	ad 30 0f	               lda  startaddr+1
.0f05	85 fc		               sta  zpage1+1
.0f07	ad 33 0f	               lda  bitmapaddr
.0f0a	85 fd		               sta  zpage2
.0f0c	ad 34 0f	               lda  bitmapaddr+1
.0f0f	85 fe		               sta  zpage2+1
.0f11	a0 00		               ldy  #$00
.0f13	b1 fb		onemore        lda  (zpage1),y
.0f15	91 fd		               sta  (zpage2),y
.0f17	20 89 20	               jsr  inczp1
.0f1a	20 a1 20	               jsr  inczp2
.0f1d	a5 fc		               lda  zpage1+1
.0f1f	cd 32 0f	               cmp  stopaddr+1
.0f22	d0 ef		               bne  onemore
.0f24	a5 fb		               lda  zpage1
.0f26	cd 31 0f	               cmp  stopaddr
.0f29	d0 e8		               bne  onemore
.0f2b	20 c1 1f	               jsr  pop
.0f2e	60		               rts
=14336			bitmapmem =    charsdef * 1024     ;Calcul de la position ram des caracteres.
=61440			mstopaddr =    $d000+(4*$800)
>0f2f	00 d0		startaddr      .word     $d000               ; 53248
>0f31	00 f0		stopaddr       .word     mstopaddr           ; 55296
>0f33	00 38		bitmapaddr     .word     bitmapmem           ; $3000, 12288
.0f35			staticscreen
.0f35	48		               pha
.0f36	a9 0c		               lda  #vgris1
.0f38	8d 20 d0	               sta  $d020
.0f3b	68		               pla
.0f3c	48		               pha
.0f3d	a9 0b		               lda  #vgris
.0f3f	8d 21 d0	               sta  $d021
.0f42	68		               pla
.0f43	20 16 10	               jsr  showlines
.0f46	20 f2 0f	               jsr  showallchars
.0f49	20 5e 10	               jsr  showgrid
.0f4c	20 71 0f	               jsr  showfkeys
.0f4f	20 82 1f	               jsr  push
.0f52	a2 68		               ldx  #<blankmsg
.0f54	a0 18		               ldy  #>blankmsg
.0f56	20 1a 1f	               jsr  putscxy
.0f59	a2 b7		               ldx  #<quit_msg
.0f5b	a0 1a		               ldy  #>quit_msg
.0f5d	20 1a 1f	               jsr  putscxy
.0f60	20 c1 1f	               jsr  pop
.0f63	20 82 1f	               jsr  push
.0f66	a2 00		               ldx  #0
.0f68	a0 07		               ldy  #7
.0f6a	20 ab 1e	               jsr  gotoxy
.0f6d	20 c1 1f	               jsr  pop
.0f70	60		               rts
.0f71			showfkeys
.0f71	20 82 1f	               jsr  push
.0f74	ad 46 09	               lda  fkeyset
.0f77	c9 00		               cmp  #$0
.0f79	d0 3b		               bne  secondks
.0f7b	a2 9a		               ldx #<f1abutton
.0f7d	a0 1c		               ldy #>f1abutton
.0f7f	20 1a 1f	               jsr putscxy
.0f82	a2 b4		               ldx #<f2abutton
.0f84	a0 1c		               ldy #>f2abutton
.0f86	20 1a 1f	               jsr putscxy
.0f89	a2 ce		               ldx #<f3abutton
.0f8b	a0 1c		               ldy #>f3abutton
.0f8d	20 1a 1f	               jsr putscxy
.0f90	a2 e8		               ldx #<f4abutton
.0f92	a0 1c		               ldy #>f4abutton
.0f94	20 1a 1f	               jsr putscxy
.0f97	a2 02		               ldx #<f5abutton
.0f99	a0 1d		               ldy #>f5abutton
.0f9b	20 1a 1f	               jsr putscxy
.0f9e	a2 1c		               ldx #<f6abutton
.0fa0	a0 1d		               ldy #>f6abutton
.0fa2	20 1a 1f	               jsr putscxy
.0fa5	a2 36		               ldx #<f7abutton
.0fa7	a0 1d		               ldy #>f7abutton
.0fa9	20 1a 1f	               jsr putscxy
.0fac	a2 50		               ldx #<f8abutton
.0fae	a0 1d		               ldy #>f8abutton
.0fb0	20 1a 1f	               jsr putscxy
.0fb3	4c ee 0f	               jmp end
.0fb6			secondks
.0fb6	a2 6a		               ldx #<f1bbutton
.0fb8	a0 1d		               ldy #>f1bbutton
.0fba	20 1a 1f	               jsr putscxy
.0fbd	a2 84		               ldx #<f2bbutton
.0fbf	a0 1d		               ldy #>f2bbutton
.0fc1	20 1a 1f	               jsr putscxy
.0fc4	a2 9e		               ldx #<f3bbutton
.0fc6	a0 1d		               ldy #>f3bbutton
.0fc8	20 1a 1f	               jsr putscxy
.0fcb	a2 b8		               ldx #<f4bbutton
.0fcd	a0 1d		               ldy #>f4bbutton
.0fcf	20 1a 1f	               jsr putscxy
.0fd2	a2 d2		               ldx #<f5bbutton
.0fd4	a0 1d		               ldy #>f5bbutton
.0fd6	20 1a 1f	               jsr putscxy
.0fd9	a2 ec		               ldx #<f6bbutton
.0fdb	a0 1d		               ldy #>f6bbutton
.0fdd	20 1a 1f	               jsr putscxy
.0fe0	a2 06		               ldx #<f7bbutton
.0fe2	a0 1e		               ldy #>f7bbutton
.0fe4	20 1a 1f	               jsr putscxy
.0fe7	a2 20		               ldx #<f8bbutton
.0fe9	a0 1e		               ldy #>f8bbutton
.0feb	20 1a 1f	               jsr putscxy
.0fee	20 c1 1f	end            jsr  pop
.0ff1	60		               rts
.0ff2			showallchars
.0ff2	20 82 1f	               jsr push
.0ff5	20 82 1f	               jsr  push
.0ff8	a2 00		               ldx  #0
.0ffa	a0 00		               ldy  #0
.0ffc	20 ab 1e	               jsr  gotoxy
.0fff	20 c1 1f	               jsr  pop
.1002	a2 00		               ldx  #$00
.1004	8a		nextc          txa
.1005	9d 00 04	               sta  scrnnewram,x
.1008	a9 0d		               lda  #charcolor
.100a	9d 00 d8	               sta  colorram,x
.100d	e8		               inx
.100e	e0 80		               cpx  #$80
.1010	d0 f2		               bne  nextc
.1012	20 c1 1f	               jsr  pop
.1015	60		               rts
.1016			showlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.1016	20 82 1f	               jsr  push
.1019	a2 28		               ldx  #40
.101b	a9 40		               lda  #64
.101d	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.1020	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.1023	ca		               dex
.1024	e0 10		hline          cpx  #vlinepos
.1026	10 03		               bpl  notyet
.1028	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.102b	e0 00		notyet         cpx  #$00
.102d	d0 ee		               bne  nextl
.102f	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.1031	85 fb		               sta  zpage1
.1033	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.1035	85 fc		               sta  zpage1+1
.1037	a0 00		               ldy  #0
.1039	a9 72		               lda  #114
.103b	91 fb		               sta  (zpage1),y
.103d	20 cd 10	               jsr  zp1add40
.1040	a2 12		               ldx  #24-hline2
.1042	a9 5d		               lda  #93
.1044	91 fb		another93      sta  (zpage1),y
.1046	20 cd 10	               jsr  zp1add40
.1049	ca		               dex
.104a	d0 f8		               bne  another93
.104c	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.104e	85 fb		               sta  zpage1
.1050	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.1052	85 fc		               sta  zpage1+1
.1054	a0 00		               ldy  #0
.1056	a9 73		               lda  #115
.1058	91 fb		               sta  (zpage1),y
.105a	20 c1 1f	               jsr  pop
.105d	60		               rts
.105e			showgrid
.105e	20 82 1f	               jsr  push
.1061	20 3a 1e	               jsr  screendis
.1064	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.1066	85 fb		               sta  zpage1
.1068	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.106a	85 fc		               sta  zpage1+1
.106c	a2 08		               ldx  #8
.106e	a9 65		nextbox        lda  #101
.1070	a0 09		               ldy  #9
.1072	91 fb		               sta  (zpage1),y
.1074	88		               dey
.1075	a9 2e		               lda  #$2e
.1077	91 fb		nextcol        sta  (zpage1),y
.1079	88		               dey
.107a	d0 fb		               bne  nextcol
.107c	20 cd 10	               jsr  zp1add40
.107f	ca		               dex
.1080	d0 ec		               bne  nextbox
.1082	a0 08		               ldy  #8
.1084	a9 77		               lda  #119
.1086	91 fb		nextlin        sta  (zpage1),y
.1088	88		               dey
.1089	d0 fb		               bne  nextlin
.108b	a9 3e		               lda  #$3e
.108d	8d eb 05	               sta  scrnnewram+(40*(12))+11
.1090	a9 70		               lda  #$70                     ;+
.1092	8d c4 05	               sta  scrnnewram+(40*(11))+12
.1095	a9 43		               lda  #$43                     ;-
.1097	8d c5 05	               sta  scrnnewram+(40*(11))+13
.109a	a9 6e		               lda  #$6e                     ;+
.109c	8d c6 05	               sta  scrnnewram+(40*(11))+14
.109f	a9 5d		               lda  #$5d                     ;|
.10a1	8d ec 05	               sta  scrnnewram+(40*(12))+12
.10a4	a9 5d		               lda  #$5d                     ;|
.10a6	8d ee 05	               sta  scrnnewram+(40*(12))+14
.10a9	a9 6d		               lda  #$6d                     ;+
.10ab	8d 14 06	               sta  scrnnewram+(40*(13))+12
.10ae	a9 43		               lda  #$43                     ;-
.10b0	8d 15 06	               sta  scrnnewram+(40*(13))+13
.10b3	a9 7d		               lda  #$7d                     ;+
.10b5	8d 16 06	               sta  scrnnewram+(40*(13))+14
.10b8	20 47 1e	               jsr screenena
.10bb	20 c1 1f	               jsr  pop
.10be	60		               rts
.10bf			zp1addnum
.10bf	08		               php
.10c0	48		               pha
.10c1	18		               clc
.10c2	65 fb		               adc  zpage1
.10c4	90 02		               bcc  nocarry
.10c6	e6 fc		               inc  zpage1+1
.10c8	85 fb		nocarry        sta  zpage1
.10ca	68		               pla
.10cb	28		               plp
.10cc	60		               rts
.10cd			zp1add40
.10cd	08		               php
.10ce	48		               pha
.10cf	18		               clc
.10d0	a5 fb		               lda  zpage1
.10d2	69 28		               adc  #40
.10d4	90 02		               bcc  nocarry
.10d6	e6 fc		               inc  zpage1+1
.10d8	85 fb		nocarry        sta  zpage1
.10da	68		               pla
.10db	28		               plp
.10dc	60		               rts
.10dd			delay
.10dd	20 82 1f	               jsr  push
.10e0	a9 00		               lda  #$0
.10e2	aa		               tax
.10e3	a8		               tay
.10e4	ca		xagain         dex
.10e5	ca		               dex
.10e6	88		yagain         dey
.10e7	c0 00		               cpy  #$00
.10e9	d0 fb		               bne  yagain
.10eb	e0 00		               cpx  #$00
.10ed	d0 f5		               bne  xagain
.10ef	20 c1 1f	               jsr  pop
.10f2	60		               rts
.10f3			f1action
.10f3	48		               pha
.10f4	a9 ff		               lda  #$ff
.10f6	8d 45 09	               sta  editmode
.10f9	ad 46 09	               lda  fkeyset
.10fc	d0 78		               bne  menub
.10fe	20 82 1f	               jsr  push
.1101	a2 68		               ldx  #<blankmsg
.1103	a0 18		               ldy  #>blankmsg
.1105	20 1a 1f	               jsr  putscxy
.1108	a2 af		               ldx  #<f1a_msg
.110a	a0 18		               ldy  #>f1a_msg
.110c	20 1a 1f	               jsr  putscxy
.110f	20 c1 1f	               jsr  pop
.1112	08		               php
.1113	48		               pha
.1114	8a		               txa
.1115	48		               pha
.1116	ad 9a 1c	               lda  f1abutton
.1119	48		               pha
.111a	a9 92		               lda  #146
.111c	8d a9 1c	               sta  f1abutton+15
.111f	a9 01		               lda  #flashcol
.1121	8d 9a 1c	               sta  f1abutton
.1124	a2 9a		               ldx  #<f1abutton
.1126	a0 1c		               ldy  #>f1abutton
.1128	20 1a 1f	               jsr  putscxy
.112b	20 dd 10	               jsr  delay
.112e	a9 12		               lda  #18
.1130	8d a9 1c	               sta  f1abutton+15
.1133	68		               pla
.1134	8d 9a 1c	               sta  f1abutton
.1137	a2 9a		               ldx  #<f1abutton
.1139	a0 1c		               ldy  #>f1abutton
.113b	20 1a 1f	               jsr  putscxy
.113e	68		               pla
.113f	aa		               tax
.1140	68		               pla
.1141	28		               plp
.1142	20 73 0c	               jsr  editor
.1145	20 82 1f	               jsr  push
.1148	a2 68		               ldx  #<blankmsg
.114a	a0 18		               ldy  #>blankmsg
.114c	20 1a 1f	               jsr  putscxy
.114f	a2 b7		               ldx  #<quit_msg
.1151	a0 1a		               ldy  #>quit_msg
.1153	20 1a 1f	               jsr  putscxy
.1156	20 c1 1f	               jsr  pop
.1159	20 82 1f	               jsr  push
.115c	a2 68		               ldx  #<blankmsg
.115e	a0 18		               ldy  #>blankmsg
.1160	20 1a 1f	               jsr  putscxy
.1163	a2 23		               ldx  #<menua_msg
.1165	a0 1a		               ldy  #>menua_msg
.1167	20 1a 1f	               jsr  putscxy
.116a	20 c1 1f	               jsr  pop
.116d	20 fe 09	               jsr  resetmenuacolor
.1170	20 71 0f	               jsr  showfkeys
.1173	4c c0 11	               jmp  out
.1176			menub
.1176	20 82 1f	               jsr  push
.1179	a2 68		               ldx  #<blankmsg
.117b	a0 18		               ldy  #>blankmsg
.117d	20 1a 1f	               jsr  putscxy
.1180	a2 89		               ldx  #<f1b_msg
.1182	a0 19		               ldy  #>f1b_msg
.1184	20 1a 1f	               jsr  putscxy
.1187	20 c1 1f	               jsr  pop
.118a	08		               php
.118b	48		               pha
.118c	8a		               txa
.118d	48		               pha
.118e	ad 6a 1d	               lda  f1bbutton
.1191	48		               pha
.1192	a9 92		               lda  #146
.1194	8d 79 1d	               sta  f1bbutton+15
.1197	a9 01		               lda  #flashcol
.1199	8d 6a 1d	               sta  f1bbutton
.119c	a2 6a		               ldx  #<f1bbutton
.119e	a0 1d		               ldy  #>f1bbutton
.11a0	20 1a 1f	               jsr  putscxy
.11a3	20 dd 10	               jsr  delay
.11a6	a9 12		               lda  #18
.11a8	8d 79 1d	               sta  f1bbutton+15
.11ab	68		               pla
.11ac	8d 6a 1d	               sta  f1bbutton
.11af	a2 6a		               ldx  #<f1bbutton
.11b1	a0 1d		               ldy  #>f1bbutton
.11b3	20 1a 1f	               jsr  putscxy
.11b6	68		               pla
.11b7	aa		               tax
.11b8	68		               pla
.11b9	28		               plp
.11ba	20 35 18	               jsr  flipvert
.11bd	20 23 0e	               jsr  drawbitmap
.11c0	68		out            pla
.11c1	20 82 1f	               jsr  push
.11c4	a2 68		               ldx  #<blankmsg
.11c6	a0 18		               ldy  #>blankmsg
.11c8	20 1a 1f	               jsr  putscxy
.11cb	a2 94		               ldx  #<prompt_msg
.11cd	a0 18		               ldy  #>prompt_msg
.11cf	20 1a 1f	               jsr  putscxy
.11d2	20 c1 1f	               jsr  pop
.11d5	60		               rts
.11d6			f2action
.11d6	48		               pha
.11d7	a9 00		               lda  #$0
.11d9	8d 45 09	               sta  editmode
.11dc	ad 46 09	               lda  fkeyset
.11df	d0 4d		               bne  menub
.11e1	20 82 1f	               jsr  push
.11e4	a2 68		               ldx  #<blankmsg
.11e6	a0 18		               ldy  #>blankmsg
.11e8	20 1a 1f	               jsr  putscxy
.11eb	a2 ca		               ldx  #<f2a_msg
.11ed	a0 18		               ldy  #>f2a_msg
.11ef	20 1a 1f	               jsr  putscxy
.11f2	20 c1 1f	               jsr  pop
.11f5	08		               php
.11f6	48		               pha
.11f7	8a		               txa
.11f8	48		               pha
.11f9	ad b4 1c	               lda  f2abutton
.11fc	48		               pha
.11fd	a9 92		               lda  #146
.11ff	8d c3 1c	               sta  f2abutton+15
.1202	a9 01		               lda  #flashcol
.1204	8d b4 1c	               sta  f2abutton
.1207	a2 b4		               ldx  #<f2abutton
.1209	a0 1c		               ldy  #>f2abutton
.120b	20 1a 1f	               jsr  putscxy
.120e	20 dd 10	               jsr  delay
.1211	a9 12		               lda  #18
.1213	8d c3 1c	               sta  f2abutton+15
.1216	68		               pla
.1217	8d b4 1c	               sta  f2abutton
.121a	a2 b4		               ldx  #<f2abutton
.121c	a0 1c		               ldy  #>f2abutton
.121e	20 1a 1f	               jsr  putscxy
.1221	68		               pla
.1222	aa		               tax
.1223	68		               pla
.1224	28		               plp
.1225	20 57 08	               jsr  copychar
.1228	20 23 0e	               jsr  drawbitmap
.122b	4c 78 12	               jmp  out
.122e			menub
.122e	20 82 1f	               jsr  push
.1231	a2 68		               ldx  #<blankmsg
.1233	a0 18		               ldy  #>blankmsg
.1235	20 1a 1f	               jsr  putscxy
.1238	a2 a2		               ldx  #<f2b_msg
.123a	a0 19		               ldy  #>f2b_msg
.123c	20 1a 1f	               jsr  putscxy
.123f	20 c1 1f	               jsr  pop
.1242	08		               php
.1243	48		               pha
.1244	8a		               txa
.1245	48		               pha
.1246	ad 84 1d	               lda  f2bbutton
.1249	48		               pha
.124a	a9 92		               lda  #146
.124c	8d 93 1d	               sta  f2bbutton+15
.124f	a9 01		               lda  #flashcol
.1251	8d 84 1d	               sta  f2bbutton
.1254	a2 84		               ldx  #<f2bbutton
.1256	a0 1d		               ldy  #>f2bbutton
.1258	20 1a 1f	               jsr  putscxy
.125b	20 dd 10	               jsr  delay
.125e	a9 12		               lda  #18
.1260	8d 93 1d	               sta  f2bbutton+15
.1263	68		               pla
.1264	8d 84 1d	               sta  f2bbutton
.1267	a2 84		               ldx  #<f2bbutton
.1269	a0 1d		               ldy  #>f2bbutton
.126b	20 1a 1f	               jsr  putscxy
.126e	68		               pla
.126f	aa		               tax
.1270	68		               pla
.1271	28		               plp
.1272	20 08 18	               jsr  fliphorz
.1275	20 23 0e	               jsr  drawbitmap
.1278	68		out            pla
.1279	20 82 1f	               jsr  push
.127c	a2 68		               ldx  #<blankmsg
.127e	a0 18		               ldy  #>blankmsg
.1280	20 1a 1f	               jsr  putscxy
.1283	a2 94		               ldx  #<prompt_msg
.1285	a0 18		               ldy  #>prompt_msg
.1287	20 1a 1f	               jsr  putscxy
.128a	20 c1 1f	               jsr  pop
.128d	60		               rts
.128e			f3action
.128e	48		               pha
.128f	a9 00		               lda  #$0
.1291	8d 45 09	               sta  editmode
.1294	ad 46 09	               lda  fkeyset
.1297	d0 5e		               bne  menub
.1299	08		               php
.129a	48		               pha
.129b	8a		               txa
.129c	48		               pha
.129d	ad ce 1c	               lda  f3abutton
.12a0	48		               pha
.12a1	a9 92		               lda  #146
.12a3	8d dd 1c	               sta  f3abutton+15
.12a6	a9 01		               lda  #flashcol
.12a8	8d ce 1c	               sta  f3abutton
.12ab	a2 ce		               ldx  #<f3abutton
.12ad	a0 1c		               ldy  #>f3abutton
.12af	20 1a 1f	               jsr  putscxy
.12b2	20 dd 10	               jsr  delay
.12b5	a9 12		               lda  #18
.12b7	8d dd 1c	               sta  f3abutton+15
.12ba	68		               pla
.12bb	8d ce 1c	               sta  f3abutton
.12be	a2 ce		               ldx  #<f3abutton
.12c0	a0 1c		               ldy  #>f3abutton
.12c2	20 1a 1f	               jsr  putscxy
.12c5	68		               pla
.12c6	aa		               tax
.12c7	68		               pla
.12c8	28		               plp
.12c9	20 82 1f	               jsr  push
.12cc	a2 68		               ldx  #<blankmsg
.12ce	a0 18		               ldy  #>blankmsg
.12d0	20 1a 1f	               jsr  putscxy
.12d3	a2 e7		               ldx  #<f3a_msg
.12d5	a0 18		               ldy  #>f3a_msg
.12d7	20 1a 1f	               jsr  putscxy
.12da	20 c1 1f	               jsr  pop
.12dd	20 a2 23	getagain       jsr  getkey
.12e0	c9 43		               cmp  #$43
.12e2	f0 07		               beq  devok
.12e4	c9 44		               cmp  #$44
.12e6	f0 03		               beq  devok
.12e8	4c dd 12	               jmp  getagain
.12eb	8d 3c 09	devok          sta  device
.12ee	20 8b 1e	               jsr  putch
.12f1	20 ca 08	               jsr  getfname
.12f4	4c 41 13	               jmp  out
.12f7			menub
.12f7	20 82 1f	               jsr  push
.12fa	a2 68		               ldx  #<blankmsg
.12fc	a0 18		               ldy  #>blankmsg
.12fe	20 1a 1f	               jsr  putscxy
.1301	a2 bd		               ldx  #<f3b_msg
.1303	a0 19		               ldy  #>f3b_msg
.1305	20 1a 1f	               jsr  putscxy
.1308	20 c1 1f	               jsr  pop
.130b	08		               php
.130c	48		               pha
.130d	8a		               txa
.130e	48		               pha
.130f	ad 9e 1d	               lda  f3bbutton
.1312	48		               pha
.1313	a9 92		               lda  #146
.1315	8d ad 1d	               sta  f3bbutton+15
.1318	a9 01		               lda  #flashcol
.131a	8d 9e 1d	               sta  f3bbutton
.131d	a2 9e		               ldx  #<f3bbutton
.131f	a0 1d		               ldy  #>f3bbutton
.1321	20 1a 1f	               jsr  putscxy
.1324	20 dd 10	               jsr  delay
.1327	a9 12		               lda  #18
.1329	8d ad 1d	               sta  f3bbutton+15
.132c	68		               pla
.132d	8d 9e 1d	               sta  f3bbutton
.1330	a2 9e		               ldx  #<f3bbutton
.1332	a0 1d		               ldy  #>f3bbutton
.1334	20 1a 1f	               jsr  putscxy
.1337	68		               pla
.1338	aa		               tax
.1339	68		               pla
.133a	28		               plp
.133b	20 93 17	               jsr  scrollright
.133e	20 23 0e	               jsr  drawbitmap
.1341	68		out            pla
.1342	20 82 1f	               jsr  push
.1345	a2 68		               ldx  #<blankmsg
.1347	a0 18		               ldy  #>blankmsg
.1349	20 1a 1f	               jsr  putscxy
.134c	a2 94		               ldx  #<prompt_msg
.134e	a0 18		               ldy  #>prompt_msg
.1350	20 1a 1f	               jsr  putscxy
.1353	20 c1 1f	               jsr  pop
.1356	60		               rts
.1357			f4action
.1357	48		               pha
.1358	a9 00		               lda  #$0
.135a	8d 45 09	               sta  editmode
.135d	ad 46 09	               lda  fkeyset
.1360	d0 5e		               bne  menub
.1362	08		               php
.1363	48		               pha
.1364	8a		               txa
.1365	48		               pha
.1366	ad e8 1c	               lda  f4abutton
.1369	48		               pha
.136a	a9 92		               lda  #146
.136c	8d f7 1c	               sta  f4abutton+15
.136f	a9 01		               lda  #flashcol
.1371	8d e8 1c	               sta  f4abutton
.1374	a2 e8		               ldx  #<f4abutton
.1376	a0 1c		               ldy  #>f4abutton
.1378	20 1a 1f	               jsr  putscxy
.137b	20 dd 10	               jsr  delay
.137e	a9 12		               lda  #18
.1380	8d f7 1c	               sta  f4abutton+15
.1383	68		               pla
.1384	8d e8 1c	               sta  f4abutton
.1387	a2 e8		               ldx  #<f4abutton
.1389	a0 1c		               ldy  #>f4abutton
.138b	20 1a 1f	               jsr  putscxy
.138e	68		               pla
.138f	aa		               tax
.1390	68		               pla
.1391	28		               plp
.1392	20 82 1f	               jsr  push
.1395	a2 68		               ldx  #<blankmsg
.1397	a0 18		               ldy  #>blankmsg
.1399	20 1a 1f	               jsr  putscxy
.139c	a2 0e		               ldx  #<f4a_msg
.139e	a0 19		               ldy  #>f4a_msg
.13a0	20 1a 1f	               jsr  putscxy
.13a3	20 c1 1f	               jsr  pop
.13a6	20 a2 23	getagain       jsr  getkey
.13a9	c9 43		               cmp  #$43
.13ab	f0 07		               beq  devok
.13ad	c9 44		               cmp  #$44
.13af	f0 03		               beq  devok
.13b1	4c a6 13	               jmp  getagain
.13b4	8d 3c 09	devok          sta  device
.13b7	20 8b 1e	               jsr  putch
.13ba	20 ca 08	               jsr  getfname
.13bd	4c 0a 14	               jmp  out
.13c0			menub
.13c0	20 82 1f	               jsr  push
.13c3	a2 68		               ldx  #<blankmsg
.13c5	a0 18		               ldy  #>blankmsg
.13c7	20 1a 1f	               jsr  putscxy
.13ca	a2 d2		               ldx  #<f4b_msg
.13cc	a0 19		               ldy  #>f4b_msg
.13ce	20 1a 1f	               jsr  putscxy
.13d1	20 c1 1f	               jsr  pop
.13d4	08		               php
.13d5	48		               pha
.13d6	8a		               txa
.13d7	48		               pha
.13d8	ad b8 1d	               lda  f4bbutton
.13db	48		               pha
.13dc	a9 92		               lda  #146
.13de	8d c7 1d	               sta  f4bbutton+15
.13e1	a9 01		               lda  #flashcol
.13e3	8d b8 1d	               sta  f4bbutton
.13e6	a2 b8		               ldx  #<f4bbutton
.13e8	a0 1d		               ldy  #>f4bbutton
.13ea	20 1a 1f	               jsr  putscxy
.13ed	20 dd 10	               jsr  delay
.13f0	a9 12		               lda  #18
.13f2	8d c7 1d	               sta  f4bbutton+15
.13f5	68		               pla
.13f6	8d b8 1d	               sta  f4bbutton
.13f9	a2 b8		               ldx  #<f4bbutton
.13fb	a0 1d		               ldy  #>f4bbutton
.13fd	20 1a 1f	               jsr  putscxy
.1400	68		               pla
.1401	aa		               tax
.1402	68		               pla
.1403	28		               plp
.1404	20 b8 17	               jsr  scrollleft
.1407	20 23 0e	               jsr  drawbitmap
.140a	68		out            pla
.140b	20 82 1f	               jsr  push
.140e	a2 68		               ldx  #<blankmsg
.1410	a0 18		               ldy  #>blankmsg
.1412	20 1a 1f	               jsr  putscxy
.1415	a2 94		               ldx  #<prompt_msg
.1417	a0 18		               ldy  #>prompt_msg
.1419	20 1a 1f	               jsr  putscxy
.141c	20 c1 1f	               jsr  pop
.141f	60		               rts
.1420			f5action
.1420	48		               pha
.1421	a9 00		               lda  #$0
.1423	8d 45 09	               sta  editmode
.1426	ad 46 09	               lda  fkeyset
.1429	d0 4d		               bne  menub
.142b	20 82 1f	               jsr  push
.142e	a2 68		               ldx  #<blankmsg
.1430	a0 18		               ldy  #>blankmsg
.1432	20 1a 1f	               jsr  putscxy
.1435	a2 37		               ldx  #<f5a_msg
.1437	a0 19		               ldy  #>f5a_msg
.1439	20 1a 1f	               jsr  putscxy
.143c	20 c1 1f	               jsr  pop
.143f	08		               php
.1440	48		               pha
.1441	8a		               txa
.1442	48		               pha
.1443	ad 02 1d	               lda  f5abutton
.1446	48		               pha
.1447	a9 92		               lda  #146
.1449	8d 11 1d	               sta  f5abutton+15
.144c	a9 01		               lda  #flashcol
.144e	8d 02 1d	               sta  f5abutton
.1451	a2 02		               ldx  #<f5abutton
.1453	a0 1d		               ldy  #>f5abutton
.1455	20 1a 1f	               jsr  putscxy
.1458	20 dd 10	               jsr  delay
.145b	a9 12		               lda  #18
.145d	8d 11 1d	               sta  f5abutton+15
.1460	68		               pla
.1461	8d 02 1d	               sta  f5abutton
.1464	a2 02		               ldx  #<f5abutton
.1466	a0 1d		               ldy  #>f5abutton
.1468	20 1a 1f	               jsr  putscxy
.146b	68		               pla
.146c	aa		               tax
.146d	68		               pla
.146e	28		               plp
.146f	20 e6 17	               jsr  clearchar
.1472	20 23 0e	               jsr  drawbitmap
.1475	4c c2 14	               jmp  out
.1478			menub
.1478	20 82 1f	               jsr  push
.147b	a2 68		               ldx  #<blankmsg
.147d	a0 18		               ldy  #>blankmsg
.147f	20 1a 1f	               jsr  putscxy
.1482	a2 e6		               ldx  #<f5b_msg
.1484	a0 19		               ldy  #>f5b_msg
.1486	20 1a 1f	               jsr  putscxy
.1489	20 c1 1f	               jsr  pop
.148c	08		               php
.148d	48		               pha
.148e	8a		               txa
.148f	48		               pha
.1490	ad d2 1d	               lda  f5bbutton
.1493	48		               pha
.1494	a9 92		               lda  #146
.1496	8d e1 1d	               sta  f5bbutton+15
.1499	a9 01		               lda  #flashcol
.149b	8d d2 1d	               sta  f5bbutton
.149e	a2 d2		               ldx  #<f5bbutton
.14a0	a0 1d		               ldy  #>f5bbutton
.14a2	20 1a 1f	               jsr  putscxy
.14a5	20 dd 10	               jsr  delay
.14a8	a9 12		               lda  #18
.14aa	8d e1 1d	               sta  f5bbutton+15
.14ad	68		               pla
.14ae	8d d2 1d	               sta  f5bbutton
.14b1	a2 d2		               ldx  #<f5bbutton
.14b3	a0 1d		               ldy  #>f5bbutton
.14b5	20 1a 1f	               jsr  putscxy
.14b8	68		               pla
.14b9	aa		               tax
.14ba	68		               pla
.14bb	28		               plp
.14bc	20 21 17	               jsr  scrollup
.14bf	20 23 0e	               jsr  drawbitmap
.14c2	68		out            pla
.14c3	20 82 1f	               jsr  push
.14c6	a2 68		               ldx  #<blankmsg
.14c8	a0 18		               ldy  #>blankmsg
.14ca	20 1a 1f	               jsr  putscxy
.14cd	a2 94		               ldx  #<prompt_msg
.14cf	a0 18		               ldy  #>prompt_msg
.14d1	20 1a 1f	               jsr  putscxy
.14d4	20 c1 1f	               jsr  pop
.14d7	60		               rts
.14d8			f6action
.14d8	48		               pha
.14d9	a9 00		               lda  #$0
.14db	8d 45 09	               sta  editmode
.14de	ad 46 09	               lda  fkeyset
.14e1	d0 4d		               bne  menub
.14e3	20 82 1f	               jsr  push
.14e6	a2 68		               ldx  #<blankmsg
.14e8	a0 18		               ldy  #>blankmsg
.14ea	20 1a 1f	               jsr  putscxy
.14ed	a2 51		               ldx  #<f6a_msg
.14ef	a0 19		               ldy  #>f6a_msg
.14f1	20 1a 1f	               jsr  putscxy
.14f4	20 c1 1f	               jsr  pop
.14f7	08		               php
.14f8	48		               pha
.14f9	8a		               txa
.14fa	48		               pha
.14fb	ad 1c 1d	               lda  f6abutton
.14fe	48		               pha
.14ff	a9 92		               lda  #146
.1501	8d 2b 1d	               sta  f6abutton+15
.1504	a9 01		               lda  #flashcol
.1506	8d 1c 1d	               sta  f6abutton
.1509	a2 1c		               ldx  #<f6abutton
.150b	a0 1d		               ldy  #>f6abutton
.150d	20 1a 1f	               jsr  putscxy
.1510	20 dd 10	               jsr  delay
.1513	a9 12		               lda  #18
.1515	8d 2b 1d	               sta  f6abutton+15
.1518	68		               pla
.1519	8d 1c 1d	               sta  f6abutton
.151c	a2 1c		               ldx  #<f6abutton
.151e	a0 1d		               ldy  #>f6abutton
.1520	20 1a 1f	               jsr  putscxy
.1523	68		               pla
.1524	aa		               tax
.1525	68		               pla
.1526	28		               plp
.1527	20 da 17	               jsr  fillchar
.152a	20 23 0e	               jsr  drawbitmap
.152d	4c 7a 15	               jmp  out
.1530			menub
.1530	20 82 1f	               jsr  push
.1533	a2 68		               ldx  #<blankmsg
.1535	a0 18		               ldy  #>blankmsg
.1537	20 1a 1f	               jsr  putscxy
.153a	a2 f8		               ldx  #<f6b_msg
.153c	a0 19		               ldy  #>f6b_msg
.153e	20 1a 1f	               jsr  putscxy
.1541	20 c1 1f	               jsr  pop
.1544	08		               php
.1545	48		               pha
.1546	8a		               txa
.1547	48		               pha
.1548	ad ec 1d	               lda  f6bbutton
.154b	48		               pha
.154c	a9 92		               lda  #146
.154e	8d fb 1d	               sta  f6bbutton+15
.1551	a9 01		               lda  #flashcol
.1553	8d ec 1d	               sta  f6bbutton
.1556	a2 ec		               ldx  #<f6bbutton
.1558	a0 1d		               ldy  #>f6bbutton
.155a	20 1a 1f	               jsr  putscxy
.155d	20 dd 10	               jsr  delay
.1560	a9 12		               lda  #18
.1562	8d fb 1d	               sta  f6bbutton+15
.1565	68		               pla
.1566	8d ec 1d	               sta  f6bbutton
.1569	a2 ec		               ldx  #<f6bbutton
.156b	a0 1d		               ldy  #>f6bbutton
.156d	20 1a 1f	               jsr  putscxy
.1570	68		               pla
.1571	aa		               tax
.1572	68		               pla
.1573	28		               plp
.1574	20 59 17	               jsr  scrolldown
.1577	20 23 0e	               jsr  drawbitmap
.157a	68		out            pla
.157b	20 82 1f	               jsr  push
.157e	a2 68		               ldx  #<blankmsg
.1580	a0 18		               ldy  #>blankmsg
.1582	20 1a 1f	               jsr  putscxy
.1585	a2 94		               ldx  #<prompt_msg
.1587	a0 18		               ldy  #>prompt_msg
.1589	20 1a 1f	               jsr  putscxy
.158c	20 c1 1f	               jsr  pop
.158f	60		               rts
.1590			f7action
.1590	48		               pha
.1591	a9 00		               lda  #$0
.1593	8d 45 09	               sta  editmode
.1596	ad 46 09	               lda  fkeyset
.1599	d0 4d		               bne  menub
.159b	20 82 1f	               jsr  push
.159e	a2 68		               ldx  #<blankmsg
.15a0	a0 18		               ldy  #>blankmsg
.15a2	20 1a 1f	               jsr  putscxy
.15a5	a2 6b		               ldx  #<f7a_msg
.15a7	a0 19		               ldy  #>f7a_msg
.15a9	20 1a 1f	               jsr  putscxy
.15ac	20 c1 1f	               jsr  pop
.15af	08		               php
.15b0	48		               pha
.15b1	8a		               txa
.15b2	48		               pha
.15b3	ad 36 1d	               lda  f7abutton
.15b6	48		               pha
.15b7	a9 92		               lda  #146
.15b9	8d 45 1d	               sta  f7abutton+15
.15bc	a9 01		               lda  #flashcol
.15be	8d 36 1d	               sta  f7abutton
.15c1	a2 36		               ldx  #<f7abutton
.15c3	a0 1d		               ldy  #>f7abutton
.15c5	20 1a 1f	               jsr  putscxy
.15c8	20 dd 10	               jsr  delay
.15cb	a9 12		               lda  #18
.15cd	8d 45 1d	               sta  f7abutton+15
.15d0	68		               pla
.15d1	8d 36 1d	               sta  f7abutton
.15d4	a2 36		               ldx  #<f7abutton
.15d6	a0 1d		               ldy  #>f7abutton
.15d8	20 1a 1f	               jsr  putscxy
.15db	68		               pla
.15dc	aa		               tax
.15dd	68		               pla
.15de	28		               plp
.15df	20 d4 0e	               jsr  copycharset
.15e2	20 23 0e	               jsr  drawbitmap
.15e5	4c 37 16	               jmp  out
.15e8	a9 00		menub          lda  #$0
.15ea	8d 45 09	               sta  editmode
.15ed	20 82 1f	               jsr  push
.15f0	a2 68		               ldx  #<blankmsg
.15f2	a0 18		               ldy  #>blankmsg
.15f4	20 1a 1f	               jsr  putscxy
.15f7	a2 0c		               ldx  #<f7b_msg
.15f9	a0 1a		               ldy  #>f7b_msg
.15fb	20 1a 1f	               jsr  putscxy
.15fe	20 c1 1f	               jsr  pop
.1601	08		               php
.1602	48		               pha
.1603	8a		               txa
.1604	48		               pha
.1605	ad 06 1e	               lda  f7bbutton
.1608	48		               pha
.1609	a9 92		               lda  #146
.160b	8d 15 1e	               sta  f7bbutton+15
.160e	a9 01		               lda  #flashcol
.1610	8d 06 1e	               sta  f7bbutton
.1613	a2 06		               ldx  #<f7bbutton
.1615	a0 1e		               ldy  #>f7bbutton
.1617	20 1a 1f	               jsr  putscxy
.161a	20 dd 10	               jsr  delay
.161d	a9 12		               lda  #18
.161f	8d 15 1e	               sta  f7bbutton+15
.1622	68		               pla
.1623	8d 06 1e	               sta  f7bbutton
.1626	a2 06		               ldx  #<f7bbutton
.1628	a0 1e		               ldy  #>f7bbutton
.162a	20 1a 1f	               jsr  putscxy
.162d	68		               pla
.162e	aa		               tax
.162f	68		               pla
.1630	28		               plp
.1631	20 01 17	               jsr  reverse
.1634	20 23 0e	               jsr  drawbitmap
.1637	68		out            pla
.1638	20 82 1f	               jsr  push
.163b	a2 68		               ldx  #<blankmsg
.163d	a0 18		               ldy  #>blankmsg
.163f	20 1a 1f	               jsr  putscxy
.1642	a2 94		               ldx  #<prompt_msg
.1644	a0 18		               ldy  #>prompt_msg
.1646	20 1a 1f	               jsr  putscxy
.1649	20 c1 1f	               jsr  pop
.164c	60		               rts
.164d			f8action
.164d	48		               pha
.164e	a9 00		               lda  #$0
.1650	8d 45 09	               sta  editmode
.1653	ad 46 09	               lda  fkeyset
.1656	d0 47		               bne  menub
.1658	20 82 1f	               jsr  push
.165b	a2 68		               ldx  #<blankmsg
.165d	a0 18		               ldy  #>blankmsg
.165f	20 1a 1f	               jsr  putscxy
.1662	a2 3e		               ldx  #<menub_msg
.1664	a0 1a		               ldy  #>menub_msg
.1666	20 1a 1f	               jsr  putscxy
.1669	20 c1 1f	               jsr  pop
.166c	08		               php
.166d	48		               pha
.166e	8a		               txa
.166f	48		               pha
.1670	ad 50 1d	               lda  f8abutton
.1673	48		               pha
.1674	a9 92		               lda  #146
.1676	8d 5f 1d	               sta  f8abutton+15
.1679	a9 01		               lda  #flashcol
.167b	8d 50 1d	               sta  f8abutton
.167e	a2 50		               ldx  #<f8abutton
.1680	a0 1d		               ldy  #>f8abutton
.1682	20 1a 1f	               jsr  putscxy
.1685	20 dd 10	               jsr  delay
.1688	a9 12		               lda  #18
.168a	8d 5f 1d	               sta  f8abutton+15
.168d	68		               pla
.168e	8d 50 1d	               sta  f8abutton
.1691	a2 50		               ldx  #<f8abutton
.1693	a0 1d		               ldy  #>f8abutton
.1695	20 1a 1f	               jsr  putscxy
.1698	68		               pla
.1699	aa		               tax
.169a	68		               pla
.169b	28		               plp
.169c	4c e3 16	               jmp  swapit
.169f			menub
.169f	20 82 1f	               jsr  push
.16a2	a2 68		               ldx  #<blankmsg
.16a4	a0 18		               ldy  #>blankmsg
.16a6	20 1a 1f	               jsr  putscxy
.16a9	a2 23		               ldx  #<menua_msg
.16ab	a0 1a		               ldy  #>menua_msg
.16ad	20 1a 1f	               jsr  putscxy
.16b0	20 c1 1f	               jsr  pop
.16b3	08		               php
.16b4	48		               pha
.16b5	8a		               txa
.16b6	48		               pha
.16b7	ad 20 1e	               lda  f8bbutton
.16ba	48		               pha
.16bb	a9 92		               lda  #146
.16bd	8d 2f 1e	               sta  f8bbutton+15
.16c0	a9 01		               lda  #flashcol
.16c2	8d 20 1e	               sta  f8bbutton
.16c5	a2 20		               ldx  #<f8bbutton
.16c7	a0 1e		               ldy  #>f8bbutton
.16c9	20 1a 1f	               jsr  putscxy
.16cc	20 dd 10	               jsr  delay
.16cf	a9 12		               lda  #18
.16d1	8d 2f 1e	               sta  f8bbutton+15
.16d4	68		               pla
.16d5	8d 20 1e	               sta  f8bbutton
.16d8	a2 20		               ldx  #<f8bbutton
.16da	a0 1e		               ldy  #>f8bbutton
.16dc	20 1a 1f	               jsr  putscxy
.16df	68		               pla
.16e0	aa		               tax
.16e1	68		               pla
.16e2	28		               plp
.16e3	49 ff		swapit         eor  #$ff
.16e5	8d 46 09	               sta  fkeyset
.16e8	20 71 0f	               jsr  showfkeys
.16eb	68		               pla
.16ec	20 82 1f	               jsr  push
.16ef	a2 68		               ldx  #<blankmsg
.16f1	a0 18		               ldy  #>blankmsg
.16f3	20 1a 1f	               jsr  putscxy
.16f6	a2 94		               ldx  #<prompt_msg
.16f8	a0 18		               ldy  #>prompt_msg
.16fa	20 1a 1f	               jsr  putscxy
.16fd	20 c1 1f	               jsr  pop
.1700	60		               rts
.1701			reverse
.1701	20 82 1f	               jsr  push
.1704	48		               pha
.1705	ad 4a 09	               lda  mapaddr
.1708	85 fd		               sta  $fd
.170a	ad 4b 09	               lda  mapaddr+1
.170d	85 fe		               sta  $fe
.170f	68		               pla
.1710	a0 00		               ldy  #$00
.1712	b1 fd		again          lda  (zpage2),y
.1714	49 ff		               eor  #$ff
.1716	91 fd		               sta  (zpage2),y
.1718	c8		               iny
.1719	c0 08		               cpy  #$08
.171b	d0 f5		               bne  again
.171d	20 c1 1f	               jsr  pop
.1720	60		               rts
.1721			scrollup
.1721	20 82 1f	               jsr  push
.1724	48		               pha
.1725	ad 4a 09	               lda  mapaddr
.1728	85 fb		               sta  $fb
.172a	ad 4b 09	               lda  mapaddr+1
.172d	85 fc		               sta  $fc
.172f	68		               pla
.1730	48		               pha
.1731	ad 4a 09	               lda  mapaddr
.1734	85 fd		               sta  $fd
.1736	ad 4b 09	               lda  mapaddr+1
.1739	85 fe		               sta  $fe
.173b	68		               pla
.173c	20 a1 20	               jsr  inczp2
.173f	a0 00		               ldy  #$00
.1741	b1 fb		               lda  (zpage1),y
.1743	8d 58 17	               sta  tmpbyte
.1746	b1 fd		again          lda  (zpage2),y
.1748	91 fb		               sta  (zpage1),y
.174a	c8		               iny
.174b	c0 07		               cpy  #$07
.174d	d0 f7		               bne  again
.174f	ad 58 17	               lda  tmpbyte
.1752	91 fb		               sta  (zpage1),y
.1754	20 c1 1f	               jsr  pop
.1757	60		               rts
>1758	00		tmpbyte        .byte     $00
.1759			scrolldown
.1759	20 82 1f	               jsr  push
.175c	48		               pha
.175d	ad 4a 09	               lda  mapaddr
.1760	85 fb		               sta  $fb
.1762	ad 4b 09	               lda  mapaddr+1
.1765	85 fc		               sta  $fc
.1767	68		               pla
.1768	48		               pha
.1769	ad 4a 09	               lda  mapaddr
.176c	85 fd		               sta  $fd
.176e	ad 4b 09	               lda  mapaddr+1
.1771	85 fe		               sta  $fe
.1773	68		               pla
.1774	20 a1 20	               jsr  inczp2
.1777	a0 07		               ldy  #$07                ;xxxxxxxx zpage1
.1779	b1 fb		               lda  (zpage1),y          ;xxxxxxxx zpage2
.177b	8d 92 17	               sta  tmpbyte             ;xxxxxxxx
.177e	88		again          dey                      ;xxxxxxxx
.177f	b1 fb		               lda  (zpage1),y          ;xxxxxxxx
.1781	91 fd		               sta  (zpage2),y          ;xxxxxxxx
.1783	c0 00		               cpy  #$00                ;xxxxxxxx
.1785	d0 f7		               bne  again               ;xxxxxxxx
.1787	a0 00		               ldy  #$00
.1789	ad 92 17	               lda  tmpbyte
.178c	91 fb		               sta  (zpage1),y
.178e	20 c1 1f	               jsr  pop
.1791	60		               rts
>1792	00		tmpbyte        .byte     $00
.1793			scrollright
.1793	20 82 1f	               jsr  push
.1796	48		               pha
.1797	ad 4a 09	               lda  mapaddr
.179a	85 fb		               sta  $fb
.179c	ad 4b 09	               lda  mapaddr+1
.179f	85 fc		               sta  $fc
.17a1	68		               pla
.17a2	a0 00		               ldy  #$00
.17a4	b1 fb		again          lda  (zpage1),y
.17a6	18		               clc
.17a7	6a		               ror
.17a8	90 03		               bcc  zero
.17aa	18		               clc
.17ab	69 80		one            adc  #$80
.17ad	91 fb		zero           sta  (zpage1),y
.17af	c8		               iny
.17b0	c0 08		               cpy  #$08
.17b2	d0 f0		               bne  again
.17b4	20 c1 1f	               jsr  pop
.17b7	60		               rts
.17b8			scrollleft
.17b8	20 82 1f	               jsr  push
.17bb	48		               pha
.17bc	ad 4a 09	               lda  mapaddr
.17bf	85 fb		               sta  $fb
.17c1	ad 4b 09	               lda  mapaddr+1
.17c4	85 fc		               sta  $fc
.17c6	68		               pla
.17c7	a0 00		               ldy  #$00
.17c9	b1 fb		again          lda  (zpage1),y
.17cb	18		               clc
.17cc	2a		               rol
.17cd	69 00		               adc  #$00
.17cf	91 fb		               sta  (zpage1),y
.17d1	c8		               iny
.17d2	c0 08		               cpy  #$08
.17d4	d0 f3		               bne  again
.17d6	20 c1 1f	               jsr  pop
.17d9	60		               rts
.17da			fillchar
.17da	20 82 1f	               jsr  push
.17dd	a9 ff		               lda  #$ff
.17df	20 f2 17	               jsr  allsame
.17e2	20 c1 1f	               jsr  pop
.17e5	60		               rts
.17e6			clearchar
.17e6	20 82 1f	               jsr  push
.17e9	a9 00		               lda  #$00
.17eb	20 f2 17	               jsr  allsame
.17ee	20 c1 1f	               jsr  pop
.17f1	60		               rts
.17f2			allsame
.17f2	48		               pha
.17f3	ad 4a 09	               lda  mapaddr
.17f6	85 fd		               sta  $fd
.17f8	ad 4b 09	               lda  mapaddr+1
.17fb	85 fe		               sta  $fe
.17fd	68		               pla
.17fe	a0 00		               ldy  #$00
.1800	91 fd		again          sta  (zpage2),y
.1802	c8		               iny
.1803	c0 08		               cpy  #$08
.1805	d0 f9		               bne  again
.1807	60		               rts
.1808			fliphorz
.1808	20 82 1f	               jsr  push
.180b	48		               pha
.180c	ad 4a 09	               lda  mapaddr
.180f	85 fd		               sta  $fd
.1811	ad 4b 09	               lda  mapaddr+1
.1814	85 fe		               sta  $fe
.1816	68		               pla
.1817	a0 00		               ldy  #$00
.1819	b1 fd		nextbyte       lda  (zpage2),y
.181b	a2 00		               ldx  #$00
.181d	2a		rolagain       rol
.181e	6e 34 18	               ror  tmpbyte
.1821	e8		               inx
.1822	e0 08		               cpx  #$08
.1824	30 f7		               bmi  rolagain
.1826	ad 34 18	               lda  tmpbyte
.1829	91 fd		               sta  (zpage2),y
.182b	c8		               iny
.182c	c0 08		               cpy  #$08
.182e	30 e9		               bmi  nextbyte
.1830	20 c1 1f	               jsr  pop
.1833	60		               rts
>1834	00		tmpbyte        .byte     $00
.1835			flipvert
.1835	20 82 1f	               jsr  push
.1838	48		               pha
.1839	ad 4a 09	               lda  mapaddr
.183c	85 fd		               sta  $fd
.183e	ad 4b 09	               lda  mapaddr+1
.1841	85 fe		               sta  $fe
.1843	68		               pla
.1844	a0 00		               ldy  #$00
.1846	b1 fd		tostack        lda  (zpage2),y
.1848	48		               pha
.1849	c8		               iny
.184a	c0 08		               cpy  #$08
.184c	d0 f8		               bne  tostack
.184e	a0 00		               ldy  #$00
.1850	68		fromstack      pla
.1851	91 fd		               sta  (zpage2),y
.1853	c8		               iny
.1854	c0 08		               cpy  #$08
.1856	d0 f8		               bne  fromstack
.1858	20 c1 1f	               jsr  pop
.185b	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: messages.asm

>185c	0a 01 05	editor_msg     .byte vrose,1,5
>185f	5b 45 44 49	               .null     "[editor]"
>1863	54 4f 52 5d 00
>1868	03 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>186c	20 20 20 20	               .null     "                                       "
>1870	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1880	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1890	20 20 20 00
>1894	03 00 05 92	prompt_msg     .byte     mesgcol,0,5,146
>1898	20 45 4e 54	               .null     " enter f-key command :"
>189c	45 52 20 46 2d 4b 45 59 20 43 4f 4d 4d 41 4e 44
>18ac	20 3a 00
.18af			f1a_msg
>18af	03 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>18b3	20 45 44 49	               .null     " edit mode: chr$(   )",146
>18b7	54 20 4d 4f 44 45 3a 20 43 48 52 24 28 20 20 20
>18c7	29 92 00
.18ca			f2a_msg
>18ca	03 00 05	copy_msg       .byte     mesgcol,0,5
>18cd	20 45 4e 54	               .null     " enter character to copy:"
>18d1	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>18e1	43 4f 50 59 3a 00
.18e7			f3a_msg
>18e7	03 00 05 92	save_msg       .byte     mesgcol,0,5,146
>18eb	20 53 41 56	               .null     " save on cassette or disk? (c/d): "
>18ef	45 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>18ff	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 20 00
.190e			f4a_msg
>190e	03 00 05 92	load_msg       .byte     mesgcol,0,5,146
>1912	20 4c 4f 41	               .null     " load from cassette or disk? (c/d): "
>1916	44 20 46 52 4f 4d 20 43 41 53 53 45 54 54 45 20
>1926	4f 52 20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 20
>1936	00
.1937			f5a_msg
>1937	03 00 05	clear_msg      .byte     mesgcol,0,5
>193a	20 43 4c 45	               .null     " clear char: chr$(   )"
>193e	41 52 20 43 48 41 52 3a 20 43 48 52 24 28 20 20
>194e	20 29 00
.1951			f6a_msg
>1951	03 00 05	fill_msg       .byte     mesgcol,0,5
>1954	20 46 49 4c	               .null     " fill char:  chr$(   )"
>1958	4c 20 43 48 41 52 3a 20 20 43 48 52 24 28 20 20
>1968	20 29 00
.196b			f7a_msg
>196b	03 00 05	work_msg       .byte     mesgcol,0,5
>196e	20 52 45 53	               .null     " restoring all characters."
>1972	54 4f 52 49 4e 47 20 41 4c 4c 20 43 48 41 52 41
>1982	43 54 45 52 53 2e 00
.1989			f1b_msg
>1989	03 00 05	invr_msg       .byte     mesgcol,0,5
>198c	20 46 4c 49	               .null     " flipping vertically:"
>1990	50 50 49 4e 47 20 56 45 52 54 49 43 41 4c 4c 59
>19a0	3a 00
.19a2			f2b_msg
>19a2	03 00 05	flip_msg       .byte     mesgcol,0,5
>19a5	20 46 4c 49	               .null     " flipping horizontally:"
>19a9	50 50 49 4e 47 20 48 4f 52 49 5a 4f 4e 54 41 4c
>19b9	4c 59 3a 00
.19bd			f3b_msg
>19bd	03 00 05	scrollr_msg    .byte     mesgcol,0,5
>19c0	20 53 43 52	               .null     " scrolling right:"
>19c4	4f 4c 4c 49 4e 47 20 52 49 47 48 54 3a 00
.19d2			f4b_msg
>19d2	03 00 05	scrolll_msg    .byte     mesgcol,0,5
>19d5	20 53 43 52	               .null     " scrolling left:"
>19d9	4f 4c 4c 49 4e 47 20 4c 45 46 54 3a 00
.19e6			f5b_msg
>19e6	03 00 05	scrollu_msg    .byte     mesgcol,0,5
>19e9	20 53 43 52	               .null     " scrolling up:"
>19ed	4f 4c 4c 49 4e 47 20 55 50 3a 00
.19f8			f6b_msg
>19f8	03 00 05	scrolld_msg    .byte     mesgcol,0,5
>19fb	20 53 43 52	               .null     " scrolling down:"
>19ff	4f 4c 4c 49 4e 47 20 44 4f 57 4e 3a 00
.1a0c			f7b_msg
>1a0c	03 00 05	rvrs_msg       .byte     mesgcol,0,5
>1a0f	20 52 45 56	               .null     " reverse character:"
>1a13	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
>1a23	03 00 05	menua_msg      .byte     mesgcol,0,5
>1a26	20 59 4f 55	               .null     " you are now in menu a."
>1a2a	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>1a3a	20 41 2e 00
>1a3e	03 00 05	menub_msg      .byte     mesgcol,0,5
>1a41	20 59 4f 55	               .null     " you are now in menu b."
>1a45	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>1a55	20 42 2e 00
>1a59	07 00 05	copychar_msg   .byte     vjaune,0,5
>1a5c	20 45 4e 54	               .null     " enter character to copy from (?).",157,157,157
>1a60	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>1a70	43 4f 50 59 20 46 52 4f 4d 20 28 3f 29 2e 9d 9d
>1a80	9d 00
>1a82	07 00 05	fname_msg      .byte     vjaune,0,5
>1a85	20 45 4e 54	               .null     " enter a 6 letter filename : ",$a4,$a4,$a4,$a4,$a4,$a4,".chr",157,157,157,157,157,157,157,157,157,157
>1a89	45 52 20 41 20 36 20 4c 45 54 54 45 52 20 46 49
>1a99	4c 45 4e 41 4d 45 20 3a 20 a4 a4 a4 a4 a4 a4 2e
>1aa9	43 48 52 9d 9d 9d 9d 9d 9d 9d 9d 9d 9d 00
>1ab7	0e 15 18 12	quit_msg       .byte     vblue1,21,24,18
>1abb	43 54 52 4c	               .text     "ctrl-x",146
>1abf	2d 58 92
>1ac2	20 54 4f 20	               .null     " to quit."
>1ac6	51 55 49 54 2e 00
.1acc			menu_msg
>1acc	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>1ad0	43 54 52 4c	               .text     "ctrl-x",146
>1ad4	2d 58 92
>1ad7	20 54 4f 20	               .null     " to menu."
>1adb	4d 45 4e 55 2e 00
>1ae1	07 04 06 12	whoami0        .byte     whoamicol,4,6,18
>1ae5	20 20 20 20	               .null     "                               ",146
>1ae9	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1af9	20 20 20 20 20 20 20 20 20 20 20 92 00
>1b06	07 04 07 12	whoami1        .byte     whoamicol,4,7,18
>1b0a	20 20 20 20	               .null     "          ",146," charedit ",18,"           ",146
>1b0e	20 20 20 20 20 20 92 20 43 48 41 52 45 44 49 54
>1b1e	20 12 20 20 20 20 20 20 20 20 20 20 20 92 00
>1b2d	07 04 08 12	whoami2        .byte     whoamicol,4,8,18
>1b31	20 20 20 20	               .null     "                               ",146
>1b35	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b45	20 20 20 20 20 20 20 20 20 20 20 92 00
>1b52	07 04 09 12	whoami3        .byte     whoamicol,4,9,18
>1b56	20 20 49 4e	               .null     "  inspired from john heilborn  ",146
>1b5a	53 50 49 52 45 44 20 46 52 4f 4d 20 4a 4f 48 4e
>1b6a	20 48 45 49 4c 42 4f 52 4e 20 20 92 00
>1b77	07 04 0a 12	whoami4        .byte     whoamicol,4,10,18
>1b7b	20 20 20 20	               .null     "      isbn: 0-942386-29-9      ",146
>1b7f	20 20 49 53 42 4e 3a 20 30 2d 39 34 32 33 38 36
>1b8f	2d 32 39 2d 39 20 20 20 20 20 20 92 00
>1b9c	07 04 0b 12	whoami5        .byte     whoamicol,4,11,18
>1ba0	20 20 20 20	               .null     "                               ",146
>1ba4	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1bb4	20 20 20 20 20 20 20 20 20 20 20 92 00
>1bc1	07 04 0c 12	whoami6        .byte     whoamicol,4,12,18
>1bc5	20 43 4f 44	               .null     " coded in assembly language by ",146
>1bc9	45 44 20 49 4e 20 41 53 53 45 4d 42 4c 59 20 4c
>1bd9	41 4e 47 55 41 47 45 20 42 59 20 92 00
>1be6	07 04 0d 12	whoami7        .byte     whoamicol,4,13,18
>1bea	20 20 20 20	               .null     "     daniel lafrance 2023      ",146
>1bee	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>1bfe	20 32 30 32 33 20 20 20 20 20 20 92 00
>1c0b	07 04 0e 12	whoami8        .byte     whoamicol,4,14,18
>1c0f	20 20 20 20	               .null     "    version:",version,"    ",146
>1c13	56 45 52 53 49 4f 4e 3a 32 30 32 33 31 31 31 35
>1c23	2d 31 36 34 32 30 38 20 20 20 20 92 00
>1c30	07 04 0f 12	whoami9        .byte     whoamicol,4,15,18
>1c34	20 20 20 20	               .null     "                               ",146
>1c38	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1c48	20 20 20 20 20 20 20 20 20 20 20 92 00
>1c55	03 06 10 14	bye_msg        .byte     vcyan,6,16,20
>1c59	20 54 48 41	               .null     " thanks and have a good day ",146
>1c5d	4e 4b 53 20 41 4e 44 20 48 41 56 45 20 41 20 47
>1c6d	4f 4f 44 20 44 41 59 20 92 00
>1c77	0d 05 18 12	any_msg        .byte     vvert1,5,24,18
>1c7b	20 20 55 53	               .null         "  use the [anykey] to basic  ",146
>1c7f	45 20 54 48 45 20 5b 41 4e 59 4b 45 59 5d 20 54
>1c8f	4f 20 42 41 53 49 43 20 20 92 00
=18			fkeyleft=18
=8			f1top=8
>1c9a	01 12 08	f1abutton      .byte     menu1col1,fkeyleft,f1top       ;133
>1c9d	45 44 49 54	               .text     "edit char..."
>1ca1	20 43 48 41 52 2e 2e 2e
>1ca9	12		               .byte     18             ; position 15
>1caa	a9 20 20 46	               .text     $a9,"  f1  ",223
>1cae	31 20 20 df
>1cb2	92 00		               .byte     146,0
>1cb4	0f 12 09	f2abutton      .byte     menu1col2,fkeyleft,f1top+1     ;138
>1cb7	43 4f 50 59	               .text     "copy from..."
>1cbb	20 46 52 4f 4d 2e 2e 2e
>1cc3	12		               .byte     18   ; position 15
>1cc4	20 20 20 46	               .text     "   f2   "
>1cc8	32 20 20 20
>1ccc	92 00		               .byte     146,0
>1cce	01 12 0b	f3abutton      .byte     menu1col1,fkeyleft,f1top+3     ;137
>1cd1	53 41 56 45	               .text     "save to....."
>1cd5	20 54 4f 2e 2e 2e 2e 2e
>1cdd	12		               .byte     18            ; position 15
>1cde	a9 20 20 46	               .text     $a9,"  f3  ",223
>1ce2	33 20 20 df
>1ce6	92 00		               .byte     146,0
>1ce8	0f 12 0c	f4abutton      .byte     menu1col2,fkeyleft,f1top+4     ;134
>1ceb	4c 4f 41 44	               .text     "load from..."
>1cef	20 46 52 4f 4d 2e 2e 2e
>1cf7	12		               .byte     18             ; position 15
>1cf8	20 20 20 46	               .text     "   f4   "
>1cfc	34 20 20 20
>1d00	92 00		               .byte     146,0
>1d02	01 12 0e	f5abutton      .byte     menu1col1,fkeyleft,f1top+6     ;135
>1d05	43 4c 45 41	               .text     "clear......."
>1d09	52 2e 2e 2e 2e 2e 2e 2e
>1d11	12		               .byte     18             ; position 15
>1d12	a9 20 20 46	               .text     $a9,"  f5  ",223
>1d16	35 20 20 df
>1d1a	92 00		               .byte     146,0
>1d1c	0f 12 0f	f6abutton      .byte     menu1col2,fkeyleft,f1top+7    ;139
>1d1f	46 49 4c 4c	               .text     "fill........"
>1d23	2e 2e 2e 2e 2e 2e 2e 2e
>1d2b	12		               .byte     18             ; position 15
>1d2c	20 20 20 46	               .text     "   f6   "
>1d30	36 20 20 20
>1d34	92 00		               .byte     146,0
>1d36	01 12 11	f7abutton      .byte     menu1col1,fkeyleft,f1top+9    ;136
>1d39	52 45 53 54	               .text     "restore all."
>1d3d	4f 52 45 20 41 4c 4c 2e
>1d45	12		               .byte     18             ; position 15
>1d46	a9 20 20 46	               .text     $a9,"  f7  ",223
>1d4a	37 20 20 df
>1d4e	92 00		               .byte     146,0
>1d50	0f 12 12	f8abutton      .byte     menu1col2,fkeyleft,f1top+10
>1d53	46 55 4e 43	               .text     "function...."
>1d57	54 49 4f 4e 2e 2e 2e 2e
>1d5f	12		               .byte     18             ; position 15
>1d60	20 20 20 46	               .text     "   f8   "
>1d64	38 20 20 20
>1d68	92 00		               .byte     146,0
>1d6a	01 12 08	f1bbutton      .byte     menu2col1,fkeyleft,f1top
>1d6d	46 4c 49 50	               .text     "flip vert..."
>1d71	20 56 45 52 54 2e 2e 2e
>1d79	12		               .byte     18             ; position 15
>1d7a	a9 20 20 46	               .text     $a9,"  f1  ",223
>1d7e	31 20 20 df
>1d82	92 00		               .byte     146,0
>1d84	0f 12 09	f2bbutton      .byte     menu2col2,fkeyleft,f1top+1
>1d87	46 4c 49 50	               .text     "flip horz..."
>1d8b	20 48 4f 52 5a 2e 2e 2e
>1d93	12		               .byte     18             ; position 15
>1d94	20 20 20 46	               .text     "   f2   "
>1d98	32 20 20 20
>1d9c	92 00		               .byte     146,0
>1d9e	01 12 0b	f3bbutton      .byte     menu2col1,fkeyleft,f1top+3
>1da1	53 43 52 4f	               .text     "scroll right"
>1da5	4c 4c 20 52 49 47 48 54
>1dad	12		               .byte     18             ; position 15
>1dae	a9 20 20 46	               .text     $a9,"  f3  ",223
>1db2	33 20 20 df
>1db6	92 00		               .byte     146,0
>1db8	0f 12 0c	f4bbutton      .byte     menu2col2,fkeyleft,f1top+4
>1dbb	53 43 52 4f	               .text     "scroll left."
>1dbf	4c 4c 20 4c 45 46 54 2e
>1dc7	12		               .byte     18             ; position 15
>1dc8	20 20 20 46	               .text     "   f4   "
>1dcc	34 20 20 20
>1dd0	92 00		               .byte     146,0
>1dd2	01 12 0e	f5bbutton      .byte     menu2col1,fkeyleft,f1top+6
>1dd5	53 43 52 4f	               .text     "scroll up..."
>1dd9	4c 4c 20 55 50 2e 2e 2e
>1de1	12		               .byte     18             ; position 15
>1de2	a9 20 20 46	               .text     $a9,"  f5  ",223
>1de6	35 20 20 df
>1dea	92 00		               .byte     146,0
>1dec	0f 12 0f	f6bbutton      .byte     menu2col2,fkeyleft,f1top+7
>1def	53 43 52 4f	               .text     "scroll down."
>1df3	4c 4c 20 44 4f 57 4e 2e
>1dfb	12		               .byte     18             ; position 15
>1dfc	20 20 20 46	               .text     "   f6   "
>1e00	36 20 20 20
>1e04	92 00		               .byte     146,0
>1e06	01 12 11	f7bbutton      .byte     menu2col1,fkeyleft,f1top+9
>1e09	52 45 56 45	               .text     "reverse bits"
>1e0d	52 53 45 20 42 49 54 53
>1e15	12		               .byte     18             ; position 15
>1e16	a9 20 20 46	               .text     $a9,"  f7  ",223
>1e1a	37 20 20 df
>1e1e	92 00		               .byte     146,0
>1e20	0f 12 12	f8bbutton      .byte     menu2col2,fkeyleft,f1top+10
>1e23	46 55 4e 43	               .text     "function...."
>1e27	54 49 4f 4e 2e 2e 2e 2e
>1e2f	12		               .byte     18             ; position 15
>1e30	20 20 20 46	               .text     "   f8   "
>1e34	38 20 20 20
>1e38	92 00		               .byte     146,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.1e3a			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.1e3a			screendis
.1e3a	08		               php
.1e3b	48		               pha
.1e3c	ad 11 d0	               lda  $d011
.1e3f	29 ef		               and  #%11101111
.1e41	8d 11 d0	               sta  $d011
.1e44	68		               pla
.1e45	28		               plp
.1e46	60		               rts
.1e47			screenena
.1e47	08		               php
.1e48	48		               pha
.1e49	ad 11 d0	               lda  $d011
.1e4c	09 10		               ora  #%00010000
.1e4e	8d 11 d0	               sta  $d011
.1e51	68		               pla
.1e52	28		               plp
.1e53	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.1e54			scrmaninit
.1e54	20 82 1f	               jsr  push
.1e57	a9 06		               lda  #vbleu
.1e59	8d 21 d0	               sta  vicbackcol
.1e5c	a9 05		               lda  #vvert
.1e5e	8d 20 d0	               sta  vicbordcol
.1e61	a9 01		               lda  #vblanc
.1e63	8d 86 02	               sta  bascol
.1e66	ad 00 04	               lda  scrnram
.1e69	8d 00 04	               sta  scrnram
.1e6c	20 74 1e	               jsr  cls
.1e6f	20 c1 1f	               jsr  pop
.1e72	60		               rts
>1e73	8e		characterset   .byte b_uppercase
.1e74			cls
.1e74	08		               php
.1e75	48		               pha
.1e76	a9 93		               lda  #$93
.1e78	20 8b 1e	               jsr  putch
.1e7b	68		               pla
.1e7c	28		               plp
.1e7d	60		               rts
.1e7e			putnch
.1e7e	08		               php
.1e7f	e0 00		               cpx  #$00
.1e81	f0 06		               beq  out
.1e83	20 d2 ff	again          jsr  $ffd2
.1e86	ca		               dex
.1e87	d0 fa		               bne  again
.1e89	28		out            plp
.1e8a	60		               rts
.1e8b			putch
.1e8b	08		               php
.1e8c	20 d2 ff	               jsr  $ffd2
.1e8f	28		               plp
.1e90	60		               rts
.1e91			puts
.1e91	20 82 1f	               jsr  push
.1e94	86 fb		               stx  zpage1
.1e96	84 fc		               sty  zpage1+1
.1e98	a0 00		               ldy  #0
.1e9a	b1 fb		next           lda  (zpage1),y
.1e9c	f0 09		               beq  exit
.1e9e	20 8b 1e	               jsr  putch
.1ea1	20 89 20	               jsr  inczp1
.1ea4	4c 9a 1e	               jmp  next
.1ea7	20 c1 1f	exit           jsr  pop
.1eaa	60		               rts
.1eab			gotoxy
.1eab	08		               php
.1eac	18		               clc
.1ead	8a		               txa
.1eae	48		               pha
.1eaf	98		               tya
.1eb0	aa		               tax
.1eb1	68		               pla
.1eb2	a8		               tay
.1eb3	20 f0 ff	               jsr  kplot
.1eb6	28		               plp
.1eb7	60		               rts
.1eb8			cursor
=$0286			bascol    =    $0286
.1eb8	08		               php
.1eb9	48		               pha
.1eba	90 12		               bcc  restore
.1ebc	20 f0 ff	               jsr  kplot
.1ebf	8c e0 1e	               sty  cx
.1ec2	8e e1 1e	               stx  cy
.1ec5	ad 86 02	               lda  bascol
.1ec8	8d e2 1e	               sta  bcol
.1ecb	4c dd 1e	               jmp  out
.1ece	ae e1 1e	restore        ldx  cy
.1ed1	ac e0 1e	               ldy  cx
.1ed4	20 f0 ff	               jsr  kplot
.1ed7	ad e2 1e	               lda  bcol
.1eda	8d 86 02	               sta  bascol
.1edd	68		out            pla
.1ede	28		               plp
.1edf	60		               rts
>1ee0	00		cx   .byte     $00
>1ee1	00		cy   .byte     $00
>1ee2	00		bcol .byte     $00
.1ee3			cursave
.1ee3	08		               php
.1ee4	38		               sec
.1ee5	20 b8 1e	               jsr  cursor
.1ee8	28		               plp
.1ee9	60		               rts
.1eea			curput
.1eea	08		               php
.1eeb	18		               clc
.1eec	20 b8 1e	               jsr  cursor
.1eef	28		               plp
.1ef0	60		               rts
.1ef1			putsxy
.1ef1	20 82 1f	               jsr  push
.1ef4	86 fb		               stx  zpage1
.1ef6	84 fc		               sty  zpage1+1
.1ef8	a0 00		               ldy  #$00
.1efa	b1 fb		               lda  (zpage1),y
.1efc	aa		               tax
.1efd	20 89 20	               jsr  inczp1
.1f00	b1 fb		               lda  (zpage1),y
.1f02	a8		               tay
.1f03	20 ab 1e	               jsr  gotoxy
.1f06	20 89 20	               jsr  inczp1
.1f09	a6 fb		               ldx  zpage1
.1f0b	a4 fc		               ldy  zpage1+1
.1f0d	20 91 1e	               jsr  puts
.1f10	20 c1 1f	               jsr  pop
.1f13	60		               rts
>1f14	00 00		straddr   .word     $00
>1f16	00		px        .byte     $00
>1f17	00		py        .byte     $00
>1f18	00 00		zp1       .word     $00
.1f1a			putscxy
.1f1a	20 82 1f	               jsr  push
.1f1d	84 fc		               sty  zpage1+1
.1f1f	86 fb		               stx  zpage1
.1f21	ad 86 02	               lda  bascol
.1f24	8d 44 1f	               sta  bc
.1f27	a0 00		               ldy #$00
.1f29	b1 fb		               lda  (zpage1),y
.1f2b	8d 86 02	               sta  bascol
.1f2e	20 89 20	               jsr  inczp1
.1f31	a6 fb		               ldx  zpage1
.1f33	a4 fc		               ldy  zpage1+1
.1f35	20 f1 1e	               jsr  putsxy
.1f38	ad 44 1f	               lda  bc
.1f3b	8d 86 02	               sta  bascol
.1f3e	20 c1 1f	               jsr  pop
.1f41	60		               rts
>1f42	00 00		straddr  .word      $00
>1f44	00		bc       .byte      $00
>1f45	00 00		zp1      .word      $00
.1f47			putrahex
.1f47	08		               php
.1f48	48		               pha
.1f49	20 9f 21	               jsr  a2hex
.1f4c	a9 3e		               lda  #<a2hexstr
.1f4e	a0 21		               ldy  #>a2hexstr
.1f50	20 91 1e	               jsr  puts
.1f53	68		               pla
.1f54	28		               plp
.1f55	60		               rts
.1f56			kputrahexxy
.1f56			bputrahexxy
.1f56			putrahexxy
.1f56	08		               php
.1f57	20 9f 21	               jsr  a2hex
.1f5a	a9 3b		               lda  #<a2hexpos
.1f5c	a0 21		               ldy  #>a2hexpos
.1f5e	20 f1 1e	               jsr  putsxy
.1f61	68		               pla
.1f62	28		               plp
.1f63	60		               rts
.1f64			putrahexcxy
.1f64	08		               php
.1f65	20 9f 21	               jsr  a2hex
.1f68	a9 3b		               lda  #<a2hexpos
.1f6a	a0 21		               ldy  #>a2hexpos
.1f6c	20 1a 1f	               jsr  putscxy
.1f6f	68		               pla
.1f70	28		               plp
.1f71	60		               rts
.1f72			setinverse
.1f72	48		               pha
.1f73	a9 12		               lda  #$12
.1f75	20 d2 ff	               jsr  $ffd2
.1f78	68		               pla
.1f79	60		               rts
.1f7a			clrinverse
.1f7a	48		               pha
.1f7b	a9 92		               lda  #$92
.1f7d	20 d2 ff	               jsr  $ffd2
.1f80	68		               pla
.1f81	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.1f82			push
.1f82	08		          php            ; stack : flg, pcl, pch
.1f83	78		          sei
.1f84	8d be 1f	          sta  ra        ; save a
.1f87	68		          pla            ; stack : pcl, pch
.1f88	8d bd 1f	          sta  rp        ; save rp
.1f8b	68		          pla            ; stack : pch
.1f8c	8d bf 1f	          sta  pc        ; save pcl
.1f8f	68		          pla            ; stack : -
.1f90	8d c0 1f	          sta  pc+1      ; save pch
.1f93	a5 fb		          lda  zpage1    ; get zpage1 low byte
.1f95	48		          pha            ; stack : zp1l
.1f96	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.1f98	48		          pha            ; stack : zp1h, zp1l
.1f99	a5 fd		          lda  zpage2    ; get zpage2 low byte
.1f9b	48		          pha            ; stack : zp2l, zp1h, zp1l
.1f9c	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.1f9e	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1f9f	ad bd 1f	          lda  rp        ; get rp
.1fa2	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1fa3	ad be 1f	          lda  ra        ; get a
.1fa6	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1fa7	8a		          txa            ; get x
.1fa8	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1fa9	98		          tya            ; get y
.1faa	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1fab	ad c0 1f	          lda  pc+1      ; get pch
.1fae	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1faf	ad bf 1f	          lda  pc        ; get pcl
.1fb2	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1fb3	ad bd 1f	          lda  rp        ; get rp
.1fb6	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1fb7	ad be 1f	          lda  ra        ; get a
.1fba	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1fbb	58		          cli
.1fbc	60		          rts
>1fbd	00		rp        .byte     0
>1fbe	00		ra        .byte     0
>1fbf	00 00		pc        .word     0
.1fc1			pull
.1fc1			pop
.1fc1	78		          sei
.1fc2	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1fc3	8d f6 1f	          sta  pc        ; save pcl
.1fc6	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1fc7	8d f7 1f	          sta  pc+1      ; save pch
.1fca	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1fcb	a8		          tay            ; set y
.1fcc	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1fcd	aa		          tax            ; set x
.1fce	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1fcf	8d f5 1f	          sta  ra        ; save a
.1fd2	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1fd3	8d f4 1f	          sta  rp        ; save rp
.1fd6	68		          pla            ; stack : zp2l, zp1h, zp1l
.1fd7	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.1fd9	68		          pla            ; stack : zp1h, zp1l
.1fda	85 fd		          sta  zpage2    ; get zpage2 High byte
.1fdc	68		          pla            ; stack : zp1l
.1fdd	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.1fdf	68		          pla            ; stack :
.1fe0	85 fb		          sta  zpage1    ; get zpage1 High byte
.1fe2	ad f7 1f	          lda  pc+1      ; get pch
.1fe5	48		          pha            ; stack : pch
.1fe6	ad f6 1f	          lda  pc
.1fe9	48		          pha            ; stack : pcl, pch
.1fea	ad f4 1f	          lda  rp        ; get rp
.1fed	48		          pha            ; stack : rp, pcl, pch
.1fee	ad f5 1f	          lda  ra        ; set ra
.1ff1	58		          cli
.1ff2	28		          plp            ; stack : pcl, pch
.1ff3	60		          rts
>1ff4	00		rp        .byte     0
>1ff5	00		ra        .byte     0
>1ff6	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.1ff8			blkfill
.1ff8	20 82 1f	bf0            jsr  push
.1ffb	20 b9 20	               jsr  savezp1
.1ffe	84 fc		               sty  zpage1+1
.2000	a0 00		               ldy  #$00
.2002	84 fb		               sty  zpage1
.2004	91 fb		bf1            sta  (zpage1),y
.2006	c8		               iny
.2007	d0 fb		               bne  bf1
.2009	20 c8 20	               jsr  restzp1
.200c	20 c1 1f	               jsr  pop
.200f	60		               rts
.2010			memfill
.2010	20 82 1f	               jsr  push
.2013	20 f8 1f	mf1            jsr  blkfill
.2016	c8		               iny
.2017	ca		               dex
.2018	d0 f9		               bne  mf1
.201a	20 c1 1f	               jsr  pop
.201d	60		               rts
.201e			memmove
.201e	20 82 1f	               jsr  push
.2021	ba		               tsx            ; On se crée un pointeur ...
.2022	8a		               txa
.2023	18		               clc
.2024	69 0b		               adc  #11
.2026	a8		               tay
.2027	a2 06		               ldx  #$06
.2029	b9 00 01	nextbyte       lda  $0100,y
.202c	99 78 20	               sta  words,y
.202f	c8		               iny
.2030	ca		               dex
.2031	d0 f6		               bne  nextbyte
.2033	ad 78 20	               lda  s
.2036	8d 4f 20	               sta  source+1
.2039	ad 79 20	               lda  s+1
.203c	8d 50 20	               sta  source+2
.203f	ad 7a 20	               lda  d
.2042	8d 4c 20	               sta  destin+1
.2045	ad 7b 20	               lda  d+1
.2048	8d 4d 20	               sta  destin+2
.204b	ad ff ff	destin         lda  $ffff
.204e	8d ff ff	source         sta  $ffff
.2051	ee 4c 20	               inc  destin+1
.2054	d0 03		               bne  src
.2056	ee 4d 20	               inc  destin+2
.2059	ee 4f 20	src            inc  source+1
.205c	d0 03		               bne  cnt
.205e	ee 50 20	               inc  source+2
.2061	ad 7c 20	cnt            lda  compte
.2064	d0 08		               bne  decit
.2066	ad 7d 20	               lda  compte+1
.2069	f0 09		               beq  fini
.206b	ce 7d 20	               dec  compte+1
.206e	ce 7c 20	decit          dec  compte
.2071	4c 4b 20	               jmp  destin
.2074	20 c1 1f	fini           jsr  pop
.2077	60		               rts
.2078			words
>2078	00 00		s         .word     $0000
>207a	00 00		d         .word     $0000
>207c	00 00		compte    .word     $0000
.207e			decword
.207e	20 82 1f	               jsr  push
.2081	86 fd		               stx  zpage2
.2083	84 fe		               sty  zpage2+1
.2085	20 c1 1f	               jsr  pop
.2088	60		               rts
.2089			inczp1
.2089	08		               php
.208a	48		               pha
.208b	e6 fb		               inc  zpage1
.208d	a5 fb		               lda  zpage1
.208f	d0 02		               bne  nopage
.2091	e6 fc		               inc  zpage1+1
.2093	68		nopage         pla
.2094	28		               plp
.2095	60		               rts
.2096			deczp1
.2096	08		                php
.2097	48		                pha
.2098	c6 fb		                dec  zpage1
.209a	d0 02		                bne  nopage
.209c	c6 fc		                dec  zpage1+1
.209e	68		nopage          pla
.209f	28		                plp
.20a0	60		                rts
.20a1			inczp2
.20a1	08		               php
.20a2	48		               pha
.20a3	e6 fd		               inc  zpage2
.20a5	a5 fd		               lda  zpage2
.20a7	d0 02		               bne  nopage
.20a9	e6 fe		               inc  zpage2+1
.20ab	68		nopage         pla
.20ac	28		               plp
.20ad	60		               rts
.20ae			deczp2
.20ae	08		               php
.20af	48		               pha
.20b0	a5 fd		               lda  zpage2
.20b2	d0 02		               bne  nopage
.20b4	c6 fe		               dec  zpage2+1
.20b6	68		nopage         pla
.20b7	28		               plp
.20b8	60		               rts
.20b9			savezp1
.20b9	08		               php
.20ba	48		               pha
.20bb	a5 fb		               lda  zpage1
.20bd	8d 35 21	               sta  zp1
.20c0	a5 fc		               lda  zpage1+1
.20c2	8d 36 21	               sta  zp1+1
.20c5	68		               pla
.20c6	28		               plp
.20c7	60		               rts
.20c8			restzp1
.20c8	08		               php
.20c9	48		               pha
.20ca	ad 35 21	               lda zp1
.20cd	85 fb		               sta zpage1
.20cf	ad 36 21	               lda zp1+1
.20d2	85 fc		               sta zpage1+1
.20d4	68		               pla
.20d5	28		               plp
.20d6	60		               rts
.20d7			savezp2
.20d7	08		         php
.20d8	48		         pha
.20d9	a5 fd		         lda zpage2
.20db	8d 37 21	         sta zp2
.20de	a5 fe		         lda zpage2+1
.20e0	8d 38 21	         sta zp2+1
.20e3	68		         pla
.20e4	28		         plp
.20e5	60		         rts
.20e6			restzp2
.20e6	08		                php
.20e7	48		                pha
.20e8	ad 37 21	                lda  zp2
.20eb	85 fd		                sta  zpage2
.20ed	ad 38 21	                lda  zp2+1
.20f0	85 fe		                sta  zpage2+1
.20f2	68		                pla
.20f3	28		                plp
.20f4	60		                rts
.20f5			xy2addr
.20f5	08		                php
.20f6	48		                pha
.20f7	8a		                txa
.20f8	48		                pha
.20f9	98		                tya
.20fa	48		                pha
.20fb	ad 30 21	                lda     addr1+1
.20fe	8d 32 21	                sta     addr2+1
.2101	ad 2f 21	                lda     addr1
.2104	8d 31 21	                sta     addr2
.2107	c0 00		                cpy     #$00
.2109	f0 0f		                beq     addx
.210b	18		moreline        clc
.210c	6d 2e 21	                adc     ymult
.210f	90 03		                bcc     norepy
.2111	ee 32 21	                inc     addr2+1
.2114	8d 31 21	norepy          sta     addr2
.2117	88		                dey
.2118	d0 f1		                bne     moreline
.211a	8a		addx            txa
.211b	18		                clc
.211c	6d 31 21	                adc     addr2
.211f	90 03		                bcc     thatsit
.2121	ee 32 21	                inc     addr2+1
.2124	8d 31 21	thatsit         sta     addr2
.2127	68		                pla
.2128	a8		                tay
.2129	68		                pla
.212a	aa		                tax
.212b	68		                pla
.212c	28		                plp
.212d	60		                rts
>212e	28		ymult          .byte     40
>212f	00 00		addr1          .word     $0000
>2131	00 00		addr2          .word     $0000
>2133	00 00		bytecnt        .word     $0000
>2135	00 00		zp1        .word   $0000
>2137	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>2139	01		a2hexcol       .byte     1              ; pour aputscxy
>213a	00		a2hexbkcol     .byte     %00000000
.213b			a2hexpos
>213b	00		a2hexpx        .byte     0              ; pour aputsxy
>213c	00		a2hexpy        .byte     0
>213d	24		a2hexprefix    .byte     "$"            ; pour aputs
>213e	00 00		a2hexstr       .word     $00
>2140	00 00		               .word     $00
>2142	00		               .byte     0              ; 0 end string
>2143	30 30 30 30	abin           .null     "00000000"
>2147	30 30 30 30 00
>214c	20 20 20 00	adec           .null     "   "
.2150			putahexfmtxy
.2150	20 82 1f	               jsr  push
.2153	20 9f 21	               jsr  a2hex
.2156	ae 3b 21	               ldx  a2hexpx
.2159	ac 3c 21	               ldy  a2hexpy
.215c	20 ab 1e	               jsr  gotoxy
.215f	a2 3d		               ldx  #<a2hexprefix
.2161	a0 21		               ldy  #>a2hexprefix
.2163	20 91 1e	               jsr  puts
.2166	20 c1 1f	               jsr  pop
.2169	60		               rts
.216a			putahexfmt
.216a	20 82 1f	               jsr  push
.216d	20 9f 21	               jsr  a2hex
.2170	a2 3d		               ldx  #<a2hexprefix
.2172	a0 21		               ldy  #>a2hexprefix
.2174	20 91 1e	               jsr  puts
.2177	20 c1 1f	               jsr  pop
.217a	60		               rts
.217b			putahex
.217b	20 82 1f	               jsr  push
.217e	20 9f 21	               jsr  a2hex
.2181	a2 3e		               ldx  #<a2hexstr
.2183	a0 21		               ldy  #>a2hexstr
.2185	20 91 1e	               jsr  puts
.2188	20 c1 1f	               jsr  pop
.218b	60		               rts
.218c			nib2hex
.218c	08		               php
.218d	29 0f		               and  #$0f
.218f	f8		               sed
.2190	18		               clc
.2191	69 90		               adc  #$90
.2193	69 40		               adc  #$40
.2195	d8		               cld
.2196	28		               plp
.2197	60		               rts
.2198			lsra4bits
.2198	08		               php
.2199	4a		               lsr
.219a	4a		               lsr
.219b	4a		               lsr
.219c	4a		               lsr
.219d	28		               plp
.219e	60		               rts
.219f			a2hex
.219f	08		               php
.21a0	48		               pha
.21a1	48		               pha
.21a2	20 98 21	               jsr  lsra4bits
.21a5	20 8c 21	               jsr  nib2hex
.21a8	8d 3e 21	               sta  a2hexstr
.21ab	68		               pla
.21ac	20 8c 21	               jsr  nib2hex
.21af	8d 3f 21	               sta  a2hexstr+1
.21b2	a9 00		               lda  #$00                ; set end of string
.21b4	8d 40 21	               sta  a2hexstr+2
.21b7	68		               pla
.21b8	28		               plp
.21b9	60		               rts
.21ba			xy2hex
.21ba	20 82 1f	               jsr  push
.21bd	20 9f 21	               jsr  a2hex
.21c0	8a		               txa
.21c1	48		               pha
.21c2	20 98 21	               jsr  lsra4bits
.21c5	20 8c 21	               jsr  nib2hex
.21c8	8d 3e 21	               sta  a2hexstr
.21cb	68		               pla
.21cc	20 8c 21	               jsr  nib2hex
.21cf	8d 3f 21	               sta  a2hexstr+1
.21d2	98		               tya
.21d3	48		               pha
.21d4	20 98 21	               jsr  lsra4bits
.21d7	20 8c 21	               jsr  nib2hex
.21da	8d 40 21	               sta  a2hexstr+2
.21dd	68		               pla
.21de	20 8c 21	               jsr  nib2hex
.21e1	8d 41 21	               sta  a2hexstr+3
.21e4	a9 00		               lda  #$00                ; 0 ended string
.21e6	8d 42 21	               sta  a2hexstr+4
.21e9	20 c1 1f	               jsr  pop
.21ec			atobin
.21ec	20 82 1f	               jsr  push
.21ef	a2 08		               ldx  #8
.21f1	a0 00		               ldy  #0
.21f3	18		               clc
.21f4	2a		nextbit        rol
.21f5	48		               pha
.21f6	69 00		               adc  #$00
.21f8	29 01		               and  #$01
.21fa	20 8c 21	               jsr  nib2hex
.21fd	99 43 21	               sta  abin,y
.2200	68		               pla
.2201	c8		               iny
.2202	ca		               dex
.2203	d0 ef		               bne  nextbit
.2205	a9 00		               lda  #0
.2207	99 43 21	               sta  abin,y
.220a	20 c1 1f	               jsr  pull
.220d	60		               rts
.220e			putabin
.220e	20 ec 21	               jsr     atobin
.2211	20 82 1f	               jsr     push
.2214	a2 43		               ldx     #<abin
.2216	a0 21		               ldy     #>abin
.2218	20 91 1e	               jsr     puts
.221b	20 c1 1f	               jsr     pop
.221e	60		               rts
.221f			printabin
.221f	20 82 1f	               jsr     push
.2222	a2 43		               ldx     #<abin
.2224	a0 21		               ldy     #>abin
.2226	20 91 1e	               jsr     puts
.2229	20 c1 1f	               jsr     pop
.222c	60		               rts
.222d			putabinfmt
.222d	08		               php
.222e	48		               pha
.222f	a9 25		               lda     #"%"
.2231	20 8b 1e	               jsr     putch
.2234	68		               pla
.2235	20 0e 22	               jsr     putabin
.2238	28		               plp
.2239	60		               rts
.223a			putabinxy
.223a	20 ab 1e	               jsr     gotoxy
.223d	20 0e 22	               jsr     putabin
.2240	60		               rts
.2241			putabinfmtxy
.2241	20 ab 1e	               jsr     gotoxy
.2244	20 2d 22	               jsr     putabinfmt
.2247	60		               rts
.2248			atodec
.2248	20 82 1f	               jsr  push
.224b	f8		               sed
.224c	aa		               tax
.224d	a0 00		               ldy  #$00
.224f	a9 00		               lda  #$00
.2251	18		nextbit        clc
.2252	69 01		               adc  #$01
.2254	90 01		               bcc  decx
.2256	c8		               iny
.2257	ca		decx           dex
.2258	d0 f7		               bne  nextbit
.225a	48		               pha
.225b	98		               tya
.225c	20 8c 21	               jsr  nib2hex
.225f	8d 4c 21	               sta  adec
.2262	68		               pla
.2263	48		               pha
.2264	20 8c 21	               jsr  nib2hex
.2267	8d 4e 21	               sta  adec+2
.226a	68		               pla
.226b	6a		               ror
.226c	6a		               ror
.226d	6a		               ror
.226e	6a		               ror
.226f	20 8c 21	               jsr  nib2hex
.2272	8d 4d 21	               sta  adec+1
.2275	d8		               cld
.2276	20 c1 1f	               jsr  pull
.2279	60		               rts
>227a	00 00 00	buffer         .byte     0,0,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>227d	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>2281	00 00 00 00 00 00 00 00 00 0d 00 00
>228d	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>2291	00 00 00 00 00 00 00 00 00 00 00 00
>229d	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>22a1	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>22ad	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>22b1	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>22bd	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>22c1	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>22cd	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>22d1	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>22dd	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>22e1	00 00 00 00 00 00 00 00 00 00 00 00
>22ed	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>22f1	00 00 00 00 00 00 00 00 00 00 00 00
>22fd	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>2301	00 00 00 00 00 00 00 00 00 00 00 00
>230d	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>2311	00 00 00 00 00 00 00 00 00 00 00 00
>231d	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>2321	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>232d	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>2331	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>233d	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>2341	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>234d	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>2351	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>235d	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>2361	00 00 00 00 00 00 00 00 00 00 00 00
>236d	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>2371	00 00 00 00 00 00 00 00 00 00 00 00
.237d			waitstop
.237d	20 82 1f	               jsr  push
.2380	20 ed f6	wait           jsr  k_stop
.2383	d0 fb		               bne  wait
.2385	20 c1 1f	               jsr  pop
.2388	60		               rts
.2389			anykey
.2389	08		               php
.238a	48		               pha
.238b	a5 cb		nokey          lda 203
.238d	c9 40		               cmp #64
.238f	f0 fa		               beq nokey
.2391	20 97 23	               jsr releasekey
.2394	68		               pla
.2395	28		               plp
.2396	60		               rts
.2397			releasekey
.2397	08		               php
.2398	48		               pha
.2399	a5 cb		keypressed     lda 203
.239b	c9 40		               cmp #64
.239d	d0 fa		               bne keypressed
.239f	68		               pla
.23a0	28		               plp
.23a1	60		               rts
.23a2			getkey
.23a2	20 e4 ff	again          jsr  getin
.23a5	c9 00		               cmp  #0
.23a7	f0 f9		               beq  again
.23a9	60		               rts
.23aa			waitkey
.23aa	20 82 1f	               jsr  push
.23ad	8d fb 23	               sta  thekey
.23b0	20 e4 ff	nope           jsr  getin
.23b3	20 d2 ff	               jsr  chrout
.23b6	cd fb 23	               cmp  thekey
.23b9	d0 f5		               bne  nope
.23bb	20 d2 ff	               jsr  chrout
.23be	20 c1 1f	               jsr  pop
.23c1	60		               rts
.23c2			waitspace
.23c2	20 82 1f	               jsr  push
.23c5	a9 7f		wait           lda  #$7f  ;%01111111
.23c7	8d 00 dc	               sta  $dc00
.23ca	ad 01 dc	               lda  $dc01
.23cd	29 10		               and  #$10  ;mask %00010000
.23cf	d0 f4		               bne  wait
.23d1	20 c1 1f	               jsr  pop
.23d4			waitsstop
.23d4	20 82 1f	               jsr  push
.23d7	20 ed f6	wait           jsr  k_stop  ;%01111111
.23da	d0 fb		               bne  wait
.23dc	20 c1 1f	               jsr  pop
.23df			waitreturn
.23df	20 82 1f	               jsr  push
.23e2	ad fc 23	               lda  thecount
.23e5	8d 00 04	               sta  scrnram
.23e8	a9 02		               lda  #$02
.23ea	8d 00 d8	               sta  colorram
.23ed	20 e4 ff	nope           jsr  getin
.23f0	c9 0d		nohex          cmp  #$0d
.23f2	d0 f9		               bne  nope
.23f4	ee fc 23	               inc  thecount
.23f7	20 c1 1f	               jsr  pop
.23fa	60		               rts
>23fb	00		thekey         .byte   0
>23fc	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  End of listing

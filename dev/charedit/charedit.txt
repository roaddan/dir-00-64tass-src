
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Mon Nov 13 11:52:14 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

=$0400			scrnnewram     =    $0400
=14			charsdef       =    14
=9			grid_top       =    9
=1			grid_left      =    1
=16			grid_bot       =    grid_top + 7
=8			grid_right     =    grid_left + 7
=$03			mesgcol        =    vcyan
=$07			menu1col       =    vjaune
=$0d			menu2col       =    vvert1
=$01			flashcol       =    vblanc
.080d			main
.080d	20 9e 1c	               jsr  push
.0810	20 51 1b	               jsr  screendis
.0813	20 6b 1b	               jsr  scrmaninit
.0816	20 9d 0d	               jsr  copycharset
.0819	20 87 0d	               jsr  setscreenptr
.081c	20 c5 08	               jsr  setdefaultchar
.081f	20 fe 0d	               jsr  staticscreen
.0822	a9 00		               lda  #$00
.0824	8d b2 08	               sta  fkeyset
.0827	20 3a 0e	               jsr  showfkeys
.082a	20 53 15	               jsr  f8action
.082d	20 53 15	               jsr  f8action
.0830	a9 00		               lda  #$00
.0832	20 5e 1b	               jsr  screenena
.0835	20 90 0a	               jsr  keyaction
.0838	20 9e 1c	               jsr  push
.083b	a2 00		               ldx  #0
.083d	a0 00		               ldy  #0
.083f	20 c7 1b	               jsr  gotoxy
.0842	20 dd 1c	               jsr  pop
.0845	20 8b 1b	               jsr  cls
.0848	a2 31		               ldx #<bye_msg
.084a	a0 18		               ldy #>bye_msg
.084c	20 36 1c	               jsr putscxy
.084f	a2 53		               ldx #<any_msg
.0851	a0 18		               ldy #>any_msg
.0853	20 36 1c	               jsr putscxy
.0856	a2 6d		               ldx #<whoami0
.0858	a0 18		               ldy #>whoami0
.085a	20 36 1c	               jsr putscxy
.085d	a2 91		               ldx #<whoami1
.085f	a0 18		               ldy #>whoami1
.0861	20 36 1c	               jsr putscxy
.0864	a2 b5		               ldx #<whoami2
.0866	a0 18		               ldy #>whoami2
.0868	20 36 1c	               jsr putscxy
.086b	a2 d9		               ldx #<whoami3
.086d	a0 18		               ldy #>whoami3
.086f	20 36 1c	               jsr putscxy
.0872	a2 fd		               ldx #<whoami4
.0874	a0 18		               ldy #>whoami4
.0876	20 36 1c	               jsr putscxy
.0879	a2 21		               ldx #<whoami5
.087b	a0 19		               ldy #>whoami5
.087d	20 36 1c	               jsr putscxy
.0880	a2 45		               ldx #<whoami6
.0882	a0 19		               ldy #>whoami6
.0884	20 36 1c	               jsr putscxy
.0887	a2 69		               ldx #<whoami7
.0889	a0 19		               ldy #>whoami7
.088b	20 36 1c	               jsr putscxy
.088e	a2 8d		               ldx #<whoami8
.0890	a0 19		               ldy #>whoami8
.0892	20 36 1c	               jsr putscxy
.0895	20 9e 1c	               jsr  push
.0898	a2 00		               ldx  #0
.089a	a0 00		               ldy  #0
.089c	20 c7 1b	               jsr  gotoxy
.089f	20 dd 1c	               jsr  pop
.08a2	20 be 20	               jsr  getkey
.08a5	20 dd 1c	               jsr  pop
.08a8	60		               rts
>08a9	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>08ad	08 04 02 01
>08b1	00		editmode       .byte     0
>08b2	00		fkeyset        .byte     0
>08b3	00		currentchar    .byte     0
>08b4	00		currentkey     .byte     0
>08b5	00		bitmapoffset   .byte     0
>08b6	00 00		mapaddr        .word     0
>08b8	00 00		byteaddr       .word     0
>08ba	00 00		gridaddr       .word     0
>08bc	09		cursln         .byte     grid_top
>08bd	01		curscl         .byte     grid_left

;******  Processing file: routines.asm

.08be			template
.08be	20 9e 1c	               jsr  push
.08c1	20 dd 1c	               jsr  pop
.08c4	60		               rts
.08c5			setdefaultchar
.08c5	20 9e 1c	               jsr  push
.08c8	a9 40		               lda  #$40
.08ca	8d b4 08	               sta  currentkey
.08cd	aa		               tax
.08ce	bc 99 1f	               ldy  asciitorom,x
.08d1	8c b5 08	               sty  bitmapoffset
.08d4	20 49 09	               jsr  showkeyval
.08d7	20 ce 0c	               jsr  drawbitmap
.08da	20 9e 1c	               jsr  push
.08dd	a2 0d		               ldx  #13
.08df	a0 0c		               ldy  #12
.08e1	20 c7 1b	               jsr  gotoxy
.08e4	20 dd 1c	               jsr  pop
.08e7	20 a7 1b	               jsr  putch
.08ea	20 9e 1c	               jsr  push
.08ed	a2 11		               ldx  #17
.08ef	a0 05		               ldy  #5
.08f1	20 c7 1b	               jsr  gotoxy
.08f4	20 dd 1c	               jsr  pop
.08f7	20 64 1f	               jsr  atodec
.08fa	20 9e 1c	               jsr  push
.08fd	a2 68		isx            ldx  #<adec
.08ff	a0 1e		isy            ldy  #>adec
.0901	20 ad 1b	               jsr  puts
.0904	20 dd 1c	               jsr  pull
.0907	20 dd 1c	               jsr  pop
.090a	60		               rts
.090b			setmenuacolor
.090b	20 9e 1c	               jsr  push
.090e	8d b1 19	               sta  f1abutton
.0911	8d cb 19	               sta  f2abutton
.0914	8d e5 19	               sta  f3abutton
.0917	8d ff 19	               sta  f4abutton
.091a	8d 19 1a	               sta  f5abutton
.091d	8d 33 1a	               sta  f6abutton
.0920	8d 4d 1a	               sta  f7abutton
.0923	8d 67 1a	               sta  f8abutton
.0926	20 dd 1c	               jsr  pop
.0929	60		               rts
.092a			setmenubcolor
.092a	20 9e 1c	               jsr  push
.092d	8d 81 1a	               sta  f1bbutton
.0930	8d 9b 1a	               sta  f2bbutton
.0933	8d b5 1a	               sta  f3bbutton
.0936	8d cf 1a	               sta  f4bbutton
.0939	8d e9 1a	               sta  f5bbutton
.093c	8d 03 1b	               sta  f6bbutton
.093f	8d 1d 1b	               sta  f7bbutton
.0942	8d 37 1b	               sta  f8bbutton
.0945	20 dd 1c	               jsr  pop
.0948	60		               rts
.0949			showkeyval
.0949	20 9e 1c	               jsr  push
.094c	20 9e 1c	               jsr  push
.094f	a2 01		               ldx  #1
.0951	a0 13		               ldy  #19
.0953	20 c7 1b	               jsr  gotoxy
.0956	20 dd 1c	               jsr  pop
.0959	ad b4 08	               lda  currentkey
.095c	20 a7 1b	               jsr  putch
.095f	48		               pha
.0960	a9 3d		               lda  #'='
.0962	20 a7 1b	               jsr  putch
.0965	a9 25		               lda  #'%'
.0967	20 a7 1b	               jsr  putch
.096a	68		               pla
.096b	20 2a 1f	               jsr  putabin
.096e	20 9e 1c	               jsr  push
.0971	a2 01		               ldx  #1
.0973	a0 14		               ldy  #20
.0975	20 c7 1b	               jsr  gotoxy
.0978	20 dd 1c	               jsr  pop
.097b	20 9e 1c	               jsr  push
.097e	a2 4a		isx            ldx  #<txt1
.0980	a0 0a		isy            ldy  #>txt1
.0982	20 ad 1b	               jsr  puts
.0985	20 dd 1c	               jsr  pull
.0988	a9 24		               lda  #'$'
.098a	20 a7 1b	               jsr  putch
.098d	ad b4 08	               lda  currentkey
.0990	20 97 1e	               jsr  putahex
.0993	20 9e 1c	               jsr  push
.0996	a2 01		               ldx  #1
.0998	a0 15		               ldy  #21
.099a	20 c7 1b	               jsr  gotoxy
.099d	20 dd 1c	               jsr  pop
.09a0	20 9e 1c	               jsr  push
.09a3	a2 55		isx            ldx  #<txt2
.09a5	a0 0a		isy            ldy  #>txt2
.09a7	20 ad 1b	               jsr  puts
.09aa	20 dd 1c	               jsr  pull
.09ad	a9 24		               lda  #'$'
.09af	20 a7 1b	               jsr  putch
.09b2	ad fd 0d	               lda  bitmapaddr+1
.09b5	20 97 1e	               jsr  putahex
.09b8	ad fc 0d	               lda  bitmapaddr
.09bb	20 97 1e	               jsr  putahex
.09be	20 9e 1c	               jsr  push
.09c1	a2 01		               ldx  #1
.09c3	a0 16		               ldy  #22
.09c5	20 c7 1b	               jsr  gotoxy
.09c8	20 dd 1c	               jsr  pop
.09cb	20 9e 1c	               jsr  push
.09ce	a2 60		isx            ldx  #<txt3
.09d0	a0 0a		isy            ldy  #>txt3
.09d2	20 ad 1b	               jsr  puts
.09d5	20 dd 1c	               jsr  pull
.09d8	a9 24		               lda  #'$'
.09da	20 a7 1b	               jsr  putch
.09dd	ad b5 08	               lda  bitmapoffset
.09e0	20 97 1e	               jsr  putahex
.09e3	20 9e 1c	               jsr  push
.09e6	a2 01		               ldx  #1
.09e8	a0 17		               ldy  #23
.09ea	20 c7 1b	               jsr  gotoxy
.09ed	20 dd 1c	               jsr  pop
.09f0	20 9e 1c	               jsr  push
.09f3	a2 6d		isx            ldx  #<txt4
.09f5	a0 0a		isy            ldy  #>txt4
.09f7	20 ad 1b	               jsr  puts
.09fa	20 dd 1c	               jsr  pull
.09fd	a9 24		               lda  #'$'
.09ff	20 a7 1b	               jsr  putch
.0a02	ad b7 08	               lda  mapaddr+1
.0a05	20 97 1e	               jsr  putahex
.0a08	ad b6 08	               lda  mapaddr
.0a0b	20 97 1e	               jsr  putahex
.0a0e	20 9e 1c	               jsr  push
.0a11	a2 01		               ldx  #1
.0a13	a0 18		               ldy  #24
.0a15	20 c7 1b	               jsr  gotoxy
.0a18	20 dd 1c	               jsr  pop
.0a1b	20 9e 1c	               jsr  push
.0a1e	a2 78		isx            ldx  #<txt5
.0a20	a0 0a		isy            ldy  #>txt5
.0a22	20 ad 1b	               jsr  puts
.0a25	20 dd 1c	               jsr  pull
.0a28	ad bd 08	               lda  curscl
.0a2b	20 97 1e	               jsr  putahex
.0a2e	a9 da		               lda  #$da
.0a30	20 a7 1b	               jsr  putch
.0a33	ad bc 08	               lda  cursln
.0a36	20 97 1e	               jsr  putahex
.0a39	20 dd 1c	               jsr  pop
.0a3c	60		               rts
>0a3d	50 45 54 53	txt0           .null     "petscii :   "
>0a41	43 49 49 20 3a 20 20 20 00
>0a4a	4b 45 59 20	txt1           .null     "key code: "
>0a4e	43 4f 44 45 3a 20 00
>0a55	42 49 54 4d	txt2           .null     "bitmap..: "
>0a59	41 50 2e 2e 3a 20 00
>0a60	4f 46 46 53	txt3           .null     "offset..:   "
>0a64	45 54 2e 2e 3a 20 20 20 00
>0a6d	4d 41 50 41	txt4           .null     "mapaddr.: "
>0a71	44 44 52 2e 3a 20 00
>0a78	43 55 52 53	txt5           .null     "cursval.: "
>0a7c	56 41 4c 2e 3a 20 00
>0a83	53 54 41 43	txt6           .null     "stack......:"
>0a87	4b 2e 2e 2e 2e 2e 2e 3a 00
.0a90			keyaction
.0a90	20 9e 1c	               jsr  push
.0a93	20 be 20	loop           jsr  getkey
.0a96	20 49 09	               jsr  showkeyval
.0a99	c9 85		f1             cmp  #key_f1
.0a9b	d0 03		               bne  f2
.0a9d	4c fb 0a	               jmp  dof1
.0aa0	c9 89		f2             cmp  #key_f2
.0aa2	d0 03		               bne  f3
.0aa4	4c 01 0b	               jmp  dof2
.0aa7	c9 86		f3             cmp  #key_f3
.0aa9	d0 03		               bne  f4
.0aab	4c 07 0b	               jmp  dof3
.0aae	c9 8a		f4             cmp  #key_f4
.0ab0	d0 03		               bne  f5
.0ab2	4c 0d 0b	               jmp  dof4
.0ab5	c9 87		f5             cmp  #key_f5
.0ab7	d0 03		               bne  f6
.0ab9	4c 13 0b	               jmp  dof5
.0abc	c9 8b		f6             cmp  #key_f6
.0abe	d0 03		               bne  f7
.0ac0	4c 19 0b	               jmp  dof6
.0ac3	c9 88		f7             cmp  #key_f7
.0ac5	d0 03		               bne  f8
.0ac7	4c 1f 0b	               jmp  dof7
.0aca	c9 8c		f8             cmp  #key_f8
.0acc	d0 03		               bne  ctrlx
.0ace	4c 25 0b	               jmp  dof8
.0ad1	c9 18		ctrlx          cmp  #ctrl_x
.0ad3	d0 03		               bne  reste
.0ad5	4c 2b 0b	               jmp  doquit
.0ad8			reste
.0ad8	20 9e 1c	               jsr  push
.0adb	a2 0d		               ldx  #13
.0add	a0 0c		               ldy  #12
.0adf	20 c7 1b	               jsr  gotoxy
.0ae2	20 dd 1c	               jsr  pop
.0ae5	20 a7 1b	               jsr  putch
.0ae8	8d b4 08	               sta  currentkey
.0aeb	aa		               tax
.0aec	bc 99 1f	               ldy  asciitorom,x
.0aef	8c b5 08	               sty  bitmapoffset
.0af2	20 49 09	               jsr  showkeyval
.0af5	20 ce 0c	               jsr  drawbitmap
.0af8	4c 93 0a	               jmp  loop
.0afb	20 b7 0f	dof1           jsr  f1action  ;edit/reverse
.0afe	4c 93 0a	               jmp  loop
.0b01	20 ad 10	dof2           jsr  f2action  ;save/flip vert
.0b04	4c 93 0a	               jmp  loop
.0b07	20 72 11	dof3           jsr  f3action  ;load/flip horz
.0b0a	4c 93 0a	               jmp  loop
.0b0d	20 3d 12	dof4           jsr  f4action  ;copy/scroll r
.0b10	4c 93 0a	               jmp  loop
.0b13	20 d5 12	dof5           jsr  f5action  ;clear/scroll l
.0b16	4c 93 0a	               jmp  loop
.0b19	20 95 13	dof6           jsr  f6action  ;fill;/scroll up
.0b1c	4c 93 0a	               jmp  loop
.0b1f	20 7d 14	dof7           jsr  f7action  ;clear;/scroll down
.0b22	4c 93 0a	               jmp  loop
.0b25	20 53 15	dof8           jsr  f8action  ; function
.0b28	4c 93 0a	               jmp  loop
.0b2b	20 dd 1c	doquit         jsr  pop
.0b2e	60		               rts
.0b2f			editor
.0b2f	20 9e 1c	               jsr  push
.0b32	20 9e 1c	               jsr  push
.0b35	a2 ff		               ldx  #<blankmsg
.0b37	a0 15		               ldy  #>blankmsg
.0b39	20 36 1c	               jsr  putscxy
.0b3c	a2 1c		               ldx  #<exit_msg
.0b3e	a0 18		               ldy  #>exit_msg
.0b40	20 36 1c	               jsr  putscxy
.0b43	20 dd 1c	               jsr  pop
.0b46	20 9e 1c	               jsr  push
.0b49	a2 ff		               ldx  #<blankmsg
.0b4b	a0 15		               ldy  #>blankmsg
.0b4d	20 36 1c	               jsr  putscxy
.0b50	a2 2a		               ldx  #<edit_msg
.0b52	a0 16		               ldy  #>edit_msg
.0b54	20 36 1c	               jsr  putscxy
.0b57	20 dd 1c	               jsr  pop
.0b5a	a9 0c		               lda  #vgris1
.0b5c	20 0b 09	               jsr  setmenuacolor
.0b5f	a9 0d		               lda  #vvert1
.0b61	8d b1 19	               sta  f1abutton
.0b64	20 3a 0e	               jsr  showfkeys
.0b67	20 8a 0c	               jsr  setcurs
.0b6a	ad b4 08	               lda  currentkey
.0b6d	20 9e 1c	               jsr  push
.0b70	a2 11		               ldx  #17
.0b72	a0 05		               ldy  #5
.0b74	20 c7 1b	               jsr  gotoxy
.0b77	20 dd 1c	               jsr  pop
.0b7a	20 64 1f	               jsr  atodec
.0b7d	20 9e 1c	               jsr  push
.0b80	a2 68		isx            ldx  #<adec
.0b82	a0 1e		isy            ldy  #>adec
.0b84	20 ad 1b	               jsr  puts
.0b87	20 dd 1c	               jsr  pull
.0b8a	20 be 20	ed_loop        jsr  getkey
.0b8d	c9 91		cu             cmp  #cursu
.0b8f	d0 03		               bne  cd
.0b91	4c 07 0c	               jmp  do_up
.0b94	c9 11		cd             cmp  #cursd
.0b96	d0 03		               bne  cl
.0b98	4c 1a 0c	               jmp  do_down
.0b9b	c9 9d		cl             cmp  #cursl
.0b9d	d0 03		               bne  cr
.0b9f	4c 2d 0c	               jmp  do_left
.0ba2	c9 1d		cr             cmp  #cursr
.0ba4	d0 03		               bne  cx
.0ba6	4c 40 0c	               jmp  do_right
.0ba9	c9 18		cx             cmp  #ctrl_x
.0bab	d0 03		               bne  sp
.0bad	4c 5c 0c	               jmp  do_ctrlx
.0bb0	c9 20		sp             cmp  #$20
.0bb2	d0 03		               bne  rest
.0bb4	4c 53 0c	               jmp  do_swap
.0bb7			rest
.0bb7	20 9e 1c	               jsr  push
.0bba	a2 0d		               ldx  #13
.0bbc	a0 0c		               ldy  #12
.0bbe	20 c7 1b	               jsr  gotoxy
.0bc1	20 dd 1c	               jsr  pop
.0bc4	20 a7 1b	               jsr  putch
.0bc7	8d b4 08	               sta  currentkey
.0bca	aa		               tax
.0bcb	bc 99 1f	               ldy  asciitorom,x
.0bce	8c b5 08	               sty  bitmapoffset
.0bd1	20 49 09	               jsr  showkeyval
.0bd4	20 ce 0c	               jsr  drawbitmap
.0bd7	20 9e 1c	               jsr  push
.0bda	a2 0d		               ldx  #13
.0bdc	a0 0c		               ldy  #12
.0bde	20 c7 1b	               jsr  gotoxy
.0be1	20 dd 1c	               jsr  pop
.0be4	20 a7 1b	               jsr  putch
.0be7	20 9e 1c	               jsr  push
.0bea	a2 11		               ldx  #17
.0bec	a0 05		               ldy  #5
.0bee	20 c7 1b	               jsr  gotoxy
.0bf1	20 dd 1c	               jsr  pop
.0bf4	20 64 1f	               jsr  atodec
.0bf7	20 9e 1c	               jsr  push
.0bfa	a2 68		isx            ldx  #<adec
.0bfc	a0 1e		isy            ldy  #>adec
.0bfe	20 ad 1b	               jsr  puts
.0c01	20 dd 1c	               jsr  pull
.0c04	4c 59 0c	               jmp  totop
.0c07	ad bc 08	do_up          lda  cursln
.0c0a	c9 09		               cmp  #grid_top
.0c0c	f0 4b		               beq  totop
.0c0e	20 ac 0c	               jsr  clrcurs
.0c11	ce bc 08	               dec  cursln
.0c14	20 8a 0c	               jsr  setcurs
.0c17	4c 59 0c	               jmp  totop
.0c1a	ad bc 08	do_down        lda  cursln
.0c1d	c9 10		               cmp  #grid_bot
.0c1f	f0 38		               beq  totop
.0c21	20 ac 0c	               jsr  clrcurs
.0c24	ee bc 08	               inc  cursln
.0c27	20 8a 0c	               jsr  setcurs
.0c2a	4c 59 0c	               jmp  totop
.0c2d	ad bd 08	do_left        lda  curscl
.0c30	c9 01		               cmp  #grid_left
.0c32	f0 25		               beq  totop
.0c34	20 ac 0c	               jsr  clrcurs
.0c37	ce bd 08	               dec  curscl
.0c3a	20 8a 0c	               jsr  setcurs
.0c3d	4c 59 0c	               jmp  totop
.0c40	ad bd 08	do_right       lda  curscl
.0c43	c9 08		               cmp  #grid_right
.0c45	f0 12		               beq  totop
.0c47	20 ac 0c	               jsr  clrcurs
.0c4a	ee bd 08	               inc  curscl
.0c4d	20 8a 0c	               jsr  setcurs
.0c50	4c 59 0c	               jmp  totop
.0c53	20 63 0c	do_swap        jsr  do_eor
.0c56	20 ce 0c	               jsr  drawbitmap
.0c59	4c 8a 0b	totop          jmp  ed_loop
.0c5c	20 ac 0c	do_ctrlx       jsr  clrcurs
.0c5f	20 dd 1c	               jsr  pop
.0c62	60		               rts
.0c63			do_eor
.0c63	20 9e 1c	               jsr  push
.0c66	ad b6 08	               lda  mapaddr
.0c69	85 fd		               sta  zpage2
.0c6b	ad b7 08	               lda  mapaddr+1
.0c6e	85 fe		               sta  zpage2+1
.0c70	ae bc 08	               ldx  cursln     ; calcul de
.0c73	ca		               dex            ; l'offset de
.0c74	8a		               txa            ; la
.0c75	29 f7		               and  #$f7      ; ligne
.0c77	a8		               tay
.0c78	ae bd 08	               ldx  curscl
.0c7b	ca		               dex
.0c7c	bd a9 08	               lda  eorval,x
.0c7f	51 fd		               eor  (zpage2),y
.0c81	20 49 09	               jsr  showkeyval
.0c84	91 fd		               sta  (zpage2),y
.0c86	20 dd 1c	               jsr  pop
.0c89	60		               rts
.0c8a			setcurs
.0c8a	20 9e 1c	               jsr  push
.0c8d	a2 01		               ldx  #grid_left
.0c8f	ac bc 08	               ldy  cursln
.0c92	20 c7 1b	               jsr  gotoxy
.0c95	a9 da		               lda  #$da
.0c97	20 a7 1b	               jsr  putch
.0c9a	ae bd 08	               ldx  curscl
.0c9d	e8		               inx
.0c9e	a0 08		               ldy  #grid_top-1
.0ca0	20 c7 1b	               jsr  gotoxy
.0ca3	a9 da		               lda  #$da
.0ca5	20 a7 1b	               jsr  putch
.0ca8	20 dd 1c	               jsr  pop
.0cab	60		               rts
.0cac			clrcurs
.0cac	20 9e 1c	               jsr  push
.0caf	a2 01		               ldx  #grid_left
.0cb1	ac bc 08	               ldy  cursln
.0cb4	20 c7 1b	               jsr  gotoxy
.0cb7	a9 20		               lda  #$20
.0cb9	20 a7 1b	               jsr  putch
.0cbc	ae bd 08	               ldx  curscl
.0cbf	e8		               inx
.0cc0	a0 08		               ldy  #grid_top-1
.0cc2	20 c7 1b	               jsr  gotoxy
.0cc5	a9 20		               lda  #$20
.0cc7	20 a7 1b	               jsr  putch
.0cca	20 dd 1c	               jsr  pop
.0ccd	60		               rts
.0cce			drawbitmap
.0cce	20 9e 1c	               jsr  push
.0cd1	a9 28		               lda  #<letext       ; le pointeur
.0cd3	85 fd		               sta  zpage2
.0cd5	a9 29		               lda  #<letext+1
.0cd7	85 fe		               sta  zpage2+1
.0cd9	a9 01		               lda  #grid_left     ; la position
.0cdb	8d 26 0d	               sta  textline+1
.0cde	a9 09		               lda  #grid_top
.0ce0	8d 27 0d	               sta  textline+2
.0ce3	20 31 0d	               jsr  calcmapaddr
.0ce6	ad b6 08	               lda  mapaddr        ; on pointe sur la table des bitmaps
.0ce9	85 fb		               sta  zpage1
.0ceb	ad b7 08	               lda  mapaddr+1
.0cee	85 fc		               sta  zpage1+1
.0cf0	a0 00		drawchar       ldy  #$00
.0cf2	a2 09		               ldx  #grid_top      ;on replace la ...
.0cf4	8e fd 0c	               stx  isy+1          ;ligne de départ
.0cf7	20 9e 1c	nextline       jsr  push
.0cfa	a2 02		               ldx  #grid_left+1        ; la colonne
.0cfc	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.0cfe	20 c7 1b	               jsr  gotoxy
.0d01	20 dd 1c	               jsr  pop
.0d04	b1 fb		               lda  (zpage1),y     ; on li une ligne
.0d06	20 08 1f	               jsr  atobin
.0d09	20 60 0d	               jsr  abintograph
.0d0c	20 9e 1c	               jsr  push
.0d0f	a2 5f		isx            ldx  #<abin
.0d11	a0 1e		isy            ldy  #>abin
.0d13	20 ad 1b	               jsr  puts
.0d16	20 dd 1c	               jsr  pull
.0d19	ee fd 0c	               inc  isy+1
.0d1c	c8		               iny
.0d1d	c0 08		               cpy  #$08
.0d1f	30 d6		               bmi  nextline
.0d21	20 dd 1c	               jsr  pop
.0d24	60		               rts
>0d25	01 01 09	textline       .byte vblanc,grid_left,grid_top
>0d28	20 20 20 20	letext         .null "        "
>0d2c	20 20 20 20 00
.0d31			calcmapaddr
.0d31	20 9e 1c	               jsr  push
.0d34	ad fc 0d	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0d37	85 fb		               sta  zpage1
.0d39	ad fd 0d	               lda  bitmapaddr+1
.0d3c	85 fc		               sta  zpage1+1
.0d3e	ae b5 08	               ldx  bitmapoffset
.0d41	e0 00		               cpx  #$00
.0d43	f0 08		               beq  thesame         ; sommes nous déja à 0
.0d45	a9 08		addagain       lda  #8
.0d47	20 83 0f	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0d4a	ca		               dex                 ; pour chaque caracteres
.0d4b	d0 f8		               bne  addagain
.0d4d	48		thesame        pha
.0d4e	a5 fb		               lda  zpage1
.0d50	8d b6 08	               sta  mapaddr
.0d53	a5 fc		               lda  zpage1+1
.0d55	8d b7 08	               sta  mapaddr+1
.0d58	68		               pla
.0d59	20 49 09	               jsr  showkeyval
.0d5c	20 dd 1c	out            jsr  pop
.0d5f	60		               rts
.0d60			abintograph
.0d60	20 9e 1c	               jsr  push
.0d63	a9 5f		               lda  #<abin
.0d65	85 fb		               sta  zpage1
.0d67	a9 1e		               lda  #>abin+1
.0d69	85 fc		               sta  zpage1+1
.0d6b	a0 00		               ldy  #$00
.0d6d	b1 fb		nextbit        lda  (zpage1),y
.0d6f	c9 30		               cmp  #$30
.0d71	f0 07		               beq  itszero
.0d73	a9 d1		itsone         lda  #$d1
.0d75	91 fb		               sta  (zpage1),y
.0d77	4c 7e 0d	               jmp  next
.0d7a	a9 20		itszero        lda  #$20
.0d7c	91 fb		               sta  (zpage1),y
.0d7e	c8		next           iny
.0d7f	c0 08		               cpy  #$08
.0d81	30 ea		               bmi  nextbit
.0d83	20 dd 1c	               jsr  pop
.0d86	60		               rts
.0d87			setscreenptr
.0d87	20 9e 1c	               jsr  push
.0d8a	a9 08		               lda  #$08      ; basic commande to disable ...
.0d8c	20 d2 ff	               jsr  chrout    ; ... character set change.
.0d8f	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.0d92	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.0d94	09 0e		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.0d96	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.0d99	20 dd 1c	               jsr  pop
.0d9c	60		               rts
.0d9d			copycharset
.0d9d	20 9e 1c	               jsr  push
.0da0	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0da3	29 fe		               and  #%11111110     ;254
.0da5	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0da8	a5 01		               lda  u6510map       ;$01
.0daa	29 fb		               and  #%11111011     ;251
.0dac	85 01		               sta  u6510map       ;$01
.0dae	20 c3 0d	               jsr  memcopy
.0db1	a5 01		               lda  u6510map       ;$01
.0db3	09 04		               ora  #%00000100
.0db5	85 01		               sta  u6510map       ;$01
.0db7	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0dba	09 01		               ora  #%00000001     ;254
.0dbc	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0dbf	20 dd 1c	               jsr  pop
.0dc2	60		               rts
.0dc3			memcopy
.0dc3	20 9e 1c	               jsr  push
.0dc6	ad f8 0d	               lda  startaddr
.0dc9	85 fb		               sta  zpage1
.0dcb	ad f9 0d	               lda  startaddr+1
.0dce	85 fc		               sta  zpage1+1
.0dd0	ad fc 0d	               lda  bitmapaddr
.0dd3	85 fd		               sta  zpage2
.0dd5	ad fd 0d	               lda  bitmapaddr+1
.0dd8	85 fe		               sta  zpage2+1
.0dda	a0 00		               ldy  #$00
.0ddc	b1 fb		onemore        lda  (zpage1),y
.0dde	91 fd		               sta  (zpage2),y
.0de0	20 a5 1d	               jsr  inczp1
.0de3	20 bd 1d	               jsr  inczp2
.0de6	a5 fc		               lda  zpage1+1
.0de8	cd fb 0d	               cmp  stopaddr+1
.0deb	d0 ef		               bne  onemore
.0ded	a5 fb		               lda  zpage1
.0def	cd fa 0d	               cmp  stopaddr
.0df2	d0 e8		               bne  onemore
.0df4	20 dd 1c	               jsr  pop
.0df7	60		               rts
=14336			bitmapmem =    charsdef * 1024     ;Calcul de la position ram des caracteres.
=61440			mstopaddr =    $d000+(4*$800)
>0df8	00 d0		startaddr      .word     $d000               ; 53248
>0dfa	00 f0		stopaddr       .word     mstopaddr           ; 55296
>0dfc	00 38		bitmapaddr     .word     bitmapmem           ; $3000, 12288
.0dfe			staticscreen
.0dfe	48		               pha
.0dff	a9 0c		               lda  #vgris1
.0e01	8d 20 d0	               sta  $d020
.0e04	68		               pla
.0e05	48		               pha
.0e06	a9 0b		               lda  #vgris
.0e08	8d 21 d0	               sta  $d021
.0e0b	68		               pla
.0e0c	20 da 0e	               jsr  showlines
.0e0f	20 bb 0e	               jsr  showallchars
.0e12	20 22 0f	               jsr  showgrid
.0e15	20 3a 0e	               jsr  showfkeys
.0e18	20 9e 1c	               jsr  push
.0e1b	a2 ff		               ldx  #<blankmsg
.0e1d	a0 15		               ldy  #>blankmsg
.0e1f	20 36 1c	               jsr  putscxy
.0e22	a2 07		               ldx  #<quit_msg
.0e24	a0 18		               ldy  #>quit_msg
.0e26	20 36 1c	               jsr  putscxy
.0e29	20 dd 1c	               jsr  pop
.0e2c	20 9e 1c	               jsr  push
.0e2f	a2 00		               ldx  #0
.0e31	a0 07		               ldy  #7
.0e33	20 c7 1b	               jsr  gotoxy
.0e36	20 dd 1c	               jsr  pop
.0e39	60		               rts
.0e3a			showfkeys
.0e3a	20 9e 1c	               jsr  push
.0e3d	ad b2 08	               lda  fkeyset
.0e40	c9 00		               cmp  #$0
.0e42	d0 3b		               bne  secondks
.0e44	a2 b1		               ldx #<f1abutton
.0e46	a0 19		               ldy #>f1abutton
.0e48	20 36 1c	               jsr putscxy
.0e4b	a2 cb		               ldx #<f2abutton
.0e4d	a0 19		               ldy #>f2abutton
.0e4f	20 36 1c	               jsr putscxy
.0e52	a2 e5		               ldx #<f3abutton
.0e54	a0 19		               ldy #>f3abutton
.0e56	20 36 1c	               jsr putscxy
.0e59	a2 ff		               ldx #<f4abutton
.0e5b	a0 19		               ldy #>f4abutton
.0e5d	20 36 1c	               jsr putscxy
.0e60	a2 19		               ldx #<f5abutton
.0e62	a0 1a		               ldy #>f5abutton
.0e64	20 36 1c	               jsr putscxy
.0e67	a2 33		               ldx #<f6abutton
.0e69	a0 1a		               ldy #>f6abutton
.0e6b	20 36 1c	               jsr putscxy
.0e6e	a2 4d		               ldx #<f7abutton
.0e70	a0 1a		               ldy #>f7abutton
.0e72	20 36 1c	               jsr putscxy
.0e75	a2 67		               ldx #<f8abutton
.0e77	a0 1a		               ldy #>f8abutton
.0e79	20 36 1c	               jsr putscxy
.0e7c	4c b7 0e	               jmp end
.0e7f			secondks
.0e7f	a2 81		               ldx #<f1bbutton
.0e81	a0 1a		               ldy #>f1bbutton
.0e83	20 36 1c	               jsr putscxy
.0e86	a2 9b		               ldx #<f2bbutton
.0e88	a0 1a		               ldy #>f2bbutton
.0e8a	20 36 1c	               jsr putscxy
.0e8d	a2 b5		               ldx #<f3bbutton
.0e8f	a0 1a		               ldy #>f3bbutton
.0e91	20 36 1c	               jsr putscxy
.0e94	a2 cf		               ldx #<f4bbutton
.0e96	a0 1a		               ldy #>f4bbutton
.0e98	20 36 1c	               jsr putscxy
.0e9b	a2 e9		               ldx #<f5bbutton
.0e9d	a0 1a		               ldy #>f5bbutton
.0e9f	20 36 1c	               jsr putscxy
.0ea2	a2 03		               ldx #<f6bbutton
.0ea4	a0 1b		               ldy #>f6bbutton
.0ea6	20 36 1c	               jsr putscxy
.0ea9	a2 1d		               ldx #<f7bbutton
.0eab	a0 1b		               ldy #>f7bbutton
.0ead	20 36 1c	               jsr putscxy
.0eb0	a2 37		               ldx #<f8bbutton
.0eb2	a0 1b		               ldy #>f8bbutton
.0eb4	20 36 1c	               jsr putscxy
.0eb7	20 dd 1c	end            jsr  pop
.0eba	60		               rts
.0ebb			showallchars
.0ebb	20 9e 1c	               jsr push
.0ebe	20 9e 1c	               jsr  push
.0ec1	a2 00		               ldx  #0
.0ec3	a0 00		               ldy  #0
.0ec5	20 c7 1b	               jsr  gotoxy
.0ec8	20 dd 1c	               jsr  pop
.0ecb	a2 00		               ldx  #$00
.0ecd	8a		nextc          txa
.0ece	9d 00 04	               sta  scrnnewram,x
.0ed1	e8		               inx
.0ed2	e0 80		               cpx  #$80
.0ed4	d0 f7		               bne  nextc
.0ed6	20 dd 1c	               jsr  pop
.0ed9	60		               rts
.0eda			showlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.0eda	20 9e 1c	               jsr  push
.0edd	a2 28		               ldx  #40
.0edf	a9 40		               lda  #64
.0ee1	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.0ee4	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.0ee7	ca		               dex
.0ee8	e0 10		hline          cpx  #vlinepos
.0eea	10 03		               bpl  notyet
.0eec	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.0eef	e0 00		notyet         cpx  #$00
.0ef1	d0 ee		               bne  nextl
.0ef3	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.0ef5	85 fb		               sta  zpage1
.0ef7	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.0ef9	85 fc		               sta  zpage1+1
.0efb	a0 00		               ldy  #0
.0efd	a9 72		               lda  #114
.0eff	91 fb		               sta  (zpage1),y
.0f01	20 91 0f	               jsr  zp1add40
.0f04	a2 12		               ldx  #24-hline2
.0f06	a9 5d		               lda  #93
.0f08	91 fb		another93      sta  (zpage1),y
.0f0a	20 91 0f	               jsr  zp1add40
.0f0d	ca		               dex
.0f0e	d0 f8		               bne  another93
.0f10	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.0f12	85 fb		               sta  zpage1
.0f14	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.0f16	85 fc		               sta  zpage1+1
.0f18	a0 00		               ldy  #0
.0f1a	a9 73		               lda  #115
.0f1c	91 fb		               sta  (zpage1),y
.0f1e	20 dd 1c	               jsr  pop
.0f21	60		               rts
.0f22			showgrid
.0f22	20 9e 1c	               jsr  push
.0f25	20 51 1b	               jsr  screendis
.0f28	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.0f2a	85 fb		               sta  zpage1
.0f2c	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.0f2e	85 fc		               sta  zpage1+1
.0f30	a2 08		               ldx  #8
.0f32	a9 65		nextbox        lda  #101
.0f34	a0 09		               ldy  #9
.0f36	91 fb		               sta  (zpage1),y
.0f38	88		               dey
.0f39	a9 4f		               lda  #79
.0f3b	91 fb		nextcol        sta  (zpage1),y
.0f3d	88		               dey
.0f3e	d0 fb		               bne  nextcol
.0f40	20 91 0f	               jsr  zp1add40
.0f43	ca		               dex
.0f44	d0 ec		               bne  nextbox
.0f46	a0 08		               ldy  #8
.0f48	a9 77		               lda  #119
.0f4a	91 fb		nextlin        sta  (zpage1),y
.0f4c	88		               dey
.0f4d	d0 fb		               bne  nextlin
.0f4f	a9 3e		               lda  #$3e
.0f51	8d eb 05	               sta  scrnnewram+(40*(12))+11
.0f54	a9 70		               lda  #$70                     ;+
.0f56	8d c4 05	               sta  scrnnewram+(40*(11))+12
.0f59	a9 43		               lda  #$43                    ;-
.0f5b	8d c5 05	               sta  scrnnewram+(40*(11))+13
.0f5e	a9 6e		               lda  #$6e                     ;+
.0f60	8d c6 05	               sta  scrnnewram+(40*(11))+14
.0f63	a9 5d		               lda  #$5d                     ;|
.0f65	8d ec 05	               sta  scrnnewram+(40*(12))+12
.0f68	a9 5d		               lda  #$5d                     ;|
.0f6a	8d ee 05	               sta  scrnnewram+(40*(12))+14
.0f6d	a9 6d		               lda  #$6d                     ;+
.0f6f	8d 14 06	               sta  scrnnewram+(40*(13))+12
.0f72	a9 43		               lda  #$43                     ;-
.0f74	8d 15 06	               sta  scrnnewram+(40*(13))+13
.0f77	a9 7d		               lda  #$7d                     ;+
.0f79	8d 16 06	               sta  scrnnewram+(40*(13))+14
.0f7c	20 5e 1b	               jsr screenena
.0f7f	20 dd 1c	               jsr  pop
.0f82	60		               rts
.0f83			zp1addnum
.0f83	08		               php
.0f84	48		               pha
.0f85	18		               clc
.0f86	65 fb		               adc  zpage1
.0f88	90 02		               bcc  nocarry
.0f8a	e6 fc		               inc  zpage1+1
.0f8c	85 fb		nocarry        sta  zpage1
.0f8e	68		               pla
.0f8f	28		               plp
.0f90	60		               rts
.0f91			zp1add40
.0f91	08		               php
.0f92	48		               pha
.0f93	18		               clc
.0f94	a5 fb		               lda  zpage1
.0f96	69 28		               adc  #40
.0f98	90 02		               bcc  nocarry
.0f9a	e6 fc		               inc  zpage1+1
.0f9c	85 fb		nocarry        sta  zpage1
.0f9e	68		               pla
.0f9f	28		               plp
.0fa0	60		               rts
.0fa1			delay
.0fa1	20 9e 1c	               jsr  push
.0fa4	a9 00		               lda  #$0
.0fa6	aa		               tax
.0fa7	a8		               tay
.0fa8	ca		xagain         dex
.0fa9	ca		               dex
.0faa	88		yagain         dey
.0fab	c0 00		               cpy  #$00
.0fad	d0 fb		               bne  yagain
.0faf	e0 00		               cpx  #$00
.0fb1	d0 f5		               bne  xagain
.0fb3	20 dd 1c	               jsr  pop
.0fb6	60		               rts
.0fb7			f1action
.0fb7	48		               pha
.0fb8	a9 ff		               lda  #$ff
.0fba	8d b1 08	               sta  editmode
.0fbd	ad b2 08	               lda  fkeyset
.0fc0	d0 7a		               bne  menub
.0fc2	20 9e 1c	               jsr  push
.0fc5	a2 ff		               ldx  #<blankmsg
.0fc7	a0 15		               ldy  #>blankmsg
.0fc9	20 36 1c	               jsr  putscxy
.0fcc	a2 2a		               ldx  #<f1a_msg
.0fce	a0 16		               ldy  #>f1a_msg
.0fd0	20 36 1c	               jsr  putscxy
.0fd3	20 dd 1c	               jsr  pop
.0fd6	08		               php
.0fd7	48		               pha
.0fd8	8a		               txa
.0fd9	48		               pha
.0fda	ad b1 19	               lda  f1abutton
.0fdd	48		               pha
.0fde	a9 92		               lda  #146
.0fe0	8d c0 19	               sta  f1abutton+15
.0fe3	a9 01		               lda  #flashcol
.0fe5	8d b1 19	               sta  f1abutton
.0fe8	a2 b1		               ldx  #<f1abutton
.0fea	a0 19		               ldy  #>f1abutton
.0fec	20 36 1c	               jsr  putscxy
.0fef	20 a1 0f	               jsr  delay
.0ff2	a9 12		               lda  #18
.0ff4	8d c0 19	               sta  f1abutton+15
.0ff7	68		               pla
.0ff8	8d b1 19	               sta  f1abutton
.0ffb	a2 b1		               ldx  #<f1abutton
.0ffd	a0 19		               ldy  #>f1abutton
.0fff	20 36 1c	               jsr  putscxy
.1002	68		               pla
.1003	aa		               tax
.1004	68		               pla
.1005	28		               plp
.1006	20 2f 0b	               jsr  editor
.1009	20 9e 1c	               jsr  push
.100c	a2 ff		               ldx  #<blankmsg
.100e	a0 15		               ldy  #>blankmsg
.1010	20 36 1c	               jsr  putscxy
.1013	a2 07		               ldx  #<quit_msg
.1015	a0 18		               ldy  #>quit_msg
.1017	20 36 1c	               jsr  putscxy
.101a	20 dd 1c	               jsr  pop
.101d	20 9e 1c	               jsr  push
.1020	a2 ff		               ldx  #<blankmsg
.1022	a0 15		               ldy  #>blankmsg
.1024	20 36 1c	               jsr  putscxy
.1027	a2 d1		               ldx  #<menua_msg
.1029	a0 17		               ldy  #>menua_msg
.102b	20 36 1c	               jsr  putscxy
.102e	20 dd 1c	               jsr  pop
.1031	a9 07		               lda  #menu1col
.1033	20 0b 09	               jsr  setmenuacolor
.1036	20 3a 0e	               jsr  showfkeys
.1039	4c 8b 10	               jmp  out
.103c	a9 00		menub          lda  #$0
.103e	8d b1 08	               sta  editmode
.1041	20 9e 1c	               jsr  push
.1044	a2 ff		               ldx  #<blankmsg
.1046	a0 15		               ldy  #>blankmsg
.1048	20 36 1c	               jsr  putscxy
.104b	a2 f9		               ldx  #<f1b_msg
.104d	a0 16		               ldy  #>f1b_msg
.104f	20 36 1c	               jsr  putscxy
.1052	20 dd 1c	               jsr  pop
.1055	08		               php
.1056	48		               pha
.1057	8a		               txa
.1058	48		               pha
.1059	ad 81 1a	               lda  f1bbutton
.105c	48		               pha
.105d	a9 92		               lda  #146
.105f	8d 90 1a	               sta  f1bbutton+15
.1062	a9 01		               lda  #flashcol
.1064	8d 81 1a	               sta  f1bbutton
.1067	a2 81		               ldx  #<f1bbutton
.1069	a0 1a		               ldy  #>f1bbutton
.106b	20 36 1c	               jsr  putscxy
.106e	20 a1 0f	               jsr  delay
.1071	a9 12		               lda  #18
.1073	8d 90 1a	               sta  f1bbutton+15
.1076	68		               pla
.1077	8d 81 1a	               sta  f1bbutton
.107a	a2 81		               ldx  #<f1bbutton
.107c	a0 1a		               ldy  #>f1bbutton
.107e	20 36 1c	               jsr  putscxy
.1081	68		               pla
.1082	aa		               tax
.1083	68		               pla
.1084	28		               plp
.1085	20 8d 10	               jsr  reverse
.1088	20 ce 0c	               jsr  drawbitmap
.108b	68		out            pla
.108c	60		               rts
.108d			reverse
.108d	20 9e 1c	               jsr  push
.1090	48		               pha
.1091	ad b6 08	               lda  mapaddr
.1094	85 fd		               sta  $fd
.1096	ad b7 08	               lda  mapaddr+1
.1099	85 fe		               sta  $fe
.109b	68		               pla
.109c	a0 00		               ldy  #$00
.109e	b1 fd		again          lda  (zpage2),y
.10a0	49 ff		               eor  #$ff
.10a2	91 fd		               sta  (zpage2),y
.10a4	c8		               iny
.10a5	c0 08		               cpy  #$08
.10a7	d0 f5		               bne  again
.10a9	20 dd 1c	               jsr  pop
.10ac	60		               rts
.10ad			f2action
.10ad	48		               pha
.10ae	a9 00		               lda  #$0
.10b0	8d b1 08	               sta  editmode
.10b3	ad b2 08	               lda  fkeyset
.10b6	d0 47		               bne  menub
.10b8	20 9e 1c	               jsr  push
.10bb	a2 ff		               ldx  #<blankmsg
.10bd	a0 15		               ldy  #>blankmsg
.10bf	20 36 1c	               jsr  putscxy
.10c2	a2 45		               ldx  #<f2a_msg
.10c4	a0 16		               ldy  #>f2a_msg
.10c6	20 36 1c	               jsr  putscxy
.10c9	20 dd 1c	               jsr  pop
.10cc	08		               php
.10cd	48		               pha
.10ce	8a		               txa
.10cf	48		               pha
.10d0	ad cb 19	               lda  f2abutton
.10d3	48		               pha
.10d4	a9 92		               lda  #146
.10d6	8d da 19	               sta  f2abutton+15
.10d9	a9 01		               lda  #flashcol
.10db	8d cb 19	               sta  f2abutton
.10de	a2 cb		               ldx  #<f2abutton
.10e0	a0 19		               ldy  #>f2abutton
.10e2	20 36 1c	               jsr  putscxy
.10e5	20 a1 0f	               jsr  delay
.10e8	a9 12		               lda  #18
.10ea	8d da 19	               sta  f2abutton+15
.10ed	68		               pla
.10ee	8d cb 19	               sta  f2abutton
.10f1	a2 cb		               ldx  #<f2abutton
.10f3	a0 19		               ldy  #>f2abutton
.10f5	20 36 1c	               jsr  putscxy
.10f8	68		               pla
.10f9	aa		               tax
.10fa	68		               pla
.10fb	28		               plp
.10fc	4c 49 11	               jmp  out
.10ff			menub
.10ff	20 9e 1c	               jsr  push
.1102	a2 ff		               ldx  #<blankmsg
.1104	a0 15		               ldy  #>blankmsg
.1106	20 36 1c	               jsr  putscxy
.1109	a2 10		               ldx  #<f2b_msg
.110b	a0 17		               ldy  #>f2b_msg
.110d	20 36 1c	               jsr  putscxy
.1110	20 dd 1c	               jsr  pop
.1113	08		               php
.1114	48		               pha
.1115	8a		               txa
.1116	48		               pha
.1117	ad 9b 1a	               lda  f2bbutton
.111a	48		               pha
.111b	a9 92		               lda  #146
.111d	8d aa 1a	               sta  f2bbutton+15
.1120	a9 01		               lda  #flashcol
.1122	8d 9b 1a	               sta  f2bbutton
.1125	a2 9b		               ldx  #<f2bbutton
.1127	a0 1a		               ldy  #>f2bbutton
.1129	20 36 1c	               jsr  putscxy
.112c	20 a1 0f	               jsr  delay
.112f	a9 12		               lda  #18
.1131	8d aa 1a	               sta  f2bbutton+15
.1134	68		               pla
.1135	8d 9b 1a	               sta  f2bbutton
.1138	a2 9b		               ldx  #<f2bbutton
.113a	a0 1a		               ldy  #>f2bbutton
.113c	20 36 1c	               jsr  putscxy
.113f	68		               pla
.1140	aa		               tax
.1141	68		               pla
.1142	28		               plp
.1143	20 4b 11	               jsr  flipvert
.1146	20 ce 0c	               jsr  drawbitmap
.1149	68		out            pla
.114a	60		               rts
.114b			flipvert
.114b	20 9e 1c	               jsr  push
.114e	48		               pha
.114f	ad b6 08	               lda  mapaddr
.1152	85 fd		               sta  $fd
.1154	ad b7 08	               lda  mapaddr+1
.1157	85 fe		               sta  $fe
.1159	68		               pla
.115a	a0 00		               ldy  #$00
.115c	b1 fd		tostack        lda  (zpage2),y
.115e	48		               pha
.115f	c8		               iny
.1160	c0 08		               cpy  #$08
.1162	d0 f8		               bne  tostack
.1164	a0 00		               ldy  #$00
.1166	68		fromstack      pla
.1167	91 fd		               sta  (zpage2),y
.1169	c8		               iny
.116a	c0 08		               cpy  #$08
.116c	d0 f8		               bne  fromstack
.116e	20 dd 1c	               jsr  pop
.1171	60		               rts
.1172			f3action
.1172	48		               pha
.1173	a9 00		               lda  #$0
.1175	8d b1 08	               sta  editmode
.1178	ad b2 08	               lda  fkeyset
.117b	d0 47		               bne  menub
.117d	20 9e 1c	               jsr  push
.1180	a2 ff		               ldx  #<blankmsg
.1182	a0 15		               ldy  #>blankmsg
.1184	20 36 1c	               jsr  putscxy
.1187	a2 6b		               ldx  #<f3a_msg
.1189	a0 16		               ldy  #>f3a_msg
.118b	20 36 1c	               jsr  putscxy
.118e	20 dd 1c	               jsr  pop
.1191	08		               php
.1192	48		               pha
.1193	8a		               txa
.1194	48		               pha
.1195	ad e5 19	               lda  f3abutton
.1198	48		               pha
.1199	a9 92		               lda  #146
.119b	8d f4 19	               sta  f3abutton+15
.119e	a9 01		               lda  #flashcol
.11a0	8d e5 19	               sta  f3abutton
.11a3	a2 e5		               ldx  #<f3abutton
.11a5	a0 19		               ldy  #>f3abutton
.11a7	20 36 1c	               jsr  putscxy
.11aa	20 a1 0f	               jsr  delay
.11ad	a9 12		               lda  #18
.11af	8d f4 19	               sta  f3abutton+15
.11b2	68		               pla
.11b3	8d e5 19	               sta  f3abutton
.11b6	a2 e5		               ldx  #<f3abutton
.11b8	a0 19		               ldy  #>f3abutton
.11ba	20 36 1c	               jsr  putscxy
.11bd	68		               pla
.11be	aa		               tax
.11bf	68		               pla
.11c0	28		               plp
.11c1	4c 0e 12	               jmp  out
.11c4			menub
.11c4	20 9e 1c	               jsr  push
.11c7	a2 ff		               ldx  #<blankmsg
.11c9	a0 15		               ldy  #>blankmsg
.11cb	20 36 1c	               jsr  putscxy
.11ce	a2 29		               ldx  #<f3b_msg
.11d0	a0 17		               ldy  #>f3b_msg
.11d2	20 36 1c	               jsr  putscxy
.11d5	20 dd 1c	               jsr  pop
.11d8	08		               php
.11d9	48		               pha
.11da	8a		               txa
.11db	48		               pha
.11dc	ad b5 1a	               lda  f3bbutton
.11df	48		               pha
.11e0	a9 92		               lda  #146
.11e2	8d c4 1a	               sta  f3bbutton+15
.11e5	a9 01		               lda  #flashcol
.11e7	8d b5 1a	               sta  f3bbutton
.11ea	a2 b5		               ldx  #<f3bbutton
.11ec	a0 1a		               ldy  #>f3bbutton
.11ee	20 36 1c	               jsr  putscxy
.11f1	20 a1 0f	               jsr  delay
.11f4	a9 12		               lda  #18
.11f6	8d c4 1a	               sta  f3bbutton+15
.11f9	68		               pla
.11fa	8d b5 1a	               sta  f3bbutton
.11fd	a2 b5		               ldx  #<f3bbutton
.11ff	a0 1a		               ldy  #>f3bbutton
.1201	20 36 1c	               jsr  putscxy
.1204	68		               pla
.1205	aa		               tax
.1206	68		               pla
.1207	28		               plp
.1208	20 10 12	               jsr  fliphorz
.120b	20 ce 0c	               jsr  drawbitmap
.120e	68		out            pla
.120f	60		               rts
.1210			fliphorz
.1210	20 9e 1c	               jsr  push
.1213	48		               pha
.1214	ad b6 08	               lda  mapaddr
.1217	85 fd		               sta  $fd
.1219	ad b7 08	               lda  mapaddr+1
.121c	85 fe		               sta  $fe
.121e	68		               pla
.121f	a0 00		               ldy  #$00
.1221	b1 fd		nextbyte       lda  (zpage2),y
.1223	a2 00		               ldx  #$00
.1225	2a		rolagain       rol
.1226	6e 3c 12	               ror  tmpbyte
.1229	e8		               inx
.122a	e0 08		               cpx  #$08
.122c	30 f7		               bmi  rolagain
.122e	ad 3c 12	               lda  tmpbyte
.1231	91 fd		               sta  (zpage2),y
.1233	c8		               iny
.1234	c0 08		               cpy  #$08
.1236	30 e9		               bmi  nextbyte
.1238	20 dd 1c	               jsr  pop
.123b	60		               rts
>123c	00		tmpbyte        .byte     $00
.123d			f4action
.123d	48		               pha
.123e	a9 00		               lda  #$0
.1240	8d b1 08	               sta  editmode
.1243	ad b2 08	               lda  fkeyset
.1246	d0 47		               bne  menub
.1248	20 9e 1c	               jsr  push
.124b	a2 ff		               ldx  #<blankmsg
.124d	a0 15		               ldy  #>blankmsg
.124f	20 36 1c	               jsr  putscxy
.1252	a2 92		               ldx  #<f4a_msg
.1254	a0 16		               ldy  #>f4a_msg
.1256	20 36 1c	               jsr  putscxy
.1259	20 dd 1c	               jsr  pop
.125c	08		               php
.125d	48		               pha
.125e	8a		               txa
.125f	48		               pha
.1260	ad ff 19	               lda  f4abutton
.1263	48		               pha
.1264	a9 92		               lda  #146
.1266	8d 0e 1a	               sta  f4abutton+15
.1269	a9 01		               lda  #flashcol
.126b	8d ff 19	               sta  f4abutton
.126e	a2 ff		               ldx  #<f4abutton
.1270	a0 19		               ldy  #>f4abutton
.1272	20 36 1c	               jsr  putscxy
.1275	20 a1 0f	               jsr  delay
.1278	a9 12		               lda  #18
.127a	8d 0e 1a	               sta  f4abutton+15
.127d	68		               pla
.127e	8d ff 19	               sta  f4abutton
.1281	a2 ff		               ldx  #<f4abutton
.1283	a0 19		               ldy  #>f4abutton
.1285	20 36 1c	               jsr  putscxy
.1288	68		               pla
.1289	aa		               tax
.128a	68		               pla
.128b	28		               plp
.128c	4c d3 12	               jmp  out
.128f			menub
.128f	20 9e 1c	               jsr  push
.1292	a2 ff		               ldx  #<blankmsg
.1294	a0 15		               ldy  #>blankmsg
.1296	20 36 1c	               jsr  putscxy
.1299	a2 44		               ldx  #<f4b_msg
.129b	a0 17		               ldy  #>f4b_msg
.129d	20 36 1c	               jsr  putscxy
.12a0	20 dd 1c	               jsr  pop
.12a3	08		               php
.12a4	48		               pha
.12a5	8a		               txa
.12a6	48		               pha
.12a7	ad cf 1a	               lda  f4bbutton
.12aa	48		               pha
.12ab	a9 92		               lda  #146
.12ad	8d de 1a	               sta  f4bbutton+15
.12b0	a9 01		               lda  #flashcol
.12b2	8d cf 1a	               sta  f4bbutton
.12b5	a2 cf		               ldx  #<f4bbutton
.12b7	a0 1a		               ldy  #>f4bbutton
.12b9	20 36 1c	               jsr  putscxy
.12bc	20 a1 0f	               jsr  delay
.12bf	a9 12		               lda  #18
.12c1	8d de 1a	               sta  f4bbutton+15
.12c4	68		               pla
.12c5	8d cf 1a	               sta  f4bbutton
.12c8	a2 cf		               ldx  #<f4bbutton
.12ca	a0 1a		               ldy  #>f4bbutton
.12cc	20 36 1c	               jsr  putscxy
.12cf	68		               pla
.12d0	aa		               tax
.12d1	68		               pla
.12d2	28		               plp
.12d3	68		out            pla
.12d4	60		               rts
.12d5			f5action
.12d5	48		               pha
.12d6	a9 00		               lda  #$0
.12d8	8d b1 08	               sta  editmode
.12db	ad b2 08	               lda  fkeyset
.12de	d0 4d		               bne  menub
.12e0	20 9e 1c	               jsr  push
.12e3	a2 ff		               ldx  #<blankmsg
.12e5	a0 15		               ldy  #>blankmsg
.12e7	20 36 1c	               jsr  putscxy
.12ea	a2 af		               ldx  #<f5a_msg
.12ec	a0 16		               ldy  #>f5a_msg
.12ee	20 36 1c	               jsr  putscxy
.12f1	20 dd 1c	               jsr  pop
.12f4	08		               php
.12f5	48		               pha
.12f6	8a		               txa
.12f7	48		               pha
.12f8	ad 19 1a	               lda  f5abutton
.12fb	48		               pha
.12fc	a9 92		               lda  #146
.12fe	8d 28 1a	               sta  f5abutton+15
.1301	a9 01		               lda  #flashcol
.1303	8d 19 1a	               sta  f5abutton
.1306	a2 19		               ldx  #<f5abutton
.1308	a0 1a		               ldy  #>f5abutton
.130a	20 36 1c	               jsr  putscxy
.130d	20 a1 0f	               jsr  delay
.1310	a9 12		               lda  #18
.1312	8d 28 1a	               sta  f5abutton+15
.1315	68		               pla
.1316	8d 19 1a	               sta  f5abutton
.1319	a2 19		               ldx  #<f5abutton
.131b	a0 1a		               ldy  #>f5abutton
.131d	20 36 1c	               jsr  putscxy
.1320	68		               pla
.1321	aa		               tax
.1322	68		               pla
.1323	28		               plp
.1324	20 73 13	               jsr  clearchar
.1327	20 ce 0c	               jsr  drawbitmap
.132a	4c 71 13	               jmp  out
.132d			menub
.132d	20 9e 1c	               jsr  push
.1330	a2 ff		               ldx  #<blankmsg
.1332	a0 15		               ldy  #>blankmsg
.1334	20 36 1c	               jsr  putscxy
.1337	a2 59		               ldx  #<f5b_msg
.1339	a0 17		               ldy  #>f5b_msg
.133b	20 36 1c	               jsr  putscxy
.133e	20 dd 1c	               jsr  pop
.1341	08		               php
.1342	48		               pha
.1343	8a		               txa
.1344	48		               pha
.1345	ad e9 1a	               lda  f5bbutton
.1348	48		               pha
.1349	a9 92		               lda  #146
.134b	8d f8 1a	               sta  f5bbutton+15
.134e	a9 01		               lda  #flashcol
.1350	8d e9 1a	               sta  f5bbutton
.1353	a2 e9		               ldx  #<f5bbutton
.1355	a0 1a		               ldy  #>f5bbutton
.1357	20 36 1c	               jsr  putscxy
.135a	20 a1 0f	               jsr  delay
.135d	a9 12		               lda  #18
.135f	8d f8 1a	               sta  f5bbutton+15
.1362	68		               pla
.1363	8d e9 1a	               sta  f5bbutton
.1366	a2 e9		               ldx  #<f5bbutton
.1368	a0 1a		               ldy  #>f5bbutton
.136a	20 36 1c	               jsr  putscxy
.136d	68		               pla
.136e	aa		               tax
.136f	68		               pla
.1370	28		               plp
.1371	68		out            pla
.1372	60		               rts
.1373			clearchar
.1373	20 9e 1c	               jsr  push
.1376	a9 00		               lda  #$00
.1378	20 7f 13	               jsr  allsame
.137b	20 dd 1c	               jsr  pop
.137e	60		               rts
.137f			allsame
.137f	48		               pha
.1380	ad b6 08	               lda  mapaddr
.1383	85 fd		               sta  $fd
.1385	ad b7 08	               lda  mapaddr+1
.1388	85 fe		               sta  $fe
.138a	68		               pla
.138b	a0 00		               ldy  #$00
.138d	91 fd		again          sta  (zpage2),y
.138f	c8		               iny
.1390	c0 08		               cpy  #$08
.1392	d0 f9		               bne  again
.1394	60		               rts
.1395			f6action
.1395	48		               pha
.1396	a9 00		               lda  #$0
.1398	8d b1 08	               sta  editmode
.139b	ad b2 08	               lda  fkeyset
.139e	d0 4d		               bne  menub
.13a0	20 9e 1c	               jsr  push
.13a3	a2 ff		               ldx  #<blankmsg
.13a5	a0 15		               ldy  #>blankmsg
.13a7	20 36 1c	               jsr  putscxy
.13aa	a2 c9		               ldx  #<f6a_msg
.13ac	a0 16		               ldy  #>f6a_msg
.13ae	20 36 1c	               jsr  putscxy
.13b1	20 dd 1c	               jsr  pop
.13b4	08		               php
.13b5	48		               pha
.13b6	8a		               txa
.13b7	48		               pha
.13b8	ad 33 1a	               lda  f6abutton
.13bb	48		               pha
.13bc	a9 92		               lda  #146
.13be	8d 42 1a	               sta  f6abutton+15
.13c1	a9 01		               lda  #flashcol
.13c3	8d 33 1a	               sta  f6abutton
.13c6	a2 33		               ldx  #<f6abutton
.13c8	a0 1a		               ldy  #>f6abutton
.13ca	20 36 1c	               jsr  putscxy
.13cd	20 a1 0f	               jsr  delay
.13d0	a9 12		               lda  #18
.13d2	8d 42 1a	               sta  f6abutton+15
.13d5	68		               pla
.13d6	8d 33 1a	               sta  f6abutton
.13d9	a2 33		               ldx  #<f6abutton
.13db	a0 1a		               ldy  #>f6abutton
.13dd	20 36 1c	               jsr  putscxy
.13e0	68		               pla
.13e1	aa		               tax
.13e2	68		               pla
.13e3	28		               plp
.13e4	20 39 14	               jsr  fillchar
.13e7	20 ce 0c	               jsr  drawbitmap
.13ea	4c 37 14	               jmp  out
.13ed			menub
.13ed	20 9e 1c	               jsr  push
.13f0	a2 ff		               ldx  #<blankmsg
.13f2	a0 15		               ldy  #>blankmsg
.13f4	20 36 1c	               jsr  putscxy
.13f7	a2 6d		               ldx  #<f6b_msg
.13f9	a0 17		               ldy  #>f6b_msg
.13fb	20 36 1c	               jsr  putscxy
.13fe	20 dd 1c	               jsr  pop
.1401	08		               php
.1402	48		               pha
.1403	8a		               txa
.1404	48		               pha
.1405	ad 03 1b	               lda  f6bbutton
.1408	48		               pha
.1409	a9 92		               lda  #146
.140b	8d 12 1b	               sta  f6bbutton+15
.140e	a9 01		               lda  #flashcol
.1410	8d 03 1b	               sta  f6bbutton
.1413	a2 03		               ldx  #<f6bbutton
.1415	a0 1b		               ldy  #>f6bbutton
.1417	20 36 1c	               jsr  putscxy
.141a	20 a1 0f	               jsr  delay
.141d	a9 12		               lda  #18
.141f	8d 12 1b	               sta  f6bbutton+15
.1422	68		               pla
.1423	8d 03 1b	               sta  f6bbutton
.1426	a2 03		               ldx  #<f6bbutton
.1428	a0 1b		               ldy  #>f6bbutton
.142a	20 36 1c	               jsr  putscxy
.142d	68		               pla
.142e	aa		               tax
.142f	68		               pla
.1430	28		               plp
.1431	20 45 14	               jsr  scrollup
.1434	20 ce 0c	               jsr  drawbitmap
.1437	68		out            pla
.1438	60		               rts
.1439			fillchar
.1439	20 9e 1c	               jsr  push
.143c	a9 ff		               lda  #$ff
.143e	20 7f 13	               jsr  allsame
.1441	20 dd 1c	               jsr  pop
.1444	60		               rts
.1445			scrollup
.1445	20 9e 1c	               jsr  push
.1448	48		               pha
.1449	ad b6 08	               lda  mapaddr
.144c	85 fb		               sta  $fb
.144e	ad b7 08	               lda  mapaddr+1
.1451	85 fc		               sta  $fc
.1453	68		               pla
.1454	48		               pha
.1455	ad b6 08	               lda  mapaddr
.1458	85 fd		               sta  $fd
.145a	ad b7 08	               lda  mapaddr+1
.145d	85 fe		               sta  $fe
.145f	68		               pla
.1460	20 bd 1d	               jsr  inczp2
.1463	a0 00		               ldy  #$00
.1465	b1 fb		               lda  (zpage1),y
.1467	8d 7c 14	               sta  tmpbyte
.146a	b1 fd		again          lda  (zpage2),y
.146c	91 fb		               sta  (zpage1),y
.146e	c8		               iny
.146f	c0 07		               cpy  #$07
.1471	d0 f7		               bne  again
.1473	ad 7c 14	               lda  tmpbyte
.1476	91 fb		               sta  (zpage1),y
.1478	20 dd 1c	               jsr  pop
.147b	60		               rts
>147c	00		tmpbyte        .byte     $00
.147d			f7action
.147d	48		               pha
.147e	a9 00		               lda  #$0
.1480	8d b1 08	               sta  editmode
.1483	ad b2 08	               lda  fkeyset
.1486	d0 47		               bne  menub
.1488	20 9e 1c	               jsr  push
.148b	a2 ff		               ldx  #<blankmsg
.148d	a0 15		               ldy  #>blankmsg
.148f	20 36 1c	               jsr  putscxy
.1492	a2 e3		               ldx  #<f7a_msg
.1494	a0 16		               ldy  #>f7a_msg
.1496	20 36 1c	               jsr  putscxy
.1499	20 dd 1c	               jsr  pop
.149c	08		               php
.149d	48		               pha
.149e	8a		               txa
.149f	48		               pha
.14a0	ad 4d 1a	               lda  f7abutton
.14a3	48		               pha
.14a4	a9 92		               lda  #146
.14a6	8d 5c 1a	               sta  f7abutton+15
.14a9	a9 01		               lda  #flashcol
.14ab	8d 4d 1a	               sta  f7abutton
.14ae	a2 4d		               ldx  #<f7abutton
.14b0	a0 1a		               ldy  #>f7abutton
.14b2	20 36 1c	               jsr  putscxy
.14b5	20 a1 0f	               jsr  delay
.14b8	a9 12		               lda  #18
.14ba	8d 5c 1a	               sta  f7abutton+15
.14bd	68		               pla
.14be	8d 4d 1a	               sta  f7abutton
.14c1	a2 4d		               ldx  #<f7abutton
.14c3	a0 1a		               ldy  #>f7abutton
.14c5	20 36 1c	               jsr  putscxy
.14c8	68		               pla
.14c9	aa		               tax
.14ca	68		               pla
.14cb	28		               plp
.14cc	4c 19 15	               jmp  out
.14cf			menub
.14cf	20 9e 1c	               jsr  push
.14d2	a2 ff		               ldx  #<blankmsg
.14d4	a0 15		               ldy  #>blankmsg
.14d6	20 36 1c	               jsr  putscxy
.14d9	a2 7f		               ldx  #<f7b_msg
.14db	a0 17		               ldy  #>f7b_msg
.14dd	20 36 1c	               jsr  putscxy
.14e0	20 dd 1c	               jsr  pop
.14e3	08		               php
.14e4	48		               pha
.14e5	8a		               txa
.14e6	48		               pha
.14e7	ad 1d 1b	               lda  f7bbutton
.14ea	48		               pha
.14eb	a9 92		               lda  #146
.14ed	8d 2c 1b	               sta  f7bbutton+15
.14f0	a9 01		               lda  #flashcol
.14f2	8d 1d 1b	               sta  f7bbutton
.14f5	a2 1d		               ldx  #<f7bbutton
.14f7	a0 1b		               ldy  #>f7bbutton
.14f9	20 36 1c	               jsr  putscxy
.14fc	20 a1 0f	               jsr  delay
.14ff	a9 12		               lda  #18
.1501	8d 2c 1b	               sta  f7bbutton+15
.1504	68		               pla
.1505	8d 1d 1b	               sta  f7bbutton
.1508	a2 1d		               ldx  #<f7bbutton
.150a	a0 1b		               ldy  #>f7bbutton
.150c	20 36 1c	               jsr  putscxy
.150f	68		               pla
.1510	aa		               tax
.1511	68		               pla
.1512	28		               plp
.1513	20 1b 15	               jsr  scrolldown
.1516	20 ce 0c	               jsr  drawbitmap
.1519	68		out            pla
.151a	60		               rts
.151b			scrolldown
.151b	20 9e 1c	               jsr  push
.151e	48		               pha
.151f	ad b6 08	               lda  mapaddr
.1522	85 fb		               sta  $fb
.1524	ad b7 08	               lda  mapaddr+1
.1527	85 fc		               sta  $fc
.1529	68		               pla
.152a	48		               pha
.152b	ad b6 08	               lda  mapaddr
.152e	85 fd		               sta  $fd
.1530	ad b7 08	               lda  mapaddr+1
.1533	85 fe		               sta  $fe
.1535	68		               pla
.1536	20 ca 1d	               jsr  deczp2
.1539	a0 07		               ldy  #$07
.153b	b1 fb		               lda  (zpage1),y
.153d	8d 52 15	               sta  tmpbyte
.1540	88		again          dey
.1541	b1 fb		               lda  (zpage1),y
.1543	91 fd		               sta  (zpage2),y
.1545	c0 01		               cpy  #$01
.1547	d0 f7		               bne  again
.1549	ad 52 15	               lda  tmpbyte
.154c	91 fd		               sta  (zpage2),y
.154e	20 dd 1c	               jsr  pop
.1551	60		               rts
>1552	00		tmpbyte        .byte     $00
.1553			f8action
.1553	48		               pha
.1554	a9 00		               lda  #$0
.1556	8d b1 08	               sta  editmode
.1559	ad b2 08	               lda  fkeyset
.155c	d0 47		               bne  menub
.155e	20 9e 1c	               jsr  push
.1561	a2 ff		               ldx  #<blankmsg
.1563	a0 15		               ldy  #>blankmsg
.1565	20 36 1c	               jsr  putscxy
.1568	a2 ec		               ldx  #<menub_msg
.156a	a0 17		               ldy  #>menub_msg
.156c	20 36 1c	               jsr  putscxy
.156f	20 dd 1c	               jsr  pop
.1572	08		               php
.1573	48		               pha
.1574	8a		               txa
.1575	48		               pha
.1576	ad 67 1a	               lda  f8abutton
.1579	48		               pha
.157a	a9 92		               lda  #146
.157c	8d 76 1a	               sta  f8abutton+15
.157f	a9 01		               lda  #flashcol
.1581	8d 67 1a	               sta  f8abutton
.1584	a2 67		               ldx  #<f8abutton
.1586	a0 1a		               ldy  #>f8abutton
.1588	20 36 1c	               jsr  putscxy
.158b	20 a1 0f	               jsr  delay
.158e	a9 12		               lda  #18
.1590	8d 76 1a	               sta  f8abutton+15
.1593	68		               pla
.1594	8d 67 1a	               sta  f8abutton
.1597	a2 67		               ldx  #<f8abutton
.1599	a0 1a		               ldy  #>f8abutton
.159b	20 36 1c	               jsr  putscxy
.159e	68		               pla
.159f	aa		               tax
.15a0	68		               pla
.15a1	28		               plp
.15a2	4c e9 15	               jmp  swapit
.15a5			menub
.15a5	20 9e 1c	               jsr  push
.15a8	a2 ff		               ldx  #<blankmsg
.15aa	a0 15		               ldy  #>blankmsg
.15ac	20 36 1c	               jsr  putscxy
.15af	a2 d1		               ldx  #<menua_msg
.15b1	a0 17		               ldy  #>menua_msg
.15b3	20 36 1c	               jsr  putscxy
.15b6	20 dd 1c	               jsr  pop
.15b9	08		               php
.15ba	48		               pha
.15bb	8a		               txa
.15bc	48		               pha
.15bd	ad 37 1b	               lda  f8bbutton
.15c0	48		               pha
.15c1	a9 92		               lda  #146
.15c3	8d 46 1b	               sta  f8bbutton+15
.15c6	a9 01		               lda  #flashcol
.15c8	8d 37 1b	               sta  f8bbutton
.15cb	a2 37		               ldx  #<f8bbutton
.15cd	a0 1b		               ldy  #>f8bbutton
.15cf	20 36 1c	               jsr  putscxy
.15d2	20 a1 0f	               jsr  delay
.15d5	a9 12		               lda  #18
.15d7	8d 46 1b	               sta  f8bbutton+15
.15da	68		               pla
.15db	8d 37 1b	               sta  f8bbutton
.15de	a2 37		               ldx  #<f8bbutton
.15e0	a0 1b		               ldy  #>f8bbutton
.15e2	20 36 1c	               jsr  putscxy
.15e5	68		               pla
.15e6	aa		               tax
.15e7	68		               pla
.15e8	28		               plp
.15e9	49 ff		swapit         eor  #$ff
.15eb	8d b2 08	               sta  fkeyset
.15ee	20 3a 0e	               jsr  showfkeys
.15f1	68		               pla
.15f2	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: messages.asm

>15f3	0a 01 05	editor_msg     .byte vrose,1,5
>15f6	5b 45 44 49	               .null     "[editor]"
>15fa	54 4f 52 5d 00
>15ff	03 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>1603	20 20 20 20	               .null     "                                      "
>1607	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1617	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1627	20 20 00
.162a			f1a_msg
>162a	03 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>162e	20 45 44 49	               .null     " edit mode: chr$(   )",146
>1632	54 20 4d 4f 44 45 3a 20 43 48 52 24 28 20 20 20
>1642	29 92 00
.1645			f2a_msg
>1645	03 00 05 92	save_msg       .byte     mesgcol,0,5,146
>1649	20 53 41 56	               .null     " save on cassette or disk? (c/d):"
>164d	45 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>165d	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.166b			f3a_msg
>166b	03 00 05	load_msg       .byte     mesgcol,0,5
>166e	20 4c 4f 41	               .null     " load from cassette or disk? (c/d):"
>1672	44 20 46 52 4f 4d 20 43 41 53 53 45 54 54 45 20
>1682	4f 52 20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.1692			f4a_msg
>1692	03 00 05	copy_msg       .byte     mesgcol,0,5
>1695	20 45 4e 54	               .null     " enter character to copy:"
>1699	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>16a9	43 4f 50 59 3a 00
.16af			f5a_msg
>16af	03 00 05	clear_msg      .byte     mesgcol,0,5
>16b2	20 43 4c 45	               .null     " clear char: chr$(   )"
>16b6	41 52 20 43 48 41 52 3a 20 43 48 52 24 28 20 20
>16c6	20 29 00
.16c9			f6a_msg
>16c9	03 00 05	fill_msg       .byte     mesgcol,0,5
>16cc	20 46 49 4c	               .null     " fill char:  chr$(   )"
>16d0	4c 20 43 48 41 52 3a 20 20 43 48 52 24 28 20 20
>16e0	20 29 00
.16e3			f7a_msg
>16e3	03 00 05	work_msg       .byte     mesgcol,0,5
>16e6	20 45 4e 41	               .null     " enable work space"
>16ea	42 4c 45 20 57 4f 52 4b 20 53 50 41 43 45 00
.16f9			f1b_msg
>16f9	03 00 05	rvrs_msg       .byte     mesgcol,0,5
>16fc	20 52 45 56	               .null     " reverse character:"
>1700	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
.1710			f2b_msg
>1710	03 00 05	invr_msg       .byte     mesgcol,0,5
>1713	20 46 4c 49	               .null     " flipping vertically:"
>1717	50 50 49 4e 47 20 56 45 52 54 49 43 41 4c 4c 59
>1727	3a 00
.1729			f3b_msg
>1729	03 00 05	flip_msg       .byte     mesgcol,0,5
>172c	20 46 4c 49	               .null     " flipping horizontally:"
>1730	50 50 49 4e 47 20 48 4f 52 49 5a 4f 4e 54 41 4c
>1740	4c 59 3a 00
.1744			f4b_msg
>1744	03 00 05	scrollr_msg    .byte     mesgcol,0,5
>1747	20 53 43 52	               .null     " scrolling right:"
>174b	4f 4c 4c 49 4e 47 20 52 49 47 48 54 3a 00
.1759			f5b_msg
>1759	03 00 05	scrolll_msg    .byte     mesgcol,0,5
>175c	20 53 43 52	               .null     " scrolling left:"
>1760	4f 4c 4c 49 4e 47 20 4c 45 46 54 3a 00
.176d			f6b_msg
>176d	03 00 05	scrollu_msg    .byte     mesgcol,0,5
>1770	20 53 43 52	               .null     " scrolling up:"
>1774	4f 4c 4c 49 4e 47 20 55 50 3a 00
.177f			f7b_msg
>177f	03 00 05	scrolld_msg    .byte     mesgcol,0,5
>1782	20 53 43 52	               .null     " scrolling down:"
>1786	4f 4c 4c 49 4e 47 20 44 4f 57 4e 3a 00
>1793	03 00 05	save_fname_msg .byte     mesgcol,0,5
>1796	20 53 41 56	               .null     " save: file name ------.chr"
>179a	45 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>17aa	2d 2d 2d 2e 43 48 52 00
>17b2	03 00 05	load_fname_msg .byte     mesgcol,0,5
>17b5	20 4c 4f 41	               .null     " load: file name ------.chr"
>17b9	44 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>17c9	2d 2d 2d 2e 43 48 52 00
>17d1	03 00 05	menua_msg      .byte     mesgcol,0,5
>17d4	20 59 4f 55	               .null     " you are now in menu a."
>17d8	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>17e8	20 41 2e 00
>17ec	03 00 05	menub_msg      .byte     mesgcol,0,5
>17ef	20 59 4f 55	               .null     " you are now in menu b."
>17f3	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>1803	20 42 2e 00
>1807	0e 15 18 12	quit_msg       .byte     vblue1,21,24,18
>180b	43 54 52 4c	               .text     "ctrl-x",146
>180f	2d 58 92
>1812	20 54 4f 20	               .null     " to quit."
>1816	51 55 49 54 2e 00
>181c	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>1820	43 54 52 4c	               .text     "ctrl-x",146
>1824	2d 58 92
>1827	20 54 4f 20	               .null     " to menu."
>182b	4d 45 4e 55 2e 00
>1831	03 06 14 12	bye_msg        .byte     vcyan,6,20,18
>1835	20 54 48 41	               .null     " thanks and have a good day ",146
>1839	4e 4b 53 20 41 4e 44 20 48 41 56 45 20 41 20 47
>1849	4f 4f 44 20 44 41 59 20 92 00
>1853	0d 0a 18 12	any_msg        .byte     vvert1,10,24,18
>1857	20 20 41 4e	               .null         "  any key to basic  ",146
>185b	59 20 4b 45 59 20 54 4f 20 42 41 53 49 43 20 20
>186b	92 00
>186d	04 04 06 12	whoami0        .byte     vmauve,4,6,18
>1871	20 20 20 20	               .null     "                               "
>1875	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1885	20 20 20 20 20 20 20 20 20 20 20 00
>1891	04 04 07 12	whoami1        .byte     vmauve,4,7,18
>1895	20 20 20 20	               .null     "           charedit            "
>1899	20 20 20 20 20 20 20 43 48 41 52 45 44 49 54 20
>18a9	20 20 20 20 20 20 20 20 20 20 20 00
>18b5	04 04 08 12	whoami2        .byte     vmauve,4,8,18
>18b9	20 20 20 20	               .null     "                               "
>18bd	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>18cd	20 20 20 20 20 20 20 20 20 20 20 00
>18d9	04 04 09 12	whoami3        .byte     vmauve,4,9,18
>18dd	20 20 49 4e	               .null     "  inspired from john heilborn  "
>18e1	53 50 49 52 45 44 20 46 52 4f 4d 20 4a 4f 48 4e
>18f1	20 48 45 49 4c 42 4f 52 4e 20 20 00
>18fd	04 04 0a 12	whoami4        .byte     vmauve,4,10,18
>1901	20 20 20 20	               .null     "      isbn: 0-942386-29-9      "
>1905	20 20 49 53 42 4e 3a 20 30 2d 39 34 32 33 38 36
>1915	2d 32 39 2d 39 20 20 20 20 20 20 00
>1921	04 04 0b 12	whoami5        .byte     vmauve,4,11,18
>1925	20 20 20 20	               .null     "                               "
>1929	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1939	20 20 20 20 20 20 20 20 20 20 20 00
>1945	04 04 0c 12	whoami6        .byte     vmauve,4,12,18
>1949	20 43 4f 44	               .null     " coded in assembly language by "
>194d	45 44 20 49 4e 20 41 53 53 45 4d 42 4c 59 20 4c
>195d	41 4e 47 55 41 47 45 20 42 59 20 00
>1969	04 04 0d 12	whoami7        .byte     vmauve,4,13,18
>196d	20 20 20 20	               .null     "     daniel lafrance 2023      "
>1971	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>1981	20 32 30 32 33 20 20 20 20 20 20 00
>198d	04 04 0e 12	whoami8        .byte     vmauve,4,14,18
>1991	20 20 20 20	               .null     "                               "
>1995	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>19a5	20 20 20 20 20 20 20 20 20 20 20 00
=18			fkeyleft=18
=8			f1top=8
>19b1	07 12 08	f1abutton      .byte     menu1col,fkeyleft,f1top       ;133
>19b4	45 44 49 54	               .text     "edit........"
>19b8	2e 2e 2e 2e 2e 2e 2e 2e
>19c0	12		               .byte     18             ; position 15
>19c1	20 20 20 46	               .text     "   f1   "
>19c5	31 20 20 20
>19c9	92 00		               .byte     146,0
>19cb	07 12 0a	f2abutton      .byte     menu1col,fkeyleft,f1top+2     ;137
>19ce	53 41 56 45	               .text     "save........"
>19d2	2e 2e 2e 2e 2e 2e 2e 2e
>19da	12		               .byte     18            ; position 15
>19db	20 20 20 46	               .text     "   f2   "
>19df	32 20 20 20
>19e3	92 00		               .byte     146,0
>19e5	07 12 0c	f3abutton      .byte     menu1col,fkeyleft,f1top+4     ;134
>19e8	4c 4f 41 44	               .text     "load........"
>19ec	2e 2e 2e 2e 2e 2e 2e 2e
>19f4	12		               .byte     18             ; position 15
>19f5	20 20 20 46	               .text     "   f3   "
>19f9	33 20 20 20
>19fd	92 00		               .byte     146,0
>19ff	07 12 0e	f4abutton      .byte     menu1col,fkeyleft,f1top+6     ;138
>1a02	43 4f 50 59	               .text     "copy........"
>1a06	2e 2e 2e 2e 2e 2e 2e 2e
>1a0e	12		               .byte     18             ; position 15
>1a0f	20 20 20 46	               .text     "   f4   "
>1a13	34 20 20 20
>1a17	92 00		               .byte     146,0
>1a19	07 12 10	f5abutton      .byte     menu1col,fkeyleft,f1top+8     ;135
>1a1c	43 4c 45 41	               .text     "clear......."
>1a20	52 2e 2e 2e 2e 2e 2e 2e
>1a28	12		               .byte     18             ; position 15
>1a29	20 20 20 46	               .text     "   f5   "
>1a2d	35 20 20 20
>1a31	92 00		               .byte     146,0
>1a33	07 12 12	f6abutton      .byte     menu1col,fkeyleft,f1top+10    ;139
>1a36	46 49 4c 4c	               .text     "fill........"
>1a3a	2e 2e 2e 2e 2e 2e 2e 2e
>1a42	12		               .byte     18             ; position 15
>1a43	20 20 20 46	               .text     "   f6   "
>1a47	36 20 20 20
>1a4b	92 00		               .byte     146,0
>1a4d	07 12 14	f7abutton      .byte     menu1col,fkeyleft,f1top+12    ;136
>1a50	57 4f 52 4b	               .text     "work........"
>1a54	2e 2e 2e 2e 2e 2e 2e 2e
>1a5c	12		               .byte     18             ; position 15
>1a5d	20 20 20 46	               .text     "   f7   "
>1a61	37 20 20 20
>1a65	92 00		               .byte     146,0
>1a67	07 12 16	f8abutton      .byte     menu1col,fkeyleft,f1top+14
>1a6a	46 55 4e 43	               .text     "function...."
>1a6e	54 49 4f 4e 2e 2e 2e 2e
>1a76	12		               .byte     18             ; position 15
>1a77	20 20 20 46	               .text     "   f8   "
>1a7b	38 20 20 20
>1a7f	92 00		               .byte     146,0
>1a81	0d 12 08	f1bbutton      .byte     menu2col,fkeyleft,f1top
>1a84	52 45 56 45	               .text     "reverse....."
>1a88	52 53 45 2e 2e 2e 2e 2e
>1a90	12		               .byte     18             ; position 15
>1a91	20 20 20 46	               .text     "   f1   "
>1a95	31 20 20 20
>1a99	92 00		               .byte     146,0
>1a9b	0d 12 0a	f2bbutton      .byte     menu2col,fkeyleft,f1top+2
>1a9e	46 4c 49 50	               .text     "flip vert..."
>1aa2	20 56 45 52 54 2e 2e 2e
>1aaa	12		               .byte     18             ; position 15
>1aab	20 20 20 46	               .text     "   f2   "
>1aaf	32 20 20 20
>1ab3	92 00		               .byte     146,0
>1ab5	0d 12 0c	f3bbutton      .byte     menu2col,fkeyleft,f1top+4
>1ab8	46 4c 49 50	               .text     "flip horz..."
>1abc	20 48 4f 52 5a 2e 2e 2e
>1ac4	12		               .byte     18             ; position 15
>1ac5	20 20 20 46	               .text     "   f3   "
>1ac9	33 20 20 20
>1acd	92 00		               .byte     146,0
>1acf	0d 12 0e	f4bbutton      .byte     menu2col,fkeyleft,f1top+6
>1ad2	53 43 52 4f	               .text     "scroll r...."
>1ad6	4c 4c 20 52 2e 2e 2e 2e
>1ade	12		               .byte     18             ; position 15
>1adf	20 20 20 46	               .text     "   f4   "
>1ae3	34 20 20 20
>1ae7	92 00		               .byte     146,0
>1ae9	0d 12 10	f5bbutton      .byte     menu2col,fkeyleft,f1top+8
>1aec	53 43 52 4f	               .text     "scroll l...."
>1af0	4c 4c 20 4c 2e 2e 2e 2e
>1af8	12		               .byte     18             ; position 15
>1af9	20 20 20 46	               .text     "   f5   "
>1afd	35 20 20 20
>1b01	92 00		               .byte     146,0
>1b03	0d 12 12	f6bbutton      .byte     menu2col,fkeyleft,f1top+10
>1b06	53 43 52 4f	               .text     "scroll u...."
>1b0a	4c 4c 20 55 2e 2e 2e 2e
>1b12	12		               .byte     18             ; position 15
>1b13	20 20 20 46	               .text     "   f6   "
>1b17	36 20 20 20
>1b1b	92 00		               .byte     146,0
>1b1d	0d 12 14	f7bbutton      .byte     menu2col,fkeyleft,f1top+12
>1b20	53 43 52 4f	               .text     "scroll d...."
>1b24	4c 4c 20 44 2e 2e 2e 2e
>1b2c	12		               .byte     18             ; position 15
>1b2d	20 20 20 46	               .text     "   f7   "
>1b31	37 20 20 20
>1b35	92 00		               .byte     146,0
>1b37	0d 12 16	f8bbutton      .byte     menu2col,fkeyleft,f1top+14
>1b3a	46 55 4e 43	               .text     "function...."
>1b3e	54 49 4f 4e 2e 2e 2e 2e
>1b46	12		               .byte     18             ; position 15
>1b47	20 20 20 46	               .text     "   f8   "
>1b4b	38 20 20 20
>1b4f	92 00		               .byte     146,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.1b51			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.1b51			screendis
.1b51	08		               php
.1b52	48		               pha
.1b53	ad 11 d0	               lda  $d011
.1b56	29 ef		               and  #%11101111
.1b58	8d 11 d0	               sta  $d011
.1b5b	68		               pla
.1b5c	28		               plp
.1b5d	60		               rts
.1b5e			screenena
.1b5e	08		               php
.1b5f	48		               pha
.1b60	ad 11 d0	               lda  $d011
.1b63	09 10		               ora  #%00010000
.1b65	8d 11 d0	               sta  $d011
.1b68	68		               pla
.1b69	28		               plp
.1b6a	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.1b6b			scrmaninit
.1b6b	20 9e 1c	               jsr  push
.1b6e	a9 06		               lda  #vbleu
.1b70	8d 21 d0	               sta  vicbackcol
.1b73	a9 05		               lda  #vvert
.1b75	8d 20 d0	               sta  vicbordcol
.1b78	a9 01		               lda  #vblanc
.1b7a	8d 86 02	               sta  bascol
.1b7d	ad 00 04	               lda  scrnram
.1b80	8d 00 04	               sta  scrnram
.1b83	20 8b 1b	               jsr  cls
.1b86	20 dd 1c	               jsr  pop
.1b89	60		               rts
>1b8a	8e		characterset   .byte b_uppercase
.1b8b			cls
.1b8b	08		               php
.1b8c	48		               pha
.1b8d	a9 93		               lda  #$93
.1b8f	20 a7 1b	               jsr  putch
.1b92	a9 0e		               lda  #$0e
.1b94	20 a7 1b	               jsr  putch
.1b97	68		               pla
.1b98	28		               plp
.1b99	60		               rts
.1b9a			putnch
.1b9a	08		               php
.1b9b	e0 00		               cpx  #$00
.1b9d	f0 06		               beq  out
.1b9f	20 d2 ff	again          jsr  $ffd2
.1ba2	ca		               dex
.1ba3	d0 fa		               bne  again
.1ba5	28		out            plp
.1ba6	60		               rts
.1ba7			putch
.1ba7	08		               php
.1ba8	20 d2 ff	               jsr  $ffd2
.1bab	28		               plp
.1bac	60		               rts
.1bad			puts
.1bad	20 9e 1c	               jsr  push
.1bb0	86 fb		               stx  zpage1
.1bb2	84 fc		               sty  zpage1+1
.1bb4	a0 00		               ldy  #0
.1bb6	b1 fb		next           lda  (zpage1),y
.1bb8	f0 09		               beq  exit
.1bba	20 a7 1b	               jsr  putch
.1bbd	20 a5 1d	               jsr  inczp1
.1bc0	4c b6 1b	               jmp  next
.1bc3	20 dd 1c	exit           jsr  pop
.1bc6	60		               rts
.1bc7			gotoxy
.1bc7	08		               php
.1bc8	18		               clc
.1bc9	8a		               txa
.1bca	48		               pha
.1bcb	98		               tya
.1bcc	aa		               tax
.1bcd	68		               pla
.1bce	a8		               tay
.1bcf	20 f0 ff	               jsr  kplot
.1bd2	28		               plp
.1bd3	60		               rts
.1bd4			cursor
=$0286			bascol    =    $0286
.1bd4	08		               php
.1bd5	48		               pha
.1bd6	90 12		               bcc  restore
.1bd8	20 f0 ff	               jsr  kplot
.1bdb	8c fc 1b	               sty  cx
.1bde	8e fd 1b	               stx  cy
.1be1	ad 86 02	               lda  bascol
.1be4	8d fe 1b	               sta  bcol
.1be7	4c f9 1b	               jmp  out
.1bea	ae fd 1b	restore        ldx  cy
.1bed	ac fc 1b	               ldy  cx
.1bf0	20 f0 ff	               jsr  kplot
.1bf3	ad fe 1b	               lda  bcol
.1bf6	8d 86 02	               sta  bascol
.1bf9	68		out            pla
.1bfa	28		               plp
.1bfb	60		               rts
>1bfc	00		cx   .byte     $00
>1bfd	00		cy   .byte     $00
>1bfe	00		bcol .byte     $00
.1bff			cursave
.1bff	08		               php
.1c00	38		               sec
.1c01	20 d4 1b	               jsr  cursor
.1c04	28		               plp
.1c05	60		               rts
.1c06			curput
.1c06	08		               php
.1c07	18		               clc
.1c08	20 d4 1b	               jsr  cursor
.1c0b	28		               plp
.1c0c	60		               rts
.1c0d			putsxy
.1c0d	20 9e 1c	               jsr  push
.1c10	86 fb		               stx  zpage1
.1c12	84 fc		               sty  zpage1+1
.1c14	a0 00		               ldy  #$00
.1c16	b1 fb		               lda  (zpage1),y
.1c18	aa		               tax
.1c19	20 a5 1d	               jsr  inczp1
.1c1c	b1 fb		               lda  (zpage1),y
.1c1e	a8		               tay
.1c1f	20 c7 1b	               jsr  gotoxy
.1c22	20 a5 1d	               jsr  inczp1
.1c25	a6 fb		               ldx  zpage1
.1c27	a4 fc		               ldy  zpage1+1
.1c29	20 ad 1b	               jsr  puts
.1c2c	20 dd 1c	               jsr  pop
.1c2f	60		               rts
>1c30	00 00		straddr   .word     $00
>1c32	00		px        .byte     $00
>1c33	00		py        .byte     $00
>1c34	00 00		zp1       .word     $00
.1c36			putscxy
.1c36	20 9e 1c	               jsr  push
.1c39	84 fc		               sty  zpage1+1
.1c3b	86 fb		               stx  zpage1
.1c3d	ad 86 02	               lda  bascol
.1c40	8d 60 1c	               sta  bc
.1c43	a0 00		               ldy #$00
.1c45	b1 fb		               lda  (zpage1),y
.1c47	8d 86 02	               sta  bascol
.1c4a	20 a5 1d	               jsr  inczp1
.1c4d	a6 fb		               ldx  zpage1
.1c4f	a4 fc		               ldy  zpage1+1
.1c51	20 0d 1c	               jsr  putsxy
.1c54	ad 60 1c	               lda  bc
.1c57	8d 86 02	               sta  bascol
.1c5a	20 dd 1c	               jsr  pop
.1c5d	60		               rts
>1c5e	00 00		straddr  .word      $00
>1c60	00		bc       .byte      $00
>1c61	00 00		zp1      .word      $00
.1c63			putrahex
.1c63	08		               php
.1c64	48		               pha
.1c65	20 bb 1e	               jsr  a2hex
.1c68	a9 5a		               lda  #<a2hexstr
.1c6a	a0 1e		               ldy  #>a2hexstr
.1c6c	20 ad 1b	               jsr  puts
.1c6f	68		               pla
.1c70	28		               plp
.1c71	60		               rts
.1c72			kputrahexxy
.1c72			bputrahexxy
.1c72			putrahexxy
.1c72	08		               php
.1c73	20 bb 1e	               jsr  a2hex
.1c76	a9 57		               lda  #<a2hexpos
.1c78	a0 1e		               ldy  #>a2hexpos
.1c7a	20 0d 1c	               jsr  putsxy
.1c7d	68		               pla
.1c7e	28		               plp
.1c7f	60		               rts
.1c80			putrahexcxy
.1c80	08		               php
.1c81	20 bb 1e	               jsr  a2hex
.1c84	a9 57		               lda  #<a2hexpos
.1c86	a0 1e		               ldy  #>a2hexpos
.1c88	20 36 1c	               jsr  putscxy
.1c8b	68		               pla
.1c8c	28		               plp
.1c8d	60		               rts
.1c8e			setinverse
.1c8e	48		               pha
.1c8f	a9 12		               lda  #$12
.1c91	20 d2 ff	               jsr  $ffd2
.1c94	68		               pla
.1c95	60		               rts
.1c96			clrinverse
.1c96	48		               pha
.1c97	a9 92		               lda  #$92
.1c99	20 d2 ff	               jsr  $ffd2
.1c9c	68		               pla
.1c9d	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.1c9e			push
.1c9e	08		          php            ; stack : flg, pcl, pch
.1c9f	78		          sei
.1ca0	8d da 1c	          sta  ra        ; save a
.1ca3	68		          pla            ; stack : pcl, pch
.1ca4	8d d9 1c	          sta  rp        ; save rp
.1ca7	68		          pla            ; stack : pch
.1ca8	8d db 1c	          sta  pc        ; save pcl
.1cab	68		          pla            ; stack : -
.1cac	8d dc 1c	          sta  pc+1      ; save pch
.1caf	a5 fb		          lda  zpage1    ; get zpage1 low byte
.1cb1	48		          pha            ; stack : zp1l
.1cb2	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.1cb4	48		          pha            ; stack : zp1h, zp1l
.1cb5	a5 fd		          lda  zpage2    ; get zpage2 low byte
.1cb7	48		          pha            ; stack : zp2l, zp1h, zp1l
.1cb8	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.1cba	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1cbb	ad d9 1c	          lda  rp        ; get rp
.1cbe	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1cbf	ad da 1c	          lda  ra        ; get a
.1cc2	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1cc3	8a		          txa            ; get x
.1cc4	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1cc5	98		          tya            ; get y
.1cc6	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1cc7	ad dc 1c	          lda  pc+1      ; get pch
.1cca	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1ccb	ad db 1c	          lda  pc        ; get pcl
.1cce	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1ccf	ad d9 1c	          lda  rp        ; get rp
.1cd2	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1cd3	ad da 1c	          lda  ra        ; get a
.1cd6	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1cd7	58		          cli
.1cd8	60		          rts
>1cd9	00		rp        .byte     0
>1cda	00		ra        .byte     0
>1cdb	00 00		pc        .word     0
.1cdd			pull
.1cdd			pop
.1cdd	78		          sei
.1cde	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1cdf	8d 12 1d	          sta  pc        ; save pcl
.1ce2	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1ce3	8d 13 1d	          sta  pc+1      ; save pch
.1ce6	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1ce7	a8		          tay            ; set y
.1ce8	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1ce9	aa		          tax            ; set x
.1cea	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1ceb	8d 11 1d	          sta  ra        ; save a
.1cee	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1cef	8d 10 1d	          sta  rp        ; save rp
.1cf2	68		          pla            ; stack : zp2l, zp1h, zp1l
.1cf3	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.1cf5	68		          pla            ; stack : zp1h, zp1l
.1cf6	85 fd		          sta  zpage2    ; get zpage2 High byte
.1cf8	68		          pla            ; stack : zp1l
.1cf9	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.1cfb	68		          pla            ; stack :
.1cfc	85 fb		          sta  zpage1    ; get zpage1 High byte
.1cfe	ad 13 1d	          lda  pc+1      ; get pch
.1d01	48		          pha            ; stack : pch
.1d02	ad 12 1d	          lda  pc
.1d05	48		          pha            ; stack : pcl, pch
.1d06	ad 10 1d	          lda  rp        ; get rp
.1d09	48		          pha            ; stack : rp, pcl, pch
.1d0a	ad 11 1d	          lda  ra        ; set ra
.1d0d	58		          cli
.1d0e	28		          plp            ; stack : pcl, pch
.1d0f	60		          rts
>1d10	00		rp        .byte     0
>1d11	00		ra        .byte     0
>1d12	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.1d14			blkfill
.1d14	20 9e 1c	bf0            jsr  push
.1d17	20 d5 1d	               jsr  savezp1
.1d1a	84 fc		               sty  zpage1+1
.1d1c	a0 00		               ldy  #$00
.1d1e	84 fb		               sty  zpage1
.1d20	91 fb		bf1            sta  (zpage1),y
.1d22	c8		               iny
.1d23	d0 fb		               bne  bf1
.1d25	20 e4 1d	               jsr  restzp1
.1d28	20 dd 1c	               jsr  pop
.1d2b	60		               rts
.1d2c			memfill
.1d2c	20 9e 1c	               jsr  push
.1d2f	20 14 1d	mf1            jsr  blkfill
.1d32	c8		               iny
.1d33	ca		               dex
.1d34	d0 f9		               bne  mf1
.1d36	20 dd 1c	               jsr  pop
.1d39	60		               rts
.1d3a			memmove
.1d3a	20 9e 1c	               jsr  push
.1d3d	ba		               tsx            ; On se crée un pointeur ...
.1d3e	8a		               txa
.1d3f	18		               clc
.1d40	69 0b		               adc  #11
.1d42	a8		               tay
.1d43	a2 06		               ldx  #$06
.1d45	b9 00 01	nextbyte       lda  $0100,y
.1d48	99 94 1d	               sta  words,y
.1d4b	c8		               iny
.1d4c	ca		               dex
.1d4d	d0 f6		               bne  nextbyte
.1d4f	ad 94 1d	               lda  s
.1d52	8d 6b 1d	               sta  source+1
.1d55	ad 95 1d	               lda  s+1
.1d58	8d 6c 1d	               sta  source+2
.1d5b	ad 96 1d	               lda  d
.1d5e	8d 68 1d	               sta  destin+1
.1d61	ad 97 1d	               lda  d+1
.1d64	8d 69 1d	               sta  destin+2
.1d67	ad ff ff	destin         lda  $ffff
.1d6a	8d ff ff	source         sta  $ffff
.1d6d	ee 68 1d	               inc  destin+1
.1d70	d0 03		               bne  src
.1d72	ee 69 1d	               inc  destin+2
.1d75	ee 6b 1d	src            inc  source+1
.1d78	d0 03		               bne  cnt
.1d7a	ee 6c 1d	               inc  source+2
.1d7d	ad 98 1d	cnt            lda  compte
.1d80	d0 08		               bne  decit
.1d82	ad 99 1d	               lda  compte+1
.1d85	f0 09		               beq  fini
.1d87	ce 99 1d	               dec  compte+1
.1d8a	ce 98 1d	decit          dec  compte
.1d8d	4c 67 1d	               jmp  destin
.1d90	20 dd 1c	fini           jsr  pop
.1d93	60		               rts
.1d94			words
>1d94	00 00		s         .word     $0000
>1d96	00 00		d         .word     $0000
>1d98	00 00		compte    .word     $0000
.1d9a			decword
.1d9a	20 9e 1c	               jsr  push
.1d9d	86 fd		               stx  zpage2
.1d9f	84 fe		               sty  zpage2+1
.1da1	20 dd 1c	               jsr  pop
.1da4	60		               rts
.1da5			inczp1
.1da5	08		               php
.1da6	48		               pha
.1da7	e6 fb		               inc  zpage1
.1da9	a5 fb		               lda  zpage1
.1dab	d0 02		               bne  nopage
.1dad	e6 fc		               inc  zpage1+1
.1daf	68		nopage         pla
.1db0	28		               plp
.1db1	60		               rts
.1db2			deczp1
.1db2	08		                php
.1db3	48		                pha
.1db4	c6 fb		                dec  zpage1
.1db6	d0 02		                bne  nopage
.1db8	c6 fc		                dec  zpage1+1
.1dba	68		nopage          pla
.1dbb	28		                plp
.1dbc	60		                rts
.1dbd			inczp2
.1dbd	08		               php
.1dbe	48		               pha
.1dbf	e6 fd		               inc  zpage2
.1dc1	a5 fd		               lda  zpage2
.1dc3	d0 02		               bne  nopage
.1dc5	e6 fe		               inc  zpage2+1
.1dc7	68		nopage         pla
.1dc8	28		               plp
.1dc9	60		               rts
.1dca			deczp2
.1dca	08		               php
.1dcb	48		               pha
.1dcc	a5 fd		               lda  zpage2
.1dce	d0 02		               bne  nopage
.1dd0	c6 fe		               dec  zpage2+1
.1dd2	68		nopage         pla
.1dd3	28		               plp
.1dd4	60		               rts
.1dd5			savezp1
.1dd5	08		               php
.1dd6	48		               pha
.1dd7	a5 fb		               lda  zpage1
.1dd9	8d 51 1e	               sta  zp1
.1ddc	a5 fc		               lda  zpage1+1
.1dde	8d 52 1e	               sta  zp1+1
.1de1	68		               pla
.1de2	28		               plp
.1de3	60		               rts
.1de4			restzp1
.1de4	08		               php
.1de5	48		               pha
.1de6	ad 51 1e	               lda zp1
.1de9	85 fb		               sta zpage1
.1deb	ad 52 1e	               lda zp1+1
.1dee	85 fc		               sta zpage1+1
.1df0	68		               pla
.1df1	28		               plp
.1df2	60		               rts
.1df3			savezp2
.1df3	08		         php
.1df4	48		         pha
.1df5	a5 fd		         lda zpage2
.1df7	8d 53 1e	         sta zp2
.1dfa	a5 fe		         lda zpage2+1
.1dfc	8d 54 1e	         sta zp2+1
.1dff	68		         pla
.1e00	28		         plp
.1e01	60		         rts
.1e02			restzp2
.1e02	08		                php
.1e03	48		                pha
.1e04	ad 53 1e	                lda  zp2
.1e07	85 fd		                sta  zpage2
.1e09	ad 54 1e	                lda  zp2+1
.1e0c	85 fe		                sta  zpage2+1
.1e0e	68		                pla
.1e0f	28		                plp
.1e10	60		                rts
.1e11			xy2addr
.1e11	08		                php
.1e12	48		                pha
.1e13	8a		                txa
.1e14	48		                pha
.1e15	98		                tya
.1e16	48		                pha
.1e17	ad 4c 1e	                lda     addr1+1
.1e1a	8d 4e 1e	                sta     addr2+1
.1e1d	ad 4b 1e	                lda     addr1
.1e20	8d 4d 1e	                sta     addr2
.1e23	c0 00		                cpy     #$00
.1e25	f0 0f		                beq     addx
.1e27	18		moreline        clc
.1e28	6d 4a 1e	                adc     ymult
.1e2b	90 03		                bcc     norepy
.1e2d	ee 4e 1e	                inc     addr2+1
.1e30	8d 4d 1e	norepy          sta     addr2
.1e33	88		                dey
.1e34	d0 f1		                bne     moreline
.1e36	8a		addx            txa
.1e37	18		                clc
.1e38	6d 4d 1e	                adc     addr2
.1e3b	90 03		                bcc     thatsit
.1e3d	ee 4e 1e	                inc     addr2+1
.1e40	8d 4d 1e	thatsit         sta     addr2
.1e43	68		                pla
.1e44	a8		                tay
.1e45	68		                pla
.1e46	aa		                tax
.1e47	68		                pla
.1e48	28		                plp
.1e49	60		                rts
>1e4a	28		ymult          .byte     40
>1e4b	00 00		addr1          .word     $0000
>1e4d	00 00		addr2          .word     $0000
>1e4f	00 00		bytecnt        .word     $0000
>1e51	00 00		zp1        .word   $0000
>1e53	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>1e55	01		a2hexcol       .byte     1              ; pour aputscxy
>1e56	00		a2hexbkcol     .byte     %00000000
.1e57			a2hexpos
>1e57	00		a2hexpx        .byte     0              ; pour aputsxy
>1e58	00		a2hexpy        .byte     0
>1e59	24		a2hexprefix    .byte     "$"            ; pour aputs
>1e5a	00 00		a2hexstr       .word     $00
>1e5c	00 00		               .word     $00
>1e5e	00		               .byte     0              ; 0 end string
>1e5f	30 30 30 30	abin           .null     "00000000"
>1e63	30 30 30 30 00
>1e68	20 20 20 00	adec           .null     "   "
.1e6c			putahexfmtxy
.1e6c	20 9e 1c	               jsr  push
.1e6f	20 bb 1e	               jsr  a2hex
.1e72	ae 57 1e	               ldx  a2hexpx
.1e75	ac 58 1e	               ldy  a2hexpy
.1e78	20 c7 1b	               jsr  gotoxy
.1e7b	a2 59		               ldx  #<a2hexprefix
.1e7d	a0 1e		               ldy  #>a2hexprefix
.1e7f	20 ad 1b	               jsr  puts
.1e82	20 dd 1c	               jsr  pop
.1e85	60		               rts
.1e86			putahexfmt
.1e86	20 9e 1c	               jsr  push
.1e89	20 bb 1e	               jsr  a2hex
.1e8c	a2 59		               ldx  #<a2hexprefix
.1e8e	a0 1e		               ldy  #>a2hexprefix
.1e90	20 ad 1b	               jsr  puts
.1e93	20 dd 1c	               jsr  pop
.1e96	60		               rts
.1e97			putahex
.1e97	20 9e 1c	               jsr  push
.1e9a	20 bb 1e	               jsr  a2hex
.1e9d	a2 5a		               ldx  #<a2hexstr
.1e9f	a0 1e		               ldy  #>a2hexstr
.1ea1	20 ad 1b	               jsr  puts
.1ea4	20 dd 1c	               jsr  pop
.1ea7	60		               rts
.1ea8			nib2hex
.1ea8	08		               php
.1ea9	29 0f		               and  #$0f
.1eab	f8		               sed
.1eac	18		               clc
.1ead	69 90		               adc  #$90
.1eaf	69 40		               adc  #$40
.1eb1	d8		               cld
.1eb2	28		               plp
.1eb3	60		               rts
.1eb4			lsra4bits
.1eb4	08		               php
.1eb5	4a		               lsr
.1eb6	4a		               lsr
.1eb7	4a		               lsr
.1eb8	4a		               lsr
.1eb9	28		               plp
.1eba	60		               rts
.1ebb			a2hex
.1ebb	08		               php
.1ebc	48		               pha
.1ebd	48		               pha
.1ebe	20 b4 1e	               jsr  lsra4bits
.1ec1	20 a8 1e	               jsr  nib2hex
.1ec4	8d 5a 1e	               sta  a2hexstr
.1ec7	68		               pla
.1ec8	20 a8 1e	               jsr  nib2hex
.1ecb	8d 5b 1e	               sta  a2hexstr+1
.1ece	a9 00		               lda  #$00                ; set end of string
.1ed0	8d 5c 1e	               sta  a2hexstr+2
.1ed3	68		               pla
.1ed4	28		               plp
.1ed5	60		               rts
.1ed6			xy2hex
.1ed6	20 9e 1c	               jsr  push
.1ed9	20 bb 1e	               jsr  a2hex
.1edc	8a		               txa
.1edd	48		               pha
.1ede	20 b4 1e	               jsr  lsra4bits
.1ee1	20 a8 1e	               jsr  nib2hex
.1ee4	8d 5a 1e	               sta  a2hexstr
.1ee7	68		               pla
.1ee8	20 a8 1e	               jsr  nib2hex
.1eeb	8d 5b 1e	               sta  a2hexstr+1
.1eee	98		               tya
.1eef	48		               pha
.1ef0	20 b4 1e	               jsr  lsra4bits
.1ef3	20 a8 1e	               jsr  nib2hex
.1ef6	8d 5c 1e	               sta  a2hexstr+2
.1ef9	68		               pla
.1efa	20 a8 1e	               jsr  nib2hex
.1efd	8d 5d 1e	               sta  a2hexstr+3
.1f00	a9 00		               lda  #$00                ; 0 ended string
.1f02	8d 5e 1e	               sta  a2hexstr+4
.1f05	20 dd 1c	               jsr  pop
.1f08			atobin
.1f08	20 9e 1c	               jsr  push
.1f0b	a2 08		               ldx  #8
.1f0d	a0 00		               ldy  #0
.1f0f	18		               clc
.1f10	2a		nextbit        rol
.1f11	48		               pha
.1f12	69 00		               adc  #$00
.1f14	29 01		               and  #$01
.1f16	20 a8 1e	               jsr  nib2hex
.1f19	99 5f 1e	               sta  abin,y
.1f1c	68		               pla
.1f1d	c8		               iny
.1f1e	ca		               dex
.1f1f	d0 ef		               bne  nextbit
.1f21	a9 00		               lda  #0
.1f23	99 5f 1e	               sta  abin,y
.1f26	20 dd 1c	               jsr  pull
.1f29	60		               rts
.1f2a			putabin
.1f2a	20 08 1f	               jsr     atobin
.1f2d	20 9e 1c	               jsr     push
.1f30	a2 5f		               ldx     #<abin
.1f32	a0 1e		               ldy     #>abin
.1f34	20 ad 1b	               jsr     puts
.1f37	20 dd 1c	               jsr     pop
.1f3a	60		               rts
.1f3b			printabin
.1f3b	20 9e 1c	               jsr     push
.1f3e	a2 5f		               ldx     #<abin
.1f40	a0 1e		               ldy     #>abin
.1f42	20 ad 1b	               jsr     puts
.1f45	20 dd 1c	               jsr     pop
.1f48	60		               rts
.1f49			putabinfmt
.1f49	08		               php
.1f4a	48		               pha
.1f4b	a9 25		               lda     #"%"
.1f4d	20 a7 1b	               jsr     putch
.1f50	68		               pla
.1f51	20 2a 1f	               jsr     putabin
.1f54	28		               plp
.1f55	60		               rts
.1f56			putabinxy
.1f56	20 c7 1b	               jsr     gotoxy
.1f59	20 2a 1f	               jsr     putabin
.1f5c	60		               rts
.1f5d			putabinfmtxy
.1f5d	20 c7 1b	               jsr     gotoxy
.1f60	20 49 1f	               jsr     putabinfmt
.1f63	60		               rts
.1f64			atodec
.1f64	20 9e 1c	               jsr  push
.1f67	f8		               sed
.1f68	aa		               tax
.1f69	a0 00		               ldy  #$00
.1f6b	a9 00		               lda  #$00
.1f6d	18		nextbit        clc
.1f6e	69 01		               adc  #$01
.1f70	90 01		               bcc  decx
.1f72	c8		               iny
.1f73	ca		decx           dex
.1f74	d0 f7		               bne  nextbit
.1f76	48		               pha
.1f77	98		               tya
.1f78	20 a8 1e	               jsr  nib2hex
.1f7b	8d 68 1e	               sta  adec
.1f7e	68		               pla
.1f7f	48		               pha
.1f80	20 a8 1e	               jsr  nib2hex
.1f83	8d 6a 1e	               sta  adec+2
.1f86	68		               pla
.1f87	6a		               ror
.1f88	6a		               ror
.1f89	6a		               ror
.1f8a	6a		               ror
.1f8b	20 a8 1e	               jsr  nib2hex
.1f8e	8d 69 1e	               sta  adec+1
.1f91	d8		               cld
.1f92	20 dd 1c	               jsr  pull
.1f95	60		               rts
>1f96	00 00 00	buffer         .byte     0,0,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>1f99	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>1f9d	00 00 00 00 00 00 00 00 00 0d 00 00
>1fa9	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>1fad	00 00 00 00 00 00 00 00 00 00 00 00
>1fb9	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>1fbd	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1fc9	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1fcd	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1fd9	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1fdd	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>1fe9	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1fed	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>1ff9	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1ffd	00 00 00 00 00 00 00 00 00 00 00 00
>2009	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>200d	00 00 00 00 00 00 00 00 00 00 00 00
>2019	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>201d	00 00 00 00 00 00 00 00 00 00 00 00
>2029	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>202d	00 00 00 00 00 00 00 00 00 00 00 00
>2039	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>203d	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>2049	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>204d	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>2059	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>205d	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>2069	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>206d	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>2079	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>207d	00 00 00 00 00 00 00 00 00 00 00 00
>2089	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>208d	00 00 00 00 00 00 00 00 00 00 00 00
.2099			waitstop
.2099	20 9e 1c	               jsr  push
.209c	20 ed f6	wait           jsr  k_stop
.209f	d0 fb		               bne  wait
.20a1	20 dd 1c	               jsr  pop
.20a4	60		               rts
.20a5			anykey
.20a5	08		               php
.20a6	48		               pha
.20a7	a5 cb		nokey          lda 203
.20a9	c9 40		               cmp #64
.20ab	f0 fa		               beq nokey
.20ad	20 b3 20	               jsr releasekey
.20b0	68		               pla
.20b1	28		               plp
.20b2	60		               rts
.20b3			releasekey
.20b3	08		               php
.20b4	48		               pha
.20b5	a5 cb		keypressed     lda 203
.20b7	c9 40		               cmp #64
.20b9	d0 fa		               bne keypressed
.20bb	68		               pla
.20bc	28		               plp
.20bd	60		               rts
.20be			getkey
.20be	20 e4 ff	again          jsr  getin
.20c1	c9 00		               cmp  #0
.20c3	f0 f9		               beq  again
.20c5	60		               rts
.20c6			waitkey
.20c6	20 9e 1c	               jsr  push
.20c9	8d 17 21	               sta  thekey
.20cc	20 e4 ff	nope           jsr  getin
.20cf	20 d2 ff	               jsr  chrout
.20d2	cd 17 21	               cmp  thekey
.20d5	d0 f5		               bne  nope
.20d7	20 d2 ff	               jsr  chrout
.20da	20 dd 1c	               jsr  pop
.20dd	60		               rts
.20de			waitspace
.20de	20 9e 1c	               jsr  push
.20e1	a9 7f		wait           lda  #$7f  ;%01111111
.20e3	8d 00 dc	               sta  $dc00
.20e6	ad 01 dc	               lda  $dc01
.20e9	29 10		               and  #$10  ;mask %00010000
.20eb	d0 f4		               bne  wait
.20ed	20 dd 1c	               jsr  pop
.20f0			waitsstop
.20f0	20 9e 1c	               jsr  push
.20f3	20 ed f6	wait           jsr  k_stop  ;%01111111
.20f6	d0 fb		               bne  wait
.20f8	20 dd 1c	               jsr  pop
.20fb			waitreturn
.20fb	20 9e 1c	               jsr  push
.20fe	ad 18 21	               lda  thecount
.2101	8d 00 04	               sta  scrnram
.2104	a9 02		               lda  #$02
.2106	8d 00 d8	               sta  colorram
.2109	20 e4 ff	nope           jsr  getin
.210c	c9 0d		nohex          cmp  #$0d
.210e	d0 f9		               bne  nope
.2110	ee 18 21	               inc  thecount
.2113	20 dd 1c	               jsr  pop
.2116	60		               rts
>2117	00		thekey         .byte   0
>2118	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Sun Nov 26 10:30:36 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm

="20231116-100400"	version  = "20231116-100400"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

=18			fkeyleft       =    18
=9			f1top          =    9
=$0400			scrnnewram     =    $0400
=10			charsdef       =    10
=9			grid_top       =    9
=1			grid_left      =    1
=16			grid_bot       =    grid_top + 7
=8			grid_right     =    grid_left + 7
=$0b			bordure        =    vgris
=$00			fond           =    vnoir
=$03			mesgcol        =    vcyan
=$03			menu1col1      =    vcyan
=$0e			menu1col2      =    vbleu1
=$0f			menu2col1      =    vgris2
=$0c			menu2col2      =    vgris1
=$01			flashcol       =    vblanc
=$07			whoamicol      =    vjaune
=$01			charcolor      =    vblanc
=$0f			charscolor     =    vgris2
.080d			main
.080d	20 2e 21	               jsr  push
.0810	20 00 20	               jsr  scrmaninit
.0813	08		               php
.0814	48		               pha
.0815	a9 08		               lda  #$08
.0817	20 d2 ff	               jsr  $ffd2
.081a	68		               pla
.081b	28		               plp
.081c	20 5d 0a	               jsr  drawcredits
.081f	a2 32		               ldx #<menu_msg
.0821	a0 1c		               ldy #>menu_msg
.0823	20 c6 20	               jsr putscxy
.0826			wait
.0826	20 e6 1f	               jsr  screendis
.0829	20 0e 10	               jsr  copycharset
.082c	20 20 20	               jsr  cls
.082f	20 f8 0f	               jsr  setscreenptr
.0832	20 bc 0a	               jsr  setdefaultchar
.0835	20 69 10	               jsr  staticscreen
.0838	20 3b 0f	               jsr  drawbitmap
.083b	a9 00		               lda  #$00
.083d	8d 51 09	               sta  fkeyset
.0840	20 a5 10	               jsr  drawfkeys
.0843	a9 00		               lda  #$00
.0845	20 2e 21	               jsr  push
.0848	a2 c2		               ldx  #<blankmsg
.084a	a0 19		               ldy  #>blankmsg
.084c	20 c6 20	               jsr  putscxy
.084f	a2 ee		               ldx  #<prompt_msg
.0851	a0 19		               ldy  #>prompt_msg
.0853	20 c6 20	               jsr  putscxy
.0856	20 6d 21	               jsr  pop
.0859	20 f3 1f	               jsr  screenena
.085c	20 cd 0c	               jsr  keyaction
.085f	20 20 20	               jsr  cls
.0862	20 5d 0a	               jsr  drawcredits
.0865	a2 bb		               ldx #<bye_msg
.0867	a0 1d		               ldy #>bye_msg
.0869	20 c6 20	               jsr putscxy
.086c	a2 dd		               ldx #<any_msg
.086e	a0 1d		               ldy #>any_msg
.0870	20 c6 20	               jsr putscxy
.0873	20 4e 25	               jsr  getkey
.0876	20 20 20	               jsr  cls
.0879	20 6d 21	endmain        jsr  pop
.087c	60		               rts
.087d			savetofile
.087d	20 2e 21	               jsr  push
.0880	a9 62		               lda  #<fname
.0882	8d dc 26	               sta  dsk_fnptr
.0885	a9 09		               lda  #>fname
.0887	8d dd 26	               sta  dsk_fnptr+1
.088a	a9 0d		               lda  #(device-fname-1)
.088c	8d de 26	               sta  dsk_fnlen
.088f	ad 70 09	               lda  device
.0892	29 0f		               and  #$0f
.0894	8d db 26	               sta  dsk_lfsno
.0897	8d da 26	               sta  dsk_dev
.089a	a9 00		               lda  #<bitmapmem
.089c	8d d6 26	               sta  dsk_data_s
.089f	a9 28		               lda  #>bitmapmem
.08a1	8d d7 26	               sta  dsk_data_s+1
.08a4	a9 00		               lda  #<endofaddr
.08a6	8d d8 26	               sta  dsk_data_e
.08a9	a9 48		               lda  #>endofaddr
.08ab	8d d9 26	               sta  dsk_data_e+1
.08ae	a2 c2		               ldx #<blankmsg
.08b0	a0 19		               ldy #>blankmsg
.08b2	20 c6 20	               jsr putscxy
.08b5	20 2e 21	               jsr  push
.08b8	a2 01		               ldx  #1
.08ba	a0 04		               ldy  #4
.08bc	20 57 20	               jsr  gotoxy
.08bf	20 6d 21	               jsr  pop
.08c2	20 43 26	               jsr  memtofile
.08c5	20 6d 21	               jsr  pop
.08c8	60		               rts
.08c9			loadfromfile
.08c9	20 2e 21	               jsr  push
.08cc	a9 62		               lda  #<fname
.08ce	8d dc 26	               sta  dsk_fnptr
.08d1	a9 09		               lda  #>fname
.08d3	8d dd 26	               sta  dsk_fnptr+1
.08d6	a9 0d		               lda  #(device-fname-1)
.08d8	8d de 26	               sta  dsk_fnlen
.08db	ad 70 09	               lda  device
.08de	29 0f		               and  #$0f
.08e0	8d da 26	               sta  dsk_dev
.08e3	8d db 26	               sta  dsk_lfsno
.08e6	a9 00		               lda  #<bitmapmem
.08e8	8d d6 26	               sta  dsk_data_s
.08eb	a9 28		               lda  #>bitmapmem
.08ed	8d d7 26	               sta  dsk_data_s+1
.08f0	a9 00		               lda  #<endofaddr
.08f2	8d d8 26	               sta  dsk_data_e
.08f5	a9 48		               lda  #>endofaddr
.08f7	8d d9 26	               sta  dsk_data_e+1
.08fa	a2 c2		               ldx #<blankmsg
.08fc	a0 19		               ldy #>blankmsg
.08fe	20 c6 20	               jsr putscxy
.0901	20 2e 21	               jsr  push
.0904	a2 01		               ldx  #1
.0906	a0 04		               ldy  #4
.0908	20 57 20	               jsr  gotoxy
.090b	20 6d 21	               jsr  pop
.090e	20 7b 26	               jsr  filetomem
.0911	20 6d 21	               jsr  pop
.0914	60		               rts
.0915			screenredraw
.0915	20 2e 21	               jsr  push
.0918	20 e6 1f	               jsr  screendis
.091b	20 20 20	               jsr  cls
.091e	20 69 10	               jsr  staticscreen
.0921	20 3b 0f	               jsr  drawbitmap
.0924	20 a5 10	               jsr  drawfkeys
.0927	20 2e 21	               jsr  push
.092a	a2 c2		               ldx  #<blankmsg
.092c	a0 19		               ldy  #>blankmsg
.092e	20 c6 20	               jsr  putscxy
.0931	a2 ee		               ldx  #<prompt_msg
.0933	a0 19		               ldy  #>prompt_msg
.0935	20 c6 20	               jsr  putscxy
.0938	20 6d 21	               jsr  pop
.093b	20 f3 1f	               jsr  screenena
.093e	20 6d 21	               jsr  pop
.0941	60		               rts
=10240			bitmapmem      =         charsdef * 1024     ;Calcul position ram des caracteres.
=18432			endofaddr      =         (charsdef * 1024) + (4*$800)
=61440			mstopaddr      =         $d000+(4*$800)
>0942	00 d0		startaddr      .word     $d000               ; 53248
>0944	00 f0		stopaddr       .word     mstopaddr           ; 55296
>0946	00 28		bitmapaddr     .word     bitmapmem           ; $3000, 12288
>0948	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>094c	08 04 02 01
>0950	00		editmode       .byte     0
>0951	00		fkeyset        .byte     0
>0952	00		currentchar    .byte     0
>0953	00		currentkey     .byte     0
>0954	00		previouskey    .byte     0
>0955	00		bitmapoffset   .byte     0
>0956	00 00		mapaddr        .word     0
>0958	00 00		byteaddr       .word     0
>095a	00 00		gridaddr       .word     0
>095c	09		cursln         .byte     grid_top
>095d	01		curscl         .byte     grid_left
>095e	05 1b 03 12	pfname         .byte     vvert,27,3,18
>0962	40 30 3a	fname          .text     "@0:"
>0965	4f 52 49 47	name           .text     "origin"
>0969	49 4e
>096b	2e 43 48 52	ext            .null     ".chr"
>096f	00
>0970	08		device         .byte     8

;******  Processing file: routines.asm

.0971			template
.0971	20 2e 21	               jsr  push
.0974	20 6d 21	               jsr  pop
.0977	60		               rts
.0978			getfname
.0978	20 2e 21	               jsr  push
.097b	20 2e 21	               jsr  push
.097e	a2 c2		               ldx  #<blankmsg
.0980	a0 19		               ldy  #>blankmsg
.0982	20 c6 20	               jsr  putscxy
.0985	a2 e8		               ldx  #<fname_msg
.0987	a0 1b		               ldy  #>fname_msg
.0989	20 c6 20	               jsr  putscxy
.098c	20 6d 21	               jsr  pop
.098f	a2 00		               ldx  #$00
.0991	8e c5 09	               stx  count
.0994	20 c6 09	getanother     jsr  getalphanum
.0997	20 37 20	               jsr  putch
.099a	ae c5 09	               ldx  count
.099d	9d 65 09	               sta  name,x
.09a0	ee c5 09	               inc  count
.09a3	ae c5 09	               ldx  count
.09a6	e0 06		               cpx  #$06
.09a8	f0 03		               beq  finish
.09aa	4c 94 09	               jmp  getanother
.09ad			finish
.09ad	20 2e 21	               jsr  push
.09b0	a2 c2		               ldx  #<blankmsg
.09b2	a0 19		               ldy  #>blankmsg
.09b4	20 c6 20	               jsr  putscxy
.09b7	a2 5e		               ldx  #<pfname
.09b9	a0 09		               ldy  #>pfname
.09bb	20 c6 20	               jsr  putscxy
.09be	20 6d 21	               jsr  pop
.09c1	20 6d 21	               jsr  pop
.09c4	60		               rts
>09c5	00		count          .byte     0
.09c6			getalphanum
.09c6	20 2e 21	               jsr  push
.09c9	20 4e 25	getanother     jsr  getkey
.09cc	c9 30		               cmp  #$30      ; 0
.09ce	30 f9		               bmi  getanother
.09d0	c9 3a		               cmp  #$3a      ; 9+1
.09d2	30 0b		               bmi  goodone
.09d4	c9 41		isitletter     cmp  #$41      ; A
.09d6	30 f1		               bmi  getanother
.09d8	c9 5b		               cmp  #$5b      ; Z+1
.09da	30 03		               bmi  goodone
.09dc	4c c9 09	               jmp  getanother
.09df	8d e9 09	goodone        sta  tempbyte
.09e2	20 6d 21	               jsr  pop
.09e5	ad e9 09	               lda  tempbyte
.09e8	60		               rts
>09e9	00		tempbyte       .byte     0
.09ea			copychar
.09ea	20 2e 21	               jsr  push
.09ed	20 26 0a	               jsr  getvalidkey
.09f0	ad 46 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.09f3	85 fb		               sta  zpage1
.09f5	ad 47 09	               lda  bitmapaddr+1
.09f8	85 fc		               sta  zpage1+1
.09fa	ae 5c 0a	               ldx  copykey
.09fd	bd 29 24	               lda  asciitorom,x
.0a00	aa		               tax
.0a01	e0 00		               cpx  #$00
.0a03	f0 08		               beq  no_offset      ; sommes nous déja à 0
.0a05	a9 08		addagain       lda  #$08
.0a07	20 01 12	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0a0a	ca		               dex                 ; pour chaque caracteres
.0a0b	d0 f8		               bne  addagain
.0a0d	ad 56 09	no_offset      lda  mapaddr        ; le caractere actuel
.0a10	85 fd		               sta  zpage2         ;
.0a12	ad 57 09	               lda  mapaddr+1      ;
.0a15	85 fe		               sta  zpage2+1       ;
.0a17	a0 00		               ldy  #$00
.0a19	b1 fb		nextbyte       lda  (zpage1),y
.0a1b	91 fd		               sta  (zpage2),y
.0a1d	c8		               iny
.0a1e	c0 08		               cpy  #$08
.0a20	d0 f7		               bne  nextbyte
.0a22	20 6d 21	out            jsr  pop
.0a25	60		               rts
.0a26			getvalidkey
.0a26	20 2e 21	               jsr  push
.0a29	20 2e 21	               jsr  push
.0a2c	a2 c2		               ldx  #<blankmsg
.0a2e	a0 19		               ldy  #>blankmsg
.0a30	20 c6 20	               jsr  putscxy
.0a33	a2 bf		               ldx  #<copychar_msg
.0a35	a0 1b		               ldy  #>copychar_msg
.0a37	20 c6 20	               jsr  putscxy
.0a3a	20 6d 21	               jsr  pop
.0a3d	20 4e 25	getgoodkey     jsr  getkey
.0a40	8d 5c 0a	               sta  copykey
.0a43	aa		               tax
.0a44	bc 29 24	               ldy  asciitorom,x
.0a47	c4 00		               cpy  $00
.0a49	d0 0a		               bne  goodone
.0a4b	ae 5c 0a	               ldx  copykey
.0a4e	e0 40		               cpx  #$40
.0a50	f0 03		               beq  goodone
.0a52	4c 3d 0a	               jmp  getgoodkey
.0a55	20 37 20	goodone        jsr  putch
.0a58	20 6d 21	               jsr  pop
.0a5b	60		               rts
>0a5c	00		copykey        .byte 0
.0a5d			drawcredits
.0a5d	20 2e 21	               jsr  push
.0a60	20 20 20	               jsr  cls
.0a63	a2 47		               ldx #<whoami0
.0a65	a0 1c		               ldy #>whoami0
.0a67	20 c6 20	               jsr putscxy
.0a6a	a2 6c		               ldx #<whoami1
.0a6c	a0 1c		               ldy #>whoami1
.0a6e	20 c6 20	               jsr putscxy
.0a71	a2 93		               ldx #<whoami2
.0a73	a0 1c		               ldy #>whoami2
.0a75	20 c6 20	               jsr putscxy
.0a78	a2 b8		               ldx #<whoami3
.0a7a	a0 1c		               ldy #>whoami3
.0a7c	20 c6 20	               jsr putscxy
.0a7f	a2 dd		               ldx #<whoami4
.0a81	a0 1c		               ldy #>whoami4
.0a83	20 c6 20	               jsr putscxy
.0a86	a2 02		               ldx #<whoami5
.0a88	a0 1d		               ldy #>whoami5
.0a8a	20 c6 20	               jsr putscxy
.0a8d	a2 27		               ldx #<whoami6
.0a8f	a0 1d		               ldy #>whoami6
.0a91	20 c6 20	               jsr putscxy
.0a94	a2 4c		               ldx #<whoami7
.0a96	a0 1d		               ldy #>whoami7
.0a98	20 c6 20	               jsr putscxy
.0a9b	a2 71		               ldx #<whoami8
.0a9d	a0 1d		               ldy #>whoami8
.0a9f	20 c6 20	               jsr putscxy
.0aa2	a2 96		               ldx #<whoami9
.0aa4	a0 1d		               ldy #>whoami9
.0aa6	20 c6 20	               jsr putscxy
.0aa9	20 1f 12	               jsr  delay
.0aac	20 1f 12	               jsr  delay
.0aaf	20 1f 12	               jsr  delay
.0ab2	20 1f 12	               jsr  delay
.0ab5	20 1f 12	               jsr  delay
.0ab8	20 6d 21	               jsr  pop
.0abb	60		               rts
.0abc			setdefaultchar
.0abc	20 2e 21	               jsr  push
.0abf	a9 40		               lda  #$40
.0ac1	8d 53 09	               sta  currentkey
.0ac4	aa		               tax
.0ac5	bc 29 24	               ldy  asciitorom,x
.0ac8	8c 55 09	               sty  bitmapoffset
.0acb	20 86 0b	               jsr  drawkeyval
.0ace	20 3b 0f	               jsr  drawbitmap
.0ad1	20 2e 21	               jsr  push
.0ad4	a2 0d		               ldx  #13
.0ad6	a0 0c		               ldy  #12
.0ad8	20 57 20	               jsr  gotoxy
.0adb	20 6d 21	               jsr  pop
.0ade	20 37 20	               jsr  putch
.0ae1	20 2e 21	               jsr  push
.0ae4	a2 11		               ldx  #17
.0ae6	a0 05		               ldy  #5
.0ae8	20 57 20	               jsr  gotoxy
.0aeb	20 6d 21	               jsr  pop
.0aee	20 f4 23	               jsr  atodec
.0af1	20 2e 21	               jsr  push
.0af4	a2 f8		isx            ldx  #<adec
.0af6	a0 22		isy            ldy  #>adec
.0af8	20 3d 20	               jsr  puts
.0afb	20 6d 21	               jsr  pull
.0afe	20 6d 21	               jsr  pop
.0b01	60		               rts
.0b02			resetmenuacolor
.0b02	20 2e 21	               jsr  push
.0b05	a9 03		               lda  #menu1col1
.0b07	8d 36 1e	               sta  f1abutton
.0b0a	8d 6c 1e	               sta  f3abutton
.0b0d	8d a2 1e	               sta  f5abutton
.0b10	8d d8 1e	               sta  f7abutton
.0b13	a9 0e		               lda  #menu1col2
.0b15	8d 51 1e	               sta  f2abutton
.0b18	8d 87 1e	               sta  f4abutton
.0b1b	8d bd 1e	               sta  f6abutton
.0b1e	8d f3 1e	               sta  f8abutton
.0b21	20 6d 21	               jsr  pop
.0b24	60		               rts
.0b25			resetmenubcolor
.0b25	20 2e 21	               jsr  push
.0b28	a9 0f		               lda  #menu2col1
.0b2a	8d 0e 1f	               sta  f1bbutton
.0b2d	8d 44 1f	               sta  f3bbutton
.0b30	8d 7a 1f	               sta  f5bbutton
.0b33	8d b0 1f	               sta  f7bbutton
.0b36	a9 0f		               lda  #menu2col1
.0b38	8d 29 1f	               sta  f2bbutton
.0b3b	8d 5f 1f	               sta  f4bbutton
.0b3e	8d 95 1f	               sta  f6bbutton
.0b41	8d cb 1f	               sta  f8bbutton
.0b44	20 6d 21	               jsr  pop
.0b47	60		               rts
.0b48			setmenuacolor
.0b48	20 2e 21	               jsr  push
.0b4b	8d 36 1e	               sta  f1abutton
.0b4e	8d 51 1e	               sta  f2abutton
.0b51	8d 6c 1e	               sta  f3abutton
.0b54	8d 87 1e	               sta  f4abutton
.0b57	8d a2 1e	               sta  f5abutton
.0b5a	8d bd 1e	               sta  f6abutton
.0b5d	8d d8 1e	               sta  f7abutton
.0b60	8d f3 1e	               sta  f8abutton
.0b63	20 6d 21	               jsr  pop
.0b66	60		               rts
.0b67			setmenubcolor
.0b67	20 2e 21	               jsr  push
.0b6a	8d 0e 1f	               sta  f1bbutton
.0b6d	8d 29 1f	               sta  f2bbutton
.0b70	8d 44 1f	               sta  f3bbutton
.0b73	8d 5f 1f	               sta  f4bbutton
.0b76	8d 7a 1f	               sta  f5bbutton
.0b79	8d 95 1f	               sta  f6bbutton
.0b7c	8d b0 1f	               sta  f7bbutton
.0b7f	8d cb 1f	               sta  f8bbutton
.0b82	20 6d 21	               jsr  pop
.0b85	60		               rts
.0b86			drawkeyval
.0b86	20 2e 21	               jsr  push
.0b89	20 2e 21	               jsr  push
.0b8c	a2 01		               ldx  #1
.0b8e	a0 13		               ldy  #19
.0b90	20 57 20	               jsr  gotoxy
.0b93	20 6d 21	               jsr  pop
.0b96	ad 53 09	               lda  currentkey
.0b99	20 37 20	               jsr  putch
.0b9c	48		               pha
.0b9d	a9 3d		               lda  #'='
.0b9f	20 37 20	               jsr  putch
.0ba2	a9 25		               lda  #'%'
.0ba4	20 37 20	               jsr  putch
.0ba7	68		               pla
.0ba8	20 ba 23	               jsr  putabin
.0bab	20 2e 21	               jsr  push
.0bae	a2 01		               ldx  #1
.0bb0	a0 14		               ldy  #20
.0bb2	20 57 20	               jsr  gotoxy
.0bb5	20 6d 21	               jsr  pop
.0bb8	20 2e 21	               jsr  push
.0bbb	a2 87		isx            ldx  #<txt1
.0bbd	a0 0c		isy            ldy  #>txt1
.0bbf	20 3d 20	               jsr  puts
.0bc2	20 6d 21	               jsr  pull
.0bc5	a9 24		               lda  #'$'
.0bc7	20 37 20	               jsr  putch
.0bca	ad 53 09	               lda  currentkey
.0bcd	20 27 23	               jsr  putahex
.0bd0	20 2e 21	               jsr  push
.0bd3	a2 01		               ldx  #1
.0bd5	a0 15		               ldy  #21
.0bd7	20 57 20	               jsr  gotoxy
.0bda	20 6d 21	               jsr  pop
.0bdd	20 2e 21	               jsr  push
.0be0	a2 92		isx            ldx  #<txt2
.0be2	a0 0c		isy            ldy  #>txt2
.0be4	20 3d 20	               jsr  puts
.0be7	20 6d 21	               jsr  pull
.0bea	a9 24		               lda  #'$'
.0bec	20 37 20	               jsr  putch
.0bef	ad 47 09	               lda  bitmapaddr+1
.0bf2	20 27 23	               jsr  putahex
.0bf5	ad 46 09	               lda  bitmapaddr
.0bf8	20 27 23	               jsr  putahex
.0bfb	20 2e 21	               jsr  push
.0bfe	a2 01		               ldx  #1
.0c00	a0 16		               ldy  #22
.0c02	20 57 20	               jsr  gotoxy
.0c05	20 6d 21	               jsr  pop
.0c08	20 2e 21	               jsr  push
.0c0b	a2 9d		isx            ldx  #<txt3
.0c0d	a0 0c		isy            ldy  #>txt3
.0c0f	20 3d 20	               jsr  puts
.0c12	20 6d 21	               jsr  pull
.0c15	a9 24		               lda  #'$'
.0c17	20 37 20	               jsr  putch
.0c1a	ad 55 09	               lda  bitmapoffset
.0c1d	20 27 23	               jsr  putahex
.0c20	20 2e 21	               jsr  push
.0c23	a2 01		               ldx  #1
.0c25	a0 17		               ldy  #23
.0c27	20 57 20	               jsr  gotoxy
.0c2a	20 6d 21	               jsr  pop
.0c2d	20 2e 21	               jsr  push
.0c30	a2 aa		isx            ldx  #<txt4
.0c32	a0 0c		isy            ldy  #>txt4
.0c34	20 3d 20	               jsr  puts
.0c37	20 6d 21	               jsr  pull
.0c3a	a9 24		               lda  #'$'
.0c3c	20 37 20	               jsr  putch
.0c3f	ad 57 09	               lda  mapaddr+1
.0c42	20 27 23	               jsr  putahex
.0c45	ad 56 09	               lda  mapaddr
.0c48	20 27 23	               jsr  putahex
.0c4b	20 2e 21	               jsr  push
.0c4e	a2 01		               ldx  #1
.0c50	a0 18		               ldy  #24
.0c52	20 57 20	               jsr  gotoxy
.0c55	20 6d 21	               jsr  pop
.0c58	20 2e 21	               jsr  push
.0c5b	a2 b5		isx            ldx  #<txt5
.0c5d	a0 0c		isy            ldy  #>txt5
.0c5f	20 3d 20	               jsr  puts
.0c62	20 6d 21	               jsr  pull
.0c65	ad 5d 09	               lda  curscl
.0c68	20 27 23	               jsr  putahex
.0c6b	a9 da		               lda  #$da
.0c6d	20 37 20	               jsr  putch
.0c70	ad 5c 09	               lda  cursln
.0c73	20 27 23	               jsr  putahex
.0c76	20 6d 21	               jsr  pop
.0c79	60		               rts
>0c7a	50 45 54 53	txt0           .null     "petscii :   "
>0c7e	43 49 49 20 3a 20 20 20 00
>0c87	4b 45 59 20	txt1           .null     "key code: "
>0c8b	43 4f 44 45 3a 20 00
>0c92	42 49 54 4d	txt2           .null     "bitmap..: "
>0c96	41 50 2e 2e 3a 20 00
>0c9d	4f 46 46 53	txt3           .null     "offset..:   "
>0ca1	45 54 2e 2e 3a 20 20 20 00
>0caa	4d 41 50 41	txt4           .null     "mapaddr.: "
>0cae	44 44 52 2e 3a 20 00
>0cb5	43 55 52 53	txt5           .null     "cursval.: "
>0cb9	56 41 4c 2e 3a 20 00
>0cc0	53 54 41 43	txt6           .null     "stack......:"
>0cc4	4b 2e 2e 2e 2e 2e 2e 3a 00
.0ccd			keyaction
.0ccd	20 2e 21	               jsr  push
.0cd0	20 4e 25	loop           jsr  getkey
.0cd3	c9 85		f1             cmp  #key_f1
.0cd5	d0 03		               bne  f2
.0cd7	4c 55 0d	               jmp  dof1
.0cda	c9 89		f2             cmp  #key_f2
.0cdc	d0 03		               bne  f3
.0cde	4c 5b 0d	               jmp  dof2
.0ce1	c9 86		f3             cmp  #key_f3
.0ce3	d0 03		               bne  f4
.0ce5	4c 61 0d	               jmp  dof3
.0ce8	c9 8a		f4             cmp  #key_f4
.0cea	d0 03		               bne  f5
.0cec	4c 67 0d	               jmp  dof4
.0cef	c9 87		f5             cmp  #key_f5
.0cf1	d0 03		               bne  f6
.0cf3	4c 6d 0d	               jmp  dof5
.0cf6	c9 8b		f6             cmp  #key_f6
.0cf8	d0 03		               bne  f7
.0cfa	4c 73 0d	               jmp  dof6
.0cfd	c9 88		f7             cmp  #key_f7
.0cff	d0 03		               bne  f8
.0d01	4c 79 0d	               jmp  dof7
.0d04	c9 8c		f8             cmp  #key_f8
.0d06	d0 03		               bne  ctrlx
.0d08	4c 7f 0d	               jmp  dof8
.0d0b	c9 18		ctrlx          cmp  #ctrl_x
.0d0d	d0 03		               bne  ctrlr
.0d0f	4c 85 0d	               jmp  doquit
.0d12	c9 12		ctrlr          cmp  #ctrl_r
.0d14	d0 06		               bne  ishex14
.0d16	20 15 09	               jsr  screenredraw
.0d19	4c d0 0c	               jmp  loop
.0d1c	c9 14		ishex14        cmp  #$14
.0d1e	d0 03		               bne  ishex12
.0d20	4c d0 0c	               jmp  loop
.0d23	c9 12		ishex12        cmp  #$12
.0d25	d0 03		               bne  reste
.0d27	4c d0 0c	               jmp  loop
.0d2a			reste
.0d2a	20 2e 21	               jsr  push
.0d2d	a2 0d		               ldx  #13
.0d2f	a0 0c		               ldy  #12
.0d31	20 57 20	               jsr  gotoxy
.0d34	20 6d 21	               jsr  pop
.0d37	20 37 20	               jsr  putch
.0d3a	48		               pha
.0d3b	ad 53 09	               lda  currentkey
.0d3e	8d 54 09	               sta  previouskey
.0d41	68		               pla
.0d42	8d 53 09	               sta  currentkey
.0d45	aa		               tax
.0d46	bc 29 24	               ldy  asciitorom,x
.0d49	8c 55 09	               sty  bitmapoffset
.0d4c	20 86 0b	               jsr  drawkeyval
.0d4f	20 3b 0f	               jsr  drawbitmap
.0d52	4c d0 0c	               jmp  loop
.0d55	20 35 12	dof1           jsr  f1action  ;edit/reverse
.0d58	4c d0 0c	               jmp  loop
.0d5b	20 28 13	dof2           jsr  f2action  ;save/flip vert
.0d5e	4c d0 0c	               jmp  loop
.0d61	20 e0 13	dof3           jsr  f3action  ;load/flip horz
.0d64	4c d0 0c	               jmp  loop
.0d67	20 ad 14	dof4           jsr  f4action  ;copy/scroll r
.0d6a	4c d0 0c	               jmp  loop
.0d6d	20 7a 15	dof5           jsr  f5action  ;clear/scroll l
.0d70	4c d0 0c	               jmp  loop
.0d73	20 32 16	dof6           jsr  f6action  ;fill;/scroll up
.0d76	4c d0 0c	               jmp  loop
.0d79	20 ea 16	dof7           jsr  f7action  ;clear;/scroll down
.0d7c	4c d0 0c	               jmp  loop
.0d7f	20 a7 17	dof8           jsr  f8action  ; function
.0d82	4c d0 0c	               jmp  loop
.0d85	20 6d 21	doquit         jsr  pop
.0d88	60		               rts
.0d89			editor
.0d89	20 2e 21	               jsr  push
.0d8c	20 2e 21	               jsr  push
.0d8f	a2 c2		               ldx  #<blankmsg
.0d91	a0 19		               ldy  #>blankmsg
.0d93	20 c6 20	               jsr  putscxy
.0d96	a2 32		               ldx  #<exit_msg
.0d98	a0 1c		               ldy  #>exit_msg
.0d9a	20 c6 20	               jsr  putscxy
.0d9d	20 6d 21	               jsr  pop
.0da0	20 2e 21	               jsr  push
.0da3	a2 c2		               ldx  #<blankmsg
.0da5	a0 19		               ldy  #>blankmsg
.0da7	20 c6 20	               jsr  putscxy
.0daa	a2 09		               ldx  #<edit_msg
.0dac	a0 1a		               ldy  #>edit_msg
.0dae	20 c6 20	               jsr  putscxy
.0db1	20 6d 21	               jsr  pop
.0db4	20 f7 0e	               jsr  setcurs
.0db7	ad 53 09	               lda  currentkey
.0dba	20 2e 21	               jsr  push
.0dbd	a2 11		               ldx  #17
.0dbf	a0 05		               ldy  #5
.0dc1	20 57 20	               jsr  gotoxy
.0dc4	20 6d 21	               jsr  pop
.0dc7	20 f4 23	               jsr  atodec
.0dca	20 2e 21	               jsr  push
.0dcd	a2 f8		isx            ldx  #<adec
.0dcf	a0 22		isy            ldy  #>adec
.0dd1	20 3d 20	               jsr  puts
.0dd4	20 6d 21	               jsr  pull
.0dd7	20 3b 0f	               jsr  drawbitmap
.0dda	20 4e 25	ed_loop        jsr  getkey
.0ddd	c9 85		f1             cmp  #f1key
.0ddf	d0 03		               bne  cu
.0de1	4c c9 0e	               jmp  do_ctrlx
.0de4	c9 91		cu             cmp  #cursu
.0de6	d0 03		               bne  cd
.0de8	4c 74 0e	               jmp  do_up
.0deb	c9 11		cd             cmp  #cursd
.0ded	d0 03		               bne  cl
.0def	4c 87 0e	               jmp  do_down
.0df2	c9 9d		cl             cmp  #cursl
.0df4	d0 03		               bne  cr
.0df6	4c 9a 0e	               jmp  do_left
.0df9	c9 1d		cr             cmp  #cursr
.0dfb	d0 03		               bne  cx
.0dfd	4c ad 0e	               jmp  do_right
.0e00	c9 18		cx             cmp  #ctrl_x
.0e02	d0 03		               bne  sp
.0e04	4c c9 0e	               jmp  do_ctrlx
.0e07	c9 20		sp             cmp  #$20
.0e09	d0 03		               bne  ishex14
.0e0b	4c c0 0e	               jmp  do_swap
.0e0e	c9 14		ishex14        cmp  #$14
.0e10	d0 03		               bne  ishex12
.0e12	4c c0 0e	               jmp  do_swap
.0e15	c9 12		ishex12        cmp  #$12
.0e17	d0 03		               bne  rest
.0e19	4c c0 0e	               jmp  do_swap
.0e1c			rest
.0e1c	20 2e 21	               jsr  push
.0e1f	a2 0d		               ldx  #13
.0e21	a0 0c		               ldy  #12
.0e23	20 57 20	               jsr  gotoxy
.0e26	20 6d 21	               jsr  pop
.0e29	20 37 20	               jsr  putch
.0e2c	48		               pha
.0e2d	ad 53 09	               lda  currentkey
.0e30	8d 54 09	               sta  previouskey
.0e33	68		               pla
.0e34	8d 53 09	               sta  currentkey
.0e37	aa		               tax
.0e38	bc 29 24	               ldy  asciitorom,x
.0e3b	8c 55 09	               sty  bitmapoffset
.0e3e	20 86 0b	               jsr  drawkeyval
.0e41	20 3b 0f	               jsr  drawbitmap
.0e44	20 2e 21	               jsr  push
.0e47	a2 0d		               ldx  #13
.0e49	a0 0c		               ldy  #12
.0e4b	20 57 20	               jsr  gotoxy
.0e4e	20 6d 21	               jsr  pop
.0e51	20 37 20	               jsr  putch
.0e54	20 2e 21	               jsr  push
.0e57	a2 11		               ldx  #17
.0e59	a0 05		               ldy  #5
.0e5b	20 57 20	               jsr  gotoxy
.0e5e	20 6d 21	               jsr  pop
.0e61	20 f4 23	               jsr  atodec
.0e64	20 2e 21	               jsr  push
.0e67	a2 f8		isx            ldx  #<adec
.0e69	a0 22		isy            ldy  #>adec
.0e6b	20 3d 20	               jsr  puts
.0e6e	20 6d 21	               jsr  pull
.0e71	4c c6 0e	               jmp  totop
.0e74	ad 5c 09	do_up          lda  cursln
.0e77	c9 09		               cmp  #grid_top
.0e79	f0 4b		               beq  totop
.0e7b	20 19 0f	               jsr  clrcurs
.0e7e	ce 5c 09	               dec  cursln
.0e81	20 f7 0e	               jsr  setcurs
.0e84	4c c6 0e	               jmp  totop
.0e87	ad 5c 09	do_down        lda  cursln
.0e8a	c9 10		               cmp  #grid_bot
.0e8c	f0 38		               beq  totop
.0e8e	20 19 0f	               jsr  clrcurs
.0e91	ee 5c 09	               inc  cursln
.0e94	20 f7 0e	               jsr  setcurs
.0e97	4c c6 0e	               jmp  totop
.0e9a	ad 5d 09	do_left        lda  curscl
.0e9d	c9 01		               cmp  #grid_left
.0e9f	f0 25		               beq  totop
.0ea1	20 19 0f	               jsr  clrcurs
.0ea4	ce 5d 09	               dec  curscl
.0ea7	20 f7 0e	               jsr  setcurs
.0eaa	4c c6 0e	               jmp  totop
.0ead	ad 5d 09	do_right       lda  curscl
.0eb0	c9 08		               cmp  #grid_right
.0eb2	f0 12		               beq  totop
.0eb4	20 19 0f	               jsr  clrcurs
.0eb7	ee 5d 09	               inc  curscl
.0eba	20 f7 0e	               jsr  setcurs
.0ebd	4c c6 0e	               jmp  totop
.0ec0	20 d0 0e	do_swap        jsr  do_eor
.0ec3	20 3b 0f	               jsr  drawbitmap
.0ec6	4c da 0d	totop          jmp  ed_loop
.0ec9	20 19 0f	do_ctrlx       jsr  clrcurs
.0ecc	20 6d 21	               jsr  pop
.0ecf	60		               rts
.0ed0			do_eor
.0ed0	20 2e 21	               jsr  push
.0ed3	ad 56 09	               lda  mapaddr
.0ed6	85 fd		               sta  zpage2
.0ed8	ad 57 09	               lda  mapaddr+1
.0edb	85 fe		               sta  zpage2+1
.0edd	ae 5c 09	               ldx  cursln     ; calcul de
.0ee0	ca		               dex            ; l'offset de
.0ee1	8a		               txa            ; la
.0ee2	29 f7		               and  #$f7      ; ligne
.0ee4	a8		               tay
.0ee5	ae 5d 09	               ldx  curscl
.0ee8	ca		               dex
.0ee9	bd 48 09	               lda  eorval,x
.0eec	51 fd		               eor  (zpage2),y
.0eee	20 86 0b	               jsr  drawkeyval
.0ef1	91 fd		               sta  (zpage2),y
.0ef3	20 6d 21	               jsr  pop
.0ef6	60		               rts
.0ef7			setcurs
.0ef7	20 2e 21	               jsr  push
.0efa	a2 01		               ldx  #grid_left
.0efc	ac 5c 09	               ldy  cursln
.0eff	20 57 20	               jsr  gotoxy
.0f02	a9 da		               lda  #$da
.0f04	20 37 20	               jsr  putch
.0f07	ae 5d 09	               ldx  curscl
.0f0a	e8		               inx
.0f0b	a0 08		               ldy  #grid_top-1
.0f0d	20 57 20	               jsr  gotoxy
.0f10	a9 da		               lda  #$da
.0f12	20 37 20	               jsr  putch
.0f15	20 6d 21	               jsr  pop
.0f18	60		               rts
.0f19			clrcurs
.0f19	20 2e 21	               jsr  push
.0f1c	a2 01		               ldx  #grid_left
.0f1e	ac 5c 09	               ldy  cursln
.0f21	20 57 20	               jsr  gotoxy
.0f24	a9 20		               lda  #$20
.0f26	20 37 20	               jsr  putch
.0f29	ae 5d 09	               ldx  curscl
.0f2c	e8		               inx
.0f2d	a0 08		               ldy  #grid_top-1
.0f2f	20 57 20	               jsr  gotoxy
.0f32	a9 20		               lda  #$20
.0f34	20 37 20	               jsr  putch
.0f37	20 6d 21	               jsr  pop
.0f3a	60		               rts
.0f3b			drawbitmap
.0f3b	20 2e 21	               jsr  push
.0f3e	20 a2 0f	               jsr  calcmapaddr
.0f41	ad 56 09	               lda  mapaddr        ; on pointe sur la table des bitmaps
.0f44	85 fb		               sta  zpage1
.0f46	ad 57 09	               lda  mapaddr+1
.0f49	85 fc		               sta  zpage1+1
.0f4b	a0 00		drawchar       ldy  #$00
.0f4d	a2 09		               ldx  #grid_top      ;on replace la ...
.0f4f	8e 58 0f	               stx  isy+1          ;ligne de départ
.0f52	20 2e 21	nextline       jsr  push
.0f55	a2 02		               ldx  #grid_left+1        ; la colonne
.0f57	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.0f59	20 57 20	               jsr  gotoxy
.0f5c	20 6d 21	               jsr  pop
.0f5f	b1 fb		               lda  (zpage1),y     ; on li une ligne
.0f61	20 98 23	               jsr  atobin
.0f64	20 d1 0f	               jsr  abintograph
.0f67	20 2e 21	               jsr  push
.0f6a	a2 ef		isx            ldx  #<abin
.0f6c	a0 22		isy            ldy  #>abin
.0f6e	20 3d 20	               jsr  puts
.0f71	20 6d 21	               jsr  pull
.0f74	ee 58 0f	               inc  isy+1
.0f77	c8		               iny
.0f78	c0 08		               cpy  #$08
.0f7a	30 d6		               bmi  nextline
.0f7c	20 83 0f	               jsr  highlight
.0f7f	20 6d 21	               jsr  pop
.0f82	60		               rts
.0f83			highlight
.0f83	20 2e 21	               jsr  push
.0f86	ae 54 09	               ldx  previouskey
.0f89	bd 29 24	               lda  asciitorom,x
.0f8c	aa		               tax
.0f8d	a9 0f		               lda  #charscolor
.0f8f	9d 00 d8	               sta  colorram,x
.0f92	ae 53 09	               ldx  currentkey
.0f95	bd 29 24	               lda  asciitorom,x
.0f98	aa		               tax
.0f99	a9 01		               lda  #charcolor
.0f9b	9d 00 d8	               sta  colorram,x
.0f9e	20 6d 21	               jsr  pop
.0fa1	60		               rts
.0fa2			calcmapaddr
.0fa2	20 2e 21	               jsr  push
.0fa5	ad 46 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0fa8	85 fb		               sta  zpage1
.0faa	ad 47 09	               lda  bitmapaddr+1
.0fad	85 fc		               sta  zpage1+1
.0faf	ae 55 09	               ldx  bitmapoffset
.0fb2	e0 00		               cpx  #$00
.0fb4	f0 08		               beq  thesame         ; sommes nous déja à 0
.0fb6	a9 08		addagain       lda  #$08
.0fb8	20 01 12	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0fbb	ca		               dex                 ; pour chaque caracteres
.0fbc	d0 f8		               bne  addagain
.0fbe	48		thesame        pha
.0fbf	a5 fb		               lda  zpage1
.0fc1	8d 56 09	               sta  mapaddr
.0fc4	a5 fc		               lda  zpage1+1
.0fc6	8d 57 09	               sta  mapaddr+1
.0fc9	68		               pla
.0fca	20 86 0b	               jsr  drawkeyval
.0fcd	20 6d 21	out            jsr  pop
.0fd0	60		               rts
.0fd1			abintograph
.0fd1	20 2e 21	               jsr  push
.0fd4	a9 ef		               lda  #<abin
.0fd6	85 fb		               sta  zpage1
.0fd8	a9 22		               lda  #>abin+1
.0fda	85 fc		               sta  zpage1+1
.0fdc	a0 00		               ldy  #$00
.0fde	b1 fb		nextbit        lda  (zpage1),y
.0fe0	c9 30		               cmp  #$30
.0fe2	f0 07		               beq  itszero
.0fe4	a9 d1		itsone         lda  #$d1
.0fe6	91 fb		               sta  (zpage1),y
.0fe8	4c ef 0f	               jmp  next
.0feb	a9 2e		itszero        lda  #$2e
.0fed	91 fb		               sta  (zpage1),y
.0fef	c8		next           iny
.0ff0	c0 08		               cpy  #$08
.0ff2	30 ea		               bmi  nextbit
.0ff4	20 6d 21	               jsr  pop
.0ff7	60		               rts
.0ff8			setscreenptr
.0ff8	20 2e 21	               jsr  push
.0ffb	a9 08		               lda  #$08      ; basic commande to disable ...
.0ffd	20 d2 ff	               jsr  chrout    ; ... character set change.
.1000	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.1003	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.1005	09 0a		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.1007	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.100a	20 6d 21	               jsr  pop
.100d	60		               rts
.100e			copycharset
.100e	20 2e 21	               jsr  push
.1011	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.1014	29 fe		               and  #%11111110     ;254
.1016	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.1019	a5 01		               lda  u6510map       ;$01
.101b	29 fb		               and  #%11111011     ;251
.101d	85 01		               sta  u6510map       ;$01
.101f	20 34 10	               jsr  memcopy
.1022	a5 01		               lda  u6510map       ;$01
.1024	09 04		               ora  #%00000100
.1026	85 01		               sta  u6510map       ;$01
.1028	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.102b	09 01		               ora  #%00000001     ;254
.102d	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.1030	20 6d 21	               jsr  pop
.1033	60		               rts
.1034			memcopy
.1034	20 2e 21	               jsr  push
.1037	ad 42 09	               lda  startaddr
.103a	85 fb		               sta  zpage1
.103c	ad 43 09	               lda  startaddr+1
.103f	85 fc		               sta  zpage1+1
.1041	ad 46 09	               lda  bitmapaddr
.1044	85 fd		               sta  zpage2
.1046	ad 47 09	               lda  bitmapaddr+1
.1049	85 fe		               sta  zpage2+1
.104b	a0 00		               ldy  #$00
.104d	b1 fb		onemore        lda  (zpage1),y
.104f	91 fd		               sta  (zpage2),y
.1051	20 35 22	               jsr  inczp1
.1054	20 4d 22	               jsr  inczp2
.1057	a5 fc		               lda  zpage1+1
.1059	cd 45 09	               cmp  stopaddr+1
.105c	d0 ef		               bne  onemore
.105e	a5 fb		               lda  zpage1
.1060	cd 44 09	               cmp  stopaddr
.1063	d0 e8		               bne  onemore
.1065	20 6d 21	               jsr  pop
.1068	60		               rts
.1069			staticscreen
.1069	48		               pha
.106a	a9 0b		               lda  #bordure
.106c	8d 20 d0	               sta  $d020
.106f	68		               pla
.1070	48		               pha
.1071	a9 00		               lda  #fond
.1073	8d 21 d0	               sta  $d021
.1076	68		               pla
.1077	20 58 11	               jsr  drawlines
.107a	20 34 11	               jsr  drawallchars
.107d	20 a0 11	               jsr  drawgrid
.1080	20 a5 10	               jsr  drawfkeys
.1083	20 2e 21	               jsr  push
.1086	a2 c2		               ldx  #<blankmsg
.1088	a0 19		               ldy  #>blankmsg
.108a	20 c6 20	               jsr  putscxy
.108d	a2 1d		               ldx  #<quit_msg
.108f	a0 1c		               ldy  #>quit_msg
.1091	20 c6 20	               jsr  putscxy
.1094	20 6d 21	               jsr  pop
.1097	20 2e 21	               jsr  push
.109a	a2 00		               ldx  #0
.109c	a0 07		               ldy  #7
.109e	20 57 20	               jsr  gotoxy
.10a1	20 6d 21	               jsr  pop
.10a4	60		               rts
.10a5			drawfkeys
.10a5	20 2e 21	               jsr  push
.10a8	ad 51 09	               lda  fkeyset
.10ab	c9 00		               cmp  #$0
.10ad	d0 42		               bne  secondks
.10af	a2 00		               ldx #<titremenu1
.10b1	a0 1e		               ldy #>titremenu1
.10b3	20 c6 20	               jsr putscxy
.10b6	a2 36		               ldx #<f1abutton
.10b8	a0 1e		               ldy #>f1abutton
.10ba	20 c6 20	               jsr putscxy
.10bd	a2 51		               ldx #<f2abutton
.10bf	a0 1e		               ldy #>f2abutton
.10c1	20 c6 20	               jsr putscxy
.10c4	a2 6c		               ldx #<f3abutton
.10c6	a0 1e		               ldy #>f3abutton
.10c8	20 c6 20	               jsr putscxy
.10cb	a2 87		               ldx #<f4abutton
.10cd	a0 1e		               ldy #>f4abutton
.10cf	20 c6 20	               jsr putscxy
.10d2	a2 a2		               ldx #<f5abutton
.10d4	a0 1e		               ldy #>f5abutton
.10d6	20 c6 20	               jsr putscxy
.10d9	a2 bd		               ldx #<f6abutton
.10db	a0 1e		               ldy #>f6abutton
.10dd	20 c6 20	               jsr putscxy
.10e0	a2 d8		               ldx #<f7abutton
.10e2	a0 1e		               ldy #>f7abutton
.10e4	20 c6 20	               jsr putscxy
.10e7	a2 f3		               ldx #<f8abutton
.10e9	a0 1e		               ldy #>f8abutton
.10eb	20 c6 20	               jsr putscxy
.10ee	4c 30 11	               jmp end
.10f1			secondks
.10f1	a2 1b		               ldx #<titremenu2
.10f3	a0 1e		               ldy #>titremenu2
.10f5	20 c6 20	               jsr putscxy
.10f8	a2 0e		               ldx #<f1bbutton
.10fa	a0 1f		               ldy #>f1bbutton
.10fc	20 c6 20	               jsr putscxy
.10ff	a2 29		               ldx #<f2bbutton
.1101	a0 1f		               ldy #>f2bbutton
.1103	20 c6 20	               jsr putscxy
.1106	a2 44		               ldx #<f3bbutton
.1108	a0 1f		               ldy #>f3bbutton
.110a	20 c6 20	               jsr putscxy
.110d	a2 5f		               ldx #<f4bbutton
.110f	a0 1f		               ldy #>f4bbutton
.1111	20 c6 20	               jsr putscxy
.1114	a2 7a		               ldx #<f5bbutton
.1116	a0 1f		               ldy #>f5bbutton
.1118	20 c6 20	               jsr putscxy
.111b	a2 95		               ldx #<f6bbutton
.111d	a0 1f		               ldy #>f6bbutton
.111f	20 c6 20	               jsr putscxy
.1122	a2 b0		               ldx #<f7bbutton
.1124	a0 1f		               ldy #>f7bbutton
.1126	20 c6 20	               jsr putscxy
.1129	a2 cb		               ldx #<f8bbutton
.112b	a0 1f		               ldy #>f8bbutton
.112d	20 c6 20	               jsr putscxy
.1130	20 6d 21	end            jsr  pop
.1133	60		               rts
.1134			drawallchars
.1134	20 2e 21	               jsr push
.1137	20 2e 21	               jsr  push
.113a	a2 00		               ldx  #0
.113c	a0 00		               ldy  #0
.113e	20 57 20	               jsr  gotoxy
.1141	20 6d 21	               jsr  pop
.1144	a2 00		               ldx  #$00
.1146	8a		nextc          txa
.1147	9d 00 04	               sta  scrnnewram,x
.114a	a9 0f		               lda  #charscolor
.114c	9d 00 d8	               sta  colorram,x
.114f	e8		               inx
.1150	e0 80		               cpx  #$80
.1152	d0 f2		               bne  nextc
.1154	20 6d 21	               jsr  pop
.1157	60		               rts
.1158			drawlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.1158	20 2e 21	               jsr  push
.115b	a2 28		               ldx  #40
.115d	a9 40		               lda  #64
.115f	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.1162	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.1165	ca		               dex
.1166	e0 10		hline          cpx  #vlinepos
.1168	10 03		               bpl  notyet
.116a	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.116d	e0 00		notyet         cpx  #$00
.116f	d0 ee		               bne  nextl
.1171	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.1173	85 fb		               sta  zpage1
.1175	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.1177	85 fc		               sta  zpage1+1
.1179	a0 00		               ldy  #0
.117b	a9 72		               lda  #114
.117d	91 fb		               sta  (zpage1),y
.117f	20 0f 12	               jsr  zp1add40
.1182	a2 12		               ldx  #24-hline2
.1184	a9 5d		               lda  #93
.1186	91 fb		another93      sta  (zpage1),y
.1188	20 0f 12	               jsr  zp1add40
.118b	ca		               dex
.118c	d0 f8		               bne  another93
.118e	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.1190	85 fb		               sta  zpage1
.1192	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.1194	85 fc		               sta  zpage1+1
.1196	a0 00		               ldy  #0
.1198	a9 73		               lda  #115
.119a	91 fb		               sta  (zpage1),y
.119c	20 6d 21	               jsr  pop
.119f	60		               rts
.11a0			drawgrid
.11a0	20 2e 21	               jsr  push
.11a3	20 e6 1f	               jsr  screendis
.11a6	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.11a8	85 fb		               sta  zpage1
.11aa	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.11ac	85 fc		               sta  zpage1+1
.11ae	a2 08		               ldx  #8
.11b0	a9 65		nextbox        lda  #101
.11b2	a0 09		               ldy  #9
.11b4	91 fb		               sta  (zpage1),y
.11b6	88		               dey
.11b7	a9 2e		               lda  #$2e
.11b9	91 fb		nextcol        sta  (zpage1),y
.11bb	88		               dey
.11bc	d0 fb		               bne  nextcol
.11be	20 0f 12	               jsr  zp1add40
.11c1	ca		               dex
.11c2	d0 ec		               bne  nextbox
.11c4	a0 08		               ldy  #8
.11c6	a9 77		               lda  #119
.11c8	91 fb		nextlin        sta  (zpage1),y
.11ca	88		               dey
.11cb	d0 fb		               bne  nextlin
.11cd	a9 3e		               lda  #$3e
.11cf	8d eb 05	               sta  scrnnewram+(40*(12))+11
.11d2	a9 70		               lda  #$70                     ;+
.11d4	8d c4 05	               sta  scrnnewram+(40*(11))+12
.11d7	a9 43		               lda  #$43                     ;-
.11d9	8d c5 05	               sta  scrnnewram+(40*(11))+13
.11dc	a9 6e		               lda  #$6e                     ;+
.11de	8d c6 05	               sta  scrnnewram+(40*(11))+14
.11e1	a9 5d		               lda  #$5d                     ;|
.11e3	8d ec 05	               sta  scrnnewram+(40*(12))+12
.11e6	a9 5d		               lda  #$5d                     ;|
.11e8	8d ee 05	               sta  scrnnewram+(40*(12))+14
.11eb	a9 6d		               lda  #$6d                     ;+
.11ed	8d 14 06	               sta  scrnnewram+(40*(13))+12
.11f0	a9 43		               lda  #$43                     ;-
.11f2	8d 15 06	               sta  scrnnewram+(40*(13))+13
.11f5	a9 7d		               lda  #$7d                     ;+
.11f7	8d 16 06	               sta  scrnnewram+(40*(13))+14
.11fa	20 f3 1f	               jsr screenena
.11fd	20 6d 21	               jsr  pop
.1200	60		               rts
.1201			zp1addnum
.1201	08		               php
.1202	48		               pha
.1203	18		               clc
.1204	65 fb		               adc  zpage1
.1206	90 02		               bcc  nocarry
.1208	e6 fc		               inc  zpage1+1
.120a	85 fb		nocarry        sta  zpage1
.120c	68		               pla
.120d	28		               plp
.120e	60		               rts
.120f			zp1add40
.120f	08		               php
.1210	48		               pha
.1211	18		               clc
.1212	a5 fb		               lda  zpage1
.1214	69 28		               adc  #40
.1216	90 02		               bcc  nocarry
.1218	e6 fc		               inc  zpage1+1
.121a	85 fb		nocarry        sta  zpage1
.121c	68		               pla
.121d	28		               plp
.121e	60		               rts
.121f			delay
.121f	20 2e 21	               jsr  push
.1222	a9 00		               lda  #$0
.1224	aa		               tax
.1225	a8		               tay
.1226	ca		xagain         dex
.1227	ca		               dex
.1228	88		yagain         dey
.1229	c0 00		               cpy  #$00
.122b	d0 fb		               bne  yagain
.122d	e0 00		               cpx  #$00
.122f	d0 f5		               bne  xagain
.1231	20 6d 21	               jsr  pop
.1234	60		               rts
.1235			f1action
.1235	48		               pha
.1236	a9 ff		               lda  #$ff
.1238	8d 50 09	               sta  editmode
.123b	ad 51 09	               lda  fkeyset
.123e	f0 03		               beq  menua
.1240	4c c8 12	               jmp  menub
.1243			menua
.1243	20 2e 21	               jsr  push
.1246	a2 c2		               ldx  #<blankmsg
.1248	a0 19		               ldy  #>blankmsg
.124a	20 c6 20	               jsr  putscxy
.124d	a2 09		               ldx  #<f1a_msg
.124f	a0 1a		               ldy  #>f1a_msg
.1251	20 c6 20	               jsr  putscxy
.1254	20 6d 21	               jsr  pop
.1257	08		               php
.1258	48		               pha
.1259	8a		               txa
.125a	48		               pha
.125b	ad 36 1e	               lda  f1abutton
.125e	48		               pha
.125f	a9 92		               lda  #146
.1261	8d 48 1e	               sta  f1abutton+18
.1264	a9 01		               lda  #flashcol
.1266	8d 36 1e	               sta  f1abutton
.1269	a2 36		               ldx  #<f1abutton
.126b	a0 1e		               ldy  #>f1abutton
.126d	20 c6 20	               jsr  putscxy
.1270	20 1f 12	               jsr  delay
.1273	a9 12		               lda  #18
.1275	8d 48 1e	               sta  f1abutton+18
.1278	68		               pla
.1279	8d 36 1e	               sta  f1abutton
.127c	a2 36		               ldx  #<f1abutton
.127e	a0 1e		               ldy  #>f1abutton
.1280	20 c6 20	               jsr  putscxy
.1283	68		               pla
.1284	aa		               tax
.1285	68		               pla
.1286	28		               plp
.1287	a9 0b		               lda  #vgris
.1289	20 48 0b	               jsr  setmenuacolor
.128c	a9 03		               lda  #menu1col1
.128e	8d 36 1e	               sta  f1abutton
.1291	20 a5 10	               jsr  drawfkeys
.1294	20 89 0d	               jsr  editor
.1297	20 2e 21	               jsr  push
.129a	a2 c2		               ldx  #<blankmsg
.129c	a0 19		               ldy  #>blankmsg
.129e	20 c6 20	               jsr  putscxy
.12a1	a2 1d		               ldx  #<quit_msg
.12a3	a0 1c		               ldy  #>quit_msg
.12a5	20 c6 20	               jsr  putscxy
.12a8	20 6d 21	               jsr  pop
.12ab	20 2e 21	               jsr  push
.12ae	a2 c2		               ldx  #<blankmsg
.12b0	a0 19		               ldy  #>blankmsg
.12b2	20 c6 20	               jsr  putscxy
.12b5	a2 79		               ldx  #<menua_msg
.12b7	a0 1b		               ldy  #>menua_msg
.12b9	20 c6 20	               jsr  putscxy
.12bc	20 6d 21	               jsr  pop
.12bf	20 02 0b	               jsr  resetmenuacolor
.12c2	20 a5 10	               jsr  drawfkeys
.12c5	4c 12 13	               jmp  out
.12c8			menub
.12c8	20 2e 21	               jsr  push
.12cb	a2 c2		               ldx  #<blankmsg
.12cd	a0 19		               ldy  #>blankmsg
.12cf	20 c6 20	               jsr  putscxy
.12d2	a2 df		               ldx  #<f1b_msg
.12d4	a0 1a		               ldy  #>f1b_msg
.12d6	20 c6 20	               jsr  putscxy
.12d9	20 6d 21	               jsr  pop
.12dc	08		               php
.12dd	48		               pha
.12de	8a		               txa
.12df	48		               pha
.12e0	ad 0e 1f	               lda  f1bbutton
.12e3	48		               pha
.12e4	a9 92		               lda  #146
.12e6	8d 20 1f	               sta  f1bbutton+18
.12e9	a9 01		               lda  #flashcol
.12eb	8d 0e 1f	               sta  f1bbutton
.12ee	a2 0e		               ldx  #<f1bbutton
.12f0	a0 1f		               ldy  #>f1bbutton
.12f2	20 c6 20	               jsr  putscxy
.12f5	20 1f 12	               jsr  delay
.12f8	a9 12		               lda  #18
.12fa	8d 20 1f	               sta  f1bbutton+18
.12fd	68		               pla
.12fe	8d 0e 1f	               sta  f1bbutton
.1301	a2 0e		               ldx  #<f1bbutton
.1303	a0 1f		               ldy  #>f1bbutton
.1305	20 c6 20	               jsr  putscxy
.1308	68		               pla
.1309	aa		               tax
.130a	68		               pla
.130b	28		               plp
.130c	20 8f 19	               jsr  flipvert
.130f	20 3b 0f	               jsr  drawbitmap
.1312	68		out            pla
.1313	20 2e 21	               jsr  push
.1316	a2 c2		               ldx  #<blankmsg
.1318	a0 19		               ldy  #>blankmsg
.131a	20 c6 20	               jsr  putscxy
.131d	a2 ee		               ldx  #<prompt_msg
.131f	a0 19		               ldy  #>prompt_msg
.1321	20 c6 20	               jsr  putscxy
.1324	20 6d 21	               jsr  pop
.1327	60		               rts
.1328			f2action
.1328	48		               pha
.1329	a9 00		               lda  #$0
.132b	8d 50 09	               sta  editmode
.132e	ad 51 09	               lda  fkeyset
.1331	d0 4d		               bne  menub
.1333	20 2e 21	               jsr  push
.1336	a2 c2		               ldx  #<blankmsg
.1338	a0 19		               ldy  #>blankmsg
.133a	20 c6 20	               jsr  putscxy
.133d	a2 24		               ldx  #<f2a_msg
.133f	a0 1a		               ldy  #>f2a_msg
.1341	20 c6 20	               jsr  putscxy
.1344	20 6d 21	               jsr  pop
.1347	08		               php
.1348	48		               pha
.1349	8a		               txa
.134a	48		               pha
.134b	ad 51 1e	               lda  f2abutton
.134e	48		               pha
.134f	a9 92		               lda  #146
.1351	8d 63 1e	               sta  f2abutton+18
.1354	a9 01		               lda  #flashcol
.1356	8d 51 1e	               sta  f2abutton
.1359	a2 51		               ldx  #<f2abutton
.135b	a0 1e		               ldy  #>f2abutton
.135d	20 c6 20	               jsr  putscxy
.1360	20 1f 12	               jsr  delay
.1363	a9 12		               lda  #18
.1365	8d 63 1e	               sta  f2abutton+18
.1368	68		               pla
.1369	8d 51 1e	               sta  f2abutton
.136c	a2 51		               ldx  #<f2abutton
.136e	a0 1e		               ldy  #>f2abutton
.1370	20 c6 20	               jsr  putscxy
.1373	68		               pla
.1374	aa		               tax
.1375	68		               pla
.1376	28		               plp
.1377	20 ea 09	               jsr  copychar
.137a	20 3b 0f	               jsr  drawbitmap
.137d	4c ca 13	               jmp  out
.1380			menub
.1380	20 2e 21	               jsr  push
.1383	a2 c2		               ldx  #<blankmsg
.1385	a0 19		               ldy  #>blankmsg
.1387	20 c6 20	               jsr  putscxy
.138a	a2 f8		               ldx  #<f2b_msg
.138c	a0 1a		               ldy  #>f2b_msg
.138e	20 c6 20	               jsr  putscxy
.1391	20 6d 21	               jsr  pop
.1394	08		               php
.1395	48		               pha
.1396	8a		               txa
.1397	48		               pha
.1398	ad 29 1f	               lda  f2bbutton
.139b	48		               pha
.139c	a9 92		               lda  #146
.139e	8d 3b 1f	               sta  f2bbutton+18
.13a1	a9 01		               lda  #flashcol
.13a3	8d 29 1f	               sta  f2bbutton
.13a6	a2 29		               ldx  #<f2bbutton
.13a8	a0 1f		               ldy  #>f2bbutton
.13aa	20 c6 20	               jsr  putscxy
.13ad	20 1f 12	               jsr  delay
.13b0	a9 12		               lda  #18
.13b2	8d 3b 1f	               sta  f2bbutton+18
.13b5	68		               pla
.13b6	8d 29 1f	               sta  f2bbutton
.13b9	a2 29		               ldx  #<f2bbutton
.13bb	a0 1f		               ldy  #>f2bbutton
.13bd	20 c6 20	               jsr  putscxy
.13c0	68		               pla
.13c1	aa		               tax
.13c2	68		               pla
.13c3	28		               plp
.13c4	20 62 19	               jsr  fliphorz
.13c7	20 3b 0f	               jsr  drawbitmap
.13ca	68		out            pla
.13cb	20 2e 21	               jsr  push
.13ce	a2 c2		               ldx  #<blankmsg
.13d0	a0 19		               ldy  #>blankmsg
.13d2	20 c6 20	               jsr  putscxy
.13d5	a2 ee		               ldx  #<prompt_msg
.13d7	a0 19		               ldy  #>prompt_msg
.13d9	20 c6 20	               jsr  putscxy
.13dc	20 6d 21	               jsr  pop
.13df	60		               rts
.13e0			f3action
.13e0	48		               pha
.13e1	a9 00		               lda  #$0
.13e3	8d 50 09	               sta  editmode
.13e6	ad 51 09	               lda  fkeyset
.13e9	d0 62		               bne  menub
.13eb	08		               php
.13ec	48		               pha
.13ed	8a		               txa
.13ee	48		               pha
.13ef	ad 6c 1e	               lda  f3abutton
.13f2	48		               pha
.13f3	a9 92		               lda  #146
.13f5	8d 7e 1e	               sta  f3abutton+18
.13f8	a9 01		               lda  #flashcol
.13fa	8d 6c 1e	               sta  f3abutton
.13fd	a2 6c		               ldx  #<f3abutton
.13ff	a0 1e		               ldy  #>f3abutton
.1401	20 c6 20	               jsr  putscxy
.1404	20 1f 12	               jsr  delay
.1407	a9 12		               lda  #18
.1409	8d 7e 1e	               sta  f3abutton+18
.140c	68		               pla
.140d	8d 6c 1e	               sta  f3abutton
.1410	a2 6c		               ldx  #<f3abutton
.1412	a0 1e		               ldy  #>f3abutton
.1414	20 c6 20	               jsr  putscxy
.1417	68		               pla
.1418	aa		               tax
.1419	68		               pla
.141a	28		               plp
.141b	20 2e 21	               jsr  push
.141e	a2 c2		               ldx  #<blankmsg
.1420	a0 19		               ldy  #>blankmsg
.1422	20 c6 20	               jsr  putscxy
.1425	a2 41		               ldx  #<f3a_msg
.1427	a0 1a		               ldy  #>f3a_msg
.1429	20 c6 20	               jsr  putscxy
.142c	20 6d 21	               jsr  pop
.142f	20 4e 25	getagain       jsr  getkey
.1432	c9 31		               cmp  #$31
.1434	f0 0b		               beq  devok
.1436	c9 38		               cmp  #$38
.1438	f0 07		               beq  devok
.143a	c9 39		               cmp  #$39
.143c	f0 03		               beq  devok
.143e	4c 2f 14	               jmp  getagain
.1441	8d 70 09	devok          sta  device
.1444	20 78 09	               jsr  getfname
.1447	20 7d 08	               jsr  savetofile
.144a	4c 97 14	               jmp  out
.144d			menub
.144d	20 2e 21	               jsr  push
.1450	a2 c2		               ldx  #<blankmsg
.1452	a0 19		               ldy  #>blankmsg
.1454	20 c6 20	               jsr  putscxy
.1457	a2 13		               ldx  #<f3b_msg
.1459	a0 1b		               ldy  #>f3b_msg
.145b	20 c6 20	               jsr  putscxy
.145e	20 6d 21	               jsr  pop
.1461	08		               php
.1462	48		               pha
.1463	8a		               txa
.1464	48		               pha
.1465	ad 44 1f	               lda  f3bbutton
.1468	48		               pha
.1469	a9 92		               lda  #146
.146b	8d 56 1f	               sta  f3bbutton+18
.146e	a9 01		               lda  #flashcol
.1470	8d 44 1f	               sta  f3bbutton
.1473	a2 44		               ldx  #<f3bbutton
.1475	a0 1f		               ldy  #>f3bbutton
.1477	20 c6 20	               jsr  putscxy
.147a	20 1f 12	               jsr  delay
.147d	a9 12		               lda  #18
.147f	8d 56 1f	               sta  f3bbutton+18
.1482	68		               pla
.1483	8d 44 1f	               sta  f3bbutton
.1486	a2 44		               ldx  #<f3bbutton
.1488	a0 1f		               ldy  #>f3bbutton
.148a	20 c6 20	               jsr  putscxy
.148d	68		               pla
.148e	aa		               tax
.148f	68		               pla
.1490	28		               plp
.1491	20 ed 18	               jsr  scrollright
.1494	20 3b 0f	               jsr  drawbitmap
.1497	68		out            pla
.1498	20 2e 21	               jsr  push
.149b	a2 c2		               ldx  #<blankmsg
.149d	a0 19		               ldy  #>blankmsg
.149f	20 c6 20	               jsr  putscxy
.14a2	a2 ee		               ldx  #<prompt_msg
.14a4	a0 19		               ldy  #>prompt_msg
.14a6	20 c6 20	               jsr  putscxy
.14a9	20 6d 21	               jsr  pop
.14ac	60		               rts
.14ad			f4action
.14ad	48		               pha
.14ae	a9 00		               lda  #$0
.14b0	8d 50 09	               sta  editmode
.14b3	ad 51 09	               lda  fkeyset
.14b6	d0 62		               bne  menub
.14b8	08		               php
.14b9	48		               pha
.14ba	8a		               txa
.14bb	48		               pha
.14bc	ad 87 1e	               lda  f4abutton
.14bf	48		               pha
.14c0	a9 92		               lda  #146
.14c2	8d 99 1e	               sta  f4abutton+18
.14c5	a9 01		               lda  #flashcol
.14c7	8d 87 1e	               sta  f4abutton
.14ca	a2 87		               ldx  #<f4abutton
.14cc	a0 1e		               ldy  #>f4abutton
.14ce	20 c6 20	               jsr  putscxy
.14d1	20 1f 12	               jsr  delay
.14d4	a9 12		               lda  #18
.14d6	8d 99 1e	               sta  f4abutton+18
.14d9	68		               pla
.14da	8d 87 1e	               sta  f4abutton
.14dd	a2 87		               ldx  #<f4abutton
.14df	a0 1e		               ldy  #>f4abutton
.14e1	20 c6 20	               jsr  putscxy
.14e4	68		               pla
.14e5	aa		               tax
.14e6	68		               pla
.14e7	28		               plp
.14e8	20 2e 21	               jsr  push
.14eb	a2 c2		               ldx  #<blankmsg
.14ed	a0 19		               ldy  #>blankmsg
.14ef	20 c6 20	               jsr  putscxy
.14f2	a2 66		               ldx  #<f4a_msg
.14f4	a0 1a		               ldy  #>f4a_msg
.14f6	20 c6 20	               jsr  putscxy
.14f9	20 6d 21	               jsr  pop
.14fc	20 4e 25	getagain       jsr  getkey
.14ff	c9 31		               cmp  #$31
.1501	f0 0b		               beq  devok
.1503	c9 38		               cmp  #$38
.1505	f0 07		               beq  devok
.1507	c9 39		               cmp  #$39
.1509	f0 03		               beq  devok
.150b	4c fc 14	               jmp  getagain
.150e	8d 70 09	devok          sta  device
.1511	20 78 09	               jsr  getfname
.1514	20 c9 08	               jsr  loadfromfile
.1517	4c 64 15	               jmp  out
.151a			menub
.151a	20 2e 21	               jsr  push
.151d	a2 c2		               ldx  #<blankmsg
.151f	a0 19		               ldy  #>blankmsg
.1521	20 c6 20	               jsr  putscxy
.1524	a2 28		               ldx  #<f4b_msg
.1526	a0 1b		               ldy  #>f4b_msg
.1528	20 c6 20	               jsr  putscxy
.152b	20 6d 21	               jsr  pop
.152e	08		               php
.152f	48		               pha
.1530	8a		               txa
.1531	48		               pha
.1532	ad 5f 1f	               lda  f4bbutton
.1535	48		               pha
.1536	a9 92		               lda  #146
.1538	8d 71 1f	               sta  f4bbutton+18
.153b	a9 01		               lda  #flashcol
.153d	8d 5f 1f	               sta  f4bbutton
.1540	a2 5f		               ldx  #<f4bbutton
.1542	a0 1f		               ldy  #>f4bbutton
.1544	20 c6 20	               jsr  putscxy
.1547	20 1f 12	               jsr  delay
.154a	a9 12		               lda  #18
.154c	8d 71 1f	               sta  f4bbutton+18
.154f	68		               pla
.1550	8d 5f 1f	               sta  f4bbutton
.1553	a2 5f		               ldx  #<f4bbutton
.1555	a0 1f		               ldy  #>f4bbutton
.1557	20 c6 20	               jsr  putscxy
.155a	68		               pla
.155b	aa		               tax
.155c	68		               pla
.155d	28		               plp
.155e	20 12 19	               jsr  scrollleft
.1561	20 3b 0f	               jsr  drawbitmap
.1564	68		out            pla
.1565	20 2e 21	               jsr  push
.1568	a2 c2		               ldx  #<blankmsg
.156a	a0 19		               ldy  #>blankmsg
.156c	20 c6 20	               jsr  putscxy
.156f	a2 ee		               ldx  #<prompt_msg
.1571	a0 19		               ldy  #>prompt_msg
.1573	20 c6 20	               jsr  putscxy
.1576	20 6d 21	               jsr  pop
.1579	60		               rts
.157a			f5action
.157a	48		               pha
.157b	a9 00		               lda  #$0
.157d	8d 50 09	               sta  editmode
.1580	ad 51 09	               lda  fkeyset
.1583	d0 4d		               bne  menub
.1585	20 2e 21	               jsr  push
.1588	a2 c2		               ldx  #<blankmsg
.158a	a0 19		               ldy  #>blankmsg
.158c	20 c6 20	               jsr  putscxy
.158f	a2 8d		               ldx  #<f5a_msg
.1591	a0 1a		               ldy  #>f5a_msg
.1593	20 c6 20	               jsr  putscxy
.1596	20 6d 21	               jsr  pop
.1599	08		               php
.159a	48		               pha
.159b	8a		               txa
.159c	48		               pha
.159d	ad a2 1e	               lda  f5abutton
.15a0	48		               pha
.15a1	a9 92		               lda  #146
.15a3	8d b4 1e	               sta  f5abutton+18
.15a6	a9 01		               lda  #flashcol
.15a8	8d a2 1e	               sta  f5abutton
.15ab	a2 a2		               ldx  #<f5abutton
.15ad	a0 1e		               ldy  #>f5abutton
.15af	20 c6 20	               jsr  putscxy
.15b2	20 1f 12	               jsr  delay
.15b5	a9 12		               lda  #18
.15b7	8d b4 1e	               sta  f5abutton+18
.15ba	68		               pla
.15bb	8d a2 1e	               sta  f5abutton
.15be	a2 a2		               ldx  #<f5abutton
.15c0	a0 1e		               ldy  #>f5abutton
.15c2	20 c6 20	               jsr  putscxy
.15c5	68		               pla
.15c6	aa		               tax
.15c7	68		               pla
.15c8	28		               plp
.15c9	20 40 19	               jsr  clearchar
.15cc	20 3b 0f	               jsr  drawbitmap
.15cf	4c 1c 16	               jmp  out
.15d2			menub
.15d2	20 2e 21	               jsr  push
.15d5	a2 c2		               ldx  #<blankmsg
.15d7	a0 19		               ldy  #>blankmsg
.15d9	20 c6 20	               jsr  putscxy
.15dc	a2 3c		               ldx  #<f5b_msg
.15de	a0 1b		               ldy  #>f5b_msg
.15e0	20 c6 20	               jsr  putscxy
.15e3	20 6d 21	               jsr  pop
.15e6	08		               php
.15e7	48		               pha
.15e8	8a		               txa
.15e9	48		               pha
.15ea	ad 7a 1f	               lda  f5bbutton
.15ed	48		               pha
.15ee	a9 92		               lda  #146
.15f0	8d 8c 1f	               sta  f5bbutton+18
.15f3	a9 01		               lda  #flashcol
.15f5	8d 7a 1f	               sta  f5bbutton
.15f8	a2 7a		               ldx  #<f5bbutton
.15fa	a0 1f		               ldy  #>f5bbutton
.15fc	20 c6 20	               jsr  putscxy
.15ff	20 1f 12	               jsr  delay
.1602	a9 12		               lda  #18
.1604	8d 8c 1f	               sta  f5bbutton+18
.1607	68		               pla
.1608	8d 7a 1f	               sta  f5bbutton
.160b	a2 7a		               ldx  #<f5bbutton
.160d	a0 1f		               ldy  #>f5bbutton
.160f	20 c6 20	               jsr  putscxy
.1612	68		               pla
.1613	aa		               tax
.1614	68		               pla
.1615	28		               plp
.1616	20 7b 18	               jsr  scrollup
.1619	20 3b 0f	               jsr  drawbitmap
.161c	68		out            pla
.161d	20 2e 21	               jsr  push
.1620	a2 c2		               ldx  #<blankmsg
.1622	a0 19		               ldy  #>blankmsg
.1624	20 c6 20	               jsr  putscxy
.1627	a2 ee		               ldx  #<prompt_msg
.1629	a0 19		               ldy  #>prompt_msg
.162b	20 c6 20	               jsr  putscxy
.162e	20 6d 21	               jsr  pop
.1631	60		               rts
.1632			f6action
.1632	48		               pha
.1633	a9 00		               lda  #$0
.1635	8d 50 09	               sta  editmode
.1638	ad 51 09	               lda  fkeyset
.163b	d0 4d		               bne  menub
.163d	20 2e 21	               jsr  push
.1640	a2 c2		               ldx  #<blankmsg
.1642	a0 19		               ldy  #>blankmsg
.1644	20 c6 20	               jsr  putscxy
.1647	a2 a7		               ldx  #<f6a_msg
.1649	a0 1a		               ldy  #>f6a_msg
.164b	20 c6 20	               jsr  putscxy
.164e	20 6d 21	               jsr  pop
.1651	08		               php
.1652	48		               pha
.1653	8a		               txa
.1654	48		               pha
.1655	ad bd 1e	               lda  f6abutton
.1658	48		               pha
.1659	a9 92		               lda  #146
.165b	8d cf 1e	               sta  f6abutton+18
.165e	a9 01		               lda  #flashcol
.1660	8d bd 1e	               sta  f6abutton
.1663	a2 bd		               ldx  #<f6abutton
.1665	a0 1e		               ldy  #>f6abutton
.1667	20 c6 20	               jsr  putscxy
.166a	20 1f 12	               jsr  delay
.166d	a9 12		               lda  #18
.166f	8d cf 1e	               sta  f6abutton+18
.1672	68		               pla
.1673	8d bd 1e	               sta  f6abutton
.1676	a2 bd		               ldx  #<f6abutton
.1678	a0 1e		               ldy  #>f6abutton
.167a	20 c6 20	               jsr  putscxy
.167d	68		               pla
.167e	aa		               tax
.167f	68		               pla
.1680	28		               plp
.1681	20 34 19	               jsr  fillchar
.1684	20 3b 0f	               jsr  drawbitmap
.1687	4c d4 16	               jmp  out
.168a			menub
.168a	20 2e 21	               jsr  push
.168d	a2 c2		               ldx  #<blankmsg
.168f	a0 19		               ldy  #>blankmsg
.1691	20 c6 20	               jsr  putscxy
.1694	a2 4e		               ldx  #<f6b_msg
.1696	a0 1b		               ldy  #>f6b_msg
.1698	20 c6 20	               jsr  putscxy
.169b	20 6d 21	               jsr  pop
.169e	08		               php
.169f	48		               pha
.16a0	8a		               txa
.16a1	48		               pha
.16a2	ad 95 1f	               lda  f6bbutton
.16a5	48		               pha
.16a6	a9 92		               lda  #146
.16a8	8d a7 1f	               sta  f6bbutton+18
.16ab	a9 01		               lda  #flashcol
.16ad	8d 95 1f	               sta  f6bbutton
.16b0	a2 95		               ldx  #<f6bbutton
.16b2	a0 1f		               ldy  #>f6bbutton
.16b4	20 c6 20	               jsr  putscxy
.16b7	20 1f 12	               jsr  delay
.16ba	a9 12		               lda  #18
.16bc	8d a7 1f	               sta  f6bbutton+18
.16bf	68		               pla
.16c0	8d 95 1f	               sta  f6bbutton
.16c3	a2 95		               ldx  #<f6bbutton
.16c5	a0 1f		               ldy  #>f6bbutton
.16c7	20 c6 20	               jsr  putscxy
.16ca	68		               pla
.16cb	aa		               tax
.16cc	68		               pla
.16cd	28		               plp
.16ce	20 b3 18	               jsr  scrolldown
.16d1	20 3b 0f	               jsr  drawbitmap
.16d4	68		out            pla
.16d5	20 2e 21	               jsr  push
.16d8	a2 c2		               ldx  #<blankmsg
.16da	a0 19		               ldy  #>blankmsg
.16dc	20 c6 20	               jsr  putscxy
.16df	a2 ee		               ldx  #<prompt_msg
.16e1	a0 19		               ldy  #>prompt_msg
.16e3	20 c6 20	               jsr  putscxy
.16e6	20 6d 21	               jsr  pop
.16e9	60		               rts
.16ea			f7action
.16ea	48		               pha
.16eb	a9 00		               lda  #$0
.16ed	8d 50 09	               sta  editmode
.16f0	ad 51 09	               lda  fkeyset
.16f3	d0 4d		               bne  menub
.16f5	20 2e 21	               jsr  push
.16f8	a2 c2		               ldx  #<blankmsg
.16fa	a0 19		               ldy  #>blankmsg
.16fc	20 c6 20	               jsr  putscxy
.16ff	a2 c1		               ldx  #<f7a_msg
.1701	a0 1a		               ldy  #>f7a_msg
.1703	20 c6 20	               jsr  putscxy
.1706	20 6d 21	               jsr  pop
.1709	08		               php
.170a	48		               pha
.170b	8a		               txa
.170c	48		               pha
.170d	ad d8 1e	               lda  f7abutton
.1710	48		               pha
.1711	a9 92		               lda  #146
.1713	8d ea 1e	               sta  f7abutton+18
.1716	a9 01		               lda  #flashcol
.1718	8d d8 1e	               sta  f7abutton
.171b	a2 d8		               ldx  #<f7abutton
.171d	a0 1e		               ldy  #>f7abutton
.171f	20 c6 20	               jsr  putscxy
.1722	20 1f 12	               jsr  delay
.1725	a9 12		               lda  #18
.1727	8d ea 1e	               sta  f7abutton+18
.172a	68		               pla
.172b	8d d8 1e	               sta  f7abutton
.172e	a2 d8		               ldx  #<f7abutton
.1730	a0 1e		               ldy  #>f7abutton
.1732	20 c6 20	               jsr  putscxy
.1735	68		               pla
.1736	aa		               tax
.1737	68		               pla
.1738	28		               plp
.1739	20 0e 10	               jsr  copycharset
.173c	20 3b 0f	               jsr  drawbitmap
.173f	4c 91 17	               jmp  out
.1742	a9 00		menub          lda  #$0
.1744	8d 50 09	               sta  editmode
.1747	20 2e 21	               jsr  push
.174a	a2 c2		               ldx  #<blankmsg
.174c	a0 19		               ldy  #>blankmsg
.174e	20 c6 20	               jsr  putscxy
.1751	a2 62		               ldx  #<f7b_msg
.1753	a0 1b		               ldy  #>f7b_msg
.1755	20 c6 20	               jsr  putscxy
.1758	20 6d 21	               jsr  pop
.175b	08		               php
.175c	48		               pha
.175d	8a		               txa
.175e	48		               pha
.175f	ad b0 1f	               lda  f7bbutton
.1762	48		               pha
.1763	a9 92		               lda  #146
.1765	8d c2 1f	               sta  f7bbutton+18
.1768	a9 01		               lda  #flashcol
.176a	8d b0 1f	               sta  f7bbutton
.176d	a2 b0		               ldx  #<f7bbutton
.176f	a0 1f		               ldy  #>f7bbutton
.1771	20 c6 20	               jsr  putscxy
.1774	20 1f 12	               jsr  delay
.1777	a9 12		               lda  #18
.1779	8d c2 1f	               sta  f7bbutton+18
.177c	68		               pla
.177d	8d b0 1f	               sta  f7bbutton
.1780	a2 b0		               ldx  #<f7bbutton
.1782	a0 1f		               ldy  #>f7bbutton
.1784	20 c6 20	               jsr  putscxy
.1787	68		               pla
.1788	aa		               tax
.1789	68		               pla
.178a	28		               plp
.178b	20 5b 18	               jsr  reverse
.178e	20 3b 0f	               jsr  drawbitmap
.1791	68		out            pla
.1792	20 2e 21	               jsr  push
.1795	a2 c2		               ldx  #<blankmsg
.1797	a0 19		               ldy  #>blankmsg
.1799	20 c6 20	               jsr  putscxy
.179c	a2 ee		               ldx  #<prompt_msg
.179e	a0 19		               ldy  #>prompt_msg
.17a0	20 c6 20	               jsr  putscxy
.17a3	20 6d 21	               jsr  pop
.17a6	60		               rts
.17a7			f8action
.17a7	48		               pha
.17a8	a9 00		               lda  #$0
.17aa	8d 50 09	               sta  editmode
.17ad	ad 51 09	               lda  fkeyset
.17b0	d0 47		               bne  menub
.17b2	20 2e 21	               jsr  push
.17b5	a2 c2		               ldx  #<blankmsg
.17b7	a0 19		               ldy  #>blankmsg
.17b9	20 c6 20	               jsr  putscxy
.17bc	a2 9c		               ldx  #<menub_msg
.17be	a0 1b		               ldy  #>menub_msg
.17c0	20 c6 20	               jsr  putscxy
.17c3	20 6d 21	               jsr  pop
.17c6	08		               php
.17c7	48		               pha
.17c8	8a		               txa
.17c9	48		               pha
.17ca	ad f3 1e	               lda  f8abutton
.17cd	48		               pha
.17ce	a9 92		               lda  #146
.17d0	8d 05 1f	               sta  f8abutton+18
.17d3	a9 01		               lda  #flashcol
.17d5	8d f3 1e	               sta  f8abutton
.17d8	a2 f3		               ldx  #<f8abutton
.17da	a0 1e		               ldy  #>f8abutton
.17dc	20 c6 20	               jsr  putscxy
.17df	20 1f 12	               jsr  delay
.17e2	a9 12		               lda  #18
.17e4	8d 05 1f	               sta  f8abutton+18
.17e7	68		               pla
.17e8	8d f3 1e	               sta  f8abutton
.17eb	a2 f3		               ldx  #<f8abutton
.17ed	a0 1e		               ldy  #>f8abutton
.17ef	20 c6 20	               jsr  putscxy
.17f2	68		               pla
.17f3	aa		               tax
.17f4	68		               pla
.17f5	28		               plp
.17f6	4c 3d 18	               jmp  swapit
.17f9			menub
.17f9	20 2e 21	               jsr  push
.17fc	a2 c2		               ldx  #<blankmsg
.17fe	a0 19		               ldy  #>blankmsg
.1800	20 c6 20	               jsr  putscxy
.1803	a2 79		               ldx  #<menua_msg
.1805	a0 1b		               ldy  #>menua_msg
.1807	20 c6 20	               jsr  putscxy
.180a	20 6d 21	               jsr  pop
.180d	08		               php
.180e	48		               pha
.180f	8a		               txa
.1810	48		               pha
.1811	ad cb 1f	               lda  f8bbutton
.1814	48		               pha
.1815	a9 92		               lda  #146
.1817	8d dd 1f	               sta  f8bbutton+18
.181a	a9 01		               lda  #flashcol
.181c	8d cb 1f	               sta  f8bbutton
.181f	a2 cb		               ldx  #<f8bbutton
.1821	a0 1f		               ldy  #>f8bbutton
.1823	20 c6 20	               jsr  putscxy
.1826	20 1f 12	               jsr  delay
.1829	a9 12		               lda  #18
.182b	8d dd 1f	               sta  f8bbutton+18
.182e	68		               pla
.182f	8d cb 1f	               sta  f8bbutton
.1832	a2 cb		               ldx  #<f8bbutton
.1834	a0 1f		               ldy  #>f8bbutton
.1836	20 c6 20	               jsr  putscxy
.1839	68		               pla
.183a	aa		               tax
.183b	68		               pla
.183c	28		               plp
.183d	49 ff		swapit         eor  #$ff
.183f	8d 51 09	               sta  fkeyset
.1842	20 a5 10	               jsr  drawfkeys
.1845	68		               pla
.1846	20 2e 21	               jsr  push
.1849	a2 c2		               ldx  #<blankmsg
.184b	a0 19		               ldy  #>blankmsg
.184d	20 c6 20	               jsr  putscxy
.1850	a2 ee		               ldx  #<prompt_msg
.1852	a0 19		               ldy  #>prompt_msg
.1854	20 c6 20	               jsr  putscxy
.1857	20 6d 21	               jsr  pop
.185a	60		               rts
.185b			reverse
.185b	20 2e 21	               jsr  push
.185e	48		               pha
.185f	ad 56 09	               lda  mapaddr
.1862	85 fd		               sta  $fd
.1864	ad 57 09	               lda  mapaddr+1
.1867	85 fe		               sta  $fe
.1869	68		               pla
.186a	a0 00		               ldy  #$00
.186c	b1 fd		again          lda  (zpage2),y
.186e	49 ff		               eor  #$ff
.1870	91 fd		               sta  (zpage2),y
.1872	c8		               iny
.1873	c0 08		               cpy  #$08
.1875	d0 f5		               bne  again
.1877	20 6d 21	               jsr  pop
.187a	60		               rts
.187b			scrollup
.187b	20 2e 21	               jsr  push
.187e	48		               pha
.187f	ad 56 09	               lda  mapaddr
.1882	85 fb		               sta  $fb
.1884	ad 57 09	               lda  mapaddr+1
.1887	85 fc		               sta  $fc
.1889	68		               pla
.188a	48		               pha
.188b	ad 56 09	               lda  mapaddr
.188e	85 fd		               sta  $fd
.1890	ad 57 09	               lda  mapaddr+1
.1893	85 fe		               sta  $fe
.1895	68		               pla
.1896	20 4d 22	               jsr  inczp2
.1899	a0 00		               ldy  #$00
.189b	b1 fb		               lda  (zpage1),y
.189d	8d b2 18	               sta  tmpbyte
.18a0	b1 fd		again          lda  (zpage2),y
.18a2	91 fb		               sta  (zpage1),y
.18a4	c8		               iny
.18a5	c0 07		               cpy  #$07
.18a7	d0 f7		               bne  again
.18a9	ad b2 18	               lda  tmpbyte
.18ac	91 fb		               sta  (zpage1),y
.18ae	20 6d 21	               jsr  pop
.18b1	60		               rts
>18b2	00		tmpbyte        .byte     $00
.18b3			scrolldown
.18b3	20 2e 21	               jsr  push
.18b6	48		               pha
.18b7	ad 56 09	               lda  mapaddr
.18ba	85 fb		               sta  $fb
.18bc	ad 57 09	               lda  mapaddr+1
.18bf	85 fc		               sta  $fc
.18c1	68		               pla
.18c2	48		               pha
.18c3	ad 56 09	               lda  mapaddr
.18c6	85 fd		               sta  $fd
.18c8	ad 57 09	               lda  mapaddr+1
.18cb	85 fe		               sta  $fe
.18cd	68		               pla
.18ce	20 4d 22	               jsr  inczp2
.18d1	a0 07		               ldy  #$07                ;xxxxxxxx zpage1
.18d3	b1 fb		               lda  (zpage1),y          ;xxxxxxxx zpage2
.18d5	8d ec 18	               sta  tmpbyte             ;xxxxxxxx
.18d8	88		again          dey                      ;xxxxxxxx
.18d9	b1 fb		               lda  (zpage1),y          ;xxxxxxxx
.18db	91 fd		               sta  (zpage2),y          ;xxxxxxxx
.18dd	c0 00		               cpy  #$00                ;xxxxxxxx
.18df	d0 f7		               bne  again               ;xxxxxxxx
.18e1	a0 00		               ldy  #$00
.18e3	ad ec 18	               lda  tmpbyte
.18e6	91 fb		               sta  (zpage1),y
.18e8	20 6d 21	               jsr  pop
.18eb	60		               rts
>18ec	00		tmpbyte        .byte     $00
.18ed			scrollright
.18ed	20 2e 21	               jsr  push
.18f0	48		               pha
.18f1	ad 56 09	               lda  mapaddr
.18f4	85 fb		               sta  $fb
.18f6	ad 57 09	               lda  mapaddr+1
.18f9	85 fc		               sta  $fc
.18fb	68		               pla
.18fc	a0 00		               ldy  #$00
.18fe	b1 fb		again          lda  (zpage1),y
.1900	18		               clc
.1901	6a		               ror
.1902	90 03		               bcc  zero
.1904	18		               clc
.1905	69 80		one            adc  #$80
.1907	91 fb		zero           sta  (zpage1),y
.1909	c8		               iny
.190a	c0 08		               cpy  #$08
.190c	d0 f0		               bne  again
.190e	20 6d 21	               jsr  pop
.1911	60		               rts
.1912			scrollleft
.1912	20 2e 21	               jsr  push
.1915	48		               pha
.1916	ad 56 09	               lda  mapaddr
.1919	85 fb		               sta  $fb
.191b	ad 57 09	               lda  mapaddr+1
.191e	85 fc		               sta  $fc
.1920	68		               pla
.1921	a0 00		               ldy  #$00
.1923	b1 fb		again          lda  (zpage1),y
.1925	18		               clc
.1926	2a		               rol
.1927	69 00		               adc  #$00
.1929	91 fb		               sta  (zpage1),y
.192b	c8		               iny
.192c	c0 08		               cpy  #$08
.192e	d0 f3		               bne  again
.1930	20 6d 21	               jsr  pop
.1933	60		               rts
.1934			fillchar
.1934	20 2e 21	               jsr  push
.1937	a9 ff		               lda  #$ff
.1939	20 4c 19	               jsr  allsame
.193c	20 6d 21	               jsr  pop
.193f	60		               rts
.1940			clearchar
.1940	20 2e 21	               jsr  push
.1943	a9 00		               lda  #$00
.1945	20 4c 19	               jsr  allsame
.1948	20 6d 21	               jsr  pop
.194b	60		               rts
.194c			allsame
.194c	48		               pha
.194d	ad 56 09	               lda  mapaddr
.1950	85 fd		               sta  $fd
.1952	ad 57 09	               lda  mapaddr+1
.1955	85 fe		               sta  $fe
.1957	68		               pla
.1958	a0 00		               ldy  #$00
.195a	91 fd		again          sta  (zpage2),y
.195c	c8		               iny
.195d	c0 08		               cpy  #$08
.195f	d0 f9		               bne  again
.1961	60		               rts
.1962			fliphorz
.1962	20 2e 21	               jsr  push
.1965	48		               pha
.1966	ad 56 09	               lda  mapaddr
.1969	85 fd		               sta  $fd
.196b	ad 57 09	               lda  mapaddr+1
.196e	85 fe		               sta  $fe
.1970	68		               pla
.1971	a0 00		               ldy  #$00
.1973	b1 fd		nextbyte       lda  (zpage2),y
.1975	a2 00		               ldx  #$00
.1977	2a		rolagain       rol
.1978	6e 8e 19	               ror  tmpbyte
.197b	e8		               inx
.197c	e0 08		               cpx  #$08
.197e	30 f7		               bmi  rolagain
.1980	ad 8e 19	               lda  tmpbyte
.1983	91 fd		               sta  (zpage2),y
.1985	c8		               iny
.1986	c0 08		               cpy  #$08
.1988	30 e9		               bmi  nextbyte
.198a	20 6d 21	               jsr  pop
.198d	60		               rts
>198e	00		tmpbyte        .byte     $00
.198f			flipvert
.198f	20 2e 21	               jsr  push
.1992	48		               pha
.1993	ad 56 09	               lda  mapaddr
.1996	85 fd		               sta  $fd
.1998	ad 57 09	               lda  mapaddr+1
.199b	85 fe		               sta  $fe
.199d	68		               pla
.199e	a0 00		               ldy  #$00
.19a0	b1 fd		tostack        lda  (zpage2),y
.19a2	48		               pha
.19a3	c8		               iny
.19a4	c0 08		               cpy  #$08
.19a6	d0 f8		               bne  tostack
.19a8	a0 00		               ldy  #$00
.19aa	68		fromstack      pla
.19ab	91 fd		               sta  (zpage2),y
.19ad	c8		               iny
.19ae	c0 08		               cpy  #$08
.19b0	d0 f8		               bne  fromstack
.19b2	20 6d 21	               jsr  pop
.19b5	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: messages_en.asm

>19b6	0a 01 05	editor_msg     .byte vrose,1,5
>19b9	5b 45 44 49	               .null     "[editor]"
>19bd	54 4f 52 5d 00
>19c2	03 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>19c6	20 20 20 20	               .null     "                                       "
>19ca	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>19da	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>19ea	20 20 20 00
>19ee	03 00 05 92	prompt_msg     .byte     mesgcol,0,5,146
>19f2	20 45 4e 54	               .null     " enter f-key command :"
>19f6	45 52 20 46 2d 4b 45 59 20 43 4f 4d 4d 41 4e 44
>1a06	20 3a 00
.1a09			f1a_msg
>1a09	03 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>1a0d	20 45 44 49	               .null     " edit mode: chr$(   )",146
>1a11	54 20 4d 4f 44 45 3a 20 43 48 52 24 28 20 20 20
>1a21	29 92 00
.1a24			f2a_msg
>1a24	03 00 05	copy_msg       .byte     mesgcol,0,5
>1a27	20 45 4e 54	               .null     " enter character to copy:"
>1a2b	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>1a3b	43 4f 50 59 3a 00
.1a41			f3a_msg
>1a41	03 00 05 92	save_msg       .byte     mesgcol,0,5,146
>1a45	20 53 41 56	               .null     " save on witch device? (1/8/9): "
>1a49	45 20 4f 4e 20 57 49 54 43 48 20 44 45 56 49 43
>1a59	45 3f 20 28 31 2f 38 2f 39 29 3a 20 00
.1a66			f4a_msg
>1a66	03 00 05 92	load_msg       .byte     mesgcol,0,5,146
>1a6a	20 4c 4f 41	               .null     " load from witch device? (1/8/9): "
>1a6e	44 20 46 52 4f 4d 20 57 49 54 43 48 20 44 45 56
>1a7e	49 43 45 3f 20 28 31 2f 38 2f 39 29 3a 20 00
.1a8d			f5a_msg
>1a8d	03 00 05	clear_msg      .byte     mesgcol,0,5
>1a90	20 43 4c 45	               .null     " clear char: chr$(   )"
>1a94	41 52 20 43 48 41 52 3a 20 43 48 52 24 28 20 20
>1aa4	20 29 00
.1aa7			f6a_msg
>1aa7	03 00 05	fill_msg       .byte     mesgcol,0,5
>1aaa	20 46 49 4c	               .null     " fill char:  chr$(   )"
>1aae	4c 20 43 48 41 52 3a 20 20 43 48 52 24 28 20 20
>1abe	20 29 00
.1ac1			f7a_msg
>1ac1	03 00 05	work_msg       .byte     mesgcol,0,5
>1ac4	20 52 45 53	               .null     " restoring all characters."
>1ac8	54 4f 52 49 4e 47 20 41 4c 4c 20 43 48 41 52 41
>1ad8	43 54 45 52 53 2e 00
.1adf			f1b_msg
>1adf	03 00 05	invr_msg       .byte     mesgcol,0,5
>1ae2	20 46 4c 49	               .null     " flipping vertically:"
>1ae6	50 50 49 4e 47 20 56 45 52 54 49 43 41 4c 4c 59
>1af6	3a 00
.1af8			f2b_msg
>1af8	03 00 05	flip_msg       .byte     mesgcol,0,5
>1afb	20 46 4c 49	               .null     " flipping horizontally:"
>1aff	50 50 49 4e 47 20 48 4f 52 49 5a 4f 4e 54 41 4c
>1b0f	4c 59 3a 00
.1b13			f3b_msg
>1b13	03 00 05	scrollr_msg    .byte     mesgcol,0,5
>1b16	20 53 43 52	               .null     " scrolling right:"
>1b1a	4f 4c 4c 49 4e 47 20 52 49 47 48 54 3a 00
.1b28			f4b_msg
>1b28	03 00 05	scrolll_msg    .byte     mesgcol,0,5
>1b2b	20 53 43 52	               .null     " scrolling left:"
>1b2f	4f 4c 4c 49 4e 47 20 4c 45 46 54 3a 00
.1b3c			f5b_msg
>1b3c	03 00 05	scrollu_msg    .byte     mesgcol,0,5
>1b3f	20 53 43 52	               .null     " scrolling up:"
>1b43	4f 4c 4c 49 4e 47 20 55 50 3a 00
.1b4e			f6b_msg
>1b4e	03 00 05	scrolld_msg    .byte     mesgcol,0,5
>1b51	20 53 43 52	               .null     " scrolling down:"
>1b55	4f 4c 4c 49 4e 47 20 44 4f 57 4e 3a 00
.1b62			f7b_msg
>1b62	03 00 05	rvrs_msg       .byte     mesgcol,0,5
>1b65	20 52 45 56	               .null     " reverse character:"
>1b69	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
>1b79	03 00 05	menua_msg      .byte     mesgcol,0,5
>1b7c	20 59 4f 55	               .null     " you are being moved to menu 1."
>1b80	20 41 52 45 20 42 45 49 4e 47 20 4d 4f 56 45 44
>1b90	20 54 4f 20 4d 45 4e 55 20 31 2e 00
>1b9c	03 00 05	menub_msg      .byte     mesgcol,0,5
>1b9f	20 59 4f 55	               .null     " you are being moved to menu 2."
>1ba3	20 41 52 45 20 42 45 49 4e 47 20 4d 4f 56 45 44
>1bb3	20 54 4f 20 4d 45 4e 55 20 32 2e 00
>1bbf	07 00 05	copychar_msg   .byte     vjaune,0,5
>1bc2	20 45 4e 54	               .null     " enter character to copy from (?).",157,157,157
>1bc6	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>1bd6	43 4f 50 59 20 46 52 4f 4d 20 28 3f 29 2e 9d 9d
>1be6	9d 00
>1be8	07 00 05	fname_msg      .byte     vjaune,0,5
>1beb	20 45 4e 54	               .null     " enter a 6 letter filename : ",$a4,$a4,$a4,$a4,$a4,$a4,".chr",157,157,157,157,157,157,157,157,157,157
>1bef	45 52 20 41 20 36 20 4c 45 54 54 45 52 20 46 49
>1bff	4c 45 4e 41 4d 45 20 3a 20 a4 a4 a4 a4 a4 a4 2e
>1c0f	43 48 52 9d 9d 9d 9d 9d 9d 9d 9d 9d 9d 00
>1c1d	0e 15 18 12	quit_msg       .byte     vblue1,21,24,18
>1c21	43 54 52 4c	               .text     "ctrl-x",146
>1c25	2d 58 92
>1c28	20 54 4f 20	               .null     " to quit."
>1c2c	51 55 49 54 2e 00
.1c32			menu_msg
>1c32	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>1c36	43 54 52 4c	               .text     "ctrl-x",146
>1c3a	2d 58 92
>1c3d	20 54 4f 20	               .null     " to menu."
>1c41	4d 45 4e 55 2e 00
>1c47	07 04 06 12	whoami0        .byte     whoamicol,4,6,18
>1c4b	20 20 20 20	               .null     "                               ",146
>1c4f	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1c5f	20 20 20 20 20 20 20 20 20 20 20 92 00
>1c6c	07 04 07 12	whoami1        .byte     whoamicol,4,7,18
>1c70	20 20 20 20	               .null     "          ",146," charedit ",18,"           ",146
>1c74	20 20 20 20 20 20 92 20 43 48 41 52 45 44 49 54
>1c84	20 12 20 20 20 20 20 20 20 20 20 20 20 92 00
>1c93	07 04 08 12	whoami2        .byte     whoamicol,4,8,18
>1c97	20 20 20 20	               .null     "                               ",146
>1c9b	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1cab	20 20 20 20 20 20 20 20 20 20 20 92 00
>1cb8	07 04 09 12	whoami3        .byte     whoamicol,4,9,18
>1cbc	20 20 49 4e	               .null     "  inspired from john heilborn  ",146
>1cc0	53 50 49 52 45 44 20 46 52 4f 4d 20 4a 4f 48 4e
>1cd0	20 48 45 49 4c 42 4f 52 4e 20 20 92 00
>1cdd	07 04 0a 12	whoami4        .byte     whoamicol,4,10,18
>1ce1	20 20 20 20	               .null     "      isbn: 0-942386-29-9      ",146
>1ce5	20 20 49 53 42 4e 3a 20 30 2d 39 34 32 33 38 36
>1cf5	2d 32 39 2d 39 20 20 20 20 20 20 92 00
>1d02	07 04 0b 12	whoami5        .byte     whoamicol,4,11,18
>1d06	20 20 20 20	               .null     "                               ",146
>1d0a	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1d1a	20 20 20 20 20 20 20 20 20 20 20 92 00
>1d27	07 04 0c 12	whoami6        .byte     whoamicol,4,12,18
>1d2b	20 43 4f 44	               .null     " coded in assembly language by ",146
>1d2f	45 44 20 49 4e 20 41 53 53 45 4d 42 4c 59 20 4c
>1d3f	41 4e 47 55 41 47 45 20 42 59 20 92 00
>1d4c	07 04 0d 12	whoami7        .byte     whoamicol,4,13,18
>1d50	20 20 20 20	               .null     "     daniel lafrance 2023      ",146
>1d54	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>1d64	20 32 30 32 33 20 20 20 20 20 20 92 00
>1d71	07 04 0e 12	whoami8        .byte     whoamicol,4,14,18
>1d75	20 20 20 20	               .null     "    version:",version,"    ",146
>1d79	56 45 52 53 49 4f 4e 3a 32 30 32 33 31 31 31 36
>1d89	2d 31 30 30 34 30 30 20 20 20 20 92 00
>1d96	07 04 0f 12	whoami9        .byte     whoamicol,4,15,18
>1d9a	20 20 20 20	               .null     "                               ",146
>1d9e	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1dae	20 20 20 20 20 20 20 20 20 20 20 92 00
>1dbb	03 06 10 14	bye_msg        .byte     vcyan,6,16,20
>1dbf	20 54 48 41	               .null     " thanks and have a good day ",146
>1dc3	4e 4b 53 20 41 4e 44 20 48 41 56 45 20 41 20 47
>1dd3	4f 4f 44 20 44 41 59 20 92 00
>1ddd	0d 05 18 12	any_msg        .byte     vvert1,5,24,18
>1de1	20 20 55 53	               .null         "  use the [anykey] to basic  ",146
>1de5	45 20 54 48 45 20 5b 41 4e 59 4b 45 59 5d 20 54
>1df5	4f 20 42 41 53 49 43 20 20 92 00
>1e00	03 12 07	titremenu1     .byte     menu1col1,fkeyleft,f1top-2       ;133
>1e03	12 20 20 20	               .null     18,"   function set #1   ",146
>1e07	46 55 4e 43 54 49 4f 4e 20 53 45 54 20 23 31 20
>1e17	20 20 92 00
>1e1b	0f 12 07	titremenu2     .byte     menu2col1,fkeyleft,f1top-2       ;133
>1e1e	12 20 20 20	               .null     18,"   function set #2   ",146
>1e22	46 55 4e 43 54 49 4f 4e 20 53 45 54 20 23 32 20
>1e32	20 20 92 00
>1e36	03 12 09	f1abutton      .byte     menu1col1,fkeyleft,f1top       ;133
>1e39	45 44 49 54	               .text     "edit character."
>1e3d	20 43 48 41 52 41 43 54 45 52 2e
>1e48	12		               .byte     18             ; position 15
>1e49	a9 20 46 31	               .null     $a9," f1 ",223,146
>1e4d	20 df 92 00
>1e51	0e 12 0a	f2abutton      .byte     menu1col2,fkeyleft,f1top+1     ;138
>1e54	43 4f 50 59	               .text     "copy from......"
>1e58	20 46 52 4f 4d 2e 2e 2e 2e 2e 2e
>1e63	12		               .byte     18   ; position 15
>1e64	20 20 46 32	               .null     "  f2  ",146
>1e68	20 20 92 00
>1e6c	03 12 0c	f3abutton      .byte     menu1col1,fkeyleft,f1top+3     ;137
>1e6f	53 41 56 45	               .text     "save to........"
>1e73	20 54 4f 2e 2e 2e 2e 2e 2e 2e 2e
>1e7e	12		               .byte     18            ; position 15
>1e7f	a9 20 46 33	               .null     $a9," f3 ",223,146
>1e83	20 df 92 00
>1e87	0e 12 0d	f4abutton      .byte     menu1col2,fkeyleft,f1top+4     ;134
>1e8a	4c 4f 41 44	               .text     "load from......"
>1e8e	20 46 52 4f 4d 2e 2e 2e 2e 2e 2e
>1e99	12		               .byte     18             ; position 15
>1e9a	20 20 46 34	               .null     "  f4  ",146
>1e9e	20 20 92 00
>1ea2	03 12 0f	f5abutton      .byte     menu1col1,fkeyleft,f1top+6     ;135
>1ea5	43 4c 45 41	               .text     "clear.........."
>1ea9	52 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e
>1eb4	12		               .byte     18             ; position 15
>1eb5	a9 20 46 35	               .null     $a9," f5 ",223,146
>1eb9	20 df 92 00
>1ebd	0e 12 10	f6abutton      .byte     menu1col2,fkeyleft,f1top+7    ;139
>1ec0	46 49 4c 4c	               .text     "fill..........."
>1ec4	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e
>1ecf	12		               .byte     18             ; position 15
>1ed0	20 20 46 36	               .null     "  f6  ",146
>1ed4	20 20 92 00
>1ed8	03 12 12	f7abutton      .byte     menu1col1,fkeyleft,f1top+9    ;136
>1edb	52 45 53 54	               .text     "restore all...."
>1edf	4f 52 45 20 41 4c 4c 2e 2e 2e 2e
>1eea	12		               .byte     18             ; position 15
>1eeb	a9 20 46 37	               .null     $a9," f7 ",223,146
>1eef	20 df 92 00
>1ef3	0e 12 13	f8abutton      .byte     menu1col2,fkeyleft,f1top+10
>1ef6	47 4f 20 54	               .text     "go to menu #2.."
>1efa	4f 20 4d 45 4e 55 20 23 32 2e 2e
>1f05	12		               .byte     18             ; position 15
>1f06	20 20 46 38	               .null     "  f8  ", 146
>1f0a	20 20 92 00
>1f0e	0f 12 09	f1bbutton      .byte     menu2col1,fkeyleft,f1top
>1f11	56 45 52 54	               .text     "vertical flip.."
>1f15	49 43 41 4c 20 46 4c 49 50 2e 2e
>1f20	12		               .byte     18             ; position 15
>1f21	a9 20 46 31	               .null     $a9," f1 ",223,146
>1f25	20 df 92 00
>1f29	0c 12 0a	f2bbutton      .byte     menu2col2,fkeyleft,f1top+1
>1f2c	48 4f 52 5a	               .text     "horzontal flip."
>1f30	4f 4e 54 41 4c 20 46 4c 49 50 2e
>1f3b	12		               .byte     18             ; position 15
>1f3c	20 20 46 32	               .null     "  f2  ",146
>1f40	20 20 92 00
>1f44	0f 12 0c	f3bbutton      .byte     menu2col1,fkeyleft,f1top+3
>1f47	53 43 52 4f	               .text     "scroll to right"
>1f4b	4c 4c 20 54 4f 20 52 49 47 48 54
>1f56	12		               .byte     18             ; position 15
>1f57	a9 20 46 33	               .null     $a9," f3 ",223,146
>1f5b	20 df 92 00
>1f5f	0c 12 0d	f4bbutton      .byte     menu2col2,fkeyleft,f1top+4
>1f62	53 43 52 4f	               .text     "scroll to left."
>1f66	4c 4c 20 54 4f 20 4c 45 46 54 2e
>1f71	12		               .byte     18             ; position 15
>1f72	20 20 46 34	               .null     "  f4  ",146
>1f76	20 20 92 00
>1f7a	0f 12 0f	f5bbutton      .byte     menu2col1,fkeyleft,f1top+6
>1f7d	53 43 52 4f	               .text     "scroll up......"
>1f81	4c 4c 20 55 50 2e 2e 2e 2e 2e 2e
>1f8c	12		               .byte     18             ; position 15
>1f8d	a9 20 46 35	               .null     $a9," f5 ",223,146
>1f91	20 df 92 00
>1f95	0c 12 10	f6bbutton      .byte     menu2col2,fkeyleft,f1top+7
>1f98	53 43 52 4f	               .text     "scroll down...."
>1f9c	4c 4c 20 44 4f 57 4e 2e 2e 2e 2e
>1fa7	12		               .byte     18             ; position 15
>1fa8	20 20 46 36	               .null     "  f6  ",146
>1fac	20 20 92 00
>1fb0	0f 12 12	f7bbutton      .byte     menu2col1,fkeyleft,f1top+9
>1fb3	52 45 56 45	               .text     "reverse bits..."
>1fb7	52 53 45 20 42 49 54 53 2e 2e 2e
>1fc2	12		               .byte     18             ; position 15
>1fc3	a9 20 46 37	               .null     $a9," f7 ",223,146
>1fc7	20 df 92 00
>1fcb	0c 12 13	f8bbutton      .byte     menu2col2,fkeyleft,f1top+10
>1fce	47 4f 20 54	               .text     "go to menu #1.."
>1fd2	4f 20 4d 45 4e 55 20 23 31 2e 2e
>1fdd	12		               .byte     18             ; position 15
>1fde	20 20 46 38	               .null     "  f8  ", 146
>1fe2	20 20 92 00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.1fe6			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.1fe6			screendis
.1fe6	08		               php
.1fe7	48		               pha
.1fe8	ad 11 d0	               lda  $d011
.1feb	29 ef		               and  #%11101111
.1fed	8d 11 d0	               sta  $d011
.1ff0	68		               pla
.1ff1	28		               plp
.1ff2	60		               rts
.1ff3			screenena
.1ff3	08		               php
.1ff4	48		               pha
.1ff5	ad 11 d0	               lda  $d011
.1ff8	09 10		               ora  #%00010000
.1ffa	8d 11 d0	               sta  $d011
.1ffd	68		               pla
.1ffe	28		               plp
.1fff	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.2000			scrmaninit
.2000	20 2e 21	               jsr  push
.2003	a9 06		               lda  #vbleu
.2005	8d 21 d0	               sta  vicbackcol
.2008	a9 05		               lda  #vvert
.200a	8d 20 d0	               sta  vicbordcol
.200d	a9 01		               lda  #vblanc
.200f	8d 86 02	               sta  bascol
.2012	ad 00 04	               lda  scrnram
.2015	8d 00 04	               sta  scrnram
.2018	20 20 20	               jsr  cls
.201b	20 6d 21	               jsr  pop
.201e	60		               rts
>201f	8e		characterset   .byte b_uppercase
.2020			cls
.2020	08		               php
.2021	48		               pha
.2022	a9 93		               lda  #$93
.2024	20 37 20	               jsr  putch
.2027	68		               pla
.2028	28		               plp
.2029	60		               rts
.202a			putnch
.202a	08		               php
.202b	e0 00		               cpx  #$00
.202d	f0 06		               beq  out
.202f	20 d2 ff	again          jsr  $ffd2
.2032	ca		               dex
.2033	d0 fa		               bne  again
.2035	28		out            plp
.2036	60		               rts
.2037			putch
.2037	08		               php
.2038	20 d2 ff	               jsr  $ffd2
.203b	28		               plp
.203c	60		               rts
.203d			puts
.203d	20 2e 21	               jsr  push
.2040	86 fb		               stx  zpage1
.2042	84 fc		               sty  zpage1+1
.2044	a0 00		               ldy  #0
.2046	b1 fb		next           lda  (zpage1),y
.2048	f0 09		               beq  exit
.204a	20 37 20	               jsr  putch
.204d	20 35 22	               jsr  inczp1
.2050	4c 46 20	               jmp  next
.2053	20 6d 21	exit           jsr  pop
.2056	60		               rts
.2057			gotoxy
.2057	08		               php
.2058	18		               clc
.2059	8a		               txa
.205a	48		               pha
.205b	98		               tya
.205c	aa		               tax
.205d	68		               pla
.205e	a8		               tay
.205f	20 f0 ff	               jsr  kplot
.2062	28		               plp
.2063	60		               rts
.2064			cursor
=$0286			bascol    =    $0286
.2064	08		               php
.2065	48		               pha
.2066	90 12		               bcc  restore
.2068	20 f0 ff	               jsr  kplot
.206b	8c 8c 20	               sty  cx
.206e	8e 8d 20	               stx  cy
.2071	ad 86 02	               lda  bascol
.2074	8d 8e 20	               sta  bcol
.2077	4c 89 20	               jmp  out
.207a	ae 8d 20	restore        ldx  cy
.207d	ac 8c 20	               ldy  cx
.2080	20 f0 ff	               jsr  kplot
.2083	ad 8e 20	               lda  bcol
.2086	8d 86 02	               sta  bascol
.2089	68		out            pla
.208a	28		               plp
.208b	60		               rts
>208c	00		cx   .byte     $00
>208d	00		cy   .byte     $00
>208e	00		bcol .byte     $00
.208f			cursave
.208f	08		               php
.2090	38		               sec
.2091	20 64 20	               jsr  cursor
.2094	28		               plp
.2095	60		               rts
.2096			curput
.2096	08		               php
.2097	18		               clc
.2098	20 64 20	               jsr  cursor
.209b	28		               plp
.209c	60		               rts
.209d			putsxy
.209d	20 2e 21	               jsr  push
.20a0	86 fb		               stx  zpage1
.20a2	84 fc		               sty  zpage1+1
.20a4	a0 00		               ldy  #$00
.20a6	b1 fb		               lda  (zpage1),y
.20a8	aa		               tax
.20a9	20 35 22	               jsr  inczp1
.20ac	b1 fb		               lda  (zpage1),y
.20ae	a8		               tay
.20af	20 57 20	               jsr  gotoxy
.20b2	20 35 22	               jsr  inczp1
.20b5	a6 fb		               ldx  zpage1
.20b7	a4 fc		               ldy  zpage1+1
.20b9	20 3d 20	               jsr  puts
.20bc	20 6d 21	               jsr  pop
.20bf	60		               rts
>20c0	00 00		straddr   .word     $00
>20c2	00		px        .byte     $00
>20c3	00		py        .byte     $00
>20c4	00 00		zp1       .word     $00
.20c6			putscxy
.20c6	20 2e 21	               jsr  push
.20c9	84 fc		               sty  zpage1+1
.20cb	86 fb		               stx  zpage1
.20cd	ad 86 02	               lda  bascol
.20d0	8d f0 20	               sta  bc
.20d3	a0 00		               ldy #$00
.20d5	b1 fb		               lda  (zpage1),y
.20d7	8d 86 02	               sta  bascol
.20da	20 35 22	               jsr  inczp1
.20dd	a6 fb		               ldx  zpage1
.20df	a4 fc		               ldy  zpage1+1
.20e1	20 9d 20	               jsr  putsxy
.20e4	ad f0 20	               lda  bc
.20e7	8d 86 02	               sta  bascol
.20ea	20 6d 21	               jsr  pop
.20ed	60		               rts
>20ee	00 00		straddr  .word      $00
>20f0	00		bc       .byte      $00
>20f1	00 00		zp1      .word      $00
.20f3			putrahex
.20f3	08		               php
.20f4	48		               pha
.20f5	20 4b 23	               jsr  a2hex
.20f8	a9 ea		               lda  #<a2hexstr
.20fa	a0 22		               ldy  #>a2hexstr
.20fc	20 3d 20	               jsr  puts
.20ff	68		               pla
.2100	28		               plp
.2101	60		               rts
.2102			kputrahexxy
.2102			bputrahexxy
.2102			putrahexxy
.2102	08		               php
.2103	20 4b 23	               jsr  a2hex
.2106	a9 e7		               lda  #<a2hexpos
.2108	a0 22		               ldy  #>a2hexpos
.210a	20 9d 20	               jsr  putsxy
.210d	68		               pla
.210e	28		               plp
.210f	60		               rts
.2110			putrahexcxy
.2110	08		               php
.2111	20 4b 23	               jsr  a2hex
.2114	a9 e7		               lda  #<a2hexpos
.2116	a0 22		               ldy  #>a2hexpos
.2118	20 c6 20	               jsr  putscxy
.211b	68		               pla
.211c	28		               plp
.211d	60		               rts
.211e			setinverse
.211e	48		               pha
.211f	a9 12		               lda  #$12
.2121	20 d2 ff	               jsr  $ffd2
.2124	68		               pla
.2125	60		               rts
.2126			clrinverse
.2126	48		               pha
.2127	a9 92		               lda  #$92
.2129	20 d2 ff	               jsr  $ffd2
.212c	68		               pla
.212d	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.212e			push
.212e	08		          php            ; stack : flg, pcl, pch
.212f	78		          sei
.2130	8d 6a 21	          sta  ra        ; save a
.2133	68		          pla            ; stack : pcl, pch
.2134	8d 69 21	          sta  rp        ; save rp
.2137	68		          pla            ; stack : pch
.2138	8d 6b 21	          sta  pc        ; save pcl
.213b	68		          pla            ; stack : -
.213c	8d 6c 21	          sta  pc+1      ; save pch
.213f	a5 fb		          lda  zpage1    ; get zpage1 low byte
.2141	48		          pha            ; stack : zp1l
.2142	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.2144	48		          pha            ; stack : zp1h, zp1l
.2145	a5 fd		          lda  zpage2    ; get zpage2 low byte
.2147	48		          pha            ; stack : zp2l, zp1h, zp1l
.2148	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.214a	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.214b	ad 69 21	          lda  rp        ; get rp
.214e	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.214f	ad 6a 21	          lda  ra        ; get a
.2152	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.2153	8a		          txa            ; get x
.2154	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.2155	98		          tya            ; get y
.2156	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2157	ad 6c 21	          lda  pc+1      ; get pch
.215a	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.215b	ad 6b 21	          lda  pc        ; get pcl
.215e	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.215f	ad 69 21	          lda  rp        ; get rp
.2162	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2163	ad 6a 21	          lda  ra        ; get a
.2166	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2167	58		          cli
.2168	60		          rts
>2169	00		rp        .byte     0
>216a	00		ra        .byte     0
>216b	00 00		pc        .word     0
.216d			pull
.216d			pop
.216d	78		          sei
.216e	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.216f	8d a2 21	          sta  pc        ; save pcl
.2172	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2173	8d a3 21	          sta  pc+1      ; save pch
.2176	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.2177	a8		          tay            ; set y
.2178	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.2179	aa		          tax            ; set x
.217a	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.217b	8d a1 21	          sta  ra        ; save a
.217e	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.217f	8d a0 21	          sta  rp        ; save rp
.2182	68		          pla            ; stack : zp2l, zp1h, zp1l
.2183	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.2185	68		          pla            ; stack : zp1h, zp1l
.2186	85 fd		          sta  zpage2    ; get zpage2 High byte
.2188	68		          pla            ; stack : zp1l
.2189	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.218b	68		          pla            ; stack :
.218c	85 fb		          sta  zpage1    ; get zpage1 High byte
.218e	ad a3 21	          lda  pc+1      ; get pch
.2191	48		          pha            ; stack : pch
.2192	ad a2 21	          lda  pc
.2195	48		          pha            ; stack : pcl, pch
.2196	ad a0 21	          lda  rp        ; get rp
.2199	48		          pha            ; stack : rp, pcl, pch
.219a	ad a1 21	          lda  ra        ; set ra
.219d	58		          cli
.219e	28		          plp            ; stack : pcl, pch
.219f	60		          rts
>21a0	00		rp        .byte     0
>21a1	00		ra        .byte     0
>21a2	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.21a4			blkfill
.21a4	20 2e 21	bf0            jsr  push
.21a7	20 65 22	               jsr  savezp1
.21aa	84 fc		               sty  zpage1+1
.21ac	a0 00		               ldy  #$00
.21ae	84 fb		               sty  zpage1
.21b0	91 fb		bf1            sta  (zpage1),y
.21b2	c8		               iny
.21b3	d0 fb		               bne  bf1
.21b5	20 74 22	               jsr  restzp1
.21b8	20 6d 21	               jsr  pop
.21bb	60		               rts
.21bc			memfill
.21bc	20 2e 21	               jsr  push
.21bf	20 a4 21	mf1            jsr  blkfill
.21c2	c8		               iny
.21c3	ca		               dex
.21c4	d0 f9		               bne  mf1
.21c6	20 6d 21	               jsr  pop
.21c9	60		               rts
.21ca			memmove
.21ca	20 2e 21	               jsr  push
.21cd	ba		               tsx            ; On se crée un pointeur ...
.21ce	8a		               txa
.21cf	18		               clc
.21d0	69 0b		               adc  #11
.21d2	a8		               tay
.21d3	a2 06		               ldx  #$06
.21d5	b9 00 01	nextbyte       lda  $0100,y
.21d8	99 24 22	               sta  words,y
.21db	c8		               iny
.21dc	ca		               dex
.21dd	d0 f6		               bne  nextbyte
.21df	ad 24 22	               lda  s
.21e2	8d fb 21	               sta  source+1
.21e5	ad 25 22	               lda  s+1
.21e8	8d fc 21	               sta  source+2
.21eb	ad 26 22	               lda  d
.21ee	8d f8 21	               sta  destin+1
.21f1	ad 27 22	               lda  d+1
.21f4	8d f9 21	               sta  destin+2
.21f7	ad ff ff	destin         lda  $ffff
.21fa	8d ff ff	source         sta  $ffff
.21fd	ee f8 21	               inc  destin+1
.2200	d0 03		               bne  src
.2202	ee f9 21	               inc  destin+2
.2205	ee fb 21	src            inc  source+1
.2208	d0 03		               bne  cnt
.220a	ee fc 21	               inc  source+2
.220d	ad 28 22	cnt            lda  compte
.2210	d0 08		               bne  decit
.2212	ad 29 22	               lda  compte+1
.2215	f0 09		               beq  fini
.2217	ce 29 22	               dec  compte+1
.221a	ce 28 22	decit          dec  compte
.221d	4c f7 21	               jmp  destin
.2220	20 6d 21	fini           jsr  pop
.2223	60		               rts
.2224			words
>2224	00 00		s         .word     $0000
>2226	00 00		d         .word     $0000
>2228	00 00		compte    .word     $0000
.222a			decword
.222a	20 2e 21	               jsr  push
.222d	86 fd		               stx  zpage2
.222f	84 fe		               sty  zpage2+1
.2231	20 6d 21	               jsr  pop
.2234	60		               rts
.2235			inczp1
.2235	08		               php
.2236	48		               pha
.2237	e6 fb		               inc  zpage1
.2239	a5 fb		               lda  zpage1
.223b	d0 02		               bne  nopage
.223d	e6 fc		               inc  zpage1+1
.223f	68		nopage         pla
.2240	28		               plp
.2241	60		               rts
.2242			deczp1
.2242	08		                php
.2243	48		                pha
.2244	c6 fb		                dec  zpage1
.2246	d0 02		                bne  nopage
.2248	c6 fc		                dec  zpage1+1
.224a	68		nopage          pla
.224b	28		                plp
.224c	60		                rts
.224d			inczp2
.224d	08		               php
.224e	48		               pha
.224f	e6 fd		               inc  zpage2
.2251	a5 fd		               lda  zpage2
.2253	d0 02		               bne  nopage
.2255	e6 fe		               inc  zpage2+1
.2257	68		nopage         pla
.2258	28		               plp
.2259	60		               rts
.225a			deczp2
.225a	08		               php
.225b	48		               pha
.225c	a5 fd		               lda  zpage2
.225e	d0 02		               bne  nopage
.2260	c6 fe		               dec  zpage2+1
.2262	68		nopage         pla
.2263	28		               plp
.2264	60		               rts
.2265			savezp1
.2265	08		               php
.2266	48		               pha
.2267	a5 fb		               lda  zpage1
.2269	8d e1 22	               sta  zp1
.226c	a5 fc		               lda  zpage1+1
.226e	8d e2 22	               sta  zp1+1
.2271	68		               pla
.2272	28		               plp
.2273	60		               rts
.2274			restzp1
.2274	08		               php
.2275	48		               pha
.2276	ad e1 22	               lda zp1
.2279	85 fb		               sta zpage1
.227b	ad e2 22	               lda zp1+1
.227e	85 fc		               sta zpage1+1
.2280	68		               pla
.2281	28		               plp
.2282	60		               rts
.2283			savezp2
.2283	08		         php
.2284	48		         pha
.2285	a5 fd		         lda zpage2
.2287	8d e3 22	         sta zp2
.228a	a5 fe		         lda zpage2+1
.228c	8d e4 22	         sta zp2+1
.228f	68		         pla
.2290	28		         plp
.2291	60		         rts
.2292			restzp2
.2292	08		                php
.2293	48		                pha
.2294	ad e3 22	                lda  zp2
.2297	85 fd		                sta  zpage2
.2299	ad e4 22	                lda  zp2+1
.229c	85 fe		                sta  zpage2+1
.229e	68		                pla
.229f	28		                plp
.22a0	60		                rts
.22a1			xy2addr
.22a1	08		                php
.22a2	48		                pha
.22a3	8a		                txa
.22a4	48		                pha
.22a5	98		                tya
.22a6	48		                pha
.22a7	ad dc 22	                lda     addr1+1
.22aa	8d de 22	                sta     addr2+1
.22ad	ad db 22	                lda     addr1
.22b0	8d dd 22	                sta     addr2
.22b3	c0 00		                cpy     #$00
.22b5	f0 0f		                beq     addx
.22b7	18		moreline        clc
.22b8	6d da 22	                adc     ymult
.22bb	90 03		                bcc     norepy
.22bd	ee de 22	                inc     addr2+1
.22c0	8d dd 22	norepy          sta     addr2
.22c3	88		                dey
.22c4	d0 f1		                bne     moreline
.22c6	8a		addx            txa
.22c7	18		                clc
.22c8	6d dd 22	                adc     addr2
.22cb	90 03		                bcc     thatsit
.22cd	ee de 22	                inc     addr2+1
.22d0	8d dd 22	thatsit         sta     addr2
.22d3	68		                pla
.22d4	a8		                tay
.22d5	68		                pla
.22d6	aa		                tax
.22d7	68		                pla
.22d8	28		                plp
.22d9	60		                rts
>22da	28		ymult          .byte     40
>22db	00 00		addr1          .word     $0000
>22dd	00 00		addr2          .word     $0000
>22df	00 00		bytecnt        .word     $0000
>22e1	00 00		zp1        .word   $0000
>22e3	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>22e5	01		a2hexcol       .byte     1              ; pour aputscxy
>22e6	00		a2hexbkcol     .byte     %00000000
.22e7			a2hexpos
>22e7	00		a2hexpx        .byte     0              ; pour aputsxy
>22e8	00		a2hexpy        .byte     0
>22e9	24		a2hexprefix    .byte     "$"            ; pour aputs
>22ea	00 00		a2hexstr       .word     $00
>22ec	00 00		               .word     $00
>22ee	00		               .byte     0              ; 0 end string
>22ef	30 30 30 30	abin           .null     "00000000"
>22f3	30 30 30 30 00
>22f8	20 20 20 00	adec           .null     "   "
.22fc			putahexfmtxy
.22fc	20 2e 21	               jsr  push
.22ff	20 4b 23	               jsr  a2hex
.2302	ae e7 22	               ldx  a2hexpx
.2305	ac e8 22	               ldy  a2hexpy
.2308	20 57 20	               jsr  gotoxy
.230b	a2 e9		               ldx  #<a2hexprefix
.230d	a0 22		               ldy  #>a2hexprefix
.230f	20 3d 20	               jsr  puts
.2312	20 6d 21	               jsr  pop
.2315	60		               rts
.2316			putahexfmt
.2316	20 2e 21	               jsr  push
.2319	20 4b 23	               jsr  a2hex
.231c	a2 e9		               ldx  #<a2hexprefix
.231e	a0 22		               ldy  #>a2hexprefix
.2320	20 3d 20	               jsr  puts
.2323	20 6d 21	               jsr  pop
.2326	60		               rts
.2327			putahex
.2327	20 2e 21	               jsr  push
.232a	20 4b 23	               jsr  a2hex
.232d	a2 ea		               ldx  #<a2hexstr
.232f	a0 22		               ldy  #>a2hexstr
.2331	20 3d 20	               jsr  puts
.2334	20 6d 21	               jsr  pop
.2337	60		               rts
.2338			nib2hex
.2338	08		               php
.2339	29 0f		               and  #$0f
.233b	f8		               sed
.233c	18		               clc
.233d	69 90		               adc  #$90
.233f	69 40		               adc  #$40
.2341	d8		               cld
.2342	28		               plp
.2343	60		               rts
.2344			lsra4bits
.2344	08		               php
.2345	4a		               lsr
.2346	4a		               lsr
.2347	4a		               lsr
.2348	4a		               lsr
.2349	28		               plp
.234a	60		               rts
.234b			a2hex
.234b	08		               php
.234c	48		               pha
.234d	48		               pha
.234e	20 44 23	               jsr  lsra4bits
.2351	20 38 23	               jsr  nib2hex
.2354	8d ea 22	               sta  a2hexstr
.2357	68		               pla
.2358	20 38 23	               jsr  nib2hex
.235b	8d eb 22	               sta  a2hexstr+1
.235e	a9 00		               lda  #$00                ; set end of string
.2360	8d ec 22	               sta  a2hexstr+2
.2363	68		               pla
.2364	28		               plp
.2365	60		               rts
.2366			xy2hex
.2366	20 2e 21	               jsr  push
.2369	20 4b 23	               jsr  a2hex
.236c	8a		               txa
.236d	48		               pha
.236e	20 44 23	               jsr  lsra4bits
.2371	20 38 23	               jsr  nib2hex
.2374	8d ea 22	               sta  a2hexstr
.2377	68		               pla
.2378	20 38 23	               jsr  nib2hex
.237b	8d eb 22	               sta  a2hexstr+1
.237e	98		               tya
.237f	48		               pha
.2380	20 44 23	               jsr  lsra4bits
.2383	20 38 23	               jsr  nib2hex
.2386	8d ec 22	               sta  a2hexstr+2
.2389	68		               pla
.238a	20 38 23	               jsr  nib2hex
.238d	8d ed 22	               sta  a2hexstr+3
.2390	a9 00		               lda  #$00                ; 0 ended string
.2392	8d ee 22	               sta  a2hexstr+4
.2395	20 6d 21	               jsr  pop
.2398			atobin
.2398	20 2e 21	               jsr  push
.239b	a2 08		               ldx  #8
.239d	a0 00		               ldy  #0
.239f	18		               clc
.23a0	2a		nextbit        rol
.23a1	48		               pha
.23a2	69 00		               adc  #$00
.23a4	29 01		               and  #$01
.23a6	20 38 23	               jsr  nib2hex
.23a9	99 ef 22	               sta  abin,y
.23ac	68		               pla
.23ad	c8		               iny
.23ae	ca		               dex
.23af	d0 ef		               bne  nextbit
.23b1	a9 00		               lda  #0
.23b3	99 ef 22	               sta  abin,y
.23b6	20 6d 21	               jsr  pull
.23b9	60		               rts
.23ba			putabin
.23ba	20 98 23	               jsr     atobin
.23bd	20 2e 21	               jsr     push
.23c0	a2 ef		               ldx     #<abin
.23c2	a0 22		               ldy     #>abin
.23c4	20 3d 20	               jsr     puts
.23c7	20 6d 21	               jsr     pop
.23ca	60		               rts
.23cb			printabin
.23cb	20 2e 21	               jsr     push
.23ce	a2 ef		               ldx     #<abin
.23d0	a0 22		               ldy     #>abin
.23d2	20 3d 20	               jsr     puts
.23d5	20 6d 21	               jsr     pop
.23d8	60		               rts
.23d9			putabinfmt
.23d9	08		               php
.23da	48		               pha
.23db	a9 25		               lda     #"%"
.23dd	20 37 20	               jsr     putch
.23e0	68		               pla
.23e1	20 ba 23	               jsr     putabin
.23e4	28		               plp
.23e5	60		               rts
.23e6			putabinxy
.23e6	20 57 20	               jsr     gotoxy
.23e9	20 ba 23	               jsr     putabin
.23ec	60		               rts
.23ed			putabinfmtxy
.23ed	20 57 20	               jsr     gotoxy
.23f0	20 d9 23	               jsr     putabinfmt
.23f3	60		               rts
.23f4			atodec
.23f4	20 2e 21	               jsr  push
.23f7	f8		               sed
.23f8	aa		               tax
.23f9	a0 00		               ldy  #$00
.23fb	a9 00		               lda  #$00
.23fd	18		nextbit        clc
.23fe	69 01		               adc  #$01
.2400	90 01		               bcc  decx
.2402	c8		               iny
.2403	ca		decx           dex
.2404	d0 f7		               bne  nextbit
.2406	48		               pha
.2407	98		               tya
.2408	20 38 23	               jsr  nib2hex
.240b	8d f8 22	               sta  adec
.240e	68		               pla
.240f	48		               pha
.2410	20 38 23	               jsr  nib2hex
.2413	8d fa 22	               sta  adec+2
.2416	68		               pla
.2417	6a		               ror
.2418	6a		               ror
.2419	6a		               ror
.241a	6a		               ror
.241b	20 38 23	               jsr  nib2hex
.241e	8d f9 22	               sta  adec+1
.2421	d8		               cld
.2422	20 6d 21	               jsr  pull
.2425	60		               rts
>2426	00 00 00	buffer         .byte     0,0,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>2429	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>242d	00 00 00 00 00 00 00 00 00 0d 00 00
>2439	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>243d	00 00 00 00 00 00 00 00 00 00 00 00
>2449	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>244d	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>2459	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>245d	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>2469	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>246d	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>2479	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>247d	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>2489	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>248d	00 00 00 00 00 00 00 00 00 00 00 00
>2499	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>249d	00 00 00 00 00 00 00 00 00 00 00 00
>24a9	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>24ad	00 00 00 00 00 00 00 00 00 00 00 00
>24b9	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>24bd	00 00 00 00 00 00 00 00 00 00 00 00
>24c9	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>24cd	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>24d9	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>24dd	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>24e9	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>24ed	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>24f9	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>24fd	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>2509	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>250d	00 00 00 00 00 00 00 00 00 00 00 00
>2519	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>251d	00 00 00 00 00 00 00 00 00 00 00 00
.2529			waitstop
.2529	20 2e 21	               jsr  push
.252c	20 ed f6	wait           jsr  k_stop
.252f	d0 fb		               bne  wait
.2531	20 6d 21	               jsr  pop
.2534	60		               rts
.2535			anykey
.2535	08		               php
.2536	48		               pha
.2537	a5 cb		nokey          lda 203
.2539	c9 40		               cmp #64
.253b	f0 fa		               beq nokey
.253d	20 43 25	               jsr releasekey
.2540	68		               pla
.2541	28		               plp
.2542	60		               rts
.2543			releasekey
.2543	08		               php
.2544	48		               pha
.2545	a5 cb		keypressed     lda 203
.2547	c9 40		               cmp #64
.2549	d0 fa		               bne keypressed
.254b	68		               pla
.254c	28		               plp
.254d	60		               rts
.254e			getkey
.254e	20 e4 ff	again          jsr  getin
.2551	c9 00		               cmp  #0
.2553	f0 f9		               beq  again
.2555	60		               rts
.2556			waitkey
.2556	20 2e 21	               jsr  push
.2559	8d a7 25	               sta  thekey
.255c	20 e4 ff	nope           jsr  getin
.255f	20 d2 ff	               jsr  chrout
.2562	cd a7 25	               cmp  thekey
.2565	d0 f5		               bne  nope
.2567	20 d2 ff	               jsr  chrout
.256a	20 6d 21	               jsr  pop
.256d	60		               rts
.256e			waitspace
.256e	20 2e 21	               jsr  push
.2571	a9 7f		wait           lda  #$7f  ;%01111111
.2573	8d 00 dc	               sta  $dc00
.2576	ad 01 dc	               lda  $dc01
.2579	29 10		               and  #$10  ;mask %00010000
.257b	d0 f4		               bne  wait
.257d	20 6d 21	               jsr  pop
.2580			waitsstop
.2580	20 2e 21	               jsr  push
.2583	20 ed f6	wait           jsr  k_stop  ;%01111111
.2586	d0 fb		               bne  wait
.2588	20 6d 21	               jsr  pop
.258b			waitreturn
.258b	20 2e 21	               jsr  push
.258e	ad a8 25	               lda  thecount
.2591	8d 00 04	               sta  scrnram
.2594	a9 02		               lda  #$02
.2596	8d 00 d8	               sta  colorram
.2599	20 e4 ff	nope           jsr  getin
.259c	c9 0d		nohex          cmp  #$0d
.259e	d0 f9		               bne  nope
.25a0	ee a8 25	               inc  thecount
.25a3	20 6d 21	               jsr  pop
.25a6	60		               rts
>25a7	00		thekey         .byte   0
>25a8	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-disk.asm

.25a9			diskerror
.25a9	20 2e 21	               jsr  push
.25ac	ad da 26	               lda  dsk_dev   ; Select device 8
.25af	85 ba		               sta  $ba       ;
.25b1	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.25b4	a9 6f		               lda  #$6f
.25b6	85 b9		               sta  $b9       ;
.25b8	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.25bb	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.25be	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.25c1	c9 0d		               cmp  #$0d      ; Is it CR ?
.25c3	d0 f6		               bne  nextchar  ; No, get next char
.25c5	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.25c8	20 6d 21	               jsr  pop
.25cb	60		               rts
.25cc			diskdir
.25cc	20 2e 21	               jsr  push
.25cf	a9 24		               lda  #$24      ; L012C - Filename is "$"
.25d1	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.25d3	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.25d5	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.25d7	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.25d9	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.25db	a9 01		               lda  #$01      ; L0138 - set ...
.25dd	85 b7		               sta  $b7       ; L013A - ... length of current filename
.25df	ad da 26	               lda  dsk_dev   ; L013C - set 8 as ...
.25e2	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.25e4	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.25e6	85 b9		               sta  $b9       ; L0142 - ... secondary address
.25e8	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.25eb	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...%10111010
.25ed	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.25f0	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.25f2	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.25f5	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.25f7	85 90		               sta  $90       ; L0153 - ... kernal status word.
.25f9	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.25fb	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.25fd	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.2600	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.2602	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.2604	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.2606	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.2609	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.260b	d0 28		               bne  exit      ; L0167
.260d	a4 fb		               ldy  $fb       ; L0169
.260f	88		               dey            ; L016b
.2610	d0 e9		               bne  loop1     ; L016C - If not last, loop
.2612	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.2614	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.2617	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.2619	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.261c	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.261f	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.2621	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.2623	aa		               tax            ; L017F - tfr a in x
.2624	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.2626	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.2629	4c 1c 26	               jmp  loop3     ; L0185 - get another byte
.262c	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.262e	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.2631	a0 02		               ldy  #$02      ; L018D - set Y to 2
.2633	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.2635	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.2638	20 6d 21	               jsr  pop
.263b	60		               rts            ; L0194
.263c			directory
.263c	20 cc 25	               jsr  diskdir
.263f	20 a9 25	               jsr  diskerror
.2642	60		               rts
.2643			memtofile
.2643	20 b4 26	               jsr  dsk_putmesg
.2646	20 2e 21	               jsr  push
.2649	ad de 26	               lda  dsk_fnlen
.264c	ae dc 26	               ldx  dsk_fnptr      ; load fname addr. lbyte
.264f	ac dd 26	               ldy  dsk_fnptr+1
.2652	20 bd ff	               jsr  setnam         ; call setnam
.2655	ad db 26	               lda  dsk_lfsno
.2658	ae da 26	               ldx  dsk_dev        ; specified device
.265b	a0 00		skip           ldy  #$00
.265d	20 ba ff	               jsr  setlfs         ; call setlfs
.2660	ad d6 26	               lda  dsk_data_s     ; put data start lbyte in stal
.2663	85 c1		               sta  stal
.2665	ad d7 26	               lda  dsk_data_s+1   ; put data start hbyte in stal
.2668	85 c2		               sta  stal+1
.266a	ae d8 26	               ldx  dsk_data_e     ; put data end lbyte in x
.266d	ac d9 26	               ldy  dsk_data_e+1   ; put data end hbyte in y
.2670	a9 c1		               lda  #stal          ; start address located in $c1/$c2
.2672	20 d8 ff	               jsr  save           ; call save
.2675	90 00		               bcc  noerror        ; if carry set, a load error has happened
.2677	20 6d 21	noerror        jsr  pop
.267a	60		               rts
.267b			filetomem
.267b	20 2e 21	               jsr push
.267e	ad de 26	               lda dsk_fnlen
.2681	ae dc 26	               ldx dsk_fnptr
.2684	ac dd 26	               ldy dsk_fnptr+1
.2687	20 bd ff	               jsr setnam     ; call setnam
.268a	ad db 26	               lda dsk_lfsno
.268d	ae da 26	               ldx dsk_dev    ; default to device 8
.2690	a0 01		               ldy #$01       ; not $01 means: load to address stored in file
.2692	20 ba ff	               jsr setlfs     ; call setlfs
.2695	a9 00		               lda #$00       ; $00 means: load to memory (not verify)
.2697	20 d5 ff	               jsr load       ; call load
.269a	90 03		               bcc noerror      ; if carry set, a load error has happened
.269c	20 a3 26	               jsr  error
.269f	20 6d 21	noerror        jsr pop
.26a2	60		               rts
.26a3			error
.26a3	60		               rts
.26a4	a2 ef		error1         ldx  #<dsk_emsg1
.26a6	a0 26		               ldy  #>dsk_emsg1
.26a8	20 3d 20	               jsr  puts
.26ab	60		               rts
.26ac	a2 03		error2         ldx #<dsk_emsg2
.26ae	a0 27		               ldy #>dsk_emsg2
.26b0	20 3d 20	               jsr puts
.26b3	60		               rts
.26b4			dsk_putmesg
.26b4	20 2e 21	               jsr push
.26b7	a2 df		               ldx #<dsk_msg0
.26b9	a0 26		               ldy #>dsk_msg0
.26bb	20 3d 20	               jsr puts
.26be	a9 20		               lda #$20
.26c0	20 37 20	               jsr putch
.26c3	ae dc 26	               ldx dsk_fnptr
.26c6	ac dd 26	               ldy dsk_fnptr+1
.26c9	20 3d 20	               jsr puts
.26cc	ad db 26	               lda dsk_lfsno
.26cf	20 c3 ff	               jsr close
.26d2	20 6d 21	               jsr pop
.26d5	60		               rts
>26d6	00 00		dsk_data_s     .word     $0000    ; example addresses
>26d8	00 20		dsk_data_e     .word     $2000
>26da	08		dsk_dev        .byte     $08
>26db	00		dsk_lfsno      .byte     $00
>26dc	00 00		dsk_fnptr      .word     $00
>26de	00		dsk_fnlen      .byte     0
>26df	8d		dsk_msg0       .byte     141
>26e0	53 41 56 49	               .null     "saving"
>26e4	4e 47 00
>26e7	8d		dsk_msg1       .byte     141
>26e8	53 55 43 43	               .null     "succes"
>26ec	45 53 00
>26ef	8d		dsk_emsg1      .byte     141
>26f0	46 49 43 48	               .null     "fichier non ouvert"
>26f4	49 45 52 20 4e 4f 4e 20 4f 55 56 45 52 54 00
>2703	11		dsk_emsg2      .byte     17
>2704	45 52 52 45	               .null     "erreur d'ecriture"
>2708	55 52 20 44 27 45 43 52 49 54 55 52 45 00

;******  Return to file: charedit.asm


;******  End of listing

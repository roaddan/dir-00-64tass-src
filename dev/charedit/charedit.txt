
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Fri Nov  3 01:28:30 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

.080d			main
.080d	20 c2 0e	               jsr push
.0810	20 73 0d	               jsr screendis
.0813	20 8d 0d	               jsr scrmaninit
.0816	20 bc 09	               jsr staticscreen
.0819	20 80 0d	               jsr screenena
.081c	8a		               txa
.081d	48		               pha
.081e	98		               tya
.081f	48		               pha
.0820	a2 d6		               ldx #<blankmsg
.0822	a0 0a		               ldy #>blankmsg
.0824	20 5a 0e	               jsr putscxy
.0827	a2 01		               ldx #<edit_msg
.0829	a0 0b		               ldy #>edit_msg
.082b	20 5a 0e	               jsr putscxy
.082e	68		               pla
.082f	a8		               tay
.0830	68		               pla
.0831	aa		               tax
.0832	20 7e 11	               jsr  anykey
.0835	8a		               txa
.0836	48		               pha
.0837	98		               tya
.0838	48		               pha
.0839	a2 d6		               ldx #<blankmsg
.083b	a0 0a		               ldy #>blankmsg
.083d	20 5a 0e	               jsr putscxy
.0840	a2 1c		               ldx #<save_msg
.0842	a0 0b		               ldy #>save_msg
.0844	20 5a 0e	               jsr putscxy
.0847	68		               pla
.0848	a8		               tay
.0849	68		               pla
.084a	aa		               tax
.084b	20 7e 11	               jsr  anykey
.084e	8a		               txa
.084f	48		               pha
.0850	98		               tya
.0851	48		               pha
.0852	a2 d6		               ldx #<blankmsg
.0854	a0 0a		               ldy #>blankmsg
.0856	20 5a 0e	               jsr putscxy
.0859	a2 42		               ldx #<load_msg
.085b	a0 0b		               ldy #>load_msg
.085d	20 5a 0e	               jsr putscxy
.0860	68		               pla
.0861	a8		               tay
.0862	68		               pla
.0863	aa		               tax
.0864	20 7e 11	               jsr  anykey
.0867	8a		               txa
.0868	48		               pha
.0869	98		               tya
.086a	48		               pha
.086b	a2 d6		               ldx #<blankmsg
.086d	a0 0a		               ldy #>blankmsg
.086f	20 5a 0e	               jsr putscxy
.0872	a2 67		               ldx #<copy_msg
.0874	a0 0b		               ldy #>copy_msg
.0876	20 5a 0e	               jsr putscxy
.0879	68		               pla
.087a	a8		               tay
.087b	68		               pla
.087c	aa		               tax
.087d	20 7e 11	               jsr  anykey
.0880	8a		               txa
.0881	48		               pha
.0882	98		               tya
.0883	48		               pha
.0884	a2 d6		               ldx #<blankmsg
.0886	a0 0a		               ldy #>blankmsg
.0888	20 5a 0e	               jsr putscxy
.088b	a2 84		               ldx #<clear_msg
.088d	a0 0b		               ldy #>clear_msg
.088f	20 5a 0e	               jsr putscxy
.0892	68		               pla
.0893	a8		               tay
.0894	68		               pla
.0895	aa		               tax
.0896	20 7e 11	               jsr  anykey
.0899	8a		               txa
.089a	48		               pha
.089b	98		               tya
.089c	48		               pha
.089d	a2 d6		               ldx #<blankmsg
.089f	a0 0a		               ldy #>blankmsg
.08a1	20 5a 0e	               jsr putscxy
.08a4	a2 9e		               ldx #<fill_msg
.08a6	a0 0b		               ldy #>fill_msg
.08a8	20 5a 0e	               jsr putscxy
.08ab	68		               pla
.08ac	a8		               tay
.08ad	68		               pla
.08ae	aa		               tax
.08af	20 7e 11	               jsr  anykey
.08b2	8a		               txa
.08b3	48		               pha
.08b4	98		               tya
.08b5	48		               pha
.08b6	a2 d6		               ldx #<blankmsg
.08b8	a0 0a		               ldy #>blankmsg
.08ba	20 5a 0e	               jsr putscxy
.08bd	a2 b8		               ldx #<work_msg
.08bf	a0 0b		               ldy #>work_msg
.08c1	20 5a 0e	               jsr putscxy
.08c4	68		               pla
.08c5	a8		               tay
.08c6	68		               pla
.08c7	aa		               tax
.08c8	20 7e 11	               jsr  anykey
.08cb	8a		               txa
.08cc	48		               pha
.08cd	98		               tya
.08ce	48		               pha
.08cf	a2 d6		               ldx #<blankmsg
.08d1	a0 0a		               ldy #>blankmsg
.08d3	20 5a 0e	               jsr putscxy
.08d6	a2 ce		               ldx #<rvrs_msg
.08d8	a0 0b		               ldy #>rvrs_msg
.08da	20 5a 0e	               jsr putscxy
.08dd	68		               pla
.08de	a8		               tay
.08df	68		               pla
.08e0	aa		               tax
.08e1	20 7e 11	               jsr  anykey
.08e4	8a		               txa
.08e5	48		               pha
.08e6	98		               tya
.08e7	48		               pha
.08e8	a2 d6		               ldx #<blankmsg
.08ea	a0 0a		               ldy #>blankmsg
.08ec	20 5a 0e	               jsr putscxy
.08ef	a2 e5		               ldx #<invr_msg
.08f1	a0 0b		               ldy #>invr_msg
.08f3	20 5a 0e	               jsr putscxy
.08f6	68		               pla
.08f7	a8		               tay
.08f8	68		               pla
.08f9	aa		               tax
.08fa	20 7e 11	               jsr  anykey
.08fd	8a		               txa
.08fe	48		               pha
.08ff	98		               tya
.0900	48		               pha
.0901	a2 d6		               ldx #<blankmsg
.0903	a0 0a		               ldy #>blankmsg
.0905	20 5a 0e	               jsr putscxy
.0908	a2 fe		               ldx #<flip_msg
.090a	a0 0b		               ldy #>flip_msg
.090c	20 5a 0e	               jsr putscxy
.090f	68		               pla
.0910	a8		               tay
.0911	68		               pla
.0912	aa		               tax
.0913	20 7e 11	               jsr  anykey
.0916	8a		               txa
.0917	48		               pha
.0918	98		               tya
.0919	48		               pha
.091a	a2 d6		               ldx #<blankmsg
.091c	a0 0a		               ldy #>blankmsg
.091e	20 5a 0e	               jsr putscxy
.0921	a2 16		               ldx #<scrollr_msg
.0923	a0 0c		               ldy #>scrollr_msg
.0925	20 5a 0e	               jsr putscxy
.0928	68		               pla
.0929	a8		               tay
.092a	68		               pla
.092b	aa		               tax
.092c	20 7e 11	               jsr  anykey
.092f	8a		               txa
.0930	48		               pha
.0931	98		               tya
.0932	48		               pha
.0933	a2 d6		               ldx #<blankmsg
.0935	a0 0a		               ldy #>blankmsg
.0937	20 5a 0e	               jsr putscxy
.093a	a2 2b		               ldx #<scrolll_msg
.093c	a0 0c		               ldy #>scrolll_msg
.093e	20 5a 0e	               jsr putscxy
.0941	68		               pla
.0942	a8		               tay
.0943	68		               pla
.0944	aa		               tax
.0945	20 7e 11	               jsr  anykey
.0948	8a		               txa
.0949	48		               pha
.094a	98		               tya
.094b	48		               pha
.094c	a2 d6		               ldx #<blankmsg
.094e	a0 0a		               ldy #>blankmsg
.0950	20 5a 0e	               jsr putscxy
.0953	a2 3f		               ldx #<scrollu_msg
.0955	a0 0c		               ldy #>scrollu_msg
.0957	20 5a 0e	               jsr putscxy
.095a	68		               pla
.095b	a8		               tay
.095c	68		               pla
.095d	aa		               tax
.095e	20 7e 11	               jsr  anykey
.0961	8a		               txa
.0962	48		               pha
.0963	98		               tya
.0964	48		               pha
.0965	a2 d6		               ldx #<blankmsg
.0967	a0 0a		               ldy #>blankmsg
.0969	20 5a 0e	               jsr putscxy
.096c	a2 51		               ldx #<scrolld_msg
.096e	a0 0c		               ldy #>scrolld_msg
.0970	20 5a 0e	               jsr putscxy
.0973	68		               pla
.0974	a8		               tay
.0975	68		               pla
.0976	aa		               tax
.0977	20 7e 11	               jsr  anykey
.097a	8a		               txa
.097b	48		               pha
.097c	98		               tya
.097d	48		               pha
.097e	a2 d6		               ldx #<blankmsg
.0980	a0 0a		               ldy #>blankmsg
.0982	20 5a 0e	               jsr putscxy
.0985	a2 65		               ldx #<save_fname_msg
.0987	a0 0c		               ldy #>save_fname_msg
.0989	20 5a 0e	               jsr putscxy
.098c	68		               pla
.098d	a8		               tay
.098e	68		               pla
.098f	aa		               tax
.0990	20 7e 11	               jsr  anykey
.0993	8a		               txa
.0994	48		               pha
.0995	98		               tya
.0996	48		               pha
.0997	a2 d6		               ldx #<blankmsg
.0999	a0 0a		               ldy #>blankmsg
.099b	20 5a 0e	               jsr putscxy
.099e	a2 84		               ldx #<load_fname_msg
.09a0	a0 0c		               ldy #>load_fname_msg
.09a2	20 5a 0e	               jsr putscxy
.09a5	68		               pla
.09a6	a8		               tay
.09a7	68		               pla
.09a8	aa		               tax
.09a9	8a		               txa
.09aa	48		               pha
.09ab	98		               tya
.09ac	48		               pha
.09ad	a2 00		               ldx  #0
.09af	a0 07		               ldy  #7
.09b1	20 eb 0d	               jsr  gotoxy
.09b4	68		               pla
.09b5	a8		               tay
.09b6	68		               pla
.09b7	aa		               tax
.09b8	20 01 0f	               jsr pop
.09bb	60		               rts
.09bc			staticscreen
.09bc	48		               pha
.09bd	a9 04		               lda  #vmauve
.09bf	8d 20 d0	               sta  $d020
.09c2	68		               pla
.09c3	48		               pha
.09c4	a9 0a		               lda  #vrose
.09c6	8d 21 d0	               sta  $d021
.09c9	68		               pla
.09ca	48		               pha
.09cb	a9 8e		               lda  #b_uppercase
.09cd	8d ae 0d	               sta  characterset
.09d0	20 d2 ff	               jsr  $ffd2
.09d3	68		               pla
.09d4	20 50 0a	               jsr  showlines
.09d7	20 2f 0a	               jsr  showallchars
.09da	20 98 0a	               jsr  showgrid
.09dd	20 f0 09	               jsr  showfkeys
.09e0	8a		               txa
.09e1	48		               pha
.09e2	98		               tya
.09e3	48		               pha
.09e4	a2 00		               ldx  #0
.09e6	a0 07		               ldy  #7
.09e8	20 eb 0d	               jsr  gotoxy
.09eb	68		               pla
.09ec	a8		               tay
.09ed	68		               pla
.09ee	aa		               tax
.09ef	60		               rts
.09f0			showfkeys
.09f0	20 c2 0e	               jsr  push
.09f3	a2 a3		                ldx #<f1abutton
.09f5	a0 0c		                ldy #>f1abutton
.09f7	20 5a 0e	                jsr putscxy
.09fa	a2 bd		                ldx #<f2abutton
.09fc	a0 0c		                ldy #>f2abutton
.09fe	20 5a 0e	                jsr putscxy
.0a01	a2 d7		                ldx #<f3abutton
.0a03	a0 0c		                ldy #>f3abutton
.0a05	20 5a 0e	                jsr putscxy
.0a08	a2 f1		                ldx #<f4abutton
.0a0a	a0 0c		                ldy #>f4abutton
.0a0c	20 5a 0e	                jsr putscxy
.0a0f	a2 0b		                ldx #<f5abutton
.0a11	a0 0d		                ldy #>f5abutton
.0a13	20 5a 0e	                jsr putscxy
.0a16	a2 25		                ldx #<f6abutton
.0a18	a0 0d		                ldy #>f6abutton
.0a1a	20 5a 0e	                jsr putscxy
.0a1d	a2 3f		                ldx #<f7abutton
.0a1f	a0 0d		                ldy #>f7abutton
.0a21	20 5a 0e	                jsr putscxy
.0a24	a2 59		                ldx #<f8abutton
.0a26	a0 0d		                ldy #>f8abutton
.0a28	20 5a 0e	                jsr putscxy
.0a2b	20 01 0f	               jsr  pop
.0a2e	60		               rts
.0a2f			showallchars
.0a2f	20 c2 0e	               jsr push
.0a32	8a		               txa
.0a33	48		               pha
.0a34	98		               tya
.0a35	48		               pha
.0a36	a2 00		               ldx  #0
.0a38	a0 00		               ldy  #0
.0a3a	20 eb 0d	               jsr  gotoxy
.0a3d	68		               pla
.0a3e	a8		               tay
.0a3f	68		               pla
.0a40	aa		               tax
.0a41	a2 00		               ldx  #$00
.0a43	8a		nextc          txa
.0a44	9d 00 04	               sta  scrnram,x
.0a47	e8		               inx
.0a48	e0 80		               cpx  #$80
.0a4a	d0 f7		               bne  nextc
.0a4c	20 01 0f	               jsr  pop
.0a4f	60		               rts
.0a50			showlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnram+(6*40)+8
.0a50	20 c2 0e	               jsr  push
.0a53	a2 28		               ldx  #40
.0a55	a9 40		               lda  #64
.0a57	9d 9f 04	nextl          sta  scrnram+(40*hline1)-1,x  ;On imprime les deux grande
.0a5a	9d ef 04	               sta  scrnram+(40*hline2)-1,x  ; lignes horizontales
.0a5d	ca		               dex
.0a5e	e0 10		hline          cpx  #vlinepos
.0a60	10 03		               bpl  notyet
.0a62	9d d0 06	               sta  scrnram+(40*hline3),x    ;On imprime la demiligne horz.
.0a65	e0 00		notyet         cpx  #$00
.0a67	d0 ee		               bne  nextl
.0a69	a9 00		               lda  #<scrnram+(40*(hline2))+vlinepos
.0a6b	85 fb		               sta  zpage1
.0a6d	a9 05		               lda  #>scrnram+(40*(hline2))+vlinepos
.0a6f	85 fc		               sta  zpage1+1
.0a71	a0 00		               ldy  #0
.0a73	a9 72		               lda  #114
.0a75	91 fb		               sta  (zpage1),y
.0a77	20 c6 0a	               jsr  zp1add40
.0a7a	a2 12		               ldx  #24-hline2
.0a7c	a9 5d		               lda  #93
.0a7e	91 fb		another93      sta  (zpage1),y
.0a80	20 c6 0a	               jsr  zp1add40
.0a83	ca		               dex
.0a84	d0 f8		               bne  another93
.0a86	a9 e0		               lda  #<scrnram+(40*(hline3))+vlinepos
.0a88	85 fb		               sta  zpage1
.0a8a	a9 06		               lda  #>scrnram+(40*(hline3))+vlinepos
.0a8c	85 fc		               sta  zpage1+1
.0a8e	a0 00		               ldy  #0
.0a90	a9 73		               lda  #115
.0a92	91 fb		               sta  (zpage1),y
.0a94	20 01 0f	               jsr  pop
.0a97	60		               rts
.0a98			showgrid
=8			gligne=8
=1			gcol=1
.0a98	20 c2 0e	               jsr  push
.0a9b	a9 41		               lda  #<scrnram+(40*(gligne))+gcol
.0a9d	85 fb		               sta  zpage1
.0a9f	a9 05		               lda  #>scrnram+(40*(gligne))+gcol
.0aa1	85 fc		               sta  zpage1+1
.0aa3	a2 08		               ldx  #8
.0aa5	a9 65		nextbox        lda  #101
.0aa7	a0 09		               ldy  #9
.0aa9	91 fb		               sta  (zpage1),y
.0aab	88		               dey
.0aac	a9 4f		               lda  #79
.0aae	91 fb		nextcol        sta  (zpage1),y
.0ab0	88		               dey
.0ab1	d0 fb		               bne  nextcol
.0ab3	20 c6 0a	               jsr  zp1add40
.0ab6	ca		               dex
.0ab7	d0 ec		               bne  nextbox
.0ab9	a0 08		               ldy  #8
.0abb	a9 77		               lda  #119
.0abd	91 fb		nextlin        sta  (zpage1),y
.0abf	88		               dey
.0ac0	d0 fb		               bne  nextlin
.0ac2	20 01 0f	               jsr  pop
.0ac5	60		               rts
.0ac6			zp1add40
.0ac6	08		               php
.0ac7	48		               pha
.0ac8	18		               clc
.0ac9	a5 fb		               lda  zpage1
.0acb	69 28		               adc  #40
.0acd	90 02		               bcc  nocarry
.0acf	e6 fc		               inc  zpage1+1
.0ad1	85 fb		nocarry        sta  zpage1
.0ad3	68		               pla
.0ad4	28		               plp
.0ad5	60		               rts

;******  Processing file: messages.asm

>0ad6	01 00 05 92	blankmsg       .byte     1,0,5,146
>0ada	20 20 20 20	               .null     "                                      "
>0ade	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0aee	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0afe	20 20 00
>0b01	01 00 05 12	edit_msg       .byte     1,0,5,18
>0b05	20 45 4e 54	               .null     " entry mode: chr$(   )"
>0b09	52 59 20 4d 4f 44 45 3a 20 43 48 52 24 28 20 20
>0b19	20 29 00
>0b1c	01 00 05 92	save_msg       .byte     1,0,5,146
>0b20	20 53 41 56	               .null     " save on cassette or disk? (c/d):"
>0b24	45 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>0b34	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
>0b42	01 00 05	load_msg       .byte     1,0,5
>0b45	20 4c 4f 41	               .null     " load on cassette or disk? (c/d):"
>0b49	44 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>0b59	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
>0b67	01 00 05	copy_msg       .byte     1,0,5
>0b6a	20 45 4e 54	               .null     " enter character to copy:"
>0b6e	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>0b7e	43 4f 50 59 3a 00
>0b84	01 00 05	clear_msg      .byte     1,0,5
>0b87	20 43 4c 45	               .null     " clear char: chr$(   )"
>0b8b	41 52 20 43 48 41 52 3a 20 43 48 52 24 28 20 20
>0b9b	20 29 00
>0b9e	01 00 05	fill_msg       .byte     1,0,5
>0ba1	20 46 49 4c	               .null     " fill char:  chr$(   )"
>0ba5	4c 20 43 48 41 52 3a 20 20 43 48 52 24 28 20 20
>0bb5	20 29 00
>0bb8	01 00 05	work_msg       .byte     1,0,5
>0bbb	20 45 4e 41	               .null     " enable work space"
>0bbf	42 4c 45 20 57 4f 52 4b 20 53 50 41 43 45 00
>0bce	01 00 05	rvrs_msg       .byte     1,0,5
>0bd1	20 52 45 56	               .null     " reverse character:"
>0bd5	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
>0be5	01 00 05	invr_msg       .byte     1,0,5
>0be8	20 49 4e 56	               .null     " inverting character:"
>0bec	45 52 54 49 4e 47 20 43 48 41 52 41 43 54 45 52
>0bfc	3a 00
>0bfe	01 00 05	flip_msg       .byte     1,0,5
>0c01	20 46 4c 49	               .null     " flipping character:"
>0c05	50 50 49 4e 47 20 43 48 41 52 41 43 54 45 52 3a
>0c15	00
>0c16	01 00 05	scrollr_msg    .byte     1,0,5
>0c19	20 53 43 52	               .null     " scrolling right:"
>0c1d	4f 4c 4c 49 4e 47 20 52 49 47 48 54 3a 00
>0c2b	01 00 05	scrolll_msg    .byte     1,0,5
>0c2e	20 53 43 52	               .null     " scrolling left:"
>0c32	4f 4c 4c 49 4e 47 20 4c 45 46 54 3a 00
>0c3f	01 00 05	scrollu_msg    .byte     1,0,5
>0c42	20 53 43 52	               .null     " scrolling up:"
>0c46	4f 4c 4c 49 4e 47 20 55 50 3a 00
>0c51	01 00 05	scrolld_msg    .byte     1,0,5
>0c54	20 53 43 52	               .null     " scrolling down:"
>0c58	4f 4c 4c 49 4e 47 20 44 4f 57 4e 3a 00
>0c65	01 00 05	save_fname_msg .byte     1,0,5
>0c68	20 53 41 56	               .null     " save: file name ------.chr"
>0c6c	45 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>0c7c	2d 2d 2d 2e 43 48 52 00
>0c84	01 00 05	load_fname_msg .byte     1,0,5
>0c87	20 4c 4f 41	               .null     " load: file name ------.chr"
>0c8b	44 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>0c9b	2d 2d 2d 2e 43 48 52 00
=18			fkeyleft=18
=8			f1top=8
>0ca3	01 12 08	f1abutton     .byte     1,fkeyleft,f1top
>0ca6	45 44 49 54	               .text     "edit....... "
>0caa	2e 2e 2e 2e 2e 2e 2e 20
>0cb2	12		               .byte     18
>0cb3	20 20 20 46	               .text     "   f1   "
>0cb7	31 20 20 20
>0cbb	92 00		               .byte     146,0
>0cbd	01 12 0a	f2abutton     .byte     1,fkeyleft,f1top+2
>0cc0	53 41 56 45	               .text     "save....... "
>0cc4	2e 2e 2e 2e 2e 2e 2e 20
>0ccc	12		               .byte     18
>0ccd	20 20 20 46	               .text     "   f2   "
>0cd1	32 20 20 20
>0cd5	92 00		               .byte     146,0
>0cd7	01 12 0c	f3abutton     .byte     1,fkeyleft,f1top+4
>0cda	4c 4f 41 44	               .text     "load....... "
>0cde	2e 2e 2e 2e 2e 2e 2e 20
>0ce6	12		               .byte     18
>0ce7	20 20 20 46	               .text     "   f3   "
>0ceb	33 20 20 20
>0cef	92 00		               .byte     146,0
>0cf1	01 12 0e	f4abutton     .byte     1,fkeyleft,f1top+6
>0cf4	43 4f 50 59	               .text     "copy....... "
>0cf8	2e 2e 2e 2e 2e 2e 2e 20
>0d00	12		               .byte     18
>0d01	20 20 20 46	               .text     "   f4   "
>0d05	34 20 20 20
>0d09	92 00		               .byte     146,0
>0d0b	01 12 10	f5abutton     .byte     1,fkeyleft,f1top+8
>0d0e	43 4c 45 41	               .text     "clear...... "
>0d12	52 2e 2e 2e 2e 2e 2e 20
>0d1a	12		               .byte     18
>0d1b	20 20 20 46	               .text     "   f5   "
>0d1f	35 20 20 20
>0d23	92 00		               .byte     146,0
>0d25	01 12 12	f6abutton     .byte     1,fkeyleft,f1top+10
>0d28	46 49 4c 4c	               .text     "fill....... "
>0d2c	2e 2e 2e 2e 2e 2e 2e 20
>0d34	12		               .byte     18
>0d35	20 20 20 46	               .text     "   f6   "
>0d39	36 20 20 20
>0d3d	92 00		               .byte     146,0
>0d3f	01 12 14	f7abutton     .byte     1,fkeyleft,f1top+12
>0d42	57 4f 52 4b	               .text     "work....... "
>0d46	2e 2e 2e 2e 2e 2e 2e 20
>0d4e	12		               .byte     18
>0d4f	20 20 20 46	               .text     "   f7   "
>0d53	37 20 20 20
>0d57	92 00		               .byte     146,0
>0d59	01 12 16	f8abutton     .byte     1,fkeyleft,f1top+14
>0d5c	46 55 4e 43	               .text     "function... "
>0d60	54 49 4f 4e 2e 2e 2e 20
>0d68	12		               .byte     18
>0d69	20 20 20 46	               .text     "   f8   "
>0d6d	38 20 20 20
>0d71	92 00		               .byte     146,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ;  97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c1			stal            =       $c1     ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.0d73			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.0d73			screendis
.0d73	08		               php
.0d74	48		               pha
.0d75	ad 11 d0	               lda  $d011
.0d78	29 ef		               and  #%11101111
.0d7a	8d 11 d0	               sta  $d011
.0d7d	68		               pla
.0d7e	28		               plp
.0d7f	60		               rts
.0d80			screenena
.0d80	08		               php
.0d81	48		               pha
.0d82	ad 11 d0	               lda  $d011
.0d85	09 10		               ora  #%00010000
.0d87	8d 11 d0	               sta  $d011
.0d8a	68		               pla
.0d8b	28		               plp
.0d8c	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0d8d			scrmaninit
.0d8d	20 c2 0e	               jsr  push
.0d90	a9 06		               lda  #vbleu
.0d92	8d 21 d0	               sta  vicbackcol
.0d95	a9 05		               lda  #vvert
.0d97	8d 20 d0	               sta  vicbordcol
.0d9a	a9 01		               lda  #vblanc
.0d9c	8d 86 02	               sta  bascol
.0d9f	ad 00 04	               lda  scrnram
.0da2	29 fd		               and  #%11111101
.0da4	8d 00 04	               sta  scrnram
.0da7	20 af 0d	               jsr  cls
.0daa	20 01 0f	               jsr  pop
.0dad	60		               rts
>0dae	8e		characterset   .byte b_uppercase
.0daf			cls
.0daf	08		               php
.0db0	48		               pha
.0db1	a9 93		               lda  #$93
.0db3	20 cb 0d	               jsr  putch
.0db6	a9 0e		               lda  #$0e
.0db8	20 cb 0d	               jsr  putch
.0dbb	68		               pla
.0dbc	28		               plp
.0dbd	60		               rts
.0dbe			putnch
.0dbe	08		               php
.0dbf	e0 00		               cpx  #$00
.0dc1	f0 06		               beq  out
.0dc3	20 d2 ff	again          jsr  $ffd2
.0dc6	ca		               dex
.0dc7	d0 fa		               bne  again
.0dc9	28		out            plp
.0dca	60		               rts
.0dcb			putch
.0dcb	08		               php
.0dcc	20 d2 ff	               jsr  $ffd2
.0dcf	28		               plp
.0dd0	60		               rts
.0dd1			puts
.0dd1	20 c2 0e	               jsr  push
.0dd4	86 fb		               stx  zpage1
.0dd6	84 fc		               sty  zpage1+1
.0dd8	a0 00		               ldy  #0
.0dda	b1 fb		next           lda  (zpage1),y
.0ddc	f0 09		               beq  exit
.0dde	20 cb 0d	               jsr  putch
.0de1	20 c9 0f	               jsr  inczp1
.0de4	4c da 0d	               jmp  next
.0de7	20 01 0f	exit           jsr  pop
.0dea	60		               rts
.0deb			gotoxy
.0deb	08		               php
.0dec	18		               clc
.0ded	8a		               txa
.0dee	48		               pha
.0def	98		               tya
.0df0	aa		               tax
.0df1	68		               pla
.0df2	a8		               tay
.0df3	20 f0 ff	               jsr  kplot
.0df6	28		               plp
.0df7	60		               rts
.0df8			cursor
=$0286			bascol    =    $0286
.0df8	08		               php
.0df9	48		               pha
.0dfa	90 12		               bcc  restore
.0dfc	20 f0 ff	               jsr  kplot
.0dff	8c 20 0e	               sty  cx
.0e02	8e 21 0e	               stx  cy
.0e05	ad 86 02	               lda  bascol
.0e08	8d 22 0e	               sta  bcol
.0e0b	4c 1d 0e	               jmp  out
.0e0e	ae 21 0e	restore        ldx  cy
.0e11	ac 20 0e	               ldy  cx
.0e14	20 f0 ff	               jsr  kplot
.0e17	ad 22 0e	               lda  bcol
.0e1a	8d 86 02	               sta  bascol
.0e1d	68		out            pla
.0e1e	28		               plp
.0e1f	60		               rts
>0e20	00		cx   .byte     $00
>0e21	00		cy   .byte     $00
>0e22	00		bcol .byte     $00
.0e23			cursave
.0e23	08		               php
.0e24	38		               sec
.0e25	20 f8 0d	               jsr  cursor
.0e28	28		               plp
.0e29	60		               rts
.0e2a			curput
.0e2a	08		               php
.0e2b	18		               clc
.0e2c	20 f8 0d	               jsr  cursor
.0e2f	28		               plp
.0e30	60		               rts
.0e31			putsxy
.0e31	20 c2 0e	               jsr  push
.0e34	86 fb		               stx  zpage1
.0e36	84 fc		               sty  zpage1+1
.0e38	a0 00		               ldy  #$00
.0e3a	b1 fb		               lda  (zpage1),y
.0e3c	aa		               tax
.0e3d	20 c9 0f	               jsr  inczp1
.0e40	b1 fb		               lda  (zpage1),y
.0e42	a8		               tay
.0e43	20 eb 0d	               jsr  gotoxy
.0e46	20 c9 0f	               jsr  inczp1
.0e49	a6 fb		               ldx  zpage1
.0e4b	a4 fc		               ldy  zpage1+1
.0e4d	20 d1 0d	               jsr  puts
.0e50	20 01 0f	               jsr  pop
.0e53	60		               rts
>0e54	00 00		straddr   .word     $00
>0e56	00		px        .byte     $00
>0e57	00		py        .byte     $00
>0e58	00 00		zp1       .word     $00
.0e5a			putscxy
.0e5a	20 c2 0e	               jsr  push
.0e5d	84 fc		               sty  zpage1+1
.0e5f	86 fb		               stx  zpage1
.0e61	ad 86 02	               lda  bascol
.0e64	8d 84 0e	               sta  bc
.0e67	a0 00		               ldy #$00
.0e69	b1 fb		               lda  (zpage1),y
.0e6b	8d 86 02	               sta  bascol
.0e6e	20 c9 0f	               jsr  inczp1
.0e71	a6 fb		               ldx  zpage1
.0e73	a4 fc		               ldy  zpage1+1
.0e75	20 31 0e	               jsr  putsxy
.0e78	ad 84 0e	               lda  bc
.0e7b	8d 86 02	               sta  bascol
.0e7e	20 01 0f	               jsr  pop
.0e81	60		               rts
>0e82	00 00		straddr  .word      $00
>0e84	00		bc       .byte      $00
>0e85	00 00		zp1      .word      $00
.0e87			putrahex
.0e87	08		               php
.0e88	48		               pha
.0e89	20 cf 10	               jsr  a2hex
.0e8c	a9 7b		               lda  #<a2hexstr
.0e8e	a0 10		               ldy  #>a2hexstr
.0e90	20 d1 0d	               jsr  puts
.0e93	68		               pla
.0e94	28		               plp
.0e95	60		               rts
.0e96			kputrahexxy
.0e96			bputrahexxy
.0e96			putrahexxy
.0e96	08		               php
.0e97	20 cf 10	               jsr  a2hex
.0e9a	a9 78		               lda  #<a2hexpos
.0e9c	a0 10		               ldy  #>a2hexpos
.0e9e	20 31 0e	               jsr  putsxy
.0ea1	68		               pla
.0ea2	28		               plp
.0ea3	60		               rts
.0ea4			putrahexcxy
.0ea4	08		               php
.0ea5	20 cf 10	               jsr  a2hex
.0ea8	a9 78		               lda  #<a2hexpos
.0eaa	a0 10		               ldy  #>a2hexpos
.0eac	20 5a 0e	               jsr  putscxy
.0eaf	68		               pla
.0eb0	28		               plp
.0eb1	60		               rts
.0eb2			setinverse
.0eb2	48		               pha
.0eb3	a9 12		               lda  #$12
.0eb5	20 d2 ff	               jsr  $ffd2
.0eb8	68		               pla
.0eb9	60		               rts
.0eba			clrinverse
.0eba	48		               pha
.0ebb	a9 92		               lda  #$92
.0ebd	20 d2 ff	               jsr  $ffd2
.0ec0	68		               pla
.0ec1	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.0ec2			push
.0ec2	08		          php            ; stack : flg, pcl, pch
.0ec3	78		          sei
.0ec4	8d fe 0e	          sta  ra        ; save a
.0ec7	68		          pla            ; stack : pcl, pch
.0ec8	8d fd 0e	          sta  rp        ; save rp
.0ecb	68		          pla            ; stack : pch
.0ecc	8d ff 0e	          sta  pc        ; save pcl
.0ecf	68		          pla            ; stack : -
.0ed0	8d 00 0f	          sta  pc+1      ; save pch
.0ed3	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0ed5	48		          pha            ; stack : zp1l
.0ed6	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0ed8	48		          pha            ; stack : zp1h, zp1l
.0ed9	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0edb	48		          pha            ; stack : zp2l, zp1h, zp1l
.0edc	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0ede	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0edf	ad fd 0e	          lda  rp        ; get rp
.0ee2	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0ee3	ad fe 0e	          lda  ra        ; get a
.0ee6	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0ee7	8a		          txa            ; get x
.0ee8	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ee9	98		          tya            ; get y
.0eea	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0eeb	ad 00 0f	          lda  pc+1      ; get pch
.0eee	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0eef	ad ff 0e	          lda  pc        ; get pcl
.0ef2	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ef3	ad fd 0e	          lda  rp        ; get rp
.0ef6	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ef7	ad fe 0e	          lda  ra        ; get a
.0efa	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0efb	58		          cli
.0efc	60		          rts
>0efd	00		rp        .byte     0
>0efe	00		ra        .byte     0
>0eff	00 00		pc        .word     0
.0f01			pull
.0f01			pop
.0f01	78		          sei
.0f02	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f03	8d 36 0f	          sta  pc        ; save pcl
.0f06	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f07	8d 37 0f	          sta  pc+1      ; save pch
.0f0a	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f0b	a8		          tay            ; set y
.0f0c	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0f0d	aa		          tax            ; set x
.0f0e	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0f0f	8d 35 0f	          sta  ra        ; save a
.0f12	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0f13	8d 34 0f	          sta  rp        ; save rp
.0f16	68		          pla            ; stack : zp2l, zp1h, zp1l
.0f17	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0f19	68		          pla            ; stack : zp1h, zp1l
.0f1a	85 fd		          sta  zpage2    ; get zpage2 High byte
.0f1c	68		          pla            ; stack : zp1l
.0f1d	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0f1f	68		          pla            ; stack :
.0f20	85 fb		          sta  zpage1    ; get zpage1 High byte
.0f22	ad 37 0f	          lda  pc+1      ; get pch
.0f25	48		          pha            ; stack : pch
.0f26	ad 36 0f	          lda  pc
.0f29	48		          pha            ; stack : pcl, pch
.0f2a	ad 34 0f	          lda  rp        ; get rp
.0f2d	48		          pha            ; stack : rp, pcl, pch
.0f2e	ad 35 0f	          lda  ra        ; set ra
.0f31	58		          cli
.0f32	28		          plp            ; stack : pcl, pch
.0f33	60		          rts
>0f34	00		rp        .byte     0
>0f35	00		ra        .byte     0
>0f36	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.0f38			blkfill
.0f38	20 c2 0e	bf0            jsr  push
.0f3b	20 f6 0f	               jsr  savezp1
.0f3e	84 fc		               sty  zpage1+1
.0f40	a0 00		               ldy  #$00
.0f42	84 fb		               sty  zpage1
.0f44	91 fb		bf1            sta  (zpage1),y
.0f46	c8		               iny
.0f47	d0 fb		               bne  bf1
.0f49	20 05 10	               jsr  restzp1
.0f4c	20 01 0f	               jsr  pop
.0f4f	60		               rts
.0f50			memfill
.0f50	20 c2 0e	               jsr  push
.0f53	20 38 0f	mf1            jsr  blkfill
.0f56	c8		               iny
.0f57	ca		               dex
.0f58	d0 f9		               bne  mf1
.0f5a	20 01 0f	               jsr  pop
.0f5d	60		               rts
.0f5e			memmove
.0f5e	20 c2 0e	               jsr  push
.0f61	ba		               tsx            ; On se crée un pointeur ...
.0f62	8a		               txa
.0f63	18		               clc
.0f64	69 0b		               adc  #11
.0f66	a8		               tay
.0f67	a2 06		               ldx  #$06
.0f69	b9 00 01	nextbyte       lda  $0100,y
.0f6c	99 b8 0f	               sta  words,y
.0f6f	c8		               iny
.0f70	ca		               dex
.0f71	d0 f6		               bne  nextbyte
.0f73	ad b8 0f	               lda  s
.0f76	8d 8f 0f	               sta  source+1
.0f79	ad b9 0f	               lda  s+1
.0f7c	8d 90 0f	               sta  source+2
.0f7f	ad ba 0f	               lda  d
.0f82	8d 8c 0f	               sta  destin+1
.0f85	ad bb 0f	               lda  d+1
.0f88	8d 8d 0f	               sta  destin+2
.0f8b	ad ff ff	destin         lda  $ffff
.0f8e	8d ff ff	source         sta  $ffff
.0f91	ee 8c 0f	               inc  destin+1
.0f94	d0 03		               bne  src
.0f96	ee 8d 0f	               inc  destin+2
.0f99	ee 8f 0f	src            inc  source+1
.0f9c	d0 03		               bne  cnt
.0f9e	ee 90 0f	               inc  source+2
.0fa1	ad bc 0f	cnt            lda  compte
.0fa4	d0 08		               bne  decit
.0fa6	ad bd 0f	               lda  compte+1
.0fa9	f0 09		               beq  fini
.0fab	ce bd 0f	               dec  compte+1
.0fae	ce bc 0f	decit          dec  compte
.0fb1	4c 8b 0f	               jmp  destin
.0fb4	20 01 0f	fini           jsr  pop
.0fb7	60		               rts
.0fb8			words
>0fb8	00 00		s         .word     $0000
>0fba	00 00		d         .word     $0000
>0fbc	00 00		compte    .word     $0000
.0fbe			decword
.0fbe	20 c2 0e	               jsr  push
.0fc1	86 fd		               stx  zpage2
.0fc3	84 fe		               sty  zpage2+1
.0fc5	20 01 0f	               jsr  pop
.0fc8	60		               rts
.0fc9			inczp1
.0fc9	08		               php
.0fca	e6 fb		               inc  zpage1
.0fcc	d0 02		               bne  nopage
.0fce	e6 fc		               inc  zpage1+1
.0fd0	28		nopage         plp
.0fd1	60		               rts
.0fd2			deczp1
.0fd2	08		                php
.0fd3	48		                pha
.0fd4	c6 fb		                dec  zpage1
.0fd6	d0 02		                bne  nopage
.0fd8	c6 fc		                dec  zpage1+1
.0fda	c6 fb		nopage          dec  zpage1
.0fdc	68		                pla
.0fdd	28		                plp
.0fde	60		                rts
.0fdf			inczp2
.0fdf	08		               php
.0fe0	48		               pha
.0fe1	e6 fd		               inc  zpage2
.0fe3	d0 02		               bne  nopage
.0fe5	e6 fe		               inc  zpage2+1
.0fe7	68		nopage         pla
.0fe8	28		               plp
.0fe9	60		               rts
.0fea			deczp2
.0fea	08		               php
.0feb	48		               pha
.0fec	a5 fd		               lda  zpage2
.0fee	d0 02		               bne  nopage
.0ff0	c6 fe		               dec  zpage2+1
.0ff2	c6 fd		nopage         dec  zpage2
.0ff4	28		               plp
.0ff5	60		               rts
.0ff6			savezp1
.0ff6	08		               php
.0ff7	48		               pha
.0ff8	a5 fb		               lda  zpage1
.0ffa	8d 72 10	               sta  zp1
.0ffd	a5 fc		               lda  zpage1+1
.0fff	8d 73 10	               sta  zp1+1
.1002	68		               pla
.1003	28		               plp
.1004	60		               rts
.1005			restzp1
.1005	08		               php
.1006	48		               pha
.1007	ad 72 10	               lda zp1
.100a	85 fb		               sta zpage1
.100c	ad 73 10	               lda zp1+1
.100f	85 fc		               sta zpage1+1
.1011	68		               pla
.1012	28		               plp
.1013	60		               rts
.1014			savezp2
.1014	08		         php
.1015	48		         pha
.1016	a5 fd		         lda zpage2
.1018	8d 74 10	         sta zp2
.101b	a5 fe		         lda zpage2+1
.101d	8d 75 10	         sta zp2+1
.1020	68		         pla
.1021	28		         plp
.1022	60		         rts
.1023			restzp2
.1023	08		                php
.1024	48		                pha
.1025	ad 74 10	                lda  zp2
.1028	85 fd		                sta  zpage2
.102a	ad 75 10	                lda  zp2+1
.102d	85 fe		                sta  zpage2+1
.102f	68		                pla
.1030	28		                plp
.1031	60		                rts
.1032			xy2addr
.1032	08		                php
.1033	48		                pha
.1034	8a		                txa
.1035	48		                pha
.1036	98		                tya
.1037	48		                pha
.1038	ad 6d 10	                lda     addr1+1
.103b	8d 6f 10	                sta     addr2+1
.103e	ad 6c 10	                lda     addr1
.1041	8d 6e 10	                sta     addr2
.1044	c0 00		                cpy     #$00
.1046	f0 0f		                beq     addx
.1048	18		moreline        clc
.1049	6d 6b 10	                adc     ymult
.104c	90 03		                bcc     norepy
.104e	ee 6f 10	                inc     addr2+1
.1051	8d 6e 10	norepy          sta     addr2
.1054	88		                dey
.1055	d0 f1		                bne     moreline
.1057	8a		addx            txa
.1058	18		                clc
.1059	6d 6e 10	                adc     addr2
.105c	90 03		                bcc     thatsit
.105e	ee 6f 10	                inc     addr2+1
.1061	8d 6e 10	thatsit         sta     addr2
.1064	68		                pla
.1065	a8		                tay
.1066	68		                pla
.1067	aa		                tax
.1068	68		                pla
.1069	28		                plp
.106a	60		                rts
>106b	28		ymult          .byte     40
>106c	00 00		addr1          .word     $0000
>106e	00 00		addr2          .word     $0000
>1070	00 00		bytecnt        .word     $0000
>1072	00 00		zp1        .word   $0000
>1074	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>1076	01		a2hexcol       .byte     1              ; pour aputscxy
>1077	00		a2hexbkcol     .byte     %00000000
.1078			a2hexpos
>1078	00		a2hexpx        .byte     0              ; pour aputsxy
>1079	00		a2hexpy        .byte     0
>107a	24		a2hexprefix    .byte     "$"            ; pour aputs
>107b	00 00		a2hexstr       .word     $00
>107d	00 00		               .word     $00
>107f	00		               .byte     0              ; 0 end string
.1080			putahexfmtxy
.1080	20 c2 0e	               jsr  push
.1083	20 cf 10	               jsr  a2hex
.1086	ae 78 10	               ldx  a2hexpx
.1089	ac 79 10	               ldy  a2hexpy
.108c	20 eb 0d	               jsr  gotoxy
.108f	a2 7a		               ldx  #<a2hexprefix
.1091	a0 10		               ldy  #>a2hexprefix
.1093	20 d1 0d	               jsr  puts
.1096	20 01 0f	               jsr  pop
.1099	60		               rts
.109a			putahexfmt
.109a	20 c2 0e	               jsr  push
.109d	20 cf 10	               jsr  a2hex
.10a0	a2 7a		               ldx  #<a2hexprefix
.10a2	a0 10		               ldy  #>a2hexprefix
.10a4	20 d1 0d	               jsr  puts
.10a7	20 01 0f	               jsr  pop
.10aa	60		               rts
.10ab			putahex
.10ab	20 c2 0e	               jsr  push
.10ae	20 cf 10	               jsr  a2hex
.10b1	a2 7b		               ldx  #<a2hexstr
.10b3	a0 10		               ldy  #>a2hexstr
.10b5	20 d1 0d	               jsr  puts
.10b8	20 01 0f	               jsr  pop
.10bb	60		               rts
.10bc			nib2hex
.10bc	08		               php
.10bd	29 0f		               and  #$0f
.10bf	f8		               sed
.10c0	18		               clc
.10c1	69 90		               adc  #$90
.10c3	69 40		               adc  #$40
.10c5	d8		               cld
.10c6	28		               plp
.10c7	60		               rts
.10c8			lsra4bits
.10c8	08		               php
.10c9	4a		               lsr
.10ca	4a		               lsr
.10cb	4a		               lsr
.10cc	4a		               lsr
.10cd	28		               plp
.10ce	60		               rts
.10cf			a2hex
.10cf	08		               php
.10d0	48		               pha
.10d1	48		               pha
.10d2	20 c8 10	               jsr  lsra4bits
.10d5	20 bc 10	               jsr  nib2hex
.10d8	8d 7b 10	               sta  a2hexstr
.10db	68		               pla
.10dc	20 bc 10	               jsr  nib2hex
.10df	8d 7c 10	               sta  a2hexstr+1
.10e2	a9 00		               lda  #$00                ; set end of string
.10e4	8d 7d 10	               sta  a2hexstr+2
.10e7	68		               pla
.10e8	28		               plp
.10e9	60		               rts
.10ea			xy2hex
.10ea	20 c2 0e	               jsr  push
.10ed	20 cf 10	               jsr  a2hex
.10f0	8a		               txa
.10f1	48		               pha
.10f2	20 c8 10	               jsr  lsra4bits
.10f5	20 bc 10	               jsr  nib2hex
.10f8	8d 7b 10	               sta  a2hexstr
.10fb	68		               pla
.10fc	20 bc 10	               jsr  nib2hex
.10ff	8d 7c 10	               sta  a2hexstr+1
.1102	98		               tya
.1103	48		               pha
.1104	20 c8 10	               jsr  lsra4bits
.1107	20 bc 10	               jsr  nib2hex
.110a	8d 7d 10	               sta  a2hexstr+2
.110d	68		               pla
.110e	20 bc 10	               jsr  nib2hex
.1111	8d 7e 10	               sta  a2hexstr+3
.1114	a9 00		               lda  #$00                ; 0 ended string
.1116	8d 7f 10	               sta  a2hexstr+4
.1119	20 01 0f	               jsr  pop
.111c			atobin
.111c	20 c2 0e	               jsr     push
.111f	a2 08		               ldx     #8
.1121	a0 00		               ldy     #0
.1123	2a		nextbit        rol
.1124	48		               pha
.1125	69 00		               adc     #$00
.1127	29 01		               and     #$01
.1129	20 bc 10	               jsr     nib2hex
.112c	99 3d 11	               sta     abin,y
.112f	68		               pla
.1130	c8		               iny
.1131	ca		               dex
.1132	d0 ef		               bne     nextbit
.1134	a9 00		               lda     #0
.1136	99 3d 11	               sta     abin,y
.1139	20 01 0f	               jsr     pull
.113c	60		               rts
>113d	30 30 30 30	abin           .null   "00000000"
>1141	30 30 30 30 00
.1146			putabin
.1146	20 1c 11	               jsr     atobin
.1149	20 c2 0e	               jsr     push
.114c	a2 3d		               ldx     #<abin
.114e	a0 11		               ldy     #>abin
.1150	20 d1 0d	               jsr     puts
.1153	20 01 0f	               jsr     pop
.1156	60		               rts
.1157			putabinfmt
.1157	08		               php
.1158	48		               pha
.1159	a9 25		               lda     #"%"
.115b	20 cb 0d	               jsr     putch
.115e	68		               pla
.115f	20 46 11	               jsr     putabin
.1162	28		               plp
.1163	60		               rts
.1164			putabinxy
.1164	20 eb 0d	               jsr     gotoxy
.1167	20 46 11	               jsr     putabin
.116a	60		               rts
.116b			putabinfmtxy
.116b	20 eb 0d	               jsr     gotoxy
.116e	20 57 11	               jsr     putabinfmt
.1171	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

.1172			waitstop
.1172	20 c2 0e	                jsr     push
.1175	20 ed f6	wait            jsr     k_stop
.1178	d0 fb		                bne     wait
.117a	20 01 0f	                jsr     pop
.117d	60		                rts
.117e			anykey
.117e	08		                php
.117f	48		                pha
.1180	a5 cb		nokey           lda 203
.1182	c9 40		                cmp #64
.1184	f0 fa		                beq nokey
.1186	20 8c 11	                jsr releasekey
.1189	68		                pla
.118a	28		                plp
.118b	60		                rts
.118c			releasekey
.118c	08		                php
.118d	48		                pha
.118e	a5 cb		keypressed      lda 203
.1190	c9 40		                cmp #64
.1192	d0 fa		                bne keypressed
.1194	68		                pla
.1195	28		                plp
.1196	60		                rts
.1197			getkey
.1197	20 cf ff	again           jsr     chrin
.119a	d0 fb		                bne     again
.119c	60		                rts
.119d			waitkey
.119d	20 c2 0e	                jsr     push
.11a0	8d b5 11	                sta     thekey
.11a3	20 e4 ff	nope            jsr     getin
.11a6	20 d2 ff	                jsr     chrout
.11a9	cd b5 11	                cmp     thekey
.11ac	d0 f5		                bne     nope
.11ae	20 d2 ff	                jsr     chrout
.11b1	20 01 0f	                jsr     pop
.11b4	60		                rts
>11b5	00		thekey          .byte   0
.11b6			waitspace
.11b6	20 c2 0e	                jsr     push
.11b9	a9 7f		wait            lda     #$7f  ;%01111111
.11bb	8d 00 dc	                sta     $dc00
.11be	ad 01 dc	                lda     $dc01
.11c1	29 10		                and     #$10  ;mask %00010000
.11c3	d0 f4		                bne     wait
.11c5	20 01 0f	                jsr     pop
.11c8			waitsstop
.11c8	20 c2 0e	                jsr     push
.11cb	20 ed f6	wait            jsr     k_stop  ;%01111111
.11ce	d0 fb		                bne     wait
.11d0	20 01 0f	                jsr     pop
.11d3			waitreturn
.11d3	20 c2 0e	                jsr     push
.11d6	ad f2 11	                lda     thecount
.11d9	8d 00 04	                sta     scrnram
.11dc	a9 02		                lda     #$02
.11de	8d 00 d8	                sta     colorram
.11e1	20 e4 ff	nope            jsr     getin
.11e4	20 d2 ff	                jsr     chrout
.11e7	c9 0d		                cmp     #$0d
.11e9	d0 f6		                bne     nope
.11eb	ee f2 11	                inc     thecount
.11ee	20 01 0f	                jsr     pop
.11f1	60		                rts
>11f2	01		thecount        .byte   $01

;******  Return to file: charedit.asm


;******  End of listing

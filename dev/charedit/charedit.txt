
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Mon Nov 13 23:11:01 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm

="20231113-164208"	version  = "20231113-164208"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

=$0400			scrnnewram     =    $0400
=14			charsdef       =    14
=9			grid_top       =    9
=1			grid_left      =    1
=16			grid_bot       =    grid_top + 7
=8			grid_right     =    grid_left + 7
=$03			mesgcol        =    vcyan
=$0d			menu1col       =    vvert1
=$0a			menu2col       =    vrose
=$01			flashcol       =    vblanc
.080d			main
.080d	20 2a 1d	               jsr  push
.0810	20 dd 1b	               jsr  screendis
.0813	20 f7 1b	               jsr  scrmaninit
.0816	20 c7 0d	               jsr  copycharset
.0819	20 b1 0d	               jsr  setscreenptr
.081c	20 f1 08	               jsr  setdefaultchar
.081f	20 28 0e	               jsr  staticscreen
.0822	a9 00		               lda  #$00
.0824	8d de 08	               sta  fkeyset
.0827	20 64 0e	               jsr  showfkeys
.082a	20 7d 14	               jsr  f8action
.082d	20 7d 14	               jsr  f8action
.0830	a9 00		               lda  #$00
.0832	20 ea 1b	               jsr  screenena
.0835	20 bc 0a	               jsr  keyaction
.0838	20 2a 1d	               jsr  push
.083b	a2 00		               ldx  #0
.083d	a0 00		               ldy  #0
.083f	20 53 1c	               jsr  gotoxy
.0842	20 69 1d	               jsr  pop
.0845	20 17 1c	               jsr  cls
.0848	a2 01		               ldx #<bye_msg
.084a	a0 1a		               ldy #>bye_msg
.084c	20 c2 1c	               jsr putscxy
.084f	a2 23		               ldx #<any_msg
.0851	a0 1a		               ldy #>any_msg
.0853	20 c2 1c	               jsr putscxy
.0856	a2 99		               ldx #<whoami0
.0858	a0 18		               ldy #>whoami0
.085a	20 c2 1c	               jsr putscxy
.085d	a2 bd		               ldx #<whoami1
.085f	a0 18		               ldy #>whoami1
.0861	20 c2 1c	               jsr putscxy
.0864	a2 e1		               ldx #<whoami2
.0866	a0 18		               ldy #>whoami2
.0868	20 c2 1c	               jsr putscxy
.086b	a2 05		               ldx #<whoami3
.086d	a0 19		               ldy #>whoami3
.086f	20 c2 1c	               jsr putscxy
.0872	a2 29		               ldx #<whoami4
.0874	a0 19		               ldy #>whoami4
.0876	20 c2 1c	               jsr putscxy
.0879	a2 4d		               ldx #<whoami5
.087b	a0 19		               ldy #>whoami5
.087d	20 c2 1c	               jsr putscxy
.0880	a2 71		               ldx #<whoami6
.0882	a0 19		               ldy #>whoami6
.0884	20 c2 1c	               jsr putscxy
.0887	a2 95		               ldx #<whoami7
.0889	a0 19		               ldy #>whoami7
.088b	20 c2 1c	               jsr putscxy
.088e	a2 b9		               ldx #<whoami8
.0890	a0 19		               ldy #>whoami8
.0892	20 c2 1c	               jsr putscxy
.0895	a2 dd		               ldx #<whoami9
.0897	a0 19		               ldy #>whoami9
.0899	20 c2 1c	               jsr putscxy
.089c	20 2a 1d	               jsr  push
.089f	a2 00		               ldx  #0
.08a1	a0 00		               ldy  #0
.08a3	20 53 1c	               jsr  gotoxy
.08a6	20 69 1d	               jsr  pop
.08a9	20 4a 21	               jsr  getkey
.08ac	20 69 1d	               jsr  pop
.08af	60		               rts
.08b0			scrollright
.08b0	20 2a 1d	               jsr  push
.08b3	48		               pha
.08b4	ad e2 08	               lda  mapaddr
.08b7	85 fb		               sta  $fb
.08b9	ad e3 08	               lda  mapaddr+1
.08bc	85 fc		               sta  $fc
.08be	68		               pla
.08bf	a0 00		               ldy  #$00
.08c1	b1 fb		again          lda  (zpage1),y
.08c3	18		               clc
.08c4	6a		               ror
.08c5	90 03		               bcc  zero
.08c7	18		               clc
.08c8	69 80		one            adc  #$80
.08ca	91 fb		zero           sta  (zpage1),y
.08cc	c8		               iny
.08cd	c0 08		               cpy  #$08
.08cf	d0 f0		               bne  again
.08d1	20 69 1d	               jsr  pop
.08d4	60		               rts
>08d5	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>08d9	08 04 02 01
>08dd	00		editmode       .byte     0
>08de	00		fkeyset        .byte     0
>08df	00		currentchar    .byte     0
>08e0	00		currentkey     .byte     0
>08e1	00		bitmapoffset   .byte     0
>08e2	00 00		mapaddr        .word     0
>08e4	00 00		byteaddr       .word     0
>08e6	00 00		gridaddr       .word     0
>08e8	09		cursln         .byte     grid_top
>08e9	01		curscl         .byte     grid_left

;******  Processing file: routines.asm

.08ea			template
.08ea	20 2a 1d	               jsr  push
.08ed	20 69 1d	               jsr  pop
.08f0	60		               rts
.08f1			setdefaultchar
.08f1	20 2a 1d	               jsr  push
.08f4	a9 40		               lda  #$40
.08f6	8d e0 08	               sta  currentkey
.08f9	aa		               tax
.08fa	bc 25 20	               ldy  asciitorom,x
.08fd	8c e1 08	               sty  bitmapoffset
.0900	20 75 09	               jsr  showkeyval
.0903	20 16 0d	               jsr  drawbitmap
.0906	20 2a 1d	               jsr  push
.0909	a2 0d		               ldx  #13
.090b	a0 0c		               ldy  #12
.090d	20 53 1c	               jsr  gotoxy
.0910	20 69 1d	               jsr  pop
.0913	20 33 1c	               jsr  putch
.0916	20 2a 1d	               jsr  push
.0919	a2 11		               ldx  #17
.091b	a0 05		               ldy  #5
.091d	20 53 1c	               jsr  gotoxy
.0920	20 69 1d	               jsr  pop
.0923	20 f0 1f	               jsr  atodec
.0926	20 2a 1d	               jsr  push
.0929	a2 f4		isx            ldx  #<adec
.092b	a0 1e		isy            ldy  #>adec
.092d	20 39 1c	               jsr  puts
.0930	20 69 1d	               jsr  pull
.0933	20 69 1d	               jsr  pop
.0936	60		               rts
.0937			setmenuacolor
.0937	20 2a 1d	               jsr  push
.093a	8d 3d 1a	               sta  f1abutton
.093d	8d 57 1a	               sta  f2abutton
.0940	8d 71 1a	               sta  f3abutton
.0943	8d 8b 1a	               sta  f4abutton
.0946	8d a5 1a	               sta  f5abutton
.0949	8d bf 1a	               sta  f6abutton
.094c	8d d9 1a	               sta  f7abutton
.094f	8d f3 1a	               sta  f8abutton
.0952	20 69 1d	               jsr  pop
.0955	60		               rts
.0956			setmenubcolor
.0956	20 2a 1d	               jsr  push
.0959	8d 0d 1b	               sta  f1bbutton
.095c	8d 27 1b	               sta  f2bbutton
.095f	8d 41 1b	               sta  f3bbutton
.0962	8d 5b 1b	               sta  f4bbutton
.0965	8d 75 1b	               sta  f5bbutton
.0968	8d 8f 1b	               sta  f6bbutton
.096b	8d a9 1b	               sta  f7bbutton
.096e	8d c3 1b	               sta  f8bbutton
.0971	20 69 1d	               jsr  pop
.0974	60		               rts
.0975			showkeyval
.0975	20 2a 1d	               jsr  push
.0978	20 2a 1d	               jsr  push
.097b	a2 01		               ldx  #1
.097d	a0 13		               ldy  #19
.097f	20 53 1c	               jsr  gotoxy
.0982	20 69 1d	               jsr  pop
.0985	ad e0 08	               lda  currentkey
.0988	20 33 1c	               jsr  putch
.098b	48		               pha
.098c	a9 3d		               lda  #'='
.098e	20 33 1c	               jsr  putch
.0991	a9 25		               lda  #'%'
.0993	20 33 1c	               jsr  putch
.0996	68		               pla
.0997	20 b6 1f	               jsr  putabin
.099a	20 2a 1d	               jsr  push
.099d	a2 01		               ldx  #1
.099f	a0 14		               ldy  #20
.09a1	20 53 1c	               jsr  gotoxy
.09a4	20 69 1d	               jsr  pop
.09a7	20 2a 1d	               jsr  push
.09aa	a2 76		isx            ldx  #<txt1
.09ac	a0 0a		isy            ldy  #>txt1
.09ae	20 39 1c	               jsr  puts
.09b1	20 69 1d	               jsr  pull
.09b4	a9 24		               lda  #'$'
.09b6	20 33 1c	               jsr  putch
.09b9	ad e0 08	               lda  currentkey
.09bc	20 23 1f	               jsr  putahex
.09bf	20 2a 1d	               jsr  push
.09c2	a2 01		               ldx  #1
.09c4	a0 15		               ldy  #21
.09c6	20 53 1c	               jsr  gotoxy
.09c9	20 69 1d	               jsr  pop
.09cc	20 2a 1d	               jsr  push
.09cf	a2 81		isx            ldx  #<txt2
.09d1	a0 0a		isy            ldy  #>txt2
.09d3	20 39 1c	               jsr  puts
.09d6	20 69 1d	               jsr  pull
.09d9	a9 24		               lda  #'$'
.09db	20 33 1c	               jsr  putch
.09de	ad 27 0e	               lda  bitmapaddr+1
.09e1	20 23 1f	               jsr  putahex
.09e4	ad 26 0e	               lda  bitmapaddr
.09e7	20 23 1f	               jsr  putahex
.09ea	20 2a 1d	               jsr  push
.09ed	a2 01		               ldx  #1
.09ef	a0 16		               ldy  #22
.09f1	20 53 1c	               jsr  gotoxy
.09f4	20 69 1d	               jsr  pop
.09f7	20 2a 1d	               jsr  push
.09fa	a2 8c		isx            ldx  #<txt3
.09fc	a0 0a		isy            ldy  #>txt3
.09fe	20 39 1c	               jsr  puts
.0a01	20 69 1d	               jsr  pull
.0a04	a9 24		               lda  #'$'
.0a06	20 33 1c	               jsr  putch
.0a09	ad e1 08	               lda  bitmapoffset
.0a0c	20 23 1f	               jsr  putahex
.0a0f	20 2a 1d	               jsr  push
.0a12	a2 01		               ldx  #1
.0a14	a0 17		               ldy  #23
.0a16	20 53 1c	               jsr  gotoxy
.0a19	20 69 1d	               jsr  pop
.0a1c	20 2a 1d	               jsr  push
.0a1f	a2 99		isx            ldx  #<txt4
.0a21	a0 0a		isy            ldy  #>txt4
.0a23	20 39 1c	               jsr  puts
.0a26	20 69 1d	               jsr  pull
.0a29	a9 24		               lda  #'$'
.0a2b	20 33 1c	               jsr  putch
.0a2e	ad e3 08	               lda  mapaddr+1
.0a31	20 23 1f	               jsr  putahex
.0a34	ad e2 08	               lda  mapaddr
.0a37	20 23 1f	               jsr  putahex
.0a3a	20 2a 1d	               jsr  push
.0a3d	a2 01		               ldx  #1
.0a3f	a0 18		               ldy  #24
.0a41	20 53 1c	               jsr  gotoxy
.0a44	20 69 1d	               jsr  pop
.0a47	20 2a 1d	               jsr  push
.0a4a	a2 a4		isx            ldx  #<txt5
.0a4c	a0 0a		isy            ldy  #>txt5
.0a4e	20 39 1c	               jsr  puts
.0a51	20 69 1d	               jsr  pull
.0a54	ad e9 08	               lda  curscl
.0a57	20 23 1f	               jsr  putahex
.0a5a	a9 da		               lda  #$da
.0a5c	20 33 1c	               jsr  putch
.0a5f	ad e8 08	               lda  cursln
.0a62	20 23 1f	               jsr  putahex
.0a65	20 69 1d	               jsr  pop
.0a68	60		               rts
>0a69	50 45 54 53	txt0           .null     "petscii :   "
>0a6d	43 49 49 20 3a 20 20 20 00
>0a76	4b 45 59 20	txt1           .null     "key code: "
>0a7a	43 4f 44 45 3a 20 00
>0a81	42 49 54 4d	txt2           .null     "bitmap..: "
>0a85	41 50 2e 2e 3a 20 00
>0a8c	4f 46 46 53	txt3           .null     "offset..:   "
>0a90	45 54 2e 2e 3a 20 20 20 00
>0a99	4d 41 50 41	txt4           .null     "mapaddr.: "
>0a9d	44 44 52 2e 3a 20 00
>0aa4	43 55 52 53	txt5           .null     "cursval.: "
>0aa8	56 41 4c 2e 3a 20 00
>0aaf	53 54 41 43	txt6           .null     "stack......:"
>0ab3	4b 2e 2e 2e 2e 2e 2e 3a 00
.0abc			keyaction
.0abc	20 2a 1d	               jsr  push
.0abf	20 4a 21	loop           jsr  getkey
.0ac2	c9 85		f1             cmp  #key_f1
.0ac4	d0 03		               bne  f2
.0ac6	4c 32 0b	               jmp  dof1
.0ac9	c9 89		f2             cmp  #key_f2
.0acb	d0 03		               bne  f3
.0acd	4c 38 0b	               jmp  dof2
.0ad0	c9 86		f3             cmp  #key_f3
.0ad2	d0 03		               bne  f4
.0ad4	4c 3e 0b	               jmp  dof3
.0ad7	c9 8a		f4             cmp  #key_f4
.0ad9	d0 03		               bne  f5
.0adb	4c 44 0b	               jmp  dof4
.0ade	c9 87		f5             cmp  #key_f5
.0ae0	d0 03		               bne  f6
.0ae2	4c 4a 0b	               jmp  dof5
.0ae5	c9 8b		f6             cmp  #key_f6
.0ae7	d0 03		               bne  f7
.0ae9	4c 50 0b	               jmp  dof6
.0aec	c9 88		f7             cmp  #key_f7
.0aee	d0 03		               bne  f8
.0af0	4c 56 0b	               jmp  dof7
.0af3	c9 8c		f8             cmp  #key_f8
.0af5	d0 03		               bne  ctrlx
.0af7	4c 5c 0b	               jmp  dof8
.0afa	c9 18		ctrlx          cmp  #ctrl_x
.0afc	d0 03		               bne  ishex14
.0afe	4c 62 0b	               jmp  doquit
.0b01	c9 14		ishex14        cmp  #$14
.0b03	d0 03		               bne  ishex12
.0b05	4c bf 0a	               jmp  loop
.0b08	c9 12		ishex12        cmp  #$12
.0b0a	d0 03		               bne  reste
.0b0c	4c bf 0a	               jmp  loop
.0b0f			reste
.0b0f	20 2a 1d	               jsr  push
.0b12	a2 0d		               ldx  #13
.0b14	a0 0c		               ldy  #12
.0b16	20 53 1c	               jsr  gotoxy
.0b19	20 69 1d	               jsr  pop
.0b1c	20 33 1c	               jsr  putch
.0b1f	8d e0 08	               sta  currentkey
.0b22	aa		               tax
.0b23	bc 25 20	               ldy  asciitorom,x
.0b26	8c e1 08	               sty  bitmapoffset
.0b29	20 75 09	               jsr  showkeyval
.0b2c	20 16 0d	               jsr  drawbitmap
.0b2f	4c bf 0a	               jmp  loop
.0b32	20 e1 0f	dof1           jsr  f1action  ;edit/reverse
.0b35	4c bf 0a	               jmp  loop
.0b38	20 b2 10	dof2           jsr  f2action  ;save/flip vert
.0b3b	4c bf 0a	               jmp  loop
.0b3e	20 50 11	dof3           jsr  f3action  ;load/flip horz
.0b41	4c bf 0a	               jmp  loop
.0b44	20 ee 11	dof4           jsr  f4action  ;copy/scroll r
.0b47	4c bf 0a	               jmp  loop
.0b4a	20 8c 12	dof5           jsr  f5action  ;clear/scroll l
.0b4d	4c bf 0a	               jmp  loop
.0b50	20 30 13	dof6           jsr  f6action  ;fill;/scroll up
.0b53	4c bf 0a	               jmp  loop
.0b56	20 d4 13	dof7           jsr  f7action  ;clear;/scroll down
.0b59	4c bf 0a	               jmp  loop
.0b5c	20 7d 14	dof8           jsr  f8action  ; function
.0b5f	4c bf 0a	               jmp  loop
.0b62	20 69 1d	doquit         jsr  pop
.0b65	60		               rts
.0b66			editor
.0b66	20 2a 1d	               jsr  push
.0b69	20 2a 1d	               jsr  push
.0b6c	a2 5f		               ldx  #<blankmsg
.0b6e	a0 16		               ldy  #>blankmsg
.0b70	20 c2 1c	               jsr  putscxy
.0b73	a2 84		               ldx  #<exit_msg
.0b75	a0 18		               ldy  #>exit_msg
.0b77	20 c2 1c	               jsr  putscxy
.0b7a	20 69 1d	               jsr  pop
.0b7d	20 2a 1d	               jsr  push
.0b80	a2 5f		               ldx  #<blankmsg
.0b82	a0 16		               ldy  #>blankmsg
.0b84	20 c2 1c	               jsr  putscxy
.0b87	a2 8a		               ldx  #<edit_msg
.0b89	a0 16		               ldy  #>edit_msg
.0b8b	20 c2 1c	               jsr  putscxy
.0b8e	20 69 1d	               jsr  pop
.0b91	a9 0c		               lda  #vgris1
.0b93	20 37 09	               jsr  setmenuacolor
.0b96	a9 0d		               lda  #vvert1
.0b98	8d 3d 1a	               sta  f1abutton
.0b9b	20 64 0e	               jsr  showfkeys
.0b9e	20 d2 0c	               jsr  setcurs
.0ba1	ad e0 08	               lda  currentkey
.0ba4	20 2a 1d	               jsr  push
.0ba7	a2 11		               ldx  #17
.0ba9	a0 05		               ldy  #5
.0bab	20 53 1c	               jsr  gotoxy
.0bae	20 69 1d	               jsr  pop
.0bb1	20 f0 1f	               jsr  atodec
.0bb4	20 2a 1d	               jsr  push
.0bb7	a2 f4		isx            ldx  #<adec
.0bb9	a0 1e		isy            ldy  #>adec
.0bbb	20 39 1c	               jsr  puts
.0bbe	20 69 1d	               jsr  pull
.0bc1	20 16 0d	               jsr  drawbitmap
.0bc4	20 4a 21	ed_loop        jsr  getkey
.0bc7	c9 91		cu             cmp  #cursu
.0bc9	d0 03		               bne  cd
.0bcb	4c 4f 0c	               jmp  do_up
.0bce	c9 11		cd             cmp  #cursd
.0bd0	d0 03		               bne  cl
.0bd2	4c 62 0c	               jmp  do_down
.0bd5	c9 9d		cl             cmp  #cursl
.0bd7	d0 03		               bne  cr
.0bd9	4c 75 0c	               jmp  do_left
.0bdc	c9 1d		cr             cmp  #cursr
.0bde	d0 03		               bne  cx
.0be0	4c 88 0c	               jmp  do_right
.0be3	c9 18		cx             cmp  #ctrl_x
.0be5	d0 03		               bne  sp
.0be7	4c a4 0c	               jmp  do_ctrlx
.0bea	c9 20		sp             cmp  #$20
.0bec	d0 03		               bne  ishex14
.0bee	4c 9b 0c	               jmp  do_swap
.0bf1	c9 14		ishex14        cmp  #$14
.0bf3	d0 03		               bne  ishex12
.0bf5	4c 9b 0c	               jmp  do_swap
.0bf8	c9 12		ishex12        cmp  #$12
.0bfa	d0 03		               bne  rest
.0bfc	4c 9b 0c	               jmp  do_swap
.0bff			rest
.0bff	20 2a 1d	               jsr  push
.0c02	a2 0d		               ldx  #13
.0c04	a0 0c		               ldy  #12
.0c06	20 53 1c	               jsr  gotoxy
.0c09	20 69 1d	               jsr  pop
.0c0c	20 33 1c	               jsr  putch
.0c0f	8d e0 08	               sta  currentkey
.0c12	aa		               tax
.0c13	bc 25 20	               ldy  asciitorom,x
.0c16	8c e1 08	               sty  bitmapoffset
.0c19	20 75 09	               jsr  showkeyval
.0c1c	20 16 0d	               jsr  drawbitmap
.0c1f	20 2a 1d	               jsr  push
.0c22	a2 0d		               ldx  #13
.0c24	a0 0c		               ldy  #12
.0c26	20 53 1c	               jsr  gotoxy
.0c29	20 69 1d	               jsr  pop
.0c2c	20 33 1c	               jsr  putch
.0c2f	20 2a 1d	               jsr  push
.0c32	a2 11		               ldx  #17
.0c34	a0 05		               ldy  #5
.0c36	20 53 1c	               jsr  gotoxy
.0c39	20 69 1d	               jsr  pop
.0c3c	20 f0 1f	               jsr  atodec
.0c3f	20 2a 1d	               jsr  push
.0c42	a2 f4		isx            ldx  #<adec
.0c44	a0 1e		isy            ldy  #>adec
.0c46	20 39 1c	               jsr  puts
.0c49	20 69 1d	               jsr  pull
.0c4c	4c a1 0c	               jmp  totop
.0c4f	ad e8 08	do_up          lda  cursln
.0c52	c9 09		               cmp  #grid_top
.0c54	f0 4b		               beq  totop
.0c56	20 f4 0c	               jsr  clrcurs
.0c59	ce e8 08	               dec  cursln
.0c5c	20 d2 0c	               jsr  setcurs
.0c5f	4c a1 0c	               jmp  totop
.0c62	ad e8 08	do_down        lda  cursln
.0c65	c9 10		               cmp  #grid_bot
.0c67	f0 38		               beq  totop
.0c69	20 f4 0c	               jsr  clrcurs
.0c6c	ee e8 08	               inc  cursln
.0c6f	20 d2 0c	               jsr  setcurs
.0c72	4c a1 0c	               jmp  totop
.0c75	ad e9 08	do_left        lda  curscl
.0c78	c9 01		               cmp  #grid_left
.0c7a	f0 25		               beq  totop
.0c7c	20 f4 0c	               jsr  clrcurs
.0c7f	ce e9 08	               dec  curscl
.0c82	20 d2 0c	               jsr  setcurs
.0c85	4c a1 0c	               jmp  totop
.0c88	ad e9 08	do_right       lda  curscl
.0c8b	c9 08		               cmp  #grid_right
.0c8d	f0 12		               beq  totop
.0c8f	20 f4 0c	               jsr  clrcurs
.0c92	ee e9 08	               inc  curscl
.0c95	20 d2 0c	               jsr  setcurs
.0c98	4c a1 0c	               jmp  totop
.0c9b	20 ab 0c	do_swap        jsr  do_eor
.0c9e	20 16 0d	               jsr  drawbitmap
.0ca1	4c c4 0b	totop          jmp  ed_loop
.0ca4	20 f4 0c	do_ctrlx       jsr  clrcurs
.0ca7	20 69 1d	               jsr  pop
.0caa	60		               rts
.0cab			do_eor
.0cab	20 2a 1d	               jsr  push
.0cae	ad e2 08	               lda  mapaddr
.0cb1	85 fd		               sta  zpage2
.0cb3	ad e3 08	               lda  mapaddr+1
.0cb6	85 fe		               sta  zpage2+1
.0cb8	ae e8 08	               ldx  cursln     ; calcul de
.0cbb	ca		               dex            ; l'offset de
.0cbc	8a		               txa            ; la
.0cbd	29 f7		               and  #$f7      ; ligne
.0cbf	a8		               tay
.0cc0	ae e9 08	               ldx  curscl
.0cc3	ca		               dex
.0cc4	bd d5 08	               lda  eorval,x
.0cc7	51 fd		               eor  (zpage2),y
.0cc9	20 75 09	               jsr  showkeyval
.0ccc	91 fd		               sta  (zpage2),y
.0cce	20 69 1d	               jsr  pop
.0cd1	60		               rts
.0cd2			setcurs
.0cd2	20 2a 1d	               jsr  push
.0cd5	a2 01		               ldx  #grid_left
.0cd7	ac e8 08	               ldy  cursln
.0cda	20 53 1c	               jsr  gotoxy
.0cdd	a9 da		               lda  #$da
.0cdf	20 33 1c	               jsr  putch
.0ce2	ae e9 08	               ldx  curscl
.0ce5	e8		               inx
.0ce6	a0 08		               ldy  #grid_top-1
.0ce8	20 53 1c	               jsr  gotoxy
.0ceb	a9 da		               lda  #$da
.0ced	20 33 1c	               jsr  putch
.0cf0	20 69 1d	               jsr  pop
.0cf3	60		               rts
.0cf4			clrcurs
.0cf4	20 2a 1d	               jsr  push
.0cf7	a2 01		               ldx  #grid_left
.0cf9	ac e8 08	               ldy  cursln
.0cfc	20 53 1c	               jsr  gotoxy
.0cff	a9 20		               lda  #$20
.0d01	20 33 1c	               jsr  putch
.0d04	ae e9 08	               ldx  curscl
.0d07	e8		               inx
.0d08	a0 08		               ldy  #grid_top-1
.0d0a	20 53 1c	               jsr  gotoxy
.0d0d	a9 20		               lda  #$20
.0d0f	20 33 1c	               jsr  putch
.0d12	20 69 1d	               jsr  pop
.0d15	60		               rts
.0d16			drawbitmap
.0d16	20 2a 1d	               jsr  push
.0d19	20 5b 0d	               jsr  calcmapaddr
.0d1c	ad e2 08	               lda  mapaddr        ; on pointe sur la table des bitmaps
.0d1f	85 fb		               sta  zpage1
.0d21	ad e3 08	               lda  mapaddr+1
.0d24	85 fc		               sta  zpage1+1
.0d26	a0 00		drawchar       ldy  #$00
.0d28	a2 09		               ldx  #grid_top      ;on replace la ...
.0d2a	8e 33 0d	               stx  isy+1          ;ligne de départ
.0d2d	20 2a 1d	nextline       jsr  push
.0d30	a2 02		               ldx  #grid_left+1        ; la colonne
.0d32	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.0d34	20 53 1c	               jsr  gotoxy
.0d37	20 69 1d	               jsr  pop
.0d3a	b1 fb		               lda  (zpage1),y     ; on li une ligne
.0d3c	20 94 1f	               jsr  atobin
.0d3f	20 8a 0d	               jsr  abintograph
.0d42	20 2a 1d	               jsr  push
.0d45	a2 eb		isx            ldx  #<abin
.0d47	a0 1e		isy            ldy  #>abin
.0d49	20 39 1c	               jsr  puts
.0d4c	20 69 1d	               jsr  pull
.0d4f	ee 33 0d	               inc  isy+1
.0d52	c8		               iny
.0d53	c0 08		               cpy  #$08
.0d55	30 d6		               bmi  nextline
.0d57	20 69 1d	               jsr  pop
.0d5a	60		               rts
.0d5b			calcmapaddr
.0d5b	20 2a 1d	               jsr  push
.0d5e	ad 26 0e	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0d61	85 fb		               sta  zpage1
.0d63	ad 27 0e	               lda  bitmapaddr+1
.0d66	85 fc		               sta  zpage1+1
.0d68	ae e1 08	               ldx  bitmapoffset
.0d6b	e0 00		               cpx  #$00
.0d6d	f0 08		               beq  thesame         ; sommes nous déja à 0
.0d6f	a9 08		addagain       lda  #8
.0d71	20 ad 0f	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0d74	ca		               dex                 ; pour chaque caracteres
.0d75	d0 f8		               bne  addagain
.0d77	48		thesame        pha
.0d78	a5 fb		               lda  zpage1
.0d7a	8d e2 08	               sta  mapaddr
.0d7d	a5 fc		               lda  zpage1+1
.0d7f	8d e3 08	               sta  mapaddr+1
.0d82	68		               pla
.0d83	20 75 09	               jsr  showkeyval
.0d86	20 69 1d	out            jsr  pop
.0d89	60		               rts
.0d8a			abintograph
.0d8a	20 2a 1d	               jsr  push
.0d8d	a9 eb		               lda  #<abin
.0d8f	85 fb		               sta  zpage1
.0d91	a9 1e		               lda  #>abin+1
.0d93	85 fc		               sta  zpage1+1
.0d95	a0 00		               ldy  #$00
.0d97	b1 fb		nextbit        lda  (zpage1),y
.0d99	c9 30		               cmp  #$30
.0d9b	f0 07		               beq  itszero
.0d9d	a9 d1		itsone         lda  #$d1
.0d9f	91 fb		               sta  (zpage1),y
.0da1	4c a8 0d	               jmp  next
.0da4	a9 2e		itszero        lda  #$2e
.0da6	91 fb		               sta  (zpage1),y
.0da8	c8		next           iny
.0da9	c0 08		               cpy  #$08
.0dab	30 ea		               bmi  nextbit
.0dad	20 69 1d	               jsr  pop
.0db0	60		               rts
.0db1			setscreenptr
.0db1	20 2a 1d	               jsr  push
.0db4	a9 08		               lda  #$08      ; basic commande to disable ...
.0db6	20 d2 ff	               jsr  chrout    ; ... character set change.
.0db9	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.0dbc	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.0dbe	09 0e		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.0dc0	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.0dc3	20 69 1d	               jsr  pop
.0dc6	60		               rts
.0dc7			copycharset
.0dc7	20 2a 1d	               jsr  push
.0dca	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0dcd	29 fe		               and  #%11111110     ;254
.0dcf	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0dd2	a5 01		               lda  u6510map       ;$01
.0dd4	29 fb		               and  #%11111011     ;251
.0dd6	85 01		               sta  u6510map       ;$01
.0dd8	20 ed 0d	               jsr  memcopy
.0ddb	a5 01		               lda  u6510map       ;$01
.0ddd	09 04		               ora  #%00000100
.0ddf	85 01		               sta  u6510map       ;$01
.0de1	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0de4	09 01		               ora  #%00000001     ;254
.0de6	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0de9	20 69 1d	               jsr  pop
.0dec	60		               rts
.0ded			memcopy
.0ded	20 2a 1d	               jsr  push
.0df0	ad 22 0e	               lda  startaddr
.0df3	85 fb		               sta  zpage1
.0df5	ad 23 0e	               lda  startaddr+1
.0df8	85 fc		               sta  zpage1+1
.0dfa	ad 26 0e	               lda  bitmapaddr
.0dfd	85 fd		               sta  zpage2
.0dff	ad 27 0e	               lda  bitmapaddr+1
.0e02	85 fe		               sta  zpage2+1
.0e04	a0 00		               ldy  #$00
.0e06	b1 fb		onemore        lda  (zpage1),y
.0e08	91 fd		               sta  (zpage2),y
.0e0a	20 31 1e	               jsr  inczp1
.0e0d	20 49 1e	               jsr  inczp2
.0e10	a5 fc		               lda  zpage1+1
.0e12	cd 25 0e	               cmp  stopaddr+1
.0e15	d0 ef		               bne  onemore
.0e17	a5 fb		               lda  zpage1
.0e19	cd 24 0e	               cmp  stopaddr
.0e1c	d0 e8		               bne  onemore
.0e1e	20 69 1d	               jsr  pop
.0e21	60		               rts
=14336			bitmapmem =    charsdef * 1024     ;Calcul de la position ram des caracteres.
=61440			mstopaddr =    $d000+(4*$800)
>0e22	00 d0		startaddr      .word     $d000               ; 53248
>0e24	00 f0		stopaddr       .word     mstopaddr           ; 55296
>0e26	00 38		bitmapaddr     .word     bitmapmem           ; $3000, 12288
.0e28			staticscreen
.0e28	48		               pha
.0e29	a9 0c		               lda  #vgris1
.0e2b	8d 20 d0	               sta  $d020
.0e2e	68		               pla
.0e2f	48		               pha
.0e30	a9 0b		               lda  #vgris
.0e32	8d 21 d0	               sta  $d021
.0e35	68		               pla
.0e36	20 04 0f	               jsr  showlines
.0e39	20 e5 0e	               jsr  showallchars
.0e3c	20 4c 0f	               jsr  showgrid
.0e3f	20 64 0e	               jsr  showfkeys
.0e42	20 2a 1d	               jsr  push
.0e45	a2 5f		               ldx  #<blankmsg
.0e47	a0 16		               ldy  #>blankmsg
.0e49	20 c2 1c	               jsr  putscxy
.0e4c	a2 6f		               ldx  #<quit_msg
.0e4e	a0 18		               ldy  #>quit_msg
.0e50	20 c2 1c	               jsr  putscxy
.0e53	20 69 1d	               jsr  pop
.0e56	20 2a 1d	               jsr  push
.0e59	a2 00		               ldx  #0
.0e5b	a0 07		               ldy  #7
.0e5d	20 53 1c	               jsr  gotoxy
.0e60	20 69 1d	               jsr  pop
.0e63	60		               rts
.0e64			showfkeys
.0e64	20 2a 1d	               jsr  push
.0e67	ad de 08	               lda  fkeyset
.0e6a	c9 00		               cmp  #$0
.0e6c	d0 3b		               bne  secondks
.0e6e	a2 3d		               ldx #<f1abutton
.0e70	a0 1a		               ldy #>f1abutton
.0e72	20 c2 1c	               jsr putscxy
.0e75	a2 57		               ldx #<f2abutton
.0e77	a0 1a		               ldy #>f2abutton
.0e79	20 c2 1c	               jsr putscxy
.0e7c	a2 71		               ldx #<f3abutton
.0e7e	a0 1a		               ldy #>f3abutton
.0e80	20 c2 1c	               jsr putscxy
.0e83	a2 8b		               ldx #<f4abutton
.0e85	a0 1a		               ldy #>f4abutton
.0e87	20 c2 1c	               jsr putscxy
.0e8a	a2 a5		               ldx #<f5abutton
.0e8c	a0 1a		               ldy #>f5abutton
.0e8e	20 c2 1c	               jsr putscxy
.0e91	a2 bf		               ldx #<f6abutton
.0e93	a0 1a		               ldy #>f6abutton
.0e95	20 c2 1c	               jsr putscxy
.0e98	a2 d9		               ldx #<f7abutton
.0e9a	a0 1a		               ldy #>f7abutton
.0e9c	20 c2 1c	               jsr putscxy
.0e9f	a2 f3		               ldx #<f8abutton
.0ea1	a0 1a		               ldy #>f8abutton
.0ea3	20 c2 1c	               jsr putscxy
.0ea6	4c e1 0e	               jmp end
.0ea9			secondks
.0ea9	a2 0d		               ldx #<f1bbutton
.0eab	a0 1b		               ldy #>f1bbutton
.0ead	20 c2 1c	               jsr putscxy
.0eb0	a2 27		               ldx #<f2bbutton
.0eb2	a0 1b		               ldy #>f2bbutton
.0eb4	20 c2 1c	               jsr putscxy
.0eb7	a2 41		               ldx #<f3bbutton
.0eb9	a0 1b		               ldy #>f3bbutton
.0ebb	20 c2 1c	               jsr putscxy
.0ebe	a2 5b		               ldx #<f4bbutton
.0ec0	a0 1b		               ldy #>f4bbutton
.0ec2	20 c2 1c	               jsr putscxy
.0ec5	a2 75		               ldx #<f5bbutton
.0ec7	a0 1b		               ldy #>f5bbutton
.0ec9	20 c2 1c	               jsr putscxy
.0ecc	a2 8f		               ldx #<f6bbutton
.0ece	a0 1b		               ldy #>f6bbutton
.0ed0	20 c2 1c	               jsr putscxy
.0ed3	a2 a9		               ldx #<f7bbutton
.0ed5	a0 1b		               ldy #>f7bbutton
.0ed7	20 c2 1c	               jsr putscxy
.0eda	a2 c3		               ldx #<f8bbutton
.0edc	a0 1b		               ldy #>f8bbutton
.0ede	20 c2 1c	               jsr putscxy
.0ee1	20 69 1d	end            jsr  pop
.0ee4	60		               rts
.0ee5			showallchars
.0ee5	20 2a 1d	               jsr push
.0ee8	20 2a 1d	               jsr  push
.0eeb	a2 00		               ldx  #0
.0eed	a0 00		               ldy  #0
.0eef	20 53 1c	               jsr  gotoxy
.0ef2	20 69 1d	               jsr  pop
.0ef5	a2 00		               ldx  #$00
.0ef7	8a		nextc          txa
.0ef8	9d 00 04	               sta  scrnnewram,x
.0efb	e8		               inx
.0efc	e0 80		               cpx  #$80
.0efe	d0 f7		               bne  nextc
.0f00	20 69 1d	               jsr  pop
.0f03	60		               rts
.0f04			showlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.0f04	20 2a 1d	               jsr  push
.0f07	a2 28		               ldx  #40
.0f09	a9 40		               lda  #64
.0f0b	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.0f0e	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.0f11	ca		               dex
.0f12	e0 10		hline          cpx  #vlinepos
.0f14	10 03		               bpl  notyet
.0f16	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.0f19	e0 00		notyet         cpx  #$00
.0f1b	d0 ee		               bne  nextl
.0f1d	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.0f1f	85 fb		               sta  zpage1
.0f21	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.0f23	85 fc		               sta  zpage1+1
.0f25	a0 00		               ldy  #0
.0f27	a9 72		               lda  #114
.0f29	91 fb		               sta  (zpage1),y
.0f2b	20 bb 0f	               jsr  zp1add40
.0f2e	a2 12		               ldx  #24-hline2
.0f30	a9 5d		               lda  #93
.0f32	91 fb		another93      sta  (zpage1),y
.0f34	20 bb 0f	               jsr  zp1add40
.0f37	ca		               dex
.0f38	d0 f8		               bne  another93
.0f3a	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.0f3c	85 fb		               sta  zpage1
.0f3e	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.0f40	85 fc		               sta  zpage1+1
.0f42	a0 00		               ldy  #0
.0f44	a9 73		               lda  #115
.0f46	91 fb		               sta  (zpage1),y
.0f48	20 69 1d	               jsr  pop
.0f4b	60		               rts
.0f4c			showgrid
.0f4c	20 2a 1d	               jsr  push
.0f4f	20 dd 1b	               jsr  screendis
.0f52	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.0f54	85 fb		               sta  zpage1
.0f56	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.0f58	85 fc		               sta  zpage1+1
.0f5a	a2 08		               ldx  #8
.0f5c	a9 65		nextbox        lda  #101
.0f5e	a0 09		               ldy  #9
.0f60	91 fb		               sta  (zpage1),y
.0f62	88		               dey
.0f63	a9 2e		               lda  #$2e
.0f65	91 fb		nextcol        sta  (zpage1),y
.0f67	88		               dey
.0f68	d0 fb		               bne  nextcol
.0f6a	20 bb 0f	               jsr  zp1add40
.0f6d	ca		               dex
.0f6e	d0 ec		               bne  nextbox
.0f70	a0 08		               ldy  #8
.0f72	a9 77		               lda  #119
.0f74	91 fb		nextlin        sta  (zpage1),y
.0f76	88		               dey
.0f77	d0 fb		               bne  nextlin
.0f79	a9 3e		               lda  #$3e
.0f7b	8d eb 05	               sta  scrnnewram+(40*(12))+11
.0f7e	a9 70		               lda  #$70                     ;+
.0f80	8d c4 05	               sta  scrnnewram+(40*(11))+12
.0f83	a9 43		               lda  #$43                     ;-
.0f85	8d c5 05	               sta  scrnnewram+(40*(11))+13
.0f88	a9 6e		               lda  #$6e                     ;+
.0f8a	8d c6 05	               sta  scrnnewram+(40*(11))+14
.0f8d	a9 5d		               lda  #$5d                     ;|
.0f8f	8d ec 05	               sta  scrnnewram+(40*(12))+12
.0f92	a9 5d		               lda  #$5d                     ;|
.0f94	8d ee 05	               sta  scrnnewram+(40*(12))+14
.0f97	a9 6d		               lda  #$6d                     ;+
.0f99	8d 14 06	               sta  scrnnewram+(40*(13))+12
.0f9c	a9 43		               lda  #$43                     ;-
.0f9e	8d 15 06	               sta  scrnnewram+(40*(13))+13
.0fa1	a9 7d		               lda  #$7d                     ;+
.0fa3	8d 16 06	               sta  scrnnewram+(40*(13))+14
.0fa6	20 ea 1b	               jsr screenena
.0fa9	20 69 1d	               jsr  pop
.0fac	60		               rts
.0fad			zp1addnum
.0fad	08		               php
.0fae	48		               pha
.0faf	18		               clc
.0fb0	65 fb		               adc  zpage1
.0fb2	90 02		               bcc  nocarry
.0fb4	e6 fc		               inc  zpage1+1
.0fb6	85 fb		nocarry        sta  zpage1
.0fb8	68		               pla
.0fb9	28		               plp
.0fba	60		               rts
.0fbb			zp1add40
.0fbb	08		               php
.0fbc	48		               pha
.0fbd	18		               clc
.0fbe	a5 fb		               lda  zpage1
.0fc0	69 28		               adc  #40
.0fc2	90 02		               bcc  nocarry
.0fc4	e6 fc		               inc  zpage1+1
.0fc6	85 fb		nocarry        sta  zpage1
.0fc8	68		               pla
.0fc9	28		               plp
.0fca	60		               rts
.0fcb			delay
.0fcb	20 2a 1d	               jsr  push
.0fce	a9 00		               lda  #$0
.0fd0	aa		               tax
.0fd1	a8		               tay
.0fd2	ca		xagain         dex
.0fd3	ca		               dex
.0fd4	88		yagain         dey
.0fd5	c0 00		               cpy  #$00
.0fd7	d0 fb		               bne  yagain
.0fd9	e0 00		               cpx  #$00
.0fdb	d0 f5		               bne  xagain
.0fdd	20 69 1d	               jsr  pop
.0fe0	60		               rts
.0fe1			f1action
.0fe1	48		               pha
.0fe2	a9 ff		               lda  #$ff
.0fe4	8d dd 08	               sta  editmode
.0fe7	ad de 08	               lda  fkeyset
.0fea	d0 7a		               bne  menub
.0fec	20 2a 1d	               jsr  push
.0fef	a2 5f		               ldx  #<blankmsg
.0ff1	a0 16		               ldy  #>blankmsg
.0ff3	20 c2 1c	               jsr  putscxy
.0ff6	a2 8a		               ldx  #<f1a_msg
.0ff8	a0 16		               ldy  #>f1a_msg
.0ffa	20 c2 1c	               jsr  putscxy
.0ffd	20 69 1d	               jsr  pop
.1000	08		               php
.1001	48		               pha
.1002	8a		               txa
.1003	48		               pha
.1004	ad 3d 1a	               lda  f1abutton
.1007	48		               pha
.1008	a9 92		               lda  #146
.100a	8d 4c 1a	               sta  f1abutton+15
.100d	a9 01		               lda  #flashcol
.100f	8d 3d 1a	               sta  f1abutton
.1012	a2 3d		               ldx  #<f1abutton
.1014	a0 1a		               ldy  #>f1abutton
.1016	20 c2 1c	               jsr  putscxy
.1019	20 cb 0f	               jsr  delay
.101c	a9 12		               lda  #18
.101e	8d 4c 1a	               sta  f1abutton+15
.1021	68		               pla
.1022	8d 3d 1a	               sta  f1abutton
.1025	a2 3d		               ldx  #<f1abutton
.1027	a0 1a		               ldy  #>f1abutton
.1029	20 c2 1c	               jsr  putscxy
.102c	68		               pla
.102d	aa		               tax
.102e	68		               pla
.102f	28		               plp
.1030	20 66 0b	               jsr  editor
.1033	20 2a 1d	               jsr  push
.1036	a2 5f		               ldx  #<blankmsg
.1038	a0 16		               ldy  #>blankmsg
.103a	20 c2 1c	               jsr  putscxy
.103d	a2 6f		               ldx  #<quit_msg
.103f	a0 18		               ldy  #>quit_msg
.1041	20 c2 1c	               jsr  putscxy
.1044	20 69 1d	               jsr  pop
.1047	20 2a 1d	               jsr  push
.104a	a2 5f		               ldx  #<blankmsg
.104c	a0 16		               ldy  #>blankmsg
.104e	20 c2 1c	               jsr  putscxy
.1051	a2 39		               ldx  #<menua_msg
.1053	a0 18		               ldy  #>menua_msg
.1055	20 c2 1c	               jsr  putscxy
.1058	20 69 1d	               jsr  pop
.105b	a9 0d		               lda  #menu1col
.105d	20 37 09	               jsr  setmenuacolor
.1060	20 64 0e	               jsr  showfkeys
.1063	4c b0 10	               jmp  out
.1066			menub
.1066	20 2a 1d	               jsr  push
.1069	a2 5f		               ldx  #<blankmsg
.106b	a0 16		               ldy  #>blankmsg
.106d	20 c2 1c	               jsr  putscxy
.1070	a2 61		               ldx  #<f1b_msg
.1072	a0 17		               ldy  #>f1b_msg
.1074	20 c2 1c	               jsr  putscxy
.1077	20 69 1d	               jsr  pop
.107a	08		               php
.107b	48		               pha
.107c	8a		               txa
.107d	48		               pha
.107e	ad 0d 1b	               lda  f1bbutton
.1081	48		               pha
.1082	a9 92		               lda  #146
.1084	8d 1c 1b	               sta  f1bbutton+15
.1087	a9 01		               lda  #flashcol
.1089	8d 0d 1b	               sta  f1bbutton
.108c	a2 0d		               ldx  #<f1bbutton
.108e	a0 1b		               ldy  #>f1bbutton
.1090	20 c2 1c	               jsr  putscxy
.1093	20 cb 0f	               jsr  delay
.1096	a9 12		               lda  #18
.1098	8d 1c 1b	               sta  f1bbutton+15
.109b	68		               pla
.109c	8d 0d 1b	               sta  f1bbutton
.109f	a2 0d		               ldx  #<f1bbutton
.10a1	a0 1b		               ldy  #>f1bbutton
.10a3	20 c2 1c	               jsr  putscxy
.10a6	68		               pla
.10a7	aa		               tax
.10a8	68		               pla
.10a9	28		               plp
.10aa	20 0a 16	               jsr  flipvert
.10ad	20 16 0d	               jsr  drawbitmap
.10b0	68		out            pla
.10b1	60		               rts
.10b2			f2action
.10b2	48		               pha
.10b3	a9 00		               lda  #$0
.10b5	8d dd 08	               sta  editmode
.10b8	ad de 08	               lda  fkeyset
.10bb	d0 47		               bne  menub
.10bd	20 2a 1d	               jsr  push
.10c0	a2 5f		               ldx  #<blankmsg
.10c2	a0 16		               ldy  #>blankmsg
.10c4	20 c2 1c	               jsr  putscxy
.10c7	a2 a5		               ldx  #<f2a_msg
.10c9	a0 16		               ldy  #>f2a_msg
.10cb	20 c2 1c	               jsr  putscxy
.10ce	20 69 1d	               jsr  pop
.10d1	08		               php
.10d2	48		               pha
.10d3	8a		               txa
.10d4	48		               pha
.10d5	ad 57 1a	               lda  f2abutton
.10d8	48		               pha
.10d9	a9 92		               lda  #146
.10db	8d 66 1a	               sta  f2abutton+15
.10de	a9 01		               lda  #flashcol
.10e0	8d 57 1a	               sta  f2abutton
.10e3	a2 57		               ldx  #<f2abutton
.10e5	a0 1a		               ldy  #>f2abutton
.10e7	20 c2 1c	               jsr  putscxy
.10ea	20 cb 0f	               jsr  delay
.10ed	a9 12		               lda  #18
.10ef	8d 66 1a	               sta  f2abutton+15
.10f2	68		               pla
.10f3	8d 57 1a	               sta  f2abutton
.10f6	a2 57		               ldx  #<f2abutton
.10f8	a0 1a		               ldy  #>f2abutton
.10fa	20 c2 1c	               jsr  putscxy
.10fd	68		               pla
.10fe	aa		               tax
.10ff	68		               pla
.1100	28		               plp
.1101	4c 4e 11	               jmp  out
.1104			menub
.1104	20 2a 1d	               jsr  push
.1107	a2 5f		               ldx  #<blankmsg
.1109	a0 16		               ldy  #>blankmsg
.110b	20 c2 1c	               jsr  putscxy
.110e	a2 7a		               ldx  #<f2b_msg
.1110	a0 17		               ldy  #>f2b_msg
.1112	20 c2 1c	               jsr  putscxy
.1115	20 69 1d	               jsr  pop
.1118	08		               php
.1119	48		               pha
.111a	8a		               txa
.111b	48		               pha
.111c	ad 27 1b	               lda  f2bbutton
.111f	48		               pha
.1120	a9 92		               lda  #146
.1122	8d 36 1b	               sta  f2bbutton+15
.1125	a9 01		               lda  #flashcol
.1127	8d 27 1b	               sta  f2bbutton
.112a	a2 27		               ldx  #<f2bbutton
.112c	a0 1b		               ldy  #>f2bbutton
.112e	20 c2 1c	               jsr  putscxy
.1131	20 cb 0f	               jsr  delay
.1134	a9 12		               lda  #18
.1136	8d 36 1b	               sta  f2bbutton+15
.1139	68		               pla
.113a	8d 27 1b	               sta  f2bbutton
.113d	a2 27		               ldx  #<f2bbutton
.113f	a0 1b		               ldy  #>f2bbutton
.1141	20 c2 1c	               jsr  putscxy
.1144	68		               pla
.1145	aa		               tax
.1146	68		               pla
.1147	28		               plp
.1148	20 dd 15	               jsr  fliphorz
.114b	20 16 0d	               jsr  drawbitmap
.114e	68		out            pla
.114f	60		               rts
.1150			f3action
.1150	48		               pha
.1151	a9 00		               lda  #$0
.1153	8d dd 08	               sta  editmode
.1156	ad de 08	               lda  fkeyset
.1159	d0 47		               bne  menub
.115b	20 2a 1d	               jsr  push
.115e	a2 5f		               ldx  #<blankmsg
.1160	a0 16		               ldy  #>blankmsg
.1162	20 c2 1c	               jsr  putscxy
.1165	a2 c2		               ldx  #<f3a_msg
.1167	a0 16		               ldy  #>f3a_msg
.1169	20 c2 1c	               jsr  putscxy
.116c	20 69 1d	               jsr  pop
.116f	08		               php
.1170	48		               pha
.1171	8a		               txa
.1172	48		               pha
.1173	ad 71 1a	               lda  f3abutton
.1176	48		               pha
.1177	a9 92		               lda  #146
.1179	8d 80 1a	               sta  f3abutton+15
.117c	a9 01		               lda  #flashcol
.117e	8d 71 1a	               sta  f3abutton
.1181	a2 71		               ldx  #<f3abutton
.1183	a0 1a		               ldy  #>f3abutton
.1185	20 c2 1c	               jsr  putscxy
.1188	20 cb 0f	               jsr  delay
.118b	a9 12		               lda  #18
.118d	8d 80 1a	               sta  f3abutton+15
.1190	68		               pla
.1191	8d 71 1a	               sta  f3abutton
.1194	a2 71		               ldx  #<f3abutton
.1196	a0 1a		               ldy  #>f3abutton
.1198	20 c2 1c	               jsr  putscxy
.119b	68		               pla
.119c	aa		               tax
.119d	68		               pla
.119e	28		               plp
.119f	4c ec 11	               jmp  out
.11a2			menub
.11a2	20 2a 1d	               jsr  push
.11a5	a2 5f		               ldx  #<blankmsg
.11a7	a0 16		               ldy  #>blankmsg
.11a9	20 c2 1c	               jsr  putscxy
.11ac	a2 95		               ldx  #<f3b_msg
.11ae	a0 17		               ldy  #>f3b_msg
.11b0	20 c2 1c	               jsr  putscxy
.11b3	20 69 1d	               jsr  pop
.11b6	08		               php
.11b7	48		               pha
.11b8	8a		               txa
.11b9	48		               pha
.11ba	ad 41 1b	               lda  f3bbutton
.11bd	48		               pha
.11be	a9 92		               lda  #146
.11c0	8d 50 1b	               sta  f3bbutton+15
.11c3	a9 01		               lda  #flashcol
.11c5	8d 41 1b	               sta  f3bbutton
.11c8	a2 41		               ldx  #<f3bbutton
.11ca	a0 1b		               ldy  #>f3bbutton
.11cc	20 c2 1c	               jsr  putscxy
.11cf	20 cb 0f	               jsr  delay
.11d2	a9 12		               lda  #18
.11d4	8d 50 1b	               sta  f3bbutton+15
.11d7	68		               pla
.11d8	8d 41 1b	               sta  f3bbutton
.11db	a2 41		               ldx  #<f3bbutton
.11dd	a0 1b		               ldy  #>f3bbutton
.11df	20 c2 1c	               jsr  putscxy
.11e2	68		               pla
.11e3	aa		               tax
.11e4	68		               pla
.11e5	28		               plp
.11e6	20 b0 08	               jsr  scrollright
.11e9	20 16 0d	               jsr  drawbitmap
.11ec	68		out            pla
.11ed	60		               rts
.11ee			f4action
.11ee	48		               pha
.11ef	a9 00		               lda  #$0
.11f1	8d dd 08	               sta  editmode
.11f4	ad de 08	               lda  fkeyset
.11f7	d0 47		               bne  menub
.11f9	20 2a 1d	               jsr  push
.11fc	a2 5f		               ldx  #<blankmsg
.11fe	a0 16		               ldy  #>blankmsg
.1200	20 c2 1c	               jsr  putscxy
.1203	a2 e8		               ldx  #<f4a_msg
.1205	a0 16		               ldy  #>f4a_msg
.1207	20 c2 1c	               jsr  putscxy
.120a	20 69 1d	               jsr  pop
.120d	08		               php
.120e	48		               pha
.120f	8a		               txa
.1210	48		               pha
.1211	ad 8b 1a	               lda  f4abutton
.1214	48		               pha
.1215	a9 92		               lda  #146
.1217	8d 9a 1a	               sta  f4abutton+15
.121a	a9 01		               lda  #flashcol
.121c	8d 8b 1a	               sta  f4abutton
.121f	a2 8b		               ldx  #<f4abutton
.1221	a0 1a		               ldy  #>f4abutton
.1223	20 c2 1c	               jsr  putscxy
.1226	20 cb 0f	               jsr  delay
.1229	a9 12		               lda  #18
.122b	8d 9a 1a	               sta  f4abutton+15
.122e	68		               pla
.122f	8d 8b 1a	               sta  f4abutton
.1232	a2 8b		               ldx  #<f4abutton
.1234	a0 1a		               ldy  #>f4abutton
.1236	20 c2 1c	               jsr  putscxy
.1239	68		               pla
.123a	aa		               tax
.123b	68		               pla
.123c	28		               plp
.123d	4c 8a 12	               jmp  out
.1240			menub
.1240	20 2a 1d	               jsr  push
.1243	a2 5f		               ldx  #<blankmsg
.1245	a0 16		               ldy  #>blankmsg
.1247	20 c2 1c	               jsr  putscxy
.124a	a2 aa		               ldx  #<f4b_msg
.124c	a0 17		               ldy  #>f4b_msg
.124e	20 c2 1c	               jsr  putscxy
.1251	20 69 1d	               jsr  pop
.1254	08		               php
.1255	48		               pha
.1256	8a		               txa
.1257	48		               pha
.1258	ad 5b 1b	               lda  f4bbutton
.125b	48		               pha
.125c	a9 92		               lda  #146
.125e	8d 6a 1b	               sta  f4bbutton+15
.1261	a9 01		               lda  #flashcol
.1263	8d 5b 1b	               sta  f4bbutton
.1266	a2 5b		               ldx  #<f4bbutton
.1268	a0 1b		               ldy  #>f4bbutton
.126a	20 c2 1c	               jsr  putscxy
.126d	20 cb 0f	               jsr  delay
.1270	a9 12		               lda  #18
.1272	8d 6a 1b	               sta  f4bbutton+15
.1275	68		               pla
.1276	8d 5b 1b	               sta  f4bbutton
.1279	a2 5b		               ldx  #<f4bbutton
.127b	a0 1b		               ldy  #>f4bbutton
.127d	20 c2 1c	               jsr  putscxy
.1280	68		               pla
.1281	aa		               tax
.1282	68		               pla
.1283	28		               plp
.1284	20 31 16	               jsr  scrollleft
.1287	20 16 0d	               jsr  drawbitmap
.128a	68		out            pla
.128b	60		               rts
.128c			f5action
.128c	48		               pha
.128d	a9 00		               lda  #$0
.128f	8d dd 08	               sta  editmode
.1292	ad de 08	               lda  fkeyset
.1295	d0 4d		               bne  menub
.1297	20 2a 1d	               jsr  push
.129a	a2 5f		               ldx  #<blankmsg
.129c	a0 16		               ldy  #>blankmsg
.129e	20 c2 1c	               jsr  putscxy
.12a1	a2 0f		               ldx  #<f5a_msg
.12a3	a0 17		               ldy  #>f5a_msg
.12a5	20 c2 1c	               jsr  putscxy
.12a8	20 69 1d	               jsr  pop
.12ab	08		               php
.12ac	48		               pha
.12ad	8a		               txa
.12ae	48		               pha
.12af	ad a5 1a	               lda  f5abutton
.12b2	48		               pha
.12b3	a9 92		               lda  #146
.12b5	8d b4 1a	               sta  f5abutton+15
.12b8	a9 01		               lda  #flashcol
.12ba	8d a5 1a	               sta  f5abutton
.12bd	a2 a5		               ldx  #<f5abutton
.12bf	a0 1a		               ldy  #>f5abutton
.12c1	20 c2 1c	               jsr  putscxy
.12c4	20 cb 0f	               jsr  delay
.12c7	a9 12		               lda  #18
.12c9	8d b4 1a	               sta  f5abutton+15
.12cc	68		               pla
.12cd	8d a5 1a	               sta  f5abutton
.12d0	a2 a5		               ldx  #<f5abutton
.12d2	a0 1a		               ldy  #>f5abutton
.12d4	20 c2 1c	               jsr  putscxy
.12d7	68		               pla
.12d8	aa		               tax
.12d9	68		               pla
.12da	28		               plp
.12db	20 bb 15	               jsr  clearchar
.12de	20 16 0d	               jsr  drawbitmap
.12e1	4c 2e 13	               jmp  out
.12e4			menub
.12e4	20 2a 1d	               jsr  push
.12e7	a2 5f		               ldx  #<blankmsg
.12e9	a0 16		               ldy  #>blankmsg
.12eb	20 c2 1c	               jsr  putscxy
.12ee	a2 be		               ldx  #<f5b_msg
.12f0	a0 17		               ldy  #>f5b_msg
.12f2	20 c2 1c	               jsr  putscxy
.12f5	20 69 1d	               jsr  pop
.12f8	08		               php
.12f9	48		               pha
.12fa	8a		               txa
.12fb	48		               pha
.12fc	ad 75 1b	               lda  f5bbutton
.12ff	48		               pha
.1300	a9 92		               lda  #146
.1302	8d 84 1b	               sta  f5bbutton+15
.1305	a9 01		               lda  #flashcol
.1307	8d 75 1b	               sta  f5bbutton
.130a	a2 75		               ldx  #<f5bbutton
.130c	a0 1b		               ldy  #>f5bbutton
.130e	20 c2 1c	               jsr  putscxy
.1311	20 cb 0f	               jsr  delay
.1314	a9 12		               lda  #18
.1316	8d 84 1b	               sta  f5bbutton+15
.1319	68		               pla
.131a	8d 75 1b	               sta  f5bbutton
.131d	a2 75		               ldx  #<f5bbutton
.131f	a0 1b		               ldy  #>f5bbutton
.1321	20 c2 1c	               jsr  putscxy
.1324	68		               pla
.1325	aa		               tax
.1326	68		               pla
.1327	28		               plp
.1328	20 3d 15	               jsr  scrollup
.132b	20 16 0d	               jsr  drawbitmap
.132e	68		out            pla
.132f	60		               rts
.1330			f6action
.1330	48		               pha
.1331	a9 00		               lda  #$0
.1333	8d dd 08	               sta  editmode
.1336	ad de 08	               lda  fkeyset
.1339	d0 4d		               bne  menub
.133b	20 2a 1d	               jsr  push
.133e	a2 5f		               ldx  #<blankmsg
.1340	a0 16		               ldy  #>blankmsg
.1342	20 c2 1c	               jsr  putscxy
.1345	a2 29		               ldx  #<f6a_msg
.1347	a0 17		               ldy  #>f6a_msg
.1349	20 c2 1c	               jsr  putscxy
.134c	20 69 1d	               jsr  pop
.134f	08		               php
.1350	48		               pha
.1351	8a		               txa
.1352	48		               pha
.1353	ad bf 1a	               lda  f6abutton
.1356	48		               pha
.1357	a9 92		               lda  #146
.1359	8d ce 1a	               sta  f6abutton+15
.135c	a9 01		               lda  #flashcol
.135e	8d bf 1a	               sta  f6abutton
.1361	a2 bf		               ldx  #<f6abutton
.1363	a0 1a		               ldy  #>f6abutton
.1365	20 c2 1c	               jsr  putscxy
.1368	20 cb 0f	               jsr  delay
.136b	a9 12		               lda  #18
.136d	8d ce 1a	               sta  f6abutton+15
.1370	68		               pla
.1371	8d bf 1a	               sta  f6abutton
.1374	a2 bf		               ldx  #<f6abutton
.1376	a0 1a		               ldy  #>f6abutton
.1378	20 c2 1c	               jsr  putscxy
.137b	68		               pla
.137c	aa		               tax
.137d	68		               pla
.137e	28		               plp
.137f	20 af 15	               jsr  fillchar
.1382	20 16 0d	               jsr  drawbitmap
.1385	4c d2 13	               jmp  out
.1388			menub
.1388	20 2a 1d	               jsr  push
.138b	a2 5f		               ldx  #<blankmsg
.138d	a0 16		               ldy  #>blankmsg
.138f	20 c2 1c	               jsr  putscxy
.1392	a2 d0		               ldx  #<f6b_msg
.1394	a0 17		               ldy  #>f6b_msg
.1396	20 c2 1c	               jsr  putscxy
.1399	20 69 1d	               jsr  pop
.139c	08		               php
.139d	48		               pha
.139e	8a		               txa
.139f	48		               pha
.13a0	ad 8f 1b	               lda  f6bbutton
.13a3	48		               pha
.13a4	a9 92		               lda  #146
.13a6	8d 9e 1b	               sta  f6bbutton+15
.13a9	a9 01		               lda  #flashcol
.13ab	8d 8f 1b	               sta  f6bbutton
.13ae	a2 8f		               ldx  #<f6bbutton
.13b0	a0 1b		               ldy  #>f6bbutton
.13b2	20 c2 1c	               jsr  putscxy
.13b5	20 cb 0f	               jsr  delay
.13b8	a9 12		               lda  #18
.13ba	8d 9e 1b	               sta  f6bbutton+15
.13bd	68		               pla
.13be	8d 8f 1b	               sta  f6bbutton
.13c1	a2 8f		               ldx  #<f6bbutton
.13c3	a0 1b		               ldy  #>f6bbutton
.13c5	20 c2 1c	               jsr  putscxy
.13c8	68		               pla
.13c9	aa		               tax
.13ca	68		               pla
.13cb	28		               plp
.13cc	20 75 15	               jsr  scrolldown
.13cf	20 16 0d	               jsr  drawbitmap
.13d2	68		out            pla
.13d3	60		               rts
.13d4			f7action
.13d4	48		               pha
.13d5	a9 00		               lda  #$0
.13d7	8d dd 08	               sta  editmode
.13da	ad de 08	               lda  fkeyset
.13dd	d0 4d		               bne  menub
.13df	20 2a 1d	               jsr  push
.13e2	a2 5f		               ldx  #<blankmsg
.13e4	a0 16		               ldy  #>blankmsg
.13e6	20 c2 1c	               jsr  putscxy
.13e9	a2 43		               ldx  #<f7a_msg
.13eb	a0 17		               ldy  #>f7a_msg
.13ed	20 c2 1c	               jsr  putscxy
.13f0	20 69 1d	               jsr  pop
.13f3	08		               php
.13f4	48		               pha
.13f5	8a		               txa
.13f6	48		               pha
.13f7	ad d9 1a	               lda  f7abutton
.13fa	48		               pha
.13fb	a9 92		               lda  #146
.13fd	8d e8 1a	               sta  f7abutton+15
.1400	a9 01		               lda  #flashcol
.1402	8d d9 1a	               sta  f7abutton
.1405	a2 d9		               ldx  #<f7abutton
.1407	a0 1a		               ldy  #>f7abutton
.1409	20 c2 1c	               jsr  putscxy
.140c	20 cb 0f	               jsr  delay
.140f	a9 12		               lda  #18
.1411	8d e8 1a	               sta  f7abutton+15
.1414	68		               pla
.1415	8d d9 1a	               sta  f7abutton
.1418	a2 d9		               ldx  #<f7abutton
.141a	a0 1a		               ldy  #>f7abutton
.141c	20 c2 1c	               jsr  putscxy
.141f	68		               pla
.1420	aa		               tax
.1421	68		               pla
.1422	28		               plp
.1423	20 c7 0d	               jsr  copycharset
.1426	20 16 0d	               jsr  drawbitmap
.1429	4c 7b 14	               jmp  out
.142c	a9 00		menub          lda  #$0
.142e	8d dd 08	               sta  editmode
.1431	20 2a 1d	               jsr  push
.1434	a2 5f		               ldx  #<blankmsg
.1436	a0 16		               ldy  #>blankmsg
.1438	20 c2 1c	               jsr  putscxy
.143b	a2 e4		               ldx  #<f7b_msg
.143d	a0 17		               ldy  #>f7b_msg
.143f	20 c2 1c	               jsr  putscxy
.1442	20 69 1d	               jsr  pop
.1445	08		               php
.1446	48		               pha
.1447	8a		               txa
.1448	48		               pha
.1449	ad a9 1b	               lda  f7bbutton
.144c	48		               pha
.144d	a9 92		               lda  #146
.144f	8d b8 1b	               sta  f7bbutton+15
.1452	a9 01		               lda  #flashcol
.1454	8d a9 1b	               sta  f7bbutton
.1457	a2 a9		               ldx  #<f7bbutton
.1459	a0 1b		               ldy  #>f7bbutton
.145b	20 c2 1c	               jsr  putscxy
.145e	20 cb 0f	               jsr  delay
.1461	a9 12		               lda  #18
.1463	8d b8 1b	               sta  f7bbutton+15
.1466	68		               pla
.1467	8d a9 1b	               sta  f7bbutton
.146a	a2 a9		               ldx  #<f7bbutton
.146c	a0 1b		               ldy  #>f7bbutton
.146e	20 c2 1c	               jsr  putscxy
.1471	68		               pla
.1472	aa		               tax
.1473	68		               pla
.1474	28		               plp
.1475	20 1d 15	               jsr  reverse
.1478	20 16 0d	               jsr  drawbitmap
.147b	68		out            pla
.147c	60		               rts
.147d			f8action
.147d	48		               pha
.147e	a9 00		               lda  #$0
.1480	8d dd 08	               sta  editmode
.1483	ad de 08	               lda  fkeyset
.1486	d0 47		               bne  menub
.1488	20 2a 1d	               jsr  push
.148b	a2 5f		               ldx  #<blankmsg
.148d	a0 16		               ldy  #>blankmsg
.148f	20 c2 1c	               jsr  putscxy
.1492	a2 54		               ldx  #<menub_msg
.1494	a0 18		               ldy  #>menub_msg
.1496	20 c2 1c	               jsr  putscxy
.1499	20 69 1d	               jsr  pop
.149c	08		               php
.149d	48		               pha
.149e	8a		               txa
.149f	48		               pha
.14a0	ad f3 1a	               lda  f8abutton
.14a3	48		               pha
.14a4	a9 92		               lda  #146
.14a6	8d 02 1b	               sta  f8abutton+15
.14a9	a9 01		               lda  #flashcol
.14ab	8d f3 1a	               sta  f8abutton
.14ae	a2 f3		               ldx  #<f8abutton
.14b0	a0 1a		               ldy  #>f8abutton
.14b2	20 c2 1c	               jsr  putscxy
.14b5	20 cb 0f	               jsr  delay
.14b8	a9 12		               lda  #18
.14ba	8d 02 1b	               sta  f8abutton+15
.14bd	68		               pla
.14be	8d f3 1a	               sta  f8abutton
.14c1	a2 f3		               ldx  #<f8abutton
.14c3	a0 1a		               ldy  #>f8abutton
.14c5	20 c2 1c	               jsr  putscxy
.14c8	68		               pla
.14c9	aa		               tax
.14ca	68		               pla
.14cb	28		               plp
.14cc	4c 13 15	               jmp  swapit
.14cf			menub
.14cf	20 2a 1d	               jsr  push
.14d2	a2 5f		               ldx  #<blankmsg
.14d4	a0 16		               ldy  #>blankmsg
.14d6	20 c2 1c	               jsr  putscxy
.14d9	a2 39		               ldx  #<menua_msg
.14db	a0 18		               ldy  #>menua_msg
.14dd	20 c2 1c	               jsr  putscxy
.14e0	20 69 1d	               jsr  pop
.14e3	08		               php
.14e4	48		               pha
.14e5	8a		               txa
.14e6	48		               pha
.14e7	ad c3 1b	               lda  f8bbutton
.14ea	48		               pha
.14eb	a9 92		               lda  #146
.14ed	8d d2 1b	               sta  f8bbutton+15
.14f0	a9 01		               lda  #flashcol
.14f2	8d c3 1b	               sta  f8bbutton
.14f5	a2 c3		               ldx  #<f8bbutton
.14f7	a0 1b		               ldy  #>f8bbutton
.14f9	20 c2 1c	               jsr  putscxy
.14fc	20 cb 0f	               jsr  delay
.14ff	a9 12		               lda  #18
.1501	8d d2 1b	               sta  f8bbutton+15
.1504	68		               pla
.1505	8d c3 1b	               sta  f8bbutton
.1508	a2 c3		               ldx  #<f8bbutton
.150a	a0 1b		               ldy  #>f8bbutton
.150c	20 c2 1c	               jsr  putscxy
.150f	68		               pla
.1510	aa		               tax
.1511	68		               pla
.1512	28		               plp
.1513	49 ff		swapit         eor  #$ff
.1515	8d de 08	               sta  fkeyset
.1518	20 64 0e	               jsr  showfkeys
.151b	68		               pla
.151c	60		               rts
.151d			reverse
.151d	20 2a 1d	               jsr  push
.1520	48		               pha
.1521	ad e2 08	               lda  mapaddr
.1524	85 fd		               sta  $fd
.1526	ad e3 08	               lda  mapaddr+1
.1529	85 fe		               sta  $fe
.152b	68		               pla
.152c	a0 00		               ldy  #$00
.152e	b1 fd		again          lda  (zpage2),y
.1530	49 ff		               eor  #$ff
.1532	91 fd		               sta  (zpage2),y
.1534	c8		               iny
.1535	c0 08		               cpy  #$08
.1537	d0 f5		               bne  again
.1539	20 69 1d	               jsr  pop
.153c	60		               rts
.153d			scrollup
.153d	20 2a 1d	               jsr  push
.1540	48		               pha
.1541	ad e2 08	               lda  mapaddr
.1544	85 fb		               sta  $fb
.1546	ad e3 08	               lda  mapaddr+1
.1549	85 fc		               sta  $fc
.154b	68		               pla
.154c	48		               pha
.154d	ad e2 08	               lda  mapaddr
.1550	85 fd		               sta  $fd
.1552	ad e3 08	               lda  mapaddr+1
.1555	85 fe		               sta  $fe
.1557	68		               pla
.1558	20 49 1e	               jsr  inczp2
.155b	a0 00		               ldy  #$00
.155d	b1 fb		               lda  (zpage1),y
.155f	8d 74 15	               sta  tmpbyte
.1562	b1 fd		again          lda  (zpage2),y
.1564	91 fb		               sta  (zpage1),y
.1566	c8		               iny
.1567	c0 07		               cpy  #$07
.1569	d0 f7		               bne  again
.156b	ad 74 15	               lda  tmpbyte
.156e	91 fb		               sta  (zpage1),y
.1570	20 69 1d	               jsr  pop
.1573	60		               rts
>1574	00		tmpbyte        .byte     $00
.1575			scrolldown
.1575	20 2a 1d	               jsr  push
.1578	48		               pha
.1579	ad e2 08	               lda  mapaddr
.157c	85 fb		               sta  $fb
.157e	ad e3 08	               lda  mapaddr+1
.1581	85 fc		               sta  $fc
.1583	68		               pla
.1584	48		               pha
.1585	ad e2 08	               lda  mapaddr
.1588	85 fd		               sta  $fd
.158a	ad e3 08	               lda  mapaddr+1
.158d	85 fe		               sta  $fe
.158f	68		               pla
.1590	20 49 1e	               jsr  inczp2
.1593	a0 07		               ldy  #$07                ;xxxxxxxx zpage1
.1595	b1 fb		               lda  (zpage1),y          ;xxxxxxxx zpage2
.1597	8d ae 15	               sta  tmpbyte             ;xxxxxxxx
.159a	88		again          dey                      ;xxxxxxxx
.159b	b1 fb		               lda  (zpage1),y          ;xxxxxxxx
.159d	91 fd		               sta  (zpage2),y          ;xxxxxxxx
.159f	c0 00		               cpy  #$00                ;xxxxxxxx
.15a1	d0 f7		               bne  again               ;xxxxxxxx
.15a3	a0 00		               ldy  #$00
.15a5	ad ae 15	               lda  tmpbyte
.15a8	91 fb		               sta  (zpage1),y
.15aa	20 69 1d	               jsr  pop
.15ad	60		               rts
>15ae	00		tmpbyte        .byte     $00
.15af			fillchar
.15af	20 2a 1d	               jsr  push
.15b2	a9 ff		               lda  #$ff
.15b4	20 c7 15	               jsr  allsame
.15b7	20 69 1d	               jsr  pop
.15ba	60		               rts
.15bb			clearchar
.15bb	20 2a 1d	               jsr  push
.15be	a9 00		               lda  #$00
.15c0	20 c7 15	               jsr  allsame
.15c3	20 69 1d	               jsr  pop
.15c6	60		               rts
.15c7			allsame
.15c7	48		               pha
.15c8	ad e2 08	               lda  mapaddr
.15cb	85 fd		               sta  $fd
.15cd	ad e3 08	               lda  mapaddr+1
.15d0	85 fe		               sta  $fe
.15d2	68		               pla
.15d3	a0 00		               ldy  #$00
.15d5	91 fd		again          sta  (zpage2),y
.15d7	c8		               iny
.15d8	c0 08		               cpy  #$08
.15da	d0 f9		               bne  again
.15dc	60		               rts
.15dd			fliphorz
.15dd	20 2a 1d	               jsr  push
.15e0	48		               pha
.15e1	ad e2 08	               lda  mapaddr
.15e4	85 fd		               sta  $fd
.15e6	ad e3 08	               lda  mapaddr+1
.15e9	85 fe		               sta  $fe
.15eb	68		               pla
.15ec	a0 00		               ldy  #$00
.15ee	b1 fd		nextbyte       lda  (zpage2),y
.15f0	a2 00		               ldx  #$00
.15f2	2a		rolagain       rol
.15f3	6e 09 16	               ror  tmpbyte
.15f6	e8		               inx
.15f7	e0 08		               cpx  #$08
.15f9	30 f7		               bmi  rolagain
.15fb	ad 09 16	               lda  tmpbyte
.15fe	91 fd		               sta  (zpage2),y
.1600	c8		               iny
.1601	c0 08		               cpy  #$08
.1603	30 e9		               bmi  nextbyte
.1605	20 69 1d	               jsr  pop
.1608	60		               rts
>1609	00		tmpbyte        .byte     $00
.160a			flipvert
.160a	20 2a 1d	               jsr  push
.160d	48		               pha
.160e	ad e2 08	               lda  mapaddr
.1611	85 fd		               sta  $fd
.1613	ad e3 08	               lda  mapaddr+1
.1616	85 fe		               sta  $fe
.1618	68		               pla
.1619	a0 00		               ldy  #$00
.161b	b1 fd		tostack        lda  (zpage2),y
.161d	48		               pha
.161e	c8		               iny
.161f	c0 08		               cpy  #$08
.1621	d0 f8		               bne  tostack
.1623	a0 00		               ldy  #$00
.1625	68		fromstack      pla
.1626	91 fd		               sta  (zpage2),y
.1628	c8		               iny
.1629	c0 08		               cpy  #$08
.162b	d0 f8		               bne  fromstack
.162d	20 69 1d	               jsr  pop
.1630	60		               rts
.1631			scrollleft
.1631	20 2a 1d	               jsr  push
.1634	48		               pha
.1635	ad e2 08	               lda  mapaddr
.1638	85 fb		               sta  $fb
.163a	ad e3 08	               lda  mapaddr+1
.163d	85 fc		               sta  $fc
.163f	68		               pla
.1640	a0 00		               ldy  #$00
.1642	b1 fb		again          lda  (zpage1),y
.1644	18		               clc
.1645	2a		               rol
.1646	69 00		               adc  #$00
.1648	91 fb		               sta  (zpage1),y
.164a	c8		               iny
.164b	c0 08		               cpy  #$08
.164d	d0 f3		               bne  again
.164f	20 69 1d	               jsr  pop
.1652	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: messages.asm

>1653	0a 01 05	editor_msg     .byte vrose,1,5
>1656	5b 45 44 49	               .null     "[editor]"
>165a	54 4f 52 5d 00
>165f	03 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>1663	20 20 20 20	               .null     "                                      "
>1667	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1677	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1687	20 20 00
.168a			f1a_msg
>168a	03 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>168e	20 45 44 49	               .null     " edit mode: chr$(   )",146
>1692	54 20 4d 4f 44 45 3a 20 43 48 52 24 28 20 20 20
>16a2	29 92 00
.16a5			f2a_msg
>16a5	03 00 05	copy_msg       .byte     mesgcol,0,5
>16a8	20 45 4e 54	               .null     " enter character to copy:"
>16ac	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>16bc	43 4f 50 59 3a 00
.16c2			f3a_msg
>16c2	03 00 05 92	save_msg       .byte     mesgcol,0,5,146
>16c6	20 53 41 56	               .null     " save on cassette or disk? (c/d):"
>16ca	45 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>16da	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.16e8			f4a_msg
>16e8	03 00 05	load_msg       .byte     mesgcol,0,5
>16eb	20 4c 4f 41	               .null     " load from cassette or disk? (c/d):"
>16ef	44 20 46 52 4f 4d 20 43 41 53 53 45 54 54 45 20
>16ff	4f 52 20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.170f			f5a_msg
>170f	03 00 05	clear_msg      .byte     mesgcol,0,5
>1712	20 43 4c 45	               .null     " clear char: chr$(   )"
>1716	41 52 20 43 48 41 52 3a 20 43 48 52 24 28 20 20
>1726	20 29 00
.1729			f6a_msg
>1729	03 00 05	fill_msg       .byte     mesgcol,0,5
>172c	20 46 49 4c	               .null     " fill char:  chr$(   )"
>1730	4c 20 43 48 41 52 3a 20 20 43 48 52 24 28 20 20
>1740	20 29 00
.1743			f7a_msg
>1743	03 00 05	work_msg       .byte     mesgcol,0,5
>1746	20 52 45 53	               .null     " restoring all characters."
>174a	54 4f 52 49 4e 47 20 41 4c 4c 20 43 48 41 52 41
>175a	43 54 45 52 53 2e 00
.1761			f1b_msg
>1761	03 00 05	invr_msg       .byte     mesgcol,0,5
>1764	20 46 4c 49	               .null     " flipping vertically:"
>1768	50 50 49 4e 47 20 56 45 52 54 49 43 41 4c 4c 59
>1778	3a 00
.177a			f2b_msg
>177a	03 00 05	flip_msg       .byte     mesgcol,0,5
>177d	20 46 4c 49	               .null     " flipping horizontally:"
>1781	50 50 49 4e 47 20 48 4f 52 49 5a 4f 4e 54 41 4c
>1791	4c 59 3a 00
.1795			f3b_msg
>1795	03 00 05	scrollr_msg    .byte     mesgcol,0,5
>1798	20 53 43 52	               .null     " scrolling right:"
>179c	4f 4c 4c 49 4e 47 20 52 49 47 48 54 3a 00
.17aa			f4b_msg
>17aa	03 00 05	scrolll_msg    .byte     mesgcol,0,5
>17ad	20 53 43 52	               .null     " scrolling left:"
>17b1	4f 4c 4c 49 4e 47 20 4c 45 46 54 3a 00
.17be			f5b_msg
>17be	03 00 05	scrollu_msg    .byte     mesgcol,0,5
>17c1	20 53 43 52	               .null     " scrolling up:"
>17c5	4f 4c 4c 49 4e 47 20 55 50 3a 00
.17d0			f6b_msg
>17d0	03 00 05	scrolld_msg    .byte     mesgcol,0,5
>17d3	20 53 43 52	               .null     " scrolling down:"
>17d7	4f 4c 4c 49 4e 47 20 44 4f 57 4e 3a 00
.17e4			f7b_msg
>17e4	03 00 05	rvrs_msg       .byte     mesgcol,0,5
>17e7	20 52 45 56	               .null     " reverse character:"
>17eb	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
>17fb	03 00 05	save_fname_msg .byte     mesgcol,0,5
>17fe	20 53 41 56	               .null     " save: file name ------.chr"
>1802	45 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>1812	2d 2d 2d 2e 43 48 52 00
>181a	03 00 05	load_fname_msg .byte     mesgcol,0,5
>181d	20 4c 4f 41	               .null     " load: file name ------.chr"
>1821	44 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>1831	2d 2d 2d 2e 43 48 52 00
>1839	03 00 05	menua_msg      .byte     mesgcol,0,5
>183c	20 59 4f 55	               .null     " you are now in menu a."
>1840	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>1850	20 41 2e 00
>1854	03 00 05	menub_msg      .byte     mesgcol,0,5
>1857	20 59 4f 55	               .null     " you are now in menu b."
>185b	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>186b	20 42 2e 00
>186f	0e 15 18 12	quit_msg       .byte     vblue1,21,24,18
>1873	43 54 52 4c	               .text     "ctrl-x",146
>1877	2d 58 92
>187a	20 54 4f 20	               .null     " to quit."
>187e	51 55 49 54 2e 00
>1884	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>1888	43 54 52 4c	               .text     "ctrl-x",146
>188c	2d 58 92
>188f	20 54 4f 20	               .null     " to menu."
>1893	4d 45 4e 55 2e 00
=$07			whoamicol       =    vjaune
>1899	07 04 06 12	whoami0        .byte     whoamicol,4,6,18
>189d	20 20 20 20	               .null     "                               "
>18a1	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>18b1	20 20 20 20 20 20 20 20 20 20 20 00
>18bd	07 04 07 12	whoami1        .byte     whoamicol,4,7,18
>18c1	20 20 20 20	               .null     "           charedit            "
>18c5	20 20 20 20 20 20 20 43 48 41 52 45 44 49 54 20
>18d5	20 20 20 20 20 20 20 20 20 20 20 00
>18e1	07 04 08 12	whoami2        .byte     whoamicol,4,8,18
>18e5	20 20 20 20	               .null     "                               "
>18e9	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>18f9	20 20 20 20 20 20 20 20 20 20 20 00
>1905	07 04 09 12	whoami3        .byte     whoamicol,4,9,18
>1909	20 20 49 4e	               .null     "  inspired from john heilborn  "
>190d	53 50 49 52 45 44 20 46 52 4f 4d 20 4a 4f 48 4e
>191d	20 48 45 49 4c 42 4f 52 4e 20 20 00
>1929	07 04 0a 12	whoami4        .byte     whoamicol,4,10,18
>192d	20 20 20 20	               .null     "      isbn: 0-942386-29-9      "
>1931	20 20 49 53 42 4e 3a 20 30 2d 39 34 32 33 38 36
>1941	2d 32 39 2d 39 20 20 20 20 20 20 00
>194d	07 04 0b 12	whoami5        .byte     whoamicol,4,11,18
>1951	20 20 20 20	               .null     "                               "
>1955	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1965	20 20 20 20 20 20 20 20 20 20 20 00
>1971	07 04 0c 12	whoami6        .byte     whoamicol,4,12,18
>1975	20 43 4f 44	               .null     " coded in assembly language by "
>1979	45 44 20 49 4e 20 41 53 53 45 4d 42 4c 59 20 4c
>1989	41 4e 47 55 41 47 45 20 42 59 20 00
>1995	07 04 0d 12	whoami7        .byte     whoamicol,4,13,18
>1999	20 20 20 20	               .null     "     daniel lafrance 2023      "
>199d	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>19ad	20 32 30 32 33 20 20 20 20 20 20 00
>19b9	07 04 0e 12	whoami8        .byte     whoamicol,4,14,18
>19bd	20 20 20 20	               .null     "    version:",version,"    "
>19c1	56 45 52 53 49 4f 4e 3a 32 30 32 33 31 31 31 33
>19d1	2d 31 36 34 32 30 38 20 20 20 20 00
>19dd	07 04 0f 12	whoami9        .byte     whoamicol,4,15,18
>19e1	20 20 20 20	               .null     "                               "
>19e5	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>19f5	20 20 20 20 20 20 20 20 20 20 20 00
>1a01	03 06 10 14	bye_msg        .byte     vcyan,6,16,20
>1a05	20 54 48 41	               .null     " thanks and have a good day ",146
>1a09	4e 4b 53 20 41 4e 44 20 48 41 56 45 20 41 20 47
>1a19	4f 4f 44 20 44 41 59 20 92 00
>1a23	0d 0a 18 12	any_msg        .byte     vvert1,10,24,18
>1a27	20 20 41 4e	               .null         "  any key to basic  ",146
>1a2b	59 20 4b 45 59 20 54 4f 20 42 41 53 49 43 20 20
>1a3b	92 00
=18			fkeyleft=18
=8			f1top=8
>1a3d	0d 12 08	f1abutton      .byte     menu1col,fkeyleft,f1top       ;133
>1a40	45 44 49 54	               .text     "edit........"
>1a44	2e 2e 2e 2e 2e 2e 2e 2e
>1a4c	12		               .byte     18             ; position 15
>1a4d	a9 20 20 46	               .text     $a9,"  f1  ",223
>1a51	31 20 20 df
>1a55	92 00		               .byte     146,0
>1a57	0c 12 09	f2abutton      .byte     vgris1,fkeyleft,f1top+1     ;138
>1a5a	43 4f 50 59	               .text     "copy........"
>1a5e	2e 2e 2e 2e 2e 2e 2e 2e
>1a66	12		               .byte     18             ; position 15
>1a67	20 20 20 46	               .text     "   f2   "
>1a6b	32 20 20 20
>1a6f	92 00		               .byte     146,0
>1a71	0c 12 0b	f3abutton      .byte     vgris1,fkeyleft,f1top+3     ;137
>1a74	53 41 56 45	               .text     "save........"
>1a78	2e 2e 2e 2e 2e 2e 2e 2e
>1a80	12		               .byte     18            ; position 15
>1a81	a9 20 20 46	               .text     $a9,"  f3  ",223
>1a85	33 20 20 df
>1a89	92 00		               .byte     146,0
>1a8b	0c 12 0c	f4abutton      .byte     vgris1,fkeyleft,f1top+4     ;134
>1a8e	4c 4f 41 44	               .text     "load........"
>1a92	2e 2e 2e 2e 2e 2e 2e 2e
>1a9a	12		               .byte     18             ; position 15
>1a9b	20 20 20 46	               .text     "   f4   "
>1a9f	34 20 20 20
>1aa3	92 00		               .byte     146,0
>1aa5	0d 12 0e	f5abutton      .byte     menu1col,fkeyleft,f1top+6     ;135
>1aa8	43 4c 45 41	               .text     "clear......."
>1aac	52 2e 2e 2e 2e 2e 2e 2e
>1ab4	12		               .byte     18             ; position 15
>1ab5	a9 20 20 46	               .text     $a9,"  f5  ",223
>1ab9	35 20 20 df
>1abd	92 00		               .byte     146,0
>1abf	0d 12 0f	f6abutton      .byte     menu1col,fkeyleft,f1top+7    ;139
>1ac2	46 49 4c 4c	               .text     "fill........"
>1ac6	2e 2e 2e 2e 2e 2e 2e 2e
>1ace	12		               .byte     18             ; position 15
>1acf	20 20 20 46	               .text     "   f6   "
>1ad3	36 20 20 20
>1ad7	92 00		               .byte     146,0
>1ad9	0d 12 11	f7abutton      .byte     menu1col,fkeyleft,f1top+9    ;136
>1adc	52 45 53 54	               .text     "restore all."
>1ae0	4f 52 45 20 41 4c 4c 2e
>1ae8	12		               .byte     18             ; position 15
>1ae9	a9 20 20 46	               .text     $a9,"  f7  ",223
>1aed	37 20 20 df
>1af1	92 00		               .byte     146,0
>1af3	0d 12 12	f8abutton      .byte     menu1col,fkeyleft,f1top+10
>1af6	46 55 4e 43	               .text     "function...."
>1afa	54 49 4f 4e 2e 2e 2e 2e
>1b02	12		               .byte     18             ; position 15
>1b03	20 20 20 46	               .text     "   f8   "
>1b07	38 20 20 20
>1b0b	92 00		               .byte     146,0
>1b0d	0a 12 08	f1bbutton      .byte     menu2col,fkeyleft,f1top
>1b10	46 4c 49 50	               .text     "flip vert..."
>1b14	20 56 45 52 54 2e 2e 2e
>1b1c	12		               .byte     18             ; position 15
>1b1d	a9 20 20 46	               .text     $a9,"  f1  ",223
>1b21	31 20 20 df
>1b25	92 00		               .byte     146,0
>1b27	0a 12 09	f2bbutton      .byte     menu2col,fkeyleft,f1top+1
>1b2a	46 4c 49 50	               .text     "flip horz..."
>1b2e	20 48 4f 52 5a 2e 2e 2e
>1b36	12		               .byte     18             ; position 15
>1b37	20 20 20 46	               .text     "   f2   "
>1b3b	32 20 20 20
>1b3f	92 00		               .byte     146,0
>1b41	0a 12 0b	f3bbutton      .byte     menu2col,fkeyleft,f1top+3
>1b44	53 43 52 4f	               .text     "scroll r...."
>1b48	4c 4c 20 52 2e 2e 2e 2e
>1b50	12		               .byte     18             ; position 15
>1b51	a9 20 20 46	               .text     $a9,"  f3  ",223
>1b55	33 20 20 df
>1b59	92 00		               .byte     146,0
>1b5b	0a 12 0c	f4bbutton      .byte     menu2col,fkeyleft,f1top+4
>1b5e	53 43 52 4f	               .text     "scroll l...."
>1b62	4c 4c 20 4c 2e 2e 2e 2e
>1b6a	12		               .byte     18             ; position 15
>1b6b	20 20 20 46	               .text     "   f4   "
>1b6f	34 20 20 20
>1b73	92 00		               .byte     146,0
>1b75	0a 12 0e	f5bbutton      .byte     menu2col,fkeyleft,f1top+6
>1b78	53 43 52 4f	               .text     "scroll u...."
>1b7c	4c 4c 20 55 2e 2e 2e 2e
>1b84	12		               .byte     18             ; position 15
>1b85	a9 20 20 46	               .text     $a9,"  f5  ",223
>1b89	35 20 20 df
>1b8d	92 00		               .byte     146,0
>1b8f	0a 12 0f	f6bbutton      .byte     menu2col,fkeyleft,f1top+7
>1b92	53 43 52 4f	               .text     "scroll d...."
>1b96	4c 4c 20 44 2e 2e 2e 2e
>1b9e	12		               .byte     18             ; position 15
>1b9f	20 20 20 46	               .text     "   f6   "
>1ba3	36 20 20 20
>1ba7	92 00		               .byte     146,0
>1ba9	0a 12 11	f7bbutton      .byte     menu2col,fkeyleft,f1top+9
>1bac	52 45 56 45	               .text     "reverse....."
>1bb0	52 53 45 2e 2e 2e 2e 2e
>1bb8	12		               .byte     18             ; position 15
>1bb9	a9 20 20 46	               .text     $a9,"  f7  ",223
>1bbd	37 20 20 df
>1bc1	92 00		               .byte     146,0
>1bc3	0a 12 12	f8bbutton      .byte     menu2col,fkeyleft,f1top+10
>1bc6	46 55 4e 43	               .text     "function...."
>1bca	54 49 4f 4e 2e 2e 2e 2e
>1bd2	12		               .byte     18             ; position 15
>1bd3	20 20 20 46	               .text     "   f8   "
>1bd7	38 20 20 20
>1bdb	92 00		               .byte     146,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.1bdd			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.1bdd			screendis
.1bdd	08		               php
.1bde	48		               pha
.1bdf	ad 11 d0	               lda  $d011
.1be2	29 ef		               and  #%11101111
.1be4	8d 11 d0	               sta  $d011
.1be7	68		               pla
.1be8	28		               plp
.1be9	60		               rts
.1bea			screenena
.1bea	08		               php
.1beb	48		               pha
.1bec	ad 11 d0	               lda  $d011
.1bef	09 10		               ora  #%00010000
.1bf1	8d 11 d0	               sta  $d011
.1bf4	68		               pla
.1bf5	28		               plp
.1bf6	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.1bf7			scrmaninit
.1bf7	20 2a 1d	               jsr  push
.1bfa	a9 06		               lda  #vbleu
.1bfc	8d 21 d0	               sta  vicbackcol
.1bff	a9 05		               lda  #vvert
.1c01	8d 20 d0	               sta  vicbordcol
.1c04	a9 01		               lda  #vblanc
.1c06	8d 86 02	               sta  bascol
.1c09	ad 00 04	               lda  scrnram
.1c0c	8d 00 04	               sta  scrnram
.1c0f	20 17 1c	               jsr  cls
.1c12	20 69 1d	               jsr  pop
.1c15	60		               rts
>1c16	8e		characterset   .byte b_uppercase
.1c17			cls
.1c17	08		               php
.1c18	48		               pha
.1c19	a9 93		               lda  #$93
.1c1b	20 33 1c	               jsr  putch
.1c1e	a9 0e		               lda  #$0e
.1c20	20 33 1c	               jsr  putch
.1c23	68		               pla
.1c24	28		               plp
.1c25	60		               rts
.1c26			putnch
.1c26	08		               php
.1c27	e0 00		               cpx  #$00
.1c29	f0 06		               beq  out
.1c2b	20 d2 ff	again          jsr  $ffd2
.1c2e	ca		               dex
.1c2f	d0 fa		               bne  again
.1c31	28		out            plp
.1c32	60		               rts
.1c33			putch
.1c33	08		               php
.1c34	20 d2 ff	               jsr  $ffd2
.1c37	28		               plp
.1c38	60		               rts
.1c39			puts
.1c39	20 2a 1d	               jsr  push
.1c3c	86 fb		               stx  zpage1
.1c3e	84 fc		               sty  zpage1+1
.1c40	a0 00		               ldy  #0
.1c42	b1 fb		next           lda  (zpage1),y
.1c44	f0 09		               beq  exit
.1c46	20 33 1c	               jsr  putch
.1c49	20 31 1e	               jsr  inczp1
.1c4c	4c 42 1c	               jmp  next
.1c4f	20 69 1d	exit           jsr  pop
.1c52	60		               rts
.1c53			gotoxy
.1c53	08		               php
.1c54	18		               clc
.1c55	8a		               txa
.1c56	48		               pha
.1c57	98		               tya
.1c58	aa		               tax
.1c59	68		               pla
.1c5a	a8		               tay
.1c5b	20 f0 ff	               jsr  kplot
.1c5e	28		               plp
.1c5f	60		               rts
.1c60			cursor
=$0286			bascol    =    $0286
.1c60	08		               php
.1c61	48		               pha
.1c62	90 12		               bcc  restore
.1c64	20 f0 ff	               jsr  kplot
.1c67	8c 88 1c	               sty  cx
.1c6a	8e 89 1c	               stx  cy
.1c6d	ad 86 02	               lda  bascol
.1c70	8d 8a 1c	               sta  bcol
.1c73	4c 85 1c	               jmp  out
.1c76	ae 89 1c	restore        ldx  cy
.1c79	ac 88 1c	               ldy  cx
.1c7c	20 f0 ff	               jsr  kplot
.1c7f	ad 8a 1c	               lda  bcol
.1c82	8d 86 02	               sta  bascol
.1c85	68		out            pla
.1c86	28		               plp
.1c87	60		               rts
>1c88	00		cx   .byte     $00
>1c89	00		cy   .byte     $00
>1c8a	00		bcol .byte     $00
.1c8b			cursave
.1c8b	08		               php
.1c8c	38		               sec
.1c8d	20 60 1c	               jsr  cursor
.1c90	28		               plp
.1c91	60		               rts
.1c92			curput
.1c92	08		               php
.1c93	18		               clc
.1c94	20 60 1c	               jsr  cursor
.1c97	28		               plp
.1c98	60		               rts
.1c99			putsxy
.1c99	20 2a 1d	               jsr  push
.1c9c	86 fb		               stx  zpage1
.1c9e	84 fc		               sty  zpage1+1
.1ca0	a0 00		               ldy  #$00
.1ca2	b1 fb		               lda  (zpage1),y
.1ca4	aa		               tax
.1ca5	20 31 1e	               jsr  inczp1
.1ca8	b1 fb		               lda  (zpage1),y
.1caa	a8		               tay
.1cab	20 53 1c	               jsr  gotoxy
.1cae	20 31 1e	               jsr  inczp1
.1cb1	a6 fb		               ldx  zpage1
.1cb3	a4 fc		               ldy  zpage1+1
.1cb5	20 39 1c	               jsr  puts
.1cb8	20 69 1d	               jsr  pop
.1cbb	60		               rts
>1cbc	00 00		straddr   .word     $00
>1cbe	00		px        .byte     $00
>1cbf	00		py        .byte     $00
>1cc0	00 00		zp1       .word     $00
.1cc2			putscxy
.1cc2	20 2a 1d	               jsr  push
.1cc5	84 fc		               sty  zpage1+1
.1cc7	86 fb		               stx  zpage1
.1cc9	ad 86 02	               lda  bascol
.1ccc	8d ec 1c	               sta  bc
.1ccf	a0 00		               ldy #$00
.1cd1	b1 fb		               lda  (zpage1),y
.1cd3	8d 86 02	               sta  bascol
.1cd6	20 31 1e	               jsr  inczp1
.1cd9	a6 fb		               ldx  zpage1
.1cdb	a4 fc		               ldy  zpage1+1
.1cdd	20 99 1c	               jsr  putsxy
.1ce0	ad ec 1c	               lda  bc
.1ce3	8d 86 02	               sta  bascol
.1ce6	20 69 1d	               jsr  pop
.1ce9	60		               rts
>1cea	00 00		straddr  .word      $00
>1cec	00		bc       .byte      $00
>1ced	00 00		zp1      .word      $00
.1cef			putrahex
.1cef	08		               php
.1cf0	48		               pha
.1cf1	20 47 1f	               jsr  a2hex
.1cf4	a9 e6		               lda  #<a2hexstr
.1cf6	a0 1e		               ldy  #>a2hexstr
.1cf8	20 39 1c	               jsr  puts
.1cfb	68		               pla
.1cfc	28		               plp
.1cfd	60		               rts
.1cfe			kputrahexxy
.1cfe			bputrahexxy
.1cfe			putrahexxy
.1cfe	08		               php
.1cff	20 47 1f	               jsr  a2hex
.1d02	a9 e3		               lda  #<a2hexpos
.1d04	a0 1e		               ldy  #>a2hexpos
.1d06	20 99 1c	               jsr  putsxy
.1d09	68		               pla
.1d0a	28		               plp
.1d0b	60		               rts
.1d0c			putrahexcxy
.1d0c	08		               php
.1d0d	20 47 1f	               jsr  a2hex
.1d10	a9 e3		               lda  #<a2hexpos
.1d12	a0 1e		               ldy  #>a2hexpos
.1d14	20 c2 1c	               jsr  putscxy
.1d17	68		               pla
.1d18	28		               plp
.1d19	60		               rts
.1d1a			setinverse
.1d1a	48		               pha
.1d1b	a9 12		               lda  #$12
.1d1d	20 d2 ff	               jsr  $ffd2
.1d20	68		               pla
.1d21	60		               rts
.1d22			clrinverse
.1d22	48		               pha
.1d23	a9 92		               lda  #$92
.1d25	20 d2 ff	               jsr  $ffd2
.1d28	68		               pla
.1d29	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.1d2a			push
.1d2a	08		          php            ; stack : flg, pcl, pch
.1d2b	78		          sei
.1d2c	8d 66 1d	          sta  ra        ; save a
.1d2f	68		          pla            ; stack : pcl, pch
.1d30	8d 65 1d	          sta  rp        ; save rp
.1d33	68		          pla            ; stack : pch
.1d34	8d 67 1d	          sta  pc        ; save pcl
.1d37	68		          pla            ; stack : -
.1d38	8d 68 1d	          sta  pc+1      ; save pch
.1d3b	a5 fb		          lda  zpage1    ; get zpage1 low byte
.1d3d	48		          pha            ; stack : zp1l
.1d3e	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.1d40	48		          pha            ; stack : zp1h, zp1l
.1d41	a5 fd		          lda  zpage2    ; get zpage2 low byte
.1d43	48		          pha            ; stack : zp2l, zp1h, zp1l
.1d44	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.1d46	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1d47	ad 65 1d	          lda  rp        ; get rp
.1d4a	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1d4b	ad 66 1d	          lda  ra        ; get a
.1d4e	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1d4f	8a		          txa            ; get x
.1d50	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1d51	98		          tya            ; get y
.1d52	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1d53	ad 68 1d	          lda  pc+1      ; get pch
.1d56	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1d57	ad 67 1d	          lda  pc        ; get pcl
.1d5a	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1d5b	ad 65 1d	          lda  rp        ; get rp
.1d5e	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1d5f	ad 66 1d	          lda  ra        ; get a
.1d62	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1d63	58		          cli
.1d64	60		          rts
>1d65	00		rp        .byte     0
>1d66	00		ra        .byte     0
>1d67	00 00		pc        .word     0
.1d69			pull
.1d69			pop
.1d69	78		          sei
.1d6a	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1d6b	8d 9e 1d	          sta  pc        ; save pcl
.1d6e	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1d6f	8d 9f 1d	          sta  pc+1      ; save pch
.1d72	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1d73	a8		          tay            ; set y
.1d74	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1d75	aa		          tax            ; set x
.1d76	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1d77	8d 9d 1d	          sta  ra        ; save a
.1d7a	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1d7b	8d 9c 1d	          sta  rp        ; save rp
.1d7e	68		          pla            ; stack : zp2l, zp1h, zp1l
.1d7f	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.1d81	68		          pla            ; stack : zp1h, zp1l
.1d82	85 fd		          sta  zpage2    ; get zpage2 High byte
.1d84	68		          pla            ; stack : zp1l
.1d85	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.1d87	68		          pla            ; stack :
.1d88	85 fb		          sta  zpage1    ; get zpage1 High byte
.1d8a	ad 9f 1d	          lda  pc+1      ; get pch
.1d8d	48		          pha            ; stack : pch
.1d8e	ad 9e 1d	          lda  pc
.1d91	48		          pha            ; stack : pcl, pch
.1d92	ad 9c 1d	          lda  rp        ; get rp
.1d95	48		          pha            ; stack : rp, pcl, pch
.1d96	ad 9d 1d	          lda  ra        ; set ra
.1d99	58		          cli
.1d9a	28		          plp            ; stack : pcl, pch
.1d9b	60		          rts
>1d9c	00		rp        .byte     0
>1d9d	00		ra        .byte     0
>1d9e	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.1da0			blkfill
.1da0	20 2a 1d	bf0            jsr  push
.1da3	20 61 1e	               jsr  savezp1
.1da6	84 fc		               sty  zpage1+1
.1da8	a0 00		               ldy  #$00
.1daa	84 fb		               sty  zpage1
.1dac	91 fb		bf1            sta  (zpage1),y
.1dae	c8		               iny
.1daf	d0 fb		               bne  bf1
.1db1	20 70 1e	               jsr  restzp1
.1db4	20 69 1d	               jsr  pop
.1db7	60		               rts
.1db8			memfill
.1db8	20 2a 1d	               jsr  push
.1dbb	20 a0 1d	mf1            jsr  blkfill
.1dbe	c8		               iny
.1dbf	ca		               dex
.1dc0	d0 f9		               bne  mf1
.1dc2	20 69 1d	               jsr  pop
.1dc5	60		               rts
.1dc6			memmove
.1dc6	20 2a 1d	               jsr  push
.1dc9	ba		               tsx            ; On se crée un pointeur ...
.1dca	8a		               txa
.1dcb	18		               clc
.1dcc	69 0b		               adc  #11
.1dce	a8		               tay
.1dcf	a2 06		               ldx  #$06
.1dd1	b9 00 01	nextbyte       lda  $0100,y
.1dd4	99 20 1e	               sta  words,y
.1dd7	c8		               iny
.1dd8	ca		               dex
.1dd9	d0 f6		               bne  nextbyte
.1ddb	ad 20 1e	               lda  s
.1dde	8d f7 1d	               sta  source+1
.1de1	ad 21 1e	               lda  s+1
.1de4	8d f8 1d	               sta  source+2
.1de7	ad 22 1e	               lda  d
.1dea	8d f4 1d	               sta  destin+1
.1ded	ad 23 1e	               lda  d+1
.1df0	8d f5 1d	               sta  destin+2
.1df3	ad ff ff	destin         lda  $ffff
.1df6	8d ff ff	source         sta  $ffff
.1df9	ee f4 1d	               inc  destin+1
.1dfc	d0 03		               bne  src
.1dfe	ee f5 1d	               inc  destin+2
.1e01	ee f7 1d	src            inc  source+1
.1e04	d0 03		               bne  cnt
.1e06	ee f8 1d	               inc  source+2
.1e09	ad 24 1e	cnt            lda  compte
.1e0c	d0 08		               bne  decit
.1e0e	ad 25 1e	               lda  compte+1
.1e11	f0 09		               beq  fini
.1e13	ce 25 1e	               dec  compte+1
.1e16	ce 24 1e	decit          dec  compte
.1e19	4c f3 1d	               jmp  destin
.1e1c	20 69 1d	fini           jsr  pop
.1e1f	60		               rts
.1e20			words
>1e20	00 00		s         .word     $0000
>1e22	00 00		d         .word     $0000
>1e24	00 00		compte    .word     $0000
.1e26			decword
.1e26	20 2a 1d	               jsr  push
.1e29	86 fd		               stx  zpage2
.1e2b	84 fe		               sty  zpage2+1
.1e2d	20 69 1d	               jsr  pop
.1e30	60		               rts
.1e31			inczp1
.1e31	08		               php
.1e32	48		               pha
.1e33	e6 fb		               inc  zpage1
.1e35	a5 fb		               lda  zpage1
.1e37	d0 02		               bne  nopage
.1e39	e6 fc		               inc  zpage1+1
.1e3b	68		nopage         pla
.1e3c	28		               plp
.1e3d	60		               rts
.1e3e			deczp1
.1e3e	08		                php
.1e3f	48		                pha
.1e40	c6 fb		                dec  zpage1
.1e42	d0 02		                bne  nopage
.1e44	c6 fc		                dec  zpage1+1
.1e46	68		nopage          pla
.1e47	28		                plp
.1e48	60		                rts
.1e49			inczp2
.1e49	08		               php
.1e4a	48		               pha
.1e4b	e6 fd		               inc  zpage2
.1e4d	a5 fd		               lda  zpage2
.1e4f	d0 02		               bne  nopage
.1e51	e6 fe		               inc  zpage2+1
.1e53	68		nopage         pla
.1e54	28		               plp
.1e55	60		               rts
.1e56			deczp2
.1e56	08		               php
.1e57	48		               pha
.1e58	a5 fd		               lda  zpage2
.1e5a	d0 02		               bne  nopage
.1e5c	c6 fe		               dec  zpage2+1
.1e5e	68		nopage         pla
.1e5f	28		               plp
.1e60	60		               rts
.1e61			savezp1
.1e61	08		               php
.1e62	48		               pha
.1e63	a5 fb		               lda  zpage1
.1e65	8d dd 1e	               sta  zp1
.1e68	a5 fc		               lda  zpage1+1
.1e6a	8d de 1e	               sta  zp1+1
.1e6d	68		               pla
.1e6e	28		               plp
.1e6f	60		               rts
.1e70			restzp1
.1e70	08		               php
.1e71	48		               pha
.1e72	ad dd 1e	               lda zp1
.1e75	85 fb		               sta zpage1
.1e77	ad de 1e	               lda zp1+1
.1e7a	85 fc		               sta zpage1+1
.1e7c	68		               pla
.1e7d	28		               plp
.1e7e	60		               rts
.1e7f			savezp2
.1e7f	08		         php
.1e80	48		         pha
.1e81	a5 fd		         lda zpage2
.1e83	8d df 1e	         sta zp2
.1e86	a5 fe		         lda zpage2+1
.1e88	8d e0 1e	         sta zp2+1
.1e8b	68		         pla
.1e8c	28		         plp
.1e8d	60		         rts
.1e8e			restzp2
.1e8e	08		                php
.1e8f	48		                pha
.1e90	ad df 1e	                lda  zp2
.1e93	85 fd		                sta  zpage2
.1e95	ad e0 1e	                lda  zp2+1
.1e98	85 fe		                sta  zpage2+1
.1e9a	68		                pla
.1e9b	28		                plp
.1e9c	60		                rts
.1e9d			xy2addr
.1e9d	08		                php
.1e9e	48		                pha
.1e9f	8a		                txa
.1ea0	48		                pha
.1ea1	98		                tya
.1ea2	48		                pha
.1ea3	ad d8 1e	                lda     addr1+1
.1ea6	8d da 1e	                sta     addr2+1
.1ea9	ad d7 1e	                lda     addr1
.1eac	8d d9 1e	                sta     addr2
.1eaf	c0 00		                cpy     #$00
.1eb1	f0 0f		                beq     addx
.1eb3	18		moreline        clc
.1eb4	6d d6 1e	                adc     ymult
.1eb7	90 03		                bcc     norepy
.1eb9	ee da 1e	                inc     addr2+1
.1ebc	8d d9 1e	norepy          sta     addr2
.1ebf	88		                dey
.1ec0	d0 f1		                bne     moreline
.1ec2	8a		addx            txa
.1ec3	18		                clc
.1ec4	6d d9 1e	                adc     addr2
.1ec7	90 03		                bcc     thatsit
.1ec9	ee da 1e	                inc     addr2+1
.1ecc	8d d9 1e	thatsit         sta     addr2
.1ecf	68		                pla
.1ed0	a8		                tay
.1ed1	68		                pla
.1ed2	aa		                tax
.1ed3	68		                pla
.1ed4	28		                plp
.1ed5	60		                rts
>1ed6	28		ymult          .byte     40
>1ed7	00 00		addr1          .word     $0000
>1ed9	00 00		addr2          .word     $0000
>1edb	00 00		bytecnt        .word     $0000
>1edd	00 00		zp1        .word   $0000
>1edf	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>1ee1	01		a2hexcol       .byte     1              ; pour aputscxy
>1ee2	00		a2hexbkcol     .byte     %00000000
.1ee3			a2hexpos
>1ee3	00		a2hexpx        .byte     0              ; pour aputsxy
>1ee4	00		a2hexpy        .byte     0
>1ee5	24		a2hexprefix    .byte     "$"            ; pour aputs
>1ee6	00 00		a2hexstr       .word     $00
>1ee8	00 00		               .word     $00
>1eea	00		               .byte     0              ; 0 end string
>1eeb	30 30 30 30	abin           .null     "00000000"
>1eef	30 30 30 30 00
>1ef4	20 20 20 00	adec           .null     "   "
.1ef8			putahexfmtxy
.1ef8	20 2a 1d	               jsr  push
.1efb	20 47 1f	               jsr  a2hex
.1efe	ae e3 1e	               ldx  a2hexpx
.1f01	ac e4 1e	               ldy  a2hexpy
.1f04	20 53 1c	               jsr  gotoxy
.1f07	a2 e5		               ldx  #<a2hexprefix
.1f09	a0 1e		               ldy  #>a2hexprefix
.1f0b	20 39 1c	               jsr  puts
.1f0e	20 69 1d	               jsr  pop
.1f11	60		               rts
.1f12			putahexfmt
.1f12	20 2a 1d	               jsr  push
.1f15	20 47 1f	               jsr  a2hex
.1f18	a2 e5		               ldx  #<a2hexprefix
.1f1a	a0 1e		               ldy  #>a2hexprefix
.1f1c	20 39 1c	               jsr  puts
.1f1f	20 69 1d	               jsr  pop
.1f22	60		               rts
.1f23			putahex
.1f23	20 2a 1d	               jsr  push
.1f26	20 47 1f	               jsr  a2hex
.1f29	a2 e6		               ldx  #<a2hexstr
.1f2b	a0 1e		               ldy  #>a2hexstr
.1f2d	20 39 1c	               jsr  puts
.1f30	20 69 1d	               jsr  pop
.1f33	60		               rts
.1f34			nib2hex
.1f34	08		               php
.1f35	29 0f		               and  #$0f
.1f37	f8		               sed
.1f38	18		               clc
.1f39	69 90		               adc  #$90
.1f3b	69 40		               adc  #$40
.1f3d	d8		               cld
.1f3e	28		               plp
.1f3f	60		               rts
.1f40			lsra4bits
.1f40	08		               php
.1f41	4a		               lsr
.1f42	4a		               lsr
.1f43	4a		               lsr
.1f44	4a		               lsr
.1f45	28		               plp
.1f46	60		               rts
.1f47			a2hex
.1f47	08		               php
.1f48	48		               pha
.1f49	48		               pha
.1f4a	20 40 1f	               jsr  lsra4bits
.1f4d	20 34 1f	               jsr  nib2hex
.1f50	8d e6 1e	               sta  a2hexstr
.1f53	68		               pla
.1f54	20 34 1f	               jsr  nib2hex
.1f57	8d e7 1e	               sta  a2hexstr+1
.1f5a	a9 00		               lda  #$00                ; set end of string
.1f5c	8d e8 1e	               sta  a2hexstr+2
.1f5f	68		               pla
.1f60	28		               plp
.1f61	60		               rts
.1f62			xy2hex
.1f62	20 2a 1d	               jsr  push
.1f65	20 47 1f	               jsr  a2hex
.1f68	8a		               txa
.1f69	48		               pha
.1f6a	20 40 1f	               jsr  lsra4bits
.1f6d	20 34 1f	               jsr  nib2hex
.1f70	8d e6 1e	               sta  a2hexstr
.1f73	68		               pla
.1f74	20 34 1f	               jsr  nib2hex
.1f77	8d e7 1e	               sta  a2hexstr+1
.1f7a	98		               tya
.1f7b	48		               pha
.1f7c	20 40 1f	               jsr  lsra4bits
.1f7f	20 34 1f	               jsr  nib2hex
.1f82	8d e8 1e	               sta  a2hexstr+2
.1f85	68		               pla
.1f86	20 34 1f	               jsr  nib2hex
.1f89	8d e9 1e	               sta  a2hexstr+3
.1f8c	a9 00		               lda  #$00                ; 0 ended string
.1f8e	8d ea 1e	               sta  a2hexstr+4
.1f91	20 69 1d	               jsr  pop
.1f94			atobin
.1f94	20 2a 1d	               jsr  push
.1f97	a2 08		               ldx  #8
.1f99	a0 00		               ldy  #0
.1f9b	18		               clc
.1f9c	2a		nextbit        rol
.1f9d	48		               pha
.1f9e	69 00		               adc  #$00
.1fa0	29 01		               and  #$01
.1fa2	20 34 1f	               jsr  nib2hex
.1fa5	99 eb 1e	               sta  abin,y
.1fa8	68		               pla
.1fa9	c8		               iny
.1faa	ca		               dex
.1fab	d0 ef		               bne  nextbit
.1fad	a9 00		               lda  #0
.1faf	99 eb 1e	               sta  abin,y
.1fb2	20 69 1d	               jsr  pull
.1fb5	60		               rts
.1fb6			putabin
.1fb6	20 94 1f	               jsr     atobin
.1fb9	20 2a 1d	               jsr     push
.1fbc	a2 eb		               ldx     #<abin
.1fbe	a0 1e		               ldy     #>abin
.1fc0	20 39 1c	               jsr     puts
.1fc3	20 69 1d	               jsr     pop
.1fc6	60		               rts
.1fc7			printabin
.1fc7	20 2a 1d	               jsr     push
.1fca	a2 eb		               ldx     #<abin
.1fcc	a0 1e		               ldy     #>abin
.1fce	20 39 1c	               jsr     puts
.1fd1	20 69 1d	               jsr     pop
.1fd4	60		               rts
.1fd5			putabinfmt
.1fd5	08		               php
.1fd6	48		               pha
.1fd7	a9 25		               lda     #"%"
.1fd9	20 33 1c	               jsr     putch
.1fdc	68		               pla
.1fdd	20 b6 1f	               jsr     putabin
.1fe0	28		               plp
.1fe1	60		               rts
.1fe2			putabinxy
.1fe2	20 53 1c	               jsr     gotoxy
.1fe5	20 b6 1f	               jsr     putabin
.1fe8	60		               rts
.1fe9			putabinfmtxy
.1fe9	20 53 1c	               jsr     gotoxy
.1fec	20 d5 1f	               jsr     putabinfmt
.1fef	60		               rts
.1ff0			atodec
.1ff0	20 2a 1d	               jsr  push
.1ff3	f8		               sed
.1ff4	aa		               tax
.1ff5	a0 00		               ldy  #$00
.1ff7	a9 00		               lda  #$00
.1ff9	18		nextbit        clc
.1ffa	69 01		               adc  #$01
.1ffc	90 01		               bcc  decx
.1ffe	c8		               iny
.1fff	ca		decx           dex
.2000	d0 f7		               bne  nextbit
.2002	48		               pha
.2003	98		               tya
.2004	20 34 1f	               jsr  nib2hex
.2007	8d f4 1e	               sta  adec
.200a	68		               pla
.200b	48		               pha
.200c	20 34 1f	               jsr  nib2hex
.200f	8d f6 1e	               sta  adec+2
.2012	68		               pla
.2013	6a		               ror
.2014	6a		               ror
.2015	6a		               ror
.2016	6a		               ror
.2017	20 34 1f	               jsr  nib2hex
.201a	8d f5 1e	               sta  adec+1
.201d	d8		               cld
.201e	20 69 1d	               jsr  pull
.2021	60		               rts
>2022	00 00 00	buffer         .byte     0,0,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>2025	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>2029	00 00 00 00 00 00 00 00 00 0d 00 00
>2035	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>2039	00 00 00 00 00 00 00 00 00 00 00 00
>2045	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>2049	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>2055	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>2059	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>2065	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>2069	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>2075	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>2079	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>2085	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>2089	00 00 00 00 00 00 00 00 00 00 00 00
>2095	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>2099	00 00 00 00 00 00 00 00 00 00 00 00
>20a5	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>20a9	00 00 00 00 00 00 00 00 00 00 00 00
>20b5	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>20b9	00 00 00 00 00 00 00 00 00 00 00 00
>20c5	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>20c9	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>20d5	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>20d9	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>20e5	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>20e9	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>20f5	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>20f9	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>2105	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>2109	00 00 00 00 00 00 00 00 00 00 00 00
>2115	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>2119	00 00 00 00 00 00 00 00 00 00 00 00
.2125			waitstop
.2125	20 2a 1d	               jsr  push
.2128	20 ed f6	wait           jsr  k_stop
.212b	d0 fb		               bne  wait
.212d	20 69 1d	               jsr  pop
.2130	60		               rts
.2131			anykey
.2131	08		               php
.2132	48		               pha
.2133	a5 cb		nokey          lda 203
.2135	c9 40		               cmp #64
.2137	f0 fa		               beq nokey
.2139	20 3f 21	               jsr releasekey
.213c	68		               pla
.213d	28		               plp
.213e	60		               rts
.213f			releasekey
.213f	08		               php
.2140	48		               pha
.2141	a5 cb		keypressed     lda 203
.2143	c9 40		               cmp #64
.2145	d0 fa		               bne keypressed
.2147	68		               pla
.2148	28		               plp
.2149	60		               rts
.214a			getkey
.214a	20 e4 ff	again          jsr  getin
.214d	c9 00		               cmp  #0
.214f	f0 f9		               beq  again
.2151	60		               rts
.2152			waitkey
.2152	20 2a 1d	               jsr  push
.2155	8d a3 21	               sta  thekey
.2158	20 e4 ff	nope           jsr  getin
.215b	20 d2 ff	               jsr  chrout
.215e	cd a3 21	               cmp  thekey
.2161	d0 f5		               bne  nope
.2163	20 d2 ff	               jsr  chrout
.2166	20 69 1d	               jsr  pop
.2169	60		               rts
.216a			waitspace
.216a	20 2a 1d	               jsr  push
.216d	a9 7f		wait           lda  #$7f  ;%01111111
.216f	8d 00 dc	               sta  $dc00
.2172	ad 01 dc	               lda  $dc01
.2175	29 10		               and  #$10  ;mask %00010000
.2177	d0 f4		               bne  wait
.2179	20 69 1d	               jsr  pop
.217c			waitsstop
.217c	20 2a 1d	               jsr  push
.217f	20 ed f6	wait           jsr  k_stop  ;%01111111
.2182	d0 fb		               bne  wait
.2184	20 69 1d	               jsr  pop
.2187			waitreturn
.2187	20 2a 1d	               jsr  push
.218a	ad a4 21	               lda  thecount
.218d	8d 00 04	               sta  scrnram
.2190	a9 02		               lda  #$02
.2192	8d 00 d8	               sta  colorram
.2195	20 e4 ff	nope           jsr  getin
.2198	c9 0d		nohex          cmp  #$0d
.219a	d0 f9		               bne  nope
.219c	ee a4 21	               inc  thecount
.219f	20 69 1d	               jsr  pop
.21a2	60		               rts
>21a3	00		thekey         .byte   0
>21a4	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  End of listing

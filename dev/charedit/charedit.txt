
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Wed Nov  8 00:24:23 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm

=$0d			flashcol = vvert1

;******  Return to file: charedit.asm

=$0400			scrnnewram     = $0400
=14			charsdef       = 14
.080d			main
.080d	20 7a 16	               jsr  push
.0810	20 2d 15	               jsr  screendis
.0813	20 47 15	               jsr  scrmaninit
.0816	20 4f 0a	               jsr  copycharset
.0819	20 3e 0a	               jsr  setscreenptr
.081c	20 b0 0a	               jsr  staticscreen
.081f	20 3a 15	               jsr  screenena
.0822	a9 00		               lda  #$00
.0824	8d ad 09	               sta  fkeyset
.0827	20 ec 0a	               jsr  showfkeys
.082a	20 b9 16	               jsr  pop
.082d	20 81 10	               jsr  f8action
.0830	20 81 10	               jsr  f8action
.0833	20 39 09	               jsr  keyaction
.0836	20 7a 16	               jsr  push
.0839	a2 00		               ldx  #0
.083b	a0 00		               ldy  #0
.083d	20 a3 15	               jsr  gotoxy
.0840	20 b9 16	               jsr  pop
.0843	60		               rts
.0844	20 67 15	               jsr  cls
.0847	20 7a 16	               jsr  push
.084a	a2 21		               ldx  #<blankmsg
.084c	a0 11		               ldy  #>blankmsg
.084e	20 12 16	               jsr  putscxy
.0851	a2 50		               ldx  #<bye_msg
.0853	a0 13		               ldy  #>bye_msg
.0855	20 12 16	               jsr  putscxy
.0858	20 b9 16	               jsr  pop
.085b	20 7a 16	               jsr  push
.085e	a2 21		               ldx  #<blankmsg
.0860	a0 11		               ldy  #>blankmsg
.0862	20 12 16	               jsr  putscxy
.0865	a2 72		               ldx  #<any_msg
.0867	a0 13		               ldy  #>any_msg
.0869	20 12 16	               jsr  putscxy
.086c	20 b9 16	               jsr  pop
.086f	20 7a 16	               jsr  push
.0872	a2 00		               ldx  #0
.0874	a0 00		               ldy  #0
.0876	20 a3 15	               jsr  gotoxy
.0879	20 b9 16	               jsr  pop
.087c	20 52 1a	               jsr  getkey
.087f	20 66 fe	               jsr  k_warmboot
.0882	60		               rts
.0883			template
.0883	20 7a 16	               jsr  push
.0886	20 b9 16	               jsr  pop
.0889	60		               rts
.088a			showkeyval
.088a	20 7a 16	               jsr  push
.088d	20 7a 16	               jsr  push
.0890	a2 00		               ldx  #0
.0892	a0 14		               ldy  #20
.0894	20 a3 15	               jsr  gotoxy
.0897	20 b9 16	               jsr  pop
.089a	20 83 15	               jsr  putch
.089d	20 7a 16	               jsr  push
.08a0	a2 00		               ldx  #0
.08a2	a0 15		               ldy  #21
.08a4	20 a3 15	               jsr  gotoxy
.08a7	20 b9 16	               jsr  pop
.08aa	48		               pha            ;1
.08ab	a9 24		               lda  #'$'
.08ad	20 83 15	               jsr  putch
.08b0	68		               pla            ;0
.08b1	48		               pha            ;1
.08b2	aa		               tax
.08b3	bd 2d 19	               lda  asciitorom,x
.08b6	20 66 18	               jsr  putahex
.08b9	68		               pla            ;0
.08ba	20 7a 16	               jsr  push
.08bd	a2 15		               ldx  #<txt1
.08bf	a0 09		               ldy  #>txt1
.08c1	20 89 15	               jsr  puts
.08c4	20 b9 16	               jsr  pull
.08c7	20 7a 16	               jsr  push
.08ca	a2 00		               ldx  #0
.08cc	a0 16		               ldy  #22
.08ce	20 a3 15	               jsr  gotoxy
.08d1	20 b9 16	               jsr  pop
.08d4	48		               pha            ;1
.08d5	a9 24		               lda  #'$'
.08d7	20 83 15	               jsr  putch
.08da	68		               pla            ;0
.08db	20 66 18	               jsr  putahex
.08de	20 7a 16	               jsr  push
.08e1	a2 23		               ldx  #<txt2
.08e3	a0 09		               ldy  #>txt2
.08e5	20 89 15	               jsr  puts
.08e8	20 b9 16	               jsr  pull
.08eb	20 7a 16	               jsr  push
.08ee	a2 00		               ldx  #0
.08f0	a0 18		               ldy  #24
.08f2	20 a3 15	               jsr  gotoxy
.08f5	20 b9 16	               jsr  pop
.08f8	48		               pha            ;1
.08f9	20 7a 16	               jsr  push
.08fc	a2 31		               ldx  #<txt3
.08fe	a0 09		               ldy  #>txt3
.0900	20 89 15	               jsr  puts
.0903	20 b9 16	               jsr  pull
.0906	a9 25		               lda  #'%'
.0908	20 83 15	               jsr  putch
.090b	ba		               tsx
.090c	8a		               txa
.090d	20 01 19	               jsr  putabin
.0910	68		               pla            ;0
.0911	20 b9 16	               jsr  pop
.0914	60		               rts
>0915	20 50 45 54	txt1           .null     " petscii code"
>0919	53 43 49 49 20 43 4f 44 45 00
>0923	20 47 45 54	txt2           .null     " getkey  code"
>0927	4b 45 59 20 20 43 4f 44 45 00
>0931	53 54 41 43	txt3           .null     "stack: "
>0935	4b 3a 20 00
.0939			keyaction
.0939	20 7a 16	               jsr  push
.093c			loop
.093c	20 52 1a	               jsr  getkey
.093f	20 8a 08	               jsr  showkeyval
.0942	c9 85		               cmp  #key_f1
.0944	f0 23		               beq  f1
.0946	c9 89		               cmp  #key_f2
.0948	f0 25		               beq  f2
.094a	c9 86		               cmp  #key_f3
.094c	f0 27		               beq  f3
.094e	c9 8a		               cmp  #key_f4
.0950	f0 29		               beq  f4
.0952	c9 87		               cmp  #key_f5
.0954	f0 2b		               beq  f5
.0956	c9 8b		               cmp  #key_f6
.0958	f0 2d		               beq  f6
.095a	c9 88		               cmp  #key_f7
.095c	f0 2f		               beq  f7
.095e	c9 8c		               cmp  #key_f8
.0960	f0 31		               beq  f8
.0962	c9 18		               cmp  #ctrl_x
.0964	f0 33		               beq  quit
.0966	4c 3c 09	               jmp  loop
.0969	20 2e 0c	f1             jsr  f1action
.096c	4c 3c 09	               jmp  loop
.096f	20 f1 0c	f2             jsr  f2action
.0972	4c 3c 09	               jmp  loop
.0975	20 89 0d	f3             jsr  f3action
.0978	4c 3c 09	               jmp  loop
.097b	20 21 0e	f4             jsr  f4action
.097e	4c 3c 09	               jmp  loop
.0981	20 b9 0e	f5             jsr  f5action
.0984	4c 3c 09	               jmp  loop
.0987	20 51 0f	f6             jsr  f6action
.098a	4c 3c 09	               jmp  loop
.098d	20 e9 0f	f7             jsr  f7action
.0990	4c 3c 09	               jmp  loop
.0993	20 81 10	f8             jsr  f8action
.0996	4c 3c 09	               jmp  loop
.0999	20 b9 16	quit           jsr  pop
.099c	60		               rts
>099d	0a 01 05	keyaction_msg  .byte vrose,1,5
>09a0	5b 4b 45 59	               .null     "[keyaction]"
>09a4	41 43 54 49 4f 4e 5d 00
>09ac	00		editmode       .byte     0
>09ad	00		fkeyset        .byte     0
>09ae	00		currentchar    .byte     0
.09af			editor
.09af	20 7a 16	               jsr  push
.09b2	20 7a 16	               jsr  push
.09b5	a2 21		               ldx  #<blankmsg
.09b7	a0 11		               ldy  #>blankmsg
.09b9	20 12 16	               jsr  putscxy
.09bc	a2 3b		               ldx  #<exit_msg
.09be	a0 13		               ldy  #>exit_msg
.09c0	20 12 16	               jsr  putscxy
.09c3	20 b9 16	               jsr  pop
.09c6	20 7a 16	               jsr  push
.09c9	a2 21		               ldx  #<blankmsg
.09cb	a0 11		               ldy  #>blankmsg
.09cd	20 12 16	               jsr  putscxy
.09d0	a2 4c		               ldx  #<edit_msg
.09d2	a0 11		               ldy  #>edit_msg
.09d4	20 12 16	               jsr  putscxy
.09d7	20 b9 16	               jsr  pop
.09da			ed_loop
.09da	20 52 1a	               jsr  getkey
.09dd	20 8a 08	               jsr  showkeyval
.09e0	c9 91		               cmp  #cursu
.09e2	f0 27		               beq  do_up
.09e4	c9 11		               cmp  #cursd
.09e6	f0 26		               beq  do_down
.09e8	c9 9d		               cmp  #cursl
.09ea	f0 25		               beq  do_left
.09ec	c9 1d		               cmp  #cursr
.09ee	f0 24		               beq  do_right
.09f0	c9 20		               cmp  #$20
.09f2	f0 23		               beq  do_swap
.09f4	c9 18		               cmp  #ctrl_x
.09f6	f0 22		               beq  do_ctrlx
.09f8	20 7a 16	               jsr  push
.09fb	a2 0b		               ldx  #11
.09fd	a0 11		               ldy  #17
.09ff	20 a3 15	               jsr  gotoxy
.0a02	20 b9 16	               jsr  pop
.0a05	20 83 15	               jsr putch
.0a08	4c da 09	               jmp  ed_loop
.0a0b			do_up
.0a0b	4c da 09	               jmp  ed_loop
.0a0e			do_down
.0a0e	4c da 09	               jmp  ed_loop
.0a11			do_left
.0a11	4c da 09	               jmp  ed_loop
.0a14			do_right
.0a14	4c da 09	               jmp  ed_loop
.0a17			do_swap
.0a17	4c da 09	               jmp  ed_loop
.0a1a			do_ctrlx
.0a1a	20 7a 16	               jsr  push
.0a1d	a2 21		               ldx  #<blankmsg
.0a1f	a0 11		               ldy  #>blankmsg
.0a21	20 12 16	               jsr  putscxy
.0a24	a2 26		               ldx  #<quit_msg
.0a26	a0 13		               ldy  #>quit_msg
.0a28	20 12 16	               jsr  putscxy
.0a2b	20 b9 16	               jsr  pop
.0a2e	20 b9 16	               jsr  pop
.0a31	60		               rts
>0a32	0a 01 05	editor_msg     .byte vrose,1,5
>0a35	5b 45 44 49	               .null     "[editor]"
>0a39	54 4f 52 5d 00
.0a3e			setscreenptr
.0a3e	20 7a 16	               jsr  push
.0a41	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.0a44	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.0a46	09 0e		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.0a48	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.0a4b	20 b9 16	               jsr  pop
.0a4e	60		               rts
.0a4f			copycharset
.0a4f	20 7a 16	               jsr  push
.0a52	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0a55	29 fe		               and  #%11111110     ;254
.0a57	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0a5a	a5 01		               lda  u6510map       ;$01
.0a5c	29 fb		               and  #%11111011     ;251
.0a5e	85 01		               sta  u6510map       ;$01
.0a60	20 75 0a	               jsr  memcopy
.0a63	a5 01		               lda  u6510map       ;$01
.0a65	09 04		               ora  #%00000100
.0a67	85 01		               sta  u6510map       ;$01
.0a69	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0a6c	09 01		               ora  #%00000001     ;254
.0a6e	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0a71	20 b9 16	               jsr  pop
.0a74	60		               rts
.0a75			memcopy
.0a75	20 7a 16	               jsr  push
.0a78	ad aa 0a	               lda  startaddr
.0a7b	85 fb		               sta  zpage1
.0a7d	ad ab 0a	               lda  startaddr+1
.0a80	85 fc		               sta  zpage1+1
.0a82	ad ae 0a	               lda  destaddr
.0a85	85 fd		               sta  zpage2
.0a87	ad af 0a	               lda  destaddr+1
.0a8a	85 fe		               sta  zpage2+1
.0a8c	a0 00		               ldy  #$00
.0a8e	b1 fb		onemore        lda  (zpage1),y
.0a90	91 fd		               sta  (zpage2),y
.0a92	20 81 17	               jsr  inczp1
.0a95	20 99 17	               jsr  inczp2
.0a98	a5 fc		               lda  zpage1+1
.0a9a	cd ad 0a	               cmp  stopaddr+1
.0a9d	d0 ef		               bne  onemore
.0a9f	a5 fb		               lda  zpage1
.0aa1	cd ac 0a	               cmp  stopaddr
.0aa4	d0 e8		               bne  onemore
.0aa6	20 b9 16	               jsr  pop
.0aa9	60		               rts
=14336			bitmapmem =    charsdef * 1024     ;Calcul de la position ram des caracteres.
=61440			mstopaddr =    $d000+(4*$800)
>0aaa	00 d0		startaddr      .word     $d000               ; 53248
>0aac	00 f0		stopaddr       .word     mstopaddr           ; 55296
>0aae	00 38		destaddr       .word     bitmapmem           ; $3000, 12288
.0ab0			staticscreen
.0ab0	48		               pha
.0ab1	a9 0c		               lda  #vgris1
.0ab3	8d 20 d0	               sta  $d020
.0ab6	68		               pla
.0ab7	48		               pha
.0ab8	a9 0b		               lda  #vgris
.0aba	8d 21 d0	               sta  $d021
.0abd	68		               pla
.0abe	20 8c 0b	               jsr  showlines
.0ac1	20 6d 0b	               jsr  showallchars
.0ac4	20 d4 0b	               jsr  showgrid
.0ac7	20 ec 0a	               jsr  showfkeys
.0aca	20 7a 16	               jsr  push
.0acd	a2 21		               ldx  #<blankmsg
.0acf	a0 11		               ldy  #>blankmsg
.0ad1	20 12 16	               jsr  putscxy
.0ad4	a2 26		               ldx  #<quit_msg
.0ad6	a0 13		               ldy  #>quit_msg
.0ad8	20 12 16	               jsr  putscxy
.0adb	20 b9 16	               jsr  pop
.0ade	20 7a 16	               jsr  push
.0ae1	a2 00		               ldx  #0
.0ae3	a0 07		               ldy  #7
.0ae5	20 a3 15	               jsr  gotoxy
.0ae8	20 b9 16	               jsr  pop
.0aeb	60		               rts
.0aec			showfkeys
.0aec	20 7a 16	               jsr  push
.0aef	ad ad 09	               lda  fkeyset
.0af2	c9 00		               cmp  #$0
.0af4	d0 3b		               bne  secondks
.0af6	a2 8d		               ldx #<f1abutton
.0af8	a0 13		               ldy #>f1abutton
.0afa	20 12 16	               jsr putscxy
.0afd	a2 a7		               ldx #<f2abutton
.0aff	a0 13		               ldy #>f2abutton
.0b01	20 12 16	               jsr putscxy
.0b04	a2 c1		               ldx #<f3abutton
.0b06	a0 13		               ldy #>f3abutton
.0b08	20 12 16	               jsr putscxy
.0b0b	a2 db		               ldx #<f4abutton
.0b0d	a0 13		               ldy #>f4abutton
.0b0f	20 12 16	               jsr putscxy
.0b12	a2 f5		               ldx #<f5abutton
.0b14	a0 13		               ldy #>f5abutton
.0b16	20 12 16	               jsr putscxy
.0b19	a2 0f		               ldx #<f6abutton
.0b1b	a0 14		               ldy #>f6abutton
.0b1d	20 12 16	               jsr putscxy
.0b20	a2 29		               ldx #<f7abutton
.0b22	a0 14		               ldy #>f7abutton
.0b24	20 12 16	               jsr putscxy
.0b27	a2 43		               ldx #<f8abutton
.0b29	a0 14		               ldy #>f8abutton
.0b2b	20 12 16	               jsr putscxy
.0b2e	4c 69 0b	               jmp end
.0b31			secondks
.0b31	a2 5d		               ldx #<f1bbutton
.0b33	a0 14		               ldy #>f1bbutton
.0b35	20 12 16	               jsr putscxy
.0b38	a2 77		               ldx #<f2bbutton
.0b3a	a0 14		               ldy #>f2bbutton
.0b3c	20 12 16	               jsr putscxy
.0b3f	a2 91		               ldx #<f3bbutton
.0b41	a0 14		               ldy #>f3bbutton
.0b43	20 12 16	               jsr putscxy
.0b46	a2 ab		               ldx #<f4bbutton
.0b48	a0 14		               ldy #>f4bbutton
.0b4a	20 12 16	               jsr putscxy
.0b4d	a2 c5		               ldx #<f5bbutton
.0b4f	a0 14		               ldy #>f5bbutton
.0b51	20 12 16	               jsr putscxy
.0b54	a2 df		               ldx #<f6bbutton
.0b56	a0 14		               ldy #>f6bbutton
.0b58	20 12 16	               jsr putscxy
.0b5b	a2 f9		               ldx #<f7bbutton
.0b5d	a0 14		               ldy #>f7bbutton
.0b5f	20 12 16	               jsr putscxy
.0b62	a2 13		               ldx #<f8bbutton
.0b64	a0 15		               ldy #>f8bbutton
.0b66	20 12 16	               jsr putscxy
.0b69	20 b9 16	end            jsr  pop
.0b6c	60		               rts
.0b6d			showallchars
.0b6d	20 7a 16	               jsr push
.0b70	20 7a 16	               jsr  push
.0b73	a2 00		               ldx  #0
.0b75	a0 00		               ldy  #0
.0b77	20 a3 15	               jsr  gotoxy
.0b7a	20 b9 16	               jsr  pop
.0b7d	a2 00		               ldx  #$00
.0b7f	8a		nextc          txa
.0b80	9d 00 04	               sta  scrnnewram,x
.0b83	e8		               inx
.0b84	e0 80		               cpx  #$80
.0b86	d0 f7		               bne  nextc
.0b88	20 b9 16	               jsr  pop
.0b8b	60		               rts
.0b8c			showlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.0b8c	20 7a 16	               jsr  push
.0b8f	a2 28		               ldx  #40
.0b91	a9 40		               lda  #64
.0b93	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.0b96	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.0b99	ca		               dex
.0b9a	e0 10		hline          cpx  #vlinepos
.0b9c	10 03		               bpl  notyet
.0b9e	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.0ba1	e0 00		notyet         cpx  #$00
.0ba3	d0 ee		               bne  nextl
.0ba5	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.0ba7	85 fb		               sta  zpage1
.0ba9	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.0bab	85 fc		               sta  zpage1+1
.0bad	a0 00		               ldy  #0
.0baf	a9 72		               lda  #114
.0bb1	91 fb		               sta  (zpage1),y
.0bb3	20 08 0c	               jsr  zp1add40
.0bb6	a2 12		               ldx  #24-hline2
.0bb8	a9 5d		               lda  #93
.0bba	91 fb		another93      sta  (zpage1),y
.0bbc	20 08 0c	               jsr  zp1add40
.0bbf	ca		               dex
.0bc0	d0 f8		               bne  another93
.0bc2	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.0bc4	85 fb		               sta  zpage1
.0bc6	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.0bc8	85 fc		               sta  zpage1+1
.0bca	a0 00		               ldy  #0
.0bcc	a9 73		               lda  #115
.0bce	91 fb		               sta  (zpage1),y
.0bd0	20 b9 16	               jsr  pop
.0bd3	60		               rts
.0bd4			showgrid
=8			gligne=8
=1			gcol=1
.0bd4	20 7a 16	               jsr  push
.0bd7	20 2d 15	               jsr  screendis
.0bda	a9 41		               lda  #<scrnnewram+(40*(gligne))+gcol
.0bdc	85 fb		               sta  zpage1
.0bde	a9 05		               lda  #>scrnnewram+(40*(gligne))+gcol
.0be0	85 fc		               sta  zpage1+1
.0be2	a2 08		               ldx  #8
.0be4	a9 65		nextbox        lda  #101
.0be6	a0 09		               ldy  #9
.0be8	91 fb		               sta  (zpage1),y
.0bea	88		               dey
.0beb	a9 4f		               lda  #79
.0bed	91 fb		nextcol        sta  (zpage1),y
.0bef	88		               dey
.0bf0	d0 fb		               bne  nextcol
.0bf2	20 08 0c	               jsr  zp1add40
.0bf5	ca		               dex
.0bf6	d0 ec		               bne  nextbox
.0bf8	a0 08		               ldy  #8
.0bfa	a9 77		               lda  #119
.0bfc	91 fb		nextlin        sta  (zpage1),y
.0bfe	88		               dey
.0bff	d0 fb		               bne  nextlin
.0c01	20 3a 15	               jsr screenena
.0c04	20 b9 16	               jsr  pop
.0c07	60		               rts
.0c08			zp1add40
.0c08	08		               php
.0c09	48		               pha
.0c0a	18		               clc
.0c0b	a5 fb		               lda  zpage1
.0c0d	69 28		               adc  #40
.0c0f	90 02		               bcc  nocarry
.0c11	e6 fc		               inc  zpage1+1
.0c13	85 fb		nocarry        sta  zpage1
.0c15	68		               pla
.0c16	28		               plp
.0c17	60		               rts
.0c18			delay
.0c18	20 7a 16	               jsr  push
.0c1b	a9 00		               lda  #$0
.0c1d	aa		               tax
.0c1e	a8		               tay
.0c1f	ca		xagain         dex
.0c20	ca		               dex
.0c21	88		yagain         dey
.0c22	c0 00		               cpy  #$00
.0c24	d0 fb		               bne  yagain
.0c26	e0 00		               cpx  #$00
.0c28	d0 f5		               bne  xagain
.0c2a	20 b9 16	               jsr  pop
.0c2d	60		               rts
.0c2e			f1action
.0c2e	48		               pha
.0c2f	a9 ff		               lda  #$ff
.0c31	8d ac 09	               sta  editmode
.0c34	ad ad 09	               lda  fkeyset
.0c37	d0 5e		               bne  menub
.0c39	20 7a 16	               jsr  push
.0c3c	a2 21		               ldx  #<blankmsg
.0c3e	a0 11		               ldy  #>blankmsg
.0c40	20 12 16	               jsr  putscxy
.0c43	a2 4c		               ldx  #<f1a_msg
.0c45	a0 11		               ldy  #>f1a_msg
.0c47	20 12 16	               jsr  putscxy
.0c4a	20 b9 16	               jsr  pop
.0c4d	08		               php
.0c4e	48		               pha
.0c4f	8a		               txa
.0c50	48		               pha
.0c51	ad 8d 13	               lda  f1abutton
.0c54	48		               pha
.0c55	a9 92		               lda  #146
.0c57	8d 9c 13	               sta  f1abutton+15
.0c5a	a9 0d		               lda  #flashcol
.0c5c	8d 8d 13	               sta  f1abutton
.0c5f	a2 8d		               ldx  #<f1abutton
.0c61	a0 13		               ldy  #>f1abutton
.0c63	20 12 16	               jsr  putscxy
.0c66	20 18 0c	               jsr  delay
.0c69	a9 12		               lda  #18
.0c6b	8d 9c 13	               sta  f1abutton+15
.0c6e	68		               pla
.0c6f	8d 8d 13	               sta  f1abutton
.0c72	a2 8d		               ldx  #<f1abutton
.0c74	a0 13		               ldy  #>f1abutton
.0c76	20 12 16	               jsr  putscxy
.0c79	68		               pla
.0c7a	aa		               tax
.0c7b	68		               pla
.0c7c	28		               plp
.0c7d	20 af 09	               jsr  editor
.0c80	20 7a 16	               jsr  push
.0c83	a2 21		               ldx  #<blankmsg
.0c85	a0 11		               ldy  #>blankmsg
.0c87	20 12 16	               jsr  putscxy
.0c8a	a2 4c		               ldx  #<f1a_msg
.0c8c	a0 11		               ldy  #>f1a_msg
.0c8e	20 12 16	               jsr  putscxy
.0c91	20 b9 16	               jsr  pop
.0c94	4c e0 0c	               jmp  out
.0c97			menub
.0c97	a9 00		               lda  #$0
.0c99	8d ac 09	               sta  editmode
.0c9c	20 7a 16	               jsr  push
.0c9f	a2 21		               ldx  #<blankmsg
.0ca1	a0 11		               ldy  #>blankmsg
.0ca3	20 12 16	               jsr  putscxy
.0ca6	a2 1b		               ldx  #<f1b_msg
.0ca8	a0 12		               ldy  #>f1b_msg
.0caa	20 12 16	               jsr  putscxy
.0cad	20 b9 16	               jsr  pop
.0cb0	08		               php
.0cb1	48		               pha
.0cb2	8a		               txa
.0cb3	48		               pha
.0cb4	ad 5d 14	               lda  f1bbutton
.0cb7	48		               pha
.0cb8	a9 92		               lda  #146
.0cba	8d 6c 14	               sta  f1bbutton+15
.0cbd	a9 0d		               lda  #flashcol
.0cbf	8d 5d 14	               sta  f1bbutton
.0cc2	a2 5d		               ldx  #<f1bbutton
.0cc4	a0 14		               ldy  #>f1bbutton
.0cc6	20 12 16	               jsr  putscxy
.0cc9	20 18 0c	               jsr  delay
.0ccc	a9 12		               lda  #18
.0cce	8d 6c 14	               sta  f1bbutton+15
.0cd1	68		               pla
.0cd2	8d 5d 14	               sta  f1bbutton
.0cd5	a2 5d		               ldx  #<f1bbutton
.0cd7	a0 14		               ldy  #>f1bbutton
.0cd9	20 12 16	               jsr  putscxy
.0cdc	68		               pla
.0cdd	aa		               tax
.0cde	68		               pla
.0cdf	28		               plp
.0ce0	68		out            pla
.0ce1	60		               rts
>0ce2	01 01 05	test_msg       .byte     vblanc,1,5
>0ce5	5b 46 31 2d	               .null     "[f1-action]"
>0ce9	41 43 54 49 4f 4e 5d 00
.0cf1			f2action
.0cf1	48		               pha
.0cf2	a9 00		               lda  #$0
.0cf4	8d ac 09	               sta  editmode
.0cf7	ad ad 09	               lda  fkeyset
.0cfa	d0 47		               bne  menub
.0cfc	20 7a 16	               jsr  push
.0cff	a2 21		               ldx  #<blankmsg
.0d01	a0 11		               ldy  #>blankmsg
.0d03	20 12 16	               jsr  putscxy
.0d06	a2 67		               ldx  #<f2a_msg
.0d08	a0 11		               ldy  #>f2a_msg
.0d0a	20 12 16	               jsr  putscxy
.0d0d	20 b9 16	               jsr  pop
.0d10	08		               php
.0d11	48		               pha
.0d12	8a		               txa
.0d13	48		               pha
.0d14	ad a7 13	               lda  f2abutton
.0d17	48		               pha
.0d18	a9 92		               lda  #146
.0d1a	8d b6 13	               sta  f2abutton+15
.0d1d	a9 0d		               lda  #flashcol
.0d1f	8d a7 13	               sta  f2abutton
.0d22	a2 a7		               ldx  #<f2abutton
.0d24	a0 13		               ldy  #>f2abutton
.0d26	20 12 16	               jsr  putscxy
.0d29	20 18 0c	               jsr  delay
.0d2c	a9 12		               lda  #18
.0d2e	8d b6 13	               sta  f2abutton+15
.0d31	68		               pla
.0d32	8d a7 13	               sta  f2abutton
.0d35	a2 a7		               ldx  #<f2abutton
.0d37	a0 13		               ldy  #>f2abutton
.0d39	20 12 16	               jsr  putscxy
.0d3c	68		               pla
.0d3d	aa		               tax
.0d3e	68		               pla
.0d3f	28		               plp
.0d40	4c 87 0d	               jmp  out
.0d43			menub
.0d43	20 7a 16	               jsr  push
.0d46	a2 21		               ldx  #<blankmsg
.0d48	a0 11		               ldy  #>blankmsg
.0d4a	20 12 16	               jsr  putscxy
.0d4d	a2 32		               ldx  #<f2b_msg
.0d4f	a0 12		               ldy  #>f2b_msg
.0d51	20 12 16	               jsr  putscxy
.0d54	20 b9 16	               jsr  pop
.0d57	08		               php
.0d58	48		               pha
.0d59	8a		               txa
.0d5a	48		               pha
.0d5b	ad 77 14	               lda  f2bbutton
.0d5e	48		               pha
.0d5f	a9 92		               lda  #146
.0d61	8d 86 14	               sta  f2bbutton+15
.0d64	a9 0d		               lda  #flashcol
.0d66	8d 77 14	               sta  f2bbutton
.0d69	a2 77		               ldx  #<f2bbutton
.0d6b	a0 14		               ldy  #>f2bbutton
.0d6d	20 12 16	               jsr  putscxy
.0d70	20 18 0c	               jsr  delay
.0d73	a9 12		               lda  #18
.0d75	8d 86 14	               sta  f2bbutton+15
.0d78	68		               pla
.0d79	8d 77 14	               sta  f2bbutton
.0d7c	a2 77		               ldx  #<f2bbutton
.0d7e	a0 14		               ldy  #>f2bbutton
.0d80	20 12 16	               jsr  putscxy
.0d83	68		               pla
.0d84	aa		               tax
.0d85	68		               pla
.0d86	28		               plp
.0d87	68		out            pla
.0d88	60		               rts
.0d89			f3action
.0d89	48		               pha
.0d8a	a9 00		               lda  #$0
.0d8c	8d ac 09	               sta  editmode
.0d8f	ad ad 09	               lda  fkeyset
.0d92	d0 47		               bne  menub
.0d94	20 7a 16	               jsr  push
.0d97	a2 21		               ldx  #<blankmsg
.0d99	a0 11		               ldy  #>blankmsg
.0d9b	20 12 16	               jsr  putscxy
.0d9e	a2 8d		               ldx  #<f3a_msg
.0da0	a0 11		               ldy  #>f3a_msg
.0da2	20 12 16	               jsr  putscxy
.0da5	20 b9 16	               jsr  pop
.0da8	08		               php
.0da9	48		               pha
.0daa	8a		               txa
.0dab	48		               pha
.0dac	ad c1 13	               lda  f3abutton
.0daf	48		               pha
.0db0	a9 92		               lda  #146
.0db2	8d d0 13	               sta  f3abutton+15
.0db5	a9 0d		               lda  #flashcol
.0db7	8d c1 13	               sta  f3abutton
.0dba	a2 c1		               ldx  #<f3abutton
.0dbc	a0 13		               ldy  #>f3abutton
.0dbe	20 12 16	               jsr  putscxy
.0dc1	20 18 0c	               jsr  delay
.0dc4	a9 12		               lda  #18
.0dc6	8d d0 13	               sta  f3abutton+15
.0dc9	68		               pla
.0dca	8d c1 13	               sta  f3abutton
.0dcd	a2 c1		               ldx  #<f3abutton
.0dcf	a0 13		               ldy  #>f3abutton
.0dd1	20 12 16	               jsr  putscxy
.0dd4	68		               pla
.0dd5	aa		               tax
.0dd6	68		               pla
.0dd7	28		               plp
.0dd8	4c 1f 0e	               jmp  out
.0ddb			menub
.0ddb	20 7a 16	               jsr  push
.0dde	a2 21		               ldx  #<blankmsg
.0de0	a0 11		               ldy  #>blankmsg
.0de2	20 12 16	               jsr  putscxy
.0de5	a2 4b		               ldx  #<f3b_msg
.0de7	a0 12		               ldy  #>f3b_msg
.0de9	20 12 16	               jsr  putscxy
.0dec	20 b9 16	               jsr  pop
.0def	08		               php
.0df0	48		               pha
.0df1	8a		               txa
.0df2	48		               pha
.0df3	ad 91 14	               lda  f3bbutton
.0df6	48		               pha
.0df7	a9 92		               lda  #146
.0df9	8d a0 14	               sta  f3bbutton+15
.0dfc	a9 0d		               lda  #flashcol
.0dfe	8d 91 14	               sta  f3bbutton
.0e01	a2 91		               ldx  #<f3bbutton
.0e03	a0 14		               ldy  #>f3bbutton
.0e05	20 12 16	               jsr  putscxy
.0e08	20 18 0c	               jsr  delay
.0e0b	a9 12		               lda  #18
.0e0d	8d a0 14	               sta  f3bbutton+15
.0e10	68		               pla
.0e11	8d 91 14	               sta  f3bbutton
.0e14	a2 91		               ldx  #<f3bbutton
.0e16	a0 14		               ldy  #>f3bbutton
.0e18	20 12 16	               jsr  putscxy
.0e1b	68		               pla
.0e1c	aa		               tax
.0e1d	68		               pla
.0e1e	28		               plp
.0e1f	68		out            pla
.0e20	60		               rts
.0e21			f4action
.0e21	48		               pha
.0e22	a9 00		               lda  #$0
.0e24	8d ac 09	               sta  editmode
.0e27	ad ad 09	               lda  fkeyset
.0e2a	d0 47		               bne  menub
.0e2c	20 7a 16	               jsr  push
.0e2f	a2 21		               ldx  #<blankmsg
.0e31	a0 11		               ldy  #>blankmsg
.0e33	20 12 16	               jsr  putscxy
.0e36	a2 b4		               ldx  #<f4a_msg
.0e38	a0 11		               ldy  #>f4a_msg
.0e3a	20 12 16	               jsr  putscxy
.0e3d	20 b9 16	               jsr  pop
.0e40	08		               php
.0e41	48		               pha
.0e42	8a		               txa
.0e43	48		               pha
.0e44	ad db 13	               lda  f4abutton
.0e47	48		               pha
.0e48	a9 92		               lda  #146
.0e4a	8d ea 13	               sta  f4abutton+15
.0e4d	a9 0d		               lda  #flashcol
.0e4f	8d db 13	               sta  f4abutton
.0e52	a2 db		               ldx  #<f4abutton
.0e54	a0 13		               ldy  #>f4abutton
.0e56	20 12 16	               jsr  putscxy
.0e59	20 18 0c	               jsr  delay
.0e5c	a9 12		               lda  #18
.0e5e	8d ea 13	               sta  f4abutton+15
.0e61	68		               pla
.0e62	8d db 13	               sta  f4abutton
.0e65	a2 db		               ldx  #<f4abutton
.0e67	a0 13		               ldy  #>f4abutton
.0e69	20 12 16	               jsr  putscxy
.0e6c	68		               pla
.0e6d	aa		               tax
.0e6e	68		               pla
.0e6f	28		               plp
.0e70	4c b7 0e	               jmp  out
.0e73			menub
.0e73	20 7a 16	               jsr  push
.0e76	a2 21		               ldx  #<blankmsg
.0e78	a0 11		               ldy  #>blankmsg
.0e7a	20 12 16	               jsr  putscxy
.0e7d	a2 63		               ldx  #<f4b_msg
.0e7f	a0 12		               ldy  #>f4b_msg
.0e81	20 12 16	               jsr  putscxy
.0e84	20 b9 16	               jsr  pop
.0e87	08		               php
.0e88	48		               pha
.0e89	8a		               txa
.0e8a	48		               pha
.0e8b	ad ab 14	               lda  f4bbutton
.0e8e	48		               pha
.0e8f	a9 92		               lda  #146
.0e91	8d ba 14	               sta  f4bbutton+15
.0e94	a9 0d		               lda  #flashcol
.0e96	8d ab 14	               sta  f4bbutton
.0e99	a2 ab		               ldx  #<f4bbutton
.0e9b	a0 14		               ldy  #>f4bbutton
.0e9d	20 12 16	               jsr  putscxy
.0ea0	20 18 0c	               jsr  delay
.0ea3	a9 12		               lda  #18
.0ea5	8d ba 14	               sta  f4bbutton+15
.0ea8	68		               pla
.0ea9	8d ab 14	               sta  f4bbutton
.0eac	a2 ab		               ldx  #<f4bbutton
.0eae	a0 14		               ldy  #>f4bbutton
.0eb0	20 12 16	               jsr  putscxy
.0eb3	68		               pla
.0eb4	aa		               tax
.0eb5	68		               pla
.0eb6	28		               plp
.0eb7	68		out            pla
.0eb8	60		               rts
.0eb9			f5action
.0eb9	48		               pha
.0eba	a9 00		               lda  #$0
.0ebc	8d ac 09	               sta  editmode
.0ebf	ad ad 09	               lda  fkeyset
.0ec2	d0 47		               bne  menub
.0ec4	20 7a 16	               jsr  push
.0ec7	a2 21		               ldx  #<blankmsg
.0ec9	a0 11		               ldy  #>blankmsg
.0ecb	20 12 16	               jsr  putscxy
.0ece	a2 d1		               ldx  #<f5a_msg
.0ed0	a0 11		               ldy  #>f5a_msg
.0ed2	20 12 16	               jsr  putscxy
.0ed5	20 b9 16	               jsr  pop
.0ed8	08		               php
.0ed9	48		               pha
.0eda	8a		               txa
.0edb	48		               pha
.0edc	ad f5 13	               lda  f5abutton
.0edf	48		               pha
.0ee0	a9 92		               lda  #146
.0ee2	8d 04 14	               sta  f5abutton+15
.0ee5	a9 0d		               lda  #flashcol
.0ee7	8d f5 13	               sta  f5abutton
.0eea	a2 f5		               ldx  #<f5abutton
.0eec	a0 13		               ldy  #>f5abutton
.0eee	20 12 16	               jsr  putscxy
.0ef1	20 18 0c	               jsr  delay
.0ef4	a9 12		               lda  #18
.0ef6	8d 04 14	               sta  f5abutton+15
.0ef9	68		               pla
.0efa	8d f5 13	               sta  f5abutton
.0efd	a2 f5		               ldx  #<f5abutton
.0eff	a0 13		               ldy  #>f5abutton
.0f01	20 12 16	               jsr  putscxy
.0f04	68		               pla
.0f05	aa		               tax
.0f06	68		               pla
.0f07	28		               plp
.0f08	4c 4f 0f	               jmp  out
.0f0b			menub
.0f0b	20 7a 16	               jsr  push
.0f0e	a2 21		               ldx  #<blankmsg
.0f10	a0 11		               ldy  #>blankmsg
.0f12	20 12 16	               jsr  putscxy
.0f15	a2 78		               ldx  #<f5b_msg
.0f17	a0 12		               ldy  #>f5b_msg
.0f19	20 12 16	               jsr  putscxy
.0f1c	20 b9 16	               jsr  pop
.0f1f	08		               php
.0f20	48		               pha
.0f21	8a		               txa
.0f22	48		               pha
.0f23	ad c5 14	               lda  f5bbutton
.0f26	48		               pha
.0f27	a9 92		               lda  #146
.0f29	8d d4 14	               sta  f5bbutton+15
.0f2c	a9 0d		               lda  #flashcol
.0f2e	8d c5 14	               sta  f5bbutton
.0f31	a2 c5		               ldx  #<f5bbutton
.0f33	a0 14		               ldy  #>f5bbutton
.0f35	20 12 16	               jsr  putscxy
.0f38	20 18 0c	               jsr  delay
.0f3b	a9 12		               lda  #18
.0f3d	8d d4 14	               sta  f5bbutton+15
.0f40	68		               pla
.0f41	8d c5 14	               sta  f5bbutton
.0f44	a2 c5		               ldx  #<f5bbutton
.0f46	a0 14		               ldy  #>f5bbutton
.0f48	20 12 16	               jsr  putscxy
.0f4b	68		               pla
.0f4c	aa		               tax
.0f4d	68		               pla
.0f4e	28		               plp
.0f4f	68		out            pla
.0f50	60		               rts
.0f51			f6action
.0f51	48		               pha
.0f52	a9 00		               lda  #$0
.0f54	8d ac 09	               sta  editmode
.0f57	ad ad 09	               lda  fkeyset
.0f5a	d0 47		               bne  menub
.0f5c	20 7a 16	               jsr  push
.0f5f	a2 21		               ldx  #<blankmsg
.0f61	a0 11		               ldy  #>blankmsg
.0f63	20 12 16	               jsr  putscxy
.0f66	a2 eb		               ldx  #<f6a_msg
.0f68	a0 11		               ldy  #>f6a_msg
.0f6a	20 12 16	               jsr  putscxy
.0f6d	20 b9 16	               jsr  pop
.0f70	08		               php
.0f71	48		               pha
.0f72	8a		               txa
.0f73	48		               pha
.0f74	ad 0f 14	               lda  f6abutton
.0f77	48		               pha
.0f78	a9 92		               lda  #146
.0f7a	8d 1e 14	               sta  f6abutton+15
.0f7d	a9 0d		               lda  #flashcol
.0f7f	8d 0f 14	               sta  f6abutton
.0f82	a2 0f		               ldx  #<f6abutton
.0f84	a0 14		               ldy  #>f6abutton
.0f86	20 12 16	               jsr  putscxy
.0f89	20 18 0c	               jsr  delay
.0f8c	a9 12		               lda  #18
.0f8e	8d 1e 14	               sta  f6abutton+15
.0f91	68		               pla
.0f92	8d 0f 14	               sta  f6abutton
.0f95	a2 0f		               ldx  #<f6abutton
.0f97	a0 14		               ldy  #>f6abutton
.0f99	20 12 16	               jsr  putscxy
.0f9c	68		               pla
.0f9d	aa		               tax
.0f9e	68		               pla
.0f9f	28		               plp
.0fa0	4c e7 0f	               jmp  out
.0fa3			menub
.0fa3	20 7a 16	               jsr  push
.0fa6	a2 21		               ldx  #<blankmsg
.0fa8	a0 11		               ldy  #>blankmsg
.0faa	20 12 16	               jsr  putscxy
.0fad	a2 8c		               ldx  #<f6b_msg
.0faf	a0 12		               ldy  #>f6b_msg
.0fb1	20 12 16	               jsr  putscxy
.0fb4	20 b9 16	               jsr  pop
.0fb7	08		               php
.0fb8	48		               pha
.0fb9	8a		               txa
.0fba	48		               pha
.0fbb	ad df 14	               lda  f6bbutton
.0fbe	48		               pha
.0fbf	a9 92		               lda  #146
.0fc1	8d ee 14	               sta  f6bbutton+15
.0fc4	a9 0d		               lda  #flashcol
.0fc6	8d df 14	               sta  f6bbutton
.0fc9	a2 df		               ldx  #<f6bbutton
.0fcb	a0 14		               ldy  #>f6bbutton
.0fcd	20 12 16	               jsr  putscxy
.0fd0	20 18 0c	               jsr  delay
.0fd3	a9 12		               lda  #18
.0fd5	8d ee 14	               sta  f6bbutton+15
.0fd8	68		               pla
.0fd9	8d df 14	               sta  f6bbutton
.0fdc	a2 df		               ldx  #<f6bbutton
.0fde	a0 14		               ldy  #>f6bbutton
.0fe0	20 12 16	               jsr  putscxy
.0fe3	68		               pla
.0fe4	aa		               tax
.0fe5	68		               pla
.0fe6	28		               plp
.0fe7	68		out            pla
.0fe8	60		               rts
.0fe9			f7action
.0fe9	48		               pha
.0fea	a9 00		               lda  #$0
.0fec	8d ac 09	               sta  editmode
.0fef	ad ad 09	               lda  fkeyset
.0ff2	d0 47		               bne  menub
.0ff4	20 7a 16	               jsr  push
.0ff7	a2 21		               ldx  #<blankmsg
.0ff9	a0 11		               ldy  #>blankmsg
.0ffb	20 12 16	               jsr  putscxy
.0ffe	a2 05		               ldx  #<f7a_msg
.1000	a0 12		               ldy  #>f7a_msg
.1002	20 12 16	               jsr  putscxy
.1005	20 b9 16	               jsr  pop
.1008	08		               php
.1009	48		               pha
.100a	8a		               txa
.100b	48		               pha
.100c	ad 29 14	               lda  f7abutton
.100f	48		               pha
.1010	a9 92		               lda  #146
.1012	8d 38 14	               sta  f7abutton+15
.1015	a9 0d		               lda  #flashcol
.1017	8d 29 14	               sta  f7abutton
.101a	a2 29		               ldx  #<f7abutton
.101c	a0 14		               ldy  #>f7abutton
.101e	20 12 16	               jsr  putscxy
.1021	20 18 0c	               jsr  delay
.1024	a9 12		               lda  #18
.1026	8d 38 14	               sta  f7abutton+15
.1029	68		               pla
.102a	8d 29 14	               sta  f7abutton
.102d	a2 29		               ldx  #<f7abutton
.102f	a0 14		               ldy  #>f7abutton
.1031	20 12 16	               jsr  putscxy
.1034	68		               pla
.1035	aa		               tax
.1036	68		               pla
.1037	28		               plp
.1038	4c 7f 10	               jmp  out
.103b			menub
.103b	20 7a 16	               jsr  push
.103e	a2 21		               ldx  #<blankmsg
.1040	a0 11		               ldy  #>blankmsg
.1042	20 12 16	               jsr  putscxy
.1045	a2 9e		               ldx  #<f7b_msg
.1047	a0 12		               ldy  #>f7b_msg
.1049	20 12 16	               jsr  putscxy
.104c	20 b9 16	               jsr  pop
.104f	08		               php
.1050	48		               pha
.1051	8a		               txa
.1052	48		               pha
.1053	ad f9 14	               lda  f7bbutton
.1056	48		               pha
.1057	a9 92		               lda  #146
.1059	8d 08 15	               sta  f7bbutton+15
.105c	a9 0d		               lda  #flashcol
.105e	8d f9 14	               sta  f7bbutton
.1061	a2 f9		               ldx  #<f7bbutton
.1063	a0 14		               ldy  #>f7bbutton
.1065	20 12 16	               jsr  putscxy
.1068	20 18 0c	               jsr  delay
.106b	a9 12		               lda  #18
.106d	8d 08 15	               sta  f7bbutton+15
.1070	68		               pla
.1071	8d f9 14	               sta  f7bbutton
.1074	a2 f9		               ldx  #<f7bbutton
.1076	a0 14		               ldy  #>f7bbutton
.1078	20 12 16	               jsr  putscxy
.107b	68		               pla
.107c	aa		               tax
.107d	68		               pla
.107e	28		               plp
.107f	68		out            pla
.1080	60		               rts
.1081			f8action
.1081	48		               pha
.1082	a9 00		               lda  #$0
.1084	8d ac 09	               sta  editmode
.1087	ad ad 09	               lda  fkeyset
.108a	d0 47		               bne  menub
.108c	20 7a 16	               jsr  push
.108f	a2 21		               ldx  #<blankmsg
.1091	a0 11		               ldy  #>blankmsg
.1093	20 12 16	               jsr  putscxy
.1096	a2 0b		               ldx  #<menub_msg
.1098	a0 13		               ldy  #>menub_msg
.109a	20 12 16	               jsr  putscxy
.109d	20 b9 16	               jsr  pop
.10a0	08		               php
.10a1	48		               pha
.10a2	8a		               txa
.10a3	48		               pha
.10a4	ad 43 14	               lda  f8abutton
.10a7	48		               pha
.10a8	a9 92		               lda  #146
.10aa	8d 52 14	               sta  f8abutton+15
.10ad	a9 0d		               lda  #flashcol
.10af	8d 43 14	               sta  f8abutton
.10b2	a2 43		               ldx  #<f8abutton
.10b4	a0 14		               ldy  #>f8abutton
.10b6	20 12 16	               jsr  putscxy
.10b9	20 18 0c	               jsr  delay
.10bc	a9 12		               lda  #18
.10be	8d 52 14	               sta  f8abutton+15
.10c1	68		               pla
.10c2	8d 43 14	               sta  f8abutton
.10c5	a2 43		               ldx  #<f8abutton
.10c7	a0 14		               ldy  #>f8abutton
.10c9	20 12 16	               jsr  putscxy
.10cc	68		               pla
.10cd	aa		               tax
.10ce	68		               pla
.10cf	28		               plp
.10d0	4c 17 11	               jmp  swapit
.10d3			menub
.10d3	20 7a 16	               jsr  push
.10d6	a2 21		               ldx  #<blankmsg
.10d8	a0 11		               ldy  #>blankmsg
.10da	20 12 16	               jsr  putscxy
.10dd	a2 f0		               ldx  #<menua_msg
.10df	a0 12		               ldy  #>menua_msg
.10e1	20 12 16	               jsr  putscxy
.10e4	20 b9 16	               jsr  pop
.10e7	08		               php
.10e8	48		               pha
.10e9	8a		               txa
.10ea	48		               pha
.10eb	ad 13 15	               lda  f8bbutton
.10ee	48		               pha
.10ef	a9 92		               lda  #146
.10f1	8d 22 15	               sta  f8bbutton+15
.10f4	a9 0d		               lda  #flashcol
.10f6	8d 13 15	               sta  f8bbutton
.10f9	a2 13		               ldx  #<f8bbutton
.10fb	a0 15		               ldy  #>f8bbutton
.10fd	20 12 16	               jsr  putscxy
.1100	20 18 0c	               jsr  delay
.1103	a9 12		               lda  #18
.1105	8d 22 15	               sta  f8bbutton+15
.1108	68		               pla
.1109	8d 13 15	               sta  f8bbutton
.110c	a2 13		               ldx  #<f8bbutton
.110e	a0 15		               ldy  #>f8bbutton
.1110	20 12 16	               jsr  putscxy
.1113	68		               pla
.1114	aa		               tax
.1115	68		               pla
.1116	28		               plp
.1117	49 ff		swapit         eor  #$ff
.1119	8d ad 09	               sta  fkeyset
.111c	20 ec 0a	               jsr  showfkeys
.111f	68		               pla
.1120	60		               rts

;******  Processing file: messages.asm

=$07			mesgcol = vjaune
>1121	07 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>1125	20 20 20 20	               .null     "                                      "
>1129	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1139	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1149	20 20 00
.114c			f1a_msg
>114c	07 00 05 12	edit_msg       .byte     mesgcol,0,5,18
>1150	20 45 44 49	               .null     " edit mode: chr$(   )",146
>1154	54 20 4d 4f 44 45 3a 20 43 48 52 24 28 20 20 20
>1164	29 92 00
.1167			f2a_msg
>1167	07 00 05 92	save_msg       .byte     mesgcol,0,5,146
>116b	20 53 41 56	               .null     " save on cassette or disk? (c/d):"
>116f	45 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>117f	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.118d			f3a_msg
>118d	07 00 05	load_msg       .byte     mesgcol,0,5
>1190	20 4c 4f 41	               .null     " load from cassette or disk? (c/d):"
>1194	44 20 46 52 4f 4d 20 43 41 53 53 45 54 54 45 20
>11a4	4f 52 20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.11b4			f4a_msg
>11b4	07 00 05	copy_msg       .byte     mesgcol,0,5
>11b7	20 45 4e 54	               .null     " enter character to copy:"
>11bb	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>11cb	43 4f 50 59 3a 00
.11d1			f5a_msg
>11d1	07 00 05	clear_msg      .byte     mesgcol,0,5
>11d4	20 43 4c 45	               .null     " clear char: chr$(   )"
>11d8	41 52 20 43 48 41 52 3a 20 43 48 52 24 28 20 20
>11e8	20 29 00
.11eb			f6a_msg
>11eb	07 00 05	fill_msg       .byte     mesgcol,0,5
>11ee	20 46 49 4c	               .null     " fill char:  chr$(   )"
>11f2	4c 20 43 48 41 52 3a 20 20 43 48 52 24 28 20 20
>1202	20 29 00
.1205			f7a_msg
>1205	07 00 05	work_msg       .byte     mesgcol,0,5
>1208	20 45 4e 41	               .null     " enable work space"
>120c	42 4c 45 20 57 4f 52 4b 20 53 50 41 43 45 00
.121b			f1b_msg
>121b	07 00 05	rvrs_msg       .byte     mesgcol,0,5
>121e	20 52 45 56	               .null     " reverse character:"
>1222	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
.1232			f2b_msg
>1232	07 00 05	invr_msg       .byte     mesgcol,0,5
>1235	20 49 4e 56	               .null     " inverting character:"
>1239	45 52 54 49 4e 47 20 43 48 41 52 41 43 54 45 52
>1249	3a 00
.124b			f3b_msg
>124b	07 00 05	flip_msg       .byte     mesgcol,0,5
>124e	20 46 4c 49	               .null     " flipping character:"
>1252	50 50 49 4e 47 20 43 48 41 52 41 43 54 45 52 3a
>1262	00
.1263			f4b_msg
>1263	07 00 05	scrollr_msg    .byte     mesgcol,0,5
>1266	20 53 43 52	               .null     " scrolling right:"
>126a	4f 4c 4c 49 4e 47 20 52 49 47 48 54 3a 00
.1278			f5b_msg
>1278	07 00 05	scrolll_msg    .byte     mesgcol,0,5
>127b	20 53 43 52	               .null     " scrolling left:"
>127f	4f 4c 4c 49 4e 47 20 4c 45 46 54 3a 00
.128c			f6b_msg
>128c	07 00 05	scrollu_msg    .byte     mesgcol,0,5
>128f	20 53 43 52	               .null     " scrolling up:"
>1293	4f 4c 4c 49 4e 47 20 55 50 3a 00
.129e			f7b_msg
>129e	07 00 05	scrolld_msg    .byte     mesgcol,0,5
>12a1	20 53 43 52	               .null     " scrolling down:"
>12a5	4f 4c 4c 49 4e 47 20 44 4f 57 4e 3a 00
>12b2	07 00 05	save_fname_msg .byte     mesgcol,0,5
>12b5	20 53 41 56	               .null     " save: file name ------.chr"
>12b9	45 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>12c9	2d 2d 2d 2e 43 48 52 00
>12d1	07 00 05	load_fname_msg .byte     mesgcol,0,5
>12d4	20 4c 4f 41	               .null     " load: file name ------.chr"
>12d8	44 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>12e8	2d 2d 2d 2e 43 48 52 00
>12f0	07 00 05	menua_msg      .byte     mesgcol,0,5
>12f3	20 59 4f 55	               .null     " you are now in menu a."
>12f7	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>1307	20 41 2e 00
>130b	07 00 05	menub_msg      .byte     mesgcol,0,5
>130e	20 59 4f 55	               .null     " you are now in menu b."
>1312	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>1322	20 42 2e 00
>1326	0e 15 18 12	quit_msg       .byte     vblue1,21,24,18
>132a	43 54 52 4c	               .text     "ctrl-x",146
>132e	2d 58 92
>1331	20 54 4f 20	               .null     " to quit."
>1335	51 55 49 54 2e 00
>133b	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>133f	43 54 52 4c	               .text     "ctrl-x",146
>1343	2d 58 92
>1346	20 54 4f 20	               .null     " to menu."
>134a	4d 45 4e 55 2e 00
>1350	03 06 0c 12	bye_msg        .byte     vcyan,6,12,18
>1354	20 54 48 41	               .null     " thanks and have a good day ",146
>1358	4e 4b 53 20 41 4e 44 20 48 41 56 45 20 41 20 47
>1368	4f 4f 44 20 44 41 59 20 92 00
>1372	07 0a 18 12	any_msg        .byte     vjaune,10,24,18
>1376	20 41 4e 59	               .null         " any key to continue ",146
>137a	20 4b 45 59 20 54 4f 20 43 4f 4e 54 49 4e 55 45
>138a	20 92 00
=18			fkeyleft=18
=8			f1top=8
=1			menu1col = 1
=3			menu2col = 3
>138d	01 12 08	f1abutton      .byte     menu1col,fkeyleft,f1top       ;133
>1390	45 44 49 54	               .text     "edit....... "
>1394	2e 2e 2e 2e 2e 2e 2e 20
>139c	12		               .byte     18             ; position 15
>139d	20 20 20 46	               .text     "   f1   "
>13a1	31 20 20 20
>13a5	92 00		               .byte     146,0
>13a7	01 12 0a	f2abutton      .byte     menu1col,fkeyleft,f1top+2     ;137
>13aa	53 41 56 45	               .text     "save....... "
>13ae	2e 2e 2e 2e 2e 2e 2e 20
>13b6	12		               .byte     18            ; position 15
>13b7	20 20 20 46	               .text     "   f2   "
>13bb	32 20 20 20
>13bf	92 00		               .byte     146,0
>13c1	01 12 0c	f3abutton      .byte     menu1col,fkeyleft,f1top+4     ;134
>13c4	4c 4f 41 44	               .text     "load....... "
>13c8	2e 2e 2e 2e 2e 2e 2e 20
>13d0	12		               .byte     18             ; position 15
>13d1	20 20 20 46	               .text     "   f3   "
>13d5	33 20 20 20
>13d9	92 00		               .byte     146,0
>13db	01 12 0e	f4abutton      .byte     menu1col,fkeyleft,f1top+6     ;138
>13de	43 4f 50 59	               .text     "copy....... "
>13e2	2e 2e 2e 2e 2e 2e 2e 20
>13ea	12		               .byte     18             ; position 15
>13eb	20 20 20 46	               .text     "   f4   "
>13ef	34 20 20 20
>13f3	92 00		               .byte     146,0
>13f5	01 12 10	f5abutton      .byte     menu1col,fkeyleft,f1top+8     ;135
>13f8	43 4c 45 41	               .text     "clear...... "
>13fc	52 2e 2e 2e 2e 2e 2e 20
>1404	12		               .byte     18             ; position 15
>1405	20 20 20 46	               .text     "   f5   "
>1409	35 20 20 20
>140d	92 00		               .byte     146,0
>140f	01 12 12	f6abutton      .byte     menu1col,fkeyleft,f1top+10    ;139
>1412	46 49 4c 4c	               .text     "fill....... "
>1416	2e 2e 2e 2e 2e 2e 2e 20
>141e	12		               .byte     18             ; position 15
>141f	20 20 20 46	               .text     "   f6   "
>1423	36 20 20 20
>1427	92 00		               .byte     146,0
>1429	01 12 14	f7abutton      .byte     menu1col,fkeyleft,f1top+12    ;136
>142c	57 4f 52 4b	               .text     "work....... "
>1430	2e 2e 2e 2e 2e 2e 2e 20
>1438	12		               .byte     18             ; position 15
>1439	20 20 20 46	               .text     "   f7   "
>143d	37 20 20 20
>1441	92 00		               .byte     146,0
>1443	01 12 16	f8abutton      .byte     menu1col,fkeyleft,f1top+14    ;140
>1446	46 55 4e 43	               .text     "function... "
>144a	54 49 4f 4e 2e 2e 2e 20
>1452	12		               .byte     18             ; position 15
>1453	20 20 20 46	               .text     "   f8   "
>1457	38 20 20 20
>145b	92 00		               .byte     146,0
>145d	03 12 08	f1bbutton      .byte     menu2col,fkeyleft,f1top
>1460	52 45 56 45	               .text     "reverse.... "
>1464	52 53 45 2e 2e 2e 2e 20
>146c	12		               .byte     18             ; position 15
>146d	20 20 20 46	               .text     "   f1   "
>1471	31 20 20 20
>1475	92 00		               .byte     146,0
>1477	03 12 0a	f2bbutton      .byte     menu2col,fkeyleft,f1top+2
>147a	49 4e 56 45	               .text     "invert..... "
>147e	52 54 2e 2e 2e 2e 2e 20
>1486	12		               .byte     18             ; position 15
>1487	20 20 20 46	               .text     "   f2   "
>148b	32 20 20 20
>148f	92 00		               .byte     146,0
>1491	03 12 0c	f3bbutton      .byte     menu2col,fkeyleft,f1top+4
>1494	46 4c 49 50	               .text     "flip....... "
>1498	2e 2e 2e 2e 2e 2e 2e 20
>14a0	12		               .byte     18             ; position 15
>14a1	20 20 20 46	               .text     "   f3   "
>14a5	33 20 20 20
>14a9	92 00		               .byte     146,0
>14ab	03 12 0e	f4bbutton      .byte     menu2col,fkeyleft,f1top+6
>14ae	53 43 52 4f	               .text     "scroll r... "
>14b2	4c 4c 20 52 2e 2e 2e 20
>14ba	12		               .byte     18             ; position 15
>14bb	20 20 20 46	               .text     "   f4   "
>14bf	34 20 20 20
>14c3	92 00		               .byte     146,0
>14c5	03 12 10	f5bbutton      .byte     menu2col,fkeyleft,f1top+8
>14c8	53 43 52 4f	               .text     "scroll l... "
>14cc	4c 4c 20 4c 2e 2e 2e 20
>14d4	12		               .byte     18             ; position 15
>14d5	20 20 20 46	               .text     "   f5   "
>14d9	35 20 20 20
>14dd	92 00		               .byte     146,0
>14df	03 12 12	f6bbutton      .byte     menu2col,fkeyleft,f1top+10
>14e2	53 43 52 4f	               .text     "scroll u... "
>14e6	4c 4c 20 55 2e 2e 2e 20
>14ee	12		               .byte     18             ; position 15
>14ef	20 20 20 46	               .text     "   f6   "
>14f3	36 20 20 20
>14f7	92 00		               .byte     146,0
>14f9	03 12 14	f7bbutton      .byte     menu2col,fkeyleft,f1top+12
>14fc	53 43 52 4f	               .text     "scroll d... "
>1500	4c 4c 20 44 2e 2e 2e 20
>1508	12		               .byte     18             ; position 15
>1509	20 20 20 46	               .text     "   f7   "
>150d	37 20 20 20
>1511	92 00		               .byte     146,0
>1513	03 12 16	f8bbutton      .byte     menu2col,fkeyleft,f1top+14
>1516	46 55 4e 43	               .text     "function... "
>151a	54 49 4f 4e 2e 2e 2e 20
>1522	12		               .byte     18             ; position 15
>1523	20 20 20 46	               .text     "   f8   "
>1527	38 20 20 20
>152b	92 00		               .byte     146,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.152d			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.152d			screendis
.152d	08		               php
.152e	48		               pha
.152f	ad 11 d0	               lda  $d011
.1532	29 ef		               and  #%11101111
.1534	8d 11 d0	               sta  $d011
.1537	68		               pla
.1538	28		               plp
.1539	60		               rts
.153a			screenena
.153a	08		               php
.153b	48		               pha
.153c	ad 11 d0	               lda  $d011
.153f	09 10		               ora  #%00010000
.1541	8d 11 d0	               sta  $d011
.1544	68		               pla
.1545	28		               plp
.1546	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.1547			scrmaninit
.1547	20 7a 16	               jsr  push
.154a	a9 06		               lda  #vbleu
.154c	8d 21 d0	               sta  vicbackcol
.154f	a9 05		               lda  #vvert
.1551	8d 20 d0	               sta  vicbordcol
.1554	a9 01		               lda  #vblanc
.1556	8d 86 02	               sta  bascol
.1559	ad 00 04	               lda  scrnram
.155c	8d 00 04	               sta  scrnram
.155f	20 67 15	               jsr  cls
.1562	20 b9 16	               jsr  pop
.1565	60		               rts
>1566	8e		characterset   .byte b_uppercase
.1567			cls
.1567	08		               php
.1568	48		               pha
.1569	a9 93		               lda  #$93
.156b	20 83 15	               jsr  putch
.156e	a9 0e		               lda  #$0e
.1570	20 83 15	               jsr  putch
.1573	68		               pla
.1574	28		               plp
.1575	60		               rts
.1576			putnch
.1576	08		               php
.1577	e0 00		               cpx  #$00
.1579	f0 06		               beq  out
.157b	20 d2 ff	again          jsr  $ffd2
.157e	ca		               dex
.157f	d0 fa		               bne  again
.1581	28		out            plp
.1582	60		               rts
.1583			putch
.1583	08		               php
.1584	20 d2 ff	               jsr  $ffd2
.1587	28		               plp
.1588	60		               rts
.1589			puts
.1589	20 7a 16	               jsr  push
.158c	86 fb		               stx  zpage1
.158e	84 fc		               sty  zpage1+1
.1590	a0 00		               ldy  #0
.1592	b1 fb		next           lda  (zpage1),y
.1594	f0 09		               beq  exit
.1596	20 83 15	               jsr  putch
.1599	20 81 17	               jsr  inczp1
.159c	4c 92 15	               jmp  next
.159f	20 b9 16	exit           jsr  pop
.15a2	60		               rts
.15a3			gotoxy
.15a3	08		               php
.15a4	18		               clc
.15a5	8a		               txa
.15a6	48		               pha
.15a7	98		               tya
.15a8	aa		               tax
.15a9	68		               pla
.15aa	a8		               tay
.15ab	20 f0 ff	               jsr  kplot
.15ae	28		               plp
.15af	60		               rts
.15b0			cursor
=$0286			bascol    =    $0286
.15b0	08		               php
.15b1	48		               pha
.15b2	90 12		               bcc  restore
.15b4	20 f0 ff	               jsr  kplot
.15b7	8c d8 15	               sty  cx
.15ba	8e d9 15	               stx  cy
.15bd	ad 86 02	               lda  bascol
.15c0	8d da 15	               sta  bcol
.15c3	4c d5 15	               jmp  out
.15c6	ae d9 15	restore        ldx  cy
.15c9	ac d8 15	               ldy  cx
.15cc	20 f0 ff	               jsr  kplot
.15cf	ad da 15	               lda  bcol
.15d2	8d 86 02	               sta  bascol
.15d5	68		out            pla
.15d6	28		               plp
.15d7	60		               rts
>15d8	00		cx   .byte     $00
>15d9	00		cy   .byte     $00
>15da	00		bcol .byte     $00
.15db			cursave
.15db	08		               php
.15dc	38		               sec
.15dd	20 b0 15	               jsr  cursor
.15e0	28		               plp
.15e1	60		               rts
.15e2			curput
.15e2	08		               php
.15e3	18		               clc
.15e4	20 b0 15	               jsr  cursor
.15e7	28		               plp
.15e8	60		               rts
.15e9			putsxy
.15e9	20 7a 16	               jsr  push
.15ec	86 fb		               stx  zpage1
.15ee	84 fc		               sty  zpage1+1
.15f0	a0 00		               ldy  #$00
.15f2	b1 fb		               lda  (zpage1),y
.15f4	aa		               tax
.15f5	20 81 17	               jsr  inczp1
.15f8	b1 fb		               lda  (zpage1),y
.15fa	a8		               tay
.15fb	20 a3 15	               jsr  gotoxy
.15fe	20 81 17	               jsr  inczp1
.1601	a6 fb		               ldx  zpage1
.1603	a4 fc		               ldy  zpage1+1
.1605	20 89 15	               jsr  puts
.1608	20 b9 16	               jsr  pop
.160b	60		               rts
>160c	00 00		straddr   .word     $00
>160e	00		px        .byte     $00
>160f	00		py        .byte     $00
>1610	00 00		zp1       .word     $00
.1612			putscxy
.1612	20 7a 16	               jsr  push
.1615	84 fc		               sty  zpage1+1
.1617	86 fb		               stx  zpage1
.1619	ad 86 02	               lda  bascol
.161c	8d 3c 16	               sta  bc
.161f	a0 00		               ldy #$00
.1621	b1 fb		               lda  (zpage1),y
.1623	8d 86 02	               sta  bascol
.1626	20 81 17	               jsr  inczp1
.1629	a6 fb		               ldx  zpage1
.162b	a4 fc		               ldy  zpage1+1
.162d	20 e9 15	               jsr  putsxy
.1630	ad 3c 16	               lda  bc
.1633	8d 86 02	               sta  bascol
.1636	20 b9 16	               jsr  pop
.1639	60		               rts
>163a	00 00		straddr  .word      $00
>163c	00		bc       .byte      $00
>163d	00 00		zp1      .word      $00
.163f			putrahex
.163f	08		               php
.1640	48		               pha
.1641	20 8a 18	               jsr  a2hex
.1644	a9 36		               lda  #<a2hexstr
.1646	a0 18		               ldy  #>a2hexstr
.1648	20 89 15	               jsr  puts
.164b	68		               pla
.164c	28		               plp
.164d	60		               rts
.164e			kputrahexxy
.164e			bputrahexxy
.164e			putrahexxy
.164e	08		               php
.164f	20 8a 18	               jsr  a2hex
.1652	a9 33		               lda  #<a2hexpos
.1654	a0 18		               ldy  #>a2hexpos
.1656	20 e9 15	               jsr  putsxy
.1659	68		               pla
.165a	28		               plp
.165b	60		               rts
.165c			putrahexcxy
.165c	08		               php
.165d	20 8a 18	               jsr  a2hex
.1660	a9 33		               lda  #<a2hexpos
.1662	a0 18		               ldy  #>a2hexpos
.1664	20 12 16	               jsr  putscxy
.1667	68		               pla
.1668	28		               plp
.1669	60		               rts
.166a			setinverse
.166a	48		               pha
.166b	a9 12		               lda  #$12
.166d	20 d2 ff	               jsr  $ffd2
.1670	68		               pla
.1671	60		               rts
.1672			clrinverse
.1672	48		               pha
.1673	a9 92		               lda  #$92
.1675	20 d2 ff	               jsr  $ffd2
.1678	68		               pla
.1679	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.167a			push
.167a	08		          php            ; stack : flg, pcl, pch
.167b	78		          sei
.167c	8d b6 16	          sta  ra        ; save a
.167f	68		          pla            ; stack : pcl, pch
.1680	8d b5 16	          sta  rp        ; save rp
.1683	68		          pla            ; stack : pch
.1684	8d b7 16	          sta  pc        ; save pcl
.1687	68		          pla            ; stack : -
.1688	8d b8 16	          sta  pc+1      ; save pch
.168b	a5 fb		          lda  zpage1    ; get zpage1 low byte
.168d	48		          pha            ; stack : zp1l
.168e	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.1690	48		          pha            ; stack : zp1h, zp1l
.1691	a5 fd		          lda  zpage2    ; get zpage2 low byte
.1693	48		          pha            ; stack : zp2l, zp1h, zp1l
.1694	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.1696	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1697	ad b5 16	          lda  rp        ; get rp
.169a	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.169b	ad b6 16	          lda  ra        ; get a
.169e	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.169f	8a		          txa            ; get x
.16a0	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.16a1	98		          tya            ; get y
.16a2	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.16a3	ad b8 16	          lda  pc+1      ; get pch
.16a6	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.16a7	ad b7 16	          lda  pc        ; get pcl
.16aa	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.16ab	ad b5 16	          lda  rp        ; get rp
.16ae	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.16af	ad b6 16	          lda  ra        ; get a
.16b2	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.16b3	58		          cli
.16b4	60		          rts
>16b5	00		rp        .byte     0
>16b6	00		ra        .byte     0
>16b7	00 00		pc        .word     0
.16b9			pull
.16b9			pop
.16b9	78		          sei
.16ba	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.16bb	8d ee 16	          sta  pc        ; save pcl
.16be	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.16bf	8d ef 16	          sta  pc+1      ; save pch
.16c2	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.16c3	a8		          tay            ; set y
.16c4	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.16c5	aa		          tax            ; set x
.16c6	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.16c7	8d ed 16	          sta  ra        ; save a
.16ca	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.16cb	8d ec 16	          sta  rp        ; save rp
.16ce	68		          pla            ; stack : zp2l, zp1h, zp1l
.16cf	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.16d1	68		          pla            ; stack : zp1h, zp1l
.16d2	85 fd		          sta  zpage2    ; get zpage2 High byte
.16d4	68		          pla            ; stack : zp1l
.16d5	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.16d7	68		          pla            ; stack :
.16d8	85 fb		          sta  zpage1    ; get zpage1 High byte
.16da	ad ef 16	          lda  pc+1      ; get pch
.16dd	48		          pha            ; stack : pch
.16de	ad ee 16	          lda  pc
.16e1	48		          pha            ; stack : pcl, pch
.16e2	ad ec 16	          lda  rp        ; get rp
.16e5	48		          pha            ; stack : rp, pcl, pch
.16e6	ad ed 16	          lda  ra        ; set ra
.16e9	58		          cli
.16ea	28		          plp            ; stack : pcl, pch
.16eb	60		          rts
>16ec	00		rp        .byte     0
>16ed	00		ra        .byte     0
>16ee	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.16f0			blkfill
.16f0	20 7a 16	bf0            jsr  push
.16f3	20 b1 17	               jsr  savezp1
.16f6	84 fc		               sty  zpage1+1
.16f8	a0 00		               ldy  #$00
.16fa	84 fb		               sty  zpage1
.16fc	91 fb		bf1            sta  (zpage1),y
.16fe	c8		               iny
.16ff	d0 fb		               bne  bf1
.1701	20 c0 17	               jsr  restzp1
.1704	20 b9 16	               jsr  pop
.1707	60		               rts
.1708			memfill
.1708	20 7a 16	               jsr  push
.170b	20 f0 16	mf1            jsr  blkfill
.170e	c8		               iny
.170f	ca		               dex
.1710	d0 f9		               bne  mf1
.1712	20 b9 16	               jsr  pop
.1715	60		               rts
.1716			memmove
.1716	20 7a 16	               jsr  push
.1719	ba		               tsx            ; On se crée un pointeur ...
.171a	8a		               txa
.171b	18		               clc
.171c	69 0b		               adc  #11
.171e	a8		               tay
.171f	a2 06		               ldx  #$06
.1721	b9 00 01	nextbyte       lda  $0100,y
.1724	99 70 17	               sta  words,y
.1727	c8		               iny
.1728	ca		               dex
.1729	d0 f6		               bne  nextbyte
.172b	ad 70 17	               lda  s
.172e	8d 47 17	               sta  source+1
.1731	ad 71 17	               lda  s+1
.1734	8d 48 17	               sta  source+2
.1737	ad 72 17	               lda  d
.173a	8d 44 17	               sta  destin+1
.173d	ad 73 17	               lda  d+1
.1740	8d 45 17	               sta  destin+2
.1743	ad ff ff	destin         lda  $ffff
.1746	8d ff ff	source         sta  $ffff
.1749	ee 44 17	               inc  destin+1
.174c	d0 03		               bne  src
.174e	ee 45 17	               inc  destin+2
.1751	ee 47 17	src            inc  source+1
.1754	d0 03		               bne  cnt
.1756	ee 48 17	               inc  source+2
.1759	ad 74 17	cnt            lda  compte
.175c	d0 08		               bne  decit
.175e	ad 75 17	               lda  compte+1
.1761	f0 09		               beq  fini
.1763	ce 75 17	               dec  compte+1
.1766	ce 74 17	decit          dec  compte
.1769	4c 43 17	               jmp  destin
.176c	20 b9 16	fini           jsr  pop
.176f	60		               rts
.1770			words
>1770	00 00		s         .word     $0000
>1772	00 00		d         .word     $0000
>1774	00 00		compte    .word     $0000
.1776			decword
.1776	20 7a 16	               jsr  push
.1779	86 fd		               stx  zpage2
.177b	84 fe		               sty  zpage2+1
.177d	20 b9 16	               jsr  pop
.1780	60		               rts
.1781			inczp1
.1781	08		               php
.1782	48		               pha
.1783	e6 fb		               inc  zpage1
.1785	a5 fb		               lda  zpage1
.1787	d0 02		               bne  nopage
.1789	e6 fc		               inc  zpage1+1
.178b	68		nopage         pla
.178c	28		               plp
.178d	60		               rts
.178e			deczp1
.178e	08		                php
.178f	48		                pha
.1790	c6 fb		                dec  zpage1
.1792	d0 02		                bne  nopage
.1794	c6 fc		                dec  zpage1+1
.1796	68		nopage          pla
.1797	28		                plp
.1798	60		                rts
.1799			inczp2
.1799	08		               php
.179a	48		               pha
.179b	e6 fd		               inc  zpage2
.179d	a5 fd		               lda  zpage2
.179f	d0 02		               bne  nopage
.17a1	e6 fe		               inc  zpage2+1
.17a3	68		nopage         pla
.17a4	28		               plp
.17a5	60		               rts
.17a6			deczp2
.17a6	08		               php
.17a7	48		               pha
.17a8	a5 fd		               lda  zpage2
.17aa	d0 02		               bne  nopage
.17ac	c6 fe		               dec  zpage2+1
.17ae	68		nopage         pla
.17af	28		               plp
.17b0	60		               rts
.17b1			savezp1
.17b1	08		               php
.17b2	48		               pha
.17b3	a5 fb		               lda  zpage1
.17b5	8d 2d 18	               sta  zp1
.17b8	a5 fc		               lda  zpage1+1
.17ba	8d 2e 18	               sta  zp1+1
.17bd	68		               pla
.17be	28		               plp
.17bf	60		               rts
.17c0			restzp1
.17c0	08		               php
.17c1	48		               pha
.17c2	ad 2d 18	               lda zp1
.17c5	85 fb		               sta zpage1
.17c7	ad 2e 18	               lda zp1+1
.17ca	85 fc		               sta zpage1+1
.17cc	68		               pla
.17cd	28		               plp
.17ce	60		               rts
.17cf			savezp2
.17cf	08		         php
.17d0	48		         pha
.17d1	a5 fd		         lda zpage2
.17d3	8d 2f 18	         sta zp2
.17d6	a5 fe		         lda zpage2+1
.17d8	8d 30 18	         sta zp2+1
.17db	68		         pla
.17dc	28		         plp
.17dd	60		         rts
.17de			restzp2
.17de	08		                php
.17df	48		                pha
.17e0	ad 2f 18	                lda  zp2
.17e3	85 fd		                sta  zpage2
.17e5	ad 30 18	                lda  zp2+1
.17e8	85 fe		                sta  zpage2+1
.17ea	68		                pla
.17eb	28		                plp
.17ec	60		                rts
.17ed			xy2addr
.17ed	08		                php
.17ee	48		                pha
.17ef	8a		                txa
.17f0	48		                pha
.17f1	98		                tya
.17f2	48		                pha
.17f3	ad 28 18	                lda     addr1+1
.17f6	8d 2a 18	                sta     addr2+1
.17f9	ad 27 18	                lda     addr1
.17fc	8d 29 18	                sta     addr2
.17ff	c0 00		                cpy     #$00
.1801	f0 0f		                beq     addx
.1803	18		moreline        clc
.1804	6d 26 18	                adc     ymult
.1807	90 03		                bcc     norepy
.1809	ee 2a 18	                inc     addr2+1
.180c	8d 29 18	norepy          sta     addr2
.180f	88		                dey
.1810	d0 f1		                bne     moreline
.1812	8a		addx            txa
.1813	18		                clc
.1814	6d 29 18	                adc     addr2
.1817	90 03		                bcc     thatsit
.1819	ee 2a 18	                inc     addr2+1
.181c	8d 29 18	thatsit         sta     addr2
.181f	68		                pla
.1820	a8		                tay
.1821	68		                pla
.1822	aa		                tax
.1823	68		                pla
.1824	28		                plp
.1825	60		                rts
>1826	28		ymult          .byte     40
>1827	00 00		addr1          .word     $0000
>1829	00 00		addr2          .word     $0000
>182b	00 00		bytecnt        .word     $0000
>182d	00 00		zp1        .word   $0000
>182f	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>1831	01		a2hexcol       .byte     1              ; pour aputscxy
>1832	00		a2hexbkcol     .byte     %00000000
.1833			a2hexpos
>1833	00		a2hexpx        .byte     0              ; pour aputsxy
>1834	00		a2hexpy        .byte     0
>1835	24		a2hexprefix    .byte     "$"            ; pour aputs
>1836	00 00		a2hexstr       .word     $00
>1838	00 00		               .word     $00
>183a	00		               .byte     0              ; 0 end string
.183b			putahexfmtxy
.183b	20 7a 16	               jsr  push
.183e	20 8a 18	               jsr  a2hex
.1841	ae 33 18	               ldx  a2hexpx
.1844	ac 34 18	               ldy  a2hexpy
.1847	20 a3 15	               jsr  gotoxy
.184a	a2 35		               ldx  #<a2hexprefix
.184c	a0 18		               ldy  #>a2hexprefix
.184e	20 89 15	               jsr  puts
.1851	20 b9 16	               jsr  pop
.1854	60		               rts
.1855			putahexfmt
.1855	20 7a 16	               jsr  push
.1858	20 8a 18	               jsr  a2hex
.185b	a2 35		               ldx  #<a2hexprefix
.185d	a0 18		               ldy  #>a2hexprefix
.185f	20 89 15	               jsr  puts
.1862	20 b9 16	               jsr  pop
.1865	60		               rts
.1866			putahex
.1866	20 7a 16	               jsr  push
.1869	20 8a 18	               jsr  a2hex
.186c	a2 36		               ldx  #<a2hexstr
.186e	a0 18		               ldy  #>a2hexstr
.1870	20 89 15	               jsr  puts
.1873	20 b9 16	               jsr  pop
.1876	60		               rts
.1877			nib2hex
.1877	08		               php
.1878	29 0f		               and  #$0f
.187a	f8		               sed
.187b	18		               clc
.187c	69 90		               adc  #$90
.187e	69 40		               adc  #$40
.1880	d8		               cld
.1881	28		               plp
.1882	60		               rts
.1883			lsra4bits
.1883	08		               php
.1884	4a		               lsr
.1885	4a		               lsr
.1886	4a		               lsr
.1887	4a		               lsr
.1888	28		               plp
.1889	60		               rts
.188a			a2hex
.188a	08		               php
.188b	48		               pha
.188c	48		               pha
.188d	20 83 18	               jsr  lsra4bits
.1890	20 77 18	               jsr  nib2hex
.1893	8d 36 18	               sta  a2hexstr
.1896	68		               pla
.1897	20 77 18	               jsr  nib2hex
.189a	8d 37 18	               sta  a2hexstr+1
.189d	a9 00		               lda  #$00                ; set end of string
.189f	8d 38 18	               sta  a2hexstr+2
.18a2	68		               pla
.18a3	28		               plp
.18a4	60		               rts
.18a5			xy2hex
.18a5	20 7a 16	               jsr  push
.18a8	20 8a 18	               jsr  a2hex
.18ab	8a		               txa
.18ac	48		               pha
.18ad	20 83 18	               jsr  lsra4bits
.18b0	20 77 18	               jsr  nib2hex
.18b3	8d 36 18	               sta  a2hexstr
.18b6	68		               pla
.18b7	20 77 18	               jsr  nib2hex
.18ba	8d 37 18	               sta  a2hexstr+1
.18bd	98		               tya
.18be	48		               pha
.18bf	20 83 18	               jsr  lsra4bits
.18c2	20 77 18	               jsr  nib2hex
.18c5	8d 38 18	               sta  a2hexstr+2
.18c8	68		               pla
.18c9	20 77 18	               jsr  nib2hex
.18cc	8d 39 18	               sta  a2hexstr+3
.18cf	a9 00		               lda  #$00                ; 0 ended string
.18d1	8d 3a 18	               sta  a2hexstr+4
.18d4	20 b9 16	               jsr  pop
.18d7			atobin
.18d7	20 7a 16	               jsr     push
.18da	a2 08		               ldx     #8
.18dc	a0 00		               ldy     #0
.18de	2a		nextbit        rol
.18df	48		               pha
.18e0	69 00		               adc     #$00
.18e2	29 01		               and     #$01
.18e4	20 77 18	               jsr     nib2hex
.18e7	99 f8 18	               sta     abin,y
.18ea	68		               pla
.18eb	c8		               iny
.18ec	ca		               dex
.18ed	d0 ef		               bne     nextbit
.18ef	a9 00		               lda     #0
.18f1	99 f8 18	               sta     abin,y
.18f4	20 b9 16	               jsr     pull
.18f7	60		               rts
>18f8	30 30 30 30	abin           .null   "00000000"
>18fc	30 30 30 30 00
.1901			putabin
.1901	20 d7 18	               jsr     atobin
.1904	20 7a 16	               jsr     push
.1907	a2 f8		               ldx     #<abin
.1909	a0 18		               ldy     #>abin
.190b	20 89 15	               jsr     puts
.190e	20 b9 16	               jsr     pop
.1911	60		               rts
.1912			putabinfmt
.1912	08		               php
.1913	48		               pha
.1914	a9 25		               lda     #"%"
.1916	20 83 15	               jsr     putch
.1919	68		               pla
.191a	20 01 19	               jsr     putabin
.191d	28		               plp
.191e	60		               rts
.191f			putabinxy
.191f	20 a3 15	               jsr     gotoxy
.1922	20 01 19	               jsr     putabin
.1925	60		               rts
.1926			putabinfmtxy
.1926	20 a3 15	               jsr     gotoxy
.1929	20 12 19	               jsr     putabinfmt
.192c	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>192d	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>1931	00 00 00 00 00 00 00 00 00 0d 00 00
>193d	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>1941	00 00 00 00 00 00 00 00 00 00 00 00
>194d	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>1951	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>195d	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1961	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>196d	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1971	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>197d	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1981	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>198d	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1991	00 00 00 00 00 00 00 00 00 00 00 00
>199d	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>19a1	00 00 00 00 00 00 00 00 00 00 00 00
>19ad	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>19b1	00 00 00 00 00 00 00 00 00 00 00 00
>19bd	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>19c1	00 00 00 00 00 00 00 00 00 00 00 00
>19cd	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>19d1	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>19dd	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>19e1	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>19ed	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>19f1	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>19fd	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>1a01	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>1a0d	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>1a11	00 00 00 00 00 00 00 00 00 00 00 00
>1a1d	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>1a21	00 00 00 00 00 00 00 00 00 00 00 00
.1a2d			waitstop
.1a2d	20 7a 16	               jsr  push
.1a30	20 ed f6	wait           jsr  k_stop
.1a33	d0 fb		               bne  wait
.1a35	20 b9 16	               jsr  pop
.1a38	60		               rts
.1a39			anykey
.1a39	08		               php
.1a3a	48		               pha
.1a3b	a5 cb		nokey          lda 203
.1a3d	c9 40		               cmp #64
.1a3f	f0 fa		               beq nokey
.1a41	20 47 1a	               jsr releasekey
.1a44	68		               pla
.1a45	28		               plp
.1a46	60		               rts
.1a47			releasekey
.1a47	08		               php
.1a48	48		               pha
.1a49	a5 cb		keypressed     lda 203
.1a4b	c9 40		               cmp #64
.1a4d	d0 fa		               bne keypressed
.1a4f	68		               pla
.1a50	28		               plp
.1a51	60		               rts
.1a52			getkey
.1a52	20 e4 ff	again          jsr  getin
.1a55	c9 00		               cmp  #0
.1a57	f0 f9		               beq  again
.1a59	60		               rts
.1a5a			waitkey
.1a5a	20 7a 16	               jsr  push
.1a5d	8d ab 1a	               sta  thekey
.1a60	20 e4 ff	nope           jsr  getin
.1a63	20 d2 ff	               jsr  chrout
.1a66	cd ab 1a	               cmp  thekey
.1a69	d0 f5		               bne  nope
.1a6b	20 d2 ff	               jsr  chrout
.1a6e	20 b9 16	               jsr  pop
.1a71	60		               rts
.1a72			waitspace
.1a72	20 7a 16	               jsr  push
.1a75	a9 7f		wait           lda  #$7f  ;%01111111
.1a77	8d 00 dc	               sta  $dc00
.1a7a	ad 01 dc	               lda  $dc01
.1a7d	29 10		               and  #$10  ;mask %00010000
.1a7f	d0 f4		               bne  wait
.1a81	20 b9 16	               jsr  pop
.1a84			waitsstop
.1a84	20 7a 16	               jsr  push
.1a87	20 ed f6	wait           jsr  k_stop  ;%01111111
.1a8a	d0 fb		               bne  wait
.1a8c	20 b9 16	               jsr  pop
.1a8f			waitreturn
.1a8f	20 7a 16	               jsr  push
.1a92	ad ac 1a	               lda  thecount
.1a95	8d 00 04	               sta  scrnram
.1a98	a9 02		               lda  #$02
.1a9a	8d 00 d8	               sta  colorram
.1a9d	20 e4 ff	nope           jsr  getin
.1aa0	c9 0d		nohex          cmp  #$0d
.1aa2	d0 f9		               bne  nope
.1aa4	ee ac 1a	               inc  thecount
.1aa7	20 b9 16	               jsr  pop
.1aaa	60		               rts
>1aab	00		thekey         .byte   0
>1aac	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  End of listing

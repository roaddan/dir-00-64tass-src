
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Sun Nov  5 22:23:55 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm

=$0d			flashcol = vvert1

;******  Return to file: charedit.asm

.080d			main
.080d	20 21 15	               jsr  push
.0810	20 d2 13	               jsr  screendis
.0813	20 ec 13	               jsr  scrmaninit
.0816	20 66 08	               jsr  setscreenptr
.0819	20 67 0e	               jsr  staticscreen
.081c	20 df 13	               jsr  screenena
.081f	20 21 15	               jsr  push
.0822	a2 f5		               ldx  #<blankmsg
.0824	a0 0f		               ldy  #>blankmsg
.0826	20 b9 14	               jsr  putscxy
.0829	a2 20		               ldx  #<edit_msg
.082b	a0 10		               ldy  #>edit_msg
.082d	20 b9 14	               jsr  putscxy
.0830	20 60 15	               jsr  pop
.0833	a9 00		               lda  #$00
.0835	8d c6 09	               sta  fkeyset
.0838	20 ad 0e	               jsr  showfkeys
.083b	20 60 15	               jsr  pop
.083e	20 f4 08	               jsr  keyaction
.0841	20 0e 14	               jsr  cls
.0844	20 21 15	               jsr  push
.0847	a2 f5		               ldx  #<blankmsg
.0849	a0 0f		               ldy  #>blankmsg
.084b	20 b9 14	               jsr  putscxy
.084e	a2 10		               ldx  #<bye_msg
.0850	a0 12		               ldy  #>bye_msg
.0852	20 b9 14	               jsr  putscxy
.0855	20 60 15	               jsr  pop
.0858	20 21 15	               jsr  push
.085b	a2 00		               ldx  #0
.085d	a0 00		               ldy  #0
.085f	20 4a 14	               jsr  gotoxy
.0862	20 60 15	               jsr  pop
.0865	60		               rts
=$0400			scrnnewram     =  $0400
.0866			setscreenptr
.0866	20 21 15	               jsr  push
.0869	a9 08		               lda  #$08      ; basic commande to disable ...
.086b	20 d2 ff	               jsr  chrout    ; ... character set change.
.086e	ad 02 dd	               lda  cia2ddra  ;$dd02, 56578 cia2 data direction A
.0871	09 11		               ora  #$00000011
.0873	8d 02 dd	               sta  cia2ddra  ;$dd02, 56578 cia2 data direction A
.0876	ad 00 dd	               lda  cia2pra   ;$dd00, 56576 cia2 dataport A
.0879	29 fc		               and  #%11111100
.087b	09 00		               ora  #%00000000
.087d	8d 00 dd	               sta  cia2pra   ;$dd00, 56576 cia2 dataport A
.0880	ad 18 d0	               lda  vicmemptr ;$d018, 53272
.0883	29 f0		               and  #%11110000
.0885	09 02		               ora  #%00000010
.0887	8d 18 d0	               sta  vicmemptr; $d018, 53272
.088a	a9 c4		               lda  #%11000100     ;196
.088c	8d 88 02	               sta  $0288 ;648 - top page of screen memory
.088f	20 60 15	               jsr  pop
.0892	60		               rts
.0893			copycharset
.0893	20 21 15	               jsr  push
.0896	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0899	29 fe		               and  #%11111110     ;254
.089b	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.089e	a5 01		               lda  u6510map       ;$01
.08a0	29 fb		               and  #%11111011     ;251
.08a2	85 01		               sta  u6510map       ;$01
.08a4	20 b9 08	               jsr  memcopy
.08a7	a5 01		               lda  u6510map       ;$01
.08a9	09 04		               ora  #%00000100
.08ab	85 01		               sta  u6510map       ;$01
.08ad	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.08b0	09 01		               ora  #%00000001     ;254
.08b2	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.08b5	20 60 15	               jsr  pop
.08b8	60		               rts
.08b9			memcopy
.08b9	20 21 15	               jsr  push
.08bc	ad ee 08	onemore        lda  startaddr
.08bf	85 fb		               sta  zpage1
.08c1	ad ef 08	               lda  startaddr+1
.08c4	85 fc		               sta  zpage1+1
.08c6	ad f0 08	               lda  destaddr
.08c9	85 fd		               sta  zpage2
.08cb	ad f1 08	               lda  destaddr+1
.08ce	85 fe		               sta  zpage2+1
.08d0	a0 00		               ldy  #$00
.08d2	b1 fb		               lda  (zpage1),y
.08d4	91 fd		               sta  (zpage2),y
.08d6	20 28 16	               jsr  inczp1
.08d9	20 40 16	               jsr  inczp2
.08dc	a5 fc		               lda  zpage1+1
.08de	cd f3 08	               cmp  stopaddr+1
.08e1	d0 d9		               bne  onemore
.08e3	a5 fb		               lda  zpage1
.08e5	cd f2 08	               cmp  stopaddr
.08e8	d0 d2		               bne  onemore
.08ea	20 60 15	               jsr  pop
.08ed	60		               rts
>08ee	00 d0		startaddr      .word     53248
>08f0	00 c8		destaddr       .word     53248-2048
>08f2	00 d8		stopaddr       .word     55296
.08f4			keyaction
.08f4	20 21 15	               jsr  push
.08f7	20 f9 18	loop           jsr  getkey
.08fa	20 21 15	               jsr  push
.08fd	a2 00		               ldx  #0
.08ff	a0 14		               ldy  #20
.0901	20 4a 14	               jsr  gotoxy
.0904	20 60 15	               jsr  pop
.0907	20 2a 14	               jsr  putch
.090a	20 21 15	               jsr  push
.090d	a2 00		               ldx  #0
.090f	a0 15		               ldy  #21
.0911	20 4a 14	               jsr  gotoxy
.0914	20 60 15	               jsr  pop
.0917	48		               pha
.0918	48		               pha
.0919	a9 24		               lda  #'$'
.091b	20 2a 14	               jsr  putch
.091e	68		               pla
.091f	aa		               tax
.0920	bd d4 17	               lda  asciitorom,x
.0923	20 0d 17	               jsr  putahex
.0926	20 21 15	               jsr  push
.0929	a2 b1		               ldx  #<txt1
.092b	a0 09		               ldy  #>txt1
.092d	20 30 14	               jsr  puts
.0930	20 60 15	               jsr  pull
.0933	20 21 15	               jsr  push
.0936	a2 00		               ldx  #0
.0938	a0 16		               ldy  #22
.093a	20 4a 14	               jsr  gotoxy
.093d	20 60 15	               jsr  pop
.0940	a9 24		               lda  #'$'
.0942	20 2a 14	               jsr  putch
.0945	68		               pla
.0946	20 0d 17	               jsr  putahex
.0949	20 21 15	               jsr  push
.094c	a2 bb		               ldx  #<txt2
.094e	a0 09		               ldy  #>txt2
.0950	20 30 14	               jsr  puts
.0953	20 60 15	               jsr  pull
.0956	c9 85		               cmp  #key_f1
.0958	f0 23		               beq  f1
.095a	c9 89		               cmp  #key_f2
.095c	f0 25		               beq  f2
.095e	c9 86		               cmp  #key_f3
.0960	f0 27		               beq  f3
.0962	c9 8a		               cmp  #key_f4
.0964	f0 29		               beq  f4
.0966	c9 87		               cmp  #key_f5
.0968	f0 2b		               beq  f5
.096a	c9 8b		               cmp  #key_f6
.096c	f0 2d		               beq  f6
.096e	c9 88		               cmp  #key_f7
.0970	f0 2f		               beq  f7
.0972	c9 8c		               cmp  #key_f8
.0974	f0 31		               beq  f8
.0976	c9 18		               cmp  #ctrl_x
.0978	f0 33		               beq  quit
.097a	4c f7 08	               jmp  loop
.097d	20 c7 09	f1             jsr  f1action
.0980	4c f7 08	               jmp  loop
.0983	20 5a 0a	f2             jsr  f2action
.0986	4c f7 08	               jmp  loop
.0989	20 ed 0a	f3             jsr  f3action
.098c	4c f7 08	               jmp  loop
.098f	20 80 0b	f4             jsr  f4action
.0992	4c f7 08	               jmp  loop
.0995	20 13 0c	f5             jsr  f5action
.0998	4c f7 08	               jmp  loop
.099b	20 a6 0c	f6             jsr  f6action
.099e	4c f7 08	               jmp  loop
.09a1	20 39 0d	f7             jsr  f7action
.09a4	4c f7 08	               jmp  loop
.09a7	20 cc 0d	f8             jsr  f8action
.09aa	4c f7 08	               jmp  loop
.09ad			quit
.09ad	20 60 15	               jsr  pop
.09b0	60		               rts
>09b1	20 52 4f 4d	txt1           .null     " rom pos."
>09b5	20 50 4f 53 2e 00
>09bb	20 4b 45 59	txt2           .null     " key value"
>09bf	20 56 41 4c 55 45 00
>09c6	00		fkeyset        .byte     0
.09c7			f1action
.09c7	48		               pha
.09c8	ad c6 09	               lda  fkeyset
.09cb	d0 47		               bne  menub
.09cd	08		               php
.09ce	48		               pha
.09cf	8a		               txa
.09d0	48		               pha
.09d1	ad 32 12	               lda  f1abutton
.09d4	48		               pha
.09d5	a9 92		               lda  #146
.09d7	8d 41 12	               sta  f1abutton+15
.09da	a9 0d		               lda  #flashcol
.09dc	8d 32 12	               sta  f1abutton
.09df	a2 32		               ldx  #<f1abutton
.09e1	a0 12		               ldy  #>f1abutton
.09e3	20 b9 14	               jsr  putscxy
.09e6	20 d9 0f	               jsr  delay
.09e9	a9 12		               lda  #18
.09eb	8d 41 12	               sta  f1abutton+15
.09ee	68		               pla
.09ef	8d 32 12	               sta  f1abutton
.09f2	a2 32		               ldx  #<f1abutton
.09f4	a0 12		               ldy  #>f1abutton
.09f6	20 b9 14	               jsr  putscxy
.09f9	68		               pla
.09fa	aa		               tax
.09fb	68		               pla
.09fc	28		               plp
.09fd	20 21 15	               jsr  push
.0a00	a2 f5		               ldx  #<blankmsg
.0a02	a0 0f		               ldy  #>blankmsg
.0a04	20 b9 14	               jsr  putscxy
.0a07	a2 20		               ldx  #<f1a_msg
.0a09	a0 10		               ldy  #>f1a_msg
.0a0b	20 b9 14	               jsr  putscxy
.0a0e	20 60 15	               jsr  pop
.0a11	4c 58 0a	               jmp  out
.0a14			menub
.0a14	08		               php
.0a15	48		               pha
.0a16	8a		               txa
.0a17	48		               pha
.0a18	ad 02 13	               lda  f1bbutton
.0a1b	48		               pha
.0a1c	a9 92		               lda  #146
.0a1e	8d 11 13	               sta  f1bbutton+15
.0a21	a9 0d		               lda  #flashcol
.0a23	8d 02 13	               sta  f1bbutton
.0a26	a2 02		               ldx  #<f1bbutton
.0a28	a0 13		               ldy  #>f1bbutton
.0a2a	20 b9 14	               jsr  putscxy
.0a2d	20 d9 0f	               jsr  delay
.0a30	a9 12		               lda  #18
.0a32	8d 11 13	               sta  f1bbutton+15
.0a35	68		               pla
.0a36	8d 02 13	               sta  f1bbutton
.0a39	a2 02		               ldx  #<f1bbutton
.0a3b	a0 13		               ldy  #>f1bbutton
.0a3d	20 b9 14	               jsr  putscxy
.0a40	68		               pla
.0a41	aa		               tax
.0a42	68		               pla
.0a43	28		               plp
.0a44	20 21 15	               jsr  push
.0a47	a2 f5		               ldx  #<blankmsg
.0a49	a0 0f		               ldy  #>blankmsg
.0a4b	20 b9 14	               jsr  putscxy
.0a4e	a2 f0		               ldx  #<f1b_msg
.0a50	a0 10		               ldy  #>f1b_msg
.0a52	20 b9 14	               jsr  putscxy
.0a55	20 60 15	               jsr  pop
.0a58	68		out            pla
.0a59	60		               rts
.0a5a			f2action
.0a5a	48		               pha
.0a5b	ad c6 09	               lda  fkeyset
.0a5e	d0 47		               bne  menub
.0a60	08		               php
.0a61	48		               pha
.0a62	8a		               txa
.0a63	48		               pha
.0a64	ad 4c 12	               lda  f2abutton
.0a67	48		               pha
.0a68	a9 92		               lda  #146
.0a6a	8d 5b 12	               sta  f2abutton+15
.0a6d	a9 0d		               lda  #flashcol
.0a6f	8d 4c 12	               sta  f2abutton
.0a72	a2 4c		               ldx  #<f2abutton
.0a74	a0 12		               ldy  #>f2abutton
.0a76	20 b9 14	               jsr  putscxy
.0a79	20 d9 0f	               jsr  delay
.0a7c	a9 12		               lda  #18
.0a7e	8d 5b 12	               sta  f2abutton+15
.0a81	68		               pla
.0a82	8d 4c 12	               sta  f2abutton
.0a85	a2 4c		               ldx  #<f2abutton
.0a87	a0 12		               ldy  #>f2abutton
.0a89	20 b9 14	               jsr  putscxy
.0a8c	68		               pla
.0a8d	aa		               tax
.0a8e	68		               pla
.0a8f	28		               plp
.0a90	20 21 15	               jsr  push
.0a93	a2 f5		               ldx  #<blankmsg
.0a95	a0 0f		               ldy  #>blankmsg
.0a97	20 b9 14	               jsr  putscxy
.0a9a	a2 3c		               ldx  #<f2a_msg
.0a9c	a0 10		               ldy  #>f2a_msg
.0a9e	20 b9 14	               jsr  putscxy
.0aa1	20 60 15	               jsr  pop
.0aa4	4c eb 0a	               jmp  out
.0aa7			menub
.0aa7	08		               php
.0aa8	48		               pha
.0aa9	8a		               txa
.0aaa	48		               pha
.0aab	ad 1c 13	               lda  f2bbutton
.0aae	48		               pha
.0aaf	a9 92		               lda  #146
.0ab1	8d 2b 13	               sta  f2bbutton+15
.0ab4	a9 0d		               lda  #flashcol
.0ab6	8d 1c 13	               sta  f2bbutton
.0ab9	a2 1c		               ldx  #<f2bbutton
.0abb	a0 13		               ldy  #>f2bbutton
.0abd	20 b9 14	               jsr  putscxy
.0ac0	20 d9 0f	               jsr  delay
.0ac3	a9 12		               lda  #18
.0ac5	8d 2b 13	               sta  f2bbutton+15
.0ac8	68		               pla
.0ac9	8d 1c 13	               sta  f2bbutton
.0acc	a2 1c		               ldx  #<f2bbutton
.0ace	a0 13		               ldy  #>f2bbutton
.0ad0	20 b9 14	               jsr  putscxy
.0ad3	68		               pla
.0ad4	aa		               tax
.0ad5	68		               pla
.0ad6	28		               plp
.0ad7	20 21 15	               jsr  push
.0ada	a2 f5		               ldx  #<blankmsg
.0adc	a0 0f		               ldy  #>blankmsg
.0ade	20 b9 14	               jsr  putscxy
.0ae1	a2 07		               ldx  #<f2b_msg
.0ae3	a0 11		               ldy  #>f2b_msg
.0ae5	20 b9 14	               jsr  putscxy
.0ae8	20 60 15	               jsr  pop
.0aeb	68		out            pla
.0aec	60		               rts
.0aed			f3action
.0aed	48		               pha
.0aee	ad c6 09	               lda  fkeyset
.0af1	d0 47		               bne  menub
.0af3	08		               php
.0af4	48		               pha
.0af5	8a		               txa
.0af6	48		               pha
.0af7	ad 66 12	               lda  f3abutton
.0afa	48		               pha
.0afb	a9 92		               lda  #146
.0afd	8d 75 12	               sta  f3abutton+15
.0b00	a9 0d		               lda  #flashcol
.0b02	8d 66 12	               sta  f3abutton
.0b05	a2 66		               ldx  #<f3abutton
.0b07	a0 12		               ldy  #>f3abutton
.0b09	20 b9 14	               jsr  putscxy
.0b0c	20 d9 0f	               jsr  delay
.0b0f	a9 12		               lda  #18
.0b11	8d 75 12	               sta  f3abutton+15
.0b14	68		               pla
.0b15	8d 66 12	               sta  f3abutton
.0b18	a2 66		               ldx  #<f3abutton
.0b1a	a0 12		               ldy  #>f3abutton
.0b1c	20 b9 14	               jsr  putscxy
.0b1f	68		               pla
.0b20	aa		               tax
.0b21	68		               pla
.0b22	28		               plp
.0b23	20 21 15	               jsr  push
.0b26	a2 f5		               ldx  #<blankmsg
.0b28	a0 0f		               ldy  #>blankmsg
.0b2a	20 b9 14	               jsr  putscxy
.0b2d	a2 62		               ldx  #<f3a_msg
.0b2f	a0 10		               ldy  #>f3a_msg
.0b31	20 b9 14	               jsr  putscxy
.0b34	20 60 15	               jsr  pop
.0b37	4c 7e 0b	               jmp  out
.0b3a			menub
.0b3a	08		               php
.0b3b	48		               pha
.0b3c	8a		               txa
.0b3d	48		               pha
.0b3e	ad 36 13	               lda  f3bbutton
.0b41	48		               pha
.0b42	a9 92		               lda  #146
.0b44	8d 45 13	               sta  f3bbutton+15
.0b47	a9 0d		               lda  #flashcol
.0b49	8d 36 13	               sta  f3bbutton
.0b4c	a2 36		               ldx  #<f3bbutton
.0b4e	a0 13		               ldy  #>f3bbutton
.0b50	20 b9 14	               jsr  putscxy
.0b53	20 d9 0f	               jsr  delay
.0b56	a9 12		               lda  #18
.0b58	8d 45 13	               sta  f3bbutton+15
.0b5b	68		               pla
.0b5c	8d 36 13	               sta  f3bbutton
.0b5f	a2 36		               ldx  #<f3bbutton
.0b61	a0 13		               ldy  #>f3bbutton
.0b63	20 b9 14	               jsr  putscxy
.0b66	68		               pla
.0b67	aa		               tax
.0b68	68		               pla
.0b69	28		               plp
.0b6a	20 21 15	               jsr  push
.0b6d	a2 f5		               ldx  #<blankmsg
.0b6f	a0 0f		               ldy  #>blankmsg
.0b71	20 b9 14	               jsr  putscxy
.0b74	a2 20		               ldx  #<f3b_msg
.0b76	a0 11		               ldy  #>f3b_msg
.0b78	20 b9 14	               jsr  putscxy
.0b7b	20 60 15	               jsr  pop
.0b7e	68		out            pla
.0b7f	60		               rts
.0b80			f4action
.0b80	48		               pha
.0b81	ad c6 09	               lda  fkeyset
.0b84	d0 47		               bne  menub
.0b86	08		               php
.0b87	48		               pha
.0b88	8a		               txa
.0b89	48		               pha
.0b8a	ad 80 12	               lda  f4abutton
.0b8d	48		               pha
.0b8e	a9 92		               lda  #146
.0b90	8d 8f 12	               sta  f4abutton+15
.0b93	a9 0d		               lda  #flashcol
.0b95	8d 80 12	               sta  f4abutton
.0b98	a2 80		               ldx  #<f4abutton
.0b9a	a0 12		               ldy  #>f4abutton
.0b9c	20 b9 14	               jsr  putscxy
.0b9f	20 d9 0f	               jsr  delay
.0ba2	a9 12		               lda  #18
.0ba4	8d 8f 12	               sta  f4abutton+15
.0ba7	68		               pla
.0ba8	8d 80 12	               sta  f4abutton
.0bab	a2 80		               ldx  #<f4abutton
.0bad	a0 12		               ldy  #>f4abutton
.0baf	20 b9 14	               jsr  putscxy
.0bb2	68		               pla
.0bb3	aa		               tax
.0bb4	68		               pla
.0bb5	28		               plp
.0bb6	20 21 15	               jsr  push
.0bb9	a2 f5		               ldx  #<blankmsg
.0bbb	a0 0f		               ldy  #>blankmsg
.0bbd	20 b9 14	               jsr  putscxy
.0bc0	a2 89		               ldx  #<f4a_msg
.0bc2	a0 10		               ldy  #>f4a_msg
.0bc4	20 b9 14	               jsr  putscxy
.0bc7	20 60 15	               jsr  pop
.0bca	4c 11 0c	               jmp  out
.0bcd			menub
.0bcd	08		               php
.0bce	48		               pha
.0bcf	8a		               txa
.0bd0	48		               pha
.0bd1	ad 50 13	               lda  f4bbutton
.0bd4	48		               pha
.0bd5	a9 92		               lda  #146
.0bd7	8d 5f 13	               sta  f4bbutton+15
.0bda	a9 0d		               lda  #flashcol
.0bdc	8d 50 13	               sta  f4bbutton
.0bdf	a2 50		               ldx  #<f4bbutton
.0be1	a0 13		               ldy  #>f4bbutton
.0be3	20 b9 14	               jsr  putscxy
.0be6	20 d9 0f	               jsr  delay
.0be9	a9 12		               lda  #18
.0beb	8d 5f 13	               sta  f4bbutton+15
.0bee	68		               pla
.0bef	8d 50 13	               sta  f4bbutton
.0bf2	a2 50		               ldx  #<f4bbutton
.0bf4	a0 13		               ldy  #>f4bbutton
.0bf6	20 b9 14	               jsr  putscxy
.0bf9	68		               pla
.0bfa	aa		               tax
.0bfb	68		               pla
.0bfc	28		               plp
.0bfd	20 21 15	               jsr  push
.0c00	a2 f5		               ldx  #<blankmsg
.0c02	a0 0f		               ldy  #>blankmsg
.0c04	20 b9 14	               jsr  putscxy
.0c07	a2 38		               ldx  #<f4b_msg
.0c09	a0 11		               ldy  #>f4b_msg
.0c0b	20 b9 14	               jsr  putscxy
.0c0e	20 60 15	               jsr  pop
.0c11	68		out            pla
.0c12	60		               rts
.0c13			f5action
.0c13	48		               pha
.0c14	ad c6 09	               lda  fkeyset
.0c17	d0 47		               bne  menub
.0c19	08		               php
.0c1a	48		               pha
.0c1b	8a		               txa
.0c1c	48		               pha
.0c1d	ad 9a 12	               lda  f5abutton
.0c20	48		               pha
.0c21	a9 92		               lda  #146
.0c23	8d a9 12	               sta  f5abutton+15
.0c26	a9 0d		               lda  #flashcol
.0c28	8d 9a 12	               sta  f5abutton
.0c2b	a2 9a		               ldx  #<f5abutton
.0c2d	a0 12		               ldy  #>f5abutton
.0c2f	20 b9 14	               jsr  putscxy
.0c32	20 d9 0f	               jsr  delay
.0c35	a9 12		               lda  #18
.0c37	8d a9 12	               sta  f5abutton+15
.0c3a	68		               pla
.0c3b	8d 9a 12	               sta  f5abutton
.0c3e	a2 9a		               ldx  #<f5abutton
.0c40	a0 12		               ldy  #>f5abutton
.0c42	20 b9 14	               jsr  putscxy
.0c45	68		               pla
.0c46	aa		               tax
.0c47	68		               pla
.0c48	28		               plp
.0c49	20 21 15	               jsr  push
.0c4c	a2 f5		               ldx  #<blankmsg
.0c4e	a0 0f		               ldy  #>blankmsg
.0c50	20 b9 14	               jsr  putscxy
.0c53	a2 a6		               ldx  #<f5a_msg
.0c55	a0 10		               ldy  #>f5a_msg
.0c57	20 b9 14	               jsr  putscxy
.0c5a	20 60 15	               jsr  pop
.0c5d	4c a4 0c	               jmp  out
.0c60			menub
.0c60	08		               php
.0c61	48		               pha
.0c62	8a		               txa
.0c63	48		               pha
.0c64	ad 6a 13	               lda  f5bbutton
.0c67	48		               pha
.0c68	a9 92		               lda  #146
.0c6a	8d 79 13	               sta  f5bbutton+15
.0c6d	a9 0d		               lda  #flashcol
.0c6f	8d 6a 13	               sta  f5bbutton
.0c72	a2 6a		               ldx  #<f5bbutton
.0c74	a0 13		               ldy  #>f5bbutton
.0c76	20 b9 14	               jsr  putscxy
.0c79	20 d9 0f	               jsr  delay
.0c7c	a9 12		               lda  #18
.0c7e	8d 79 13	               sta  f5bbutton+15
.0c81	68		               pla
.0c82	8d 6a 13	               sta  f5bbutton
.0c85	a2 6a		               ldx  #<f5bbutton
.0c87	a0 13		               ldy  #>f5bbutton
.0c89	20 b9 14	               jsr  putscxy
.0c8c	68		               pla
.0c8d	aa		               tax
.0c8e	68		               pla
.0c8f	28		               plp
.0c90	20 21 15	               jsr  push
.0c93	a2 f5		               ldx  #<blankmsg
.0c95	a0 0f		               ldy  #>blankmsg
.0c97	20 b9 14	               jsr  putscxy
.0c9a	a2 4d		               ldx  #<f5b_msg
.0c9c	a0 11		               ldy  #>f5b_msg
.0c9e	20 b9 14	               jsr  putscxy
.0ca1	20 60 15	               jsr  pop
.0ca4	68		out            pla
.0ca5	60		               rts
.0ca6			f6action
.0ca6	48		               pha
.0ca7	ad c6 09	               lda  fkeyset
.0caa	d0 47		               bne  menub
.0cac	08		               php
.0cad	48		               pha
.0cae	8a		               txa
.0caf	48		               pha
.0cb0	ad b4 12	               lda  f6abutton
.0cb3	48		               pha
.0cb4	a9 92		               lda  #146
.0cb6	8d c3 12	               sta  f6abutton+15
.0cb9	a9 0d		               lda  #flashcol
.0cbb	8d b4 12	               sta  f6abutton
.0cbe	a2 b4		               ldx  #<f6abutton
.0cc0	a0 12		               ldy  #>f6abutton
.0cc2	20 b9 14	               jsr  putscxy
.0cc5	20 d9 0f	               jsr  delay
.0cc8	a9 12		               lda  #18
.0cca	8d c3 12	               sta  f6abutton+15
.0ccd	68		               pla
.0cce	8d b4 12	               sta  f6abutton
.0cd1	a2 b4		               ldx  #<f6abutton
.0cd3	a0 12		               ldy  #>f6abutton
.0cd5	20 b9 14	               jsr  putscxy
.0cd8	68		               pla
.0cd9	aa		               tax
.0cda	68		               pla
.0cdb	28		               plp
.0cdc	20 21 15	               jsr  push
.0cdf	a2 f5		               ldx  #<blankmsg
.0ce1	a0 0f		               ldy  #>blankmsg
.0ce3	20 b9 14	               jsr  putscxy
.0ce6	a2 c0		               ldx  #<f6a_msg
.0ce8	a0 10		               ldy  #>f6a_msg
.0cea	20 b9 14	               jsr  putscxy
.0ced	20 60 15	               jsr  pop
.0cf0	4c 37 0d	               jmp  out
.0cf3			menub
.0cf3	08		               php
.0cf4	48		               pha
.0cf5	8a		               txa
.0cf6	48		               pha
.0cf7	ad 84 13	               lda  f6bbutton
.0cfa	48		               pha
.0cfb	a9 92		               lda  #146
.0cfd	8d 93 13	               sta  f6bbutton+15
.0d00	a9 0d		               lda  #flashcol
.0d02	8d 84 13	               sta  f6bbutton
.0d05	a2 84		               ldx  #<f6bbutton
.0d07	a0 13		               ldy  #>f6bbutton
.0d09	20 b9 14	               jsr  putscxy
.0d0c	20 d9 0f	               jsr  delay
.0d0f	a9 12		               lda  #18
.0d11	8d 93 13	               sta  f6bbutton+15
.0d14	68		               pla
.0d15	8d 84 13	               sta  f6bbutton
.0d18	a2 84		               ldx  #<f6bbutton
.0d1a	a0 13		               ldy  #>f6bbutton
.0d1c	20 b9 14	               jsr  putscxy
.0d1f	68		               pla
.0d20	aa		               tax
.0d21	68		               pla
.0d22	28		               plp
.0d23	20 21 15	               jsr  push
.0d26	a2 f5		               ldx  #<blankmsg
.0d28	a0 0f		               ldy  #>blankmsg
.0d2a	20 b9 14	               jsr  putscxy
.0d2d	a2 61		               ldx  #<f6b_msg
.0d2f	a0 11		               ldy  #>f6b_msg
.0d31	20 b9 14	               jsr  putscxy
.0d34	20 60 15	               jsr  pop
.0d37	68		out            pla
.0d38	60		               rts
.0d39			f7action
.0d39	48		               pha
.0d3a	ad c6 09	               lda  fkeyset
.0d3d	d0 47		               bne  menub
.0d3f	08		               php
.0d40	48		               pha
.0d41	8a		               txa
.0d42	48		               pha
.0d43	ad ce 12	               lda  f7abutton
.0d46	48		               pha
.0d47	a9 92		               lda  #146
.0d49	8d dd 12	               sta  f7abutton+15
.0d4c	a9 0d		               lda  #flashcol
.0d4e	8d ce 12	               sta  f7abutton
.0d51	a2 ce		               ldx  #<f7abutton
.0d53	a0 12		               ldy  #>f7abutton
.0d55	20 b9 14	               jsr  putscxy
.0d58	20 d9 0f	               jsr  delay
.0d5b	a9 12		               lda  #18
.0d5d	8d dd 12	               sta  f7abutton+15
.0d60	68		               pla
.0d61	8d ce 12	               sta  f7abutton
.0d64	a2 ce		               ldx  #<f7abutton
.0d66	a0 12		               ldy  #>f7abutton
.0d68	20 b9 14	               jsr  putscxy
.0d6b	68		               pla
.0d6c	aa		               tax
.0d6d	68		               pla
.0d6e	28		               plp
.0d6f	20 21 15	               jsr  push
.0d72	a2 f5		               ldx  #<blankmsg
.0d74	a0 0f		               ldy  #>blankmsg
.0d76	20 b9 14	               jsr  putscxy
.0d79	a2 da		               ldx  #<f7a_msg
.0d7b	a0 10		               ldy  #>f7a_msg
.0d7d	20 b9 14	               jsr  putscxy
.0d80	20 60 15	               jsr  pop
.0d83	4c ca 0d	               jmp  out
.0d86			menub
.0d86	08		               php
.0d87	48		               pha
.0d88	8a		               txa
.0d89	48		               pha
.0d8a	ad 9e 13	               lda  f7bbutton
.0d8d	48		               pha
.0d8e	a9 92		               lda  #146
.0d90	8d ad 13	               sta  f7bbutton+15
.0d93	a9 0d		               lda  #flashcol
.0d95	8d 9e 13	               sta  f7bbutton
.0d98	a2 9e		               ldx  #<f7bbutton
.0d9a	a0 13		               ldy  #>f7bbutton
.0d9c	20 b9 14	               jsr  putscxy
.0d9f	20 d9 0f	               jsr  delay
.0da2	a9 12		               lda  #18
.0da4	8d ad 13	               sta  f7bbutton+15
.0da7	68		               pla
.0da8	8d 9e 13	               sta  f7bbutton
.0dab	a2 9e		               ldx  #<f7bbutton
.0dad	a0 13		               ldy  #>f7bbutton
.0daf	20 b9 14	               jsr  putscxy
.0db2	68		               pla
.0db3	aa		               tax
.0db4	68		               pla
.0db5	28		               plp
.0db6	20 21 15	               jsr  push
.0db9	a2 f5		               ldx  #<blankmsg
.0dbb	a0 0f		               ldy  #>blankmsg
.0dbd	20 b9 14	               jsr  putscxy
.0dc0	a2 73		               ldx  #<f7b_msg
.0dc2	a0 11		               ldy  #>f7b_msg
.0dc4	20 b9 14	               jsr  putscxy
.0dc7	20 60 15	               jsr  pop
.0dca	68		out            pla
.0dcb	60		               rts
.0dcc			f8action
.0dcc	48		               pha
.0dcd	ad c6 09	               lda  fkeyset
.0dd0	d0 47		               bne  menub
.0dd2	08		               php
.0dd3	48		               pha
.0dd4	8a		               txa
.0dd5	48		               pha
.0dd6	ad e8 12	               lda  f8abutton
.0dd9	48		               pha
.0dda	a9 92		               lda  #146
.0ddc	8d f7 12	               sta  f8abutton+15
.0ddf	a9 0d		               lda  #flashcol
.0de1	8d e8 12	               sta  f8abutton
.0de4	a2 e8		               ldx  #<f8abutton
.0de6	a0 12		               ldy  #>f8abutton
.0de8	20 b9 14	               jsr  putscxy
.0deb	20 d9 0f	               jsr  delay
.0dee	a9 12		               lda  #18
.0df0	8d f7 12	               sta  f8abutton+15
.0df3	68		               pla
.0df4	8d e8 12	               sta  f8abutton
.0df7	a2 e8		               ldx  #<f8abutton
.0df9	a0 12		               ldy  #>f8abutton
.0dfb	20 b9 14	               jsr  putscxy
.0dfe	68		               pla
.0dff	aa		               tax
.0e00	68		               pla
.0e01	28		               plp
.0e02	20 21 15	               jsr  push
.0e05	a2 f5		               ldx  #<blankmsg
.0e07	a0 0f		               ldy  #>blankmsg
.0e09	20 b9 14	               jsr  putscxy
.0e0c	a2 e0		               ldx  #<menub_msg
.0e0e	a0 11		               ldy  #>menub_msg
.0e10	20 b9 14	               jsr  putscxy
.0e13	20 60 15	               jsr  pop
.0e16	4c 5d 0e	               jmp  swapit
.0e19			menub
.0e19	08		               php
.0e1a	48		               pha
.0e1b	8a		               txa
.0e1c	48		               pha
.0e1d	ad b8 13	               lda  f8bbutton
.0e20	48		               pha
.0e21	a9 92		               lda  #146
.0e23	8d c7 13	               sta  f8bbutton+15
.0e26	a9 0d		               lda  #flashcol
.0e28	8d b8 13	               sta  f8bbutton
.0e2b	a2 b8		               ldx  #<f8bbutton
.0e2d	a0 13		               ldy  #>f8bbutton
.0e2f	20 b9 14	               jsr  putscxy
.0e32	20 d9 0f	               jsr  delay
.0e35	a9 12		               lda  #18
.0e37	8d c7 13	               sta  f8bbutton+15
.0e3a	68		               pla
.0e3b	8d b8 13	               sta  f8bbutton
.0e3e	a2 b8		               ldx  #<f8bbutton
.0e40	a0 13		               ldy  #>f8bbutton
.0e42	20 b9 14	               jsr  putscxy
.0e45	68		               pla
.0e46	aa		               tax
.0e47	68		               pla
.0e48	28		               plp
.0e49	20 21 15	               jsr  push
.0e4c	a2 f5		               ldx  #<blankmsg
.0e4e	a0 0f		               ldy  #>blankmsg
.0e50	20 b9 14	               jsr  putscxy
.0e53	a2 c5		               ldx  #<menua_msg
.0e55	a0 11		               ldy  #>menua_msg
.0e57	20 b9 14	               jsr  putscxy
.0e5a	20 60 15	               jsr  pop
.0e5d	49 ff		swapit         eor  #$ff
.0e5f	8d c6 09	               sta  fkeyset
.0e62	20 ad 0e	               jsr  showfkeys
.0e65	68		               pla
.0e66	60		               rts
.0e67			staticscreen
.0e67	48		               pha
.0e68	a9 0c		               lda  #vgris1
.0e6a	8d 20 d0	               sta  $d020
.0e6d	68		               pla
.0e6e	48		               pha
.0e6f	a9 0b		               lda  #vgris
.0e71	8d 21 d0	               sta  $d021
.0e74	68		               pla
.0e75	48		               pha
.0e76	a9 8e		               lda  #b_uppercase
.0e78	8d 0d 14	               sta  characterset
.0e7b	20 d2 ff	               jsr  $ffd2
.0e7e	68		               pla
.0e7f	20 4d 0f	               jsr  showlines
.0e82	20 2e 0f	               jsr  showallchars
.0e85	20 95 0f	               jsr  showgrid
.0e88	20 ad 0e	               jsr  showfkeys
.0e8b	20 21 15	               jsr  push
.0e8e	a2 f5		               ldx  #<blankmsg
.0e90	a0 0f		               ldy  #>blankmsg
.0e92	20 b9 14	               jsr  putscxy
.0e95	a2 fb		               ldx  #<quit_msg
.0e97	a0 11		               ldy  #>quit_msg
.0e99	20 b9 14	               jsr  putscxy
.0e9c	20 60 15	               jsr  pop
.0e9f	20 21 15	               jsr  push
.0ea2	a2 00		               ldx  #0
.0ea4	a0 07		               ldy  #7
.0ea6	20 4a 14	               jsr  gotoxy
.0ea9	20 60 15	               jsr  pop
.0eac	60		               rts
.0ead			showfkeys
.0ead	20 21 15	               jsr  push
.0eb0	ad c6 09	               lda  fkeyset
.0eb3	c9 00		               cmp  #$0
.0eb5	d0 3b		               bne  secondks
.0eb7	a2 32		               ldx #<f1abutton
.0eb9	a0 12		               ldy #>f1abutton
.0ebb	20 b9 14	               jsr putscxy
.0ebe	a2 4c		               ldx #<f2abutton
.0ec0	a0 12		               ldy #>f2abutton
.0ec2	20 b9 14	               jsr putscxy
.0ec5	a2 66		               ldx #<f3abutton
.0ec7	a0 12		               ldy #>f3abutton
.0ec9	20 b9 14	               jsr putscxy
.0ecc	a2 80		               ldx #<f4abutton
.0ece	a0 12		               ldy #>f4abutton
.0ed0	20 b9 14	               jsr putscxy
.0ed3	a2 9a		               ldx #<f5abutton
.0ed5	a0 12		               ldy #>f5abutton
.0ed7	20 b9 14	               jsr putscxy
.0eda	a2 b4		               ldx #<f6abutton
.0edc	a0 12		               ldy #>f6abutton
.0ede	20 b9 14	               jsr putscxy
.0ee1	a2 ce		               ldx #<f7abutton
.0ee3	a0 12		               ldy #>f7abutton
.0ee5	20 b9 14	               jsr putscxy
.0ee8	a2 e8		               ldx #<f8abutton
.0eea	a0 12		               ldy #>f8abutton
.0eec	20 b9 14	               jsr putscxy
.0eef	4c 2a 0f	               jmp end
.0ef2			secondks
.0ef2	a2 02		               ldx #<f1bbutton
.0ef4	a0 13		               ldy #>f1bbutton
.0ef6	20 b9 14	               jsr putscxy
.0ef9	a2 1c		               ldx #<f2bbutton
.0efb	a0 13		               ldy #>f2bbutton
.0efd	20 b9 14	               jsr putscxy
.0f00	a2 36		               ldx #<f3bbutton
.0f02	a0 13		               ldy #>f3bbutton
.0f04	20 b9 14	               jsr putscxy
.0f07	a2 50		               ldx #<f4bbutton
.0f09	a0 13		               ldy #>f4bbutton
.0f0b	20 b9 14	               jsr putscxy
.0f0e	a2 6a		               ldx #<f5bbutton
.0f10	a0 13		               ldy #>f5bbutton
.0f12	20 b9 14	               jsr putscxy
.0f15	a2 84		               ldx #<f6bbutton
.0f17	a0 13		               ldy #>f6bbutton
.0f19	20 b9 14	               jsr putscxy
.0f1c	a2 9e		               ldx #<f7bbutton
.0f1e	a0 13		               ldy #>f7bbutton
.0f20	20 b9 14	               jsr putscxy
.0f23	a2 b8		               ldx #<f8bbutton
.0f25	a0 13		               ldy #>f8bbutton
.0f27	20 b9 14	               jsr putscxy
.0f2a	20 60 15	end            jsr  pop
.0f2d	60		               rts
.0f2e			showallchars
.0f2e	20 21 15	               jsr push
.0f31	20 21 15	               jsr  push
.0f34	a2 00		               ldx  #0
.0f36	a0 00		               ldy  #0
.0f38	20 4a 14	               jsr  gotoxy
.0f3b	20 60 15	               jsr  pop
.0f3e	a2 00		               ldx  #$00
.0f40	8a		nextc          txa
.0f41	9d 00 04	               sta  scrnnewram,x
.0f44	e8		               inx
.0f45	e0 80		               cpx  #$80
.0f47	d0 f7		               bne  nextc
.0f49	20 60 15	               jsr  pop
.0f4c	60		               rts
.0f4d			showlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.0f4d	20 21 15	               jsr  push
.0f50	a2 28		               ldx  #40
.0f52	a9 40		               lda  #64
.0f54	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.0f57	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.0f5a	ca		               dex
.0f5b	e0 10		hline          cpx  #vlinepos
.0f5d	10 03		               bpl  notyet
.0f5f	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.0f62	e0 00		notyet         cpx  #$00
.0f64	d0 ee		               bne  nextl
.0f66	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.0f68	85 fb		               sta  zpage1
.0f6a	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.0f6c	85 fc		               sta  zpage1+1
.0f6e	a0 00		               ldy  #0
.0f70	a9 72		               lda  #114
.0f72	91 fb		               sta  (zpage1),y
.0f74	20 c9 0f	               jsr  zp1add40
.0f77	a2 12		               ldx  #24-hline2
.0f79	a9 5d		               lda  #93
.0f7b	91 fb		another93      sta  (zpage1),y
.0f7d	20 c9 0f	               jsr  zp1add40
.0f80	ca		               dex
.0f81	d0 f8		               bne  another93
.0f83	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.0f85	85 fb		               sta  zpage1
.0f87	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.0f89	85 fc		               sta  zpage1+1
.0f8b	a0 00		               ldy  #0
.0f8d	a9 73		               lda  #115
.0f8f	91 fb		               sta  (zpage1),y
.0f91	20 60 15	               jsr  pop
.0f94	60		               rts
.0f95			showgrid
=8			gligne=8
=1			gcol=1
.0f95	20 21 15	               jsr  push
.0f98	20 d2 13	               jsr  screendis
.0f9b	a9 41		               lda  #<scrnnewram+(40*(gligne))+gcol
.0f9d	85 fb		               sta  zpage1
.0f9f	a9 05		               lda  #>scrnnewram+(40*(gligne))+gcol
.0fa1	85 fc		               sta  zpage1+1
.0fa3	a2 08		               ldx  #8
.0fa5	a9 65		nextbox        lda  #101
.0fa7	a0 09		               ldy  #9
.0fa9	91 fb		               sta  (zpage1),y
.0fab	88		               dey
.0fac	a9 4f		               lda  #79
.0fae	91 fb		nextcol        sta  (zpage1),y
.0fb0	88		               dey
.0fb1	d0 fb		               bne  nextcol
.0fb3	20 c9 0f	               jsr  zp1add40
.0fb6	ca		               dex
.0fb7	d0 ec		               bne  nextbox
.0fb9	a0 08		               ldy  #8
.0fbb	a9 77		               lda  #119
.0fbd	91 fb		nextlin        sta  (zpage1),y
.0fbf	88		               dey
.0fc0	d0 fb		               bne  nextlin
.0fc2	20 df 13	               jsr screenena
.0fc5	20 60 15	               jsr  pop
.0fc8	60		               rts
.0fc9			zp1add40
.0fc9	08		               php
.0fca	48		               pha
.0fcb	18		               clc
.0fcc	a5 fb		               lda  zpage1
.0fce	69 28		               adc  #40
.0fd0	90 02		               bcc  nocarry
.0fd2	e6 fc		               inc  zpage1+1
.0fd4	85 fb		nocarry        sta  zpage1
.0fd6	68		               pla
.0fd7	28		               plp
.0fd8	60		               rts
.0fd9			delay
.0fd9	20 21 15	               jsr  push
.0fdc	a9 00		               lda  #$0
.0fde	aa		               tax
.0fdf	a8		               tay
.0fe0	ca		xagain         dex
.0fe1	88		yagain         dey
.0fe2	c0 00		               cpy  #$00
.0fe4	d0 fb		               bne  yagain
.0fe6	e0 00		               cpx  #$00
.0fe8	d0 f6		               bne  xagain
.0fea	20 60 15	               jsr  pop
.0fed	60		               rts
.0fee			template
.0fee	20 21 15	               jsr  push
.0ff1	20 60 15	               jsr  pop
.0ff4	60		               rts

;******  Processing file: messages.asm

=$07			mesgcol = vjaune
>0ff5	07 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>0ff9	20 20 20 20	               .null     "                                      "
>0ffd	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>100d	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>101d	20 20 00
.1020			f1a_msg
>1020	07 00 05 12	edit_msg       .byte     mesgcol,0,5,18
>1024	20 45 4e 54	               .null     " entry mode: chr$(   )",146
>1028	52 59 20 4d 4f 44 45 3a 20 43 48 52 24 28 20 20
>1038	20 29 92 00
.103c			f2a_msg
>103c	07 00 05 92	save_msg       .byte     mesgcol,0,5,146
>1040	20 53 41 56	               .null     " save on cassette or disk? (c/d):"
>1044	45 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>1054	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.1062			f3a_msg
>1062	07 00 05	load_msg       .byte     mesgcol,0,5
>1065	20 4c 4f 41	               .null     " load from cassette or disk? (c/d):"
>1069	44 20 46 52 4f 4d 20 43 41 53 53 45 54 54 45 20
>1079	4f 52 20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.1089			f4a_msg
>1089	07 00 05	copy_msg       .byte     mesgcol,0,5
>108c	20 45 4e 54	               .null     " enter character to copy:"
>1090	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>10a0	43 4f 50 59 3a 00
.10a6			f5a_msg
>10a6	07 00 05	clear_msg      .byte     mesgcol,0,5
>10a9	20 43 4c 45	               .null     " clear char: chr$(   )"
>10ad	41 52 20 43 48 41 52 3a 20 43 48 52 24 28 20 20
>10bd	20 29 00
.10c0			f6a_msg
>10c0	07 00 05	fill_msg       .byte     mesgcol,0,5
>10c3	20 46 49 4c	               .null     " fill char:  chr$(   )"
>10c7	4c 20 43 48 41 52 3a 20 20 43 48 52 24 28 20 20
>10d7	20 29 00
.10da			f7a_msg
>10da	07 00 05	work_msg       .byte     mesgcol,0,5
>10dd	20 45 4e 41	               .null     " enable work space"
>10e1	42 4c 45 20 57 4f 52 4b 20 53 50 41 43 45 00
.10f0			f1b_msg
>10f0	07 00 05	rvrs_msg       .byte     mesgcol,0,5
>10f3	20 52 45 56	               .null     " reverse character:"
>10f7	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
.1107			f2b_msg
>1107	07 00 05	invr_msg       .byte     mesgcol,0,5
>110a	20 49 4e 56	               .null     " inverting character:"
>110e	45 52 54 49 4e 47 20 43 48 41 52 41 43 54 45 52
>111e	3a 00
.1120			f3b_msg
>1120	07 00 05	flip_msg       .byte     mesgcol,0,5
>1123	20 46 4c 49	               .null     " flipping character:"
>1127	50 50 49 4e 47 20 43 48 41 52 41 43 54 45 52 3a
>1137	00
.1138			f4b_msg
>1138	07 00 05	scrollr_msg    .byte     mesgcol,0,5
>113b	20 53 43 52	               .null     " scrolling right:"
>113f	4f 4c 4c 49 4e 47 20 52 49 47 48 54 3a 00
.114d			f5b_msg
>114d	07 00 05	scrolll_msg    .byte     mesgcol,0,5
>1150	20 53 43 52	               .null     " scrolling left:"
>1154	4f 4c 4c 49 4e 47 20 4c 45 46 54 3a 00
.1161			f6b_msg
>1161	07 00 05	scrollu_msg    .byte     mesgcol,0,5
>1164	20 53 43 52	               .null     " scrolling up:"
>1168	4f 4c 4c 49 4e 47 20 55 50 3a 00
.1173			f7b_msg
>1173	07 00 05	scrolld_msg    .byte     mesgcol,0,5
>1176	20 53 43 52	               .null     " scrolling down:"
>117a	4f 4c 4c 49 4e 47 20 44 4f 57 4e 3a 00
>1187	07 00 05	save_fname_msg .byte     mesgcol,0,5
>118a	20 53 41 56	               .null     " save: file name ------.chr"
>118e	45 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>119e	2d 2d 2d 2e 43 48 52 00
>11a6	07 00 05	load_fname_msg .byte     mesgcol,0,5
>11a9	20 4c 4f 41	               .null     " load: file name ------.chr"
>11ad	44 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>11bd	2d 2d 2d 2e 43 48 52 00
>11c5	07 00 05	menua_msg      .byte     mesgcol,0,5
>11c8	20 59 4f 55	               .null     " you are now in menu a."
>11cc	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>11dc	20 41 2e 00
>11e0	07 00 05	menub_msg      .byte     mesgcol,0,5
>11e3	20 59 4f 55	               .null     " you are now in menu b."
>11e7	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>11f7	20 42 2e 00
>11fb	0e 15 18 12	quit_msg       .byte     vblue1,21,24,18
>11ff	43 54 52 4c	               .text     "ctrl-x",146
>1203	2d 58 92
>1206	20 54 4f 20	               .null     " to quit."
>120a	51 55 49 54 2e 00
>1210	0a 06 0c 12	bye_msg        .byte     vrose,6,12,18
>1214	20 d4 48 41	               .null     " Thanks and have a good day ",146
>1218	4e 4b 53 20 41 4e 44 20 48 41 56 45 20 41 20 47
>1228	4f 4f 44 20 44 41 59 20 92 00
=18			fkeyleft=18
=8			f1top=8
=1			menu1col = 1
=3			menu2col = 3
>1232	01 12 08	f1abutton      .byte     menu1col,fkeyleft,f1top       ;133
>1235	45 44 49 54	               .text     "edit....... "
>1239	2e 2e 2e 2e 2e 2e 2e 20
>1241	12		               .byte     18             ; position 15
>1242	20 20 20 46	               .text     "   f1   "
>1246	31 20 20 20
>124a	92 00		               .byte     146,0
>124c	01 12 0a	f2abutton      .byte     menu1col,fkeyleft,f1top+2     ;137
>124f	53 41 56 45	               .text     "save....... "
>1253	2e 2e 2e 2e 2e 2e 2e 20
>125b	12		               .byte     18            ; position 15
>125c	20 20 20 46	               .text     "   f2   "
>1260	32 20 20 20
>1264	92 00		               .byte     146,0
>1266	01 12 0c	f3abutton      .byte     menu1col,fkeyleft,f1top+4     ;134
>1269	4c 4f 41 44	               .text     "load....... "
>126d	2e 2e 2e 2e 2e 2e 2e 20
>1275	12		               .byte     18             ; position 15
>1276	20 20 20 46	               .text     "   f3   "
>127a	33 20 20 20
>127e	92 00		               .byte     146,0
>1280	01 12 0e	f4abutton      .byte     menu1col,fkeyleft,f1top+6     ;138
>1283	43 4f 50 59	               .text     "copy....... "
>1287	2e 2e 2e 2e 2e 2e 2e 20
>128f	12		               .byte     18             ; position 15
>1290	20 20 20 46	               .text     "   f4   "
>1294	34 20 20 20
>1298	92 00		               .byte     146,0
>129a	01 12 10	f5abutton      .byte     menu1col,fkeyleft,f1top+8     ;135
>129d	43 4c 45 41	               .text     "clear...... "
>12a1	52 2e 2e 2e 2e 2e 2e 20
>12a9	12		               .byte     18             ; position 15
>12aa	20 20 20 46	               .text     "   f5   "
>12ae	35 20 20 20
>12b2	92 00		               .byte     146,0
>12b4	01 12 12	f6abutton      .byte     menu1col,fkeyleft,f1top+10    ;139
>12b7	46 49 4c 4c	               .text     "fill....... "
>12bb	2e 2e 2e 2e 2e 2e 2e 20
>12c3	12		               .byte     18             ; position 15
>12c4	20 20 20 46	               .text     "   f6   "
>12c8	36 20 20 20
>12cc	92 00		               .byte     146,0
>12ce	01 12 14	f7abutton      .byte     menu1col,fkeyleft,f1top+12    ;136
>12d1	57 4f 52 4b	               .text     "work....... "
>12d5	2e 2e 2e 2e 2e 2e 2e 20
>12dd	12		               .byte     18             ; position 15
>12de	20 20 20 46	               .text     "   f7   "
>12e2	37 20 20 20
>12e6	92 00		               .byte     146,0
>12e8	01 12 16	f8abutton      .byte     menu1col,fkeyleft,f1top+14    ;140
>12eb	46 55 4e 43	               .text     "function... "
>12ef	54 49 4f 4e 2e 2e 2e 20
>12f7	12		               .byte     18             ; position 15
>12f8	20 20 20 46	               .text     "   f8   "
>12fc	38 20 20 20
>1300	92 00		               .byte     146,0
>1302	03 12 08	f1bbutton      .byte     menu2col,fkeyleft,f1top
>1305	52 45 56 45	               .text     "reverse.... "
>1309	52 53 45 2e 2e 2e 2e 20
>1311	12		               .byte     18             ; position 15
>1312	20 20 20 46	               .text     "   f1   "
>1316	31 20 20 20
>131a	92 00		               .byte     146,0
>131c	03 12 0a	f2bbutton      .byte     menu2col,fkeyleft,f1top+2
>131f	49 4e 56 45	               .text     "invert..... "
>1323	52 54 2e 2e 2e 2e 2e 20
>132b	12		               .byte     18             ; position 15
>132c	20 20 20 46	               .text     "   f2   "
>1330	32 20 20 20
>1334	92 00		               .byte     146,0
>1336	03 12 0c	f3bbutton      .byte     menu2col,fkeyleft,f1top+4
>1339	46 4c 49 50	               .text     "flip....... "
>133d	2e 2e 2e 2e 2e 2e 2e 20
>1345	12		               .byte     18             ; position 15
>1346	20 20 20 46	               .text     "   f3   "
>134a	33 20 20 20
>134e	92 00		               .byte     146,0
>1350	03 12 0e	f4bbutton      .byte     menu2col,fkeyleft,f1top+6
>1353	53 43 52 4f	               .text     "scroll r... "
>1357	4c 4c 20 52 2e 2e 2e 20
>135f	12		               .byte     18             ; position 15
>1360	20 20 20 46	               .text     "   f4   "
>1364	34 20 20 20
>1368	92 00		               .byte     146,0
>136a	03 12 10	f5bbutton      .byte     menu2col,fkeyleft,f1top+8
>136d	53 43 52 4f	               .text     "scroll l... "
>1371	4c 4c 20 4c 2e 2e 2e 20
>1379	12		               .byte     18             ; position 15
>137a	20 20 20 46	               .text     "   f5   "
>137e	35 20 20 20
>1382	92 00		               .byte     146,0
>1384	03 12 12	f6bbutton      .byte     menu2col,fkeyleft,f1top+10
>1387	53 43 52 4f	               .text     "scroll u... "
>138b	4c 4c 20 55 2e 2e 2e 20
>1393	12		               .byte     18             ; position 15
>1394	20 20 20 46	               .text     "   f6   "
>1398	36 20 20 20
>139c	92 00		               .byte     146,0
>139e	03 12 14	f7bbutton      .byte     menu2col,fkeyleft,f1top+12
>13a1	53 43 52 4f	               .text     "scroll d... "
>13a5	4c 4c 20 44 2e 2e 2e 20
>13ad	12		               .byte     18             ; position 15
>13ae	20 20 20 46	               .text     "   f7   "
>13b2	37 20 20 20
>13b6	92 00		               .byte     146,0
>13b8	03 12 16	f8bbutton      .byte     menu2col,fkeyleft,f1top+14
>13bb	46 55 4e 43	               .text     "function... "
>13bf	54 49 4f 4e 2e 2e 2e 20
>13c7	12		               .byte     18             ; position 15
>13c8	20 20 20 46	               .text     "   f8   "
>13cc	38 20 20 20
>13d0	92 00		               .byte     146,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ;  97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c1			stal            =       $c1     ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.13d2			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.13d2			screendis
.13d2	08		               php
.13d3	48		               pha
.13d4	ad 11 d0	               lda  $d011
.13d7	29 ef		               and  #%11101111
.13d9	8d 11 d0	               sta  $d011
.13dc	68		               pla
.13dd	28		               plp
.13de	60		               rts
.13df			screenena
.13df	08		               php
.13e0	48		               pha
.13e1	ad 11 d0	               lda  $d011
.13e4	09 10		               ora  #%00010000
.13e6	8d 11 d0	               sta  $d011
.13e9	68		               pla
.13ea	28		               plp
.13eb	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.13ec			scrmaninit
.13ec	20 21 15	               jsr  push
.13ef	a9 06		               lda  #vbleu
.13f1	8d 21 d0	               sta  vicbackcol
.13f4	a9 05		               lda  #vvert
.13f6	8d 20 d0	               sta  vicbordcol
.13f9	a9 01		               lda  #vblanc
.13fb	8d 86 02	               sta  bascol
.13fe	ad 00 04	               lda  scrnram
.1401	29 fd		               and  #%11111101
.1403	8d 00 04	               sta  scrnram
.1406	20 0e 14	               jsr  cls
.1409	20 60 15	               jsr  pop
.140c	60		               rts
>140d	8e		characterset   .byte b_uppercase
.140e			cls
.140e	08		               php
.140f	48		               pha
.1410	a9 93		               lda  #$93
.1412	20 2a 14	               jsr  putch
.1415	a9 0e		               lda  #$0e
.1417	20 2a 14	               jsr  putch
.141a	68		               pla
.141b	28		               plp
.141c	60		               rts
.141d			putnch
.141d	08		               php
.141e	e0 00		               cpx  #$00
.1420	f0 06		               beq  out
.1422	20 d2 ff	again          jsr  $ffd2
.1425	ca		               dex
.1426	d0 fa		               bne  again
.1428	28		out            plp
.1429	60		               rts
.142a			putch
.142a	08		               php
.142b	20 d2 ff	               jsr  $ffd2
.142e	28		               plp
.142f	60		               rts
.1430			puts
.1430	20 21 15	               jsr  push
.1433	86 fb		               stx  zpage1
.1435	84 fc		               sty  zpage1+1
.1437	a0 00		               ldy  #0
.1439	b1 fb		next           lda  (zpage1),y
.143b	f0 09		               beq  exit
.143d	20 2a 14	               jsr  putch
.1440	20 28 16	               jsr  inczp1
.1443	4c 39 14	               jmp  next
.1446	20 60 15	exit           jsr  pop
.1449	60		               rts
.144a			gotoxy
.144a	08		               php
.144b	18		               clc
.144c	8a		               txa
.144d	48		               pha
.144e	98		               tya
.144f	aa		               tax
.1450	68		               pla
.1451	a8		               tay
.1452	20 f0 ff	               jsr  kplot
.1455	28		               plp
.1456	60		               rts
.1457			cursor
=$0286			bascol    =    $0286
.1457	08		               php
.1458	48		               pha
.1459	90 12		               bcc  restore
.145b	20 f0 ff	               jsr  kplot
.145e	8c 7f 14	               sty  cx
.1461	8e 80 14	               stx  cy
.1464	ad 86 02	               lda  bascol
.1467	8d 81 14	               sta  bcol
.146a	4c 7c 14	               jmp  out
.146d	ae 80 14	restore        ldx  cy
.1470	ac 7f 14	               ldy  cx
.1473	20 f0 ff	               jsr  kplot
.1476	ad 81 14	               lda  bcol
.1479	8d 86 02	               sta  bascol
.147c	68		out            pla
.147d	28		               plp
.147e	60		               rts
>147f	00		cx   .byte     $00
>1480	00		cy   .byte     $00
>1481	00		bcol .byte     $00
.1482			cursave
.1482	08		               php
.1483	38		               sec
.1484	20 57 14	               jsr  cursor
.1487	28		               plp
.1488	60		               rts
.1489			curput
.1489	08		               php
.148a	18		               clc
.148b	20 57 14	               jsr  cursor
.148e	28		               plp
.148f	60		               rts
.1490			putsxy
.1490	20 21 15	               jsr  push
.1493	86 fb		               stx  zpage1
.1495	84 fc		               sty  zpage1+1
.1497	a0 00		               ldy  #$00
.1499	b1 fb		               lda  (zpage1),y
.149b	aa		               tax
.149c	20 28 16	               jsr  inczp1
.149f	b1 fb		               lda  (zpage1),y
.14a1	a8		               tay
.14a2	20 4a 14	               jsr  gotoxy
.14a5	20 28 16	               jsr  inczp1
.14a8	a6 fb		               ldx  zpage1
.14aa	a4 fc		               ldy  zpage1+1
.14ac	20 30 14	               jsr  puts
.14af	20 60 15	               jsr  pop
.14b2	60		               rts
>14b3	00 00		straddr   .word     $00
>14b5	00		px        .byte     $00
>14b6	00		py        .byte     $00
>14b7	00 00		zp1       .word     $00
.14b9			putscxy
.14b9	20 21 15	               jsr  push
.14bc	84 fc		               sty  zpage1+1
.14be	86 fb		               stx  zpage1
.14c0	ad 86 02	               lda  bascol
.14c3	8d e3 14	               sta  bc
.14c6	a0 00		               ldy #$00
.14c8	b1 fb		               lda  (zpage1),y
.14ca	8d 86 02	               sta  bascol
.14cd	20 28 16	               jsr  inczp1
.14d0	a6 fb		               ldx  zpage1
.14d2	a4 fc		               ldy  zpage1+1
.14d4	20 90 14	               jsr  putsxy
.14d7	ad e3 14	               lda  bc
.14da	8d 86 02	               sta  bascol
.14dd	20 60 15	               jsr  pop
.14e0	60		               rts
>14e1	00 00		straddr  .word      $00
>14e3	00		bc       .byte      $00
>14e4	00 00		zp1      .word      $00
.14e6			putrahex
.14e6	08		               php
.14e7	48		               pha
.14e8	20 31 17	               jsr  a2hex
.14eb	a9 dd		               lda  #<a2hexstr
.14ed	a0 16		               ldy  #>a2hexstr
.14ef	20 30 14	               jsr  puts
.14f2	68		               pla
.14f3	28		               plp
.14f4	60		               rts
.14f5			kputrahexxy
.14f5			bputrahexxy
.14f5			putrahexxy
.14f5	08		               php
.14f6	20 31 17	               jsr  a2hex
.14f9	a9 da		               lda  #<a2hexpos
.14fb	a0 16		               ldy  #>a2hexpos
.14fd	20 90 14	               jsr  putsxy
.1500	68		               pla
.1501	28		               plp
.1502	60		               rts
.1503			putrahexcxy
.1503	08		               php
.1504	20 31 17	               jsr  a2hex
.1507	a9 da		               lda  #<a2hexpos
.1509	a0 16		               ldy  #>a2hexpos
.150b	20 b9 14	               jsr  putscxy
.150e	68		               pla
.150f	28		               plp
.1510	60		               rts
.1511			setinverse
.1511	48		               pha
.1512	a9 12		               lda  #$12
.1514	20 d2 ff	               jsr  $ffd2
.1517	68		               pla
.1518	60		               rts
.1519			clrinverse
.1519	48		               pha
.151a	a9 92		               lda  #$92
.151c	20 d2 ff	               jsr  $ffd2
.151f	68		               pla
.1520	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.1521			push
.1521	08		          php            ; stack : flg, pcl, pch
.1522	78		          sei
.1523	8d 5d 15	          sta  ra        ; save a
.1526	68		          pla            ; stack : pcl, pch
.1527	8d 5c 15	          sta  rp        ; save rp
.152a	68		          pla            ; stack : pch
.152b	8d 5e 15	          sta  pc        ; save pcl
.152e	68		          pla            ; stack : -
.152f	8d 5f 15	          sta  pc+1      ; save pch
.1532	a5 fb		          lda  zpage1    ; get zpage1 low byte
.1534	48		          pha            ; stack : zp1l
.1535	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.1537	48		          pha            ; stack : zp1h, zp1l
.1538	a5 fd		          lda  zpage2    ; get zpage2 low byte
.153a	48		          pha            ; stack : zp2l, zp1h, zp1l
.153b	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.153d	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.153e	ad 5c 15	          lda  rp        ; get rp
.1541	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1542	ad 5d 15	          lda  ra        ; get a
.1545	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1546	8a		          txa            ; get x
.1547	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1548	98		          tya            ; get y
.1549	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.154a	ad 5f 15	          lda  pc+1      ; get pch
.154d	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.154e	ad 5e 15	          lda  pc        ; get pcl
.1551	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1552	ad 5c 15	          lda  rp        ; get rp
.1555	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1556	ad 5d 15	          lda  ra        ; get a
.1559	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.155a	58		          cli
.155b	60		          rts
>155c	00		rp        .byte     0
>155d	00		ra        .byte     0
>155e	00 00		pc        .word     0
.1560			pull
.1560			pop
.1560	78		          sei
.1561	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1562	8d 95 15	          sta  pc        ; save pcl
.1565	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1566	8d 96 15	          sta  pc+1      ; save pch
.1569	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.156a	a8		          tay            ; set y
.156b	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.156c	aa		          tax            ; set x
.156d	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.156e	8d 94 15	          sta  ra        ; save a
.1571	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1572	8d 93 15	          sta  rp        ; save rp
.1575	68		          pla            ; stack : zp2l, zp1h, zp1l
.1576	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.1578	68		          pla            ; stack : zp1h, zp1l
.1579	85 fd		          sta  zpage2    ; get zpage2 High byte
.157b	68		          pla            ; stack : zp1l
.157c	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.157e	68		          pla            ; stack :
.157f	85 fb		          sta  zpage1    ; get zpage1 High byte
.1581	ad 96 15	          lda  pc+1      ; get pch
.1584	48		          pha            ; stack : pch
.1585	ad 95 15	          lda  pc
.1588	48		          pha            ; stack : pcl, pch
.1589	ad 93 15	          lda  rp        ; get rp
.158c	48		          pha            ; stack : rp, pcl, pch
.158d	ad 94 15	          lda  ra        ; set ra
.1590	58		          cli
.1591	28		          plp            ; stack : pcl, pch
.1592	60		          rts
>1593	00		rp        .byte     0
>1594	00		ra        .byte     0
>1595	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.1597			blkfill
.1597	20 21 15	bf0            jsr  push
.159a	20 58 16	               jsr  savezp1
.159d	84 fc		               sty  zpage1+1
.159f	a0 00		               ldy  #$00
.15a1	84 fb		               sty  zpage1
.15a3	91 fb		bf1            sta  (zpage1),y
.15a5	c8		               iny
.15a6	d0 fb		               bne  bf1
.15a8	20 67 16	               jsr  restzp1
.15ab	20 60 15	               jsr  pop
.15ae	60		               rts
.15af			memfill
.15af	20 21 15	               jsr  push
.15b2	20 97 15	mf1            jsr  blkfill
.15b5	c8		               iny
.15b6	ca		               dex
.15b7	d0 f9		               bne  mf1
.15b9	20 60 15	               jsr  pop
.15bc	60		               rts
.15bd			memmove
.15bd	20 21 15	               jsr  push
.15c0	ba		               tsx            ; On se crée un pointeur ...
.15c1	8a		               txa
.15c2	18		               clc
.15c3	69 0b		               adc  #11
.15c5	a8		               tay
.15c6	a2 06		               ldx  #$06
.15c8	b9 00 01	nextbyte       lda  $0100,y
.15cb	99 17 16	               sta  words,y
.15ce	c8		               iny
.15cf	ca		               dex
.15d0	d0 f6		               bne  nextbyte
.15d2	ad 17 16	               lda  s
.15d5	8d ee 15	               sta  source+1
.15d8	ad 18 16	               lda  s+1
.15db	8d ef 15	               sta  source+2
.15de	ad 19 16	               lda  d
.15e1	8d eb 15	               sta  destin+1
.15e4	ad 1a 16	               lda  d+1
.15e7	8d ec 15	               sta  destin+2
.15ea	ad ff ff	destin         lda  $ffff
.15ed	8d ff ff	source         sta  $ffff
.15f0	ee eb 15	               inc  destin+1
.15f3	d0 03		               bne  src
.15f5	ee ec 15	               inc  destin+2
.15f8	ee ee 15	src            inc  source+1
.15fb	d0 03		               bne  cnt
.15fd	ee ef 15	               inc  source+2
.1600	ad 1b 16	cnt            lda  compte
.1603	d0 08		               bne  decit
.1605	ad 1c 16	               lda  compte+1
.1608	f0 09		               beq  fini
.160a	ce 1c 16	               dec  compte+1
.160d	ce 1b 16	decit          dec  compte
.1610	4c ea 15	               jmp  destin
.1613	20 60 15	fini           jsr  pop
.1616	60		               rts
.1617			words
>1617	00 00		s         .word     $0000
>1619	00 00		d         .word     $0000
>161b	00 00		compte    .word     $0000
.161d			decword
.161d	20 21 15	               jsr  push
.1620	86 fd		               stx  zpage2
.1622	84 fe		               sty  zpage2+1
.1624	20 60 15	               jsr  pop
.1627	60		               rts
.1628			inczp1
.1628	08		               php
.1629	48		               pha
.162a	e6 fb		               inc  zpage1
.162c	a5 fb		               lda  zpage1
.162e	d0 02		               bne  nopage
.1630	e6 fc		               inc  zpage1+1
.1632	68		nopage         pla
.1633	28		               plp
.1634	60		               rts
.1635			deczp1
.1635	08		                php
.1636	48		                pha
.1637	c6 fb		                dec  zpage1
.1639	d0 02		                bne  nopage
.163b	c6 fc		                dec  zpage1+1
.163d	68		nopage          pla
.163e	28		                plp
.163f	60		                rts
.1640			inczp2
.1640	08		               php
.1641	48		               pha
.1642	e6 fd		               inc  zpage2
.1644	a5 fd		               lda  zpage2
.1646	d0 02		               bne  nopage
.1648	e6 fe		               inc  zpage2+1
.164a	68		nopage         pla
.164b	28		               plp
.164c	60		               rts
.164d			deczp2
.164d	08		               php
.164e	48		               pha
.164f	a5 fd		               lda  zpage2
.1651	d0 02		               bne  nopage
.1653	c6 fe		               dec  zpage2+1
.1655	68		nopage         pla
.1656	28		               plp
.1657	60		               rts
.1658			savezp1
.1658	08		               php
.1659	48		               pha
.165a	a5 fb		               lda  zpage1
.165c	8d d4 16	               sta  zp1
.165f	a5 fc		               lda  zpage1+1
.1661	8d d5 16	               sta  zp1+1
.1664	68		               pla
.1665	28		               plp
.1666	60		               rts
.1667			restzp1
.1667	08		               php
.1668	48		               pha
.1669	ad d4 16	               lda zp1
.166c	85 fb		               sta zpage1
.166e	ad d5 16	               lda zp1+1
.1671	85 fc		               sta zpage1+1
.1673	68		               pla
.1674	28		               plp
.1675	60		               rts
.1676			savezp2
.1676	08		         php
.1677	48		         pha
.1678	a5 fd		         lda zpage2
.167a	8d d6 16	         sta zp2
.167d	a5 fe		         lda zpage2+1
.167f	8d d7 16	         sta zp2+1
.1682	68		         pla
.1683	28		         plp
.1684	60		         rts
.1685			restzp2
.1685	08		                php
.1686	48		                pha
.1687	ad d6 16	                lda  zp2
.168a	85 fd		                sta  zpage2
.168c	ad d7 16	                lda  zp2+1
.168f	85 fe		                sta  zpage2+1
.1691	68		                pla
.1692	28		                plp
.1693	60		                rts
.1694			xy2addr
.1694	08		                php
.1695	48		                pha
.1696	8a		                txa
.1697	48		                pha
.1698	98		                tya
.1699	48		                pha
.169a	ad cf 16	                lda     addr1+1
.169d	8d d1 16	                sta     addr2+1
.16a0	ad ce 16	                lda     addr1
.16a3	8d d0 16	                sta     addr2
.16a6	c0 00		                cpy     #$00
.16a8	f0 0f		                beq     addx
.16aa	18		moreline        clc
.16ab	6d cd 16	                adc     ymult
.16ae	90 03		                bcc     norepy
.16b0	ee d1 16	                inc     addr2+1
.16b3	8d d0 16	norepy          sta     addr2
.16b6	88		                dey
.16b7	d0 f1		                bne     moreline
.16b9	8a		addx            txa
.16ba	18		                clc
.16bb	6d d0 16	                adc     addr2
.16be	90 03		                bcc     thatsit
.16c0	ee d1 16	                inc     addr2+1
.16c3	8d d0 16	thatsit         sta     addr2
.16c6	68		                pla
.16c7	a8		                tay
.16c8	68		                pla
.16c9	aa		                tax
.16ca	68		                pla
.16cb	28		                plp
.16cc	60		                rts
>16cd	28		ymult          .byte     40
>16ce	00 00		addr1          .word     $0000
>16d0	00 00		addr2          .word     $0000
>16d2	00 00		bytecnt        .word     $0000
>16d4	00 00		zp1        .word   $0000
>16d6	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>16d8	01		a2hexcol       .byte     1              ; pour aputscxy
>16d9	00		a2hexbkcol     .byte     %00000000
.16da			a2hexpos
>16da	00		a2hexpx        .byte     0              ; pour aputsxy
>16db	00		a2hexpy        .byte     0
>16dc	24		a2hexprefix    .byte     "$"            ; pour aputs
>16dd	00 00		a2hexstr       .word     $00
>16df	00 00		               .word     $00
>16e1	00		               .byte     0              ; 0 end string
.16e2			putahexfmtxy
.16e2	20 21 15	               jsr  push
.16e5	20 31 17	               jsr  a2hex
.16e8	ae da 16	               ldx  a2hexpx
.16eb	ac db 16	               ldy  a2hexpy
.16ee	20 4a 14	               jsr  gotoxy
.16f1	a2 dc		               ldx  #<a2hexprefix
.16f3	a0 16		               ldy  #>a2hexprefix
.16f5	20 30 14	               jsr  puts
.16f8	20 60 15	               jsr  pop
.16fb	60		               rts
.16fc			putahexfmt
.16fc	20 21 15	               jsr  push
.16ff	20 31 17	               jsr  a2hex
.1702	a2 dc		               ldx  #<a2hexprefix
.1704	a0 16		               ldy  #>a2hexprefix
.1706	20 30 14	               jsr  puts
.1709	20 60 15	               jsr  pop
.170c	60		               rts
.170d			putahex
.170d	20 21 15	               jsr  push
.1710	20 31 17	               jsr  a2hex
.1713	a2 dd		               ldx  #<a2hexstr
.1715	a0 16		               ldy  #>a2hexstr
.1717	20 30 14	               jsr  puts
.171a	20 60 15	               jsr  pop
.171d	60		               rts
.171e			nib2hex
.171e	08		               php
.171f	29 0f		               and  #$0f
.1721	f8		               sed
.1722	18		               clc
.1723	69 90		               adc  #$90
.1725	69 40		               adc  #$40
.1727	d8		               cld
.1728	28		               plp
.1729	60		               rts
.172a			lsra4bits
.172a	08		               php
.172b	4a		               lsr
.172c	4a		               lsr
.172d	4a		               lsr
.172e	4a		               lsr
.172f	28		               plp
.1730	60		               rts
.1731			a2hex
.1731	08		               php
.1732	48		               pha
.1733	48		               pha
.1734	20 2a 17	               jsr  lsra4bits
.1737	20 1e 17	               jsr  nib2hex
.173a	8d dd 16	               sta  a2hexstr
.173d	68		               pla
.173e	20 1e 17	               jsr  nib2hex
.1741	8d de 16	               sta  a2hexstr+1
.1744	a9 00		               lda  #$00                ; set end of string
.1746	8d df 16	               sta  a2hexstr+2
.1749	68		               pla
.174a	28		               plp
.174b	60		               rts
.174c			xy2hex
.174c	20 21 15	               jsr  push
.174f	20 31 17	               jsr  a2hex
.1752	8a		               txa
.1753	48		               pha
.1754	20 2a 17	               jsr  lsra4bits
.1757	20 1e 17	               jsr  nib2hex
.175a	8d dd 16	               sta  a2hexstr
.175d	68		               pla
.175e	20 1e 17	               jsr  nib2hex
.1761	8d de 16	               sta  a2hexstr+1
.1764	98		               tya
.1765	48		               pha
.1766	20 2a 17	               jsr  lsra4bits
.1769	20 1e 17	               jsr  nib2hex
.176c	8d df 16	               sta  a2hexstr+2
.176f	68		               pla
.1770	20 1e 17	               jsr  nib2hex
.1773	8d e0 16	               sta  a2hexstr+3
.1776	a9 00		               lda  #$00                ; 0 ended string
.1778	8d e1 16	               sta  a2hexstr+4
.177b	20 60 15	               jsr  pop
.177e			atobin
.177e	20 21 15	               jsr     push
.1781	a2 08		               ldx     #8
.1783	a0 00		               ldy     #0
.1785	2a		nextbit        rol
.1786	48		               pha
.1787	69 00		               adc     #$00
.1789	29 01		               and     #$01
.178b	20 1e 17	               jsr     nib2hex
.178e	99 9f 17	               sta     abin,y
.1791	68		               pla
.1792	c8		               iny
.1793	ca		               dex
.1794	d0 ef		               bne     nextbit
.1796	a9 00		               lda     #0
.1798	99 9f 17	               sta     abin,y
.179b	20 60 15	               jsr     pull
.179e	60		               rts
>179f	30 30 30 30	abin           .null   "00000000"
>17a3	30 30 30 30 00
.17a8			putabin
.17a8	20 7e 17	               jsr     atobin
.17ab	20 21 15	               jsr     push
.17ae	a2 9f		               ldx     #<abin
.17b0	a0 17		               ldy     #>abin
.17b2	20 30 14	               jsr     puts
.17b5	20 60 15	               jsr     pop
.17b8	60		               rts
.17b9			putabinfmt
.17b9	08		               php
.17ba	48		               pha
.17bb	a9 25		               lda     #"%"
.17bd	20 2a 14	               jsr     putch
.17c0	68		               pla
.17c1	20 a8 17	               jsr     putabin
.17c4	28		               plp
.17c5	60		               rts
.17c6			putabinxy
.17c6	20 4a 14	               jsr     gotoxy
.17c9	20 a8 17	               jsr     putabin
.17cc	60		               rts
.17cd			putabinfmtxy
.17cd	20 4a 14	               jsr     gotoxy
.17d0	20 b9 17	               jsr     putabinfmt
.17d3	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a     =    $41
=$42			key_b     =    $42
=$43			key_c     =    $43
=$44			key_d     =    $44
=$45			key_e     =    $45
=$46			key_f     =    $46
=$47			key_g     =    $47
=$48			key_h     =    $48
=$49			key_i     =    $49
=$4a			key_j     =    $4a
=$4b			key_k     =    $4b
=$4c			key_l     =    $4c
=$4d			key_m     =    $4d
=$4e			key_n     =    $4e
=$4f			key_o     =    $4f
=$50			key_p     =    $50
=$51			key_q     =    $51
=$52			key_r     =    $52
=$53			key_s     =    $53
=$54			key_t     =    $54
=$55			key_u     =    $55
=$56			key_v     =    $56
=$57			key_w     =    $57
=$58			key_x     =    $58
=$59			key_y     =    $59
=$5a			key_z     =    $5a
=$c1			shift_a   =    $c1
=$c2			shift_b   =    $c2
=$c3			shift_c   =    $c3
=$c4			shift_d   =    $c4
=$c5			shift_e   =    $c5
=$c6			shift_f   =    $c6
=$c7			shift_g   =    $c7
=$c8			shift_h   =    $c8
=$c9			shift_i   =    $c9
=$ca			shift_j   =    $ca
=$cb			shift_k   =    $cb
=$cc			shift_l   =    $cc
=$cd			shift_m   =    $cd
=$ce			shift_n   =    $ce
=$cf			shift_o   =    $cf
=$d0			shift_p   =    $d0
=$d1			shift_q   =    $d1
=$d2			shift_r   =    $d2
=$d3			shift_s   =    $d3
=$d4			shift_t   =    $d4
=$d5			shift_u   =    $d5
=$d6			shift_v   =    $d6
=$d7			shift_w   =    $d7
=$d8			shift_x   =    $d8
=$d9			shift_y   =    $d9
=$da			shift_z   =    $da
=$01			ctrl_a    =    $01
=$02			ctrl_b    =    $02
=$03			ctrl_c    =    $03
=$04			ctrl_d    =    $04
=$05			ctrl_e    =    $05
=$06			ctrl_f    =    $06
=$07			ctrl_g    =    $07
=$08			ctrl_h    =    $08
=$09			ctrl_i    =    $09
=$0a			ctrl_j    =    $0a
=$0b			ctrl_k    =    $0b
=$0c			ctrl_l    =    $0c
=$0d			ctrl_m    =    $0d
=$0e			ctrl_n    =    $0e
=$0f			ctrl_o    =    $0f
=$10			ctrl_p    =    $10
=$11			ctrl_q    =    $11
=$12			ctrl_r    =    $12
=$13			ctrl_s    =    $13
=$14			ctrl_t    =    $14
=$15			ctrl_u    =    $15
=$16			ctrl_v    =    $16
=$17			ctrl_w    =    $17
=$18			ctrl_x    =    $18
=$19			ctrl_y    =    $19
=$1a			ctrl_z    =    $1a
=$b0			comd_a    =    $b0
=$bf			comd_b    =    $bf
=$bc			comd_c    =    $bc
=$ac			comd_d    =    $ac
=$b1			comd_e    =    $b1
=$bb			comd_f    =    $bb
=$a5			comd_g    =    $a5
=$b4			comd_h    =    $b4
=$a2			comd_i    =    $a2
=$b5			comd_j    =    $b5
=$a1			comd_k    =    $a1
=$b6			comd_l    =    $b6
=$a7			comd_m    =    $a7
=$aa			comd_n    =    $aa
=$b9			comd_o    =    $b9
=$af			comd_p    =    $af
=$ab			comd_q    =    $ab
=$b2			comd_r    =    $b2
=$ae			comd_s    =    $ae
=$a3			comd_t    =    $a3
=$b8			comd_u    =    $b8
=$be			comd_v    =    $be
=$b3			comd_w    =    $b3
=$bd			comd_x    =    $bd
=$b7			comd_y    =    $b7
=$ad			comd_z    =    $ad
>17d4	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>17d8	00 00 00 00 00 00 00 00 00 0d 00 00
>17e4	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>17e8	00 00 00 00 00 00 00 00 00 00 00 00
>17f4	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>17f8	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1804	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1808	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1814	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1818	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>1824	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1828	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>1834	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1838	00 00 00 00 00 00 00 00 00 00 00 00
>1844	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1848	00 00 00 00 00 00 00 00 00 00 00 00
>1854	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1858	00 00 00 00 00 00 00 00 00 00 00 00
>1864	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1868	00 00 00 00 00 00 00 00 00 00 00 00
>1874	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>1878	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1884	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1888	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1894	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1898	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>18a4	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>18a8	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>18b4	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>18b8	00 00 00 00 00 00 00 00 00 00 00 00
>18c4	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>18c8	00 00 00 00 00 00 00 00 00 00 00 00
.18d4			waitstop
.18d4	20 21 15	               jsr  push
.18d7	20 ed f6	wait           jsr  k_stop
.18da	d0 fb		               bne  wait
.18dc	20 60 15	               jsr  pop
.18df	60		               rts
.18e0			anykey
.18e0	08		               php
.18e1	48		               pha
.18e2	a5 cb		nokey          lda 203
.18e4	c9 40		               cmp #64
.18e6	f0 fa		               beq nokey
.18e8	20 ee 18	               jsr releasekey
.18eb	68		               pla
.18ec	28		               plp
.18ed	60		               rts
.18ee			releasekey
.18ee	08		               php
.18ef	48		               pha
.18f0	a5 cb		keypressed     lda 203
.18f2	c9 40		               cmp #64
.18f4	d0 fa		               bne keypressed
.18f6	68		               pla
.18f7	28		               plp
.18f8	60		               rts
.18f9			getkey
.18f9	20 e4 ff	again          jsr  getin
.18fc	c9 00		               cmp  #0
.18fe	f0 f9		               beq  again
.1900	60		               rts
.1901			waitkey
.1901	20 21 15	               jsr  push
.1904	8d 52 19	               sta  thekey
.1907	20 e4 ff	nope           jsr  getin
.190a	20 d2 ff	               jsr  chrout
.190d	cd 52 19	               cmp  thekey
.1910	d0 f5		               bne  nope
.1912	20 d2 ff	               jsr  chrout
.1915	20 60 15	               jsr  pop
.1918	60		               rts
.1919			waitspace
.1919	20 21 15	               jsr  push
.191c	a9 7f		wait           lda  #$7f  ;%01111111
.191e	8d 00 dc	               sta  $dc00
.1921	ad 01 dc	               lda  $dc01
.1924	29 10		               and  #$10  ;mask %00010000
.1926	d0 f4		               bne  wait
.1928	20 60 15	               jsr  pop
.192b			waitsstop
.192b	20 21 15	               jsr  push
.192e	20 ed f6	wait           jsr  k_stop  ;%01111111
.1931	d0 fb		               bne  wait
.1933	20 60 15	               jsr  pop
.1936			waitreturn
.1936	20 21 15	               jsr  push
.1939	ad 53 19	               lda  thecount
.193c	8d 00 04	               sta  scrnram
.193f	a9 02		               lda  #$02
.1941	8d 00 d8	               sta  colorram
.1944	20 e4 ff	nope           jsr  getin
.1947	c9 0d		nohex          cmp  #$0d
.1949	d0 f9		               bne  nope
.194b	ee 53 19	               inc  thecount
.194e	20 60 15	               jsr  pop
.1951	60		               rts
>1952	00		thekey         .byte   0
>1953	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Fri Nov 17 01:10:23 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm

="20231116-100400"	version  = "20231116-100400"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

=18			fkeyleft=18
=10			f1top=10
=$0400			scrnnewram     =    $0400
=12			charsdef       =    12
=9			grid_top       =    9
=1			grid_left      =    1
=16			grid_bot       =    grid_top + 7
=8			grid_right     =    grid_left + 7
=$0b			bordure        =    vgris
=$00			fond           =    vnoir
=$03			mesgcol        =    vcyan
=$03			menu1col1      =    vcyan
=$0e			menu1col2      =    vbleu1
=$0d			menu2col1      =    vvert1
=$05			menu2col2      =    vvert
=$01			flashcol       =    vblanc
=$07			whoamicol      =    vjaune
=$01			charcolor      =    vblanc
=$0f			charscolor     =    vgris2
.080d			main
.080d	20 7a 20	               jsr  push
.0810	20 4c 1f	               jsr  scrmaninit
.0813	08		               php
.0814	48		               pha
.0815	a9 08		               lda  #$08
.0817	20 d2 ff	               jsr  $ffd2
.081a	68		               pla
.081b	28		               plp
.081c	20 6e 09	               jsr  drawcredits
.081f			wait
.081f	20 15 0f	               jsr  copycharset
.0822	20 32 1f	               jsr  screendis
.0825	20 6c 1f	               jsr  cls
.0828	20 ff 0e	               jsr  setscreenptr
.082b	20 cd 09	               jsr  setdefaultchar
.082e	20 76 0f	               jsr  staticscreen
.0831	20 42 0e	               jsr  drawbitmap
.0834	a9 00		               lda  #$00
.0836	8d c3 08	               sta  fkeyset
.0839	20 b2 0f	               jsr  drawfkeys
.083c	a9 00		               lda  #$00
.083e	20 3f 1f	               jsr  screenena
.0841	20 de 0b	               jsr  keyaction
.0844	20 6c 1f	               jsr  cls
.0847	20 6e 09	               jsr  drawcredits
.084a	20 6c 1f	               jsr  cls
.084d	20 b9 20	               jsr  pop
.0850	60		               rts
.0851			savefile
.0851	20 7a 20	               jsr  push
.0854	20 b9 20	               jsr  pop
.0857	60		               rts
.0858			getfname
.0858	20 7a 20	               jsr  push
.085b	20 7a 20	               jsr  push
.085e	a2 c8		               ldx  #<blankmsg
.0860	a0 18		               ldy  #>blankmsg
.0862	20 12 20	               jsr  putscxy
.0865	a2 35		               ldx  #<fname_msg
.0867	a0 1b		               ldy  #>fname_msg
.0869	20 12 20	               jsr  putscxy
.086c	20 b9 20	               jsr  pop
.086f	a2 00		               ldx  #$00
.0871	8e a5 08	               stx  count
.0874	20 d7 08	getanother     jsr  getalphanum
.0877	20 83 1f	goodone        jsr  putch
.087a	ae a5 08	               ldx  count
.087d	9d ad 08	               sta  name,x
.0880	ee a5 08	               inc  count
.0883	ae a5 08	               ldx  count
.0886	e0 06		               cpx  #$06
.0888	f0 03		               beq  finish
.088a	4c 74 08	               jmp  getanother
.088d			finish
.088d	20 7a 20	               jsr  push
.0890	a2 c8		               ldx  #<blankmsg
.0892	a0 18		               ldy  #>blankmsg
.0894	20 12 20	               jsr  putscxy
.0897	a2 a6		               ldx  #<pfname
.0899	a0 08		               ldy  #>pfname
.089b	20 12 20	               jsr  putscxy
.089e	20 b9 20	               jsr  pop
.08a1	20 b9 20	               jsr  pop
.08a4	60		               rts
>08a5	00		count          .byte     0
>08a6	05 1b 03 12	pfname         .byte     vvert,27,3,18
>08aa	40 30 3a	fname          .text     "@0:"
>08ad	3f 3f 3f 3f	name           .text     "??????"
>08b1	3f 3f
>08b3	2e 43 48 52	ext            .null     ".chr"
>08b7	00
>08b8	92 00		device         .byte     146,0
>08ba	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>08be	08 04 02 01
>08c2	00		editmode       .byte     0
>08c3	00		fkeyset        .byte     0
>08c4	00		currentchar    .byte     0
>08c5	00		currentkey     .byte     0
>08c6	00		previouskey    .byte     0
>08c7	00		bitmapoffset   .byte     0
>08c8	00 00		mapaddr        .word     0
>08ca	00 00		byteaddr       .word     0
>08cc	00 00		gridaddr       .word     0
>08ce	09		cursln         .byte     grid_top
>08cf	01		curscl         .byte     grid_left

;******  Processing file: routines.asm

.08d0			template
.08d0	20 7a 20	               jsr  push
.08d3	20 b9 20	               jsr  pop
.08d6	60		               rts
.08d7			getalphanum
.08d7	20 7a 20	               jsr  push
.08da	20 9a 24	getanother     jsr  getkey
.08dd	c9 30		               cmp  #$30      ; 0
.08df	30 f9		               bmi  getanother
.08e1	c9 3a		               cmp  #$3a      ; 9+1
.08e3	30 0b		               bmi  goodone
.08e5	c9 41		isitletter     cmp  #$41      ; A
.08e7	30 f1		               bmi  getanother
.08e9	c9 5b		               cmp  #$5b      ; Z+1
.08eb	30 03		               bmi  goodone
.08ed	4c da 08	               jmp  getanother
.08f0	8d fa 08	goodone        sta  tempbyte
.08f3	20 b9 20	               jsr  pop
.08f6	ad fa 08	               lda  tempbyte
.08f9	60		               rts
>08fa	00		tempbyte       .byte     0
.08fb			copychar
.08fb	20 7a 20	               jsr  push
.08fe	20 37 09	               jsr  getvalidkey
.0901	ad 74 0f	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0904	85 fb		               sta  zpage1
.0906	ad 75 0f	               lda  bitmapaddr+1
.0909	85 fc		               sta  zpage1+1
.090b	ae 6d 09	               ldx  copykey
.090e	bd 75 23	               lda  asciitorom,x
.0911	aa		               tax
.0912	e0 00		               cpx  #$00
.0914	f0 08		               beq  no_offset      ; sommes nous déja à 0
.0916	a9 08		addagain       lda  #$08
.0918	20 0e 11	               jsr  zp1addnum      ; on augmente de 8 byte ...
.091b	ca		               dex                 ; pour chaque caracteres
.091c	d0 f8		               bne  addagain
.091e	ad c8 08	no_offset      lda  mapaddr        ; le caractere actuel
.0921	85 fd		               sta  zpage2         ;
.0923	ad c9 08	               lda  mapaddr+1      ;
.0926	85 fe		               sta  zpage2+1       ;
.0928	a0 00		               ldy  #$00
.092a	b1 fb		nextbyte       lda  (zpage1),y
.092c	91 fd		               sta  (zpage2),y
.092e	c8		               iny
.092f	c0 08		               cpy  #$08
.0931	d0 f7		               bne  nextbyte
.0933	20 b9 20	out            jsr  pop
.0936	60		               rts
.0937			getvalidkey
.0937	20 7a 20	               jsr  push
.093a	20 7a 20	               jsr  push
.093d	a2 c8		               ldx  #<blankmsg
.093f	a0 18		               ldy  #>blankmsg
.0941	20 12 20	               jsr  putscxy
.0944	a2 0c		               ldx  #<copychar_msg
.0946	a0 1b		               ldy  #>copychar_msg
.0948	20 12 20	               jsr  putscxy
.094b	20 b9 20	               jsr  pop
.094e	20 9a 24	getgoodkey     jsr  getkey
.0951	8d 6d 09	               sta  copykey
.0954	aa		               tax
.0955	bc 75 23	               ldy  asciitorom,x
.0958	c4 00		               cpy  $00
.095a	d0 0a		               bne  goodone
.095c	ae 6d 09	               ldx  copykey
.095f	e0 40		               cpx  #$40
.0961	f0 03		               beq  goodone
.0963	4c 4e 09	               jmp  getgoodkey
.0966	20 83 1f	goodone        jsr  putch
.0969	20 b9 20	               jsr  pop
.096c	60		               rts
>096d	00		copykey        .byte 0
.096e			drawcredits
.096e	20 7a 20	               jsr  push
.0971	20 6c 1f	               jsr  cls
.0974	a2 94		               ldx #<whoami0
.0976	a0 1b		               ldy #>whoami0
.0978	20 12 20	               jsr putscxy
.097b	a2 b9		               ldx #<whoami1
.097d	a0 1b		               ldy #>whoami1
.097f	20 12 20	               jsr putscxy
.0982	a2 e0		               ldx #<whoami2
.0984	a0 1b		               ldy #>whoami2
.0986	20 12 20	               jsr putscxy
.0989	a2 05		               ldx #<whoami3
.098b	a0 1c		               ldy #>whoami3
.098d	20 12 20	               jsr putscxy
.0990	a2 2a		               ldx #<whoami4
.0992	a0 1c		               ldy #>whoami4
.0994	20 12 20	               jsr putscxy
.0997	a2 4f		               ldx #<whoami5
.0999	a0 1c		               ldy #>whoami5
.099b	20 12 20	               jsr putscxy
.099e	a2 74		               ldx #<whoami6
.09a0	a0 1c		               ldy #>whoami6
.09a2	20 12 20	               jsr putscxy
.09a5	a2 99		               ldx #<whoami7
.09a7	a0 1c		               ldy #>whoami7
.09a9	20 12 20	               jsr putscxy
.09ac	a2 be		               ldx #<whoami8
.09ae	a0 1c		               ldy #>whoami8
.09b0	20 12 20	               jsr putscxy
.09b3	a2 e3		               ldx #<whoami9
.09b5	a0 1c		               ldy #>whoami9
.09b7	20 12 20	               jsr putscxy
.09ba	20 2c 11	               jsr  delay
.09bd	20 2c 11	               jsr  delay
.09c0	20 2c 11	               jsr  delay
.09c3	20 2c 11	               jsr  delay
.09c6	20 2c 11	               jsr  delay
.09c9	20 b9 20	               jsr  pop
.09cc	60		               rts
.09cd			setdefaultchar
.09cd	20 7a 20	               jsr  push
.09d0	a9 40		               lda  #$40
.09d2	8d c5 08	               sta  currentkey
.09d5	aa		               tax
.09d6	bc 75 23	               ldy  asciitorom,x
.09d9	8c c7 08	               sty  bitmapoffset
.09dc	20 97 0a	               jsr  drawkeyval
.09df	20 42 0e	               jsr  drawbitmap
.09e2	20 7a 20	               jsr  push
.09e5	a2 0d		               ldx  #13
.09e7	a0 0c		               ldy  #12
.09e9	20 a3 1f	               jsr  gotoxy
.09ec	20 b9 20	               jsr  pop
.09ef	20 83 1f	               jsr  putch
.09f2	20 7a 20	               jsr  push
.09f5	a2 11		               ldx  #17
.09f7	a0 05		               ldy  #5
.09f9	20 a3 1f	               jsr  gotoxy
.09fc	20 b9 20	               jsr  pop
.09ff	20 40 23	               jsr  atodec
.0a02	20 7a 20	               jsr  push
.0a05	a2 44		isx            ldx  #<adec
.0a07	a0 22		isy            ldy  #>adec
.0a09	20 89 1f	               jsr  puts
.0a0c	20 b9 20	               jsr  pull
.0a0f	20 b9 20	               jsr  pop
.0a12	60		               rts
.0a13			resetmenuacolor
.0a13	20 7a 20	               jsr  push
.0a16	a9 03		               lda  #menu1col1
.0a18	8d 82 1d	               sta  f1abutton
.0a1b	8d b8 1d	               sta  f3abutton
.0a1e	8d ee 1d	               sta  f5abutton
.0a21	8d 24 1e	               sta  f7abutton
.0a24	a9 0e		               lda  #menu1col2
.0a26	8d 9d 1d	               sta  f2abutton
.0a29	8d d3 1d	               sta  f4abutton
.0a2c	8d 09 1e	               sta  f6abutton
.0a2f	8d 3f 1e	               sta  f8abutton
.0a32	20 b9 20	               jsr  pop
.0a35	60		               rts
.0a36			resetmenubcolor
.0a36	20 7a 20	               jsr  push
.0a39	a9 0d		               lda  #menu2col1
.0a3b	8d 5a 1e	               sta  f1bbutton
.0a3e	8d 90 1e	               sta  f3bbutton
.0a41	8d c6 1e	               sta  f5bbutton
.0a44	8d fc 1e	               sta  f7bbutton
.0a47	a9 0d		               lda  #menu2col1
.0a49	8d 75 1e	               sta  f2bbutton
.0a4c	8d ab 1e	               sta  f4bbutton
.0a4f	8d e1 1e	               sta  f6bbutton
.0a52	8d 17 1f	               sta  f8bbutton
.0a55	20 b9 20	               jsr  pop
.0a58	60		               rts
.0a59			setmenuacolor
.0a59	20 7a 20	               jsr  push
.0a5c	8d 82 1d	               sta  f1abutton
.0a5f	8d 9d 1d	               sta  f2abutton
.0a62	8d b8 1d	               sta  f3abutton
.0a65	8d d3 1d	               sta  f4abutton
.0a68	8d ee 1d	               sta  f5abutton
.0a6b	8d 09 1e	               sta  f6abutton
.0a6e	8d 24 1e	               sta  f7abutton
.0a71	8d 3f 1e	               sta  f8abutton
.0a74	20 b9 20	               jsr  pop
.0a77	60		               rts
.0a78			setmenubcolor
.0a78	20 7a 20	               jsr  push
.0a7b	8d 5a 1e	               sta  f1bbutton
.0a7e	8d 75 1e	               sta  f2bbutton
.0a81	8d 90 1e	               sta  f3bbutton
.0a84	8d ab 1e	               sta  f4bbutton
.0a87	8d c6 1e	               sta  f5bbutton
.0a8a	8d e1 1e	               sta  f6bbutton
.0a8d	8d fc 1e	               sta  f7bbutton
.0a90	8d 17 1f	               sta  f8bbutton
.0a93	20 b9 20	               jsr  pop
.0a96	60		               rts
.0a97			drawkeyval
.0a97	20 7a 20	               jsr  push
.0a9a	20 7a 20	               jsr  push
.0a9d	a2 01		               ldx  #1
.0a9f	a0 13		               ldy  #19
.0aa1	20 a3 1f	               jsr  gotoxy
.0aa4	20 b9 20	               jsr  pop
.0aa7	ad c5 08	               lda  currentkey
.0aaa	20 83 1f	               jsr  putch
.0aad	48		               pha
.0aae	a9 3d		               lda  #'='
.0ab0	20 83 1f	               jsr  putch
.0ab3	a9 25		               lda  #'%'
.0ab5	20 83 1f	               jsr  putch
.0ab8	68		               pla
.0ab9	20 06 23	               jsr  putabin
.0abc	20 7a 20	               jsr  push
.0abf	a2 01		               ldx  #1
.0ac1	a0 14		               ldy  #20
.0ac3	20 a3 1f	               jsr  gotoxy
.0ac6	20 b9 20	               jsr  pop
.0ac9	20 7a 20	               jsr  push
.0acc	a2 98		isx            ldx  #<txt1
.0ace	a0 0b		isy            ldy  #>txt1
.0ad0	20 89 1f	               jsr  puts
.0ad3	20 b9 20	               jsr  pull
.0ad6	a9 24		               lda  #'$'
.0ad8	20 83 1f	               jsr  putch
.0adb	ad c5 08	               lda  currentkey
.0ade	20 73 22	               jsr  putahex
.0ae1	20 7a 20	               jsr  push
.0ae4	a2 01		               ldx  #1
.0ae6	a0 15		               ldy  #21
.0ae8	20 a3 1f	               jsr  gotoxy
.0aeb	20 b9 20	               jsr  pop
.0aee	20 7a 20	               jsr  push
.0af1	a2 a3		isx            ldx  #<txt2
.0af3	a0 0b		isy            ldy  #>txt2
.0af5	20 89 1f	               jsr  puts
.0af8	20 b9 20	               jsr  pull
.0afb	a9 24		               lda  #'$'
.0afd	20 83 1f	               jsr  putch
.0b00	ad 75 0f	               lda  bitmapaddr+1
.0b03	20 73 22	               jsr  putahex
.0b06	ad 74 0f	               lda  bitmapaddr
.0b09	20 73 22	               jsr  putahex
.0b0c	20 7a 20	               jsr  push
.0b0f	a2 01		               ldx  #1
.0b11	a0 16		               ldy  #22
.0b13	20 a3 1f	               jsr  gotoxy
.0b16	20 b9 20	               jsr  pop
.0b19	20 7a 20	               jsr  push
.0b1c	a2 ae		isx            ldx  #<txt3
.0b1e	a0 0b		isy            ldy  #>txt3
.0b20	20 89 1f	               jsr  puts
.0b23	20 b9 20	               jsr  pull
.0b26	a9 24		               lda  #'$'
.0b28	20 83 1f	               jsr  putch
.0b2b	ad c7 08	               lda  bitmapoffset
.0b2e	20 73 22	               jsr  putahex
.0b31	20 7a 20	               jsr  push
.0b34	a2 01		               ldx  #1
.0b36	a0 17		               ldy  #23
.0b38	20 a3 1f	               jsr  gotoxy
.0b3b	20 b9 20	               jsr  pop
.0b3e	20 7a 20	               jsr  push
.0b41	a2 bb		isx            ldx  #<txt4
.0b43	a0 0b		isy            ldy  #>txt4
.0b45	20 89 1f	               jsr  puts
.0b48	20 b9 20	               jsr  pull
.0b4b	a9 24		               lda  #'$'
.0b4d	20 83 1f	               jsr  putch
.0b50	ad c9 08	               lda  mapaddr+1
.0b53	20 73 22	               jsr  putahex
.0b56	ad c8 08	               lda  mapaddr
.0b59	20 73 22	               jsr  putahex
.0b5c	20 7a 20	               jsr  push
.0b5f	a2 01		               ldx  #1
.0b61	a0 18		               ldy  #24
.0b63	20 a3 1f	               jsr  gotoxy
.0b66	20 b9 20	               jsr  pop
.0b69	20 7a 20	               jsr  push
.0b6c	a2 c6		isx            ldx  #<txt5
.0b6e	a0 0b		isy            ldy  #>txt5
.0b70	20 89 1f	               jsr  puts
.0b73	20 b9 20	               jsr  pull
.0b76	ad cf 08	               lda  curscl
.0b79	20 73 22	               jsr  putahex
.0b7c	a9 da		               lda  #$da
.0b7e	20 83 1f	               jsr  putch
.0b81	ad ce 08	               lda  cursln
.0b84	20 73 22	               jsr  putahex
.0b87	20 b9 20	               jsr  pop
.0b8a	60		               rts
>0b8b	50 45 54 53	txt0           .null     "petscii :   "
>0b8f	43 49 49 20 3a 20 20 20 00
>0b98	4b 45 59 20	txt1           .null     "key code: "
>0b9c	43 4f 44 45 3a 20 00
>0ba3	42 49 54 4d	txt2           .null     "bitmap..: "
>0ba7	41 50 2e 2e 3a 20 00
>0bae	4f 46 46 53	txt3           .null     "offset..:   "
>0bb2	45 54 2e 2e 3a 20 20 20 00
>0bbb	4d 41 50 41	txt4           .null     "mapaddr.: "
>0bbf	44 44 52 2e 3a 20 00
>0bc6	43 55 52 53	txt5           .null     "cursval.: "
>0bca	56 41 4c 2e 3a 20 00
>0bd1	53 54 41 43	txt6           .null     "stack......:"
>0bd5	4b 2e 2e 2e 2e 2e 2e 3a 00
.0bde			keyaction
.0bde	20 7a 20	               jsr  push
.0be1	20 9a 24	loop           jsr  getkey
.0be4	c9 85		f1             cmp  #key_f1
.0be6	d0 03		               bne  f2
.0be8	4c 5c 0c	               jmp  dof1
.0beb	c9 89		f2             cmp  #key_f2
.0bed	d0 03		               bne  f3
.0bef	4c 62 0c	               jmp  dof2
.0bf2	c9 86		f3             cmp  #key_f3
.0bf4	d0 03		               bne  f4
.0bf6	4c 68 0c	               jmp  dof3
.0bf9	c9 8a		f4             cmp  #key_f4
.0bfb	d0 03		               bne  f5
.0bfd	4c 6e 0c	               jmp  dof4
.0c00	c9 87		f5             cmp  #key_f5
.0c02	d0 03		               bne  f6
.0c04	4c 74 0c	               jmp  dof5
.0c07	c9 8b		f6             cmp  #key_f6
.0c09	d0 03		               bne  f7
.0c0b	4c 7a 0c	               jmp  dof6
.0c0e	c9 88		f7             cmp  #key_f7
.0c10	d0 03		               bne  f8
.0c12	4c 80 0c	               jmp  dof7
.0c15	c9 8c		f8             cmp  #key_f8
.0c17	d0 03		               bne  ctrlx
.0c19	4c 86 0c	               jmp  dof8
.0c1c	c9 18		ctrlx          cmp  #ctrl_x
.0c1e	d0 03		               bne  ishex14
.0c20	4c 8c 0c	               jmp  doquit
.0c23	c9 14		ishex14        cmp  #$14
.0c25	d0 03		               bne  ishex12
.0c27	4c e1 0b	               jmp  loop
.0c2a	c9 12		ishex12        cmp  #$12
.0c2c	d0 03		               bne  reste
.0c2e	4c e1 0b	               jmp  loop
.0c31			reste
.0c31	20 7a 20	               jsr  push
.0c34	a2 0d		               ldx  #13
.0c36	a0 0c		               ldy  #12
.0c38	20 a3 1f	               jsr  gotoxy
.0c3b	20 b9 20	               jsr  pop
.0c3e	20 83 1f	               jsr  putch
.0c41	48		               pha
.0c42	ad c5 08	               lda  currentkey
.0c45	8d c6 08	               sta  previouskey
.0c48	68		               pla
.0c49	8d c5 08	               sta  currentkey
.0c4c	aa		               tax
.0c4d	bc 75 23	               ldy  asciitorom,x
.0c50	8c c7 08	               sty  bitmapoffset
.0c53	20 97 0a	               jsr  drawkeyval
.0c56	20 42 0e	               jsr  drawbitmap
.0c59	4c e1 0b	               jmp  loop
.0c5c	20 42 11	dof1           jsr  f1action  ;edit/reverse
.0c5f	4c e1 0b	               jmp  loop
.0c62	20 35 12	dof2           jsr  f2action  ;save/flip vert
.0c65	4c e1 0b	               jmp  loop
.0c68	20 ed 12	dof3           jsr  f3action  ;load/flip horz
.0c6b	4c e1 0b	               jmp  loop
.0c6e	20 b6 13	dof4           jsr  f4action  ;copy/scroll r
.0c71	4c e1 0b	               jmp  loop
.0c74	20 7f 14	dof5           jsr  f5action  ;clear/scroll l
.0c77	4c e1 0b	               jmp  loop
.0c7a	20 37 15	dof6           jsr  f6action  ;fill;/scroll up
.0c7d	4c e1 0b	               jmp  loop
.0c80	20 ef 15	dof7           jsr  f7action  ;clear;/scroll down
.0c83	4c e1 0b	               jmp  loop
.0c86	20 ac 16	dof8           jsr  f8action  ; function
.0c89	4c e1 0b	               jmp  loop
.0c8c	20 b9 20	doquit         jsr  pop
.0c8f	60		               rts
.0c90			editor
.0c90	20 7a 20	               jsr  push
.0c93	20 7a 20	               jsr  push
.0c96	a2 c8		               ldx  #<blankmsg
.0c98	a0 18		               ldy  #>blankmsg
.0c9a	20 12 20	               jsr  putscxy
.0c9d	a2 7f		               ldx  #<exit_msg
.0c9f	a0 1b		               ldy  #>exit_msg
.0ca1	20 12 20	               jsr  putscxy
.0ca4	20 b9 20	               jsr  pop
.0ca7	20 7a 20	               jsr  push
.0caa	a2 c8		               ldx  #<blankmsg
.0cac	a0 18		               ldy  #>blankmsg
.0cae	20 12 20	               jsr  putscxy
.0cb1	a2 1a		               ldx  #<edit_msg
.0cb3	a0 19		               ldy  #>edit_msg
.0cb5	20 12 20	               jsr  putscxy
.0cb8	20 b9 20	               jsr  pop
.0cbb	20 fe 0d	               jsr  setcurs
.0cbe	ad c5 08	               lda  currentkey
.0cc1	20 7a 20	               jsr  push
.0cc4	a2 11		               ldx  #17
.0cc6	a0 05		               ldy  #5
.0cc8	20 a3 1f	               jsr  gotoxy
.0ccb	20 b9 20	               jsr  pop
.0cce	20 40 23	               jsr  atodec
.0cd1	20 7a 20	               jsr  push
.0cd4	a2 44		isx            ldx  #<adec
.0cd6	a0 22		isy            ldy  #>adec
.0cd8	20 89 1f	               jsr  puts
.0cdb	20 b9 20	               jsr  pull
.0cde	20 42 0e	               jsr  drawbitmap
.0ce1	20 9a 24	ed_loop        jsr  getkey
.0ce4	c9 85		f1             cmp  #f1key
.0ce6	d0 03		               bne  cu
.0ce8	4c d0 0d	               jmp  do_ctrlx
.0ceb	c9 91		cu             cmp  #cursu
.0ced	d0 03		               bne  cd
.0cef	4c 7b 0d	               jmp  do_up
.0cf2	c9 11		cd             cmp  #cursd
.0cf4	d0 03		               bne  cl
.0cf6	4c 8e 0d	               jmp  do_down
.0cf9	c9 9d		cl             cmp  #cursl
.0cfb	d0 03		               bne  cr
.0cfd	4c a1 0d	               jmp  do_left
.0d00	c9 1d		cr             cmp  #cursr
.0d02	d0 03		               bne  cx
.0d04	4c b4 0d	               jmp  do_right
.0d07	c9 18		cx             cmp  #ctrl_x
.0d09	d0 03		               bne  sp
.0d0b	4c d0 0d	               jmp  do_ctrlx
.0d0e	c9 20		sp             cmp  #$20
.0d10	d0 03		               bne  ishex14
.0d12	4c c7 0d	               jmp  do_swap
.0d15	c9 14		ishex14        cmp  #$14
.0d17	d0 03		               bne  ishex12
.0d19	4c c7 0d	               jmp  do_swap
.0d1c	c9 12		ishex12        cmp  #$12
.0d1e	d0 03		               bne  rest
.0d20	4c c7 0d	               jmp  do_swap
.0d23			rest
.0d23	20 7a 20	               jsr  push
.0d26	a2 0d		               ldx  #13
.0d28	a0 0c		               ldy  #12
.0d2a	20 a3 1f	               jsr  gotoxy
.0d2d	20 b9 20	               jsr  pop
.0d30	20 83 1f	               jsr  putch
.0d33	48		               pha
.0d34	ad c5 08	               lda  currentkey
.0d37	8d c6 08	               sta  previouskey
.0d3a	68		               pla
.0d3b	8d c5 08	               sta  currentkey
.0d3e	aa		               tax
.0d3f	bc 75 23	               ldy  asciitorom,x
.0d42	8c c7 08	               sty  bitmapoffset
.0d45	20 97 0a	               jsr  drawkeyval
.0d48	20 42 0e	               jsr  drawbitmap
.0d4b	20 7a 20	               jsr  push
.0d4e	a2 0d		               ldx  #13
.0d50	a0 0c		               ldy  #12
.0d52	20 a3 1f	               jsr  gotoxy
.0d55	20 b9 20	               jsr  pop
.0d58	20 83 1f	               jsr  putch
.0d5b	20 7a 20	               jsr  push
.0d5e	a2 11		               ldx  #17
.0d60	a0 05		               ldy  #5
.0d62	20 a3 1f	               jsr  gotoxy
.0d65	20 b9 20	               jsr  pop
.0d68	20 40 23	               jsr  atodec
.0d6b	20 7a 20	               jsr  push
.0d6e	a2 44		isx            ldx  #<adec
.0d70	a0 22		isy            ldy  #>adec
.0d72	20 89 1f	               jsr  puts
.0d75	20 b9 20	               jsr  pull
.0d78	4c cd 0d	               jmp  totop
.0d7b	ad ce 08	do_up          lda  cursln
.0d7e	c9 09		               cmp  #grid_top
.0d80	f0 4b		               beq  totop
.0d82	20 20 0e	               jsr  clrcurs
.0d85	ce ce 08	               dec  cursln
.0d88	20 fe 0d	               jsr  setcurs
.0d8b	4c cd 0d	               jmp  totop
.0d8e	ad ce 08	do_down        lda  cursln
.0d91	c9 10		               cmp  #grid_bot
.0d93	f0 38		               beq  totop
.0d95	20 20 0e	               jsr  clrcurs
.0d98	ee ce 08	               inc  cursln
.0d9b	20 fe 0d	               jsr  setcurs
.0d9e	4c cd 0d	               jmp  totop
.0da1	ad cf 08	do_left        lda  curscl
.0da4	c9 01		               cmp  #grid_left
.0da6	f0 25		               beq  totop
.0da8	20 20 0e	               jsr  clrcurs
.0dab	ce cf 08	               dec  curscl
.0dae	20 fe 0d	               jsr  setcurs
.0db1	4c cd 0d	               jmp  totop
.0db4	ad cf 08	do_right       lda  curscl
.0db7	c9 08		               cmp  #grid_right
.0db9	f0 12		               beq  totop
.0dbb	20 20 0e	               jsr  clrcurs
.0dbe	ee cf 08	               inc  curscl
.0dc1	20 fe 0d	               jsr  setcurs
.0dc4	4c cd 0d	               jmp  totop
.0dc7	20 d7 0d	do_swap        jsr  do_eor
.0dca	20 42 0e	               jsr  drawbitmap
.0dcd	4c e1 0c	totop          jmp  ed_loop
.0dd0	20 20 0e	do_ctrlx       jsr  clrcurs
.0dd3	20 b9 20	               jsr  pop
.0dd6	60		               rts
.0dd7			do_eor
.0dd7	20 7a 20	               jsr  push
.0dda	ad c8 08	               lda  mapaddr
.0ddd	85 fd		               sta  zpage2
.0ddf	ad c9 08	               lda  mapaddr+1
.0de2	85 fe		               sta  zpage2+1
.0de4	ae ce 08	               ldx  cursln     ; calcul de
.0de7	ca		               dex            ; l'offset de
.0de8	8a		               txa            ; la
.0de9	29 f7		               and  #$f7      ; ligne
.0deb	a8		               tay
.0dec	ae cf 08	               ldx  curscl
.0def	ca		               dex
.0df0	bd ba 08	               lda  eorval,x
.0df3	51 fd		               eor  (zpage2),y
.0df5	20 97 0a	               jsr  drawkeyval
.0df8	91 fd		               sta  (zpage2),y
.0dfa	20 b9 20	               jsr  pop
.0dfd	60		               rts
.0dfe			setcurs
.0dfe	20 7a 20	               jsr  push
.0e01	a2 01		               ldx  #grid_left
.0e03	ac ce 08	               ldy  cursln
.0e06	20 a3 1f	               jsr  gotoxy
.0e09	a9 da		               lda  #$da
.0e0b	20 83 1f	               jsr  putch
.0e0e	ae cf 08	               ldx  curscl
.0e11	e8		               inx
.0e12	a0 08		               ldy  #grid_top-1
.0e14	20 a3 1f	               jsr  gotoxy
.0e17	a9 da		               lda  #$da
.0e19	20 83 1f	               jsr  putch
.0e1c	20 b9 20	               jsr  pop
.0e1f	60		               rts
.0e20			clrcurs
.0e20	20 7a 20	               jsr  push
.0e23	a2 01		               ldx  #grid_left
.0e25	ac ce 08	               ldy  cursln
.0e28	20 a3 1f	               jsr  gotoxy
.0e2b	a9 20		               lda  #$20
.0e2d	20 83 1f	               jsr  putch
.0e30	ae cf 08	               ldx  curscl
.0e33	e8		               inx
.0e34	a0 08		               ldy  #grid_top-1
.0e36	20 a3 1f	               jsr  gotoxy
.0e39	a9 20		               lda  #$20
.0e3b	20 83 1f	               jsr  putch
.0e3e	20 b9 20	               jsr  pop
.0e41	60		               rts
.0e42			drawbitmap
.0e42	20 7a 20	               jsr  push
.0e45	20 a9 0e	               jsr  calcmapaddr
.0e48	ad c8 08	               lda  mapaddr        ; on pointe sur la table des bitmaps
.0e4b	85 fb		               sta  zpage1
.0e4d	ad c9 08	               lda  mapaddr+1
.0e50	85 fc		               sta  zpage1+1
.0e52	a0 00		drawchar       ldy  #$00
.0e54	a2 09		               ldx  #grid_top      ;on replace la ...
.0e56	8e 5f 0e	               stx  isy+1          ;ligne de départ
.0e59	20 7a 20	nextline       jsr  push
.0e5c	a2 02		               ldx  #grid_left+1        ; la colonne
.0e5e	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.0e60	20 a3 1f	               jsr  gotoxy
.0e63	20 b9 20	               jsr  pop
.0e66	b1 fb		               lda  (zpage1),y     ; on li une ligne
.0e68	20 e4 22	               jsr  atobin
.0e6b	20 d8 0e	               jsr  abintograph
.0e6e	20 7a 20	               jsr  push
.0e71	a2 3b		isx            ldx  #<abin
.0e73	a0 22		isy            ldy  #>abin
.0e75	20 89 1f	               jsr  puts
.0e78	20 b9 20	               jsr  pull
.0e7b	ee 5f 0e	               inc  isy+1
.0e7e	c8		               iny
.0e7f	c0 08		               cpy  #$08
.0e81	30 d6		               bmi  nextline
.0e83	20 8a 0e	               jsr  highlight
.0e86	20 b9 20	               jsr  pop
.0e89	60		               rts
.0e8a			highlight
.0e8a	20 7a 20	               jsr  push
.0e8d	ae c6 08	               ldx  previouskey
.0e90	bd 75 23	               lda  asciitorom,x
.0e93	aa		               tax
.0e94	a9 0f		               lda  #charscolor
.0e96	9d 00 d8	               sta  colorram,x
.0e99	ae c5 08	               ldx  currentkey
.0e9c	bd 75 23	               lda  asciitorom,x
.0e9f	aa		               tax
.0ea0	a9 01		               lda  #charcolor
.0ea2	9d 00 d8	               sta  colorram,x
.0ea5	20 b9 20	               jsr  pop
.0ea8	60		               rts
.0ea9			calcmapaddr
.0ea9	20 7a 20	               jsr  push
.0eac	ad 74 0f	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0eaf	85 fb		               sta  zpage1
.0eb1	ad 75 0f	               lda  bitmapaddr+1
.0eb4	85 fc		               sta  zpage1+1
.0eb6	ae c7 08	               ldx  bitmapoffset
.0eb9	e0 00		               cpx  #$00
.0ebb	f0 08		               beq  thesame         ; sommes nous déja à 0
.0ebd	a9 08		addagain       lda  #$08
.0ebf	20 0e 11	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0ec2	ca		               dex                 ; pour chaque caracteres
.0ec3	d0 f8		               bne  addagain
.0ec5	48		thesame        pha
.0ec6	a5 fb		               lda  zpage1
.0ec8	8d c8 08	               sta  mapaddr
.0ecb	a5 fc		               lda  zpage1+1
.0ecd	8d c9 08	               sta  mapaddr+1
.0ed0	68		               pla
.0ed1	20 97 0a	               jsr  drawkeyval
.0ed4	20 b9 20	out            jsr  pop
.0ed7	60		               rts
.0ed8			abintograph
.0ed8	20 7a 20	               jsr  push
.0edb	a9 3b		               lda  #<abin
.0edd	85 fb		               sta  zpage1
.0edf	a9 22		               lda  #>abin+1
.0ee1	85 fc		               sta  zpage1+1
.0ee3	a0 00		               ldy  #$00
.0ee5	b1 fb		nextbit        lda  (zpage1),y
.0ee7	c9 30		               cmp  #$30
.0ee9	f0 07		               beq  itszero
.0eeb	a9 d1		itsone         lda  #$d1
.0eed	91 fb		               sta  (zpage1),y
.0eef	4c f6 0e	               jmp  next
.0ef2	a9 2e		itszero        lda  #$2e
.0ef4	91 fb		               sta  (zpage1),y
.0ef6	c8		next           iny
.0ef7	c0 08		               cpy  #$08
.0ef9	30 ea		               bmi  nextbit
.0efb	20 b9 20	               jsr  pop
.0efe	60		               rts
.0eff			setscreenptr
.0eff	20 7a 20	               jsr  push
.0f02	a9 08		               lda  #$08      ; basic commande to disable ...
.0f04	20 d2 ff	               jsr  chrout    ; ... character set change.
.0f07	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.0f0a	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.0f0c	09 0c		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.0f0e	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.0f11	20 b9 20	               jsr  pop
.0f14	60		               rts
.0f15			copycharset
.0f15	20 7a 20	               jsr  push
.0f18	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0f1b	29 fe		               and  #%11111110     ;254
.0f1d	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0f20	a5 01		               lda  u6510map       ;$01
.0f22	29 fb		               and  #%11111011     ;251
.0f24	85 01		               sta  u6510map       ;$01
.0f26	20 3b 0f	               jsr  memcopy
.0f29	a5 01		               lda  u6510map       ;$01
.0f2b	09 04		               ora  #%00000100
.0f2d	85 01		               sta  u6510map       ;$01
.0f2f	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0f32	09 01		               ora  #%00000001     ;254
.0f34	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0f37	20 b9 20	               jsr  pop
.0f3a	60		               rts
.0f3b			memcopy
.0f3b	20 7a 20	               jsr  push
.0f3e	ad 70 0f	               lda  startaddr
.0f41	85 fb		               sta  zpage1
.0f43	ad 71 0f	               lda  startaddr+1
.0f46	85 fc		               sta  zpage1+1
.0f48	ad 74 0f	               lda  bitmapaddr
.0f4b	85 fd		               sta  zpage2
.0f4d	ad 75 0f	               lda  bitmapaddr+1
.0f50	85 fe		               sta  zpage2+1
.0f52	a0 00		               ldy  #$00
.0f54	b1 fb		onemore        lda  (zpage1),y
.0f56	91 fd		               sta  (zpage2),y
.0f58	20 81 21	               jsr  inczp1
.0f5b	20 99 21	               jsr  inczp2
.0f5e	a5 fc		               lda  zpage1+1
.0f60	cd 73 0f	               cmp  stopaddr+1
.0f63	d0 ef		               bne  onemore
.0f65	a5 fb		               lda  zpage1
.0f67	cd 72 0f	               cmp  stopaddr
.0f6a	d0 e8		               bne  onemore
.0f6c	20 b9 20	               jsr  pop
.0f6f	60		               rts
=12288			bitmapmem =    charsdef * 1024     ;Calcul de la position ram des caracteres.
=61440			mstopaddr =    $d000+(4*$800)
>0f70	00 d0		startaddr      .word     $d000               ; 53248
>0f72	00 f0		stopaddr       .word     mstopaddr           ; 55296
>0f74	00 30		bitmapaddr     .word     bitmapmem           ; $3000, 12288
.0f76			staticscreen
.0f76	48		               pha
.0f77	a9 0b		               lda  #bordure
.0f79	8d 20 d0	               sta  $d020
.0f7c	68		               pla
.0f7d	48		               pha
.0f7e	a9 00		               lda  #fond
.0f80	8d 21 d0	               sta  $d021
.0f83	68		               pla
.0f84	20 65 10	               jsr  drawlines
.0f87	20 41 10	               jsr  drawallchars
.0f8a	20 ad 10	               jsr  drawgrid
.0f8d	20 b2 0f	               jsr  drawfkeys
.0f90	20 7a 20	               jsr  push
.0f93	a2 c8		               ldx  #<blankmsg
.0f95	a0 18		               ldy  #>blankmsg
.0f97	20 12 20	               jsr  putscxy
.0f9a	a2 6a		               ldx  #<quit_msg
.0f9c	a0 1b		               ldy  #>quit_msg
.0f9e	20 12 20	               jsr  putscxy
.0fa1	20 b9 20	               jsr  pop
.0fa4	20 7a 20	               jsr  push
.0fa7	a2 00		               ldx  #0
.0fa9	a0 07		               ldy  #7
.0fab	20 a3 1f	               jsr  gotoxy
.0fae	20 b9 20	               jsr  pop
.0fb1	60		               rts
.0fb2			drawfkeys
.0fb2	20 7a 20	               jsr  push
.0fb5	ad c3 08	               lda  fkeyset
.0fb8	c9 00		               cmp  #$0
.0fba	d0 42		               bne  secondks
.0fbc	a2 4c		               ldx #<titremenu1
.0fbe	a0 1d		               ldy #>titremenu1
.0fc0	20 12 20	               jsr putscxy
.0fc3	a2 82		               ldx #<f1abutton
.0fc5	a0 1d		               ldy #>f1abutton
.0fc7	20 12 20	               jsr putscxy
.0fca	a2 9d		               ldx #<f2abutton
.0fcc	a0 1d		               ldy #>f2abutton
.0fce	20 12 20	               jsr putscxy
.0fd1	a2 b8		               ldx #<f3abutton
.0fd3	a0 1d		               ldy #>f3abutton
.0fd5	20 12 20	               jsr putscxy
.0fd8	a2 d3		               ldx #<f4abutton
.0fda	a0 1d		               ldy #>f4abutton
.0fdc	20 12 20	               jsr putscxy
.0fdf	a2 ee		               ldx #<f5abutton
.0fe1	a0 1d		               ldy #>f5abutton
.0fe3	20 12 20	               jsr putscxy
.0fe6	a2 09		               ldx #<f6abutton
.0fe8	a0 1e		               ldy #>f6abutton
.0fea	20 12 20	               jsr putscxy
.0fed	a2 24		               ldx #<f7abutton
.0fef	a0 1e		               ldy #>f7abutton
.0ff1	20 12 20	               jsr putscxy
.0ff4	a2 3f		               ldx #<f8abutton
.0ff6	a0 1e		               ldy #>f8abutton
.0ff8	20 12 20	               jsr putscxy
.0ffb	4c 3d 10	               jmp end
.0ffe			secondks
.0ffe	a2 67		               ldx #<titremenu2
.1000	a0 1d		               ldy #>titremenu2
.1002	20 12 20	               jsr putscxy
.1005	a2 5a		               ldx #<f1bbutton
.1007	a0 1e		               ldy #>f1bbutton
.1009	20 12 20	               jsr putscxy
.100c	a2 75		               ldx #<f2bbutton
.100e	a0 1e		               ldy #>f2bbutton
.1010	20 12 20	               jsr putscxy
.1013	a2 90		               ldx #<f3bbutton
.1015	a0 1e		               ldy #>f3bbutton
.1017	20 12 20	               jsr putscxy
.101a	a2 ab		               ldx #<f4bbutton
.101c	a0 1e		               ldy #>f4bbutton
.101e	20 12 20	               jsr putscxy
.1021	a2 c6		               ldx #<f5bbutton
.1023	a0 1e		               ldy #>f5bbutton
.1025	20 12 20	               jsr putscxy
.1028	a2 e1		               ldx #<f6bbutton
.102a	a0 1e		               ldy #>f6bbutton
.102c	20 12 20	               jsr putscxy
.102f	a2 fc		               ldx #<f7bbutton
.1031	a0 1e		               ldy #>f7bbutton
.1033	20 12 20	               jsr putscxy
.1036	a2 17		               ldx #<f8bbutton
.1038	a0 1f		               ldy #>f8bbutton
.103a	20 12 20	               jsr putscxy
.103d	20 b9 20	end            jsr  pop
.1040	60		               rts
.1041			drawallchars
.1041	20 7a 20	               jsr push
.1044	20 7a 20	               jsr  push
.1047	a2 00		               ldx  #0
.1049	a0 00		               ldy  #0
.104b	20 a3 1f	               jsr  gotoxy
.104e	20 b9 20	               jsr  pop
.1051	a2 00		               ldx  #$00
.1053	8a		nextc          txa
.1054	9d 00 04	               sta  scrnnewram,x
.1057	a9 0f		               lda  #charscolor
.1059	9d 00 d8	               sta  colorram,x
.105c	e8		               inx
.105d	e0 80		               cpx  #$80
.105f	d0 f2		               bne  nextc
.1061	20 b9 20	               jsr  pop
.1064	60		               rts
.1065			drawlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.1065	20 7a 20	               jsr  push
.1068	a2 28		               ldx  #40
.106a	a9 40		               lda  #64
.106c	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.106f	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.1072	ca		               dex
.1073	e0 10		hline          cpx  #vlinepos
.1075	10 03		               bpl  notyet
.1077	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.107a	e0 00		notyet         cpx  #$00
.107c	d0 ee		               bne  nextl
.107e	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.1080	85 fb		               sta  zpage1
.1082	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.1084	85 fc		               sta  zpage1+1
.1086	a0 00		               ldy  #0
.1088	a9 72		               lda  #114
.108a	91 fb		               sta  (zpage1),y
.108c	20 1c 11	               jsr  zp1add40
.108f	a2 12		               ldx  #24-hline2
.1091	a9 5d		               lda  #93
.1093	91 fb		another93      sta  (zpage1),y
.1095	20 1c 11	               jsr  zp1add40
.1098	ca		               dex
.1099	d0 f8		               bne  another93
.109b	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.109d	85 fb		               sta  zpage1
.109f	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.10a1	85 fc		               sta  zpage1+1
.10a3	a0 00		               ldy  #0
.10a5	a9 73		               lda  #115
.10a7	91 fb		               sta  (zpage1),y
.10a9	20 b9 20	               jsr  pop
.10ac	60		               rts
.10ad			drawgrid
.10ad	20 7a 20	               jsr  push
.10b0	20 32 1f	               jsr  screendis
.10b3	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.10b5	85 fb		               sta  zpage1
.10b7	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.10b9	85 fc		               sta  zpage1+1
.10bb	a2 08		               ldx  #8
.10bd	a9 65		nextbox        lda  #101
.10bf	a0 09		               ldy  #9
.10c1	91 fb		               sta  (zpage1),y
.10c3	88		               dey
.10c4	a9 2e		               lda  #$2e
.10c6	91 fb		nextcol        sta  (zpage1),y
.10c8	88		               dey
.10c9	d0 fb		               bne  nextcol
.10cb	20 1c 11	               jsr  zp1add40
.10ce	ca		               dex
.10cf	d0 ec		               bne  nextbox
.10d1	a0 08		               ldy  #8
.10d3	a9 77		               lda  #119
.10d5	91 fb		nextlin        sta  (zpage1),y
.10d7	88		               dey
.10d8	d0 fb		               bne  nextlin
.10da	a9 3e		               lda  #$3e
.10dc	8d eb 05	               sta  scrnnewram+(40*(12))+11
.10df	a9 70		               lda  #$70                     ;+
.10e1	8d c4 05	               sta  scrnnewram+(40*(11))+12
.10e4	a9 43		               lda  #$43                     ;-
.10e6	8d c5 05	               sta  scrnnewram+(40*(11))+13
.10e9	a9 6e		               lda  #$6e                     ;+
.10eb	8d c6 05	               sta  scrnnewram+(40*(11))+14
.10ee	a9 5d		               lda  #$5d                     ;|
.10f0	8d ec 05	               sta  scrnnewram+(40*(12))+12
.10f3	a9 5d		               lda  #$5d                     ;|
.10f5	8d ee 05	               sta  scrnnewram+(40*(12))+14
.10f8	a9 6d		               lda  #$6d                     ;+
.10fa	8d 14 06	               sta  scrnnewram+(40*(13))+12
.10fd	a9 43		               lda  #$43                     ;-
.10ff	8d 15 06	               sta  scrnnewram+(40*(13))+13
.1102	a9 7d		               lda  #$7d                     ;+
.1104	8d 16 06	               sta  scrnnewram+(40*(13))+14
.1107	20 3f 1f	               jsr screenena
.110a	20 b9 20	               jsr  pop
.110d	60		               rts
.110e			zp1addnum
.110e	08		               php
.110f	48		               pha
.1110	18		               clc
.1111	65 fb		               adc  zpage1
.1113	90 02		               bcc  nocarry
.1115	e6 fc		               inc  zpage1+1
.1117	85 fb		nocarry        sta  zpage1
.1119	68		               pla
.111a	28		               plp
.111b	60		               rts
.111c			zp1add40
.111c	08		               php
.111d	48		               pha
.111e	18		               clc
.111f	a5 fb		               lda  zpage1
.1121	69 28		               adc  #40
.1123	90 02		               bcc  nocarry
.1125	e6 fc		               inc  zpage1+1
.1127	85 fb		nocarry        sta  zpage1
.1129	68		               pla
.112a	28		               plp
.112b	60		               rts
.112c			delay
.112c	20 7a 20	               jsr  push
.112f	a9 00		               lda  #$0
.1131	aa		               tax
.1132	a8		               tay
.1133	ca		xagain         dex
.1134	ca		               dex
.1135	88		yagain         dey
.1136	c0 00		               cpy  #$00
.1138	d0 fb		               bne  yagain
.113a	e0 00		               cpx  #$00
.113c	d0 f5		               bne  xagain
.113e	20 b9 20	               jsr  pop
.1141	60		               rts
.1142			f1action
.1142	48		               pha
.1143	a9 ff		               lda  #$ff
.1145	8d c2 08	               sta  editmode
.1148	ad c3 08	               lda  fkeyset
.114b	f0 03		               beq  menua
.114d	4c d5 11	               jmp  menub
.1150			menua
.1150	20 7a 20	               jsr  push
.1153	a2 c8		               ldx  #<blankmsg
.1155	a0 18		               ldy  #>blankmsg
.1157	20 12 20	               jsr  putscxy
.115a	a2 1a		               ldx  #<f1a_msg
.115c	a0 19		               ldy  #>f1a_msg
.115e	20 12 20	               jsr  putscxy
.1161	20 b9 20	               jsr  pop
.1164	08		               php
.1165	48		               pha
.1166	8a		               txa
.1167	48		               pha
.1168	ad 82 1d	               lda  f1abutton
.116b	48		               pha
.116c	a9 92		               lda  #146
.116e	8d 94 1d	               sta  f1abutton+18
.1171	a9 01		               lda  #flashcol
.1173	8d 82 1d	               sta  f1abutton
.1176	a2 82		               ldx  #<f1abutton
.1178	a0 1d		               ldy  #>f1abutton
.117a	20 12 20	               jsr  putscxy
.117d	20 2c 11	               jsr  delay
.1180	a9 12		               lda  #18
.1182	8d 94 1d	               sta  f1abutton+18
.1185	68		               pla
.1186	8d 82 1d	               sta  f1abutton
.1189	a2 82		               ldx  #<f1abutton
.118b	a0 1d		               ldy  #>f1abutton
.118d	20 12 20	               jsr  putscxy
.1190	68		               pla
.1191	aa		               tax
.1192	68		               pla
.1193	28		               plp
.1194	a9 0b		               lda  #vgris
.1196	20 59 0a	               jsr  setmenuacolor
.1199	a9 03		               lda  #menu1col1
.119b	8d 82 1d	               sta  f1abutton
.119e	20 b2 0f	               jsr  drawfkeys
.11a1	20 90 0c	               jsr  editor
.11a4	20 7a 20	               jsr  push
.11a7	a2 c8		               ldx  #<blankmsg
.11a9	a0 18		               ldy  #>blankmsg
.11ab	20 12 20	               jsr  putscxy
.11ae	a2 6a		               ldx  #<quit_msg
.11b0	a0 1b		               ldy  #>quit_msg
.11b2	20 12 20	               jsr  putscxy
.11b5	20 b9 20	               jsr  pop
.11b8	20 7a 20	               jsr  push
.11bb	a2 c8		               ldx  #<blankmsg
.11bd	a0 18		               ldy  #>blankmsg
.11bf	20 12 20	               jsr  putscxy
.11c2	a2 c2		               ldx  #<menua_msg
.11c4	a0 1a		               ldy  #>menua_msg
.11c6	20 12 20	               jsr  putscxy
.11c9	20 b9 20	               jsr  pop
.11cc	20 13 0a	               jsr  resetmenuacolor
.11cf	20 b2 0f	               jsr  drawfkeys
.11d2	4c 1f 12	               jmp  out
.11d5			menub
.11d5	20 7a 20	               jsr  push
.11d8	a2 c8		               ldx  #<blankmsg
.11da	a0 18		               ldy  #>blankmsg
.11dc	20 12 20	               jsr  putscxy
.11df	a2 06		               ldx  #<f1b_msg
.11e1	a0 1a		               ldy  #>f1b_msg
.11e3	20 12 20	               jsr  putscxy
.11e6	20 b9 20	               jsr  pop
.11e9	08		               php
.11ea	48		               pha
.11eb	8a		               txa
.11ec	48		               pha
.11ed	ad 5a 1e	               lda  f1bbutton
.11f0	48		               pha
.11f1	a9 92		               lda  #146
.11f3	8d 6c 1e	               sta  f1bbutton+18
.11f6	a9 01		               lda  #flashcol
.11f8	8d 5a 1e	               sta  f1bbutton
.11fb	a2 5a		               ldx  #<f1bbutton
.11fd	a0 1e		               ldy  #>f1bbutton
.11ff	20 12 20	               jsr  putscxy
.1202	20 2c 11	               jsr  delay
.1205	a9 12		               lda  #18
.1207	8d 6c 1e	               sta  f1bbutton+18
.120a	68		               pla
.120b	8d 5a 1e	               sta  f1bbutton
.120e	a2 5a		               ldx  #<f1bbutton
.1210	a0 1e		               ldy  #>f1bbutton
.1212	20 12 20	               jsr  putscxy
.1215	68		               pla
.1216	aa		               tax
.1217	68		               pla
.1218	28		               plp
.1219	20 94 18	               jsr  flipvert
.121c	20 42 0e	               jsr  drawbitmap
.121f	68		out            pla
.1220	20 7a 20	               jsr  push
.1223	a2 c8		               ldx  #<blankmsg
.1225	a0 18		               ldy  #>blankmsg
.1227	20 12 20	               jsr  putscxy
.122a	a2 f4		               ldx  #<prompt_msg
.122c	a0 18		               ldy  #>prompt_msg
.122e	20 12 20	               jsr  putscxy
.1231	20 b9 20	               jsr  pop
.1234	60		               rts
.1235			f2action
.1235	48		               pha
.1236	a9 00		               lda  #$0
.1238	8d c2 08	               sta  editmode
.123b	ad c3 08	               lda  fkeyset
.123e	d0 4d		               bne  menub
.1240	20 7a 20	               jsr  push
.1243	a2 c8		               ldx  #<blankmsg
.1245	a0 18		               ldy  #>blankmsg
.1247	20 12 20	               jsr  putscxy
.124a	a2 35		               ldx  #<f2a_msg
.124c	a0 19		               ldy  #>f2a_msg
.124e	20 12 20	               jsr  putscxy
.1251	20 b9 20	               jsr  pop
.1254	08		               php
.1255	48		               pha
.1256	8a		               txa
.1257	48		               pha
.1258	ad 9d 1d	               lda  f2abutton
.125b	48		               pha
.125c	a9 92		               lda  #146
.125e	8d af 1d	               sta  f2abutton+18
.1261	a9 01		               lda  #flashcol
.1263	8d 9d 1d	               sta  f2abutton
.1266	a2 9d		               ldx  #<f2abutton
.1268	a0 1d		               ldy  #>f2abutton
.126a	20 12 20	               jsr  putscxy
.126d	20 2c 11	               jsr  delay
.1270	a9 12		               lda  #18
.1272	8d af 1d	               sta  f2abutton+18
.1275	68		               pla
.1276	8d 9d 1d	               sta  f2abutton
.1279	a2 9d		               ldx  #<f2abutton
.127b	a0 1d		               ldy  #>f2abutton
.127d	20 12 20	               jsr  putscxy
.1280	68		               pla
.1281	aa		               tax
.1282	68		               pla
.1283	28		               plp
.1284	20 fb 08	               jsr  copychar
.1287	20 42 0e	               jsr  drawbitmap
.128a	4c d7 12	               jmp  out
.128d			menub
.128d	20 7a 20	               jsr  push
.1290	a2 c8		               ldx  #<blankmsg
.1292	a0 18		               ldy  #>blankmsg
.1294	20 12 20	               jsr  putscxy
.1297	a2 22		               ldx  #<f2b_msg
.1299	a0 1a		               ldy  #>f2b_msg
.129b	20 12 20	               jsr  putscxy
.129e	20 b9 20	               jsr  pop
.12a1	08		               php
.12a2	48		               pha
.12a3	8a		               txa
.12a4	48		               pha
.12a5	ad 75 1e	               lda  f2bbutton
.12a8	48		               pha
.12a9	a9 92		               lda  #146
.12ab	8d 87 1e	               sta  f2bbutton+18
.12ae	a9 01		               lda  #flashcol
.12b0	8d 75 1e	               sta  f2bbutton
.12b3	a2 75		               ldx  #<f2bbutton
.12b5	a0 1e		               ldy  #>f2bbutton
.12b7	20 12 20	               jsr  putscxy
.12ba	20 2c 11	               jsr  delay
.12bd	a9 12		               lda  #18
.12bf	8d 87 1e	               sta  f2bbutton+18
.12c2	68		               pla
.12c3	8d 75 1e	               sta  f2bbutton
.12c6	a2 75		               ldx  #<f2bbutton
.12c8	a0 1e		               ldy  #>f2bbutton
.12ca	20 12 20	               jsr  putscxy
.12cd	68		               pla
.12ce	aa		               tax
.12cf	68		               pla
.12d0	28		               plp
.12d1	20 67 18	               jsr  fliphorz
.12d4	20 42 0e	               jsr  drawbitmap
.12d7	68		out            pla
.12d8	20 7a 20	               jsr  push
.12db	a2 c8		               ldx  #<blankmsg
.12dd	a0 18		               ldy  #>blankmsg
.12df	20 12 20	               jsr  putscxy
.12e2	a2 f4		               ldx  #<prompt_msg
.12e4	a0 18		               ldy  #>prompt_msg
.12e6	20 12 20	               jsr  putscxy
.12e9	20 b9 20	               jsr  pop
.12ec	60		               rts
.12ed			f3action
.12ed	48		               pha
.12ee	a9 00		               lda  #$0
.12f0	8d c2 08	               sta  editmode
.12f3	ad c3 08	               lda  fkeyset
.12f6	d0 5e		               bne  menub
.12f8	08		               php
.12f9	48		               pha
.12fa	8a		               txa
.12fb	48		               pha
.12fc	ad b8 1d	               lda  f3abutton
.12ff	48		               pha
.1300	a9 92		               lda  #146
.1302	8d ca 1d	               sta  f3abutton+18
.1305	a9 01		               lda  #flashcol
.1307	8d b8 1d	               sta  f3abutton
.130a	a2 b8		               ldx  #<f3abutton
.130c	a0 1d		               ldy  #>f3abutton
.130e	20 12 20	               jsr  putscxy
.1311	20 2c 11	               jsr  delay
.1314	a9 12		               lda  #18
.1316	8d ca 1d	               sta  f3abutton+18
.1319	68		               pla
.131a	8d b8 1d	               sta  f3abutton
.131d	a2 b8		               ldx  #<f3abutton
.131f	a0 1d		               ldy  #>f3abutton
.1321	20 12 20	               jsr  putscxy
.1324	68		               pla
.1325	aa		               tax
.1326	68		               pla
.1327	28		               plp
.1328	20 7a 20	               jsr  push
.132b	a2 c8		               ldx  #<blankmsg
.132d	a0 18		               ldy  #>blankmsg
.132f	20 12 20	               jsr  putscxy
.1332	a2 56		               ldx  #<f3a_msg
.1334	a0 19		               ldy  #>f3a_msg
.1336	20 12 20	               jsr  putscxy
.1339	20 b9 20	               jsr  pop
.133c	20 9a 24	getagain       jsr  getkey
.133f	c9 43		               cmp  #$43
.1341	f0 07		               beq  devok
.1343	c9 44		               cmp  #$44
.1345	f0 03		               beq  devok
.1347	4c 3c 13	               jmp  getagain
.134a	8d b8 08	devok          sta  device
.134d	20 83 1f	               jsr  putch
.1350	20 58 08	               jsr  getfname
.1353	4c a0 13	               jmp  out
.1356			menub
.1356	20 7a 20	               jsr  push
.1359	a2 c8		               ldx  #<blankmsg
.135b	a0 18		               ldy  #>blankmsg
.135d	20 12 20	               jsr  putscxy
.1360	a2 40		               ldx  #<f3b_msg
.1362	a0 1a		               ldy  #>f3b_msg
.1364	20 12 20	               jsr  putscxy
.1367	20 b9 20	               jsr  pop
.136a	08		               php
.136b	48		               pha
.136c	8a		               txa
.136d	48		               pha
.136e	ad 90 1e	               lda  f3bbutton
.1371	48		               pha
.1372	a9 92		               lda  #146
.1374	8d a2 1e	               sta  f3bbutton+18
.1377	a9 01		               lda  #flashcol
.1379	8d 90 1e	               sta  f3bbutton
.137c	a2 90		               ldx  #<f3bbutton
.137e	a0 1e		               ldy  #>f3bbutton
.1380	20 12 20	               jsr  putscxy
.1383	20 2c 11	               jsr  delay
.1386	a9 12		               lda  #18
.1388	8d a2 1e	               sta  f3bbutton+18
.138b	68		               pla
.138c	8d 90 1e	               sta  f3bbutton
.138f	a2 90		               ldx  #<f3bbutton
.1391	a0 1e		               ldy  #>f3bbutton
.1393	20 12 20	               jsr  putscxy
.1396	68		               pla
.1397	aa		               tax
.1398	68		               pla
.1399	28		               plp
.139a	20 f2 17	               jsr  scrollright
.139d	20 42 0e	               jsr  drawbitmap
.13a0	68		out            pla
.13a1	20 7a 20	               jsr  push
.13a4	a2 c8		               ldx  #<blankmsg
.13a6	a0 18		               ldy  #>blankmsg
.13a8	20 12 20	               jsr  putscxy
.13ab	a2 f4		               ldx  #<prompt_msg
.13ad	a0 18		               ldy  #>prompt_msg
.13af	20 12 20	               jsr  putscxy
.13b2	20 b9 20	               jsr  pop
.13b5	60		               rts
.13b6			f4action
.13b6	48		               pha
.13b7	a9 00		               lda  #$0
.13b9	8d c2 08	               sta  editmode
.13bc	ad c3 08	               lda  fkeyset
.13bf	d0 5e		               bne  menub
.13c1	08		               php
.13c2	48		               pha
.13c3	8a		               txa
.13c4	48		               pha
.13c5	ad d3 1d	               lda  f4abutton
.13c8	48		               pha
.13c9	a9 92		               lda  #146
.13cb	8d e5 1d	               sta  f4abutton+18
.13ce	a9 01		               lda  #flashcol
.13d0	8d d3 1d	               sta  f4abutton
.13d3	a2 d3		               ldx  #<f4abutton
.13d5	a0 1d		               ldy  #>f4abutton
.13d7	20 12 20	               jsr  putscxy
.13da	20 2c 11	               jsr  delay
.13dd	a9 12		               lda  #18
.13df	8d e5 1d	               sta  f4abutton+18
.13e2	68		               pla
.13e3	8d d3 1d	               sta  f4abutton
.13e6	a2 d3		               ldx  #<f4abutton
.13e8	a0 1d		               ldy  #>f4abutton
.13ea	20 12 20	               jsr  putscxy
.13ed	68		               pla
.13ee	aa		               tax
.13ef	68		               pla
.13f0	28		               plp
.13f1	20 7a 20	               jsr  push
.13f4	a2 c8		               ldx  #<blankmsg
.13f6	a0 18		               ldy  #>blankmsg
.13f8	20 12 20	               jsr  putscxy
.13fb	a2 82		               ldx  #<f4a_msg
.13fd	a0 19		               ldy  #>f4a_msg
.13ff	20 12 20	               jsr  putscxy
.1402	20 b9 20	               jsr  pop
.1405	20 9a 24	getagain       jsr  getkey
.1408	c9 43		               cmp  #$43
.140a	f0 07		               beq  devok
.140c	c9 44		               cmp  #$44
.140e	f0 03		               beq  devok
.1410	4c 05 14	               jmp  getagain
.1413	8d b8 08	devok          sta  device
.1416	20 83 1f	               jsr  putch
.1419	20 58 08	               jsr  getfname
.141c	4c 69 14	               jmp  out
.141f			menub
.141f	20 7a 20	               jsr  push
.1422	a2 c8		               ldx  #<blankmsg
.1424	a0 18		               ldy  #>blankmsg
.1426	20 12 20	               jsr  putscxy
.1429	a2 5c		               ldx  #<f4b_msg
.142b	a0 1a		               ldy  #>f4b_msg
.142d	20 12 20	               jsr  putscxy
.1430	20 b9 20	               jsr  pop
.1433	08		               php
.1434	48		               pha
.1435	8a		               txa
.1436	48		               pha
.1437	ad ab 1e	               lda  f4bbutton
.143a	48		               pha
.143b	a9 92		               lda  #146
.143d	8d bd 1e	               sta  f4bbutton+18
.1440	a9 01		               lda  #flashcol
.1442	8d ab 1e	               sta  f4bbutton
.1445	a2 ab		               ldx  #<f4bbutton
.1447	a0 1e		               ldy  #>f4bbutton
.1449	20 12 20	               jsr  putscxy
.144c	20 2c 11	               jsr  delay
.144f	a9 12		               lda  #18
.1451	8d bd 1e	               sta  f4bbutton+18
.1454	68		               pla
.1455	8d ab 1e	               sta  f4bbutton
.1458	a2 ab		               ldx  #<f4bbutton
.145a	a0 1e		               ldy  #>f4bbutton
.145c	20 12 20	               jsr  putscxy
.145f	68		               pla
.1460	aa		               tax
.1461	68		               pla
.1462	28		               plp
.1463	20 17 18	               jsr  scrollleft
.1466	20 42 0e	               jsr  drawbitmap
.1469	68		out            pla
.146a	20 7a 20	               jsr  push
.146d	a2 c8		               ldx  #<blankmsg
.146f	a0 18		               ldy  #>blankmsg
.1471	20 12 20	               jsr  putscxy
.1474	a2 f4		               ldx  #<prompt_msg
.1476	a0 18		               ldy  #>prompt_msg
.1478	20 12 20	               jsr  putscxy
.147b	20 b9 20	               jsr  pop
.147e	60		               rts
.147f			f5action
.147f	48		               pha
.1480	a9 00		               lda  #$0
.1482	8d c2 08	               sta  editmode
.1485	ad c3 08	               lda  fkeyset
.1488	d0 4d		               bne  menub
.148a	20 7a 20	               jsr  push
.148d	a2 c8		               ldx  #<blankmsg
.148f	a0 18		               ldy  #>blankmsg
.1491	20 12 20	               jsr  putscxy
.1494	a2 af		               ldx  #<f5a_msg
.1496	a0 19		               ldy  #>f5a_msg
.1498	20 12 20	               jsr  putscxy
.149b	20 b9 20	               jsr  pop
.149e	08		               php
.149f	48		               pha
.14a0	8a		               txa
.14a1	48		               pha
.14a2	ad ee 1d	               lda  f5abutton
.14a5	48		               pha
.14a6	a9 92		               lda  #146
.14a8	8d 00 1e	               sta  f5abutton+18
.14ab	a9 01		               lda  #flashcol
.14ad	8d ee 1d	               sta  f5abutton
.14b0	a2 ee		               ldx  #<f5abutton
.14b2	a0 1d		               ldy  #>f5abutton
.14b4	20 12 20	               jsr  putscxy
.14b7	20 2c 11	               jsr  delay
.14ba	a9 12		               lda  #18
.14bc	8d 00 1e	               sta  f5abutton+18
.14bf	68		               pla
.14c0	8d ee 1d	               sta  f5abutton
.14c3	a2 ee		               ldx  #<f5abutton
.14c5	a0 1d		               ldy  #>f5abutton
.14c7	20 12 20	               jsr  putscxy
.14ca	68		               pla
.14cb	aa		               tax
.14cc	68		               pla
.14cd	28		               plp
.14ce	20 45 18	               jsr  clearchar
.14d1	20 42 0e	               jsr  drawbitmap
.14d4	4c 21 15	               jmp  out
.14d7			menub
.14d7	20 7a 20	               jsr  push
.14da	a2 c8		               ldx  #<blankmsg
.14dc	a0 18		               ldy  #>blankmsg
.14de	20 12 20	               jsr  putscxy
.14e1	a2 78		               ldx  #<f5b_msg
.14e3	a0 1a		               ldy  #>f5b_msg
.14e5	20 12 20	               jsr  putscxy
.14e8	20 b9 20	               jsr  pop
.14eb	08		               php
.14ec	48		               pha
.14ed	8a		               txa
.14ee	48		               pha
.14ef	ad c6 1e	               lda  f5bbutton
.14f2	48		               pha
.14f3	a9 92		               lda  #146
.14f5	8d d8 1e	               sta  f5bbutton+18
.14f8	a9 01		               lda  #flashcol
.14fa	8d c6 1e	               sta  f5bbutton
.14fd	a2 c6		               ldx  #<f5bbutton
.14ff	a0 1e		               ldy  #>f5bbutton
.1501	20 12 20	               jsr  putscxy
.1504	20 2c 11	               jsr  delay
.1507	a9 12		               lda  #18
.1509	8d d8 1e	               sta  f5bbutton+18
.150c	68		               pla
.150d	8d c6 1e	               sta  f5bbutton
.1510	a2 c6		               ldx  #<f5bbutton
.1512	a0 1e		               ldy  #>f5bbutton
.1514	20 12 20	               jsr  putscxy
.1517	68		               pla
.1518	aa		               tax
.1519	68		               pla
.151a	28		               plp
.151b	20 80 17	               jsr  scrollup
.151e	20 42 0e	               jsr  drawbitmap
.1521	68		out            pla
.1522	20 7a 20	               jsr  push
.1525	a2 c8		               ldx  #<blankmsg
.1527	a0 18		               ldy  #>blankmsg
.1529	20 12 20	               jsr  putscxy
.152c	a2 f4		               ldx  #<prompt_msg
.152e	a0 18		               ldy  #>prompt_msg
.1530	20 12 20	               jsr  putscxy
.1533	20 b9 20	               jsr  pop
.1536	60		               rts
.1537			f6action
.1537	48		               pha
.1538	a9 00		               lda  #$0
.153a	8d c2 08	               sta  editmode
.153d	ad c3 08	               lda  fkeyset
.1540	d0 4d		               bne  menub
.1542	20 7a 20	               jsr  push
.1545	a2 c8		               ldx  #<blankmsg
.1547	a0 18		               ldy  #>blankmsg
.1549	20 12 20	               jsr  putscxy
.154c	a2 cb		               ldx  #<f6a_msg
.154e	a0 19		               ldy  #>f6a_msg
.1550	20 12 20	               jsr  putscxy
.1553	20 b9 20	               jsr  pop
.1556	08		               php
.1557	48		               pha
.1558	8a		               txa
.1559	48		               pha
.155a	ad 09 1e	               lda  f6abutton
.155d	48		               pha
.155e	a9 92		               lda  #146
.1560	8d 1b 1e	               sta  f6abutton+18
.1563	a9 01		               lda  #flashcol
.1565	8d 09 1e	               sta  f6abutton
.1568	a2 09		               ldx  #<f6abutton
.156a	a0 1e		               ldy  #>f6abutton
.156c	20 12 20	               jsr  putscxy
.156f	20 2c 11	               jsr  delay
.1572	a9 12		               lda  #18
.1574	8d 1b 1e	               sta  f6abutton+18
.1577	68		               pla
.1578	8d 09 1e	               sta  f6abutton
.157b	a2 09		               ldx  #<f6abutton
.157d	a0 1e		               ldy  #>f6abutton
.157f	20 12 20	               jsr  putscxy
.1582	68		               pla
.1583	aa		               tax
.1584	68		               pla
.1585	28		               plp
.1586	20 39 18	               jsr  fillchar
.1589	20 42 0e	               jsr  drawbitmap
.158c	4c d9 15	               jmp  out
.158f			menub
.158f	20 7a 20	               jsr  push
.1592	a2 c8		               ldx  #<blankmsg
.1594	a0 18		               ldy  #>blankmsg
.1596	20 12 20	               jsr  putscxy
.1599	a2 92		               ldx  #<f6b_msg
.159b	a0 1a		               ldy  #>f6b_msg
.159d	20 12 20	               jsr  putscxy
.15a0	20 b9 20	               jsr  pop
.15a3	08		               php
.15a4	48		               pha
.15a5	8a		               txa
.15a6	48		               pha
.15a7	ad e1 1e	               lda  f6bbutton
.15aa	48		               pha
.15ab	a9 92		               lda  #146
.15ad	8d f3 1e	               sta  f6bbutton+18
.15b0	a9 01		               lda  #flashcol
.15b2	8d e1 1e	               sta  f6bbutton
.15b5	a2 e1		               ldx  #<f6bbutton
.15b7	a0 1e		               ldy  #>f6bbutton
.15b9	20 12 20	               jsr  putscxy
.15bc	20 2c 11	               jsr  delay
.15bf	a9 12		               lda  #18
.15c1	8d f3 1e	               sta  f6bbutton+18
.15c4	68		               pla
.15c5	8d e1 1e	               sta  f6bbutton
.15c8	a2 e1		               ldx  #<f6bbutton
.15ca	a0 1e		               ldy  #>f6bbutton
.15cc	20 12 20	               jsr  putscxy
.15cf	68		               pla
.15d0	aa		               tax
.15d1	68		               pla
.15d2	28		               plp
.15d3	20 b8 17	               jsr  scrolldown
.15d6	20 42 0e	               jsr  drawbitmap
.15d9	68		out            pla
.15da	20 7a 20	               jsr  push
.15dd	a2 c8		               ldx  #<blankmsg
.15df	a0 18		               ldy  #>blankmsg
.15e1	20 12 20	               jsr  putscxy
.15e4	a2 f4		               ldx  #<prompt_msg
.15e6	a0 18		               ldy  #>prompt_msg
.15e8	20 12 20	               jsr  putscxy
.15eb	20 b9 20	               jsr  pop
.15ee	60		               rts
.15ef			f7action
.15ef	48		               pha
.15f0	a9 00		               lda  #$0
.15f2	8d c2 08	               sta  editmode
.15f5	ad c3 08	               lda  fkeyset
.15f8	d0 4d		               bne  menub
.15fa	20 7a 20	               jsr  push
.15fd	a2 c8		               ldx  #<blankmsg
.15ff	a0 18		               ldy  #>blankmsg
.1601	20 12 20	               jsr  putscxy
.1604	a2 e8		               ldx  #<f7a_msg
.1606	a0 19		               ldy  #>f7a_msg
.1608	20 12 20	               jsr  putscxy
.160b	20 b9 20	               jsr  pop
.160e	08		               php
.160f	48		               pha
.1610	8a		               txa
.1611	48		               pha
.1612	ad 24 1e	               lda  f7abutton
.1615	48		               pha
.1616	a9 92		               lda  #146
.1618	8d 36 1e	               sta  f7abutton+18
.161b	a9 01		               lda  #flashcol
.161d	8d 24 1e	               sta  f7abutton
.1620	a2 24		               ldx  #<f7abutton
.1622	a0 1e		               ldy  #>f7abutton
.1624	20 12 20	               jsr  putscxy
.1627	20 2c 11	               jsr  delay
.162a	a9 12		               lda  #18
.162c	8d 36 1e	               sta  f7abutton+18
.162f	68		               pla
.1630	8d 24 1e	               sta  f7abutton
.1633	a2 24		               ldx  #<f7abutton
.1635	a0 1e		               ldy  #>f7abutton
.1637	20 12 20	               jsr  putscxy
.163a	68		               pla
.163b	aa		               tax
.163c	68		               pla
.163d	28		               plp
.163e	20 15 0f	               jsr  copycharset
.1641	20 42 0e	               jsr  drawbitmap
.1644	4c 96 16	               jmp  out
.1647	a9 00		menub          lda  #$0
.1649	8d c2 08	               sta  editmode
.164c	20 7a 20	               jsr  push
.164f	a2 c8		               ldx  #<blankmsg
.1651	a0 18		               ldy  #>blankmsg
.1653	20 12 20	               jsr  putscxy
.1656	a2 ab		               ldx  #<f7b_msg
.1658	a0 1a		               ldy  #>f7b_msg
.165a	20 12 20	               jsr  putscxy
.165d	20 b9 20	               jsr  pop
.1660	08		               php
.1661	48		               pha
.1662	8a		               txa
.1663	48		               pha
.1664	ad fc 1e	               lda  f7bbutton
.1667	48		               pha
.1668	a9 92		               lda  #146
.166a	8d 0e 1f	               sta  f7bbutton+18
.166d	a9 01		               lda  #flashcol
.166f	8d fc 1e	               sta  f7bbutton
.1672	a2 fc		               ldx  #<f7bbutton
.1674	a0 1e		               ldy  #>f7bbutton
.1676	20 12 20	               jsr  putscxy
.1679	20 2c 11	               jsr  delay
.167c	a9 12		               lda  #18
.167e	8d 0e 1f	               sta  f7bbutton+18
.1681	68		               pla
.1682	8d fc 1e	               sta  f7bbutton
.1685	a2 fc		               ldx  #<f7bbutton
.1687	a0 1e		               ldy  #>f7bbutton
.1689	20 12 20	               jsr  putscxy
.168c	68		               pla
.168d	aa		               tax
.168e	68		               pla
.168f	28		               plp
.1690	20 60 17	               jsr  reverse
.1693	20 42 0e	               jsr  drawbitmap
.1696	68		out            pla
.1697	20 7a 20	               jsr  push
.169a	a2 c8		               ldx  #<blankmsg
.169c	a0 18		               ldy  #>blankmsg
.169e	20 12 20	               jsr  putscxy
.16a1	a2 f4		               ldx  #<prompt_msg
.16a3	a0 18		               ldy  #>prompt_msg
.16a5	20 12 20	               jsr  putscxy
.16a8	20 b9 20	               jsr  pop
.16ab	60		               rts
.16ac			f8action
.16ac	48		               pha
.16ad	a9 00		               lda  #$0
.16af	8d c2 08	               sta  editmode
.16b2	ad c3 08	               lda  fkeyset
.16b5	d0 47		               bne  menub
.16b7	20 7a 20	               jsr  push
.16ba	a2 c8		               ldx  #<blankmsg
.16bc	a0 18		               ldy  #>blankmsg
.16be	20 12 20	               jsr  putscxy
.16c1	a2 e7		               ldx  #<menub_msg
.16c3	a0 1a		               ldy  #>menub_msg
.16c5	20 12 20	               jsr  putscxy
.16c8	20 b9 20	               jsr  pop
.16cb	08		               php
.16cc	48		               pha
.16cd	8a		               txa
.16ce	48		               pha
.16cf	ad 3f 1e	               lda  f8abutton
.16d2	48		               pha
.16d3	a9 92		               lda  #146
.16d5	8d 51 1e	               sta  f8abutton+18
.16d8	a9 01		               lda  #flashcol
.16da	8d 3f 1e	               sta  f8abutton
.16dd	a2 3f		               ldx  #<f8abutton
.16df	a0 1e		               ldy  #>f8abutton
.16e1	20 12 20	               jsr  putscxy
.16e4	20 2c 11	               jsr  delay
.16e7	a9 12		               lda  #18
.16e9	8d 51 1e	               sta  f8abutton+18
.16ec	68		               pla
.16ed	8d 3f 1e	               sta  f8abutton
.16f0	a2 3f		               ldx  #<f8abutton
.16f2	a0 1e		               ldy  #>f8abutton
.16f4	20 12 20	               jsr  putscxy
.16f7	68		               pla
.16f8	aa		               tax
.16f9	68		               pla
.16fa	28		               plp
.16fb	4c 42 17	               jmp  swapit
.16fe			menub
.16fe	20 7a 20	               jsr  push
.1701	a2 c8		               ldx  #<blankmsg
.1703	a0 18		               ldy  #>blankmsg
.1705	20 12 20	               jsr  putscxy
.1708	a2 c2		               ldx  #<menua_msg
.170a	a0 1a		               ldy  #>menua_msg
.170c	20 12 20	               jsr  putscxy
.170f	20 b9 20	               jsr  pop
.1712	08		               php
.1713	48		               pha
.1714	8a		               txa
.1715	48		               pha
.1716	ad 17 1f	               lda  f8bbutton
.1719	48		               pha
.171a	a9 92		               lda  #146
.171c	8d 29 1f	               sta  f8bbutton+18
.171f	a9 01		               lda  #flashcol
.1721	8d 17 1f	               sta  f8bbutton
.1724	a2 17		               ldx  #<f8bbutton
.1726	a0 1f		               ldy  #>f8bbutton
.1728	20 12 20	               jsr  putscxy
.172b	20 2c 11	               jsr  delay
.172e	a9 12		               lda  #18
.1730	8d 29 1f	               sta  f8bbutton+18
.1733	68		               pla
.1734	8d 17 1f	               sta  f8bbutton
.1737	a2 17		               ldx  #<f8bbutton
.1739	a0 1f		               ldy  #>f8bbutton
.173b	20 12 20	               jsr  putscxy
.173e	68		               pla
.173f	aa		               tax
.1740	68		               pla
.1741	28		               plp
.1742	49 ff		swapit         eor  #$ff
.1744	8d c3 08	               sta  fkeyset
.1747	20 b2 0f	               jsr  drawfkeys
.174a	68		               pla
.174b	20 7a 20	               jsr  push
.174e	a2 c8		               ldx  #<blankmsg
.1750	a0 18		               ldy  #>blankmsg
.1752	20 12 20	               jsr  putscxy
.1755	a2 f4		               ldx  #<prompt_msg
.1757	a0 18		               ldy  #>prompt_msg
.1759	20 12 20	               jsr  putscxy
.175c	20 b9 20	               jsr  pop
.175f	60		               rts
.1760			reverse
.1760	20 7a 20	               jsr  push
.1763	48		               pha
.1764	ad c8 08	               lda  mapaddr
.1767	85 fd		               sta  $fd
.1769	ad c9 08	               lda  mapaddr+1
.176c	85 fe		               sta  $fe
.176e	68		               pla
.176f	a0 00		               ldy  #$00
.1771	b1 fd		again          lda  (zpage2),y
.1773	49 ff		               eor  #$ff
.1775	91 fd		               sta  (zpage2),y
.1777	c8		               iny
.1778	c0 08		               cpy  #$08
.177a	d0 f5		               bne  again
.177c	20 b9 20	               jsr  pop
.177f	60		               rts
.1780			scrollup
.1780	20 7a 20	               jsr  push
.1783	48		               pha
.1784	ad c8 08	               lda  mapaddr
.1787	85 fb		               sta  $fb
.1789	ad c9 08	               lda  mapaddr+1
.178c	85 fc		               sta  $fc
.178e	68		               pla
.178f	48		               pha
.1790	ad c8 08	               lda  mapaddr
.1793	85 fd		               sta  $fd
.1795	ad c9 08	               lda  mapaddr+1
.1798	85 fe		               sta  $fe
.179a	68		               pla
.179b	20 99 21	               jsr  inczp2
.179e	a0 00		               ldy  #$00
.17a0	b1 fb		               lda  (zpage1),y
.17a2	8d b7 17	               sta  tmpbyte
.17a5	b1 fd		again          lda  (zpage2),y
.17a7	91 fb		               sta  (zpage1),y
.17a9	c8		               iny
.17aa	c0 07		               cpy  #$07
.17ac	d0 f7		               bne  again
.17ae	ad b7 17	               lda  tmpbyte
.17b1	91 fb		               sta  (zpage1),y
.17b3	20 b9 20	               jsr  pop
.17b6	60		               rts
>17b7	00		tmpbyte        .byte     $00
.17b8			scrolldown
.17b8	20 7a 20	               jsr  push
.17bb	48		               pha
.17bc	ad c8 08	               lda  mapaddr
.17bf	85 fb		               sta  $fb
.17c1	ad c9 08	               lda  mapaddr+1
.17c4	85 fc		               sta  $fc
.17c6	68		               pla
.17c7	48		               pha
.17c8	ad c8 08	               lda  mapaddr
.17cb	85 fd		               sta  $fd
.17cd	ad c9 08	               lda  mapaddr+1
.17d0	85 fe		               sta  $fe
.17d2	68		               pla
.17d3	20 99 21	               jsr  inczp2
.17d6	a0 07		               ldy  #$07                ;xxxxxxxx zpage1
.17d8	b1 fb		               lda  (zpage1),y          ;xxxxxxxx zpage2
.17da	8d f1 17	               sta  tmpbyte             ;xxxxxxxx
.17dd	88		again          dey                      ;xxxxxxxx
.17de	b1 fb		               lda  (zpage1),y          ;xxxxxxxx
.17e0	91 fd		               sta  (zpage2),y          ;xxxxxxxx
.17e2	c0 00		               cpy  #$00                ;xxxxxxxx
.17e4	d0 f7		               bne  again               ;xxxxxxxx
.17e6	a0 00		               ldy  #$00
.17e8	ad f1 17	               lda  tmpbyte
.17eb	91 fb		               sta  (zpage1),y
.17ed	20 b9 20	               jsr  pop
.17f0	60		               rts
>17f1	00		tmpbyte        .byte     $00
.17f2			scrollright
.17f2	20 7a 20	               jsr  push
.17f5	48		               pha
.17f6	ad c8 08	               lda  mapaddr
.17f9	85 fb		               sta  $fb
.17fb	ad c9 08	               lda  mapaddr+1
.17fe	85 fc		               sta  $fc
.1800	68		               pla
.1801	a0 00		               ldy  #$00
.1803	b1 fb		again          lda  (zpage1),y
.1805	18		               clc
.1806	6a		               ror
.1807	90 03		               bcc  zero
.1809	18		               clc
.180a	69 80		one            adc  #$80
.180c	91 fb		zero           sta  (zpage1),y
.180e	c8		               iny
.180f	c0 08		               cpy  #$08
.1811	d0 f0		               bne  again
.1813	20 b9 20	               jsr  pop
.1816	60		               rts
.1817			scrollleft
.1817	20 7a 20	               jsr  push
.181a	48		               pha
.181b	ad c8 08	               lda  mapaddr
.181e	85 fb		               sta  $fb
.1820	ad c9 08	               lda  mapaddr+1
.1823	85 fc		               sta  $fc
.1825	68		               pla
.1826	a0 00		               ldy  #$00
.1828	b1 fb		again          lda  (zpage1),y
.182a	18		               clc
.182b	2a		               rol
.182c	69 00		               adc  #$00
.182e	91 fb		               sta  (zpage1),y
.1830	c8		               iny
.1831	c0 08		               cpy  #$08
.1833	d0 f3		               bne  again
.1835	20 b9 20	               jsr  pop
.1838	60		               rts
.1839			fillchar
.1839	20 7a 20	               jsr  push
.183c	a9 ff		               lda  #$ff
.183e	20 51 18	               jsr  allsame
.1841	20 b9 20	               jsr  pop
.1844	60		               rts
.1845			clearchar
.1845	20 7a 20	               jsr  push
.1848	a9 00		               lda  #$00
.184a	20 51 18	               jsr  allsame
.184d	20 b9 20	               jsr  pop
.1850	60		               rts
.1851			allsame
.1851	48		               pha
.1852	ad c8 08	               lda  mapaddr
.1855	85 fd		               sta  $fd
.1857	ad c9 08	               lda  mapaddr+1
.185a	85 fe		               sta  $fe
.185c	68		               pla
.185d	a0 00		               ldy  #$00
.185f	91 fd		again          sta  (zpage2),y
.1861	c8		               iny
.1862	c0 08		               cpy  #$08
.1864	d0 f9		               bne  again
.1866	60		               rts
.1867			fliphorz
.1867	20 7a 20	               jsr  push
.186a	48		               pha
.186b	ad c8 08	               lda  mapaddr
.186e	85 fd		               sta  $fd
.1870	ad c9 08	               lda  mapaddr+1
.1873	85 fe		               sta  $fe
.1875	68		               pla
.1876	a0 00		               ldy  #$00
.1878	b1 fd		nextbyte       lda  (zpage2),y
.187a	a2 00		               ldx  #$00
.187c	2a		rolagain       rol
.187d	6e 93 18	               ror  tmpbyte
.1880	e8		               inx
.1881	e0 08		               cpx  #$08
.1883	30 f7		               bmi  rolagain
.1885	ad 93 18	               lda  tmpbyte
.1888	91 fd		               sta  (zpage2),y
.188a	c8		               iny
.188b	c0 08		               cpy  #$08
.188d	30 e9		               bmi  nextbyte
.188f	20 b9 20	               jsr  pop
.1892	60		               rts
>1893	00		tmpbyte        .byte     $00
.1894			flipvert
.1894	20 7a 20	               jsr  push
.1897	48		               pha
.1898	ad c8 08	               lda  mapaddr
.189b	85 fd		               sta  $fd
.189d	ad c9 08	               lda  mapaddr+1
.18a0	85 fe		               sta  $fe
.18a2	68		               pla
.18a3	a0 00		               ldy  #$00
.18a5	b1 fd		tostack        lda  (zpage2),y
.18a7	48		               pha
.18a8	c8		               iny
.18a9	c0 08		               cpy  #$08
.18ab	d0 f8		               bne  tostack
.18ad	a0 00		               ldy  #$00
.18af	68		fromstack      pla
.18b0	91 fd		               sta  (zpage2),y
.18b2	c8		               iny
.18b3	c0 08		               cpy  #$08
.18b5	d0 f8		               bne  fromstack
.18b7	20 b9 20	               jsr  pop
.18ba	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: messages_fr.asm

>18bb	0a 01 05	editor_msg     .byte vrose,1,5
>18be	5b 45 44 49	               .null     "[editeur]"
>18c2	54 45 55 52 5d 00
>18c8	03 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>18cc	20 20 20 20	               .null     "                                       "
>18d0	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>18e0	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>18f0	20 20 20 00
>18f4	03 00 05 92	prompt_msg     .byte     mesgcol,0,5,146
>18f8	20 55 54 49	               .null     " utilisez les clefs de fonction :"
>18fc	4c 49 53 45 5a 20 4c 45 53 20 43 4c 45 46 53 20
>190c	44 45 20 46 4f 4e 43 54 49 4f 4e 20 3a 00
.191a			f1a_msg
>191a	03 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>191e	20 4d 4f 44	               .null     " mode edit: chr$(   )",146
>1922	45 20 45 44 49 54 3a 20 43 48 52 24 28 20 20 20
>1932	29 92 00
.1935			f2a_msg
>1935	03 00 05	copy_msg       .byte     mesgcol,0,5
>1938	20 45 4e 54	               .null     " entez le character a copier:"
>193c	45 5a 20 4c 45 20 43 48 41 52 41 43 54 45 52 20
>194c	41 20 43 4f 50 49 45 52 3a 00
.1956			f3a_msg
>1956	03 00 05 92	save_msg       .byte     mesgcol,0,5,146
>195a	20 53 41 55	               .null     " sauver sur cassette or disque? (c/d): "
>195e	56 45 52 20 53 55 52 20 43 41 53 53 45 54 54 45
>196e	20 4f 52 20 44 49 53 51 55 45 3f 20 28 43 2f 44
>197e	29 3a 20 00
.1982			f4a_msg
>1982	03 00 05 92	load_msg       .byte     mesgcol,0,5,146
>1986	20 43 48 41	               .null     " charger d'une cassette ou disk? (c/d): "
>198a	52 47 45 52 20 44 27 55 4e 45 20 43 41 53 53 45
>199a	54 54 45 20 4f 55 20 44 49 53 4b 3f 20 28 43 2f
>19aa	44 29 3a 20 00
.19af			f5a_msg
>19af	03 00 05	clear_msg      .byte     mesgcol,0,5
>19b2	20 45 46 46	               .null     " effacer char: chr$(   )"
>19b6	41 43 45 52 20 43 48 41 52 3a 20 43 48 52 24 28
>19c6	20 20 20 29 00
.19cb			f6a_msg
>19cb	03 00 05	fill_msg       .byte     mesgcol,0,5
>19ce	20 52 45 4d	               .null     " remplir char:  chr$(   )"
>19d2	50 4c 49 52 20 43 48 41 52 3a 20 20 43 48 52 24
>19e2	28 20 20 20 29 00
.19e8			f7a_msg
>19e8	03 00 05	work_msg       .byte     mesgcol,0,5
>19eb	20 52 45 43	               .null     " recuperer les caracteres."
>19ef	55 50 45 52 45 52 20 4c 45 53 20 43 41 52 41 43
>19ff	54 45 52 45 53 2e 00
.1a06			f1b_msg
>1a06	03 00 05	invr_msg       .byte     mesgcol,0,5
>1a09	20 42 41 53	               .null     " basculer verticalement:"
>1a0d	43 55 4c 45 52 20 56 45 52 54 49 43 41 4c 45 4d
>1a1d	45 4e 54 3a 00
.1a22			f2b_msg
>1a22	03 00 05	flip_msg       .byte     mesgcol,0,5
>1a25	20 42 41 53	               .null     " basculer horizontalement:"
>1a29	43 55 4c 45 52 20 48 4f 52 49 5a 4f 4e 54 41 4c
>1a39	45 4d 45 4e 54 3a 00
.1a40			f3b_msg
>1a40	03 00 05	scrollr_msg    .byte     mesgcol,0,5
>1a43	20 44 45 46	               .null     " defiler vers la droite:"
>1a47	49 4c 45 52 20 56 45 52 53 20 4c 41 20 44 52 4f
>1a57	49 54 45 3a 00
.1a5c			f4b_msg
>1a5c	03 00 05	scrolll_msg    .byte     mesgcol,0,5
>1a5f	20 44 45 46	               .null     " defiler vers la gauche:"
>1a63	49 4c 45 52 20 56 45 52 53 20 4c 41 20 47 41 55
>1a73	43 48 45 3a 00
.1a78			f5b_msg
>1a78	03 00 05	scrollu_msg    .byte     mesgcol,0,5
>1a7b	20 44 45 46	               .null     " defiler vers le haut:"
>1a7f	49 4c 45 52 20 56 45 52 53 20 4c 45 20 48 41 55
>1a8f	54 3a 00
.1a92			f6b_msg
>1a92	03 00 05	scrolld_msg    .byte     mesgcol,0,5
>1a95	20 44 45 46	               .null     " defiler vers le bas:"
>1a99	49 4c 45 52 20 56 45 52 53 20 4c 45 20 42 41 53
>1aa9	3a 00
.1aab			f7b_msg
>1aab	03 00 05	rvrs_msg       .byte     mesgcol,0,5
>1aae	20 52 45 56	               .null     " reverse character:"
>1ab2	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
>1ac2	03 00 05	menua_msg      .byte     mesgcol,0,5
>1ac5	20 56 4f 55	               .null     " vous etes dirige vers le menu 1."
>1ac9	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1ad9	52 53 20 4c 45 20 4d 45 4e 55 20 31 2e 00
>1ae7	03 00 05	menub_msg      .byte     mesgcol,0,5
>1aea	20 56 4f 55	               .null     " vous etes dirige vers le menu 2."
>1aee	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1afe	52 53 20 4c 45 20 4d 45 4e 55 20 32 2e 00
>1b0c	07 00 05	copychar_msg   .byte     vjaune,0,5
>1b0f	20 45 4e 54	               .null     " entrez le caractera a copier (?).",157,157,157
>1b13	52 45 5a 20 4c 45 20 43 41 52 41 43 54 45 52 41
>1b23	20 41 20 43 4f 50 49 45 52 20 28 3f 29 2e 9d 9d
>1b33	9d 00
>1b35	07 00 05	fname_msg      .byte     vjaune,0,5
>1b38	20 4e 4f 4d	               .null     " nom du fichier (6 lettres): ",$a4,$a4,$a4,$a4,$a4,$a4,".chr",157,157,157,157,157,157,157,157,157,157
>1b3c	20 44 55 20 46 49 43 48 49 45 52 20 28 36 20 4c
>1b4c	45 54 54 52 45 53 29 3a 20 a4 a4 a4 a4 a4 a4 2e
>1b5c	43 48 52 9d 9d 9d 9d 9d 9d 9d 9d 9d 9d 00
>1b6a	0e 15 18 12	quit_msg       .byte     vblue1,21,24,18
>1b6e	43 54 52 4c	               .text     "ctrl-x",146
>1b72	2d 58 92
>1b75	2d 51 55 49	               .null     "-quitter."
>1b79	54 54 45 52 2e 00
.1b7f			menu_msg
>1b7f	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>1b83	43 54 52 4c	               .text     "ctrl-x",146
>1b87	2d 58 92
>1b8a	20 41 55 20	               .null     " au menu."
>1b8e	4d 45 4e 55 2e 00
>1b94	07 04 06 12	whoami0        .byte     whoamicol,4,6,18
>1b98	20 20 20 20	               .null     "                               ",146
>1b9c	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1bac	20 20 20 20 20 20 20 20 20 20 20 92 00
>1bb9	07 04 07 12	whoami1        .byte     whoamicol,4,7,18
>1bbd	20 20 20 20	               .null     "       ",146," c h a r e d i t ",18,"       ",146
>1bc1	20 20 20 92 20 43 20 48 20 41 20 52 20 45 20 44
>1bd1	20 49 20 54 20 12 20 20 20 20 20 20 20 92 00
>1be0	07 04 08 12	whoami2        .byte     whoamicol,4,8,18
>1be4	20 20 20 20	               .null     "                               ",146
>1be8	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1bf8	20 20 20 20 20 20 20 20 20 20 20 92 00
>1c05	07 04 09 12	whoami3        .byte     whoamicol,4,9,18
>1c09	20 20 20 20	               .null     "    inspire de john heilborn   ",146
>1c0d	49 4e 53 50 49 52 45 20 44 45 20 4a 4f 48 4e 20
>1c1d	48 45 49 4c 42 4f 52 4e 20 20 20 92 00
>1c2a	07 04 0a 12	whoami4        .byte     whoamicol,4,10,18
>1c2e	20 20 20 20	               .null     "      isbn: 0-942386-29-9      ",146
>1c32	20 20 49 53 42 4e 3a 20 30 2d 39 34 32 33 38 36
>1c42	2d 32 39 2d 39 20 20 20 20 20 20 92 00
>1c4f	07 04 0b 12	whoami5        .byte     whoamicol,4,11,18
>1c53	20 20 20 20	               .null     "                               ",146
>1c57	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1c67	20 20 20 20 20 20 20 20 20 20 20 92 00
>1c74	07 04 0c 12	whoami6        .byte     whoamicol,4,12,18
>1c78	20 20 20 20	               .null     "      code assembleur par      ",146
>1c7c	20 20 43 4f 44 45 20 41 53 53 45 4d 42 4c 45 55
>1c8c	52 20 50 41 52 20 20 20 20 20 20 92 00
>1c99	07 04 0d 12	whoami7        .byte     whoamicol,4,13,18
>1c9d	20 44 41 4e	               .null     " daniel lafrance quebec/canada ",146
>1ca1	49 45 4c 20 4c 41 46 52 41 4e 43 45 20 51 55 45
>1cb1	42 45 43 2f 43 41 4e 41 44 41 20 92 00
>1cbe	07 04 0e 12	whoami8        .byte     whoamicol,4,14,18
>1cc2	20 20 20 20	               .null     "    version:",version,"    ",146
>1cc6	56 45 52 53 49 4f 4e 3a 32 30 32 33 31 31 31 36
>1cd6	2d 31 30 30 34 30 30 20 20 20 20 92 00
>1ce3	07 04 0f 12	whoami9        .byte     whoamicol,4,15,18
>1ce7	20 20 20 20	               .null     "                               ",146
>1ceb	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1cfb	20 20 20 20 20 20 20 20 20 20 20 92 00
>1d08	03 06 10 14	bye_msg        .byte     vcyan,6,16,20
>1d0c	20 20 20 20	               .null     "      bonjour et merci      ",146
>1d10	20 20 42 4f 4e 4a 4f 55 52 20 45 54 20 4d 45 52
>1d20	43 49 20 20 20 20 20 20 92 00
>1d2a	0d 05 18 12	any_msg        .byte     vvert1,5,24,18
>1d2e	20 41 50 50	               .null     " appuyez une cle pour basic ",146
>1d32	55 59 45 5a 20 55 4e 45 20 43 4c 45 20 50 4f 55
>1d42	52 20 42 41 53 49 43 20 92 00
>1d4c	03 12 08	titremenu1     .byte     menu1col1,fkeyleft,f1top-2       ;133
>1d4f	12 20 4a 45	               .null     18," jeu de fonctions #1 ",146
>1d53	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>1d63	31 20 92 00
>1d67	0d 12 08	titremenu2     .byte     menu2col1,fkeyleft,f1top-2       ;133
>1d6a	12 20 4a 45	               .null     18," jeu de fonctions #2 ",146
>1d6e	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>1d7e	32 20 92 00
>1d82	03 12 0a	f1abutton      .byte     menu1col1,fkeyleft,f1top       ;133
>1d85	45 44 49 54	               .text     "editer carac..."
>1d89	45 52 20 43 41 52 41 43 2e 2e 2e
>1d94	12		               .byte     18             ; position 15
>1d95	a9 20 46 31	               .null     $a9," f1 ",223,146
>1d99	20 df 92 00
>1d9d	0e 12 0b	f2abutton      .byte     menu1col2,fkeyleft,f1top+1     ;138
>1da0	43 4f 50 59	               .text     "copy du car...."
>1da4	20 44 55 20 43 41 52 2e 2e 2e 2e
>1daf	12		               .byte     18   ; position 15
>1db0	20 20 46 32	               .null     "  f2  ",146
>1db4	20 20 92 00
>1db8	03 12 0d	f3abutton      .byte     menu1col1,fkeyleft,f1top+3     ;137
>1dbb	53 41 56 45	               .text     "savegarder sur."
>1dbf	47 41 52 44 45 52 20 53 55 52 2e
>1dca	12		               .byte     18            ; position 15
>1dcb	a9 20 46 33	               .null     $a9," f3 ",223,146
>1dcf	20 df 92 00
>1dd3	0e 12 0e	f4abutton      .byte     menu1col2,fkeyleft,f1top+4     ;134
>1dd6	43 48 41 52	               .text     "charger de....."
>1dda	47 45 52 20 44 45 2e 2e 2e 2e 2e
>1de5	12		               .byte     18             ; position 15
>1de6	20 20 46 34	               .null     "  f4  ",146
>1dea	20 20 92 00
>1dee	03 12 10	f5abutton      .byte     menu1col1,fkeyleft,f1top+6     ;135
>1df1	45 46 46 41	               .text     "effacer........"
>1df5	43 45 52 2e 2e 2e 2e 2e 2e 2e 2e
>1e00	12		               .byte     18             ; position 15
>1e01	a9 20 46 35	               .null     $a9," f5 ",223,146
>1e05	20 df 92 00
>1e09	0e 12 11	f6abutton      .byte     menu1col2,fkeyleft,f1top+7    ;139
>1e0c	52 45 4d 50	               .text     "remplir........"
>1e10	4c 49 52 2e 2e 2e 2e 2e 2e 2e 2e
>1e1b	12		               .byte     18             ; position 15
>1e1c	20 20 46 36	               .null     "  f6  ",146
>1e20	20 20 92 00
>1e24	03 12 13	f7abutton      .byte     menu1col1,fkeyleft,f1top+9    ;136
>1e27	52 45 43 55	               .text     "recuperer rom.."
>1e2b	50 45 52 45 52 20 52 4f 4d 2e 2e
>1e36	12		               .byte     18             ; position 15
>1e37	a9 20 46 37	               .null     $a9," f7 ",223,146
>1e3b	20 df 92 00
>1e3f	0e 12 14	f8abutton      .byte     menu1col2,fkeyleft,f1top+10
>1e42	41 46 46 49	               .text     "afficher menu2."
>1e46	43 48 45 52 20 4d 45 4e 55 32 2e
>1e51	12		               .byte     18             ; position 15
>1e52	20 20 46 38	               .null     "  f8  ", 146
>1e56	20 20 92 00
>1e5a	0d 12 0a	f1bbutton      .byte     menu2col1,fkeyleft,f1top
>1e5d	42 41 53 43	               .text     "basculer vert.."
>1e61	55 4c 45 52 20 56 45 52 54 2e 2e
>1e6c	12		               .byte     18             ; position 15
>1e6d	a9 20 46 31	               .null     $a9," f1 ",223,146
>1e71	20 df 92 00
>1e75	05 12 0b	f2bbutton      .byte     menu2col2,fkeyleft,f1top+1
>1e78	42 41 53 43	               .text     "basculer horz.."
>1e7c	55 4c 45 52 20 48 4f 52 5a 2e 2e
>1e87	12		               .byte     18             ; position 15
>1e88	20 20 46 32	               .null     "  f2  ",146
>1e8c	20 20 92 00
>1e90	0d 12 0d	f3bbutton      .byte     menu2col1,fkeyleft,f1top+3
>1e93	44 45 46 49	               .text     "defil. droite.."
>1e97	4c 2e 20 44 52 4f 49 54 45 2e 2e
>1ea2	12		               .byte     18             ; position 15
>1ea3	a9 20 46 33	               .null     $a9," f3 ",223,146
>1ea7	20 df 92 00
>1eab	05 12 0e	f4bbutton      .byte     menu2col2,fkeyleft,f1top+4
>1eae	44 45 46 49	               .text     "defil. gauche.."
>1eb2	4c 2e 20 47 41 55 43 48 45 2e 2e
>1ebd	12		               .byte     18             ; position 15
>1ebe	20 20 46 34	               .null     "  f4  ",146
>1ec2	20 20 92 00
>1ec6	0d 12 10	f5bbutton      .byte     menu2col1,fkeyleft,f1top+6
>1ec9	44 45 46 49	               .text     "defil. haut...."
>1ecd	4c 2e 20 48 41 55 54 2e 2e 2e 2e
>1ed8	12		               .byte     18             ; position 15
>1ed9	a9 20 46 35	               .null     $a9," f5 ",223,146
>1edd	20 df 92 00
>1ee1	05 12 11	f6bbutton      .byte     menu2col2,fkeyleft,f1top+7
>1ee4	44 45 46 49	               .text     "defil. bas....."
>1ee8	4c 2e 20 42 41 53 2e 2e 2e 2e 2e
>1ef3	12		               .byte     18             ; position 15
>1ef4	20 20 46 36	               .null     "  f6  ",146
>1ef8	20 20 92 00
>1efc	0d 12 13	f7bbutton      .byte     menu2col1,fkeyleft,f1top+9
>1eff	49 4e 56 45	               .text     "inverser bits.."
>1f03	52 53 45 52 20 42 49 54 53 2e 2e
>1f0e	12		               .byte     18             ; position 15
>1f0f	a9 20 46 37	               .null     $a9," f7 ",223,146
>1f13	20 df 92 00
>1f17	05 12 14	f8bbutton      .byte     menu2col2,fkeyleft,f1top+10
>1f1a	41 46 46 49	               .text     "afficher menu1."
>1f1e	43 48 45 52 20 4d 45 4e 55 31 2e
>1f29	12		               .byte     18             ; position 15
>1f2a	20 20 46 38	               .null     "  f8  ", 146
>1f2e	20 20 92 00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.1f32			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.1f32			screendis
.1f32	08		               php
.1f33	48		               pha
.1f34	ad 11 d0	               lda  $d011
.1f37	29 ef		               and  #%11101111
.1f39	8d 11 d0	               sta  $d011
.1f3c	68		               pla
.1f3d	28		               plp
.1f3e	60		               rts
.1f3f			screenena
.1f3f	08		               php
.1f40	48		               pha
.1f41	ad 11 d0	               lda  $d011
.1f44	09 10		               ora  #%00010000
.1f46	8d 11 d0	               sta  $d011
.1f49	68		               pla
.1f4a	28		               plp
.1f4b	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.1f4c			scrmaninit
.1f4c	20 7a 20	               jsr  push
.1f4f	a9 06		               lda  #vbleu
.1f51	8d 21 d0	               sta  vicbackcol
.1f54	a9 05		               lda  #vvert
.1f56	8d 20 d0	               sta  vicbordcol
.1f59	a9 01		               lda  #vblanc
.1f5b	8d 86 02	               sta  bascol
.1f5e	ad 00 04	               lda  scrnram
.1f61	8d 00 04	               sta  scrnram
.1f64	20 6c 1f	               jsr  cls
.1f67	20 b9 20	               jsr  pop
.1f6a	60		               rts
>1f6b	8e		characterset   .byte b_uppercase
.1f6c			cls
.1f6c	08		               php
.1f6d	48		               pha
.1f6e	a9 93		               lda  #$93
.1f70	20 83 1f	               jsr  putch
.1f73	68		               pla
.1f74	28		               plp
.1f75	60		               rts
.1f76			putnch
.1f76	08		               php
.1f77	e0 00		               cpx  #$00
.1f79	f0 06		               beq  out
.1f7b	20 d2 ff	again          jsr  $ffd2
.1f7e	ca		               dex
.1f7f	d0 fa		               bne  again
.1f81	28		out            plp
.1f82	60		               rts
.1f83			putch
.1f83	08		               php
.1f84	20 d2 ff	               jsr  $ffd2
.1f87	28		               plp
.1f88	60		               rts
.1f89			puts
.1f89	20 7a 20	               jsr  push
.1f8c	86 fb		               stx  zpage1
.1f8e	84 fc		               sty  zpage1+1
.1f90	a0 00		               ldy  #0
.1f92	b1 fb		next           lda  (zpage1),y
.1f94	f0 09		               beq  exit
.1f96	20 83 1f	               jsr  putch
.1f99	20 81 21	               jsr  inczp1
.1f9c	4c 92 1f	               jmp  next
.1f9f	20 b9 20	exit           jsr  pop
.1fa2	60		               rts
.1fa3			gotoxy
.1fa3	08		               php
.1fa4	18		               clc
.1fa5	8a		               txa
.1fa6	48		               pha
.1fa7	98		               tya
.1fa8	aa		               tax
.1fa9	68		               pla
.1faa	a8		               tay
.1fab	20 f0 ff	               jsr  kplot
.1fae	28		               plp
.1faf	60		               rts
.1fb0			cursor
=$0286			bascol    =    $0286
.1fb0	08		               php
.1fb1	48		               pha
.1fb2	90 12		               bcc  restore
.1fb4	20 f0 ff	               jsr  kplot
.1fb7	8c d8 1f	               sty  cx
.1fba	8e d9 1f	               stx  cy
.1fbd	ad 86 02	               lda  bascol
.1fc0	8d da 1f	               sta  bcol
.1fc3	4c d5 1f	               jmp  out
.1fc6	ae d9 1f	restore        ldx  cy
.1fc9	ac d8 1f	               ldy  cx
.1fcc	20 f0 ff	               jsr  kplot
.1fcf	ad da 1f	               lda  bcol
.1fd2	8d 86 02	               sta  bascol
.1fd5	68		out            pla
.1fd6	28		               plp
.1fd7	60		               rts
>1fd8	00		cx   .byte     $00
>1fd9	00		cy   .byte     $00
>1fda	00		bcol .byte     $00
.1fdb			cursave
.1fdb	08		               php
.1fdc	38		               sec
.1fdd	20 b0 1f	               jsr  cursor
.1fe0	28		               plp
.1fe1	60		               rts
.1fe2			curput
.1fe2	08		               php
.1fe3	18		               clc
.1fe4	20 b0 1f	               jsr  cursor
.1fe7	28		               plp
.1fe8	60		               rts
.1fe9			putsxy
.1fe9	20 7a 20	               jsr  push
.1fec	86 fb		               stx  zpage1
.1fee	84 fc		               sty  zpage1+1
.1ff0	a0 00		               ldy  #$00
.1ff2	b1 fb		               lda  (zpage1),y
.1ff4	aa		               tax
.1ff5	20 81 21	               jsr  inczp1
.1ff8	b1 fb		               lda  (zpage1),y
.1ffa	a8		               tay
.1ffb	20 a3 1f	               jsr  gotoxy
.1ffe	20 81 21	               jsr  inczp1
.2001	a6 fb		               ldx  zpage1
.2003	a4 fc		               ldy  zpage1+1
.2005	20 89 1f	               jsr  puts
.2008	20 b9 20	               jsr  pop
.200b	60		               rts
>200c	00 00		straddr   .word     $00
>200e	00		px        .byte     $00
>200f	00		py        .byte     $00
>2010	00 00		zp1       .word     $00
.2012			putscxy
.2012	20 7a 20	               jsr  push
.2015	84 fc		               sty  zpage1+1
.2017	86 fb		               stx  zpage1
.2019	ad 86 02	               lda  bascol
.201c	8d 3c 20	               sta  bc
.201f	a0 00		               ldy #$00
.2021	b1 fb		               lda  (zpage1),y
.2023	8d 86 02	               sta  bascol
.2026	20 81 21	               jsr  inczp1
.2029	a6 fb		               ldx  zpage1
.202b	a4 fc		               ldy  zpage1+1
.202d	20 e9 1f	               jsr  putsxy
.2030	ad 3c 20	               lda  bc
.2033	8d 86 02	               sta  bascol
.2036	20 b9 20	               jsr  pop
.2039	60		               rts
>203a	00 00		straddr  .word      $00
>203c	00		bc       .byte      $00
>203d	00 00		zp1      .word      $00
.203f			putrahex
.203f	08		               php
.2040	48		               pha
.2041	20 97 22	               jsr  a2hex
.2044	a9 36		               lda  #<a2hexstr
.2046	a0 22		               ldy  #>a2hexstr
.2048	20 89 1f	               jsr  puts
.204b	68		               pla
.204c	28		               plp
.204d	60		               rts
.204e			kputrahexxy
.204e			bputrahexxy
.204e			putrahexxy
.204e	08		               php
.204f	20 97 22	               jsr  a2hex
.2052	a9 33		               lda  #<a2hexpos
.2054	a0 22		               ldy  #>a2hexpos
.2056	20 e9 1f	               jsr  putsxy
.2059	68		               pla
.205a	28		               plp
.205b	60		               rts
.205c			putrahexcxy
.205c	08		               php
.205d	20 97 22	               jsr  a2hex
.2060	a9 33		               lda  #<a2hexpos
.2062	a0 22		               ldy  #>a2hexpos
.2064	20 12 20	               jsr  putscxy
.2067	68		               pla
.2068	28		               plp
.2069	60		               rts
.206a			setinverse
.206a	48		               pha
.206b	a9 12		               lda  #$12
.206d	20 d2 ff	               jsr  $ffd2
.2070	68		               pla
.2071	60		               rts
.2072			clrinverse
.2072	48		               pha
.2073	a9 92		               lda  #$92
.2075	20 d2 ff	               jsr  $ffd2
.2078	68		               pla
.2079	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.207a			push
.207a	08		          php            ; stack : flg, pcl, pch
.207b	78		          sei
.207c	8d b6 20	          sta  ra        ; save a
.207f	68		          pla            ; stack : pcl, pch
.2080	8d b5 20	          sta  rp        ; save rp
.2083	68		          pla            ; stack : pch
.2084	8d b7 20	          sta  pc        ; save pcl
.2087	68		          pla            ; stack : -
.2088	8d b8 20	          sta  pc+1      ; save pch
.208b	a5 fb		          lda  zpage1    ; get zpage1 low byte
.208d	48		          pha            ; stack : zp1l
.208e	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.2090	48		          pha            ; stack : zp1h, zp1l
.2091	a5 fd		          lda  zpage2    ; get zpage2 low byte
.2093	48		          pha            ; stack : zp2l, zp1h, zp1l
.2094	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.2096	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.2097	ad b5 20	          lda  rp        ; get rp
.209a	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.209b	ad b6 20	          lda  ra        ; get a
.209e	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.209f	8a		          txa            ; get x
.20a0	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.20a1	98		          tya            ; get y
.20a2	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.20a3	ad b8 20	          lda  pc+1      ; get pch
.20a6	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.20a7	ad b7 20	          lda  pc        ; get pcl
.20aa	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.20ab	ad b5 20	          lda  rp        ; get rp
.20ae	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.20af	ad b6 20	          lda  ra        ; get a
.20b2	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.20b3	58		          cli
.20b4	60		          rts
>20b5	00		rp        .byte     0
>20b6	00		ra        .byte     0
>20b7	00 00		pc        .word     0
.20b9			pull
.20b9			pop
.20b9	78		          sei
.20ba	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.20bb	8d ee 20	          sta  pc        ; save pcl
.20be	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.20bf	8d ef 20	          sta  pc+1      ; save pch
.20c2	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.20c3	a8		          tay            ; set y
.20c4	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.20c5	aa		          tax            ; set x
.20c6	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.20c7	8d ed 20	          sta  ra        ; save a
.20ca	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.20cb	8d ec 20	          sta  rp        ; save rp
.20ce	68		          pla            ; stack : zp2l, zp1h, zp1l
.20cf	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.20d1	68		          pla            ; stack : zp1h, zp1l
.20d2	85 fd		          sta  zpage2    ; get zpage2 High byte
.20d4	68		          pla            ; stack : zp1l
.20d5	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.20d7	68		          pla            ; stack :
.20d8	85 fb		          sta  zpage1    ; get zpage1 High byte
.20da	ad ef 20	          lda  pc+1      ; get pch
.20dd	48		          pha            ; stack : pch
.20de	ad ee 20	          lda  pc
.20e1	48		          pha            ; stack : pcl, pch
.20e2	ad ec 20	          lda  rp        ; get rp
.20e5	48		          pha            ; stack : rp, pcl, pch
.20e6	ad ed 20	          lda  ra        ; set ra
.20e9	58		          cli
.20ea	28		          plp            ; stack : pcl, pch
.20eb	60		          rts
>20ec	00		rp        .byte     0
>20ed	00		ra        .byte     0
>20ee	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.20f0			blkfill
.20f0	20 7a 20	bf0            jsr  push
.20f3	20 b1 21	               jsr  savezp1
.20f6	84 fc		               sty  zpage1+1
.20f8	a0 00		               ldy  #$00
.20fa	84 fb		               sty  zpage1
.20fc	91 fb		bf1            sta  (zpage1),y
.20fe	c8		               iny
.20ff	d0 fb		               bne  bf1
.2101	20 c0 21	               jsr  restzp1
.2104	20 b9 20	               jsr  pop
.2107	60		               rts
.2108			memfill
.2108	20 7a 20	               jsr  push
.210b	20 f0 20	mf1            jsr  blkfill
.210e	c8		               iny
.210f	ca		               dex
.2110	d0 f9		               bne  mf1
.2112	20 b9 20	               jsr  pop
.2115	60		               rts
.2116			memmove
.2116	20 7a 20	               jsr  push
.2119	ba		               tsx            ; On se crée un pointeur ...
.211a	8a		               txa
.211b	18		               clc
.211c	69 0b		               adc  #11
.211e	a8		               tay
.211f	a2 06		               ldx  #$06
.2121	b9 00 01	nextbyte       lda  $0100,y
.2124	99 70 21	               sta  words,y
.2127	c8		               iny
.2128	ca		               dex
.2129	d0 f6		               bne  nextbyte
.212b	ad 70 21	               lda  s
.212e	8d 47 21	               sta  source+1
.2131	ad 71 21	               lda  s+1
.2134	8d 48 21	               sta  source+2
.2137	ad 72 21	               lda  d
.213a	8d 44 21	               sta  destin+1
.213d	ad 73 21	               lda  d+1
.2140	8d 45 21	               sta  destin+2
.2143	ad ff ff	destin         lda  $ffff
.2146	8d ff ff	source         sta  $ffff
.2149	ee 44 21	               inc  destin+1
.214c	d0 03		               bne  src
.214e	ee 45 21	               inc  destin+2
.2151	ee 47 21	src            inc  source+1
.2154	d0 03		               bne  cnt
.2156	ee 48 21	               inc  source+2
.2159	ad 74 21	cnt            lda  compte
.215c	d0 08		               bne  decit
.215e	ad 75 21	               lda  compte+1
.2161	f0 09		               beq  fini
.2163	ce 75 21	               dec  compte+1
.2166	ce 74 21	decit          dec  compte
.2169	4c 43 21	               jmp  destin
.216c	20 b9 20	fini           jsr  pop
.216f	60		               rts
.2170			words
>2170	00 00		s         .word     $0000
>2172	00 00		d         .word     $0000
>2174	00 00		compte    .word     $0000
.2176			decword
.2176	20 7a 20	               jsr  push
.2179	86 fd		               stx  zpage2
.217b	84 fe		               sty  zpage2+1
.217d	20 b9 20	               jsr  pop
.2180	60		               rts
.2181			inczp1
.2181	08		               php
.2182	48		               pha
.2183	e6 fb		               inc  zpage1
.2185	a5 fb		               lda  zpage1
.2187	d0 02		               bne  nopage
.2189	e6 fc		               inc  zpage1+1
.218b	68		nopage         pla
.218c	28		               plp
.218d	60		               rts
.218e			deczp1
.218e	08		                php
.218f	48		                pha
.2190	c6 fb		                dec  zpage1
.2192	d0 02		                bne  nopage
.2194	c6 fc		                dec  zpage1+1
.2196	68		nopage          pla
.2197	28		                plp
.2198	60		                rts
.2199			inczp2
.2199	08		               php
.219a	48		               pha
.219b	e6 fd		               inc  zpage2
.219d	a5 fd		               lda  zpage2
.219f	d0 02		               bne  nopage
.21a1	e6 fe		               inc  zpage2+1
.21a3	68		nopage         pla
.21a4	28		               plp
.21a5	60		               rts
.21a6			deczp2
.21a6	08		               php
.21a7	48		               pha
.21a8	a5 fd		               lda  zpage2
.21aa	d0 02		               bne  nopage
.21ac	c6 fe		               dec  zpage2+1
.21ae	68		nopage         pla
.21af	28		               plp
.21b0	60		               rts
.21b1			savezp1
.21b1	08		               php
.21b2	48		               pha
.21b3	a5 fb		               lda  zpage1
.21b5	8d 2d 22	               sta  zp1
.21b8	a5 fc		               lda  zpage1+1
.21ba	8d 2e 22	               sta  zp1+1
.21bd	68		               pla
.21be	28		               plp
.21bf	60		               rts
.21c0			restzp1
.21c0	08		               php
.21c1	48		               pha
.21c2	ad 2d 22	               lda zp1
.21c5	85 fb		               sta zpage1
.21c7	ad 2e 22	               lda zp1+1
.21ca	85 fc		               sta zpage1+1
.21cc	68		               pla
.21cd	28		               plp
.21ce	60		               rts
.21cf			savezp2
.21cf	08		         php
.21d0	48		         pha
.21d1	a5 fd		         lda zpage2
.21d3	8d 2f 22	         sta zp2
.21d6	a5 fe		         lda zpage2+1
.21d8	8d 30 22	         sta zp2+1
.21db	68		         pla
.21dc	28		         plp
.21dd	60		         rts
.21de			restzp2
.21de	08		                php
.21df	48		                pha
.21e0	ad 2f 22	                lda  zp2
.21e3	85 fd		                sta  zpage2
.21e5	ad 30 22	                lda  zp2+1
.21e8	85 fe		                sta  zpage2+1
.21ea	68		                pla
.21eb	28		                plp
.21ec	60		                rts
.21ed			xy2addr
.21ed	08		                php
.21ee	48		                pha
.21ef	8a		                txa
.21f0	48		                pha
.21f1	98		                tya
.21f2	48		                pha
.21f3	ad 28 22	                lda     addr1+1
.21f6	8d 2a 22	                sta     addr2+1
.21f9	ad 27 22	                lda     addr1
.21fc	8d 29 22	                sta     addr2
.21ff	c0 00		                cpy     #$00
.2201	f0 0f		                beq     addx
.2203	18		moreline        clc
.2204	6d 26 22	                adc     ymult
.2207	90 03		                bcc     norepy
.2209	ee 2a 22	                inc     addr2+1
.220c	8d 29 22	norepy          sta     addr2
.220f	88		                dey
.2210	d0 f1		                bne     moreline
.2212	8a		addx            txa
.2213	18		                clc
.2214	6d 29 22	                adc     addr2
.2217	90 03		                bcc     thatsit
.2219	ee 2a 22	                inc     addr2+1
.221c	8d 29 22	thatsit         sta     addr2
.221f	68		                pla
.2220	a8		                tay
.2221	68		                pla
.2222	aa		                tax
.2223	68		                pla
.2224	28		                plp
.2225	60		                rts
>2226	28		ymult          .byte     40
>2227	00 00		addr1          .word     $0000
>2229	00 00		addr2          .word     $0000
>222b	00 00		bytecnt        .word     $0000
>222d	00 00		zp1        .word   $0000
>222f	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>2231	01		a2hexcol       .byte     1              ; pour aputscxy
>2232	00		a2hexbkcol     .byte     %00000000
.2233			a2hexpos
>2233	00		a2hexpx        .byte     0              ; pour aputsxy
>2234	00		a2hexpy        .byte     0
>2235	24		a2hexprefix    .byte     "$"            ; pour aputs
>2236	00 00		a2hexstr       .word     $00
>2238	00 00		               .word     $00
>223a	00		               .byte     0              ; 0 end string
>223b	30 30 30 30	abin           .null     "00000000"
>223f	30 30 30 30 00
>2244	20 20 20 00	adec           .null     "   "
.2248			putahexfmtxy
.2248	20 7a 20	               jsr  push
.224b	20 97 22	               jsr  a2hex
.224e	ae 33 22	               ldx  a2hexpx
.2251	ac 34 22	               ldy  a2hexpy
.2254	20 a3 1f	               jsr  gotoxy
.2257	a2 35		               ldx  #<a2hexprefix
.2259	a0 22		               ldy  #>a2hexprefix
.225b	20 89 1f	               jsr  puts
.225e	20 b9 20	               jsr  pop
.2261	60		               rts
.2262			putahexfmt
.2262	20 7a 20	               jsr  push
.2265	20 97 22	               jsr  a2hex
.2268	a2 35		               ldx  #<a2hexprefix
.226a	a0 22		               ldy  #>a2hexprefix
.226c	20 89 1f	               jsr  puts
.226f	20 b9 20	               jsr  pop
.2272	60		               rts
.2273			putahex
.2273	20 7a 20	               jsr  push
.2276	20 97 22	               jsr  a2hex
.2279	a2 36		               ldx  #<a2hexstr
.227b	a0 22		               ldy  #>a2hexstr
.227d	20 89 1f	               jsr  puts
.2280	20 b9 20	               jsr  pop
.2283	60		               rts
.2284			nib2hex
.2284	08		               php
.2285	29 0f		               and  #$0f
.2287	f8		               sed
.2288	18		               clc
.2289	69 90		               adc  #$90
.228b	69 40		               adc  #$40
.228d	d8		               cld
.228e	28		               plp
.228f	60		               rts
.2290			lsra4bits
.2290	08		               php
.2291	4a		               lsr
.2292	4a		               lsr
.2293	4a		               lsr
.2294	4a		               lsr
.2295	28		               plp
.2296	60		               rts
.2297			a2hex
.2297	08		               php
.2298	48		               pha
.2299	48		               pha
.229a	20 90 22	               jsr  lsra4bits
.229d	20 84 22	               jsr  nib2hex
.22a0	8d 36 22	               sta  a2hexstr
.22a3	68		               pla
.22a4	20 84 22	               jsr  nib2hex
.22a7	8d 37 22	               sta  a2hexstr+1
.22aa	a9 00		               lda  #$00                ; set end of string
.22ac	8d 38 22	               sta  a2hexstr+2
.22af	68		               pla
.22b0	28		               plp
.22b1	60		               rts
.22b2			xy2hex
.22b2	20 7a 20	               jsr  push
.22b5	20 97 22	               jsr  a2hex
.22b8	8a		               txa
.22b9	48		               pha
.22ba	20 90 22	               jsr  lsra4bits
.22bd	20 84 22	               jsr  nib2hex
.22c0	8d 36 22	               sta  a2hexstr
.22c3	68		               pla
.22c4	20 84 22	               jsr  nib2hex
.22c7	8d 37 22	               sta  a2hexstr+1
.22ca	98		               tya
.22cb	48		               pha
.22cc	20 90 22	               jsr  lsra4bits
.22cf	20 84 22	               jsr  nib2hex
.22d2	8d 38 22	               sta  a2hexstr+2
.22d5	68		               pla
.22d6	20 84 22	               jsr  nib2hex
.22d9	8d 39 22	               sta  a2hexstr+3
.22dc	a9 00		               lda  #$00                ; 0 ended string
.22de	8d 3a 22	               sta  a2hexstr+4
.22e1	20 b9 20	               jsr  pop
.22e4			atobin
.22e4	20 7a 20	               jsr  push
.22e7	a2 08		               ldx  #8
.22e9	a0 00		               ldy  #0
.22eb	18		               clc
.22ec	2a		nextbit        rol
.22ed	48		               pha
.22ee	69 00		               adc  #$00
.22f0	29 01		               and  #$01
.22f2	20 84 22	               jsr  nib2hex
.22f5	99 3b 22	               sta  abin,y
.22f8	68		               pla
.22f9	c8		               iny
.22fa	ca		               dex
.22fb	d0 ef		               bne  nextbit
.22fd	a9 00		               lda  #0
.22ff	99 3b 22	               sta  abin,y
.2302	20 b9 20	               jsr  pull
.2305	60		               rts
.2306			putabin
.2306	20 e4 22	               jsr     atobin
.2309	20 7a 20	               jsr     push
.230c	a2 3b		               ldx     #<abin
.230e	a0 22		               ldy     #>abin
.2310	20 89 1f	               jsr     puts
.2313	20 b9 20	               jsr     pop
.2316	60		               rts
.2317			printabin
.2317	20 7a 20	               jsr     push
.231a	a2 3b		               ldx     #<abin
.231c	a0 22		               ldy     #>abin
.231e	20 89 1f	               jsr     puts
.2321	20 b9 20	               jsr     pop
.2324	60		               rts
.2325			putabinfmt
.2325	08		               php
.2326	48		               pha
.2327	a9 25		               lda     #"%"
.2329	20 83 1f	               jsr     putch
.232c	68		               pla
.232d	20 06 23	               jsr     putabin
.2330	28		               plp
.2331	60		               rts
.2332			putabinxy
.2332	20 a3 1f	               jsr     gotoxy
.2335	20 06 23	               jsr     putabin
.2338	60		               rts
.2339			putabinfmtxy
.2339	20 a3 1f	               jsr     gotoxy
.233c	20 25 23	               jsr     putabinfmt
.233f	60		               rts
.2340			atodec
.2340	20 7a 20	               jsr  push
.2343	f8		               sed
.2344	aa		               tax
.2345	a0 00		               ldy  #$00
.2347	a9 00		               lda  #$00
.2349	18		nextbit        clc
.234a	69 01		               adc  #$01
.234c	90 01		               bcc  decx
.234e	c8		               iny
.234f	ca		decx           dex
.2350	d0 f7		               bne  nextbit
.2352	48		               pha
.2353	98		               tya
.2354	20 84 22	               jsr  nib2hex
.2357	8d 44 22	               sta  adec
.235a	68		               pla
.235b	48		               pha
.235c	20 84 22	               jsr  nib2hex
.235f	8d 46 22	               sta  adec+2
.2362	68		               pla
.2363	6a		               ror
.2364	6a		               ror
.2365	6a		               ror
.2366	6a		               ror
.2367	20 84 22	               jsr  nib2hex
.236a	8d 45 22	               sta  adec+1
.236d	d8		               cld
.236e	20 b9 20	               jsr  pull
.2371	60		               rts
>2372	00 00 00	buffer         .byte     0,0,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>2375	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>2379	00 00 00 00 00 00 00 00 00 0d 00 00
>2385	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>2389	00 00 00 00 00 00 00 00 00 00 00 00
>2395	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>2399	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>23a5	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>23a9	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>23b5	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>23b9	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>23c5	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>23c9	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>23d5	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>23d9	00 00 00 00 00 00 00 00 00 00 00 00
>23e5	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>23e9	00 00 00 00 00 00 00 00 00 00 00 00
>23f5	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>23f9	00 00 00 00 00 00 00 00 00 00 00 00
>2405	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>2409	00 00 00 00 00 00 00 00 00 00 00 00
>2415	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>2419	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>2425	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>2429	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>2435	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>2439	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>2445	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>2449	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>2455	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>2459	00 00 00 00 00 00 00 00 00 00 00 00
>2465	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>2469	00 00 00 00 00 00 00 00 00 00 00 00
.2475			waitstop
.2475	20 7a 20	               jsr  push
.2478	20 ed f6	wait           jsr  k_stop
.247b	d0 fb		               bne  wait
.247d	20 b9 20	               jsr  pop
.2480	60		               rts
.2481			anykey
.2481	08		               php
.2482	48		               pha
.2483	a5 cb		nokey          lda 203
.2485	c9 40		               cmp #64
.2487	f0 fa		               beq nokey
.2489	20 8f 24	               jsr releasekey
.248c	68		               pla
.248d	28		               plp
.248e	60		               rts
.248f			releasekey
.248f	08		               php
.2490	48		               pha
.2491	a5 cb		keypressed     lda 203
.2493	c9 40		               cmp #64
.2495	d0 fa		               bne keypressed
.2497	68		               pla
.2498	28		               plp
.2499	60		               rts
.249a			getkey
.249a	20 e4 ff	again          jsr  getin
.249d	c9 00		               cmp  #0
.249f	f0 f9		               beq  again
.24a1	60		               rts
.24a2			waitkey
.24a2	20 7a 20	               jsr  push
.24a5	8d f3 24	               sta  thekey
.24a8	20 e4 ff	nope           jsr  getin
.24ab	20 d2 ff	               jsr  chrout
.24ae	cd f3 24	               cmp  thekey
.24b1	d0 f5		               bne  nope
.24b3	20 d2 ff	               jsr  chrout
.24b6	20 b9 20	               jsr  pop
.24b9	60		               rts
.24ba			waitspace
.24ba	20 7a 20	               jsr  push
.24bd	a9 7f		wait           lda  #$7f  ;%01111111
.24bf	8d 00 dc	               sta  $dc00
.24c2	ad 01 dc	               lda  $dc01
.24c5	29 10		               and  #$10  ;mask %00010000
.24c7	d0 f4		               bne  wait
.24c9	20 b9 20	               jsr  pop
.24cc			waitsstop
.24cc	20 7a 20	               jsr  push
.24cf	20 ed f6	wait           jsr  k_stop  ;%01111111
.24d2	d0 fb		               bne  wait
.24d4	20 b9 20	               jsr  pop
.24d7			waitreturn
.24d7	20 7a 20	               jsr  push
.24da	ad f4 24	               lda  thecount
.24dd	8d 00 04	               sta  scrnram
.24e0	a9 02		               lda  #$02
.24e2	8d 00 d8	               sta  colorram
.24e5	20 e4 ff	nope           jsr  getin
.24e8	c9 0d		nohex          cmp  #$0d
.24ea	d0 f9		               bne  nope
.24ec	ee f4 24	               inc  thecount
.24ef	20 b9 20	               jsr  pop
.24f2	60		               rts
>24f3	00		thekey         .byte   0
>24f4	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  End of listing

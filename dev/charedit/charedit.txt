
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Fri Nov 24 10:48:53 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm

="20231116-100400"	version  = "20231116-100400"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

=18			fkeyleft       =    18
=9			f1top          =    9
=$0400			scrnnewram     =    $0400
=10			charsdef       =    10
=9			grid_top       =    9
=1			grid_left      =    1
=16			grid_bot       =    grid_top + 7
=8			grid_right     =    grid_left + 7
=$0b			bordure        =    vgris
=$00			fond           =    vnoir
=$03			mesgcol        =    vcyan
=$03			menu1col1      =    vcyan
=$0e			menu1col2      =    vbleu1
=$0f			menu2col1      =    vgris2
=$0c			menu2col2      =    vgris1
=$01			flashcol       =    vblanc
=$07			whoamicol      =    vjaune
=$01			charcolor      =    vblanc
=$0f			charscolor     =    vgris2
.080d			main
.080d	20 36 21	               jsr  push
.0810	20 08 20	               jsr  scrmaninit
.0813	08		               php
.0814	48		               pha
.0815	a9 08		               lda  #$08
.0817	20 d2 ff	               jsr  $ffd2
.081a	68		               pla
.081b	28		               plp
.081c	20 33 0a	               jsr  drawcredits
.081f	a2 3b		               ldx #<menu_msg
.0821	a0 1c		               ldy #>menu_msg
.0823	20 ce 20	               jsr putscxy
.0826			wait
.0826	20 ee 1f	               jsr  screendis
.0829	20 da 0f	               jsr  copycharset
.082c	20 28 20	               jsr  cls
.082f	20 c4 0f	               jsr  setscreenptr
.0832	20 80 08	               jsr  savetofile
.0835	20 92 0a	               jsr  setdefaultchar
.0838	20 35 10	               jsr  staticscreen
.083b	20 07 0f	               jsr  drawbitmap
.083e	a9 00		               lda  #$00
.0840	8d 27 09	               sta  fkeyset
.0843	20 71 10	               jsr  drawfkeys
.0846	a9 00		               lda  #$00
.0848	20 36 21	               jsr  push
.084b	a2 88		               ldx  #<blankmsg
.084d	a0 19		               ldy  #>blankmsg
.084f	20 ce 20	               jsr  putscxy
.0852	a2 b4		               ldx  #<prompt_msg
.0854	a0 19		               ldy  #>prompt_msg
.0856	20 ce 20	               jsr  putscxy
.0859	20 75 21	               jsr  pop
.085c	20 fb 1f	               jsr  screenena
.085f	20 a3 0c	               jsr  keyaction
.0862	20 28 20	               jsr  cls
.0865	20 33 0a	               jsr  drawcredits
.0868	a2 c4		               ldx #<bye_msg
.086a	a0 1d		               ldy #>bye_msg
.086c	20 ce 20	               jsr putscxy
.086f	a2 e6		               ldx #<any_msg
.0871	a0 1d		               ldy #>any_msg
.0873	20 ce 20	               jsr putscxy
.0876	20 56 25	               jsr  getkey
.0879	20 28 20	               jsr  cls
.087c	20 75 21	endmain        jsr  pop
.087f	60		               rts
.0880			savetofile
.0880	20 36 21	               jsr  push
.0883	a9 38		               lda  #<fname
.0885	8d e4 26	               sta  dsk_fnptr
.0888	a9 09		               lda  #>fname
.088a	8d e5 26	               sta  dsk_fnptr+1
.088d	a9 0d		               lda  #(device-fname-1)
.088f	8d e6 26	               sta  dsk_fnlen
.0892	ad 46 09	               lda  device
.0895	29 0f		               and  #$0f
.0897	8d e3 26	               sta  dsk_lfsno
.089a	8d e2 26	               sta  dsk_dev
.089d	a9 00		               lda  #<bitmapmem
.089f	8d de 26	               sta  dsk_data_s
.08a2	a9 28		               lda  #>bitmapmem
.08a4	8d df 26	               sta  dsk_data_s+1
.08a7	a9 00		               lda  #<endofaddr
.08a9	8d e0 26	               sta  dsk_data_e
.08ac	a9 48		               lda  #>endofaddr
.08ae	8d e1 26	               sta  dsk_data_e+1
.08b1	a2 88		               ldx #<blankmsg
.08b3	a0 19		               ldy #>blankmsg
.08b5	20 ce 20	               jsr putscxy
.08b8	20 36 21	               jsr  push
.08bb	a2 01		               ldx  #1
.08bd	a0 04		               ldy  #4
.08bf	20 5f 20	               jsr  gotoxy
.08c2	20 75 21	               jsr  pop
.08c5	20 4b 26	               jsr  memtofile
.08c8	20 75 21	               jsr  pop
.08cb	60		               rts
.08cc			loadfromfile
.08cc	20 36 21	               jsr  push
.08cf	a9 38		               lda  #<fname
.08d1	8d e4 26	               sta  dsk_fnptr
.08d4	a9 09		               lda  #>fname
.08d6	8d e5 26	               sta  dsk_fnptr+1
.08d9	a9 0d		               lda  #(device-fname-1)
.08db	8d e6 26	               sta  dsk_fnlen
.08de	ad 46 09	               lda  device
.08e1	29 0f		               and  #$0f
.08e3	8d e2 26	               sta  dsk_dev
.08e6	8d e3 26	               sta  dsk_lfsno
.08e9	a9 00		               lda  #<bitmapmem
.08eb	8d de 26	               sta  dsk_data_s
.08ee	a9 28		               lda  #>bitmapmem
.08f0	8d df 26	               sta  dsk_data_s+1
.08f3	a9 00		               lda  #<endofaddr
.08f5	8d e0 26	               sta  dsk_data_e
.08f8	a9 48		               lda  #>endofaddr
.08fa	8d e1 26	               sta  dsk_data_e+1
.08fd	a2 88		               ldx #<blankmsg
.08ff	a0 19		               ldy #>blankmsg
.0901	20 ce 20	               jsr putscxy
.0904	20 36 21	               jsr  push
.0907	a2 01		               ldx  #1
.0909	a0 04		               ldy  #4
.090b	20 5f 20	               jsr  gotoxy
.090e	20 75 21	               jsr  pop
.0911	20 83 26	               jsr  filetomem
.0914	20 75 21	               jsr  pop
.0917	60		               rts
=10240			bitmapmem      =         charsdef * 1024     ;Calcul position ram des caracteres.
=18432			endofaddr      =         (charsdef * 1024) + (4*$800)
=61440			mstopaddr      =         $d000+(4*$800)
>0918	00 d0		startaddr      .word     $d000               ; 53248
>091a	00 f0		stopaddr       .word     mstopaddr           ; 55296
>091c	00 28		bitmapaddr     .word     bitmapmem           ; $3000, 12288
>091e	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>0922	08 04 02 01
>0926	00		editmode       .byte     0
>0927	00		fkeyset        .byte     0
>0928	00		currentchar    .byte     0
>0929	00		currentkey     .byte     0
>092a	00		previouskey    .byte     0
>092b	00		bitmapoffset   .byte     0
>092c	00 00		mapaddr        .word     0
>092e	00 00		byteaddr       .word     0
>0930	00 00		gridaddr       .word     0
>0932	09		cursln         .byte     grid_top
>0933	01		curscl         .byte     grid_left
>0934	05 1b 03 12	pfname         .byte     vvert,27,3,18
>0938	40 30 3a	fname          .text     "@0:"
>093b	4f 52 49 47	name           .text     "origin"
>093f	49 4e
>0941	2e 43 48 52	ext            .null     ".chr"
>0945	00
>0946	08		device         .byte     8

;******  Processing file: routines.asm

.0947			template
.0947	20 36 21	               jsr  push
.094a	20 75 21	               jsr  pop
.094d	60		               rts
.094e			getfname
.094e	20 36 21	               jsr  push
.0951	20 36 21	               jsr  push
.0954	a2 88		               ldx  #<blankmsg
.0956	a0 19		               ldy  #>blankmsg
.0958	20 ce 20	               jsr  putscxy
.095b	a2 f1		               ldx  #<fname_msg
.095d	a0 1b		               ldy  #>fname_msg
.095f	20 ce 20	               jsr  putscxy
.0962	20 75 21	               jsr  pop
.0965	a2 00		               ldx  #$00
.0967	8e 9b 09	               stx  count
.096a	20 9c 09	getanother     jsr  getalphanum
.096d	20 3f 20	               jsr  putch
.0970	ae 9b 09	               ldx  count
.0973	9d 3b 09	               sta  name,x
.0976	ee 9b 09	               inc  count
.0979	ae 9b 09	               ldx  count
.097c	e0 06		               cpx  #$06
.097e	f0 03		               beq  finish
.0980	4c 6a 09	               jmp  getanother
.0983			finish
.0983	20 36 21	               jsr  push
.0986	a2 88		               ldx  #<blankmsg
.0988	a0 19		               ldy  #>blankmsg
.098a	20 ce 20	               jsr  putscxy
.098d	a2 34		               ldx  #<pfname
.098f	a0 09		               ldy  #>pfname
.0991	20 ce 20	               jsr  putscxy
.0994	20 75 21	               jsr  pop
.0997	20 75 21	               jsr  pop
.099a	60		               rts
>099b	00		count          .byte     0
.099c			getalphanum
.099c	20 36 21	               jsr  push
.099f	20 56 25	getanother     jsr  getkey
.09a2	c9 30		               cmp  #$30      ; 0
.09a4	30 f9		               bmi  getanother
.09a6	c9 3a		               cmp  #$3a      ; 9+1
.09a8	30 0b		               bmi  goodone
.09aa	c9 41		isitletter     cmp  #$41      ; A
.09ac	30 f1		               bmi  getanother
.09ae	c9 5b		               cmp  #$5b      ; Z+1
.09b0	30 03		               bmi  goodone
.09b2	4c 9f 09	               jmp  getanother
.09b5	8d bf 09	goodone        sta  tempbyte
.09b8	20 75 21	               jsr  pop
.09bb	ad bf 09	               lda  tempbyte
.09be	60		               rts
>09bf	00		tempbyte       .byte     0
.09c0			copychar
.09c0	20 36 21	               jsr  push
.09c3	20 fc 09	               jsr  getvalidkey
.09c6	ad 1c 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.09c9	85 fb		               sta  zpage1
.09cb	ad 1d 09	               lda  bitmapaddr+1
.09ce	85 fc		               sta  zpage1+1
.09d0	ae 32 0a	               ldx  copykey
.09d3	bd 31 24	               lda  asciitorom,x
.09d6	aa		               tax
.09d7	e0 00		               cpx  #$00
.09d9	f0 08		               beq  no_offset      ; sommes nous déja à 0
.09db	a9 08		addagain       lda  #$08
.09dd	20 cd 11	               jsr  zp1addnum      ; on augmente de 8 byte ...
.09e0	ca		               dex                 ; pour chaque caracteres
.09e1	d0 f8		               bne  addagain
.09e3	ad 2c 09	no_offset      lda  mapaddr        ; le caractere actuel
.09e6	85 fd		               sta  zpage2         ;
.09e8	ad 2d 09	               lda  mapaddr+1      ;
.09eb	85 fe		               sta  zpage2+1       ;
.09ed	a0 00		               ldy  #$00
.09ef	b1 fb		nextbyte       lda  (zpage1),y
.09f1	91 fd		               sta  (zpage2),y
.09f3	c8		               iny
.09f4	c0 08		               cpy  #$08
.09f6	d0 f7		               bne  nextbyte
.09f8	20 75 21	out            jsr  pop
.09fb	60		               rts
.09fc			getvalidkey
.09fc	20 36 21	               jsr  push
.09ff	20 36 21	               jsr  push
.0a02	a2 88		               ldx  #<blankmsg
.0a04	a0 19		               ldy  #>blankmsg
.0a06	20 ce 20	               jsr  putscxy
.0a09	a2 c8		               ldx  #<copychar_msg
.0a0b	a0 1b		               ldy  #>copychar_msg
.0a0d	20 ce 20	               jsr  putscxy
.0a10	20 75 21	               jsr  pop
.0a13	20 56 25	getgoodkey     jsr  getkey
.0a16	8d 32 0a	               sta  copykey
.0a19	aa		               tax
.0a1a	bc 31 24	               ldy  asciitorom,x
.0a1d	c4 00		               cpy  $00
.0a1f	d0 0a		               bne  goodone
.0a21	ae 32 0a	               ldx  copykey
.0a24	e0 40		               cpx  #$40
.0a26	f0 03		               beq  goodone
.0a28	4c 13 0a	               jmp  getgoodkey
.0a2b	20 3f 20	goodone        jsr  putch
.0a2e	20 75 21	               jsr  pop
.0a31	60		               rts
>0a32	00		copykey        .byte 0
.0a33			drawcredits
.0a33	20 36 21	               jsr  push
.0a36	20 28 20	               jsr  cls
.0a39	a2 50		               ldx #<whoami0
.0a3b	a0 1c		               ldy #>whoami0
.0a3d	20 ce 20	               jsr putscxy
.0a40	a2 75		               ldx #<whoami1
.0a42	a0 1c		               ldy #>whoami1
.0a44	20 ce 20	               jsr putscxy
.0a47	a2 9c		               ldx #<whoami2
.0a49	a0 1c		               ldy #>whoami2
.0a4b	20 ce 20	               jsr putscxy
.0a4e	a2 c1		               ldx #<whoami3
.0a50	a0 1c		               ldy #>whoami3
.0a52	20 ce 20	               jsr putscxy
.0a55	a2 e6		               ldx #<whoami4
.0a57	a0 1c		               ldy #>whoami4
.0a59	20 ce 20	               jsr putscxy
.0a5c	a2 0b		               ldx #<whoami5
.0a5e	a0 1d		               ldy #>whoami5
.0a60	20 ce 20	               jsr putscxy
.0a63	a2 30		               ldx #<whoami6
.0a65	a0 1d		               ldy #>whoami6
.0a67	20 ce 20	               jsr putscxy
.0a6a	a2 55		               ldx #<whoami7
.0a6c	a0 1d		               ldy #>whoami7
.0a6e	20 ce 20	               jsr putscxy
.0a71	a2 7a		               ldx #<whoami8
.0a73	a0 1d		               ldy #>whoami8
.0a75	20 ce 20	               jsr putscxy
.0a78	a2 9f		               ldx #<whoami9
.0a7a	a0 1d		               ldy #>whoami9
.0a7c	20 ce 20	               jsr putscxy
.0a7f	20 eb 11	               jsr  delay
.0a82	20 eb 11	               jsr  delay
.0a85	20 eb 11	               jsr  delay
.0a88	20 eb 11	               jsr  delay
.0a8b	20 eb 11	               jsr  delay
.0a8e	20 75 21	               jsr  pop
.0a91	60		               rts
.0a92			setdefaultchar
.0a92	20 36 21	               jsr  push
.0a95	a9 40		               lda  #$40
.0a97	8d 29 09	               sta  currentkey
.0a9a	aa		               tax
.0a9b	bc 31 24	               ldy  asciitorom,x
.0a9e	8c 2b 09	               sty  bitmapoffset
.0aa1	20 5c 0b	               jsr  drawkeyval
.0aa4	20 07 0f	               jsr  drawbitmap
.0aa7	20 36 21	               jsr  push
.0aaa	a2 0d		               ldx  #13
.0aac	a0 0c		               ldy  #12
.0aae	20 5f 20	               jsr  gotoxy
.0ab1	20 75 21	               jsr  pop
.0ab4	20 3f 20	               jsr  putch
.0ab7	20 36 21	               jsr  push
.0aba	a2 11		               ldx  #17
.0abc	a0 05		               ldy  #5
.0abe	20 5f 20	               jsr  gotoxy
.0ac1	20 75 21	               jsr  pop
.0ac4	20 fc 23	               jsr  atodec
.0ac7	20 36 21	               jsr  push
.0aca	a2 00		isx            ldx  #<adec
.0acc	a0 23		isy            ldy  #>adec
.0ace	20 45 20	               jsr  puts
.0ad1	20 75 21	               jsr  pull
.0ad4	20 75 21	               jsr  pop
.0ad7	60		               rts
.0ad8			resetmenuacolor
.0ad8	20 36 21	               jsr  push
.0adb	a9 03		               lda  #menu1col1
.0add	8d 3e 1e	               sta  f1abutton
.0ae0	8d 74 1e	               sta  f3abutton
.0ae3	8d aa 1e	               sta  f5abutton
.0ae6	8d e0 1e	               sta  f7abutton
.0ae9	a9 0e		               lda  #menu1col2
.0aeb	8d 59 1e	               sta  f2abutton
.0aee	8d 8f 1e	               sta  f4abutton
.0af1	8d c5 1e	               sta  f6abutton
.0af4	8d fb 1e	               sta  f8abutton
.0af7	20 75 21	               jsr  pop
.0afa	60		               rts
.0afb			resetmenubcolor
.0afb	20 36 21	               jsr  push
.0afe	a9 0f		               lda  #menu2col1
.0b00	8d 16 1f	               sta  f1bbutton
.0b03	8d 4c 1f	               sta  f3bbutton
.0b06	8d 82 1f	               sta  f5bbutton
.0b09	8d b8 1f	               sta  f7bbutton
.0b0c	a9 0f		               lda  #menu2col1
.0b0e	8d 31 1f	               sta  f2bbutton
.0b11	8d 67 1f	               sta  f4bbutton
.0b14	8d 9d 1f	               sta  f6bbutton
.0b17	8d d3 1f	               sta  f8bbutton
.0b1a	20 75 21	               jsr  pop
.0b1d	60		               rts
.0b1e			setmenuacolor
.0b1e	20 36 21	               jsr  push
.0b21	8d 3e 1e	               sta  f1abutton
.0b24	8d 59 1e	               sta  f2abutton
.0b27	8d 74 1e	               sta  f3abutton
.0b2a	8d 8f 1e	               sta  f4abutton
.0b2d	8d aa 1e	               sta  f5abutton
.0b30	8d c5 1e	               sta  f6abutton
.0b33	8d e0 1e	               sta  f7abutton
.0b36	8d fb 1e	               sta  f8abutton
.0b39	20 75 21	               jsr  pop
.0b3c	60		               rts
.0b3d			setmenubcolor
.0b3d	20 36 21	               jsr  push
.0b40	8d 16 1f	               sta  f1bbutton
.0b43	8d 31 1f	               sta  f2bbutton
.0b46	8d 4c 1f	               sta  f3bbutton
.0b49	8d 67 1f	               sta  f4bbutton
.0b4c	8d 82 1f	               sta  f5bbutton
.0b4f	8d 9d 1f	               sta  f6bbutton
.0b52	8d b8 1f	               sta  f7bbutton
.0b55	8d d3 1f	               sta  f8bbutton
.0b58	20 75 21	               jsr  pop
.0b5b	60		               rts
.0b5c			drawkeyval
.0b5c	20 36 21	               jsr  push
.0b5f	20 36 21	               jsr  push
.0b62	a2 01		               ldx  #1
.0b64	a0 13		               ldy  #19
.0b66	20 5f 20	               jsr  gotoxy
.0b69	20 75 21	               jsr  pop
.0b6c	ad 29 09	               lda  currentkey
.0b6f	20 3f 20	               jsr  putch
.0b72	48		               pha
.0b73	a9 3d		               lda  #'='
.0b75	20 3f 20	               jsr  putch
.0b78	a9 25		               lda  #'%'
.0b7a	20 3f 20	               jsr  putch
.0b7d	68		               pla
.0b7e	20 c2 23	               jsr  putabin
.0b81	20 36 21	               jsr  push
.0b84	a2 01		               ldx  #1
.0b86	a0 14		               ldy  #20
.0b88	20 5f 20	               jsr  gotoxy
.0b8b	20 75 21	               jsr  pop
.0b8e	20 36 21	               jsr  push
.0b91	a2 5d		isx            ldx  #<txt1
.0b93	a0 0c		isy            ldy  #>txt1
.0b95	20 45 20	               jsr  puts
.0b98	20 75 21	               jsr  pull
.0b9b	a9 24		               lda  #'$'
.0b9d	20 3f 20	               jsr  putch
.0ba0	ad 29 09	               lda  currentkey
.0ba3	20 2f 23	               jsr  putahex
.0ba6	20 36 21	               jsr  push
.0ba9	a2 01		               ldx  #1
.0bab	a0 15		               ldy  #21
.0bad	20 5f 20	               jsr  gotoxy
.0bb0	20 75 21	               jsr  pop
.0bb3	20 36 21	               jsr  push
.0bb6	a2 68		isx            ldx  #<txt2
.0bb8	a0 0c		isy            ldy  #>txt2
.0bba	20 45 20	               jsr  puts
.0bbd	20 75 21	               jsr  pull
.0bc0	a9 24		               lda  #'$'
.0bc2	20 3f 20	               jsr  putch
.0bc5	ad 1d 09	               lda  bitmapaddr+1
.0bc8	20 2f 23	               jsr  putahex
.0bcb	ad 1c 09	               lda  bitmapaddr
.0bce	20 2f 23	               jsr  putahex
.0bd1	20 36 21	               jsr  push
.0bd4	a2 01		               ldx  #1
.0bd6	a0 16		               ldy  #22
.0bd8	20 5f 20	               jsr  gotoxy
.0bdb	20 75 21	               jsr  pop
.0bde	20 36 21	               jsr  push
.0be1	a2 73		isx            ldx  #<txt3
.0be3	a0 0c		isy            ldy  #>txt3
.0be5	20 45 20	               jsr  puts
.0be8	20 75 21	               jsr  pull
.0beb	a9 24		               lda  #'$'
.0bed	20 3f 20	               jsr  putch
.0bf0	ad 2b 09	               lda  bitmapoffset
.0bf3	20 2f 23	               jsr  putahex
.0bf6	20 36 21	               jsr  push
.0bf9	a2 01		               ldx  #1
.0bfb	a0 17		               ldy  #23
.0bfd	20 5f 20	               jsr  gotoxy
.0c00	20 75 21	               jsr  pop
.0c03	20 36 21	               jsr  push
.0c06	a2 80		isx            ldx  #<txt4
.0c08	a0 0c		isy            ldy  #>txt4
.0c0a	20 45 20	               jsr  puts
.0c0d	20 75 21	               jsr  pull
.0c10	a9 24		               lda  #'$'
.0c12	20 3f 20	               jsr  putch
.0c15	ad 2d 09	               lda  mapaddr+1
.0c18	20 2f 23	               jsr  putahex
.0c1b	ad 2c 09	               lda  mapaddr
.0c1e	20 2f 23	               jsr  putahex
.0c21	20 36 21	               jsr  push
.0c24	a2 01		               ldx  #1
.0c26	a0 18		               ldy  #24
.0c28	20 5f 20	               jsr  gotoxy
.0c2b	20 75 21	               jsr  pop
.0c2e	20 36 21	               jsr  push
.0c31	a2 8b		isx            ldx  #<txt5
.0c33	a0 0c		isy            ldy  #>txt5
.0c35	20 45 20	               jsr  puts
.0c38	20 75 21	               jsr  pull
.0c3b	ad 33 09	               lda  curscl
.0c3e	20 2f 23	               jsr  putahex
.0c41	a9 da		               lda  #$da
.0c43	20 3f 20	               jsr  putch
.0c46	ad 32 09	               lda  cursln
.0c49	20 2f 23	               jsr  putahex
.0c4c	20 75 21	               jsr  pop
.0c4f	60		               rts
>0c50	50 45 54 53	txt0           .null     "petscii :   "
>0c54	43 49 49 20 3a 20 20 20 00
>0c5d	4b 45 59 20	txt1           .null     "key code: "
>0c61	43 4f 44 45 3a 20 00
>0c68	42 49 54 4d	txt2           .null     "bitmap..: "
>0c6c	41 50 2e 2e 3a 20 00
>0c73	4f 46 46 53	txt3           .null     "offset..:   "
>0c77	45 54 2e 2e 3a 20 20 20 00
>0c80	4d 41 50 41	txt4           .null     "mapaddr.: "
>0c84	44 44 52 2e 3a 20 00
>0c8b	43 55 52 53	txt5           .null     "cursval.: "
>0c8f	56 41 4c 2e 3a 20 00
>0c96	53 54 41 43	txt6           .null     "stack......:"
>0c9a	4b 2e 2e 2e 2e 2e 2e 3a 00
.0ca3			keyaction
.0ca3	20 36 21	               jsr  push
.0ca6	20 56 25	loop           jsr  getkey
.0ca9	c9 85		f1             cmp  #key_f1
.0cab	d0 03		               bne  f2
.0cad	4c 21 0d	               jmp  dof1
.0cb0	c9 89		f2             cmp  #key_f2
.0cb2	d0 03		               bne  f3
.0cb4	4c 27 0d	               jmp  dof2
.0cb7	c9 86		f3             cmp  #key_f3
.0cb9	d0 03		               bne  f4
.0cbb	4c 2d 0d	               jmp  dof3
.0cbe	c9 8a		f4             cmp  #key_f4
.0cc0	d0 03		               bne  f5
.0cc2	4c 33 0d	               jmp  dof4
.0cc5	c9 87		f5             cmp  #key_f5
.0cc7	d0 03		               bne  f6
.0cc9	4c 39 0d	               jmp  dof5
.0ccc	c9 8b		f6             cmp  #key_f6
.0cce	d0 03		               bne  f7
.0cd0	4c 3f 0d	               jmp  dof6
.0cd3	c9 88		f7             cmp  #key_f7
.0cd5	d0 03		               bne  f8
.0cd7	4c 45 0d	               jmp  dof7
.0cda	c9 8c		f8             cmp  #key_f8
.0cdc	d0 03		               bne  ctrlx
.0cde	4c 4b 0d	               jmp  dof8
.0ce1	c9 18		ctrlx          cmp  #ctrl_x
.0ce3	d0 03		               bne  ishex14
.0ce5	4c 51 0d	               jmp  doquit
.0ce8	c9 14		ishex14        cmp  #$14
.0cea	d0 03		               bne  ishex12
.0cec	4c a6 0c	               jmp  loop
.0cef	c9 12		ishex12        cmp  #$12
.0cf1	d0 03		               bne  reste
.0cf3	4c a6 0c	               jmp  loop
.0cf6			reste
.0cf6	20 36 21	               jsr  push
.0cf9	a2 0d		               ldx  #13
.0cfb	a0 0c		               ldy  #12
.0cfd	20 5f 20	               jsr  gotoxy
.0d00	20 75 21	               jsr  pop
.0d03	20 3f 20	               jsr  putch
.0d06	48		               pha
.0d07	ad 29 09	               lda  currentkey
.0d0a	8d 2a 09	               sta  previouskey
.0d0d	68		               pla
.0d0e	8d 29 09	               sta  currentkey
.0d11	aa		               tax
.0d12	bc 31 24	               ldy  asciitorom,x
.0d15	8c 2b 09	               sty  bitmapoffset
.0d18	20 5c 0b	               jsr  drawkeyval
.0d1b	20 07 0f	               jsr  drawbitmap
.0d1e	4c a6 0c	               jmp  loop
.0d21	20 01 12	dof1           jsr  f1action  ;edit/reverse
.0d24	4c a6 0c	               jmp  loop
.0d27	20 f4 12	dof2           jsr  f2action  ;save/flip vert
.0d2a	4c a6 0c	               jmp  loop
.0d2d	20 ac 13	dof3           jsr  f3action  ;load/flip horz
.0d30	4c a6 0c	               jmp  loop
.0d33	20 79 14	dof4           jsr  f4action  ;copy/scroll r
.0d36	4c a6 0c	               jmp  loop
.0d39	20 3f 15	dof5           jsr  f5action  ;clear/scroll l
.0d3c	4c a6 0c	               jmp  loop
.0d3f	20 f7 15	dof6           jsr  f6action  ;fill;/scroll up
.0d42	4c a6 0c	               jmp  loop
.0d45	20 af 16	dof7           jsr  f7action  ;clear;/scroll down
.0d48	4c a6 0c	               jmp  loop
.0d4b	20 6c 17	dof8           jsr  f8action  ; function
.0d4e	4c a6 0c	               jmp  loop
.0d51	20 75 21	doquit         jsr  pop
.0d54	60		               rts
.0d55			editor
.0d55	20 36 21	               jsr  push
.0d58	20 36 21	               jsr  push
.0d5b	a2 88		               ldx  #<blankmsg
.0d5d	a0 19		               ldy  #>blankmsg
.0d5f	20 ce 20	               jsr  putscxy
.0d62	a2 3b		               ldx  #<exit_msg
.0d64	a0 1c		               ldy  #>exit_msg
.0d66	20 ce 20	               jsr  putscxy
.0d69	20 75 21	               jsr  pop
.0d6c	20 36 21	               jsr  push
.0d6f	a2 88		               ldx  #<blankmsg
.0d71	a0 19		               ldy  #>blankmsg
.0d73	20 ce 20	               jsr  putscxy
.0d76	a2 da		               ldx  #<edit_msg
.0d78	a0 19		               ldy  #>edit_msg
.0d7a	20 ce 20	               jsr  putscxy
.0d7d	20 75 21	               jsr  pop
.0d80	20 c3 0e	               jsr  setcurs
.0d83	ad 29 09	               lda  currentkey
.0d86	20 36 21	               jsr  push
.0d89	a2 11		               ldx  #17
.0d8b	a0 05		               ldy  #5
.0d8d	20 5f 20	               jsr  gotoxy
.0d90	20 75 21	               jsr  pop
.0d93	20 fc 23	               jsr  atodec
.0d96	20 36 21	               jsr  push
.0d99	a2 00		isx            ldx  #<adec
.0d9b	a0 23		isy            ldy  #>adec
.0d9d	20 45 20	               jsr  puts
.0da0	20 75 21	               jsr  pull
.0da3	20 07 0f	               jsr  drawbitmap
.0da6	20 56 25	ed_loop        jsr  getkey
.0da9	c9 85		f1             cmp  #f1key
.0dab	d0 03		               bne  cu
.0dad	4c 95 0e	               jmp  do_ctrlx
.0db0	c9 91		cu             cmp  #cursu
.0db2	d0 03		               bne  cd
.0db4	4c 40 0e	               jmp  do_up
.0db7	c9 11		cd             cmp  #cursd
.0db9	d0 03		               bne  cl
.0dbb	4c 53 0e	               jmp  do_down
.0dbe	c9 9d		cl             cmp  #cursl
.0dc0	d0 03		               bne  cr
.0dc2	4c 66 0e	               jmp  do_left
.0dc5	c9 1d		cr             cmp  #cursr
.0dc7	d0 03		               bne  cx
.0dc9	4c 79 0e	               jmp  do_right
.0dcc	c9 18		cx             cmp  #ctrl_x
.0dce	d0 03		               bne  sp
.0dd0	4c 95 0e	               jmp  do_ctrlx
.0dd3	c9 20		sp             cmp  #$20
.0dd5	d0 03		               bne  ishex14
.0dd7	4c 8c 0e	               jmp  do_swap
.0dda	c9 14		ishex14        cmp  #$14
.0ddc	d0 03		               bne  ishex12
.0dde	4c 8c 0e	               jmp  do_swap
.0de1	c9 12		ishex12        cmp  #$12
.0de3	d0 03		               bne  rest
.0de5	4c 8c 0e	               jmp  do_swap
.0de8			rest
.0de8	20 36 21	               jsr  push
.0deb	a2 0d		               ldx  #13
.0ded	a0 0c		               ldy  #12
.0def	20 5f 20	               jsr  gotoxy
.0df2	20 75 21	               jsr  pop
.0df5	20 3f 20	               jsr  putch
.0df8	48		               pha
.0df9	ad 29 09	               lda  currentkey
.0dfc	8d 2a 09	               sta  previouskey
.0dff	68		               pla
.0e00	8d 29 09	               sta  currentkey
.0e03	aa		               tax
.0e04	bc 31 24	               ldy  asciitorom,x
.0e07	8c 2b 09	               sty  bitmapoffset
.0e0a	20 5c 0b	               jsr  drawkeyval
.0e0d	20 07 0f	               jsr  drawbitmap
.0e10	20 36 21	               jsr  push
.0e13	a2 0d		               ldx  #13
.0e15	a0 0c		               ldy  #12
.0e17	20 5f 20	               jsr  gotoxy
.0e1a	20 75 21	               jsr  pop
.0e1d	20 3f 20	               jsr  putch
.0e20	20 36 21	               jsr  push
.0e23	a2 11		               ldx  #17
.0e25	a0 05		               ldy  #5
.0e27	20 5f 20	               jsr  gotoxy
.0e2a	20 75 21	               jsr  pop
.0e2d	20 fc 23	               jsr  atodec
.0e30	20 36 21	               jsr  push
.0e33	a2 00		isx            ldx  #<adec
.0e35	a0 23		isy            ldy  #>adec
.0e37	20 45 20	               jsr  puts
.0e3a	20 75 21	               jsr  pull
.0e3d	4c 92 0e	               jmp  totop
.0e40	ad 32 09	do_up          lda  cursln
.0e43	c9 09		               cmp  #grid_top
.0e45	f0 4b		               beq  totop
.0e47	20 e5 0e	               jsr  clrcurs
.0e4a	ce 32 09	               dec  cursln
.0e4d	20 c3 0e	               jsr  setcurs
.0e50	4c 92 0e	               jmp  totop
.0e53	ad 32 09	do_down        lda  cursln
.0e56	c9 10		               cmp  #grid_bot
.0e58	f0 38		               beq  totop
.0e5a	20 e5 0e	               jsr  clrcurs
.0e5d	ee 32 09	               inc  cursln
.0e60	20 c3 0e	               jsr  setcurs
.0e63	4c 92 0e	               jmp  totop
.0e66	ad 33 09	do_left        lda  curscl
.0e69	c9 01		               cmp  #grid_left
.0e6b	f0 25		               beq  totop
.0e6d	20 e5 0e	               jsr  clrcurs
.0e70	ce 33 09	               dec  curscl
.0e73	20 c3 0e	               jsr  setcurs
.0e76	4c 92 0e	               jmp  totop
.0e79	ad 33 09	do_right       lda  curscl
.0e7c	c9 08		               cmp  #grid_right
.0e7e	f0 12		               beq  totop
.0e80	20 e5 0e	               jsr  clrcurs
.0e83	ee 33 09	               inc  curscl
.0e86	20 c3 0e	               jsr  setcurs
.0e89	4c 92 0e	               jmp  totop
.0e8c	20 9c 0e	do_swap        jsr  do_eor
.0e8f	20 07 0f	               jsr  drawbitmap
.0e92	4c a6 0d	totop          jmp  ed_loop
.0e95	20 e5 0e	do_ctrlx       jsr  clrcurs
.0e98	20 75 21	               jsr  pop
.0e9b	60		               rts
.0e9c			do_eor
.0e9c	20 36 21	               jsr  push
.0e9f	ad 2c 09	               lda  mapaddr
.0ea2	85 fd		               sta  zpage2
.0ea4	ad 2d 09	               lda  mapaddr+1
.0ea7	85 fe		               sta  zpage2+1
.0ea9	ae 32 09	               ldx  cursln     ; calcul de
.0eac	ca		               dex            ; l'offset de
.0ead	8a		               txa            ; la
.0eae	29 f7		               and  #$f7      ; ligne
.0eb0	a8		               tay
.0eb1	ae 33 09	               ldx  curscl
.0eb4	ca		               dex
.0eb5	bd 1e 09	               lda  eorval,x
.0eb8	51 fd		               eor  (zpage2),y
.0eba	20 5c 0b	               jsr  drawkeyval
.0ebd	91 fd		               sta  (zpage2),y
.0ebf	20 75 21	               jsr  pop
.0ec2	60		               rts
.0ec3			setcurs
.0ec3	20 36 21	               jsr  push
.0ec6	a2 01		               ldx  #grid_left
.0ec8	ac 32 09	               ldy  cursln
.0ecb	20 5f 20	               jsr  gotoxy
.0ece	a9 da		               lda  #$da
.0ed0	20 3f 20	               jsr  putch
.0ed3	ae 33 09	               ldx  curscl
.0ed6	e8		               inx
.0ed7	a0 08		               ldy  #grid_top-1
.0ed9	20 5f 20	               jsr  gotoxy
.0edc	a9 da		               lda  #$da
.0ede	20 3f 20	               jsr  putch
.0ee1	20 75 21	               jsr  pop
.0ee4	60		               rts
.0ee5			clrcurs
.0ee5	20 36 21	               jsr  push
.0ee8	a2 01		               ldx  #grid_left
.0eea	ac 32 09	               ldy  cursln
.0eed	20 5f 20	               jsr  gotoxy
.0ef0	a9 20		               lda  #$20
.0ef2	20 3f 20	               jsr  putch
.0ef5	ae 33 09	               ldx  curscl
.0ef8	e8		               inx
.0ef9	a0 08		               ldy  #grid_top-1
.0efb	20 5f 20	               jsr  gotoxy
.0efe	a9 20		               lda  #$20
.0f00	20 3f 20	               jsr  putch
.0f03	20 75 21	               jsr  pop
.0f06	60		               rts
.0f07			drawbitmap
.0f07	20 36 21	               jsr  push
.0f0a	20 6e 0f	               jsr  calcmapaddr
.0f0d	ad 2c 09	               lda  mapaddr        ; on pointe sur la table des bitmaps
.0f10	85 fb		               sta  zpage1
.0f12	ad 2d 09	               lda  mapaddr+1
.0f15	85 fc		               sta  zpage1+1
.0f17	a0 00		drawchar       ldy  #$00
.0f19	a2 09		               ldx  #grid_top      ;on replace la ...
.0f1b	8e 24 0f	               stx  isy+1          ;ligne de départ
.0f1e	20 36 21	nextline       jsr  push
.0f21	a2 02		               ldx  #grid_left+1        ; la colonne
.0f23	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.0f25	20 5f 20	               jsr  gotoxy
.0f28	20 75 21	               jsr  pop
.0f2b	b1 fb		               lda  (zpage1),y     ; on li une ligne
.0f2d	20 a0 23	               jsr  atobin
.0f30	20 9d 0f	               jsr  abintograph
.0f33	20 36 21	               jsr  push
.0f36	a2 f7		isx            ldx  #<abin
.0f38	a0 22		isy            ldy  #>abin
.0f3a	20 45 20	               jsr  puts
.0f3d	20 75 21	               jsr  pull
.0f40	ee 24 0f	               inc  isy+1
.0f43	c8		               iny
.0f44	c0 08		               cpy  #$08
.0f46	30 d6		               bmi  nextline
.0f48	20 4f 0f	               jsr  highlight
.0f4b	20 75 21	               jsr  pop
.0f4e	60		               rts
.0f4f			highlight
.0f4f	20 36 21	               jsr  push
.0f52	ae 2a 09	               ldx  previouskey
.0f55	bd 31 24	               lda  asciitorom,x
.0f58	aa		               tax
.0f59	a9 0f		               lda  #charscolor
.0f5b	9d 00 d8	               sta  colorram,x
.0f5e	ae 29 09	               ldx  currentkey
.0f61	bd 31 24	               lda  asciitorom,x
.0f64	aa		               tax
.0f65	a9 01		               lda  #charcolor
.0f67	9d 00 d8	               sta  colorram,x
.0f6a	20 75 21	               jsr  pop
.0f6d	60		               rts
.0f6e			calcmapaddr
.0f6e	20 36 21	               jsr  push
.0f71	ad 1c 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0f74	85 fb		               sta  zpage1
.0f76	ad 1d 09	               lda  bitmapaddr+1
.0f79	85 fc		               sta  zpage1+1
.0f7b	ae 2b 09	               ldx  bitmapoffset
.0f7e	e0 00		               cpx  #$00
.0f80	f0 08		               beq  thesame         ; sommes nous déja à 0
.0f82	a9 08		addagain       lda  #$08
.0f84	20 cd 11	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0f87	ca		               dex                 ; pour chaque caracteres
.0f88	d0 f8		               bne  addagain
.0f8a	48		thesame        pha
.0f8b	a5 fb		               lda  zpage1
.0f8d	8d 2c 09	               sta  mapaddr
.0f90	a5 fc		               lda  zpage1+1
.0f92	8d 2d 09	               sta  mapaddr+1
.0f95	68		               pla
.0f96	20 5c 0b	               jsr  drawkeyval
.0f99	20 75 21	out            jsr  pop
.0f9c	60		               rts
.0f9d			abintograph
.0f9d	20 36 21	               jsr  push
.0fa0	a9 f7		               lda  #<abin
.0fa2	85 fb		               sta  zpage1
.0fa4	a9 22		               lda  #>abin+1
.0fa6	85 fc		               sta  zpage1+1
.0fa8	a0 00		               ldy  #$00
.0faa	b1 fb		nextbit        lda  (zpage1),y
.0fac	c9 30		               cmp  #$30
.0fae	f0 07		               beq  itszero
.0fb0	a9 d1		itsone         lda  #$d1
.0fb2	91 fb		               sta  (zpage1),y
.0fb4	4c bb 0f	               jmp  next
.0fb7	a9 2e		itszero        lda  #$2e
.0fb9	91 fb		               sta  (zpage1),y
.0fbb	c8		next           iny
.0fbc	c0 08		               cpy  #$08
.0fbe	30 ea		               bmi  nextbit
.0fc0	20 75 21	               jsr  pop
.0fc3	60		               rts
.0fc4			setscreenptr
.0fc4	20 36 21	               jsr  push
.0fc7	a9 08		               lda  #$08      ; basic commande to disable ...
.0fc9	20 d2 ff	               jsr  chrout    ; ... character set change.
.0fcc	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.0fcf	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.0fd1	09 0a		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.0fd3	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.0fd6	20 75 21	               jsr  pop
.0fd9	60		               rts
.0fda			copycharset
.0fda	20 36 21	               jsr  push
.0fdd	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0fe0	29 fe		               and  #%11111110     ;254
.0fe2	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0fe5	a5 01		               lda  u6510map       ;$01
.0fe7	29 fb		               and  #%11111011     ;251
.0fe9	85 01		               sta  u6510map       ;$01
.0feb	20 00 10	               jsr  memcopy
.0fee	a5 01		               lda  u6510map       ;$01
.0ff0	09 04		               ora  #%00000100
.0ff2	85 01		               sta  u6510map       ;$01
.0ff4	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0ff7	09 01		               ora  #%00000001     ;254
.0ff9	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0ffc	20 75 21	               jsr  pop
.0fff	60		               rts
.1000			memcopy
.1000	20 36 21	               jsr  push
.1003	ad 18 09	               lda  startaddr
.1006	85 fb		               sta  zpage1
.1008	ad 19 09	               lda  startaddr+1
.100b	85 fc		               sta  zpage1+1
.100d	ad 1c 09	               lda  bitmapaddr
.1010	85 fd		               sta  zpage2
.1012	ad 1d 09	               lda  bitmapaddr+1
.1015	85 fe		               sta  zpage2+1
.1017	a0 00		               ldy  #$00
.1019	b1 fb		onemore        lda  (zpage1),y
.101b	91 fd		               sta  (zpage2),y
.101d	20 3d 22	               jsr  inczp1
.1020	20 55 22	               jsr  inczp2
.1023	a5 fc		               lda  zpage1+1
.1025	cd 1b 09	               cmp  stopaddr+1
.1028	d0 ef		               bne  onemore
.102a	a5 fb		               lda  zpage1
.102c	cd 1a 09	               cmp  stopaddr
.102f	d0 e8		               bne  onemore
.1031	20 75 21	               jsr  pop
.1034	60		               rts
.1035			staticscreen
.1035	48		               pha
.1036	a9 0b		               lda  #bordure
.1038	8d 20 d0	               sta  $d020
.103b	68		               pla
.103c	48		               pha
.103d	a9 00		               lda  #fond
.103f	8d 21 d0	               sta  $d021
.1042	68		               pla
.1043	20 24 11	               jsr  drawlines
.1046	20 00 11	               jsr  drawallchars
.1049	20 6c 11	               jsr  drawgrid
.104c	20 71 10	               jsr  drawfkeys
.104f	20 36 21	               jsr  push
.1052	a2 88		               ldx  #<blankmsg
.1054	a0 19		               ldy  #>blankmsg
.1056	20 ce 20	               jsr  putscxy
.1059	a2 26		               ldx  #<quit_msg
.105b	a0 1c		               ldy  #>quit_msg
.105d	20 ce 20	               jsr  putscxy
.1060	20 75 21	               jsr  pop
.1063	20 36 21	               jsr  push
.1066	a2 00		               ldx  #0
.1068	a0 07		               ldy  #7
.106a	20 5f 20	               jsr  gotoxy
.106d	20 75 21	               jsr  pop
.1070	60		               rts
.1071			drawfkeys
.1071	20 36 21	               jsr  push
.1074	ad 27 09	               lda  fkeyset
.1077	c9 00		               cmp  #$0
.1079	d0 42		               bne  secondks
.107b	a2 08		               ldx #<titremenu1
.107d	a0 1e		               ldy #>titremenu1
.107f	20 ce 20	               jsr putscxy
.1082	a2 3e		               ldx #<f1abutton
.1084	a0 1e		               ldy #>f1abutton
.1086	20 ce 20	               jsr putscxy
.1089	a2 59		               ldx #<f2abutton
.108b	a0 1e		               ldy #>f2abutton
.108d	20 ce 20	               jsr putscxy
.1090	a2 74		               ldx #<f3abutton
.1092	a0 1e		               ldy #>f3abutton
.1094	20 ce 20	               jsr putscxy
.1097	a2 8f		               ldx #<f4abutton
.1099	a0 1e		               ldy #>f4abutton
.109b	20 ce 20	               jsr putscxy
.109e	a2 aa		               ldx #<f5abutton
.10a0	a0 1e		               ldy #>f5abutton
.10a2	20 ce 20	               jsr putscxy
.10a5	a2 c5		               ldx #<f6abutton
.10a7	a0 1e		               ldy #>f6abutton
.10a9	20 ce 20	               jsr putscxy
.10ac	a2 e0		               ldx #<f7abutton
.10ae	a0 1e		               ldy #>f7abutton
.10b0	20 ce 20	               jsr putscxy
.10b3	a2 fb		               ldx #<f8abutton
.10b5	a0 1e		               ldy #>f8abutton
.10b7	20 ce 20	               jsr putscxy
.10ba	4c fc 10	               jmp end
.10bd			secondks
.10bd	a2 23		               ldx #<titremenu2
.10bf	a0 1e		               ldy #>titremenu2
.10c1	20 ce 20	               jsr putscxy
.10c4	a2 16		               ldx #<f1bbutton
.10c6	a0 1f		               ldy #>f1bbutton
.10c8	20 ce 20	               jsr putscxy
.10cb	a2 31		               ldx #<f2bbutton
.10cd	a0 1f		               ldy #>f2bbutton
.10cf	20 ce 20	               jsr putscxy
.10d2	a2 4c		               ldx #<f3bbutton
.10d4	a0 1f		               ldy #>f3bbutton
.10d6	20 ce 20	               jsr putscxy
.10d9	a2 67		               ldx #<f4bbutton
.10db	a0 1f		               ldy #>f4bbutton
.10dd	20 ce 20	               jsr putscxy
.10e0	a2 82		               ldx #<f5bbutton
.10e2	a0 1f		               ldy #>f5bbutton
.10e4	20 ce 20	               jsr putscxy
.10e7	a2 9d		               ldx #<f6bbutton
.10e9	a0 1f		               ldy #>f6bbutton
.10eb	20 ce 20	               jsr putscxy
.10ee	a2 b8		               ldx #<f7bbutton
.10f0	a0 1f		               ldy #>f7bbutton
.10f2	20 ce 20	               jsr putscxy
.10f5	a2 d3		               ldx #<f8bbutton
.10f7	a0 1f		               ldy #>f8bbutton
.10f9	20 ce 20	               jsr putscxy
.10fc	20 75 21	end            jsr  pop
.10ff	60		               rts
.1100			drawallchars
.1100	20 36 21	               jsr push
.1103	20 36 21	               jsr  push
.1106	a2 00		               ldx  #0
.1108	a0 00		               ldy  #0
.110a	20 5f 20	               jsr  gotoxy
.110d	20 75 21	               jsr  pop
.1110	a2 00		               ldx  #$00
.1112	8a		nextc          txa
.1113	9d 00 04	               sta  scrnnewram,x
.1116	a9 0f		               lda  #charscolor
.1118	9d 00 d8	               sta  colorram,x
.111b	e8		               inx
.111c	e0 80		               cpx  #$80
.111e	d0 f2		               bne  nextc
.1120	20 75 21	               jsr  pop
.1123	60		               rts
.1124			drawlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.1124	20 36 21	               jsr  push
.1127	a2 28		               ldx  #40
.1129	a9 40		               lda  #64
.112b	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.112e	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.1131	ca		               dex
.1132	e0 10		hline          cpx  #vlinepos
.1134	10 03		               bpl  notyet
.1136	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.1139	e0 00		notyet         cpx  #$00
.113b	d0 ee		               bne  nextl
.113d	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.113f	85 fb		               sta  zpage1
.1141	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.1143	85 fc		               sta  zpage1+1
.1145	a0 00		               ldy  #0
.1147	a9 72		               lda  #114
.1149	91 fb		               sta  (zpage1),y
.114b	20 db 11	               jsr  zp1add40
.114e	a2 12		               ldx  #24-hline2
.1150	a9 5d		               lda  #93
.1152	91 fb		another93      sta  (zpage1),y
.1154	20 db 11	               jsr  zp1add40
.1157	ca		               dex
.1158	d0 f8		               bne  another93
.115a	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.115c	85 fb		               sta  zpage1
.115e	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.1160	85 fc		               sta  zpage1+1
.1162	a0 00		               ldy  #0
.1164	a9 73		               lda  #115
.1166	91 fb		               sta  (zpage1),y
.1168	20 75 21	               jsr  pop
.116b	60		               rts
.116c			drawgrid
.116c	20 36 21	               jsr  push
.116f	20 ee 1f	               jsr  screendis
.1172	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.1174	85 fb		               sta  zpage1
.1176	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.1178	85 fc		               sta  zpage1+1
.117a	a2 08		               ldx  #8
.117c	a9 65		nextbox        lda  #101
.117e	a0 09		               ldy  #9
.1180	91 fb		               sta  (zpage1),y
.1182	88		               dey
.1183	a9 2e		               lda  #$2e
.1185	91 fb		nextcol        sta  (zpage1),y
.1187	88		               dey
.1188	d0 fb		               bne  nextcol
.118a	20 db 11	               jsr  zp1add40
.118d	ca		               dex
.118e	d0 ec		               bne  nextbox
.1190	a0 08		               ldy  #8
.1192	a9 77		               lda  #119
.1194	91 fb		nextlin        sta  (zpage1),y
.1196	88		               dey
.1197	d0 fb		               bne  nextlin
.1199	a9 3e		               lda  #$3e
.119b	8d eb 05	               sta  scrnnewram+(40*(12))+11
.119e	a9 70		               lda  #$70                     ;+
.11a0	8d c4 05	               sta  scrnnewram+(40*(11))+12
.11a3	a9 43		               lda  #$43                     ;-
.11a5	8d c5 05	               sta  scrnnewram+(40*(11))+13
.11a8	a9 6e		               lda  #$6e                     ;+
.11aa	8d c6 05	               sta  scrnnewram+(40*(11))+14
.11ad	a9 5d		               lda  #$5d                     ;|
.11af	8d ec 05	               sta  scrnnewram+(40*(12))+12
.11b2	a9 5d		               lda  #$5d                     ;|
.11b4	8d ee 05	               sta  scrnnewram+(40*(12))+14
.11b7	a9 6d		               lda  #$6d                     ;+
.11b9	8d 14 06	               sta  scrnnewram+(40*(13))+12
.11bc	a9 43		               lda  #$43                     ;-
.11be	8d 15 06	               sta  scrnnewram+(40*(13))+13
.11c1	a9 7d		               lda  #$7d                     ;+
.11c3	8d 16 06	               sta  scrnnewram+(40*(13))+14
.11c6	20 fb 1f	               jsr screenena
.11c9	20 75 21	               jsr  pop
.11cc	60		               rts
.11cd			zp1addnum
.11cd	08		               php
.11ce	48		               pha
.11cf	18		               clc
.11d0	65 fb		               adc  zpage1
.11d2	90 02		               bcc  nocarry
.11d4	e6 fc		               inc  zpage1+1
.11d6	85 fb		nocarry        sta  zpage1
.11d8	68		               pla
.11d9	28		               plp
.11da	60		               rts
.11db			zp1add40
.11db	08		               php
.11dc	48		               pha
.11dd	18		               clc
.11de	a5 fb		               lda  zpage1
.11e0	69 28		               adc  #40
.11e2	90 02		               bcc  nocarry
.11e4	e6 fc		               inc  zpage1+1
.11e6	85 fb		nocarry        sta  zpage1
.11e8	68		               pla
.11e9	28		               plp
.11ea	60		               rts
.11eb			delay
.11eb	20 36 21	               jsr  push
.11ee	a9 00		               lda  #$0
.11f0	aa		               tax
.11f1	a8		               tay
.11f2	ca		xagain         dex
.11f3	ca		               dex
.11f4	88		yagain         dey
.11f5	c0 00		               cpy  #$00
.11f7	d0 fb		               bne  yagain
.11f9	e0 00		               cpx  #$00
.11fb	d0 f5		               bne  xagain
.11fd	20 75 21	               jsr  pop
.1200	60		               rts
.1201			f1action
.1201	48		               pha
.1202	a9 ff		               lda  #$ff
.1204	8d 26 09	               sta  editmode
.1207	ad 27 09	               lda  fkeyset
.120a	f0 03		               beq  menua
.120c	4c 94 12	               jmp  menub
.120f			menua
.120f	20 36 21	               jsr  push
.1212	a2 88		               ldx  #<blankmsg
.1214	a0 19		               ldy  #>blankmsg
.1216	20 ce 20	               jsr  putscxy
.1219	a2 da		               ldx  #<f1a_msg
.121b	a0 19		               ldy  #>f1a_msg
.121d	20 ce 20	               jsr  putscxy
.1220	20 75 21	               jsr  pop
.1223	08		               php
.1224	48		               pha
.1225	8a		               txa
.1226	48		               pha
.1227	ad 3e 1e	               lda  f1abutton
.122a	48		               pha
.122b	a9 92		               lda  #146
.122d	8d 50 1e	               sta  f1abutton+18
.1230	a9 01		               lda  #flashcol
.1232	8d 3e 1e	               sta  f1abutton
.1235	a2 3e		               ldx  #<f1abutton
.1237	a0 1e		               ldy  #>f1abutton
.1239	20 ce 20	               jsr  putscxy
.123c	20 eb 11	               jsr  delay
.123f	a9 12		               lda  #18
.1241	8d 50 1e	               sta  f1abutton+18
.1244	68		               pla
.1245	8d 3e 1e	               sta  f1abutton
.1248	a2 3e		               ldx  #<f1abutton
.124a	a0 1e		               ldy  #>f1abutton
.124c	20 ce 20	               jsr  putscxy
.124f	68		               pla
.1250	aa		               tax
.1251	68		               pla
.1252	28		               plp
.1253	a9 0b		               lda  #vgris
.1255	20 1e 0b	               jsr  setmenuacolor
.1258	a9 03		               lda  #menu1col1
.125a	8d 3e 1e	               sta  f1abutton
.125d	20 71 10	               jsr  drawfkeys
.1260	20 55 0d	               jsr  editor
.1263	20 36 21	               jsr  push
.1266	a2 88		               ldx  #<blankmsg
.1268	a0 19		               ldy  #>blankmsg
.126a	20 ce 20	               jsr  putscxy
.126d	a2 26		               ldx  #<quit_msg
.126f	a0 1c		               ldy  #>quit_msg
.1271	20 ce 20	               jsr  putscxy
.1274	20 75 21	               jsr  pop
.1277	20 36 21	               jsr  push
.127a	a2 88		               ldx  #<blankmsg
.127c	a0 19		               ldy  #>blankmsg
.127e	20 ce 20	               jsr  putscxy
.1281	a2 7e		               ldx  #<menua_msg
.1283	a0 1b		               ldy  #>menua_msg
.1285	20 ce 20	               jsr  putscxy
.1288	20 75 21	               jsr  pop
.128b	20 d8 0a	               jsr  resetmenuacolor
.128e	20 71 10	               jsr  drawfkeys
.1291	4c de 12	               jmp  out
.1294			menub
.1294	20 36 21	               jsr  push
.1297	a2 88		               ldx  #<blankmsg
.1299	a0 19		               ldy  #>blankmsg
.129b	20 ce 20	               jsr  putscxy
.129e	a2 c2		               ldx  #<f1b_msg
.12a0	a0 1a		               ldy  #>f1b_msg
.12a2	20 ce 20	               jsr  putscxy
.12a5	20 75 21	               jsr  pop
.12a8	08		               php
.12a9	48		               pha
.12aa	8a		               txa
.12ab	48		               pha
.12ac	ad 16 1f	               lda  f1bbutton
.12af	48		               pha
.12b0	a9 92		               lda  #146
.12b2	8d 28 1f	               sta  f1bbutton+18
.12b5	a9 01		               lda  #flashcol
.12b7	8d 16 1f	               sta  f1bbutton
.12ba	a2 16		               ldx  #<f1bbutton
.12bc	a0 1f		               ldy  #>f1bbutton
.12be	20 ce 20	               jsr  putscxy
.12c1	20 eb 11	               jsr  delay
.12c4	a9 12		               lda  #18
.12c6	8d 28 1f	               sta  f1bbutton+18
.12c9	68		               pla
.12ca	8d 16 1f	               sta  f1bbutton
.12cd	a2 16		               ldx  #<f1bbutton
.12cf	a0 1f		               ldy  #>f1bbutton
.12d1	20 ce 20	               jsr  putscxy
.12d4	68		               pla
.12d5	aa		               tax
.12d6	68		               pla
.12d7	28		               plp
.12d8	20 54 19	               jsr  flipvert
.12db	20 07 0f	               jsr  drawbitmap
.12de	68		out            pla
.12df	20 36 21	               jsr  push
.12e2	a2 88		               ldx  #<blankmsg
.12e4	a0 19		               ldy  #>blankmsg
.12e6	20 ce 20	               jsr  putscxy
.12e9	a2 b4		               ldx  #<prompt_msg
.12eb	a0 19		               ldy  #>prompt_msg
.12ed	20 ce 20	               jsr  putscxy
.12f0	20 75 21	               jsr  pop
.12f3	60		               rts
.12f4			f2action
.12f4	48		               pha
.12f5	a9 00		               lda  #$0
.12f7	8d 26 09	               sta  editmode
.12fa	ad 27 09	               lda  fkeyset
.12fd	d0 4d		               bne  menub
.12ff	20 36 21	               jsr  push
.1302	a2 88		               ldx  #<blankmsg
.1304	a0 19		               ldy  #>blankmsg
.1306	20 ce 20	               jsr  putscxy
.1309	a2 f5		               ldx  #<f2a_msg
.130b	a0 19		               ldy  #>f2a_msg
.130d	20 ce 20	               jsr  putscxy
.1310	20 75 21	               jsr  pop
.1313	08		               php
.1314	48		               pha
.1315	8a		               txa
.1316	48		               pha
.1317	ad 59 1e	               lda  f2abutton
.131a	48		               pha
.131b	a9 92		               lda  #146
.131d	8d 6b 1e	               sta  f2abutton+18
.1320	a9 01		               lda  #flashcol
.1322	8d 59 1e	               sta  f2abutton
.1325	a2 59		               ldx  #<f2abutton
.1327	a0 1e		               ldy  #>f2abutton
.1329	20 ce 20	               jsr  putscxy
.132c	20 eb 11	               jsr  delay
.132f	a9 12		               lda  #18
.1331	8d 6b 1e	               sta  f2abutton+18
.1334	68		               pla
.1335	8d 59 1e	               sta  f2abutton
.1338	a2 59		               ldx  #<f2abutton
.133a	a0 1e		               ldy  #>f2abutton
.133c	20 ce 20	               jsr  putscxy
.133f	68		               pla
.1340	aa		               tax
.1341	68		               pla
.1342	28		               plp
.1343	20 c0 09	               jsr  copychar
.1346	20 07 0f	               jsr  drawbitmap
.1349	4c 96 13	               jmp  out
.134c			menub
.134c	20 36 21	               jsr  push
.134f	a2 88		               ldx  #<blankmsg
.1351	a0 19		               ldy  #>blankmsg
.1353	20 ce 20	               jsr  putscxy
.1356	a2 de		               ldx  #<f2b_msg
.1358	a0 1a		               ldy  #>f2b_msg
.135a	20 ce 20	               jsr  putscxy
.135d	20 75 21	               jsr  pop
.1360	08		               php
.1361	48		               pha
.1362	8a		               txa
.1363	48		               pha
.1364	ad 31 1f	               lda  f2bbutton
.1367	48		               pha
.1368	a9 92		               lda  #146
.136a	8d 43 1f	               sta  f2bbutton+18
.136d	a9 01		               lda  #flashcol
.136f	8d 31 1f	               sta  f2bbutton
.1372	a2 31		               ldx  #<f2bbutton
.1374	a0 1f		               ldy  #>f2bbutton
.1376	20 ce 20	               jsr  putscxy
.1379	20 eb 11	               jsr  delay
.137c	a9 12		               lda  #18
.137e	8d 43 1f	               sta  f2bbutton+18
.1381	68		               pla
.1382	8d 31 1f	               sta  f2bbutton
.1385	a2 31		               ldx  #<f2bbutton
.1387	a0 1f		               ldy  #>f2bbutton
.1389	20 ce 20	               jsr  putscxy
.138c	68		               pla
.138d	aa		               tax
.138e	68		               pla
.138f	28		               plp
.1390	20 27 19	               jsr  fliphorz
.1393	20 07 0f	               jsr  drawbitmap
.1396	68		out            pla
.1397	20 36 21	               jsr  push
.139a	a2 88		               ldx  #<blankmsg
.139c	a0 19		               ldy  #>blankmsg
.139e	20 ce 20	               jsr  putscxy
.13a1	a2 b4		               ldx  #<prompt_msg
.13a3	a0 19		               ldy  #>prompt_msg
.13a5	20 ce 20	               jsr  putscxy
.13a8	20 75 21	               jsr  pop
.13ab	60		               rts
.13ac			f3action
.13ac	48		               pha
.13ad	a9 00		               lda  #$0
.13af	8d 26 09	               sta  editmode
.13b2	ad 27 09	               lda  fkeyset
.13b5	d0 62		               bne  menub
.13b7	08		               php
.13b8	48		               pha
.13b9	8a		               txa
.13ba	48		               pha
.13bb	ad 74 1e	               lda  f3abutton
.13be	48		               pha
.13bf	a9 92		               lda  #146
.13c1	8d 86 1e	               sta  f3abutton+18
.13c4	a9 01		               lda  #flashcol
.13c6	8d 74 1e	               sta  f3abutton
.13c9	a2 74		               ldx  #<f3abutton
.13cb	a0 1e		               ldy  #>f3abutton
.13cd	20 ce 20	               jsr  putscxy
.13d0	20 eb 11	               jsr  delay
.13d3	a9 12		               lda  #18
.13d5	8d 86 1e	               sta  f3abutton+18
.13d8	68		               pla
.13d9	8d 74 1e	               sta  f3abutton
.13dc	a2 74		               ldx  #<f3abutton
.13de	a0 1e		               ldy  #>f3abutton
.13e0	20 ce 20	               jsr  putscxy
.13e3	68		               pla
.13e4	aa		               tax
.13e5	68		               pla
.13e6	28		               plp
.13e7	20 36 21	               jsr  push
.13ea	a2 88		               ldx  #<blankmsg
.13ec	a0 19		               ldy  #>blankmsg
.13ee	20 ce 20	               jsr  putscxy
.13f1	a2 16		               ldx  #<f3a_msg
.13f3	a0 1a		               ldy  #>f3a_msg
.13f5	20 ce 20	               jsr  putscxy
.13f8	20 75 21	               jsr  pop
.13fb	20 56 25	getagain       jsr  getkey
.13fe	c9 31		               cmp  #$31
.1400	f0 0b		               beq  devok
.1402	c9 38		               cmp  #$38
.1404	f0 07		               beq  devok
.1406	c9 39		               cmp  #$39
.1408	f0 03		               beq  devok
.140a	4c fb 13	               jmp  getagain
.140d	8d 46 09	devok          sta  device
.1410	20 4e 09	               jsr  getfname
.1413	20 cc 08	               jsr  loadfromfile
.1416	4c 63 14	               jmp  out
.1419			menub
.1419	20 36 21	               jsr  push
.141c	a2 88		               ldx  #<blankmsg
.141e	a0 19		               ldy  #>blankmsg
.1420	20 ce 20	               jsr  putscxy
.1423	a2 fc		               ldx  #<f3b_msg
.1425	a0 1a		               ldy  #>f3b_msg
.1427	20 ce 20	               jsr  putscxy
.142a	20 75 21	               jsr  pop
.142d	08		               php
.142e	48		               pha
.142f	8a		               txa
.1430	48		               pha
.1431	ad 4c 1f	               lda  f3bbutton
.1434	48		               pha
.1435	a9 92		               lda  #146
.1437	8d 5e 1f	               sta  f3bbutton+18
.143a	a9 01		               lda  #flashcol
.143c	8d 4c 1f	               sta  f3bbutton
.143f	a2 4c		               ldx  #<f3bbutton
.1441	a0 1f		               ldy  #>f3bbutton
.1443	20 ce 20	               jsr  putscxy
.1446	20 eb 11	               jsr  delay
.1449	a9 12		               lda  #18
.144b	8d 5e 1f	               sta  f3bbutton+18
.144e	68		               pla
.144f	8d 4c 1f	               sta  f3bbutton
.1452	a2 4c		               ldx  #<f3bbutton
.1454	a0 1f		               ldy  #>f3bbutton
.1456	20 ce 20	               jsr  putscxy
.1459	68		               pla
.145a	aa		               tax
.145b	68		               pla
.145c	28		               plp
.145d	20 b2 18	               jsr  scrollright
.1460	20 07 0f	               jsr  drawbitmap
.1463	68		out            pla
.1464	20 36 21	               jsr  push
.1467	a2 88		               ldx  #<blankmsg
.1469	a0 19		               ldy  #>blankmsg
.146b	20 ce 20	               jsr  putscxy
.146e	a2 b4		               ldx  #<prompt_msg
.1470	a0 19		               ldy  #>prompt_msg
.1472	20 ce 20	               jsr  putscxy
.1475	20 75 21	               jsr  pop
.1478	60		               rts
.1479			f4action
.1479	48		               pha
.147a	a9 00		               lda  #$0
.147c	8d 26 09	               sta  editmode
.147f	ad 27 09	               lda  fkeyset
.1482	d0 5b		               bne  menub
.1484	08		               php
.1485	48		               pha
.1486	8a		               txa
.1487	48		               pha
.1488	ad 8f 1e	               lda  f4abutton
.148b	48		               pha
.148c	a9 92		               lda  #146
.148e	8d a1 1e	               sta  f4abutton+18
.1491	a9 01		               lda  #flashcol
.1493	8d 8f 1e	               sta  f4abutton
.1496	a2 8f		               ldx  #<f4abutton
.1498	a0 1e		               ldy  #>f4abutton
.149a	20 ce 20	               jsr  putscxy
.149d	20 eb 11	               jsr  delay
.14a0	a9 12		               lda  #18
.14a2	8d a1 1e	               sta  f4abutton+18
.14a5	68		               pla
.14a6	8d 8f 1e	               sta  f4abutton
.14a9	a2 8f		               ldx  #<f4abutton
.14ab	a0 1e		               ldy  #>f4abutton
.14ad	20 ce 20	               jsr  putscxy
.14b0	68		               pla
.14b1	aa		               tax
.14b2	68		               pla
.14b3	28		               plp
.14b4	20 36 21	               jsr  push
.14b7	a2 88		               ldx  #<blankmsg
.14b9	a0 19		               ldy  #>blankmsg
.14bb	20 ce 20	               jsr  putscxy
.14be	a2 43		               ldx  #<f4a_msg
.14c0	a0 1a		               ldy  #>f4a_msg
.14c2	20 ce 20	               jsr  putscxy
.14c5	20 75 21	               jsr  pop
.14c8	20 56 25	getagain       jsr  getkey
.14cb	c9 43		               cmp  #$43
.14cd	f0 07		               beq  devok
.14cf	c9 44		               cmp  #$44
.14d1	f0 03		               beq  devok
.14d3	4c c8 14	               jmp  getagain
.14d6	8d 46 09	devok          sta  device
.14d9	20 4e 09	               jsr  getfname
.14dc	4c 29 15	               jmp  out
.14df			menub
.14df	20 36 21	               jsr  push
.14e2	a2 88		               ldx  #<blankmsg
.14e4	a0 19		               ldy  #>blankmsg
.14e6	20 ce 20	               jsr  putscxy
.14e9	a2 18		               ldx  #<f4b_msg
.14eb	a0 1b		               ldy  #>f4b_msg
.14ed	20 ce 20	               jsr  putscxy
.14f0	20 75 21	               jsr  pop
.14f3	08		               php
.14f4	48		               pha
.14f5	8a		               txa
.14f6	48		               pha
.14f7	ad 67 1f	               lda  f4bbutton
.14fa	48		               pha
.14fb	a9 92		               lda  #146
.14fd	8d 79 1f	               sta  f4bbutton+18
.1500	a9 01		               lda  #flashcol
.1502	8d 67 1f	               sta  f4bbutton
.1505	a2 67		               ldx  #<f4bbutton
.1507	a0 1f		               ldy  #>f4bbutton
.1509	20 ce 20	               jsr  putscxy
.150c	20 eb 11	               jsr  delay
.150f	a9 12		               lda  #18
.1511	8d 79 1f	               sta  f4bbutton+18
.1514	68		               pla
.1515	8d 67 1f	               sta  f4bbutton
.1518	a2 67		               ldx  #<f4bbutton
.151a	a0 1f		               ldy  #>f4bbutton
.151c	20 ce 20	               jsr  putscxy
.151f	68		               pla
.1520	aa		               tax
.1521	68		               pla
.1522	28		               plp
.1523	20 d7 18	               jsr  scrollleft
.1526	20 07 0f	               jsr  drawbitmap
.1529	68		out            pla
.152a	20 36 21	               jsr  push
.152d	a2 88		               ldx  #<blankmsg
.152f	a0 19		               ldy  #>blankmsg
.1531	20 ce 20	               jsr  putscxy
.1534	a2 b4		               ldx  #<prompt_msg
.1536	a0 19		               ldy  #>prompt_msg
.1538	20 ce 20	               jsr  putscxy
.153b	20 75 21	               jsr  pop
.153e	60		               rts
.153f			f5action
.153f	48		               pha
.1540	a9 00		               lda  #$0
.1542	8d 26 09	               sta  editmode
.1545	ad 27 09	               lda  fkeyset
.1548	d0 4d		               bne  menub
.154a	20 36 21	               jsr  push
.154d	a2 88		               ldx  #<blankmsg
.154f	a0 19		               ldy  #>blankmsg
.1551	20 ce 20	               jsr  putscxy
.1554	a2 6b		               ldx  #<f5a_msg
.1556	a0 1a		               ldy  #>f5a_msg
.1558	20 ce 20	               jsr  putscxy
.155b	20 75 21	               jsr  pop
.155e	08		               php
.155f	48		               pha
.1560	8a		               txa
.1561	48		               pha
.1562	ad aa 1e	               lda  f5abutton
.1565	48		               pha
.1566	a9 92		               lda  #146
.1568	8d bc 1e	               sta  f5abutton+18
.156b	a9 01		               lda  #flashcol
.156d	8d aa 1e	               sta  f5abutton
.1570	a2 aa		               ldx  #<f5abutton
.1572	a0 1e		               ldy  #>f5abutton
.1574	20 ce 20	               jsr  putscxy
.1577	20 eb 11	               jsr  delay
.157a	a9 12		               lda  #18
.157c	8d bc 1e	               sta  f5abutton+18
.157f	68		               pla
.1580	8d aa 1e	               sta  f5abutton
.1583	a2 aa		               ldx  #<f5abutton
.1585	a0 1e		               ldy  #>f5abutton
.1587	20 ce 20	               jsr  putscxy
.158a	68		               pla
.158b	aa		               tax
.158c	68		               pla
.158d	28		               plp
.158e	20 05 19	               jsr  clearchar
.1591	20 07 0f	               jsr  drawbitmap
.1594	4c e1 15	               jmp  out
.1597			menub
.1597	20 36 21	               jsr  push
.159a	a2 88		               ldx  #<blankmsg
.159c	a0 19		               ldy  #>blankmsg
.159e	20 ce 20	               jsr  putscxy
.15a1	a2 34		               ldx  #<f5b_msg
.15a3	a0 1b		               ldy  #>f5b_msg
.15a5	20 ce 20	               jsr  putscxy
.15a8	20 75 21	               jsr  pop
.15ab	08		               php
.15ac	48		               pha
.15ad	8a		               txa
.15ae	48		               pha
.15af	ad 82 1f	               lda  f5bbutton
.15b2	48		               pha
.15b3	a9 92		               lda  #146
.15b5	8d 94 1f	               sta  f5bbutton+18
.15b8	a9 01		               lda  #flashcol
.15ba	8d 82 1f	               sta  f5bbutton
.15bd	a2 82		               ldx  #<f5bbutton
.15bf	a0 1f		               ldy  #>f5bbutton
.15c1	20 ce 20	               jsr  putscxy
.15c4	20 eb 11	               jsr  delay
.15c7	a9 12		               lda  #18
.15c9	8d 94 1f	               sta  f5bbutton+18
.15cc	68		               pla
.15cd	8d 82 1f	               sta  f5bbutton
.15d0	a2 82		               ldx  #<f5bbutton
.15d2	a0 1f		               ldy  #>f5bbutton
.15d4	20 ce 20	               jsr  putscxy
.15d7	68		               pla
.15d8	aa		               tax
.15d9	68		               pla
.15da	28		               plp
.15db	20 40 18	               jsr  scrollup
.15de	20 07 0f	               jsr  drawbitmap
.15e1	68		out            pla
.15e2	20 36 21	               jsr  push
.15e5	a2 88		               ldx  #<blankmsg
.15e7	a0 19		               ldy  #>blankmsg
.15e9	20 ce 20	               jsr  putscxy
.15ec	a2 b4		               ldx  #<prompt_msg
.15ee	a0 19		               ldy  #>prompt_msg
.15f0	20 ce 20	               jsr  putscxy
.15f3	20 75 21	               jsr  pop
.15f6	60		               rts
.15f7			f6action
.15f7	48		               pha
.15f8	a9 00		               lda  #$0
.15fa	8d 26 09	               sta  editmode
.15fd	ad 27 09	               lda  fkeyset
.1600	d0 4d		               bne  menub
.1602	20 36 21	               jsr  push
.1605	a2 88		               ldx  #<blankmsg
.1607	a0 19		               ldy  #>blankmsg
.1609	20 ce 20	               jsr  putscxy
.160c	a2 87		               ldx  #<f6a_msg
.160e	a0 1a		               ldy  #>f6a_msg
.1610	20 ce 20	               jsr  putscxy
.1613	20 75 21	               jsr  pop
.1616	08		               php
.1617	48		               pha
.1618	8a		               txa
.1619	48		               pha
.161a	ad c5 1e	               lda  f6abutton
.161d	48		               pha
.161e	a9 92		               lda  #146
.1620	8d d7 1e	               sta  f6abutton+18
.1623	a9 01		               lda  #flashcol
.1625	8d c5 1e	               sta  f6abutton
.1628	a2 c5		               ldx  #<f6abutton
.162a	a0 1e		               ldy  #>f6abutton
.162c	20 ce 20	               jsr  putscxy
.162f	20 eb 11	               jsr  delay
.1632	a9 12		               lda  #18
.1634	8d d7 1e	               sta  f6abutton+18
.1637	68		               pla
.1638	8d c5 1e	               sta  f6abutton
.163b	a2 c5		               ldx  #<f6abutton
.163d	a0 1e		               ldy  #>f6abutton
.163f	20 ce 20	               jsr  putscxy
.1642	68		               pla
.1643	aa		               tax
.1644	68		               pla
.1645	28		               plp
.1646	20 f9 18	               jsr  fillchar
.1649	20 07 0f	               jsr  drawbitmap
.164c	4c 99 16	               jmp  out
.164f			menub
.164f	20 36 21	               jsr  push
.1652	a2 88		               ldx  #<blankmsg
.1654	a0 19		               ldy  #>blankmsg
.1656	20 ce 20	               jsr  putscxy
.1659	a2 4e		               ldx  #<f6b_msg
.165b	a0 1b		               ldy  #>f6b_msg
.165d	20 ce 20	               jsr  putscxy
.1660	20 75 21	               jsr  pop
.1663	08		               php
.1664	48		               pha
.1665	8a		               txa
.1666	48		               pha
.1667	ad 9d 1f	               lda  f6bbutton
.166a	48		               pha
.166b	a9 92		               lda  #146
.166d	8d af 1f	               sta  f6bbutton+18
.1670	a9 01		               lda  #flashcol
.1672	8d 9d 1f	               sta  f6bbutton
.1675	a2 9d		               ldx  #<f6bbutton
.1677	a0 1f		               ldy  #>f6bbutton
.1679	20 ce 20	               jsr  putscxy
.167c	20 eb 11	               jsr  delay
.167f	a9 12		               lda  #18
.1681	8d af 1f	               sta  f6bbutton+18
.1684	68		               pla
.1685	8d 9d 1f	               sta  f6bbutton
.1688	a2 9d		               ldx  #<f6bbutton
.168a	a0 1f		               ldy  #>f6bbutton
.168c	20 ce 20	               jsr  putscxy
.168f	68		               pla
.1690	aa		               tax
.1691	68		               pla
.1692	28		               plp
.1693	20 78 18	               jsr  scrolldown
.1696	20 07 0f	               jsr  drawbitmap
.1699	68		out            pla
.169a	20 36 21	               jsr  push
.169d	a2 88		               ldx  #<blankmsg
.169f	a0 19		               ldy  #>blankmsg
.16a1	20 ce 20	               jsr  putscxy
.16a4	a2 b4		               ldx  #<prompt_msg
.16a6	a0 19		               ldy  #>prompt_msg
.16a8	20 ce 20	               jsr  putscxy
.16ab	20 75 21	               jsr  pop
.16ae	60		               rts
.16af			f7action
.16af	48		               pha
.16b0	a9 00		               lda  #$0
.16b2	8d 26 09	               sta  editmode
.16b5	ad 27 09	               lda  fkeyset
.16b8	d0 4d		               bne  menub
.16ba	20 36 21	               jsr  push
.16bd	a2 88		               ldx  #<blankmsg
.16bf	a0 19		               ldy  #>blankmsg
.16c1	20 ce 20	               jsr  putscxy
.16c4	a2 a4		               ldx  #<f7a_msg
.16c6	a0 1a		               ldy  #>f7a_msg
.16c8	20 ce 20	               jsr  putscxy
.16cb	20 75 21	               jsr  pop
.16ce	08		               php
.16cf	48		               pha
.16d0	8a		               txa
.16d1	48		               pha
.16d2	ad e0 1e	               lda  f7abutton
.16d5	48		               pha
.16d6	a9 92		               lda  #146
.16d8	8d f2 1e	               sta  f7abutton+18
.16db	a9 01		               lda  #flashcol
.16dd	8d e0 1e	               sta  f7abutton
.16e0	a2 e0		               ldx  #<f7abutton
.16e2	a0 1e		               ldy  #>f7abutton
.16e4	20 ce 20	               jsr  putscxy
.16e7	20 eb 11	               jsr  delay
.16ea	a9 12		               lda  #18
.16ec	8d f2 1e	               sta  f7abutton+18
.16ef	68		               pla
.16f0	8d e0 1e	               sta  f7abutton
.16f3	a2 e0		               ldx  #<f7abutton
.16f5	a0 1e		               ldy  #>f7abutton
.16f7	20 ce 20	               jsr  putscxy
.16fa	68		               pla
.16fb	aa		               tax
.16fc	68		               pla
.16fd	28		               plp
.16fe	20 da 0f	               jsr  copycharset
.1701	20 07 0f	               jsr  drawbitmap
.1704	4c 56 17	               jmp  out
.1707	a9 00		menub          lda  #$0
.1709	8d 26 09	               sta  editmode
.170c	20 36 21	               jsr  push
.170f	a2 88		               ldx  #<blankmsg
.1711	a0 19		               ldy  #>blankmsg
.1713	20 ce 20	               jsr  putscxy
.1716	a2 67		               ldx  #<f7b_msg
.1718	a0 1b		               ldy  #>f7b_msg
.171a	20 ce 20	               jsr  putscxy
.171d	20 75 21	               jsr  pop
.1720	08		               php
.1721	48		               pha
.1722	8a		               txa
.1723	48		               pha
.1724	ad b8 1f	               lda  f7bbutton
.1727	48		               pha
.1728	a9 92		               lda  #146
.172a	8d ca 1f	               sta  f7bbutton+18
.172d	a9 01		               lda  #flashcol
.172f	8d b8 1f	               sta  f7bbutton
.1732	a2 b8		               ldx  #<f7bbutton
.1734	a0 1f		               ldy  #>f7bbutton
.1736	20 ce 20	               jsr  putscxy
.1739	20 eb 11	               jsr  delay
.173c	a9 12		               lda  #18
.173e	8d ca 1f	               sta  f7bbutton+18
.1741	68		               pla
.1742	8d b8 1f	               sta  f7bbutton
.1745	a2 b8		               ldx  #<f7bbutton
.1747	a0 1f		               ldy  #>f7bbutton
.1749	20 ce 20	               jsr  putscxy
.174c	68		               pla
.174d	aa		               tax
.174e	68		               pla
.174f	28		               plp
.1750	20 20 18	               jsr  reverse
.1753	20 07 0f	               jsr  drawbitmap
.1756	68		out            pla
.1757	20 36 21	               jsr  push
.175a	a2 88		               ldx  #<blankmsg
.175c	a0 19		               ldy  #>blankmsg
.175e	20 ce 20	               jsr  putscxy
.1761	a2 b4		               ldx  #<prompt_msg
.1763	a0 19		               ldy  #>prompt_msg
.1765	20 ce 20	               jsr  putscxy
.1768	20 75 21	               jsr  pop
.176b	60		               rts
.176c			f8action
.176c	48		               pha
.176d	a9 00		               lda  #$0
.176f	8d 26 09	               sta  editmode
.1772	ad 27 09	               lda  fkeyset
.1775	d0 47		               bne  menub
.1777	20 36 21	               jsr  push
.177a	a2 88		               ldx  #<blankmsg
.177c	a0 19		               ldy  #>blankmsg
.177e	20 ce 20	               jsr  putscxy
.1781	a2 a3		               ldx  #<menub_msg
.1783	a0 1b		               ldy  #>menub_msg
.1785	20 ce 20	               jsr  putscxy
.1788	20 75 21	               jsr  pop
.178b	08		               php
.178c	48		               pha
.178d	8a		               txa
.178e	48		               pha
.178f	ad fb 1e	               lda  f8abutton
.1792	48		               pha
.1793	a9 92		               lda  #146
.1795	8d 0d 1f	               sta  f8abutton+18
.1798	a9 01		               lda  #flashcol
.179a	8d fb 1e	               sta  f8abutton
.179d	a2 fb		               ldx  #<f8abutton
.179f	a0 1e		               ldy  #>f8abutton
.17a1	20 ce 20	               jsr  putscxy
.17a4	20 eb 11	               jsr  delay
.17a7	a9 12		               lda  #18
.17a9	8d 0d 1f	               sta  f8abutton+18
.17ac	68		               pla
.17ad	8d fb 1e	               sta  f8abutton
.17b0	a2 fb		               ldx  #<f8abutton
.17b2	a0 1e		               ldy  #>f8abutton
.17b4	20 ce 20	               jsr  putscxy
.17b7	68		               pla
.17b8	aa		               tax
.17b9	68		               pla
.17ba	28		               plp
.17bb	4c 02 18	               jmp  swapit
.17be			menub
.17be	20 36 21	               jsr  push
.17c1	a2 88		               ldx  #<blankmsg
.17c3	a0 19		               ldy  #>blankmsg
.17c5	20 ce 20	               jsr  putscxy
.17c8	a2 7e		               ldx  #<menua_msg
.17ca	a0 1b		               ldy  #>menua_msg
.17cc	20 ce 20	               jsr  putscxy
.17cf	20 75 21	               jsr  pop
.17d2	08		               php
.17d3	48		               pha
.17d4	8a		               txa
.17d5	48		               pha
.17d6	ad d3 1f	               lda  f8bbutton
.17d9	48		               pha
.17da	a9 92		               lda  #146
.17dc	8d e5 1f	               sta  f8bbutton+18
.17df	a9 01		               lda  #flashcol
.17e1	8d d3 1f	               sta  f8bbutton
.17e4	a2 d3		               ldx  #<f8bbutton
.17e6	a0 1f		               ldy  #>f8bbutton
.17e8	20 ce 20	               jsr  putscxy
.17eb	20 eb 11	               jsr  delay
.17ee	a9 12		               lda  #18
.17f0	8d e5 1f	               sta  f8bbutton+18
.17f3	68		               pla
.17f4	8d d3 1f	               sta  f8bbutton
.17f7	a2 d3		               ldx  #<f8bbutton
.17f9	a0 1f		               ldy  #>f8bbutton
.17fb	20 ce 20	               jsr  putscxy
.17fe	68		               pla
.17ff	aa		               tax
.1800	68		               pla
.1801	28		               plp
.1802	49 ff		swapit         eor  #$ff
.1804	8d 27 09	               sta  fkeyset
.1807	20 71 10	               jsr  drawfkeys
.180a	68		               pla
.180b	20 36 21	               jsr  push
.180e	a2 88		               ldx  #<blankmsg
.1810	a0 19		               ldy  #>blankmsg
.1812	20 ce 20	               jsr  putscxy
.1815	a2 b4		               ldx  #<prompt_msg
.1817	a0 19		               ldy  #>prompt_msg
.1819	20 ce 20	               jsr  putscxy
.181c	20 75 21	               jsr  pop
.181f	60		               rts
.1820			reverse
.1820	20 36 21	               jsr  push
.1823	48		               pha
.1824	ad 2c 09	               lda  mapaddr
.1827	85 fd		               sta  $fd
.1829	ad 2d 09	               lda  mapaddr+1
.182c	85 fe		               sta  $fe
.182e	68		               pla
.182f	a0 00		               ldy  #$00
.1831	b1 fd		again          lda  (zpage2),y
.1833	49 ff		               eor  #$ff
.1835	91 fd		               sta  (zpage2),y
.1837	c8		               iny
.1838	c0 08		               cpy  #$08
.183a	d0 f5		               bne  again
.183c	20 75 21	               jsr  pop
.183f	60		               rts
.1840			scrollup
.1840	20 36 21	               jsr  push
.1843	48		               pha
.1844	ad 2c 09	               lda  mapaddr
.1847	85 fb		               sta  $fb
.1849	ad 2d 09	               lda  mapaddr+1
.184c	85 fc		               sta  $fc
.184e	68		               pla
.184f	48		               pha
.1850	ad 2c 09	               lda  mapaddr
.1853	85 fd		               sta  $fd
.1855	ad 2d 09	               lda  mapaddr+1
.1858	85 fe		               sta  $fe
.185a	68		               pla
.185b	20 55 22	               jsr  inczp2
.185e	a0 00		               ldy  #$00
.1860	b1 fb		               lda  (zpage1),y
.1862	8d 77 18	               sta  tmpbyte
.1865	b1 fd		again          lda  (zpage2),y
.1867	91 fb		               sta  (zpage1),y
.1869	c8		               iny
.186a	c0 07		               cpy  #$07
.186c	d0 f7		               bne  again
.186e	ad 77 18	               lda  tmpbyte
.1871	91 fb		               sta  (zpage1),y
.1873	20 75 21	               jsr  pop
.1876	60		               rts
>1877	00		tmpbyte        .byte     $00
.1878			scrolldown
.1878	20 36 21	               jsr  push
.187b	48		               pha
.187c	ad 2c 09	               lda  mapaddr
.187f	85 fb		               sta  $fb
.1881	ad 2d 09	               lda  mapaddr+1
.1884	85 fc		               sta  $fc
.1886	68		               pla
.1887	48		               pha
.1888	ad 2c 09	               lda  mapaddr
.188b	85 fd		               sta  $fd
.188d	ad 2d 09	               lda  mapaddr+1
.1890	85 fe		               sta  $fe
.1892	68		               pla
.1893	20 55 22	               jsr  inczp2
.1896	a0 07		               ldy  #$07                ;xxxxxxxx zpage1
.1898	b1 fb		               lda  (zpage1),y          ;xxxxxxxx zpage2
.189a	8d b1 18	               sta  tmpbyte             ;xxxxxxxx
.189d	88		again          dey                      ;xxxxxxxx
.189e	b1 fb		               lda  (zpage1),y          ;xxxxxxxx
.18a0	91 fd		               sta  (zpage2),y          ;xxxxxxxx
.18a2	c0 00		               cpy  #$00                ;xxxxxxxx
.18a4	d0 f7		               bne  again               ;xxxxxxxx
.18a6	a0 00		               ldy  #$00
.18a8	ad b1 18	               lda  tmpbyte
.18ab	91 fb		               sta  (zpage1),y
.18ad	20 75 21	               jsr  pop
.18b0	60		               rts
>18b1	00		tmpbyte        .byte     $00
.18b2			scrollright
.18b2	20 36 21	               jsr  push
.18b5	48		               pha
.18b6	ad 2c 09	               lda  mapaddr
.18b9	85 fb		               sta  $fb
.18bb	ad 2d 09	               lda  mapaddr+1
.18be	85 fc		               sta  $fc
.18c0	68		               pla
.18c1	a0 00		               ldy  #$00
.18c3	b1 fb		again          lda  (zpage1),y
.18c5	18		               clc
.18c6	6a		               ror
.18c7	90 03		               bcc  zero
.18c9	18		               clc
.18ca	69 80		one            adc  #$80
.18cc	91 fb		zero           sta  (zpage1),y
.18ce	c8		               iny
.18cf	c0 08		               cpy  #$08
.18d1	d0 f0		               bne  again
.18d3	20 75 21	               jsr  pop
.18d6	60		               rts
.18d7			scrollleft
.18d7	20 36 21	               jsr  push
.18da	48		               pha
.18db	ad 2c 09	               lda  mapaddr
.18de	85 fb		               sta  $fb
.18e0	ad 2d 09	               lda  mapaddr+1
.18e3	85 fc		               sta  $fc
.18e5	68		               pla
.18e6	a0 00		               ldy  #$00
.18e8	b1 fb		again          lda  (zpage1),y
.18ea	18		               clc
.18eb	2a		               rol
.18ec	69 00		               adc  #$00
.18ee	91 fb		               sta  (zpage1),y
.18f0	c8		               iny
.18f1	c0 08		               cpy  #$08
.18f3	d0 f3		               bne  again
.18f5	20 75 21	               jsr  pop
.18f8	60		               rts
.18f9			fillchar
.18f9	20 36 21	               jsr  push
.18fc	a9 ff		               lda  #$ff
.18fe	20 11 19	               jsr  allsame
.1901	20 75 21	               jsr  pop
.1904	60		               rts
.1905			clearchar
.1905	20 36 21	               jsr  push
.1908	a9 00		               lda  #$00
.190a	20 11 19	               jsr  allsame
.190d	20 75 21	               jsr  pop
.1910	60		               rts
.1911			allsame
.1911	48		               pha
.1912	ad 2c 09	               lda  mapaddr
.1915	85 fd		               sta  $fd
.1917	ad 2d 09	               lda  mapaddr+1
.191a	85 fe		               sta  $fe
.191c	68		               pla
.191d	a0 00		               ldy  #$00
.191f	91 fd		again          sta  (zpage2),y
.1921	c8		               iny
.1922	c0 08		               cpy  #$08
.1924	d0 f9		               bne  again
.1926	60		               rts
.1927			fliphorz
.1927	20 36 21	               jsr  push
.192a	48		               pha
.192b	ad 2c 09	               lda  mapaddr
.192e	85 fd		               sta  $fd
.1930	ad 2d 09	               lda  mapaddr+1
.1933	85 fe		               sta  $fe
.1935	68		               pla
.1936	a0 00		               ldy  #$00
.1938	b1 fd		nextbyte       lda  (zpage2),y
.193a	a2 00		               ldx  #$00
.193c	2a		rolagain       rol
.193d	6e 53 19	               ror  tmpbyte
.1940	e8		               inx
.1941	e0 08		               cpx  #$08
.1943	30 f7		               bmi  rolagain
.1945	ad 53 19	               lda  tmpbyte
.1948	91 fd		               sta  (zpage2),y
.194a	c8		               iny
.194b	c0 08		               cpy  #$08
.194d	30 e9		               bmi  nextbyte
.194f	20 75 21	               jsr  pop
.1952	60		               rts
>1953	00		tmpbyte        .byte     $00
.1954			flipvert
.1954	20 36 21	               jsr  push
.1957	48		               pha
.1958	ad 2c 09	               lda  mapaddr
.195b	85 fd		               sta  $fd
.195d	ad 2d 09	               lda  mapaddr+1
.1960	85 fe		               sta  $fe
.1962	68		               pla
.1963	a0 00		               ldy  #$00
.1965	b1 fd		tostack        lda  (zpage2),y
.1967	48		               pha
.1968	c8		               iny
.1969	c0 08		               cpy  #$08
.196b	d0 f8		               bne  tostack
.196d	a0 00		               ldy  #$00
.196f	68		fromstack      pla
.1970	91 fd		               sta  (zpage2),y
.1972	c8		               iny
.1973	c0 08		               cpy  #$08
.1975	d0 f8		               bne  fromstack
.1977	20 75 21	               jsr  pop
.197a	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: messages_fr.asm

>197b	0a 01 05	editor_msg     .byte vrose,1,5
>197e	5b 45 44 49	               .null     "[editeur]"
>1982	54 45 55 52 5d 00
>1988	03 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>198c	20 20 20 20	               .null     "                                       "
>1990	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>19a0	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>19b0	20 20 20 00
>19b4	03 00 05 92	prompt_msg     .byte     mesgcol,0,5,146
>19b8	20 55 54 49	               .null     " utilisez les clefs de fonction :"
>19bc	4c 49 53 45 5a 20 4c 45 53 20 43 4c 45 46 53 20
>19cc	44 45 20 46 4f 4e 43 54 49 4f 4e 20 3a 00
.19da			f1a_msg
>19da	03 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>19de	20 4d 4f 44	               .null     " mode edit: chr$(   )",146
>19e2	45 20 45 44 49 54 3a 20 43 48 52 24 28 20 20 20
>19f2	29 92 00
.19f5			f2a_msg
>19f5	03 00 05	copy_msg       .byte     mesgcol,0,5
>19f8	20 45 4e 54	               .null     " entez le character a copier:"
>19fc	45 5a 20 4c 45 20 43 48 41 52 41 43 54 45 52 20
>1a0c	41 20 43 4f 50 49 45 52 3a 00
.1a16			f3a_msg
>1a16	03 00 05 92	save_msg       .byte     mesgcol,0,5,146
>1a1a	20 53 41 55	               .null     " sauvegarder sur quel lecteur? (1/8/9): "
>1a1e	56 45 47 41 52 44 45 52 20 53 55 52 20 51 55 45
>1a2e	4c 20 4c 45 43 54 45 55 52 3f 20 28 31 2f 38 2f
>1a3e	39 29 3a 20 00
.1a43			f4a_msg
>1a43	03 00 05 92	load_msg       .byte     mesgcol,0,5,146
>1a47	20 43 48 41	               .null     " charger de quel lecteur? (1,8,9): "
>1a4b	52 47 45 52 20 44 45 20 51 55 45 4c 20 4c 45 43
>1a5b	54 45 55 52 3f 20 28 31 2c 38 2c 39 29 3a 20 00
.1a6b			f5a_msg
>1a6b	03 00 05	clear_msg      .byte     mesgcol,0,5
>1a6e	20 45 46 46	               .null     " effacer char: chr$(   )"
>1a72	41 43 45 52 20 43 48 41 52 3a 20 43 48 52 24 28
>1a82	20 20 20 29 00
.1a87			f6a_msg
>1a87	03 00 05	fill_msg       .byte     mesgcol,0,5
>1a8a	20 52 45 4d	               .null     " remplir char:  chr$(   )"
>1a8e	50 4c 49 52 20 43 48 41 52 3a 20 20 43 48 52 24
>1a9e	28 20 20 20 29 00
.1aa4			f7a_msg
>1aa4	03 00 05	work_msg       .byte     mesgcol,0,5
>1aa7	20 52 45 43	               .null     " recuperer les caracteres."
>1aab	55 50 45 52 45 52 20 4c 45 53 20 43 41 52 41 43
>1abb	54 45 52 45 53 2e 00
.1ac2			f1b_msg
>1ac2	03 00 05	invr_msg       .byte     mesgcol,0,5
>1ac5	20 42 41 53	               .null     " basculer verticalement:"
>1ac9	43 55 4c 45 52 20 56 45 52 54 49 43 41 4c 45 4d
>1ad9	45 4e 54 3a 00
.1ade			f2b_msg
>1ade	03 00 05	flip_msg       .byte     mesgcol,0,5
>1ae1	20 42 41 53	               .null     " basculer horizontalement:"
>1ae5	43 55 4c 45 52 20 48 4f 52 49 5a 4f 4e 54 41 4c
>1af5	45 4d 45 4e 54 3a 00
.1afc			f3b_msg
>1afc	03 00 05	scrollr_msg    .byte     mesgcol,0,5
>1aff	20 44 45 46	               .null     " defiler vers la droite:"
>1b03	49 4c 45 52 20 56 45 52 53 20 4c 41 20 44 52 4f
>1b13	49 54 45 3a 00
.1b18			f4b_msg
>1b18	03 00 05	scrolll_msg    .byte     mesgcol,0,5
>1b1b	20 44 45 46	               .null     " defiler vers la gauche:"
>1b1f	49 4c 45 52 20 56 45 52 53 20 4c 41 20 47 41 55
>1b2f	43 48 45 3a 00
.1b34			f5b_msg
>1b34	03 00 05	scrollu_msg    .byte     mesgcol,0,5
>1b37	20 44 45 46	               .null     " defiler vers le haut:"
>1b3b	49 4c 45 52 20 56 45 52 53 20 4c 45 20 48 41 55
>1b4b	54 3a 00
.1b4e			f6b_msg
>1b4e	03 00 05	scrolld_msg    .byte     mesgcol,0,5
>1b51	20 44 45 46	               .null     " defiler vers le bas:"
>1b55	49 4c 45 52 20 56 45 52 53 20 4c 45 20 42 41 53
>1b65	3a 00
.1b67			f7b_msg
>1b67	03 00 05	rvrs_msg       .byte     mesgcol,0,5
>1b6a	20 52 45 56	               .null     " reverse character:"
>1b6e	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
>1b7e	03 00 05	menua_msg      .byte     mesgcol,0,5
>1b81	20 56 4f 55	               .null     " vous etes dirige vers le menu 1."
>1b85	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1b95	52 53 20 4c 45 20 4d 45 4e 55 20 31 2e 00
>1ba3	03 00 05	menub_msg      .byte     mesgcol,0,5
>1ba6	20 56 4f 55	               .null     " vous etes dirige vers le menu 2."
>1baa	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1bba	52 53 20 4c 45 20 4d 45 4e 55 20 32 2e 00
>1bc8	07 00 05	copychar_msg   .byte     vjaune,0,5
>1bcb	20 45 4e 54	               .null     " entrez le caractera a copier (?).",157,157,157
>1bcf	52 45 5a 20 4c 45 20 43 41 52 41 43 54 45 52 41
>1bdf	20 41 20 43 4f 50 49 45 52 20 28 3f 29 2e 9d 9d
>1bef	9d 00
>1bf1	07 00 05	fname_msg      .byte     vjaune,0,5
>1bf4	20 4e 4f 4d	               .null     " nom du fichier (6 lettres): ",$a4,$a4,$a4,$a4,$a4,$a4,".chr",157,157,157,157,157,157,157,157,157,157
>1bf8	20 44 55 20 46 49 43 48 49 45 52 20 28 36 20 4c
>1c08	45 54 54 52 45 53 29 3a 20 a4 a4 a4 a4 a4 a4 2e
>1c18	43 48 52 9d 9d 9d 9d 9d 9d 9d 9d 9d 9d 00
>1c26	0e 15 18 12	quit_msg       .byte     vblue1,21,24,18
>1c2a	43 54 52 4c	               .text     "ctrl-x",146
>1c2e	2d 58 92
>1c31	2d 51 55 49	               .null     "-quitter."
>1c35	54 54 45 52 2e 00
.1c3b			menu_msg
>1c3b	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>1c3f	43 54 52 4c	               .text     "ctrl-x",146
>1c43	2d 58 92
>1c46	20 41 55 20	               .null     " au menu."
>1c4a	4d 45 4e 55 2e 00
>1c50	07 04 06 12	whoami0        .byte     whoamicol,4,6,18
>1c54	20 20 20 20	               .null     "                               ",146
>1c58	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1c68	20 20 20 20 20 20 20 20 20 20 20 92 00
>1c75	07 04 07 12	whoami1        .byte     whoamicol,4,7,18
>1c79	20 20 20 20	               .null     "       ",146," c h a r e d i t ",18,"       ",146
>1c7d	20 20 20 92 20 43 20 48 20 41 20 52 20 45 20 44
>1c8d	20 49 20 54 20 12 20 20 20 20 20 20 20 92 00
>1c9c	07 04 08 12	whoami2        .byte     whoamicol,4,8,18
>1ca0	20 20 20 20	               .null     "                               ",146
>1ca4	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1cb4	20 20 20 20 20 20 20 20 20 20 20 92 00
>1cc1	07 04 09 12	whoami3        .byte     whoamicol,4,9,18
>1cc5	20 20 20 20	               .null     "    inspire de john heilborn   ",146
>1cc9	49 4e 53 50 49 52 45 20 44 45 20 4a 4f 48 4e 20
>1cd9	48 45 49 4c 42 4f 52 4e 20 20 20 92 00
>1ce6	07 04 0a 12	whoami4        .byte     whoamicol,4,10,18
>1cea	20 20 20 20	               .null     "      isbn: 0-942386-29-9      ",146
>1cee	20 20 49 53 42 4e 3a 20 30 2d 39 34 32 33 38 36
>1cfe	2d 32 39 2d 39 20 20 20 20 20 20 92 00
>1d0b	07 04 0b 12	whoami5        .byte     whoamicol,4,11,18
>1d0f	20 20 20 20	               .null     "                               ",146
>1d13	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1d23	20 20 20 20 20 20 20 20 20 20 20 92 00
>1d30	07 04 0c 12	whoami6        .byte     whoamicol,4,12,18
>1d34	20 20 20 20	               .null     "     code en assembleur par    ",146
>1d38	20 43 4f 44 45 20 45 4e 20 41 53 53 45 4d 42 4c
>1d48	45 55 52 20 50 41 52 20 20 20 20 92 00
>1d55	07 04 0d 12	whoami7        .byte     whoamicol,4,13,18
>1d59	20 44 41 4e	               .null     " daniel lafrance quebec/canada ",146
>1d5d	49 45 4c 20 4c 41 46 52 41 4e 43 45 20 51 55 45
>1d6d	42 45 43 2f 43 41 4e 41 44 41 20 92 00
>1d7a	07 04 0e 12	whoami8        .byte     whoamicol,4,14,18
>1d7e	20 20 20 20	               .null     "    version:",version,"    ",146
>1d82	56 45 52 53 49 4f 4e 3a 32 30 32 33 31 31 31 36
>1d92	2d 31 30 30 34 30 30 20 20 20 20 92 00
>1d9f	07 04 0f 12	whoami9        .byte     whoamicol,4,15,18
>1da3	20 20 20 20	               .null     "                               ",146
>1da7	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1db7	20 20 20 20 20 20 20 20 20 20 20 92 00
>1dc4	03 06 10 14	bye_msg        .byte     vcyan,6,16,20
>1dc8	20 20 20 20	               .null     "      bonjour et merci      ",146
>1dcc	20 20 42 4f 4e 4a 4f 55 52 20 45 54 20 4d 45 52
>1ddc	43 49 20 20 20 20 20 20 92 00
>1de6	0d 05 18 12	any_msg        .byte     vvert1,5,24,18
>1dea	20 41 50 50	               .null     " appuyez une cle pour basic ",146
>1dee	55 59 45 5a 20 55 4e 45 20 43 4c 45 20 50 4f 55
>1dfe	52 20 42 41 53 49 43 20 92 00
>1e08	03 12 07	titremenu1     .byte     menu1col1,fkeyleft,f1top-2       ;133
>1e0b	12 20 4a 45	               .null     18," jeu de fonctions #1 ",146
>1e0f	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>1e1f	31 20 92 00
>1e23	0f 12 07	titremenu2     .byte     menu2col1,fkeyleft,f1top-2       ;133
>1e26	12 20 4a 45	               .null     18," jeu de fonctions #2 ",146
>1e2a	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>1e3a	32 20 92 00
>1e3e	03 12 09	f1abutton      .byte     menu1col1,fkeyleft,f1top       ;133
>1e41	45 44 49 54	               .text     "editer carac..."
>1e45	45 52 20 43 41 52 41 43 2e 2e 2e
>1e50	12		               .byte     18             ; position 15
>1e51	a9 20 46 31	               .null     $a9," f1 ",223,146
>1e55	20 df 92 00
>1e59	0e 12 0a	f2abutton      .byte     menu1col2,fkeyleft,f1top+1     ;138
>1e5c	43 4f 50 49	               .text     "copier un carac"
>1e60	45 52 20 55 4e 20 43 41 52 41 43
>1e6b	12		               .byte     18   ; position 15
>1e6c	20 20 46 32	               .null     "  f2  ",146
>1e70	20 20 92 00
>1e74	03 12 0c	f3abutton      .byte     menu1col1,fkeyleft,f1top+3     ;137
>1e77	53 41 56 45	               .text     "savegarder sur."
>1e7b	47 41 52 44 45 52 20 53 55 52 2e
>1e86	12		               .byte     18            ; position 15
>1e87	a9 20 46 33	               .null     $a9," f3 ",223,146
>1e8b	20 df 92 00
>1e8f	0e 12 0d	f4abutton      .byte     menu1col2,fkeyleft,f1top+4     ;134
>1e92	43 48 41 52	               .text     "charger de....."
>1e96	47 45 52 20 44 45 2e 2e 2e 2e 2e
>1ea1	12		               .byte     18             ; position 15
>1ea2	20 20 46 34	               .null     "  f4  ",146
>1ea6	20 20 92 00
>1eaa	03 12 0f	f5abutton      .byte     menu1col1,fkeyleft,f1top+6     ;135
>1ead	4d 45 54 54	               .text     "mettre tout a 0"
>1eb1	52 45 20 54 4f 55 54 20 41 20 30
>1ebc	12		               .byte     18             ; position 15
>1ebd	a9 20 46 35	               .null     $a9," f5 ",223,146
>1ec1	20 df 92 00
>1ec5	0e 12 10	f6abutton      .byte     menu1col2,fkeyleft,f1top+7    ;139
>1ec8	4d 45 54 54	               .text     "mettre tout a 1"
>1ecc	52 45 20 54 4f 55 54 20 41 20 31
>1ed7	12		               .byte     18             ; position 15
>1ed8	20 20 46 36	               .null     "  f6  ",146
>1edc	20 20 92 00
>1ee0	03 12 12	f7abutton      .byte     menu1col1,fkeyleft,f1top+9    ;136
>1ee3	52 45 43 55	               .text     "recuperer rom.."
>1ee7	50 45 52 45 52 20 52 4f 4d 2e 2e
>1ef2	12		               .byte     18             ; position 15
>1ef3	a9 20 46 37	               .null     $a9," f7 ",223,146
>1ef7	20 df 92 00
>1efb	0e 12 13	f8abutton      .byte     menu1col2,fkeyleft,f1top+10
>1efe	41 4c 4c 45	               .text     "aller au menu2."
>1f02	52 20 41 55 20 4d 45 4e 55 32 2e
>1f0d	12		               .byte     18             ; position 15
>1f0e	20 20 46 38	               .null     "  f8  ", 146
>1f12	20 20 92 00
>1f16	0f 12 09	f1bbutton      .byte     menu2col1,fkeyleft,f1top
>1f19	42 41 53 43	               .text     "basculer vert.."
>1f1d	55 4c 45 52 20 56 45 52 54 2e 2e
>1f28	12		               .byte     18             ; position 15
>1f29	a9 20 46 31	               .null     $a9," f1 ",223,146
>1f2d	20 df 92 00
>1f31	0c 12 0a	f2bbutton      .byte     menu2col2,fkeyleft,f1top+1
>1f34	42 41 53 43	               .text     "basculer horz.."
>1f38	55 4c 45 52 20 48 4f 52 5a 2e 2e
>1f43	12		               .byte     18             ; position 15
>1f44	20 20 46 32	               .null     "  f2  ",146
>1f48	20 20 92 00
>1f4c	0f 12 0c	f3bbutton      .byte     menu2col1,fkeyleft,f1top+3
>1f4f	44 45 46 49	               .text     "defiler droite."
>1f53	4c 45 52 20 44 52 4f 49 54 45 2e
>1f5e	12		               .byte     18             ; position 15
>1f5f	a9 20 46 33	               .null     $a9," f3 ",223,146
>1f63	20 df 92 00
>1f67	0c 12 0d	f4bbutton      .byte     menu2col2,fkeyleft,f1top+4
>1f6a	44 45 46 49	               .text     "defiler gauche."
>1f6e	4c 45 52 20 47 41 55 43 48 45 2e
>1f79	12		               .byte     18             ; position 15
>1f7a	20 20 46 34	               .null     "  f4  ",146
>1f7e	20 20 92 00
>1f82	0f 12 0f	f5bbutton      .byte     menu2col1,fkeyleft,f1top+6
>1f85	44 45 46 49	               .text     "defiler haut..."
>1f89	4c 45 52 20 48 41 55 54 2e 2e 2e
>1f94	12		               .byte     18             ; position 15
>1f95	a9 20 46 35	               .null     $a9," f5 ",223,146
>1f99	20 df 92 00
>1f9d	0c 12 10	f6bbutton      .byte     menu2col2,fkeyleft,f1top+7
>1fa0	44 45 46 49	               .text     "defiler bas...."
>1fa4	4c 45 52 20 42 41 53 2e 2e 2e 2e
>1faf	12		               .byte     18             ; position 15
>1fb0	20 20 46 36	               .null     "  f6  ",146
>1fb4	20 20 92 00
>1fb8	0f 12 12	f7bbutton      .byte     menu2col1,fkeyleft,f1top+9
>1fbb	49 4e 56 45	               .text     "inverser bits.."
>1fbf	52 53 45 52 20 42 49 54 53 2e 2e
>1fca	12		               .byte     18             ; position 15
>1fcb	a9 20 46 37	               .null     $a9," f7 ",223,146
>1fcf	20 df 92 00
>1fd3	0c 12 13	f8bbutton      .byte     menu2col2,fkeyleft,f1top+10
>1fd6	41 4c 4c 45	               .text     "aller au menu1."
>1fda	52 20 41 55 20 4d 45 4e 55 31 2e
>1fe5	12		               .byte     18             ; position 15
>1fe6	20 20 46 38	               .null     "  f8  ", 146
>1fea	20 20 92 00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.1fee			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.1fee			screendis
.1fee	08		               php
.1fef	48		               pha
.1ff0	ad 11 d0	               lda  $d011
.1ff3	29 ef		               and  #%11101111
.1ff5	8d 11 d0	               sta  $d011
.1ff8	68		               pla
.1ff9	28		               plp
.1ffa	60		               rts
.1ffb			screenena
.1ffb	08		               php
.1ffc	48		               pha
.1ffd	ad 11 d0	               lda  $d011
.2000	09 10		               ora  #%00010000
.2002	8d 11 d0	               sta  $d011
.2005	68		               pla
.2006	28		               plp
.2007	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.2008			scrmaninit
.2008	20 36 21	               jsr  push
.200b	a9 06		               lda  #vbleu
.200d	8d 21 d0	               sta  vicbackcol
.2010	a9 05		               lda  #vvert
.2012	8d 20 d0	               sta  vicbordcol
.2015	a9 01		               lda  #vblanc
.2017	8d 86 02	               sta  bascol
.201a	ad 00 04	               lda  scrnram
.201d	8d 00 04	               sta  scrnram
.2020	20 28 20	               jsr  cls
.2023	20 75 21	               jsr  pop
.2026	60		               rts
>2027	8e		characterset   .byte b_uppercase
.2028			cls
.2028	08		               php
.2029	48		               pha
.202a	a9 93		               lda  #$93
.202c	20 3f 20	               jsr  putch
.202f	68		               pla
.2030	28		               plp
.2031	60		               rts
.2032			putnch
.2032	08		               php
.2033	e0 00		               cpx  #$00
.2035	f0 06		               beq  out
.2037	20 d2 ff	again          jsr  $ffd2
.203a	ca		               dex
.203b	d0 fa		               bne  again
.203d	28		out            plp
.203e	60		               rts
.203f			putch
.203f	08		               php
.2040	20 d2 ff	               jsr  $ffd2
.2043	28		               plp
.2044	60		               rts
.2045			puts
.2045	20 36 21	               jsr  push
.2048	86 fb		               stx  zpage1
.204a	84 fc		               sty  zpage1+1
.204c	a0 00		               ldy  #0
.204e	b1 fb		next           lda  (zpage1),y
.2050	f0 09		               beq  exit
.2052	20 3f 20	               jsr  putch
.2055	20 3d 22	               jsr  inczp1
.2058	4c 4e 20	               jmp  next
.205b	20 75 21	exit           jsr  pop
.205e	60		               rts
.205f			gotoxy
.205f	08		               php
.2060	18		               clc
.2061	8a		               txa
.2062	48		               pha
.2063	98		               tya
.2064	aa		               tax
.2065	68		               pla
.2066	a8		               tay
.2067	20 f0 ff	               jsr  kplot
.206a	28		               plp
.206b	60		               rts
.206c			cursor
=$0286			bascol    =    $0286
.206c	08		               php
.206d	48		               pha
.206e	90 12		               bcc  restore
.2070	20 f0 ff	               jsr  kplot
.2073	8c 94 20	               sty  cx
.2076	8e 95 20	               stx  cy
.2079	ad 86 02	               lda  bascol
.207c	8d 96 20	               sta  bcol
.207f	4c 91 20	               jmp  out
.2082	ae 95 20	restore        ldx  cy
.2085	ac 94 20	               ldy  cx
.2088	20 f0 ff	               jsr  kplot
.208b	ad 96 20	               lda  bcol
.208e	8d 86 02	               sta  bascol
.2091	68		out            pla
.2092	28		               plp
.2093	60		               rts
>2094	00		cx   .byte     $00
>2095	00		cy   .byte     $00
>2096	00		bcol .byte     $00
.2097			cursave
.2097	08		               php
.2098	38		               sec
.2099	20 6c 20	               jsr  cursor
.209c	28		               plp
.209d	60		               rts
.209e			curput
.209e	08		               php
.209f	18		               clc
.20a0	20 6c 20	               jsr  cursor
.20a3	28		               plp
.20a4	60		               rts
.20a5			putsxy
.20a5	20 36 21	               jsr  push
.20a8	86 fb		               stx  zpage1
.20aa	84 fc		               sty  zpage1+1
.20ac	a0 00		               ldy  #$00
.20ae	b1 fb		               lda  (zpage1),y
.20b0	aa		               tax
.20b1	20 3d 22	               jsr  inczp1
.20b4	b1 fb		               lda  (zpage1),y
.20b6	a8		               tay
.20b7	20 5f 20	               jsr  gotoxy
.20ba	20 3d 22	               jsr  inczp1
.20bd	a6 fb		               ldx  zpage1
.20bf	a4 fc		               ldy  zpage1+1
.20c1	20 45 20	               jsr  puts
.20c4	20 75 21	               jsr  pop
.20c7	60		               rts
>20c8	00 00		straddr   .word     $00
>20ca	00		px        .byte     $00
>20cb	00		py        .byte     $00
>20cc	00 00		zp1       .word     $00
.20ce			putscxy
.20ce	20 36 21	               jsr  push
.20d1	84 fc		               sty  zpage1+1
.20d3	86 fb		               stx  zpage1
.20d5	ad 86 02	               lda  bascol
.20d8	8d f8 20	               sta  bc
.20db	a0 00		               ldy #$00
.20dd	b1 fb		               lda  (zpage1),y
.20df	8d 86 02	               sta  bascol
.20e2	20 3d 22	               jsr  inczp1
.20e5	a6 fb		               ldx  zpage1
.20e7	a4 fc		               ldy  zpage1+1
.20e9	20 a5 20	               jsr  putsxy
.20ec	ad f8 20	               lda  bc
.20ef	8d 86 02	               sta  bascol
.20f2	20 75 21	               jsr  pop
.20f5	60		               rts
>20f6	00 00		straddr  .word      $00
>20f8	00		bc       .byte      $00
>20f9	00 00		zp1      .word      $00
.20fb			putrahex
.20fb	08		               php
.20fc	48		               pha
.20fd	20 53 23	               jsr  a2hex
.2100	a9 f2		               lda  #<a2hexstr
.2102	a0 22		               ldy  #>a2hexstr
.2104	20 45 20	               jsr  puts
.2107	68		               pla
.2108	28		               plp
.2109	60		               rts
.210a			kputrahexxy
.210a			bputrahexxy
.210a			putrahexxy
.210a	08		               php
.210b	20 53 23	               jsr  a2hex
.210e	a9 ef		               lda  #<a2hexpos
.2110	a0 22		               ldy  #>a2hexpos
.2112	20 a5 20	               jsr  putsxy
.2115	68		               pla
.2116	28		               plp
.2117	60		               rts
.2118			putrahexcxy
.2118	08		               php
.2119	20 53 23	               jsr  a2hex
.211c	a9 ef		               lda  #<a2hexpos
.211e	a0 22		               ldy  #>a2hexpos
.2120	20 ce 20	               jsr  putscxy
.2123	68		               pla
.2124	28		               plp
.2125	60		               rts
.2126			setinverse
.2126	48		               pha
.2127	a9 12		               lda  #$12
.2129	20 d2 ff	               jsr  $ffd2
.212c	68		               pla
.212d	60		               rts
.212e			clrinverse
.212e	48		               pha
.212f	a9 92		               lda  #$92
.2131	20 d2 ff	               jsr  $ffd2
.2134	68		               pla
.2135	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.2136			push
.2136	08		          php            ; stack : flg, pcl, pch
.2137	78		          sei
.2138	8d 72 21	          sta  ra        ; save a
.213b	68		          pla            ; stack : pcl, pch
.213c	8d 71 21	          sta  rp        ; save rp
.213f	68		          pla            ; stack : pch
.2140	8d 73 21	          sta  pc        ; save pcl
.2143	68		          pla            ; stack : -
.2144	8d 74 21	          sta  pc+1      ; save pch
.2147	a5 fb		          lda  zpage1    ; get zpage1 low byte
.2149	48		          pha            ; stack : zp1l
.214a	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.214c	48		          pha            ; stack : zp1h, zp1l
.214d	a5 fd		          lda  zpage2    ; get zpage2 low byte
.214f	48		          pha            ; stack : zp2l, zp1h, zp1l
.2150	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.2152	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.2153	ad 71 21	          lda  rp        ; get rp
.2156	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.2157	ad 72 21	          lda  ra        ; get a
.215a	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.215b	8a		          txa            ; get x
.215c	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.215d	98		          tya            ; get y
.215e	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.215f	ad 74 21	          lda  pc+1      ; get pch
.2162	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2163	ad 73 21	          lda  pc        ; get pcl
.2166	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2167	ad 71 21	          lda  rp        ; get rp
.216a	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.216b	ad 72 21	          lda  ra        ; get a
.216e	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.216f	58		          cli
.2170	60		          rts
>2171	00		rp        .byte     0
>2172	00		ra        .byte     0
>2173	00 00		pc        .word     0
.2175			pull
.2175			pop
.2175	78		          sei
.2176	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2177	8d aa 21	          sta  pc        ; save pcl
.217a	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.217b	8d ab 21	          sta  pc+1      ; save pch
.217e	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.217f	a8		          tay            ; set y
.2180	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.2181	aa		          tax            ; set x
.2182	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.2183	8d a9 21	          sta  ra        ; save a
.2186	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.2187	8d a8 21	          sta  rp        ; save rp
.218a	68		          pla            ; stack : zp2l, zp1h, zp1l
.218b	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.218d	68		          pla            ; stack : zp1h, zp1l
.218e	85 fd		          sta  zpage2    ; get zpage2 High byte
.2190	68		          pla            ; stack : zp1l
.2191	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.2193	68		          pla            ; stack :
.2194	85 fb		          sta  zpage1    ; get zpage1 High byte
.2196	ad ab 21	          lda  pc+1      ; get pch
.2199	48		          pha            ; stack : pch
.219a	ad aa 21	          lda  pc
.219d	48		          pha            ; stack : pcl, pch
.219e	ad a8 21	          lda  rp        ; get rp
.21a1	48		          pha            ; stack : rp, pcl, pch
.21a2	ad a9 21	          lda  ra        ; set ra
.21a5	58		          cli
.21a6	28		          plp            ; stack : pcl, pch
.21a7	60		          rts
>21a8	00		rp        .byte     0
>21a9	00		ra        .byte     0
>21aa	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.21ac			blkfill
.21ac	20 36 21	bf0            jsr  push
.21af	20 6d 22	               jsr  savezp1
.21b2	84 fc		               sty  zpage1+1
.21b4	a0 00		               ldy  #$00
.21b6	84 fb		               sty  zpage1
.21b8	91 fb		bf1            sta  (zpage1),y
.21ba	c8		               iny
.21bb	d0 fb		               bne  bf1
.21bd	20 7c 22	               jsr  restzp1
.21c0	20 75 21	               jsr  pop
.21c3	60		               rts
.21c4			memfill
.21c4	20 36 21	               jsr  push
.21c7	20 ac 21	mf1            jsr  blkfill
.21ca	c8		               iny
.21cb	ca		               dex
.21cc	d0 f9		               bne  mf1
.21ce	20 75 21	               jsr  pop
.21d1	60		               rts
.21d2			memmove
.21d2	20 36 21	               jsr  push
.21d5	ba		               tsx            ; On se crée un pointeur ...
.21d6	8a		               txa
.21d7	18		               clc
.21d8	69 0b		               adc  #11
.21da	a8		               tay
.21db	a2 06		               ldx  #$06
.21dd	b9 00 01	nextbyte       lda  $0100,y
.21e0	99 2c 22	               sta  words,y
.21e3	c8		               iny
.21e4	ca		               dex
.21e5	d0 f6		               bne  nextbyte
.21e7	ad 2c 22	               lda  s
.21ea	8d 03 22	               sta  source+1
.21ed	ad 2d 22	               lda  s+1
.21f0	8d 04 22	               sta  source+2
.21f3	ad 2e 22	               lda  d
.21f6	8d 00 22	               sta  destin+1
.21f9	ad 2f 22	               lda  d+1
.21fc	8d 01 22	               sta  destin+2
.21ff	ad ff ff	destin         lda  $ffff
.2202	8d ff ff	source         sta  $ffff
.2205	ee 00 22	               inc  destin+1
.2208	d0 03		               bne  src
.220a	ee 01 22	               inc  destin+2
.220d	ee 03 22	src            inc  source+1
.2210	d0 03		               bne  cnt
.2212	ee 04 22	               inc  source+2
.2215	ad 30 22	cnt            lda  compte
.2218	d0 08		               bne  decit
.221a	ad 31 22	               lda  compte+1
.221d	f0 09		               beq  fini
.221f	ce 31 22	               dec  compte+1
.2222	ce 30 22	decit          dec  compte
.2225	4c ff 21	               jmp  destin
.2228	20 75 21	fini           jsr  pop
.222b	60		               rts
.222c			words
>222c	00 00		s         .word     $0000
>222e	00 00		d         .word     $0000
>2230	00 00		compte    .word     $0000
.2232			decword
.2232	20 36 21	               jsr  push
.2235	86 fd		               stx  zpage2
.2237	84 fe		               sty  zpage2+1
.2239	20 75 21	               jsr  pop
.223c	60		               rts
.223d			inczp1
.223d	08		               php
.223e	48		               pha
.223f	e6 fb		               inc  zpage1
.2241	a5 fb		               lda  zpage1
.2243	d0 02		               bne  nopage
.2245	e6 fc		               inc  zpage1+1
.2247	68		nopage         pla
.2248	28		               plp
.2249	60		               rts
.224a			deczp1
.224a	08		                php
.224b	48		                pha
.224c	c6 fb		                dec  zpage1
.224e	d0 02		                bne  nopage
.2250	c6 fc		                dec  zpage1+1
.2252	68		nopage          pla
.2253	28		                plp
.2254	60		                rts
.2255			inczp2
.2255	08		               php
.2256	48		               pha
.2257	e6 fd		               inc  zpage2
.2259	a5 fd		               lda  zpage2
.225b	d0 02		               bne  nopage
.225d	e6 fe		               inc  zpage2+1
.225f	68		nopage         pla
.2260	28		               plp
.2261	60		               rts
.2262			deczp2
.2262	08		               php
.2263	48		               pha
.2264	a5 fd		               lda  zpage2
.2266	d0 02		               bne  nopage
.2268	c6 fe		               dec  zpage2+1
.226a	68		nopage         pla
.226b	28		               plp
.226c	60		               rts
.226d			savezp1
.226d	08		               php
.226e	48		               pha
.226f	a5 fb		               lda  zpage1
.2271	8d e9 22	               sta  zp1
.2274	a5 fc		               lda  zpage1+1
.2276	8d ea 22	               sta  zp1+1
.2279	68		               pla
.227a	28		               plp
.227b	60		               rts
.227c			restzp1
.227c	08		               php
.227d	48		               pha
.227e	ad e9 22	               lda zp1
.2281	85 fb		               sta zpage1
.2283	ad ea 22	               lda zp1+1
.2286	85 fc		               sta zpage1+1
.2288	68		               pla
.2289	28		               plp
.228a	60		               rts
.228b			savezp2
.228b	08		         php
.228c	48		         pha
.228d	a5 fd		         lda zpage2
.228f	8d eb 22	         sta zp2
.2292	a5 fe		         lda zpage2+1
.2294	8d ec 22	         sta zp2+1
.2297	68		         pla
.2298	28		         plp
.2299	60		         rts
.229a			restzp2
.229a	08		                php
.229b	48		                pha
.229c	ad eb 22	                lda  zp2
.229f	85 fd		                sta  zpage2
.22a1	ad ec 22	                lda  zp2+1
.22a4	85 fe		                sta  zpage2+1
.22a6	68		                pla
.22a7	28		                plp
.22a8	60		                rts
.22a9			xy2addr
.22a9	08		                php
.22aa	48		                pha
.22ab	8a		                txa
.22ac	48		                pha
.22ad	98		                tya
.22ae	48		                pha
.22af	ad e4 22	                lda     addr1+1
.22b2	8d e6 22	                sta     addr2+1
.22b5	ad e3 22	                lda     addr1
.22b8	8d e5 22	                sta     addr2
.22bb	c0 00		                cpy     #$00
.22bd	f0 0f		                beq     addx
.22bf	18		moreline        clc
.22c0	6d e2 22	                adc     ymult
.22c3	90 03		                bcc     norepy
.22c5	ee e6 22	                inc     addr2+1
.22c8	8d e5 22	norepy          sta     addr2
.22cb	88		                dey
.22cc	d0 f1		                bne     moreline
.22ce	8a		addx            txa
.22cf	18		                clc
.22d0	6d e5 22	                adc     addr2
.22d3	90 03		                bcc     thatsit
.22d5	ee e6 22	                inc     addr2+1
.22d8	8d e5 22	thatsit         sta     addr2
.22db	68		                pla
.22dc	a8		                tay
.22dd	68		                pla
.22de	aa		                tax
.22df	68		                pla
.22e0	28		                plp
.22e1	60		                rts
>22e2	28		ymult          .byte     40
>22e3	00 00		addr1          .word     $0000
>22e5	00 00		addr2          .word     $0000
>22e7	00 00		bytecnt        .word     $0000
>22e9	00 00		zp1        .word   $0000
>22eb	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>22ed	01		a2hexcol       .byte     1              ; pour aputscxy
>22ee	00		a2hexbkcol     .byte     %00000000
.22ef			a2hexpos
>22ef	00		a2hexpx        .byte     0              ; pour aputsxy
>22f0	00		a2hexpy        .byte     0
>22f1	24		a2hexprefix    .byte     "$"            ; pour aputs
>22f2	00 00		a2hexstr       .word     $00
>22f4	00 00		               .word     $00
>22f6	00		               .byte     0              ; 0 end string
>22f7	30 30 30 30	abin           .null     "00000000"
>22fb	30 30 30 30 00
>2300	20 20 20 00	adec           .null     "   "
.2304			putahexfmtxy
.2304	20 36 21	               jsr  push
.2307	20 53 23	               jsr  a2hex
.230a	ae ef 22	               ldx  a2hexpx
.230d	ac f0 22	               ldy  a2hexpy
.2310	20 5f 20	               jsr  gotoxy
.2313	a2 f1		               ldx  #<a2hexprefix
.2315	a0 22		               ldy  #>a2hexprefix
.2317	20 45 20	               jsr  puts
.231a	20 75 21	               jsr  pop
.231d	60		               rts
.231e			putahexfmt
.231e	20 36 21	               jsr  push
.2321	20 53 23	               jsr  a2hex
.2324	a2 f1		               ldx  #<a2hexprefix
.2326	a0 22		               ldy  #>a2hexprefix
.2328	20 45 20	               jsr  puts
.232b	20 75 21	               jsr  pop
.232e	60		               rts
.232f			putahex
.232f	20 36 21	               jsr  push
.2332	20 53 23	               jsr  a2hex
.2335	a2 f2		               ldx  #<a2hexstr
.2337	a0 22		               ldy  #>a2hexstr
.2339	20 45 20	               jsr  puts
.233c	20 75 21	               jsr  pop
.233f	60		               rts
.2340			nib2hex
.2340	08		               php
.2341	29 0f		               and  #$0f
.2343	f8		               sed
.2344	18		               clc
.2345	69 90		               adc  #$90
.2347	69 40		               adc  #$40
.2349	d8		               cld
.234a	28		               plp
.234b	60		               rts
.234c			lsra4bits
.234c	08		               php
.234d	4a		               lsr
.234e	4a		               lsr
.234f	4a		               lsr
.2350	4a		               lsr
.2351	28		               plp
.2352	60		               rts
.2353			a2hex
.2353	08		               php
.2354	48		               pha
.2355	48		               pha
.2356	20 4c 23	               jsr  lsra4bits
.2359	20 40 23	               jsr  nib2hex
.235c	8d f2 22	               sta  a2hexstr
.235f	68		               pla
.2360	20 40 23	               jsr  nib2hex
.2363	8d f3 22	               sta  a2hexstr+1
.2366	a9 00		               lda  #$00                ; set end of string
.2368	8d f4 22	               sta  a2hexstr+2
.236b	68		               pla
.236c	28		               plp
.236d	60		               rts
.236e			xy2hex
.236e	20 36 21	               jsr  push
.2371	20 53 23	               jsr  a2hex
.2374	8a		               txa
.2375	48		               pha
.2376	20 4c 23	               jsr  lsra4bits
.2379	20 40 23	               jsr  nib2hex
.237c	8d f2 22	               sta  a2hexstr
.237f	68		               pla
.2380	20 40 23	               jsr  nib2hex
.2383	8d f3 22	               sta  a2hexstr+1
.2386	98		               tya
.2387	48		               pha
.2388	20 4c 23	               jsr  lsra4bits
.238b	20 40 23	               jsr  nib2hex
.238e	8d f4 22	               sta  a2hexstr+2
.2391	68		               pla
.2392	20 40 23	               jsr  nib2hex
.2395	8d f5 22	               sta  a2hexstr+3
.2398	a9 00		               lda  #$00                ; 0 ended string
.239a	8d f6 22	               sta  a2hexstr+4
.239d	20 75 21	               jsr  pop
.23a0			atobin
.23a0	20 36 21	               jsr  push
.23a3	a2 08		               ldx  #8
.23a5	a0 00		               ldy  #0
.23a7	18		               clc
.23a8	2a		nextbit        rol
.23a9	48		               pha
.23aa	69 00		               adc  #$00
.23ac	29 01		               and  #$01
.23ae	20 40 23	               jsr  nib2hex
.23b1	99 f7 22	               sta  abin,y
.23b4	68		               pla
.23b5	c8		               iny
.23b6	ca		               dex
.23b7	d0 ef		               bne  nextbit
.23b9	a9 00		               lda  #0
.23bb	99 f7 22	               sta  abin,y
.23be	20 75 21	               jsr  pull
.23c1	60		               rts
.23c2			putabin
.23c2	20 a0 23	               jsr     atobin
.23c5	20 36 21	               jsr     push
.23c8	a2 f7		               ldx     #<abin
.23ca	a0 22		               ldy     #>abin
.23cc	20 45 20	               jsr     puts
.23cf	20 75 21	               jsr     pop
.23d2	60		               rts
.23d3			printabin
.23d3	20 36 21	               jsr     push
.23d6	a2 f7		               ldx     #<abin
.23d8	a0 22		               ldy     #>abin
.23da	20 45 20	               jsr     puts
.23dd	20 75 21	               jsr     pop
.23e0	60		               rts
.23e1			putabinfmt
.23e1	08		               php
.23e2	48		               pha
.23e3	a9 25		               lda     #"%"
.23e5	20 3f 20	               jsr     putch
.23e8	68		               pla
.23e9	20 c2 23	               jsr     putabin
.23ec	28		               plp
.23ed	60		               rts
.23ee			putabinxy
.23ee	20 5f 20	               jsr     gotoxy
.23f1	20 c2 23	               jsr     putabin
.23f4	60		               rts
.23f5			putabinfmtxy
.23f5	20 5f 20	               jsr     gotoxy
.23f8	20 e1 23	               jsr     putabinfmt
.23fb	60		               rts
.23fc			atodec
.23fc	20 36 21	               jsr  push
.23ff	f8		               sed
.2400	aa		               tax
.2401	a0 00		               ldy  #$00
.2403	a9 00		               lda  #$00
.2405	18		nextbit        clc
.2406	69 01		               adc  #$01
.2408	90 01		               bcc  decx
.240a	c8		               iny
.240b	ca		decx           dex
.240c	d0 f7		               bne  nextbit
.240e	48		               pha
.240f	98		               tya
.2410	20 40 23	               jsr  nib2hex
.2413	8d 00 23	               sta  adec
.2416	68		               pla
.2417	48		               pha
.2418	20 40 23	               jsr  nib2hex
.241b	8d 02 23	               sta  adec+2
.241e	68		               pla
.241f	6a		               ror
.2420	6a		               ror
.2421	6a		               ror
.2422	6a		               ror
.2423	20 40 23	               jsr  nib2hex
.2426	8d 01 23	               sta  adec+1
.2429	d8		               cld
.242a	20 75 21	               jsr  pull
.242d	60		               rts
>242e	00 00 00	buffer         .byte     0,0,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>2431	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>2435	00 00 00 00 00 00 00 00 00 0d 00 00
>2441	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>2445	00 00 00 00 00 00 00 00 00 00 00 00
>2451	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>2455	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>2461	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>2465	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>2471	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>2475	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>2481	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>2485	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>2491	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>2495	00 00 00 00 00 00 00 00 00 00 00 00
>24a1	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>24a5	00 00 00 00 00 00 00 00 00 00 00 00
>24b1	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>24b5	00 00 00 00 00 00 00 00 00 00 00 00
>24c1	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>24c5	00 00 00 00 00 00 00 00 00 00 00 00
>24d1	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>24d5	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>24e1	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>24e5	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>24f1	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>24f5	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>2501	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>2505	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>2511	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>2515	00 00 00 00 00 00 00 00 00 00 00 00
>2521	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>2525	00 00 00 00 00 00 00 00 00 00 00 00
.2531			waitstop
.2531	20 36 21	               jsr  push
.2534	20 ed f6	wait           jsr  k_stop
.2537	d0 fb		               bne  wait
.2539	20 75 21	               jsr  pop
.253c	60		               rts
.253d			anykey
.253d	08		               php
.253e	48		               pha
.253f	a5 cb		nokey          lda 203
.2541	c9 40		               cmp #64
.2543	f0 fa		               beq nokey
.2545	20 4b 25	               jsr releasekey
.2548	68		               pla
.2549	28		               plp
.254a	60		               rts
.254b			releasekey
.254b	08		               php
.254c	48		               pha
.254d	a5 cb		keypressed     lda 203
.254f	c9 40		               cmp #64
.2551	d0 fa		               bne keypressed
.2553	68		               pla
.2554	28		               plp
.2555	60		               rts
.2556			getkey
.2556	20 e4 ff	again          jsr  getin
.2559	c9 00		               cmp  #0
.255b	f0 f9		               beq  again
.255d	60		               rts
.255e			waitkey
.255e	20 36 21	               jsr  push
.2561	8d af 25	               sta  thekey
.2564	20 e4 ff	nope           jsr  getin
.2567	20 d2 ff	               jsr  chrout
.256a	cd af 25	               cmp  thekey
.256d	d0 f5		               bne  nope
.256f	20 d2 ff	               jsr  chrout
.2572	20 75 21	               jsr  pop
.2575	60		               rts
.2576			waitspace
.2576	20 36 21	               jsr  push
.2579	a9 7f		wait           lda  #$7f  ;%01111111
.257b	8d 00 dc	               sta  $dc00
.257e	ad 01 dc	               lda  $dc01
.2581	29 10		               and  #$10  ;mask %00010000
.2583	d0 f4		               bne  wait
.2585	20 75 21	               jsr  pop
.2588			waitsstop
.2588	20 36 21	               jsr  push
.258b	20 ed f6	wait           jsr  k_stop  ;%01111111
.258e	d0 fb		               bne  wait
.2590	20 75 21	               jsr  pop
.2593			waitreturn
.2593	20 36 21	               jsr  push
.2596	ad b0 25	               lda  thecount
.2599	8d 00 04	               sta  scrnram
.259c	a9 02		               lda  #$02
.259e	8d 00 d8	               sta  colorram
.25a1	20 e4 ff	nope           jsr  getin
.25a4	c9 0d		nohex          cmp  #$0d
.25a6	d0 f9		               bne  nope
.25a8	ee b0 25	               inc  thecount
.25ab	20 75 21	               jsr  pop
.25ae	60		               rts
>25af	00		thekey         .byte   0
>25b0	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-disk.asm

.25b1			diskerror
.25b1	20 36 21	               jsr  push
.25b4	ad e2 26	               lda  dsk_dev   ; Select device 8
.25b7	85 ba		               sta  $ba       ;
.25b9	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.25bc	a9 6f		               lda  #$6f
.25be	85 b9		               sta  $b9       ;
.25c0	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.25c3	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.25c6	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.25c9	c9 0d		               cmp  #$0d      ; Is it CR ?
.25cb	d0 f6		               bne  nextchar  ; No, get next char
.25cd	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.25d0	20 75 21	               jsr  pop
.25d3	60		               rts
.25d4			diskdir
.25d4	20 36 21	               jsr  push
.25d7	a9 24		               lda  #$24      ; L012C - Filename is "$"
.25d9	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.25db	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.25dd	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.25df	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.25e1	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.25e3	a9 01		               lda  #$01      ; L0138 - set ...
.25e5	85 b7		               sta  $b7       ; L013A - ... length of current filename
.25e7	ad e2 26	               lda  dsk_dev   ; L013C - set 8 as ...
.25ea	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.25ec	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.25ee	85 b9		               sta  $b9       ; L0142 - ... secondary address
.25f0	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.25f3	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...%10111010
.25f5	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.25f8	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.25fa	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.25fd	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.25ff	85 90		               sta  $90       ; L0153 - ... kernal status word.
.2601	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.2603	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.2605	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.2608	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.260a	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.260c	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.260e	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.2611	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.2613	d0 28		               bne  exit      ; L0167
.2615	a4 fb		               ldy  $fb       ; L0169
.2617	88		               dey            ; L016b
.2618	d0 e9		               bne  loop1     ; L016C - If not last, loop
.261a	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.261c	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.261f	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.2621	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.2624	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.2627	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.2629	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.262b	aa		               tax            ; L017F - tfr a in x
.262c	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.262e	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.2631	4c 24 26	               jmp  loop3     ; L0185 - get another byte
.2634	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.2636	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.2639	a0 02		               ldy  #$02      ; L018D - set Y to 2
.263b	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.263d	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.2640	20 75 21	               jsr  pop
.2643	60		               rts            ; L0194
.2644			directory
.2644	20 d4 25	               jsr  diskdir
.2647	20 b1 25	               jsr  diskerror
.264a	60		               rts
.264b			memtofile
.264b	20 bc 26	               jsr  dsk_putmesg
.264e	20 36 21	               jsr  push
.2651	ad e6 26	               lda  dsk_fnlen
.2654	ae e4 26	               ldx  dsk_fnptr      ; load fname addr. lbyte
.2657	ac e5 26	               ldy  dsk_fnptr+1
.265a	20 bd ff	               jsr  setnam         ; call setnam
.265d	ad e3 26	               lda  dsk_lfsno
.2660	ae e2 26	               ldx  dsk_dev        ; specified device
.2663	a0 00		skip           ldy  #$00
.2665	20 ba ff	               jsr  setlfs         ; call setlfs
.2668	ad de 26	               lda  dsk_data_s     ; put data start lbyte in stal
.266b	85 c1		               sta  stal
.266d	ad df 26	               lda  dsk_data_s+1   ; put data start hbyte in stal
.2670	85 c2		               sta  stal+1
.2672	ae e0 26	               ldx  dsk_data_e     ; put data end lbyte in x
.2675	ac e1 26	               ldy  dsk_data_e+1   ; put data end hbyte in y
.2678	a9 c1		               lda  #stal          ; start address located in $c1/$c2
.267a	20 d8 ff	               jsr  save           ; call save
.267d	90 00		               bcc  noerror        ; if carry set, a load error has happened
.267f	20 75 21	noerror        jsr  pop
.2682	60		               rts
.2683			filetomem
.2683	20 36 21	               jsr push
.2686	ad e6 26	               lda dsk_fnlen
.2689	ae e4 26	               ldx dsk_fnptr
.268c	ac e5 26	               ldy dsk_fnptr+1
.268f	20 bd ff	               jsr setnam     ; call setnam
.2692	ad e3 26	               lda dsk_lfsno
.2695	ae e2 26	               ldx dsk_dev    ; default to device 8
.2698	a0 01		               ldy #$01       ; not $01 means: load to address stored in file
.269a	20 ba ff	               jsr setlfs     ; call setlfs
.269d	a9 00		               lda #$00       ; $00 means: load to memory (not verify)
.269f	20 d5 ff	               jsr load       ; call load
.26a2	90 03		               bcc noerror      ; if carry set, a load error has happened
.26a4	20 ab 26	               jsr  error
.26a7	20 75 21	noerror        jsr pop
.26aa	60		               rts
.26ab			error
.26ab	60		               rts
.26ac	a2 f7		error1         ldx  #<dsk_emsg1
.26ae	a0 26		               ldy  #>dsk_emsg1
.26b0	20 45 20	               jsr  puts
.26b3	60		               rts
.26b4	a2 0b		error2         ldx #<dsk_emsg2
.26b6	a0 27		               ldy #>dsk_emsg2
.26b8	20 45 20	               jsr puts
.26bb	60		               rts
.26bc			dsk_putmesg
.26bc	20 36 21	               jsr push
.26bf	a2 e7		               ldx #<dsk_msg0
.26c1	a0 26		               ldy #>dsk_msg0
.26c3	20 45 20	               jsr puts
.26c6	a9 20		               lda #$20
.26c8	20 3f 20	               jsr putch
.26cb	ae e4 26	               ldx dsk_fnptr
.26ce	ac e5 26	               ldy dsk_fnptr+1
.26d1	20 45 20	               jsr puts
.26d4	ad e3 26	               lda dsk_lfsno
.26d7	20 c3 ff	               jsr close
.26da	20 75 21	               jsr pop
.26dd	60		               rts
>26de	00 00		dsk_data_s     .word     $0000    ; example addresses
>26e0	00 20		dsk_data_e     .word     $2000
>26e2	08		dsk_dev        .byte     $08
>26e3	00		dsk_lfsno      .byte     $00
>26e4	00 00		dsk_fnptr      .word     $00
>26e6	00		dsk_fnlen      .byte     0
>26e7	8d		dsk_msg0       .byte     141
>26e8	53 41 56 49	               .null     "saving"
>26ec	4e 47 00
>26ef	8d		dsk_msg1       .byte     141
>26f0	53 55 43 43	               .null     "succes"
>26f4	45 53 00
>26f7	8d		dsk_emsg1      .byte     141
>26f8	46 49 43 48	               .null     "fichier non ouvert"
>26fc	49 45 52 20 4e 4f 4e 20 4f 55 56 45 52 54 00
>270b	11		dsk_emsg2      .byte     17
>270c	45 52 52 45	               .null     "erreur d'ecriture"
>2710	55 52 20 44 27 45 43 52 49 54 55 52 45 00

;******  Return to file: charedit.asm


;******  End of listing

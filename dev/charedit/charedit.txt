
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Sun Nov  5 12:43:40 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm

=$0d			flashcol = vvert1

;******  Return to file: charedit.asm

.080d			main
.080d	20 46 14	               jsr push
.0810	20 f7 12	               jsr screendis
.0813	20 11 13	               jsr scrmaninit
.0816	20 93 0d	               jsr staticscreen
.0819	20 04 13	               jsr screenena
.081c	20 46 14	               jsr  push
.081f	a2 1a		               ldx  #<blankmsg
.0821	a0 0f		               ldy  #>blankmsg
.0823	20 de 13	               jsr  putscxy
.0826	a2 45		               ldx  #<edit_msg
.0828	a0 0f		               ldy  #>edit_msg
.082a	20 de 13	               jsr  putscxy
.082d	20 85 14	               jsr  pop
.0830	a9 00		               lda  #$00
.0832	8d 63 08	               sta  fkeyset
.0835	20 d9 0d	               jsr  showfkeys
.0838	20 85 14	               jsr  pop
.083b	20 6b 08	               jsr  keyaction
.083e	20 33 13	               jsr  cls
.0841	20 46 14	               jsr  push
.0844	a2 1a		               ldx  #<blankmsg
.0846	a0 0f		               ldy  #>blankmsg
.0848	20 de 13	               jsr  putscxy
.084b	a2 35		               ldx  #<bye_msg
.084d	a0 11		               ldy  #>bye_msg
.084f	20 de 13	               jsr  putscxy
.0852	20 85 14	               jsr  pop
.0855	20 46 14	               jsr  push
.0858	a2 00		               ldx  #0
.085a	a0 00		               ldy  #0
.085c	20 6f 13	               jsr  gotoxy
.085f	20 85 14	               jsr  pop
.0862	60		               rts
>0863	00		fkeyset        .byte     0
.0864			setscreenptr
.0864	20 46 14	               jsr  push
.0867	20 85 14	               jsr  pop
.086a	60		               rts
.086b			keyaction
.086b	20 46 14	               jsr  push
.086e	20 1b 18	loop           jsr  getkey
.0871	20 46 14	               jsr  push
.0874	a2 00		               ldx  #0
.0876	a0 14		               ldy  #20
.0878	20 6f 13	               jsr  gotoxy
.087b	20 85 14	               jsr  pop
.087e	20 4f 13	               jsr  putch
.0881	20 46 14	               jsr  push
.0884	a2 00		               ldx  #0
.0886	a0 15		               ldy  #21
.0888	20 6f 13	               jsr  gotoxy
.088b	20 85 14	               jsr  pop
.088e	48		               pha
.088f	a9 24		               lda  #'$'
.0891	20 4f 13	               jsr  putch
.0894	68		               pla
.0895	20 2f 16	               jsr  putahex
.0898	c9 85		               cmp  #key_f1
.089a	f0 23		               beq  f1
.089c	c9 89		               cmp  #key_f2
.089e	f0 25		               beq  f2
.08a0	c9 86		               cmp  #key_f3
.08a2	f0 27		               beq  f3
.08a4	c9 8a		               cmp  #key_f4
.08a6	f0 29		               beq  f4
.08a8	c9 87		               cmp  #key_f5
.08aa	f0 2b		               beq  f5
.08ac	c9 8b		               cmp  #key_f6
.08ae	f0 2d		               beq  f6
.08b0	c9 88		               cmp  #key_f7
.08b2	f0 2f		               beq  f7
.08b4	c9 8c		               cmp  #key_f8
.08b6	f0 31		               beq  f8
.08b8	c9 18		               cmp  #ctrl_x
.08ba	f0 33		               beq  quit
.08bc	4c 6e 08	               jmp  loop
.08bf	20 f3 08	f1             jsr  f1action
.08c2	4c 6e 08	               jmp  loop
.08c5	20 86 09	f2             jsr  f2action
.08c8	4c 6e 08	               jmp  loop
.08cb	20 19 0a	f3             jsr  f3action
.08ce	4c 6e 08	               jmp  loop
.08d1	20 ac 0a	f4             jsr  f4action
.08d4	4c 6e 08	               jmp  loop
.08d7	20 3f 0b	f5             jsr  f5action
.08da	4c 6e 08	               jmp  loop
.08dd	20 d2 0b	f6             jsr  f6action
.08e0	4c 6e 08	               jmp  loop
.08e3	20 65 0c	f7             jsr  f7action
.08e6	4c 6e 08	               jmp  loop
.08e9	20 f8 0c	f8             jsr  f8action
.08ec	4c 6e 08	               jmp  loop
.08ef			quit
.08ef	20 85 14	               jsr  pop
.08f2	60		               rts
.08f3			f1action
.08f3	48		               pha
.08f4	ad 63 08	               lda  fkeyset
.08f7	d0 47		               bne  menub
.08f9	08		               php
.08fa	48		               pha
.08fb	8a		               txa
.08fc	48		               pha
.08fd	ad 57 11	               lda  f1abutton
.0900	48		               pha
.0901	a9 92		               lda  #146
.0903	8d 66 11	               sta  f1abutton+15
.0906	a9 0d		               lda  #flashcol
.0908	8d 57 11	               sta  f1abutton
.090b	a2 57		               ldx  #<f1abutton
.090d	a0 11		               ldy  #>f1abutton
.090f	20 de 13	               jsr  putscxy
.0912	20 05 0f	               jsr  delay
.0915	a9 12		               lda  #18
.0917	8d 66 11	               sta  f1abutton+15
.091a	68		               pla
.091b	8d 57 11	               sta  f1abutton
.091e	a2 57		               ldx  #<f1abutton
.0920	a0 11		               ldy  #>f1abutton
.0922	20 de 13	               jsr  putscxy
.0925	68		               pla
.0926	aa		               tax
.0927	68		               pla
.0928	28		               plp
.0929	20 46 14	               jsr  push
.092c	a2 1a		               ldx  #<blankmsg
.092e	a0 0f		               ldy  #>blankmsg
.0930	20 de 13	               jsr  putscxy
.0933	a2 45		               ldx  #<f1a_msg
.0935	a0 0f		               ldy  #>f1a_msg
.0937	20 de 13	               jsr  putscxy
.093a	20 85 14	               jsr  pop
.093d	4c 84 09	               jmp  out
.0940			menub
.0940	08		               php
.0941	48		               pha
.0942	8a		               txa
.0943	48		               pha
.0944	ad 27 12	               lda  f1bbutton
.0947	48		               pha
.0948	a9 92		               lda  #146
.094a	8d 36 12	               sta  f1bbutton+15
.094d	a9 0d		               lda  #flashcol
.094f	8d 27 12	               sta  f1bbutton
.0952	a2 27		               ldx  #<f1bbutton
.0954	a0 12		               ldy  #>f1bbutton
.0956	20 de 13	               jsr  putscxy
.0959	20 05 0f	               jsr  delay
.095c	a9 12		               lda  #18
.095e	8d 36 12	               sta  f1bbutton+15
.0961	68		               pla
.0962	8d 27 12	               sta  f1bbutton
.0965	a2 27		               ldx  #<f1bbutton
.0967	a0 12		               ldy  #>f1bbutton
.0969	20 de 13	               jsr  putscxy
.096c	68		               pla
.096d	aa		               tax
.096e	68		               pla
.096f	28		               plp
.0970	20 46 14	               jsr  push
.0973	a2 1a		               ldx  #<blankmsg
.0975	a0 0f		               ldy  #>blankmsg
.0977	20 de 13	               jsr  putscxy
.097a	a2 15		               ldx  #<f1b_msg
.097c	a0 10		               ldy  #>f1b_msg
.097e	20 de 13	               jsr  putscxy
.0981	20 85 14	               jsr  pop
.0984	68		out            pla
.0985	60		               rts
.0986			f2action
.0986	48		               pha
.0987	ad 63 08	               lda  fkeyset
.098a	d0 47		               bne  menub
.098c	08		               php
.098d	48		               pha
.098e	8a		               txa
.098f	48		               pha
.0990	ad 71 11	               lda  f2abutton
.0993	48		               pha
.0994	a9 92		               lda  #146
.0996	8d 80 11	               sta  f2abutton+15
.0999	a9 0d		               lda  #flashcol
.099b	8d 71 11	               sta  f2abutton
.099e	a2 71		               ldx  #<f2abutton
.09a0	a0 11		               ldy  #>f2abutton
.09a2	20 de 13	               jsr  putscxy
.09a5	20 05 0f	               jsr  delay
.09a8	a9 12		               lda  #18
.09aa	8d 80 11	               sta  f2abutton+15
.09ad	68		               pla
.09ae	8d 71 11	               sta  f2abutton
.09b1	a2 71		               ldx  #<f2abutton
.09b3	a0 11		               ldy  #>f2abutton
.09b5	20 de 13	               jsr  putscxy
.09b8	68		               pla
.09b9	aa		               tax
.09ba	68		               pla
.09bb	28		               plp
.09bc	20 46 14	               jsr  push
.09bf	a2 1a		               ldx  #<blankmsg
.09c1	a0 0f		               ldy  #>blankmsg
.09c3	20 de 13	               jsr  putscxy
.09c6	a2 61		               ldx  #<f2a_msg
.09c8	a0 0f		               ldy  #>f2a_msg
.09ca	20 de 13	               jsr  putscxy
.09cd	20 85 14	               jsr  pop
.09d0	4c 17 0a	               jmp  out
.09d3			menub
.09d3	08		               php
.09d4	48		               pha
.09d5	8a		               txa
.09d6	48		               pha
.09d7	ad 41 12	               lda  f2bbutton
.09da	48		               pha
.09db	a9 92		               lda  #146
.09dd	8d 50 12	               sta  f2bbutton+15
.09e0	a9 0d		               lda  #flashcol
.09e2	8d 41 12	               sta  f2bbutton
.09e5	a2 41		               ldx  #<f2bbutton
.09e7	a0 12		               ldy  #>f2bbutton
.09e9	20 de 13	               jsr  putscxy
.09ec	20 05 0f	               jsr  delay
.09ef	a9 12		               lda  #18
.09f1	8d 50 12	               sta  f2bbutton+15
.09f4	68		               pla
.09f5	8d 41 12	               sta  f2bbutton
.09f8	a2 41		               ldx  #<f2bbutton
.09fa	a0 12		               ldy  #>f2bbutton
.09fc	20 de 13	               jsr  putscxy
.09ff	68		               pla
.0a00	aa		               tax
.0a01	68		               pla
.0a02	28		               plp
.0a03	20 46 14	               jsr  push
.0a06	a2 1a		               ldx  #<blankmsg
.0a08	a0 0f		               ldy  #>blankmsg
.0a0a	20 de 13	               jsr  putscxy
.0a0d	a2 2c		               ldx  #<f2b_msg
.0a0f	a0 10		               ldy  #>f2b_msg
.0a11	20 de 13	               jsr  putscxy
.0a14	20 85 14	               jsr  pop
.0a17	68		out            pla
.0a18	60		               rts
.0a19			f3action
.0a19	48		               pha
.0a1a	ad 63 08	               lda  fkeyset
.0a1d	d0 47		               bne  menub
.0a1f	08		               php
.0a20	48		               pha
.0a21	8a		               txa
.0a22	48		               pha
.0a23	ad 8b 11	               lda  f3abutton
.0a26	48		               pha
.0a27	a9 92		               lda  #146
.0a29	8d 9a 11	               sta  f3abutton+15
.0a2c	a9 0d		               lda  #flashcol
.0a2e	8d 8b 11	               sta  f3abutton
.0a31	a2 8b		               ldx  #<f3abutton
.0a33	a0 11		               ldy  #>f3abutton
.0a35	20 de 13	               jsr  putscxy
.0a38	20 05 0f	               jsr  delay
.0a3b	a9 12		               lda  #18
.0a3d	8d 9a 11	               sta  f3abutton+15
.0a40	68		               pla
.0a41	8d 8b 11	               sta  f3abutton
.0a44	a2 8b		               ldx  #<f3abutton
.0a46	a0 11		               ldy  #>f3abutton
.0a48	20 de 13	               jsr  putscxy
.0a4b	68		               pla
.0a4c	aa		               tax
.0a4d	68		               pla
.0a4e	28		               plp
.0a4f	20 46 14	               jsr  push
.0a52	a2 1a		               ldx  #<blankmsg
.0a54	a0 0f		               ldy  #>blankmsg
.0a56	20 de 13	               jsr  putscxy
.0a59	a2 87		               ldx  #<f3a_msg
.0a5b	a0 0f		               ldy  #>f3a_msg
.0a5d	20 de 13	               jsr  putscxy
.0a60	20 85 14	               jsr  pop
.0a63	4c aa 0a	               jmp  out
.0a66			menub
.0a66	08		               php
.0a67	48		               pha
.0a68	8a		               txa
.0a69	48		               pha
.0a6a	ad 5b 12	               lda  f3bbutton
.0a6d	48		               pha
.0a6e	a9 92		               lda  #146
.0a70	8d 6a 12	               sta  f3bbutton+15
.0a73	a9 0d		               lda  #flashcol
.0a75	8d 5b 12	               sta  f3bbutton
.0a78	a2 5b		               ldx  #<f3bbutton
.0a7a	a0 12		               ldy  #>f3bbutton
.0a7c	20 de 13	               jsr  putscxy
.0a7f	20 05 0f	               jsr  delay
.0a82	a9 12		               lda  #18
.0a84	8d 6a 12	               sta  f3bbutton+15
.0a87	68		               pla
.0a88	8d 5b 12	               sta  f3bbutton
.0a8b	a2 5b		               ldx  #<f3bbutton
.0a8d	a0 12		               ldy  #>f3bbutton
.0a8f	20 de 13	               jsr  putscxy
.0a92	68		               pla
.0a93	aa		               tax
.0a94	68		               pla
.0a95	28		               plp
.0a96	20 46 14	               jsr  push
.0a99	a2 1a		               ldx  #<blankmsg
.0a9b	a0 0f		               ldy  #>blankmsg
.0a9d	20 de 13	               jsr  putscxy
.0aa0	a2 45		               ldx  #<f3b_msg
.0aa2	a0 10		               ldy  #>f3b_msg
.0aa4	20 de 13	               jsr  putscxy
.0aa7	20 85 14	               jsr  pop
.0aaa	68		out            pla
.0aab	60		               rts
.0aac			f4action
.0aac	48		               pha
.0aad	ad 63 08	               lda  fkeyset
.0ab0	d0 47		               bne  menub
.0ab2	08		               php
.0ab3	48		               pha
.0ab4	8a		               txa
.0ab5	48		               pha
.0ab6	ad a5 11	               lda  f4abutton
.0ab9	48		               pha
.0aba	a9 92		               lda  #146
.0abc	8d b4 11	               sta  f4abutton+15
.0abf	a9 0d		               lda  #flashcol
.0ac1	8d a5 11	               sta  f4abutton
.0ac4	a2 a5		               ldx  #<f4abutton
.0ac6	a0 11		               ldy  #>f4abutton
.0ac8	20 de 13	               jsr  putscxy
.0acb	20 05 0f	               jsr  delay
.0ace	a9 12		               lda  #18
.0ad0	8d b4 11	               sta  f4abutton+15
.0ad3	68		               pla
.0ad4	8d a5 11	               sta  f4abutton
.0ad7	a2 a5		               ldx  #<f4abutton
.0ad9	a0 11		               ldy  #>f4abutton
.0adb	20 de 13	               jsr  putscxy
.0ade	68		               pla
.0adf	aa		               tax
.0ae0	68		               pla
.0ae1	28		               plp
.0ae2	20 46 14	               jsr  push
.0ae5	a2 1a		               ldx  #<blankmsg
.0ae7	a0 0f		               ldy  #>blankmsg
.0ae9	20 de 13	               jsr  putscxy
.0aec	a2 ae		               ldx  #<f4a_msg
.0aee	a0 0f		               ldy  #>f4a_msg
.0af0	20 de 13	               jsr  putscxy
.0af3	20 85 14	               jsr  pop
.0af6	4c 3d 0b	               jmp  out
.0af9			menub
.0af9	08		               php
.0afa	48		               pha
.0afb	8a		               txa
.0afc	48		               pha
.0afd	ad 75 12	               lda  f4bbutton
.0b00	48		               pha
.0b01	a9 92		               lda  #146
.0b03	8d 84 12	               sta  f4bbutton+15
.0b06	a9 0d		               lda  #flashcol
.0b08	8d 75 12	               sta  f4bbutton
.0b0b	a2 75		               ldx  #<f4bbutton
.0b0d	a0 12		               ldy  #>f4bbutton
.0b0f	20 de 13	               jsr  putscxy
.0b12	20 05 0f	               jsr  delay
.0b15	a9 12		               lda  #18
.0b17	8d 84 12	               sta  f4bbutton+15
.0b1a	68		               pla
.0b1b	8d 75 12	               sta  f4bbutton
.0b1e	a2 75		               ldx  #<f4bbutton
.0b20	a0 12		               ldy  #>f4bbutton
.0b22	20 de 13	               jsr  putscxy
.0b25	68		               pla
.0b26	aa		               tax
.0b27	68		               pla
.0b28	28		               plp
.0b29	20 46 14	               jsr  push
.0b2c	a2 1a		               ldx  #<blankmsg
.0b2e	a0 0f		               ldy  #>blankmsg
.0b30	20 de 13	               jsr  putscxy
.0b33	a2 5d		               ldx  #<f4b_msg
.0b35	a0 10		               ldy  #>f4b_msg
.0b37	20 de 13	               jsr  putscxy
.0b3a	20 85 14	               jsr  pop
.0b3d	68		out            pla
.0b3e	60		               rts
.0b3f			f5action
.0b3f	48		               pha
.0b40	ad 63 08	               lda  fkeyset
.0b43	d0 47		               bne  menub
.0b45	08		               php
.0b46	48		               pha
.0b47	8a		               txa
.0b48	48		               pha
.0b49	ad bf 11	               lda  f5abutton
.0b4c	48		               pha
.0b4d	a9 92		               lda  #146
.0b4f	8d ce 11	               sta  f5abutton+15
.0b52	a9 0d		               lda  #flashcol
.0b54	8d bf 11	               sta  f5abutton
.0b57	a2 bf		               ldx  #<f5abutton
.0b59	a0 11		               ldy  #>f5abutton
.0b5b	20 de 13	               jsr  putscxy
.0b5e	20 05 0f	               jsr  delay
.0b61	a9 12		               lda  #18
.0b63	8d ce 11	               sta  f5abutton+15
.0b66	68		               pla
.0b67	8d bf 11	               sta  f5abutton
.0b6a	a2 bf		               ldx  #<f5abutton
.0b6c	a0 11		               ldy  #>f5abutton
.0b6e	20 de 13	               jsr  putscxy
.0b71	68		               pla
.0b72	aa		               tax
.0b73	68		               pla
.0b74	28		               plp
.0b75	20 46 14	               jsr  push
.0b78	a2 1a		               ldx  #<blankmsg
.0b7a	a0 0f		               ldy  #>blankmsg
.0b7c	20 de 13	               jsr  putscxy
.0b7f	a2 cb		               ldx  #<f5a_msg
.0b81	a0 0f		               ldy  #>f5a_msg
.0b83	20 de 13	               jsr  putscxy
.0b86	20 85 14	               jsr  pop
.0b89	4c d0 0b	               jmp  out
.0b8c			menub
.0b8c	08		               php
.0b8d	48		               pha
.0b8e	8a		               txa
.0b8f	48		               pha
.0b90	ad 8f 12	               lda  f5bbutton
.0b93	48		               pha
.0b94	a9 92		               lda  #146
.0b96	8d 9e 12	               sta  f5bbutton+15
.0b99	a9 0d		               lda  #flashcol
.0b9b	8d 8f 12	               sta  f5bbutton
.0b9e	a2 8f		               ldx  #<f5bbutton
.0ba0	a0 12		               ldy  #>f5bbutton
.0ba2	20 de 13	               jsr  putscxy
.0ba5	20 05 0f	               jsr  delay
.0ba8	a9 12		               lda  #18
.0baa	8d 9e 12	               sta  f5bbutton+15
.0bad	68		               pla
.0bae	8d 8f 12	               sta  f5bbutton
.0bb1	a2 8f		               ldx  #<f5bbutton
.0bb3	a0 12		               ldy  #>f5bbutton
.0bb5	20 de 13	               jsr  putscxy
.0bb8	68		               pla
.0bb9	aa		               tax
.0bba	68		               pla
.0bbb	28		               plp
.0bbc	20 46 14	               jsr  push
.0bbf	a2 1a		               ldx  #<blankmsg
.0bc1	a0 0f		               ldy  #>blankmsg
.0bc3	20 de 13	               jsr  putscxy
.0bc6	a2 72		               ldx  #<f5b_msg
.0bc8	a0 10		               ldy  #>f5b_msg
.0bca	20 de 13	               jsr  putscxy
.0bcd	20 85 14	               jsr  pop
.0bd0	68		out            pla
.0bd1	60		               rts
.0bd2			f6action
.0bd2	48		               pha
.0bd3	ad 63 08	               lda  fkeyset
.0bd6	d0 47		               bne  menub
.0bd8	08		               php
.0bd9	48		               pha
.0bda	8a		               txa
.0bdb	48		               pha
.0bdc	ad d9 11	               lda  f6abutton
.0bdf	48		               pha
.0be0	a9 92		               lda  #146
.0be2	8d e8 11	               sta  f6abutton+15
.0be5	a9 0d		               lda  #flashcol
.0be7	8d d9 11	               sta  f6abutton
.0bea	a2 d9		               ldx  #<f6abutton
.0bec	a0 11		               ldy  #>f6abutton
.0bee	20 de 13	               jsr  putscxy
.0bf1	20 05 0f	               jsr  delay
.0bf4	a9 12		               lda  #18
.0bf6	8d e8 11	               sta  f6abutton+15
.0bf9	68		               pla
.0bfa	8d d9 11	               sta  f6abutton
.0bfd	a2 d9		               ldx  #<f6abutton
.0bff	a0 11		               ldy  #>f6abutton
.0c01	20 de 13	               jsr  putscxy
.0c04	68		               pla
.0c05	aa		               tax
.0c06	68		               pla
.0c07	28		               plp
.0c08	20 46 14	               jsr  push
.0c0b	a2 1a		               ldx  #<blankmsg
.0c0d	a0 0f		               ldy  #>blankmsg
.0c0f	20 de 13	               jsr  putscxy
.0c12	a2 e5		               ldx  #<f6a_msg
.0c14	a0 0f		               ldy  #>f6a_msg
.0c16	20 de 13	               jsr  putscxy
.0c19	20 85 14	               jsr  pop
.0c1c	4c 63 0c	               jmp  out
.0c1f			menub
.0c1f	08		               php
.0c20	48		               pha
.0c21	8a		               txa
.0c22	48		               pha
.0c23	ad a9 12	               lda  f6bbutton
.0c26	48		               pha
.0c27	a9 92		               lda  #146
.0c29	8d b8 12	               sta  f6bbutton+15
.0c2c	a9 0d		               lda  #flashcol
.0c2e	8d a9 12	               sta  f6bbutton
.0c31	a2 a9		               ldx  #<f6bbutton
.0c33	a0 12		               ldy  #>f6bbutton
.0c35	20 de 13	               jsr  putscxy
.0c38	20 05 0f	               jsr  delay
.0c3b	a9 12		               lda  #18
.0c3d	8d b8 12	               sta  f6bbutton+15
.0c40	68		               pla
.0c41	8d a9 12	               sta  f6bbutton
.0c44	a2 a9		               ldx  #<f6bbutton
.0c46	a0 12		               ldy  #>f6bbutton
.0c48	20 de 13	               jsr  putscxy
.0c4b	68		               pla
.0c4c	aa		               tax
.0c4d	68		               pla
.0c4e	28		               plp
.0c4f	20 46 14	               jsr  push
.0c52	a2 1a		               ldx  #<blankmsg
.0c54	a0 0f		               ldy  #>blankmsg
.0c56	20 de 13	               jsr  putscxy
.0c59	a2 86		               ldx  #<f6b_msg
.0c5b	a0 10		               ldy  #>f6b_msg
.0c5d	20 de 13	               jsr  putscxy
.0c60	20 85 14	               jsr  pop
.0c63	68		out            pla
.0c64	60		               rts
.0c65			f7action
.0c65	48		               pha
.0c66	ad 63 08	               lda  fkeyset
.0c69	d0 47		               bne  menub
.0c6b	08		               php
.0c6c	48		               pha
.0c6d	8a		               txa
.0c6e	48		               pha
.0c6f	ad f3 11	               lda  f7abutton
.0c72	48		               pha
.0c73	a9 92		               lda  #146
.0c75	8d 02 12	               sta  f7abutton+15
.0c78	a9 0d		               lda  #flashcol
.0c7a	8d f3 11	               sta  f7abutton
.0c7d	a2 f3		               ldx  #<f7abutton
.0c7f	a0 11		               ldy  #>f7abutton
.0c81	20 de 13	               jsr  putscxy
.0c84	20 05 0f	               jsr  delay
.0c87	a9 12		               lda  #18
.0c89	8d 02 12	               sta  f7abutton+15
.0c8c	68		               pla
.0c8d	8d f3 11	               sta  f7abutton
.0c90	a2 f3		               ldx  #<f7abutton
.0c92	a0 11		               ldy  #>f7abutton
.0c94	20 de 13	               jsr  putscxy
.0c97	68		               pla
.0c98	aa		               tax
.0c99	68		               pla
.0c9a	28		               plp
.0c9b	20 46 14	               jsr  push
.0c9e	a2 1a		               ldx  #<blankmsg
.0ca0	a0 0f		               ldy  #>blankmsg
.0ca2	20 de 13	               jsr  putscxy
.0ca5	a2 ff		               ldx  #<f7a_msg
.0ca7	a0 0f		               ldy  #>f7a_msg
.0ca9	20 de 13	               jsr  putscxy
.0cac	20 85 14	               jsr  pop
.0caf	4c f6 0c	               jmp  out
.0cb2			menub
.0cb2	08		               php
.0cb3	48		               pha
.0cb4	8a		               txa
.0cb5	48		               pha
.0cb6	ad c3 12	               lda  f7bbutton
.0cb9	48		               pha
.0cba	a9 92		               lda  #146
.0cbc	8d d2 12	               sta  f7bbutton+15
.0cbf	a9 0d		               lda  #flashcol
.0cc1	8d c3 12	               sta  f7bbutton
.0cc4	a2 c3		               ldx  #<f7bbutton
.0cc6	a0 12		               ldy  #>f7bbutton
.0cc8	20 de 13	               jsr  putscxy
.0ccb	20 05 0f	               jsr  delay
.0cce	a9 12		               lda  #18
.0cd0	8d d2 12	               sta  f7bbutton+15
.0cd3	68		               pla
.0cd4	8d c3 12	               sta  f7bbutton
.0cd7	a2 c3		               ldx  #<f7bbutton
.0cd9	a0 12		               ldy  #>f7bbutton
.0cdb	20 de 13	               jsr  putscxy
.0cde	68		               pla
.0cdf	aa		               tax
.0ce0	68		               pla
.0ce1	28		               plp
.0ce2	20 46 14	               jsr  push
.0ce5	a2 1a		               ldx  #<blankmsg
.0ce7	a0 0f		               ldy  #>blankmsg
.0ce9	20 de 13	               jsr  putscxy
.0cec	a2 98		               ldx  #<f7b_msg
.0cee	a0 10		               ldy  #>f7b_msg
.0cf0	20 de 13	               jsr  putscxy
.0cf3	20 85 14	               jsr  pop
.0cf6	68		out            pla
.0cf7	60		               rts
.0cf8			f8action
.0cf8	48		               pha
.0cf9	ad 63 08	               lda  fkeyset
.0cfc	d0 47		               bne  menub
.0cfe	08		               php
.0cff	48		               pha
.0d00	8a		               txa
.0d01	48		               pha
.0d02	ad 0d 12	               lda  f8abutton
.0d05	48		               pha
.0d06	a9 92		               lda  #146
.0d08	8d 1c 12	               sta  f8abutton+15
.0d0b	a9 0d		               lda  #flashcol
.0d0d	8d 0d 12	               sta  f8abutton
.0d10	a2 0d		               ldx  #<f8abutton
.0d12	a0 12		               ldy  #>f8abutton
.0d14	20 de 13	               jsr  putscxy
.0d17	20 05 0f	               jsr  delay
.0d1a	a9 12		               lda  #18
.0d1c	8d 1c 12	               sta  f8abutton+15
.0d1f	68		               pla
.0d20	8d 0d 12	               sta  f8abutton
.0d23	a2 0d		               ldx  #<f8abutton
.0d25	a0 12		               ldy  #>f8abutton
.0d27	20 de 13	               jsr  putscxy
.0d2a	68		               pla
.0d2b	aa		               tax
.0d2c	68		               pla
.0d2d	28		               plp
.0d2e	20 46 14	               jsr  push
.0d31	a2 1a		               ldx  #<blankmsg
.0d33	a0 0f		               ldy  #>blankmsg
.0d35	20 de 13	               jsr  putscxy
.0d38	a2 05		               ldx  #<menub_msg
.0d3a	a0 11		               ldy  #>menub_msg
.0d3c	20 de 13	               jsr  putscxy
.0d3f	20 85 14	               jsr  pop
.0d42	4c 89 0d	               jmp  swapit
.0d45			menub
.0d45	08		               php
.0d46	48		               pha
.0d47	8a		               txa
.0d48	48		               pha
.0d49	ad dd 12	               lda  f8bbutton
.0d4c	48		               pha
.0d4d	a9 92		               lda  #146
.0d4f	8d ec 12	               sta  f8bbutton+15
.0d52	a9 0d		               lda  #flashcol
.0d54	8d dd 12	               sta  f8bbutton
.0d57	a2 dd		               ldx  #<f8bbutton
.0d59	a0 12		               ldy  #>f8bbutton
.0d5b	20 de 13	               jsr  putscxy
.0d5e	20 05 0f	               jsr  delay
.0d61	a9 12		               lda  #18
.0d63	8d ec 12	               sta  f8bbutton+15
.0d66	68		               pla
.0d67	8d dd 12	               sta  f8bbutton
.0d6a	a2 dd		               ldx  #<f8bbutton
.0d6c	a0 12		               ldy  #>f8bbutton
.0d6e	20 de 13	               jsr  putscxy
.0d71	68		               pla
.0d72	aa		               tax
.0d73	68		               pla
.0d74	28		               plp
.0d75	20 46 14	               jsr  push
.0d78	a2 1a		               ldx  #<blankmsg
.0d7a	a0 0f		               ldy  #>blankmsg
.0d7c	20 de 13	               jsr  putscxy
.0d7f	a2 ea		               ldx  #<menua_msg
.0d81	a0 10		               ldy  #>menua_msg
.0d83	20 de 13	               jsr  putscxy
.0d86	20 85 14	               jsr  pop
.0d89	49 ff		swapit         eor  #$ff
.0d8b	8d 63 08	               sta  fkeyset
.0d8e	20 d9 0d	               jsr  showfkeys
.0d91	68		               pla
.0d92	60		               rts
.0d93			staticscreen
.0d93	48		               pha
.0d94	a9 0c		               lda  #vgris1
.0d96	8d 20 d0	               sta  $d020
.0d99	68		               pla
.0d9a	48		               pha
.0d9b	a9 0b		               lda  #vgris
.0d9d	8d 21 d0	               sta  $d021
.0da0	68		               pla
.0da1	48		               pha
.0da2	a9 8e		               lda  #b_uppercase
.0da4	8d 32 13	               sta  characterset
.0da7	20 d2 ff	               jsr  $ffd2
.0daa	68		               pla
.0dab	20 79 0e	               jsr  showlines
.0dae	20 5a 0e	               jsr  showallchars
.0db1	20 c1 0e	               jsr  showgrid
.0db4	20 d9 0d	               jsr  showfkeys
.0db7	20 46 14	               jsr  push
.0dba	a2 1a		               ldx  #<blankmsg
.0dbc	a0 0f		               ldy  #>blankmsg
.0dbe	20 de 13	               jsr  putscxy
.0dc1	a2 20		               ldx  #<quit_msg
.0dc3	a0 11		               ldy  #>quit_msg
.0dc5	20 de 13	               jsr  putscxy
.0dc8	20 85 14	               jsr  pop
.0dcb	20 46 14	               jsr  push
.0dce	a2 00		               ldx  #0
.0dd0	a0 07		               ldy  #7
.0dd2	20 6f 13	               jsr  gotoxy
.0dd5	20 85 14	               jsr  pop
.0dd8	60		               rts
.0dd9			showfkeys
.0dd9	20 46 14	               jsr  push
.0ddc	ad 63 08	               lda  fkeyset
.0ddf	c9 00		               cmp  #$0
.0de1	d0 3b		               bne  secondks
.0de3	a2 57		                ldx #<f1abutton
.0de5	a0 11		                ldy #>f1abutton
.0de7	20 de 13	                jsr putscxy
.0dea	a2 71		                ldx #<f2abutton
.0dec	a0 11		                ldy #>f2abutton
.0dee	20 de 13	                jsr putscxy
.0df1	a2 8b		                ldx #<f3abutton
.0df3	a0 11		                ldy #>f3abutton
.0df5	20 de 13	                jsr putscxy
.0df8	a2 a5		                ldx #<f4abutton
.0dfa	a0 11		                ldy #>f4abutton
.0dfc	20 de 13	                jsr putscxy
.0dff	a2 bf		                ldx #<f5abutton
.0e01	a0 11		                ldy #>f5abutton
.0e03	20 de 13	                jsr putscxy
.0e06	a2 d9		                ldx #<f6abutton
.0e08	a0 11		                ldy #>f6abutton
.0e0a	20 de 13	                jsr putscxy
.0e0d	a2 f3		                ldx #<f7abutton
.0e0f	a0 11		                ldy #>f7abutton
.0e11	20 de 13	                jsr putscxy
.0e14	a2 0d		                ldx #<f8abutton
.0e16	a0 12		                ldy #>f8abutton
.0e18	20 de 13	                jsr putscxy
.0e1b	4c 56 0e	               jmp end
.0e1e			secondks
.0e1e	a2 27		                ldx #<f1bbutton
.0e20	a0 12		                ldy #>f1bbutton
.0e22	20 de 13	                jsr putscxy
.0e25	a2 41		                ldx #<f2bbutton
.0e27	a0 12		                ldy #>f2bbutton
.0e29	20 de 13	                jsr putscxy
.0e2c	a2 5b		                ldx #<f3bbutton
.0e2e	a0 12		                ldy #>f3bbutton
.0e30	20 de 13	                jsr putscxy
.0e33	a2 75		                ldx #<f4bbutton
.0e35	a0 12		                ldy #>f4bbutton
.0e37	20 de 13	                jsr putscxy
.0e3a	a2 8f		                ldx #<f5bbutton
.0e3c	a0 12		                ldy #>f5bbutton
.0e3e	20 de 13	                jsr putscxy
.0e41	a2 a9		                ldx #<f6bbutton
.0e43	a0 12		                ldy #>f6bbutton
.0e45	20 de 13	                jsr putscxy
.0e48	a2 c3		                ldx #<f7bbutton
.0e4a	a0 12		                ldy #>f7bbutton
.0e4c	20 de 13	                jsr putscxy
.0e4f	a2 dd		                ldx #<f8bbutton
.0e51	a0 12		                ldy #>f8bbutton
.0e53	20 de 13	                jsr putscxy
.0e56	20 85 14	end            jsr  pop
.0e59	60		               rts
.0e5a			showallchars
.0e5a	20 46 14	               jsr push
.0e5d	20 46 14	               jsr  push
.0e60	a2 00		               ldx  #0
.0e62	a0 00		               ldy  #0
.0e64	20 6f 13	               jsr  gotoxy
.0e67	20 85 14	               jsr  pop
.0e6a	a2 00		               ldx  #$00
.0e6c	8a		nextc          txa
.0e6d	9d 00 04	               sta  scrnram,x
.0e70	e8		               inx
.0e71	e0 80		               cpx  #$80
.0e73	d0 f7		               bne  nextc
.0e75	20 85 14	               jsr  pop
.0e78	60		               rts
.0e79			showlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnram+(6*40)+8
.0e79	20 46 14	               jsr  push
.0e7c	a2 28		               ldx  #40
.0e7e	a9 40		               lda  #64
.0e80	9d 9f 04	nextl          sta  scrnram+(40*hline1)-1,x  ;On imprime les deux grande
.0e83	9d ef 04	               sta  scrnram+(40*hline2)-1,x  ; lignes horizontales
.0e86	ca		               dex
.0e87	e0 10		hline          cpx  #vlinepos
.0e89	10 03		               bpl  notyet
.0e8b	9d d0 06	               sta  scrnram+(40*hline3),x    ;On imprime la demiligne horz.
.0e8e	e0 00		notyet         cpx  #$00
.0e90	d0 ee		               bne  nextl
.0e92	a9 00		               lda  #<scrnram+(40*(hline2))+vlinepos
.0e94	85 fb		               sta  zpage1
.0e96	a9 05		               lda  #>scrnram+(40*(hline2))+vlinepos
.0e98	85 fc		               sta  zpage1+1
.0e9a	a0 00		               ldy  #0
.0e9c	a9 72		               lda  #114
.0e9e	91 fb		               sta  (zpage1),y
.0ea0	20 f5 0e	               jsr  zp1add40
.0ea3	a2 12		               ldx  #24-hline2
.0ea5	a9 5d		               lda  #93
.0ea7	91 fb		another93      sta  (zpage1),y
.0ea9	20 f5 0e	               jsr  zp1add40
.0eac	ca		               dex
.0ead	d0 f8		               bne  another93
.0eaf	a9 e0		               lda  #<scrnram+(40*(hline3))+vlinepos
.0eb1	85 fb		               sta  zpage1
.0eb3	a9 06		               lda  #>scrnram+(40*(hline3))+vlinepos
.0eb5	85 fc		               sta  zpage1+1
.0eb7	a0 00		               ldy  #0
.0eb9	a9 73		               lda  #115
.0ebb	91 fb		               sta  (zpage1),y
.0ebd	20 85 14	               jsr  pop
.0ec0	60		               rts
.0ec1			showgrid
=8			gligne=8
=1			gcol=1
.0ec1	20 46 14	               jsr  push
.0ec4	20 f7 12	               jsr  screendis
.0ec7	a9 41		               lda  #<scrnram+(40*(gligne))+gcol
.0ec9	85 fb		               sta  zpage1
.0ecb	a9 05		               lda  #>scrnram+(40*(gligne))+gcol
.0ecd	85 fc		               sta  zpage1+1
.0ecf	a2 08		               ldx  #8
.0ed1	a9 65		nextbox        lda  #101
.0ed3	a0 09		               ldy  #9
.0ed5	91 fb		               sta  (zpage1),y
.0ed7	88		               dey
.0ed8	a9 4f		               lda  #79
.0eda	91 fb		nextcol        sta  (zpage1),y
.0edc	88		               dey
.0edd	d0 fb		               bne  nextcol
.0edf	20 f5 0e	               jsr  zp1add40
.0ee2	ca		               dex
.0ee3	d0 ec		               bne  nextbox
.0ee5	a0 08		               ldy  #8
.0ee7	a9 77		               lda  #119
.0ee9	91 fb		nextlin        sta  (zpage1),y
.0eeb	88		               dey
.0eec	d0 fb		               bne  nextlin
.0eee	20 04 13	               jsr screenena
.0ef1	20 85 14	               jsr  pop
.0ef4	60		               rts
.0ef5			zp1add40
.0ef5	08		               php
.0ef6	48		               pha
.0ef7	18		               clc
.0ef8	a5 fb		               lda  zpage1
.0efa	69 28		               adc  #40
.0efc	90 02		               bcc  nocarry
.0efe	e6 fc		               inc  zpage1+1
.0f00	85 fb		nocarry        sta  zpage1
.0f02	68		               pla
.0f03	28		               plp
.0f04	60		               rts
.0f05			delay
.0f05	20 46 14	               jsr  push
.0f08	a9 00		               lda  #$0
.0f0a	aa		               tax
.0f0b	a8		               tay
.0f0c	ca		xagain         dex
.0f0d	88		yagain         dey
.0f0e	c0 00		               cpy  #$00
.0f10	d0 fb		               bne  yagain
.0f12	e0 00		               cpx  #$00
.0f14	d0 f6		               bne  xagain
.0f16	20 85 14	               jsr  pop
.0f19	60		               rts

;******  Processing file: messages.asm

=$07			mesgcol = vjaune
>0f1a	07 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>0f1e	20 20 20 20	               .null     "                                      "
>0f22	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0f32	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0f42	20 20 00
.0f45			f1a_msg
>0f45	07 00 05 12	edit_msg       .byte     mesgcol,0,5,18
>0f49	20 45 4e 54	               .null     " entry mode: chr$(   )",146
>0f4d	52 59 20 4d 4f 44 45 3a 20 43 48 52 24 28 20 20
>0f5d	20 29 92 00
.0f61			f2a_msg
>0f61	07 00 05 92	save_msg       .byte     mesgcol,0,5,146
>0f65	20 53 41 56	               .null     " save on cassette or disk? (c/d):"
>0f69	45 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>0f79	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.0f87			f3a_msg
>0f87	07 00 05	load_msg       .byte     mesgcol,0,5
>0f8a	20 4c 4f 41	               .null     " load from cassette or disk? (c/d):"
>0f8e	44 20 46 52 4f 4d 20 43 41 53 53 45 54 54 45 20
>0f9e	4f 52 20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.0fae			f4a_msg
>0fae	07 00 05	copy_msg       .byte     mesgcol,0,5
>0fb1	20 45 4e 54	               .null     " enter character to copy:"
>0fb5	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>0fc5	43 4f 50 59 3a 00
.0fcb			f5a_msg
>0fcb	07 00 05	clear_msg      .byte     mesgcol,0,5
>0fce	20 43 4c 45	               .null     " clear char: chr$(   )"
>0fd2	41 52 20 43 48 41 52 3a 20 43 48 52 24 28 20 20
>0fe2	20 29 00
.0fe5			f6a_msg
>0fe5	07 00 05	fill_msg       .byte     mesgcol,0,5
>0fe8	20 46 49 4c	               .null     " fill char:  chr$(   )"
>0fec	4c 20 43 48 41 52 3a 20 20 43 48 52 24 28 20 20
>0ffc	20 29 00
.0fff			f7a_msg
>0fff	07 00 05	work_msg       .byte     mesgcol,0,5
>1002	20 45 4e 41	               .null     " enable work space"
>1006	42 4c 45 20 57 4f 52 4b 20 53 50 41 43 45 00
.1015			f1b_msg
>1015	07 00 05	rvrs_msg       .byte     mesgcol,0,5
>1018	20 52 45 56	               .null     " reverse character:"
>101c	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
.102c			f2b_msg
>102c	07 00 05	invr_msg       .byte     mesgcol,0,5
>102f	20 49 4e 56	               .null     " inverting character:"
>1033	45 52 54 49 4e 47 20 43 48 41 52 41 43 54 45 52
>1043	3a 00
.1045			f3b_msg
>1045	07 00 05	flip_msg       .byte     mesgcol,0,5
>1048	20 46 4c 49	               .null     " flipping character:"
>104c	50 50 49 4e 47 20 43 48 41 52 41 43 54 45 52 3a
>105c	00
.105d			f4b_msg
>105d	07 00 05	scrollr_msg    .byte     mesgcol,0,5
>1060	20 53 43 52	               .null     " scrolling right:"
>1064	4f 4c 4c 49 4e 47 20 52 49 47 48 54 3a 00
.1072			f5b_msg
>1072	07 00 05	scrolll_msg    .byte     mesgcol,0,5
>1075	20 53 43 52	               .null     " scrolling left:"
>1079	4f 4c 4c 49 4e 47 20 4c 45 46 54 3a 00
.1086			f6b_msg
>1086	07 00 05	scrollu_msg    .byte     mesgcol,0,5
>1089	20 53 43 52	               .null     " scrolling up:"
>108d	4f 4c 4c 49 4e 47 20 55 50 3a 00
.1098			f7b_msg
>1098	07 00 05	scrolld_msg    .byte     mesgcol,0,5
>109b	20 53 43 52	               .null     " scrolling down:"
>109f	4f 4c 4c 49 4e 47 20 44 4f 57 4e 3a 00
>10ac	07 00 05	save_fname_msg .byte     mesgcol,0,5
>10af	20 53 41 56	               .null     " save: file name ------.chr"
>10b3	45 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>10c3	2d 2d 2d 2e 43 48 52 00
>10cb	07 00 05	load_fname_msg .byte     mesgcol,0,5
>10ce	20 4c 4f 41	               .null     " load: file name ------.chr"
>10d2	44 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>10e2	2d 2d 2d 2e 43 48 52 00
>10ea	07 00 05	menua_msg      .byte     mesgcol,0,5
>10ed	20 59 4f 55	               .null     " you are now in menu a."
>10f1	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>1101	20 41 2e 00
>1105	07 00 05	menub_msg      .byte     mesgcol,0,5
>1108	20 59 4f 55	               .null     " you are now in menu b."
>110c	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>111c	20 42 2e 00
>1120	0e 16 18 12	quit_msg       .byte     vblue1,22,24,18
>1124	43 54 52 4c	               .text     "ctrl-x",146
>1128	2d 58 92
>112b	20 54 4f 20	               .null     " to quit."
>112f	51 55 49 54 2e 00
>1135	0a 06 0c 12	bye_msg        .byte     vrose,6,12,18
>1139	20 d4 48 41	               .null     " Thanks and have a good day ",146
>113d	4e 4b 53 20 41 4e 44 20 48 41 56 45 20 41 20 47
>114d	4f 4f 44 20 44 41 59 20 92 00
=18			fkeyleft=18
=8			f1top=8
=1			menu1col = 1
=3			menu2col = 3
>1157	01 12 08	f1abutton      .byte     menu1col,fkeyleft,f1top       ;133
>115a	45 44 49 54	               .text     "edit....... "
>115e	2e 2e 2e 2e 2e 2e 2e 20
>1166	12		               .byte     18             ; position 15
>1167	20 20 20 46	               .text     "   f1   "
>116b	31 20 20 20
>116f	92 00		               .byte     146,0
>1171	01 12 0a	f2abutton      .byte     menu1col,fkeyleft,f1top+2     ;137
>1174	53 41 56 45	               .text     "save....... "
>1178	2e 2e 2e 2e 2e 2e 2e 20
>1180	12		               .byte     18            ; position 15
>1181	20 20 20 46	               .text     "   f2   "
>1185	32 20 20 20
>1189	92 00		               .byte     146,0
>118b	01 12 0c	f3abutton      .byte     menu1col,fkeyleft,f1top+4     ;134
>118e	4c 4f 41 44	               .text     "load....... "
>1192	2e 2e 2e 2e 2e 2e 2e 20
>119a	12		               .byte     18             ; position 15
>119b	20 20 20 46	               .text     "   f3   "
>119f	33 20 20 20
>11a3	92 00		               .byte     146,0
>11a5	01 12 0e	f4abutton      .byte     menu1col,fkeyleft,f1top+6     ;138
>11a8	43 4f 50 59	               .text     "copy....... "
>11ac	2e 2e 2e 2e 2e 2e 2e 20
>11b4	12		               .byte     18             ; position 15
>11b5	20 20 20 46	               .text     "   f4   "
>11b9	34 20 20 20
>11bd	92 00		               .byte     146,0
>11bf	01 12 10	f5abutton      .byte     menu1col,fkeyleft,f1top+8     ;135
>11c2	43 4c 45 41	               .text     "clear...... "
>11c6	52 2e 2e 2e 2e 2e 2e 20
>11ce	12		               .byte     18             ; position 15
>11cf	20 20 20 46	               .text     "   f5   "
>11d3	35 20 20 20
>11d7	92 00		               .byte     146,0
>11d9	01 12 12	f6abutton      .byte     menu1col,fkeyleft,f1top+10    ;139
>11dc	46 49 4c 4c	               .text     "fill....... "
>11e0	2e 2e 2e 2e 2e 2e 2e 20
>11e8	12		               .byte     18             ; position 15
>11e9	20 20 20 46	               .text     "   f6   "
>11ed	36 20 20 20
>11f1	92 00		               .byte     146,0
>11f3	01 12 14	f7abutton      .byte     menu1col,fkeyleft,f1top+12    ;136
>11f6	57 4f 52 4b	               .text     "work....... "
>11fa	2e 2e 2e 2e 2e 2e 2e 20
>1202	12		               .byte     18             ; position 15
>1203	20 20 20 46	               .text     "   f7   "
>1207	37 20 20 20
>120b	92 00		               .byte     146,0
>120d	01 12 16	f8abutton      .byte     menu1col,fkeyleft,f1top+14    ;140
>1210	46 55 4e 43	               .text     "function... "
>1214	54 49 4f 4e 2e 2e 2e 20
>121c	12		               .byte     18             ; position 15
>121d	20 20 20 46	               .text     "   f8   "
>1221	38 20 20 20
>1225	92 00		               .byte     146,0
>1227	03 12 08	f1bbutton      .byte     menu2col,fkeyleft,f1top
>122a	52 45 56 45	               .text     "reverse.... "
>122e	52 53 45 2e 2e 2e 2e 20
>1236	12		               .byte     18             ; position 15
>1237	20 20 20 46	               .text     "   f1   "
>123b	31 20 20 20
>123f	92 00		               .byte     146,0
>1241	03 12 0a	f2bbutton      .byte     menu2col,fkeyleft,f1top+2
>1244	49 4e 56 45	               .text     "invert..... "
>1248	52 54 2e 2e 2e 2e 2e 20
>1250	12		               .byte     18             ; position 15
>1251	20 20 20 46	               .text     "   f2   "
>1255	32 20 20 20
>1259	92 00		               .byte     146,0
>125b	03 12 0c	f3bbutton      .byte     menu2col,fkeyleft,f1top+4
>125e	46 4c 49 50	               .text     "flip....... "
>1262	2e 2e 2e 2e 2e 2e 2e 20
>126a	12		               .byte     18             ; position 15
>126b	20 20 20 46	               .text     "   f3   "
>126f	33 20 20 20
>1273	92 00		               .byte     146,0
>1275	03 12 0e	f4bbutton      .byte     menu2col,fkeyleft,f1top+6
>1278	53 43 52 4f	               .text     "scroll r... "
>127c	4c 4c 20 52 2e 2e 2e 20
>1284	12		               .byte     18             ; position 15
>1285	20 20 20 46	               .text     "   f4   "
>1289	34 20 20 20
>128d	92 00		               .byte     146,0
>128f	03 12 10	f5bbutton      .byte     menu2col,fkeyleft,f1top+8
>1292	53 43 52 4f	               .text     "scroll l... "
>1296	4c 4c 20 4c 2e 2e 2e 20
>129e	12		               .byte     18             ; position 15
>129f	20 20 20 46	               .text     "   f5   "
>12a3	35 20 20 20
>12a7	92 00		               .byte     146,0
>12a9	03 12 12	f6bbutton      .byte     menu2col,fkeyleft,f1top+10
>12ac	53 43 52 4f	               .text     "scroll u... "
>12b0	4c 4c 20 55 2e 2e 2e 20
>12b8	12		               .byte     18             ; position 15
>12b9	20 20 20 46	               .text     "   f6   "
>12bd	36 20 20 20
>12c1	92 00		               .byte     146,0
>12c3	03 12 14	f7bbutton      .byte     menu2col,fkeyleft,f1top+12
>12c6	53 43 52 4f	               .text     "scroll d... "
>12ca	4c 4c 20 44 2e 2e 2e 20
>12d2	12		               .byte     18             ; position 15
>12d3	20 20 20 46	               .text     "   f7   "
>12d7	37 20 20 20
>12db	92 00		               .byte     146,0
>12dd	03 12 16	f8bbutton      .byte     menu2col,fkeyleft,f1top+14
>12e0	46 55 4e 43	               .text     "function... "
>12e4	54 49 4f 4e 2e 2e 2e 20
>12ec	12		               .byte     18             ; position 15
>12ed	20 20 20 46	               .text     "   f8   "
>12f1	38 20 20 20
>12f5	92 00		               .byte     146,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ;  97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c1			stal            =       $c1     ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.12f7			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.12f7			screendis
.12f7	08		               php
.12f8	48		               pha
.12f9	ad 11 d0	               lda  $d011
.12fc	29 ef		               and  #%11101111
.12fe	8d 11 d0	               sta  $d011
.1301	68		               pla
.1302	28		               plp
.1303	60		               rts
.1304			screenena
.1304	08		               php
.1305	48		               pha
.1306	ad 11 d0	               lda  $d011
.1309	09 10		               ora  #%00010000
.130b	8d 11 d0	               sta  $d011
.130e	68		               pla
.130f	28		               plp
.1310	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.1311			scrmaninit
.1311	20 46 14	               jsr  push
.1314	a9 06		               lda  #vbleu
.1316	8d 21 d0	               sta  vicbackcol
.1319	a9 05		               lda  #vvert
.131b	8d 20 d0	               sta  vicbordcol
.131e	a9 01		               lda  #vblanc
.1320	8d 86 02	               sta  bascol
.1323	ad 00 04	               lda  scrnram
.1326	29 fd		               and  #%11111101
.1328	8d 00 04	               sta  scrnram
.132b	20 33 13	               jsr  cls
.132e	20 85 14	               jsr  pop
.1331	60		               rts
>1332	8e		characterset   .byte b_uppercase
.1333			cls
.1333	08		               php
.1334	48		               pha
.1335	a9 93		               lda  #$93
.1337	20 4f 13	               jsr  putch
.133a	a9 0e		               lda  #$0e
.133c	20 4f 13	               jsr  putch
.133f	68		               pla
.1340	28		               plp
.1341	60		               rts
.1342			putnch
.1342	08		               php
.1343	e0 00		               cpx  #$00
.1345	f0 06		               beq  out
.1347	20 d2 ff	again          jsr  $ffd2
.134a	ca		               dex
.134b	d0 fa		               bne  again
.134d	28		out            plp
.134e	60		               rts
.134f			putch
.134f	08		               php
.1350	20 d2 ff	               jsr  $ffd2
.1353	28		               plp
.1354	60		               rts
.1355			puts
.1355	20 46 14	               jsr  push
.1358	86 fb		               stx  zpage1
.135a	84 fc		               sty  zpage1+1
.135c	a0 00		               ldy  #0
.135e	b1 fb		next           lda  (zpage1),y
.1360	f0 09		               beq  exit
.1362	20 4f 13	               jsr  putch
.1365	20 4d 15	               jsr  inczp1
.1368	4c 5e 13	               jmp  next
.136b	20 85 14	exit           jsr  pop
.136e	60		               rts
.136f			gotoxy
.136f	08		               php
.1370	18		               clc
.1371	8a		               txa
.1372	48		               pha
.1373	98		               tya
.1374	aa		               tax
.1375	68		               pla
.1376	a8		               tay
.1377	20 f0 ff	               jsr  kplot
.137a	28		               plp
.137b	60		               rts
.137c			cursor
=$0286			bascol    =    $0286
.137c	08		               php
.137d	48		               pha
.137e	90 12		               bcc  restore
.1380	20 f0 ff	               jsr  kplot
.1383	8c a4 13	               sty  cx
.1386	8e a5 13	               stx  cy
.1389	ad 86 02	               lda  bascol
.138c	8d a6 13	               sta  bcol
.138f	4c a1 13	               jmp  out
.1392	ae a5 13	restore        ldx  cy
.1395	ac a4 13	               ldy  cx
.1398	20 f0 ff	               jsr  kplot
.139b	ad a6 13	               lda  bcol
.139e	8d 86 02	               sta  bascol
.13a1	68		out            pla
.13a2	28		               plp
.13a3	60		               rts
>13a4	00		cx   .byte     $00
>13a5	00		cy   .byte     $00
>13a6	00		bcol .byte     $00
.13a7			cursave
.13a7	08		               php
.13a8	38		               sec
.13a9	20 7c 13	               jsr  cursor
.13ac	28		               plp
.13ad	60		               rts
.13ae			curput
.13ae	08		               php
.13af	18		               clc
.13b0	20 7c 13	               jsr  cursor
.13b3	28		               plp
.13b4	60		               rts
.13b5			putsxy
.13b5	20 46 14	               jsr  push
.13b8	86 fb		               stx  zpage1
.13ba	84 fc		               sty  zpage1+1
.13bc	a0 00		               ldy  #$00
.13be	b1 fb		               lda  (zpage1),y
.13c0	aa		               tax
.13c1	20 4d 15	               jsr  inczp1
.13c4	b1 fb		               lda  (zpage1),y
.13c6	a8		               tay
.13c7	20 6f 13	               jsr  gotoxy
.13ca	20 4d 15	               jsr  inczp1
.13cd	a6 fb		               ldx  zpage1
.13cf	a4 fc		               ldy  zpage1+1
.13d1	20 55 13	               jsr  puts
.13d4	20 85 14	               jsr  pop
.13d7	60		               rts
>13d8	00 00		straddr   .word     $00
>13da	00		px        .byte     $00
>13db	00		py        .byte     $00
>13dc	00 00		zp1       .word     $00
.13de			putscxy
.13de	20 46 14	               jsr  push
.13e1	84 fc		               sty  zpage1+1
.13e3	86 fb		               stx  zpage1
.13e5	ad 86 02	               lda  bascol
.13e8	8d 08 14	               sta  bc
.13eb	a0 00		               ldy #$00
.13ed	b1 fb		               lda  (zpage1),y
.13ef	8d 86 02	               sta  bascol
.13f2	20 4d 15	               jsr  inczp1
.13f5	a6 fb		               ldx  zpage1
.13f7	a4 fc		               ldy  zpage1+1
.13f9	20 b5 13	               jsr  putsxy
.13fc	ad 08 14	               lda  bc
.13ff	8d 86 02	               sta  bascol
.1402	20 85 14	               jsr  pop
.1405	60		               rts
>1406	00 00		straddr  .word      $00
>1408	00		bc       .byte      $00
>1409	00 00		zp1      .word      $00
.140b			putrahex
.140b	08		               php
.140c	48		               pha
.140d	20 53 16	               jsr  a2hex
.1410	a9 ff		               lda  #<a2hexstr
.1412	a0 15		               ldy  #>a2hexstr
.1414	20 55 13	               jsr  puts
.1417	68		               pla
.1418	28		               plp
.1419	60		               rts
.141a			kputrahexxy
.141a			bputrahexxy
.141a			putrahexxy
.141a	08		               php
.141b	20 53 16	               jsr  a2hex
.141e	a9 fc		               lda  #<a2hexpos
.1420	a0 15		               ldy  #>a2hexpos
.1422	20 b5 13	               jsr  putsxy
.1425	68		               pla
.1426	28		               plp
.1427	60		               rts
.1428			putrahexcxy
.1428	08		               php
.1429	20 53 16	               jsr  a2hex
.142c	a9 fc		               lda  #<a2hexpos
.142e	a0 15		               ldy  #>a2hexpos
.1430	20 de 13	               jsr  putscxy
.1433	68		               pla
.1434	28		               plp
.1435	60		               rts
.1436			setinverse
.1436	48		               pha
.1437	a9 12		               lda  #$12
.1439	20 d2 ff	               jsr  $ffd2
.143c	68		               pla
.143d	60		               rts
.143e			clrinverse
.143e	48		               pha
.143f	a9 92		               lda  #$92
.1441	20 d2 ff	               jsr  $ffd2
.1444	68		               pla
.1445	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.1446			push
.1446	08		          php            ; stack : flg, pcl, pch
.1447	78		          sei
.1448	8d 82 14	          sta  ra        ; save a
.144b	68		          pla            ; stack : pcl, pch
.144c	8d 81 14	          sta  rp        ; save rp
.144f	68		          pla            ; stack : pch
.1450	8d 83 14	          sta  pc        ; save pcl
.1453	68		          pla            ; stack : -
.1454	8d 84 14	          sta  pc+1      ; save pch
.1457	a5 fb		          lda  zpage1    ; get zpage1 low byte
.1459	48		          pha            ; stack : zp1l
.145a	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.145c	48		          pha            ; stack : zp1h, zp1l
.145d	a5 fd		          lda  zpage2    ; get zpage2 low byte
.145f	48		          pha            ; stack : zp2l, zp1h, zp1l
.1460	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.1462	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1463	ad 81 14	          lda  rp        ; get rp
.1466	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1467	ad 82 14	          lda  ra        ; get a
.146a	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.146b	8a		          txa            ; get x
.146c	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.146d	98		          tya            ; get y
.146e	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.146f	ad 84 14	          lda  pc+1      ; get pch
.1472	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1473	ad 83 14	          lda  pc        ; get pcl
.1476	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1477	ad 81 14	          lda  rp        ; get rp
.147a	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.147b	ad 82 14	          lda  ra        ; get a
.147e	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.147f	58		          cli
.1480	60		          rts
>1481	00		rp        .byte     0
>1482	00		ra        .byte     0
>1483	00 00		pc        .word     0
.1485			pull
.1485			pop
.1485	78		          sei
.1486	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1487	8d ba 14	          sta  pc        ; save pcl
.148a	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.148b	8d bb 14	          sta  pc+1      ; save pch
.148e	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.148f	a8		          tay            ; set y
.1490	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1491	aa		          tax            ; set x
.1492	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1493	8d b9 14	          sta  ra        ; save a
.1496	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1497	8d b8 14	          sta  rp        ; save rp
.149a	68		          pla            ; stack : zp2l, zp1h, zp1l
.149b	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.149d	68		          pla            ; stack : zp1h, zp1l
.149e	85 fd		          sta  zpage2    ; get zpage2 High byte
.14a0	68		          pla            ; stack : zp1l
.14a1	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.14a3	68		          pla            ; stack :
.14a4	85 fb		          sta  zpage1    ; get zpage1 High byte
.14a6	ad bb 14	          lda  pc+1      ; get pch
.14a9	48		          pha            ; stack : pch
.14aa	ad ba 14	          lda  pc
.14ad	48		          pha            ; stack : pcl, pch
.14ae	ad b8 14	          lda  rp        ; get rp
.14b1	48		          pha            ; stack : rp, pcl, pch
.14b2	ad b9 14	          lda  ra        ; set ra
.14b5	58		          cli
.14b6	28		          plp            ; stack : pcl, pch
.14b7	60		          rts
>14b8	00		rp        .byte     0
>14b9	00		ra        .byte     0
>14ba	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.14bc			blkfill
.14bc	20 46 14	bf0            jsr  push
.14bf	20 7a 15	               jsr  savezp1
.14c2	84 fc		               sty  zpage1+1
.14c4	a0 00		               ldy  #$00
.14c6	84 fb		               sty  zpage1
.14c8	91 fb		bf1            sta  (zpage1),y
.14ca	c8		               iny
.14cb	d0 fb		               bne  bf1
.14cd	20 89 15	               jsr  restzp1
.14d0	20 85 14	               jsr  pop
.14d3	60		               rts
.14d4			memfill
.14d4	20 46 14	               jsr  push
.14d7	20 bc 14	mf1            jsr  blkfill
.14da	c8		               iny
.14db	ca		               dex
.14dc	d0 f9		               bne  mf1
.14de	20 85 14	               jsr  pop
.14e1	60		               rts
.14e2			memmove
.14e2	20 46 14	               jsr  push
.14e5	ba		               tsx            ; On se crée un pointeur ...
.14e6	8a		               txa
.14e7	18		               clc
.14e8	69 0b		               adc  #11
.14ea	a8		               tay
.14eb	a2 06		               ldx  #$06
.14ed	b9 00 01	nextbyte       lda  $0100,y
.14f0	99 3c 15	               sta  words,y
.14f3	c8		               iny
.14f4	ca		               dex
.14f5	d0 f6		               bne  nextbyte
.14f7	ad 3c 15	               lda  s
.14fa	8d 13 15	               sta  source+1
.14fd	ad 3d 15	               lda  s+1
.1500	8d 14 15	               sta  source+2
.1503	ad 3e 15	               lda  d
.1506	8d 10 15	               sta  destin+1
.1509	ad 3f 15	               lda  d+1
.150c	8d 11 15	               sta  destin+2
.150f	ad ff ff	destin         lda  $ffff
.1512	8d ff ff	source         sta  $ffff
.1515	ee 10 15	               inc  destin+1
.1518	d0 03		               bne  src
.151a	ee 11 15	               inc  destin+2
.151d	ee 13 15	src            inc  source+1
.1520	d0 03		               bne  cnt
.1522	ee 14 15	               inc  source+2
.1525	ad 40 15	cnt            lda  compte
.1528	d0 08		               bne  decit
.152a	ad 41 15	               lda  compte+1
.152d	f0 09		               beq  fini
.152f	ce 41 15	               dec  compte+1
.1532	ce 40 15	decit          dec  compte
.1535	4c 0f 15	               jmp  destin
.1538	20 85 14	fini           jsr  pop
.153b	60		               rts
.153c			words
>153c	00 00		s         .word     $0000
>153e	00 00		d         .word     $0000
>1540	00 00		compte    .word     $0000
.1542			decword
.1542	20 46 14	               jsr  push
.1545	86 fd		               stx  zpage2
.1547	84 fe		               sty  zpage2+1
.1549	20 85 14	               jsr  pop
.154c	60		               rts
.154d			inczp1
.154d	08		               php
.154e	e6 fb		               inc  zpage1
.1550	d0 02		               bne  nopage
.1552	e6 fc		               inc  zpage1+1
.1554	28		nopage         plp
.1555	60		               rts
.1556			deczp1
.1556	08		                php
.1557	48		                pha
.1558	c6 fb		                dec  zpage1
.155a	d0 02		                bne  nopage
.155c	c6 fc		                dec  zpage1+1
.155e	c6 fb		nopage          dec  zpage1
.1560	68		                pla
.1561	28		                plp
.1562	60		                rts
.1563			inczp2
.1563	08		               php
.1564	48		               pha
.1565	e6 fd		               inc  zpage2
.1567	d0 02		               bne  nopage
.1569	e6 fe		               inc  zpage2+1
.156b	68		nopage         pla
.156c	28		               plp
.156d	60		               rts
.156e			deczp2
.156e	08		               php
.156f	48		               pha
.1570	a5 fd		               lda  zpage2
.1572	d0 02		               bne  nopage
.1574	c6 fe		               dec  zpage2+1
.1576	c6 fd		nopage         dec  zpage2
.1578	28		               plp
.1579	60		               rts
.157a			savezp1
.157a	08		               php
.157b	48		               pha
.157c	a5 fb		               lda  zpage1
.157e	8d f6 15	               sta  zp1
.1581	a5 fc		               lda  zpage1+1
.1583	8d f7 15	               sta  zp1+1
.1586	68		               pla
.1587	28		               plp
.1588	60		               rts
.1589			restzp1
.1589	08		               php
.158a	48		               pha
.158b	ad f6 15	               lda zp1
.158e	85 fb		               sta zpage1
.1590	ad f7 15	               lda zp1+1
.1593	85 fc		               sta zpage1+1
.1595	68		               pla
.1596	28		               plp
.1597	60		               rts
.1598			savezp2
.1598	08		         php
.1599	48		         pha
.159a	a5 fd		         lda zpage2
.159c	8d f8 15	         sta zp2
.159f	a5 fe		         lda zpage2+1
.15a1	8d f9 15	         sta zp2+1
.15a4	68		         pla
.15a5	28		         plp
.15a6	60		         rts
.15a7			restzp2
.15a7	08		                php
.15a8	48		                pha
.15a9	ad f8 15	                lda  zp2
.15ac	85 fd		                sta  zpage2
.15ae	ad f9 15	                lda  zp2+1
.15b1	85 fe		                sta  zpage2+1
.15b3	68		                pla
.15b4	28		                plp
.15b5	60		                rts
.15b6			xy2addr
.15b6	08		                php
.15b7	48		                pha
.15b8	8a		                txa
.15b9	48		                pha
.15ba	98		                tya
.15bb	48		                pha
.15bc	ad f1 15	                lda     addr1+1
.15bf	8d f3 15	                sta     addr2+1
.15c2	ad f0 15	                lda     addr1
.15c5	8d f2 15	                sta     addr2
.15c8	c0 00		                cpy     #$00
.15ca	f0 0f		                beq     addx
.15cc	18		moreline        clc
.15cd	6d ef 15	                adc     ymult
.15d0	90 03		                bcc     norepy
.15d2	ee f3 15	                inc     addr2+1
.15d5	8d f2 15	norepy          sta     addr2
.15d8	88		                dey
.15d9	d0 f1		                bne     moreline
.15db	8a		addx            txa
.15dc	18		                clc
.15dd	6d f2 15	                adc     addr2
.15e0	90 03		                bcc     thatsit
.15e2	ee f3 15	                inc     addr2+1
.15e5	8d f2 15	thatsit         sta     addr2
.15e8	68		                pla
.15e9	a8		                tay
.15ea	68		                pla
.15eb	aa		                tax
.15ec	68		                pla
.15ed	28		                plp
.15ee	60		                rts
>15ef	28		ymult          .byte     40
>15f0	00 00		addr1          .word     $0000
>15f2	00 00		addr2          .word     $0000
>15f4	00 00		bytecnt        .word     $0000
>15f6	00 00		zp1        .word   $0000
>15f8	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>15fa	01		a2hexcol       .byte     1              ; pour aputscxy
>15fb	00		a2hexbkcol     .byte     %00000000
.15fc			a2hexpos
>15fc	00		a2hexpx        .byte     0              ; pour aputsxy
>15fd	00		a2hexpy        .byte     0
>15fe	24		a2hexprefix    .byte     "$"            ; pour aputs
>15ff	00 00		a2hexstr       .word     $00
>1601	00 00		               .word     $00
>1603	00		               .byte     0              ; 0 end string
.1604			putahexfmtxy
.1604	20 46 14	               jsr  push
.1607	20 53 16	               jsr  a2hex
.160a	ae fc 15	               ldx  a2hexpx
.160d	ac fd 15	               ldy  a2hexpy
.1610	20 6f 13	               jsr  gotoxy
.1613	a2 fe		               ldx  #<a2hexprefix
.1615	a0 15		               ldy  #>a2hexprefix
.1617	20 55 13	               jsr  puts
.161a	20 85 14	               jsr  pop
.161d	60		               rts
.161e			putahexfmt
.161e	20 46 14	               jsr  push
.1621	20 53 16	               jsr  a2hex
.1624	a2 fe		               ldx  #<a2hexprefix
.1626	a0 15		               ldy  #>a2hexprefix
.1628	20 55 13	               jsr  puts
.162b	20 85 14	               jsr  pop
.162e	60		               rts
.162f			putahex
.162f	20 46 14	               jsr  push
.1632	20 53 16	               jsr  a2hex
.1635	a2 ff		               ldx  #<a2hexstr
.1637	a0 15		               ldy  #>a2hexstr
.1639	20 55 13	               jsr  puts
.163c	20 85 14	               jsr  pop
.163f	60		               rts
.1640			nib2hex
.1640	08		               php
.1641	29 0f		               and  #$0f
.1643	f8		               sed
.1644	18		               clc
.1645	69 90		               adc  #$90
.1647	69 40		               adc  #$40
.1649	d8		               cld
.164a	28		               plp
.164b	60		               rts
.164c			lsra4bits
.164c	08		               php
.164d	4a		               lsr
.164e	4a		               lsr
.164f	4a		               lsr
.1650	4a		               lsr
.1651	28		               plp
.1652	60		               rts
.1653			a2hex
.1653	08		               php
.1654	48		               pha
.1655	48		               pha
.1656	20 4c 16	               jsr  lsra4bits
.1659	20 40 16	               jsr  nib2hex
.165c	8d ff 15	               sta  a2hexstr
.165f	68		               pla
.1660	20 40 16	               jsr  nib2hex
.1663	8d 00 16	               sta  a2hexstr+1
.1666	a9 00		               lda  #$00                ; set end of string
.1668	8d 01 16	               sta  a2hexstr+2
.166b	68		               pla
.166c	28		               plp
.166d	60		               rts
.166e			xy2hex
.166e	20 46 14	               jsr  push
.1671	20 53 16	               jsr  a2hex
.1674	8a		               txa
.1675	48		               pha
.1676	20 4c 16	               jsr  lsra4bits
.1679	20 40 16	               jsr  nib2hex
.167c	8d ff 15	               sta  a2hexstr
.167f	68		               pla
.1680	20 40 16	               jsr  nib2hex
.1683	8d 00 16	               sta  a2hexstr+1
.1686	98		               tya
.1687	48		               pha
.1688	20 4c 16	               jsr  lsra4bits
.168b	20 40 16	               jsr  nib2hex
.168e	8d 01 16	               sta  a2hexstr+2
.1691	68		               pla
.1692	20 40 16	               jsr  nib2hex
.1695	8d 02 16	               sta  a2hexstr+3
.1698	a9 00		               lda  #$00                ; 0 ended string
.169a	8d 03 16	               sta  a2hexstr+4
.169d	20 85 14	               jsr  pop
.16a0			atobin
.16a0	20 46 14	               jsr     push
.16a3	a2 08		               ldx     #8
.16a5	a0 00		               ldy     #0
.16a7	2a		nextbit        rol
.16a8	48		               pha
.16a9	69 00		               adc     #$00
.16ab	29 01		               and     #$01
.16ad	20 40 16	               jsr     nib2hex
.16b0	99 c1 16	               sta     abin,y
.16b3	68		               pla
.16b4	c8		               iny
.16b5	ca		               dex
.16b6	d0 ef		               bne     nextbit
.16b8	a9 00		               lda     #0
.16ba	99 c1 16	               sta     abin,y
.16bd	20 85 14	               jsr     pull
.16c0	60		               rts
>16c1	30 30 30 30	abin           .null   "00000000"
>16c5	30 30 30 30 00
.16ca			putabin
.16ca	20 a0 16	               jsr     atobin
.16cd	20 46 14	               jsr     push
.16d0	a2 c1		               ldx     #<abin
.16d2	a0 16		               ldy     #>abin
.16d4	20 55 13	               jsr     puts
.16d7	20 85 14	               jsr     pop
.16da	60		               rts
.16db			putabinfmt
.16db	08		               php
.16dc	48		               pha
.16dd	a9 25		               lda     #"%"
.16df	20 4f 13	               jsr     putch
.16e2	68		               pla
.16e3	20 ca 16	               jsr     putabin
.16e6	28		               plp
.16e7	60		               rts
.16e8			putabinxy
.16e8	20 6f 13	               jsr     gotoxy
.16eb	20 ca 16	               jsr     putabin
.16ee	60		               rts
.16ef			putabinfmtxy
.16ef	20 6f 13	               jsr     gotoxy
.16f2	20 db 16	               jsr     putabinfmt
.16f5	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a     =    $41
=$42			key_b     =    $42
=$43			key_c     =    $43
=$44			key_d     =    $44
=$45			key_e     =    $45
=$46			key_f     =    $46
=$47			key_g     =    $47
=$48			key_h     =    $48
=$49			key_i     =    $49
=$4a			key_j     =    $4a
=$4b			key_k     =    $4b
=$4c			key_l     =    $4c
=$4d			key_m     =    $4d
=$4e			key_n     =    $4e
=$4f			key_o     =    $4f
=$50			key_p     =    $50
=$51			key_q     =    $51
=$52			key_r     =    $52
=$53			key_s     =    $53
=$54			key_t     =    $54
=$55			key_u     =    $55
=$56			key_v     =    $56
=$57			key_w     =    $57
=$58			key_x     =    $58
=$59			key_y     =    $59
=$5a			key_z     =    $5a
=$c1			shift_a   =    $c1
=$c2			shift_b   =    $c2
=$c3			shift_c   =    $c3
=$c4			shift_d   =    $c4
=$c5			shift_e   =    $c5
=$c6			shift_f   =    $c6
=$c7			shift_g   =    $c7
=$c8			shift_h   =    $c8
=$c9			shift_i   =    $c9
=$ca			shift_j   =    $ca
=$cb			shift_k   =    $cb
=$cc			shift_l   =    $cc
=$cd			shift_m   =    $cd
=$ce			shift_n   =    $ce
=$cf			shift_o   =    $cf
=$d0			shift_p   =    $d0
=$d1			shift_q   =    $d1
=$d2			shift_r   =    $d2
=$d3			shift_s   =    $d3
=$d4			shift_t   =    $d4
=$d5			shift_u   =    $d5
=$d6			shift_v   =    $d6
=$d7			shift_w   =    $d7
=$d8			shift_x   =    $d8
=$d9			shift_y   =    $d9
=$da			shift_z   =    $da
=$01			ctrl_a    =    $01
=$02			ctrl_b    =    $02
=$03			ctrl_c    =    $03
=$04			ctrl_d    =    $04
=$05			ctrl_e    =    $05
=$06			ctrl_f    =    $06
=$07			ctrl_g    =    $07
=$08			ctrl_h    =    $08
=$09			ctrl_i    =    $09
=$0a			ctrl_j    =    $0a
=$0b			ctrl_k    =    $0b
=$0c			ctrl_l    =    $0c
=$0d			ctrl_m    =    $0d
=$0e			ctrl_n    =    $0e
=$0f			ctrl_o    =    $0f
=$10			ctrl_p    =    $10
=$11			ctrl_q    =    $11
=$12			ctrl_r    =    $12
=$13			ctrl_s    =    $13
=$14			ctrl_t    =    $14
=$15			ctrl_u    =    $15
=$16			ctrl_v    =    $16
=$17			ctrl_w    =    $17
=$18			ctrl_x    =    $18
=$19			ctrl_y    =    $19
=$1a			ctrl_z    =    $1a
=$b0			comd_a    =    $b0
=$bf			comd_b    =    $bf
=$bc			comd_c    =    $bc
=$ac			comd_d    =    $ac
=$b1			comd_e    =    $b1
=$bb			comd_f    =    $bb
=$a5			comd_g    =    $a5
=$b4			comd_h    =    $b4
=$a2			comd_i    =    $a2
=$b5			comd_j    =    $b5
=$a1			comd_k    =    $a1
=$b6			comd_l    =    $b6
=$a7			comd_m    =    $a7
=$aa			comd_n    =    $aa
=$b9			comd_o    =    $b9
=$af			comd_p    =    $af
=$ab			comd_q    =    $ab
=$b2			comd_r    =    $b2
=$ae			comd_s    =    $ae
=$a3			comd_t    =    $a3
=$b8			comd_u    =    $b8
=$be			comd_v    =    $be
=$b3			comd_w    =    $b3
=$bd			comd_x    =    $bd
=$b7			comd_y    =    $b7
=$ad			comd_z    =    $ad
>16f6	40 41 42 43	asciitorom     .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$00
>16fa	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>1706	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$10
>170a	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>1716	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>171a	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1726	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$30  ;$30
>172a	34 35 36 37 38 39 3a 3b 3c 3d 3e 30
>1736	40 40 40 40	               .byte     $40,$40,$40,$40,$40,$40,$40,$40,$40,$40,$40,$40,$40,$40,$40,$40  ;$40
>173a	40 40 40 40 40 40 40 40 40 40 40 40
>1746	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$50
>174a	00 00 00 00 00 00 00 00 00 00 00 00
>1756	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>175a	00 00 00 00 00 00 00 00 00 00 00 00
>1766	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>176a	00 00 00 00 00 00 00 00 00 00 00 00
>1776	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>177a	00 00 00 00 00 00 00 00 00 00 00 00
>1786	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>178a	00 00 00 00 00 00 00 00 00 00 00 00
>1796	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$a0
>179a	00 00 00 00 00 00 00 00 00 00 00 00
>17a6	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$b0
>17aa	00 00 00 00 00 00 00 00 00 00 00 00
>17b6	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$c0
>17ba	00 00 00 00 00 00 00 00 00 00 00 00
>17c6	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$d0
>17ca	00 00 00 00 00 00 00 00 00 00 00 00
>17d6	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>17da	00 00 00 00 00 00 00 00 00 00 00 00
>17e6	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>17ea	00 00 00 00 00 00 00 00 00 00 00 00
.17f6			waitstop
.17f6	20 46 14	               jsr  push
.17f9	20 ed f6	wait           jsr  k_stop
.17fc	d0 fb		               bne  wait
.17fe	20 85 14	               jsr  pop
.1801	60		               rts
.1802			anykey
.1802	08		               php
.1803	48		               pha
.1804	a5 cb		nokey          lda 203
.1806	c9 40		               cmp #64
.1808	f0 fa		               beq nokey
.180a	20 10 18	               jsr releasekey
.180d	68		               pla
.180e	28		               plp
.180f	60		               rts
.1810			releasekey
.1810	08		               php
.1811	48		               pha
.1812	a5 cb		keypressed     lda 203
.1814	c9 40		               cmp #64
.1816	d0 fa		               bne keypressed
.1818	68		               pla
.1819	28		               plp
.181a	60		               rts
.181b			getkey
.181b	20 e4 ff	again          jsr  getin
.181e	c9 00		               cmp  #0
.1820	f0 f9		               beq  again
.1822	60		               rts
.1823			waitkey
.1823	20 46 14	               jsr  push
.1826	8d 74 18	               sta  thekey
.1829	20 e4 ff	nope           jsr  getin
.182c	20 d2 ff	               jsr  chrout
.182f	cd 74 18	               cmp  thekey
.1832	d0 f5		               bne  nope
.1834	20 d2 ff	               jsr  chrout
.1837	20 85 14	               jsr  pop
.183a	60		               rts
.183b			waitspace
.183b	20 46 14	               jsr  push
.183e	a9 7f		wait           lda  #$7f  ;%01111111
.1840	8d 00 dc	               sta  $dc00
.1843	ad 01 dc	               lda  $dc01
.1846	29 10		               and  #$10  ;mask %00010000
.1848	d0 f4		               bne  wait
.184a	20 85 14	               jsr  pop
.184d			waitsstop
.184d	20 46 14	               jsr  push
.1850	20 ed f6	wait           jsr  k_stop  ;%01111111
.1853	d0 fb		               bne  wait
.1855	20 85 14	               jsr  pop
.1858			waitreturn
.1858	20 46 14	               jsr  push
.185b	ad 75 18	               lda  thecount
.185e	8d 00 04	               sta  scrnram
.1861	a9 02		               lda  #$02
.1863	8d 00 d8	               sta  colorram
.1866	20 e4 ff	nope           jsr  getin
.1869	c9 0d		nohex          cmp  #$0d
.186b	d0 f9		               bne  nope
.186d	ee 75 18	               inc  thecount
.1870	20 85 14	               jsr  pop
.1873	60		               rts
>1874	00		thekey         .byte   0
>1875	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  End of listing

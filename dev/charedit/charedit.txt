
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
<<<<<<< HEAD
; Thu Nov 16 22:53:35 2023
=======
; Thu Nov 16 13:10:10 2023
>>>>>>> a276fb88c97e0ac73f4f06bedda6f24428cbaf42

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm

="20231116-100400"	version  = "20231116-100400"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

=$0400			scrnnewram     =    $0400
=14			charsdef       =    14
=9			grid_top       =    9
=1			grid_left      =    1
=16			grid_bot       =    grid_top + 7
=8			grid_right     =    grid_left + 7
=$03			mesgcol        =    vcyan
=$01			menu1col1      =    vblanc   ;vvert1
=$0f			menu1col2      =    vgris2     ;vvert
=$01			menu2col1      =    vblanc
=$0f			menu2col2      =    vgris2
=$01			flashcol       =    vblanc
=$07			whoamicol      =    vjaune
=$01			charcolor      =    vblanc
=$0c			charscolor     =    vgris1
.080d			main
.080d	20 c6 1f	               jsr  push
.0810	20 98 1e	               jsr  scrmaninit
.0813	08		               php
.0814	48		               pha
.0815	a9 08		               lda  #$08
.0817	20 d2 ff	               jsr  $ffd2
.081a	68		               pla
.081b	28		               plp
.081c	20 6b 09	               jsr  drawcredits
.081f			wait
.081f	20 18 0f	               jsr  copycharset
.0822	20 7e 1e	               jsr  screendis
.0825	20 b8 1e	               jsr  cls
.0828	20 02 0f	               jsr  setscreenptr
.082b	20 ca 09	               jsr  setdefaultchar
.082e	20 79 0f	               jsr  staticscreen
.0831	20 45 0e	               jsr  drawbitmap
.0834	a9 00		               lda  #$00
.0836	8d 57 09	               sta  fkeyset
.0839	20 b5 0f	               jsr  drawfkeys
.083c	20 91 16	               jsr  f8action
.083f	20 91 16	               jsr  f8action
.0842	a9 00		               lda  #$00
.0844	20 8b 1e	               jsr  screenena
.0847	20 db 0b	               jsr  keyaction
.084a	20 b8 1e	               jsr  cls
.084d	20 6b 09	               jsr  drawcredits
.0850	20 b8 1e	               jsr  cls
.0853	20 05 20	               jsr  pop
.0856	60		               rts
.0857			copychar
.0857	20 c6 1f	               jsr  push
.085a	20 93 08	               jsr  getvalidkey
.085d	ad 77 0f	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0860	85 fb		               sta  zpage1
.0862	ad 78 0f	               lda  bitmapaddr+1
.0865	85 fc		               sta  zpage1+1
.0867	ae c9 08	               ldx  copykey
.086a	bd c1 22	               lda  asciitorom,x
.086d	aa		               tax
.086e	e0 00		               cpx  #$00
.0870	f0 08		               beq  no_offset      ; sommes nous déja à 0
.0872	a9 08		addagain       lda  #$08
.0874	20 03 11	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0877	ca		               dex                 ; pour chaque caracteres
.0878	d0 f8		               bne  addagain
.087a	ad 5c 09	no_offset      lda  mapaddr        ; le caractere actuel
.087d	85 fd		               sta  zpage2         ;
.087f	ad 5d 09	               lda  mapaddr+1      ;
.0882	85 fe		               sta  zpage2+1       ;
.0884	a0 00		               ldy  #$00
.0886	b1 fb		nextbyte       lda  (zpage1),y
.0888	91 fd		               sta  (zpage2),y
.088a	c8		               iny
.088b	c0 08		               cpy  #$08
.088d	d0 f7		               bne  nextbyte
.088f	20 05 20	out            jsr  pop
.0892	60		               rts
.0893			thismapaddr
.0893			getvalidkey
.0893	20 c6 1f	               jsr  push
.0896	20 c6 1f	               jsr  push
.0899	a2 ac		               ldx  #<blankmsg
.089b	a0 18		               ldy  #>blankmsg
.089d	20 5e 1f	               jsr  putscxy
.08a0	a2 9d		               ldx  #<copychar_msg
.08a2	a0 1a		               ldy  #>copychar_msg
.08a4	20 5e 1f	               jsr  putscxy
.08a7	20 05 20	               jsr  pop
.08aa	20 e6 23	getgoodkey     jsr  getkey
.08ad	8d c9 08	               sta  copykey
.08b0	aa		               tax
.08b1	bc c1 22	               ldy  asciitorom,x
.08b4	c4 00		               cpy  $00
.08b6	d0 0a		               bne  goodone
.08b8	ae c9 08	               ldx  copykey
.08bb	e0 40		               cpx  #$40
.08bd	f0 03		               beq  goodone
.08bf	4c aa 08	               jmp  getgoodkey
.08c2	20 cf 1e	goodone        jsr  putch
.08c5	20 05 20	               jsr  pop
.08c8	60		               rts
>08c9	00		copykey        .byte 0
.08ca			getfname
.08ca	20 c6 1f	               jsr  push
.08cd	20 c6 1f	               jsr  push
.08d0	a2 ac		               ldx  #<blankmsg
.08d2	a0 18		               ldy  #>blankmsg
.08d4	20 5e 1f	               jsr  putscxy
.08d7	a2 c6		               ldx  #<fname_msg
.08d9	a0 1a		               ldy  #>fname_msg
.08db	20 5e 1f	               jsr  putscxy
.08de	20 05 20	               jsr  pop
.08e1	a2 00		               ldx  #$00
.08e3	8e 17 09	               stx  count
.08e6	20 2a 09	getanother     jsr  getalphanum
.08e9	20 cf 1e	goodone        jsr  putch
.08ec	ae 17 09	               ldx  count
.08ef	9d 1e 09	               sta  name,x
.08f2	ee 17 09	               inc  count
.08f5	ae 17 09	               ldx  count
.08f8	e0 06		               cpx  #$06
.08fa	f0 03		               beq  finish
.08fc	4c e6 08	               jmp  getanother
.08ff			finish
.08ff	20 c6 1f	               jsr  push
.0902	a2 ac		               ldx  #<blankmsg
.0904	a0 18		               ldy  #>blankmsg
.0906	20 5e 1f	               jsr  putscxy
.0909	a2 18		               ldx  #<pfname
.090b	a0 09		               ldy  #>pfname
.090d	20 5e 1f	               jsr  putscxy
.0910	20 05 20	               jsr  pop
.0913	20 05 20	               jsr  pop
.0916	60		               rts
>0917	00		count          .byte     0
>0918	01 01 05	pfname         .byte     1,1,5
>091b	40 30 3a	fname          .text     "@0:"
>091e	3f 3f 3f 3f	name           .text     "??????"
>0922	3f 3f
>0924	2e 43 48 52	ext            .null     ".chr"
>0928	00
>0929	00		device         .byte     0
.092a			getalphanum
.092a	20 c6 1f	               jsr  push
.092d	20 e6 23	getanother     jsr  getkey
.0930	c9 30		               cmp  #$30      ; 0
.0932	30 f9		               bmi  getanother
.0934	c9 3a		               cmp  #$3a      ; 9+1
.0936	30 0b		               bmi  goodone
.0938	c9 41		isitletter     cmp  #$41      ; A
.093a	30 f1		               bmi  getanother
.093c	c9 5b		               cmp  #$5b      ; Z+1
.093e	30 03		               bmi  goodone
.0940	4c 2d 09	               jmp  getanother
.0943	ad 4d 09	goodone        lda  tempbyte
.0946	20 05 20	               jsr  pop
.0949	ad 4d 09	               lda  tempbyte
.094c	60		               rts
>094d	00		tempbyte       .byte     0
>094e	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>0952	08 04 02 01
>0956	00		editmode       .byte     0
>0957	00		fkeyset        .byte     0
>0958	00		currentchar    .byte     0
>0959	00		currentkey     .byte     0
>095a	00		previouskey    .byte     0
>095b	00		bitmapoffset   .byte     0
>095c	00 00		mapaddr        .word     0
>095e	00 00		byteaddr       .word     0
>0960	00 00		gridaddr       .word     0
>0962	09		cursln         .byte     grid_top
>0963	01		curscl         .byte     grid_left

;******  Processing file: routines.asm

<<<<<<< HEAD
.0964			template
.0964	20 c6 1f	               jsr  push
.0967	20 05 20	               jsr  pop
.096a	60		               rts
.096b			drawcredits
.096b	20 c6 1f	               jsr  push
.096e	20 b8 1e	               jsr  cls
.0971	a2 25		               ldx #<whoami0
.0973	a0 1b		               ldy #>whoami0
.0975	20 5e 1f	               jsr putscxy
.0978	a2 4a		               ldx #<whoami1
.097a	a0 1b		               ldy #>whoami1
.097c	20 5e 1f	               jsr putscxy
.097f	a2 71		               ldx #<whoami2
.0981	a0 1b		               ldy #>whoami2
.0983	20 5e 1f	               jsr putscxy
.0986	a2 96		               ldx #<whoami3
.0988	a0 1b		               ldy #>whoami3
.098a	20 5e 1f	               jsr putscxy
.098d	a2 bb		               ldx #<whoami4
.098f	a0 1b		               ldy #>whoami4
.0991	20 5e 1f	               jsr putscxy
.0994	a2 e0		               ldx #<whoami5
.0996	a0 1b		               ldy #>whoami5
.0998	20 5e 1f	               jsr putscxy
.099b	a2 05		               ldx #<whoami6
.099d	a0 1c		               ldy #>whoami6
.099f	20 5e 1f	               jsr putscxy
.09a2	a2 2a		               ldx #<whoami7
.09a4	a0 1c		               ldy #>whoami7
.09a6	20 5e 1f	               jsr putscxy
.09a9	a2 4f		               ldx #<whoami8
.09ab	a0 1c		               ldy #>whoami8
.09ad	20 5e 1f	               jsr putscxy
.09b0	a2 74		               ldx #<whoami9
.09b2	a0 1c		               ldy #>whoami9
.09b4	20 5e 1f	               jsr putscxy
.09b7	20 21 11	               jsr  delay
.09ba	20 21 11	               jsr  delay
.09bd	20 21 11	               jsr  delay
.09c0	20 21 11	               jsr  delay
.09c3	20 21 11	               jsr  delay
.09c6	20 05 20	               jsr  pop
.09c9	60		               rts
.09ca			setdefaultchar
.09ca	20 c6 1f	               jsr  push
.09cd	a9 40		               lda  #$40
.09cf	8d 59 09	               sta  currentkey
.09d2	aa		               tax
.09d3	bc c1 22	               ldy  asciitorom,x
.09d6	8c 5b 09	               sty  bitmapoffset
.09d9	20 94 0a	               jsr  drawkeyval
.09dc	20 45 0e	               jsr  drawbitmap
.09df	20 c6 1f	               jsr  push
.09e2	a2 0d		               ldx  #13
.09e4	a0 0c		               ldy  #12
.09e6	20 ef 1e	               jsr  gotoxy
.09e9	20 05 20	               jsr  pop
.09ec	20 cf 1e	               jsr  putch
.09ef	20 c6 1f	               jsr  push
.09f2	a2 11		               ldx  #17
.09f4	a0 05		               ldy  #5
.09f6	20 ef 1e	               jsr  gotoxy
.09f9	20 05 20	               jsr  pop
.09fc	20 8c 22	               jsr  atodec
.09ff	20 c6 1f	               jsr  push
.0a02	a2 90		isx            ldx  #<adec
.0a04	a0 21		isy            ldy  #>adec
.0a06	20 d5 1e	               jsr  puts
.0a09	20 05 20	               jsr  pull
.0a0c	20 05 20	               jsr  pop
.0a0f	60		               rts
.0a10			resetmenuacolor
.0a10	20 c6 1f	               jsr  push
.0a13	a9 01		               lda  #menu1col1
.0a15	8d de 1c	               sta  f1abutton
.0a18	8d 12 1d	               sta  f3abutton
.0a1b	8d 46 1d	               sta  f5abutton
.0a1e	8d 7a 1d	               sta  f7abutton
.0a21	a9 0f		               lda  #menu2col2
.0a23	8d f8 1c	               sta  f2abutton
.0a26	8d 2c 1d	               sta  f4abutton
.0a29	8d 60 1d	               sta  f6abutton
.0a2c	8d 94 1d	               sta  f8abutton
.0a2f	20 05 20	               jsr  pop
.0a32	60		               rts
.0a33			resetmenubcolor
.0a33	20 c6 1f	               jsr  push
.0a36	a9 01		               lda  #menu2col1
.0a38	8d ae 1d	               sta  f1bbutton
.0a3b	8d e2 1d	               sta  f3bbutton
.0a3e	8d 16 1e	               sta  f5bbutton
.0a41	8d 4a 1e	               sta  f7bbutton
.0a44	a9 01		               lda  #menu2col1
.0a46	8d c8 1d	               sta  f2bbutton
.0a49	8d fc 1d	               sta  f4bbutton
.0a4c	8d 30 1e	               sta  f6bbutton
.0a4f	8d 64 1e	               sta  f8bbutton
.0a52	20 05 20	               jsr  pop
.0a55	60		               rts
.0a56			setmenuacolor
.0a56	20 c6 1f	               jsr  push
.0a59	8d de 1c	               sta  f1abutton
.0a5c	8d f8 1c	               sta  f2abutton
.0a5f	8d 12 1d	               sta  f3abutton
.0a62	8d 2c 1d	               sta  f4abutton
.0a65	8d 46 1d	               sta  f5abutton
.0a68	8d 60 1d	               sta  f6abutton
.0a6b	8d 7a 1d	               sta  f7abutton
.0a6e	8d 94 1d	               sta  f8abutton
.0a71	20 05 20	               jsr  pop
.0a74	60		               rts
.0a75			setmenubcolor
.0a75	20 c6 1f	               jsr  push
.0a78	8d ae 1d	               sta  f1bbutton
.0a7b	8d c8 1d	               sta  f2bbutton
.0a7e	8d e2 1d	               sta  f3bbutton
.0a81	8d fc 1d	               sta  f4bbutton
.0a84	8d 16 1e	               sta  f5bbutton
.0a87	8d 30 1e	               sta  f6bbutton
.0a8a	8d 4a 1e	               sta  f7bbutton
.0a8d	8d 64 1e	               sta  f8bbutton
.0a90	20 05 20	               jsr  pop
.0a93	60		               rts
.0a94			drawkeyval
.0a94	20 c6 1f	               jsr  push
.0a97	20 c6 1f	               jsr  push
.0a9a	a2 01		               ldx  #1
.0a9c	a0 13		               ldy  #19
.0a9e	20 ef 1e	               jsr  gotoxy
.0aa1	20 05 20	               jsr  pop
.0aa4	ad 59 09	               lda  currentkey
.0aa7	20 cf 1e	               jsr  putch
.0aaa	48		               pha
.0aab	a9 3d		               lda  #'='
.0aad	20 cf 1e	               jsr  putch
.0ab0	a9 25		               lda  #'%'
.0ab2	20 cf 1e	               jsr  putch
.0ab5	68		               pla
.0ab6	20 52 22	               jsr  putabin
.0ab9	20 c6 1f	               jsr  push
.0abc	a2 01		               ldx  #1
.0abe	a0 14		               ldy  #20
.0ac0	20 ef 1e	               jsr  gotoxy
.0ac3	20 05 20	               jsr  pop
.0ac6	20 c6 1f	               jsr  push
.0ac9	a2 95		isx            ldx  #<txt1
.0acb	a0 0b		isy            ldy  #>txt1
.0acd	20 d5 1e	               jsr  puts
.0ad0	20 05 20	               jsr  pull
.0ad3	a9 24		               lda  #'$'
.0ad5	20 cf 1e	               jsr  putch
.0ad8	ad 59 09	               lda  currentkey
.0adb	20 bf 21	               jsr  putahex
.0ade	20 c6 1f	               jsr  push
.0ae1	a2 01		               ldx  #1
.0ae3	a0 15		               ldy  #21
.0ae5	20 ef 1e	               jsr  gotoxy
.0ae8	20 05 20	               jsr  pop
.0aeb	20 c6 1f	               jsr  push
.0aee	a2 a0		isx            ldx  #<txt2
.0af0	a0 0b		isy            ldy  #>txt2
.0af2	20 d5 1e	               jsr  puts
.0af5	20 05 20	               jsr  pull
.0af8	a9 24		               lda  #'$'
.0afa	20 cf 1e	               jsr  putch
.0afd	ad 78 0f	               lda  bitmapaddr+1
.0b00	20 bf 21	               jsr  putahex
.0b03	ad 77 0f	               lda  bitmapaddr
.0b06	20 bf 21	               jsr  putahex
.0b09	20 c6 1f	               jsr  push
.0b0c	a2 01		               ldx  #1
.0b0e	a0 16		               ldy  #22
.0b10	20 ef 1e	               jsr  gotoxy
.0b13	20 05 20	               jsr  pop
.0b16	20 c6 1f	               jsr  push
.0b19	a2 ab		isx            ldx  #<txt3
.0b1b	a0 0b		isy            ldy  #>txt3
.0b1d	20 d5 1e	               jsr  puts
.0b20	20 05 20	               jsr  pull
.0b23	a9 24		               lda  #'$'
.0b25	20 cf 1e	               jsr  putch
.0b28	ad 5b 09	               lda  bitmapoffset
.0b2b	20 bf 21	               jsr  putahex
.0b2e	20 c6 1f	               jsr  push
.0b31	a2 01		               ldx  #1
.0b33	a0 17		               ldy  #23
.0b35	20 ef 1e	               jsr  gotoxy
.0b38	20 05 20	               jsr  pop
.0b3b	20 c6 1f	               jsr  push
.0b3e	a2 b8		isx            ldx  #<txt4
.0b40	a0 0b		isy            ldy  #>txt4
.0b42	20 d5 1e	               jsr  puts
.0b45	20 05 20	               jsr  pull
.0b48	a9 24		               lda  #'$'
.0b4a	20 cf 1e	               jsr  putch
.0b4d	ad 5d 09	               lda  mapaddr+1
.0b50	20 bf 21	               jsr  putahex
.0b53	ad 5c 09	               lda  mapaddr
.0b56	20 bf 21	               jsr  putahex
.0b59	20 c6 1f	               jsr  push
.0b5c	a2 01		               ldx  #1
.0b5e	a0 18		               ldy  #24
.0b60	20 ef 1e	               jsr  gotoxy
.0b63	20 05 20	               jsr  pop
.0b66	20 c6 1f	               jsr  push
.0b69	a2 c3		isx            ldx  #<txt5
.0b6b	a0 0b		isy            ldy  #>txt5
.0b6d	20 d5 1e	               jsr  puts
.0b70	20 05 20	               jsr  pull
.0b73	ad 63 09	               lda  curscl
.0b76	20 bf 21	               jsr  putahex
.0b79	a9 da		               lda  #$da
.0b7b	20 cf 1e	               jsr  putch
.0b7e	ad 62 09	               lda  cursln
.0b81	20 bf 21	               jsr  putahex
.0b84	20 05 20	               jsr  pop
.0b87	60		               rts
>0b88	50 45 54 53	txt0           .null     "petscii :   "
>0b8c	43 49 49 20 3a 20 20 20 00
>0b95	4b 45 59 20	txt1           .null     "key code: "
>0b99	43 4f 44 45 3a 20 00
>0ba0	42 49 54 4d	txt2           .null     "bitmap..: "
>0ba4	41 50 2e 2e 3a 20 00
>0bab	4f 46 46 53	txt3           .null     "offset..:   "
>0baf	45 54 2e 2e 3a 20 20 20 00
>0bb8	4d 41 50 41	txt4           .null     "mapaddr.: "
>0bbc	44 44 52 2e 3a 20 00
>0bc3	43 55 52 53	txt5           .null     "cursval.: "
>0bc7	56 41 4c 2e 3a 20 00
>0bce	53 54 41 43	txt6           .null     "stack......:"
>0bd2	4b 2e 2e 2e 2e 2e 2e 3a 00
.0bdb			keyaction
.0bdb	20 c6 1f	               jsr  push
.0bde	20 e6 23	loop           jsr  getkey
.0be1	c9 85		f1             cmp  #key_f1
.0be3	d0 03		               bne  f2
.0be5	4c 59 0c	               jmp  dof1
.0be8	c9 89		f2             cmp  #key_f2
.0bea	d0 03		               bne  f3
.0bec	4c 5f 0c	               jmp  dof2
.0bef	c9 86		f3             cmp  #key_f3
.0bf1	d0 03		               bne  f4
.0bf3	4c 65 0c	               jmp  dof3
.0bf6	c9 8a		f4             cmp  #key_f4
.0bf8	d0 03		               bne  f5
.0bfa	4c 6b 0c	               jmp  dof4
.0bfd	c9 87		f5             cmp  #key_f5
.0bff	d0 03		               bne  f6
.0c01	4c 71 0c	               jmp  dof5
.0c04	c9 8b		f6             cmp  #key_f6
.0c06	d0 03		               bne  f7
.0c08	4c 77 0c	               jmp  dof6
.0c0b	c9 88		f7             cmp  #key_f7
.0c0d	d0 03		               bne  f8
.0c0f	4c 7d 0c	               jmp  dof7
.0c12	c9 8c		f8             cmp  #key_f8
.0c14	d0 03		               bne  ctrlx
.0c16	4c 83 0c	               jmp  dof8
.0c19	c9 18		ctrlx          cmp  #ctrl_x
.0c1b	d0 03		               bne  ishex14
.0c1d	4c 89 0c	               jmp  doquit
.0c20	c9 14		ishex14        cmp  #$14
.0c22	d0 03		               bne  ishex12
.0c24	4c de 0b	               jmp  loop
.0c27	c9 12		ishex12        cmp  #$12
.0c29	d0 03		               bne  reste
.0c2b	4c de 0b	               jmp  loop
.0c2e			reste
.0c2e	20 c6 1f	               jsr  push
.0c31	a2 0d		               ldx  #13
.0c33	a0 0c		               ldy  #12
.0c35	20 ef 1e	               jsr  gotoxy
.0c38	20 05 20	               jsr  pop
.0c3b	20 cf 1e	               jsr  putch
.0c3e	48		               pha
.0c3f	ad 59 09	               lda  currentkey
.0c42	8d 5a 09	               sta  previouskey
.0c45	68		               pla
.0c46	8d 59 09	               sta  currentkey
.0c49	aa		               tax
.0c4a	bc c1 22	               ldy  asciitorom,x
.0c4d	8c 5b 09	               sty  bitmapoffset
.0c50	20 94 0a	               jsr  drawkeyval
.0c53	20 45 0e	               jsr  drawbitmap
.0c56	4c de 0b	               jmp  loop
.0c59	20 37 11	dof1           jsr  f1action  ;edit/reverse
.0c5c	4c de 0b	               jmp  loop
.0c5f	20 1a 12	dof2           jsr  f2action  ;save/flip vert
.0c62	4c de 0b	               jmp  loop
.0c65	20 d2 12	dof3           jsr  f3action  ;load/flip horz
.0c68	4c de 0b	               jmp  loop
.0c6b	20 9b 13	dof4           jsr  f4action  ;copy/scroll r
.0c6e	4c de 0b	               jmp  loop
.0c71	20 64 14	dof5           jsr  f5action  ;clear/scroll l
.0c74	4c de 0b	               jmp  loop
.0c77	20 1c 15	dof6           jsr  f6action  ;fill;/scroll up
.0c7a	4c de 0b	               jmp  loop
.0c7d	20 d4 15	dof7           jsr  f7action  ;clear;/scroll down
.0c80	4c de 0b	               jmp  loop
.0c83	20 91 16	dof8           jsr  f8action  ; function
.0c86	4c de 0b	               jmp  loop
.0c89	20 05 20	doquit         jsr  pop
.0c8c	60		               rts
.0c8d			editor
.0c8d	20 c6 1f	               jsr  push
.0c90	20 c6 1f	               jsr  push
.0c93	a2 ac		               ldx  #<blankmsg
.0c95	a0 18		               ldy  #>blankmsg
.0c97	20 5e 1f	               jsr  putscxy
.0c9a	a2 10		               ldx  #<exit_msg
.0c9c	a0 1b		               ldy  #>exit_msg
.0c9e	20 5e 1f	               jsr  putscxy
.0ca1	20 05 20	               jsr  pop
.0ca4	20 c6 1f	               jsr  push
.0ca7	a2 ac		               ldx  #<blankmsg
.0ca9	a0 18		               ldy  #>blankmsg
.0cab	20 5e 1f	               jsr  putscxy
.0cae	a2 f3		               ldx  #<edit_msg
.0cb0	a0 18		               ldy  #>edit_msg
.0cb2	20 5e 1f	               jsr  putscxy
.0cb5	20 05 20	               jsr  pop
.0cb8	a9 0c		               lda  #vgris1
.0cba	20 56 0a	               jsr  setmenuacolor
.0cbd	a9 01		               lda  #menu1col1
.0cbf	8d de 1c	               sta  f1abutton
.0cc2	20 b5 0f	               jsr  drawfkeys
.0cc5	20 01 0e	               jsr  setcurs
.0cc8	ad 59 09	               lda  currentkey
.0ccb	20 c6 1f	               jsr  push
.0cce	a2 11		               ldx  #17
.0cd0	a0 05		               ldy  #5
.0cd2	20 ef 1e	               jsr  gotoxy
.0cd5	20 05 20	               jsr  pop
.0cd8	20 8c 22	               jsr  atodec
.0cdb	20 c6 1f	               jsr  push
.0cde	a2 90		isx            ldx  #<adec
.0ce0	a0 21		isy            ldy  #>adec
.0ce2	20 d5 1e	               jsr  puts
.0ce5	20 05 20	               jsr  pull
.0ce8	20 45 0e	               jsr  drawbitmap
.0ceb	20 e6 23	ed_loop        jsr  getkey
.0cee	c9 91		cu             cmp  #cursu
.0cf0	d0 03		               bne  cd
.0cf2	4c 7e 0d	               jmp  do_up
.0cf5	c9 11		cd             cmp  #cursd
.0cf7	d0 03		               bne  cl
.0cf9	4c 91 0d	               jmp  do_down
.0cfc	c9 9d		cl             cmp  #cursl
.0cfe	d0 03		               bne  cr
.0d00	4c a4 0d	               jmp  do_left
.0d03	c9 1d		cr             cmp  #cursr
.0d05	d0 03		               bne  cx
.0d07	4c b7 0d	               jmp  do_right
.0d0a	c9 18		cx             cmp  #ctrl_x
.0d0c	d0 03		               bne  sp
.0d0e	4c d3 0d	               jmp  do_ctrlx
.0d11	c9 20		sp             cmp  #$20
.0d13	d0 03		               bne  ishex14
.0d15	4c ca 0d	               jmp  do_swap
.0d18	c9 14		ishex14        cmp  #$14
.0d1a	d0 03		               bne  ishex12
.0d1c	4c ca 0d	               jmp  do_swap
.0d1f	c9 12		ishex12        cmp  #$12
.0d21	d0 03		               bne  rest
.0d23	4c ca 0d	               jmp  do_swap
.0d26			rest
.0d26	20 c6 1f	               jsr  push
.0d29	a2 0d		               ldx  #13
.0d2b	a0 0c		               ldy  #12
.0d2d	20 ef 1e	               jsr  gotoxy
.0d30	20 05 20	               jsr  pop
.0d33	20 cf 1e	               jsr  putch
.0d36	48		               pha
.0d37	ad 59 09	               lda  currentkey
.0d3a	8d 5a 09	               sta  previouskey
.0d3d	68		               pla
.0d3e	8d 59 09	               sta  currentkey
.0d41	aa		               tax
.0d42	bc c1 22	               ldy  asciitorom,x
.0d45	8c 5b 09	               sty  bitmapoffset
.0d48	20 94 0a	               jsr  drawkeyval
.0d4b	20 45 0e	               jsr  drawbitmap
.0d4e	20 c6 1f	               jsr  push
.0d51	a2 0d		               ldx  #13
.0d53	a0 0c		               ldy  #12
.0d55	20 ef 1e	               jsr  gotoxy
.0d58	20 05 20	               jsr  pop
.0d5b	20 cf 1e	               jsr  putch
.0d5e	20 c6 1f	               jsr  push
.0d61	a2 11		               ldx  #17
.0d63	a0 05		               ldy  #5
.0d65	20 ef 1e	               jsr  gotoxy
.0d68	20 05 20	               jsr  pop
.0d6b	20 8c 22	               jsr  atodec
.0d6e	20 c6 1f	               jsr  push
.0d71	a2 90		isx            ldx  #<adec
.0d73	a0 21		isy            ldy  #>adec
.0d75	20 d5 1e	               jsr  puts
.0d78	20 05 20	               jsr  pull
.0d7b	4c d0 0d	               jmp  totop
.0d7e	ad 62 09	do_up          lda  cursln
.0d81	c9 09		               cmp  #grid_top
.0d83	f0 4b		               beq  totop
.0d85	20 23 0e	               jsr  clrcurs
.0d88	ce 62 09	               dec  cursln
.0d8b	20 01 0e	               jsr  setcurs
.0d8e	4c d0 0d	               jmp  totop
.0d91	ad 62 09	do_down        lda  cursln
.0d94	c9 10		               cmp  #grid_bot
.0d96	f0 38		               beq  totop
.0d98	20 23 0e	               jsr  clrcurs
.0d9b	ee 62 09	               inc  cursln
.0d9e	20 01 0e	               jsr  setcurs
.0da1	4c d0 0d	               jmp  totop
.0da4	ad 63 09	do_left        lda  curscl
.0da7	c9 01		               cmp  #grid_left
.0da9	f0 25		               beq  totop
.0dab	20 23 0e	               jsr  clrcurs
.0dae	ce 63 09	               dec  curscl
.0db1	20 01 0e	               jsr  setcurs
.0db4	4c d0 0d	               jmp  totop
.0db7	ad 63 09	do_right       lda  curscl
.0dba	c9 08		               cmp  #grid_right
.0dbc	f0 12		               beq  totop
.0dbe	20 23 0e	               jsr  clrcurs
.0dc1	ee 63 09	               inc  curscl
.0dc4	20 01 0e	               jsr  setcurs
.0dc7	4c d0 0d	               jmp  totop
.0dca	20 da 0d	do_swap        jsr  do_eor
.0dcd	20 45 0e	               jsr  drawbitmap
.0dd0	4c eb 0c	totop          jmp  ed_loop
.0dd3	20 23 0e	do_ctrlx       jsr  clrcurs
.0dd6	20 05 20	               jsr  pop
.0dd9	60		               rts
.0dda			do_eor
.0dda	20 c6 1f	               jsr  push
.0ddd	ad 5c 09	               lda  mapaddr
.0de0	85 fd		               sta  zpage2
.0de2	ad 5d 09	               lda  mapaddr+1
.0de5	85 fe		               sta  zpage2+1
.0de7	ae 62 09	               ldx  cursln     ; calcul de
.0dea	ca		               dex            ; l'offset de
.0deb	8a		               txa            ; la
.0dec	29 f7		               and  #$f7      ; ligne
.0dee	a8		               tay
.0def	ae 63 09	               ldx  curscl
.0df2	ca		               dex
.0df3	bd 4e 09	               lda  eorval,x
.0df6	51 fd		               eor  (zpage2),y
.0df8	20 94 0a	               jsr  drawkeyval
.0dfb	91 fd		               sta  (zpage2),y
.0dfd	20 05 20	               jsr  pop
.0e00	60		               rts
.0e01			setcurs
.0e01	20 c6 1f	               jsr  push
.0e04	a2 01		               ldx  #grid_left
.0e06	ac 62 09	               ldy  cursln
.0e09	20 ef 1e	               jsr  gotoxy
.0e0c	a9 da		               lda  #$da
.0e0e	20 cf 1e	               jsr  putch
.0e11	ae 63 09	               ldx  curscl
.0e14	e8		               inx
.0e15	a0 08		               ldy  #grid_top-1
.0e17	20 ef 1e	               jsr  gotoxy
.0e1a	a9 da		               lda  #$da
.0e1c	20 cf 1e	               jsr  putch
.0e1f	20 05 20	               jsr  pop
.0e22	60		               rts
.0e23			clrcurs
.0e23	20 c6 1f	               jsr  push
.0e26	a2 01		               ldx  #grid_left
.0e28	ac 62 09	               ldy  cursln
.0e2b	20 ef 1e	               jsr  gotoxy
.0e2e	a9 20		               lda  #$20
.0e30	20 cf 1e	               jsr  putch
.0e33	ae 63 09	               ldx  curscl
.0e36	e8		               inx
.0e37	a0 08		               ldy  #grid_top-1
.0e39	20 ef 1e	               jsr  gotoxy
.0e3c	a9 20		               lda  #$20
.0e3e	20 cf 1e	               jsr  putch
.0e41	20 05 20	               jsr  pop
.0e44	60		               rts
.0e45			drawbitmap
.0e45	20 c6 1f	               jsr  push
.0e48	20 ac 0e	               jsr  calcmapaddr
.0e4b	ad 5c 09	               lda  mapaddr        ; on pointe sur la table des bitmaps
.0e4e	85 fb		               sta  zpage1
.0e50	ad 5d 09	               lda  mapaddr+1
.0e53	85 fc		               sta  zpage1+1
.0e55	a0 00		drawchar       ldy  #$00
.0e57	a2 09		               ldx  #grid_top      ;on replace la ...
.0e59	8e 62 0e	               stx  isy+1          ;ligne de départ
.0e5c	20 c6 1f	nextline       jsr  push
.0e5f	a2 02		               ldx  #grid_left+1        ; la colonne
.0e61	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.0e63	20 ef 1e	               jsr  gotoxy
.0e66	20 05 20	               jsr  pop
.0e69	b1 fb		               lda  (zpage1),y     ; on li une ligne
.0e6b	20 30 22	               jsr  atobin
.0e6e	20 db 0e	               jsr  abintograph
.0e71	20 c6 1f	               jsr  push
.0e74	a2 87		isx            ldx  #<abin
.0e76	a0 21		isy            ldy  #>abin
.0e78	20 d5 1e	               jsr  puts
.0e7b	20 05 20	               jsr  pull
.0e7e	ee 62 0e	               inc  isy+1
.0e81	c8		               iny
.0e82	c0 08		               cpy  #$08
.0e84	30 d6		               bmi  nextline
.0e86	20 8d 0e	               jsr  highlight
.0e89	20 05 20	               jsr  pop
.0e8c	60		               rts
.0e8d			highlight
.0e8d	20 c6 1f	               jsr  push
.0e90	ae 5a 09	               ldx  previouskey
.0e93	bd c1 22	               lda  asciitorom,x
.0e96	aa		               tax
.0e97	a9 0c		               lda  #charscolor
.0e99	9d 00 d8	               sta  colorram,x
.0e9c	ae 59 09	               ldx  currentkey
.0e9f	bd c1 22	               lda  asciitorom,x
.0ea2	aa		               tax
.0ea3	a9 0d		               lda  #charcolor
.0ea5	9d 00 d8	               sta  colorram,x
.0ea8	20 05 20	               jsr  pop
.0eab	60		               rts
.0eac			calcmapaddr
.0eac	20 c6 1f	               jsr  push
.0eaf	ad 77 0f	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0eb2	85 fb		               sta  zpage1
.0eb4	ad 78 0f	               lda  bitmapaddr+1
.0eb7	85 fc		               sta  zpage1+1
.0eb9	ae 5b 09	               ldx  bitmapoffset
.0ebc	e0 00		               cpx  #$00
.0ebe	f0 08		               beq  thesame         ; sommes nous déja à 0
.0ec0	a9 08		addagain       lda  #$08
.0ec2	20 03 11	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0ec5	ca		               dex                 ; pour chaque caracteres
.0ec6	d0 f8		               bne  addagain
.0ec8	48		thesame        pha
.0ec9	a5 fb		               lda  zpage1
.0ecb	8d 5c 09	               sta  mapaddr
.0ece	a5 fc		               lda  zpage1+1
.0ed0	8d 5d 09	               sta  mapaddr+1
.0ed3	68		               pla
.0ed4	20 94 0a	               jsr  drawkeyval
.0ed7	20 05 20	out            jsr  pop
.0eda	60		               rts
.0edb			abintograph
.0edb	20 c6 1f	               jsr  push
.0ede	a9 87		               lda  #<abin
.0ee0	85 fb		               sta  zpage1
.0ee2	a9 21		               lda  #>abin+1
.0ee4	85 fc		               sta  zpage1+1
.0ee6	a0 00		               ldy  #$00
.0ee8	b1 fb		nextbit        lda  (zpage1),y
.0eea	c9 30		               cmp  #$30
.0eec	f0 07		               beq  itszero
.0eee	a9 d1		itsone         lda  #$d1
.0ef0	91 fb		               sta  (zpage1),y
.0ef2	4c f9 0e	               jmp  next
.0ef5	a9 2e		itszero        lda  #$2e
.0ef7	91 fb		               sta  (zpage1),y
.0ef9	c8		next           iny
.0efa	c0 08		               cpy  #$08
.0efc	30 ea		               bmi  nextbit
.0efe	20 05 20	               jsr  pop
.0f01	60		               rts
.0f02			setscreenptr
.0f02	20 c6 1f	               jsr  push
.0f05	a9 08		               lda  #$08      ; basic commande to disable ...
.0f07	20 d2 ff	               jsr  chrout    ; ... character set change.
.0f0a	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.0f0d	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.0f0f	09 0e		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.0f11	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.0f14	20 05 20	               jsr  pop
.0f17	60		               rts
.0f18			copycharset
.0f18	20 c6 1f	               jsr  push
.0f1b	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0f1e	29 fe		               and  #%11111110     ;254
.0f20	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0f23	a5 01		               lda  u6510map       ;$01
.0f25	29 fb		               and  #%11111011     ;251
.0f27	85 01		               sta  u6510map       ;$01
.0f29	20 3e 0f	               jsr  memcopy
.0f2c	a5 01		               lda  u6510map       ;$01
.0f2e	09 04		               ora  #%00000100
.0f30	85 01		               sta  u6510map       ;$01
.0f32	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0f35	09 01		               ora  #%00000001     ;254
.0f37	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0f3a	20 05 20	               jsr  pop
.0f3d	60		               rts
.0f3e			memcopy
.0f3e	20 c6 1f	               jsr  push
.0f41	ad 73 0f	               lda  startaddr
.0f44	85 fb		               sta  zpage1
.0f46	ad 74 0f	               lda  startaddr+1
.0f49	85 fc		               sta  zpage1+1
.0f4b	ad 77 0f	               lda  bitmapaddr
.0f4e	85 fd		               sta  zpage2
.0f50	ad 78 0f	               lda  bitmapaddr+1
.0f53	85 fe		               sta  zpage2+1
.0f55	a0 00		               ldy  #$00
.0f57	b1 fb		onemore        lda  (zpage1),y
.0f59	91 fd		               sta  (zpage2),y
.0f5b	20 cd 20	               jsr  inczp1
.0f5e	20 e5 20	               jsr  inczp2
.0f61	a5 fc		               lda  zpage1+1
.0f63	cd 76 0f	               cmp  stopaddr+1
.0f66	d0 ef		               bne  onemore
.0f68	a5 fb		               lda  zpage1
.0f6a	cd 75 0f	               cmp  stopaddr
.0f6d	d0 e8		               bne  onemore
.0f6f	20 05 20	               jsr  pop
.0f72	60		               rts
=======
.0953			template
.0953	20 b5 1f	               jsr  push
.0956	20 f4 1f	               jsr  pop
.0959	60		               rts
.095a			splashscreen
.095a	20 b5 1f	               jsr  push
.095d	20 a7 1e	               jsr  cls
.0960	a2 14		               ldx #<whoami0
.0962	a0 1b		               ldy #>whoami0
.0964	20 4d 1f	               jsr putscxy
.0967	a2 39		               ldx #<whoami1
.0969	a0 1b		               ldy #>whoami1
.096b	20 4d 1f	               jsr putscxy
.096e	a2 60		               ldx #<whoami2
.0970	a0 1b		               ldy #>whoami2
.0972	20 4d 1f	               jsr putscxy
.0975	a2 85		               ldx #<whoami3
.0977	a0 1b		               ldy #>whoami3
.0979	20 4d 1f	               jsr putscxy
.097c	a2 aa		               ldx #<whoami4
.097e	a0 1b		               ldy #>whoami4
.0980	20 4d 1f	               jsr putscxy
.0983	a2 cf		               ldx #<whoami5
.0985	a0 1b		               ldy #>whoami5
.0987	20 4d 1f	               jsr putscxy
.098a	a2 f4		               ldx #<whoami6
.098c	a0 1b		               ldy #>whoami6
.098e	20 4d 1f	               jsr putscxy
.0991	a2 19		               ldx #<whoami7
.0993	a0 1c		               ldy #>whoami7
.0995	20 4d 1f	               jsr putscxy
.0998	a2 3e		               ldx #<whoami8
.099a	a0 1c		               ldy #>whoami8
.099c	20 4d 1f	               jsr putscxy
.099f	a2 63		               ldx #<whoami9
.09a1	a0 1c		               ldy #>whoami9
.09a3	20 4d 1f	               jsr putscxy
.09a6	20 10 11	               jsr  delay
.09a9	20 10 11	               jsr  delay
.09ac	20 10 11	               jsr  delay
.09af	20 10 11	               jsr  delay
.09b2	20 10 11	               jsr  delay
.09b5	20 f4 1f	               jsr  pop
.09b8	60		               rts
.09b9			setdefaultchar
.09b9	20 b5 1f	               jsr  push
.09bc	a9 40		               lda  #$40
.09be	8d 48 09	               sta  currentkey
.09c1	aa		               tax
.09c2	bc b0 22	               ldy  asciitorom,x
.09c5	8c 4a 09	               sty  bitmapoffset
.09c8	20 83 0a	               jsr  drawkeyval
.09cb	20 34 0e	               jsr  drawbitmap
.09ce	20 b5 1f	               jsr  push
.09d1	a2 0d		               ldx  #13
.09d3	a0 0c		               ldy  #12
.09d5	20 de 1e	               jsr  gotoxy
.09d8	20 f4 1f	               jsr  pop
.09db	20 be 1e	               jsr  putch
.09de	20 b5 1f	               jsr  push
.09e1	a2 11		               ldx  #17
.09e3	a0 05		               ldy  #5
.09e5	20 de 1e	               jsr  gotoxy
.09e8	20 f4 1f	               jsr  pop
.09eb	20 7b 22	               jsr  atodec
.09ee	20 b5 1f	               jsr  push
.09f1	a2 7f		isx            ldx  #<adec
.09f3	a0 21		isy            ldy  #>adec
.09f5	20 c4 1e	               jsr  puts
.09f8	20 f4 1f	               jsr  pull
.09fb	20 f4 1f	               jsr  pop
.09fe	60		               rts
.09ff			resetmenuacolor
.09ff	20 b5 1f	               jsr  push
.0a02	a9 01		               lda  #menu1col1
.0a04	8d cd 1c	               sta  f1abutton
.0a07	8d 01 1d	               sta  f3abutton
.0a0a	8d 35 1d	               sta  f5abutton
.0a0d	8d 69 1d	               sta  f7abutton
.0a10	a9 0f		               lda  #menu2col2
.0a12	8d e7 1c	               sta  f2abutton
.0a15	8d 1b 1d	               sta  f4abutton
.0a18	8d 4f 1d	               sta  f6abutton
.0a1b	8d 83 1d	               sta  f8abutton
.0a1e	20 f4 1f	               jsr  pop
.0a21	60		               rts
.0a22			resetmenubcolor
.0a22	20 b5 1f	               jsr  push
.0a25	a9 01		               lda  #menu2col1
.0a27	8d 9d 1d	               sta  f1bbutton
.0a2a	8d d1 1d	               sta  f3bbutton
.0a2d	8d 05 1e	               sta  f5bbutton
.0a30	8d 39 1e	               sta  f7bbutton
.0a33	a9 01		               lda  #menu2col1
.0a35	8d b7 1d	               sta  f2bbutton
.0a38	8d eb 1d	               sta  f4bbutton
.0a3b	8d 1f 1e	               sta  f6bbutton
.0a3e	8d 53 1e	               sta  f8bbutton
.0a41	20 f4 1f	               jsr  pop
.0a44	60		               rts
.0a45			setmenuacolor
.0a45	20 b5 1f	               jsr  push
.0a48	8d cd 1c	               sta  f1abutton
.0a4b	8d e7 1c	               sta  f2abutton
.0a4e	8d 01 1d	               sta  f3abutton
.0a51	8d 1b 1d	               sta  f4abutton
.0a54	8d 35 1d	               sta  f5abutton
.0a57	8d 4f 1d	               sta  f6abutton
.0a5a	8d 69 1d	               sta  f7abutton
.0a5d	8d 83 1d	               sta  f8abutton
.0a60	20 f4 1f	               jsr  pop
.0a63	60		               rts
.0a64			setmenubcolor
.0a64	20 b5 1f	               jsr  push
.0a67	8d 9d 1d	               sta  f1bbutton
.0a6a	8d b7 1d	               sta  f2bbutton
.0a6d	8d d1 1d	               sta  f3bbutton
.0a70	8d eb 1d	               sta  f4bbutton
.0a73	8d 05 1e	               sta  f5bbutton
.0a76	8d 1f 1e	               sta  f6bbutton
.0a79	8d 39 1e	               sta  f7bbutton
.0a7c	8d 53 1e	               sta  f8bbutton
.0a7f	20 f4 1f	               jsr  pop
.0a82	60		               rts
.0a83			drawkeyval
.0a83	20 b5 1f	               jsr  push
.0a86	20 b5 1f	               jsr  push
.0a89	a2 01		               ldx  #1
.0a8b	a0 13		               ldy  #19
.0a8d	20 de 1e	               jsr  gotoxy
.0a90	20 f4 1f	               jsr  pop
.0a93	ad 48 09	               lda  currentkey
.0a96	20 be 1e	               jsr  putch
.0a99	48		               pha
.0a9a	a9 3d		               lda  #'='
.0a9c	20 be 1e	               jsr  putch
.0a9f	a9 25		               lda  #'%'
.0aa1	20 be 1e	               jsr  putch
.0aa4	68		               pla
.0aa5	20 41 22	               jsr  putabin
.0aa8	20 b5 1f	               jsr  push
.0aab	a2 01		               ldx  #1
.0aad	a0 14		               ldy  #20
.0aaf	20 de 1e	               jsr  gotoxy
.0ab2	20 f4 1f	               jsr  pop
.0ab5	20 b5 1f	               jsr  push
.0ab8	a2 84		isx            ldx  #<txt1
.0aba	a0 0b		isy            ldy  #>txt1
.0abc	20 c4 1e	               jsr  puts
.0abf	20 f4 1f	               jsr  pull
.0ac2	a9 24		               lda  #'$'
.0ac4	20 be 1e	               jsr  putch
.0ac7	ad 48 09	               lda  currentkey
.0aca	20 ae 21	               jsr  putahex
.0acd	20 b5 1f	               jsr  push
.0ad0	a2 01		               ldx  #1
.0ad2	a0 15		               ldy  #21
.0ad4	20 de 1e	               jsr  gotoxy
.0ad7	20 f4 1f	               jsr  pop
.0ada	20 b5 1f	               jsr  push
.0add	a2 8f		isx            ldx  #<txt2
.0adf	a0 0b		isy            ldy  #>txt2
.0ae1	20 c4 1e	               jsr  puts
.0ae4	20 f4 1f	               jsr  pull
.0ae7	a9 24		               lda  #'$'
.0ae9	20 be 1e	               jsr  putch
.0aec	ad 67 0f	               lda  bitmapaddr+1
.0aef	20 ae 21	               jsr  putahex
.0af2	ad 66 0f	               lda  bitmapaddr
.0af5	20 ae 21	               jsr  putahex
.0af8	20 b5 1f	               jsr  push
.0afb	a2 01		               ldx  #1
.0afd	a0 16		               ldy  #22
.0aff	20 de 1e	               jsr  gotoxy
.0b02	20 f4 1f	               jsr  pop
.0b05	20 b5 1f	               jsr  push
.0b08	a2 9a		isx            ldx  #<txt3
.0b0a	a0 0b		isy            ldy  #>txt3
.0b0c	20 c4 1e	               jsr  puts
.0b0f	20 f4 1f	               jsr  pull
.0b12	a9 24		               lda  #'$'
.0b14	20 be 1e	               jsr  putch
.0b17	ad 4a 09	               lda  bitmapoffset
.0b1a	20 ae 21	               jsr  putahex
.0b1d	20 b5 1f	               jsr  push
.0b20	a2 01		               ldx  #1
.0b22	a0 17		               ldy  #23
.0b24	20 de 1e	               jsr  gotoxy
.0b27	20 f4 1f	               jsr  pop
.0b2a	20 b5 1f	               jsr  push
.0b2d	a2 a7		isx            ldx  #<txt4
.0b2f	a0 0b		isy            ldy  #>txt4
.0b31	20 c4 1e	               jsr  puts
.0b34	20 f4 1f	               jsr  pull
.0b37	a9 24		               lda  #'$'
.0b39	20 be 1e	               jsr  putch
.0b3c	ad 4c 09	               lda  mapaddr+1
.0b3f	20 ae 21	               jsr  putahex
.0b42	ad 4b 09	               lda  mapaddr
.0b45	20 ae 21	               jsr  putahex
.0b48	20 b5 1f	               jsr  push
.0b4b	a2 01		               ldx  #1
.0b4d	a0 18		               ldy  #24
.0b4f	20 de 1e	               jsr  gotoxy
.0b52	20 f4 1f	               jsr  pop
.0b55	20 b5 1f	               jsr  push
.0b58	a2 b2		isx            ldx  #<txt5
.0b5a	a0 0b		isy            ldy  #>txt5
.0b5c	20 c4 1e	               jsr  puts
.0b5f	20 f4 1f	               jsr  pull
.0b62	ad 52 09	               lda  curscl
.0b65	20 ae 21	               jsr  putahex
.0b68	a9 da		               lda  #$da
.0b6a	20 be 1e	               jsr  putch
.0b6d	ad 51 09	               lda  cursln
.0b70	20 ae 21	               jsr  putahex
.0b73	20 f4 1f	               jsr  pop
.0b76	60		               rts
>0b77	50 45 54 53	txt0           .null     "petscii :   "
>0b7b	43 49 49 20 3a 20 20 20 00
>0b84	4b 45 59 20	txt1           .null     "key code: "
>0b88	43 4f 44 45 3a 20 00
>0b8f	42 49 54 4d	txt2           .null     "bitmap..: "
>0b93	41 50 2e 2e 3a 20 00
>0b9a	4f 46 46 53	txt3           .null     "offset..:   "
>0b9e	45 54 2e 2e 3a 20 20 20 00
>0ba7	4d 41 50 41	txt4           .null     "mapaddr.: "
>0bab	44 44 52 2e 3a 20 00
>0bb2	43 55 52 53	txt5           .null     "cursval.: "
>0bb6	56 41 4c 2e 3a 20 00
>0bbd	53 54 41 43	txt6           .null     "stack......:"
>0bc1	4b 2e 2e 2e 2e 2e 2e 3a 00
.0bca			keyaction
.0bca	20 b5 1f	               jsr  push
.0bcd	20 d5 23	loop           jsr  getkey
.0bd0	c9 85		f1             cmp  #key_f1
.0bd2	d0 03		               bne  f2
.0bd4	4c 48 0c	               jmp  dof1
.0bd7	c9 89		f2             cmp  #key_f2
.0bd9	d0 03		               bne  f3
.0bdb	4c 4e 0c	               jmp  dof2
.0bde	c9 86		f3             cmp  #key_f3
.0be0	d0 03		               bne  f4
.0be2	4c 54 0c	               jmp  dof3
.0be5	c9 8a		f4             cmp  #key_f4
.0be7	d0 03		               bne  f5
.0be9	4c 5a 0c	               jmp  dof4
.0bec	c9 87		f5             cmp  #key_f5
.0bee	d0 03		               bne  f6
.0bf0	4c 60 0c	               jmp  dof5
.0bf3	c9 8b		f6             cmp  #key_f6
.0bf5	d0 03		               bne  f7
.0bf7	4c 66 0c	               jmp  dof6
.0bfa	c9 88		f7             cmp  #key_f7
.0bfc	d0 03		               bne  f8
.0bfe	4c 6c 0c	               jmp  dof7
.0c01	c9 8c		f8             cmp  #key_f8
.0c03	d0 03		               bne  ctrlx
.0c05	4c 72 0c	               jmp  dof8
.0c08	c9 18		ctrlx          cmp  #ctrl_x
.0c0a	d0 03		               bne  ishex14
.0c0c	4c 78 0c	               jmp  doquit
.0c0f	c9 14		ishex14        cmp  #$14
.0c11	d0 03		               bne  ishex12
.0c13	4c cd 0b	               jmp  loop
.0c16	c9 12		ishex12        cmp  #$12
.0c18	d0 03		               bne  reste
.0c1a	4c cd 0b	               jmp  loop
.0c1d			reste
.0c1d	20 b5 1f	               jsr  push
.0c20	a2 0d		               ldx  #13
.0c22	a0 0c		               ldy  #12
.0c24	20 de 1e	               jsr  gotoxy
.0c27	20 f4 1f	               jsr  pop
.0c2a	20 be 1e	               jsr  putch
.0c2d	48		               pha
.0c2e	ad 48 09	               lda  currentkey
.0c31	8d 49 09	               sta  previouskey
.0c34	68		               pla
.0c35	8d 48 09	               sta  currentkey
.0c38	aa		               tax
.0c39	bc b0 22	               ldy  asciitorom,x
.0c3c	8c 4a 09	               sty  bitmapoffset
.0c3f	20 83 0a	               jsr  drawkeyval
.0c42	20 34 0e	               jsr  drawbitmap
.0c45	4c cd 0b	               jmp  loop
.0c48	20 26 11	dof1           jsr  f1action  ;edit/reverse
.0c4b	4c cd 0b	               jmp  loop
.0c4e	20 09 12	dof2           jsr  f2action  ;save/flip vert
.0c51	4c cd 0b	               jmp  loop
.0c54	20 c1 12	dof3           jsr  f3action  ;load/flip horz
.0c57	4c cd 0b	               jmp  loop
.0c5a	20 8a 13	dof4           jsr  f4action  ;copy/scroll r
.0c5d	4c cd 0b	               jmp  loop
.0c60	20 53 14	dof5           jsr  f5action  ;clear/scroll l
.0c63	4c cd 0b	               jmp  loop
.0c66	20 0b 15	dof6           jsr  f6action  ;fill;/scroll up
.0c69	4c cd 0b	               jmp  loop
.0c6c	20 c3 15	dof7           jsr  f7action  ;clear;/scroll down
.0c6f	4c cd 0b	               jmp  loop
.0c72	20 80 16	dof8           jsr  f8action  ; function
.0c75	4c cd 0b	               jmp  loop
.0c78	20 f4 1f	doquit         jsr  pop
.0c7b	60		               rts
.0c7c			editor
.0c7c	20 b5 1f	               jsr  push
.0c7f	20 b5 1f	               jsr  push
.0c82	a2 9b		               ldx  #<blankmsg
.0c84	a0 18		               ldy  #>blankmsg
.0c86	20 4d 1f	               jsr  putscxy
.0c89	a2 ff		               ldx  #<exit_msg
.0c8b	a0 1a		               ldy  #>exit_msg
.0c8d	20 4d 1f	               jsr  putscxy
.0c90	20 f4 1f	               jsr  pop
.0c93	20 b5 1f	               jsr  push
.0c96	a2 9b		               ldx  #<blankmsg
.0c98	a0 18		               ldy  #>blankmsg
.0c9a	20 4d 1f	               jsr  putscxy
.0c9d	a2 e2		               ldx  #<edit_msg
.0c9f	a0 18		               ldy  #>edit_msg
.0ca1	20 4d 1f	               jsr  putscxy
.0ca4	20 f4 1f	               jsr  pop
.0ca7	a9 0c		               lda  #vgris1
.0ca9	20 45 0a	               jsr  setmenuacolor
.0cac	a9 01		               lda  #menu1col1
.0cae	8d cd 1c	               sta  f1abutton
.0cb1	20 a4 0f	               jsr  drawfkeys
.0cb4	20 f0 0d	               jsr  setcurs
.0cb7	ad 48 09	               lda  currentkey
.0cba	20 b5 1f	               jsr  push
.0cbd	a2 11		               ldx  #17
.0cbf	a0 05		               ldy  #5
.0cc1	20 de 1e	               jsr  gotoxy
.0cc4	20 f4 1f	               jsr  pop
.0cc7	20 7b 22	               jsr  atodec
.0cca	20 b5 1f	               jsr  push
.0ccd	a2 7f		isx            ldx  #<adec
.0ccf	a0 21		isy            ldy  #>adec
.0cd1	20 c4 1e	               jsr  puts
.0cd4	20 f4 1f	               jsr  pull
.0cd7	20 34 0e	               jsr  drawbitmap
.0cda	20 d5 23	ed_loop        jsr  getkey
.0cdd	c9 91		cu             cmp  #cursu
.0cdf	d0 03		               bne  cd
.0ce1	4c 6d 0d	               jmp  do_up
.0ce4	c9 11		cd             cmp  #cursd
.0ce6	d0 03		               bne  cl
.0ce8	4c 80 0d	               jmp  do_down
.0ceb	c9 9d		cl             cmp  #cursl
.0ced	d0 03		               bne  cr
.0cef	4c 93 0d	               jmp  do_left
.0cf2	c9 1d		cr             cmp  #cursr
.0cf4	d0 03		               bne  cx
.0cf6	4c a6 0d	               jmp  do_right
.0cf9	c9 18		cx             cmp  #ctrl_x
.0cfb	d0 03		               bne  sp
.0cfd	4c c2 0d	               jmp  do_ctrlx
.0d00	c9 20		sp             cmp  #$20
.0d02	d0 03		               bne  ishex14
.0d04	4c b9 0d	               jmp  do_swap
.0d07	c9 14		ishex14        cmp  #$14
.0d09	d0 03		               bne  ishex12
.0d0b	4c b9 0d	               jmp  do_swap
.0d0e	c9 12		ishex12        cmp  #$12
.0d10	d0 03		               bne  rest
.0d12	4c b9 0d	               jmp  do_swap
.0d15			rest
.0d15	20 b5 1f	               jsr  push
.0d18	a2 0d		               ldx  #13
.0d1a	a0 0c		               ldy  #12
.0d1c	20 de 1e	               jsr  gotoxy
.0d1f	20 f4 1f	               jsr  pop
.0d22	20 be 1e	               jsr  putch
.0d25	48		               pha
.0d26	ad 48 09	               lda  currentkey
.0d29	8d 49 09	               sta  previouskey
.0d2c	68		               pla
.0d2d	8d 48 09	               sta  currentkey
.0d30	aa		               tax
.0d31	bc b0 22	               ldy  asciitorom,x
.0d34	8c 4a 09	               sty  bitmapoffset
.0d37	20 83 0a	               jsr  drawkeyval
.0d3a	20 34 0e	               jsr  drawbitmap
.0d3d	20 b5 1f	               jsr  push
.0d40	a2 0d		               ldx  #13
.0d42	a0 0c		               ldy  #12
.0d44	20 de 1e	               jsr  gotoxy
.0d47	20 f4 1f	               jsr  pop
.0d4a	20 be 1e	               jsr  putch
.0d4d	20 b5 1f	               jsr  push
.0d50	a2 11		               ldx  #17
.0d52	a0 05		               ldy  #5
.0d54	20 de 1e	               jsr  gotoxy
.0d57	20 f4 1f	               jsr  pop
.0d5a	20 7b 22	               jsr  atodec
.0d5d	20 b5 1f	               jsr  push
.0d60	a2 7f		isx            ldx  #<adec
.0d62	a0 21		isy            ldy  #>adec
.0d64	20 c4 1e	               jsr  puts
.0d67	20 f4 1f	               jsr  pull
.0d6a	4c bf 0d	               jmp  totop
.0d6d	ad 51 09	do_up          lda  cursln
.0d70	c9 09		               cmp  #grid_top
.0d72	f0 4b		               beq  totop
.0d74	20 12 0e	               jsr  clrcurs
.0d77	ce 51 09	               dec  cursln
.0d7a	20 f0 0d	               jsr  setcurs
.0d7d	4c bf 0d	               jmp  totop
.0d80	ad 51 09	do_down        lda  cursln
.0d83	c9 10		               cmp  #grid_bot
.0d85	f0 38		               beq  totop
.0d87	20 12 0e	               jsr  clrcurs
.0d8a	ee 51 09	               inc  cursln
.0d8d	20 f0 0d	               jsr  setcurs
.0d90	4c bf 0d	               jmp  totop
.0d93	ad 52 09	do_left        lda  curscl
.0d96	c9 01		               cmp  #grid_left
.0d98	f0 25		               beq  totop
.0d9a	20 12 0e	               jsr  clrcurs
.0d9d	ce 52 09	               dec  curscl
.0da0	20 f0 0d	               jsr  setcurs
.0da3	4c bf 0d	               jmp  totop
.0da6	ad 52 09	do_right       lda  curscl
.0da9	c9 08		               cmp  #grid_right
.0dab	f0 12		               beq  totop
.0dad	20 12 0e	               jsr  clrcurs
.0db0	ee 52 09	               inc  curscl
.0db3	20 f0 0d	               jsr  setcurs
.0db6	4c bf 0d	               jmp  totop
.0db9	20 c9 0d	do_swap        jsr  do_eor
.0dbc	20 34 0e	               jsr  drawbitmap
.0dbf	4c da 0c	totop          jmp  ed_loop
.0dc2	20 12 0e	do_ctrlx       jsr  clrcurs
.0dc5	20 f4 1f	               jsr  pop
.0dc8	60		               rts
.0dc9			do_eor
.0dc9	20 b5 1f	               jsr  push
.0dcc	ad 4b 09	               lda  mapaddr
.0dcf	85 fd		               sta  zpage2
.0dd1	ad 4c 09	               lda  mapaddr+1
.0dd4	85 fe		               sta  zpage2+1
.0dd6	ae 51 09	               ldx  cursln     ; calcul de
.0dd9	ca		               dex            ; l'offset de
.0dda	8a		               txa            ; la
.0ddb	29 f7		               and  #$f7      ; ligne
.0ddd	a8		               tay
.0dde	ae 52 09	               ldx  curscl
.0de1	ca		               dex
.0de2	bd 3d 09	               lda  eorval,x
.0de5	51 fd		               eor  (zpage2),y
.0de7	20 83 0a	               jsr  drawkeyval
.0dea	91 fd		               sta  (zpage2),y
.0dec	20 f4 1f	               jsr  pop
.0def	60		               rts
.0df0			setcurs
.0df0	20 b5 1f	               jsr  push
.0df3	a2 01		               ldx  #grid_left
.0df5	ac 51 09	               ldy  cursln
.0df8	20 de 1e	               jsr  gotoxy
.0dfb	a9 da		               lda  #$da
.0dfd	20 be 1e	               jsr  putch
.0e00	ae 52 09	               ldx  curscl
.0e03	e8		               inx
.0e04	a0 08		               ldy  #grid_top-1
.0e06	20 de 1e	               jsr  gotoxy
.0e09	a9 da		               lda  #$da
.0e0b	20 be 1e	               jsr  putch
.0e0e	20 f4 1f	               jsr  pop
.0e11	60		               rts
.0e12			clrcurs
.0e12	20 b5 1f	               jsr  push
.0e15	a2 01		               ldx  #grid_left
.0e17	ac 51 09	               ldy  cursln
.0e1a	20 de 1e	               jsr  gotoxy
.0e1d	a9 20		               lda  #$20
.0e1f	20 be 1e	               jsr  putch
.0e22	ae 52 09	               ldx  curscl
.0e25	e8		               inx
.0e26	a0 08		               ldy  #grid_top-1
.0e28	20 de 1e	               jsr  gotoxy
.0e2b	a9 20		               lda  #$20
.0e2d	20 be 1e	               jsr  putch
.0e30	20 f4 1f	               jsr  pop
.0e33	60		               rts
.0e34			drawbitmap
.0e34	20 b5 1f	               jsr  push
.0e37	20 9b 0e	               jsr  calcmapaddr
.0e3a	ad 4b 09	               lda  mapaddr        ; on pointe sur la table des bitmaps
.0e3d	85 fb		               sta  zpage1
.0e3f	ad 4c 09	               lda  mapaddr+1
.0e42	85 fc		               sta  zpage1+1
.0e44	a0 00		drawchar       ldy  #$00
.0e46	a2 09		               ldx  #grid_top      ;on replace la ...
.0e48	8e 51 0e	               stx  isy+1          ;ligne de départ
.0e4b	20 b5 1f	nextline       jsr  push
.0e4e	a2 02		               ldx  #grid_left+1        ; la colonne
.0e50	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.0e52	20 de 1e	               jsr  gotoxy
.0e55	20 f4 1f	               jsr  pop
.0e58	b1 fb		               lda  (zpage1),y     ; on li une ligne
.0e5a	20 1f 22	               jsr  atobin
.0e5d	20 ca 0e	               jsr  abintograph
.0e60	20 b5 1f	               jsr  push
.0e63	a2 76		isx            ldx  #<abin
.0e65	a0 21		isy            ldy  #>abin
.0e67	20 c4 1e	               jsr  puts
.0e6a	20 f4 1f	               jsr  pull
.0e6d	ee 51 0e	               inc  isy+1
.0e70	c8		               iny
.0e71	c0 08		               cpy  #$08
.0e73	30 d6		               bmi  nextline
.0e75	20 7c 0e	               jsr  highlight
.0e78	20 f4 1f	               jsr  pop
.0e7b	60		               rts
.0e7c			highlight
.0e7c	20 b5 1f	               jsr  push
.0e7f	ae 49 09	               ldx  previouskey
.0e82	bd b0 22	               lda  asciitorom,x
.0e85	aa		               tax
.0e86	a9 0c		               lda  #charscolor
.0e88	9d 00 d8	               sta  colorram,x
.0e8b	ae 48 09	               ldx  currentkey
.0e8e	bd b0 22	               lda  asciitorom,x
.0e91	aa		               tax
.0e92	a9 01		               lda  #charcolor
.0e94	9d 00 d8	               sta  colorram,x
.0e97	20 f4 1f	               jsr  pop
.0e9a	60		               rts
.0e9b			calcmapaddr
.0e9b	20 b5 1f	               jsr  push
.0e9e	ad 66 0f	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0ea1	85 fb		               sta  zpage1
.0ea3	ad 67 0f	               lda  bitmapaddr+1
.0ea6	85 fc		               sta  zpage1+1
.0ea8	ae 4a 09	               ldx  bitmapoffset
.0eab	e0 00		               cpx  #$00
.0ead	f0 08		               beq  thesame         ; sommes nous déja à 0
.0eaf	a9 08		addagain       lda  #$08
.0eb1	20 f2 10	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0eb4	ca		               dex                 ; pour chaque caracteres
.0eb5	d0 f8		               bne  addagain
.0eb7	48		thesame        pha
.0eb8	a5 fb		               lda  zpage1
.0eba	8d 4b 09	               sta  mapaddr
.0ebd	a5 fc		               lda  zpage1+1
.0ebf	8d 4c 09	               sta  mapaddr+1
.0ec2	68		               pla
.0ec3	20 83 0a	               jsr  drawkeyval
.0ec6	20 f4 1f	out            jsr  pop
.0ec9	60		               rts
.0eca			abintograph
.0eca	20 b5 1f	               jsr  push
.0ecd	a9 76		               lda  #<abin
.0ecf	85 fb		               sta  zpage1
.0ed1	a9 21		               lda  #>abin+1
.0ed3	85 fc		               sta  zpage1+1
.0ed5	a0 00		               ldy  #$00
.0ed7	b1 fb		nextbit        lda  (zpage1),y
.0ed9	c9 30		               cmp  #$30
.0edb	f0 07		               beq  itszero
.0edd	a9 d1		itsone         lda  #$d1
.0edf	91 fb		               sta  (zpage1),y
.0ee1	4c e8 0e	               jmp  next
.0ee4	a9 2e		itszero        lda  #$2e
.0ee6	91 fb		               sta  (zpage1),y
.0ee8	c8		next           iny
.0ee9	c0 08		               cpy  #$08
.0eeb	30 ea		               bmi  nextbit
.0eed	20 f4 1f	               jsr  pop
.0ef0	60		               rts
.0ef1			setscreenptr
.0ef1	20 b5 1f	               jsr  push
.0ef4	a9 08		               lda  #$08      ; basic commande to disable ...
.0ef6	20 d2 ff	               jsr  chrout    ; ... character set change.
.0ef9	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.0efc	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.0efe	09 0e		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.0f00	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.0f03	20 f4 1f	               jsr  pop
.0f06	60		               rts
.0f07			copycharset
.0f07	20 b5 1f	               jsr  push
.0f0a	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0f0d	29 fe		               and  #%11111110     ;254
.0f0f	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0f12	a5 01		               lda  u6510map       ;$01
.0f14	29 fb		               and  #%11111011     ;251
.0f16	85 01		               sta  u6510map       ;$01
.0f18	20 2d 0f	               jsr  memcopy
.0f1b	a5 01		               lda  u6510map       ;$01
.0f1d	09 04		               ora  #%00000100
.0f1f	85 01		               sta  u6510map       ;$01
.0f21	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0f24	09 01		               ora  #%00000001     ;254
.0f26	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0f29	20 f4 1f	               jsr  pop
.0f2c	60		               rts
.0f2d			memcopy
.0f2d	20 b5 1f	               jsr  push
.0f30	ad 62 0f	               lda  startaddr
.0f33	85 fb		               sta  zpage1
.0f35	ad 63 0f	               lda  startaddr+1
.0f38	85 fc		               sta  zpage1+1
.0f3a	ad 66 0f	               lda  bitmapaddr
.0f3d	85 fd		               sta  zpage2
.0f3f	ad 67 0f	               lda  bitmapaddr+1
.0f42	85 fe		               sta  zpage2+1
.0f44	a0 00		               ldy  #$00
.0f46	b1 fb		onemore        lda  (zpage1),y
.0f48	91 fd		               sta  (zpage2),y
.0f4a	20 bc 20	               jsr  inczp1
.0f4d	20 d4 20	               jsr  inczp2
.0f50	a5 fc		               lda  zpage1+1
.0f52	cd 65 0f	               cmp  stopaddr+1
.0f55	d0 ef		               bne  onemore
.0f57	a5 fb		               lda  zpage1
.0f59	cd 64 0f	               cmp  stopaddr
.0f5c	d0 e8		               bne  onemore
.0f5e	20 f4 1f	               jsr  pop
.0f61	60		               rts
>>>>>>> a276fb88c97e0ac73f4f06bedda6f24428cbaf42
=14336			bitmapmem =    charsdef * 1024     ;Calcul de la position ram des caracteres.
=61440			mstopaddr =    $d000+(4*$800)
>0f73	00 d0		startaddr      .word     $d000               ; 53248
>0f75	00 f0		stopaddr       .word     mstopaddr           ; 55296
>0f77	00 38		bitmapaddr     .word     bitmapmem           ; $3000, 12288
.0f79			staticscreen
.0f79	48		               pha
.0f7a	a9 0c		               lda  #vgris1
.0f7c	8d 20 d0	               sta  $d020
.0f7f	68		               pla
.0f80	48		               pha
.0f81	a9 0b		               lda  #vgris
.0f83	8d 21 d0	               sta  $d021
.0f86	68		               pla
.0f87	20 5a 10	               jsr  drawlines
.0f8a	20 36 10	               jsr  drawallchars
.0f8d	20 a2 10	               jsr  drawgrid
.0f90	20 b5 0f	               jsr  drawfkeys
.0f93	20 c6 1f	               jsr  push
.0f96	a2 ac		               ldx  #<blankmsg
.0f98	a0 18		               ldy  #>blankmsg
.0f9a	20 5e 1f	               jsr  putscxy
.0f9d	a2 fb		               ldx  #<quit_msg
.0f9f	a0 1a		               ldy  #>quit_msg
.0fa1	20 5e 1f	               jsr  putscxy
.0fa4	20 05 20	               jsr  pop
.0fa7	20 c6 1f	               jsr  push
.0faa	a2 00		               ldx  #0
.0fac	a0 07		               ldy  #7
.0fae	20 ef 1e	               jsr  gotoxy
.0fb1	20 05 20	               jsr  pop
.0fb4	60		               rts
.0fb5			drawfkeys
.0fb5	20 c6 1f	               jsr  push
.0fb8	ad 57 09	               lda  fkeyset
.0fbb	c9 00		               cmp  #$0
.0fbd	d0 3b		               bne  secondks
.0fbf	a2 de		               ldx #<f1abutton
.0fc1	a0 1c		               ldy #>f1abutton
.0fc3	20 5e 1f	               jsr putscxy
.0fc6	a2 f8		               ldx #<f2abutton
.0fc8	a0 1c		               ldy #>f2abutton
.0fca	20 5e 1f	               jsr putscxy
.0fcd	a2 12		               ldx #<f3abutton
.0fcf	a0 1d		               ldy #>f3abutton
.0fd1	20 5e 1f	               jsr putscxy
.0fd4	a2 2c		               ldx #<f4abutton
.0fd6	a0 1d		               ldy #>f4abutton
.0fd8	20 5e 1f	               jsr putscxy
.0fdb	a2 46		               ldx #<f5abutton
.0fdd	a0 1d		               ldy #>f5abutton
.0fdf	20 5e 1f	               jsr putscxy
.0fe2	a2 60		               ldx #<f6abutton
.0fe4	a0 1d		               ldy #>f6abutton
.0fe6	20 5e 1f	               jsr putscxy
.0fe9	a2 7a		               ldx #<f7abutton
.0feb	a0 1d		               ldy #>f7abutton
.0fed	20 5e 1f	               jsr putscxy
.0ff0	a2 94		               ldx #<f8abutton
.0ff2	a0 1d		               ldy #>f8abutton
.0ff4	20 5e 1f	               jsr putscxy
.0ff7	4c 32 10	               jmp end
.0ffa			secondks
.0ffa	a2 ae		               ldx #<f1bbutton
.0ffc	a0 1d		               ldy #>f1bbutton
.0ffe	20 5e 1f	               jsr putscxy
.1001	a2 c8		               ldx #<f2bbutton
.1003	a0 1d		               ldy #>f2bbutton
.1005	20 5e 1f	               jsr putscxy
.1008	a2 e2		               ldx #<f3bbutton
.100a	a0 1d		               ldy #>f3bbutton
.100c	20 5e 1f	               jsr putscxy
.100f	a2 fc		               ldx #<f4bbutton
.1011	a0 1d		               ldy #>f4bbutton
.1013	20 5e 1f	               jsr putscxy
.1016	a2 16		               ldx #<f5bbutton
.1018	a0 1e		               ldy #>f5bbutton
.101a	20 5e 1f	               jsr putscxy
.101d	a2 30		               ldx #<f6bbutton
.101f	a0 1e		               ldy #>f6bbutton
.1021	20 5e 1f	               jsr putscxy
.1024	a2 4a		               ldx #<f7bbutton
.1026	a0 1e		               ldy #>f7bbutton
.1028	20 5e 1f	               jsr putscxy
.102b	a2 64		               ldx #<f8bbutton
.102d	a0 1e		               ldy #>f8bbutton
.102f	20 5e 1f	               jsr putscxy
.1032	20 05 20	end            jsr  pop
.1035	60		               rts
.1036			drawallchars
.1036	20 c6 1f	               jsr push
.1039	20 c6 1f	               jsr  push
.103c	a2 00		               ldx  #0
.103e	a0 00		               ldy  #0
.1040	20 ef 1e	               jsr  gotoxy
.1043	20 05 20	               jsr  pop
.1046	a2 00		               ldx  #$00
.1048	8a		nextc          txa
.1049	9d 00 04	               sta  scrnnewram,x
.104c	a9 0c		               lda  #charscolor
.104e	9d 00 d8	               sta  colorram,x
.1051	e8		               inx
.1052	e0 80		               cpx  #$80
.1054	d0 f2		               bne  nextc
.1056	20 05 20	               jsr  pop
.1059	60		               rts
.105a			drawlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.105a	20 c6 1f	               jsr  push
.105d	a2 28		               ldx  #40
.105f	a9 40		               lda  #64
.1061	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.1064	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.1067	ca		               dex
.1068	e0 10		hline          cpx  #vlinepos
.106a	10 03		               bpl  notyet
.106c	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.106f	e0 00		notyet         cpx  #$00
.1071	d0 ee		               bne  nextl
.1073	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.1075	85 fb		               sta  zpage1
.1077	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.1079	85 fc		               sta  zpage1+1
.107b	a0 00		               ldy  #0
.107d	a9 72		               lda  #114
.107f	91 fb		               sta  (zpage1),y
.1081	20 11 11	               jsr  zp1add40
.1084	a2 12		               ldx  #24-hline2
.1086	a9 5d		               lda  #93
.1088	91 fb		another93      sta  (zpage1),y
.108a	20 11 11	               jsr  zp1add40
.108d	ca		               dex
.108e	d0 f8		               bne  another93
.1090	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.1092	85 fb		               sta  zpage1
.1094	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.1096	85 fc		               sta  zpage1+1
.1098	a0 00		               ldy  #0
.109a	a9 73		               lda  #115
.109c	91 fb		               sta  (zpage1),y
.109e	20 05 20	               jsr  pop
.10a1	60		               rts
.10a2			drawgrid
.10a2	20 c6 1f	               jsr  push
.10a5	20 7e 1e	               jsr  screendis
.10a8	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.10aa	85 fb		               sta  zpage1
.10ac	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.10ae	85 fc		               sta  zpage1+1
.10b0	a2 08		               ldx  #8
.10b2	a9 65		nextbox        lda  #101
.10b4	a0 09		               ldy  #9
.10b6	91 fb		               sta  (zpage1),y
.10b8	88		               dey
.10b9	a9 2e		               lda  #$2e
.10bb	91 fb		nextcol        sta  (zpage1),y
.10bd	88		               dey
.10be	d0 fb		               bne  nextcol
.10c0	20 11 11	               jsr  zp1add40
.10c3	ca		               dex
.10c4	d0 ec		               bne  nextbox
.10c6	a0 08		               ldy  #8
.10c8	a9 77		               lda  #119
.10ca	91 fb		nextlin        sta  (zpage1),y
.10cc	88		               dey
.10cd	d0 fb		               bne  nextlin
.10cf	a9 3e		               lda  #$3e
.10d1	8d eb 05	               sta  scrnnewram+(40*(12))+11
.10d4	a9 70		               lda  #$70                     ;+
.10d6	8d c4 05	               sta  scrnnewram+(40*(11))+12
.10d9	a9 43		               lda  #$43                     ;-
.10db	8d c5 05	               sta  scrnnewram+(40*(11))+13
.10de	a9 6e		               lda  #$6e                     ;+
.10e0	8d c6 05	               sta  scrnnewram+(40*(11))+14
.10e3	a9 5d		               lda  #$5d                     ;|
.10e5	8d ec 05	               sta  scrnnewram+(40*(12))+12
.10e8	a9 5d		               lda  #$5d                     ;|
.10ea	8d ee 05	               sta  scrnnewram+(40*(12))+14
.10ed	a9 6d		               lda  #$6d                     ;+
.10ef	8d 14 06	               sta  scrnnewram+(40*(13))+12
.10f2	a9 43		               lda  #$43                     ;-
.10f4	8d 15 06	               sta  scrnnewram+(40*(13))+13
.10f7	a9 7d		               lda  #$7d                     ;+
.10f9	8d 16 06	               sta  scrnnewram+(40*(13))+14
.10fc	20 8b 1e	               jsr screenena
.10ff	20 05 20	               jsr  pop
.1102	60		               rts
.1103			zp1addnum
.1103	08		               php
.1104	48		               pha
.1105	18		               clc
.1106	65 fb		               adc  zpage1
.1108	90 02		               bcc  nocarry
.110a	e6 fc		               inc  zpage1+1
.110c	85 fb		nocarry        sta  zpage1
.110e	68		               pla
.110f	28		               plp
.1110	60		               rts
.1111			zp1add40
.1111	08		               php
.1112	48		               pha
.1113	18		               clc
.1114	a5 fb		               lda  zpage1
.1116	69 28		               adc  #40
.1118	90 02		               bcc  nocarry
.111a	e6 fc		               inc  zpage1+1
.111c	85 fb		nocarry        sta  zpage1
.111e	68		               pla
.111f	28		               plp
.1120	60		               rts
.1121			delay
.1121	20 c6 1f	               jsr  push
.1124	a9 00		               lda  #$0
.1126	aa		               tax
.1127	a8		               tay
.1128	ca		xagain         dex
.1129	ca		               dex
.112a	88		yagain         dey
.112b	c0 00		               cpy  #$00
.112d	d0 fb		               bne  yagain
.112f	e0 00		               cpx  #$00
.1131	d0 f5		               bne  xagain
.1133	20 05 20	               jsr  pop
.1136	60		               rts
.1137			f1action
.1137	48		               pha
.1138	a9 ff		               lda  #$ff
.113a	8d 56 09	               sta  editmode
.113d	ad 57 09	               lda  fkeyset
.1140	d0 78		               bne  menub
.1142	20 c6 1f	               jsr  push
.1145	a2 ac		               ldx  #<blankmsg
.1147	a0 18		               ldy  #>blankmsg
.1149	20 5e 1f	               jsr  putscxy
.114c	a2 f3		               ldx  #<f1a_msg
.114e	a0 18		               ldy  #>f1a_msg
.1150	20 5e 1f	               jsr  putscxy
.1153	20 05 20	               jsr  pop
.1156	08		               php
.1157	48		               pha
.1158	8a		               txa
.1159	48		               pha
.115a	ad de 1c	               lda  f1abutton
.115d	48		               pha
.115e	a9 92		               lda  #146
.1160	8d ed 1c	               sta  f1abutton+15
.1163	a9 01		               lda  #flashcol
.1165	8d de 1c	               sta  f1abutton
.1168	a2 de		               ldx  #<f1abutton
.116a	a0 1c		               ldy  #>f1abutton
.116c	20 5e 1f	               jsr  putscxy
.116f	20 21 11	               jsr  delay
.1172	a9 12		               lda  #18
.1174	8d ed 1c	               sta  f1abutton+15
.1177	68		               pla
.1178	8d de 1c	               sta  f1abutton
.117b	a2 de		               ldx  #<f1abutton
.117d	a0 1c		               ldy  #>f1abutton
.117f	20 5e 1f	               jsr  putscxy
.1182	68		               pla
.1183	aa		               tax
.1184	68		               pla
.1185	28		               plp
.1186	20 8d 0c	               jsr  editor
.1189	20 c6 1f	               jsr  push
.118c	a2 ac		               ldx  #<blankmsg
.118e	a0 18		               ldy  #>blankmsg
.1190	20 5e 1f	               jsr  putscxy
.1193	a2 fb		               ldx  #<quit_msg
.1195	a0 1a		               ldy  #>quit_msg
.1197	20 5e 1f	               jsr  putscxy
.119a	20 05 20	               jsr  pop
.119d	20 c6 1f	               jsr  push
.11a0	a2 ac		               ldx  #<blankmsg
.11a2	a0 18		               ldy  #>blankmsg
.11a4	20 5e 1f	               jsr  putscxy
.11a7	a2 67		               ldx  #<menua_msg
.11a9	a0 1a		               ldy  #>menua_msg
.11ab	20 5e 1f	               jsr  putscxy
.11ae	20 05 20	               jsr  pop
.11b1	20 10 0a	               jsr  resetmenuacolor
.11b4	20 b5 0f	               jsr  drawfkeys
.11b7	4c 04 12	               jmp  out
.11ba			menub
.11ba	20 c6 1f	               jsr  push
.11bd	a2 ac		               ldx  #<blankmsg
.11bf	a0 18		               ldy  #>blankmsg
.11c1	20 5e 1f	               jsr  putscxy
.11c4	a2 cd		               ldx  #<f1b_msg
.11c6	a0 19		               ldy  #>f1b_msg
.11c8	20 5e 1f	               jsr  putscxy
.11cb	20 05 20	               jsr  pop
.11ce	08		               php
.11cf	48		               pha
.11d0	8a		               txa
.11d1	48		               pha
.11d2	ad ae 1d	               lda  f1bbutton
.11d5	48		               pha
.11d6	a9 92		               lda  #146
.11d8	8d bd 1d	               sta  f1bbutton+15
.11db	a9 01		               lda  #flashcol
.11dd	8d ae 1d	               sta  f1bbutton
.11e0	a2 ae		               ldx  #<f1bbutton
.11e2	a0 1d		               ldy  #>f1bbutton
.11e4	20 5e 1f	               jsr  putscxy
.11e7	20 21 11	               jsr  delay
.11ea	a9 12		               lda  #18
.11ec	8d bd 1d	               sta  f1bbutton+15
.11ef	68		               pla
.11f0	8d ae 1d	               sta  f1bbutton
.11f3	a2 ae		               ldx  #<f1bbutton
.11f5	a0 1d		               ldy  #>f1bbutton
.11f7	20 5e 1f	               jsr  putscxy
.11fa	68		               pla
.11fb	aa		               tax
.11fc	68		               pla
.11fd	28		               plp
.11fe	20 79 18	               jsr  flipvert
.1201	20 45 0e	               jsr  drawbitmap
.1204	68		out            pla
.1205	20 c6 1f	               jsr  push
.1208	a2 ac		               ldx  #<blankmsg
.120a	a0 18		               ldy  #>blankmsg
.120c	20 5e 1f	               jsr  putscxy
.120f	a2 d8		               ldx  #<prompt_msg
.1211	a0 18		               ldy  #>prompt_msg
.1213	20 5e 1f	               jsr  putscxy
.1216	20 05 20	               jsr  pop
.1219	60		               rts
.121a			f2action
.121a	48		               pha
.121b	a9 00		               lda  #$0
.121d	8d 56 09	               sta  editmode
.1220	ad 57 09	               lda  fkeyset
.1223	d0 4d		               bne  menub
.1225	20 c6 1f	               jsr  push
.1228	a2 ac		               ldx  #<blankmsg
.122a	a0 18		               ldy  #>blankmsg
.122c	20 5e 1f	               jsr  putscxy
.122f	a2 0e		               ldx  #<f2a_msg
.1231	a0 19		               ldy  #>f2a_msg
.1233	20 5e 1f	               jsr  putscxy
.1236	20 05 20	               jsr  pop
.1239	08		               php
.123a	48		               pha
.123b	8a		               txa
.123c	48		               pha
.123d	ad f8 1c	               lda  f2abutton
.1240	48		               pha
.1241	a9 92		               lda  #146
.1243	8d 07 1d	               sta  f2abutton+15
.1246	a9 01		               lda  #flashcol
.1248	8d f8 1c	               sta  f2abutton
.124b	a2 f8		               ldx  #<f2abutton
.124d	a0 1c		               ldy  #>f2abutton
.124f	20 5e 1f	               jsr  putscxy
.1252	20 21 11	               jsr  delay
.1255	a9 12		               lda  #18
.1257	8d 07 1d	               sta  f2abutton+15
.125a	68		               pla
.125b	8d f8 1c	               sta  f2abutton
.125e	a2 f8		               ldx  #<f2abutton
.1260	a0 1c		               ldy  #>f2abutton
.1262	20 5e 1f	               jsr  putscxy
.1265	68		               pla
.1266	aa		               tax
.1267	68		               pla
.1268	28		               plp
.1269	20 57 08	               jsr  copychar
.126c	20 45 0e	               jsr  drawbitmap
.126f	4c bc 12	               jmp  out
.1272			menub
.1272	20 c6 1f	               jsr  push
.1275	a2 ac		               ldx  #<blankmsg
.1277	a0 18		               ldy  #>blankmsg
.1279	20 5e 1f	               jsr  putscxy
.127c	a2 e6		               ldx  #<f2b_msg
.127e	a0 19		               ldy  #>f2b_msg
.1280	20 5e 1f	               jsr  putscxy
.1283	20 05 20	               jsr  pop
.1286	08		               php
.1287	48		               pha
.1288	8a		               txa
.1289	48		               pha
.128a	ad c8 1d	               lda  f2bbutton
.128d	48		               pha
.128e	a9 92		               lda  #146
.1290	8d d7 1d	               sta  f2bbutton+15
.1293	a9 01		               lda  #flashcol
.1295	8d c8 1d	               sta  f2bbutton
.1298	a2 c8		               ldx  #<f2bbutton
.129a	a0 1d		               ldy  #>f2bbutton
.129c	20 5e 1f	               jsr  putscxy
.129f	20 21 11	               jsr  delay
.12a2	a9 12		               lda  #18
.12a4	8d d7 1d	               sta  f2bbutton+15
.12a7	68		               pla
.12a8	8d c8 1d	               sta  f2bbutton
.12ab	a2 c8		               ldx  #<f2bbutton
.12ad	a0 1d		               ldy  #>f2bbutton
.12af	20 5e 1f	               jsr  putscxy
.12b2	68		               pla
.12b3	aa		               tax
.12b4	68		               pla
.12b5	28		               plp
.12b6	20 4c 18	               jsr  fliphorz
.12b9	20 45 0e	               jsr  drawbitmap
.12bc	68		out            pla
.12bd	20 c6 1f	               jsr  push
.12c0	a2 ac		               ldx  #<blankmsg
.12c2	a0 18		               ldy  #>blankmsg
.12c4	20 5e 1f	               jsr  putscxy
.12c7	a2 d8		               ldx  #<prompt_msg
.12c9	a0 18		               ldy  #>prompt_msg
.12cb	20 5e 1f	               jsr  putscxy
.12ce	20 05 20	               jsr  pop
.12d1	60		               rts
.12d2			f3action
.12d2	48		               pha
.12d3	a9 00		               lda  #$0
.12d5	8d 56 09	               sta  editmode
.12d8	ad 57 09	               lda  fkeyset
.12db	d0 5e		               bne  menub
.12dd	08		               php
.12de	48		               pha
.12df	8a		               txa
.12e0	48		               pha
.12e1	ad 12 1d	               lda  f3abutton
.12e4	48		               pha
.12e5	a9 92		               lda  #146
.12e7	8d 21 1d	               sta  f3abutton+15
.12ea	a9 01		               lda  #flashcol
.12ec	8d 12 1d	               sta  f3abutton
.12ef	a2 12		               ldx  #<f3abutton
.12f1	a0 1d		               ldy  #>f3abutton
.12f3	20 5e 1f	               jsr  putscxy
.12f6	20 21 11	               jsr  delay
.12f9	a9 12		               lda  #18
.12fb	8d 21 1d	               sta  f3abutton+15
.12fe	68		               pla
.12ff	8d 12 1d	               sta  f3abutton
.1302	a2 12		               ldx  #<f3abutton
.1304	a0 1d		               ldy  #>f3abutton
.1306	20 5e 1f	               jsr  putscxy
.1309	68		               pla
.130a	aa		               tax
.130b	68		               pla
.130c	28		               plp
.130d	20 c6 1f	               jsr  push
.1310	a2 ac		               ldx  #<blankmsg
.1312	a0 18		               ldy  #>blankmsg
.1314	20 5e 1f	               jsr  putscxy
.1317	a2 2b		               ldx  #<f3a_msg
.1319	a0 19		               ldy  #>f3a_msg
.131b	20 5e 1f	               jsr  putscxy
.131e	20 05 20	               jsr  pop
.1321	20 e6 23	getagain       jsr  getkey
.1324	c9 43		               cmp  #$43
.1326	f0 07		               beq  devok
.1328	c9 44		               cmp  #$44
.132a	f0 03		               beq  devok
.132c	4c 21 13	               jmp  getagain
.132f	8d 29 09	devok          sta  device
.1332	20 cf 1e	               jsr  putch
.1335	20 ca 08	               jsr  getfname
.1338	4c 85 13	               jmp  out
.133b			menub
.133b	20 c6 1f	               jsr  push
.133e	a2 ac		               ldx  #<blankmsg
.1340	a0 18		               ldy  #>blankmsg
.1342	20 5e 1f	               jsr  putscxy
.1345	a2 01		               ldx  #<f3b_msg
.1347	a0 1a		               ldy  #>f3b_msg
.1349	20 5e 1f	               jsr  putscxy
.134c	20 05 20	               jsr  pop
.134f	08		               php
.1350	48		               pha
.1351	8a		               txa
.1352	48		               pha
.1353	ad e2 1d	               lda  f3bbutton
.1356	48		               pha
.1357	a9 92		               lda  #146
.1359	8d f1 1d	               sta  f3bbutton+15
.135c	a9 01		               lda  #flashcol
.135e	8d e2 1d	               sta  f3bbutton
.1361	a2 e2		               ldx  #<f3bbutton
.1363	a0 1d		               ldy  #>f3bbutton
.1365	20 5e 1f	               jsr  putscxy
.1368	20 21 11	               jsr  delay
.136b	a9 12		               lda  #18
.136d	8d f1 1d	               sta  f3bbutton+15
.1370	68		               pla
.1371	8d e2 1d	               sta  f3bbutton
.1374	a2 e2		               ldx  #<f3bbutton
.1376	a0 1d		               ldy  #>f3bbutton
.1378	20 5e 1f	               jsr  putscxy
.137b	68		               pla
.137c	aa		               tax
.137d	68		               pla
.137e	28		               plp
.137f	20 d7 17	               jsr  scrollright
.1382	20 45 0e	               jsr  drawbitmap
.1385	68		out            pla
.1386	20 c6 1f	               jsr  push
.1389	a2 ac		               ldx  #<blankmsg
.138b	a0 18		               ldy  #>blankmsg
.138d	20 5e 1f	               jsr  putscxy
.1390	a2 d8		               ldx  #<prompt_msg
.1392	a0 18		               ldy  #>prompt_msg
.1394	20 5e 1f	               jsr  putscxy
.1397	20 05 20	               jsr  pop
.139a	60		               rts
.139b			f4action
.139b	48		               pha
.139c	a9 00		               lda  #$0
.139e	8d 56 09	               sta  editmode
.13a1	ad 57 09	               lda  fkeyset
.13a4	d0 5e		               bne  menub
.13a6	08		               php
.13a7	48		               pha
.13a8	8a		               txa
.13a9	48		               pha
.13aa	ad 2c 1d	               lda  f4abutton
.13ad	48		               pha
.13ae	a9 92		               lda  #146
.13b0	8d 3b 1d	               sta  f4abutton+15
.13b3	a9 01		               lda  #flashcol
.13b5	8d 2c 1d	               sta  f4abutton
.13b8	a2 2c		               ldx  #<f4abutton
.13ba	a0 1d		               ldy  #>f4abutton
.13bc	20 5e 1f	               jsr  putscxy
.13bf	20 21 11	               jsr  delay
.13c2	a9 12		               lda  #18
.13c4	8d 3b 1d	               sta  f4abutton+15
.13c7	68		               pla
.13c8	8d 2c 1d	               sta  f4abutton
.13cb	a2 2c		               ldx  #<f4abutton
.13cd	a0 1d		               ldy  #>f4abutton
.13cf	20 5e 1f	               jsr  putscxy
.13d2	68		               pla
.13d3	aa		               tax
.13d4	68		               pla
.13d5	28		               plp
.13d6	20 c6 1f	               jsr  push
.13d9	a2 ac		               ldx  #<blankmsg
.13db	a0 18		               ldy  #>blankmsg
.13dd	20 5e 1f	               jsr  putscxy
.13e0	a2 52		               ldx  #<f4a_msg
.13e2	a0 19		               ldy  #>f4a_msg
.13e4	20 5e 1f	               jsr  putscxy
.13e7	20 05 20	               jsr  pop
.13ea	20 e6 23	getagain       jsr  getkey
.13ed	c9 43		               cmp  #$43
.13ef	f0 07		               beq  devok
.13f1	c9 44		               cmp  #$44
.13f3	f0 03		               beq  devok
.13f5	4c ea 13	               jmp  getagain
.13f8	8d 29 09	devok          sta  device
.13fb	20 cf 1e	               jsr  putch
.13fe	20 ca 08	               jsr  getfname
.1401	4c 4e 14	               jmp  out
.1404			menub
.1404	20 c6 1f	               jsr  push
.1407	a2 ac		               ldx  #<blankmsg
.1409	a0 18		               ldy  #>blankmsg
.140b	20 5e 1f	               jsr  putscxy
.140e	a2 16		               ldx  #<f4b_msg
.1410	a0 1a		               ldy  #>f4b_msg
.1412	20 5e 1f	               jsr  putscxy
.1415	20 05 20	               jsr  pop
.1418	08		               php
.1419	48		               pha
.141a	8a		               txa
.141b	48		               pha
.141c	ad fc 1d	               lda  f4bbutton
.141f	48		               pha
.1420	a9 92		               lda  #146
.1422	8d 0b 1e	               sta  f4bbutton+15
.1425	a9 01		               lda  #flashcol
.1427	8d fc 1d	               sta  f4bbutton
.142a	a2 fc		               ldx  #<f4bbutton
.142c	a0 1d		               ldy  #>f4bbutton
.142e	20 5e 1f	               jsr  putscxy
.1431	20 21 11	               jsr  delay
.1434	a9 12		               lda  #18
.1436	8d 0b 1e	               sta  f4bbutton+15
.1439	68		               pla
.143a	8d fc 1d	               sta  f4bbutton
.143d	a2 fc		               ldx  #<f4bbutton
.143f	a0 1d		               ldy  #>f4bbutton
.1441	20 5e 1f	               jsr  putscxy
.1444	68		               pla
.1445	aa		               tax
.1446	68		               pla
.1447	28		               plp
.1448	20 fc 17	               jsr  scrollleft
.144b	20 45 0e	               jsr  drawbitmap
.144e	68		out            pla
.144f	20 c6 1f	               jsr  push
.1452	a2 ac		               ldx  #<blankmsg
.1454	a0 18		               ldy  #>blankmsg
.1456	20 5e 1f	               jsr  putscxy
.1459	a2 d8		               ldx  #<prompt_msg
.145b	a0 18		               ldy  #>prompt_msg
.145d	20 5e 1f	               jsr  putscxy
.1460	20 05 20	               jsr  pop
.1463	60		               rts
.1464			f5action
.1464	48		               pha
.1465	a9 00		               lda  #$0
.1467	8d 56 09	               sta  editmode
.146a	ad 57 09	               lda  fkeyset
.146d	d0 4d		               bne  menub
.146f	20 c6 1f	               jsr  push
.1472	a2 ac		               ldx  #<blankmsg
.1474	a0 18		               ldy  #>blankmsg
.1476	20 5e 1f	               jsr  putscxy
.1479	a2 7b		               ldx  #<f5a_msg
.147b	a0 19		               ldy  #>f5a_msg
.147d	20 5e 1f	               jsr  putscxy
.1480	20 05 20	               jsr  pop
.1483	08		               php
.1484	48		               pha
.1485	8a		               txa
.1486	48		               pha
.1487	ad 46 1d	               lda  f5abutton
.148a	48		               pha
.148b	a9 92		               lda  #146
.148d	8d 55 1d	               sta  f5abutton+15
.1490	a9 01		               lda  #flashcol
.1492	8d 46 1d	               sta  f5abutton
.1495	a2 46		               ldx  #<f5abutton
.1497	a0 1d		               ldy  #>f5abutton
.1499	20 5e 1f	               jsr  putscxy
.149c	20 21 11	               jsr  delay
.149f	a9 12		               lda  #18
.14a1	8d 55 1d	               sta  f5abutton+15
.14a4	68		               pla
.14a5	8d 46 1d	               sta  f5abutton
.14a8	a2 46		               ldx  #<f5abutton
.14aa	a0 1d		               ldy  #>f5abutton
.14ac	20 5e 1f	               jsr  putscxy
.14af	68		               pla
.14b0	aa		               tax
.14b1	68		               pla
.14b2	28		               plp
.14b3	20 2a 18	               jsr  clearchar
.14b6	20 45 0e	               jsr  drawbitmap
.14b9	4c 06 15	               jmp  out
.14bc			menub
.14bc	20 c6 1f	               jsr  push
.14bf	a2 ac		               ldx  #<blankmsg
.14c1	a0 18		               ldy  #>blankmsg
.14c3	20 5e 1f	               jsr  putscxy
.14c6	a2 2a		               ldx  #<f5b_msg
.14c8	a0 1a		               ldy  #>f5b_msg
.14ca	20 5e 1f	               jsr  putscxy
.14cd	20 05 20	               jsr  pop
.14d0	08		               php
.14d1	48		               pha
.14d2	8a		               txa
.14d3	48		               pha
.14d4	ad 16 1e	               lda  f5bbutton
.14d7	48		               pha
.14d8	a9 92		               lda  #146
.14da	8d 25 1e	               sta  f5bbutton+15
.14dd	a9 01		               lda  #flashcol
.14df	8d 16 1e	               sta  f5bbutton
.14e2	a2 16		               ldx  #<f5bbutton
.14e4	a0 1e		               ldy  #>f5bbutton
.14e6	20 5e 1f	               jsr  putscxy
.14e9	20 21 11	               jsr  delay
.14ec	a9 12		               lda  #18
.14ee	8d 25 1e	               sta  f5bbutton+15
.14f1	68		               pla
.14f2	8d 16 1e	               sta  f5bbutton
.14f5	a2 16		               ldx  #<f5bbutton
.14f7	a0 1e		               ldy  #>f5bbutton
.14f9	20 5e 1f	               jsr  putscxy
.14fc	68		               pla
.14fd	aa		               tax
.14fe	68		               pla
.14ff	28		               plp
.1500	20 65 17	               jsr  scrollup
.1503	20 45 0e	               jsr  drawbitmap
.1506	68		out            pla
.1507	20 c6 1f	               jsr  push
.150a	a2 ac		               ldx  #<blankmsg
.150c	a0 18		               ldy  #>blankmsg
.150e	20 5e 1f	               jsr  putscxy
.1511	a2 d8		               ldx  #<prompt_msg
.1513	a0 18		               ldy  #>prompt_msg
.1515	20 5e 1f	               jsr  putscxy
.1518	20 05 20	               jsr  pop
.151b	60		               rts
.151c			f6action
.151c	48		               pha
.151d	a9 00		               lda  #$0
.151f	8d 56 09	               sta  editmode
.1522	ad 57 09	               lda  fkeyset
.1525	d0 4d		               bne  menub
.1527	20 c6 1f	               jsr  push
.152a	a2 ac		               ldx  #<blankmsg
.152c	a0 18		               ldy  #>blankmsg
.152e	20 5e 1f	               jsr  putscxy
.1531	a2 95		               ldx  #<f6a_msg
.1533	a0 19		               ldy  #>f6a_msg
.1535	20 5e 1f	               jsr  putscxy
.1538	20 05 20	               jsr  pop
.153b	08		               php
.153c	48		               pha
.153d	8a		               txa
.153e	48		               pha
.153f	ad 60 1d	               lda  f6abutton
.1542	48		               pha
.1543	a9 92		               lda  #146
.1545	8d 6f 1d	               sta  f6abutton+15
.1548	a9 01		               lda  #flashcol
.154a	8d 60 1d	               sta  f6abutton
.154d	a2 60		               ldx  #<f6abutton
.154f	a0 1d		               ldy  #>f6abutton
.1551	20 5e 1f	               jsr  putscxy
.1554	20 21 11	               jsr  delay
.1557	a9 12		               lda  #18
.1559	8d 6f 1d	               sta  f6abutton+15
.155c	68		               pla
.155d	8d 60 1d	               sta  f6abutton
.1560	a2 60		               ldx  #<f6abutton
.1562	a0 1d		               ldy  #>f6abutton
.1564	20 5e 1f	               jsr  putscxy
.1567	68		               pla
.1568	aa		               tax
.1569	68		               pla
.156a	28		               plp
.156b	20 1e 18	               jsr  fillchar
.156e	20 45 0e	               jsr  drawbitmap
.1571	4c be 15	               jmp  out
.1574			menub
.1574	20 c6 1f	               jsr  push
.1577	a2 ac		               ldx  #<blankmsg
.1579	a0 18		               ldy  #>blankmsg
.157b	20 5e 1f	               jsr  putscxy
.157e	a2 3c		               ldx  #<f6b_msg
.1580	a0 1a		               ldy  #>f6b_msg
.1582	20 5e 1f	               jsr  putscxy
.1585	20 05 20	               jsr  pop
.1588	08		               php
.1589	48		               pha
.158a	8a		               txa
.158b	48		               pha
.158c	ad 30 1e	               lda  f6bbutton
.158f	48		               pha
.1590	a9 92		               lda  #146
.1592	8d 3f 1e	               sta  f6bbutton+15
.1595	a9 01		               lda  #flashcol
.1597	8d 30 1e	               sta  f6bbutton
.159a	a2 30		               ldx  #<f6bbutton
.159c	a0 1e		               ldy  #>f6bbutton
.159e	20 5e 1f	               jsr  putscxy
.15a1	20 21 11	               jsr  delay
.15a4	a9 12		               lda  #18
.15a6	8d 3f 1e	               sta  f6bbutton+15
.15a9	68		               pla
.15aa	8d 30 1e	               sta  f6bbutton
.15ad	a2 30		               ldx  #<f6bbutton
.15af	a0 1e		               ldy  #>f6bbutton
.15b1	20 5e 1f	               jsr  putscxy
.15b4	68		               pla
.15b5	aa		               tax
.15b6	68		               pla
.15b7	28		               plp
.15b8	20 9d 17	               jsr  scrolldown
.15bb	20 45 0e	               jsr  drawbitmap
.15be	68		out            pla
.15bf	20 c6 1f	               jsr  push
.15c2	a2 ac		               ldx  #<blankmsg
.15c4	a0 18		               ldy  #>blankmsg
.15c6	20 5e 1f	               jsr  putscxy
.15c9	a2 d8		               ldx  #<prompt_msg
.15cb	a0 18		               ldy  #>prompt_msg
.15cd	20 5e 1f	               jsr  putscxy
.15d0	20 05 20	               jsr  pop
.15d3	60		               rts
.15d4			f7action
.15d4	48		               pha
.15d5	a9 00		               lda  #$0
.15d7	8d 56 09	               sta  editmode
.15da	ad 57 09	               lda  fkeyset
.15dd	d0 4d		               bne  menub
.15df	20 c6 1f	               jsr  push
.15e2	a2 ac		               ldx  #<blankmsg
.15e4	a0 18		               ldy  #>blankmsg
.15e6	20 5e 1f	               jsr  putscxy
.15e9	a2 af		               ldx  #<f7a_msg
.15eb	a0 19		               ldy  #>f7a_msg
.15ed	20 5e 1f	               jsr  putscxy
.15f0	20 05 20	               jsr  pop
.15f3	08		               php
.15f4	48		               pha
.15f5	8a		               txa
.15f6	48		               pha
.15f7	ad 7a 1d	               lda  f7abutton
.15fa	48		               pha
.15fb	a9 92		               lda  #146
.15fd	8d 89 1d	               sta  f7abutton+15
.1600	a9 01		               lda  #flashcol
.1602	8d 7a 1d	               sta  f7abutton
.1605	a2 7a		               ldx  #<f7abutton
.1607	a0 1d		               ldy  #>f7abutton
.1609	20 5e 1f	               jsr  putscxy
.160c	20 21 11	               jsr  delay
.160f	a9 12		               lda  #18
.1611	8d 89 1d	               sta  f7abutton+15
.1614	68		               pla
.1615	8d 7a 1d	               sta  f7abutton
.1618	a2 7a		               ldx  #<f7abutton
.161a	a0 1d		               ldy  #>f7abutton
.161c	20 5e 1f	               jsr  putscxy
.161f	68		               pla
.1620	aa		               tax
.1621	68		               pla
.1622	28		               plp
.1623	20 18 0f	               jsr  copycharset
.1626	20 45 0e	               jsr  drawbitmap
.1629	4c 7b 16	               jmp  out
.162c	a9 00		menub          lda  #$0
.162e	8d 56 09	               sta  editmode
.1631	20 c6 1f	               jsr  push
.1634	a2 ac		               ldx  #<blankmsg
.1636	a0 18		               ldy  #>blankmsg
.1638	20 5e 1f	               jsr  putscxy
.163b	a2 50		               ldx  #<f7b_msg
.163d	a0 1a		               ldy  #>f7b_msg
.163f	20 5e 1f	               jsr  putscxy
.1642	20 05 20	               jsr  pop
.1645	08		               php
.1646	48		               pha
.1647	8a		               txa
.1648	48		               pha
.1649	ad 4a 1e	               lda  f7bbutton
.164c	48		               pha
.164d	a9 92		               lda  #146
.164f	8d 59 1e	               sta  f7bbutton+15
.1652	a9 01		               lda  #flashcol
.1654	8d 4a 1e	               sta  f7bbutton
.1657	a2 4a		               ldx  #<f7bbutton
.1659	a0 1e		               ldy  #>f7bbutton
.165b	20 5e 1f	               jsr  putscxy
.165e	20 21 11	               jsr  delay
.1661	a9 12		               lda  #18
.1663	8d 59 1e	               sta  f7bbutton+15
.1666	68		               pla
.1667	8d 4a 1e	               sta  f7bbutton
.166a	a2 4a		               ldx  #<f7bbutton
.166c	a0 1e		               ldy  #>f7bbutton
.166e	20 5e 1f	               jsr  putscxy
.1671	68		               pla
.1672	aa		               tax
.1673	68		               pla
.1674	28		               plp
.1675	20 45 17	               jsr  reverse
.1678	20 45 0e	               jsr  drawbitmap
.167b	68		out            pla
.167c	20 c6 1f	               jsr  push
.167f	a2 ac		               ldx  #<blankmsg
.1681	a0 18		               ldy  #>blankmsg
.1683	20 5e 1f	               jsr  putscxy
.1686	a2 d8		               ldx  #<prompt_msg
.1688	a0 18		               ldy  #>prompt_msg
.168a	20 5e 1f	               jsr  putscxy
.168d	20 05 20	               jsr  pop
.1690	60		               rts
.1691			f8action
.1691	48		               pha
.1692	a9 00		               lda  #$0
.1694	8d 56 09	               sta  editmode
.1697	ad 57 09	               lda  fkeyset
.169a	d0 47		               bne  menub
.169c	20 c6 1f	               jsr  push
.169f	a2 ac		               ldx  #<blankmsg
.16a1	a0 18		               ldy  #>blankmsg
.16a3	20 5e 1f	               jsr  putscxy
.16a6	a2 82		               ldx  #<menub_msg
.16a8	a0 1a		               ldy  #>menub_msg
.16aa	20 5e 1f	               jsr  putscxy
.16ad	20 05 20	               jsr  pop
.16b0	08		               php
.16b1	48		               pha
.16b2	8a		               txa
.16b3	48		               pha
.16b4	ad 94 1d	               lda  f8abutton
.16b7	48		               pha
.16b8	a9 92		               lda  #146
.16ba	8d a3 1d	               sta  f8abutton+15
.16bd	a9 01		               lda  #flashcol
.16bf	8d 94 1d	               sta  f8abutton
.16c2	a2 94		               ldx  #<f8abutton
.16c4	a0 1d		               ldy  #>f8abutton
.16c6	20 5e 1f	               jsr  putscxy
.16c9	20 21 11	               jsr  delay
.16cc	a9 12		               lda  #18
.16ce	8d a3 1d	               sta  f8abutton+15
.16d1	68		               pla
.16d2	8d 94 1d	               sta  f8abutton
.16d5	a2 94		               ldx  #<f8abutton
.16d7	a0 1d		               ldy  #>f8abutton
.16d9	20 5e 1f	               jsr  putscxy
.16dc	68		               pla
.16dd	aa		               tax
.16de	68		               pla
.16df	28		               plp
.16e0	4c 27 17	               jmp  swapit
.16e3			menub
.16e3	20 c6 1f	               jsr  push
.16e6	a2 ac		               ldx  #<blankmsg
.16e8	a0 18		               ldy  #>blankmsg
.16ea	20 5e 1f	               jsr  putscxy
.16ed	a2 67		               ldx  #<menua_msg
.16ef	a0 1a		               ldy  #>menua_msg
.16f1	20 5e 1f	               jsr  putscxy
.16f4	20 05 20	               jsr  pop
.16f7	08		               php
.16f8	48		               pha
.16f9	8a		               txa
.16fa	48		               pha
.16fb	ad 64 1e	               lda  f8bbutton
.16fe	48		               pha
.16ff	a9 92		               lda  #146
.1701	8d 73 1e	               sta  f8bbutton+15
.1704	a9 01		               lda  #flashcol
.1706	8d 64 1e	               sta  f8bbutton
.1709	a2 64		               ldx  #<f8bbutton
.170b	a0 1e		               ldy  #>f8bbutton
.170d	20 5e 1f	               jsr  putscxy
.1710	20 21 11	               jsr  delay
.1713	a9 12		               lda  #18
.1715	8d 73 1e	               sta  f8bbutton+15
.1718	68		               pla
.1719	8d 64 1e	               sta  f8bbutton
.171c	a2 64		               ldx  #<f8bbutton
.171e	a0 1e		               ldy  #>f8bbutton
.1720	20 5e 1f	               jsr  putscxy
.1723	68		               pla
.1724	aa		               tax
.1725	68		               pla
.1726	28		               plp
.1727	49 ff		swapit         eor  #$ff
.1729	8d 57 09	               sta  fkeyset
.172c	20 b5 0f	               jsr  drawfkeys
.172f	68		               pla
.1730	20 c6 1f	               jsr  push
.1733	a2 ac		               ldx  #<blankmsg
.1735	a0 18		               ldy  #>blankmsg
.1737	20 5e 1f	               jsr  putscxy
.173a	a2 d8		               ldx  #<prompt_msg
.173c	a0 18		               ldy  #>prompt_msg
.173e	20 5e 1f	               jsr  putscxy
.1741	20 05 20	               jsr  pop
.1744	60		               rts
.1745			reverse
.1745	20 c6 1f	               jsr  push
.1748	48		               pha
.1749	ad 5c 09	               lda  mapaddr
.174c	85 fd		               sta  $fd
.174e	ad 5d 09	               lda  mapaddr+1
.1751	85 fe		               sta  $fe
.1753	68		               pla
.1754	a0 00		               ldy  #$00
.1756	b1 fd		again          lda  (zpage2),y
.1758	49 ff		               eor  #$ff
.175a	91 fd		               sta  (zpage2),y
.175c	c8		               iny
.175d	c0 08		               cpy  #$08
.175f	d0 f5		               bne  again
.1761	20 05 20	               jsr  pop
.1764	60		               rts
.1765			scrollup
.1765	20 c6 1f	               jsr  push
.1768	48		               pha
.1769	ad 5c 09	               lda  mapaddr
.176c	85 fb		               sta  $fb
.176e	ad 5d 09	               lda  mapaddr+1
.1771	85 fc		               sta  $fc
.1773	68		               pla
.1774	48		               pha
.1775	ad 5c 09	               lda  mapaddr
.1778	85 fd		               sta  $fd
.177a	ad 5d 09	               lda  mapaddr+1
.177d	85 fe		               sta  $fe
.177f	68		               pla
.1780	20 e5 20	               jsr  inczp2
.1783	a0 00		               ldy  #$00
.1785	b1 fb		               lda  (zpage1),y
.1787	8d 9c 17	               sta  tmpbyte
.178a	b1 fd		again          lda  (zpage2),y
.178c	91 fb		               sta  (zpage1),y
.178e	c8		               iny
.178f	c0 07		               cpy  #$07
.1791	d0 f7		               bne  again
.1793	ad 9c 17	               lda  tmpbyte
.1796	91 fb		               sta  (zpage1),y
.1798	20 05 20	               jsr  pop
.179b	60		               rts
>179c	00		tmpbyte        .byte     $00
.179d			scrolldown
.179d	20 c6 1f	               jsr  push
.17a0	48		               pha
.17a1	ad 5c 09	               lda  mapaddr
.17a4	85 fb		               sta  $fb
.17a6	ad 5d 09	               lda  mapaddr+1
.17a9	85 fc		               sta  $fc
.17ab	68		               pla
.17ac	48		               pha
.17ad	ad 5c 09	               lda  mapaddr
.17b0	85 fd		               sta  $fd
.17b2	ad 5d 09	               lda  mapaddr+1
.17b5	85 fe		               sta  $fe
.17b7	68		               pla
.17b8	20 e5 20	               jsr  inczp2
.17bb	a0 07		               ldy  #$07                ;xxxxxxxx zpage1
.17bd	b1 fb		               lda  (zpage1),y          ;xxxxxxxx zpage2
.17bf	8d d6 17	               sta  tmpbyte             ;xxxxxxxx
.17c2	88		again          dey                      ;xxxxxxxx
.17c3	b1 fb		               lda  (zpage1),y          ;xxxxxxxx
.17c5	91 fd		               sta  (zpage2),y          ;xxxxxxxx
.17c7	c0 00		               cpy  #$00                ;xxxxxxxx
.17c9	d0 f7		               bne  again               ;xxxxxxxx
.17cb	a0 00		               ldy  #$00
.17cd	ad d6 17	               lda  tmpbyte
.17d0	91 fb		               sta  (zpage1),y
.17d2	20 05 20	               jsr  pop
.17d5	60		               rts
>17d6	00		tmpbyte        .byte     $00
.17d7			scrollright
.17d7	20 c6 1f	               jsr  push
.17da	48		               pha
.17db	ad 5c 09	               lda  mapaddr
.17de	85 fb		               sta  $fb
.17e0	ad 5d 09	               lda  mapaddr+1
.17e3	85 fc		               sta  $fc
.17e5	68		               pla
.17e6	a0 00		               ldy  #$00
.17e8	b1 fb		again          lda  (zpage1),y
.17ea	18		               clc
.17eb	6a		               ror
.17ec	90 03		               bcc  zero
.17ee	18		               clc
.17ef	69 80		one            adc  #$80
.17f1	91 fb		zero           sta  (zpage1),y
.17f3	c8		               iny
.17f4	c0 08		               cpy  #$08
.17f6	d0 f0		               bne  again
.17f8	20 05 20	               jsr  pop
.17fb	60		               rts
.17fc			scrollleft
.17fc	20 c6 1f	               jsr  push
.17ff	48		               pha
.1800	ad 5c 09	               lda  mapaddr
.1803	85 fb		               sta  $fb
.1805	ad 5d 09	               lda  mapaddr+1
.1808	85 fc		               sta  $fc
.180a	68		               pla
.180b	a0 00		               ldy  #$00
.180d	b1 fb		again          lda  (zpage1),y
.180f	18		               clc
.1810	2a		               rol
.1811	69 00		               adc  #$00
.1813	91 fb		               sta  (zpage1),y
.1815	c8		               iny
.1816	c0 08		               cpy  #$08
.1818	d0 f3		               bne  again
.181a	20 05 20	               jsr  pop
.181d	60		               rts
.181e			fillchar
.181e	20 c6 1f	               jsr  push
.1821	a9 ff		               lda  #$ff
.1823	20 36 18	               jsr  allsame
.1826	20 05 20	               jsr  pop
.1829	60		               rts
.182a			clearchar
.182a	20 c6 1f	               jsr  push
.182d	a9 00		               lda  #$00
.182f	20 36 18	               jsr  allsame
.1832	20 05 20	               jsr  pop
.1835	60		               rts
.1836			allsame
.1836	48		               pha
.1837	ad 5c 09	               lda  mapaddr
.183a	85 fd		               sta  $fd
.183c	ad 5d 09	               lda  mapaddr+1
.183f	85 fe		               sta  $fe
.1841	68		               pla
.1842	a0 00		               ldy  #$00
.1844	91 fd		again          sta  (zpage2),y
.1846	c8		               iny
.1847	c0 08		               cpy  #$08
.1849	d0 f9		               bne  again
.184b	60		               rts
.184c			fliphorz
.184c	20 c6 1f	               jsr  push
.184f	48		               pha
.1850	ad 5c 09	               lda  mapaddr
.1853	85 fd		               sta  $fd
.1855	ad 5d 09	               lda  mapaddr+1
.1858	85 fe		               sta  $fe
.185a	68		               pla
.185b	a0 00		               ldy  #$00
.185d	b1 fd		nextbyte       lda  (zpage2),y
.185f	a2 00		               ldx  #$00
.1861	2a		rolagain       rol
.1862	6e 78 18	               ror  tmpbyte
.1865	e8		               inx
.1866	e0 08		               cpx  #$08
.1868	30 f7		               bmi  rolagain
.186a	ad 78 18	               lda  tmpbyte
.186d	91 fd		               sta  (zpage2),y
.186f	c8		               iny
.1870	c0 08		               cpy  #$08
.1872	30 e9		               bmi  nextbyte
.1874	20 05 20	               jsr  pop
.1877	60		               rts
>1878	00		tmpbyte        .byte     $00
.1879			flipvert
.1879	20 c6 1f	               jsr  push
.187c	48		               pha
.187d	ad 5c 09	               lda  mapaddr
.1880	85 fd		               sta  $fd
.1882	ad 5d 09	               lda  mapaddr+1
.1885	85 fe		               sta  $fe
.1887	68		               pla
.1888	a0 00		               ldy  #$00
.188a	b1 fd		tostack        lda  (zpage2),y
.188c	48		               pha
.188d	c8		               iny
.188e	c0 08		               cpy  #$08
.1890	d0 f8		               bne  tostack
.1892	a0 00		               ldy  #$00
.1894	68		fromstack      pla
.1895	91 fd		               sta  (zpage2),y
.1897	c8		               iny
.1898	c0 08		               cpy  #$08
.189a	d0 f8		               bne  fromstack
.189c	20 05 20	               jsr  pop
.189f	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: messages.asm

>18a0	0a 01 05	editor_msg     .byte vrose,1,5
>18a3	5b 45 44 49	               .null     "[editor]"
>18a7	54 4f 52 5d 00
>18ac	03 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>18b0	20 20 20 20	               .null     "                                       "
>18b4	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>18c4	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>18d4	20 20 20 00
>18d8	03 00 05 92	prompt_msg     .byte     mesgcol,0,5,146
>18dc	20 45 4e 54	               .null     " enter f-key command :"
>18e0	45 52 20 46 2d 4b 45 59 20 43 4f 4d 4d 41 4e 44
>18f0	20 3a 00
.18f3			f1a_msg
>18f3	03 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>18f7	20 45 44 49	               .null     " edit mode: chr$(   )",146
>18fb	54 20 4d 4f 44 45 3a 20 43 48 52 24 28 20 20 20
>190b	29 92 00
.190e			f2a_msg
>190e	03 00 05	copy_msg       .byte     mesgcol,0,5
>1911	20 45 4e 54	               .null     " enter character to copy:"
>1915	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>1925	43 4f 50 59 3a 00
.192b			f3a_msg
>192b	03 00 05 92	save_msg       .byte     mesgcol,0,5,146
>192f	20 53 41 56	               .null     " save on cassette or disk? (c/d): "
>1933	45 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>1943	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 20 00
.1952			f4a_msg
>1952	03 00 05 92	load_msg       .byte     mesgcol,0,5,146
>1956	20 4c 4f 41	               .null     " load from cassette or disk? (c/d): "
>195a	44 20 46 52 4f 4d 20 43 41 53 53 45 54 54 45 20
>196a	4f 52 20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 20
>197a	00
.197b			f5a_msg
>197b	03 00 05	clear_msg      .byte     mesgcol,0,5
>197e	20 43 4c 45	               .null     " clear char: chr$(   )"
>1982	41 52 20 43 48 41 52 3a 20 43 48 52 24 28 20 20
>1992	20 29 00
.1995			f6a_msg
>1995	03 00 05	fill_msg       .byte     mesgcol,0,5
>1998	20 46 49 4c	               .null     " fill char:  chr$(   )"
>199c	4c 20 43 48 41 52 3a 20 20 43 48 52 24 28 20 20
>19ac	20 29 00
.19af			f7a_msg
>19af	03 00 05	work_msg       .byte     mesgcol,0,5
>19b2	20 52 45 53	               .null     " restoring all characters."
>19b6	54 4f 52 49 4e 47 20 41 4c 4c 20 43 48 41 52 41
>19c6	43 54 45 52 53 2e 00
.19cd			f1b_msg
>19cd	03 00 05	invr_msg       .byte     mesgcol,0,5
>19d0	20 46 4c 49	               .null     " flipping vertically:"
>19d4	50 50 49 4e 47 20 56 45 52 54 49 43 41 4c 4c 59
>19e4	3a 00
.19e6			f2b_msg
>19e6	03 00 05	flip_msg       .byte     mesgcol,0,5
>19e9	20 46 4c 49	               .null     " flipping horizontally:"
>19ed	50 50 49 4e 47 20 48 4f 52 49 5a 4f 4e 54 41 4c
>19fd	4c 59 3a 00
.1a01			f3b_msg
>1a01	03 00 05	scrollr_msg    .byte     mesgcol,0,5
>1a04	20 53 43 52	               .null     " scrolling right:"
>1a08	4f 4c 4c 49 4e 47 20 52 49 47 48 54 3a 00
.1a16			f4b_msg
>1a16	03 00 05	scrolll_msg    .byte     mesgcol,0,5
>1a19	20 53 43 52	               .null     " scrolling left:"
>1a1d	4f 4c 4c 49 4e 47 20 4c 45 46 54 3a 00
.1a2a			f5b_msg
>1a2a	03 00 05	scrollu_msg    .byte     mesgcol,0,5
>1a2d	20 53 43 52	               .null     " scrolling up:"
>1a31	4f 4c 4c 49 4e 47 20 55 50 3a 00
.1a3c			f6b_msg
>1a3c	03 00 05	scrolld_msg    .byte     mesgcol,0,5
>1a3f	20 53 43 52	               .null     " scrolling down:"
>1a43	4f 4c 4c 49 4e 47 20 44 4f 57 4e 3a 00
.1a50			f7b_msg
>1a50	03 00 05	rvrs_msg       .byte     mesgcol,0,5
>1a53	20 52 45 56	               .null     " reverse character:"
>1a57	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
>1a67	03 00 05	menua_msg      .byte     mesgcol,0,5
>1a6a	20 59 4f 55	               .null     " you are now in menu a."
>1a6e	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>1a7e	20 41 2e 00
>1a82	03 00 05	menub_msg      .byte     mesgcol,0,5
>1a85	20 59 4f 55	               .null     " you are now in menu b."
>1a89	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>1a99	20 42 2e 00
>1a9d	07 00 05	copychar_msg   .byte     vjaune,0,5
>1aa0	20 45 4e 54	               .null     " enter character to copy from (?).",157,157,157
>1aa4	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>1ab4	43 4f 50 59 20 46 52 4f 4d 20 28 3f 29 2e 9d 9d
>1ac4	9d 00
>1ac6	07 00 05	fname_msg      .byte     vjaune,0,5
>1ac9	20 45 4e 54	               .null     " enter a 6 letter filename : ",$a4,$a4,$a4,$a4,$a4,$a4,".chr",157,157,157,157,157,157,157,157,157,157
>1acd	45 52 20 41 20 36 20 4c 45 54 54 45 52 20 46 49
>1add	4c 45 4e 41 4d 45 20 3a 20 a4 a4 a4 a4 a4 a4 2e
>1aed	43 48 52 9d 9d 9d 9d 9d 9d 9d 9d 9d 9d 00
>1afb	0e 15 18 12	quit_msg       .byte     vblue1,21,24,18
>1aff	43 54 52 4c	               .text     "ctrl-x",146
>1b03	2d 58 92
>1b06	20 54 4f 20	               .null     " to quit."
>1b0a	51 55 49 54 2e 00
.1b10			menu_msg
>1b10	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>1b14	43 54 52 4c	               .text     "ctrl-x",146
>1b18	2d 58 92
>1b1b	20 54 4f 20	               .null     " to menu."
>1b1f	4d 45 4e 55 2e 00
>1b25	07 04 06 12	whoami0        .byte     whoamicol,4,6,18
>1b29	20 20 20 20	               .null     "                               ",146
>1b2d	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b3d	20 20 20 20 20 20 20 20 20 20 20 92 00
>1b4a	07 04 07 12	whoami1        .byte     whoamicol,4,7,18
>1b4e	20 20 20 20	               .null     "          ",146," charedit ",18,"           ",146
>1b52	20 20 20 20 20 20 92 20 43 48 41 52 45 44 49 54
>1b62	20 12 20 20 20 20 20 20 20 20 20 20 20 92 00
>1b71	07 04 08 12	whoami2        .byte     whoamicol,4,8,18
>1b75	20 20 20 20	               .null     "                               ",146
>1b79	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b89	20 20 20 20 20 20 20 20 20 20 20 92 00
>1b96	07 04 09 12	whoami3        .byte     whoamicol,4,9,18
>1b9a	20 20 49 4e	               .null     "  inspired from john heilborn  ",146
>1b9e	53 50 49 52 45 44 20 46 52 4f 4d 20 4a 4f 48 4e
>1bae	20 48 45 49 4c 42 4f 52 4e 20 20 92 00
>1bbb	07 04 0a 12	whoami4        .byte     whoamicol,4,10,18
>1bbf	20 20 20 20	               .null     "      isbn: 0-942386-29-9      ",146
>1bc3	20 20 49 53 42 4e 3a 20 30 2d 39 34 32 33 38 36
>1bd3	2d 32 39 2d 39 20 20 20 20 20 20 92 00
>1be0	07 04 0b 12	whoami5        .byte     whoamicol,4,11,18
>1be4	20 20 20 20	               .null     "                               ",146
>1be8	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1bf8	20 20 20 20 20 20 20 20 20 20 20 92 00
>1c05	07 04 0c 12	whoami6        .byte     whoamicol,4,12,18
>1c09	20 43 4f 44	               .null     " coded in assembly language by ",146
>1c0d	45 44 20 49 4e 20 41 53 53 45 4d 42 4c 59 20 4c
>1c1d	41 4e 47 55 41 47 45 20 42 59 20 92 00
>1c2a	07 04 0d 12	whoami7        .byte     whoamicol,4,13,18
>1c2e	20 20 20 20	               .null     "     daniel lafrance 2023      ",146
>1c32	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>1c42	20 32 30 32 33 20 20 20 20 20 20 92 00
>1c4f	07 04 0e 12	whoami8        .byte     whoamicol,4,14,18
>1c53	20 20 20 20	               .null     "    version:",version,"    ",146
>1c57	56 45 52 53 49 4f 4e 3a 32 30 32 33 31 31 31 36
>1c67	2d 31 30 30 34 30 30 20 20 20 20 92 00
>1c74	07 04 0f 12	whoami9        .byte     whoamicol,4,15,18
>1c78	20 20 20 20	               .null     "                               ",146
>1c7c	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1c8c	20 20 20 20 20 20 20 20 20 20 20 92 00
>1c99	03 06 10 14	bye_msg        .byte     vcyan,6,16,20
>1c9d	20 54 48 41	               .null     " thanks and have a good day ",146
>1ca1	4e 4b 53 20 41 4e 44 20 48 41 56 45 20 41 20 47
>1cb1	4f 4f 44 20 44 41 59 20 92 00
>1cbb	0d 05 18 12	any_msg        .byte     vvert1,5,24,18
>1cbf	20 20 55 53	               .null         "  use the [anykey] to basic  ",146
>1cc3	45 20 54 48 45 20 5b 41 4e 59 4b 45 59 5d 20 54
>1cd3	4f 20 42 41 53 49 43 20 20 92 00
=18			fkeyleft=18
=8			f1top=8
>1cde	01 12 08	f1abutton      .byte     menu1col1,fkeyleft,f1top       ;133
>1ce1	45 44 49 54	               .text     "edit char..."
>1ce5	20 43 48 41 52 2e 2e 2e
>1ced	12		               .byte     18             ; position 15
>1cee	a9 20 20 46	               .text     $a9,"  f1  ",223
>1cf2	31 20 20 df
>1cf6	92 00		               .byte     146,0
>1cf8	0f 12 09	f2abutton      .byte     menu1col2,fkeyleft,f1top+1     ;138
>1cfb	43 4f 50 59	               .text     "copy from..."
>1cff	20 46 52 4f 4d 2e 2e 2e
>1d07	12		               .byte     18   ; position 15
>1d08	20 20 20 46	               .text     "   f2   "
>1d0c	32 20 20 20
>1d10	92 00		               .byte     146,0
>1d12	01 12 0b	f3abutton      .byte     menu1col1,fkeyleft,f1top+3     ;137
>1d15	53 41 56 45	               .text     "save to....."
>1d19	20 54 4f 2e 2e 2e 2e 2e
>1d21	12		               .byte     18            ; position 15
>1d22	a9 20 20 46	               .text     $a9,"  f3  ",223
>1d26	33 20 20 df
>1d2a	92 00		               .byte     146,0
>1d2c	0f 12 0c	f4abutton      .byte     menu1col2,fkeyleft,f1top+4     ;134
>1d2f	4c 4f 41 44	               .text     "load from..."
>1d33	20 46 52 4f 4d 2e 2e 2e
>1d3b	12		               .byte     18             ; position 15
>1d3c	20 20 20 46	               .text     "   f4   "
>1d40	34 20 20 20
>1d44	92 00		               .byte     146,0
>1d46	01 12 0e	f5abutton      .byte     menu1col1,fkeyleft,f1top+6     ;135
>1d49	43 4c 45 41	               .text     "clear......."
>1d4d	52 2e 2e 2e 2e 2e 2e 2e
>1d55	12		               .byte     18             ; position 15
>1d56	a9 20 20 46	               .text     $a9,"  f5  ",223
>1d5a	35 20 20 df
>1d5e	92 00		               .byte     146,0
>1d60	0f 12 0f	f6abutton      .byte     menu1col2,fkeyleft,f1top+7    ;139
>1d63	46 49 4c 4c	               .text     "fill........"
>1d67	2e 2e 2e 2e 2e 2e 2e 2e
>1d6f	12		               .byte     18             ; position 15
>1d70	20 20 20 46	               .text     "   f6   "
>1d74	36 20 20 20
>1d78	92 00		               .byte     146,0
>1d7a	01 12 11	f7abutton      .byte     menu1col1,fkeyleft,f1top+9    ;136
>1d7d	52 45 53 54	               .text     "restore all."
>1d81	4f 52 45 20 41 4c 4c 2e
>1d89	12		               .byte     18             ; position 15
>1d8a	a9 20 20 46	               .text     $a9,"  f7  ",223
>1d8e	37 20 20 df
>1d92	92 00		               .byte     146,0
>1d94	0f 12 12	f8abutton      .byte     menu1col2,fkeyleft,f1top+10
>1d97	46 55 4e 43	               .text     "function...."
>1d9b	54 49 4f 4e 2e 2e 2e 2e
>1da3	12		               .byte     18             ; position 15
>1da4	20 20 20 46	               .text     "   f8   "
>1da8	38 20 20 20
>1dac	92 00		               .byte     146,0
>1dae	01 12 08	f1bbutton      .byte     menu2col1,fkeyleft,f1top
>1db1	46 4c 49 50	               .text     "flip vert..."
>1db5	20 56 45 52 54 2e 2e 2e
>1dbd	12		               .byte     18             ; position 15
>1dbe	a9 20 20 46	               .text     $a9,"  f1  ",223
>1dc2	31 20 20 df
>1dc6	92 00		               .byte     146,0
>1dc8	0f 12 09	f2bbutton      .byte     menu2col2,fkeyleft,f1top+1
>1dcb	46 4c 49 50	               .text     "flip horz..."
>1dcf	20 48 4f 52 5a 2e 2e 2e
>1dd7	12		               .byte     18             ; position 15
>1dd8	20 20 20 46	               .text     "   f2   "
>1ddc	32 20 20 20
>1de0	92 00		               .byte     146,0
>1de2	01 12 0b	f3bbutton      .byte     menu2col1,fkeyleft,f1top+3
>1de5	53 43 52 4f	               .text     "scroll right"
>1de9	4c 4c 20 52 49 47 48 54
>1df1	12		               .byte     18             ; position 15
>1df2	a9 20 20 46	               .text     $a9,"  f3  ",223
>1df6	33 20 20 df
>1dfa	92 00		               .byte     146,0
>1dfc	0f 12 0c	f4bbutton      .byte     menu2col2,fkeyleft,f1top+4
>1dff	53 43 52 4f	               .text     "scroll left."
>1e03	4c 4c 20 4c 45 46 54 2e
>1e0b	12		               .byte     18             ; position 15
>1e0c	20 20 20 46	               .text     "   f4   "
>1e10	34 20 20 20
>1e14	92 00		               .byte     146,0
>1e16	01 12 0e	f5bbutton      .byte     menu2col1,fkeyleft,f1top+6
>1e19	53 43 52 4f	               .text     "scroll up..."
>1e1d	4c 4c 20 55 50 2e 2e 2e
>1e25	12		               .byte     18             ; position 15
>1e26	a9 20 20 46	               .text     $a9,"  f5  ",223
>1e2a	35 20 20 df
>1e2e	92 00		               .byte     146,0
>1e30	0f 12 0f	f6bbutton      .byte     menu2col2,fkeyleft,f1top+7
>1e33	53 43 52 4f	               .text     "scroll down."
>1e37	4c 4c 20 44 4f 57 4e 2e
>1e3f	12		               .byte     18             ; position 15
>1e40	20 20 20 46	               .text     "   f6   "
>1e44	36 20 20 20
>1e48	92 00		               .byte     146,0
>1e4a	01 12 11	f7bbutton      .byte     menu2col1,fkeyleft,f1top+9
>1e4d	52 45 56 45	               .text     "reverse bits"
>1e51	52 53 45 20 42 49 54 53
>1e59	12		               .byte     18             ; position 15
>1e5a	a9 20 20 46	               .text     $a9,"  f7  ",223
>1e5e	37 20 20 df
>1e62	92 00		               .byte     146,0
>1e64	0f 12 12	f8bbutton      .byte     menu2col2,fkeyleft,f1top+10
>1e67	46 55 4e 43	               .text     "function...."
>1e6b	54 49 4f 4e 2e 2e 2e 2e
>1e73	12		               .byte     18             ; position 15
>1e74	20 20 20 46	               .text     "   f8   "
>1e78	38 20 20 20
>1e7c	92 00		               .byte     146,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.1e7e			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.1e7e			screendis
.1e7e	08		               php
.1e7f	48		               pha
.1e80	ad 11 d0	               lda  $d011
.1e83	29 ef		               and  #%11101111
.1e85	8d 11 d0	               sta  $d011
.1e88	68		               pla
.1e89	28		               plp
.1e8a	60		               rts
.1e8b			screenena
.1e8b	08		               php
.1e8c	48		               pha
.1e8d	ad 11 d0	               lda  $d011
.1e90	09 10		               ora  #%00010000
.1e92	8d 11 d0	               sta  $d011
.1e95	68		               pla
.1e96	28		               plp
.1e97	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.1e98			scrmaninit
.1e98	20 c6 1f	               jsr  push
.1e9b	a9 06		               lda  #vbleu
.1e9d	8d 21 d0	               sta  vicbackcol
.1ea0	a9 05		               lda  #vvert
.1ea2	8d 20 d0	               sta  vicbordcol
.1ea5	a9 01		               lda  #vblanc
.1ea7	8d 86 02	               sta  bascol
.1eaa	ad 00 04	               lda  scrnram
.1ead	8d 00 04	               sta  scrnram
.1eb0	20 b8 1e	               jsr  cls
.1eb3	20 05 20	               jsr  pop
.1eb6	60		               rts
>1eb7	8e		characterset   .byte b_uppercase
.1eb8			cls
.1eb8	08		               php
.1eb9	48		               pha
.1eba	a9 93		               lda  #$93
.1ebc	20 cf 1e	               jsr  putch
.1ebf	68		               pla
.1ec0	28		               plp
.1ec1	60		               rts
.1ec2			putnch
.1ec2	08		               php
.1ec3	e0 00		               cpx  #$00
.1ec5	f0 06		               beq  out
.1ec7	20 d2 ff	again          jsr  $ffd2
.1eca	ca		               dex
.1ecb	d0 fa		               bne  again
.1ecd	28		out            plp
.1ece	60		               rts
.1ecf			putch
.1ecf	08		               php
.1ed0	20 d2 ff	               jsr  $ffd2
.1ed3	28		               plp
.1ed4	60		               rts
.1ed5			puts
.1ed5	20 c6 1f	               jsr  push
.1ed8	86 fb		               stx  zpage1
.1eda	84 fc		               sty  zpage1+1
.1edc	a0 00		               ldy  #0
.1ede	b1 fb		next           lda  (zpage1),y
.1ee0	f0 09		               beq  exit
.1ee2	20 cf 1e	               jsr  putch
.1ee5	20 cd 20	               jsr  inczp1
.1ee8	4c de 1e	               jmp  next
.1eeb	20 05 20	exit           jsr  pop
.1eee	60		               rts
.1eef			gotoxy
.1eef	08		               php
.1ef0	18		               clc
.1ef1	8a		               txa
.1ef2	48		               pha
.1ef3	98		               tya
.1ef4	aa		               tax
.1ef5	68		               pla
.1ef6	a8		               tay
.1ef7	20 f0 ff	               jsr  kplot
.1efa	28		               plp
.1efb	60		               rts
.1efc			cursor
=$0286			bascol    =    $0286
.1efc	08		               php
.1efd	48		               pha
.1efe	90 12		               bcc  restore
.1f00	20 f0 ff	               jsr  kplot
.1f03	8c 24 1f	               sty  cx
.1f06	8e 25 1f	               stx  cy
.1f09	ad 86 02	               lda  bascol
.1f0c	8d 26 1f	               sta  bcol
.1f0f	4c 21 1f	               jmp  out
.1f12	ae 25 1f	restore        ldx  cy
.1f15	ac 24 1f	               ldy  cx
.1f18	20 f0 ff	               jsr  kplot
.1f1b	ad 26 1f	               lda  bcol
.1f1e	8d 86 02	               sta  bascol
.1f21	68		out            pla
.1f22	28		               plp
.1f23	60		               rts
>1f24	00		cx   .byte     $00
>1f25	00		cy   .byte     $00
>1f26	00		bcol .byte     $00
.1f27			cursave
.1f27	08		               php
.1f28	38		               sec
.1f29	20 fc 1e	               jsr  cursor
.1f2c	28		               plp
.1f2d	60		               rts
.1f2e			curput
.1f2e	08		               php
.1f2f	18		               clc
.1f30	20 fc 1e	               jsr  cursor
.1f33	28		               plp
.1f34	60		               rts
.1f35			putsxy
.1f35	20 c6 1f	               jsr  push
.1f38	86 fb		               stx  zpage1
.1f3a	84 fc		               sty  zpage1+1
.1f3c	a0 00		               ldy  #$00
.1f3e	b1 fb		               lda  (zpage1),y
.1f40	aa		               tax
.1f41	20 cd 20	               jsr  inczp1
.1f44	b1 fb		               lda  (zpage1),y
.1f46	a8		               tay
.1f47	20 ef 1e	               jsr  gotoxy
.1f4a	20 cd 20	               jsr  inczp1
.1f4d	a6 fb		               ldx  zpage1
.1f4f	a4 fc		               ldy  zpage1+1
.1f51	20 d5 1e	               jsr  puts
.1f54	20 05 20	               jsr  pop
.1f57	60		               rts
>1f58	00 00		straddr   .word     $00
>1f5a	00		px        .byte     $00
>1f5b	00		py        .byte     $00
>1f5c	00 00		zp1       .word     $00
.1f5e			putscxy
.1f5e	20 c6 1f	               jsr  push
.1f61	84 fc		               sty  zpage1+1
.1f63	86 fb		               stx  zpage1
.1f65	ad 86 02	               lda  bascol
.1f68	8d 88 1f	               sta  bc
.1f6b	a0 00		               ldy #$00
.1f6d	b1 fb		               lda  (zpage1),y
.1f6f	8d 86 02	               sta  bascol
.1f72	20 cd 20	               jsr  inczp1
.1f75	a6 fb		               ldx  zpage1
.1f77	a4 fc		               ldy  zpage1+1
.1f79	20 35 1f	               jsr  putsxy
.1f7c	ad 88 1f	               lda  bc
.1f7f	8d 86 02	               sta  bascol
.1f82	20 05 20	               jsr  pop
.1f85	60		               rts
>1f86	00 00		straddr  .word      $00
>1f88	00		bc       .byte      $00
>1f89	00 00		zp1      .word      $00
.1f8b			putrahex
.1f8b	08		               php
.1f8c	48		               pha
.1f8d	20 e3 21	               jsr  a2hex
.1f90	a9 82		               lda  #<a2hexstr
.1f92	a0 21		               ldy  #>a2hexstr
.1f94	20 d5 1e	               jsr  puts
.1f97	68		               pla
.1f98	28		               plp
.1f99	60		               rts
.1f9a			kputrahexxy
.1f9a			bputrahexxy
.1f9a			putrahexxy
.1f9a	08		               php
.1f9b	20 e3 21	               jsr  a2hex
.1f9e	a9 7f		               lda  #<a2hexpos
.1fa0	a0 21		               ldy  #>a2hexpos
.1fa2	20 35 1f	               jsr  putsxy
.1fa5	68		               pla
.1fa6	28		               plp
.1fa7	60		               rts
.1fa8			putrahexcxy
.1fa8	08		               php
.1fa9	20 e3 21	               jsr  a2hex
.1fac	a9 7f		               lda  #<a2hexpos
.1fae	a0 21		               ldy  #>a2hexpos
.1fb0	20 5e 1f	               jsr  putscxy
.1fb3	68		               pla
.1fb4	28		               plp
.1fb5	60		               rts
.1fb6			setinverse
.1fb6	48		               pha
.1fb7	a9 12		               lda  #$12
.1fb9	20 d2 ff	               jsr  $ffd2
.1fbc	68		               pla
.1fbd	60		               rts
.1fbe			clrinverse
.1fbe	48		               pha
.1fbf	a9 92		               lda  #$92
.1fc1	20 d2 ff	               jsr  $ffd2
.1fc4	68		               pla
.1fc5	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.1fc6			push
.1fc6	08		          php            ; stack : flg, pcl, pch
.1fc7	78		          sei
.1fc8	8d 02 20	          sta  ra        ; save a
.1fcb	68		          pla            ; stack : pcl, pch
.1fcc	8d 01 20	          sta  rp        ; save rp
.1fcf	68		          pla            ; stack : pch
.1fd0	8d 03 20	          sta  pc        ; save pcl
.1fd3	68		          pla            ; stack : -
.1fd4	8d 04 20	          sta  pc+1      ; save pch
.1fd7	a5 fb		          lda  zpage1    ; get zpage1 low byte
.1fd9	48		          pha            ; stack : zp1l
.1fda	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.1fdc	48		          pha            ; stack : zp1h, zp1l
.1fdd	a5 fd		          lda  zpage2    ; get zpage2 low byte
.1fdf	48		          pha            ; stack : zp2l, zp1h, zp1l
.1fe0	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.1fe2	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1fe3	ad 01 20	          lda  rp        ; get rp
.1fe6	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1fe7	ad 02 20	          lda  ra        ; get a
.1fea	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1feb	8a		          txa            ; get x
.1fec	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1fed	98		          tya            ; get y
.1fee	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1fef	ad 04 20	          lda  pc+1      ; get pch
.1ff2	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1ff3	ad 03 20	          lda  pc        ; get pcl
.1ff6	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1ff7	ad 01 20	          lda  rp        ; get rp
.1ffa	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1ffb	ad 02 20	          lda  ra        ; get a
.1ffe	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1fff	58		          cli
.2000	60		          rts
>2001	00		rp        .byte     0
>2002	00		ra        .byte     0
>2003	00 00		pc        .word     0
.2005			pull
.2005			pop
.2005	78		          sei
.2006	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2007	8d 3a 20	          sta  pc        ; save pcl
.200a	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.200b	8d 3b 20	          sta  pc+1      ; save pch
.200e	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.200f	a8		          tay            ; set y
.2010	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.2011	aa		          tax            ; set x
.2012	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.2013	8d 39 20	          sta  ra        ; save a
.2016	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.2017	8d 38 20	          sta  rp        ; save rp
.201a	68		          pla            ; stack : zp2l, zp1h, zp1l
.201b	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.201d	68		          pla            ; stack : zp1h, zp1l
.201e	85 fd		          sta  zpage2    ; get zpage2 High byte
.2020	68		          pla            ; stack : zp1l
.2021	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.2023	68		          pla            ; stack :
.2024	85 fb		          sta  zpage1    ; get zpage1 High byte
.2026	ad 3b 20	          lda  pc+1      ; get pch
.2029	48		          pha            ; stack : pch
.202a	ad 3a 20	          lda  pc
.202d	48		          pha            ; stack : pcl, pch
.202e	ad 38 20	          lda  rp        ; get rp
.2031	48		          pha            ; stack : rp, pcl, pch
.2032	ad 39 20	          lda  ra        ; set ra
.2035	58		          cli
.2036	28		          plp            ; stack : pcl, pch
.2037	60		          rts
>2038	00		rp        .byte     0
>2039	00		ra        .byte     0
>203a	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.203c			blkfill
.203c	20 c6 1f	bf0            jsr  push
.203f	20 fd 20	               jsr  savezp1
.2042	84 fc		               sty  zpage1+1
.2044	a0 00		               ldy  #$00
.2046	84 fb		               sty  zpage1
.2048	91 fb		bf1            sta  (zpage1),y
.204a	c8		               iny
.204b	d0 fb		               bne  bf1
.204d	20 0c 21	               jsr  restzp1
.2050	20 05 20	               jsr  pop
.2053	60		               rts
.2054			memfill
.2054	20 c6 1f	               jsr  push
.2057	20 3c 20	mf1            jsr  blkfill
.205a	c8		               iny
.205b	ca		               dex
.205c	d0 f9		               bne  mf1
.205e	20 05 20	               jsr  pop
.2061	60		               rts
.2062			memmove
.2062	20 c6 1f	               jsr  push
.2065	ba		               tsx            ; On se crée un pointeur ...
.2066	8a		               txa
.2067	18		               clc
.2068	69 0b		               adc  #11
.206a	a8		               tay
.206b	a2 06		               ldx  #$06
.206d	b9 00 01	nextbyte       lda  $0100,y
.2070	99 bc 20	               sta  words,y
.2073	c8		               iny
.2074	ca		               dex
.2075	d0 f6		               bne  nextbyte
.2077	ad bc 20	               lda  s
.207a	8d 93 20	               sta  source+1
.207d	ad bd 20	               lda  s+1
.2080	8d 94 20	               sta  source+2
.2083	ad be 20	               lda  d
.2086	8d 90 20	               sta  destin+1
.2089	ad bf 20	               lda  d+1
.208c	8d 91 20	               sta  destin+2
.208f	ad ff ff	destin         lda  $ffff
.2092	8d ff ff	source         sta  $ffff
.2095	ee 90 20	               inc  destin+1
.2098	d0 03		               bne  src
.209a	ee 91 20	               inc  destin+2
.209d	ee 93 20	src            inc  source+1
.20a0	d0 03		               bne  cnt
.20a2	ee 94 20	               inc  source+2
.20a5	ad c0 20	cnt            lda  compte
.20a8	d0 08		               bne  decit
.20aa	ad c1 20	               lda  compte+1
.20ad	f0 09		               beq  fini
.20af	ce c1 20	               dec  compte+1
.20b2	ce c0 20	decit          dec  compte
.20b5	4c 8f 20	               jmp  destin
.20b8	20 05 20	fini           jsr  pop
.20bb	60		               rts
.20bc			words
>20bc	00 00		s         .word     $0000
>20be	00 00		d         .word     $0000
>20c0	00 00		compte    .word     $0000
.20c2			decword
.20c2	20 c6 1f	               jsr  push
.20c5	86 fd		               stx  zpage2
.20c7	84 fe		               sty  zpage2+1
.20c9	20 05 20	               jsr  pop
.20cc	60		               rts
.20cd			inczp1
.20cd	08		               php
.20ce	48		               pha
.20cf	e6 fb		               inc  zpage1
.20d1	a5 fb		               lda  zpage1
.20d3	d0 02		               bne  nopage
.20d5	e6 fc		               inc  zpage1+1
.20d7	68		nopage         pla
.20d8	28		               plp
.20d9	60		               rts
.20da			deczp1
.20da	08		                php
.20db	48		                pha
.20dc	c6 fb		                dec  zpage1
.20de	d0 02		                bne  nopage
.20e0	c6 fc		                dec  zpage1+1
.20e2	68		nopage          pla
.20e3	28		                plp
.20e4	60		                rts
.20e5			inczp2
.20e5	08		               php
.20e6	48		               pha
.20e7	e6 fd		               inc  zpage2
.20e9	a5 fd		               lda  zpage2
.20eb	d0 02		               bne  nopage
.20ed	e6 fe		               inc  zpage2+1
.20ef	68		nopage         pla
.20f0	28		               plp
.20f1	60		               rts
.20f2			deczp2
.20f2	08		               php
.20f3	48		               pha
.20f4	a5 fd		               lda  zpage2
.20f6	d0 02		               bne  nopage
.20f8	c6 fe		               dec  zpage2+1
.20fa	68		nopage         pla
.20fb	28		               plp
.20fc	60		               rts
.20fd			savezp1
.20fd	08		               php
.20fe	48		               pha
.20ff	a5 fb		               lda  zpage1
.2101	8d 79 21	               sta  zp1
.2104	a5 fc		               lda  zpage1+1
.2106	8d 7a 21	               sta  zp1+1
.2109	68		               pla
.210a	28		               plp
.210b	60		               rts
.210c			restzp1
.210c	08		               php
.210d	48		               pha
.210e	ad 79 21	               lda zp1
.2111	85 fb		               sta zpage1
.2113	ad 7a 21	               lda zp1+1
.2116	85 fc		               sta zpage1+1
.2118	68		               pla
.2119	28		               plp
.211a	60		               rts
.211b			savezp2
.211b	08		         php
.211c	48		         pha
.211d	a5 fd		         lda zpage2
.211f	8d 7b 21	         sta zp2
.2122	a5 fe		         lda zpage2+1
.2124	8d 7c 21	         sta zp2+1
.2127	68		         pla
.2128	28		         plp
.2129	60		         rts
.212a			restzp2
.212a	08		                php
.212b	48		                pha
.212c	ad 7b 21	                lda  zp2
.212f	85 fd		                sta  zpage2
.2131	ad 7c 21	                lda  zp2+1
.2134	85 fe		                sta  zpage2+1
.2136	68		                pla
.2137	28		                plp
.2138	60		                rts
.2139			xy2addr
.2139	08		                php
.213a	48		                pha
.213b	8a		                txa
.213c	48		                pha
.213d	98		                tya
.213e	48		                pha
.213f	ad 74 21	                lda     addr1+1
.2142	8d 76 21	                sta     addr2+1
.2145	ad 73 21	                lda     addr1
.2148	8d 75 21	                sta     addr2
.214b	c0 00		                cpy     #$00
.214d	f0 0f		                beq     addx
.214f	18		moreline        clc
.2150	6d 72 21	                adc     ymult
.2153	90 03		                bcc     norepy
.2155	ee 76 21	                inc     addr2+1
.2158	8d 75 21	norepy          sta     addr2
.215b	88		                dey
.215c	d0 f1		                bne     moreline
.215e	8a		addx            txa
.215f	18		                clc
.2160	6d 75 21	                adc     addr2
.2163	90 03		                bcc     thatsit
.2165	ee 76 21	                inc     addr2+1
.2168	8d 75 21	thatsit         sta     addr2
.216b	68		                pla
.216c	a8		                tay
.216d	68		                pla
.216e	aa		                tax
.216f	68		                pla
.2170	28		                plp
.2171	60		                rts
>2172	28		ymult          .byte     40
>2173	00 00		addr1          .word     $0000
>2175	00 00		addr2          .word     $0000
>2177	00 00		bytecnt        .word     $0000
>2179	00 00		zp1        .word   $0000
>217b	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>217d	01		a2hexcol       .byte     1              ; pour aputscxy
>217e	00		a2hexbkcol     .byte     %00000000
.217f			a2hexpos
>217f	00		a2hexpx        .byte     0              ; pour aputsxy
>2180	00		a2hexpy        .byte     0
>2181	24		a2hexprefix    .byte     "$"            ; pour aputs
>2182	00 00		a2hexstr       .word     $00
>2184	00 00		               .word     $00
>2186	00		               .byte     0              ; 0 end string
>2187	30 30 30 30	abin           .null     "00000000"
>218b	30 30 30 30 00
>2190	20 20 20 00	adec           .null     "   "
.2194			putahexfmtxy
.2194	20 c6 1f	               jsr  push
.2197	20 e3 21	               jsr  a2hex
.219a	ae 7f 21	               ldx  a2hexpx
.219d	ac 80 21	               ldy  a2hexpy
.21a0	20 ef 1e	               jsr  gotoxy
.21a3	a2 81		               ldx  #<a2hexprefix
.21a5	a0 21		               ldy  #>a2hexprefix
.21a7	20 d5 1e	               jsr  puts
.21aa	20 05 20	               jsr  pop
.21ad	60		               rts
.21ae			putahexfmt
.21ae	20 c6 1f	               jsr  push
.21b1	20 e3 21	               jsr  a2hex
.21b4	a2 81		               ldx  #<a2hexprefix
.21b6	a0 21		               ldy  #>a2hexprefix
.21b8	20 d5 1e	               jsr  puts
.21bb	20 05 20	               jsr  pop
.21be	60		               rts
.21bf			putahex
.21bf	20 c6 1f	               jsr  push
.21c2	20 e3 21	               jsr  a2hex
.21c5	a2 82		               ldx  #<a2hexstr
.21c7	a0 21		               ldy  #>a2hexstr
.21c9	20 d5 1e	               jsr  puts
.21cc	20 05 20	               jsr  pop
.21cf	60		               rts
.21d0			nib2hex
.21d0	08		               php
.21d1	29 0f		               and  #$0f
.21d3	f8		               sed
.21d4	18		               clc
.21d5	69 90		               adc  #$90
.21d7	69 40		               adc  #$40
.21d9	d8		               cld
.21da	28		               plp
.21db	60		               rts
.21dc			lsra4bits
.21dc	08		               php
.21dd	4a		               lsr
.21de	4a		               lsr
.21df	4a		               lsr
.21e0	4a		               lsr
.21e1	28		               plp
.21e2	60		               rts
.21e3			a2hex
.21e3	08		               php
.21e4	48		               pha
.21e5	48		               pha
.21e6	20 dc 21	               jsr  lsra4bits
.21e9	20 d0 21	               jsr  nib2hex
.21ec	8d 82 21	               sta  a2hexstr
.21ef	68		               pla
.21f0	20 d0 21	               jsr  nib2hex
.21f3	8d 83 21	               sta  a2hexstr+1
.21f6	a9 00		               lda  #$00                ; set end of string
.21f8	8d 84 21	               sta  a2hexstr+2
.21fb	68		               pla
.21fc	28		               plp
.21fd	60		               rts
.21fe			xy2hex
.21fe	20 c6 1f	               jsr  push
.2201	20 e3 21	               jsr  a2hex
.2204	8a		               txa
.2205	48		               pha
.2206	20 dc 21	               jsr  lsra4bits
.2209	20 d0 21	               jsr  nib2hex
.220c	8d 82 21	               sta  a2hexstr
.220f	68		               pla
.2210	20 d0 21	               jsr  nib2hex
.2213	8d 83 21	               sta  a2hexstr+1
.2216	98		               tya
.2217	48		               pha
.2218	20 dc 21	               jsr  lsra4bits
.221b	20 d0 21	               jsr  nib2hex
.221e	8d 84 21	               sta  a2hexstr+2
.2221	68		               pla
.2222	20 d0 21	               jsr  nib2hex
.2225	8d 85 21	               sta  a2hexstr+3
.2228	a9 00		               lda  #$00                ; 0 ended string
.222a	8d 86 21	               sta  a2hexstr+4
.222d	20 05 20	               jsr  pop
.2230			atobin
.2230	20 c6 1f	               jsr  push
.2233	a2 08		               ldx  #8
.2235	a0 00		               ldy  #0
.2237	18		               clc
.2238	2a		nextbit        rol
.2239	48		               pha
.223a	69 00		               adc  #$00
.223c	29 01		               and  #$01
.223e	20 d0 21	               jsr  nib2hex
.2241	99 87 21	               sta  abin,y
.2244	68		               pla
.2245	c8		               iny
.2246	ca		               dex
.2247	d0 ef		               bne  nextbit
.2249	a9 00		               lda  #0
.224b	99 87 21	               sta  abin,y
.224e	20 05 20	               jsr  pull
.2251	60		               rts
.2252			putabin
.2252	20 30 22	               jsr     atobin
.2255	20 c6 1f	               jsr     push
.2258	a2 87		               ldx     #<abin
.225a	a0 21		               ldy     #>abin
.225c	20 d5 1e	               jsr     puts
.225f	20 05 20	               jsr     pop
.2262	60		               rts
.2263			printabin
.2263	20 c6 1f	               jsr     push
.2266	a2 87		               ldx     #<abin
.2268	a0 21		               ldy     #>abin
.226a	20 d5 1e	               jsr     puts
.226d	20 05 20	               jsr     pop
.2270	60		               rts
.2271			putabinfmt
.2271	08		               php
.2272	48		               pha
.2273	a9 25		               lda     #"%"
.2275	20 cf 1e	               jsr     putch
.2278	68		               pla
.2279	20 52 22	               jsr     putabin
.227c	28		               plp
.227d	60		               rts
.227e			putabinxy
.227e	20 ef 1e	               jsr     gotoxy
.2281	20 52 22	               jsr     putabin
.2284	60		               rts
.2285			putabinfmtxy
.2285	20 ef 1e	               jsr     gotoxy
.2288	20 71 22	               jsr     putabinfmt
.228b	60		               rts
.228c			atodec
.228c	20 c6 1f	               jsr  push
.228f	f8		               sed
.2290	aa		               tax
.2291	a0 00		               ldy  #$00
.2293	a9 00		               lda  #$00
.2295	18		nextbit        clc
.2296	69 01		               adc  #$01
.2298	90 01		               bcc  decx
.229a	c8		               iny
.229b	ca		decx           dex
.229c	d0 f7		               bne  nextbit
.229e	48		               pha
.229f	98		               tya
.22a0	20 d0 21	               jsr  nib2hex
.22a3	8d 90 21	               sta  adec
.22a6	68		               pla
.22a7	48		               pha
.22a8	20 d0 21	               jsr  nib2hex
.22ab	8d 92 21	               sta  adec+2
.22ae	68		               pla
.22af	6a		               ror
.22b0	6a		               ror
.22b1	6a		               ror
.22b2	6a		               ror
.22b3	20 d0 21	               jsr  nib2hex
.22b6	8d 91 21	               sta  adec+1
.22b9	d8		               cld
.22ba	20 05 20	               jsr  pull
.22bd	60		               rts
>22be	00 00 00	buffer         .byte     0,0,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>22c1	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>22c5	00 00 00 00 00 00 00 00 00 0d 00 00
>22d1	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>22d5	00 00 00 00 00 00 00 00 00 00 00 00
>22e1	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>22e5	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>22f1	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>22f5	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>2301	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>2305	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>2311	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>2315	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>2321	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>2325	00 00 00 00 00 00 00 00 00 00 00 00
>2331	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>2335	00 00 00 00 00 00 00 00 00 00 00 00
>2341	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>2345	00 00 00 00 00 00 00 00 00 00 00 00
>2351	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>2355	00 00 00 00 00 00 00 00 00 00 00 00
>2361	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>2365	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>2371	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>2375	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>2381	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>2385	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>2391	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>2395	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>23a1	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>23a5	00 00 00 00 00 00 00 00 00 00 00 00
>23b1	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>23b5	00 00 00 00 00 00 00 00 00 00 00 00
.23c1			waitstop
.23c1	20 c6 1f	               jsr  push
.23c4	20 ed f6	wait           jsr  k_stop
.23c7	d0 fb		               bne  wait
.23c9	20 05 20	               jsr  pop
.23cc	60		               rts
.23cd			anykey
.23cd	08		               php
.23ce	48		               pha
.23cf	a5 cb		nokey          lda 203
.23d1	c9 40		               cmp #64
.23d3	f0 fa		               beq nokey
.23d5	20 db 23	               jsr releasekey
.23d8	68		               pla
.23d9	28		               plp
.23da	60		               rts
.23db			releasekey
.23db	08		               php
.23dc	48		               pha
.23dd	a5 cb		keypressed     lda 203
.23df	c9 40		               cmp #64
.23e1	d0 fa		               bne keypressed
.23e3	68		               pla
.23e4	28		               plp
.23e5	60		               rts
.23e6			getkey
.23e6	20 e4 ff	again          jsr  getin
.23e9	c9 00		               cmp  #0
.23eb	f0 f9		               beq  again
.23ed	60		               rts
.23ee			waitkey
.23ee	20 c6 1f	               jsr  push
.23f1	8d 3f 24	               sta  thekey
.23f4	20 e4 ff	nope           jsr  getin
.23f7	20 d2 ff	               jsr  chrout
.23fa	cd 3f 24	               cmp  thekey
.23fd	d0 f5		               bne  nope
.23ff	20 d2 ff	               jsr  chrout
.2402	20 05 20	               jsr  pop
.2405	60		               rts
.2406			waitspace
.2406	20 c6 1f	               jsr  push
.2409	a9 7f		wait           lda  #$7f  ;%01111111
.240b	8d 00 dc	               sta  $dc00
.240e	ad 01 dc	               lda  $dc01
.2411	29 10		               and  #$10  ;mask %00010000
.2413	d0 f4		               bne  wait
.2415	20 05 20	               jsr  pop
.2418			waitsstop
.2418	20 c6 1f	               jsr  push
.241b	20 ed f6	wait           jsr  k_stop  ;%01111111
.241e	d0 fb		               bne  wait
.2420	20 05 20	               jsr  pop
.2423			waitreturn
.2423	20 c6 1f	               jsr  push
.2426	ad 40 24	               lda  thecount
.2429	8d 00 04	               sta  scrnram
.242c	a9 02		               lda  #$02
.242e	8d 00 d8	               sta  colorram
.2431	20 e4 ff	nope           jsr  getin
.2434	c9 0d		nohex          cmp  #$0d
.2436	d0 f9		               bne  nope
.2438	ee 40 24	               inc  thecount
.243b	20 05 20	               jsr  pop
.243e	60		               rts
>243f	00		thekey         .byte   0
>2440	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Thu Nov 23 15:28:07 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm

="20231116-100400"	version  = "20231116-100400"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

=18			fkeyleft       =    18
=9			f1top          =    9
=$0400			scrnnewram     =    $0400
=10			charsdef       =    10
=9			grid_top       =    9
=1			grid_left      =    1
=16			grid_bot       =    grid_top + 7
=8			grid_right     =    grid_left + 7
=$0b			bordure        =    vgris
=$00			fond           =    vnoir
=$03			mesgcol        =    vcyan
=$03			menu1col1      =    vcyan
=$0e			menu1col2      =    vbleu1
=$0f			menu2col1      =    vgris2
=$0c			menu2col2      =    vgris1
=$01			flashcol       =    vblanc
=$07			whoamicol      =    vjaune
=$01			charcolor      =    vblanc
=$0f			charscolor     =    vgris2
.080d			main
.080d	20 2c 21	               jsr  push
.0810	20 fe 1f	               jsr  scrmaninit
.0813	08		               php
.0814	48		               pha
.0815	a9 08		               lda  #$08
.0817	20 d2 ff	               jsr  $ffd2
.081a	68		               pla
.081b	28		               plp
.081c	20 29 0a	               jsr  drawcredits
.081f	a2 31		               ldx #<menu_msg
.0821	a0 1c		               ldy #>menu_msg
.0823	20 c4 20	               jsr putscxy
.0826			wait
.0826	20 e4 1f	               jsr  screendis
.0829	20 d0 0f	               jsr  copycharset
.082c	20 1e 20	               jsr  cls
.082f	20 ba 0f	               jsr  setscreenptr
.0832	20 80 08	               jsr  savetofile
.0835	20 88 0a	               jsr  setdefaultchar
.0838	20 2b 10	               jsr  staticscreen
.083b	20 fd 0e	               jsr  drawbitmap
.083e	a9 00		               lda  #$00
.0840	8d 1d 09	               sta  fkeyset
.0843	20 67 10	               jsr  drawfkeys
.0846	a9 00		               lda  #$00
.0848	20 2c 21	               jsr  push
.084b	a2 7e		               ldx  #<blankmsg
.084d	a0 19		               ldy  #>blankmsg
.084f	20 c4 20	               jsr  putscxy
.0852	a2 aa		               ldx  #<prompt_msg
.0854	a0 19		               ldy  #>prompt_msg
.0856	20 c4 20	               jsr  putscxy
.0859	20 6b 21	               jsr  pop
.085c	20 f1 1f	               jsr  screenena
.085f	20 99 0c	               jsr  keyaction
.0862	20 1e 20	               jsr  cls
.0865	20 29 0a	               jsr  drawcredits
.0868	a2 ba		               ldx #<bye_msg
.086a	a0 1d		               ldy #>bye_msg
.086c	20 c4 20	               jsr putscxy
.086f	a2 dc		               ldx #<any_msg
.0871	a0 1d		               ldy #>any_msg
.0873	20 c4 20	               jsr putscxy
.0876	20 4c 25	               jsr  getkey
.0879	20 1e 20	               jsr  cls
.087c	20 6b 21	endmain        jsr  pop
.087f	60		               rts
.0880			savetofile
.0880	20 2c 21	               jsr  push
.0883	a9 2e		               lda  #<fname
.0885	8d da 26	               sta  dsk_fnptr
.0888	a9 09		               lda  #>fname
.088a	8d db 26	               sta  dsk_fnptr+1
.088d	a9 0d		               lda  #(device-fname-1)
.088f	8d dc 26	               sta  dsk_fnlen
.0892	ad 3c 09	               lda  device
.0895	8d d9 26	               sta  dsk_lfsno
.0898	a9 00		               lda  #<bitmapmem
.089a	8d d4 26	               sta  dsk_data_s
.089d	a9 28		               lda  #>bitmapmem
.089f	8d d5 26	               sta  dsk_data_s+1
.08a2	a9 00		               lda  #<endofaddr
.08a4	8d d6 26	               sta  dsk_data_e
.08a7	a9 48		               lda  #>endofaddr
.08a9	8d d7 26	               sta  dsk_data_e+1
.08ac	a2 7e		               ldx #<blankmsg
.08ae	a0 19		               ldy #>blankmsg
.08b0	20 c4 20	               jsr putscxy
.08b3	20 2c 21	               jsr  push
.08b6	a2 01		               ldx  #1
.08b8	a0 04		               ldy  #4
.08ba	20 55 20	               jsr  gotoxy
.08bd	20 6b 21	               jsr  pop
.08c0	20 41 26	               jsr  memtofile
.08c3	20 6b 21	               jsr  pop
.08c6	60		               rts
.08c7			loadfromfile
.08c7	20 2c 21	               jsr  push
.08ca	a9 2e		               lda  #<fname
.08cc	8d da 26	               sta  dsk_fnptr
.08cf	a9 09		               lda  #>fname
.08d1	8d db 26	               sta  dsk_fnptr+1
.08d4	a9 0d		               lda  #(device-fname-1)
.08d6	8d dc 26	               sta  dsk_fnlen
.08d9	ad 3c 09	               lda  device
.08dc	8d d9 26	               sta  dsk_lfsno
.08df	a9 00		               lda  #<bitmapmem
.08e1	8d d4 26	               sta  dsk_data_s
.08e4	a9 28		               lda  #>bitmapmem
.08e6	8d d5 26	               sta  dsk_data_s+1
.08e9	a9 00		               lda  #<endofaddr
.08eb	8d d6 26	               sta  dsk_data_e
.08ee	a9 48		               lda  #>endofaddr
.08f0	8d d7 26	               sta  dsk_data_e+1
.08f3	a2 7e		               ldx #<blankmsg
.08f5	a0 19		               ldy #>blankmsg
.08f7	20 c4 20	               jsr putscxy
.08fa	20 2c 21	               jsr  push
.08fd	a2 01		               ldx  #1
.08ff	a0 04		               ldy  #4
.0901	20 55 20	               jsr  gotoxy
.0904	20 6b 21	               jsr  pop
.0907	20 79 26	               jsr  filetomem
.090a	20 6b 21	               jsr  pop
.090d	60		               rts
=10240			bitmapmem      =         charsdef * 1024     ;Calcul position ram des caracteres.
=18432			endofaddr      =         (charsdef * 1024) + (4*$800)
=61440			mstopaddr      =         $d000+(4*$800)
>090e	00 d0		startaddr      .word     $d000               ; 53248
>0910	00 f0		stopaddr       .word     mstopaddr           ; 55296
>0912	00 28		bitmapaddr     .word     bitmapmem           ; $3000, 12288
>0914	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>0918	08 04 02 01
>091c	00		editmode       .byte     0
>091d	00		fkeyset        .byte     0
>091e	00		currentchar    .byte     0
>091f	00		currentkey     .byte     0
>0920	00		previouskey    .byte     0
>0921	00		bitmapoffset   .byte     0
>0922	00 00		mapaddr        .word     0
>0924	00 00		byteaddr       .word     0
>0926	00 00		gridaddr       .word     0
>0928	09		cursln         .byte     grid_top
>0929	01		curscl         .byte     grid_left
>092a	05 1b 03 12	pfname         .byte     vvert,27,3,18
>092e	40 30 3a	fname          .text     "@0:"
>0931	4f 52 49 47	name           .text     "origin"
>0935	49 4e
>0937	2e 43 48 52	ext            .null     ".chr"
>093b	00
>093c	08		device         .byte     8

;******  Processing file: routines.asm

.093d			template
.093d	20 2c 21	               jsr  push
.0940	20 6b 21	               jsr  pop
.0943	60		               rts
.0944			getfname
.0944	20 2c 21	               jsr  push
.0947	20 2c 21	               jsr  push
.094a	a2 7e		               ldx  #<blankmsg
.094c	a0 19		               ldy  #>blankmsg
.094e	20 c4 20	               jsr  putscxy
.0951	a2 e7		               ldx  #<fname_msg
.0953	a0 1b		               ldy  #>fname_msg
.0955	20 c4 20	               jsr  putscxy
.0958	20 6b 21	               jsr  pop
.095b	a2 00		               ldx  #$00
.095d	8e 91 09	               stx  count
.0960	20 92 09	getanother     jsr  getalphanum
.0963	20 35 20	               jsr  putch
.0966	ae 91 09	               ldx  count
.0969	9d 31 09	               sta  name,x
.096c	ee 91 09	               inc  count
.096f	ae 91 09	               ldx  count
.0972	e0 06		               cpx  #$06
.0974	f0 03		               beq  finish
.0976	4c 60 09	               jmp  getanother
.0979			finish
.0979	20 2c 21	               jsr  push
.097c	a2 7e		               ldx  #<blankmsg
.097e	a0 19		               ldy  #>blankmsg
.0980	20 c4 20	               jsr  putscxy
.0983	a2 2a		               ldx  #<pfname
.0985	a0 09		               ldy  #>pfname
.0987	20 c4 20	               jsr  putscxy
.098a	20 6b 21	               jsr  pop
.098d	20 6b 21	               jsr  pop
.0990	60		               rts
>0991	00		count          .byte     0
.0992			getalphanum
.0992	20 2c 21	               jsr  push
.0995	20 4c 25	getanother     jsr  getkey
.0998	c9 30		               cmp  #$30      ; 0
.099a	30 f9		               bmi  getanother
.099c	c9 3a		               cmp  #$3a      ; 9+1
.099e	30 0b		               bmi  goodone
.09a0	c9 41		isitletter     cmp  #$41      ; A
.09a2	30 f1		               bmi  getanother
.09a4	c9 5b		               cmp  #$5b      ; Z+1
.09a6	30 03		               bmi  goodone
.09a8	4c 95 09	               jmp  getanother
.09ab	8d b5 09	goodone        sta  tempbyte
.09ae	20 6b 21	               jsr  pop
.09b1	ad b5 09	               lda  tempbyte
.09b4	60		               rts
>09b5	00		tempbyte       .byte     0
.09b6			copychar
.09b6	20 2c 21	               jsr  push
.09b9	20 f2 09	               jsr  getvalidkey
.09bc	ad 12 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.09bf	85 fb		               sta  zpage1
.09c1	ad 13 09	               lda  bitmapaddr+1
.09c4	85 fc		               sta  zpage1+1
.09c6	ae 28 0a	               ldx  copykey
.09c9	bd 27 24	               lda  asciitorom,x
.09cc	aa		               tax
.09cd	e0 00		               cpx  #$00
.09cf	f0 08		               beq  no_offset      ; sommes nous déja à 0
.09d1	a9 08		addagain       lda  #$08
.09d3	20 c3 11	               jsr  zp1addnum      ; on augmente de 8 byte ...
.09d6	ca		               dex                 ; pour chaque caracteres
.09d7	d0 f8		               bne  addagain
.09d9	ad 22 09	no_offset      lda  mapaddr        ; le caractere actuel
.09dc	85 fd		               sta  zpage2         ;
.09de	ad 23 09	               lda  mapaddr+1      ;
.09e1	85 fe		               sta  zpage2+1       ;
.09e3	a0 00		               ldy  #$00
.09e5	b1 fb		nextbyte       lda  (zpage1),y
.09e7	91 fd		               sta  (zpage2),y
.09e9	c8		               iny
.09ea	c0 08		               cpy  #$08
.09ec	d0 f7		               bne  nextbyte
.09ee	20 6b 21	out            jsr  pop
.09f1	60		               rts
.09f2			getvalidkey
.09f2	20 2c 21	               jsr  push
.09f5	20 2c 21	               jsr  push
.09f8	a2 7e		               ldx  #<blankmsg
.09fa	a0 19		               ldy  #>blankmsg
.09fc	20 c4 20	               jsr  putscxy
.09ff	a2 be		               ldx  #<copychar_msg
.0a01	a0 1b		               ldy  #>copychar_msg
.0a03	20 c4 20	               jsr  putscxy
.0a06	20 6b 21	               jsr  pop
.0a09	20 4c 25	getgoodkey     jsr  getkey
.0a0c	8d 28 0a	               sta  copykey
.0a0f	aa		               tax
.0a10	bc 27 24	               ldy  asciitorom,x
.0a13	c4 00		               cpy  $00
.0a15	d0 0a		               bne  goodone
.0a17	ae 28 0a	               ldx  copykey
.0a1a	e0 40		               cpx  #$40
.0a1c	f0 03		               beq  goodone
.0a1e	4c 09 0a	               jmp  getgoodkey
.0a21	20 35 20	goodone        jsr  putch
.0a24	20 6b 21	               jsr  pop
.0a27	60		               rts
>0a28	00		copykey        .byte 0
.0a29			drawcredits
.0a29	20 2c 21	               jsr  push
.0a2c	20 1e 20	               jsr  cls
.0a2f	a2 46		               ldx #<whoami0
.0a31	a0 1c		               ldy #>whoami0
.0a33	20 c4 20	               jsr putscxy
.0a36	a2 6b		               ldx #<whoami1
.0a38	a0 1c		               ldy #>whoami1
.0a3a	20 c4 20	               jsr putscxy
.0a3d	a2 92		               ldx #<whoami2
.0a3f	a0 1c		               ldy #>whoami2
.0a41	20 c4 20	               jsr putscxy
.0a44	a2 b7		               ldx #<whoami3
.0a46	a0 1c		               ldy #>whoami3
.0a48	20 c4 20	               jsr putscxy
.0a4b	a2 dc		               ldx #<whoami4
.0a4d	a0 1c		               ldy #>whoami4
.0a4f	20 c4 20	               jsr putscxy
.0a52	a2 01		               ldx #<whoami5
.0a54	a0 1d		               ldy #>whoami5
.0a56	20 c4 20	               jsr putscxy
.0a59	a2 26		               ldx #<whoami6
.0a5b	a0 1d		               ldy #>whoami6
.0a5d	20 c4 20	               jsr putscxy
.0a60	a2 4b		               ldx #<whoami7
.0a62	a0 1d		               ldy #>whoami7
.0a64	20 c4 20	               jsr putscxy
.0a67	a2 70		               ldx #<whoami8
.0a69	a0 1d		               ldy #>whoami8
.0a6b	20 c4 20	               jsr putscxy
.0a6e	a2 95		               ldx #<whoami9
.0a70	a0 1d		               ldy #>whoami9
.0a72	20 c4 20	               jsr putscxy
.0a75	20 e1 11	               jsr  delay
.0a78	20 e1 11	               jsr  delay
.0a7b	20 e1 11	               jsr  delay
.0a7e	20 e1 11	               jsr  delay
.0a81	20 e1 11	               jsr  delay
.0a84	20 6b 21	               jsr  pop
.0a87	60		               rts
.0a88			setdefaultchar
.0a88	20 2c 21	               jsr  push
.0a8b	a9 40		               lda  #$40
.0a8d	8d 1f 09	               sta  currentkey
.0a90	aa		               tax
.0a91	bc 27 24	               ldy  asciitorom,x
.0a94	8c 21 09	               sty  bitmapoffset
.0a97	20 52 0b	               jsr  drawkeyval
.0a9a	20 fd 0e	               jsr  drawbitmap
.0a9d	20 2c 21	               jsr  push
.0aa0	a2 0d		               ldx  #13
.0aa2	a0 0c		               ldy  #12
.0aa4	20 55 20	               jsr  gotoxy
.0aa7	20 6b 21	               jsr  pop
.0aaa	20 35 20	               jsr  putch
.0aad	20 2c 21	               jsr  push
.0ab0	a2 11		               ldx  #17
.0ab2	a0 05		               ldy  #5
.0ab4	20 55 20	               jsr  gotoxy
.0ab7	20 6b 21	               jsr  pop
.0aba	20 f2 23	               jsr  atodec
.0abd	20 2c 21	               jsr  push
.0ac0	a2 f6		isx            ldx  #<adec
.0ac2	a0 22		isy            ldy  #>adec
.0ac4	20 3b 20	               jsr  puts
.0ac7	20 6b 21	               jsr  pull
.0aca	20 6b 21	               jsr  pop
.0acd	60		               rts
.0ace			resetmenuacolor
.0ace	20 2c 21	               jsr  push
.0ad1	a9 03		               lda  #menu1col1
.0ad3	8d 34 1e	               sta  f1abutton
.0ad6	8d 6a 1e	               sta  f3abutton
.0ad9	8d a0 1e	               sta  f5abutton
.0adc	8d d6 1e	               sta  f7abutton
.0adf	a9 0e		               lda  #menu1col2
.0ae1	8d 4f 1e	               sta  f2abutton
.0ae4	8d 85 1e	               sta  f4abutton
.0ae7	8d bb 1e	               sta  f6abutton
.0aea	8d f1 1e	               sta  f8abutton
.0aed	20 6b 21	               jsr  pop
.0af0	60		               rts
.0af1			resetmenubcolor
.0af1	20 2c 21	               jsr  push
.0af4	a9 0f		               lda  #menu2col1
.0af6	8d 0c 1f	               sta  f1bbutton
.0af9	8d 42 1f	               sta  f3bbutton
.0afc	8d 78 1f	               sta  f5bbutton
.0aff	8d ae 1f	               sta  f7bbutton
.0b02	a9 0f		               lda  #menu2col1
.0b04	8d 27 1f	               sta  f2bbutton
.0b07	8d 5d 1f	               sta  f4bbutton
.0b0a	8d 93 1f	               sta  f6bbutton
.0b0d	8d c9 1f	               sta  f8bbutton
.0b10	20 6b 21	               jsr  pop
.0b13	60		               rts
.0b14			setmenuacolor
.0b14	20 2c 21	               jsr  push
.0b17	8d 34 1e	               sta  f1abutton
.0b1a	8d 4f 1e	               sta  f2abutton
.0b1d	8d 6a 1e	               sta  f3abutton
.0b20	8d 85 1e	               sta  f4abutton
.0b23	8d a0 1e	               sta  f5abutton
.0b26	8d bb 1e	               sta  f6abutton
.0b29	8d d6 1e	               sta  f7abutton
.0b2c	8d f1 1e	               sta  f8abutton
.0b2f	20 6b 21	               jsr  pop
.0b32	60		               rts
.0b33			setmenubcolor
.0b33	20 2c 21	               jsr  push
.0b36	8d 0c 1f	               sta  f1bbutton
.0b39	8d 27 1f	               sta  f2bbutton
.0b3c	8d 42 1f	               sta  f3bbutton
.0b3f	8d 5d 1f	               sta  f4bbutton
.0b42	8d 78 1f	               sta  f5bbutton
.0b45	8d 93 1f	               sta  f6bbutton
.0b48	8d ae 1f	               sta  f7bbutton
.0b4b	8d c9 1f	               sta  f8bbutton
.0b4e	20 6b 21	               jsr  pop
.0b51	60		               rts
.0b52			drawkeyval
.0b52	20 2c 21	               jsr  push
.0b55	20 2c 21	               jsr  push
.0b58	a2 01		               ldx  #1
.0b5a	a0 13		               ldy  #19
.0b5c	20 55 20	               jsr  gotoxy
.0b5f	20 6b 21	               jsr  pop
.0b62	ad 1f 09	               lda  currentkey
.0b65	20 35 20	               jsr  putch
.0b68	48		               pha
.0b69	a9 3d		               lda  #'='
.0b6b	20 35 20	               jsr  putch
.0b6e	a9 25		               lda  #'%'
.0b70	20 35 20	               jsr  putch
.0b73	68		               pla
.0b74	20 b8 23	               jsr  putabin
.0b77	20 2c 21	               jsr  push
.0b7a	a2 01		               ldx  #1
.0b7c	a0 14		               ldy  #20
.0b7e	20 55 20	               jsr  gotoxy
.0b81	20 6b 21	               jsr  pop
.0b84	20 2c 21	               jsr  push
.0b87	a2 53		isx            ldx  #<txt1
.0b89	a0 0c		isy            ldy  #>txt1
.0b8b	20 3b 20	               jsr  puts
.0b8e	20 6b 21	               jsr  pull
.0b91	a9 24		               lda  #'$'
.0b93	20 35 20	               jsr  putch
.0b96	ad 1f 09	               lda  currentkey
.0b99	20 25 23	               jsr  putahex
.0b9c	20 2c 21	               jsr  push
.0b9f	a2 01		               ldx  #1
.0ba1	a0 15		               ldy  #21
.0ba3	20 55 20	               jsr  gotoxy
.0ba6	20 6b 21	               jsr  pop
.0ba9	20 2c 21	               jsr  push
.0bac	a2 5e		isx            ldx  #<txt2
.0bae	a0 0c		isy            ldy  #>txt2
.0bb0	20 3b 20	               jsr  puts
.0bb3	20 6b 21	               jsr  pull
.0bb6	a9 24		               lda  #'$'
.0bb8	20 35 20	               jsr  putch
.0bbb	ad 13 09	               lda  bitmapaddr+1
.0bbe	20 25 23	               jsr  putahex
.0bc1	ad 12 09	               lda  bitmapaddr
.0bc4	20 25 23	               jsr  putahex
.0bc7	20 2c 21	               jsr  push
.0bca	a2 01		               ldx  #1
.0bcc	a0 16		               ldy  #22
.0bce	20 55 20	               jsr  gotoxy
.0bd1	20 6b 21	               jsr  pop
.0bd4	20 2c 21	               jsr  push
.0bd7	a2 69		isx            ldx  #<txt3
.0bd9	a0 0c		isy            ldy  #>txt3
.0bdb	20 3b 20	               jsr  puts
.0bde	20 6b 21	               jsr  pull
.0be1	a9 24		               lda  #'$'
.0be3	20 35 20	               jsr  putch
.0be6	ad 21 09	               lda  bitmapoffset
.0be9	20 25 23	               jsr  putahex
.0bec	20 2c 21	               jsr  push
.0bef	a2 01		               ldx  #1
.0bf1	a0 17		               ldy  #23
.0bf3	20 55 20	               jsr  gotoxy
.0bf6	20 6b 21	               jsr  pop
.0bf9	20 2c 21	               jsr  push
.0bfc	a2 76		isx            ldx  #<txt4
.0bfe	a0 0c		isy            ldy  #>txt4
.0c00	20 3b 20	               jsr  puts
.0c03	20 6b 21	               jsr  pull
.0c06	a9 24		               lda  #'$'
.0c08	20 35 20	               jsr  putch
.0c0b	ad 23 09	               lda  mapaddr+1
.0c0e	20 25 23	               jsr  putahex
.0c11	ad 22 09	               lda  mapaddr
.0c14	20 25 23	               jsr  putahex
.0c17	20 2c 21	               jsr  push
.0c1a	a2 01		               ldx  #1
.0c1c	a0 18		               ldy  #24
.0c1e	20 55 20	               jsr  gotoxy
.0c21	20 6b 21	               jsr  pop
.0c24	20 2c 21	               jsr  push
.0c27	a2 81		isx            ldx  #<txt5
.0c29	a0 0c		isy            ldy  #>txt5
.0c2b	20 3b 20	               jsr  puts
.0c2e	20 6b 21	               jsr  pull
.0c31	ad 29 09	               lda  curscl
.0c34	20 25 23	               jsr  putahex
.0c37	a9 da		               lda  #$da
.0c39	20 35 20	               jsr  putch
.0c3c	ad 28 09	               lda  cursln
.0c3f	20 25 23	               jsr  putahex
.0c42	20 6b 21	               jsr  pop
.0c45	60		               rts
>0c46	50 45 54 53	txt0           .null     "petscii :   "
>0c4a	43 49 49 20 3a 20 20 20 00
>0c53	4b 45 59 20	txt1           .null     "key code: "
>0c57	43 4f 44 45 3a 20 00
>0c5e	42 49 54 4d	txt2           .null     "bitmap..: "
>0c62	41 50 2e 2e 3a 20 00
>0c69	4f 46 46 53	txt3           .null     "offset..:   "
>0c6d	45 54 2e 2e 3a 20 20 20 00
>0c76	4d 41 50 41	txt4           .null     "mapaddr.: "
>0c7a	44 44 52 2e 3a 20 00
>0c81	43 55 52 53	txt5           .null     "cursval.: "
>0c85	56 41 4c 2e 3a 20 00
>0c8c	53 54 41 43	txt6           .null     "stack......:"
>0c90	4b 2e 2e 2e 2e 2e 2e 3a 00
.0c99			keyaction
.0c99	20 2c 21	               jsr  push
.0c9c	20 4c 25	loop           jsr  getkey
.0c9f	c9 85		f1             cmp  #key_f1
.0ca1	d0 03		               bne  f2
.0ca3	4c 17 0d	               jmp  dof1
.0ca6	c9 89		f2             cmp  #key_f2
.0ca8	d0 03		               bne  f3
.0caa	4c 1d 0d	               jmp  dof2
.0cad	c9 86		f3             cmp  #key_f3
.0caf	d0 03		               bne  f4
.0cb1	4c 23 0d	               jmp  dof3
.0cb4	c9 8a		f4             cmp  #key_f4
.0cb6	d0 03		               bne  f5
.0cb8	4c 29 0d	               jmp  dof4
.0cbb	c9 87		f5             cmp  #key_f5
.0cbd	d0 03		               bne  f6
.0cbf	4c 2f 0d	               jmp  dof5
.0cc2	c9 8b		f6             cmp  #key_f6
.0cc4	d0 03		               bne  f7
.0cc6	4c 35 0d	               jmp  dof6
.0cc9	c9 88		f7             cmp  #key_f7
.0ccb	d0 03		               bne  f8
.0ccd	4c 3b 0d	               jmp  dof7
.0cd0	c9 8c		f8             cmp  #key_f8
.0cd2	d0 03		               bne  ctrlx
.0cd4	4c 41 0d	               jmp  dof8
.0cd7	c9 18		ctrlx          cmp  #ctrl_x
.0cd9	d0 03		               bne  ishex14
.0cdb	4c 47 0d	               jmp  doquit
.0cde	c9 14		ishex14        cmp  #$14
.0ce0	d0 03		               bne  ishex12
.0ce2	4c 9c 0c	               jmp  loop
.0ce5	c9 12		ishex12        cmp  #$12
.0ce7	d0 03		               bne  reste
.0ce9	4c 9c 0c	               jmp  loop
.0cec			reste
.0cec	20 2c 21	               jsr  push
.0cef	a2 0d		               ldx  #13
.0cf1	a0 0c		               ldy  #12
.0cf3	20 55 20	               jsr  gotoxy
.0cf6	20 6b 21	               jsr  pop
.0cf9	20 35 20	               jsr  putch
.0cfc	48		               pha
.0cfd	ad 1f 09	               lda  currentkey
.0d00	8d 20 09	               sta  previouskey
.0d03	68		               pla
.0d04	8d 1f 09	               sta  currentkey
.0d07	aa		               tax
.0d08	bc 27 24	               ldy  asciitorom,x
.0d0b	8c 21 09	               sty  bitmapoffset
.0d0e	20 52 0b	               jsr  drawkeyval
.0d11	20 fd 0e	               jsr  drawbitmap
.0d14	4c 9c 0c	               jmp  loop
.0d17	20 f7 11	dof1           jsr  f1action  ;edit/reverse
.0d1a	4c 9c 0c	               jmp  loop
.0d1d	20 ea 12	dof2           jsr  f2action  ;save/flip vert
.0d20	4c 9c 0c	               jmp  loop
.0d23	20 a2 13	dof3           jsr  f3action  ;load/flip horz
.0d26	4c 9c 0c	               jmp  loop
.0d29	20 6f 14	dof4           jsr  f4action  ;copy/scroll r
.0d2c	4c 9c 0c	               jmp  loop
.0d2f	20 35 15	dof5           jsr  f5action  ;clear/scroll l
.0d32	4c 9c 0c	               jmp  loop
.0d35	20 ed 15	dof6           jsr  f6action  ;fill;/scroll up
.0d38	4c 9c 0c	               jmp  loop
.0d3b	20 a5 16	dof7           jsr  f7action  ;clear;/scroll down
.0d3e	4c 9c 0c	               jmp  loop
.0d41	20 62 17	dof8           jsr  f8action  ; function
.0d44	4c 9c 0c	               jmp  loop
.0d47	20 6b 21	doquit         jsr  pop
.0d4a	60		               rts
.0d4b			editor
.0d4b	20 2c 21	               jsr  push
.0d4e	20 2c 21	               jsr  push
.0d51	a2 7e		               ldx  #<blankmsg
.0d53	a0 19		               ldy  #>blankmsg
.0d55	20 c4 20	               jsr  putscxy
.0d58	a2 31		               ldx  #<exit_msg
.0d5a	a0 1c		               ldy  #>exit_msg
.0d5c	20 c4 20	               jsr  putscxy
.0d5f	20 6b 21	               jsr  pop
.0d62	20 2c 21	               jsr  push
.0d65	a2 7e		               ldx  #<blankmsg
.0d67	a0 19		               ldy  #>blankmsg
.0d69	20 c4 20	               jsr  putscxy
.0d6c	a2 d0		               ldx  #<edit_msg
.0d6e	a0 19		               ldy  #>edit_msg
.0d70	20 c4 20	               jsr  putscxy
.0d73	20 6b 21	               jsr  pop
.0d76	20 b9 0e	               jsr  setcurs
.0d79	ad 1f 09	               lda  currentkey
.0d7c	20 2c 21	               jsr  push
.0d7f	a2 11		               ldx  #17
.0d81	a0 05		               ldy  #5
.0d83	20 55 20	               jsr  gotoxy
.0d86	20 6b 21	               jsr  pop
.0d89	20 f2 23	               jsr  atodec
.0d8c	20 2c 21	               jsr  push
.0d8f	a2 f6		isx            ldx  #<adec
.0d91	a0 22		isy            ldy  #>adec
.0d93	20 3b 20	               jsr  puts
.0d96	20 6b 21	               jsr  pull
.0d99	20 fd 0e	               jsr  drawbitmap
.0d9c	20 4c 25	ed_loop        jsr  getkey
.0d9f	c9 85		f1             cmp  #f1key
.0da1	d0 03		               bne  cu
.0da3	4c 8b 0e	               jmp  do_ctrlx
.0da6	c9 91		cu             cmp  #cursu
.0da8	d0 03		               bne  cd
.0daa	4c 36 0e	               jmp  do_up
.0dad	c9 11		cd             cmp  #cursd
.0daf	d0 03		               bne  cl
.0db1	4c 49 0e	               jmp  do_down
.0db4	c9 9d		cl             cmp  #cursl
.0db6	d0 03		               bne  cr
.0db8	4c 5c 0e	               jmp  do_left
.0dbb	c9 1d		cr             cmp  #cursr
.0dbd	d0 03		               bne  cx
.0dbf	4c 6f 0e	               jmp  do_right
.0dc2	c9 18		cx             cmp  #ctrl_x
.0dc4	d0 03		               bne  sp
.0dc6	4c 8b 0e	               jmp  do_ctrlx
.0dc9	c9 20		sp             cmp  #$20
.0dcb	d0 03		               bne  ishex14
.0dcd	4c 82 0e	               jmp  do_swap
.0dd0	c9 14		ishex14        cmp  #$14
.0dd2	d0 03		               bne  ishex12
.0dd4	4c 82 0e	               jmp  do_swap
.0dd7	c9 12		ishex12        cmp  #$12
.0dd9	d0 03		               bne  rest
.0ddb	4c 82 0e	               jmp  do_swap
.0dde			rest
.0dde	20 2c 21	               jsr  push
.0de1	a2 0d		               ldx  #13
.0de3	a0 0c		               ldy  #12
.0de5	20 55 20	               jsr  gotoxy
.0de8	20 6b 21	               jsr  pop
.0deb	20 35 20	               jsr  putch
.0dee	48		               pha
.0def	ad 1f 09	               lda  currentkey
.0df2	8d 20 09	               sta  previouskey
.0df5	68		               pla
.0df6	8d 1f 09	               sta  currentkey
.0df9	aa		               tax
.0dfa	bc 27 24	               ldy  asciitorom,x
.0dfd	8c 21 09	               sty  bitmapoffset
.0e00	20 52 0b	               jsr  drawkeyval
.0e03	20 fd 0e	               jsr  drawbitmap
.0e06	20 2c 21	               jsr  push
.0e09	a2 0d		               ldx  #13
.0e0b	a0 0c		               ldy  #12
.0e0d	20 55 20	               jsr  gotoxy
.0e10	20 6b 21	               jsr  pop
.0e13	20 35 20	               jsr  putch
.0e16	20 2c 21	               jsr  push
.0e19	a2 11		               ldx  #17
.0e1b	a0 05		               ldy  #5
.0e1d	20 55 20	               jsr  gotoxy
.0e20	20 6b 21	               jsr  pop
.0e23	20 f2 23	               jsr  atodec
.0e26	20 2c 21	               jsr  push
.0e29	a2 f6		isx            ldx  #<adec
.0e2b	a0 22		isy            ldy  #>adec
.0e2d	20 3b 20	               jsr  puts
.0e30	20 6b 21	               jsr  pull
.0e33	4c 88 0e	               jmp  totop
.0e36	ad 28 09	do_up          lda  cursln
.0e39	c9 09		               cmp  #grid_top
.0e3b	f0 4b		               beq  totop
.0e3d	20 db 0e	               jsr  clrcurs
.0e40	ce 28 09	               dec  cursln
.0e43	20 b9 0e	               jsr  setcurs
.0e46	4c 88 0e	               jmp  totop
.0e49	ad 28 09	do_down        lda  cursln
.0e4c	c9 10		               cmp  #grid_bot
.0e4e	f0 38		               beq  totop
.0e50	20 db 0e	               jsr  clrcurs
.0e53	ee 28 09	               inc  cursln
.0e56	20 b9 0e	               jsr  setcurs
.0e59	4c 88 0e	               jmp  totop
.0e5c	ad 29 09	do_left        lda  curscl
.0e5f	c9 01		               cmp  #grid_left
.0e61	f0 25		               beq  totop
.0e63	20 db 0e	               jsr  clrcurs
.0e66	ce 29 09	               dec  curscl
.0e69	20 b9 0e	               jsr  setcurs
.0e6c	4c 88 0e	               jmp  totop
.0e6f	ad 29 09	do_right       lda  curscl
.0e72	c9 08		               cmp  #grid_right
.0e74	f0 12		               beq  totop
.0e76	20 db 0e	               jsr  clrcurs
.0e79	ee 29 09	               inc  curscl
.0e7c	20 b9 0e	               jsr  setcurs
.0e7f	4c 88 0e	               jmp  totop
.0e82	20 92 0e	do_swap        jsr  do_eor
.0e85	20 fd 0e	               jsr  drawbitmap
.0e88	4c 9c 0d	totop          jmp  ed_loop
.0e8b	20 db 0e	do_ctrlx       jsr  clrcurs
.0e8e	20 6b 21	               jsr  pop
.0e91	60		               rts
.0e92			do_eor
.0e92	20 2c 21	               jsr  push
.0e95	ad 22 09	               lda  mapaddr
.0e98	85 fd		               sta  zpage2
.0e9a	ad 23 09	               lda  mapaddr+1
.0e9d	85 fe		               sta  zpage2+1
.0e9f	ae 28 09	               ldx  cursln     ; calcul de
.0ea2	ca		               dex            ; l'offset de
.0ea3	8a		               txa            ; la
.0ea4	29 f7		               and  #$f7      ; ligne
.0ea6	a8		               tay
.0ea7	ae 29 09	               ldx  curscl
.0eaa	ca		               dex
.0eab	bd 14 09	               lda  eorval,x
.0eae	51 fd		               eor  (zpage2),y
.0eb0	20 52 0b	               jsr  drawkeyval
.0eb3	91 fd		               sta  (zpage2),y
.0eb5	20 6b 21	               jsr  pop
.0eb8	60		               rts
.0eb9			setcurs
.0eb9	20 2c 21	               jsr  push
.0ebc	a2 01		               ldx  #grid_left
.0ebe	ac 28 09	               ldy  cursln
.0ec1	20 55 20	               jsr  gotoxy
.0ec4	a9 da		               lda  #$da
.0ec6	20 35 20	               jsr  putch
.0ec9	ae 29 09	               ldx  curscl
.0ecc	e8		               inx
.0ecd	a0 08		               ldy  #grid_top-1
.0ecf	20 55 20	               jsr  gotoxy
.0ed2	a9 da		               lda  #$da
.0ed4	20 35 20	               jsr  putch
.0ed7	20 6b 21	               jsr  pop
.0eda	60		               rts
.0edb			clrcurs
.0edb	20 2c 21	               jsr  push
.0ede	a2 01		               ldx  #grid_left
.0ee0	ac 28 09	               ldy  cursln
.0ee3	20 55 20	               jsr  gotoxy
.0ee6	a9 20		               lda  #$20
.0ee8	20 35 20	               jsr  putch
.0eeb	ae 29 09	               ldx  curscl
.0eee	e8		               inx
.0eef	a0 08		               ldy  #grid_top-1
.0ef1	20 55 20	               jsr  gotoxy
.0ef4	a9 20		               lda  #$20
.0ef6	20 35 20	               jsr  putch
.0ef9	20 6b 21	               jsr  pop
.0efc	60		               rts
.0efd			drawbitmap
.0efd	20 2c 21	               jsr  push
.0f00	20 64 0f	               jsr  calcmapaddr
.0f03	ad 22 09	               lda  mapaddr        ; on pointe sur la table des bitmaps
.0f06	85 fb		               sta  zpage1
.0f08	ad 23 09	               lda  mapaddr+1
.0f0b	85 fc		               sta  zpage1+1
.0f0d	a0 00		drawchar       ldy  #$00
.0f0f	a2 09		               ldx  #grid_top      ;on replace la ...
.0f11	8e 1a 0f	               stx  isy+1          ;ligne de départ
.0f14	20 2c 21	nextline       jsr  push
.0f17	a2 02		               ldx  #grid_left+1        ; la colonne
.0f19	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.0f1b	20 55 20	               jsr  gotoxy
.0f1e	20 6b 21	               jsr  pop
.0f21	b1 fb		               lda  (zpage1),y     ; on li une ligne
.0f23	20 96 23	               jsr  atobin
.0f26	20 93 0f	               jsr  abintograph
.0f29	20 2c 21	               jsr  push
.0f2c	a2 ed		isx            ldx  #<abin
.0f2e	a0 22		isy            ldy  #>abin
.0f30	20 3b 20	               jsr  puts
.0f33	20 6b 21	               jsr  pull
.0f36	ee 1a 0f	               inc  isy+1
.0f39	c8		               iny
.0f3a	c0 08		               cpy  #$08
.0f3c	30 d6		               bmi  nextline
.0f3e	20 45 0f	               jsr  highlight
.0f41	20 6b 21	               jsr  pop
.0f44	60		               rts
.0f45			highlight
.0f45	20 2c 21	               jsr  push
.0f48	ae 20 09	               ldx  previouskey
.0f4b	bd 27 24	               lda  asciitorom,x
.0f4e	aa		               tax
.0f4f	a9 0f		               lda  #charscolor
.0f51	9d 00 d8	               sta  colorram,x
.0f54	ae 1f 09	               ldx  currentkey
.0f57	bd 27 24	               lda  asciitorom,x
.0f5a	aa		               tax
.0f5b	a9 01		               lda  #charcolor
.0f5d	9d 00 d8	               sta  colorram,x
.0f60	20 6b 21	               jsr  pop
.0f63	60		               rts
.0f64			calcmapaddr
.0f64	20 2c 21	               jsr  push
.0f67	ad 12 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0f6a	85 fb		               sta  zpage1
.0f6c	ad 13 09	               lda  bitmapaddr+1
.0f6f	85 fc		               sta  zpage1+1
.0f71	ae 21 09	               ldx  bitmapoffset
.0f74	e0 00		               cpx  #$00
.0f76	f0 08		               beq  thesame         ; sommes nous déja à 0
.0f78	a9 08		addagain       lda  #$08
.0f7a	20 c3 11	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0f7d	ca		               dex                 ; pour chaque caracteres
.0f7e	d0 f8		               bne  addagain
.0f80	48		thesame        pha
.0f81	a5 fb		               lda  zpage1
.0f83	8d 22 09	               sta  mapaddr
.0f86	a5 fc		               lda  zpage1+1
.0f88	8d 23 09	               sta  mapaddr+1
.0f8b	68		               pla
.0f8c	20 52 0b	               jsr  drawkeyval
.0f8f	20 6b 21	out            jsr  pop
.0f92	60		               rts
.0f93			abintograph
.0f93	20 2c 21	               jsr  push
.0f96	a9 ed		               lda  #<abin
.0f98	85 fb		               sta  zpage1
.0f9a	a9 22		               lda  #>abin+1
.0f9c	85 fc		               sta  zpage1+1
.0f9e	a0 00		               ldy  #$00
.0fa0	b1 fb		nextbit        lda  (zpage1),y
.0fa2	c9 30		               cmp  #$30
.0fa4	f0 07		               beq  itszero
.0fa6	a9 d1		itsone         lda  #$d1
.0fa8	91 fb		               sta  (zpage1),y
.0faa	4c b1 0f	               jmp  next
.0fad	a9 2e		itszero        lda  #$2e
.0faf	91 fb		               sta  (zpage1),y
.0fb1	c8		next           iny
.0fb2	c0 08		               cpy  #$08
.0fb4	30 ea		               bmi  nextbit
.0fb6	20 6b 21	               jsr  pop
.0fb9	60		               rts
.0fba			setscreenptr
.0fba	20 2c 21	               jsr  push
.0fbd	a9 08		               lda  #$08      ; basic commande to disable ...
.0fbf	20 d2 ff	               jsr  chrout    ; ... character set change.
.0fc2	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.0fc5	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.0fc7	09 0a		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.0fc9	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.0fcc	20 6b 21	               jsr  pop
.0fcf	60		               rts
.0fd0			copycharset
.0fd0	20 2c 21	               jsr  push
.0fd3	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0fd6	29 fe		               and  #%11111110     ;254
.0fd8	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0fdb	a5 01		               lda  u6510map       ;$01
.0fdd	29 fb		               and  #%11111011     ;251
.0fdf	85 01		               sta  u6510map       ;$01
.0fe1	20 f6 0f	               jsr  memcopy
.0fe4	a5 01		               lda  u6510map       ;$01
.0fe6	09 04		               ora  #%00000100
.0fe8	85 01		               sta  u6510map       ;$01
.0fea	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0fed	09 01		               ora  #%00000001     ;254
.0fef	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0ff2	20 6b 21	               jsr  pop
.0ff5	60		               rts
.0ff6			memcopy
.0ff6	20 2c 21	               jsr  push
.0ff9	ad 0e 09	               lda  startaddr
.0ffc	85 fb		               sta  zpage1
.0ffe	ad 0f 09	               lda  startaddr+1
.1001	85 fc		               sta  zpage1+1
.1003	ad 12 09	               lda  bitmapaddr
.1006	85 fd		               sta  zpage2
.1008	ad 13 09	               lda  bitmapaddr+1
.100b	85 fe		               sta  zpage2+1
.100d	a0 00		               ldy  #$00
.100f	b1 fb		onemore        lda  (zpage1),y
.1011	91 fd		               sta  (zpage2),y
.1013	20 33 22	               jsr  inczp1
.1016	20 4b 22	               jsr  inczp2
.1019	a5 fc		               lda  zpage1+1
.101b	cd 11 09	               cmp  stopaddr+1
.101e	d0 ef		               bne  onemore
.1020	a5 fb		               lda  zpage1
.1022	cd 10 09	               cmp  stopaddr
.1025	d0 e8		               bne  onemore
.1027	20 6b 21	               jsr  pop
.102a	60		               rts
.102b			staticscreen
.102b	48		               pha
.102c	a9 0b		               lda  #bordure
.102e	8d 20 d0	               sta  $d020
.1031	68		               pla
.1032	48		               pha
.1033	a9 00		               lda  #fond
.1035	8d 21 d0	               sta  $d021
.1038	68		               pla
.1039	20 1a 11	               jsr  drawlines
.103c	20 f6 10	               jsr  drawallchars
.103f	20 62 11	               jsr  drawgrid
.1042	20 67 10	               jsr  drawfkeys
.1045	20 2c 21	               jsr  push
.1048	a2 7e		               ldx  #<blankmsg
.104a	a0 19		               ldy  #>blankmsg
.104c	20 c4 20	               jsr  putscxy
.104f	a2 1c		               ldx  #<quit_msg
.1051	a0 1c		               ldy  #>quit_msg
.1053	20 c4 20	               jsr  putscxy
.1056	20 6b 21	               jsr  pop
.1059	20 2c 21	               jsr  push
.105c	a2 00		               ldx  #0
.105e	a0 07		               ldy  #7
.1060	20 55 20	               jsr  gotoxy
.1063	20 6b 21	               jsr  pop
.1066	60		               rts
.1067			drawfkeys
.1067	20 2c 21	               jsr  push
.106a	ad 1d 09	               lda  fkeyset
.106d	c9 00		               cmp  #$0
.106f	d0 42		               bne  secondks
.1071	a2 fe		               ldx #<titremenu1
.1073	a0 1d		               ldy #>titremenu1
.1075	20 c4 20	               jsr putscxy
.1078	a2 34		               ldx #<f1abutton
.107a	a0 1e		               ldy #>f1abutton
.107c	20 c4 20	               jsr putscxy
.107f	a2 4f		               ldx #<f2abutton
.1081	a0 1e		               ldy #>f2abutton
.1083	20 c4 20	               jsr putscxy
.1086	a2 6a		               ldx #<f3abutton
.1088	a0 1e		               ldy #>f3abutton
.108a	20 c4 20	               jsr putscxy
.108d	a2 85		               ldx #<f4abutton
.108f	a0 1e		               ldy #>f4abutton
.1091	20 c4 20	               jsr putscxy
.1094	a2 a0		               ldx #<f5abutton
.1096	a0 1e		               ldy #>f5abutton
.1098	20 c4 20	               jsr putscxy
.109b	a2 bb		               ldx #<f6abutton
.109d	a0 1e		               ldy #>f6abutton
.109f	20 c4 20	               jsr putscxy
.10a2	a2 d6		               ldx #<f7abutton
.10a4	a0 1e		               ldy #>f7abutton
.10a6	20 c4 20	               jsr putscxy
.10a9	a2 f1		               ldx #<f8abutton
.10ab	a0 1e		               ldy #>f8abutton
.10ad	20 c4 20	               jsr putscxy
.10b0	4c f2 10	               jmp end
.10b3			secondks
.10b3	a2 19		               ldx #<titremenu2
.10b5	a0 1e		               ldy #>titremenu2
.10b7	20 c4 20	               jsr putscxy
.10ba	a2 0c		               ldx #<f1bbutton
.10bc	a0 1f		               ldy #>f1bbutton
.10be	20 c4 20	               jsr putscxy
.10c1	a2 27		               ldx #<f2bbutton
.10c3	a0 1f		               ldy #>f2bbutton
.10c5	20 c4 20	               jsr putscxy
.10c8	a2 42		               ldx #<f3bbutton
.10ca	a0 1f		               ldy #>f3bbutton
.10cc	20 c4 20	               jsr putscxy
.10cf	a2 5d		               ldx #<f4bbutton
.10d1	a0 1f		               ldy #>f4bbutton
.10d3	20 c4 20	               jsr putscxy
.10d6	a2 78		               ldx #<f5bbutton
.10d8	a0 1f		               ldy #>f5bbutton
.10da	20 c4 20	               jsr putscxy
.10dd	a2 93		               ldx #<f6bbutton
.10df	a0 1f		               ldy #>f6bbutton
.10e1	20 c4 20	               jsr putscxy
.10e4	a2 ae		               ldx #<f7bbutton
.10e6	a0 1f		               ldy #>f7bbutton
.10e8	20 c4 20	               jsr putscxy
.10eb	a2 c9		               ldx #<f8bbutton
.10ed	a0 1f		               ldy #>f8bbutton
.10ef	20 c4 20	               jsr putscxy
.10f2	20 6b 21	end            jsr  pop
.10f5	60		               rts
.10f6			drawallchars
.10f6	20 2c 21	               jsr push
.10f9	20 2c 21	               jsr  push
.10fc	a2 00		               ldx  #0
.10fe	a0 00		               ldy  #0
.1100	20 55 20	               jsr  gotoxy
.1103	20 6b 21	               jsr  pop
.1106	a2 00		               ldx  #$00
.1108	8a		nextc          txa
.1109	9d 00 04	               sta  scrnnewram,x
.110c	a9 0f		               lda  #charscolor
.110e	9d 00 d8	               sta  colorram,x
.1111	e8		               inx
.1112	e0 80		               cpx  #$80
.1114	d0 f2		               bne  nextc
.1116	20 6b 21	               jsr  pop
.1119	60		               rts
.111a			drawlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.111a	20 2c 21	               jsr  push
.111d	a2 28		               ldx  #40
.111f	a9 40		               lda  #64
.1121	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.1124	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.1127	ca		               dex
.1128	e0 10		hline          cpx  #vlinepos
.112a	10 03		               bpl  notyet
.112c	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.112f	e0 00		notyet         cpx  #$00
.1131	d0 ee		               bne  nextl
.1133	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.1135	85 fb		               sta  zpage1
.1137	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.1139	85 fc		               sta  zpage1+1
.113b	a0 00		               ldy  #0
.113d	a9 72		               lda  #114
.113f	91 fb		               sta  (zpage1),y
.1141	20 d1 11	               jsr  zp1add40
.1144	a2 12		               ldx  #24-hline2
.1146	a9 5d		               lda  #93
.1148	91 fb		another93      sta  (zpage1),y
.114a	20 d1 11	               jsr  zp1add40
.114d	ca		               dex
.114e	d0 f8		               bne  another93
.1150	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.1152	85 fb		               sta  zpage1
.1154	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.1156	85 fc		               sta  zpage1+1
.1158	a0 00		               ldy  #0
.115a	a9 73		               lda  #115
.115c	91 fb		               sta  (zpage1),y
.115e	20 6b 21	               jsr  pop
.1161	60		               rts
.1162			drawgrid
.1162	20 2c 21	               jsr  push
.1165	20 e4 1f	               jsr  screendis
.1168	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.116a	85 fb		               sta  zpage1
.116c	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.116e	85 fc		               sta  zpage1+1
.1170	a2 08		               ldx  #8
.1172	a9 65		nextbox        lda  #101
.1174	a0 09		               ldy  #9
.1176	91 fb		               sta  (zpage1),y
.1178	88		               dey
.1179	a9 2e		               lda  #$2e
.117b	91 fb		nextcol        sta  (zpage1),y
.117d	88		               dey
.117e	d0 fb		               bne  nextcol
.1180	20 d1 11	               jsr  zp1add40
.1183	ca		               dex
.1184	d0 ec		               bne  nextbox
.1186	a0 08		               ldy  #8
.1188	a9 77		               lda  #119
.118a	91 fb		nextlin        sta  (zpage1),y
.118c	88		               dey
.118d	d0 fb		               bne  nextlin
.118f	a9 3e		               lda  #$3e
.1191	8d eb 05	               sta  scrnnewram+(40*(12))+11
.1194	a9 70		               lda  #$70                     ;+
.1196	8d c4 05	               sta  scrnnewram+(40*(11))+12
.1199	a9 43		               lda  #$43                     ;-
.119b	8d c5 05	               sta  scrnnewram+(40*(11))+13
.119e	a9 6e		               lda  #$6e                     ;+
.11a0	8d c6 05	               sta  scrnnewram+(40*(11))+14
.11a3	a9 5d		               lda  #$5d                     ;|
.11a5	8d ec 05	               sta  scrnnewram+(40*(12))+12
.11a8	a9 5d		               lda  #$5d                     ;|
.11aa	8d ee 05	               sta  scrnnewram+(40*(12))+14
.11ad	a9 6d		               lda  #$6d                     ;+
.11af	8d 14 06	               sta  scrnnewram+(40*(13))+12
.11b2	a9 43		               lda  #$43                     ;-
.11b4	8d 15 06	               sta  scrnnewram+(40*(13))+13
.11b7	a9 7d		               lda  #$7d                     ;+
.11b9	8d 16 06	               sta  scrnnewram+(40*(13))+14
.11bc	20 f1 1f	               jsr screenena
.11bf	20 6b 21	               jsr  pop
.11c2	60		               rts
.11c3			zp1addnum
.11c3	08		               php
.11c4	48		               pha
.11c5	18		               clc
.11c6	65 fb		               adc  zpage1
.11c8	90 02		               bcc  nocarry
.11ca	e6 fc		               inc  zpage1+1
.11cc	85 fb		nocarry        sta  zpage1
.11ce	68		               pla
.11cf	28		               plp
.11d0	60		               rts
.11d1			zp1add40
.11d1	08		               php
.11d2	48		               pha
.11d3	18		               clc
.11d4	a5 fb		               lda  zpage1
.11d6	69 28		               adc  #40
.11d8	90 02		               bcc  nocarry
.11da	e6 fc		               inc  zpage1+1
.11dc	85 fb		nocarry        sta  zpage1
.11de	68		               pla
.11df	28		               plp
.11e0	60		               rts
.11e1			delay
.11e1	20 2c 21	               jsr  push
.11e4	a9 00		               lda  #$0
.11e6	aa		               tax
.11e7	a8		               tay
.11e8	ca		xagain         dex
.11e9	ca		               dex
.11ea	88		yagain         dey
.11eb	c0 00		               cpy  #$00
.11ed	d0 fb		               bne  yagain
.11ef	e0 00		               cpx  #$00
.11f1	d0 f5		               bne  xagain
.11f3	20 6b 21	               jsr  pop
.11f6	60		               rts
.11f7			f1action
.11f7	48		               pha
.11f8	a9 ff		               lda  #$ff
.11fa	8d 1c 09	               sta  editmode
.11fd	ad 1d 09	               lda  fkeyset
.1200	f0 03		               beq  menua
.1202	4c 8a 12	               jmp  menub
.1205			menua
.1205	20 2c 21	               jsr  push
.1208	a2 7e		               ldx  #<blankmsg
.120a	a0 19		               ldy  #>blankmsg
.120c	20 c4 20	               jsr  putscxy
.120f	a2 d0		               ldx  #<f1a_msg
.1211	a0 19		               ldy  #>f1a_msg
.1213	20 c4 20	               jsr  putscxy
.1216	20 6b 21	               jsr  pop
.1219	08		               php
.121a	48		               pha
.121b	8a		               txa
.121c	48		               pha
.121d	ad 34 1e	               lda  f1abutton
.1220	48		               pha
.1221	a9 92		               lda  #146
.1223	8d 46 1e	               sta  f1abutton+18
.1226	a9 01		               lda  #flashcol
.1228	8d 34 1e	               sta  f1abutton
.122b	a2 34		               ldx  #<f1abutton
.122d	a0 1e		               ldy  #>f1abutton
.122f	20 c4 20	               jsr  putscxy
.1232	20 e1 11	               jsr  delay
.1235	a9 12		               lda  #18
.1237	8d 46 1e	               sta  f1abutton+18
.123a	68		               pla
.123b	8d 34 1e	               sta  f1abutton
.123e	a2 34		               ldx  #<f1abutton
.1240	a0 1e		               ldy  #>f1abutton
.1242	20 c4 20	               jsr  putscxy
.1245	68		               pla
.1246	aa		               tax
.1247	68		               pla
.1248	28		               plp
.1249	a9 0b		               lda  #vgris
.124b	20 14 0b	               jsr  setmenuacolor
.124e	a9 03		               lda  #menu1col1
.1250	8d 34 1e	               sta  f1abutton
.1253	20 67 10	               jsr  drawfkeys
.1256	20 4b 0d	               jsr  editor
.1259	20 2c 21	               jsr  push
.125c	a2 7e		               ldx  #<blankmsg
.125e	a0 19		               ldy  #>blankmsg
.1260	20 c4 20	               jsr  putscxy
.1263	a2 1c		               ldx  #<quit_msg
.1265	a0 1c		               ldy  #>quit_msg
.1267	20 c4 20	               jsr  putscxy
.126a	20 6b 21	               jsr  pop
.126d	20 2c 21	               jsr  push
.1270	a2 7e		               ldx  #<blankmsg
.1272	a0 19		               ldy  #>blankmsg
.1274	20 c4 20	               jsr  putscxy
.1277	a2 74		               ldx  #<menua_msg
.1279	a0 1b		               ldy  #>menua_msg
.127b	20 c4 20	               jsr  putscxy
.127e	20 6b 21	               jsr  pop
.1281	20 ce 0a	               jsr  resetmenuacolor
.1284	20 67 10	               jsr  drawfkeys
.1287	4c d4 12	               jmp  out
.128a			menub
.128a	20 2c 21	               jsr  push
.128d	a2 7e		               ldx  #<blankmsg
.128f	a0 19		               ldy  #>blankmsg
.1291	20 c4 20	               jsr  putscxy
.1294	a2 b8		               ldx  #<f1b_msg
.1296	a0 1a		               ldy  #>f1b_msg
.1298	20 c4 20	               jsr  putscxy
.129b	20 6b 21	               jsr  pop
.129e	08		               php
.129f	48		               pha
.12a0	8a		               txa
.12a1	48		               pha
.12a2	ad 0c 1f	               lda  f1bbutton
.12a5	48		               pha
.12a6	a9 92		               lda  #146
.12a8	8d 1e 1f	               sta  f1bbutton+18
.12ab	a9 01		               lda  #flashcol
.12ad	8d 0c 1f	               sta  f1bbutton
.12b0	a2 0c		               ldx  #<f1bbutton
.12b2	a0 1f		               ldy  #>f1bbutton
.12b4	20 c4 20	               jsr  putscxy
.12b7	20 e1 11	               jsr  delay
.12ba	a9 12		               lda  #18
.12bc	8d 1e 1f	               sta  f1bbutton+18
.12bf	68		               pla
.12c0	8d 0c 1f	               sta  f1bbutton
.12c3	a2 0c		               ldx  #<f1bbutton
.12c5	a0 1f		               ldy  #>f1bbutton
.12c7	20 c4 20	               jsr  putscxy
.12ca	68		               pla
.12cb	aa		               tax
.12cc	68		               pla
.12cd	28		               plp
.12ce	20 4a 19	               jsr  flipvert
.12d1	20 fd 0e	               jsr  drawbitmap
.12d4	68		out            pla
.12d5	20 2c 21	               jsr  push
.12d8	a2 7e		               ldx  #<blankmsg
.12da	a0 19		               ldy  #>blankmsg
.12dc	20 c4 20	               jsr  putscxy
.12df	a2 aa		               ldx  #<prompt_msg
.12e1	a0 19		               ldy  #>prompt_msg
.12e3	20 c4 20	               jsr  putscxy
.12e6	20 6b 21	               jsr  pop
.12e9	60		               rts
.12ea			f2action
.12ea	48		               pha
.12eb	a9 00		               lda  #$0
.12ed	8d 1c 09	               sta  editmode
.12f0	ad 1d 09	               lda  fkeyset
.12f3	d0 4d		               bne  menub
.12f5	20 2c 21	               jsr  push
.12f8	a2 7e		               ldx  #<blankmsg
.12fa	a0 19		               ldy  #>blankmsg
.12fc	20 c4 20	               jsr  putscxy
.12ff	a2 eb		               ldx  #<f2a_msg
.1301	a0 19		               ldy  #>f2a_msg
.1303	20 c4 20	               jsr  putscxy
.1306	20 6b 21	               jsr  pop
.1309	08		               php
.130a	48		               pha
.130b	8a		               txa
.130c	48		               pha
.130d	ad 4f 1e	               lda  f2abutton
.1310	48		               pha
.1311	a9 92		               lda  #146
.1313	8d 61 1e	               sta  f2abutton+18
.1316	a9 01		               lda  #flashcol
.1318	8d 4f 1e	               sta  f2abutton
.131b	a2 4f		               ldx  #<f2abutton
.131d	a0 1e		               ldy  #>f2abutton
.131f	20 c4 20	               jsr  putscxy
.1322	20 e1 11	               jsr  delay
.1325	a9 12		               lda  #18
.1327	8d 61 1e	               sta  f2abutton+18
.132a	68		               pla
.132b	8d 4f 1e	               sta  f2abutton
.132e	a2 4f		               ldx  #<f2abutton
.1330	a0 1e		               ldy  #>f2abutton
.1332	20 c4 20	               jsr  putscxy
.1335	68		               pla
.1336	aa		               tax
.1337	68		               pla
.1338	28		               plp
.1339	20 b6 09	               jsr  copychar
.133c	20 fd 0e	               jsr  drawbitmap
.133f	4c 8c 13	               jmp  out
.1342			menub
.1342	20 2c 21	               jsr  push
.1345	a2 7e		               ldx  #<blankmsg
.1347	a0 19		               ldy  #>blankmsg
.1349	20 c4 20	               jsr  putscxy
.134c	a2 d4		               ldx  #<f2b_msg
.134e	a0 1a		               ldy  #>f2b_msg
.1350	20 c4 20	               jsr  putscxy
.1353	20 6b 21	               jsr  pop
.1356	08		               php
.1357	48		               pha
.1358	8a		               txa
.1359	48		               pha
.135a	ad 27 1f	               lda  f2bbutton
.135d	48		               pha
.135e	a9 92		               lda  #146
.1360	8d 39 1f	               sta  f2bbutton+18
.1363	a9 01		               lda  #flashcol
.1365	8d 27 1f	               sta  f2bbutton
.1368	a2 27		               ldx  #<f2bbutton
.136a	a0 1f		               ldy  #>f2bbutton
.136c	20 c4 20	               jsr  putscxy
.136f	20 e1 11	               jsr  delay
.1372	a9 12		               lda  #18
.1374	8d 39 1f	               sta  f2bbutton+18
.1377	68		               pla
.1378	8d 27 1f	               sta  f2bbutton
.137b	a2 27		               ldx  #<f2bbutton
.137d	a0 1f		               ldy  #>f2bbutton
.137f	20 c4 20	               jsr  putscxy
.1382	68		               pla
.1383	aa		               tax
.1384	68		               pla
.1385	28		               plp
.1386	20 1d 19	               jsr  fliphorz
.1389	20 fd 0e	               jsr  drawbitmap
.138c	68		out            pla
.138d	20 2c 21	               jsr  push
.1390	a2 7e		               ldx  #<blankmsg
.1392	a0 19		               ldy  #>blankmsg
.1394	20 c4 20	               jsr  putscxy
.1397	a2 aa		               ldx  #<prompt_msg
.1399	a0 19		               ldy  #>prompt_msg
.139b	20 c4 20	               jsr  putscxy
.139e	20 6b 21	               jsr  pop
.13a1	60		               rts
.13a2			f3action
.13a2	48		               pha
.13a3	a9 00		               lda  #$0
.13a5	8d 1c 09	               sta  editmode
.13a8	ad 1d 09	               lda  fkeyset
.13ab	d0 62		               bne  menub
.13ad	08		               php
.13ae	48		               pha
.13af	8a		               txa
.13b0	48		               pha
.13b1	ad 6a 1e	               lda  f3abutton
.13b4	48		               pha
.13b5	a9 92		               lda  #146
.13b7	8d 7c 1e	               sta  f3abutton+18
.13ba	a9 01		               lda  #flashcol
.13bc	8d 6a 1e	               sta  f3abutton
.13bf	a2 6a		               ldx  #<f3abutton
.13c1	a0 1e		               ldy  #>f3abutton
.13c3	20 c4 20	               jsr  putscxy
.13c6	20 e1 11	               jsr  delay
.13c9	a9 12		               lda  #18
.13cb	8d 7c 1e	               sta  f3abutton+18
.13ce	68		               pla
.13cf	8d 6a 1e	               sta  f3abutton
.13d2	a2 6a		               ldx  #<f3abutton
.13d4	a0 1e		               ldy  #>f3abutton
.13d6	20 c4 20	               jsr  putscxy
.13d9	68		               pla
.13da	aa		               tax
.13db	68		               pla
.13dc	28		               plp
.13dd	20 2c 21	               jsr  push
.13e0	a2 7e		               ldx  #<blankmsg
.13e2	a0 19		               ldy  #>blankmsg
.13e4	20 c4 20	               jsr  putscxy
.13e7	a2 0c		               ldx  #<f3a_msg
.13e9	a0 1a		               ldy  #>f3a_msg
.13eb	20 c4 20	               jsr  putscxy
.13ee	20 6b 21	               jsr  pop
.13f1	20 4c 25	getagain       jsr  getkey
.13f4	c9 31		               cmp  #$31
.13f6	f0 0b		               beq  devok
.13f8	c9 38		               cmp  #$38
.13fa	f0 07		               beq  devok
.13fc	c9 39		               cmp  #$39
.13fe	f0 03		               beq  devok
.1400	4c f1 13	               jmp  getagain
.1403	8d 3c 09	devok          sta  device
.1406	20 44 09	               jsr  getfname
.1409	20 c7 08	               jsr  loadfromfile
.140c	4c 59 14	               jmp  out
.140f			menub
.140f	20 2c 21	               jsr  push
.1412	a2 7e		               ldx  #<blankmsg
.1414	a0 19		               ldy  #>blankmsg
.1416	20 c4 20	               jsr  putscxy
.1419	a2 f2		               ldx  #<f3b_msg
.141b	a0 1a		               ldy  #>f3b_msg
.141d	20 c4 20	               jsr  putscxy
.1420	20 6b 21	               jsr  pop
.1423	08		               php
.1424	48		               pha
.1425	8a		               txa
.1426	48		               pha
.1427	ad 42 1f	               lda  f3bbutton
.142a	48		               pha
.142b	a9 92		               lda  #146
.142d	8d 54 1f	               sta  f3bbutton+18
.1430	a9 01		               lda  #flashcol
.1432	8d 42 1f	               sta  f3bbutton
.1435	a2 42		               ldx  #<f3bbutton
.1437	a0 1f		               ldy  #>f3bbutton
.1439	20 c4 20	               jsr  putscxy
.143c	20 e1 11	               jsr  delay
.143f	a9 12		               lda  #18
.1441	8d 54 1f	               sta  f3bbutton+18
.1444	68		               pla
.1445	8d 42 1f	               sta  f3bbutton
.1448	a2 42		               ldx  #<f3bbutton
.144a	a0 1f		               ldy  #>f3bbutton
.144c	20 c4 20	               jsr  putscxy
.144f	68		               pla
.1450	aa		               tax
.1451	68		               pla
.1452	28		               plp
.1453	20 a8 18	               jsr  scrollright
.1456	20 fd 0e	               jsr  drawbitmap
.1459	68		out            pla
.145a	20 2c 21	               jsr  push
.145d	a2 7e		               ldx  #<blankmsg
.145f	a0 19		               ldy  #>blankmsg
.1461	20 c4 20	               jsr  putscxy
.1464	a2 aa		               ldx  #<prompt_msg
.1466	a0 19		               ldy  #>prompt_msg
.1468	20 c4 20	               jsr  putscxy
.146b	20 6b 21	               jsr  pop
.146e	60		               rts
.146f			f4action
.146f	48		               pha
.1470	a9 00		               lda  #$0
.1472	8d 1c 09	               sta  editmode
.1475	ad 1d 09	               lda  fkeyset
.1478	d0 5b		               bne  menub
.147a	08		               php
.147b	48		               pha
.147c	8a		               txa
.147d	48		               pha
.147e	ad 85 1e	               lda  f4abutton
.1481	48		               pha
.1482	a9 92		               lda  #146
.1484	8d 97 1e	               sta  f4abutton+18
.1487	a9 01		               lda  #flashcol
.1489	8d 85 1e	               sta  f4abutton
.148c	a2 85		               ldx  #<f4abutton
.148e	a0 1e		               ldy  #>f4abutton
.1490	20 c4 20	               jsr  putscxy
.1493	20 e1 11	               jsr  delay
.1496	a9 12		               lda  #18
.1498	8d 97 1e	               sta  f4abutton+18
.149b	68		               pla
.149c	8d 85 1e	               sta  f4abutton
.149f	a2 85		               ldx  #<f4abutton
.14a1	a0 1e		               ldy  #>f4abutton
.14a3	20 c4 20	               jsr  putscxy
.14a6	68		               pla
.14a7	aa		               tax
.14a8	68		               pla
.14a9	28		               plp
.14aa	20 2c 21	               jsr  push
.14ad	a2 7e		               ldx  #<blankmsg
.14af	a0 19		               ldy  #>blankmsg
.14b1	20 c4 20	               jsr  putscxy
.14b4	a2 39		               ldx  #<f4a_msg
.14b6	a0 1a		               ldy  #>f4a_msg
.14b8	20 c4 20	               jsr  putscxy
.14bb	20 6b 21	               jsr  pop
.14be	20 4c 25	getagain       jsr  getkey
.14c1	c9 43		               cmp  #$43
.14c3	f0 07		               beq  devok
.14c5	c9 44		               cmp  #$44
.14c7	f0 03		               beq  devok
.14c9	4c be 14	               jmp  getagain
.14cc	8d 3c 09	devok          sta  device
.14cf	20 44 09	               jsr  getfname
.14d2	4c 1f 15	               jmp  out
.14d5			menub
.14d5	20 2c 21	               jsr  push
.14d8	a2 7e		               ldx  #<blankmsg
.14da	a0 19		               ldy  #>blankmsg
.14dc	20 c4 20	               jsr  putscxy
.14df	a2 0e		               ldx  #<f4b_msg
.14e1	a0 1b		               ldy  #>f4b_msg
.14e3	20 c4 20	               jsr  putscxy
.14e6	20 6b 21	               jsr  pop
.14e9	08		               php
.14ea	48		               pha
.14eb	8a		               txa
.14ec	48		               pha
.14ed	ad 5d 1f	               lda  f4bbutton
.14f0	48		               pha
.14f1	a9 92		               lda  #146
.14f3	8d 6f 1f	               sta  f4bbutton+18
.14f6	a9 01		               lda  #flashcol
.14f8	8d 5d 1f	               sta  f4bbutton
.14fb	a2 5d		               ldx  #<f4bbutton
.14fd	a0 1f		               ldy  #>f4bbutton
.14ff	20 c4 20	               jsr  putscxy
.1502	20 e1 11	               jsr  delay
.1505	a9 12		               lda  #18
.1507	8d 6f 1f	               sta  f4bbutton+18
.150a	68		               pla
.150b	8d 5d 1f	               sta  f4bbutton
.150e	a2 5d		               ldx  #<f4bbutton
.1510	a0 1f		               ldy  #>f4bbutton
.1512	20 c4 20	               jsr  putscxy
.1515	68		               pla
.1516	aa		               tax
.1517	68		               pla
.1518	28		               plp
.1519	20 cd 18	               jsr  scrollleft
.151c	20 fd 0e	               jsr  drawbitmap
.151f	68		out            pla
.1520	20 2c 21	               jsr  push
.1523	a2 7e		               ldx  #<blankmsg
.1525	a0 19		               ldy  #>blankmsg
.1527	20 c4 20	               jsr  putscxy
.152a	a2 aa		               ldx  #<prompt_msg
.152c	a0 19		               ldy  #>prompt_msg
.152e	20 c4 20	               jsr  putscxy
.1531	20 6b 21	               jsr  pop
.1534	60		               rts
.1535			f5action
.1535	48		               pha
.1536	a9 00		               lda  #$0
.1538	8d 1c 09	               sta  editmode
.153b	ad 1d 09	               lda  fkeyset
.153e	d0 4d		               bne  menub
.1540	20 2c 21	               jsr  push
.1543	a2 7e		               ldx  #<blankmsg
.1545	a0 19		               ldy  #>blankmsg
.1547	20 c4 20	               jsr  putscxy
.154a	a2 61		               ldx  #<f5a_msg
.154c	a0 1a		               ldy  #>f5a_msg
.154e	20 c4 20	               jsr  putscxy
.1551	20 6b 21	               jsr  pop
.1554	08		               php
.1555	48		               pha
.1556	8a		               txa
.1557	48		               pha
.1558	ad a0 1e	               lda  f5abutton
.155b	48		               pha
.155c	a9 92		               lda  #146
.155e	8d b2 1e	               sta  f5abutton+18
.1561	a9 01		               lda  #flashcol
.1563	8d a0 1e	               sta  f5abutton
.1566	a2 a0		               ldx  #<f5abutton
.1568	a0 1e		               ldy  #>f5abutton
.156a	20 c4 20	               jsr  putscxy
.156d	20 e1 11	               jsr  delay
.1570	a9 12		               lda  #18
.1572	8d b2 1e	               sta  f5abutton+18
.1575	68		               pla
.1576	8d a0 1e	               sta  f5abutton
.1579	a2 a0		               ldx  #<f5abutton
.157b	a0 1e		               ldy  #>f5abutton
.157d	20 c4 20	               jsr  putscxy
.1580	68		               pla
.1581	aa		               tax
.1582	68		               pla
.1583	28		               plp
.1584	20 fb 18	               jsr  clearchar
.1587	20 fd 0e	               jsr  drawbitmap
.158a	4c d7 15	               jmp  out
.158d			menub
.158d	20 2c 21	               jsr  push
.1590	a2 7e		               ldx  #<blankmsg
.1592	a0 19		               ldy  #>blankmsg
.1594	20 c4 20	               jsr  putscxy
.1597	a2 2a		               ldx  #<f5b_msg
.1599	a0 1b		               ldy  #>f5b_msg
.159b	20 c4 20	               jsr  putscxy
.159e	20 6b 21	               jsr  pop
.15a1	08		               php
.15a2	48		               pha
.15a3	8a		               txa
.15a4	48		               pha
.15a5	ad 78 1f	               lda  f5bbutton
.15a8	48		               pha
.15a9	a9 92		               lda  #146
.15ab	8d 8a 1f	               sta  f5bbutton+18
.15ae	a9 01		               lda  #flashcol
.15b0	8d 78 1f	               sta  f5bbutton
.15b3	a2 78		               ldx  #<f5bbutton
.15b5	a0 1f		               ldy  #>f5bbutton
.15b7	20 c4 20	               jsr  putscxy
.15ba	20 e1 11	               jsr  delay
.15bd	a9 12		               lda  #18
.15bf	8d 8a 1f	               sta  f5bbutton+18
.15c2	68		               pla
.15c3	8d 78 1f	               sta  f5bbutton
.15c6	a2 78		               ldx  #<f5bbutton
.15c8	a0 1f		               ldy  #>f5bbutton
.15ca	20 c4 20	               jsr  putscxy
.15cd	68		               pla
.15ce	aa		               tax
.15cf	68		               pla
.15d0	28		               plp
.15d1	20 36 18	               jsr  scrollup
.15d4	20 fd 0e	               jsr  drawbitmap
.15d7	68		out            pla
.15d8	20 2c 21	               jsr  push
.15db	a2 7e		               ldx  #<blankmsg
.15dd	a0 19		               ldy  #>blankmsg
.15df	20 c4 20	               jsr  putscxy
.15e2	a2 aa		               ldx  #<prompt_msg
.15e4	a0 19		               ldy  #>prompt_msg
.15e6	20 c4 20	               jsr  putscxy
.15e9	20 6b 21	               jsr  pop
.15ec	60		               rts
.15ed			f6action
.15ed	48		               pha
.15ee	a9 00		               lda  #$0
.15f0	8d 1c 09	               sta  editmode
.15f3	ad 1d 09	               lda  fkeyset
.15f6	d0 4d		               bne  menub
.15f8	20 2c 21	               jsr  push
.15fb	a2 7e		               ldx  #<blankmsg
.15fd	a0 19		               ldy  #>blankmsg
.15ff	20 c4 20	               jsr  putscxy
.1602	a2 7d		               ldx  #<f6a_msg
.1604	a0 1a		               ldy  #>f6a_msg
.1606	20 c4 20	               jsr  putscxy
.1609	20 6b 21	               jsr  pop
.160c	08		               php
.160d	48		               pha
.160e	8a		               txa
.160f	48		               pha
.1610	ad bb 1e	               lda  f6abutton
.1613	48		               pha
.1614	a9 92		               lda  #146
.1616	8d cd 1e	               sta  f6abutton+18
.1619	a9 01		               lda  #flashcol
.161b	8d bb 1e	               sta  f6abutton
.161e	a2 bb		               ldx  #<f6abutton
.1620	a0 1e		               ldy  #>f6abutton
.1622	20 c4 20	               jsr  putscxy
.1625	20 e1 11	               jsr  delay
.1628	a9 12		               lda  #18
.162a	8d cd 1e	               sta  f6abutton+18
.162d	68		               pla
.162e	8d bb 1e	               sta  f6abutton
.1631	a2 bb		               ldx  #<f6abutton
.1633	a0 1e		               ldy  #>f6abutton
.1635	20 c4 20	               jsr  putscxy
.1638	68		               pla
.1639	aa		               tax
.163a	68		               pla
.163b	28		               plp
.163c	20 ef 18	               jsr  fillchar
.163f	20 fd 0e	               jsr  drawbitmap
.1642	4c 8f 16	               jmp  out
.1645			menub
.1645	20 2c 21	               jsr  push
.1648	a2 7e		               ldx  #<blankmsg
.164a	a0 19		               ldy  #>blankmsg
.164c	20 c4 20	               jsr  putscxy
.164f	a2 44		               ldx  #<f6b_msg
.1651	a0 1b		               ldy  #>f6b_msg
.1653	20 c4 20	               jsr  putscxy
.1656	20 6b 21	               jsr  pop
.1659	08		               php
.165a	48		               pha
.165b	8a		               txa
.165c	48		               pha
.165d	ad 93 1f	               lda  f6bbutton
.1660	48		               pha
.1661	a9 92		               lda  #146
.1663	8d a5 1f	               sta  f6bbutton+18
.1666	a9 01		               lda  #flashcol
.1668	8d 93 1f	               sta  f6bbutton
.166b	a2 93		               ldx  #<f6bbutton
.166d	a0 1f		               ldy  #>f6bbutton
.166f	20 c4 20	               jsr  putscxy
.1672	20 e1 11	               jsr  delay
.1675	a9 12		               lda  #18
.1677	8d a5 1f	               sta  f6bbutton+18
.167a	68		               pla
.167b	8d 93 1f	               sta  f6bbutton
.167e	a2 93		               ldx  #<f6bbutton
.1680	a0 1f		               ldy  #>f6bbutton
.1682	20 c4 20	               jsr  putscxy
.1685	68		               pla
.1686	aa		               tax
.1687	68		               pla
.1688	28		               plp
.1689	20 6e 18	               jsr  scrolldown
.168c	20 fd 0e	               jsr  drawbitmap
.168f	68		out            pla
.1690	20 2c 21	               jsr  push
.1693	a2 7e		               ldx  #<blankmsg
.1695	a0 19		               ldy  #>blankmsg
.1697	20 c4 20	               jsr  putscxy
.169a	a2 aa		               ldx  #<prompt_msg
.169c	a0 19		               ldy  #>prompt_msg
.169e	20 c4 20	               jsr  putscxy
.16a1	20 6b 21	               jsr  pop
.16a4	60		               rts
.16a5			f7action
.16a5	48		               pha
.16a6	a9 00		               lda  #$0
.16a8	8d 1c 09	               sta  editmode
.16ab	ad 1d 09	               lda  fkeyset
.16ae	d0 4d		               bne  menub
.16b0	20 2c 21	               jsr  push
.16b3	a2 7e		               ldx  #<blankmsg
.16b5	a0 19		               ldy  #>blankmsg
.16b7	20 c4 20	               jsr  putscxy
.16ba	a2 9a		               ldx  #<f7a_msg
.16bc	a0 1a		               ldy  #>f7a_msg
.16be	20 c4 20	               jsr  putscxy
.16c1	20 6b 21	               jsr  pop
.16c4	08		               php
.16c5	48		               pha
.16c6	8a		               txa
.16c7	48		               pha
.16c8	ad d6 1e	               lda  f7abutton
.16cb	48		               pha
.16cc	a9 92		               lda  #146
.16ce	8d e8 1e	               sta  f7abutton+18
.16d1	a9 01		               lda  #flashcol
.16d3	8d d6 1e	               sta  f7abutton
.16d6	a2 d6		               ldx  #<f7abutton
.16d8	a0 1e		               ldy  #>f7abutton
.16da	20 c4 20	               jsr  putscxy
.16dd	20 e1 11	               jsr  delay
.16e0	a9 12		               lda  #18
.16e2	8d e8 1e	               sta  f7abutton+18
.16e5	68		               pla
.16e6	8d d6 1e	               sta  f7abutton
.16e9	a2 d6		               ldx  #<f7abutton
.16eb	a0 1e		               ldy  #>f7abutton
.16ed	20 c4 20	               jsr  putscxy
.16f0	68		               pla
.16f1	aa		               tax
.16f2	68		               pla
.16f3	28		               plp
.16f4	20 d0 0f	               jsr  copycharset
.16f7	20 fd 0e	               jsr  drawbitmap
.16fa	4c 4c 17	               jmp  out
.16fd	a9 00		menub          lda  #$0
.16ff	8d 1c 09	               sta  editmode
.1702	20 2c 21	               jsr  push
.1705	a2 7e		               ldx  #<blankmsg
.1707	a0 19		               ldy  #>blankmsg
.1709	20 c4 20	               jsr  putscxy
.170c	a2 5d		               ldx  #<f7b_msg
.170e	a0 1b		               ldy  #>f7b_msg
.1710	20 c4 20	               jsr  putscxy
.1713	20 6b 21	               jsr  pop
.1716	08		               php
.1717	48		               pha
.1718	8a		               txa
.1719	48		               pha
.171a	ad ae 1f	               lda  f7bbutton
.171d	48		               pha
.171e	a9 92		               lda  #146
.1720	8d c0 1f	               sta  f7bbutton+18
.1723	a9 01		               lda  #flashcol
.1725	8d ae 1f	               sta  f7bbutton
.1728	a2 ae		               ldx  #<f7bbutton
.172a	a0 1f		               ldy  #>f7bbutton
.172c	20 c4 20	               jsr  putscxy
.172f	20 e1 11	               jsr  delay
.1732	a9 12		               lda  #18
.1734	8d c0 1f	               sta  f7bbutton+18
.1737	68		               pla
.1738	8d ae 1f	               sta  f7bbutton
.173b	a2 ae		               ldx  #<f7bbutton
.173d	a0 1f		               ldy  #>f7bbutton
.173f	20 c4 20	               jsr  putscxy
.1742	68		               pla
.1743	aa		               tax
.1744	68		               pla
.1745	28		               plp
.1746	20 16 18	               jsr  reverse
.1749	20 fd 0e	               jsr  drawbitmap
.174c	68		out            pla
.174d	20 2c 21	               jsr  push
.1750	a2 7e		               ldx  #<blankmsg
.1752	a0 19		               ldy  #>blankmsg
.1754	20 c4 20	               jsr  putscxy
.1757	a2 aa		               ldx  #<prompt_msg
.1759	a0 19		               ldy  #>prompt_msg
.175b	20 c4 20	               jsr  putscxy
.175e	20 6b 21	               jsr  pop
.1761	60		               rts
.1762			f8action
.1762	48		               pha
.1763	a9 00		               lda  #$0
.1765	8d 1c 09	               sta  editmode
.1768	ad 1d 09	               lda  fkeyset
.176b	d0 47		               bne  menub
.176d	20 2c 21	               jsr  push
.1770	a2 7e		               ldx  #<blankmsg
.1772	a0 19		               ldy  #>blankmsg
.1774	20 c4 20	               jsr  putscxy
.1777	a2 99		               ldx  #<menub_msg
.1779	a0 1b		               ldy  #>menub_msg
.177b	20 c4 20	               jsr  putscxy
.177e	20 6b 21	               jsr  pop
.1781	08		               php
.1782	48		               pha
.1783	8a		               txa
.1784	48		               pha
.1785	ad f1 1e	               lda  f8abutton
.1788	48		               pha
.1789	a9 92		               lda  #146
.178b	8d 03 1f	               sta  f8abutton+18
.178e	a9 01		               lda  #flashcol
.1790	8d f1 1e	               sta  f8abutton
.1793	a2 f1		               ldx  #<f8abutton
.1795	a0 1e		               ldy  #>f8abutton
.1797	20 c4 20	               jsr  putscxy
.179a	20 e1 11	               jsr  delay
.179d	a9 12		               lda  #18
.179f	8d 03 1f	               sta  f8abutton+18
.17a2	68		               pla
.17a3	8d f1 1e	               sta  f8abutton
.17a6	a2 f1		               ldx  #<f8abutton
.17a8	a0 1e		               ldy  #>f8abutton
.17aa	20 c4 20	               jsr  putscxy
.17ad	68		               pla
.17ae	aa		               tax
.17af	68		               pla
.17b0	28		               plp
.17b1	4c f8 17	               jmp  swapit
.17b4			menub
.17b4	20 2c 21	               jsr  push
.17b7	a2 7e		               ldx  #<blankmsg
.17b9	a0 19		               ldy  #>blankmsg
.17bb	20 c4 20	               jsr  putscxy
.17be	a2 74		               ldx  #<menua_msg
.17c0	a0 1b		               ldy  #>menua_msg
.17c2	20 c4 20	               jsr  putscxy
.17c5	20 6b 21	               jsr  pop
.17c8	08		               php
.17c9	48		               pha
.17ca	8a		               txa
.17cb	48		               pha
.17cc	ad c9 1f	               lda  f8bbutton
.17cf	48		               pha
.17d0	a9 92		               lda  #146
.17d2	8d db 1f	               sta  f8bbutton+18
.17d5	a9 01		               lda  #flashcol
.17d7	8d c9 1f	               sta  f8bbutton
.17da	a2 c9		               ldx  #<f8bbutton
.17dc	a0 1f		               ldy  #>f8bbutton
.17de	20 c4 20	               jsr  putscxy
.17e1	20 e1 11	               jsr  delay
.17e4	a9 12		               lda  #18
.17e6	8d db 1f	               sta  f8bbutton+18
.17e9	68		               pla
.17ea	8d c9 1f	               sta  f8bbutton
.17ed	a2 c9		               ldx  #<f8bbutton
.17ef	a0 1f		               ldy  #>f8bbutton
.17f1	20 c4 20	               jsr  putscxy
.17f4	68		               pla
.17f5	aa		               tax
.17f6	68		               pla
.17f7	28		               plp
.17f8	49 ff		swapit         eor  #$ff
.17fa	8d 1d 09	               sta  fkeyset
.17fd	20 67 10	               jsr  drawfkeys
.1800	68		               pla
.1801	20 2c 21	               jsr  push
.1804	a2 7e		               ldx  #<blankmsg
.1806	a0 19		               ldy  #>blankmsg
.1808	20 c4 20	               jsr  putscxy
.180b	a2 aa		               ldx  #<prompt_msg
.180d	a0 19		               ldy  #>prompt_msg
.180f	20 c4 20	               jsr  putscxy
.1812	20 6b 21	               jsr  pop
.1815	60		               rts
.1816			reverse
.1816	20 2c 21	               jsr  push
.1819	48		               pha
.181a	ad 22 09	               lda  mapaddr
.181d	85 fd		               sta  $fd
.181f	ad 23 09	               lda  mapaddr+1
.1822	85 fe		               sta  $fe
.1824	68		               pla
.1825	a0 00		               ldy  #$00
.1827	b1 fd		again          lda  (zpage2),y
.1829	49 ff		               eor  #$ff
.182b	91 fd		               sta  (zpage2),y
.182d	c8		               iny
.182e	c0 08		               cpy  #$08
.1830	d0 f5		               bne  again
.1832	20 6b 21	               jsr  pop
.1835	60		               rts
.1836			scrollup
.1836	20 2c 21	               jsr  push
.1839	48		               pha
.183a	ad 22 09	               lda  mapaddr
.183d	85 fb		               sta  $fb
.183f	ad 23 09	               lda  mapaddr+1
.1842	85 fc		               sta  $fc
.1844	68		               pla
.1845	48		               pha
.1846	ad 22 09	               lda  mapaddr
.1849	85 fd		               sta  $fd
.184b	ad 23 09	               lda  mapaddr+1
.184e	85 fe		               sta  $fe
.1850	68		               pla
.1851	20 4b 22	               jsr  inczp2
.1854	a0 00		               ldy  #$00
.1856	b1 fb		               lda  (zpage1),y
.1858	8d 6d 18	               sta  tmpbyte
.185b	b1 fd		again          lda  (zpage2),y
.185d	91 fb		               sta  (zpage1),y
.185f	c8		               iny
.1860	c0 07		               cpy  #$07
.1862	d0 f7		               bne  again
.1864	ad 6d 18	               lda  tmpbyte
.1867	91 fb		               sta  (zpage1),y
.1869	20 6b 21	               jsr  pop
.186c	60		               rts
>186d	00		tmpbyte        .byte     $00
.186e			scrolldown
.186e	20 2c 21	               jsr  push
.1871	48		               pha
.1872	ad 22 09	               lda  mapaddr
.1875	85 fb		               sta  $fb
.1877	ad 23 09	               lda  mapaddr+1
.187a	85 fc		               sta  $fc
.187c	68		               pla
.187d	48		               pha
.187e	ad 22 09	               lda  mapaddr
.1881	85 fd		               sta  $fd
.1883	ad 23 09	               lda  mapaddr+1
.1886	85 fe		               sta  $fe
.1888	68		               pla
.1889	20 4b 22	               jsr  inczp2
.188c	a0 07		               ldy  #$07                ;xxxxxxxx zpage1
.188e	b1 fb		               lda  (zpage1),y          ;xxxxxxxx zpage2
.1890	8d a7 18	               sta  tmpbyte             ;xxxxxxxx
.1893	88		again          dey                      ;xxxxxxxx
.1894	b1 fb		               lda  (zpage1),y          ;xxxxxxxx
.1896	91 fd		               sta  (zpage2),y          ;xxxxxxxx
.1898	c0 00		               cpy  #$00                ;xxxxxxxx
.189a	d0 f7		               bne  again               ;xxxxxxxx
.189c	a0 00		               ldy  #$00
.189e	ad a7 18	               lda  tmpbyte
.18a1	91 fb		               sta  (zpage1),y
.18a3	20 6b 21	               jsr  pop
.18a6	60		               rts
>18a7	00		tmpbyte        .byte     $00
.18a8			scrollright
.18a8	20 2c 21	               jsr  push
.18ab	48		               pha
.18ac	ad 22 09	               lda  mapaddr
.18af	85 fb		               sta  $fb
.18b1	ad 23 09	               lda  mapaddr+1
.18b4	85 fc		               sta  $fc
.18b6	68		               pla
.18b7	a0 00		               ldy  #$00
.18b9	b1 fb		again          lda  (zpage1),y
.18bb	18		               clc
.18bc	6a		               ror
.18bd	90 03		               bcc  zero
.18bf	18		               clc
.18c0	69 80		one            adc  #$80
.18c2	91 fb		zero           sta  (zpage1),y
.18c4	c8		               iny
.18c5	c0 08		               cpy  #$08
.18c7	d0 f0		               bne  again
.18c9	20 6b 21	               jsr  pop
.18cc	60		               rts
.18cd			scrollleft
.18cd	20 2c 21	               jsr  push
.18d0	48		               pha
.18d1	ad 22 09	               lda  mapaddr
.18d4	85 fb		               sta  $fb
.18d6	ad 23 09	               lda  mapaddr+1
.18d9	85 fc		               sta  $fc
.18db	68		               pla
.18dc	a0 00		               ldy  #$00
.18de	b1 fb		again          lda  (zpage1),y
.18e0	18		               clc
.18e1	2a		               rol
.18e2	69 00		               adc  #$00
.18e4	91 fb		               sta  (zpage1),y
.18e6	c8		               iny
.18e7	c0 08		               cpy  #$08
.18e9	d0 f3		               bne  again
.18eb	20 6b 21	               jsr  pop
.18ee	60		               rts
.18ef			fillchar
.18ef	20 2c 21	               jsr  push
.18f2	a9 ff		               lda  #$ff
.18f4	20 07 19	               jsr  allsame
.18f7	20 6b 21	               jsr  pop
.18fa	60		               rts
.18fb			clearchar
.18fb	20 2c 21	               jsr  push
.18fe	a9 00		               lda  #$00
.1900	20 07 19	               jsr  allsame
.1903	20 6b 21	               jsr  pop
.1906	60		               rts
.1907			allsame
.1907	48		               pha
.1908	ad 22 09	               lda  mapaddr
.190b	85 fd		               sta  $fd
.190d	ad 23 09	               lda  mapaddr+1
.1910	85 fe		               sta  $fe
.1912	68		               pla
.1913	a0 00		               ldy  #$00
.1915	91 fd		again          sta  (zpage2),y
.1917	c8		               iny
.1918	c0 08		               cpy  #$08
.191a	d0 f9		               bne  again
.191c	60		               rts
.191d			fliphorz
.191d	20 2c 21	               jsr  push
.1920	48		               pha
.1921	ad 22 09	               lda  mapaddr
.1924	85 fd		               sta  $fd
.1926	ad 23 09	               lda  mapaddr+1
.1929	85 fe		               sta  $fe
.192b	68		               pla
.192c	a0 00		               ldy  #$00
.192e	b1 fd		nextbyte       lda  (zpage2),y
.1930	a2 00		               ldx  #$00
.1932	2a		rolagain       rol
.1933	6e 49 19	               ror  tmpbyte
.1936	e8		               inx
.1937	e0 08		               cpx  #$08
.1939	30 f7		               bmi  rolagain
.193b	ad 49 19	               lda  tmpbyte
.193e	91 fd		               sta  (zpage2),y
.1940	c8		               iny
.1941	c0 08		               cpy  #$08
.1943	30 e9		               bmi  nextbyte
.1945	20 6b 21	               jsr  pop
.1948	60		               rts
>1949	00		tmpbyte        .byte     $00
.194a			flipvert
.194a	20 2c 21	               jsr  push
.194d	48		               pha
.194e	ad 22 09	               lda  mapaddr
.1951	85 fd		               sta  $fd
.1953	ad 23 09	               lda  mapaddr+1
.1956	85 fe		               sta  $fe
.1958	68		               pla
.1959	a0 00		               ldy  #$00
.195b	b1 fd		tostack        lda  (zpage2),y
.195d	48		               pha
.195e	c8		               iny
.195f	c0 08		               cpy  #$08
.1961	d0 f8		               bne  tostack
.1963	a0 00		               ldy  #$00
.1965	68		fromstack      pla
.1966	91 fd		               sta  (zpage2),y
.1968	c8		               iny
.1969	c0 08		               cpy  #$08
.196b	d0 f8		               bne  fromstack
.196d	20 6b 21	               jsr  pop
.1970	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: messages_fr.asm

>1971	0a 01 05	editor_msg     .byte vrose,1,5
>1974	5b 45 44 49	               .null     "[editeur]"
>1978	54 45 55 52 5d 00
>197e	03 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>1982	20 20 20 20	               .null     "                                       "
>1986	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1996	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>19a6	20 20 20 00
>19aa	03 00 05 92	prompt_msg     .byte     mesgcol,0,5,146
>19ae	20 55 54 49	               .null     " utilisez les clefs de fonction :"
>19b2	4c 49 53 45 5a 20 4c 45 53 20 43 4c 45 46 53 20
>19c2	44 45 20 46 4f 4e 43 54 49 4f 4e 20 3a 00
.19d0			f1a_msg
>19d0	03 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>19d4	20 4d 4f 44	               .null     " mode edit: chr$(   )",146
>19d8	45 20 45 44 49 54 3a 20 43 48 52 24 28 20 20 20
>19e8	29 92 00
.19eb			f2a_msg
>19eb	03 00 05	copy_msg       .byte     mesgcol,0,5
>19ee	20 45 4e 54	               .null     " entez le character a copier:"
>19f2	45 5a 20 4c 45 20 43 48 41 52 41 43 54 45 52 20
>1a02	41 20 43 4f 50 49 45 52 3a 00
.1a0c			f3a_msg
>1a0c	03 00 05 92	save_msg       .byte     mesgcol,0,5,146
>1a10	20 53 41 55	               .null     " sauvegarder sur quel lecteur? (1/8/9): "
>1a14	56 45 47 41 52 44 45 52 20 53 55 52 20 51 55 45
>1a24	4c 20 4c 45 43 54 45 55 52 3f 20 28 31 2f 38 2f
>1a34	39 29 3a 20 00
.1a39			f4a_msg
>1a39	03 00 05 92	load_msg       .byte     mesgcol,0,5,146
>1a3d	20 43 48 41	               .null     " charger de quel lecteur? (1,8,9): "
>1a41	52 47 45 52 20 44 45 20 51 55 45 4c 20 4c 45 43
>1a51	54 45 55 52 3f 20 28 31 2c 38 2c 39 29 3a 20 00
.1a61			f5a_msg
>1a61	03 00 05	clear_msg      .byte     mesgcol,0,5
>1a64	20 45 46 46	               .null     " effacer char: chr$(   )"
>1a68	41 43 45 52 20 43 48 41 52 3a 20 43 48 52 24 28
>1a78	20 20 20 29 00
.1a7d			f6a_msg
>1a7d	03 00 05	fill_msg       .byte     mesgcol,0,5
>1a80	20 52 45 4d	               .null     " remplir char:  chr$(   )"
>1a84	50 4c 49 52 20 43 48 41 52 3a 20 20 43 48 52 24
>1a94	28 20 20 20 29 00
.1a9a			f7a_msg
>1a9a	03 00 05	work_msg       .byte     mesgcol,0,5
>1a9d	20 52 45 43	               .null     " recuperer les caracteres."
>1aa1	55 50 45 52 45 52 20 4c 45 53 20 43 41 52 41 43
>1ab1	54 45 52 45 53 2e 00
.1ab8			f1b_msg
>1ab8	03 00 05	invr_msg       .byte     mesgcol,0,5
>1abb	20 42 41 53	               .null     " basculer verticalement:"
>1abf	43 55 4c 45 52 20 56 45 52 54 49 43 41 4c 45 4d
>1acf	45 4e 54 3a 00
.1ad4			f2b_msg
>1ad4	03 00 05	flip_msg       .byte     mesgcol,0,5
>1ad7	20 42 41 53	               .null     " basculer horizontalement:"
>1adb	43 55 4c 45 52 20 48 4f 52 49 5a 4f 4e 54 41 4c
>1aeb	45 4d 45 4e 54 3a 00
.1af2			f3b_msg
>1af2	03 00 05	scrollr_msg    .byte     mesgcol,0,5
>1af5	20 44 45 46	               .null     " defiler vers la droite:"
>1af9	49 4c 45 52 20 56 45 52 53 20 4c 41 20 44 52 4f
>1b09	49 54 45 3a 00
.1b0e			f4b_msg
>1b0e	03 00 05	scrolll_msg    .byte     mesgcol,0,5
>1b11	20 44 45 46	               .null     " defiler vers la gauche:"
>1b15	49 4c 45 52 20 56 45 52 53 20 4c 41 20 47 41 55
>1b25	43 48 45 3a 00
.1b2a			f5b_msg
>1b2a	03 00 05	scrollu_msg    .byte     mesgcol,0,5
>1b2d	20 44 45 46	               .null     " defiler vers le haut:"
>1b31	49 4c 45 52 20 56 45 52 53 20 4c 45 20 48 41 55
>1b41	54 3a 00
.1b44			f6b_msg
>1b44	03 00 05	scrolld_msg    .byte     mesgcol,0,5
>1b47	20 44 45 46	               .null     " defiler vers le bas:"
>1b4b	49 4c 45 52 20 56 45 52 53 20 4c 45 20 42 41 53
>1b5b	3a 00
.1b5d			f7b_msg
>1b5d	03 00 05	rvrs_msg       .byte     mesgcol,0,5
>1b60	20 52 45 56	               .null     " reverse character:"
>1b64	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
>1b74	03 00 05	menua_msg      .byte     mesgcol,0,5
>1b77	20 56 4f 55	               .null     " vous etes dirige vers le menu 1."
>1b7b	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1b8b	52 53 20 4c 45 20 4d 45 4e 55 20 31 2e 00
>1b99	03 00 05	menub_msg      .byte     mesgcol,0,5
>1b9c	20 56 4f 55	               .null     " vous etes dirige vers le menu 2."
>1ba0	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1bb0	52 53 20 4c 45 20 4d 45 4e 55 20 32 2e 00
>1bbe	07 00 05	copychar_msg   .byte     vjaune,0,5
>1bc1	20 45 4e 54	               .null     " entrez le caractera a copier (?).",157,157,157
>1bc5	52 45 5a 20 4c 45 20 43 41 52 41 43 54 45 52 41
>1bd5	20 41 20 43 4f 50 49 45 52 20 28 3f 29 2e 9d 9d
>1be5	9d 00
>1be7	07 00 05	fname_msg      .byte     vjaune,0,5
>1bea	20 4e 4f 4d	               .null     " nom du fichier (6 lettres): ",$a4,$a4,$a4,$a4,$a4,$a4,".chr",157,157,157,157,157,157,157,157,157,157
>1bee	20 44 55 20 46 49 43 48 49 45 52 20 28 36 20 4c
>1bfe	45 54 54 52 45 53 29 3a 20 a4 a4 a4 a4 a4 a4 2e
>1c0e	43 48 52 9d 9d 9d 9d 9d 9d 9d 9d 9d 9d 00
>1c1c	0e 15 18 12	quit_msg       .byte     vblue1,21,24,18
>1c20	43 54 52 4c	               .text     "ctrl-x",146
>1c24	2d 58 92
>1c27	2d 51 55 49	               .null     "-quitter."
>1c2b	54 54 45 52 2e 00
.1c31			menu_msg
>1c31	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>1c35	43 54 52 4c	               .text     "ctrl-x",146
>1c39	2d 58 92
>1c3c	20 41 55 20	               .null     " au menu."
>1c40	4d 45 4e 55 2e 00
>1c46	07 04 06 12	whoami0        .byte     whoamicol,4,6,18
>1c4a	20 20 20 20	               .null     "                               ",146
>1c4e	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1c5e	20 20 20 20 20 20 20 20 20 20 20 92 00
>1c6b	07 04 07 12	whoami1        .byte     whoamicol,4,7,18
>1c6f	20 20 20 20	               .null     "       ",146," c h a r e d i t ",18,"       ",146
>1c73	20 20 20 92 20 43 20 48 20 41 20 52 20 45 20 44
>1c83	20 49 20 54 20 12 20 20 20 20 20 20 20 92 00
>1c92	07 04 08 12	whoami2        .byte     whoamicol,4,8,18
>1c96	20 20 20 20	               .null     "                               ",146
>1c9a	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1caa	20 20 20 20 20 20 20 20 20 20 20 92 00
>1cb7	07 04 09 12	whoami3        .byte     whoamicol,4,9,18
>1cbb	20 20 20 20	               .null     "    inspire de john heilborn   ",146
>1cbf	49 4e 53 50 49 52 45 20 44 45 20 4a 4f 48 4e 20
>1ccf	48 45 49 4c 42 4f 52 4e 20 20 20 92 00
>1cdc	07 04 0a 12	whoami4        .byte     whoamicol,4,10,18
>1ce0	20 20 20 20	               .null     "      isbn: 0-942386-29-9      ",146
>1ce4	20 20 49 53 42 4e 3a 20 30 2d 39 34 32 33 38 36
>1cf4	2d 32 39 2d 39 20 20 20 20 20 20 92 00
>1d01	07 04 0b 12	whoami5        .byte     whoamicol,4,11,18
>1d05	20 20 20 20	               .null     "                               ",146
>1d09	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1d19	20 20 20 20 20 20 20 20 20 20 20 92 00
>1d26	07 04 0c 12	whoami6        .byte     whoamicol,4,12,18
>1d2a	20 20 20 20	               .null     "     code en assembleur par    ",146
>1d2e	20 43 4f 44 45 20 45 4e 20 41 53 53 45 4d 42 4c
>1d3e	45 55 52 20 50 41 52 20 20 20 20 92 00
>1d4b	07 04 0d 12	whoami7        .byte     whoamicol,4,13,18
>1d4f	20 44 41 4e	               .null     " daniel lafrance quebec/canada ",146
>1d53	49 45 4c 20 4c 41 46 52 41 4e 43 45 20 51 55 45
>1d63	42 45 43 2f 43 41 4e 41 44 41 20 92 00
>1d70	07 04 0e 12	whoami8        .byte     whoamicol,4,14,18
>1d74	20 20 20 20	               .null     "    version:",version,"    ",146
>1d78	56 45 52 53 49 4f 4e 3a 32 30 32 33 31 31 31 36
>1d88	2d 31 30 30 34 30 30 20 20 20 20 92 00
>1d95	07 04 0f 12	whoami9        .byte     whoamicol,4,15,18
>1d99	20 20 20 20	               .null     "                               ",146
>1d9d	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1dad	20 20 20 20 20 20 20 20 20 20 20 92 00
>1dba	03 06 10 14	bye_msg        .byte     vcyan,6,16,20
>1dbe	20 20 20 20	               .null     "      bonjour et merci      ",146
>1dc2	20 20 42 4f 4e 4a 4f 55 52 20 45 54 20 4d 45 52
>1dd2	43 49 20 20 20 20 20 20 92 00
>1ddc	0d 05 18 12	any_msg        .byte     vvert1,5,24,18
>1de0	20 41 50 50	               .null     " appuyez une cle pour basic ",146
>1de4	55 59 45 5a 20 55 4e 45 20 43 4c 45 20 50 4f 55
>1df4	52 20 42 41 53 49 43 20 92 00
>1dfe	03 12 07	titremenu1     .byte     menu1col1,fkeyleft,f1top-2       ;133
>1e01	12 20 4a 45	               .null     18," jeu de fonctions #1 ",146
>1e05	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>1e15	31 20 92 00
>1e19	0f 12 07	titremenu2     .byte     menu2col1,fkeyleft,f1top-2       ;133
>1e1c	12 20 4a 45	               .null     18," jeu de fonctions #2 ",146
>1e20	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>1e30	32 20 92 00
>1e34	03 12 09	f1abutton      .byte     menu1col1,fkeyleft,f1top       ;133
>1e37	45 44 49 54	               .text     "editer carac..."
>1e3b	45 52 20 43 41 52 41 43 2e 2e 2e
>1e46	12		               .byte     18             ; position 15
>1e47	a9 20 46 31	               .null     $a9," f1 ",223,146
>1e4b	20 df 92 00
>1e4f	0e 12 0a	f2abutton      .byte     menu1col2,fkeyleft,f1top+1     ;138
>1e52	43 4f 50 49	               .text     "copier un carac"
>1e56	45 52 20 55 4e 20 43 41 52 41 43
>1e61	12		               .byte     18   ; position 15
>1e62	20 20 46 32	               .null     "  f2  ",146
>1e66	20 20 92 00
>1e6a	03 12 0c	f3abutton      .byte     menu1col1,fkeyleft,f1top+3     ;137
>1e6d	53 41 56 45	               .text     "savegarder sur."
>1e71	47 41 52 44 45 52 20 53 55 52 2e
>1e7c	12		               .byte     18            ; position 15
>1e7d	a9 20 46 33	               .null     $a9," f3 ",223,146
>1e81	20 df 92 00
>1e85	0e 12 0d	f4abutton      .byte     menu1col2,fkeyleft,f1top+4     ;134
>1e88	43 48 41 52	               .text     "charger de....."
>1e8c	47 45 52 20 44 45 2e 2e 2e 2e 2e
>1e97	12		               .byte     18             ; position 15
>1e98	20 20 46 34	               .null     "  f4  ",146
>1e9c	20 20 92 00
>1ea0	03 12 0f	f5abutton      .byte     menu1col1,fkeyleft,f1top+6     ;135
>1ea3	4d 45 54 54	               .text     "mettre tout a 0"
>1ea7	52 45 20 54 4f 55 54 20 41 20 30
>1eb2	12		               .byte     18             ; position 15
>1eb3	a9 20 46 35	               .null     $a9," f5 ",223,146
>1eb7	20 df 92 00
>1ebb	0e 12 10	f6abutton      .byte     menu1col2,fkeyleft,f1top+7    ;139
>1ebe	4d 45 54 54	               .text     "mettre tout a 1"
>1ec2	52 45 20 54 4f 55 54 20 41 20 31
>1ecd	12		               .byte     18             ; position 15
>1ece	20 20 46 36	               .null     "  f6  ",146
>1ed2	20 20 92 00
>1ed6	03 12 12	f7abutton      .byte     menu1col1,fkeyleft,f1top+9    ;136
>1ed9	52 45 43 55	               .text     "recuperer rom.."
>1edd	50 45 52 45 52 20 52 4f 4d 2e 2e
>1ee8	12		               .byte     18             ; position 15
>1ee9	a9 20 46 37	               .null     $a9," f7 ",223,146
>1eed	20 df 92 00
>1ef1	0e 12 13	f8abutton      .byte     menu1col2,fkeyleft,f1top+10
>1ef4	41 4c 4c 45	               .text     "aller au menu2."
>1ef8	52 20 41 55 20 4d 45 4e 55 32 2e
>1f03	12		               .byte     18             ; position 15
>1f04	20 20 46 38	               .null     "  f8  ", 146
>1f08	20 20 92 00
>1f0c	0f 12 09	f1bbutton      .byte     menu2col1,fkeyleft,f1top
>1f0f	42 41 53 43	               .text     "basculer vert.."
>1f13	55 4c 45 52 20 56 45 52 54 2e 2e
>1f1e	12		               .byte     18             ; position 15
>1f1f	a9 20 46 31	               .null     $a9," f1 ",223,146
>1f23	20 df 92 00
>1f27	0c 12 0a	f2bbutton      .byte     menu2col2,fkeyleft,f1top+1
>1f2a	42 41 53 43	               .text     "basculer horz.."
>1f2e	55 4c 45 52 20 48 4f 52 5a 2e 2e
>1f39	12		               .byte     18             ; position 15
>1f3a	20 20 46 32	               .null     "  f2  ",146
>1f3e	20 20 92 00
>1f42	0f 12 0c	f3bbutton      .byte     menu2col1,fkeyleft,f1top+3
>1f45	44 45 46 49	               .text     "defiler droite."
>1f49	4c 45 52 20 44 52 4f 49 54 45 2e
>1f54	12		               .byte     18             ; position 15
>1f55	a9 20 46 33	               .null     $a9," f3 ",223,146
>1f59	20 df 92 00
>1f5d	0c 12 0d	f4bbutton      .byte     menu2col2,fkeyleft,f1top+4
>1f60	44 45 46 49	               .text     "defiler gauche."
>1f64	4c 45 52 20 47 41 55 43 48 45 2e
>1f6f	12		               .byte     18             ; position 15
>1f70	20 20 46 34	               .null     "  f4  ",146
>1f74	20 20 92 00
>1f78	0f 12 0f	f5bbutton      .byte     menu2col1,fkeyleft,f1top+6
>1f7b	44 45 46 49	               .text     "defiler haut..."
>1f7f	4c 45 52 20 48 41 55 54 2e 2e 2e
>1f8a	12		               .byte     18             ; position 15
>1f8b	a9 20 46 35	               .null     $a9," f5 ",223,146
>1f8f	20 df 92 00
>1f93	0c 12 10	f6bbutton      .byte     menu2col2,fkeyleft,f1top+7
>1f96	44 45 46 49	               .text     "defiler bas...."
>1f9a	4c 45 52 20 42 41 53 2e 2e 2e 2e
>1fa5	12		               .byte     18             ; position 15
>1fa6	20 20 46 36	               .null     "  f6  ",146
>1faa	20 20 92 00
>1fae	0f 12 12	f7bbutton      .byte     menu2col1,fkeyleft,f1top+9
>1fb1	49 4e 56 45	               .text     "inverser bits.."
>1fb5	52 53 45 52 20 42 49 54 53 2e 2e
>1fc0	12		               .byte     18             ; position 15
>1fc1	a9 20 46 37	               .null     $a9," f7 ",223,146
>1fc5	20 df 92 00
>1fc9	0c 12 13	f8bbutton      .byte     menu2col2,fkeyleft,f1top+10
>1fcc	41 4c 4c 45	               .text     "aller au menu1."
>1fd0	52 20 41 55 20 4d 45 4e 55 31 2e
>1fdb	12		               .byte     18             ; position 15
>1fdc	20 20 46 38	               .null     "  f8  ", 146
>1fe0	20 20 92 00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.1fe4			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.1fe4			screendis
.1fe4	08		               php
.1fe5	48		               pha
.1fe6	ad 11 d0	               lda  $d011
.1fe9	29 ef		               and  #%11101111
.1feb	8d 11 d0	               sta  $d011
.1fee	68		               pla
.1fef	28		               plp
.1ff0	60		               rts
.1ff1			screenena
.1ff1	08		               php
.1ff2	48		               pha
.1ff3	ad 11 d0	               lda  $d011
.1ff6	09 10		               ora  #%00010000
.1ff8	8d 11 d0	               sta  $d011
.1ffb	68		               pla
.1ffc	28		               plp
.1ffd	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.1ffe			scrmaninit
.1ffe	20 2c 21	               jsr  push
.2001	a9 06		               lda  #vbleu
.2003	8d 21 d0	               sta  vicbackcol
.2006	a9 05		               lda  #vvert
.2008	8d 20 d0	               sta  vicbordcol
.200b	a9 01		               lda  #vblanc
.200d	8d 86 02	               sta  bascol
.2010	ad 00 04	               lda  scrnram
.2013	8d 00 04	               sta  scrnram
.2016	20 1e 20	               jsr  cls
.2019	20 6b 21	               jsr  pop
.201c	60		               rts
>201d	8e		characterset   .byte b_uppercase
.201e			cls
.201e	08		               php
.201f	48		               pha
.2020	a9 93		               lda  #$93
.2022	20 35 20	               jsr  putch
.2025	68		               pla
.2026	28		               plp
.2027	60		               rts
.2028			putnch
.2028	08		               php
.2029	e0 00		               cpx  #$00
.202b	f0 06		               beq  out
.202d	20 d2 ff	again          jsr  $ffd2
.2030	ca		               dex
.2031	d0 fa		               bne  again
.2033	28		out            plp
.2034	60		               rts
.2035			putch
.2035	08		               php
.2036	20 d2 ff	               jsr  $ffd2
.2039	28		               plp
.203a	60		               rts
.203b			puts
.203b	20 2c 21	               jsr  push
.203e	86 fb		               stx  zpage1
.2040	84 fc		               sty  zpage1+1
.2042	a0 00		               ldy  #0
.2044	b1 fb		next           lda  (zpage1),y
.2046	f0 09		               beq  exit
.2048	20 35 20	               jsr  putch
.204b	20 33 22	               jsr  inczp1
.204e	4c 44 20	               jmp  next
.2051	20 6b 21	exit           jsr  pop
.2054	60		               rts
.2055			gotoxy
.2055	08		               php
.2056	18		               clc
.2057	8a		               txa
.2058	48		               pha
.2059	98		               tya
.205a	aa		               tax
.205b	68		               pla
.205c	a8		               tay
.205d	20 f0 ff	               jsr  kplot
.2060	28		               plp
.2061	60		               rts
.2062			cursor
=$0286			bascol    =    $0286
.2062	08		               php
.2063	48		               pha
.2064	90 12		               bcc  restore
.2066	20 f0 ff	               jsr  kplot
.2069	8c 8a 20	               sty  cx
.206c	8e 8b 20	               stx  cy
.206f	ad 86 02	               lda  bascol
.2072	8d 8c 20	               sta  bcol
.2075	4c 87 20	               jmp  out
.2078	ae 8b 20	restore        ldx  cy
.207b	ac 8a 20	               ldy  cx
.207e	20 f0 ff	               jsr  kplot
.2081	ad 8c 20	               lda  bcol
.2084	8d 86 02	               sta  bascol
.2087	68		out            pla
.2088	28		               plp
.2089	60		               rts
>208a	00		cx   .byte     $00
>208b	00		cy   .byte     $00
>208c	00		bcol .byte     $00
.208d			cursave
.208d	08		               php
.208e	38		               sec
.208f	20 62 20	               jsr  cursor
.2092	28		               plp
.2093	60		               rts
.2094			curput
.2094	08		               php
.2095	18		               clc
.2096	20 62 20	               jsr  cursor
.2099	28		               plp
.209a	60		               rts
.209b			putsxy
.209b	20 2c 21	               jsr  push
.209e	86 fb		               stx  zpage1
.20a0	84 fc		               sty  zpage1+1
.20a2	a0 00		               ldy  #$00
.20a4	b1 fb		               lda  (zpage1),y
.20a6	aa		               tax
.20a7	20 33 22	               jsr  inczp1
.20aa	b1 fb		               lda  (zpage1),y
.20ac	a8		               tay
.20ad	20 55 20	               jsr  gotoxy
.20b0	20 33 22	               jsr  inczp1
.20b3	a6 fb		               ldx  zpage1
.20b5	a4 fc		               ldy  zpage1+1
.20b7	20 3b 20	               jsr  puts
.20ba	20 6b 21	               jsr  pop
.20bd	60		               rts
>20be	00 00		straddr   .word     $00
>20c0	00		px        .byte     $00
>20c1	00		py        .byte     $00
>20c2	00 00		zp1       .word     $00
.20c4			putscxy
.20c4	20 2c 21	               jsr  push
.20c7	84 fc		               sty  zpage1+1
.20c9	86 fb		               stx  zpage1
.20cb	ad 86 02	               lda  bascol
.20ce	8d ee 20	               sta  bc
.20d1	a0 00		               ldy #$00
.20d3	b1 fb		               lda  (zpage1),y
.20d5	8d 86 02	               sta  bascol
.20d8	20 33 22	               jsr  inczp1
.20db	a6 fb		               ldx  zpage1
.20dd	a4 fc		               ldy  zpage1+1
.20df	20 9b 20	               jsr  putsxy
.20e2	ad ee 20	               lda  bc
.20e5	8d 86 02	               sta  bascol
.20e8	20 6b 21	               jsr  pop
.20eb	60		               rts
>20ec	00 00		straddr  .word      $00
>20ee	00		bc       .byte      $00
>20ef	00 00		zp1      .word      $00
.20f1			putrahex
.20f1	08		               php
.20f2	48		               pha
.20f3	20 49 23	               jsr  a2hex
.20f6	a9 e8		               lda  #<a2hexstr
.20f8	a0 22		               ldy  #>a2hexstr
.20fa	20 3b 20	               jsr  puts
.20fd	68		               pla
.20fe	28		               plp
.20ff	60		               rts
.2100			kputrahexxy
.2100			bputrahexxy
.2100			putrahexxy
.2100	08		               php
.2101	20 49 23	               jsr  a2hex
.2104	a9 e5		               lda  #<a2hexpos
.2106	a0 22		               ldy  #>a2hexpos
.2108	20 9b 20	               jsr  putsxy
.210b	68		               pla
.210c	28		               plp
.210d	60		               rts
.210e			putrahexcxy
.210e	08		               php
.210f	20 49 23	               jsr  a2hex
.2112	a9 e5		               lda  #<a2hexpos
.2114	a0 22		               ldy  #>a2hexpos
.2116	20 c4 20	               jsr  putscxy
.2119	68		               pla
.211a	28		               plp
.211b	60		               rts
.211c			setinverse
.211c	48		               pha
.211d	a9 12		               lda  #$12
.211f	20 d2 ff	               jsr  $ffd2
.2122	68		               pla
.2123	60		               rts
.2124			clrinverse
.2124	48		               pha
.2125	a9 92		               lda  #$92
.2127	20 d2 ff	               jsr  $ffd2
.212a	68		               pla
.212b	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.212c			push
.212c	08		          php            ; stack : flg, pcl, pch
.212d	78		          sei
.212e	8d 68 21	          sta  ra        ; save a
.2131	68		          pla            ; stack : pcl, pch
.2132	8d 67 21	          sta  rp        ; save rp
.2135	68		          pla            ; stack : pch
.2136	8d 69 21	          sta  pc        ; save pcl
.2139	68		          pla            ; stack : -
.213a	8d 6a 21	          sta  pc+1      ; save pch
.213d	a5 fb		          lda  zpage1    ; get zpage1 low byte
.213f	48		          pha            ; stack : zp1l
.2140	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.2142	48		          pha            ; stack : zp1h, zp1l
.2143	a5 fd		          lda  zpage2    ; get zpage2 low byte
.2145	48		          pha            ; stack : zp2l, zp1h, zp1l
.2146	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.2148	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.2149	ad 67 21	          lda  rp        ; get rp
.214c	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.214d	ad 68 21	          lda  ra        ; get a
.2150	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.2151	8a		          txa            ; get x
.2152	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.2153	98		          tya            ; get y
.2154	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2155	ad 6a 21	          lda  pc+1      ; get pch
.2158	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2159	ad 69 21	          lda  pc        ; get pcl
.215c	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.215d	ad 67 21	          lda  rp        ; get rp
.2160	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2161	ad 68 21	          lda  ra        ; get a
.2164	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2165	58		          cli
.2166	60		          rts
>2167	00		rp        .byte     0
>2168	00		ra        .byte     0
>2169	00 00		pc        .word     0
.216b			pull
.216b			pop
.216b	78		          sei
.216c	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.216d	8d a0 21	          sta  pc        ; save pcl
.2170	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2171	8d a1 21	          sta  pc+1      ; save pch
.2174	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.2175	a8		          tay            ; set y
.2176	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.2177	aa		          tax            ; set x
.2178	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.2179	8d 9f 21	          sta  ra        ; save a
.217c	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.217d	8d 9e 21	          sta  rp        ; save rp
.2180	68		          pla            ; stack : zp2l, zp1h, zp1l
.2181	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.2183	68		          pla            ; stack : zp1h, zp1l
.2184	85 fd		          sta  zpage2    ; get zpage2 High byte
.2186	68		          pla            ; stack : zp1l
.2187	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.2189	68		          pla            ; stack :
.218a	85 fb		          sta  zpage1    ; get zpage1 High byte
.218c	ad a1 21	          lda  pc+1      ; get pch
.218f	48		          pha            ; stack : pch
.2190	ad a0 21	          lda  pc
.2193	48		          pha            ; stack : pcl, pch
.2194	ad 9e 21	          lda  rp        ; get rp
.2197	48		          pha            ; stack : rp, pcl, pch
.2198	ad 9f 21	          lda  ra        ; set ra
.219b	58		          cli
.219c	28		          plp            ; stack : pcl, pch
.219d	60		          rts
>219e	00		rp        .byte     0
>219f	00		ra        .byte     0
>21a0	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.21a2			blkfill
.21a2	20 2c 21	bf0            jsr  push
.21a5	20 63 22	               jsr  savezp1
.21a8	84 fc		               sty  zpage1+1
.21aa	a0 00		               ldy  #$00
.21ac	84 fb		               sty  zpage1
.21ae	91 fb		bf1            sta  (zpage1),y
.21b0	c8		               iny
.21b1	d0 fb		               bne  bf1
.21b3	20 72 22	               jsr  restzp1
.21b6	20 6b 21	               jsr  pop
.21b9	60		               rts
.21ba			memfill
.21ba	20 2c 21	               jsr  push
.21bd	20 a2 21	mf1            jsr  blkfill
.21c0	c8		               iny
.21c1	ca		               dex
.21c2	d0 f9		               bne  mf1
.21c4	20 6b 21	               jsr  pop
.21c7	60		               rts
.21c8			memmove
.21c8	20 2c 21	               jsr  push
.21cb	ba		               tsx            ; On se crée un pointeur ...
.21cc	8a		               txa
.21cd	18		               clc
.21ce	69 0b		               adc  #11
.21d0	a8		               tay
.21d1	a2 06		               ldx  #$06
.21d3	b9 00 01	nextbyte       lda  $0100,y
.21d6	99 22 22	               sta  words,y
.21d9	c8		               iny
.21da	ca		               dex
.21db	d0 f6		               bne  nextbyte
.21dd	ad 22 22	               lda  s
.21e0	8d f9 21	               sta  source+1
.21e3	ad 23 22	               lda  s+1
.21e6	8d fa 21	               sta  source+2
.21e9	ad 24 22	               lda  d
.21ec	8d f6 21	               sta  destin+1
.21ef	ad 25 22	               lda  d+1
.21f2	8d f7 21	               sta  destin+2
.21f5	ad ff ff	destin         lda  $ffff
.21f8	8d ff ff	source         sta  $ffff
.21fb	ee f6 21	               inc  destin+1
.21fe	d0 03		               bne  src
.2200	ee f7 21	               inc  destin+2
.2203	ee f9 21	src            inc  source+1
.2206	d0 03		               bne  cnt
.2208	ee fa 21	               inc  source+2
.220b	ad 26 22	cnt            lda  compte
.220e	d0 08		               bne  decit
.2210	ad 27 22	               lda  compte+1
.2213	f0 09		               beq  fini
.2215	ce 27 22	               dec  compte+1
.2218	ce 26 22	decit          dec  compte
.221b	4c f5 21	               jmp  destin
.221e	20 6b 21	fini           jsr  pop
.2221	60		               rts
.2222			words
>2222	00 00		s         .word     $0000
>2224	00 00		d         .word     $0000
>2226	00 00		compte    .word     $0000
.2228			decword
.2228	20 2c 21	               jsr  push
.222b	86 fd		               stx  zpage2
.222d	84 fe		               sty  zpage2+1
.222f	20 6b 21	               jsr  pop
.2232	60		               rts
.2233			inczp1
.2233	08		               php
.2234	48		               pha
.2235	e6 fb		               inc  zpage1
.2237	a5 fb		               lda  zpage1
.2239	d0 02		               bne  nopage
.223b	e6 fc		               inc  zpage1+1
.223d	68		nopage         pla
.223e	28		               plp
.223f	60		               rts
.2240			deczp1
.2240	08		                php
.2241	48		                pha
.2242	c6 fb		                dec  zpage1
.2244	d0 02		                bne  nopage
.2246	c6 fc		                dec  zpage1+1
.2248	68		nopage          pla
.2249	28		                plp
.224a	60		                rts
.224b			inczp2
.224b	08		               php
.224c	48		               pha
.224d	e6 fd		               inc  zpage2
.224f	a5 fd		               lda  zpage2
.2251	d0 02		               bne  nopage
.2253	e6 fe		               inc  zpage2+1
.2255	68		nopage         pla
.2256	28		               plp
.2257	60		               rts
.2258			deczp2
.2258	08		               php
.2259	48		               pha
.225a	a5 fd		               lda  zpage2
.225c	d0 02		               bne  nopage
.225e	c6 fe		               dec  zpage2+1
.2260	68		nopage         pla
.2261	28		               plp
.2262	60		               rts
.2263			savezp1
.2263	08		               php
.2264	48		               pha
.2265	a5 fb		               lda  zpage1
.2267	8d df 22	               sta  zp1
.226a	a5 fc		               lda  zpage1+1
.226c	8d e0 22	               sta  zp1+1
.226f	68		               pla
.2270	28		               plp
.2271	60		               rts
.2272			restzp1
.2272	08		               php
.2273	48		               pha
.2274	ad df 22	               lda zp1
.2277	85 fb		               sta zpage1
.2279	ad e0 22	               lda zp1+1
.227c	85 fc		               sta zpage1+1
.227e	68		               pla
.227f	28		               plp
.2280	60		               rts
.2281			savezp2
.2281	08		         php
.2282	48		         pha
.2283	a5 fd		         lda zpage2
.2285	8d e1 22	         sta zp2
.2288	a5 fe		         lda zpage2+1
.228a	8d e2 22	         sta zp2+1
.228d	68		         pla
.228e	28		         plp
.228f	60		         rts
.2290			restzp2
.2290	08		                php
.2291	48		                pha
.2292	ad e1 22	                lda  zp2
.2295	85 fd		                sta  zpage2
.2297	ad e2 22	                lda  zp2+1
.229a	85 fe		                sta  zpage2+1
.229c	68		                pla
.229d	28		                plp
.229e	60		                rts
.229f			xy2addr
.229f	08		                php
.22a0	48		                pha
.22a1	8a		                txa
.22a2	48		                pha
.22a3	98		                tya
.22a4	48		                pha
.22a5	ad da 22	                lda     addr1+1
.22a8	8d dc 22	                sta     addr2+1
.22ab	ad d9 22	                lda     addr1
.22ae	8d db 22	                sta     addr2
.22b1	c0 00		                cpy     #$00
.22b3	f0 0f		                beq     addx
.22b5	18		moreline        clc
.22b6	6d d8 22	                adc     ymult
.22b9	90 03		                bcc     norepy
.22bb	ee dc 22	                inc     addr2+1
.22be	8d db 22	norepy          sta     addr2
.22c1	88		                dey
.22c2	d0 f1		                bne     moreline
.22c4	8a		addx            txa
.22c5	18		                clc
.22c6	6d db 22	                adc     addr2
.22c9	90 03		                bcc     thatsit
.22cb	ee dc 22	                inc     addr2+1
.22ce	8d db 22	thatsit         sta     addr2
.22d1	68		                pla
.22d2	a8		                tay
.22d3	68		                pla
.22d4	aa		                tax
.22d5	68		                pla
.22d6	28		                plp
.22d7	60		                rts
>22d8	28		ymult          .byte     40
>22d9	00 00		addr1          .word     $0000
>22db	00 00		addr2          .word     $0000
>22dd	00 00		bytecnt        .word     $0000
>22df	00 00		zp1        .word   $0000
>22e1	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>22e3	01		a2hexcol       .byte     1              ; pour aputscxy
>22e4	00		a2hexbkcol     .byte     %00000000
.22e5			a2hexpos
>22e5	00		a2hexpx        .byte     0              ; pour aputsxy
>22e6	00		a2hexpy        .byte     0
>22e7	24		a2hexprefix    .byte     "$"            ; pour aputs
>22e8	00 00		a2hexstr       .word     $00
>22ea	00 00		               .word     $00
>22ec	00		               .byte     0              ; 0 end string
>22ed	30 30 30 30	abin           .null     "00000000"
>22f1	30 30 30 30 00
>22f6	20 20 20 00	adec           .null     "   "
.22fa			putahexfmtxy
.22fa	20 2c 21	               jsr  push
.22fd	20 49 23	               jsr  a2hex
.2300	ae e5 22	               ldx  a2hexpx
.2303	ac e6 22	               ldy  a2hexpy
.2306	20 55 20	               jsr  gotoxy
.2309	a2 e7		               ldx  #<a2hexprefix
.230b	a0 22		               ldy  #>a2hexprefix
.230d	20 3b 20	               jsr  puts
.2310	20 6b 21	               jsr  pop
.2313	60		               rts
.2314			putahexfmt
.2314	20 2c 21	               jsr  push
.2317	20 49 23	               jsr  a2hex
.231a	a2 e7		               ldx  #<a2hexprefix
.231c	a0 22		               ldy  #>a2hexprefix
.231e	20 3b 20	               jsr  puts
.2321	20 6b 21	               jsr  pop
.2324	60		               rts
.2325			putahex
.2325	20 2c 21	               jsr  push
.2328	20 49 23	               jsr  a2hex
.232b	a2 e8		               ldx  #<a2hexstr
.232d	a0 22		               ldy  #>a2hexstr
.232f	20 3b 20	               jsr  puts
.2332	20 6b 21	               jsr  pop
.2335	60		               rts
.2336			nib2hex
.2336	08		               php
.2337	29 0f		               and  #$0f
.2339	f8		               sed
.233a	18		               clc
.233b	69 90		               adc  #$90
.233d	69 40		               adc  #$40
.233f	d8		               cld
.2340	28		               plp
.2341	60		               rts
.2342			lsra4bits
.2342	08		               php
.2343	4a		               lsr
.2344	4a		               lsr
.2345	4a		               lsr
.2346	4a		               lsr
.2347	28		               plp
.2348	60		               rts
.2349			a2hex
.2349	08		               php
.234a	48		               pha
.234b	48		               pha
.234c	20 42 23	               jsr  lsra4bits
.234f	20 36 23	               jsr  nib2hex
.2352	8d e8 22	               sta  a2hexstr
.2355	68		               pla
.2356	20 36 23	               jsr  nib2hex
.2359	8d e9 22	               sta  a2hexstr+1
.235c	a9 00		               lda  #$00                ; set end of string
.235e	8d ea 22	               sta  a2hexstr+2
.2361	68		               pla
.2362	28		               plp
.2363	60		               rts
.2364			xy2hex
.2364	20 2c 21	               jsr  push
.2367	20 49 23	               jsr  a2hex
.236a	8a		               txa
.236b	48		               pha
.236c	20 42 23	               jsr  lsra4bits
.236f	20 36 23	               jsr  nib2hex
.2372	8d e8 22	               sta  a2hexstr
.2375	68		               pla
.2376	20 36 23	               jsr  nib2hex
.2379	8d e9 22	               sta  a2hexstr+1
.237c	98		               tya
.237d	48		               pha
.237e	20 42 23	               jsr  lsra4bits
.2381	20 36 23	               jsr  nib2hex
.2384	8d ea 22	               sta  a2hexstr+2
.2387	68		               pla
.2388	20 36 23	               jsr  nib2hex
.238b	8d eb 22	               sta  a2hexstr+3
.238e	a9 00		               lda  #$00                ; 0 ended string
.2390	8d ec 22	               sta  a2hexstr+4
.2393	20 6b 21	               jsr  pop
.2396			atobin
.2396	20 2c 21	               jsr  push
.2399	a2 08		               ldx  #8
.239b	a0 00		               ldy  #0
.239d	18		               clc
.239e	2a		nextbit        rol
.239f	48		               pha
.23a0	69 00		               adc  #$00
.23a2	29 01		               and  #$01
.23a4	20 36 23	               jsr  nib2hex
.23a7	99 ed 22	               sta  abin,y
.23aa	68		               pla
.23ab	c8		               iny
.23ac	ca		               dex
.23ad	d0 ef		               bne  nextbit
.23af	a9 00		               lda  #0
.23b1	99 ed 22	               sta  abin,y
.23b4	20 6b 21	               jsr  pull
.23b7	60		               rts
.23b8			putabin
.23b8	20 96 23	               jsr     atobin
.23bb	20 2c 21	               jsr     push
.23be	a2 ed		               ldx     #<abin
.23c0	a0 22		               ldy     #>abin
.23c2	20 3b 20	               jsr     puts
.23c5	20 6b 21	               jsr     pop
.23c8	60		               rts
.23c9			printabin
.23c9	20 2c 21	               jsr     push
.23cc	a2 ed		               ldx     #<abin
.23ce	a0 22		               ldy     #>abin
.23d0	20 3b 20	               jsr     puts
.23d3	20 6b 21	               jsr     pop
.23d6	60		               rts
.23d7			putabinfmt
.23d7	08		               php
.23d8	48		               pha
.23d9	a9 25		               lda     #"%"
.23db	20 35 20	               jsr     putch
.23de	68		               pla
.23df	20 b8 23	               jsr     putabin
.23e2	28		               plp
.23e3	60		               rts
.23e4			putabinxy
.23e4	20 55 20	               jsr     gotoxy
.23e7	20 b8 23	               jsr     putabin
.23ea	60		               rts
.23eb			putabinfmtxy
.23eb	20 55 20	               jsr     gotoxy
.23ee	20 d7 23	               jsr     putabinfmt
.23f1	60		               rts
.23f2			atodec
.23f2	20 2c 21	               jsr  push
.23f5	f8		               sed
.23f6	aa		               tax
.23f7	a0 00		               ldy  #$00
.23f9	a9 00		               lda  #$00
.23fb	18		nextbit        clc
.23fc	69 01		               adc  #$01
.23fe	90 01		               bcc  decx
.2400	c8		               iny
.2401	ca		decx           dex
.2402	d0 f7		               bne  nextbit
.2404	48		               pha
.2405	98		               tya
.2406	20 36 23	               jsr  nib2hex
.2409	8d f6 22	               sta  adec
.240c	68		               pla
.240d	48		               pha
.240e	20 36 23	               jsr  nib2hex
.2411	8d f8 22	               sta  adec+2
.2414	68		               pla
.2415	6a		               ror
.2416	6a		               ror
.2417	6a		               ror
.2418	6a		               ror
.2419	20 36 23	               jsr  nib2hex
.241c	8d f7 22	               sta  adec+1
.241f	d8		               cld
.2420	20 6b 21	               jsr  pull
.2423	60		               rts
>2424	00 00 00	buffer         .byte     0,0,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>2427	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>242b	00 00 00 00 00 00 00 00 00 0d 00 00
>2437	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>243b	00 00 00 00 00 00 00 00 00 00 00 00
>2447	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>244b	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>2457	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>245b	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>2467	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>246b	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>2477	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>247b	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>2487	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>248b	00 00 00 00 00 00 00 00 00 00 00 00
>2497	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>249b	00 00 00 00 00 00 00 00 00 00 00 00
>24a7	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>24ab	00 00 00 00 00 00 00 00 00 00 00 00
>24b7	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>24bb	00 00 00 00 00 00 00 00 00 00 00 00
>24c7	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>24cb	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>24d7	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>24db	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>24e7	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>24eb	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>24f7	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>24fb	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>2507	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>250b	00 00 00 00 00 00 00 00 00 00 00 00
>2517	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>251b	00 00 00 00 00 00 00 00 00 00 00 00
.2527			waitstop
.2527	20 2c 21	               jsr  push
.252a	20 ed f6	wait           jsr  k_stop
.252d	d0 fb		               bne  wait
.252f	20 6b 21	               jsr  pop
.2532	60		               rts
.2533			anykey
.2533	08		               php
.2534	48		               pha
.2535	a5 cb		nokey          lda 203
.2537	c9 40		               cmp #64
.2539	f0 fa		               beq nokey
.253b	20 41 25	               jsr releasekey
.253e	68		               pla
.253f	28		               plp
.2540	60		               rts
.2541			releasekey
.2541	08		               php
.2542	48		               pha
.2543	a5 cb		keypressed     lda 203
.2545	c9 40		               cmp #64
.2547	d0 fa		               bne keypressed
.2549	68		               pla
.254a	28		               plp
.254b	60		               rts
.254c			getkey
.254c	20 e4 ff	again          jsr  getin
.254f	c9 00		               cmp  #0
.2551	f0 f9		               beq  again
.2553	60		               rts
.2554			waitkey
.2554	20 2c 21	               jsr  push
.2557	8d a5 25	               sta  thekey
.255a	20 e4 ff	nope           jsr  getin
.255d	20 d2 ff	               jsr  chrout
.2560	cd a5 25	               cmp  thekey
.2563	d0 f5		               bne  nope
.2565	20 d2 ff	               jsr  chrout
.2568	20 6b 21	               jsr  pop
.256b	60		               rts
.256c			waitspace
.256c	20 2c 21	               jsr  push
.256f	a9 7f		wait           lda  #$7f  ;%01111111
.2571	8d 00 dc	               sta  $dc00
.2574	ad 01 dc	               lda  $dc01
.2577	29 10		               and  #$10  ;mask %00010000
.2579	d0 f4		               bne  wait
.257b	20 6b 21	               jsr  pop
.257e			waitsstop
.257e	20 2c 21	               jsr  push
.2581	20 ed f6	wait           jsr  k_stop  ;%01111111
.2584	d0 fb		               bne  wait
.2586	20 6b 21	               jsr  pop
.2589			waitreturn
.2589	20 2c 21	               jsr  push
.258c	ad a6 25	               lda  thecount
.258f	8d 00 04	               sta  scrnram
.2592	a9 02		               lda  #$02
.2594	8d 00 d8	               sta  colorram
.2597	20 e4 ff	nope           jsr  getin
.259a	c9 0d		nohex          cmp  #$0d
.259c	d0 f9		               bne  nope
.259e	ee a6 25	               inc  thecount
.25a1	20 6b 21	               jsr  pop
.25a4	60		               rts
>25a5	00		thekey         .byte   0
>25a6	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-disk.asm

.25a7			diskerror
.25a7	20 2c 21	               jsr  push
.25aa	ad d8 26	               lda  dsk_dev   ; Select device 8
.25ad	85 ba		               sta  $ba       ;
.25af	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.25b2	a9 6f		               lda  #$6f
.25b4	85 b9		               sta  $b9       ;
.25b6	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.25b9	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.25bc	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.25bf	c9 0d		               cmp  #$0d      ; Is it CR ?
.25c1	d0 f6		               bne  nextchar  ; No, get next char
.25c3	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.25c6	20 6b 21	               jsr  pop
.25c9	60		               rts
.25ca			diskdir
.25ca	20 2c 21	               jsr  push
.25cd	a9 24		               lda  #$24      ; L012C - Filename is "$"
.25cf	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.25d1	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.25d3	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.25d5	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.25d7	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.25d9	a9 01		               lda  #$01      ; L0138 - set ...
.25db	85 b7		               sta  $b7       ; L013A - ... length of current filename
.25dd	ad d8 26	               lda  dsk_dev   ; L013C - set 8 as ...
.25e0	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.25e2	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.25e4	85 b9		               sta  $b9       ; L0142 - ... secondary address
.25e6	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.25e9	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...%10111010
.25eb	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.25ee	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.25f0	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.25f3	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.25f5	85 90		               sta  $90       ; L0153 - ... kernal status word.
.25f7	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.25f9	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.25fb	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.25fe	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.2600	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.2602	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.2604	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.2607	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.2609	d0 28		               bne  exit      ; L0167
.260b	a4 fb		               ldy  $fb       ; L0169
.260d	88		               dey            ; L016b
.260e	d0 e9		               bne  loop1     ; L016C - If not last, loop
.2610	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.2612	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.2615	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.2617	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.261a	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.261d	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.261f	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.2621	aa		               tax            ; L017F - tfr a in x
.2622	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.2624	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.2627	4c 1a 26	               jmp  loop3     ; L0185 - get another byte
.262a	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.262c	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.262f	a0 02		               ldy  #$02      ; L018D - set Y to 2
.2631	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.2633	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.2636	20 6b 21	               jsr  pop
.2639	60		               rts            ; L0194
.263a			directory
.263a	20 ca 25	               jsr  diskdir
.263d	20 a7 25	               jsr  diskerror
.2640	60		               rts
.2641			memtofile
.2641	20 b2 26	               jsr  dsk_putmesg
.2644	20 2c 21	               jsr  push
.2647	ad dc 26	               lda  dsk_fnlen
.264a	ae da 26	               ldx  dsk_fnptr      ; load fname addr. lbyte
.264d	ac db 26	               ldy  dsk_fnptr+1
.2650	20 bd ff	               jsr  setnam         ; call setnam
.2653	ad d9 26	               lda  dsk_lfsno
.2656	ae d8 26	               ldx  dsk_dev        ; specified device
.2659	a0 00		skip           ldy  #$00
.265b	20 ba ff	               jsr  setlfs         ; call setlfs
.265e	ad d4 26	               lda  dsk_data_s     ; put data start lbyte in stal
.2661	85 c1		               sta  stal
.2663	ad d5 26	               lda  dsk_data_s+1   ; put data start hbyte in stal
.2666	85 c2		               sta  stal+1
.2668	ae d6 26	               ldx  dsk_data_e     ; put data end lbyte in x
.266b	ac d7 26	               ldy  dsk_data_e+1   ; put data end hbyte in y
.266e	a9 c1		               lda  #stal          ; start address located in $c1/$c2
.2670	20 d8 ff	               jsr  save           ; call save
.2673	90 00		               bcc  noerror        ; if carry set, a load error has happened
.2675	20 6b 21	noerror        jsr  pop
.2678	60		               rts
.2679			filetomem
.2679	20 2c 21	               jsr push
.267c	ad dc 26	               lda dsk_fnlen
.267f	ae da 26	               ldx dsk_fnptr
.2682	ac db 26	               ldy dsk_fnptr+1
.2685	20 bd ff	               jsr setnam     ; call setnam
.2688	ad d9 26	               lda dsk_lfsno
.268b	ae d8 26	               ldx dsk_dev    ; default to device 8
.268e	a0 01		               ldy #$01       ; not $01 means: load to address stored in file
.2690	20 ba ff	               jsr setlfs     ; call setlfs
.2693	a9 00		               lda #$00       ; $00 means: load to memory (not verify)
.2695	20 d5 ff	               jsr load       ; call load
.2698	90 03		               bcc noerror      ; if carry set, a load error has happened
.269a	20 a1 26	               jsr  error
.269d	20 6b 21	noerror        jsr pop
.26a0	60		               rts
.26a1			error
.26a1	60		               rts
.26a2	a2 ed		error1         ldx  #<dsk_emsg1
.26a4	a0 26		               ldy  #>dsk_emsg1
.26a6	20 3b 20	               jsr  puts
.26a9	60		               rts
.26aa	a2 01		error2         ldx #<dsk_emsg2
.26ac	a0 27		               ldy #>dsk_emsg2
.26ae	20 3b 20	               jsr puts
.26b1	60		               rts
.26b2			dsk_putmesg
.26b2	20 2c 21	               jsr push
.26b5	a2 dd		               ldx #<dsk_msg0
.26b7	a0 26		               ldy #>dsk_msg0
.26b9	20 3b 20	               jsr puts
.26bc	a9 20		               lda #$20
.26be	20 35 20	               jsr putch
.26c1	ae da 26	               ldx dsk_fnptr
.26c4	ac db 26	               ldy dsk_fnptr+1
.26c7	20 3b 20	               jsr puts
.26ca	ad d9 26	               lda dsk_lfsno
.26cd	20 c3 ff	               jsr close
.26d0	20 6b 21	               jsr pop
.26d3	60		               rts
>26d4	00 00		dsk_data_s     .word     $0000    ; example addresses
>26d6	00 20		dsk_data_e     .word     $2000
>26d8	08		dsk_dev        .byte     $08
>26d9	00		dsk_lfsno      .byte     $00
>26da	00 00		dsk_fnptr      .word     $00
>26dc	00		dsk_fnlen      .byte     0
>26dd	8d		dsk_msg0       .byte     141
>26de	53 41 56 49	               .null     "saving"
>26e2	4e 47 00
>26e5	8d		dsk_msg1       .byte     141
>26e6	53 55 43 43	               .null     "succes"
>26ea	45 53 00
>26ed	8d		dsk_emsg1      .byte     141
>26ee	46 49 43 48	               .null     "fichier non ouvert"
>26f2	49 45 52 20 4e 4f 4e 20 4f 55 56 45 52 54 00
>2701	11		dsk_emsg2      .byte     17
>2702	45 52 52 45	               .null     "erreur d'ecriture"
>2706	55 52 20 44 27 45 43 52 49 54 55 52 45 00

;******  Return to file: charedit.asm


;******  End of listing

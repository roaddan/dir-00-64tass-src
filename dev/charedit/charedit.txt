
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Fri Nov 10 17:38:53 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm

=$0d			flashcol = vvert1

;******  Return to file: charedit.asm

=$0400			scrnnewram     = $0400
=14			charsdef       = 14
=$0d			mesgrid_left   = vvert1
=9			grid_top       =         9
=1			grid_left      =         1
=16			grid_bot       =         grid_top + 7
=8			grid_right     =         grid_left + 7
=$0d			mesgcol        =         vvert1
.080d			main
.080d	20 a0 18	               jsr  push
.0810	20 53 17	               jsr  screendis
.0813	20 6d 17	               jsr  scrmaninit
.0816	20 2d 0c	               jsr  copycharset
.0819	20 17 0c	               jsr  setscreenptr
.081c	20 8e 0c	               jsr  staticscreen
.081f	20 60 17	               jsr  screenena
.0822	a9 00		               lda  #$00
.0824	8d 3b 13	               sta  fkeyset
.0827	20 ca 0c	               jsr  showfkeys
.082a	20 df 18	               jsr  pop
.082d	20 9a 12	               jsr  f8action
.0830	20 9a 12	               jsr  f8action
.0833	20 ce 09	               jsr  keyaction
.0836	20 a0 18	               jsr  push
.0839	a2 00		               ldx  #0
.083b	a0 00		               ldy  #0
.083d	20 c9 17	               jsr  gotoxy
.0840	20 df 18	               jsr  pop
.0843	20 8d 17	               jsr  cls
.0846	20 a0 18	               jsr  push
.0849	a2 47		               ldx  #<blankmsg
.084b	a0 13		               ldy  #>blankmsg
.084d	20 38 18	               jsr  putscxy
.0850	a2 76		               ldx  #<bye_msg
.0852	a0 15		               ldy  #>bye_msg
.0854	20 38 18	               jsr  putscxy
.0857	20 df 18	               jsr  pop
.085a	20 a0 18	               jsr  push
.085d	a2 47		               ldx  #<blankmsg
.085f	a0 13		               ldy  #>blankmsg
.0861	20 38 18	               jsr  putscxy
.0864	a2 98		               ldx  #<any_msg
.0866	a0 15		               ldy  #>any_msg
.0868	20 38 18	               jsr  putscxy
.086b	20 df 18	               jsr  pop
.086e	20 a0 18	               jsr  push
.0871	a2 00		               ldx  #0
.0873	a0 00		               ldy  #0
.0875	20 c9 17	               jsr  gotoxy
.0878	20 df 18	               jsr  pop
.087b	20 c0 1c	               jsr  getkey
.087e	20 66 fe	               jsr  k_warmboot
.0881	60		               rts
.0882			template
.0882	20 a0 18	               jsr  push
.0885	20 df 18	               jsr  pop
.0888	60		               rts
.0889			showkeyval
.0889	20 a0 18	               jsr  push
.088c	ad 3d 13	               lda  currentkey
.088f	20 a0 18	               jsr  push
.0892	a2 01		               ldx  #1
.0894	a0 13		               ldy  #19
.0896	20 c9 17	               jsr  gotoxy
.0899	20 df 18	               jsr  pop
.089c	20 a0 18	               jsr  push
.089f	a2 7b		isx            ldx  #<txt0
.08a1	a0 09		isy            ldy  #>txt0
.08a3	20 af 17	               jsr  puts
.08a6	20 df 18	               jsr  pull
.08a9	20 a9 17	               jsr  putch
.08ac	20 a0 18	               jsr  push
.08af	a2 01		               ldx  #1
.08b1	a0 14		               ldy  #20
.08b3	20 c9 17	               jsr  gotoxy
.08b6	20 df 18	               jsr  pop
.08b9	20 a0 18	               jsr  push
.08bc	a2 88		isx            ldx  #<txt1
.08be	a0 09		isy            ldy  #>txt1
.08c0	20 af 17	               jsr  puts
.08c3	20 df 18	               jsr  pull
.08c6	a9 24		               lda  #'$'
.08c8	20 a9 17	               jsr  putch
.08cb	ad 3d 13	               lda  currentkey
.08ce	20 99 1a	               jsr  putahex
.08d1	20 a0 18	               jsr  push
.08d4	a2 01		               ldx  #1
.08d6	a0 15		               ldy  #21
.08d8	20 c9 17	               jsr  gotoxy
.08db	20 df 18	               jsr  pop
.08de	20 a0 18	               jsr  push
.08e1	a2 93		isx            ldx  #<txt2
.08e3	a0 09		isy            ldy  #>txt2
.08e5	20 af 17	               jsr  puts
.08e8	20 df 18	               jsr  pull
.08eb	a9 24		               lda  #'$'
.08ed	20 a9 17	               jsr  putch
.08f0	ad 8d 0c	               lda  bitmapaddr+1
.08f3	20 99 1a	               jsr  putahex
.08f6	ad 8c 0c	               lda  bitmapaddr
.08f9	20 99 1a	               jsr  putahex
.08fc	20 a0 18	               jsr  push
.08ff	a2 01		               ldx  #1
.0901	a0 16		               ldy  #22
.0903	20 c9 17	               jsr  gotoxy
.0906	20 df 18	               jsr  pop
.0909	20 a0 18	               jsr  push
.090c	a2 9e		isx            ldx  #<txt3
.090e	a0 09		isy            ldy  #>txt3
.0910	20 af 17	               jsr  puts
.0913	20 df 18	               jsr  pull
.0916	a9 24		               lda  #'$'
.0918	20 a9 17	               jsr  putch
.091b	ad 3e 13	               lda  bitmapoffset
.091e	20 99 1a	               jsr  putahex
.0921	20 a0 18	               jsr  push
.0924	a2 01		               ldx  #1
.0926	a0 17		               ldy  #23
.0928	20 c9 17	               jsr  gotoxy
.092b	20 df 18	               jsr  pop
.092e	20 a0 18	               jsr  push
.0931	a2 ab		isx            ldx  #<txt4
.0933	a0 09		isy            ldy  #>txt4
.0935	20 af 17	               jsr  puts
.0938	20 df 18	               jsr  pull
.093b	a9 24		               lda  #'$'
.093d	20 a9 17	               jsr  putch
.0940	ad 40 13	               lda  mapaddr+1
.0943	20 99 1a	               jsr  putahex
.0946	ad 3f 13	               lda  mapaddr
.0949	20 99 1a	               jsr  putahex
.094c	20 a0 18	               jsr  push
.094f	a2 01		               ldx  #1
.0951	a0 17		               ldy  #23
.0953	20 c9 17	               jsr  gotoxy
.0956	20 df 18	               jsr  pop
.0959	20 a0 18	               jsr  push
.095c	a2 b6		isx            ldx  #<txt5
.095e	a0 09		isy            ldy  #>txt5
.0960	20 af 17	               jsr  puts
.0963	20 df 18	               jsr  pull
.0966	a9 24		               lda  #'$'
.0968	20 a9 17	               jsr  putch
.096b	ad 46 13	               lda  curscl
.096e	20 99 1a	               jsr  putahex
.0971	ad 45 13	               lda  cursln
.0974	20 99 1a	               jsr  putahex
.0977	20 df 18	               jsr  pop
.097a	60		               rts
>097b	50 45 54 53	txt0           .null     "petscii :   "
>097f	43 49 49 20 3a 20 20 20 00
>0988	4b 45 59 20	txt1           .null     "key code: "
>098c	43 4f 44 45 3a 20 00
>0993	42 49 54 4d	txt2           .null     "bitmap..: "
>0997	41 50 2e 2e 3a 20 00
>099e	4f 46 46 53	txt3           .null     "offset..:   "
>09a2	45 54 2e 2e 3a 20 20 20 00
>09ab	4d 41 50 41	txt4           .null     "mapaddr.: "
>09af	44 44 52 2e 3a 20 00
>09b6	50 49 58 41	txt5           .null     "pixaddr.: "
>09ba	44 44 52 2e 3a 20 00
>09c1	53 54 41 43	txt6           .null     "stack......:"
>09c5	4b 2e 2e 2e 2e 2e 2e 3a 00
.09ce			keyaction
.09ce	20 a0 18	               jsr  push
.09d1			loop
.09d1	20 c0 1c	               jsr  getkey
.09d4	8d 3d 13	               sta  currentkey
.09d7	c9 85		               cmp  #key_f1
.09d9	f0 23		               beq  f1
.09db	c9 89		               cmp  #key_f2
.09dd	f0 25		               beq  f2
.09df	c9 86		               cmp  #key_f3
.09e1	f0 27		               beq  f3
.09e3	c9 8a		               cmp  #key_f4
.09e5	f0 29		               beq  f4
.09e7	c9 87		               cmp  #key_f5
.09e9	f0 2b		               beq  f5
.09eb	c9 8b		               cmp  #key_f6
.09ed	f0 2d		               beq  f6
.09ef	c9 88		               cmp  #key_f7
.09f1	f0 2f		               beq  f7
.09f3	c9 8c		               cmp  #key_f8
.09f5	f0 31		               beq  f8
.09f7	c9 18		               cmp  #ctrl_x
.09f9	f0 33		               beq  quit
.09fb	4c d1 09	               jmp  loop
.09fe	20 47 0e	f1             jsr  f1action
.0a01	4c d1 09	               jmp  loop
.0a04	20 0a 0f	f2             jsr  f2action
.0a07	4c d1 09	               jmp  loop
.0a0a	20 a2 0f	f3             jsr  f3action
.0a0d	4c d1 09	               jmp  loop
.0a10	20 3a 10	f4             jsr  f4action
.0a13	4c d1 09	               jmp  loop
.0a16	20 d2 10	f5             jsr  f5action
.0a19	4c d1 09	               jmp  loop
.0a1c	20 6a 11	f6             jsr  f6action
.0a1f	4c d1 09	               jmp  loop
.0a22	20 02 12	f7             jsr  f7action
.0a25	4c d1 09	               jmp  loop
.0a28	20 9a 12	f8             jsr  f8action
.0a2b	4c d1 09	               jmp  loop
.0a2e	20 df 18	quit           jsr  pop
.0a31	60		               rts
>0a32	0a 01 05	keyaction_msg  .byte vrose,1,5
>0a35	5b 4b 45 59	               .null     "[keyaction]"
>0a39	41 43 54 49 4f 4e 5d 00
.0a41			editor
.0a41	20 a0 18	               jsr  push
.0a44	20 a0 18	               jsr  push
.0a47	a2 47		               ldx  #<blankmsg
.0a49	a0 13		               ldy  #>blankmsg
.0a4b	20 38 18	               jsr  putscxy
.0a4e	a2 61		               ldx  #<exit_msg
.0a50	a0 15		               ldy  #>exit_msg
.0a52	20 38 18	               jsr  putscxy
.0a55	20 df 18	               jsr  pop
.0a58	20 a0 18	               jsr  push
.0a5b	a2 47		               ldx  #<blankmsg
.0a5d	a0 13		               ldy  #>blankmsg
.0a5f	20 38 18	               jsr  putscxy
.0a62	a2 72		               ldx  #<edit_msg
.0a64	a0 13		               ldy  #>edit_msg
.0a66	20 38 18	               jsr  putscxy
.0a69	20 df 18	               jsr  pop
.0a6c			ed_loop
.0a6c	20 31 0b	               jsr  setcurs
.0a6f	20 c0 1c	               jsr  getkey
.0a72	8d 3d 13	               sta  currentkey
.0a75	aa		               tax
.0a76	bc 9b 1b	               ldy  asciitorom,x
.0a79	8c 3e 13	               sty  bitmapoffset
.0a7c	c9 91		               cmp  #cursu
.0a7e	f0 47		               beq  do_up
.0a80	c9 11		               cmp  #cursd
.0a82	f0 53		               beq  do_down
.0a84	c9 9d		               cmp  #cursl
.0a86	f0 5f		               beq  do_left
.0a88	c9 1d		               cmp  #cursr
.0a8a	f0 6b		               beq  do_right
.0a8c	c9 20		               cmp  #$20
.0a8e	f0 77		               beq  do_swap
.0a90	c9 18		               cmp  #ctrl_x
.0a92	f0 79		               beq  do_ctrlx
.0a94	20 a0 18	               jsr  push
.0a97	a2 0d		               ldx  #13
.0a99	a0 0c		               ldy  #12
.0a9b	20 c9 17	               jsr  gotoxy
.0a9e	20 df 18	               jsr  pop
.0aa1	20 a9 17	               jsr  putch
.0aa4	20 a0 18	               jsr  push
.0aa7	a2 11		               ldx  #17
.0aa9	a0 05		               ldy  #5
.0aab	20 c9 17	               jsr  gotoxy
.0aae	20 df 18	               jsr  pop
.0ab1	20 66 1b	               jsr  atodec
.0ab4	20 a0 18	               jsr  push
.0ab7	a2 6a		isx            ldx  #<adec
.0ab9	a0 1a		isy            ldy  #>adec
.0abb	20 af 17	               jsr  puts
.0abe	20 df 18	               jsr  pull
.0ac1	20 75 0b	               jsr  drawbitmap
.0ac4	4c 07 0b	               jmp  totop
.0ac7	ad 45 13	do_up          lda  cursln
.0aca	c9 09		               cmp  #grid_top
.0acc	f0 39		               beq  totop
.0ace	20 53 0b	               jsr  clrcurs
.0ad1	ce 45 13	               dec  cursln
.0ad4	4c 07 0b	               jmp  totop
.0ad7	ad 45 13	do_down        lda  cursln
.0ada	c9 10		               cmp  #grid_bot
.0adc	f0 29		               beq  totop
.0ade	20 53 0b	               jsr  clrcurs
.0ae1	ee 45 13	               inc  cursln
.0ae4	4c 07 0b	               jmp  totop
.0ae7	ad 46 13	do_left        lda  curscl
.0aea	c9 01		               cmp  #grid_left
.0aec	f0 19		               beq  totop
.0aee	20 53 0b	               jsr  clrcurs
.0af1	ce 46 13	               dec  curscl
.0af4	4c 07 0b	               jmp  totop
.0af7	ad 46 13	do_right       lda  curscl
.0afa	c9 08		               cmp  #grid_right
.0afc	f0 09		               beq  totop
.0afe	20 53 0b	               jsr  clrcurs
.0b01	ee 46 13	               inc  curscl
.0b04	4c 07 0b	               jmp  totop
.0b07			do_swap
.0b07	20 89 08	totop          jsr  showkeyval
.0b0a	4c 6c 0a	               jmp  ed_loop
.0b0d			do_ctrlx
.0b0d	20 a0 18	               jsr  push
.0b10	a2 47		               ldx  #<blankmsg
.0b12	a0 13		               ldy  #>blankmsg
.0b14	20 38 18	               jsr  putscxy
.0b17	a2 4c		               ldx  #<quit_msg
.0b19	a0 15		               ldy  #>quit_msg
.0b1b	20 38 18	               jsr  putscxy
.0b1e	20 df 18	               jsr  pop
.0b21	20 df 18	               jsr  pop
.0b24	60		               rts
>0b25	0a 01 05	editor_msg     .byte vrose,1,5
>0b28	5b 45 44 49	               .null     "[editor]"
>0b2c	54 4f 52 5d 00
.0b31			setcurs
.0b31	20 a0 18	               jsr  push
.0b34	a2 01		               ldx  #grid_left
.0b36	ac 45 13	               ldy  cursln
.0b39	20 c9 17	               jsr  gotoxy
.0b3c	a9 da		               lda  #$da
.0b3e	20 a9 17	               jsr  putch
.0b41	ae 46 13	               ldx  curscl
.0b44	e8		               inx
.0b45	a0 08		               ldy  #grid_top-1
.0b47	20 c9 17	               jsr  gotoxy
.0b4a	a9 da		               lda  #$da
.0b4c	20 a9 17	               jsr  putch
.0b4f	20 df 18	               jsr  pop
.0b52	60		               rts
.0b53			clrcurs
.0b53	20 a0 18	               jsr  push
.0b56	a2 01		               ldx  #grid_left
.0b58	ac 45 13	               ldy  cursln
.0b5b	20 c9 17	               jsr  gotoxy
.0b5e	a9 20		               lda  #$20
.0b60	20 a9 17	               jsr  putch
.0b63	ae 46 13	               ldx  curscl
.0b66	e8		               inx
.0b67	a0 08		               ldy  #grid_top-1
.0b69	20 c9 17	               jsr  gotoxy
.0b6c	a9 20		               lda  #$20
.0b6e	20 a9 17	               jsr  putch
.0b71	20 df 18	               jsr  pop
.0b74	60		               rts
.0b75			drawbitmap
.0b75	20 a0 18	               jsr  push
.0b78	a9 e7		               lda  #<letext       ; le pointeur
.0b7a	85 fd		               sta  zpage2
.0b7c	a9 e8		               lda  #<letext+1
.0b7e	85 fe		               sta  zpage2+1
.0b80	a9 01		               lda  #grid_left          ; la position
.0b82	8d e5 0b	               sta  textline+1
.0b85	a9 09		               lda  #grid_top
.0b87	8d e6 0b	               sta  textline+2
.0b8a	ad 8c 0c	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0b8d	85 fb		               sta  zpage1
.0b8f	ad 8d 0c	               lda  bitmapaddr+1
.0b92	85 fc		               sta  zpage1+1
.0b94	ae 3e 13	               ldx  bitmapoffset
.0b97	e0 00		               cpx  #$00
.0b99	f0 14		               beq  drawchar       ; sommes nous déja à 0
.0b9b	a9 08		addagain       lda  #8
.0b9d	20 13 0e	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0ba0	ca		               dex                 ; pour chaque caracteres
.0ba1	d0 f8		               bne  addagain
.0ba3	48		               pha
.0ba4	a5 fb		               lda  zpage1
.0ba6	8d 3f 13	               sta  mapaddr
.0ba9	a5 fc		               lda  zpage1+1
.0bab	8d 40 13	               sta  mapaddr+1
.0bae	68		               pla
.0baf	a0 00		drawchar       ldy  #$00
.0bb1	a2 09		               ldx  #grid_top      ;on replace la ...
.0bb3	8e bc 0b	               stx  isy+1          ;ligne de départ
.0bb6	20 a0 18	nextline       jsr  push
.0bb9	a2 02		               ldx  #grid_left+1        ; la colonne
.0bbb	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.0bbd	20 c9 17	               jsr  gotoxy
.0bc0	20 df 18	               jsr  pop
.0bc3	b1 fb		               lda  (zpage1),y     ; on li une ligne
.0bc5	20 0a 1b	               jsr  atobin
.0bc8	20 f0 0b	               jsr  abintograph
.0bcb	20 a0 18	               jsr  push
.0bce	a2 61		isx            ldx  #<abin
.0bd0	a0 1a		isy            ldy  #>abin
.0bd2	20 af 17	               jsr  puts
.0bd5	20 df 18	               jsr  pull
.0bd8	ee bc 0b	               inc  isy+1
.0bdb	c8		               iny
.0bdc	c0 08		               cpy  #$08
.0bde	30 d6		               bmi  nextline
.0be0	20 df 18	               jsr  pop
.0be3	60		               rts
>0be4	01 01 09	textline       .byte vblanc,grid_left,grid_top
>0be7	20 20 20 20	letext         .null "        "
>0beb	20 20 20 20 00
.0bf0			abintograph
.0bf0	20 a0 18	               jsr  push
.0bf3	a9 61		               lda  #<abin
.0bf5	85 fb		               sta  zpage1
.0bf7	a9 1a		               lda  #>abin+1
.0bf9	85 fc		               sta  zpage1+1
.0bfb	a0 00		               ldy  #$00
.0bfd	b1 fb		nextbit        lda  (zpage1),y
.0bff	c9 30		               cmp  #$30
.0c01	f0 07		               beq  itszero
.0c03	a9 d1		itsone         lda  #$d1
.0c05	91 fb		               sta  (zpage1),y
.0c07	4c 0e 0c	               jmp  next
.0c0a	a9 20		itszero        lda  #$20
.0c0c	91 fb		               sta  (zpage1),y
.0c0e	c8		next           iny
.0c0f	c0 08		               cpy  #$08
.0c11	30 ea		               bmi  nextbit
.0c13	20 df 18	               jsr  pop
.0c16	60		               rts
.0c17			setscreenptr
.0c17	20 a0 18	               jsr  push
.0c1a	a9 08		               lda  #$08      ; basic commande to disable ...
.0c1c	20 d2 ff	               jsr  chrout    ; ... character set change.
.0c1f	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.0c22	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.0c24	09 0e		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.0c26	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.0c29	20 df 18	               jsr  pop
.0c2c	60		               rts
.0c2d			copycharset
.0c2d	20 a0 18	               jsr  push
.0c30	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0c33	29 fe		               and  #%11111110     ;254
.0c35	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0c38	a5 01		               lda  u6510map       ;$01
.0c3a	29 fb		               and  #%11111011     ;251
.0c3c	85 01		               sta  u6510map       ;$01
.0c3e	20 53 0c	               jsr  memcopy
.0c41	a5 01		               lda  u6510map       ;$01
.0c43	09 04		               ora  #%00000100
.0c45	85 01		               sta  u6510map       ;$01
.0c47	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0c4a	09 01		               ora  #%00000001     ;254
.0c4c	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0c4f	20 df 18	               jsr  pop
.0c52	60		               rts
.0c53			memcopy
.0c53	20 a0 18	               jsr  push
.0c56	ad 88 0c	               lda  startaddr
.0c59	85 fb		               sta  zpage1
.0c5b	ad 89 0c	               lda  startaddr+1
.0c5e	85 fc		               sta  zpage1+1
.0c60	ad 8c 0c	               lda  bitmapaddr
.0c63	85 fd		               sta  zpage2
.0c65	ad 8d 0c	               lda  bitmapaddr+1
.0c68	85 fe		               sta  zpage2+1
.0c6a	a0 00		               ldy  #$00
.0c6c	b1 fb		onemore        lda  (zpage1),y
.0c6e	91 fd		               sta  (zpage2),y
.0c70	20 a7 19	               jsr  inczp1
.0c73	20 bf 19	               jsr  inczp2
.0c76	a5 fc		               lda  zpage1+1
.0c78	cd 8b 0c	               cmp  stopaddr+1
.0c7b	d0 ef		               bne  onemore
.0c7d	a5 fb		               lda  zpage1
.0c7f	cd 8a 0c	               cmp  stopaddr
.0c82	d0 e8		               bne  onemore
.0c84	20 df 18	               jsr  pop
.0c87	60		               rts
=14336			bitmapmem =    charsdef * 1024     ;Calcul de la position ram des caracteres.
=61440			mstopaddr =    $d000+(4*$800)
>0c88	00 d0		startaddr      .word     $d000               ; 53248
>0c8a	00 f0		stopaddr       .word     mstopaddr           ; 55296
>0c8c	00 38		bitmapaddr     .word     bitmapmem           ; $3000, 12288
.0c8e			staticscreen
.0c8e	48		               pha
.0c8f	a9 0c		               lda  #vgris1
.0c91	8d 20 d0	               sta  $d020
.0c94	68		               pla
.0c95	48		               pha
.0c96	a9 0b		               lda  #vgris
.0c98	8d 21 d0	               sta  $d021
.0c9b	68		               pla
.0c9c	20 6a 0d	               jsr  showlines
.0c9f	20 4b 0d	               jsr  showallchars
.0ca2	20 b2 0d	               jsr  showgrid
.0ca5	20 ca 0c	               jsr  showfkeys
.0ca8	20 a0 18	               jsr  push
.0cab	a2 47		               ldx  #<blankmsg
.0cad	a0 13		               ldy  #>blankmsg
.0caf	20 38 18	               jsr  putscxy
.0cb2	a2 4c		               ldx  #<quit_msg
.0cb4	a0 15		               ldy  #>quit_msg
.0cb6	20 38 18	               jsr  putscxy
.0cb9	20 df 18	               jsr  pop
.0cbc	20 a0 18	               jsr  push
.0cbf	a2 00		               ldx  #0
.0cc1	a0 07		               ldy  #7
.0cc3	20 c9 17	               jsr  gotoxy
.0cc6	20 df 18	               jsr  pop
.0cc9	60		               rts
.0cca			showfkeys
.0cca	20 a0 18	               jsr  push
.0ccd	ad 3b 13	               lda  fkeyset
.0cd0	c9 00		               cmp  #$0
.0cd2	d0 3b		               bne  secondks
.0cd4	a2 b3		               ldx #<f1abutton
.0cd6	a0 15		               ldy #>f1abutton
.0cd8	20 38 18	               jsr putscxy
.0cdb	a2 cd		               ldx #<f2abutton
.0cdd	a0 15		               ldy #>f2abutton
.0cdf	20 38 18	               jsr putscxy
.0ce2	a2 e7		               ldx #<f3abutton
.0ce4	a0 15		               ldy #>f3abutton
.0ce6	20 38 18	               jsr putscxy
.0ce9	a2 01		               ldx #<f4abutton
.0ceb	a0 16		               ldy #>f4abutton
.0ced	20 38 18	               jsr putscxy
.0cf0	a2 1b		               ldx #<f5abutton
.0cf2	a0 16		               ldy #>f5abutton
.0cf4	20 38 18	               jsr putscxy
.0cf7	a2 35		               ldx #<f6abutton
.0cf9	a0 16		               ldy #>f6abutton
.0cfb	20 38 18	               jsr putscxy
.0cfe	a2 4f		               ldx #<f7abutton
.0d00	a0 16		               ldy #>f7abutton
.0d02	20 38 18	               jsr putscxy
.0d05	a2 69		               ldx #<f8abutton
.0d07	a0 16		               ldy #>f8abutton
.0d09	20 38 18	               jsr putscxy
.0d0c	4c 47 0d	               jmp end
.0d0f			secondks
.0d0f	a2 83		               ldx #<f1bbutton
.0d11	a0 16		               ldy #>f1bbutton
.0d13	20 38 18	               jsr putscxy
.0d16	a2 9d		               ldx #<f2bbutton
.0d18	a0 16		               ldy #>f2bbutton
.0d1a	20 38 18	               jsr putscxy
.0d1d	a2 b7		               ldx #<f3bbutton
.0d1f	a0 16		               ldy #>f3bbutton
.0d21	20 38 18	               jsr putscxy
.0d24	a2 d1		               ldx #<f4bbutton
.0d26	a0 16		               ldy #>f4bbutton
.0d28	20 38 18	               jsr putscxy
.0d2b	a2 eb		               ldx #<f5bbutton
.0d2d	a0 16		               ldy #>f5bbutton
.0d2f	20 38 18	               jsr putscxy
.0d32	a2 05		               ldx #<f6bbutton
.0d34	a0 17		               ldy #>f6bbutton
.0d36	20 38 18	               jsr putscxy
.0d39	a2 1f		               ldx #<f7bbutton
.0d3b	a0 17		               ldy #>f7bbutton
.0d3d	20 38 18	               jsr putscxy
.0d40	a2 39		               ldx #<f8bbutton
.0d42	a0 17		               ldy #>f8bbutton
.0d44	20 38 18	               jsr putscxy
.0d47	20 df 18	end            jsr  pop
.0d4a	60		               rts
.0d4b			showallchars
.0d4b	20 a0 18	               jsr push
.0d4e	20 a0 18	               jsr  push
.0d51	a2 00		               ldx  #0
.0d53	a0 00		               ldy  #0
.0d55	20 c9 17	               jsr  gotoxy
.0d58	20 df 18	               jsr  pop
.0d5b	a2 00		               ldx  #$00
.0d5d	8a		nextc          txa
.0d5e	9d 00 04	               sta  scrnnewram,x
.0d61	e8		               inx
.0d62	e0 80		               cpx  #$80
.0d64	d0 f7		               bne  nextc
.0d66	20 df 18	               jsr  pop
.0d69	60		               rts
.0d6a			showlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.0d6a	20 a0 18	               jsr  push
.0d6d	a2 28		               ldx  #40
.0d6f	a9 40		               lda  #64
.0d71	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.0d74	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.0d77	ca		               dex
.0d78	e0 10		hline          cpx  #vlinepos
.0d7a	10 03		               bpl  notyet
.0d7c	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.0d7f	e0 00		notyet         cpx  #$00
.0d81	d0 ee		               bne  nextl
.0d83	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.0d85	85 fb		               sta  zpage1
.0d87	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.0d89	85 fc		               sta  zpage1+1
.0d8b	a0 00		               ldy  #0
.0d8d	a9 72		               lda  #114
.0d8f	91 fb		               sta  (zpage1),y
.0d91	20 21 0e	               jsr  zp1add40
.0d94	a2 12		               ldx  #24-hline2
.0d96	a9 5d		               lda  #93
.0d98	91 fb		another93      sta  (zpage1),y
.0d9a	20 21 0e	               jsr  zp1add40
.0d9d	ca		               dex
.0d9e	d0 f8		               bne  another93
.0da0	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.0da2	85 fb		               sta  zpage1
.0da4	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.0da6	85 fc		               sta  zpage1+1
.0da8	a0 00		               ldy  #0
.0daa	a9 73		               lda  #115
.0dac	91 fb		               sta  (zpage1),y
.0dae	20 df 18	               jsr  pop
.0db1	60		               rts
.0db2			showgrid
.0db2	20 a0 18	               jsr  push
.0db5	20 53 17	               jsr  screendis
.0db8	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.0dba	85 fb		               sta  zpage1
.0dbc	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.0dbe	85 fc		               sta  zpage1+1
.0dc0	a2 08		               ldx  #8
.0dc2	a9 65		nextbox        lda  #101
.0dc4	a0 09		               ldy  #9
.0dc6	91 fb		               sta  (zpage1),y
.0dc8	88		               dey
.0dc9	a9 4f		               lda  #79
.0dcb	91 fb		nextcol        sta  (zpage1),y
.0dcd	88		               dey
.0dce	d0 fb		               bne  nextcol
.0dd0	20 21 0e	               jsr  zp1add40
.0dd3	ca		               dex
.0dd4	d0 ec		               bne  nextbox
.0dd6	a0 08		               ldy  #8
.0dd8	a9 77		               lda  #119
.0dda	91 fb		nextlin        sta  (zpage1),y
.0ddc	88		               dey
.0ddd	d0 fb		               bne  nextlin
.0ddf	a9 3e		               lda  #$3e
.0de1	8d eb 05	               sta  scrnnewram+(40*(12))+11
.0de4	a9 70		               lda  #$70                     ;+
.0de6	8d c4 05	               sta  scrnnewram+(40*(11))+12
.0de9	a9 43		               lda  #$43                    ;-
.0deb	8d c5 05	               sta  scrnnewram+(40*(11))+13
.0dee	a9 6e		               lda  #$6e                     ;+
.0df0	8d c6 05	               sta  scrnnewram+(40*(11))+14
.0df3	a9 5d		               lda  #$5d                     ;|
.0df5	8d ec 05	               sta  scrnnewram+(40*(12))+12
.0df8	a9 5d		               lda  #$5d                     ;|
.0dfa	8d ee 05	               sta  scrnnewram+(40*(12))+14
.0dfd	a9 6d		               lda  #$6d                     ;+
.0dff	8d 14 06	               sta  scrnnewram+(40*(13))+12
.0e02	a9 43		               lda  #$43                     ;-
.0e04	8d 15 06	               sta  scrnnewram+(40*(13))+13
.0e07	a9 7d		               lda  #$7d                     ;+
.0e09	8d 16 06	               sta  scrnnewram+(40*(13))+14
.0e0c	20 60 17	               jsr screenena
.0e0f	20 df 18	               jsr  pop
.0e12	60		               rts
.0e13			zp1addnum
.0e13	08		               php
.0e14	48		               pha
.0e15	18		               clc
.0e16	65 fb		               adc  zpage1
.0e18	90 02		               bcc  nocarry
.0e1a	e6 fc		               inc  zpage1+1
.0e1c	85 fb		nocarry        sta  zpage1
.0e1e	68		               pla
.0e1f	28		               plp
.0e20	60		               rts
.0e21			zp1add40
.0e21	08		               php
.0e22	48		               pha
.0e23	18		               clc
.0e24	a5 fb		               lda  zpage1
.0e26	69 28		               adc  #40
.0e28	90 02		               bcc  nocarry
.0e2a	e6 fc		               inc  zpage1+1
.0e2c	85 fb		nocarry        sta  zpage1
.0e2e	68		               pla
.0e2f	28		               plp
.0e30	60		               rts
.0e31			delay
.0e31	20 a0 18	               jsr  push
.0e34	a9 00		               lda  #$0
.0e36	aa		               tax
.0e37	a8		               tay
.0e38	ca		xagain         dex
.0e39	ca		               dex
.0e3a	88		yagain         dey
.0e3b	c0 00		               cpy  #$00
.0e3d	d0 fb		               bne  yagain
.0e3f	e0 00		               cpx  #$00
.0e41	d0 f5		               bne  xagain
.0e43	20 df 18	               jsr  pop
.0e46	60		               rts
.0e47			f1action
.0e47	48		               pha
.0e48	a9 ff		               lda  #$ff
.0e4a	8d 3a 13	               sta  editmode
.0e4d	ad 3b 13	               lda  fkeyset
.0e50	d0 5e		               bne  menub
.0e52	20 a0 18	               jsr  push
.0e55	a2 47		               ldx  #<blankmsg
.0e57	a0 13		               ldy  #>blankmsg
.0e59	20 38 18	               jsr  putscxy
.0e5c	a2 72		               ldx  #<f1a_msg
.0e5e	a0 13		               ldy  #>f1a_msg
.0e60	20 38 18	               jsr  putscxy
.0e63	20 df 18	               jsr  pop
.0e66	08		               php
.0e67	48		               pha
.0e68	8a		               txa
.0e69	48		               pha
.0e6a	ad b3 15	               lda  f1abutton
.0e6d	48		               pha
.0e6e	a9 92		               lda  #146
.0e70	8d c2 15	               sta  f1abutton+15
.0e73	a9 0d		               lda  #flashcol
.0e75	8d b3 15	               sta  f1abutton
.0e78	a2 b3		               ldx  #<f1abutton
.0e7a	a0 15		               ldy  #>f1abutton
.0e7c	20 38 18	               jsr  putscxy
.0e7f	20 31 0e	               jsr  delay
.0e82	a9 12		               lda  #18
.0e84	8d c2 15	               sta  f1abutton+15
.0e87	68		               pla
.0e88	8d b3 15	               sta  f1abutton
.0e8b	a2 b3		               ldx  #<f1abutton
.0e8d	a0 15		               ldy  #>f1abutton
.0e8f	20 38 18	               jsr  putscxy
.0e92	68		               pla
.0e93	aa		               tax
.0e94	68		               pla
.0e95	28		               plp
.0e96	20 41 0a	               jsr  editor
.0e99	20 a0 18	               jsr  push
.0e9c	a2 47		               ldx  #<blankmsg
.0e9e	a0 13		               ldy  #>blankmsg
.0ea0	20 38 18	               jsr  putscxy
.0ea3	a2 72		               ldx  #<f1a_msg
.0ea5	a0 13		               ldy  #>f1a_msg
.0ea7	20 38 18	               jsr  putscxy
.0eaa	20 df 18	               jsr  pop
.0ead	4c f9 0e	               jmp  out
.0eb0	a9 00		menub          lda  #$0
.0eb2	8d 3a 13	               sta  editmode
.0eb5	20 a0 18	               jsr  push
.0eb8	a2 47		               ldx  #<blankmsg
.0eba	a0 13		               ldy  #>blankmsg
.0ebc	20 38 18	               jsr  putscxy
.0ebf	a2 41		               ldx  #<f1b_msg
.0ec1	a0 14		               ldy  #>f1b_msg
.0ec3	20 38 18	               jsr  putscxy
.0ec6	20 df 18	               jsr  pop
.0ec9	08		               php
.0eca	48		               pha
.0ecb	8a		               txa
.0ecc	48		               pha
.0ecd	ad 83 16	               lda  f1bbutton
.0ed0	48		               pha
.0ed1	a9 92		               lda  #146
.0ed3	8d 92 16	               sta  f1bbutton+15
.0ed6	a9 0d		               lda  #flashcol
.0ed8	8d 83 16	               sta  f1bbutton
.0edb	a2 83		               ldx  #<f1bbutton
.0edd	a0 16		               ldy  #>f1bbutton
.0edf	20 38 18	               jsr  putscxy
.0ee2	20 31 0e	               jsr  delay
.0ee5	a9 12		               lda  #18
.0ee7	8d 92 16	               sta  f1bbutton+15
.0eea	68		               pla
.0eeb	8d 83 16	               sta  f1bbutton
.0eee	a2 83		               ldx  #<f1bbutton
.0ef0	a0 16		               ldy  #>f1bbutton
.0ef2	20 38 18	               jsr  putscxy
.0ef5	68		               pla
.0ef6	aa		               tax
.0ef7	68		               pla
.0ef8	28		               plp
.0ef9	68		out            pla
.0efa	60		               rts
>0efb	01 01 05	test_msg       .byte     vblanc,1,5
>0efe	5b 46 31 2d	               .null     "[f1-action]"
>0f02	41 43 54 49 4f 4e 5d 00
.0f0a			f2action
.0f0a	48		               pha
.0f0b	a9 00		               lda  #$0
.0f0d	8d 3a 13	               sta  editmode
.0f10	ad 3b 13	               lda  fkeyset
.0f13	d0 47		               bne  menub
.0f15	20 a0 18	               jsr  push
.0f18	a2 47		               ldx  #<blankmsg
.0f1a	a0 13		               ldy  #>blankmsg
.0f1c	20 38 18	               jsr  putscxy
.0f1f	a2 8d		               ldx  #<f2a_msg
.0f21	a0 13		               ldy  #>f2a_msg
.0f23	20 38 18	               jsr  putscxy
.0f26	20 df 18	               jsr  pop
.0f29	08		               php
.0f2a	48		               pha
.0f2b	8a		               txa
.0f2c	48		               pha
.0f2d	ad cd 15	               lda  f2abutton
.0f30	48		               pha
.0f31	a9 92		               lda  #146
.0f33	8d dc 15	               sta  f2abutton+15
.0f36	a9 0d		               lda  #flashcol
.0f38	8d cd 15	               sta  f2abutton
.0f3b	a2 cd		               ldx  #<f2abutton
.0f3d	a0 15		               ldy  #>f2abutton
.0f3f	20 38 18	               jsr  putscxy
.0f42	20 31 0e	               jsr  delay
.0f45	a9 12		               lda  #18
.0f47	8d dc 15	               sta  f2abutton+15
.0f4a	68		               pla
.0f4b	8d cd 15	               sta  f2abutton
.0f4e	a2 cd		               ldx  #<f2abutton
.0f50	a0 15		               ldy  #>f2abutton
.0f52	20 38 18	               jsr  putscxy
.0f55	68		               pla
.0f56	aa		               tax
.0f57	68		               pla
.0f58	28		               plp
.0f59	4c a0 0f	               jmp  out
.0f5c			menub
.0f5c	20 a0 18	               jsr  push
.0f5f	a2 47		               ldx  #<blankmsg
.0f61	a0 13		               ldy  #>blankmsg
.0f63	20 38 18	               jsr  putscxy
.0f66	a2 58		               ldx  #<f2b_msg
.0f68	a0 14		               ldy  #>f2b_msg
.0f6a	20 38 18	               jsr  putscxy
.0f6d	20 df 18	               jsr  pop
.0f70	08		               php
.0f71	48		               pha
.0f72	8a		               txa
.0f73	48		               pha
.0f74	ad 9d 16	               lda  f2bbutton
.0f77	48		               pha
.0f78	a9 92		               lda  #146
.0f7a	8d ac 16	               sta  f2bbutton+15
.0f7d	a9 0d		               lda  #flashcol
.0f7f	8d 9d 16	               sta  f2bbutton
.0f82	a2 9d		               ldx  #<f2bbutton
.0f84	a0 16		               ldy  #>f2bbutton
.0f86	20 38 18	               jsr  putscxy
.0f89	20 31 0e	               jsr  delay
.0f8c	a9 12		               lda  #18
.0f8e	8d ac 16	               sta  f2bbutton+15
.0f91	68		               pla
.0f92	8d 9d 16	               sta  f2bbutton
.0f95	a2 9d		               ldx  #<f2bbutton
.0f97	a0 16		               ldy  #>f2bbutton
.0f99	20 38 18	               jsr  putscxy
.0f9c	68		               pla
.0f9d	aa		               tax
.0f9e	68		               pla
.0f9f	28		               plp
.0fa0	68		out            pla
.0fa1	60		               rts
.0fa2			f3action
.0fa2	48		               pha
.0fa3	a9 00		               lda  #$0
.0fa5	8d 3a 13	               sta  editmode
.0fa8	ad 3b 13	               lda  fkeyset
.0fab	d0 47		               bne  menub
.0fad	20 a0 18	               jsr  push
.0fb0	a2 47		               ldx  #<blankmsg
.0fb2	a0 13		               ldy  #>blankmsg
.0fb4	20 38 18	               jsr  putscxy
.0fb7	a2 b3		               ldx  #<f3a_msg
.0fb9	a0 13		               ldy  #>f3a_msg
.0fbb	20 38 18	               jsr  putscxy
.0fbe	20 df 18	               jsr  pop
.0fc1	08		               php
.0fc2	48		               pha
.0fc3	8a		               txa
.0fc4	48		               pha
.0fc5	ad e7 15	               lda  f3abutton
.0fc8	48		               pha
.0fc9	a9 92		               lda  #146
.0fcb	8d f6 15	               sta  f3abutton+15
.0fce	a9 0d		               lda  #flashcol
.0fd0	8d e7 15	               sta  f3abutton
.0fd3	a2 e7		               ldx  #<f3abutton
.0fd5	a0 15		               ldy  #>f3abutton
.0fd7	20 38 18	               jsr  putscxy
.0fda	20 31 0e	               jsr  delay
.0fdd	a9 12		               lda  #18
.0fdf	8d f6 15	               sta  f3abutton+15
.0fe2	68		               pla
.0fe3	8d e7 15	               sta  f3abutton
.0fe6	a2 e7		               ldx  #<f3abutton
.0fe8	a0 15		               ldy  #>f3abutton
.0fea	20 38 18	               jsr  putscxy
.0fed	68		               pla
.0fee	aa		               tax
.0fef	68		               pla
.0ff0	28		               plp
.0ff1	4c 38 10	               jmp  out
.0ff4			menub
.0ff4	20 a0 18	               jsr  push
.0ff7	a2 47		               ldx  #<blankmsg
.0ff9	a0 13		               ldy  #>blankmsg
.0ffb	20 38 18	               jsr  putscxy
.0ffe	a2 71		               ldx  #<f3b_msg
.1000	a0 14		               ldy  #>f3b_msg
.1002	20 38 18	               jsr  putscxy
.1005	20 df 18	               jsr  pop
.1008	08		               php
.1009	48		               pha
.100a	8a		               txa
.100b	48		               pha
.100c	ad b7 16	               lda  f3bbutton
.100f	48		               pha
.1010	a9 92		               lda  #146
.1012	8d c6 16	               sta  f3bbutton+15
.1015	a9 0d		               lda  #flashcol
.1017	8d b7 16	               sta  f3bbutton
.101a	a2 b7		               ldx  #<f3bbutton
.101c	a0 16		               ldy  #>f3bbutton
.101e	20 38 18	               jsr  putscxy
.1021	20 31 0e	               jsr  delay
.1024	a9 12		               lda  #18
.1026	8d c6 16	               sta  f3bbutton+15
.1029	68		               pla
.102a	8d b7 16	               sta  f3bbutton
.102d	a2 b7		               ldx  #<f3bbutton
.102f	a0 16		               ldy  #>f3bbutton
.1031	20 38 18	               jsr  putscxy
.1034	68		               pla
.1035	aa		               tax
.1036	68		               pla
.1037	28		               plp
.1038	68		out            pla
.1039	60		               rts
.103a			f4action
.103a	48		               pha
.103b	a9 00		               lda  #$0
.103d	8d 3a 13	               sta  editmode
.1040	ad 3b 13	               lda  fkeyset
.1043	d0 47		               bne  menub
.1045	20 a0 18	               jsr  push
.1048	a2 47		               ldx  #<blankmsg
.104a	a0 13		               ldy  #>blankmsg
.104c	20 38 18	               jsr  putscxy
.104f	a2 da		               ldx  #<f4a_msg
.1051	a0 13		               ldy  #>f4a_msg
.1053	20 38 18	               jsr  putscxy
.1056	20 df 18	               jsr  pop
.1059	08		               php
.105a	48		               pha
.105b	8a		               txa
.105c	48		               pha
.105d	ad 01 16	               lda  f4abutton
.1060	48		               pha
.1061	a9 92		               lda  #146
.1063	8d 10 16	               sta  f4abutton+15
.1066	a9 0d		               lda  #flashcol
.1068	8d 01 16	               sta  f4abutton
.106b	a2 01		               ldx  #<f4abutton
.106d	a0 16		               ldy  #>f4abutton
.106f	20 38 18	               jsr  putscxy
.1072	20 31 0e	               jsr  delay
.1075	a9 12		               lda  #18
.1077	8d 10 16	               sta  f4abutton+15
.107a	68		               pla
.107b	8d 01 16	               sta  f4abutton
.107e	a2 01		               ldx  #<f4abutton
.1080	a0 16		               ldy  #>f4abutton
.1082	20 38 18	               jsr  putscxy
.1085	68		               pla
.1086	aa		               tax
.1087	68		               pla
.1088	28		               plp
.1089	4c d0 10	               jmp  out
.108c			menub
.108c	20 a0 18	               jsr  push
.108f	a2 47		               ldx  #<blankmsg
.1091	a0 13		               ldy  #>blankmsg
.1093	20 38 18	               jsr  putscxy
.1096	a2 89		               ldx  #<f4b_msg
.1098	a0 14		               ldy  #>f4b_msg
.109a	20 38 18	               jsr  putscxy
.109d	20 df 18	               jsr  pop
.10a0	08		               php
.10a1	48		               pha
.10a2	8a		               txa
.10a3	48		               pha
.10a4	ad d1 16	               lda  f4bbutton
.10a7	48		               pha
.10a8	a9 92		               lda  #146
.10aa	8d e0 16	               sta  f4bbutton+15
.10ad	a9 0d		               lda  #flashcol
.10af	8d d1 16	               sta  f4bbutton
.10b2	a2 d1		               ldx  #<f4bbutton
.10b4	a0 16		               ldy  #>f4bbutton
.10b6	20 38 18	               jsr  putscxy
.10b9	20 31 0e	               jsr  delay
.10bc	a9 12		               lda  #18
.10be	8d e0 16	               sta  f4bbutton+15
.10c1	68		               pla
.10c2	8d d1 16	               sta  f4bbutton
.10c5	a2 d1		               ldx  #<f4bbutton
.10c7	a0 16		               ldy  #>f4bbutton
.10c9	20 38 18	               jsr  putscxy
.10cc	68		               pla
.10cd	aa		               tax
.10ce	68		               pla
.10cf	28		               plp
.10d0	68		out            pla
.10d1	60		               rts
.10d2			f5action
.10d2	48		               pha
.10d3	a9 00		               lda  #$0
.10d5	8d 3a 13	               sta  editmode
.10d8	ad 3b 13	               lda  fkeyset
.10db	d0 47		               bne  menub
.10dd	20 a0 18	               jsr  push
.10e0	a2 47		               ldx  #<blankmsg
.10e2	a0 13		               ldy  #>blankmsg
.10e4	20 38 18	               jsr  putscxy
.10e7	a2 f7		               ldx  #<f5a_msg
.10e9	a0 13		               ldy  #>f5a_msg
.10eb	20 38 18	               jsr  putscxy
.10ee	20 df 18	               jsr  pop
.10f1	08		               php
.10f2	48		               pha
.10f3	8a		               txa
.10f4	48		               pha
.10f5	ad 1b 16	               lda  f5abutton
.10f8	48		               pha
.10f9	a9 92		               lda  #146
.10fb	8d 2a 16	               sta  f5abutton+15
.10fe	a9 0d		               lda  #flashcol
.1100	8d 1b 16	               sta  f5abutton
.1103	a2 1b		               ldx  #<f5abutton
.1105	a0 16		               ldy  #>f5abutton
.1107	20 38 18	               jsr  putscxy
.110a	20 31 0e	               jsr  delay
.110d	a9 12		               lda  #18
.110f	8d 2a 16	               sta  f5abutton+15
.1112	68		               pla
.1113	8d 1b 16	               sta  f5abutton
.1116	a2 1b		               ldx  #<f5abutton
.1118	a0 16		               ldy  #>f5abutton
.111a	20 38 18	               jsr  putscxy
.111d	68		               pla
.111e	aa		               tax
.111f	68		               pla
.1120	28		               plp
.1121	4c 68 11	               jmp  out
.1124			menub
.1124	20 a0 18	               jsr  push
.1127	a2 47		               ldx  #<blankmsg
.1129	a0 13		               ldy  #>blankmsg
.112b	20 38 18	               jsr  putscxy
.112e	a2 9e		               ldx  #<f5b_msg
.1130	a0 14		               ldy  #>f5b_msg
.1132	20 38 18	               jsr  putscxy
.1135	20 df 18	               jsr  pop
.1138	08		               php
.1139	48		               pha
.113a	8a		               txa
.113b	48		               pha
.113c	ad eb 16	               lda  f5bbutton
.113f	48		               pha
.1140	a9 92		               lda  #146
.1142	8d fa 16	               sta  f5bbutton+15
.1145	a9 0d		               lda  #flashcol
.1147	8d eb 16	               sta  f5bbutton
.114a	a2 eb		               ldx  #<f5bbutton
.114c	a0 16		               ldy  #>f5bbutton
.114e	20 38 18	               jsr  putscxy
.1151	20 31 0e	               jsr  delay
.1154	a9 12		               lda  #18
.1156	8d fa 16	               sta  f5bbutton+15
.1159	68		               pla
.115a	8d eb 16	               sta  f5bbutton
.115d	a2 eb		               ldx  #<f5bbutton
.115f	a0 16		               ldy  #>f5bbutton
.1161	20 38 18	               jsr  putscxy
.1164	68		               pla
.1165	aa		               tax
.1166	68		               pla
.1167	28		               plp
.1168	68		out            pla
.1169	60		               rts
.116a			f6action
.116a	48		               pha
.116b	a9 00		               lda  #$0
.116d	8d 3a 13	               sta  editmode
.1170	ad 3b 13	               lda  fkeyset
.1173	d0 47		               bne  menub
.1175	20 a0 18	               jsr  push
.1178	a2 47		               ldx  #<blankmsg
.117a	a0 13		               ldy  #>blankmsg
.117c	20 38 18	               jsr  putscxy
.117f	a2 11		               ldx  #<f6a_msg
.1181	a0 14		               ldy  #>f6a_msg
.1183	20 38 18	               jsr  putscxy
.1186	20 df 18	               jsr  pop
.1189	08		               php
.118a	48		               pha
.118b	8a		               txa
.118c	48		               pha
.118d	ad 35 16	               lda  f6abutton
.1190	48		               pha
.1191	a9 92		               lda  #146
.1193	8d 44 16	               sta  f6abutton+15
.1196	a9 0d		               lda  #flashcol
.1198	8d 35 16	               sta  f6abutton
.119b	a2 35		               ldx  #<f6abutton
.119d	a0 16		               ldy  #>f6abutton
.119f	20 38 18	               jsr  putscxy
.11a2	20 31 0e	               jsr  delay
.11a5	a9 12		               lda  #18
.11a7	8d 44 16	               sta  f6abutton+15
.11aa	68		               pla
.11ab	8d 35 16	               sta  f6abutton
.11ae	a2 35		               ldx  #<f6abutton
.11b0	a0 16		               ldy  #>f6abutton
.11b2	20 38 18	               jsr  putscxy
.11b5	68		               pla
.11b6	aa		               tax
.11b7	68		               pla
.11b8	28		               plp
.11b9	4c 00 12	               jmp  out
.11bc			menub
.11bc	20 a0 18	               jsr  push
.11bf	a2 47		               ldx  #<blankmsg
.11c1	a0 13		               ldy  #>blankmsg
.11c3	20 38 18	               jsr  putscxy
.11c6	a2 b2		               ldx  #<f6b_msg
.11c8	a0 14		               ldy  #>f6b_msg
.11ca	20 38 18	               jsr  putscxy
.11cd	20 df 18	               jsr  pop
.11d0	08		               php
.11d1	48		               pha
.11d2	8a		               txa
.11d3	48		               pha
.11d4	ad 05 17	               lda  f6bbutton
.11d7	48		               pha
.11d8	a9 92		               lda  #146
.11da	8d 14 17	               sta  f6bbutton+15
.11dd	a9 0d		               lda  #flashcol
.11df	8d 05 17	               sta  f6bbutton
.11e2	a2 05		               ldx  #<f6bbutton
.11e4	a0 17		               ldy  #>f6bbutton
.11e6	20 38 18	               jsr  putscxy
.11e9	20 31 0e	               jsr  delay
.11ec	a9 12		               lda  #18
.11ee	8d 14 17	               sta  f6bbutton+15
.11f1	68		               pla
.11f2	8d 05 17	               sta  f6bbutton
.11f5	a2 05		               ldx  #<f6bbutton
.11f7	a0 17		               ldy  #>f6bbutton
.11f9	20 38 18	               jsr  putscxy
.11fc	68		               pla
.11fd	aa		               tax
.11fe	68		               pla
.11ff	28		               plp
.1200	68		out            pla
.1201	60		               rts
.1202			f7action
.1202	48		               pha
.1203	a9 00		               lda  #$0
.1205	8d 3a 13	               sta  editmode
.1208	ad 3b 13	               lda  fkeyset
.120b	d0 47		               bne  menub
.120d	20 a0 18	               jsr  push
.1210	a2 47		               ldx  #<blankmsg
.1212	a0 13		               ldy  #>blankmsg
.1214	20 38 18	               jsr  putscxy
.1217	a2 2b		               ldx  #<f7a_msg
.1219	a0 14		               ldy  #>f7a_msg
.121b	20 38 18	               jsr  putscxy
.121e	20 df 18	               jsr  pop
.1221	08		               php
.1222	48		               pha
.1223	8a		               txa
.1224	48		               pha
.1225	ad 4f 16	               lda  f7abutton
.1228	48		               pha
.1229	a9 92		               lda  #146
.122b	8d 5e 16	               sta  f7abutton+15
.122e	a9 0d		               lda  #flashcol
.1230	8d 4f 16	               sta  f7abutton
.1233	a2 4f		               ldx  #<f7abutton
.1235	a0 16		               ldy  #>f7abutton
.1237	20 38 18	               jsr  putscxy
.123a	20 31 0e	               jsr  delay
.123d	a9 12		               lda  #18
.123f	8d 5e 16	               sta  f7abutton+15
.1242	68		               pla
.1243	8d 4f 16	               sta  f7abutton
.1246	a2 4f		               ldx  #<f7abutton
.1248	a0 16		               ldy  #>f7abutton
.124a	20 38 18	               jsr  putscxy
.124d	68		               pla
.124e	aa		               tax
.124f	68		               pla
.1250	28		               plp
.1251	4c 98 12	               jmp  out
.1254			menub
.1254	20 a0 18	               jsr  push
.1257	a2 47		               ldx  #<blankmsg
.1259	a0 13		               ldy  #>blankmsg
.125b	20 38 18	               jsr  putscxy
.125e	a2 c4		               ldx  #<f7b_msg
.1260	a0 14		               ldy  #>f7b_msg
.1262	20 38 18	               jsr  putscxy
.1265	20 df 18	               jsr  pop
.1268	08		               php
.1269	48		               pha
.126a	8a		               txa
.126b	48		               pha
.126c	ad 1f 17	               lda  f7bbutton
.126f	48		               pha
.1270	a9 92		               lda  #146
.1272	8d 2e 17	               sta  f7bbutton+15
.1275	a9 0d		               lda  #flashcol
.1277	8d 1f 17	               sta  f7bbutton
.127a	a2 1f		               ldx  #<f7bbutton
.127c	a0 17		               ldy  #>f7bbutton
.127e	20 38 18	               jsr  putscxy
.1281	20 31 0e	               jsr  delay
.1284	a9 12		               lda  #18
.1286	8d 2e 17	               sta  f7bbutton+15
.1289	68		               pla
.128a	8d 1f 17	               sta  f7bbutton
.128d	a2 1f		               ldx  #<f7bbutton
.128f	a0 17		               ldy  #>f7bbutton
.1291	20 38 18	               jsr  putscxy
.1294	68		               pla
.1295	aa		               tax
.1296	68		               pla
.1297	28		               plp
.1298	68		out            pla
.1299	60		               rts
.129a			f8action
.129a	48		               pha
.129b	a9 00		               lda  #$0
.129d	8d 3a 13	               sta  editmode
.12a0	ad 3b 13	               lda  fkeyset
.12a3	d0 47		               bne  menub
.12a5	20 a0 18	               jsr  push
.12a8	a2 47		               ldx  #<blankmsg
.12aa	a0 13		               ldy  #>blankmsg
.12ac	20 38 18	               jsr  putscxy
.12af	a2 31		               ldx  #<menub_msg
.12b1	a0 15		               ldy  #>menub_msg
.12b3	20 38 18	               jsr  putscxy
.12b6	20 df 18	               jsr  pop
.12b9	08		               php
.12ba	48		               pha
.12bb	8a		               txa
.12bc	48		               pha
.12bd	ad 69 16	               lda  f8abutton
.12c0	48		               pha
.12c1	a9 92		               lda  #146
.12c3	8d 78 16	               sta  f8abutton+15
.12c6	a9 0d		               lda  #flashcol
.12c8	8d 69 16	               sta  f8abutton
.12cb	a2 69		               ldx  #<f8abutton
.12cd	a0 16		               ldy  #>f8abutton
.12cf	20 38 18	               jsr  putscxy
.12d2	20 31 0e	               jsr  delay
.12d5	a9 12		               lda  #18
.12d7	8d 78 16	               sta  f8abutton+15
.12da	68		               pla
.12db	8d 69 16	               sta  f8abutton
.12de	a2 69		               ldx  #<f8abutton
.12e0	a0 16		               ldy  #>f8abutton
.12e2	20 38 18	               jsr  putscxy
.12e5	68		               pla
.12e6	aa		               tax
.12e7	68		               pla
.12e8	28		               plp
.12e9	4c 30 13	               jmp  swapit
.12ec			menub
.12ec	20 a0 18	               jsr  push
.12ef	a2 47		               ldx  #<blankmsg
.12f1	a0 13		               ldy  #>blankmsg
.12f3	20 38 18	               jsr  putscxy
.12f6	a2 16		               ldx  #<menua_msg
.12f8	a0 15		               ldy  #>menua_msg
.12fa	20 38 18	               jsr  putscxy
.12fd	20 df 18	               jsr  pop
.1300	08		               php
.1301	48		               pha
.1302	8a		               txa
.1303	48		               pha
.1304	ad 39 17	               lda  f8bbutton
.1307	48		               pha
.1308	a9 92		               lda  #146
.130a	8d 48 17	               sta  f8bbutton+15
.130d	a9 0d		               lda  #flashcol
.130f	8d 39 17	               sta  f8bbutton
.1312	a2 39		               ldx  #<f8bbutton
.1314	a0 17		               ldy  #>f8bbutton
.1316	20 38 18	               jsr  putscxy
.1319	20 31 0e	               jsr  delay
.131c	a9 12		               lda  #18
.131e	8d 48 17	               sta  f8bbutton+15
.1321	68		               pla
.1322	8d 39 17	               sta  f8bbutton
.1325	a2 39		               ldx  #<f8bbutton
.1327	a0 17		               ldy  #>f8bbutton
.1329	20 38 18	               jsr  putscxy
.132c	68		               pla
.132d	aa		               tax
.132e	68		               pla
.132f	28		               plp
.1330	49 ff		swapit         eor  #$ff
.1332	8d 3b 13	               sta  fkeyset
.1335	20 ca 0c	               jsr  showfkeys
.1338	68		               pla
.1339	60		               rts
>133a	00		editmode       .byte     0
>133b	00		fkeyset        .byte     0
>133c	00		currentchar    .byte     0
>133d	00		currentkey     .byte     0
>133e	00		bitmapoffset   .byte     0
>133f	00 00		mapaddr        .word     0
>1341	00 00		byteaddr       .word     0
>1343	00 00		gridaddr       .word     0
>1345	09		cursln         .byte     grid_top
>1346	01		curscl         .byte     grid_left

;******  Processing file: messages.asm

>1347	0d 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>134b	20 20 20 20	               .null     "                                      "
>134f	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>135f	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>136f	20 20 00
.1372			f1a_msg
>1372	0d 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>1376	20 45 44 49	               .null     " edit mode: chr$(   )",146
>137a	54 20 4d 4f 44 45 3a 20 43 48 52 24 28 20 20 20
>138a	29 92 00
.138d			f2a_msg
>138d	0d 00 05 92	save_msg       .byte     mesgcol,0,5,146
>1391	20 53 41 56	               .null     " save on cassette or disk? (c/d):"
>1395	45 20 4f 4e 20 43 41 53 53 45 54 54 45 20 4f 52
>13a5	20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.13b3			f3a_msg
>13b3	0d 00 05	load_msg       .byte     mesgcol,0,5
>13b6	20 4c 4f 41	               .null     " load from cassette or disk? (c/d):"
>13ba	44 20 46 52 4f 4d 20 43 41 53 53 45 54 54 45 20
>13ca	4f 52 20 44 49 53 4b 3f 20 28 43 2f 44 29 3a 00
.13da			f4a_msg
>13da	0d 00 05	copy_msg       .byte     mesgcol,0,5
>13dd	20 45 4e 54	               .null     " enter character to copy:"
>13e1	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>13f1	43 4f 50 59 3a 00
.13f7			f5a_msg
>13f7	0d 00 05	clear_msg      .byte     mesgcol,0,5
>13fa	20 43 4c 45	               .null     " clear char: chr$(   )"
>13fe	41 52 20 43 48 41 52 3a 20 43 48 52 24 28 20 20
>140e	20 29 00
.1411			f6a_msg
>1411	0d 00 05	fill_msg       .byte     mesgcol,0,5
>1414	20 46 49 4c	               .null     " fill char:  chr$(   )"
>1418	4c 20 43 48 41 52 3a 20 20 43 48 52 24 28 20 20
>1428	20 29 00
.142b			f7a_msg
>142b	0d 00 05	work_msg       .byte     mesgcol,0,5
>142e	20 45 4e 41	               .null     " enable work space"
>1432	42 4c 45 20 57 4f 52 4b 20 53 50 41 43 45 00
.1441			f1b_msg
>1441	0d 00 05	rvrs_msg       .byte     mesgcol,0,5
>1444	20 52 45 56	               .null     " reverse character:"
>1448	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
.1458			f2b_msg
>1458	0d 00 05	invr_msg       .byte     mesgcol,0,5
>145b	20 49 4e 56	               .null     " inverting character:"
>145f	45 52 54 49 4e 47 20 43 48 41 52 41 43 54 45 52
>146f	3a 00
.1471			f3b_msg
>1471	0d 00 05	flip_msg       .byte     mesgcol,0,5
>1474	20 46 4c 49	               .null     " flipping character:"
>1478	50 50 49 4e 47 20 43 48 41 52 41 43 54 45 52 3a
>1488	00
.1489			f4b_msg
>1489	0d 00 05	scrollr_msg    .byte     mesgcol,0,5
>148c	20 53 43 52	               .null     " scrolling right:"
>1490	4f 4c 4c 49 4e 47 20 52 49 47 48 54 3a 00
.149e			f5b_msg
>149e	0d 00 05	scrolll_msg    .byte     mesgcol,0,5
>14a1	20 53 43 52	               .null     " scrolling left:"
>14a5	4f 4c 4c 49 4e 47 20 4c 45 46 54 3a 00
.14b2			f6b_msg
>14b2	0d 00 05	scrollu_msg    .byte     mesgcol,0,5
>14b5	20 53 43 52	               .null     " scrolling up:"
>14b9	4f 4c 4c 49 4e 47 20 55 50 3a 00
.14c4			f7b_msg
>14c4	0d 00 05	scrolld_msg    .byte     mesgcol,0,5
>14c7	20 53 43 52	               .null     " scrolling down:"
>14cb	4f 4c 4c 49 4e 47 20 44 4f 57 4e 3a 00
>14d8	0d 00 05	save_fname_msg .byte     mesgcol,0,5
>14db	20 53 41 56	               .null     " save: file name ------.chr"
>14df	45 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>14ef	2d 2d 2d 2e 43 48 52 00
>14f7	0d 00 05	load_fname_msg .byte     mesgcol,0,5
>14fa	20 4c 4f 41	               .null     " load: file name ------.chr"
>14fe	44 3a 20 46 49 4c 45 20 4e 41 4d 45 20 2d 2d 2d
>150e	2d 2d 2d 2e 43 48 52 00
>1516	0d 00 05	menua_msg      .byte     mesgcol,0,5
>1519	20 59 4f 55	               .null     " you are now in menu a."
>151d	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>152d	20 41 2e 00
>1531	0d 00 05	menub_msg      .byte     mesgcol,0,5
>1534	20 59 4f 55	               .null     " you are now in menu b."
>1538	20 41 52 45 20 4e 4f 57 20 49 4e 20 4d 45 4e 55
>1548	20 42 2e 00
>154c	0e 15 18 12	quit_msg       .byte     vblue1,21,24,18
>1550	43 54 52 4c	               .text     "ctrl-x",146
>1554	2d 58 92
>1557	20 54 4f 20	               .null     " to quit."
>155b	51 55 49 54 2e 00
>1561	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>1565	43 54 52 4c	               .text     "ctrl-x",146
>1569	2d 58 92
>156c	20 54 4f 20	               .null     " to menu."
>1570	4d 45 4e 55 2e 00
>1576	03 06 0c 12	bye_msg        .byte     vcyan,6,12,18
>157a	20 54 48 41	               .null     " thanks and have a good day ",146
>157e	4e 4b 53 20 41 4e 44 20 48 41 56 45 20 41 20 47
>158e	4f 4f 44 20 44 41 59 20 92 00
>1598	07 0a 18 12	any_msg        .byte     vjaune,10,24,18
>159c	20 41 4e 59	               .null         " any key to continue ",146
>15a0	20 4b 45 59 20 54 4f 20 43 4f 4e 54 49 4e 55 45
>15b0	20 92 00
=18			fkeyleft=18
=8			f1top=8
=1			menu1col = 1
=3			menu2col = 3
>15b3	01 12 08	f1abutton      .byte     menu1col,fkeyleft,f1top       ;133
>15b6	45 44 49 54	               .text     "edit....... "
>15ba	2e 2e 2e 2e 2e 2e 2e 20
>15c2	12		               .byte     18             ; position 15
>15c3	20 20 20 46	               .text     "   f1   "
>15c7	31 20 20 20
>15cb	92 00		               .byte     146,0
>15cd	01 12 0a	f2abutton      .byte     menu1col,fkeyleft,f1top+2     ;137
>15d0	53 41 56 45	               .text     "save....... "
>15d4	2e 2e 2e 2e 2e 2e 2e 20
>15dc	12		               .byte     18            ; position 15
>15dd	20 20 20 46	               .text     "   f2   "
>15e1	32 20 20 20
>15e5	92 00		               .byte     146,0
>15e7	01 12 0c	f3abutton      .byte     menu1col,fkeyleft,f1top+4     ;134
>15ea	4c 4f 41 44	               .text     "load....... "
>15ee	2e 2e 2e 2e 2e 2e 2e 20
>15f6	12		               .byte     18             ; position 15
>15f7	20 20 20 46	               .text     "   f3   "
>15fb	33 20 20 20
>15ff	92 00		               .byte     146,0
>1601	01 12 0e	f4abutton      .byte     menu1col,fkeyleft,f1top+6     ;138
>1604	43 4f 50 59	               .text     "copy....... "
>1608	2e 2e 2e 2e 2e 2e 2e 20
>1610	12		               .byte     18             ; position 15
>1611	20 20 20 46	               .text     "   f4   "
>1615	34 20 20 20
>1619	92 00		               .byte     146,0
>161b	01 12 10	f5abutton      .byte     menu1col,fkeyleft,f1top+8     ;135
>161e	43 4c 45 41	               .text     "clear...... "
>1622	52 2e 2e 2e 2e 2e 2e 20
>162a	12		               .byte     18             ; position 15
>162b	20 20 20 46	               .text     "   f5   "
>162f	35 20 20 20
>1633	92 00		               .byte     146,0
>1635	01 12 12	f6abutton      .byte     menu1col,fkeyleft,f1top+10    ;139
>1638	46 49 4c 4c	               .text     "fill....... "
>163c	2e 2e 2e 2e 2e 2e 2e 20
>1644	12		               .byte     18             ; position 15
>1645	20 20 20 46	               .text     "   f6   "
>1649	36 20 20 20
>164d	92 00		               .byte     146,0
>164f	01 12 14	f7abutton      .byte     menu1col,fkeyleft,f1top+12    ;136
>1652	57 4f 52 4b	               .text     "work....... "
>1656	2e 2e 2e 2e 2e 2e 2e 20
>165e	12		               .byte     18             ; position 15
>165f	20 20 20 46	               .text     "   f7   "
>1663	37 20 20 20
>1667	92 00		               .byte     146,0
>1669	01 12 16	f8abutton      .byte     menu1col,fkeyleft,f1top+14    ;140
>166c	46 55 4e 43	               .text     "function... "
>1670	54 49 4f 4e 2e 2e 2e 20
>1678	12		               .byte     18             ; position 15
>1679	20 20 20 46	               .text     "   f8   "
>167d	38 20 20 20
>1681	92 00		               .byte     146,0
>1683	03 12 08	f1bbutton      .byte     menu2col,fkeyleft,f1top
>1686	52 45 56 45	               .text     "reverse.... "
>168a	52 53 45 2e 2e 2e 2e 20
>1692	12		               .byte     18             ; position 15
>1693	20 20 20 46	               .text     "   f1   "
>1697	31 20 20 20
>169b	92 00		               .byte     146,0
>169d	03 12 0a	f2bbutton      .byte     menu2col,fkeyleft,f1top+2
>16a0	49 4e 56 45	               .text     "invert..... "
>16a4	52 54 2e 2e 2e 2e 2e 20
>16ac	12		               .byte     18             ; position 15
>16ad	20 20 20 46	               .text     "   f2   "
>16b1	32 20 20 20
>16b5	92 00		               .byte     146,0
>16b7	03 12 0c	f3bbutton      .byte     menu2col,fkeyleft,f1top+4
>16ba	46 4c 49 50	               .text     "flip....... "
>16be	2e 2e 2e 2e 2e 2e 2e 20
>16c6	12		               .byte     18             ; position 15
>16c7	20 20 20 46	               .text     "   f3   "
>16cb	33 20 20 20
>16cf	92 00		               .byte     146,0
>16d1	03 12 0e	f4bbutton      .byte     menu2col,fkeyleft,f1top+6
>16d4	53 43 52 4f	               .text     "scroll r... "
>16d8	4c 4c 20 52 2e 2e 2e 20
>16e0	12		               .byte     18             ; position 15
>16e1	20 20 20 46	               .text     "   f4   "
>16e5	34 20 20 20
>16e9	92 00		               .byte     146,0
>16eb	03 12 10	f5bbutton      .byte     menu2col,fkeyleft,f1top+8
>16ee	53 43 52 4f	               .text     "scroll l... "
>16f2	4c 4c 20 4c 2e 2e 2e 20
>16fa	12		               .byte     18             ; position 15
>16fb	20 20 20 46	               .text     "   f5   "
>16ff	35 20 20 20
>1703	92 00		               .byte     146,0
>1705	03 12 12	f6bbutton      .byte     menu2col,fkeyleft,f1top+10
>1708	53 43 52 4f	               .text     "scroll u... "
>170c	4c 4c 20 55 2e 2e 2e 20
>1714	12		               .byte     18             ; position 15
>1715	20 20 20 46	               .text     "   f6   "
>1719	36 20 20 20
>171d	92 00		               .byte     146,0
>171f	03 12 14	f7bbutton      .byte     menu2col,fkeyleft,f1top+12
>1722	53 43 52 4f	               .text     "scroll d... "
>1726	4c 4c 20 44 2e 2e 2e 20
>172e	12		               .byte     18             ; position 15
>172f	20 20 20 46	               .text     "   f7   "
>1733	37 20 20 20
>1737	92 00		               .byte     146,0
>1739	03 12 16	f8bbutton      .byte     menu2col,fkeyleft,f1top+14
>173c	46 55 4e 43	               .text     "function... "
>1740	54 49 4f 4e 2e 2e 2e 20
>1748	12		               .byte     18             ; position 15
>1749	20 20 20 46	               .text     "   f8   "
>174d	38 20 20 20
>1751	92 00		               .byte     146,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.1753			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.1753			screendis
.1753	08		               php
.1754	48		               pha
.1755	ad 11 d0	               lda  $d011
.1758	29 ef		               and  #%11101111
.175a	8d 11 d0	               sta  $d011
.175d	68		               pla
.175e	28		               plp
.175f	60		               rts
.1760			screenena
.1760	08		               php
.1761	48		               pha
.1762	ad 11 d0	               lda  $d011
.1765	09 10		               ora  #%00010000
.1767	8d 11 d0	               sta  $d011
.176a	68		               pla
.176b	28		               plp
.176c	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.176d			scrmaninit
.176d	20 a0 18	               jsr  push
.1770	a9 06		               lda  #vbleu
.1772	8d 21 d0	               sta  vicbackcol
.1775	a9 05		               lda  #vvert
.1777	8d 20 d0	               sta  vicbordcol
.177a	a9 01		               lda  #vblanc
.177c	8d 86 02	               sta  bascol
.177f	ad 00 04	               lda  scrnram
.1782	8d 00 04	               sta  scrnram
.1785	20 8d 17	               jsr  cls
.1788	20 df 18	               jsr  pop
.178b	60		               rts
>178c	8e		characterset   .byte b_uppercase
.178d			cls
.178d	08		               php
.178e	48		               pha
.178f	a9 93		               lda  #$93
.1791	20 a9 17	               jsr  putch
.1794	a9 0e		               lda  #$0e
.1796	20 a9 17	               jsr  putch
.1799	68		               pla
.179a	28		               plp
.179b	60		               rts
.179c			putnch
.179c	08		               php
.179d	e0 00		               cpx  #$00
.179f	f0 06		               beq  out
.17a1	20 d2 ff	again          jsr  $ffd2
.17a4	ca		               dex
.17a5	d0 fa		               bne  again
.17a7	28		out            plp
.17a8	60		               rts
.17a9			putch
.17a9	08		               php
.17aa	20 d2 ff	               jsr  $ffd2
.17ad	28		               plp
.17ae	60		               rts
.17af			puts
.17af	20 a0 18	               jsr  push
.17b2	86 fb		               stx  zpage1
.17b4	84 fc		               sty  zpage1+1
.17b6	a0 00		               ldy  #0
.17b8	b1 fb		next           lda  (zpage1),y
.17ba	f0 09		               beq  exit
.17bc	20 a9 17	               jsr  putch
.17bf	20 a7 19	               jsr  inczp1
.17c2	4c b8 17	               jmp  next
.17c5	20 df 18	exit           jsr  pop
.17c8	60		               rts
.17c9			gotoxy
.17c9	08		               php
.17ca	18		               clc
.17cb	8a		               txa
.17cc	48		               pha
.17cd	98		               tya
.17ce	aa		               tax
.17cf	68		               pla
.17d0	a8		               tay
.17d1	20 f0 ff	               jsr  kplot
.17d4	28		               plp
.17d5	60		               rts
.17d6			cursor
=$0286			bascol    =    $0286
.17d6	08		               php
.17d7	48		               pha
.17d8	90 12		               bcc  restore
.17da	20 f0 ff	               jsr  kplot
.17dd	8c fe 17	               sty  cx
.17e0	8e ff 17	               stx  cy
.17e3	ad 86 02	               lda  bascol
.17e6	8d 00 18	               sta  bcol
.17e9	4c fb 17	               jmp  out
.17ec	ae ff 17	restore        ldx  cy
.17ef	ac fe 17	               ldy  cx
.17f2	20 f0 ff	               jsr  kplot
.17f5	ad 00 18	               lda  bcol
.17f8	8d 86 02	               sta  bascol
.17fb	68		out            pla
.17fc	28		               plp
.17fd	60		               rts
>17fe	00		cx   .byte     $00
>17ff	00		cy   .byte     $00
>1800	00		bcol .byte     $00
.1801			cursave
.1801	08		               php
.1802	38		               sec
.1803	20 d6 17	               jsr  cursor
.1806	28		               plp
.1807	60		               rts
.1808			curput
.1808	08		               php
.1809	18		               clc
.180a	20 d6 17	               jsr  cursor
.180d	28		               plp
.180e	60		               rts
.180f			putsxy
.180f	20 a0 18	               jsr  push
.1812	86 fb		               stx  zpage1
.1814	84 fc		               sty  zpage1+1
.1816	a0 00		               ldy  #$00
.1818	b1 fb		               lda  (zpage1),y
.181a	aa		               tax
.181b	20 a7 19	               jsr  inczp1
.181e	b1 fb		               lda  (zpage1),y
.1820	a8		               tay
.1821	20 c9 17	               jsr  gotoxy
.1824	20 a7 19	               jsr  inczp1
.1827	a6 fb		               ldx  zpage1
.1829	a4 fc		               ldy  zpage1+1
.182b	20 af 17	               jsr  puts
.182e	20 df 18	               jsr  pop
.1831	60		               rts
>1832	00 00		straddr   .word     $00
>1834	00		px        .byte     $00
>1835	00		py        .byte     $00
>1836	00 00		zp1       .word     $00
.1838			putscxy
.1838	20 a0 18	               jsr  push
.183b	84 fc		               sty  zpage1+1
.183d	86 fb		               stx  zpage1
.183f	ad 86 02	               lda  bascol
.1842	8d 62 18	               sta  bc
.1845	a0 00		               ldy #$00
.1847	b1 fb		               lda  (zpage1),y
.1849	8d 86 02	               sta  bascol
.184c	20 a7 19	               jsr  inczp1
.184f	a6 fb		               ldx  zpage1
.1851	a4 fc		               ldy  zpage1+1
.1853	20 0f 18	               jsr  putsxy
.1856	ad 62 18	               lda  bc
.1859	8d 86 02	               sta  bascol
.185c	20 df 18	               jsr  pop
.185f	60		               rts
>1860	00 00		straddr  .word      $00
>1862	00		bc       .byte      $00
>1863	00 00		zp1      .word      $00
.1865			putrahex
.1865	08		               php
.1866	48		               pha
.1867	20 bd 1a	               jsr  a2hex
.186a	a9 5c		               lda  #<a2hexstr
.186c	a0 1a		               ldy  #>a2hexstr
.186e	20 af 17	               jsr  puts
.1871	68		               pla
.1872	28		               plp
.1873	60		               rts
.1874			kputrahexxy
.1874			bputrahexxy
.1874			putrahexxy
.1874	08		               php
.1875	20 bd 1a	               jsr  a2hex
.1878	a9 59		               lda  #<a2hexpos
.187a	a0 1a		               ldy  #>a2hexpos
.187c	20 0f 18	               jsr  putsxy
.187f	68		               pla
.1880	28		               plp
.1881	60		               rts
.1882			putrahexcxy
.1882	08		               php
.1883	20 bd 1a	               jsr  a2hex
.1886	a9 59		               lda  #<a2hexpos
.1888	a0 1a		               ldy  #>a2hexpos
.188a	20 38 18	               jsr  putscxy
.188d	68		               pla
.188e	28		               plp
.188f	60		               rts
.1890			setinverse
.1890	48		               pha
.1891	a9 12		               lda  #$12
.1893	20 d2 ff	               jsr  $ffd2
.1896	68		               pla
.1897	60		               rts
.1898			clrinverse
.1898	48		               pha
.1899	a9 92		               lda  #$92
.189b	20 d2 ff	               jsr  $ffd2
.189e	68		               pla
.189f	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.18a0			push
.18a0	08		          php            ; stack : flg, pcl, pch
.18a1	78		          sei
.18a2	8d dc 18	          sta  ra        ; save a
.18a5	68		          pla            ; stack : pcl, pch
.18a6	8d db 18	          sta  rp        ; save rp
.18a9	68		          pla            ; stack : pch
.18aa	8d dd 18	          sta  pc        ; save pcl
.18ad	68		          pla            ; stack : -
.18ae	8d de 18	          sta  pc+1      ; save pch
.18b1	a5 fb		          lda  zpage1    ; get zpage1 low byte
.18b3	48		          pha            ; stack : zp1l
.18b4	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.18b6	48		          pha            ; stack : zp1h, zp1l
.18b7	a5 fd		          lda  zpage2    ; get zpage2 low byte
.18b9	48		          pha            ; stack : zp2l, zp1h, zp1l
.18ba	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.18bc	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.18bd	ad db 18	          lda  rp        ; get rp
.18c0	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.18c1	ad dc 18	          lda  ra        ; get a
.18c4	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.18c5	8a		          txa            ; get x
.18c6	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.18c7	98		          tya            ; get y
.18c8	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.18c9	ad de 18	          lda  pc+1      ; get pch
.18cc	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.18cd	ad dd 18	          lda  pc        ; get pcl
.18d0	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.18d1	ad db 18	          lda  rp        ; get rp
.18d4	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.18d5	ad dc 18	          lda  ra        ; get a
.18d8	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.18d9	58		          cli
.18da	60		          rts
>18db	00		rp        .byte     0
>18dc	00		ra        .byte     0
>18dd	00 00		pc        .word     0
.18df			pull
.18df			pop
.18df	78		          sei
.18e0	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.18e1	8d 14 19	          sta  pc        ; save pcl
.18e4	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.18e5	8d 15 19	          sta  pc+1      ; save pch
.18e8	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.18e9	a8		          tay            ; set y
.18ea	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.18eb	aa		          tax            ; set x
.18ec	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.18ed	8d 13 19	          sta  ra        ; save a
.18f0	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.18f1	8d 12 19	          sta  rp        ; save rp
.18f4	68		          pla            ; stack : zp2l, zp1h, zp1l
.18f5	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.18f7	68		          pla            ; stack : zp1h, zp1l
.18f8	85 fd		          sta  zpage2    ; get zpage2 High byte
.18fa	68		          pla            ; stack : zp1l
.18fb	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.18fd	68		          pla            ; stack :
.18fe	85 fb		          sta  zpage1    ; get zpage1 High byte
.1900	ad 15 19	          lda  pc+1      ; get pch
.1903	48		          pha            ; stack : pch
.1904	ad 14 19	          lda  pc
.1907	48		          pha            ; stack : pcl, pch
.1908	ad 12 19	          lda  rp        ; get rp
.190b	48		          pha            ; stack : rp, pcl, pch
.190c	ad 13 19	          lda  ra        ; set ra
.190f	58		          cli
.1910	28		          plp            ; stack : pcl, pch
.1911	60		          rts
>1912	00		rp        .byte     0
>1913	00		ra        .byte     0
>1914	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.1916			blkfill
.1916	20 a0 18	bf0            jsr  push
.1919	20 d7 19	               jsr  savezp1
.191c	84 fc		               sty  zpage1+1
.191e	a0 00		               ldy  #$00
.1920	84 fb		               sty  zpage1
.1922	91 fb		bf1            sta  (zpage1),y
.1924	c8		               iny
.1925	d0 fb		               bne  bf1
.1927	20 e6 19	               jsr  restzp1
.192a	20 df 18	               jsr  pop
.192d	60		               rts
.192e			memfill
.192e	20 a0 18	               jsr  push
.1931	20 16 19	mf1            jsr  blkfill
.1934	c8		               iny
.1935	ca		               dex
.1936	d0 f9		               bne  mf1
.1938	20 df 18	               jsr  pop
.193b	60		               rts
.193c			memmove
.193c	20 a0 18	               jsr  push
.193f	ba		               tsx            ; On se crée un pointeur ...
.1940	8a		               txa
.1941	18		               clc
.1942	69 0b		               adc  #11
.1944	a8		               tay
.1945	a2 06		               ldx  #$06
.1947	b9 00 01	nextbyte       lda  $0100,y
.194a	99 96 19	               sta  words,y
.194d	c8		               iny
.194e	ca		               dex
.194f	d0 f6		               bne  nextbyte
.1951	ad 96 19	               lda  s
.1954	8d 6d 19	               sta  source+1
.1957	ad 97 19	               lda  s+1
.195a	8d 6e 19	               sta  source+2
.195d	ad 98 19	               lda  d
.1960	8d 6a 19	               sta  destin+1
.1963	ad 99 19	               lda  d+1
.1966	8d 6b 19	               sta  destin+2
.1969	ad ff ff	destin         lda  $ffff
.196c	8d ff ff	source         sta  $ffff
.196f	ee 6a 19	               inc  destin+1
.1972	d0 03		               bne  src
.1974	ee 6b 19	               inc  destin+2
.1977	ee 6d 19	src            inc  source+1
.197a	d0 03		               bne  cnt
.197c	ee 6e 19	               inc  source+2
.197f	ad 9a 19	cnt            lda  compte
.1982	d0 08		               bne  decit
.1984	ad 9b 19	               lda  compte+1
.1987	f0 09		               beq  fini
.1989	ce 9b 19	               dec  compte+1
.198c	ce 9a 19	decit          dec  compte
.198f	4c 69 19	               jmp  destin
.1992	20 df 18	fini           jsr  pop
.1995	60		               rts
.1996			words
>1996	00 00		s         .word     $0000
>1998	00 00		d         .word     $0000
>199a	00 00		compte    .word     $0000
.199c			decword
.199c	20 a0 18	               jsr  push
.199f	86 fd		               stx  zpage2
.19a1	84 fe		               sty  zpage2+1
.19a3	20 df 18	               jsr  pop
.19a6	60		               rts
.19a7			inczp1
.19a7	08		               php
.19a8	48		               pha
.19a9	e6 fb		               inc  zpage1
.19ab	a5 fb		               lda  zpage1
.19ad	d0 02		               bne  nopage
.19af	e6 fc		               inc  zpage1+1
.19b1	68		nopage         pla
.19b2	28		               plp
.19b3	60		               rts
.19b4			deczp1
.19b4	08		                php
.19b5	48		                pha
.19b6	c6 fb		                dec  zpage1
.19b8	d0 02		                bne  nopage
.19ba	c6 fc		                dec  zpage1+1
.19bc	68		nopage          pla
.19bd	28		                plp
.19be	60		                rts
.19bf			inczp2
.19bf	08		               php
.19c0	48		               pha
.19c1	e6 fd		               inc  zpage2
.19c3	a5 fd		               lda  zpage2
.19c5	d0 02		               bne  nopage
.19c7	e6 fe		               inc  zpage2+1
.19c9	68		nopage         pla
.19ca	28		               plp
.19cb	60		               rts
.19cc			deczp2
.19cc	08		               php
.19cd	48		               pha
.19ce	a5 fd		               lda  zpage2
.19d0	d0 02		               bne  nopage
.19d2	c6 fe		               dec  zpage2+1
.19d4	68		nopage         pla
.19d5	28		               plp
.19d6	60		               rts
.19d7			savezp1
.19d7	08		               php
.19d8	48		               pha
.19d9	a5 fb		               lda  zpage1
.19db	8d 53 1a	               sta  zp1
.19de	a5 fc		               lda  zpage1+1
.19e0	8d 54 1a	               sta  zp1+1
.19e3	68		               pla
.19e4	28		               plp
.19e5	60		               rts
.19e6			restzp1
.19e6	08		               php
.19e7	48		               pha
.19e8	ad 53 1a	               lda zp1
.19eb	85 fb		               sta zpage1
.19ed	ad 54 1a	               lda zp1+1
.19f0	85 fc		               sta zpage1+1
.19f2	68		               pla
.19f3	28		               plp
.19f4	60		               rts
.19f5			savezp2
.19f5	08		         php
.19f6	48		         pha
.19f7	a5 fd		         lda zpage2
.19f9	8d 55 1a	         sta zp2
.19fc	a5 fe		         lda zpage2+1
.19fe	8d 56 1a	         sta zp2+1
.1a01	68		         pla
.1a02	28		         plp
.1a03	60		         rts
.1a04			restzp2
.1a04	08		                php
.1a05	48		                pha
.1a06	ad 55 1a	                lda  zp2
.1a09	85 fd		                sta  zpage2
.1a0b	ad 56 1a	                lda  zp2+1
.1a0e	85 fe		                sta  zpage2+1
.1a10	68		                pla
.1a11	28		                plp
.1a12	60		                rts
.1a13			xy2addr
.1a13	08		                php
.1a14	48		                pha
.1a15	8a		                txa
.1a16	48		                pha
.1a17	98		                tya
.1a18	48		                pha
.1a19	ad 4e 1a	                lda     addr1+1
.1a1c	8d 50 1a	                sta     addr2+1
.1a1f	ad 4d 1a	                lda     addr1
.1a22	8d 4f 1a	                sta     addr2
.1a25	c0 00		                cpy     #$00
.1a27	f0 0f		                beq     addx
.1a29	18		moreline        clc
.1a2a	6d 4c 1a	                adc     ymult
.1a2d	90 03		                bcc     norepy
.1a2f	ee 50 1a	                inc     addr2+1
.1a32	8d 4f 1a	norepy          sta     addr2
.1a35	88		                dey
.1a36	d0 f1		                bne     moreline
.1a38	8a		addx            txa
.1a39	18		                clc
.1a3a	6d 4f 1a	                adc     addr2
.1a3d	90 03		                bcc     thatsit
.1a3f	ee 50 1a	                inc     addr2+1
.1a42	8d 4f 1a	thatsit         sta     addr2
.1a45	68		                pla
.1a46	a8		                tay
.1a47	68		                pla
.1a48	aa		                tax
.1a49	68		                pla
.1a4a	28		                plp
.1a4b	60		                rts
>1a4c	28		ymult          .byte     40
>1a4d	00 00		addr1          .word     $0000
>1a4f	00 00		addr2          .word     $0000
>1a51	00 00		bytecnt        .word     $0000
>1a53	00 00		zp1        .word   $0000
>1a55	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>1a57	01		a2hexcol       .byte     1              ; pour aputscxy
>1a58	00		a2hexbkcol     .byte     %00000000
.1a59			a2hexpos
>1a59	00		a2hexpx        .byte     0              ; pour aputsxy
>1a5a	00		a2hexpy        .byte     0
>1a5b	24		a2hexprefix    .byte     "$"            ; pour aputs
>1a5c	00 00		a2hexstr       .word     $00
>1a5e	00 00		               .word     $00
>1a60	00		               .byte     0              ; 0 end string
>1a61	30 30 30 30	abin           .null     "00000000"
>1a65	30 30 30 30 00
>1a6a	20 20 20 00	adec           .null     "   "
.1a6e			putahexfmtxy
.1a6e	20 a0 18	               jsr  push
.1a71	20 bd 1a	               jsr  a2hex
.1a74	ae 59 1a	               ldx  a2hexpx
.1a77	ac 5a 1a	               ldy  a2hexpy
.1a7a	20 c9 17	               jsr  gotoxy
.1a7d	a2 5b		               ldx  #<a2hexprefix
.1a7f	a0 1a		               ldy  #>a2hexprefix
.1a81	20 af 17	               jsr  puts
.1a84	20 df 18	               jsr  pop
.1a87	60		               rts
.1a88			putahexfmt
.1a88	20 a0 18	               jsr  push
.1a8b	20 bd 1a	               jsr  a2hex
.1a8e	a2 5b		               ldx  #<a2hexprefix
.1a90	a0 1a		               ldy  #>a2hexprefix
.1a92	20 af 17	               jsr  puts
.1a95	20 df 18	               jsr  pop
.1a98	60		               rts
.1a99			putahex
.1a99	20 a0 18	               jsr  push
.1a9c	20 bd 1a	               jsr  a2hex
.1a9f	a2 5c		               ldx  #<a2hexstr
.1aa1	a0 1a		               ldy  #>a2hexstr
.1aa3	20 af 17	               jsr  puts
.1aa6	20 df 18	               jsr  pop
.1aa9	60		               rts
.1aaa			nib2hex
.1aaa	08		               php
.1aab	29 0f		               and  #$0f
.1aad	f8		               sed
.1aae	18		               clc
.1aaf	69 90		               adc  #$90
.1ab1	69 40		               adc  #$40
.1ab3	d8		               cld
.1ab4	28		               plp
.1ab5	60		               rts
.1ab6			lsra4bits
.1ab6	08		               php
.1ab7	4a		               lsr
.1ab8	4a		               lsr
.1ab9	4a		               lsr
.1aba	4a		               lsr
.1abb	28		               plp
.1abc	60		               rts
.1abd			a2hex
.1abd	08		               php
.1abe	48		               pha
.1abf	48		               pha
.1ac0	20 b6 1a	               jsr  lsra4bits
.1ac3	20 aa 1a	               jsr  nib2hex
.1ac6	8d 5c 1a	               sta  a2hexstr
.1ac9	68		               pla
.1aca	20 aa 1a	               jsr  nib2hex
.1acd	8d 5d 1a	               sta  a2hexstr+1
.1ad0	a9 00		               lda  #$00                ; set end of string
.1ad2	8d 5e 1a	               sta  a2hexstr+2
.1ad5	68		               pla
.1ad6	28		               plp
.1ad7	60		               rts
.1ad8			xy2hex
.1ad8	20 a0 18	               jsr  push
.1adb	20 bd 1a	               jsr  a2hex
.1ade	8a		               txa
.1adf	48		               pha
.1ae0	20 b6 1a	               jsr  lsra4bits
.1ae3	20 aa 1a	               jsr  nib2hex
.1ae6	8d 5c 1a	               sta  a2hexstr
.1ae9	68		               pla
.1aea	20 aa 1a	               jsr  nib2hex
.1aed	8d 5d 1a	               sta  a2hexstr+1
.1af0	98		               tya
.1af1	48		               pha
.1af2	20 b6 1a	               jsr  lsra4bits
.1af5	20 aa 1a	               jsr  nib2hex
.1af8	8d 5e 1a	               sta  a2hexstr+2
.1afb	68		               pla
.1afc	20 aa 1a	               jsr  nib2hex
.1aff	8d 5f 1a	               sta  a2hexstr+3
.1b02	a9 00		               lda  #$00                ; 0 ended string
.1b04	8d 60 1a	               sta  a2hexstr+4
.1b07	20 df 18	               jsr  pop
.1b0a			atobin
.1b0a	20 a0 18	               jsr  push
.1b0d	a2 08		               ldx  #8
.1b0f	a0 00		               ldy  #0
.1b11	18		               clc
.1b12	2a		nextbit        rol
.1b13	48		               pha
.1b14	69 00		               adc  #$00
.1b16	29 01		               and  #$01
.1b18	20 aa 1a	               jsr  nib2hex
.1b1b	99 61 1a	               sta  abin,y
.1b1e	68		               pla
.1b1f	c8		               iny
.1b20	ca		               dex
.1b21	d0 ef		               bne  nextbit
.1b23	a9 00		               lda  #0
.1b25	99 61 1a	               sta  abin,y
.1b28	20 df 18	               jsr  pull
.1b2b	60		               rts
.1b2c			putabin
.1b2c	20 0a 1b	               jsr     atobin
.1b2f	20 a0 18	               jsr     push
.1b32	a2 61		               ldx     #<abin
.1b34	a0 1a		               ldy     #>abin
.1b36	20 af 17	               jsr     puts
.1b39	20 df 18	               jsr     pop
.1b3c	60		               rts
.1b3d			printabin
.1b3d	20 a0 18	               jsr     push
.1b40	a2 61		               ldx     #<abin
.1b42	a0 1a		               ldy     #>abin
.1b44	20 af 17	               jsr     puts
.1b47	20 df 18	               jsr     pop
.1b4a	60		               rts
.1b4b			putabinfmt
.1b4b	08		               php
.1b4c	48		               pha
.1b4d	a9 25		               lda     #"%"
.1b4f	20 a9 17	               jsr     putch
.1b52	68		               pla
.1b53	20 2c 1b	               jsr     putabin
.1b56	28		               plp
.1b57	60		               rts
.1b58			putabinxy
.1b58	20 c9 17	               jsr     gotoxy
.1b5b	20 2c 1b	               jsr     putabin
.1b5e	60		               rts
.1b5f			putabinfmtxy
.1b5f	20 c9 17	               jsr     gotoxy
.1b62	20 4b 1b	               jsr     putabinfmt
.1b65	60		               rts
.1b66			atodec
.1b66	20 a0 18	               jsr  push
.1b69	f8		               sed
.1b6a	aa		               tax
.1b6b	a0 00		               ldy  #$00
.1b6d	a9 00		               lda  #$00
.1b6f	18		nextbit        clc
.1b70	69 01		               adc  #$01
.1b72	90 01		               bcc  decx
.1b74	c8		               iny
.1b75	ca		decx           dex
.1b76	d0 f7		               bne  nextbit
.1b78	48		               pha
.1b79	98		               tya
.1b7a	20 aa 1a	               jsr  nib2hex
.1b7d	8d 6a 1a	               sta  adec
.1b80	68		               pla
.1b81	48		               pha
.1b82	20 aa 1a	               jsr  nib2hex
.1b85	8d 6c 1a	               sta  adec+2
.1b88	68		               pla
.1b89	6a		               ror
.1b8a	6a		               ror
.1b8b	6a		               ror
.1b8c	6a		               ror
.1b8d	20 aa 1a	               jsr  nib2hex
.1b90	8d 6b 1a	               sta  adec+1
.1b93	d8		               cld
.1b94	20 df 18	               jsr  pull
.1b97	60		               rts
>1b98	00 00 00	buffer         .byte     0,0,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>1b9b	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>1b9f	00 00 00 00 00 00 00 00 00 0d 00 00
>1bab	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>1baf	00 00 00 00 00 00 00 00 00 00 00 00
>1bbb	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>1bbf	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1bcb	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1bcf	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1bdb	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1bdf	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>1beb	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1bef	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>1bfb	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1bff	00 00 00 00 00 00 00 00 00 00 00 00
>1c0b	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1c0f	00 00 00 00 00 00 00 00 00 00 00 00
>1c1b	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1c1f	00 00 00 00 00 00 00 00 00 00 00 00
>1c2b	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1c2f	00 00 00 00 00 00 00 00 00 00 00 00
>1c3b	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>1c3f	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1c4b	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1c4f	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1c5b	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1c5f	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>1c6b	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>1c6f	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>1c7b	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>1c7f	00 00 00 00 00 00 00 00 00 00 00 00
>1c8b	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>1c8f	00 00 00 00 00 00 00 00 00 00 00 00
.1c9b			waitstop
.1c9b	20 a0 18	               jsr  push
.1c9e	20 ed f6	wait           jsr  k_stop
.1ca1	d0 fb		               bne  wait
.1ca3	20 df 18	               jsr  pop
.1ca6	60		               rts
.1ca7			anykey
.1ca7	08		               php
.1ca8	48		               pha
.1ca9	a5 cb		nokey          lda 203
.1cab	c9 40		               cmp #64
.1cad	f0 fa		               beq nokey
.1caf	20 b5 1c	               jsr releasekey
.1cb2	68		               pla
.1cb3	28		               plp
.1cb4	60		               rts
.1cb5			releasekey
.1cb5	08		               php
.1cb6	48		               pha
.1cb7	a5 cb		keypressed     lda 203
.1cb9	c9 40		               cmp #64
.1cbb	d0 fa		               bne keypressed
.1cbd	68		               pla
.1cbe	28		               plp
.1cbf	60		               rts
.1cc0			getkey
.1cc0	20 e4 ff	again          jsr  getin
.1cc3	c9 00		               cmp  #0
.1cc5	f0 f9		               beq  again
.1cc7	60		               rts
.1cc8			waitkey
.1cc8	20 a0 18	               jsr  push
.1ccb	8d 19 1d	               sta  thekey
.1cce	20 e4 ff	nope           jsr  getin
.1cd1	20 d2 ff	               jsr  chrout
.1cd4	cd 19 1d	               cmp  thekey
.1cd7	d0 f5		               bne  nope
.1cd9	20 d2 ff	               jsr  chrout
.1cdc	20 df 18	               jsr  pop
.1cdf	60		               rts
.1ce0			waitspace
.1ce0	20 a0 18	               jsr  push
.1ce3	a9 7f		wait           lda  #$7f  ;%01111111
.1ce5	8d 00 dc	               sta  $dc00
.1ce8	ad 01 dc	               lda  $dc01
.1ceb	29 10		               and  #$10  ;mask %00010000
.1ced	d0 f4		               bne  wait
.1cef	20 df 18	               jsr  pop
.1cf2			waitsstop
.1cf2	20 a0 18	               jsr  push
.1cf5	20 ed f6	wait           jsr  k_stop  ;%01111111
.1cf8	d0 fb		               bne  wait
.1cfa	20 df 18	               jsr  pop
.1cfd			waitreturn
.1cfd	20 a0 18	               jsr  push
.1d00	ad 1a 1d	               lda  thecount
.1d03	8d 00 04	               sta  scrnram
.1d06	a9 02		               lda  #$02
.1d08	8d 00 d8	               sta  colorram
.1d0b	20 e4 ff	nope           jsr  getin
.1d0e	c9 0d		nohex          cmp  #$0d
.1d10	d0 f9		               bne  nope
.1d12	ee 1a 1d	               inc  thecount
.1d15	20 df 18	               jsr  pop
.1d18	60		               rts
>1d19	00		thekey         .byte   0
>1d1a	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  End of listing

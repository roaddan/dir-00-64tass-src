
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Fri Nov 24 22:32:42 2023

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm

="20231116-100400"	version  = "20231116-100400"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

=18			fkeyleft       =    18
=9			f1top          =    9
=$0400			scrnnewram     =    $0400
=10			charsdef       =    10
=9			grid_top       =    9
=1			grid_left      =    1
=16			grid_bot       =    grid_top + 7
=8			grid_right     =    grid_left + 7
=$0b			bordure        =    vgris
=$00			fond           =    vnoir
=$03			mesgcol        =    vcyan
=$03			menu1col1      =    vcyan
=$0e			menu1col2      =    vbleu1
=$0f			menu2col1      =    vgris2
=$0c			menu2col2      =    vgris1
=$01			flashcol       =    vblanc
=$07			whoamicol      =    vjaune
=$01			charcolor      =    vblanc
=$0f			charscolor     =    vgris2
.080d			main
.080d	20 3a 21	               jsr  push
.0810	20 0c 20	               jsr  scrmaninit
.0813	08		               php
.0814	48		               pha
.0815	a9 08		               lda  #$08
.0817	20 d2 ff	               jsr  $ffd2
.081a	68		               pla
.081b	28		               plp
.081c	20 30 0a	               jsr  drawcredits
.081f	a2 3f		               ldx #<menu_msg
.0821	a0 1c		               ldy #>menu_msg
.0823	20 d2 20	               jsr putscxy
.0826			wait
.0826	20 f2 1f	               jsr  screendis
.0829	20 d7 0f	               jsr  copycharset
.082c	20 2c 20	               jsr  cls
.082f	20 c1 0f	               jsr  setscreenptr
.0832	20 8f 0a	               jsr  setdefaultchar
.0835	20 32 10	               jsr  staticscreen
.0838	20 04 0f	               jsr  drawbitmap
.083b	a9 00		               lda  #$00
.083d	8d 24 09	               sta  fkeyset
.0840	20 6e 10	               jsr  drawfkeys
.0843	a9 00		               lda  #$00
.0845	20 3a 21	               jsr  push
.0848	a2 8c		               ldx  #<blankmsg
.084a	a0 19		               ldy  #>blankmsg
.084c	20 d2 20	               jsr  putscxy
.084f	a2 b8		               ldx  #<prompt_msg
.0851	a0 19		               ldy  #>prompt_msg
.0853	20 d2 20	               jsr  putscxy
.0856	20 79 21	               jsr  pop
.0859	20 ff 1f	               jsr  screenena
.085c	20 a0 0c	               jsr  keyaction
.085f	20 2c 20	               jsr  cls
.0862	20 30 0a	               jsr  drawcredits
.0865	a2 c8		               ldx #<bye_msg
.0867	a0 1d		               ldy #>bye_msg
.0869	20 d2 20	               jsr putscxy
.086c	a2 ea		               ldx #<any_msg
.086e	a0 1d		               ldy #>any_msg
.0870	20 d2 20	               jsr putscxy
.0873	20 5a 25	               jsr  getkey
.0876	20 2c 20	               jsr  cls
.0879	20 79 21	endmain        jsr  pop
.087c	60		               rts
.087d			savetofile
.087d	20 3a 21	               jsr  push
.0880	a9 35		               lda  #<fname
.0882	8d e8 26	               sta  dsk_fnptr
.0885	a9 09		               lda  #>fname
.0887	8d e9 26	               sta  dsk_fnptr+1
.088a	a9 0d		               lda  #(device-fname-1)
.088c	8d ea 26	               sta  dsk_fnlen
.088f	ad 43 09	               lda  device
.0892	29 0f		               and  #$0f
.0894	8d e7 26	               sta  dsk_lfsno
.0897	8d e6 26	               sta  dsk_dev
.089a	a9 00		               lda  #<bitmapmem
.089c	8d e2 26	               sta  dsk_data_s
.089f	a9 28		               lda  #>bitmapmem
.08a1	8d e3 26	               sta  dsk_data_s+1
.08a4	a9 00		               lda  #<endofaddr
.08a6	8d e4 26	               sta  dsk_data_e
.08a9	a9 48		               lda  #>endofaddr
.08ab	8d e5 26	               sta  dsk_data_e+1
.08ae	a2 8c		               ldx #<blankmsg
.08b0	a0 19		               ldy #>blankmsg
.08b2	20 d2 20	               jsr putscxy
.08b5	20 3a 21	               jsr  push
.08b8	a2 01		               ldx  #1
.08ba	a0 04		               ldy  #4
.08bc	20 63 20	               jsr  gotoxy
.08bf	20 79 21	               jsr  pop
.08c2	20 4f 26	               jsr  memtofile
.08c5	20 79 21	               jsr  pop
.08c8	60		               rts
.08c9			loadfromfile
.08c9	20 3a 21	               jsr  push
.08cc	a9 35		               lda  #<fname
.08ce	8d e8 26	               sta  dsk_fnptr
.08d1	a9 09		               lda  #>fname
.08d3	8d e9 26	               sta  dsk_fnptr+1
.08d6	a9 0d		               lda  #(device-fname-1)
.08d8	8d ea 26	               sta  dsk_fnlen
.08db	ad 43 09	               lda  device
.08de	29 0f		               and  #$0f
.08e0	8d e6 26	               sta  dsk_dev
.08e3	8d e7 26	               sta  dsk_lfsno
.08e6	a9 00		               lda  #<bitmapmem
.08e8	8d e2 26	               sta  dsk_data_s
.08eb	a9 28		               lda  #>bitmapmem
.08ed	8d e3 26	               sta  dsk_data_s+1
.08f0	a9 00		               lda  #<endofaddr
.08f2	8d e4 26	               sta  dsk_data_e
.08f5	a9 48		               lda  #>endofaddr
.08f7	8d e5 26	               sta  dsk_data_e+1
.08fa	a2 8c		               ldx #<blankmsg
.08fc	a0 19		               ldy #>blankmsg
.08fe	20 d2 20	               jsr putscxy
.0901	20 3a 21	               jsr  push
.0904	a2 01		               ldx  #1
.0906	a0 04		               ldy  #4
.0908	20 63 20	               jsr  gotoxy
.090b	20 79 21	               jsr  pop
.090e	20 87 26	               jsr  filetomem
.0911	20 79 21	               jsr  pop
.0914	60		               rts
=10240			bitmapmem      =         charsdef * 1024     ;Calcul position ram des caracteres.
=18432			endofaddr      =         (charsdef * 1024) + (4*$800)
=61440			mstopaddr      =         $d000+(4*$800)
>0915	00 d0		startaddr      .word     $d000               ; 53248
>0917	00 f0		stopaddr       .word     mstopaddr           ; 55296
>0919	00 28		bitmapaddr     .word     bitmapmem           ; $3000, 12288
>091b	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>091f	08 04 02 01
>0923	00		editmode       .byte     0
>0924	00		fkeyset        .byte     0
>0925	00		currentchar    .byte     0
>0926	00		currentkey     .byte     0
>0927	00		previouskey    .byte     0
>0928	00		bitmapoffset   .byte     0
>0929	00 00		mapaddr        .word     0
>092b	00 00		byteaddr       .word     0
>092d	00 00		gridaddr       .word     0
>092f	09		cursln         .byte     grid_top
>0930	01		curscl         .byte     grid_left
>0931	05 1b 03 12	pfname         .byte     vvert,27,3,18
>0935	40 30 3a	fname          .text     "@0:"
>0938	4f 52 49 47	name           .text     "origin"
>093c	49 4e
>093e	2e 43 48 52	ext            .null     ".chr"
>0942	00
>0943	08		device         .byte     8

;******  Processing file: routines.asm

.0944			template
.0944	20 3a 21	               jsr  push
.0947	20 79 21	               jsr  pop
.094a	60		               rts
.094b			getfname
.094b	20 3a 21	               jsr  push
.094e	20 3a 21	               jsr  push
.0951	a2 8c		               ldx  #<blankmsg
.0953	a0 19		               ldy  #>blankmsg
.0955	20 d2 20	               jsr  putscxy
.0958	a2 f5		               ldx  #<fname_msg
.095a	a0 1b		               ldy  #>fname_msg
.095c	20 d2 20	               jsr  putscxy
.095f	20 79 21	               jsr  pop
.0962	a2 00		               ldx  #$00
.0964	8e 98 09	               stx  count
.0967	20 99 09	getanother     jsr  getalphanum
.096a	20 43 20	               jsr  putch
.096d	ae 98 09	               ldx  count
.0970	9d 38 09	               sta  name,x
.0973	ee 98 09	               inc  count
.0976	ae 98 09	               ldx  count
.0979	e0 06		               cpx  #$06
.097b	f0 03		               beq  finish
.097d	4c 67 09	               jmp  getanother
.0980			finish
.0980	20 3a 21	               jsr  push
.0983	a2 8c		               ldx  #<blankmsg
.0985	a0 19		               ldy  #>blankmsg
.0987	20 d2 20	               jsr  putscxy
.098a	a2 31		               ldx  #<pfname
.098c	a0 09		               ldy  #>pfname
.098e	20 d2 20	               jsr  putscxy
.0991	20 79 21	               jsr  pop
.0994	20 79 21	               jsr  pop
.0997	60		               rts
>0998	00		count          .byte     0
.0999			getalphanum
.0999	20 3a 21	               jsr  push
.099c	20 5a 25	getanother     jsr  getkey
.099f	c9 30		               cmp  #$30      ; 0
.09a1	30 f9		               bmi  getanother
.09a3	c9 3a		               cmp  #$3a      ; 9+1
.09a5	30 0b		               bmi  goodone
.09a7	c9 41		isitletter     cmp  #$41      ; A
.09a9	30 f1		               bmi  getanother
.09ab	c9 5b		               cmp  #$5b      ; Z+1
.09ad	30 03		               bmi  goodone
.09af	4c 9c 09	               jmp  getanother
.09b2	8d bc 09	goodone        sta  tempbyte
.09b5	20 79 21	               jsr  pop
.09b8	ad bc 09	               lda  tempbyte
.09bb	60		               rts
>09bc	00		tempbyte       .byte     0
.09bd			copychar
.09bd	20 3a 21	               jsr  push
.09c0	20 f9 09	               jsr  getvalidkey
.09c3	ad 19 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.09c6	85 fb		               sta  zpage1
.09c8	ad 1a 09	               lda  bitmapaddr+1
.09cb	85 fc		               sta  zpage1+1
.09cd	ae 2f 0a	               ldx  copykey
.09d0	bd 35 24	               lda  asciitorom,x
.09d3	aa		               tax
.09d4	e0 00		               cpx  #$00
.09d6	f0 08		               beq  no_offset      ; sommes nous déja à 0
.09d8	a9 08		addagain       lda  #$08
.09da	20 ca 11	               jsr  zp1addnum      ; on augmente de 8 byte ...
.09dd	ca		               dex                 ; pour chaque caracteres
.09de	d0 f8		               bne  addagain
.09e0	ad 29 09	no_offset      lda  mapaddr        ; le caractere actuel
.09e3	85 fd		               sta  zpage2         ;
.09e5	ad 2a 09	               lda  mapaddr+1      ;
.09e8	85 fe		               sta  zpage2+1       ;
.09ea	a0 00		               ldy  #$00
.09ec	b1 fb		nextbyte       lda  (zpage1),y
.09ee	91 fd		               sta  (zpage2),y
.09f0	c8		               iny
.09f1	c0 08		               cpy  #$08
.09f3	d0 f7		               bne  nextbyte
.09f5	20 79 21	out            jsr  pop
.09f8	60		               rts
.09f9			getvalidkey
.09f9	20 3a 21	               jsr  push
.09fc	20 3a 21	               jsr  push
.09ff	a2 8c		               ldx  #<blankmsg
.0a01	a0 19		               ldy  #>blankmsg
.0a03	20 d2 20	               jsr  putscxy
.0a06	a2 cc		               ldx  #<copychar_msg
.0a08	a0 1b		               ldy  #>copychar_msg
.0a0a	20 d2 20	               jsr  putscxy
.0a0d	20 79 21	               jsr  pop
.0a10	20 5a 25	getgoodkey     jsr  getkey
.0a13	8d 2f 0a	               sta  copykey
.0a16	aa		               tax
.0a17	bc 35 24	               ldy  asciitorom,x
.0a1a	c4 00		               cpy  $00
.0a1c	d0 0a		               bne  goodone
.0a1e	ae 2f 0a	               ldx  copykey
.0a21	e0 40		               cpx  #$40
.0a23	f0 03		               beq  goodone
.0a25	4c 10 0a	               jmp  getgoodkey
.0a28	20 43 20	goodone        jsr  putch
.0a2b	20 79 21	               jsr  pop
.0a2e	60		               rts
>0a2f	00		copykey        .byte 0
.0a30			drawcredits
.0a30	20 3a 21	               jsr  push
.0a33	20 2c 20	               jsr  cls
.0a36	a2 54		               ldx #<whoami0
.0a38	a0 1c		               ldy #>whoami0
.0a3a	20 d2 20	               jsr putscxy
.0a3d	a2 79		               ldx #<whoami1
.0a3f	a0 1c		               ldy #>whoami1
.0a41	20 d2 20	               jsr putscxy
.0a44	a2 a0		               ldx #<whoami2
.0a46	a0 1c		               ldy #>whoami2
.0a48	20 d2 20	               jsr putscxy
.0a4b	a2 c5		               ldx #<whoami3
.0a4d	a0 1c		               ldy #>whoami3
.0a4f	20 d2 20	               jsr putscxy
.0a52	a2 ea		               ldx #<whoami4
.0a54	a0 1c		               ldy #>whoami4
.0a56	20 d2 20	               jsr putscxy
.0a59	a2 0f		               ldx #<whoami5
.0a5b	a0 1d		               ldy #>whoami5
.0a5d	20 d2 20	               jsr putscxy
.0a60	a2 34		               ldx #<whoami6
.0a62	a0 1d		               ldy #>whoami6
.0a64	20 d2 20	               jsr putscxy
.0a67	a2 59		               ldx #<whoami7
.0a69	a0 1d		               ldy #>whoami7
.0a6b	20 d2 20	               jsr putscxy
.0a6e	a2 7e		               ldx #<whoami8
.0a70	a0 1d		               ldy #>whoami8
.0a72	20 d2 20	               jsr putscxy
.0a75	a2 a3		               ldx #<whoami9
.0a77	a0 1d		               ldy #>whoami9
.0a79	20 d2 20	               jsr putscxy
.0a7c	20 e8 11	               jsr  delay
.0a7f	20 e8 11	               jsr  delay
.0a82	20 e8 11	               jsr  delay
.0a85	20 e8 11	               jsr  delay
.0a88	20 e8 11	               jsr  delay
.0a8b	20 79 21	               jsr  pop
.0a8e	60		               rts
.0a8f			setdefaultchar
.0a8f	20 3a 21	               jsr  push
.0a92	a9 40		               lda  #$40
.0a94	8d 26 09	               sta  currentkey
.0a97	aa		               tax
.0a98	bc 35 24	               ldy  asciitorom,x
.0a9b	8c 28 09	               sty  bitmapoffset
.0a9e	20 59 0b	               jsr  drawkeyval
.0aa1	20 04 0f	               jsr  drawbitmap
.0aa4	20 3a 21	               jsr  push
.0aa7	a2 0d		               ldx  #13
.0aa9	a0 0c		               ldy  #12
.0aab	20 63 20	               jsr  gotoxy
.0aae	20 79 21	               jsr  pop
.0ab1	20 43 20	               jsr  putch
.0ab4	20 3a 21	               jsr  push
.0ab7	a2 11		               ldx  #17
.0ab9	a0 05		               ldy  #5
.0abb	20 63 20	               jsr  gotoxy
.0abe	20 79 21	               jsr  pop
.0ac1	20 00 24	               jsr  atodec
.0ac4	20 3a 21	               jsr  push
.0ac7	a2 04		isx            ldx  #<adec
.0ac9	a0 23		isy            ldy  #>adec
.0acb	20 49 20	               jsr  puts
.0ace	20 79 21	               jsr  pull
.0ad1	20 79 21	               jsr  pop
.0ad4	60		               rts
.0ad5			resetmenuacolor
.0ad5	20 3a 21	               jsr  push
.0ad8	a9 03		               lda  #menu1col1
.0ada	8d 42 1e	               sta  f1abutton
.0add	8d 78 1e	               sta  f3abutton
.0ae0	8d ae 1e	               sta  f5abutton
.0ae3	8d e4 1e	               sta  f7abutton
.0ae6	a9 0e		               lda  #menu1col2
.0ae8	8d 5d 1e	               sta  f2abutton
.0aeb	8d 93 1e	               sta  f4abutton
.0aee	8d c9 1e	               sta  f6abutton
.0af1	8d ff 1e	               sta  f8abutton
.0af4	20 79 21	               jsr  pop
.0af7	60		               rts
.0af8			resetmenubcolor
.0af8	20 3a 21	               jsr  push
.0afb	a9 0f		               lda  #menu2col1
.0afd	8d 1a 1f	               sta  f1bbutton
.0b00	8d 50 1f	               sta  f3bbutton
.0b03	8d 86 1f	               sta  f5bbutton
.0b06	8d bc 1f	               sta  f7bbutton
.0b09	a9 0f		               lda  #menu2col1
.0b0b	8d 35 1f	               sta  f2bbutton
.0b0e	8d 6b 1f	               sta  f4bbutton
.0b11	8d a1 1f	               sta  f6bbutton
.0b14	8d d7 1f	               sta  f8bbutton
.0b17	20 79 21	               jsr  pop
.0b1a	60		               rts
.0b1b			setmenuacolor
.0b1b	20 3a 21	               jsr  push
.0b1e	8d 42 1e	               sta  f1abutton
.0b21	8d 5d 1e	               sta  f2abutton
.0b24	8d 78 1e	               sta  f3abutton
.0b27	8d 93 1e	               sta  f4abutton
.0b2a	8d ae 1e	               sta  f5abutton
.0b2d	8d c9 1e	               sta  f6abutton
.0b30	8d e4 1e	               sta  f7abutton
.0b33	8d ff 1e	               sta  f8abutton
.0b36	20 79 21	               jsr  pop
.0b39	60		               rts
.0b3a			setmenubcolor
.0b3a	20 3a 21	               jsr  push
.0b3d	8d 1a 1f	               sta  f1bbutton
.0b40	8d 35 1f	               sta  f2bbutton
.0b43	8d 50 1f	               sta  f3bbutton
.0b46	8d 6b 1f	               sta  f4bbutton
.0b49	8d 86 1f	               sta  f5bbutton
.0b4c	8d a1 1f	               sta  f6bbutton
.0b4f	8d bc 1f	               sta  f7bbutton
.0b52	8d d7 1f	               sta  f8bbutton
.0b55	20 79 21	               jsr  pop
.0b58	60		               rts
.0b59			drawkeyval
.0b59	20 3a 21	               jsr  push
.0b5c	20 3a 21	               jsr  push
.0b5f	a2 01		               ldx  #1
.0b61	a0 13		               ldy  #19
.0b63	20 63 20	               jsr  gotoxy
.0b66	20 79 21	               jsr  pop
.0b69	ad 26 09	               lda  currentkey
.0b6c	20 43 20	               jsr  putch
.0b6f	48		               pha
.0b70	a9 3d		               lda  #'='
.0b72	20 43 20	               jsr  putch
.0b75	a9 25		               lda  #'%'
.0b77	20 43 20	               jsr  putch
.0b7a	68		               pla
.0b7b	20 c6 23	               jsr  putabin
.0b7e	20 3a 21	               jsr  push
.0b81	a2 01		               ldx  #1
.0b83	a0 14		               ldy  #20
.0b85	20 63 20	               jsr  gotoxy
.0b88	20 79 21	               jsr  pop
.0b8b	20 3a 21	               jsr  push
.0b8e	a2 5a		isx            ldx  #<txt1
.0b90	a0 0c		isy            ldy  #>txt1
.0b92	20 49 20	               jsr  puts
.0b95	20 79 21	               jsr  pull
.0b98	a9 24		               lda  #'$'
.0b9a	20 43 20	               jsr  putch
.0b9d	ad 26 09	               lda  currentkey
.0ba0	20 33 23	               jsr  putahex
.0ba3	20 3a 21	               jsr  push
.0ba6	a2 01		               ldx  #1
.0ba8	a0 15		               ldy  #21
.0baa	20 63 20	               jsr  gotoxy
.0bad	20 79 21	               jsr  pop
.0bb0	20 3a 21	               jsr  push
.0bb3	a2 65		isx            ldx  #<txt2
.0bb5	a0 0c		isy            ldy  #>txt2
.0bb7	20 49 20	               jsr  puts
.0bba	20 79 21	               jsr  pull
.0bbd	a9 24		               lda  #'$'
.0bbf	20 43 20	               jsr  putch
.0bc2	ad 1a 09	               lda  bitmapaddr+1
.0bc5	20 33 23	               jsr  putahex
.0bc8	ad 19 09	               lda  bitmapaddr
.0bcb	20 33 23	               jsr  putahex
.0bce	20 3a 21	               jsr  push
.0bd1	a2 01		               ldx  #1
.0bd3	a0 16		               ldy  #22
.0bd5	20 63 20	               jsr  gotoxy
.0bd8	20 79 21	               jsr  pop
.0bdb	20 3a 21	               jsr  push
.0bde	a2 70		isx            ldx  #<txt3
.0be0	a0 0c		isy            ldy  #>txt3
.0be2	20 49 20	               jsr  puts
.0be5	20 79 21	               jsr  pull
.0be8	a9 24		               lda  #'$'
.0bea	20 43 20	               jsr  putch
.0bed	ad 28 09	               lda  bitmapoffset
.0bf0	20 33 23	               jsr  putahex
.0bf3	20 3a 21	               jsr  push
.0bf6	a2 01		               ldx  #1
.0bf8	a0 17		               ldy  #23
.0bfa	20 63 20	               jsr  gotoxy
.0bfd	20 79 21	               jsr  pop
.0c00	20 3a 21	               jsr  push
.0c03	a2 7d		isx            ldx  #<txt4
.0c05	a0 0c		isy            ldy  #>txt4
.0c07	20 49 20	               jsr  puts
.0c0a	20 79 21	               jsr  pull
.0c0d	a9 24		               lda  #'$'
.0c0f	20 43 20	               jsr  putch
.0c12	ad 2a 09	               lda  mapaddr+1
.0c15	20 33 23	               jsr  putahex
.0c18	ad 29 09	               lda  mapaddr
.0c1b	20 33 23	               jsr  putahex
.0c1e	20 3a 21	               jsr  push
.0c21	a2 01		               ldx  #1
.0c23	a0 18		               ldy  #24
.0c25	20 63 20	               jsr  gotoxy
.0c28	20 79 21	               jsr  pop
.0c2b	20 3a 21	               jsr  push
.0c2e	a2 88		isx            ldx  #<txt5
.0c30	a0 0c		isy            ldy  #>txt5
.0c32	20 49 20	               jsr  puts
.0c35	20 79 21	               jsr  pull
.0c38	ad 30 09	               lda  curscl
.0c3b	20 33 23	               jsr  putahex
.0c3e	a9 da		               lda  #$da
.0c40	20 43 20	               jsr  putch
.0c43	ad 2f 09	               lda  cursln
.0c46	20 33 23	               jsr  putahex
.0c49	20 79 21	               jsr  pop
.0c4c	60		               rts
>0c4d	50 45 54 53	txt0           .null     "petscii :   "
>0c51	43 49 49 20 3a 20 20 20 00
>0c5a	4b 45 59 20	txt1           .null     "key code: "
>0c5e	43 4f 44 45 3a 20 00
>0c65	42 49 54 4d	txt2           .null     "bitmap..: "
>0c69	41 50 2e 2e 3a 20 00
>0c70	4f 46 46 53	txt3           .null     "offset..:   "
>0c74	45 54 2e 2e 3a 20 20 20 00
>0c7d	4d 41 50 41	txt4           .null     "mapaddr.: "
>0c81	44 44 52 2e 3a 20 00
>0c88	43 55 52 53	txt5           .null     "cursval.: "
>0c8c	56 41 4c 2e 3a 20 00
>0c93	53 54 41 43	txt6           .null     "stack......:"
>0c97	4b 2e 2e 2e 2e 2e 2e 3a 00
.0ca0			keyaction
.0ca0	20 3a 21	               jsr  push
.0ca3	20 5a 25	loop           jsr  getkey
.0ca6	c9 85		f1             cmp  #key_f1
.0ca8	d0 03		               bne  f2
.0caa	4c 1e 0d	               jmp  dof1
.0cad	c9 89		f2             cmp  #key_f2
.0caf	d0 03		               bne  f3
.0cb1	4c 24 0d	               jmp  dof2
.0cb4	c9 86		f3             cmp  #key_f3
.0cb6	d0 03		               bne  f4
.0cb8	4c 2a 0d	               jmp  dof3
.0cbb	c9 8a		f4             cmp  #key_f4
.0cbd	d0 03		               bne  f5
.0cbf	4c 30 0d	               jmp  dof4
.0cc2	c9 87		f5             cmp  #key_f5
.0cc4	d0 03		               bne  f6
.0cc6	4c 36 0d	               jmp  dof5
.0cc9	c9 8b		f6             cmp  #key_f6
.0ccb	d0 03		               bne  f7
.0ccd	4c 3c 0d	               jmp  dof6
.0cd0	c9 88		f7             cmp  #key_f7
.0cd2	d0 03		               bne  f8
.0cd4	4c 42 0d	               jmp  dof7
.0cd7	c9 8c		f8             cmp  #key_f8
.0cd9	d0 03		               bne  ctrlx
.0cdb	4c 48 0d	               jmp  dof8
.0cde	c9 18		ctrlx          cmp  #ctrl_x
.0ce0	d0 03		               bne  ishex14
.0ce2	4c 4e 0d	               jmp  doquit
.0ce5	c9 14		ishex14        cmp  #$14
.0ce7	d0 03		               bne  ishex12
.0ce9	4c a3 0c	               jmp  loop
.0cec	c9 12		ishex12        cmp  #$12
.0cee	d0 03		               bne  reste
.0cf0	4c a3 0c	               jmp  loop
.0cf3			reste
.0cf3	20 3a 21	               jsr  push
.0cf6	a2 0d		               ldx  #13
.0cf8	a0 0c		               ldy  #12
.0cfa	20 63 20	               jsr  gotoxy
.0cfd	20 79 21	               jsr  pop
.0d00	20 43 20	               jsr  putch
.0d03	48		               pha
.0d04	ad 26 09	               lda  currentkey
.0d07	8d 27 09	               sta  previouskey
.0d0a	68		               pla
.0d0b	8d 26 09	               sta  currentkey
.0d0e	aa		               tax
.0d0f	bc 35 24	               ldy  asciitorom,x
.0d12	8c 28 09	               sty  bitmapoffset
.0d15	20 59 0b	               jsr  drawkeyval
.0d18	20 04 0f	               jsr  drawbitmap
.0d1b	4c a3 0c	               jmp  loop
.0d1e	20 fe 11	dof1           jsr  f1action  ;edit/reverse
.0d21	4c a3 0c	               jmp  loop
.0d24	20 f1 12	dof2           jsr  f2action  ;save/flip vert
.0d27	4c a3 0c	               jmp  loop
.0d2a	20 a9 13	dof3           jsr  f3action  ;load/flip horz
.0d2d	4c a3 0c	               jmp  loop
.0d30	20 76 14	dof4           jsr  f4action  ;copy/scroll r
.0d33	4c a3 0c	               jmp  loop
.0d36	20 43 15	dof5           jsr  f5action  ;clear/scroll l
.0d39	4c a3 0c	               jmp  loop
.0d3c	20 fb 15	dof6           jsr  f6action  ;fill;/scroll up
.0d3f	4c a3 0c	               jmp  loop
.0d42	20 b3 16	dof7           jsr  f7action  ;clear;/scroll down
.0d45	4c a3 0c	               jmp  loop
.0d48	20 70 17	dof8           jsr  f8action  ; function
.0d4b	4c a3 0c	               jmp  loop
.0d4e	20 79 21	doquit         jsr  pop
.0d51	60		               rts
.0d52			editor
.0d52	20 3a 21	               jsr  push
.0d55	20 3a 21	               jsr  push
.0d58	a2 8c		               ldx  #<blankmsg
.0d5a	a0 19		               ldy  #>blankmsg
.0d5c	20 d2 20	               jsr  putscxy
.0d5f	a2 3f		               ldx  #<exit_msg
.0d61	a0 1c		               ldy  #>exit_msg
.0d63	20 d2 20	               jsr  putscxy
.0d66	20 79 21	               jsr  pop
.0d69	20 3a 21	               jsr  push
.0d6c	a2 8c		               ldx  #<blankmsg
.0d6e	a0 19		               ldy  #>blankmsg
.0d70	20 d2 20	               jsr  putscxy
.0d73	a2 de		               ldx  #<edit_msg
.0d75	a0 19		               ldy  #>edit_msg
.0d77	20 d2 20	               jsr  putscxy
.0d7a	20 79 21	               jsr  pop
.0d7d	20 c0 0e	               jsr  setcurs
.0d80	ad 26 09	               lda  currentkey
.0d83	20 3a 21	               jsr  push
.0d86	a2 11		               ldx  #17
.0d88	a0 05		               ldy  #5
.0d8a	20 63 20	               jsr  gotoxy
.0d8d	20 79 21	               jsr  pop
.0d90	20 00 24	               jsr  atodec
.0d93	20 3a 21	               jsr  push
.0d96	a2 04		isx            ldx  #<adec
.0d98	a0 23		isy            ldy  #>adec
.0d9a	20 49 20	               jsr  puts
.0d9d	20 79 21	               jsr  pull
.0da0	20 04 0f	               jsr  drawbitmap
.0da3	20 5a 25	ed_loop        jsr  getkey
.0da6	c9 85		f1             cmp  #f1key
.0da8	d0 03		               bne  cu
.0daa	4c 92 0e	               jmp  do_ctrlx
.0dad	c9 91		cu             cmp  #cursu
.0daf	d0 03		               bne  cd
.0db1	4c 3d 0e	               jmp  do_up
.0db4	c9 11		cd             cmp  #cursd
.0db6	d0 03		               bne  cl
.0db8	4c 50 0e	               jmp  do_down
.0dbb	c9 9d		cl             cmp  #cursl
.0dbd	d0 03		               bne  cr
.0dbf	4c 63 0e	               jmp  do_left
.0dc2	c9 1d		cr             cmp  #cursr
.0dc4	d0 03		               bne  cx
.0dc6	4c 76 0e	               jmp  do_right
.0dc9	c9 18		cx             cmp  #ctrl_x
.0dcb	d0 03		               bne  sp
.0dcd	4c 92 0e	               jmp  do_ctrlx
.0dd0	c9 20		sp             cmp  #$20
.0dd2	d0 03		               bne  ishex14
.0dd4	4c 89 0e	               jmp  do_swap
.0dd7	c9 14		ishex14        cmp  #$14
.0dd9	d0 03		               bne  ishex12
.0ddb	4c 89 0e	               jmp  do_swap
.0dde	c9 12		ishex12        cmp  #$12
.0de0	d0 03		               bne  rest
.0de2	4c 89 0e	               jmp  do_swap
.0de5			rest
.0de5	20 3a 21	               jsr  push
.0de8	a2 0d		               ldx  #13
.0dea	a0 0c		               ldy  #12
.0dec	20 63 20	               jsr  gotoxy
.0def	20 79 21	               jsr  pop
.0df2	20 43 20	               jsr  putch
.0df5	48		               pha
.0df6	ad 26 09	               lda  currentkey
.0df9	8d 27 09	               sta  previouskey
.0dfc	68		               pla
.0dfd	8d 26 09	               sta  currentkey
.0e00	aa		               tax
.0e01	bc 35 24	               ldy  asciitorom,x
.0e04	8c 28 09	               sty  bitmapoffset
.0e07	20 59 0b	               jsr  drawkeyval
.0e0a	20 04 0f	               jsr  drawbitmap
.0e0d	20 3a 21	               jsr  push
.0e10	a2 0d		               ldx  #13
.0e12	a0 0c		               ldy  #12
.0e14	20 63 20	               jsr  gotoxy
.0e17	20 79 21	               jsr  pop
.0e1a	20 43 20	               jsr  putch
.0e1d	20 3a 21	               jsr  push
.0e20	a2 11		               ldx  #17
.0e22	a0 05		               ldy  #5
.0e24	20 63 20	               jsr  gotoxy
.0e27	20 79 21	               jsr  pop
.0e2a	20 00 24	               jsr  atodec
.0e2d	20 3a 21	               jsr  push
.0e30	a2 04		isx            ldx  #<adec
.0e32	a0 23		isy            ldy  #>adec
.0e34	20 49 20	               jsr  puts
.0e37	20 79 21	               jsr  pull
.0e3a	4c 8f 0e	               jmp  totop
.0e3d	ad 2f 09	do_up          lda  cursln
.0e40	c9 09		               cmp  #grid_top
.0e42	f0 4b		               beq  totop
.0e44	20 e2 0e	               jsr  clrcurs
.0e47	ce 2f 09	               dec  cursln
.0e4a	20 c0 0e	               jsr  setcurs
.0e4d	4c 8f 0e	               jmp  totop
.0e50	ad 2f 09	do_down        lda  cursln
.0e53	c9 10		               cmp  #grid_bot
.0e55	f0 38		               beq  totop
.0e57	20 e2 0e	               jsr  clrcurs
.0e5a	ee 2f 09	               inc  cursln
.0e5d	20 c0 0e	               jsr  setcurs
.0e60	4c 8f 0e	               jmp  totop
.0e63	ad 30 09	do_left        lda  curscl
.0e66	c9 01		               cmp  #grid_left
.0e68	f0 25		               beq  totop
.0e6a	20 e2 0e	               jsr  clrcurs
.0e6d	ce 30 09	               dec  curscl
.0e70	20 c0 0e	               jsr  setcurs
.0e73	4c 8f 0e	               jmp  totop
.0e76	ad 30 09	do_right       lda  curscl
.0e79	c9 08		               cmp  #grid_right
.0e7b	f0 12		               beq  totop
.0e7d	20 e2 0e	               jsr  clrcurs
.0e80	ee 30 09	               inc  curscl
.0e83	20 c0 0e	               jsr  setcurs
.0e86	4c 8f 0e	               jmp  totop
.0e89	20 99 0e	do_swap        jsr  do_eor
.0e8c	20 04 0f	               jsr  drawbitmap
.0e8f	4c a3 0d	totop          jmp  ed_loop
.0e92	20 e2 0e	do_ctrlx       jsr  clrcurs
.0e95	20 79 21	               jsr  pop
.0e98	60		               rts
.0e99			do_eor
.0e99	20 3a 21	               jsr  push
.0e9c	ad 29 09	               lda  mapaddr
.0e9f	85 fd		               sta  zpage2
.0ea1	ad 2a 09	               lda  mapaddr+1
.0ea4	85 fe		               sta  zpage2+1
.0ea6	ae 2f 09	               ldx  cursln     ; calcul de
.0ea9	ca		               dex            ; l'offset de
.0eaa	8a		               txa            ; la
.0eab	29 f7		               and  #$f7      ; ligne
.0ead	a8		               tay
.0eae	ae 30 09	               ldx  curscl
.0eb1	ca		               dex
.0eb2	bd 1b 09	               lda  eorval,x
.0eb5	51 fd		               eor  (zpage2),y
.0eb7	20 59 0b	               jsr  drawkeyval
.0eba	91 fd		               sta  (zpage2),y
.0ebc	20 79 21	               jsr  pop
.0ebf	60		               rts
.0ec0			setcurs
.0ec0	20 3a 21	               jsr  push
.0ec3	a2 01		               ldx  #grid_left
.0ec5	ac 2f 09	               ldy  cursln
.0ec8	20 63 20	               jsr  gotoxy
.0ecb	a9 da		               lda  #$da
.0ecd	20 43 20	               jsr  putch
.0ed0	ae 30 09	               ldx  curscl
.0ed3	e8		               inx
.0ed4	a0 08		               ldy  #grid_top-1
.0ed6	20 63 20	               jsr  gotoxy
.0ed9	a9 da		               lda  #$da
.0edb	20 43 20	               jsr  putch
.0ede	20 79 21	               jsr  pop
.0ee1	60		               rts
.0ee2			clrcurs
.0ee2	20 3a 21	               jsr  push
.0ee5	a2 01		               ldx  #grid_left
.0ee7	ac 2f 09	               ldy  cursln
.0eea	20 63 20	               jsr  gotoxy
.0eed	a9 20		               lda  #$20
.0eef	20 43 20	               jsr  putch
.0ef2	ae 30 09	               ldx  curscl
.0ef5	e8		               inx
.0ef6	a0 08		               ldy  #grid_top-1
.0ef8	20 63 20	               jsr  gotoxy
.0efb	a9 20		               lda  #$20
.0efd	20 43 20	               jsr  putch
.0f00	20 79 21	               jsr  pop
.0f03	60		               rts
.0f04			drawbitmap
.0f04	20 3a 21	               jsr  push
.0f07	20 6b 0f	               jsr  calcmapaddr
.0f0a	ad 29 09	               lda  mapaddr        ; on pointe sur la table des bitmaps
.0f0d	85 fb		               sta  zpage1
.0f0f	ad 2a 09	               lda  mapaddr+1
.0f12	85 fc		               sta  zpage1+1
.0f14	a0 00		drawchar       ldy  #$00
.0f16	a2 09		               ldx  #grid_top      ;on replace la ...
.0f18	8e 21 0f	               stx  isy+1          ;ligne de départ
.0f1b	20 3a 21	nextline       jsr  push
.0f1e	a2 02		               ldx  #grid_left+1        ; la colonne
.0f20	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.0f22	20 63 20	               jsr  gotoxy
.0f25	20 79 21	               jsr  pop
.0f28	b1 fb		               lda  (zpage1),y     ; on li une ligne
.0f2a	20 a4 23	               jsr  atobin
.0f2d	20 9a 0f	               jsr  abintograph
.0f30	20 3a 21	               jsr  push
.0f33	a2 fb		isx            ldx  #<abin
.0f35	a0 22		isy            ldy  #>abin
.0f37	20 49 20	               jsr  puts
.0f3a	20 79 21	               jsr  pull
.0f3d	ee 21 0f	               inc  isy+1
.0f40	c8		               iny
.0f41	c0 08		               cpy  #$08
.0f43	30 d6		               bmi  nextline
.0f45	20 4c 0f	               jsr  highlight
.0f48	20 79 21	               jsr  pop
.0f4b	60		               rts
.0f4c			highlight
.0f4c	20 3a 21	               jsr  push
.0f4f	ae 27 09	               ldx  previouskey
.0f52	bd 35 24	               lda  asciitorom,x
.0f55	aa		               tax
.0f56	a9 0f		               lda  #charscolor
.0f58	9d 00 d8	               sta  colorram,x
.0f5b	ae 26 09	               ldx  currentkey
.0f5e	bd 35 24	               lda  asciitorom,x
.0f61	aa		               tax
.0f62	a9 01		               lda  #charcolor
.0f64	9d 00 d8	               sta  colorram,x
.0f67	20 79 21	               jsr  pop
.0f6a	60		               rts
.0f6b			calcmapaddr
.0f6b	20 3a 21	               jsr  push
.0f6e	ad 19 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0f71	85 fb		               sta  zpage1
.0f73	ad 1a 09	               lda  bitmapaddr+1
.0f76	85 fc		               sta  zpage1+1
.0f78	ae 28 09	               ldx  bitmapoffset
.0f7b	e0 00		               cpx  #$00
.0f7d	f0 08		               beq  thesame         ; sommes nous déja à 0
.0f7f	a9 08		addagain       lda  #$08
.0f81	20 ca 11	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0f84	ca		               dex                 ; pour chaque caracteres
.0f85	d0 f8		               bne  addagain
.0f87	48		thesame        pha
.0f88	a5 fb		               lda  zpage1
.0f8a	8d 29 09	               sta  mapaddr
.0f8d	a5 fc		               lda  zpage1+1
.0f8f	8d 2a 09	               sta  mapaddr+1
.0f92	68		               pla
.0f93	20 59 0b	               jsr  drawkeyval
.0f96	20 79 21	out            jsr  pop
.0f99	60		               rts
.0f9a			abintograph
.0f9a	20 3a 21	               jsr  push
.0f9d	a9 fb		               lda  #<abin
.0f9f	85 fb		               sta  zpage1
.0fa1	a9 22		               lda  #>abin+1
.0fa3	85 fc		               sta  zpage1+1
.0fa5	a0 00		               ldy  #$00
.0fa7	b1 fb		nextbit        lda  (zpage1),y
.0fa9	c9 30		               cmp  #$30
.0fab	f0 07		               beq  itszero
.0fad	a9 d1		itsone         lda  #$d1
.0faf	91 fb		               sta  (zpage1),y
.0fb1	4c b8 0f	               jmp  next
.0fb4	a9 2e		itszero        lda  #$2e
.0fb6	91 fb		               sta  (zpage1),y
.0fb8	c8		next           iny
.0fb9	c0 08		               cpy  #$08
.0fbb	30 ea		               bmi  nextbit
.0fbd	20 79 21	               jsr  pop
.0fc0	60		               rts
.0fc1			setscreenptr
.0fc1	20 3a 21	               jsr  push
.0fc4	a9 08		               lda  #$08      ; basic commande to disable ...
.0fc6	20 d2 ff	               jsr  chrout    ; ... character set change.
.0fc9	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.0fcc	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.0fce	09 0a		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.0fd0	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.0fd3	20 79 21	               jsr  pop
.0fd6	60		               rts
.0fd7			copycharset
.0fd7	20 3a 21	               jsr  push
.0fda	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0fdd	29 fe		               and  #%11111110     ;254
.0fdf	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0fe2	a5 01		               lda  u6510map       ;$01
.0fe4	29 fb		               and  #%11111011     ;251
.0fe6	85 01		               sta  u6510map       ;$01
.0fe8	20 fd 0f	               jsr  memcopy
.0feb	a5 01		               lda  u6510map       ;$01
.0fed	09 04		               ora  #%00000100
.0fef	85 01		               sta  u6510map       ;$01
.0ff1	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.0ff4	09 01		               ora  #%00000001     ;254
.0ff6	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.0ff9	20 79 21	               jsr  pop
.0ffc	60		               rts
.0ffd			memcopy
.0ffd	20 3a 21	               jsr  push
.1000	ad 15 09	               lda  startaddr
.1003	85 fb		               sta  zpage1
.1005	ad 16 09	               lda  startaddr+1
.1008	85 fc		               sta  zpage1+1
.100a	ad 19 09	               lda  bitmapaddr
.100d	85 fd		               sta  zpage2
.100f	ad 1a 09	               lda  bitmapaddr+1
.1012	85 fe		               sta  zpage2+1
.1014	a0 00		               ldy  #$00
.1016	b1 fb		onemore        lda  (zpage1),y
.1018	91 fd		               sta  (zpage2),y
.101a	20 41 22	               jsr  inczp1
.101d	20 59 22	               jsr  inczp2
.1020	a5 fc		               lda  zpage1+1
.1022	cd 18 09	               cmp  stopaddr+1
.1025	d0 ef		               bne  onemore
.1027	a5 fb		               lda  zpage1
.1029	cd 17 09	               cmp  stopaddr
.102c	d0 e8		               bne  onemore
.102e	20 79 21	               jsr  pop
.1031	60		               rts
.1032			staticscreen
.1032	48		               pha
.1033	a9 0b		               lda  #bordure
.1035	8d 20 d0	               sta  $d020
.1038	68		               pla
.1039	48		               pha
.103a	a9 00		               lda  #fond
.103c	8d 21 d0	               sta  $d021
.103f	68		               pla
.1040	20 21 11	               jsr  drawlines
.1043	20 fd 10	               jsr  drawallchars
.1046	20 69 11	               jsr  drawgrid
.1049	20 6e 10	               jsr  drawfkeys
.104c	20 3a 21	               jsr  push
.104f	a2 8c		               ldx  #<blankmsg
.1051	a0 19		               ldy  #>blankmsg
.1053	20 d2 20	               jsr  putscxy
.1056	a2 2a		               ldx  #<quit_msg
.1058	a0 1c		               ldy  #>quit_msg
.105a	20 d2 20	               jsr  putscxy
.105d	20 79 21	               jsr  pop
.1060	20 3a 21	               jsr  push
.1063	a2 00		               ldx  #0
.1065	a0 07		               ldy  #7
.1067	20 63 20	               jsr  gotoxy
.106a	20 79 21	               jsr  pop
.106d	60		               rts
.106e			drawfkeys
.106e	20 3a 21	               jsr  push
.1071	ad 24 09	               lda  fkeyset
.1074	c9 00		               cmp  #$0
.1076	d0 42		               bne  secondks
.1078	a2 0c		               ldx #<titremenu1
.107a	a0 1e		               ldy #>titremenu1
.107c	20 d2 20	               jsr putscxy
.107f	a2 42		               ldx #<f1abutton
.1081	a0 1e		               ldy #>f1abutton
.1083	20 d2 20	               jsr putscxy
.1086	a2 5d		               ldx #<f2abutton
.1088	a0 1e		               ldy #>f2abutton
.108a	20 d2 20	               jsr putscxy
.108d	a2 78		               ldx #<f3abutton
.108f	a0 1e		               ldy #>f3abutton
.1091	20 d2 20	               jsr putscxy
.1094	a2 93		               ldx #<f4abutton
.1096	a0 1e		               ldy #>f4abutton
.1098	20 d2 20	               jsr putscxy
.109b	a2 ae		               ldx #<f5abutton
.109d	a0 1e		               ldy #>f5abutton
.109f	20 d2 20	               jsr putscxy
.10a2	a2 c9		               ldx #<f6abutton
.10a4	a0 1e		               ldy #>f6abutton
.10a6	20 d2 20	               jsr putscxy
.10a9	a2 e4		               ldx #<f7abutton
.10ab	a0 1e		               ldy #>f7abutton
.10ad	20 d2 20	               jsr putscxy
.10b0	a2 ff		               ldx #<f8abutton
.10b2	a0 1e		               ldy #>f8abutton
.10b4	20 d2 20	               jsr putscxy
.10b7	4c f9 10	               jmp end
.10ba			secondks
.10ba	a2 27		               ldx #<titremenu2
.10bc	a0 1e		               ldy #>titremenu2
.10be	20 d2 20	               jsr putscxy
.10c1	a2 1a		               ldx #<f1bbutton
.10c3	a0 1f		               ldy #>f1bbutton
.10c5	20 d2 20	               jsr putscxy
.10c8	a2 35		               ldx #<f2bbutton
.10ca	a0 1f		               ldy #>f2bbutton
.10cc	20 d2 20	               jsr putscxy
.10cf	a2 50		               ldx #<f3bbutton
.10d1	a0 1f		               ldy #>f3bbutton
.10d3	20 d2 20	               jsr putscxy
.10d6	a2 6b		               ldx #<f4bbutton
.10d8	a0 1f		               ldy #>f4bbutton
.10da	20 d2 20	               jsr putscxy
.10dd	a2 86		               ldx #<f5bbutton
.10df	a0 1f		               ldy #>f5bbutton
.10e1	20 d2 20	               jsr putscxy
.10e4	a2 a1		               ldx #<f6bbutton
.10e6	a0 1f		               ldy #>f6bbutton
.10e8	20 d2 20	               jsr putscxy
.10eb	a2 bc		               ldx #<f7bbutton
.10ed	a0 1f		               ldy #>f7bbutton
.10ef	20 d2 20	               jsr putscxy
.10f2	a2 d7		               ldx #<f8bbutton
.10f4	a0 1f		               ldy #>f8bbutton
.10f6	20 d2 20	               jsr putscxy
.10f9	20 79 21	end            jsr  pop
.10fc	60		               rts
.10fd			drawallchars
.10fd	20 3a 21	               jsr push
.1100	20 3a 21	               jsr  push
.1103	a2 00		               ldx  #0
.1105	a0 00		               ldy  #0
.1107	20 63 20	               jsr  gotoxy
.110a	20 79 21	               jsr  pop
.110d	a2 00		               ldx  #$00
.110f	8a		nextc          txa
.1110	9d 00 04	               sta  scrnnewram,x
.1113	a9 0f		               lda  #charscolor
.1115	9d 00 d8	               sta  colorram,x
.1118	e8		               inx
.1119	e0 80		               cpx  #$80
.111b	d0 f2		               bne  nextc
.111d	20 79 21	               jsr  pop
.1120	60		               rts
.1121			drawlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.1121	20 3a 21	               jsr  push
.1124	a2 28		               ldx  #40
.1126	a9 40		               lda  #64
.1128	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.112b	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.112e	ca		               dex
.112f	e0 10		hline          cpx  #vlinepos
.1131	10 03		               bpl  notyet
.1133	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.1136	e0 00		notyet         cpx  #$00
.1138	d0 ee		               bne  nextl
.113a	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.113c	85 fb		               sta  zpage1
.113e	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.1140	85 fc		               sta  zpage1+1
.1142	a0 00		               ldy  #0
.1144	a9 72		               lda  #114
.1146	91 fb		               sta  (zpage1),y
.1148	20 d8 11	               jsr  zp1add40
.114b	a2 12		               ldx  #24-hline2
.114d	a9 5d		               lda  #93
.114f	91 fb		another93      sta  (zpage1),y
.1151	20 d8 11	               jsr  zp1add40
.1154	ca		               dex
.1155	d0 f8		               bne  another93
.1157	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.1159	85 fb		               sta  zpage1
.115b	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.115d	85 fc		               sta  zpage1+1
.115f	a0 00		               ldy  #0
.1161	a9 73		               lda  #115
.1163	91 fb		               sta  (zpage1),y
.1165	20 79 21	               jsr  pop
.1168	60		               rts
.1169			drawgrid
.1169	20 3a 21	               jsr  push
.116c	20 f2 1f	               jsr  screendis
.116f	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.1171	85 fb		               sta  zpage1
.1173	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.1175	85 fc		               sta  zpage1+1
.1177	a2 08		               ldx  #8
.1179	a9 65		nextbox        lda  #101
.117b	a0 09		               ldy  #9
.117d	91 fb		               sta  (zpage1),y
.117f	88		               dey
.1180	a9 2e		               lda  #$2e
.1182	91 fb		nextcol        sta  (zpage1),y
.1184	88		               dey
.1185	d0 fb		               bne  nextcol
.1187	20 d8 11	               jsr  zp1add40
.118a	ca		               dex
.118b	d0 ec		               bne  nextbox
.118d	a0 08		               ldy  #8
.118f	a9 77		               lda  #119
.1191	91 fb		nextlin        sta  (zpage1),y
.1193	88		               dey
.1194	d0 fb		               bne  nextlin
.1196	a9 3e		               lda  #$3e
.1198	8d eb 05	               sta  scrnnewram+(40*(12))+11
.119b	a9 70		               lda  #$70                     ;+
.119d	8d c4 05	               sta  scrnnewram+(40*(11))+12
.11a0	a9 43		               lda  #$43                     ;-
.11a2	8d c5 05	               sta  scrnnewram+(40*(11))+13
.11a5	a9 6e		               lda  #$6e                     ;+
.11a7	8d c6 05	               sta  scrnnewram+(40*(11))+14
.11aa	a9 5d		               lda  #$5d                     ;|
.11ac	8d ec 05	               sta  scrnnewram+(40*(12))+12
.11af	a9 5d		               lda  #$5d                     ;|
.11b1	8d ee 05	               sta  scrnnewram+(40*(12))+14
.11b4	a9 6d		               lda  #$6d                     ;+
.11b6	8d 14 06	               sta  scrnnewram+(40*(13))+12
.11b9	a9 43		               lda  #$43                     ;-
.11bb	8d 15 06	               sta  scrnnewram+(40*(13))+13
.11be	a9 7d		               lda  #$7d                     ;+
.11c0	8d 16 06	               sta  scrnnewram+(40*(13))+14
.11c3	20 ff 1f	               jsr screenena
.11c6	20 79 21	               jsr  pop
.11c9	60		               rts
.11ca			zp1addnum
.11ca	08		               php
.11cb	48		               pha
.11cc	18		               clc
.11cd	65 fb		               adc  zpage1
.11cf	90 02		               bcc  nocarry
.11d1	e6 fc		               inc  zpage1+1
.11d3	85 fb		nocarry        sta  zpage1
.11d5	68		               pla
.11d6	28		               plp
.11d7	60		               rts
.11d8			zp1add40
.11d8	08		               php
.11d9	48		               pha
.11da	18		               clc
.11db	a5 fb		               lda  zpage1
.11dd	69 28		               adc  #40
.11df	90 02		               bcc  nocarry
.11e1	e6 fc		               inc  zpage1+1
.11e3	85 fb		nocarry        sta  zpage1
.11e5	68		               pla
.11e6	28		               plp
.11e7	60		               rts
.11e8			delay
.11e8	20 3a 21	               jsr  push
.11eb	a9 00		               lda  #$0
.11ed	aa		               tax
.11ee	a8		               tay
.11ef	ca		xagain         dex
.11f0	ca		               dex
.11f1	88		yagain         dey
.11f2	c0 00		               cpy  #$00
.11f4	d0 fb		               bne  yagain
.11f6	e0 00		               cpx  #$00
.11f8	d0 f5		               bne  xagain
.11fa	20 79 21	               jsr  pop
.11fd	60		               rts
.11fe			f1action
.11fe	48		               pha
.11ff	a9 ff		               lda  #$ff
.1201	8d 23 09	               sta  editmode
.1204	ad 24 09	               lda  fkeyset
.1207	f0 03		               beq  menua
.1209	4c 91 12	               jmp  menub
.120c			menua
.120c	20 3a 21	               jsr  push
.120f	a2 8c		               ldx  #<blankmsg
.1211	a0 19		               ldy  #>blankmsg
.1213	20 d2 20	               jsr  putscxy
.1216	a2 de		               ldx  #<f1a_msg
.1218	a0 19		               ldy  #>f1a_msg
.121a	20 d2 20	               jsr  putscxy
.121d	20 79 21	               jsr  pop
.1220	08		               php
.1221	48		               pha
.1222	8a		               txa
.1223	48		               pha
.1224	ad 42 1e	               lda  f1abutton
.1227	48		               pha
.1228	a9 92		               lda  #146
.122a	8d 54 1e	               sta  f1abutton+18
.122d	a9 01		               lda  #flashcol
.122f	8d 42 1e	               sta  f1abutton
.1232	a2 42		               ldx  #<f1abutton
.1234	a0 1e		               ldy  #>f1abutton
.1236	20 d2 20	               jsr  putscxy
.1239	20 e8 11	               jsr  delay
.123c	a9 12		               lda  #18
.123e	8d 54 1e	               sta  f1abutton+18
.1241	68		               pla
.1242	8d 42 1e	               sta  f1abutton
.1245	a2 42		               ldx  #<f1abutton
.1247	a0 1e		               ldy  #>f1abutton
.1249	20 d2 20	               jsr  putscxy
.124c	68		               pla
.124d	aa		               tax
.124e	68		               pla
.124f	28		               plp
.1250	a9 0b		               lda  #vgris
.1252	20 1b 0b	               jsr  setmenuacolor
.1255	a9 03		               lda  #menu1col1
.1257	8d 42 1e	               sta  f1abutton
.125a	20 6e 10	               jsr  drawfkeys
.125d	20 52 0d	               jsr  editor
.1260	20 3a 21	               jsr  push
.1263	a2 8c		               ldx  #<blankmsg
.1265	a0 19		               ldy  #>blankmsg
.1267	20 d2 20	               jsr  putscxy
.126a	a2 2a		               ldx  #<quit_msg
.126c	a0 1c		               ldy  #>quit_msg
.126e	20 d2 20	               jsr  putscxy
.1271	20 79 21	               jsr  pop
.1274	20 3a 21	               jsr  push
.1277	a2 8c		               ldx  #<blankmsg
.1279	a0 19		               ldy  #>blankmsg
.127b	20 d2 20	               jsr  putscxy
.127e	a2 82		               ldx  #<menua_msg
.1280	a0 1b		               ldy  #>menua_msg
.1282	20 d2 20	               jsr  putscxy
.1285	20 79 21	               jsr  pop
.1288	20 d5 0a	               jsr  resetmenuacolor
.128b	20 6e 10	               jsr  drawfkeys
.128e	4c db 12	               jmp  out
.1291			menub
.1291	20 3a 21	               jsr  push
.1294	a2 8c		               ldx  #<blankmsg
.1296	a0 19		               ldy  #>blankmsg
.1298	20 d2 20	               jsr  putscxy
.129b	a2 c6		               ldx  #<f1b_msg
.129d	a0 1a		               ldy  #>f1b_msg
.129f	20 d2 20	               jsr  putscxy
.12a2	20 79 21	               jsr  pop
.12a5	08		               php
.12a6	48		               pha
.12a7	8a		               txa
.12a8	48		               pha
.12a9	ad 1a 1f	               lda  f1bbutton
.12ac	48		               pha
.12ad	a9 92		               lda  #146
.12af	8d 2c 1f	               sta  f1bbutton+18
.12b2	a9 01		               lda  #flashcol
.12b4	8d 1a 1f	               sta  f1bbutton
.12b7	a2 1a		               ldx  #<f1bbutton
.12b9	a0 1f		               ldy  #>f1bbutton
.12bb	20 d2 20	               jsr  putscxy
.12be	20 e8 11	               jsr  delay
.12c1	a9 12		               lda  #18
.12c3	8d 2c 1f	               sta  f1bbutton+18
.12c6	68		               pla
.12c7	8d 1a 1f	               sta  f1bbutton
.12ca	a2 1a		               ldx  #<f1bbutton
.12cc	a0 1f		               ldy  #>f1bbutton
.12ce	20 d2 20	               jsr  putscxy
.12d1	68		               pla
.12d2	aa		               tax
.12d3	68		               pla
.12d4	28		               plp
.12d5	20 58 19	               jsr  flipvert
.12d8	20 04 0f	               jsr  drawbitmap
.12db	68		out            pla
.12dc	20 3a 21	               jsr  push
.12df	a2 8c		               ldx  #<blankmsg
.12e1	a0 19		               ldy  #>blankmsg
.12e3	20 d2 20	               jsr  putscxy
.12e6	a2 b8		               ldx  #<prompt_msg
.12e8	a0 19		               ldy  #>prompt_msg
.12ea	20 d2 20	               jsr  putscxy
.12ed	20 79 21	               jsr  pop
.12f0	60		               rts
.12f1			f2action
.12f1	48		               pha
.12f2	a9 00		               lda  #$0
.12f4	8d 23 09	               sta  editmode
.12f7	ad 24 09	               lda  fkeyset
.12fa	d0 4d		               bne  menub
.12fc	20 3a 21	               jsr  push
.12ff	a2 8c		               ldx  #<blankmsg
.1301	a0 19		               ldy  #>blankmsg
.1303	20 d2 20	               jsr  putscxy
.1306	a2 f9		               ldx  #<f2a_msg
.1308	a0 19		               ldy  #>f2a_msg
.130a	20 d2 20	               jsr  putscxy
.130d	20 79 21	               jsr  pop
.1310	08		               php
.1311	48		               pha
.1312	8a		               txa
.1313	48		               pha
.1314	ad 5d 1e	               lda  f2abutton
.1317	48		               pha
.1318	a9 92		               lda  #146
.131a	8d 6f 1e	               sta  f2abutton+18
.131d	a9 01		               lda  #flashcol
.131f	8d 5d 1e	               sta  f2abutton
.1322	a2 5d		               ldx  #<f2abutton
.1324	a0 1e		               ldy  #>f2abutton
.1326	20 d2 20	               jsr  putscxy
.1329	20 e8 11	               jsr  delay
.132c	a9 12		               lda  #18
.132e	8d 6f 1e	               sta  f2abutton+18
.1331	68		               pla
.1332	8d 5d 1e	               sta  f2abutton
.1335	a2 5d		               ldx  #<f2abutton
.1337	a0 1e		               ldy  #>f2abutton
.1339	20 d2 20	               jsr  putscxy
.133c	68		               pla
.133d	aa		               tax
.133e	68		               pla
.133f	28		               plp
.1340	20 bd 09	               jsr  copychar
.1343	20 04 0f	               jsr  drawbitmap
.1346	4c 93 13	               jmp  out
.1349			menub
.1349	20 3a 21	               jsr  push
.134c	a2 8c		               ldx  #<blankmsg
.134e	a0 19		               ldy  #>blankmsg
.1350	20 d2 20	               jsr  putscxy
.1353	a2 e2		               ldx  #<f2b_msg
.1355	a0 1a		               ldy  #>f2b_msg
.1357	20 d2 20	               jsr  putscxy
.135a	20 79 21	               jsr  pop
.135d	08		               php
.135e	48		               pha
.135f	8a		               txa
.1360	48		               pha
.1361	ad 35 1f	               lda  f2bbutton
.1364	48		               pha
.1365	a9 92		               lda  #146
.1367	8d 47 1f	               sta  f2bbutton+18
.136a	a9 01		               lda  #flashcol
.136c	8d 35 1f	               sta  f2bbutton
.136f	a2 35		               ldx  #<f2bbutton
.1371	a0 1f		               ldy  #>f2bbutton
.1373	20 d2 20	               jsr  putscxy
.1376	20 e8 11	               jsr  delay
.1379	a9 12		               lda  #18
.137b	8d 47 1f	               sta  f2bbutton+18
.137e	68		               pla
.137f	8d 35 1f	               sta  f2bbutton
.1382	a2 35		               ldx  #<f2bbutton
.1384	a0 1f		               ldy  #>f2bbutton
.1386	20 d2 20	               jsr  putscxy
.1389	68		               pla
.138a	aa		               tax
.138b	68		               pla
.138c	28		               plp
.138d	20 2b 19	               jsr  fliphorz
.1390	20 04 0f	               jsr  drawbitmap
.1393	68		out            pla
.1394	20 3a 21	               jsr  push
.1397	a2 8c		               ldx  #<blankmsg
.1399	a0 19		               ldy  #>blankmsg
.139b	20 d2 20	               jsr  putscxy
.139e	a2 b8		               ldx  #<prompt_msg
.13a0	a0 19		               ldy  #>prompt_msg
.13a2	20 d2 20	               jsr  putscxy
.13a5	20 79 21	               jsr  pop
.13a8	60		               rts
.13a9			f3action
.13a9	48		               pha
.13aa	a9 00		               lda  #$0
.13ac	8d 23 09	               sta  editmode
.13af	ad 24 09	               lda  fkeyset
.13b2	d0 62		               bne  menub
.13b4	08		               php
.13b5	48		               pha
.13b6	8a		               txa
.13b7	48		               pha
.13b8	ad 78 1e	               lda  f3abutton
.13bb	48		               pha
.13bc	a9 92		               lda  #146
.13be	8d 8a 1e	               sta  f3abutton+18
.13c1	a9 01		               lda  #flashcol
.13c3	8d 78 1e	               sta  f3abutton
.13c6	a2 78		               ldx  #<f3abutton
.13c8	a0 1e		               ldy  #>f3abutton
.13ca	20 d2 20	               jsr  putscxy
.13cd	20 e8 11	               jsr  delay
.13d0	a9 12		               lda  #18
.13d2	8d 8a 1e	               sta  f3abutton+18
.13d5	68		               pla
.13d6	8d 78 1e	               sta  f3abutton
.13d9	a2 78		               ldx  #<f3abutton
.13db	a0 1e		               ldy  #>f3abutton
.13dd	20 d2 20	               jsr  putscxy
.13e0	68		               pla
.13e1	aa		               tax
.13e2	68		               pla
.13e3	28		               plp
.13e4	20 3a 21	               jsr  push
.13e7	a2 8c		               ldx  #<blankmsg
.13e9	a0 19		               ldy  #>blankmsg
.13eb	20 d2 20	               jsr  putscxy
.13ee	a2 1a		               ldx  #<f3a_msg
.13f0	a0 1a		               ldy  #>f3a_msg
.13f2	20 d2 20	               jsr  putscxy
.13f5	20 79 21	               jsr  pop
.13f8	20 5a 25	getagain       jsr  getkey
.13fb	c9 31		               cmp  #$31
.13fd	f0 0b		               beq  devok
.13ff	c9 38		               cmp  #$38
.1401	f0 07		               beq  devok
.1403	c9 39		               cmp  #$39
.1405	f0 03		               beq  devok
.1407	4c f8 13	               jmp  getagain
.140a	8d 43 09	devok          sta  device
.140d	20 4b 09	               jsr  getfname
.1410	20 7d 08	               jsr  savetofile
.1413	4c 60 14	               jmp  out
.1416			menub
.1416	20 3a 21	               jsr  push
.1419	a2 8c		               ldx  #<blankmsg
.141b	a0 19		               ldy  #>blankmsg
.141d	20 d2 20	               jsr  putscxy
.1420	a2 00		               ldx  #<f3b_msg
.1422	a0 1b		               ldy  #>f3b_msg
.1424	20 d2 20	               jsr  putscxy
.1427	20 79 21	               jsr  pop
.142a	08		               php
.142b	48		               pha
.142c	8a		               txa
.142d	48		               pha
.142e	ad 50 1f	               lda  f3bbutton
.1431	48		               pha
.1432	a9 92		               lda  #146
.1434	8d 62 1f	               sta  f3bbutton+18
.1437	a9 01		               lda  #flashcol
.1439	8d 50 1f	               sta  f3bbutton
.143c	a2 50		               ldx  #<f3bbutton
.143e	a0 1f		               ldy  #>f3bbutton
.1440	20 d2 20	               jsr  putscxy
.1443	20 e8 11	               jsr  delay
.1446	a9 12		               lda  #18
.1448	8d 62 1f	               sta  f3bbutton+18
.144b	68		               pla
.144c	8d 50 1f	               sta  f3bbutton
.144f	a2 50		               ldx  #<f3bbutton
.1451	a0 1f		               ldy  #>f3bbutton
.1453	20 d2 20	               jsr  putscxy
.1456	68		               pla
.1457	aa		               tax
.1458	68		               pla
.1459	28		               plp
.145a	20 b6 18	               jsr  scrollright
.145d	20 04 0f	               jsr  drawbitmap
.1460	68		out            pla
.1461	20 3a 21	               jsr  push
.1464	a2 8c		               ldx  #<blankmsg
.1466	a0 19		               ldy  #>blankmsg
.1468	20 d2 20	               jsr  putscxy
.146b	a2 b8		               ldx  #<prompt_msg
.146d	a0 19		               ldy  #>prompt_msg
.146f	20 d2 20	               jsr  putscxy
.1472	20 79 21	               jsr  pop
.1475	60		               rts
.1476			f4action
.1476	48		               pha
.1477	a9 00		               lda  #$0
.1479	8d 23 09	               sta  editmode
.147c	ad 24 09	               lda  fkeyset
.147f	d0 62		               bne  menub
.1481	08		               php
.1482	48		               pha
.1483	8a		               txa
.1484	48		               pha
.1485	ad 93 1e	               lda  f4abutton
.1488	48		               pha
.1489	a9 92		               lda  #146
.148b	8d a5 1e	               sta  f4abutton+18
.148e	a9 01		               lda  #flashcol
.1490	8d 93 1e	               sta  f4abutton
.1493	a2 93		               ldx  #<f4abutton
.1495	a0 1e		               ldy  #>f4abutton
.1497	20 d2 20	               jsr  putscxy
.149a	20 e8 11	               jsr  delay
.149d	a9 12		               lda  #18
.149f	8d a5 1e	               sta  f4abutton+18
.14a2	68		               pla
.14a3	8d 93 1e	               sta  f4abutton
.14a6	a2 93		               ldx  #<f4abutton
.14a8	a0 1e		               ldy  #>f4abutton
.14aa	20 d2 20	               jsr  putscxy
.14ad	68		               pla
.14ae	aa		               tax
.14af	68		               pla
.14b0	28		               plp
.14b1	20 3a 21	               jsr  push
.14b4	a2 8c		               ldx  #<blankmsg
.14b6	a0 19		               ldy  #>blankmsg
.14b8	20 d2 20	               jsr  putscxy
.14bb	a2 47		               ldx  #<f4a_msg
.14bd	a0 1a		               ldy  #>f4a_msg
.14bf	20 d2 20	               jsr  putscxy
.14c2	20 79 21	               jsr  pop
.14c5	20 5a 25	getagain       jsr  getkey
.14c8	c9 31		               cmp  #$31
.14ca	f0 0b		               beq  devok
.14cc	c9 38		               cmp  #$38
.14ce	f0 07		               beq  devok
.14d0	c9 39		               cmp  #$39
.14d2	f0 03		               beq  devok
.14d4	4c c5 14	               jmp  getagain
.14d7	8d 43 09	devok          sta  device
.14da	20 4b 09	               jsr  getfname
.14dd	20 c9 08	               jsr  loadfromfile
.14e0	4c 2d 15	               jmp  out
.14e3			menub
.14e3	20 3a 21	               jsr  push
.14e6	a2 8c		               ldx  #<blankmsg
.14e8	a0 19		               ldy  #>blankmsg
.14ea	20 d2 20	               jsr  putscxy
.14ed	a2 1c		               ldx  #<f4b_msg
.14ef	a0 1b		               ldy  #>f4b_msg
.14f1	20 d2 20	               jsr  putscxy
.14f4	20 79 21	               jsr  pop
.14f7	08		               php
.14f8	48		               pha
.14f9	8a		               txa
.14fa	48		               pha
.14fb	ad 6b 1f	               lda  f4bbutton
.14fe	48		               pha
.14ff	a9 92		               lda  #146
.1501	8d 7d 1f	               sta  f4bbutton+18
.1504	a9 01		               lda  #flashcol
.1506	8d 6b 1f	               sta  f4bbutton
.1509	a2 6b		               ldx  #<f4bbutton
.150b	a0 1f		               ldy  #>f4bbutton
.150d	20 d2 20	               jsr  putscxy
.1510	20 e8 11	               jsr  delay
.1513	a9 12		               lda  #18
.1515	8d 7d 1f	               sta  f4bbutton+18
.1518	68		               pla
.1519	8d 6b 1f	               sta  f4bbutton
.151c	a2 6b		               ldx  #<f4bbutton
.151e	a0 1f		               ldy  #>f4bbutton
.1520	20 d2 20	               jsr  putscxy
.1523	68		               pla
.1524	aa		               tax
.1525	68		               pla
.1526	28		               plp
.1527	20 db 18	               jsr  scrollleft
.152a	20 04 0f	               jsr  drawbitmap
.152d	68		out            pla
.152e	20 3a 21	               jsr  push
.1531	a2 8c		               ldx  #<blankmsg
.1533	a0 19		               ldy  #>blankmsg
.1535	20 d2 20	               jsr  putscxy
.1538	a2 b8		               ldx  #<prompt_msg
.153a	a0 19		               ldy  #>prompt_msg
.153c	20 d2 20	               jsr  putscxy
.153f	20 79 21	               jsr  pop
.1542	60		               rts
.1543			f5action
.1543	48		               pha
.1544	a9 00		               lda  #$0
.1546	8d 23 09	               sta  editmode
.1549	ad 24 09	               lda  fkeyset
.154c	d0 4d		               bne  menub
.154e	20 3a 21	               jsr  push
.1551	a2 8c		               ldx  #<blankmsg
.1553	a0 19		               ldy  #>blankmsg
.1555	20 d2 20	               jsr  putscxy
.1558	a2 6f		               ldx  #<f5a_msg
.155a	a0 1a		               ldy  #>f5a_msg
.155c	20 d2 20	               jsr  putscxy
.155f	20 79 21	               jsr  pop
.1562	08		               php
.1563	48		               pha
.1564	8a		               txa
.1565	48		               pha
.1566	ad ae 1e	               lda  f5abutton
.1569	48		               pha
.156a	a9 92		               lda  #146
.156c	8d c0 1e	               sta  f5abutton+18
.156f	a9 01		               lda  #flashcol
.1571	8d ae 1e	               sta  f5abutton
.1574	a2 ae		               ldx  #<f5abutton
.1576	a0 1e		               ldy  #>f5abutton
.1578	20 d2 20	               jsr  putscxy
.157b	20 e8 11	               jsr  delay
.157e	a9 12		               lda  #18
.1580	8d c0 1e	               sta  f5abutton+18
.1583	68		               pla
.1584	8d ae 1e	               sta  f5abutton
.1587	a2 ae		               ldx  #<f5abutton
.1589	a0 1e		               ldy  #>f5abutton
.158b	20 d2 20	               jsr  putscxy
.158e	68		               pla
.158f	aa		               tax
.1590	68		               pla
.1591	28		               plp
.1592	20 09 19	               jsr  clearchar
.1595	20 04 0f	               jsr  drawbitmap
.1598	4c e5 15	               jmp  out
.159b			menub
.159b	20 3a 21	               jsr  push
.159e	a2 8c		               ldx  #<blankmsg
.15a0	a0 19		               ldy  #>blankmsg
.15a2	20 d2 20	               jsr  putscxy
.15a5	a2 38		               ldx  #<f5b_msg
.15a7	a0 1b		               ldy  #>f5b_msg
.15a9	20 d2 20	               jsr  putscxy
.15ac	20 79 21	               jsr  pop
.15af	08		               php
.15b0	48		               pha
.15b1	8a		               txa
.15b2	48		               pha
.15b3	ad 86 1f	               lda  f5bbutton
.15b6	48		               pha
.15b7	a9 92		               lda  #146
.15b9	8d 98 1f	               sta  f5bbutton+18
.15bc	a9 01		               lda  #flashcol
.15be	8d 86 1f	               sta  f5bbutton
.15c1	a2 86		               ldx  #<f5bbutton
.15c3	a0 1f		               ldy  #>f5bbutton
.15c5	20 d2 20	               jsr  putscxy
.15c8	20 e8 11	               jsr  delay
.15cb	a9 12		               lda  #18
.15cd	8d 98 1f	               sta  f5bbutton+18
.15d0	68		               pla
.15d1	8d 86 1f	               sta  f5bbutton
.15d4	a2 86		               ldx  #<f5bbutton
.15d6	a0 1f		               ldy  #>f5bbutton
.15d8	20 d2 20	               jsr  putscxy
.15db	68		               pla
.15dc	aa		               tax
.15dd	68		               pla
.15de	28		               plp
.15df	20 44 18	               jsr  scrollup
.15e2	20 04 0f	               jsr  drawbitmap
.15e5	68		out            pla
.15e6	20 3a 21	               jsr  push
.15e9	a2 8c		               ldx  #<blankmsg
.15eb	a0 19		               ldy  #>blankmsg
.15ed	20 d2 20	               jsr  putscxy
.15f0	a2 b8		               ldx  #<prompt_msg
.15f2	a0 19		               ldy  #>prompt_msg
.15f4	20 d2 20	               jsr  putscxy
.15f7	20 79 21	               jsr  pop
.15fa	60		               rts
.15fb			f6action
.15fb	48		               pha
.15fc	a9 00		               lda  #$0
.15fe	8d 23 09	               sta  editmode
.1601	ad 24 09	               lda  fkeyset
.1604	d0 4d		               bne  menub
.1606	20 3a 21	               jsr  push
.1609	a2 8c		               ldx  #<blankmsg
.160b	a0 19		               ldy  #>blankmsg
.160d	20 d2 20	               jsr  putscxy
.1610	a2 8b		               ldx  #<f6a_msg
.1612	a0 1a		               ldy  #>f6a_msg
.1614	20 d2 20	               jsr  putscxy
.1617	20 79 21	               jsr  pop
.161a	08		               php
.161b	48		               pha
.161c	8a		               txa
.161d	48		               pha
.161e	ad c9 1e	               lda  f6abutton
.1621	48		               pha
.1622	a9 92		               lda  #146
.1624	8d db 1e	               sta  f6abutton+18
.1627	a9 01		               lda  #flashcol
.1629	8d c9 1e	               sta  f6abutton
.162c	a2 c9		               ldx  #<f6abutton
.162e	a0 1e		               ldy  #>f6abutton
.1630	20 d2 20	               jsr  putscxy
.1633	20 e8 11	               jsr  delay
.1636	a9 12		               lda  #18
.1638	8d db 1e	               sta  f6abutton+18
.163b	68		               pla
.163c	8d c9 1e	               sta  f6abutton
.163f	a2 c9		               ldx  #<f6abutton
.1641	a0 1e		               ldy  #>f6abutton
.1643	20 d2 20	               jsr  putscxy
.1646	68		               pla
.1647	aa		               tax
.1648	68		               pla
.1649	28		               plp
.164a	20 fd 18	               jsr  fillchar
.164d	20 04 0f	               jsr  drawbitmap
.1650	4c 9d 16	               jmp  out
.1653			menub
.1653	20 3a 21	               jsr  push
.1656	a2 8c		               ldx  #<blankmsg
.1658	a0 19		               ldy  #>blankmsg
.165a	20 d2 20	               jsr  putscxy
.165d	a2 52		               ldx  #<f6b_msg
.165f	a0 1b		               ldy  #>f6b_msg
.1661	20 d2 20	               jsr  putscxy
.1664	20 79 21	               jsr  pop
.1667	08		               php
.1668	48		               pha
.1669	8a		               txa
.166a	48		               pha
.166b	ad a1 1f	               lda  f6bbutton
.166e	48		               pha
.166f	a9 92		               lda  #146
.1671	8d b3 1f	               sta  f6bbutton+18
.1674	a9 01		               lda  #flashcol
.1676	8d a1 1f	               sta  f6bbutton
.1679	a2 a1		               ldx  #<f6bbutton
.167b	a0 1f		               ldy  #>f6bbutton
.167d	20 d2 20	               jsr  putscxy
.1680	20 e8 11	               jsr  delay
.1683	a9 12		               lda  #18
.1685	8d b3 1f	               sta  f6bbutton+18
.1688	68		               pla
.1689	8d a1 1f	               sta  f6bbutton
.168c	a2 a1		               ldx  #<f6bbutton
.168e	a0 1f		               ldy  #>f6bbutton
.1690	20 d2 20	               jsr  putscxy
.1693	68		               pla
.1694	aa		               tax
.1695	68		               pla
.1696	28		               plp
.1697	20 7c 18	               jsr  scrolldown
.169a	20 04 0f	               jsr  drawbitmap
.169d	68		out            pla
.169e	20 3a 21	               jsr  push
.16a1	a2 8c		               ldx  #<blankmsg
.16a3	a0 19		               ldy  #>blankmsg
.16a5	20 d2 20	               jsr  putscxy
.16a8	a2 b8		               ldx  #<prompt_msg
.16aa	a0 19		               ldy  #>prompt_msg
.16ac	20 d2 20	               jsr  putscxy
.16af	20 79 21	               jsr  pop
.16b2	60		               rts
.16b3			f7action
.16b3	48		               pha
.16b4	a9 00		               lda  #$0
.16b6	8d 23 09	               sta  editmode
.16b9	ad 24 09	               lda  fkeyset
.16bc	d0 4d		               bne  menub
.16be	20 3a 21	               jsr  push
.16c1	a2 8c		               ldx  #<blankmsg
.16c3	a0 19		               ldy  #>blankmsg
.16c5	20 d2 20	               jsr  putscxy
.16c8	a2 a8		               ldx  #<f7a_msg
.16ca	a0 1a		               ldy  #>f7a_msg
.16cc	20 d2 20	               jsr  putscxy
.16cf	20 79 21	               jsr  pop
.16d2	08		               php
.16d3	48		               pha
.16d4	8a		               txa
.16d5	48		               pha
.16d6	ad e4 1e	               lda  f7abutton
.16d9	48		               pha
.16da	a9 92		               lda  #146
.16dc	8d f6 1e	               sta  f7abutton+18
.16df	a9 01		               lda  #flashcol
.16e1	8d e4 1e	               sta  f7abutton
.16e4	a2 e4		               ldx  #<f7abutton
.16e6	a0 1e		               ldy  #>f7abutton
.16e8	20 d2 20	               jsr  putscxy
.16eb	20 e8 11	               jsr  delay
.16ee	a9 12		               lda  #18
.16f0	8d f6 1e	               sta  f7abutton+18
.16f3	68		               pla
.16f4	8d e4 1e	               sta  f7abutton
.16f7	a2 e4		               ldx  #<f7abutton
.16f9	a0 1e		               ldy  #>f7abutton
.16fb	20 d2 20	               jsr  putscxy
.16fe	68		               pla
.16ff	aa		               tax
.1700	68		               pla
.1701	28		               plp
.1702	20 d7 0f	               jsr  copycharset
.1705	20 04 0f	               jsr  drawbitmap
.1708	4c 5a 17	               jmp  out
.170b	a9 00		menub          lda  #$0
.170d	8d 23 09	               sta  editmode
.1710	20 3a 21	               jsr  push
.1713	a2 8c		               ldx  #<blankmsg
.1715	a0 19		               ldy  #>blankmsg
.1717	20 d2 20	               jsr  putscxy
.171a	a2 6b		               ldx  #<f7b_msg
.171c	a0 1b		               ldy  #>f7b_msg
.171e	20 d2 20	               jsr  putscxy
.1721	20 79 21	               jsr  pop
.1724	08		               php
.1725	48		               pha
.1726	8a		               txa
.1727	48		               pha
.1728	ad bc 1f	               lda  f7bbutton
.172b	48		               pha
.172c	a9 92		               lda  #146
.172e	8d ce 1f	               sta  f7bbutton+18
.1731	a9 01		               lda  #flashcol
.1733	8d bc 1f	               sta  f7bbutton
.1736	a2 bc		               ldx  #<f7bbutton
.1738	a0 1f		               ldy  #>f7bbutton
.173a	20 d2 20	               jsr  putscxy
.173d	20 e8 11	               jsr  delay
.1740	a9 12		               lda  #18
.1742	8d ce 1f	               sta  f7bbutton+18
.1745	68		               pla
.1746	8d bc 1f	               sta  f7bbutton
.1749	a2 bc		               ldx  #<f7bbutton
.174b	a0 1f		               ldy  #>f7bbutton
.174d	20 d2 20	               jsr  putscxy
.1750	68		               pla
.1751	aa		               tax
.1752	68		               pla
.1753	28		               plp
.1754	20 24 18	               jsr  reverse
.1757	20 04 0f	               jsr  drawbitmap
.175a	68		out            pla
.175b	20 3a 21	               jsr  push
.175e	a2 8c		               ldx  #<blankmsg
.1760	a0 19		               ldy  #>blankmsg
.1762	20 d2 20	               jsr  putscxy
.1765	a2 b8		               ldx  #<prompt_msg
.1767	a0 19		               ldy  #>prompt_msg
.1769	20 d2 20	               jsr  putscxy
.176c	20 79 21	               jsr  pop
.176f	60		               rts
.1770			f8action
.1770	48		               pha
.1771	a9 00		               lda  #$0
.1773	8d 23 09	               sta  editmode
.1776	ad 24 09	               lda  fkeyset
.1779	d0 47		               bne  menub
.177b	20 3a 21	               jsr  push
.177e	a2 8c		               ldx  #<blankmsg
.1780	a0 19		               ldy  #>blankmsg
.1782	20 d2 20	               jsr  putscxy
.1785	a2 a7		               ldx  #<menub_msg
.1787	a0 1b		               ldy  #>menub_msg
.1789	20 d2 20	               jsr  putscxy
.178c	20 79 21	               jsr  pop
.178f	08		               php
.1790	48		               pha
.1791	8a		               txa
.1792	48		               pha
.1793	ad ff 1e	               lda  f8abutton
.1796	48		               pha
.1797	a9 92		               lda  #146
.1799	8d 11 1f	               sta  f8abutton+18
.179c	a9 01		               lda  #flashcol
.179e	8d ff 1e	               sta  f8abutton
.17a1	a2 ff		               ldx  #<f8abutton
.17a3	a0 1e		               ldy  #>f8abutton
.17a5	20 d2 20	               jsr  putscxy
.17a8	20 e8 11	               jsr  delay
.17ab	a9 12		               lda  #18
.17ad	8d 11 1f	               sta  f8abutton+18
.17b0	68		               pla
.17b1	8d ff 1e	               sta  f8abutton
.17b4	a2 ff		               ldx  #<f8abutton
.17b6	a0 1e		               ldy  #>f8abutton
.17b8	20 d2 20	               jsr  putscxy
.17bb	68		               pla
.17bc	aa		               tax
.17bd	68		               pla
.17be	28		               plp
.17bf	4c 06 18	               jmp  swapit
.17c2			menub
.17c2	20 3a 21	               jsr  push
.17c5	a2 8c		               ldx  #<blankmsg
.17c7	a0 19		               ldy  #>blankmsg
.17c9	20 d2 20	               jsr  putscxy
.17cc	a2 82		               ldx  #<menua_msg
.17ce	a0 1b		               ldy  #>menua_msg
.17d0	20 d2 20	               jsr  putscxy
.17d3	20 79 21	               jsr  pop
.17d6	08		               php
.17d7	48		               pha
.17d8	8a		               txa
.17d9	48		               pha
.17da	ad d7 1f	               lda  f8bbutton
.17dd	48		               pha
.17de	a9 92		               lda  #146
.17e0	8d e9 1f	               sta  f8bbutton+18
.17e3	a9 01		               lda  #flashcol
.17e5	8d d7 1f	               sta  f8bbutton
.17e8	a2 d7		               ldx  #<f8bbutton
.17ea	a0 1f		               ldy  #>f8bbutton
.17ec	20 d2 20	               jsr  putscxy
.17ef	20 e8 11	               jsr  delay
.17f2	a9 12		               lda  #18
.17f4	8d e9 1f	               sta  f8bbutton+18
.17f7	68		               pla
.17f8	8d d7 1f	               sta  f8bbutton
.17fb	a2 d7		               ldx  #<f8bbutton
.17fd	a0 1f		               ldy  #>f8bbutton
.17ff	20 d2 20	               jsr  putscxy
.1802	68		               pla
.1803	aa		               tax
.1804	68		               pla
.1805	28		               plp
.1806	49 ff		swapit         eor  #$ff
.1808	8d 24 09	               sta  fkeyset
.180b	20 6e 10	               jsr  drawfkeys
.180e	68		               pla
.180f	20 3a 21	               jsr  push
.1812	a2 8c		               ldx  #<blankmsg
.1814	a0 19		               ldy  #>blankmsg
.1816	20 d2 20	               jsr  putscxy
.1819	a2 b8		               ldx  #<prompt_msg
.181b	a0 19		               ldy  #>prompt_msg
.181d	20 d2 20	               jsr  putscxy
.1820	20 79 21	               jsr  pop
.1823	60		               rts
.1824			reverse
.1824	20 3a 21	               jsr  push
.1827	48		               pha
.1828	ad 29 09	               lda  mapaddr
.182b	85 fd		               sta  $fd
.182d	ad 2a 09	               lda  mapaddr+1
.1830	85 fe		               sta  $fe
.1832	68		               pla
.1833	a0 00		               ldy  #$00
.1835	b1 fd		again          lda  (zpage2),y
.1837	49 ff		               eor  #$ff
.1839	91 fd		               sta  (zpage2),y
.183b	c8		               iny
.183c	c0 08		               cpy  #$08
.183e	d0 f5		               bne  again
.1840	20 79 21	               jsr  pop
.1843	60		               rts
.1844			scrollup
.1844	20 3a 21	               jsr  push
.1847	48		               pha
.1848	ad 29 09	               lda  mapaddr
.184b	85 fb		               sta  $fb
.184d	ad 2a 09	               lda  mapaddr+1
.1850	85 fc		               sta  $fc
.1852	68		               pla
.1853	48		               pha
.1854	ad 29 09	               lda  mapaddr
.1857	85 fd		               sta  $fd
.1859	ad 2a 09	               lda  mapaddr+1
.185c	85 fe		               sta  $fe
.185e	68		               pla
.185f	20 59 22	               jsr  inczp2
.1862	a0 00		               ldy  #$00
.1864	b1 fb		               lda  (zpage1),y
.1866	8d 7b 18	               sta  tmpbyte
.1869	b1 fd		again          lda  (zpage2),y
.186b	91 fb		               sta  (zpage1),y
.186d	c8		               iny
.186e	c0 07		               cpy  #$07
.1870	d0 f7		               bne  again
.1872	ad 7b 18	               lda  tmpbyte
.1875	91 fb		               sta  (zpage1),y
.1877	20 79 21	               jsr  pop
.187a	60		               rts
>187b	00		tmpbyte        .byte     $00
.187c			scrolldown
.187c	20 3a 21	               jsr  push
.187f	48		               pha
.1880	ad 29 09	               lda  mapaddr
.1883	85 fb		               sta  $fb
.1885	ad 2a 09	               lda  mapaddr+1
.1888	85 fc		               sta  $fc
.188a	68		               pla
.188b	48		               pha
.188c	ad 29 09	               lda  mapaddr
.188f	85 fd		               sta  $fd
.1891	ad 2a 09	               lda  mapaddr+1
.1894	85 fe		               sta  $fe
.1896	68		               pla
.1897	20 59 22	               jsr  inczp2
.189a	a0 07		               ldy  #$07                ;xxxxxxxx zpage1
.189c	b1 fb		               lda  (zpage1),y          ;xxxxxxxx zpage2
.189e	8d b5 18	               sta  tmpbyte             ;xxxxxxxx
.18a1	88		again          dey                      ;xxxxxxxx
.18a2	b1 fb		               lda  (zpage1),y          ;xxxxxxxx
.18a4	91 fd		               sta  (zpage2),y          ;xxxxxxxx
.18a6	c0 00		               cpy  #$00                ;xxxxxxxx
.18a8	d0 f7		               bne  again               ;xxxxxxxx
.18aa	a0 00		               ldy  #$00
.18ac	ad b5 18	               lda  tmpbyte
.18af	91 fb		               sta  (zpage1),y
.18b1	20 79 21	               jsr  pop
.18b4	60		               rts
>18b5	00		tmpbyte        .byte     $00
.18b6			scrollright
.18b6	20 3a 21	               jsr  push
.18b9	48		               pha
.18ba	ad 29 09	               lda  mapaddr
.18bd	85 fb		               sta  $fb
.18bf	ad 2a 09	               lda  mapaddr+1
.18c2	85 fc		               sta  $fc
.18c4	68		               pla
.18c5	a0 00		               ldy  #$00
.18c7	b1 fb		again          lda  (zpage1),y
.18c9	18		               clc
.18ca	6a		               ror
.18cb	90 03		               bcc  zero
.18cd	18		               clc
.18ce	69 80		one            adc  #$80
.18d0	91 fb		zero           sta  (zpage1),y
.18d2	c8		               iny
.18d3	c0 08		               cpy  #$08
.18d5	d0 f0		               bne  again
.18d7	20 79 21	               jsr  pop
.18da	60		               rts
.18db			scrollleft
.18db	20 3a 21	               jsr  push
.18de	48		               pha
.18df	ad 29 09	               lda  mapaddr
.18e2	85 fb		               sta  $fb
.18e4	ad 2a 09	               lda  mapaddr+1
.18e7	85 fc		               sta  $fc
.18e9	68		               pla
.18ea	a0 00		               ldy  #$00
.18ec	b1 fb		again          lda  (zpage1),y
.18ee	18		               clc
.18ef	2a		               rol
.18f0	69 00		               adc  #$00
.18f2	91 fb		               sta  (zpage1),y
.18f4	c8		               iny
.18f5	c0 08		               cpy  #$08
.18f7	d0 f3		               bne  again
.18f9	20 79 21	               jsr  pop
.18fc	60		               rts
.18fd			fillchar
.18fd	20 3a 21	               jsr  push
.1900	a9 ff		               lda  #$ff
.1902	20 15 19	               jsr  allsame
.1905	20 79 21	               jsr  pop
.1908	60		               rts
.1909			clearchar
.1909	20 3a 21	               jsr  push
.190c	a9 00		               lda  #$00
.190e	20 15 19	               jsr  allsame
.1911	20 79 21	               jsr  pop
.1914	60		               rts
.1915			allsame
.1915	48		               pha
.1916	ad 29 09	               lda  mapaddr
.1919	85 fd		               sta  $fd
.191b	ad 2a 09	               lda  mapaddr+1
.191e	85 fe		               sta  $fe
.1920	68		               pla
.1921	a0 00		               ldy  #$00
.1923	91 fd		again          sta  (zpage2),y
.1925	c8		               iny
.1926	c0 08		               cpy  #$08
.1928	d0 f9		               bne  again
.192a	60		               rts
.192b			fliphorz
.192b	20 3a 21	               jsr  push
.192e	48		               pha
.192f	ad 29 09	               lda  mapaddr
.1932	85 fd		               sta  $fd
.1934	ad 2a 09	               lda  mapaddr+1
.1937	85 fe		               sta  $fe
.1939	68		               pla
.193a	a0 00		               ldy  #$00
.193c	b1 fd		nextbyte       lda  (zpage2),y
.193e	a2 00		               ldx  #$00
.1940	2a		rolagain       rol
.1941	6e 57 19	               ror  tmpbyte
.1944	e8		               inx
.1945	e0 08		               cpx  #$08
.1947	30 f7		               bmi  rolagain
.1949	ad 57 19	               lda  tmpbyte
.194c	91 fd		               sta  (zpage2),y
.194e	c8		               iny
.194f	c0 08		               cpy  #$08
.1951	30 e9		               bmi  nextbyte
.1953	20 79 21	               jsr  pop
.1956	60		               rts
>1957	00		tmpbyte        .byte     $00
.1958			flipvert
.1958	20 3a 21	               jsr  push
.195b	48		               pha
.195c	ad 29 09	               lda  mapaddr
.195f	85 fd		               sta  $fd
.1961	ad 2a 09	               lda  mapaddr+1
.1964	85 fe		               sta  $fe
.1966	68		               pla
.1967	a0 00		               ldy  #$00
.1969	b1 fd		tostack        lda  (zpage2),y
.196b	48		               pha
.196c	c8		               iny
.196d	c0 08		               cpy  #$08
.196f	d0 f8		               bne  tostack
.1971	a0 00		               ldy  #$00
.1973	68		fromstack      pla
.1974	91 fd		               sta  (zpage2),y
.1976	c8		               iny
.1977	c0 08		               cpy  #$08
.1979	d0 f8		               bne  fromstack
.197b	20 79 21	               jsr  pop
.197e	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: messages_fr.asm

>197f	0a 01 05	editor_msg     .byte vrose,1,5
>1982	5b 45 44 49	               .null     "[editeur]"
>1986	54 45 55 52 5d 00
>198c	03 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>1990	20 20 20 20	               .null     "                                       "
>1994	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>19a4	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>19b4	20 20 20 00
>19b8	03 00 05 92	prompt_msg     .byte     mesgcol,0,5,146
>19bc	20 55 54 49	               .null     " utilisez les clefs de fonction :"
>19c0	4c 49 53 45 5a 20 4c 45 53 20 43 4c 45 46 53 20
>19d0	44 45 20 46 4f 4e 43 54 49 4f 4e 20 3a 00
.19de			f1a_msg
>19de	03 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>19e2	20 4d 4f 44	               .null     " mode edit: chr$(   )",146
>19e6	45 20 45 44 49 54 3a 20 43 48 52 24 28 20 20 20
>19f6	29 92 00
.19f9			f2a_msg
>19f9	03 00 05	copy_msg       .byte     mesgcol,0,5
>19fc	20 45 4e 54	               .null     " entez le character a copier:"
>1a00	45 5a 20 4c 45 20 43 48 41 52 41 43 54 45 52 20
>1a10	41 20 43 4f 50 49 45 52 3a 00
.1a1a			f3a_msg
>1a1a	03 00 05 92	save_msg       .byte     mesgcol,0,5,146
>1a1e	20 53 41 55	               .null     " sauvegarder sur quel lecteur? (1/8/9): "
>1a22	56 45 47 41 52 44 45 52 20 53 55 52 20 51 55 45
>1a32	4c 20 4c 45 43 54 45 55 52 3f 20 28 31 2f 38 2f
>1a42	39 29 3a 20 00
.1a47			f4a_msg
>1a47	03 00 05 92	load_msg       .byte     mesgcol,0,5,146
>1a4b	20 43 48 41	               .null     " charger de quel lecteur? (1,8,9): "
>1a4f	52 47 45 52 20 44 45 20 51 55 45 4c 20 4c 45 43
>1a5f	54 45 55 52 3f 20 28 31 2c 38 2c 39 29 3a 20 00
.1a6f			f5a_msg
>1a6f	03 00 05	clear_msg      .byte     mesgcol,0,5
>1a72	20 45 46 46	               .null     " effacer char: chr$(   )"
>1a76	41 43 45 52 20 43 48 41 52 3a 20 43 48 52 24 28
>1a86	20 20 20 29 00
.1a8b			f6a_msg
>1a8b	03 00 05	fill_msg       .byte     mesgcol,0,5
>1a8e	20 52 45 4d	               .null     " remplir char:  chr$(   )"
>1a92	50 4c 49 52 20 43 48 41 52 3a 20 20 43 48 52 24
>1aa2	28 20 20 20 29 00
.1aa8			f7a_msg
>1aa8	03 00 05	work_msg       .byte     mesgcol,0,5
>1aab	20 52 45 43	               .null     " recuperer les caracteres."
>1aaf	55 50 45 52 45 52 20 4c 45 53 20 43 41 52 41 43
>1abf	54 45 52 45 53 2e 00
.1ac6			f1b_msg
>1ac6	03 00 05	invr_msg       .byte     mesgcol,0,5
>1ac9	20 42 41 53	               .null     " basculer verticalement:"
>1acd	43 55 4c 45 52 20 56 45 52 54 49 43 41 4c 45 4d
>1add	45 4e 54 3a 00
.1ae2			f2b_msg
>1ae2	03 00 05	flip_msg       .byte     mesgcol,0,5
>1ae5	20 42 41 53	               .null     " basculer horizontalement:"
>1ae9	43 55 4c 45 52 20 48 4f 52 49 5a 4f 4e 54 41 4c
>1af9	45 4d 45 4e 54 3a 00
.1b00			f3b_msg
>1b00	03 00 05	scrollr_msg    .byte     mesgcol,0,5
>1b03	20 44 45 46	               .null     " defiler vers la droite:"
>1b07	49 4c 45 52 20 56 45 52 53 20 4c 41 20 44 52 4f
>1b17	49 54 45 3a 00
.1b1c			f4b_msg
>1b1c	03 00 05	scrolll_msg    .byte     mesgcol,0,5
>1b1f	20 44 45 46	               .null     " defiler vers la gauche:"
>1b23	49 4c 45 52 20 56 45 52 53 20 4c 41 20 47 41 55
>1b33	43 48 45 3a 00
.1b38			f5b_msg
>1b38	03 00 05	scrollu_msg    .byte     mesgcol,0,5
>1b3b	20 44 45 46	               .null     " defiler vers le haut:"
>1b3f	49 4c 45 52 20 56 45 52 53 20 4c 45 20 48 41 55
>1b4f	54 3a 00
.1b52			f6b_msg
>1b52	03 00 05	scrolld_msg    .byte     mesgcol,0,5
>1b55	20 44 45 46	               .null     " defiler vers le bas:"
>1b59	49 4c 45 52 20 56 45 52 53 20 4c 45 20 42 41 53
>1b69	3a 00
.1b6b			f7b_msg
>1b6b	03 00 05	rvrs_msg       .byte     mesgcol,0,5
>1b6e	20 52 45 56	               .null     " reverse character:"
>1b72	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
>1b82	03 00 05	menua_msg      .byte     mesgcol,0,5
>1b85	20 56 4f 55	               .null     " vous etes dirige vers le menu 1."
>1b89	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1b99	52 53 20 4c 45 20 4d 45 4e 55 20 31 2e 00
>1ba7	03 00 05	menub_msg      .byte     mesgcol,0,5
>1baa	20 56 4f 55	               .null     " vous etes dirige vers le menu 2."
>1bae	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1bbe	52 53 20 4c 45 20 4d 45 4e 55 20 32 2e 00
>1bcc	07 00 05	copychar_msg   .byte     vjaune,0,5
>1bcf	20 45 4e 54	               .null     " entrez le caractera a copier (?).",157,157,157
>1bd3	52 45 5a 20 4c 45 20 43 41 52 41 43 54 45 52 41
>1be3	20 41 20 43 4f 50 49 45 52 20 28 3f 29 2e 9d 9d
>1bf3	9d 00
>1bf5	07 00 05	fname_msg      .byte     vjaune,0,5
>1bf8	20 4e 4f 4d	               .null     " nom du fichier (6 lettres): ",$a4,$a4,$a4,$a4,$a4,$a4,".chr",157,157,157,157,157,157,157,157,157,157
>1bfc	20 44 55 20 46 49 43 48 49 45 52 20 28 36 20 4c
>1c0c	45 54 54 52 45 53 29 3a 20 a4 a4 a4 a4 a4 a4 2e
>1c1c	43 48 52 9d 9d 9d 9d 9d 9d 9d 9d 9d 9d 00
>1c2a	0e 15 18 12	quit_msg       .byte     vblue1,21,24,18
>1c2e	43 54 52 4c	               .text     "ctrl-x",146
>1c32	2d 58 92
>1c35	2d 51 55 49	               .null     "-quitter."
>1c39	54 54 45 52 2e 00
.1c3f			menu_msg
>1c3f	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>1c43	43 54 52 4c	               .text     "ctrl-x",146
>1c47	2d 58 92
>1c4a	20 41 55 20	               .null     " au menu."
>1c4e	4d 45 4e 55 2e 00
>1c54	07 04 06 12	whoami0        .byte     whoamicol,4,6,18
>1c58	20 20 20 20	               .null     "                               ",146
>1c5c	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1c6c	20 20 20 20 20 20 20 20 20 20 20 92 00
>1c79	07 04 07 12	whoami1        .byte     whoamicol,4,7,18
>1c7d	20 20 20 20	               .null     "       ",146," c h a r e d i t ",18,"       ",146
>1c81	20 20 20 92 20 43 20 48 20 41 20 52 20 45 20 44
>1c91	20 49 20 54 20 12 20 20 20 20 20 20 20 92 00
>1ca0	07 04 08 12	whoami2        .byte     whoamicol,4,8,18
>1ca4	20 20 20 20	               .null     "                               ",146
>1ca8	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1cb8	20 20 20 20 20 20 20 20 20 20 20 92 00
>1cc5	07 04 09 12	whoami3        .byte     whoamicol,4,9,18
>1cc9	20 20 20 20	               .null     "    inspire de john heilborn   ",146
>1ccd	49 4e 53 50 49 52 45 20 44 45 20 4a 4f 48 4e 20
>1cdd	48 45 49 4c 42 4f 52 4e 20 20 20 92 00
>1cea	07 04 0a 12	whoami4        .byte     whoamicol,4,10,18
>1cee	20 20 20 20	               .null     "      isbn: 0-942386-29-9      ",146
>1cf2	20 20 49 53 42 4e 3a 20 30 2d 39 34 32 33 38 36
>1d02	2d 32 39 2d 39 20 20 20 20 20 20 92 00
>1d0f	07 04 0b 12	whoami5        .byte     whoamicol,4,11,18
>1d13	20 20 20 20	               .null     "                               ",146
>1d17	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1d27	20 20 20 20 20 20 20 20 20 20 20 92 00
>1d34	07 04 0c 12	whoami6        .byte     whoamicol,4,12,18
>1d38	20 20 20 20	               .null     "     code en assembleur par    ",146
>1d3c	20 43 4f 44 45 20 45 4e 20 41 53 53 45 4d 42 4c
>1d4c	45 55 52 20 50 41 52 20 20 20 20 92 00
>1d59	07 04 0d 12	whoami7        .byte     whoamicol,4,13,18
>1d5d	20 44 41 4e	               .null     " daniel lafrance quebec/canada ",146
>1d61	49 45 4c 20 4c 41 46 52 41 4e 43 45 20 51 55 45
>1d71	42 45 43 2f 43 41 4e 41 44 41 20 92 00
>1d7e	07 04 0e 12	whoami8        .byte     whoamicol,4,14,18
>1d82	20 20 20 20	               .null     "    version:",version,"    ",146
>1d86	56 45 52 53 49 4f 4e 3a 32 30 32 33 31 31 31 36
>1d96	2d 31 30 30 34 30 30 20 20 20 20 92 00
>1da3	07 04 0f 12	whoami9        .byte     whoamicol,4,15,18
>1da7	20 20 20 20	               .null     "                               ",146
>1dab	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1dbb	20 20 20 20 20 20 20 20 20 20 20 92 00
>1dc8	03 06 10 14	bye_msg        .byte     vcyan,6,16,20
>1dcc	20 20 20 20	               .null     "      bonjour et merci      ",146
>1dd0	20 20 42 4f 4e 4a 4f 55 52 20 45 54 20 4d 45 52
>1de0	43 49 20 20 20 20 20 20 92 00
>1dea	0d 05 18 12	any_msg        .byte     vvert1,5,24,18
>1dee	20 41 50 50	               .null     " appuyez une cle pour basic ",146
>1df2	55 59 45 5a 20 55 4e 45 20 43 4c 45 20 50 4f 55
>1e02	52 20 42 41 53 49 43 20 92 00
>1e0c	03 12 07	titremenu1     .byte     menu1col1,fkeyleft,f1top-2       ;133
>1e0f	12 20 4a 45	               .null     18," jeu de fonctions #1 ",146
>1e13	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>1e23	31 20 92 00
>1e27	0f 12 07	titremenu2     .byte     menu2col1,fkeyleft,f1top-2       ;133
>1e2a	12 20 4a 45	               .null     18," jeu de fonctions #2 ",146
>1e2e	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>1e3e	32 20 92 00
>1e42	03 12 09	f1abutton      .byte     menu1col1,fkeyleft,f1top       ;133
>1e45	45 44 49 54	               .text     "editer carac..."
>1e49	45 52 20 43 41 52 41 43 2e 2e 2e
>1e54	12		               .byte     18             ; position 15
>1e55	a9 20 46 31	               .null     $a9," f1 ",223,146
>1e59	20 df 92 00
>1e5d	0e 12 0a	f2abutton      .byte     menu1col2,fkeyleft,f1top+1     ;138
>1e60	43 4f 50 49	               .text     "copier un carac"
>1e64	45 52 20 55 4e 20 43 41 52 41 43
>1e6f	12		               .byte     18   ; position 15
>1e70	20 20 46 32	               .null     "  f2  ",146
>1e74	20 20 92 00
>1e78	03 12 0c	f3abutton      .byte     menu1col1,fkeyleft,f1top+3     ;137
>1e7b	53 41 56 45	               .text     "savegarder sur."
>1e7f	47 41 52 44 45 52 20 53 55 52 2e
>1e8a	12		               .byte     18            ; position 15
>1e8b	a9 20 46 33	               .null     $a9," f3 ",223,146
>1e8f	20 df 92 00
>1e93	0e 12 0d	f4abutton      .byte     menu1col2,fkeyleft,f1top+4     ;134
>1e96	43 48 41 52	               .text     "charger de....."
>1e9a	47 45 52 20 44 45 2e 2e 2e 2e 2e
>1ea5	12		               .byte     18             ; position 15
>1ea6	20 20 46 34	               .null     "  f4  ",146
>1eaa	20 20 92 00
>1eae	03 12 0f	f5abutton      .byte     menu1col1,fkeyleft,f1top+6     ;135
>1eb1	4d 45 54 54	               .text     "mettre tout a 0"
>1eb5	52 45 20 54 4f 55 54 20 41 20 30
>1ec0	12		               .byte     18             ; position 15
>1ec1	a9 20 46 35	               .null     $a9," f5 ",223,146
>1ec5	20 df 92 00
>1ec9	0e 12 10	f6abutton      .byte     menu1col2,fkeyleft,f1top+7    ;139
>1ecc	4d 45 54 54	               .text     "mettre tout a 1"
>1ed0	52 45 20 54 4f 55 54 20 41 20 31
>1edb	12		               .byte     18             ; position 15
>1edc	20 20 46 36	               .null     "  f6  ",146
>1ee0	20 20 92 00
>1ee4	03 12 12	f7abutton      .byte     menu1col1,fkeyleft,f1top+9    ;136
>1ee7	52 45 43 55	               .text     "recuperer rom.."
>1eeb	50 45 52 45 52 20 52 4f 4d 2e 2e
>1ef6	12		               .byte     18             ; position 15
>1ef7	a9 20 46 37	               .null     $a9," f7 ",223,146
>1efb	20 df 92 00
>1eff	0e 12 13	f8abutton      .byte     menu1col2,fkeyleft,f1top+10
>1f02	41 4c 4c 45	               .text     "aller au menu2."
>1f06	52 20 41 55 20 4d 45 4e 55 32 2e
>1f11	12		               .byte     18             ; position 15
>1f12	20 20 46 38	               .null     "  f8  ", 146
>1f16	20 20 92 00
>1f1a	0f 12 09	f1bbutton      .byte     menu2col1,fkeyleft,f1top
>1f1d	42 41 53 43	               .text     "basculer vert.."
>1f21	55 4c 45 52 20 56 45 52 54 2e 2e
>1f2c	12		               .byte     18             ; position 15
>1f2d	a9 20 46 31	               .null     $a9," f1 ",223,146
>1f31	20 df 92 00
>1f35	0c 12 0a	f2bbutton      .byte     menu2col2,fkeyleft,f1top+1
>1f38	42 41 53 43	               .text     "basculer horz.."
>1f3c	55 4c 45 52 20 48 4f 52 5a 2e 2e
>1f47	12		               .byte     18             ; position 15
>1f48	20 20 46 32	               .null     "  f2  ",146
>1f4c	20 20 92 00
>1f50	0f 12 0c	f3bbutton      .byte     menu2col1,fkeyleft,f1top+3
>1f53	44 45 46 49	               .text     "defiler droite."
>1f57	4c 45 52 20 44 52 4f 49 54 45 2e
>1f62	12		               .byte     18             ; position 15
>1f63	a9 20 46 33	               .null     $a9," f3 ",223,146
>1f67	20 df 92 00
>1f6b	0c 12 0d	f4bbutton      .byte     menu2col2,fkeyleft,f1top+4
>1f6e	44 45 46 49	               .text     "defiler gauche."
>1f72	4c 45 52 20 47 41 55 43 48 45 2e
>1f7d	12		               .byte     18             ; position 15
>1f7e	20 20 46 34	               .null     "  f4  ",146
>1f82	20 20 92 00
>1f86	0f 12 0f	f5bbutton      .byte     menu2col1,fkeyleft,f1top+6
>1f89	44 45 46 49	               .text     "defiler haut..."
>1f8d	4c 45 52 20 48 41 55 54 2e 2e 2e
>1f98	12		               .byte     18             ; position 15
>1f99	a9 20 46 35	               .null     $a9," f5 ",223,146
>1f9d	20 df 92 00
>1fa1	0c 12 10	f6bbutton      .byte     menu2col2,fkeyleft,f1top+7
>1fa4	44 45 46 49	               .text     "defiler bas...."
>1fa8	4c 45 52 20 42 41 53 2e 2e 2e 2e
>1fb3	12		               .byte     18             ; position 15
>1fb4	20 20 46 36	               .null     "  f6  ",146
>1fb8	20 20 92 00
>1fbc	0f 12 12	f7bbutton      .byte     menu2col1,fkeyleft,f1top+9
>1fbf	49 4e 56 45	               .text     "inverser bits.."
>1fc3	52 53 45 52 20 42 49 54 53 2e 2e
>1fce	12		               .byte     18             ; position 15
>1fcf	a9 20 46 37	               .null     $a9," f7 ",223,146
>1fd3	20 df 92 00
>1fd7	0c 12 13	f8bbutton      .byte     menu2col2,fkeyleft,f1top+10
>1fda	41 4c 4c 45	               .text     "aller au menu1."
>1fde	52 20 41 55 20 4d 45 4e 55 31 2e
>1fe9	12		               .byte     18             ; position 15
>1fea	20 20 46 38	               .null     "  f8  ", 146
>1fee	20 20 92 00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.1ff2			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.1ff2			screendis
.1ff2	08		               php
.1ff3	48		               pha
.1ff4	ad 11 d0	               lda  $d011
.1ff7	29 ef		               and  #%11101111
.1ff9	8d 11 d0	               sta  $d011
.1ffc	68		               pla
.1ffd	28		               plp
.1ffe	60		               rts
.1fff			screenena
.1fff	08		               php
.2000	48		               pha
.2001	ad 11 d0	               lda  $d011
.2004	09 10		               ora  #%00010000
.2006	8d 11 d0	               sta  $d011
.2009	68		               pla
.200a	28		               plp
.200b	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.200c			scrmaninit
.200c	20 3a 21	               jsr  push
.200f	a9 06		               lda  #vbleu
.2011	8d 21 d0	               sta  vicbackcol
.2014	a9 05		               lda  #vvert
.2016	8d 20 d0	               sta  vicbordcol
.2019	a9 01		               lda  #vblanc
.201b	8d 86 02	               sta  bascol
.201e	ad 00 04	               lda  scrnram
.2021	8d 00 04	               sta  scrnram
.2024	20 2c 20	               jsr  cls
.2027	20 79 21	               jsr  pop
.202a	60		               rts
>202b	8e		characterset   .byte b_uppercase
.202c			cls
.202c	08		               php
.202d	48		               pha
.202e	a9 93		               lda  #$93
.2030	20 43 20	               jsr  putch
.2033	68		               pla
.2034	28		               plp
.2035	60		               rts
.2036			putnch
.2036	08		               php
.2037	e0 00		               cpx  #$00
.2039	f0 06		               beq  out
.203b	20 d2 ff	again          jsr  $ffd2
.203e	ca		               dex
.203f	d0 fa		               bne  again
.2041	28		out            plp
.2042	60		               rts
.2043			putch
.2043	08		               php
.2044	20 d2 ff	               jsr  $ffd2
.2047	28		               plp
.2048	60		               rts
.2049			puts
.2049	20 3a 21	               jsr  push
.204c	86 fb		               stx  zpage1
.204e	84 fc		               sty  zpage1+1
.2050	a0 00		               ldy  #0
.2052	b1 fb		next           lda  (zpage1),y
.2054	f0 09		               beq  exit
.2056	20 43 20	               jsr  putch
.2059	20 41 22	               jsr  inczp1
.205c	4c 52 20	               jmp  next
.205f	20 79 21	exit           jsr  pop
.2062	60		               rts
.2063			gotoxy
.2063	08		               php
.2064	18		               clc
.2065	8a		               txa
.2066	48		               pha
.2067	98		               tya
.2068	aa		               tax
.2069	68		               pla
.206a	a8		               tay
.206b	20 f0 ff	               jsr  kplot
.206e	28		               plp
.206f	60		               rts
.2070			cursor
=$0286			bascol    =    $0286
.2070	08		               php
.2071	48		               pha
.2072	90 12		               bcc  restore
.2074	20 f0 ff	               jsr  kplot
.2077	8c 98 20	               sty  cx
.207a	8e 99 20	               stx  cy
.207d	ad 86 02	               lda  bascol
.2080	8d 9a 20	               sta  bcol
.2083	4c 95 20	               jmp  out
.2086	ae 99 20	restore        ldx  cy
.2089	ac 98 20	               ldy  cx
.208c	20 f0 ff	               jsr  kplot
.208f	ad 9a 20	               lda  bcol
.2092	8d 86 02	               sta  bascol
.2095	68		out            pla
.2096	28		               plp
.2097	60		               rts
>2098	00		cx   .byte     $00
>2099	00		cy   .byte     $00
>209a	00		bcol .byte     $00
.209b			cursave
.209b	08		               php
.209c	38		               sec
.209d	20 70 20	               jsr  cursor
.20a0	28		               plp
.20a1	60		               rts
.20a2			curput
.20a2	08		               php
.20a3	18		               clc
.20a4	20 70 20	               jsr  cursor
.20a7	28		               plp
.20a8	60		               rts
.20a9			putsxy
.20a9	20 3a 21	               jsr  push
.20ac	86 fb		               stx  zpage1
.20ae	84 fc		               sty  zpage1+1
.20b0	a0 00		               ldy  #$00
.20b2	b1 fb		               lda  (zpage1),y
.20b4	aa		               tax
.20b5	20 41 22	               jsr  inczp1
.20b8	b1 fb		               lda  (zpage1),y
.20ba	a8		               tay
.20bb	20 63 20	               jsr  gotoxy
.20be	20 41 22	               jsr  inczp1
.20c1	a6 fb		               ldx  zpage1
.20c3	a4 fc		               ldy  zpage1+1
.20c5	20 49 20	               jsr  puts
.20c8	20 79 21	               jsr  pop
.20cb	60		               rts
>20cc	00 00		straddr   .word     $00
>20ce	00		px        .byte     $00
>20cf	00		py        .byte     $00
>20d0	00 00		zp1       .word     $00
.20d2			putscxy
.20d2	20 3a 21	               jsr  push
.20d5	84 fc		               sty  zpage1+1
.20d7	86 fb		               stx  zpage1
.20d9	ad 86 02	               lda  bascol
.20dc	8d fc 20	               sta  bc
.20df	a0 00		               ldy #$00
.20e1	b1 fb		               lda  (zpage1),y
.20e3	8d 86 02	               sta  bascol
.20e6	20 41 22	               jsr  inczp1
.20e9	a6 fb		               ldx  zpage1
.20eb	a4 fc		               ldy  zpage1+1
.20ed	20 a9 20	               jsr  putsxy
.20f0	ad fc 20	               lda  bc
.20f3	8d 86 02	               sta  bascol
.20f6	20 79 21	               jsr  pop
.20f9	60		               rts
>20fa	00 00		straddr  .word      $00
>20fc	00		bc       .byte      $00
>20fd	00 00		zp1      .word      $00
.20ff			putrahex
.20ff	08		               php
.2100	48		               pha
.2101	20 57 23	               jsr  a2hex
.2104	a9 f6		               lda  #<a2hexstr
.2106	a0 22		               ldy  #>a2hexstr
.2108	20 49 20	               jsr  puts
.210b	68		               pla
.210c	28		               plp
.210d	60		               rts
.210e			kputrahexxy
.210e			bputrahexxy
.210e			putrahexxy
.210e	08		               php
.210f	20 57 23	               jsr  a2hex
.2112	a9 f3		               lda  #<a2hexpos
.2114	a0 22		               ldy  #>a2hexpos
.2116	20 a9 20	               jsr  putsxy
.2119	68		               pla
.211a	28		               plp
.211b	60		               rts
.211c			putrahexcxy
.211c	08		               php
.211d	20 57 23	               jsr  a2hex
.2120	a9 f3		               lda  #<a2hexpos
.2122	a0 22		               ldy  #>a2hexpos
.2124	20 d2 20	               jsr  putscxy
.2127	68		               pla
.2128	28		               plp
.2129	60		               rts
.212a			setinverse
.212a	48		               pha
.212b	a9 12		               lda  #$12
.212d	20 d2 ff	               jsr  $ffd2
.2130	68		               pla
.2131	60		               rts
.2132			clrinverse
.2132	48		               pha
.2133	a9 92		               lda  #$92
.2135	20 d2 ff	               jsr  $ffd2
.2138	68		               pla
.2139	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.213a			push
.213a	08		          php            ; stack : flg, pcl, pch
.213b	78		          sei
.213c	8d 76 21	          sta  ra        ; save a
.213f	68		          pla            ; stack : pcl, pch
.2140	8d 75 21	          sta  rp        ; save rp
.2143	68		          pla            ; stack : pch
.2144	8d 77 21	          sta  pc        ; save pcl
.2147	68		          pla            ; stack : -
.2148	8d 78 21	          sta  pc+1      ; save pch
.214b	a5 fb		          lda  zpage1    ; get zpage1 low byte
.214d	48		          pha            ; stack : zp1l
.214e	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.2150	48		          pha            ; stack : zp1h, zp1l
.2151	a5 fd		          lda  zpage2    ; get zpage2 low byte
.2153	48		          pha            ; stack : zp2l, zp1h, zp1l
.2154	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.2156	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.2157	ad 75 21	          lda  rp        ; get rp
.215a	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.215b	ad 76 21	          lda  ra        ; get a
.215e	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.215f	8a		          txa            ; get x
.2160	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.2161	98		          tya            ; get y
.2162	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2163	ad 78 21	          lda  pc+1      ; get pch
.2166	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2167	ad 77 21	          lda  pc        ; get pcl
.216a	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.216b	ad 75 21	          lda  rp        ; get rp
.216e	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.216f	ad 76 21	          lda  ra        ; get a
.2172	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2173	58		          cli
.2174	60		          rts
>2175	00		rp        .byte     0
>2176	00		ra        .byte     0
>2177	00 00		pc        .word     0
.2179			pull
.2179			pop
.2179	78		          sei
.217a	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.217b	8d ae 21	          sta  pc        ; save pcl
.217e	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.217f	8d af 21	          sta  pc+1      ; save pch
.2182	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.2183	a8		          tay            ; set y
.2184	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.2185	aa		          tax            ; set x
.2186	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.2187	8d ad 21	          sta  ra        ; save a
.218a	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.218b	8d ac 21	          sta  rp        ; save rp
.218e	68		          pla            ; stack : zp2l, zp1h, zp1l
.218f	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.2191	68		          pla            ; stack : zp1h, zp1l
.2192	85 fd		          sta  zpage2    ; get zpage2 High byte
.2194	68		          pla            ; stack : zp1l
.2195	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.2197	68		          pla            ; stack :
.2198	85 fb		          sta  zpage1    ; get zpage1 High byte
.219a	ad af 21	          lda  pc+1      ; get pch
.219d	48		          pha            ; stack : pch
.219e	ad ae 21	          lda  pc
.21a1	48		          pha            ; stack : pcl, pch
.21a2	ad ac 21	          lda  rp        ; get rp
.21a5	48		          pha            ; stack : rp, pcl, pch
.21a6	ad ad 21	          lda  ra        ; set ra
.21a9	58		          cli
.21aa	28		          plp            ; stack : pcl, pch
.21ab	60		          rts
>21ac	00		rp        .byte     0
>21ad	00		ra        .byte     0
>21ae	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.21b0			blkfill
.21b0	20 3a 21	bf0            jsr  push
.21b3	20 71 22	               jsr  savezp1
.21b6	84 fc		               sty  zpage1+1
.21b8	a0 00		               ldy  #$00
.21ba	84 fb		               sty  zpage1
.21bc	91 fb		bf1            sta  (zpage1),y
.21be	c8		               iny
.21bf	d0 fb		               bne  bf1
.21c1	20 80 22	               jsr  restzp1
.21c4	20 79 21	               jsr  pop
.21c7	60		               rts
.21c8			memfill
.21c8	20 3a 21	               jsr  push
.21cb	20 b0 21	mf1            jsr  blkfill
.21ce	c8		               iny
.21cf	ca		               dex
.21d0	d0 f9		               bne  mf1
.21d2	20 79 21	               jsr  pop
.21d5	60		               rts
.21d6			memmove
.21d6	20 3a 21	               jsr  push
.21d9	ba		               tsx            ; On se crée un pointeur ...
.21da	8a		               txa
.21db	18		               clc
.21dc	69 0b		               adc  #11
.21de	a8		               tay
.21df	a2 06		               ldx  #$06
.21e1	b9 00 01	nextbyte       lda  $0100,y
.21e4	99 30 22	               sta  words,y
.21e7	c8		               iny
.21e8	ca		               dex
.21e9	d0 f6		               bne  nextbyte
.21eb	ad 30 22	               lda  s
.21ee	8d 07 22	               sta  source+1
.21f1	ad 31 22	               lda  s+1
.21f4	8d 08 22	               sta  source+2
.21f7	ad 32 22	               lda  d
.21fa	8d 04 22	               sta  destin+1
.21fd	ad 33 22	               lda  d+1
.2200	8d 05 22	               sta  destin+2
.2203	ad ff ff	destin         lda  $ffff
.2206	8d ff ff	source         sta  $ffff
.2209	ee 04 22	               inc  destin+1
.220c	d0 03		               bne  src
.220e	ee 05 22	               inc  destin+2
.2211	ee 07 22	src            inc  source+1
.2214	d0 03		               bne  cnt
.2216	ee 08 22	               inc  source+2
.2219	ad 34 22	cnt            lda  compte
.221c	d0 08		               bne  decit
.221e	ad 35 22	               lda  compte+1
.2221	f0 09		               beq  fini
.2223	ce 35 22	               dec  compte+1
.2226	ce 34 22	decit          dec  compte
.2229	4c 03 22	               jmp  destin
.222c	20 79 21	fini           jsr  pop
.222f	60		               rts
.2230			words
>2230	00 00		s         .word     $0000
>2232	00 00		d         .word     $0000
>2234	00 00		compte    .word     $0000
.2236			decword
.2236	20 3a 21	               jsr  push
.2239	86 fd		               stx  zpage2
.223b	84 fe		               sty  zpage2+1
.223d	20 79 21	               jsr  pop
.2240	60		               rts
.2241			inczp1
.2241	08		               php
.2242	48		               pha
.2243	e6 fb		               inc  zpage1
.2245	a5 fb		               lda  zpage1
.2247	d0 02		               bne  nopage
.2249	e6 fc		               inc  zpage1+1
.224b	68		nopage         pla
.224c	28		               plp
.224d	60		               rts
.224e			deczp1
.224e	08		                php
.224f	48		                pha
.2250	c6 fb		                dec  zpage1
.2252	d0 02		                bne  nopage
.2254	c6 fc		                dec  zpage1+1
.2256	68		nopage          pla
.2257	28		                plp
.2258	60		                rts
.2259			inczp2
.2259	08		               php
.225a	48		               pha
.225b	e6 fd		               inc  zpage2
.225d	a5 fd		               lda  zpage2
.225f	d0 02		               bne  nopage
.2261	e6 fe		               inc  zpage2+1
.2263	68		nopage         pla
.2264	28		               plp
.2265	60		               rts
.2266			deczp2
.2266	08		               php
.2267	48		               pha
.2268	a5 fd		               lda  zpage2
.226a	d0 02		               bne  nopage
.226c	c6 fe		               dec  zpage2+1
.226e	68		nopage         pla
.226f	28		               plp
.2270	60		               rts
.2271			savezp1
.2271	08		               php
.2272	48		               pha
.2273	a5 fb		               lda  zpage1
.2275	8d ed 22	               sta  zp1
.2278	a5 fc		               lda  zpage1+1
.227a	8d ee 22	               sta  zp1+1
.227d	68		               pla
.227e	28		               plp
.227f	60		               rts
.2280			restzp1
.2280	08		               php
.2281	48		               pha
.2282	ad ed 22	               lda zp1
.2285	85 fb		               sta zpage1
.2287	ad ee 22	               lda zp1+1
.228a	85 fc		               sta zpage1+1
.228c	68		               pla
.228d	28		               plp
.228e	60		               rts
.228f			savezp2
.228f	08		         php
.2290	48		         pha
.2291	a5 fd		         lda zpage2
.2293	8d ef 22	         sta zp2
.2296	a5 fe		         lda zpage2+1
.2298	8d f0 22	         sta zp2+1
.229b	68		         pla
.229c	28		         plp
.229d	60		         rts
.229e			restzp2
.229e	08		                php
.229f	48		                pha
.22a0	ad ef 22	                lda  zp2
.22a3	85 fd		                sta  zpage2
.22a5	ad f0 22	                lda  zp2+1
.22a8	85 fe		                sta  zpage2+1
.22aa	68		                pla
.22ab	28		                plp
.22ac	60		                rts
.22ad			xy2addr
.22ad	08		                php
.22ae	48		                pha
.22af	8a		                txa
.22b0	48		                pha
.22b1	98		                tya
.22b2	48		                pha
.22b3	ad e8 22	                lda     addr1+1
.22b6	8d ea 22	                sta     addr2+1
.22b9	ad e7 22	                lda     addr1
.22bc	8d e9 22	                sta     addr2
.22bf	c0 00		                cpy     #$00
.22c1	f0 0f		                beq     addx
.22c3	18		moreline        clc
.22c4	6d e6 22	                adc     ymult
.22c7	90 03		                bcc     norepy
.22c9	ee ea 22	                inc     addr2+1
.22cc	8d e9 22	norepy          sta     addr2
.22cf	88		                dey
.22d0	d0 f1		                bne     moreline
.22d2	8a		addx            txa
.22d3	18		                clc
.22d4	6d e9 22	                adc     addr2
.22d7	90 03		                bcc     thatsit
.22d9	ee ea 22	                inc     addr2+1
.22dc	8d e9 22	thatsit         sta     addr2
.22df	68		                pla
.22e0	a8		                tay
.22e1	68		                pla
.22e2	aa		                tax
.22e3	68		                pla
.22e4	28		                plp
.22e5	60		                rts
>22e6	28		ymult          .byte     40
>22e7	00 00		addr1          .word     $0000
>22e9	00 00		addr2          .word     $0000
>22eb	00 00		bytecnt        .word     $0000
>22ed	00 00		zp1        .word   $0000
>22ef	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>22f1	01		a2hexcol       .byte     1              ; pour aputscxy
>22f2	00		a2hexbkcol     .byte     %00000000
.22f3			a2hexpos
>22f3	00		a2hexpx        .byte     0              ; pour aputsxy
>22f4	00		a2hexpy        .byte     0
>22f5	24		a2hexprefix    .byte     "$"            ; pour aputs
>22f6	00 00		a2hexstr       .word     $00
>22f8	00 00		               .word     $00
>22fa	00		               .byte     0              ; 0 end string
>22fb	30 30 30 30	abin           .null     "00000000"
>22ff	30 30 30 30 00
>2304	20 20 20 00	adec           .null     "   "
.2308			putahexfmtxy
.2308	20 3a 21	               jsr  push
.230b	20 57 23	               jsr  a2hex
.230e	ae f3 22	               ldx  a2hexpx
.2311	ac f4 22	               ldy  a2hexpy
.2314	20 63 20	               jsr  gotoxy
.2317	a2 f5		               ldx  #<a2hexprefix
.2319	a0 22		               ldy  #>a2hexprefix
.231b	20 49 20	               jsr  puts
.231e	20 79 21	               jsr  pop
.2321	60		               rts
.2322			putahexfmt
.2322	20 3a 21	               jsr  push
.2325	20 57 23	               jsr  a2hex
.2328	a2 f5		               ldx  #<a2hexprefix
.232a	a0 22		               ldy  #>a2hexprefix
.232c	20 49 20	               jsr  puts
.232f	20 79 21	               jsr  pop
.2332	60		               rts
.2333			putahex
.2333	20 3a 21	               jsr  push
.2336	20 57 23	               jsr  a2hex
.2339	a2 f6		               ldx  #<a2hexstr
.233b	a0 22		               ldy  #>a2hexstr
.233d	20 49 20	               jsr  puts
.2340	20 79 21	               jsr  pop
.2343	60		               rts
.2344			nib2hex
.2344	08		               php
.2345	29 0f		               and  #$0f
.2347	f8		               sed
.2348	18		               clc
.2349	69 90		               adc  #$90
.234b	69 40		               adc  #$40
.234d	d8		               cld
.234e	28		               plp
.234f	60		               rts
.2350			lsra4bits
.2350	08		               php
.2351	4a		               lsr
.2352	4a		               lsr
.2353	4a		               lsr
.2354	4a		               lsr
.2355	28		               plp
.2356	60		               rts
.2357			a2hex
.2357	08		               php
.2358	48		               pha
.2359	48		               pha
.235a	20 50 23	               jsr  lsra4bits
.235d	20 44 23	               jsr  nib2hex
.2360	8d f6 22	               sta  a2hexstr
.2363	68		               pla
.2364	20 44 23	               jsr  nib2hex
.2367	8d f7 22	               sta  a2hexstr+1
.236a	a9 00		               lda  #$00                ; set end of string
.236c	8d f8 22	               sta  a2hexstr+2
.236f	68		               pla
.2370	28		               plp
.2371	60		               rts
.2372			xy2hex
.2372	20 3a 21	               jsr  push
.2375	20 57 23	               jsr  a2hex
.2378	8a		               txa
.2379	48		               pha
.237a	20 50 23	               jsr  lsra4bits
.237d	20 44 23	               jsr  nib2hex
.2380	8d f6 22	               sta  a2hexstr
.2383	68		               pla
.2384	20 44 23	               jsr  nib2hex
.2387	8d f7 22	               sta  a2hexstr+1
.238a	98		               tya
.238b	48		               pha
.238c	20 50 23	               jsr  lsra4bits
.238f	20 44 23	               jsr  nib2hex
.2392	8d f8 22	               sta  a2hexstr+2
.2395	68		               pla
.2396	20 44 23	               jsr  nib2hex
.2399	8d f9 22	               sta  a2hexstr+3
.239c	a9 00		               lda  #$00                ; 0 ended string
.239e	8d fa 22	               sta  a2hexstr+4
.23a1	20 79 21	               jsr  pop
.23a4			atobin
.23a4	20 3a 21	               jsr  push
.23a7	a2 08		               ldx  #8
.23a9	a0 00		               ldy  #0
.23ab	18		               clc
.23ac	2a		nextbit        rol
.23ad	48		               pha
.23ae	69 00		               adc  #$00
.23b0	29 01		               and  #$01
.23b2	20 44 23	               jsr  nib2hex
.23b5	99 fb 22	               sta  abin,y
.23b8	68		               pla
.23b9	c8		               iny
.23ba	ca		               dex
.23bb	d0 ef		               bne  nextbit
.23bd	a9 00		               lda  #0
.23bf	99 fb 22	               sta  abin,y
.23c2	20 79 21	               jsr  pull
.23c5	60		               rts
.23c6			putabin
.23c6	20 a4 23	               jsr     atobin
.23c9	20 3a 21	               jsr     push
.23cc	a2 fb		               ldx     #<abin
.23ce	a0 22		               ldy     #>abin
.23d0	20 49 20	               jsr     puts
.23d3	20 79 21	               jsr     pop
.23d6	60		               rts
.23d7			printabin
.23d7	20 3a 21	               jsr     push
.23da	a2 fb		               ldx     #<abin
.23dc	a0 22		               ldy     #>abin
.23de	20 49 20	               jsr     puts
.23e1	20 79 21	               jsr     pop
.23e4	60		               rts
.23e5			putabinfmt
.23e5	08		               php
.23e6	48		               pha
.23e7	a9 25		               lda     #"%"
.23e9	20 43 20	               jsr     putch
.23ec	68		               pla
.23ed	20 c6 23	               jsr     putabin
.23f0	28		               plp
.23f1	60		               rts
.23f2			putabinxy
.23f2	20 63 20	               jsr     gotoxy
.23f5	20 c6 23	               jsr     putabin
.23f8	60		               rts
.23f9			putabinfmtxy
.23f9	20 63 20	               jsr     gotoxy
.23fc	20 e5 23	               jsr     putabinfmt
.23ff	60		               rts
.2400			atodec
.2400	20 3a 21	               jsr  push
.2403	f8		               sed
.2404	aa		               tax
.2405	a0 00		               ldy  #$00
.2407	a9 00		               lda  #$00
.2409	18		nextbit        clc
.240a	69 01		               adc  #$01
.240c	90 01		               bcc  decx
.240e	c8		               iny
.240f	ca		decx           dex
.2410	d0 f7		               bne  nextbit
.2412	48		               pha
.2413	98		               tya
.2414	20 44 23	               jsr  nib2hex
.2417	8d 04 23	               sta  adec
.241a	68		               pla
.241b	48		               pha
.241c	20 44 23	               jsr  nib2hex
.241f	8d 06 23	               sta  adec+2
.2422	68		               pla
.2423	6a		               ror
.2424	6a		               ror
.2425	6a		               ror
.2426	6a		               ror
.2427	20 44 23	               jsr  nib2hex
.242a	8d 05 23	               sta  adec+1
.242d	d8		               cld
.242e	20 79 21	               jsr  pull
.2431	60		               rts
>2432	00 00 00	buffer         .byte     0,0,0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>2435	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>2439	00 00 00 00 00 00 00 00 00 0d 00 00
>2445	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>2449	00 00 00 00 00 00 00 00 00 00 00 00
>2455	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>2459	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>2465	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>2469	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>2475	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>2479	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>2485	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>2489	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>2495	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>2499	00 00 00 00 00 00 00 00 00 00 00 00
>24a5	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>24a9	00 00 00 00 00 00 00 00 00 00 00 00
>24b5	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>24b9	00 00 00 00 00 00 00 00 00 00 00 00
>24c5	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>24c9	00 00 00 00 00 00 00 00 00 00 00 00
>24d5	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>24d9	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>24e5	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>24e9	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>24f5	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>24f9	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>2505	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>2509	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>2515	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>2519	00 00 00 00 00 00 00 00 00 00 00 00
>2525	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>2529	00 00 00 00 00 00 00 00 00 00 00 00
.2535			waitstop
.2535	20 3a 21	               jsr  push
.2538	20 ed f6	wait           jsr  k_stop
.253b	d0 fb		               bne  wait
.253d	20 79 21	               jsr  pop
.2540	60		               rts
.2541			anykey
.2541	08		               php
.2542	48		               pha
.2543	a5 cb		nokey          lda 203
.2545	c9 40		               cmp #64
.2547	f0 fa		               beq nokey
.2549	20 4f 25	               jsr releasekey
.254c	68		               pla
.254d	28		               plp
.254e	60		               rts
.254f			releasekey
.254f	08		               php
.2550	48		               pha
.2551	a5 cb		keypressed     lda 203
.2553	c9 40		               cmp #64
.2555	d0 fa		               bne keypressed
.2557	68		               pla
.2558	28		               plp
.2559	60		               rts
.255a			getkey
.255a	20 e4 ff	again          jsr  getin
.255d	c9 00		               cmp  #0
.255f	f0 f9		               beq  again
.2561	60		               rts
.2562			waitkey
.2562	20 3a 21	               jsr  push
.2565	8d b3 25	               sta  thekey
.2568	20 e4 ff	nope           jsr  getin
.256b	20 d2 ff	               jsr  chrout
.256e	cd b3 25	               cmp  thekey
.2571	d0 f5		               bne  nope
.2573	20 d2 ff	               jsr  chrout
.2576	20 79 21	               jsr  pop
.2579	60		               rts
.257a			waitspace
.257a	20 3a 21	               jsr  push
.257d	a9 7f		wait           lda  #$7f  ;%01111111
.257f	8d 00 dc	               sta  $dc00
.2582	ad 01 dc	               lda  $dc01
.2585	29 10		               and  #$10  ;mask %00010000
.2587	d0 f4		               bne  wait
.2589	20 79 21	               jsr  pop
.258c			waitsstop
.258c	20 3a 21	               jsr  push
.258f	20 ed f6	wait           jsr  k_stop  ;%01111111
.2592	d0 fb		               bne  wait
.2594	20 79 21	               jsr  pop
.2597			waitreturn
.2597	20 3a 21	               jsr  push
.259a	ad b4 25	               lda  thecount
.259d	8d 00 04	               sta  scrnram
.25a0	a9 02		               lda  #$02
.25a2	8d 00 d8	               sta  colorram
.25a5	20 e4 ff	nope           jsr  getin
.25a8	c9 0d		nohex          cmp  #$0d
.25aa	d0 f9		               bne  nope
.25ac	ee b4 25	               inc  thecount
.25af	20 79 21	               jsr  pop
.25b2	60		               rts
>25b3	00		thekey         .byte   0
>25b4	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-disk.asm

.25b5			diskerror
.25b5	20 3a 21	               jsr  push
.25b8	ad e6 26	               lda  dsk_dev   ; Select device 8
.25bb	85 ba		               sta  $ba       ;
.25bd	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.25c0	a9 6f		               lda  #$6f
.25c2	85 b9		               sta  $b9       ;
.25c4	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.25c7	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.25ca	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.25cd	c9 0d		               cmp  #$0d      ; Is it CR ?
.25cf	d0 f6		               bne  nextchar  ; No, get next char
.25d1	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.25d4	20 79 21	               jsr  pop
.25d7	60		               rts
.25d8			diskdir
.25d8	20 3a 21	               jsr  push
.25db	a9 24		               lda  #$24      ; L012C - Filename is "$"
.25dd	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.25df	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.25e1	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.25e3	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.25e5	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.25e7	a9 01		               lda  #$01      ; L0138 - set ...
.25e9	85 b7		               sta  $b7       ; L013A - ... length of current filename
.25eb	ad e6 26	               lda  dsk_dev   ; L013C - set 8 as ...
.25ee	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.25f0	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.25f2	85 b9		               sta  $b9       ; L0142 - ... secondary address
.25f4	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.25f7	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...%10111010
.25f9	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.25fc	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.25fe	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.2601	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.2603	85 90		               sta  $90       ; L0153 - ... kernal status word.
.2605	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.2607	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.2609	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.260c	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.260e	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.2610	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.2612	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.2615	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.2617	d0 28		               bne  exit      ; L0167
.2619	a4 fb		               ldy  $fb       ; L0169
.261b	88		               dey            ; L016b
.261c	d0 e9		               bne  loop1     ; L016C - If not last, loop
.261e	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.2620	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.2623	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.2625	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.2628	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.262b	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.262d	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.262f	aa		               tax            ; L017F - tfr a in x
.2630	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.2632	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.2635	4c 28 26	               jmp  loop3     ; L0185 - get another byte
.2638	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.263a	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.263d	a0 02		               ldy  #$02      ; L018D - set Y to 2
.263f	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.2641	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.2644	20 79 21	               jsr  pop
.2647	60		               rts            ; L0194
.2648			directory
.2648	20 d8 25	               jsr  diskdir
.264b	20 b5 25	               jsr  diskerror
.264e	60		               rts
.264f			memtofile
.264f	20 c0 26	               jsr  dsk_putmesg
.2652	20 3a 21	               jsr  push
.2655	ad ea 26	               lda  dsk_fnlen
.2658	ae e8 26	               ldx  dsk_fnptr      ; load fname addr. lbyte
.265b	ac e9 26	               ldy  dsk_fnptr+1
.265e	20 bd ff	               jsr  setnam         ; call setnam
.2661	ad e7 26	               lda  dsk_lfsno
.2664	ae e6 26	               ldx  dsk_dev        ; specified device
.2667	a0 00		skip           ldy  #$00
.2669	20 ba ff	               jsr  setlfs         ; call setlfs
.266c	ad e2 26	               lda  dsk_data_s     ; put data start lbyte in stal
.266f	85 c1		               sta  stal
.2671	ad e3 26	               lda  dsk_data_s+1   ; put data start hbyte in stal
.2674	85 c2		               sta  stal+1
.2676	ae e4 26	               ldx  dsk_data_e     ; put data end lbyte in x
.2679	ac e5 26	               ldy  dsk_data_e+1   ; put data end hbyte in y
.267c	a9 c1		               lda  #stal          ; start address located in $c1/$c2
.267e	20 d8 ff	               jsr  save           ; call save
.2681	90 00		               bcc  noerror        ; if carry set, a load error has happened
.2683	20 79 21	noerror        jsr  pop
.2686	60		               rts
.2687			filetomem
.2687	20 3a 21	               jsr push
.268a	ad ea 26	               lda dsk_fnlen
.268d	ae e8 26	               ldx dsk_fnptr
.2690	ac e9 26	               ldy dsk_fnptr+1
.2693	20 bd ff	               jsr setnam     ; call setnam
.2696	ad e7 26	               lda dsk_lfsno
.2699	ae e6 26	               ldx dsk_dev    ; default to device 8
.269c	a0 01		               ldy #$01       ; not $01 means: load to address stored in file
.269e	20 ba ff	               jsr setlfs     ; call setlfs
.26a1	a9 00		               lda #$00       ; $00 means: load to memory (not verify)
.26a3	20 d5 ff	               jsr load       ; call load
.26a6	90 03		               bcc noerror      ; if carry set, a load error has happened
.26a8	20 af 26	               jsr  error
.26ab	20 79 21	noerror        jsr pop
.26ae	60		               rts
.26af			error
.26af	60		               rts
.26b0	a2 fb		error1         ldx  #<dsk_emsg1
.26b2	a0 26		               ldy  #>dsk_emsg1
.26b4	20 49 20	               jsr  puts
.26b7	60		               rts
.26b8	a2 0f		error2         ldx #<dsk_emsg2
.26ba	a0 27		               ldy #>dsk_emsg2
.26bc	20 49 20	               jsr puts
.26bf	60		               rts
.26c0			dsk_putmesg
.26c0	20 3a 21	               jsr push
.26c3	a2 eb		               ldx #<dsk_msg0
.26c5	a0 26		               ldy #>dsk_msg0
.26c7	20 49 20	               jsr puts
.26ca	a9 20		               lda #$20
.26cc	20 43 20	               jsr putch
.26cf	ae e8 26	               ldx dsk_fnptr
.26d2	ac e9 26	               ldy dsk_fnptr+1
.26d5	20 49 20	               jsr puts
.26d8	ad e7 26	               lda dsk_lfsno
.26db	20 c3 ff	               jsr close
.26de	20 79 21	               jsr pop
.26e1	60		               rts
>26e2	00 00		dsk_data_s     .word     $0000    ; example addresses
>26e4	00 20		dsk_data_e     .word     $2000
>26e6	08		dsk_dev        .byte     $08
>26e7	00		dsk_lfsno      .byte     $00
>26e8	00 00		dsk_fnptr      .word     $00
>26ea	00		dsk_fnlen      .byte     0
>26eb	8d		dsk_msg0       .byte     141
>26ec	53 41 56 49	               .null     "saving"
>26f0	4e 47 00
>26f3	8d		dsk_msg1       .byte     141
>26f4	53 55 43 43	               .null     "succes"
>26f8	45 53 00
>26fb	8d		dsk_emsg1      .byte     141
>26fc	46 49 43 48	               .null     "fichier non ouvert"
>2700	49 45 52 20 4e 4f 4e 20 4f 55 56 45 52 54 00
>270f	11		dsk_emsg2      .byte     17
>2710	45 52 52 45	               .null     "erreur d'ecriture"
>2714	55 52 20 44 27 45 43 52 49 54 55 52 45 00

;******  Return to file: charedit.asm


;******  End of listing

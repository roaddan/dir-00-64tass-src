
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charset2disk.txt -o charset2disk.prg charset2disk.asm
; Wed Jun  7 23:24:13 2023

;Offset	;Hex		;Source

;******  Processing input file: charset2disk.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charset2disk.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charset2disk.asm

.080d			main
.080d	20 f6 09	               jsr  push
.0810	a9 93		               lda  #147
.0812	20 ff 08	               jsr  putch
.0815	20 24 08	               jsr  rom2ram
.0818	20 78 08	               jsr  savetodisk
.081b	a9 18		               lda  #%00011000     ;#24
.081d	8d 18 d0	               sta  $d018          ;53272
.0820	20 35 0a	               jsr  pop
.0823	60		               rts
.0824			rom2ram
.0824	20 f6 09	               jsr  push
.0827	ad 0e dc	               lda  $dc0e          ;56334
.082a	29 fe		               and  #%11111110     ;$fe ou 254
.082c	8d 0e dc	               sta  $dc0e          ;56334
.082f	a5 01		               lda  $01
.0831	29 fb		               and  #%11111011     ;$fb ou 251
.0833	85 01		               sta  $01
.0835	ad 74 08	               lda  chrom_s
.0838	85 fb		               sta  zpage1
.083a	ad 75 08	               lda  chrom_s+1
.083d	85 fc		               sta  zpage1+1
.083f	ad 76 08	               lda  chram_s
.0842	85 fd		               sta  zpage2
.0844	ad 77 08	               lda  chram_s+1
.0847	85 fe		               sta  zpage2+1
.0849	a2 10		               ldx  #$10           ; copie 8 page de 256 char.
.084b	a0 00		               ldy  #$00
.084d	78		               sei
.084e	b1 fb		nexty          lda  (zpage1),y
.0850	49 55		skip           eor  #%01010101
.0852	91 fd		save           sta  (zpage2),y
.0854	c8		               iny
.0855	d0 f7		               bne  nexty
.0857	ca		               dex
.0858	f0 07		               beq  out
.085a	e6 fc		               inc  zpage1+1
.085c	e6 fe		               inc  zpage2+1
.085e	4c 4e 08	               jmp  nexty
.0861			out
.0861	58		               cli
.0862	a5 01		               lda  $01
.0864	09 04		               ora  #%00000100     ;#$04
.0866	85 01		               sta  $01
.0868	ad 0e dc	               lda  $dc0e          ;56334
.086b	09 01		               ora  #%00000001     ;$01
.086d	8d 0e dc	               sta  $dc0e          ;56334
.0870	20 35 0a	               jsr  pop
.0873	60		               rts
>0874	00 d0		chrom_s        .word     $d000     ;$d000 a $d800 53284
>0876	00 20		chram_s        .word     $2000     ;$2000 a $2800 8192
.0878			savetodisk
.0878	20 f6 09	               jsr  push
.087b	a9 00		               lda  #$00
.087d	8d d3 0d	               sta  dsk_data_s
.0880	a9 20		               lda  #$20
.0882	8d d4 0d	               sta  dsk_data_s+1
.0885	a9 00		               lda  #$00
.0887	8d d5 0d	               sta  dsk_data_e
.088a	a9 30		               lda  #$30
.088c	8d d6 0d	               sta  dsk_data_e+1
.088f	a9 08		               lda  #$08
.0891	8d d7 0d	               sta  dsk_dev
.0894	a9 00		               lda  #$00
.0896	8d d8 0d	               sta  dsk_lfsno
.0899	a9 bd		               lda  #<fname
.089b	8d d9 0d	               sta  dsk_fnptr
.089e	a9 08		               lda  #>fname
.08a0	8d da 0d	               sta  dsk_fnptr+1
.08a3	a9 11		               lda  #fname_end-fname
.08a5	8d db 0d	               sta  dsk_fnlen
.08a8	20 40 0d	               jsr  memtofile
.08ab	a9 0d		               lda  #$0d
.08ad	20 ff 08	               jsr  putch
.08b0	20 a6 0c	               jsr  diskerror
.08b3	20 c9 0c	               jsr  diskdir
.08b6	20 78 0d	               jsr  filetomem
.08b9	20 35 0a	               jsr  pop
.08bc	60		               rts
>08bd	40		fname          .byte 64
>08be	30 3a 43 48	               .text "0:charset-fucked"
>08c2	41 52 53 45 54 2d 46 55 43 4b 45 44
>08ce	00		fname_end      .byte 0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ;  97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c1			stal            =       $c1     ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.08cf			libtart

;******  Return to file: charset2disk.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charset2disk.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charset2disk.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.08cf			scrmaninit
.08cf	20 f6 09	               jsr  push
.08d2	a9 06		               lda  #vbleu
.08d4	8d 21 d0	               sta  vicbackcol
.08d7	a9 05		               lda  #vvert
.08d9	8d 20 d0	               sta  vicbordcol
.08dc	a9 01		               lda  #vblanc
.08de	8d 86 02	               sta  bascol
.08e1	ad 00 04	               lda  scrnram
.08e4	29 fd		               and  #%11111101
.08e6	8d 00 04	               sta  scrnram
.08e9	20 f0 08	               jsr  cls
.08ec	20 35 0a	               jsr  pop
.08ef	60		               rts
.08f0			cls
.08f0	08		               php
.08f1	48		               pha
.08f2	a9 93		               lda  #$93
.08f4	20 ff 08	               jsr  putch
.08f7	a9 0e		               lda  #$0e
.08f9	20 ff 08	               jsr  putch
.08fc	68		               pla
.08fd	28		               plp
.08fe	60		               rts
.08ff			putch
.08ff	08		               php
.0900	20 d2 ff	               jsr  $ffd2
.0903	28		               plp
.0904	60		               rts
.0905			puts
.0905	20 f6 09	               jsr  push
.0908	86 fb		               stx  zpage1
.090a	84 fc		               sty  zpage1+1
.090c	a0 00		               ldy  #0
.090e	b1 fb		next           lda  (zpage1),y
.0910	f0 09		               beq  exit
.0912	20 ff 08	               jsr  putch
.0915	20 fd 0a	               jsr  inczp1
.0918	4c 0e 09	               jmp  next
.091b	20 35 0a	exit           jsr  pop
.091e	60		               rts
.091f			gotoxy
.091f	08		               php
.0920	18		               clc
.0921	8a		               txa
.0922	48		               pha
.0923	98		               tya
.0924	aa		               tax
.0925	68		               pla
.0926	a8		               tay
.0927	20 f0 ff	               jsr  kplot
.092a	28		               plp
.092b	60		               rts
.092c			cursor
=$0286			bascol    =    $0286
.092c	08		               php
.092d	48		               pha
.092e	90 12		               bcc  restore
.0930	20 f0 ff	               jsr  kplot
.0933	8c 54 09	               sty  cx
.0936	8e 55 09	               stx  cy
.0939	ad 86 02	               lda  bascol
.093c	8d 56 09	               sta  bcol
.093f	4c 51 09	               jmp  out
.0942	ae 55 09	restore        ldx  cy
.0945	ac 54 09	               ldy  cx
.0948	20 f0 ff	               jsr  kplot
.094b	ad 56 09	               lda  bcol
.094e	8d 86 02	               sta  bascol
.0951	68		out            pla
.0952	28		               plp
.0953	60		               rts
>0954	00		cx   .byte     $00
>0955	00		cy   .byte     $00
>0956	00		bcol .byte     $00
.0957			cursave
.0957	08		               php
.0958	38		               sec
.0959	20 2c 09	               jsr  cursor
.095c	28		               plp
.095d	60		               rts
.095e			curput
.095e	08		               php
.095f	18		               clc
.0960	20 2c 09	               jsr  cursor
.0963	28		               plp
.0964	60		               rts
.0965			putsxy
.0965	20 f6 09	               jsr  push
.0968	86 fb		               stx  zpage1
.096a	84 fc		               sty  zpage1+1
.096c	a0 00		               ldy  #$00
.096e	b1 fb		               lda  (zpage1),y
.0970	aa		               tax
.0971	20 fd 0a	               jsr  inczp1
.0974	b1 fb		               lda  (zpage1),y
.0976	a8		               tay
.0977	20 1f 09	               jsr  gotoxy
.097a	20 fd 0a	               jsr  inczp1
.097d	a6 fb		               ldx  zpage1
.097f	a4 fc		               ldy  zpage1+1
.0981	20 05 09	               jsr  puts
.0984	20 35 0a	               jsr  pop
.0987	60		               rts
>0988	00 00		straddr   .word     $00
>098a	00		px        .byte     $00
>098b	00		py        .byte     $00
>098c	00 00		zp1       .word     $00
.098e			putscxy
.098e	20 f6 09	               jsr  push
.0991	84 fc		               sty  zpage1+1
.0993	86 fb		               stx  zpage1
.0995	ad 86 02	               lda  bascol
.0998	8d b8 09	               sta  bc
.099b	a0 00		               ldy #$00
.099d	b1 fb		               lda  (zpage1),y
.099f	8d 86 02	               sta  bascol
.09a2	20 fd 0a	               jsr  inczp1
.09a5	a6 fb		               ldx  zpage1
.09a7	a4 fc		               ldy  zpage1+1
.09a9	20 65 09	               jsr  putsxy
.09ac	ad b8 09	               lda  bc
.09af	8d 86 02	               sta  bascol
.09b2	20 35 0a	               jsr  pop
.09b5	60		               rts
>09b6	00 00		straddr  .word      $00
>09b8	00		bc       .byte      $00
>09b9	00 00		zp1      .word      $00
.09bb			putrahex
.09bb	08		               php
.09bc	48		               pha
.09bd	20 03 0c	               jsr  a2hex
.09c0	a9 af		               lda  #<a2hexstr
.09c2	a0 0b		               ldy  #>a2hexstr
.09c4	20 05 09	               jsr  puts
.09c7	68		               pla
.09c8	28		               plp
.09c9	60		               rts
.09ca			kputrahexxy
.09ca			bputrahexxy
.09ca			putrahexxy
.09ca	08		               php
.09cb	20 03 0c	               jsr  a2hex
.09ce	a9 ac		               lda  #<a2hexpos
.09d0	a0 0b		               ldy  #>a2hexpos
.09d2	20 65 09	               jsr  putsxy
.09d5	68		               pla
.09d6	28		               plp
.09d7	60		               rts
.09d8			putrahexcxy
.09d8	08		               php
.09d9	20 03 0c	               jsr  a2hex
.09dc	a9 ac		               lda  #<a2hexpos
.09de	a0 0b		               ldy  #>a2hexpos
.09e0	20 8e 09	               jsr  putscxy
.09e3	68		               pla
.09e4	28		               plp
.09e5	60		               rts
.09e6			setinverse
.09e6	48		               pha
.09e7	a9 12		               lda  #$12
.09e9	20 d2 ff	               jsr  $ffd2
.09ec	68		               pla
.09ed	60		               rts
.09ee			clrinverse
.09ee	48		               pha
.09ef	a9 92		               lda  #$92
.09f1	20 d2 ff	               jsr  $ffd2
.09f4	68		               pla
.09f5	60		               rts

;******  Return to file: charset2disk.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.09f6			push
.09f6	08		          php            ; stack : flg, pcl, pch
.09f7	78		          sei
.09f8	8d 32 0a	          sta  ra        ; save a
.09fb	68		          pla            ; stack : pcl, pch
.09fc	8d 31 0a	          sta  rp        ; save rp
.09ff	68		          pla            ; stack : pch
.0a00	8d 33 0a	          sta  pc        ; save pcl
.0a03	68		          pla            ; stack : -
.0a04	8d 34 0a	          sta  pc+1      ; save pch
.0a07	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0a09	48		          pha            ; stack : zp1l
.0a0a	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0a0c	48		          pha            ; stack : zp1h, zp1l
.0a0d	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0a0f	48		          pha            ; stack : zp2l, zp1h, zp1l
.0a10	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0a12	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0a13	ad 31 0a	          lda  rp        ; get rp
.0a16	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0a17	ad 32 0a	          lda  ra        ; get a
.0a1a	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0a1b	8a		          txa            ; get x
.0a1c	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a1d	98		          tya            ; get y
.0a1e	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a1f	ad 34 0a	          lda  pc+1      ; get pch
.0a22	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a23	ad 33 0a	          lda  pc        ; get pcl
.0a26	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a27	ad 31 0a	          lda  rp        ; get rp
.0a2a	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a2b	ad 32 0a	          lda  ra        ; get a
.0a2e	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a2f	58		          cli
.0a30	60		          rts
>0a31	00		rp        .byte     0
>0a32	00		ra        .byte     0
>0a33	00 00		pc        .word     0
.0a35			pull
.0a35			pop
.0a35	78		          sei
.0a36	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a37	8d 6a 0a	          sta  pc        ; save pcl
.0a3a	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a3b	8d 6b 0a	          sta  pc+1      ; save pch
.0a3e	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a3f	a8		          tay            ; set y
.0a40	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0a41	aa		          tax            ; set x
.0a42	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0a43	8d 69 0a	          sta  ra        ; save a
.0a46	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0a47	8d 68 0a	          sta  rp        ; save rp
.0a4a	68		          pla            ; stack : zp2l, zp1h, zp1l
.0a4b	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0a4d	68		          pla            ; stack : zp1h, zp1l
.0a4e	85 fd		          sta  zpage2    ; get zpage2 High byte
.0a50	68		          pla            ; stack : zp1l
.0a51	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0a53	68		          pla            ; stack :
.0a54	85 fb		          sta  zpage1    ; get zpage1 High byte
.0a56	ad 6b 0a	          lda  pc+1      ; get pch
.0a59	48		          pha            ; stack : pch
.0a5a	ad 6a 0a	          lda  pc
.0a5d	48		          pha            ; stack : pcl, pch
.0a5e	ad 68 0a	          lda  rp        ; get rp
.0a61	48		          pha            ; stack : rp, pcl, pch
.0a62	ad 69 0a	          lda  ra        ; set ra
.0a65	58		          cli
.0a66	28		          plp            ; stack : pcl, pch
.0a67	60		          rts
>0a68	00		rp        .byte     0
>0a69	00		ra        .byte     0
>0a6a	00 00		pc        .word     0

;******  Return to file: charset2disk.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.0a6c			blkfill
.0a6c	20 f6 09	bf0            jsr  push
.0a6f	20 2a 0b	               jsr  savezp1
.0a72	84 fc		               sty  zpage1+1
.0a74	a0 00		               ldy  #$00
.0a76	84 fb		               sty  zpage1
.0a78	91 fb		bf1            sta  (zpage1),y
.0a7a	c8		               iny
.0a7b	d0 fb		               bne  bf1
.0a7d	20 39 0b	               jsr  restzp1
.0a80	20 35 0a	               jsr  pop
.0a83	60		               rts
.0a84			memfill
.0a84	20 f6 09	               jsr  push
.0a87	20 6c 0a	mf1            jsr  blkfill
.0a8a	c8		               iny
.0a8b	ca		               dex
.0a8c	d0 f9		               bne  mf1
.0a8e	20 35 0a	               jsr  pop
.0a91	60		               rts
.0a92			memmove
.0a92	20 f6 09	               jsr  push
.0a95	ba		               tsx            ; On se crée un pointeur ...
.0a96	8a		               txa
.0a97	18		               clc
.0a98	69 0b		               adc  #11
.0a9a	a8		               tay
.0a9b	a2 06		               ldx  #$06
.0a9d	b9 00 01	nextbyte       lda  $0100,y
.0aa0	99 ec 0a	               sta  words,y
.0aa3	c8		               iny
.0aa4	ca		               dex
.0aa5	d0 f6		               bne  nextbyte
.0aa7	ad ec 0a	               lda  s
.0aaa	8d c3 0a	               sta  source+1
.0aad	ad ed 0a	               lda  s+1
.0ab0	8d c4 0a	               sta  source+2
.0ab3	ad ee 0a	               lda  d
.0ab6	8d c0 0a	               sta  destin+1
.0ab9	ad ef 0a	               lda  d+1
.0abc	8d c1 0a	               sta  destin+2
.0abf	ad ff ff	destin         lda  $ffff
.0ac2	8d ff ff	source         sta  $ffff
.0ac5	ee c0 0a	               inc  destin+1
.0ac8	d0 03		               bne  src
.0aca	ee c1 0a	               inc  destin+2
.0acd	ee c3 0a	src            inc  source+1
.0ad0	d0 03		               bne  cnt
.0ad2	ee c4 0a	               inc  source+2
.0ad5	ad f0 0a	cnt            lda  compte
.0ad8	d0 08		               bne  decit
.0ada	ad f1 0a	               lda  compte+1
.0add	f0 09		               beq  fini
.0adf	ce f1 0a	               dec  compte+1
.0ae2	ce f0 0a	decit          dec  compte
.0ae5	4c bf 0a	               jmp  destin
.0ae8	20 35 0a	fini           jsr  pop
.0aeb	60		               rts
.0aec			words
>0aec	00 00		s         .word     $0000
>0aee	00 00		d         .word     $0000
>0af0	00 00		compte    .word     $0000
.0af2			decword
.0af2	20 f6 09	               jsr  push
.0af5	86 fd		               stx  zpage2
.0af7	84 fe		               sty  zpage2+1
.0af9	20 35 0a	               jsr  pop
.0afc	60		               rts
.0afd			inczp1
.0afd	08		               php
.0afe	e6 fb		               inc  zpage1
.0b00	d0 02		               bne  nopage
.0b02	e6 fc		               inc  zpage1+1
.0b04	28		nopage         plp
.0b05	60		               rts
.0b06			deczp1
.0b06	08		                php
.0b07	48		                pha
.0b08	c6 fb		                dec  zpage1
.0b0a	d0 02		                bne  nopage
.0b0c	c6 fc		                dec  zpage1+1
.0b0e	c6 fb		nopage          dec  zpage1
.0b10	68		                pla
.0b11	28		                plp
.0b12	60		                rts
.0b13			inczp2
.0b13	08		               php
.0b14	48		               pha
.0b15	e6 fd		               inc  zpage2
.0b17	d0 02		               bne  nopage
.0b19	e6 fe		               inc  zpage2+1
.0b1b	68		nopage         pla
.0b1c	28		               plp
.0b1d	60		               rts
.0b1e			deczp2
.0b1e	08		               php
.0b1f	48		               pha
.0b20	a5 fd		               lda  zpage2
.0b22	d0 02		               bne  nopage
.0b24	c6 fe		               dec  zpage2+1
.0b26	c6 fd		nopage         dec  zpage2
.0b28	28		               plp
.0b29	60		               rts
.0b2a			savezp1
.0b2a	08		               php
.0b2b	48		               pha
.0b2c	a5 fb		               lda  zpage1
.0b2e	8d a6 0b	               sta  zp1
.0b31	a5 fc		               lda  zpage1+1
.0b33	8d a7 0b	               sta  zp1+1
.0b36	68		               pla
.0b37	28		               plp
.0b38	60		               rts
.0b39			restzp1
.0b39	08		               php
.0b3a	48		               pha
.0b3b	ad a6 0b	               lda zp1
.0b3e	85 fb		               sta zpage1
.0b40	ad a7 0b	               lda zp1+1
.0b43	85 fc		               sta zpage1+1
.0b45	68		               pla
.0b46	28		               plp
.0b47	60		               rts
.0b48			savezp2
.0b48	08		         php
.0b49	48		         pha
.0b4a	a5 fd		         lda zpage2
.0b4c	8d a8 0b	         sta zp2
.0b4f	a5 fe		         lda zpage2+1
.0b51	8d a9 0b	         sta zp2+1
.0b54	68		         pla
.0b55	28		         plp
.0b56	60		         rts
.0b57			restzp2
.0b57	08		                php
.0b58	48		                pha
.0b59	ad a8 0b	                lda  zp2
.0b5c	85 fd		                sta  zpage2
.0b5e	ad a9 0b	                lda  zp2+1
.0b61	85 fe		                sta  zpage2+1
.0b63	68		                pla
.0b64	28		                plp
.0b65	60		                rts
.0b66			xy2addr
.0b66	08		                php
.0b67	48		                pha
.0b68	8a		                txa
.0b69	48		                pha
.0b6a	98		                tya
.0b6b	48		                pha
.0b6c	ad a1 0b	                lda     addr1+1
.0b6f	8d a3 0b	                sta     addr2+1
.0b72	ad a0 0b	                lda     addr1
.0b75	8d a2 0b	                sta     addr2
.0b78	c0 00		                cpy     #$00
.0b7a	f0 0f		                beq     addx
.0b7c	18		moreline        clc
.0b7d	6d 9f 0b	                adc     ymult
.0b80	90 03		                bcc     norepy
.0b82	ee a3 0b	                inc     addr2+1
.0b85	8d a2 0b	norepy          sta     addr2
.0b88	88		                dey
.0b89	d0 f1		                bne     moreline
.0b8b	8a		addx            txa
.0b8c	18		                clc
.0b8d	6d a2 0b	                adc     addr2
.0b90	90 03		                bcc     thatsit
.0b92	ee a3 0b	                inc     addr2+1
.0b95	8d a2 0b	thatsit         sta     addr2
.0b98	68		                pla
.0b99	a8		                tay
.0b9a	68		                pla
.0b9b	aa		                tax
.0b9c	68		                pla
.0b9d	28		                plp
.0b9e	60		                rts
>0b9f	28		ymult          .byte     40
>0ba0	00 00		addr1          .word     $0000
>0ba2	00 00		addr2          .word     $0000
>0ba4	00 00		bytecnt        .word     $0000
>0ba6	00 00		zp1        .word   $0000
>0ba8	00 00		zp2        .word   $0000

;******  Return to file: charset2disk.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>0baa	01		a2hexcol       .byte     1              ; pour aputscxy
>0bab	00		a2hexbkcol     .byte     %00000000
.0bac			a2hexpos
>0bac	00		a2hexpx        .byte     0              ; pour aputsxy
>0bad	00		a2hexpy        .byte     0
>0bae	24		a2hexprefix    .byte     "$"            ; pour aputs
>0baf	00 00		a2hexstr       .word     $00
>0bb1	00 00		               .word     $00
>0bb3	00		               .byte     0              ; 0 end string
.0bb4			putahexfmtxy
.0bb4	20 f6 09	               jsr  push
.0bb7	20 03 0c	               jsr  a2hex
.0bba	ae ac 0b	               ldx  a2hexpx
.0bbd	ac ad 0b	               ldy  a2hexpy
.0bc0	20 1f 09	               jsr  gotoxy
.0bc3	a2 ae		               ldx  #<a2hexprefix
.0bc5	a0 0b		               ldy  #>a2hexprefix
.0bc7	20 05 09	               jsr  puts
.0bca	20 35 0a	               jsr  pop
.0bcd	60		               rts
.0bce			putahexfmt
.0bce	20 f6 09	               jsr  push
.0bd1	20 03 0c	               jsr  a2hex
.0bd4	a2 ae		               ldx  #<a2hexprefix
.0bd6	a0 0b		               ldy  #>a2hexprefix
.0bd8	20 05 09	               jsr  puts
.0bdb	20 35 0a	               jsr  pop
.0bde	60		               rts
.0bdf			putahex
.0bdf	20 f6 09	               jsr  push
.0be2	20 03 0c	               jsr  a2hex
.0be5	a2 af		               ldx  #<a2hexstr
.0be7	a0 0b		               ldy  #>a2hexstr
.0be9	20 05 09	               jsr  puts
.0bec	20 35 0a	               jsr  pop
.0bef	60		               rts
.0bf0			nib2hex
.0bf0	08		               php
.0bf1	29 0f		               and  #$0f
.0bf3	f8		               sed
.0bf4	18		               clc
.0bf5	69 90		               adc  #$90
.0bf7	69 40		               adc  #$40
.0bf9	d8		               cld
.0bfa	28		               plp
.0bfb	60		               rts
.0bfc			lsra4bits
.0bfc	08		               php
.0bfd	4a		               lsr
.0bfe	4a		               lsr
.0bff	4a		               lsr
.0c00	4a		               lsr
.0c01	28		               plp
.0c02	60		               rts
.0c03			a2hex
.0c03	08		               php
.0c04	48		               pha
.0c05	48		               pha
.0c06	20 fc 0b	               jsr  lsra4bits
.0c09	20 f0 0b	               jsr  nib2hex
.0c0c	8d af 0b	               sta  a2hexstr
.0c0f	68		               pla
.0c10	20 f0 0b	               jsr  nib2hex
.0c13	8d b0 0b	               sta  a2hexstr+1
.0c16	a9 00		               lda  #$00                ; set end of string
.0c18	8d b1 0b	               sta  a2hexstr+2
.0c1b	68		               pla
.0c1c	28		               plp
.0c1d	60		               rts
.0c1e			xy2hex
.0c1e	20 f6 09	               jsr  push
.0c21	20 03 0c	               jsr  a2hex
.0c24	8a		               txa
.0c25	48		               pha
.0c26	20 fc 0b	               jsr  lsra4bits
.0c29	20 f0 0b	               jsr  nib2hex
.0c2c	8d af 0b	               sta  a2hexstr
.0c2f	68		               pla
.0c30	20 f0 0b	               jsr  nib2hex
.0c33	8d b0 0b	               sta  a2hexstr+1
.0c36	98		               tya
.0c37	48		               pha
.0c38	20 fc 0b	               jsr  lsra4bits
.0c3b	20 f0 0b	               jsr  nib2hex
.0c3e	8d b1 0b	               sta  a2hexstr+2
.0c41	68		               pla
.0c42	20 f0 0b	               jsr  nib2hex
.0c45	8d b2 0b	               sta  a2hexstr+3
.0c48	a9 00		               lda  #$00                ; 0 ended string
.0c4a	8d b3 0b	               sta  a2hexstr+4
.0c4d	20 35 0a	               jsr  pop
.0c50			atobin
.0c50	20 f6 09	               jsr     push
.0c53	a2 08		               ldx     #8
.0c55	a0 00		               ldy     #0
.0c57	2a		nextbit        rol
.0c58	48		               pha
.0c59	69 00		               adc     #$00
.0c5b	29 01		               and     #$01
.0c5d	20 f0 0b	               jsr     nib2hex
.0c60	99 71 0c	               sta     abin,y
.0c63	68		               pla
.0c64	c8		               iny
.0c65	ca		               dex
.0c66	d0 ef		               bne     nextbit
.0c68	a9 00		               lda     #0
.0c6a	99 71 0c	               sta     abin,y
.0c6d	20 35 0a	               jsr     pull
.0c70	60		               rts
>0c71	30 30 30 30	abin           .null   "00000000"
>0c75	30 30 30 30 00
.0c7a			putabin
.0c7a	20 50 0c	               jsr     atobin
.0c7d	20 f6 09	               jsr     push
.0c80	a2 71		               ldx     #<abin
.0c82	a0 0c		               ldy     #>abin
.0c84	20 05 09	               jsr     puts
.0c87	20 35 0a	               jsr     pop
.0c8a	60		               rts
.0c8b			putabinfmt
.0c8b	08		               php
.0c8c	48		               pha
.0c8d	a9 25		               lda     #"%"
.0c8f	20 ff 08	               jsr     putch
.0c92	68		               pla
.0c93	20 7a 0c	               jsr     putabin
.0c96	28		               plp
.0c97	60		               rts
.0c98			putabinxy
.0c98	20 1f 09	               jsr     gotoxy
.0c9b	20 7a 0c	               jsr     putabin
.0c9e	60		               rts
.0c9f			putabinfmtxy
.0c9f	20 1f 09	               jsr     gotoxy
.0ca2	20 8b 0c	               jsr     putabinfmt
.0ca5	60		               rts

;******  Return to file: charset2disk.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-disk.asm

.0ca6			diskerror
.0ca6	20 f6 09	               jsr  push
.0ca9	ad d7 0d	               lda  dsk_dev   ; Select device 8
.0cac	85 ba		               sta  $ba       ;
.0cae	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.0cb1	a9 6f		               lda  #$6f
.0cb3	85 b9		               sta  $b9       ;
.0cb5	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.0cb8	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.0cbb	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.0cbe	c9 0d		               cmp  #$0d      ; Is it CR ?
.0cc0	d0 f6		               bne  nextchar  ; No, get next char
.0cc2	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.0cc5	20 35 0a	               jsr  pop
.0cc8	60		               rts
.0cc9			diskdir
.0cc9	20 f6 09	               jsr  push
.0ccc	a9 24		               lda  #$24      ; L012C - Filename is "$"
.0cce	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.0cd0	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.0cd2	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.0cd4	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.0cd6	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.0cd8	a9 01		               lda  #$01      ; L0138 - set ...
.0cda	85 b7		               sta  $b7       ; L013A - ... length of current filename
.0cdc	ad d7 0d	               lda  dsk_dev   ; L013C - set 8 as ...
.0cdf	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.0ce1	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.0ce3	85 b9		               sta  $b9       ; L0142 - ... secondary address
.0ce5	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.0ce8	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...%10111010
.0cea	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.0ced	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.0cef	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.0cf2	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.0cf4	85 90		               sta  $90       ; L0153 - ... kernal status word.
.0cf6	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.0cf8	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.0cfa	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.0cfd	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.0cff	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.0d01	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.0d03	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.0d06	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.0d08	d0 28		               bne  exit      ; L0167
.0d0a	a4 fb		               ldy  $fb       ; L0169
.0d0c	88		               dey            ; L016b
.0d0d	d0 e9		               bne  loop1     ; L016C - If not last, loop
.0d0f	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.0d11	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.0d14	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.0d16	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.0d19	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.0d1c	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.0d1e	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.0d20	aa		               tax            ; L017F - tfr a in x
.0d21	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.0d23	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.0d26	4c 19 0d	               jmp  loop3     ; L0185 - get another byte
.0d29	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.0d2b	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.0d2e	a0 02		               ldy  #$02      ; L018D - set Y to 2
.0d30	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.0d32	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.0d35	20 35 0a	               jsr  pop
.0d38	60		               rts            ; L0194
.0d39			directory
.0d39	20 c9 0c	               jsr  diskdir
.0d3c	20 a6 0c	               jsr  diskerror
.0d3f	60		               rts
.0d40			memtofile
.0d40	20 b1 0d	               jsr  dsk_putmesg
.0d43	20 f6 09	               jsr  push
.0d46	ad db 0d	               lda  dsk_fnlen
.0d49	ae d9 0d	               ldx  dsk_fnptr      ; load fname addr. lbyte
.0d4c	ac da 0d	               ldy  dsk_fnptr+1
.0d4f	20 bd ff	               jsr  setnam         ; call setnam
.0d52	ad d8 0d	               lda  dsk_lfsno
.0d55	ae d7 0d	               ldx  dsk_dev        ; specified device
.0d58	a0 00		skip           ldy  #$00
.0d5a	20 ba ff	               jsr  setlfs         ; call setlfs
.0d5d	ad d3 0d	               lda  dsk_data_s     ; put data start lbyte in stal
.0d60	85 c1		               sta  stal
.0d62	ad d4 0d	               lda  dsk_data_s+1   ; put data start hbyte in stal
.0d65	85 c2		               sta  stal+1
.0d67	ae d5 0d	               ldx  dsk_data_e     ; put data end lbyte in x
.0d6a	ac d6 0d	               ldy  dsk_data_e+1   ; put data end hbyte in y
.0d6d	a9 c1		               lda  #stal          ; start address located in $c1/$c2
.0d6f	20 d8 ff	               jsr  save           ; call save
.0d72	90 00		               bcc  noerror        ; if carry set, a load error has happened
.0d74	20 35 0a	noerror        jsr  pop
.0d77	60		               rts
.0d78			filetomem
.0d78	20 f6 09	               jsr push
.0d7b	ad db 0d	               lda dsk_fnlen
.0d7e	ae d9 0d	               ldx dsk_fnptr
.0d81	ac da 0d	               ldy dsk_fnptr+1
.0d84	20 bd ff	               jsr setnam     ; call setnam
.0d87	ad d8 0d	               lda dsk_lfsno
.0d8a	ae d7 0d	               ldx dsk_dev    ; default to device 8
.0d8d	a0 01		               ldy #$01       ; not $01 means: load to address stored in file
.0d8f	20 ba ff	               jsr setlfs     ; call setlfs
.0d92	a9 00		               lda #$00       ; $00 means: load to memory (not verify)
.0d94	20 d5 ff	               jsr load       ; call load
.0d97	90 03		               bcc noerror      ; if carry set, a load error has happened
.0d99	20 a0 0d	               jsr  error
.0d9c	20 35 0a	noerror        jsr pop
.0d9f	60		               rts
.0da0			error
.0da0	60		               rts
.0da1	a2 ec		error1         ldx  #<dsk_emsg1
.0da3	a0 0d		               ldy  #>dsk_emsg1
.0da5	20 05 09	               jsr  puts
.0da8	60		               rts
.0da9	a2 00		error2         ldx #<dsk_emsg2
.0dab	a0 0e		               ldy #>dsk_emsg2
.0dad	20 05 09	               jsr puts
.0db0	60		               rts
.0db1			dsk_putmesg
.0db1	20 f6 09	               jsr push
.0db4	a2 dc		               ldx #<dsk_msg0
.0db6	a0 0d		               ldy #>dsk_msg0
.0db8	20 05 09	               jsr puts
.0dbb	a9 20		               lda #$20
.0dbd	20 ff 08	               jsr putch
.0dc0	ae d9 0d	               ldx dsk_fnptr
.0dc3	ac da 0d	               ldy dsk_fnptr+1
.0dc6	20 05 09	               jsr puts
.0dc9	ad d8 0d	               lda dsk_lfsno
.0dcc	20 c3 ff	               jsr close
.0dcf	20 35 0a	               jsr pop
.0dd2	60		               rts
>0dd3	00 00		dsk_data_s     .word     $0000    ; example addresses
>0dd5	00 20		dsk_data_e     .word     $2000
>0dd7	08		dsk_dev        .byte     $08
>0dd8	00		dsk_lfsno      .byte     $00
>0dd9	00 00		dsk_fnptr      .word     $00
>0ddb	00		dsk_fnlen      .byte     0
>0ddc	8d		dsk_msg0       .byte     141
>0ddd	53 41 56 49	               .null     "saving"
>0de1	4e 47 00
>0de4	8d		dsk_msg1       .byte     141
>0de5	53 55 43 43	               .null     "succes"
>0de9	45 53 00
>0dec	8d		dsk_emsg1      .byte     141
>0ded	46 49 43 48	               .null     "fichier non ouvert"
>0df1	49 45 52 20 4e 4f 4e 20 4f 55 56 45 52 54 00
>0e00	11		dsk_emsg2      .byte     17
>0e01	45 52 52 45	               .null     "erreur d'ecriture"
>0e05	55 52 20 44 27 45 43 52 49 54 55 52 45 00

;******  Return to file: charset2disk.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L charset2disk.txt -o charset2disk.prg charset2disk.asm
; Thu Jun  8 21:30:11 2023

;Offset	;Hex		;Source

;******  Processing input file: charset2disk.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: charset2disk.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charset2disk.asm

.080d			main
.080d	20 36 0a	               jsr  push
.0810	a9 93		               lda  #147
.0812	20 3f 09	               jsr  putch
.0815	a9 30		               lda  #$30
.0817	8d 0d 09	               sta  fname+10
.081a	a9 00		               lda  #$00
.081c	8d bd 08	               sta  xor
.081f	20 63 08	               jsr  rom2ram
.0822	20 be 08	               jsr  savetodisk
.0825	a9 18		               lda  #%00011000     ;#24
.0827	8d 18 d0	               sta  $d018          ;53272
.082a	a9 32		               lda  #$32
.082c	8d 0d 09	               sta  fname+10
.082f	a9 80		               lda  #%10000000
.0831	8d bd 08	               sta  xor
.0834	20 63 08	               jsr  rom2ram
.0837	20 be 08	               jsr  savetodisk
.083a	a9 33		               lda  #$33
.083c	8d 0d 09	               sta  fname+10
.083f	a9 7f		               lda  #%01111111
.0841	8d bd 08	               sta  xor
.0844	20 63 08	               jsr  rom2ram
.0847	20 be 08	               jsr  savetodisk
.084a	a9 31		               lda  #$31
.084c	8d 0d 09	               sta  fname+10
.084f	a9 ff		               lda  #$ff
.0851	8d bd 08	               sta  xor
.0854	20 63 08	               jsr  rom2ram
.0857	20 be 08	               jsr  savetodisk
.085a	a9 01		               lda  #$01
.085c	8d 21 d0	               sta  vicbackcol
.085f	20 75 0a	               jsr  pop
.0862	60		               rts
.0863			rom2ram
.0863	20 36 0a	               jsr  push
.0866	ad 0e dc	               lda  $dc0e          ;56334
.0869	29 fe		               and  #%11111110     ;$fe ou 254
.086b	8d 0e dc	               sta  $dc0e          ;56334
.086e	a5 01		               lda  $01
.0870	29 fb		               and  #%11111011     ;$fb ou 251
.0872	85 01		               sta  $01
.0874	ad b9 08	               lda  chrom_s
.0877	85 fb		               sta  zpage1
.0879	ad ba 08	               lda  chrom_s+1
.087c	85 fc		               sta  zpage1+1
.087e	ad bb 08	               lda  chram_s
.0881	85 fd		               sta  zpage2
.0883	ad bc 08	               lda  chram_s+1
.0886	85 fe		               sta  zpage2+1
.0888	a2 10		               ldx  #$10           ; copie 8 page de 256 char.
.088a	a0 00		               ldy  #$00
.088c	78		               sei
.088d	ad bd 08	               lda  xor
.0890	8d 96 08	               sta  skip+1
.0893	b1 fb		nexty          lda  (zpage1),y
.0895	49 00		skip           eor  #%00000000
.0897	91 fd		save           sta  (zpage2),y
.0899	c8		               iny
.089a	d0 f7		               bne  nexty
.089c	ca		               dex
.089d	f0 07		               beq  out
.089f	e6 fc		               inc  zpage1+1
.08a1	e6 fe		               inc  zpage2+1
.08a3	4c 93 08	               jmp  nexty
.08a6			out
.08a6	58		               cli
.08a7	a5 01		               lda  $01
.08a9	09 04		               ora  #%00000100     ;#$04
.08ab	85 01		               sta  $01
.08ad	ad 0e dc	               lda  $dc0e          ;56334
.08b0	09 01		               ora  #%00000001     ;$01
.08b2	8d 0e dc	               sta  $dc0e          ;56334
.08b5	20 75 0a	               jsr  pop
.08b8	60		               rts
>08b9	00 d0		chrom_s        .word     $d000     ;$d000 a $d800 53284
>08bb	00 20		chram_s        .word     $2000     ;$2000 a $2800 8192
>08bd	00		xor            .byte     $00
.08be			savetodisk
.08be	20 36 0a	               jsr  push
.08c1	a9 00		               lda  #$00
.08c3	8d 13 0e	               sta  dsk_data_s
.08c6	a9 20		               lda  #$20
.08c8	8d 14 0e	               sta  dsk_data_s+1
.08cb	a9 00		               lda  #$00
.08cd	8d 15 0e	               sta  dsk_data_e
.08d0	a9 30		               lda  #$30
.08d2	8d 16 0e	               sta  dsk_data_e+1
.08d5	a9 08		               lda  #$08
.08d7	8d 17 0e	               sta  dsk_dev
.08da	a9 00		               lda  #$00
.08dc	8d 18 0e	               sta  dsk_lfsno
.08df	a9 03		               lda  #<fname
.08e1	8d 19 0e	               sta  dsk_fnptr
.08e4	a9 09		               lda  #>fname
.08e6	8d 1a 0e	               sta  dsk_fnptr+1
.08e9	a9 0b		               lda  #fname_end-fname
.08eb	8d 1b 0e	               sta  dsk_fnlen
.08ee	20 80 0d	               jsr  memtofile
.08f1	a9 0d		               lda  #$0d
.08f3	20 3f 09	               jsr  putch
.08f6	20 e6 0c	               jsr  diskerror
.08f9	20 09 0d	               jsr  diskdir
.08fc	20 b8 0d	               jsr  filetomem
.08ff	20 75 0a	               jsr  pop
.0902	60		               rts
>0903	40		fname          .byte 64
>0904	30 3a 43 48	               .text "0:charset0"
>0908	41 52 53 45 54 30
>090e	00		fname_end      .byte 0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ;  97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c1			stal            =       $c1     ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.090f			libtart

;******  Return to file: charset2disk.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charset2disk.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: charset2disk.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.090f			scrmaninit
.090f	20 36 0a	               jsr  push
.0912	a9 06		               lda  #vbleu
.0914	8d 21 d0	               sta  vicbackcol
.0917	a9 05		               lda  #vvert
.0919	8d 20 d0	               sta  vicbordcol
.091c	a9 01		               lda  #vblanc
.091e	8d 86 02	               sta  bascol
.0921	ad 00 04	               lda  scrnram
.0924	29 fd		               and  #%11111101
.0926	8d 00 04	               sta  scrnram
.0929	20 30 09	               jsr  cls
.092c	20 75 0a	               jsr  pop
.092f	60		               rts
.0930			cls
.0930	08		               php
.0931	48		               pha
.0932	a9 93		               lda  #$93
.0934	20 3f 09	               jsr  putch
.0937	a9 0e		               lda  #$0e
.0939	20 3f 09	               jsr  putch
.093c	68		               pla
.093d	28		               plp
.093e	60		               rts
.093f			putch
.093f	08		               php
.0940	20 d2 ff	               jsr  $ffd2
.0943	28		               plp
.0944	60		               rts
.0945			puts
.0945	20 36 0a	               jsr  push
.0948	86 fb		               stx  zpage1
.094a	84 fc		               sty  zpage1+1
.094c	a0 00		               ldy  #0
.094e	b1 fb		next           lda  (zpage1),y
.0950	f0 09		               beq  exit
.0952	20 3f 09	               jsr  putch
.0955	20 3d 0b	               jsr  inczp1
.0958	4c 4e 09	               jmp  next
.095b	20 75 0a	exit           jsr  pop
.095e	60		               rts
.095f			gotoxy
.095f	08		               php
.0960	18		               clc
.0961	8a		               txa
.0962	48		               pha
.0963	98		               tya
.0964	aa		               tax
.0965	68		               pla
.0966	a8		               tay
.0967	20 f0 ff	               jsr  kplot
.096a	28		               plp
.096b	60		               rts
.096c			cursor
=$0286			bascol    =    $0286
.096c	08		               php
.096d	48		               pha
.096e	90 12		               bcc  restore
.0970	20 f0 ff	               jsr  kplot
.0973	8c 94 09	               sty  cx
.0976	8e 95 09	               stx  cy
.0979	ad 86 02	               lda  bascol
.097c	8d 96 09	               sta  bcol
.097f	4c 91 09	               jmp  out
.0982	ae 95 09	restore        ldx  cy
.0985	ac 94 09	               ldy  cx
.0988	20 f0 ff	               jsr  kplot
.098b	ad 96 09	               lda  bcol
.098e	8d 86 02	               sta  bascol
.0991	68		out            pla
.0992	28		               plp
.0993	60		               rts
>0994	00		cx   .byte     $00
>0995	00		cy   .byte     $00
>0996	00		bcol .byte     $00
.0997			cursave
.0997	08		               php
.0998	38		               sec
.0999	20 6c 09	               jsr  cursor
.099c	28		               plp
.099d	60		               rts
.099e			curput
.099e	08		               php
.099f	18		               clc
.09a0	20 6c 09	               jsr  cursor
.09a3	28		               plp
.09a4	60		               rts
.09a5			putsxy
.09a5	20 36 0a	               jsr  push
.09a8	86 fb		               stx  zpage1
.09aa	84 fc		               sty  zpage1+1
.09ac	a0 00		               ldy  #$00
.09ae	b1 fb		               lda  (zpage1),y
.09b0	aa		               tax
.09b1	20 3d 0b	               jsr  inczp1
.09b4	b1 fb		               lda  (zpage1),y
.09b6	a8		               tay
.09b7	20 5f 09	               jsr  gotoxy
.09ba	20 3d 0b	               jsr  inczp1
.09bd	a6 fb		               ldx  zpage1
.09bf	a4 fc		               ldy  zpage1+1
.09c1	20 45 09	               jsr  puts
.09c4	20 75 0a	               jsr  pop
.09c7	60		               rts
>09c8	00 00		straddr   .word     $00
>09ca	00		px        .byte     $00
>09cb	00		py        .byte     $00
>09cc	00 00		zp1       .word     $00
.09ce			putscxy
.09ce	20 36 0a	               jsr  push
.09d1	84 fc		               sty  zpage1+1
.09d3	86 fb		               stx  zpage1
.09d5	ad 86 02	               lda  bascol
.09d8	8d f8 09	               sta  bc
.09db	a0 00		               ldy #$00
.09dd	b1 fb		               lda  (zpage1),y
.09df	8d 86 02	               sta  bascol
.09e2	20 3d 0b	               jsr  inczp1
.09e5	a6 fb		               ldx  zpage1
.09e7	a4 fc		               ldy  zpage1+1
.09e9	20 a5 09	               jsr  putsxy
.09ec	ad f8 09	               lda  bc
.09ef	8d 86 02	               sta  bascol
.09f2	20 75 0a	               jsr  pop
.09f5	60		               rts
>09f6	00 00		straddr  .word      $00
>09f8	00		bc       .byte      $00
>09f9	00 00		zp1      .word      $00
.09fb			putrahex
.09fb	08		               php
.09fc	48		               pha
.09fd	20 43 0c	               jsr  a2hex
.0a00	a9 ef		               lda  #<a2hexstr
.0a02	a0 0b		               ldy  #>a2hexstr
.0a04	20 45 09	               jsr  puts
.0a07	68		               pla
.0a08	28		               plp
.0a09	60		               rts
.0a0a			kputrahexxy
.0a0a			bputrahexxy
.0a0a			putrahexxy
.0a0a	08		               php
.0a0b	20 43 0c	               jsr  a2hex
.0a0e	a9 ec		               lda  #<a2hexpos
.0a10	a0 0b		               ldy  #>a2hexpos
.0a12	20 a5 09	               jsr  putsxy
.0a15	68		               pla
.0a16	28		               plp
.0a17	60		               rts
.0a18			putrahexcxy
.0a18	08		               php
.0a19	20 43 0c	               jsr  a2hex
.0a1c	a9 ec		               lda  #<a2hexpos
.0a1e	a0 0b		               ldy  #>a2hexpos
.0a20	20 ce 09	               jsr  putscxy
.0a23	68		               pla
.0a24	28		               plp
.0a25	60		               rts
.0a26			setinverse
.0a26	48		               pha
.0a27	a9 12		               lda  #$12
.0a29	20 d2 ff	               jsr  $ffd2
.0a2c	68		               pla
.0a2d	60		               rts
.0a2e			clrinverse
.0a2e	48		               pha
.0a2f	a9 92		               lda  #$92
.0a31	20 d2 ff	               jsr  $ffd2
.0a34	68		               pla
.0a35	60		               rts

;******  Return to file: charset2disk.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.0a36			push
.0a36	08		          php            ; stack : flg, pcl, pch
.0a37	78		          sei
.0a38	8d 72 0a	          sta  ra        ; save a
.0a3b	68		          pla            ; stack : pcl, pch
.0a3c	8d 71 0a	          sta  rp        ; save rp
.0a3f	68		          pla            ; stack : pch
.0a40	8d 73 0a	          sta  pc        ; save pcl
.0a43	68		          pla            ; stack : -
.0a44	8d 74 0a	          sta  pc+1      ; save pch
.0a47	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0a49	48		          pha            ; stack : zp1l
.0a4a	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0a4c	48		          pha            ; stack : zp1h, zp1l
.0a4d	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0a4f	48		          pha            ; stack : zp2l, zp1h, zp1l
.0a50	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0a52	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0a53	ad 71 0a	          lda  rp        ; get rp
.0a56	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0a57	ad 72 0a	          lda  ra        ; get a
.0a5a	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0a5b	8a		          txa            ; get x
.0a5c	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a5d	98		          tya            ; get y
.0a5e	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a5f	ad 74 0a	          lda  pc+1      ; get pch
.0a62	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a63	ad 73 0a	          lda  pc        ; get pcl
.0a66	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a67	ad 71 0a	          lda  rp        ; get rp
.0a6a	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a6b	ad 72 0a	          lda  ra        ; get a
.0a6e	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a6f	58		          cli
.0a70	60		          rts
>0a71	00		rp        .byte     0
>0a72	00		ra        .byte     0
>0a73	00 00		pc        .word     0
.0a75			pull
.0a75			pop
.0a75	78		          sei
.0a76	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a77	8d aa 0a	          sta  pc        ; save pcl
.0a7a	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a7b	8d ab 0a	          sta  pc+1      ; save pch
.0a7e	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a7f	a8		          tay            ; set y
.0a80	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0a81	aa		          tax            ; set x
.0a82	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0a83	8d a9 0a	          sta  ra        ; save a
.0a86	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0a87	8d a8 0a	          sta  rp        ; save rp
.0a8a	68		          pla            ; stack : zp2l, zp1h, zp1l
.0a8b	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0a8d	68		          pla            ; stack : zp1h, zp1l
.0a8e	85 fd		          sta  zpage2    ; get zpage2 High byte
.0a90	68		          pla            ; stack : zp1l
.0a91	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0a93	68		          pla            ; stack :
.0a94	85 fb		          sta  zpage1    ; get zpage1 High byte
.0a96	ad ab 0a	          lda  pc+1      ; get pch
.0a99	48		          pha            ; stack : pch
.0a9a	ad aa 0a	          lda  pc
.0a9d	48		          pha            ; stack : pcl, pch
.0a9e	ad a8 0a	          lda  rp        ; get rp
.0aa1	48		          pha            ; stack : rp, pcl, pch
.0aa2	ad a9 0a	          lda  ra        ; set ra
.0aa5	58		          cli
.0aa6	28		          plp            ; stack : pcl, pch
.0aa7	60		          rts
>0aa8	00		rp        .byte     0
>0aa9	00		ra        .byte     0
>0aaa	00 00		pc        .word     0

;******  Return to file: charset2disk.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.0aac			blkfill
.0aac	20 36 0a	bf0            jsr  push
.0aaf	20 6a 0b	               jsr  savezp1
.0ab2	84 fc		               sty  zpage1+1
.0ab4	a0 00		               ldy  #$00
.0ab6	84 fb		               sty  zpage1
.0ab8	91 fb		bf1            sta  (zpage1),y
.0aba	c8		               iny
.0abb	d0 fb		               bne  bf1
.0abd	20 79 0b	               jsr  restzp1
.0ac0	20 75 0a	               jsr  pop
.0ac3	60		               rts
.0ac4			memfill
.0ac4	20 36 0a	               jsr  push
.0ac7	20 ac 0a	mf1            jsr  blkfill
.0aca	c8		               iny
.0acb	ca		               dex
.0acc	d0 f9		               bne  mf1
.0ace	20 75 0a	               jsr  pop
.0ad1	60		               rts
.0ad2			memmove
.0ad2	20 36 0a	               jsr  push
.0ad5	ba		               tsx            ; On se crée un pointeur ...
.0ad6	8a		               txa
.0ad7	18		               clc
.0ad8	69 0b		               adc  #11
.0ada	a8		               tay
.0adb	a2 06		               ldx  #$06
.0add	b9 00 01	nextbyte       lda  $0100,y
.0ae0	99 2c 0b	               sta  words,y
.0ae3	c8		               iny
.0ae4	ca		               dex
.0ae5	d0 f6		               bne  nextbyte
.0ae7	ad 2c 0b	               lda  s
.0aea	8d 03 0b	               sta  source+1
.0aed	ad 2d 0b	               lda  s+1
.0af0	8d 04 0b	               sta  source+2
.0af3	ad 2e 0b	               lda  d
.0af6	8d 00 0b	               sta  destin+1
.0af9	ad 2f 0b	               lda  d+1
.0afc	8d 01 0b	               sta  destin+2
.0aff	ad ff ff	destin         lda  $ffff
.0b02	8d ff ff	source         sta  $ffff
.0b05	ee 00 0b	               inc  destin+1
.0b08	d0 03		               bne  src
.0b0a	ee 01 0b	               inc  destin+2
.0b0d	ee 03 0b	src            inc  source+1
.0b10	d0 03		               bne  cnt
.0b12	ee 04 0b	               inc  source+2
.0b15	ad 30 0b	cnt            lda  compte
.0b18	d0 08		               bne  decit
.0b1a	ad 31 0b	               lda  compte+1
.0b1d	f0 09		               beq  fini
.0b1f	ce 31 0b	               dec  compte+1
.0b22	ce 30 0b	decit          dec  compte
.0b25	4c ff 0a	               jmp  destin
.0b28	20 75 0a	fini           jsr  pop
.0b2b	60		               rts
.0b2c			words
>0b2c	00 00		s         .word     $0000
>0b2e	00 00		d         .word     $0000
>0b30	00 00		compte    .word     $0000
.0b32			decword
.0b32	20 36 0a	               jsr  push
.0b35	86 fd		               stx  zpage2
.0b37	84 fe		               sty  zpage2+1
.0b39	20 75 0a	               jsr  pop
.0b3c	60		               rts
.0b3d			inczp1
.0b3d	08		               php
.0b3e	e6 fb		               inc  zpage1
.0b40	d0 02		               bne  nopage
.0b42	e6 fc		               inc  zpage1+1
.0b44	28		nopage         plp
.0b45	60		               rts
.0b46			deczp1
.0b46	08		                php
.0b47	48		                pha
.0b48	c6 fb		                dec  zpage1
.0b4a	d0 02		                bne  nopage
.0b4c	c6 fc		                dec  zpage1+1
.0b4e	c6 fb		nopage          dec  zpage1
.0b50	68		                pla
.0b51	28		                plp
.0b52	60		                rts
.0b53			inczp2
.0b53	08		               php
.0b54	48		               pha
.0b55	e6 fd		               inc  zpage2
.0b57	d0 02		               bne  nopage
.0b59	e6 fe		               inc  zpage2+1
.0b5b	68		nopage         pla
.0b5c	28		               plp
.0b5d	60		               rts
.0b5e			deczp2
.0b5e	08		               php
.0b5f	48		               pha
.0b60	a5 fd		               lda  zpage2
.0b62	d0 02		               bne  nopage
.0b64	c6 fe		               dec  zpage2+1
.0b66	c6 fd		nopage         dec  zpage2
.0b68	28		               plp
.0b69	60		               rts
.0b6a			savezp1
.0b6a	08		               php
.0b6b	48		               pha
.0b6c	a5 fb		               lda  zpage1
.0b6e	8d e6 0b	               sta  zp1
.0b71	a5 fc		               lda  zpage1+1
.0b73	8d e7 0b	               sta  zp1+1
.0b76	68		               pla
.0b77	28		               plp
.0b78	60		               rts
.0b79			restzp1
.0b79	08		               php
.0b7a	48		               pha
.0b7b	ad e6 0b	               lda zp1
.0b7e	85 fb		               sta zpage1
.0b80	ad e7 0b	               lda zp1+1
.0b83	85 fc		               sta zpage1+1
.0b85	68		               pla
.0b86	28		               plp
.0b87	60		               rts
.0b88			savezp2
.0b88	08		         php
.0b89	48		         pha
.0b8a	a5 fd		         lda zpage2
.0b8c	8d e8 0b	         sta zp2
.0b8f	a5 fe		         lda zpage2+1
.0b91	8d e9 0b	         sta zp2+1
.0b94	68		         pla
.0b95	28		         plp
.0b96	60		         rts
.0b97			restzp2
.0b97	08		                php
.0b98	48		                pha
.0b99	ad e8 0b	                lda  zp2
.0b9c	85 fd		                sta  zpage2
.0b9e	ad e9 0b	                lda  zp2+1
.0ba1	85 fe		                sta  zpage2+1
.0ba3	68		                pla
.0ba4	28		                plp
.0ba5	60		                rts
.0ba6			xy2addr
.0ba6	08		                php
.0ba7	48		                pha
.0ba8	8a		                txa
.0ba9	48		                pha
.0baa	98		                tya
.0bab	48		                pha
.0bac	ad e1 0b	                lda     addr1+1
.0baf	8d e3 0b	                sta     addr2+1
.0bb2	ad e0 0b	                lda     addr1
.0bb5	8d e2 0b	                sta     addr2
.0bb8	c0 00		                cpy     #$00
.0bba	f0 0f		                beq     addx
.0bbc	18		moreline        clc
.0bbd	6d df 0b	                adc     ymult
.0bc0	90 03		                bcc     norepy
.0bc2	ee e3 0b	                inc     addr2+1
.0bc5	8d e2 0b	norepy          sta     addr2
.0bc8	88		                dey
.0bc9	d0 f1		                bne     moreline
.0bcb	8a		addx            txa
.0bcc	18		                clc
.0bcd	6d e2 0b	                adc     addr2
.0bd0	90 03		                bcc     thatsit
.0bd2	ee e3 0b	                inc     addr2+1
.0bd5	8d e2 0b	thatsit         sta     addr2
.0bd8	68		                pla
.0bd9	a8		                tay
.0bda	68		                pla
.0bdb	aa		                tax
.0bdc	68		                pla
.0bdd	28		                plp
.0bde	60		                rts
>0bdf	28		ymult          .byte     40
>0be0	00 00		addr1          .word     $0000
>0be2	00 00		addr2          .word     $0000
>0be4	00 00		bytecnt        .word     $0000
>0be6	00 00		zp1        .word   $0000
>0be8	00 00		zp2        .word   $0000

;******  Return to file: charset2disk.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>0bea	01		a2hexcol       .byte     1              ; pour aputscxy
>0beb	00		a2hexbkcol     .byte     %00000000
.0bec			a2hexpos
>0bec	00		a2hexpx        .byte     0              ; pour aputsxy
>0bed	00		a2hexpy        .byte     0
>0bee	24		a2hexprefix    .byte     "$"            ; pour aputs
>0bef	00 00		a2hexstr       .word     $00
>0bf1	00 00		               .word     $00
>0bf3	00		               .byte     0              ; 0 end string
.0bf4			putahexfmtxy
.0bf4	20 36 0a	               jsr  push
.0bf7	20 43 0c	               jsr  a2hex
.0bfa	ae ec 0b	               ldx  a2hexpx
.0bfd	ac ed 0b	               ldy  a2hexpy
.0c00	20 5f 09	               jsr  gotoxy
.0c03	a2 ee		               ldx  #<a2hexprefix
.0c05	a0 0b		               ldy  #>a2hexprefix
.0c07	20 45 09	               jsr  puts
.0c0a	20 75 0a	               jsr  pop
.0c0d	60		               rts
.0c0e			putahexfmt
.0c0e	20 36 0a	               jsr  push
.0c11	20 43 0c	               jsr  a2hex
.0c14	a2 ee		               ldx  #<a2hexprefix
.0c16	a0 0b		               ldy  #>a2hexprefix
.0c18	20 45 09	               jsr  puts
.0c1b	20 75 0a	               jsr  pop
.0c1e	60		               rts
.0c1f			putahex
.0c1f	20 36 0a	               jsr  push
.0c22	20 43 0c	               jsr  a2hex
.0c25	a2 ef		               ldx  #<a2hexstr
.0c27	a0 0b		               ldy  #>a2hexstr
.0c29	20 45 09	               jsr  puts
.0c2c	20 75 0a	               jsr  pop
.0c2f	60		               rts
.0c30			nib2hex
.0c30	08		               php
.0c31	29 0f		               and  #$0f
.0c33	f8		               sed
.0c34	18		               clc
.0c35	69 90		               adc  #$90
.0c37	69 40		               adc  #$40
.0c39	d8		               cld
.0c3a	28		               plp
.0c3b	60		               rts
.0c3c			lsra4bits
.0c3c	08		               php
.0c3d	4a		               lsr
.0c3e	4a		               lsr
.0c3f	4a		               lsr
.0c40	4a		               lsr
.0c41	28		               plp
.0c42	60		               rts
.0c43			a2hex
.0c43	08		               php
.0c44	48		               pha
.0c45	48		               pha
.0c46	20 3c 0c	               jsr  lsra4bits
.0c49	20 30 0c	               jsr  nib2hex
.0c4c	8d ef 0b	               sta  a2hexstr
.0c4f	68		               pla
.0c50	20 30 0c	               jsr  nib2hex
.0c53	8d f0 0b	               sta  a2hexstr+1
.0c56	a9 00		               lda  #$00                ; set end of string
.0c58	8d f1 0b	               sta  a2hexstr+2
.0c5b	68		               pla
.0c5c	28		               plp
.0c5d	60		               rts
.0c5e			xy2hex
.0c5e	20 36 0a	               jsr  push
.0c61	20 43 0c	               jsr  a2hex
.0c64	8a		               txa
.0c65	48		               pha
.0c66	20 3c 0c	               jsr  lsra4bits
.0c69	20 30 0c	               jsr  nib2hex
.0c6c	8d ef 0b	               sta  a2hexstr
.0c6f	68		               pla
.0c70	20 30 0c	               jsr  nib2hex
.0c73	8d f0 0b	               sta  a2hexstr+1
.0c76	98		               tya
.0c77	48		               pha
.0c78	20 3c 0c	               jsr  lsra4bits
.0c7b	20 30 0c	               jsr  nib2hex
.0c7e	8d f1 0b	               sta  a2hexstr+2
.0c81	68		               pla
.0c82	20 30 0c	               jsr  nib2hex
.0c85	8d f2 0b	               sta  a2hexstr+3
.0c88	a9 00		               lda  #$00                ; 0 ended string
.0c8a	8d f3 0b	               sta  a2hexstr+4
.0c8d	20 75 0a	               jsr  pop
.0c90			atobin
.0c90	20 36 0a	               jsr     push
.0c93	a2 08		               ldx     #8
.0c95	a0 00		               ldy     #0
.0c97	2a		nextbit        rol
.0c98	48		               pha
.0c99	69 00		               adc     #$00
.0c9b	29 01		               and     #$01
.0c9d	20 30 0c	               jsr     nib2hex
.0ca0	99 b1 0c	               sta     abin,y
.0ca3	68		               pla
.0ca4	c8		               iny
.0ca5	ca		               dex
.0ca6	d0 ef		               bne     nextbit
.0ca8	a9 00		               lda     #0
.0caa	99 b1 0c	               sta     abin,y
.0cad	20 75 0a	               jsr     pull
.0cb0	60		               rts
>0cb1	30 30 30 30	abin           .null   "00000000"
>0cb5	30 30 30 30 00
.0cba			putabin
.0cba	20 90 0c	               jsr     atobin
.0cbd	20 36 0a	               jsr     push
.0cc0	a2 b1		               ldx     #<abin
.0cc2	a0 0c		               ldy     #>abin
.0cc4	20 45 09	               jsr     puts
.0cc7	20 75 0a	               jsr     pop
.0cca	60		               rts
.0ccb			putabinfmt
.0ccb	08		               php
.0ccc	48		               pha
.0ccd	a9 25		               lda     #"%"
.0ccf	20 3f 09	               jsr     putch
.0cd2	68		               pla
.0cd3	20 ba 0c	               jsr     putabin
.0cd6	28		               plp
.0cd7	60		               rts
.0cd8			putabinxy
.0cd8	20 5f 09	               jsr     gotoxy
.0cdb	20 ba 0c	               jsr     putabin
.0cde	60		               rts
.0cdf			putabinfmtxy
.0cdf	20 5f 09	               jsr     gotoxy
.0ce2	20 cb 0c	               jsr     putabinfmt
.0ce5	60		               rts

;******  Return to file: charset2disk.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-disk.asm

.0ce6			diskerror
.0ce6	20 36 0a	               jsr  push
.0ce9	ad 17 0e	               lda  dsk_dev   ; Select device 8
.0cec	85 ba		               sta  $ba       ;
.0cee	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.0cf1	a9 6f		               lda  #$6f
.0cf3	85 b9		               sta  $b9       ;
.0cf5	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.0cf8	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.0cfb	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.0cfe	c9 0d		               cmp  #$0d      ; Is it CR ?
.0d00	d0 f6		               bne  nextchar  ; No, get next char
.0d02	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.0d05	20 75 0a	               jsr  pop
.0d08	60		               rts
.0d09			diskdir
.0d09	20 36 0a	               jsr  push
.0d0c	a9 24		               lda  #$24      ; L012C - Filename is "$"
.0d0e	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.0d10	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.0d12	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.0d14	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.0d16	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.0d18	a9 01		               lda  #$01      ; L0138 - set ...
.0d1a	85 b7		               sta  $b7       ; L013A - ... length of current filename
.0d1c	ad 17 0e	               lda  dsk_dev   ; L013C - set 8 as ...
.0d1f	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.0d21	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.0d23	85 b9		               sta  $b9       ; L0142 - ... secondary address
.0d25	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.0d28	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...%10111010
.0d2a	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.0d2d	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.0d2f	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.0d32	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.0d34	85 90		               sta  $90       ; L0153 - ... kernal status word.
.0d36	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.0d38	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.0d3a	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.0d3d	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.0d3f	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.0d41	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.0d43	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.0d46	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.0d48	d0 28		               bne  exit      ; L0167
.0d4a	a4 fb		               ldy  $fb       ; L0169
.0d4c	88		               dey            ; L016b
.0d4d	d0 e9		               bne  loop1     ; L016C - If not last, loop
.0d4f	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.0d51	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.0d54	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.0d56	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.0d59	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.0d5c	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.0d5e	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.0d60	aa		               tax            ; L017F - tfr a in x
.0d61	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.0d63	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.0d66	4c 59 0d	               jmp  loop3     ; L0185 - get another byte
.0d69	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.0d6b	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.0d6e	a0 02		               ldy  #$02      ; L018D - set Y to 2
.0d70	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.0d72	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.0d75	20 75 0a	               jsr  pop
.0d78	60		               rts            ; L0194
.0d79			directory
.0d79	20 09 0d	               jsr  diskdir
.0d7c	20 e6 0c	               jsr  diskerror
.0d7f	60		               rts
.0d80			memtofile
.0d80	20 f1 0d	               jsr  dsk_putmesg
.0d83	20 36 0a	               jsr  push
.0d86	ad 1b 0e	               lda  dsk_fnlen
.0d89	ae 19 0e	               ldx  dsk_fnptr      ; load fname addr. lbyte
.0d8c	ac 1a 0e	               ldy  dsk_fnptr+1
.0d8f	20 bd ff	               jsr  setnam         ; call setnam
.0d92	ad 18 0e	               lda  dsk_lfsno
.0d95	ae 17 0e	               ldx  dsk_dev        ; specified device
.0d98	a0 00		skip           ldy  #$00
.0d9a	20 ba ff	               jsr  setlfs         ; call setlfs
.0d9d	ad 13 0e	               lda  dsk_data_s     ; put data start lbyte in stal
.0da0	85 c1		               sta  stal
.0da2	ad 14 0e	               lda  dsk_data_s+1   ; put data start hbyte in stal
.0da5	85 c2		               sta  stal+1
.0da7	ae 15 0e	               ldx  dsk_data_e     ; put data end lbyte in x
.0daa	ac 16 0e	               ldy  dsk_data_e+1   ; put data end hbyte in y
.0dad	a9 c1		               lda  #stal          ; start address located in $c1/$c2
.0daf	20 d8 ff	               jsr  save           ; call save
.0db2	90 00		               bcc  noerror        ; if carry set, a load error has happened
.0db4	20 75 0a	noerror        jsr  pop
.0db7	60		               rts
.0db8			filetomem
.0db8	20 36 0a	               jsr push
.0dbb	ad 1b 0e	               lda dsk_fnlen
.0dbe	ae 19 0e	               ldx dsk_fnptr
.0dc1	ac 1a 0e	               ldy dsk_fnptr+1
.0dc4	20 bd ff	               jsr setnam     ; call setnam
.0dc7	ad 18 0e	               lda dsk_lfsno
.0dca	ae 17 0e	               ldx dsk_dev    ; default to device 8
.0dcd	a0 01		               ldy #$01       ; not $01 means: load to address stored in file
.0dcf	20 ba ff	               jsr setlfs     ; call setlfs
.0dd2	a9 00		               lda #$00       ; $00 means: load to memory (not verify)
.0dd4	20 d5 ff	               jsr load       ; call load
.0dd7	90 03		               bcc noerror      ; if carry set, a load error has happened
.0dd9	20 e0 0d	               jsr  error
.0ddc	20 75 0a	noerror        jsr pop
.0ddf	60		               rts
.0de0			error
.0de0	60		               rts
.0de1	a2 2c		error1         ldx  #<dsk_emsg1
.0de3	a0 0e		               ldy  #>dsk_emsg1
.0de5	20 45 09	               jsr  puts
.0de8	60		               rts
.0de9	a2 40		error2         ldx #<dsk_emsg2
.0deb	a0 0e		               ldy #>dsk_emsg2
.0ded	20 45 09	               jsr puts
.0df0	60		               rts
.0df1			dsk_putmesg
.0df1	20 36 0a	               jsr push
.0df4	a2 1c		               ldx #<dsk_msg0
.0df6	a0 0e		               ldy #>dsk_msg0
.0df8	20 45 09	               jsr puts
.0dfb	a9 20		               lda #$20
.0dfd	20 3f 09	               jsr putch
.0e00	ae 19 0e	               ldx dsk_fnptr
.0e03	ac 1a 0e	               ldy dsk_fnptr+1
.0e06	20 45 09	               jsr puts
.0e09	ad 18 0e	               lda dsk_lfsno
.0e0c	20 c3 ff	               jsr close
.0e0f	20 75 0a	               jsr pop
.0e12	60		               rts
>0e13	00 00		dsk_data_s     .word     $0000    ; example addresses
>0e15	00 20		dsk_data_e     .word     $2000
>0e17	08		dsk_dev        .byte     $08
>0e18	00		dsk_lfsno      .byte     $00
>0e19	00 00		dsk_fnptr      .word     $00
>0e1b	00		dsk_fnlen      .byte     0
>0e1c	8d		dsk_msg0       .byte     141
>0e1d	53 41 56 49	               .null     "saving"
>0e21	4e 47 00
>0e24	8d		dsk_msg1       .byte     141
>0e25	53 55 43 43	               .null     "succes"
>0e29	45 53 00
>0e2c	8d		dsk_emsg1      .byte     141
>0e2d	46 49 43 48	               .null     "fichier non ouvert"
>0e31	49 45 52 20 4e 4f 4e 20 4f 55 56 45 52 54 00
>0e40	11		dsk_emsg2      .byte     17
>0e41	45 52 52 45	               .null     "erreur d'ecriture"
>0e45	55 52 20 44 27 45 43 52 49 54 55 52 45 00

;******  Return to file: charset2disk.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib" -i -L agp-0001.txt -o agp-0001.prg agp-0001.asm
; Fri Dec 10 09:58:12 2021

;Offset	;Hex		;Source

;******  Processing input file: agp-0001.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_map_kernal.asm"

.080d			        c
=$90			kiostatus = $90       ; Kernal I/O status word (st) (byte)
=$b7			curfnlen  = $b7       ; Current filename length (byte)
=$b9			cursecadd = $b9       ; Current secondary address (byte)
=$ba			curdevno  = $ba       ; Current device number (byte)
=$bb			curfptr   = $bb       ; Current file pointer (word)
=$fb			zpage1    = $fb       ; zero page 1 address (word)
=$fd			zpage2    = $fd       ; zero page 2 address (word)
=$fb			zeropage  = zpage1
=$fd			zonepage  = zpage2
=$0286			bascol    = $0286     ;basic next chr colscreenram (byte)
=$0400			scrnram   = $0400     ;video character ram
=$0400			scrram0   = $0400
=$0500			scrram1   = $0500
=$0600			scrram2   = $0600
=$0700			scrram3   = $0700
=$0801			basicsta  = $0801     ;basic start address
=$a000			basicrom  = $a000
=$d000			vic       = $d000     ;vic base address
=53265			vicreg11  = vic+$11   ;misc vic register
=53266			vicscan   = vic+$12   ;vic raster line number
=$d020			vborder   = $d020     ;video border col.
=$d020			framecol  = $d020
=$d021			backgrnd  = $d021
=$d021			vbkgrnd   = $d021     ;video back col.
=$d400			sid       = $d400     ;sid base address
=$d800			colorram  = $d800     ;video color ram
=$d800			colram0   = $d800
=$d900			colram1   = $d900
=$da00			colram2   = $da00
=$db00			colram3   = $db00
=$dc00			cia1      = $dc00     ;cia1  base address
=$dd00			cia2      = $dd00     ;cia2 base address
=$e000			kernalrom = $e000
=$03			bstop     =    $03      ;stop
=$05			bwhite    =    $05      ;set color white
=$08			block     =    $08      ;lock the charset
=$09			bunlock   =    $09      ;unlock the charset
=$0d			bcarret   =    $0d
=$0e			btext     =    $0e
=$11			bcrsdn    =    $11      ;cursor down 1 line
=$12			brevcol   =    $12
=$13			bhome     =    $13
=$14			bdelete   =    $14
=$1c			bred      =    $1c
=$1d			bcuright  =    $1d
=$1e			bgreen    =    $1e
=$1f			bblue     =    $1f
=$81			borange   =    $81
=$83			blrun     =    $83
=$85			bfkey1    =    $85
=$86			bfkey2    =    $86
=$87			bfkey3    =    $87
=$88			bfkey4    =    $88
=$89			bfkey5    =    $89
=$8a			bfkey6    =    $8a
=$8b			bfkey7    =    $8b
=$8c			bfkey8    =    $8c
=$8d			bcarret1  =    $8d
=$8e			bgraph    =    $8e
=$90			bblack    =    $90
=$91			bcuup     =    $91
=$92			brevoff   =    $92
=$93			bclear    =    $93
=$94			binsert   =    $94
=$95			bbrown    =    $95
=$96			bltred    =    $96
=$97			bdkgrey   =    $97
=$98			bmdgrey   =    $98
=$99			bltgreen  =    $99
=$9a			bltblue   =    $9a
=$9b			bltgrey   =    $9b
=$9c			bmagenta  =    $9c
=$9d			bculeft   =    $9d
=$9e			byellow   =    $9e
=$9f			bcyan     =    $9f
=$0286			carcol  = $0286
=$030a			ieval   = $030a
=$73			chrget  = $73
=$79			chrgot  = $79
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$ff81			cint    = $ff81 ; ($ff5b) Initialize the screen editor and vic-ii chip
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ff8a			restor  = $ff8a ; ($fd15) Restore default I/O vectors.
=$ff8d			vector  = $ff8d ; ($fd1a) Read/set I/O vectors.
=$ff90			setmsg  = $ff90 ; ($fe18) Set kernal message output flag
=$ff93			second  = $ff93 ; ($edb9) Send secondary address after listen
=$ff96			tksa    = $ff96 ; ($edc7) Send a secondary address to a device commanded to talk
=$ff99			memtop  = $ff99 ; ($fe25) Get/Set top of ram
=$ff9c			membot  = $ff9c ; ($fe34) Get/set bottom of memory.
=$ff9f			scankey = $ff9f ; $(ea87) Scan the keyboard
=$ffa2			settmo  = $ffa2 ; ($fe21) Set ieee bus card timeout flag
=$ffa5			acptr   = $ffa5 ; ($ee13) recoit un caractÃ¨re provenant du port serie
=$ffa8			ciout   = $ffa8 ; ($eddd) Transmit a byte over the serial bus
=$ffab			untlk   = $ffab ; ($edef) Send an untalk command
=$ffae			unlsn   = $ffae ; ($edfe) Send an unlisten command
=$ffb1			listen  = $ffb1 ; ($ed0c) Command a device on the serial bus to listen.
=$ffb4			talk    = $ffb4 ; ($ed09) Command a device on the serial bus to talk
=$ffb7			readst  = $ffb7 ; ($fe07) Read i/o status word
=$ffba			setlfs  = $ffba ; ($fe00) Set up a logical file
=$ffbd			setnam  = $ffbd ; ($fdf9) Set up file name
=$ffc0			open    = $ffc0 ; ($f3a4) Open a logical file
=$ffc3			close   = $ffc3 ; ($f291) Close a logical file
=$ffc6			chkin   = $ffc6 ; ($f20e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; ($f250) Define an output channel.
=$ffcc			clrchn  = $ffcc ; ($f333) - Clear all i/o channels.
=$ffcf			chrin   = $ffcf ; ($f157) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; ($f1ca) Output a character
=$ffd5			load    = $ffd5 ; ($f49e) Load device to RAM.
=$ffd8			save    = $ffd8 ; ($f5dd) Save memory to a device.
=$ffdb			settim  = $ffdb ; ($f6e4) Set the system clock.
=$ffde			rdtim   = $ffde ; ($f6dd) Read system clock
=$ffe1			stop    = $ffe1 ; ($f6ed) Check if stop key is pressed.
=$ffe4			getin   = $ffe4 ; ($f13e) Get a character.
=$ffe7			clall   = $ffe7 ; ($f32f) Close all open files
=$ffea			udtim   = $ffea ; ($f69b) Update the system clock
=$ffed			screen  = $ffed ; ($e505) Return screen format
=$fff0			plot    = $fff0 ; ($e50a) Set or retrieve cursor location x=column, y=line
=$fff3			iobase  = $fff3 ; ($e500) Define i/o memory page
=$ff81			kcint     =    cint      ;   , init vic + ecran.
=$ff84			kioinit   =    ioinit    ;   , init i/o dev.
=$ff87			kramtas   =    ramtas    ;   , test de memoire.
=$ffa8			kciout    =    ciout     ;a  ,tx byte  acia
=$ff8a			krestor   =    restor    ;   , set ram plafond
=$ff8d			kvector   =    vector    ;
=$ff90			ksetmsg   =    setmsg    ;a  , set sys. msg. out
=$ff93			ksecond   =    second    ;a  , tx adresse sec.
=$ff96			ktksa     =    tksa      ;a  , talk adresse sec.
=$ff99			kmemtop   =    memtop    ; yx, (c) get mem high
=$ff9c			kmembot   =    membot    ; yx, (c) get mem low
=$ff9f			kscankey  =    scankey   ;   , scan clavier
=$ffa2			ksettmo   =    settmo    ;a  , set ieee timeout
=$ffa5			kacptr    =    acptr     ;a  ,rx serie.
=$ffab			kuntlk    =    untlk     ;   , iec-cmc stop talk
=$ffae			kunlsn    =    unlsn     ;   , iec-cmd stop lsn
=$ffb1			klisten   =    listen    ;a  , iec-cmd dev ecout
=$ffb4			ktalk     =    talk      ;a  , iec-cmd dev parle
=$ffb7			kreadst   =    readst    ;a  , lecture i/o stats
=$ffba			ksetlfs   =    setlfs    ;ayx, init fich logi.
=$ffbd			ksetnam   =    setnam    ;ayx, init num.nom.fich
=$ffc0			kopen     =    open      ;axy, ouvre fich-nom
=$ffc3			kclose    =    close     ;a  , ferme fichier #a.
=$ffc6			kchkin    =    chkin     ;  x,open canal in.
=$ffc9			kchkout   =    chkout    ;  x,open canal out
=$ffcc			kclrchn   =    clrchn    ;   , ferme canaux i/o.
=$ffcf			kchrin    =    chrin     ;a  ,recup. un car.
=$ffd2			kchrout   =    chrout    ;a  ,sort un car.
=$ffd5			kload     =    load      ;ayx, dev->ram
=$ffd8			ksave     =    save      ;   , sauve mem->dev
=$ffdb			ksettim   =    settim    ;axy, init sysclock
=$ffde			krdtim    =    rdtim     ;axy, lecture sysclock
=$ffe1			kstop     =    stop      ;a  , ret. stopkey stat
=$ffe4			kgetin    =    getin     ;a  , recup. car. #dev.
=$ffe7			kclall    =    clall     ;   , ferme fichiers.
=$ffea			kudtim    =    udtim     ;   , maj sysclock
=$ffed			kscreen   =    screen    ; yx, get format ecran
=$fff0			kplot     =    plot      ; yx, (c) get csr pos.
=$fff3			kiobase   =    iobase    ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.080d	4c bf 16	pgmstart        jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: agp-0001.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_pushpop.asm"

.0810			push
.0810	08		          php            ; stack : flg, pcl, pch
.0811	78		          sei
.0812	8d 4c 08	          sta  ra        ; save a
.0815	68		          pla            ; stack : pcl, pch
.0816	8d 4b 08	          sta  rp        ; save rp
.0819	68		          pla            ; stack : pch
.081a	8d 4d 08	          sta  pc        ; save pcl
.081d	68		          pla            ; stack : -
.081e	8d 4e 08	          sta  pc+1      ; save pch
.0821	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0823	48		          pha            ; stack : zp1l
.0824	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0826	48		          pha            ; stack : zp1h, zp1l
.0827	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0829	48		          pha            ; stack : zp2l, zp1h, zp1l
.082a	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.082c	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.082d	ad 4b 08	          lda  rp        ; get rp
.0830	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0831	ad 4c 08	          lda  ra        ; get a
.0834	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0835	8a		          txa            ; get x
.0836	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0837	98		          tya            ; get y
.0838	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0839	ad 4e 08	          lda  pc+1      ; get pch
.083c	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.083d	ad 4d 08	          lda  pc        ; get pcl
.0840	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0841	ad 4b 08	          lda  rp        ; get rp
.0844	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0845	ad 4c 08	          lda  ra        ; get a
.0848	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0849	58		          cli
.084a	60		          rts
>084b	00		rp        .byte     0
>084c	00		ra        .byte     0
>084d	00 00		pc        .word     0
.084f			pull
.084f			pop
.084f	78		          sei
.0850	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0851	8d 84 08	          sta  pc        ; save pcl
.0854	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0855	8d 85 08	          sta  pc+1      ; save pch
.0858	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0859	a8		          tay            ; set y
.085a	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.085b	aa		          tax            ; set x
.085c	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.085d	8d 83 08	          sta  ra        ; save a
.0860	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0861	8d 82 08	          sta  rp        ; save rp
.0864	68		          pla            ; stack : zp2l, zp1h, zp1l
.0865	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0867	68		          pla            ; stack : zp1h, zp1l
.0868	85 fd		          sta  zpage2    ; get zpage2 High byte
.086a	68		          pla            ; stack : zp1l
.086b	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.086d	68		          pla            ; stack :
.086e	85 fb		          sta  zpage1    ; get zpage1 High byte
.0870	ad 85 08	          lda  pc+1      ; get pch
.0873	48		          pha            ; stack : pch
.0874	ad 84 08	          lda  pc
.0877	48		          pha            ; stack : pcl, pch
.0878	ad 82 08	          lda  rp        ; get rp
.087b	48		          pha            ; stack : rp, pcl, pch
.087c	ad 83 08	          lda  ra        ; set ra
.087f	58		          cli
.0880	28		          plp            ; stack : pcl, pch
.0881	60		          rts
>0882	00		rp        .byte     0
>0883	00		ra        .byte     0
>0884	00 00		pc        .word     0

;******  Return to file: agp-0001.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_mem.asm"

.0886			blkfill
.0886	20 10 08	bf0            jsr  push
.0889	20 c6 08	               jsr  savezp1
.088c	84 fc		               sty  zpage1+1
.088e	a0 00		               ldy  #$00
.0890	84 fb		               sty  zpage1
.0892	91 fb		bf1            sta  (zpage1),y
.0894	c8		               iny
.0895	d0 fb		               bne  bf1
.0897	20 d5 08	               jsr  restzp1
.089a	20 4f 08	               jsr  pop
.089d	60		               rts
.089e			memfill
.089e	20 10 08	               jsr  push
.08a1	20 86 08	mf1            jsr  blkfill
.08a4	c8		               iny
.08a5	ca		               dex
.08a6	d0 f9		               bne  mf1
.08a8	20 4f 08	               jsr  pop
.08ab	60		               rts
.08ac			inczp1
.08ac	08		               php
.08ad	48		               pha
.08ae	e6 fb		               inc  zpage1
.08b0	a5 fb		               lda  zpage1
.08b2	d0 02		               bne  nopage
.08b4	e6 fc		               inc  zpage1+1
.08b6	68		nopage         pla
.08b7	28		               plp
.08b8	60		               rts
.08b9			inczp2
.08b9	08		               php
.08ba	48		               pha
.08bb	e6 fd		               inc  zpage2
.08bd	a5 fd		               lda  zpage2
.08bf	d0 02		               bne  nopage
.08c1	e6 fe		               inc  zpage2+1
.08c3	68		nopage         pla
.08c4	28		               plp
.08c5	60		               rts
.08c6			savezp1
.08c6	08		               php
.08c7	48		               pha
.08c8	a5 fb		               lda  zpage1
.08ca	8d 40 09	               sta  zp1
.08cd	a5 fc		               lda  zpage1+1
.08cf	8d 41 09	               sta  zp1+1
.08d2	68		               pla
.08d3	28		               plp
.08d4	60		               rts
.08d5			restzp1
.08d5	08		               php
.08d6	48		               pha
.08d7	ad 40 09	               lda zp1
.08da	85 fb		               sta zpage1
.08dc	ad 41 09	               lda zp1+1
.08df	85 fc		               sta zpage1+1
.08e1	68		               pla
.08e2	28		               plp
.08e3	60		               rts
.08e4			savezp2
.08e4	08		         php
.08e5	48		         pha
.08e6	a5 fd		         lda zpage2
.08e8	8d 42 09	         sta zp2
.08eb	a5 fe		         lda zpage2+1
.08ed	8d 43 09	         sta zp2+1
.08f0	68		         pla
.08f1	28		         plp
.08f2	60		         rts
.08f3			restzp2
.08f3	08		                php
.08f4	48		                pha
.08f5	ad 42 09	                lda  zp2
.08f8	85 fd		                sta  zpage2
.08fa	ad 43 09	                lda  zp2+1
.08fd	85 fe		                sta     zpage2+1
.08ff	68		                pla
.0900	28		                plp
.0901	60		                rts
.0902			xy2addr
.0902	08		                php
.0903	48		                pha
.0904	8a		                txa
.0905	48		                pha
.0906	98		                tya
.0907	48		                pha
.0908	ad 3d 09	                lda     addr1+1
.090b	8d 3f 09	                sta     addr2+1
.090e	ad 3c 09	                lda     addr1
.0911	8d 3e 09	                sta     addr2
.0914	c0 00		                cpy     #$00
.0916	f0 0f		                beq     addx
.0918	18		moreline        clc
.0919	6d 3b 09	                adc     ymult
.091c	90 03		                bcc     norepy
.091e	ee 3f 09	                inc     addr2+1
.0921	8d 3e 09	norepy          sta     addr2
.0924	88		                dey
.0925	d0 f1		                bne     moreline
.0927	8a		addx            txa
.0928	18		                clc
.0929	6d 3e 09	                adc     addr2
.092c	90 03		                bcc     thatsit
.092e	ee 3f 09	                inc     addr2+1
.0931	8d 3e 09	thatsit         sta     addr2
.0934	68		                pla
.0935	a8		                tay
.0936	68		                pla
.0937	aa		                tax
.0938	68		                pla
.0939	28		                plp
.093a	60		                rts
>093b	28		ymult      .byte   40
>093c	00 00		addr1      .word   $0000
>093e	00 00		addr2      .word   $0000
>0940	00 00		zp1        .word   $0000
>0942	00 00		zp2        .word   $0000

;******  Return to file: agp-0001.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_hex.asm"

>0944	01		a2hexcol       .byte     1    ; pour aputscxy
.0945			a2hexpos
>0945	00		a2hexpx        .byte     0    ; pour aputsxy
>0946	00		a2hexpy        .byte     0
>0947	24		a2hexstr       .byte     "$"  ; pour aputs
>0948	00 00		               .word     $00
>094a	00 00		               .word     $00
>094c	00		               .byte     0    ; 0 end string
.094d			nib2hex
.094d	08		               php
.094e	29 0f		               and  #$0f
.0950	f8		               sed
.0951	18		               clc
.0952	69 90		               adc  #$90
.0954	69 40		               adc  #$40
.0956	d8		               cld
.0957	28		               plp
.0958	60		               rts
.0959			lsra4bits
.0959	08		               php
.095a	4a		               lsr
.095b	4a		               lsr
.095c	4a		               lsr
.095d	4a		               lsr
.095e	28		               plp
.095f	60		               rts
.0960			a2hex
.0960	08		               php
.0961	48		               pha
.0962	48		               pha
.0963	20 59 09	               jsr  lsra4bits
.0966	20 4d 09	               jsr  nib2hex
.0969	8d 48 09	               sta  a2hexstr+1
.096c	68		               pla
.096d	20 4d 09	               jsr  nib2hex
.0970	8d 49 09	               sta  a2hexstr+2
.0973	a9 00		               lda  #$00
.0975	8d 4a 09	               sta  a2hexstr+3
.0978	68		               pla
.0979	28		               plp
.097a	60		               rts
.097b			xy2hex
.097b	20 10 08	               jsr  push
.097e	20 60 09	               jsr  a2hex
.0981	98		               tya
.0982	48		               pha
.0983	20 59 09	               jsr  lsra4bits
.0986	20 4d 09	               jsr  nib2hex
.0989	8d 4a 09	               sta  a2hexstr+3
.098c	68		               pla
.098d	20 4d 09	               jsr  nib2hex
.0990	8d 4b 09	               sta  a2hexstr+4
.0993	a9 00		               lda  #$00
.0995	8d 4c 09	               sta  a2hexstr+5
.0998	20 4f 08	               jsr  pop
.099b			atobin
.099b	20 10 08	               jsr     push
.099e	a2 08		               ldx     #8
.09a0	a0 00		               ldy     #0
.09a2	2a		nextbit        rol
.09a3	48		               pha
.09a4	29 01		               and     #1
.09a6	20 4d 09	               jsr     nib2hex
.09a9	99 ba 09	               sta     abin,y
.09ac	68		               pla
.09ad	c8		               iny
.09ae	ca		               dex
.09af	d0 f1		               bne     nextbit
.09b1	a9 00		               lda     #0
.09b3	99 ba 09	               sta     abin,y
.09b6	20 4f 08	               jsr     pull
.09b9	60		               rts
>09ba	00 00 00 00	abin           .byte 0,0,0,0,0,0,0,0,0
>09be	00 00 00 00 00
.09c3			putabin
.09c3	20 9b 09	               jsr     atobin
.09c6	20 10 08	               jsr     push
.09c9	a2 ba		               ldx     #<abin
.09cb	a0 09		               ldy     #>abin
.09cd	20 47 0b	               jsr     puts
.09d0	20 4f 08	               jsr     pop
.09d3	60		               rts
.09d4			putabinfmt
.09d4	08		               php
.09d5	48		               pha
.09d6	a9 25		               lda     #"%"
.09d8	20 27 0b	               jsr     putch
.09db	68		               pla
.09dc	20 c3 09	               jsr     putabin
.09df	28		               plp
.09e0	60		               rts
.09e1			putabinxy
.09e1	20 ca 0b	               jsr     gotoxy
.09e4	20 c3 09	               jsr     putabin
.09e7	60		               rts
.09e8			putabinfmtxy
.09e8	20 ca 0b	               jsr     gotoxy
.09eb	20 d4 09	               jsr     putabinfmt
.09ee	60		               rts

;******  Return to file: agp-0001.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_mc.asm"

>09ef	00 00		scrptr         .word     $00
>09f1	00 00		colptr         .word     $00
>09f3	01		curcol         .byte     $01
>09f4	0c		brdcol         .byte     $0c
>09f5	00		bkcol          .byte     %00000000
>09f6	01		vicbkcol       .byte     %00000001
>09f7	00		vicbkcol0      .byte     vnoir  ;$0b
>09f8	02		vicbkcol1      .byte     vrouge ;$0b
>09f9	05		vicbkcol2      .byte     vvert  ;$0b
>09fa	06		vicbkcol3      .byte     vbleu  ;$0b
>09fb	00		inverse        .byte     $00
>09fc	00 00 00 00	scraddr        .byte     0,0,0,0,0
>0a00	00
>0a01	00 00 00 00	coladdr        .byte     0,0,0,0,0
>0a05	00
=$00			bkcol0      =         %00000000
=$40			bkcol1      =         %01000000
=$80			bkcol2      =         %10000000
=$c0			bkcol3      =         %11000000
.0a06			scrmaninit
.0a06	08		               php
.0a07	48		               pha
.0a08	a9 15		               lda  #%00010101
.0a0a	8d 18 d0	               sta  $d018
.0a0d	ad 16 d0	               lda  $d016 ; 53270
.0a10	09 10		               ora  #%00010000
.0a12	29 ef		               and  #%11101111
.0a14	8d 16 d0	               sta  $d016 ; 53270
.0a17	ad 11 d0	               lda  $d011
.0a1a	09 40		               ora  #%01000000
.0a1c	8d 11 d0	               sta  $d011     ; 53270
.0a1f	ad f7 09	               lda  vicbkcol0
.0a22	8d 21 d0	               sta  $d021     ; 53281
.0a25	ad f8 09	               lda  vicbkcol1
.0a28	8d 22 d0	               sta  $d022     ; 53282
.0a2b	ad f9 09	               lda  vicbkcol2
.0a2e	8d 23 d0	               sta  $d023     ; 53283
.0a31	ad fa 09	               lda  vicbkcol3
.0a34	8d 24 d0	               sta  $d024     ; 54284
.0a37	a5 00		               lda  bkcol0
.0a39	8d f5 09	               sta  bkcol
.0a3c	20 94 0a	               jsr      cls
.0a3f	68		               pla
.0a40	28		               plp
.0a41	60		               rts
.0a42			curshome
.0a42	08		               php
.0a43	48		               pha
.0a44	a9 00		               lda  #$00
.0a46	8d ef 09	               sta  scrptr
.0a49	a9 04		               lda  #$04
.0a4b	8d f0 09	               sta  scrptr+1
.0a4e	20 7f 0a	               jsr  synccolptr
.0a51	ad f7 09	               lda  vicbkcol0
.0a54	8d 21 d0	               sta  $d021
.0a57	ad f8 09	               lda  vicbkcol1
.0a5a	8d 22 d0	               sta  $d022
.0a5d	ad f9 09	               lda  vicbkcol2
.0a60	8d 23 d0	               sta  $d023
.0a63	ad fa 09	               lda  vicbkcol3
.0a66	8d 24 d0	               sta  $d024
.0a69	68		               pla
.0a6a	28		               plp
.0a6b	60		               rts
.0a6c			incscrptr
.0a6c	08		               php
.0a6d	48		               pha
.0a6e	ee ef 09	               inc  scrptr
.0a71	ad ef 09	               lda  scrptr
.0a74	d0 03		               bne  pasdereport
.0a76	ee f0 09	               inc  scrptr+1
.0a79	20 7f 0a	pasdereport    jsr  synccolptr
.0a7c	68		               pla
.0a7d	28		               plp
.0a7e	60		               rts
.0a7f			synccolptr
.0a7f	08		               php
.0a80	48		               pha
.0a81	ad ef 09	               lda  scrptr
.0a84	8d f1 09	               sta  colptr
.0a87	ad f0 09	               lda  scrptr+1
.0a8a	29 03		               and  #%00000011
.0a8c	09 d8		               ora  #%11011000
.0a8e	8d f2 09	               sta  colptr+1
.0a91	68		               pla
.0a92	28		               plp
.0a93	60		               rts
.0a94			cls
.0a94	20 10 08	               jsr  push
.0a97	a9 00		               lda  #$00
.0a99	8d ef 09	               sta  scrptr
.0a9c	a9 04		               lda  #$04
.0a9e	8d f0 09	               sta  scrptr+1
.0aa1	20 7f 0a	               jsr  synccolptr
.0aa4	20 4b 0c	               jsr  scrptr2zp1
.0aa7	ad f4 09	               lda  brdcol
.0aaa	8d 20 d0	               sta  vborder
.0aad	ad f6 09	               lda  vicbkcol
.0ab0	8d 21 d0	               sta  vbkgrnd
.0ab3	a9 20		               lda  #$20
.0ab5	a2 04		               ldx  #4
.0ab7	a0 00		nextline       ldy  #0
.0ab9	91 fb		nextcar        sta  (zpage1),y
.0abb	a5 fc		               lda  zpage1+1
.0abd	48		               pha
.0abe	29 03		               and  #%00000011
.0ac0	09 d8		               ora  #%11011000
.0ac2	85 fc		               sta  zpage1+1
.0ac4	a9 00		               lda  #0
.0ac6	91 fb		               sta  (zpage1),y
.0ac8	68		               pla
.0ac9	85 fc		               sta  zpage1+1
.0acb	a9 20		               lda  #$20
.0acd	88		               dey
.0ace	d0 e9		               bne  nextcar
.0ad0	e6 fc		               inc  zpage1+1
.0ad2	ca		               dex
.0ad3	d0 e4		               bne  nextcar
.0ad5	a9 00		               lda  #$00
.0ad7	8d ef 09	               sta  scrptr
.0ada	a9 04		               lda  #$04
.0adc	8d f0 09	               sta  scrptr+1
.0adf	20 7f 0a	               jsr  synccolptr
.0ae2	20 4f 08	               jsr  pop
.0ae5	60		               rts
.0ae6			setborder
.0ae6	08		               php
.0ae7	8d f4 09	               sta  brdcol
.0aea	8d 20 d0	               sta  vborder
.0aed	28		               plp
.0aee	60		               rts
.0aef			setinverse
.0aef	08		               php
.0af0	48		               pha
.0af1	a9 80		               lda  #%10000000
.0af3	8d fb 09	               sta  inverse
.0af6	68		               pla
.0af7	28		               plp
.0af8	60		               rts
.0af9			clrinverse
.0af9	08		               php
.0afa	48		               pha
.0afb	a9 00		               lda  #%00000000
.0afd	8d fb 09	               sta  inverse
.0b00	68		               pla
.0b01	28		               plp
.0b02	60		               rts
.0b03			z2putch
.0b03	20 10 08	               jsr  push
.0b06	a0 00		               ldy  #$0
.0b08	b1 fd		               lda  (zpage2),y
.0b0a	20 27 0b	               jsr  putch
.0b0d	20 4f 08	               jsr  pop
.0b10	60		               rts
.0b11			z2puts
.0b11	20 10 08	               jsr  push
.0b14	a0 00		               ldy  #$0
.0b16	b1 fd		nextcar        lda  (zpage2),y
.0b18	f0 09		               beq  endstr
.0b1a	20 03 0b	               jsr  z2putch
.0b1d	20 b9 08	               jsr  inczp2
.0b20	4c 16 0b	               jmp  nextcar
.0b23	20 4f 08	endstr         jsr  pop
.0b26	60		               rts
.0b27			putch
.0b27	20 10 08	               jsr  push
.0b2a	20 4b 0c	               jsr  scrptr2zp1
.0b2d	29 3f		               and  #%00111111
.0b2f	0d f5 09	               ora  bkcol
.0b32	a0 00		               ldy  #0
.0b34	91 fb		               sta  (zpage1),y
.0b36	ae f2 09	               ldx  colptr+1
.0b39	86 fc		               stx  zpage1+1
.0b3b	ad f3 09	               lda  curcol
.0b3e	91 fb		               sta  (zpage1),y
.0b40	20 6c 0a	               jsr  incscrptr
.0b43	20 4f 08	               jsr  pop
.0b46	60		               rts
.0b47			puts
.0b47	20 10 08	               jsr  push
.0b4a	86 fd		               stx  zpage2
.0b4c	84 fe		               sty  zpage2+1
.0b4e	20 11 0b	               jsr  z2puts
.0b51			getout
.0b51	20 4f 08	               jsr  pop
.0b54	60		               rts
.0b55			putsxy
.0b55	20 10 08	               jsr  push
.0b58	86 fd		               stx  zpage2
.0b5a	84 fe		               sty  zpage2+1
.0b5c	a0 00		               ldy  #0
.0b5e	b1 fd		               lda  (zpage2),y
.0b60	aa		               tax
.0b61	20 b9 08	               jsr  inczp2
.0b64	b1 fd		               lda  (zpage2),y
.0b66	a8		               tay
.0b67	20 ca 0b	               jsr  gotoxy
.0b6a	20 b9 08	               jsr  inczp2
.0b6d	20 11 0b	               jsr  z2puts
.0b70	20 4f 08	               jsr  pop
.0b73	60		               rts
.0b74			putscxy
.0b74	20 10 08	               jsr  push
.0b77	86 fd		               stx  zpage2
.0b79	84 fe		               sty  zpage2+1
.0b7b	a0 00		               ldy  #0
.0b7d	b1 fd		               lda  (zpage2),y
.0b7f	20 a5 0b	               jsr  setcurcol
.0b82	20 b9 08	               jsr  inczp2
.0b85	b1 fd		               lda  (zpage2),y
.0b87	29 03		               and  #$03
.0b89	20 ba 0b	               jsr  setbkcol
.0b8c	20 b9 08	               jsr  inczp2
.0b8f	b1 fd		               lda  (zpage2),y
.0b91	aa		               tax
.0b92	20 b9 08	               jsr  inczp2
.0b95	b1 fd		               lda  (zpage2),y
.0b97	a8		               tay
.0b98	20 ca 0b	               jsr  gotoxy
.0b9b	20 b9 08	               jsr  inczp2
.0b9e	20 11 0b	               jsr  z2puts
.0ba1	20 4f 08	               jsr  pop
.0ba4	60		               rts
.0ba5			setcurcol
.0ba5	08		               php
.0ba6	8d f3 09	               sta  curcol
.0ba9	28		               plp
.0baa	60		               rts
.0bab			setvicbkcol
.0bab	08		               php
.0bac	48		               pha
.0bad	8a		               txa
.0bae	29 03		               and  #$03
.0bb0	aa		               tax
.0bb1	68		               pla
.0bb2	9d f7 09	               sta  vicbkcol0,x
.0bb5	9d 21 d0	               sta  $d021,x
.0bb8	28		               plp
.0bb9	60		               rts
.0bba			setbkcol
.0bba	08		               php
.0bbb	48		               pha
.0bbc	0a		               asl
.0bbd	0a		               asl
.0bbe	0a		               asl
.0bbf	0a		               asl
.0bc0	0a		               asl
.0bc1	0a		               asl
.0bc2	29 c0		               and  #$c0
.0bc4	8d f5 09	               sta  bkcol
.0bc7	68		               pla
.0bc8	28		               plp
.0bc9	60		               rts
.0bca			gotoxy
.0bca	20 10 08	               jsr  push
.0bcd	20 42 0a	               jsr  curshome
.0bd0	c0 00		yagain         cpy  #0
.0bd2	f0 09		               beq  setx
.0bd4	a9 28		               lda  #40
.0bd6	20 e8 0b	               jsr  saddscrptr
.0bd9	88		               dey
.0bda	4c d0 0b	               jmp  yagain
.0bdd	8a		setx           txa
.0bde	20 e8 0b	               jsr  saddscrptr
.0be1	20 7f 0a	               jsr  synccolptr
.0be4	20 4f 08	               jsr  pop
.0be7	60		               rts
.0be8			saddscrptr
.0be8	08		               php
.0be9	48		               pha
.0bea	18		               clc
.0beb	6d ef 09	               adc  scrptr
.0bee	8d ef 09	               sta  scrptr
.0bf1	90 03		               bcc  norep
.0bf3	ee f0 09	               inc  scrptr+1
.0bf6	68		norep          pla
.0bf7	28		               plp
.0bf8	60		               rts
.0bf9			scrptr2str
.0bf9	20 10 08	               jsr  push
.0bfc	ad f0 09	               lda  scrptr+1
.0bff	48		               pha
.0c00	20 59 09	               jsr  lsra4bits
.0c03	20 4d 09	               jsr  nib2hex
.0c06	8d fc 09	               sta  scraddr
.0c09	68		               pla
.0c0a	20 59 09	               jsr  lsra4bits
.0c0d	20 4d 09	               jsr  nib2hex
.0c10	8d fd 09	               sta  scraddr+1
.0c13	ad f0 09	               lda  scrptr+1
.0c16	48		               pha
.0c17	20 59 09	               jsr  lsra4bits
.0c1a	20 4d 09	               jsr  nib2hex
.0c1d	8d fc 09	               sta  scraddr
.0c20	68		               pla
.0c21	20 59 09	               jsr  lsra4bits
.0c24	20 4d 09	               jsr  nib2hex
.0c27	8d fd 09	               sta  scraddr+1
.0c2a	ad ef 09	               lda  scrptr
.0c2d	48		               pha
.0c2e	20 59 09	               jsr  lsra4bits
.0c31	20 4d 09	               jsr  nib2hex
.0c34	8d fe 09	               sta  scraddr+2
.0c37	8d 03 0a	               sta  coladdr+2
.0c3a	68		               pla
.0c3b	20 59 09	               jsr  lsra4bits
.0c3e	20 4d 09	               jsr  nib2hex
.0c41	8d ff 09	               sta  scraddr+3
.0c44	8d 04 0a	               sta  coladdr+3
.0c47	20 4f 08	               jsr  pop
.0c4a	60		               rts
.0c4b			scrptr2zp1
.0c4b	08		               php
.0c4c	48		               pha
.0c4d	ad ef 09	               lda  scrptr
.0c50	85 fb		               sta  zpage1
.0c52	ad f0 09	               lda  scrptr+1
.0c55	85 fc		               sta  zpage1+1
.0c57	68		               pla
.0c58	28		               plp
.0c59	60		               rts
.0c5a			colptr2zp1
.0c5a	08		               php
.0c5b	48		               pha
.0c5c	ad f1 09	               lda  colptr
.0c5f	85 fb		               sta  zpage1
.0c61	ad f2 09	               lda  colptr+1
.0c64	85 fc		               sta  zpage1+1
.0c66	68		               pla
.0c67	28		               plp
.0c68	60		               rts
.0c69			scrptr2zp2
.0c69	08		               php
.0c6a	48		               pha
.0c6b	ad ef 09	               lda  scrptr
.0c6e	85 fd		               sta  zpage2
.0c70	ad f0 09	               lda  scrptr+1
.0c73	85 fe		               sta  zpage2+1
.0c75	68		               pla
.0c76	28		               plp
.0c77	60		               rts
.0c78			colptr2zp2
.0c78	08		               php
.0c79	48		               pha
.0c7a	ad f1 09	               lda  colptr
.0c7d	85 fd		               sta  zpage2
.0c7f	ad f2 09	               lda  colptr+1
.0c82	85 fe		               sta  zpage2+1
.0c84	68		               pla
.0c85	28		               plp
.0c86	60		               rts
.0c87			putrahex
.0c87	08		               php
.0c88	48		               pha
.0c89	20 60 09	               jsr     a2hex
.0c8c	a2 44		               ldx     #<a2hexcol
.0c8e	a0 09		               ldy     #>a2hexcol
.0c90	20 47 0b	               jsr     puts
.0c93	68		               pla
.0c94	28		               plp
.0c95	60		               rts
.0c96			putrahexxy
.0c96	08		               php
.0c97	48		               pha
.0c98	20 60 09	               jsr  a2hex
.0c9b	a9 45		               lda  #<a2hexpos
.0c9d	a0 09		               ldy  #>a2hexpos
.0c9f	20 55 0b	               jsr  putsxy
.0ca2	68		               pla
.0ca3	28		               plp
.0ca4	60		               rts
.0ca5			putrahexcxy
.0ca5	08		               php
.0ca6	68		               pla
.0ca7	20 60 09	               jsr  a2hex
.0caa	a9 45		               lda  #<a2hexpos
.0cac	a0 09		               ldy  #>a2hexpos
.0cae	20 74 0b	               jsr  putscxy
.0cb1	68		               pla
.0cb2	28		               plp
.0cb3	60		               rts

;******  Return to file: agp-0001.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_showregs.asm"

.0cb4			showregs
=24			line    =   24
=0			coln    =   0
=$01			colr    =   vblanc
=$c0			bkcol   =   bkcol3
.0cb4	08		                php
.0cb5	8d ec 0d	                sta  rega
.0cb8	68		                pla
.0cb9	8d ef 0d	                sta  regp
.0cbc	8e ed 0d	                stx  regx
.0cbf	8c ee 0d	                sty  regy
.0cc2	ba		                tsx
.0cc3	8e f0 0d	                stx  regs
.0cc6	68		                pla
.0cc7	8d f2 0d	                sta  regpcl
.0cca	8d f3 0d	                sta  regpcl2
.0ccd	68		                pla
.0cce	8d f1 0d	                sta  regpch
.0cd1	ad ec 0d	                lda  rega
.0cd4	48		                pha
.0cd5	20 4d 09	                jsr  nib2hex
.0cd8	8d af 0d	                sta  vala+1
.0cdb	68		                pla
.0cdc	20 59 09	                jsr  lsra4bits
.0cdf	20 4d 09	                jsr  nib2hex
.0ce2	8d ae 0d	                sta  vala
.0ce5	ad ee 0d	                lda  regy
.0ce8	48		                pha
.0ce9	20 4d 09	                jsr  nib2hex
.0cec	8d c5 0d	                sta  valy+1
.0cef	68		                pla
.0cf0	20 59 09	                jsr  lsra4bits
.0cf3	20 4d 09	                jsr  nib2hex
.0cf6	8d c4 0d	                sta  valy
.0cf9	ad ed 0d	                lda  regx
.0cfc	48		                pha
.0cfd	20 4d 09	                jsr  nib2hex
.0d00	8d ba 0d	                sta  valx+1
.0d03	68		                pla
.0d04	20 59 09	                jsr  lsra4bits
.0d07	20 4d 09	                jsr  nib2hex
.0d0a	8d b9 0d	                sta  valx
.0d0d	ad ef 0d	                lda  regp
.0d10	48		                pha
.0d11	20 4d 09	                jsr  nib2hex
.0d14	8d d0 0d	                sta  valp+1
.0d17	68		                pla
.0d18	20 59 09	                jsr  lsra4bits
.0d1b	20 4d 09	                jsr  nib2hex
.0d1e	8d cf 0d	                sta  valp
.0d21	ad f0 0d	                lda  regs
.0d24	48		                pha
.0d25	20 4d 09	                jsr  nib2hex
.0d28	8d db 0d	                sta  vals+1
.0d2b	68		                pla
.0d2c	20 59 09	                jsr  lsra4bits
.0d2f	20 4d 09	                jsr  nib2hex
.0d32	8d da 0d	                sta  vals
.0d35	ad f1 0d	                lda  regpch
.0d38	48		                pha
.0d39	20 4d 09	                jsr  nib2hex
.0d3c	8d e7 0d	                sta  valpch+1
.0d3f	68		                pla
.0d40	20 59 09	                jsr  lsra4bits
.0d43	20 4d 09	                jsr  nib2hex
.0d46	8d e6 0d	                sta  valpch
.0d49	ad f2 0d	                lda  regpcl
.0d4c	48		                pha
.0d4d	20 4d 09	                jsr  nib2hex
.0d50	8d e9 0d	                sta  valpcl+1
.0d53	68		                pla
.0d54	20 59 09	                jsr  lsra4bits
.0d57	20 4d 09	                jsr  nib2hex
.0d5a	8d e8 0d	                sta  valpcl
.0d5d	20 ef 0a	                jsr  setinverse
.0d60	78		                sei
.0d61	a2 a6		                ldx  #<srega
.0d63	a0 0d		                ldy  #>srega+1
.0d65	20 74 0b	                jsr  putscxy
.0d68	a2 b1		                ldx  #<sregx
.0d6a	a0 0d		                ldy  #>sregx+1
.0d6c	20 74 0b	                jsr  putscxy
.0d6f	a2 bc		                ldx  #<sregy
.0d71	a0 0d		                ldy  #>sregy+1
.0d73	20 74 0b	                jsr  putscxy
.0d76	a2 c7		                ldx  #<sregp
.0d78	a0 0d		                ldy  #>sregp+1
.0d7a	20 74 0b	                jsr  putscxy
.0d7d	a2 d2		                ldx  #<sregs
.0d7f	a0 0d		                ldy  #>sregs+1
.0d81	20 74 0b	                jsr  putscxy
.0d84	a2 dd		                ldx  #<sregpc
.0d86	a0 0d		                ldy  #>sregpc+1
.0d88	20 74 0b	                jsr  putscxy
.0d8b	58		                cli
.0d8c	20 f9 0a	                jsr  clrinverse
.0d8f	ad f1 0d	                lda  regpch
.0d92	48		                pha
.0d93	ad f2 0d	                lda  regpcl
.0d96	48		                pha
.0d97	ac ee 0d	                ldy  regy
.0d9a	ae ed 0d	                ldx  regx
.0d9d	ad ef 0d	                lda  regp
.0da0	48		                pha
.0da1	ad ec 0d	                lda  rega
.0da4	28		                plp
.0da5	60		                rts
>0da6	01 c0 00 18	srega   .byte   colr,bkcol,coln,line
>0daa	20 41 3a 24	        .text   ' a:$' ;4,24
>0dae	00 00 00	vala    .byte   0,0,0
>0db1	01 c0 06 18	sregx   .byte   colr,bkcol,coln+6,line
>0db5	20 58 3a 24	        .text   ' x:$' ;4,24
>0db9	00 00 00	valx    .byte   0,0,0
>0dbc	01 c0 0c 18	sregy   .byte   colr,bkcol,coln+12,line
>0dc0	20 59 3a 24	        .text   ' y:$' ;4,24
>0dc4	00 00 00	valy    .byte   0,0,0
>0dc7	01 c0 12 18	sregp   .byte   colr,bkcol,coln+18,line
>0dcb	20 50 3a 24	        .text   ' p:$' ;4,24
>0dcf	00 00 00	valp    .byte   0,0,0
>0dd2	01 c0 18 18	sregs   .byte   colr,bkcol,coln+24,line
>0dd6	20 53 3a 24	        .text   ' s:$' ;4,24
>0dda	00 00 00	vals    .byte   0,0,0
>0ddd	01 c0 1e 18	sregpc  .byte   colr,bkcol,coln+30,line
>0de1	20 50 43 3a	        .text   ' pc:$' ;4,24
>0de5	24
>0de6	00 00		valpch  .byte   0,0
>0de8	00 00 20 00	valpcl  .byte   0,0,32,0
>0dec	00		rega    .byte   0
>0ded	00		regx    .byte   0
>0dee	00		regy    .byte   0
>0def	00		regp    .byte   0
>0df0	00		regs    .byte   0
>0df1	00		regpch  .byte   0
>0df2	00		regpcl  .byte   0
>0df3	00		regpcl2 .byte   0

;******  Return to file: agp-0001.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_joystick.asm"

=$dc00			js_2port       =    $dc00
=$dc01			js_1port       =    $dc01
=$dc02			js_2dir        =    $dc02
=$dc03			js_1dir        =    $dc03
=2			js_xoffset     =    2
=2			js_yoffset     =    2
=0			js_location    =    0
.0df4			js_init
.0df4	20 10 08	               jsr  push
.0df7	ad 03 dc	               lda  js_1dir
.0dfa	29 e0		               and  #$e0
.0dfc	8d 03 dc	               sta  js_1dir
.0dff	ad 02 dc	               lda  js_2dir
.0e02	29 e0		               and  #$e0
.0e04	8d 02 dc	               sta  js_2dir
.0e07	20 4f 08	               jsr  pop
.0e0a	60		               rts
.0e0b			js_scan
.0e0b	20 12 0e	               jsr  js_1scan
.0e0e	20 c1 0e	               jsr  js_2scan
.0e11	60		               rts
.0e12			js_1scan
.0e12	20 10 08	               jsr  push
.0e15	ad 01 dc	               lda  js_1port
.0e18	29 1f		               and  #$1f
.0e1a	c9 00		               cmp  #$00
.0e1c	d0 03		               bne  p1scan
.0e1e	4c b1 0e	               jmp  port1_out
.0e21	49 1f		p1scan         eor  #$1f
.0e23	18		               clc
.0e24	4a		js_1b0         lsr
.0e25	90 14		               bcc  js_1b1
.0e27	48		               pha
.0e28	ee db 11	               inc  js_1flag
.0e2b	ad d7 11	               lda  js_1pixy
.0e2e	38		               sec
.0e2f	e9 02		               sbc  #js_yoffset
.0e31	c9 f0		               cmp  #$f0
.0e33	90 02		               bcc  sto1ym
.0e35	a9 00		               lda  #$00
.0e37	8d d7 11	sto1ym         sta  js_1pixy
.0e3a	68		               pla
.0e3b	4a		js_1b1         lsr
.0e3c	90 14		               bcc  js_1b2
.0e3e	48		               pha
.0e3f	ee db 11	               inc  js_1flag
.0e42	ad d7 11	               lda  js_1pixy
.0e45	18		               clc
.0e46	69 02		               adc  #js_yoffset
.0e48	c9 c7		               cmp  #199
.0e4a	90 02		               bcc  sto1yp
.0e4c	a9 c7		               lda  #199
.0e4e	8d d7 11	sto1yp         sta  js_1pixy
.0e51	68		               pla
.0e52	4a		js_1b2         lsr
.0e53	90 20		               bcc  js_1b3
.0e55	48		               pha
.0e56	ee db 11	               inc  js_1flag
.0e59	ad d5 11	               lda  js_1pixx
.0e5c	0d d6 11	               ora  js_1pixx+1
.0e5f	f0 13		               beq  js_1b2out
.0e61	38		               sec
.0e62	ad d5 11	               lda  js_1pixx
.0e65	e9 02		               sbc  #js_xoffset
.0e67	8d d5 11	               sta  js_1pixx
.0e6a	b0 08		               bcs  js_1b2out
.0e6c	ad d6 11	               lda  js_1pixx+1
.0e6f	f0 03		               beq  js_1b2out
.0e71	ce d6 11	               dec  js_1pixx+1
.0e74	68		js_1b2out      pla
.0e75	4a		js_1b3         lsr
.0e76	90 22		               bcc  js_1b4
.0e78	48		               pha
.0e79	ee db 11	               inc  js_1flag
.0e7c	ad d6 11	               lda  js_1pixx+1
.0e7f	f0 0a		               beq  incj1x
.0e81	ad d5 11	               lda  js_1pixx
.0e84	c9 3c		               cmp  #$40-4
.0e86	30 03		               bmi  incj1x
.0e88	4c 99 0e	               jmp  js_1b3out
.0e8b	18		incj1x         clc
.0e8c	ad d5 11	               lda  js_1pixx
.0e8f	69 02		               adc  #js_xoffset
.0e91	8d d5 11	               sta  js_1pixx
.0e94	90 03		               bcc  js_1b3out
.0e96	ee d6 11	               inc  js_1pixx+1
.0e99	68		js_1b3out      pla
.0e9a	4a		js_1b4          lsr                     ;Estce le bbouton fire (F)
.0e9b	90 14		                bcc     port1_out       ;Oui!
.0e9d	ee db 11	                inc     js_1flag
.0ea0	ee da 11	                inc     js_1fire        ; on augmente le nombre de tir
.0ea3	a2 01		js_1wait        ldx     #$01
.0ea5	a0 ff		                ldy     #$ff
.0ea7	c8		js_1rel         iny
.0ea8	ad 01 dc	                lda     js_1port
.0eab	49 ff		                eor     #$ff
.0ead	29 10		                and     #$10
.0eaf	d0 f6		                bne     js_1rel         ; des boutons
.0eb1	ad db 11	port1_out       lda     js_1flag
.0eb4	f0 08		                beq     out
.0eb6	20 b3 0f	                jsr     js_1correct
.0eb9	a9 00		                lda     #0
.0ebb	8d db 11	                sta     js_1flag
.0ebe	20 4f 08	out             jsr     pop
.0ec1			js_2scan
.0ec1	20 10 08	                jsr     push
.0ec4	ad 00 dc	port2           lda     js_2port
.0ec7	29 1f		                and     #$1f
.0ec9	c9 1f		                cmp	#$1f
.0ecb	d0 03		                bne     p2scan
.0ecd	4c 84 0f	                jmp     port2_out
.0ed0	49 1f		p2scan          eor     #$1f
.0ed2	a2 02		                ldx     #$02
.0ed4	18		                clc
.0ed5	4a		js_2b0          lsr                     ;On decale js_2 bit 0 dans C
.0ed6	90 14		                bcc     js_2b1          ;Est-ce vers le haut (U)
.0ed8	48		                pha                     ;On stack la valeur
.0ed9	ee e6 11	                inc     js_2flag
.0edc	ad e2 11	                lda     js_2pixy        ;Oui!
.0edf	38		                sec                     ;On place la carry a 1
.0ee0	e9 02		                sbc     #js_yoffset     ;On reduit
.0ee2	c9 f0		                cmp     #$f0
.0ee4	90 02		                bcc     sto2ym
.0ee6	a9 00		                lda     #$00
.0ee8	8d e2 11	sto2ym          sta     js_2pixy        ; le y
.0eeb	68		                pla                     ;On recupere la valeur
.0eec	4a		js_2b1          lsr                     ;On decale js_2 bit 0 dans C
.0eed	90 14		                bcc     js_2b2          ;Est-ce vers le bas (D)
.0eef	48		                pha                     ;On stack la valeur
.0ef0	ee e6 11	                inc     js_2flag
.0ef3	ad e2 11	                lda     js_2pixy        ;Oui!
.0ef6	18		                clc                     ;On place la carry a 0
.0ef7	69 02		                adc     #js_yoffset     ;On augmente
.0ef9	c9 c7		                cmp     #199
.0efb	90 02		                bcc     sto2yp
.0efd	a9 c7		                lda     #199
.0eff	8d e2 11	sto2yp          sta     js_2pixy        ; le y
.0f02	68		                pla                     ;On recupere la valeur
.0f03	4a		js_2b2          lsr                     ;On decale js_2 bit 0 dans C
.0f04	90 20		                bcc     js_2b3          ;Est-ce vers la gauche (L)
.0f06	48		                pha                     ;On stack la valeur
.0f07	ee e6 11	                inc     js_2flag
.0f0a	ad e0 11	                lda     js_2pixx        ;Oui!
.0f0d	0d e1 11	                ora     js_2pixx+1
.0f10	f0 13		                beq     js_2b2out
.0f12	38		                sec                     ;On place la carry a 1
.0f13	ad e0 11	                lda     js_2pixx        ;Oui!
.0f16	e9 02		                sbc     #js_xoffset     ;On diminue
.0f18	8d e0 11	                sta     js_2pixx        ; le X
.0f1b	b0 08		                bcs     js_2b2out       ; de offset
.0f1d	ad e1 11	                lda     js_2pixx+1
.0f20	f0 03		                beq     js_2b2out
.0f22	ce e1 11	                dec     js_2pixx+1      ; sur 16 bits
.0f25	68		js_2b2out       pla                     ;On recupere la valeur
.0f26	4a		js_2b3          lsr                     ;On decale js_2 bit 0 dans C
.0f27	90 22		                bcc     js_2b4          ;Est-ce vers la droite (R)
.0f29	48		                pha                     ;On stack la valeur
.0f2a	ee e6 11	                inc     js_2flag
.0f2d	ad e1 11	                lda     js_2pixx+1
.0f30	f0 0a		                beq     incj2x
.0f32	ad e0 11	                lda     js_2pixx
.0f35	c9 3e		                cmp     #$40-js_xoffset
.0f37	30 03		                bmi     incj2x
.0f39	4c 4a 0f	                jmp     js_2b3out
.0f3c	18		incj2x          clc                     ;On place la carry a 0
.0f3d	ad e0 11	                lda     js_2pixx        ;Oui!
.0f40	69 02		                adc     #js_xoffset     ;On augmente
.0f42	8d e0 11	                sta     js_2pixx        ; le X
.0f45	90 03		                bcc     js_2b3out       ; de offset
.0f47	ee e1 11	                inc     js_2pixx+1      ; sur 16 bits
.0f4a	68		js_2b3out       pla                     ;On recupere la valeur
.0f4b	4a		js_2b4          lsr                     ;Estce le bbouton fire (F)
.0f4c	90 36		                bcc     port2_out       ;Oui!
.0f4e	ee e6 11	                inc     js_2flag
.0f51	ee e5 11	                inc     js_2fire        ; on augmente le nombre de tir
.0f54	a9 01		                lda     #%00000001
.0f56	8d ea 11	                sta     js_2events
.0f59	ad e0 11	                lda     js_2pixx
.0f5c	8d e7 11	                sta     js_2clickx
.0f5f	ad e1 11	                lda     js_2pixx+1
.0f62	8d e8 11	                sta     js_2clickx+1
.0f65	ad e2 11	                lda     js_2pixy
.0f68	8d e9 11	                sta     js_2clicky
.0f6b	ad 4c 12	                lda     js_2val16a+1
.0f6e	49 40		                eor     #%01000000
.0f70	8d 4c 12	                sta     js_2val16a+1
.0f73	a2 00		js_2wait        ldx     #$00
.0f75	a0 ff		                ldy     #$ff
.0f77	c8		js_2rel         iny
.0f78	d0 01		                bne     sr1
.0f7a	e8		                inx
.0f7b			sr1
.0f7b	ad 00 dc	                lda     js_2port
.0f7e	49 ff		                eor     #$ff
.0f80	29 10		                and     #$10
.0f82	d0 f3		                bne     js_2rel         ; des boutons
.0f84	ad e6 11	port2_out       lda     js_2flag
.0f87	f0 08		                beq     out
.0f89	20 e8 0f	                jsr     js_2correct
.0f8c	a9 00		                lda     #0
.0f8e	8d e6 11	                sta     js_2flag
.0f91	20 4f 08	out             jsr     pop
.0f94			js_corrector
.0f94	08		                php
.0f95	48		                pha
.0f96	ad db 11	                lda     js_1flag
.0f99	f0 08		                beq     check2
.0f9b	20 b3 0f	                jsr     js_1correct
.0f9e	a9 00		                lda     #0
.0fa0	8d db 11	                sta     js_1flag
.0fa3	ad e6 11	check2          lda     js_2flag
.0fa6	f0 08		                beq     no_update
.0fa8	20 e8 0f	                jsr     js_2correct
.0fab	a9 00		                lda     #0
.0fad	8d e6 11	                sta     js_2flag
.0fb0	68		no_update       pla
.0fb1	28		                plp
.0fb2	60		                rts
.0fb3			js_1correct
.0fb3	08		                php
.0fb4	48		                pha
.0fb5	ad d5 11	                lda     js_1pixx
.0fb8	8d e6 0f	                sta     vallsb
.0fbb	ad d6 11	                lda     js_1pixx+1
.0fbe	6a		                ror                     ; ex = %0000000100000001 = 257 pixel
.0fbf	6e e6 0f	                ror     vallsb          ; Cnnnnnnn      On divise par 8 pc les
.0fc2	4e e6 0f	                lsr     vallsb          ; 0Cnnnnnn      caracteres de 8 pixels
.0fc5	4e e6 0f	                lsr     vallsb          ; 00Cnnnnn
.0fc8	ad e6 0f	                lda     vallsb          ; devient = %00100000 = 32
.0fcb	8d d8 11	                sta     js_1x
.0fce	ad d7 11	                lda     js_1pixy
.0fd1	8d e6 0f	                sta     vallsb
.0fd4	4e e6 0f	                lsr     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.0fd7	4e e6 0f	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.0fda	4e e6 0f	                lsr     vallsb          ; 00Cnnnnn
.0fdd	ad e6 0f	                lda     vallsb          ; devient = %00100000 = 32
.0fe0	8d d9 11	                sta     js_1y
.0fe3	68		                pla
.0fe4	28		                plp
.0fe5	60		                rts
>0fe6	00		vallsb          .byte     0
>0fe7	00		regx            .byte     0
.0fe8			js_2correct
.0fe8	08		                php
.0fe9	48		                pha
.0fea	ad e0 11	                lda     js_2pixx
.0fed	8d 1b 10	                sta     vallsb
.0ff0	ad e1 11	                lda     js_2pixx+1
.0ff3	6a		                ror                     ; ex = %0000000100000001 = 257 pixel
.0ff4	6e 1b 10	                ror     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.0ff7	4e 1b 10	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.0ffa	4e 1b 10	                lsr     vallsb          ; 00Cnnnnn
.0ffd	ad 1b 10	                lda     vallsb          ; devient = %00100000 = 32
.1000	8d e3 11	                sta     js_2x
.1003	ad e2 11	                lda     js_2pixy
.1006	8d 1b 10	                sta     vallsb
.1009	4e 1b 10	                lsr     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.100c	4e 1b 10	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.100f	4e 1b 10	                lsr     vallsb          ; 00Cnnnnn
.1012	ad 1b 10	                lda     vallsb          ; devient = %00100000 = 32
.1015	8d e4 11	                sta     js_2y
.1018	68		                pla
.1019	28		                plp
.101a	60		                rts
>101b	00		vallsb          .byte     0
>101c	00		regx            .byte     0
.101d			js_showvals
.101d	20 ad 10	                jsr     js_2showvals
.1020	60		                rts
.1021			js_1showvals
.1021	20 10 08	                jsr     push
.1024	ad d8 11	                lda     js_1x
.1027	20 60 09	                jsr     a2hex
.102a	ad 48 09	                lda     a2hexstr+1
.102d	8d fe 11	                sta     js_1val8+19
.1030	ad 49 09	                lda     a2hexstr+2
.1033	8d ff 11	                sta     js_1val8+20
.1036	ad d5 11	                lda     js_1pixx
.1039	20 60 09	                jsr     a2hex
.103c	ad 48 09	                lda     a2hexstr+1
.103f	8d 1d 12	                sta     js_1val16+14
.1042	ad 49 09	                lda     a2hexstr+2
.1045	8d 1e 12	                sta     js_1val16+15
.1048	ad d6 11	                lda     js_1pixx+1
.104b	20 60 09	                jsr     a2hex
.104e	ad 48 09	                lda     a2hexstr+1
.1051	8d 1b 12	                sta     js_1val16+12
.1054	ad 49 09	                lda     a2hexstr+2
.1057	8d 1c 12	                sta     js_1val16+13
.105a	ad d9 11	                lda     js_1y
.105d	20 60 09	                jsr     a2hex
.1060	ad 48 09	                lda     a2hexstr+1
.1063	8d 02 12	                sta     js_1val8+23
.1066	ad 49 09	                lda     a2hexstr+2
.1069	8d 03 12	                sta     js_1val8+24
.106c	ad d7 11	                lda     js_1pixy
.106f	20 60 09	                jsr     a2hex
.1072	ad 48 09	                lda     a2hexstr+1
.1075	8d 23 12	                sta     js_1val16+20
.1078	ad 49 09	                lda     a2hexstr+2
.107b	8d 24 12	                sta     js_1val16+21
.107e	a9 00		                lda     #0
.1080	20 60 09	                jsr     a2hex
.1083	ad 48 09	                lda     a2hexstr+1
.1086	8d 21 12	                sta     js_1val16+18
.1089	ad 49 09	                lda     a2hexstr+2
.108c	8d 22 12	                sta     js_1val16+19
.108f	ad da 11	                lda     js_1fire
.1092	20 60 09	                jsr     a2hex
.1095	ad 49 09	                lda     a2hexstr+2
.1098	8d 0c 12	                sta     js_1val8+33
.109b	a2 eb		                ldx     #<js_1val8
.109d	a0 11		                ldy     #>js_1val8
.109f	20 74 0b	                jsr     putscxy
.10a2	a2 0f		                ldx     #<js_1val16
.10a4	a0 12		                ldy     #>js_1val16
.10a6	20 74 0b	                jsr     putscxy
.10a9	20 4f 08	                jsr     pop
.10ac	60		                rts
.10ad			js_2showvals
.10ad	20 10 08	                jsr     push                    ; stack : y, x, a, flg
.10b0	ad e3 11	                lda     js_2x
.10b3	20 60 09	                jsr     a2hex
.10b6	ad 48 09	                lda     a2hexstr+1
.10b9	8d 3a 12	                sta     js_2val8+19
.10bc	ad 49 09	                lda     a2hexstr+2
.10bf	8d 3b 12	                sta     js_2val8+20
.10c2	ad e7 11	                lda     js_2clickx
.10c5	20 60 09	                jsr     a2hex
.10c8	ad 48 09	                lda     a2hexstr+1
.10cb	8d 68 12	                sta     js_2val16+14
.10ce	ad 49 09	                lda     a2hexstr+2
.10d1	8d 69 12	                sta     js_2val16+15
.10d4	ad e8 11	                lda     js_2clickx+1
.10d7	20 60 09	                jsr     a2hex
.10da	ad 48 09	                lda     a2hexstr+1
.10dd	8d 66 12	                sta     js_2val16+12
.10e0	ad 49 09	                lda     a2hexstr+2
.10e3	8d 67 12	                sta     js_2val16+13
.10e6	ad e4 11	                lda     js_2y
.10e9	20 60 09	                jsr     a2hex
.10ec	ad 48 09	                lda     a2hexstr+1
.10ef	8d 3e 12	                sta     js_2val8+23
.10f2	ad 49 09	                lda     a2hexstr+2
.10f5	8d 3f 12	                sta     js_2val8+24
.10f8	ad e9 11	                lda     js_2clicky
.10fb	20 60 09	                jsr     a2hex
.10fe	ad 48 09	                lda     a2hexstr+1
.1101	8d 6e 12	                sta     js_2val16+20
.1104	ad 49 09	                lda     a2hexstr+2
.1107	8d 6f 12	                sta     js_2val16+21
.110a	a9 00		                lda     #0
.110c	20 60 09	                jsr     a2hex
.110f	ad 48 09	                lda     a2hexstr+1
.1112	8d 6c 12	                sta     js_2val16+18
.1115	ad 49 09	                lda     a2hexstr+2
.1118	8d 6d 12	                sta     js_2val16+19
.111b	ad e5 11	                lda     js_2fire
.111e	20 60 09	                jsr     a2hex
.1121	ad 49 09	                lda     a2hexstr+2
.1124	8d 48 12	                sta     js_2val8+33
.1127	a2 27		                ldx     #<js_2val8
.1129	a0 12		                ldy     #>js_2val8
.112b	20 74 0b	                jsr     putscxy
.112e	a2 4b		                ldx     #<js_2val16a
.1130	a0 12		                ldy     #>js_2val16a
.1132	20 74 0b	                jsr     putscxy
.1135	a2 5a		                ldx     #<js_2val16
.1137	a0 12		                ldy     #>js_2val16
.1139	20 74 0b	                jsr     putscxy
.113c	20 4f 08	                jsr     pop
.113f	60		                rts
.1140			js_updatecurs
.1140	20 10 08	                jsr     push
.1143	ad e3 11	running         lda     js_2x
.1146	cd cf 11	                cmp     js_x
.1149	f0 06		                beq     chky
.114b	8d cf 11	                sta     js_x
.114e	ee a2 11	                inc     flag
.1151	ad e4 11	chky            lda     js_2y
.1154	cd d0 11	                cmp     js_y
.1157	f0 06		                beq     chkflag
.1159	8d d0 11	                sta     js_y
.115c	ee a2 11	                inc     flag
.115f	ad a2 11	chkflag         lda     flag
.1162	f0 1e		                beq     showit
.1164	ae d1 11	                ldx     js_oldx
.1167	ac d2 11	                ldy     js_oldy
.116a	20 a3 11	                jsr     js_eoraddrxy
.116d	ae cf 11	                ldx     js_x
.1170	ac d0 11	                ldy     js_y
.1173	20 a3 11	                jsr     js_eoraddrxy
.1176	ad cf 11	                lda     js_x
.1179	8d d1 11	                sta     js_oldx
.117c	ad d0 11	                lda     js_y
.117f	8d d2 11	                sta     js_oldy
.1182	a9 00		showit          lda     #0
.1184	8d a2 11	                sta     flag
.1187	8d 3c 09	                sta     addr1
.118a	a9 04		                lda     #$04
.118c	8d 3d 09	                sta     addr1+1
.118f	ae cf 11	                ldx     js_x
.1192	ac d0 11	                ldy     js_y
.1195	20 02 09	                jsr     xy2addr
.1198	ac 3e 09	                ldy     addr2
.119b	ae 3f 09	                ldx     addr2+1
.119e	20 4f 08	                jsr pop
.11a1	60		                rts
>11a2	00		flag            .byte   0
.11a3			js_eoraddrxy
.11a3	20 10 08	                jsr     push
.11a6	20 e4 08	                jsr     savezp2
.11a9	a9 04		                lda     #$04
.11ab	8d 3d 09	                sta     addr1+1
.11ae	a9 00		                lda     #0
.11b0	8d 3c 09	                sta     addr1
.11b3	20 02 09	                jsr     xy2addr
.11b6	ac 3e 09	                ldy     addr2
.11b9	84 fd		                sty     zpage2
.11bb	ae 3f 09	                ldx     addr2+1
.11be	86 fe		                stx     zpage2+1
.11c0	a0 00		                ldy     #0
.11c2	b1 fd		                lda     (zpage2),y
.11c4	49 40		                eor     #%01000000
.11c6	91 fd		                sta     (zpage2),y
.11c8	20 f3 08	                jsr     restzp2
.11cb	20 4f 08	                jsr     pop
.11ce	60		                rts
>11cf	00		js_x            .byte   0
>11d0	00		js_y            .byte   0
>11d1	ff		js_oldx         .byte   $ff
>11d2	ff		js_oldy         .byte   $ff
>11d3	00		js_oldcar       .byte   0
>11d4	00		js_oldcol       .byte   0
>11d5	00 00		js_1pixx        .word   0
>11d7	00		js_1pixy        .byte   0
>11d8	00		js_1x           .byte   0
>11d9	00		js_1y           .byte   0
>11da	00		js_1fire        .byte   0
>11db	00		js_1flag        .byte   0
>11dc	00 00		js_1clickx      .word   0
>11de	00		js_1clicky      .byte   0
>11df	00		js_1events      .byte   0
>11e0	00 00		js_2pixx        .word   0
>11e2	00		js_2pixy        .byte   0
>11e3	00		js_2x           .byte   0
>11e4	00		js_2y           .byte   0
>11e5	00		js_2fire        .byte   0
>11e6	00		js_2flag        .byte   0
>11e7	00 00		js_2clickx      .word   0
>11e9	00		js_2clicky      .byte   0
>11ea	00		js_2events      .byte   0
=$03			js_txtcol       =       vcyan
=$00			js_txtbak       =       bkcol0
>11eb	03 00 04 05	js_1val8        .byte     js_txtcol,js_txtbak,4,5
>11ef	d0 4f 52 54	                .text   "Port 1 (x,y):($00,$00) Fire:(0)"
>11f3	20 31 20 28 58 2c 59 29 3a 28 24 30 30 2c 24 30
>1203	30 29 20 c6 49 52 45 3a 28 30 29
>120e	00		                .byte   0
>120f	03 00 0b 07	js_1val16       .byte   js_txtcol,js_txtbak,11,7
>1213	28 58 2c 59	                .text   "(x,y):($0000,$0000)"
>1217	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29
>1226	00		                .byte   0
>1227	03 00 04 0a	js_2val8        .byte   js_txtcol,js_txtbak,4,10
>122b	c3 41 52 d0	                .text   "CarPos (x,y):($00,$00) Fire:(0)"
>122f	4f 53 20 28 58 2c 59 29 3a 28 24 30 30 2c 24 30
>123f	30 29 20 c6 49 52 45 3a 28 30 29
>124a	00		                .byte   0
>124b	01 00 04 0c	js_2val16a      .byte   vblanc,js_txtbak,4,12
>124f	c3 4c 49 43	                .text   "Click pos."
>1253	4b 20 50 4f 53 2e
>1259	00		                .byte   0
>125a	03 00 10 0c	js_2val16       .byte   js_txtcol,js_txtbak,16,12
>125e	28 58 2c 59	                .text   "(x,y):($0000,$0000)"
>1262	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29
>1271	00		                .byte   0

;******  Return to file: agp-0001.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_spriteman.asm"

.1272			sprt_init
.1272	20 10 08	                jsr     push
.1275	ad c7 12	                lda     sprt_ptr
.1278	20 a9 13	                jsr     sprt_loadptr
.127b	20 c6 08	                jsr     savezp1
.127e	20 e4 08	                jsr     savezp2
.1281	ad 15 d0	                lda     vic+$15 ; enable sprite 2
.1284	09 04		                ora     #%00000100
.1286	8d 15 d0	                sta     vic+$15
.1289	a9 0d		                lda     #$0d
.128b	8d fa 07	                sta     $7fa
.128e	ad 85 16	                lda     sprt_ptr0
.1291	85 fb		                sta     zpage1
.1293	ad 86 16	                lda     sprt_ptr0+1
.1296	85 fc		                sta     zpage1+1
.1298	a9 40		                lda     #$40
.129a	85 fd		                sta     zpage2
.129c	a9 03		                lda     #$03
.129e	85 fe		                sta     zpage2+1
.12a0	a0 41		                ldy     #65
.12a2	b1 fb		                lda     (zpage1),y      ; sprite y offset
.12a4	8d ec 13	                sta     sprt_yoffset
.12a7	88		                dey
.12a8	b1 fb		                lda     (zpage1),y      ; sprite x offset
.12aa	8d eb 13	                sta     sprt_xoffset
.12ad	88		                dey
.12ae	b1 fb		                lda     (zpage1),y      ; sprite color
.12b0	8d 29 d0	                sta     $d029
.12b3	88		                dey
.12b4	a0 3e		                ldy     #62
.12b6	b1 fb		nextbyte        lda     (zpage1),y
.12b8	91 fd		                sta     (zpage2),y
.12ba	88		                dey
.12bb	d0 f9		                bne     nextbyte
.12bd	20 d5 08	                jsr     restzp1
.12c0	20 f3 08	                jsr     restzp2
.12c3	20 4f 08	                jsr     pop
.12c6	60		                rts
>12c7	01		sprt_ptr        .byte   $01
.12c8			sprt_calcpos
.12c8	20 10 08	                jsr     push
.12cb	a9 00		                lda     #0
.12cd	8d ee 13	                sta     sprt_x+1
.12d0	8d f0 13	                sta     sprt_y+1
.12d3	ad e1 11	                lda     js_2pixx+1
.12d6	18		                clc
.12d7	2a		                rol
.12d8	2a		                rol
.12d9	8d ee 13	                sta     sprt_x+1
.12dc	ad e0 11	                lda     js_2pixx
.12df	18		                clc
.12e0	6d eb 13	                adc     sprt_xoffset
.12e3	8d ed 13	                sta     sprt_x
.12e6	90 08		                bcc     norepx
.12e8	ad ee 13	                lda     sprt_x+1
.12eb	09 04		                ora     #$04
.12ed	8d ee 13	                sta     sprt_x+1
.12f0	ad e2 11	norepx          lda     js_2pixy
.12f3	18		                clc
.12f4	6d ec 13	                adc     sprt_yoffset
.12f7	8d ef 13	                sta     sprt_y
.12fa	20 4f 08	                jsr     pop
.12fd	60		                rts
.12fe			sprt_move
.12fe	20 10 08	                jsr     push
.1301	20 c8 12	                jsr     sprt_calcpos
.1304	ad ed 13	                lda     sprt_x
.1307	8d 04 d0	                sta     vic+$04
.130a	ad ee 13	                lda     sprt_x+1
.130d	8d 10 d0	                sta     vic+$10
.1310	ad ef 13	                lda     sprt_y
.1313	8d 05 d0	                sta     vic+$05
.1316	20 1d 13	                jsr     sprt_showpos
.1319	20 4f 08	                jsr     pop
.131c	60		                rts
.131d			sprt_showpos
.131d	20 10 08	                jsr     push
.1320	ad ed 13	                lda     sprt_x
.1323	20 60 09	                jsr     a2hex
.1326	ad 48 09	                lda     a2hexstr+1
.1329	8d b4 16	                sta     sprite_pos+26
.132c	ad 49 09	                lda     a2hexstr+2
.132f	8d b5 16	                sta     sprite_pos+27
.1332	ad ee 13	                lda     sprt_x+1
.1335	20 60 09	                jsr     a2hex
.1338	ad 48 09	                lda     a2hexstr+1
.133b	8d b2 16	                sta     sprite_pos+24
.133e	ad 49 09	                lda     a2hexstr+2
.1341	8d b3 16	                sta     sprite_pos+25
.1344	ad ef 13	                lda     sprt_y
.1347	20 60 09	                jsr     a2hex
.134a	ad 48 09	                lda     a2hexstr+1
.134d	8d bb 16	                sta     sprite_pos+33
.1350	ad 49 09	                lda     a2hexstr+2
.1353	8d bc 16	                sta     sprite_pos+34
.1356	a9 00		                lda     #0
.1358	20 60 09	                jsr     a2hex
.135b	ad 48 09	                lda     a2hexstr+1
.135e	8d b9 16	                sta     sprite_pos+31
.1361	ad 49 09	                lda     a2hexstr+2
.1364	8d ba 16	                sta     sprite_pos+32
.1367	a2 9a		                ldx     #<sprite_pos
.1369	a0 16		                ldy     #>sprite_pos
.136b	20 74 0b	                jsr     putscxy
.136e	20 4f 08	                jsr     pop
.1371	60		                rts
.1372			sprt_loadptr2
.1372	20 10 08	                jsr     push
.1375	aa		                tax
.1376	8e c7 12	                stx     sprt_ptr
.1379	ad 86 16	                lda     sprt_ptr0+1
.137c	8d a8 13	                sta     calcbuff+1
.137f	ad 85 16	                lda     sprt_ptr0
.1382	8d a7 13	                sta     calcbuff
.1385	e0 00		                cpx     #0
.1387	f0 11		                beq     addrok
.1389	ad a7 13	                lda     calcbuff
.138c	18		nextx           clc
.138d	69 42		                adc     #66
.138f	90 03		                bcc     nocarry
.1391	ee a8 13	                inc     calcbuff+1
.1394	8d a7 13	nocarry         sta     calcbuff
.1397	ca		                dex
.1398	d0 f2		                bne     nextx
.139a	ac a8 13	addrok          ldy     calcbuff+1
.139d	ae a7 13	                ldx     calcbuff
.13a0	20 c3 13	                jsr     sprt_setimage
.13a3	20 4f 08	                jsr     pop
.13a6	60		                rts
>13a7	00 00		calcbuff        .word   $0
.13a9			sprt_loadptr
.13a9	20 10 08	                jsr     push
.13ac	ad c7 12	                lda     sprt_ptr
.13af	18		                clc
.13b0	2a		                rol
.13b1	a8		                tay
.13b2	b9 85 16	                lda     sprt_ptr0,y
.13b5	aa		                tax
.13b6	b9 86 16	                lda     sprt_ptr0+1,y
.13b9	a8		                tay
.13ba	20 c3 13	                jsr     sprt_setimage
.13bd	20 4f 08	                jsr     pop
.13c0	60		                rts
>13c1	00 00		calcbuff        .word   $0
.13c3			sprt_setimage
.13c3	20 10 08	                jsr     push
.13c6	20 c6 08	                jsr     savezp1
.13c9	20 e4 08	                jsr     savezp2
.13cc	84 fc		                sty     zpage1+1
.13ce	86 fb		                stx     zpage1
.13d0	a0 13		                ldy     #>sprt_image
.13d2	84 fe		                sty     zpage2+1
.13d4	a0 f1		                ldy     #<sprt_image
.13d6	84 fd		                sty     zpage2
.13d8	a0 42		                ldy     #66
.13da	b1 fb		nextbyte        lda     (zpage1),y
.13dc	91 fd		                sta     (zpage2),y
.13de	88		                dey
.13df	d0 f9		                bne     nextbyte
.13e1	20 f3 08	                jsr     restzp2
.13e4	20 d5 08	                jsr     restzp1
.13e7	20 4f 08	                jsr     pop
.13ea	60		                rts
>13eb	00		sprt_xoffset    .byte   $00
>13ec	00		sprt_yoffset    .byte   $00
>13ed	00 00		sprt_x          .word   $0000
>13ef	00 00		sprt_y          .word   $0000
>13f1			sprt_image      .fill 66
>1433	00 00 00 00	sprt_crxair     .byte $00, $00, $00, $00, $00, $00
>1437	00 00
>1439	00 66 00 00	                .byte $00, $66, $00, $00, $3c, $00
>143d	3c 00
>143f	00 18 00 00	                .byte $00, $18, $00, $00, $00, $00
>1443	00 00
>1445	00 00 00 00	                .byte $00, $00, $00, $00, $18, $00
>1449	18 00
>144b	80 00 01 c0	                .byte $80, $00, $01, $c0, $18, $03
>144f	18 03
>1451	66 66 66 c0	                .byte $66, $66, $66, $c0, $18, $03
>1455	18 03
>1457	80 00 01 00	                .byte $80, $00, $01, $00, $18, $00
>145b	18 00
>145d	00 00 00 00	                .byte $00, $00, $00, $00, $00, $00
>1461	00 00
>1463	00 18 00 00	                .byte $00, $18, $00, $00, $3c, $00
>1467	3c 00
>1469	00 66 00 00	                .byte $00, $66, $00, $00, $00, $00
>146d	00 00
>146f	00 00 00 01	                .byte $00, $00, $00, $01, $0c, $28
>1473	0c 28
>1475	80 00 00 e0	sprt_mouse      .byte $80, $00, $00, $e0, $00, $00      ;1
>1479	00 00
>147b	b8 00 00 ce	                .byte $b8, $00, $00, $ce, $00, $00
>147f	00 00
>1481	83 80 00 c0	                .byte $83, $80, $00, $c0, $e0, $00
>1485	e0 00
>1487	80 18 00 c0	                .byte $80, $18, $00, $c0, $3c, $00
>148b	3c 00
>148d	80 e0 00 c0	                .byte $80, $e0, $00, $c0, $60, $00
>1491	60 00
>1493	98 30 00 fc	                .byte $98, $30, $00, $fc, $18, $00
>1497	18 00
>1499	c6 0c 00 03	                .byte $c6, $0c, $00, $03, $06, $00
>149d	06 00
>149f	01 9c 00 00	                .byte $01, $9c, $00, $00, $f0, $00
>14a3	f0 00
>14a5	00 40 00 00	                .byte $00, $40, $00, $00, $00, $00
>14a9	00 00
>14ab	00 00 00 00	                .byte $00, $00, $00, $00, $00, $00
>14af	00 00
>14b1	00 00 00 01	                .byte $00, $00, $00, $01, $18, $31
>14b5	18 31
>14b7	00 7c 00 01	sprt_pointer    .byte $00, $7c, $00, $01, $83, $00
>14bb	83 00
>14bd	06 10 c0 08	                .byte $06, $10, $c0, $08, $00, $30
>14c1	00 30
>14c3	12 10 88 20	                .byte $12, $10, $88, $20, $00, $08
>14c7	00 08
>14c9	40 ba 04 40	                .byte $40, $ba, $04, $40, $6c, $04
>14cd	6c 04
>14cf	80 c6 02 aa	                .byte $80, $c6, $02, $aa, $82, $aa
>14d3	82 aa
>14d5	80 c6 02 40	                .byte $80, $c6, $02, $40, $6c, $04
>14d9	6c 04
>14db	40 ba 04 20	                .byte $40, $ba, $04, $20, $00, $08
>14df	00 08
>14e1	12 10 90 08	                .byte $12, $10, $90, $08, $00, $20
>14e5	00 20
>14e7	06 10 c0 01	                .byte $06, $10, $c0, $01, $83, $00
>14eb	83 00
>14ed	00 7c 00 00	                .byte $00, $7c, $00, $00, $00, $00
>14f1	00 00
>14f3	00 00 00 01	                .byte $00, $00, $00, $01, $0c, $28
>14f7	0c 28
>14f9	55 55 55 aa	sprt_pointer2   .byte $55, $55, $55, $aa, $aa, $aa     ;6
>14fd	aa aa
>14ff	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa     ;12
>1503	aa aa
>1505	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa     ;18
>1509	aa aa
>150b	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a     ;24
>150f	00 2a
>1511	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a     ;30
>1515	00 2a
>1517	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a     ;36
>151b	00 2a
>151d	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a     ;42
>1521	00 2a
>1523	54 00 55 aa	                .byte $54, $00, $55, $aa, $aa, $aa     ;48
>1527	aa aa
>1529	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa     ;54
>152d	aa aa
>152f	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa     ;60
>1533	aa aa
>1535	55 55 55 01	                .byte $55, $55, $55, $01, $0c, $28     ;63
>1539	0c 28
>153b	06 00 00 0f	sprt_hand       .byte $06, $00, $00, $0f, $00, $00
>153f	00 00
>1541	19 80 00 10	                .byte $19, $80, $00, $10, $80, $00
>1545	80 00
>1547	19 80 00 16	                .byte $19, $80, $00, $16, $b1, $8c
>154b	b1 8c
>154d	10 ca 52 10	                .byte $10, $ca, $52, $10, $84, $21
>1551	84 21
>1553	10 84 21 30	                .byte $10, $84, $21, $30, $84, $21
>1557	84 21
>1559	50 84 21 90	                .byte $50, $84, $21, $90, $84, $21
>155d	84 21
>155f	90 00 01 90	                .byte $90, $00, $01, $90, $00, $01
>1563	00 01
>1565	90 7f c1 90	                .byte $90, $7f, $c1, $90, $00, $01
>1569	00 01
>156b	40 ff e2 40	                .byte $40, $ff, $e2, $40, $00, $02
>156f	00 02
>1571	3c 00 04 02	                .byte $3c, $00, $04, $02, $00, $08
>1575	00 08
>1577	03 ff f8 01	                .byte $03, $ff, $f8, $01, $12, $31
>157b	12 31
>157d	00 3e 00 01	sprt_ultraman   .byte $00, $3e, $00, $01, $c1, $c0     ; 6
>1581	c1 c0
>1583	0e 3e 30 08	                .byte $0e, $3e, $30, $08, $41, $08     ; 12
>1587	41 08
>1589	10 1c 04 10	                .byte $10, $1c, $04, $10, $22, $04     ; 18
>158d	22 04
>158f	24 1c 12 23	                .byte $24, $1c, $12, $23, $00, $62     ; 24
>1593	00 62
>1595	20 08 02 47	                .byte $20, $08, $02, $47, $c1, $f1     ; 30
>1599	c1 f1
>159b	6a aa ab 47	                .byte $6a, $aa, $ab, $47, $c9, $f1     ; 36
>159f	c9 f1
>15a1	20 08 02 20	                .byte $20, $08, $02, $20, $14, $02     ; 42
>15a5	14 02
>15a7	20 00 02 10	                .byte $20, $00, $02, $10, $00, $04     ; 48
>15ab	00 04
>15ad	10 7f 04 08	                .byte $10, $7f, $04, $08, $00, $08     ; 54
>15b1	00 08
>15b3	06 3e 30 01	                .byte $06, $3e, $30, $01, $c1, $c0     ; 60
>15b7	c1 c0
>15b9	00 3e 00 01	                .byte $00, $3e, $00, $01, $0c, $28     ; 63
>15bd	0c 28
>15bf	00 1c 00 00	sprt_male       .byte $00, $1c, $00, $00, $3e, $00 ; 6
>15c3	3e 00
>15c5	00 3e 00 00	                .byte $00, $3e, $00, $00, $3e, $00 ; 12
>15c9	3e 00
>15cb	00 1c 00 00	                .byte $00, $1c, $00, $00, $08, $00 ; 18
>15cf	08 00
>15d1	00 ff 80 00	                .byte $00, $ff, $80, $00, $ff, $80 ; 24
>15d5	ff 80
>15d7	00 be 80 00	                .byte $00, $be, $80, $00, $9c, $80 ; 30
>15db	9c 80
>15dd	00 88 80 00	                .byte $00, $88, $80, $00, $be, $80 ; 36
>15e1	be 80
>15e3	00 be 80 01	                .byte $00, $be, $80, $01, $9c, $c0 ; 42
>15e7	9c c0
>15e9	01 94 c0 00	                .byte $01, $94, $c0, $00, $14, $00 ; 48
>15ed	14 00
>15ef	00 14 00 00	                .byte $00, $14, $00, $00, $14, $00 ; 54
>15f3	14 00
>15f5	00 36 00 00	                .byte $00, $36, $00, $00, $77, $00 ; 60
>15f9	77 00
>15fb	00 77 00 01	                .byte $00, $77 ,$00, $01, $0c, $2f ; 66, X,X,X color, xoffset, yoffset
>15ff	0c 2f
>1601	00 3c 00 00	sprt_robot      .byte $00, $3c, $00, $00, $24, $00
>1605	24 00
>1607	00 66 18 00	                .byte $00, $66, $18, $00, $66, $38
>160b	66 38
>160d	00 24 38 00	                .byte $00, $24, $38, $00, $3c, $10
>1611	3c 10
>1613	00 18 10 00	                .byte $00, $18, $10, $00, $18, $10
>1617	18 10
>1619	0f ff f0 08	                .byte $0f, $ff, $f0, $08, $7e, $00
>161d	7e 00
>161f	08 7e 00 08	                .byte $08, $7e, $00, $08, $18, $00
>1623	18 00
>1625	1c 18 00 1c	                .byte $1c, $18, $00, $1c, $18, $00
>1629	18 00
>162b	18 3c 00 00	                .byte $18, $3c, $00, $00, $3c, $00
>162f	3c 00
>1631	00 24 00 00	                .byte $00, $24, $00, $00, $24, $00
>1635	24 00
>1637	00 24 00 03	                .byte $00, $24, $00, $03, $e7, $c0
>163b	e7 c0
>163d	03 e7 c0 01	                .byte $03, $e7, $c0, $01, $0c, $28
>1641	0c 28
>1643	00 1c 00 00	sprt_femme      .byte $00, $1c, $00, $00, $3e, $00 ; 6
>1647	3e 00
>1649	00 3e 00 00	                .byte $00, $3e, $00, $00, $3e, $00 ; 12
>164d	3e 00
>164f	00 1c 00 00	                .byte $00, $1c, $00, $00, $08, $00 ; 18
>1653	08 00
>1655	00 7f 00 00	                .byte $00, $7f, $00, $00, $ff, $80 ; 24
>1659	ff 80
>165b	00 be 80 00	                .byte $00, $be, $80, $00, $9c, $80 ; 30
>165f	9c 80
>1661	00 88 80 00	                .byte $00, $88, $80, $00, $9c, $80 ; 36
>1665	9c 80
>1667	00 be 80 01	                .byte $00, $be, $80, $01, $be, $c0 ; 42
>166b	be c0
>166d	01 be c0 00	                .byte $01, $be, $c0, $00, $7f, $00 ; 48
>1671	7f 00
>1673	00 7f 00 00	                .byte $00, $7f, $00, $00, $ff, $80 ; 54
>1677	ff 80
>1679	00 36 00 00	                .byte $00, $36, $00, $00, $77, $00 ; 60
>167d	77 00
>167f	00 55 00 01	                .byte $00, $55 ,$00, $01, $0c, $2f ; 66, X,X,X color, xoffset, yoffset
>1683	0c 2f
>1685	f1 13		sprt_ptr0       .word  sprt_image + (0*66)
>1687	33 14		sprt_ptr1       .word  sprt_image + (1*66)
>1689	75 14		sprt_ptr2       .word  sprt_image + (2*66)
>168b	b7 14		sprt_ptr3       .word  sprt_image + (3*66)
>168d	f9 14		sprt_ptr4       .word  sprt_image + (4*66)
>168f	3b 15		sprt_ptr5       .word  sprt_image + (5*66)
>1691	7d 15		sprt_ptr6       .word  sprt_image + (6*66)
>1693	bf 15		sprt_ptr7       .word  sprt_image + (7*66)
>1695	01 16		sprt_ptr8       .word  sprt_image + (8*66)
>1697	43 16		sprt_ptr9       .word  sprt_image + (9*66)
>1699	ff		testbyte        .byte 255
=$07			sprt_txtcol     =       vjaune
=$00			sprt_txtbak     =       bkcol0
=$01			sprt_color      =       vwhite
>169a	07 00 04 0e	sprite_pos      .byte   sprt_txtcol,sprt_txtbak,4,14
>169e	d3 50 52 49	                .text        "Sprite pos. (x,y):($0000, $0000)"
>16a2	54 45 20 50 4f 53 2e 20 28 58 2c 59 29 3a 28 24
>16b2	30 30 30 30 2c 20 24 30 30 30 30 29
>16be	00		                .byte   0

;******  Return to file: agp-0001.asm

.16bf			main
.16bf	20 06 0a	               jsr  scrmaninit
.16c2	20 94 0a	               jsr  cls
.16c5	a2 01		               ldx  #$01
.16c7	a0 00		               ldy  #$0
.16c9	20 ca 0b	               jsr  gotoxy
.16cc	a9 01		               lda  #1
.16ce	20 ba 0b	               jsr  setbkcol
.16d1	a2 0e		               ldx  #<msg1
.16d3	a0 17		               ldy  #>msg1
.16d5	20 47 0b	               jsr  puts
.16d8	a0 19		               ldy  #25
.16da	88		nextline       dey
.16db	f0 12		               beq  go
.16dd	a2 01		               ldx  #$01
.16df	20 ca 0b	               jsr  gotoxy
.16e2	98		               tya
.16e3	29 03		               and  #$03
.16e5	20 ba 0b	               jsr  setbkcol
.16e8	a2 0e		               ldx  #<msg1
.16ea	a0 17		               ldy  #>msg1
.16ec	20 47 0b	               jsr  puts
.16ef	a9 00		go             lda  #0
.16f1	a2 01		               ldx  #1
.16f3	ce 20 d0	ici            dec  vborder
.16f6	ad 11 d0	waitscan       lda  vicreg11
.16f9	10 fb		               bpl  waitscan
.16fb	ee 20 d0	               inc  vborder
.16fe	18		               clc
.16ff	ee 22 d0	               inc  $d022
.1702	ad 22 d0	               lda  $d022
.1705	29 0f		               and  #$0f
.1707	8d 22 d0	               sta  $d022
.170a	4c f3 16	               jmp  ici
.170d	60		out            rts
>170e	2a 20 03 36	msg1           .text "* c64 - arcade game programming book *",0
>1712	34 20 2d 20 01 12 03 01 04 05 20 07 01 0d 05 20
>1722	10 12 0f 07 12 01 0d 0d 09 0e 07 20 02 0f 0f 0b
>1732	20 2a 00

;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L colour.txt -o colour.prg colour.asm
; Thu Jun 20 13:06:13 2024

;Offset	;Hex		;Source

;******  Processing input file: colour.asm

="20240620-130546-a"	                Version = "20240620-130546-a"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: colour.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: colour.asm

.080d			main
.080d	20 67 0a	                jsr scrmaninit
.0810	20 19 08	                jsr help
.0813	20 9c 0f	                jsr anykey
.0816	4c 74 a4	                jmp b_warmstart
.0819			help
.0819	20 87 0a	                jsr cls
.081c	20 95 0b	               jsr  push
.081f	a2 b5		isx            ldx  #<line
.0821	a0 09		isy            ldy  #>line
.0823	20 a4 0a	               jsr  puts
.0826	20 d4 0b	               jsr  pull
.0829	20 95 0b	               jsr  push
.082c	a2 78		isx            ldx  #<header
.082e	a0 08		isy            ldy  #>header
.0830	20 a4 0a	               jsr  puts
.0833	20 d4 0b	               jsr  pull
.0836	20 95 0b	               jsr  push
.0839	a2 b5		isx            ldx  #<line
.083b	a0 09		isy            ldy  #>line
.083d	20 a4 0a	               jsr  puts
.0840	20 d4 0b	               jsr  pull
.0843	20 95 0b	               jsr  push
.0846	a2 61		isx            ldx  #<shortcuts
.0848	a0 09		isy            ldy  #>shortcuts
.084a	20 a4 0a	               jsr  puts
.084d	20 d4 0b	               jsr  pull
.0850	20 95 0b	               jsr  push
.0853	a2 b5		isx            ldx  #<line
.0855	a0 09		isy            ldy  #>line
.0857	20 a4 0a	               jsr  puts
.085a	20 d4 0b	               jsr  pull
.085d	20 95 0b	               jsr  push
.0860	a2 de		isx            ldx  #<helptext
.0862	a0 09		isy            ldy  #>helptext
.0864	20 a4 0a	               jsr  puts
.0867	20 d4 0b	               jsr  pull
.086a	20 95 0b	               jsr  push
.086d	a2 b5		isx            ldx  #<line
.086f	a0 09		isy            ldy  #>line
.0871	20 a4 0a	               jsr  puts
.0874	20 d4 0b	               jsr  pull
.0877	60		                rts
.0878			header
>0878	20 20 20 20	                .text          "     40 BEST MACHINE CODE ROUTINES"
>087c	20 34 30 20 c2 c5 d3 d4 20 cd c1 c3 c8 c9 ce c5
>088c	20 c3 cf c4 c5 20 d2 cf d5 d4 c9 ce c5 d3
>089a	0d		                .byte   $0d
>089b	20 20 20 20	                .text          "          FOR THE COMMODORE 64"
>089f	20 20 20 20 20 20 c6 cf d2 20 d4 c8 c5 20 c3 cf
>08af	cd cd cf c4 cf d2 c5 20 36 34
>08b9	0d		                .byte   $0d
>08ba	20 20 20 20	                .text          "       Book by Mark Greenshields."
>08be	20 20 20 c2 4f 4f 4b 20 42 59 20 cd 41 52 4b 20
>08ce	c7 52 45 45 4e 53 48 49 45 4c 44 53 2e
>08db	0d 0d		                .byte   $0d,$0d
>08dd	20 20 20 20	                .text          "              Colour (p62)"
>08e1	20 20 20 20 20 20 20 20 20 20 c3 4f 4c 4f 55 52
>08f1	20 28 50 36 32 29
>08f7	0d		                .byte   $0d
>08f8	20 20 20 20	                .text          "        (c) 1979 Brad Templeton"
>08fc	20 20 20 20 28 43 29 20 31 39 37 39 20 c2 52 41
>090c	44 20 d4 45 4d 50 4c 45 54 4f 4e
>0917	0d 0d		                .byte   $0d,$0d
>0919	20 20 20 20	                .text          "     Programmed by Daniel Lafrance."
>091d	20 d0 52 4f 47 52 41 4d 4d 45 44 20 42 59 20 c4
>092d	41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e
>093c	0d		                .byte   $0d
>093d	20 20 20 20	                .text   format("       Version: %s.",Version)
>0941	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 34
>0951	30 36 32 30 2d 31 33 30 35 34 36 2d 41 2e
>095f	0d 00		                .byte   $0d,0
>0961	20 2d 2d 2d	shortcuts       .text          " -------- S H O R T - C U T S ---------"
>0965	2d 2d 2d 2d 2d 20 d3 20 c8 20 cf 20 d2 20 d4 20
>0975	2d 20 c3 20 d5 20 d4 20 d3 20 2d 2d 2d 2d 2d 2d
>0985	2d 2d 2d
>0988	0d		                .byte   $0d
>0989	20 52 55 4e	                .text   format(" run=SYS%5d, help=SYS%5d",main, help)
>098d	3d d3 d9 d3 20 32 30 36 31 2c 20 48 45 4c 50 3d
>099d	d3 d9 d3 20 32 30 37 33
>09a5	0d		                .byte   $0d
>09a6	20 43 4c 53	                .text   format(" cls=SYS%5d",cls)
>09aa	3d d3 d9 d3 20 32 36 39 35
>09b3	0d 00		                .byte   $0d,0
>09b5	20 2d 2d 2d	line            .text          " --------------------------------------"
>09b9	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09c9	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09d9	2d 2d 2d
>09dc	0d 00		                .byte   $0d,0
>09de	20 c3 4f 4c	helptext        .text   format(" Colour:SYS%5d,screen,back,text,1,2,3",colour)
>09e2	4f 55 52 3a d3 d9 d3 20 32 35 39 39 2c 53 43 52
>09f2	45 45 4e 2c 42 41 43 4b 2c 54 45 58 54 2c 31 2c
>0a02	32 2c 33
>0a05	0d		                .byte   $0d
>0a06	20 45 58 2e	                .text   format(" ex.: SYS%5d,15,11,0,10,11,12",colour)
>0a0a	3a 20 d3 d9 d3 20 32 35 39 39 2c 31 35 2c 31 31
>0a1a	2c 30 2c 31 30 2c 31 31 2c 31 32
>0a25	0d 00		                .byte   $0d,0
.0a27			colour
.0a27	20 fd ae	                jsr b_chk4comma ; $aefd : Check for coma.
.0a2a	20 5e 0a	                jsr param       ; Fetch the first parameter and make it the ...
.0a2d	8d 21 d0	                sta vicback0col ; vic+$21, $d021, 53281.
.0a30	20 fd ae	                jsr b_chk4comma ; $aefd : Check for coma.   ;
.0a33	20 5e 0a	                jsr param       ; Fetch the second parameter and make it the ...
.0a36	8d 20 d0	                sta vicbordcol  ; vic+$20, $d020, 53280.
.0a39	20 fd ae	                jsr b_chk4comma ; $aefd : Check for coma.
.0a3c	20 5e 0a	                jsr param       ; Fetch the third parameter and make it the ...
.0a3f	8d 86 02	                sta carcol      ; $286, 646 ... basic next chr colscreenram (byte).
.0a42	20 fd ae	                jsr b_chk4comma ; $aefd : Check for coma.
.0a45	20 5e 0a	                jsr param       ; Fetch the fourth parameter and make it the ...
.0a48	8d 22 d0	                sta vicback1col ; vic+$22, $d0221, 53282.
.0a4b	20 fd ae	                jsr b_chk4comma ; $aefd : Check for coma.
.0a4e	20 5e 0a	                jsr param       ; Fetch the fifth parameter and make it the ...
.0a51	8d 23 d0	                sta vicback2col ; vic+$23, $d023, 53283.
.0a54	20 fd ae	                jsr b_chk4comma ; $aefd : Check for coma.
.0a57	20 5e 0a	                jsr param       ; Fetch the sixth parameter and make it the ...
.0a5a	8d 24 d0	                sta vicback3col ; vic+$24, $d024, 53284.
.0a5d	60		                rts
.0a5e	20 9e b7	param           jsr $b79e       ; Check for coma.
.0a61	8a		                txa
.0a62	60		                rts
.0a63	4c 48 b2	iqerr           jmp b_fcerr     ;$b248 : Print ILLEGAL QUANTITY error message.
>0a66	00		byte            .byte 0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0a67			libtart

;******  Return to file: colour.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: colour.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: colour.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0a67			scrmaninit
.0a67	20 95 0b	               jsr  push
.0a6a	a9 06		               lda  #vbleu
.0a6c	8d 21 d0	               sta  vicbackcol
.0a6f	a9 05		               lda  #vvert
.0a71	8d 20 d0	               sta  vicbordcol
.0a74	a9 01		               lda  #vblanc
.0a76	8d 86 02	               sta  bascol
.0a79	ad 00 04	               lda  scrnram
.0a7c	8d 00 04	               sta  scrnram
.0a7f	20 87 0a	               jsr  cls
.0a82	20 d4 0b	               jsr  pop
.0a85	60		               rts
>0a86	8e		characterset   .byte b_uppercase
.0a87			cls
.0a87	08		               php
.0a88	48		               pha
.0a89	a9 93		               lda  #$93
.0a8b	20 9e 0a	               jsr  putch
.0a8e	68		               pla
.0a8f	28		               plp
.0a90	60		               rts
.0a91			putnch
.0a91	08		               php
.0a92	e0 00		               cpx  #$00
.0a94	f0 06		               beq  out
.0a96	20 d2 ff	again          jsr  $ffd2
.0a99	ca		               dex
.0a9a	d0 fa		               bne  again
.0a9c	28		out            plp
.0a9d	60		               rts
.0a9e			putch
.0a9e	08		               php
.0a9f	20 d2 ff	               jsr  $ffd2
.0aa2	28		               plp
.0aa3	60		               rts
.0aa4			puts
.0aa4	20 95 0b	               jsr  push
.0aa7	86 fb		               stx  zpage1
.0aa9	84 fc		               sty  zpage1+1
.0aab	a0 00		               ldy  #0
.0aad	b1 fb		next           lda  (zpage1),y
.0aaf	f0 09		               beq  exit
.0ab1	20 9e 0a	               jsr  putch
.0ab4	20 9c 0c	               jsr  inczp1
.0ab7	4c ad 0a	               jmp  next
.0aba	20 d4 0b	exit           jsr  pop
.0abd	60		               rts
.0abe			gotoxy
.0abe	08		               php
.0abf	18		               clc
.0ac0	8a		               txa
.0ac1	48		               pha
.0ac2	98		               tya
.0ac3	aa		               tax
.0ac4	68		               pla
.0ac5	a8		               tay
.0ac6	20 f0 ff	               jsr  kplot
.0ac9	28		               plp
.0aca	60		               rts
.0acb			cursor
=$0286			bascol    =    $0286
.0acb	08		               php
.0acc	48		               pha
.0acd	90 12		               bcc  restore
.0acf	20 f0 ff	               jsr  kplot
.0ad2	8c f3 0a	               sty  cx
.0ad5	8e f4 0a	               stx  cy
.0ad8	ad 86 02	               lda  bascol
.0adb	8d f5 0a	               sta  bcol
.0ade	4c f0 0a	               jmp  out
.0ae1	ae f4 0a	restore        ldx  cy
.0ae4	ac f3 0a	               ldy  cx
.0ae7	20 f0 ff	               jsr  kplot
.0aea	ad f5 0a	               lda  bcol
.0aed	8d 86 02	               sta  bascol
.0af0	68		out            pla
.0af1	28		               plp
.0af2	60		               rts
>0af3	00		cx   .byte     $00
>0af4	00		cy   .byte     $00
>0af5	00		bcol .byte     $00
.0af6			cursave
.0af6	08		               php
.0af7	38		               sec
.0af8	20 cb 0a	               jsr  cursor
.0afb	28		               plp
.0afc	60		               rts
.0afd			curput
.0afd	08		               php
.0afe	18		               clc
.0aff	20 cb 0a	               jsr  cursor
.0b02	28		               plp
.0b03	60		               rts
.0b04			putsxy
.0b04	20 95 0b	               jsr  push
.0b07	86 fb		               stx  zpage1
.0b09	84 fc		               sty  zpage1+1
.0b0b	a0 00		               ldy  #$00
.0b0d	b1 fb		               lda  (zpage1),y
.0b0f	aa		               tax
.0b10	20 9c 0c	               jsr  inczp1
.0b13	b1 fb		               lda  (zpage1),y
.0b15	a8		               tay
.0b16	20 be 0a	               jsr  gotoxy
.0b19	20 9c 0c	               jsr  inczp1
.0b1c	a6 fb		               ldx  zpage1
.0b1e	a4 fc		               ldy  zpage1+1
.0b20	20 a4 0a	               jsr  puts
.0b23	20 d4 0b	               jsr  pop
.0b26	60		               rts
>0b27	00 00		straddr   .word     $00
>0b29	00		px        .byte     $00
>0b2a	00		py        .byte     $00
>0b2b	00 00		zp1       .word     $00
.0b2d			putscxy
.0b2d	20 95 0b	               jsr  push
.0b30	84 fc		               sty  zpage1+1
.0b32	86 fb		               stx  zpage1
.0b34	ad 86 02	               lda  bascol
.0b37	8d 57 0b	               sta  bc
.0b3a	a0 00		               ldy #$00
.0b3c	b1 fb		               lda  (zpage1),y
.0b3e	8d 86 02	               sta  bascol
.0b41	20 9c 0c	               jsr  inczp1
.0b44	a6 fb		               ldx  zpage1
.0b46	a4 fc		               ldy  zpage1+1
.0b48	20 04 0b	               jsr  putsxy
.0b4b	ad 57 0b	               lda  bc
.0b4e	8d 86 02	               sta  bascol
.0b51	20 d4 0b	               jsr  pop
.0b54	60		               rts
>0b55	00 00		straddr  .word      $00
>0b57	00		bc       .byte      $00
>0b58	00 00		zp1      .word      $00
.0b5a			putrahex
.0b5a	08		               php
.0b5b	48		               pha
.0b5c	20 b2 0d	               jsr  a2hex
.0b5f	a9 51		               lda  #<a2hexstr
.0b61	a0 0d		               ldy  #>a2hexstr
.0b63	20 a4 0a	               jsr  puts
.0b66	68		               pla
.0b67	28		               plp
.0b68	60		               rts
.0b69			kputrahexxy
.0b69			bputrahexxy
.0b69			putrahexxy
.0b69	08		               php
.0b6a	20 b2 0d	               jsr  a2hex
.0b6d	a9 4e		               lda  #<a2hexpos
.0b6f	a0 0d		               ldy  #>a2hexpos
.0b71	20 04 0b	               jsr  putsxy
.0b74	68		               pla
.0b75	28		               plp
.0b76	60		               rts
.0b77			putrahexcxy
.0b77	08		               php
.0b78	20 b2 0d	               jsr  a2hex
.0b7b	a9 4e		               lda  #<a2hexpos
.0b7d	a0 0d		               ldy  #>a2hexpos
.0b7f	20 2d 0b	               jsr  putscxy
.0b82	68		               pla
.0b83	28		               plp
.0b84	60		               rts
.0b85			setinverse
.0b85	48		               pha
.0b86	a9 12		               lda  #$12
.0b88	20 d2 ff	               jsr  $ffd2
.0b8b	68		               pla
.0b8c	60		               rts
.0b8d			clrinverse
.0b8d	48		               pha
.0b8e	a9 92		               lda  #$92
.0b90	20 d2 ff	               jsr  $ffd2
.0b93	68		               pla
.0b94	60		               rts

;******  Return to file: colour.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.0b95			push
.0b95	08		          php            ; stack : flg, pcl, pch
.0b96	78		          sei
.0b97	8d d1 0b	          sta  ra        ; save a
.0b9a	68		          pla            ; stack : pcl, pch
.0b9b	8d d0 0b	          sta  rp        ; save rp
.0b9e	68		          pla            ; stack : pch
.0b9f	8d d2 0b	          sta  pc        ; save pcl
.0ba2	68		          pla            ; stack : -
.0ba3	8d d3 0b	          sta  pc+1      ; save pch
.0ba6	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0ba8	48		          pha            ; stack : zp1l
.0ba9	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0bab	48		          pha            ; stack : zp1h, zp1l
.0bac	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0bae	48		          pha            ; stack : zp2l, zp1h, zp1l
.0baf	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0bb1	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0bb2	ad d0 0b	          lda  rp        ; get rp
.0bb5	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0bb6	ad d1 0b	          lda  ra        ; get a
.0bb9	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0bba	8a		          txa            ; get x
.0bbb	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0bbc	98		          tya            ; get y
.0bbd	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0bbe	ad d3 0b	          lda  pc+1      ; get pch
.0bc1	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0bc2	ad d2 0b	          lda  pc        ; get pcl
.0bc5	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0bc6	ad d0 0b	          lda  rp        ; get rp
.0bc9	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0bca	ad d1 0b	          lda  ra        ; get a
.0bcd	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0bce	58		          cli
.0bcf	60		          rts
>0bd0	00		rp        .byte     0
>0bd1	00		ra        .byte     0
>0bd2	00 00		pc        .word     0
.0bd4			pull
.0bd4			pop
.0bd4	78		          sei
.0bd5	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0bd6	8d 09 0c	          sta  pc        ; save pcl
.0bd9	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0bda	8d 0a 0c	          sta  pc+1      ; save pch
.0bdd	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0bde	a8		          tay            ; set y
.0bdf	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0be0	aa		          tax            ; set x
.0be1	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0be2	8d 08 0c	          sta  ra        ; save a
.0be5	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0be6	8d 07 0c	          sta  rp        ; save rp
.0be9	68		          pla            ; stack : zp2l, zp1h, zp1l
.0bea	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0bec	68		          pla            ; stack : zp1h, zp1l
.0bed	85 fd		          sta  zpage2    ; get zpage2 High byte
.0bef	68		          pla            ; stack : zp1l
.0bf0	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0bf2	68		          pla            ; stack :
.0bf3	85 fb		          sta  zpage1    ; get zpage1 High byte
.0bf5	ad 0a 0c	          lda  pc+1      ; get pch
.0bf8	48		          pha            ; stack : pch
.0bf9	ad 09 0c	          lda  pc
.0bfc	48		          pha            ; stack : pcl, pch
.0bfd	ad 07 0c	          lda  rp        ; get rp
.0c00	48		          pha            ; stack : rp, pcl, pch
.0c01	ad 08 0c	          lda  ra        ; set ra
.0c04	58		          cli
.0c05	28		          plp            ; stack : pcl, pch
.0c06	60		          rts
>0c07	00		rp        .byte     0
>0c08	00		ra        .byte     0
>0c09	00 00		pc        .word     0

;******  Return to file: colour.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.0c0b			blkfill
.0c0b	20 95 0b	bf0            jsr  push
.0c0e	20 cc 0c	               jsr  savezp1
.0c11	84 fc		               sty  zpage1+1
.0c13	a0 00		               ldy  #$00
.0c15	84 fb		               sty  zpage1
.0c17	91 fb		bf1            sta  (zpage1),y
.0c19	c8		               iny
.0c1a	d0 fb		               bne  bf1
.0c1c	20 db 0c	               jsr  restzp1
.0c1f	20 d4 0b	               jsr  pop
.0c22	60		               rts
.0c23			memfill
.0c23	20 95 0b	               jsr  push
.0c26	20 0b 0c	mf1            jsr  blkfill
.0c29	c8		               iny
.0c2a	ca		               dex
.0c2b	d0 f9		               bne  mf1
.0c2d	20 d4 0b	               jsr  pop
.0c30	60		               rts
.0c31			memmove
.0c31	20 95 0b	               jsr  push
.0c34	ba		               tsx            ; On se crée un pointeur ...
.0c35	8a		               txa
.0c36	18		               clc
.0c37	69 0b		               adc  #11
.0c39	a8		               tay
.0c3a	a2 06		               ldx  #$06
.0c3c	b9 00 01	nextbyte       lda  $0100,y
.0c3f	99 8b 0c	               sta  words,y
.0c42	c8		               iny
.0c43	ca		               dex
.0c44	d0 f6		               bne  nextbyte
.0c46	ad 8b 0c	               lda  s
.0c49	8d 62 0c	               sta  source+1
.0c4c	ad 8c 0c	               lda  s+1
.0c4f	8d 63 0c	               sta  source+2
.0c52	ad 8d 0c	               lda  d
.0c55	8d 5f 0c	               sta  destin+1
.0c58	ad 8e 0c	               lda  d+1
.0c5b	8d 60 0c	               sta  destin+2
.0c5e	ad ff ff	destin         lda  $ffff
.0c61	8d ff ff	source         sta  $ffff
.0c64	ee 5f 0c	               inc  destin+1
.0c67	d0 03		               bne  src
.0c69	ee 60 0c	               inc  destin+2
.0c6c	ee 62 0c	src            inc  source+1
.0c6f	d0 03		               bne  cnt
.0c71	ee 63 0c	               inc  source+2
.0c74	ad 8f 0c	cnt            lda  compte
.0c77	d0 08		               bne  decit
.0c79	ad 90 0c	               lda  compte+1
.0c7c	f0 09		               beq  fini
.0c7e	ce 90 0c	               dec  compte+1
.0c81	ce 8f 0c	decit          dec  compte
.0c84	4c 5e 0c	               jmp  destin
.0c87	20 d4 0b	fini           jsr  pop
.0c8a	60		               rts
.0c8b			words
>0c8b	00 00		s         .word     $0000
>0c8d	00 00		d         .word     $0000
>0c8f	00 00		compte    .word     $0000
.0c91			decword
.0c91	20 95 0b	               jsr  push
.0c94	86 fd		               stx  zpage2
.0c96	84 fe		               sty  zpage2+1
.0c98	20 d4 0b	               jsr  pop
.0c9b	60		               rts
.0c9c			inczp1
.0c9c	08		               php
.0c9d	48		               pha
.0c9e	e6 fb		               inc  zpage1
.0ca0	a5 fb		               lda  zpage1
.0ca2	d0 02		               bne  nopage
.0ca4	e6 fc		               inc  zpage1+1
.0ca6	68		nopage         pla
.0ca7	28		               plp
.0ca8	60		               rts
.0ca9			deczp1
.0ca9	08		                php
.0caa	48		                pha
.0cab	c6 fb		                dec  zpage1
.0cad	d0 02		                bne  nopage
.0caf	c6 fc		                dec  zpage1+1
.0cb1	68		nopage          pla
.0cb2	28		                plp
.0cb3	60		                rts
.0cb4			inczp2
.0cb4	08		               php
.0cb5	48		               pha
.0cb6	e6 fd		               inc  zpage2
.0cb8	a5 fd		               lda  zpage2
.0cba	d0 02		               bne  nopage
.0cbc	e6 fe		               inc  zpage2+1
.0cbe	68		nopage         pla
.0cbf	28		               plp
.0cc0	60		               rts
.0cc1			deczp2
.0cc1	08		               php
.0cc2	48		               pha
.0cc3	a5 fd		               lda  zpage2
.0cc5	d0 02		               bne  nopage
.0cc7	c6 fe		               dec  zpage2+1
.0cc9	68		nopage         pla
.0cca	28		               plp
.0ccb	60		               rts
.0ccc			savezp1
.0ccc	08		               php
.0ccd	48		               pha
.0cce	a5 fb		               lda  zpage1
.0cd0	8d 48 0d	               sta  zp1
.0cd3	a5 fc		               lda  zpage1+1
.0cd5	8d 49 0d	               sta  zp1+1
.0cd8	68		               pla
.0cd9	28		               plp
.0cda	60		               rts
.0cdb			restzp1
.0cdb	08		               php
.0cdc	48		               pha
.0cdd	ad 48 0d	               lda zp1
.0ce0	85 fb		               sta zpage1
.0ce2	ad 49 0d	               lda zp1+1
.0ce5	85 fc		               sta zpage1+1
.0ce7	68		               pla
.0ce8	28		               plp
.0ce9	60		               rts
.0cea			savezp2
.0cea	08		         php
.0ceb	48		         pha
.0cec	a5 fd		         lda zpage2
.0cee	8d 4a 0d	         sta zp2
.0cf1	a5 fe		         lda zpage2+1
.0cf3	8d 4b 0d	         sta zp2+1
.0cf6	68		         pla
.0cf7	28		         plp
.0cf8	60		         rts
.0cf9			restzp2
.0cf9	08		                php
.0cfa	48		                pha
.0cfb	ad 4a 0d	                lda  zp2
.0cfe	85 fd		                sta  zpage2
.0d00	ad 4b 0d	                lda  zp2+1
.0d03	85 fe		                sta  zpage2+1
.0d05	68		                pla
.0d06	28		                plp
.0d07	60		                rts
.0d08			xy2addr
.0d08	08		                php
.0d09	48		                pha
.0d0a	8a		                txa
.0d0b	48		                pha
.0d0c	98		                tya
.0d0d	48		                pha
.0d0e	ad 43 0d	                lda     addr1+1
.0d11	8d 45 0d	                sta     addr2+1
.0d14	ad 42 0d	                lda     addr1
.0d17	8d 44 0d	                sta     addr2
.0d1a	c0 00		                cpy     #$00
.0d1c	f0 0f		                beq     addx
.0d1e	18		moreline        clc
.0d1f	6d 41 0d	                adc     ymult
.0d22	90 03		                bcc     norepy
.0d24	ee 45 0d	                inc     addr2+1
.0d27	8d 44 0d	norepy          sta     addr2
.0d2a	88		                dey
.0d2b	d0 f1		                bne     moreline
.0d2d	8a		addx            txa
.0d2e	18		                clc
.0d2f	6d 44 0d	                adc     addr2
.0d32	90 03		                bcc     thatsit
.0d34	ee 45 0d	                inc     addr2+1
.0d37	8d 44 0d	thatsit         sta     addr2
.0d3a	68		                pla
.0d3b	a8		                tay
.0d3c	68		                pla
.0d3d	aa		                tax
.0d3e	68		                pla
.0d3f	28		                plp
.0d40	60		                rts
>0d41	28		ymult          .byte     40
>0d42	00 00		addr1          .word     $0000
>0d44	00 00		addr2          .word     $0000
>0d46	00 00		bytecnt        .word     $0000
>0d48	00 00		zp1        .word   $0000
>0d4a	00 00		zp2        .word   $0000

;******  Return to file: colour.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>0d4c	01		a2hexcol       .byte     1              ; pour aputscxy
>0d4d	00		a2hexbkcol     .byte     %00000000
.0d4e			a2hexpos
>0d4e	00		a2hexpx        .byte     0              ; pour aputsxy
>0d4f	00		a2hexpy        .byte     0
>0d50	24		a2hexprefix    .byte     "$"            ; pour aputs
>0d51	00 00		a2hexstr       .word     $00
>0d53	00 00		               .word     $00
>0d55	00		               .byte     0              ; 0 end string
>0d56	30 30 30 30	abin           .null     "00000000"
>0d5a	30 30 30 30 00
>0d5f	20 20 20 00	adec           .null     "   "
.0d63			putahexfmtxy
.0d63	20 95 0b	               jsr  push
.0d66	20 b2 0d	               jsr  a2hex
.0d69	ae 4e 0d	               ldx  a2hexpx
.0d6c	ac 4f 0d	               ldy  a2hexpy
.0d6f	20 be 0a	               jsr  gotoxy
.0d72	a2 50		               ldx  #<a2hexprefix
.0d74	a0 0d		               ldy  #>a2hexprefix
.0d76	20 a4 0a	               jsr  puts
.0d79	20 d4 0b	               jsr  pop
.0d7c	60		               rts
.0d7d			putahexfmt
.0d7d	20 95 0b	               jsr  push
.0d80	20 b2 0d	               jsr  a2hex
.0d83	a2 50		               ldx  #<a2hexprefix
.0d85	a0 0d		               ldy  #>a2hexprefix
.0d87	20 a4 0a	               jsr  puts
.0d8a	20 d4 0b	               jsr  pop
.0d8d	60		               rts
.0d8e			putahex
.0d8e	20 95 0b	               jsr  push
.0d91	20 b2 0d	               jsr  a2hex
.0d94	a2 51		               ldx  #<a2hexstr
.0d96	a0 0d		               ldy  #>a2hexstr
.0d98	20 a4 0a	               jsr  puts
.0d9b	20 d4 0b	               jsr  pop
.0d9e	60		               rts
.0d9f			nib2hex
.0d9f	08		               php
.0da0	29 0f		               and  #$0f
.0da2	f8		               sed
.0da3	18		               clc
.0da4	69 90		               adc  #$90
.0da6	69 40		               adc  #$40
.0da8	d8		               cld
.0da9	28		               plp
.0daa	60		               rts
.0dab			lsra4bits
.0dab	08		               php
.0dac	4a		               lsr
.0dad	4a		               lsr
.0dae	4a		               lsr
.0daf	4a		               lsr
.0db0	28		               plp
.0db1	60		               rts
.0db2			a2hex
.0db2	08		               php
.0db3	48		               pha
.0db4	48		               pha
.0db5	20 ab 0d	               jsr  lsra4bits
.0db8	20 9f 0d	               jsr  nib2hex
.0dbb	8d 51 0d	               sta  a2hexstr
.0dbe	68		               pla
.0dbf	20 9f 0d	               jsr  nib2hex
.0dc2	8d 52 0d	               sta  a2hexstr+1
.0dc5	a9 00		               lda  #$00                ; set end of string
.0dc7	8d 53 0d	               sta  a2hexstr+2
.0dca	68		               pla
.0dcb	28		               plp
.0dcc	60		               rts
.0dcd			xy2hex
.0dcd	20 95 0b	               jsr  push
.0dd0	20 b2 0d	               jsr  a2hex
.0dd3	8a		               txa
.0dd4	48		               pha
.0dd5	20 ab 0d	               jsr  lsra4bits
.0dd8	20 9f 0d	               jsr  nib2hex
.0ddb	8d 51 0d	               sta  a2hexstr
.0dde	68		               pla
.0ddf	20 9f 0d	               jsr  nib2hex
.0de2	8d 52 0d	               sta  a2hexstr+1
.0de5	98		               tya
.0de6	48		               pha
.0de7	20 ab 0d	               jsr  lsra4bits
.0dea	20 9f 0d	               jsr  nib2hex
.0ded	8d 53 0d	               sta  a2hexstr+2
.0df0	68		               pla
.0df1	20 9f 0d	               jsr  nib2hex
.0df4	8d 54 0d	               sta  a2hexstr+3
.0df7	a9 00		               lda  #$00                ; 0 ended string
.0df9	8d 55 0d	               sta  a2hexstr+4
.0dfc	20 d4 0b	               jsr  pop
.0dff			atobin
.0dff	20 95 0b	               jsr  push
.0e02	a2 08		               ldx  #8
.0e04	a0 00		               ldy  #0
.0e06	18		               clc
.0e07	2a		nextbit        rol
.0e08	48		               pha
.0e09	69 00		               adc  #$00
.0e0b	29 01		               and  #$01
.0e0d	20 9f 0d	               jsr  nib2hex
.0e10	99 56 0d	               sta  abin,y
.0e13	68		               pla
.0e14	c8		               iny
.0e15	ca		               dex
.0e16	d0 ef		               bne  nextbit
.0e18	a9 00		               lda  #0
.0e1a	99 56 0d	               sta  abin,y
.0e1d	20 d4 0b	               jsr  pull
.0e20	60		               rts
.0e21			putabin
.0e21	20 ff 0d	               jsr     atobin
.0e24	20 95 0b	               jsr     push
.0e27	a2 56		               ldx     #<abin
.0e29	a0 0d		               ldy     #>abin
.0e2b	20 a4 0a	               jsr     puts
.0e2e	20 d4 0b	               jsr     pop
.0e31	60		               rts
.0e32			printabin
.0e32	20 95 0b	               jsr     push
.0e35	a2 56		               ldx     #<abin
.0e37	a0 0d		               ldy     #>abin
.0e39	20 a4 0a	               jsr     puts
.0e3c	20 d4 0b	               jsr     pop
.0e3f	60		               rts
.0e40			putabinfmt
.0e40	08		               php
.0e41	48		               pha
.0e42	a9 25		               lda     #"%"
.0e44	20 9e 0a	               jsr     putch
.0e47	68		               pla
.0e48	20 21 0e	               jsr     putabin
.0e4b	28		               plp
.0e4c	60		               rts
.0e4d			putabinxy
.0e4d	20 be 0a	               jsr     gotoxy
.0e50	20 21 0e	               jsr     putabin
.0e53	60		               rts
.0e54			putabinfmtxy
.0e54	20 be 0a	               jsr     gotoxy
.0e57	20 40 0e	               jsr     putabinfmt
.0e5a	60		               rts
.0e5b			atodec
.0e5b	20 95 0b	               jsr  push
.0e5e	f8		               sed
.0e5f	aa		               tax
.0e60	a0 00		               ldy  #$00
.0e62	a9 00		               lda  #$00
.0e64	18		nextbit        clc
.0e65	69 01		               adc  #$01
.0e67	90 01		               bcc  decx
.0e69	c8		               iny
.0e6a	ca		decx           dex
.0e6b	d0 f7		               bne  nextbit
.0e6d	48		               pha
.0e6e	98		               tya
.0e6f	20 9f 0d	               jsr  nib2hex
.0e72	8d 5f 0d	               sta  adec
.0e75	68		               pla
.0e76	48		               pha
.0e77	20 9f 0d	               jsr  nib2hex
.0e7a	8d 61 0d	               sta  adec+2
.0e7d	68		               pla
.0e7e	6a		               ror
.0e7f	6a		               ror
.0e80	6a		               ror
.0e81	6a		               ror
.0e82	20 9f 0d	               jsr  nib2hex
.0e85	8d 60 0d	               sta  adec+1
.0e88	d8		               cld
.0e89	20 d4 0b	               jsr  pull
.0e8c	60		               rts
>0e8d	00 00 00	buffer         .byte     0,0,0

;******  Return to file: colour.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>0e90	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>0e94	00 00 00 00 00 00 00 00 00 0d 00 00
>0ea0	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>0ea4	00 00 00 00 00 00 00 00 00 00 00 00
>0eb0	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>0eb4	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>0ec0	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>0ec4	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>0ed0	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>0ed4	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>0ee0	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>0ee4	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>0ef0	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>0ef4	00 00 00 00 00 00 00 00 00 00 00 00
>0f00	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>0f04	00 00 00 00 00 00 00 00 00 00 00 00
>0f10	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>0f14	00 00 00 00 00 00 00 00 00 00 00 00
>0f20	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>0f24	00 00 00 00 00 00 00 00 00 00 00 00
>0f30	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>0f34	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>0f40	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>0f44	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>0f50	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>0f54	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>0f60	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>0f64	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>0f70	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>0f74	00 00 00 00 00 00 00 00 00 00 00 00
>0f80	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>0f84	00 00 00 00 00 00 00 00 00 00 00 00
.0f90			waitstop
.0f90	20 95 0b	               jsr  push
.0f93	20 ed f6	wait           jsr  k_stop
.0f96	d0 fb		               bne  wait
.0f98	20 d4 0b	               jsr  pop
.0f9b	60		               rts
.0f9c			anykey
.0f9c	08		               php
.0f9d	48		               pha
.0f9e	a5 cb		nokey          lda 203
.0fa0	c9 40		               cmp #64
.0fa2	f0 fa		               beq nokey
.0fa4	20 aa 0f	               jsr releasekey
.0fa7	68		               pla
.0fa8	28		               plp
.0fa9	60		               rts
.0faa			releasekey
.0faa	08		               php
.0fab	48		               pha
.0fac	a5 cb		keypressed     lda 203
.0fae	c9 40		               cmp #64
.0fb0	d0 fa		               bne keypressed
.0fb2	68		               pla
.0fb3	28		               plp
.0fb4	60		               rts
.0fb5			getkey
.0fb5	20 e4 ff	again          jsr  getin
.0fb8	c9 00		               cmp  #0
.0fba	f0 f9		               beq  again
.0fbc	60		               rts
.0fbd			waitkey
.0fbd	20 95 0b	               jsr  push
.0fc0	8d 0e 10	               sta  thekey
.0fc3	20 e4 ff	nope           jsr  getin
.0fc6	20 d2 ff	               jsr  chrout
.0fc9	cd 0e 10	               cmp  thekey
.0fcc	d0 f5		               bne  nope
.0fce	20 d2 ff	               jsr  chrout
.0fd1	20 d4 0b	               jsr  pop
.0fd4	60		               rts
.0fd5			waitspace
.0fd5	20 95 0b	               jsr  push
.0fd8	a9 7f		wait           lda  #$7f  ;%01111111
.0fda	8d 00 dc	               sta  $dc00
.0fdd	ad 01 dc	               lda  $dc01
.0fe0	29 10		               and  #$10  ;mask %00010000
.0fe2	d0 f4		               bne  wait
.0fe4	20 d4 0b	               jsr  pop
.0fe7			waitsstop
.0fe7	20 95 0b	               jsr  push
.0fea	20 ed f6	wait           jsr  k_stop  ;%01111111
.0fed	d0 fb		               bne  wait
.0fef	20 d4 0b	               jsr  pop
.0ff2			waitreturn
.0ff2	20 95 0b	               jsr  push
.0ff5	ad 0f 10	               lda  thecount
.0ff8	8d 00 04	               sta  scrnram
.0ffb	a9 02		               lda  #$02
.0ffd	8d 00 d8	               sta  colorram
.1000	20 e4 ff	nope           jsr  getin
.1003	c9 0d		nohex          cmp  #$0d
.1005	d0 f9		               bne  nope
.1007	ee 0f 10	               inc  thecount
.100a	20 d4 0b	               jsr  pop
.100d	60		               rts
>100e	00		thekey         .byte   0
>100f	01		thecount       .byte   $01

;******  Return to file: colour.asm


;******  End of listing

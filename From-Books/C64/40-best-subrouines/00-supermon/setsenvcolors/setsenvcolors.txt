
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L setsenvcolors.txt -o setsenvcolors.prg setsenvcolors.asm
; Tue Jun 18 22:40:17 2024

;Offset	;Hex		;Source

;******  Processing input file: setsenvcolors.asm

="20240619-080814"	            Version = "20240619-080814"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: setsenvcolors.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: setsenvcolors.asm

.080d			main
.080d	20 3a 0a	            jsr scrmaninit
.0810	20 19 08	            jsr setsenvcolors
.0813	20 37 08	            jsr help
.0816	4c 74 a4	            jmp b_warmstart
.0819			setsenvcolors
.0819	08		            php
.081a	48		            pha
.081b	a9 06		            lda #cbleu
.081d	8d 21 d0	            sta vicbackcol
.0820	a9 03		            lda #ccyan
.0822	8d 20 d0	            sta vicbordcol
.0825	a9 01		            lda #cblanc
.0827	8d 86 02	            sta bascol
.082a	a9 93		            lda #147
.082c	20 d2 ff	            jsr chrout
.082f	a9 13		            lda #19
.0831	20 d2 ff	            jsr chrout
.0834	68		            pla
.0835	28		            plp
.0836	60		            rts
.0837			help
.0837	20 5a 0a	                jsr cls
.083a	a9 0e		                lda #14
.083c	20 d2 ff	                jsr $ffd2
.083f	20 68 0b	               jsr  push
.0842	a2 e8		isx            ldx  #<line
.0844	a0 09		isy            ldy  #>line
.0846	20 77 0a	               jsr  puts
.0849	20 a7 0b	               jsr  pull
.084c	20 68 0b	               jsr  push
.084f	a2 8e		isx            ldx  #<headera
.0851	a0 08		isy            ldy  #>headera
.0853	20 77 0a	               jsr  puts
.0856	20 a7 0b	               jsr  pull
.0859	20 68 0b	               jsr  push
.085c	a2 10		isx            ldx  #<headerb
.085e	a0 09		isy            ldy  #>headerb
.0860	20 77 0a	               jsr  puts
.0863	20 a7 0b	               jsr  pull
.0866	20 68 0b	               jsr  push
.0869	a2 94		isx            ldx  #<shortcuts
.086b	a0 09		isy            ldy  #>shortcuts
.086d	20 77 0a	               jsr  puts
.0870	20 a7 0b	               jsr  pull
.0873	20 68 0b	               jsr  push
.0876	a2 11		isx            ldx  #<helptext
.0878	a0 0a		isy            ldy  #>helptext
.087a	20 77 0a	               jsr  puts
.087d	20 a7 0b	               jsr  pull
.0880	20 68 0b	               jsr  push
.0883	a2 e8		isx            ldx  #<line
.0885	a0 09		isy            ldy  #>line
.0887	20 77 0a	               jsr  puts
.088a	20 a7 0b	               jsr  pull
.088d	60		                rts
.088e			headera
>088e	20 20 20 20	                .text          "     40 BEST MACHINE CODE ROUTINES"
>0892	20 34 30 20 c2 c5 d3 d4 20 cd c1 c3 c8 c9 ce c5
>08a2	20 c3 cf c4 c5 20 d2 cf d5 d4 c9 ce c5 d3
>08b0	0d		          .byte   $0d
>08b1	20 20 20 20	                .text          "          FOR THE COMMODORE 64"
>08b5	20 20 20 20 20 20 c6 cf d2 20 d4 c8 c5 20 c3 cf
>08c5	cd cd cf c4 cf d2 c5 20 36 34
>08cf	0d		          .byte   $0d
>08d0	20 20 20 20	                .text          "       Book by Mark Greenshields."
>08d4	20 20 20 c2 4f 4f 4b 20 42 59 20 cd 41 52 4b 20
>08e4	c7 52 45 45 4e 53 48 49 45 4c 44 53 2e
>08f1	0d		          .byte   $0d
>08f2	20 20 20 20	                .text          "          ISBN 0-7156-1899-7"
>08f6	20 20 20 20 20 20 c9 d3 c2 ce 20 30 2d 37 31 35
>0906	36 2d 31 38 39 39 2d 37
>090e	0d 00		          .byte   $0d,0
>0910	20 20 20 20	headerb         .text          "         setsenvcolors (p79)"
>0914	20 20 20 20 20 53 45 54 53 45 4e 56 43 4f 4c 4f
>0924	52 53 20 28 50 37 39 29
>092c	0d		          .byte   $0d
>092d	20 20 20 20	                .text          "        (c) 1979 Brad Templeton"
>0931	20 20 20 20 28 43 29 20 31 39 37 39 20 c2 52 41
>0941	44 20 d4 45 4d 50 4c 45 54 4f 4e
>094c	0d		          .byte   $0d
>094d	20 20 20 20	                .text          "     programmed by Daniel Lafrance."
>0951	20 50 52 4f 47 52 41 4d 4d 45 44 20 42 59 20 c4
>0961	41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e
>0970	0d		          .byte   $0d
>0971	20 20 20 20	                .text   format("        Version: %s.",Version)
>0975	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>0985	34 30 36 31 39 2d 30 38 30 38 31 34 2e
>0992	0d 00		          .byte   $0d,0
>0994	20 2d 2d 2d	shortcuts .text          " -------- S H O R T - C U T S ---------"
>0998	2d 2d 2d 2d 2d 20 d3 20 c8 20 cf 20 d2 20 d4 20
>09a8	2d 20 c3 20 d5 20 d4 20 d3 20 2d 2d 2d 2d 2d 2d
>09b8	2d 2d 2d
>09bb	0d		          .byte   $0d
>09bc	20 52 55 4e	          .text   format(" run=SYS%5d, help=SYS%5d",main, help)
>09c0	3d d3 d9 d3 20 32 30 36 31 2c 20 48 45 4c 50 3d
>09d0	d3 d9 d3 20 32 31 30 33
>09d8	0d		          .byte   $0d
>09d9	20 43 4c 53	          .text   format(" cls=SYS%5d",cls)
>09dd	3d d3 d9 d3 20 32 36 35 30
>09e6	0d 00		          .byte   $0d,0
>09e8	20 2d 2d 2d	line      .text          " --------------------------------------"
>09ec	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09fc	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0a0c	2d 2d 2d
>0a0f	0d 00		          .byte   $0d,0
>0a11	20 53 45 54	helptext  .text   format(" setsenvcolors: SYS%5d",setsenvcolors)
>0a15	53 45 4e 56 43 4f 4c 4f 52 53 3a 20 d3 d9 d3 20
>0a25	32 30 37 33
>0a29	0d		          .byte   $0d
>0a2a	20 45 58 2e	          .text   format(" ex.: SYS%5d",setsenvcolors)
>0a2e	3a 20 d3 d9 d3 20 32 30 37 33
>0a38	0d 00		          .byte   $0d,0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0a3a			libtart

;******  Return to file: setsenvcolors.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: setsenvcolors.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-sid.asm

=$d400			sidv1flow   =   $d400 ; 54272 - Voice 1 Low freq register low byte.
=$d401			sidv1fhigh  =   $d401 ; 54273 - Voice 1 High freq register high byte.
=$d402			sidv1pwlow 	=   $d402 ; 54274 - Voice 1 Pulse waveform width register low byte.
=$d403			sidv1pwhigh =   $d403 ; 54275 - Voice 1 Pulse waveform width register high byte.
=$d404			sidv1control=   $d404 ; 54276 - Voice 1 Voice control register.
=$d405			sidv1atkdec =	$d405 ; 54277 - 0-3: Voice 1 Decay duration, 4-7: Attack duration.
=$d406			sidv1stnrel =   $d406 ; 54278 - 0-3: Voice 1 Rel. duration, 4-7: Sustain duration.
=$d407			sidv2flow   =   $d407 ; 54279 - Voice 2 Low freq register low byte.
=$d408			sidv2fhigh  =   $d408 ; 54280 - Voice 2 High freq register high byte.
=$d409			sidv2pwlow 	=   $d409 ; 54281 - Voice 2 Pulse waveform width register low byte.
=$d40a			sidv2pwhigh	=   $d40a ; 54282 - Voice 2 Pulse waveform width register high byte.
=$d40b			sidv2control=   $d40b ; 54283 - Voice 2 Voice control register.
=$d40c			sidv2atkdec =   $d40c ; 54284 - Voice 2 0-3: Decay duration, 4-7: Attack duration.
=$d40d			sidv2stnrel =   $d40d ; 54285 - Voice 2 0-3: Rel. duration, 4-7: Sustain duration.
=$d40e			sidv3flow   =   $d40e ; 54286 - Voice 3 Low freq register low byte.
=$d40f			sidv3fhigh  =   $d40f ; 54287 - Voice 3 High freq register high byte.
=$d410			sidv3pwlow 	=   $d410 ; 54288 - Voice 3 Pulse waveform width register low byte.
=$d411			sidv3pwhigh =   $d411 ; 54289 - Voice 3 Pulse waveform width register high byte.
=$d412			sidv3control=   $d412 ; 54290 - Voice 3 Poice control register.
=$d413			sidv3atkdec =   $d413 ; 54291 - Voice 3 0-3: Decay duration, 4-7: Attack duration.
=$d414			sidv3stnrel =   $d414 ; 54292 - Voice 3 0-3: Rel. duration, 4-7: Sustain duration.
=$d415			sidcutlo    =   $d415 ; 54293 - Bits 0-2 = low portion of filter cutoff frequency.
=$d416			sidcuthi    =   $d416 ; 54294 - Filter cutoff frequency (high byte).
=$d417			sidreson    =   $d417 ; 54295 - Filter resonnance control register.
=$d418			sidsigvol  =    $d418 ; 54296 - Volume and Filter selectv register.
=$d419			sidpotx    =    $d419 ; 54297 - Read game paddle 1 (or 3) X position.
=$d41a			sidpoty    =    $d41a ; 54298 - Read game paddle 1 (or 3) Y position.
=$d41b			sidrandom  =    $d41b ; 54299 - Read oscillator/Random number generator.
=$d41c			sidenv3    =    $d41c ; 54300 - Envelope Generator 3 output.

;******  Return to file: setsenvcolors.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: setsenvcolors.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-sid-notes-ntsc.asm

=$0000			silence     = $0000 ; Silence (no frequency)
=$010c			do0   = $010C ;   16,35Hz NTSC (hex): hi: $01, lo: $0C ; (dec): lo: 12, Hi:  1
=$011c			dod0  = $011C ;   17,33Hz NTSC (hex): hi: $01, lo: $1C ; (dec): lo: 28, Hi:  1
=$012d			re0   = $012D ;   18,35Hz NTSC (hex): hi: $01, lo: $2D ; (dec): lo: 45, Hi:  1
=$013f			red0  = $013F ;   19,45Hz NTSC (hex): hi: $01, lo: $3F ; (dec): lo: 63, Hi:  1
=$0152			mi0   = $0152 ;   20,60Hz NTSC (hex): hi: $01, lo: $52 ; (dec): lo: 82, Hi:  1
=$0166			fa0   = $0166 ;   21,83Hz NTSC (hex): hi: $01, lo: $66 ; (dec): lo:102, Hi:  1
=$017b			fad0  = $017B ;   23,13Hz NTSC (hex): hi: $01, lo: $7B ; (dec): lo:123, Hi:  1
=$0192			sol0  = $0192 ;   24,50Hz NTSC (hex): hi: $01, lo: $92 ; (dec): lo:146, Hi:  1
=$01aa			sold0 = $01AA ;   25,96Hz NTSC (hex): hi: $01, lo: $AA ; (dec): lo:170, Hi:  1
=$01c3			la0   = $01C3 ;   27,50Hz NTSC (hex): hi: $01, lo: $C3 ; (dec): lo:195, Hi:  1
=$01de			lad0  = $01DE ;   29,14Hz NTSC (hex): hi: $01, lo: $DE ; (dec): lo:222, Hi:  1
=$01fa			si0   = $01FA ;   30,87Hz NTSC (hex): hi: $01, lo: $FA ; (dec): lo:250, Hi:  1
=$0219			do1   = $0219 ;   32,71Hz NTSC (hex): hi: $02, lo: $19 ; (dec): lo: 25, Hi:  2
=$0238			dod1  = $0238 ;   34,65Hz NTSC (hex): hi: $02, lo: $38 ; (dec): lo: 56, Hi:  2
=$025a			re1   = $025A ;   36,71Hz NTSC (hex): hi: $02, lo: $5A ; (dec): lo: 90, Hi:  2
=$027e			red1  = $027E ;   38,89Hz NTSC (hex): hi: $02, lo: $7E ; (dec): lo:126, Hi:  2
=$02a4			mi1   = $02A4 ;   41,21Hz NTSC (hex): hi: $02, lo: $A4 ; (dec): lo:164, Hi:  2
=$02cc			fa1   = $02CC ;   43,66Hz NTSC (hex): hi: $02, lo: $CC ; (dec): lo:204, Hi:  2
=$02f7			fad1  = $02F7 ;   46,25Hz NTSC (hex): hi: $02, lo: $F7 ; (dec): lo:247, Hi:  2
=$0324			sol1  = $0324 ;   49,00Hz NTSC (hex): hi: $03, lo: $24 ; (dec): lo: 36, Hi:  3
=$0354			sold1 = $0354 ;   51,91Hz NTSC (hex): hi: $03, lo: $54 ; (dec): lo: 84, Hi:  3
=$0386			la1   = $0386 ;   55,00Hz NTSC (hex): hi: $03, lo: $86 ; (dec): lo:134, Hi:  3
=$03bc			lad1  = $03BC ;   58,28Hz NTSC (hex): hi: $03, lo: $BC ; (dec): lo:188, Hi:  3
=$03f5			si1   = $03F5 ;   61,74Hz NTSC (hex): hi: $03, lo: $F5 ; (dec): lo:245, Hi:  3
=$0431			do2   = $0431 ;   65,41Hz NTSC (hex): hi: $04, lo: $31 ; (dec): lo: 49, Hi:  4
=$0471			dod2  = $0471 ;   69,30Hz NTSC (hex): hi: $04, lo: $71 ; (dec): lo:113, Hi:  4
=$04b4			re2   = $04B4 ;   73,41Hz NTSC (hex): hi: $04, lo: $B4 ; (dec): lo:180, Hi:  4
=$04fc			red2  = $04FC ;   77,79Hz NTSC (hex): hi: $04, lo: $FC ; (dec): lo:252, Hi:  4
=$0548			mi2   = $0548 ;   82,41Hz NTSC (hex): hi: $05, lo: $48 ; (dec): lo: 72, Hi:  5
=$0598			fa2   = $0598 ;   87,31Hz NTSC (hex): hi: $05, lo: $98 ; (dec): lo:152, Hi:  5
=$05ed			fad2  = $05ED ;   92,50Hz NTSC (hex): hi: $05, lo: $ED ; (dec): lo:237, Hi:  5
=$0648			sol2  = $0648 ;   98,00Hz NTSC (hex): hi: $06, lo: $48 ; (dec): lo: 72, Hi:  6
=$06a7			sold2 = $06A7 ;  103,83Hz NTSC (hex): hi: $06, lo: $A7 ; (dec): lo:167, Hi:  6
=$070c			la2   = $070C ;  110,00Hz NTSC (hex): hi: $07, lo: $0C ; (dec): lo: 12, Hi:  7
=$0778			lad2  = $0778 ;  116,55Hz NTSC (hex): hi: $07, lo: $78 ; (dec): lo:120, Hi:  7
=$07ea			si2   = $07EA ;  123,48Hz NTSC (hex): hi: $07, lo: $EA ; (dec): lo:234, Hi:  7
=$0862			do3   = $0862 ;  130,83Hz NTSC (hex): hi: $08, lo: $62 ; (dec): lo: 98, Hi:  8
=$08e2			dod3  = $08E2 ;  138,60Hz NTSC (hex): hi: $08, lo: $E2 ; (dec): lo:226, Hi:  8
=$0969			re3   = $0969 ;  146,83Hz NTSC (hex): hi: $09, lo: $69 ; (dec): lo:105, Hi:  9
=$09f8			red3  = $09F8 ;  155,58Hz NTSC (hex): hi: $09, lo: $F8 ; (dec): lo:248, Hi:  9
=$0a90			mi3   = $0A90 ;  164,83Hz NTSC (hex): hi: $0A, lo: $90 ; (dec): lo:144, Hi: 10
=$0b31			fa3   = $0B31 ;  174,63Hz NTSC (hex): hi: $0B, lo: $31 ; (dec): lo: 49, Hi: 11
=$0bdb			fad3  = $0BDB ;  185,00Hz NTSC (hex): hi: $0B, lo: $DB ; (dec): lo:219, Hi: 11
=$0c8f			sol3  = $0C8F ;  196,00Hz NTSC (hex): hi: $0C, lo: $8F ; (dec): lo:143, Hi: 12
=$0d4e			sold3 = $0D4E ;  207,65Hz NTSC (hex): hi: $0D, lo: $4E ; (dec): lo: 78, Hi: 13
=$0e19			la3   = $0E19 ;  220,00Hz NTSC (hex): hi: $0E, lo: $19 ; (dec): lo: 25, Hi: 14
=$0ef0			lad3  = $0EF0 ;  233,10Hz NTSC (hex): hi: $0E, lo: $F0 ; (dec): lo:240, Hi: 14
=$0fd3			si3   = $0FD3 ;  246,95Hz NTSC (hex): hi: $0F, lo: $D3 ; (dec): lo:211, Hi: 15
=$10c4			do4   = $10C4 ;  261,65Hz NTSC (hex): hi: $10, lo: $C4 ; (dec): lo:196, Hi: 16
=$11c3			dod4  = $11C3 ;  277,20Hz NTSC (hex): hi: $11, lo: $C3 ; (dec): lo:195, Hi: 17
=$12d1			re4   = $12D1 ;  293,65Hz NTSC (hex): hi: $12, lo: $D1 ; (dec): lo:209, Hi: 18
=$13f0			red4  = $13F0 ;  311,15Hz NTSC (hex): hi: $13, lo: $F0 ; (dec): lo:240, Hi: 19
=$1520			mi4   = $1520 ;  329,65Hz NTSC (hex): hi: $15, lo: $20 ; (dec): lo: 32, Hi: 21
=$1661			fa4   = $1661 ;  349,25Hz NTSC (hex): hi: $16, lo: $61 ; (dec): lo: 97, Hi: 22
=$17b6			fad4  = $17B6 ;  370,00Hz NTSC (hex): hi: $17, lo: $B6 ; (dec): lo:182, Hi: 23
=$191f			sol4  = $191F ;  392,00Hz NTSC (hex): hi: $19, lo: $1F ; (dec): lo: 31, Hi: 25
=$1a9d			sold4 = $1A9D ;  415,30Hz NTSC (hex): hi: $1A, lo: $9D ; (dec): lo:157, Hi: 26
=$1c32			la4   = $1C32 ;  440,00Hz NTSC (hex): hi: $1C, lo: $32 ; (dec): lo: 50, Hi: 28
=$1de0			lad4  = $1DE0 ;  466,20Hz NTSC (hex): hi: $1D, lo: $E0 ; (dec): lo:224, Hi: 29
=$1fa6			si4   = $1FA6 ;  493,90Hz NTSC (hex): hi: $1F, lo: $A6 ; (dec): lo:166, Hi: 31
=$2188			do5   = $2188 ;  523,30Hz NTSC (hex): hi: $21, lo: $88 ; (dec): lo:136, Hi: 33
=$2387			dod5  = $2387 ;  554,40Hz NTSC (hex): hi: $23, lo: $87 ; (dec): lo:135, Hi: 35
=$25a2			re5   = $25A2 ;  587,30Hz NTSC (hex): hi: $25, lo: $A2 ; (dec): lo:162, Hi: 37
=$27e0			red5  = $27E0 ;  622,30Hz NTSC (hex): hi: $27, lo: $E0 ; (dec): lo:224, Hi: 39
=$2a3f			mi5   = $2A3F ;  659,30Hz NTSC (hex): hi: $2A, lo: $3F ; (dec): lo: 63, Hi: 42
=$2cc2			fa5   = $2CC2 ;  698,50Hz NTSC (hex): hi: $2C, lo: $C2 ; (dec): lo:194, Hi: 44
=$2f6b			fad5  = $2F6B ;  740,00Hz NTSC (hex): hi: $2F, lo: $6B ; (dec): lo:107, Hi: 47
=$323d			sol5  = $323D ;  784,00Hz NTSC (hex): hi: $32, lo: $3D ; (dec): lo: 61, Hi: 50
=$3539			sold5 = $3539 ;  830,60Hz NTSC (hex): hi: $35, lo: $39 ; (dec): lo: 57, Hi: 53
=$3864			la5   = $3864 ;  880,00Hz NTSC (hex): hi: $38, lo: $64 ; (dec): lo:100, Hi: 56
=$3bbf			lad5  = $3BBF ;  932,40Hz NTSC (hex): hi: $3B, lo: $BF ; (dec): lo:191, Hi: 59
=$3f4c			si5   = $3F4C ;  987,80Hz NTSC (hex): hi: $3F, lo: $4C ; (dec): lo: 76, Hi: 63
=$4311			do6   = $4311 ; 1046,60Hz NTSC (hex): hi: $43, lo: $11 ; (dec): lo: 17, Hi: 67
=$470d			dod6  = $470D ; 1108,80Hz NTSC (hex): hi: $47, lo: $0D ; (dec): lo: 13, Hi: 71
=$4b45			re6   = $4B45 ; 1174,60Hz NTSC (hex): hi: $4B, lo: $45 ; (dec): lo: 69, Hi: 75
=$4fc1			red6  = $4FC1 ; 1244,60Hz NTSC (hex): hi: $4F, lo: $C1 ; (dec): lo:193, Hi: 79
=$547f			mi6   = $547F ; 1318,60Hz NTSC (hex): hi: $54, lo: $7F ; (dec): lo:127, Hi: 84
=$5985			fa6   = $5985 ; 1397,00Hz NTSC (hex): hi: $59, lo: $85 ; (dec): lo:133, Hi: 89
=$5ed7			fad6  = $5ED7 ; 1480,00Hz NTSC (hex): hi: $5E, lo: $D7 ; (dec): lo:215, Hi: 94
=$647a			sol6  = $647A ; 1568,00Hz NTSC (hex): hi: $64, lo: $7A ; (dec): lo:122, Hi:100
=$6a73			sold6 = $6A73 ; 1661,20Hz NTSC (hex): hi: $6A, lo: $73 ; (dec): lo:115, Hi:106
=$70c8			la6   = $70C8 ; 1760,00Hz NTSC (hex): hi: $70, lo: $C8 ; (dec): lo:200, Hi:112
=$777f			lad6  = $777F ; 1864,80Hz NTSC (hex): hi: $77, lo: $7F ; (dec): lo:127, Hi:119
=$7e99			si6   = $7E99 ; 1975,60Hz NTSC (hex): hi: $7E, lo: $99 ; (dec): lo:153, Hi:126
=$8622			do7   = $8622 ; 2093,20Hz NTSC (hex): hi: $86, lo: $22 ; (dec): lo: 34, Hi:134
=$8e1a			dod7  = $8E1A ; 2217,60Hz NTSC (hex): hi: $8E, lo: $1A ; (dec): lo: 26, Hi:142
=$9689			re7   = $9689 ; 2349,20Hz NTSC (hex): hi: $96, lo: $89 ; (dec): lo:137, Hi:150
=$9f82			red7  = $9F82 ; 2489,20Hz NTSC (hex): hi: $9F, lo: $82 ; (dec): lo:130, Hi:159
=$a8fe			mi7   = $A8FE ; 2637,20Hz NTSC (hex): hi: $A8, lo: $FE ; (dec): lo:254, Hi:168
=$b30a			fa7   = $B30A ; 2794,00Hz NTSC (hex): hi: $B3, lo: $0A ; (dec): lo: 10, Hi:179
=$bdad			fad7  = $BDAD ; 2960,00Hz NTSC (hex): hi: $BD, lo: $AD ; (dec): lo:173, Hi:189
=$c8f4			sol7  = $C8F4 ; 3136,00Hz NTSC (hex): hi: $C8, lo: $F4 ; (dec): lo:244, Hi:200
=$d4e6			sold7 = $D4E6 ; 3322,40Hz NTSC (hex): hi: $D4, lo: $E6 ; (dec): lo:230, Hi:212
=$e18f			la7   = $E18F ; 3520,00Hz NTSC (hex): hi: $E1, lo: $8F ; (dec): lo:143, Hi:225
=$eefe			lad7  = $EEFE ; 3729,60Hz NTSC (hex): hi: $EE, lo: $FE ; (dec): lo:254, Hi:238
=$fd31			si7   = $FD31 ; 3951,20Hz NTSC (hex): hi: $FD, lo: $31 ; (dec): lo: 49, Hi:253

;******  Return to file: setsenvcolors.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0a3a			scrmaninit
.0a3a	20 68 0b	               jsr  push
.0a3d	a9 06		               lda  #vbleu
.0a3f	8d 21 d0	               sta  vicbackcol
.0a42	a9 05		               lda  #vvert
.0a44	8d 20 d0	               sta  vicbordcol
.0a47	a9 01		               lda  #vblanc
.0a49	8d 86 02	               sta  bascol
.0a4c	ad 00 04	               lda  scrnram
.0a4f	8d 00 04	               sta  scrnram
.0a52	20 5a 0a	               jsr  cls
.0a55	20 a7 0b	               jsr  pop
.0a58	60		               rts
>0a59	8e		characterset   .byte b_uppercase
.0a5a			cls
.0a5a	08		               php
.0a5b	48		               pha
.0a5c	a9 93		               lda  #$93
.0a5e	20 71 0a	               jsr  putch
.0a61	68		               pla
.0a62	28		               plp
.0a63	60		               rts
.0a64			putnch
.0a64	08		               php
.0a65	e0 00		               cpx  #$00
.0a67	f0 06		               beq  out
.0a69	20 d2 ff	again          jsr  $ffd2
.0a6c	ca		               dex
.0a6d	d0 fa		               bne  again
.0a6f	28		out            plp
.0a70	60		               rts
.0a71			putch
.0a71	08		               php
.0a72	20 d2 ff	               jsr  $ffd2
.0a75	28		               plp
.0a76	60		               rts
.0a77			puts
.0a77	20 68 0b	               jsr  push
.0a7a	86 fb		               stx  zpage1
.0a7c	84 fc		               sty  zpage1+1
.0a7e	a0 00		               ldy  #0
.0a80	b1 fb		next           lda  (zpage1),y
.0a82	f0 09		               beq  exit
.0a84	20 71 0a	               jsr  putch
.0a87	20 6f 0c	               jsr  inczp1
.0a8a	4c 80 0a	               jmp  next
.0a8d	20 a7 0b	exit           jsr  pop
.0a90	60		               rts
.0a91			gotoxy
.0a91	08		               php
.0a92	18		               clc
.0a93	8a		               txa
.0a94	48		               pha
.0a95	98		               tya
.0a96	aa		               tax
.0a97	68		               pla
.0a98	a8		               tay
.0a99	20 f0 ff	               jsr  kplot
.0a9c	28		               plp
.0a9d	60		               rts
.0a9e			cursor
=$0286			bascol    =    $0286
.0a9e	08		               php
.0a9f	48		               pha
.0aa0	90 12		               bcc  restore
.0aa2	20 f0 ff	               jsr  kplot
.0aa5	8c c6 0a	               sty  cx
.0aa8	8e c7 0a	               stx  cy
.0aab	ad 86 02	               lda  bascol
.0aae	8d c8 0a	               sta  bcol
.0ab1	4c c3 0a	               jmp  out
.0ab4	ae c7 0a	restore        ldx  cy
.0ab7	ac c6 0a	               ldy  cx
.0aba	20 f0 ff	               jsr  kplot
.0abd	ad c8 0a	               lda  bcol
.0ac0	8d 86 02	               sta  bascol
.0ac3	68		out            pla
.0ac4	28		               plp
.0ac5	60		               rts
>0ac6	00		cx   .byte     $00
>0ac7	00		cy   .byte     $00
>0ac8	00		bcol .byte     $00
.0ac9			cursave
.0ac9	08		               php
.0aca	38		               sec
.0acb	20 9e 0a	               jsr  cursor
.0ace	28		               plp
.0acf	60		               rts
.0ad0			curput
.0ad0	08		               php
.0ad1	18		               clc
.0ad2	20 9e 0a	               jsr  cursor
.0ad5	28		               plp
.0ad6	60		               rts
.0ad7			putsxy
.0ad7	20 68 0b	               jsr  push
.0ada	86 fb		               stx  zpage1
.0adc	84 fc		               sty  zpage1+1
.0ade	a0 00		               ldy  #$00
.0ae0	b1 fb		               lda  (zpage1),y
.0ae2	aa		               tax
.0ae3	20 6f 0c	               jsr  inczp1
.0ae6	b1 fb		               lda  (zpage1),y
.0ae8	a8		               tay
.0ae9	20 91 0a	               jsr  gotoxy
.0aec	20 6f 0c	               jsr  inczp1
.0aef	a6 fb		               ldx  zpage1
.0af1	a4 fc		               ldy  zpage1+1
.0af3	20 77 0a	               jsr  puts
.0af6	20 a7 0b	               jsr  pop
.0af9	60		               rts
>0afa	00 00		straddr   .word     $00
>0afc	00		px        .byte     $00
>0afd	00		py        .byte     $00
>0afe	00 00		zp1       .word     $00
.0b00			putscxy
.0b00	20 68 0b	               jsr  push
.0b03	84 fc		               sty  zpage1+1
.0b05	86 fb		               stx  zpage1
.0b07	ad 86 02	               lda  bascol
.0b0a	8d 2a 0b	               sta  bc
.0b0d	a0 00		               ldy #$00
.0b0f	b1 fb		               lda  (zpage1),y
.0b11	8d 86 02	               sta  bascol
.0b14	20 6f 0c	               jsr  inczp1
.0b17	a6 fb		               ldx  zpage1
.0b19	a4 fc		               ldy  zpage1+1
.0b1b	20 d7 0a	               jsr  putsxy
.0b1e	ad 2a 0b	               lda  bc
.0b21	8d 86 02	               sta  bascol
.0b24	20 a7 0b	               jsr  pop
.0b27	60		               rts
>0b28	00 00		straddr  .word      $00
>0b2a	00		bc       .byte      $00
>0b2b	00 00		zp1      .word      $00
.0b2d			putrahex
.0b2d	08		               php
.0b2e	48		               pha
.0b2f	20 85 0d	               jsr  a2hex
.0b32	a9 24		               lda  #<a2hexstr
.0b34	a0 0d		               ldy  #>a2hexstr
.0b36	20 77 0a	               jsr  puts
.0b39	68		               pla
.0b3a	28		               plp
.0b3b	60		               rts
.0b3c			kputrahexxy
.0b3c			bputrahexxy
.0b3c			putrahexxy
.0b3c	08		               php
.0b3d	20 85 0d	               jsr  a2hex
.0b40	a9 21		               lda  #<a2hexpos
.0b42	a0 0d		               ldy  #>a2hexpos
.0b44	20 d7 0a	               jsr  putsxy
.0b47	68		               pla
.0b48	28		               plp
.0b49	60		               rts
.0b4a			putrahexcxy
.0b4a	08		               php
.0b4b	20 85 0d	               jsr  a2hex
.0b4e	a9 21		               lda  #<a2hexpos
.0b50	a0 0d		               ldy  #>a2hexpos
.0b52	20 00 0b	               jsr  putscxy
.0b55	68		               pla
.0b56	28		               plp
.0b57	60		               rts
.0b58			setinverse
.0b58	48		               pha
.0b59	a9 12		               lda  #$12
.0b5b	20 d2 ff	               jsr  $ffd2
.0b5e	68		               pla
.0b5f	60		               rts
.0b60			clrinverse
.0b60	48		               pha
.0b61	a9 92		               lda  #$92
.0b63	20 d2 ff	               jsr  $ffd2
.0b66	68		               pla
.0b67	60		               rts

;******  Return to file: setsenvcolors.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.0b68			push
.0b68	08		          php            ; stack : flg, pcl, pch
.0b69	78		          sei
.0b6a	8d a4 0b	          sta  ra        ; save a
.0b6d	68		          pla            ; stack : pcl, pch
.0b6e	8d a3 0b	          sta  rp        ; save rp
.0b71	68		          pla            ; stack : pch
.0b72	8d a5 0b	          sta  pc        ; save pcl
.0b75	68		          pla            ; stack : -
.0b76	8d a6 0b	          sta  pc+1      ; save pch
.0b79	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0b7b	48		          pha            ; stack : zp1l
.0b7c	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0b7e	48		          pha            ; stack : zp1h, zp1l
.0b7f	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0b81	48		          pha            ; stack : zp2l, zp1h, zp1l
.0b82	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0b84	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0b85	ad a3 0b	          lda  rp        ; get rp
.0b88	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0b89	ad a4 0b	          lda  ra        ; get a
.0b8c	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0b8d	8a		          txa            ; get x
.0b8e	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b8f	98		          tya            ; get y
.0b90	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b91	ad a6 0b	          lda  pc+1      ; get pch
.0b94	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b95	ad a5 0b	          lda  pc        ; get pcl
.0b98	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b99	ad a3 0b	          lda  rp        ; get rp
.0b9c	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b9d	ad a4 0b	          lda  ra        ; get a
.0ba0	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ba1	58		          cli
.0ba2	60		          rts
>0ba3	00		rp        .byte     0
>0ba4	00		ra        .byte     0
>0ba5	00 00		pc        .word     0
.0ba7			pull
.0ba7			pop
.0ba7	78		          sei
.0ba8	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ba9	8d dc 0b	          sta  pc        ; save pcl
.0bac	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0bad	8d dd 0b	          sta  pc+1      ; save pch
.0bb0	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0bb1	a8		          tay            ; set y
.0bb2	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0bb3	aa		          tax            ; set x
.0bb4	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0bb5	8d db 0b	          sta  ra        ; save a
.0bb8	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0bb9	8d da 0b	          sta  rp        ; save rp
.0bbc	68		          pla            ; stack : zp2l, zp1h, zp1l
.0bbd	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0bbf	68		          pla            ; stack : zp1h, zp1l
.0bc0	85 fd		          sta  zpage2    ; get zpage2 High byte
.0bc2	68		          pla            ; stack : zp1l
.0bc3	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0bc5	68		          pla            ; stack :
.0bc6	85 fb		          sta  zpage1    ; get zpage1 High byte
.0bc8	ad dd 0b	          lda  pc+1      ; get pch
.0bcb	48		          pha            ; stack : pch
.0bcc	ad dc 0b	          lda  pc
.0bcf	48		          pha            ; stack : pcl, pch
.0bd0	ad da 0b	          lda  rp        ; get rp
.0bd3	48		          pha            ; stack : rp, pcl, pch
.0bd4	ad db 0b	          lda  ra        ; set ra
.0bd7	58		          cli
.0bd8	28		          plp            ; stack : pcl, pch
.0bd9	60		          rts
>0bda	00		rp        .byte     0
>0bdb	00		ra        .byte     0
>0bdc	00 00		pc        .word     0

;******  Return to file: setsenvcolors.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.0bde			blkfill
.0bde	20 68 0b	bf0            jsr  push
.0be1	20 9f 0c	               jsr  savezp1
.0be4	84 fc		               sty  zpage1+1
.0be6	a0 00		               ldy  #$00
.0be8	84 fb		               sty  zpage1
.0bea	91 fb		bf1            sta  (zpage1),y
.0bec	c8		               iny
.0bed	d0 fb		               bne  bf1
.0bef	20 ae 0c	               jsr  restzp1
.0bf2	20 a7 0b	               jsr  pop
.0bf5	60		               rts
.0bf6			memfill
.0bf6	20 68 0b	               jsr  push
.0bf9	20 de 0b	mf1            jsr  blkfill
.0bfc	c8		               iny
.0bfd	ca		               dex
.0bfe	d0 f9		               bne  mf1
.0c00	20 a7 0b	               jsr  pop
.0c03	60		               rts
.0c04			memmove
.0c04	20 68 0b	               jsr  push
.0c07	ba		               tsx            ; On se crée un pointeur ...
.0c08	8a		               txa
.0c09	18		               clc
.0c0a	69 0b		               adc  #11
.0c0c	a8		               tay
.0c0d	a2 06		               ldx  #$06
.0c0f	b9 00 01	nextbyte       lda  $0100,y
.0c12	99 5e 0c	               sta  words,y
.0c15	c8		               iny
.0c16	ca		               dex
.0c17	d0 f6		               bne  nextbyte
.0c19	ad 5e 0c	               lda  s
.0c1c	8d 35 0c	               sta  source+1
.0c1f	ad 5f 0c	               lda  s+1
.0c22	8d 36 0c	               sta  source+2
.0c25	ad 60 0c	               lda  d
.0c28	8d 32 0c	               sta  destin+1
.0c2b	ad 61 0c	               lda  d+1
.0c2e	8d 33 0c	               sta  destin+2
.0c31	ad ff ff	destin         lda  $ffff
.0c34	8d ff ff	source         sta  $ffff
.0c37	ee 32 0c	               inc  destin+1
.0c3a	d0 03		               bne  src
.0c3c	ee 33 0c	               inc  destin+2
.0c3f	ee 35 0c	src            inc  source+1
.0c42	d0 03		               bne  cnt
.0c44	ee 36 0c	               inc  source+2
.0c47	ad 62 0c	cnt            lda  compte
.0c4a	d0 08		               bne  decit
.0c4c	ad 63 0c	               lda  compte+1
.0c4f	f0 09		               beq  fini
.0c51	ce 63 0c	               dec  compte+1
.0c54	ce 62 0c	decit          dec  compte
.0c57	4c 31 0c	               jmp  destin
.0c5a	20 a7 0b	fini           jsr  pop
.0c5d	60		               rts
.0c5e			words
>0c5e	00 00		s         .word     $0000
>0c60	00 00		d         .word     $0000
>0c62	00 00		compte    .word     $0000
.0c64			decword
.0c64	20 68 0b	               jsr  push
.0c67	86 fd		               stx  zpage2
.0c69	84 fe		               sty  zpage2+1
.0c6b	20 a7 0b	               jsr  pop
.0c6e	60		               rts
.0c6f			inczp1
.0c6f	08		               php
.0c70	48		               pha
.0c71	e6 fb		               inc  zpage1
.0c73	a5 fb		               lda  zpage1
.0c75	d0 02		               bne  nopage
.0c77	e6 fc		               inc  zpage1+1
.0c79	68		nopage         pla
.0c7a	28		               plp
.0c7b	60		               rts
.0c7c			deczp1
.0c7c	08		                php
.0c7d	48		                pha
.0c7e	c6 fb		                dec  zpage1
.0c80	d0 02		                bne  nopage
.0c82	c6 fc		                dec  zpage1+1
.0c84	68		nopage          pla
.0c85	28		                plp
.0c86	60		                rts
.0c87			inczp2
.0c87	08		               php
.0c88	48		               pha
.0c89	e6 fd		               inc  zpage2
.0c8b	a5 fd		               lda  zpage2
.0c8d	d0 02		               bne  nopage
.0c8f	e6 fe		               inc  zpage2+1
.0c91	68		nopage         pla
.0c92	28		               plp
.0c93	60		               rts
.0c94			deczp2
.0c94	08		               php
.0c95	48		               pha
.0c96	a5 fd		               lda  zpage2
.0c98	d0 02		               bne  nopage
.0c9a	c6 fe		               dec  zpage2+1
.0c9c	68		nopage         pla
.0c9d	28		               plp
.0c9e	60		               rts
.0c9f			savezp1
.0c9f	08		               php
.0ca0	48		               pha
.0ca1	a5 fb		               lda  zpage1
.0ca3	8d 1b 0d	               sta  zp1
.0ca6	a5 fc		               lda  zpage1+1
.0ca8	8d 1c 0d	               sta  zp1+1
.0cab	68		               pla
.0cac	28		               plp
.0cad	60		               rts
.0cae			restzp1
.0cae	08		               php
.0caf	48		               pha
.0cb0	ad 1b 0d	               lda zp1
.0cb3	85 fb		               sta zpage1
.0cb5	ad 1c 0d	               lda zp1+1
.0cb8	85 fc		               sta zpage1+1
.0cba	68		               pla
.0cbb	28		               plp
.0cbc	60		               rts
.0cbd			savezp2
.0cbd	08		         php
.0cbe	48		         pha
.0cbf	a5 fd		         lda zpage2
.0cc1	8d 1d 0d	         sta zp2
.0cc4	a5 fe		         lda zpage2+1
.0cc6	8d 1e 0d	         sta zp2+1
.0cc9	68		         pla
.0cca	28		         plp
.0ccb	60		         rts
.0ccc			restzp2
.0ccc	08		                php
.0ccd	48		                pha
.0cce	ad 1d 0d	                lda  zp2
.0cd1	85 fd		                sta  zpage2
.0cd3	ad 1e 0d	                lda  zp2+1
.0cd6	85 fe		                sta  zpage2+1
.0cd8	68		                pla
.0cd9	28		                plp
.0cda	60		                rts
.0cdb			xy2addr
.0cdb	08		                php
.0cdc	48		                pha
.0cdd	8a		                txa
.0cde	48		                pha
.0cdf	98		                tya
.0ce0	48		                pha
.0ce1	ad 16 0d	                lda     addr1+1
.0ce4	8d 18 0d	                sta     addr2+1
.0ce7	ad 15 0d	                lda     addr1
.0cea	8d 17 0d	                sta     addr2
.0ced	c0 00		                cpy     #$00
.0cef	f0 0f		                beq     addx
.0cf1	18		moreline        clc
.0cf2	6d 14 0d	                adc     ymult
.0cf5	90 03		                bcc     norepy
.0cf7	ee 18 0d	                inc     addr2+1
.0cfa	8d 17 0d	norepy          sta     addr2
.0cfd	88		                dey
.0cfe	d0 f1		                bne     moreline
.0d00	8a		addx            txa
.0d01	18		                clc
.0d02	6d 17 0d	                adc     addr2
.0d05	90 03		                bcc     thatsit
.0d07	ee 18 0d	                inc     addr2+1
.0d0a	8d 17 0d	thatsit         sta     addr2
.0d0d	68		                pla
.0d0e	a8		                tay
.0d0f	68		                pla
.0d10	aa		                tax
.0d11	68		                pla
.0d12	28		                plp
.0d13	60		                rts
>0d14	28		ymult          .byte     40
>0d15	00 00		addr1          .word     $0000
>0d17	00 00		addr2          .word     $0000
>0d19	00 00		bytecnt        .word     $0000
>0d1b	00 00		zp1        .word   $0000
>0d1d	00 00		zp2        .word   $0000

;******  Return to file: setsenvcolors.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>0d1f	01		a2hexcol       .byte     1              ; pour aputscxy
>0d20	00		a2hexbkcol     .byte     %00000000
.0d21			a2hexpos
>0d21	00		a2hexpx        .byte     0              ; pour aputsxy
>0d22	00		a2hexpy        .byte     0
>0d23	24		a2hexprefix    .byte     "$"            ; pour aputs
>0d24	00 00		a2hexstr       .word     $00
>0d26	00 00		               .word     $00
>0d28	00		               .byte     0              ; 0 end string
>0d29	30 30 30 30	abin           .null     "00000000"
>0d2d	30 30 30 30 00
>0d32	20 20 20 00	adec           .null     "   "
.0d36			putahexfmtxy
.0d36	20 68 0b	               jsr  push
.0d39	20 85 0d	               jsr  a2hex
.0d3c	ae 21 0d	               ldx  a2hexpx
.0d3f	ac 22 0d	               ldy  a2hexpy
.0d42	20 91 0a	               jsr  gotoxy
.0d45	a2 23		               ldx  #<a2hexprefix
.0d47	a0 0d		               ldy  #>a2hexprefix
.0d49	20 77 0a	               jsr  puts
.0d4c	20 a7 0b	               jsr  pop
.0d4f	60		               rts
.0d50			putahexfmt
.0d50	20 68 0b	               jsr  push
.0d53	20 85 0d	               jsr  a2hex
.0d56	a2 23		               ldx  #<a2hexprefix
.0d58	a0 0d		               ldy  #>a2hexprefix
.0d5a	20 77 0a	               jsr  puts
.0d5d	20 a7 0b	               jsr  pop
.0d60	60		               rts
.0d61			putahex
.0d61	20 68 0b	               jsr  push
.0d64	20 85 0d	               jsr  a2hex
.0d67	a2 24		               ldx  #<a2hexstr
.0d69	a0 0d		               ldy  #>a2hexstr
.0d6b	20 77 0a	               jsr  puts
.0d6e	20 a7 0b	               jsr  pop
.0d71	60		               rts
.0d72			nib2hex
.0d72	08		               php
.0d73	29 0f		               and  #$0f
.0d75	f8		               sed
.0d76	18		               clc
.0d77	69 90		               adc  #$90
.0d79	69 40		               adc  #$40
.0d7b	d8		               cld
.0d7c	28		               plp
.0d7d	60		               rts
.0d7e			lsra4bits
.0d7e	08		               php
.0d7f	4a		               lsr
.0d80	4a		               lsr
.0d81	4a		               lsr
.0d82	4a		               lsr
.0d83	28		               plp
.0d84	60		               rts
.0d85			a2hex
.0d85	08		               php
.0d86	48		               pha
.0d87	48		               pha
.0d88	20 7e 0d	               jsr  lsra4bits
.0d8b	20 72 0d	               jsr  nib2hex
.0d8e	8d 24 0d	               sta  a2hexstr
.0d91	68		               pla
.0d92	20 72 0d	               jsr  nib2hex
.0d95	8d 25 0d	               sta  a2hexstr+1
.0d98	a9 00		               lda  #$00                ; set end of string
.0d9a	8d 26 0d	               sta  a2hexstr+2
.0d9d	68		               pla
.0d9e	28		               plp
.0d9f	60		               rts
.0da0			xy2hex
.0da0	20 68 0b	               jsr  push
.0da3	20 85 0d	               jsr  a2hex
.0da6	8a		               txa
.0da7	48		               pha
.0da8	20 7e 0d	               jsr  lsra4bits
.0dab	20 72 0d	               jsr  nib2hex
.0dae	8d 24 0d	               sta  a2hexstr
.0db1	68		               pla
.0db2	20 72 0d	               jsr  nib2hex
.0db5	8d 25 0d	               sta  a2hexstr+1
.0db8	98		               tya
.0db9	48		               pha
.0dba	20 7e 0d	               jsr  lsra4bits
.0dbd	20 72 0d	               jsr  nib2hex
.0dc0	8d 26 0d	               sta  a2hexstr+2
.0dc3	68		               pla
.0dc4	20 72 0d	               jsr  nib2hex
.0dc7	8d 27 0d	               sta  a2hexstr+3
.0dca	a9 00		               lda  #$00                ; 0 ended string
.0dcc	8d 28 0d	               sta  a2hexstr+4
.0dcf	20 a7 0b	               jsr  pop
.0dd2			atobin
.0dd2	20 68 0b	               jsr  push
.0dd5	a2 08		               ldx  #8
.0dd7	a0 00		               ldy  #0
.0dd9	18		               clc
.0dda	2a		nextbit        rol
.0ddb	48		               pha
.0ddc	69 00		               adc  #$00
.0dde	29 01		               and  #$01
.0de0	20 72 0d	               jsr  nib2hex
.0de3	99 29 0d	               sta  abin,y
.0de6	68		               pla
.0de7	c8		               iny
.0de8	ca		               dex
.0de9	d0 ef		               bne  nextbit
.0deb	a9 00		               lda  #0
.0ded	99 29 0d	               sta  abin,y
.0df0	20 a7 0b	               jsr  pull
.0df3	60		               rts
.0df4			putabin
.0df4	20 d2 0d	               jsr     atobin
.0df7	20 68 0b	               jsr     push
.0dfa	a2 29		               ldx     #<abin
.0dfc	a0 0d		               ldy     #>abin
.0dfe	20 77 0a	               jsr     puts
.0e01	20 a7 0b	               jsr     pop
.0e04	60		               rts
.0e05			printabin
.0e05	20 68 0b	               jsr     push
.0e08	a2 29		               ldx     #<abin
.0e0a	a0 0d		               ldy     #>abin
.0e0c	20 77 0a	               jsr     puts
.0e0f	20 a7 0b	               jsr     pop
.0e12	60		               rts
.0e13			putabinfmt
.0e13	08		               php
.0e14	48		               pha
.0e15	a9 25		               lda     #"%"
.0e17	20 71 0a	               jsr     putch
.0e1a	68		               pla
.0e1b	20 f4 0d	               jsr     putabin
.0e1e	28		               plp
.0e1f	60		               rts
.0e20			putabinxy
.0e20	20 91 0a	               jsr     gotoxy
.0e23	20 f4 0d	               jsr     putabin
.0e26	60		               rts
.0e27			putabinfmtxy
.0e27	20 91 0a	               jsr     gotoxy
.0e2a	20 13 0e	               jsr     putabinfmt
.0e2d	60		               rts
.0e2e			atodec
.0e2e	20 68 0b	               jsr  push
.0e31	f8		               sed
.0e32	aa		               tax
.0e33	a0 00		               ldy  #$00
.0e35	a9 00		               lda  #$00
.0e37	18		nextbit        clc
.0e38	69 01		               adc  #$01
.0e3a	90 01		               bcc  decx
.0e3c	c8		               iny
.0e3d	ca		decx           dex
.0e3e	d0 f7		               bne  nextbit
.0e40	48		               pha
.0e41	98		               tya
.0e42	20 72 0d	               jsr  nib2hex
.0e45	8d 32 0d	               sta  adec
.0e48	68		               pla
.0e49	48		               pha
.0e4a	20 72 0d	               jsr  nib2hex
.0e4d	8d 34 0d	               sta  adec+2
.0e50	68		               pla
.0e51	6a		               ror
.0e52	6a		               ror
.0e53	6a		               ror
.0e54	6a		               ror
.0e55	20 72 0d	               jsr  nib2hex
.0e58	8d 33 0d	               sta  adec+1
.0e5b	d8		               cld
.0e5c	20 a7 0b	               jsr  pull
.0e5f	60		               rts
>0e60	00 00 00	buffer         .byte     0,0,0

;******  Return to file: setsenvcolors.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>0e63	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>0e67	00 00 00 00 00 00 00 00 00 0d 00 00
>0e73	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>0e77	00 00 00 00 00 00 00 00 00 00 00 00
>0e83	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>0e87	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>0e93	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>0e97	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>0ea3	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>0ea7	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>0eb3	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>0eb7	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>0ec3	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>0ec7	00 00 00 00 00 00 00 00 00 00 00 00
>0ed3	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>0ed7	00 00 00 00 00 00 00 00 00 00 00 00
>0ee3	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>0ee7	00 00 00 00 00 00 00 00 00 00 00 00
>0ef3	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>0ef7	00 00 00 00 00 00 00 00 00 00 00 00
>0f03	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>0f07	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>0f13	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>0f17	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>0f23	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>0f27	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>0f33	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>0f37	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>0f43	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>0f47	00 00 00 00 00 00 00 00 00 00 00 00
>0f53	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>0f57	00 00 00 00 00 00 00 00 00 00 00 00
.0f63			waitstop
.0f63	20 68 0b	               jsr  push
.0f66	20 ed f6	wait           jsr  k_stop
.0f69	d0 fb		               bne  wait
.0f6b	20 a7 0b	               jsr  pop
.0f6e	60		               rts
.0f6f			anykey
.0f6f	08		               php
.0f70	48		               pha
.0f71	a5 cb		nokey          lda 203
.0f73	c9 40		               cmp #64
.0f75	f0 fa		               beq nokey
.0f77	20 7d 0f	               jsr releasekey
.0f7a	68		               pla
.0f7b	28		               plp
.0f7c	60		               rts
.0f7d			releasekey
.0f7d	08		               php
.0f7e	48		               pha
.0f7f	a5 cb		keypressed     lda 203
.0f81	c9 40		               cmp #64
.0f83	d0 fa		               bne keypressed
.0f85	68		               pla
.0f86	28		               plp
.0f87	60		               rts
.0f88			getkey
.0f88	20 e4 ff	again          jsr  getin
.0f8b	c9 00		               cmp  #0
.0f8d	f0 f9		               beq  again
.0f8f	60		               rts
.0f90			waitkey
.0f90	20 68 0b	               jsr  push
.0f93	8d e1 0f	               sta  thekey
.0f96	20 e4 ff	nope           jsr  getin
.0f99	20 d2 ff	               jsr  chrout
.0f9c	cd e1 0f	               cmp  thekey
.0f9f	d0 f5		               bne  nope
.0fa1	20 d2 ff	               jsr  chrout
.0fa4	20 a7 0b	               jsr  pop
.0fa7	60		               rts
.0fa8			waitspace
.0fa8	20 68 0b	               jsr  push
.0fab	a9 7f		wait           lda  #$7f  ;%01111111
.0fad	8d 00 dc	               sta  $dc00
.0fb0	ad 01 dc	               lda  $dc01
.0fb3	29 10		               and  #$10  ;mask %00010000
.0fb5	d0 f4		               bne  wait
.0fb7	20 a7 0b	               jsr  pop
.0fba			waitsstop
.0fba	20 68 0b	               jsr  push
.0fbd	20 ed f6	wait           jsr  k_stop  ;%01111111
.0fc0	d0 fb		               bne  wait
.0fc2	20 a7 0b	               jsr  pop
.0fc5			waitreturn
.0fc5	20 68 0b	               jsr  push
.0fc8	ad e2 0f	               lda  thecount
.0fcb	8d 00 04	               sta  scrnram
.0fce	a9 02		               lda  #$02
.0fd0	8d 00 d8	               sta  colorram
.0fd3	20 e4 ff	nope           jsr  getin
.0fd6	c9 0d		nohex          cmp  #$0d
.0fd8	d0 f9		               bne  nope
.0fda	ee e2 0f	               inc  thecount
.0fdd	20 a7 0b	               jsr  pop
.0fe0	60		               rts
>0fe1	00		thekey         .byte   0
>0fe2	01		thecount       .byte   $01

;******  Return to file: setsenvcolors.asm


;******  End of listing

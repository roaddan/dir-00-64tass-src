
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L old.txt -o old.prg old.asm
; Thu May 25 22:52:06 2023

;Offset	;Hex		;Source

;******  Processing input file: old.asm

="20230503-172800"	                Version = "20230503-172800"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: old.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: old.asm

.080d			main
.080d	20 19 c0	                jsr scrmaninit
.0810	20 19 08	                jsr help
.0813	20 fc c3	                jsr anykey
.0816	4c 74 a4	                jmp b_warmstart
.0819			help
.0819	20 3a c0	                jsr cls
.081c	a2 9c		                ldx  #<line
.081e	a0 09		                ldy  #>line
.0820	20 4f c0	                jsr  puts
.0823	a2 47		                ldx  #<headera
.0825	a0 08		                ldy  #>headera
.0827	20 4f c0	                jsr  puts
.082a	a2 c9		                ldx  #<headerb
.082c	a0 08		                ldy  #>headerb
.082e	20 4f c0	                jsr  puts
.0831	a2 48		                ldx  #<shortcuts
.0833	a0 09		                ldy  #>shortcuts
.0835	20 4f c0	                jsr  puts
.0838	a2 c5		                ldx  #<helptext
.083a	a0 09		                ldy  #>helptext
.083c	20 4f c0	                jsr  puts
.083f	a2 9c		                ldx  #<line
.0841	a0 09		                ldy  #>line
.0843	20 4f c0	                jsr  puts
.0846	60		                rts
.0847			headera
>0847	20 20 20 20	                .text          "     40 BEST MACHINE CODE ROUTINES"
>084b	20 34 30 20 c2 c5 d3 d4 20 cd c1 c3 c8 c9 ce c5
>085b	20 c3 cf c4 c5 20 d2 cf d5 d4 c9 ce c5 d3
>0869	0d		                .byte   $0d
>086a	20 20 20 20	                .text          "          FOR THE COMMODORE 64"
>086e	20 20 20 20 20 20 c6 cf d2 20 d4 c8 c5 20 c3 cf
>087e	cd cd cf c4 cf d2 c5 20 36 34
>0888	0d		                .byte   $0d
>0889	20 20 20 20	                .text          "       Book by Mark Greenshields."
>088d	20 20 20 c2 4f 4f 4b 20 42 59 20 cd 41 52 4b 20
>089d	c7 52 45 45 4e 53 48 49 45 4c 44 53 2e
>08aa	0d		                .byte   $0d
>08ab	20 20 20 20	                .text          "          ISBN 0-7156-1899-7"
>08af	20 20 20 20 20 20 c9 d3 c2 ce 20 30 2d 37 31 35
>08bf	36 2d 31 38 39 39 2d 37
>08c7	0d 00		                .byte   $0d,0
>08c9	20 20 20 20	headerb         .text          "              old (p86)"
>08cd	20 20 20 20 20 20 20 20 20 20 4f 4c 44 20 28 50
>08dd	38 36 29
>08e0	0d		                .byte   $0d
>08e1	20 20 20 20	                .text          "        (c) 1979 Brad Templeton"
>08e5	20 20 20 20 28 43 29 20 31 39 37 39 20 c2 52 41
>08f5	44 20 d4 45 4d 50 4c 45 54 4f 4e
>0900	0d		                .byte   $0d
>0901	20 20 20 20	                .text          "     programmed by Daniel Lafrance."
>0905	20 50 52 4f 47 52 41 4d 4d 45 44 20 42 59 20 c4
>0915	41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e
>0924	0d		                .byte   $0d
>0925	20 20 20 20	                .text   format("        Version: %s.",Version)
>0929	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>0939	33 30 35 30 33 2d 31 37 32 38 30 30 2e
>0946	0d 00		                .byte   $0d,0
>0948	20 2d 2d 2d	shortcuts       .text          " -------- S H O R T - C U T S ---------"
>094c	2d 2d 2d 2d 2d 20 d3 20 c8 20 cf 20 d2 20 d4 20
>095c	2d 20 c3 20 d5 20 d4 20 d3 20 2d 2d 2d 2d 2d 2d
>096c	2d 2d 2d
>096f	0d		                .byte   $0d
>0970	20 52 55 4e	                .text   format(" run=SYS%5d, help=SYS%5d",main, help)
>0974	3d d3 d9 d3 20 32 30 36 31 2c 20 48 45 4c 50 3d
>0984	d3 d9 d3 20 32 30 37 33
>098c	0d		                .byte   $0d
>098d	20 43 4c 53	                .text   format(" cls=SYS%5d",cls)
>0991	3d d3 d9 d3 34 39 32 31 30
>099a	0d 00		                .byte   $0d,0
>099c	20 2d 2d 2d	line            .text          " --------------------------------------"
>09a0	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09b0	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09c0	2d 2d 2d
>09c3	0d 00		                .byte   $0d,0
>09c5	20 4f 4c 44	helptext        .text   format(" old: SYS%5d",old)
>09c9	3a 20 d3 d9 d3 34 39 31 35 32
>09d3	0d		                .byte   $0d
>09d4	20 45 58 2e	                .text   format(" ex.: SYS%5d",old)
>09d8	3a 20 d3 d9 d3 34 39 31 35 32
>09e2	0d 00		                .byte   $0d,0
.c000			old
.c000	a9 ff		                lda #$ff
.c002	a0 01		                ldy #$01
.c004	91 2b		                sta ($2b),y
.c006	20 33 a5	                jsr b_fixchaining ; $a533 ; Fix chaining.
.c009	a5 22		                lda $22
.c00b	18		                clc
.c00c	69 02		                adc #$02
.c00e	85 2d		                sta $2d
.c010	a5 23		                lda $23
.c012	69 00		                adc #$00
.c014	85 2e		                sta $2e
.c016	4c 5a a6	                jmp $a65a

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ; 97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.c019			libtart

;******  Return to file: old.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: old.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: old.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.c019			scrmaninit
.c019	20 40 c1	               jsr  push
.c01c	a9 06		               lda  #vbleu
.c01e	8d 21 d0	               sta  vicbackcol
.c021	a9 05		               lda  #vvert
.c023	8d 20 d0	               sta  vicbordcol
.c026	a9 01		               lda  #vblanc
.c028	8d 86 02	               sta  bascol
.c02b	ad 00 04	               lda  scrnram
.c02e	29 fd		               and  #%11111101
.c030	8d 00 04	               sta  scrnram
.c033	20 3a c0	               jsr  cls
.c036	20 7f c1	               jsr  pop
.c039	60		               rts
.c03a			cls
.c03a	08		               php
.c03b	48		               pha
.c03c	a9 93		               lda  #$93
.c03e	20 49 c0	               jsr  putch
.c041	a9 0e		               lda  #$0e
.c043	20 49 c0	               jsr  putch
.c046	68		               pla
.c047	28		               plp
.c048	60		               rts
.c049			putch
.c049	08		               php
.c04a	20 d2 ff	               jsr  $ffd2
.c04d	28		               plp
.c04e	60		               rts
.c04f			puts
.c04f	20 40 c1	               jsr  push
.c052	86 fb		               stx  zpage1
.c054	84 fc		               sty  zpage1+1
.c056	a0 00		               ldy  #0
.c058	b1 fb		next           lda  (zpage1),y
.c05a	f0 09		               beq  exit
.c05c	20 49 c0	               jsr  putch
.c05f	20 47 c2	               jsr  inczp1
.c062	4c 58 c0	               jmp  next
.c065	20 7f c1	exit           jsr  pop
.c068	60		               rts
.c069			gotoxy
.c069	08		               php
.c06a	18		               clc
.c06b	8a		               txa
.c06c	48		               pha
.c06d	98		               tya
.c06e	aa		               tax
.c06f	68		               pla
.c070	a8		               tay
.c071	20 f0 ff	               jsr  kplot
.c074	28		               plp
.c075	60		               rts
.c076			cursor
=$0286			bascol    =    $0286
.c076	08		               php
.c077	48		               pha
.c078	90 12		               bcc  restore
.c07a	20 f0 ff	               jsr  kplot
.c07d	8c 9e c0	               sty  cx
.c080	8e 9f c0	               stx  cy
.c083	ad 86 02	               lda  bascol
.c086	8d a0 c0	               sta  bcol
.c089	4c 9b c0	               jmp  out
.c08c	ae 9f c0	restore        ldx  cy
.c08f	ac 9e c0	               ldy  cx
.c092	20 f0 ff	               jsr  kplot
.c095	ad a0 c0	               lda  bcol
.c098	8d 86 02	               sta  bascol
.c09b	68		out            pla
.c09c	28		               plp
.c09d	60		               rts
>c09e	00		cx   .byte     $00
>c09f	00		cy   .byte     $00
>c0a0	00		bcol .byte     $00
.c0a1			cursave
.c0a1	08		               php
.c0a2	38		               sec
.c0a3	20 76 c0	               jsr  cursor
.c0a6	28		               plp
.c0a7	60		               rts
.c0a8			curput
.c0a8	08		               php
.c0a9	18		               clc
.c0aa	20 76 c0	               jsr  cursor
.c0ad	28		               plp
.c0ae	60		               rts
.c0af			putsxy
.c0af	20 40 c1	               jsr  push
.c0b2	86 fb		               stx  zpage1
.c0b4	84 fc		               sty  zpage1+1
.c0b6	a0 00		               ldy  #$00
.c0b8	b1 fb		               lda  (zpage1),y
.c0ba	aa		               tax
.c0bb	20 47 c2	               jsr  inczp1
.c0be	b1 fb		               lda  (zpage1),y
.c0c0	a8		               tay
.c0c1	20 69 c0	               jsr  gotoxy
.c0c4	20 47 c2	               jsr  inczp1
.c0c7	a6 fb		               ldx  zpage1
.c0c9	a4 fc		               ldy  zpage1+1
.c0cb	20 4f c0	               jsr  puts
.c0ce	20 7f c1	               jsr  pop
.c0d1	60		               rts
>c0d2	00 00		straddr   .word     $00
>c0d4	00		px        .byte     $00
>c0d5	00		py        .byte     $00
>c0d6	00 00		zp1       .word     $00
.c0d8			putscxy
.c0d8	20 40 c1	               jsr  push
.c0db	84 fc		               sty  zpage1+1
.c0dd	86 fb		               stx  zpage1
.c0df	ad 86 02	               lda  bascol
.c0e2	8d 02 c1	               sta  bc
.c0e5	a0 00		               ldy #$00
.c0e7	b1 fb		               lda  (zpage1),y
.c0e9	8d 86 02	               sta  bascol
.c0ec	20 47 c2	               jsr  inczp1
.c0ef	a6 fb		               ldx  zpage1
.c0f1	a4 fc		               ldy  zpage1+1
.c0f3	20 af c0	               jsr  putsxy
.c0f6	ad 02 c1	               lda  bc
.c0f9	8d 86 02	               sta  bascol
.c0fc	20 7f c1	               jsr  pop
.c0ff	60		               rts
>c100	00 00		straddr  .word      $00
>c102	00		bc       .byte      $00
>c103	00 00		zp1      .word      $00
.c105			putrahex
.c105	08		               php
.c106	48		               pha
.c107	20 4d c3	               jsr  a2hex
.c10a	a9 f9		               lda  #<a2hexstr
.c10c	a0 c2		               ldy  #>a2hexstr
.c10e	20 4f c0	               jsr  puts
.c111	68		               pla
.c112	28		               plp
.c113	60		               rts
.c114			kputrahexxy
.c114			bputrahexxy
.c114			putrahexxy
.c114	08		               php
.c115	20 4d c3	               jsr  a2hex
.c118	a9 f6		               lda  #<a2hexpos
.c11a	a0 c2		               ldy  #>a2hexpos
.c11c	20 af c0	               jsr  putsxy
.c11f	68		               pla
.c120	28		               plp
.c121	60		               rts
.c122			putrahexcxy
.c122	08		               php
.c123	20 4d c3	               jsr  a2hex
.c126	a9 f6		               lda  #<a2hexpos
.c128	a0 c2		               ldy  #>a2hexpos
.c12a	20 d8 c0	               jsr  putscxy
.c12d	68		               pla
.c12e	28		               plp
.c12f	60		               rts
.c130			setinverse
.c130	48		               pha
.c131	a9 12		               lda  #$12
.c133	20 d2 ff	               jsr  $ffd2
.c136	68		               pla
.c137	60		               rts
.c138			clrinverse
.c138	48		               pha
.c139	a9 92		               lda  #$92
.c13b	20 d2 ff	               jsr  $ffd2
.c13e	68		               pla
.c13f	60		               rts

;******  Return to file: old.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.c140			push
.c140	08		          php            ; stack : flg, pcl, pch
.c141	78		          sei
.c142	8d 7c c1	          sta  ra        ; save a
.c145	68		          pla            ; stack : pcl, pch
.c146	8d 7b c1	          sta  rp        ; save rp
.c149	68		          pla            ; stack : pch
.c14a	8d 7d c1	          sta  pc        ; save pcl
.c14d	68		          pla            ; stack : -
.c14e	8d 7e c1	          sta  pc+1      ; save pch
.c151	a5 fb		          lda  zpage1    ; get zpage1 low byte
.c153	48		          pha            ; stack : zp1l
.c154	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.c156	48		          pha            ; stack : zp1h, zp1l
.c157	a5 fd		          lda  zpage2    ; get zpage2 low byte
.c159	48		          pha            ; stack : zp2l, zp1h, zp1l
.c15a	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.c15c	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.c15d	ad 7b c1	          lda  rp        ; get rp
.c160	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c161	ad 7c c1	          lda  ra        ; get a
.c164	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c165	8a		          txa            ; get x
.c166	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c167	98		          tya            ; get y
.c168	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c169	ad 7e c1	          lda  pc+1      ; get pch
.c16c	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c16d	ad 7d c1	          lda  pc        ; get pcl
.c170	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c171	ad 7b c1	          lda  rp        ; get rp
.c174	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c175	ad 7c c1	          lda  ra        ; get a
.c178	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c179	58		          cli
.c17a	60		          rts
>c17b	00		rp        .byte     0
>c17c	00		ra        .byte     0
>c17d	00 00		pc        .word     0
.c17f			pull
.c17f			pop
.c17f	78		          sei
.c180	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c181	8d b4 c1	          sta  pc        ; save pcl
.c184	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c185	8d b5 c1	          sta  pc+1      ; save pch
.c188	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c189	a8		          tay            ; set y
.c18a	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c18b	aa		          tax            ; set x
.c18c	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c18d	8d b3 c1	          sta  ra        ; save a
.c190	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c191	8d b2 c1	          sta  rp        ; save rp
.c194	68		          pla            ; stack : zp2l, zp1h, zp1l
.c195	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.c197	68		          pla            ; stack : zp1h, zp1l
.c198	85 fd		          sta  zpage2    ; get zpage2 High byte
.c19a	68		          pla            ; stack : zp1l
.c19b	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.c19d	68		          pla            ; stack :
.c19e	85 fb		          sta  zpage1    ; get zpage1 High byte
.c1a0	ad b5 c1	          lda  pc+1      ; get pch
.c1a3	48		          pha            ; stack : pch
.c1a4	ad b4 c1	          lda  pc
.c1a7	48		          pha            ; stack : pcl, pch
.c1a8	ad b2 c1	          lda  rp        ; get rp
.c1ab	48		          pha            ; stack : rp, pcl, pch
.c1ac	ad b3 c1	          lda  ra        ; set ra
.c1af	58		          cli
.c1b0	28		          plp            ; stack : pcl, pch
.c1b1	60		          rts
>c1b2	00		rp        .byte     0
>c1b3	00		ra        .byte     0
>c1b4	00 00		pc        .word     0

;******  Return to file: old.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.c1b6			blkfill
.c1b6	20 40 c1	bf0            jsr  push
.c1b9	20 74 c2	               jsr  savezp1
.c1bc	84 fc		               sty  zpage1+1
.c1be	a0 00		               ldy  #$00
.c1c0	84 fb		               sty  zpage1
.c1c2	91 fb		bf1            sta  (zpage1),y
.c1c4	c8		               iny
.c1c5	d0 fb		               bne  bf1
.c1c7	20 83 c2	               jsr  restzp1
.c1ca	20 7f c1	               jsr  pop
.c1cd	60		               rts
.c1ce			memfill
.c1ce	20 40 c1	               jsr  push
.c1d1	20 b6 c1	mf1            jsr  blkfill
.c1d4	c8		               iny
.c1d5	ca		               dex
.c1d6	d0 f9		               bne  mf1
.c1d8	20 7f c1	               jsr  pop
.c1db	60		               rts
.c1dc			memmove
.c1dc	20 40 c1	               jsr  push
.c1df	ba		               tsx            ; On se crée un pointeur ...
.c1e0	8a		               txa
.c1e1	18		               clc
.c1e2	69 0b		               adc  #11
.c1e4	a8		               tay
.c1e5	a2 06		               ldx  #$06
.c1e7	b9 00 01	nextbyte       lda  $0100,y
.c1ea	99 36 c2	               sta  words,y
.c1ed	c8		               iny
.c1ee	ca		               dex
.c1ef	d0 f6		               bne  nextbyte
.c1f1	ad 36 c2	               lda  s
.c1f4	8d 0d c2	               sta  source+1
.c1f7	ad 37 c2	               lda  s+1
.c1fa	8d 0e c2	               sta  source+2
.c1fd	ad 38 c2	               lda  d
.c200	8d 0a c2	               sta  destin+1
.c203	ad 39 c2	               lda  d+1
.c206	8d 0b c2	               sta  destin+2
.c209	ad ff ff	destin         lda  $ffff
.c20c	8d ff ff	source         sta  $ffff
.c20f	ee 0a c2	               inc  destin+1
.c212	d0 03		               bne  src
.c214	ee 0b c2	               inc  destin+2
.c217	ee 0d c2	src            inc  source+1
.c21a	d0 03		               bne  cnt
.c21c	ee 0e c2	               inc  source+2
.c21f	ad 3a c2	cnt            lda  compte
.c222	d0 08		               bne  decit
.c224	ad 3b c2	               lda  compte+1
.c227	f0 09		               beq  fini
.c229	ce 3b c2	               dec  compte+1
.c22c	ce 3a c2	decit          dec  compte
.c22f	4c 09 c2	               jmp  destin
.c232	20 7f c1	fini           jsr  pop
.c235	60		               rts
.c236			words
>c236	00 00		s         .word     $0000
>c238	00 00		d         .word     $0000
>c23a	00 00		compte    .word     $0000
.c23c			decword
.c23c	20 40 c1	               jsr  push
.c23f	86 fd		               stx  zpage2
.c241	84 fe		               sty  zpage2+1
.c243	20 7f c1	               jsr  pop
.c246	60		               rts
.c247			inczp1
.c247	08		               php
.c248	e6 fb		               inc  zpage1
.c24a	d0 02		               bne  nopage
.c24c	e6 fc		               inc  zpage1+1
.c24e	28		nopage         plp
.c24f	60		               rts
.c250			deczp1
.c250	08		                php
.c251	48		                pha
.c252	c6 fb		                dec  zpage1
.c254	d0 02		                bne  nopage
.c256	c6 fc		                dec  zpage1+1
.c258	c6 fb		nopage          dec  zpage1
.c25a	68		                pla
.c25b	28		                plp
.c25c	60		                rts
.c25d			inczp2
.c25d	08		               php
.c25e	48		               pha
.c25f	e6 fd		               inc  zpage2
.c261	d0 02		               bne  nopage
.c263	e6 fe		               inc  zpage2+1
.c265	68		nopage         pla
.c266	28		               plp
.c267	60		               rts
.c268			deczp2
.c268	08		               php
.c269	48		               pha
.c26a	a5 fd		               lda  zpage2
.c26c	d0 02		               bne  nopage
.c26e	c6 fe		               dec  zpage2+1
.c270	c6 fd		nopage         dec  zpage2
.c272	28		               plp
.c273	60		               rts
.c274			savezp1
.c274	08		               php
.c275	48		               pha
.c276	a5 fb		               lda  zpage1
.c278	8d f0 c2	               sta  zp1
.c27b	a5 fc		               lda  zpage1+1
.c27d	8d f1 c2	               sta  zp1+1
.c280	68		               pla
.c281	28		               plp
.c282	60		               rts
.c283			restzp1
.c283	08		               php
.c284	48		               pha
.c285	ad f0 c2	               lda zp1
.c288	85 fb		               sta zpage1
.c28a	ad f1 c2	               lda zp1+1
.c28d	85 fc		               sta zpage1+1
.c28f	68		               pla
.c290	28		               plp
.c291	60		               rts
.c292			savezp2
.c292	08		         php
.c293	48		         pha
.c294	a5 fd		         lda zpage2
.c296	8d f2 c2	         sta zp2
.c299	a5 fe		         lda zpage2+1
.c29b	8d f3 c2	         sta zp2+1
.c29e	68		         pla
.c29f	28		         plp
.c2a0	60		         rts
.c2a1			restzp2
.c2a1	08		                php
.c2a2	48		                pha
.c2a3	ad f2 c2	                lda  zp2
.c2a6	85 fd		                sta  zpage2
.c2a8	ad f3 c2	                lda  zp2+1
.c2ab	85 fe		                sta  zpage2+1
.c2ad	68		                pla
.c2ae	28		                plp
.c2af	60		                rts
.c2b0			xy2addr
.c2b0	08		                php
.c2b1	48		                pha
.c2b2	8a		                txa
.c2b3	48		                pha
.c2b4	98		                tya
.c2b5	48		                pha
.c2b6	ad eb c2	                lda     addr1+1
.c2b9	8d ed c2	                sta     addr2+1
.c2bc	ad ea c2	                lda     addr1
.c2bf	8d ec c2	                sta     addr2
.c2c2	c0 00		                cpy     #$00
.c2c4	f0 0f		                beq     addx
.c2c6	18		moreline        clc
.c2c7	6d e9 c2	                adc     ymult
.c2ca	90 03		                bcc     norepy
.c2cc	ee ed c2	                inc     addr2+1
.c2cf	8d ec c2	norepy          sta     addr2
.c2d2	88		                dey
.c2d3	d0 f1		                bne     moreline
.c2d5	8a		addx            txa
.c2d6	18		                clc
.c2d7	6d ec c2	                adc     addr2
.c2da	90 03		                bcc     thatsit
.c2dc	ee ed c2	                inc     addr2+1
.c2df	8d ec c2	thatsit         sta     addr2
.c2e2	68		                pla
.c2e3	a8		                tay
.c2e4	68		                pla
.c2e5	aa		                tax
.c2e6	68		                pla
.c2e7	28		                plp
.c2e8	60		                rts
>c2e9	28		ymult          .byte     40
>c2ea	00 00		addr1          .word     $0000
>c2ec	00 00		addr2          .word     $0000
>c2ee	00 00		bytecnt        .word     $0000
>c2f0	00 00		zp1        .word   $0000
>c2f2	00 00		zp2        .word   $0000

;******  Return to file: old.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>c2f4	01		a2hexcol       .byte     1              ; pour aputscxy
>c2f5	00		a2hexbkcol     .byte     %00000000
.c2f6			a2hexpos
>c2f6	00		a2hexpx        .byte     0              ; pour aputsxy
>c2f7	00		a2hexpy        .byte     0
>c2f8	24		a2hexprefix    .byte     "$"            ; pour aputs
>c2f9	00 00		a2hexstr       .word     $00
>c2fb	00 00		               .word     $00
>c2fd	00		               .byte     0              ; 0 end string
.c2fe			putahexfmtxy
.c2fe	20 40 c1	               jsr  push
.c301	20 4d c3	               jsr  a2hex
.c304	ae f6 c2	               ldx  a2hexpx
.c307	ac f7 c2	               ldy  a2hexpy
.c30a	20 69 c0	               jsr  gotoxy
.c30d	a2 f8		               ldx  #<a2hexprefix
.c30f	a0 c2		               ldy  #>a2hexprefix
.c311	20 4f c0	               jsr  puts
.c314	20 7f c1	               jsr  pop
.c317	60		               rts
.c318			putahexfmt
.c318	20 40 c1	               jsr  push
.c31b	20 4d c3	               jsr  a2hex
.c31e	a2 f8		               ldx  #<a2hexprefix
.c320	a0 c2		               ldy  #>a2hexprefix
.c322	20 4f c0	               jsr  puts
.c325	20 7f c1	               jsr  pop
.c328	60		               rts
.c329			putahex
.c329	20 40 c1	               jsr  push
.c32c	20 4d c3	               jsr  a2hex
.c32f	a2 f9		               ldx  #<a2hexstr
.c331	a0 c2		               ldy  #>a2hexstr
.c333	20 4f c0	               jsr  puts
.c336	20 7f c1	               jsr  pop
.c339	60		               rts
.c33a			nib2hex
.c33a	08		               php
.c33b	29 0f		               and  #$0f
.c33d	f8		               sed
.c33e	18		               clc
.c33f	69 90		               adc  #$90
.c341	69 40		               adc  #$40
.c343	d8		               cld
.c344	28		               plp
.c345	60		               rts
.c346			lsra4bits
.c346	08		               php
.c347	4a		               lsr
.c348	4a		               lsr
.c349	4a		               lsr
.c34a	4a		               lsr
.c34b	28		               plp
.c34c	60		               rts
.c34d			a2hex
.c34d	08		               php
.c34e	48		               pha
.c34f	48		               pha
.c350	20 46 c3	               jsr  lsra4bits
.c353	20 3a c3	               jsr  nib2hex
.c356	8d f9 c2	               sta  a2hexstr
.c359	68		               pla
.c35a	20 3a c3	               jsr  nib2hex
.c35d	8d fa c2	               sta  a2hexstr+1
.c360	a9 00		               lda  #$00                ; set end of string
.c362	8d fb c2	               sta  a2hexstr+2
.c365	68		               pla
.c366	28		               plp
.c367	60		               rts
.c368			xy2hex
.c368	20 40 c1	               jsr  push
.c36b	20 4d c3	               jsr  a2hex
.c36e	8a		               txa
.c36f	48		               pha
.c370	20 46 c3	               jsr  lsra4bits
.c373	20 3a c3	               jsr  nib2hex
.c376	8d f9 c2	               sta  a2hexstr
.c379	68		               pla
.c37a	20 3a c3	               jsr  nib2hex
.c37d	8d fa c2	               sta  a2hexstr+1
.c380	98		               tya
.c381	48		               pha
.c382	20 46 c3	               jsr  lsra4bits
.c385	20 3a c3	               jsr  nib2hex
.c388	8d fb c2	               sta  a2hexstr+2
.c38b	68		               pla
.c38c	20 3a c3	               jsr  nib2hex
.c38f	8d fc c2	               sta  a2hexstr+3
.c392	a9 00		               lda  #$00                ; 0 ended string
.c394	8d fd c2	               sta  a2hexstr+4
.c397	20 7f c1	               jsr  pop
.c39a			atobin
.c39a	20 40 c1	               jsr     push
.c39d	a2 08		               ldx     #8
.c39f	a0 00		               ldy     #0
.c3a1	2a		nextbit        rol
.c3a2	48		               pha
.c3a3	69 00		               adc     #$00
.c3a5	29 01		               and     #$01
.c3a7	20 3a c3	               jsr     nib2hex
.c3aa	99 bb c3	               sta     abin,y
.c3ad	68		               pla
.c3ae	c8		               iny
.c3af	ca		               dex
.c3b0	d0 ef		               bne     nextbit
.c3b2	a9 00		               lda     #0
.c3b4	99 bb c3	               sta     abin,y
.c3b7	20 7f c1	               jsr     pull
.c3ba	60		               rts
>c3bb	30 30 30 30	abin           .null   "00000000"
>c3bf	30 30 30 30 00
.c3c4			putabin
.c3c4	20 9a c3	               jsr     atobin
.c3c7	20 40 c1	               jsr     push
.c3ca	a2 bb		               ldx     #<abin
.c3cc	a0 c3		               ldy     #>abin
.c3ce	20 4f c0	               jsr     puts
.c3d1	20 7f c1	               jsr     pop
.c3d4	60		               rts
.c3d5			putabinfmt
.c3d5	08		               php
.c3d6	48		               pha
.c3d7	a9 25		               lda     #"%"
.c3d9	20 49 c0	               jsr     putch
.c3dc	68		               pla
.c3dd	20 c4 c3	               jsr     putabin
.c3e0	28		               plp
.c3e1	60		               rts
.c3e2			putabinxy
.c3e2	20 69 c0	               jsr     gotoxy
.c3e5	20 c4 c3	               jsr     putabin
.c3e8	60		               rts
.c3e9			putabinfmtxy
.c3e9	20 69 c0	               jsr     gotoxy
.c3ec	20 d5 c3	               jsr     putabinfmt
.c3ef	60		               rts

;******  Return to file: old.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

.c3f0			waitstop
.c3f0	20 40 c1	                jsr     push
.c3f3	20 ed f6	wait            jsr     k_stop
.c3f6	d0 fb		                bne     wait
.c3f8	20 7f c1	                jsr     pop
.c3fb	60		                rts
.c3fc			anykey
.c3fc	08		                php
.c3fd	48		                pha
.c3fe	a5 cb		nokey           lda 203
.c400	c9 40		                cmp #64
.c402	f0 fa		                beq nokey
.c404	68		                pla
.c405	28		                plp
.c406	60		                rts
.c407			getkey
.c407	20 40 c1	                jsr     push
.c40a	20 cf ff	again           jsr     chrin
.c40d	4c 0a c4	                jmp     again
.c410	20 7f c1	                jsr     pop
.c413	60		                rts
.c414			waitkey
.c414	20 40 c1	                jsr     push
.c417	8d 2c c4	                sta     thekey
.c41a	20 e4 ff	nope            jsr     getin
.c41d	20 d2 ff	                jsr     chrout
.c420	cd 2c c4	                cmp     thekey
.c423	d0 f5		                bne     nope
.c425	20 d2 ff	                jsr     chrout
.c428	20 7f c1	                jsr     pop
.c42b	60		                rts
>c42c	00		thekey          .byte   0
.c42d			waitspace
.c42d	20 40 c1	                jsr     push
.c430	a9 7f		wait            lda     #$7f  ;%01111111
.c432	8d 00 dc	                sta     $dc00
.c435	ad 01 dc	                lda     $dc01
.c438	29 10		                and     #$10  ;mask %00010000
.c43a	d0 f4		                bne     wait
.c43c	20 7f c1	                jsr     pop
.c43f			waitsstop
.c43f	20 40 c1	                jsr     push
.c442	20 ed f6	wait            jsr     k_stop  ;%01111111
.c445	d0 fb		                bne     wait
.c447	20 7f c1	                jsr     pop
.c44a			waitreturn
.c44a	20 40 c1	                jsr     push
.c44d	ad 69 c4	                lda     thecount
.c450	8d 00 04	                sta     scrnram
.c453	a9 02		                lda     #$02
.c455	8d 00 d8	                sta     colorram
.c458	20 e4 ff	nope            jsr     getin
.c45b	20 d2 ff	                jsr     chrout
.c45e	c9 0d		                cmp     #$0d
.c460	d0 f6		                bne     nope
.c462	ee 69 c4	                inc     thecount
.c465	20 7f c1	                jsr     pop
.c468	60		                rts
>c469	01		thecount        .byte   $01

;******  Return to file: old.asm


;******  End of listing

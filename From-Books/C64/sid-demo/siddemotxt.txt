
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib" -i -L siddemotxt.txt -o siddemotxt.prg siddemotxt.asm
; Thu Jan 13 18:43:56 2022

;Offset	;Hex		;Source

;******  Processing input file: siddemotxt.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_map_kernal.asm"

=$0001			memmapreg = $0001     ; Registre de gestion mémoire du C64
=$90			kiostatus = $90       ; Kernal I/O status word (st) (byte)
=$b7			curfnlen  = $b7       ; Current filename length (byte)
=$b9			cursecadd = $b9       ; Current secondary address (byte)
=$ba			curdevno  = $ba       ; Current device number (byte)
=$bb			curfptr   = $bb       ; Current file pointer (word)
=$fb			zpage1    = $fb       ; zero page 1 address (word)
=$fd			zpage2    = $fd       ; zero page 2 address (word)
=$fb			zeropage  = zpage1
=$fd			zonepage  = zpage2
=$0286			bascol    = $0286     ;basic next chr colscreenram (byte)
=$0400			scrnram   = $0400     ;video character ram
=$0400			scrram0   = $0400
=$0500			scrram1   = $0500
=$0600			scrram2   = $0600
=$0700			scrram3   = $0700
=$0801			basicsta  = $0801     ;basic start address
=$a000			basicrom  = $a000
=$d000			vic       = $d000     ;vic base address
=$d000			chargen   = vic
=53265			vicreg11  = vic+$11   ;misc vic register
=53266			vicscan   = vic+$12   ;vic raster line number
=53272			viccptr   = vic+$18   ;vic ram/char page ptr
=53280			vborder   = vic+$20   ;video border col.
=53280			framecol  = vic+$20
=53281			backgrnd  = vic+$21
=53281			vbkgrnd   = vic+$21     ;video back col.
=$d400			sid       = $d400     ;sid base address
=$d800			colorram  = $d800     ;video color ram
=$d800			colram0   = $d800
=$d900			colram1   = $d900
=$da00			colram2   = $da00
=$db00			colram3   = $db00
=$dc00			cia1      = $dc00     ;cia1  base address
=$dd00			cia2      = $dd00     ;cia2 base address
=$e000			kernalrom = $e000
=$03			bstop     =    $03      ;stop
=$05			bwhite    =    $05      ;set color white
=$08			block     =    $08      ;lock the charset
=$09			bunlock   =    $09      ;unlock the charset
=$0d			bcarret   =    $0d
=$0e			btext     =    $0e
=$11			bcrsdn    =    $11      ;cursor down 1 line
=$12			brevcol   =    $12
=$13			bhome     =    $13
=$14			bdelete   =    $14
=$1c			bred      =    $1c
=$1d			bcuright  =    $1d
=$1e			bgreen    =    $1e
=$1f			bblue     =    $1f
=$81			borange   =    $81
=$83			blrun     =    $83
=$85			bfkey1    =    $85
=$86			bfkey2    =    $86
=$87			bfkey3    =    $87
=$88			bfkey4    =    $88
=$89			bfkey5    =    $89
=$8a			bfkey6    =    $8a
=$8b			bfkey7    =    $8b
=$8c			bfkey8    =    $8c
=$8d			bcarret1  =    $8d
=$8e			bgraph    =    $8e
=$90			bblack    =    $90
=$91			bcuup     =    $91
=$92			brevoff   =    $92
=$93			bclear    =    $93
=$94			binsert   =    $94
=$95			bbrown    =    $95
=$96			bltred    =    $96
=$97			bdkgrey   =    $97
=$98			bmdgrey   =    $98
=$99			bltgreen  =    $99
=$9a			bltblue   =    $9a
=$9b			bltgrey   =    $9b
=$9c			bmagenta  =    $9c
=$9d			bculeft   =    $9d
=$9e			byellow   =    $9e
=$9f			bcyan     =    $9f
=$0286			carcol  = $0286
=$030a			ieval   = $030a
=$73			chrget  = $73
=$79			chrgot  = $79
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ff81			cint    = $ff81 ; ($ff5b) Initialize the screen editor and vic-ii chip
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ff8a			restor  = $ff8a ; ($fd15) Restore default I/O vectors.
=$ff8d			vector  = $ff8d ; ($fd1a) Read/set I/O vectors.
=$ff90			setmsg  = $ff90 ; ($fe18) Set kernal message output flag
=$ff93			second  = $ff93 ; ($edb9) Send secondary address after listen
=$ff96			tksa    = $ff96 ; ($edc7) Send a secondary address to a device commanded to talk
=$ff99			memtop  = $ff99 ; ($fe25) Get/Set top of ram
=$ff9c			membot  = $ff9c ; ($fe34) Get/set bottom of memory.
=$ff9f			scankey = $ff9f ; $(ea87) Scan the keyboard
=$ffa2			settmo  = $ffa2 ; ($fe21) Set ieee bus card timeout flag
=$ffa5			acptr   = $ffa5 ; ($ee13) recoit un caractère provenant du port serie
=$ffa8			ciout   = $ffa8 ; ($eddd) Transmit a byte over the serial bus
=$ffab			untlk   = $ffab ; ($edef) Send an untalk command
=$ffae			unlsn   = $ffae ; ($edfe) Send an unlisten command
=$ffb1			listen  = $ffb1 ; ($ed0c) Command a device on the serial bus to listen.
=$ffb4			talk    = $ffb4 ; ($ed09) Command a device on the serial bus to talk
=$ffb7			readst  = $ffb7 ; ($fe07) Read i/o status word
=$ffba			setlfs  = $ffba ; ($fe00) Set up a logical file
=$ffbd			setnam  = $ffbd ; ($fdf9) Set up file name
=$ffc0			open    = $ffc0 ; ($f3a4) Open a logical file
=$ffc3			close   = $ffc3 ; ($f291) Close a logical file
=$ffc6			chkin   = $ffc6 ; ($f20e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; ($f250) Define an output channel.
=$ffcc			clrchn  = $ffcc ; ($f333) - Clear all i/o channels.
=$ffcf			chrin   = $ffcf ; ($f157) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; ($f1ca) Output a character
=$ffd5			load    = $ffd5 ; ($f49e) Load device to RAM.
=$ffd8			save    = $ffd8 ; ($f5dd) Save memory to a device.
=$ffdb			settim  = $ffdb ; ($f6e4) Set the system clock.
=$ffde			rdtim   = $ffde ; ($f6dd) Read system clock
=$ffe1			stop    = $ffe1 ; ($f6ed) Check if stop key is pressed.
=$ffe4			getin   = $ffe4 ; ($f13e) Get a character.
=$ffe7			clall   = $ffe7 ; ($f32f) Close all open files
=$ffea			udtim   = $ffea ; ($f69b) Update the system clock
=$ffed			screen  = $ffed ; ($e505) Return screen format
=$fff0			plot    = $fff0 ; ($e50a) Set or retrieve cursor location x=column, y=line
=$fff3			iobase  = $fff3 ; ($e500) Define i/o memory page
=$ff81			kcint     =    cint      ;   , init vic + ecran.
=$ff84			kioinit   =    ioinit    ;   , init i/o dev.
=$ff87			kramtas   =    ramtas    ;   , test de memoire.
=$ffa8			kciout    =    ciout     ;a  ,tx byte  acia
=$ff8a			krestor   =    restor    ;   , set ram plafond
=$ff8d			kvector   =    vector    ;
=$ff90			ksetmsg   =    setmsg    ;a  , set sys. msg. out
=$ff93			ksecond   =    second    ;a  , tx adresse sec.
=$ff96			ktksa     =    tksa      ;a  , talk adresse sec.
=$ff99			kmemtop   =    memtop    ; yx, (c) get mem high
=$ff9c			kmembot   =    membot    ; yx, (c) get mem low
=$ff9f			kscankey  =    scankey   ;   , scan clavier
=$ffa2			ksettmo   =    settmo    ;a  , set ieee timeout
=$ffa5			kacptr    =    acptr     ;a  ,rx serie.
=$ffab			kuntlk    =    untlk     ;   , iec-cmc stop talk
=$ffae			kunlsn    =    unlsn     ;   , iec-cmd stop lsn
=$ffb1			klisten   =    listen    ;a  , iec-cmd dev ecout
=$ffb4			ktalk     =    talk      ;a  , iec-cmd dev parle
=$ffb7			kreadst   =    readst    ;a  , lecture i/o stats
=$ffba			ksetlfs   =    setlfs    ;ayx, init fich logi.
=$ffbd			ksetnam   =    setnam    ;ayx, init num.nom.fich
=$ffc0			kopen     =    open      ;axy, ouvre fich-nom
=$ffc3			kclose    =    close     ;a  , ferme fichier #a.
=$ffc6			kchkin    =    chkin     ;  x,open canal in.
=$ffc9			kchkout   =    chkout    ;  x,open canal out
=$ffcc			kclrchn   =    clrchn    ;   , ferme canaux i/o.
=$ffcf			kchrin    =    chrin     ;a  ,recup. un car.
=$ffd2			kchrout   =    chrout    ;a  ,sort un car.
=$ffd5			kload     =    load      ;ayx, dev->ram
=$ffd8			ksave     =    save      ;   , sauve mem->dev
=$ffdb			ksettim   =    settim    ;axy, init sysclock
=$ffde			krdtim    =    rdtim     ;axy, lecture sysclock
=$ffe1			kstop     =    stop      ;a  , ret. stopkey stat
=$ffe4			kgetin    =    getin     ;a  , recup. car. #dev.
=$ffe7			kclall    =    clall     ;   , ferme fichiers.
=$ffea			kudtim    =    udtim     ;   , maj sysclock
=$ffed			kscreen   =    screen    ; yx, get format ecran
=$fff0			kplot     =    plot      ; yx, (c) get csr pos.
=$fff3			kiobase   =    iobase    ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.080d	4c a8 0f	pgmstart        jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: siddemotxt.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_pushpop.asm"

.0810			push
.0810	08		          php            ; stack : flg, pcl, pch
.0811	78		          sei
.0812	8d 4c 08	          sta  ra        ; save a
.0815	68		          pla            ; stack : pcl, pch
.0816	8d 4b 08	          sta  rp        ; save rp
.0819	68		          pla            ; stack : pch
.081a	8d 4d 08	          sta  pc        ; save pcl
.081d	68		          pla            ; stack : -
.081e	8d 4e 08	          sta  pc+1      ; save pch
.0821	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0823	48		          pha            ; stack : zp1l
.0824	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0826	48		          pha            ; stack : zp1h, zp1l
.0827	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0829	48		          pha            ; stack : zp2l, zp1h, zp1l
.082a	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.082c	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.082d	ad 4b 08	          lda  rp        ; get rp
.0830	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0831	ad 4c 08	          lda  ra        ; get a
.0834	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0835	8a		          txa            ; get x
.0836	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0837	98		          tya            ; get y
.0838	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0839	ad 4e 08	          lda  pc+1      ; get pch
.083c	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.083d	ad 4d 08	          lda  pc        ; get pcl
.0840	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0841	ad 4b 08	          lda  rp        ; get rp
.0844	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0845	ad 4c 08	          lda  ra        ; get a
.0848	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0849	58		          cli
.084a	60		          rts
>084b	00		rp        .byte     0
>084c	00		ra        .byte     0
>084d	00 00		pc        .word     0
.084f			pull
.084f			pop
.084f	78		          sei
.0850	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0851	8d 84 08	          sta  pc        ; save pcl
.0854	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0855	8d 85 08	          sta  pc+1      ; save pch
.0858	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0859	a8		          tay            ; set y
.085a	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.085b	aa		          tax            ; set x
.085c	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.085d	8d 83 08	          sta  ra        ; save a
.0860	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0861	8d 82 08	          sta  rp        ; save rp
.0864	68		          pla            ; stack : zp2l, zp1h, zp1l
.0865	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0867	68		          pla            ; stack : zp1h, zp1l
.0868	85 fd		          sta  zpage2    ; get zpage2 High byte
.086a	68		          pla            ; stack : zp1l
.086b	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.086d	68		          pla            ; stack :
.086e	85 fb		          sta  zpage1    ; get zpage1 High byte
.0870	ad 85 08	          lda  pc+1      ; get pch
.0873	48		          pha            ; stack : pch
.0874	ad 84 08	          lda  pc
.0877	48		          pha            ; stack : pcl, pch
.0878	ad 82 08	          lda  rp        ; get rp
.087b	48		          pha            ; stack : rp, pcl, pch
.087c	ad 83 08	          lda  ra        ; set ra
.087f	58		          cli
.0880	28		          plp            ; stack : pcl, pch
.0881	60		          rts
>0882	00		rp        .byte     0
>0883	00		ra        .byte     0
>0884	00 00		pc        .word     0

;******  Return to file: siddemotxt.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_hex.asm"

>0886	01		a2hexcol       .byte     1    ; pour aputscxy
.0887			a2hexpos
>0887	00		a2hexpx        .byte     0    ; pour aputsxy
>0888	00		a2hexpy        .byte     0
>0889	24		a2hexstr       .byte     "$"  ; pour aputs
>088a	00 00		               .word     $00
>088c	00 00		               .word     $00
>088e	00		               .byte     0    ; 0 end string
.088f			nib2hex
.088f	08		               php
.0890	29 0f		               and  #$0f
.0892	f8		               sed
.0893	18		               clc
.0894	69 90		               adc  #$90
.0896	69 40		               adc  #$40
.0898	d8		               cld
.0899	28		               plp
.089a	60		               rts
.089b			lsra4bits
.089b	08		               php
.089c	4a		               lsr
.089d	4a		               lsr
.089e	4a		               lsr
.089f	4a		               lsr
.08a0	28		               plp
.08a1	60		               rts
.08a2			a2hex
.08a2	08		               php
.08a3	48		               pha
.08a4	48		               pha
.08a5	20 9b 08	               jsr  lsra4bits
.08a8	20 8f 08	               jsr  nib2hex
.08ab	8d 8a 08	               sta  a2hexstr+1
.08ae	68		               pla
.08af	20 8f 08	               jsr  nib2hex
.08b2	8d 8b 08	               sta  a2hexstr+2
.08b5	a9 00		               lda  #$00
.08b7	8d 8c 08	               sta  a2hexstr+3
.08ba	68		               pla
.08bb	28		               plp
.08bc	60		               rts
.08bd			xy2hex
.08bd	20 10 08	               jsr  push
.08c0	20 a2 08	               jsr  a2hex
.08c3	98		               tya
.08c4	48		               pha
.08c5	20 9b 08	               jsr  lsra4bits
.08c8	20 8f 08	               jsr  nib2hex
.08cb	8d 8c 08	               sta  a2hexstr+3
.08ce	68		               pla
.08cf	20 8f 08	               jsr  nib2hex
.08d2	8d 8d 08	               sta  a2hexstr+4
.08d5	a9 00		               lda  #$00
.08d7	8d 8e 08	               sta  a2hexstr+5
.08da	20 4f 08	               jsr  pop
.08dd			atobin
.08dd	20 10 08	               jsr     push
.08e0	a2 08		               ldx     #8
.08e2	a0 00		               ldy     #0
.08e4	2a		nextbit        rol
.08e5	48		               pha
.08e6	29 01		               and     #1
.08e8	20 8f 08	               jsr     nib2hex
.08eb	99 fc 08	               sta     abin,y
.08ee	68		               pla
.08ef	c8		               iny
.08f0	ca		               dex
.08f1	d0 f1		               bne     nextbit
.08f3	a9 00		               lda     #0
.08f5	99 fc 08	               sta     abin,y
.08f8	20 4f 08	               jsr     pull
.08fb	60		               rts
>08fc	00 00 00 00	abin           .byte 0,0,0,0,0,0,0,0,0
>0900	00 00 00 00 00
.0905			putabin
.0905	20 dd 08	               jsr     atobin
.0908	20 10 08	               jsr     push
.090b	a2 fc		               ldx     #<abin
.090d	a0 08		               ldy     #>abin
.090f	20 89 0a	               jsr     puts
.0912	20 4f 08	               jsr     pop
.0915	60		               rts
.0916			putabinfmt
.0916	08		               php
.0917	48		               pha
.0918	a9 25		               lda     #"%"
.091a	20 69 0a	               jsr     putch
.091d	68		               pla
.091e	20 05 09	               jsr     putabin
.0921	28		               plp
.0922	60		               rts
.0923			putabinxy
.0923	20 0c 0b	               jsr     gotoxy
.0926	20 05 09	               jsr     putabin
.0929	60		               rts
.092a			putabinfmtxy
.092a	20 0c 0b	               jsr     gotoxy
.092d	20 16 09	               jsr     putabinfmt
.0930	60		               rts

;******  Return to file: siddemotxt.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_mc.asm"

>0931	00 00		scrptr         .word     $00
>0933	00 00		colptr         .word     $00
>0935	01		curcol         .byte     $01
>0936	0c		brdcol         .byte     $0c
>0937	00		bkcol          .byte     %00000000
>0938	01		vicbkcol       .byte     %00000001
>0939	00		vicbkcol0      .byte     vnoir  ;$0b
>093a	02		vicbkcol1      .byte     vrouge ;$0b
>093b	05		vicbkcol2      .byte     vvert  ;$0b
>093c	06		vicbkcol3      .byte     vbleu  ;$0b
>093d	00		inverse        .byte     $00
>093e	00 00 00 00	scraddr        .byte     0,0,0,0,0
>0942	00
>0943	00 00 00 00	coladdr        .byte     0,0,0,0,0
>0947	00
=$00			bkcol0      =         %00000000
=$40			bkcol1      =         %01000000
=$80			bkcol2      =         %10000000
=$c0			bkcol3      =         %11000000
.0948			scrmaninit
.0948	08		               php
.0949	48		               pha
.094a	a9 15		               lda  #%00010101
.094c	8d 18 d0	               sta  $d018
.094f	ad 16 d0	               lda  $d016 ; 53270
.0952	09 10		               ora  #%00010000
.0954	29 ef		               and  #%11101111
.0956	8d 16 d0	               sta  $d016 ; 53270
.0959	ad 11 d0	               lda  $d011
.095c	09 40		               ora  #%01000000
.095e	8d 11 d0	               sta  $d011     ; 53270
.0961	ad 39 09	               lda  vicbkcol0
.0964	8d 21 d0	               sta  $d021     ; 53281
.0967	ad 3a 09	               lda  vicbkcol1
.096a	8d 22 d0	               sta  $d022     ; 53282
.096d	ad 3b 09	               lda  vicbkcol2
.0970	8d 23 d0	               sta  $d023     ; 53283
.0973	ad 3c 09	               lda  vicbkcol3
.0976	8d 24 d0	               sta  $d024     ; 54284
.0979	a5 00		               lda  bkcol0
.097b	8d 37 09	               sta  bkcol
.097e	20 d6 09	               jsr      cls
.0981	68		               pla
.0982	28		               plp
.0983	60		               rts
.0984			curshome
.0984	08		               php
.0985	48		               pha
.0986	a9 00		               lda  #$00
.0988	8d 31 09	               sta  scrptr
.098b	a9 04		               lda  #$04
.098d	8d 32 09	               sta  scrptr+1
.0990	20 c1 09	               jsr  synccolptr
.0993	ad 39 09	               lda  vicbkcol0
.0996	8d 21 d0	               sta  $d021
.0999	ad 3a 09	               lda  vicbkcol1
.099c	8d 22 d0	               sta  $d022
.099f	ad 3b 09	               lda  vicbkcol2
.09a2	8d 23 d0	               sta  $d023
.09a5	ad 3c 09	               lda  vicbkcol3
.09a8	8d 24 d0	               sta  $d024
.09ab	68		               pla
.09ac	28		               plp
.09ad	60		               rts
.09ae			incscrptr
.09ae	08		               php
.09af	48		               pha
.09b0	ee 31 09	               inc  scrptr
.09b3	ad 31 09	               lda  scrptr
.09b6	d0 03		               bne  pasdereport
.09b8	ee 32 09	               inc  scrptr+1
.09bb	20 c1 09	pasdereport    jsr  synccolptr
.09be	68		               pla
.09bf	28		               plp
.09c0	60		               rts
.09c1			synccolptr
.09c1	08		               php
.09c2	48		               pha
.09c3	ad 31 09	               lda  scrptr
.09c6	8d 33 09	               sta  colptr
.09c9	ad 32 09	               lda  scrptr+1
.09cc	29 03		               and  #%00000011
.09ce	09 d8		               ora  #%11011000
.09d0	8d 34 09	               sta  colptr+1
.09d3	68		               pla
.09d4	28		               plp
.09d5	60		               rts
.09d6			cls
.09d6	20 10 08	               jsr  push
.09d9	a9 00		               lda  #$00
.09db	8d 31 09	               sta  scrptr
.09de	a9 04		               lda  #$04
.09e0	8d 32 09	               sta  scrptr+1
.09e3	20 c1 09	               jsr  synccolptr
.09e6	20 8d 0b	               jsr  scrptr2zp1
.09e9	ad 36 09	               lda  brdcol
.09ec	8d 20 d0	               sta  vborder
.09ef	ad 38 09	               lda  vicbkcol
.09f2	8d 21 d0	               sta  vbkgrnd
.09f5	a9 20		               lda  #$20
.09f7	a2 04		               ldx  #4
.09f9	a0 00		nextline       ldy  #0
.09fb	91 fb		nextcar        sta  (zpage1),y
.09fd	a5 fc		               lda  zpage1+1
.09ff	48		               pha
.0a00	29 03		               and  #%00000011
.0a02	09 d8		               ora  #%11011000
.0a04	85 fc		               sta  zpage1+1
.0a06	a9 00		               lda  #0
.0a08	91 fb		               sta  (zpage1),y
.0a0a	68		               pla
.0a0b	85 fc		               sta  zpage1+1
.0a0d	a9 20		               lda  #$20
.0a0f	88		               dey
.0a10	d0 e9		               bne  nextcar
.0a12	e6 fc		               inc  zpage1+1
.0a14	ca		               dex
.0a15	d0 e4		               bne  nextcar
.0a17	a9 00		               lda  #$00
.0a19	8d 31 09	               sta  scrptr
.0a1c	a9 04		               lda  #$04
.0a1e	8d 32 09	               sta  scrptr+1
.0a21	20 c1 09	               jsr  synccolptr
.0a24	20 4f 08	               jsr  pop
.0a27	60		               rts
.0a28			setborder
.0a28	08		               php
.0a29	8d 36 09	               sta  brdcol
.0a2c	8d 20 d0	               sta  vborder
.0a2f	28		               plp
.0a30	60		               rts
.0a31			setinverse
.0a31	08		               php
.0a32	48		               pha
.0a33	a9 80		               lda  #%10000000
.0a35	8d 3d 09	               sta  inverse
.0a38	68		               pla
.0a39	28		               plp
.0a3a	60		               rts
.0a3b			clrinverse
.0a3b	08		               php
.0a3c	48		               pha
.0a3d	a9 00		               lda  #%00000000
.0a3f	8d 3d 09	               sta  inverse
.0a42	68		               pla
.0a43	28		               plp
.0a44	60		               rts
.0a45			z2putch
.0a45	20 10 08	               jsr  push
.0a48	a0 00		               ldy  #$0
.0a4a	b1 fd		               lda  (zpage2),y
.0a4c	20 69 0a	               jsr  putch
.0a4f	20 4f 08	               jsr  pop
.0a52	60		               rts
.0a53			z2puts
.0a53	20 10 08	               jsr  push
.0a56	a0 00		               ldy  #$0
.0a58	b1 fd		nextcar        lda  (zpage2),y
.0a5a	f0 09		               beq  endstr
.0a5c	20 45 0a	               jsr  z2putch
.0a5f	20 11 0f	               jsr  inczp2
.0a62	4c 58 0a	               jmp  nextcar
.0a65	20 4f 08	endstr         jsr  pop
.0a68	60		               rts
.0a69			putch
.0a69	20 10 08	               jsr  push
.0a6c	20 8d 0b	               jsr  scrptr2zp1
.0a6f	29 3f		               and  #%00111111
.0a71	0d 37 09	               ora  bkcol
.0a74	a0 00		               ldy  #0
.0a76	91 fb		               sta  (zpage1),y
.0a78	ae 34 09	               ldx  colptr+1
.0a7b	86 fc		               stx  zpage1+1
.0a7d	ad 35 09	               lda  curcol
.0a80	91 fb		               sta  (zpage1),y
.0a82	20 ae 09	               jsr  incscrptr
.0a85	20 4f 08	               jsr  pop
.0a88	60		               rts
.0a89			puts
.0a89	20 10 08	               jsr  push
.0a8c	86 fd		               stx  zpage2
.0a8e	84 fe		               sty  zpage2+1
.0a90	20 53 0a	               jsr  z2puts
.0a93			getout
.0a93	20 4f 08	               jsr  pop
.0a96	60		               rts
.0a97			putsxy
.0a97	20 10 08	               jsr  push
.0a9a	86 fd		               stx  zpage2
.0a9c	84 fe		               sty  zpage2+1
.0a9e	a0 00		               ldy  #0
.0aa0	b1 fd		               lda  (zpage2),y
.0aa2	aa		               tax
.0aa3	20 11 0f	               jsr  inczp2
.0aa6	b1 fd		               lda  (zpage2),y
.0aa8	a8		               tay
.0aa9	20 0c 0b	               jsr  gotoxy
.0aac	20 11 0f	               jsr  inczp2
.0aaf	20 53 0a	               jsr  z2puts
.0ab2	20 4f 08	               jsr  pop
.0ab5	60		               rts
.0ab6			putscxy
.0ab6	20 10 08	               jsr  push
.0ab9	86 fd		               stx  zpage2
.0abb	84 fe		               sty  zpage2+1
.0abd	a0 00		               ldy  #0
.0abf	b1 fd		               lda  (zpage2),y
.0ac1	20 e7 0a	               jsr  setcurcol
.0ac4	20 11 0f	               jsr  inczp2
.0ac7	b1 fd		               lda  (zpage2),y
.0ac9	29 03		               and  #$03
.0acb	20 fc 0a	               jsr  setbkcol
.0ace	20 11 0f	               jsr  inczp2
.0ad1	b1 fd		               lda  (zpage2),y
.0ad3	aa		               tax
.0ad4	20 11 0f	               jsr  inczp2
.0ad7	b1 fd		               lda  (zpage2),y
.0ad9	a8		               tay
.0ada	20 0c 0b	               jsr  gotoxy
.0add	20 11 0f	               jsr  inczp2
.0ae0	20 53 0a	               jsr  z2puts
.0ae3	20 4f 08	               jsr  pop
.0ae6	60		               rts
.0ae7			setcurcol
.0ae7	08		               php
.0ae8	8d 35 09	               sta  curcol
.0aeb	28		               plp
.0aec	60		               rts
.0aed			setvicbkcol
.0aed	08		               php
.0aee	48		               pha
.0aef	8a		               txa
.0af0	29 03		               and  #$03
.0af2	aa		               tax
.0af3	68		               pla
.0af4	9d 39 09	               sta  vicbkcol0,x
.0af7	9d 21 d0	               sta  $d021,x
.0afa	28		               plp
.0afb	60		               rts
.0afc			setbkcol
.0afc	08		               php
.0afd	48		               pha
.0afe	0a		               asl
.0aff	0a		               asl
.0b00	0a		               asl
.0b01	0a		               asl
.0b02	0a		               asl
.0b03	0a		               asl
.0b04	29 c0		               and  #$c0
.0b06	8d 37 09	               sta  bkcol
.0b09	68		               pla
.0b0a	28		               plp
.0b0b	60		               rts
.0b0c			gotoxy
.0b0c	20 10 08	               jsr  push
.0b0f	20 84 09	               jsr  curshome
.0b12	c0 00		yagain         cpy  #0
.0b14	f0 09		               beq  setx
.0b16	a9 28		               lda  #40
.0b18	20 2a 0b	               jsr  saddscrptr
.0b1b	88		               dey
.0b1c	4c 12 0b	               jmp  yagain
.0b1f	8a		setx           txa
.0b20	20 2a 0b	               jsr  saddscrptr
.0b23	20 c1 09	               jsr  synccolptr
.0b26	20 4f 08	               jsr  pop
.0b29	60		               rts
.0b2a			saddscrptr
.0b2a	08		               php
.0b2b	48		               pha
.0b2c	18		               clc
.0b2d	6d 31 09	               adc  scrptr
.0b30	8d 31 09	               sta  scrptr
.0b33	90 03		               bcc  norep
.0b35	ee 32 09	               inc  scrptr+1
.0b38	68		norep          pla
.0b39	28		               plp
.0b3a	60		               rts
.0b3b			scrptr2str
.0b3b	20 10 08	               jsr  push
.0b3e	ad 32 09	               lda  scrptr+1
.0b41	48		               pha
.0b42	20 9b 08	               jsr  lsra4bits
.0b45	20 8f 08	               jsr  nib2hex
.0b48	8d 3e 09	               sta  scraddr
.0b4b	68		               pla
.0b4c	20 9b 08	               jsr  lsra4bits
.0b4f	20 8f 08	               jsr  nib2hex
.0b52	8d 3f 09	               sta  scraddr+1
.0b55	ad 32 09	               lda  scrptr+1
.0b58	48		               pha
.0b59	20 9b 08	               jsr  lsra4bits
.0b5c	20 8f 08	               jsr  nib2hex
.0b5f	8d 3e 09	               sta  scraddr
.0b62	68		               pla
.0b63	20 9b 08	               jsr  lsra4bits
.0b66	20 8f 08	               jsr  nib2hex
.0b69	8d 3f 09	               sta  scraddr+1
.0b6c	ad 31 09	               lda  scrptr
.0b6f	48		               pha
.0b70	20 9b 08	               jsr  lsra4bits
.0b73	20 8f 08	               jsr  nib2hex
.0b76	8d 40 09	               sta  scraddr+2
.0b79	8d 45 09	               sta  coladdr+2
.0b7c	68		               pla
.0b7d	20 9b 08	               jsr  lsra4bits
.0b80	20 8f 08	               jsr  nib2hex
.0b83	8d 41 09	               sta  scraddr+3
.0b86	8d 46 09	               sta  coladdr+3
.0b89	20 4f 08	               jsr  pop
.0b8c	60		               rts
.0b8d			scrptr2zp1
.0b8d	08		               php
.0b8e	48		               pha
.0b8f	ad 31 09	               lda  scrptr
.0b92	85 fb		               sta  zpage1
.0b94	ad 32 09	               lda  scrptr+1
.0b97	85 fc		               sta  zpage1+1
.0b99	68		               pla
.0b9a	28		               plp
.0b9b	60		               rts
.0b9c			colptr2zp1
.0b9c	08		               php
.0b9d	48		               pha
.0b9e	ad 33 09	               lda  colptr
.0ba1	85 fb		               sta  zpage1
.0ba3	ad 34 09	               lda  colptr+1
.0ba6	85 fc		               sta  zpage1+1
.0ba8	68		               pla
.0ba9	28		               plp
.0baa	60		               rts
.0bab			scrptr2zp2
.0bab	08		               php
.0bac	48		               pha
.0bad	ad 31 09	               lda  scrptr
.0bb0	85 fd		               sta  zpage2
.0bb2	ad 32 09	               lda  scrptr+1
.0bb5	85 fe		               sta  zpage2+1
.0bb7	68		               pla
.0bb8	28		               plp
.0bb9	60		               rts
.0bba			colptr2zp2
.0bba	08		               php
.0bbb	48		               pha
.0bbc	ad 33 09	               lda  colptr
.0bbf	85 fd		               sta  zpage2
.0bc1	ad 34 09	               lda  colptr+1
.0bc4	85 fe		               sta  zpage2+1
.0bc6	68		               pla
.0bc7	28		               plp
.0bc8	60		               rts
.0bc9			putrahex
.0bc9	08		               php
.0bca	48		               pha
.0bcb	20 a2 08	               jsr     a2hex
.0bce	a2 86		               ldx     #<a2hexcol
.0bd0	a0 08		               ldy     #>a2hexcol
.0bd2	20 89 0a	               jsr     puts
.0bd5	68		               pla
.0bd6	28		               plp
.0bd7	60		               rts
.0bd8			putrahexxy
.0bd8	08		               php
.0bd9	48		               pha
.0bda	20 a2 08	               jsr  a2hex
.0bdd	a9 87		               lda  #<a2hexpos
.0bdf	a0 08		               ldy  #>a2hexpos
.0be1	20 97 0a	               jsr  putsxy
.0be4	68		               pla
.0be5	28		               plp
.0be6	60		               rts
.0be7			putrahexcxy
.0be7	08		               php
.0be8	68		               pla
.0be9	20 a2 08	               jsr  a2hex
.0bec	a9 87		               lda  #<a2hexpos
.0bee	a0 08		               ldy  #>a2hexpos
.0bf0	20 b6 0a	               jsr  putscxy
.0bf3	68		               pla
.0bf4	28		               plp
.0bf5	60		               rts

;******  Return to file: siddemotxt.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_showregs.asm"

.0bf6			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=$c0			bkcol   =   bkcol3
.0bf6	08		                php
.0bf7	8d a8 0d	                sta  rega
.0bfa	68		                pla
.0bfb	8d ab 0d	                sta  regp
.0bfe	8e a9 0d	                stx  regx
.0c01	8c aa 0d	                sty  regy
.0c04	ba		                tsx
.0c05	8e ac 0d	                stx  regs
.0c08	68		                pla
.0c09	8d ae 0d	                sta  regpcl
.0c0c	8d af 0d	                sta  regpcl2
.0c0f	68		                pla
.0c10	8d ad 0d	                sta  regpch
.0c13	ad a8 0d	                lda  rega
.0c16	48		                pha
.0c17	20 8f 08	                jsr  nib2hex
.0c1a	8d 4b 0d	                sta  vala+1
.0c1d	68		                pla
.0c1e	20 9b 08	                jsr  lsra4bits
.0c21	20 8f 08	                jsr  nib2hex
.0c24	8d 4a 0d	                sta  vala
.0c27	ad aa 0d	                lda  regy
.0c2a	48		                pha
.0c2b	20 8f 08	                jsr  nib2hex
.0c2e	8d 61 0d	                sta  valy+1
.0c31	68		                pla
.0c32	20 9b 08	                jsr  lsra4bits
.0c35	20 8f 08	                jsr  nib2hex
.0c38	8d 60 0d	                sta  valy
.0c3b	ad a9 0d	                lda  regx
.0c3e	48		                pha
.0c3f	20 8f 08	                jsr  nib2hex
.0c42	8d 56 0d	                sta  valx+1
.0c45	68		                pla
.0c46	20 9b 08	                jsr  lsra4bits
.0c49	20 8f 08	                jsr  nib2hex
.0c4c	8d 55 0d	                sta  valx
.0c4f	ad ab 0d	                lda  regp
.0c52	48		                pha
.0c53	20 8f 08	                jsr  nib2hex
.0c56	8d 6c 0d	                sta  valp+1
.0c59	68		                pla
.0c5a	20 9b 08	                jsr  lsra4bits
.0c5d	20 8f 08	                jsr  nib2hex
.0c60	8d 6b 0d	                sta  valp
.0c63	ad ac 0d	                lda  regs
.0c66	48		                pha
.0c67	20 8f 08	                jsr  nib2hex
.0c6a	8d 77 0d	                sta  vals+1
.0c6d	68		                pla
.0c6e	20 9b 08	                jsr  lsra4bits
.0c71	20 8f 08	                jsr  nib2hex
.0c74	8d 76 0d	                sta  vals
.0c77	ad ad 0d	                lda  regpch
.0c7a	48		                pha
.0c7b	20 8f 08	                jsr  nib2hex
.0c7e	8d 83 0d	                sta  valpch+1
.0c81	68		                pla
.0c82	20 9b 08	                jsr  lsra4bits
.0c85	20 8f 08	                jsr  nib2hex
.0c88	8d 82 0d	                sta  valpch
.0c8b	ad ae 0d	                lda  regpcl
.0c8e	48		                pha
.0c8f	20 8f 08	                jsr  nib2hex
.0c92	8d 85 0d	                sta  valpcl+1
.0c95	68		                pla
.0c96	20 9b 08	                jsr  lsra4bits
.0c99	20 8f 08	                jsr  nib2hex
.0c9c	8d 84 0d	                sta  valpcl
.0c9f	a5 fb		                lda  zpage1
.0ca1	48		                pha
.0ca2	20 8f 08	                jsr  nib2hex
.0ca5	8d 94 0d	                sta  valz1l
.0ca8	68		                pla
.0ca9	20 9b 08	                jsr  lsra4bits
.0cac	20 8f 08	                jsr  nib2hex
.0caf	8d 95 0d	                sta  valz1l+1
.0cb2	a5 fc		                lda  zpage1+1
.0cb4	48		                pha
.0cb5	20 8f 08	                jsr  nib2hex
.0cb8	8d 92 0d	                sta  valz1h
.0cbb	68		                pla
.0cbc	20 9b 08	                jsr  lsra4bits
.0cbf	20 8f 08	                jsr  nib2hex
.0cc2	8d 93 0d	                sta  valz1h+1
.0cc5	a5 fd		                lda  zpage2
.0cc7	48		                pha
.0cc8	20 8f 08	                jsr  nib2hex
.0ccb	8d a4 0d	                sta  valz2l
.0cce	68		                pla
.0ccf	20 9b 08	                jsr  lsra4bits
.0cd2	20 8f 08	                jsr  nib2hex
.0cd5	8d a5 0d	                sta  valz2l+1
.0cd8	a5 fe		                lda  zpage2+1
.0cda	48		                pha
.0cdb	20 8f 08	                jsr  nib2hex
.0cde	8d a2 0d	                sta  valz2h
.0ce1	68		                pla
.0ce2	20 9b 08	                jsr  lsra4bits
.0ce5	20 8f 08	                jsr  nib2hex
.0ce8	8d a3 0d	                sta  valz2h+1
.0ceb	20 31 0a	                jsr  setinverse
.0cee	78		                sei
.0cef	a2 42		                ldx  #<srega
.0cf1	a0 0d		                ldy  #>srega+1
.0cf3	20 b6 0a	                jsr  putscxy
.0cf6	a2 4d		                ldx  #<sregx
.0cf8	a0 0d		                ldy  #>sregx+1
.0cfa	20 b6 0a	                jsr  putscxy
.0cfd	a2 58		                ldx  #<sregy
.0cff	a0 0d		                ldy  #>sregy+1
.0d01	20 b6 0a	                jsr  putscxy
.0d04	a2 63		                ldx  #<sregp
.0d06	a0 0d		                ldy  #>sregp+1
.0d08	20 b6 0a	                jsr  putscxy
.0d0b	a2 6e		                ldx  #<sregs
.0d0d	a0 0d		                ldy  #>sregs+1
.0d0f	20 b6 0a	                jsr  putscxy
.0d12	a2 79		                ldx  #<sregpc
.0d14	a0 0d		                ldy  #>sregpc+1
.0d16	20 b6 0a	                jsr  putscxy
.0d19	a2 88		                ldx  #<sregz1
.0d1b	a0 0d		                ldy  #>sregz1+1
.0d1d	20 b6 0a	                jsr  putscxy
.0d20	a2 98		                ldx  #<sregz2
.0d22	a0 0d		                ldy  #>sregz2+1
.0d24	20 b6 0a	                jsr  putscxy
.0d27	58		                cli
.0d28	20 3b 0a	                jsr  clrinverse
.0d2b	ad ad 0d	                lda  regpch
.0d2e	48		                pha
.0d2f	ad ae 0d	                lda  regpcl
.0d32	48		                pha
.0d33	ac aa 0d	                ldy  regy
.0d36	ae a9 0d	                ldx  regx
.0d39	ad ab 0d	                lda  regp
.0d3c	48		                pha
.0d3d	ad a8 0d	                lda  rega
.0d40	28		                plp
.0d41	60		                rts
>0d42	01 c0 00 17	srega   .byte   colr,bkcol,coln,line
>0d46	20 41 3a 24	        .text   ' a:$' ;4,24
>0d4a	00 00 00	vala    .byte   0,0,0
>0d4d	01 c0 06 17	sregx   .byte   colr,bkcol,coln+6,line
>0d51	20 58 3a 24	        .text   ' x:$' ;4,24
>0d55	00 00 00	valx    .byte   0,0,0
>0d58	01 c0 0c 17	sregy   .byte   colr,bkcol,coln+12,line
>0d5c	20 59 3a 24	        .text   ' y:$' ;4,24
>0d60	00 00 00	valy    .byte   0,0,0
>0d63	01 c0 12 17	sregp   .byte   colr,bkcol,coln+18,line
>0d67	20 50 3a 24	        .text   ' p:$' ;4,24
>0d6b	00 00 00	valp    .byte   0,0,0
>0d6e	01 c0 18 17	sregs   .byte   colr,bkcol,coln+24,line
>0d72	20 53 3a 24	        .text   ' s:$' ;4,24
>0d76	00 00 00	vals    .byte   0,0,0
>0d79	01 c0 1e 17	sregpc  .byte   colr,bkcol,coln+30,line
>0d7d	20 50 43 3a	        .text   ' pc:$' ;4,24
>0d81	24
>0d82	00 00		valpch  .byte   0,0
>0d84	00 00 20 00	valpcl  .byte   0,0,32,0
>0d88	01 c0 03 18	sregz1  .byte   colr,bkcol,coln+3,line+1
>0d8c	20 5a 50 31	        .text   ' zp1:$' ;4,24
>0d90	3a 24
>0d92	00 00		valz1h  .byte   0,0
>0d94	00 00 20 00	valz1l  .byte   0,0,32,0
>0d98	01 c0 0f 18	sregz2  .byte   colr,bkcol,coln+15,line+1
>0d9c	20 5a 50 32	        .text   ' zp2:$' ;4,24
>0da0	3a 24
>0da2	00 00		valz2h  .byte   0,0
>0da4	00 00 20 00	valz2l  .byte   0,0,32,0
>0da8	00		rega    .byte   0
>0da9	00		regx    .byte   0
>0daa	00		regy    .byte   0
>0dab	00		regp    .byte   0
>0dac	00		regs    .byte   0
>0dad	00		regpch  .byte   0
>0dae	00		regpcl  .byte   0
>0daf	00		regpcl2 .byte   0
>0db0	00		vzp1h   .byte   0
>0db1	00		vzp1l   .byte   0
>0db2	00		vzp2h   .byte   0
>0db3	00		vzp2l   .byte   0

;******  Return to file: siddemotxt.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_chargen.asm"

>0db4	00 00		charram        .word     $0000
.0db6			chargen2ram
.0db6	20 15 0e	               jsr  setcharram
.0db9	20 22 0e	               jsr  cpchar2ram
.0dbc	60		               rts
.0dbd			loadchar
.0dbd	4c 10 08	               jmp  push
.0dc0	48		               pha
.0dc1	8a		               txa
.0dc2	85 fc		               sta  zpage1+1
.0dc4	98		               tya
.0dc5	85 fb		               sta  zpage1
.0dc7	ad b4 0d	               lda  charram
.0dca	85 fd		               sta  zpage2
.0dcc	ad b5 0d	               lda  charram+1
.0dcf	85 fe		               sta  zpage2+1
.0dd1	a9 00		               lda  #$0
.0dd3	8d 14 0e	               sta  charadd+1
.0dd6	a2 03		               ldx  #3
.0dd8	68		               pla
.0dd9	8d 13 0e	               sta  charadd
.0ddc	ad 13 0e	nextrol        lda  charadd
.0ddf	18		               clc
.0de0	0a		               asl
.0de1	8d 13 0e	               sta  charadd
.0de4	ad 14 0e	               lda  charadd+1
.0de7	2a		               rol
.0de8	8d 14 0e	               sta  charadd+1
.0deb	ca		               dex
.0dec	d0 ee		               bne  nextrol
.0dee	ad b4 0d	               lda  charram
.0df1	8d 9e 0f	               sta  addr1
.0df4	ad b4 0d	               lda  charram
.0df7	8d 9f 0f	               sta  addr1+1
.0dfa	ac 13 0e	               ldy  charadd
.0dfd	ac 14 0e	               ldy  charadd+1
.0e00	20 64 0f	               jsr  xy2addr
.0e03	ad a0 0f	               lda  addr2
.0e06	8d 13 0e	               sta  charadd
.0e09	ad a1 0f	               lda  addr2+1
.0e0c	8d 14 0e	               sta  charadd+1
.0e0f	4c 4f 08	               jmp  pop
.0e12	60		               rts
>0e13	00 00		charadd   .word $0000
.0e15			setcharram
.0e15	20 10 08	               jsr  push
.0e18	8c b4 0d	               sty  charram
.0e1b	8e b5 0d	               stx  charram+1
.0e1e	20 4f 08	               jsr  pop
.0e21	60		               rts
.0e22			cpchar2ram
.0e22	20 10 08	               jsr  push
.0e25	ad 0e dc	               lda  cia1+14   ; peek (56334)
.0e28	29 fe		               and  #254      ; and 254
.0e2a	8d 0e dc	               sta  cia1+14   ; poke 56334
.0e2d	a5 01		               lda  memmapreg ; peek (1)
.0e2f	29 fb		               and  #251      ; and %11111011
.0e31	85 01		               sta  memmapreg ; poke 1
.0e33	a9 00		               lda  #<chargen ; LSB de chargen
.0e35	85 fb		               sta  zpage1    ;
.0e37	a9 d0		               lda  #>chargen ; MSB de chargen
.0e39	85 fc		               sta  zpage1+1  ;
.0e3b	ad b4 0d	               lda  charram   ; $YYXX Contiennent
.0e3e	85 fd		               sta  zpage2    ; l'adresse
.0e40	ad b5 0d	               lda  charram+1 ; de destination
.0e43	85 fe		               sta  zpage2+1  ; MSB->Y, LDB->X
.0e45	a2 08		               ldx  #$08      ; 1 caractère = 8 bytes
.0e47	a0 00		nextpage       ldy  #$00      ; 256 caractères
.0e49	b1 fb		nextbyte       lda  (zpage1),y
.0e4b	91 fd		               sta  (zpage2),y
.0e4d	c8		               iny
.0e4e	d0 f9		               bne  nextbyte
.0e50	e6 fc		               inc  zpage1+1
.0e52	e6 fe		               inc  zpage2+1
.0e54	ca		               dex
.0e55	d0 f0		               bne  nextpage
.0e57	a5 01		               lda  memmapreg ; peek (1)
.0e59	09 04		               ora  #4        ; and %00000100
.0e5b	85 01		               sta  memmapreg ; poke 1
.0e5d	ad 0e dc	               lda  cia1+14   ; peek 56334
.0e60	09 01		               ora  #1        ; or 1
.0e62	8d 0e dc	               sta  cia1+14   ; poke 56334
.0e65	20 4f 08	               jsr  pop
.0e68	60		               rts

;******  Return to file: siddemotxt.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_mem.asm"

.0e69			blkfill
.0e69	20 10 08	bf0            jsr  push
.0e6c	20 28 0f	               jsr  savezp1
.0e6f	84 fc		               sty  zpage1+1
.0e71	a0 00		               ldy  #$00
.0e73	84 fb		               sty  zpage1
.0e75	91 fb		bf1            sta  (zpage1),y
.0e77	c8		               iny
.0e78	d0 fb		               bne  bf1
.0e7a	20 37 0f	               jsr  restzp1
.0e7d	20 4f 08	               jsr  pop
.0e80	60		               rts
.0e81			memfill
.0e81	20 10 08	               jsr  push
.0e84	20 69 0e	mf1            jsr  blkfill
.0e87	c8		               iny
.0e88	ca		               dex
.0e89	d0 f9		               bne  mf1
.0e8b	20 4f 08	               jsr  pop
.0e8e	60		               rts
.0e8f			memmove
.0e8f	20 10 08	               jsr  push
.0e92	ba		               tsx            ; On se crée un pointeur ...
.0e93	8a		               txa
.0e94	18		               clc
.0e95	69 0b		               adc  #11
.0e97	a8		               tay
.0e98	a2 06		               ldx  #$06
.0e9a	b9 00 01	nextbyte       lda  $0100,y
.0e9d	99 e9 0e	               sta  words,y
.0ea0	c8		               iny
.0ea1	ca		               dex
.0ea2	d0 f6		               bne  nextbyte
.0ea4	ad e9 0e	               lda  s
.0ea7	8d c0 0e	               sta  source+1
.0eaa	ad ea 0e	               lda  s+1
.0ead	8d c1 0e	               sta  source+2
.0eb0	ad eb 0e	               lda  d
.0eb3	8d bd 0e	               sta  destin+1
.0eb6	ad ec 0e	               lda  d+1
.0eb9	8d be 0e	               sta  destin+2
.0ebc	ad ff ff	destin         lda  $ffff
.0ebf	8d ff ff	source         sta  $ffff
.0ec2	ee bd 0e	               inc  destin+1
.0ec5	d0 03		               bne  src
.0ec7	ee be 0e	               inc  destin+2
.0eca	ee c0 0e	src            inc  source+1
.0ecd	d0 03		               bne  cnt
.0ecf	ee c1 0e	               inc  source+2
.0ed2	ad ed 0e	cnt            lda  compte
.0ed5	d0 08		               bne  decit
.0ed7	ad ee 0e	               lda  compte+1
.0eda	f0 09		               beq  fini
.0edc	ce ee 0e	               dec  compte+1
.0edf	ce ed 0e	decit          dec  compte
.0ee2	4c bc 0e	               jmp  destin
.0ee5	20 4f 08	fini           jsr  pop
.0ee8	60		               rts
.0ee9			words
>0ee9	00 00		s         .word     $0000
>0eeb	00 00		d         .word     $0000
>0eed	00 00		compte    .word     $0000
.0eef			decword
.0eef	20 10 08	               jsr  push
.0ef2	86 fd		               stx  zpage2
.0ef4	84 fe		               sty  zpage2+1
.0ef6	20 4f 08	               jsr  pop
.0ef9	60		               rts
.0efa			inczp1
.0efa	08		               php
.0efb	48		               pha
.0efc	e6 fb		               inc  zpage1
.0efe	d0 02		               bne  nopage
.0f00	e6 fc		               inc  zpage1+1
.0f02	68		nopage         pla
.0f03	28		               plp
.0f04	60		               rts
.0f05			deczp1
.0f05	08		               php
.0f06	48		               pha
.0f07	a5 fb		               lda  zpage1
.0f09	d0 02		               bne  nopage
.0f0b	c6 fc		               dec  zpage1+1
.0f0d	c6 fb		nopage         dec  zpage1
.0f0f	28		               plp
.0f10	60		               rts
.0f11			inczp2
.0f11	08		               php
.0f12	48		               pha
.0f13	e6 fd		               inc  zpage2
.0f15	d0 02		               bne  nopage
.0f17	e6 fe		               inc  zpage2+1
.0f19	68		nopage         pla
.0f1a	28		               plp
.0f1b	60		               rts
.0f1c			deczp2
.0f1c	08		               php
.0f1d	48		               pha
.0f1e	a5 fd		               lda  zpage2
.0f20	d0 02		               bne  nopage
.0f22	c6 fe		               dec  zpage2+1
.0f24	c6 fd		nopage         dec  zpage2
.0f26	28		               plp
.0f27	60		               rts
.0f28			savezp1
.0f28	08		               php
.0f29	48		               pha
.0f2a	a5 fb		               lda  zpage1
.0f2c	8d a4 0f	               sta  zp1
.0f2f	a5 fc		               lda  zpage1+1
.0f31	8d a5 0f	               sta  zp1+1
.0f34	68		               pla
.0f35	28		               plp
.0f36	60		               rts
.0f37			restzp1
.0f37	08		               php
.0f38	48		               pha
.0f39	ad a4 0f	               lda zp1
.0f3c	85 fb		               sta zpage1
.0f3e	ad a5 0f	               lda zp1+1
.0f41	85 fc		               sta zpage1+1
.0f43	68		               pla
.0f44	28		               plp
.0f45	60		               rts
.0f46			savezp2
.0f46	08		         php
.0f47	48		         pha
.0f48	a5 fd		         lda zpage2
.0f4a	8d a6 0f	         sta zp2
.0f4d	a5 fe		         lda zpage2+1
.0f4f	8d a7 0f	         sta zp2+1
.0f52	68		         pla
.0f53	28		         plp
.0f54	60		         rts
.0f55			restzp2
.0f55	08		                php
.0f56	48		                pha
.0f57	ad a6 0f	                lda  zp2
.0f5a	85 fd		                sta  zpage2
.0f5c	ad a7 0f	                lda  zp2+1
.0f5f	85 fe		                sta  zpage2+1
.0f61	68		                pla
.0f62	28		                plp
.0f63	60		                rts
.0f64			xy2addr
.0f64	08		                php
.0f65	48		                pha
.0f66	8a		                txa
.0f67	48		                pha
.0f68	98		                tya
.0f69	48		                pha
.0f6a	ad 9f 0f	                lda     addr1+1
.0f6d	8d a1 0f	                sta     addr2+1
.0f70	ad 9e 0f	                lda     addr1
.0f73	8d a0 0f	                sta     addr2
.0f76	c0 00		                cpy     #$00
.0f78	f0 0f		                beq     addx
.0f7a	18		moreline        clc
.0f7b	6d 9d 0f	                adc     ymult
.0f7e	90 03		                bcc     norepy
.0f80	ee a1 0f	                inc     addr2+1
.0f83	8d a0 0f	norepy          sta     addr2
.0f86	88		                dey
.0f87	d0 f1		                bne     moreline
.0f89	8a		addx            txa
.0f8a	18		                clc
.0f8b	6d a0 0f	                adc     addr2
.0f8e	90 03		                bcc     thatsit
.0f90	ee a1 0f	                inc     addr2+1
.0f93	8d a0 0f	thatsit         sta     addr2
.0f96	68		                pla
.0f97	a8		                tay
.0f98	68		                pla
.0f99	aa		                tax
.0f9a	68		                pla
.0f9b	28		                plp
.0f9c	60		                rts
>0f9d	28		ymult          .byte     40
>0f9e	00 00		addr1          .word     $0000
>0fa0	00 00		addr2          .word     $0000
>0fa2	00 00		bytecnt        .word     $0000
>0fa4	00 00		zp1        .word   $0000
>0fa6	00 00		zp2        .word   $0000

;******  Return to file: siddemotxt.asm

.0fa8			main
.0fa8	20 48 09	               jsr  scrmaninit
.0fab	20 d6 09	               jsr  cls
.0fae	a9 06		               lda  #vbleu
.0fb0	20 28 0a	               jsr  setborder
.0fb3	a9 00		               lda  #0
.0fb5	8d ff 0f	               sta  compteur
.0fb8	8d 2f 10	nextblank      sta  blank+3
.0fbb	a2 2c		               ldx  #<blank
.0fbd	a0 10		               ldy  #>blank
.0fbf	20 b6 0a	               jsr  putscxy
.0fc2	ce ff 0f	               dec  compteur
.0fc5	ad ff 0f	               lda  compteur
.0fc8	10 ee		               bpl  nextblank
.0fca	a2 59		               ldx  #<msg1a
.0fcc	a0 10		               ldy  #>msg1a
.0fce	20 b6 0a	               jsr  putscxy
.0fd1	a2 30		               ldx  #$30      ;Adresse de destination
.0fd3	a0 00		               ldy  #$00      ;
.0fd5	20 b6 0d	               jsr  chargen2ram
.0fd8	ad 18 d0	               lda  viccptr
.0fdb	29 f1		               and  #241
.0fdd	09 0c		               ora  #12
.0fdf	a9 1d		               lda  #29
.0fe1	8d 18 d0	               sta  viccptr
.0fe4	60		               rts
.0fe5	ce 20 d0	ici            dec  vborder
.0fe8	ad 11 d0	waitscan       lda  vicreg11
.0feb	10 fb		               bpl  waitscan
.0fed	ee 20 d0	               inc  vborder
.0ff0	ad 22 d0	               lda  $d022
.0ff3	18		               clc
.0ff4	69 01		               adc  #$01
.0ff6	29 0f		               and  #$0f
.0ff8	8d 22 d0	               sta  $d022
.0ffb	4c e5 0f	               jmp  ici
.0ffe	60		out            rts
>0fff	02		compteur       .byte 2
>1000	01 02 00 01	               .text 1,2,0,1,"0123456789012345678901234567890123456789"
>1004	30 31 32 33 34 35 36 37 38 39 30 31 32 33 34 35
>1014	36 37 38 39 30 31 32 33 34 35 36 37 38 39 30 31
>1024	32 33 34 35 36 37 38 39
>102c	01 03 00 00	blank          .text 1,3,0,0,"                                        ",0
>1030	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1040	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1050	20 20 20 20 20 20 20 20 00
>1059	01 03 00 00	msg1a          .text 1,3,0,0," C64/C64c - SID alternatives comparison ",0
>105d	20 43 36 34 2f 43 36 34 03 20 2d 20 53 49 44 20
>106d	01 0c 14 05 12 0e 01 14 09 16 05 13 20 03 0f 0d
>107d	10 01 12 09 13 0f 0e 20 00

;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L v20start.txt -o v20start.prg v20start.asm
; Mon May 29 20:54:38 2023

;Offset	;Hex		;Source

;******  Processing input file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-v20ex.asm

>1201	0b 12 0a 00	.word (+), 10       ;$1201 : Debut + 10 =$120b, $0010
>1205	9e 34 36 32	.null $9e, "4621"   ;$1205 : "sys4621" = jsr #120d
>1209	31 00
>120b	00 00		+ .word 0           ;$120b : $0000

;******  Return to file: v20start.asm

=1			TITLELINE=1
=6			BINLINE=6
=6			BINCOLM=6
=$10			XVAL=$10
=$40			XCPX=$40
=$03			DIFF=$03
.120d	20 23 14	main            jsr scrmaninit
.1210	48		                pha
.1211	a9 0e		                lda #(vnoir*16+(vbleu|8))
.1213	8d 0f 90	                sta  vicscrbrd
.1216	68		                pla
.1217	48		                pha
.1218	a9 01		                lda  #vblanc
.121a	8d 86 02	                sta  bascol
.121d	68		                pla
.121e	a2 01		                ldx #<1
.1220	a0 00		                ldy #>1
.1222	20 bf 14	                jsr putsxy
.1225	48		                pha
.1226	a9 02		                lda  #vred
.1228	8d 86 02	                sta  bascol
.122b	68		                pla
.122c	a2 02		                ldx #<BINCOLM-4
.122e	a0 00		                ldy #>BINCOLM-4
.1230	20 bf 14	                jsr putsxy
.1233	48		                pha
.1234	a9 05		                lda  #vgreen
.1236	8d 86 02	                sta  bascol
.1239	68		                pla
.123a	a2 01		                ldx #<BINCOLM-5
.123c	a0 00		                ldy #>BINCOLM-5
.123e	20 bf 14	                jsr putsxy
.1241	48		                pha
.1242	a9 05		                lda  #vgreen
.1244	8d 86 02	                sta  bascol
.1247	68		                pla
.1248	a2 07		                ldx #<BINCOLM+1
.124a	a0 00		                ldy #>BINCOLM+1
.124c	20 bf 14	                jsr putsxy
.124f	48		                pha
.1250	a9 05		                lda  #vgreen
.1252	8d 86 02	                sta  bascol
.1255	68		                pla
.1256	a2 07		                ldx #<BINCOLM+1
.1258	a0 00		                ldy #>BINCOLM+1
.125a	20 bf 14	                jsr putsxy
.125d	48		                pha
.125e	a9 04		                lda  #vmauve
.1260	8d 86 02	                sta  bascol
.1263	68		                pla
.1264	a2 0f		                ldx #<BINCOLM+9
.1266	a0 00		                ldy #>BINCOLM+9
.1268	20 bf 14	                jsr putsxy
.126b	48		                pha
.126c	a9 07		                lda  #vjaune
.126e	8d 86 02	                sta  bascol
.1271	68		                pla
.1272	a2 06		                ldx #<BINCOLM
.1274	a0 00		                ldy #>BINCOLM
.1276	20 bf 14	                jsr putsxy
.1279	48		                pha
.127a	a9 07		                lda  #vjaune
.127c	8d 86 02	                sta  bascol
.127f	68		                pla
.1280	a2 06		                ldx #<BINCOLM
.1282	a0 00		                ldy #>BINCOLM
.1284	20 bf 14	                jsr putsxy
.1287	a9 10		                lda #XVAL    ; initialise ...
.1289	8d 19 14	                sta count   ; ...le compteur
.128c	ad 19 14	next            lda count
.128f	38		                sec
.1290	ed 1a 14	                sbc tstval
.1293	8d 1b 14	                sta result
.1296	ae 19 14	                ldx count
.1299	a9 00		                lda #$00
.129b	48		                pha
.129c	28		                plp
.129d	ec 1a 14	                cpx tstval
.12a0	08		                php
.12a1	68		                pla
.12a2	20 1a 18	                jsr atobin
.12a5	48		                pha
.12a6	48		                pha
.12a7	a9 07		                lda  #vyellow
.12a9	8d 86 02	                sta  bascol
.12ac	68		                pla
.12ad	20 c0 15	                jsr push
.12b0	a2 06		                ldx  #BINCOLM
.12b2	a0 07		                ldy  #BINLINE+1
.12b4	20 75 14	                jsr  gotoxy
.12b7	20 ff 15	                jsr pop
.12ba	a9 25		                lda  #"%"
.12bc	20 58 14	                jsr  putch
.12bf	a2 3b		                ldx  #<abin
.12c1	a0 18		                ldy  #>abin
.12c3	20 5e 14	                jsr  puts
.12c6	8a		                txa
.12c7	20 cd 17	                jsr a2hex
.12ca	48		                pha
.12cb	a9 03		                lda  #vcyan
.12cd	8d 86 02	                sta  bascol
.12d0	68		                pla
.12d1	20 c0 15	                jsr push
.12d4	a2 08		                ldx  #BINCOLM+2
.12d6	a0 09		                ldy  #BINLINE+3
.12d8	20 75 14	                jsr  gotoxy
.12db	20 ff 15	                jsr pop
.12de	a9 24		                lda  #"$"
.12e0	20 58 14	                jsr  putch
.12e3	a2 79		                ldx  #<a2hexstr
.12e5	a0 17		                ldy  #>a2hexstr
.12e7	20 5e 14	                jsr  puts
.12ea	20 c0 15	                jsr push
.12ed	a2 06		                ldx  #BINCOLM
.12ef	a0 0b		                ldy  #BINLINE+5
.12f1	20 75 14	                jsr  gotoxy
.12f4	20 ff 15	                jsr pop
.12f7	a9 24		                lda  #"$"
.12f9	20 58 14	                jsr  putch
.12fc	a2 79		                ldx  #<a2hexstr
.12fe	a0 17		                ldy  #>a2hexstr
.1300	20 5e 14	                jsr  puts
.1303	ad 1a 14	                lda tstval
.1306	20 cd 17	                jsr a2hex
.1309	48		                pha
.130a	a9 03		                lda  #vcyan
.130c	8d 86 02	                sta  bascol
.130f	68		                pla
.1310	20 c0 15	                jsr push
.1313	a2 11		                ldx  #BINCOLM+11
.1315	a0 09		                ldy  #BINLINE+3
.1317	20 75 14	                jsr  gotoxy
.131a	20 ff 15	                jsr pop
.131d	a9 24		                lda  #"$"
.131f	20 58 14	                jsr  putch
.1322	a2 79		                ldx  #<a2hexstr
.1324	a0 17		                ldy  #>a2hexstr
.1326	20 5e 14	                jsr  puts
.1329	20 c0 15	                jsr push
.132c	a2 0c		                ldx  #BINCOLM+6
.132e	a0 0b		                ldy  #BINLINE+5
.1330	20 75 14	                jsr  gotoxy
.1333	20 ff 15	                jsr pop
.1336	a9 24		                lda  #"$"
.1338	20 58 14	                jsr  putch
.133b	a2 79		                ldx  #<a2hexstr
.133d	a0 17		                ldy  #>a2hexstr
.133f	20 5e 14	                jsr  puts
.1342	ad 1b 14	                lda result
.1345	20 cd 17	                jsr a2hex
.1348	48		                pha
.1349	a9 03		                lda  #vcyan
.134b	8d 86 02	                sta  bascol
.134e	68		                pla
.134f	20 c0 15	                jsr push
.1352	a2 11		                ldx  #BINCOLM+11
.1354	a0 0b		                ldy  #BINLINE+5
.1356	20 75 14	                jsr  gotoxy
.1359	20 ff 15	                jsr pop
.135c	a9 24		                lda  #"$"
.135e	20 58 14	                jsr  putch
.1361	a2 79		                ldx  #<a2hexstr
.1363	a0 17		                ldy  #>a2hexstr
.1365	20 5e 14	                jsr  puts
.1368	68		                pla
.1369	20 cd 17	                jsr a2hex
.136c	48		                pha
.136d	a9 03		                lda  #vcyan
.136f	8d 86 02	                sta  bascol
.1372	68		                pla
.1373	20 c0 15	                jsr push
.1376	a2 10		                ldx  #BINCOLM+10
.1378	a0 07		                ldy  #BINLINE+1
.137a	20 75 14	                jsr  gotoxy
.137d	20 ff 15	                jsr pop
.1380	a9 24		                lda  #"$"
.1382	20 58 14	                jsr  putch
.1385	a2 79		                ldx  #<a2hexstr
.1387	a0 17		                ldy  #>a2hexstr
.1389	20 5e 14	                jsr  puts
.138c	ee 19 14	                inc count
.138f	ad 1a 14	                lda tstval
.1392	18		                clc
.1393	69 03		                adc #DIFF
.1395	8d 1a 14	                sta tstval
.1398	20 9f 13	                jsr delay65536
.139b	4c 9b 13	ici             jmp ici
.139e	60		                rts
.139f			delay65536
.139f	20 c0 15	                jsr push
.13a2	a2 00		                ldx #$00
.13a4	a0 00		                ldy #$00
.13a6	88		waity           dey
.13a7	d0 fd		                bne waity
.13a9	ca		waitx           dex
.13aa	d0 fa		                bne waity
.13ac	20 ff 15	                jsr pop
.13af	60		                rts
>13b0	54 45 53 54	string1        .null    "test drapeaux cpu"
>13b4	20 44 52 41 50 45 41 55 58 20 43 50 55 00
>13c2	46 4c 41 47	string2        .null    "flags:nv-bdizc"
>13c6	53 3a 4e 56 2d 42 44 49 5a 43 00
>13d1	50 41 52 3a	string3        .null    "par: daniel lafrance"
>13d5	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>13e5	00
>13e6	28 20 20 20	string4        .null    "(   )"
>13ea	29 00
>13ec	5e 5e 5e 5e	string5        .byte    94,94,94,94,94,94,94,94,0
>13f0	5e 5e 5e 5e 00
>13f5	7d 7d 7d 7d	string6        .byte    125,125,125,125,125,125,125,125,0
>13f9	7d 7d 7d 7d 00
>13fe	58 3d 24 20	string7        .null    "x=$   cpx #$"
>1402	20 20 43 50 58 20 23 24 00
>140b	24 20 20 20	string8        .null    "$   - $   = $"
>140f	2d 20 24 20 20 20 3d 20 24 00
>1419	10		count          .byte    XVAL
>141a	40		tstval         .byte    XCPX
>141b	00		result         .byte    0
>141c	00		row            .byte    0
>141d	00		lin            .byte    0
>141e	34 12		adresse        .word     $1234

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-vic20-kernal.asm

=$90			kiostatus   =   $90     ; Kernal I/O status word (st) (byte)
=$b7			curfnlen    =   $b7     ; Current filename length (byte)
=$b9			cursecadd   =   $b9     ; Current secondary address (byte)
=$ba			curdevno    =   $ba     ; Current device number (byte)
=$bb			curfptr     =   $bb     ; Current file pointer (word)
=$fb			zpage1      =   $fb     ; zero page 1 address (word)
=$fd			zpage2      =   $fd     ; zero page 2 address (word)
=$0286			bascol      =   $0286   ; basic next chr colscreenram (byte)
=$1000			scrnramex   =   $1000   ; video character ram (with ram expansion)
=$1200			basicstaex  =   $1200   ; basic start address (with ram expansion)
=$9400			colorramex  =   $9400   ; video color ram (with ram expansion)
=$1e00			scrnram     =   $1e00   ; video character ram (no ram expansion)
=$1000			basicsta    =   $1000   ; basic start address (no ram expansion)
=$9600			colorram    =   $9600   ; video color ram (no ram expansion)
=$1e00			scrram0     =   scrnram
=7936			scrram1     =   scrram0+$0100
=$9600			colram0     =   colorram
=38656			colram1     =   colram0+$0100
=$8000			chargen     =   $8000
=$9000			ioblock     =   $9000   ;
=$9000			vicchip     =   $9000
=$a000			ramblk4     =   $a000
=$c000			basicrom    =   $c000
=$e000			kernalrom   =   $e000
=$03			bstop       =   $03      ;stop
=$05			bwhite      =   $05      ;set color white
=$08			block       =   $08      ;lock the charset
=$09			bunlock     =   $09      ;unlock the charset
=$0d			bcarret     =   $0d
=$0e			btext       =   $0e
=$11			bcrsdn      =   $11      ;cursor down 1 line
=$12			brevcol     =   $12
=$13			bhome       =   $13
=$14			bdelete     =   $14
=$1c			bred        =   $1c
=$1d			bcuright    =   $1d
=$1e			bgreen      =   $1e
=$1f			bblue       =   $1f
=$81			borange     =   $81
=$83			blrun       =   $83
=$85			bfkey1      =   $85
=$86			bfkey2      =   $86
=$87			bfkey3      =   $87
=$88			bfkey4      =   $88
=$89			bfkey5      =   $89
=$8a			bfkey6      =   $8a
=$8b			bfkey7      =   $8b
=$8c			bfkey8      =   $8c
=$8d			bcarret1    =   $8d
=$8e			bgraph      =   $8e
=$90			bblack      =   $90
=$91			bcuup       =   $91
=$92			brevoff     =   $92
=$93			bclear      =   $93
=$94			binsert     =   $94
=$95			bbrown      =   $95
=$96			bltred      =   $96
=$97			bdkgrey     =   $97
=$98			bmdgrey     =   $98
=$99			bltgreen    =   $99
=$9a			bltblue     =   $9a
=$9b			bltgrey     =   $9b
=$9c			bmagenta    =   $9c
=$9d			bculeft     =   $9d
=$9e			byellow     =   $9e
=$9f			bcyan       =   $9f
=$0286			carcol      =   $0286
=$030a			ieval       =   $030a
=$73			chrget      =   $73
=$79			chrgot      =   $79
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$ffb4			stalk   = $ffb4 ; Send Talk command to serial bus.
=$ffb1			slisten = $ffb1 ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$ffa5			acptr   = $ffa5 ; jmp $ef19 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ffa8			ciout   = $ffa8 ; jmp $eee4 Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ffb1			listen  = $ffb1 ; jmp ($ee17) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f542 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe82 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe73 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ffde			rdtim   = $ffde ; jmp $f760 Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe57 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd52 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f675 Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $eb1e Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $eec0 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe50 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe66 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fe49 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f767 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe6f Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ee14 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $eec1 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f734 Update the system clock
=$ffae			unlsn   = $ffae ; jmp $ef04 Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $eef6 Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $f675 Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$f1ca			kd_chrout    =   $f1ca
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.1420	4c 0d 12	pgmstart        jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-vic20-vic.asm

=$9000			vic = $9000			; VicII C64 memorymap base address
=36864			vichorcnt = vic+$00	; $9000, 36864 Bit 0-6 Horizontal centering.
=36865			vicvercnt = vic+$01	; $9001, 36865 Vertical centering.
=36866			viccolnum = vic+$02	; $9002, 36866 Bit 0-6 set # of column.
=36867			vicrownum = vic+$03	; $9003, 36867 Bit 1-6 set # of rows.
=36868			vicsrastr = vic+$04	; $9004, 36868 TV raster beam line.
=36869			viccstart = vic+$05	; $9005, 36869 Bit 0-3 start of character memory (dflt=0).
=36870			vicpenhor = vic+$06	; $9006, 36870 Horizontal position of light pen.
=36871			vicpenver = vic+$07	; $9007, 36871 Vertical position of light pen
=36872			vicpadhor = vic+$08	; $9008, 36872 Digitized value of paddle X
=36873			vicpadver = vic+$09	; $9009, 36873 Digitized value of paddle Y
=36874			vicosclhz = vic+$0a	; $900a, 36874 Oscillator 1 freq. (low) (on: 128-255)
=36875			vicoscmhz = vic+$0b	; $900b, 36875 Oscillator 2 freq. (medium) (on: 128-255)
=36876			vicoschhz = vic+$0c	; $900c, 36876 Oscillator 3 freq. (high) (on: 128-255)
=36877			vicnoizhz = vic+$0d	; $900d, 36877 Noise source freq.
=36878			vicvolume = vic+$0e	; $900e, 36878 Bit 0-3 set volume of all sound.
=36879			vicscrbrd = vic+$0f	; $900f, 36879 Screen and border color register.
=36879			vicbordcol=vicscrbrd
=36879			vicbackcol=vicscrbrd

;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-Vic20-basic2.asm

=$c3bb			b_opentxtspc  = $c3bb ;  1) Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$c408			b_chkavailmem = $c408 ;  2) Check available Memory. *1  ;a-y;---; Array top $yyaa
=$c435			b_outofmem    = $c435 ;  3) ?Out of memory.             ;---;---;
=$c437			b_errormesg   = $c437 ;  4) Send BASIC error message.   ;a--;---; a = errno
=$e467			b_warmstart   = $e467 ;  5) Basic warm start.           ;---;---;
=$c48a			b_chrget      = $c48a ;  6) Main CHRGET entry.          ;---;---;
=$c49c			b_newline     = $c49c ;  7) Crunch tokens, insert line. ;-x-;---; x = buff len
=$c52a			b_clrready    = $c52a ;  8) Fix chaining CLR and READY. ;---;---;
=$c533			b_fixchaining = $c533 ;  9) Fix chaining.               ;---;---;
=$c560			b_kbgetline   = $c560 ; 10) Recieve line from keyboard.
=$c579			b_crunchtkns  = $c579 ; 11) Crunch token. *7            ;-x-;---: x = buff len
=$c613			b_findline    = $c613 ; 12) Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$c642			b_new         = $c642 ; 13) Do NEW                      ;---;---;
=$c659			b_resetclr    = $c659 ; 14) Reset BASIC and do CLR      ;---;---;
=$c65e			b_clr         = $c65e ; 15) Do CLR                      ;---;---;
=$c68e			b_rstchrget   = $c68e ; 17) Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$c857			b_continue    = $c857 ; 18) Do CONTINUE.                ;a-y;---; curline $yyaa
=$c96b			b_getint      = $c96b ; 19) Get int from BASIX text.    ;---;---;
=$cad3			b_sndcr       = $cad3 ; 20) Send RETURN, LF in scr mode.;---;a--; a = LF
=$cad7			b_sndcrlf     = $cad7 ; 21) Send RETURN, LINEFEED.      ;---;a--; a = LF
=$cb1e			b_outstr_ay   = $cb1e ; 22) Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$cb1e			b_puts        = b_outstr_ay
=$cb24			b_outstrprep  = $cb24 ; 23) Print precomputated string. ;a--;---; a = strlen
=$cb45			b_printqm     = $cb45 ; 24) Print '?'.                  ;---;---;
=$cb47			b_sendchar    = $cb47 ; 25) Send char in a to device.   ;a--;a--; a = char
=$cd8a			b_frmnum      = $cd8a ; Evaluate numeric expression and/or check for data type mismatch
=$cd9e			b_evalexpr    = $cd9e ; 26) Evaluate expression.
=$cefd			b_chk4comma   = $cefd ; 27) Check for coma.             ;---;a--; a = char
=$cefa			b_chk4lpar    = $cefa ; 28) check for '('.              ;---;a--; a = char
=$cef7			b_chk4rpar    = $cef7 ; 29) check for ')'.              ;---;a--; a = char
=$cf08			b_syntaxerr   = $cf08 ; 30) send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; 31) find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; 32) Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; 33) Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; 34) Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; 35) Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; 36) Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; 37) Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; 38) Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; 39) Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; 40) Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; 41) Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; 42) Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; 43) Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; 44) Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; 45) Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; 46) Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; 47) Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; 48) Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; 49) Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; 50) Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-Vic20-basic2.asm

.1423			scrmaninit
.1423	20 c0 15	               jsr  push
.1426	a9 00		               lda  #vnoir
.1428	2a		               rol
.1429	2a		               rol
.142a	2a		               rol
.142b	2a		               rol
.142c	09 05		               ora  #vvert
.142e	09 08		               ora  #%00001000
.1430	8d 0f 90	               sta  vicbackcol
.1433	a9 01		               lda  #vblanc
.1435	8d 86 02	               sta  bascol
.1438	a9 02		               lda  #%00000010
.143a	8d 00 90	               sta  vichorcnt
.143d	20 44 14	               jsr  cls
.1440	20 ff 15	               jsr  pop
.1443	60		               rts
.1444			cls
.1444	08		               php
.1445	48		               pha
.1446	a9 93		               lda  #$93
.1448	20 58 14	               jsr  putch
.144b	a9 04		               lda  #$04
.144d	8d 00 90	               sta  vichorcnt
.1450	a9 1a		               lda  #$1a
.1452	8d 01 90	               sta  vicvercnt
.1455	68		               pla
.1456	28		               plp
.1457	60		               rts
.1458			putch
.1458	08		               php
.1459	20 d2 ff	               jsr  $ffd2
.145c	28		               plp
.145d	60		               rts
.145e			puts
.145e	20 c0 15	               jsr  push
.1461	86 fb		               stx  zpage1
.1463	84 fc		               sty  zpage1+1
.1465	a0 00		               ldy  #$00
.1467	b1 fb		next           lda  (zpage1),y
.1469	f0 06		               beq  out
.146b	20 58 14	               jsr  putch
.146e	c8		               iny
.146f	d0 f6		               bne  next
.1471	20 ff 15	out            jsr  pop
.1474	60		               rts
.1475			gotoxy
.1475	20 c0 15	               jsr  push
.1478	18		               clc
.1479	98		               tya
.147a	48		               pha
.147b	8a		               txa
.147c	a8		               tay
.147d	68		               pla
.147e	aa		               tax
.147f	20 f0 ff	               jsr  kplot
.1482	20 ff 15	               jsr  pop
.1485	60		               rts
.1486			cursor
=$0286			bascol    =    $0286
.1486	08		               php
.1487	48		               pha
.1488	90 12		               bcc  restore
.148a	20 f0 ff	               jsr  kplot
.148d	8c ae 14	               sty  cx
.1490	8e af 14	               stx  cy
.1493	ad 86 02	               lda  bascol
.1496	8d b0 14	               sta  bcol
.1499	4c ab 14	               jmp  out
.149c	ae af 14	restore        ldx  cy
.149f	ac ae 14	               ldy  cx
.14a2	20 f0 ff	               jsr  kplot
.14a5	ad b0 14	               lda  bcol
.14a8	8d 86 02	               sta  bascol
.14ab	68		out            pla
.14ac	28		               plp
.14ad	60		               rts
>14ae	00		cx   .byte     $00
>14af	00		cy   .byte     $00
>14b0	00		bcol .byte     $00
.14b1			cursave
.14b1	08		               php
.14b2	38		               sec
.14b3	20 86 14	               jsr  cursor
.14b6	28		               plp
.14b7	60		               rts
.14b8			curput
.14b8	08		               php
.14b9	18		               clc
.14ba	20 86 14	               jsr  cursor
.14bd	28		               plp
.14be	60		               rts
.14bf			putsxy
.14bf	08		               php
.14c0	8e 24 15	               stx  straddr
.14c3	8c 25 15	               sty  straddr+1
.14c6	48		               pha
.14c7	98		               tya
.14c8	48		               pha
.14c9	8a		               txa
.14ca	48		               pha
.14cb	a5 fb		               lda  zpage1
.14cd	8d 28 15	               sta  zp1
.14d0	a5 fc		               lda  zpage1+1
.14d2	8d 29 15	               sta  zp1+1
.14d5	ad 25 15	               lda  straddr+1
.14d8	85 fc		               sta  zpage1+1
.14da	ad 24 15	               lda  straddr
.14dd	85 fb		               sta  zpage1
.14df	a0 00		               ldy  #$00
.14e1	b1 fb		               lda  (zpage1),y
.14e3	8d 26 15	               sta  px
.14e6	c8		               iny
.14e7	b1 fb		               lda  (zpage1),y
.14e9	8d 27 15	               sta  py
.14ec	aa		               tax
.14ed	ac 26 15	               ldy  px
.14f0	20 75 14	               jsr  gotoxy
.14f3	18		               clc
.14f4	ee 24 15	               inc  straddr
.14f7	ad 24 15	               lda  straddr
.14fa	8d 24 15	               sta  straddr
.14fd	90 03		               bcc  norep1
.14ff	ee 25 15	               inc  straddr+1
.1502	ee 24 15	norep1         inc  straddr
.1505	90 03		               bcc  norep2
.1507	ee 25 15	               inc  straddr+1
.150a	ad 24 15	norep2         lda  straddr
.150d	ac 25 15	               ldy  straddr+1
.1510	20 5e 14	               jsr  puts
.1513	ad 29 15	               lda  zp1+1
.1516	85 fc		               sta  zpage1+1
.1518	ad 28 15	               lda  zp1
.151b	85 fb		               sta  zpage1
.151d	68		               pla
.151e	aa		               tax
.151f	68		               pla
.1520	a8		               tay
.1521	68		               pla
.1522	28		               plp
.1523	60		               rts
>1524	00 00		straddr   .word     $00
>1526	00		px        .byte     $00
>1527	00		py        .byte     $00
>1528	00 00		zp1       .word     $00
.152a			putscxy
.152a	08		               php
.152b	8e 80 15	               stx  straddr
.152e	8c 81 15	               sty  straddr+1
.1531	48		               pha
.1532	98		               tya
.1533	48		               pha
.1534	8a		               txa
.1535	48		               pha
.1536	a5 fb		               lda  zpage1
.1538	8d 83 15	               sta  zp1
.153b	a5 fc		               lda  zpage1+1
.153d	8d 84 15	               sta  zp1+1
.1540	ad 81 15	               lda  straddr+1
.1543	85 fc		               sta  zpage1+1
.1545	ad 80 15	               lda  straddr
.1548	85 fb		               sta  zpage1
.154a	ad 86 02	               lda  bascol
.154d	8d 82 15	               sta  bc
.1550	a0 00		               ldy #$00
.1552	b1 fb		               lda  (zpage1),y
.1554	8d 86 02	               sta  bascol
.1557	18		               clc
.1558	ee 80 15	               inc  straddr
.155b	90 03		               bcc  norep1
.155d	ee 81 15	               inc  straddr+1
.1560	ad 80 15	norep1         lda  straddr
.1563	ac 81 15	               ldy  straddr+1
.1566	20 bf 14	               jsr  putsxy
.1569	ad 82 15	               lda  bc
.156c	8d 86 02	               sta  bascol
.156f	ad 84 15	               lda  zp1+1
.1572	85 fc		               sta  zpage1+1
.1574	ad 83 15	               lda  zp1
.1577	85 fb		               sta  zpage1
.1579	68		               pla
.157a	aa		               tax
.157b	68		               pla
.157c	a8		               tay
.157d	68		               pla
.157e	28		               plp
.157f	60		               rts
>1580	00 00		straddr  .word      $00
>1582	00		bc       .byte      $00
>1583	00 00		zp1      .word      $00
.1585			putrahex
.1585	08		               php
.1586	48		               pha
.1587	20 cd 17	               jsr  a2hex
.158a	a9 79		               lda  #<a2hexstr
.158c	a0 17		               ldy  #>a2hexstr
.158e	20 5e 14	               jsr  puts
.1591	68		               pla
.1592	28		               plp
.1593	60		               rts
.1594			kputrahexxy
.1594			bputrahexxy
.1594			putrahexxy
.1594	08		               php
.1595	20 cd 17	               jsr  a2hex
.1598	a9 76		               lda  #<a2hexpos
.159a	a0 17		               ldy  #>a2hexpos
.159c	20 bf 14	               jsr  putsxy
.159f	68		               pla
.15a0	28		               plp
.15a1	60		               rts
.15a2			putrahexcxy
.15a2	08		               php
.15a3	20 cd 17	               jsr  a2hex
.15a6	a9 76		               lda  #<a2hexpos
.15a8	a0 17		               ldy  #>a2hexpos
.15aa	20 2a 15	               jsr  putscxy
.15ad	68		               pla
.15ae	28		               plp
.15af	60		               rts
.15b0			setinverse
.15b0	48		               pha
.15b1	a9 12		               lda  #$12
.15b3	20 d2 ff	               jsr  $ffd2
.15b6	68		               pla
.15b7	60		               rts
.15b8			clrinverse
.15b8	48		               pha
.15b9	a9 92		               lda  #$92
.15bb	20 d2 ff	               jsr  $ffd2
.15be	68		               pla
.15bf	60		               rts

;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.15c0			push
.15c0	08		          php            ; stack : flg, pcl, pch
.15c1	78		          sei
.15c2	8d fc 15	          sta  ra        ; save a
.15c5	68		          pla            ; stack : pcl, pch
.15c6	8d fb 15	          sta  rp        ; save rp
.15c9	68		          pla            ; stack : pch
.15ca	8d fd 15	          sta  pc        ; save pcl
.15cd	68		          pla            ; stack : -
.15ce	8d fe 15	          sta  pc+1      ; save pch
.15d1	a5 fb		          lda  zpage1    ; get zpage1 low byte
.15d3	48		          pha            ; stack : zp1l
.15d4	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.15d6	48		          pha            ; stack : zp1h, zp1l
.15d7	a5 fd		          lda  zpage2    ; get zpage2 low byte
.15d9	48		          pha            ; stack : zp2l, zp1h, zp1l
.15da	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.15dc	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.15dd	ad fb 15	          lda  rp        ; get rp
.15e0	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.15e1	ad fc 15	          lda  ra        ; get a
.15e4	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.15e5	8a		          txa            ; get x
.15e6	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.15e7	98		          tya            ; get y
.15e8	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.15e9	ad fe 15	          lda  pc+1      ; get pch
.15ec	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.15ed	ad fd 15	          lda  pc        ; get pcl
.15f0	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.15f1	ad fb 15	          lda  rp        ; get rp
.15f4	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.15f5	ad fc 15	          lda  ra        ; get a
.15f8	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.15f9	58		          cli
.15fa	60		          rts
>15fb	00		rp        .byte     0
>15fc	00		ra        .byte     0
>15fd	00 00		pc        .word     0
.15ff			pull
.15ff			pop
.15ff	78		          sei
.1600	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1601	8d 34 16	          sta  pc        ; save pcl
.1604	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1605	8d 35 16	          sta  pc+1      ; save pch
.1608	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1609	a8		          tay            ; set y
.160a	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.160b	aa		          tax            ; set x
.160c	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.160d	8d 33 16	          sta  ra        ; save a
.1610	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1611	8d 32 16	          sta  rp        ; save rp
.1614	68		          pla            ; stack : zp2l, zp1h, zp1l
.1615	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.1617	68		          pla            ; stack : zp1h, zp1l
.1618	85 fd		          sta  zpage2    ; get zpage2 High byte
.161a	68		          pla            ; stack : zp1l
.161b	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.161d	68		          pla            ; stack :
.161e	85 fb		          sta  zpage1    ; get zpage1 High byte
.1620	ad 35 16	          lda  pc+1      ; get pch
.1623	48		          pha            ; stack : pch
.1624	ad 34 16	          lda  pc
.1627	48		          pha            ; stack : pcl, pch
.1628	ad 32 16	          lda  rp        ; get rp
.162b	48		          pha            ; stack : rp, pcl, pch
.162c	ad 33 16	          lda  ra        ; set ra
.162f	58		          cli
.1630	28		          plp            ; stack : pcl, pch
.1631	60		          rts
>1632	00		rp        .byte     0
>1633	00		ra        .byte     0
>1634	00 00		pc        .word     0

;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.1636			blkfill
.1636	20 c0 15	bf0            jsr  push
.1639	20 f4 16	               jsr  savezp1
.163c	84 fc		               sty  zpage1+1
.163e	a0 00		               ldy  #$00
.1640	84 fb		               sty  zpage1
.1642	91 fb		bf1            sta  (zpage1),y
.1644	c8		               iny
.1645	d0 fb		               bne  bf1
.1647	20 03 17	               jsr  restzp1
.164a	20 ff 15	               jsr  pop
.164d	60		               rts
.164e			memfill
.164e	20 c0 15	               jsr  push
.1651	20 36 16	mf1            jsr  blkfill
.1654	c8		               iny
.1655	ca		               dex
.1656	d0 f9		               bne  mf1
.1658	20 ff 15	               jsr  pop
.165b	60		               rts
.165c			memmove
.165c	20 c0 15	               jsr  push
.165f	ba		               tsx            ; On se crée un pointeur ...
.1660	8a		               txa
.1661	18		               clc
.1662	69 0b		               adc  #11
.1664	a8		               tay
.1665	a2 06		               ldx  #$06
.1667	b9 00 01	nextbyte       lda  $0100,y
.166a	99 b6 16	               sta  words,y
.166d	c8		               iny
.166e	ca		               dex
.166f	d0 f6		               bne  nextbyte
.1671	ad b6 16	               lda  s
.1674	8d 8d 16	               sta  source+1
.1677	ad b7 16	               lda  s+1
.167a	8d 8e 16	               sta  source+2
.167d	ad b8 16	               lda  d
.1680	8d 8a 16	               sta  destin+1
.1683	ad b9 16	               lda  d+1
.1686	8d 8b 16	               sta  destin+2
.1689	ad ff ff	destin         lda  $ffff
.168c	8d ff ff	source         sta  $ffff
.168f	ee 8a 16	               inc  destin+1
.1692	d0 03		               bne  src
.1694	ee 8b 16	               inc  destin+2
.1697	ee 8d 16	src            inc  source+1
.169a	d0 03		               bne  cnt
.169c	ee 8e 16	               inc  source+2
.169f	ad ba 16	cnt            lda  compte
.16a2	d0 08		               bne  decit
.16a4	ad bb 16	               lda  compte+1
.16a7	f0 09		               beq  fini
.16a9	ce bb 16	               dec  compte+1
.16ac	ce ba 16	decit          dec  compte
.16af	4c 89 16	               jmp  destin
.16b2	20 ff 15	fini           jsr  pop
.16b5	60		               rts
.16b6			words
>16b6	00 00		s         .word     $0000
>16b8	00 00		d         .word     $0000
>16ba	00 00		compte    .word     $0000
.16bc			decword
.16bc	20 c0 15	               jsr  push
.16bf	86 fd		               stx  zpage2
.16c1	84 fe		               sty  zpage2+1
.16c3	20 ff 15	               jsr  pop
.16c6	60		               rts
.16c7			inczp1
.16c7	08		               php
.16c8	e6 fb		               inc  zpage1
.16ca	d0 02		               bne  nopage
.16cc	e6 fc		               inc  zpage1+1
.16ce	28		nopage         plp
.16cf	60		               rts
.16d0			deczp1
.16d0	08		                php
.16d1	48		                pha
.16d2	c6 fb		                dec  zpage1
.16d4	d0 02		                bne  nopage
.16d6	c6 fc		                dec  zpage1+1
.16d8	c6 fb		nopage          dec  zpage1
.16da	68		                pla
.16db	28		                plp
.16dc	60		                rts
.16dd			inczp2
.16dd	08		               php
.16de	48		               pha
.16df	e6 fd		               inc  zpage2
.16e1	d0 02		               bne  nopage
.16e3	e6 fe		               inc  zpage2+1
.16e5	68		nopage         pla
.16e6	28		               plp
.16e7	60		               rts
.16e8			deczp2
.16e8	08		               php
.16e9	48		               pha
.16ea	a5 fd		               lda  zpage2
.16ec	d0 02		               bne  nopage
.16ee	c6 fe		               dec  zpage2+1
.16f0	c6 fd		nopage         dec  zpage2
.16f2	28		               plp
.16f3	60		               rts
.16f4			savezp1
.16f4	08		               php
.16f5	48		               pha
.16f6	a5 fb		               lda  zpage1
.16f8	8d 70 17	               sta  zp1
.16fb	a5 fc		               lda  zpage1+1
.16fd	8d 71 17	               sta  zp1+1
.1700	68		               pla
.1701	28		               plp
.1702	60		               rts
.1703			restzp1
.1703	08		               php
.1704	48		               pha
.1705	ad 70 17	               lda zp1
.1708	85 fb		               sta zpage1
.170a	ad 71 17	               lda zp1+1
.170d	85 fc		               sta zpage1+1
.170f	68		               pla
.1710	28		               plp
.1711	60		               rts
.1712			savezp2
.1712	08		         php
.1713	48		         pha
.1714	a5 fd		         lda zpage2
.1716	8d 72 17	         sta zp2
.1719	a5 fe		         lda zpage2+1
.171b	8d 73 17	         sta zp2+1
.171e	68		         pla
.171f	28		         plp
.1720	60		         rts
.1721			restzp2
.1721	08		                php
.1722	48		                pha
.1723	ad 72 17	                lda  zp2
.1726	85 fd		                sta  zpage2
.1728	ad 73 17	                lda  zp2+1
.172b	85 fe		                sta  zpage2+1
.172d	68		                pla
.172e	28		                plp
.172f	60		                rts
.1730			xy2addr
.1730	08		                php
.1731	48		                pha
.1732	8a		                txa
.1733	48		                pha
.1734	98		                tya
.1735	48		                pha
.1736	ad 6b 17	                lda     addr1+1
.1739	8d 6d 17	                sta     addr2+1
.173c	ad 6a 17	                lda     addr1
.173f	8d 6c 17	                sta     addr2
.1742	c0 00		                cpy     #$00
.1744	f0 0f		                beq     addx
.1746	18		moreline        clc
.1747	6d 69 17	                adc     ymult
.174a	90 03		                bcc     norepy
.174c	ee 6d 17	                inc     addr2+1
.174f	8d 6c 17	norepy          sta     addr2
.1752	88		                dey
.1753	d0 f1		                bne     moreline
.1755	8a		addx            txa
.1756	18		                clc
.1757	6d 6c 17	                adc     addr2
.175a	90 03		                bcc     thatsit
.175c	ee 6d 17	                inc     addr2+1
.175f	8d 6c 17	thatsit         sta     addr2
.1762	68		                pla
.1763	a8		                tay
.1764	68		                pla
.1765	aa		                tax
.1766	68		                pla
.1767	28		                plp
.1768	60		                rts
>1769	28		ymult          .byte     40
>176a	00 00		addr1          .word     $0000
>176c	00 00		addr2          .word     $0000
>176e	00 00		bytecnt        .word     $0000
>1770	00 00		zp1        .word   $0000
>1772	00 00		zp2        .word   $0000

;******  Return to file: v20start.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>1774	01		a2hexcol       .byte     1              ; pour aputscxy
>1775	00		a2hexbkcol     .byte     %00000000
.1776			a2hexpos
>1776	00		a2hexpx        .byte     0              ; pour aputsxy
>1777	00		a2hexpy        .byte     0
>1778	24		a2hexprefix    .byte     "$"            ; pour aputs
>1779	00 00		a2hexstr       .word     $00
>177b	00 00		               .word     $00
>177d	00		               .byte     0              ; 0 end string
.177e			putahexfmtxy
.177e	20 c0 15	               jsr  push
.1781	20 cd 17	               jsr  a2hex
.1784	ae 76 17	               ldx  a2hexpx
.1787	ac 77 17	               ldy  a2hexpy
.178a	20 75 14	               jsr  gotoxy
.178d	a2 78		               ldx  #<a2hexprefix
.178f	a0 17		               ldy  #>a2hexprefix
.1791	20 5e 14	               jsr  puts
.1794	20 ff 15	               jsr  pop
.1797	60		               rts
.1798			putahexfmt
.1798	20 c0 15	               jsr  push
.179b	20 cd 17	               jsr  a2hex
.179e	a2 78		               ldx  #<a2hexprefix
.17a0	a0 17		               ldy  #>a2hexprefix
.17a2	20 5e 14	               jsr  puts
.17a5	20 ff 15	               jsr  pop
.17a8	60		               rts
.17a9			putahex
.17a9	20 c0 15	               jsr  push
.17ac	20 cd 17	               jsr  a2hex
.17af	a2 79		               ldx  #<a2hexstr
.17b1	a0 17		               ldy  #>a2hexstr
.17b3	20 5e 14	               jsr  puts
.17b6	20 ff 15	               jsr  pop
.17b9	60		               rts
.17ba			nib2hex
.17ba	08		               php
.17bb	29 0f		               and  #$0f
.17bd	f8		               sed
.17be	18		               clc
.17bf	69 90		               adc  #$90
.17c1	69 40		               adc  #$40
.17c3	d8		               cld
.17c4	28		               plp
.17c5	60		               rts
.17c6			lsra4bits
.17c6	08		               php
.17c7	4a		               lsr
.17c8	4a		               lsr
.17c9	4a		               lsr
.17ca	4a		               lsr
.17cb	28		               plp
.17cc	60		               rts
.17cd			a2hex
.17cd	08		               php
.17ce	48		               pha
.17cf	48		               pha
.17d0	20 c6 17	               jsr  lsra4bits
.17d3	20 ba 17	               jsr  nib2hex
.17d6	8d 79 17	               sta  a2hexstr
.17d9	68		               pla
.17da	20 ba 17	               jsr  nib2hex
.17dd	8d 7a 17	               sta  a2hexstr+1
.17e0	a9 00		               lda  #$00                ; set end of string
.17e2	8d 7b 17	               sta  a2hexstr+2
.17e5	68		               pla
.17e6	28		               plp
.17e7	60		               rts
.17e8			xy2hex
.17e8	20 c0 15	               jsr  push
.17eb	20 cd 17	               jsr  a2hex
.17ee	8a		               txa
.17ef	48		               pha
.17f0	20 c6 17	               jsr  lsra4bits
.17f3	20 ba 17	               jsr  nib2hex
.17f6	8d 79 17	               sta  a2hexstr
.17f9	68		               pla
.17fa	20 ba 17	               jsr  nib2hex
.17fd	8d 7a 17	               sta  a2hexstr+1
.1800	98		               tya
.1801	48		               pha
.1802	20 c6 17	               jsr  lsra4bits
.1805	20 ba 17	               jsr  nib2hex
.1808	8d 7b 17	               sta  a2hexstr+2
.180b	68		               pla
.180c	20 ba 17	               jsr  nib2hex
.180f	8d 7c 17	               sta  a2hexstr+3
.1812	a9 00		               lda  #$00                ; 0 ended string
.1814	8d 7d 17	               sta  a2hexstr+4
.1817	20 ff 15	               jsr  pop
.181a			atobin
.181a	20 c0 15	               jsr     push
.181d	a2 08		               ldx     #8
.181f	a0 00		               ldy     #0
.1821	2a		nextbit        rol
.1822	48		               pha
.1823	69 00		               adc     #$00
.1825	29 01		               and     #$01
.1827	20 ba 17	               jsr     nib2hex
.182a	99 3b 18	               sta     abin,y
.182d	68		               pla
.182e	c8		               iny
.182f	ca		               dex
.1830	d0 ef		               bne     nextbit
.1832	a9 00		               lda     #0
.1834	99 3b 18	               sta     abin,y
.1837	20 ff 15	               jsr     pull
.183a	60		               rts
>183b	30 30 30 30	abin           .null   "00000000"
>183f	30 30 30 30 00
.1844			putabin
.1844	20 1a 18	               jsr     atobin
.1847	20 c0 15	               jsr     push
.184a	a2 3b		               ldx     #<abin
.184c	a0 18		               ldy     #>abin
.184e	20 5e 14	               jsr     puts
.1851	20 ff 15	               jsr     pop
.1854	60		               rts
.1855			putabinfmt
.1855	08		               php
.1856	48		               pha
.1857	a9 25		               lda     #"%"
.1859	20 58 14	               jsr     putch
.185c	68		               pla
.185d	20 44 18	               jsr     putabin
.1860	28		               plp
.1861	60		               rts
.1862			putabinxy
.1862	20 75 14	               jsr     gotoxy
.1865	20 44 18	               jsr     putabin
.1868	60		               rts
.1869			putabinfmtxy
.1869	20 75 14	               jsr     gotoxy
.186c	20 55 18	               jsr     putabinfmt
.186f	60		               rts

;******  Return to file: v20start.asm


;******  End of listing

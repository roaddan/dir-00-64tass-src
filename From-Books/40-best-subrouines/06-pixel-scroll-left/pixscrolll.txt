
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L pixscrolll.txt -o pixscrolll.prg pixscrolll.asm
; Thu May 25 22:28:43 2023

;Offset	;Hex		;Source

;******  Processing input file: pixscrolll.asm

="20230321-080800-a"	Version = "20230321-080800-a"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: pixscrolll.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: pixscrolll.asm

.080d			main
.080d	20 47 0a	                jsr scrmaninit
.0810	20 14 08	                jsr help
.0813	60		                rts
.0814			help
.0814	20 68 0a	                jsr cls
.0817	a2 88		                ldx  #<line
.0819	a0 09		                ldy  #>line
.081b	20 7d 0a	                jsr  puts
.081e	a2 49		                ldx  #<header
.0820	a0 08		                ldy  #>header
.0822	20 7d 0a	                jsr  puts
.0825	a2 88		                ldx  #<line
.0827	a0 09		                ldy  #>line
.0829	20 7d 0a	                jsr  puts
.082c	a2 34		                ldx  #<shortcuts
.082e	a0 09		                ldy  #>shortcuts
.0830	20 7d 0a	                jsr  puts
.0833	a2 88		                ldx  #<line
.0835	a0 09		                ldy  #>line
.0837	20 7d 0a	                jsr  puts
.083a	a2 b1		                ldx  #<helptext
.083c	a0 09		                ldy  #>helptext
.083e	20 7d 0a	                jsr  puts
.0841	a2 88		                ldx  #<line
.0843	a0 09		                ldy  #>line
.0845	20 7d 0a	                jsr  puts
.0848	60		                rts
.0849			header
>0849	20 20 20 20	                .text          "     40 BEST MACHINE CODE ROUTINES"
>084d	20 34 30 20 c2 c5 d3 d4 20 cd c1 c3 c8 c9 ce c5
>085d	20 c3 cf c4 c5 20 d2 cf d5 d4 c9 ce c5 d3
>086b	0d		                .byte   $0d
>086c	20 20 20 20	                .text          "          FOR THE COMMODORE 64"
>0870	20 20 20 20 20 20 c6 cf d2 20 d4 c8 c5 20 c3 cf
>0880	cd cd cf c4 cf d2 c5 20 36 34
>088a	0d		                .byte   $0d
>088b	20 20 20 20	                .text          "       Book by Mark Greenshields."
>088f	20 20 20 c2 4f 4f 4b 20 42 59 20 cd 41 52 4b 20
>089f	c7 52 45 45 4e 53 48 49 45 4c 44 53 2e
>08ac	0d 0d		                .byte   $0d,$0d
>08ae	20 20 20 20	                .text          "            pixscrolll (p38)"
>08b2	20 20 20 20 20 20 20 20 50 49 58 53 43 52 4f 4c
>08c2	4c 4c 20 28 50 33 38 29
>08ca	0d		                .byte   $0d
>08cb	20 20 20 20	                .text          "        (c) 1979 Brad Templeton"
>08cf	20 20 20 20 28 43 29 20 31 39 37 39 20 c2 52 41
>08df	44 20 d4 45 4d 50 4c 45 54 4f 4e
>08ea	0d 0d		                .byte   $0d,$0d
>08ec	20 20 20 20	                .text          "     Programmed by Daniel Lafrance."
>08f0	20 d0 52 4f 47 52 41 4d 4d 45 44 20 42 59 20 c4
>0900	41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e
>090f	0d		                .byte   $0d
>0910	20 20 20 20	                .text   format("       Version: %s.",Version)
>0914	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 33
>0924	30 33 32 31 2d 30 38 30 38 30 30 2d 41 2e
>0932	0d 00		                .byte   $0d,0
>0934	20 2d 2d 2d	shortcuts       .text          " -------- S H O R T - C U T S ---------"
>0938	2d 2d 2d 2d 2d 20 d3 20 c8 20 cf 20 d2 20 d4 20
>0948	2d 20 c3 20 d5 20 d4 20 d3 20 2d 2d 2d 2d 2d 2d
>0958	2d 2d 2d
>095b	0d		                .byte   $0d
>095c	20 52 55 4e	                .text   format(" run=SYS%5d, help=SYS%5d",main, help)
>0960	3d d3 d9 d3 20 32 30 36 31 2c 20 48 45 4c 50 3d
>0970	d3 d9 d3 20 32 30 36 38
>0978	0d		                .byte   $0d
>0979	20 43 4c 53	                .text   format(" cls=SYS%5d",cls)
>097d	3d d3 d9 d3 20 32 36 36 34
>0986	0d 00		                .byte   $0d,0
>0988	20 2d 2d 2d	line            .text          " --------------------------------------"
>098c	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>099c	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09ac	2d 2d 2d
>09af	0d 00		                .byte   $0d,0
>09b1	20 50 49 58	helptext        .text   format(" pixscrolll  : SYS%5d",pixscrolll)
>09b5	53 43 52 4f 4c 4c 4c 20 20 3a 20 d3 d9 d3 20 32
>09c5	35 33 39
>09c8	0d		                .byte   $0d
>09c9	20 45 58 2e	                .text   format(" ex.: for i=0to320:SYS%5d:next",pixscrolll)
>09cd	3a 20 46 4f 52 20 49 3d 30 54 4f 33 32 30 3a d3
>09dd	d9 d3 20 32 35 33 39 3a 4e 45 58 54
>09e9	0d 00		                .byte   $0d,0
.09eb			pixscrolll
.09eb	ad 16 d0	                lda vicctrl1h
.09ee	29 f8		                and #$f8
.09f0	18		                clc
.09f1	6d 46 0a	                adc mem1
.09f4	8d 16 d0	                sta vicctrl1h
.09f7	ce 46 0a	                dec mem1
.09fa	ad 46 0a	                lda mem1
.09fd	c9 ff		                cmp #$ff
.09ff	f0 01		                beq branch1
.0a01	60		                rts
.0a02	ad 16 d0	branch1         lda vicctrl1h
.0a05	29 f8		                and #$f8
.0a07	18		                clc
.0a08	69 07		                adc #$07
.0a0a	8d 16 d0	                sta vicctrl1h
.0a0d	a9 07		                lda #$07
.0a0f	8d 46 0a	                sta mem1
.0a12	20 16 0a	                jsr branch2
.0a15	60		                rts
.0a16	a9 06		branch2         lda #$06
.0a18	8d 44 03	                sta tpbuff+8
.0a1b	a2 00		                ldx #$00
.0a1d	a0 00		                ldy #$00
.0a1f	bd 01 04	a1034           lda viciiscn0+1,x
.0a22	9d 00 04	                sta viciiscn0,x
.0a25	bd f1 04	                lda viciiscn1+1,x
.0a28	9d f0 04	                sta viciiscn1,x
.0a2b	bd e1 05	                lda viciiscn2+1,x
.0a2e	9d e0 05	                sta viciiscn2,x
.0a31	bd d1 06	                lda viciiscn3+1,x
.0a34	9d d0 06	                sta viciiscn3,x
.0a37	e8		                inx
.0a38	c8		                iny
.0a39	c0 27		                cpy #$27
.0a3b	d0 e2		                bne a1034
.0a3d	e8		                inx
.0a3e	a0 00		                ldy #$00
.0a40	ce 44 03	                dec tpbuff+8
.0a43	d0 da		                bne a1034
.0a45	60		finish          rts
>0a46	00		mem1            .byte 0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ; 97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.0a47			libtart

;******  Return to file: pixscrolll.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: pixscrolll.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: pixscrolll.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0a47			scrmaninit
.0a47	20 6e 0b	               jsr  push
.0a4a	a9 06		               lda  #vbleu
.0a4c	8d 21 d0	               sta  vicbackcol
.0a4f	a9 05		               lda  #vvert
.0a51	8d 20 d0	               sta  vicbordcol
.0a54	a9 01		               lda  #vblanc
.0a56	8d 86 02	               sta  bascol
.0a59	ad 00 04	               lda  scrnram
.0a5c	29 fd		               and  #%11111101
.0a5e	8d 00 04	               sta  scrnram
.0a61	20 68 0a	               jsr  cls
.0a64	20 ad 0b	               jsr  pop
.0a67	60		               rts
.0a68			cls
.0a68	08		               php
.0a69	48		               pha
.0a6a	a9 93		               lda  #$93
.0a6c	20 77 0a	               jsr  putch
.0a6f	a9 0e		               lda  #$0e
.0a71	20 77 0a	               jsr  putch
.0a74	68		               pla
.0a75	28		               plp
.0a76	60		               rts
.0a77			putch
.0a77	08		               php
.0a78	20 d2 ff	               jsr  $ffd2
.0a7b	28		               plp
.0a7c	60		               rts
.0a7d			puts
.0a7d	20 6e 0b	               jsr  push
.0a80	86 fb		               stx  zpage1
.0a82	84 fc		               sty  zpage1+1
.0a84	a0 00		               ldy  #0
.0a86	b1 fb		next           lda  (zpage1),y
.0a88	f0 09		               beq  exit
.0a8a	20 77 0a	               jsr  putch
.0a8d	20 75 0c	               jsr  inczp1
.0a90	4c 86 0a	               jmp  next
.0a93	20 ad 0b	exit           jsr  pop
.0a96	60		               rts
.0a97			gotoxy
.0a97	08		               php
.0a98	18		               clc
.0a99	8a		               txa
.0a9a	48		               pha
.0a9b	98		               tya
.0a9c	aa		               tax
.0a9d	68		               pla
.0a9e	a8		               tay
.0a9f	20 f0 ff	               jsr  kplot
.0aa2	28		               plp
.0aa3	60		               rts
.0aa4			cursor
=$0286			bascol    =    $0286
.0aa4	08		               php
.0aa5	48		               pha
.0aa6	90 12		               bcc  restore
.0aa8	20 f0 ff	               jsr  kplot
.0aab	8c cc 0a	               sty  cx
.0aae	8e cd 0a	               stx  cy
.0ab1	ad 86 02	               lda  bascol
.0ab4	8d ce 0a	               sta  bcol
.0ab7	4c c9 0a	               jmp  out
.0aba	ae cd 0a	restore        ldx  cy
.0abd	ac cc 0a	               ldy  cx
.0ac0	20 f0 ff	               jsr  kplot
.0ac3	ad ce 0a	               lda  bcol
.0ac6	8d 86 02	               sta  bascol
.0ac9	68		out            pla
.0aca	28		               plp
.0acb	60		               rts
>0acc	00		cx   .byte     $00
>0acd	00		cy   .byte     $00
>0ace	00		bcol .byte     $00
.0acf			cursave
.0acf	08		               php
.0ad0	38		               sec
.0ad1	20 a4 0a	               jsr  cursor
.0ad4	28		               plp
.0ad5	60		               rts
.0ad6			curput
.0ad6	08		               php
.0ad7	18		               clc
.0ad8	20 a4 0a	               jsr  cursor
.0adb	28		               plp
.0adc	60		               rts
.0add			putsxy
.0add	20 6e 0b	               jsr  push
.0ae0	86 fb		               stx  zpage1
.0ae2	84 fc		               sty  zpage1+1
.0ae4	a0 00		               ldy  #$00
.0ae6	b1 fb		               lda  (zpage1),y
.0ae8	aa		               tax
.0ae9	20 75 0c	               jsr  inczp1
.0aec	b1 fb		               lda  (zpage1),y
.0aee	a8		               tay
.0aef	20 97 0a	               jsr  gotoxy
.0af2	20 75 0c	               jsr  inczp1
.0af5	a6 fb		               ldx  zpage1
.0af7	a4 fc		               ldy  zpage1+1
.0af9	20 7d 0a	               jsr  puts
.0afc	20 ad 0b	               jsr  pop
.0aff	60		               rts
>0b00	00 00		straddr   .word     $00
>0b02	00		px        .byte     $00
>0b03	00		py        .byte     $00
>0b04	00 00		zp1       .word     $00
.0b06			putscxy
.0b06	20 6e 0b	               jsr  push
.0b09	84 fc		               sty  zpage1+1
.0b0b	86 fb		               stx  zpage1
.0b0d	ad 86 02	               lda  bascol
.0b10	8d 30 0b	               sta  bc
.0b13	a0 00		               ldy #$00
.0b15	b1 fb		               lda  (zpage1),y
.0b17	8d 86 02	               sta  bascol
.0b1a	20 75 0c	               jsr  inczp1
.0b1d	a6 fb		               ldx  zpage1
.0b1f	a4 fc		               ldy  zpage1+1
.0b21	20 dd 0a	               jsr  putsxy
.0b24	ad 30 0b	               lda  bc
.0b27	8d 86 02	               sta  bascol
.0b2a	20 ad 0b	               jsr  pop
.0b2d	60		               rts
>0b2e	00 00		straddr  .word      $00
>0b30	00		bc       .byte      $00
>0b31	00 00		zp1      .word      $00
.0b33			putrahex
.0b33	08		               php
.0b34	48		               pha
.0b35	20 7b 0d	               jsr  a2hex
.0b38	a9 27		               lda  #<a2hexstr
.0b3a	a0 0d		               ldy  #>a2hexstr
.0b3c	20 7d 0a	               jsr  puts
.0b3f	68		               pla
.0b40	28		               plp
.0b41	60		               rts
.0b42			kputrahexxy
.0b42			bputrahexxy
.0b42			putrahexxy
.0b42	08		               php
.0b43	20 7b 0d	               jsr  a2hex
.0b46	a9 24		               lda  #<a2hexpos
.0b48	a0 0d		               ldy  #>a2hexpos
.0b4a	20 dd 0a	               jsr  putsxy
.0b4d	68		               pla
.0b4e	28		               plp
.0b4f	60		               rts
.0b50			putrahexcxy
.0b50	08		               php
.0b51	20 7b 0d	               jsr  a2hex
.0b54	a9 24		               lda  #<a2hexpos
.0b56	a0 0d		               ldy  #>a2hexpos
.0b58	20 06 0b	               jsr  putscxy
.0b5b	68		               pla
.0b5c	28		               plp
.0b5d	60		               rts
.0b5e			setinverse
.0b5e	48		               pha
.0b5f	a9 12		               lda  #$12
.0b61	20 d2 ff	               jsr  $ffd2
.0b64	68		               pla
.0b65	60		               rts
.0b66			clrinverse
.0b66	48		               pha
.0b67	a9 92		               lda  #$92
.0b69	20 d2 ff	               jsr  $ffd2
.0b6c	68		               pla
.0b6d	60		               rts

;******  Return to file: pixscrolll.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.0b6e			push
.0b6e	08		          php            ; stack : flg, pcl, pch
.0b6f	78		          sei
.0b70	8d aa 0b	          sta  ra        ; save a
.0b73	68		          pla            ; stack : pcl, pch
.0b74	8d a9 0b	          sta  rp        ; save rp
.0b77	68		          pla            ; stack : pch
.0b78	8d ab 0b	          sta  pc        ; save pcl
.0b7b	68		          pla            ; stack : -
.0b7c	8d ac 0b	          sta  pc+1      ; save pch
.0b7f	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0b81	48		          pha            ; stack : zp1l
.0b82	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0b84	48		          pha            ; stack : zp1h, zp1l
.0b85	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0b87	48		          pha            ; stack : zp2l, zp1h, zp1l
.0b88	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0b8a	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0b8b	ad a9 0b	          lda  rp        ; get rp
.0b8e	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0b8f	ad aa 0b	          lda  ra        ; get a
.0b92	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0b93	8a		          txa            ; get x
.0b94	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b95	98		          tya            ; get y
.0b96	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b97	ad ac 0b	          lda  pc+1      ; get pch
.0b9a	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b9b	ad ab 0b	          lda  pc        ; get pcl
.0b9e	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b9f	ad a9 0b	          lda  rp        ; get rp
.0ba2	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ba3	ad aa 0b	          lda  ra        ; get a
.0ba6	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ba7	58		          cli
.0ba8	60		          rts
>0ba9	00		rp        .byte     0
>0baa	00		ra        .byte     0
>0bab	00 00		pc        .word     0
.0bad			pull
.0bad			pop
.0bad	78		          sei
.0bae	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0baf	8d e2 0b	          sta  pc        ; save pcl
.0bb2	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0bb3	8d e3 0b	          sta  pc+1      ; save pch
.0bb6	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0bb7	a8		          tay            ; set y
.0bb8	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0bb9	aa		          tax            ; set x
.0bba	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0bbb	8d e1 0b	          sta  ra        ; save a
.0bbe	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0bbf	8d e0 0b	          sta  rp        ; save rp
.0bc2	68		          pla            ; stack : zp2l, zp1h, zp1l
.0bc3	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0bc5	68		          pla            ; stack : zp1h, zp1l
.0bc6	85 fd		          sta  zpage2    ; get zpage2 High byte
.0bc8	68		          pla            ; stack : zp1l
.0bc9	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0bcb	68		          pla            ; stack :
.0bcc	85 fb		          sta  zpage1    ; get zpage1 High byte
.0bce	ad e3 0b	          lda  pc+1      ; get pch
.0bd1	48		          pha            ; stack : pch
.0bd2	ad e2 0b	          lda  pc
.0bd5	48		          pha            ; stack : pcl, pch
.0bd6	ad e0 0b	          lda  rp        ; get rp
.0bd9	48		          pha            ; stack : rp, pcl, pch
.0bda	ad e1 0b	          lda  ra        ; set ra
.0bdd	58		          cli
.0bde	28		          plp            ; stack : pcl, pch
.0bdf	60		          rts
>0be0	00		rp        .byte     0
>0be1	00		ra        .byte     0
>0be2	00 00		pc        .word     0

;******  Return to file: pixscrolll.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.0be4			blkfill
.0be4	20 6e 0b	bf0            jsr  push
.0be7	20 a2 0c	               jsr  savezp1
.0bea	84 fc		               sty  zpage1+1
.0bec	a0 00		               ldy  #$00
.0bee	84 fb		               sty  zpage1
.0bf0	91 fb		bf1            sta  (zpage1),y
.0bf2	c8		               iny
.0bf3	d0 fb		               bne  bf1
.0bf5	20 b1 0c	               jsr  restzp1
.0bf8	20 ad 0b	               jsr  pop
.0bfb	60		               rts
.0bfc			memfill
.0bfc	20 6e 0b	               jsr  push
.0bff	20 e4 0b	mf1            jsr  blkfill
.0c02	c8		               iny
.0c03	ca		               dex
.0c04	d0 f9		               bne  mf1
.0c06	20 ad 0b	               jsr  pop
.0c09	60		               rts
.0c0a			memmove
.0c0a	20 6e 0b	               jsr  push
.0c0d	ba		               tsx            ; On se crée un pointeur ...
.0c0e	8a		               txa
.0c0f	18		               clc
.0c10	69 0b		               adc  #11
.0c12	a8		               tay
.0c13	a2 06		               ldx  #$06
.0c15	b9 00 01	nextbyte       lda  $0100,y
.0c18	99 64 0c	               sta  words,y
.0c1b	c8		               iny
.0c1c	ca		               dex
.0c1d	d0 f6		               bne  nextbyte
.0c1f	ad 64 0c	               lda  s
.0c22	8d 3b 0c	               sta  source+1
.0c25	ad 65 0c	               lda  s+1
.0c28	8d 3c 0c	               sta  source+2
.0c2b	ad 66 0c	               lda  d
.0c2e	8d 38 0c	               sta  destin+1
.0c31	ad 67 0c	               lda  d+1
.0c34	8d 39 0c	               sta  destin+2
.0c37	ad ff ff	destin         lda  $ffff
.0c3a	8d ff ff	source         sta  $ffff
.0c3d	ee 38 0c	               inc  destin+1
.0c40	d0 03		               bne  src
.0c42	ee 39 0c	               inc  destin+2
.0c45	ee 3b 0c	src            inc  source+1
.0c48	d0 03		               bne  cnt
.0c4a	ee 3c 0c	               inc  source+2
.0c4d	ad 68 0c	cnt            lda  compte
.0c50	d0 08		               bne  decit
.0c52	ad 69 0c	               lda  compte+1
.0c55	f0 09		               beq  fini
.0c57	ce 69 0c	               dec  compte+1
.0c5a	ce 68 0c	decit          dec  compte
.0c5d	4c 37 0c	               jmp  destin
.0c60	20 ad 0b	fini           jsr  pop
.0c63	60		               rts
.0c64			words
>0c64	00 00		s         .word     $0000
>0c66	00 00		d         .word     $0000
>0c68	00 00		compte    .word     $0000
.0c6a			decword
.0c6a	20 6e 0b	               jsr  push
.0c6d	86 fd		               stx  zpage2
.0c6f	84 fe		               sty  zpage2+1
.0c71	20 ad 0b	               jsr  pop
.0c74	60		               rts
.0c75			inczp1
.0c75	08		               php
.0c76	e6 fb		               inc  zpage1
.0c78	d0 02		               bne  nopage
.0c7a	e6 fc		               inc  zpage1+1
.0c7c	28		nopage         plp
.0c7d	60		               rts
.0c7e			deczp1
.0c7e	08		                php
.0c7f	48		                pha
.0c80	c6 fb		                dec  zpage1
.0c82	d0 02		                bne  nopage
.0c84	c6 fc		                dec  zpage1+1
.0c86	c6 fb		nopage          dec  zpage1
.0c88	68		                pla
.0c89	28		                plp
.0c8a	60		                rts
.0c8b			inczp2
.0c8b	08		               php
.0c8c	48		               pha
.0c8d	e6 fd		               inc  zpage2
.0c8f	d0 02		               bne  nopage
.0c91	e6 fe		               inc  zpage2+1
.0c93	68		nopage         pla
.0c94	28		               plp
.0c95	60		               rts
.0c96			deczp2
.0c96	08		               php
.0c97	48		               pha
.0c98	a5 fd		               lda  zpage2
.0c9a	d0 02		               bne  nopage
.0c9c	c6 fe		               dec  zpage2+1
.0c9e	c6 fd		nopage         dec  zpage2
.0ca0	28		               plp
.0ca1	60		               rts
.0ca2			savezp1
.0ca2	08		               php
.0ca3	48		               pha
.0ca4	a5 fb		               lda  zpage1
.0ca6	8d 1e 0d	               sta  zp1
.0ca9	a5 fc		               lda  zpage1+1
.0cab	8d 1f 0d	               sta  zp1+1
.0cae	68		               pla
.0caf	28		               plp
.0cb0	60		               rts
.0cb1			restzp1
.0cb1	08		               php
.0cb2	48		               pha
.0cb3	ad 1e 0d	               lda zp1
.0cb6	85 fb		               sta zpage1
.0cb8	ad 1f 0d	               lda zp1+1
.0cbb	85 fc		               sta zpage1+1
.0cbd	68		               pla
.0cbe	28		               plp
.0cbf	60		               rts
.0cc0			savezp2
.0cc0	08		         php
.0cc1	48		         pha
.0cc2	a5 fd		         lda zpage2
.0cc4	8d 20 0d	         sta zp2
.0cc7	a5 fe		         lda zpage2+1
.0cc9	8d 21 0d	         sta zp2+1
.0ccc	68		         pla
.0ccd	28		         plp
.0cce	60		         rts
.0ccf			restzp2
.0ccf	08		                php
.0cd0	48		                pha
.0cd1	ad 20 0d	                lda  zp2
.0cd4	85 fd		                sta  zpage2
.0cd6	ad 21 0d	                lda  zp2+1
.0cd9	85 fe		                sta  zpage2+1
.0cdb	68		                pla
.0cdc	28		                plp
.0cdd	60		                rts
.0cde			xy2addr
.0cde	08		                php
.0cdf	48		                pha
.0ce0	8a		                txa
.0ce1	48		                pha
.0ce2	98		                tya
.0ce3	48		                pha
.0ce4	ad 19 0d	                lda     addr1+1
.0ce7	8d 1b 0d	                sta     addr2+1
.0cea	ad 18 0d	                lda     addr1
.0ced	8d 1a 0d	                sta     addr2
.0cf0	c0 00		                cpy     #$00
.0cf2	f0 0f		                beq     addx
.0cf4	18		moreline        clc
.0cf5	6d 17 0d	                adc     ymult
.0cf8	90 03		                bcc     norepy
.0cfa	ee 1b 0d	                inc     addr2+1
.0cfd	8d 1a 0d	norepy          sta     addr2
.0d00	88		                dey
.0d01	d0 f1		                bne     moreline
.0d03	8a		addx            txa
.0d04	18		                clc
.0d05	6d 1a 0d	                adc     addr2
.0d08	90 03		                bcc     thatsit
.0d0a	ee 1b 0d	                inc     addr2+1
.0d0d	8d 1a 0d	thatsit         sta     addr2
.0d10	68		                pla
.0d11	a8		                tay
.0d12	68		                pla
.0d13	aa		                tax
.0d14	68		                pla
.0d15	28		                plp
.0d16	60		                rts
>0d17	28		ymult          .byte     40
>0d18	00 00		addr1          .word     $0000
>0d1a	00 00		addr2          .word     $0000
>0d1c	00 00		bytecnt        .word     $0000
>0d1e	00 00		zp1        .word   $0000
>0d20	00 00		zp2        .word   $0000

;******  Return to file: pixscrolll.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>0d22	01		a2hexcol       .byte     1              ; pour aputscxy
>0d23	00		a2hexbkcol     .byte     %00000000
.0d24			a2hexpos
>0d24	00		a2hexpx        .byte     0              ; pour aputsxy
>0d25	00		a2hexpy        .byte     0
>0d26	24		a2hexprefix    .byte     "$"            ; pour aputs
>0d27	00 00		a2hexstr       .word     $00
>0d29	00 00		               .word     $00
>0d2b	00		               .byte     0              ; 0 end string
.0d2c			putahexfmtxy
.0d2c	20 6e 0b	               jsr  push
.0d2f	20 7b 0d	               jsr  a2hex
.0d32	ae 24 0d	               ldx  a2hexpx
.0d35	ac 25 0d	               ldy  a2hexpy
.0d38	20 97 0a	               jsr  gotoxy
.0d3b	a2 26		               ldx  #<a2hexprefix
.0d3d	a0 0d		               ldy  #>a2hexprefix
.0d3f	20 7d 0a	               jsr  puts
.0d42	20 ad 0b	               jsr  pop
.0d45	60		               rts
.0d46			putahexfmt
.0d46	20 6e 0b	               jsr  push
.0d49	20 7b 0d	               jsr  a2hex
.0d4c	a2 26		               ldx  #<a2hexprefix
.0d4e	a0 0d		               ldy  #>a2hexprefix
.0d50	20 7d 0a	               jsr  puts
.0d53	20 ad 0b	               jsr  pop
.0d56	60		               rts
.0d57			putahex
.0d57	20 6e 0b	               jsr  push
.0d5a	20 7b 0d	               jsr  a2hex
.0d5d	a2 27		               ldx  #<a2hexstr
.0d5f	a0 0d		               ldy  #>a2hexstr
.0d61	20 7d 0a	               jsr  puts
.0d64	20 ad 0b	               jsr  pop
.0d67	60		               rts
.0d68			nib2hex
.0d68	08		               php
.0d69	29 0f		               and  #$0f
.0d6b	f8		               sed
.0d6c	18		               clc
.0d6d	69 90		               adc  #$90
.0d6f	69 40		               adc  #$40
.0d71	d8		               cld
.0d72	28		               plp
.0d73	60		               rts
.0d74			lsra4bits
.0d74	08		               php
.0d75	4a		               lsr
.0d76	4a		               lsr
.0d77	4a		               lsr
.0d78	4a		               lsr
.0d79	28		               plp
.0d7a	60		               rts
.0d7b			a2hex
.0d7b	08		               php
.0d7c	48		               pha
.0d7d	48		               pha
.0d7e	20 74 0d	               jsr  lsra4bits
.0d81	20 68 0d	               jsr  nib2hex
.0d84	8d 27 0d	               sta  a2hexstr
.0d87	68		               pla
.0d88	20 68 0d	               jsr  nib2hex
.0d8b	8d 28 0d	               sta  a2hexstr+1
.0d8e	a9 00		               lda  #$00                ; set end of string
.0d90	8d 29 0d	               sta  a2hexstr+2
.0d93	68		               pla
.0d94	28		               plp
.0d95	60		               rts
.0d96			xy2hex
.0d96	20 6e 0b	               jsr  push
.0d99	20 7b 0d	               jsr  a2hex
.0d9c	8a		               txa
.0d9d	48		               pha
.0d9e	20 74 0d	               jsr  lsra4bits
.0da1	20 68 0d	               jsr  nib2hex
.0da4	8d 27 0d	               sta  a2hexstr
.0da7	68		               pla
.0da8	20 68 0d	               jsr  nib2hex
.0dab	8d 28 0d	               sta  a2hexstr+1
.0dae	98		               tya
.0daf	48		               pha
.0db0	20 74 0d	               jsr  lsra4bits
.0db3	20 68 0d	               jsr  nib2hex
.0db6	8d 29 0d	               sta  a2hexstr+2
.0db9	68		               pla
.0dba	20 68 0d	               jsr  nib2hex
.0dbd	8d 2a 0d	               sta  a2hexstr+3
.0dc0	a9 00		               lda  #$00                ; 0 ended string
.0dc2	8d 2b 0d	               sta  a2hexstr+4
.0dc5	20 ad 0b	               jsr  pop
.0dc8			atobin
.0dc8	20 6e 0b	               jsr     push
.0dcb	a2 08		               ldx     #8
.0dcd	a0 00		               ldy     #0
.0dcf	2a		nextbit        rol
.0dd0	48		               pha
.0dd1	69 00		               adc     #$00
.0dd3	29 01		               and     #$01
.0dd5	20 68 0d	               jsr     nib2hex
.0dd8	99 e9 0d	               sta     abin,y
.0ddb	68		               pla
.0ddc	c8		               iny
.0ddd	ca		               dex
.0dde	d0 ef		               bne     nextbit
.0de0	a9 00		               lda     #0
.0de2	99 e9 0d	               sta     abin,y
.0de5	20 ad 0b	               jsr     pull
.0de8	60		               rts
>0de9	30 30 30 30	abin           .null   "00000000"
>0ded	30 30 30 30 00
.0df2			putabin
.0df2	20 c8 0d	               jsr     atobin
.0df5	20 6e 0b	               jsr     push
.0df8	a2 e9		               ldx     #<abin
.0dfa	a0 0d		               ldy     #>abin
.0dfc	20 7d 0a	               jsr     puts
.0dff	20 ad 0b	               jsr     pop
.0e02	60		               rts
.0e03			putabinfmt
.0e03	08		               php
.0e04	48		               pha
.0e05	a9 25		               lda     #"%"
.0e07	20 77 0a	               jsr     putch
.0e0a	68		               pla
.0e0b	20 f2 0d	               jsr     putabin
.0e0e	28		               plp
.0e0f	60		               rts
.0e10			putabinxy
.0e10	20 97 0a	               jsr     gotoxy
.0e13	20 f2 0d	               jsr     putabin
.0e16	60		               rts
.0e17			putabinfmtxy
.0e17	20 97 0a	               jsr     gotoxy
.0e1a	20 03 0e	               jsr     putabinfmt
.0e1d	60		               rts

;******  Return to file: pixscrolll.asm


;******  End of listing

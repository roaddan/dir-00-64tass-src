
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L irqtune3channel.txt -o irqtune3channel.prg irqtune3channel.asm
; Sat Apr  1 22:15:18 2023

;Offset	;Hex		;Source

;******  Processing input file: irqtune3channel.asm

="20230327-214534-a"	                Version = "20230327-214534-a"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: irqtune3channel.asm

.080d			main
.080d	20 db 60	                jsr scrmaninit
.0810	20 1c 08	                jsr help
.0813	20 be 64	                jsr anykey
.0816	20 00 60	                jsr irqtune3channel
.0819	4c 74 a4	                jmp b_warmstart
.081c			help
.081c	20 fc 60	                jsr cls
.081f	a2 a8		                ldx  #<line
.0821	a0 09		                ldy  #>line
.0823	20 11 61	                jsr  puts
.0826	a2 4a		                ldx  #<headera
.0828	a0 08		                ldy  #>headera
.082a	20 11 61	                jsr  puts
.082d	a2 cc		                ldx  #<headerb
.082f	a0 08		                ldy  #>headerb
.0831	20 11 61	                jsr  puts
.0834	a2 54		                ldx  #<shortcuts
.0836	a0 09		                ldy  #>shortcuts
.0838	20 11 61	                jsr  puts
.083b	a2 d1		                ldx  #<helptext
.083d	a0 09		                ldy  #>helptext
.083f	20 11 61	                jsr  puts
.0842	a2 a8		                ldx  #<line
.0844	a0 09		                ldy  #>line
.0846	20 11 61	                jsr  puts
.0849	60		                rts
.084a			headera
>084a	20 20 20 20	                .text          "     40 BEST MACHINE CODE ROUTINES"
>084e	20 34 30 20 c2 c5 d3 d4 20 cd c1 c3 c8 c9 ce c5
>085e	20 c3 cf c4 c5 20 d2 cf d5 d4 c9 ce c5 d3
>086c	0d		                .byte   $0d
>086d	20 20 20 20	                .text          "          FOR THE COMMODORE 64"
>0871	20 20 20 20 20 20 c6 cf d2 20 d4 c8 c5 20 c3 cf
>0881	cd cd cf c4 cf d2 c5 20 36 34
>088b	0d		                .byte   $0d
>088c	20 20 20 20	                .text          "       Book by Mark Greenshields."
>0890	20 20 20 c2 4f 4f 4b 20 42 59 20 cd 41 52 4b 20
>08a0	c7 52 45 45 4e 53 48 49 45 4c 44 53 2e
>08ad	0d		                .byte   $0d
>08ae	20 20 20 20	                .text          "          ISBN 0-7156-1899-7"
>08b2	20 20 20 20 20 20 c9 d3 c2 ce 20 30 2d 37 31 35
>08c2	36 2d 31 38 39 39 2d 37
>08ca	0d 00		                .byte   $0d,0
>08cc	20 20 20 20	headerb         .text          "         irqtune3channel (p79)"
>08d0	20 20 20 20 20 49 52 51 54 55 4e 45 33 43 48 41
>08e0	4e 4e 45 4c 20 28 50 37 39 29
>08ea	0d		                .byte   $0d
>08eb	20 20 20 20	                .text          "        (c) 1979 Brad Templeton"
>08ef	20 20 20 20 28 43 29 20 31 39 37 39 20 c2 52 41
>08ff	44 20 d4 45 4d 50 4c 45 54 4f 4e
>090a	0d		                .byte   $0d
>090b	20 20 20 20	                .text          "     programmed by Daniel Lafrance."
>090f	20 50 52 4f 47 52 41 4d 4d 45 44 20 42 59 20 c4
>091f	41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e
>092e	0d		                .byte   $0d
>092f	20 20 20 20	                .text   format("        Version: %s.",Version)
>0933	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>0943	33 30 33 32 37 2d 32 31 34 35 33 34 2d 41 2e
>0952	0d 00		                .byte   $0d,0
>0954	20 2d 2d 2d	shortcuts       .text          " -------- S H O R T - C U T S ---------"
>0958	2d 2d 2d 2d 2d 20 d3 20 c8 20 cf 20 d2 20 d4 20
>0968	2d 20 c3 20 d5 20 d4 20 d3 20 2d 2d 2d 2d 2d 2d
>0978	2d 2d 2d
>097b	0d		                .byte   $0d
>097c	20 52 55 4e	                .text   format(" run=SYS%5d, help=SYS%5d",main, help)
>0980	3d d3 d9 d3 20 32 30 36 31 2c 20 48 45 4c 50 3d
>0990	d3 d9 d3 20 32 30 37 36
>0998	0d		                .byte   $0d
>0999	20 43 4c 53	                .text   format(" cls=SYS%5d",cls)
>099d	3d d3 d9 d3 32 34 38 32 38
>09a6	0d 00		                .byte   $0d,0
>09a8	20 2d 2d 2d	line            .text          " --------------------------------------"
>09ac	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09bc	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09cc	2d 2d 2d
>09cf	0d 00		                .byte   $0d,0
>09d1	20 49 52 51	helptext        .text   format(" irqtune3channel: SYS%5d",irqtune3channel)
>09d5	54 55 4e 45 33 43 48 41 4e 4e 45 4c 3a 20 d3 d9
>09e5	d3 32 34 35 37 36
>09eb	0d		                .byte   $0d
>09ec	20 45 58 2e	                .text   format(" ex.: SYS%5d",irqtune3channel)
>09f0	3a 20 d3 d9 d3 32 34 35 37 36
>09fa	0d 00		                .byte   $0d,0
.6000			irqtune3channel
.6000	78		                sei
.6001	a9 30		                lda #<main
.6003	8d 14 03	                sta 788
.6006	a9 60		                lda #>main
.6008	8d 15 03	                sta 789
.600b	a9 0f		                lda #$0f    ; #15
.600d	8d 18 d4	                sta sigvol  ; $d418 ; 54296 - Volume and Filter selectv register
.6010	8d 04 d4	                sta vcreg1  ; $d404 ; 54276 - Voice 1 control register.
.6013	a9 40		                lda #64
.6015	8d 05 d4	                sta atdcy1  ; $d405 ; 54277 - Voive 1 attack/decay register.
.6018	8d 06 d4	                sta surel1  ; $d406 ; 54278 - Voice 1 Sustain/Release control register.
.601b	8d 0c d4	                sta atdcy2  ; $d40c ; 54284 - Voive 2 attack/decay register.
.601e	8d 0d d4	                sta surel2  ; $d40d ; 54285 - Voice 2 Sustain/Release control register.
.6021	a9 21		                lda #33
.6023	8d 0b d4	                sta vcreg2  ; $d40b ; 54283 - Voice 2 control register.
.6026	a9 00		                lda #0
.6028	85 fb		                sta 251
.602a	85 fc		                sta 252
.602c	85 fd		                sta 253
.602e	58		                cli
.602f	60		                rts
.6030	a6 fb		main            ldx 251
.6032	a4 fc		                ldy 252
.6034	bd 72 60	                lda tune,x
.6037	8d 00 d4	                sta frelo1  ; $d400 ; 54272 - Voice 1 frequency control (low byte).
.603a	bd a4 60	                lda tune1-2,x
.603d	8d 07 d4	                sta frelo2  ; $d407 ; 54279 - Voice 2 frequency control (low byte).
.6040	bd a5 60	                lda tune1-1,x
.6043	8d 08 d4	                sta frehi2  ; $d408 ; 54280 - Voice 2 frequency control (high byte).
.6046	bd 73 60	                lda tune+1,x
.6049	8d 01 d4	                sta frehi1  ; $d401 ; 54273 - Voice 1 frequency control (high byte).
.604c	a5 fd		                lda 253
.604e	c9 0a		                cmp #10
.6050	b0 05		                bcs nextdelay
.6052	e6 fd		                inc 253
.6054	4c 31 ea	                jmp irq     ; $ea31
.6057	a9 00		nextdelay       lda #0
.6059	85 fd		                sta 253
.605b	e8		                inx
.605c	e8		                inx
.605d	c8		                iny
.605e	86 fb		                stx 251
.6060	84 fc		                sty 252
.6062	e0 30		                cpx #48
.6064	b0 03		                bcs re
.6066	4c 31 ea	                jmp irq     ; $ea31
.6069	a2 00		re              ldx #0
.606b	85 fb		                sta 251
.606d	85 fc		                sta 252
.606f	4c 31 ea	                jmp irq     ; $ea31
>6072	c6 2d 00 00	tune            .byte 198, 45,  0,  0,198, 45, 52, 43
>6076	c6 2d 34 2b
>607a	7e 26 00 00	                .byte 126, 38,  0,  0,126, 38, 75, 34
>607e	7e 26 4b 22
>6082	7e 26 4b 22	                .byte 126, 38, 75, 34,141, 30,214, 28
>6086	8d 1e d6 1c
>608a	00 00 d6 1c	                .byte   0,  0,214, 28,141, 30, 75, 34
>608e	8d 1e 4b 22
>6092	e3 16 b1 19	                .byte 227, 22,177, 25,141, 30,214, 28
>6096	8d 1e d6 1c
>609a	b1 19 e3 16	                .byte 177, 25,227, 22,  0,  0,  0,  0
>609e	00 00 00 00
>60a2	00 00 00 00	                .byte   0,  0,  0,  0
>60a6	72 0b 00 00	tune1           .byte 114, 11,  0,  0,114, 11,205, 10
>60aa	72 0b cd 0a
>60ae	9f 09 00 00	                .byte 159,  9,  0,  0,159,  9,147,  8
>60b2	9f 09 93 08
>60b6	9f 09 93 08	                .byte 159,  9,147,  8,163,  7, 53,  7
>60ba	a3 07 35 07
>60be	00 00 35 07	                .byte   0,  0, 53,  7,163,  7,147,  8
>60c2	a3 07 93 08
>60c6	b9 05 6c 06	                .byte 185,  5,108,  6,163,  7, 53,  7
>60ca	a3 07 35 07
>60ce	6c 06 b9 05	                .byte 108,  6,185,  5,  0,  0,  0,  0
>60d2	00 00 00 00
>60d6	00 00 00 00	                .byte   0,  0,  0,  0
>60da	00		byte            .byte 0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ; 97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.60db			libtart

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-sid.asm

=$d400			sidbase =   $d400
=$d400			frelo1  =   $d400 ; 54272 - Voice 1 frequency control (low byte).
=$d401			frehi1  =   $d401 ; 54273 - Voice 1 frequency control (high byte).
=$d402			pwlo1   =   $d402 ; 54274 - Voice 1 pulse waveform width (low byte).
=$d403			pwhi1   =   $d403 ; 54275 - Voice 1 pulse waveform width (high byte).
=$d404			vcreg1  =   $d404 ; 54276 - Voice 1 control register.
=$d405			atdcy1  =   $d405 ; 54277 - Voive 1 attack/decay register.
=$d406			surel1  =   $d406 ; 54278 - Voice 1 Sustain/Release control register.
=$d407			frelo2  =   $d407 ; 54279 - Voice 2 frequency control (low byte).
=$d408			frehi2  =   $d408 ; 54280 - Voice 2 frequency control (high byte).
=$d409			pwlo2   =   $d409 ; 54281 - Voice 2 pulse waveform width (low byte).
=$d40a			pwhi2   =   $d40a ; 54282 - Voice 2 pulse waveform width (high byte).
=$d40b			vcreg2  =   $d40b ; 54283 - Voice 2 control register.
=$d40c			atdcy2  =   $d40c ; 54284 - Voive 2 attack/decay register.
=$d40d			surel2  =   $d40d ; 54285 - Voice 2 Sustain/Release control register.
=$d40e			frelo3  =   $d40e ; 54286 - Voice 2 frequency control (low byte).
=$d40f			frehi3  =   $d40f ; 54287 - Voice 2 frequency control (high byte).
=$d410			pwlo3   =   $d410 ; 54288 - Voice 2 pulse waveform width (low byte).
=$d411			pwhi3   =   $d411 ; 54289 - Voice 2 pulse waveform width (high byte).
=$d412			vcreg3  =   $d412 ; 54290 - Voice 2 control register.
=$d413			atdcy3  =   $d413 ; 54291 - Voive 2 attack/decay register.
=$d414			surel3  =   $d414 ; 54292 - Voice 2 Sustain/Release control register.
=$d415			cutlo   =   $d415 ; 54293 - Bits 0-2 = low portion of filter cutoff frequency.
=$d416			cuthi   =   $d416 ; 54294 - Filter cutoff frequency (high byte).
=$d417			reson   =   $d417 ; 54295 - Filter resonnance control register.
=$d418			sigvol  =   $d418 ; 54296 - Volume and Filter selectv register
=$d419			potx    =   $d419 ; 54297 - Read game paddle 1 (or 3) X position.
=$d41a			poty    =   $d41a ; 54298 - Read game paddle 1 (or 3) Y position.
=$d41b			random  =   $d41b ; 54299 - Read oscillator/Random number generator.
=$d41c			env3    =   $d41c ; 54300 - Envelope Generator 3 output.

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.60db			scrmaninit
.60db	20 02 62	               jsr  push
.60de	a9 06		               lda  #vbleu
.60e0	8d 21 d0	               sta  vicbackcol
.60e3	a9 05		               lda  #vvert
.60e5	8d 20 d0	               sta  vicbordcol
.60e8	a9 01		               lda  #vblanc
.60ea	8d 86 02	               sta  bascol
.60ed	ad 00 04	               lda  scrnram
.60f0	29 fd		               and  #%11111101
.60f2	8d 00 04	               sta  scrnram
.60f5	20 fc 60	               jsr  cls
.60f8	20 41 62	               jsr  pop
.60fb	60		               rts
.60fc			cls
.60fc	08		               php
.60fd	48		               pha
.60fe	a9 93		               lda  #$93
.6100	20 0b 61	               jsr  putch
.6103	a9 0e		               lda  #$0e
.6105	20 0b 61	               jsr  putch
.6108	68		               pla
.6109	28		               plp
.610a	60		               rts
.610b			putch
.610b	08		               php
.610c	20 d2 ff	               jsr  $ffd2
.610f	28		               plp
.6110	60		               rts
.6111			puts
.6111	20 02 62	               jsr  push
.6114	86 fb		               stx  zpage1
.6116	84 fc		               sty  zpage1+1
.6118	a0 00		               ldy  #0
.611a	b1 fb		next           lda  (zpage1),y
.611c	f0 09		               beq  exit
.611e	20 0b 61	               jsr  putch
.6121	20 09 63	               jsr  inczp1
.6124	4c 1a 61	               jmp  next
.6127	20 41 62	exit           jsr  pop
.612a	60		               rts
.612b			gotoxy
.612b	08		               php
.612c	18		               clc
.612d	8a		               txa
.612e	48		               pha
.612f	98		               tya
.6130	aa		               tax
.6131	68		               pla
.6132	a8		               tay
.6133	20 f0 ff	               jsr  kplot
.6136	28		               plp
.6137	60		               rts
.6138			cursor
=$0286			bascol    =    $0286
.6138	08		               php
.6139	48		               pha
.613a	90 12		               bcc  restore
.613c	20 f0 ff	               jsr  kplot
.613f	8c 60 61	               sty  cx
.6142	8e 61 61	               stx  cy
.6145	ad 86 02	               lda  bascol
.6148	8d 62 61	               sta  bcol
.614b	4c 5d 61	               jmp  out
.614e	ae 61 61	restore        ldx  cy
.6151	ac 60 61	               ldy  cx
.6154	20 f0 ff	               jsr  kplot
.6157	ad 62 61	               lda  bcol
.615a	8d 86 02	               sta  bascol
.615d	68		out            pla
.615e	28		               plp
.615f	60		               rts
>6160	00		cx   .byte     $00
>6161	00		cy   .byte     $00
>6162	00		bcol .byte     $00
.6163			cursave
.6163	08		               php
.6164	38		               sec
.6165	20 38 61	               jsr  cursor
.6168	28		               plp
.6169	60		               rts
.616a			curput
.616a	08		               php
.616b	18		               clc
.616c	20 38 61	               jsr  cursor
.616f	28		               plp
.6170	60		               rts
.6171			putsxy
.6171	20 02 62	               jsr  push
.6174	86 fb		               stx  zpage1
.6176	84 fc		               sty  zpage1+1
.6178	a0 00		               ldy  #$00
.617a	b1 fb		               lda  (zpage1),y
.617c	aa		               tax
.617d	20 09 63	               jsr  inczp1
.6180	b1 fb		               lda  (zpage1),y
.6182	a8		               tay
.6183	20 2b 61	               jsr  gotoxy
.6186	20 09 63	               jsr  inczp1
.6189	a6 fb		               ldx  zpage1
.618b	a4 fc		               ldy  zpage1+1
.618d	20 11 61	               jsr  puts
.6190	20 41 62	               jsr  pop
.6193	60		               rts
>6194	00 00		straddr   .word     $00
>6196	00		px        .byte     $00
>6197	00		py        .byte     $00
>6198	00 00		zp1       .word     $00
.619a			putscxy
.619a	20 02 62	               jsr  push
.619d	84 fc		               sty  zpage1+1
.619f	86 fb		               stx  zpage1
.61a1	ad 86 02	               lda  bascol
.61a4	8d c4 61	               sta  bc
.61a7	a0 00		               ldy #$00
.61a9	b1 fb		               lda  (zpage1),y
.61ab	8d 86 02	               sta  bascol
.61ae	20 09 63	               jsr  inczp1
.61b1	a6 fb		               ldx  zpage1
.61b3	a4 fc		               ldy  zpage1+1
.61b5	20 71 61	               jsr  putsxy
.61b8	ad c4 61	               lda  bc
.61bb	8d 86 02	               sta  bascol
.61be	20 41 62	               jsr  pop
.61c1	60		               rts
>61c2	00 00		straddr  .word      $00
>61c4	00		bc       .byte      $00
>61c5	00 00		zp1      .word      $00
.61c7			putrahex
.61c7	08		               php
.61c8	48		               pha
.61c9	20 0f 64	               jsr  a2hex
.61cc	a9 bb		               lda  #<a2hexstr
.61ce	a0 63		               ldy  #>a2hexstr
.61d0	20 11 61	               jsr  puts
.61d3	68		               pla
.61d4	28		               plp
.61d5	60		               rts
.61d6			kputrahexxy
.61d6			bputrahexxy
.61d6			putrahexxy
.61d6	08		               php
.61d7	20 0f 64	               jsr  a2hex
.61da	a9 b8		               lda  #<a2hexpos
.61dc	a0 63		               ldy  #>a2hexpos
.61de	20 71 61	               jsr  putsxy
.61e1	68		               pla
.61e2	28		               plp
.61e3	60		               rts
.61e4			putrahexcxy
.61e4	08		               php
.61e5	20 0f 64	               jsr  a2hex
.61e8	a9 b8		               lda  #<a2hexpos
.61ea	a0 63		               ldy  #>a2hexpos
.61ec	20 9a 61	               jsr  putscxy
.61ef	68		               pla
.61f0	28		               plp
.61f1	60		               rts
.61f2			setinverse
.61f2	48		               pha
.61f3	a9 12		               lda  #$12
.61f5	20 d2 ff	               jsr  $ffd2
.61f8	68		               pla
.61f9	60		               rts
.61fa			clrinverse
.61fa	48		               pha
.61fb	a9 92		               lda  #$92
.61fd	20 d2 ff	               jsr  $ffd2
.6200	68		               pla
.6201	60		               rts

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.6202			push
.6202	08		          php            ; stack : flg, pcl, pch
.6203	78		          sei
.6204	8d 3e 62	          sta  ra        ; save a
.6207	68		          pla            ; stack : pcl, pch
.6208	8d 3d 62	          sta  rp        ; save rp
.620b	68		          pla            ; stack : pch
.620c	8d 3f 62	          sta  pc        ; save pcl
.620f	68		          pla            ; stack : -
.6210	8d 40 62	          sta  pc+1      ; save pch
.6213	a5 fb		          lda  zpage1    ; get zpage1 low byte
.6215	48		          pha            ; stack : zp1l
.6216	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.6218	48		          pha            ; stack : zp1h, zp1l
.6219	a5 fd		          lda  zpage2    ; get zpage2 low byte
.621b	48		          pha            ; stack : zp2l, zp1h, zp1l
.621c	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.621e	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.621f	ad 3d 62	          lda  rp        ; get rp
.6222	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.6223	ad 3e 62	          lda  ra        ; get a
.6226	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.6227	8a		          txa            ; get x
.6228	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.6229	98		          tya            ; get y
.622a	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.622b	ad 40 62	          lda  pc+1      ; get pch
.622e	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.622f	ad 3f 62	          lda  pc        ; get pcl
.6232	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.6233	ad 3d 62	          lda  rp        ; get rp
.6236	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.6237	ad 3e 62	          lda  ra        ; get a
.623a	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.623b	58		          cli
.623c	60		          rts
>623d	00		rp        .byte     0
>623e	00		ra        .byte     0
>623f	00 00		pc        .word     0
.6241			pull
.6241			pop
.6241	78		          sei
.6242	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.6243	8d 76 62	          sta  pc        ; save pcl
.6246	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.6247	8d 77 62	          sta  pc+1      ; save pch
.624a	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.624b	a8		          tay            ; set y
.624c	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.624d	aa		          tax            ; set x
.624e	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.624f	8d 75 62	          sta  ra        ; save a
.6252	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.6253	8d 74 62	          sta  rp        ; save rp
.6256	68		          pla            ; stack : zp2l, zp1h, zp1l
.6257	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.6259	68		          pla            ; stack : zp1h, zp1l
.625a	85 fd		          sta  zpage2    ; get zpage2 High byte
.625c	68		          pla            ; stack : zp1l
.625d	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.625f	68		          pla            ; stack :
.6260	85 fb		          sta  zpage1    ; get zpage1 High byte
.6262	ad 77 62	          lda  pc+1      ; get pch
.6265	48		          pha            ; stack : pch
.6266	ad 76 62	          lda  pc
.6269	48		          pha            ; stack : pcl, pch
.626a	ad 74 62	          lda  rp        ; get rp
.626d	48		          pha            ; stack : rp, pcl, pch
.626e	ad 75 62	          lda  ra        ; set ra
.6271	58		          cli
.6272	28		          plp            ; stack : pcl, pch
.6273	60		          rts
>6274	00		rp        .byte     0
>6275	00		ra        .byte     0
>6276	00 00		pc        .word     0

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.6278			blkfill
.6278	20 02 62	bf0            jsr  push
.627b	20 36 63	               jsr  savezp1
.627e	84 fc		               sty  zpage1+1
.6280	a0 00		               ldy  #$00
.6282	84 fb		               sty  zpage1
.6284	91 fb		bf1            sta  (zpage1),y
.6286	c8		               iny
.6287	d0 fb		               bne  bf1
.6289	20 45 63	               jsr  restzp1
.628c	20 41 62	               jsr  pop
.628f	60		               rts
.6290			memfill
.6290	20 02 62	               jsr  push
.6293	20 78 62	mf1            jsr  blkfill
.6296	c8		               iny
.6297	ca		               dex
.6298	d0 f9		               bne  mf1
.629a	20 41 62	               jsr  pop
.629d	60		               rts
.629e			memmove
.629e	20 02 62	               jsr  push
.62a1	ba		               tsx            ; On se crée un pointeur ...
.62a2	8a		               txa
.62a3	18		               clc
.62a4	69 0b		               adc  #11
.62a6	a8		               tay
.62a7	a2 06		               ldx  #$06
.62a9	b9 00 01	nextbyte       lda  $0100,y
.62ac	99 f8 62	               sta  words,y
.62af	c8		               iny
.62b0	ca		               dex
.62b1	d0 f6		               bne  nextbyte
.62b3	ad f8 62	               lda  s
.62b6	8d cf 62	               sta  source+1
.62b9	ad f9 62	               lda  s+1
.62bc	8d d0 62	               sta  source+2
.62bf	ad fa 62	               lda  d
.62c2	8d cc 62	               sta  destin+1
.62c5	ad fb 62	               lda  d+1
.62c8	8d cd 62	               sta  destin+2
.62cb	ad ff ff	destin         lda  $ffff
.62ce	8d ff ff	source         sta  $ffff
.62d1	ee cc 62	               inc  destin+1
.62d4	d0 03		               bne  src
.62d6	ee cd 62	               inc  destin+2
.62d9	ee cf 62	src            inc  source+1
.62dc	d0 03		               bne  cnt
.62de	ee d0 62	               inc  source+2
.62e1	ad fc 62	cnt            lda  compte
.62e4	d0 08		               bne  decit
.62e6	ad fd 62	               lda  compte+1
.62e9	f0 09		               beq  fini
.62eb	ce fd 62	               dec  compte+1
.62ee	ce fc 62	decit          dec  compte
.62f1	4c cb 62	               jmp  destin
.62f4	20 41 62	fini           jsr  pop
.62f7	60		               rts
.62f8			words
>62f8	00 00		s         .word     $0000
>62fa	00 00		d         .word     $0000
>62fc	00 00		compte    .word     $0000
.62fe			decword
.62fe	20 02 62	               jsr  push
.6301	86 fd		               stx  zpage2
.6303	84 fe		               sty  zpage2+1
.6305	20 41 62	               jsr  pop
.6308	60		               rts
.6309			inczp1
.6309	08		               php
.630a	e6 fb		               inc  zpage1
.630c	d0 02		               bne  nopage
.630e	e6 fc		               inc  zpage1+1
.6310	28		nopage         plp
.6311	60		               rts
.6312			deczp1
.6312	08		                php
.6313	48		                pha
.6314	c6 fb		                dec  zpage1
.6316	d0 02		                bne  nopage
.6318	c6 fc		                dec  zpage1+1
.631a	c6 fb		nopage          dec  zpage1
.631c	68		                pla
.631d	28		                plp
.631e	60		                rts
.631f			inczp2
.631f	08		               php
.6320	48		               pha
.6321	e6 fd		               inc  zpage2
.6323	d0 02		               bne  nopage
.6325	e6 fe		               inc  zpage2+1
.6327	68		nopage         pla
.6328	28		               plp
.6329	60		               rts
.632a			deczp2
.632a	08		               php
.632b	48		               pha
.632c	a5 fd		               lda  zpage2
.632e	d0 02		               bne  nopage
.6330	c6 fe		               dec  zpage2+1
.6332	c6 fd		nopage         dec  zpage2
.6334	28		               plp
.6335	60		               rts
.6336			savezp1
.6336	08		               php
.6337	48		               pha
.6338	a5 fb		               lda  zpage1
.633a	8d b2 63	               sta  zp1
.633d	a5 fc		               lda  zpage1+1
.633f	8d b3 63	               sta  zp1+1
.6342	68		               pla
.6343	28		               plp
.6344	60		               rts
.6345			restzp1
.6345	08		               php
.6346	48		               pha
.6347	ad b2 63	               lda zp1
.634a	85 fb		               sta zpage1
.634c	ad b3 63	               lda zp1+1
.634f	85 fc		               sta zpage1+1
.6351	68		               pla
.6352	28		               plp
.6353	60		               rts
.6354			savezp2
.6354	08		         php
.6355	48		         pha
.6356	a5 fd		         lda zpage2
.6358	8d b4 63	         sta zp2
.635b	a5 fe		         lda zpage2+1
.635d	8d b5 63	         sta zp2+1
.6360	68		         pla
.6361	28		         plp
.6362	60		         rts
.6363			restzp2
.6363	08		                php
.6364	48		                pha
.6365	ad b4 63	                lda  zp2
.6368	85 fd		                sta  zpage2
.636a	ad b5 63	                lda  zp2+1
.636d	85 fe		                sta  zpage2+1
.636f	68		                pla
.6370	28		                plp
.6371	60		                rts
.6372			xy2addr
.6372	08		                php
.6373	48		                pha
.6374	8a		                txa
.6375	48		                pha
.6376	98		                tya
.6377	48		                pha
.6378	ad ad 63	                lda     addr1+1
.637b	8d af 63	                sta     addr2+1
.637e	ad ac 63	                lda     addr1
.6381	8d ae 63	                sta     addr2
.6384	c0 00		                cpy     #$00
.6386	f0 0f		                beq     addx
.6388	18		moreline        clc
.6389	6d ab 63	                adc     ymult
.638c	90 03		                bcc     norepy
.638e	ee af 63	                inc     addr2+1
.6391	8d ae 63	norepy          sta     addr2
.6394	88		                dey
.6395	d0 f1		                bne     moreline
.6397	8a		addx            txa
.6398	18		                clc
.6399	6d ae 63	                adc     addr2
.639c	90 03		                bcc     thatsit
.639e	ee af 63	                inc     addr2+1
.63a1	8d ae 63	thatsit         sta     addr2
.63a4	68		                pla
.63a5	a8		                tay
.63a6	68		                pla
.63a7	aa		                tax
.63a8	68		                pla
.63a9	28		                plp
.63aa	60		                rts
>63ab	28		ymult          .byte     40
>63ac	00 00		addr1          .word     $0000
>63ae	00 00		addr2          .word     $0000
>63b0	00 00		bytecnt        .word     $0000
>63b2	00 00		zp1        .word   $0000
>63b4	00 00		zp2        .word   $0000

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>63b6	01		a2hexcol       .byte     1              ; pour aputscxy
>63b7	00		a2hexbkcol     .byte     %00000000
.63b8			a2hexpos
>63b8	00		a2hexpx        .byte     0              ; pour aputsxy
>63b9	00		a2hexpy        .byte     0
>63ba	24		a2hexprefix    .byte     "$"            ; pour aputs
>63bb	00 00		a2hexstr       .word     $00
>63bd	00 00		               .word     $00
>63bf	00		               .byte     0              ; 0 end string
.63c0			putahexfmtxy
.63c0	20 02 62	               jsr  push
.63c3	20 0f 64	               jsr  a2hex
.63c6	ae b8 63	               ldx  a2hexpx
.63c9	ac b9 63	               ldy  a2hexpy
.63cc	20 2b 61	               jsr  gotoxy
.63cf	a2 ba		               ldx  #<a2hexprefix
.63d1	a0 63		               ldy  #>a2hexprefix
.63d3	20 11 61	               jsr  puts
.63d6	20 41 62	               jsr  pop
.63d9	60		               rts
.63da			putahexfmt
.63da	20 02 62	               jsr  push
.63dd	20 0f 64	               jsr  a2hex
.63e0	a2 ba		               ldx  #<a2hexprefix
.63e2	a0 63		               ldy  #>a2hexprefix
.63e4	20 11 61	               jsr  puts
.63e7	20 41 62	               jsr  pop
.63ea	60		               rts
.63eb			putahex
.63eb	20 02 62	               jsr  push
.63ee	20 0f 64	               jsr  a2hex
.63f1	a2 bb		               ldx  #<a2hexstr
.63f3	a0 63		               ldy  #>a2hexstr
.63f5	20 11 61	               jsr  puts
.63f8	20 41 62	               jsr  pop
.63fb	60		               rts
.63fc			nib2hex
.63fc	08		               php
.63fd	29 0f		               and  #$0f
.63ff	f8		               sed
.6400	18		               clc
.6401	69 90		               adc  #$90
.6403	69 40		               adc  #$40
.6405	d8		               cld
.6406	28		               plp
.6407	60		               rts
.6408			lsra4bits
.6408	08		               php
.6409	4a		               lsr
.640a	4a		               lsr
.640b	4a		               lsr
.640c	4a		               lsr
.640d	28		               plp
.640e	60		               rts
.640f			a2hex
.640f	08		               php
.6410	48		               pha
.6411	48		               pha
.6412	20 08 64	               jsr  lsra4bits
.6415	20 fc 63	               jsr  nib2hex
.6418	8d bb 63	               sta  a2hexstr
.641b	68		               pla
.641c	20 fc 63	               jsr  nib2hex
.641f	8d bc 63	               sta  a2hexstr+1
.6422	a9 00		               lda  #$00                ; set end of string
.6424	8d bd 63	               sta  a2hexstr+2
.6427	68		               pla
.6428	28		               plp
.6429	60		               rts
.642a			xy2hex
.642a	20 02 62	               jsr  push
.642d	20 0f 64	               jsr  a2hex
.6430	8a		               txa
.6431	48		               pha
.6432	20 08 64	               jsr  lsra4bits
.6435	20 fc 63	               jsr  nib2hex
.6438	8d bb 63	               sta  a2hexstr
.643b	68		               pla
.643c	20 fc 63	               jsr  nib2hex
.643f	8d bc 63	               sta  a2hexstr+1
.6442	98		               tya
.6443	48		               pha
.6444	20 08 64	               jsr  lsra4bits
.6447	20 fc 63	               jsr  nib2hex
.644a	8d bd 63	               sta  a2hexstr+2
.644d	68		               pla
.644e	20 fc 63	               jsr  nib2hex
.6451	8d be 63	               sta  a2hexstr+3
.6454	a9 00		               lda  #$00                ; 0 ended string
.6456	8d bf 63	               sta  a2hexstr+4
.6459	20 41 62	               jsr  pop
.645c			atobin
.645c	20 02 62	               jsr     push
.645f	a2 08		               ldx     #8
.6461	a0 00		               ldy     #0
.6463	2a		nextbit        rol
.6464	48		               pha
.6465	69 00		               adc     #$00
.6467	29 01		               and     #$01
.6469	20 fc 63	               jsr     nib2hex
.646c	99 7d 64	               sta     abin,y
.646f	68		               pla
.6470	c8		               iny
.6471	ca		               dex
.6472	d0 ef		               bne     nextbit
.6474	a9 00		               lda     #0
.6476	99 7d 64	               sta     abin,y
.6479	20 41 62	               jsr     pull
.647c	60		               rts
>647d	30 30 30 30	abin           .null   "00000000"
>6481	30 30 30 30 00
.6486			putabin
.6486	20 5c 64	               jsr     atobin
.6489	20 02 62	               jsr     push
.648c	a2 7d		               ldx     #<abin
.648e	a0 64		               ldy     #>abin
.6490	20 11 61	               jsr     puts
.6493	20 41 62	               jsr     pop
.6496	60		               rts
.6497			putabinfmt
.6497	08		               php
.6498	48		               pha
.6499	a9 25		               lda     #"%"
.649b	20 0b 61	               jsr     putch
.649e	68		               pla
.649f	20 86 64	               jsr     putabin
.64a2	28		               plp
.64a3	60		               rts
.64a4			putabinxy
.64a4	20 2b 61	               jsr     gotoxy
.64a7	20 86 64	               jsr     putabin
.64aa	60		               rts
.64ab			putabinfmtxy
.64ab	20 2b 61	               jsr     gotoxy
.64ae	20 97 64	               jsr     putabinfmt
.64b1	60		               rts

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

.64b2			waitstop
.64b2	20 02 62	                jsr     push
.64b5	20 ed f6	wait            jsr     k_stop
.64b8	d0 fb		                bne     wait
.64ba	20 41 62	                jsr     pop
.64bd	60		                rts
.64be			anykey
.64be	08		                php
.64bf	48		                pha
.64c0	a5 cb		nokey           lda 203
.64c2	c9 40		                cmp #64
.64c4	f0 fa		                beq nokey
.64c6	68		                pla
.64c7	28		                plp
.64c8	60		                rts
.64c9			getkey
.64c9	20 02 62	                jsr     push
.64cc	20 cf ff	again           jsr     chrin
.64cf	4c cc 64	                jmp     again
.64d2	20 41 62	                jsr     pop
.64d5	60		                rts
.64d6			waitkey
.64d6	20 02 62	                jsr     push
.64d9	8d ee 64	                sta     thekey
.64dc	20 e4 ff	nope            jsr     getin
.64df	20 d2 ff	                jsr     chrout
.64e2	cd ee 64	                cmp     thekey
.64e5	d0 f5		                bne     nope
.64e7	20 d2 ff	                jsr     chrout
.64ea	20 41 62	                jsr     pop
.64ed	60		                rts
>64ee	00		thekey          .byte   0
.64ef			waitspace
.64ef	20 02 62	                jsr     push
.64f2	a9 7f		wait            lda     #$7f  ;%01111111
.64f4	8d 00 dc	                sta     $dc00
.64f7	ad 01 dc	                lda     $dc01
.64fa	29 10		                and     #$10  ;mask %00010000
.64fc	d0 f4		                bne     wait
.64fe	20 41 62	                jsr     pop
.6501			waitsstop
.6501	20 02 62	                jsr     push
.6504	20 ed f6	wait            jsr     k_stop  ;%01111111
.6507	d0 fb		                bne     wait
.6509	20 41 62	                jsr     pop
.650c			waitreturn
.650c	20 02 62	                jsr     push
.650f	ad 2b 65	                lda     thecount
.6512	8d 00 04	                sta     scrnram
.6515	a9 02		                lda     #$02
.6517	8d 00 d8	                sta     colorram
.651a	20 e4 ff	nope            jsr     getin
.651d	20 d2 ff	                jsr     chrout
.6520	c9 0d		                cmp     #$0d
.6522	d0 f6		                bne     nope
.6524	ee 2b 65	                inc     thecount
.6527	20 41 62	                jsr     pop
.652a	60		                rts
>652b	01		thecount        .byte   $01

;******  Return to file: irqtune3channel.asm


;******  End of listing

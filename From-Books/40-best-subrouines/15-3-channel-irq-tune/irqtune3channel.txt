
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L irqtune3channel.txt -o irqtune3channel.prg irqtune3channel.asm
; Fri May 12 16:13:08 2023

;Offset	;Hex		;Source

;******  Processing input file: irqtune3channel.asm

="20230511-082548"	                Version = "20230511-082548"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: irqtune3channel.asm

.080d			main
.080d	20 8e 61	                jsr scrmaninit
.0810	20 19 08	                jsr help
.0813	20 00 60	                jsr irqtune3channel
.0816	4c 74 a4	                jmp b_warmstart
.0819			help
.0819	20 af 61	                jsr cls
.081c	a2 a3		                ldx  #<line
.081e	a0 09		                ldy  #>line
.0820	20 c4 61	                jsr  puts
.0823	a2 47		                ldx  #<headera
.0825	a0 08		                ldy  #>headera
.0827	20 c4 61	                jsr  puts
.082a	a2 c9		                ldx  #<headerb
.082c	a0 08		                ldy  #>headerb
.082e	20 c4 61	                jsr  puts
.0831	a2 4f		                ldx  #<shortcuts
.0833	a0 09		                ldy  #>shortcuts
.0835	20 c4 61	                jsr  puts
.0838	a2 cc		                ldx  #<helptext
.083a	a0 09		                ldy  #>helptext
.083c	20 c4 61	                jsr  puts
.083f	a2 a3		                ldx  #<line
.0841	a0 09		                ldy  #>line
.0843	20 c4 61	                jsr  puts
.0846	60		                rts
.0847			headera
>0847	20 20 20 20	                .text          "     40 BEST MACHINE CODE ROUTINES"
>084b	20 34 30 20 c2 c5 d3 d4 20 cd c1 c3 c8 c9 ce c5
>085b	20 c3 cf c4 c5 20 d2 cf d5 d4 c9 ce c5 d3
>0869	0d		          .byte   $0d
>086a	20 20 20 20	                .text          "          FOR THE COMMODORE 64"
>086e	20 20 20 20 20 20 c6 cf d2 20 d4 c8 c5 20 c3 cf
>087e	cd cd cf c4 cf d2 c5 20 36 34
>0888	0d		          .byte   $0d
>0889	20 20 20 20	                .text          "       Book by Mark Greenshields."
>088d	20 20 20 c2 4f 4f 4b 20 42 59 20 cd 41 52 4b 20
>089d	c7 52 45 45 4e 53 48 49 45 4c 44 53 2e
>08aa	0d		          .byte   $0d
>08ab	20 20 20 20	                .text          "          ISBN 0-7156-1899-7"
>08af	20 20 20 20 20 20 c9 d3 c2 ce 20 30 2d 37 31 35
>08bf	36 2d 31 38 39 39 2d 37
>08c7	0d 00		          .byte   $0d,0
>08c9	20 20 20 20	headerb         .text          "         irqtune3channel (p79)"
>08cd	20 20 20 20 20 49 52 51 54 55 4e 45 33 43 48 41
>08dd	4e 4e 45 4c 20 28 50 37 39 29
>08e7	0d		          .byte   $0d
>08e8	20 20 20 20	                .text          "        (c) 1979 Brad Templeton"
>08ec	20 20 20 20 28 43 29 20 31 39 37 39 20 c2 52 41
>08fc	44 20 d4 45 4d 50 4c 45 54 4f 4e
>0907	0d		          .byte   $0d
>0908	20 20 20 20	                .text          "     programmed by Daniel Lafrance."
>090c	20 50 52 4f 47 52 41 4d 4d 45 44 20 42 59 20 c4
>091c	41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e
>092b	0d		          .byte   $0d
>092c	20 20 20 20	                .text   format("        Version: %s.",Version)
>0930	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>0940	33 30 35 31 31 2d 30 38 32 35 34 38 2e
>094d	0d 00		          .byte   $0d,0
>094f	20 2d 2d 2d	shortcuts .text          " -------- S H O R T - C U T S ---------"
>0953	2d 2d 2d 2d 2d 20 d3 20 c8 20 cf 20 d2 20 d4 20
>0963	2d 20 c3 20 d5 20 d4 20 d3 20 2d 2d 2d 2d 2d 2d
>0973	2d 2d 2d
>0976	0d		          .byte   $0d
>0977	20 52 55 4e	          .text   format(" run=SYS%5d, help=SYS%5d",main, help)
>097b	3d d3 d9 d3 20 32 30 36 31 2c 20 48 45 4c 50 3d
>098b	d3 d9 d3 20 32 30 37 33
>0993	0d		          .byte   $0d
>0994	20 43 4c 53	          .text   format(" cls=SYS%5d",cls)
>0998	3d d3 d9 d3 32 35 30 30 37
>09a1	0d 00		          .byte   $0d,0
>09a3	20 2d 2d 2d	line      .text          " --------------------------------------"
>09a7	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09b7	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09c7	2d 2d 2d
>09ca	0d 00		          .byte   $0d,0
>09cc	20 49 52 51	helptext  .text   format(" irqtune3channel: SYS%5d",irqtune3channel)
>09d0	54 55 4e 45 33 43 48 41 4e 4e 45 4c 3a 20 d3 d9
>09e0	d3 32 34 35 37 36
>09e6	0d		          .byte   $0d
>09e7	20 45 58 2e	          .text   format(" ex.: SYS%5d",irqtune3channel)
>09eb	3a 20 d3 d9 d3 32 34 35 37 36
>09f5	0d 00		          .byte   $0d,0
.6000			irqtune3channel
.6000	78		                sei
.6001	a9 37		                lda #<main
.6003	8d 14 03	                sta 788
.6006	a9 60		                lda #>main
.6008	8d 15 03	                sta 789
.600b	a9 0a		                lda #$0a        ; #0-15 $00-$0f
.600d	8d 18 d4	                sta sidsigvol   ; $d418 ; 54296 - Volume and Filter selectv register.
.6010	a9 21		                lda #33
.6012	8d 04 d4	                sta sidv1control; $d404 ; 54276 - Voice 1 Voice control register.
.6015	a9 21		                lda #33
.6017	8d 0b d4	                sta sidv2control; $d40b ; 54283 - Voice 2 Voice control register.
.601a	a9 13		                lda #19
.601c	8d 12 d4	                sta sidv3control; $xxxx ; ddddd - Voice 3 Voice control register.
.601f	a9 40		                lda #64
.6021	8d 05 d4	                sta sidv1atkdec ; $d405 ; 54277 - Voice 1 0-3: Decay duration, 4-7: Attack duration.
.6024	8d 06 d4	                sta sidv1stnrel ; $d406 ; 54278 - Voice 1 0-3: Rel. duration, 4-7: Sustain duration.
.6027	8d 0c d4	                sta sidv2atkdec ; $d40c ; 54284 - Voice 2 0-3: Decay duration, 4-7: Attack duration.
.602a	8d 0d d4	                sta sidv2stnrel ; $d40d ; 54285 - Voice 2 0-3: Rel. duration, 4-7: Sustain duration.
.602d	a9 00		                lda #0
.602f	85 fb		                sta 251
.6031	85 fc		                sta 252
.6033	85 fd		                sta 253
.6035	58		                cli
.6036	60		                rts
.6037	a6 fb		main            ldx 251
.6039	a4 fc		                ldy 252
.603b	bd 79 60	                lda tune1,x
.603e	8d 00 d4	                sta sidv1flow   ; $d400 ; 54272 - Voice 1 Low freq register low byte.
.6041	bd 7a 60	                lda tune1+1,x
.6044	8d 01 d4	                sta sidv1fhigh  ; $d401 ; 54273 - Voice 1 High freq register high byte.
.6047	bd b5 60	                lda tune2,x
.604a	8d 07 d4	                sta sidv2flow   ; $d407 ; 54279 - Voice 2 Low freq register low byte.
.604d	bd b6 60	                lda tune2+1,x
.6050	8d 08 d4	                sta sidv2fhigh  ; $d408 ; 54280 - Voice 2 High freq register high byte.
.6053	a5 fd		                lda 253
.6055	c9 20		                cmp #32
.6057	b0 05		                bcs nextdelay
.6059	e6 fd		                inc 253
.605b	4c 31 ea	                jmp irq     ; $ea31
.605e	a9 00		nextdelay       lda #0
.6060	85 fd		                sta 253
.6062	e8		                inx
.6063	e8		                inx
.6064	c8		                iny
.6065	86 fb		                stx 251
.6067	84 fc		                sty 252
.6069	e0 30		                cpx #48
.606b	b0 03		                bcs re
.606d	4c 31 ea	                jmp irq     ; $ea31
.6070	a2 00		re              ldx #0
.6072	85 fb		                sta 251
.6074	85 fc		                sta 252
.6076	4c 31 ea	                jmp irq     ; $ea31
.6079			tune1
>6079	0c 01		          .word     do1
>607b	00 00		          .word     silence
>607d	2d 01		          .word     re1
>607f	00 00		          .word     silence
>6081	51 01		          .word     mi1
>6083	00 00		          .word     silence
>6085	66 01		          .word     fa1
>6087	00 00		          .word     silence
>6089	91 01		          .word     sol1
>608b	00 00		          .word     silence
>608d	c3 01		          .word     la1
>608f	00 00		          .word     silence
>6091	fa 01		          .word     si1
>6093	00 00		          .word     silence
>6095	18 02		          .word     do2
>6097	00 00		          .word     silence
>6099	fa 01		          .word     si1
>609b	00 00		          .word     silence
>609d	c3 01		          .word     la1
>609f	00 00		          .word     silence
>60a1	91 01		          .word     sol1
>60a3	00 00		          .word     silence
>60a5	66 01		          .word     fa1
>60a7	00 00		          .word     silence
>60a9	51 01		          .word     mi1
>60ab	00 00		          .word     silence
>60ad	2d 01		          .word     re1
>60af	00 00		          .word     silence
>60b1	0c 01		          .word     do1
>60b3	00 00		          .word     silence
.60b5			tune2
>60b5	31 1c		          .word     la5
>60b7	df 1d		          .word     lad5
>60b9	a6 1f		          .word     si5
>60bb	c4 10		          .word     do5
>60bd	c3 11		          .word     dod5
>60bf	d1 12		          .word     re5
>60c1	f0 13		          .word     red5
>60c3	1f 15		          .word     mi5
>60c5	61 16		          .word     fa5
>60c7	b5 17		          .word     fad5
>60c9	1e 19		          .word     sol5
>60cb	9c 1a		          .word     sold5
>60cd	63 38		          .word     la6
>60cf	bf 3b		          .word     lad6
>60d1	4c 3f		          .word     si6
>60d3	88 21		          .word     do6
>60d5	86 23		          .word     dod6
>60d7	a2 25		          .word     re6
>60d9	e0 27		          .word     red6
>60db	3f 2a		          .word     mi6
>60dd	c2 2c		          .word     fa6
>60df	6b 2f		          .word     fad6
>60e1	3d 32		          .word     sol6
>60e3	39 35		          .word     sold6
>60e5	c7 70		          .word     la7
>60e7	7e 77		          .word     lad7
>60e9	00 00		          .word     0
>60eb	00 00		          .word     0
>60ed	00 00		          .word     0
>60ef	00 00		          .word     0
>60f1	c2 2c		tune3      .word fa6
>60f3	00 00		          .word silence
>60f5	c2 2c		          .word fa6
>60f7	3f 2a		          .word mi6
>60f9	a2 25		          .word re6
>60fb	00 00		          .word silence
>60fd	a2 25		          .word re6
>60ff	88 21		          .word do6
>6101	a2 25		          .word re6
>6103	88 21		          .word do6
>6105	8d 1e		          .byte 141, 30
>6107	d6 1c		          .byte 214, 28
>6109	00 00		          .byte   0,  0
>610b	d6 1c		          .byte 214, 28
>610d	8d 1e		          .byte 141, 30
>610f	88 21		          .word do6
>6111	e3 16		          .byte 227, 22
>6113	b1 19		          .byte 177, 25
>6115	8d 1e		          .byte 141, 30
>6117	d6 1c		          .byte 214, 28
>6119	b1 19		          .byte 177, 25
>611b	e3 16		          .byte 227, 22
>611d	00 00		          .byte   0,  0
>611f	00 00		          .byte   0,  0
>6121	00 00		          .byte   0,  0
>6123	00 00		          .byte   0,  0
.6125			tune4
>6125	72 0b		          .byte 114, 11
>6127	00 00		          .byte   0,  0
>6129	72 0b		          .byte 114, 11
>612b	cd 0a		          .byte 205, 10
>612d	9f 09		          .byte 159,  9
>612f	00 00		          .byte   0,  0
>6131	9f 09		          .byte 159,  9
>6133	93 08		          .byte 147,  8
>6135	9f 09		          .byte 159,  9
>6137	93 08		          .byte 147,  8
>6139	a3 07		          .byte 163,  7
>613b	35 07		          .byte  53,  7
>613d	00 00		          .byte   0,  0
>613f	35 07		          .byte  53,  7
>6141	a3 07		          .byte 163,  7
>6143	93 08		          .byte 147,  8
>6145	b9 05		          .byte 185,  5
>6147	6c 06		          .byte 108,  6
>6149	a3 07		          .byte 163,  7
>614b	35 07		          .byte  53,  7
>614d	6c 06		          .byte 108,  6
>614f	b9 05		          .byte 185,  5
>6151	00 00		          .byte   0,  0
>6153	00 00		          .byte   0,  0
>6155	00 00		          .byte   0,  0
>6157	00 00		          .byte   0,  0
>6159	00 00		tune5           .byte   0,  0
>615b	00 00		          .byte   0,  0
>615d	00 00		          .byte   0,  0
>615f	00 00		          .byte   0,  0
>6161	00 00		          .byte   0,  0
>6163	00 00		          .byte   0,  0
>6165	00 00		          .byte   0,  0
>6167	00 00		          .byte   0,  0
>6169	00 00		          .byte   0,  0
>616b	00 00		          .byte   0,  0
>616d	00 00		          .byte   0,  0
>616f	00 00		          .byte   0,  0
>6171	00 00		          .byte   0,  0
>6173	00 00		          .byte   0,  0
>6175	00 00		          .byte   0,  0
>6177	00 00		          .byte   0,  0
>6179	00 00		          .byte   0,  0
>617b	00 00		          .byte   0,  0
>617d	00 00		          .byte   0,  0
>617f	00 00		          .byte   0,  0
>6181	00 00		          .byte   0,  0
>6183	00 00		          .byte   0,  0
>6185	00 00		          .byte   0,  0
>6187	00 00		          .byte   0,  0
>6189	00 00		          .byte   0,  0
>618b	00 00		          .byte   0,  0
>618d	00		byte            .byte 0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ; 97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.618e			libtart

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-sid.asm

=$d400			sidv1flow   =   $d400 ; 54272 - Voice 1 Low freq register low byte.
=$d401			sidv1fhigh  =   $d401 ; 54273 - Voice 1 High freq register high byte.
=$d402			sidv1pwlow 	=   $d402 ; 54274 - Voice 1 Pulse waveform width register low byte.
=$d403			sidv1pwhigh =   $d403 ; 54275 - Voice 1 Pulse waveform width register high byte.
=$d404			sidv1control=   $d404 ; 54276 - Voice 1 Voice control register.
=$d405			sidv1atkdec =	$d405 ; 54277 - 0-3: Voice 1 Decay duration, 4-7: Attack duration.
=$d406			sidv1stnrel =   $d406 ; 54278 - 0-3: Voice 1 Rel. duration, 4-7: Sustain duration.
=$d407			sidv2flow   =   $d407 ; 54279 - Voice 2 Low freq register low byte.
=$d408			sidv2fhigh  =   $d408 ; 54280 - Voice 2 High freq register high byte.
=$d409			sidv2pwlow 	=   $d409 ; 54281 - Voice 2 Pulse waveform width register low byte.
=$d40a			sidv2pwhigh	=   $d40a ; 54282 - Voice 2 Pulse waveform width register high byte.
=$d40b			sidv2control=   $d40b ; 54283 - Voice 2 Voice control register.
=$d40c			sidv2atkdec =   $d40c ; 54284 - Voice 2 0-3: Decay duration, 4-7: Attack duration.
=$d40d			sidv2stnrel =   $d40d ; 54285 - Voice 2 0-3: Rel. duration, 4-7: Sustain duration.
=$d40e			sidv3flow   =   $d40e ; 54286 - Voice 3 Low freq register low byte.
=$d40f			sidv3fhigh  =   $d40f ; 54287 - Voice 3 High freq register high byte.
=$d410			sidv3pwlow 	=   $d410 ; 54288 - Voice 3 Pulse waveform width register low byte.
=$d411			sidv3pwhigh =   $d411 ; 54289 - Voice 3 Pulse waveform width register high byte.
=$d412			sidv3control=   $d412 ; 54290 - Voice 3 Poice control register.
=$d413			sidv3atkdec =   $d413 ; 54291 - Voice 3 0-3: Decay duration, 4-7: Attack duration.
=$d414			sidv3stnrel =   $d414 ; 54292 - Voice 3 0-3: Rel. duration, 4-7: Sustain duration.
=$d415			sidcutlo    =   $d415 ; 54293 - Bits 0-2 = low portion of filter cutoff frequency.
=$d416			sidcuthi    =   $d416 ; 54294 - Filter cutoff frequency (high byte).
=$d417			sidreson    =   $d417 ; 54295 - Filter resonnance control register.
=$d418			sidsigvol  =    $d418 ; 54296 - Volume and Filter selectv register.
=$d419			sidpotx    =    $d419 ; 54297 - Read game paddle 1 (or 3) X position.
=$d41a			sidpoty    =    $d41a ; 54298 - Read game paddle 1 (or 3) Y position.
=$d41b			sidrandom  =    $d41b ; 54299 - Read oscillator/Random number generator.
=$d41c			sidenv3    =    $d41c ; 54300 - Envelope Generator 3 output.

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-sid-notes-ntsc.asm

=$0000			silence     = $0000 ; Silence (no frequency)
=$00e1			la0     = $00E1 ; NTSC (hex): high: $00, low: $E1 ; (dec): low:225, High:  0
=$00ee			lad0    = $00EE ; NTSC (hex): high: $00, low: $EE ; (dec): low:238, High:  0
=$00fd			si0     = $00FD ; NTSC (hex): high: $00, low: $FD ; (dec): low:253, High:  0
=$010c			do1     = $010C ; NTSC (hex): high: $01, low: $0C ; (dec): low: 12, High:  1
=$011c			dod1    = $011C ; NTSC (hex): high: $01, low: $1C ; (dec): low: 28, High:  1
=$012d			re1     = $012D ; NTSC (hex): high: $01, low: $2D ; (dec): low: 45, High:  1
=$013f			red1    = $013F ; NTSC (hex): high: $01, low: $3F ; (dec): low: 63, High:  1
=$0151			mi1     = $0151 ; NTSC (hex): high: $01, low: $51 ; (dec): low: 81, High:  1
=$0166			fa1     = $0166 ; NTSC (hex): high: $01, low: $66 ; (dec): low:102, High:  1
=$017b			fad1    = $017B ; NTSC (hex): high: $01, low: $7B ; (dec): low:123, High:  1
=$0191			sol1    = $0191 ; NTSC (hex): high: $01, low: $91 ; (dec): low:145, High:  1
=$01a9			sold1   = $01A9 ; NTSC (hex): high: $01, low: $A9 ; (dec): low:169, High:  1
=$01c3			la1     = $01C3 ; NTSC (hex): high: $01, low: $C3 ; (dec): low:195, High:  1
=$01dd			lad1    = $01DD ; NTSC (hex): high: $01, low: $DD ; (dec): low:221, High:  1
=$01fa			si1     = $01FA ; NTSC (hex): high: $01, low: $FA ; (dec): low:250, High:  1
=$0218			do2     = $0218 ; NTSC (hex): high: $02, low: $18 ; (dec): low: 24, High:  2
=$0238			dod2    = $0238 ; NTSC (hex): high: $02, low: $38 ; (dec): low: 56, High:  2
=$025a			re2     = $025A ; NTSC (hex): high: $02, low: $5A ; (dec): low: 90, High:  2
=$027e			red2    = $027E ; NTSC (hex): high: $02, low: $7E ; (dec): low:126, High:  2
=$02a3			mi2     = $02A3 ; NTSC (hex): high: $02, low: $A3 ; (dec): low:163, High:  2
=$02cc			fa2     = $02CC ; NTSC (hex): high: $02, low: $CC ; (dec): low:204, High:  2
=$02f6			fad2    = $02F6 ; NTSC (hex): high: $02, low: $F6 ; (dec): low:246, High:  2
=$0323			sol2    = $0323 ; NTSC (hex): high: $03, low: $23 ; (dec): low: 35, High:  3
=$0353			sold2   = $0353 ; NTSC (hex): high: $03, low: $53 ; (dec): low: 83, High:  3
=$0386			la2     = $0386 ; NTSC (hex): high: $03, low: $86 ; (dec): low:134, High:  3
=$03bb			lad2    = $03BB ; NTSC (hex): high: $03, low: $BB ; (dec): low:187, High:  3
=$03f4			si2     = $03F4 ; NTSC (hex): high: $03, low: $F4 ; (dec): low:244, High:  3
=$0431			do3     = $0431 ; NTSC (hex): high: $04, low: $31 ; (dec): low: 49, High:  4
=$0470			dod3    = $0470 ; NTSC (hex): high: $04, low: $70 ; (dec): low:112, High:  4
=$04b4			re3     = $04B4 ; NTSC (hex): high: $04, low: $B4 ; (dec): low:180, High:  4
=$04fc			red3    = $04FC ; NTSC (hex): high: $04, low: $FC ; (dec): low:252, High:  4
=$0547			mi3     = $0547 ; NTSC (hex): high: $05, low: $47 ; (dec): low: 71, High:  5
=$0598			fa3     = $0598 ; NTSC (hex): high: $05, low: $98 ; (dec): low:152, High:  5
=$05ed			fad3    = $05ED ; NTSC (hex): high: $05, low: $ED ; (dec): low:237, High:  5
=$0647			sol3    = $0647 ; NTSC (hex): high: $06, low: $47 ; (dec): low: 71, High:  6
=$06a7			sold3   = $06A7 ; NTSC (hex): high: $06, low: $A7 ; (dec): low:167, High:  6
=$070c			la3     = $070C ; NTSC (hex): high: $07, low: $0C ; (dec): low: 12, High:  7
=$0777			lad3    = $0777 ; NTSC (hex): high: $07, low: $77 ; (dec): low:119, High:  7
=$07e9			si3     = $07E9 ; NTSC (hex): high: $07, low: $E9 ; (dec): low:233, High:  7
=$0862			do4     = $0862 ; NTSC (hex): high: $08, low: $62 ; (dec): low: 98, High:  8
=$08e1			dod4    = $08E1 ; NTSC (hex): high: $08, low: $E1 ; (dec): low:225, High:  8
=$0968			re4     = $0968 ; NTSC (hex): high: $09, low: $68 ; (dec): low:104, High:  9
=$09f8			red4    = $09F8 ; NTSC (hex): high: $09, low: $F8 ; (dec): low:248, High:  9
=$0a8f			mi4     = $0A8F ; NTSC (hex): high: $0A, low: $8F ; (dec): low:143, High: 10
=$0b30			fa4     = $0B30 ; NTSC (hex): high: $0B, low: $30 ; (dec): low: 48, High: 11
=$0bda			fad4    = $0BDA ; NTSC (hex): high: $0B, low: $DA ; (dec): low:218, High: 11
=$0c8f			sol4    = $0C8F ; NTSC (hex): high: $0C, low: $8F ; (dec): low:143, High: 12
=$0d4e			sold4   = $0D4E ; NTSC (hex): high: $0D, low: $4E ; (dec): low: 78, High: 13
=$0e18			la4     = $0E18 ; NTSC (hex): high: $0E, low: $18 ; (dec): low: 24, High: 14
=$0eef			lad4    = $0EEF ; NTSC (hex): high: $0E, low: $EF ; (dec): low:239, High: 14
=$0fd3			si4     = $0FD3 ; NTSC (hex): high: $0F, low: $D3 ; (dec): low:211, High: 15
=$10c4			do5     = $10C4 ; NTSC (hex): high: $10, low: $C4 ; (dec): low:196, High: 16
=$11c3			dod5    = $11C3 ; NTSC (hex): high: $11, low: $C3 ; (dec): low:195, High: 17
=$12d1			re5     = $12D1 ; NTSC (hex): high: $12, low: $D1 ; (dec): low:209, High: 18
=$13f0			red5    = $13F0 ; NTSC (hex): high: $13, low: $F0 ; (dec): low:240, High: 19
=$151f			mi5     = $151F ; NTSC (hex): high: $15, low: $1F ; (dec): low: 31, High: 21
=$1661			fa5     = $1661 ; NTSC (hex): high: $16, low: $61 ; (dec): low: 97, High: 22
=$17b5			fad5    = $17B5 ; NTSC (hex): high: $17, low: $B5 ; (dec): low:181, High: 23
=$191e			sol5    = $191E ; NTSC (hex): high: $19, low: $1E ; (dec): low: 30, High: 25
=$1a9c			sold5   = $1A9C ; NTSC (hex): high: $1A, low: $9C ; (dec): low:156, High: 26
=$1c31			la5     = $1C31 ; NTSC (hex): high: $1C, low: $31 ; (dec): low: 49, High: 28
=$1ddf			lad5    = $1DDF ; NTSC (hex): high: $1D, low: $DF ; (dec): low:223, High: 29
=$1fa6			si5     = $1FA6 ; NTSC (hex): high: $1F, low: $A6 ; (dec): low:166, High: 31
=$2188			do6     = $2188 ; NTSC (hex): high: $21, low: $88 ; (dec): low:136, High: 33
=$2386			dod6    = $2386 ; NTSC (hex): high: $23, low: $86 ; (dec): low:134, High: 35
=$25a2			re6     = $25A2 ; NTSC (hex): high: $25, low: $A2 ; (dec): low:162, High: 37
=$27e0			red6    = $27E0 ; NTSC (hex): high: $27, low: $E0 ; (dec): low:224, High: 39
=$2a3f			mi6     = $2A3F ; NTSC (hex): high: $2A, low: $3F ; (dec): low: 63, High: 42
=$2cc2			fa6     = $2CC2 ; NTSC (hex): high: $2C, low: $C2 ; (dec): low:194, High: 44
=$2f6b			fad6    = $2F6B ; NTSC (hex): high: $2F, low: $6B ; (dec): low:107, High: 47
=$323d			sol6    = $323D ; NTSC (hex): high: $32, low: $3D ; (dec): low: 61, High: 50
=$3539			sold6   = $3539 ; NTSC (hex): high: $35, low: $39 ; (dec): low: 57, High: 53
=$3863			la6     = $3863 ; NTSC (hex): high: $38, low: $63 ; (dec): low: 99, High: 56
=$3bbf			lad6    = $3BBF ; NTSC (hex): high: $3B, low: $BF ; (dec): low:191, High: 59
=$3f4c			si6     = $3F4C ; NTSC (hex): high: $3F, low: $4C ; (dec): low: 76, High: 63
=$4310			do7     = $4310 ; NTSC (hex): high: $43, low: $10 ; (dec): low: 16, High: 67
=$470d			dod7    = $470D ; NTSC (hex): high: $47, low: $0D ; (dec): low: 13, High: 71
=$4b44			re7     = $4B44 ; NTSC (hex): high: $4B, low: $44 ; (dec): low: 68, High: 75
=$4fc0			red7    = $4FC0 ; NTSC (hex): high: $4F, low: $C0 ; (dec): low:192, High: 79
=$547e			mi7     = $547E ; NTSC (hex): high: $54, low: $7E ; (dec): low:126, High: 84
=$5984			fa7     = $5984 ; NTSC (hex): high: $59, low: $84 ; (dec): low:132, High: 89
=$5ed6			fad7    = $5ED6 ; NTSC (hex): high: $5E, low: $D6 ; (dec): low:214, High: 94
=$647a			sol7    = $647A ; NTSC (hex): high: $64, low: $7A ; (dec): low:122, High:100
=$6a72			sold7   = $6A72 ; NTSC (hex): high: $6A, low: $72 ; (dec): low:114, High:106
=$70c7			la7     = $70C7 ; NTSC (hex): high: $70, low: $C7 ; (dec): low:199, High:112
=$777e			lad7    = $777E ; NTSC (hex): high: $77, low: $7E ; (dec): low:126, High:119
=$7e98			si7     = $7E98 ; NTSC (hex): high: $7E, low: $98 ; (dec): low:152, High:126
=$8621			do8     = $8621 ; NTSC (hex): high: $86, low: $21 ; (dec): low: 33, High:134
=$8e1a			dod8    = $8E1A ; NTSC (hex): high: $8E, low: $1A ; (dec): low: 26, High:142
=$9689			re8     = $9689 ; NTSC (hex): high: $96, low: $89 ; (dec): low:137, High:150
=$9f81			red8    = $9F81 ; NTSC (hex): high: $9F, low: $81 ; (dec): low:129, High:159
=$a8fd			mi8     = $A8FD ; NTSC (hex): high: $A8, low: $FD ; (dec): low:253, High:168
=$b309			fa8     = $B309 ; NTSC (hex): high: $B3, low: $09 ; (dec): low:  9, High:179
=$bdad			fad8    = $BDAD ; NTSC (hex): high: $BD, low: $AD ; (dec): low:173, High:189
=$c8f4			sol8    = $C8F4 ; NTSC (hex): high: $C8, low: $F4 ; (dec): low:244, High:200
=$d4e5			sold8   = $D4E5 ; NTSC (hex): high: $D4, low: $E5 ; (dec): low:229, High:212
=$e18f			la8     = $E18F ; NTSC (hex): high: $E1, low: $8F ; (dec): low:143, High:225
=$eefd			lad8    = $EEFD ; NTSC (hex): high: $EE, low: $FD ; (dec): low:253, High:238
=$fd31			si8     = $FD31 ; NTSC (hex): high: $FD, low: $31 ; (dec): low: 49, High:253

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.618e			scrmaninit
.618e	20 b5 62	               jsr  push
.6191	a9 06		               lda  #vbleu
.6193	8d 21 d0	               sta  vicbackcol
.6196	a9 05		               lda  #vvert
.6198	8d 20 d0	               sta  vicbordcol
.619b	a9 01		               lda  #vblanc
.619d	8d 86 02	               sta  bascol
.61a0	ad 00 04	               lda  scrnram
.61a3	29 fd		               and  #%11111101
.61a5	8d 00 04	               sta  scrnram
.61a8	20 af 61	               jsr  cls
.61ab	20 f4 62	               jsr  pop
.61ae	60		               rts
.61af			cls
.61af	08		               php
.61b0	48		               pha
.61b1	a9 93		               lda  #$93
.61b3	20 be 61	               jsr  putch
.61b6	a9 0e		               lda  #$0e
.61b8	20 be 61	               jsr  putch
.61bb	68		               pla
.61bc	28		               plp
.61bd	60		               rts
.61be			putch
.61be	08		               php
.61bf	20 d2 ff	               jsr  $ffd2
.61c2	28		               plp
.61c3	60		               rts
.61c4			puts
.61c4	20 b5 62	               jsr  push
.61c7	86 fb		               stx  zpage1
.61c9	84 fc		               sty  zpage1+1
.61cb	a0 00		               ldy  #0
.61cd	b1 fb		next           lda  (zpage1),y
.61cf	f0 09		               beq  exit
.61d1	20 be 61	               jsr  putch
.61d4	20 bc 63	               jsr  inczp1
.61d7	4c cd 61	               jmp  next
.61da	20 f4 62	exit           jsr  pop
.61dd	60		               rts
.61de			gotoxy
.61de	08		               php
.61df	18		               clc
.61e0	8a		               txa
.61e1	48		               pha
.61e2	98		               tya
.61e3	aa		               tax
.61e4	68		               pla
.61e5	a8		               tay
.61e6	20 f0 ff	               jsr  kplot
.61e9	28		               plp
.61ea	60		               rts
.61eb			cursor
=$0286			bascol    =    $0286
.61eb	08		               php
.61ec	48		               pha
.61ed	90 12		               bcc  restore
.61ef	20 f0 ff	               jsr  kplot
.61f2	8c 13 62	               sty  cx
.61f5	8e 14 62	               stx  cy
.61f8	ad 86 02	               lda  bascol
.61fb	8d 15 62	               sta  bcol
.61fe	4c 10 62	               jmp  out
.6201	ae 14 62	restore        ldx  cy
.6204	ac 13 62	               ldy  cx
.6207	20 f0 ff	               jsr  kplot
.620a	ad 15 62	               lda  bcol
.620d	8d 86 02	               sta  bascol
.6210	68		out            pla
.6211	28		               plp
.6212	60		               rts
>6213	00		cx   .byte     $00
>6214	00		cy   .byte     $00
>6215	00		bcol .byte     $00
.6216			cursave
.6216	08		               php
.6217	38		               sec
.6218	20 eb 61	               jsr  cursor
.621b	28		               plp
.621c	60		               rts
.621d			curput
.621d	08		               php
.621e	18		               clc
.621f	20 eb 61	               jsr  cursor
.6222	28		               plp
.6223	60		               rts
.6224			putsxy
.6224	20 b5 62	               jsr  push
.6227	86 fb		               stx  zpage1
.6229	84 fc		               sty  zpage1+1
.622b	a0 00		               ldy  #$00
.622d	b1 fb		               lda  (zpage1),y
.622f	aa		               tax
.6230	20 bc 63	               jsr  inczp1
.6233	b1 fb		               lda  (zpage1),y
.6235	a8		               tay
.6236	20 de 61	               jsr  gotoxy
.6239	20 bc 63	               jsr  inczp1
.623c	a6 fb		               ldx  zpage1
.623e	a4 fc		               ldy  zpage1+1
.6240	20 c4 61	               jsr  puts
.6243	20 f4 62	               jsr  pop
.6246	60		               rts
>6247	00 00		straddr   .word     $00
>6249	00		px        .byte     $00
>624a	00		py        .byte     $00
>624b	00 00		zp1       .word     $00
.624d			putscxy
.624d	20 b5 62	               jsr  push
.6250	84 fc		               sty  zpage1+1
.6252	86 fb		               stx  zpage1
.6254	ad 86 02	               lda  bascol
.6257	8d 77 62	               sta  bc
.625a	a0 00		               ldy #$00
.625c	b1 fb		               lda  (zpage1),y
.625e	8d 86 02	               sta  bascol
.6261	20 bc 63	               jsr  inczp1
.6264	a6 fb		               ldx  zpage1
.6266	a4 fc		               ldy  zpage1+1
.6268	20 24 62	               jsr  putsxy
.626b	ad 77 62	               lda  bc
.626e	8d 86 02	               sta  bascol
.6271	20 f4 62	               jsr  pop
.6274	60		               rts
>6275	00 00		straddr  .word      $00
>6277	00		bc       .byte      $00
>6278	00 00		zp1      .word      $00
.627a			putrahex
.627a	08		               php
.627b	48		               pha
.627c	20 c2 64	               jsr  a2hex
.627f	a9 6e		               lda  #<a2hexstr
.6281	a0 64		               ldy  #>a2hexstr
.6283	20 c4 61	               jsr  puts
.6286	68		               pla
.6287	28		               plp
.6288	60		               rts
.6289			kputrahexxy
.6289			bputrahexxy
.6289			putrahexxy
.6289	08		               php
.628a	20 c2 64	               jsr  a2hex
.628d	a9 6b		               lda  #<a2hexpos
.628f	a0 64		               ldy  #>a2hexpos
.6291	20 24 62	               jsr  putsxy
.6294	68		               pla
.6295	28		               plp
.6296	60		               rts
.6297			putrahexcxy
.6297	08		               php
.6298	20 c2 64	               jsr  a2hex
.629b	a9 6b		               lda  #<a2hexpos
.629d	a0 64		               ldy  #>a2hexpos
.629f	20 4d 62	               jsr  putscxy
.62a2	68		               pla
.62a3	28		               plp
.62a4	60		               rts
.62a5			setinverse
.62a5	48		               pha
.62a6	a9 12		               lda  #$12
.62a8	20 d2 ff	               jsr  $ffd2
.62ab	68		               pla
.62ac	60		               rts
.62ad			clrinverse
.62ad	48		               pha
.62ae	a9 92		               lda  #$92
.62b0	20 d2 ff	               jsr  $ffd2
.62b3	68		               pla
.62b4	60		               rts

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.62b5			push
.62b5	08		          php            ; stack : flg, pcl, pch
.62b6	78		          sei
.62b7	8d f1 62	          sta  ra        ; save a
.62ba	68		          pla            ; stack : pcl, pch
.62bb	8d f0 62	          sta  rp        ; save rp
.62be	68		          pla            ; stack : pch
.62bf	8d f2 62	          sta  pc        ; save pcl
.62c2	68		          pla            ; stack : -
.62c3	8d f3 62	          sta  pc+1      ; save pch
.62c6	a5 fb		          lda  zpage1    ; get zpage1 low byte
.62c8	48		          pha            ; stack : zp1l
.62c9	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.62cb	48		          pha            ; stack : zp1h, zp1l
.62cc	a5 fd		          lda  zpage2    ; get zpage2 low byte
.62ce	48		          pha            ; stack : zp2l, zp1h, zp1l
.62cf	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.62d1	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.62d2	ad f0 62	          lda  rp        ; get rp
.62d5	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.62d6	ad f1 62	          lda  ra        ; get a
.62d9	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.62da	8a		          txa            ; get x
.62db	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.62dc	98		          tya            ; get y
.62dd	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.62de	ad f3 62	          lda  pc+1      ; get pch
.62e1	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.62e2	ad f2 62	          lda  pc        ; get pcl
.62e5	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.62e6	ad f0 62	          lda  rp        ; get rp
.62e9	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.62ea	ad f1 62	          lda  ra        ; get a
.62ed	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.62ee	58		          cli
.62ef	60		          rts
>62f0	00		rp        .byte     0
>62f1	00		ra        .byte     0
>62f2	00 00		pc        .word     0
.62f4			pull
.62f4			pop
.62f4	78		          sei
.62f5	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.62f6	8d 29 63	          sta  pc        ; save pcl
.62f9	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.62fa	8d 2a 63	          sta  pc+1      ; save pch
.62fd	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.62fe	a8		          tay            ; set y
.62ff	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.6300	aa		          tax            ; set x
.6301	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.6302	8d 28 63	          sta  ra        ; save a
.6305	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.6306	8d 27 63	          sta  rp        ; save rp
.6309	68		          pla            ; stack : zp2l, zp1h, zp1l
.630a	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.630c	68		          pla            ; stack : zp1h, zp1l
.630d	85 fd		          sta  zpage2    ; get zpage2 High byte
.630f	68		          pla            ; stack : zp1l
.6310	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.6312	68		          pla            ; stack :
.6313	85 fb		          sta  zpage1    ; get zpage1 High byte
.6315	ad 2a 63	          lda  pc+1      ; get pch
.6318	48		          pha            ; stack : pch
.6319	ad 29 63	          lda  pc
.631c	48		          pha            ; stack : pcl, pch
.631d	ad 27 63	          lda  rp        ; get rp
.6320	48		          pha            ; stack : rp, pcl, pch
.6321	ad 28 63	          lda  ra        ; set ra
.6324	58		          cli
.6325	28		          plp            ; stack : pcl, pch
.6326	60		          rts
>6327	00		rp        .byte     0
>6328	00		ra        .byte     0
>6329	00 00		pc        .word     0

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.632b			blkfill
.632b	20 b5 62	bf0            jsr  push
.632e	20 e9 63	               jsr  savezp1
.6331	84 fc		               sty  zpage1+1
.6333	a0 00		               ldy  #$00
.6335	84 fb		               sty  zpage1
.6337	91 fb		bf1            sta  (zpage1),y
.6339	c8		               iny
.633a	d0 fb		               bne  bf1
.633c	20 f8 63	               jsr  restzp1
.633f	20 f4 62	               jsr  pop
.6342	60		               rts
.6343			memfill
.6343	20 b5 62	               jsr  push
.6346	20 2b 63	mf1            jsr  blkfill
.6349	c8		               iny
.634a	ca		               dex
.634b	d0 f9		               bne  mf1
.634d	20 f4 62	               jsr  pop
.6350	60		               rts
.6351			memmove
.6351	20 b5 62	               jsr  push
.6354	ba		               tsx            ; On se crée un pointeur ...
.6355	8a		               txa
.6356	18		               clc
.6357	69 0b		               adc  #11
.6359	a8		               tay
.635a	a2 06		               ldx  #$06
.635c	b9 00 01	nextbyte       lda  $0100,y
.635f	99 ab 63	               sta  words,y
.6362	c8		               iny
.6363	ca		               dex
.6364	d0 f6		               bne  nextbyte
.6366	ad ab 63	               lda  s
.6369	8d 82 63	               sta  source+1
.636c	ad ac 63	               lda  s+1
.636f	8d 83 63	               sta  source+2
.6372	ad ad 63	               lda  d
.6375	8d 7f 63	               sta  destin+1
.6378	ad ae 63	               lda  d+1
.637b	8d 80 63	               sta  destin+2
.637e	ad ff ff	destin         lda  $ffff
.6381	8d ff ff	source         sta  $ffff
.6384	ee 7f 63	               inc  destin+1
.6387	d0 03		               bne  src
.6389	ee 80 63	               inc  destin+2
.638c	ee 82 63	src            inc  source+1
.638f	d0 03		               bne  cnt
.6391	ee 83 63	               inc  source+2
.6394	ad af 63	cnt            lda  compte
.6397	d0 08		               bne  decit
.6399	ad b0 63	               lda  compte+1
.639c	f0 09		               beq  fini
.639e	ce b0 63	               dec  compte+1
.63a1	ce af 63	decit          dec  compte
.63a4	4c 7e 63	               jmp  destin
.63a7	20 f4 62	fini           jsr  pop
.63aa	60		               rts
.63ab			words
>63ab	00 00		s         .word     $0000
>63ad	00 00		d         .word     $0000
>63af	00 00		compte    .word     $0000
.63b1			decword
.63b1	20 b5 62	               jsr  push
.63b4	86 fd		               stx  zpage2
.63b6	84 fe		               sty  zpage2+1
.63b8	20 f4 62	               jsr  pop
.63bb	60		               rts
.63bc			inczp1
.63bc	08		               php
.63bd	e6 fb		               inc  zpage1
.63bf	d0 02		               bne  nopage
.63c1	e6 fc		               inc  zpage1+1
.63c3	28		nopage         plp
.63c4	60		               rts
.63c5			deczp1
.63c5	08		                php
.63c6	48		                pha
.63c7	c6 fb		                dec  zpage1
.63c9	d0 02		                bne  nopage
.63cb	c6 fc		                dec  zpage1+1
.63cd	c6 fb		nopage          dec  zpage1
.63cf	68		                pla
.63d0	28		                plp
.63d1	60		                rts
.63d2			inczp2
.63d2	08		               php
.63d3	48		               pha
.63d4	e6 fd		               inc  zpage2
.63d6	d0 02		               bne  nopage
.63d8	e6 fe		               inc  zpage2+1
.63da	68		nopage         pla
.63db	28		               plp
.63dc	60		               rts
.63dd			deczp2
.63dd	08		               php
.63de	48		               pha
.63df	a5 fd		               lda  zpage2
.63e1	d0 02		               bne  nopage
.63e3	c6 fe		               dec  zpage2+1
.63e5	c6 fd		nopage         dec  zpage2
.63e7	28		               plp
.63e8	60		               rts
.63e9			savezp1
.63e9	08		               php
.63ea	48		               pha
.63eb	a5 fb		               lda  zpage1
.63ed	8d 65 64	               sta  zp1
.63f0	a5 fc		               lda  zpage1+1
.63f2	8d 66 64	               sta  zp1+1
.63f5	68		               pla
.63f6	28		               plp
.63f7	60		               rts
.63f8			restzp1
.63f8	08		               php
.63f9	48		               pha
.63fa	ad 65 64	               lda zp1
.63fd	85 fb		               sta zpage1
.63ff	ad 66 64	               lda zp1+1
.6402	85 fc		               sta zpage1+1
.6404	68		               pla
.6405	28		               plp
.6406	60		               rts
.6407			savezp2
.6407	08		         php
.6408	48		         pha
.6409	a5 fd		         lda zpage2
.640b	8d 67 64	         sta zp2
.640e	a5 fe		         lda zpage2+1
.6410	8d 68 64	         sta zp2+1
.6413	68		         pla
.6414	28		         plp
.6415	60		         rts
.6416			restzp2
.6416	08		                php
.6417	48		                pha
.6418	ad 67 64	                lda  zp2
.641b	85 fd		                sta  zpage2
.641d	ad 68 64	                lda  zp2+1
.6420	85 fe		                sta  zpage2+1
.6422	68		                pla
.6423	28		                plp
.6424	60		                rts
.6425			xy2addr
.6425	08		                php
.6426	48		                pha
.6427	8a		                txa
.6428	48		                pha
.6429	98		                tya
.642a	48		                pha
.642b	ad 60 64	                lda     addr1+1
.642e	8d 62 64	                sta     addr2+1
.6431	ad 5f 64	                lda     addr1
.6434	8d 61 64	                sta     addr2
.6437	c0 00		                cpy     #$00
.6439	f0 0f		                beq     addx
.643b	18		moreline        clc
.643c	6d 5e 64	                adc     ymult
.643f	90 03		                bcc     norepy
.6441	ee 62 64	                inc     addr2+1
.6444	8d 61 64	norepy          sta     addr2
.6447	88		                dey
.6448	d0 f1		                bne     moreline
.644a	8a		addx            txa
.644b	18		                clc
.644c	6d 61 64	                adc     addr2
.644f	90 03		                bcc     thatsit
.6451	ee 62 64	                inc     addr2+1
.6454	8d 61 64	thatsit         sta     addr2
.6457	68		                pla
.6458	a8		                tay
.6459	68		                pla
.645a	aa		                tax
.645b	68		                pla
.645c	28		                plp
.645d	60		                rts
>645e	28		ymult          .byte     40
>645f	00 00		addr1          .word     $0000
>6461	00 00		addr2          .word     $0000
>6463	00 00		bytecnt        .word     $0000
>6465	00 00		zp1        .word   $0000
>6467	00 00		zp2        .word   $0000

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>6469	01		a2hexcol       .byte     1              ; pour aputscxy
>646a	00		a2hexbkcol     .byte     %00000000
.646b			a2hexpos
>646b	00		a2hexpx        .byte     0              ; pour aputsxy
>646c	00		a2hexpy        .byte     0
>646d	24		a2hexprefix    .byte     "$"            ; pour aputs
>646e	00 00		a2hexstr       .word     $00
>6470	00 00		               .word     $00
>6472	00		               .byte     0              ; 0 end string
.6473			putahexfmtxy
.6473	20 b5 62	               jsr  push
.6476	20 c2 64	               jsr  a2hex
.6479	ae 6b 64	               ldx  a2hexpx
.647c	ac 6c 64	               ldy  a2hexpy
.647f	20 de 61	               jsr  gotoxy
.6482	a2 6d		               ldx  #<a2hexprefix
.6484	a0 64		               ldy  #>a2hexprefix
.6486	20 c4 61	               jsr  puts
.6489	20 f4 62	               jsr  pop
.648c	60		               rts
.648d			putahexfmt
.648d	20 b5 62	               jsr  push
.6490	20 c2 64	               jsr  a2hex
.6493	a2 6d		               ldx  #<a2hexprefix
.6495	a0 64		               ldy  #>a2hexprefix
.6497	20 c4 61	               jsr  puts
.649a	20 f4 62	               jsr  pop
.649d	60		               rts
.649e			putahex
.649e	20 b5 62	               jsr  push
.64a1	20 c2 64	               jsr  a2hex
.64a4	a2 6e		               ldx  #<a2hexstr
.64a6	a0 64		               ldy  #>a2hexstr
.64a8	20 c4 61	               jsr  puts
.64ab	20 f4 62	               jsr  pop
.64ae	60		               rts
.64af			nib2hex
.64af	08		               php
.64b0	29 0f		               and  #$0f
.64b2	f8		               sed
.64b3	18		               clc
.64b4	69 90		               adc  #$90
.64b6	69 40		               adc  #$40
.64b8	d8		               cld
.64b9	28		               plp
.64ba	60		               rts
.64bb			lsra4bits
.64bb	08		               php
.64bc	4a		               lsr
.64bd	4a		               lsr
.64be	4a		               lsr
.64bf	4a		               lsr
.64c0	28		               plp
.64c1	60		               rts
.64c2			a2hex
.64c2	08		               php
.64c3	48		               pha
.64c4	48		               pha
.64c5	20 bb 64	               jsr  lsra4bits
.64c8	20 af 64	               jsr  nib2hex
.64cb	8d 6e 64	               sta  a2hexstr
.64ce	68		               pla
.64cf	20 af 64	               jsr  nib2hex
.64d2	8d 6f 64	               sta  a2hexstr+1
.64d5	a9 00		               lda  #$00                ; set end of string
.64d7	8d 70 64	               sta  a2hexstr+2
.64da	68		               pla
.64db	28		               plp
.64dc	60		               rts
.64dd			xy2hex
.64dd	20 b5 62	               jsr  push
.64e0	20 c2 64	               jsr  a2hex
.64e3	8a		               txa
.64e4	48		               pha
.64e5	20 bb 64	               jsr  lsra4bits
.64e8	20 af 64	               jsr  nib2hex
.64eb	8d 6e 64	               sta  a2hexstr
.64ee	68		               pla
.64ef	20 af 64	               jsr  nib2hex
.64f2	8d 6f 64	               sta  a2hexstr+1
.64f5	98		               tya
.64f6	48		               pha
.64f7	20 bb 64	               jsr  lsra4bits
.64fa	20 af 64	               jsr  nib2hex
.64fd	8d 70 64	               sta  a2hexstr+2
.6500	68		               pla
.6501	20 af 64	               jsr  nib2hex
.6504	8d 71 64	               sta  a2hexstr+3
.6507	a9 00		               lda  #$00                ; 0 ended string
.6509	8d 72 64	               sta  a2hexstr+4
.650c	20 f4 62	               jsr  pop
.650f			atobin
.650f	20 b5 62	               jsr     push
.6512	a2 08		               ldx     #8
.6514	a0 00		               ldy     #0
.6516	2a		nextbit        rol
.6517	48		               pha
.6518	69 00		               adc     #$00
.651a	29 01		               and     #$01
.651c	20 af 64	               jsr     nib2hex
.651f	99 30 65	               sta     abin,y
.6522	68		               pla
.6523	c8		               iny
.6524	ca		               dex
.6525	d0 ef		               bne     nextbit
.6527	a9 00		               lda     #0
.6529	99 30 65	               sta     abin,y
.652c	20 f4 62	               jsr     pull
.652f	60		               rts
>6530	30 30 30 30	abin           .null   "00000000"
>6534	30 30 30 30 00
.6539			putabin
.6539	20 0f 65	               jsr     atobin
.653c	20 b5 62	               jsr     push
.653f	a2 30		               ldx     #<abin
.6541	a0 65		               ldy     #>abin
.6543	20 c4 61	               jsr     puts
.6546	20 f4 62	               jsr     pop
.6549	60		               rts
.654a			putabinfmt
.654a	08		               php
.654b	48		               pha
.654c	a9 25		               lda     #"%"
.654e	20 be 61	               jsr     putch
.6551	68		               pla
.6552	20 39 65	               jsr     putabin
.6555	28		               plp
.6556	60		               rts
.6557			putabinxy
.6557	20 de 61	               jsr     gotoxy
.655a	20 39 65	               jsr     putabin
.655d	60		               rts
.655e			putabinfmtxy
.655e	20 de 61	               jsr     gotoxy
.6561	20 4a 65	               jsr     putabinfmt
.6564	60		               rts

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

.6565			waitstop
.6565	20 b5 62	                jsr     push
.6568	20 ed f6	wait            jsr     k_stop
.656b	d0 fb		                bne     wait
.656d	20 f4 62	                jsr     pop
.6570	60		                rts
.6571			anykey
.6571	08		                php
.6572	48		                pha
.6573	a5 cb		nokey           lda 203
.6575	c9 40		                cmp #64
.6577	f0 fa		                beq nokey
.6579	68		                pla
.657a	28		                plp
.657b	60		                rts
.657c			getkey
.657c	20 b5 62	                jsr     push
.657f	20 cf ff	again           jsr     chrin
.6582	4c 7f 65	                jmp     again
.6585	20 f4 62	                jsr     pop
.6588	60		                rts
.6589			waitkey
.6589	20 b5 62	                jsr     push
.658c	8d a1 65	                sta     thekey
.658f	20 e4 ff	nope            jsr     getin
.6592	20 d2 ff	                jsr     chrout
.6595	cd a1 65	                cmp     thekey
.6598	d0 f5		                bne     nope
.659a	20 d2 ff	                jsr     chrout
.659d	20 f4 62	                jsr     pop
.65a0	60		                rts
>65a1	00		thekey          .byte   0
.65a2			waitspace
.65a2	20 b5 62	                jsr     push
.65a5	a9 7f		wait            lda     #$7f  ;%01111111
.65a7	8d 00 dc	                sta     $dc00
.65aa	ad 01 dc	                lda     $dc01
.65ad	29 10		                and     #$10  ;mask %00010000
.65af	d0 f4		                bne     wait
.65b1	20 f4 62	                jsr     pop
.65b4			waitsstop
.65b4	20 b5 62	                jsr     push
.65b7	20 ed f6	wait            jsr     k_stop  ;%01111111
.65ba	d0 fb		                bne     wait
.65bc	20 f4 62	                jsr     pop
.65bf			waitreturn
.65bf	20 b5 62	                jsr     push
.65c2	ad de 65	                lda     thecount
.65c5	8d 00 04	                sta     scrnram
.65c8	a9 02		                lda     #$02
.65ca	8d 00 d8	                sta     colorram
.65cd	20 e4 ff	nope            jsr     getin
.65d0	20 d2 ff	                jsr     chrout
.65d3	c9 0d		                cmp     #$0d
.65d5	d0 f6		                bne     nope
.65d7	ee de 65	                inc     thecount
.65da	20 f4 62	                jsr     pop
.65dd	60		                rts
>65de	01		thecount        .byte   $01

;******  Return to file: irqtune3channel.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L irqtune3channel.txt -o irqtune3channel.prg irqtune3channel.asm
; Thu May 11 12:00:19 2023

;Offset	;Hex		;Source

;******  Processing input file: irqtune3channel.asm

="20230511-082548"	                Version = "20230511-082548"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: irqtune3channel.asm

.080d			main
.080d	20 9a 61	                jsr scrmaninit
.0810	20 19 08	                jsr help
.0813	20 00 60	                jsr irqtune3channel
.0816	4c 74 a4	                jmp b_warmstart
.0819			help
.0819	20 bb 61	                jsr cls
.081c	a2 a3		                ldx  #<line
.081e	a0 09		                ldy  #>line
.0820	20 d0 61	                jsr  puts
.0823	a2 47		                ldx  #<headera
.0825	a0 08		                ldy  #>headera
.0827	20 d0 61	                jsr  puts
.082a	a2 c9		                ldx  #<headerb
.082c	a0 08		                ldy  #>headerb
.082e	20 d0 61	                jsr  puts
.0831	a2 4f		                ldx  #<shortcuts
.0833	a0 09		                ldy  #>shortcuts
.0835	20 d0 61	                jsr  puts
.0838	a2 cc		                ldx  #<helptext
.083a	a0 09		                ldy  #>helptext
.083c	20 d0 61	                jsr  puts
.083f	a2 a3		                ldx  #<line
.0841	a0 09		                ldy  #>line
.0843	20 d0 61	                jsr  puts
.0846	60		                rts
.0847			headera
>0847	20 20 20 20	                .text          "     40 BEST MACHINE CODE ROUTINES"
>084b	20 34 30 20 c2 c5 d3 d4 20 cd c1 c3 c8 c9 ce c5
>085b	20 c3 cf c4 c5 20 d2 cf d5 d4 c9 ce c5 d3
>0869	0d		          .byte   $0d
>086a	20 20 20 20	                .text          "          FOR THE COMMODORE 64"
>086e	20 20 20 20 20 20 c6 cf d2 20 d4 c8 c5 20 c3 cf
>087e	cd cd cf c4 cf d2 c5 20 36 34
>0888	0d		          .byte   $0d
>0889	20 20 20 20	                .text          "       Book by Mark Greenshields."
>088d	20 20 20 c2 4f 4f 4b 20 42 59 20 cd 41 52 4b 20
>089d	c7 52 45 45 4e 53 48 49 45 4c 44 53 2e
>08aa	0d		          .byte   $0d
>08ab	20 20 20 20	                .text          "          ISBN 0-7156-1899-7"
>08af	20 20 20 20 20 20 c9 d3 c2 ce 20 30 2d 37 31 35
>08bf	36 2d 31 38 39 39 2d 37
>08c7	0d 00		          .byte   $0d,0
>08c9	20 20 20 20	headerb         .text          "         irqtune3channel (p79)"
>08cd	20 20 20 20 20 49 52 51 54 55 4e 45 33 43 48 41
>08dd	4e 4e 45 4c 20 28 50 37 39 29
>08e7	0d		          .byte   $0d
>08e8	20 20 20 20	                .text          "        (c) 1979 Brad Templeton"
>08ec	20 20 20 20 28 43 29 20 31 39 37 39 20 c2 52 41
>08fc	44 20 d4 45 4d 50 4c 45 54 4f 4e
>0907	0d		          .byte   $0d
>0908	20 20 20 20	                .text          "     programmed by Daniel Lafrance."
>090c	20 50 52 4f 47 52 41 4d 4d 45 44 20 42 59 20 c4
>091c	41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e
>092b	0d		          .byte   $0d
>092c	20 20 20 20	                .text   format("        Version: %s.",Version)
>0930	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>0940	33 30 35 31 31 2d 30 38 32 35 34 38 2e
>094d	0d 00		          .byte   $0d,0
>094f	20 2d 2d 2d	shortcuts       .text          " -------- S H O R T - C U T S ---------"
>0953	2d 2d 2d 2d 2d 20 d3 20 c8 20 cf 20 d2 20 d4 20
>0963	2d 20 c3 20 d5 20 d4 20 d3 20 2d 2d 2d 2d 2d 2d
>0973	2d 2d 2d
>0976	0d		          .byte   $0d
>0977	20 52 55 4e	                .text   format(" run=SYS%5d, help=SYS%5d",main, help)
>097b	3d d3 d9 d3 20 32 30 36 31 2c 20 48 45 4c 50 3d
>098b	d3 d9 d3 20 32 30 37 33
>0993	0d		          .byte   $0d
>0994	20 43 4c 53	                .text   format(" cls=SYS%5d",cls)
>0998	3d d3 d9 d3 32 35 30 31 39
>09a1	0d 00		          .byte   $0d,0
>09a3	20 2d 2d 2d	line            .text          " --------------------------------------"
>09a7	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09b7	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09c7	2d 2d 2d
>09ca	0d 00		          .byte   $0d,0
>09cc	20 49 52 51	helptext        .text   format(" irqtune3channel: SYS%5d",irqtune3channel)
>09d0	54 55 4e 45 33 43 48 41 4e 4e 45 4c 3a 20 d3 d9
>09e0	d3 32 34 35 37 36
>09e6	0d		          .byte   $0d
>09e7	20 45 58 2e	                .text   format(" ex.: SYS%5d",irqtune3channel)
>09eb	3a 20 d3 d9 d3 32 34 35 37 36
>09f5	0d 00		          .byte   $0d,0
.6000			irqtune3channel
.6000	78		                sei
.6001	a9 37		                lda #<main
.6003	8d 14 03	                sta 788
.6006	a9 60		                lda #>main
.6008	8d 15 03	                sta 789
.600b	a9 0a		                lda #$0a        ; #0-15 $00-$0f
.600d	8d 18 d4	                sta sidsigvol   ; $d418 ; 54296 - Volume and Filter selectv register.
.6010	a9 21		                lda #33
.6012	8d 04 d4	                sta sidv1control; $d404 ; 54276 - Voice 1 Voice control register.
.6015	a9 21		                lda #33
.6017	8d 0b d4	                sta sidv2control; $d40b ; 54283 - Voice 2 Voice control register.
.601a	a9 13		                lda #19
.601c	8d 12 d4	                sta sidv3control; $xxxx ; ddddd - Voice 3 Voice control register.
.601f	a9 40		                lda #64
.6021	8d 05 d4	                sta sidv1atkdec ; $d405 ; 54277 - Voice 1 0-3: Decay duration, 4-7: Attack duration.
.6024	8d 06 d4	                sta sidv1stnrel ; $d406 ; 54278 - Voice 1 0-3: Rel. duration, 4-7: Sustain duration.
.6027	8d 0c d4	                sta sidv2atkdec ; $d40c ; 54284 - Voice 2 0-3: Decay duration, 4-7: Attack duration.
.602a	8d 0d d4	                sta sidv2stnrel ; $d40d ; 54285 - Voice 2 0-3: Rel. duration, 4-7: Sustain duration.
.602d	a9 00		                lda #0
.602f	85 fb		                sta 251
.6031	85 fc		                sta 252
.6033	85 fd		                sta 253
.6035	58		                cli
.6036	60		                rts
.6037	a6 fb		main            ldx 251
.6039	a4 fc		                ldy 252
.603b	bd 85 60	                lda tune1,x
.603e	8d 00 d4	                sta sidv1flow   ; $d400 ; 54272 - Voice 1 Low freq register low byte.
.6041	bd 86 60	                lda tune1+1,x
.6044	8d 01 d4	                sta sidv1fhigh  ; $d401 ; 54273 - Voice 1 High freq register high byte.
.6047	bd c1 60	                lda tune2,x
.604a	8d 07 d4	                sta sidv2flow   ; $d407 ; 54279 - Voice 2 Low freq register low byte.
.604d	bd c2 60	                lda tune2+1,x
.6050	8d 08 d4	                sta sidv2fhigh  ; $d408 ; 54280 - Voice 2 High freq register high byte.
.6053	bd fd 60	                lda tune3,x
.6056	8d 0e d4	                sta sidv3flow   ; $xxxx ; ddddd - Voice 3 Low freq register low byte.
.6059	bd fe 60	                lda tune3+1,x
.605c	8d 0f d4	                sta sidv3fhigh  ; $xxxx ; ddddd - Voice 3 High freq register high byte.
.605f	a5 fd		                lda 253
.6061	c9 01		                cmp #1
.6063	b0 05		                bcs nextdelay
.6065	e6 fd		                inc 253
.6067	4c 31 ea	                jmp irq     ; $ea31
.606a	a9 00		nextdelay       lda #0
.606c	85 fd		                sta 253
.606e	e8		                inx
.606f	e8		                inx
.6070	c8		                iny
.6071	86 fb		                stx 251
.6073	84 fc		                sty 252
.6075	e0 30		                cpx #48
.6077	b0 03		                bcs re
.6079	4c 31 ea	                jmp irq     ; $ea31
.607c	a2 00		re              ldx #0
.607e	85 fb		                sta 251
.6080	85 fc		                sta 252
.6082	4c 31 ea	                jmp irq     ; $ea31
.6085			tune1
>6085	d4 01		la2       .word $01D4 ; NTSC (hex): high: $01, low: $D4 ; (dec): low:212, High:1
>6087	f0 01		lad2      .word $01F0 ; NTSC (hex): high: $01, low: $F0 ; (dec): low:240, High:1
>6089	0d 02		si2       .word $020D ; NTSC (hex): high: $02, low: $0D ; (dec): low:13, High:2
>608b	2c 02		do2       .word $022C ; NTSC (hex): high: $02, low: $2C ; (dec): low:44, High:2
>608d	4e 02		dod2      .word $024E ; NTSC (hex): high: $02, low: $4E ; (dec): low:78, High:2
>608f	71 02		re2       .word $0271 ; NTSC (hex): high: $02, low: $71 ; (dec): low:113, High:2
>6091	96 02		red2      .word $0296 ; NTSC (hex): high: $02, low: $96 ; (dec): low:150, High:2
>6093	bd 02		mi2       .word $02BD ; NTSC (hex): high: $02, low: $BD ; (dec): low:189, High:2
>6095	e7 02		fa2       .word $02E7 ; NTSC (hex): high: $02, low: $E7 ; (dec): low:231, High:2
>6097	13 03		fad2      .word $0313 ; NTSC (hex): high: $03, low: $13 ; (dec): low:19, High:3
>6099	42 03		sol2      .word $0342 ; NTSC (hex): high: $03, low: $42 ; (dec): low:66, High:3
>609b	73 03		sold2     .word $0373 ; NTSC (hex): high: $03, low: $73 ; (dec): low:115, High:3
>609d	a8 03		la3       .word $03A8 ; NTSC (hex): high: $03, low: $A8 ; (dec): low:168, High:3
>609f	e0 03		lad3      .word $03E0 ; NTSC (hex): high: $03, low: $E0 ; (dec): low:224, High:3
>60a1	1b 04		si3       .word $041B ; NTSC (hex): high: $04, low: $1B ; (dec): low:27, High:4
>60a3	59 04		do3       .word $0459 ; NTSC (hex): high: $04, low: $59 ; (dec): low:89, High:4
>60a5	9c 04		dod3      .word $049C ; NTSC (hex): high: $04, low: $9C ; (dec): low:156, High:4
>60a7	e2 04		re3       .word $04E2 ; NTSC (hex): high: $04, low: $E2 ; (dec): low:226, High:4
>60a9	2c 05		red3      .word $052C ; NTSC (hex): high: $05, low: $2C ; (dec): low:44, High:5
>60ab	7b 05		mi3       .word $057B ; NTSC (hex): high: $05, low: $7B ; (dec): low:123, High:5
>60ad	ce 05		fa3       .word $05CE ; NTSC (hex): high: $05, low: $CE ; (dec): low:206, High:5
>60af	27 06		fad3      .word $0627 ; NTSC (hex): high: $06, low: $27 ; (dec): low:39, High:6
>60b1	84 06		sol3      .word $0684 ; NTSC (hex): high: $06, low: $84 ; (dec): low:132, High:6
>60b3	e7 06		sold3     .word $06E7 ; NTSC (hex): high: $06, low: $E7 ; (dec): low:231, High:6
>60b5	51 07		la4       .word $0751 ; NTSC (hex): high: $07, low: $51 ; (dec): low:81, High:7
>60b7	c0 07		lad4      .word $07C0 ; NTSC (hex): high: $07, low: $C0 ; (dec): low:192, High:7
>60b9	00 00		          .byte   0,  0
>60bb	00 00		          .byte   0,  0
>60bd	00 00		          .byte   0,  0
>60bf	00 00		          .byte   0,  0
.60c1			tune2
>60c1	a2 0e		la5       .word $0EA2 ; NTSC (hex): high: $0E, low: $A2 ; (dec): low:162, High:14
>60c3	81 0f		lad5      .word $0F81 ; NTSC (hex): high: $0F, low: $81 ; (dec): low:129, High:15
>60c5	6d 10		si5       .word $106D ; NTSC (hex): high: $10, low: $6D ; (dec): low:109, High:16
>60c7	67 11		do5       .word $1167 ; NTSC (hex): high: $11, low: $67 ; (dec): low:103, High:17
>60c9	70 12		dod5      .word $1270 ; NTSC (hex): high: $12, low: $70 ; (dec): low:112, High:18
>60cb	88 13		re5       .word $1388 ; NTSC (hex): high: $13, low: $88 ; (dec): low:136, High:19
>60cd	b2 14		red5      .word $14B2 ; NTSC (hex): high: $14, low: $B2 ; (dec): low:178, High:20
>60cf	ed 15		mi5       .word $15ED ; NTSC (hex): high: $15, low: $ED ; (dec): low:237, High:21
>60d1	3b 17		fa5       .word $173B ; NTSC (hex): high: $17, low: $3B ; (dec): low:59, High:23
>60d3	9c 18		fad5      .word $189C ; NTSC (hex): high: $18, low: $9C ; (dec): low:156, High:24
>60d5	13 1a		sol5      .word $1A13 ; NTSC (hex): high: $1A, low: $13 ; (dec): low:19, High:26
>60d7	9f 1b		sold5     .word $1B9F ; NTSC (hex): high: $1B, low: $9F ; (dec): low:159, High:27
>60d9	44 1d		la6       .word $1D44 ; NTSC (hex): high: $1D, low: $44 ; (dec): low:68, High:29
>60db	02 1f		lad6      .word $1F02 ; NTSC (hex): high: $1F, low: $02 ; (dec): low:2, High:31
>60dd	da 20		si6       .word $20DA ; NTSC (hex): high: $20, low: $DA ; (dec): low:218, High:32
>60df	ce 22		do6       .word $22CE ; NTSC (hex): high: $22, low: $CE ; (dec): low:206, High:34
>60e1	e0 24		dod6      .word $24E0 ; NTSC (hex): high: $24, low: $E0 ; (dec): low:224, High:36
>60e3	10 27		re6       .word $2710 ; NTSC (hex): high: $27, low: $10 ; (dec): low:16, High:39
>60e5	64 29		red6      .word $2964 ; NTSC (hex): high: $29, low: $64 ; (dec): low:100, High:41
>60e7	da 2b		mi6       .word $2BDA ; NTSC (hex): high: $2B, low: $DA ; (dec): low:218, High:43
>60e9	76 2e		fa6       .word $2E76 ; NTSC (hex): high: $2E, low: $76 ; (dec): low:118, High:46
>60eb	39 31		fad6      .word $3139 ; NTSC (hex): high: $31, low: $39 ; (dec): low:57, High:49
>60ed	26 34		sol6      .word $3426 ; NTSC (hex): high: $34, low: $26 ; (dec): low:38, High:52
>60ef	3f 37		sold6     .word $373F ; NTSC (hex): high: $37, low: $3F ; (dec): low:63, High:55
>60f1	89 3a		la7       .word $3A89 ; NTSC (hex): high: $3A, low: $89 ; (dec): low:137, High:58
>60f3	05 3e		lad7      .word $3E05 ; NTSC (hex): high: $3E, low: $05 ; (dec): low:5, High:62
>60f5	00 00		          .byte   0,  0
>60f7	00 00		          .byte   0,  0
>60f9	00 00		          .byte   0,  0
>60fb	00 00		          .byte   0,  0
>60fd	c6 2d		tune3     .byte 198, 45 ; f-5
>60ff	00 00		          .byte   0,  0
>6101	c6 2d		          .byte 198, 45 ; f-5
>6103	34 2b		          .byte  52, 43
>6105	7e 26		          .byte 126, 38
>6107	00 00		          .byte   0,  0
>6109	7e 26		          .byte 126, 38
>610b	4b 22		          .byte  75, 34
>610d	7e 26		          .byte 126, 38
>610f	4b 22		          .byte  75, 34
>6111	8d 1e		          .byte 141, 30
>6113	d6 1c		          .byte 214, 28
>6115	00 00		          .byte   0,  0
>6117	d6 1c		          .byte 214, 28
>6119	8d 1e		          .byte 141, 30
>611b	4b 22		          .byte  75, 34
>611d	e3 16		          .byte 227, 22
>611f	b1 19		          .byte 177, 25
>6121	8d 1e		          .byte 141, 30
>6123	d6 1c		          .byte 214, 28
>6125	b1 19		          .byte 177, 25
>6127	e3 16		          .byte 227, 22
>6129	00 00		          .byte   0,  0
>612b	00 00		          .byte   0,  0
>612d	00 00		          .byte   0,  0
>612f	00 00		          .byte   0,  0
.6131			tune4
>6131	72 0b		           .byte 114, 11
>6133	00 00		          .byte   0,  0
>6135	72 0b		          .byte 114, 11
>6137	cd 0a		          .byte 205, 10
>6139	9f 09		          .byte 159,  9
>613b	00 00		          .byte   0,  0
>613d	9f 09		          .byte 159,  9
>613f	93 08		          .byte 147,  8
>6141	9f 09		          .byte 159,  9
>6143	93 08		          .byte 147,  8
>6145	a3 07		          .byte 163,  7
>6147	35 07		          .byte  53,  7
>6149	00 00		          .byte   0,  0
>614b	35 07		          .byte  53,  7
>614d	a3 07		          .byte 163,  7
>614f	93 08		          .byte 147,  8
>6151	b9 05		          .byte 185,  5
>6153	6c 06		          .byte 108,  6
>6155	a3 07		          .byte 163,  7
>6157	35 07		          .byte  53,  7
>6159	6c 06		          .byte 108,  6
>615b	b9 05		          .byte 185,  5
>615d	00 00		          .byte   0,  0
>615f	00 00		          .byte   0,  0
>6161	00 00		          .byte   0,  0
>6163	00 00		          .byte   0,  0
>6165	00 00		tune5           .byte   0,  0
>6167	00 00		          .byte   0,  0
>6169	00 00		          .byte   0,  0
>616b	00 00		          .byte   0,  0
>616d	00 00		          .byte   0,  0
>616f	00 00		          .byte   0,  0
>6171	00 00		          .byte   0,  0
>6173	00 00		          .byte   0,  0
>6175	00 00		          .byte   0,  0
>6177	00 00		          .byte   0,  0
>6179	00 00		          .byte   0,  0
>617b	00 00		          .byte   0,  0
>617d	00 00		          .byte   0,  0
>617f	00 00		          .byte   0,  0
>6181	00 00		          .byte   0,  0
>6183	00 00		          .byte   0,  0
>6185	00 00		          .byte   0,  0
>6187	00 00		          .byte   0,  0
>6189	00 00		          .byte   0,  0
>618b	00 00		          .byte   0,  0
>618d	00 00		          .byte   0,  0
>618f	00 00		          .byte   0,  0
>6191	00 00		          .byte   0,  0
>6193	00 00		          .byte   0,  0
>6195	00 00		          .byte   0,  0
>6197	00 00		          .byte   0,  0
>6199	00		byte            .byte 0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ; 97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.619a			libtart

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-sid.asm

=$d400			sidv1flow   =   $d400 ; 54272 - Voice 1 Low freq register low byte.
=$d401			sidv1fhigh  =   $d401 ; 54273 - Voice 1 High freq register high byte.
=$d402			sidv1pwlow 	=   $d402 ; 54274 - Voice 1 Pulse waveform width register low byte.
=$d403			sidv1pwhigh =   $d403 ; 54275 - Voice 1 Pulse waveform width register high byte.
=$d404			sidv1control=   $d404 ; 54276 - Voice 1 Voice control register.
=$d405			sidv1atkdec =	$d405 ; 54277 - 0-3: Voice 1 Decay duration, 4-7: Attack duration.
=$d406			sidv1stnrel =   $d406 ; 54278 - 0-3: Voice 1 Rel. duration, 4-7: Sustain duration.
=$d407			sidv2flow   =   $d407 ; 54279 - Voice 2 Low freq register low byte.
=$d408			sidv2fhigh  =   $d408 ; 54280 - Voice 2 High freq register high byte.
=$d409			sidv2pwlow 	=   $d409 ; 54281 - Voice 2 Pulse waveform width register low byte.
=$d40a			sidv2pwhigh	=   $d40a ; 54282 - Voice 2 Pulse waveform width register high byte.
=$d40b			sidv2control=   $d40b ; 54283 - Voice 2 Voice control register.
=$d40c			sidv2atkdec =   $d40c ; 54284 - Voice 2 0-3: Decay duration, 4-7: Attack duration.
=$d40d			sidv2stnrel =   $d40d ; 54285 - Voice 2 0-3: Rel. duration, 4-7: Sustain duration.
=$d40e			sidv3flow   =   $d40e ; 54286 - Voice 3 Low freq register low byte.
=$d40f			sidv3fhigh  =   $d40f ; 54287 - Voice 3 High freq register high byte.
=$d410			sidv3pwlow 	=   $d410 ; 54288 - Voice 3 Pulse waveform width register low byte.
=$d411			sidv3pwhigh =   $d411 ; 54289 - Voice 3 Pulse waveform width register high byte.
=$d412			sidv3control=   $d412 ; 54290 - Voice 3 Poice control register.
=$d413			sidv3atkdec =   $d413 ; 54291 - Voice 3 0-3: Decay duration, 4-7: Attack duration.
=$d414			sidv3stnrel =   $d414 ; 54292 - Voice 3 0-3: Rel. duration, 4-7: Sustain duration.
=$d415			sidcutlo    =   $d415 ; 54293 - Bits 0-2 = low portion of filter cutoff frequency.
=$d416			sidcuthi    =   $d416 ; 54294 - Filter cutoff frequency (high byte).
=$d417			sidreson    =   $d417 ; 54295 - Filter resonnance control register.
=$d418			sidsigvol  =    $d418 ; 54296 - Volume and Filter selectv register.
=$d419			sidpotx    =    $d419 ; 54297 - Read game paddle 1 (or 3) X position.
=$d41a			sidpoty    =    $d41a ; 54298 - Read game paddle 1 (or 3) Y position.
=$d41b			sidrandom  =    $d41b ; 54299 - Read oscillator/Random number generator.
=$d41c			sidenv3    =    $d41c ; 54300 - Envelope Generator 3 output.

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.619a			scrmaninit
.619a	20 c1 62	               jsr  push
.619d	a9 06		               lda  #vbleu
.619f	8d 21 d0	               sta  vicbackcol
.61a2	a9 05		               lda  #vvert
.61a4	8d 20 d0	               sta  vicbordcol
.61a7	a9 01		               lda  #vblanc
.61a9	8d 86 02	               sta  bascol
.61ac	ad 00 04	               lda  scrnram
.61af	29 fd		               and  #%11111101
.61b1	8d 00 04	               sta  scrnram
.61b4	20 bb 61	               jsr  cls
.61b7	20 00 63	               jsr  pop
.61ba	60		               rts
.61bb			cls
.61bb	08		               php
.61bc	48		               pha
.61bd	a9 93		               lda  #$93
.61bf	20 ca 61	               jsr  putch
.61c2	a9 0e		               lda  #$0e
.61c4	20 ca 61	               jsr  putch
.61c7	68		               pla
.61c8	28		               plp
.61c9	60		               rts
.61ca			putch
.61ca	08		               php
.61cb	20 d2 ff	               jsr  $ffd2
.61ce	28		               plp
.61cf	60		               rts
.61d0			puts
.61d0	20 c1 62	               jsr  push
.61d3	86 fb		               stx  zpage1
.61d5	84 fc		               sty  zpage1+1
.61d7	a0 00		               ldy  #0
.61d9	b1 fb		next           lda  (zpage1),y
.61db	f0 09		               beq  exit
.61dd	20 ca 61	               jsr  putch
.61e0	20 c8 63	               jsr  inczp1
.61e3	4c d9 61	               jmp  next
.61e6	20 00 63	exit           jsr  pop
.61e9	60		               rts
.61ea			gotoxy
.61ea	08		               php
.61eb	18		               clc
.61ec	8a		               txa
.61ed	48		               pha
.61ee	98		               tya
.61ef	aa		               tax
.61f0	68		               pla
.61f1	a8		               tay
.61f2	20 f0 ff	               jsr  kplot
.61f5	28		               plp
.61f6	60		               rts
.61f7			cursor
=$0286			bascol    =    $0286
.61f7	08		               php
.61f8	48		               pha
.61f9	90 12		               bcc  restore
.61fb	20 f0 ff	               jsr  kplot
.61fe	8c 1f 62	               sty  cx
.6201	8e 20 62	               stx  cy
.6204	ad 86 02	               lda  bascol
.6207	8d 21 62	               sta  bcol
.620a	4c 1c 62	               jmp  out
.620d	ae 20 62	restore        ldx  cy
.6210	ac 1f 62	               ldy  cx
.6213	20 f0 ff	               jsr  kplot
.6216	ad 21 62	               lda  bcol
.6219	8d 86 02	               sta  bascol
.621c	68		out            pla
.621d	28		               plp
.621e	60		               rts
>621f	00		cx   .byte     $00
>6220	00		cy   .byte     $00
>6221	00		bcol .byte     $00
.6222			cursave
.6222	08		               php
.6223	38		               sec
.6224	20 f7 61	               jsr  cursor
.6227	28		               plp
.6228	60		               rts
.6229			curput
.6229	08		               php
.622a	18		               clc
.622b	20 f7 61	               jsr  cursor
.622e	28		               plp
.622f	60		               rts
.6230			putsxy
.6230	20 c1 62	               jsr  push
.6233	86 fb		               stx  zpage1
.6235	84 fc		               sty  zpage1+1
.6237	a0 00		               ldy  #$00
.6239	b1 fb		               lda  (zpage1),y
.623b	aa		               tax
.623c	20 c8 63	               jsr  inczp1
.623f	b1 fb		               lda  (zpage1),y
.6241	a8		               tay
.6242	20 ea 61	               jsr  gotoxy
.6245	20 c8 63	               jsr  inczp1
.6248	a6 fb		               ldx  zpage1
.624a	a4 fc		               ldy  zpage1+1
.624c	20 d0 61	               jsr  puts
.624f	20 00 63	               jsr  pop
.6252	60		               rts
>6253	00 00		straddr   .word     $00
>6255	00		px        .byte     $00
>6256	00		py        .byte     $00
>6257	00 00		zp1       .word     $00
.6259			putscxy
.6259	20 c1 62	               jsr  push
.625c	84 fc		               sty  zpage1+1
.625e	86 fb		               stx  zpage1
.6260	ad 86 02	               lda  bascol
.6263	8d 83 62	               sta  bc
.6266	a0 00		               ldy #$00
.6268	b1 fb		               lda  (zpage1),y
.626a	8d 86 02	               sta  bascol
.626d	20 c8 63	               jsr  inczp1
.6270	a6 fb		               ldx  zpage1
.6272	a4 fc		               ldy  zpage1+1
.6274	20 30 62	               jsr  putsxy
.6277	ad 83 62	               lda  bc
.627a	8d 86 02	               sta  bascol
.627d	20 00 63	               jsr  pop
.6280	60		               rts
>6281	00 00		straddr  .word      $00
>6283	00		bc       .byte      $00
>6284	00 00		zp1      .word      $00
.6286			putrahex
.6286	08		               php
.6287	48		               pha
.6288	20 ce 64	               jsr  a2hex
.628b	a9 7a		               lda  #<a2hexstr
.628d	a0 64		               ldy  #>a2hexstr
.628f	20 d0 61	               jsr  puts
.6292	68		               pla
.6293	28		               plp
.6294	60		               rts
.6295			kputrahexxy
.6295			bputrahexxy
.6295			putrahexxy
.6295	08		               php
.6296	20 ce 64	               jsr  a2hex
.6299	a9 77		               lda  #<a2hexpos
.629b	a0 64		               ldy  #>a2hexpos
.629d	20 30 62	               jsr  putsxy
.62a0	68		               pla
.62a1	28		               plp
.62a2	60		               rts
.62a3			putrahexcxy
.62a3	08		               php
.62a4	20 ce 64	               jsr  a2hex
.62a7	a9 77		               lda  #<a2hexpos
.62a9	a0 64		               ldy  #>a2hexpos
.62ab	20 59 62	               jsr  putscxy
.62ae	68		               pla
.62af	28		               plp
.62b0	60		               rts
.62b1			setinverse
.62b1	48		               pha
.62b2	a9 12		               lda  #$12
.62b4	20 d2 ff	               jsr  $ffd2
.62b7	68		               pla
.62b8	60		               rts
.62b9			clrinverse
.62b9	48		               pha
.62ba	a9 92		               lda  #$92
.62bc	20 d2 ff	               jsr  $ffd2
.62bf	68		               pla
.62c0	60		               rts

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.62c1			push
.62c1	08		          php            ; stack : flg, pcl, pch
.62c2	78		          sei
.62c3	8d fd 62	          sta  ra        ; save a
.62c6	68		          pla            ; stack : pcl, pch
.62c7	8d fc 62	          sta  rp        ; save rp
.62ca	68		          pla            ; stack : pch
.62cb	8d fe 62	          sta  pc        ; save pcl
.62ce	68		          pla            ; stack : -
.62cf	8d ff 62	          sta  pc+1      ; save pch
.62d2	a5 fb		          lda  zpage1    ; get zpage1 low byte
.62d4	48		          pha            ; stack : zp1l
.62d5	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.62d7	48		          pha            ; stack : zp1h, zp1l
.62d8	a5 fd		          lda  zpage2    ; get zpage2 low byte
.62da	48		          pha            ; stack : zp2l, zp1h, zp1l
.62db	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.62dd	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.62de	ad fc 62	          lda  rp        ; get rp
.62e1	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.62e2	ad fd 62	          lda  ra        ; get a
.62e5	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.62e6	8a		          txa            ; get x
.62e7	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.62e8	98		          tya            ; get y
.62e9	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.62ea	ad ff 62	          lda  pc+1      ; get pch
.62ed	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.62ee	ad fe 62	          lda  pc        ; get pcl
.62f1	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.62f2	ad fc 62	          lda  rp        ; get rp
.62f5	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.62f6	ad fd 62	          lda  ra        ; get a
.62f9	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.62fa	58		          cli
.62fb	60		          rts
>62fc	00		rp        .byte     0
>62fd	00		ra        .byte     0
>62fe	00 00		pc        .word     0
.6300			pull
.6300			pop
.6300	78		          sei
.6301	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.6302	8d 35 63	          sta  pc        ; save pcl
.6305	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.6306	8d 36 63	          sta  pc+1      ; save pch
.6309	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.630a	a8		          tay            ; set y
.630b	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.630c	aa		          tax            ; set x
.630d	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.630e	8d 34 63	          sta  ra        ; save a
.6311	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.6312	8d 33 63	          sta  rp        ; save rp
.6315	68		          pla            ; stack : zp2l, zp1h, zp1l
.6316	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.6318	68		          pla            ; stack : zp1h, zp1l
.6319	85 fd		          sta  zpage2    ; get zpage2 High byte
.631b	68		          pla            ; stack : zp1l
.631c	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.631e	68		          pla            ; stack :
.631f	85 fb		          sta  zpage1    ; get zpage1 High byte
.6321	ad 36 63	          lda  pc+1      ; get pch
.6324	48		          pha            ; stack : pch
.6325	ad 35 63	          lda  pc
.6328	48		          pha            ; stack : pcl, pch
.6329	ad 33 63	          lda  rp        ; get rp
.632c	48		          pha            ; stack : rp, pcl, pch
.632d	ad 34 63	          lda  ra        ; set ra
.6330	58		          cli
.6331	28		          plp            ; stack : pcl, pch
.6332	60		          rts
>6333	00		rp        .byte     0
>6334	00		ra        .byte     0
>6335	00 00		pc        .word     0

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.6337			blkfill
.6337	20 c1 62	bf0            jsr  push
.633a	20 f5 63	               jsr  savezp1
.633d	84 fc		               sty  zpage1+1
.633f	a0 00		               ldy  #$00
.6341	84 fb		               sty  zpage1
.6343	91 fb		bf1            sta  (zpage1),y
.6345	c8		               iny
.6346	d0 fb		               bne  bf1
.6348	20 04 64	               jsr  restzp1
.634b	20 00 63	               jsr  pop
.634e	60		               rts
.634f			memfill
.634f	20 c1 62	               jsr  push
.6352	20 37 63	mf1            jsr  blkfill
.6355	c8		               iny
.6356	ca		               dex
.6357	d0 f9		               bne  mf1
.6359	20 00 63	               jsr  pop
.635c	60		               rts
.635d			memmove
.635d	20 c1 62	               jsr  push
.6360	ba		               tsx            ; On se crée un pointeur ...
.6361	8a		               txa
.6362	18		               clc
.6363	69 0b		               adc  #11
.6365	a8		               tay
.6366	a2 06		               ldx  #$06
.6368	b9 00 01	nextbyte       lda  $0100,y
.636b	99 b7 63	               sta  words,y
.636e	c8		               iny
.636f	ca		               dex
.6370	d0 f6		               bne  nextbyte
.6372	ad b7 63	               lda  s
.6375	8d 8e 63	               sta  source+1
.6378	ad b8 63	               lda  s+1
.637b	8d 8f 63	               sta  source+2
.637e	ad b9 63	               lda  d
.6381	8d 8b 63	               sta  destin+1
.6384	ad ba 63	               lda  d+1
.6387	8d 8c 63	               sta  destin+2
.638a	ad ff ff	destin         lda  $ffff
.638d	8d ff ff	source         sta  $ffff
.6390	ee 8b 63	               inc  destin+1
.6393	d0 03		               bne  src
.6395	ee 8c 63	               inc  destin+2
.6398	ee 8e 63	src            inc  source+1
.639b	d0 03		               bne  cnt
.639d	ee 8f 63	               inc  source+2
.63a0	ad bb 63	cnt            lda  compte
.63a3	d0 08		               bne  decit
.63a5	ad bc 63	               lda  compte+1
.63a8	f0 09		               beq  fini
.63aa	ce bc 63	               dec  compte+1
.63ad	ce bb 63	decit          dec  compte
.63b0	4c 8a 63	               jmp  destin
.63b3	20 00 63	fini           jsr  pop
.63b6	60		               rts
.63b7			words
>63b7	00 00		s         .word     $0000
>63b9	00 00		d         .word     $0000
>63bb	00 00		compte    .word     $0000
.63bd			decword
.63bd	20 c1 62	               jsr  push
.63c0	86 fd		               stx  zpage2
.63c2	84 fe		               sty  zpage2+1
.63c4	20 00 63	               jsr  pop
.63c7	60		               rts
.63c8			inczp1
.63c8	08		               php
.63c9	e6 fb		               inc  zpage1
.63cb	d0 02		               bne  nopage
.63cd	e6 fc		               inc  zpage1+1
.63cf	28		nopage         plp
.63d0	60		               rts
.63d1			deczp1
.63d1	08		                php
.63d2	48		                pha
.63d3	c6 fb		                dec  zpage1
.63d5	d0 02		                bne  nopage
.63d7	c6 fc		                dec  zpage1+1
.63d9	c6 fb		nopage          dec  zpage1
.63db	68		                pla
.63dc	28		                plp
.63dd	60		                rts
.63de			inczp2
.63de	08		               php
.63df	48		               pha
.63e0	e6 fd		               inc  zpage2
.63e2	d0 02		               bne  nopage
.63e4	e6 fe		               inc  zpage2+1
.63e6	68		nopage         pla
.63e7	28		               plp
.63e8	60		               rts
.63e9			deczp2
.63e9	08		               php
.63ea	48		               pha
.63eb	a5 fd		               lda  zpage2
.63ed	d0 02		               bne  nopage
.63ef	c6 fe		               dec  zpage2+1
.63f1	c6 fd		nopage         dec  zpage2
.63f3	28		               plp
.63f4	60		               rts
.63f5			savezp1
.63f5	08		               php
.63f6	48		               pha
.63f7	a5 fb		               lda  zpage1
.63f9	8d 71 64	               sta  zp1
.63fc	a5 fc		               lda  zpage1+1
.63fe	8d 72 64	               sta  zp1+1
.6401	68		               pla
.6402	28		               plp
.6403	60		               rts
.6404			restzp1
.6404	08		               php
.6405	48		               pha
.6406	ad 71 64	               lda zp1
.6409	85 fb		               sta zpage1
.640b	ad 72 64	               lda zp1+1
.640e	85 fc		               sta zpage1+1
.6410	68		               pla
.6411	28		               plp
.6412	60		               rts
.6413			savezp2
.6413	08		         php
.6414	48		         pha
.6415	a5 fd		         lda zpage2
.6417	8d 73 64	         sta zp2
.641a	a5 fe		         lda zpage2+1
.641c	8d 74 64	         sta zp2+1
.641f	68		         pla
.6420	28		         plp
.6421	60		         rts
.6422			restzp2
.6422	08		                php
.6423	48		                pha
.6424	ad 73 64	                lda  zp2
.6427	85 fd		                sta  zpage2
.6429	ad 74 64	                lda  zp2+1
.642c	85 fe		                sta  zpage2+1
.642e	68		                pla
.642f	28		                plp
.6430	60		                rts
.6431			xy2addr
.6431	08		                php
.6432	48		                pha
.6433	8a		                txa
.6434	48		                pha
.6435	98		                tya
.6436	48		                pha
.6437	ad 6c 64	                lda     addr1+1
.643a	8d 6e 64	                sta     addr2+1
.643d	ad 6b 64	                lda     addr1
.6440	8d 6d 64	                sta     addr2
.6443	c0 00		                cpy     #$00
.6445	f0 0f		                beq     addx
.6447	18		moreline        clc
.6448	6d 6a 64	                adc     ymult
.644b	90 03		                bcc     norepy
.644d	ee 6e 64	                inc     addr2+1
.6450	8d 6d 64	norepy          sta     addr2
.6453	88		                dey
.6454	d0 f1		                bne     moreline
.6456	8a		addx            txa
.6457	18		                clc
.6458	6d 6d 64	                adc     addr2
.645b	90 03		                bcc     thatsit
.645d	ee 6e 64	                inc     addr2+1
.6460	8d 6d 64	thatsit         sta     addr2
.6463	68		                pla
.6464	a8		                tay
.6465	68		                pla
.6466	aa		                tax
.6467	68		                pla
.6468	28		                plp
.6469	60		                rts
>646a	28		ymult          .byte     40
>646b	00 00		addr1          .word     $0000
>646d	00 00		addr2          .word     $0000
>646f	00 00		bytecnt        .word     $0000
>6471	00 00		zp1        .word   $0000
>6473	00 00		zp2        .word   $0000

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>6475	01		a2hexcol       .byte     1              ; pour aputscxy
>6476	00		a2hexbkcol     .byte     %00000000
.6477			a2hexpos
>6477	00		a2hexpx        .byte     0              ; pour aputsxy
>6478	00		a2hexpy        .byte     0
>6479	24		a2hexprefix    .byte     "$"            ; pour aputs
>647a	00 00		a2hexstr       .word     $00
>647c	00 00		               .word     $00
>647e	00		               .byte     0              ; 0 end string
.647f			putahexfmtxy
.647f	20 c1 62	               jsr  push
.6482	20 ce 64	               jsr  a2hex
.6485	ae 77 64	               ldx  a2hexpx
.6488	ac 78 64	               ldy  a2hexpy
.648b	20 ea 61	               jsr  gotoxy
.648e	a2 79		               ldx  #<a2hexprefix
.6490	a0 64		               ldy  #>a2hexprefix
.6492	20 d0 61	               jsr  puts
.6495	20 00 63	               jsr  pop
.6498	60		               rts
.6499			putahexfmt
.6499	20 c1 62	               jsr  push
.649c	20 ce 64	               jsr  a2hex
.649f	a2 79		               ldx  #<a2hexprefix
.64a1	a0 64		               ldy  #>a2hexprefix
.64a3	20 d0 61	               jsr  puts
.64a6	20 00 63	               jsr  pop
.64a9	60		               rts
.64aa			putahex
.64aa	20 c1 62	               jsr  push
.64ad	20 ce 64	               jsr  a2hex
.64b0	a2 7a		               ldx  #<a2hexstr
.64b2	a0 64		               ldy  #>a2hexstr
.64b4	20 d0 61	               jsr  puts
.64b7	20 00 63	               jsr  pop
.64ba	60		               rts
.64bb			nib2hex
.64bb	08		               php
.64bc	29 0f		               and  #$0f
.64be	f8		               sed
.64bf	18		               clc
.64c0	69 90		               adc  #$90
.64c2	69 40		               adc  #$40
.64c4	d8		               cld
.64c5	28		               plp
.64c6	60		               rts
.64c7			lsra4bits
.64c7	08		               php
.64c8	4a		               lsr
.64c9	4a		               lsr
.64ca	4a		               lsr
.64cb	4a		               lsr
.64cc	28		               plp
.64cd	60		               rts
.64ce			a2hex
.64ce	08		               php
.64cf	48		               pha
.64d0	48		               pha
.64d1	20 c7 64	               jsr  lsra4bits
.64d4	20 bb 64	               jsr  nib2hex
.64d7	8d 7a 64	               sta  a2hexstr
.64da	68		               pla
.64db	20 bb 64	               jsr  nib2hex
.64de	8d 7b 64	               sta  a2hexstr+1
.64e1	a9 00		               lda  #$00                ; set end of string
.64e3	8d 7c 64	               sta  a2hexstr+2
.64e6	68		               pla
.64e7	28		               plp
.64e8	60		               rts
.64e9			xy2hex
.64e9	20 c1 62	               jsr  push
.64ec	20 ce 64	               jsr  a2hex
.64ef	8a		               txa
.64f0	48		               pha
.64f1	20 c7 64	               jsr  lsra4bits
.64f4	20 bb 64	               jsr  nib2hex
.64f7	8d 7a 64	               sta  a2hexstr
.64fa	68		               pla
.64fb	20 bb 64	               jsr  nib2hex
.64fe	8d 7b 64	               sta  a2hexstr+1
.6501	98		               tya
.6502	48		               pha
.6503	20 c7 64	               jsr  lsra4bits
.6506	20 bb 64	               jsr  nib2hex
.6509	8d 7c 64	               sta  a2hexstr+2
.650c	68		               pla
.650d	20 bb 64	               jsr  nib2hex
.6510	8d 7d 64	               sta  a2hexstr+3
.6513	a9 00		               lda  #$00                ; 0 ended string
.6515	8d 7e 64	               sta  a2hexstr+4
.6518	20 00 63	               jsr  pop
.651b			atobin
.651b	20 c1 62	               jsr     push
.651e	a2 08		               ldx     #8
.6520	a0 00		               ldy     #0
.6522	2a		nextbit        rol
.6523	48		               pha
.6524	69 00		               adc     #$00
.6526	29 01		               and     #$01
.6528	20 bb 64	               jsr     nib2hex
.652b	99 3c 65	               sta     abin,y
.652e	68		               pla
.652f	c8		               iny
.6530	ca		               dex
.6531	d0 ef		               bne     nextbit
.6533	a9 00		               lda     #0
.6535	99 3c 65	               sta     abin,y
.6538	20 00 63	               jsr     pull
.653b	60		               rts
>653c	30 30 30 30	abin           .null   "00000000"
>6540	30 30 30 30 00
.6545			putabin
.6545	20 1b 65	               jsr     atobin
.6548	20 c1 62	               jsr     push
.654b	a2 3c		               ldx     #<abin
.654d	a0 65		               ldy     #>abin
.654f	20 d0 61	               jsr     puts
.6552	20 00 63	               jsr     pop
.6555	60		               rts
.6556			putabinfmt
.6556	08		               php
.6557	48		               pha
.6558	a9 25		               lda     #"%"
.655a	20 ca 61	               jsr     putch
.655d	68		               pla
.655e	20 45 65	               jsr     putabin
.6561	28		               plp
.6562	60		               rts
.6563			putabinxy
.6563	20 ea 61	               jsr     gotoxy
.6566	20 45 65	               jsr     putabin
.6569	60		               rts
.656a			putabinfmtxy
.656a	20 ea 61	               jsr     gotoxy
.656d	20 56 65	               jsr     putabinfmt
.6570	60		               rts

;******  Return to file: irqtune3channel.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

.6571			waitstop
.6571	20 c1 62	                jsr     push
.6574	20 ed f6	wait            jsr     k_stop
.6577	d0 fb		                bne     wait
.6579	20 00 63	                jsr     pop
.657c	60		                rts
.657d			anykey
.657d	08		                php
.657e	48		                pha
.657f	a5 cb		nokey           lda 203
.6581	c9 40		                cmp #64
.6583	f0 fa		                beq nokey
.6585	68		                pla
.6586	28		                plp
.6587	60		                rts
.6588			getkey
.6588	20 c1 62	                jsr     push
.658b	20 cf ff	again           jsr     chrin
.658e	4c 8b 65	                jmp     again
.6591	20 00 63	                jsr     pop
.6594	60		                rts
.6595			waitkey
.6595	20 c1 62	                jsr     push
.6598	8d ad 65	                sta     thekey
.659b	20 e4 ff	nope            jsr     getin
.659e	20 d2 ff	                jsr     chrout
.65a1	cd ad 65	                cmp     thekey
.65a4	d0 f5		                bne     nope
.65a6	20 d2 ff	                jsr     chrout
.65a9	20 00 63	                jsr     pop
.65ac	60		                rts
>65ad	00		thekey          .byte   0
.65ae			waitspace
.65ae	20 c1 62	                jsr     push
.65b1	a9 7f		wait            lda     #$7f  ;%01111111
.65b3	8d 00 dc	                sta     $dc00
.65b6	ad 01 dc	                lda     $dc01
.65b9	29 10		                and     #$10  ;mask %00010000
.65bb	d0 f4		                bne     wait
.65bd	20 00 63	                jsr     pop
.65c0			waitsstop
.65c0	20 c1 62	                jsr     push
.65c3	20 ed f6	wait            jsr     k_stop  ;%01111111
.65c6	d0 fb		                bne     wait
.65c8	20 00 63	                jsr     pop
.65cb			waitreturn
.65cb	20 c1 62	                jsr     push
.65ce	ad ea 65	                lda     thecount
.65d1	8d 00 04	                sta     scrnram
.65d4	a9 02		                lda     #$02
.65d6	8d 00 d8	                sta     colorram
.65d9	20 e4 ff	nope            jsr     getin
.65dc	20 d2 ff	                jsr     chrout
.65df	c9 0d		                cmp     #$0d
.65e1	d0 f6		                bne     nope
.65e3	ee ea 65	                inc     thecount
.65e6	20 00 63	                jsr     pop
.65e9	60		                rts
>65ea	01		thecount        .byte   $01

;******  Return to file: irqtune3channel.asm


;******  End of listing

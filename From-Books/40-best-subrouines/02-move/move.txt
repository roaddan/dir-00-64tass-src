
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L move.txt -o move.prg move.asm
; Sat Mar 25 15:31:16 2023

;Offset	;Hex		;Source

;******  Processing input file: move.asm

="20230321-080800-a"	Version = "20230321-080800-a"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: move.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: move.asm

.080d			main
.080d	20 4c 0a	                jsr scrmaninit
.0810	20 14 08	                jsr help
.0813	60		                rts
.0814			help
.0814	20 6d 0a	                jsr cls
.0817	a2 2d		                ldx  #<header
.0819	a0 08		                ldy  #>header
.081b	20 82 0a	                jsr  puts
.081e	a2 13		                ldx  #<shortcuts
.0820	a0 09		                ldy  #>shortcuts
.0822	20 82 0a	                jsr  puts
.0825	a2 90		                ldx  #<helptext
.0827	a0 09		                ldy  #>helptext
.0829	20 82 0a	                jsr  puts
.082c	60		                rts
.082d			header
>082d	20 20 20 20	                .text          "     40 BEST MACHINE CODE ROUTINES"
>0831	20 34 30 20 c2 c5 d3 d4 20 cd c1 c3 c8 c9 ce c5
>0841	20 c3 cf c4 c5 20 d2 cf d5 d4 c9 ce c5 d3
>084f	0d		                .byte   $0d
>0850	20 20 20 20	                .text          "          FOR THE COMMODORE 64"
>0854	20 20 20 20 20 20 c6 cf d2 20 d4 c8 c5 20 c3 cf
>0864	cd cd cf c4 cf d2 c5 20 36 34
>086e	0d		                .byte   $0d
>086f	20 20 20 20	                .text          "       Book by Mark Greenshields."
>0873	20 20 20 c2 4f 4f 4b 20 42 59 20 cd 41 52 4b 20
>0883	c7 52 45 45 4e 53 48 49 45 4c 44 53 2e
>0890	0d 0d		                .byte   $0d,$0d
>0892	20 20 20 20	                .text          "              MOVE (p20)"
>0896	20 20 20 20 20 20 20 20 20 20 cd cf d6 c5 20 28
>08a6	50 32 30 29
>08aa	0d		                .byte   $0d
>08ab	20 20 20 20	                .text          "       (c) 1979 Brad Templeton"
>08af	20 20 20 28 43 29 20 31 39 37 39 20 c2 52 41 44
>08bf	20 d4 45 4d 50 4c 45 54 4f 4e
>08c9	0d 0d		                .byte   $0d,$0d
>08cb	20 20 20 20	                .text          "     Programmed by Daniel Lafrance."
>08cf	20 d0 52 4f 47 52 41 4d 4d 45 44 20 42 59 20 c4
>08df	41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e
>08ee	0d		                .byte   $0d
>08ef	20 20 20 20	                .text   format("       Version: %s.",Version)
>08f3	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 33
>0903	30 33 32 31 2d 30 38 30 38 30 30 2d 41 2e
>0911	0d 00		                .byte   $0d,0
>0913	0d		shortcuts       .byte   $0d
>0914	20 2d 2d 2d	                .text          " -------- S H O R T - C U T S ---------"
>0918	2d 2d 2d 2d 2d 20 d3 20 c8 20 cf 20 d2 20 d4 20
>0928	2d 20 c3 20 d5 20 d4 20 d3 20 2d 2d 2d 2d 2d 2d
>0938	2d 2d 2d
>093b	0d		                .byte   $0d
>093c	20 52 55 4e	                .text   format(" run=SYS%5d, help=SYS%5d",main, help)
>0940	3d d3 d9 d3 20 32 30 36 31 2c 20 48 45 4c 50 3d
>0950	d3 d9 d3 20 32 30 36 38
>0958	0d		                .byte   $0d
>0959	20 43 4c 53	                .text   format(" cls=SYS%5d",cls)
>095d	3d d3 d9 d3 20 32 36 36 39
>0966	0d		                .byte   $0d
>0967	20 2d 2d 2d	                .text          " --------------------------------------"
>096b	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>097b	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>098b	2d 2d 2d
>098e	0d 00		                .byte   $0d,0
>0990	0d		helptext        .byte   $0d
>0991	20 20 cd cf	                .text   format("  MOVE  : SYS%5d,start,end,dest.",move)
>0995	d6 c5 20 20 3a 20 d3 d9 d3 20 32 35 32 30 2c 53
>09a5	54 41 52 54 2c 45 4e 44 2c 44 45 53 54 2e
>09b3	0d		                .byte   $0d
>09b4	20 20 20 20	                .text   format("     ex.: SYS%5d,1024,2024,55296",move)
>09b8	20 45 58 2e 3a 20 d3 d9 d3 20 32 35 32 30 2c 31
>09c8	30 32 34 2c 32 30 32 34 2c 35 35 32 39 36
>09d6	0d 00		                .byte   $0d,0
.09d8			move
.09d8	20 fd ae	                jsr b_chk4comma ;$aefd
.09db	20 8a ad	                jsr b_frmnum    ;$ad8a
.09de	20 f7 b7	                jsr b_getadr    ;$b7f7
.09e1	a5 14		                lda linnum
.09e3	8d 46 0a	                sta temp
.09e6	a5 15		                lda linnum+1
.09e8	8d 47 0a	                sta temp+1
.09eb	20 fd ae	                jsr b_chk4comma ;$aefd
.09ee	20 8a ad	                jsr b_frmnum    ;$ad8a
.09f1	20 f7 b7	                jsr b_getadr    ;$b7f7
.09f4	a5 14		                lda linnum
.09f6	8d 48 0a	                sta temp+2
.09f9	a5 15		                lda linnum+1
.09fb	8d 49 0a	                sta temp+3
.09fe	20 fd ae	                jsr b_chk4comma ;$aefd
.0a01	20 8a ad	                jsr b_frmnum    ;$ad8a
.0a04	20 f7 b7	                jsr b_getadr    ;$b7f7
.0a07	a5 14		                lda linnum
.0a09	8d 4a 0a	                sta temp+4
.0a0c	a5 15		                lda linnum+1
.0a0e	8d 4b 0a	                sta temp+5
.0a11	ad 46 0a	                lda temp
.0a14	85 fb		                sta zpage1
.0a16	ad 47 0a	                lda temp+1
.0a19	85 fc		                sta zpage1+1
.0a1b	ad 4a 0a	                lda temp+4
.0a1e	85 fd		                sta zpage2
.0a20	ad 4b 0a	                lda temp+5
.0a23	85 fe		                sta zpage2+1
.0a25	a0 00		                ldy #$00
.0a27	b1 fb		loop            lda (zpage1),y
.0a29	91 fd		                sta (zpage2),y
.0a2b	20 7a 0c	                jsr inczp1
.0a2e	20 90 0c	                jsr inczp2
.0a31	a5 fb		                lda zpage1
.0a33	cd 48 0a	                cmp temp+2
.0a36	f0 03		                beq check
.0a38	4c 27 0a	                jmp loop
.0a3b	a5 fc		check           lda zpage1+1
.0a3d	cd 49 0a	                cmp temp+3
.0a40	f0 03		                beq finish
.0a42	4c 27 0a	                jmp loop
.0a45	60		finish          rts
>0a46	00 00 00 00	temp            .byte 0,0,0,0,0,0
>0a4a	00 00

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$90			kiostatus       =       $90       ; Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7       ; Current filename length (byte)
=$b9			cursecadd       =       $b9       ; Current secondary address (byte)
=$ba			curdevno        =       $ba       ; Current device number (byte)
=$bb			curfptr         =       $bb       ; Current file pointer (word)
=$fb			zpage1          =       $fb       ; zero page 1 address (word)
=$fd			zpage2          =       $fd       ; zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$0286			bascol          =       $0286     ;basic next chr colscreenram (byte)
=$0400			scrnram         =       $0400     ;video character ram
=$0400			scrram0         =       $0400
=$0500			scrram1         =       $0500
=$0600			scrram2         =       $0600
=$0700			scrram3         =       $0700
=$0801			basicsta        =       $0801     ;basic start address
=$a000			basicrom        =       $a000
=$d400			sid             =       $d400     ;sid base address
=$d800			colorram        =       $d800     ;video color ram
=$d800			colram0         =       $d800
=$d900			colram1         =       $d900
=$da00			colram2         =       $da00
=$db00			colram3         =       $db00
=$dc00			cia1            =       $dc00     ;cia1  base address
=$dd00			cia2            =       $dd00     ;cia2 base address
=$e000			kernalrom       =       $e000
=43			txttab          =       43
=$14			linnum          =       $14
=$c6			ndx             =       $c6     ;Number of character in keyboard buffer
=$033c			tpbuff          =       $033c   ;$033c-$03fb (828-1019)
=$277			kbbuff          =       $277
=$28d			shflag          =       $28d    ;653
=828			tbuffer         =       828
=806			ibsout          =       806
=$ea31			irq             =       $ea31
=$314			cinv            =       $314        ; brk instruction interupt
=$c5			lstx            =       $c5         ;matrix coordinate of last key pressed
=$03			bstop           =       $03      ;stop
=$05			bwhite          =       $05      ;set color white
=$08			block           =       $08      ;lock the charset
=$09			bunlock         =       $09      ;unlock the charset
=$0d			bcarret         =       $0d
=$0e			btext           =       $0e
=$11			bcrsdn          =       $11      ;cursor down 1 line
=$12			brevcol         =       $12
=$13			bhome           =       $13
=$14			bdelete         =       $14
=$1c			bred            =       $1c
=$1d			bcuright        =       $1d
=$1e			bgreen          =       $1e
=$1f			bblue           =       $1f
=$81			borange         =       $81
=$83			blrun           =       $83
=$85			bfkey1          =       $85
=$86			bfkey2          =       $86
=$87			bfkey3          =       $87
=$88			bfkey4          =       $88
=$89			bfkey5          =       $89
=$8a			bfkey6          =       $8a
=$8b			bfkey7          =       $8b
=$8c			bfkey8          =       $8c
=$8d			bcarret1        =       $8d
=$8e			bgraph          =       $8e
=$90			bblack          =       $90
=$91			bcuup           =       $91
=$92			brevoff         =       $92
=$93			bclear          =       $93
=$94			binsert         =       $94
=$95			bbrown          =       $95
=$96			bltred          =       $96
=$97			bdkgrey         =       $97
=$98			bmdgrey         =       $98
=$99			bltgreen        =       $99
=$9a			bltblue         =       $9a
=$9b			bltgrey         =       $9b
=$9c			bmagenta        =       $9c
=$9d			bculeft         =       $9d
=$9e			byellow         =       $9e
=$9f			bcyan           =       $9f
=$0286			carcol          =       $0286
=$030a			ieval           =       $030a
=$73			chrget          =       $73
=$79			chrgot          =       $79
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.0a4c			libtart

;******  Return to file: move.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col= vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: move.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=$a3bb			b_opentxtspc  = $a3bb ;  1) Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ;  2) Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ;  3) ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ;  4) Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ;  5) Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ;  6) Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ;  7) Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ;  8) Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ;  9) Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; 10) Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; 11) Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; 12) Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; 13) Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; 14) Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; 15) Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; 17) Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; 18) Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; 19) Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; 20) Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; 21) Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; 22) Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; 23) Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; 24) Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; 25) Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; 26) Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; 27) Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; 28) check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; 29) check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; 30) send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; 31) find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; 32) Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; 33) Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; 34) Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; 35) Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; 36) Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; 37) Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; 38) Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; 39) Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; 40) Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; 41) Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; 42) Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; 43) Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; 44) Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; 45) Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; 46) Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; 47) Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; 48) Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; 49) Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; 50) Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: move.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0a4c			scrmaninit
.0a4c	20 73 0b	               jsr  push
.0a4f	a9 06		               lda  #vbleu
.0a51	8d 21 d0	               sta  vicbackcol
.0a54	a9 05		               lda  #vvert
.0a56	8d 20 d0	               sta  vicbordcol
.0a59	a9 01		               lda  #vblanc
.0a5b	8d 86 02	               sta  bascol
.0a5e	ad 00 04	               lda  scrnram
.0a61	29 fd		               and  #%11111101
.0a63	8d 00 04	               sta  scrnram
.0a66	20 6d 0a	               jsr  cls
.0a69	20 b2 0b	               jsr  pop
.0a6c	60		               rts
.0a6d			cls
.0a6d	08		               php
.0a6e	48		               pha
.0a6f	a9 93		               lda  #$93
.0a71	20 7c 0a	               jsr  putch
.0a74	a9 0e		               lda  #$0e
.0a76	20 7c 0a	               jsr  putch
.0a79	68		               pla
.0a7a	28		               plp
.0a7b	60		               rts
.0a7c			putch
.0a7c	08		               php
.0a7d	20 d2 ff	               jsr  $ffd2
.0a80	28		               plp
.0a81	60		               rts
.0a82			puts
.0a82	20 73 0b	               jsr  push
.0a85	86 fb		               stx  zpage1
.0a87	84 fc		               sty  zpage1+1
.0a89	a0 00		               ldy  #0
.0a8b	b1 fb		next           lda  (zpage1),y
.0a8d	f0 09		               beq  exit
.0a8f	20 7c 0a	               jsr  putch
.0a92	20 7a 0c	               jsr  inczp1
.0a95	4c 8b 0a	               jmp  next
.0a98	20 b2 0b	exit           jsr  pop
.0a9b	60		               rts
.0a9c			gotoxy
.0a9c	08		               php
.0a9d	18		               clc
.0a9e	8a		               txa
.0a9f	48		               pha
.0aa0	98		               tya
.0aa1	aa		               tax
.0aa2	68		               pla
.0aa3	a8		               tay
.0aa4	20 f0 ff	               jsr  kplot
.0aa7	28		               plp
.0aa8	60		               rts
.0aa9			cursor
=$0286			bascol    =    $0286
.0aa9	08		               php
.0aaa	48		               pha
.0aab	90 12		               bcc  restore
.0aad	20 f0 ff	               jsr  kplot
.0ab0	8c d1 0a	               sty  cx
.0ab3	8e d2 0a	               stx  cy
.0ab6	ad 86 02	               lda  bascol
.0ab9	8d d3 0a	               sta  bcol
.0abc	4c ce 0a	               jmp  out
.0abf	ae d2 0a	restore        ldx  cy
.0ac2	ac d1 0a	               ldy  cx
.0ac5	20 f0 ff	               jsr  kplot
.0ac8	ad d3 0a	               lda  bcol
.0acb	8d 86 02	               sta  bascol
.0ace	68		out            pla
.0acf	28		               plp
.0ad0	60		               rts
>0ad1	00		cx   .byte     $00
>0ad2	00		cy   .byte     $00
>0ad3	00		bcol .byte     $00
.0ad4			cursave
.0ad4	08		               php
.0ad5	38		               sec
.0ad6	20 a9 0a	               jsr  cursor
.0ad9	28		               plp
.0ada	60		               rts
.0adb			curput
.0adb	08		               php
.0adc	18		               clc
.0add	20 a9 0a	               jsr  cursor
.0ae0	28		               plp
.0ae1	60		               rts
.0ae2			putsxy
.0ae2	20 73 0b	               jsr  push
.0ae5	86 fb		               stx  zpage1
.0ae7	84 fc		               sty  zpage1+1
.0ae9	a0 00		               ldy  #$00
.0aeb	b1 fb		               lda  (zpage1),y
.0aed	aa		               tax
.0aee	20 7a 0c	               jsr  inczp1
.0af1	b1 fb		               lda  (zpage1),y
.0af3	a8		               tay
.0af4	20 9c 0a	               jsr  gotoxy
.0af7	20 7a 0c	               jsr  inczp1
.0afa	a6 fb		               ldx  zpage1
.0afc	a4 fc		               ldy  zpage1+1
.0afe	20 82 0a	               jsr  puts
.0b01	20 b2 0b	               jsr  pop
.0b04	60		               rts
>0b05	00 00		straddr   .word     $00
>0b07	00		px        .byte     $00
>0b08	00		py        .byte     $00
>0b09	00 00		zp1       .word     $00
.0b0b			putscxy
.0b0b	20 73 0b	               jsr  push
.0b0e	84 fc		               sty  zpage1+1
.0b10	86 fb		               stx  zpage1
.0b12	ad 86 02	               lda  bascol
.0b15	8d 35 0b	               sta  bc
.0b18	a0 00		               ldy #$00
.0b1a	b1 fb		               lda  (zpage1),y
.0b1c	8d 86 02	               sta  bascol
.0b1f	20 7a 0c	               jsr  inczp1
.0b22	a6 fb		               ldx  zpage1
.0b24	a4 fc		               ldy  zpage1+1
.0b26	20 e2 0a	               jsr  putsxy
.0b29	ad 35 0b	               lda  bc
.0b2c	8d 86 02	               sta  bascol
.0b2f	20 b2 0b	               jsr  pop
.0b32	60		               rts
>0b33	00 00		straddr  .word      $00
>0b35	00		bc       .byte      $00
>0b36	00 00		zp1      .word      $00
.0b38			putrahex
.0b38	08		               php
.0b39	48		               pha
.0b3a	20 80 0d	               jsr  a2hex
.0b3d	a9 2c		               lda  #<a2hexstr
.0b3f	a0 0d		               ldy  #>a2hexstr
.0b41	20 82 0a	               jsr  puts
.0b44	68		               pla
.0b45	28		               plp
.0b46	60		               rts
.0b47			kputrahexxy
.0b47			bputrahexxy
.0b47			putrahexxy
.0b47	08		               php
.0b48	20 80 0d	               jsr  a2hex
.0b4b	a9 29		               lda  #<a2hexpos
.0b4d	a0 0d		               ldy  #>a2hexpos
.0b4f	20 e2 0a	               jsr  putsxy
.0b52	68		               pla
.0b53	28		               plp
.0b54	60		               rts
.0b55			putrahexcxy
.0b55	08		               php
.0b56	20 80 0d	               jsr  a2hex
.0b59	a9 29		               lda  #<a2hexpos
.0b5b	a0 0d		               ldy  #>a2hexpos
.0b5d	20 0b 0b	               jsr  putscxy
.0b60	68		               pla
.0b61	28		               plp
.0b62	60		               rts
.0b63			setinverse
.0b63	48		               pha
.0b64	a9 12		               lda  #$12
.0b66	20 d2 ff	               jsr  $ffd2
.0b69	68		               pla
.0b6a	60		               rts
.0b6b			clrinverse
.0b6b	48		               pha
.0b6c	a9 92		               lda  #$92
.0b6e	20 d2 ff	               jsr  $ffd2
.0b71	68		               pla
.0b72	60		               rts

;******  Return to file: move.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.0b73			push
.0b73	08		          php            ; stack : flg, pcl, pch
.0b74	78		          sei
.0b75	8d af 0b	          sta  ra        ; save a
.0b78	68		          pla            ; stack : pcl, pch
.0b79	8d ae 0b	          sta  rp        ; save rp
.0b7c	68		          pla            ; stack : pch
.0b7d	8d b0 0b	          sta  pc        ; save pcl
.0b80	68		          pla            ; stack : -
.0b81	8d b1 0b	          sta  pc+1      ; save pch
.0b84	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0b86	48		          pha            ; stack : zp1l
.0b87	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0b89	48		          pha            ; stack : zp1h, zp1l
.0b8a	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0b8c	48		          pha            ; stack : zp2l, zp1h, zp1l
.0b8d	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0b8f	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0b90	ad ae 0b	          lda  rp        ; get rp
.0b93	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0b94	ad af 0b	          lda  ra        ; get a
.0b97	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0b98	8a		          txa            ; get x
.0b99	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b9a	98		          tya            ; get y
.0b9b	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b9c	ad b1 0b	          lda  pc+1      ; get pch
.0b9f	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ba0	ad b0 0b	          lda  pc        ; get pcl
.0ba3	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ba4	ad ae 0b	          lda  rp        ; get rp
.0ba7	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ba8	ad af 0b	          lda  ra        ; get a
.0bab	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0bac	58		          cli
.0bad	60		          rts
>0bae	00		rp        .byte     0
>0baf	00		ra        .byte     0
>0bb0	00 00		pc        .word     0
.0bb2			pull
.0bb2			pop
.0bb2	78		          sei
.0bb3	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0bb4	8d e7 0b	          sta  pc        ; save pcl
.0bb7	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0bb8	8d e8 0b	          sta  pc+1      ; save pch
.0bbb	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0bbc	a8		          tay            ; set y
.0bbd	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0bbe	aa		          tax            ; set x
.0bbf	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0bc0	8d e6 0b	          sta  ra        ; save a
.0bc3	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0bc4	8d e5 0b	          sta  rp        ; save rp
.0bc7	68		          pla            ; stack : zp2l, zp1h, zp1l
.0bc8	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0bca	68		          pla            ; stack : zp1h, zp1l
.0bcb	85 fd		          sta  zpage2    ; get zpage2 High byte
.0bcd	68		          pla            ; stack : zp1l
.0bce	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0bd0	68		          pla            ; stack :
.0bd1	85 fb		          sta  zpage1    ; get zpage1 High byte
.0bd3	ad e8 0b	          lda  pc+1      ; get pch
.0bd6	48		          pha            ; stack : pch
.0bd7	ad e7 0b	          lda  pc
.0bda	48		          pha            ; stack : pcl, pch
.0bdb	ad e5 0b	          lda  rp        ; get rp
.0bde	48		          pha            ; stack : rp, pcl, pch
.0bdf	ad e6 0b	          lda  ra        ; set ra
.0be2	58		          cli
.0be3	28		          plp            ; stack : pcl, pch
.0be4	60		          rts
>0be5	00		rp        .byte     0
>0be6	00		ra        .byte     0
>0be7	00 00		pc        .word     0

;******  Return to file: move.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.0be9			blkfill
.0be9	20 73 0b	bf0            jsr  push
.0bec	20 a7 0c	               jsr  savezp1
.0bef	84 fc		               sty  zpage1+1
.0bf1	a0 00		               ldy  #$00
.0bf3	84 fb		               sty  zpage1
.0bf5	91 fb		bf1            sta  (zpage1),y
.0bf7	c8		               iny
.0bf8	d0 fb		               bne  bf1
.0bfa	20 b6 0c	               jsr  restzp1
.0bfd	20 b2 0b	               jsr  pop
.0c00	60		               rts
.0c01			memfill
.0c01	20 73 0b	               jsr  push
.0c04	20 e9 0b	mf1            jsr  blkfill
.0c07	c8		               iny
.0c08	ca		               dex
.0c09	d0 f9		               bne  mf1
.0c0b	20 b2 0b	               jsr  pop
.0c0e	60		               rts
.0c0f			memmove
.0c0f	20 73 0b	               jsr  push
.0c12	ba		               tsx            ; On se crée un pointeur ...
.0c13	8a		               txa
.0c14	18		               clc
.0c15	69 0b		               adc  #11
.0c17	a8		               tay
.0c18	a2 06		               ldx  #$06
.0c1a	b9 00 01	nextbyte       lda  $0100,y
.0c1d	99 69 0c	               sta  words,y
.0c20	c8		               iny
.0c21	ca		               dex
.0c22	d0 f6		               bne  nextbyte
.0c24	ad 69 0c	               lda  s
.0c27	8d 40 0c	               sta  source+1
.0c2a	ad 6a 0c	               lda  s+1
.0c2d	8d 41 0c	               sta  source+2
.0c30	ad 6b 0c	               lda  d
.0c33	8d 3d 0c	               sta  destin+1
.0c36	ad 6c 0c	               lda  d+1
.0c39	8d 3e 0c	               sta  destin+2
.0c3c	ad ff ff	destin         lda  $ffff
.0c3f	8d ff ff	source         sta  $ffff
.0c42	ee 3d 0c	               inc  destin+1
.0c45	d0 03		               bne  src
.0c47	ee 3e 0c	               inc  destin+2
.0c4a	ee 40 0c	src            inc  source+1
.0c4d	d0 03		               bne  cnt
.0c4f	ee 41 0c	               inc  source+2
.0c52	ad 6d 0c	cnt            lda  compte
.0c55	d0 08		               bne  decit
.0c57	ad 6e 0c	               lda  compte+1
.0c5a	f0 09		               beq  fini
.0c5c	ce 6e 0c	               dec  compte+1
.0c5f	ce 6d 0c	decit          dec  compte
.0c62	4c 3c 0c	               jmp  destin
.0c65	20 b2 0b	fini           jsr  pop
.0c68	60		               rts
.0c69			words
>0c69	00 00		s         .word     $0000
>0c6b	00 00		d         .word     $0000
>0c6d	00 00		compte    .word     $0000
.0c6f			decword
.0c6f	20 73 0b	               jsr  push
.0c72	86 fd		               stx  zpage2
.0c74	84 fe		               sty  zpage2+1
.0c76	20 b2 0b	               jsr  pop
.0c79	60		               rts
.0c7a			inczp1
.0c7a	08		               php
.0c7b	e6 fb		               inc  zpage1
.0c7d	d0 02		               bne  nopage
.0c7f	e6 fc		               inc  zpage1+1
.0c81	28		nopage         plp
.0c82	60		               rts
.0c83			deczp1
.0c83	08		                php
.0c84	48		                pha
.0c85	c6 fb		                dec  zpage1
.0c87	d0 02		                bne  nopage
.0c89	c6 fc		                dec  zpage1+1
.0c8b	c6 fb		nopage          dec  zpage1
.0c8d	68		                pla
.0c8e	28		                plp
.0c8f	60		                rts
.0c90			inczp2
.0c90	08		               php
.0c91	48		               pha
.0c92	e6 fd		               inc  zpage2
.0c94	d0 02		               bne  nopage
.0c96	e6 fe		               inc  zpage2+1
.0c98	68		nopage         pla
.0c99	28		               plp
.0c9a	60		               rts
.0c9b			deczp2
.0c9b	08		               php
.0c9c	48		               pha
.0c9d	a5 fd		               lda  zpage2
.0c9f	d0 02		               bne  nopage
.0ca1	c6 fe		               dec  zpage2+1
.0ca3	c6 fd		nopage         dec  zpage2
.0ca5	28		               plp
.0ca6	60		               rts
.0ca7			savezp1
.0ca7	08		               php
.0ca8	48		               pha
.0ca9	a5 fb		               lda  zpage1
.0cab	8d 23 0d	               sta  zp1
.0cae	a5 fc		               lda  zpage1+1
.0cb0	8d 24 0d	               sta  zp1+1
.0cb3	68		               pla
.0cb4	28		               plp
.0cb5	60		               rts
.0cb6			restzp1
.0cb6	08		               php
.0cb7	48		               pha
.0cb8	ad 23 0d	               lda zp1
.0cbb	85 fb		               sta zpage1
.0cbd	ad 24 0d	               lda zp1+1
.0cc0	85 fc		               sta zpage1+1
.0cc2	68		               pla
.0cc3	28		               plp
.0cc4	60		               rts
.0cc5			savezp2
.0cc5	08		         php
.0cc6	48		         pha
.0cc7	a5 fd		         lda zpage2
.0cc9	8d 25 0d	         sta zp2
.0ccc	a5 fe		         lda zpage2+1
.0cce	8d 26 0d	         sta zp2+1
.0cd1	68		         pla
.0cd2	28		         plp
.0cd3	60		         rts
.0cd4			restzp2
.0cd4	08		                php
.0cd5	48		                pha
.0cd6	ad 25 0d	                lda  zp2
.0cd9	85 fd		                sta  zpage2
.0cdb	ad 26 0d	                lda  zp2+1
.0cde	85 fe		                sta  zpage2+1
.0ce0	68		                pla
.0ce1	28		                plp
.0ce2	60		                rts
.0ce3			xy2addr
.0ce3	08		                php
.0ce4	48		                pha
.0ce5	8a		                txa
.0ce6	48		                pha
.0ce7	98		                tya
.0ce8	48		                pha
.0ce9	ad 1e 0d	                lda     addr1+1
.0cec	8d 20 0d	                sta     addr2+1
.0cef	ad 1d 0d	                lda     addr1
.0cf2	8d 1f 0d	                sta     addr2
.0cf5	c0 00		                cpy     #$00
.0cf7	f0 0f		                beq     addx
.0cf9	18		moreline        clc
.0cfa	6d 1c 0d	                adc     ymult
.0cfd	90 03		                bcc     norepy
.0cff	ee 20 0d	                inc     addr2+1
.0d02	8d 1f 0d	norepy          sta     addr2
.0d05	88		                dey
.0d06	d0 f1		                bne     moreline
.0d08	8a		addx            txa
.0d09	18		                clc
.0d0a	6d 1f 0d	                adc     addr2
.0d0d	90 03		                bcc     thatsit
.0d0f	ee 20 0d	                inc     addr2+1
.0d12	8d 1f 0d	thatsit         sta     addr2
.0d15	68		                pla
.0d16	a8		                tay
.0d17	68		                pla
.0d18	aa		                tax
.0d19	68		                pla
.0d1a	28		                plp
.0d1b	60		                rts
>0d1c	28		ymult          .byte     40
>0d1d	00 00		addr1          .word     $0000
>0d1f	00 00		addr2          .word     $0000
>0d21	00 00		bytecnt        .word     $0000
>0d23	00 00		zp1        .word   $0000
>0d25	00 00		zp2        .word   $0000

;******  Return to file: move.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>0d27	01		a2hexcol       .byte     1              ; pour aputscxy
>0d28	00		a2hexbkcol     .byte     %00000000
.0d29			a2hexpos
>0d29	00		a2hexpx        .byte     0              ; pour aputsxy
>0d2a	00		a2hexpy        .byte     0
>0d2b	24		a2hexprefix    .byte     "$"            ; pour aputs
>0d2c	00 00		a2hexstr       .word     $00
>0d2e	00 00		               .word     $00
>0d30	00		               .byte     0              ; 0 end string
.0d31			putahexfmtxy
.0d31	20 73 0b	               jsr  push
.0d34	20 80 0d	               jsr  a2hex
.0d37	ae 29 0d	               ldx  a2hexpx
.0d3a	ac 2a 0d	               ldy  a2hexpy
.0d3d	20 9c 0a	               jsr  gotoxy
.0d40	a2 2b		               ldx  #<a2hexprefix
.0d42	a0 0d		               ldy  #>a2hexprefix
.0d44	20 82 0a	               jsr  puts
.0d47	20 b2 0b	               jsr  pop
.0d4a	60		               rts
.0d4b			putahexfmt
.0d4b	20 73 0b	               jsr  push
.0d4e	20 80 0d	               jsr  a2hex
.0d51	a2 2b		               ldx  #<a2hexprefix
.0d53	a0 0d		               ldy  #>a2hexprefix
.0d55	20 82 0a	               jsr  puts
.0d58	20 b2 0b	               jsr  pop
.0d5b	60		               rts
.0d5c			putahex
.0d5c	20 73 0b	               jsr  push
.0d5f	20 80 0d	               jsr  a2hex
.0d62	a2 2c		               ldx  #<a2hexstr
.0d64	a0 0d		               ldy  #>a2hexstr
.0d66	20 82 0a	               jsr  puts
.0d69	20 b2 0b	               jsr  pop
.0d6c	60		               rts
.0d6d			nib2hex
.0d6d	08		               php
.0d6e	29 0f		               and  #$0f
.0d70	f8		               sed
.0d71	18		               clc
.0d72	69 90		               adc  #$90
.0d74	69 40		               adc  #$40
.0d76	d8		               cld
.0d77	28		               plp
.0d78	60		               rts
.0d79			lsra4bits
.0d79	08		               php
.0d7a	4a		               lsr
.0d7b	4a		               lsr
.0d7c	4a		               lsr
.0d7d	4a		               lsr
.0d7e	28		               plp
.0d7f	60		               rts
.0d80			a2hex
.0d80	08		               php
.0d81	48		               pha
.0d82	48		               pha
.0d83	20 79 0d	               jsr  lsra4bits
.0d86	20 6d 0d	               jsr  nib2hex
.0d89	8d 2c 0d	               sta  a2hexstr
.0d8c	68		               pla
.0d8d	20 6d 0d	               jsr  nib2hex
.0d90	8d 2d 0d	               sta  a2hexstr+1
.0d93	a9 00		               lda  #$00                ; set end of string
.0d95	8d 2e 0d	               sta  a2hexstr+2
.0d98	68		               pla
.0d99	28		               plp
.0d9a	60		               rts
.0d9b			xy2hex
.0d9b	20 73 0b	               jsr  push
.0d9e	20 80 0d	               jsr  a2hex
.0da1	8a		               txa
.0da2	48		               pha
.0da3	20 79 0d	               jsr  lsra4bits
.0da6	20 6d 0d	               jsr  nib2hex
.0da9	8d 2c 0d	               sta  a2hexstr
.0dac	68		               pla
.0dad	20 6d 0d	               jsr  nib2hex
.0db0	8d 2d 0d	               sta  a2hexstr+1
.0db3	98		               tya
.0db4	48		               pha
.0db5	20 79 0d	               jsr  lsra4bits
.0db8	20 6d 0d	               jsr  nib2hex
.0dbb	8d 2e 0d	               sta  a2hexstr+2
.0dbe	68		               pla
.0dbf	20 6d 0d	               jsr  nib2hex
.0dc2	8d 2f 0d	               sta  a2hexstr+3
.0dc5	a9 00		               lda  #$00                ; 0 ended string
.0dc7	8d 30 0d	               sta  a2hexstr+4
.0dca	20 b2 0b	               jsr  pop
.0dcd			atobin
.0dcd	20 73 0b	               jsr     push
.0dd0	a2 08		               ldx     #8
.0dd2	a0 00		               ldy     #0
.0dd4	2a		nextbit        rol
.0dd5	48		               pha
.0dd6	69 00		               adc     #$00
.0dd8	29 01		               and     #$01
.0dda	20 6d 0d	               jsr     nib2hex
.0ddd	99 ee 0d	               sta     abin,y
.0de0	68		               pla
.0de1	c8		               iny
.0de2	ca		               dex
.0de3	d0 ef		               bne     nextbit
.0de5	a9 00		               lda     #0
.0de7	99 ee 0d	               sta     abin,y
.0dea	20 b2 0b	               jsr     pull
.0ded	60		               rts
>0dee	30 30 30 30	abin           .null   "00000000"
>0df2	30 30 30 30 00
.0df7			putabin
.0df7	20 cd 0d	               jsr     atobin
.0dfa	20 73 0b	               jsr     push
.0dfd	a2 ee		               ldx     #<abin
.0dff	a0 0d		               ldy     #>abin
.0e01	20 82 0a	               jsr     puts
.0e04	20 b2 0b	               jsr     pop
.0e07	60		               rts
.0e08			putabinfmt
.0e08	08		               php
.0e09	48		               pha
.0e0a	a9 25		               lda     #"%"
.0e0c	20 7c 0a	               jsr     putch
.0e0f	68		               pla
.0e10	20 f7 0d	               jsr     putabin
.0e13	28		               plp
.0e14	60		               rts
.0e15			putabinxy
.0e15	20 9c 0a	               jsr     gotoxy
.0e18	20 f7 0d	               jsr     putabin
.0e1b	60		               rts
.0e1c			putabinfmtxy
.0e1c	20 9c 0a	               jsr     gotoxy
.0e1f	20 08 0e	               jsr     putabinfmt
.0e22	60		               rts

;******  Return to file: move.asm


;******  End of listing

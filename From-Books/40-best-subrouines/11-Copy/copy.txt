
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L copy.txt -o copy.prg copy.asm
; Thu Mar 30 23:41:35 2023

;Offset	;Hex		;Source

;******  Processing input file: copy.asm

="20230327-214534-a"	                Version = "20230327-214534-a"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: copy.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: copy.asm

.080d			main
.080d	20 5c 60	                jsr scrmaninit
.0810	20 1a 08	                jsr help
.0813	20 3f 64	                jsr anykey
.0816	4c 74 a4	                jmp b_warmstart
.0819	60		                rts
.081a			help
.081a	20 7d 60	                jsr cls
.081d	a2 9f		                ldx  #<line
.081f	a0 09		                ldy  #>line
.0821	20 92 60	                jsr  puts
.0824	a2 48		                ldx  #<headera
.0826	a0 08		                ldy  #>headera
.0828	20 92 60	                jsr  puts
.082b	a2 ca		                ldx  #<headerb
.082d	a0 08		                ldy  #>headerb
.082f	20 92 60	                jsr  puts
.0832	a2 4b		                ldx  #<shortcuts
.0834	a0 09		                ldy  #>shortcuts
.0836	20 92 60	                jsr  puts
.0839	a2 9f		                ldx  #<line
.083b	a0 09		                ldy  #>line
.083d	20 92 60	                jsr  puts
.0840	a2 c8		                ldx  #<helptext
.0842	a0 09		                ldy  #>helptext
.0844	20 92 60	                jsr  puts
.0847	60		                rts
.0848			headera
>0848	20 20 20 20	                .text          "     40 BEST MACHINE CODE ROUTINES"
>084c	20 34 30 20 c2 c5 d3 d4 20 cd c1 c3 c8 c9 ce c5
>085c	20 c3 cf c4 c5 20 d2 cf d5 d4 c9 ce c5 d3
>086a	0d		                .byte   $0d
>086b	20 20 20 20	                .text          "          FOR THE COMMODORE 64"
>086f	20 20 20 20 20 20 c6 cf d2 20 d4 c8 c5 20 c3 cf
>087f	cd cd cf c4 cf d2 c5 20 36 34
>0889	0d		                .byte   $0d
>088a	20 20 20 20	                .text          "       Book by Mark Greenshields."
>088e	20 20 20 c2 4f 4f 4b 20 42 59 20 cd 41 52 4b 20
>089e	c7 52 45 45 4e 53 48 49 45 4c 44 53 2e
>08ab	0d		                .byte   $0d
>08ac	20 20 20 20	                .text          "          ISBN 0-7156-1899-7"
>08b0	20 20 20 20 20 20 c9 d3 c2 ce 20 30 2d 37 31 35
>08c0	36 2d 31 38 39 39 2d 37
>08c8	0d 00		                .byte   $0d,0
>08ca	20 20 20 20	headerb         .text          "              copy (p64)"
>08ce	20 20 20 20 20 20 20 20 20 20 43 4f 50 59 20 28
>08de	50 36 34 29
>08e2	0d		                .byte   $0d
>08e3	20 20 20 20	                .text          "        (c) 1979 Brad Templeton"
>08e7	20 20 20 20 28 43 29 20 31 39 37 39 20 c2 52 41
>08f7	44 20 d4 45 4d 50 4c 45 54 4f 4e
>0902	0d		                .byte   $0d
>0903	20 20 20 20	                .text          "     programmed by Daniel Lafrance."
>0907	20 50 52 4f 47 52 41 4d 4d 45 44 20 42 59 20 c4
>0917	41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e
>0926	0d		                .byte   $0d
>0927	20 20 20 20	                .text   format("       Version: %s.",Version)
>092b	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 33
>093b	30 33 32 37 2d 32 31 34 35 33 34 2d 41 2e
>0949	0d 00		                .byte   $0d,0
>094b	20 2d 2d 2d	shortcuts       .text          " -------- S H O R T - C U T S ---------"
>094f	2d 2d 2d 2d 2d 20 d3 20 c8 20 cf 20 d2 20 d4 20
>095f	2d 20 c3 20 d5 20 d4 20 d3 20 2d 2d 2d 2d 2d 2d
>096f	2d 2d 2d
>0972	0d		                .byte   $0d
>0973	20 52 55 4e	                .text   format(" run=SYS%5d, help=SYS%5d",main, help)
>0977	3d d3 d9 d3 20 32 30 36 31 2c 20 48 45 4c 50 3d
>0987	d3 d9 d3 20 32 30 37 34
>098f	0d		                .byte   $0d
>0990	20 43 4c 53	                .text   format(" cls=SYS%5d",cls)
>0994	3d d3 d9 d3 32 34 37 30 31
>099d	0d 00		                .byte   $0d,0
>099f	20 2d 2d 2d	line            .text          " --------------------------------------"
>09a3	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09b3	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09c3	2d 2d 2d
>09c6	0d 00		                .byte   $0d,0
>09c8	20 c3 4f 50	helptext        .text          " Copy :"
>09cc	59 20 3a
>09cf	0d		                .byte   $0d
>09d0	20 20 20 20	                .text   format("    SYS%5d,adress, no. of pages",copy)
>09d4	d3 d9 d3 32 34 35 37 36 2c 41 44 52 45 53 53 2c
>09e4	20 4e 4f 2e 20 4f 46 20 50 41 47 45 53
>09f1	0d		                .byte   $0d
>09f2	20 20 20 20	                .text   format("    SYS%5d,8192,16",copy)
>09f6	d3 d9 d3 32 34 35 37 36 2c 38 31 39 32 2c 31 36
>0a06	00		                .byte   $0
>0a07	20 20 20 20	                .text   format("    SYS%5d,12288,4",copy)
>0a0b	d3 d9 d3 32 34 35 37 36 2c 31 32 32 38 38 2c 34
>0a1b	0d 00		                .byte   $0d,0
.6000			copy
.6000	20 fd ae	                jsr b_chk4comma ; $aefd : Check for coma.
.6003	20 8a ad	                jsr b_frmnum    ; $ad8a ; Evaluate numeric expression and/or ...
.6006	20 f7 b7	                jsr b_getadr    ; $b7f7 ; Convert Floating point number to ...
.6009	a5 14		                lda $14         ; Integer line number value LSB <LINNUM
.600b	85 fb		                sta $fb         ; zeropage 1 low byte
.600d	a5 15		                lda $15         ; Integer line number value LSB >LINNUM
.600f	85 fc		                sta $fc         ; zeropage 1 high byte
.6011	20 fd ae	                jsr b_chk4comma ; $aefd : Check for coma.
.6014	20 9e b7	                jsr b_getacc1lsb; $b79e ; Get Acc#1 LSB in x.
.6017	8a		                txa             ; X -> A
.6018	c9 11		                cmp #17         ; Ptr to last string in temp string stack LASTPT
.601a	90 03		                bcc more        ; If less than 17 pages, do-it
.601c	4c 48 b2	                jmp b_fcerr     ; $b248 ; Print ILLEGAL QUANTITY error message.
.601f	85 fd		more            sta $fd         ; zeropage 2 low byte
.6021	a9 00		                lda #$00        ; set up a ...
.6023	8d 5b 60	                sta temp        ; ... counter.
.6026	a0 00		                ldy #$00        ; set offset pointer
.6028	a9 00		                lda #$00        ; starting at page offset 0
.602a	85 fe		                sta $fe         ; zeropage 2 high byte
.602c	a9 d0		                lda #$d0        ;
.602e	85 ff		                sta $ff         ; Basic temp data for floating point conversion.
.6030	a9 00		                lda #$00        ; prepating the cia1 register to ...
.6032	8d 0e dc	                sta cia1cra     ; $dc0e   ; 56334 cia1 control register A
.6035	a9 33		                lda #51         ; ... get access to the character rom ...
.6037	85 01		                sta $01         ; ... and changing the CPU address mode.
.6039	b1 fe		loop            lda ($fe),y     ; transfer data from rom to ...
.603b	91 fb		                sta ($fb),y     ; ... ram
.603d	c8		                iny             ; point to the next byte
.603e	d0 f9		                bne loop        ; loop if page is not finish
.6040	ee 5b 60	                inc temp        ; We increment the page counter and ...
.6043	ad 5b 60	                lda temp        ; ... we compare it to see if we
.6046	c5 fd		                cmp $fd         ; ... are to the last page.
.6048	b0 07		                bcs fin         ; If so, we quit.
.604a	e6 fc		                inc $fc         ;
.604c	e6 ff		                inc $ff
.604e	4c 39 60	                jmp loop
.6051	a9 37		fin             lda #55         ; We are setting the CPU to it'a normal  ...
.6053	85 01		                sta $01         ; ... adressing mode and replacing port A ...
.6055	a9 01		                lda #$01        ; of the CIA1 to it's normal operation.
.6057	8d 0e dc	                sta cia1cra     ; $dc0e   ; 56334 cia1 control register A
.605a	60		                rts
>605b	00		temp            .byte   0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$14			linnum          =       $14     ; 20
=$2b			txttab          =       $2b     ; 43
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.605c			libtart

;******  Return to file: copy.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: copy.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: copy.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.605c			scrmaninit
.605c	20 83 61	               jsr  push
.605f	a9 06		               lda  #vbleu
.6061	8d 21 d0	               sta  vicbackcol
.6064	a9 05		               lda  #vvert
.6066	8d 20 d0	               sta  vicbordcol
.6069	a9 01		               lda  #vblanc
.606b	8d 86 02	               sta  bascol
.606e	ad 00 04	               lda  scrnram
.6071	29 fd		               and  #%11111101
.6073	8d 00 04	               sta  scrnram
.6076	20 7d 60	               jsr  cls
.6079	20 c2 61	               jsr  pop
.607c	60		               rts
.607d			cls
.607d	08		               php
.607e	48		               pha
.607f	a9 93		               lda  #$93
.6081	20 8c 60	               jsr  putch
.6084	a9 0e		               lda  #$0e
.6086	20 8c 60	               jsr  putch
.6089	68		               pla
.608a	28		               plp
.608b	60		               rts
.608c			putch
.608c	08		               php
.608d	20 d2 ff	               jsr  $ffd2
.6090	28		               plp
.6091	60		               rts
.6092			puts
.6092	20 83 61	               jsr  push
.6095	86 fb		               stx  zpage1
.6097	84 fc		               sty  zpage1+1
.6099	a0 00		               ldy  #0
.609b	b1 fb		next           lda  (zpage1),y
.609d	f0 09		               beq  exit
.609f	20 8c 60	               jsr  putch
.60a2	20 8a 62	               jsr  inczp1
.60a5	4c 9b 60	               jmp  next
.60a8	20 c2 61	exit           jsr  pop
.60ab	60		               rts
.60ac			gotoxy
.60ac	08		               php
.60ad	18		               clc
.60ae	8a		               txa
.60af	48		               pha
.60b0	98		               tya
.60b1	aa		               tax
.60b2	68		               pla
.60b3	a8		               tay
.60b4	20 f0 ff	               jsr  kplot
.60b7	28		               plp
.60b8	60		               rts
.60b9			cursor
=$0286			bascol    =    $0286
.60b9	08		               php
.60ba	48		               pha
.60bb	90 12		               bcc  restore
.60bd	20 f0 ff	               jsr  kplot
.60c0	8c e1 60	               sty  cx
.60c3	8e e2 60	               stx  cy
.60c6	ad 86 02	               lda  bascol
.60c9	8d e3 60	               sta  bcol
.60cc	4c de 60	               jmp  out
.60cf	ae e2 60	restore        ldx  cy
.60d2	ac e1 60	               ldy  cx
.60d5	20 f0 ff	               jsr  kplot
.60d8	ad e3 60	               lda  bcol
.60db	8d 86 02	               sta  bascol
.60de	68		out            pla
.60df	28		               plp
.60e0	60		               rts
>60e1	00		cx   .byte     $00
>60e2	00		cy   .byte     $00
>60e3	00		bcol .byte     $00
.60e4			cursave
.60e4	08		               php
.60e5	38		               sec
.60e6	20 b9 60	               jsr  cursor
.60e9	28		               plp
.60ea	60		               rts
.60eb			curput
.60eb	08		               php
.60ec	18		               clc
.60ed	20 b9 60	               jsr  cursor
.60f0	28		               plp
.60f1	60		               rts
.60f2			putsxy
.60f2	20 83 61	               jsr  push
.60f5	86 fb		               stx  zpage1
.60f7	84 fc		               sty  zpage1+1
.60f9	a0 00		               ldy  #$00
.60fb	b1 fb		               lda  (zpage1),y
.60fd	aa		               tax
.60fe	20 8a 62	               jsr  inczp1
.6101	b1 fb		               lda  (zpage1),y
.6103	a8		               tay
.6104	20 ac 60	               jsr  gotoxy
.6107	20 8a 62	               jsr  inczp1
.610a	a6 fb		               ldx  zpage1
.610c	a4 fc		               ldy  zpage1+1
.610e	20 92 60	               jsr  puts
.6111	20 c2 61	               jsr  pop
.6114	60		               rts
>6115	00 00		straddr   .word     $00
>6117	00		px        .byte     $00
>6118	00		py        .byte     $00
>6119	00 00		zp1       .word     $00
.611b			putscxy
.611b	20 83 61	               jsr  push
.611e	84 fc		               sty  zpage1+1
.6120	86 fb		               stx  zpage1
.6122	ad 86 02	               lda  bascol
.6125	8d 45 61	               sta  bc
.6128	a0 00		               ldy #$00
.612a	b1 fb		               lda  (zpage1),y
.612c	8d 86 02	               sta  bascol
.612f	20 8a 62	               jsr  inczp1
.6132	a6 fb		               ldx  zpage1
.6134	a4 fc		               ldy  zpage1+1
.6136	20 f2 60	               jsr  putsxy
.6139	ad 45 61	               lda  bc
.613c	8d 86 02	               sta  bascol
.613f	20 c2 61	               jsr  pop
.6142	60		               rts
>6143	00 00		straddr  .word      $00
>6145	00		bc       .byte      $00
>6146	00 00		zp1      .word      $00
.6148			putrahex
.6148	08		               php
.6149	48		               pha
.614a	20 90 63	               jsr  a2hex
.614d	a9 3c		               lda  #<a2hexstr
.614f	a0 63		               ldy  #>a2hexstr
.6151	20 92 60	               jsr  puts
.6154	68		               pla
.6155	28		               plp
.6156	60		               rts
.6157			kputrahexxy
.6157			bputrahexxy
.6157			putrahexxy
.6157	08		               php
.6158	20 90 63	               jsr  a2hex
.615b	a9 39		               lda  #<a2hexpos
.615d	a0 63		               ldy  #>a2hexpos
.615f	20 f2 60	               jsr  putsxy
.6162	68		               pla
.6163	28		               plp
.6164	60		               rts
.6165			putrahexcxy
.6165	08		               php
.6166	20 90 63	               jsr  a2hex
.6169	a9 39		               lda  #<a2hexpos
.616b	a0 63		               ldy  #>a2hexpos
.616d	20 1b 61	               jsr  putscxy
.6170	68		               pla
.6171	28		               plp
.6172	60		               rts
.6173			setinverse
.6173	48		               pha
.6174	a9 12		               lda  #$12
.6176	20 d2 ff	               jsr  $ffd2
.6179	68		               pla
.617a	60		               rts
.617b			clrinverse
.617b	48		               pha
.617c	a9 92		               lda  #$92
.617e	20 d2 ff	               jsr  $ffd2
.6181	68		               pla
.6182	60		               rts

;******  Return to file: copy.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.6183			push
.6183	08		          php            ; stack : flg, pcl, pch
.6184	78		          sei
.6185	8d bf 61	          sta  ra        ; save a
.6188	68		          pla            ; stack : pcl, pch
.6189	8d be 61	          sta  rp        ; save rp
.618c	68		          pla            ; stack : pch
.618d	8d c0 61	          sta  pc        ; save pcl
.6190	68		          pla            ; stack : -
.6191	8d c1 61	          sta  pc+1      ; save pch
.6194	a5 fb		          lda  zpage1    ; get zpage1 low byte
.6196	48		          pha            ; stack : zp1l
.6197	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.6199	48		          pha            ; stack : zp1h, zp1l
.619a	a5 fd		          lda  zpage2    ; get zpage2 low byte
.619c	48		          pha            ; stack : zp2l, zp1h, zp1l
.619d	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.619f	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.61a0	ad be 61	          lda  rp        ; get rp
.61a3	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.61a4	ad bf 61	          lda  ra        ; get a
.61a7	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.61a8	8a		          txa            ; get x
.61a9	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.61aa	98		          tya            ; get y
.61ab	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.61ac	ad c1 61	          lda  pc+1      ; get pch
.61af	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.61b0	ad c0 61	          lda  pc        ; get pcl
.61b3	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.61b4	ad be 61	          lda  rp        ; get rp
.61b7	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.61b8	ad bf 61	          lda  ra        ; get a
.61bb	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.61bc	58		          cli
.61bd	60		          rts
>61be	00		rp        .byte     0
>61bf	00		ra        .byte     0
>61c0	00 00		pc        .word     0
.61c2			pull
.61c2			pop
.61c2	78		          sei
.61c3	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.61c4	8d f7 61	          sta  pc        ; save pcl
.61c7	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.61c8	8d f8 61	          sta  pc+1      ; save pch
.61cb	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.61cc	a8		          tay            ; set y
.61cd	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.61ce	aa		          tax            ; set x
.61cf	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.61d0	8d f6 61	          sta  ra        ; save a
.61d3	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.61d4	8d f5 61	          sta  rp        ; save rp
.61d7	68		          pla            ; stack : zp2l, zp1h, zp1l
.61d8	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.61da	68		          pla            ; stack : zp1h, zp1l
.61db	85 fd		          sta  zpage2    ; get zpage2 High byte
.61dd	68		          pla            ; stack : zp1l
.61de	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.61e0	68		          pla            ; stack :
.61e1	85 fb		          sta  zpage1    ; get zpage1 High byte
.61e3	ad f8 61	          lda  pc+1      ; get pch
.61e6	48		          pha            ; stack : pch
.61e7	ad f7 61	          lda  pc
.61ea	48		          pha            ; stack : pcl, pch
.61eb	ad f5 61	          lda  rp        ; get rp
.61ee	48		          pha            ; stack : rp, pcl, pch
.61ef	ad f6 61	          lda  ra        ; set ra
.61f2	58		          cli
.61f3	28		          plp            ; stack : pcl, pch
.61f4	60		          rts
>61f5	00		rp        .byte     0
>61f6	00		ra        .byte     0
>61f7	00 00		pc        .word     0

;******  Return to file: copy.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.61f9			blkfill
.61f9	20 83 61	bf0            jsr  push
.61fc	20 b7 62	               jsr  savezp1
.61ff	84 fc		               sty  zpage1+1
.6201	a0 00		               ldy  #$00
.6203	84 fb		               sty  zpage1
.6205	91 fb		bf1            sta  (zpage1),y
.6207	c8		               iny
.6208	d0 fb		               bne  bf1
.620a	20 c6 62	               jsr  restzp1
.620d	20 c2 61	               jsr  pop
.6210	60		               rts
.6211			memfill
.6211	20 83 61	               jsr  push
.6214	20 f9 61	mf1            jsr  blkfill
.6217	c8		               iny
.6218	ca		               dex
.6219	d0 f9		               bne  mf1
.621b	20 c2 61	               jsr  pop
.621e	60		               rts
.621f			memmove
.621f	20 83 61	               jsr  push
.6222	ba		               tsx            ; On se crée un pointeur ...
.6223	8a		               txa
.6224	18		               clc
.6225	69 0b		               adc  #11
.6227	a8		               tay
.6228	a2 06		               ldx  #$06
.622a	b9 00 01	nextbyte       lda  $0100,y
.622d	99 79 62	               sta  words,y
.6230	c8		               iny
.6231	ca		               dex
.6232	d0 f6		               bne  nextbyte
.6234	ad 79 62	               lda  s
.6237	8d 50 62	               sta  source+1
.623a	ad 7a 62	               lda  s+1
.623d	8d 51 62	               sta  source+2
.6240	ad 7b 62	               lda  d
.6243	8d 4d 62	               sta  destin+1
.6246	ad 7c 62	               lda  d+1
.6249	8d 4e 62	               sta  destin+2
.624c	ad ff ff	destin         lda  $ffff
.624f	8d ff ff	source         sta  $ffff
.6252	ee 4d 62	               inc  destin+1
.6255	d0 03		               bne  src
.6257	ee 4e 62	               inc  destin+2
.625a	ee 50 62	src            inc  source+1
.625d	d0 03		               bne  cnt
.625f	ee 51 62	               inc  source+2
.6262	ad 7d 62	cnt            lda  compte
.6265	d0 08		               bne  decit
.6267	ad 7e 62	               lda  compte+1
.626a	f0 09		               beq  fini
.626c	ce 7e 62	               dec  compte+1
.626f	ce 7d 62	decit          dec  compte
.6272	4c 4c 62	               jmp  destin
.6275	20 c2 61	fini           jsr  pop
.6278	60		               rts
.6279			words
>6279	00 00		s         .word     $0000
>627b	00 00		d         .word     $0000
>627d	00 00		compte    .word     $0000
.627f			decword
.627f	20 83 61	               jsr  push
.6282	86 fd		               stx  zpage2
.6284	84 fe		               sty  zpage2+1
.6286	20 c2 61	               jsr  pop
.6289	60		               rts
.628a			inczp1
.628a	08		               php
.628b	e6 fb		               inc  zpage1
.628d	d0 02		               bne  nopage
.628f	e6 fc		               inc  zpage1+1
.6291	28		nopage         plp
.6292	60		               rts
.6293			deczp1
.6293	08		                php
.6294	48		                pha
.6295	c6 fb		                dec  zpage1
.6297	d0 02		                bne  nopage
.6299	c6 fc		                dec  zpage1+1
.629b	c6 fb		nopage          dec  zpage1
.629d	68		                pla
.629e	28		                plp
.629f	60		                rts
.62a0			inczp2
.62a0	08		               php
.62a1	48		               pha
.62a2	e6 fd		               inc  zpage2
.62a4	d0 02		               bne  nopage
.62a6	e6 fe		               inc  zpage2+1
.62a8	68		nopage         pla
.62a9	28		               plp
.62aa	60		               rts
.62ab			deczp2
.62ab	08		               php
.62ac	48		               pha
.62ad	a5 fd		               lda  zpage2
.62af	d0 02		               bne  nopage
.62b1	c6 fe		               dec  zpage2+1
.62b3	c6 fd		nopage         dec  zpage2
.62b5	28		               plp
.62b6	60		               rts
.62b7			savezp1
.62b7	08		               php
.62b8	48		               pha
.62b9	a5 fb		               lda  zpage1
.62bb	8d 33 63	               sta  zp1
.62be	a5 fc		               lda  zpage1+1
.62c0	8d 34 63	               sta  zp1+1
.62c3	68		               pla
.62c4	28		               plp
.62c5	60		               rts
.62c6			restzp1
.62c6	08		               php
.62c7	48		               pha
.62c8	ad 33 63	               lda zp1
.62cb	85 fb		               sta zpage1
.62cd	ad 34 63	               lda zp1+1
.62d0	85 fc		               sta zpage1+1
.62d2	68		               pla
.62d3	28		               plp
.62d4	60		               rts
.62d5			savezp2
.62d5	08		         php
.62d6	48		         pha
.62d7	a5 fd		         lda zpage2
.62d9	8d 35 63	         sta zp2
.62dc	a5 fe		         lda zpage2+1
.62de	8d 36 63	         sta zp2+1
.62e1	68		         pla
.62e2	28		         plp
.62e3	60		         rts
.62e4			restzp2
.62e4	08		                php
.62e5	48		                pha
.62e6	ad 35 63	                lda  zp2
.62e9	85 fd		                sta  zpage2
.62eb	ad 36 63	                lda  zp2+1
.62ee	85 fe		                sta  zpage2+1
.62f0	68		                pla
.62f1	28		                plp
.62f2	60		                rts
.62f3			xy2addr
.62f3	08		                php
.62f4	48		                pha
.62f5	8a		                txa
.62f6	48		                pha
.62f7	98		                tya
.62f8	48		                pha
.62f9	ad 2e 63	                lda     addr1+1
.62fc	8d 30 63	                sta     addr2+1
.62ff	ad 2d 63	                lda     addr1
.6302	8d 2f 63	                sta     addr2
.6305	c0 00		                cpy     #$00
.6307	f0 0f		                beq     addx
.6309	18		moreline        clc
.630a	6d 2c 63	                adc     ymult
.630d	90 03		                bcc     norepy
.630f	ee 30 63	                inc     addr2+1
.6312	8d 2f 63	norepy          sta     addr2
.6315	88		                dey
.6316	d0 f1		                bne     moreline
.6318	8a		addx            txa
.6319	18		                clc
.631a	6d 2f 63	                adc     addr2
.631d	90 03		                bcc     thatsit
.631f	ee 30 63	                inc     addr2+1
.6322	8d 2f 63	thatsit         sta     addr2
.6325	68		                pla
.6326	a8		                tay
.6327	68		                pla
.6328	aa		                tax
.6329	68		                pla
.632a	28		                plp
.632b	60		                rts
>632c	28		ymult          .byte     40
>632d	00 00		addr1          .word     $0000
>632f	00 00		addr2          .word     $0000
>6331	00 00		bytecnt        .word     $0000
>6333	00 00		zp1        .word   $0000
>6335	00 00		zp2        .word   $0000

;******  Return to file: copy.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>6337	01		a2hexcol       .byte     1              ; pour aputscxy
>6338	00		a2hexbkcol     .byte     %00000000
.6339			a2hexpos
>6339	00		a2hexpx        .byte     0              ; pour aputsxy
>633a	00		a2hexpy        .byte     0
>633b	24		a2hexprefix    .byte     "$"            ; pour aputs
>633c	00 00		a2hexstr       .word     $00
>633e	00 00		               .word     $00
>6340	00		               .byte     0              ; 0 end string
.6341			putahexfmtxy
.6341	20 83 61	               jsr  push
.6344	20 90 63	               jsr  a2hex
.6347	ae 39 63	               ldx  a2hexpx
.634a	ac 3a 63	               ldy  a2hexpy
.634d	20 ac 60	               jsr  gotoxy
.6350	a2 3b		               ldx  #<a2hexprefix
.6352	a0 63		               ldy  #>a2hexprefix
.6354	20 92 60	               jsr  puts
.6357	20 c2 61	               jsr  pop
.635a	60		               rts
.635b			putahexfmt
.635b	20 83 61	               jsr  push
.635e	20 90 63	               jsr  a2hex
.6361	a2 3b		               ldx  #<a2hexprefix
.6363	a0 63		               ldy  #>a2hexprefix
.6365	20 92 60	               jsr  puts
.6368	20 c2 61	               jsr  pop
.636b	60		               rts
.636c			putahex
.636c	20 83 61	               jsr  push
.636f	20 90 63	               jsr  a2hex
.6372	a2 3c		               ldx  #<a2hexstr
.6374	a0 63		               ldy  #>a2hexstr
.6376	20 92 60	               jsr  puts
.6379	20 c2 61	               jsr  pop
.637c	60		               rts
.637d			nib2hex
.637d	08		               php
.637e	29 0f		               and  #$0f
.6380	f8		               sed
.6381	18		               clc
.6382	69 90		               adc  #$90
.6384	69 40		               adc  #$40
.6386	d8		               cld
.6387	28		               plp
.6388	60		               rts
.6389			lsra4bits
.6389	08		               php
.638a	4a		               lsr
.638b	4a		               lsr
.638c	4a		               lsr
.638d	4a		               lsr
.638e	28		               plp
.638f	60		               rts
.6390			a2hex
.6390	08		               php
.6391	48		               pha
.6392	48		               pha
.6393	20 89 63	               jsr  lsra4bits
.6396	20 7d 63	               jsr  nib2hex
.6399	8d 3c 63	               sta  a2hexstr
.639c	68		               pla
.639d	20 7d 63	               jsr  nib2hex
.63a0	8d 3d 63	               sta  a2hexstr+1
.63a3	a9 00		               lda  #$00                ; set end of string
.63a5	8d 3e 63	               sta  a2hexstr+2
.63a8	68		               pla
.63a9	28		               plp
.63aa	60		               rts
.63ab			xy2hex
.63ab	20 83 61	               jsr  push
.63ae	20 90 63	               jsr  a2hex
.63b1	8a		               txa
.63b2	48		               pha
.63b3	20 89 63	               jsr  lsra4bits
.63b6	20 7d 63	               jsr  nib2hex
.63b9	8d 3c 63	               sta  a2hexstr
.63bc	68		               pla
.63bd	20 7d 63	               jsr  nib2hex
.63c0	8d 3d 63	               sta  a2hexstr+1
.63c3	98		               tya
.63c4	48		               pha
.63c5	20 89 63	               jsr  lsra4bits
.63c8	20 7d 63	               jsr  nib2hex
.63cb	8d 3e 63	               sta  a2hexstr+2
.63ce	68		               pla
.63cf	20 7d 63	               jsr  nib2hex
.63d2	8d 3f 63	               sta  a2hexstr+3
.63d5	a9 00		               lda  #$00                ; 0 ended string
.63d7	8d 40 63	               sta  a2hexstr+4
.63da	20 c2 61	               jsr  pop
.63dd			atobin
.63dd	20 83 61	               jsr     push
.63e0	a2 08		               ldx     #8
.63e2	a0 00		               ldy     #0
.63e4	2a		nextbit        rol
.63e5	48		               pha
.63e6	69 00		               adc     #$00
.63e8	29 01		               and     #$01
.63ea	20 7d 63	               jsr     nib2hex
.63ed	99 fe 63	               sta     abin,y
.63f0	68		               pla
.63f1	c8		               iny
.63f2	ca		               dex
.63f3	d0 ef		               bne     nextbit
.63f5	a9 00		               lda     #0
.63f7	99 fe 63	               sta     abin,y
.63fa	20 c2 61	               jsr     pull
.63fd	60		               rts
>63fe	30 30 30 30	abin           .null   "00000000"
>6402	30 30 30 30 00
.6407			putabin
.6407	20 dd 63	               jsr     atobin
.640a	20 83 61	               jsr     push
.640d	a2 fe		               ldx     #<abin
.640f	a0 63		               ldy     #>abin
.6411	20 92 60	               jsr     puts
.6414	20 c2 61	               jsr     pop
.6417	60		               rts
.6418			putabinfmt
.6418	08		               php
.6419	48		               pha
.641a	a9 25		               lda     #"%"
.641c	20 8c 60	               jsr     putch
.641f	68		               pla
.6420	20 07 64	               jsr     putabin
.6423	28		               plp
.6424	60		               rts
.6425			putabinxy
.6425	20 ac 60	               jsr     gotoxy
.6428	20 07 64	               jsr     putabin
.642b	60		               rts
.642c			putabinfmtxy
.642c	20 ac 60	               jsr     gotoxy
.642f	20 18 64	               jsr     putabinfmt
.6432	60		               rts

;******  Return to file: copy.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

.6433			waitstop
.6433	20 83 61	                jsr     push
.6436	20 ed f6	wait            jsr     k_stop
.6439	d0 fb		                bne     wait
.643b	20 c2 61	                jsr     pop
.643e	60		                rts
.643f			anykey
.643f	08		                php
.6440	48		                pha
.6441	a5 cb		nokey           lda 203
.6443	c9 40		                cmp #64
.6445	f0 fa		                beq nokey
.6447	68		                pla
.6448	28		                plp
.6449	60		                rts
.644a			getkey
.644a	20 83 61	                jsr     push
.644d	20 cf ff	again           jsr     chrin
.6450	4c 4d 64	                jmp     again
.6453	20 c2 61	                jsr     pop
.6456	60		                rts
.6457			waitkey
.6457	20 83 61	                jsr     push
.645a	8d 6f 64	                sta     thekey
.645d	20 e4 ff	nope            jsr     getin
.6460	20 d2 ff	                jsr     chrout
.6463	cd 6f 64	                cmp     thekey
.6466	d0 f5		                bne     nope
.6468	20 d2 ff	                jsr     chrout
.646b	20 c2 61	                jsr     pop
.646e	60		                rts
>646f	00		thekey          .byte   0
.6470			waitspace
.6470	20 83 61	                jsr     push
.6473	a9 7f		wait            lda     #$7f  ;%01111111
.6475	8d 00 dc	                sta     $dc00
.6478	ad 01 dc	                lda     $dc01
.647b	29 10		                and     #$10  ;mask %00010000
.647d	d0 f4		                bne     wait
.647f	20 c2 61	                jsr     pop
.6482			waitsstop
.6482	20 83 61	                jsr     push
.6485	20 ed f6	wait            jsr     k_stop  ;%01111111
.6488	d0 fb		                bne     wait
.648a	20 c2 61	                jsr     pop
.648d			waitreturn
.648d	20 83 61	                jsr     push
.6490	ad ac 64	                lda     thecount
.6493	8d 00 04	                sta     scrnram
.6496	a9 02		                lda     #$02
.6498	8d 00 d8	                sta     colorram
.649b	20 e4 ff	nope            jsr     getin
.649e	20 d2 ff	                jsr     chrout
.64a1	c9 0d		                cmp     #$0d
.64a3	d0 f6		                bne     nope
.64a5	ee ac 64	                inc     thecount
.64a8	20 c2 61	                jsr     pop
.64ab	60		                rts
>64ac	01		thecount        .byte   $01

;******  Return to file: copy.asm


;******  End of listing

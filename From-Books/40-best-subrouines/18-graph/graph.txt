
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L graph.txt -o graph.prg graph.asm
; Mon May 29 15:46:11 2023

;Offset	;Hex		;Source

;******  Processing input file: graph.asm

="20230528-210325"	                Version = "20230528-210325"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: graph.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: graph.asm

.080d			main
.080d	20 ef 0a	                jsr scrmaninit
.0810	20 32 08	                jsr help
.0813	20 d2 0e	                jsr anykey
.0816	20 dd 0e	                jsr releasekey
.0819	20 79 0a	                jsr graph
.081c	20 d2 0e	                jsr anykey
.081f	20 dd 0e	                jsr releasekey
.0822	20 a1 0a	                jsr clg
.0825	20 d2 0e	                jsr anykey
.0828	20 dd 0e	                jsr releasekey
.082b	20 8f 0a	                jsr nrm
.082e	20 ef 0a	                jsr scrmaninit
.0831	60		                rts
.0832			help
.0832	20 10 0b	                jsr cls
.0835	a2 b7		                ldx  #<line
.0837	a0 09		                ldy  #>line
.0839	20 25 0b	                jsr  puts
.083c	a2 60		                ldx  #<headera
.083e	a0 08		                ldy  #>headera
.0840	20 25 0b	                jsr  puts
.0843	a2 e2		                ldx  #<headerb
.0845	a0 08		                ldy  #>headerb
.0847	20 25 0b	                jsr  puts
.084a	a2 63		                ldx  #<shortcuts
.084c	a0 09		                ldy  #>shortcuts
.084e	20 25 0b	                jsr  puts
.0851	a2 e0		                ldx  #<helptext
.0853	a0 09		                ldy  #>helptext
.0855	20 25 0b	                jsr  puts
.0858	a2 b7		                ldx  #<line
.085a	a0 09		                ldy  #>line
.085c	20 25 0b	                jsr  puts
.085f	60		                rts
.0860			headera
>0860	20 20 20 20	                .text          "     40 BEST MACHINE CODE ROUTINES"
>0864	20 34 30 20 c2 c5 d3 d4 20 cd c1 c3 c8 c9 ce c5
>0874	20 c3 cf c4 c5 20 d2 cf d5 d4 c9 ce c5 d3
>0882	0d		                .byte   $0d
>0883	20 20 20 20	                .text          "          FOR THE COMMODORE 64"
>0887	20 20 20 20 20 20 c6 cf d2 20 d4 c8 c5 20 c3 cf
>0897	cd cd cf c4 cf d2 c5 20 36 34
>08a1	0d		                .byte   $0d
>08a2	20 20 20 20	                .text          "       Book by Mark Greenshields."
>08a6	20 20 20 c2 4f 4f 4b 20 42 59 20 cd 41 52 4b 20
>08b6	c7 52 45 45 4e 53 48 49 45 4c 44 53 2e
>08c3	0d		                .byte   $0d
>08c4	20 20 20 20	                .text          "          ISBN 0-7156-1899-7"
>08c8	20 20 20 20 20 20 c9 d3 c2 ce 20 30 2d 37 31 35
>08d8	36 2d 31 38 39 39 2d 37
>08e0	0d 00		                .byte   $0d,0
>08e2	20 20 20 20	headerb         .text          "              graph (p78)"
>08e6	20 20 20 20 20 20 20 20 20 20 47 52 41 50 48 20
>08f6	28 50 37 38 29
>08fb	0d		                .byte   $0d
>08fc	20 20 20 20	                .text          "        (c) 1979 Brad Templeton"
>0900	20 20 20 20 28 43 29 20 31 39 37 39 20 c2 52 41
>0910	44 20 d4 45 4d 50 4c 45 54 4f 4e
>091b	0d		                .byte   $0d
>091c	20 20 20 20	                .text          "     programmed by Daniel Lafrance."
>0920	20 50 52 4f 47 52 41 4d 4d 45 44 20 42 59 20 c4
>0930	41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e
>093f	0d		                .byte   $0d
>0940	20 20 20 20	                .text   format("        Version: %s.",Version)
>0944	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>0954	33 30 35 32 38 2d 32 31 30 33 32 35 2e
>0961	0d 00		                .byte   $0d,0
>0963	20 2d 2d 2d	shortcuts       .text          " -------- S H O R T - C U T S ---------"
>0967	2d 2d 2d 2d 2d 20 d3 20 c8 20 cf 20 d2 20 d4 20
>0977	2d 20 c3 20 d5 20 d4 20 d3 20 2d 2d 2d 2d 2d 2d
>0987	2d 2d 2d
>098a	0d		                .byte   $0d
>098b	20 52 55 4e	                .text   format(" run=SYS%5d, help=SYS%5d",main, help)
>098f	3d d3 d9 d3 20 32 30 36 31 2c 20 48 45 4c 50 3d
>099f	d3 d9 d3 20 32 30 39 38
>09a7	0d		                .byte   $0d
>09a8	20 43 4c 53	                .text   format(" cls=SYS%5d",cls)
>09ac	3d d3 d9 d3 20 32 38 33 32
>09b5	0d 00		                .byte   $0d,0
>09b7	20 2d 2d 2d	line            .text          " --------------------------------------"
>09bb	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09cb	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09db	2d 2d 2d
>09de	0d 00		                .byte   $0d,0
>09e0	20 d0 52 45	helptext        .text   format(" Prepare to graph  : SYS%5d",graph)
>09e4	50 41 52 45 20 54 4f 20 47 52 41 50 48 20 20 3a
>09f4	20 d3 d9 d3 20 32 36 38 31
>09fd	0d		                .byte   $0d
>09fe	20 47 52 41	                .text   format(" graph.....: SYS%5d",graph)
>0a02	50 48 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 32 36 38
>0a12	31
>0a13	0d		                .byte   $0d
>0a14	20 43 4c 47	                .text   format(" clg.......: SYS%5d,fgcol,bgcol",clg)
>0a18	2e 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 32 37 32
>0a28	31 2c 46 47 43 4f 4c 2c 42 47 43 4f 4c
>0a35	0d		                .byte   $0d
>0a36	20 4e 52 4d	                .text   format(" nrm.......: SYS%5d",nrm)
>0a3a	2e 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 32 37 30
>0a4a	33
>0a4b	0d		                .byte   $0d
>0a4c	20 41 4e 59	                .text   format(" anykey....: SYS%5d",anykey)
>0a50	4b 45 59 2e 2e 2e 2e 3a 20 d3 d9 d3 20 33 37 39
>0a60	34
>0a61	0d		                .byte   $0d
>0a62	20 52 45 4c	                .text   format(" releasekey: SYS%5d",releasekey)
>0a66	45 41 53 45 4b 45 59 3a 20 d3 d9 d3 20 33 38 30
>0a76	35
>0a77	0d 00		                .byte   $0d,0
.0a79			graph
.0a79	48		                pha
.0a7a	a9 16		                lda #$16
.0a7c	8d 00 dd	                sta cia2pra   ;56576
.0a7f	a9 08		                lda #8
.0a81	8d 18 d0	                sta vicmemptr ;53272
.0a84	ad 11 d0	                lda vicctrl0v ; 53265
.0a87	09 20		                ora #32
.0a89	8d 11 d0	                sta vicctrl0v ; 53265
.0a8c	68		                pla
.0a8d	60		                rts
>0a8e	00		byte            .byte 0
.0a8f			nrm
.0a8f	48		                pha
.0a90	a9 15		                lda #21
.0a92	8d 18 d0	                sta vicmemptr ; 53272
.0a95	a9 1b		                lda #27
.0a97	8d 11 d0	                sta vicctrl0v ; 53265
.0a9a	a9 17		                lda #23
.0a9c	8d 00 dd	                sta cia2pra   ;56576
.0a9f	68		                pla
.0aa0	60		                rts
.0aa1			clg
.0aa1	08		                php
.0aa2	48		                pha
.0aa3			more
.0aa3	ad ee 0a	                lda colour
.0aa6	29 0f		                and #$0f
.0aa8	8d ee 0a	                sta colour
.0aab	8d ed 0a	                sta fin
.0aae	ee ee 0a	                inc colour
.0ab1			more1
.0ab1	a9 01		                lda #1
.0ab3	0a		                asl a
.0ab4	0a		                asl a
.0ab5	0a		                asl a
.0ab6	0a		                asl a
.0ab7	0d ed 0a	                ora fin
.0aba	8d ed 0a	                sta fin
.0abd	a9 00		                lda #0
.0abf	85 60		                sta $60
.0ac1	a9 60		                lda #96
.0ac3	85 fc		                sta $fc
.0ac5	a0 00		                ldy #0
.0ac7	a9 00		                lda #0
.0ac9	91 fb		loop            sta ($fb),y
.0acb	c8		                iny
.0acc	d0 fb		                bne loop
.0ace	e6 fc		                inc $fc
.0ad0	a6 fc		                ldx $fc
.0ad2	e0 80		                cpx #128
.0ad4	d0 f3		                bne loop
.0ad6	ad ed 0a	                lda fin
.0ad9	a2 00		                ldx #0
.0adb	9d 00 40	loop1           sta $4000,x
.0ade	9d 00 41	                sta $4100,x
.0ae1	9d 00 42	                sta $4200,x
.0ae4	9d 00 43	                sta $4300,x
.0ae7	e8		                inx
.0ae8	d0 f1		                bne loop1
.0aea	68		                pla
.0aeb	28		                plp
.0aec	60		                rts
>0aed	00		fin             .byte 0
>0aee	00		colour          .byte 0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ; 97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.0aef			libtart

;******  Return to file: graph.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: graph.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: graph.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0aef			scrmaninit
.0aef	20 16 0c	               jsr  push
.0af2	a9 06		               lda  #vbleu
.0af4	8d 21 d0	               sta  vicbackcol
.0af7	a9 05		               lda  #vvert
.0af9	8d 20 d0	               sta  vicbordcol
.0afc	a9 01		               lda  #vblanc
.0afe	8d 86 02	               sta  bascol
.0b01	ad 00 04	               lda  scrnram
.0b04	29 fd		               and  #%11111101
.0b06	8d 00 04	               sta  scrnram
.0b09	20 10 0b	               jsr  cls
.0b0c	20 55 0c	               jsr  pop
.0b0f	60		               rts
.0b10			cls
.0b10	08		               php
.0b11	48		               pha
.0b12	a9 93		               lda  #$93
.0b14	20 1f 0b	               jsr  putch
.0b17	a9 0e		               lda  #$0e
.0b19	20 1f 0b	               jsr  putch
.0b1c	68		               pla
.0b1d	28		               plp
.0b1e	60		               rts
.0b1f			putch
.0b1f	08		               php
.0b20	20 d2 ff	               jsr  $ffd2
.0b23	28		               plp
.0b24	60		               rts
.0b25			puts
.0b25	20 16 0c	               jsr  push
.0b28	86 fb		               stx  zpage1
.0b2a	84 fc		               sty  zpage1+1
.0b2c	a0 00		               ldy  #0
.0b2e	b1 fb		next           lda  (zpage1),y
.0b30	f0 09		               beq  exit
.0b32	20 1f 0b	               jsr  putch
.0b35	20 1d 0d	               jsr  inczp1
.0b38	4c 2e 0b	               jmp  next
.0b3b	20 55 0c	exit           jsr  pop
.0b3e	60		               rts
.0b3f			gotoxy
.0b3f	08		               php
.0b40	18		               clc
.0b41	8a		               txa
.0b42	48		               pha
.0b43	98		               tya
.0b44	aa		               tax
.0b45	68		               pla
.0b46	a8		               tay
.0b47	20 f0 ff	               jsr  kplot
.0b4a	28		               plp
.0b4b	60		               rts
.0b4c			cursor
=$0286			bascol    =    $0286
.0b4c	08		               php
.0b4d	48		               pha
.0b4e	90 12		               bcc  restore
.0b50	20 f0 ff	               jsr  kplot
.0b53	8c 74 0b	               sty  cx
.0b56	8e 75 0b	               stx  cy
.0b59	ad 86 02	               lda  bascol
.0b5c	8d 76 0b	               sta  bcol
.0b5f	4c 71 0b	               jmp  out
.0b62	ae 75 0b	restore        ldx  cy
.0b65	ac 74 0b	               ldy  cx
.0b68	20 f0 ff	               jsr  kplot
.0b6b	ad 76 0b	               lda  bcol
.0b6e	8d 86 02	               sta  bascol
.0b71	68		out            pla
.0b72	28		               plp
.0b73	60		               rts
>0b74	00		cx   .byte     $00
>0b75	00		cy   .byte     $00
>0b76	00		bcol .byte     $00
.0b77			cursave
.0b77	08		               php
.0b78	38		               sec
.0b79	20 4c 0b	               jsr  cursor
.0b7c	28		               plp
.0b7d	60		               rts
.0b7e			curput
.0b7e	08		               php
.0b7f	18		               clc
.0b80	20 4c 0b	               jsr  cursor
.0b83	28		               plp
.0b84	60		               rts
.0b85			putsxy
.0b85	20 16 0c	               jsr  push
.0b88	86 fb		               stx  zpage1
.0b8a	84 fc		               sty  zpage1+1
.0b8c	a0 00		               ldy  #$00
.0b8e	b1 fb		               lda  (zpage1),y
.0b90	aa		               tax
.0b91	20 1d 0d	               jsr  inczp1
.0b94	b1 fb		               lda  (zpage1),y
.0b96	a8		               tay
.0b97	20 3f 0b	               jsr  gotoxy
.0b9a	20 1d 0d	               jsr  inczp1
.0b9d	a6 fb		               ldx  zpage1
.0b9f	a4 fc		               ldy  zpage1+1
.0ba1	20 25 0b	               jsr  puts
.0ba4	20 55 0c	               jsr  pop
.0ba7	60		               rts
>0ba8	00 00		straddr   .word     $00
>0baa	00		px        .byte     $00
>0bab	00		py        .byte     $00
>0bac	00 00		zp1       .word     $00
.0bae			putscxy
.0bae	20 16 0c	               jsr  push
.0bb1	84 fc		               sty  zpage1+1
.0bb3	86 fb		               stx  zpage1
.0bb5	ad 86 02	               lda  bascol
.0bb8	8d d8 0b	               sta  bc
.0bbb	a0 00		               ldy #$00
.0bbd	b1 fb		               lda  (zpage1),y
.0bbf	8d 86 02	               sta  bascol
.0bc2	20 1d 0d	               jsr  inczp1
.0bc5	a6 fb		               ldx  zpage1
.0bc7	a4 fc		               ldy  zpage1+1
.0bc9	20 85 0b	               jsr  putsxy
.0bcc	ad d8 0b	               lda  bc
.0bcf	8d 86 02	               sta  bascol
.0bd2	20 55 0c	               jsr  pop
.0bd5	60		               rts
>0bd6	00 00		straddr  .word      $00
>0bd8	00		bc       .byte      $00
>0bd9	00 00		zp1      .word      $00
.0bdb			putrahex
.0bdb	08		               php
.0bdc	48		               pha
.0bdd	20 23 0e	               jsr  a2hex
.0be0	a9 cf		               lda  #<a2hexstr
.0be2	a0 0d		               ldy  #>a2hexstr
.0be4	20 25 0b	               jsr  puts
.0be7	68		               pla
.0be8	28		               plp
.0be9	60		               rts
.0bea			kputrahexxy
.0bea			bputrahexxy
.0bea			putrahexxy
.0bea	08		               php
.0beb	20 23 0e	               jsr  a2hex
.0bee	a9 cc		               lda  #<a2hexpos
.0bf0	a0 0d		               ldy  #>a2hexpos
.0bf2	20 85 0b	               jsr  putsxy
.0bf5	68		               pla
.0bf6	28		               plp
.0bf7	60		               rts
.0bf8			putrahexcxy
.0bf8	08		               php
.0bf9	20 23 0e	               jsr  a2hex
.0bfc	a9 cc		               lda  #<a2hexpos
.0bfe	a0 0d		               ldy  #>a2hexpos
.0c00	20 ae 0b	               jsr  putscxy
.0c03	68		               pla
.0c04	28		               plp
.0c05	60		               rts
.0c06			setinverse
.0c06	48		               pha
.0c07	a9 12		               lda  #$12
.0c09	20 d2 ff	               jsr  $ffd2
.0c0c	68		               pla
.0c0d	60		               rts
.0c0e			clrinverse
.0c0e	48		               pha
.0c0f	a9 92		               lda  #$92
.0c11	20 d2 ff	               jsr  $ffd2
.0c14	68		               pla
.0c15	60		               rts

;******  Return to file: graph.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.0c16			push
.0c16	08		          php            ; stack : flg, pcl, pch
.0c17	78		          sei
.0c18	8d 52 0c	          sta  ra        ; save a
.0c1b	68		          pla            ; stack : pcl, pch
.0c1c	8d 51 0c	          sta  rp        ; save rp
.0c1f	68		          pla            ; stack : pch
.0c20	8d 53 0c	          sta  pc        ; save pcl
.0c23	68		          pla            ; stack : -
.0c24	8d 54 0c	          sta  pc+1      ; save pch
.0c27	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0c29	48		          pha            ; stack : zp1l
.0c2a	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0c2c	48		          pha            ; stack : zp1h, zp1l
.0c2d	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0c2f	48		          pha            ; stack : zp2l, zp1h, zp1l
.0c30	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0c32	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0c33	ad 51 0c	          lda  rp        ; get rp
.0c36	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0c37	ad 52 0c	          lda  ra        ; get a
.0c3a	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0c3b	8a		          txa            ; get x
.0c3c	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c3d	98		          tya            ; get y
.0c3e	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c3f	ad 54 0c	          lda  pc+1      ; get pch
.0c42	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c43	ad 53 0c	          lda  pc        ; get pcl
.0c46	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c47	ad 51 0c	          lda  rp        ; get rp
.0c4a	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c4b	ad 52 0c	          lda  ra        ; get a
.0c4e	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c4f	58		          cli
.0c50	60		          rts
>0c51	00		rp        .byte     0
>0c52	00		ra        .byte     0
>0c53	00 00		pc        .word     0
.0c55			pull
.0c55			pop
.0c55	78		          sei
.0c56	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c57	8d 8a 0c	          sta  pc        ; save pcl
.0c5a	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c5b	8d 8b 0c	          sta  pc+1      ; save pch
.0c5e	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c5f	a8		          tay            ; set y
.0c60	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0c61	aa		          tax            ; set x
.0c62	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0c63	8d 89 0c	          sta  ra        ; save a
.0c66	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0c67	8d 88 0c	          sta  rp        ; save rp
.0c6a	68		          pla            ; stack : zp2l, zp1h, zp1l
.0c6b	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0c6d	68		          pla            ; stack : zp1h, zp1l
.0c6e	85 fd		          sta  zpage2    ; get zpage2 High byte
.0c70	68		          pla            ; stack : zp1l
.0c71	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0c73	68		          pla            ; stack :
.0c74	85 fb		          sta  zpage1    ; get zpage1 High byte
.0c76	ad 8b 0c	          lda  pc+1      ; get pch
.0c79	48		          pha            ; stack : pch
.0c7a	ad 8a 0c	          lda  pc
.0c7d	48		          pha            ; stack : pcl, pch
.0c7e	ad 88 0c	          lda  rp        ; get rp
.0c81	48		          pha            ; stack : rp, pcl, pch
.0c82	ad 89 0c	          lda  ra        ; set ra
.0c85	58		          cli
.0c86	28		          plp            ; stack : pcl, pch
.0c87	60		          rts
>0c88	00		rp        .byte     0
>0c89	00		ra        .byte     0
>0c8a	00 00		pc        .word     0

;******  Return to file: graph.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.0c8c			blkfill
.0c8c	20 16 0c	bf0            jsr  push
.0c8f	20 4a 0d	               jsr  savezp1
.0c92	84 fc		               sty  zpage1+1
.0c94	a0 00		               ldy  #$00
.0c96	84 fb		               sty  zpage1
.0c98	91 fb		bf1            sta  (zpage1),y
.0c9a	c8		               iny
.0c9b	d0 fb		               bne  bf1
.0c9d	20 59 0d	               jsr  restzp1
.0ca0	20 55 0c	               jsr  pop
.0ca3	60		               rts
.0ca4			memfill
.0ca4	20 16 0c	               jsr  push
.0ca7	20 8c 0c	mf1            jsr  blkfill
.0caa	c8		               iny
.0cab	ca		               dex
.0cac	d0 f9		               bne  mf1
.0cae	20 55 0c	               jsr  pop
.0cb1	60		               rts
.0cb2			memmove
.0cb2	20 16 0c	               jsr  push
.0cb5	ba		               tsx            ; On se crée un pointeur ...
.0cb6	8a		               txa
.0cb7	18		               clc
.0cb8	69 0b		               adc  #11
.0cba	a8		               tay
.0cbb	a2 06		               ldx  #$06
.0cbd	b9 00 01	nextbyte       lda  $0100,y
.0cc0	99 0c 0d	               sta  words,y
.0cc3	c8		               iny
.0cc4	ca		               dex
.0cc5	d0 f6		               bne  nextbyte
.0cc7	ad 0c 0d	               lda  s
.0cca	8d e3 0c	               sta  source+1
.0ccd	ad 0d 0d	               lda  s+1
.0cd0	8d e4 0c	               sta  source+2
.0cd3	ad 0e 0d	               lda  d
.0cd6	8d e0 0c	               sta  destin+1
.0cd9	ad 0f 0d	               lda  d+1
.0cdc	8d e1 0c	               sta  destin+2
.0cdf	ad ff ff	destin         lda  $ffff
.0ce2	8d ff ff	source         sta  $ffff
.0ce5	ee e0 0c	               inc  destin+1
.0ce8	d0 03		               bne  src
.0cea	ee e1 0c	               inc  destin+2
.0ced	ee e3 0c	src            inc  source+1
.0cf0	d0 03		               bne  cnt
.0cf2	ee e4 0c	               inc  source+2
.0cf5	ad 10 0d	cnt            lda  compte
.0cf8	d0 08		               bne  decit
.0cfa	ad 11 0d	               lda  compte+1
.0cfd	f0 09		               beq  fini
.0cff	ce 11 0d	               dec  compte+1
.0d02	ce 10 0d	decit          dec  compte
.0d05	4c df 0c	               jmp  destin
.0d08	20 55 0c	fini           jsr  pop
.0d0b	60		               rts
.0d0c			words
>0d0c	00 00		s         .word     $0000
>0d0e	00 00		d         .word     $0000
>0d10	00 00		compte    .word     $0000
.0d12			decword
.0d12	20 16 0c	               jsr  push
.0d15	86 fd		               stx  zpage2
.0d17	84 fe		               sty  zpage2+1
.0d19	20 55 0c	               jsr  pop
.0d1c	60		               rts
.0d1d			inczp1
.0d1d	08		               php
.0d1e	e6 fb		               inc  zpage1
.0d20	d0 02		               bne  nopage
.0d22	e6 fc		               inc  zpage1+1
.0d24	28		nopage         plp
.0d25	60		               rts
.0d26			deczp1
.0d26	08		                php
.0d27	48		                pha
.0d28	c6 fb		                dec  zpage1
.0d2a	d0 02		                bne  nopage
.0d2c	c6 fc		                dec  zpage1+1
.0d2e	c6 fb		nopage          dec  zpage1
.0d30	68		                pla
.0d31	28		                plp
.0d32	60		                rts
.0d33			inczp2
.0d33	08		               php
.0d34	48		               pha
.0d35	e6 fd		               inc  zpage2
.0d37	d0 02		               bne  nopage
.0d39	e6 fe		               inc  zpage2+1
.0d3b	68		nopage         pla
.0d3c	28		               plp
.0d3d	60		               rts
.0d3e			deczp2
.0d3e	08		               php
.0d3f	48		               pha
.0d40	a5 fd		               lda  zpage2
.0d42	d0 02		               bne  nopage
.0d44	c6 fe		               dec  zpage2+1
.0d46	c6 fd		nopage         dec  zpage2
.0d48	28		               plp
.0d49	60		               rts
.0d4a			savezp1
.0d4a	08		               php
.0d4b	48		               pha
.0d4c	a5 fb		               lda  zpage1
.0d4e	8d c6 0d	               sta  zp1
.0d51	a5 fc		               lda  zpage1+1
.0d53	8d c7 0d	               sta  zp1+1
.0d56	68		               pla
.0d57	28		               plp
.0d58	60		               rts
.0d59			restzp1
.0d59	08		               php
.0d5a	48		               pha
.0d5b	ad c6 0d	               lda zp1
.0d5e	85 fb		               sta zpage1
.0d60	ad c7 0d	               lda zp1+1
.0d63	85 fc		               sta zpage1+1
.0d65	68		               pla
.0d66	28		               plp
.0d67	60		               rts
.0d68			savezp2
.0d68	08		         php
.0d69	48		         pha
.0d6a	a5 fd		         lda zpage2
.0d6c	8d c8 0d	         sta zp2
.0d6f	a5 fe		         lda zpage2+1
.0d71	8d c9 0d	         sta zp2+1
.0d74	68		         pla
.0d75	28		         plp
.0d76	60		         rts
.0d77			restzp2
.0d77	08		                php
.0d78	48		                pha
.0d79	ad c8 0d	                lda  zp2
.0d7c	85 fd		                sta  zpage2
.0d7e	ad c9 0d	                lda  zp2+1
.0d81	85 fe		                sta  zpage2+1
.0d83	68		                pla
.0d84	28		                plp
.0d85	60		                rts
.0d86			xy2addr
.0d86	08		                php
.0d87	48		                pha
.0d88	8a		                txa
.0d89	48		                pha
.0d8a	98		                tya
.0d8b	48		                pha
.0d8c	ad c1 0d	                lda     addr1+1
.0d8f	8d c3 0d	                sta     addr2+1
.0d92	ad c0 0d	                lda     addr1
.0d95	8d c2 0d	                sta     addr2
.0d98	c0 00		                cpy     #$00
.0d9a	f0 0f		                beq     addx
.0d9c	18		moreline        clc
.0d9d	6d bf 0d	                adc     ymult
.0da0	90 03		                bcc     norepy
.0da2	ee c3 0d	                inc     addr2+1
.0da5	8d c2 0d	norepy          sta     addr2
.0da8	88		                dey
.0da9	d0 f1		                bne     moreline
.0dab	8a		addx            txa
.0dac	18		                clc
.0dad	6d c2 0d	                adc     addr2
.0db0	90 03		                bcc     thatsit
.0db2	ee c3 0d	                inc     addr2+1
.0db5	8d c2 0d	thatsit         sta     addr2
.0db8	68		                pla
.0db9	a8		                tay
.0dba	68		                pla
.0dbb	aa		                tax
.0dbc	68		                pla
.0dbd	28		                plp
.0dbe	60		                rts
>0dbf	28		ymult          .byte     40
>0dc0	00 00		addr1          .word     $0000
>0dc2	00 00		addr2          .word     $0000
>0dc4	00 00		bytecnt        .word     $0000
>0dc6	00 00		zp1        .word   $0000
>0dc8	00 00		zp2        .word   $0000

;******  Return to file: graph.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>0dca	01		a2hexcol       .byte     1              ; pour aputscxy
>0dcb	00		a2hexbkcol     .byte     %00000000
.0dcc			a2hexpos
>0dcc	00		a2hexpx        .byte     0              ; pour aputsxy
>0dcd	00		a2hexpy        .byte     0
>0dce	24		a2hexprefix    .byte     "$"            ; pour aputs
>0dcf	00 00		a2hexstr       .word     $00
>0dd1	00 00		               .word     $00
>0dd3	00		               .byte     0              ; 0 end string
.0dd4			putahexfmtxy
.0dd4	20 16 0c	               jsr  push
.0dd7	20 23 0e	               jsr  a2hex
.0dda	ae cc 0d	               ldx  a2hexpx
.0ddd	ac cd 0d	               ldy  a2hexpy
.0de0	20 3f 0b	               jsr  gotoxy
.0de3	a2 ce		               ldx  #<a2hexprefix
.0de5	a0 0d		               ldy  #>a2hexprefix
.0de7	20 25 0b	               jsr  puts
.0dea	20 55 0c	               jsr  pop
.0ded	60		               rts
.0dee			putahexfmt
.0dee	20 16 0c	               jsr  push
.0df1	20 23 0e	               jsr  a2hex
.0df4	a2 ce		               ldx  #<a2hexprefix
.0df6	a0 0d		               ldy  #>a2hexprefix
.0df8	20 25 0b	               jsr  puts
.0dfb	20 55 0c	               jsr  pop
.0dfe	60		               rts
.0dff			putahex
.0dff	20 16 0c	               jsr  push
.0e02	20 23 0e	               jsr  a2hex
.0e05	a2 cf		               ldx  #<a2hexstr
.0e07	a0 0d		               ldy  #>a2hexstr
.0e09	20 25 0b	               jsr  puts
.0e0c	20 55 0c	               jsr  pop
.0e0f	60		               rts
.0e10			nib2hex
.0e10	08		               php
.0e11	29 0f		               and  #$0f
.0e13	f8		               sed
.0e14	18		               clc
.0e15	69 90		               adc  #$90
.0e17	69 40		               adc  #$40
.0e19	d8		               cld
.0e1a	28		               plp
.0e1b	60		               rts
.0e1c			lsra4bits
.0e1c	08		               php
.0e1d	4a		               lsr
.0e1e	4a		               lsr
.0e1f	4a		               lsr
.0e20	4a		               lsr
.0e21	28		               plp
.0e22	60		               rts
.0e23			a2hex
.0e23	08		               php
.0e24	48		               pha
.0e25	48		               pha
.0e26	20 1c 0e	               jsr  lsra4bits
.0e29	20 10 0e	               jsr  nib2hex
.0e2c	8d cf 0d	               sta  a2hexstr
.0e2f	68		               pla
.0e30	20 10 0e	               jsr  nib2hex
.0e33	8d d0 0d	               sta  a2hexstr+1
.0e36	a9 00		               lda  #$00                ; set end of string
.0e38	8d d1 0d	               sta  a2hexstr+2
.0e3b	68		               pla
.0e3c	28		               plp
.0e3d	60		               rts
.0e3e			xy2hex
.0e3e	20 16 0c	               jsr  push
.0e41	20 23 0e	               jsr  a2hex
.0e44	8a		               txa
.0e45	48		               pha
.0e46	20 1c 0e	               jsr  lsra4bits
.0e49	20 10 0e	               jsr  nib2hex
.0e4c	8d cf 0d	               sta  a2hexstr
.0e4f	68		               pla
.0e50	20 10 0e	               jsr  nib2hex
.0e53	8d d0 0d	               sta  a2hexstr+1
.0e56	98		               tya
.0e57	48		               pha
.0e58	20 1c 0e	               jsr  lsra4bits
.0e5b	20 10 0e	               jsr  nib2hex
.0e5e	8d d1 0d	               sta  a2hexstr+2
.0e61	68		               pla
.0e62	20 10 0e	               jsr  nib2hex
.0e65	8d d2 0d	               sta  a2hexstr+3
.0e68	a9 00		               lda  #$00                ; 0 ended string
.0e6a	8d d3 0d	               sta  a2hexstr+4
.0e6d	20 55 0c	               jsr  pop
.0e70			atobin
.0e70	20 16 0c	               jsr     push
.0e73	a2 08		               ldx     #8
.0e75	a0 00		               ldy     #0
.0e77	2a		nextbit        rol
.0e78	48		               pha
.0e79	69 00		               adc     #$00
.0e7b	29 01		               and     #$01
.0e7d	20 10 0e	               jsr     nib2hex
.0e80	99 91 0e	               sta     abin,y
.0e83	68		               pla
.0e84	c8		               iny
.0e85	ca		               dex
.0e86	d0 ef		               bne     nextbit
.0e88	a9 00		               lda     #0
.0e8a	99 91 0e	               sta     abin,y
.0e8d	20 55 0c	               jsr     pull
.0e90	60		               rts
>0e91	30 30 30 30	abin           .null   "00000000"
>0e95	30 30 30 30 00
.0e9a			putabin
.0e9a	20 70 0e	               jsr     atobin
.0e9d	20 16 0c	               jsr     push
.0ea0	a2 91		               ldx     #<abin
.0ea2	a0 0e		               ldy     #>abin
.0ea4	20 25 0b	               jsr     puts
.0ea7	20 55 0c	               jsr     pop
.0eaa	60		               rts
.0eab			putabinfmt
.0eab	08		               php
.0eac	48		               pha
.0ead	a9 25		               lda     #"%"
.0eaf	20 1f 0b	               jsr     putch
.0eb2	68		               pla
.0eb3	20 9a 0e	               jsr     putabin
.0eb6	28		               plp
.0eb7	60		               rts
.0eb8			putabinxy
.0eb8	20 3f 0b	               jsr     gotoxy
.0ebb	20 9a 0e	               jsr     putabin
.0ebe	60		               rts
.0ebf			putabinfmtxy
.0ebf	20 3f 0b	               jsr     gotoxy
.0ec2	20 ab 0e	               jsr     putabinfmt
.0ec5	60		               rts

;******  Return to file: graph.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

.0ec6			waitstop
.0ec6	20 16 0c	                jsr     push
.0ec9	20 ed f6	wait            jsr     k_stop
.0ecc	d0 fb		                bne     wait
.0ece	20 55 0c	                jsr     pop
.0ed1	60		                rts
.0ed2			anykey
.0ed2	08		                php
.0ed3	48		                pha
.0ed4	a5 cb		nokey           lda 203
.0ed6	c9 40		                cmp #64
.0ed8	f0 fa		                beq nokey
.0eda	68		                pla
.0edb	28		                plp
.0edc	60		                rts
.0edd			releasekey
.0edd	08		                php
.0ede	48		                pha
.0edf	a5 cb		keypressed      lda 203
.0ee1	c9 40		                cmp #64
.0ee3	d0 fa		                bne keypressed
.0ee5	68		                pla
.0ee6	28		                plp
.0ee7	60		                rts
.0ee8			getkey
.0ee8	20 16 0c	                jsr     push
.0eeb	20 cf ff	again           jsr     chrin
.0eee	4c eb 0e	                jmp     again
.0ef1	20 55 0c	                jsr     pop
.0ef4	60		                rts
.0ef5			waitkey
.0ef5	20 16 0c	                jsr     push
.0ef8	8d 0d 0f	                sta     thekey
.0efb	20 e4 ff	nope            jsr     getin
.0efe	20 d2 ff	                jsr     chrout
.0f01	cd 0d 0f	                cmp     thekey
.0f04	d0 f5		                bne     nope
.0f06	20 d2 ff	                jsr     chrout
.0f09	20 55 0c	                jsr     pop
.0f0c	60		                rts
>0f0d	00		thekey          .byte   0
.0f0e			waitspace
.0f0e	20 16 0c	                jsr     push
.0f11	a9 7f		wait            lda     #$7f  ;%01111111
.0f13	8d 00 dc	                sta     $dc00
.0f16	ad 01 dc	                lda     $dc01
.0f19	29 10		                and     #$10  ;mask %00010000
.0f1b	d0 f4		                bne     wait
.0f1d	20 55 0c	                jsr     pop
.0f20			waitsstop
.0f20	20 16 0c	                jsr     push
.0f23	20 ed f6	wait            jsr     k_stop  ;%01111111
.0f26	d0 fb		                bne     wait
.0f28	20 55 0c	                jsr     pop
.0f2b			waitreturn
.0f2b	20 16 0c	                jsr     push
.0f2e	ad 4a 0f	                lda     thecount
.0f31	8d 00 04	                sta     scrnram
.0f34	a9 02		                lda     #$02
.0f36	8d 00 d8	                sta     colorram
.0f39	20 e4 ff	nope            jsr     getin
.0f3c	20 d2 ff	                jsr     chrout
.0f3f	c9 0d		                cmp     #$0d
.0f41	d0 f6		                bne     nope
.0f43	ee 4a 0f	                inc     thecount
.0f46	20 55 0c	                jsr     pop
.0f49	60		                rts
>0f4a	01		thecount        .byte   $01

;******  Return to file: graph.asm


;******  End of listing

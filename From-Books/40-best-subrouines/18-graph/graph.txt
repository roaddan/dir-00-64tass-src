
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L graph.txt -o graph.prg graph.asm
; Sun May 28 20:14:26 2023

;Offset	;Hex		;Source

;******  Processing input file: graph.asm

="220230527-222511"	                Version = "220230527-222511"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: graph.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: graph.asm

.080d			main
.080d	20 f0 0a	                jsr scrmaninit
.0810	20 32 08	                jsr help
.0813	20 d3 0e	                jsr anykey
.0816	20 de 0e	                jsr releasekey
.0819	20 7a 0a	                jsr graph
.081c	20 d3 0e	                jsr anykey
.081f	20 de 0e	                jsr releasekey
.0822	20 a2 0a	                jsr clg
.0825	20 d3 0e	                jsr anykey
.0828	20 de 0e	                jsr releasekey
.082b	20 90 0a	                jsr nrm
.082e	20 f0 0a	                jsr scrmaninit
.0831	60		                rts
.0832			help
.0832	20 11 0b	                jsr cls
.0835	a2 b8		                ldx  #<line
.0837	a0 09		                ldy  #>line
.0839	20 26 0b	                jsr  puts
.083c	a2 60		                ldx  #<headera
.083e	a0 08		                ldy  #>headera
.0840	20 26 0b	                jsr  puts
.0843	a2 e2		                ldx  #<headerb
.0845	a0 08		                ldy  #>headerb
.0847	20 26 0b	                jsr  puts
.084a	a2 64		                ldx  #<shortcuts
.084c	a0 09		                ldy  #>shortcuts
.084e	20 26 0b	                jsr  puts
.0851	a2 e1		                ldx  #<helptext
.0853	a0 09		                ldy  #>helptext
.0855	20 26 0b	                jsr  puts
.0858	a2 b8		                ldx  #<line
.085a	a0 09		                ldy  #>line
.085c	20 26 0b	                jsr  puts
.085f	60		                rts
.0860			headera
>0860	20 20 20 20	                .text          "     40 BEST MACHINE CODE ROUTINES"
>0864	20 34 30 20 c2 c5 d3 d4 20 cd c1 c3 c8 c9 ce c5
>0874	20 c3 cf c4 c5 20 d2 cf d5 d4 c9 ce c5 d3
>0882	0d		                .byte   $0d
>0883	20 20 20 20	                .text          "          FOR THE COMMODORE 64"
>0887	20 20 20 20 20 20 c6 cf d2 20 d4 c8 c5 20 c3 cf
>0897	cd cd cf c4 cf d2 c5 20 36 34
>08a1	0d		                .byte   $0d
>08a2	20 20 20 20	                .text          "       Book by Mark Greenshields."
>08a6	20 20 20 c2 4f 4f 4b 20 42 59 20 cd 41 52 4b 20
>08b6	c7 52 45 45 4e 53 48 49 45 4c 44 53 2e
>08c3	0d		                .byte   $0d
>08c4	20 20 20 20	                .text          "          ISBN 0-7156-1899-7"
>08c8	20 20 20 20 20 20 c9 d3 c2 ce 20 30 2d 37 31 35
>08d8	36 2d 31 38 39 39 2d 37
>08e0	0d 00		                .byte   $0d,0
>08e2	20 20 20 20	headerb         .text          "              graph (p78)"
>08e6	20 20 20 20 20 20 20 20 20 20 47 52 41 50 48 20
>08f6	28 50 37 38 29
>08fb	0d		                .byte   $0d
>08fc	20 20 20 20	                .text          "        (c) 1979 Brad Templeton"
>0900	20 20 20 20 28 43 29 20 31 39 37 39 20 c2 52 41
>0910	44 20 d4 45 4d 50 4c 45 54 4f 4e
>091b	0d		                .byte   $0d
>091c	20 20 20 20	                .text          "     programmed by Daniel Lafrance."
>0920	20 50 52 4f 47 52 41 4d 4d 45 44 20 42 59 20 c4
>0930	41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e
>093f	0d		                .byte   $0d
>0940	20 20 20 20	                .text   format("        Version: %s.",Version)
>0944	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 32 30
>0954	32 33 30 35 32 37 2d 32 32 32 35 31 31 2e
>0962	0d 00		                .byte   $0d,0
>0964	20 2d 2d 2d	shortcuts       .text          " -------- S H O R T - C U T S ---------"
>0968	2d 2d 2d 2d 2d 20 d3 20 c8 20 cf 20 d2 20 d4 20
>0978	2d 20 c3 20 d5 20 d4 20 d3 20 2d 2d 2d 2d 2d 2d
>0988	2d 2d 2d
>098b	0d		                .byte   $0d
>098c	20 52 55 4e	                .text   format(" run=SYS%5d, help=SYS%5d",main, help)
>0990	3d d3 d9 d3 20 32 30 36 31 2c 20 48 45 4c 50 3d
>09a0	d3 d9 d3 20 32 30 39 38
>09a8	0d		                .byte   $0d
>09a9	20 43 4c 53	                .text   format(" cls=SYS%5d",cls)
>09ad	3d d3 d9 d3 20 32 38 33 33
>09b6	0d 00		                .byte   $0d,0
>09b8	20 2d 2d 2d	line            .text          " --------------------------------------"
>09bc	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09cc	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09dc	2d 2d 2d
>09df	0d 00		                .byte   $0d,0
>09e1	20 d0 52 45	helptext        .text   format(" Prepare to graph  : SYS%5d",graph)
>09e5	50 41 52 45 20 54 4f 20 47 52 41 50 48 20 20 3a
>09f5	20 d3 d9 d3 20 32 36 38 32
>09fe	0d		                .byte   $0d
>09ff	20 47 52 41	                .text   format(" graph.....: SYS%5d",graph)
>0a03	50 48 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 32 36 38
>0a13	32
>0a14	0d		                .byte   $0d
>0a15	20 43 4c 47	                .text   format(" clg.......: SYS%5d,fgcol,bgcol",clg)
>0a19	2e 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 32 37 32
>0a29	32 2c 46 47 43 4f 4c 2c 42 47 43 4f 4c
>0a36	0d		                .byte   $0d
>0a37	20 4e 52 4d	                .text   format(" nrm.......: SYS%5d",nrm)
>0a3b	2e 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 32 37 30
>0a4b	34
>0a4c	0d		                .byte   $0d
>0a4d	20 41 4e 59	                .text   format(" anykey....: SYS%5d",anykey)
>0a51	4b 45 59 2e 2e 2e 2e 3a 20 d3 d9 d3 20 33 37 39
>0a61	35
>0a62	0d		                .byte   $0d
>0a63	20 52 45 4c	                .text   format(" releasekey: SYS%5d",releasekey)
>0a67	45 41 53 45 4b 45 59 3a 20 d3 d9 d3 20 33 38 30
>0a77	36
>0a78	0d 00		                .byte   $0d,0
.0a7a			graph
.0a7a	48		                pha
.0a7b	a9 16		                lda #$16
.0a7d	8d 00 dd	                sta cia2pra   ;56576
.0a80	a9 08		                lda #8
.0a82	8d 18 d0	                sta vicmemptr ;53272
.0a85	ad 11 d0	                lda vicctrl0v ; 53265
.0a88	09 20		                ora #32
.0a8a	8d 11 d0	                sta vicctrl0v ; 53265
.0a8d	68		                pla
.0a8e	60		                rts
>0a8f	00		byte            .byte 0
.0a90			nrm
.0a90	48		                pha
.0a91	a9 15		                lda #21
.0a93	8d 18 d0	                sta vicmemptr ; 53272
.0a96	a9 1b		                lda #27
.0a98	8d 11 d0	                sta vicctrl0v ; 53265
.0a9b	a9 17		                lda #23
.0a9d	8d 00 dd	                sta cia2pra   ;56576
.0aa0	68		                pla
.0aa1	60		                rts
.0aa2			clg
.0aa2	08		                php
.0aa3	48		                pha
.0aa4			more
.0aa4	ad ef 0a	                lda colour
.0aa7	29 0f		                and #$0f
.0aa9	8d ef 0a	                sta colour
.0aac	8d ee 0a	                sta fin
.0aaf	ee ef 0a	                inc colour
.0ab2			more1
.0ab2	a9 01		                lda #1
.0ab4	0a		                asl a
.0ab5	0a		                asl a
.0ab6	0a		                asl a
.0ab7	0a		                asl a
.0ab8	0d ee 0a	                ora fin
.0abb	8d ee 0a	                sta fin
.0abe	a9 00		                lda #0
.0ac0	85 60		                sta $60
.0ac2	a9 60		                lda #96
.0ac4	85 fc		                sta $fc
.0ac6	a0 00		                ldy #0
.0ac8	a9 00		                lda #0
.0aca	91 fb		loop            sta ($fb),y
.0acc	c8		                iny
.0acd	d0 fb		                bne loop
.0acf	e6 fc		                inc $fc
.0ad1	a6 fc		                ldx $fc
.0ad3	e0 80		                cpx #128
.0ad5	d0 f3		                bne loop
.0ad7	ad ee 0a	                lda fin
.0ada	a2 00		                ldx #0
.0adc	9d 00 40	loop1           sta $4000,x
.0adf	9d 00 41	                sta $4100,x
.0ae2	9d 00 42	                sta $4200,x
.0ae5	9d 00 43	                sta $4300,x
.0ae8	e8		                inx
.0ae9	d0 f1		                bne loop1
.0aeb	68		                pla
.0aec	28		                plp
.0aed	60		                rts
>0aee	00		fin             .byte 0
>0aef	00		colour          .byte 0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ; 97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.0af0			libtart

;******  Return to file: graph.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: graph.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: graph.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0af0			scrmaninit
.0af0	20 17 0c	               jsr  push
.0af3	a9 06		               lda  #vbleu
.0af5	8d 21 d0	               sta  vicbackcol
.0af8	a9 05		               lda  #vvert
.0afa	8d 20 d0	               sta  vicbordcol
.0afd	a9 01		               lda  #vblanc
.0aff	8d 86 02	               sta  bascol
.0b02	ad 00 04	               lda  scrnram
.0b05	29 fd		               and  #%11111101
.0b07	8d 00 04	               sta  scrnram
.0b0a	20 11 0b	               jsr  cls
.0b0d	20 56 0c	               jsr  pop
.0b10	60		               rts
.0b11			cls
.0b11	08		               php
.0b12	48		               pha
.0b13	a9 93		               lda  #$93
.0b15	20 20 0b	               jsr  putch
.0b18	a9 0e		               lda  #$0e
.0b1a	20 20 0b	               jsr  putch
.0b1d	68		               pla
.0b1e	28		               plp
.0b1f	60		               rts
.0b20			putch
.0b20	08		               php
.0b21	20 d2 ff	               jsr  $ffd2
.0b24	28		               plp
.0b25	60		               rts
.0b26			puts
.0b26	20 17 0c	               jsr  push
.0b29	86 fb		               stx  zpage1
.0b2b	84 fc		               sty  zpage1+1
.0b2d	a0 00		               ldy  #0
.0b2f	b1 fb		next           lda  (zpage1),y
.0b31	f0 09		               beq  exit
.0b33	20 20 0b	               jsr  putch
.0b36	20 1e 0d	               jsr  inczp1
.0b39	4c 2f 0b	               jmp  next
.0b3c	20 56 0c	exit           jsr  pop
.0b3f	60		               rts
.0b40			gotoxy
.0b40	08		               php
.0b41	18		               clc
.0b42	8a		               txa
.0b43	48		               pha
.0b44	98		               tya
.0b45	aa		               tax
.0b46	68		               pla
.0b47	a8		               tay
.0b48	20 f0 ff	               jsr  kplot
.0b4b	28		               plp
.0b4c	60		               rts
.0b4d			cursor
=$0286			bascol    =    $0286
.0b4d	08		               php
.0b4e	48		               pha
.0b4f	90 12		               bcc  restore
.0b51	20 f0 ff	               jsr  kplot
.0b54	8c 75 0b	               sty  cx
.0b57	8e 76 0b	               stx  cy
.0b5a	ad 86 02	               lda  bascol
.0b5d	8d 77 0b	               sta  bcol
.0b60	4c 72 0b	               jmp  out
.0b63	ae 76 0b	restore        ldx  cy
.0b66	ac 75 0b	               ldy  cx
.0b69	20 f0 ff	               jsr  kplot
.0b6c	ad 77 0b	               lda  bcol
.0b6f	8d 86 02	               sta  bascol
.0b72	68		out            pla
.0b73	28		               plp
.0b74	60		               rts
>0b75	00		cx   .byte     $00
>0b76	00		cy   .byte     $00
>0b77	00		bcol .byte     $00
.0b78			cursave
.0b78	08		               php
.0b79	38		               sec
.0b7a	20 4d 0b	               jsr  cursor
.0b7d	28		               plp
.0b7e	60		               rts
.0b7f			curput
.0b7f	08		               php
.0b80	18		               clc
.0b81	20 4d 0b	               jsr  cursor
.0b84	28		               plp
.0b85	60		               rts
.0b86			putsxy
.0b86	20 17 0c	               jsr  push
.0b89	86 fb		               stx  zpage1
.0b8b	84 fc		               sty  zpage1+1
.0b8d	a0 00		               ldy  #$00
.0b8f	b1 fb		               lda  (zpage1),y
.0b91	aa		               tax
.0b92	20 1e 0d	               jsr  inczp1
.0b95	b1 fb		               lda  (zpage1),y
.0b97	a8		               tay
.0b98	20 40 0b	               jsr  gotoxy
.0b9b	20 1e 0d	               jsr  inczp1
.0b9e	a6 fb		               ldx  zpage1
.0ba0	a4 fc		               ldy  zpage1+1
.0ba2	20 26 0b	               jsr  puts
.0ba5	20 56 0c	               jsr  pop
.0ba8	60		               rts
>0ba9	00 00		straddr   .word     $00
>0bab	00		px        .byte     $00
>0bac	00		py        .byte     $00
>0bad	00 00		zp1       .word     $00
.0baf			putscxy
.0baf	20 17 0c	               jsr  push
.0bb2	84 fc		               sty  zpage1+1
.0bb4	86 fb		               stx  zpage1
.0bb6	ad 86 02	               lda  bascol
.0bb9	8d d9 0b	               sta  bc
.0bbc	a0 00		               ldy #$00
.0bbe	b1 fb		               lda  (zpage1),y
.0bc0	8d 86 02	               sta  bascol
.0bc3	20 1e 0d	               jsr  inczp1
.0bc6	a6 fb		               ldx  zpage1
.0bc8	a4 fc		               ldy  zpage1+1
.0bca	20 86 0b	               jsr  putsxy
.0bcd	ad d9 0b	               lda  bc
.0bd0	8d 86 02	               sta  bascol
.0bd3	20 56 0c	               jsr  pop
.0bd6	60		               rts
>0bd7	00 00		straddr  .word      $00
>0bd9	00		bc       .byte      $00
>0bda	00 00		zp1      .word      $00
.0bdc			putrahex
.0bdc	08		               php
.0bdd	48		               pha
.0bde	20 24 0e	               jsr  a2hex
.0be1	a9 d0		               lda  #<a2hexstr
.0be3	a0 0d		               ldy  #>a2hexstr
.0be5	20 26 0b	               jsr  puts
.0be8	68		               pla
.0be9	28		               plp
.0bea	60		               rts
.0beb			kputrahexxy
.0beb			bputrahexxy
.0beb			putrahexxy
.0beb	08		               php
.0bec	20 24 0e	               jsr  a2hex
.0bef	a9 cd		               lda  #<a2hexpos
.0bf1	a0 0d		               ldy  #>a2hexpos
.0bf3	20 86 0b	               jsr  putsxy
.0bf6	68		               pla
.0bf7	28		               plp
.0bf8	60		               rts
.0bf9			putrahexcxy
.0bf9	08		               php
.0bfa	20 24 0e	               jsr  a2hex
.0bfd	a9 cd		               lda  #<a2hexpos
.0bff	a0 0d		               ldy  #>a2hexpos
.0c01	20 af 0b	               jsr  putscxy
.0c04	68		               pla
.0c05	28		               plp
.0c06	60		               rts
.0c07			setinverse
.0c07	48		               pha
.0c08	a9 12		               lda  #$12
.0c0a	20 d2 ff	               jsr  $ffd2
.0c0d	68		               pla
.0c0e	60		               rts
.0c0f			clrinverse
.0c0f	48		               pha
.0c10	a9 92		               lda  #$92
.0c12	20 d2 ff	               jsr  $ffd2
.0c15	68		               pla
.0c16	60		               rts

;******  Return to file: graph.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.0c17			push
.0c17	08		          php            ; stack : flg, pcl, pch
.0c18	78		          sei
.0c19	8d 53 0c	          sta  ra        ; save a
.0c1c	68		          pla            ; stack : pcl, pch
.0c1d	8d 52 0c	          sta  rp        ; save rp
.0c20	68		          pla            ; stack : pch
.0c21	8d 54 0c	          sta  pc        ; save pcl
.0c24	68		          pla            ; stack : -
.0c25	8d 55 0c	          sta  pc+1      ; save pch
.0c28	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0c2a	48		          pha            ; stack : zp1l
.0c2b	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0c2d	48		          pha            ; stack : zp1h, zp1l
.0c2e	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0c30	48		          pha            ; stack : zp2l, zp1h, zp1l
.0c31	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0c33	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0c34	ad 52 0c	          lda  rp        ; get rp
.0c37	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0c38	ad 53 0c	          lda  ra        ; get a
.0c3b	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0c3c	8a		          txa            ; get x
.0c3d	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c3e	98		          tya            ; get y
.0c3f	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c40	ad 55 0c	          lda  pc+1      ; get pch
.0c43	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c44	ad 54 0c	          lda  pc        ; get pcl
.0c47	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c48	ad 52 0c	          lda  rp        ; get rp
.0c4b	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c4c	ad 53 0c	          lda  ra        ; get a
.0c4f	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c50	58		          cli
.0c51	60		          rts
>0c52	00		rp        .byte     0
>0c53	00		ra        .byte     0
>0c54	00 00		pc        .word     0
.0c56			pull
.0c56			pop
.0c56	78		          sei
.0c57	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c58	8d 8b 0c	          sta  pc        ; save pcl
.0c5b	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c5c	8d 8c 0c	          sta  pc+1      ; save pch
.0c5f	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c60	a8		          tay            ; set y
.0c61	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0c62	aa		          tax            ; set x
.0c63	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0c64	8d 8a 0c	          sta  ra        ; save a
.0c67	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0c68	8d 89 0c	          sta  rp        ; save rp
.0c6b	68		          pla            ; stack : zp2l, zp1h, zp1l
.0c6c	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0c6e	68		          pla            ; stack : zp1h, zp1l
.0c6f	85 fd		          sta  zpage2    ; get zpage2 High byte
.0c71	68		          pla            ; stack : zp1l
.0c72	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0c74	68		          pla            ; stack :
.0c75	85 fb		          sta  zpage1    ; get zpage1 High byte
.0c77	ad 8c 0c	          lda  pc+1      ; get pch
.0c7a	48		          pha            ; stack : pch
.0c7b	ad 8b 0c	          lda  pc
.0c7e	48		          pha            ; stack : pcl, pch
.0c7f	ad 89 0c	          lda  rp        ; get rp
.0c82	48		          pha            ; stack : rp, pcl, pch
.0c83	ad 8a 0c	          lda  ra        ; set ra
.0c86	58		          cli
.0c87	28		          plp            ; stack : pcl, pch
.0c88	60		          rts
>0c89	00		rp        .byte     0
>0c8a	00		ra        .byte     0
>0c8b	00 00		pc        .word     0

;******  Return to file: graph.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.0c8d			blkfill
.0c8d	20 17 0c	bf0            jsr  push
.0c90	20 4b 0d	               jsr  savezp1
.0c93	84 fc		               sty  zpage1+1
.0c95	a0 00		               ldy  #$00
.0c97	84 fb		               sty  zpage1
.0c99	91 fb		bf1            sta  (zpage1),y
.0c9b	c8		               iny
.0c9c	d0 fb		               bne  bf1
.0c9e	20 5a 0d	               jsr  restzp1
.0ca1	20 56 0c	               jsr  pop
.0ca4	60		               rts
.0ca5			memfill
.0ca5	20 17 0c	               jsr  push
.0ca8	20 8d 0c	mf1            jsr  blkfill
.0cab	c8		               iny
.0cac	ca		               dex
.0cad	d0 f9		               bne  mf1
.0caf	20 56 0c	               jsr  pop
.0cb2	60		               rts
.0cb3			memmove
.0cb3	20 17 0c	               jsr  push
.0cb6	ba		               tsx            ; On se crée un pointeur ...
.0cb7	8a		               txa
.0cb8	18		               clc
.0cb9	69 0b		               adc  #11
.0cbb	a8		               tay
.0cbc	a2 06		               ldx  #$06
.0cbe	b9 00 01	nextbyte       lda  $0100,y
.0cc1	99 0d 0d	               sta  words,y
.0cc4	c8		               iny
.0cc5	ca		               dex
.0cc6	d0 f6		               bne  nextbyte
.0cc8	ad 0d 0d	               lda  s
.0ccb	8d e4 0c	               sta  source+1
.0cce	ad 0e 0d	               lda  s+1
.0cd1	8d e5 0c	               sta  source+2
.0cd4	ad 0f 0d	               lda  d
.0cd7	8d e1 0c	               sta  destin+1
.0cda	ad 10 0d	               lda  d+1
.0cdd	8d e2 0c	               sta  destin+2
.0ce0	ad ff ff	destin         lda  $ffff
.0ce3	8d ff ff	source         sta  $ffff
.0ce6	ee e1 0c	               inc  destin+1
.0ce9	d0 03		               bne  src
.0ceb	ee e2 0c	               inc  destin+2
.0cee	ee e4 0c	src            inc  source+1
.0cf1	d0 03		               bne  cnt
.0cf3	ee e5 0c	               inc  source+2
.0cf6	ad 11 0d	cnt            lda  compte
.0cf9	d0 08		               bne  decit
.0cfb	ad 12 0d	               lda  compte+1
.0cfe	f0 09		               beq  fini
.0d00	ce 12 0d	               dec  compte+1
.0d03	ce 11 0d	decit          dec  compte
.0d06	4c e0 0c	               jmp  destin
.0d09	20 56 0c	fini           jsr  pop
.0d0c	60		               rts
.0d0d			words
>0d0d	00 00		s         .word     $0000
>0d0f	00 00		d         .word     $0000
>0d11	00 00		compte    .word     $0000
.0d13			decword
.0d13	20 17 0c	               jsr  push
.0d16	86 fd		               stx  zpage2
.0d18	84 fe		               sty  zpage2+1
.0d1a	20 56 0c	               jsr  pop
.0d1d	60		               rts
.0d1e			inczp1
.0d1e	08		               php
.0d1f	e6 fb		               inc  zpage1
.0d21	d0 02		               bne  nopage
.0d23	e6 fc		               inc  zpage1+1
.0d25	28		nopage         plp
.0d26	60		               rts
.0d27			deczp1
.0d27	08		                php
.0d28	48		                pha
.0d29	c6 fb		                dec  zpage1
.0d2b	d0 02		                bne  nopage
.0d2d	c6 fc		                dec  zpage1+1
.0d2f	c6 fb		nopage          dec  zpage1
.0d31	68		                pla
.0d32	28		                plp
.0d33	60		                rts
.0d34			inczp2
.0d34	08		               php
.0d35	48		               pha
.0d36	e6 fd		               inc  zpage2
.0d38	d0 02		               bne  nopage
.0d3a	e6 fe		               inc  zpage2+1
.0d3c	68		nopage         pla
.0d3d	28		               plp
.0d3e	60		               rts
.0d3f			deczp2
.0d3f	08		               php
.0d40	48		               pha
.0d41	a5 fd		               lda  zpage2
.0d43	d0 02		               bne  nopage
.0d45	c6 fe		               dec  zpage2+1
.0d47	c6 fd		nopage         dec  zpage2
.0d49	28		               plp
.0d4a	60		               rts
.0d4b			savezp1
.0d4b	08		               php
.0d4c	48		               pha
.0d4d	a5 fb		               lda  zpage1
.0d4f	8d c7 0d	               sta  zp1
.0d52	a5 fc		               lda  zpage1+1
.0d54	8d c8 0d	               sta  zp1+1
.0d57	68		               pla
.0d58	28		               plp
.0d59	60		               rts
.0d5a			restzp1
.0d5a	08		               php
.0d5b	48		               pha
.0d5c	ad c7 0d	               lda zp1
.0d5f	85 fb		               sta zpage1
.0d61	ad c8 0d	               lda zp1+1
.0d64	85 fc		               sta zpage1+1
.0d66	68		               pla
.0d67	28		               plp
.0d68	60		               rts
.0d69			savezp2
.0d69	08		         php
.0d6a	48		         pha
.0d6b	a5 fd		         lda zpage2
.0d6d	8d c9 0d	         sta zp2
.0d70	a5 fe		         lda zpage2+1
.0d72	8d ca 0d	         sta zp2+1
.0d75	68		         pla
.0d76	28		         plp
.0d77	60		         rts
.0d78			restzp2
.0d78	08		                php
.0d79	48		                pha
.0d7a	ad c9 0d	                lda  zp2
.0d7d	85 fd		                sta  zpage2
.0d7f	ad ca 0d	                lda  zp2+1
.0d82	85 fe		                sta  zpage2+1
.0d84	68		                pla
.0d85	28		                plp
.0d86	60		                rts
.0d87			xy2addr
.0d87	08		                php
.0d88	48		                pha
.0d89	8a		                txa
.0d8a	48		                pha
.0d8b	98		                tya
.0d8c	48		                pha
.0d8d	ad c2 0d	                lda     addr1+1
.0d90	8d c4 0d	                sta     addr2+1
.0d93	ad c1 0d	                lda     addr1
.0d96	8d c3 0d	                sta     addr2
.0d99	c0 00		                cpy     #$00
.0d9b	f0 0f		                beq     addx
.0d9d	18		moreline        clc
.0d9e	6d c0 0d	                adc     ymult
.0da1	90 03		                bcc     norepy
.0da3	ee c4 0d	                inc     addr2+1
.0da6	8d c3 0d	norepy          sta     addr2
.0da9	88		                dey
.0daa	d0 f1		                bne     moreline
.0dac	8a		addx            txa
.0dad	18		                clc
.0dae	6d c3 0d	                adc     addr2
.0db1	90 03		                bcc     thatsit
.0db3	ee c4 0d	                inc     addr2+1
.0db6	8d c3 0d	thatsit         sta     addr2
.0db9	68		                pla
.0dba	a8		                tay
.0dbb	68		                pla
.0dbc	aa		                tax
.0dbd	68		                pla
.0dbe	28		                plp
.0dbf	60		                rts
>0dc0	28		ymult          .byte     40
>0dc1	00 00		addr1          .word     $0000
>0dc3	00 00		addr2          .word     $0000
>0dc5	00 00		bytecnt        .word     $0000
>0dc7	00 00		zp1        .word   $0000
>0dc9	00 00		zp2        .word   $0000

;******  Return to file: graph.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>0dcb	01		a2hexcol       .byte     1              ; pour aputscxy
>0dcc	00		a2hexbkcol     .byte     %00000000
.0dcd			a2hexpos
>0dcd	00		a2hexpx        .byte     0              ; pour aputsxy
>0dce	00		a2hexpy        .byte     0
>0dcf	24		a2hexprefix    .byte     "$"            ; pour aputs
>0dd0	00 00		a2hexstr       .word     $00
>0dd2	00 00		               .word     $00
>0dd4	00		               .byte     0              ; 0 end string
.0dd5			putahexfmtxy
.0dd5	20 17 0c	               jsr  push
.0dd8	20 24 0e	               jsr  a2hex
.0ddb	ae cd 0d	               ldx  a2hexpx
.0dde	ac ce 0d	               ldy  a2hexpy
.0de1	20 40 0b	               jsr  gotoxy
.0de4	a2 cf		               ldx  #<a2hexprefix
.0de6	a0 0d		               ldy  #>a2hexprefix
.0de8	20 26 0b	               jsr  puts
.0deb	20 56 0c	               jsr  pop
.0dee	60		               rts
.0def			putahexfmt
.0def	20 17 0c	               jsr  push
.0df2	20 24 0e	               jsr  a2hex
.0df5	a2 cf		               ldx  #<a2hexprefix
.0df7	a0 0d		               ldy  #>a2hexprefix
.0df9	20 26 0b	               jsr  puts
.0dfc	20 56 0c	               jsr  pop
.0dff	60		               rts
.0e00			putahex
.0e00	20 17 0c	               jsr  push
.0e03	20 24 0e	               jsr  a2hex
.0e06	a2 d0		               ldx  #<a2hexstr
.0e08	a0 0d		               ldy  #>a2hexstr
.0e0a	20 26 0b	               jsr  puts
.0e0d	20 56 0c	               jsr  pop
.0e10	60		               rts
.0e11			nib2hex
.0e11	08		               php
.0e12	29 0f		               and  #$0f
.0e14	f8		               sed
.0e15	18		               clc
.0e16	69 90		               adc  #$90
.0e18	69 40		               adc  #$40
.0e1a	d8		               cld
.0e1b	28		               plp
.0e1c	60		               rts
.0e1d			lsra4bits
.0e1d	08		               php
.0e1e	4a		               lsr
.0e1f	4a		               lsr
.0e20	4a		               lsr
.0e21	4a		               lsr
.0e22	28		               plp
.0e23	60		               rts
.0e24			a2hex
.0e24	08		               php
.0e25	48		               pha
.0e26	48		               pha
.0e27	20 1d 0e	               jsr  lsra4bits
.0e2a	20 11 0e	               jsr  nib2hex
.0e2d	8d d0 0d	               sta  a2hexstr
.0e30	68		               pla
.0e31	20 11 0e	               jsr  nib2hex
.0e34	8d d1 0d	               sta  a2hexstr+1
.0e37	a9 00		               lda  #$00                ; set end of string
.0e39	8d d2 0d	               sta  a2hexstr+2
.0e3c	68		               pla
.0e3d	28		               plp
.0e3e	60		               rts
.0e3f			xy2hex
.0e3f	20 17 0c	               jsr  push
.0e42	20 24 0e	               jsr  a2hex
.0e45	8a		               txa
.0e46	48		               pha
.0e47	20 1d 0e	               jsr  lsra4bits
.0e4a	20 11 0e	               jsr  nib2hex
.0e4d	8d d0 0d	               sta  a2hexstr
.0e50	68		               pla
.0e51	20 11 0e	               jsr  nib2hex
.0e54	8d d1 0d	               sta  a2hexstr+1
.0e57	98		               tya
.0e58	48		               pha
.0e59	20 1d 0e	               jsr  lsra4bits
.0e5c	20 11 0e	               jsr  nib2hex
.0e5f	8d d2 0d	               sta  a2hexstr+2
.0e62	68		               pla
.0e63	20 11 0e	               jsr  nib2hex
.0e66	8d d3 0d	               sta  a2hexstr+3
.0e69	a9 00		               lda  #$00                ; 0 ended string
.0e6b	8d d4 0d	               sta  a2hexstr+4
.0e6e	20 56 0c	               jsr  pop
.0e71			atobin
.0e71	20 17 0c	               jsr     push
.0e74	a2 08		               ldx     #8
.0e76	a0 00		               ldy     #0
.0e78	2a		nextbit        rol
.0e79	48		               pha
.0e7a	69 00		               adc     #$00
.0e7c	29 01		               and     #$01
.0e7e	20 11 0e	               jsr     nib2hex
.0e81	99 92 0e	               sta     abin,y
.0e84	68		               pla
.0e85	c8		               iny
.0e86	ca		               dex
.0e87	d0 ef		               bne     nextbit
.0e89	a9 00		               lda     #0
.0e8b	99 92 0e	               sta     abin,y
.0e8e	20 56 0c	               jsr     pull
.0e91	60		               rts
>0e92	30 30 30 30	abin           .null   "00000000"
>0e96	30 30 30 30 00
.0e9b			putabin
.0e9b	20 71 0e	               jsr     atobin
.0e9e	20 17 0c	               jsr     push
.0ea1	a2 92		               ldx     #<abin
.0ea3	a0 0e		               ldy     #>abin
.0ea5	20 26 0b	               jsr     puts
.0ea8	20 56 0c	               jsr     pop
.0eab	60		               rts
.0eac			putabinfmt
.0eac	08		               php
.0ead	48		               pha
.0eae	a9 25		               lda     #"%"
.0eb0	20 20 0b	               jsr     putch
.0eb3	68		               pla
.0eb4	20 9b 0e	               jsr     putabin
.0eb7	28		               plp
.0eb8	60		               rts
.0eb9			putabinxy
.0eb9	20 40 0b	               jsr     gotoxy
.0ebc	20 9b 0e	               jsr     putabin
.0ebf	60		               rts
.0ec0			putabinfmtxy
.0ec0	20 40 0b	               jsr     gotoxy
.0ec3	20 ac 0e	               jsr     putabinfmt
.0ec6	60		               rts

;******  Return to file: graph.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

.0ec7			waitstop
.0ec7	20 17 0c	                jsr     push
.0eca	20 ed f6	wait            jsr     k_stop
.0ecd	d0 fb		                bne     wait
.0ecf	20 56 0c	                jsr     pop
.0ed2	60		                rts
.0ed3			anykey
.0ed3	08		                php
.0ed4	48		                pha
.0ed5	a5 cb		nokey           lda 203
.0ed7	c9 40		                cmp #64
.0ed9	f0 fa		                beq nokey
.0edb	68		                pla
.0edc	28		                plp
.0edd	60		                rts
.0ede			releasekey
.0ede	08		                php
.0edf	48		                pha
.0ee0	a5 cb		keypressed      lda 203
.0ee2	c9 40		                cmp #64
.0ee4	d0 fa		                bne keypressed
.0ee6	68		                pla
.0ee7	28		                plp
.0ee8	60		                rts
.0ee9			getkey
.0ee9	20 17 0c	                jsr     push
.0eec	20 cf ff	again           jsr     chrin
.0eef	4c ec 0e	                jmp     again
.0ef2	20 56 0c	                jsr     pop
.0ef5	60		                rts
.0ef6			waitkey
.0ef6	20 17 0c	                jsr     push
.0ef9	8d 0e 0f	                sta     thekey
.0efc	20 e4 ff	nope            jsr     getin
.0eff	20 d2 ff	                jsr     chrout
.0f02	cd 0e 0f	                cmp     thekey
.0f05	d0 f5		                bne     nope
.0f07	20 d2 ff	                jsr     chrout
.0f0a	20 56 0c	                jsr     pop
.0f0d	60		                rts
>0f0e	00		thekey          .byte   0
.0f0f			waitspace
.0f0f	20 17 0c	                jsr     push
.0f12	a9 7f		wait            lda     #$7f  ;%01111111
.0f14	8d 00 dc	                sta     $dc00
.0f17	ad 01 dc	                lda     $dc01
.0f1a	29 10		                and     #$10  ;mask %00010000
.0f1c	d0 f4		                bne     wait
.0f1e	20 56 0c	                jsr     pop
.0f21			waitsstop
.0f21	20 17 0c	                jsr     push
.0f24	20 ed f6	wait            jsr     k_stop  ;%01111111
.0f27	d0 fb		                bne     wait
.0f29	20 56 0c	                jsr     pop
.0f2c			waitreturn
.0f2c	20 17 0c	                jsr     push
.0f2f	ad 4b 0f	                lda     thecount
.0f32	8d 00 04	                sta     scrnram
.0f35	a9 02		                lda     #$02
.0f37	8d 00 d8	                sta     colorram
.0f3a	20 e4 ff	nope            jsr     getin
.0f3d	20 d2 ff	                jsr     chrout
.0f40	c9 0d		                cmp     #$0d
.0f42	d0 f6		                bne     nope
.0f44	ee 4b 0f	                inc     thecount
.0f47	20 56 0c	                jsr     pop
.0f4a	60		                rts
>0f4b	01		thecount        .byte   $01

;******  Return to file: graph.asm


;******  End of listing

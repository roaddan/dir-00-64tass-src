
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L pixscrollu.txt -o pixscrollu.prg pixscrollu.asm
; Thu May 25 22:35:48 2023

;Offset	;Hex		;Source

;******  Processing input file: pixscrollu.asm

="20230325-153900-a"	Version = "20230325-153900-a"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: pixscrollu.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: pixscrollu.asm

.080d			main
.080d	20 3c 40	                jsr scrmaninit
.0810	20 19 08	                jsr help
.0813	20 1f 44	                jsr anykey
.0816	4c 74 a4	                jmp b_warmstart
.0819			help
.0819	20 5d 40	                jsr cls
.081c	a2 8d		                ldx  #<line
.081e	a0 09		                ldy  #>line
.0820	20 72 40	                jsr  puts
.0823	a2 4e		                ldx  #<header
.0825	a0 08		                ldy  #>header
.0827	20 72 40	                jsr  puts
.082a	a2 8d		                ldx  #<line
.082c	a0 09		                ldy  #>line
.082e	20 72 40	                jsr  puts
.0831	a2 39		                ldx  #<shortcuts
.0833	a0 09		                ldy  #>shortcuts
.0835	20 72 40	                jsr  puts
.0838	a2 8d		                ldx  #<line
.083a	a0 09		                ldy  #>line
.083c	20 72 40	                jsr  puts
.083f	a2 b6		                ldx  #<helptext
.0841	a0 09		                ldy  #>helptext
.0843	20 72 40	                jsr  puts
.0846	a2 8d		                ldx  #<line
.0848	a0 09		                ldy  #>line
.084a	20 72 40	                jsr  puts
.084d	60		                rts
.084e			header
>084e	20 20 20 20	                .text          "     40 BEST MACHINE CODE ROUTINES"
>0852	20 34 30 20 c2 c5 d3 d4 20 cd c1 c3 c8 c9 ce c5
>0862	20 c3 cf c4 c5 20 d2 cf d5 d4 c9 ce c5 d3
>0870	0d		                .byte   $0d
>0871	20 20 20 20	                .text          "          FOR THE COMMODORE 64"
>0875	20 20 20 20 20 20 c6 cf d2 20 d4 c8 c5 20 c3 cf
>0885	cd cd cf c4 cf d2 c5 20 36 34
>088f	0d		                .byte   $0d
>0890	20 20 20 20	                .text          "       Book by Mark Greenshields."
>0894	20 20 20 c2 4f 4f 4b 20 42 59 20 cd 41 52 4b 20
>08a4	c7 52 45 45 4e 53 48 49 45 4c 44 53 2e
>08b1	0d 0d		                .byte   $0d,$0d
>08b3	20 20 20 20	                .text          "            pixscrollu (p56)"
>08b7	20 20 20 20 20 20 20 20 50 49 58 53 43 52 4f 4c
>08c7	4c 55 20 28 50 35 36 29
>08cf	0d		                .byte   $0d
>08d0	20 20 20 20	                .text          "        (c) 1979 Brad Templeton"
>08d4	20 20 20 20 28 43 29 20 31 39 37 39 20 c2 52 41
>08e4	44 20 d4 45 4d 50 4c 45 54 4f 4e
>08ef	0d 0d		                .byte   $0d,$0d
>08f1	20 20 20 20	                .text          "     Programmed by Daniel Lafrance."
>08f5	20 d0 52 4f 47 52 41 4d 4d 45 44 20 42 59 20 c4
>0905	41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e
>0914	0d		                .byte   $0d
>0915	20 20 20 20	                .text   format("       Version: %s.",Version)
>0919	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 33
>0929	30 33 32 35 2d 31 35 33 39 30 30 2d 41 2e
>0937	0d 00		                .byte   $0d,0
>0939	20 2d 2d 2d	shortcuts       .text          " -------- S H O R T - C U T S ---------"
>093d	2d 2d 2d 2d 2d 20 d3 20 c8 20 cf 20 d2 20 d4 20
>094d	2d 20 c3 20 d5 20 d4 20 d3 20 2d 2d 2d 2d 2d 2d
>095d	2d 2d 2d
>0960	0d		                .byte   $0d
>0961	20 52 55 4e	                .text   format(" run=SYS%5d, help=SYS%5d",main, help)
>0965	3d d3 d9 d3 20 32 30 36 31 2c 20 48 45 4c 50 3d
>0975	d3 d9 d3 20 32 30 37 33
>097d	0d		                .byte   $0d
>097e	20 43 4c 53	                .text   format(" cls=SYS%5d",cls)
>0982	3d d3 d9 d3 31 36 34 37 37
>098b	0d 00		                .byte   $0d,0
>098d	20 2d 2d 2d	line            .text          " --------------------------------------"
>0991	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09a1	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09b1	2d 2d 2d
>09b4	0d 00		                .byte   $0d,0
>09b6	20 d0 52 45	helptext        .text   format(" Prepare to scrool  : SYS%5d",pixscrollu)
>09ba	50 41 52 45 20 54 4f 20 53 43 52 4f 4f 4c 20 20
>09ca	3a 20 d3 d9 d3 31 36 33 38 34
>09d4	0d		                .byte   $0d
>09d5	20 53 43 52	                .text   format(" scroll 1 pixelup   : SYS%5d",scrollup)
>09d9	4f 4c 4c 20 31 20 50 49 58 45 4c 55 50 20 20 20
>09e9	3a 20 d3 d9 d3 31 36 33 39 38
>09f3	0d		                .byte   $0d
>09f4	20 45 58 2e	                .text   format(" ex.: SYS%5d",pixscrollu)
>09f8	3a 20 d3 d9 d3 31 36 33 38 34
>0a02	0d		                .byte   $0d
>0a03	20 45 58 2e	                .text   format(" ex.: for i=0to100:SYS%5d:next",scrollup)
>0a07	3a 20 46 4f 52 20 49 3d 30 54 4f 31 30 30 3a d3
>0a17	d9 d3 31 36 33 39 38 3a 4e 45 58 54
>0a23	0d 00		                .byte   $0d,0
.4000	ad 11 d0	pixscrollu      lda vicctrl0v
.4003	29 f7		                and #$f7
.4005	8d 11 d0	                sta vicctrl0v
.4008	a9 07		                lda #$07
.400a	8d 3b 40	                sta byte
.400d	60		                rts
.400e	ad 11 d0	scrollup        lda vicctrl0v
.4011	29 f8		                and #$f8
.4013	18		                clc
.4014	6d 3b 40	                adc byte
.4017	8d 11 d0	                sta vicctrl0v
.401a	ce 3b 40	                dec byte
.401d	ad 3b 40	                lda byte
.4020	c9 ff		                cmp #$ff
.4022	f0 01		                beq reset
.4024	60		                rts
.4025	a9 07		reset           lda #$07
.4027	8d 3b 40	                sta byte
.402a	ad 11 d0	                lda vicctrl0v
.402d	29 f8		                and #$f8
.402f	18		                clc
.4030	69 07		                adc #$07
.4032	8d 11 d0	                sta vicctrl0v
.4035	a9 0d		                lda #$0d
.4037	20 6c 40	                jsr putch
.403a	60		                rts
>403b	00		byte            .byte 0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ; 97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.403c			libtart

;******  Return to file: pixscrollu.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: pixscrollu.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: pixscrollu.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.403c			scrmaninit
.403c	20 63 41	               jsr  push
.403f	a9 06		               lda  #vbleu
.4041	8d 21 d0	               sta  vicbackcol
.4044	a9 05		               lda  #vvert
.4046	8d 20 d0	               sta  vicbordcol
.4049	a9 01		               lda  #vblanc
.404b	8d 86 02	               sta  bascol
.404e	ad 00 04	               lda  scrnram
.4051	29 fd		               and  #%11111101
.4053	8d 00 04	               sta  scrnram
.4056	20 5d 40	               jsr  cls
.4059	20 a2 41	               jsr  pop
.405c	60		               rts
.405d			cls
.405d	08		               php
.405e	48		               pha
.405f	a9 93		               lda  #$93
.4061	20 6c 40	               jsr  putch
.4064	a9 0e		               lda  #$0e
.4066	20 6c 40	               jsr  putch
.4069	68		               pla
.406a	28		               plp
.406b	60		               rts
.406c			putch
.406c	08		               php
.406d	20 d2 ff	               jsr  $ffd2
.4070	28		               plp
.4071	60		               rts
.4072			puts
.4072	20 63 41	               jsr  push
.4075	86 fb		               stx  zpage1
.4077	84 fc		               sty  zpage1+1
.4079	a0 00		               ldy  #0
.407b	b1 fb		next           lda  (zpage1),y
.407d	f0 09		               beq  exit
.407f	20 6c 40	               jsr  putch
.4082	20 6a 42	               jsr  inczp1
.4085	4c 7b 40	               jmp  next
.4088	20 a2 41	exit           jsr  pop
.408b	60		               rts
.408c			gotoxy
.408c	08		               php
.408d	18		               clc
.408e	8a		               txa
.408f	48		               pha
.4090	98		               tya
.4091	aa		               tax
.4092	68		               pla
.4093	a8		               tay
.4094	20 f0 ff	               jsr  kplot
.4097	28		               plp
.4098	60		               rts
.4099			cursor
=$0286			bascol    =    $0286
.4099	08		               php
.409a	48		               pha
.409b	90 12		               bcc  restore
.409d	20 f0 ff	               jsr  kplot
.40a0	8c c1 40	               sty  cx
.40a3	8e c2 40	               stx  cy
.40a6	ad 86 02	               lda  bascol
.40a9	8d c3 40	               sta  bcol
.40ac	4c be 40	               jmp  out
.40af	ae c2 40	restore        ldx  cy
.40b2	ac c1 40	               ldy  cx
.40b5	20 f0 ff	               jsr  kplot
.40b8	ad c3 40	               lda  bcol
.40bb	8d 86 02	               sta  bascol
.40be	68		out            pla
.40bf	28		               plp
.40c0	60		               rts
>40c1	00		cx   .byte     $00
>40c2	00		cy   .byte     $00
>40c3	00		bcol .byte     $00
.40c4			cursave
.40c4	08		               php
.40c5	38		               sec
.40c6	20 99 40	               jsr  cursor
.40c9	28		               plp
.40ca	60		               rts
.40cb			curput
.40cb	08		               php
.40cc	18		               clc
.40cd	20 99 40	               jsr  cursor
.40d0	28		               plp
.40d1	60		               rts
.40d2			putsxy
.40d2	20 63 41	               jsr  push
.40d5	86 fb		               stx  zpage1
.40d7	84 fc		               sty  zpage1+1
.40d9	a0 00		               ldy  #$00
.40db	b1 fb		               lda  (zpage1),y
.40dd	aa		               tax
.40de	20 6a 42	               jsr  inczp1
.40e1	b1 fb		               lda  (zpage1),y
.40e3	a8		               tay
.40e4	20 8c 40	               jsr  gotoxy
.40e7	20 6a 42	               jsr  inczp1
.40ea	a6 fb		               ldx  zpage1
.40ec	a4 fc		               ldy  zpage1+1
.40ee	20 72 40	               jsr  puts
.40f1	20 a2 41	               jsr  pop
.40f4	60		               rts
>40f5	00 00		straddr   .word     $00
>40f7	00		px        .byte     $00
>40f8	00		py        .byte     $00
>40f9	00 00		zp1       .word     $00
.40fb			putscxy
.40fb	20 63 41	               jsr  push
.40fe	84 fc		               sty  zpage1+1
.4100	86 fb		               stx  zpage1
.4102	ad 86 02	               lda  bascol
.4105	8d 25 41	               sta  bc
.4108	a0 00		               ldy #$00
.410a	b1 fb		               lda  (zpage1),y
.410c	8d 86 02	               sta  bascol
.410f	20 6a 42	               jsr  inczp1
.4112	a6 fb		               ldx  zpage1
.4114	a4 fc		               ldy  zpage1+1
.4116	20 d2 40	               jsr  putsxy
.4119	ad 25 41	               lda  bc
.411c	8d 86 02	               sta  bascol
.411f	20 a2 41	               jsr  pop
.4122	60		               rts
>4123	00 00		straddr  .word      $00
>4125	00		bc       .byte      $00
>4126	00 00		zp1      .word      $00
.4128			putrahex
.4128	08		               php
.4129	48		               pha
.412a	20 70 43	               jsr  a2hex
.412d	a9 1c		               lda  #<a2hexstr
.412f	a0 43		               ldy  #>a2hexstr
.4131	20 72 40	               jsr  puts
.4134	68		               pla
.4135	28		               plp
.4136	60		               rts
.4137			kputrahexxy
.4137			bputrahexxy
.4137			putrahexxy
.4137	08		               php
.4138	20 70 43	               jsr  a2hex
.413b	a9 19		               lda  #<a2hexpos
.413d	a0 43		               ldy  #>a2hexpos
.413f	20 d2 40	               jsr  putsxy
.4142	68		               pla
.4143	28		               plp
.4144	60		               rts
.4145			putrahexcxy
.4145	08		               php
.4146	20 70 43	               jsr  a2hex
.4149	a9 19		               lda  #<a2hexpos
.414b	a0 43		               ldy  #>a2hexpos
.414d	20 fb 40	               jsr  putscxy
.4150	68		               pla
.4151	28		               plp
.4152	60		               rts
.4153			setinverse
.4153	48		               pha
.4154	a9 12		               lda  #$12
.4156	20 d2 ff	               jsr  $ffd2
.4159	68		               pla
.415a	60		               rts
.415b			clrinverse
.415b	48		               pha
.415c	a9 92		               lda  #$92
.415e	20 d2 ff	               jsr  $ffd2
.4161	68		               pla
.4162	60		               rts

;******  Return to file: pixscrollu.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.4163			push
.4163	08		          php            ; stack : flg, pcl, pch
.4164	78		          sei
.4165	8d 9f 41	          sta  ra        ; save a
.4168	68		          pla            ; stack : pcl, pch
.4169	8d 9e 41	          sta  rp        ; save rp
.416c	68		          pla            ; stack : pch
.416d	8d a0 41	          sta  pc        ; save pcl
.4170	68		          pla            ; stack : -
.4171	8d a1 41	          sta  pc+1      ; save pch
.4174	a5 fb		          lda  zpage1    ; get zpage1 low byte
.4176	48		          pha            ; stack : zp1l
.4177	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.4179	48		          pha            ; stack : zp1h, zp1l
.417a	a5 fd		          lda  zpage2    ; get zpage2 low byte
.417c	48		          pha            ; stack : zp2l, zp1h, zp1l
.417d	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.417f	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.4180	ad 9e 41	          lda  rp        ; get rp
.4183	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.4184	ad 9f 41	          lda  ra        ; get a
.4187	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.4188	8a		          txa            ; get x
.4189	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.418a	98		          tya            ; get y
.418b	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.418c	ad a1 41	          lda  pc+1      ; get pch
.418f	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.4190	ad a0 41	          lda  pc        ; get pcl
.4193	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.4194	ad 9e 41	          lda  rp        ; get rp
.4197	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.4198	ad 9f 41	          lda  ra        ; get a
.419b	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.419c	58		          cli
.419d	60		          rts
>419e	00		rp        .byte     0
>419f	00		ra        .byte     0
>41a0	00 00		pc        .word     0
.41a2			pull
.41a2			pop
.41a2	78		          sei
.41a3	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.41a4	8d d7 41	          sta  pc        ; save pcl
.41a7	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.41a8	8d d8 41	          sta  pc+1      ; save pch
.41ab	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.41ac	a8		          tay            ; set y
.41ad	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.41ae	aa		          tax            ; set x
.41af	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.41b0	8d d6 41	          sta  ra        ; save a
.41b3	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.41b4	8d d5 41	          sta  rp        ; save rp
.41b7	68		          pla            ; stack : zp2l, zp1h, zp1l
.41b8	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.41ba	68		          pla            ; stack : zp1h, zp1l
.41bb	85 fd		          sta  zpage2    ; get zpage2 High byte
.41bd	68		          pla            ; stack : zp1l
.41be	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.41c0	68		          pla            ; stack :
.41c1	85 fb		          sta  zpage1    ; get zpage1 High byte
.41c3	ad d8 41	          lda  pc+1      ; get pch
.41c6	48		          pha            ; stack : pch
.41c7	ad d7 41	          lda  pc
.41ca	48		          pha            ; stack : pcl, pch
.41cb	ad d5 41	          lda  rp        ; get rp
.41ce	48		          pha            ; stack : rp, pcl, pch
.41cf	ad d6 41	          lda  ra        ; set ra
.41d2	58		          cli
.41d3	28		          plp            ; stack : pcl, pch
.41d4	60		          rts
>41d5	00		rp        .byte     0
>41d6	00		ra        .byte     0
>41d7	00 00		pc        .word     0

;******  Return to file: pixscrollu.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.41d9			blkfill
.41d9	20 63 41	bf0            jsr  push
.41dc	20 97 42	               jsr  savezp1
.41df	84 fc		               sty  zpage1+1
.41e1	a0 00		               ldy  #$00
.41e3	84 fb		               sty  zpage1
.41e5	91 fb		bf1            sta  (zpage1),y
.41e7	c8		               iny
.41e8	d0 fb		               bne  bf1
.41ea	20 a6 42	               jsr  restzp1
.41ed	20 a2 41	               jsr  pop
.41f0	60		               rts
.41f1			memfill
.41f1	20 63 41	               jsr  push
.41f4	20 d9 41	mf1            jsr  blkfill
.41f7	c8		               iny
.41f8	ca		               dex
.41f9	d0 f9		               bne  mf1
.41fb	20 a2 41	               jsr  pop
.41fe	60		               rts
.41ff			memmove
.41ff	20 63 41	               jsr  push
.4202	ba		               tsx            ; On se crée un pointeur ...
.4203	8a		               txa
.4204	18		               clc
.4205	69 0b		               adc  #11
.4207	a8		               tay
.4208	a2 06		               ldx  #$06
.420a	b9 00 01	nextbyte       lda  $0100,y
.420d	99 59 42	               sta  words,y
.4210	c8		               iny
.4211	ca		               dex
.4212	d0 f6		               bne  nextbyte
.4214	ad 59 42	               lda  s
.4217	8d 30 42	               sta  source+1
.421a	ad 5a 42	               lda  s+1
.421d	8d 31 42	               sta  source+2
.4220	ad 5b 42	               lda  d
.4223	8d 2d 42	               sta  destin+1
.4226	ad 5c 42	               lda  d+1
.4229	8d 2e 42	               sta  destin+2
.422c	ad ff ff	destin         lda  $ffff
.422f	8d ff ff	source         sta  $ffff
.4232	ee 2d 42	               inc  destin+1
.4235	d0 03		               bne  src
.4237	ee 2e 42	               inc  destin+2
.423a	ee 30 42	src            inc  source+1
.423d	d0 03		               bne  cnt
.423f	ee 31 42	               inc  source+2
.4242	ad 5d 42	cnt            lda  compte
.4245	d0 08		               bne  decit
.4247	ad 5e 42	               lda  compte+1
.424a	f0 09		               beq  fini
.424c	ce 5e 42	               dec  compte+1
.424f	ce 5d 42	decit          dec  compte
.4252	4c 2c 42	               jmp  destin
.4255	20 a2 41	fini           jsr  pop
.4258	60		               rts
.4259			words
>4259	00 00		s         .word     $0000
>425b	00 00		d         .word     $0000
>425d	00 00		compte    .word     $0000
.425f			decword
.425f	20 63 41	               jsr  push
.4262	86 fd		               stx  zpage2
.4264	84 fe		               sty  zpage2+1
.4266	20 a2 41	               jsr  pop
.4269	60		               rts
.426a			inczp1
.426a	08		               php
.426b	e6 fb		               inc  zpage1
.426d	d0 02		               bne  nopage
.426f	e6 fc		               inc  zpage1+1
.4271	28		nopage         plp
.4272	60		               rts
.4273			deczp1
.4273	08		                php
.4274	48		                pha
.4275	c6 fb		                dec  zpage1
.4277	d0 02		                bne  nopage
.4279	c6 fc		                dec  zpage1+1
.427b	c6 fb		nopage          dec  zpage1
.427d	68		                pla
.427e	28		                plp
.427f	60		                rts
.4280			inczp2
.4280	08		               php
.4281	48		               pha
.4282	e6 fd		               inc  zpage2
.4284	d0 02		               bne  nopage
.4286	e6 fe		               inc  zpage2+1
.4288	68		nopage         pla
.4289	28		               plp
.428a	60		               rts
.428b			deczp2
.428b	08		               php
.428c	48		               pha
.428d	a5 fd		               lda  zpage2
.428f	d0 02		               bne  nopage
.4291	c6 fe		               dec  zpage2+1
.4293	c6 fd		nopage         dec  zpage2
.4295	28		               plp
.4296	60		               rts
.4297			savezp1
.4297	08		               php
.4298	48		               pha
.4299	a5 fb		               lda  zpage1
.429b	8d 13 43	               sta  zp1
.429e	a5 fc		               lda  zpage1+1
.42a0	8d 14 43	               sta  zp1+1
.42a3	68		               pla
.42a4	28		               plp
.42a5	60		               rts
.42a6			restzp1
.42a6	08		               php
.42a7	48		               pha
.42a8	ad 13 43	               lda zp1
.42ab	85 fb		               sta zpage1
.42ad	ad 14 43	               lda zp1+1
.42b0	85 fc		               sta zpage1+1
.42b2	68		               pla
.42b3	28		               plp
.42b4	60		               rts
.42b5			savezp2
.42b5	08		         php
.42b6	48		         pha
.42b7	a5 fd		         lda zpage2
.42b9	8d 15 43	         sta zp2
.42bc	a5 fe		         lda zpage2+1
.42be	8d 16 43	         sta zp2+1
.42c1	68		         pla
.42c2	28		         plp
.42c3	60		         rts
.42c4			restzp2
.42c4	08		                php
.42c5	48		                pha
.42c6	ad 15 43	                lda  zp2
.42c9	85 fd		                sta  zpage2
.42cb	ad 16 43	                lda  zp2+1
.42ce	85 fe		                sta  zpage2+1
.42d0	68		                pla
.42d1	28		                plp
.42d2	60		                rts
.42d3			xy2addr
.42d3	08		                php
.42d4	48		                pha
.42d5	8a		                txa
.42d6	48		                pha
.42d7	98		                tya
.42d8	48		                pha
.42d9	ad 0e 43	                lda     addr1+1
.42dc	8d 10 43	                sta     addr2+1
.42df	ad 0d 43	                lda     addr1
.42e2	8d 0f 43	                sta     addr2
.42e5	c0 00		                cpy     #$00
.42e7	f0 0f		                beq     addx
.42e9	18		moreline        clc
.42ea	6d 0c 43	                adc     ymult
.42ed	90 03		                bcc     norepy
.42ef	ee 10 43	                inc     addr2+1
.42f2	8d 0f 43	norepy          sta     addr2
.42f5	88		                dey
.42f6	d0 f1		                bne     moreline
.42f8	8a		addx            txa
.42f9	18		                clc
.42fa	6d 0f 43	                adc     addr2
.42fd	90 03		                bcc     thatsit
.42ff	ee 10 43	                inc     addr2+1
.4302	8d 0f 43	thatsit         sta     addr2
.4305	68		                pla
.4306	a8		                tay
.4307	68		                pla
.4308	aa		                tax
.4309	68		                pla
.430a	28		                plp
.430b	60		                rts
>430c	28		ymult          .byte     40
>430d	00 00		addr1          .word     $0000
>430f	00 00		addr2          .word     $0000
>4311	00 00		bytecnt        .word     $0000
>4313	00 00		zp1        .word   $0000
>4315	00 00		zp2        .word   $0000

;******  Return to file: pixscrollu.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>4317	01		a2hexcol       .byte     1              ; pour aputscxy
>4318	00		a2hexbkcol     .byte     %00000000
.4319			a2hexpos
>4319	00		a2hexpx        .byte     0              ; pour aputsxy
>431a	00		a2hexpy        .byte     0
>431b	24		a2hexprefix    .byte     "$"            ; pour aputs
>431c	00 00		a2hexstr       .word     $00
>431e	00 00		               .word     $00
>4320	00		               .byte     0              ; 0 end string
.4321			putahexfmtxy
.4321	20 63 41	               jsr  push
.4324	20 70 43	               jsr  a2hex
.4327	ae 19 43	               ldx  a2hexpx
.432a	ac 1a 43	               ldy  a2hexpy
.432d	20 8c 40	               jsr  gotoxy
.4330	a2 1b		               ldx  #<a2hexprefix
.4332	a0 43		               ldy  #>a2hexprefix
.4334	20 72 40	               jsr  puts
.4337	20 a2 41	               jsr  pop
.433a	60		               rts
.433b			putahexfmt
.433b	20 63 41	               jsr  push
.433e	20 70 43	               jsr  a2hex
.4341	a2 1b		               ldx  #<a2hexprefix
.4343	a0 43		               ldy  #>a2hexprefix
.4345	20 72 40	               jsr  puts
.4348	20 a2 41	               jsr  pop
.434b	60		               rts
.434c			putahex
.434c	20 63 41	               jsr  push
.434f	20 70 43	               jsr  a2hex
.4352	a2 1c		               ldx  #<a2hexstr
.4354	a0 43		               ldy  #>a2hexstr
.4356	20 72 40	               jsr  puts
.4359	20 a2 41	               jsr  pop
.435c	60		               rts
.435d			nib2hex
.435d	08		               php
.435e	29 0f		               and  #$0f
.4360	f8		               sed
.4361	18		               clc
.4362	69 90		               adc  #$90
.4364	69 40		               adc  #$40
.4366	d8		               cld
.4367	28		               plp
.4368	60		               rts
.4369			lsra4bits
.4369	08		               php
.436a	4a		               lsr
.436b	4a		               lsr
.436c	4a		               lsr
.436d	4a		               lsr
.436e	28		               plp
.436f	60		               rts
.4370			a2hex
.4370	08		               php
.4371	48		               pha
.4372	48		               pha
.4373	20 69 43	               jsr  lsra4bits
.4376	20 5d 43	               jsr  nib2hex
.4379	8d 1c 43	               sta  a2hexstr
.437c	68		               pla
.437d	20 5d 43	               jsr  nib2hex
.4380	8d 1d 43	               sta  a2hexstr+1
.4383	a9 00		               lda  #$00                ; set end of string
.4385	8d 1e 43	               sta  a2hexstr+2
.4388	68		               pla
.4389	28		               plp
.438a	60		               rts
.438b			xy2hex
.438b	20 63 41	               jsr  push
.438e	20 70 43	               jsr  a2hex
.4391	8a		               txa
.4392	48		               pha
.4393	20 69 43	               jsr  lsra4bits
.4396	20 5d 43	               jsr  nib2hex
.4399	8d 1c 43	               sta  a2hexstr
.439c	68		               pla
.439d	20 5d 43	               jsr  nib2hex
.43a0	8d 1d 43	               sta  a2hexstr+1
.43a3	98		               tya
.43a4	48		               pha
.43a5	20 69 43	               jsr  lsra4bits
.43a8	20 5d 43	               jsr  nib2hex
.43ab	8d 1e 43	               sta  a2hexstr+2
.43ae	68		               pla
.43af	20 5d 43	               jsr  nib2hex
.43b2	8d 1f 43	               sta  a2hexstr+3
.43b5	a9 00		               lda  #$00                ; 0 ended string
.43b7	8d 20 43	               sta  a2hexstr+4
.43ba	20 a2 41	               jsr  pop
.43bd			atobin
.43bd	20 63 41	               jsr     push
.43c0	a2 08		               ldx     #8
.43c2	a0 00		               ldy     #0
.43c4	2a		nextbit        rol
.43c5	48		               pha
.43c6	69 00		               adc     #$00
.43c8	29 01		               and     #$01
.43ca	20 5d 43	               jsr     nib2hex
.43cd	99 de 43	               sta     abin,y
.43d0	68		               pla
.43d1	c8		               iny
.43d2	ca		               dex
.43d3	d0 ef		               bne     nextbit
.43d5	a9 00		               lda     #0
.43d7	99 de 43	               sta     abin,y
.43da	20 a2 41	               jsr     pull
.43dd	60		               rts
>43de	30 30 30 30	abin           .null   "00000000"
>43e2	30 30 30 30 00
.43e7			putabin
.43e7	20 bd 43	               jsr     atobin
.43ea	20 63 41	               jsr     push
.43ed	a2 de		               ldx     #<abin
.43ef	a0 43		               ldy     #>abin
.43f1	20 72 40	               jsr     puts
.43f4	20 a2 41	               jsr     pop
.43f7	60		               rts
.43f8			putabinfmt
.43f8	08		               php
.43f9	48		               pha
.43fa	a9 25		               lda     #"%"
.43fc	20 6c 40	               jsr     putch
.43ff	68		               pla
.4400	20 e7 43	               jsr     putabin
.4403	28		               plp
.4404	60		               rts
.4405			putabinxy
.4405	20 8c 40	               jsr     gotoxy
.4408	20 e7 43	               jsr     putabin
.440b	60		               rts
.440c			putabinfmtxy
.440c	20 8c 40	               jsr     gotoxy
.440f	20 f8 43	               jsr     putabinfmt
.4412	60		               rts

;******  Return to file: pixscrollu.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

.4413			waitstop
.4413	20 63 41	                jsr     push
.4416	20 ed f6	wait            jsr     k_stop
.4419	d0 fb		                bne     wait
.441b	20 a2 41	                jsr     pop
.441e	60		                rts
.441f			anykey
.441f	08		                php
.4420	48		                pha
.4421	a5 cb		nokey           lda 203
.4423	c9 40		                cmp #64
.4425	f0 fa		                beq nokey
.4427	68		                pla
.4428	28		                plp
.4429	60		                rts
.442a			getkey
.442a	20 63 41	                jsr     push
.442d	20 cf ff	again           jsr     chrin
.4430	4c 2d 44	                jmp     again
.4433	20 a2 41	                jsr     pop
.4436	60		                rts
.4437			waitkey
.4437	20 63 41	                jsr     push
.443a	8d 4f 44	                sta     thekey
.443d	20 e4 ff	nope            jsr     getin
.4440	20 d2 ff	                jsr     chrout
.4443	cd 4f 44	                cmp     thekey
.4446	d0 f5		                bne     nope
.4448	20 d2 ff	                jsr     chrout
.444b	20 a2 41	                jsr     pop
.444e	60		                rts
>444f	00		thekey          .byte   0
.4450			waitspace
.4450	20 63 41	                jsr     push
.4453	a9 7f		wait            lda     #$7f  ;%01111111
.4455	8d 00 dc	                sta     $dc00
.4458	ad 01 dc	                lda     $dc01
.445b	29 10		                and     #$10  ;mask %00010000
.445d	d0 f4		                bne     wait
.445f	20 a2 41	                jsr     pop
.4462			waitsstop
.4462	20 63 41	                jsr     push
.4465	20 ed f6	wait            jsr     k_stop  ;%01111111
.4468	d0 fb		                bne     wait
.446a	20 a2 41	                jsr     pop
.446d			waitreturn
.446d	20 63 41	                jsr     push
.4470	ad 8c 44	                lda     thecount
.4473	8d 00 04	                sta     scrnram
.4476	a9 02		                lda     #$02
.4478	8d 00 d8	                sta     colorram
.447b	20 e4 ff	nope            jsr     getin
.447e	20 d2 ff	                jsr     chrout
.4481	c9 0d		                cmp     #$0d
.4483	d0 f6		                bne     nope
.4485	ee 8c 44	                inc     thecount
.4488	20 a2 41	                jsr     pop
.448b	60		                rts
>448c	01		thecount        .byte   $01

;******  Return to file: pixscrollu.asm


;******  End of listing

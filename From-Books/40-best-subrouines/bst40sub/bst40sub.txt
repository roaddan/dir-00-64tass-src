
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L bst40sub.txt -o bst40sub.prg bst40sub.asm
; Tue Mar 21 23:26:20 2023

;Offset	;Hex		;Source

;******  Processing input file: bst40sub.asm

="20230319-090800-a"	Version = "20230319-090800-a"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: bst40sub.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: bst40sub.asm

.080d			main
.080d	20 f1 0b	                jsr scrmaninit
.0810	20 14 08	                jsr help
.0813	60		                rts
.0814			help
.0814	20 12 0c	                jsr cls
.0817	a2 2d		                ldx  #<header
.0819	a0 08		                ldy  #>header
.081b	20 27 0c	                jsr  puts
.081e	a2 f4		                ldx  #<shortcuts
.0820	a0 08		                ldy  #>shortcuts
.0822	20 27 0c	                jsr  puts
.0825	a2 71		                ldx  #<helptext
.0827	a0 09		                ldy  #>helptext
.0829	20 27 0c	                jsr  puts
.082c	60		                rts
.082d			header
>082d	0d		                .byte   $0d
>082e	20 20 20 20	                .text          "     40 BEST MACHINE CODE ROUTINES"
>0832	20 34 30 20 c2 c5 d3 d4 20 cd c1 c3 c8 c9 ce c5
>0842	20 c3 cf c4 c5 20 d2 cf d5 d4 c9 ce c5 d3
>0850	0d		                .byte   $0d
>0851	20 20 20 20	                .text          "          FOR THE COMMODORE 64"
>0855	20 20 20 20 20 20 c6 cf d2 20 d4 c8 c5 20 c3 cf
>0865	cd cd cf c4 cf d2 c5 20 36 34
>086f	0d		                .byte   $0d
>0870	20 20 20 20	                .text          "       Book by Mark Greenshields."
>0874	20 20 20 c2 4f 4f 4b 20 42 59 20 cd 41 52 4b 20
>0884	c7 52 45 45 4e 53 48 49 45 4c 44 53 2e
>0891	0d 0d		                .byte   $0d,$0d
>0893	20 20 20 20	                .text          "                bst40sub"
>0897	20 20 20 20 20 20 20 20 20 20 20 20 42 53 54 34
>08a7	30 53 55 42
>08ab	0d		                .byte   $0d
>08ac	20 20 20 20	                .text          "     Programmed by Daniel Lafrance."
>08b0	20 d0 52 4f 47 52 41 4d 4d 45 44 20 42 59 20 c4
>08c0	41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e
>08cf	0d		                .byte   $0d
>08d0	20 20 20 20	                .text   format("       Version: %s.",Version)
>08d4	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 33
>08e4	30 33 31 39 2d 30 39 30 38 30 30 2d 41 2e
>08f2	0d 00		                .byte   $0d,0
>08f4	0d		shortcuts       .byte   $0d
>08f5	20 2d 2d 2d	                .text          " -------- S H O R T - C U T S ---------"
>08f9	2d 2d 2d 2d 2d 20 d3 20 c8 20 cf 20 d2 20 d4 20
>0909	2d 20 c3 20 d5 20 d4 20 d3 20 2d 2d 2d 2d 2d 2d
>0919	2d 2d 2d
>091c	0d		                .byte   $0d
>091d	20 52 55 4e	                .text   format(" run=SYS%5d, help=SYS%5d",main, help)
>0921	3d d3 d9 d3 20 32 30 36 31 2c 20 48 45 4c 50 3d
>0931	d3 d9 d3 20 32 30 36 38
>0939	0d		                .byte   $0d
>093a	20 43 4c 53	                .text   format(" cls=SYS%5d",cls)
>093e	3d d3 d9 d3 20 33 30 39 30
>0947	0d		                .byte   $0d
>0948	20 2d 2d 2d	                .text          " --------------------------------------"
>094c	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>095c	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>096c	2d 2d 2d
>096f	0d 00		                .byte   $0d,0
>0971	0d		helptext        .byte   $0d
>0972	20 20 c6 c9	                .text   format("  FILL  : SYS%5d,start,end,byte",fill)
>0976	cc cc 20 20 3a 20 d3 d9 d3 20 32 38 34 35 2c 53
>0986	54 41 52 54 2c 45 4e 44 2c 42 59 54 45
>0993	0d		                .byte   $0d
>0994	20 20 20 20	                .text   format("     ex.: SYS%5d,1024,2024,1",fill)
>0998	20 45 58 2e 3a 20 d3 d9 d3 20 32 38 34 35 2c 31
>09a8	30 32 34 2c 32 30 32 34 2c 31
>09b2	0d		                .byte   $0d
>09b3	20 20 20 20	                .text   format("          SYS%5d,55296,56296,1",fill)
>09b7	20 20 20 20 20 20 d3 d9 d3 20 32 38 34 35 2c 35
>09c7	35 32 39 36 2c 35 36 32 39 36 2c 31
>09d3	0d 0d		                .byte   $0d,$0d
>09d5	20 20 cd cf	                .text   format("  MOVE  : SYS%5d,start,end,dest.",move)
>09d9	d6 c5 20 20 3a 20 d3 d9 d3 20 32 39 34 31 2c 53
>09e9	54 41 52 54 2c 45 4e 44 2c 44 45 53 54 2e
>09f7	0d		                .byte   $0d
>09f8	20 20 20 20	                .text   format("     ex.: SYS%5d,1024,2024,55296",move)
>09fc	20 45 58 2e 3a 20 d3 d9 d3 20 32 39 34 31 2c 31
>0a0c	30 32 34 2c 32 30 32 34 2c 35 35 32 39 36
>0a1a	0d 0d		                .byte   $0d,$0d
>0a1c	20 20 c3 cc	                .text   format("  CLOCK : SYS%5d,heures,minutes",clock)
>0a20	cf c3 cb 20 3a 20 d3 d9 d3 20 32 36 34 36 2c 48
>0a30	45 55 52 45 53 2c 4d 49 4e 55 54 45 53
>0a3d	0d		                .byte   $0d
>0a3e	20 20 20 20	                .text   format("     ex.: SYS%5d,7,30",clock)
>0a42	20 45 58 2e 3a 20 d3 d9 d3 20 32 36 34 36 2c 37
>0a52	2c 33 30
>0a55	00		                .byte   0
.0a56			clock
.0a56	20 fd ae	                jsr b_chk4comma
.0a59	20 9e b7	                jsr b_getacc1lsb
.0a5c	8a		                txa
.0a5d	c9 18		                cmp #24
.0a5f	b0 14		                bcs iqerr
.0a61	8d 17 0b	                sta heure
.0a64	20 fd ae	                jsr b_chk4comma
.0a67	20 9e b7	                jsr b_getacc1lsb
.0a6a	8a		                txa
.0a6b	c9 3c		                cmp #60
.0a6d	b0 06		                bcs iqerr
.0a6f	8d 18 0b	                sta minute
.0a72	4c 78 0a	                jmp setup
.0a75	4c 48 b2	iqerr           jmp b_fcerr
.0a78	78		setup           sei
.0a79	a9 95		                lda #<princ
.0a7b	8d 14 03	                sta 788
.0a7e	a9 0a		                lda #>princ
.0a80	8d 15 03	                sta 789
.0a83	ad 17 0b	                lda heure
.0a86	ad 18 0b	                lda minute
.0a89	a9 00		                lda #0
.0a8b	8d 19 0b	                sta seconde
.0a8e	a9 00		                lda #0
.0a90	8d 1a 0b	                sta compteur
.0a93	58		                cli
.0a94	60		                rts
.0a95	ee 1a 0b	princ           inc compteur
.0a98	ad 1a 0b	                lda compteur
.0a9b	c9 5a		                cmp #90
.0a9d	b0 03		                bcs change
.0a9f	4c 31 ea	                jmp $ea31   ; IRQ interrupt entry
.0aa2	a9 00		change          lda #0
.0aa4	8d 1a 0b	                sta compteur
.0aa7	ee 19 0b	                inc seconde
.0aaa	ad 19 0b	                lda seconde
.0aad	c9 3c		                cmp #60
.0aaf	b0 03		                bcs changeminute
.0ab1	4c e3 0a	                jmp printit
.0ab4	a9 00		changeminute    lda #0
.0ab6	8d 19 0b	                sta seconde
.0ab9	ee 18 0b	                inc minute
.0abc	ad 18 0b	                lda minute
.0abf	c9 3c		                cmp #60
.0ac1	b0 03		                bcs changeheure
.0ac3	4c e3 0a	                jmp printit
.0ac6	a9 00		changeheure     lda #0
.0ac8	8d 18 0b	                sta minute
.0acb	ee 17 0b	                inc heure
.0ace	ad 17 0b	                lda heure
.0ad1	c9 18		                cmp #24
.0ad3	90 0e		                bcc printit
.0ad5	a9 00		                lda #0
.0ad7	8d 19 0b	                sta seconde
.0ada	8d 18 0b	                sta minute
.0add	8d 17 0b	                sta heure
.0ae0	4c 31 ea	                jmp $ea31   ; IRQ interrupt entry
.0ae3	38		printit           sec
.0ae4	20 f0 ff	                jsr plot
.0ae7	8e 1b 0b	                stx cursx
.0aea	8c 1c 0b	                sty cursy
.0aed	a2 18		                ldx #24
.0aef	a0 22		                ldy #34
.0af1	18		                clc
.0af2	20 f0 ff	                jsr plot
.0af5	a9 00		                lda #0
.0af7	ae 17 0b	                ldx heure
.0afa	20 cd bd	                jsr b_putint
.0afd	a9 3a		                lda #":"
.0aff	20 d2 ff	                jsr chrout
.0b02	a9 00		                lda #0
.0b04	ae 18 0b	                ldx minute
.0b07	20 cd bd	                jsr b_putint
.0b0a	ae 1b 0b	                ldx cursx
.0b0d	ac 1c 0b	                ldy cursy
.0b10	18		                clc
.0b11	20 f0 ff	                jsr plot
.0b14	4c 31 ea	                jmp $ea31   ; IRQ interrupt entry
>0b17	00		heure           .byte   0
>0b18	00		minute          .byte   0
>0b19	00		seconde         .byte   0
>0b1a	00		compteur        .byte   0
>0b1b	00		cursx           .byte   0
>0b1c	00		cursy           .byte   0
.0b1d			fill
.0b1d	20 fd ae	                jsr b_chk4comma ;$aefd
.0b20	20 8a ad	                jsr b_frmnum    ;$ad8a
.0b23	20 f7 b7	                jsr b_getadr    ;$b7f7
.0b26	a5 14		                lda $14
.0b28	85 fb		                sta zpage1
.0b2a	a5 15		                lda $15
.0b2c	85 fc		                sta zpage1+1
.0b2e	20 fd ae	                jsr b_chk4comma ;$aefd
.0b31	20 8a ad	                jsr b_frmnum    ;$ad8a
.0b34	20 f7 b7	                jsr b_getadr    ;$b7f7
.0b37	a5 14		                lda $14
.0b39	8d 3c 03	                sta 828
.0b3c	a5 15		                lda $15
.0b3e	8d 3d 03	                sta 829
.0b41	20 fd ae	                jsr b_chk4comma ;$aefd
.0b44	20 8a ad	                jsr b_frmnum    ;$ad8a
.0b47	20 f7 b7	                jsr b_getadr    ;$b7f7
.0b4a	a5 15		                lda $15
.0b4c	f0 03		                beq more
.0b4e	4c 48 b2	                jmp b_fcerr
.0b51	a5 14		more            lda $14
.0b53	8d 3e 03	                sta 830
.0b56	a0 00		loop            ldy #0
.0b58	ad 3e 03	                lda 830
.0b5b	91 fb		                sta (zpage1),y
.0b5d	20 74 0b	                jsr add
.0b60	a5 fb		                lda zpage1
.0b62	cd 3c 03	                cmp 828
.0b65	f0 03		                beq check
.0b67	4c 56 0b	                jmp loop
.0b6a	a5 fc		check           lda zpage1+1
.0b6c	cd 3d 03	                cmp 829
.0b6f	f0 0b		                beq finish
.0b71	4c 56 0b	                jmp loop
.0b74	e6 fb		add             inc zpage1
.0b76	f0 01		                beq fcplus1
.0b78	60		                rts
.0b79	e6 fc		fcplus1         inc zpage1+1
.0b7b	60		                rts
.0b7c	60		finish          rts
.0b7d			move
.0b7d	20 fd ae	                jsr b_chk4comma ;$aefd
.0b80	20 8a ad	                jsr b_frmnum    ;$ad8a
.0b83	20 f7 b7	                jsr b_getadr    ;$b7f7
.0b86	a5 14		                lda $14
.0b88	8d eb 0b	                sta temp
.0b8b	a5 15		                lda $15
.0b8d	8d ec 0b	                sta temp+1
.0b90	20 fd ae	                jsr b_chk4comma ;$aefd
.0b93	20 8a ad	                jsr b_frmnum    ;$ad8a
.0b96	20 f7 b7	                jsr b_getadr    ;$b7f7
.0b99	a5 14		                lda $14
.0b9b	8d ed 0b	                sta temp+2
.0b9e	a5 15		                lda $15
.0ba0	8d ee 0b	                sta temp+3
.0ba3	20 fd ae	                jsr b_chk4comma ;$aefd
.0ba6	20 8a ad	                jsr b_frmnum    ;$ad8a
.0ba9	20 f7 b7	                jsr b_getadr    ;$b7f7
.0bac	a5 14		                lda $14
.0bae	8d ef 0b	                sta temp+4
.0bb1	a5 15		                lda $15
.0bb3	8d f0 0b	                sta temp+5
.0bb6	ad eb 0b	                lda temp
.0bb9	85 fb		                sta zpage1
.0bbb	ad ec 0b	                lda temp+1
.0bbe	85 fc		                sta zpage1+1
.0bc0	ad ef 0b	                lda temp+4
.0bc3	85 fd		                sta zpage2
.0bc5	ad f0 0b	                lda temp+5
.0bc8	85 fe		                sta zpage2+1
.0bca	a0 00		                ldy #$00
.0bcc	b1 fb		loop            lda (zpage1),y
.0bce	91 fd		                sta (zpage2),y
.0bd0	20 1f 0e	                jsr inczp1
.0bd3	20 35 0e	                jsr inczp2
.0bd6	a5 fb		                lda zpage1
.0bd8	cd ed 0b	                cmp temp+2
.0bdb	f0 03		                beq check
.0bdd	4c cc 0b	                jmp loop
.0be0	a5 fc		check           lda zpage1+1
.0be2	cd ee 0b	                cmp temp+3
.0be5	f0 03		                beq finish
.0be7	4c cc 0b	                jmp loop
.0bea	60		finish          rts
>0beb	00 00 00 00	temp            .byte 0,0,0,0,0,0
>0bef	00 00

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$90			kiostatus       =       $90       ; Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7       ; Current filename length (byte)
=$b9			cursecadd       =       $b9       ; Current secondary address (byte)
=$ba			curdevno        =       $ba       ; Current device number (byte)
=$bb			curfptr         =       $bb       ; Current file pointer (word)
=$fb			zpage1          =       $fb       ; zero page 1 address (word)
=$fd			zpage2          =       $fd       ; zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$0286			bascol          =       $0286     ;basic next chr colscreenram (byte)
=$0400			scrnram         =       $0400     ;video character ram
=$0400			scrram0         =       $0400
=$0500			scrram1         =       $0500
=$0600			scrram2         =       $0600
=$0700			scrram3         =       $0700
=$0801			basicsta        =       $0801     ;basic start address
=$a000			basicrom        =       $a000
=$d400			sid             =       $d400     ;sid base address
=$d800			colorram        =       $d800     ;video color ram
=$d800			colram0         =       $d800
=$d900			colram1         =       $d900
=$da00			colram2         =       $da00
=$db00			colram3         =       $db00
=$dc00			cia1            =       $dc00     ;cia1  base address
=$dd00			cia2            =       $dd00     ;cia2 base address
=$e000			kernalrom       =       $e000
=43			txttab          =       43
=$03			bstop           =       $03      ;stop
=$05			bwhite          =       $05      ;set color white
=$08			block           =       $08      ;lock the charset
=$09			bunlock         =       $09      ;unlock the charset
=$0d			bcarret         =       $0d
=$0e			btext           =       $0e
=$11			bcrsdn          =       $11      ;cursor down 1 line
=$12			brevcol         =       $12
=$13			bhome           =       $13
=$14			bdelete         =       $14
=$1c			bred            =       $1c
=$1d			bcuright        =       $1d
=$1e			bgreen          =       $1e
=$1f			bblue           =       $1f
=$81			borange         =       $81
=$83			blrun           =       $83
=$85			bfkey1          =       $85
=$86			bfkey2          =       $86
=$87			bfkey3          =       $87
=$88			bfkey4          =       $88
=$89			bfkey5          =       $89
=$8a			bfkey6          =       $8a
=$8b			bfkey7          =       $8b
=$8c			bfkey8          =       $8c
=$8d			bcarret1        =       $8d
=$8e			bgraph          =       $8e
=$90			bblack          =       $90
=$91			bcuup           =       $91
=$92			brevoff         =       $92
=$93			bclear          =       $93
=$94			binsert         =       $94
=$95			bbrown          =       $95
=$96			bltred          =       $96
=$97			bdkgrey         =       $97
=$98			bmdgrey         =       $98
=$99			bltgreen        =       $99
=$9a			bltblue         =       $9a
=$9b			bltgrey         =       $9b
=$9c			bmagenta        =       $9c
=$9d			bculeft         =       $9d
=$9e			byellow         =       $9e
=$9f			bcyan           =       $9f
=$0286			carcol          =       $0286
=$030a			ieval           =       $030a
=$73			chrget          =       $73
=$79			chrgot          =       $79
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$f1ca			kd_chrout    =   $f1ca
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.0bf1			libtart

;******  Return to file: bst40sub.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col= vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: bst40sub.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=$a3bb			b_opentxtspc  = $a3bb ;  1) Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ;  2) Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ;  3) ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ;  4) Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ;  5) Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ;  6) Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ;  7) Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ;  8) Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ;  9) Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; 10) Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; 11) Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; 12) Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; 13) Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; 14) Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; 15) Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; 17) Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; 18) Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; 19) Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; 20) Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; 21) Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; 22) Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; 23) Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; 24) Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; 25) Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; 26) Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; 27) Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; 28) check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; 29) check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; 30) send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; 31) find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; 32) Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; 33) Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; 34) Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; 35) Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; 36) Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; 37) Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; 38) Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; 39) Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; 40) Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; 41) Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; 42) Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; 43) Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; 44) Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; 45) Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; 46) Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; 47) Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; 48) Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; 49) Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; 50) Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: bst40sub.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0bf1			scrmaninit
.0bf1	20 18 0d	               jsr  push
.0bf4	a9 06		               lda  #vbleu
.0bf6	8d 21 d0	               sta  vicbackcol
.0bf9	a9 05		               lda  #vvert
.0bfb	8d 20 d0	               sta  vicbordcol
.0bfe	a9 01		               lda  #vblanc
.0c00	8d 86 02	               sta  bascol
.0c03	ad 00 04	               lda  scrnram
.0c06	29 fd		               and  #%11111101
.0c08	8d 00 04	               sta  scrnram
.0c0b	20 12 0c	               jsr  cls
.0c0e	20 57 0d	               jsr  pop
.0c11	60		               rts
.0c12			cls
.0c12	08		               php
.0c13	48		               pha
.0c14	a9 93		               lda  #$93
.0c16	20 21 0c	               jsr  putch
.0c19	a9 0e		               lda  #$0e
.0c1b	20 21 0c	               jsr  putch
.0c1e	68		               pla
.0c1f	28		               plp
.0c20	60		               rts
.0c21			putch
.0c21	08		               php
.0c22	20 d2 ff	               jsr  $ffd2
.0c25	28		               plp
.0c26	60		               rts
.0c27			puts
.0c27	20 18 0d	               jsr  push
.0c2a	86 fb		               stx  zpage1
.0c2c	84 fc		               sty  zpage1+1
.0c2e	a0 00		               ldy  #0
.0c30	b1 fb		next           lda  (zpage1),y
.0c32	f0 09		               beq  exit
.0c34	20 21 0c	               jsr  putch
.0c37	20 1f 0e	               jsr  inczp1
.0c3a	4c 30 0c	               jmp  next
.0c3d	20 57 0d	exit           jsr  pop
.0c40	60		               rts
.0c41			gotoxy
.0c41	08		               php
.0c42	18		               clc
.0c43	8a		               txa
.0c44	48		               pha
.0c45	98		               tya
.0c46	aa		               tax
.0c47	68		               pla
.0c48	a8		               tay
.0c49	20 f0 ff	               jsr  kplot
.0c4c	28		               plp
.0c4d	60		               rts
.0c4e			cursor
=$0286			bascol    =    $0286
.0c4e	08		               php
.0c4f	48		               pha
.0c50	90 12		               bcc  restore
.0c52	20 f0 ff	               jsr  kplot
.0c55	8c 76 0c	               sty  cx
.0c58	8e 77 0c	               stx  cy
.0c5b	ad 86 02	               lda  bascol
.0c5e	8d 78 0c	               sta  bcol
.0c61	4c 73 0c	               jmp  out
.0c64	ae 77 0c	restore        ldx  cy
.0c67	ac 76 0c	               ldy  cx
.0c6a	20 f0 ff	               jsr  kplot
.0c6d	ad 78 0c	               lda  bcol
.0c70	8d 86 02	               sta  bascol
.0c73	68		out            pla
.0c74	28		               plp
.0c75	60		               rts
>0c76	00		cx   .byte     $00
>0c77	00		cy   .byte     $00
>0c78	00		bcol .byte     $00
.0c79			cursave
.0c79	08		               php
.0c7a	38		               sec
.0c7b	20 4e 0c	               jsr  cursor
.0c7e	28		               plp
.0c7f	60		               rts
.0c80			curput
.0c80	08		               php
.0c81	18		               clc
.0c82	20 4e 0c	               jsr  cursor
.0c85	28		               plp
.0c86	60		               rts
.0c87			putsxy
.0c87	20 18 0d	               jsr  push
.0c8a	86 fb		               stx  zpage1
.0c8c	84 fc		               sty  zpage1+1
.0c8e	a0 00		               ldy  #$00
.0c90	b1 fb		               lda  (zpage1),y
.0c92	aa		               tax
.0c93	20 1f 0e	               jsr  inczp1
.0c96	b1 fb		               lda  (zpage1),y
.0c98	a8		               tay
.0c99	20 41 0c	               jsr  gotoxy
.0c9c	20 1f 0e	               jsr  inczp1
.0c9f	a6 fb		               ldx  zpage1
.0ca1	a4 fc		               ldy  zpage1+1
.0ca3	20 27 0c	               jsr  puts
.0ca6	20 57 0d	               jsr  pop
.0ca9	60		               rts
>0caa	00 00		straddr   .word     $00
>0cac	00		px        .byte     $00
>0cad	00		py        .byte     $00
>0cae	00 00		zp1       .word     $00
.0cb0			putscxy
.0cb0	20 18 0d	               jsr  push
.0cb3	84 fc		               sty  zpage1+1
.0cb5	86 fb		               stx  zpage1
.0cb7	ad 86 02	               lda  bascol
.0cba	8d da 0c	               sta  bc
.0cbd	a0 00		               ldy #$00
.0cbf	b1 fb		               lda  (zpage1),y
.0cc1	8d 86 02	               sta  bascol
.0cc4	20 1f 0e	               jsr  inczp1
.0cc7	a6 fb		               ldx  zpage1
.0cc9	a4 fc		               ldy  zpage1+1
.0ccb	20 87 0c	               jsr  putsxy
.0cce	ad da 0c	               lda  bc
.0cd1	8d 86 02	               sta  bascol
.0cd4	20 57 0d	               jsr  pop
.0cd7	60		               rts
>0cd8	00 00		straddr  .word      $00
>0cda	00		bc       .byte      $00
>0cdb	00 00		zp1      .word      $00
.0cdd			putrahex
.0cdd	08		               php
.0cde	48		               pha
.0cdf	20 25 0f	               jsr  a2hex
.0ce2	a9 d1		               lda  #<a2hexstr
.0ce4	a0 0e		               ldy  #>a2hexstr
.0ce6	20 27 0c	               jsr  puts
.0ce9	68		               pla
.0cea	28		               plp
.0ceb	60		               rts
.0cec			kputrahexxy
.0cec			bputrahexxy
.0cec			putrahexxy
.0cec	08		               php
.0ced	20 25 0f	               jsr  a2hex
.0cf0	a9 ce		               lda  #<a2hexpos
.0cf2	a0 0e		               ldy  #>a2hexpos
.0cf4	20 87 0c	               jsr  putsxy
.0cf7	68		               pla
.0cf8	28		               plp
.0cf9	60		               rts
.0cfa			putrahexcxy
.0cfa	08		               php
.0cfb	20 25 0f	               jsr  a2hex
.0cfe	a9 ce		               lda  #<a2hexpos
.0d00	a0 0e		               ldy  #>a2hexpos
.0d02	20 b0 0c	               jsr  putscxy
.0d05	68		               pla
.0d06	28		               plp
.0d07	60		               rts
.0d08			setinverse
.0d08	48		               pha
.0d09	a9 12		               lda  #$12
.0d0b	20 d2 ff	               jsr  $ffd2
.0d0e	68		               pla
.0d0f	60		               rts
.0d10			clrinverse
.0d10	48		               pha
.0d11	a9 92		               lda  #$92
.0d13	20 d2 ff	               jsr  $ffd2
.0d16	68		               pla
.0d17	60		               rts

;******  Return to file: bst40sub.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.0d18			push
.0d18	08		          php            ; stack : flg, pcl, pch
.0d19	78		          sei
.0d1a	8d 54 0d	          sta  ra        ; save a
.0d1d	68		          pla            ; stack : pcl, pch
.0d1e	8d 53 0d	          sta  rp        ; save rp
.0d21	68		          pla            ; stack : pch
.0d22	8d 55 0d	          sta  pc        ; save pcl
.0d25	68		          pla            ; stack : -
.0d26	8d 56 0d	          sta  pc+1      ; save pch
.0d29	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0d2b	48		          pha            ; stack : zp1l
.0d2c	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0d2e	48		          pha            ; stack : zp1h, zp1l
.0d2f	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0d31	48		          pha            ; stack : zp2l, zp1h, zp1l
.0d32	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0d34	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0d35	ad 53 0d	          lda  rp        ; get rp
.0d38	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0d39	ad 54 0d	          lda  ra        ; get a
.0d3c	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0d3d	8a		          txa            ; get x
.0d3e	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d3f	98		          tya            ; get y
.0d40	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d41	ad 56 0d	          lda  pc+1      ; get pch
.0d44	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d45	ad 55 0d	          lda  pc        ; get pcl
.0d48	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d49	ad 53 0d	          lda  rp        ; get rp
.0d4c	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d4d	ad 54 0d	          lda  ra        ; get a
.0d50	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d51	58		          cli
.0d52	60		          rts
>0d53	00		rp        .byte     0
>0d54	00		ra        .byte     0
>0d55	00 00		pc        .word     0
.0d57			pull
.0d57			pop
.0d57	78		          sei
.0d58	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d59	8d 8c 0d	          sta  pc        ; save pcl
.0d5c	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d5d	8d 8d 0d	          sta  pc+1      ; save pch
.0d60	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d61	a8		          tay            ; set y
.0d62	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0d63	aa		          tax            ; set x
.0d64	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0d65	8d 8b 0d	          sta  ra        ; save a
.0d68	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0d69	8d 8a 0d	          sta  rp        ; save rp
.0d6c	68		          pla            ; stack : zp2l, zp1h, zp1l
.0d6d	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0d6f	68		          pla            ; stack : zp1h, zp1l
.0d70	85 fd		          sta  zpage2    ; get zpage2 High byte
.0d72	68		          pla            ; stack : zp1l
.0d73	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0d75	68		          pla            ; stack :
.0d76	85 fb		          sta  zpage1    ; get zpage1 High byte
.0d78	ad 8d 0d	          lda  pc+1      ; get pch
.0d7b	48		          pha            ; stack : pch
.0d7c	ad 8c 0d	          lda  pc
.0d7f	48		          pha            ; stack : pcl, pch
.0d80	ad 8a 0d	          lda  rp        ; get rp
.0d83	48		          pha            ; stack : rp, pcl, pch
.0d84	ad 8b 0d	          lda  ra        ; set ra
.0d87	58		          cli
.0d88	28		          plp            ; stack : pcl, pch
.0d89	60		          rts
>0d8a	00		rp        .byte     0
>0d8b	00		ra        .byte     0
>0d8c	00 00		pc        .word     0

;******  Return to file: bst40sub.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.0d8e			blkfill
.0d8e	20 18 0d	bf0            jsr  push
.0d91	20 4c 0e	               jsr  savezp1
.0d94	84 fc		               sty  zpage1+1
.0d96	a0 00		               ldy  #$00
.0d98	84 fb		               sty  zpage1
.0d9a	91 fb		bf1            sta  (zpage1),y
.0d9c	c8		               iny
.0d9d	d0 fb		               bne  bf1
.0d9f	20 5b 0e	               jsr  restzp1
.0da2	20 57 0d	               jsr  pop
.0da5	60		               rts
.0da6			memfill
.0da6	20 18 0d	               jsr  push
.0da9	20 8e 0d	mf1            jsr  blkfill
.0dac	c8		               iny
.0dad	ca		               dex
.0dae	d0 f9		               bne  mf1
.0db0	20 57 0d	               jsr  pop
.0db3	60		               rts
.0db4			memmove
.0db4	20 18 0d	               jsr  push
.0db7	ba		               tsx            ; On se crée un pointeur ...
.0db8	8a		               txa
.0db9	18		               clc
.0dba	69 0b		               adc  #11
.0dbc	a8		               tay
.0dbd	a2 06		               ldx  #$06
.0dbf	b9 00 01	nextbyte       lda  $0100,y
.0dc2	99 0e 0e	               sta  words,y
.0dc5	c8		               iny
.0dc6	ca		               dex
.0dc7	d0 f6		               bne  nextbyte
.0dc9	ad 0e 0e	               lda  s
.0dcc	8d e5 0d	               sta  source+1
.0dcf	ad 0f 0e	               lda  s+1
.0dd2	8d e6 0d	               sta  source+2
.0dd5	ad 10 0e	               lda  d
.0dd8	8d e2 0d	               sta  destin+1
.0ddb	ad 11 0e	               lda  d+1
.0dde	8d e3 0d	               sta  destin+2
.0de1	ad ff ff	destin         lda  $ffff
.0de4	8d ff ff	source         sta  $ffff
.0de7	ee e2 0d	               inc  destin+1
.0dea	d0 03		               bne  src
.0dec	ee e3 0d	               inc  destin+2
.0def	ee e5 0d	src            inc  source+1
.0df2	d0 03		               bne  cnt
.0df4	ee e6 0d	               inc  source+2
.0df7	ad 12 0e	cnt            lda  compte
.0dfa	d0 08		               bne  decit
.0dfc	ad 13 0e	               lda  compte+1
.0dff	f0 09		               beq  fini
.0e01	ce 13 0e	               dec  compte+1
.0e04	ce 12 0e	decit          dec  compte
.0e07	4c e1 0d	               jmp  destin
.0e0a	20 57 0d	fini           jsr  pop
.0e0d	60		               rts
.0e0e			words
>0e0e	00 00		s         .word     $0000
>0e10	00 00		d         .word     $0000
>0e12	00 00		compte    .word     $0000
.0e14			decword
.0e14	20 18 0d	               jsr  push
.0e17	86 fd		               stx  zpage2
.0e19	84 fe		               sty  zpage2+1
.0e1b	20 57 0d	               jsr  pop
.0e1e	60		               rts
.0e1f			inczp1
.0e1f	08		               php
.0e20	e6 fb		               inc  zpage1
.0e22	d0 02		               bne  nopage
.0e24	e6 fc		               inc  zpage1+1
.0e26	28		nopage         plp
.0e27	60		               rts
.0e28			deczp1
.0e28	08		                php
.0e29	48		                pha
.0e2a	c6 fb		                dec  zpage1
.0e2c	d0 02		                bne  nopage
.0e2e	c6 fc		                dec  zpage1+1
.0e30	c6 fb		nopage          dec  zpage1
.0e32	68		                pla
.0e33	28		                plp
.0e34	60		                rts
.0e35			inczp2
.0e35	08		               php
.0e36	48		               pha
.0e37	e6 fd		               inc  zpage2
.0e39	d0 02		               bne  nopage
.0e3b	e6 fe		               inc  zpage2+1
.0e3d	68		nopage         pla
.0e3e	28		               plp
.0e3f	60		               rts
.0e40			deczp2
.0e40	08		               php
.0e41	48		               pha
.0e42	a5 fd		               lda  zpage2
.0e44	d0 02		               bne  nopage
.0e46	c6 fe		               dec  zpage2+1
.0e48	c6 fd		nopage         dec  zpage2
.0e4a	28		               plp
.0e4b	60		               rts
.0e4c			savezp1
.0e4c	08		               php
.0e4d	48		               pha
.0e4e	a5 fb		               lda  zpage1
.0e50	8d c8 0e	               sta  zp1
.0e53	a5 fc		               lda  zpage1+1
.0e55	8d c9 0e	               sta  zp1+1
.0e58	68		               pla
.0e59	28		               plp
.0e5a	60		               rts
.0e5b			restzp1
.0e5b	08		               php
.0e5c	48		               pha
.0e5d	ad c8 0e	               lda zp1
.0e60	85 fb		               sta zpage1
.0e62	ad c9 0e	               lda zp1+1
.0e65	85 fc		               sta zpage1+1
.0e67	68		               pla
.0e68	28		               plp
.0e69	60		               rts
.0e6a			savezp2
.0e6a	08		         php
.0e6b	48		         pha
.0e6c	a5 fd		         lda zpage2
.0e6e	8d ca 0e	         sta zp2
.0e71	a5 fe		         lda zpage2+1
.0e73	8d cb 0e	         sta zp2+1
.0e76	68		         pla
.0e77	28		         plp
.0e78	60		         rts
.0e79			restzp2
.0e79	08		                php
.0e7a	48		                pha
.0e7b	ad ca 0e	                lda  zp2
.0e7e	85 fd		                sta  zpage2
.0e80	ad cb 0e	                lda  zp2+1
.0e83	85 fe		                sta  zpage2+1
.0e85	68		                pla
.0e86	28		                plp
.0e87	60		                rts
.0e88			xy2addr
.0e88	08		                php
.0e89	48		                pha
.0e8a	8a		                txa
.0e8b	48		                pha
.0e8c	98		                tya
.0e8d	48		                pha
.0e8e	ad c3 0e	                lda     addr1+1
.0e91	8d c5 0e	                sta     addr2+1
.0e94	ad c2 0e	                lda     addr1
.0e97	8d c4 0e	                sta     addr2
.0e9a	c0 00		                cpy     #$00
.0e9c	f0 0f		                beq     addx
.0e9e	18		moreline        clc
.0e9f	6d c1 0e	                adc     ymult
.0ea2	90 03		                bcc     norepy
.0ea4	ee c5 0e	                inc     addr2+1
.0ea7	8d c4 0e	norepy          sta     addr2
.0eaa	88		                dey
.0eab	d0 f1		                bne     moreline
.0ead	8a		addx            txa
.0eae	18		                clc
.0eaf	6d c4 0e	                adc     addr2
.0eb2	90 03		                bcc     thatsit
.0eb4	ee c5 0e	                inc     addr2+1
.0eb7	8d c4 0e	thatsit         sta     addr2
.0eba	68		                pla
.0ebb	a8		                tay
.0ebc	68		                pla
.0ebd	aa		                tax
.0ebe	68		                pla
.0ebf	28		                plp
.0ec0	60		                rts
>0ec1	28		ymult          .byte     40
>0ec2	00 00		addr1          .word     $0000
>0ec4	00 00		addr2          .word     $0000
>0ec6	00 00		bytecnt        .word     $0000
>0ec8	00 00		zp1        .word   $0000
>0eca	00 00		zp2        .word   $0000

;******  Return to file: bst40sub.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>0ecc	01		a2hexcol       .byte     1              ; pour aputscxy
>0ecd	00		a2hexbkcol     .byte     %00000000
.0ece			a2hexpos
>0ece	00		a2hexpx        .byte     0              ; pour aputsxy
>0ecf	00		a2hexpy        .byte     0
>0ed0	24		a2hexprefix    .byte     "$"            ; pour aputs
>0ed1	00 00		a2hexstr       .word     $00
>0ed3	00 00		               .word     $00
>0ed5	00		               .byte     0              ; 0 end string
.0ed6			putahexfmtxy
.0ed6	20 18 0d	               jsr  push
.0ed9	20 25 0f	               jsr  a2hex
.0edc	ae ce 0e	               ldx  a2hexpx
.0edf	ac cf 0e	               ldy  a2hexpy
.0ee2	20 41 0c	               jsr  gotoxy
.0ee5	a2 d0		               ldx  #<a2hexprefix
.0ee7	a0 0e		               ldy  #>a2hexprefix
.0ee9	20 27 0c	               jsr  puts
.0eec	20 57 0d	               jsr  pop
.0eef	60		               rts
.0ef0			putahexfmt
.0ef0	20 18 0d	               jsr  push
.0ef3	20 25 0f	               jsr  a2hex
.0ef6	a2 d0		               ldx  #<a2hexprefix
.0ef8	a0 0e		               ldy  #>a2hexprefix
.0efa	20 27 0c	               jsr  puts
.0efd	20 57 0d	               jsr  pop
.0f00	60		               rts
.0f01			putahex
.0f01	20 18 0d	               jsr  push
.0f04	20 25 0f	               jsr  a2hex
.0f07	a2 d1		               ldx  #<a2hexstr
.0f09	a0 0e		               ldy  #>a2hexstr
.0f0b	20 27 0c	               jsr  puts
.0f0e	20 57 0d	               jsr  pop
.0f11	60		               rts
.0f12			nib2hex
.0f12	08		               php
.0f13	29 0f		               and  #$0f
.0f15	f8		               sed
.0f16	18		               clc
.0f17	69 90		               adc  #$90
.0f19	69 40		               adc  #$40
.0f1b	d8		               cld
.0f1c	28		               plp
.0f1d	60		               rts
.0f1e			lsra4bits
.0f1e	08		               php
.0f1f	4a		               lsr
.0f20	4a		               lsr
.0f21	4a		               lsr
.0f22	4a		               lsr
.0f23	28		               plp
.0f24	60		               rts
.0f25			a2hex
.0f25	08		               php
.0f26	48		               pha
.0f27	48		               pha
.0f28	20 1e 0f	               jsr  lsra4bits
.0f2b	20 12 0f	               jsr  nib2hex
.0f2e	8d d1 0e	               sta  a2hexstr
.0f31	68		               pla
.0f32	20 12 0f	               jsr  nib2hex
.0f35	8d d2 0e	               sta  a2hexstr+1
.0f38	a9 00		               lda  #$00                ; set end of string
.0f3a	8d d3 0e	               sta  a2hexstr+2
.0f3d	68		               pla
.0f3e	28		               plp
.0f3f	60		               rts
.0f40			xy2hex
.0f40	20 18 0d	               jsr  push
.0f43	20 25 0f	               jsr  a2hex
.0f46	8a		               txa
.0f47	48		               pha
.0f48	20 1e 0f	               jsr  lsra4bits
.0f4b	20 12 0f	               jsr  nib2hex
.0f4e	8d d1 0e	               sta  a2hexstr
.0f51	68		               pla
.0f52	20 12 0f	               jsr  nib2hex
.0f55	8d d2 0e	               sta  a2hexstr+1
.0f58	98		               tya
.0f59	48		               pha
.0f5a	20 1e 0f	               jsr  lsra4bits
.0f5d	20 12 0f	               jsr  nib2hex
.0f60	8d d3 0e	               sta  a2hexstr+2
.0f63	68		               pla
.0f64	20 12 0f	               jsr  nib2hex
.0f67	8d d4 0e	               sta  a2hexstr+3
.0f6a	a9 00		               lda  #$00                ; 0 ended string
.0f6c	8d d5 0e	               sta  a2hexstr+4
.0f6f	20 57 0d	               jsr  pop
.0f72			atobin
.0f72	20 18 0d	               jsr     push
.0f75	a2 08		               ldx     #8
.0f77	a0 00		               ldy     #0
.0f79	2a		nextbit        rol
.0f7a	48		               pha
.0f7b	69 00		               adc     #$00
.0f7d	29 01		               and     #$01
.0f7f	20 12 0f	               jsr     nib2hex
.0f82	99 93 0f	               sta     abin,y
.0f85	68		               pla
.0f86	c8		               iny
.0f87	ca		               dex
.0f88	d0 ef		               bne     nextbit
.0f8a	a9 00		               lda     #0
.0f8c	99 93 0f	               sta     abin,y
.0f8f	20 57 0d	               jsr     pull
.0f92	60		               rts
>0f93	30 30 30 30	abin           .null   "00000000"
>0f97	30 30 30 30 00
.0f9c			putabin
.0f9c	20 72 0f	               jsr     atobin
.0f9f	20 18 0d	               jsr     push
.0fa2	a2 93		               ldx     #<abin
.0fa4	a0 0f		               ldy     #>abin
.0fa6	20 27 0c	               jsr     puts
.0fa9	20 57 0d	               jsr     pop
.0fac	60		               rts
.0fad			putabinfmt
.0fad	08		               php
.0fae	48		               pha
.0faf	a9 25		               lda     #"%"
.0fb1	20 21 0c	               jsr     putch
.0fb4	68		               pla
.0fb5	20 9c 0f	               jsr     putabin
.0fb8	28		               plp
.0fb9	60		               rts
.0fba			putabinxy
.0fba	20 41 0c	               jsr     gotoxy
.0fbd	20 9c 0f	               jsr     putabin
.0fc0	60		               rts
.0fc1			putabinfmtxy
.0fc1	20 41 0c	               jsr     gotoxy
.0fc4	20 ad 0f	               jsr     putabinfmt
.0fc7	60		               rts

;******  Return to file: bst40sub.asm


;******  End of listing

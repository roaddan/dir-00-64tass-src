
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L jbmon64cart.txt -o jbmon64cart.prg jbmon64cart.asm
; Mon May 27 22:56:32 2024

;Offset	;Hex		;Source

;******  Processing input file: jbmon64cart.asm

=$c1			tmp0    = $c1               ; used to return input, often holds end address
=$c3			tmp2    = $c3               ; usually holds start address
=$90			satus   = $90               ; kernal i/o status word
=$b7			fnlen   = $b7               ; length of current filename
=$b9			sadd    = $b9               ; current secondary address (official name sa)
=$ba			fa      = $ba               ; current device number
=$bb			fnadr   = $bb               ; pointer to current filename
=$c6			ndx     = $c6               ; number of characters in keyboard buffer
=$0277			keyd    = $0277             ; keyboard buffer
=$0316			bkvec   = $0316             ; brk instruction vector (official name cbinv)
>0100			acmd    .fill 1             ; addressing command
>0101			length  .fill 1             ; length of operand
>0102			mnemw   .fill 3             ; 3 letter mnemonic buffer
>0105			savx    .fill 1             ; 1 byte temp storage, often to save x register
>0106			opcode  .fill 1             ; current opcode for assembler/disassembler
>0107			upflg   .fill 1             ; flag: count up (bit 7 clear) or down (bit 7 set)
>0108			digcnt  .fill 1             ; digit count
>0109			indig   .fill 1             ; numeric value of single digit
>010a			numbit  .fill 1             ; numeric base of input
>010b			stash   .fill 2             ; 2-byte temp storage
>010d			u0aa0   .fill 10            ; work buffer
=$0117			u0aae   =*                  ; end of work buffer
>0117			stage   .fill 30            ; staging buffer for filename, search, etc.
=$0135			estage  =*                  ; end of staging buffer
>0200			inbuff  .fill 40            ; 40-character input buffer
=$0228			endin   =*                  ; end of input buffer
>0228			pch     .fill 1             ; program counter high byte
>0229			pcl     .fill 1             ; program counter low byte
>022a			sr      .fill 1             ; status register
>022b			acc     .fill 1             ; accumulator
>022c			xr      .fill 1             ; x register
>022d			yr      .fill 1             ; y register
>022e			sp      .fill 1             ; stack pointer
>022f			store   .fill 2             ; 2-byte temp storage
>0231			chrpnt  .fill 1             ; current position in input buffer
>0232			savy    .fill 1             ; temp storage, often to save y register
>0233			u9f     .fill 1             ; index into assembler work buffer
=$ff90			setmsg  = $ff90             ; set kernel message control flag
=$ff93			second  = $ff93             ; set secondary address after listen
=$ff96			tksa    = $ff96             ; send secondary address after talk
=$ffb1			listen  = $ffb1             ; command serial bus device to listen
=$ffb4			talk    = $ffb4             ; command serial bus device to talk
=$ffba			setlfs  = $ffba             ; set logical file parameters
=$ffbd			setnam  = $ffbd             ; set filename
=$ffa5			acptr   = $ffa5             ; input byte from serial bus
=$ffa8			ciout   = $ffa8             ; output byte to serial bus
=$ffab			untlk   = $ffab             ; command serial bus device to untalk
=$ffae			unlsn   = $ffae             ; command serial bus device to unlisten
=$ffc6			chkin   = $ffc6             ; define input channel
=$ffcc			clrchn  = $ffcc             ; restore default devices
=$ffcf			input   = $ffcf             ; input a character (official name chrin)
=$ffd2			chrout  = $ffd2             ; output a character
=$ffd5			load    = $ffd5             ; load from device
=$ffd8			save    = $ffd8             ; save to device
=$ffe1			stop    = $ffe1             ; check the stop key
=$ffe4			getin   = $ffe4             ; get a character
=$8000			org     = $8000 ; 36000;$9519
>8000	09 80		        .word coldstart            ; coldstart vector
>8002	1a 80		        .word warmstart            ; warmstart vector
>8004	c3 c2 cd 38	        .byte $C3,$C2,$CD,$38,$30  ; "CBM8O". Autostart string
>8008	30
.8009	78		coldstart       sei
.800a	8e 16 d0	                stx $d016
.800d	20 a3 fd	                jsr $fda3 ;Prepare IRQ
.8010	20 50 fd	                jsr $fd50 ;Init memory. Rewrite this routine to speed up boot process.
.8013	20 15 fd	                jsr $fd15 ;Init I/O
.8016	20 5b ff	                jsr $ff5b ;Init video
.8019	58		                cli
.801a			warmstart
.801a	20 5a 80	super           jsr setcolors
.801d	a0 33		                ldy #msg9-msgbas    ; display "      < < < < < supermon > > > > >"
.801f	20 cc 89	                jsr sndmsg
.8022	a0 56		                ldy #msga-msgbas    ; display " by jim butterfield  (r.i.p. 1936-2007)"
.8024	20 cc 89	                jsr sndmsg
.8027	20 25 87	                jsr crlf
.802a	a0 20		                ldy #msg4-msgbas    ; display "..sys "
.802c	20 cc 89	                jsr sndmsg
.802f	ad 7b 8b	                lda supad           ; store entry point address in tmp0
.8032	85 c1		                sta tmp0
.8034	ad 7c 8b	                lda supad+1
.8037	85 c2		                sta tmp0+1
.8039	20 56 88	                jsr cvtdec          ; convert address to decimal
.803c	a9 00		                lda #0
.803e	a2 06		                ldx #6
.8040	a0 03		                ldy #3
.8042	20 90 88	                jsr nmprnt          ; print entry point address
.8045	20 25 87	                jsr crlf
.8048	ad 79 8b	                lda linkad          ; set brk vector
.804b	8d 16 03	                sta bkvec
.804e	ad 7a 8b	                lda linkad+1
.8051	8d 17 03	                sta bkvec+1
.8054	a9 80		                lda #$80            ; disable kernel control messages
.8056	20 90 ff	                jsr setmsg          ; and enable error messages
.8059	00		                brk
.805a			setcolors
.805a	08		                php
.805b	48		                pha
.805c	a9 0e		                lda     #$0e ;and #$0a #$0b
.805e	8d 21 d0	                sta     screen
.8061	29 07		                and     #$07
.8063	8d 20 d0	                sta     border
.8066	a9 01		                lda     #$01
.8068	8d 86 02	                sta     texte
.806b	a9 93		                lda     #147
.806d	20 d2 ff	                jsr     $ffd2
.8070	a9 13		                lda     #19
.8072	20 d2 ff	                jsr     $ffd2
.8075	68		                pla
.8076	28		                plp
.8077	60		                rts
=53281			screen  =       53281
=53280			border  =       53280
=646			texte   =       646
.8078	a2 05		break   ldx #$05            ; pull registers off the stack
.807a	68		bstack  pla                 ; order: y,x,a,sr,pcl,pch
.807b	9d 28 02	        sta pch,x           ; store in memory
.807e	ca		        dex
.807f	10 f9		        bpl bstack
.8081	d8		        cld                 ; disable bcd mode
.8082	ba		        tsx                 ; store stack pointer in memory
.8083	8e 2e 02	        stx sp
.8086	58		        cli                 ; enable interupts
.8087	a0 00		dsplyr  ldy #msg2-msgbas    ; display headers
.8089	20 b9 89	        jsr sndclr
.808c	a9 3b		        lda #$3b            ; prefix registers with "; " to allow editing
.808e	20 d2 ff	        jsr chrout
.8091	a9 20		        lda #$20
.8093	20 d2 ff	        jsr chrout
.8096	ad 28 02	        lda pch             ; print 2-byte program counter
.8099	20 3e 87	        jsr wrtwo
.809c	a0 01		        ldy #1              ; start 1 byte after pc high byte
.809e	b9 28 02	disj    lda pch,y           ; loop through rest of the registers
.80a1	20 1a 87	        jsr wrbyte          ; print 1-byte register value
.80a4	c8		        iny
.80a5	c0 07		        cpy #7              ; there are a total of 5 registers to print
.80a7	90 f5		        bcc disj
.80a9	20 25 87	strt    jsr crlf            ; new line
.80ac	a2 00		        ldx #0              ; point at start of input buffer
.80ae	8e 31 02	        stx chrpnt
.80b1	20 cf ff	smove   jsr input           ; chrin kernal call to input a character
.80b4	9d 00 02	        sta inbuff,x        ; store in input buffer
.80b7	e8		        inx
.80b8	e0 28		        cpx #endin-inbuff   ; error if buffer is full
.80ba	b0 1c		        bcs error
.80bc	c9 0d		        cmp #$0d            ; keep reading until cr
.80be	d0 f1		        bne smove
.80c0	a9 00		        lda #0              ; null-terminate input buffer
.80c2	9d ff 01	        sta inbuff-1,x      ; (replacing the cr)
.80c5	20 66 87	st1     jsr getchr          ; get a character from the buffer
.80c8	f0 df		        beq strt            ; start over if buffer is empty
.80ca	c9 20		        cmp #$20            ; skip leading spaces
.80cc	f0 f7		        beq st1
.80ce	a2 17		s0      ldx #keytop-keyw    ; loop through valid command characters
.80d0	dd 3a 8b	s1      cmp keyw,x          ; see if input character matches
.80d3	f0 0b		        beq s2              ; command matched, dispatch it
.80d5	ca		        dex                 ; no match, check next command
.80d6	10 f8		        bpl s1              ; keep trying until we've checked them all
.80d8	a0 1e		error   ldy #msg3-msgbas    ; display "?" to indicate error and go to new line
.80da	20 cc 89	        jsr sndmsg
.80dd	4c a9 80	        jmp strt            ; back to main loop
.80e0	e0 13		s2      cpx #$13            ; last 3 commands in table are load/save/validate
.80e2	b0 12		        bcs lsv             ;   which are handled by the same subroutine
.80e4	e0 0f		        cpx #$0f            ; next 4 commands are base conversions
.80e6	b0 14		        bcs cnvlnk          ;   which are handled by the same subroutine
.80e8	8a		        txa                 ; remaining commands dispatch through vector table
.80e9	0a		        asl a               ; multiply index of command by 2
.80ea	aa		        tax                 ;   since table contains 2-byte addresses
.80eb	bd 52 8b	        lda kaddr+1,x       ; push address from vector table onto stack
.80ee	48		        pha                 ;   so that the rts from getpar will jump there
.80ef	bd 51 8b	        lda kaddr,x
.80f2	48		        pha
.80f3	4c 47 86	        jmp getpar          ; get the first parameter for the command
.80f6	8d 32 02	lsv     sta savy            ; handle load/save/validate
.80f9	4c c9 82	        jmp ld
.80fc	4c 0b 88	cnvlnk  jmp convrt          ; handle base conversion
.80ff	6c 02 a0	exit    jmp ($a002)         ; jump to warm-start vector to reinitialize basic
.8102	b0 08		dsplym  bcs dspm11          ; start from previous end addr if no address given
.8104	20 80 87	        jsr copy12          ; save start address in tmp2
.8107	20 47 86	        jsr getpar          ; get end address in tmp0
.810a	90 06		        bcc dsmnew          ; did user specify one?
.810c	a9 0b		dspm11  lda #$0b            ; if not, show 12 lines by default
.810e	85 c1		        sta tmp0
.8110	d0 0e		        bne dspbyt          ; always true, but bne uses 1 byte less than jmp
.8112	20 89 87	dsmnew  jsr sub12           ; end addr given, calc bytes between start and end
.8115	90 1e		        bcc merror          ; error if start is after end
.8117	a2 03		        ldx #3              ; divide by 8 (shift right 3 times)
.8119	46 c2		dspm01  lsr tmp0+1
.811b	66 c1		        ror tmp0
.811d	ca		        dex
.811e	d0 f9		        bne dspm01
.8120	20 e1 ff	dspbyt  jsr stop            ; check for stop key
.8123	f0 0d		        beq dspmx           ; exit early if pressed
.8125	20 a5 81	        jsr dispmem         ; display 1 line containing 8 bytes
.8128	a9 08		        lda #8              ; increase start address by 8 bytes
.812a	20 bf 87	        jsr bumpad2
.812d	20 97 87	        jsr suba1           ; decrement line counter
.8130	b0 ee		        bcs dspbyt          ; show another line until it's < 0
.8132	4c a9 80	dspmx   jmp strt            ; back to main loop
.8135	4c d8 80	merror  jmp error           ; handle error
.8138	20 d7 87	altr    jsr copy1p          ; store first parameter in pc
.813b	a0 00		        ldy #0              ; init counter
.813d	20 47 86	altr1   jsr getpar          ; get value for next register
.8140	b0 0a		        bcs altrx           ; exit early if no more values given
.8142	a5 c1		        lda tmp0            ; store in memory, offset from sr
.8144	99 2a 02	        sta sr,y            ; these locations will be transferred to the
.8147	c8		        iny                 ;   actual registers before exiting the monitor
.8148	c0 05		        cpy #$05            ; have we updated all 5 yet?
.814a	90 f1		        bcc altr1           ; if not, get next
.814c	4c a9 80	altrx   jmp strt            ; back to main loop
.814f	b0 13		altm    bcs altmx           ; exit if no parameter provided
.8151	20 80 87	        jsr copy12          ; copy parameter to start address
.8154	a0 00		        ldy #0
.8156	20 47 86	altm1   jsr getpar          ; get value for next byte of memory
.8159	b0 09		        bcs altmx           ; if none given, exit early
.815b	a5 c1		        lda tmp0            ; poke value into memory at start address + y
.815d	91 c3		        sta (tmp2),y
.815f	c8		        iny                 ; next byte
.8160	c0 08		        cpy #8              ; have we read 8 bytes yet?
.8162	90 f2		        bcc altm1           ; if not, read the next one
.8164	a9 91		altmx   lda #$91            ; move cursor up
.8166	20 d2 ff	        jsr chrout
.8169	20 a5 81	        jsr dispmem         ; re-display line to make ascii match hex
.816c	4c a9 80	        jmp strt            ; back to main loop
.816f	ae 2e 02	goto    ldx sp              ; load stack pointer from memory
.8172	9a		        txs                 ; save in sp register
.8173	20 d7 87	goto2   jsr copy1p          ; copy provided address to pc
.8176	78		        sei                 ; disable interrupts
.8177	ad 28 02	        lda pch             ; push pc high byte on stack
.817a	48		        pha
.817b	ad 29 02	        lda pcl             ; push pc low byte on stack
.817e	48		        pha
.817f	ad 2a 02	        lda sr              ; push status byte on stack
.8182	48		        pha
.8183	ad 2b 02	        lda acc             ; load accumulator from memory
.8186	ae 2c 02	        ldx xr              ; load x from memory
.8189	ac 2d 02	        ldy yr              ; load y from memory
.818c	40		        rti                 ; return from interrupt (pops pc and sr)
.818d	ae 2e 02	jsub    ldx sp              ; load stack pointer from memory
.8190	9a		        txs                 ; save value in sp register
.8191	20 73 81	        jsr goto2           ; same as goto command
.8194	8c 2d 02	        sty yr              ; save y to memory
.8197	8e 2c 02	        stx xr              ; save x to memory
.819a	8d 2b 02	        sta acc             ; save accumulator to memory
.819d	08		        php                 ; push processor status on stack
.819e	68		        pla                 ; pull processor status into a
.819f	8d 2a 02	        sta sr              ; save processor status to memory
.81a2	4c 87 80	        jmp dsplyr          ; display registers
.81a5	20 25 87	dispmem jsr crlf            ; new line
.81a8	a9 3e		        lda #">"            ; prefix > so memory can be edited in place
.81aa	20 d2 ff	        jsr chrout
.81ad	20 10 87	        jsr showad          ; show address of first byte on line
.81b0	a0 00		        ldy #0
.81b2	f0 03		        beq dmemgo          ; showad already printed a space after the address
.81b4	20 1d 87	dmemlp  jsr space           ; print space between bytes
.81b7	b1 c3		dmemgo  lda (tmp2),y        ; load byte from start address + y
.81b9	20 3e 87	        jsr wrtwo           ; output hex digits for byte
.81bc	c8		        iny                 ; next byte
.81bd	c0 08		        cpy #8              ; have we output 8 bytes yet?
.81bf	90 f3		        bcc dmemlp          ; if not, output next byte
.81c1	a0 26		        ldy #msg5-msgbas    ; if so, output : and turn on reverse video
.81c3	20 cc 89	        jsr sndmsg          ;   before displaying ascii representation
.81c6	a0 00		        ldy #0              ; back to first byte in line
.81c8	b1 c3		dchar   lda (tmp2),y        ; load byte at start address + y
.81ca	aa		        tax                 ; stash in x
.81cb	29 bf		        and #$bf            ; clear 6th bit
.81cd	c9 22		        cmp #$22            ; is it a quote ("")?
.81cf	f0 08		        beq ddot            ; if so, print . instead
.81d1	8a		        txa                 ; if not, restore character
.81d2	29 7f		        and #$7f            ; clear top bit
.81d4	c9 20		        cmp #$20            ; is it a printable character (>= $20)?
.81d6	8a		        txa                 ; restore character
.81d7	b0 02		        bcs dchrok          ; if printable, output character
.81d9	a9 2e		ddot    lda #$2e            ; if not, output '.' instaed
.81db	20 d2 ff	dchrok  jsr chrout
.81de	c8		        iny                 ; next byte
.81df	c0 08		        cpy #8              ; have we output 8 bytes yet?
.81e1	90 e5		        bcc dchar           ; if not, output next byte
.81e3	60		        rts
.81e4	a9 00		compar  lda #0              ; bit 7 clear signals compare
>81e6	2c		        .byte $2c           ; absolute bit opcode consumes next word (lda #$80)
.81e7	a9 80		trans   lda #$80            ; bit 7 set signals transfer
.81e9	8d 32 02	        sta savy            ; save compare/transfer flag in savy
.81ec	a9 00		        lda #0              ; assume we're counting up (bit 7 clear)
.81ee	8d 07 01	        sta upflg           ; save direction flag
.81f1	20 e4 87	        jsr getdif          ; get two addresses and calculate difference
.81f4	b0 05		        bcs terror          ; carry set indicates error
.81f6	20 47 86	        jsr getpar          ; get destination address in tmp0
.81f9	90 03		        bcc tokay           ; carry set indicates error
.81fb	4c d8 80	terror  jmp error           ; handle error
.81fe	2c 32 02	tokay   bit savy            ; transfer or compare?
.8201	10 27		        bpl compar1         ; high bit clear indicates compare
.8203	a5 c3		        lda tmp2            ; if it's a transfer, we must take steps
.8205	c5 c1		        cmp tmp0            ;   to avoid overwriting the source bytes before
.8207	a5 c4		        lda tmp2+1          ;   they have been transferred
.8209	e5 c2		        sbc tmp0+1          ; compare source (tmp2) to destination (tmp0)
.820b	b0 1d		        bcs compar1         ; and count up if source is before than desitnation
.820d	ad 2f 02	        lda store           ; otherwise, start at end and count down...
.8210	65 c1		        adc tmp0            ; add length (store) to desintation (tmp0)
.8212	85 c1		        sta tmp0            ; to calculate end of destination
.8214	ad 30 02	        lda store+1
.8217	65 c2		        adc tmp0+1
.8219	85 c2		        sta tmp0+1
.821b	a2 01		        ldx #1              ; change source pointer from beginning to end
.821d	bd 0b 01	tdown   lda stash,x         ; tmp2 = source end (stash)
.8220	95 c3		        sta tmp2,x
.8222	ca		        dex
.8223	10 f8		        bpl tdown
.8225	a9 80		        lda #$80            ; high bit set in upflg means count down
.8227	8d 07 01	        sta upflg
.822a	20 25 87	compar1 jsr crlf            ; new line
.822d	a0 00		        ldy #0              ; no offset from pointer
.822f	20 e1 ff	tcloop  jsr stop            ; check for stop key
.8232	f0 31		        beq texit           ; exit if pressed
.8234	b1 c3		        lda (tmp2),y        ; load byte from source
.8236	2c 32 02	        bit savy            ; transfer or compare?
.8239	10 02		        bpl compar2         ; skip store if comparing
.823b	91 c1		        sta (tmp0),y        ; otherwise, store in destination
.823d	d1 c1		compar2 cmp (tmp0),y        ; compare to destination
.823f	f0 03		        beq tmvad           ; don't show address if equal
.8241	20 10 87	        jsr showad          ; show address
.8244	2c 07 01	tmvad   bit upflg           ; counting up or down?
.8247	30 0b		        bmi tdecad          ; high bit set means we're counting down
.8249	e6 c1		        inc tmp0            ; increment destination low byte
.824b	d0 10		        bne tincok
.824d	e6 c2		        inc tmp0+1          ; carry to high byte if necessary
.824f	d0 0c		        bne tincok
.8251	4c d8 80	        jmp error           ; error if high byte overflowed
.8254	20 97 87	tdecad  jsr suba1           ; decrement destination (tmp0)
.8257	20 c9 87	        jsr sub21           ; decrement source (tmp2)
.825a	4c 60 82	        jmp tmor
.825d	20 bd 87	tincok  jsr adda2           ; increment source (tmp2)
.8260	20 ab 87	tmor    jsr sub13           ; decrement length
.8263	b0 ca		        bcs tcloop          ; loop until length is 0
.8265	4c a9 80	texit   jmp strt            ; back to main loop
.8268	20 e4 87	hunt    jsr getdif          ; get start (tmp2) and end (tmp0) of haystack
.826b	b0 59		        bcs herror          ; carry indicates error
.826d	a0 00		        ldy #0
.826f	20 66 87	        jsr getchr          ; get a single character
.8272	c9 27		        cmp #"'"            ; is it a single quote?
.8274	d0 16		        bne nostrh          ; if not, input needle as hex bytes
.8276	20 66 87	        jsr getchr          ; if so, input needle as string
.8279	c9 00		        cmp #0
.827b	f0 49		        beq herror          ; error if needle isn't at least one byte
.827d	99 17 01	hpar    sta stage,y         ; save char in staging area
.8280	c8		        iny
.8281	20 66 87	        jsr getchr          ; get another char
.8284	f0 18		        beq htgo            ; if it's null start searching
.8286	c0 1e		        cpy #estage-stage   ; have we filled up the needle staging area?
.8288	d0 f3		        bne hpar            ; if not, get another character
.828a	f0 12		        beq htgo            ; if so, start searching
.828c	20 44 86	nostrh  jsr rdpar           ; read hex bytes if string not indicated
.828f	a5 c1		hlp     lda tmp0            ; save last read byte in staging area
.8291	99 17 01	        sta stage,y
.8294	c8		        iny                 ; get another hex byte
.8295	20 47 86	        jsr getpar
.8298	b0 04		        bcs htgo            ; if there is none, start searching
.829a	c0 1e		        cpy #estage-stage   ; have we filled up the needle staging area?
.829c	d0 f1		        bne hlp             ; if not, get another byte
.829e	8c 32 02	htgo    sty savy            ; save length of needle
.82a1	20 25 87	        jsr crlf            ; new line
.82a4	a0 00		hscan   ldy #0
.82a6	b1 c3		hlp3    lda (tmp2),y        ; get first byte in haystack
.82a8	d9 17 01	        cmp stage,y         ; compare it to first byte of needle
.82ab	d0 09		        bne hnoft           ; if it doesn't match, we haven't found anything
.82ad	c8		        iny                 ; if it does, check the next byte
.82ae	cc 32 02	        cpy savy            ; have we reached the end of the needle?
.82b1	d0 f3		        bne hlp3            ; if not, keep comparing bytes
.82b3	20 10 87	        jsr showad          ; match found, show address
.82b6	20 e1 ff	hnoft   jsr stop            ; no match, check for stop key
.82b9	f0 08		        beq hexit           ; exit prematurely if pressed
.82bb	20 bd 87	        jsr adda2           ; increment haystack pointer
.82be	20 ab 87	        jsr sub13           ; decrement haystack length
.82c1	b0 e1		        bcs hscan           ; still more haystack? keep searching
.82c3	4c a9 80	hexit   jmp strt            ; back to main loop
.82c6	4c d8 80	herror  jmp error           ; handle error
.82c9	a0 01		ld      ldy #1              ; default to reading from tape, device #1
.82cb	84 ba		        sty fa
.82cd	84 b9		        sty sadd            ; default to secondary address #1
.82cf	88		        dey
.82d0	84 b7		        sty fnlen           ; start with an empty filename
.82d2	84 90		        sty satus           ; clear status
.82d4	a9 01		        lda #>stage         ; set filename pointer to staging buffer
.82d6	85 bc		        sta fnadr+1
.82d8	a9 17		        lda #<stage
.82da	85 bb		        sta fnadr
.82dc	20 66 87	l1      jsr getchr          ; get a character
.82df	f0 59		        beq lshort          ; no filename given, try load or verify from tape
.82e1	c9 20		        cmp #$20            ; skip leading spaces
.82e3	f0 f7		        beq l1
.82e5	c9 22		        cmp #$22            ; error if filename doesn't start with a quote
.82e7	d0 16		        bne lerror
.82e9	ae 31 02	        ldx chrpnt          ; load current char pointer into index reg
.82ec	bd 00 02	l3      lda inbuff,x        ; load current char from buffer to accumulator
.82ef	f0 49		        beq lshort          ; no filename given, try load or verify from tape
.82f1	e8		        inx                 ; next char
.82f2	c9 22		        cmp #$22            ; is it a quote?
.82f4	f0 0c		        beq l8              ; if so, we've reached the end of the filename
.82f6	91 bb		        sta (fnadr),y       ; if not, save character in filename buffer
.82f8	e6 b7		        inc fnlen           ; increment filename length
.82fa	c8		        iny
.82fb	c0 1e		        cpy #estage-stage   ; check whether buffer is full
.82fd	90 ed		        bcc l3              ; if not, get another character
.82ff	4c d8 80	lerror  jmp error           ; if so, handle error
.8302	8e 31 02	l8      stx chrpnt          ; set character pointer to the current index
.8305	20 66 87	        jsr getchr          ; eat separator between filename and device #
.8308	f0 30		        beq lshort          ; no separator, try to load or verify from tape
.830a	20 47 86	        jsr getpar          ; get device number
.830d	b0 2b		        bcs lshort          ; no device # given, try load or verify from tape
.830f	a5 c1		        lda tmp0            ; set device number for kernal routines
.8311	85 ba		        sta fa
.8313	20 47 86	        jsr getpar          ; get start address for load or save in tmp0
.8316	b0 22		        bcs lshort          ; no start address, try to load or verify
.8318	20 80 87	        jsr copy12          ; transfer start address to tmp2
.831b	20 47 86	        jsr getpar          ; get end address for save in tmp0
.831e	b0 3d		        bcs ldaddr          ; no end address, try to load to given start addr
.8320	20 25 87	        jsr crlf            ; new line
.8323	a6 c1		        ldx tmp0            ; put low byte of end address in x
.8325	a4 c2		        ldy tmp0+1          ; put high byte of end address in y
.8327	ad 32 02	        lda savy            ; confirm that we're doing a save
.832a	c9 53		        cmp #"s"
.832c	d0 d1		        bne lerror          ; if not, error due to too many params
.832e	a9 00		        lda #0
.8330	85 b9		        sta sadd            ; set secondary address to 0
.8332	a9 c3		        lda #tmp2           ; put addr of zero-page pointer to data in a
.8334	20 d8 ff	        jsr save            ; call kernal save routine
.8337	4c a9 80	lsvxit  jmp strt            ; back to mainloop
.833a	ad 32 02	lshort  lda savy            ; check which command we received
.833d	c9 56		        cmp #"v"
.833f	f0 06		        beq loadit          ; we're doing a verify so don't set a to 0
.8341	c9 4c		        cmp #"l"
.8343	d0 ba		        bne lerror          ; error due to not enough params for save
.8345	a9 00		        lda #0              ; 0 in a signals load, anything else is verify
.8347	20 d5 ff	loadit  jsr load            ; call kernal load routine
.834a	a5 90		        lda satus           ; get i/o status
.834c	29 10		        and #$10            ; check bit 5 for checksum error
.834e	f0 e7		        beq lsvxit          ; if no error go back to mainloop
.8350	ad 32 02	        lda savy            ; ?? not sure what these two lines are for...
.8353	f0 aa		        beq lerror          ; ?? savy will never be 0, so why check?
.8355	a0 28		        ldy #msg6-msgbas    ; display "error" if checksum didn't match
.8357	20 cc 89	        jsr sndmsg
.835a	4c a9 80	        jmp strt            ; back to mainloop
.835d	a6 c3		ldaddr  ldx tmp2            ; load address low byte in x
.835f	a4 c4		        ldy tmp2+1          ; load address high byte in y
.8361	a9 00		        lda #0              ; 0 in a signals load
.8363	85 b9		        sta sadd            ; secondary addr 0 means load to addr in x and y
.8365	f0 d3		        beq lshort          ; execute load
.8367	20 e4 87	fill    jsr getdif          ; start in tmp2, end in stash, length in store
.836a	b0 59		        bcs aerror          ; carry set indicates error
.836c	20 47 86	        jsr getpar          ; get value to fill in tmp0
.836f	b0 54		        bcs aerror          ; carry set indicates error
.8371	20 66 87	        jsr getchr          ; any more characters triggers an error
.8374	d0 4f		        bne aerror
.8376	a0 00		        ldy #0              ; no offset
.8378	a5 c1		fillp   lda tmp0            ; load value to fill in accumulator
.837a	91 c3		        sta (tmp2),y        ; store fill value in current address
.837c	20 e1 ff	        jsr stop            ; check for stop key
.837f	f0 08		        beq fstart          ; if pressed, back to main loop
.8381	20 bd 87	        jsr adda2           ; increment address
.8384	20 ab 87	        jsr sub13           ; decrement length
.8387	b0 ef		        bcs fillp           ; keep going until length reaches 0
.8389	4c a9 80	fstart  jmp strt            ; back to main loop
.838c	b0 37		assem   bcs aerror          ; error if no address given
.838e	20 80 87	        jsr copy12          ; copy address to tmp2
.8391	a2 00		aget1   ldx #0
.8393	8e 0e 01	        stx u0aa0+1         ; clear byte that mnemonic gets shifted into
.8396	8e 08 01	        stx digcnt          ; clear digit count
.8399	20 66 87	aget2   jsr getchr          ; get a char
.839c	d0 04		        bne almor           ; proceed if the character isn't null
.839e	e0 00		        cpx #0              ; it's null, have read a mnemonic yet?
.83a0	f0 e7		        beq fstart          ; if not, silently go back to main loop
.83a2	c9 20		almor   cmp #$20            ; skip leading spaces
.83a4	f0 eb		        beq aget1
.83a6	9d 02 01	        sta mnemw,x         ; put character in mnemonic buffer
.83a9	e8		        inx
.83aa	e0 03		        cpx #3              ; have we read 3 characters yet?
.83ac	d0 eb		        bne aget2           ; if not, get next character
.83ae	ca		asqeez  dex                 ; move to previous char
.83af	30 17		        bmi aoprnd          ; if we're done with mnemonic, look for operand
.83b1	bd 02 01	        lda mnemw,x         ; get current character
.83b4	38		        sec                 ; pack 3-letter mnemonic into 2 bytes (15 bits)
.83b5	e9 3f		        sbc #$3f            ; subtract $3f from ascii code so a-z = 2 to 27
.83b7	a0 05		        ldy #$05            ; letters now fit in 5 bits; shift them out
.83b9	4a		ashift  lsr a               ;   into the first two bytes of the inst buffer
.83ba	6e 0e 01	        ror u0aa0+1         ; catch the low bit from accumulator in right byte
.83bd	6e 0d 01	        ror u0aa0           ; catch the low bit from right byte in left byte
.83c0	88		        dey                 ; count down bits
.83c1	d0 f6		        bne ashift          ; keep looping until we reach zero
.83c3	f0 e9		        beq asqeez          ; unconditional branch to handle next char
.83c5	4c d8 80	aerror  jmp error           ; handle error
.83c8	a2 02		aoprnd  ldx #2              ; mnemonic is in first two bytes so start at third
.83ca	ad 08 01	ascan   lda digcnt          ; did we find address digits last time?
.83cd	d0 2d		        bne aform1          ; if so, look for mode chars
.83cf	20 6f 86	        jsr rdval           ; otherwise, look for an address
.83d2	f0 25		        beq aform0          ; we didn't find an address, look for characters
.83d4	b0 ef		        bcs aerror          ; carry flag indicates error
.83d6	a9 24		        lda #"$"
.83d8	9d 0d 01	        sta u0aa0,x         ; prefix addresses with $
.83db	e8		        inx                 ; next position in buffer
.83dc	a0 04		        ldy #4              ; non-zero page addresses are 4 hex digits
.83de	ad 0a 01	        lda numbit          ; check numeric base in which address was given
.83e1	c9 08		        cmp #8              ; for addresses given in octal or binary
.83e3	90 05		        bcc aaddr           ;   use only the high byte to determine page
.83e5	cc 08 01	        cpy digcnt          ; for decimal or hex, force non-zero page addressing
.83e8	f0 06		        beq afill0          ;   if address was given with four digits or more
.83ea	a5 c2		aaddr   lda tmp0+1          ; check whether high byte of address is zero
.83ec	d0 02		        bne afill0          ; non-zero high byte means we're not in zero page
.83ee	a0 02		        ldy #2              ; if it's in zero page, addr is 2 hex digits
.83f0	a9 30		afill0  lda #$30            ; use 0 as placeholder for each hex digit in addr
.83f2	9d 0d 01	afil0l  sta u0aa0,x         ; put placeholder in assembly buffer
.83f5	e8		        inx                 ; move to next byte in buffer
.83f6	88		        dey                 ; decrement number of remaining digits
.83f7	d0 f9		        bne afil0l          ; loop until all digits have been placed
.83f9	ce 31 02	aform0  dec chrpnt          ; non-numeric input; back 1 char to see what it was
.83fc	20 66 87	aform1  jsr getchr          ; get next character
.83ff	f0 0e		        beq aescan          ; if there is none, we're finished scanning
.8401	c9 20		        cmp #$20            ; skip spaces
.8403	f0 c5		        beq ascan
.8405	9d 0d 01	        sta u0aa0,x         ; store character in assembly buffer
.8408	e8		        inx                 ; move to next byte in buffer
.8409	e0 0a		        cpx #u0aae-u0aa0    ; is instruction buffer full?
.840b	90 bd		        bcc ascan           ; if not, keep scanning
.840d	b0 b6		        bcs aerror          ; error if buffer is full
.840f	8e 2f 02	aescan  stx store           ; save number of bytes in assembly buffer
.8412	a2 00		        ldx #0              ; start at opcode $00 and check every one until
.8414	8e 06 01	        stx opcode          ;   we find one that matches our criteria
.8417	a2 00		atryop  ldx #0
.8419	8e 33 02	        stx u9f             ; reset index into work buffer
.841c	ad 06 01	        lda opcode
.841f	20 d6 85	        jsr instxx          ; look up instruction format for current opcode
.8422	ae 00 01	        ldx acmd            ; save addressing command for later
.8425	8e 30 02	        stx store+1
.8428	aa		        tax                 ; use current opcode as index
.8429	bd f6 8a	        lda mnemr,x         ; check right byte of compressed mnemonic
.842c	20 fd 84	        jsr chekop
.842f	bd b6 8a	        lda mneml,x         ; check left byte of compressed mnemonic
.8432	20 fd 84	        jsr chekop
.8435	a2 06		        ldx #6              ; 6 possible characters to check against operand
.8437	e0 03		tryit   cpx #3              ; are we on character 3?
.8439	d0 14		        bne trymod          ; if not, check operand characters
.843b	ac 01 01	        ldy length          ; otherwise, check number of bytes in operand
.843e	f0 0f		        beq trymod          ; if zero, check operand characters
.8440	ad 00 01	tryad   lda acmd            ; otherwise, look for an address
.8443	c9 e8		        cmp #$e8            ; special case for relative addressing mode
.8445	a9 30		        lda #$30            ; '0' is the digit placeholder we're looking for
.8447	b0 1e		        bcs try4b           ; acmd >= $e8 indicates relative addressing
.8449	20 fa 84	        jsr chek2b          ; acmd < $e8 indicates normal addressing
.844c	88		        dey                 ; consume byte
.844d	d0 f1		        bne tryad           ; check for 2 more digits if not zero-page
.844f	0e 00 01	trymod  asl acmd            ; shift a bit out of the addressing command
.8452	90 0e		        bcc ub4df           ; if it's zero, skip checking current character
.8454	bd a9 8a	        lda char1-1,x
.8457	20 fd 84	        jsr chekop          ; otherwise first character against operand
.845a	bd af 8a	        lda char2-1,x       ; get second character to check
.845d	f0 03		        beq ub4df           ; if it's zero, skip checking it
.845f	20 fd 84	        jsr chekop          ; otherwise check it against hte operand
.8462	ca		ub4df   dex                 ; move to next character
.8463	d0 d2		        bne tryit           ; repeat tests
.8465	f0 06		        beq trybran
.8467	20 fa 84	try4b   jsr chek2b          ; check for 4 digit address placeholder
.846a	20 fa 84	        jsr chek2b          ;   by checking for 2 digits twice
.846d	ad 2f 02	trybran lda store           ; get number of bytes in assembly buffer
.8470	cd 33 02	        cmp u9f             ; more bytes left to check?
.8473	f0 03		        beq abran           ; if not, we've found a match; build instruction
.8475	4c 0a 85	        jmp bumpop          ; if so, this opcode doesn't match; try the next
.8478	ac 01 01	abran   ldy length          ; get number of bytes in operand
.847b	f0 32		        beq a1byte          ; if none, just output the opcode
.847d	ad 30 02	        lda store+1         ; otherwise check the address format
.8480	c9 9d		        cmp #$9d            ; is it a relative branch?
.8482	d0 23		        bne objput          ; if not, skip relative branch calculation
.8484	a5 c1		        lda tmp0            ; calculate the difference between the current
.8486	e5 c3		        sbc tmp2            ;   address and the branch target (low byte)
.8488	aa		        tax                 ; save it in x
.8489	a5 c2		        lda tmp0+1          ; borrow from the high byte if necessary
.848b	e5 c4		        sbc tmp2+1
.848d	90 08		        bcc abback          ; if result is negative, we're branching back
.848f	d0 66		        bne serror          ; high bytes must be equal when branching forward
.8491	e0 82		        cpx #$82            ; difference between low bytes must be < 130
.8493	b0 62		        bcs serror          ; error if the address is too far away
.8495	90 08		        bcc abranx
.8497	a8		abback  tay                 ; when branching backward high byte of target must
.8498	c8		        iny                 ;   be 1 less than high byte of current address
.8499	d0 5c		        bne serror          ; if not, it's too far away
.849b	e0 82		        cpx #$82            ; difference between low bytes must be < 130
.849d	90 58		        bcc serror          ; if not, it's too far away
.849f	ca		abranx  dex                 ; adjust branch target relative to the
.84a0	ca		        dex                 ;   instruction following this one
.84a1	8a		        txa
.84a2	ac 01 01	        ldy length          ; load length of operand
.84a5	d0 03		        bne objp2           ; don't use the absolute address
.84a7	b9 c0 00	objput  lda tmp0-1,y        ; get the operand
.84aa	91 c3		objp2   sta (tmp2),y        ; store it after the opcode
.84ac	88		        dey
.84ad	d0 f8		        bne objput          ; copy the other byte of operand if there is one
.84af	ad 06 01	a1byte  lda opcode          ; put opcode into instruction
.84b2	91 c3		        sta (tmp2),y
.84b4	20 25 87	        jsr crlf            ; carriage return
.84b7	a9 91		        lda #$91            ; back up one line
.84b9	20 d2 ff	        jsr chrout
.84bc	a0 2e		        ldy #msg7-msgbas    ; "a " prefix
.84be	20 b9 89	        jsr sndclr          ; clear line
.84c1	20 58 85	        jsr dislin          ; disassemble the instruction we just assembled
.84c4	ee 01 01	        inc length          ; instruction length = operand length + 1 byte
.84c7	ad 01 01	        lda length          ;   for the opcode
.84ca	20 bf 87	        jsr bumpad2         ; increment address by length of instruction
.84cd	a9 41		        lda #"a"            ; stuff keyboard buffer with next assemble command:
.84cf	8d 77 02	        sta keyd            ;   "a xxxx " where xxxx is the next address
.84d2	a9 20		        lda #" "            ;   after the previously assembled instruction
.84d4	8d 78 02	        sta keyd+1
.84d7	8d 7d 02	        sta keyd+6
.84da	a5 c4		        lda tmp2+1          ; convert high byte of next address to hex
.84dc	20 4e 87	        jsr asctwo
.84df	8d 79 02	        sta keyd+2          ; put it in the keyboard buffer
.84e2	8e 7a 02	        stx keyd+3
.84e5	a5 c3		        lda tmp2            ; convert low byte of next address to hex
.84e7	20 4e 87	        jsr asctwo
.84ea	8d 7b 02	        sta keyd+4          ; put it in the keyboard buffer
.84ed	8e 7c 02	        stx keyd+5
.84f0	a9 07		        lda #7              ; set number of chars in keyboard buffer
.84f2	85 c6		        sta ndx
.84f4	4c a9 80	        jmp strt            ; back to main loop
.84f7	4c d8 80	serror  jmp error           ; handle error
.84fa	20 fd 84	chek2b  jsr chekop          ; check two bytes against value in accumulator
.84fd	8e 05 01	chekop  stx savx            ; stash x
.8500	ae 33 02	        ldx u9f             ; get current index into work buffer
.8503	dd 0d 01	        cmp u0aa0,x         ; check whether this opcode matches the buffer
.8506	f0 0a		        beq opok            ;   matching so far, check the next criteria
.8508	68		        pla                 ; didn't match, so throw away return address
.8509	68		        pla                 ;   on the stack because we're starting over
.850a	ee 06 01	bumpop  inc opcode          ; check the next opcode
.850d	f0 e8		        beq serror          ; error if we tried every opcode and none fit
.850f	4c 17 84	        jmp atryop          ; start over with new opcode
.8512	ee 33 02	opok    inc u9f             ; opcode matches so far; check the next criteria
.8515	ae 05 01	        ldx savx            ; restore x
.8518	60		        rts
.8519	b0 08		disass  bcs dis0ad          ; if no address was given, start from last address
.851b	20 80 87	        jsr copy12          ; copy start address to tmp2
.851e	20 47 86	        jsr getpar          ; get end address in tmp0
.8521	90 06		        bcc dis2ad          ; if one was given, skip default
.8523	a9 14		dis0ad  lda #$14            ; disassemble 14 bytes by default
.8525	85 c1		        sta tmp0            ; store length in tmp0
.8527	d0 05		        bne disgo           ; skip length calculation
.8529	20 89 87	dis2ad  jsr sub12           ; calculate number of bytes between start and end
.852c	90 1f		        bcc derror          ; error if end address is before start address
.852e	20 b3 89	disgo   jsr cline           ; clear the current line
.8531	20 e1 ff	        jsr stop            ; check for stop key
.8534	f0 14		        beq disexit         ; exit early if pressed
.8536	20 50 85	        jsr dsout1          ; output disassembly prefix ". "
.8539	ee 01 01	        inc length
.853c	ad 01 01	        lda length          ; add length of last instruction to start address
.853f	20 bf 87	        jsr bumpad2
.8542	ad 01 01	        lda length          ; subtract length of last inst from end address
.8545	20 99 87	        jsr suba2
.8548	b0 e4		        bcs disgo
.854a	4c a9 80	disexit jmp strt            ; back to mainloop
.854d	4c d8 80	derror  jmp error
.8550	a9 2e		dsout1  lda #"."            ; output ". " prefix to allow edit and reassemble
.8552	20 d2 ff	        jsr chrout
.8555	20 1d 87	        jsr space
.8558	20 10 87	dislin  jsr showad          ; show the address of the instruction
.855b	20 1d 87	        jsr space           ; insert a space
.855e	a0 00		        ldy #0              ; no offset
.8560	b1 c3		        lda (tmp2),y        ; load operand of current instruction
.8562	20 d6 85	        jsr instxx          ; get mnemonic and addressing mode for opcode
.8565	48		        pha                 ; save index into mnemonic table
.8566	ae 01 01	        ldx length          ; get length of operand
.8569	e8		        inx                 ; add 1 byte for opcode
.856a	ca		dsbyt   dex                 ; decrement index
.856b	10 0e		        bpl dshex           ; show hex for byte being disassembled
.856d	8c 32 02	        sty savy            ; save index
.8570	a0 30		        ldy #msg8-msgbas    ; skip 3 spaces
.8572	20 cc 89	        jsr sndmsg
.8575	ac 32 02	        ldy savy            ; restore index
.8578	4c 80 85	        jmp nxbyt
.857b	b1 c3		dshex   lda (tmp2),y        ; show hex for byte
.857d	20 1a 87	        jsr wrbyte
.8580	c8		nxbyt   iny                 ; next byte
.8581	c0 03		        cpy #3              ; have we output 3 bytes yet?
.8583	90 e5		        bcc dsbyt           ; if not, loop
.8585	68		        pla                 ; restore index into mnemonic table
.8586	a2 03		        ldx #3              ; 3 letters in mnemonic
.8588	20 1e 86	        jsr propxx          ; print mnemonic
.858b	a2 06		        ldx #6              ; 6 possible address mode character combos
.858d	e0 03		pradr1  cpx #3              ; have we checked the third combo yet?
.858f	d0 16		        bne pradr3          ; if so, output the leading characters
.8591	ac 01 01	        ldy length          ; get the length of the operand
.8594	f0 11		        beq pradr3          ; if it's zero, there's no operand to print
.8596	ad 00 01	pradr2  lda acmd            ; otherwise, get the addressing mode
.8599	c9 e8		        cmp #$e8            ; check for relative addressing
.859b	08		        php                 ; save result of check
.859c	b1 c3		        lda (tmp2),y        ; get the operand
.859e	28		        plp                 ; restore result of check
.859f	b0 1d		        bcs relad           ; handle a relative address
.85a1	20 3e 87	        jsr wrtwo           ; output digits from address
.85a4	88		        dey
.85a5	d0 ef		        bne pradr2          ; repeat for next byte of operand, if there is one
.85a7	0e 00 01	pradr3  asl acmd            ; check whether addr mode uses the current char
.85aa	90 0e		        bcc pradr4          ; if not, skip it
.85ac	bd a9 8a	        lda char1-1,x       ; look up the first char in the table
.85af	20 d2 ff	        jsr chrout          ; print first char
.85b2	bd af 8a	        lda char2-1,x       ; look up the second char in the table
.85b5	f0 03		        beq pradr4          ; if there's no second character, skip it
.85b7	20 d2 ff	        jsr chrout          ; print second char
.85ba	ca		pradr4  dex                 ; next potential address mode character
.85bb	d0 d0		        bne pradr1          ; loop if we haven't checked them all yet
.85bd	60		        rts                 ; back to caller
.85be	20 ca 85	relad   jsr ub64d           ; calculate absolute address from relative
.85c1	18		        clc
.85c2	69 01		        adc #1              ; adjust address relative to next instruction
.85c4	d0 01		        bne relend          ; don't increment high byte unless we overflowed
.85c6	e8		        inx                 ; increment high byte
.85c7	4c 14 87	relend  jmp wraddr          ; print address
.85ca	a6 c4		ub64d   ldx tmp2+1          ; get high byte of current address
.85cc	a8		        tay                 ; is relative address positive or negative?
.85cd	10 01		        bpl relc2           ; if positive, leave high byte alone
.85cf	ca		        dex                 ; if negative, decrement high byte
.85d0	65 c3		relc2   adc tmp2            ; add relative address to low byte
.85d2	90 01		        bcc relc3           ; if there's no carry, we're done
.85d4	e8		        inx                 ; if there's a carry, increment the high byte
.85d5	60		relc3   rts
.85d6	a8		instxx  tay                 ; stash opcode in accumulator in y for later
.85d7	4a		        lsr a               ; is opcode even or odd?
.85d8	90 0b		        bcc ieven
.85da	4a		        lsr a
.85db	b0 17		        bcs err             ; invalid opcodes xxxxxx11
.85dd	c9 22		        cmp #$22
.85df	f0 13		        beq err             ; invalid opcode 10001001
.85e1	29 07		        and #$07            ; mask bits to 10000xxx
.85e3	09 80		        ora #$80
.85e5	4a		ieven   lsr a               ; lsb determines whether to use left/right nybble
.85e6	aa		        tax                 ; get format index using remaining high bytes
.85e7	bd 58 8a	        lda mode,x
.85ea	b0 04		        bcs rtmode          ; look at left or right nybble based on carry bit
.85ec	4a		        lsr a               ; if carry = 0, use left nybble
.85ed	4a		        lsr a
.85ee	4a		        lsr a
.85ef	4a		        lsr a
.85f0	29 0f		rtmode  and #$0f            ; if carry = 1, use right nybble
.85f2	d0 04		        bne getfmt
.85f4	a0 80		err     ldy #$80            ; substitute 10000000 for invalid opcodes
.85f6	a9 00		        lda #0
.85f8	aa		getfmt  tax
.85f9	bd 9c 8a	        lda mode2,x         ; lookup operand format using selected nybble
.85fc	8d 00 01	        sta acmd            ; save for later use
.85ff	29 03		        and #$03            ; lower 2 bits indicate number of bytes in operand
.8601	8d 01 01	        sta length
.8604	98		        tya                 ; restore original opcode
.8605	29 8f		        and #$8f            ; mask bits to x000xxxx
.8607	aa		        tax                 ; save it
.8608	98		        tya                 ; restore original opcode
.8609	a0 03		        ldy #3
.860b	e0 8a		        cpx #$8a            ; check if opcode = 1xxx1010
.860d	f0 0b		        beq gtfm4
.860f	4a		gtfm2   lsr a               ; transform opcode into index for mnemonic table
.8610	90 08		        bcc gtfm4
.8612	4a		        lsr a               ; opcodes transformed as follows:
.8613	4a		gtfm3   lsr a               ; 1xxx1010->00101xxx
.8614	09 20		        ora #$20            ; xxxyyy01->00111xxx
.8616	88		        dey                 ; xxxyyy10->00111xxx
.8617	d0 fa		        bne gtfm3           ; xxxyy100->00110xxx
.8619	c8		        iny                 ; xxxxx000->000xxxxx
.861a	88		gtfm4   dey
.861b	d0 f2		        bne gtfm2
.861d	60		        rts
.861e	a8		propxx  tay                 ; use index in accumulator to look up mnemonic
.861f	b9 b6 8a	        lda mneml,y         ;   and place a temporary copy in store
.8622	8d 2f 02	        sta store
.8625	b9 f6 8a	        lda mnemr,y
.8628	8d 30 02	        sta store+1
.862b	a9 00		prmn1   lda #0              ; clear accumulator
.862d	a0 05		        ldy #$05            ; shift 5 times
.862f	0e 30 02	prmn2   asl store+1         ; shift right byte
.8632	2e 2f 02	        rol store           ; rotate bits from right byte into left byte
.8635	2a		        rol a               ; rotate bits from left byte into accumulator
.8636	88		        dey                 ; next bit
.8637	d0 f6		        bne prmn2           ; loop until all bits shifted
.8639	69 3f		        adc #$3f            ; calculate ascii code for letter by adding to '?'
.863b	20 d2 ff	        jsr chrout          ; output letter
.863e	ca		        dex                 ; next letter
.863f	d0 ea		        bne prmn1           ; loop until all 3 letters are output
.8641	4c 1d 87	        jmp space           ; output space
.8644	ce 31 02	rdpar   dec chrpnt          ; back up one char
.8647	20 6f 86	getpar  jsr rdval           ; read the value
.864a	b0 17		        bcs gterr           ; carry set indicates error
.864c	20 63 87	        jsr gotchr          ; check previous character
.864f	d0 0a		        bne ckterm          ; if it's not null, check if it's a valid separator
.8651	ce 31 02	        dec chrpnt          ; back up one char
.8654	ad 08 01	        lda digcnt          ; get number of digits read
.8657	d0 11		        bne getgot          ; found some digits
.8659	f0 0d		        beq gtnil           ; didn't find any digits
.865b	c9 20		ckterm  cmp #$20            ; space or comma are valid separators
.865d	f0 0b		        beq getgot          ; anything else is an error
.865f	c9 2c		        cmp #","
.8661	f0 07		        beq getgot
.8663	68		gterr   pla                 ; encountered error
.8664	68		        pla                 ; get rid of command vector pushed on stack
.8665	4c d8 80	        jmp error           ; handle error
.8668	38		gtnil   sec                 ; set carry to indicate no parameter found
>8669	24		        .byte $24           ; bit zp opcode consumes next byte (clc)
.866a	18		getgot  clc                 ; clear carry to indicate paremeter returned
.866b	ad 08 01	        lda digcnt          ; return number of digits in a
.866e	60		        rts                 ; return to address pushed from vector table
.866f	a9 00		rdval   lda #0              ; clear temp
.8671	85 c1		        sta tmp0
.8673	85 c2		        sta tmp0+1
.8675	8d 08 01	        sta digcnt          ; clear digit counter
.8678	8a		        txa                 ; save x and y
.8679	48		        pha
.867a	98		        tya
.867b	48		        pha
.867c	20 66 87	rdvmor  jsr getchr          ; get next character from input buffer
.867f	f0 1e		        beq rdnilk          ; null at end of buffer
.8681	c9 20		        cmp #$20            ; skip spaces
.8683	f0 f7		        beq rdvmor
.8685	a2 03		        ldx #3              ; check numeric base [$+&%]
.8687	dd 4a 8b	gnmode  cmp hikey,x
.868a	f0 07		        beq gotmod          ; got a match, set up base
.868c	ca		        dex
.868d	10 f8		        bpl gnmode          ; check next base
.868f	e8		        inx                 ; default to hex
.8690	ce 31 02	        dec chrpnt          ; back up one character
.8693	bc 71 8b	gotmod  ldy modtab,x        ; get base value
.8696	bd 75 8b	        lda lentab,x        ; get bits per digit
.8699	8d 0a 01	        sta numbit          ; store bits per digit
.869c	20 66 87	nudig   jsr getchr          ; get next char in a
.869f	f0 63		rdnilk  beq rdnil           ; end of number if no more characters
.86a1	38		        sec
.86a2	e9 30		        sbc #$30            ; subtract ascii value of 0 to get numeric value
.86a4	90 5e		        bcc rdnil           ; end of number if character was less than 0
.86a6	c9 0a		        cmp #$0a
.86a8	90 06		        bcc digmor          ; not a hex digit if less than a
.86aa	e9 07		        sbc #$07            ; 7 chars between ascii 9 and a, so subtract 7
.86ac	c9 10		        cmp #$10            ; end of number if char is greater than f
.86ae	b0 54		        bcs rdnil
.86b0	8d 09 01	digmor  sta indig           ; store the digit
.86b3	cc 09 01	        cpy indig           ; compare base with the digit
.86b6	90 4a		        bcc rderr           ; error if the digit >= the base
.86b8	f0 48		        beq rderr
.86ba	ee 08 01	        inc digcnt          ; increment the number of digits
.86bd	c0 0a		        cpy #10
.86bf	d0 0a		        bne nodecm          ; skip the next part if not using base 10
.86c1	a2 01		        ldx #1
.86c3	b5 c1		declp1  lda tmp0,x          ; stash the previous 16-bit value for later use
.86c5	9d 0b 01	        sta stash,x
.86c8	ca		        dex
.86c9	10 f8		        bpl declp1
.86cb	ae 0a 01	nodecm  ldx numbit          ; number of bits to shift
.86ce	06 c1		times2  asl tmp0            ; shift 16-bit value by specified number of bits
.86d0	26 c2		        rol tmp0+1
.86d2	b0 2e		        bcs rderr           ; error if we overflowed 16 bits
.86d4	ca		        dex
.86d5	d0 f7		        bne times2          ; shift remaining bits
.86d7	c0 0a		        cpy #10
.86d9	d0 18		        bne nodec2          ; skip the next part if not using base 10
.86db	0e 0b 01	        asl stash           ; shift the previous 16-bit value one bit left
.86de	2e 0c 01	        rol stash+1
.86e1	b0 1f		        bcs rderr           ; error if we overflowed 16 bits
.86e3	ad 0b 01	        lda stash           ; add shifted previous value to current value
.86e6	65 c1		        adc tmp0
.86e8	85 c1		        sta tmp0
.86ea	ad 0c 01	        lda stash+1
.86ed	65 c2		        adc tmp0+1
.86ef	85 c2		        sta tmp0+1
.86f1	b0 0f		        bcs rderr           ; error if we overflowed 16 bits
.86f3	18		nodec2  clc
.86f4	ad 09 01	        lda indig           ; load current digit
.86f7	65 c1		        adc tmp0            ; add current digit to low byte
.86f9	85 c1		        sta tmp0            ; and store result back in low byte
.86fb	8a		        txa                 ; a=0
.86fc	65 c2		        adc tmp0+1          ; add carry to high byte
.86fe	85 c2		        sta tmp0+1          ; and store result back in high byte
.8700	90 9a		        bcc nudig           ; get next digit if we didn't overflow
.8702	38		rderr   sec                 ; set carry to indicate error
>8703	24		        .byte $24           ; bit zp opcode consumes next byte (clc)
.8704	18		rdnil   clc                 ; clear carry to indicate success
.8705	8c 0a 01	        sty numbit          ; save base of number
.8708	68		        pla                 ; restore x and y
.8709	a8		        tay
.870a	68		        pla
.870b	aa		        tax
.870c	ad 08 01	        lda digcnt          ; return number of digits in a
.870f	60		        rts
.8710	a5 c3		showad  lda tmp2
.8712	a6 c4		        ldx tmp2+1
.8714	48		wraddr  pha                 ; save low byte
.8715	8a		        txa                 ; put high byte in a
.8716	20 3e 87	        jsr wrtwo           ; output high byte
.8719	68		        pla                 ; restore low byte
.871a	20 3e 87	wrbyte  jsr wrtwo           ; output byte in a
.871d	a9 20		space   lda #$20            ; output space
.871f	d0 0f		        bne flip
.8721	c9 0d		chout   cmp #$0d            ; output char with special handling of cr
.8723	d0 0b		        bne flip
.8725	a9 0d		crlf    lda #$0d            ; load cr in a
.8727	24 13		        bit $13             ; check default channel
.8729	10 05		        bpl flip            ; if high bit is clear output cr only
.872b	20 d2 ff	        jsr chrout          ; otherwise output cr+lf
.872e	a9 0a		        lda #$0a            ; output lf
.8730	4c d2 ff	flip    jmp chrout
.8733	20 25 87	fresh   jsr crlf            ; output cr
.8736	a9 20		        lda #$20            ; load space in a
.8738	20 d2 ff	        jsr chrout
.873b	4c bc 89	        jmp snclr
.873e	8e 05 01	wrtwo   stx savx            ; save x
.8741	20 4e 87	        jsr asctwo          ; get hex chars for byte in x (lower) and a (upper)
.8744	20 d2 ff	        jsr chrout          ; output upper nybble
.8747	8a		        txa                 ; transfer lower to a
.8748	ae 05 01	        ldx savx            ; restore x
.874b	4c d2 ff	        jmp chrout          ; output lower nybble
.874e	48		asctwo  pha                 ; save byte
.874f	20 58 87	        jsr ascii           ; do low nybble
.8752	aa		        tax                 ; save in x
.8753	68		        pla                 ; restore byte
.8754	4a		        lsr a               ; shift upper nybble down
.8755	4a		        lsr a
.8756	4a		        lsr a
.8757	4a		        lsr a
.8758	29 0f		ascii   and #$0f            ; clear upper nibble
.875a	c9 0a		        cmp #$0a            ; if less than a, skip next step
.875c	90 02		        bcc asc1
.875e	69 06		        adc #6              ; skip ascii chars between 9 and a
.8760	69 30		asc1    adc #$30            ; add ascii char 0 to value
.8762	60		        rts
.8763	ce 31 02	gotchr  dec chrpnt
.8766	8e 05 01	getchr  stx savx
.8769	ae 31 02	        ldx chrpnt          ; get pointer to next char
.876c	bd 00 02	        lda inbuff,x        ; load next char in a
.876f	f0 06		        beq nochar          ; null, :, or ? signal end of buffer
.8771	c9 3a		        cmp #":"
.8773	f0 02		        beq nochar
.8775	c9 3f		        cmp #"?"
.8777	08		nochar  php
.8778	ee 31 02	        inc chrpnt          ; next char
.877b	ae 05 01	        ldx savx
.877e	28		        plp                 ; z flag will signal last character
.877f	60		        rts
.8780	a5 c1		copy12  lda tmp0            ; low byte
.8782	85 c3		        sta tmp2
.8784	a5 c2		        lda tmp0+1          ; high byte
.8786	85 c4		        sta tmp2+1
.8788	60		        rts
.8789	38		sub12   sec
.878a	a5 c1		        lda tmp0            ; subtract low byte
.878c	e5 c3		        sbc tmp2
.878e	85 c1		        sta tmp0
.8790	a5 c2		        lda tmp0+1
.8792	e5 c4		        sbc tmp2+1          ; subtract high byte
.8794	85 c2		        sta tmp0+1
.8796	60		        rts
.8797	a9 01		suba1   lda #1              ; shortcut to decrement by 1
.8799	8d 05 01	suba2   sta savx            ; subtrahend in accumulator
.879c	38		        sec
.879d	a5 c1		        lda tmp0            ; minuend in low byte
.879f	ed 05 01	        sbc savx
.87a2	85 c1		        sta tmp0
.87a4	a5 c2		        lda tmp0+1          ; borrow from high byte
.87a6	e9 00		        sbc #0
.87a8	85 c2		        sta tmp0+1
.87aa	60		        rts
.87ab	38		sub13   sec
.87ac	ad 2f 02	        lda store
.87af	e9 01		        sbc #1              ; decrement low byte
.87b1	8d 2f 02	        sta store
.87b4	ad 30 02	        lda store+1
.87b7	e9 00		        sbc #0              ; borrow from high byte
.87b9	8d 30 02	        sta store+1
.87bc	60		        rts
.87bd	a9 01		adda2   lda #1              ; shortcut to increment by 1
.87bf	18		bumpad2 clc
.87c0	65 c3		        adc tmp2            ; add value in accumulator to low byte
.87c2	85 c3		        sta tmp2
.87c4	90 02		        bcc bumpex
.87c6	e6 c4		        inc tmp2+1          ; carry to high byte
.87c8	60		bumpex  rts
.87c9	38		sub21   sec
.87ca	a5 c3		        lda tmp2            ; decrement low byte
.87cc	e9 01		        sbc #1
.87ce	85 c3		        sta tmp2
.87d0	a5 c4		        lda tmp2+1          ; borrow from high byte
.87d2	e9 00		        sbc #0
.87d4	85 c4		        sta tmp2+1
.87d6	60		        rts
.87d7	b0 0a		copy1p  bcs cpy1px          ; do nothing if parameter is empty
.87d9	a5 c1		        lda tmp0            ; copy low byte
.87db	a4 c2		        ldy tmp0+1          ; copy high byte
.87dd	8d 29 02	        sta pcl
.87e0	8c 28 02	        sty pch
.87e3	60		cpy1px  rts
.87e4	b0 23		getdif  bcs gdifx           ; exit with error if no parameter given
.87e6	20 80 87	        jsr copy12          ; save start address in tmp2
.87e9	20 47 86	        jsr getpar          ; get end address in tmp0
.87ec	b0 1b		        bcs gdifx           ; exit with error if no parameter given
.87ee	a5 c1		        lda tmp0            ; save end address in stash
.87f0	8d 0b 01	        sta stash
.87f3	a5 c2		        lda tmp0+1
.87f5	8d 0c 01	        sta stash+1
.87f8	20 89 87	        jsr sub12           ; subtract start address from end address
.87fb	a5 c1		        lda tmp0
.87fd	8d 2f 02	        sta store           ; save difference in store
.8800	a5 c2		        lda tmp0+1
.8802	8d 30 02	        sta store+1
.8805	90 02		        bcc gdifx           ; error if start address is after end address
.8807	18		        clc                 ; clear carry to indicate success
>8808	24		        .byte $24           ; bit zp opcode consumes next byte (sec)
.8809	38		gdifx   sec                 ; set carry to indicate error
.880a	60		        rts
.880b	20 44 86	convrt  jsr rdpar           ; read a parameter
.880e	20 33 87	        jsr fresh           ; next line and clear
.8811	a9 24		        lda #"$"            ; output $ sigil for hex
.8813	20 d2 ff	        jsr chrout
.8816	a5 c1		        lda tmp0            ; load the 16-bit value entered
.8818	a6 c2		        ldx tmp0+1
.881a	20 14 87	        jsr wraddr          ; print it in 4 hex digits
.881d	20 33 87	        jsr fresh
.8820	a9 2b		        lda #"+"            ; output + sigil for decimal
.8822	20 d2 ff	        jsr chrout
.8825	20 56 88	        jsr cvtdec          ; convert to bcd using hardware mode
.8828	a9 00		        lda #0              ; clear digit counter
.882a	a2 06		        ldx #6              ; max digits + 1
.882c	a0 03		        ldy #3              ; bits per digit - 1
.882e	20 90 88	        jsr nmprnt          ; print result without leading zeros
.8831	20 33 87	        jsr fresh           ; next line and clear
.8834	a9 26		        lda #"&"            ; print & sigil for octal
.8836	20 d2 ff	        jsr chrout
.8839	a9 00		        lda #0              ; clear digit counter
.883b	a2 08		        ldx #8              ; max digits + 1
.883d	a0 02		        ldy #2              ; bits per digit - 1
.883f	20 7f 88	        jsr prinum          ; output number
.8842	20 33 87	        jsr fresh           ; next line and clear
.8845	a9 25		        lda #"%"            ; print % sigil for binary
.8847	20 d2 ff	        jsr chrout
.884a	a9 00		        lda #0              ; clear digit counter
.884c	a2 18		        ldx #$18            ; max digits + 1
.884e	a0 00		        ldy #0              ; bits per digit - 1
.8850	20 7f 88	        jsr prinum          ; output number
.8853	4c a9 80	        jmp strt            ; back to mainloop
.8856	20 80 87	cvtdec  jsr copy12          ; copy value from tmp0 to tmp2
.8859	a9 00		        lda #0
.885b	a2 02		        ldx #2              ; clear 3 bytes in work buffer
.885d	9d 0d 01	decml1  sta u0aa0,x
.8860	ca		        dex
.8861	10 fa		        bpl decml1
.8863	a0 10		        ldy #16             ; 16 bits in input
.8865	08		        php                 ; save status register
.8866	78		        sei                 ; make sure no interrupts occur with bcd enabled
.8867	f8		        sed
.8868	06 c3		decml2  asl tmp2            ; rotate bytes out of input low byte
.886a	26 c4		        rol tmp2+1          ; .. into high byte and carry bit
.886c	a2 02		        ldx #2              ; process 3 bytes
.886e	bd 0d 01	decdbl  lda u0aa0,x         ; load current value of byte
.8871	7d 0d 01	        adc u0aa0,x         ; add it to itself plus the carry bit
.8874	9d 0d 01	        sta u0aa0,x         ; store it back in the same location
.8877	ca		        dex                 ; decrement byte counter
.8878	10 f4		        bpl decdbl          ; loop until all bytes processed
.887a	88		        dey                 ; decrement bit counter
.887b	d0 eb		        bne decml2          ; loop until all bits processed
.887d	28		        plp                 ; restore processor status
.887e	60		        rts
.887f	48		prinum  pha                 ; save accumulator
.8880	a5 c1		        lda tmp0            ; copy input low byte to work buffer
.8882	8d 0f 01	        sta u0aa0+2
.8885	a5 c2		        lda tmp0+1          ; copy input high byte to work buffer
.8887	8d 0e 01	        sta u0aa0+1
.888a	a9 00		        lda #0              ; clear overflow byte in work buffer
.888c	8d 0d 01	        sta u0aa0
.888f	68		        pla                 ; restore accumulator
.8890	8d 08 01	nmprnt  sta digcnt          ; number of digits in accumulator
.8893	8c 0a 01	        sty numbit          ; bits per digit passed in y register
.8896	ac 0a 01	digout  ldy numbit          ; get bits to process
.8899	a9 00		        lda #0              ; clear accumulator
.889b	0e 0f 01	rolbit  asl u0aa0+2         ; shift bits out of low byte
.889e	2e 0e 01	        rol u0aa0+1         ; ... into high byte
.88a1	2e 0d 01	        rol u0aa0           ; ... into overflow byte
.88a4	2a		        rol a               ; ... into accumulator
.88a5	88		        dey                 ; decrement bit counter
.88a6	10 f3		        bpl rolbit          ; loop until all bits processed
.88a8	a8		        tay                 ; check whether accumulator is 0
.88a9	d0 09		        bne nzero           ; if not, print it
.88ab	e0 01		        cpx #1              ; have we output the max number of digits?
.88ad	f0 05		        beq nzero           ; if not, print it
.88af	ac 08 01	        ldy digcnt          ; how many digits have we output?
.88b2	f0 08		        beq zersup          ; skip output if digit is 0
.88b4	ee 08 01	nzero   inc digcnt          ; increment digit counter
.88b7	09 30		        ora #$30            ; add numeric value to ascii '0' to get ascii char
.88b9	20 d2 ff	        jsr chrout          ; output character
.88bc	ca		zersup  dex                 ; decrement number of leading zeros
.88bd	d0 d7		        bne digout          ; next digit
.88bf	60		        rts
.88c0	d0 03		dstat   bne chgdev          ; if device address was given, use it
.88c2	a2 08		        ldx #8              ; otherwise, default to 8
>88c4	2c		        .byte $2c           ; absolute bit opcode consumes next word (ldx tmp0)
.88c5	a6 c1		chgdev  ldx tmp0            ; load device address from parameter
.88c7	e0 04		        cpx #4              ; make sure device address is in range 4-31
.88c9	90 58		        bcc ioerr
.88cb	e0 20		        cpx #32
.88cd	b0 54		        bcs ioerr
.88cf	86 c1		        stx tmp0
.88d1	a9 00		        lda #0              ; clear status
.88d3	85 90		        sta satus
.88d5	85 b7		        sta fnlen           ; empty filename
.88d7	20 66 87	        jsr getchr          ; get next character
.88da	f0 24		        beq instat1         ; null, display status
.88dc	ce 31 02	        dec chrpnt          ; back up 1 char
.88df	c9 24		        cmp #"$"            ; $, display directory
.88e1	f0 43		        beq direct
.88e3	a5 c1		        lda tmp0            ; command specified device to listen
.88e5	20 b1 ff	        jsr listen
.88e8	a9 6f		        lda #$6f            ; secondary address 15 (only low nybble used)
.88ea	20 93 ff	        jsr second
.88ed	ae 31 02	dcomd   ldx chrpnt          ; get next character from buffer
.88f0	ee 31 02	        inc chrpnt
.88f3	bd 00 02	        lda inbuff,x
.88f6	f0 05		        beq instat          ; break out of loop if it's null
.88f8	20 a8 ff	        jsr ciout           ; otherwise output it to the serial bus
.88fb	90 f0		        bcc dcomd           ; unconditional loop: ciout clears carry before rts
.88fd	20 ae ff	instat  jsr unlsn           ; command device to unlisten
.8900	20 25 87	instat1 jsr crlf            ; new line
.8903	a5 c1		        lda tmp0            ; load device address
.8905	20 b4 ff	        jsr talk            ; command device to talk
.8908	a9 6f		        lda #$6f            ; secondary address 15 (only low nybble used)
.890a	20 96 ff	        jsr tksa
.890d	20 a5 ff	rdstat  jsr acptr           ; read byte from serial bus
.8910	20 d2 ff	        jsr chrout          ; print it
.8913	c9 0d		        cmp #$0d            ; if the byte is cr, exit loop
.8915	f0 06		        beq dexit
.8917	a5 90		        lda satus           ; check status
.8919	29 bf		        and #$bf            ; ignore eoi bit
.891b	f0 f0		        beq rdstat          ; if no errors, read next byte
.891d	20 ab ff	dexit   jsr untlk           ; command device to stop talking
.8920	4c a9 80	        jmp strt            ; back to mainloop
.8923	4c d8 80	ioerr   jmp error           ; handle error
.8926	a5 c1		direct  lda tmp0            ; load device address
.8928	20 b1 ff	        jsr listen          ; command device to listen
.892b	a9 f0		        lda #$f0            ; secondary address 0 (only low nybble used)
.892d	20 93 ff	        jsr second
.8930	ae 31 02	        ldx chrpnt          ; get index of next character
.8933	bd 00 02	dir2    lda inbuff,x        ; get next character from buffer
.8936	f0 06		        beq dir3            ; break if it's null
.8938	20 a8 ff	        jsr ciout           ; send character to device
.893b	e8		        inx                 ; increment characer index
.893c	d0 f5		        bne dir2            ; loop if it hasn't wrapped to zero
.893e	20 ae ff	dir3    jsr unlsn           ; command device to unlisten
.8941	20 25 87	        jsr crlf            ; new line
.8944	a5 c1		        lda tmp0            ; load device address
.8946	48		        pha                 ; save on stack
.8947	20 b4 ff	        jsr talk            ; command device to talk
.894a	a9 60		        lda #$60            ; secondary address 0 (only low nybble used)
.894c	20 96 ff	        jsr tksa
.894f	a0 03		        ldy #3              ; read 3 16-bit values from device
.8951	8c 2f 02	dirlin  sty store           ;   ignore the first 2; 3rd is file size
.8954	20 a5 ff	dlink   jsr acptr           ; read low byte from device
.8957	85 c1		        sta tmp0            ; store it
.8959	a5 90		        lda satus           ; check status
.895b	d0 44		        bne drexit          ; exit if error or eof occurred
.895d	20 a5 ff	        jsr acptr           ; read high byte from device
.8960	85 c2		        sta tmp0+1          ; store it
.8962	a5 90		        lda satus           ; check status
.8964	d0 3b		        bne drexit          ; exit if error or eof cocurred
.8966	ce 2f 02	        dec store           ; decrement byte count
.8969	d0 e9		        bne dlink           ; loop if bytes remain
.896b	20 56 88	        jsr cvtdec          ; convert last 16-bit value to decimal
.896e	a9 00		        lda #0              ; clear digit count
.8970	a2 06		        ldx #6              ; max 6 digits
.8972	a0 03		        ldy #3              ; 3 bits per digit
.8974	20 90 88	        jsr nmprnt          ; output number
.8977	a9 20		        lda #" "            ; output space
.8979	20 d2 ff	        jsr chrout
.897c	20 a5 ff	dname   jsr acptr           ; get a filename character from the device
.897f	f0 0a		        beq dmore           ; if it's null, break out of loop
.8981	a6 90		        ldx satus           ; check for errors or eof
.8983	d0 1c		        bne drexit          ; if found exit early
.8985	20 d2 ff	        jsr chrout          ; output character
.8988	18		        clc
.8989	90 f1		        bcc dname           ; unconditional branch to read next char
.898b	20 25 87	dmore   jsr crlf
.898e	20 e1 ff	        jsr stop            ; check for stop key
.8991	f0 0e		        beq drexit          ; exit early if pressed
.8993	20 e4 ff	        jsr getin           ; pause if a key was pressed
.8996	f0 05		        beq nopaws
.8998	20 e4 ff	paws    jsr getin           ; wait until another key is pressed
.899b	f0 fb		        beq paws
.899d	a0 02		nopaws  ldy #2
.899f	d0 b0		        bne dirlin          ; unconditional branch to read next file
.89a1	20 ab ff	drexit  jsr untlk           ; command device to untalk
.89a4	68		        pla                 ; restore accumulator
.89a5	20 b1 ff	        jsr listen          ; command device to listen
.89a8	a9 e0		        lda #$e0            ; secondary address 0 (only low nybble is used)
.89aa	20 93 ff	        jsr second
.89ad	20 ae ff	        jsr unlsn           ; command device to unlisten
.89b0	4c a9 80	        jmp strt            ; back to mainloop
.89b3	20 25 87	cline   jsr crlf            ; send cr+lf
.89b6	4c bc 89	        jmp snclr           ; clear line
.89b9	20 cc 89	sndclr  jsr sndmsg
.89bc	a0 28		snclr   ldy #$28            ; loop 40 times
.89be	a9 20		snclp   lda #$20            ; output space character
.89c0	20 d2 ff	        jsr chrout
.89c3	a9 14		        lda #$14            ; output delete character
.89c5	20 d2 ff	        jsr chrout
.89c8	88		        dey
.89c9	d0 f3		        bne snclp
.89cb	60		        rts
.89cc	b9 da 89	sndmsg  lda msgbas,y        ; y contains offset in msg table
.89cf	08		        php
.89d0	29 7f		        and #$7f            ; strip high bit before output
.89d2	20 21 87	        jsr chout
.89d5	c8		        iny
.89d6	28		        plp
.89d7	10 f3		        bpl sndmsg          ; loop until high bit is set
.89d9	60		        rts
=$89da			msgbas  =*
>89da	0d		msg2    .byte $0d               ; header for registers
>89db	20 20 20 50	        .text "   pc  sr ac xr yr sp   v1.2"
>89df	43 20 20 53 52 20 41 43 20 58 52 20 59 52 20 53
>89ef	50 20 20 20 56 31 2e 32
>89f7	8d		        .byte $0d+$80
>89f8	1d bf		msg3    .byte $1d,$3f+$80       ; syntax error: move right, display "?"
>89fa	2e 2e 53 59	msg4    .text "..sys"           ; sys call to enter monitor
>89fe	53
>89ff	a0		        .byte $20+$80
>8a00	3a 92		msg5    .byte $3a,$12+$80       ; ":" then rvs on for memory ascii dump
>8a02	20 45 52 52	msg6    .text " erro"           ; i/o error: display " error"
>8a06	4f
>8a07	d2		        .byte "r"+$80
>8a08	41 a0		msg7    .byte $41,$20+$80       ; assemble next instruction: "a " + addr
>8a0a	20 20		msg8    .text "  "              ; pad non-existent byte: skip 3 spaces
>8a0c	a0		        .byte $20+$80
>8a0d	20 20 20 20	msg9    .text "      < < < < < supermon > > > > >"
>8a11	20 20 3c 20 3c 20 3c 20 3c 20 3c 20 53 55 50 45
>8a21	52 4d 4f 4e 20 3e 20 3e 20 3e 20 3e 20 3e
>8a2f	8d		        .byte $0d+$80
>8a30	20 42 59 20	msga    .text " by jim butterfield  (r.i.p. 1936-2007)"
>8a34	4a 49 4d 20 42 55 54 54 45 52 46 49 45 4c 44 20
>8a44	20 28 52 2e 49 2e 50 2e 20 31 39 33 36 2d 32 30
>8a54	30 37 29
>8a57	8d		        .byte $0d+$80
>8a58	40 02 45 03	mode    .byte $40,$02,$45,$03   ; even opcodes
>8a5c	d0 08 40 09	        .byte $d0,$08,$40,$09
>8a60	30 22 45 33	        .byte $30,$22,$45,$33
>8a64	d0 08 40 09	        .byte $d0,$08,$40,$09
>8a68	40 02 45 33	        .byte $40,$02,$45,$33
>8a6c	d0 08 40 09	        .byte $d0,$08,$40,$09
>8a70	40 02 45 b3	        .byte $40,$02,$45,$b3
>8a74	d0 08 40 09	        .byte $d0,$08,$40,$09
>8a78	00 22 44 33	        .byte $00,$22,$44,$33
>8a7c	d0 8c 44 00	        .byte $d0,$8c,$44,$00
>8a80	11 22 44 33	        .byte $11,$22,$44,$33
>8a84	d0 8c 44 9a	        .byte $d0,$8c,$44,$9a
>8a88	10 22 44 33	        .byte $10,$22,$44,$33
>8a8c	d0 08 40 09	        .byte $d0,$08,$40,$09
>8a90	10 22 44 33	        .byte $10,$22,$44,$33
>8a94	d0 08 40 09	        .byte $d0,$08,$40,$09
>8a98	62 13 78 a9	        .byte $62,$13,$78,$a9   ; opcodes ending in 01
>8a9c	00		mode2   .byte $00   ; 000 000    00                  0   error
>8a9d	21		        .byte $21   ; 001 000    01      #$00        1   immediate
>8a9e	81		        .byte $81   ; 100 000    01      $00         2   zero-page
>8a9f	82		        .byte $82   ; 100 000    10      $0000       3   absolute
>8aa0	00		        .byte $00   ; 000 000    00                  4   implied
>8aa1	00		        .byte $00   ; 000 000    00                  5   accumulator
>8aa2	59		        .byte $59   ; 010 110    01      ($00,x)     6   indirect,x
>8aa3	4d		        .byte $4d   ; 010 011    01      ($00),y     7   indirect,y
>8aa4	91		        .byte $91   ; 100 100    01      $00,x       8   zero-page,x
>8aa5	92		        .byte $92   ; 100 100    10      $0000,x     9   absolute,x
>8aa6	86		        .byte $86   ; 100 001    10      $0000,y     a   absolute,y
>8aa7	4a		        .byte $4a   ; 010 010    10      ($0000)     b   indirect
>8aa8	85		        .byte $85   ; 100 001    01      $00,y       c   zero-page,y
>8aa9	9d		        .byte $9d   ; 100 111    01      $0000*      d   relative
>8aaa	2c 29 2c	char1   .byte $2c,$29,$2c       ; ","  ")"  ","
>8aad	23 28 24	        .byte $23,$28,$24       ; "#"  "("  "$"
>8ab0	59 00 58	char2   .byte $59,$00,$58       ; "y"   0   "x"
>8ab3	24 24 00	        .byte $24,$24,$00       ; "$"  "$"   0
>8ab6	1c 8a 1c 23	mneml   .byte $1c,$8a,$1c,$23   ; brk php bpl clc
>8aba	5d 8b 1b a1	        .byte $5d,$8b,$1b,$a1   ; jsr plp bmi sec
>8abe	9d 8a 1d 23	        .byte $9d,$8a,$1d,$23   ; rti pha bvc cli
>8ac2	9d 8b 1d a1	        .byte $9d,$8b,$1d,$a1   ; rts pla bvs sei
>8ac6	00 29 19 ae	        .byte $00,$29,$19,$ae   ; ??? dey bcc tya
>8aca	69 a8 19 23	        .byte $69,$a8,$19,$23   ; ldy tay bcs clv
>8ace	24 53 1b 23	        .byte $24,$53,$1b,$23   ; cpy iny bne cld
>8ad2	24 53 19 a1	        .byte $24,$53,$19,$a1   ; cpx inx beq sed
>8ad6	00 1a 5b 5b	        .byte $00,$1a,$5b,$5b   ; ??? bit jmp jmp
>8ada	a5 69 24 24	        .byte $a5,$69,$24,$24   ; sty ldy cpy cpx
>8ade	ae ae a8 ad	        .byte $ae,$ae,$a8,$ad   ; txa txs tax tsx
>8ae2	29 00 7c 00	        .byte $29,$00,$7c,$00   ; dex ??? nop ???
>8ae6	15 9c 6d 9c	        .byte $15,$9c,$6d,$9c   ; asl rol lsr ror
>8aea	a5 69 29 53	        .byte $a5,$69,$29,$53   ; stx ldx dec inc
>8aee	84 13 34 11	        .byte $84,$13,$34,$11   ; ora and eor adc
>8af2	a5 69 23 a0	        .byte $a5,$69,$23,$a0   ; sta lda cmp sbc
>8af6	d8 62 5a 48	mnemr   .byte $d8,$62,$5a,$48   ; brk php bpl clc
>8afa	26 62 94 88	        .byte $26,$62,$94,$88   ; jsr plp bmi sec
>8afe	54 44 c8 54	        .byte $54,$44,$c8,$54   ; rti pha bvc cli
>8b02	68 44 e8 94	        .byte $68,$44,$e8,$94   ; rts pla bvs sei
>8b06	00 b4 08 84	        .byte $00,$b4,$08,$84   ; ??? dey bcc tya
>8b0a	74 b4 28 6e	        .byte $74,$b4,$28,$6e   ; ldy tay bcs clv
>8b0e	74 f4 cc 4a	        .byte $74,$f4,$cc,$4a   ; cpy iny bne cld
>8b12	72 f2 a4 8a	        .byte $72,$f2,$a4,$8a   ; cpx inx beq sed
>8b16	00 aa a2 a2	        .byte $00,$aa,$a2,$a2   ; ??? bit jmp jmp
>8b1a	74 74 74 72	        .byte $74,$74,$74,$72   ; sty ldy cpy cpx
>8b1e	44 68 b2 32	        .byte $44,$68,$b2,$32   ; txa txs tax tsx
>8b22	b2 00 22 00	        .byte $b2,$00,$22,$00   ; dex ??? nop ???
>8b26	1a 1a 26 26	        .byte $1a,$1a,$26,$26   ; asl rol lsr ror
>8b2a	72 72 88 c8	        .byte $72,$72,$88,$c8   ; stx ldx dec inc
>8b2e	c4 ca 26 48	        .byte $c4,$ca,$26,$48   ; ora and eor adc
>8b32	44 44 a2 c8	        .byte $44,$44,$a2,$c8   ; sta lda cmp sbc
>8b36	0d 20 20 20	        .byte $0d,$20,$20,$20
>8b3a	41 43 44 46	keyw    .text "acdfghjmrtx@.>;i"
>8b3e	47 48 4a 4d 52 54 58 40 2e 3e 3b 49
>8b4a	24 2b 26 25	hikey   .text "$+&%lsv"
>8b4e	4c 53 56
=$8b51			keytop  =*
>8b51	8b 83 e3 81	kaddr   .word assem-1,compar-1,disass-1,fill-1
>8b55	18 85 66 83
>8b59	6e 81 67 82	        .word goto-1,hunt-1,jsub-1,dsplym-1
>8b5d	8c 81 01 81
>8b61	86 80 e6 81	        .word dsplyr-1,trans-1,exit-1,dstat-1
>8b65	fe 80 bf 88
>8b69	8b 83 4e 81	        .word assem-1,altm-1,altr-1,super-1
>8b6d	37 81 19 80
>8b71	10 0a 08 02	modtab  .byte $10,$0a,$08,02    ; modulo number systems
>8b75	04 03 03 01	lentab  .byte $04,$03,$03,$01   ; bits per digit
>8b79	78 80		linkad  .word break             ; address of brk handler
>8b7b	1a 80		supad   .word super             ; address of entry point
>9fff	00		     .byte 0

;******  End of listing

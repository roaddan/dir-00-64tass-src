
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L jbmon64.txt -o jbmon64.prg jbmon64.asm
; Thu May 25 22:08:13 2023

;Offset	;Hex		;Source

;******  Processing input file: jbmon64.asm

=$c1			tmp0    = $c1               ; used to return input, often holds end address
=$c3			tmp2    = $c3               ; usually holds start address
=$90			satus   = $90               ; kernal i/o status word
=$b7			fnlen   = $b7               ; length of current filename
=$b9			sadd    = $b9               ; current secondary address (official name sa)
=$ba			fa      = $ba               ; current device number
=$bb			fnadr   = $bb               ; pointer to current filename
=$c6			ndx     = $c6               ; number of characters in keyboard buffer
=$0277			keyd    = $0277             ; keyboard buffer
=$0316			bkvec   = $0316             ; brk instruction vector (official name cbinv)
>0100			acmd    .fill 1             ; addressing command
>0101			length  .fill 1             ; length of operand
>0102			mnemw   .fill 3             ; 3 letter mnemonic buffer
>0105			savx    .fill 1             ; 1 byte temp storage, often to save x register
>0106			opcode  .fill 1             ; current opcode for assembler/disassembler
>0107			upflg   .fill 1             ; flag: count up (bit 7 clear) or down (bit 7 set)
>0108			digcnt  .fill 1             ; digit count
>0109			indig   .fill 1             ; numeric value of single digit
>010a			numbit  .fill 1             ; numeric base of input
>010b			stash   .fill 2             ; 2-byte temp storage
>010d			u0aa0   .fill 10            ; work buffer
=$0117			u0aae   =*                  ; end of work buffer
>0117			stage   .fill 30            ; staging buffer for filename, search, etc.
=$0135			estage  =*                  ; end of staging buffer
>0200			inbuff  .fill 40            ; 40-character input buffer
=$0228			endin   =*                  ; end of input buffer
>0228			pch     .fill 1             ; program counter high byte
>0229			pcl     .fill 1             ; program counter low byte
>022a			sr      .fill 1             ; status register
>022b			acc     .fill 1             ; accumulator
>022c			xr      .fill 1             ; x register
>022d			yr      .fill 1             ; y register
>022e			sp      .fill 1             ; stack pointer
>022f			store   .fill 2             ; 2-byte temp storage
>0231			chrpnt  .fill 1             ; current position in input buffer
>0232			savy    .fill 1             ; temp storage, often to save y register
>0233			u9f     .fill 1             ; index into assembler work buffer
=$ff90			setmsg  = $ff90             ; set kernel message control flag
=$ff93			second  = $ff93             ; set secondary address after listen
=$ff96			tksa    = $ff96             ; send secondary address after talk
=$ffb1			listen  = $ffb1             ; command serial bus device to listen
=$ffb4			talk    = $ffb4             ; command serial bus device to talk
=$ffba			setlfs  = $ffba             ; set logical file parameters
=$ffbd			setnam  = $ffbd             ; set filename
=$ffa5			acptr   = $ffa5             ; input byte from serial bus
=$ffa8			ciout   = $ffa8             ; output byte to serial bus
=$ffab			untlk   = $ffab             ; command serial bus device to untalk
=$ffae			unlsn   = $ffae             ; command serial bus device to unlisten
=$ffc6			chkin   = $ffc6             ; define input channel
=$ffcc			clrchn  = $ffcc             ; restore default devices
=$ffcf			input   = $ffcf             ; input a character (official name chrin)
=$ffd2			chrout  = $ffd2             ; output a character
=$ffd5			load    = $ffd5             ; load from device
=$ffd8			save    = $ffd8             ; save to device
=$ffe1			stop    = $ffe1             ; check the stop key
=$ffe4			getin   = $ffe4             ; get a character
=36000			org     = 36000;$9519
.8ca0	20 e0 8c	super   jsr setcolors
.8ca3	a0 33		        ldy #msg9-msgbas    ; display "..sys "
.8ca5	20 52 96	        jsr sndmsg
.8ca8	a0 56		        ldy #msga-msgbas    ; display "..sys "
.8caa	20 52 96	        jsr sndmsg
.8cad	20 ab 93	        jsr crlf
.8cb0	a0 20		        ldy #msg4-msgbas    ; display "..sys "
.8cb2	20 52 96	        jsr sndmsg
.8cb5	ad fe 97	        lda supad           ; store entry point address in tmp0
.8cb8	85 c1		        sta tmp0
.8cba	ad ff 97	        lda supad+1
.8cbd	85 c2		        sta tmp0+1
.8cbf	20 dc 94	        jsr cvtdec          ; convert address to decimal
.8cc2	a9 00		        lda #0
.8cc4	a2 06		        ldx #6
.8cc6	a0 03		        ldy #3
.8cc8	20 16 95	        jsr nmprnt          ; print entry point address
.8ccb	20 ab 93	        jsr crlf
.8cce	ad fc 97	        lda linkad          ; set brk vector
.8cd1	8d 16 03	        sta bkvec
.8cd4	ad fd 97	        lda linkad+1
.8cd7	8d 17 03	        sta bkvec+1
.8cda	a9 80		        lda #$80            ; disable kernel control messages
.8cdc	20 90 ff	        jsr setmsg          ; and enable error messages
.8cdf	00		        brk
.8ce0			setcolors
.8ce0	08		                php
.8ce1	48		                pha
.8ce2	a9 0e		                lda     #$0e ;and #$0a #$0b
.8ce4	8d 21 d0	                sta     screen
.8ce7	29 07		                and     #$07
.8ce9	8d 20 d0	                sta     border
.8cec	a9 01		                lda     #$01
.8cee	8d 86 02	                sta     texte
.8cf1	a9 93		                lda     #147
.8cf3	20 d2 ff	                jsr     $ffd2
.8cf6	a9 13		                lda     #19
.8cf8	20 d2 ff	                jsr     $ffd2
.8cfb	68		                pla
.8cfc	28		                plp
.8cfd	60		                rts
=53281			screen  =       53281
=53280			border  =       53280
=646			texte   =       646
.8cfe	a2 05		break   ldx #$05            ; pull registers off the stack
.8d00	68		bstack  pla                 ; order: y,x,a,sr,pcl,pch
.8d01	9d 28 02	        sta pch,x           ; store in memory
.8d04	ca		        dex
.8d05	10 f9		        bpl bstack
.8d07	d8		        cld                 ; disable bcd mode
.8d08	ba		        tsx                 ; store stack pointer in memory
.8d09	8e 2e 02	        stx sp
.8d0c	58		        cli                 ; enable interupts
.8d0d	a0 00		dsplyr  ldy #msg2-msgbas    ; display headers
.8d0f	20 3f 96	        jsr sndclr
.8d12	a9 3b		        lda #$3b            ; prefix registers with "; " to allow editing
.8d14	20 d2 ff	        jsr chrout
.8d17	a9 20		        lda #$20
.8d19	20 d2 ff	        jsr chrout
.8d1c	ad 28 02	        lda pch             ; print 2-byte program counter
.8d1f	20 c4 93	        jsr wrtwo
.8d22	a0 01		        ldy #1              ; start 1 byte after pc high byte
.8d24	b9 28 02	disj    lda pch,y           ; loop through rest of the registers
.8d27	20 a0 93	        jsr wrbyte          ; print 1-byte register value
.8d2a	c8		        iny
.8d2b	c0 07		        cpy #7              ; there are a total of 5 registers to print
.8d2d	90 f5		        bcc disj
.8d2f	20 ab 93	strt    jsr crlf            ; new line
.8d32	a2 00		        ldx #0              ; point at start of input buffer
.8d34	8e 31 02	        stx chrpnt
.8d37	20 cf ff	smove   jsr input           ; chrin kernal call to input a character
.8d3a	9d 00 02	        sta inbuff,x        ; store in input buffer
.8d3d	e8		        inx
.8d3e	e0 28		        cpx #endin-inbuff   ; error if buffer is full
.8d40	b0 1c		        bcs error
.8d42	c9 0d		        cmp #$0d            ; keep reading until cr
.8d44	d0 f1		        bne smove
.8d46	a9 00		        lda #0              ; null-terminate input buffer
.8d48	9d ff 01	        sta inbuff-1,x      ; (replacing the cr)
.8d4b	20 ec 93	st1     jsr getchr          ; get a character from the buffer
.8d4e	f0 df		        beq strt            ; start over if buffer is empty
.8d50	c9 20		        cmp #$20            ; skip leading spaces
.8d52	f0 f7		        beq st1
.8d54	a2 16		s0      ldx #keytop-keyw    ; loop through valid command characters
.8d56	dd c0 97	s1      cmp keyw,x          ; see if input character matches
.8d59	f0 0b		        beq s2              ; command matched, dispatch it
.8d5b	ca		        dex                 ; no match, check next command
.8d5c	10 f8		        bpl s1              ; keep trying until we've checked them all
.8d5e	a0 1e		error   ldy #msg3-msgbas    ; display "?" to indicate error and go to new line
.8d60	20 52 96	        jsr sndmsg
.8d63	4c 2f 8d	        jmp strt            ; back to main loop
.8d66	e0 13		s2      cpx #$13            ; last 3 commands in table are load/save/validate
.8d68	b0 12		        bcs lsv             ;   which are handled by the same subroutine
.8d6a	e0 0f		        cpx #$0f            ; next 4 commands are base conversions
.8d6c	b0 14		        bcs cnvlnk          ;   which are handled by the same subroutine
.8d6e	8a		        txa                 ; remaining commands dispatch through vector table
.8d6f	0a		        asl a               ; multiply index of command by 2
.8d70	aa		        tax                 ;   since table contains 2-byte addresses
.8d71	bd d7 97	        lda kaddr+1,x       ; push address from vector table onto stack
.8d74	48		        pha                 ;   so that the rts from getpar will jump there
.8d75	bd d6 97	        lda kaddr,x
.8d78	48		        pha
.8d79	4c cd 92	        jmp getpar          ; get the first parameter for the command
.8d7c	8d 32 02	lsv     sta savy            ; handle load/save/validate
.8d7f	4c 4f 8f	        jmp ld
.8d82	4c 91 94	cnvlnk  jmp convrt          ; handle base conversion
.8d85	6c 02 a0	exit    jmp ($a002)         ; jump to warm-start vector to reinitialize basic
.8d88	b0 08		dsplym  bcs dspm11          ; start from previous end addr if no address given
.8d8a	20 06 94	        jsr copy12          ; save start address in tmp2
.8d8d	20 cd 92	        jsr getpar          ; get end address in tmp0
.8d90	90 06		        bcc dsmnew          ; did user specify one?
.8d92	a9 0b		dspm11  lda #$0b            ; if not, show 12 lines by default
.8d94	85 c1		        sta tmp0
.8d96	d0 0e		        bne dspbyt          ; always true, but bne uses 1 byte less than jmp
.8d98	20 0f 94	dsmnew  jsr sub12           ; end addr given, calc bytes between start and end
.8d9b	90 1e		        bcc merror          ; error if start is after end
.8d9d	a2 03		        ldx #3              ; divide by 8 (shift right 3 times)
.8d9f	46 c2		dspm01  lsr tmp0+1
.8da1	66 c1		        ror tmp0
.8da3	ca		        dex
.8da4	d0 f9		        bne dspm01
.8da6	20 e1 ff	dspbyt  jsr stop            ; check for stop key
.8da9	f0 0d		        beq dspmx           ; exit early if pressed
.8dab	20 2b 8e	        jsr dispmem         ; display 1 line containing 8 bytes
.8dae	a9 08		        lda #8              ; increase start address by 8 bytes
.8db0	20 45 94	        jsr bumpad2
.8db3	20 1d 94	        jsr suba1           ; decrement line counter
.8db6	b0 ee		        bcs dspbyt          ; show another line until it's < 0
.8db8	4c 2f 8d	dspmx   jmp strt            ; back to main loop
.8dbb	4c 5e 8d	merror  jmp error           ; handle error
.8dbe	20 5d 94	altr    jsr copy1p          ; store first parameter in pc
.8dc1	a0 00		        ldy #0              ; init counter
.8dc3	20 cd 92	altr1   jsr getpar          ; get value for next register
.8dc6	b0 0a		        bcs altrx           ; exit early if no more values given
.8dc8	a5 c1		        lda tmp0            ; store in memory, offset from sr
.8dca	99 2a 02	        sta sr,y            ; these locations will be transferred to the
.8dcd	c8		        iny                 ;   actual registers before exiting the monitor
.8dce	c0 05		        cpy #$05            ; have we updated all 5 yet?
.8dd0	90 f1		        bcc altr1           ; if not, get next
.8dd2	4c 2f 8d	altrx   jmp strt            ; back to main loop
.8dd5	b0 13		altm    bcs altmx           ; exit if no parameter provided
.8dd7	20 06 94	        jsr copy12          ; copy parameter to start address
.8dda	a0 00		        ldy #0
.8ddc	20 cd 92	altm1   jsr getpar          ; get value for next byte of memory
.8ddf	b0 09		        bcs altmx           ; if none given, exit early
.8de1	a5 c1		        lda tmp0            ; poke value into memory at start address + y
.8de3	91 c3		        sta (tmp2),y
.8de5	c8		        iny                 ; next byte
.8de6	c0 08		        cpy #8              ; have we read 8 bytes yet?
.8de8	90 f2		        bcc altm1           ; if not, read the next one
.8dea	a9 91		altmx   lda #$91            ; move cursor up
.8dec	20 d2 ff	        jsr chrout
.8def	20 2b 8e	        jsr dispmem         ; re-display line to make ascii match hex
.8df2	4c 2f 8d	        jmp strt            ; back to main loop
.8df5	ae 2e 02	goto    ldx sp              ; load stack pointer from memory
.8df8	9a		        txs                 ; save in sp register
.8df9	20 5d 94	goto2   jsr copy1p          ; copy provided address to pc
.8dfc	78		        sei                 ; disable interrupts
.8dfd	ad 28 02	        lda pch             ; push pc high byte on stack
.8e00	48		        pha
.8e01	ad 29 02	        lda pcl             ; push pc low byte on stack
.8e04	48		        pha
.8e05	ad 2a 02	        lda sr              ; push status byte on stack
.8e08	48		        pha
.8e09	ad 2b 02	        lda acc             ; load accumulator from memory
.8e0c	ae 2c 02	        ldx xr              ; load x from memory
.8e0f	ac 2d 02	        ldy yr              ; load y from memory
.8e12	40		        rti                 ; return from interrupt (pops pc and sr)
.8e13	ae 2e 02	jsub    ldx sp              ; load stack pointer from memory
.8e16	9a		        txs                 ; save value in sp register
.8e17	20 f9 8d	        jsr goto2           ; same as goto command
.8e1a	8c 2d 02	        sty yr              ; save y to memory
.8e1d	8e 2c 02	        stx xr              ; save x to memory
.8e20	8d 2b 02	        sta acc             ; save accumulator to memory
.8e23	08		        php                 ; push processor status on stack
.8e24	68		        pla                 ; pull processor status into a
.8e25	8d 2a 02	        sta sr              ; save processor status to memory
.8e28	4c 0d 8d	        jmp dsplyr          ; display registers
.8e2b	20 ab 93	dispmem jsr crlf            ; new line
.8e2e	a9 3e		        lda #">"            ; prefix > so memory can be edited in place
.8e30	20 d2 ff	        jsr chrout
.8e33	20 96 93	        jsr showad          ; show address of first byte on line
.8e36	a0 00		        ldy #0
.8e38	f0 03		        beq dmemgo          ; showad already printed a space after the address
.8e3a	20 a3 93	dmemlp  jsr space           ; print space between bytes
.8e3d	b1 c3		dmemgo  lda (tmp2),y        ; load byte from start address + y
.8e3f	20 c4 93	        jsr wrtwo           ; output hex digits for byte
.8e42	c8		        iny                 ; next byte
.8e43	c0 08		        cpy #8              ; have we output 8 bytes yet?
.8e45	90 f3		        bcc dmemlp          ; if not, output next byte
.8e47	a0 26		        ldy #msg5-msgbas    ; if so, output : and turn on reverse video
.8e49	20 52 96	        jsr sndmsg          ;   before displaying ascii representation
.8e4c	a0 00		        ldy #0              ; back to first byte in line
.8e4e	b1 c3		dchar   lda (tmp2),y        ; load byte at start address + y
.8e50	aa		        tax                 ; stash in x
.8e51	29 bf		        and #$bf            ; clear 6th bit
.8e53	c9 22		        cmp #$22            ; is it a quote (")?
.8e55	f0 08		        beq ddot            ; if so, print . instead
.8e57	8a		        txa                 ; if not, restore character
.8e58	29 7f		        and #$7f            ; clear top bit
.8e5a	c9 20		        cmp #$20            ; is it a printable character (>= $20)?
.8e5c	8a		        txa                 ; restore character
.8e5d	b0 02		        bcs dchrok          ; if printable, output character
.8e5f	a9 2e		ddot    lda #$2e            ; if not, output '.' instaed
.8e61	20 d2 ff	dchrok  jsr chrout
.8e64	c8		        iny                 ; next byte
.8e65	c0 08		        cpy #8              ; have we output 8 bytes yet?
.8e67	90 e5		        bcc dchar           ; if not, output next byte
.8e69	60		        rts
.8e6a	a9 00		compar  lda #0              ; bit 7 clear signals compare
>8e6c	2c		        .byte $2c           ; absolute bit opcode consumes next word (lda #$80)
.8e6d	a9 80		trans   lda #$80            ; bit 7 set signals transfer
.8e6f	8d 32 02	        sta savy            ; save compare/transfer flag in savy
.8e72	a9 00		        lda #0              ; assume we're counting up (bit 7 clear)
.8e74	8d 07 01	        sta upflg           ; save direction flag
.8e77	20 6a 94	        jsr getdif          ; get two addresses and calculate difference
.8e7a	b0 05		        bcs terror          ; carry set indicates error
.8e7c	20 cd 92	        jsr getpar          ; get destination address in tmp0
.8e7f	90 03		        bcc tokay           ; carry set indicates error
.8e81	4c 5e 8d	terror  jmp error           ; handle error
.8e84	2c 32 02	tokay   bit savy            ; transfer or compare?
.8e87	10 27		        bpl compar1         ; high bit clear indicates compare
.8e89	a5 c3		        lda tmp2            ; if it's a transfer, we must take steps
.8e8b	c5 c1		        cmp tmp0            ;   to avoid overwriting the source bytes before
.8e8d	a5 c4		        lda tmp2+1          ;   they have been transferred
.8e8f	e5 c2		        sbc tmp0+1          ; compare source (tmp2) to destination (tmp0)
.8e91	b0 1d		        bcs compar1         ; and count up if source is before than desitnation
.8e93	ad 2f 02	        lda store           ; otherwise, start at end and count down...
.8e96	65 c1		        adc tmp0            ; add length (store) to desintation (tmp0)
.8e98	85 c1		        sta tmp0            ; to calculate end of destination
.8e9a	ad 30 02	        lda store+1
.8e9d	65 c2		        adc tmp0+1
.8e9f	85 c2		        sta tmp0+1
.8ea1	a2 01		        ldx #1              ; change source pointer from beginning to end
.8ea3	bd 0b 01	tdown   lda stash,x         ; tmp2 = source end (stash)
.8ea6	95 c3		        sta tmp2,x
.8ea8	ca		        dex
.8ea9	10 f8		        bpl tdown
.8eab	a9 80		        lda #$80            ; high bit set in upflg means count down
.8ead	8d 07 01	        sta upflg
.8eb0	20 ab 93	compar1 jsr crlf            ; new line
.8eb3	a0 00		        ldy #0              ; no offset from pointer
.8eb5	20 e1 ff	tcloop  jsr stop            ; check for stop key
.8eb8	f0 31		        beq texit           ; exit if pressed
.8eba	b1 c3		        lda (tmp2),y        ; load byte from source
.8ebc	2c 32 02	        bit savy            ; transfer or compare?
.8ebf	10 02		        bpl compar2         ; skip store if comparing
.8ec1	91 c1		        sta (tmp0),y        ; otherwise, store in destination
.8ec3	d1 c1		compar2 cmp (tmp0),y        ; compare to destination
.8ec5	f0 03		        beq tmvad           ; don't show address if equal
.8ec7	20 96 93	        jsr showad          ; show address
.8eca	2c 07 01	tmvad   bit upflg           ; counting up or down?
.8ecd	30 0b		        bmi tdecad          ; high bit set means we're counting down
.8ecf	e6 c1		        inc tmp0            ; increment destination low byte
.8ed1	d0 10		        bne tincok
.8ed3	e6 c2		        inc tmp0+1          ; carry to high byte if necessary
.8ed5	d0 0c		        bne tincok
.8ed7	4c 5e 8d	        jmp error           ; error if high byte overflowed
.8eda	20 1d 94	tdecad  jsr suba1           ; decrement destination (tmp0)
.8edd	20 4f 94	        jsr sub21           ; decrement source (tmp2)
.8ee0	4c e6 8e	        jmp tmor
.8ee3	20 43 94	tincok  jsr adda2           ; increment source (tmp2)
.8ee6	20 31 94	tmor    jsr sub13           ; decrement length
.8ee9	b0 ca		        bcs tcloop          ; loop until length is 0
.8eeb	4c 2f 8d	texit   jmp strt            ; back to main loop
.8eee	20 6a 94	hunt    jsr getdif          ; get start (tmp2) and end (tmp0) of haystack
.8ef1	b0 59		        bcs herror          ; carry indicates error
.8ef3	a0 00		        ldy #0
.8ef5	20 ec 93	        jsr getchr          ; get a single character
.8ef8	c9 27		        cmp #"'"            ; is it a single quote?
.8efa	d0 16		        bne nostrh          ; if not, input needle as hex bytes
.8efc	20 ec 93	        jsr getchr          ; if so, input needle as string
.8eff	c9 00		        cmp #0
.8f01	f0 49		        beq herror          ; error if needle isn't at least one byte
.8f03	99 17 01	hpar    sta stage,y         ; save char in staging area
.8f06	c8		        iny
.8f07	20 ec 93	        jsr getchr          ; get another char
.8f0a	f0 18		        beq htgo            ; if it's null start searching
.8f0c	c0 1e		        cpy #estage-stage   ; have we filled up the needle staging area?
.8f0e	d0 f3		        bne hpar            ; if not, get another character
.8f10	f0 12		        beq htgo            ; if so, start searching
.8f12	20 ca 92	nostrh  jsr rdpar           ; read hex bytes if string not indicated
.8f15	a5 c1		hlp     lda tmp0            ; save last read byte in staging area
.8f17	99 17 01	        sta stage,y
.8f1a	c8		        iny                 ; get another hex byte
.8f1b	20 cd 92	        jsr getpar
.8f1e	b0 04		        bcs htgo            ; if there is none, start searching
.8f20	c0 1e		        cpy #estage-stage   ; have we filled up the needle staging area?
.8f22	d0 f1		        bne hlp             ; if not, get another byte
.8f24	8c 32 02	htgo    sty savy            ; save length of needle
.8f27	20 ab 93	        jsr crlf            ; new line
.8f2a	a0 00		hscan   ldy #0
.8f2c	b1 c3		hlp3    lda (tmp2),y        ; get first byte in haystack
.8f2e	d9 17 01	        cmp stage,y         ; compare it to first byte of needle
.8f31	d0 09		        bne hnoft           ; if it doesn't match, we haven't found anything
.8f33	c8		        iny                 ; if it does, check the next byte
.8f34	cc 32 02	        cpy savy            ; have we reached the end of the needle?
.8f37	d0 f3		        bne hlp3            ; if not, keep comparing bytes
.8f39	20 96 93	        jsr showad          ; match found, show address
.8f3c	20 e1 ff	hnoft   jsr stop            ; no match, check for stop key
.8f3f	f0 08		        beq hexit           ; exit prematurely if pressed
.8f41	20 43 94	        jsr adda2           ; increment haystack pointer
.8f44	20 31 94	        jsr sub13           ; decrement haystack length
.8f47	b0 e1		        bcs hscan           ; still more haystack? keep searching
.8f49	4c 2f 8d	hexit   jmp strt            ; back to main loop
.8f4c	4c 5e 8d	herror  jmp error           ; handle error
.8f4f	a0 01		ld      ldy #1              ; default to reading from tape, device #1
.8f51	84 ba		        sty fa
.8f53	84 b9		        sty sadd            ; default to secondary address #1
.8f55	88		        dey
.8f56	84 b7		        sty fnlen           ; start with an empty filename
.8f58	84 90		        sty satus           ; clear status
.8f5a	a9 01		        lda #>stage         ; set filename pointer to staging buffer
.8f5c	85 bc		        sta fnadr+1
.8f5e	a9 17		        lda #<stage
.8f60	85 bb		        sta fnadr
.8f62	20 ec 93	l1      jsr getchr          ; get a character
.8f65	f0 59		        beq lshort          ; no filename given, try load or verify from tape
.8f67	c9 20		        cmp #$20            ; skip leading spaces
.8f69	f0 f7		        beq l1
.8f6b	c9 22		        cmp #$22            ; error if filename doesn't start with a quote
.8f6d	d0 16		        bne lerror
.8f6f	ae 31 02	        ldx chrpnt          ; load current char pointer into index reg
.8f72	bd 00 02	l3      lda inbuff,x        ; load current char from buffer to accumulator
.8f75	f0 49		        beq lshort          ; no filename given, try load or verify from tape
.8f77	e8		        inx                 ; next char
.8f78	c9 22		        cmp #$22            ; is it a quote?
.8f7a	f0 0c		        beq l8              ; if so, we've reached the end of the filename
.8f7c	91 bb		        sta (fnadr),y       ; if not, save character in filename buffer
.8f7e	e6 b7		        inc fnlen           ; increment filename length
.8f80	c8		        iny
.8f81	c0 1e		        cpy #estage-stage   ; check whether buffer is full
.8f83	90 ed		        bcc l3              ; if not, get another character
.8f85	4c 5e 8d	lerror  jmp error           ; if so, handle error
.8f88	8e 31 02	l8      stx chrpnt          ; set character pointer to the current index
.8f8b	20 ec 93	        jsr getchr          ; eat separator between filename and device #
.8f8e	f0 30		        beq lshort          ; no separator, try to load or verify from tape
.8f90	20 cd 92	        jsr getpar          ; get device number
.8f93	b0 2b		        bcs lshort          ; no device # given, try load or verify from tape
.8f95	a5 c1		        lda tmp0            ; set device number for kernal routines
.8f97	85 ba		        sta fa
.8f99	20 cd 92	        jsr getpar          ; get start address for load or save in tmp0
.8f9c	b0 22		        bcs lshort          ; no start address, try to load or verify
.8f9e	20 06 94	        jsr copy12          ; transfer start address to tmp2
.8fa1	20 cd 92	        jsr getpar          ; get end address for save in tmp0
.8fa4	b0 3d		        bcs ldaddr          ; no end address, try to load to given start addr
.8fa6	20 ab 93	        jsr crlf            ; new line
.8fa9	a6 c1		        ldx tmp0            ; put low byte of end address in x
.8fab	a4 c2		        ldy tmp0+1          ; put high byte of end address in y
.8fad	ad 32 02	        lda savy            ; confirm that we're doing a save
.8fb0	c9 53		        cmp #"s"
.8fb2	d0 d1		        bne lerror          ; if not, error due to too many params
.8fb4	a9 00		        lda #0
.8fb6	85 b9		        sta sadd            ; set secondary address to 0
.8fb8	a9 c3		        lda #tmp2           ; put addr of zero-page pointer to data in a
.8fba	20 d8 ff	        jsr save            ; call kernal save routine
.8fbd	4c 2f 8d	lsvxit  jmp strt            ; back to mainloop
.8fc0	ad 32 02	lshort  lda savy            ; check which command we received
.8fc3	c9 56		        cmp #"v"
.8fc5	f0 06		        beq loadit          ; we're doing a verify so don't set a to 0
.8fc7	c9 4c		        cmp #"l"
.8fc9	d0 ba		        bne lerror          ; error due to not enough params for save
.8fcb	a9 00		        lda #0              ; 0 in a signals load, anything else is verify
.8fcd	20 d5 ff	loadit  jsr load            ; call kernal load routine
.8fd0	a5 90		        lda satus           ; get i/o status
.8fd2	29 10		        and #$10            ; check bit 5 for checksum error
.8fd4	f0 e7		        beq lsvxit          ; if no error go back to mainloop
.8fd6	ad 32 02	        lda savy            ; ?? not sure what these two lines are for...
.8fd9	f0 aa		        beq lerror          ; ?? savy will never be 0, so why check?
.8fdb	a0 28		        ldy #msg6-msgbas    ; display "error" if checksum didn't match
.8fdd	20 52 96	        jsr sndmsg
.8fe0	4c 2f 8d	        jmp strt            ; back to mainloop
.8fe3	a6 c3		ldaddr  ldx tmp2            ; load address low byte in x
.8fe5	a4 c4		        ldy tmp2+1          ; load address high byte in y
.8fe7	a9 00		        lda #0              ; 0 in a signals load
.8fe9	85 b9		        sta sadd            ; secondary addr 0 means load to addr in x and y
.8feb	f0 d3		        beq lshort          ; execute load
.8fed	20 6a 94	fill    jsr getdif          ; start in tmp2, end in stash, length in store
.8ff0	b0 59		        bcs aerror          ; carry set indicates error
.8ff2	20 cd 92	        jsr getpar          ; get value to fill in tmp0
.8ff5	b0 54		        bcs aerror          ; carry set indicates error
.8ff7	20 ec 93	        jsr getchr          ; any more characters triggers an error
.8ffa	d0 4f		        bne aerror
.8ffc	a0 00		        ldy #0              ; no offset
.8ffe	a5 c1		fillp   lda tmp0            ; load value to fill in accumulator
.9000	91 c3		        sta (tmp2),y        ; store fill value in current address
.9002	20 e1 ff	        jsr stop            ; check for stop key
.9005	f0 08		        beq fstart          ; if pressed, back to main loop
.9007	20 43 94	        jsr adda2           ; increment address
.900a	20 31 94	        jsr sub13           ; decrement length
.900d	b0 ef		        bcs fillp           ; keep going until length reaches 0
.900f	4c 2f 8d	fstart  jmp strt            ; back to main loop
.9012	b0 37		assem   bcs aerror          ; error if no address given
.9014	20 06 94	        jsr copy12          ; copy address to tmp2
.9017	a2 00		aget1   ldx #0
.9019	8e 0e 01	        stx u0aa0+1         ; clear byte that mnemonic gets shifted into
.901c	8e 08 01	        stx digcnt          ; clear digit count
.901f	20 ec 93	aget2   jsr getchr          ; get a char
.9022	d0 04		        bne almor           ; proceed if the character isn't null
.9024	e0 00		        cpx #0              ; it's null, have read a mnemonic yet?
.9026	f0 e7		        beq fstart          ; if not, silently go back to main loop
.9028	c9 20		almor   cmp #$20            ; skip leading spaces
.902a	f0 eb		        beq aget1
.902c	9d 02 01	        sta mnemw,x         ; put character in mnemonic buffer
.902f	e8		        inx
.9030	e0 03		        cpx #3              ; have we read 3 characters yet?
.9032	d0 eb		        bne aget2           ; if not, get next character
.9034	ca		asqeez  dex                 ; move to previous char
.9035	30 17		        bmi aoprnd          ; if we're done with mnemonic, look for operand
.9037	bd 02 01	        lda mnemw,x         ; get current character
.903a	38		        sec                 ; pack 3-letter mnemonic into 2 bytes (15 bits)
.903b	e9 3f		        sbc #$3f            ; subtract $3f from ascii code so a-z = 2 to 27
.903d	a0 05		        ldy #$05            ; letters now fit in 5 bits; shift them out
.903f	4a		ashift  lsr a               ;   into the first two bytes of the inst buffer
.9040	6e 0e 01	        ror u0aa0+1         ; catch the low bit from accumulator in right byte
.9043	6e 0d 01	        ror u0aa0           ; catch the low bit from right byte in left byte
.9046	88		        dey                 ; count down bits
.9047	d0 f6		        bne ashift          ; keep looping until we reach zero
.9049	f0 e9		        beq asqeez          ; unconditional branch to handle next char
.904b	4c 5e 8d	aerror  jmp error           ; handle error
.904e	a2 02		aoprnd  ldx #2              ; mnemonic is in first two bytes so start at third
.9050	ad 08 01	ascan   lda digcnt          ; did we find address digits last time?
.9053	d0 2d		        bne aform1          ; if so, look for mode chars
.9055	20 f5 92	        jsr rdval           ; otherwise, look for an address
.9058	f0 25		        beq aform0          ; we didn't find an address, look for characters
.905a	b0 ef		        bcs aerror          ; carry flag indicates error
.905c	a9 24		        lda #"$"
.905e	9d 0d 01	        sta u0aa0,x         ; prefix addresses with $
.9061	e8		        inx                 ; next position in buffer
.9062	a0 04		        ldy #4              ; non-zero page addresses are 4 hex digits
.9064	ad 0a 01	        lda numbit          ; check numeric base in which address was given
.9067	c9 08		        cmp #8              ; for addresses given in octal or binary
.9069	90 05		        bcc aaddr           ;   use only the high byte to determine page
.906b	cc 08 01	        cpy digcnt          ; for decimal or hex, force non-zero page addressing
.906e	f0 06		        beq afill0          ;   if address was given with four digits or more
.9070	a5 c2		aaddr   lda tmp0+1          ; check whether high byte of address is zero
.9072	d0 02		        bne afill0          ; non-zero high byte means we're not in zero page
.9074	a0 02		        ldy #2              ; if it's in zero page, addr is 2 hex digits
.9076	a9 30		afill0  lda #$30            ; use 0 as placeholder for each hex digit in addr
.9078	9d 0d 01	afil0l  sta u0aa0,x         ; put placeholder in assembly buffer
.907b	e8		        inx                 ; move to next byte in buffer
.907c	88		        dey                 ; decrement number of remaining digits
.907d	d0 f9		        bne afil0l          ; loop until all digits have been placed
.907f	ce 31 02	aform0  dec chrpnt          ; non-numeric input; back 1 char to see what it was
.9082	20 ec 93	aform1  jsr getchr          ; get next character
.9085	f0 0e		        beq aescan          ; if there is none, we're finished scanning
.9087	c9 20		        cmp #$20            ; skip spaces
.9089	f0 c5		        beq ascan
.908b	9d 0d 01	        sta u0aa0,x         ; store character in assembly buffer
.908e	e8		        inx                 ; move to next byte in buffer
.908f	e0 0a		        cpx #u0aae-u0aa0    ; is instruction buffer full?
.9091	90 bd		        bcc ascan           ; if not, keep scanning
.9093	b0 b6		        bcs aerror          ; error if buffer is full
.9095	8e 2f 02	aescan  stx store           ; save number of bytes in assembly buffer
.9098	a2 00		        ldx #0              ; start at opcode $00 and check every one until
.909a	8e 06 01	        stx opcode          ;   we find one that matches our criteria
.909d	a2 00		atryop  ldx #0
.909f	8e 33 02	        stx u9f             ; reset index into work buffer
.90a2	ad 06 01	        lda opcode
.90a5	20 5c 92	        jsr instxx          ; look up instruction format for current opcode
.90a8	ae 00 01	        ldx acmd            ; save addressing command for later
.90ab	8e 30 02	        stx store+1
.90ae	aa		        tax                 ; use current opcode as index
.90af	bd 7c 97	        lda mnemr,x         ; check right byte of compressed mnemonic
.90b2	20 83 91	        jsr chekop
.90b5	bd 3c 97	        lda mneml,x         ; check left byte of compressed mnemonic
.90b8	20 83 91	        jsr chekop
.90bb	a2 06		        ldx #6              ; 6 possible characters to check against operand
.90bd	e0 03		tryit   cpx #3              ; are we on character 3?
.90bf	d0 14		        bne trymod          ; if not, check operand characters
.90c1	ac 01 01	        ldy length          ; otherwise, check number of bytes in operand
.90c4	f0 0f		        beq trymod          ; if zero, check operand characters
.90c6	ad 00 01	tryad   lda acmd            ; otherwise, look for an address
.90c9	c9 e8		        cmp #$e8            ; special case for relative addressing mode
.90cb	a9 30		        lda #$30            ; '0' is the digit placeholder we're looking for
.90cd	b0 1e		        bcs try4b           ; acmd >= $e8 indicates relative addressing
.90cf	20 80 91	        jsr chek2b          ; acmd < $e8 indicates normal addressing
.90d2	88		        dey                 ; consume byte
.90d3	d0 f1		        bne tryad           ; check for 2 more digits if not zero-page
.90d5	0e 00 01	trymod  asl acmd            ; shift a bit out of the addressing command
.90d8	90 0e		        bcc ub4df           ; if it's zero, skip checking current character
.90da	bd 2f 97	        lda char1-1,x
.90dd	20 83 91	        jsr chekop          ; otherwise first character against operand
.90e0	bd 35 97	        lda char2-1,x       ; get second character to check
.90e3	f0 03		        beq ub4df           ; if it's zero, skip checking it
.90e5	20 83 91	        jsr chekop          ; otherwise check it against hte operand
.90e8	ca		ub4df   dex                 ; move to next character
.90e9	d0 d2		        bne tryit           ; repeat tests
.90eb	f0 06		        beq trybran
.90ed	20 80 91	try4b   jsr chek2b          ; check for 4 digit address placeholder
.90f0	20 80 91	        jsr chek2b          ;   by checking for 2 digits twice
.90f3	ad 2f 02	trybran lda store           ; get number of bytes in assembly buffer
.90f6	cd 33 02	        cmp u9f             ; more bytes left to check?
.90f9	f0 03		        beq abran           ; if not, we've found a match; build instruction
.90fb	4c 90 91	        jmp bumpop          ; if so, this opcode doesn't match; try the next
.90fe	ac 01 01	abran   ldy length          ; get number of bytes in operand
.9101	f0 32		        beq a1byte          ; if none, just output the opcode
.9103	ad 30 02	        lda store+1         ; otherwise check the address format
.9106	c9 9d		        cmp #$9d            ; is it a relative branch?
.9108	d0 23		        bne objput          ; if not, skip relative branch calculation
.910a	a5 c1		        lda tmp0            ; calculate the difference between the current
.910c	e5 c3		        sbc tmp2            ;   address and the branch target (low byte)
.910e	aa		        tax                 ; save it in x
.910f	a5 c2		        lda tmp0+1          ; borrow from the high byte if necessary
.9111	e5 c4		        sbc tmp2+1
.9113	90 08		        bcc abback          ; if result is negative, we're branching back
.9115	d0 66		        bne serror          ; high bytes must be equal when branching forward
.9117	e0 82		        cpx #$82            ; difference between low bytes must be < 130
.9119	b0 62		        bcs serror          ; error if the address is too far away
.911b	90 08		        bcc abranx
.911d	a8		abback  tay                 ; when branching backward high byte of target must
.911e	c8		        iny                 ;   be 1 less than high byte of current address
.911f	d0 5c		        bne serror          ; if not, it's too far away
.9121	e0 82		        cpx #$82            ; difference between low bytes must be < 130
.9123	90 58		        bcc serror          ; if not, it's too far away
.9125	ca		abranx  dex                 ; adjust branch target relative to the
.9126	ca		        dex                 ;   instruction following this one
.9127	8a		        txa
.9128	ac 01 01	        ldy length          ; load length of operand
.912b	d0 03		        bne objp2           ; don't use the absolute address
.912d	b9 c0 00	objput  lda tmp0-1,y        ; get the operand
.9130	91 c3		objp2   sta (tmp2),y        ; store it after the opcode
.9132	88		        dey
.9133	d0 f8		        bne objput          ; copy the other byte of operand if there is one
.9135	ad 06 01	a1byte  lda opcode          ; put opcode into instruction
.9138	91 c3		        sta (tmp2),y
.913a	20 ab 93	        jsr crlf            ; carriage return
.913d	a9 91		        lda #$91            ; back up one line
.913f	20 d2 ff	        jsr chrout
.9142	a0 2e		        ldy #msg7-msgbas    ; "a " prefix
.9144	20 3f 96	        jsr sndclr          ; clear line
.9147	20 de 91	        jsr dislin          ; disassemble the instruction we just assembled
.914a	ee 01 01	        inc length          ; instruction length = operand length + 1 byte
.914d	ad 01 01	        lda length          ;   for the opcode
.9150	20 45 94	        jsr bumpad2         ; increment address by length of instruction
.9153	a9 41		        lda #"a"            ; stuff keyboard buffer with next assemble command:
.9155	8d 77 02	        sta keyd            ;   "a xxxx " where xxxx is the next address
.9158	a9 20		        lda #" "            ;   after the previously assembled instruction
.915a	8d 78 02	        sta keyd+1
.915d	8d 7d 02	        sta keyd+6
.9160	a5 c4		        lda tmp2+1          ; convert high byte of next address to hex
.9162	20 d4 93	        jsr asctwo
.9165	8d 79 02	        sta keyd+2          ; put it in the keyboard buffer
.9168	8e 7a 02	        stx keyd+3
.916b	a5 c3		        lda tmp2            ; convert low byte of next address to hex
.916d	20 d4 93	        jsr asctwo
.9170	8d 7b 02	        sta keyd+4          ; put it in the keyboard buffer
.9173	8e 7c 02	        stx keyd+5
.9176	a9 07		        lda #7              ; set number of chars in keyboard buffer
.9178	85 c6		        sta ndx
.917a	4c 2f 8d	        jmp strt            ; back to main loop
.917d	4c 5e 8d	serror  jmp error           ; handle error
.9180	20 83 91	chek2b  jsr chekop          ; check two bytes against value in accumulator
.9183	8e 05 01	chekop  stx savx            ; stash x
.9186	ae 33 02	        ldx u9f             ; get current index into work buffer
.9189	dd 0d 01	        cmp u0aa0,x         ; check whether this opcode matches the buffer
.918c	f0 0a		        beq opok            ;   matching so far, check the next criteria
.918e	68		        pla                 ; didn't match, so throw away return address
.918f	68		        pla                 ;   on the stack because we're starting over
.9190	ee 06 01	bumpop  inc opcode          ; check the next opcode
.9193	f0 e8		        beq serror          ; error if we tried every opcode and none fit
.9195	4c 9d 90	        jmp atryop          ; start over with new opcode
.9198	ee 33 02	opok    inc u9f             ; opcode matches so far; check the next criteria
.919b	ae 05 01	        ldx savx            ; restore x
.919e	60		        rts
.919f	b0 08		disass  bcs dis0ad          ; if no address was given, start from last address
.91a1	20 06 94	        jsr copy12          ; copy start address to tmp2
.91a4	20 cd 92	        jsr getpar          ; get end address in tmp0
.91a7	90 06		        bcc dis2ad          ; if one was given, skip default
.91a9	a9 14		dis0ad  lda #$14            ; disassemble 14 bytes by default
.91ab	85 c1		        sta tmp0            ; store length in tmp0
.91ad	d0 05		        bne disgo           ; skip length calculation
.91af	20 0f 94	dis2ad  jsr sub12           ; calculate number of bytes between start and end
.91b2	90 1f		        bcc derror          ; error if end address is before start address
.91b4	20 39 96	disgo   jsr cline           ; clear the current line
.91b7	20 e1 ff	        jsr stop            ; check for stop key
.91ba	f0 14		        beq disexit         ; exit early if pressed
.91bc	20 d6 91	        jsr dsout1          ; output disassembly prefix ". "
.91bf	ee 01 01	        inc length
.91c2	ad 01 01	        lda length          ; add length of last instruction to start address
.91c5	20 45 94	        jsr bumpad2
.91c8	ad 01 01	        lda length          ; subtract length of last inst from end address
.91cb	20 1f 94	        jsr suba2
.91ce	b0 e4		        bcs disgo
.91d0	4c 2f 8d	disexit jmp strt            ; back to mainloop
.91d3	4c 5e 8d	derror  jmp error
.91d6	a9 2e		dsout1  lda #"."            ; output ". " prefix to allow edit and reassemble
.91d8	20 d2 ff	        jsr chrout
.91db	20 a3 93	        jsr space
.91de	20 96 93	dislin  jsr showad          ; show the address of the instruction
.91e1	20 a3 93	        jsr space           ; insert a space
.91e4	a0 00		        ldy #0              ; no offset
.91e6	b1 c3		        lda (tmp2),y        ; load operand of current instruction
.91e8	20 5c 92	        jsr instxx          ; get mnemonic and addressing mode for opcode
.91eb	48		        pha                 ; save index into mnemonic table
.91ec	ae 01 01	        ldx length          ; get length of operand
.91ef	e8		        inx                 ; add 1 byte for opcode
.91f0	ca		dsbyt   dex                 ; decrement index
.91f1	10 0e		        bpl dshex           ; show hex for byte being disassembled
.91f3	8c 32 02	        sty savy            ; save index
.91f6	a0 30		        ldy #msg8-msgbas    ; skip 3 spaces
.91f8	20 52 96	        jsr sndmsg
.91fb	ac 32 02	        ldy savy            ; restore index
.91fe	4c 06 92	        jmp nxbyt
.9201	b1 c3		dshex   lda (tmp2),y        ; show hex for byte
.9203	20 a0 93	        jsr wrbyte
.9206	c8		nxbyt   iny                 ; next byte
.9207	c0 03		        cpy #3              ; have we output 3 bytes yet?
.9209	90 e5		        bcc dsbyt           ; if not, loop
.920b	68		        pla                 ; restore index into mnemonic table
.920c	a2 03		        ldx #3              ; 3 letters in mnemonic
.920e	20 a4 92	        jsr propxx          ; print mnemonic
.9211	a2 06		        ldx #6              ; 6 possible address mode character combos
.9213	e0 03		pradr1  cpx #3              ; have we checked the third combo yet?
.9215	d0 16		        bne pradr3          ; if so, output the leading characters
.9217	ac 01 01	        ldy length          ; get the length of the operand
.921a	f0 11		        beq pradr3          ; if it's zero, there's no operand to print
.921c	ad 00 01	pradr2  lda acmd            ; otherwise, get the addressing mode
.921f	c9 e8		        cmp #$e8            ; check for relative addressing
.9221	08		        php                 ; save result of check
.9222	b1 c3		        lda (tmp2),y        ; get the operand
.9224	28		        plp                 ; restore result of check
.9225	b0 1d		        bcs relad           ; handle a relative address
.9227	20 c4 93	        jsr wrtwo           ; output digits from address
.922a	88		        dey
.922b	d0 ef		        bne pradr2          ; repeat for next byte of operand, if there is one
.922d	0e 00 01	pradr3  asl acmd            ; check whether addr mode uses the current char
.9230	90 0e		        bcc pradr4          ; if not, skip it
.9232	bd 2f 97	        lda char1-1,x       ; look up the first char in the table
.9235	20 d2 ff	        jsr chrout          ; print first char
.9238	bd 35 97	        lda char2-1,x       ; look up the second char in the table
.923b	f0 03		        beq pradr4          ; if there's no second character, skip it
.923d	20 d2 ff	        jsr chrout          ; print second char
.9240	ca		pradr4  dex                 ; next potential address mode character
.9241	d0 d0		        bne pradr1          ; loop if we haven't checked them all yet
.9243	60		        rts                 ; back to caller
.9244	20 50 92	relad   jsr ub64d           ; calculate absolute address from relative
.9247	18		        clc
.9248	69 01		        adc #1              ; adjust address relative to next instruction
.924a	d0 01		        bne relend          ; don't increment high byte unless we overflowed
.924c	e8		        inx                 ; increment high byte
.924d	4c 9a 93	relend  jmp wraddr          ; print address
.9250	a6 c4		ub64d   ldx tmp2+1          ; get high byte of current address
.9252	a8		        tay                 ; is relative address positive or negative?
.9253	10 01		        bpl relc2           ; if positive, leave high byte alone
.9255	ca		        dex                 ; if negative, decrement high byte
.9256	65 c3		relc2   adc tmp2            ; add relative address to low byte
.9258	90 01		        bcc relc3           ; if there's no carry, we're done
.925a	e8		        inx                 ; if there's a carry, increment the high byte
.925b	60		relc3   rts
.925c	a8		instxx  tay                 ; stash opcode in accumulator in y for later
.925d	4a		        lsr a               ; is opcode even or odd?
.925e	90 0b		        bcc ieven
.9260	4a		        lsr a
.9261	b0 17		        bcs err             ; invalid opcodes xxxxxx11
.9263	c9 22		        cmp #$22
.9265	f0 13		        beq err             ; invalid opcode 10001001
.9267	29 07		        and #$07            ; mask bits to 10000xxx
.9269	09 80		        ora #$80
.926b	4a		ieven   lsr a               ; lsb determines whether to use left/right nybble
.926c	aa		        tax                 ; get format index using remaining high bytes
.926d	bd de 96	        lda mode,x
.9270	b0 04		        bcs rtmode          ; look at left or right nybble based on carry bit
.9272	4a		        lsr a               ; if carry = 0, use left nybble
.9273	4a		        lsr a
.9274	4a		        lsr a
.9275	4a		        lsr a
.9276	29 0f		rtmode  and #$0f            ; if carry = 1, use right nybble
.9278	d0 04		        bne getfmt
.927a	a0 80		err     ldy #$80            ; substitute 10000000 for invalid opcodes
.927c	a9 00		        lda #0
.927e	aa		getfmt  tax
.927f	bd 22 97	        lda mode2,x         ; lookup operand format using selected nybble
.9282	8d 00 01	        sta acmd            ; save for later use
.9285	29 03		        and #$03            ; lower 2 bits indicate number of bytes in operand
.9287	8d 01 01	        sta length
.928a	98		        tya                 ; restore original opcode
.928b	29 8f		        and #$8f            ; mask bits to x000xxxx
.928d	aa		        tax                 ; save it
.928e	98		        tya                 ; restore original opcode
.928f	a0 03		        ldy #3
.9291	e0 8a		        cpx #$8a            ; check if opcode = 1xxx1010
.9293	f0 0b		        beq gtfm4
.9295	4a		gtfm2   lsr a               ; transform opcode into index for mnemonic table
.9296	90 08		        bcc gtfm4
.9298	4a		        lsr a               ; opcodes transformed as follows:
.9299	4a		gtfm3   lsr a               ; 1xxx1010->00101xxx
.929a	09 20		        ora #$20            ; xxxyyy01->00111xxx
.929c	88		        dey                 ; xxxyyy10->00111xxx
.929d	d0 fa		        bne gtfm3           ; xxxyy100->00110xxx
.929f	c8		        iny                 ; xxxxx000->000xxxxx
.92a0	88		gtfm4   dey
.92a1	d0 f2		        bne gtfm2
.92a3	60		        rts
.92a4	a8		propxx  tay                 ; use index in accumulator to look up mnemonic
.92a5	b9 3c 97	        lda mneml,y         ;   and place a temporary copy in store
.92a8	8d 2f 02	        sta store
.92ab	b9 7c 97	        lda mnemr,y
.92ae	8d 30 02	        sta store+1
.92b1	a9 00		prmn1   lda #0              ; clear accumulator
.92b3	a0 05		        ldy #$05            ; shift 5 times
.92b5	0e 30 02	prmn2   asl store+1         ; shift right byte
.92b8	2e 2f 02	        rol store           ; rotate bits from right byte into left byte
.92bb	2a		        rol a               ; rotate bits from left byte into accumulator
.92bc	88		        dey                 ; next bit
.92bd	d0 f6		        bne prmn2           ; loop until all bits shifted
.92bf	69 3f		        adc #$3f            ; calculate ascii code for letter by adding to '?'
.92c1	20 d2 ff	        jsr chrout          ; output letter
.92c4	ca		        dex                 ; next letter
.92c5	d0 ea		        bne prmn1           ; loop until all 3 letters are output
.92c7	4c a3 93	        jmp space           ; output space
.92ca	ce 31 02	rdpar   dec chrpnt          ; back up one char
.92cd	20 f5 92	getpar  jsr rdval           ; read the value
.92d0	b0 17		        bcs gterr           ; carry set indicates error
.92d2	20 e9 93	        jsr gotchr          ; check previous character
.92d5	d0 0a		        bne ckterm          ; if it's not null, check if it's a valid separator
.92d7	ce 31 02	        dec chrpnt          ; back up one char
.92da	ad 08 01	        lda digcnt          ; get number of digits read
.92dd	d0 11		        bne getgot          ; found some digits
.92df	f0 0d		        beq gtnil           ; didn't find any digits
.92e1	c9 20		ckterm  cmp #$20            ; space or comma are valid separators
.92e3	f0 0b		        beq getgot          ; anything else is an error
.92e5	c9 2c		        cmp #","
.92e7	f0 07		        beq getgot
.92e9	68		gterr   pla                 ; encountered error
.92ea	68		        pla                 ; get rid of command vector pushed on stack
.92eb	4c 5e 8d	        jmp error           ; handle error
.92ee	38		gtnil   sec                 ; set carry to indicate no parameter found
>92ef	24		        .byte $24           ; bit zp opcode consumes next byte (clc)
.92f0	18		getgot  clc                 ; clear carry to indicate paremeter returned
.92f1	ad 08 01	        lda digcnt          ; return number of digits in a
.92f4	60		        rts                 ; return to address pushed from vector table
.92f5	a9 00		rdval   lda #0              ; clear temp
.92f7	85 c1		        sta tmp0
.92f9	85 c2		        sta tmp0+1
.92fb	8d 08 01	        sta digcnt          ; clear digit counter
.92fe	8a		        txa                 ; save x and y
.92ff	48		        pha
.9300	98		        tya
.9301	48		        pha
.9302	20 ec 93	rdvmor  jsr getchr          ; get next character from input buffer
.9305	f0 1e		        beq rdnilk          ; null at end of buffer
.9307	c9 20		        cmp #$20            ; skip spaces
.9309	f0 f7		        beq rdvmor
.930b	a2 03		        ldx #3              ; check numeric base [$+&%]
.930d	dd cf 97	gnmode  cmp hikey,x
.9310	f0 07		        beq gotmod          ; got a match, set up base
.9312	ca		        dex
.9313	10 f8		        bpl gnmode          ; check next base
.9315	e8		        inx                 ; default to hex
.9316	ce 31 02	        dec chrpnt          ; back up one character
.9319	bc f4 97	gotmod  ldy modtab,x        ; get base value
.931c	bd f8 97	        lda lentab,x        ; get bits per digit
.931f	8d 0a 01	        sta numbit          ; store bits per digit
.9322	20 ec 93	nudig   jsr getchr          ; get next char in a
.9325	f0 63		rdnilk  beq rdnil           ; end of number if no more characters
.9327	38		        sec
.9328	e9 30		        sbc #$30            ; subtract ascii value of 0 to get numeric value
.932a	90 5e		        bcc rdnil           ; end of number if character was less than 0
.932c	c9 0a		        cmp #$0a
.932e	90 06		        bcc digmor          ; not a hex digit if less than a
.9330	e9 07		        sbc #$07            ; 7 chars between ascii 9 and a, so subtract 7
.9332	c9 10		        cmp #$10            ; end of number if char is greater than f
.9334	b0 54		        bcs rdnil
.9336	8d 09 01	digmor  sta indig           ; store the digit
.9339	cc 09 01	        cpy indig           ; compare base with the digit
.933c	90 4a		        bcc rderr           ; error if the digit >= the base
.933e	f0 48		        beq rderr
.9340	ee 08 01	        inc digcnt          ; increment the number of digits
.9343	c0 0a		        cpy #10
.9345	d0 0a		        bne nodecm          ; skip the next part if not using base 10
.9347	a2 01		        ldx #1
.9349	b5 c1		declp1  lda tmp0,x          ; stash the previous 16-bit value for later use
.934b	9d 0b 01	        sta stash,x
.934e	ca		        dex
.934f	10 f8		        bpl declp1
.9351	ae 0a 01	nodecm  ldx numbit          ; number of bits to shift
.9354	06 c1		times2  asl tmp0            ; shift 16-bit value by specified number of bits
.9356	26 c2		        rol tmp0+1
.9358	b0 2e		        bcs rderr           ; error if we overflowed 16 bits
.935a	ca		        dex
.935b	d0 f7		        bne times2          ; shift remaining bits
.935d	c0 0a		        cpy #10
.935f	d0 18		        bne nodec2          ; skip the next part if not using base 10
.9361	0e 0b 01	        asl stash           ; shift the previous 16-bit value one bit left
.9364	2e 0c 01	        rol stash+1
.9367	b0 1f		        bcs rderr           ; error if we overflowed 16 bits
.9369	ad 0b 01	        lda stash           ; add shifted previous value to current value
.936c	65 c1		        adc tmp0
.936e	85 c1		        sta tmp0
.9370	ad 0c 01	        lda stash+1
.9373	65 c2		        adc tmp0+1
.9375	85 c2		        sta tmp0+1
.9377	b0 0f		        bcs rderr           ; error if we overflowed 16 bits
.9379	18		nodec2  clc
.937a	ad 09 01	        lda indig           ; load current digit
.937d	65 c1		        adc tmp0            ; add current digit to low byte
.937f	85 c1		        sta tmp0            ; and store result back in low byte
.9381	8a		        txa                 ; a=0
.9382	65 c2		        adc tmp0+1          ; add carry to high byte
.9384	85 c2		        sta tmp0+1          ; and store result back in high byte
.9386	90 9a		        bcc nudig           ; get next digit if we didn't overflow
.9388	38		rderr   sec                 ; set carry to indicate error
>9389	24		        .byte $24           ; bit zp opcode consumes next byte (clc)
.938a	18		rdnil   clc                 ; clear carry to indicate success
.938b	8c 0a 01	        sty numbit          ; save base of number
.938e	68		        pla                 ; restore x and y
.938f	a8		        tay
.9390	68		        pla
.9391	aa		        tax
.9392	ad 08 01	        lda digcnt          ; return number of digits in a
.9395	60		        rts
.9396	a5 c3		showad  lda tmp2
.9398	a6 c4		        ldx tmp2+1
.939a	48		wraddr  pha                 ; save low byte
.939b	8a		        txa                 ; put high byte in a
.939c	20 c4 93	        jsr wrtwo           ; output high byte
.939f	68		        pla                 ; restore low byte
.93a0	20 c4 93	wrbyte  jsr wrtwo           ; output byte in a
.93a3	a9 20		space   lda #$20            ; output space
.93a5	d0 0f		        bne flip
.93a7	c9 0d		chout   cmp #$0d            ; output char with special handling of cr
.93a9	d0 0b		        bne flip
.93ab	a9 0d		crlf    lda #$0d            ; load cr in a
.93ad	24 13		        bit $13             ; check default channel
.93af	10 05		        bpl flip            ; if high bit is clear output cr only
.93b1	20 d2 ff	        jsr chrout          ; otherwise output cr+lf
.93b4	a9 0a		        lda #$0a            ; output lf
.93b6	4c d2 ff	flip    jmp chrout
.93b9	20 ab 93	fresh   jsr crlf            ; output cr
.93bc	a9 20		        lda #$20            ; load space in a
.93be	20 d2 ff	        jsr chrout
.93c1	4c 42 96	        jmp snclr
.93c4	8e 05 01	wrtwo   stx savx            ; save x
.93c7	20 d4 93	        jsr asctwo          ; get hex chars for byte in x (lower) and a (upper)
.93ca	20 d2 ff	        jsr chrout          ; output upper nybble
.93cd	8a		        txa                 ; transfer lower to a
.93ce	ae 05 01	        ldx savx            ; restore x
.93d1	4c d2 ff	        jmp chrout          ; output lower nybble
.93d4	48		asctwo  pha                 ; save byte
.93d5	20 de 93	        jsr ascii           ; do low nybble
.93d8	aa		        tax                 ; save in x
.93d9	68		        pla                 ; restore byte
.93da	4a		        lsr a               ; shift upper nybble down
.93db	4a		        lsr a
.93dc	4a		        lsr a
.93dd	4a		        lsr a
.93de	29 0f		ascii   and #$0f            ; clear upper nibble
.93e0	c9 0a		        cmp #$0a            ; if less than a, skip next step
.93e2	90 02		        bcc asc1
.93e4	69 06		        adc #6              ; skip ascii chars between 9 and a
.93e6	69 30		asc1    adc #$30            ; add ascii char 0 to value
.93e8	60		        rts
.93e9	ce 31 02	gotchr  dec chrpnt
.93ec	8e 05 01	getchr  stx savx
.93ef	ae 31 02	        ldx chrpnt          ; get pointer to next char
.93f2	bd 00 02	        lda inbuff,x        ; load next char in a
.93f5	f0 06		        beq nochar          ; null, :, or ? signal end of buffer
.93f7	c9 3a		        cmp #":"
.93f9	f0 02		        beq nochar
.93fb	c9 3f		        cmp #"?"
.93fd	08		nochar  php
.93fe	ee 31 02	        inc chrpnt          ; next char
.9401	ae 05 01	        ldx savx
.9404	28		        plp                 ; z flag will signal last character
.9405	60		        rts
.9406	a5 c1		copy12  lda tmp0            ; low byte
.9408	85 c3		        sta tmp2
.940a	a5 c2		        lda tmp0+1          ; high byte
.940c	85 c4		        sta tmp2+1
.940e	60		        rts
.940f	38		sub12   sec
.9410	a5 c1		        lda tmp0            ; subtract low byte
.9412	e5 c3		        sbc tmp2
.9414	85 c1		        sta tmp0
.9416	a5 c2		        lda tmp0+1
.9418	e5 c4		        sbc tmp2+1          ; subtract high byte
.941a	85 c2		        sta tmp0+1
.941c	60		        rts
.941d	a9 01		suba1   lda #1              ; shortcut to decrement by 1
.941f	8d 05 01	suba2   sta savx            ; subtrahend in accumulator
.9422	38		        sec
.9423	a5 c1		        lda tmp0            ; minuend in low byte
.9425	ed 05 01	        sbc savx
.9428	85 c1		        sta tmp0
.942a	a5 c2		        lda tmp0+1          ; borrow from high byte
.942c	e9 00		        sbc #0
.942e	85 c2		        sta tmp0+1
.9430	60		        rts
.9431	38		sub13   sec
.9432	ad 2f 02	        lda store
.9435	e9 01		        sbc #1              ; decrement low byte
.9437	8d 2f 02	        sta store
.943a	ad 30 02	        lda store+1
.943d	e9 00		        sbc #0              ; borrow from high byte
.943f	8d 30 02	        sta store+1
.9442	60		        rts
.9443	a9 01		adda2   lda #1              ; shortcut to increment by 1
.9445	18		bumpad2 clc
.9446	65 c3		        adc tmp2            ; add value in accumulator to low byte
.9448	85 c3		        sta tmp2
.944a	90 02		        bcc bumpex
.944c	e6 c4		        inc tmp2+1          ; carry to high byte
.944e	60		bumpex  rts
.944f	38		sub21   sec
.9450	a5 c3		        lda tmp2            ; decrement low byte
.9452	e9 01		        sbc #1
.9454	85 c3		        sta tmp2
.9456	a5 c4		        lda tmp2+1          ; borrow from high byte
.9458	e9 00		        sbc #0
.945a	85 c4		        sta tmp2+1
.945c	60		        rts
.945d	b0 0a		copy1p  bcs cpy1px          ; do nothing if parameter is empty
.945f	a5 c1		        lda tmp0            ; copy low byte
.9461	a4 c2		        ldy tmp0+1          ; copy high byte
.9463	8d 29 02	        sta pcl
.9466	8c 28 02	        sty pch
.9469	60		cpy1px  rts
.946a	b0 23		getdif  bcs gdifx           ; exit with error if no parameter given
.946c	20 06 94	        jsr copy12          ; save start address in tmp2
.946f	20 cd 92	        jsr getpar          ; get end address in tmp0
.9472	b0 1b		        bcs gdifx           ; exit with error if no parameter given
.9474	a5 c1		        lda tmp0            ; save end address in stash
.9476	8d 0b 01	        sta stash
.9479	a5 c2		        lda tmp0+1
.947b	8d 0c 01	        sta stash+1
.947e	20 0f 94	        jsr sub12           ; subtract start address from end address
.9481	a5 c1		        lda tmp0
.9483	8d 2f 02	        sta store           ; save difference in store
.9486	a5 c2		        lda tmp0+1
.9488	8d 30 02	        sta store+1
.948b	90 02		        bcc gdifx           ; error if start address is after end address
.948d	18		        clc                 ; clear carry to indicate success
>948e	24		        .byte $24           ; bit zp opcode consumes next byte (sec)
.948f	38		gdifx   sec                 ; set carry to indicate error
.9490	60		        rts
.9491	20 ca 92	convrt  jsr rdpar           ; read a parameter
.9494	20 b9 93	        jsr fresh           ; next line and clear
.9497	a9 24		        lda #"$"            ; output $ sigil for hex
.9499	20 d2 ff	        jsr chrout
.949c	a5 c1		        lda tmp0            ; load the 16-bit value entered
.949e	a6 c2		        ldx tmp0+1
.94a0	20 9a 93	        jsr wraddr          ; print it in 4 hex digits
.94a3	20 b9 93	        jsr fresh
.94a6	a9 2b		        lda #"+"            ; output + sigil for decimal
.94a8	20 d2 ff	        jsr chrout
.94ab	20 dc 94	        jsr cvtdec          ; convert to bcd using hardware mode
.94ae	a9 00		        lda #0              ; clear digit counter
.94b0	a2 06		        ldx #6              ; max digits + 1
.94b2	a0 03		        ldy #3              ; bits per digit - 1
.94b4	20 16 95	        jsr nmprnt          ; print result without leading zeros
.94b7	20 b9 93	        jsr fresh           ; next line and clear
.94ba	a9 26		        lda #"&"            ; print & sigil for octal
.94bc	20 d2 ff	        jsr chrout
.94bf	a9 00		        lda #0              ; clear digit counter
.94c1	a2 08		        ldx #8              ; max digits + 1
.94c3	a0 02		        ldy #2              ; bits per digit - 1
.94c5	20 05 95	        jsr prinum          ; output number
.94c8	20 b9 93	        jsr fresh           ; next line and clear
.94cb	a9 25		        lda #"%"            ; print % sigil for binary
.94cd	20 d2 ff	        jsr chrout
.94d0	a9 00		        lda #0              ; clear digit counter
.94d2	a2 18		        ldx #$18            ; max digits + 1
.94d4	a0 00		        ldy #0              ; bits per digit - 1
.94d6	20 05 95	        jsr prinum          ; output number
.94d9	4c 2f 8d	        jmp strt            ; back to mainloop
.94dc	20 06 94	cvtdec  jsr copy12          ; copy value from tmp0 to tmp2
.94df	a9 00		        lda #0
.94e1	a2 02		        ldx #2              ; clear 3 bytes in work buffer
.94e3	9d 0d 01	decml1  sta u0aa0,x
.94e6	ca		        dex
.94e7	10 fa		        bpl decml1
.94e9	a0 10		        ldy #16             ; 16 bits in input
.94eb	08		        php                 ; save status register
.94ec	78		        sei                 ; make sure no interrupts occur with bcd enabled
.94ed	f8		        sed
.94ee	06 c3		decml2  asl tmp2            ; rotate bytes out of input low byte
.94f0	26 c4		        rol tmp2+1          ; .. into high byte and carry bit
.94f2	a2 02		        ldx #2              ; process 3 bytes
.94f4	bd 0d 01	decdbl  lda u0aa0,x         ; load current value of byte
.94f7	7d 0d 01	        adc u0aa0,x         ; add it to itself plus the carry bit
.94fa	9d 0d 01	        sta u0aa0,x         ; store it back in the same location
.94fd	ca		        dex                 ; decrement byte counter
.94fe	10 f4		        bpl decdbl          ; loop until all bytes processed
.9500	88		        dey                 ; decrement bit counter
.9501	d0 eb		        bne decml2          ; loop until all bits processed
.9503	28		        plp                 ; restore processor status
.9504	60		        rts
.9505	48		prinum  pha                 ; save accumulator
.9506	a5 c1		        lda tmp0            ; copy input low byte to work buffer
.9508	8d 0f 01	        sta u0aa0+2
.950b	a5 c2		        lda tmp0+1          ; copy input high byte to work buffer
.950d	8d 0e 01	        sta u0aa0+1
.9510	a9 00		        lda #0              ; clear overflow byte in work buffer
.9512	8d 0d 01	        sta u0aa0
.9515	68		        pla                 ; restore accumulator
.9516	8d 08 01	nmprnt  sta digcnt          ; number of digits in accumulator
.9519	8c 0a 01	        sty numbit          ; bits per digit passed in y register
.951c	ac 0a 01	digout  ldy numbit          ; get bits to process
.951f	a9 00		        lda #0              ; clear accumulator
.9521	0e 0f 01	rolbit  asl u0aa0+2         ; shift bits out of low byte
.9524	2e 0e 01	        rol u0aa0+1         ; ... into high byte
.9527	2e 0d 01	        rol u0aa0           ; ... into overflow byte
.952a	2a		        rol a               ; ... into accumulator
.952b	88		        dey                 ; decrement bit counter
.952c	10 f3		        bpl rolbit          ; loop until all bits processed
.952e	a8		        tay                 ; check whether accumulator is 0
.952f	d0 09		        bne nzero           ; if not, print it
.9531	e0 01		        cpx #1              ; have we output the max number of digits?
.9533	f0 05		        beq nzero           ; if not, print it
.9535	ac 08 01	        ldy digcnt          ; how many digits have we output?
.9538	f0 08		        beq zersup          ; skip output if digit is 0
.953a	ee 08 01	nzero   inc digcnt          ; increment digit counter
.953d	09 30		        ora #$30            ; add numeric value to ascii '0' to get ascii char
.953f	20 d2 ff	        jsr chrout          ; output character
.9542	ca		zersup  dex                 ; decrement number of leading zeros
.9543	d0 d7		        bne digout          ; next digit
.9545	60		        rts
.9546	d0 03		dstat   bne chgdev          ; if device address was given, use it
.9548	a2 08		        ldx #8              ; otherwise, default to 8
>954a	2c		        .byte $2c           ; absolute bit opcode consumes next word (ldx tmp0)
.954b	a6 c1		chgdev  ldx tmp0            ; load device address from parameter
.954d	e0 04		        cpx #4              ; make sure device address is in range 4-31
.954f	90 58		        bcc ioerr
.9551	e0 20		        cpx #32
.9553	b0 54		        bcs ioerr
.9555	86 c1		        stx tmp0
.9557	a9 00		        lda #0              ; clear status
.9559	85 90		        sta satus
.955b	85 b7		        sta fnlen           ; empty filename
.955d	20 ec 93	        jsr getchr          ; get next character
.9560	f0 24		        beq instat1         ; null, display status
.9562	ce 31 02	        dec chrpnt          ; back up 1 char
.9565	c9 24		        cmp #"$"            ; $, display directory
.9567	f0 43		        beq direct
.9569	a5 c1		        lda tmp0            ; command specified device to listen
.956b	20 b1 ff	        jsr listen
.956e	a9 6f		        lda #$6f            ; secondary address 15 (only low nybble used)
.9570	20 93 ff	        jsr second
.9573	ae 31 02	dcomd   ldx chrpnt          ; get next character from buffer
.9576	ee 31 02	        inc chrpnt
.9579	bd 00 02	        lda inbuff,x
.957c	f0 05		        beq instat          ; break out of loop if it's null
.957e	20 a8 ff	        jsr ciout           ; otherwise output it to the serial bus
.9581	90 f0		        bcc dcomd           ; unconditional loop: ciout clears carry before rts
.9583	20 ae ff	instat  jsr unlsn           ; command device to unlisten
.9586	20 ab 93	instat1 jsr crlf            ; new line
.9589	a5 c1		        lda tmp0            ; load device address
.958b	20 b4 ff	        jsr talk            ; command device to talk
.958e	a9 6f		        lda #$6f            ; secondary address 15 (only low nybble used)
.9590	20 96 ff	        jsr tksa
.9593	20 a5 ff	rdstat  jsr acptr           ; read byte from serial bus
.9596	20 d2 ff	        jsr chrout          ; print it
.9599	c9 0d		        cmp #$0d            ; if the byte is cr, exit loop
.959b	f0 06		        beq dexit
.959d	a5 90		        lda satus           ; check status
.959f	29 bf		        and #$bf            ; ignore eoi bit
.95a1	f0 f0		        beq rdstat          ; if no errors, read next byte
.95a3	20 ab ff	dexit   jsr untlk           ; command device to stop talking
.95a6	4c 2f 8d	        jmp strt            ; back to mainloop
.95a9	4c 5e 8d	ioerr   jmp error           ; handle error
.95ac	a5 c1		direct  lda tmp0            ; load device address
.95ae	20 b1 ff	        jsr listen          ; command device to listen
.95b1	a9 f0		        lda #$f0            ; secondary address 0 (only low nybble used)
.95b3	20 93 ff	        jsr second
.95b6	ae 31 02	        ldx chrpnt          ; get index of next character
.95b9	bd 00 02	dir2    lda inbuff,x        ; get next character from buffer
.95bc	f0 06		        beq dir3            ; break if it's null
.95be	20 a8 ff	        jsr ciout           ; send character to device
.95c1	e8		        inx                 ; increment characer index
.95c2	d0 f5		        bne dir2            ; loop if it hasn't wrapped to zero
.95c4	20 ae ff	dir3    jsr unlsn           ; command device to unlisten
.95c7	20 ab 93	        jsr crlf            ; new line
.95ca	a5 c1		        lda tmp0            ; load device address
.95cc	48		        pha                 ; save on stack
.95cd	20 b4 ff	        jsr talk            ; command device to talk
.95d0	a9 60		        lda #$60            ; secondary address 0 (only low nybble used)
.95d2	20 96 ff	        jsr tksa
.95d5	a0 03		        ldy #3              ; read 3 16-bit values from device
.95d7	8c 2f 02	dirlin  sty store           ;   ignore the first 2; 3rd is file size
.95da	20 a5 ff	dlink   jsr acptr           ; read low byte from device
.95dd	85 c1		        sta tmp0            ; store it
.95df	a5 90		        lda satus           ; check status
.95e1	d0 44		        bne drexit          ; exit if error or eof occurred
.95e3	20 a5 ff	        jsr acptr           ; read high byte from device
.95e6	85 c2		        sta tmp0+1          ; store it
.95e8	a5 90		        lda satus           ; check status
.95ea	d0 3b		        bne drexit          ; exit if error or eof cocurred
.95ec	ce 2f 02	        dec store           ; decrement byte count
.95ef	d0 e9		        bne dlink           ; loop if bytes remain
.95f1	20 dc 94	        jsr cvtdec          ; convert last 16-bit value to decimal
.95f4	a9 00		        lda #0              ; clear digit count
.95f6	a2 06		        ldx #6              ; max 6 digits
.95f8	a0 03		        ldy #3              ; 3 bits per digit
.95fa	20 16 95	        jsr nmprnt          ; output number
.95fd	a9 20		        lda #" "            ; output space
.95ff	20 d2 ff	        jsr chrout
.9602	20 a5 ff	dname   jsr acptr           ; get a filename character from the device
.9605	f0 0a		        beq dmore           ; if it's null, break out of loop
.9607	a6 90		        ldx satus           ; check for errors or eof
.9609	d0 1c		        bne drexit          ; if found exit early
.960b	20 d2 ff	        jsr chrout          ; output character
.960e	18		        clc
.960f	90 f1		        bcc dname           ; unconditional branch to read next char
.9611	20 ab 93	dmore   jsr crlf
.9614	20 e1 ff	        jsr stop            ; check for stop key
.9617	f0 0e		        beq drexit          ; exit early if pressed
.9619	20 e4 ff	        jsr getin           ; pause if a key was pressed
.961c	f0 05		        beq nopaws
.961e	20 e4 ff	paws    jsr getin           ; wait until another key is pressed
.9621	f0 fb		        beq paws
.9623	a0 02		nopaws  ldy #2
.9625	d0 b0		        bne dirlin          ; unconditional branch to read next file
.9627	20 ab ff	drexit  jsr untlk           ; command device to untalk
.962a	68		        pla                 ; restore accumulator
.962b	20 b1 ff	        jsr listen          ; command device to listen
.962e	a9 e0		        lda #$e0            ; secondary address 0 (only low nybble is used)
.9630	20 93 ff	        jsr second
.9633	20 ae ff	        jsr unlsn           ; command device to unlisten
.9636	4c 2f 8d	        jmp strt            ; back to mainloop
.9639	20 ab 93	cline   jsr crlf            ; send cr+lf
.963c	4c 42 96	        jmp snclr           ; clear line
.963f	20 52 96	sndclr  jsr sndmsg
.9642	a0 28		snclr   ldy #$28            ; loop 40 times
.9644	a9 20		snclp   lda #$20            ; output space character
.9646	20 d2 ff	        jsr chrout
.9649	a9 14		        lda #$14            ; output delete character
.964b	20 d2 ff	        jsr chrout
.964e	88		        dey
.964f	d0 f3		        bne snclp
.9651	60		        rts
.9652	b9 60 96	sndmsg  lda msgbas,y        ; y contains offset in msg table
.9655	08		        php
.9656	29 7f		        and #$7f            ; strip high bit before output
.9658	20 a7 93	        jsr chout
.965b	c8		        iny
.965c	28		        plp
.965d	10 f3		        bpl sndmsg          ; loop until high bit is set
.965f	60		        rts
=38496			msgbas  =*
>9660	0d		msg2    .byte $0d               ; header for registers
>9661	20 20 20 50	        .text "   pc  sr ac xr yr sp   v1.2"
>9665	43 20 20 53 52 20 41 43 20 58 52 20 59 52 20 53
>9675	50 20 20 20 56 31 2e 32
>967d	8d		        .byte $0d+$80
>967e	1d bf		msg3    .byte $1d,$3f+$80       ; syntax error: move right, display "?"
>9680	2e 2e 53 59	msg4    .text "..sys"           ; sys call to enter monitor
>9684	53
>9685	a0		        .byte $20+$80
>9686	3a 92		msg5    .byte $3a,$12+$80       ; ":" then rvs on for memory ascii dump
>9688	20 45 52 52	msg6    .text " erro"           ; i/o error: display " error"
>968c	4f
>968d	d2		        .byte "r"+$80
>968e	41 a0		msg7    .byte $41,$20+$80       ; assemble next instruction: "a " + addr
>9690	20 20		msg8    .text "  "              ; pad non-existent byte: skip 3 spaces
>9692	a0		        .byte $20+$80
>9693	20 20 20 20	msg9    .text "      < < < < < supermon > > > > >"
>9697	20 20 3c 20 3c 20 3c 20 3c 20 3c 20 53 55 50 45
>96a7	52 4d 4f 4e 20 3e 20 3e 20 3e 20 3e 20 3e
>96b5	8d		        .byte $0d+$80
>96b6	20 42 59 20	msga    .text " by jim butterfield  (r.i.p. 1936-2007)"
>96ba	4a 49 4d 20 42 55 54 54 45 52 46 49 45 4c 44 20
>96ca	20 28 52 2e 49 2e 50 2e 20 31 39 33 36 2d 32 30
>96da	30 37 29
>96dd	8d		        .byte $0d+$80
>96de	40 02 45 03	mode    .byte $40,$02,$45,$03   ; even opcodes
>96e2	d0 08 40 09	        .byte $d0,$08,$40,$09
>96e6	30 22 45 33	        .byte $30,$22,$45,$33
>96ea	d0 08 40 09	        .byte $d0,$08,$40,$09
>96ee	40 02 45 33	        .byte $40,$02,$45,$33
>96f2	d0 08 40 09	        .byte $d0,$08,$40,$09
>96f6	40 02 45 b3	        .byte $40,$02,$45,$b3
>96fa	d0 08 40 09	        .byte $d0,$08,$40,$09
>96fe	00 22 44 33	        .byte $00,$22,$44,$33
>9702	d0 8c 44 00	        .byte $d0,$8c,$44,$00
>9706	11 22 44 33	        .byte $11,$22,$44,$33
>970a	d0 8c 44 9a	        .byte $d0,$8c,$44,$9a
>970e	10 22 44 33	        .byte $10,$22,$44,$33
>9712	d0 08 40 09	        .byte $d0,$08,$40,$09
>9716	10 22 44 33	        .byte $10,$22,$44,$33
>971a	d0 08 40 09	        .byte $d0,$08,$40,$09
>971e	62 13 78 a9	        .byte $62,$13,$78,$a9   ; opcodes ending in 01
>9722	00		mode2   .byte $00   ; 000 000    00                  0   error
>9723	21		        .byte $21   ; 001 000    01      #$00        1   immediate
>9724	81		        .byte $81   ; 100 000    01      $00         2   zero-page
>9725	82		        .byte $82   ; 100 000    10      $0000       3   absolute
>9726	00		        .byte $00   ; 000 000    00                  4   implied
>9727	00		        .byte $00   ; 000 000    00                  5   accumulator
>9728	59		        .byte $59   ; 010 110    01      ($00,x)     6   indirect,x
>9729	4d		        .byte $4d   ; 010 011    01      ($00),y     7   indirect,y
>972a	91		        .byte $91   ; 100 100    01      $00,x       8   zero-page,x
>972b	92		        .byte $92   ; 100 100    10      $0000,x     9   absolute,x
>972c	86		        .byte $86   ; 100 001    10      $0000,y     a   absolute,y
>972d	4a		        .byte $4a   ; 010 010    10      ($0000)     b   indirect
>972e	85		        .byte $85   ; 100 001    01      $00,y       c   zero-page,y
>972f	9d		        .byte $9d   ; 100 111    01      $0000*      d   relative
>9730	2c 29 2c	char1   .byte $2c,$29,$2c       ; ","  ")"  ","
>9733	23 28 24	        .byte $23,$28,$24       ; "#"  "("  "$"
>9736	59 00 58	char2   .byte $59,$00,$58       ; "y"   0   "x"
>9739	24 24 00	        .byte $24,$24,$00       ; "$"  "$"   0
>973c	1c 8a 1c 23	mneml   .byte $1c,$8a,$1c,$23   ; brk php bpl clc
>9740	5d 8b 1b a1	        .byte $5d,$8b,$1b,$a1   ; jsr plp bmi sec
>9744	9d 8a 1d 23	        .byte $9d,$8a,$1d,$23   ; rti pha bvc cli
>9748	9d 8b 1d a1	        .byte $9d,$8b,$1d,$a1   ; rts pla bvs sei
>974c	00 29 19 ae	        .byte $00,$29,$19,$ae   ; ??? dey bcc tya
>9750	69 a8 19 23	        .byte $69,$a8,$19,$23   ; ldy tay bcs clv
>9754	24 53 1b 23	        .byte $24,$53,$1b,$23   ; cpy iny bne cld
>9758	24 53 19 a1	        .byte $24,$53,$19,$a1   ; cpx inx beq sed
>975c	00 1a 5b 5b	        .byte $00,$1a,$5b,$5b   ; ??? bit jmp jmp
>9760	a5 69 24 24	        .byte $a5,$69,$24,$24   ; sty ldy cpy cpx
>9764	ae ae a8 ad	        .byte $ae,$ae,$a8,$ad   ; txa txs tax tsx
>9768	29 00 7c 00	        .byte $29,$00,$7c,$00   ; dex ??? nop ???
>976c	15 9c 6d 9c	        .byte $15,$9c,$6d,$9c   ; asl rol lsr ror
>9770	a5 69 29 53	        .byte $a5,$69,$29,$53   ; stx ldx dec inc
>9774	84 13 34 11	        .byte $84,$13,$34,$11   ; ora and eor adc
>9778	a5 69 23 a0	        .byte $a5,$69,$23,$a0   ; sta lda cmp sbc
>977c	d8 62 5a 48	mnemr   .byte $d8,$62,$5a,$48   ; brk php bpl clc
>9780	26 62 94 88	        .byte $26,$62,$94,$88   ; jsr plp bmi sec
>9784	54 44 c8 54	        .byte $54,$44,$c8,$54   ; rti pha bvc cli
>9788	68 44 e8 94	        .byte $68,$44,$e8,$94   ; rts pla bvs sei
>978c	00 b4 08 84	        .byte $00,$b4,$08,$84   ; ??? dey bcc tya
>9790	74 b4 28 6e	        .byte $74,$b4,$28,$6e   ; ldy tay bcs clv
>9794	74 f4 cc 4a	        .byte $74,$f4,$cc,$4a   ; cpy iny bne cld
>9798	72 f2 a4 8a	        .byte $72,$f2,$a4,$8a   ; cpx inx beq sed
>979c	00 aa a2 a2	        .byte $00,$aa,$a2,$a2   ; ??? bit jmp jmp
>97a0	74 74 74 72	        .byte $74,$74,$74,$72   ; sty ldy cpy cpx
>97a4	44 68 b2 32	        .byte $44,$68,$b2,$32   ; txa txs tax tsx
>97a8	b2 00 22 00	        .byte $b2,$00,$22,$00   ; dex ??? nop ???
>97ac	1a 1a 26 26	        .byte $1a,$1a,$26,$26   ; asl rol lsr ror
>97b0	72 72 88 c8	        .byte $72,$72,$88,$c8   ; stx ldx dec inc
>97b4	c4 ca 26 48	        .byte $c4,$ca,$26,$48   ; ora and eor adc
>97b8	44 44 a2 c8	        .byte $44,$44,$a2,$c8   ; sta lda cmp sbc
>97bc	0d 20 20 20	        .byte $0d,$20,$20,$20
>97c0	41 43 44 46	keyw    .text "acdfghjmrtx@.>;"
>97c4	47 48 4a 4d 52 54 58 40 2e 3e 3b
>97cf	24 2b 26 25	hikey   .text "$+&%lsv"
>97d3	4c 53 56
=38870			keytop  =*
>97d6	11 90 69 8e	kaddr   .word assem-1,compar-1,disass-1,fill-1
>97da	9e 91 ec 8f
>97de	f4 8d ed 8e	        .word goto-1,hunt-1,jsub-1,dsplym-1
>97e2	12 8e 87 8d
>97e6	0c 8d 6c 8e	        .word dsplyr-1,trans-1,exit-1,dstat-1
>97ea	84 8d 45 95
>97ee	11 90 d4 8d	        .word assem-1,altm-1,altr-1
>97f2	bd 8d
>97f4	10 0a 08 02	modtab  .byte $10,$0a,$08,02    ; modulo number systems
>97f8	04 03 03 01	lentab  .byte $04,$03,$03,$01   ; bits per digit
>97fc	fe 8c		linkad  .word break             ; address of brk handler
>97fe	a0 8c		supad   .word super             ; address of entry point

;******  End of listing

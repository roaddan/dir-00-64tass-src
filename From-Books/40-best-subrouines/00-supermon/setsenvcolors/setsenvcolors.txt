
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L setsenvcolors.txt -o setsenvcolors.prg setsenvcolors.asm
; Tue May 16 08:09:27 2023

;Offset	;Hex		;Source

;******  Processing input file: setsenvcolors.asm

="20230516-080814"	            Version = "20230516-080814"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: setsenvcolors.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: setsenvcolors.asm

.080d			main
.080d	20 11 0a	            jsr scrmaninit
.0810	20 19 08	            jsr setsenvcolors
.0813	20 37 08	            jsr help
.0816	4c 74 a4	            jmp b_warmstart
.0819			setsenvcolors
.0819	08		            php
.081a	48		            pha
.081b	a9 06		            lda #cbleu
.081d	8d 21 d0	            sta vicbackcol
.0820	a9 03		            lda #ccyan
.0822	8d 20 d0	            sta vicbordcol
.0825	a9 01		            lda #cblanc
.0827	8d 86 02	            sta bascol
.082a	a9 93		            lda #147
.082c	20 d2 ff	            jsr chrout
.082f	a9 13		            lda #19
.0831	20 d2 ff	            jsr chrout
.0834	68		            pla
.0835	28		            plp
.0836	60		            rts
.0837			help
.0837	20 32 0a	                jsr cls
.083a	a2 bf		                ldx  #<line
.083c	a0 09		                ldy  #>line
.083e	20 47 0a	                jsr  puts
.0841	a2 65		                ldx  #<headera
.0843	a0 08		                ldy  #>headera
.0845	20 47 0a	                jsr  puts
.0848	a2 e7		                ldx  #<headerb
.084a	a0 08		                ldy  #>headerb
.084c	20 47 0a	                jsr  puts
.084f	a2 6b		                ldx  #<shortcuts
.0851	a0 09		                ldy  #>shortcuts
.0853	20 47 0a	                jsr  puts
.0856	a2 e8		                ldx  #<helptext
.0858	a0 09		                ldy  #>helptext
.085a	20 47 0a	                jsr  puts
.085d	a2 bf		                ldx  #<line
.085f	a0 09		                ldy  #>line
.0861	20 47 0a	                jsr  puts
.0864	60		                rts
.0865			headera
>0865	20 20 20 20	                .text          "     40 BEST MACHINE CODE ROUTINES"
>0869	20 34 30 20 c2 c5 d3 d4 20 cd c1 c3 c8 c9 ce c5
>0879	20 c3 cf c4 c5 20 d2 cf d5 d4 c9 ce c5 d3
>0887	0d		          .byte   $0d
>0888	20 20 20 20	                .text          "          FOR THE COMMODORE 64"
>088c	20 20 20 20 20 20 c6 cf d2 20 d4 c8 c5 20 c3 cf
>089c	cd cd cf c4 cf d2 c5 20 36 34
>08a6	0d		          .byte   $0d
>08a7	20 20 20 20	                .text          "       Book by Mark Greenshields."
>08ab	20 20 20 c2 4f 4f 4b 20 42 59 20 cd 41 52 4b 20
>08bb	c7 52 45 45 4e 53 48 49 45 4c 44 53 2e
>08c8	0d		          .byte   $0d
>08c9	20 20 20 20	                .text          "          ISBN 0-7156-1899-7"
>08cd	20 20 20 20 20 20 c9 d3 c2 ce 20 30 2d 37 31 35
>08dd	36 2d 31 38 39 39 2d 37
>08e5	0d 00		          .byte   $0d,0
>08e7	20 20 20 20	headerb         .text          "         setsenvcolors (p79)"
>08eb	20 20 20 20 20 53 45 54 53 45 4e 56 43 4f 4c 4f
>08fb	52 53 20 28 50 37 39 29
>0903	0d		          .byte   $0d
>0904	20 20 20 20	                .text          "        (c) 1979 Brad Templeton"
>0908	20 20 20 20 28 43 29 20 31 39 37 39 20 c2 52 41
>0918	44 20 d4 45 4d 50 4c 45 54 4f 4e
>0923	0d		          .byte   $0d
>0924	20 20 20 20	                .text          "     programmed by Daniel Lafrance."
>0928	20 50 52 4f 47 52 41 4d 4d 45 44 20 42 59 20 c4
>0938	41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e
>0947	0d		          .byte   $0d
>0948	20 20 20 20	                .text   format("        Version: %s.",Version)
>094c	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>095c	33 30 35 31 36 2d 30 38 30 38 31 34 2e
>0969	0d 00		          .byte   $0d,0
>096b	20 2d 2d 2d	shortcuts .text          " -------- S H O R T - C U T S ---------"
>096f	2d 2d 2d 2d 2d 20 d3 20 c8 20 cf 20 d2 20 d4 20
>097f	2d 20 c3 20 d5 20 d4 20 d3 20 2d 2d 2d 2d 2d 2d
>098f	2d 2d 2d
>0992	0d		          .byte   $0d
>0993	20 52 55 4e	          .text   format(" run=SYS%5d, help=SYS%5d",main, help)
>0997	3d d3 d9 d3 20 32 30 36 31 2c 20 48 45 4c 50 3d
>09a7	d3 d9 d3 20 32 31 30 33
>09af	0d		          .byte   $0d
>09b0	20 43 4c 53	          .text   format(" cls=SYS%5d",cls)
>09b4	3d d3 d9 d3 20 32 36 31 30
>09bd	0d 00		          .byte   $0d,0
>09bf	20 2d 2d 2d	line      .text          " --------------------------------------"
>09c3	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09d3	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09e3	2d 2d 2d
>09e6	0d 00		          .byte   $0d,0
>09e8	20 53 45 54	helptext  .text   format(" setsenvcolors: SYS%5d",setsenvcolors)
>09ec	53 45 4e 56 43 4f 4c 4f 52 53 3a 20 d3 d9 d3 20
>09fc	32 30 37 33
>0a00	0d		          .byte   $0d
>0a01	20 45 58 2e	          .text   format(" ex.: SYS%5d",setsenvcolors)
>0a05	3a 20 d3 d9 d3 20 32 30 37 33
>0a0f	0d 00		          .byte   $0d,0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ; 97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.0a11			libtart

;******  Return to file: setsenvcolors.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: setsenvcolors.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-sid.asm

=$d400			sidv1flow   =   $d400 ; 54272 - Voice 1 Low freq register low byte.
=$d401			sidv1fhigh  =   $d401 ; 54273 - Voice 1 High freq register high byte.
=$d402			sidv1pwlow 	=   $d402 ; 54274 - Voice 1 Pulse waveform width register low byte.
=$d403			sidv1pwhigh =   $d403 ; 54275 - Voice 1 Pulse waveform width register high byte.
=$d404			sidv1control=   $d404 ; 54276 - Voice 1 Voice control register.
=$d405			sidv1atkdec =	$d405 ; 54277 - 0-3: Voice 1 Decay duration, 4-7: Attack duration.
=$d406			sidv1stnrel =   $d406 ; 54278 - 0-3: Voice 1 Rel. duration, 4-7: Sustain duration.
=$d407			sidv2flow   =   $d407 ; 54279 - Voice 2 Low freq register low byte.
=$d408			sidv2fhigh  =   $d408 ; 54280 - Voice 2 High freq register high byte.
=$d409			sidv2pwlow 	=   $d409 ; 54281 - Voice 2 Pulse waveform width register low byte.
=$d40a			sidv2pwhigh	=   $d40a ; 54282 - Voice 2 Pulse waveform width register high byte.
=$d40b			sidv2control=   $d40b ; 54283 - Voice 2 Voice control register.
=$d40c			sidv2atkdec =   $d40c ; 54284 - Voice 2 0-3: Decay duration, 4-7: Attack duration.
=$d40d			sidv2stnrel =   $d40d ; 54285 - Voice 2 0-3: Rel. duration, 4-7: Sustain duration.
=$d40e			sidv3flow   =   $d40e ; 54286 - Voice 3 Low freq register low byte.
=$d40f			sidv3fhigh  =   $d40f ; 54287 - Voice 3 High freq register high byte.
=$d410			sidv3pwlow 	=   $d410 ; 54288 - Voice 3 Pulse waveform width register low byte.
=$d411			sidv3pwhigh =   $d411 ; 54289 - Voice 3 Pulse waveform width register high byte.
=$d412			sidv3control=   $d412 ; 54290 - Voice 3 Poice control register.
=$d413			sidv3atkdec =   $d413 ; 54291 - Voice 3 0-3: Decay duration, 4-7: Attack duration.
=$d414			sidv3stnrel =   $d414 ; 54292 - Voice 3 0-3: Rel. duration, 4-7: Sustain duration.
=$d415			sidcutlo    =   $d415 ; 54293 - Bits 0-2 = low portion of filter cutoff frequency.
=$d416			sidcuthi    =   $d416 ; 54294 - Filter cutoff frequency (high byte).
=$d417			sidreson    =   $d417 ; 54295 - Filter resonnance control register.
=$d418			sidsigvol  =    $d418 ; 54296 - Volume and Filter selectv register.
=$d419			sidpotx    =    $d419 ; 54297 - Read game paddle 1 (or 3) X position.
=$d41a			sidpoty    =    $d41a ; 54298 - Read game paddle 1 (or 3) Y position.
=$d41b			sidrandom  =    $d41b ; 54299 - Read oscillator/Random number generator.
=$d41c			sidenv3    =    $d41c ; 54300 - Envelope Generator 3 output.

;******  Return to file: setsenvcolors.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: setsenvcolors.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-sid-notes-ntsc.asm

=$0000			silence     = $0000 ; Silence (no frequency)
=$010c			do0   = $010C ;   16,35Hz NTSC (hex): hi: $01, lo: $0C ; (dec): lo: 12, Hi:  1
=$011c			dod0  = $011C ;   17,33Hz NTSC (hex): hi: $01, lo: $1C ; (dec): lo: 28, Hi:  1
=$012d			re0   = $012D ;   18,35Hz NTSC (hex): hi: $01, lo: $2D ; (dec): lo: 45, Hi:  1
=$013f			red0  = $013F ;   19,45Hz NTSC (hex): hi: $01, lo: $3F ; (dec): lo: 63, Hi:  1
=$0152			mi0   = $0152 ;   20,60Hz NTSC (hex): hi: $01, lo: $52 ; (dec): lo: 82, Hi:  1
=$0166			fa0   = $0166 ;   21,83Hz NTSC (hex): hi: $01, lo: $66 ; (dec): lo:102, Hi:  1
=$017b			fad0  = $017B ;   23,13Hz NTSC (hex): hi: $01, lo: $7B ; (dec): lo:123, Hi:  1
=$0192			sol0  = $0192 ;   24,50Hz NTSC (hex): hi: $01, lo: $92 ; (dec): lo:146, Hi:  1
=$01aa			sold0 = $01AA ;   25,96Hz NTSC (hex): hi: $01, lo: $AA ; (dec): lo:170, Hi:  1
=$01c3			la0   = $01C3 ;   27,50Hz NTSC (hex): hi: $01, lo: $C3 ; (dec): lo:195, Hi:  1
=$01de			lad0  = $01DE ;   29,14Hz NTSC (hex): hi: $01, lo: $DE ; (dec): lo:222, Hi:  1
=$01fa			si0   = $01FA ;   30,87Hz NTSC (hex): hi: $01, lo: $FA ; (dec): lo:250, Hi:  1
=$0219			do1   = $0219 ;   32,71Hz NTSC (hex): hi: $02, lo: $19 ; (dec): lo: 25, Hi:  2
=$0238			dod1  = $0238 ;   34,65Hz NTSC (hex): hi: $02, lo: $38 ; (dec): lo: 56, Hi:  2
=$025a			re1   = $025A ;   36,71Hz NTSC (hex): hi: $02, lo: $5A ; (dec): lo: 90, Hi:  2
=$027e			red1  = $027E ;   38,89Hz NTSC (hex): hi: $02, lo: $7E ; (dec): lo:126, Hi:  2
=$02a4			mi1   = $02A4 ;   41,21Hz NTSC (hex): hi: $02, lo: $A4 ; (dec): lo:164, Hi:  2
=$02cc			fa1   = $02CC ;   43,66Hz NTSC (hex): hi: $02, lo: $CC ; (dec): lo:204, Hi:  2
=$02f7			fad1  = $02F7 ;   46,25Hz NTSC (hex): hi: $02, lo: $F7 ; (dec): lo:247, Hi:  2
=$0324			sol1  = $0324 ;   49,00Hz NTSC (hex): hi: $03, lo: $24 ; (dec): lo: 36, Hi:  3
=$0354			sold1 = $0354 ;   51,91Hz NTSC (hex): hi: $03, lo: $54 ; (dec): lo: 84, Hi:  3
=$0386			la1   = $0386 ;   55,00Hz NTSC (hex): hi: $03, lo: $86 ; (dec): lo:134, Hi:  3
=$03bc			lad1  = $03BC ;   58,28Hz NTSC (hex): hi: $03, lo: $BC ; (dec): lo:188, Hi:  3
=$03f5			si1   = $03F5 ;   61,74Hz NTSC (hex): hi: $03, lo: $F5 ; (dec): lo:245, Hi:  3
=$0431			do2   = $0431 ;   65,41Hz NTSC (hex): hi: $04, lo: $31 ; (dec): lo: 49, Hi:  4
=$0471			dod2  = $0471 ;   69,30Hz NTSC (hex): hi: $04, lo: $71 ; (dec): lo:113, Hi:  4
=$04b4			re2   = $04B4 ;   73,41Hz NTSC (hex): hi: $04, lo: $B4 ; (dec): lo:180, Hi:  4
=$04fc			red2  = $04FC ;   77,79Hz NTSC (hex): hi: $04, lo: $FC ; (dec): lo:252, Hi:  4
=$0548			mi2   = $0548 ;   82,41Hz NTSC (hex): hi: $05, lo: $48 ; (dec): lo: 72, Hi:  5
=$0598			fa2   = $0598 ;   87,31Hz NTSC (hex): hi: $05, lo: $98 ; (dec): lo:152, Hi:  5
=$05ed			fad2  = $05ED ;   92,50Hz NTSC (hex): hi: $05, lo: $ED ; (dec): lo:237, Hi:  5
=$0648			sol2  = $0648 ;   98,00Hz NTSC (hex): hi: $06, lo: $48 ; (dec): lo: 72, Hi:  6
=$06a7			sold2 = $06A7 ;  103,83Hz NTSC (hex): hi: $06, lo: $A7 ; (dec): lo:167, Hi:  6
=$070c			la2   = $070C ;  110,00Hz NTSC (hex): hi: $07, lo: $0C ; (dec): lo: 12, Hi:  7
=$0778			lad2  = $0778 ;  116,55Hz NTSC (hex): hi: $07, lo: $78 ; (dec): lo:120, Hi:  7
=$07ea			si2   = $07EA ;  123,48Hz NTSC (hex): hi: $07, lo: $EA ; (dec): lo:234, Hi:  7
=$0862			do3   = $0862 ;  130,83Hz NTSC (hex): hi: $08, lo: $62 ; (dec): lo: 98, Hi:  8
=$08e2			dod3  = $08E2 ;  138,60Hz NTSC (hex): hi: $08, lo: $E2 ; (dec): lo:226, Hi:  8
=$0969			re3   = $0969 ;  146,83Hz NTSC (hex): hi: $09, lo: $69 ; (dec): lo:105, Hi:  9
=$09f8			red3  = $09F8 ;  155,58Hz NTSC (hex): hi: $09, lo: $F8 ; (dec): lo:248, Hi:  9
=$0a90			mi3   = $0A90 ;  164,83Hz NTSC (hex): hi: $0A, lo: $90 ; (dec): lo:144, Hi: 10
=$0b31			fa3   = $0B31 ;  174,63Hz NTSC (hex): hi: $0B, lo: $31 ; (dec): lo: 49, Hi: 11
=$0bdb			fad3  = $0BDB ;  185,00Hz NTSC (hex): hi: $0B, lo: $DB ; (dec): lo:219, Hi: 11
=$0c8f			sol3  = $0C8F ;  196,00Hz NTSC (hex): hi: $0C, lo: $8F ; (dec): lo:143, Hi: 12
=$0d4e			sold3 = $0D4E ;  207,65Hz NTSC (hex): hi: $0D, lo: $4E ; (dec): lo: 78, Hi: 13
=$0e19			la3   = $0E19 ;  220,00Hz NTSC (hex): hi: $0E, lo: $19 ; (dec): lo: 25, Hi: 14
=$0ef0			lad3  = $0EF0 ;  233,10Hz NTSC (hex): hi: $0E, lo: $F0 ; (dec): lo:240, Hi: 14
=$0fd3			si3   = $0FD3 ;  246,95Hz NTSC (hex): hi: $0F, lo: $D3 ; (dec): lo:211, Hi: 15
=$10c4			do4   = $10C4 ;  261,65Hz NTSC (hex): hi: $10, lo: $C4 ; (dec): lo:196, Hi: 16
=$11c3			dod4  = $11C3 ;  277,20Hz NTSC (hex): hi: $11, lo: $C3 ; (dec): lo:195, Hi: 17
=$12d1			re4   = $12D1 ;  293,65Hz NTSC (hex): hi: $12, lo: $D1 ; (dec): lo:209, Hi: 18
=$13f0			red4  = $13F0 ;  311,15Hz NTSC (hex): hi: $13, lo: $F0 ; (dec): lo:240, Hi: 19
=$1520			mi4   = $1520 ;  329,65Hz NTSC (hex): hi: $15, lo: $20 ; (dec): lo: 32, Hi: 21
=$1661			fa4   = $1661 ;  349,25Hz NTSC (hex): hi: $16, lo: $61 ; (dec): lo: 97, Hi: 22
=$17b6			fad4  = $17B6 ;  370,00Hz NTSC (hex): hi: $17, lo: $B6 ; (dec): lo:182, Hi: 23
=$191f			sol4  = $191F ;  392,00Hz NTSC (hex): hi: $19, lo: $1F ; (dec): lo: 31, Hi: 25
=$1a9d			sold4 = $1A9D ;  415,30Hz NTSC (hex): hi: $1A, lo: $9D ; (dec): lo:157, Hi: 26
=$1c32			la4   = $1C32 ;  440,00Hz NTSC (hex): hi: $1C, lo: $32 ; (dec): lo: 50, Hi: 28
=$1de0			lad4  = $1DE0 ;  466,20Hz NTSC (hex): hi: $1D, lo: $E0 ; (dec): lo:224, Hi: 29
=$1fa6			si4   = $1FA6 ;  493,90Hz NTSC (hex): hi: $1F, lo: $A6 ; (dec): lo:166, Hi: 31
=$2188			do5   = $2188 ;  523,30Hz NTSC (hex): hi: $21, lo: $88 ; (dec): lo:136, Hi: 33
=$2387			dod5  = $2387 ;  554,40Hz NTSC (hex): hi: $23, lo: $87 ; (dec): lo:135, Hi: 35
=$25a2			re5   = $25A2 ;  587,30Hz NTSC (hex): hi: $25, lo: $A2 ; (dec): lo:162, Hi: 37
=$27e0			red5  = $27E0 ;  622,30Hz NTSC (hex): hi: $27, lo: $E0 ; (dec): lo:224, Hi: 39
=$2a3f			mi5   = $2A3F ;  659,30Hz NTSC (hex): hi: $2A, lo: $3F ; (dec): lo: 63, Hi: 42
=$2cc2			fa5   = $2CC2 ;  698,50Hz NTSC (hex): hi: $2C, lo: $C2 ; (dec): lo:194, Hi: 44
=$2f6b			fad5  = $2F6B ;  740,00Hz NTSC (hex): hi: $2F, lo: $6B ; (dec): lo:107, Hi: 47
=$323d			sol5  = $323D ;  784,00Hz NTSC (hex): hi: $32, lo: $3D ; (dec): lo: 61, Hi: 50
=$3539			sold5 = $3539 ;  830,60Hz NTSC (hex): hi: $35, lo: $39 ; (dec): lo: 57, Hi: 53
=$3864			la5   = $3864 ;  880,00Hz NTSC (hex): hi: $38, lo: $64 ; (dec): lo:100, Hi: 56
=$3bbf			lad5  = $3BBF ;  932,40Hz NTSC (hex): hi: $3B, lo: $BF ; (dec): lo:191, Hi: 59
=$3f4c			si5   = $3F4C ;  987,80Hz NTSC (hex): hi: $3F, lo: $4C ; (dec): lo: 76, Hi: 63
=$4311			do6   = $4311 ; 1046,60Hz NTSC (hex): hi: $43, lo: $11 ; (dec): lo: 17, Hi: 67
=$470d			dod6  = $470D ; 1108,80Hz NTSC (hex): hi: $47, lo: $0D ; (dec): lo: 13, Hi: 71
=$4b45			re6   = $4B45 ; 1174,60Hz NTSC (hex): hi: $4B, lo: $45 ; (dec): lo: 69, Hi: 75
=$4fc1			red6  = $4FC1 ; 1244,60Hz NTSC (hex): hi: $4F, lo: $C1 ; (dec): lo:193, Hi: 79
=$547f			mi6   = $547F ; 1318,60Hz NTSC (hex): hi: $54, lo: $7F ; (dec): lo:127, Hi: 84
=$5985			fa6   = $5985 ; 1397,00Hz NTSC (hex): hi: $59, lo: $85 ; (dec): lo:133, Hi: 89
=$5ed7			fad6  = $5ED7 ; 1480,00Hz NTSC (hex): hi: $5E, lo: $D7 ; (dec): lo:215, Hi: 94
=$647a			sol6  = $647A ; 1568,00Hz NTSC (hex): hi: $64, lo: $7A ; (dec): lo:122, Hi:100
=$6a73			sold6 = $6A73 ; 1661,20Hz NTSC (hex): hi: $6A, lo: $73 ; (dec): lo:115, Hi:106
=$70c8			la6   = $70C8 ; 1760,00Hz NTSC (hex): hi: $70, lo: $C8 ; (dec): lo:200, Hi:112
=$777f			lad6  = $777F ; 1864,80Hz NTSC (hex): hi: $77, lo: $7F ; (dec): lo:127, Hi:119
=$7e99			si6   = $7E99 ; 1975,60Hz NTSC (hex): hi: $7E, lo: $99 ; (dec): lo:153, Hi:126
=$8622			do7   = $8622 ; 2093,20Hz NTSC (hex): hi: $86, lo: $22 ; (dec): lo: 34, Hi:134
=$8e1a			dod7  = $8E1A ; 2217,60Hz NTSC (hex): hi: $8E, lo: $1A ; (dec): lo: 26, Hi:142
=$9689			re7   = $9689 ; 2349,20Hz NTSC (hex): hi: $96, lo: $89 ; (dec): lo:137, Hi:150
=$9f82			red7  = $9F82 ; 2489,20Hz NTSC (hex): hi: $9F, lo: $82 ; (dec): lo:130, Hi:159
=$a8fe			mi7   = $A8FE ; 2637,20Hz NTSC (hex): hi: $A8, lo: $FE ; (dec): lo:254, Hi:168
=$b30a			fa7   = $B30A ; 2794,00Hz NTSC (hex): hi: $B3, lo: $0A ; (dec): lo: 10, Hi:179
=$bdad			fad7  = $BDAD ; 2960,00Hz NTSC (hex): hi: $BD, lo: $AD ; (dec): lo:173, Hi:189
=$c8f4			sol7  = $C8F4 ; 3136,00Hz NTSC (hex): hi: $C8, lo: $F4 ; (dec): lo:244, Hi:200
=$d4e6			sold7 = $D4E6 ; 3322,40Hz NTSC (hex): hi: $D4, lo: $E6 ; (dec): lo:230, Hi:212
=$e18f			la7   = $E18F ; 3520,00Hz NTSC (hex): hi: $E1, lo: $8F ; (dec): lo:143, Hi:225
=$eefe			lad7  = $EEFE ; 3729,60Hz NTSC (hex): hi: $EE, lo: $FE ; (dec): lo:254, Hi:238
=$fd31			si7   = $FD31 ; 3951,20Hz NTSC (hex): hi: $FD, lo: $31 ; (dec): lo: 49, Hi:253

;******  Return to file: setsenvcolors.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0a11			scrmaninit
.0a11	20 38 0b	               jsr  push
.0a14	a9 06		               lda  #vbleu
.0a16	8d 21 d0	               sta  vicbackcol
.0a19	a9 05		               lda  #vvert
.0a1b	8d 20 d0	               sta  vicbordcol
.0a1e	a9 01		               lda  #vblanc
.0a20	8d 86 02	               sta  bascol
.0a23	ad 00 04	               lda  scrnram
.0a26	29 fd		               and  #%11111101
.0a28	8d 00 04	               sta  scrnram
.0a2b	20 32 0a	               jsr  cls
.0a2e	20 77 0b	               jsr  pop
.0a31	60		               rts
.0a32			cls
.0a32	08		               php
.0a33	48		               pha
.0a34	a9 93		               lda  #$93
.0a36	20 41 0a	               jsr  putch
.0a39	a9 0e		               lda  #$0e
.0a3b	20 41 0a	               jsr  putch
.0a3e	68		               pla
.0a3f	28		               plp
.0a40	60		               rts
.0a41			putch
.0a41	08		               php
.0a42	20 d2 ff	               jsr  $ffd2
.0a45	28		               plp
.0a46	60		               rts
.0a47			puts
.0a47	20 38 0b	               jsr  push
.0a4a	86 fb		               stx  zpage1
.0a4c	84 fc		               sty  zpage1+1
.0a4e	a0 00		               ldy  #0
.0a50	b1 fb		next           lda  (zpage1),y
.0a52	f0 09		               beq  exit
.0a54	20 41 0a	               jsr  putch
.0a57	20 3f 0c	               jsr  inczp1
.0a5a	4c 50 0a	               jmp  next
.0a5d	20 77 0b	exit           jsr  pop
.0a60	60		               rts
.0a61			gotoxy
.0a61	08		               php
.0a62	18		               clc
.0a63	8a		               txa
.0a64	48		               pha
.0a65	98		               tya
.0a66	aa		               tax
.0a67	68		               pla
.0a68	a8		               tay
.0a69	20 f0 ff	               jsr  kplot
.0a6c	28		               plp
.0a6d	60		               rts
.0a6e			cursor
=$0286			bascol    =    $0286
.0a6e	08		               php
.0a6f	48		               pha
.0a70	90 12		               bcc  restore
.0a72	20 f0 ff	               jsr  kplot
.0a75	8c 96 0a	               sty  cx
.0a78	8e 97 0a	               stx  cy
.0a7b	ad 86 02	               lda  bascol
.0a7e	8d 98 0a	               sta  bcol
.0a81	4c 93 0a	               jmp  out
.0a84	ae 97 0a	restore        ldx  cy
.0a87	ac 96 0a	               ldy  cx
.0a8a	20 f0 ff	               jsr  kplot
.0a8d	ad 98 0a	               lda  bcol
.0a90	8d 86 02	               sta  bascol
.0a93	68		out            pla
.0a94	28		               plp
.0a95	60		               rts
>0a96	00		cx   .byte     $00
>0a97	00		cy   .byte     $00
>0a98	00		bcol .byte     $00
.0a99			cursave
.0a99	08		               php
.0a9a	38		               sec
.0a9b	20 6e 0a	               jsr  cursor
.0a9e	28		               plp
.0a9f	60		               rts
.0aa0			curput
.0aa0	08		               php
.0aa1	18		               clc
.0aa2	20 6e 0a	               jsr  cursor
.0aa5	28		               plp
.0aa6	60		               rts
.0aa7			putsxy
.0aa7	20 38 0b	               jsr  push
.0aaa	86 fb		               stx  zpage1
.0aac	84 fc		               sty  zpage1+1
.0aae	a0 00		               ldy  #$00
.0ab0	b1 fb		               lda  (zpage1),y
.0ab2	aa		               tax
.0ab3	20 3f 0c	               jsr  inczp1
.0ab6	b1 fb		               lda  (zpage1),y
.0ab8	a8		               tay
.0ab9	20 61 0a	               jsr  gotoxy
.0abc	20 3f 0c	               jsr  inczp1
.0abf	a6 fb		               ldx  zpage1
.0ac1	a4 fc		               ldy  zpage1+1
.0ac3	20 47 0a	               jsr  puts
.0ac6	20 77 0b	               jsr  pop
.0ac9	60		               rts
>0aca	00 00		straddr   .word     $00
>0acc	00		px        .byte     $00
>0acd	00		py        .byte     $00
>0ace	00 00		zp1       .word     $00
.0ad0			putscxy
.0ad0	20 38 0b	               jsr  push
.0ad3	84 fc		               sty  zpage1+1
.0ad5	86 fb		               stx  zpage1
.0ad7	ad 86 02	               lda  bascol
.0ada	8d fa 0a	               sta  bc
.0add	a0 00		               ldy #$00
.0adf	b1 fb		               lda  (zpage1),y
.0ae1	8d 86 02	               sta  bascol
.0ae4	20 3f 0c	               jsr  inczp1
.0ae7	a6 fb		               ldx  zpage1
.0ae9	a4 fc		               ldy  zpage1+1
.0aeb	20 a7 0a	               jsr  putsxy
.0aee	ad fa 0a	               lda  bc
.0af1	8d 86 02	               sta  bascol
.0af4	20 77 0b	               jsr  pop
.0af7	60		               rts
>0af8	00 00		straddr  .word      $00
>0afa	00		bc       .byte      $00
>0afb	00 00		zp1      .word      $00
.0afd			putrahex
.0afd	08		               php
.0afe	48		               pha
.0aff	20 45 0d	               jsr  a2hex
.0b02	a9 f1		               lda  #<a2hexstr
.0b04	a0 0c		               ldy  #>a2hexstr
.0b06	20 47 0a	               jsr  puts
.0b09	68		               pla
.0b0a	28		               plp
.0b0b	60		               rts
.0b0c			kputrahexxy
.0b0c			bputrahexxy
.0b0c			putrahexxy
.0b0c	08		               php
.0b0d	20 45 0d	               jsr  a2hex
.0b10	a9 ee		               lda  #<a2hexpos
.0b12	a0 0c		               ldy  #>a2hexpos
.0b14	20 a7 0a	               jsr  putsxy
.0b17	68		               pla
.0b18	28		               plp
.0b19	60		               rts
.0b1a			putrahexcxy
.0b1a	08		               php
.0b1b	20 45 0d	               jsr  a2hex
.0b1e	a9 ee		               lda  #<a2hexpos
.0b20	a0 0c		               ldy  #>a2hexpos
.0b22	20 d0 0a	               jsr  putscxy
.0b25	68		               pla
.0b26	28		               plp
.0b27	60		               rts
.0b28			setinverse
.0b28	48		               pha
.0b29	a9 12		               lda  #$12
.0b2b	20 d2 ff	               jsr  $ffd2
.0b2e	68		               pla
.0b2f	60		               rts
.0b30			clrinverse
.0b30	48		               pha
.0b31	a9 92		               lda  #$92
.0b33	20 d2 ff	               jsr  $ffd2
.0b36	68		               pla
.0b37	60		               rts

;******  Return to file: setsenvcolors.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.0b38			push
.0b38	08		          php            ; stack : flg, pcl, pch
.0b39	78		          sei
.0b3a	8d 74 0b	          sta  ra        ; save a
.0b3d	68		          pla            ; stack : pcl, pch
.0b3e	8d 73 0b	          sta  rp        ; save rp
.0b41	68		          pla            ; stack : pch
.0b42	8d 75 0b	          sta  pc        ; save pcl
.0b45	68		          pla            ; stack : -
.0b46	8d 76 0b	          sta  pc+1      ; save pch
.0b49	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0b4b	48		          pha            ; stack : zp1l
.0b4c	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0b4e	48		          pha            ; stack : zp1h, zp1l
.0b4f	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0b51	48		          pha            ; stack : zp2l, zp1h, zp1l
.0b52	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0b54	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0b55	ad 73 0b	          lda  rp        ; get rp
.0b58	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0b59	ad 74 0b	          lda  ra        ; get a
.0b5c	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0b5d	8a		          txa            ; get x
.0b5e	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b5f	98		          tya            ; get y
.0b60	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b61	ad 76 0b	          lda  pc+1      ; get pch
.0b64	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b65	ad 75 0b	          lda  pc        ; get pcl
.0b68	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b69	ad 73 0b	          lda  rp        ; get rp
.0b6c	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b6d	ad 74 0b	          lda  ra        ; get a
.0b70	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b71	58		          cli
.0b72	60		          rts
>0b73	00		rp        .byte     0
>0b74	00		ra        .byte     0
>0b75	00 00		pc        .word     0
.0b77			pull
.0b77			pop
.0b77	78		          sei
.0b78	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b79	8d ac 0b	          sta  pc        ; save pcl
.0b7c	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b7d	8d ad 0b	          sta  pc+1      ; save pch
.0b80	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b81	a8		          tay            ; set y
.0b82	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0b83	aa		          tax            ; set x
.0b84	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0b85	8d ab 0b	          sta  ra        ; save a
.0b88	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0b89	8d aa 0b	          sta  rp        ; save rp
.0b8c	68		          pla            ; stack : zp2l, zp1h, zp1l
.0b8d	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0b8f	68		          pla            ; stack : zp1h, zp1l
.0b90	85 fd		          sta  zpage2    ; get zpage2 High byte
.0b92	68		          pla            ; stack : zp1l
.0b93	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0b95	68		          pla            ; stack :
.0b96	85 fb		          sta  zpage1    ; get zpage1 High byte
.0b98	ad ad 0b	          lda  pc+1      ; get pch
.0b9b	48		          pha            ; stack : pch
.0b9c	ad ac 0b	          lda  pc
.0b9f	48		          pha            ; stack : pcl, pch
.0ba0	ad aa 0b	          lda  rp        ; get rp
.0ba3	48		          pha            ; stack : rp, pcl, pch
.0ba4	ad ab 0b	          lda  ra        ; set ra
.0ba7	58		          cli
.0ba8	28		          plp            ; stack : pcl, pch
.0ba9	60		          rts
>0baa	00		rp        .byte     0
>0bab	00		ra        .byte     0
>0bac	00 00		pc        .word     0

;******  Return to file: setsenvcolors.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.0bae			blkfill
.0bae	20 38 0b	bf0            jsr  push
.0bb1	20 6c 0c	               jsr  savezp1
.0bb4	84 fc		               sty  zpage1+1
.0bb6	a0 00		               ldy  #$00
.0bb8	84 fb		               sty  zpage1
.0bba	91 fb		bf1            sta  (zpage1),y
.0bbc	c8		               iny
.0bbd	d0 fb		               bne  bf1
.0bbf	20 7b 0c	               jsr  restzp1
.0bc2	20 77 0b	               jsr  pop
.0bc5	60		               rts
.0bc6			memfill
.0bc6	20 38 0b	               jsr  push
.0bc9	20 ae 0b	mf1            jsr  blkfill
.0bcc	c8		               iny
.0bcd	ca		               dex
.0bce	d0 f9		               bne  mf1
.0bd0	20 77 0b	               jsr  pop
.0bd3	60		               rts
.0bd4			memmove
.0bd4	20 38 0b	               jsr  push
.0bd7	ba		               tsx            ; On se crée un pointeur ...
.0bd8	8a		               txa
.0bd9	18		               clc
.0bda	69 0b		               adc  #11
.0bdc	a8		               tay
.0bdd	a2 06		               ldx  #$06
.0bdf	b9 00 01	nextbyte       lda  $0100,y
.0be2	99 2e 0c	               sta  words,y
.0be5	c8		               iny
.0be6	ca		               dex
.0be7	d0 f6		               bne  nextbyte
.0be9	ad 2e 0c	               lda  s
.0bec	8d 05 0c	               sta  source+1
.0bef	ad 2f 0c	               lda  s+1
.0bf2	8d 06 0c	               sta  source+2
.0bf5	ad 30 0c	               lda  d
.0bf8	8d 02 0c	               sta  destin+1
.0bfb	ad 31 0c	               lda  d+1
.0bfe	8d 03 0c	               sta  destin+2
.0c01	ad ff ff	destin         lda  $ffff
.0c04	8d ff ff	source         sta  $ffff
.0c07	ee 02 0c	               inc  destin+1
.0c0a	d0 03		               bne  src
.0c0c	ee 03 0c	               inc  destin+2
.0c0f	ee 05 0c	src            inc  source+1
.0c12	d0 03		               bne  cnt
.0c14	ee 06 0c	               inc  source+2
.0c17	ad 32 0c	cnt            lda  compte
.0c1a	d0 08		               bne  decit
.0c1c	ad 33 0c	               lda  compte+1
.0c1f	f0 09		               beq  fini
.0c21	ce 33 0c	               dec  compte+1
.0c24	ce 32 0c	decit          dec  compte
.0c27	4c 01 0c	               jmp  destin
.0c2a	20 77 0b	fini           jsr  pop
.0c2d	60		               rts
.0c2e			words
>0c2e	00 00		s         .word     $0000
>0c30	00 00		d         .word     $0000
>0c32	00 00		compte    .word     $0000
.0c34			decword
.0c34	20 38 0b	               jsr  push
.0c37	86 fd		               stx  zpage2
.0c39	84 fe		               sty  zpage2+1
.0c3b	20 77 0b	               jsr  pop
.0c3e	60		               rts
.0c3f			inczp1
.0c3f	08		               php
.0c40	e6 fb		               inc  zpage1
.0c42	d0 02		               bne  nopage
.0c44	e6 fc		               inc  zpage1+1
.0c46	28		nopage         plp
.0c47	60		               rts
.0c48			deczp1
.0c48	08		                php
.0c49	48		                pha
.0c4a	c6 fb		                dec  zpage1
.0c4c	d0 02		                bne  nopage
.0c4e	c6 fc		                dec  zpage1+1
.0c50	c6 fb		nopage          dec  zpage1
.0c52	68		                pla
.0c53	28		                plp
.0c54	60		                rts
.0c55			inczp2
.0c55	08		               php
.0c56	48		               pha
.0c57	e6 fd		               inc  zpage2
.0c59	d0 02		               bne  nopage
.0c5b	e6 fe		               inc  zpage2+1
.0c5d	68		nopage         pla
.0c5e	28		               plp
.0c5f	60		               rts
.0c60			deczp2
.0c60	08		               php
.0c61	48		               pha
.0c62	a5 fd		               lda  zpage2
.0c64	d0 02		               bne  nopage
.0c66	c6 fe		               dec  zpage2+1
.0c68	c6 fd		nopage         dec  zpage2
.0c6a	28		               plp
.0c6b	60		               rts
.0c6c			savezp1
.0c6c	08		               php
.0c6d	48		               pha
.0c6e	a5 fb		               lda  zpage1
.0c70	8d e8 0c	               sta  zp1
.0c73	a5 fc		               lda  zpage1+1
.0c75	8d e9 0c	               sta  zp1+1
.0c78	68		               pla
.0c79	28		               plp
.0c7a	60		               rts
.0c7b			restzp1
.0c7b	08		               php
.0c7c	48		               pha
.0c7d	ad e8 0c	               lda zp1
.0c80	85 fb		               sta zpage1
.0c82	ad e9 0c	               lda zp1+1
.0c85	85 fc		               sta zpage1+1
.0c87	68		               pla
.0c88	28		               plp
.0c89	60		               rts
.0c8a			savezp2
.0c8a	08		         php
.0c8b	48		         pha
.0c8c	a5 fd		         lda zpage2
.0c8e	8d ea 0c	         sta zp2
.0c91	a5 fe		         lda zpage2+1
.0c93	8d eb 0c	         sta zp2+1
.0c96	68		         pla
.0c97	28		         plp
.0c98	60		         rts
.0c99			restzp2
.0c99	08		                php
.0c9a	48		                pha
.0c9b	ad ea 0c	                lda  zp2
.0c9e	85 fd		                sta  zpage2
.0ca0	ad eb 0c	                lda  zp2+1
.0ca3	85 fe		                sta  zpage2+1
.0ca5	68		                pla
.0ca6	28		                plp
.0ca7	60		                rts
.0ca8			xy2addr
.0ca8	08		                php
.0ca9	48		                pha
.0caa	8a		                txa
.0cab	48		                pha
.0cac	98		                tya
.0cad	48		                pha
.0cae	ad e3 0c	                lda     addr1+1
.0cb1	8d e5 0c	                sta     addr2+1
.0cb4	ad e2 0c	                lda     addr1
.0cb7	8d e4 0c	                sta     addr2
.0cba	c0 00		                cpy     #$00
.0cbc	f0 0f		                beq     addx
.0cbe	18		moreline        clc
.0cbf	6d e1 0c	                adc     ymult
.0cc2	90 03		                bcc     norepy
.0cc4	ee e5 0c	                inc     addr2+1
.0cc7	8d e4 0c	norepy          sta     addr2
.0cca	88		                dey
.0ccb	d0 f1		                bne     moreline
.0ccd	8a		addx            txa
.0cce	18		                clc
.0ccf	6d e4 0c	                adc     addr2
.0cd2	90 03		                bcc     thatsit
.0cd4	ee e5 0c	                inc     addr2+1
.0cd7	8d e4 0c	thatsit         sta     addr2
.0cda	68		                pla
.0cdb	a8		                tay
.0cdc	68		                pla
.0cdd	aa		                tax
.0cde	68		                pla
.0cdf	28		                plp
.0ce0	60		                rts
>0ce1	28		ymult          .byte     40
>0ce2	00 00		addr1          .word     $0000
>0ce4	00 00		addr2          .word     $0000
>0ce6	00 00		bytecnt        .word     $0000
>0ce8	00 00		zp1        .word   $0000
>0cea	00 00		zp2        .word   $0000

;******  Return to file: setsenvcolors.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>0cec	01		a2hexcol       .byte     1              ; pour aputscxy
>0ced	00		a2hexbkcol     .byte     %00000000
.0cee			a2hexpos
>0cee	00		a2hexpx        .byte     0              ; pour aputsxy
>0cef	00		a2hexpy        .byte     0
>0cf0	24		a2hexprefix    .byte     "$"            ; pour aputs
>0cf1	00 00		a2hexstr       .word     $00
>0cf3	00 00		               .word     $00
>0cf5	00		               .byte     0              ; 0 end string
.0cf6			putahexfmtxy
.0cf6	20 38 0b	               jsr  push
.0cf9	20 45 0d	               jsr  a2hex
.0cfc	ae ee 0c	               ldx  a2hexpx
.0cff	ac ef 0c	               ldy  a2hexpy
.0d02	20 61 0a	               jsr  gotoxy
.0d05	a2 f0		               ldx  #<a2hexprefix
.0d07	a0 0c		               ldy  #>a2hexprefix
.0d09	20 47 0a	               jsr  puts
.0d0c	20 77 0b	               jsr  pop
.0d0f	60		               rts
.0d10			putahexfmt
.0d10	20 38 0b	               jsr  push
.0d13	20 45 0d	               jsr  a2hex
.0d16	a2 f0		               ldx  #<a2hexprefix
.0d18	a0 0c		               ldy  #>a2hexprefix
.0d1a	20 47 0a	               jsr  puts
.0d1d	20 77 0b	               jsr  pop
.0d20	60		               rts
.0d21			putahex
.0d21	20 38 0b	               jsr  push
.0d24	20 45 0d	               jsr  a2hex
.0d27	a2 f1		               ldx  #<a2hexstr
.0d29	a0 0c		               ldy  #>a2hexstr
.0d2b	20 47 0a	               jsr  puts
.0d2e	20 77 0b	               jsr  pop
.0d31	60		               rts
.0d32			nib2hex
.0d32	08		               php
.0d33	29 0f		               and  #$0f
.0d35	f8		               sed
.0d36	18		               clc
.0d37	69 90		               adc  #$90
.0d39	69 40		               adc  #$40
.0d3b	d8		               cld
.0d3c	28		               plp
.0d3d	60		               rts
.0d3e			lsra4bits
.0d3e	08		               php
.0d3f	4a		               lsr
.0d40	4a		               lsr
.0d41	4a		               lsr
.0d42	4a		               lsr
.0d43	28		               plp
.0d44	60		               rts
.0d45			a2hex
.0d45	08		               php
.0d46	48		               pha
.0d47	48		               pha
.0d48	20 3e 0d	               jsr  lsra4bits
.0d4b	20 32 0d	               jsr  nib2hex
.0d4e	8d f1 0c	               sta  a2hexstr
.0d51	68		               pla
.0d52	20 32 0d	               jsr  nib2hex
.0d55	8d f2 0c	               sta  a2hexstr+1
.0d58	a9 00		               lda  #$00                ; set end of string
.0d5a	8d f3 0c	               sta  a2hexstr+2
.0d5d	68		               pla
.0d5e	28		               plp
.0d5f	60		               rts
.0d60			xy2hex
.0d60	20 38 0b	               jsr  push
.0d63	20 45 0d	               jsr  a2hex
.0d66	8a		               txa
.0d67	48		               pha
.0d68	20 3e 0d	               jsr  lsra4bits
.0d6b	20 32 0d	               jsr  nib2hex
.0d6e	8d f1 0c	               sta  a2hexstr
.0d71	68		               pla
.0d72	20 32 0d	               jsr  nib2hex
.0d75	8d f2 0c	               sta  a2hexstr+1
.0d78	98		               tya
.0d79	48		               pha
.0d7a	20 3e 0d	               jsr  lsra4bits
.0d7d	20 32 0d	               jsr  nib2hex
.0d80	8d f3 0c	               sta  a2hexstr+2
.0d83	68		               pla
.0d84	20 32 0d	               jsr  nib2hex
.0d87	8d f4 0c	               sta  a2hexstr+3
.0d8a	a9 00		               lda  #$00                ; 0 ended string
.0d8c	8d f5 0c	               sta  a2hexstr+4
.0d8f	20 77 0b	               jsr  pop
.0d92			atobin
.0d92	20 38 0b	               jsr     push
.0d95	a2 08		               ldx     #8
.0d97	a0 00		               ldy     #0
.0d99	2a		nextbit        rol
.0d9a	48		               pha
.0d9b	69 00		               adc     #$00
.0d9d	29 01		               and     #$01
.0d9f	20 32 0d	               jsr     nib2hex
.0da2	99 b3 0d	               sta     abin,y
.0da5	68		               pla
.0da6	c8		               iny
.0da7	ca		               dex
.0da8	d0 ef		               bne     nextbit
.0daa	a9 00		               lda     #0
.0dac	99 b3 0d	               sta     abin,y
.0daf	20 77 0b	               jsr     pull
.0db2	60		               rts
>0db3	30 30 30 30	abin           .null   "00000000"
>0db7	30 30 30 30 00
.0dbc			putabin
.0dbc	20 92 0d	               jsr     atobin
.0dbf	20 38 0b	               jsr     push
.0dc2	a2 b3		               ldx     #<abin
.0dc4	a0 0d		               ldy     #>abin
.0dc6	20 47 0a	               jsr     puts
.0dc9	20 77 0b	               jsr     pop
.0dcc	60		               rts
.0dcd			putabinfmt
.0dcd	08		               php
.0dce	48		               pha
.0dcf	a9 25		               lda     #"%"
.0dd1	20 41 0a	               jsr     putch
.0dd4	68		               pla
.0dd5	20 bc 0d	               jsr     putabin
.0dd8	28		               plp
.0dd9	60		               rts
.0dda			putabinxy
.0dda	20 61 0a	               jsr     gotoxy
.0ddd	20 bc 0d	               jsr     putabin
.0de0	60		               rts
.0de1			putabinfmtxy
.0de1	20 61 0a	               jsr     gotoxy
.0de4	20 cd 0d	               jsr     putabinfmt
.0de7	60		               rts

;******  Return to file: setsenvcolors.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

.0de8			waitstop
.0de8	20 38 0b	                jsr     push
.0deb	20 ed f6	wait            jsr     k_stop
.0dee	d0 fb		                bne     wait
.0df0	20 77 0b	                jsr     pop
.0df3	60		                rts
.0df4			anykey
.0df4	08		                php
.0df5	48		                pha
.0df6	a5 cb		nokey           lda 203
.0df8	c9 40		                cmp #64
.0dfa	f0 fa		                beq nokey
.0dfc	68		                pla
.0dfd	28		                plp
.0dfe	60		                rts
.0dff			getkey
.0dff	20 38 0b	                jsr     push
.0e02	20 cf ff	again           jsr     chrin
.0e05	4c 02 0e	                jmp     again
.0e08	20 77 0b	                jsr     pop
.0e0b	60		                rts
.0e0c			waitkey
.0e0c	20 38 0b	                jsr     push
.0e0f	8d 24 0e	                sta     thekey
.0e12	20 e4 ff	nope            jsr     getin
.0e15	20 d2 ff	                jsr     chrout
.0e18	cd 24 0e	                cmp     thekey
.0e1b	d0 f5		                bne     nope
.0e1d	20 d2 ff	                jsr     chrout
.0e20	20 77 0b	                jsr     pop
.0e23	60		                rts
>0e24	00		thekey          .byte   0
.0e25			waitspace
.0e25	20 38 0b	                jsr     push
.0e28	a9 7f		wait            lda     #$7f  ;%01111111
.0e2a	8d 00 dc	                sta     $dc00
.0e2d	ad 01 dc	                lda     $dc01
.0e30	29 10		                and     #$10  ;mask %00010000
.0e32	d0 f4		                bne     wait
.0e34	20 77 0b	                jsr     pop
.0e37			waitsstop
.0e37	20 38 0b	                jsr     push
.0e3a	20 ed f6	wait            jsr     k_stop  ;%01111111
.0e3d	d0 fb		                bne     wait
.0e3f	20 77 0b	                jsr     pop
.0e42			waitreturn
.0e42	20 38 0b	                jsr     push
.0e45	ad 61 0e	                lda     thecount
.0e48	8d 00 04	                sta     scrnram
.0e4b	a9 02		                lda     #$02
.0e4d	8d 00 d8	                sta     colorram
.0e50	20 e4 ff	nope            jsr     getin
.0e53	20 d2 ff	                jsr     chrout
.0e56	c9 0d		                cmp     #$0d
.0e58	d0 f6		                bne     nope
.0e5a	ee 61 0e	                inc     thecount
.0e5d	20 77 0b	                jsr     pop
.0e60	60		                rts
>0e61	01		thecount        .byte   $01

;******  Return to file: setsenvcolors.asm


;******  End of listing

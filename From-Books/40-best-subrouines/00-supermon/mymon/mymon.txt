
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L mymon.txt -o mymon.prg mymon.asm
; Sat Mar 25 10:56:57 2023

;Offset	;Hex		;Source

;******  Processing input file: mymon.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: mymon.asm

.080d			main
.080d	a9 93		                lda #147
.080f	20 d2 ff	                jsr chrout
.0812	20 ca c9	                jsr greetsmall
.0815	60		                rts
=$c1			tmp0            = $c1               ; used to return input, often holds end address
=$c3			tmp2            = $c3               ; usually holds start address
=$90			satus           = $90               ; kernal i/o status word
=$b7			fnlen           = $b7               ; length of current filename
=$b9			sadd            = $b9               ; current secondary address (official name sa)
=$ba			fa              = $ba               ; current device number
=$bb			fnadr           = $bb               ; pointer to current filename
=$c6			ndx             = $c6               ; number of characters in keyboard buffer
=$0277			keyd            = $0277             ; keyboard buffer
=$0316			bkvec           = $0316             ; brk instruction vector (official name cbinv)
>0100			acmd            .fill 1             ; addressing command
>0101			length          .fill 1             ; length of operand
>0102			mnemw           .fill 3             ; 3 letter mnemonic buffer
>0105			savx            .fill 1             ; 1 byte temp storage, often to save x register
>0106			opcode          .fill 1             ; current opcode for assembler/disassembler
>0107			upflg           .fill 1             ; flag: count up (bit 7 clear) or down (bit 7 set)
>0108			digcnt          .fill 1             ; digit count
>0109			indig           .fill 1             ; numeric value of single digit
>010a			numbit          .fill 1             ; numeric base of input
>010b			stash           .fill 2             ; 2-byte temp storage
>010d			u0aa0           .fill 10            ; work buffer
=$0117			u0aae           =*                  ; end of work buffer
>0117			stage           .fill 30            ; staging buffer for filename, search, etc.
=$0135			estage          =*                  ; end of staging buffer
>0200			inbuff          .fill 40            ; 40-character input buffer
=$0228			endin           =*                  ; end of input buffer
>0228			pch             .fill 1             ; program counter high byte
>0229			pcl             .fill 1             ; program counter low byte
>022a			sr              .fill 1             ; status register
>022b			acc             .fill 1             ; accumulator
>022c			xr              .fill 1             ; x register
>022d			yr              .fill 1             ; y register
>022e			sp              .fill 1             ; stack pointer
>022f			store           .fill 2             ; 2-byte temp storage
>0231			chrpnt          .fill 1             ; current position in input buffer
>0232			savy            .fill 1             ; temp storage, often to save y register
>0233			u9f             .fill 1             ; index into assembler work buffer
=$ff90			setmsg          = $ff90             ; set kernel message control flag
=$ff93			second          = $ff93             ; set secondary address after listen
=$ff96			tksa            = $ff96             ; send secondary address after talk
=$ffb1			listen          = $ffb1             ; command serial bus device to listen
=$ffb4			talk            = $ffb4             ; command serial bus device to talk
=$ffba			setlfs          = $ffba             ; set logical file parameters
=$ffbd			setnam          = $ffbd             ; set filename
=$ffa5			acptr           = $ffa5             ; input byte from serial bus
=$ffa8			ciout           = $ffa8             ; output byte to serial bus
=$ffab			untlk           = $ffab             ; command serial bus device to untalk
=$ffae			unlsn           = $ffae             ; command serial bus device to unlisten
=$ffc6			chkin           = $ffc6             ; define input channel
=$ffcc			clrchn          = $ffcc             ; restore default devices
=$ffcf			input           = $ffcf             ; input a character (official name chrin)
=$ffd2			chrout          = $ffd2             ; output a character
=$ffd5			load            = $ffd5             ; load from device
=$ffd8			save            = $ffd8             ; save to device
=$ffe1			stop            = $ffe1             ; check the stop key
=$ffe4			getin           = $ffe4             ; get a character
=$c000			org             = $c000
.c000	20 39 c0	super           jsr setcolors
.c003	20 d5 c9	                jsr greeting
.c006	20 07 c7	                jsr crlf
.c009	a0 20		                ldy #msg4-msgbas    ; display "..sys "
.c00b	20 ae c9	                jsr sndmsg
.c00e	ad f2 cb	                lda supad           ; store entry point address in tmp0
.c011	85 c1		                sta tmp0
.c013	ad f3 cb	                lda supad+1
.c016	85 c2		                sta tmp0+1
.c018	20 38 c8	                jsr cvtdec          ; convert address to decimal
.c01b	a9 00		                lda #0
.c01d	a2 06		                ldx #6
.c01f	a0 03		                ldy #3
.c021	20 72 c8	                jsr nmprnt          ; print entry point address
.c024	20 07 c7	                jsr crlf
.c027	ad f0 cb	                lda linkad          ; set brk vector
.c02a	8d 16 03	                sta bkvec
.c02d	ad f1 cb	                lda linkad+1
.c030	8d 17 03	                sta bkvec+1
.c033	a9 80		                lda #$80            ; disable kernel control messages
.c035	20 90 ff	                jsr setmsg          ; and enable error messages
.c038	00		                brk
.c039			setcolors
.c039	08		                php
.c03a	48		                pha
.c03b	a9 0d		                lda     #$0d ;#$05
.c03d	8d 21 d0	                sta     screen
.c040	a9 05		                lda     #$0d - 8
.c042	8d 20 d0	                sta     border
.c045	a9 00		                lda     #$00
.c047	8d 86 02	                sta     texte
.c04a	a9 93		                lda     #147
.c04c	20 d2 ff	                jsr     $ffd2
.c04f	a9 13		                lda     #19
.c051	20 d2 ff	                jsr     $ffd2
.c054	68		                pla
.c055	28		                plp
.c056	60		                rts
=53281			screen  =       53281
=53280			border  =       53280
=646			texte   =       646
.c057	a2 05		break           ldx #$05            ; pull registers off the stack
.c059	68		bstack          pla                 ; order: y,x,a,sr,pcl,pch
.c05a	9d 28 02	                sta pch,x           ; store in memory
.c05d	ca		                dex
.c05e	10 f9		                bpl bstack
.c060	d8		                cld                 ; disable bcd mode
.c061	ba		                tsx                 ; store stack pointer in memory
.c062	8e 2e 02	                stx sp
.c065	58		                cli                 ; enable interupts
.c066	a0 00		dsplyr          ldy #msg2-msgbas    ; display headers
.c068	20 9b c9	                jsr sndclr
.c06b	a9 3b		                lda #$3b            ; prefix registers with "; " to allow editing
.c06d	20 d2 ff	                jsr chrout
.c070	a9 20		                lda #$20
.c072	20 d2 ff	                jsr chrout
.c075	ad 28 02	                lda pch             ; print 2-byte program counter
.c078	20 20 c7	                jsr wrtwo
.c07b	a0 01		                ldy #1              ; start 1 byte after pc high byte
.c07d	b9 28 02	disj            lda pch,y           ; loop through rest of the registers
.c080	20 fc c6	                jsr wrbyte          ; print 1-byte register value
.c083	c8		                iny
.c084	c0 07		                cpy #7              ; there are a total of 5 registers to print
.c086	90 f5		                bcc disj
.c088	20 07 c7	strt            jsr crlf            ; new line
.c08b	a2 00		                ldx #0              ; point at start of input buffer
.c08d	8e 31 02	                stx chrpnt
.c090	20 cf ff	smove           jsr input           ; chrin kernal call to input a character
.c093	9d 00 02	                sta inbuff,x        ; store in input buffer
.c096	e8		                inx
.c097	e0 28		                cpx #endin-inbuff   ; error if buffer is full
.c099	b0 1c		                bcs error
.c09b	c9 0d		                cmp #$0d            ; keep reading until cr
.c09d	d0 f1		                bne smove
.c09f	a9 00		                lda #0              ; null-terminate input buffer
.c0a1	9d ff 01	                sta inbuff-1,x      ; (replacing the cr)
.c0a4	20 48 c7	st1             jsr getchr          ; get a character from the buffer
.c0a7	f0 df		                beq strt            ; start over if buffer is empty
.c0a9	c9 20		                cmp #$20            ; skip leading spaces
.c0ab	f0 f7		                beq st1
.c0ad	a2 16		s0              ldx #keytop-keyw    ; loop through valid command characters
.c0af	dd b4 cb	s1              cmp keyw,x          ; see if input character matches
.c0b2	f0 0b		                beq s2              ; command matched, dispatch it
.c0b4	ca		                dex                 ; no match, check next command
.c0b5	10 f8		                bpl s1              ; keep trying until we've checked them all
.c0b7	a0 1e		error           ldy #msg3-msgbas    ; display "?" to indicate error and go to new line
.c0b9	20 ae c9	                jsr sndmsg
.c0bc	4c 88 c0	                jmp strt            ; back to main loop
.c0bf	e0 13		s2              cpx #$13            ; last 3 commands in table are load/save/validate
.c0c1	b0 12		                bcs lsv             ;   which are handled by the same subroutine
.c0c3	e0 0f		                cpx #$0f            ; next 4 commands are base conversions
.c0c5	b0 14		                bcs cnvlnk          ;   which are handled by the same subroutine
.c0c7	8a		                txa                 ; remaining commands dispatch through vector table
.c0c8	0a		                asl a               ; multiply index of command by 2
.c0c9	aa		                tax                 ;   since table contains 2-byte addresses
.c0ca	bd cb cb	                lda kaddr+1,x       ; push address from vector table onto stack
.c0cd	48		                pha                 ;   so that the rts from getpar will jump there
.c0ce	bd ca cb	                lda kaddr,x
.c0d1	48		                pha
.c0d2	4c 29 c6	                jmp getpar          ; get the first parameter for the command
.c0d5	8d 32 02	lsv             sta savy            ; handle load/save/validate
.c0d8	4c ab c2	                jmp ld
.c0db	4c ed c7	cnvlnk          jmp convrt          ; handle base conversion
.c0de	20 d5 c9	exit            jsr greeting
.c0e1	6c 02 a0	                jmp ($a002)         ; jump to warm-start vector to reinitialize basic
.c0e4	b0 08		dsplym          bcs dspm11          ; start from previous end addr if no address given
.c0e6	20 62 c7	                jsr copy12          ; save start address in tmp2
.c0e9	20 29 c6	                jsr getpar          ; get end address in tmp0
.c0ec	90 06		                bcc dsmnew          ; did user specify one?
.c0ee	a9 0b		dspm11          lda #$0b            ; if not, show 12 lines by default
.c0f0	85 c1		                sta tmp0
.c0f2	d0 0e		                bne dspbyt          ; always true, but bne uses 1 byte less than jmp
.c0f4	20 6b c7	dsmnew          jsr sub12           ; end addr given, calc bytes between start and end
.c0f7	90 1e		                bcc merror          ; error if start is after end
.c0f9	a2 03		                ldx #3              ; divide by 8 (shift right 3 times)
.c0fb	46 c2		dspm01          lsr tmp0+1
.c0fd	66 c1		                ror tmp0
.c0ff	ca		                dex
.c100	d0 f9		                bne dspm01
.c102	20 e1 ff	dspbyt          jsr stop            ; check for stop key
.c105	f0 0d		                beq dspmx           ; exit early if pressed
.c107	20 87 c1	                jsr dispmem         ; display 1 line containing 8 bytes
.c10a	a9 08		                lda #8              ; increase start address by 8 bytes
.c10c	20 a1 c7	                jsr bumpad2
.c10f	20 79 c7	                jsr suba1           ; decrement line counter
.c112	b0 ee		                bcs dspbyt          ; show another line until it's < 0
.c114	4c 88 c0	dspmx           jmp strt            ; back to main loop
.c117	4c b7 c0	merror          jmp error           ; handle error
.c11a	20 b9 c7	altr            jsr copy1p          ; store first parameter in pc
.c11d	a0 00		                ldy #0              ; init counter
.c11f	20 29 c6	altr1           jsr getpar          ; get value for next register
.c122	b0 0a		                bcs altrx           ; exit early if no more values given
.c124	a5 c1		                lda tmp0            ; store in memory, offset from sr
.c126	99 2a 02	                sta sr,y            ; these locations will be transferred to the
.c129	c8		                iny                 ;   actual registers before exiting the monitor
.c12a	c0 05		                cpy #$05            ; have we updated all 5 yet?
.c12c	90 f1		                bcc altr1           ; if not, get next
.c12e	4c 88 c0	altrx           jmp strt            ; back to main loop
.c131	b0 13		altm            bcs altmx           ; exit if no parameter provided
.c133	20 62 c7	                jsr copy12          ; copy parameter to start address
.c136	a0 00		                ldy #0
.c138	20 29 c6	altm1           jsr getpar          ; get value for next byte of memory
.c13b	b0 09		                bcs altmx           ; if none given, exit early
.c13d	a5 c1		                lda tmp0            ; poke value into memory at start address + y
.c13f	91 c3		                sta (tmp2),y
.c141	c8		                iny                 ; next byte
.c142	c0 08		                cpy #8              ; have we read 8 bytes yet?
.c144	90 f2		                bcc altm1           ; if not, read the next one
.c146	a9 91		altmx           lda #$91            ; move cursor up
.c148	20 d2 ff	                jsr chrout
.c14b	20 87 c1	                jsr dispmem         ; re-display line to make ascii match hex
.c14e	4c 88 c0	                jmp strt            ; back to main loop
.c151	ae 2e 02	goto            ldx sp              ; load stack pointer from memory
.c154	9a		                txs                 ; save in sp register
.c155	20 b9 c7	goto2           jsr copy1p          ; copy provided address to pc
.c158	78		                sei                 ; disable interrupts
.c159	ad 28 02	                lda pch             ; push pc high byte on stack
.c15c	48		                pha
.c15d	ad 29 02	                lda pcl             ; push pc low byte on stack
.c160	48		                pha
.c161	ad 2a 02	                lda sr              ; push status byte on stack
.c164	48		                pha
.c165	ad 2b 02	                lda acc             ; load accumulator from memory
.c168	ae 2c 02	                ldx xr              ; load x from memory
.c16b	ac 2d 02	                ldy yr              ; load y from memory
.c16e	40		                rti                 ; return from interrupt (pops pc and sr)
.c16f	ae 2e 02	jsub            ldx sp              ; load stack pointer from memory
.c172	9a		                txs                 ; save value in sp register
.c173	20 55 c1	                jsr goto2           ; same as goto command
.c176	8c 2d 02	                sty yr              ; save y to memory
.c179	8e 2c 02	                stx xr              ; save x to memory
.c17c	8d 2b 02	                sta acc             ; save accumulator to memory
.c17f	08		                php                 ; push processor status on stack
.c180	68		                pla                 ; pull processor status into a
.c181	8d 2a 02	                sta sr              ; save processor status to memory
.c184	4c 66 c0	                jmp dsplyr          ; display registers
.c187	20 07 c7	dispmem         jsr crlf            ; new line
.c18a	a9 3e		                lda #">"            ; prefix > so memory can be edited in place
.c18c	20 d2 ff	                jsr chrout
.c18f	20 f2 c6	                jsr showad          ; show address of first byte on line
.c192	a0 00		                ldy #0
.c194	f0 03		                beq dmemgo          ; showad already printed a space after the address
.c196	20 ff c6	dmemlp          jsr space           ; print space between bytes
.c199	b1 c3		dmemgo          lda (tmp2),y        ; load byte from start address + y
.c19b	20 20 c7	                jsr wrtwo           ; output hex digits for byte
.c19e	c8		                iny                 ; next byte
.c19f	c0 08		                cpy #8              ; have we output 8 bytes yet?
.c1a1	90 f3		                bcc dmemlp          ; if not, output next byte
.c1a3	a0 28		                ldy #msg5-msgbas    ; if so, output : and turn on reverse video
.c1a5	20 ae c9	                jsr sndmsg          ;   before displaying ascii representation
.c1a8	a0 00		                ldy #0              ; back to first byte in line
.c1aa	b1 c3		dchar           lda (tmp2),y        ; load byte at start address + y
.c1ac	aa		                tax                 ; stash in x
.c1ad	29 bf		                and #$bf            ; clear 6th bit
.c1af	c9 22		                cmp #$22            ; is it a quote ("")?
.c1b1	f0 08		                beq ddot            ; if so, print . instead
.c1b3	8a		                txa                 ; if not, restore character
.c1b4	29 7f		                and #$7f            ; clear top bit
.c1b6	c9 20		                cmp #$20            ; is it a printable character (>= $20)?
.c1b8	8a		                txa                 ; restore character
.c1b9	b0 02		                bcs dchrok          ; if printable, output character
.c1bb	a9 2e		ddot            lda #$2e            ; if not, output '.' instaed
.c1bd	20 d2 ff	dchrok          jsr chrout
.c1c0	c8		                iny                 ; next byte
.c1c1	c0 08		                cpy #8              ; have we output 8 bytes yet?
.c1c3	90 e5		                bcc dchar           ; if not, output next byte
.c1c5	60		                rts
.c1c6	a9 00		compar          lda #0              ; bit 7 clear signals compare
>c1c8	2c		                .byte $2c           ; absolute bit opcode consumes next word (lda #$80)
.c1c9	a9 80		trans           lda #$80            ; bit 7 set signals transfer
.c1cb	8d 32 02	                sta savy            ; save compare/transfer flag in savy
.c1ce	a9 00		                lda #0              ; assume we're counting up (bit 7 clear)
.c1d0	8d 07 01	                sta upflg           ; save direction flag
.c1d3	20 c6 c7	                jsr getdif          ; get two addresses and calculate difference
.c1d6	b0 05		                bcs terror          ; carry set indicates error
.c1d8	20 29 c6	                jsr getpar          ; get destination address in tmp0
.c1db	90 03		                bcc tokay           ; carry set indicates error
.c1dd	4c b7 c0	terror          jmp error           ; handle error
.c1e0	2c 32 02	tokay           bit savy            ; transfer or compare?
.c1e3	10 27		                bpl compar1         ; high bit clear indicates compare
.c1e5	a5 c3		                lda tmp2            ; if it's a transfer, we must take steps
.c1e7	c5 c1		                cmp tmp0            ;   to avoid overwriting the source bytes before
.c1e9	a5 c4		                lda tmp2+1          ;   they have been transferred
.c1eb	e5 c2		                sbc tmp0+1          ; compare source (tmp2) to destination (tmp0)
.c1ed	b0 1d		                bcs compar1         ; and count up if source is before than desitnation
.c1ef	ad 2f 02	                lda store           ; otherwise, start at end and count down...
.c1f2	65 c1		                adc tmp0            ; add length (store) to desintation (tmp0)
.c1f4	85 c1		                sta tmp0            ; to calculate end of destination
.c1f6	ad 30 02	                lda store+1
.c1f9	65 c2		                adc tmp0+1
.c1fb	85 c2		                sta tmp0+1
.c1fd	a2 01		                ldx #1              ; change source pointer from beginning to end
.c1ff	bd 0b 01	tdown           lda stash,x         ; tmp2 = source end (stash)
.c202	95 c3		                sta tmp2,x
.c204	ca		                dex
.c205	10 f8		                bpl tdown
.c207	a9 80		                lda #$80            ; high bit set in upflg means count down
.c209	8d 07 01	                sta upflg
.c20c	20 07 c7	compar1         jsr crlf            ; new line
.c20f	a0 00		                ldy #0              ; no offset from pointer
.c211	20 e1 ff	tcloop          jsr stop            ; check for stop key
.c214	f0 31		                beq texit           ; exit if pressed
.c216	b1 c3		                lda (tmp2),y        ; load byte from source
.c218	2c 32 02	                bit savy            ; transfer or compare?
.c21b	10 02		                bpl compar2         ; skip store if comparing
.c21d	91 c1		                sta (tmp0),y        ; otherwise, store in destination
.c21f	d1 c1		compar2         cmp (tmp0),y        ; compare to destination
.c221	f0 03		                beq tmvad           ; don't show address if equal
.c223	20 f2 c6	                jsr showad          ; show address
.c226	2c 07 01	tmvad           bit upflg           ; counting up or down?
.c229	30 0b		                bmi tdecad          ; high bit set means we're counting down
.c22b	e6 c1		                inc tmp0            ; increment destination low byte
.c22d	d0 10		                bne tincok
.c22f	e6 c2		                inc tmp0+1          ; carry to high byte if necessary
.c231	d0 0c		                bne tincok
.c233	4c b7 c0	                jmp error           ; error if high byte overflowed
.c236	20 79 c7	tdecad          jsr suba1           ; decrement destination (tmp0)
.c239	20 ab c7	                jsr sub21           ; decrement source (tmp2)
.c23c	4c 42 c2	                jmp tmor
.c23f	20 9f c7	tincok          jsr adda2           ; increment source (tmp2)
.c242	20 8d c7	tmor            jsr sub13           ; decrement length
.c245	b0 ca		                bcs tcloop          ; loop until length is 0
.c247	4c 88 c0	texit           jmp strt            ; back to main loop
.c24a	20 c6 c7	hunt            jsr getdif          ; get start (tmp2) and end (tmp0) of haystack
.c24d	b0 59		                bcs herror          ; carry indicates error
.c24f	a0 00		                ldy #0
.c251	20 48 c7	                jsr getchr          ; get a single character
.c254	c9 27		                cmp #"'"            ; is it a single quote?
.c256	d0 16		                bne nostrh          ; if not, input needle as hex bytes
.c258	20 48 c7	                jsr getchr          ; if so, input needle as string
.c25b	c9 00		                cmp #0
.c25d	f0 49		                beq herror          ; error if needle isn't at least one byte
.c25f	99 17 01	hpar            sta stage,y         ; save char in staging area
.c262	c8		                iny
.c263	20 48 c7	                jsr getchr          ; get another char
.c266	f0 18		                beq htgo            ; if it's null start searching
.c268	c0 1e		                cpy #estage-stage   ; have we filled up the needle staging area?
.c26a	d0 f3		                bne hpar            ; if not, get another character
.c26c	f0 12		                beq htgo            ; if so, start searching
.c26e	20 26 c6	nostrh          jsr rdpar           ; read hex bytes if string not indicated
.c271	a5 c1		hlp             lda tmp0            ; save last read byte in staging area
.c273	99 17 01	                sta stage,y
.c276	c8		                iny                 ; get another hex byte
.c277	20 29 c6	                jsr getpar
.c27a	b0 04		                bcs htgo            ; if there is none, start searching
.c27c	c0 1e		                cpy #estage-stage   ; have we filled up the needle staging area?
.c27e	d0 f1		                bne hlp             ; if not, get another byte
.c280	8c 32 02	htgo            sty savy            ; save length of needle
.c283	20 07 c7	                jsr crlf            ; new line
.c286	a0 00		hscan           ldy #0
.c288	b1 c3		hlp3            lda (tmp2),y        ; get first byte in haystack
.c28a	d9 17 01	                cmp stage,y         ; compare it to first byte of needle
.c28d	d0 09		                bne hnoft           ; if it doesn't match, we haven't found anything
.c28f	c8		                iny                 ; if it does, check the next byte
.c290	cc 32 02	                cpy savy            ; have we reached the end of the needle?
.c293	d0 f3		                bne hlp3            ; if not, keep comparing bytes
.c295	20 f2 c6	                jsr showad          ; match found, show address
.c298	20 e1 ff	hnoft           jsr stop            ; no match, check for stop key
.c29b	f0 08		                beq hexit           ; exit prematurely if pressed
.c29d	20 9f c7	                jsr adda2           ; increment haystack pointer
.c2a0	20 8d c7	                jsr sub13           ; decrement haystack length
.c2a3	b0 e1		                bcs hscan           ; still more haystack? keep searching
.c2a5	4c 88 c0	hexit           jmp strt            ; back to main loop
.c2a8	4c b7 c0	herror          jmp error           ; handle error
.c2ab	a0 01		ld              ldy #1              ; default to reading from tape, device #1
.c2ad	84 ba		                sty fa
.c2af	84 b9		                sty sadd            ; default to secondary address #1
.c2b1	88		                dey
.c2b2	84 b7		                sty fnlen           ; start with an empty filename
.c2b4	84 90		                sty satus           ; clear status
.c2b6	a9 01		                lda #>stage         ; set filename pointer to staging buffer
.c2b8	85 bc		                sta fnadr+1
.c2ba	a9 17		                lda #<stage
.c2bc	85 bb		                sta fnadr
.c2be	20 48 c7	l1              jsr getchr          ; get a character
.c2c1	f0 59		                beq lshort          ; no filename given, try load or verify from tape
.c2c3	c9 20		                cmp #$20            ; skip leading spaces
.c2c5	f0 f7		                beq l1
.c2c7	c9 22		                cmp #$22            ; error if filename doesn't start with a quote
.c2c9	d0 16		                bne lerror
.c2cb	ae 31 02	                ldx chrpnt          ; load current char pointer into index reg
.c2ce	bd 00 02	l3              lda inbuff,x        ; load current char from buffer to accumulator
.c2d1	f0 49		                beq lshort          ; no filename given, try load or verify from tape
.c2d3	e8		                inx                 ; next char
.c2d4	c9 22		                cmp #$22            ; is it a quote?
.c2d6	f0 0c		                beq l8              ; if so, we've reached the end of the filename
.c2d8	91 bb		                sta (fnadr),y       ; if not, save character in filename buffer
.c2da	e6 b7		                inc fnlen           ; increment filename length
.c2dc	c8		                iny
.c2dd	c0 1e		                cpy #estage-stage   ; check whether buffer is full
.c2df	90 ed		                bcc l3              ; if not, get another character
.c2e1	4c b7 c0	lerror          jmp error           ; if so, handle error
.c2e4	8e 31 02	l8              stx chrpnt          ; set character pointer to the current index
.c2e7	20 48 c7	                jsr getchr          ; eat separator between filename and device #
.c2ea	f0 30		                beq lshort          ; no separator, try to load or verify from tape
.c2ec	20 29 c6	                jsr getpar          ; get device number
.c2ef	b0 2b		                bcs lshort          ; no device # given, try load or verify from tape
.c2f1	a5 c1		                lda tmp0            ; set device number for kernal routines
.c2f3	85 ba		                sta fa
.c2f5	20 29 c6	                jsr getpar          ; get start address for load or save in tmp0
.c2f8	b0 22		                bcs lshort          ; no start address, try to load or verify
.c2fa	20 62 c7	                jsr copy12          ; transfer start address to tmp2
.c2fd	20 29 c6	                jsr getpar          ; get end address for save in tmp0
.c300	b0 3d		                bcs ldaddr          ; no end address, try to load to given start addr
.c302	20 07 c7	                jsr crlf            ; new line
.c305	a6 c1		                ldx tmp0            ; put low byte of end address in x
.c307	a4 c2		                ldy tmp0+1          ; put high byte of end address in y
.c309	ad 32 02	                lda savy            ; confirm that we're doing a save
.c30c	c9 53		                cmp #"s"
.c30e	d0 d1		                bne lerror          ; if not, error due to too many params
.c310	a9 00		                lda #0
.c312	85 b9		                sta sadd            ; set secondary address to 0
.c314	a9 c3		                lda #tmp2           ; put addr of zero-page pointer to data in a
.c316	20 d8 ff	                jsr save            ; call kernal save routine
.c319	4c 88 c0	lsvxit          jmp strt            ; back to mainloop
.c31c	ad 32 02	lshort          lda savy            ; check which command we received
.c31f	c9 56		                cmp #"v"
.c321	f0 06		                beq loadit          ; we're doing a verify so don't set a to 0
.c323	c9 4c		                cmp #"l"
.c325	d0 ba		                bne lerror          ; error due to not enough params for save
.c327	a9 00		                lda #0              ; 0 in a signals load, anything else is verify
.c329	20 d5 ff	loadit          jsr load            ; call kernal load routine
.c32c	a5 90		                lda satus           ; get i/o status
.c32e	29 10		                and #$10            ; check bit 5 for checksum error
.c330	f0 e7		                beq lsvxit          ; if no error go back to mainloop
.c332	ad 32 02	                lda savy            ; ?? not sure what these two lines are for...
.c335	f0 aa		                beq lerror          ; ?? savy will never be 0, so why check?
.c337	a0 2a		                ldy #msg6-msgbas    ; display "error" if checksum didn't match
.c339	20 ae c9	                jsr sndmsg
.c33c	4c 88 c0	                jmp strt            ; back to mainloop
.c33f	a6 c3		ldaddr          ldx tmp2            ; load address low byte in x
.c341	a4 c4		                ldy tmp2+1          ; load address high byte in y
.c343	a9 00		                lda #0              ; 0 in a signals load
.c345	85 b9		                sta sadd            ; secondary addr 0 means load to addr in x and y
.c347	f0 d3		                beq lshort          ; execute load
.c349	20 c6 c7	fill            jsr getdif          ; start in tmp2, end in stash, length in store
.c34c	b0 59		                bcs aerror          ; carry set indicates error
.c34e	20 29 c6	                jsr getpar          ; get value to fill in tmp0
.c351	b0 54		                bcs aerror          ; carry set indicates error
.c353	20 48 c7	                jsr getchr          ; any more characters triggers an error
.c356	d0 4f		                bne aerror
.c358	a0 00		                ldy #0              ; no offset
.c35a	a5 c1		fillp           lda tmp0            ; load value to fill in accumulator
.c35c	91 c3		                sta (tmp2),y        ; store fill value in current address
.c35e	20 e1 ff	                jsr stop            ; check for stop key
.c361	f0 08		                beq fstart          ; if pressed, back to main loop
.c363	20 9f c7	                jsr adda2           ; increment address
.c366	20 8d c7	                jsr sub13           ; decrement length
.c369	b0 ef		                bcs fillp           ; keep going until length reaches 0
.c36b	4c 88 c0	fstart          jmp strt            ; back to main loop
.c36e	b0 37		assem           bcs aerror          ; error if no address given
.c370	20 62 c7	                jsr copy12          ; copy address to tmp2
.c373	a2 00		aget1           ldx #0
.c375	8e 0e 01	                stx u0aa0+1         ; clear byte that mnemonic gets shifted into
.c378	8e 08 01	                stx digcnt          ; clear digit count
.c37b	20 48 c7	aget2           jsr getchr          ; get a char
.c37e	d0 04		                bne almor           ; proceed if the character isn't null
.c380	e0 00		                cpx #0              ; it's null, have read a mnemonic yet?
.c382	f0 e7		                beq fstart          ; if not, silently go back to main loop
.c384	c9 20		almor           cmp #$20            ; skip leading spaces
.c386	f0 eb		                beq aget1
.c388	9d 02 01	                sta mnemw,x         ; put character in mnemonic buffer
.c38b	e8		                inx
.c38c	e0 03		                cpx #3              ; have we read 3 characters yet?
.c38e	d0 eb		                bne aget2           ; if not, get next character
.c390	ca		asqeez          dex                 ; move to previous char
.c391	30 17		                bmi aoprnd          ; if we're done with mnemonic, look for operand
.c393	bd 02 01	                lda mnemw,x         ; get current character
.c396	38		                sec                 ; pack 3-letter mnemonic into 2 bytes (15 bits)
.c397	e9 3f		                sbc #$3f            ; subtract $3f from ascii code so a-z = 2 to 27
.c399	a0 05		                ldy #$05            ; letters now fit in 5 bits; shift them out
.c39b	4a		ashift          lsr a               ;   into the first two bytes of the inst buffer
.c39c	6e 0e 01	                ror u0aa0+1         ; catch the low bit from accumulator in right byte
.c39f	6e 0d 01	                ror u0aa0           ; catch the low bit from right byte in left byte
.c3a2	88		                dey                 ; count down bits
.c3a3	d0 f6		                bne ashift          ; keep looping until we reach zero
.c3a5	f0 e9		                beq asqeez          ; unconditional branch to handle next char
.c3a7	4c b7 c0	aerror          jmp error           ; handle error
.c3aa	a2 02		aoprnd          ldx #2              ; mnemonic is in first two bytes so start at third
.c3ac	ad 08 01	ascan           lda digcnt          ; did we find address digits last time?
.c3af	d0 2d		                bne aform1          ; if so, look for mode chars
.c3b1	20 51 c6	                jsr rdval           ; otherwise, look for an address
.c3b4	f0 25		                beq aform0          ; we didn't find an address, look for characters
.c3b6	b0 ef		                bcs aerror          ; carry flag indicates error
.c3b8	a9 24		                lda #"$"
.c3ba	9d 0d 01	                sta u0aa0,x         ; prefix addresses with $
.c3bd	e8		                inx                 ; next position in buffer
.c3be	a0 04		                ldy #4              ; non-zero page addresses are 4 hex digits
.c3c0	ad 0a 01	                lda numbit          ; check numeric base in which address was given
.c3c3	c9 08		                cmp #8              ; for addresses given in octal or binary
.c3c5	90 05		                bcc aaddr           ;   use only the high byte to determine page
.c3c7	cc 08 01	                cpy digcnt          ; for decimal or hex, force non-zero page addressing
.c3ca	f0 06		                beq afill0          ;   if address was given with four digits or more
.c3cc	a5 c2		aaddr           lda tmp0+1          ; check whether high byte of address is zero
.c3ce	d0 02		                bne afill0          ; non-zero high byte means we're not in zero page
.c3d0	a0 02		                ldy #2              ; if it's in zero page, addr is 2 hex digits
.c3d2	a9 30		afill0          lda #$30            ; use 0 as placeholder for each hex digit in addr
.c3d4	9d 0d 01	afil0l          sta u0aa0,x         ; put placeholder in assembly buffer
.c3d7	e8		                inx                 ; move to next byte in buffer
.c3d8	88		                dey                 ; decrement number of remaining digits
.c3d9	d0 f9		                bne afil0l          ; loop until all digits have been placed
.c3db	ce 31 02	aform0          dec chrpnt          ; non-numeric input; back 1 char to see what it was
.c3de	20 48 c7	aform1          jsr getchr          ; get next character
.c3e1	f0 0e		                beq aescan          ; if there is none, we're finished scanning
.c3e3	c9 20		                cmp #$20            ; skip spaces
.c3e5	f0 c5		                beq ascan
.c3e7	9d 0d 01	                sta u0aa0,x         ; store character in assembly buffer
.c3ea	e8		                inx                 ; move to next byte in buffer
.c3eb	e0 0a		                cpx #u0aae-u0aa0    ; is instruction buffer full?
.c3ed	90 bd		                bcc ascan           ; if not, keep scanning
.c3ef	b0 b6		                bcs aerror          ; error if buffer is full
.c3f1	8e 2f 02	aescan          stx store           ; save number of bytes in assembly buffer
.c3f4	a2 00		                ldx #0              ; start at opcode $00 and check every one until
.c3f6	8e 06 01	                stx opcode          ;   we find one that matches our criteria
.c3f9	a2 00		atryop          ldx #0
.c3fb	8e 33 02	                stx u9f             ; reset index into work buffer
.c3fe	ad 06 01	                lda opcode
.c401	20 b8 c5	                jsr instxx          ; look up instruction format for current opcode
.c404	ae 00 01	                ldx acmd            ; save addressing command for later
.c407	8e 30 02	                stx store+1
.c40a	aa		                tax                 ; use current opcode as index
.c40b	bd 70 cb	                lda mnemr,x         ; check right byte of compressed mnemonic
.c40e	20 df c4	                jsr chekop
.c411	bd 30 cb	                lda mneml,x         ; check left byte of compressed mnemonic
.c414	20 df c4	                jsr chekop
.c417	a2 06		                ldx #6              ; 6 possible characters to check against operand
.c419	e0 03		tryit           cpx #3              ; are we on character 3?
.c41b	d0 14		                bne trymod          ; if not, check operand characters
.c41d	ac 01 01	                ldy length          ; otherwise, check number of bytes in operand
.c420	f0 0f		                beq trymod          ; if zero, check operand characters
.c422	ad 00 01	tryad           lda acmd            ; otherwise, look for an address
.c425	c9 e8		                cmp #$e8            ; special case for relative addressing mode
.c427	a9 30		                lda #$30            ; '0' is the digit placeholder we're looking for
.c429	b0 1e		                bcs try4b           ; acmd >= $e8 indicates relative addressing
.c42b	20 dc c4	                jsr chek2b          ; acmd < $e8 indicates normal addressing
.c42e	88		                dey                 ; consume byte
.c42f	d0 f1		                bne tryad           ; check for 2 more digits if not zero-page
.c431	0e 00 01	trymod          asl acmd            ; shift a bit out of the addressing command
.c434	90 0e		                bcc ub4df           ; if it's zero, skip checking current character
.c436	bd 23 cb	                lda char1-1,x
.c439	20 df c4	                jsr chekop          ; otherwise first character against operand
.c43c	bd 29 cb	                lda char2-1,x       ; get second character to check
.c43f	f0 03		                beq ub4df           ; if it's zero, skip checking it
.c441	20 df c4	                jsr chekop          ; otherwise check it against hte operand
.c444	ca		ub4df           dex                 ; move to next character
.c445	d0 d2		                bne tryit           ; repeat tests
.c447	f0 06		                beq trybran
.c449	20 dc c4	try4b           jsr chek2b          ; check for 4 digit address placeholder
.c44c	20 dc c4	                jsr chek2b          ;   by checking for 2 digits twice
.c44f	ad 2f 02	trybran         lda store           ; get number of bytes in assembly buffer
.c452	cd 33 02	                cmp u9f             ; more bytes left to check?
.c455	f0 03		                beq abran           ; if not, we've found a match; build instruction
.c457	4c ec c4	                jmp bumpop          ; if so, this opcode doesn't match; try the next
.c45a	ac 01 01	abran           ldy length          ; get number of bytes in operand
.c45d	f0 32		                beq a1byte          ; if none, just output the opcode
.c45f	ad 30 02	                lda store+1         ; otherwise check the address format
.c462	c9 9d		                cmp #$9d            ; is it a relative branch?
.c464	d0 23		                bne objput          ; if not, skip relative branch calculation
.c466	a5 c1		                lda tmp0            ; calculate the difference between the current
.c468	e5 c3		                sbc tmp2            ;   address and the branch target (low byte)
.c46a	aa		                tax                 ; save it in x
.c46b	a5 c2		                lda tmp0+1          ; borrow from the high byte if necessary
.c46d	e5 c4		                sbc tmp2+1
.c46f	90 08		                bcc abback          ; if result is negative, we're branching back
.c471	d0 66		                bne serror          ; high bytes must be equal when branching forward
.c473	e0 82		                cpx #$82            ; difference between low bytes must be < 130
.c475	b0 62		                bcs serror          ; error if the address is too far away
.c477	90 08		                bcc abranx
.c479	a8		abback          tay                 ; when branching backward high byte of target must
.c47a	c8		                iny                 ;   be 1 less than high byte of current address
.c47b	d0 5c		                bne serror          ; if not, it's too far away
.c47d	e0 82		                cpx #$82            ; difference between low bytes must be < 130
.c47f	90 58		                bcc serror          ; if not, it's too far away
.c481	ca		abranx          dex                 ; adjust branch target relative to the
.c482	ca		                dex                 ;   instruction following this one
.c483	8a		                txa
.c484	ac 01 01	                ldy length          ; load length of operand
.c487	d0 03		                bne objp2           ; don't use the absolute address
.c489	b9 c0 00	objput          lda tmp0-1,y        ; get the operand
.c48c	91 c3		objp2           sta (tmp2),y        ; store it after the opcode
.c48e	88		                dey
.c48f	d0 f8		                bne objput          ; copy the other byte of operand if there is one
.c491	ad 06 01	a1byte          lda opcode          ; put opcode into instruction
.c494	91 c3		                sta (tmp2),y
.c496	20 07 c7	                jsr crlf            ; carriage return
.c499	a9 91		                lda #$91            ; back up one line
.c49b	20 d2 ff	                jsr chrout
.c49e	a0 30		                ldy #msg7-msgbas    ; "a " prefix
.c4a0	20 9b c9	                jsr sndclr          ; clear line
.c4a3	20 3a c5	                jsr dislin          ; disassemble the instruction we just assembled
.c4a6	ee 01 01	                inc length          ; instruction length = operand length + 1 byte
.c4a9	ad 01 01	                lda length          ;   for the opcode
.c4ac	20 a1 c7	                jsr bumpad2         ; increment address by length of instruction
.c4af	a9 41		                lda #"a"            ; stuff keyboard buffer with next assemble command:
.c4b1	8d 77 02	                sta keyd            ;   "a xxxx " where xxxx is the next address
.c4b4	a9 20		                lda #" "            ;   after the previously assembled instruction
.c4b6	8d 78 02	                sta keyd+1
.c4b9	8d 7d 02	                sta keyd+6
.c4bc	a5 c4		                lda tmp2+1          ; convert high byte of next address to hex
.c4be	20 30 c7	                jsr asctwo
.c4c1	8d 79 02	                sta keyd+2          ; put it in the keyboard buffer
.c4c4	8e 7a 02	                stx keyd+3
.c4c7	a5 c3		                lda tmp2            ; convert low byte of next address to hex
.c4c9	20 30 c7	                jsr asctwo
.c4cc	8d 7b 02	                sta keyd+4          ; put it in the keyboard buffer
.c4cf	8e 7c 02	                stx keyd+5
.c4d2	a9 07		                lda #7              ; set number of chars in keyboard buffer
.c4d4	85 c6		                sta ndx
.c4d6	4c 88 c0	                jmp strt            ; back to main loop
.c4d9	4c b7 c0	serror          jmp error           ; handle error
.c4dc	20 df c4	chek2b          jsr chekop          ; check two bytes against value in accumulator
.c4df	8e 05 01	chekop          stx savx            ; stash x
.c4e2	ae 33 02	                ldx u9f             ; get current index into work buffer
.c4e5	dd 0d 01	                cmp u0aa0,x         ; check whether this opcode matches the buffer
.c4e8	f0 0a		                beq opok            ;   matching so far, check the next criteria
.c4ea	68		                pla                 ; didn't match, so throw away return address
.c4eb	68		                pla                 ;   on the stack because we're starting over
.c4ec	ee 06 01	bumpop          inc opcode          ; check the next opcode
.c4ef	f0 e8		                beq serror          ; error if we tried every opcode and none fit
.c4f1	4c f9 c3	                jmp atryop          ; start over with new opcode
.c4f4	ee 33 02	opok            inc u9f             ; opcode matches so far; check the next criteria
.c4f7	ae 05 01	                ldx savx            ; restore x
.c4fa	60		                rts
.c4fb	b0 08		disass          bcs dis0ad          ; if no address was given, start from last address
.c4fd	20 62 c7	                jsr copy12          ; copy start address to tmp2
.c500	20 29 c6	                jsr getpar          ; get end address in tmp0
.c503	90 06		                bcc dis2ad          ; if one was given, skip default
.c505	a9 14		dis0ad          lda #$14            ; disassemble 14 bytes by default
.c507	85 c1		                sta tmp0            ; store length in tmp0
.c509	d0 05		                bne disgo           ; skip length calculation
.c50b	20 6b c7	dis2ad          jsr sub12           ; calculate number of bytes between start and end
.c50e	90 1f		                bcc derror          ; error if end address is before start address
.c510	20 95 c9	disgo           jsr cline           ; clear the current line
.c513	20 e1 ff	                jsr stop            ; check for stop key
.c516	f0 14		                beq disexit         ; exit early if pressed
.c518	20 32 c5	                jsr dsout1          ; output disassembly prefix ". "
.c51b	ee 01 01	                inc length
.c51e	ad 01 01	                lda length          ; add length of last instruction to start address
.c521	20 a1 c7	                jsr bumpad2
.c524	ad 01 01	                lda length          ; subtract length of last inst from end address
.c527	20 7b c7	                jsr suba2
.c52a	b0 e4		                bcs disgo
.c52c	4c 88 c0	disexit         jmp strt            ; back to mainloop
.c52f	4c b7 c0	derror          jmp error
.c532	a9 2e		dsout1          lda #"."            ; output ". " prefix to allow edit and reassemble
.c534	20 d2 ff	                jsr chrout
.c537	20 ff c6	                jsr space
.c53a	20 f2 c6	dislin          jsr showad          ; show the address of the instruction
.c53d	20 ff c6	                jsr space           ; insert a space
.c540	a0 00		                ldy #0              ; no offset
.c542	b1 c3		                lda (tmp2),y        ; load operand of current instruction
.c544	20 b8 c5	                jsr instxx          ; get mnemonic and addressing mode for opcode
.c547	48		                pha                 ; save index into mnemonic table
.c548	ae 01 01	                ldx length          ; get length of operand
.c54b	e8		                inx                 ; add 1 byte for opcode
.c54c	ca		dsbyt           dex                 ; decrement index
.c54d	10 0e		                bpl dshex           ; show hex for byte being disassembled
.c54f	8c 32 02	                sty savy            ; save index
.c552	a0 32		                ldy #msg8-msgbas    ; skip 3 spaces
.c554	20 ae c9	                jsr sndmsg
.c557	ac 32 02	                ldy savy            ; restore index
.c55a	4c 62 c5	                jmp nxbyt
.c55d	b1 c3		dshex           lda (tmp2),y        ; show hex for byte
.c55f	20 fc c6	                jsr wrbyte
.c562	c8		nxbyt           iny                 ; next byte
.c563	c0 03		                cpy #3              ; have we output 3 bytes yet?
.c565	90 e5		                bcc dsbyt           ; if not, loop
.c567	68		                pla                 ; restore index into mnemonic table
.c568	a2 03		                ldx #3              ; 3 letters in mnemonic
.c56a	20 00 c6	                jsr propxx          ; print mnemonic
.c56d	a2 06		                ldx #6              ; 6 possible address mode character combos
.c56f	e0 03		pradr1          cpx #3              ; have we checked the third combo yet?
.c571	d0 16		                bne pradr3          ; if so, output the leading characters
.c573	ac 01 01	                ldy length          ; get the length of the operand
.c576	f0 11		                beq pradr3          ; if it's zero, there's no operand to print
.c578	ad 00 01	pradr2          lda acmd            ; otherwise, get the addressing mode
.c57b	c9 e8		                cmp #$e8            ; check for relative addressing
.c57d	08		                php                 ; save result of check
.c57e	b1 c3		                lda (tmp2),y        ; get the operand
.c580	28		                plp                 ; restore result of check
.c581	b0 1d		                bcs relad           ; handle a relative address
.c583	20 20 c7	                jsr wrtwo           ; output digits from address
.c586	88		                dey
.c587	d0 ef		                bne pradr2          ; repeat for next byte of operand, if there is one
.c589	0e 00 01	pradr3          asl acmd            ; check whether addr mode uses the current char
.c58c	90 0e		                bcc pradr4          ; if not, skip it
.c58e	bd 23 cb	                lda char1-1,x       ; look up the first char in the table
.c591	20 d2 ff	                jsr chrout          ; print first char
.c594	bd 29 cb	                lda char2-1,x       ; look up the second char in the table
.c597	f0 03		                beq pradr4          ; if there's no second character, skip it
.c599	20 d2 ff	                jsr chrout          ; print second char
.c59c	ca		pradr4          dex                 ; next potential address mode character
.c59d	d0 d0		                bne pradr1          ; loop if we haven't checked them all yet
.c59f	60		                rts                 ; back to caller
.c5a0	20 ac c5	relad           jsr ub64d           ; calculate absolute address from relative
.c5a3	18		                clc
.c5a4	69 01		                adc #1              ; adjust address relative to next instruction
.c5a6	d0 01		                bne relend          ; don't increment high byte unless we overflowed
.c5a8	e8		                inx                 ; increment high byte
.c5a9	4c f6 c6	relend          jmp wraddr          ; print address
.c5ac	a6 c4		ub64d           ldx tmp2+1          ; get high byte of current address
.c5ae	a8		                tay                 ; is relative address positive or negative?
.c5af	10 01		                bpl relc2           ; if positive, leave high byte alone
.c5b1	ca		                dex                 ; if negative, decrement high byte
.c5b2	65 c3		relc2           adc tmp2            ; add relative address to low byte
.c5b4	90 01		                bcc relc3           ; if there's no carry, we're done
.c5b6	e8		                inx                 ; if there's a carry, increment the high byte
.c5b7	60		relc3           rts
.c5b8	a8		instxx          tay                 ; stash opcode in accumulator in y for later
.c5b9	4a		                lsr a               ; is opcode even or odd?
.c5ba	90 0b		                bcc ieven
.c5bc	4a		                lsr a
.c5bd	b0 17		                bcs err             ; invalid opcodes xxxxxx11
.c5bf	c9 22		                cmp #$22
.c5c1	f0 13		                beq err             ; invalid opcode 10001001
.c5c3	29 07		                and #$07            ; mask bits to 10000xxx
.c5c5	09 80		                ora #$80
.c5c7	4a		ieven           lsr a               ; lsb determines whether to use left/right nybble
.c5c8	aa		                tax                 ; get format index using remaining high bytes
.c5c9	bd d2 ca	                lda mode,x
.c5cc	b0 04		                bcs rtmode          ; look at left or right nybble based on carry bit
.c5ce	4a		                lsr a               ; if carry = 0, use left nybble
.c5cf	4a		                lsr a
.c5d0	4a		                lsr a
.c5d1	4a		                lsr a
.c5d2	29 0f		rtmode          and #$0f            ; if carry = 1, use right nybble
.c5d4	d0 04		                bne getfmt
.c5d6	a0 80		err             ldy #$80            ; substitute 10000000 for invalid opcodes
.c5d8	a9 00		                lda #0
.c5da	aa		getfmt          tax
.c5db	bd 16 cb	                lda mode2,x         ; lookup operand format using selected nybble
.c5de	8d 00 01	                sta acmd            ; save for later use
.c5e1	29 03		                and #$03            ; lower 2 bits indicate number of bytes in operand
.c5e3	8d 01 01	                sta length
.c5e6	98		                tya                 ; restore original opcode
.c5e7	29 8f		                and #$8f            ; mask bits to x000xxxx
.c5e9	aa		                tax                 ; save it
.c5ea	98		                tya                 ; restore original opcode
.c5eb	a0 03		                ldy #3
.c5ed	e0 8a		                cpx #$8a            ; check if opcode = 1xxx1010
.c5ef	f0 0b		                beq gtfm4
.c5f1	4a		gtfm2           lsr a               ; transform opcode into index for mnemonic table
.c5f2	90 08		                bcc gtfm4
.c5f4	4a		                lsr a               ; opcodes transformed as follows:
.c5f5	4a		gtfm3           lsr a               ; 1xxx1010->00101xxx
.c5f6	09 20		                ora #$20            ; xxxyyy01->00111xxx
.c5f8	88		                dey                 ; xxxyyy10->00111xxx
.c5f9	d0 fa		                bne gtfm3           ; xxxyy100->00110xxx
.c5fb	c8		                iny                 ; xxxxx000->000xxxxx
.c5fc	88		gtfm4           dey
.c5fd	d0 f2		                bne gtfm2
.c5ff	60		                rts
.c600	a8		propxx          tay                 ; use index in accumulator to look up mnemonic
.c601	b9 30 cb	                lda mneml,y         ;   and place a temporary copy in store
.c604	8d 2f 02	                sta store
.c607	b9 70 cb	                lda mnemr,y
.c60a	8d 30 02	                sta store+1
.c60d	a9 00		prmn1           lda #0              ; clear accumulator
.c60f	a0 05		                ldy #$05            ; shift 5 times
.c611	0e 30 02	prmn2           asl store+1         ; shift right byte
.c614	2e 2f 02	                rol store           ; rotate bits from right byte into left byte
.c617	2a		                rol a               ; rotate bits from left byte into accumulator
.c618	88		                dey                 ; next bit
.c619	d0 f6		                bne prmn2           ; loop until all bits shifted
.c61b	69 3f		                adc #$3f            ; calculate ascii code for letter by adding to '?'
.c61d	20 d2 ff	                jsr chrout          ; output letter
.c620	ca		                dex                 ; next letter
.c621	d0 ea		                bne prmn1           ; loop until all 3 letters are output
.c623	4c ff c6	                jmp space           ; output space
.c626	ce 31 02	rdpar           dec chrpnt          ; back up one char
.c629	20 51 c6	getpar          jsr rdval           ; read the value
.c62c	b0 17		                bcs gterr           ; carry set indicates error
.c62e	20 45 c7	                jsr gotchr          ; check previous character
.c631	d0 0a		                bne ckterm          ; if it's not null, check if it's a valid separator
.c633	ce 31 02	                dec chrpnt          ; back up one char
.c636	ad 08 01	                lda digcnt          ; get number of digits read
.c639	d0 11		                bne getgot          ; found some digits
.c63b	f0 0d		                beq gtnil           ; didn't find any digits
.c63d	c9 20		ckterm          cmp #$20            ; space or comma are valid separators
.c63f	f0 0b		                beq getgot          ; anything else is an error
.c641	c9 2c		                cmp #","
.c643	f0 07		                beq getgot
.c645	68		gterr           pla                 ; encountered error
.c646	68		                pla                 ; get rid of command vector pushed on stack
.c647	4c b7 c0	                jmp error           ; handle error
.c64a	38		gtnil           sec                 ; set carry to indicate no parameter found
>c64b	24		                .byte $24           ; bit zp opcode consumes next byte (clc)
.c64c	18		getgot          clc                 ; clear carry to indicate paremeter returned
.c64d	ad 08 01	                lda digcnt          ; return number of digits in a
.c650	60		                rts                 ; return to address pushed from vector table
.c651	a9 00		rdval           lda #0              ; clear temp
.c653	85 c1		                sta tmp0
.c655	85 c2		                sta tmp0+1
.c657	8d 08 01	                sta digcnt          ; clear digit counter
.c65a	8a		                txa                 ; save x and y
.c65b	48		                pha
.c65c	98		                tya
.c65d	48		                pha
.c65e	20 48 c7	rdvmor          jsr getchr          ; get next character from input buffer
.c661	f0 1e		                beq rdnilk          ; null at end of buffer
.c663	c9 20		                cmp #$20            ; skip spaces
.c665	f0 f7		                beq rdvmor
.c667	a2 03		                ldx #3              ; check numeric base [$+&%]
.c669	dd c3 cb	gnmode          cmp hikey,x
.c66c	f0 07		                beq gotmod          ; got a match, set up base
.c66e	ca		                dex
.c66f	10 f8		                bpl gnmode          ; check next base
.c671	e8		                inx                 ; default to hex
.c672	ce 31 02	                dec chrpnt          ; back up one character
.c675	bc e8 cb	gotmod          ldy modtab,x        ; get base value
.c678	bd ec cb	                lda lentab,x        ; get bits per digit
.c67b	8d 0a 01	                sta numbit          ; store bits per digit
.c67e	20 48 c7	nudig           jsr getchr          ; get next char in a
.c681	f0 63		rdnilk          beq rdnil           ; end of number if no more characters
.c683	38		                sec
.c684	e9 30		                sbc #$30            ; subtract ascii value of 0 to get numeric value
.c686	90 5e		                bcc rdnil           ; end of number if character was less than 0
.c688	c9 0a		                cmp #$0a
.c68a	90 06		                bcc digmor          ; not a hex digit if less than a
.c68c	e9 07		                sbc #$07            ; 7 chars between ascii 9 and a, so subtract 7
.c68e	c9 10		                cmp #$10            ; end of number if char is greater than f
.c690	b0 54		                bcs rdnil
.c692	8d 09 01	digmor          sta indig           ; store the digit
.c695	cc 09 01	                cpy indig           ; compare base with the digit
.c698	90 4a		                bcc rderr           ; error if the digit >= the base
.c69a	f0 48		                beq rderr
.c69c	ee 08 01	                inc digcnt          ; increment the number of digits
.c69f	c0 0a		                cpy #10
.c6a1	d0 0a		                bne nodecm          ; skip the next part if not using base 10
.c6a3	a2 01		                ldx #1
.c6a5	b5 c1		declp1          lda tmp0,x          ; stash the previous 16-bit value for later use
.c6a7	9d 0b 01	                sta stash,x
.c6aa	ca		                dex
.c6ab	10 f8		                bpl declp1
.c6ad	ae 0a 01	nodecm          ldx numbit          ; number of bits to shift
.c6b0	06 c1		times2          asl tmp0            ; shift 16-bit value by specified number of bits
.c6b2	26 c2		                rol tmp0+1
.c6b4	b0 2e		                bcs rderr           ; error if we overflowed 16 bits
.c6b6	ca		                dex
.c6b7	d0 f7		                bne times2          ; shift remaining bits
.c6b9	c0 0a		                cpy #10
.c6bb	d0 18		                bne nodec2          ; skip the next part if not using base 10
.c6bd	0e 0b 01	                asl stash           ; shift the previous 16-bit value one bit left
.c6c0	2e 0c 01	                rol stash+1
.c6c3	b0 1f		                bcs rderr           ; error if we overflowed 16 bits
.c6c5	ad 0b 01	                lda stash           ; add shifted previous value to current value
.c6c8	65 c1		                adc tmp0
.c6ca	85 c1		                sta tmp0
.c6cc	ad 0c 01	                lda stash+1
.c6cf	65 c2		                adc tmp0+1
.c6d1	85 c2		                sta tmp0+1
.c6d3	b0 0f		                bcs rderr           ; error if we overflowed 16 bits
.c6d5	18		nodec2          clc
.c6d6	ad 09 01	                lda indig           ; load current digit
.c6d9	65 c1		                adc tmp0            ; add current digit to low byte
.c6db	85 c1		                sta tmp0            ; and store result back in low byte
.c6dd	8a		                txa                 ; a=0
.c6de	65 c2		                adc tmp0+1          ; add carry to high byte
.c6e0	85 c2		                sta tmp0+1          ; and store result back in high byte
.c6e2	90 9a		                bcc nudig           ; get next digit if we didn't overflow
.c6e4	38		rderr           sec                 ; set carry to indicate error
>c6e5	24		                .byte $24           ; bit zp opcode consumes next byte (clc)
.c6e6	18		rdnil           clc                 ; clear carry to indicate success
.c6e7	8c 0a 01	                sty numbit          ; save base of number
.c6ea	68		                pla                 ; restore x and y
.c6eb	a8		                tay
.c6ec	68		                pla
.c6ed	aa		                tax
.c6ee	ad 08 01	                lda digcnt          ; return number of digits in a
.c6f1	60		                rts
.c6f2	a5 c3		showad          lda tmp2
.c6f4	a6 c4		                ldx tmp2+1
.c6f6	48		wraddr          pha                 ; save low byte
.c6f7	8a		                txa                 ; put high byte in a
.c6f8	20 20 c7	                jsr wrtwo           ; output high byte
.c6fb	68		                pla                 ; restore low byte
.c6fc	20 20 c7	wrbyte          jsr wrtwo           ; output byte in a
.c6ff	a9 20		space           lda #$20            ; output space
.c701	d0 0f		                bne flip
.c703	c9 0d		chout           cmp #$0d            ; output char with special handling of cr
.c705	d0 0b		                bne flip
.c707	a9 0d		crlf            lda #$0d            ; load cr in a
.c709	24 13		                bit $13             ; check default channel
.c70b	10 05		                bpl flip            ; if high bit is clear output cr only
.c70d	20 d2 ff	                jsr chrout          ; otherwise output cr+lf
.c710	a9 0a		                lda #$0a            ; output lf
.c712	4c d2 ff	flip            jmp chrout
.c715	20 07 c7	fresh           jsr crlf            ; output cr
.c718	a9 20		                lda #$20            ; load space in a
.c71a	20 d2 ff	                jsr chrout
.c71d	4c 9e c9	                jmp snclr
.c720	8e 05 01	wrtwo           stx savx            ; save x
.c723	20 30 c7	                jsr asctwo          ; get hex chars for byte in x (lower) and a (upper)
.c726	20 d2 ff	                jsr chrout          ; output upper nybble
.c729	8a		                txa                 ; transfer lower to a
.c72a	ae 05 01	                ldx savx            ; restore x
.c72d	4c d2 ff	                jmp chrout          ; output lower nybble
.c730	48		asctwo          pha                 ; save byte
.c731	20 3a c7	                jsr ascii           ; do low nybble
.c734	aa		                tax                 ; save in x
.c735	68		                pla                 ; restore byte
.c736	4a		                lsr a               ; shift upper nybble down
.c737	4a		                lsr a
.c738	4a		                lsr a
.c739	4a		                lsr a
.c73a	29 0f		ascii           and #$0f            ; clear upper nibble
.c73c	c9 0a		                cmp #$0a            ; if less than a, skip next step
.c73e	90 02		                bcc asc1
.c740	69 06		                adc #6              ; skip ascii chars between 9 and a
.c742	69 30		asc1            adc #$30            ; add ascii char 0 to value
.c744	60		                rts
.c745	ce 31 02	gotchr          dec chrpnt
.c748	8e 05 01	getchr          stx savx
.c74b	ae 31 02	                ldx chrpnt          ; get pointer to next char
.c74e	bd 00 02	                lda inbuff,x        ; load next char in a
.c751	f0 06		                beq nochar          ; null, :, or ? signal end of buffer
.c753	c9 3a		                cmp #":"
.c755	f0 02		                beq nochar
.c757	c9 3f		                cmp #"?"
.c759	08		nochar          php
.c75a	ee 31 02	                inc chrpnt          ; next char
.c75d	ae 05 01	                ldx savx
.c760	28		                plp                 ; z flag will signal last character
.c761	60		                rts
.c762	a5 c1		copy12          lda tmp0            ; low byte
.c764	85 c3		                sta tmp2
.c766	a5 c2		                lda tmp0+1          ; high byte
.c768	85 c4		                sta tmp2+1
.c76a	60		                rts
.c76b	38		sub12           sec
.c76c	a5 c1		                lda tmp0            ; subtract low byte
.c76e	e5 c3		                sbc tmp2
.c770	85 c1		                sta tmp0
.c772	a5 c2		                lda tmp0+1
.c774	e5 c4		                sbc tmp2+1          ; subtract high byte
.c776	85 c2		                sta tmp0+1
.c778	60		                rts
.c779	a9 01		suba1           lda #1              ; shortcut to decrement by 1
.c77b	8d 05 01	suba2           sta savx            ; subtrahend in accumulator
.c77e	38		                sec
.c77f	a5 c1		                lda tmp0            ; minuend in low byte
.c781	ed 05 01	                sbc savx
.c784	85 c1		                sta tmp0
.c786	a5 c2		                lda tmp0+1          ; borrow from high byte
.c788	e9 00		                sbc #0
.c78a	85 c2		                sta tmp0+1
.c78c	60		                rts
.c78d	38		sub13           sec
.c78e	ad 2f 02	                lda store
.c791	e9 01		                sbc #1              ; decrement low byte
.c793	8d 2f 02	                sta store
.c796	ad 30 02	                lda store+1
.c799	e9 00		                sbc #0              ; borrow from high byte
.c79b	8d 30 02	                sta store+1
.c79e	60		                rts
.c79f	a9 01		adda2           lda #1              ; shortcut to increment by 1
.c7a1	18		bumpad2         clc
.c7a2	65 c3		                adc tmp2            ; add value in accumulator to low byte
.c7a4	85 c3		                sta tmp2
.c7a6	90 02		                bcc bumpex
.c7a8	e6 c4		                inc tmp2+1          ; carry to high byte
.c7aa	60		bumpex          rts
.c7ab	38		sub21           sec
.c7ac	a5 c3		                lda tmp2            ; decrement low byte
.c7ae	e9 01		                sbc #1
.c7b0	85 c3		                sta tmp2
.c7b2	a5 c4		                lda tmp2+1          ; borrow from high byte
.c7b4	e9 00		                sbc #0
.c7b6	85 c4		                sta tmp2+1
.c7b8	60		                rts
.c7b9	b0 0a		copy1p          bcs cpy1px          ; do nothing if parameter is empty
.c7bb	a5 c1		                lda tmp0            ; copy low byte
.c7bd	a4 c2		                ldy tmp0+1          ; copy high byte
.c7bf	8d 29 02	                sta pcl
.c7c2	8c 28 02	                sty pch
.c7c5	60		cpy1px          rts
.c7c6	b0 23		getdif          bcs gdifx           ; exit with error if no parameter given
.c7c8	20 62 c7	                jsr copy12          ; save start address in tmp2
.c7cb	20 29 c6	                jsr getpar          ; get end address in tmp0
.c7ce	b0 1b		                bcs gdifx           ; exit with error if no parameter given
.c7d0	a5 c1		                lda tmp0            ; save end address in stash
.c7d2	8d 0b 01	                sta stash
.c7d5	a5 c2		                lda tmp0+1
.c7d7	8d 0c 01	                sta stash+1
.c7da	20 6b c7	                jsr sub12           ; subtract start address from end address
.c7dd	a5 c1		                lda tmp0
.c7df	8d 2f 02	                sta store           ; save difference in store
.c7e2	a5 c2		                lda tmp0+1
.c7e4	8d 30 02	                sta store+1
.c7e7	90 02		                bcc gdifx           ; error if start address is after end address
.c7e9	18		                clc                 ; clear carry to indicate success
>c7ea	24		                .byte $24           ; bit zp opcode consumes next byte (sec)
.c7eb	38		gdifx           sec                 ; set carry to indicate error
.c7ec	60		                rts
.c7ed	20 26 c6	convrt          jsr rdpar           ; read a parameter
.c7f0	20 15 c7	                jsr fresh           ; next line and clear
.c7f3	a9 24		                lda #"$"            ; output $ sigil for hex
.c7f5	20 d2 ff	                jsr chrout
.c7f8	a5 c1		                lda tmp0            ; load the 16-bit value entered
.c7fa	a6 c2		                ldx tmp0+1
.c7fc	20 f6 c6	                jsr wraddr          ; print it in 4 hex digits
.c7ff	20 15 c7	                jsr fresh
.c802	a9 2b		                lda #"+"            ; output + sigil for decimal
.c804	20 d2 ff	                jsr chrout
.c807	20 38 c8	                jsr cvtdec          ; convert to bcd using hardware mode
.c80a	a9 00		                lda #0              ; clear digit counter
.c80c	a2 06		                ldx #6              ; max digits + 1
.c80e	a0 03		                ldy #3              ; bits per digit - 1
.c810	20 72 c8	                jsr nmprnt          ; print result without leading zeros
.c813	20 15 c7	                jsr fresh           ; next line and clear
.c816	a9 26		                lda #"&"            ; print & sigil for octal
.c818	20 d2 ff	                jsr chrout
.c81b	a9 00		                lda #0              ; clear digit counter
.c81d	a2 08		                ldx #8              ; max digits + 1
.c81f	a0 02		                ldy #2              ; bits per digit - 1
.c821	20 61 c8	                jsr prinum          ; output number
.c824	20 15 c7	                jsr fresh           ; next line and clear
.c827	a9 25		                lda #"%"            ; print % sigil for binary
.c829	20 d2 ff	                jsr chrout
.c82c	a9 00		                lda #0              ; clear digit counter
.c82e	a2 18		                ldx #$18            ; max digits + 1
.c830	a0 00		                ldy #0              ; bits per digit - 1
.c832	20 61 c8	                jsr prinum          ; output number
.c835	4c 88 c0	                jmp strt            ; back to mainloop
.c838	20 62 c7	cvtdec          jsr copy12          ; copy value from tmp0 to tmp2
.c83b	a9 00		                lda #0
.c83d	a2 02		                ldx #2              ; clear 3 bytes in work buffer
.c83f	9d 0d 01	decml1          sta u0aa0,x
.c842	ca		                dex
.c843	10 fa		                bpl decml1
.c845	a0 10		                ldy #16             ; 16 bits in input
.c847	08		                php                 ; save status register
.c848	78		                sei                 ; make sure no interrupts occur with bcd enabled
.c849	f8		                sed
.c84a	06 c3		decml2          asl tmp2            ; rotate bytes out of input low byte
.c84c	26 c4		                rol tmp2+1          ; .. into high byte and carry bit
.c84e	a2 02		                ldx #2              ; process 3 bytes
.c850	bd 0d 01	decdbl          lda u0aa0,x         ; load current value of byte
.c853	7d 0d 01	                adc u0aa0,x         ; add it to itself plus the carry bit
.c856	9d 0d 01	                sta u0aa0,x         ; store it back in the same location
.c859	ca		                dex                 ; decrement byte counter
.c85a	10 f4		                bpl decdbl          ; loop until all bytes processed
.c85c	88		                dey                 ; decrement bit counter
.c85d	d0 eb		                bne decml2          ; loop until all bits processed
.c85f	28		                plp                 ; restore processor status
.c860	60		                rts
.c861	48		prinum          pha                 ; save accumulator
.c862	a5 c1		                lda tmp0            ; copy input low byte to work buffer
.c864	8d 0f 01	                sta u0aa0+2
.c867	a5 c2		                lda tmp0+1          ; copy input high byte to work buffer
.c869	8d 0e 01	                sta u0aa0+1
.c86c	a9 00		                lda #0              ; clear overflow byte in work buffer
.c86e	8d 0d 01	                sta u0aa0
.c871	68		                pla                 ; restore accumulator
.c872	8d 08 01	nmprnt          sta digcnt          ; number of digits in accumulator
.c875	8c 0a 01	                sty numbit          ; bits per digit passed in y register
.c878	ac 0a 01	digout          ldy numbit          ; get bits to process
.c87b	a9 00		                lda #0              ; clear accumulator
.c87d	0e 0f 01	rolbit          asl u0aa0+2         ; shift bits out of low byte
.c880	2e 0e 01	                rol u0aa0+1         ; ... into high byte
.c883	2e 0d 01	                rol u0aa0           ; ... into overflow byte
.c886	2a		                rol a               ; ... into accumulator
.c887	88		                dey                 ; decrement bit counter
.c888	10 f3		                bpl rolbit          ; loop until all bits processed
.c88a	a8		                tay                 ; check whether accumulator is 0
.c88b	d0 09		                bne nzero           ; if not, print it
.c88d	e0 01		                cpx #1              ; have we output the max number of digits?
.c88f	f0 05		                beq nzero           ; if not, print it
.c891	ac 08 01	                ldy digcnt          ; how many digits have we output?
.c894	f0 08		                beq zersup          ; skip output if digit is 0
.c896	ee 08 01	nzero           inc digcnt          ; increment digit counter
.c899	09 30		                ora #$30            ; add numeric value to ascii '0' to get ascii char
.c89b	20 d2 ff	                jsr chrout          ; output character
.c89e	ca		zersup          dex                 ; decrement number of leading zeros
.c89f	d0 d7		                bne digout          ; next digit
.c8a1	60		                rts
.c8a2	d0 03		dstat           bne chgdev          ; if device address was given, use it
.c8a4	a2 08		                ldx #8              ; otherwise, default to 8
>c8a6	2c		                .byte $2c           ; absolute bit opcode consumes next word (ldx tmp0)
.c8a7	a6 c1		chgdev          ldx tmp0            ; load device address from parameter
.c8a9	e0 04		                cpx #4              ; make sure device address is in range 4-31
.c8ab	90 58		                bcc ioerr
.c8ad	e0 20		                cpx #32
.c8af	b0 54		                bcs ioerr
.c8b1	86 c1		                stx tmp0
.c8b3	a9 00		                lda #0              ; clear status
.c8b5	85 90		                sta satus
.c8b7	85 b7		                sta fnlen           ; empty filename
.c8b9	20 48 c7	                jsr getchr          ; get next character
.c8bc	f0 24		                beq instat1         ; null, display status
.c8be	ce 31 02	                dec chrpnt          ; back up 1 char
.c8c1	c9 24		                cmp #"$"            ; $, display directory
.c8c3	f0 43		                beq direct
.c8c5	a5 c1		                lda tmp0            ; command specified device to listen
.c8c7	20 b1 ff	                jsr listen
.c8ca	a9 6f		                lda #$6f            ; secondary address 15 (only low nybble used)
.c8cc	20 93 ff	                jsr second
.c8cf	ae 31 02	dcomd           ldx chrpnt          ; get next character from buffer
.c8d2	ee 31 02	                inc chrpnt
.c8d5	bd 00 02	                lda inbuff,x
.c8d8	f0 05		                beq instat          ; break out of loop if it's null
.c8da	20 a8 ff	                jsr ciout           ; otherwise output it to the serial bus
.c8dd	90 f0		                bcc dcomd           ; unconditional loop: ciout clears carry before rts
.c8df	20 ae ff	instat          jsr unlsn           ; command device to unlisten
.c8e2	20 07 c7	instat1         jsr crlf            ; new line
.c8e5	a5 c1		                lda tmp0            ; load device address
.c8e7	20 b4 ff	                jsr talk            ; command device to talk
.c8ea	a9 6f		                lda #$6f            ; secondary address 15 (only low nybble used)
.c8ec	20 96 ff	                jsr tksa
.c8ef	20 a5 ff	rdstat          jsr acptr           ; read byte from serial bus
.c8f2	20 d2 ff	                jsr chrout          ; print it
.c8f5	c9 0d		                cmp #$0d            ; if the byte is cr, exit loop
.c8f7	f0 06		                beq dexit
.c8f9	a5 90		                lda satus           ; check status
.c8fb	29 bf		                and #$bf            ; ignore eoi bit
.c8fd	f0 f0		                beq rdstat          ; if no errors, read next byte
.c8ff	20 ab ff	dexit           jsr untlk           ; command device to stop talking
.c902	4c 88 c0	                jmp strt            ; back to mainloop
.c905	4c b7 c0	ioerr           jmp error           ; handle error
.c908	a5 c1		direct          lda tmp0            ; load device address
.c90a	20 b1 ff	                jsr listen          ; command device to listen
.c90d	a9 f0		                lda #$f0            ; secondary address 0 (only low nybble used)
.c90f	20 93 ff	                jsr second
.c912	ae 31 02	                ldx chrpnt          ; get index of next character
.c915	bd 00 02	dir2            lda inbuff,x        ; get next character from buffer
.c918	f0 06		                beq dir3            ; break if it's null
.c91a	20 a8 ff	                jsr ciout           ; send character to device
.c91d	e8		                inx                 ; increment characer index
.c91e	d0 f5		                bne dir2            ; loop if it hasn't wrapped to zero
.c920	20 ae ff	dir3            jsr unlsn           ; command device to unlisten
.c923	20 07 c7	                jsr crlf            ; new line
.c926	a5 c1		                lda tmp0            ; load device address
.c928	48		                pha                 ; save on stack
.c929	20 b4 ff	                jsr talk            ; command device to talk
.c92c	a9 60		                lda #$60            ; secondary address 0 (only low nybble used)
.c92e	20 96 ff	                jsr tksa
.c931	a0 03		                ldy #3              ; read 3 16-bit values from device
.c933	8c 2f 02	dirlin          sty store           ;   ignore the first 2; 3rd is file size
.c936	20 a5 ff	dlink           jsr acptr           ; read low byte from device
.c939	85 c1		                sta tmp0            ; store it
.c93b	a5 90		                lda satus           ; check status
.c93d	d0 44		                bne drexit          ; exit if error or eof occurred
.c93f	20 a5 ff	                jsr acptr           ; read high byte from device
.c942	85 c2		                sta tmp0+1          ; store it
.c944	a5 90		                lda satus           ; check status
.c946	d0 3b		                bne drexit          ; exit if error or eof cocurred
.c948	ce 2f 02	                dec store           ; decrement byte count
.c94b	d0 e9		                bne dlink           ; loop if bytes remain
.c94d	20 38 c8	                jsr cvtdec          ; convert last 16-bit value to decimal
.c950	a9 00		                lda #0              ; clear digit count
.c952	a2 06		                ldx #6              ; max 6 digits
.c954	a0 03		                ldy #3              ; 3 bits per digit
.c956	20 72 c8	                jsr nmprnt          ; output number
.c959	a9 20		                lda #" "            ; output space
.c95b	20 d2 ff	                jsr chrout
.c95e	20 a5 ff	dname           jsr acptr           ; get a filename character from the device
.c961	f0 0a		                beq dmore           ; if it's null, break out of loop
.c963	a6 90		                ldx satus           ; check for errors or eof
.c965	d0 1c		                bne drexit          ; if found exit early
.c967	20 d2 ff	                jsr chrout          ; output character
.c96a	18		                clc
.c96b	90 f1		                bcc dname           ; unconditional branch to read next char
.c96d	20 07 c7	dmore           jsr crlf
.c970	20 e1 ff	                jsr stop            ; check for stop key
.c973	f0 0e		                beq drexit          ; exit early if pressed
.c975	20 e4 ff	                jsr getin           ; pause if a key was pressed
.c978	f0 05		                beq nopaws
.c97a	20 e4 ff	paws            jsr getin           ; wait until another key is pressed
.c97d	f0 fb		                beq paws
.c97f	a0 02		nopaws          ldy #2
.c981	d0 b0		                bne dirlin          ; unconditional branch to read next file
.c983	20 ab ff	drexit          jsr untlk           ; command device to untalk
.c986	68		                pla                 ; restore accumulator
.c987	20 b1 ff	                jsr listen          ; command device to listen
.c98a	a9 e0		                lda #$e0            ; secondary address 0 (only low nybble is used)
.c98c	20 93 ff	                jsr second
.c98f	20 ae ff	                jsr unlsn           ; command device to unlisten
.c992	4c 88 c0	                jmp strt            ; back to mainloop
.c995	20 07 c7	cline           jsr crlf            ; send cr+lf
.c998	4c 9e c9	                jmp snclr           ; clear line
.c99b	20 ae c9	sndclr          jsr sndmsg
.c99e	a0 28		snclr           ldy #$28            ; loop 40 times
.c9a0	a9 20		snclp           lda #$20            ; output space character
.c9a2	20 d2 ff	                jsr chrout
.c9a5	a9 14		                lda #$14            ; output delete character
.c9a7	20 d2 ff	                jsr chrout
.c9aa	88		                dey
.c9ab	d0 f3		                bne snclp
.c9ad	60		                rts
.c9ae	b9 ff c9	sndmsg          lda msgbas,y        ; y contains offset in msg table
.c9b1	08		                php
.c9b2	29 7f		                and #$7f            ; strip high bit before output
.c9b4	20 03 c7	                jsr chout
.c9b7	c8		                iny
.c9b8	28		                plp
.c9b9	10 f3		                bpl sndmsg          ; loop until high bit is set
.c9bb	60		                rts
.c9bc	b9 34 ca	sndtxt          lda txtptr,y         ; y contains offset in msg table
.c9bf	08		                php
.c9c0	29 7f		                and #$7f            ; strip high bit before output
.c9c2	20 03 c7	                jsr chout
.c9c5	c8		                iny
.c9c6	28		                plp
.c9c7	10 f3		                bpl sndtxt          ; loop until high bit is set
.c9c9	60		                rts
.c9ca	48		greetsmall      pha
.c9cb	98		                tya
.c9cc	48		                pha
.c9cd	a0 01		                ldy     #txt0-txtptr+1
.c9cf	20 bc c9	                jsr     sndtxt
.c9d2	4c dd c9	                jmp     greet
.c9d5	48		greeting        pha
.c9d6	98		                tya
.c9d7	48		                pha
.c9d8	a0 00		                ldy     #txt0-txtptr
.c9da	20 bc c9	                jsr     sndtxt
.c9dd	a0 29		greet           ldy     #txt1-txtptr
.c9df	20 bc c9	                jsr     sndtxt
.c9e2	a0 00		                ldy     #txt0-txtptr
.c9e4	20 bc c9	                jsr     sndtxt
.c9e7	a0 52		                ldy     #txt2-txtptr
.c9e9	20 bc c9	                jsr     sndtxt
.c9ec	a0 00		                ldy     #txt0-txtptr
.c9ee	20 bc c9	                jsr     sndtxt
.c9f1	a0 7b		                ldy     #txt3-txtptr
.c9f3	20 bc c9	                jsr     sndtxt
.c9f6	a0 00		                ldy     #txt0-txtptr
.c9f8	20 bc c9	                jsr     sndtxt
.c9fb	68		                pla
.c9fc	a8		                tay
.c9fd	68		                pla
.c9fe	60		                rts
=$c9ff			msgbas  =*
>c9ff	0d		msg2            .byte $0d               ; header for registers
>ca00	20 20 20 50	                .text "   pc  sr ac xr yr sp   v1.2"
>ca04	43 20 20 53 52 20 41 43 20 58 52 20 59 52 20 53
>ca14	50 20 20 20 56 31 2e 32
>ca1c	8d		                .byte $0d+$80
>ca1d	1d bf		msg3            .byte $1d,$3f+$80       ; syntax error: move right, display "?"
>ca1f	2e 2e 2e 20	msg4            .text "... sys"         ; sys call to enter monitor
>ca23	53 59 53
>ca26	a0		                .byte $20+$80
>ca27	3a 92		msg5            .byte $3a,$12+$80       ; ":" then rvs on for memory ascii dump
>ca29	20 45 52 52	msg6            .text " erro"           ; i/o error: display " error"
>ca2d	4f
>ca2e	d2		                .byte "r"+$80
>ca2f	41 a0		msg7            .byte $41,$20+$80       ; assemble next instruction: "a " + addr
>ca31	20 20		msg8            .text "  "              ; pad non-existent byte: skip 3 spaces
>ca33	a0		                .byte $20+$80
=$ca34			txtptr  =*
>ca34	0d		txt0            .byte $0d
>ca35	20 2d 2d 2d	                .text        " --------------------------------------"
>ca39	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>ca49	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>ca59	2d 2d 2d
>ca5c	80		                .byte $80
>ca5d	0d		txt1            .byte $0d
>ca5e	20 20 20 20	                .text        "     < < < < < supermon > > > > >      "
>ca62	20 3c 20 3c 20 3c 20 3c 20 3c 20 53 55 50 45 52
>ca72	4d 4f 4e 20 3e 20 3e 20 3e 20 3e 20 3e 20 20 20
>ca82	20 20 20
>ca85	80		                .byte $80
>ca86	0d		txt2            .byte $0d
>ca87	20 20 42 59	                .text        "  by jim butterfield (r.i.p. 1936-2007)"
>ca8b	20 4a 49 4d 20 42 55 54 54 45 52 46 49 45 4c 44
>ca9b	20 28 52 2e 49 2e 50 2e 20 31 39 33 36 2d 32 30
>caab	30 37 29
>caae	80		                .byte $80
>caaf	0d		txt3            .byte $0d
>cab0	20 20 20 20	                .text format("       type [sys%05d] to launch.",org)           ; sys call to enter monitor
>cab4	20 20 20 54 59 50 45 20 5b 53 59 53 34 39 31 35
>cac4	32 5d 20 54 4f 20 4c 41 55 4e 43 48 2e
>cad1	80		                .byte $80
>cad2	40 02 45 03	mode            .byte $40,$02,$45,$03   ; even opcodes
>cad6	d0 08 40 09	                .byte $d0,$08,$40,$09
>cada	30 22 45 33	                .byte $30,$22,$45,$33
>cade	d0 08 40 09	                .byte $d0,$08,$40,$09
>cae2	40 02 45 33	                .byte $40,$02,$45,$33
>cae6	d0 08 40 09	                .byte $d0,$08,$40,$09
>caea	40 02 45 b3	                .byte $40,$02,$45,$b3
>caee	d0 08 40 09	                .byte $d0,$08,$40,$09
>caf2	00 22 44 33	                .byte $00,$22,$44,$33
>caf6	d0 8c 44 00	                .byte $d0,$8c,$44,$00
>cafa	11 22 44 33	                .byte $11,$22,$44,$33
>cafe	d0 8c 44 9a	                .byte $d0,$8c,$44,$9a
>cb02	10 22 44 33	                .byte $10,$22,$44,$33
>cb06	d0 08 40 09	                .byte $d0,$08,$40,$09
>cb0a	10 22 44 33	                .byte $10,$22,$44,$33
>cb0e	d0 08 40 09	                .byte $d0,$08,$40,$09
>cb12	62 13 78 a9	                .byte $62,$13,$78,$a9   ; opcodes ending in 01
>cb16	00		mode2           .byte $00   ; 000 000    00                  0   error
>cb17	21		                .byte $21   ; 001 000    01      #$00        1   immediate
>cb18	81		                .byte $81   ; 100 000    01      $00         2   zero-page
>cb19	82		                .byte $82   ; 100 000    10      $0000       3   absolute
>cb1a	00		                .byte $00   ; 000 000    00                  4   implied
>cb1b	00		                .byte $00   ; 000 000    00                  5   accumulator
>cb1c	59		                .byte $59   ; 010 110    01      ($00,x)     6   indirect,x
>cb1d	4d		                .byte $4d   ; 010 011    01      ($00),y     7   indirect,y
>cb1e	91		                .byte $91   ; 100 100    01      $00,x       8   zero-page,x
>cb1f	92		                .byte $92   ; 100 100    10      $0000,x     9   absolute,x
>cb20	86		                .byte $86   ; 100 001    10      $0000,y     a   absolute,y
>cb21	4a		                .byte $4a   ; 010 010    10      ($0000)     b   indirect
>cb22	85		                .byte $85   ; 100 001    01      $00,y       c   zero-page,y
>cb23	9d		                .byte $9d   ; 100 111    01      $0000*      d   relative
>cb24	2c 29 2c	char1           .byte $2c,$29,$2c       ; ","  ")"  ","
>cb27	23 28 24	                .byte $23,$28,$24       ; "#"  "("  "$"
>cb2a	59 00 58	char2           .byte $59,$00,$58       ; "y"   0   "x"
>cb2d	24 24 00	                .byte $24,$24,$00       ; "$"  "$"   0
>cb30	1c 8a 1c 23	mneml           .byte $1c,$8a,$1c,$23   ; brk php bpl clc
>cb34	5d 8b 1b a1	                .byte $5d,$8b,$1b,$a1   ; jsr plp bmi sec
>cb38	9d 8a 1d 23	                .byte $9d,$8a,$1d,$23   ; rti pha bvc cli
>cb3c	9d 8b 1d a1	                .byte $9d,$8b,$1d,$a1   ; rts pla bvs sei
>cb40	00 29 19 ae	                .byte $00,$29,$19,$ae   ; ??? dey bcc tya
>cb44	69 a8 19 23	                .byte $69,$a8,$19,$23   ; ldy tay bcs clv
>cb48	24 53 1b 23	                .byte $24,$53,$1b,$23   ; cpy iny bne cld
>cb4c	24 53 19 a1	                .byte $24,$53,$19,$a1   ; cpx inx beq sed
>cb50	00 1a 5b 5b	                .byte $00,$1a,$5b,$5b   ; ??? bit jmp jmp
>cb54	a5 69 24 24	                .byte $a5,$69,$24,$24   ; sty ldy cpy cpx
>cb58	ae ae a8 ad	                .byte $ae,$ae,$a8,$ad   ; txa txs tax tsx
>cb5c	29 00 7c 00	                .byte $29,$00,$7c,$00   ; dex ??? nop ???
>cb60	15 9c 6d 9c	                .byte $15,$9c,$6d,$9c   ; asl rol lsr ror
>cb64	a5 69 29 53	                .byte $a5,$69,$29,$53   ; stx ldx dec inc
>cb68	84 13 34 11	                .byte $84,$13,$34,$11   ; ora and eor adc
>cb6c	a5 69 23 a0	                .byte $a5,$69,$23,$a0   ; sta lda cmp sbc
>cb70	d8 62 5a 48	mnemr           .byte $d8,$62,$5a,$48   ; brk php bpl clc
>cb74	26 62 94 88	                .byte $26,$62,$94,$88   ; jsr plp bmi sec
>cb78	54 44 c8 54	                .byte $54,$44,$c8,$54   ; rti pha bvc cli
>cb7c	68 44 e8 94	                .byte $68,$44,$e8,$94   ; rts pla bvs sei
>cb80	00 b4 08 84	                .byte $00,$b4,$08,$84   ; ??? dey bcc tya
>cb84	74 b4 28 6e	                .byte $74,$b4,$28,$6e   ; ldy tay bcs clv
>cb88	74 f4 cc 4a	                .byte $74,$f4,$cc,$4a   ; cpy iny bne cld
>cb8c	72 f2 a4 8a	                .byte $72,$f2,$a4,$8a   ; cpx inx beq sed
>cb90	00 aa a2 a2	                .byte $00,$aa,$a2,$a2   ; ??? bit jmp jmp
>cb94	74 74 74 72	                .byte $74,$74,$74,$72   ; sty ldy cpy cpx
>cb98	44 68 b2 32	                .byte $44,$68,$b2,$32   ; txa txs tax tsx
>cb9c	b2 00 22 00	                .byte $b2,$00,$22,$00   ; dex ??? nop ???
>cba0	1a 1a 26 26	                .byte $1a,$1a,$26,$26   ; asl rol lsr ror
>cba4	72 72 88 c8	                .byte $72,$72,$88,$c8   ; stx ldx dec inc
>cba8	c4 ca 26 48	                .byte $c4,$ca,$26,$48   ; ora and eor adc
>cbac	44 44 a2 c8	                .byte $44,$44,$a2,$c8   ; sta lda cmp sbc
>cbb0	0d 20 20 20	                .byte $0d,$20,$20,$20
>cbb4	41 43 44 46	keyw            .text "acdfghjmrtx@.>;"
>cbb8	47 48 4a 4d 52 54 58 40 2e 3e 3b
>cbc3	24 2b 26 25	hikey           .text "$+&%lsv"
>cbc7	4c 53 56
=$cbca			keytop  =*
>cbca	6d c3 c5 c1	kaddr           .word assem-1,compar-1,disass-1,fill-1
>cbce	fa c4 48 c3
>cbd2	50 c1 49 c2	                .word goto-1,hunt-1,jsub-1,dsplym-1
>cbd6	6e c1 e3 c0
>cbda	65 c0 c8 c1	                .word dsplyr-1,trans-1,exit-1,dstat-1
>cbde	dd c0 a1 c8
>cbe2	6d c3 30 c1	                .word assem-1,altm-1,altr-1
>cbe6	19 c1
>cbe8	10 0a 08 02	modtab          .byte $10,$0a,$08,02    ; modulo number systems
>cbec	04 03 03 01	lentab          .byte $04,$03,$03,$01   ; bits per digit
>cbf0	57 c0		linkad          .word break             ; address of brk handler
>cbf2	00 c0		supad           .word super             ; address of entry point

;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L fkeys.txt -o fkeys.prg fkeys.asm
; Sat Mar 25 15:35:05 2023

;Offset	;Hex		;Source

;******  Processing input file: fkeys.asm

="20230322-002000-a"	Version = "20230322-002000-a"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: fkeys.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: fkeys.asm

.080d			main
.080d	20 ba 60	                jsr scrmaninit
.0810	20 14 08	                jsr help
.0813	60		                rts
.0814			help
.0814	20 db 60	                jsr cls
.0817	a2 2d		                ldx  #<header
.0819	a0 08		                ldy  #>header
.081b	20 f0 60	                jsr  puts
.081e	a2 14		                ldx  #<shortcuts
.0820	a0 09		                ldy  #>shortcuts
.0822	20 f0 60	                jsr  puts
.0825	a2 91		                ldx  #<helptext
.0827	a0 09		                ldy  #>helptext
.0829	20 f0 60	                jsr  puts
.082c	60		                rts
.082d			header
>082d	20 20 20 20	                .text          "     40 BEST MACHINE CODE ROUTINES"
>0831	20 34 30 20 c2 c5 d3 d4 20 cd c1 c3 c8 c9 ce c5
>0841	20 c3 cf c4 c5 20 d2 cf d5 d4 c9 ce c5 d3
>084f	0d		                .byte   $0d
>0850	20 20 20 20	                .text          "          FOR THE COMMODORE 64"
>0854	20 20 20 20 20 20 c6 cf d2 20 d4 c8 c5 20 c3 cf
>0864	cd cd cf c4 cf d2 c5 20 36 34
>086e	0d		                .byte   $0d
>086f	20 20 20 20	                .text          "       Book by Mark Greenshields."
>0873	20 20 20 c2 4f 4f 4b 20 42 59 20 cd 41 52 4b 20
>0883	c7 52 45 45 4e 53 48 49 45 4c 44 53 2e
>0890	0d 0d		                .byte   $0d,$0d
>0892	20 20 20 20	                .text          "              FKEYS (p26)"
>0896	20 20 20 20 20 20 20 20 20 20 c6 cb c5 d9 d3 20
>08a6	28 50 32 36 29
>08ab	0d		                .byte   $0d
>08ac	20 20 20 20	                .text          "        (c)1979 Brad Templeton"
>08b0	20 20 20 20 28 43 29 31 39 37 39 20 c2 52 41 44
>08c0	20 d4 45 4d 50 4c 45 54 4f 4e
>08ca	0d 0d		                .byte   $0d,$0d
>08cc	20 20 20 20	                .text          "     Programmed by Daniel Lafrance."
>08d0	20 d0 52 4f 47 52 41 4d 4d 45 44 20 42 59 20 c4
>08e0	41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e
>08ef	0d		                .byte   $0d
>08f0	20 20 20 20	                .text   format("       Version: %s.",Version)
>08f4	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 33
>0904	30 33 32 32 2d 30 30 32 30 30 30 2d 41 2e
>0912	0d 00		                .byte   $0d,0
>0914	0d		shortcuts       .byte   $0d
>0915	20 2d 2d 2d	                .text          " -------- S H O R T - C U T S ---------"
>0919	2d 2d 2d 2d 2d 20 d3 20 c8 20 cf 20 d2 20 d4 20
>0929	2d 20 c3 20 d5 20 d4 20 d3 20 2d 2d 2d 2d 2d 2d
>0939	2d 2d 2d
>093c	0d		                .byte   $0d
>093d	20 52 55 4e	                .text   format(" run=SYS%5d, help=SYS%5d",main, help)
>0941	3d d3 d9 d3 20 32 30 36 31 2c 20 48 45 4c 50 3d
>0951	d3 d9 d3 20 32 30 36 38
>0959	0d		                .byte   $0d
>095a	20 43 4c 53	                .text   format(" cls=SYS%5d",cls)
>095e	3d d3 d9 d3 32 34 37 39 35
>0967	0d		                .byte   $0d
>0968	20 2d 2d 2d	                .text          " --------------------------------------"
>096c	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>097c	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>098c	2d 2d 2d
>098f	0d 00		                .byte   $0d,0
>0991	0d		helptext        .byte   $0d
>0992	20 20 c6 cb	                .text   format("  FKEYS  : SYS%5d (for two others)",loader)
>0996	c5 d9 d3 20 20 3a 20 d3 d9 d3 32 34 35 37 36 20
>09a6	28 46 4f 52 20 54 57 4f 20 4f 54 48 45 52 53 29
>09b6	0d		                .byte   $0d
>09b7	00		                .byte   0
.6000			loader
.6000	78		                sei
.6001	a9 0d		                lda #<fkeys
.6003	8d 14 03	                sta cinv
.6006	a9 60		                lda #>fkeys
.6008	8d 15 03	                sta cinv+1
.600b	58		                cli
.600c	60		                rts
.600d			fkeys
.600d	48		                pha
.600e	8a		                txa
.600f	48		                pha
.6010	98		                tya
.6011	48		                pha
.6012	a5 c5		                lda lstx
.6014	c5 fb		                cmp zpage1
.6016	f0 52		                beq out
.6018	85 fb		                sta zpage1
.601a	c9 03		                cmp #$03
.601c	d0 08		                bne a6026
.601e	a9 30		                lda #$30
.6020	8d 72 60	                sta fkeydef
.6023	4c 47 60	                jmp a6047
.6026	c9 04		a6026           cmp #$04
.6028	d0 08		                bne a6032
.602a	a9 00		                lda #$00
.602c	8d 72 60	                sta fkeydef
.602f	4c 47 60	                jmp a6047
.6032	c9 05		a6032           cmp #$05
.6034	d0 08		                bne a603e
.6036	a9 10		                lda #$10
.6038	8d 72 60	                sta fkeydef
.603b	4c 47 60	                jmp a6047
.603e	c9 06		a603e           cmp #$06
.6040	d0 28		                bne out
.6042	a9 20		                lda #$20
.6044	8d 72 60	                sta fkeydef
.6047	ad 8d 02	a6047           lda shflag
.604a	c9 01		                cmp #$01
.604c	d0 09		                bne a6057
.604e	ad 72 60	                lda fkeydef
.6051	18		                clc
.6052	69 08		                adc #$08
.6054	8d 72 60	                sta fkeydef
.6057	a2 00		a6057           ldx #$00
.6059	ac 72 60	                ldy fkeydef
.605c	b9 73 60	a605c           lda fkeydef+1,y
.605f	9d 77 02	                sta kbbuff,x
.6062	e8		                inx
.6063	c8		                iny
.6064	e0 08		                cpx #$08
.6066	d0 f4		                bne a605c
.6068	86 c6		                stx ndx
.606a	68		out             pla
.606b	a8		                tay
.606c	68		                pla
.606d	aa		                tax
.606e	68		                pla
.606f	4c 31 ea	                jmp $ea31
>6072	00 4c 49 53	fkeydef         .byte $00, $4c, $49, $53, $54, $0d, $04, $04
>6076	54 0d 04 04
>607a	04 52 55 4e	                .byte $04, $52, $55, $4e, $0d, $04, $04, $04
>607e	0d 04 04 04
>6082	04 50 52 49	                .byte $04, $50, $52, $49, $4e, $54, $04, $04
>6086	4e 54 04 04
>608a	04 54 48 45	                .byte $04, $54, $48, $45, $4e, $04, $04, $04
>608e	4e 04 04 04
>6092	04 4c 4f 41	                .byte $04, $4c, $4f, $41, $44, $04, $04, $04
>6096	44 04 04 04
>609a	04 53 41 56	                .byte $04, $53, $41, $56, $45, $04, $04, $04
>609e	45 04 04 04
>60a2	04 56 45 52	                .byte $04, $56, $45, $52, $49, $46, $59, $04
>60a6	49 46 59 04
>60aa	04 47 4f 54	                .byte $04, $47, $4f, $54, $4f, $04, $04, $04
>60ae	4f 04 04 04
>60b2	04 00 00 00	                .byte $04, $00, $00, $00, $00, $00, $ff, $00
>60b6	00 00 ff 00

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$90			kiostatus       =       $90       ; Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7       ; Current filename length (byte)
=$b9			cursecadd       =       $b9       ; Current secondary address (byte)
=$ba			curdevno        =       $ba       ; Current device number (byte)
=$bb			curfptr         =       $bb       ; Current file pointer (word)
=$fb			zpage1          =       $fb       ; zero page 1 address (word)
=$fd			zpage2          =       $fd       ; zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$0286			bascol          =       $0286     ;basic next chr colscreenram (byte)
=$0400			scrnram         =       $0400     ;video character ram
=$0400			scrram0         =       $0400
=$0500			scrram1         =       $0500
=$0600			scrram2         =       $0600
=$0700			scrram3         =       $0700
=$0801			basicsta        =       $0801     ;basic start address
=$a000			basicrom        =       $a000
=$d400			sid             =       $d400     ;sid base address
=$d800			colorram        =       $d800     ;video color ram
=$d800			colram0         =       $d800
=$d900			colram1         =       $d900
=$da00			colram2         =       $da00
=$db00			colram3         =       $db00
=$dc00			cia1            =       $dc00     ;cia1  base address
=$dd00			cia2            =       $dd00     ;cia2 base address
=$e000			kernalrom       =       $e000
=43			txttab          =       43
=$14			linnum          =       $14
=$c6			ndx             =       $c6     ;Number of character in keyboard buffer
=$033c			tpbuff          =       $033c   ;$033c-$03fb (828-1019)
=$277			kbbuff          =       $277
=$28d			shflag          =       $28d    ;653
=828			tbuffer         =       828
=806			ibsout          =       806
=$ea31			irq             =       $ea31
=$314			cinv            =       $314        ; brk instruction interupt
=$c5			lstx            =       $c5         ;matrix coordinate of last key pressed
=$03			bstop           =       $03      ;stop
=$05			bwhite          =       $05      ;set color white
=$08			block           =       $08      ;lock the charset
=$09			bunlock         =       $09      ;unlock the charset
=$0d			bcarret         =       $0d
=$0e			btext           =       $0e
=$11			bcrsdn          =       $11      ;cursor down 1 line
=$12			brevcol         =       $12
=$13			bhome           =       $13
=$14			bdelete         =       $14
=$1c			bred            =       $1c
=$1d			bcuright        =       $1d
=$1e			bgreen          =       $1e
=$1f			bblue           =       $1f
=$81			borange         =       $81
=$83			blrun           =       $83
=$85			bfkey1          =       $85
=$86			bfkey2          =       $86
=$87			bfkey3          =       $87
=$88			bfkey4          =       $88
=$89			bfkey5          =       $89
=$8a			bfkey6          =       $8a
=$8b			bfkey7          =       $8b
=$8c			bfkey8          =       $8c
=$8d			bcarret1        =       $8d
=$8e			bgraph          =       $8e
=$90			bblack          =       $90
=$91			bcuup           =       $91
=$92			brevoff         =       $92
=$93			bclear          =       $93
=$94			binsert         =       $94
=$95			bbrown          =       $95
=$96			bltred          =       $96
=$97			bdkgrey         =       $97
=$98			bmdgrey         =       $98
=$99			bltgreen        =       $99
=$9a			bltblue         =       $9a
=$9b			bltgrey         =       $9b
=$9c			bmagenta        =       $9c
=$9d			bculeft         =       $9d
=$9e			byellow         =       $9e
=$9f			bcyan           =       $9f
=$0286			carcol          =       $0286
=$030a			ieval           =       $030a
=$73			chrget          =       $73
=$79			chrgot          =       $79
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.60ba			libtart

;******  Return to file: fkeys.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col= vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: fkeys.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=$a3bb			b_opentxtspc  = $a3bb ;  1) Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ;  2) Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ;  3) ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ;  4) Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ;  5) Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ;  6) Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ;  7) Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ;  8) Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ;  9) Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; 10) Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; 11) Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; 12) Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; 13) Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; 14) Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; 15) Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; 17) Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; 18) Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; 19) Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; 20) Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; 21) Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; 22) Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; 23) Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; 24) Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; 25) Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; 26) Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; 27) Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; 28) check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; 29) check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; 30) send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; 31) find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; 32) Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; 33) Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; 34) Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; 35) Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; 36) Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; 37) Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; 38) Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; 39) Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; 40) Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; 41) Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; 42) Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; 43) Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; 44) Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; 45) Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; 46) Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; 47) Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; 48) Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; 49) Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; 50) Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: fkeys.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.60ba			scrmaninit
.60ba	20 e1 61	               jsr  push
.60bd	a9 06		               lda  #vbleu
.60bf	8d 21 d0	               sta  vicbackcol
.60c2	a9 05		               lda  #vvert
.60c4	8d 20 d0	               sta  vicbordcol
.60c7	a9 01		               lda  #vblanc
.60c9	8d 86 02	               sta  bascol
.60cc	ad 00 04	               lda  scrnram
.60cf	29 fd		               and  #%11111101
.60d1	8d 00 04	               sta  scrnram
.60d4	20 db 60	               jsr  cls
.60d7	20 20 62	               jsr  pop
.60da	60		               rts
.60db			cls
.60db	08		               php
.60dc	48		               pha
.60dd	a9 93		               lda  #$93
.60df	20 ea 60	               jsr  putch
.60e2	a9 0e		               lda  #$0e
.60e4	20 ea 60	               jsr  putch
.60e7	68		               pla
.60e8	28		               plp
.60e9	60		               rts
.60ea			putch
.60ea	08		               php
.60eb	20 d2 ff	               jsr  $ffd2
.60ee	28		               plp
.60ef	60		               rts
.60f0			puts
.60f0	20 e1 61	               jsr  push
.60f3	86 fb		               stx  zpage1
.60f5	84 fc		               sty  zpage1+1
.60f7	a0 00		               ldy  #0
.60f9	b1 fb		next           lda  (zpage1),y
.60fb	f0 09		               beq  exit
.60fd	20 ea 60	               jsr  putch
.6100	20 e8 62	               jsr  inczp1
.6103	4c f9 60	               jmp  next
.6106	20 20 62	exit           jsr  pop
.6109	60		               rts
.610a			gotoxy
.610a	08		               php
.610b	18		               clc
.610c	8a		               txa
.610d	48		               pha
.610e	98		               tya
.610f	aa		               tax
.6110	68		               pla
.6111	a8		               tay
.6112	20 f0 ff	               jsr  kplot
.6115	28		               plp
.6116	60		               rts
.6117			cursor
=$0286			bascol    =    $0286
.6117	08		               php
.6118	48		               pha
.6119	90 12		               bcc  restore
.611b	20 f0 ff	               jsr  kplot
.611e	8c 3f 61	               sty  cx
.6121	8e 40 61	               stx  cy
.6124	ad 86 02	               lda  bascol
.6127	8d 41 61	               sta  bcol
.612a	4c 3c 61	               jmp  out
.612d	ae 40 61	restore        ldx  cy
.6130	ac 3f 61	               ldy  cx
.6133	20 f0 ff	               jsr  kplot
.6136	ad 41 61	               lda  bcol
.6139	8d 86 02	               sta  bascol
.613c	68		out            pla
.613d	28		               plp
.613e	60		               rts
>613f	00		cx   .byte     $00
>6140	00		cy   .byte     $00
>6141	00		bcol .byte     $00
.6142			cursave
.6142	08		               php
.6143	38		               sec
.6144	20 17 61	               jsr  cursor
.6147	28		               plp
.6148	60		               rts
.6149			curput
.6149	08		               php
.614a	18		               clc
.614b	20 17 61	               jsr  cursor
.614e	28		               plp
.614f	60		               rts
.6150			putsxy
.6150	20 e1 61	               jsr  push
.6153	86 fb		               stx  zpage1
.6155	84 fc		               sty  zpage1+1
.6157	a0 00		               ldy  #$00
.6159	b1 fb		               lda  (zpage1),y
.615b	aa		               tax
.615c	20 e8 62	               jsr  inczp1
.615f	b1 fb		               lda  (zpage1),y
.6161	a8		               tay
.6162	20 0a 61	               jsr  gotoxy
.6165	20 e8 62	               jsr  inczp1
.6168	a6 fb		               ldx  zpage1
.616a	a4 fc		               ldy  zpage1+1
.616c	20 f0 60	               jsr  puts
.616f	20 20 62	               jsr  pop
.6172	60		               rts
>6173	00 00		straddr   .word     $00
>6175	00		px        .byte     $00
>6176	00		py        .byte     $00
>6177	00 00		zp1       .word     $00
.6179			putscxy
.6179	20 e1 61	               jsr  push
.617c	84 fc		               sty  zpage1+1
.617e	86 fb		               stx  zpage1
.6180	ad 86 02	               lda  bascol
.6183	8d a3 61	               sta  bc
.6186	a0 00		               ldy #$00
.6188	b1 fb		               lda  (zpage1),y
.618a	8d 86 02	               sta  bascol
.618d	20 e8 62	               jsr  inczp1
.6190	a6 fb		               ldx  zpage1
.6192	a4 fc		               ldy  zpage1+1
.6194	20 50 61	               jsr  putsxy
.6197	ad a3 61	               lda  bc
.619a	8d 86 02	               sta  bascol
.619d	20 20 62	               jsr  pop
.61a0	60		               rts
>61a1	00 00		straddr  .word      $00
>61a3	00		bc       .byte      $00
>61a4	00 00		zp1      .word      $00
.61a6			putrahex
.61a6	08		               php
.61a7	48		               pha
.61a8	20 ee 63	               jsr  a2hex
.61ab	a9 9a		               lda  #<a2hexstr
.61ad	a0 63		               ldy  #>a2hexstr
.61af	20 f0 60	               jsr  puts
.61b2	68		               pla
.61b3	28		               plp
.61b4	60		               rts
.61b5			kputrahexxy
.61b5			bputrahexxy
.61b5			putrahexxy
.61b5	08		               php
.61b6	20 ee 63	               jsr  a2hex
.61b9	a9 97		               lda  #<a2hexpos
.61bb	a0 63		               ldy  #>a2hexpos
.61bd	20 50 61	               jsr  putsxy
.61c0	68		               pla
.61c1	28		               plp
.61c2	60		               rts
.61c3			putrahexcxy
.61c3	08		               php
.61c4	20 ee 63	               jsr  a2hex
.61c7	a9 97		               lda  #<a2hexpos
.61c9	a0 63		               ldy  #>a2hexpos
.61cb	20 79 61	               jsr  putscxy
.61ce	68		               pla
.61cf	28		               plp
.61d0	60		               rts
.61d1			setinverse
.61d1	48		               pha
.61d2	a9 12		               lda  #$12
.61d4	20 d2 ff	               jsr  $ffd2
.61d7	68		               pla
.61d8	60		               rts
.61d9			clrinverse
.61d9	48		               pha
.61da	a9 92		               lda  #$92
.61dc	20 d2 ff	               jsr  $ffd2
.61df	68		               pla
.61e0	60		               rts

;******  Return to file: fkeys.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.61e1			push
.61e1	08		          php            ; stack : flg, pcl, pch
.61e2	78		          sei
.61e3	8d 1d 62	          sta  ra        ; save a
.61e6	68		          pla            ; stack : pcl, pch
.61e7	8d 1c 62	          sta  rp        ; save rp
.61ea	68		          pla            ; stack : pch
.61eb	8d 1e 62	          sta  pc        ; save pcl
.61ee	68		          pla            ; stack : -
.61ef	8d 1f 62	          sta  pc+1      ; save pch
.61f2	a5 fb		          lda  zpage1    ; get zpage1 low byte
.61f4	48		          pha            ; stack : zp1l
.61f5	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.61f7	48		          pha            ; stack : zp1h, zp1l
.61f8	a5 fd		          lda  zpage2    ; get zpage2 low byte
.61fa	48		          pha            ; stack : zp2l, zp1h, zp1l
.61fb	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.61fd	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.61fe	ad 1c 62	          lda  rp        ; get rp
.6201	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.6202	ad 1d 62	          lda  ra        ; get a
.6205	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.6206	8a		          txa            ; get x
.6207	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.6208	98		          tya            ; get y
.6209	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.620a	ad 1f 62	          lda  pc+1      ; get pch
.620d	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.620e	ad 1e 62	          lda  pc        ; get pcl
.6211	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.6212	ad 1c 62	          lda  rp        ; get rp
.6215	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.6216	ad 1d 62	          lda  ra        ; get a
.6219	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.621a	58		          cli
.621b	60		          rts
>621c	00		rp        .byte     0
>621d	00		ra        .byte     0
>621e	00 00		pc        .word     0
.6220			pull
.6220			pop
.6220	78		          sei
.6221	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.6222	8d 55 62	          sta  pc        ; save pcl
.6225	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.6226	8d 56 62	          sta  pc+1      ; save pch
.6229	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.622a	a8		          tay            ; set y
.622b	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.622c	aa		          tax            ; set x
.622d	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.622e	8d 54 62	          sta  ra        ; save a
.6231	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.6232	8d 53 62	          sta  rp        ; save rp
.6235	68		          pla            ; stack : zp2l, zp1h, zp1l
.6236	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.6238	68		          pla            ; stack : zp1h, zp1l
.6239	85 fd		          sta  zpage2    ; get zpage2 High byte
.623b	68		          pla            ; stack : zp1l
.623c	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.623e	68		          pla            ; stack :
.623f	85 fb		          sta  zpage1    ; get zpage1 High byte
.6241	ad 56 62	          lda  pc+1      ; get pch
.6244	48		          pha            ; stack : pch
.6245	ad 55 62	          lda  pc
.6248	48		          pha            ; stack : pcl, pch
.6249	ad 53 62	          lda  rp        ; get rp
.624c	48		          pha            ; stack : rp, pcl, pch
.624d	ad 54 62	          lda  ra        ; set ra
.6250	58		          cli
.6251	28		          plp            ; stack : pcl, pch
.6252	60		          rts
>6253	00		rp        .byte     0
>6254	00		ra        .byte     0
>6255	00 00		pc        .word     0

;******  Return to file: fkeys.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.6257			blkfill
.6257	20 e1 61	bf0            jsr  push
.625a	20 15 63	               jsr  savezp1
.625d	84 fc		               sty  zpage1+1
.625f	a0 00		               ldy  #$00
.6261	84 fb		               sty  zpage1
.6263	91 fb		bf1            sta  (zpage1),y
.6265	c8		               iny
.6266	d0 fb		               bne  bf1
.6268	20 24 63	               jsr  restzp1
.626b	20 20 62	               jsr  pop
.626e	60		               rts
.626f			memfill
.626f	20 e1 61	               jsr  push
.6272	20 57 62	mf1            jsr  blkfill
.6275	c8		               iny
.6276	ca		               dex
.6277	d0 f9		               bne  mf1
.6279	20 20 62	               jsr  pop
.627c	60		               rts
.627d			memmove
.627d	20 e1 61	               jsr  push
.6280	ba		               tsx            ; On se crée un pointeur ...
.6281	8a		               txa
.6282	18		               clc
.6283	69 0b		               adc  #11
.6285	a8		               tay
.6286	a2 06		               ldx  #$06
.6288	b9 00 01	nextbyte       lda  $0100,y
.628b	99 d7 62	               sta  words,y
.628e	c8		               iny
.628f	ca		               dex
.6290	d0 f6		               bne  nextbyte
.6292	ad d7 62	               lda  s
.6295	8d ae 62	               sta  source+1
.6298	ad d8 62	               lda  s+1
.629b	8d af 62	               sta  source+2
.629e	ad d9 62	               lda  d
.62a1	8d ab 62	               sta  destin+1
.62a4	ad da 62	               lda  d+1
.62a7	8d ac 62	               sta  destin+2
.62aa	ad ff ff	destin         lda  $ffff
.62ad	8d ff ff	source         sta  $ffff
.62b0	ee ab 62	               inc  destin+1
.62b3	d0 03		               bne  src
.62b5	ee ac 62	               inc  destin+2
.62b8	ee ae 62	src            inc  source+1
.62bb	d0 03		               bne  cnt
.62bd	ee af 62	               inc  source+2
.62c0	ad db 62	cnt            lda  compte
.62c3	d0 08		               bne  decit
.62c5	ad dc 62	               lda  compte+1
.62c8	f0 09		               beq  fini
.62ca	ce dc 62	               dec  compte+1
.62cd	ce db 62	decit          dec  compte
.62d0	4c aa 62	               jmp  destin
.62d3	20 20 62	fini           jsr  pop
.62d6	60		               rts
.62d7			words
>62d7	00 00		s         .word     $0000
>62d9	00 00		d         .word     $0000
>62db	00 00		compte    .word     $0000
.62dd			decword
.62dd	20 e1 61	               jsr  push
.62e0	86 fd		               stx  zpage2
.62e2	84 fe		               sty  zpage2+1
.62e4	20 20 62	               jsr  pop
.62e7	60		               rts
.62e8			inczp1
.62e8	08		               php
.62e9	e6 fb		               inc  zpage1
.62eb	d0 02		               bne  nopage
.62ed	e6 fc		               inc  zpage1+1
.62ef	28		nopage         plp
.62f0	60		               rts
.62f1			deczp1
.62f1	08		                php
.62f2	48		                pha
.62f3	c6 fb		                dec  zpage1
.62f5	d0 02		                bne  nopage
.62f7	c6 fc		                dec  zpage1+1
.62f9	c6 fb		nopage          dec  zpage1
.62fb	68		                pla
.62fc	28		                plp
.62fd	60		                rts
.62fe			inczp2
.62fe	08		               php
.62ff	48		               pha
.6300	e6 fd		               inc  zpage2
.6302	d0 02		               bne  nopage
.6304	e6 fe		               inc  zpage2+1
.6306	68		nopage         pla
.6307	28		               plp
.6308	60		               rts
.6309			deczp2
.6309	08		               php
.630a	48		               pha
.630b	a5 fd		               lda  zpage2
.630d	d0 02		               bne  nopage
.630f	c6 fe		               dec  zpage2+1
.6311	c6 fd		nopage         dec  zpage2
.6313	28		               plp
.6314	60		               rts
.6315			savezp1
.6315	08		               php
.6316	48		               pha
.6317	a5 fb		               lda  zpage1
.6319	8d 91 63	               sta  zp1
.631c	a5 fc		               lda  zpage1+1
.631e	8d 92 63	               sta  zp1+1
.6321	68		               pla
.6322	28		               plp
.6323	60		               rts
.6324			restzp1
.6324	08		               php
.6325	48		               pha
.6326	ad 91 63	               lda zp1
.6329	85 fb		               sta zpage1
.632b	ad 92 63	               lda zp1+1
.632e	85 fc		               sta zpage1+1
.6330	68		               pla
.6331	28		               plp
.6332	60		               rts
.6333			savezp2
.6333	08		         php
.6334	48		         pha
.6335	a5 fd		         lda zpage2
.6337	8d 93 63	         sta zp2
.633a	a5 fe		         lda zpage2+1
.633c	8d 94 63	         sta zp2+1
.633f	68		         pla
.6340	28		         plp
.6341	60		         rts
.6342			restzp2
.6342	08		                php
.6343	48		                pha
.6344	ad 93 63	                lda  zp2
.6347	85 fd		                sta  zpage2
.6349	ad 94 63	                lda  zp2+1
.634c	85 fe		                sta  zpage2+1
.634e	68		                pla
.634f	28		                plp
.6350	60		                rts
.6351			xy2addr
.6351	08		                php
.6352	48		                pha
.6353	8a		                txa
.6354	48		                pha
.6355	98		                tya
.6356	48		                pha
.6357	ad 8c 63	                lda     addr1+1
.635a	8d 8e 63	                sta     addr2+1
.635d	ad 8b 63	                lda     addr1
.6360	8d 8d 63	                sta     addr2
.6363	c0 00		                cpy     #$00
.6365	f0 0f		                beq     addx
.6367	18		moreline        clc
.6368	6d 8a 63	                adc     ymult
.636b	90 03		                bcc     norepy
.636d	ee 8e 63	                inc     addr2+1
.6370	8d 8d 63	norepy          sta     addr2
.6373	88		                dey
.6374	d0 f1		                bne     moreline
.6376	8a		addx            txa
.6377	18		                clc
.6378	6d 8d 63	                adc     addr2
.637b	90 03		                bcc     thatsit
.637d	ee 8e 63	                inc     addr2+1
.6380	8d 8d 63	thatsit         sta     addr2
.6383	68		                pla
.6384	a8		                tay
.6385	68		                pla
.6386	aa		                tax
.6387	68		                pla
.6388	28		                plp
.6389	60		                rts
>638a	28		ymult          .byte     40
>638b	00 00		addr1          .word     $0000
>638d	00 00		addr2          .word     $0000
>638f	00 00		bytecnt        .word     $0000
>6391	00 00		zp1        .word   $0000
>6393	00 00		zp2        .word   $0000

;******  Return to file: fkeys.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>6395	01		a2hexcol       .byte     1              ; pour aputscxy
>6396	00		a2hexbkcol     .byte     %00000000
.6397			a2hexpos
>6397	00		a2hexpx        .byte     0              ; pour aputsxy
>6398	00		a2hexpy        .byte     0
>6399	24		a2hexprefix    .byte     "$"            ; pour aputs
>639a	00 00		a2hexstr       .word     $00
>639c	00 00		               .word     $00
>639e	00		               .byte     0              ; 0 end string
.639f			putahexfmtxy
.639f	20 e1 61	               jsr  push
.63a2	20 ee 63	               jsr  a2hex
.63a5	ae 97 63	               ldx  a2hexpx
.63a8	ac 98 63	               ldy  a2hexpy
.63ab	20 0a 61	               jsr  gotoxy
.63ae	a2 99		               ldx  #<a2hexprefix
.63b0	a0 63		               ldy  #>a2hexprefix
.63b2	20 f0 60	               jsr  puts
.63b5	20 20 62	               jsr  pop
.63b8	60		               rts
.63b9			putahexfmt
.63b9	20 e1 61	               jsr  push
.63bc	20 ee 63	               jsr  a2hex
.63bf	a2 99		               ldx  #<a2hexprefix
.63c1	a0 63		               ldy  #>a2hexprefix
.63c3	20 f0 60	               jsr  puts
.63c6	20 20 62	               jsr  pop
.63c9	60		               rts
.63ca			putahex
.63ca	20 e1 61	               jsr  push
.63cd	20 ee 63	               jsr  a2hex
.63d0	a2 9a		               ldx  #<a2hexstr
.63d2	a0 63		               ldy  #>a2hexstr
.63d4	20 f0 60	               jsr  puts
.63d7	20 20 62	               jsr  pop
.63da	60		               rts
.63db			nib2hex
.63db	08		               php
.63dc	29 0f		               and  #$0f
.63de	f8		               sed
.63df	18		               clc
.63e0	69 90		               adc  #$90
.63e2	69 40		               adc  #$40
.63e4	d8		               cld
.63e5	28		               plp
.63e6	60		               rts
.63e7			lsra4bits
.63e7	08		               php
.63e8	4a		               lsr
.63e9	4a		               lsr
.63ea	4a		               lsr
.63eb	4a		               lsr
.63ec	28		               plp
.63ed	60		               rts
.63ee			a2hex
.63ee	08		               php
.63ef	48		               pha
.63f0	48		               pha
.63f1	20 e7 63	               jsr  lsra4bits
.63f4	20 db 63	               jsr  nib2hex
.63f7	8d 9a 63	               sta  a2hexstr
.63fa	68		               pla
.63fb	20 db 63	               jsr  nib2hex
.63fe	8d 9b 63	               sta  a2hexstr+1
.6401	a9 00		               lda  #$00                ; set end of string
.6403	8d 9c 63	               sta  a2hexstr+2
.6406	68		               pla
.6407	28		               plp
.6408	60		               rts
.6409			xy2hex
.6409	20 e1 61	               jsr  push
.640c	20 ee 63	               jsr  a2hex
.640f	8a		               txa
.6410	48		               pha
.6411	20 e7 63	               jsr  lsra4bits
.6414	20 db 63	               jsr  nib2hex
.6417	8d 9a 63	               sta  a2hexstr
.641a	68		               pla
.641b	20 db 63	               jsr  nib2hex
.641e	8d 9b 63	               sta  a2hexstr+1
.6421	98		               tya
.6422	48		               pha
.6423	20 e7 63	               jsr  lsra4bits
.6426	20 db 63	               jsr  nib2hex
.6429	8d 9c 63	               sta  a2hexstr+2
.642c	68		               pla
.642d	20 db 63	               jsr  nib2hex
.6430	8d 9d 63	               sta  a2hexstr+3
.6433	a9 00		               lda  #$00                ; 0 ended string
.6435	8d 9e 63	               sta  a2hexstr+4
.6438	20 20 62	               jsr  pop
.643b			atobin
.643b	20 e1 61	               jsr     push
.643e	a2 08		               ldx     #8
.6440	a0 00		               ldy     #0
.6442	2a		nextbit        rol
.6443	48		               pha
.6444	69 00		               adc     #$00
.6446	29 01		               and     #$01
.6448	20 db 63	               jsr     nib2hex
.644b	99 5c 64	               sta     abin,y
.644e	68		               pla
.644f	c8		               iny
.6450	ca		               dex
.6451	d0 ef		               bne     nextbit
.6453	a9 00		               lda     #0
.6455	99 5c 64	               sta     abin,y
.6458	20 20 62	               jsr     pull
.645b	60		               rts
>645c	30 30 30 30	abin           .null   "00000000"
>6460	30 30 30 30 00
.6465			putabin
.6465	20 3b 64	               jsr     atobin
.6468	20 e1 61	               jsr     push
.646b	a2 5c		               ldx     #<abin
.646d	a0 64		               ldy     #>abin
.646f	20 f0 60	               jsr     puts
.6472	20 20 62	               jsr     pop
.6475	60		               rts
.6476			putabinfmt
.6476	08		               php
.6477	48		               pha
.6478	a9 25		               lda     #"%"
.647a	20 ea 60	               jsr     putch
.647d	68		               pla
.647e	20 65 64	               jsr     putabin
.6481	28		               plp
.6482	60		               rts
.6483			putabinxy
.6483	20 0a 61	               jsr     gotoxy
.6486	20 65 64	               jsr     putabin
.6489	60		               rts
.648a			putabinfmtxy
.648a	20 0a 61	               jsr     gotoxy
.648d	20 76 64	               jsr     putabinfmt
.6490	60		               rts

;******  Return to file: fkeys.asm


;******  End of listing

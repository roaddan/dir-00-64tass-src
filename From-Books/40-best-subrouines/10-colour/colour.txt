
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L colour.txt -o colour.prg colour.asm
; Mon Mar 27 22:05:52 2023

;Offset	;Hex		;Source

;******  Processing input file: colour.asm

="20230327-214534-a"	                Version = "20230327-214534-a"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: colour.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: colour.asm

.080d			main
.080d	20 3b 0a	                jsr scrmaninit
.0810	20 19 08	                jsr help
.0813	20 1e 0e	                jsr anykey
.0816	4c 74 a4	                jmp b_warmstart
.0819			help
.0819	20 5c 0a	                jsr cls
.081c	a2 89		                ldx  #<line
.081e	a0 09		                ldy  #>line
.0820	20 71 0a	                jsr  puts
.0823	a2 4e		                ldx  #<header
.0825	a0 08		                ldy  #>header
.0827	20 71 0a	                jsr  puts
.082a	a2 89		                ldx  #<line
.082c	a0 09		                ldy  #>line
.082e	20 71 0a	                jsr  puts
.0831	a2 35		                ldx  #<shortcuts
.0833	a0 09		                ldy  #>shortcuts
.0835	20 71 0a	                jsr  puts
.0838	a2 89		                ldx  #<line
.083a	a0 09		                ldy  #>line
.083c	20 71 0a	                jsr  puts
.083f	a2 b2		                ldx  #<helptext
.0841	a0 09		                ldy  #>helptext
.0843	20 71 0a	                jsr  puts
.0846	a2 89		                ldx  #<line
.0848	a0 09		                ldy  #>line
.084a	20 71 0a	                jsr  puts
.084d	60		                rts
.084e			header
>084e	20 20 20 20	                .text          "     40 BEST MACHINE CODE ROUTINES"
>0852	20 34 30 20 c2 c5 d3 d4 20 cd c1 c3 c8 c9 ce c5
>0862	20 c3 cf c4 c5 20 d2 cf d5 d4 c9 ce c5 d3
>0870	0d		                .byte   $0d
>0871	20 20 20 20	                .text          "          FOR THE COMMODORE 64"
>0875	20 20 20 20 20 20 c6 cf d2 20 d4 c8 c5 20 c3 cf
>0885	cd cd cf c4 cf d2 c5 20 36 34
>088f	0d		                .byte   $0d
>0890	20 20 20 20	                .text          "       Book by Mark Greenshields."
>0894	20 20 20 c2 4f 4f 4b 20 42 59 20 cd 41 52 4b 20
>08a4	c7 52 45 45 4e 53 48 49 45 4c 44 53 2e
>08b1	0d 0d		                .byte   $0d,$0d
>08b3	20 20 20 20	                .text          "            Colour (pxx)"
>08b7	20 20 20 20 20 20 20 20 c3 4f 4c 4f 55 52 20 28
>08c7	50 58 58 29
>08cb	0d		                .byte   $0d
>08cc	20 20 20 20	                .text          "        (c) 1979 Brad Templeton"
>08d0	20 20 20 20 28 43 29 20 31 39 37 39 20 c2 52 41
>08e0	44 20 d4 45 4d 50 4c 45 54 4f 4e
>08eb	0d 0d		                .byte   $0d,$0d
>08ed	20 20 20 20	                .text          "     programmed by Daniel Lafrance."
>08f1	20 50 52 4f 47 52 41 4d 4d 45 44 20 42 59 20 c4
>0901	41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e
>0910	0d		                .byte   $0d
>0911	20 20 20 20	                .text   format("       Version: %s.",Version)
>0915	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 33
>0925	30 33 32 37 2d 32 31 34 35 33 34 2d 41 2e
>0933	0d 00		                .byte   $0d,0
>0935	20 2d 2d 2d	shortcuts       .text          " -------- S H O R T - C U T S ---------"
>0939	2d 2d 2d 2d 2d 20 d3 20 c8 20 cf 20 d2 20 d4 20
>0949	2d 20 c3 20 d5 20 d4 20 d3 20 2d 2d 2d 2d 2d 2d
>0959	2d 2d 2d
>095c	0d		                .byte   $0d
>095d	20 52 55 4e	                .text   format(" run=SYS%5d, help=SYS%5d",main, help)
>0961	3d d3 d9 d3 20 32 30 36 31 2c 20 48 45 4c 50 3d
>0971	d3 d9 d3 20 32 30 37 33
>0979	0d		                .byte   $0d
>097a	20 43 4c 53	                .text   format(" cls=SYS%5d",cls)
>097e	3d d3 d9 d3 20 32 36 35 32
>0987	0d 00		                .byte   $0d,0
>0989	20 2d 2d 2d	line            .text          " --------------------------------------"
>098d	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>099d	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09ad	2d 2d 2d
>09b0	0d 00		                .byte   $0d,0
>09b2	20 c3 4f 4c	helptext        .text   format(" Colour:SYS%5d,screen,back,text,1,2,3",colour)
>09b6	4f 55 52 3a d3 d9 d3 20 32 35 35 35 2c 53 43 52
>09c6	45 45 4e 2c 42 41 43 4b 2c 54 45 58 54 2c 31 2c
>09d6	32 2c 33
>09d9	0d		                .byte   $0d
>09da	20 45 58 2e	                .text   format(" ex.: SYS%5d,15,11,0,10,11,12",colour)
>09de	3a 20 d3 d9 d3 20 32 35 35 35 2c 31 35 2c 31 31
>09ee	2c 30 2c 31 30 2c 31 31 2c 31 32
>09f9	0d 00		                .byte   $0d,0
.09fb			colour
.09fb	20 fd ae	                jsr $aefd
.09fe	20 32 0a	                jsr param
.0a01	8d 21 d0	                sta 53281
.0a04	20 fd ae	                jsr $aefd
.0a07	20 32 0a	                jsr param
.0a0a	8d 20 d0	                sta 53280
.0a0d	20 fd ae	                jsr $aefd
.0a10	20 32 0a	                jsr param
.0a13	8d 86 02	                sta 646
.0a16	20 fd ae	                jsr $aefd
.0a19	20 32 0a	                jsr param
.0a1c	8d 22 d0	                sta 53282
.0a1f	20 fd ae	                jsr $aefd
.0a22	20 32 0a	                jsr param
.0a25	8d 23 d0	                sta 53283
.0a28	20 fd ae	                jsr $aefd
.0a2b	20 32 0a	                jsr param
.0a2e	8d 24 d0	                sta 53284
.0a31	60		                rts
.0a32	20 9e b7	param           jsr $b79e
.0a35	8a		                txa
.0a36	60		                rts
.0a37	4c 48 b2	iqerr           jmp $b248
>0a3a	00		byte            .byte 0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$90			kiostatus       =       $90       ; Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7       ; Current filename length (byte)
=$b9			cursecadd       =       $b9       ; Current secondary address (byte)
=$ba			curdevno        =       $ba       ; Current device number (byte)
=$bb			curfptr         =       $bb       ; Current file pointer (word)
=$fb			zpage1          =       $fb       ; zero page 1 address (word)
=$fd			zpage2          =       $fd       ; zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$0286			bascol          =       $0286     ;basic next chr colscreenram (byte)
=$0400			scrnram         =       $0400     ;video character ram
=$0400			scrram0         =       $0400
=$0500			scrram1         =       $0500
=$0600			scrram2         =       $0600
=$0700			scrram3         =       $0700
=$0801			basicsta        =       $0801     ;basic start address
=$a000			basicrom        =       $a000
=$d400			sid             =       $d400     ;sid base address
=$d800			colorram        =       $d800     ;video color ram
=$d800			colram0         =       $d800
=$d900			colram1         =       $d900
=$da00			colram2         =       $da00
=$db00			colram3         =       $db00
=$dc00			cia1            =       $dc00     ;cia1  base address
=$dd00			cia2            =       $dd00     ;cia2 base address
=$e000			kernalrom       =       $e000
=43			txttab          =       43
=$14			linnum          =       $14
=$c6			ndx             =       $c6     ;Number of character in keyboard buffer
=$033c			tpbuff          =       $033c   ;$033c-$03fb (828-1019)
=$277			kbbuff          =       $277
=$28d			shflag          =       $28d    ;653
=828			tbuffer         =       828
=806			ibsout          =       806
=$ea31			irq             =       $ea31
=$314			cinv            =       $314        ; brk instruction interupt
=$c5			lstx            =       $c5         ;matrix coordinate of last key pressed
=$03			bstop           =       $03      ;stop
=$05			bwhite          =       $05      ;set color white
=$08			block           =       $08      ;lock the charset
=$09			bunlock         =       $09      ;unlock the charset
=$0d			bcarret         =       $0d
=$0e			btext           =       $0e
=$11			bcrsdn          =       $11      ;cursor down 1 line
=$12			brevcol         =       $12
=$13			bhome           =       $13
=$14			bdelete         =       $14
=$1c			bred            =       $1c
=$1d			bcuright        =       $1d
=$1e			bgreen          =       $1e
=$1f			bblue           =       $1f
=$81			borange         =       $81
=$83			blrun           =       $83
=$85			bfkey1          =       $85
=$86			bfkey2          =       $86
=$87			bfkey3          =       $87
=$88			bfkey4          =       $88
=$89			bfkey5          =       $89
=$8a			bfkey6          =       $8a
=$8b			bfkey7          =       $8b
=$8c			bfkey8          =       $8c
=$8d			bcarret1        =       $8d
=$8e			bgraph          =       $8e
=$90			bblack          =       $90
=$91			bcuup           =       $91
=$92			brevoff         =       $92
=$93			bclear          =       $93
=$94			binsert         =       $94
=$95			bbrown          =       $95
=$96			bltred          =       $96
=$97			bdkgrey         =       $97
=$98			bmdgrey         =       $98
=$99			bltgreen        =       $99
=$9a			bltblue         =       $9a
=$9b			bltgrey         =       $9b
=$9c			bmagenta        =       $9c
=$9d			bculeft         =       $9d
=$9e			byellow         =       $9e
=$9f			bcyan           =       $9f
=$0286			carcol          =       $0286
=$030a			ieval           =       $030a
=$73			chrget          =       $73
=$79			chrgot          =       $79
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.0a3b			libtart

;******  Return to file: colour.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col= vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: colour.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=$a3bb			b_opentxtspc  = $a3bb ;  1) Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ;  2) Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ;  3) ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ;  4) Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ;  5) Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ;  6) Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ;  7) Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ;  8) Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ;  9) Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; 10) Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; 11) Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; 12) Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; 13) Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; 14) Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; 15) Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; 17) Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; 18) Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; 19) Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; 20) Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; 21) Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; 22) Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; 23) Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; 24) Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; 25) Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; 26) Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; 27) Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; 28) check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; 29) check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; 30) send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; 31) find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; 32) Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; 33) Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; 34) Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; 35) Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; 36) Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; 37) Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; 38) Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; 39) Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; 40) Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; 41) Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; 42) Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; 43) Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; 44) Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; 45) Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; 46) Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; 47) Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; 48) Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; 49) Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; 50) Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: colour.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0a3b			scrmaninit
.0a3b	20 62 0b	               jsr  push
.0a3e	a9 06		               lda  #vbleu
.0a40	8d 21 d0	               sta  vicbackcol
.0a43	a9 05		               lda  #vvert
.0a45	8d 20 d0	               sta  vicbordcol
.0a48	a9 01		               lda  #vblanc
.0a4a	8d 86 02	               sta  bascol
.0a4d	ad 00 04	               lda  scrnram
.0a50	29 fd		               and  #%11111101
.0a52	8d 00 04	               sta  scrnram
.0a55	20 5c 0a	               jsr  cls
.0a58	20 a1 0b	               jsr  pop
.0a5b	60		               rts
.0a5c			cls
.0a5c	08		               php
.0a5d	48		               pha
.0a5e	a9 93		               lda  #$93
.0a60	20 6b 0a	               jsr  putch
.0a63	a9 0e		               lda  #$0e
.0a65	20 6b 0a	               jsr  putch
.0a68	68		               pla
.0a69	28		               plp
.0a6a	60		               rts
.0a6b			putch
.0a6b	08		               php
.0a6c	20 d2 ff	               jsr  $ffd2
.0a6f	28		               plp
.0a70	60		               rts
.0a71			puts
.0a71	20 62 0b	               jsr  push
.0a74	86 fb		               stx  zpage1
.0a76	84 fc		               sty  zpage1+1
.0a78	a0 00		               ldy  #0
.0a7a	b1 fb		next           lda  (zpage1),y
.0a7c	f0 09		               beq  exit
.0a7e	20 6b 0a	               jsr  putch
.0a81	20 69 0c	               jsr  inczp1
.0a84	4c 7a 0a	               jmp  next
.0a87	20 a1 0b	exit           jsr  pop
.0a8a	60		               rts
.0a8b			gotoxy
.0a8b	08		               php
.0a8c	18		               clc
.0a8d	8a		               txa
.0a8e	48		               pha
.0a8f	98		               tya
.0a90	aa		               tax
.0a91	68		               pla
.0a92	a8		               tay
.0a93	20 f0 ff	               jsr  kplot
.0a96	28		               plp
.0a97	60		               rts
.0a98			cursor
=$0286			bascol    =    $0286
.0a98	08		               php
.0a99	48		               pha
.0a9a	90 12		               bcc  restore
.0a9c	20 f0 ff	               jsr  kplot
.0a9f	8c c0 0a	               sty  cx
.0aa2	8e c1 0a	               stx  cy
.0aa5	ad 86 02	               lda  bascol
.0aa8	8d c2 0a	               sta  bcol
.0aab	4c bd 0a	               jmp  out
.0aae	ae c1 0a	restore        ldx  cy
.0ab1	ac c0 0a	               ldy  cx
.0ab4	20 f0 ff	               jsr  kplot
.0ab7	ad c2 0a	               lda  bcol
.0aba	8d 86 02	               sta  bascol
.0abd	68		out            pla
.0abe	28		               plp
.0abf	60		               rts
>0ac0	00		cx   .byte     $00
>0ac1	00		cy   .byte     $00
>0ac2	00		bcol .byte     $00
.0ac3			cursave
.0ac3	08		               php
.0ac4	38		               sec
.0ac5	20 98 0a	               jsr  cursor
.0ac8	28		               plp
.0ac9	60		               rts
.0aca			curput
.0aca	08		               php
.0acb	18		               clc
.0acc	20 98 0a	               jsr  cursor
.0acf	28		               plp
.0ad0	60		               rts
.0ad1			putsxy
.0ad1	20 62 0b	               jsr  push
.0ad4	86 fb		               stx  zpage1
.0ad6	84 fc		               sty  zpage1+1
.0ad8	a0 00		               ldy  #$00
.0ada	b1 fb		               lda  (zpage1),y
.0adc	aa		               tax
.0add	20 69 0c	               jsr  inczp1
.0ae0	b1 fb		               lda  (zpage1),y
.0ae2	a8		               tay
.0ae3	20 8b 0a	               jsr  gotoxy
.0ae6	20 69 0c	               jsr  inczp1
.0ae9	a6 fb		               ldx  zpage1
.0aeb	a4 fc		               ldy  zpage1+1
.0aed	20 71 0a	               jsr  puts
.0af0	20 a1 0b	               jsr  pop
.0af3	60		               rts
>0af4	00 00		straddr   .word     $00
>0af6	00		px        .byte     $00
>0af7	00		py        .byte     $00
>0af8	00 00		zp1       .word     $00
.0afa			putscxy
.0afa	20 62 0b	               jsr  push
.0afd	84 fc		               sty  zpage1+1
.0aff	86 fb		               stx  zpage1
.0b01	ad 86 02	               lda  bascol
.0b04	8d 24 0b	               sta  bc
.0b07	a0 00		               ldy #$00
.0b09	b1 fb		               lda  (zpage1),y
.0b0b	8d 86 02	               sta  bascol
.0b0e	20 69 0c	               jsr  inczp1
.0b11	a6 fb		               ldx  zpage1
.0b13	a4 fc		               ldy  zpage1+1
.0b15	20 d1 0a	               jsr  putsxy
.0b18	ad 24 0b	               lda  bc
.0b1b	8d 86 02	               sta  bascol
.0b1e	20 a1 0b	               jsr  pop
.0b21	60		               rts
>0b22	00 00		straddr  .word      $00
>0b24	00		bc       .byte      $00
>0b25	00 00		zp1      .word      $00
.0b27			putrahex
.0b27	08		               php
.0b28	48		               pha
.0b29	20 6f 0d	               jsr  a2hex
.0b2c	a9 1b		               lda  #<a2hexstr
.0b2e	a0 0d		               ldy  #>a2hexstr
.0b30	20 71 0a	               jsr  puts
.0b33	68		               pla
.0b34	28		               plp
.0b35	60		               rts
.0b36			kputrahexxy
.0b36			bputrahexxy
.0b36			putrahexxy
.0b36	08		               php
.0b37	20 6f 0d	               jsr  a2hex
.0b3a	a9 18		               lda  #<a2hexpos
.0b3c	a0 0d		               ldy  #>a2hexpos
.0b3e	20 d1 0a	               jsr  putsxy
.0b41	68		               pla
.0b42	28		               plp
.0b43	60		               rts
.0b44			putrahexcxy
.0b44	08		               php
.0b45	20 6f 0d	               jsr  a2hex
.0b48	a9 18		               lda  #<a2hexpos
.0b4a	a0 0d		               ldy  #>a2hexpos
.0b4c	20 fa 0a	               jsr  putscxy
.0b4f	68		               pla
.0b50	28		               plp
.0b51	60		               rts
.0b52			setinverse
.0b52	48		               pha
.0b53	a9 12		               lda  #$12
.0b55	20 d2 ff	               jsr  $ffd2
.0b58	68		               pla
.0b59	60		               rts
.0b5a			clrinverse
.0b5a	48		               pha
.0b5b	a9 92		               lda  #$92
.0b5d	20 d2 ff	               jsr  $ffd2
.0b60	68		               pla
.0b61	60		               rts

;******  Return to file: colour.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.0b62			push
.0b62	08		          php            ; stack : flg, pcl, pch
.0b63	78		          sei
.0b64	8d 9e 0b	          sta  ra        ; save a
.0b67	68		          pla            ; stack : pcl, pch
.0b68	8d 9d 0b	          sta  rp        ; save rp
.0b6b	68		          pla            ; stack : pch
.0b6c	8d 9f 0b	          sta  pc        ; save pcl
.0b6f	68		          pla            ; stack : -
.0b70	8d a0 0b	          sta  pc+1      ; save pch
.0b73	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0b75	48		          pha            ; stack : zp1l
.0b76	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0b78	48		          pha            ; stack : zp1h, zp1l
.0b79	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0b7b	48		          pha            ; stack : zp2l, zp1h, zp1l
.0b7c	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0b7e	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0b7f	ad 9d 0b	          lda  rp        ; get rp
.0b82	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0b83	ad 9e 0b	          lda  ra        ; get a
.0b86	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0b87	8a		          txa            ; get x
.0b88	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b89	98		          tya            ; get y
.0b8a	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b8b	ad a0 0b	          lda  pc+1      ; get pch
.0b8e	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b8f	ad 9f 0b	          lda  pc        ; get pcl
.0b92	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b93	ad 9d 0b	          lda  rp        ; get rp
.0b96	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b97	ad 9e 0b	          lda  ra        ; get a
.0b9a	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b9b	58		          cli
.0b9c	60		          rts
>0b9d	00		rp        .byte     0
>0b9e	00		ra        .byte     0
>0b9f	00 00		pc        .word     0
.0ba1			pull
.0ba1			pop
.0ba1	78		          sei
.0ba2	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ba3	8d d6 0b	          sta  pc        ; save pcl
.0ba6	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ba7	8d d7 0b	          sta  pc+1      ; save pch
.0baa	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0bab	a8		          tay            ; set y
.0bac	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0bad	aa		          tax            ; set x
.0bae	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0baf	8d d5 0b	          sta  ra        ; save a
.0bb2	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0bb3	8d d4 0b	          sta  rp        ; save rp
.0bb6	68		          pla            ; stack : zp2l, zp1h, zp1l
.0bb7	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0bb9	68		          pla            ; stack : zp1h, zp1l
.0bba	85 fd		          sta  zpage2    ; get zpage2 High byte
.0bbc	68		          pla            ; stack : zp1l
.0bbd	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0bbf	68		          pla            ; stack :
.0bc0	85 fb		          sta  zpage1    ; get zpage1 High byte
.0bc2	ad d7 0b	          lda  pc+1      ; get pch
.0bc5	48		          pha            ; stack : pch
.0bc6	ad d6 0b	          lda  pc
.0bc9	48		          pha            ; stack : pcl, pch
.0bca	ad d4 0b	          lda  rp        ; get rp
.0bcd	48		          pha            ; stack : rp, pcl, pch
.0bce	ad d5 0b	          lda  ra        ; set ra
.0bd1	58		          cli
.0bd2	28		          plp            ; stack : pcl, pch
.0bd3	60		          rts
>0bd4	00		rp        .byte     0
>0bd5	00		ra        .byte     0
>0bd6	00 00		pc        .word     0

;******  Return to file: colour.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.0bd8			blkfill
.0bd8	20 62 0b	bf0            jsr  push
.0bdb	20 96 0c	               jsr  savezp1
.0bde	84 fc		               sty  zpage1+1
.0be0	a0 00		               ldy  #$00
.0be2	84 fb		               sty  zpage1
.0be4	91 fb		bf1            sta  (zpage1),y
.0be6	c8		               iny
.0be7	d0 fb		               bne  bf1
.0be9	20 a5 0c	               jsr  restzp1
.0bec	20 a1 0b	               jsr  pop
.0bef	60		               rts
.0bf0			memfill
.0bf0	20 62 0b	               jsr  push
.0bf3	20 d8 0b	mf1            jsr  blkfill
.0bf6	c8		               iny
.0bf7	ca		               dex
.0bf8	d0 f9		               bne  mf1
.0bfa	20 a1 0b	               jsr  pop
.0bfd	60		               rts
.0bfe			memmove
.0bfe	20 62 0b	               jsr  push
.0c01	ba		               tsx            ; On se crée un pointeur ...
.0c02	8a		               txa
.0c03	18		               clc
.0c04	69 0b		               adc  #11
.0c06	a8		               tay
.0c07	a2 06		               ldx  #$06
.0c09	b9 00 01	nextbyte       lda  $0100,y
.0c0c	99 58 0c	               sta  words,y
.0c0f	c8		               iny
.0c10	ca		               dex
.0c11	d0 f6		               bne  nextbyte
.0c13	ad 58 0c	               lda  s
.0c16	8d 2f 0c	               sta  source+1
.0c19	ad 59 0c	               lda  s+1
.0c1c	8d 30 0c	               sta  source+2
.0c1f	ad 5a 0c	               lda  d
.0c22	8d 2c 0c	               sta  destin+1
.0c25	ad 5b 0c	               lda  d+1
.0c28	8d 2d 0c	               sta  destin+2
.0c2b	ad ff ff	destin         lda  $ffff
.0c2e	8d ff ff	source         sta  $ffff
.0c31	ee 2c 0c	               inc  destin+1
.0c34	d0 03		               bne  src
.0c36	ee 2d 0c	               inc  destin+2
.0c39	ee 2f 0c	src            inc  source+1
.0c3c	d0 03		               bne  cnt
.0c3e	ee 30 0c	               inc  source+2
.0c41	ad 5c 0c	cnt            lda  compte
.0c44	d0 08		               bne  decit
.0c46	ad 5d 0c	               lda  compte+1
.0c49	f0 09		               beq  fini
.0c4b	ce 5d 0c	               dec  compte+1
.0c4e	ce 5c 0c	decit          dec  compte
.0c51	4c 2b 0c	               jmp  destin
.0c54	20 a1 0b	fini           jsr  pop
.0c57	60		               rts
.0c58			words
>0c58	00 00		s         .word     $0000
>0c5a	00 00		d         .word     $0000
>0c5c	00 00		compte    .word     $0000
.0c5e			decword
.0c5e	20 62 0b	               jsr  push
.0c61	86 fd		               stx  zpage2
.0c63	84 fe		               sty  zpage2+1
.0c65	20 a1 0b	               jsr  pop
.0c68	60		               rts
.0c69			inczp1
.0c69	08		               php
.0c6a	e6 fb		               inc  zpage1
.0c6c	d0 02		               bne  nopage
.0c6e	e6 fc		               inc  zpage1+1
.0c70	28		nopage         plp
.0c71	60		               rts
.0c72			deczp1
.0c72	08		                php
.0c73	48		                pha
.0c74	c6 fb		                dec  zpage1
.0c76	d0 02		                bne  nopage
.0c78	c6 fc		                dec  zpage1+1
.0c7a	c6 fb		nopage          dec  zpage1
.0c7c	68		                pla
.0c7d	28		                plp
.0c7e	60		                rts
.0c7f			inczp2
.0c7f	08		               php
.0c80	48		               pha
.0c81	e6 fd		               inc  zpage2
.0c83	d0 02		               bne  nopage
.0c85	e6 fe		               inc  zpage2+1
.0c87	68		nopage         pla
.0c88	28		               plp
.0c89	60		               rts
.0c8a			deczp2
.0c8a	08		               php
.0c8b	48		               pha
.0c8c	a5 fd		               lda  zpage2
.0c8e	d0 02		               bne  nopage
.0c90	c6 fe		               dec  zpage2+1
.0c92	c6 fd		nopage         dec  zpage2
.0c94	28		               plp
.0c95	60		               rts
.0c96			savezp1
.0c96	08		               php
.0c97	48		               pha
.0c98	a5 fb		               lda  zpage1
.0c9a	8d 12 0d	               sta  zp1
.0c9d	a5 fc		               lda  zpage1+1
.0c9f	8d 13 0d	               sta  zp1+1
.0ca2	68		               pla
.0ca3	28		               plp
.0ca4	60		               rts
.0ca5			restzp1
.0ca5	08		               php
.0ca6	48		               pha
.0ca7	ad 12 0d	               lda zp1
.0caa	85 fb		               sta zpage1
.0cac	ad 13 0d	               lda zp1+1
.0caf	85 fc		               sta zpage1+1
.0cb1	68		               pla
.0cb2	28		               plp
.0cb3	60		               rts
.0cb4			savezp2
.0cb4	08		         php
.0cb5	48		         pha
.0cb6	a5 fd		         lda zpage2
.0cb8	8d 14 0d	         sta zp2
.0cbb	a5 fe		         lda zpage2+1
.0cbd	8d 15 0d	         sta zp2+1
.0cc0	68		         pla
.0cc1	28		         plp
.0cc2	60		         rts
.0cc3			restzp2
.0cc3	08		                php
.0cc4	48		                pha
.0cc5	ad 14 0d	                lda  zp2
.0cc8	85 fd		                sta  zpage2
.0cca	ad 15 0d	                lda  zp2+1
.0ccd	85 fe		                sta  zpage2+1
.0ccf	68		                pla
.0cd0	28		                plp
.0cd1	60		                rts
.0cd2			xy2addr
.0cd2	08		                php
.0cd3	48		                pha
.0cd4	8a		                txa
.0cd5	48		                pha
.0cd6	98		                tya
.0cd7	48		                pha
.0cd8	ad 0d 0d	                lda     addr1+1
.0cdb	8d 0f 0d	                sta     addr2+1
.0cde	ad 0c 0d	                lda     addr1
.0ce1	8d 0e 0d	                sta     addr2
.0ce4	c0 00		                cpy     #$00
.0ce6	f0 0f		                beq     addx
.0ce8	18		moreline        clc
.0ce9	6d 0b 0d	                adc     ymult
.0cec	90 03		                bcc     norepy
.0cee	ee 0f 0d	                inc     addr2+1
.0cf1	8d 0e 0d	norepy          sta     addr2
.0cf4	88		                dey
.0cf5	d0 f1		                bne     moreline
.0cf7	8a		addx            txa
.0cf8	18		                clc
.0cf9	6d 0e 0d	                adc     addr2
.0cfc	90 03		                bcc     thatsit
.0cfe	ee 0f 0d	                inc     addr2+1
.0d01	8d 0e 0d	thatsit         sta     addr2
.0d04	68		                pla
.0d05	a8		                tay
.0d06	68		                pla
.0d07	aa		                tax
.0d08	68		                pla
.0d09	28		                plp
.0d0a	60		                rts
>0d0b	28		ymult          .byte     40
>0d0c	00 00		addr1          .word     $0000
>0d0e	00 00		addr2          .word     $0000
>0d10	00 00		bytecnt        .word     $0000
>0d12	00 00		zp1        .word   $0000
>0d14	00 00		zp2        .word   $0000

;******  Return to file: colour.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>0d16	01		a2hexcol       .byte     1              ; pour aputscxy
>0d17	00		a2hexbkcol     .byte     %00000000
.0d18			a2hexpos
>0d18	00		a2hexpx        .byte     0              ; pour aputsxy
>0d19	00		a2hexpy        .byte     0
>0d1a	24		a2hexprefix    .byte     "$"            ; pour aputs
>0d1b	00 00		a2hexstr       .word     $00
>0d1d	00 00		               .word     $00
>0d1f	00		               .byte     0              ; 0 end string
.0d20			putahexfmtxy
.0d20	20 62 0b	               jsr  push
.0d23	20 6f 0d	               jsr  a2hex
.0d26	ae 18 0d	               ldx  a2hexpx
.0d29	ac 19 0d	               ldy  a2hexpy
.0d2c	20 8b 0a	               jsr  gotoxy
.0d2f	a2 1a		               ldx  #<a2hexprefix
.0d31	a0 0d		               ldy  #>a2hexprefix
.0d33	20 71 0a	               jsr  puts
.0d36	20 a1 0b	               jsr  pop
.0d39	60		               rts
.0d3a			putahexfmt
.0d3a	20 62 0b	               jsr  push
.0d3d	20 6f 0d	               jsr  a2hex
.0d40	a2 1a		               ldx  #<a2hexprefix
.0d42	a0 0d		               ldy  #>a2hexprefix
.0d44	20 71 0a	               jsr  puts
.0d47	20 a1 0b	               jsr  pop
.0d4a	60		               rts
.0d4b			putahex
.0d4b	20 62 0b	               jsr  push
.0d4e	20 6f 0d	               jsr  a2hex
.0d51	a2 1b		               ldx  #<a2hexstr
.0d53	a0 0d		               ldy  #>a2hexstr
.0d55	20 71 0a	               jsr  puts
.0d58	20 a1 0b	               jsr  pop
.0d5b	60		               rts
.0d5c			nib2hex
.0d5c	08		               php
.0d5d	29 0f		               and  #$0f
.0d5f	f8		               sed
.0d60	18		               clc
.0d61	69 90		               adc  #$90
.0d63	69 40		               adc  #$40
.0d65	d8		               cld
.0d66	28		               plp
.0d67	60		               rts
.0d68			lsra4bits
.0d68	08		               php
.0d69	4a		               lsr
.0d6a	4a		               lsr
.0d6b	4a		               lsr
.0d6c	4a		               lsr
.0d6d	28		               plp
.0d6e	60		               rts
.0d6f			a2hex
.0d6f	08		               php
.0d70	48		               pha
.0d71	48		               pha
.0d72	20 68 0d	               jsr  lsra4bits
.0d75	20 5c 0d	               jsr  nib2hex
.0d78	8d 1b 0d	               sta  a2hexstr
.0d7b	68		               pla
.0d7c	20 5c 0d	               jsr  nib2hex
.0d7f	8d 1c 0d	               sta  a2hexstr+1
.0d82	a9 00		               lda  #$00                ; set end of string
.0d84	8d 1d 0d	               sta  a2hexstr+2
.0d87	68		               pla
.0d88	28		               plp
.0d89	60		               rts
.0d8a			xy2hex
.0d8a	20 62 0b	               jsr  push
.0d8d	20 6f 0d	               jsr  a2hex
.0d90	8a		               txa
.0d91	48		               pha
.0d92	20 68 0d	               jsr  lsra4bits
.0d95	20 5c 0d	               jsr  nib2hex
.0d98	8d 1b 0d	               sta  a2hexstr
.0d9b	68		               pla
.0d9c	20 5c 0d	               jsr  nib2hex
.0d9f	8d 1c 0d	               sta  a2hexstr+1
.0da2	98		               tya
.0da3	48		               pha
.0da4	20 68 0d	               jsr  lsra4bits
.0da7	20 5c 0d	               jsr  nib2hex
.0daa	8d 1d 0d	               sta  a2hexstr+2
.0dad	68		               pla
.0dae	20 5c 0d	               jsr  nib2hex
.0db1	8d 1e 0d	               sta  a2hexstr+3
.0db4	a9 00		               lda  #$00                ; 0 ended string
.0db6	8d 1f 0d	               sta  a2hexstr+4
.0db9	20 a1 0b	               jsr  pop
.0dbc			atobin
.0dbc	20 62 0b	               jsr     push
.0dbf	a2 08		               ldx     #8
.0dc1	a0 00		               ldy     #0
.0dc3	2a		nextbit        rol
.0dc4	48		               pha
.0dc5	69 00		               adc     #$00
.0dc7	29 01		               and     #$01
.0dc9	20 5c 0d	               jsr     nib2hex
.0dcc	99 dd 0d	               sta     abin,y
.0dcf	68		               pla
.0dd0	c8		               iny
.0dd1	ca		               dex
.0dd2	d0 ef		               bne     nextbit
.0dd4	a9 00		               lda     #0
.0dd6	99 dd 0d	               sta     abin,y
.0dd9	20 a1 0b	               jsr     pull
.0ddc	60		               rts
>0ddd	30 30 30 30	abin           .null   "00000000"
>0de1	30 30 30 30 00
.0de6			putabin
.0de6	20 bc 0d	               jsr     atobin
.0de9	20 62 0b	               jsr     push
.0dec	a2 dd		               ldx     #<abin
.0dee	a0 0d		               ldy     #>abin
.0df0	20 71 0a	               jsr     puts
.0df3	20 a1 0b	               jsr     pop
.0df6	60		               rts
.0df7			putabinfmt
.0df7	08		               php
.0df8	48		               pha
.0df9	a9 25		               lda     #"%"
.0dfb	20 6b 0a	               jsr     putch
.0dfe	68		               pla
.0dff	20 e6 0d	               jsr     putabin
.0e02	28		               plp
.0e03	60		               rts
.0e04			putabinxy
.0e04	20 8b 0a	               jsr     gotoxy
.0e07	20 e6 0d	               jsr     putabin
.0e0a	60		               rts
.0e0b			putabinfmtxy
.0e0b	20 8b 0a	               jsr     gotoxy
.0e0e	20 f7 0d	               jsr     putabinfmt
.0e11	60		               rts

;******  Return to file: colour.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

.0e12			waitstop
.0e12	20 62 0b	                jsr     push
.0e15	20 ed f6	wait            jsr     k_stop
.0e18	d0 fb		                bne     wait
.0e1a	20 a1 0b	                jsr     pop
.0e1d	60		                rts
.0e1e			anykey
.0e1e	08		                php
.0e1f	48		                pha
.0e20	a5 cb		nokey           lda 203
.0e22	c9 40		                cmp #64
.0e24	f0 fa		                beq nokey
.0e26	68		                pla
.0e27	28		                plp
.0e28	60		                rts
.0e29			getkey
.0e29	20 62 0b	                jsr     push
.0e2c	20 cf ff	again           jsr     chrin
.0e2f	4c 2c 0e	                jmp     again
.0e32	20 a1 0b	                jsr     pop
.0e35	60		                rts
.0e36			waitkey
.0e36	20 62 0b	                jsr     push
.0e39	8d 4e 0e	                sta     thekey
.0e3c	20 e4 ff	nope            jsr     getin
.0e3f	20 d2 ff	                jsr     chrout
.0e42	cd 4e 0e	                cmp     thekey
.0e45	d0 f5		                bne     nope
.0e47	20 d2 ff	                jsr     chrout
.0e4a	20 a1 0b	                jsr     pop
.0e4d	60		                rts
>0e4e	00		thekey          .byte   0
.0e4f			waitspace
.0e4f	20 62 0b	                jsr     push
.0e52	a9 7f		wait            lda     #$7f  ;%01111111
.0e54	8d 00 dc	                sta     $dc00
.0e57	ad 01 dc	                lda     $dc01
.0e5a	29 10		                and     #$10  ;mask %00010000
.0e5c	d0 f4		                bne     wait
.0e5e	20 a1 0b	                jsr     pop
.0e61			waitsstop
.0e61	20 62 0b	                jsr     push
.0e64	20 ed f6	wait            jsr     k_stop  ;%01111111
.0e67	d0 fb		                bne     wait
.0e69	20 a1 0b	                jsr     pop
.0e6c			waitreturn
.0e6c	20 62 0b	                jsr     push
.0e6f	ad 8b 0e	                lda     thecount
.0e72	8d 00 04	                sta     scrnram
.0e75	a9 02		                lda     #$02
.0e77	8d 00 d8	                sta     colorram
.0e7a	20 e4 ff	nope            jsr     getin
.0e7d	20 d2 ff	                jsr     chrout
.0e80	c9 0d		                cmp     #$0d
.0e82	d0 f6		                bne     nope
.0e84	ee 8b 0e	                inc     thecount
.0e87	20 a1 0b	                jsr     pop
.0e8a	60		                rts
>0e8b	01		thecount        .byte   $01

;******  Return to file: colour.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L colour.txt -o colour.prg colour.asm
; Tue Mar 28 08:25:48 2023

;Offset	;Hex		;Source

;******  Processing input file: colour.asm

="20230327-214534-a"	                Version = "20230327-214534-a"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: colour.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: colour.asm

.080d			main
.080d	20 3d 0a	                jsr scrmaninit
.0810	20 19 08	                jsr help
.0813	20 20 0e	                jsr anykey
.0816	4c 74 a4	                jmp b_warmstart
.0819			help
.0819	20 5e 0a	                jsr cls
.081c	a2 8b		                ldx  #<line
.081e	a0 09		                ldy  #>line
.0820	20 73 0a	                jsr  puts
.0823	a2 4e		                ldx  #<header
.0825	a0 08		                ldy  #>header
.0827	20 73 0a	                jsr  puts
.082a	a2 8b		                ldx  #<line
.082c	a0 09		                ldy  #>line
.082e	20 73 0a	                jsr  puts
.0831	a2 37		                ldx  #<shortcuts
.0833	a0 09		                ldy  #>shortcuts
.0835	20 73 0a	                jsr  puts
.0838	a2 8b		                ldx  #<line
.083a	a0 09		                ldy  #>line
.083c	20 73 0a	                jsr  puts
.083f	a2 b4		                ldx  #<helptext
.0841	a0 09		                ldy  #>helptext
.0843	20 73 0a	                jsr  puts
.0846	a2 8b		                ldx  #<line
.0848	a0 09		                ldy  #>line
.084a	20 73 0a	                jsr  puts
.084d	60		                rts
.084e			header
>084e	20 20 20 20	                .text          "     40 BEST MACHINE CODE ROUTINES"
>0852	20 34 30 20 c2 c5 d3 d4 20 cd c1 c3 c8 c9 ce c5
>0862	20 c3 cf c4 c5 20 d2 cf d5 d4 c9 ce c5 d3
>0870	0d		                .byte   $0d
>0871	20 20 20 20	                .text          "          FOR THE COMMODORE 64"
>0875	20 20 20 20 20 20 c6 cf d2 20 d4 c8 c5 20 c3 cf
>0885	cd cd cf c4 cf d2 c5 20 36 34
>088f	0d		                .byte   $0d
>0890	20 20 20 20	                .text          "       Book by Mark Greenshields."
>0894	20 20 20 c2 4f 4f 4b 20 42 59 20 cd 41 52 4b 20
>08a4	c7 52 45 45 4e 53 48 49 45 4c 44 53 2e
>08b1	0d 0d		                .byte   $0d,$0d
>08b3	20 20 20 20	                .text          "              Colour (p62)"
>08b7	20 20 20 20 20 20 20 20 20 20 c3 4f 4c 4f 55 52
>08c7	20 28 50 36 32 29
>08cd	0d		                .byte   $0d
>08ce	20 20 20 20	                .text          "        (c) 1979 Brad Templeton"
>08d2	20 20 20 20 28 43 29 20 31 39 37 39 20 c2 52 41
>08e2	44 20 d4 45 4d 50 4c 45 54 4f 4e
>08ed	0d 0d		                .byte   $0d,$0d
>08ef	20 20 20 20	                .text          "     programmed by Daniel Lafrance."
>08f3	20 50 52 4f 47 52 41 4d 4d 45 44 20 42 59 20 c4
>0903	41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e
>0912	0d		                .byte   $0d
>0913	20 20 20 20	                .text   format("       Version: %s.",Version)
>0917	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 33
>0927	30 33 32 37 2d 32 31 34 35 33 34 2d 41 2e
>0935	0d 00		                .byte   $0d,0
>0937	20 2d 2d 2d	shortcuts       .text          " -------- S H O R T - C U T S ---------"
>093b	2d 2d 2d 2d 2d 20 d3 20 c8 20 cf 20 d2 20 d4 20
>094b	2d 20 c3 20 d5 20 d4 20 d3 20 2d 2d 2d 2d 2d 2d
>095b	2d 2d 2d
>095e	0d		                .byte   $0d
>095f	20 52 55 4e	                .text   format(" run=SYS%5d, help=SYS%5d",main, help)
>0963	3d d3 d9 d3 20 32 30 36 31 2c 20 48 45 4c 50 3d
>0973	d3 d9 d3 20 32 30 37 33
>097b	0d		                .byte   $0d
>097c	20 43 4c 53	                .text   format(" cls=SYS%5d",cls)
>0980	3d d3 d9 d3 20 32 36 35 34
>0989	0d 00		                .byte   $0d,0
>098b	20 2d 2d 2d	line            .text          " --------------------------------------"
>098f	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>099f	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09af	2d 2d 2d
>09b2	0d 00		                .byte   $0d,0
>09b4	20 c3 4f 4c	helptext        .text   format(" Colour:SYS%5d,screen,back,text,1,2,3",colour)
>09b8	4f 55 52 3a d3 d9 d3 20 32 35 35 37 2c 53 43 52
>09c8	45 45 4e 2c 42 41 43 4b 2c 54 45 58 54 2c 31 2c
>09d8	32 2c 33
>09db	0d		                .byte   $0d
>09dc	20 45 58 2e	                .text   format(" ex.: SYS%5d,15,11,0,10,11,12",colour)
>09e0	3a 20 d3 d9 d3 20 32 35 35 37 2c 31 35 2c 31 31
>09f0	2c 30 2c 31 30 2c 31 31 2c 31 32
>09fb	0d 00		                .byte   $0d,0
.09fd			colour
.09fd	20 fd ae	                jsr $aefd   ; Fetch the first ...
.0a00	20 34 0a	                jsr param   ; ... parameter and make it ...
.0a03	8d 21 d0	                sta vicback0col   ; ... the screen colour.
.0a06	20 fd ae	                jsr $aefd   ; Fetch the first ...
.0a09	20 34 0a	                jsr param   ; ... parameter and make it ...
.0a0c	8d 20 d0	                sta vicbordcol   ; ... the border colour 0.
.0a0f	20 fd ae	                jsr $aefd   ; Fetch the second ...
.0a12	20 34 0a	                jsr param   ; ... parameter and make it ...
.0a15	8d 86 02	                sta 646     ; ... the text colour.
.0a18	20 fd ae	                jsr $aefd   ; Fetch the third ...
.0a1b	20 34 0a	                jsr param   ; ... parameter and make it ...
.0a1e	8d 22 d0	                sta 53282   ; ... the multi colour 1.
.0a21	20 fd ae	                jsr $aefd   ; Fetch the fourth ...
.0a24	20 34 0a	                jsr param   ; ... parameter and make it ...
.0a27	8d 23 d0	                sta 53283   ; ... the multi colour 2.
.0a2a	20 fd ae	                jsr $aefd   ; Fetch the fifth ...
.0a2d	20 34 0a	                jsr param   ; ... parameter and make it ...
.0a30	8d 24 d0	                sta 53284   ; ... the multi colour 3.
.0a33	60		                rts
.0a34	20 9e b7	param           jsr $b79e
.0a37	8a		                txa
.0a38	60		                rts
.0a39	4c 48 b2	iqerr           jmp $b248
>0a3c	00		byte            .byte 0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$14			linnum          =       $14     ; 20
=$2b			txttab          =       $2b     ; 43
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ; 03 [STOP]
=$05			bwhite          =       $05     ; 05 [CTRL]+[1] set color WHITE
=$08			block           =       $08     ; 08 [SHIFT]+[C=] disabled
=$09			bunlock         =       $09     ; 09 [SHIFT]+[C=] enabled
=$0d			bcarret         =       $0d     ; 11 [RETURN]
=$0e			btext           =       $0e     ; 14 switch to Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ; 17 [SHIFT]cursor down 1 line
=$12			brevcol         =       $12     ; 18 reverse video ON
=$13			bhome           =       $13     ; 19 Cursor HOME
=$14			bdelete         =       $14     ; 20 DELETE
=$1c			bred            =       $1c     ;
=$1d			bcuright        =       $1d     ;
=$1e			bgreen          =       $1e     ;
=$1f			bblue           =       $1f     ;
=$81			borange         =       $81     ;
=$83			blrun           =       $83     ;
=$85			bfkey1          =       $85     ;
=$86			bfkey2          =       $86     ;
=$87			bfkey3          =       $87     ;
=$88			bfkey4          =       $88     ;
=$89			bfkey5          =       $89     ;
=$8a			bfkey6          =       $8a     ;
=$8b			bfkey7          =       $8b     ;
=$8c			bfkey8          =       $8c     ;
=$8d			bcarret1        =       $8d     ;
=$8e			bgraph          =       $8e     ;
=$90			bblack          =       $90     ;
=$91			bcuup           =       $91     ;
=$92			brevoff         =       $92     ;
=$93			bclear          =       $93     ;
=$94			binsert         =       $94     ;
=$95			bbrown          =       $95     ;
=$96			bltred          =       $96     ;
=$97			bdkgrey         =       $97     ;
=$98			bmdgrey         =       $98     ;
=$99			bltgreen        =       $99     ;
=$9a			bltblue         =       $9a     ;
=$9b			bltgrey         =       $9b     ;
=$9c			bmagenta        =       $9c     ;
=$9d			bculeft         =       $9d     ;
=$9e			byellow         =       $9e     ;
=$9f			bcyan           =       $9f     ;
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.0a3d			libtart

;******  Return to file: colour.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col= vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: colour.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=$a3bb			b_opentxtspc  = $a3bb ;  1) Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ;  2) Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ;  3) ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ;  4) Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ;  5) Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ;  6) Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ;  7) Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ;  8) Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ;  9) Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; 10) Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; 11) Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; 12) Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; 13) Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; 14) Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; 15) Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; 17) Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; 18) Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; 19) Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; 20) Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; 21) Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; 22) Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; 23) Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; 24) Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; 25) Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; 26) Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; 27) Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; 28) check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; 29) check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; 30) send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; 31) find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; 32) Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; 33) Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; 34) Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; 35) Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; 36) Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; 37) Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; 38) Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; 39) Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; 40) Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; 41) Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; 42) Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; 43) Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; 44) Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; 45) Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; 46) Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; 47) Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; 48) Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; 49) Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; 50) Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: colour.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0a3d			scrmaninit
.0a3d	20 64 0b	               jsr  push
.0a40	a9 06		               lda  #vbleu
.0a42	8d 21 d0	               sta  vicbackcol
.0a45	a9 05		               lda  #vvert
.0a47	8d 20 d0	               sta  vicbordcol
.0a4a	a9 01		               lda  #vblanc
.0a4c	8d 86 02	               sta  bascol
.0a4f	ad 00 04	               lda  scrnram
.0a52	29 fd		               and  #%11111101
.0a54	8d 00 04	               sta  scrnram
.0a57	20 5e 0a	               jsr  cls
.0a5a	20 a3 0b	               jsr  pop
.0a5d	60		               rts
.0a5e			cls
.0a5e	08		               php
.0a5f	48		               pha
.0a60	a9 93		               lda  #$93
.0a62	20 6d 0a	               jsr  putch
.0a65	a9 0e		               lda  #$0e
.0a67	20 6d 0a	               jsr  putch
.0a6a	68		               pla
.0a6b	28		               plp
.0a6c	60		               rts
.0a6d			putch
.0a6d	08		               php
.0a6e	20 d2 ff	               jsr  $ffd2
.0a71	28		               plp
.0a72	60		               rts
.0a73			puts
.0a73	20 64 0b	               jsr  push
.0a76	86 fb		               stx  zpage1
.0a78	84 fc		               sty  zpage1+1
.0a7a	a0 00		               ldy  #0
.0a7c	b1 fb		next           lda  (zpage1),y
.0a7e	f0 09		               beq  exit
.0a80	20 6d 0a	               jsr  putch
.0a83	20 6b 0c	               jsr  inczp1
.0a86	4c 7c 0a	               jmp  next
.0a89	20 a3 0b	exit           jsr  pop
.0a8c	60		               rts
.0a8d			gotoxy
.0a8d	08		               php
.0a8e	18		               clc
.0a8f	8a		               txa
.0a90	48		               pha
.0a91	98		               tya
.0a92	aa		               tax
.0a93	68		               pla
.0a94	a8		               tay
.0a95	20 f0 ff	               jsr  kplot
.0a98	28		               plp
.0a99	60		               rts
.0a9a			cursor
=$0286			bascol    =    $0286
.0a9a	08		               php
.0a9b	48		               pha
.0a9c	90 12		               bcc  restore
.0a9e	20 f0 ff	               jsr  kplot
.0aa1	8c c2 0a	               sty  cx
.0aa4	8e c3 0a	               stx  cy
.0aa7	ad 86 02	               lda  bascol
.0aaa	8d c4 0a	               sta  bcol
.0aad	4c bf 0a	               jmp  out
.0ab0	ae c3 0a	restore        ldx  cy
.0ab3	ac c2 0a	               ldy  cx
.0ab6	20 f0 ff	               jsr  kplot
.0ab9	ad c4 0a	               lda  bcol
.0abc	8d 86 02	               sta  bascol
.0abf	68		out            pla
.0ac0	28		               plp
.0ac1	60		               rts
>0ac2	00		cx   .byte     $00
>0ac3	00		cy   .byte     $00
>0ac4	00		bcol .byte     $00
.0ac5			cursave
.0ac5	08		               php
.0ac6	38		               sec
.0ac7	20 9a 0a	               jsr  cursor
.0aca	28		               plp
.0acb	60		               rts
.0acc			curput
.0acc	08		               php
.0acd	18		               clc
.0ace	20 9a 0a	               jsr  cursor
.0ad1	28		               plp
.0ad2	60		               rts
.0ad3			putsxy
.0ad3	20 64 0b	               jsr  push
.0ad6	86 fb		               stx  zpage1
.0ad8	84 fc		               sty  zpage1+1
.0ada	a0 00		               ldy  #$00
.0adc	b1 fb		               lda  (zpage1),y
.0ade	aa		               tax
.0adf	20 6b 0c	               jsr  inczp1
.0ae2	b1 fb		               lda  (zpage1),y
.0ae4	a8		               tay
.0ae5	20 8d 0a	               jsr  gotoxy
.0ae8	20 6b 0c	               jsr  inczp1
.0aeb	a6 fb		               ldx  zpage1
.0aed	a4 fc		               ldy  zpage1+1
.0aef	20 73 0a	               jsr  puts
.0af2	20 a3 0b	               jsr  pop
.0af5	60		               rts
>0af6	00 00		straddr   .word     $00
>0af8	00		px        .byte     $00
>0af9	00		py        .byte     $00
>0afa	00 00		zp1       .word     $00
.0afc			putscxy
.0afc	20 64 0b	               jsr  push
.0aff	84 fc		               sty  zpage1+1
.0b01	86 fb		               stx  zpage1
.0b03	ad 86 02	               lda  bascol
.0b06	8d 26 0b	               sta  bc
.0b09	a0 00		               ldy #$00
.0b0b	b1 fb		               lda  (zpage1),y
.0b0d	8d 86 02	               sta  bascol
.0b10	20 6b 0c	               jsr  inczp1
.0b13	a6 fb		               ldx  zpage1
.0b15	a4 fc		               ldy  zpage1+1
.0b17	20 d3 0a	               jsr  putsxy
.0b1a	ad 26 0b	               lda  bc
.0b1d	8d 86 02	               sta  bascol
.0b20	20 a3 0b	               jsr  pop
.0b23	60		               rts
>0b24	00 00		straddr  .word      $00
>0b26	00		bc       .byte      $00
>0b27	00 00		zp1      .word      $00
.0b29			putrahex
.0b29	08		               php
.0b2a	48		               pha
.0b2b	20 71 0d	               jsr  a2hex
.0b2e	a9 1d		               lda  #<a2hexstr
.0b30	a0 0d		               ldy  #>a2hexstr
.0b32	20 73 0a	               jsr  puts
.0b35	68		               pla
.0b36	28		               plp
.0b37	60		               rts
.0b38			kputrahexxy
.0b38			bputrahexxy
.0b38			putrahexxy
.0b38	08		               php
.0b39	20 71 0d	               jsr  a2hex
.0b3c	a9 1a		               lda  #<a2hexpos
.0b3e	a0 0d		               ldy  #>a2hexpos
.0b40	20 d3 0a	               jsr  putsxy
.0b43	68		               pla
.0b44	28		               plp
.0b45	60		               rts
.0b46			putrahexcxy
.0b46	08		               php
.0b47	20 71 0d	               jsr  a2hex
.0b4a	a9 1a		               lda  #<a2hexpos
.0b4c	a0 0d		               ldy  #>a2hexpos
.0b4e	20 fc 0a	               jsr  putscxy
.0b51	68		               pla
.0b52	28		               plp
.0b53	60		               rts
.0b54			setinverse
.0b54	48		               pha
.0b55	a9 12		               lda  #$12
.0b57	20 d2 ff	               jsr  $ffd2
.0b5a	68		               pla
.0b5b	60		               rts
.0b5c			clrinverse
.0b5c	48		               pha
.0b5d	a9 92		               lda  #$92
.0b5f	20 d2 ff	               jsr  $ffd2
.0b62	68		               pla
.0b63	60		               rts

;******  Return to file: colour.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.0b64			push
.0b64	08		          php            ; stack : flg, pcl, pch
.0b65	78		          sei
.0b66	8d a0 0b	          sta  ra        ; save a
.0b69	68		          pla            ; stack : pcl, pch
.0b6a	8d 9f 0b	          sta  rp        ; save rp
.0b6d	68		          pla            ; stack : pch
.0b6e	8d a1 0b	          sta  pc        ; save pcl
.0b71	68		          pla            ; stack : -
.0b72	8d a2 0b	          sta  pc+1      ; save pch
.0b75	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0b77	48		          pha            ; stack : zp1l
.0b78	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0b7a	48		          pha            ; stack : zp1h, zp1l
.0b7b	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0b7d	48		          pha            ; stack : zp2l, zp1h, zp1l
.0b7e	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0b80	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0b81	ad 9f 0b	          lda  rp        ; get rp
.0b84	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0b85	ad a0 0b	          lda  ra        ; get a
.0b88	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0b89	8a		          txa            ; get x
.0b8a	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b8b	98		          tya            ; get y
.0b8c	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b8d	ad a2 0b	          lda  pc+1      ; get pch
.0b90	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b91	ad a1 0b	          lda  pc        ; get pcl
.0b94	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b95	ad 9f 0b	          lda  rp        ; get rp
.0b98	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b99	ad a0 0b	          lda  ra        ; get a
.0b9c	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b9d	58		          cli
.0b9e	60		          rts
>0b9f	00		rp        .byte     0
>0ba0	00		ra        .byte     0
>0ba1	00 00		pc        .word     0
.0ba3			pull
.0ba3			pop
.0ba3	78		          sei
.0ba4	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ba5	8d d8 0b	          sta  pc        ; save pcl
.0ba8	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ba9	8d d9 0b	          sta  pc+1      ; save pch
.0bac	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0bad	a8		          tay            ; set y
.0bae	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0baf	aa		          tax            ; set x
.0bb0	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0bb1	8d d7 0b	          sta  ra        ; save a
.0bb4	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0bb5	8d d6 0b	          sta  rp        ; save rp
.0bb8	68		          pla            ; stack : zp2l, zp1h, zp1l
.0bb9	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0bbb	68		          pla            ; stack : zp1h, zp1l
.0bbc	85 fd		          sta  zpage2    ; get zpage2 High byte
.0bbe	68		          pla            ; stack : zp1l
.0bbf	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0bc1	68		          pla            ; stack :
.0bc2	85 fb		          sta  zpage1    ; get zpage1 High byte
.0bc4	ad d9 0b	          lda  pc+1      ; get pch
.0bc7	48		          pha            ; stack : pch
.0bc8	ad d8 0b	          lda  pc
.0bcb	48		          pha            ; stack : pcl, pch
.0bcc	ad d6 0b	          lda  rp        ; get rp
.0bcf	48		          pha            ; stack : rp, pcl, pch
.0bd0	ad d7 0b	          lda  ra        ; set ra
.0bd3	58		          cli
.0bd4	28		          plp            ; stack : pcl, pch
.0bd5	60		          rts
>0bd6	00		rp        .byte     0
>0bd7	00		ra        .byte     0
>0bd8	00 00		pc        .word     0

;******  Return to file: colour.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.0bda			blkfill
.0bda	20 64 0b	bf0            jsr  push
.0bdd	20 98 0c	               jsr  savezp1
.0be0	84 fc		               sty  zpage1+1
.0be2	a0 00		               ldy  #$00
.0be4	84 fb		               sty  zpage1
.0be6	91 fb		bf1            sta  (zpage1),y
.0be8	c8		               iny
.0be9	d0 fb		               bne  bf1
.0beb	20 a7 0c	               jsr  restzp1
.0bee	20 a3 0b	               jsr  pop
.0bf1	60		               rts
.0bf2			memfill
.0bf2	20 64 0b	               jsr  push
.0bf5	20 da 0b	mf1            jsr  blkfill
.0bf8	c8		               iny
.0bf9	ca		               dex
.0bfa	d0 f9		               bne  mf1
.0bfc	20 a3 0b	               jsr  pop
.0bff	60		               rts
.0c00			memmove
.0c00	20 64 0b	               jsr  push
.0c03	ba		               tsx            ; On se crée un pointeur ...
.0c04	8a		               txa
.0c05	18		               clc
.0c06	69 0b		               adc  #11
.0c08	a8		               tay
.0c09	a2 06		               ldx  #$06
.0c0b	b9 00 01	nextbyte       lda  $0100,y
.0c0e	99 5a 0c	               sta  words,y
.0c11	c8		               iny
.0c12	ca		               dex
.0c13	d0 f6		               bne  nextbyte
.0c15	ad 5a 0c	               lda  s
.0c18	8d 31 0c	               sta  source+1
.0c1b	ad 5b 0c	               lda  s+1
.0c1e	8d 32 0c	               sta  source+2
.0c21	ad 5c 0c	               lda  d
.0c24	8d 2e 0c	               sta  destin+1
.0c27	ad 5d 0c	               lda  d+1
.0c2a	8d 2f 0c	               sta  destin+2
.0c2d	ad ff ff	destin         lda  $ffff
.0c30	8d ff ff	source         sta  $ffff
.0c33	ee 2e 0c	               inc  destin+1
.0c36	d0 03		               bne  src
.0c38	ee 2f 0c	               inc  destin+2
.0c3b	ee 31 0c	src            inc  source+1
.0c3e	d0 03		               bne  cnt
.0c40	ee 32 0c	               inc  source+2
.0c43	ad 5e 0c	cnt            lda  compte
.0c46	d0 08		               bne  decit
.0c48	ad 5f 0c	               lda  compte+1
.0c4b	f0 09		               beq  fini
.0c4d	ce 5f 0c	               dec  compte+1
.0c50	ce 5e 0c	decit          dec  compte
.0c53	4c 2d 0c	               jmp  destin
.0c56	20 a3 0b	fini           jsr  pop
.0c59	60		               rts
.0c5a			words
>0c5a	00 00		s         .word     $0000
>0c5c	00 00		d         .word     $0000
>0c5e	00 00		compte    .word     $0000
.0c60			decword
.0c60	20 64 0b	               jsr  push
.0c63	86 fd		               stx  zpage2
.0c65	84 fe		               sty  zpage2+1
.0c67	20 a3 0b	               jsr  pop
.0c6a	60		               rts
.0c6b			inczp1
.0c6b	08		               php
.0c6c	e6 fb		               inc  zpage1
.0c6e	d0 02		               bne  nopage
.0c70	e6 fc		               inc  zpage1+1
.0c72	28		nopage         plp
.0c73	60		               rts
.0c74			deczp1
.0c74	08		                php
.0c75	48		                pha
.0c76	c6 fb		                dec  zpage1
.0c78	d0 02		                bne  nopage
.0c7a	c6 fc		                dec  zpage1+1
.0c7c	c6 fb		nopage          dec  zpage1
.0c7e	68		                pla
.0c7f	28		                plp
.0c80	60		                rts
.0c81			inczp2
.0c81	08		               php
.0c82	48		               pha
.0c83	e6 fd		               inc  zpage2
.0c85	d0 02		               bne  nopage
.0c87	e6 fe		               inc  zpage2+1
.0c89	68		nopage         pla
.0c8a	28		               plp
.0c8b	60		               rts
.0c8c			deczp2
.0c8c	08		               php
.0c8d	48		               pha
.0c8e	a5 fd		               lda  zpage2
.0c90	d0 02		               bne  nopage
.0c92	c6 fe		               dec  zpage2+1
.0c94	c6 fd		nopage         dec  zpage2
.0c96	28		               plp
.0c97	60		               rts
.0c98			savezp1
.0c98	08		               php
.0c99	48		               pha
.0c9a	a5 fb		               lda  zpage1
.0c9c	8d 14 0d	               sta  zp1
.0c9f	a5 fc		               lda  zpage1+1
.0ca1	8d 15 0d	               sta  zp1+1
.0ca4	68		               pla
.0ca5	28		               plp
.0ca6	60		               rts
.0ca7			restzp1
.0ca7	08		               php
.0ca8	48		               pha
.0ca9	ad 14 0d	               lda zp1
.0cac	85 fb		               sta zpage1
.0cae	ad 15 0d	               lda zp1+1
.0cb1	85 fc		               sta zpage1+1
.0cb3	68		               pla
.0cb4	28		               plp
.0cb5	60		               rts
.0cb6			savezp2
.0cb6	08		         php
.0cb7	48		         pha
.0cb8	a5 fd		         lda zpage2
.0cba	8d 16 0d	         sta zp2
.0cbd	a5 fe		         lda zpage2+1
.0cbf	8d 17 0d	         sta zp2+1
.0cc2	68		         pla
.0cc3	28		         plp
.0cc4	60		         rts
.0cc5			restzp2
.0cc5	08		                php
.0cc6	48		                pha
.0cc7	ad 16 0d	                lda  zp2
.0cca	85 fd		                sta  zpage2
.0ccc	ad 17 0d	                lda  zp2+1
.0ccf	85 fe		                sta  zpage2+1
.0cd1	68		                pla
.0cd2	28		                plp
.0cd3	60		                rts
.0cd4			xy2addr
.0cd4	08		                php
.0cd5	48		                pha
.0cd6	8a		                txa
.0cd7	48		                pha
.0cd8	98		                tya
.0cd9	48		                pha
.0cda	ad 0f 0d	                lda     addr1+1
.0cdd	8d 11 0d	                sta     addr2+1
.0ce0	ad 0e 0d	                lda     addr1
.0ce3	8d 10 0d	                sta     addr2
.0ce6	c0 00		                cpy     #$00
.0ce8	f0 0f		                beq     addx
.0cea	18		moreline        clc
.0ceb	6d 0d 0d	                adc     ymult
.0cee	90 03		                bcc     norepy
.0cf0	ee 11 0d	                inc     addr2+1
.0cf3	8d 10 0d	norepy          sta     addr2
.0cf6	88		                dey
.0cf7	d0 f1		                bne     moreline
.0cf9	8a		addx            txa
.0cfa	18		                clc
.0cfb	6d 10 0d	                adc     addr2
.0cfe	90 03		                bcc     thatsit
.0d00	ee 11 0d	                inc     addr2+1
.0d03	8d 10 0d	thatsit         sta     addr2
.0d06	68		                pla
.0d07	a8		                tay
.0d08	68		                pla
.0d09	aa		                tax
.0d0a	68		                pla
.0d0b	28		                plp
.0d0c	60		                rts
>0d0d	28		ymult          .byte     40
>0d0e	00 00		addr1          .word     $0000
>0d10	00 00		addr2          .word     $0000
>0d12	00 00		bytecnt        .word     $0000
>0d14	00 00		zp1        .word   $0000
>0d16	00 00		zp2        .word   $0000

;******  Return to file: colour.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>0d18	01		a2hexcol       .byte     1              ; pour aputscxy
>0d19	00		a2hexbkcol     .byte     %00000000
.0d1a			a2hexpos
>0d1a	00		a2hexpx        .byte     0              ; pour aputsxy
>0d1b	00		a2hexpy        .byte     0
>0d1c	24		a2hexprefix    .byte     "$"            ; pour aputs
>0d1d	00 00		a2hexstr       .word     $00
>0d1f	00 00		               .word     $00
>0d21	00		               .byte     0              ; 0 end string
.0d22			putahexfmtxy
.0d22	20 64 0b	               jsr  push
.0d25	20 71 0d	               jsr  a2hex
.0d28	ae 1a 0d	               ldx  a2hexpx
.0d2b	ac 1b 0d	               ldy  a2hexpy
.0d2e	20 8d 0a	               jsr  gotoxy
.0d31	a2 1c		               ldx  #<a2hexprefix
.0d33	a0 0d		               ldy  #>a2hexprefix
.0d35	20 73 0a	               jsr  puts
.0d38	20 a3 0b	               jsr  pop
.0d3b	60		               rts
.0d3c			putahexfmt
.0d3c	20 64 0b	               jsr  push
.0d3f	20 71 0d	               jsr  a2hex
.0d42	a2 1c		               ldx  #<a2hexprefix
.0d44	a0 0d		               ldy  #>a2hexprefix
.0d46	20 73 0a	               jsr  puts
.0d49	20 a3 0b	               jsr  pop
.0d4c	60		               rts
.0d4d			putahex
.0d4d	20 64 0b	               jsr  push
.0d50	20 71 0d	               jsr  a2hex
.0d53	a2 1d		               ldx  #<a2hexstr
.0d55	a0 0d		               ldy  #>a2hexstr
.0d57	20 73 0a	               jsr  puts
.0d5a	20 a3 0b	               jsr  pop
.0d5d	60		               rts
.0d5e			nib2hex
.0d5e	08		               php
.0d5f	29 0f		               and  #$0f
.0d61	f8		               sed
.0d62	18		               clc
.0d63	69 90		               adc  #$90
.0d65	69 40		               adc  #$40
.0d67	d8		               cld
.0d68	28		               plp
.0d69	60		               rts
.0d6a			lsra4bits
.0d6a	08		               php
.0d6b	4a		               lsr
.0d6c	4a		               lsr
.0d6d	4a		               lsr
.0d6e	4a		               lsr
.0d6f	28		               plp
.0d70	60		               rts
.0d71			a2hex
.0d71	08		               php
.0d72	48		               pha
.0d73	48		               pha
.0d74	20 6a 0d	               jsr  lsra4bits
.0d77	20 5e 0d	               jsr  nib2hex
.0d7a	8d 1d 0d	               sta  a2hexstr
.0d7d	68		               pla
.0d7e	20 5e 0d	               jsr  nib2hex
.0d81	8d 1e 0d	               sta  a2hexstr+1
.0d84	a9 00		               lda  #$00                ; set end of string
.0d86	8d 1f 0d	               sta  a2hexstr+2
.0d89	68		               pla
.0d8a	28		               plp
.0d8b	60		               rts
.0d8c			xy2hex
.0d8c	20 64 0b	               jsr  push
.0d8f	20 71 0d	               jsr  a2hex
.0d92	8a		               txa
.0d93	48		               pha
.0d94	20 6a 0d	               jsr  lsra4bits
.0d97	20 5e 0d	               jsr  nib2hex
.0d9a	8d 1d 0d	               sta  a2hexstr
.0d9d	68		               pla
.0d9e	20 5e 0d	               jsr  nib2hex
.0da1	8d 1e 0d	               sta  a2hexstr+1
.0da4	98		               tya
.0da5	48		               pha
.0da6	20 6a 0d	               jsr  lsra4bits
.0da9	20 5e 0d	               jsr  nib2hex
.0dac	8d 1f 0d	               sta  a2hexstr+2
.0daf	68		               pla
.0db0	20 5e 0d	               jsr  nib2hex
.0db3	8d 20 0d	               sta  a2hexstr+3
.0db6	a9 00		               lda  #$00                ; 0 ended string
.0db8	8d 21 0d	               sta  a2hexstr+4
.0dbb	20 a3 0b	               jsr  pop
.0dbe			atobin
.0dbe	20 64 0b	               jsr     push
.0dc1	a2 08		               ldx     #8
.0dc3	a0 00		               ldy     #0
.0dc5	2a		nextbit        rol
.0dc6	48		               pha
.0dc7	69 00		               adc     #$00
.0dc9	29 01		               and     #$01
.0dcb	20 5e 0d	               jsr     nib2hex
.0dce	99 df 0d	               sta     abin,y
.0dd1	68		               pla
.0dd2	c8		               iny
.0dd3	ca		               dex
.0dd4	d0 ef		               bne     nextbit
.0dd6	a9 00		               lda     #0
.0dd8	99 df 0d	               sta     abin,y
.0ddb	20 a3 0b	               jsr     pull
.0dde	60		               rts
>0ddf	30 30 30 30	abin           .null   "00000000"
>0de3	30 30 30 30 00
.0de8			putabin
.0de8	20 be 0d	               jsr     atobin
.0deb	20 64 0b	               jsr     push
.0dee	a2 df		               ldx     #<abin
.0df0	a0 0d		               ldy     #>abin
.0df2	20 73 0a	               jsr     puts
.0df5	20 a3 0b	               jsr     pop
.0df8	60		               rts
.0df9			putabinfmt
.0df9	08		               php
.0dfa	48		               pha
.0dfb	a9 25		               lda     #"%"
.0dfd	20 6d 0a	               jsr     putch
.0e00	68		               pla
.0e01	20 e8 0d	               jsr     putabin
.0e04	28		               plp
.0e05	60		               rts
.0e06			putabinxy
.0e06	20 8d 0a	               jsr     gotoxy
.0e09	20 e8 0d	               jsr     putabin
.0e0c	60		               rts
.0e0d			putabinfmtxy
.0e0d	20 8d 0a	               jsr     gotoxy
.0e10	20 f9 0d	               jsr     putabinfmt
.0e13	60		               rts

;******  Return to file: colour.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

.0e14			waitstop
.0e14	20 64 0b	                jsr     push
.0e17	20 ed f6	wait            jsr     k_stop
.0e1a	d0 fb		                bne     wait
.0e1c	20 a3 0b	                jsr     pop
.0e1f	60		                rts
.0e20			anykey
.0e20	08		                php
.0e21	48		                pha
.0e22	a5 cb		nokey           lda 203
.0e24	c9 40		                cmp #64
.0e26	f0 fa		                beq nokey
.0e28	68		                pla
.0e29	28		                plp
.0e2a	60		                rts
.0e2b			getkey
.0e2b	20 64 0b	                jsr     push
.0e2e	20 cf ff	again           jsr     chrin
.0e31	4c 2e 0e	                jmp     again
.0e34	20 a3 0b	                jsr     pop
.0e37	60		                rts
.0e38			waitkey
.0e38	20 64 0b	                jsr     push
.0e3b	8d 50 0e	                sta     thekey
.0e3e	20 e4 ff	nope            jsr     getin
.0e41	20 d2 ff	                jsr     chrout
.0e44	cd 50 0e	                cmp     thekey
.0e47	d0 f5		                bne     nope
.0e49	20 d2 ff	                jsr     chrout
.0e4c	20 a3 0b	                jsr     pop
.0e4f	60		                rts
>0e50	00		thekey          .byte   0
.0e51			waitspace
.0e51	20 64 0b	                jsr     push
.0e54	a9 7f		wait            lda     #$7f  ;%01111111
.0e56	8d 00 dc	                sta     $dc00
.0e59	ad 01 dc	                lda     $dc01
.0e5c	29 10		                and     #$10  ;mask %00010000
.0e5e	d0 f4		                bne     wait
.0e60	20 a3 0b	                jsr     pop
.0e63			waitsstop
.0e63	20 64 0b	                jsr     push
.0e66	20 ed f6	wait            jsr     k_stop  ;%01111111
.0e69	d0 fb		                bne     wait
.0e6b	20 a3 0b	                jsr     pop
.0e6e			waitreturn
.0e6e	20 64 0b	                jsr     push
.0e71	ad 8d 0e	                lda     thecount
.0e74	8d 00 04	                sta     scrnram
.0e77	a9 02		                lda     #$02
.0e79	8d 00 d8	                sta     colorram
.0e7c	20 e4 ff	nope            jsr     getin
.0e7f	20 d2 ff	                jsr     chrout
.0e82	c9 0d		                cmp     #$0d
.0e84	d0 f6		                bne     nope
.0e86	ee 8d 0e	                inc     thecount
.0e89	20 a3 0b	                jsr     pop
.0e8c	60		                rts
>0e8d	01		thecount        .byte   $01

;******  Return to file: colour.asm


;******  End of listing

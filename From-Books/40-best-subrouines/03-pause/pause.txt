
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L pause.txt -o pause.prg pause.asm
; Sat Mar 25 15:30:46 2023

;Offset	;Hex		;Source

;******  Processing input file: pause.asm

="20230320-180800-a"	Version = "20230320-180800-a"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: pause.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: pause.asm

.080d			main
.080d	20 00 c0	                jsr scrmaninit
.0810	20 14 08	                jsr help
.0813	60		                rts
.0814			help
.0814	20 21 c0	                jsr cls
.0817	a2 2d		                ldx  #<header
.0819	a0 08		                ldy  #>header
.081b	20 36 c0	                jsr  puts
.081e	a2 14		                ldx  #<shortcuts
.0820	a0 09		                ldy  #>shortcuts
.0822	20 36 c0	                jsr  puts
.0825	a2 91		                ldx  #<helptext
.0827	a0 09		                ldy  #>helptext
.0829	20 36 c0	                jsr  puts
.082c	60		                rts
.082d			header
>082d	20 20 20 20	                .text          "     40 BEST MACHINE CODE ROUTINES"
>0831	20 34 30 20 c2 c5 d3 d4 20 cd c1 c3 c8 c9 ce c5
>0841	20 c3 cf c4 c5 20 d2 cf d5 d4 c9 ce c5 d3
>084f	0d		                .byte   $0d
>0850	20 20 20 20	                .text          "          FOR THE COMMODORE 64"
>0854	20 20 20 20 20 20 c6 cf d2 20 d4 c8 c5 20 c3 cf
>0864	cd cd cf c4 cf d2 c5 20 36 34
>086e	0d		                .byte   $0d
>086f	20 20 20 20	                .text          "       Book by Mark Greenshields."
>0873	20 20 20 c2 4f 4f 4b 20 42 59 20 cd 41 52 4b 20
>0883	c7 52 45 45 4e 53 48 49 45 4c 44 53 2e
>0890	0d 0d		                .byte   $0d,$0d
>0892	20 20 20 20	                .text          "              PAUSE (p24)"
>0896	20 20 20 20 20 20 20 20 20 20 d0 c1 d5 d3 c5 20
>08a6	28 50 32 34 29
>08ab	0d		                .byte   $0d
>08ac	20 20 20 20	                .text          "        (c)1979 Brad Templeton"
>08b0	20 20 20 20 28 43 29 31 39 37 39 20 c2 52 41 44
>08c0	20 d4 45 4d 50 4c 45 54 4f 4e
>08ca	0d 0d		                .byte   $0d,$0d
>08cc	20 20 20 20	                .text          "     Programmed by Daniel Lafrance."
>08d0	20 d0 52 4f 47 52 41 4d 4d 45 44 20 42 59 20 c4
>08e0	41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e
>08ef	0d		                .byte   $0d
>08f0	20 20 20 20	                .text   format("       Version: %s.",Version)
>08f4	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 33
>0904	30 33 32 30 2d 31 38 30 38 30 30 2d 41 2e
>0912	0d 00		                .byte   $0d,0
>0914	0d		shortcuts       .byte   $0d
>0915	20 2d 2d 2d	                .text          " -------- S H O R T - C U T S ---------"
>0919	2d 2d 2d 2d 2d 20 d3 20 c8 20 cf 20 d2 20 d4 20
>0929	2d 20 c3 20 d5 20 d4 20 d3 20 2d 2d 2d 2d 2d 2d
>0939	2d 2d 2d
>093c	0d		                .byte   $0d
>093d	20 52 55 4e	                .text   format(" run=SYS%5d, help=SYS%5d",main, help)
>0941	3d d3 d9 d3 20 32 30 36 31 2c 20 48 45 4c 50 3d
>0951	d3 d9 d3 20 32 30 36 38
>0959	0d		                .byte   $0d
>095a	20 43 4c 53	                .text   format(" cls=SYS%5d",cls)
>095e	3d d3 d9 d3 34 39 31 38 35
>0967	0d		                .byte   $0d
>0968	20 2d 2d 2d	                .text          " --------------------------------------"
>096c	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>097c	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>098c	2d 2d 2d
>098f	0d		                .byte   $0d
>0990	00		                .byte   0
>0991	0d		helptext        .byte   $0d
>0992	20 20 d0 c1	                .text   format("  PAUSE  : SYS%5d",pause)
>0996	d5 d3 c5 20 20 3a 20 d3 d9 d3 20 20 39 36 30
>09a5	00		                .byte   0
.03c0			pause
.03c0	a9 cb		                lda #<princ
.03c2	8d 26 03	                sta ibsout
.03c5	a9 03		                lda #>princ
.03c7	8d 27 03	                sta ibsout+1
.03ca	60		                rts
.03cb	48		princ           pha
.03cc	8a		                txa
.03cd	48		                pha
.03ce	98		                tya
.03cf	48		                pha
.03d0	ad 8d 02	loop            lda shflag
.03d3	c9 01		                cmp #1
.03d5	f0 f9		                beq loop
.03d7	68		                pla
.03d8	a8		                tay
.03d9	68		                pla
.03da	aa		                tax
.03db	68		                pla
.03dc	4c ca f1	                jmp kd_chrout

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$90			kiostatus       =       $90       ; Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7       ; Current filename length (byte)
=$b9			cursecadd       =       $b9       ; Current secondary address (byte)
=$ba			curdevno        =       $ba       ; Current device number (byte)
=$bb			curfptr         =       $bb       ; Current file pointer (word)
=$fb			zpage1          =       $fb       ; zero page 1 address (word)
=$fd			zpage2          =       $fd       ; zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$0286			bascol          =       $0286     ;basic next chr colscreenram (byte)
=$0400			scrnram         =       $0400     ;video character ram
=$0400			scrram0         =       $0400
=$0500			scrram1         =       $0500
=$0600			scrram2         =       $0600
=$0700			scrram3         =       $0700
=$0801			basicsta        =       $0801     ;basic start address
=$a000			basicrom        =       $a000
=$d400			sid             =       $d400     ;sid base address
=$d800			colorram        =       $d800     ;video color ram
=$d800			colram0         =       $d800
=$d900			colram1         =       $d900
=$da00			colram2         =       $da00
=$db00			colram3         =       $db00
=$dc00			cia1            =       $dc00     ;cia1  base address
=$dd00			cia2            =       $dd00     ;cia2 base address
=$e000			kernalrom       =       $e000
=43			txttab          =       43
=$14			linnum          =       $14
=$c6			ndx             =       $c6     ;Number of character in keyboard buffer
=$033c			tpbuff          =       $033c   ;$033c-$03fb (828-1019)
=$277			kbbuff          =       $277
=$28d			shflag          =       $28d    ;653
=828			tbuffer         =       828
=806			ibsout          =       806
=$ea31			irq             =       $ea31
=$314			cinv            =       $314        ; brk instruction interupt
=$c5			lstx            =       $c5         ;matrix coordinate of last key pressed
=$03			bstop           =       $03      ;stop
=$05			bwhite          =       $05      ;set color white
=$08			block           =       $08      ;lock the charset
=$09			bunlock         =       $09      ;unlock the charset
=$0d			bcarret         =       $0d
=$0e			btext           =       $0e
=$11			bcrsdn          =       $11      ;cursor down 1 line
=$12			brevcol         =       $12
=$13			bhome           =       $13
=$14			bdelete         =       $14
=$1c			bred            =       $1c
=$1d			bcuright        =       $1d
=$1e			bgreen          =       $1e
=$1f			bblue           =       $1f
=$81			borange         =       $81
=$83			blrun           =       $83
=$85			bfkey1          =       $85
=$86			bfkey2          =       $86
=$87			bfkey3          =       $87
=$88			bfkey4          =       $88
=$89			bfkey5          =       $89
=$8a			bfkey6          =       $8a
=$8b			bfkey7          =       $8b
=$8c			bfkey8          =       $8c
=$8d			bcarret1        =       $8d
=$8e			bgraph          =       $8e
=$90			bblack          =       $90
=$91			bcuup           =       $91
=$92			brevoff         =       $92
=$93			bclear          =       $93
=$94			binsert         =       $94
=$95			bbrown          =       $95
=$96			bltred          =       $96
=$97			bdkgrey         =       $97
=$98			bmdgrey         =       $98
=$99			bltgreen        =       $99
=$9a			bltblue         =       $9a
=$9b			bltgrey         =       $9b
=$9c			bmagenta        =       $9c
=$9d			bculeft         =       $9d
=$9e			byellow         =       $9e
=$9f			bcyan           =       $9f
=$0286			carcol          =       $0286
=$030a			ieval           =       $030a
=$73			chrget          =       $73
=$79			chrgot          =       $79
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.c000			libtart

;******  Return to file: pause.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col= vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: pause.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=$a3bb			b_opentxtspc  = $a3bb ;  1) Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ;  2) Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ;  3) ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ;  4) Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ;  5) Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ;  6) Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ;  7) Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ;  8) Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ;  9) Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; 10) Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; 11) Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; 12) Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; 13) Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; 14) Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; 15) Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; 17) Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; 18) Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; 19) Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; 20) Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; 21) Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; 22) Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; 23) Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; 24) Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; 25) Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; 26) Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; 27) Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; 28) check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; 29) check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; 30) send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; 31) find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; 32) Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; 33) Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; 34) Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; 35) Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; 36) Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; 37) Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; 38) Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; 39) Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; 40) Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; 41) Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; 42) Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; 43) Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; 44) Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; 45) Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; 46) Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; 47) Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; 48) Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; 49) Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; 50) Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: pause.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.c000			scrmaninit
.c000	20 27 c1	               jsr  push
.c003	a9 06		               lda  #vbleu
.c005	8d 21 d0	               sta  vicbackcol
.c008	a9 05		               lda  #vvert
.c00a	8d 20 d0	               sta  vicbordcol
.c00d	a9 01		               lda  #vblanc
.c00f	8d 86 02	               sta  bascol
.c012	ad 00 04	               lda  scrnram
.c015	29 fd		               and  #%11111101
.c017	8d 00 04	               sta  scrnram
.c01a	20 21 c0	               jsr  cls
.c01d	20 66 c1	               jsr  pop
.c020	60		               rts
.c021			cls
.c021	08		               php
.c022	48		               pha
.c023	a9 93		               lda  #$93
.c025	20 30 c0	               jsr  putch
.c028	a9 0e		               lda  #$0e
.c02a	20 30 c0	               jsr  putch
.c02d	68		               pla
.c02e	28		               plp
.c02f	60		               rts
.c030			putch
.c030	08		               php
.c031	20 d2 ff	               jsr  $ffd2
.c034	28		               plp
.c035	60		               rts
.c036			puts
.c036	20 27 c1	               jsr  push
.c039	86 fb		               stx  zpage1
.c03b	84 fc		               sty  zpage1+1
.c03d	a0 00		               ldy  #0
.c03f	b1 fb		next           lda  (zpage1),y
.c041	f0 09		               beq  exit
.c043	20 30 c0	               jsr  putch
.c046	20 2e c2	               jsr  inczp1
.c049	4c 3f c0	               jmp  next
.c04c	20 66 c1	exit           jsr  pop
.c04f	60		               rts
.c050			gotoxy
.c050	08		               php
.c051	18		               clc
.c052	8a		               txa
.c053	48		               pha
.c054	98		               tya
.c055	aa		               tax
.c056	68		               pla
.c057	a8		               tay
.c058	20 f0 ff	               jsr  kplot
.c05b	28		               plp
.c05c	60		               rts
.c05d			cursor
=$0286			bascol    =    $0286
.c05d	08		               php
.c05e	48		               pha
.c05f	90 12		               bcc  restore
.c061	20 f0 ff	               jsr  kplot
.c064	8c 85 c0	               sty  cx
.c067	8e 86 c0	               stx  cy
.c06a	ad 86 02	               lda  bascol
.c06d	8d 87 c0	               sta  bcol
.c070	4c 82 c0	               jmp  out
.c073	ae 86 c0	restore        ldx  cy
.c076	ac 85 c0	               ldy  cx
.c079	20 f0 ff	               jsr  kplot
.c07c	ad 87 c0	               lda  bcol
.c07f	8d 86 02	               sta  bascol
.c082	68		out            pla
.c083	28		               plp
.c084	60		               rts
>c085	00		cx   .byte     $00
>c086	00		cy   .byte     $00
>c087	00		bcol .byte     $00
.c088			cursave
.c088	08		               php
.c089	38		               sec
.c08a	20 5d c0	               jsr  cursor
.c08d	28		               plp
.c08e	60		               rts
.c08f			curput
.c08f	08		               php
.c090	18		               clc
.c091	20 5d c0	               jsr  cursor
.c094	28		               plp
.c095	60		               rts
.c096			putsxy
.c096	20 27 c1	               jsr  push
.c099	86 fb		               stx  zpage1
.c09b	84 fc		               sty  zpage1+1
.c09d	a0 00		               ldy  #$00
.c09f	b1 fb		               lda  (zpage1),y
.c0a1	aa		               tax
.c0a2	20 2e c2	               jsr  inczp1
.c0a5	b1 fb		               lda  (zpage1),y
.c0a7	a8		               tay
.c0a8	20 50 c0	               jsr  gotoxy
.c0ab	20 2e c2	               jsr  inczp1
.c0ae	a6 fb		               ldx  zpage1
.c0b0	a4 fc		               ldy  zpage1+1
.c0b2	20 36 c0	               jsr  puts
.c0b5	20 66 c1	               jsr  pop
.c0b8	60		               rts
>c0b9	00 00		straddr   .word     $00
>c0bb	00		px        .byte     $00
>c0bc	00		py        .byte     $00
>c0bd	00 00		zp1       .word     $00
.c0bf			putscxy
.c0bf	20 27 c1	               jsr  push
.c0c2	84 fc		               sty  zpage1+1
.c0c4	86 fb		               stx  zpage1
.c0c6	ad 86 02	               lda  bascol
.c0c9	8d e9 c0	               sta  bc
.c0cc	a0 00		               ldy #$00
.c0ce	b1 fb		               lda  (zpage1),y
.c0d0	8d 86 02	               sta  bascol
.c0d3	20 2e c2	               jsr  inczp1
.c0d6	a6 fb		               ldx  zpage1
.c0d8	a4 fc		               ldy  zpage1+1
.c0da	20 96 c0	               jsr  putsxy
.c0dd	ad e9 c0	               lda  bc
.c0e0	8d 86 02	               sta  bascol
.c0e3	20 66 c1	               jsr  pop
.c0e6	60		               rts
>c0e7	00 00		straddr  .word      $00
>c0e9	00		bc       .byte      $00
>c0ea	00 00		zp1      .word      $00
.c0ec			putrahex
.c0ec	08		               php
.c0ed	48		               pha
.c0ee	20 34 c3	               jsr  a2hex
.c0f1	a9 e0		               lda  #<a2hexstr
.c0f3	a0 c2		               ldy  #>a2hexstr
.c0f5	20 36 c0	               jsr  puts
.c0f8	68		               pla
.c0f9	28		               plp
.c0fa	60		               rts
.c0fb			kputrahexxy
.c0fb			bputrahexxy
.c0fb			putrahexxy
.c0fb	08		               php
.c0fc	20 34 c3	               jsr  a2hex
.c0ff	a9 dd		               lda  #<a2hexpos
.c101	a0 c2		               ldy  #>a2hexpos
.c103	20 96 c0	               jsr  putsxy
.c106	68		               pla
.c107	28		               plp
.c108	60		               rts
.c109			putrahexcxy
.c109	08		               php
.c10a	20 34 c3	               jsr  a2hex
.c10d	a9 dd		               lda  #<a2hexpos
.c10f	a0 c2		               ldy  #>a2hexpos
.c111	20 bf c0	               jsr  putscxy
.c114	68		               pla
.c115	28		               plp
.c116	60		               rts
.c117			setinverse
.c117	48		               pha
.c118	a9 12		               lda  #$12
.c11a	20 d2 ff	               jsr  $ffd2
.c11d	68		               pla
.c11e	60		               rts
.c11f			clrinverse
.c11f	48		               pha
.c120	a9 92		               lda  #$92
.c122	20 d2 ff	               jsr  $ffd2
.c125	68		               pla
.c126	60		               rts

;******  Return to file: pause.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.c127			push
.c127	08		          php            ; stack : flg, pcl, pch
.c128	78		          sei
.c129	8d 63 c1	          sta  ra        ; save a
.c12c	68		          pla            ; stack : pcl, pch
.c12d	8d 62 c1	          sta  rp        ; save rp
.c130	68		          pla            ; stack : pch
.c131	8d 64 c1	          sta  pc        ; save pcl
.c134	68		          pla            ; stack : -
.c135	8d 65 c1	          sta  pc+1      ; save pch
.c138	a5 fb		          lda  zpage1    ; get zpage1 low byte
.c13a	48		          pha            ; stack : zp1l
.c13b	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.c13d	48		          pha            ; stack : zp1h, zp1l
.c13e	a5 fd		          lda  zpage2    ; get zpage2 low byte
.c140	48		          pha            ; stack : zp2l, zp1h, zp1l
.c141	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.c143	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.c144	ad 62 c1	          lda  rp        ; get rp
.c147	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c148	ad 63 c1	          lda  ra        ; get a
.c14b	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c14c	8a		          txa            ; get x
.c14d	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c14e	98		          tya            ; get y
.c14f	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c150	ad 65 c1	          lda  pc+1      ; get pch
.c153	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c154	ad 64 c1	          lda  pc        ; get pcl
.c157	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c158	ad 62 c1	          lda  rp        ; get rp
.c15b	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c15c	ad 63 c1	          lda  ra        ; get a
.c15f	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c160	58		          cli
.c161	60		          rts
>c162	00		rp        .byte     0
>c163	00		ra        .byte     0
>c164	00 00		pc        .word     0
.c166			pull
.c166			pop
.c166	78		          sei
.c167	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c168	8d 9b c1	          sta  pc        ; save pcl
.c16b	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c16c	8d 9c c1	          sta  pc+1      ; save pch
.c16f	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c170	a8		          tay            ; set y
.c171	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c172	aa		          tax            ; set x
.c173	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c174	8d 9a c1	          sta  ra        ; save a
.c177	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c178	8d 99 c1	          sta  rp        ; save rp
.c17b	68		          pla            ; stack : zp2l, zp1h, zp1l
.c17c	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.c17e	68		          pla            ; stack : zp1h, zp1l
.c17f	85 fd		          sta  zpage2    ; get zpage2 High byte
.c181	68		          pla            ; stack : zp1l
.c182	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.c184	68		          pla            ; stack :
.c185	85 fb		          sta  zpage1    ; get zpage1 High byte
.c187	ad 9c c1	          lda  pc+1      ; get pch
.c18a	48		          pha            ; stack : pch
.c18b	ad 9b c1	          lda  pc
.c18e	48		          pha            ; stack : pcl, pch
.c18f	ad 99 c1	          lda  rp        ; get rp
.c192	48		          pha            ; stack : rp, pcl, pch
.c193	ad 9a c1	          lda  ra        ; set ra
.c196	58		          cli
.c197	28		          plp            ; stack : pcl, pch
.c198	60		          rts
>c199	00		rp        .byte     0
>c19a	00		ra        .byte     0
>c19b	00 00		pc        .word     0

;******  Return to file: pause.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.c19d			blkfill
.c19d	20 27 c1	bf0            jsr  push
.c1a0	20 5b c2	               jsr  savezp1
.c1a3	84 fc		               sty  zpage1+1
.c1a5	a0 00		               ldy  #$00
.c1a7	84 fb		               sty  zpage1
.c1a9	91 fb		bf1            sta  (zpage1),y
.c1ab	c8		               iny
.c1ac	d0 fb		               bne  bf1
.c1ae	20 6a c2	               jsr  restzp1
.c1b1	20 66 c1	               jsr  pop
.c1b4	60		               rts
.c1b5			memfill
.c1b5	20 27 c1	               jsr  push
.c1b8	20 9d c1	mf1            jsr  blkfill
.c1bb	c8		               iny
.c1bc	ca		               dex
.c1bd	d0 f9		               bne  mf1
.c1bf	20 66 c1	               jsr  pop
.c1c2	60		               rts
.c1c3			memmove
.c1c3	20 27 c1	               jsr  push
.c1c6	ba		               tsx            ; On se crée un pointeur ...
.c1c7	8a		               txa
.c1c8	18		               clc
.c1c9	69 0b		               adc  #11
.c1cb	a8		               tay
.c1cc	a2 06		               ldx  #$06
.c1ce	b9 00 01	nextbyte       lda  $0100,y
.c1d1	99 1d c2	               sta  words,y
.c1d4	c8		               iny
.c1d5	ca		               dex
.c1d6	d0 f6		               bne  nextbyte
.c1d8	ad 1d c2	               lda  s
.c1db	8d f4 c1	               sta  source+1
.c1de	ad 1e c2	               lda  s+1
.c1e1	8d f5 c1	               sta  source+2
.c1e4	ad 1f c2	               lda  d
.c1e7	8d f1 c1	               sta  destin+1
.c1ea	ad 20 c2	               lda  d+1
.c1ed	8d f2 c1	               sta  destin+2
.c1f0	ad ff ff	destin         lda  $ffff
.c1f3	8d ff ff	source         sta  $ffff
.c1f6	ee f1 c1	               inc  destin+1
.c1f9	d0 03		               bne  src
.c1fb	ee f2 c1	               inc  destin+2
.c1fe	ee f4 c1	src            inc  source+1
.c201	d0 03		               bne  cnt
.c203	ee f5 c1	               inc  source+2
.c206	ad 21 c2	cnt            lda  compte
.c209	d0 08		               bne  decit
.c20b	ad 22 c2	               lda  compte+1
.c20e	f0 09		               beq  fini
.c210	ce 22 c2	               dec  compte+1
.c213	ce 21 c2	decit          dec  compte
.c216	4c f0 c1	               jmp  destin
.c219	20 66 c1	fini           jsr  pop
.c21c	60		               rts
.c21d			words
>c21d	00 00		s         .word     $0000
>c21f	00 00		d         .word     $0000
>c221	00 00		compte    .word     $0000
.c223			decword
.c223	20 27 c1	               jsr  push
.c226	86 fd		               stx  zpage2
.c228	84 fe		               sty  zpage2+1
.c22a	20 66 c1	               jsr  pop
.c22d	60		               rts
.c22e			inczp1
.c22e	08		               php
.c22f	e6 fb		               inc  zpage1
.c231	d0 02		               bne  nopage
.c233	e6 fc		               inc  zpage1+1
.c235	28		nopage         plp
.c236	60		               rts
.c237			deczp1
.c237	08		                php
.c238	48		                pha
.c239	c6 fb		                dec  zpage1
.c23b	d0 02		                bne  nopage
.c23d	c6 fc		                dec  zpage1+1
.c23f	c6 fb		nopage          dec  zpage1
.c241	68		                pla
.c242	28		                plp
.c243	60		                rts
.c244			inczp2
.c244	08		               php
.c245	48		               pha
.c246	e6 fd		               inc  zpage2
.c248	d0 02		               bne  nopage
.c24a	e6 fe		               inc  zpage2+1
.c24c	68		nopage         pla
.c24d	28		               plp
.c24e	60		               rts
.c24f			deczp2
.c24f	08		               php
.c250	48		               pha
.c251	a5 fd		               lda  zpage2
.c253	d0 02		               bne  nopage
.c255	c6 fe		               dec  zpage2+1
.c257	c6 fd		nopage         dec  zpage2
.c259	28		               plp
.c25a	60		               rts
.c25b			savezp1
.c25b	08		               php
.c25c	48		               pha
.c25d	a5 fb		               lda  zpage1
.c25f	8d d7 c2	               sta  zp1
.c262	a5 fc		               lda  zpage1+1
.c264	8d d8 c2	               sta  zp1+1
.c267	68		               pla
.c268	28		               plp
.c269	60		               rts
.c26a			restzp1
.c26a	08		               php
.c26b	48		               pha
.c26c	ad d7 c2	               lda zp1
.c26f	85 fb		               sta zpage1
.c271	ad d8 c2	               lda zp1+1
.c274	85 fc		               sta zpage1+1
.c276	68		               pla
.c277	28		               plp
.c278	60		               rts
.c279			savezp2
.c279	08		         php
.c27a	48		         pha
.c27b	a5 fd		         lda zpage2
.c27d	8d d9 c2	         sta zp2
.c280	a5 fe		         lda zpage2+1
.c282	8d da c2	         sta zp2+1
.c285	68		         pla
.c286	28		         plp
.c287	60		         rts
.c288			restzp2
.c288	08		                php
.c289	48		                pha
.c28a	ad d9 c2	                lda  zp2
.c28d	85 fd		                sta  zpage2
.c28f	ad da c2	                lda  zp2+1
.c292	85 fe		                sta  zpage2+1
.c294	68		                pla
.c295	28		                plp
.c296	60		                rts
.c297			xy2addr
.c297	08		                php
.c298	48		                pha
.c299	8a		                txa
.c29a	48		                pha
.c29b	98		                tya
.c29c	48		                pha
.c29d	ad d2 c2	                lda     addr1+1
.c2a0	8d d4 c2	                sta     addr2+1
.c2a3	ad d1 c2	                lda     addr1
.c2a6	8d d3 c2	                sta     addr2
.c2a9	c0 00		                cpy     #$00
.c2ab	f0 0f		                beq     addx
.c2ad	18		moreline        clc
.c2ae	6d d0 c2	                adc     ymult
.c2b1	90 03		                bcc     norepy
.c2b3	ee d4 c2	                inc     addr2+1
.c2b6	8d d3 c2	norepy          sta     addr2
.c2b9	88		                dey
.c2ba	d0 f1		                bne     moreline
.c2bc	8a		addx            txa
.c2bd	18		                clc
.c2be	6d d3 c2	                adc     addr2
.c2c1	90 03		                bcc     thatsit
.c2c3	ee d4 c2	                inc     addr2+1
.c2c6	8d d3 c2	thatsit         sta     addr2
.c2c9	68		                pla
.c2ca	a8		                tay
.c2cb	68		                pla
.c2cc	aa		                tax
.c2cd	68		                pla
.c2ce	28		                plp
.c2cf	60		                rts
>c2d0	28		ymult          .byte     40
>c2d1	00 00		addr1          .word     $0000
>c2d3	00 00		addr2          .word     $0000
>c2d5	00 00		bytecnt        .word     $0000
>c2d7	00 00		zp1        .word   $0000
>c2d9	00 00		zp2        .word   $0000

;******  Return to file: pause.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>c2db	01		a2hexcol       .byte     1              ; pour aputscxy
>c2dc	00		a2hexbkcol     .byte     %00000000
.c2dd			a2hexpos
>c2dd	00		a2hexpx        .byte     0              ; pour aputsxy
>c2de	00		a2hexpy        .byte     0
>c2df	24		a2hexprefix    .byte     "$"            ; pour aputs
>c2e0	00 00		a2hexstr       .word     $00
>c2e2	00 00		               .word     $00
>c2e4	00		               .byte     0              ; 0 end string
.c2e5			putahexfmtxy
.c2e5	20 27 c1	               jsr  push
.c2e8	20 34 c3	               jsr  a2hex
.c2eb	ae dd c2	               ldx  a2hexpx
.c2ee	ac de c2	               ldy  a2hexpy
.c2f1	20 50 c0	               jsr  gotoxy
.c2f4	a2 df		               ldx  #<a2hexprefix
.c2f6	a0 c2		               ldy  #>a2hexprefix
.c2f8	20 36 c0	               jsr  puts
.c2fb	20 66 c1	               jsr  pop
.c2fe	60		               rts
.c2ff			putahexfmt
.c2ff	20 27 c1	               jsr  push
.c302	20 34 c3	               jsr  a2hex
.c305	a2 df		               ldx  #<a2hexprefix
.c307	a0 c2		               ldy  #>a2hexprefix
.c309	20 36 c0	               jsr  puts
.c30c	20 66 c1	               jsr  pop
.c30f	60		               rts
.c310			putahex
.c310	20 27 c1	               jsr  push
.c313	20 34 c3	               jsr  a2hex
.c316	a2 e0		               ldx  #<a2hexstr
.c318	a0 c2		               ldy  #>a2hexstr
.c31a	20 36 c0	               jsr  puts
.c31d	20 66 c1	               jsr  pop
.c320	60		               rts
.c321			nib2hex
.c321	08		               php
.c322	29 0f		               and  #$0f
.c324	f8		               sed
.c325	18		               clc
.c326	69 90		               adc  #$90
.c328	69 40		               adc  #$40
.c32a	d8		               cld
.c32b	28		               plp
.c32c	60		               rts
.c32d			lsra4bits
.c32d	08		               php
.c32e	4a		               lsr
.c32f	4a		               lsr
.c330	4a		               lsr
.c331	4a		               lsr
.c332	28		               plp
.c333	60		               rts
.c334			a2hex
.c334	08		               php
.c335	48		               pha
.c336	48		               pha
.c337	20 2d c3	               jsr  lsra4bits
.c33a	20 21 c3	               jsr  nib2hex
.c33d	8d e0 c2	               sta  a2hexstr
.c340	68		               pla
.c341	20 21 c3	               jsr  nib2hex
.c344	8d e1 c2	               sta  a2hexstr+1
.c347	a9 00		               lda  #$00                ; set end of string
.c349	8d e2 c2	               sta  a2hexstr+2
.c34c	68		               pla
.c34d	28		               plp
.c34e	60		               rts
.c34f			xy2hex
.c34f	20 27 c1	               jsr  push
.c352	20 34 c3	               jsr  a2hex
.c355	8a		               txa
.c356	48		               pha
.c357	20 2d c3	               jsr  lsra4bits
.c35a	20 21 c3	               jsr  nib2hex
.c35d	8d e0 c2	               sta  a2hexstr
.c360	68		               pla
.c361	20 21 c3	               jsr  nib2hex
.c364	8d e1 c2	               sta  a2hexstr+1
.c367	98		               tya
.c368	48		               pha
.c369	20 2d c3	               jsr  lsra4bits
.c36c	20 21 c3	               jsr  nib2hex
.c36f	8d e2 c2	               sta  a2hexstr+2
.c372	68		               pla
.c373	20 21 c3	               jsr  nib2hex
.c376	8d e3 c2	               sta  a2hexstr+3
.c379	a9 00		               lda  #$00                ; 0 ended string
.c37b	8d e4 c2	               sta  a2hexstr+4
.c37e	20 66 c1	               jsr  pop
.c381			atobin
.c381	20 27 c1	               jsr     push
.c384	a2 08		               ldx     #8
.c386	a0 00		               ldy     #0
.c388	2a		nextbit        rol
.c389	48		               pha
.c38a	69 00		               adc     #$00
.c38c	29 01		               and     #$01
.c38e	20 21 c3	               jsr     nib2hex
.c391	99 a2 c3	               sta     abin,y
.c394	68		               pla
.c395	c8		               iny
.c396	ca		               dex
.c397	d0 ef		               bne     nextbit
.c399	a9 00		               lda     #0
.c39b	99 a2 c3	               sta     abin,y
.c39e	20 66 c1	               jsr     pull
.c3a1	60		               rts
>c3a2	30 30 30 30	abin           .null   "00000000"
>c3a6	30 30 30 30 00
.c3ab			putabin
.c3ab	20 81 c3	               jsr     atobin
.c3ae	20 27 c1	               jsr     push
.c3b1	a2 a2		               ldx     #<abin
.c3b3	a0 c3		               ldy     #>abin
.c3b5	20 36 c0	               jsr     puts
.c3b8	20 66 c1	               jsr     pop
.c3bb	60		               rts
.c3bc			putabinfmt
.c3bc	08		               php
.c3bd	48		               pha
.c3be	a9 25		               lda     #"%"
.c3c0	20 30 c0	               jsr     putch
.c3c3	68		               pla
.c3c4	20 ab c3	               jsr     putabin
.c3c7	28		               plp
.c3c8	60		               rts
.c3c9			putabinxy
.c3c9	20 50 c0	               jsr     gotoxy
.c3cc	20 ab c3	               jsr     putabin
.c3cf	60		               rts
.c3d0			putabinfmtxy
.c3d0	20 50 c0	               jsr     gotoxy
.c3d3	20 bc c3	               jsr     putabinfmt
.c3d6	60		               rts

;******  Return to file: pause.asm


;******  End of listing

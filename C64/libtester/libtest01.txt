
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L libtest01.txt -o libtest01.prg libtest01.asm
; Tue Apr  8 19:44:49 2025

;Offset	;Hex		;Source

;******  Processing input file: libtest01.asm

="20250405-231555"	                Version = "20250405-231555"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c cd 09	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: libtest01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: libtest01.asm


;******  Processing file: strings_fr.asm

.0854			headera
>0854	20 20 20 20	               .text          "     Commodore 64 test de librarie "
>0858	20 c3 4f 4d 4d 4f 44 4f 52 45 20 36 34 20 54 45
>0868	53 54 20 44 45 20 4c 49 42 52 41 52 49 45 20
>0877	0d 00		               .byte     $0d,0
>0879	20 20 20 20	headerb        .text          "               libtest01 "
>087d	20 20 20 20 20 20 20 20 20 20 20 4c 49 42 54 45
>088d	53 54 30 31 20
>0892	0d		               .byte     $0d
>0893	20 20 20 20	               .text          "       (c) 2025 Daniel Lafrance"
>0897	20 20 20 28 43 29 20 32 30 32 35 20 c4 41 4e 49
>08a7	45 4c 20 cc 41 46 52 41 4e 43 45
>08b2	0d		               .byte     $0d
>08b3	20 20 20 20	               .text   format("       Version: %s",Version)
>08b7	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 35
>08c7	30 34 30 35 2d 32 33 31 35 35 35
>08d2	0d 00		               .byte     $0d,0
>08d4	0d		shortcuts      .byte     $0d
>08d5	91 91		               .byte     ucurkey,ucurkey
>08d7	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey
>08db	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey,rcurkey
>08df	1d
>08e0	20 d2 20 c1	               .text          " R A C C O U R C I S "
>08e4	20 c3 20 c3 20 cf 20 d5 20 d2 20 c3 20 c9 20 d3
>08f4	20
>08f5	0d		               .byte     $0d
>08f6	20 4c 49 42	               .text   format(" libtest01..: SYS%05d ($%04X)",main, main)
>08fa	54 45 53 54 30 31 2e 2e 3a 20 d3 d9 d3 30 32 35
>090a	30 39 20 28 24 30 39 c3 c4 29
>0914	0d		               .byte     $0d
>0915	20 41 49 44	               .text   format(" aide.....: SYS%05d ($%04X)",aide, aide)
>0919	45 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 36 32 30
>0929	20 28 24 30 c1 33 c3 29
>0931	0d		               .byte     $0d
>0932	20 43 4c 53	               .text   format(" cls......: SYS%05d ($%04X)",cls, cls)
>0936	2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 38 33 36
>0946	20 28 24 30 c2 31 34 29
>094e	0d 00		               .byte     $0d,0
>0950	20 cc 41 4e	aidetext       .text   format(" Lancement: SYS%05d ($%04X)",libtest01, libtest01)
>0954	43 45 4d 45 4e 54 3a 20 d3 d9 d3 30 32 37 34 30
>0964	20 28 24 30 c1 c2 34 29
>096c	0d 0d		               .byte     $0d, $0d
>096e	20 20 20 20	                .text   format("    ex.: SYS%05d",libtest01)
>0972	45 58 2e 3a 20 d3 d9 d3 30 32 37 34 30
>097f	0d		                .byte     $0d
>0980	20 20 20 20	                .text   format("    for i=0to100:SYS%05d:next",libtest01)
>0984	46 4f 52 20 49 3d 30 54 4f 31 30 30 3a d3 d9 d3
>0994	30 32 37 34 30 3a 4e 45 58 54
>099e	0d 00		                .byte     $0d,0
>09a0	20 c0 c0 c0	line            .byte     $20,192,192,192,192,192,192,192,192,192
>09a4	c0 c0 c0 c0 c0 c0
>09aa	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192,192
>09ae	c0 c0 c0 c0 c0 c0
>09b4	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192,192
>09b8	c0 c0 c0 c0 c0 c0
>09be	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192
>09c2	c0 c0 c0 c0 c0
>09c7	0d 00		                .byte     $0d,0
>09c9	01 01 0a 00	dataloc         .byte       1,1,10,0

;******  Return to file: libtest01.asm

.09cd			main
.09cd	20 f4 0a	               jsr scrmaninit
.09d0	08		               php
.09d1	48		               pha
.09d2	a9 0e		               lda  #14
.09d4	8d 13 0b	               sta  characterset
.09d7	20 d2 ff	               jsr  $ffd2
.09da	68		               pla
.09db	28		               plp
.09dc	08		               php
.09dd	48		               pha
.09de	a9 08		               lda  #$08
.09e0	20 d2 ff	               jsr  $ffd2
.09e3	68		               pla
.09e4	28		               plp
.09e5	20 3c 0a	               jsr aide
.09e8	20 37 10	               jsr anykey
.09eb	20 22 0c	               jsr  push
.09ee	48		               pha
.09ef	a9 05		               lda  #cvert
.09f1	8d 20 d0	               sta  $d020
.09f4	68		               pla
.09f5	48		               pha
.09f6	a9 06		               lda  #cbleu
.09f8	8d 21 d0	               sta  $d021
.09fb	68		               pla
.09fc	48		               pha
.09fd	a9 01		               lda  #cblanc
.09ff	8d 86 02	               sta  bascol
.0a02	68		               pla
.0a03	20 61 0c	               jsr  pull
.0a06	20 b4 0a	               jsr libtest01
.0a09	08		               php
.0a0a	48		               pha
.0a0b	a9 09		               lda  #$09
.0a0d	20 d2 ff	               jsr  $ffd2
.0a10	68		               pla
.0a11	28		               plp
.0a12	08		               php
.0a13	48		               pha
.0a14	a9 8e		               lda  #b_uppercase
.0a16	8d 13 0b	               sta  characterset
.0a19	20 d2 ff	               jsr  $ffd2
.0a1c	68		               pla
.0a1d	28		               plp
.0a1e	20 14 0b	               jsr  cls
.0a21	20 22 0c	               jsr  push
.0a24	48		               pha
.0a25	a9 05		               lda  #cvert
.0a27	8d 20 d0	               sta  $d020
.0a2a	68		               pla
.0a2b	48		               pha
.0a2c	a9 06		               lda  #cbleu
.0a2e	8d 21 d0	               sta  $d021
.0a31	68		               pla
.0a32	48		               pha
.0a33	a9 01		               lda  #cblanc
.0a35	8d 86 02	               sta  bascol
.0a38	68		               pla
.0a39	20 61 0c	               jsr  pull
.0a3c			aide
.0a3c	08		               php
.0a3d	48		               pha
.0a3e	a9 0e		               lda  #14
.0a40	8d 13 0b	               sta  characterset
.0a43	20 d2 ff	               jsr  $ffd2
.0a46	68		               pla
.0a47	28		               plp
.0a48	20 14 0b	               jsr cls
.0a4b	20 22 0c	               jsr  push
.0a4e	a2 a0		               ldx  #<line
.0a50	a0 09		               ldy  #>line
.0a52	20 31 0b	               jsr  puts
.0a55	20 61 0c	               jsr  pull
.0a58	20 22 0c	               jsr  push
.0a5b	a2 54		               ldx  #<headera
.0a5d	a0 08		               ldy  #>headera
.0a5f	20 31 0b	               jsr  puts
.0a62	20 61 0c	               jsr  pull
.0a65	20 22 0c	               jsr  push
.0a68	a2 79		               ldx  #<headerb
.0a6a	a0 08		               ldy  #>headerb
.0a6c	20 31 0b	               jsr  puts
.0a6f	20 61 0c	               jsr  pull
.0a72	20 22 0c	               jsr  push
.0a75	a2 a0		               ldx  #<line
.0a77	a0 09		               ldy  #>line
.0a79	20 31 0b	               jsr  puts
.0a7c	20 61 0c	               jsr  pull
.0a7f	20 22 0c	               jsr  push
.0a82	a2 a0		               ldx  #<line
.0a84	a0 09		               ldy  #>line
.0a86	20 31 0b	               jsr  puts
.0a89	20 61 0c	               jsr  pull
.0a8c	20 22 0c	               jsr  push
.0a8f	a2 d4		               ldx  #<shortcuts
.0a91	a0 08		               ldy  #>shortcuts
.0a93	20 31 0b	               jsr  puts
.0a96	20 61 0c	               jsr  pull
.0a99	20 22 0c	               jsr  push
.0a9c	a2 50		               ldx  #<aidetext
.0a9e	a0 09		               ldy  #>aidetext
.0aa0	20 31 0b	               jsr  puts
.0aa3	20 61 0c	               jsr  pull
.0aa6	20 22 0c	               jsr  push
.0aa9	a2 a0		               ldx  #<line
.0aab	a0 09		               ldy  #>line
.0aad	20 31 0b	               jsr  puts
.0ab0	20 61 0c	               jsr  pull
.0ab3	60		               rts
.0ab4			libtest01
.0ab4	08		               php
.0ab5	48		               pha
.0ab6	20 14 0b	               jsr  cls
.0ab9	20 22 0c	               jsr  push
.0abc	a2 c9		               ldx  #<dataloc
.0abe	a0 09		               ldy  #>dataloc
.0ac0	20 ba 0b	               jsr  putscxy
.0ac3	20 61 0c	               jsr  pull
.0ac6	48		               pha
.0ac7	a9 0a		               lda  #crose
.0ac9	8d 86 02	               sta  bascol
.0acc	68		               pla
.0acd	a9 55		               lda #$55
.0acf	20 cd 0e	               jsr  putabinfmt
.0ad2	48		               pha
.0ad3	a9 20		               lda #' '
.0ad5	20 2b 0b	               jsr putch
.0ad8	68		               pla
.0ad9	20 0a 0e	               jsr putahexfmt
.0adc	48		               pha
.0add	a9 20		               lda #' '
.0adf	20 2b 0b	               jsr putch
.0ae2	68		               pla
.0ae3	20 1a 0f	               jsr putadec
.0ae6	20 37 10	               jsr  anykey
.0ae9	68		               pla
.0aea	28		               plp
.0aeb	60		               rts

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0aec	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0af0	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0af4			libtart

;******  Return to file: libtest01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: libtest01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: libtest01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0af4			scrmaninit
.0af4	20 22 0c	               jsr  push
.0af7	a9 06		               lda  #vbleu
.0af9	8d 21 d0	               sta  vicbackcol
.0afc	a9 05		               lda  #vvert
.0afe	8d 20 d0	               sta  vicbordcol
.0b01	a9 01		               lda  #vblanc
.0b03	8d 86 02	               sta  bascol
.0b06	ad 00 04	               lda  scrnram
.0b09	8d 00 04	               sta  scrnram
.0b0c	20 14 0b	               jsr  cls
.0b0f	20 61 0c	               jsr  pop
.0b12	60		               rts
>0b13	8e		characterset   .byte b_uppercase
.0b14			cls
.0b14	08		               php
.0b15	48		               pha
.0b16	a9 93		               lda  #$93
.0b18	20 2b 0b	               jsr  putch
.0b1b	68		               pla
.0b1c	28		               plp
.0b1d	60		               rts
.0b1e			putnch
.0b1e	08		               php
.0b1f	e0 00		               cpx  #$00
.0b21	f0 06		               beq  out
.0b23	20 d2 ff	again          jsr  $ffd2
.0b26	ca		               dex
.0b27	d0 fa		               bne  again
.0b29	28		out            plp
.0b2a	60		               rts
.0b2b			putch
.0b2b	08		               php
.0b2c	20 d2 ff	               jsr  $ffd2
.0b2f	28		               plp
.0b30	60		               rts
.0b31			puts
.0b31	20 22 0c	               jsr  push
.0b34	86 fb		               stx  zpage1
.0b36	84 fc		               sty  zpage1+1
.0b38	a0 00		               ldy  #0
.0b3a	b1 fb		next           lda  (zpage1),y
.0b3c	f0 09		               beq  exit
.0b3e	20 2b 0b	               jsr  putch
.0b41	20 29 0d	               jsr  inczp1
.0b44	4c 3a 0b	               jmp  next
.0b47	20 61 0c	exit           jsr  pop
.0b4a	60		               rts
.0b4b			gotoxy
.0b4b	08		               php
.0b4c	18		               clc
.0b4d	8a		               txa
.0b4e	48		               pha
.0b4f	98		               tya
.0b50	aa		               tax
.0b51	68		               pla
.0b52	a8		               tay
.0b53	20 f0 ff	               jsr  kplot
.0b56	28		               plp
.0b57	60		               rts
.0b58			cursor
=$0286			bascol    =    $0286
.0b58	08		               php            ;tourlou
.0b59	48		               pha
.0b5a	90 12		               bcc  restore
.0b5c	20 f0 ff	               jsr  kplot
.0b5f	8c 80 0b	               sty  cx
.0b62	8e 81 0b	               stx  cy
.0b65	ad 86 02	               lda  bascol
.0b68	8d 82 0b	               sta  bcol
.0b6b	4c 7d 0b	               jmp  out
.0b6e	ae 81 0b	restore        ldx  cy
.0b71	ac 80 0b	               ldy  cx
.0b74	20 f0 ff	               jsr  kplot
.0b77	ad 82 0b	               lda  bcol
.0b7a	8d 86 02	               sta  bascol
.0b7d	68		out            pla
.0b7e	28		               plp
.0b7f	60		               rts
>0b80	00		cx   .byte     $00
>0b81	00		cy   .byte     $00
>0b82	00		bcol .byte     $00
.0b83			cursave
.0b83	08		               php
.0b84	38		               sec
.0b85	20 58 0b	               jsr  cursor
.0b88	28		               plp
.0b89	60		               rts
.0b8a			curput
.0b8a	08		               php
.0b8b	18		               clc
.0b8c	20 58 0b	               jsr  cursor
.0b8f	28		               plp
.0b90	60		               rts
.0b91			putsxy
.0b91	20 22 0c	               jsr  push
.0b94	86 fb		               stx  zpage1
.0b96	84 fc		               sty  zpage1+1
.0b98	a0 00		               ldy  #$00
.0b9a	b1 fb		               lda  (zpage1),y
.0b9c	aa		               tax
.0b9d	20 29 0d	               jsr  inczp1
.0ba0	b1 fb		               lda  (zpage1),y
.0ba2	a8		               tay
.0ba3	20 4b 0b	               jsr  gotoxy
.0ba6	20 29 0d	               jsr  inczp1
.0ba9	a6 fb		               ldx  zpage1
.0bab	a4 fc		               ldy  zpage1+1
.0bad	20 31 0b	               jsr  puts
.0bb0	20 61 0c	               jsr  pop
.0bb3	60		               rts
>0bb4	00 00		straddr   .word     $00
>0bb6	00		px        .byte     $00
>0bb7	00		py        .byte     $00
>0bb8	00 00		zp1       .word     $00
.0bba			putscxy
.0bba	20 22 0c	               jsr  push
.0bbd	84 fc		               sty  zpage1+1
.0bbf	86 fb		               stx  zpage1
.0bc1	ad 86 02	               lda  bascol
.0bc4	8d e4 0b	               sta  bc
.0bc7	a0 00		               ldy #$00
.0bc9	b1 fb		               lda  (zpage1),y
.0bcb	8d 86 02	               sta  bascol
.0bce	20 29 0d	               jsr  inczp1
.0bd1	a6 fb		               ldx  zpage1
.0bd3	a4 fc		               ldy  zpage1+1
.0bd5	20 91 0b	               jsr  putsxy
.0bd8	ad e4 0b	               lda  bc
.0bdb	8d 86 02	               sta  bascol
.0bde	20 61 0c	               jsr  pop
.0be1	60		               rts
>0be2	00 00		straddr  .word      $00
>0be4	00		bc       .byte      $00
>0be5	00 00		zp1      .word      $00
.0be7			putrahex
.0be7	08		               php
.0be8	48		               pha
.0be9	20 3f 0e	               jsr  atohex
.0bec	a9 de		               lda  #<a2hexstr
.0bee	a0 0d		               ldy  #>a2hexstr
.0bf0	20 31 0b	               jsr  puts
.0bf3	68		               pla
.0bf4	28		               plp
.0bf5	60		               rts
.0bf6			kputrahexxy
.0bf6			bputrahexxy
.0bf6			putrahexxy
.0bf6	08		               php
.0bf7	20 3f 0e	               jsr  atohex
.0bfa	a9 db		               lda  #<a2hexpos
.0bfc	a0 0d		               ldy  #>a2hexpos
.0bfe	20 91 0b	               jsr  putsxy
.0c01	68		               pla
.0c02	28		               plp
.0c03	60		               rts
.0c04			putrahexcxy
.0c04	08		               php
.0c05	20 3f 0e	               jsr  atohex
.0c08	a9 db		               lda  #<a2hexpos
.0c0a	a0 0d		               ldy  #>a2hexpos
.0c0c	20 ba 0b	               jsr  putscxy
.0c0f	68		               pla
.0c10	28		               plp
.0c11	60		               rts
.0c12			setinverse
.0c12	48		               pha
.0c13	a9 12		               lda  #$12
.0c15	20 d2 ff	               jsr  $ffd2
.0c18	68		               pla
.0c19	60		               rts
.0c1a			clrinverse
.0c1a	48		               pha
.0c1b	a9 92		               lda  #$92
.0c1d	20 d2 ff	               jsr  $ffd2
.0c20	68		               pla
.0c21	60		               rts

;******  Return to file: libtest01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.0c22			push
.0c22	08		          php            ; stack : flg, pcl, pch
.0c23	78		          sei
.0c24	8d 5e 0c	          sta  ra        ; save a
.0c27	68		          pla            ; stack : pcl, pch
.0c28	8d 5d 0c	          sta  rp        ; save rp
.0c2b	68		          pla            ; stack : pch
.0c2c	8d 5f 0c	          sta  pc        ; save pcl
.0c2f	68		          pla            ; stack : -
.0c30	8d 60 0c	          sta  pc+1      ; save pch
.0c33	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0c35	48		          pha            ; stack : zp1l
.0c36	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0c38	48		          pha            ; stack : zp1h, zp1l
.0c39	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0c3b	48		          pha            ; stack : zp2l, zp1h, zp1l
.0c3c	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0c3e	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0c3f	ad 5d 0c	          lda  rp        ; get rp
.0c42	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0c43	ad 5e 0c	          lda  ra        ; get a
.0c46	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0c47	8a		          txa            ; get x
.0c48	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c49	98		          tya            ; get y
.0c4a	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c4b	ad 60 0c	          lda  pc+1      ; get pch
.0c4e	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c4f	ad 5f 0c	          lda  pc        ; get pcl
.0c52	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c53	ad 5d 0c	          lda  rp        ; get rp
.0c56	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c57	ad 5e 0c	          lda  ra        ; get a
.0c5a	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c5b	58		          cli
.0c5c	60		          rts
>0c5d	00		rp        .byte     0
>0c5e	00		ra        .byte     0
>0c5f	00 00		pc        .word     0
.0c61			pull
.0c61			pop
.0c61	78		          sei
.0c62	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c63	8d 96 0c	          sta  pc        ; save pcl
.0c66	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c67	8d 97 0c	          sta  pc+1      ; save pch
.0c6a	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c6b	a8		          tay            ; set y
.0c6c	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0c6d	aa		          tax            ; set x
.0c6e	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0c6f	8d 95 0c	          sta  ra        ; save a
.0c72	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0c73	8d 94 0c	          sta  rp        ; save rp
.0c76	68		          pla            ; stack : zp2l, zp1h, zp1l
.0c77	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0c79	68		          pla            ; stack : zp1h, zp1l
.0c7a	85 fd		          sta  zpage2    ; get zpage2 High byte
.0c7c	68		          pla            ; stack : zp1l
.0c7d	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0c7f	68		          pla            ; stack :
.0c80	85 fb		          sta  zpage1    ; get zpage1 High byte
.0c82	ad 97 0c	          lda  pc+1      ; get pch
.0c85	48		          pha            ; stack : pch
.0c86	ad 96 0c	          lda  pc
.0c89	48		          pha            ; stack : pcl, pch
.0c8a	ad 94 0c	          lda  rp        ; get rp
.0c8d	48		          pha            ; stack : rp, pcl, pch
.0c8e	ad 95 0c	          lda  ra        ; set ra
.0c91	58		          cli
.0c92	28		          plp            ; stack : pcl, pch
.0c93	60		          rts
>0c94	00		rp        .byte     0
>0c95	00		ra        .byte     0
>0c96	00 00		pc        .word     0

;******  Return to file: libtest01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0c98			blkfill
.0c98	20 22 0c	bf0            jsr  push
.0c9b	20 59 0d	               jsr  savezp1
.0c9e	84 fc		               sty  zpage1+1
.0ca0	a0 00		               ldy  #$00
.0ca2	84 fb		               sty  zpage1
.0ca4	91 fb		bf1            sta  (zpage1),y
.0ca6	c8		               iny
.0ca7	d0 fb		               bne  bf1
.0ca9	20 68 0d	               jsr  restzp1
.0cac	20 61 0c	               jsr  pop
.0caf	60		               rts
.0cb0			memfill
.0cb0	20 22 0c	               jsr  push
.0cb3	20 98 0c	mf1            jsr  blkfill
.0cb6	c8		               iny
.0cb7	ca		               dex
.0cb8	d0 f9		               bne  mf1
.0cba	20 61 0c	               jsr  pop
.0cbd	60		               rts
.0cbe			memmove
.0cbe	20 22 0c	               jsr  push
.0cc1	ba		               tsx            ; On se crée un pointeur ...
.0cc2	8a		               txa
.0cc3	18		               clc
.0cc4	69 0b		               adc  #11
.0cc6	a8		               tay
.0cc7	a2 06		               ldx  #$06
.0cc9	b9 00 01	nextbyte       lda  $0100,y
.0ccc	99 18 0d	               sta  words,y
.0ccf	c8		               iny
.0cd0	ca		               dex
.0cd1	d0 f6		               bne  nextbyte
.0cd3	ad 18 0d	               lda  s
.0cd6	8d ef 0c	               sta  source+1
.0cd9	ad 19 0d	               lda  s+1
.0cdc	8d f0 0c	               sta  source+2
.0cdf	ad 1a 0d	               lda  d
.0ce2	8d ec 0c	               sta  destin+1
.0ce5	ad 1b 0d	               lda  d+1
.0ce8	8d ed 0c	               sta  destin+2
.0ceb	ad ff ff	destin         lda  $ffff
.0cee	8d ff ff	source         sta  $ffff
.0cf1	ee ec 0c	               inc  destin+1
.0cf4	d0 03		               bne  src
.0cf6	ee ed 0c	               inc  destin+2
.0cf9	ee ef 0c	src            inc  source+1
.0cfc	d0 03		               bne  cnt
.0cfe	ee f0 0c	               inc  source+2
.0d01	ad 1c 0d	cnt            lda  compte
.0d04	d0 08		               bne  decit
.0d06	ad 1d 0d	               lda  compte+1
.0d09	f0 09		               beq  fini
.0d0b	ce 1d 0d	               dec  compte+1
.0d0e	ce 1c 0d	decit          dec  compte
.0d11	4c eb 0c	               jmp  destin
.0d14	20 61 0c	fini           jsr  pop
.0d17	60		               rts
.0d18			words
>0d18	00 00		s         .word     $0000
>0d1a	00 00		d         .word     $0000
>0d1c	00 00		compte    .word     $0000
.0d1e			decword
.0d1e	20 22 0c	               jsr  push
.0d21	86 fd		               stx  zpage2
.0d23	84 fe		               sty  zpage2+1
.0d25	20 61 0c	               jsr  pop
.0d28	60		               rts
.0d29			inczp1
.0d29	08		               php
.0d2a	48		               pha
.0d2b	e6 fb		               inc  zpage1
.0d2d	a5 fb		               lda  zpage1
.0d2f	d0 02		               bne  nopage
.0d31	e6 fc		               inc  zpage1+1
.0d33	68		nopage         pla
.0d34	28		               plp
.0d35	60		               rts
.0d36			deczp1
.0d36	08		                php
.0d37	48		                pha
.0d38	c6 fb		                dec  zpage1
.0d3a	d0 02		                bne  nopage
.0d3c	c6 fc		                dec  zpage1+1
.0d3e	68		nopage          pla
.0d3f	28		                plp
.0d40	60		                rts
.0d41			inczp2
.0d41	08		               php
.0d42	48		               pha
.0d43	e6 fd		               inc  zpage2
.0d45	a5 fd		               lda  zpage2
.0d47	d0 02		               bne  nopage
.0d49	e6 fe		               inc  zpage2+1
.0d4b	68		nopage         pla
.0d4c	28		               plp
.0d4d	60		               rts
.0d4e			deczp2
.0d4e	08		               php
.0d4f	48		               pha
.0d50	a5 fd		               lda  zpage2
.0d52	d0 02		               bne  nopage
.0d54	c6 fe		               dec  zpage2+1
.0d56	68		nopage         pla
.0d57	28		               plp
.0d58	60		               rts
.0d59			savezp1
.0d59	08		               php
.0d5a	48		               pha
.0d5b	a5 fb		               lda  zpage1
.0d5d	8d d5 0d	               sta  zp1
.0d60	a5 fc		               lda  zpage1+1
.0d62	8d d6 0d	               sta  zp1+1
.0d65	68		               pla
.0d66	28		               plp
.0d67	60		               rts
.0d68			restzp1
.0d68	08		               php
.0d69	48		               pha
.0d6a	ad d5 0d	               lda zp1
.0d6d	85 fb		               sta zpage1
.0d6f	ad d6 0d	               lda zp1+1
.0d72	85 fc		               sta zpage1+1
.0d74	68		               pla
.0d75	28		               plp
.0d76	60		               rts
.0d77			savezp2
.0d77	08		         php
.0d78	48		         pha
.0d79	a5 fd		         lda zpage2
.0d7b	8d d7 0d	         sta zp2
.0d7e	a5 fe		         lda zpage2+1
.0d80	8d d8 0d	         sta zp2+1
.0d83	68		         pla
.0d84	28		         plp
.0d85	60		         rts
.0d86			restzp2
.0d86	08		                php
.0d87	48		                pha
.0d88	ad d7 0d	                lda  zp2
.0d8b	85 fd		                sta  zpage2
.0d8d	ad d8 0d	                lda  zp2+1
.0d90	85 fe		                sta  zpage2+1
.0d92	68		                pla
.0d93	28		                plp
.0d94	60		                rts
.0d95			xy2addr
.0d95	08		                php
.0d96	48		                pha
.0d97	8a		                txa
.0d98	48		                pha
.0d99	98		                tya
.0d9a	48		                pha
.0d9b	ad d0 0d	                lda     addr1+1
.0d9e	8d d2 0d	                sta     addr2+1
.0da1	ad cf 0d	                lda     addr1
.0da4	8d d1 0d	                sta     addr2
.0da7	c0 00		                cpy     #$00
.0da9	f0 0f		                beq     addx
.0dab	18		moreline        clc
.0dac	6d ce 0d	                adc     ymult
.0daf	90 03		                bcc     norepy
.0db1	ee d2 0d	                inc     addr2+1
.0db4	8d d1 0d	norepy          sta     addr2
.0db7	88		                dey
.0db8	d0 f1		                bne     moreline
.0dba	8a		addx            txa
.0dbb	18		                clc
.0dbc	6d d1 0d	                adc     addr2
.0dbf	90 03		                bcc     thatsit
.0dc1	ee d2 0d	                inc     addr2+1
.0dc4	8d d1 0d	thatsit         sta     addr2
.0dc7	68		                pla
.0dc8	a8		                tay
.0dc9	68		                pla
.0dca	aa		                tax
.0dcb	68		                pla
.0dcc	28		                plp
.0dcd	60		                rts
>0dce	28		ymult          .byte     40
>0dcf	00 00		addr1          .word     $0000
>0dd1	00 00		addr2          .word     $0000
>0dd3	00 00		bytecnt        .word     $0000
>0dd5	00 00		zp1        .word   $0000
>0dd7	00 00		zp2        .word   $0000

;******  Return to file: libtest01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>0dd9	01		a2hexcol       .byte     1              ; pour aputscxy
>0dda	00		a2hexbkcol     .byte     %00000000
.0ddb			a2hexpos
>0ddb	00		a2hexpx        .byte     0              ; pour aputsxy
>0ddc	00		a2hexpy        .byte     0
>0ddd	24		a2hexprefix    .byte     "$"            ; pour aputs
>0dde	00 00		a2hexstr       .word     $00
>0de0	00 00		               .word     $00
>0de2	00		               .byte     0              ; 0 end string
>0de3	30 30 30 30	abin           .null     "00000000"
>0de7	30 30 30 30 00
>0dec	20 20 20 00	adec           .null     "   "
.0df0			putahexfmtxy
.0df0	20 22 0c	               jsr  push
.0df3	20 3f 0e	               jsr  atohex
.0df6	ae db 0d	               ldx  a2hexpx
.0df9	ac dc 0d	               ldy  a2hexpy
.0dfc	20 4b 0b	               jsr  gotoxy
.0dff	a2 dd		               ldx  #<a2hexprefix
.0e01	a0 0d		               ldy  #>a2hexprefix
.0e03	20 31 0b	               jsr  puts
.0e06	20 61 0c	               jsr  pop
.0e09	60		               rts
.0e0a			putahexfmt
.0e0a	20 22 0c	               jsr  push
.0e0d	20 3f 0e	               jsr  atohex
.0e10	a2 dd		               ldx  #<a2hexprefix
.0e12	a0 0d		               ldy  #>a2hexprefix
.0e14	20 31 0b	               jsr  puts
.0e17	20 61 0c	               jsr  pop
.0e1a	60		               rts
.0e1b			putahex
.0e1b	20 22 0c	               jsr  push
.0e1e	20 3f 0e	               jsr  atohex
.0e21	a2 de		               ldx  #<a2hexstr
.0e23	a0 0d		               ldy  #>a2hexstr
.0e25	20 31 0b	               jsr  puts
.0e28	20 61 0c	               jsr  pop
.0e2b	60		               rts
.0e2c			nibtohex
.0e2c	08		               php
.0e2d	29 0f		               and  #$0f
.0e2f	f8		               sed
.0e30	18		               clc
.0e31	69 90		               adc  #$90
.0e33	69 40		               adc  #$40
.0e35	d8		               cld
.0e36	28		               plp
.0e37	60		               rts
.0e38			lsra4bits
.0e38	08		               php
.0e39	4a		               lsr
.0e3a	4a		               lsr
.0e3b	4a		               lsr
.0e3c	4a		               lsr
.0e3d	28		               plp
.0e3e	60		               rts
.0e3f			atohex
.0e3f	08		               php
.0e40	48		               pha
.0e41	48		               pha
.0e42	20 38 0e	               jsr  lsra4bits
.0e45	20 2c 0e	               jsr  nibtohex
.0e48	8d de 0d	               sta  a2hexstr
.0e4b	68		               pla
.0e4c	20 2c 0e	               jsr  nibtohex
.0e4f	8d df 0d	               sta  a2hexstr+1
.0e52	a9 00		               lda  #$00                ; set end of string
.0e54	8d e0 0d	               sta  a2hexstr+2
.0e57	68		               pla
.0e58	28		               plp
.0e59	60		               rts
.0e5a			xy2hex
.0e5a	20 22 0c	               jsr  push
.0e5d	20 3f 0e	               jsr  atohex
.0e60	8a		               txa
.0e61	48		               pha
.0e62	20 38 0e	               jsr  lsra4bits
.0e65	20 2c 0e	               jsr  nibtohex
.0e68	8d de 0d	               sta  a2hexstr
.0e6b	68		               pla
.0e6c	20 2c 0e	               jsr  nibtohex
.0e6f	8d df 0d	               sta  a2hexstr+1
.0e72	98		               tya
.0e73	48		               pha
.0e74	20 38 0e	               jsr  lsra4bits
.0e77	20 2c 0e	               jsr  nibtohex
.0e7a	8d e0 0d	               sta  a2hexstr+2
.0e7d	68		               pla
.0e7e	20 2c 0e	               jsr  nibtohex
.0e81	8d e1 0d	               sta  a2hexstr+3
.0e84	a9 00		               lda  #$00                ; 0 ended string
.0e86	8d e2 0d	               sta  a2hexstr+4
.0e89	20 61 0c	               jsr  pop
.0e8c			atobin
.0e8c	20 22 0c	               jsr  push
.0e8f	a2 08		               ldx  #8
.0e91	a0 00		               ldy  #0
.0e93	18		               clc
.0e94	2a		nextbit        rol
.0e95	48		               pha
.0e96	69 00		               adc  #$00
.0e98	29 01		               and  #$01
.0e9a	20 2c 0e	               jsr  nibtohex
.0e9d	99 e3 0d	               sta  abin,y
.0ea0	68		               pla
.0ea1	c8		               iny
.0ea2	ca		               dex
.0ea3	d0 ef		               bne  nextbit
.0ea5	a9 00		               lda  #0
.0ea7	99 e3 0d	               sta  abin,y
.0eaa	20 61 0c	               jsr  pull
.0ead	60		               rts
.0eae			putabin
.0eae	20 8c 0e	               jsr     atobin
.0eb1	20 22 0c	               jsr     push
.0eb4	a2 e3		               ldx     #<abin
.0eb6	a0 0d		               ldy     #>abin
.0eb8	20 31 0b	               jsr     puts
.0ebb	20 61 0c	               jsr     pop
.0ebe	60		               rts
.0ebf			printabin
.0ebf	20 22 0c	               jsr     push
.0ec2	a2 e3		               ldx     #<abin
.0ec4	a0 0d		               ldy     #>abin
.0ec6	20 31 0b	               jsr     puts
.0ec9	20 61 0c	               jsr     pop
.0ecc	60		               rts
.0ecd			putabinfmt
.0ecd	08		               php
.0ece	48		               pha
.0ecf	a9 25		               lda     #"%"
.0ed1	20 2b 0b	               jsr     putch
.0ed4	68		               pla
.0ed5	20 ae 0e	               jsr     putabin
.0ed8	28		               plp
.0ed9	60		               rts
.0eda			putabinxy
.0eda	20 4b 0b	               jsr     gotoxy
.0edd	20 ae 0e	               jsr     putabin
.0ee0	60		               rts
.0ee1			putabinfmtxy
.0ee1	20 4b 0b	               jsr     gotoxy
.0ee4	20 cd 0e	               jsr     putabinfmt
.0ee7	60		               rts
.0ee8			atodec
.0ee8	20 22 0c	               jsr  push
.0eeb	f8		               sed            ; On se place en mode décimal.
.0eec	aa		               tax            ; On déplace a dans x.
.0eed	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.0eef	a9 00		               lda  #$00      ; 0 dans A.
.0ef1	18		nextbit        clc            ; Bit carry a 0.
.0ef2	69 01		               adc  #$01      ; Ajoute 1 a A.
.0ef4	90 01		               bcc  decx      ; Pas de carry, pas de report.
.0ef6	c8		               iny            ; On incrémente Y
.0ef7	ca		decx           dex            ; X=X-1
.0ef8	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.0efa	48		               pha            ; A sur le stack.
.0efb	98		               tya            ; Y dans A (MSB)
.0efc	20 2c 0e	               jsr  nibtohex  ; a hex petsci ...
.0eff	8d ec 0d	               sta  adec      ; ... dans tampon.
.0f02	68		               pla            ; Récupere A
.0f03	48		               pha            ;
.0f04	20 2c 0e	               jsr  nibtohex
.0f07	8d ee 0d	               sta  adec+2
.0f0a	68		               pla
.0f0b	6a		               ror
.0f0c	6a		               ror
.0f0d	6a		               ror
.0f0e	6a		               ror
.0f0f	20 2c 0e	               jsr  nibtohex
.0f12	8d ed 0d	               sta  adec+1
.0f15	d8		               cld            ; On revient en mode binaire.
.0f16	20 61 0c	               jsr  pull
.0f19	60		               rts
.0f1a			putadec
.0f1a	20 22 0c	               jsr  push
.0f1d	20 e8 0e	               jsr  atodec
.0f20	a2 ec		               ldx  #<adec
.0f22	a0 0d		               ldy  #>adec+1
.0f24	20 31 0b	               jsr  puts
.0f27	20 61 0c	               jsr  pop
.0f2a	60		               rts

;******  Return to file: libtest01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>0f2b	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>0f2f	00 00 00 00 00 00 00 00 00 0d 00 00
>0f3b	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>0f3f	00 00 00 00 00 00 00 00 00 00 00 00
>0f4b	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>0f4f	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>0f5b	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>0f5f	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>0f6b	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>0f6f	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>0f7b	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>0f7f	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>0f8b	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>0f8f	00 00 00 00 00 00 00 00 00 00 00 00
>0f9b	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>0f9f	00 00 00 00 00 00 00 00 00 00 00 00
>0fab	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>0faf	00 00 00 00 00 00 00 00 00 00 00 00
>0fbb	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>0fbf	00 00 00 00 00 00 00 00 00 00 00 00
>0fcb	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>0fcf	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>0fdb	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>0fdf	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>0feb	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>0fef	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>0ffb	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>0fff	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>100b	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>100f	00 00 00 00 00 00 00 00 00 00 00 00
>101b	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>101f	00 00 00 00 00 00 00 00 00 00 00 00
.102b			waitstop
.102b	20 22 0c	               jsr  push
.102e	20 ed f6	wait           jsr  k_stop
.1031	d0 fb		               bne  wait
.1033	20 61 0c	               jsr  pop
.1036	60		               rts
.1037			anykey
.1037	08		               php
.1038	48		               pha
.1039	a5 cb		nokey          lda 203
.103b	c9 40		               cmp #64
.103d	f0 fa		               beq nokey
.103f	20 45 10	               jsr releasekey
.1042	68		               pla
.1043	28		               plp
.1044	60		               rts
.1045			releasekey
.1045	08		               php
.1046	48		               pha
.1047	a5 cb		keypressed     lda 203
.1049	c9 40		               cmp #64
.104b	d0 fa		               bne keypressed
.104d	68		               pla
.104e	28		               plp
.104f	60		               rts
.1050			getkey
.1050	20 e4 ff	again          jsr  getin
.1053	c9 00		               cmp  #0
.1055	f0 f9		               beq  again
.1057	60		               rts
.1058			kbflushbuff
.1058	08		               php
.1059	48		               pha
.105a	20 e4 ff	again          jsr  getin
.105d	c9 00		               cmp  #0
.105f	d0 f9		               bne  again
.1061	68		               pla
.1062	28		               plp
.1063	60		               rts
.1064			waitkey
.1064	20 22 0c	               jsr  push
.1067	8d b5 10	               sta  thekey
.106a	20 e4 ff	nope           jsr  getin
.106d	20 d2 ff	               jsr  chrout
.1070	cd b5 10	               cmp  thekey
.1073	d0 f5		               bne  nope
.1075	20 d2 ff	               jsr  chrout
.1078	20 61 0c	               jsr  pop
.107b	60		               rts
.107c			waitspace
.107c	20 22 0c	               jsr  push
.107f	a9 7f		wait           lda  #$7f  ;%01111111
.1081	8d 00 dc	               sta  $dc00
.1084	ad 01 dc	               lda  $dc01
.1087	29 10		               and  #$10  ;mask %00010000
.1089	d0 f4		               bne  wait
.108b	20 61 0c	               jsr  pop
.108e			waitsstop
.108e	20 22 0c	               jsr  push
.1091	20 ed f6	wait           jsr  k_stop  ;%01111111
.1094	d0 fb		               bne  wait
.1096	20 61 0c	               jsr  pop
.1099			waitreturn
.1099	20 22 0c	               jsr  push
.109c	ad b6 10	               lda  thecount
.109f	8d 00 04	               sta  scrnram
.10a2	a9 02		               lda  #$02
.10a4	8d 00 d8	               sta  colorram
.10a7	20 e4 ff	nope           jsr  getin
.10aa	c9 0d		nohex          cmp  #$0d
.10ac	d0 f9		               bne  nope
.10ae	ee b6 10	               inc  thecount
.10b1	20 61 0c	               jsr  pop
.10b4	60		               rts
>10b5	00		thekey         .byte   0
>10b6	01		thecount       .byte   $01

;******  Return to file: libtest01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.10b7			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.10b7	08		                php
.10b8	8d 75 12	                sta  rega
.10bb	68		                pla
.10bc	8d 78 12	                sta  regp
.10bf	8e 76 12	                stx  regx
.10c2	8c 77 12	                sty  regy
.10c5	ba		                tsx
.10c6	8e 79 12	                stx  regs
.10c9	68		                pla
.10ca	8d 7c 12	                sta  regpcl
.10cd	8d 7d 12	                sta  regpcl2
.10d0	68		                pla
.10d1	8d 7a 12	                sta  regpch
.10d4	8d 7b 12	                sta  regpch2
.10d7	ad 75 12	                lda  rega
.10da	48		                pha
.10db	20 2c 0e	                jsr  nibtohex
.10de	8d 1f 12	                sta  vala+1
.10e1	68		                pla
.10e2	20 38 0e	                jsr  lsra4bits
.10e5	20 2c 0e	                jsr  nibtohex
.10e8	8d 1e 12	                sta  vala
.10eb	ad 77 12	                lda  regy
.10ee	48		                pha
.10ef	20 2c 0e	                jsr  nibtohex
.10f2	8d 33 12	                sta  valy+1
.10f5	68		                pla
.10f6	20 38 0e	                jsr  lsra4bits
.10f9	20 2c 0e	                jsr  nibtohex
.10fc	8d 32 12	                sta  valy
.10ff	ad 76 12	                lda  regx
.1102	48		                pha
.1103	20 2c 0e	                jsr  nibtohex
.1106	8d 29 12	                sta  valx+1
.1109	68		                pla
.110a	20 38 0e	                jsr  lsra4bits
.110d	20 2c 0e	                jsr  nibtohex
.1110	8d 28 12	                sta  valx
.1113	ad 78 12	                lda  regp
.1116	48		                pha
.1117	20 2c 0e	                jsr  nibtohex
.111a	8d 3d 12	                sta  valp+1
.111d	68		                pla
.111e	20 38 0e	                jsr  lsra4bits
.1121	20 2c 0e	                jsr  nibtohex
.1124	8d 3c 12	                sta  valp
.1127	ad 79 12	                lda  regs
.112a	48		                pha
.112b	20 2c 0e	                jsr  nibtohex
.112e	8d 47 12	                sta  vals+1
.1131	68		                pla
.1132	20 38 0e	                jsr  lsra4bits
.1135	20 2c 0e	                jsr  nibtohex
.1138	8d 46 12	                sta  vals
.113b	18		                clc
.113c	ad 7d 12	                lda regpcl2
.113f	69 01		                adc #$01
.1141	8d 7d 12	                sta regpcl2
.1144	ad 7d 12	                lda regpcl2
.1147	d0 03		                bne noreport
.1149	ee 7b 12	                inc regpch2
.114c	ad 7b 12	    noreport    lda regpch2
.114f	48		                pha
.1150	20 2c 0e	                jsr  nibtohex
.1153	8d 52 12	                sta  valpch+1
.1156	68		                pla
.1157	20 38 0e	                jsr  lsra4bits
.115a	20 2c 0e	                jsr  nibtohex
.115d	8d 51 12	                sta  valpch
.1160	ad 7d 12	                lda  regpcl2
.1163	48		                pha
.1164	20 2c 0e	                jsr  nibtohex
.1167	8d 54 12	                sta  valpcl+1
.116a	68		                pla
.116b	20 38 0e	                jsr  lsra4bits
.116e	20 2c 0e	                jsr  nibtohex
.1171	8d 53 12	                sta  valpcl
.1174	a5 fb		                lda  zpage1
.1176	48		                pha
.1177	20 2c 0e	                jsr  nibtohex
.117a	8d 62 12	                sta  valz1l
.117d	68		                pla
.117e	20 38 0e	                jsr  lsra4bits
.1181	20 2c 0e	                jsr  nibtohex
.1184	8d 63 12	                sta  valz1l+1
.1187	a5 fc		                lda  zpage1+1
.1189	48		                pha
.118a	20 2c 0e	                jsr  nibtohex
.118d	8d 60 12	                sta  valz1h
.1190	68		                pla
.1191	20 38 0e	                jsr  lsra4bits
.1194	20 2c 0e	                jsr  nibtohex
.1197	8d 61 12	                sta  valz1h+1
.119a	a5 fd		                lda  zpage2
.119c	48		                pha
.119d	20 2c 0e	                jsr  nibtohex
.11a0	8d 71 12	                sta  valz2l
.11a3	68		                pla
.11a4	20 38 0e	                jsr  lsra4bits
.11a7	20 2c 0e	                jsr  nibtohex
.11aa	8d 72 12	                sta  valz2l+1
.11ad	a5 fe		                lda  zpage2+1
.11af	48		                pha
.11b0	20 2c 0e	                jsr  nibtohex
.11b3	8d 6f 12	                sta  valz2h
.11b6	68		                pla
.11b7	20 38 0e	                jsr  lsra4bits
.11ba	20 2c 0e	                jsr  nibtohex
.11bd	8d 70 12	                sta  valz2h+1
.11c0	20 12 0c	                jsr  setinverse
.11c3	78		                sei
.11c4	a2 17		                ldx  #<srega
.11c6	a0 12		                ldy  #>srega+1
.11c8	20 ba 0b	                jsr  putscxy
.11cb	a2 21		                ldx  #<sregx
.11cd	a0 12		                ldy  #>sregx+1
.11cf	20 ba 0b	                jsr  putscxy
.11d2	a2 2b		                ldx  #<sregy
.11d4	a0 12		                ldy  #>sregy+1
.11d6	20 ba 0b	                jsr  putscxy
.11d9	a2 35		                ldx  #<sregp
.11db	a0 12		                ldy  #>sregp+1
.11dd	20 ba 0b	                jsr  putscxy
.11e0	a2 3f		                ldx  #<sregs
.11e2	a0 12		                ldy  #>sregs+1
.11e4	20 ba 0b	                jsr  putscxy
.11e7	a2 49		                ldx  #<sregpc
.11e9	a0 12		                ldy  #>sregpc+1
.11eb	20 ba 0b	                jsr  putscxy
.11ee	a2 57		                ldx  #<sregz1
.11f0	a0 12		                ldy  #>sregz1+1
.11f2	20 ba 0b	                jsr  putscxy
.11f5	a2 66		                ldx  #<sregz2
.11f7	a0 12		                ldy  #>sregz2+1
.11f9	20 ba 0b	                jsr  putscxy
.11fc	58		                cli
.11fd	20 1a 0c	                jsr  clrinverse
.1200	ad 7a 12	                lda  regpch
.1203	48		                pha
.1204	ad 7c 12	                lda  regpcl
.1207	48		                pha
.1208	ac 77 12	                ldy  regy
.120b	ae 76 12	                ldx  regx
.120e	ad 78 12	                lda  regp
.1211	48		                pha
.1212	ad 75 12	                lda  rega
.1215	28		                plp
.1216	60		                rts
>1217	01 00 17	srega   .byte   colr,coln,line
>121a	20 41 3a 24	        .text   ' a:$' ;4,24
>121e	00 00 00	vala    .byte   0,0,0
>1221	01 06 17	sregx   .byte   colr,coln+6,line
>1224	20 58 3a 24	        .text   ' x:$' ;4,24
>1228	00 00 00	valx    .byte   0,0,0
>122b	01 0c 17	sregy   .byte   colr,coln+12,line
>122e	20 59 3a 24	        .text   ' y:$' ;4,24
>1232	00 00 00	valy    .byte   0,0,0
>1235	01 12 17	sregp   .byte   colr,coln+18,line
>1238	20 50 3a 24	        .text   ' p:$' ;4,24
>123c	00 00 00	valp    .byte   0,0,0
>123f	01 18 17	sregs   .byte   colr,coln+24,line
>1242	20 53 3a 24	        .text   ' s:$' ;4,24
>1246	00 00 00	vals    .byte   0,0,0
>1249	01 1e 17	sregpc  .byte   colr,coln+30,line
>124c	20 50 43 3a	        .text   ' pc:$' ;4,24
>1250	24
>1251	00 00		valpch  .byte   0,0
>1253	00 00 20 00	valpcl  .byte   0,0,32,0
>1257	01 03 18	sregz1  .byte   colr,coln+3,line+1
>125a	20 5a 50 31	        .text   ' zp1:$' ;4,24
>125e	3a 24
>1260	00 00		valz1h  .byte   0,0
>1262	00 00 20 00	valz1l  .byte   0,0,32,0
>1266	01 0f 18	sregz2  .byte   colr,coln+15,line+1
>1269	20 5a 50 32	        .text   ' zp2:$' ;4,24
>126d	3a 24
>126f	00 00		valz2h  .byte   0,0
>1271	00 00 20 00	valz2l  .byte   0,0,32,0
>1275	00		rega    .byte   0
>1276	00		regx    .byte   0
>1277	00		regy    .byte   0
>1278	00		regp    .byte   0
>1279	00		regs    .byte   0
>127a	00		regpch  .byte   0
>127b	00		regpch2 .byte   0
>127c	00		regpcl  .byte   0
>127d	00		regpcl2 .byte   0
>127e	00		vzp1h   .byte   0
>127f	00		vzp1l   .byte   0
>1280	00		vzp2h   .byte   0
>1281	00		vzp2l   .byte   0

;******  Return to file: libtest01.asm


;******  End of listing

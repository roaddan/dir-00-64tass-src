
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L libtest02.txt -o libtest02.prg libtest02.asm
; Sat Apr 12 00:39:52 2025

;Offset	;Hex		;Source

;******  Processing input file: libtest02.asm

="20250405-231555"	                Version = "20250405-231555"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c cb 09	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: libtest02.asm


;******  Processing file: strings_fr.asm

.0854			headera
>0854	20 20 20 20	               .text          "     Commodore 64 test de librarie "
>0858	20 c3 4f 4d 4d 4f 44 4f 52 45 20 36 34 20 54 45
>0868	53 54 20 44 45 20 4c 49 42 52 41 52 49 45 20
>0877	0d 00		               .byte     $0d,0
>0879	20 20 20 20	headerb        .text          "               libtest01 "
>087d	20 20 20 20 20 20 20 20 20 20 20 4c 49 42 54 45
>088d	53 54 30 31 20
>0892	0d		               .byte     $0d
>0893	20 20 20 20	               .text          "       (c) 2025 Daniel Lafrance"
>0897	20 20 20 28 43 29 20 32 30 32 35 20 c4 41 4e 49
>08a7	45 4c 20 cc 41 46 52 41 4e 43 45
>08b2	0d		               .byte     $0d
>08b3	20 20 20 20	               .text   format("       Version: %s",Version)
>08b7	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 35
>08c7	30 34 30 35 2d 32 33 31 35 35 35
>08d2	0d 00		               .byte     $0d,0
>08d4	0d		shortcuts      .byte     $0d
>08d5	91 91		               .byte     ucurkey,ucurkey
>08d7	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey
>08db	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey,rcurkey
>08df	1d
>08e0	20 d2 20 c1	               .text          " R A C C O U R C I S "
>08e4	20 c3 20 c3 20 cf 20 d5 20 d2 20 c3 20 c9 20 d3
>08f4	20
>08f5	0d		               .byte     $0d
>08f6	20 4c 49 42	               .text   format(" libtest01: SYS%05d ($%04X)",main, main)
>08fa	54 45 53 54 30 31 3a 20 d3 d9 d3 30 32 35 30 37
>090a	20 28 24 30 39 c3 c2 29
>0912	0d		               .byte     $0d
>0913	20 41 49 44	               .text   format(" aide.....: SYS%05d ($%04X)",aide, aide)
>0917	45 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 36 30 38
>0927	20 28 24 30 c1 33 30 29
>092f	0d		               .byte     $0d
>0930	20 43 4c 53	               .text   format(" cls......: SYS%05d ($%04X)",cls, cls)
>0934	2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 39 38 33
>0944	20 28 24 30 c2 c1 37 29
>094c	0d 00		               .byte     $0d,0
>094e	20 cc 41 4e	aidetext       .text   format(" Lancement: SYS%05d ($%04X)",libtest01, libtest01)
>0952	43 45 4d 45 4e 54 3a 20 d3 d9 d3 30 32 37 33 37
>0962	20 28 24 30 c1 c2 31 29
>096a	0d 0d		               .byte     $0d, $0d
>096c	20 20 20 20	                .text   format("    ex.: SYS%05d",libtest01)
>0970	45 58 2e 3a 20 d3 d9 d3 30 32 37 33 37
>097d	0d		                .byte     $0d
>097e	20 20 20 20	                .text   format("    for i=0to100:SYS%05d:next",libtest01)
>0982	46 4f 52 20 49 3d 30 54 4f 31 30 30 3a d3 d9 d3
>0992	30 32 37 33 37 3a 4e 45 58 54
>099c	0d 00		                .byte     $0d,0
>099e	20 c0 c0 c0	line            .byte     $20,192,192,192,192,192,192,192,192,192
>09a2	c0 c0 c0 c0 c0 c0
>09a8	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192,192
>09ac	c0 c0 c0 c0 c0 c0
>09b2	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192,192
>09b6	c0 c0 c0 c0 c0 c0
>09bc	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192
>09c0	c0 c0 c0 c0 c0
>09c5	0d 00		                .byte     $0d,0
>09c7	01 00 00 00	dataloc         .byte       1,0,0,0

;******  Return to file: libtest02.asm

.09cb			main
.09cb	20 87 0b	               jsr scrmaninit
.09ce	08		               php
.09cf	48		               pha
.09d0	a9 8e		               lda  #b_uppercase
.09d2	8d a6 0b	               sta  characterset
.09d5	20 d2 ff	               jsr  $ffd2
.09d8	68		               pla
.09d9	28		               plp
.09da	08		               php
.09db	48		               pha
.09dc	a9 8e		               lda  #b_uppercase
.09de	20 d2 ff	               jsr  $ffd2
.09e1	68		               pla
.09e2	28		               plp
.09e3	08		               php
.09e4	48		               pha
.09e5	a9 08		               lda  #$08
.09e7	20 d2 ff	               jsr  $ffd2
.09ea	68		               pla
.09eb	28		               plp
.09ec	20 b5 0c	               jsr  push
.09ef	48		               pha
.09f0	a9 05		               lda  #cvert
.09f2	8d 20 d0	               sta  $d020
.09f5	68		               pla
.09f6	48		               pha
.09f7	a9 06		               lda  #cbleu
.09f9	8d 21 d0	               sta  $d021
.09fc	68		               pla
.09fd	48		               pha
.09fe	a9 01		               lda  #cblanc
.0a00	8d 86 02	               sta  bascol
.0a03	68		               pla
.0a04	20 f4 0c	               jsr  pull
.0a07	20 b1 0a	               jsr libtest01
.0a0a	08		               php
.0a0b	48		               pha
.0a0c	a9 09		               lda  #$09
.0a0e	20 d2 ff	               jsr  $ffd2
.0a11	68		               pla
.0a12	28		               plp
.0a13	08		               php
.0a14	48		               pha
.0a15	a9 8e		               lda  #b_uppercase
.0a17	8d a6 0b	               sta  characterset
.0a1a	20 d2 ff	               jsr  $ffd2
.0a1d	68		               pla
.0a1e	28		               plp
.0a1f	20 b5 0c	               jsr  push
.0a22	a2 00		               ldx  #0
.0a24	a0 00		               ldy  #0
.0a26	20 de 0b	               jsr  gotoxy
.0a29	20 f4 0c	               jsr  pop
.0a2c	20 df 10	               jsr  anykey
.0a2f	60		               rts
.0a30			aide
.0a30	20 b5 0c	               jsr  push
.0a33	08		               php
.0a34	48		               pha
.0a35	a9 0e		               lda  #14
.0a37	8d a6 0b	               sta  characterset
.0a3a	20 d2 ff	               jsr  $ffd2
.0a3d	68		               pla
.0a3e	28		               plp
.0a3f	20 a7 0b	               jsr  cls
.0a42	20 b5 0c	               jsr  push
.0a45	a2 9e		               ldx  #<line
.0a47	a0 09		               ldy  #>line
.0a49	20 c4 0b	               jsr  puts
.0a4c	20 f4 0c	               jsr  pull
.0a4f	20 b5 0c	               jsr  push
.0a52	a2 54		               ldx  #<headera
.0a54	a0 08		               ldy  #>headera
.0a56	20 c4 0b	               jsr  puts
.0a59	20 f4 0c	               jsr  pull
.0a5c	20 b5 0c	               jsr  push
.0a5f	a2 79		               ldx  #<headerb
.0a61	a0 08		               ldy  #>headerb
.0a63	20 c4 0b	               jsr  puts
.0a66	20 f4 0c	               jsr  pull
.0a69	20 b5 0c	               jsr  push
.0a6c	a2 9e		               ldx  #<line
.0a6e	a0 09		               ldy  #>line
.0a70	20 c4 0b	               jsr  puts
.0a73	20 f4 0c	               jsr  pull
.0a76	20 b5 0c	               jsr  push
.0a79	a2 9e		               ldx  #<line
.0a7b	a0 09		               ldy  #>line
.0a7d	20 c4 0b	               jsr  puts
.0a80	20 f4 0c	               jsr  pull
.0a83	20 b5 0c	               jsr  push
.0a86	a2 d4		               ldx  #<shortcuts
.0a88	a0 08		               ldy  #>shortcuts
.0a8a	20 c4 0b	               jsr  puts
.0a8d	20 f4 0c	               jsr  pull
.0a90	20 b5 0c	               jsr  push
.0a93	a2 4e		               ldx  #<aidetext
.0a95	a0 09		               ldy  #>aidetext
.0a97	20 c4 0b	               jsr  puts
.0a9a	20 f4 0c	               jsr  pull
.0a9d	20 b5 0c	               jsr  push
.0aa0	a2 9e		               ldx  #<line
.0aa2	a0 09		               ldy  #>line
.0aa4	20 c4 0b	               jsr  puts
.0aa7	20 f4 0c	               jsr  pull
.0aaa	20 df 10	               jsr  anykey
.0aad	20 f4 0c	               jsr  pop
.0ab0	60		               rts
.0ab1			libtest01
.0ab1	08		               php
.0ab2	48		               pha
.0ab3	20 a7 0b	               jsr  cls
.0ab6	a9 a6		               lda  #166
.0ab8	20 b5 0c	               jsr  push
.0abb	a2 c7		               ldx  #<dataloc
.0abd	a0 09		               ldy  #>dataloc
.0abf	20 4d 0c	               jsr  putscxy
.0ac2	20 f4 0c	               jsr  pull
.0ac5	48		               pha
.0ac6	a9 03		               lda  #ccyan
.0ac8	8d 86 02	               sta  bascol
.0acb	68		               pla
.0acc	20 5f 11	               jsr  showregs
.0acf	20 df 10	               jsr  anykey
.0ad2	20 21 0b	               jsr  victohighres
.0ad5	20 df 10	               jsr  anykey
.0ad8	20 5b 0b	               jsr  vicbmpclear
.0adb	20 df 10	               jsr  anykey
.0ade	20 3e 0b	               jsr  victonormal
.0ae1	48		               pha
.0ae2	a9 98		               lda  #<$0000+(40*23)
.0ae4	8d 7f 0e	               sta  loopcount
.0ae7	a9 03		               lda  #>$0000+(40*23)
.0ae9	8d 80 0e	               sta  loopcount+1
.0aec	68		               pla
.0aed	ad fe 0a	roll           lda  car
.0af0	20 be 0b	               jsr  putch
.0af3	20 5f 0e	               jsr  loop
.0af6	d0 f5		               bne  roll
.0af8	20 5f 11	               jsr  showregs
.0afb	68		out            pla
.0afc	28		               plp
.0afd	60		               rts
>0afe	20		car            .byte     32

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0aff	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0b03	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0b07			libtart

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-vicii.asm

.0b07			screendis
.0b07	08		               php
.0b08	48		               pha
.0b09	ad 11 d0	               lda  $d011
.0b0c	29 ef		               and  #%11101111
.0b0e	8d 11 d0	               sta  $d011
.0b11	68		               pla
.0b12	28		               plp
.0b13	60		               rts
.0b14			screenena
.0b14	08		               php
.0b15	48		               pha
.0b16	ad 11 d0	               lda  $d011
.0b19	09 10		               ora  #%00010000
.0b1b	8d 11 d0	               sta  $d011
.0b1e	68		               pla
.0b1f	28		               plp
.0b20	60		               rts
=8192			bmpram = 8192
.0b21			victohighres
.0b21	08		               php
.0b22	48		               pha
.0b23	ad 11 d0	               lda  vicmiscfnc
.0b26	09 20		               ora  #%00100000     ; 32
.0b28	8d 11 d0	               sta  vicmiscfnc
.0b2b	ad 18 d0	               lda  vicmemptr
.0b2e	09 08		               ora  #%00001000     ; $08
.0b30	8d 18 d0	               sta  vicmemptr
.0b33	a9 ff		               lda  #$ff           ; 255
.0b35	85 37		               sta  $0037
.0b37	a9 1f		               lda  #$1f           ; 31
.0b39	85 38		               sta  $0038
.0b3b	68		               pla
.0b3c	28		               plp
.0b3d	60		               rts
.0b3e			victonormal
.0b3e	08		               php
.0b3f	48		               pha
.0b40	ad 11 d0	               lda  vicmiscfnc
.0b43	29 df		               and  #%11011111     ; 233
.0b45	8d 11 d0	               sta  vicmiscfnc
.0b48	ad 18 d0	               lda  vicmemptr
.0b4b	29 f7		               and  #%11110111     ; $08
.0b4d	8d 18 d0	               sta  vicmemptr
.0b50	a9 00		               lda  #$00
.0b52	85 37		               sta  $0037
.0b54	a9 a0		               lda  #$a0
.0b56	85 38		               sta  $0038
.0b58	68		               pla
.0b59	28		               plp
.0b5a	60		               rts
.0b5b			vicbmpclear
.0b5b	20 b5 0c	               jsr  push
.0b5e	20 a7 0b	               jsr  cls                 ; Efface la mémoire caractères qui est
.0b61	a9 00		               lda  #<8192              ; Place le LSB de 8192 ...
.0b63	85 fb		               sta  zpage1              ; ... dans le lsb de zpage1.
.0b65	a9 20		               lda  #>8192              ; Place le MSB de 8192 ...
.0b67	85 fc		               sta  zpage1+1            ; ... dans le Msb de zpage1.
.0b69	48		               pha
.0b6a	a9 ff		               lda  #<$0000+(8191)
.0b6c	8d 7f 0e	               sta  loopcount
.0b6f	a9 1f		               lda  #>$0000+(8191)
.0b71	8d 80 0e	               sta  loopcount+1
.0b74	68		               pla
.0b75	a0 00		               ldy  #$00
.0b77	a9 01		next           lda  #$01
.0b79	91 fb		               sta  (zpage1),y
.0b7b	20 bc 0d	               jsr  inczpage1
.0b7e	20 5f 0e	               jsr  loop
.0b81	d0 f4		               bne  next
.0b83	20 f4 0c	               jsr  pop
.0b86	60		               rts

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0b87			scrmaninit
.0b87	20 b5 0c	               jsr  push
.0b8a	a9 06		               lda  #vbleu
.0b8c	8d 21 d0	               sta  vicbackcol
.0b8f	a9 05		               lda  #vvert
.0b91	8d 20 d0	               sta  vicbordcol
.0b94	a9 01		               lda  #vblanc
.0b96	8d 86 02	               sta  bascol
.0b99	ad 00 04	               lda  scrnram
.0b9c	8d 00 04	               sta  scrnram
.0b9f	20 a7 0b	               jsr  cls
.0ba2	20 f4 0c	               jsr  pop
.0ba5	60		               rts
>0ba6	8e		characterset   .byte b_uppercase
.0ba7			cls
.0ba7	08		               php
.0ba8	48		               pha
.0ba9	a9 93		               lda  #$93
.0bab	20 be 0b	               jsr  putch
.0bae	68		               pla
.0baf	28		               plp
.0bb0	60		               rts
.0bb1			putnch
.0bb1	08		               php
.0bb2	e0 00		               cpx  #$00
.0bb4	f0 06		               beq  out
.0bb6	20 d2 ff	again          jsr  $ffd2
.0bb9	ca		               dex
.0bba	d0 fa		               bne  again
.0bbc	28		out            plp
.0bbd	60		               rts
.0bbe			putch
.0bbe	08		               php
.0bbf	20 d2 ff	               jsr  $ffd2
.0bc2	28		               plp
.0bc3	60		               rts
.0bc4			puts
.0bc4	20 b5 0c	               jsr  push
.0bc7	86 fb		               stx  zpage1
.0bc9	84 fc		               sty  zpage1+1
.0bcb	a0 00		               ldy  #0
.0bcd	b1 fb		next           lda  (zpage1),y
.0bcf	f0 09		               beq  exit
.0bd1	20 be 0b	               jsr  putch
.0bd4	20 bc 0d	               jsr  inczp1
.0bd7	4c cd 0b	               jmp  next
.0bda	20 f4 0c	exit           jsr  pop
.0bdd	60		               rts
.0bde			gotoxy
.0bde	08		               php
.0bdf	18		               clc
.0be0	8a		               txa
.0be1	48		               pha
.0be2	98		               tya
.0be3	aa		               tax
.0be4	68		               pla
.0be5	a8		               tay
.0be6	20 f0 ff	               jsr  kplot
.0be9	28		               plp
.0bea	60		               rts
.0beb			cursor
=$0286			bascol    =    $0286
.0beb	08		               php            ;tourlou
.0bec	48		               pha
.0bed	90 12		               bcc  restore
.0bef	20 f0 ff	               jsr  kplot
.0bf2	8c 13 0c	               sty  cx
.0bf5	8e 14 0c	               stx  cy
.0bf8	ad 86 02	               lda  bascol
.0bfb	8d 15 0c	               sta  bcol
.0bfe	4c 10 0c	               jmp  out
.0c01	ae 14 0c	restore        ldx  cy
.0c04	ac 13 0c	               ldy  cx
.0c07	20 f0 ff	               jsr  kplot
.0c0a	ad 15 0c	               lda  bcol
.0c0d	8d 86 02	               sta  bascol
.0c10	68		out            pla
.0c11	28		               plp
.0c12	60		               rts
>0c13	00		cx   .byte     $00
>0c14	00		cy   .byte     $00
>0c15	00		bcol .byte     $00
.0c16			cursave
.0c16	08		               php
.0c17	38		               sec
.0c18	20 eb 0b	               jsr  cursor
.0c1b	28		               plp
.0c1c	60		               rts
.0c1d			curput
.0c1d	08		               php
.0c1e	18		               clc
.0c1f	20 eb 0b	               jsr  cursor
.0c22	28		               plp
.0c23	60		               rts
.0c24			putsxy
.0c24	20 b5 0c	               jsr  push
.0c27	86 fb		               stx  zpage1
.0c29	84 fc		               sty  zpage1+1
.0c2b	a0 00		               ldy  #$00
.0c2d	b1 fb		               lda  (zpage1),y
.0c2f	aa		               tax
.0c30	20 bc 0d	               jsr  inczp1
.0c33	b1 fb		               lda  (zpage1),y
.0c35	a8		               tay
.0c36	20 de 0b	               jsr  gotoxy
.0c39	20 bc 0d	               jsr  inczp1
.0c3c	a6 fb		               ldx  zpage1
.0c3e	a4 fc		               ldy  zpage1+1
.0c40	20 c4 0b	               jsr  puts
.0c43	20 f4 0c	               jsr  pop
.0c46	60		               rts
>0c47	00 00		straddr   .word     $00
>0c49	00		px        .byte     $00
>0c4a	00		py        .byte     $00
>0c4b	00 00		zp1       .word     $00
.0c4d			putscxy
.0c4d	20 b5 0c	               jsr  push
.0c50	84 fc		               sty  zpage1+1
.0c52	86 fb		               stx  zpage1
.0c54	ad 86 02	               lda  bascol
.0c57	8d 77 0c	               sta  bc
.0c5a	a0 00		               ldy #$00
.0c5c	b1 fb		               lda  (zpage1),y
.0c5e	8d 86 02	               sta  bascol
.0c61	20 bc 0d	               jsr  inczp1
.0c64	a6 fb		               ldx  zpage1
.0c66	a4 fc		               ldy  zpage1+1
.0c68	20 24 0c	               jsr  putsxy
.0c6b	ad 77 0c	               lda  bc
.0c6e	8d 86 02	               sta  bascol
.0c71	20 f4 0c	               jsr  pop
.0c74	60		               rts
>0c75	00 00		straddr  .word      $00
>0c77	00		bc       .byte      $00
>0c78	00 00		zp1      .word      $00
.0c7a			putrahex
.0c7a	08		               php
.0c7b	48		               pha
.0c7c	20 e7 0e	               jsr  atohex
.0c7f	a9 86		               lda  #<a2hexstr
.0c81	a0 0e		               ldy  #>a2hexstr
.0c83	20 c4 0b	               jsr  puts
.0c86	68		               pla
.0c87	28		               plp
.0c88	60		               rts
.0c89			kputrahexxy
.0c89			bputrahexxy
.0c89			putrahexxy
.0c89	08		               php
.0c8a	20 e7 0e	               jsr  atohex
.0c8d	a9 83		               lda  #<a2hexpos
.0c8f	a0 0e		               ldy  #>a2hexpos
.0c91	20 24 0c	               jsr  putsxy
.0c94	68		               pla
.0c95	28		               plp
.0c96	60		               rts
.0c97			putrahexcxy
.0c97	08		               php
.0c98	20 e7 0e	               jsr  atohex
.0c9b	a9 83		               lda  #<a2hexpos
.0c9d	a0 0e		               ldy  #>a2hexpos
.0c9f	20 4d 0c	               jsr  putscxy
.0ca2	68		               pla
.0ca3	28		               plp
.0ca4	60		               rts
.0ca5			setinverse
.0ca5	48		               pha
.0ca6	a9 12		               lda  #$12
.0ca8	20 d2 ff	               jsr  $ffd2
.0cab	68		               pla
.0cac	60		               rts
.0cad			clrinverse
.0cad	48		               pha
.0cae	a9 92		               lda  #$92
.0cb0	20 d2 ff	               jsr  $ffd2
.0cb3	68		               pla
.0cb4	60		               rts

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.0cb5			push
.0cb5	08		          php            ; stack : flg, pcl, pch
.0cb6	78		          sei
.0cb7	8d f1 0c	          sta  ra        ; save a
.0cba	68		          pla            ; stack : pcl, pch
.0cbb	8d f0 0c	          sta  rp        ; save rp
.0cbe	68		          pla            ; stack : pch
.0cbf	8d f2 0c	          sta  pc        ; save pcl
.0cc2	68		          pla            ; stack : -
.0cc3	8d f3 0c	          sta  pc+1      ; save pch
.0cc6	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0cc8	48		          pha            ; stack : zp1l
.0cc9	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0ccb	48		          pha            ; stack : zp1h, zp1l
.0ccc	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0cce	48		          pha            ; stack : zp2l, zp1h, zp1l
.0ccf	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0cd1	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0cd2	ad f0 0c	          lda  rp        ; get rp
.0cd5	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0cd6	ad f1 0c	          lda  ra        ; get a
.0cd9	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0cda	8a		          txa            ; get x
.0cdb	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0cdc	98		          tya            ; get y
.0cdd	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0cde	ad f3 0c	          lda  pc+1      ; get pch
.0ce1	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ce2	ad f2 0c	          lda  pc        ; get pcl
.0ce5	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ce6	ad f0 0c	          lda  rp        ; get rp
.0ce9	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0cea	ad f1 0c	          lda  ra        ; get a
.0ced	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0cee	58		          cli
.0cef	60		          rts
>0cf0	00		rp        .byte     0
>0cf1	00		ra        .byte     0
>0cf2	00 00		pc        .word     0
.0cf4			pull
.0cf4			pop
.0cf4	78		          sei
.0cf5	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0cf6	8d 29 0d	          sta  pc        ; save pcl
.0cf9	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0cfa	8d 2a 0d	          sta  pc+1      ; save pch
.0cfd	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0cfe	a8		          tay            ; set y
.0cff	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0d00	aa		          tax            ; set x
.0d01	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0d02	8d 28 0d	          sta  ra        ; save a
.0d05	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0d06	8d 27 0d	          sta  rp        ; save rp
.0d09	68		          pla            ; stack : zp2l, zp1h, zp1l
.0d0a	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0d0c	68		          pla            ; stack : zp1h, zp1l
.0d0d	85 fd		          sta  zpage2    ; get zpage2 High byte
.0d0f	68		          pla            ; stack : zp1l
.0d10	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0d12	68		          pla            ; stack :
.0d13	85 fb		          sta  zpage1    ; get zpage1 High byte
.0d15	ad 2a 0d	          lda  pc+1      ; get pch
.0d18	48		          pha            ; stack : pch
.0d19	ad 29 0d	          lda  pc
.0d1c	48		          pha            ; stack : pcl, pch
.0d1d	ad 27 0d	          lda  rp        ; get rp
.0d20	48		          pha            ; stack : rp, pcl, pch
.0d21	ad 28 0d	          lda  ra        ; set ra
.0d24	58		          cli
.0d25	28		          plp            ; stack : pcl, pch
.0d26	60		          rts
>0d27	00		rp        .byte     0
>0d28	00		ra        .byte     0
>0d29	00 00		pc        .word     0

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0d2b			blkfill
.0d2b	20 b5 0c	bf0            jsr  push
.0d2e	20 ea 0d	               jsr  savezp1
.0d31	84 fc		               sty  zpage1+1
.0d33	a0 00		               ldy  #$00
.0d35	84 fb		               sty  zpage1
.0d37	91 fb		bf1            sta  (zpage1),y
.0d39	c8		               iny
.0d3a	d0 fb		               bne  bf1
.0d3c	20 f9 0d	               jsr  restzp1
.0d3f	20 f4 0c	               jsr  pop
.0d42	60		               rts
.0d43			memfill
.0d43	20 b5 0c	               jsr  push
.0d46	20 2b 0d	mf1            jsr  blkfill
.0d49	c8		               iny
.0d4a	ca		               dex
.0d4b	d0 f9		               bne  mf1
.0d4d	20 f4 0c	               jsr  pop
.0d50	60		               rts
.0d51			memmove
.0d51	20 b5 0c	               jsr  push
.0d54	ba		               tsx            ; On se crée un pointeur ...
.0d55	8a		               txa
.0d56	18		               clc
.0d57	69 0b		               adc  #11
.0d59	a8		               tay
.0d5a	a2 06		               ldx  #$06
.0d5c	b9 00 01	nextbyte       lda  $0100,y
.0d5f	99 ab 0d	               sta  words,y
.0d62	c8		               iny
.0d63	ca		               dex
.0d64	d0 f6		               bne  nextbyte
.0d66	ad ab 0d	               lda  s
.0d69	8d 82 0d	               sta  source+1
.0d6c	ad ac 0d	               lda  s+1
.0d6f	8d 83 0d	               sta  source+2
.0d72	ad ad 0d	               lda  d
.0d75	8d 7f 0d	               sta  destin+1
.0d78	ad ae 0d	               lda  d+1
.0d7b	8d 80 0d	               sta  destin+2
.0d7e	ad ff ff	destin         lda  $ffff
.0d81	8d ff ff	source         sta  $ffff
.0d84	ee 7f 0d	               inc  destin+1
.0d87	d0 03		               bne  src
.0d89	ee 80 0d	               inc  destin+2
.0d8c	ee 82 0d	src            inc  source+1
.0d8f	d0 03		               bne  cnt
.0d91	ee 83 0d	               inc  source+2
.0d94	ad af 0d	cnt            lda  compte
.0d97	d0 08		               bne  decit
.0d99	ad b0 0d	               lda  compte+1
.0d9c	f0 09		               beq  fini
.0d9e	ce b0 0d	               dec  compte+1
.0da1	ce af 0d	decit          dec  compte
.0da4	4c 7e 0d	               jmp  destin
.0da7	20 f4 0c	fini           jsr  pop
.0daa	60		               rts
.0dab			words
>0dab	00 00		s         .word     $0000
>0dad	00 00		d         .word     $0000
>0daf	00 00		compte    .word     $0000
.0db1			decword
.0db1	20 b5 0c	               jsr  push
.0db4	86 fd		               stx  zpage2
.0db6	84 fe		               sty  zpage2+1
.0db8	20 f4 0c	               jsr  pop
.0dbb	60		               rts
.0dbc			inczpage1
.0dbc			inczp1
.0dbc	08		               php
.0dbd	48		               pha
.0dbe	e6 fb		               inc  zpage1
.0dc0	a5 fb		               lda  zpage1
.0dc2	d0 02		               bne  nopage
.0dc4	e6 fc		               inc  zpage1+1
.0dc6	68		nopage         pla
.0dc7	28		               plp
.0dc8	60		               rts
.0dc9			deczpage1
.0dc9			deczp1
.0dc9	08		                php
.0dca	48		                pha
.0dcb	c6 fb		                dec  zpage1
.0dcd	d0 02		                bne  nopage
.0dcf	c6 fc		                dec  zpage1+1
.0dd1	68		nopage          pla
.0dd2	28		                plp
.0dd3	60		                rts
.0dd4			inczpage2
.0dd4			inczp2
.0dd4	08		               php
.0dd5	48		               pha
.0dd6	e6 fd		               inc  zpage2
.0dd8	a5 fd		               lda  zpage2
.0dda	d0 02		               bne  nopage
.0ddc	e6 fe		               inc  zpage2+1
.0dde	68		nopage         pla
.0ddf	28		               plp
.0de0	60		               rts
.0de1			deczpage2
.0de1			deczp2
.0de1	08		               php
.0de2	c6 fd		               dec  zpage2
.0de4	d0 02		               bne  nopage
.0de6	c6 fe		               dec  zpage2+1
.0de8	28		nopage         plp
.0de9	60		               rts
.0dea			savezp1
.0dea	08		               php
.0deb	48		               pha
.0dec	a5 fb		               lda  zpage1
.0dee	8d 7b 0e	               sta  zp1
.0df1	a5 fc		               lda  zpage1+1
.0df3	8d 7c 0e	               sta  zp1+1
.0df6	68		               pla
.0df7	28		               plp
.0df8	60		               rts
.0df9			restzp1
.0df9	08		               php
.0dfa	48		               pha
.0dfb	ad 7b 0e	               lda zp1
.0dfe	85 fb		               sta zpage1
.0e00	ad 7c 0e	               lda zp1+1
.0e03	85 fc		               sta zpage1+1
.0e05	68		               pla
.0e06	28		               plp
.0e07	60		               rts
.0e08			savezp2
.0e08	08		         php
.0e09	48		         pha
.0e0a	a5 fd		         lda zpage2
.0e0c	8d 7d 0e	         sta zp2
.0e0f	a5 fe		         lda zpage2+1
.0e11	8d 7e 0e	         sta zp2+1
.0e14	68		         pla
.0e15	28		         plp
.0e16	60		         rts
.0e17			restzp2
.0e17	08		                php
.0e18	48		                pha
.0e19	ad 7d 0e	                lda  zp2
.0e1c	85 fd		                sta  zpage2
.0e1e	ad 7e 0e	                lda  zp2+1
.0e21	85 fe		                sta  zpage2+1
.0e23	68		                pla
.0e24	28		                plp
.0e25	60		                rts
.0e26			xy2addr
.0e26	08		                php
.0e27	48		                pha
.0e28	8a		                txa
.0e29	48		                pha
.0e2a	98		                tya
.0e2b	48		                pha
.0e2c	ad 76 0e	                lda     addr1+1
.0e2f	8d 78 0e	                sta     addr2+1
.0e32	ad 75 0e	                lda     addr1
.0e35	8d 77 0e	                sta     addr2
.0e38	c0 00		                cpy     #$00
.0e3a	f0 0f		                beq     addx
.0e3c	18		moreline        clc
.0e3d	6d 74 0e	                adc     ymult
.0e40	90 03		                bcc     norepy
.0e42	ee 78 0e	                inc     addr2+1
.0e45	8d 77 0e	norepy          sta     addr2
.0e48	88		                dey
.0e49	d0 f1		                bne     moreline
.0e4b	8a		addx            txa
.0e4c	18		                clc
.0e4d	6d 77 0e	                adc     addr2
.0e50	90 03		                bcc     thatsit
.0e52	ee 78 0e	                inc     addr2+1
.0e55	8d 77 0e	thatsit         sta     addr2
.0e58	68		                pla
.0e59	a8		                tay
.0e5a	68		                pla
.0e5b	aa		                tax
.0e5c	68		                pla
.0e5d	28		                plp
.0e5e	60		                rts
.0e5f			loop
.0e5f	ce 7f 0e	               dec  loopcount
.0e62	d0 03		               bne  norep
.0e64	ce 80 0e	               dec  loopcount+1
.0e67	ad 7f 0e	norep          lda  loopcount
.0e6a	c9 00		               cmp  #$00
.0e6c	d0 05		               bne  out
.0e6e	4d 80 0e	               eor  loopcount+1
.0e71	c9 ff		               cmp  #$ff
.0e73	60		out            rts
>0e74	28		ymult          .byte     40
>0e75	00 00		addr1          .word     $0000
>0e77	00 00		addr2          .word     $0000
>0e79	00 00		bytecnt        .word     $0000
>0e7b	00 00		zp1            .word   $0000
>0e7d	00 00		zp2            .word   $0000
>0e7f	00 00		loopcount      .word     $0000

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>0e81	01		a2hexcol       .byte     1              ; pour aputscxy
>0e82	00		a2hexbkcol     .byte     %00000000
.0e83			a2hexpos
>0e83	00		a2hexpx        .byte     0              ; pour aputsxy
>0e84	00		a2hexpy        .byte     0
>0e85	24		a2hexprefix    .byte     "$"            ; pour aputs
>0e86	00 00		a2hexstr       .word     $00
>0e88	00 00		               .word     $00
>0e8a	00		               .byte     0              ; 0 end string
>0e8b	30 30 30 30	abin           .null     "00000000"
>0e8f	30 30 30 30 00
>0e94	20 20 20 00	adec           .null     "   "
.0e98			putahexfmtxy
.0e98	20 b5 0c	               jsr  push
.0e9b	20 e7 0e	               jsr  atohex
.0e9e	ae 83 0e	               ldx  a2hexpx
.0ea1	ac 84 0e	               ldy  a2hexpy
.0ea4	20 de 0b	               jsr  gotoxy
.0ea7	a2 85		               ldx  #<a2hexprefix
.0ea9	a0 0e		               ldy  #>a2hexprefix
.0eab	20 c4 0b	               jsr  puts
.0eae	20 f4 0c	               jsr  pop
.0eb1	60		               rts
.0eb2			putahexfmt
.0eb2	20 b5 0c	               jsr  push
.0eb5	20 e7 0e	               jsr  atohex
.0eb8	a2 85		               ldx  #<a2hexprefix
.0eba	a0 0e		               ldy  #>a2hexprefix
.0ebc	20 c4 0b	               jsr  puts
.0ebf	20 f4 0c	               jsr  pop
.0ec2	60		               rts
.0ec3			putahex
.0ec3	20 b5 0c	               jsr  push
.0ec6	20 e7 0e	               jsr  atohex
.0ec9	a2 86		               ldx  #<a2hexstr
.0ecb	a0 0e		               ldy  #>a2hexstr
.0ecd	20 c4 0b	               jsr  puts
.0ed0	20 f4 0c	               jsr  pop
.0ed3	60		               rts
.0ed4			nibtohex
.0ed4	08		               php
.0ed5	29 0f		               and  #$0f
.0ed7	f8		               sed
.0ed8	18		               clc
.0ed9	69 90		               adc  #$90
.0edb	69 40		               adc  #$40
.0edd	d8		               cld
.0ede	28		               plp
.0edf	60		               rts
.0ee0			lsra4bits
.0ee0	08		               php
.0ee1	4a		               lsr
.0ee2	4a		               lsr
.0ee3	4a		               lsr
.0ee4	4a		               lsr
.0ee5	28		               plp
.0ee6	60		               rts
.0ee7			atohex
.0ee7	08		               php
.0ee8	48		               pha
.0ee9	48		               pha
.0eea	20 e0 0e	               jsr  lsra4bits
.0eed	20 d4 0e	               jsr  nibtohex
.0ef0	8d 86 0e	               sta  a2hexstr
.0ef3	68		               pla
.0ef4	20 d4 0e	               jsr  nibtohex
.0ef7	8d 87 0e	               sta  a2hexstr+1
.0efa	a9 00		               lda  #$00                ; set end of string
.0efc	8d 88 0e	               sta  a2hexstr+2
.0eff	68		               pla
.0f00	28		               plp
.0f01	60		               rts
.0f02			xy2hex
.0f02	20 b5 0c	               jsr  push
.0f05	20 e7 0e	               jsr  atohex
.0f08	8a		               txa
.0f09	48		               pha
.0f0a	20 e0 0e	               jsr  lsra4bits
.0f0d	20 d4 0e	               jsr  nibtohex
.0f10	8d 86 0e	               sta  a2hexstr
.0f13	68		               pla
.0f14	20 d4 0e	               jsr  nibtohex
.0f17	8d 87 0e	               sta  a2hexstr+1
.0f1a	98		               tya
.0f1b	48		               pha
.0f1c	20 e0 0e	               jsr  lsra4bits
.0f1f	20 d4 0e	               jsr  nibtohex
.0f22	8d 88 0e	               sta  a2hexstr+2
.0f25	68		               pla
.0f26	20 d4 0e	               jsr  nibtohex
.0f29	8d 89 0e	               sta  a2hexstr+3
.0f2c	a9 00		               lda  #$00                ; 0 ended string
.0f2e	8d 8a 0e	               sta  a2hexstr+4
.0f31	20 f4 0c	               jsr  pop
.0f34			atobin
.0f34	20 b5 0c	               jsr  push
.0f37	a2 08		               ldx  #8
.0f39	a0 00		               ldy  #0
.0f3b	18		               clc
.0f3c	2a		nextbit        rol
.0f3d	48		               pha
.0f3e	69 00		               adc  #$00
.0f40	29 01		               and  #$01
.0f42	20 d4 0e	               jsr  nibtohex
.0f45	99 8b 0e	               sta  abin,y
.0f48	68		               pla
.0f49	c8		               iny
.0f4a	ca		               dex
.0f4b	d0 ef		               bne  nextbit
.0f4d	a9 00		               lda  #0
.0f4f	99 8b 0e	               sta  abin,y
.0f52	20 f4 0c	               jsr  pull
.0f55	60		               rts
.0f56			putabin
.0f56	20 34 0f	               jsr     atobin
.0f59	20 b5 0c	               jsr     push
.0f5c	a2 8b		               ldx     #<abin
.0f5e	a0 0e		               ldy     #>abin
.0f60	20 c4 0b	               jsr     puts
.0f63	20 f4 0c	               jsr     pop
.0f66	60		               rts
.0f67			printabin
.0f67	20 b5 0c	               jsr     push
.0f6a	a2 8b		               ldx     #<abin
.0f6c	a0 0e		               ldy     #>abin
.0f6e	20 c4 0b	               jsr     puts
.0f71	20 f4 0c	               jsr     pop
.0f74	60		               rts
.0f75			putabinfmt
.0f75	08		               php
.0f76	48		               pha
.0f77	a9 25		               lda     #"%"
.0f79	20 be 0b	               jsr     putch
.0f7c	68		               pla
.0f7d	20 56 0f	               jsr     putabin
.0f80	28		               plp
.0f81	60		               rts
.0f82			putabinxy
.0f82	20 de 0b	               jsr     gotoxy
.0f85	20 56 0f	               jsr     putabin
.0f88	60		               rts
.0f89			putabinfmtxy
.0f89	20 de 0b	               jsr     gotoxy
.0f8c	20 75 0f	               jsr     putabinfmt
.0f8f	60		               rts
.0f90			atodec
.0f90	20 b5 0c	               jsr  push
.0f93	f8		               sed            ; On se place en mode décimal.
.0f94	aa		               tax            ; On déplace a dans x.
.0f95	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.0f97	a9 00		               lda  #$00      ; 0 dans A.
.0f99	18		nextbit        clc            ; Bit carry a 0.
.0f9a	69 01		               adc  #$01      ; Ajoute 1 a A.
.0f9c	90 01		               bcc  decx      ; Pas de carry, pas de report.
.0f9e	c8		               iny            ; On incrémente Y
.0f9f	ca		decx           dex            ; X=X-1
.0fa0	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.0fa2	48		               pha            ; A sur le stack.
.0fa3	98		               tya            ; Y dans A (MSB)
.0fa4	20 d4 0e	               jsr  nibtohex  ; a hex petsci ...
.0fa7	8d 94 0e	               sta  adec      ; ... dans tampon.
.0faa	68		               pla            ; Récupere A
.0fab	48		               pha            ;
.0fac	20 d4 0e	               jsr  nibtohex
.0faf	8d 96 0e	               sta  adec+2
.0fb2	68		               pla
.0fb3	6a		               ror
.0fb4	6a		               ror
.0fb5	6a		               ror
.0fb6	6a		               ror
.0fb7	20 d4 0e	               jsr  nibtohex
.0fba	8d 95 0e	               sta  adec+1
.0fbd	d8		               cld            ; On revient en mode binaire.
.0fbe	20 f4 0c	               jsr  pull
.0fc1	60		               rts
.0fc2			putadec
.0fc2	20 b5 0c	               jsr  push
.0fc5	20 90 0f	               jsr  atodec
.0fc8	a2 94		               ldx  #<adec
.0fca	a0 0e		               ldy  #>adec+1
.0fcc	20 c4 0b	               jsr  puts
.0fcf	20 f4 0c	               jsr  pop
.0fd2	60		               rts

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>0fd3	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>0fd7	00 00 00 00 00 00 00 00 00 0d 00 00
>0fe3	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>0fe7	00 00 00 00 00 00 00 00 00 00 00 00
>0ff3	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>0ff7	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1003	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1007	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1013	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1017	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>1023	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1027	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>1033	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1037	00 00 00 00 00 00 00 00 00 00 00 00
>1043	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1047	00 00 00 00 00 00 00 00 00 00 00 00
>1053	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1057	00 00 00 00 00 00 00 00 00 00 00 00
>1063	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1067	00 00 00 00 00 00 00 00 00 00 00 00
>1073	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>1077	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1083	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1087	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1093	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1097	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>10a3	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>10a7	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>10b3	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>10b7	00 00 00 00 00 00 00 00 00 00 00 00
>10c3	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>10c7	00 00 00 00 00 00 00 00 00 00 00 00
.10d3			waitstop
.10d3	20 b5 0c	               jsr  push
.10d6	20 ed f6	wait           jsr  k_stop
.10d9	d0 fb		               bne  wait
.10db	20 f4 0c	               jsr  pop
.10de	60		               rts
.10df			anykey
.10df	08		               php
.10e0	48		               pha
.10e1	a5 cb		nokey          lda 203
.10e3	c9 40		               cmp #64
.10e5	f0 fa		               beq nokey
.10e7	20 ed 10	               jsr releasekey
.10ea	68		               pla
.10eb	28		               plp
.10ec	60		               rts
.10ed			releasekey
.10ed	08		               php
.10ee	48		               pha
.10ef	a5 cb		keypressed     lda 203
.10f1	c9 40		               cmp #64
.10f3	d0 fa		               bne keypressed
.10f5	68		               pla
.10f6	28		               plp
.10f7	60		               rts
.10f8			getkey
.10f8	20 e4 ff	again          jsr  getin
.10fb	c9 00		               cmp  #0
.10fd	f0 f9		               beq  again
.10ff	60		               rts
.1100			kbflushbuff
.1100	08		               php
.1101	48		               pha
.1102	20 e4 ff	again          jsr  getin
.1105	c9 00		               cmp  #0
.1107	d0 f9		               bne  again
.1109	68		               pla
.110a	28		               plp
.110b	60		               rts
.110c			waitkey
.110c	20 b5 0c	               jsr  push
.110f	8d 5d 11	               sta  thekey
.1112	20 e4 ff	nope           jsr  getin
.1115	20 d2 ff	               jsr  chrout
.1118	cd 5d 11	               cmp  thekey
.111b	d0 f5		               bne  nope
.111d	20 d2 ff	               jsr  chrout
.1120	20 f4 0c	               jsr  pop
.1123	60		               rts
.1124			waitspace
.1124	20 b5 0c	               jsr  push
.1127	a9 7f		wait           lda  #$7f  ;%01111111
.1129	8d 00 dc	               sta  $dc00
.112c	ad 01 dc	               lda  $dc01
.112f	29 10		               and  #$10  ;mask %00010000
.1131	d0 f4		               bne  wait
.1133	20 f4 0c	               jsr  pop
.1136			waitsstop
.1136	20 b5 0c	               jsr  push
.1139	20 ed f6	wait           jsr  k_stop  ;%01111111
.113c	d0 fb		               bne  wait
.113e	20 f4 0c	               jsr  pop
.1141			waitreturn
.1141	20 b5 0c	               jsr  push
.1144	ad 5e 11	               lda  thecount
.1147	8d 00 04	               sta  scrnram
.114a	a9 02		               lda  #$02
.114c	8d 00 d8	               sta  colorram
.114f	20 e4 ff	nope           jsr  getin
.1152	c9 0d		nohex          cmp  #$0d
.1154	d0 f9		               bne  nope
.1156	ee 5e 11	               inc  thecount
.1159	20 f4 0c	               jsr  pop
.115c	60		               rts
>115d	00		thekey         .byte   0
>115e	01		thecount       .byte   $01

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.115f			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.115f	20 b5 0c	                jsr push
.1162	08		                php
.1163	8d 23 13	                sta  rega
.1166	68		                pla
.1167	8d 26 13	                sta  regp
.116a	8e 24 13	                stx  regx
.116d	8c 25 13	                sty  regy
.1170	ba		                tsx
.1171	8e 27 13	                stx  regs
.1174	68		                pla
.1175	8d 2a 13	                sta  regpcl
.1178	8d 2b 13	                sta  regpcl2
.117b	68		                pla
.117c	8d 28 13	                sta  regpch
.117f	8d 29 13	                sta  regpch2
.1182	ad 23 13	                lda  rega
.1185	48		                pha
.1186	20 d4 0e	                jsr  nibtohex
.1189	8d cd 12	                sta  vala+1
.118c	68		                pla
.118d	20 e0 0e	                jsr  lsra4bits
.1190	20 d4 0e	                jsr  nibtohex
.1193	8d cc 12	                sta  vala
.1196	ad 25 13	                lda  regy
.1199	48		                pha
.119a	20 d4 0e	                jsr  nibtohex
.119d	8d e1 12	                sta  valy+1
.11a0	68		                pla
.11a1	20 e0 0e	                jsr  lsra4bits
.11a4	20 d4 0e	                jsr  nibtohex
.11a7	8d e0 12	                sta  valy
.11aa	ad 24 13	                lda  regx
.11ad	48		                pha
.11ae	20 d4 0e	                jsr  nibtohex
.11b1	8d d7 12	                sta  valx+1
.11b4	68		                pla
.11b5	20 e0 0e	                jsr  lsra4bits
.11b8	20 d4 0e	                jsr  nibtohex
.11bb	8d d6 12	                sta  valx
.11be	ad 26 13	                lda  regp
.11c1	48		                pha
.11c2	20 d4 0e	                jsr  nibtohex
.11c5	8d eb 12	                sta  valp+1
.11c8	68		                pla
.11c9	20 e0 0e	                jsr  lsra4bits
.11cc	20 d4 0e	                jsr  nibtohex
.11cf	8d ea 12	                sta  valp
.11d2	ad 27 13	                lda  regs
.11d5	48		                pha
.11d6	20 d4 0e	                jsr  nibtohex
.11d9	8d f5 12	                sta  vals+1
.11dc	68		                pla
.11dd	20 e0 0e	                jsr  lsra4bits
.11e0	20 d4 0e	                jsr  nibtohex
.11e3	8d f4 12	                sta  vals
.11e6	18		                clc
.11e7	ad 2b 13	                lda regpcl2
.11ea	69 01		                adc #$01
.11ec	8d 2b 13	                sta regpcl2
.11ef	ad 2b 13	                lda regpcl2
.11f2	d0 03		                bne noreport
.11f4	ee 29 13	                inc regpch2
.11f7	ad 29 13	    noreport    lda regpch2
.11fa	48		                pha
.11fb	20 d4 0e	                jsr  nibtohex
.11fe	8d 00 13	                sta  valpch+1
.1201	68		                pla
.1202	20 e0 0e	                jsr  lsra4bits
.1205	20 d4 0e	                jsr  nibtohex
.1208	8d ff 12	                sta  valpch
.120b	ad 2b 13	                lda  regpcl2
.120e	48		                pha
.120f	20 d4 0e	                jsr  nibtohex
.1212	8d 02 13	                sta  valpcl+1
.1215	68		                pla
.1216	20 e0 0e	                jsr  lsra4bits
.1219	20 d4 0e	                jsr  nibtohex
.121c	8d 01 13	                sta  valpcl
.121f	a5 fb		                lda  zpage1
.1221	48		                pha
.1222	20 d4 0e	                jsr  nibtohex
.1225	8d 10 13	                sta  valz1l
.1228	68		                pla
.1229	20 e0 0e	                jsr  lsra4bits
.122c	20 d4 0e	                jsr  nibtohex
.122f	8d 11 13	                sta  valz1l+1
.1232	a5 fc		                lda  zpage1+1
.1234	48		                pha
.1235	20 d4 0e	                jsr  nibtohex
.1238	8d 0e 13	                sta  valz1h
.123b	68		                pla
.123c	20 e0 0e	                jsr  lsra4bits
.123f	20 d4 0e	                jsr  nibtohex
.1242	8d 0f 13	                sta  valz1h+1
.1245	a5 fd		                lda  zpage2
.1247	48		                pha
.1248	20 d4 0e	                jsr  nibtohex
.124b	8d 1f 13	                sta  valz2l
.124e	68		                pla
.124f	20 e0 0e	                jsr  lsra4bits
.1252	20 d4 0e	                jsr  nibtohex
.1255	8d 20 13	                sta  valz2l+1
.1258	a5 fe		                lda  zpage2+1
.125a	48		                pha
.125b	20 d4 0e	                jsr  nibtohex
.125e	8d 1d 13	                sta  valz2h
.1261	68		                pla
.1262	20 e0 0e	                jsr  lsra4bits
.1265	20 d4 0e	                jsr  nibtohex
.1268	8d 1e 13	                sta  valz2h+1
.126b	20 a5 0c	                jsr  setinverse
.126e	78		                sei
.126f	a2 c5		                ldx  #<srega
.1271	a0 12		                ldy  #>srega+1
.1273	20 4d 0c	                jsr  putscxy
.1276	a2 cf		                ldx  #<sregx
.1278	a0 12		                ldy  #>sregx+1
.127a	20 4d 0c	                jsr  putscxy
.127d	a2 d9		                ldx  #<sregy
.127f	a0 12		                ldy  #>sregy+1
.1281	20 4d 0c	                jsr  putscxy
.1284	a2 e3		                ldx  #<sregp
.1286	a0 12		                ldy  #>sregp+1
.1288	20 4d 0c	                jsr  putscxy
.128b	a2 ed		                ldx  #<sregs
.128d	a0 12		                ldy  #>sregs+1
.128f	20 4d 0c	                jsr  putscxy
.1292	a2 f7		                ldx  #<sregpc
.1294	a0 12		                ldy  #>sregpc+1
.1296	20 4d 0c	                jsr  putscxy
.1299	a2 05		                ldx  #<sregz1
.129b	a0 13		                ldy  #>sregz1+1
.129d	20 4d 0c	                jsr  putscxy
.12a0	a2 14		                ldx  #<sregz2
.12a2	a0 13		                ldy  #>sregz2+1
.12a4	20 4d 0c	                jsr  putscxy
.12a7	58		                cli
.12a8	20 ad 0c	                jsr  clrinverse
.12ab	ad 28 13	                lda  regpch
.12ae	48		                pha
.12af	ad 2a 13	                lda  regpcl
.12b2	48		                pha
.12b3	ac 25 13	                ldy  regy
.12b6	ae 24 13	                ldx  regx
.12b9	ad 26 13	                lda  regp
.12bc	48		                pha
.12bd	ad 23 13	                lda  rega
.12c0	28		                plp
.12c1	20 f4 0c	                jsr pop
.12c4	60		                rts
>12c5	01 00 17	srega   .byte   colr,coln,line
>12c8	20 41 3a 24	        .text   ' a:$' ;4,24
>12cc	00 00 00	vala    .byte   0,0,0
>12cf	01 06 17	sregx   .byte   colr,coln+6,line
>12d2	20 58 3a 24	        .text   ' x:$' ;4,24
>12d6	00 00 00	valx    .byte   0,0,0
>12d9	01 0c 17	sregy   .byte   colr,coln+12,line
>12dc	20 59 3a 24	        .text   ' y:$' ;4,24
>12e0	00 00 00	valy    .byte   0,0,0
>12e3	01 12 17	sregp   .byte   colr,coln+18,line
>12e6	20 50 3a 24	        .text   ' p:$' ;4,24
>12ea	00 00 00	valp    .byte   0,0,0
>12ed	01 18 17	sregs   .byte   colr,coln+24,line
>12f0	20 53 3a 24	        .text   ' s:$' ;4,24
>12f4	00 00 00	vals    .byte   0,0,0
>12f7	01 1e 17	sregpc  .byte   colr,coln+30,line
>12fa	20 50 43 3a	        .text   ' pc:$' ;4,24
>12fe	24
>12ff	00 00		valpch  .byte   0,0
>1301	00 00 20 00	valpcl  .byte   0,0,32,0
>1305	01 03 18	sregz1  .byte   colr,coln+3,line+1
>1308	20 5a 50 31	        .text   ' zp1:$' ;4,24
>130c	3a 24
>130e	00 00		valz1h  .byte   0,0
>1310	00 00 20 00	valz1l  .byte   0,0,32,0
>1314	01 0f 18	sregz2  .byte   colr,coln+15,line+1
>1317	20 5a 50 32	        .text   ' zp2:$' ;4,24
>131b	3a 24
>131d	00 00		valz2h  .byte   0,0
>131f	00 00 20 00	valz2l  .byte   0,0,32,0
>1323	00		rega    .byte   0
>1324	00		regx    .byte   0
>1325	00		regy    .byte   0
>1326	00		regp    .byte   0
>1327	00		regs    .byte   0
>1328	00		regpch  .byte   0
>1329	00		regpch2 .byte   0
>132a	00		regpcl  .byte   0
>132b	00		regpcl2 .byte   0
>132c	00		vzp1h   .byte   0
>132d	00		vzp1l   .byte   0
>132e	00		vzp2h   .byte   0
>132f	00		vzp2l   .byte   0

;******  Return to file: libtest02.asm


;******  End of listing

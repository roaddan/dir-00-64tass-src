
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L libtest02.txt -o libtest02.prg libtest02.asm
; Sat Apr 12 00:06:56 2025

;Offset	;Hex		;Source

;******  Processing input file: libtest02.asm

="20250405-231555"	                Version = "20250405-231555"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c cb 09	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: libtest02.asm


;******  Processing file: strings_fr.asm

.0854			headera
>0854	20 20 20 20	               .text          "     Commodore 64 test de librarie "
>0858	20 c3 4f 4d 4d 4f 44 4f 52 45 20 36 34 20 54 45
>0868	53 54 20 44 45 20 4c 49 42 52 41 52 49 45 20
>0877	0d 00		               .byte     $0d,0
>0879	20 20 20 20	headerb        .text          "               libtest01 "
>087d	20 20 20 20 20 20 20 20 20 20 20 4c 49 42 54 45
>088d	53 54 30 31 20
>0892	0d		               .byte     $0d
>0893	20 20 20 20	               .text          "       (c) 2025 Daniel Lafrance"
>0897	20 20 20 28 43 29 20 32 30 32 35 20 c4 41 4e 49
>08a7	45 4c 20 cc 41 46 52 41 4e 43 45
>08b2	0d		               .byte     $0d
>08b3	20 20 20 20	               .text   format("       Version: %s",Version)
>08b7	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 35
>08c7	30 34 30 35 2d 32 33 31 35 35 35
>08d2	0d 00		               .byte     $0d,0
>08d4	0d		shortcuts      .byte     $0d
>08d5	91 91		               .byte     ucurkey,ucurkey
>08d7	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey
>08db	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey,rcurkey
>08df	1d
>08e0	20 d2 20 c1	               .text          " R A C C O U R C I S "
>08e4	20 c3 20 c3 20 cf 20 d5 20 d2 20 c3 20 c9 20 d3
>08f4	20
>08f5	0d		               .byte     $0d
>08f6	20 4c 49 42	               .text   format(" libtest01: SYS%05d ($%04X)",main, main)
>08fa	54 45 53 54 30 31 3a 20 d3 d9 d3 30 32 35 30 37
>090a	20 28 24 30 39 c3 c2 29
>0912	0d		               .byte     $0d
>0913	20 41 49 44	               .text   format(" aide.....: SYS%05d ($%04X)",aide, aide)
>0917	45 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 36 30 38
>0927	20 28 24 30 c1 33 30 29
>092f	0d		               .byte     $0d
>0930	20 43 4c 53	               .text   format(" cls......: SYS%05d ($%04X)",cls, cls)
>0934	2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 39 32 37
>0944	20 28 24 30 c2 36 c6 29
>094c	0d 00		               .byte     $0d,0
>094e	20 cc 41 4e	aidetext       .text   format(" Lancement: SYS%05d ($%04X)",libtest01, libtest01)
>0952	43 45 4d 45 4e 54 3a 20 d3 d9 d3 30 32 37 33 37
>0962	20 28 24 30 c1 c2 31 29
>096a	0d 0d		               .byte     $0d, $0d
>096c	20 20 20 20	                .text   format("    ex.: SYS%05d",libtest01)
>0970	45 58 2e 3a 20 d3 d9 d3 30 32 37 33 37
>097d	0d		                .byte     $0d
>097e	20 20 20 20	                .text   format("    for i=0to100:SYS%05d:next",libtest01)
>0982	46 4f 52 20 49 3d 30 54 4f 31 30 30 3a d3 d9 d3
>0992	30 32 37 33 37 3a 4e 45 58 54
>099c	0d 00		                .byte     $0d,0
>099e	20 c0 c0 c0	line            .byte     $20,192,192,192,192,192,192,192,192,192
>09a2	c0 c0 c0 c0 c0 c0
>09a8	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192,192
>09ac	c0 c0 c0 c0 c0 c0
>09b2	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192,192
>09b6	c0 c0 c0 c0 c0 c0
>09bc	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192
>09c0	c0 c0 c0 c0 c0
>09c5	0d 00		                .byte     $0d,0
>09c7	01 00 00 00	dataloc         .byte       1,0,0,0

;******  Return to file: libtest02.asm

.09cb			main
.09cb	20 4f 0b	               jsr scrmaninit
.09ce	08		               php
.09cf	48		               pha
.09d0	a9 8e		               lda  #b_uppercase
.09d2	8d 6e 0b	               sta  characterset
.09d5	20 d2 ff	               jsr  $ffd2
.09d8	68		               pla
.09d9	28		               plp
.09da	08		               php
.09db	48		               pha
.09dc	a9 8e		               lda  #b_uppercase
.09de	20 d2 ff	               jsr  $ffd2
.09e1	68		               pla
.09e2	28		               plp
.09e3	08		               php
.09e4	48		               pha
.09e5	a9 08		               lda  #$08
.09e7	20 d2 ff	               jsr  $ffd2
.09ea	68		               pla
.09eb	28		               plp
.09ec	20 7d 0c	               jsr  push
.09ef	48		               pha
.09f0	a9 05		               lda  #cvert
.09f2	8d 20 d0	               sta  $d020
.09f5	68		               pla
.09f6	48		               pha
.09f7	a9 06		               lda  #cbleu
.09f9	8d 21 d0	               sta  $d021
.09fc	68		               pla
.09fd	48		               pha
.09fe	a9 01		               lda  #cblanc
.0a00	8d 86 02	               sta  bascol
.0a03	68		               pla
.0a04	20 bc 0c	               jsr  pull
.0a07	20 b1 0a	               jsr libtest01
.0a0a	08		               php
.0a0b	48		               pha
.0a0c	a9 09		               lda  #$09
.0a0e	20 d2 ff	               jsr  $ffd2
.0a11	68		               pla
.0a12	28		               plp
.0a13	08		               php
.0a14	48		               pha
.0a15	a9 8e		               lda  #b_uppercase
.0a17	8d 6e 0b	               sta  characterset
.0a1a	20 d2 ff	               jsr  $ffd2
.0a1d	68		               pla
.0a1e	28		               plp
.0a1f	20 7d 0c	               jsr  push
.0a22	a2 00		               ldx  #0
.0a24	a0 00		               ldy  #0
.0a26	20 a6 0b	               jsr  gotoxy
.0a29	20 bc 0c	               jsr  pop
.0a2c	20 a7 10	               jsr  anykey
.0a2f	60		               rts
.0a30			aide
.0a30	20 7d 0c	               jsr  push
.0a33	08		               php
.0a34	48		               pha
.0a35	a9 0e		               lda  #14
.0a37	8d 6e 0b	               sta  characterset
.0a3a	20 d2 ff	               jsr  $ffd2
.0a3d	68		               pla
.0a3e	28		               plp
.0a3f	20 6f 0b	               jsr  cls
.0a42	20 7d 0c	               jsr  push
.0a45	a2 9e		               ldx  #<line
.0a47	a0 09		               ldy  #>line
.0a49	20 8c 0b	               jsr  puts
.0a4c	20 bc 0c	               jsr  pull
.0a4f	20 7d 0c	               jsr  push
.0a52	a2 54		               ldx  #<headera
.0a54	a0 08		               ldy  #>headera
.0a56	20 8c 0b	               jsr  puts
.0a59	20 bc 0c	               jsr  pull
.0a5c	20 7d 0c	               jsr  push
.0a5f	a2 79		               ldx  #<headerb
.0a61	a0 08		               ldy  #>headerb
.0a63	20 8c 0b	               jsr  puts
.0a66	20 bc 0c	               jsr  pull
.0a69	20 7d 0c	               jsr  push
.0a6c	a2 9e		               ldx  #<line
.0a6e	a0 09		               ldy  #>line
.0a70	20 8c 0b	               jsr  puts
.0a73	20 bc 0c	               jsr  pull
.0a76	20 7d 0c	               jsr  push
.0a79	a2 9e		               ldx  #<line
.0a7b	a0 09		               ldy  #>line
.0a7d	20 8c 0b	               jsr  puts
.0a80	20 bc 0c	               jsr  pull
.0a83	20 7d 0c	               jsr  push
.0a86	a2 d4		               ldx  #<shortcuts
.0a88	a0 08		               ldy  #>shortcuts
.0a8a	20 8c 0b	               jsr  puts
.0a8d	20 bc 0c	               jsr  pull
.0a90	20 7d 0c	               jsr  push
.0a93	a2 4e		               ldx  #<aidetext
.0a95	a0 09		               ldy  #>aidetext
.0a97	20 8c 0b	               jsr  puts
.0a9a	20 bc 0c	               jsr  pull
.0a9d	20 7d 0c	               jsr  push
.0aa0	a2 9e		               ldx  #<line
.0aa2	a0 09		               ldy  #>line
.0aa4	20 8c 0b	               jsr  puts
.0aa7	20 bc 0c	               jsr  pull
.0aaa	20 a7 10	               jsr  anykey
.0aad	20 bc 0c	               jsr  pop
.0ab0	60		               rts
.0ab1			libtest01
.0ab1	08		               php
.0ab2	48		               pha
.0ab3	20 6f 0b	               jsr  cls
.0ab6	a9 a6		               lda  #166
.0ab8	20 7d 0c	               jsr  push
.0abb	a2 c7		               ldx  #<dataloc
.0abd	a0 09		               ldy  #>dataloc
.0abf	20 15 0c	               jsr  putscxy
.0ac2	20 bc 0c	               jsr  pull
.0ac5	48		               pha
.0ac6	a9 03		               lda  #ccyan
.0ac8	8d 86 02	               sta  bascol
.0acb	68		               pla
.0acc	20 15 0b	               jsr  victohighres
.0acf	20 a7 10	               jsr  anykey
.0ad2	20 32 0b	               jsr  victonormal
.0ad5	48		               pha
.0ad6	a9 98		               lda  #<$0000+(40*23)
.0ad8	8d 47 0e	               sta  loopcount
.0adb	a9 03		               lda  #>$0000+(40*23)
.0add	8d 48 0e	               sta  loopcount+1
.0ae0	68		               pla
.0ae1	ad f2 0a	roll           lda  car
.0ae4	20 86 0b	               jsr  putch
.0ae7	20 27 0e	               jsr  loop
.0aea	d0 f5		               bne  roll
.0aec	20 27 11	               jsr  showregs
.0aef	68		out            pla
.0af0	28		               plp
.0af1	60		               rts
>0af2	a6		car            .byte     166

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0af3	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0af7	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0afb			libtart

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-vicii.asm

.0afb			screendis
.0afb	08		               php
.0afc	48		               pha
.0afd	ad 11 d0	               lda  $d011
.0b00	29 ef		               and  #%11101111
.0b02	8d 11 d0	               sta  $d011
.0b05	68		               pla
.0b06	28		               plp
.0b07	60		               rts
.0b08			screenena
.0b08	08		               php
.0b09	48		               pha
.0b0a	ad 11 d0	               lda  $d011
.0b0d	09 10		               ora  #%00010000
.0b0f	8d 11 d0	               sta  $d011
.0b12	68		               pla
.0b13	28		               plp
.0b14	60		               rts
.0b15			victohighres
.0b15	08		               php
.0b16	48		               pha
.0b17	ad 11 d0	               lda  vicmiscfnc
.0b1a	09 20		               ora  #%00100000     ; 32
.0b1c	8d 11 d0	               sta  vicmiscfnc
.0b1f	ad 18 d0	               lda  vicmemptr
.0b22	09 08		               ora  #%00001000     ; $08
.0b24	8d 18 d0	               sta  vicmemptr
.0b27	a9 ff		               lda  #$ff           ; 255
.0b29	85 37		               sta  $0037
.0b2b	a9 1f		               lda  #$1f           ; 31
.0b2d	85 38		               sta  $0038
.0b2f	68		               pla
.0b30	28		               plp
.0b31	60		               rts
.0b32			victonormal
.0b32	08		               php
.0b33	48		               pha
.0b34	ad 11 d0	               lda  vicmiscfnc
.0b37	29 df		               and  #%11011111     ; 233
.0b39	8d 11 d0	               sta  vicmiscfnc
.0b3c	ad 18 d0	               lda  vicmemptr
.0b3f	29 f7		               and  #%11110111     ; $08
.0b41	8d 18 d0	               sta  vicmemptr
.0b44	a9 00		               lda  #$00
.0b46	85 37		               sta  $0037
.0b48	a9 a0		               lda  #$a0
.0b4a	85 38		               sta  $0038
.0b4c	68		               pla
.0b4d	28		               plp
.0b4e	60		               rts

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0b4f			scrmaninit
.0b4f	20 7d 0c	               jsr  push
.0b52	a9 06		               lda  #vbleu
.0b54	8d 21 d0	               sta  vicbackcol
.0b57	a9 05		               lda  #vvert
.0b59	8d 20 d0	               sta  vicbordcol
.0b5c	a9 01		               lda  #vblanc
.0b5e	8d 86 02	               sta  bascol
.0b61	ad 00 04	               lda  scrnram
.0b64	8d 00 04	               sta  scrnram
.0b67	20 6f 0b	               jsr  cls
.0b6a	20 bc 0c	               jsr  pop
.0b6d	60		               rts
>0b6e	8e		characterset   .byte b_uppercase
.0b6f			cls
.0b6f	08		               php
.0b70	48		               pha
.0b71	a9 93		               lda  #$93
.0b73	20 86 0b	               jsr  putch
.0b76	68		               pla
.0b77	28		               plp
.0b78	60		               rts
.0b79			putnch
.0b79	08		               php
.0b7a	e0 00		               cpx  #$00
.0b7c	f0 06		               beq  out
.0b7e	20 d2 ff	again          jsr  $ffd2
.0b81	ca		               dex
.0b82	d0 fa		               bne  again
.0b84	28		out            plp
.0b85	60		               rts
.0b86			putch
.0b86	08		               php
.0b87	20 d2 ff	               jsr  $ffd2
.0b8a	28		               plp
.0b8b	60		               rts
.0b8c			puts
.0b8c	20 7d 0c	               jsr  push
.0b8f	86 fb		               stx  zpage1
.0b91	84 fc		               sty  zpage1+1
.0b93	a0 00		               ldy  #0
.0b95	b1 fb		next           lda  (zpage1),y
.0b97	f0 09		               beq  exit
.0b99	20 86 0b	               jsr  putch
.0b9c	20 84 0d	               jsr  inczp1
.0b9f	4c 95 0b	               jmp  next
.0ba2	20 bc 0c	exit           jsr  pop
.0ba5	60		               rts
.0ba6			gotoxy
.0ba6	08		               php
.0ba7	18		               clc
.0ba8	8a		               txa
.0ba9	48		               pha
.0baa	98		               tya
.0bab	aa		               tax
.0bac	68		               pla
.0bad	a8		               tay
.0bae	20 f0 ff	               jsr  kplot
.0bb1	28		               plp
.0bb2	60		               rts
.0bb3			cursor
=$0286			bascol    =    $0286
.0bb3	08		               php            ;tourlou
.0bb4	48		               pha
.0bb5	90 12		               bcc  restore
.0bb7	20 f0 ff	               jsr  kplot
.0bba	8c db 0b	               sty  cx
.0bbd	8e dc 0b	               stx  cy
.0bc0	ad 86 02	               lda  bascol
.0bc3	8d dd 0b	               sta  bcol
.0bc6	4c d8 0b	               jmp  out
.0bc9	ae dc 0b	restore        ldx  cy
.0bcc	ac db 0b	               ldy  cx
.0bcf	20 f0 ff	               jsr  kplot
.0bd2	ad dd 0b	               lda  bcol
.0bd5	8d 86 02	               sta  bascol
.0bd8	68		out            pla
.0bd9	28		               plp
.0bda	60		               rts
>0bdb	00		cx   .byte     $00
>0bdc	00		cy   .byte     $00
>0bdd	00		bcol .byte     $00
.0bde			cursave
.0bde	08		               php
.0bdf	38		               sec
.0be0	20 b3 0b	               jsr  cursor
.0be3	28		               plp
.0be4	60		               rts
.0be5			curput
.0be5	08		               php
.0be6	18		               clc
.0be7	20 b3 0b	               jsr  cursor
.0bea	28		               plp
.0beb	60		               rts
.0bec			putsxy
.0bec	20 7d 0c	               jsr  push
.0bef	86 fb		               stx  zpage1
.0bf1	84 fc		               sty  zpage1+1
.0bf3	a0 00		               ldy  #$00
.0bf5	b1 fb		               lda  (zpage1),y
.0bf7	aa		               tax
.0bf8	20 84 0d	               jsr  inczp1
.0bfb	b1 fb		               lda  (zpage1),y
.0bfd	a8		               tay
.0bfe	20 a6 0b	               jsr  gotoxy
.0c01	20 84 0d	               jsr  inczp1
.0c04	a6 fb		               ldx  zpage1
.0c06	a4 fc		               ldy  zpage1+1
.0c08	20 8c 0b	               jsr  puts
.0c0b	20 bc 0c	               jsr  pop
.0c0e	60		               rts
>0c0f	00 00		straddr   .word     $00
>0c11	00		px        .byte     $00
>0c12	00		py        .byte     $00
>0c13	00 00		zp1       .word     $00
.0c15			putscxy
.0c15	20 7d 0c	               jsr  push
.0c18	84 fc		               sty  zpage1+1
.0c1a	86 fb		               stx  zpage1
.0c1c	ad 86 02	               lda  bascol
.0c1f	8d 3f 0c	               sta  bc
.0c22	a0 00		               ldy #$00
.0c24	b1 fb		               lda  (zpage1),y
.0c26	8d 86 02	               sta  bascol
.0c29	20 84 0d	               jsr  inczp1
.0c2c	a6 fb		               ldx  zpage1
.0c2e	a4 fc		               ldy  zpage1+1
.0c30	20 ec 0b	               jsr  putsxy
.0c33	ad 3f 0c	               lda  bc
.0c36	8d 86 02	               sta  bascol
.0c39	20 bc 0c	               jsr  pop
.0c3c	60		               rts
>0c3d	00 00		straddr  .word      $00
>0c3f	00		bc       .byte      $00
>0c40	00 00		zp1      .word      $00
.0c42			putrahex
.0c42	08		               php
.0c43	48		               pha
.0c44	20 af 0e	               jsr  atohex
.0c47	a9 4e		               lda  #<a2hexstr
.0c49	a0 0e		               ldy  #>a2hexstr
.0c4b	20 8c 0b	               jsr  puts
.0c4e	68		               pla
.0c4f	28		               plp
.0c50	60		               rts
.0c51			kputrahexxy
.0c51			bputrahexxy
.0c51			putrahexxy
.0c51	08		               php
.0c52	20 af 0e	               jsr  atohex
.0c55	a9 4b		               lda  #<a2hexpos
.0c57	a0 0e		               ldy  #>a2hexpos
.0c59	20 ec 0b	               jsr  putsxy
.0c5c	68		               pla
.0c5d	28		               plp
.0c5e	60		               rts
.0c5f			putrahexcxy
.0c5f	08		               php
.0c60	20 af 0e	               jsr  atohex
.0c63	a9 4b		               lda  #<a2hexpos
.0c65	a0 0e		               ldy  #>a2hexpos
.0c67	20 15 0c	               jsr  putscxy
.0c6a	68		               pla
.0c6b	28		               plp
.0c6c	60		               rts
.0c6d			setinverse
.0c6d	48		               pha
.0c6e	a9 12		               lda  #$12
.0c70	20 d2 ff	               jsr  $ffd2
.0c73	68		               pla
.0c74	60		               rts
.0c75			clrinverse
.0c75	48		               pha
.0c76	a9 92		               lda  #$92
.0c78	20 d2 ff	               jsr  $ffd2
.0c7b	68		               pla
.0c7c	60		               rts

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.0c7d			push
.0c7d	08		          php            ; stack : flg, pcl, pch
.0c7e	78		          sei
.0c7f	8d b9 0c	          sta  ra        ; save a
.0c82	68		          pla            ; stack : pcl, pch
.0c83	8d b8 0c	          sta  rp        ; save rp
.0c86	68		          pla            ; stack : pch
.0c87	8d ba 0c	          sta  pc        ; save pcl
.0c8a	68		          pla            ; stack : -
.0c8b	8d bb 0c	          sta  pc+1      ; save pch
.0c8e	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0c90	48		          pha            ; stack : zp1l
.0c91	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0c93	48		          pha            ; stack : zp1h, zp1l
.0c94	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0c96	48		          pha            ; stack : zp2l, zp1h, zp1l
.0c97	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0c99	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0c9a	ad b8 0c	          lda  rp        ; get rp
.0c9d	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0c9e	ad b9 0c	          lda  ra        ; get a
.0ca1	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0ca2	8a		          txa            ; get x
.0ca3	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ca4	98		          tya            ; get y
.0ca5	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ca6	ad bb 0c	          lda  pc+1      ; get pch
.0ca9	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0caa	ad ba 0c	          lda  pc        ; get pcl
.0cad	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0cae	ad b8 0c	          lda  rp        ; get rp
.0cb1	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0cb2	ad b9 0c	          lda  ra        ; get a
.0cb5	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0cb6	58		          cli
.0cb7	60		          rts
>0cb8	00		rp        .byte     0
>0cb9	00		ra        .byte     0
>0cba	00 00		pc        .word     0
.0cbc			pull
.0cbc			pop
.0cbc	78		          sei
.0cbd	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0cbe	8d f1 0c	          sta  pc        ; save pcl
.0cc1	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0cc2	8d f2 0c	          sta  pc+1      ; save pch
.0cc5	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0cc6	a8		          tay            ; set y
.0cc7	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0cc8	aa		          tax            ; set x
.0cc9	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0cca	8d f0 0c	          sta  ra        ; save a
.0ccd	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0cce	8d ef 0c	          sta  rp        ; save rp
.0cd1	68		          pla            ; stack : zp2l, zp1h, zp1l
.0cd2	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0cd4	68		          pla            ; stack : zp1h, zp1l
.0cd5	85 fd		          sta  zpage2    ; get zpage2 High byte
.0cd7	68		          pla            ; stack : zp1l
.0cd8	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0cda	68		          pla            ; stack :
.0cdb	85 fb		          sta  zpage1    ; get zpage1 High byte
.0cdd	ad f2 0c	          lda  pc+1      ; get pch
.0ce0	48		          pha            ; stack : pch
.0ce1	ad f1 0c	          lda  pc
.0ce4	48		          pha            ; stack : pcl, pch
.0ce5	ad ef 0c	          lda  rp        ; get rp
.0ce8	48		          pha            ; stack : rp, pcl, pch
.0ce9	ad f0 0c	          lda  ra        ; set ra
.0cec	58		          cli
.0ced	28		          plp            ; stack : pcl, pch
.0cee	60		          rts
>0cef	00		rp        .byte     0
>0cf0	00		ra        .byte     0
>0cf1	00 00		pc        .word     0

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0cf3			blkfill
.0cf3	20 7d 0c	bf0            jsr  push
.0cf6	20 b2 0d	               jsr  savezp1
.0cf9	84 fc		               sty  zpage1+1
.0cfb	a0 00		               ldy  #$00
.0cfd	84 fb		               sty  zpage1
.0cff	91 fb		bf1            sta  (zpage1),y
.0d01	c8		               iny
.0d02	d0 fb		               bne  bf1
.0d04	20 c1 0d	               jsr  restzp1
.0d07	20 bc 0c	               jsr  pop
.0d0a	60		               rts
.0d0b			memfill
.0d0b	20 7d 0c	               jsr  push
.0d0e	20 f3 0c	mf1            jsr  blkfill
.0d11	c8		               iny
.0d12	ca		               dex
.0d13	d0 f9		               bne  mf1
.0d15	20 bc 0c	               jsr  pop
.0d18	60		               rts
.0d19			memmove
.0d19	20 7d 0c	               jsr  push
.0d1c	ba		               tsx            ; On se crée un pointeur ...
.0d1d	8a		               txa
.0d1e	18		               clc
.0d1f	69 0b		               adc  #11
.0d21	a8		               tay
.0d22	a2 06		               ldx  #$06
.0d24	b9 00 01	nextbyte       lda  $0100,y
.0d27	99 73 0d	               sta  words,y
.0d2a	c8		               iny
.0d2b	ca		               dex
.0d2c	d0 f6		               bne  nextbyte
.0d2e	ad 73 0d	               lda  s
.0d31	8d 4a 0d	               sta  source+1
.0d34	ad 74 0d	               lda  s+1
.0d37	8d 4b 0d	               sta  source+2
.0d3a	ad 75 0d	               lda  d
.0d3d	8d 47 0d	               sta  destin+1
.0d40	ad 76 0d	               lda  d+1
.0d43	8d 48 0d	               sta  destin+2
.0d46	ad ff ff	destin         lda  $ffff
.0d49	8d ff ff	source         sta  $ffff
.0d4c	ee 47 0d	               inc  destin+1
.0d4f	d0 03		               bne  src
.0d51	ee 48 0d	               inc  destin+2
.0d54	ee 4a 0d	src            inc  source+1
.0d57	d0 03		               bne  cnt
.0d59	ee 4b 0d	               inc  source+2
.0d5c	ad 77 0d	cnt            lda  compte
.0d5f	d0 08		               bne  decit
.0d61	ad 78 0d	               lda  compte+1
.0d64	f0 09		               beq  fini
.0d66	ce 78 0d	               dec  compte+1
.0d69	ce 77 0d	decit          dec  compte
.0d6c	4c 46 0d	               jmp  destin
.0d6f	20 bc 0c	fini           jsr  pop
.0d72	60		               rts
.0d73			words
>0d73	00 00		s         .word     $0000
>0d75	00 00		d         .word     $0000
>0d77	00 00		compte    .word     $0000
.0d79			decword
.0d79	20 7d 0c	               jsr  push
.0d7c	86 fd		               stx  zpage2
.0d7e	84 fe		               sty  zpage2+1
.0d80	20 bc 0c	               jsr  pop
.0d83	60		               rts
.0d84			inczp1
.0d84	08		               php
.0d85	48		               pha
.0d86	e6 fb		               inc  zpage1
.0d88	a5 fb		               lda  zpage1
.0d8a	d0 02		               bne  nopage
.0d8c	e6 fc		               inc  zpage1+1
.0d8e	68		nopage         pla
.0d8f	28		               plp
.0d90	60		               rts
.0d91			deczp1
.0d91	08		                php
.0d92	48		                pha
.0d93	c6 fb		                dec  zpage1
.0d95	d0 02		                bne  nopage
.0d97	c6 fc		                dec  zpage1+1
.0d99	68		nopage          pla
.0d9a	28		                plp
.0d9b	60		                rts
.0d9c			inczp2
.0d9c	08		               php
.0d9d	48		               pha
.0d9e	e6 fd		               inc  zpage2
.0da0	a5 fd		               lda  zpage2
.0da2	d0 02		               bne  nopage
.0da4	e6 fe		               inc  zpage2+1
.0da6	68		nopage         pla
.0da7	28		               plp
.0da8	60		               rts
.0da9			deczp2
.0da9	08		               php
.0daa	c6 fd		               dec  zpage2
.0dac	d0 02		               bne  nopage
.0dae	c6 fe		               dec  zpage2+1
.0db0	28		nopage         plp
.0db1	60		               rts
.0db2			savezp1
.0db2	08		               php
.0db3	48		               pha
.0db4	a5 fb		               lda  zpage1
.0db6	8d 43 0e	               sta  zp1
.0db9	a5 fc		               lda  zpage1+1
.0dbb	8d 44 0e	               sta  zp1+1
.0dbe	68		               pla
.0dbf	28		               plp
.0dc0	60		               rts
.0dc1			restzp1
.0dc1	08		               php
.0dc2	48		               pha
.0dc3	ad 43 0e	               lda zp1
.0dc6	85 fb		               sta zpage1
.0dc8	ad 44 0e	               lda zp1+1
.0dcb	85 fc		               sta zpage1+1
.0dcd	68		               pla
.0dce	28		               plp
.0dcf	60		               rts
.0dd0			savezp2
.0dd0	08		         php
.0dd1	48		         pha
.0dd2	a5 fd		         lda zpage2
.0dd4	8d 45 0e	         sta zp2
.0dd7	a5 fe		         lda zpage2+1
.0dd9	8d 46 0e	         sta zp2+1
.0ddc	68		         pla
.0ddd	28		         plp
.0dde	60		         rts
.0ddf			restzp2
.0ddf	08		                php
.0de0	48		                pha
.0de1	ad 45 0e	                lda  zp2
.0de4	85 fd		                sta  zpage2
.0de6	ad 46 0e	                lda  zp2+1
.0de9	85 fe		                sta  zpage2+1
.0deb	68		                pla
.0dec	28		                plp
.0ded	60		                rts
.0dee			xy2addr
.0dee	08		                php
.0def	48		                pha
.0df0	8a		                txa
.0df1	48		                pha
.0df2	98		                tya
.0df3	48		                pha
.0df4	ad 3e 0e	                lda     addr1+1
.0df7	8d 40 0e	                sta     addr2+1
.0dfa	ad 3d 0e	                lda     addr1
.0dfd	8d 3f 0e	                sta     addr2
.0e00	c0 00		                cpy     #$00
.0e02	f0 0f		                beq     addx
.0e04	18		moreline        clc
.0e05	6d 3c 0e	                adc     ymult
.0e08	90 03		                bcc     norepy
.0e0a	ee 40 0e	                inc     addr2+1
.0e0d	8d 3f 0e	norepy          sta     addr2
.0e10	88		                dey
.0e11	d0 f1		                bne     moreline
.0e13	8a		addx            txa
.0e14	18		                clc
.0e15	6d 3f 0e	                adc     addr2
.0e18	90 03		                bcc     thatsit
.0e1a	ee 40 0e	                inc     addr2+1
.0e1d	8d 3f 0e	thatsit         sta     addr2
.0e20	68		                pla
.0e21	a8		                tay
.0e22	68		                pla
.0e23	aa		                tax
.0e24	68		                pla
.0e25	28		                plp
.0e26	60		                rts
.0e27			loop
.0e27	ce 47 0e	               dec  loopcount
.0e2a	d0 03		               bne  norep
.0e2c	ce 48 0e	               dec  loopcount+1
.0e2f	ad 47 0e	norep          lda  loopcount
.0e32	c9 00		               cmp  #$00
.0e34	d0 05		               bne  out
.0e36	4d 48 0e	               eor  loopcount+1
.0e39	c9 ff		               cmp  #$ff
.0e3b	60		out            rts
>0e3c	28		ymult          .byte     40
>0e3d	00 00		addr1          .word     $0000
>0e3f	00 00		addr2          .word     $0000
>0e41	00 00		bytecnt        .word     $0000
>0e43	00 00		zp1            .word   $0000
>0e45	00 00		zp2            .word   $0000
>0e47	00 00		loopcount      .word     $0000

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>0e49	01		a2hexcol       .byte     1              ; pour aputscxy
>0e4a	00		a2hexbkcol     .byte     %00000000
.0e4b			a2hexpos
>0e4b	00		a2hexpx        .byte     0              ; pour aputsxy
>0e4c	00		a2hexpy        .byte     0
>0e4d	24		a2hexprefix    .byte     "$"            ; pour aputs
>0e4e	00 00		a2hexstr       .word     $00
>0e50	00 00		               .word     $00
>0e52	00		               .byte     0              ; 0 end string
>0e53	30 30 30 30	abin           .null     "00000000"
>0e57	30 30 30 30 00
>0e5c	20 20 20 00	adec           .null     "   "
.0e60			putahexfmtxy
.0e60	20 7d 0c	               jsr  push
.0e63	20 af 0e	               jsr  atohex
.0e66	ae 4b 0e	               ldx  a2hexpx
.0e69	ac 4c 0e	               ldy  a2hexpy
.0e6c	20 a6 0b	               jsr  gotoxy
.0e6f	a2 4d		               ldx  #<a2hexprefix
.0e71	a0 0e		               ldy  #>a2hexprefix
.0e73	20 8c 0b	               jsr  puts
.0e76	20 bc 0c	               jsr  pop
.0e79	60		               rts
.0e7a			putahexfmt
.0e7a	20 7d 0c	               jsr  push
.0e7d	20 af 0e	               jsr  atohex
.0e80	a2 4d		               ldx  #<a2hexprefix
.0e82	a0 0e		               ldy  #>a2hexprefix
.0e84	20 8c 0b	               jsr  puts
.0e87	20 bc 0c	               jsr  pop
.0e8a	60		               rts
.0e8b			putahex
.0e8b	20 7d 0c	               jsr  push
.0e8e	20 af 0e	               jsr  atohex
.0e91	a2 4e		               ldx  #<a2hexstr
.0e93	a0 0e		               ldy  #>a2hexstr
.0e95	20 8c 0b	               jsr  puts
.0e98	20 bc 0c	               jsr  pop
.0e9b	60		               rts
.0e9c			nibtohex
.0e9c	08		               php
.0e9d	29 0f		               and  #$0f
.0e9f	f8		               sed
.0ea0	18		               clc
.0ea1	69 90		               adc  #$90
.0ea3	69 40		               adc  #$40
.0ea5	d8		               cld
.0ea6	28		               plp
.0ea7	60		               rts
.0ea8			lsra4bits
.0ea8	08		               php
.0ea9	4a		               lsr
.0eaa	4a		               lsr
.0eab	4a		               lsr
.0eac	4a		               lsr
.0ead	28		               plp
.0eae	60		               rts
.0eaf			atohex
.0eaf	08		               php
.0eb0	48		               pha
.0eb1	48		               pha
.0eb2	20 a8 0e	               jsr  lsra4bits
.0eb5	20 9c 0e	               jsr  nibtohex
.0eb8	8d 4e 0e	               sta  a2hexstr
.0ebb	68		               pla
.0ebc	20 9c 0e	               jsr  nibtohex
.0ebf	8d 4f 0e	               sta  a2hexstr+1
.0ec2	a9 00		               lda  #$00                ; set end of string
.0ec4	8d 50 0e	               sta  a2hexstr+2
.0ec7	68		               pla
.0ec8	28		               plp
.0ec9	60		               rts
.0eca			xy2hex
.0eca	20 7d 0c	               jsr  push
.0ecd	20 af 0e	               jsr  atohex
.0ed0	8a		               txa
.0ed1	48		               pha
.0ed2	20 a8 0e	               jsr  lsra4bits
.0ed5	20 9c 0e	               jsr  nibtohex
.0ed8	8d 4e 0e	               sta  a2hexstr
.0edb	68		               pla
.0edc	20 9c 0e	               jsr  nibtohex
.0edf	8d 4f 0e	               sta  a2hexstr+1
.0ee2	98		               tya
.0ee3	48		               pha
.0ee4	20 a8 0e	               jsr  lsra4bits
.0ee7	20 9c 0e	               jsr  nibtohex
.0eea	8d 50 0e	               sta  a2hexstr+2
.0eed	68		               pla
.0eee	20 9c 0e	               jsr  nibtohex
.0ef1	8d 51 0e	               sta  a2hexstr+3
.0ef4	a9 00		               lda  #$00                ; 0 ended string
.0ef6	8d 52 0e	               sta  a2hexstr+4
.0ef9	20 bc 0c	               jsr  pop
.0efc			atobin
.0efc	20 7d 0c	               jsr  push
.0eff	a2 08		               ldx  #8
.0f01	a0 00		               ldy  #0
.0f03	18		               clc
.0f04	2a		nextbit        rol
.0f05	48		               pha
.0f06	69 00		               adc  #$00
.0f08	29 01		               and  #$01
.0f0a	20 9c 0e	               jsr  nibtohex
.0f0d	99 53 0e	               sta  abin,y
.0f10	68		               pla
.0f11	c8		               iny
.0f12	ca		               dex
.0f13	d0 ef		               bne  nextbit
.0f15	a9 00		               lda  #0
.0f17	99 53 0e	               sta  abin,y
.0f1a	20 bc 0c	               jsr  pull
.0f1d	60		               rts
.0f1e			putabin
.0f1e	20 fc 0e	               jsr     atobin
.0f21	20 7d 0c	               jsr     push
.0f24	a2 53		               ldx     #<abin
.0f26	a0 0e		               ldy     #>abin
.0f28	20 8c 0b	               jsr     puts
.0f2b	20 bc 0c	               jsr     pop
.0f2e	60		               rts
.0f2f			printabin
.0f2f	20 7d 0c	               jsr     push
.0f32	a2 53		               ldx     #<abin
.0f34	a0 0e		               ldy     #>abin
.0f36	20 8c 0b	               jsr     puts
.0f39	20 bc 0c	               jsr     pop
.0f3c	60		               rts
.0f3d			putabinfmt
.0f3d	08		               php
.0f3e	48		               pha
.0f3f	a9 25		               lda     #"%"
.0f41	20 86 0b	               jsr     putch
.0f44	68		               pla
.0f45	20 1e 0f	               jsr     putabin
.0f48	28		               plp
.0f49	60		               rts
.0f4a			putabinxy
.0f4a	20 a6 0b	               jsr     gotoxy
.0f4d	20 1e 0f	               jsr     putabin
.0f50	60		               rts
.0f51			putabinfmtxy
.0f51	20 a6 0b	               jsr     gotoxy
.0f54	20 3d 0f	               jsr     putabinfmt
.0f57	60		               rts
.0f58			atodec
.0f58	20 7d 0c	               jsr  push
.0f5b	f8		               sed            ; On se place en mode décimal.
.0f5c	aa		               tax            ; On déplace a dans x.
.0f5d	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.0f5f	a9 00		               lda  #$00      ; 0 dans A.
.0f61	18		nextbit        clc            ; Bit carry a 0.
.0f62	69 01		               adc  #$01      ; Ajoute 1 a A.
.0f64	90 01		               bcc  decx      ; Pas de carry, pas de report.
.0f66	c8		               iny            ; On incrémente Y
.0f67	ca		decx           dex            ; X=X-1
.0f68	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.0f6a	48		               pha            ; A sur le stack.
.0f6b	98		               tya            ; Y dans A (MSB)
.0f6c	20 9c 0e	               jsr  nibtohex  ; a hex petsci ...
.0f6f	8d 5c 0e	               sta  adec      ; ... dans tampon.
.0f72	68		               pla            ; Récupere A
.0f73	48		               pha            ;
.0f74	20 9c 0e	               jsr  nibtohex
.0f77	8d 5e 0e	               sta  adec+2
.0f7a	68		               pla
.0f7b	6a		               ror
.0f7c	6a		               ror
.0f7d	6a		               ror
.0f7e	6a		               ror
.0f7f	20 9c 0e	               jsr  nibtohex
.0f82	8d 5d 0e	               sta  adec+1
.0f85	d8		               cld            ; On revient en mode binaire.
.0f86	20 bc 0c	               jsr  pull
.0f89	60		               rts
.0f8a			putadec
.0f8a	20 7d 0c	               jsr  push
.0f8d	20 58 0f	               jsr  atodec
.0f90	a2 5c		               ldx  #<adec
.0f92	a0 0e		               ldy  #>adec+1
.0f94	20 8c 0b	               jsr  puts
.0f97	20 bc 0c	               jsr  pop
.0f9a	60		               rts

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>0f9b	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>0f9f	00 00 00 00 00 00 00 00 00 0d 00 00
>0fab	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>0faf	00 00 00 00 00 00 00 00 00 00 00 00
>0fbb	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>0fbf	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>0fcb	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>0fcf	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>0fdb	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>0fdf	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>0feb	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>0fef	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>0ffb	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>0fff	00 00 00 00 00 00 00 00 00 00 00 00
>100b	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>100f	00 00 00 00 00 00 00 00 00 00 00 00
>101b	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>101f	00 00 00 00 00 00 00 00 00 00 00 00
>102b	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>102f	00 00 00 00 00 00 00 00 00 00 00 00
>103b	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>103f	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>104b	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>104f	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>105b	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>105f	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>106b	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>106f	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>107b	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>107f	00 00 00 00 00 00 00 00 00 00 00 00
>108b	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>108f	00 00 00 00 00 00 00 00 00 00 00 00
.109b			waitstop
.109b	20 7d 0c	               jsr  push
.109e	20 ed f6	wait           jsr  k_stop
.10a1	d0 fb		               bne  wait
.10a3	20 bc 0c	               jsr  pop
.10a6	60		               rts
.10a7			anykey
.10a7	08		               php
.10a8	48		               pha
.10a9	a5 cb		nokey          lda 203
.10ab	c9 40		               cmp #64
.10ad	f0 fa		               beq nokey
.10af	20 b5 10	               jsr releasekey
.10b2	68		               pla
.10b3	28		               plp
.10b4	60		               rts
.10b5			releasekey
.10b5	08		               php
.10b6	48		               pha
.10b7	a5 cb		keypressed     lda 203
.10b9	c9 40		               cmp #64
.10bb	d0 fa		               bne keypressed
.10bd	68		               pla
.10be	28		               plp
.10bf	60		               rts
.10c0			getkey
.10c0	20 e4 ff	again          jsr  getin
.10c3	c9 00		               cmp  #0
.10c5	f0 f9		               beq  again
.10c7	60		               rts
.10c8			kbflushbuff
.10c8	08		               php
.10c9	48		               pha
.10ca	20 e4 ff	again          jsr  getin
.10cd	c9 00		               cmp  #0
.10cf	d0 f9		               bne  again
.10d1	68		               pla
.10d2	28		               plp
.10d3	60		               rts
.10d4			waitkey
.10d4	20 7d 0c	               jsr  push
.10d7	8d 25 11	               sta  thekey
.10da	20 e4 ff	nope           jsr  getin
.10dd	20 d2 ff	               jsr  chrout
.10e0	cd 25 11	               cmp  thekey
.10e3	d0 f5		               bne  nope
.10e5	20 d2 ff	               jsr  chrout
.10e8	20 bc 0c	               jsr  pop
.10eb	60		               rts
.10ec			waitspace
.10ec	20 7d 0c	               jsr  push
.10ef	a9 7f		wait           lda  #$7f  ;%01111111
.10f1	8d 00 dc	               sta  $dc00
.10f4	ad 01 dc	               lda  $dc01
.10f7	29 10		               and  #$10  ;mask %00010000
.10f9	d0 f4		               bne  wait
.10fb	20 bc 0c	               jsr  pop
.10fe			waitsstop
.10fe	20 7d 0c	               jsr  push
.1101	20 ed f6	wait           jsr  k_stop  ;%01111111
.1104	d0 fb		               bne  wait
.1106	20 bc 0c	               jsr  pop
.1109			waitreturn
.1109	20 7d 0c	               jsr  push
.110c	ad 26 11	               lda  thecount
.110f	8d 00 04	               sta  scrnram
.1112	a9 02		               lda  #$02
.1114	8d 00 d8	               sta  colorram
.1117	20 e4 ff	nope           jsr  getin
.111a	c9 0d		nohex          cmp  #$0d
.111c	d0 f9		               bne  nope
.111e	ee 26 11	               inc  thecount
.1121	20 bc 0c	               jsr  pop
.1124	60		               rts
>1125	00		thekey         .byte   0
>1126	01		thecount       .byte   $01

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.1127			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.1127	20 7d 0c	                jsr push
.112a	08		                php
.112b	8d eb 12	                sta  rega
.112e	68		                pla
.112f	8d ee 12	                sta  regp
.1132	8e ec 12	                stx  regx
.1135	8c ed 12	                sty  regy
.1138	ba		                tsx
.1139	8e ef 12	                stx  regs
.113c	68		                pla
.113d	8d f2 12	                sta  regpcl
.1140	8d f3 12	                sta  regpcl2
.1143	68		                pla
.1144	8d f0 12	                sta  regpch
.1147	8d f1 12	                sta  regpch2
.114a	ad eb 12	                lda  rega
.114d	48		                pha
.114e	20 9c 0e	                jsr  nibtohex
.1151	8d 95 12	                sta  vala+1
.1154	68		                pla
.1155	20 a8 0e	                jsr  lsra4bits
.1158	20 9c 0e	                jsr  nibtohex
.115b	8d 94 12	                sta  vala
.115e	ad ed 12	                lda  regy
.1161	48		                pha
.1162	20 9c 0e	                jsr  nibtohex
.1165	8d a9 12	                sta  valy+1
.1168	68		                pla
.1169	20 a8 0e	                jsr  lsra4bits
.116c	20 9c 0e	                jsr  nibtohex
.116f	8d a8 12	                sta  valy
.1172	ad ec 12	                lda  regx
.1175	48		                pha
.1176	20 9c 0e	                jsr  nibtohex
.1179	8d 9f 12	                sta  valx+1
.117c	68		                pla
.117d	20 a8 0e	                jsr  lsra4bits
.1180	20 9c 0e	                jsr  nibtohex
.1183	8d 9e 12	                sta  valx
.1186	ad ee 12	                lda  regp
.1189	48		                pha
.118a	20 9c 0e	                jsr  nibtohex
.118d	8d b3 12	                sta  valp+1
.1190	68		                pla
.1191	20 a8 0e	                jsr  lsra4bits
.1194	20 9c 0e	                jsr  nibtohex
.1197	8d b2 12	                sta  valp
.119a	ad ef 12	                lda  regs
.119d	48		                pha
.119e	20 9c 0e	                jsr  nibtohex
.11a1	8d bd 12	                sta  vals+1
.11a4	68		                pla
.11a5	20 a8 0e	                jsr  lsra4bits
.11a8	20 9c 0e	                jsr  nibtohex
.11ab	8d bc 12	                sta  vals
.11ae	18		                clc
.11af	ad f3 12	                lda regpcl2
.11b2	69 01		                adc #$01
.11b4	8d f3 12	                sta regpcl2
.11b7	ad f3 12	                lda regpcl2
.11ba	d0 03		                bne noreport
.11bc	ee f1 12	                inc regpch2
.11bf	ad f1 12	    noreport    lda regpch2
.11c2	48		                pha
.11c3	20 9c 0e	                jsr  nibtohex
.11c6	8d c8 12	                sta  valpch+1
.11c9	68		                pla
.11ca	20 a8 0e	                jsr  lsra4bits
.11cd	20 9c 0e	                jsr  nibtohex
.11d0	8d c7 12	                sta  valpch
.11d3	ad f3 12	                lda  regpcl2
.11d6	48		                pha
.11d7	20 9c 0e	                jsr  nibtohex
.11da	8d ca 12	                sta  valpcl+1
.11dd	68		                pla
.11de	20 a8 0e	                jsr  lsra4bits
.11e1	20 9c 0e	                jsr  nibtohex
.11e4	8d c9 12	                sta  valpcl
.11e7	a5 fb		                lda  zpage1
.11e9	48		                pha
.11ea	20 9c 0e	                jsr  nibtohex
.11ed	8d d8 12	                sta  valz1l
.11f0	68		                pla
.11f1	20 a8 0e	                jsr  lsra4bits
.11f4	20 9c 0e	                jsr  nibtohex
.11f7	8d d9 12	                sta  valz1l+1
.11fa	a5 fc		                lda  zpage1+1
.11fc	48		                pha
.11fd	20 9c 0e	                jsr  nibtohex
.1200	8d d6 12	                sta  valz1h
.1203	68		                pla
.1204	20 a8 0e	                jsr  lsra4bits
.1207	20 9c 0e	                jsr  nibtohex
.120a	8d d7 12	                sta  valz1h+1
.120d	a5 fd		                lda  zpage2
.120f	48		                pha
.1210	20 9c 0e	                jsr  nibtohex
.1213	8d e7 12	                sta  valz2l
.1216	68		                pla
.1217	20 a8 0e	                jsr  lsra4bits
.121a	20 9c 0e	                jsr  nibtohex
.121d	8d e8 12	                sta  valz2l+1
.1220	a5 fe		                lda  zpage2+1
.1222	48		                pha
.1223	20 9c 0e	                jsr  nibtohex
.1226	8d e5 12	                sta  valz2h
.1229	68		                pla
.122a	20 a8 0e	                jsr  lsra4bits
.122d	20 9c 0e	                jsr  nibtohex
.1230	8d e6 12	                sta  valz2h+1
.1233	20 6d 0c	                jsr  setinverse
.1236	78		                sei
.1237	a2 8d		                ldx  #<srega
.1239	a0 12		                ldy  #>srega+1
.123b	20 15 0c	                jsr  putscxy
.123e	a2 97		                ldx  #<sregx
.1240	a0 12		                ldy  #>sregx+1
.1242	20 15 0c	                jsr  putscxy
.1245	a2 a1		                ldx  #<sregy
.1247	a0 12		                ldy  #>sregy+1
.1249	20 15 0c	                jsr  putscxy
.124c	a2 ab		                ldx  #<sregp
.124e	a0 12		                ldy  #>sregp+1
.1250	20 15 0c	                jsr  putscxy
.1253	a2 b5		                ldx  #<sregs
.1255	a0 12		                ldy  #>sregs+1
.1257	20 15 0c	                jsr  putscxy
.125a	a2 bf		                ldx  #<sregpc
.125c	a0 12		                ldy  #>sregpc+1
.125e	20 15 0c	                jsr  putscxy
.1261	a2 cd		                ldx  #<sregz1
.1263	a0 12		                ldy  #>sregz1+1
.1265	20 15 0c	                jsr  putscxy
.1268	a2 dc		                ldx  #<sregz2
.126a	a0 12		                ldy  #>sregz2+1
.126c	20 15 0c	                jsr  putscxy
.126f	58		                cli
.1270	20 75 0c	                jsr  clrinverse
.1273	ad f0 12	                lda  regpch
.1276	48		                pha
.1277	ad f2 12	                lda  regpcl
.127a	48		                pha
.127b	ac ed 12	                ldy  regy
.127e	ae ec 12	                ldx  regx
.1281	ad ee 12	                lda  regp
.1284	48		                pha
.1285	ad eb 12	                lda  rega
.1288	28		                plp
.1289	20 bc 0c	                jsr pop
.128c	60		                rts
>128d	01 00 17	srega   .byte   colr,coln,line
>1290	20 41 3a 24	        .text   ' a:$' ;4,24
>1294	00 00 00	vala    .byte   0,0,0
>1297	01 06 17	sregx   .byte   colr,coln+6,line
>129a	20 58 3a 24	        .text   ' x:$' ;4,24
>129e	00 00 00	valx    .byte   0,0,0
>12a1	01 0c 17	sregy   .byte   colr,coln+12,line
>12a4	20 59 3a 24	        .text   ' y:$' ;4,24
>12a8	00 00 00	valy    .byte   0,0,0
>12ab	01 12 17	sregp   .byte   colr,coln+18,line
>12ae	20 50 3a 24	        .text   ' p:$' ;4,24
>12b2	00 00 00	valp    .byte   0,0,0
>12b5	01 18 17	sregs   .byte   colr,coln+24,line
>12b8	20 53 3a 24	        .text   ' s:$' ;4,24
>12bc	00 00 00	vals    .byte   0,0,0
>12bf	01 1e 17	sregpc  .byte   colr,coln+30,line
>12c2	20 50 43 3a	        .text   ' pc:$' ;4,24
>12c6	24
>12c7	00 00		valpch  .byte   0,0
>12c9	00 00 20 00	valpcl  .byte   0,0,32,0
>12cd	01 03 18	sregz1  .byte   colr,coln+3,line+1
>12d0	20 5a 50 31	        .text   ' zp1:$' ;4,24
>12d4	3a 24
>12d6	00 00		valz1h  .byte   0,0
>12d8	00 00 20 00	valz1l  .byte   0,0,32,0
>12dc	01 0f 18	sregz2  .byte   colr,coln+15,line+1
>12df	20 5a 50 32	        .text   ' zp2:$' ;4,24
>12e3	3a 24
>12e5	00 00		valz2h  .byte   0,0
>12e7	00 00 20 00	valz2l  .byte   0,0,32,0
>12eb	00		rega    .byte   0
>12ec	00		regx    .byte   0
>12ed	00		regy    .byte   0
>12ee	00		regp    .byte   0
>12ef	00		regs    .byte   0
>12f0	00		regpch  .byte   0
>12f1	00		regpch2 .byte   0
>12f2	00		regpcl  .byte   0
>12f3	00		regpcl2 .byte   0
>12f4	00		vzp1h   .byte   0
>12f5	00		vzp1l   .byte   0
>12f6	00		vzp2h   .byte   0
>12f7	00		vzp2l   .byte   0

;******  Return to file: libtest02.asm


;******  End of listing

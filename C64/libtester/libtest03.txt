
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L libtest03.txt -o libtest03.prg libtest03.asm
; Mon Apr 21 01:17:56 2025

;Offset	;Hex		;Source

;******  Processing input file: libtest03.asm

="20250405-231555 "	                Version = "20250405-231555 "

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c de 09	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: libtest03.asm


;******  Processing file: strings_fr.asm

.0854			headera
>0854	13 1d 1d 1d	               .byte     b_home,b_crsr_right,b_crsr_right,b_crsr_right,b_crsr_right
>0858	1d
>0859	20 c3 4f 4d	               .text              " Commodore 64 test de libraries "
>085d	4d 4f 44 4f 52 45 20 36 34 20 54 45 53 54 20 44
>086d	45 20 4c 49 42 52 41 52 49 45 53 20
>0879	0d 00		               .byte     $0d,0
>087b	20 20 20 20	headerb        .text          "               libtest03 "
>087f	20 20 20 20 20 20 20 20 20 20 20 4c 49 42 54 45
>088f	53 54 30 33 20
>0894	0d		               .byte     $0d
>0895	20 20 20 20	               .text          "       (c) 2025 Daniel Lafrance"
>0899	20 20 20 28 43 29 20 32 30 32 35 20 c4 41 4e 49
>08a9	45 4c 20 cc 41 46 52 41 4e 43 45
>08b4	0d		               .byte     $0d
>08b5	20 20 20 20	               .text   format("       Version: %s",Version)
>08b9	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 35
>08c9	30 34 30 35 2d 32 33 31 35 35 35 20
>08d5	0d 00		               .byte     $0d,0
>08d7	0d		shortcuts      .byte     $0d
>08d8	91 91		               .byte     ucurkey,ucurkey
>08da	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey
>08de	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey,rcurkey
>08e2	1d
>08e3	20 d2 20 c1	               .text          " R A C C O U R C I S "
>08e7	20 c3 20 c3 20 cf 20 d5 20 d2 20 c3 20 c9 20 d3
>08f7	20
>08f8	0d		               .byte     $0d
>08f9	20 4c 49 42	               .text   format(" libtest03: SYS%05d (jsr $%04X)",main, main)
>08fd	54 45 53 54 30 33 3a 20 d3 d9 d3 30 32 35 32 36
>090d	20 28 4a 53 52 20 24 30 39 c4 c5 29
>0919	0d		               .byte     $0d
>091a	20 41 49 44	               .text   format(" aide.....: SYS%05d (jsr $%04X)",aide, aide)
>091e	45 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 36 34 31
>092e	20 28 4a 53 52 20 24 30 c1 35 31 29
>093a	0d		               .byte     $0d
>093b	20 43 4c 53	               .text   format(" cls......: SYS%05d (jsr $%04X)",cls, cls)
>093f	2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 38 34 33
>094f	20 28 4a 53 52 20 24 30 c2 31 c2 29
>095b	0d 00		               .byte     $0d,0
>095d	20 cc 41 4e	aidetext       .text   format(" Lancement: SYS%05d (jsr $%04X)",libtest03, libtest03)
>0961	43 45 4d 45 4e 54 3a 20 d3 d9 d3 30 32 37 36 37
>0971	20 28 4a 53 52 20 24 30 c1 c3 c6 29
>097d	0d 0d		               .byte     $0d, $0d
>097f	20 20 20 20	                .text   format("    ex.: SYS%05d",libtest03)
>0983	45 58 2e 3a 20 d3 d9 d3 30 32 37 36 37
>0990	0d		                .byte     $0d
>0991	20 20 20 20	                .text   format("    for i=0to100:SYS%05d:next",libtest03)
>0995	46 4f 52 20 49 3d 30 54 4f 31 30 30 3a d3 d9 d3
>09a5	30 32 37 36 37 3a 4e 45 58 54
>09af	0d 00		                .byte     $0d,0
>09b1	20 c0 c0 c0	line            .byte     $20,192,192,192,192,192,192,192,192,192
>09b5	c0 c0 c0 c0 c0 c0
>09bb	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192,192
>09bf	c0 c0 c0 c0 c0 c0
>09c5	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192,192
>09c9	c0 c0 c0 c0 c0 c0
>09cf	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192
>09d3	c0 c0 c0 c0 c0
>09d8	0d 00		                .byte     $0d,0
>09da	01 00 00 00	dataloc         .byte       1,0,0,0

;******  Return to file: libtest03.asm

.09de			main
.09de	20 fb 0a	               jsr scrmaninit
.09e1	08		               php
.09e2	48		               pha
.09e3	a9 8e		               lda  #b_uppercase
.09e5	8d 1a 0b	               sta  characterset
.09e8	20 d2 ff	               jsr  $ffd2
.09eb	68		               pla
.09ec	28		               plp
.09ed	08		               php
.09ee	48		               pha
.09ef	a9 8e		               lda  #b_uppercase
.09f1	20 d2 ff	               jsr  $ffd2
.09f4	68		               pla
.09f5	28		               plp
.09f6	08		               php
.09f7	48		               pha
.09f8	a9 08		               lda  #$08
.09fa	20 d2 ff	               jsr  $ffd2
.09fd	68		               pla
.09fe	28		               plp
.09ff	20 36 0e	               jsr  push
.0a02	48		               pha
.0a03	a9 05		               lda  #cvert
.0a05	8d 20 d0	               sta  $d020
.0a08	68		               pla
.0a09	48		               pha
.0a0a	a9 06		               lda  #cbleu
.0a0c	8d 21 d0	               sta  $d021
.0a0f	68		               pla
.0a10	48		               pha
.0a11	a9 01		               lda  #cblanc
.0a13	8d 86 02	               sta  bascol
.0a16	68		               pla
.0a17	20 75 0e	               jsr  pull
.0a1a	20 cf 0a	               jsr  libtest03
.0a1d	20 60 12	               jsr  anykey
.0a20	08		               php
.0a21	48		               pha
.0a22	a9 09		               lda  #$09
.0a24	20 d2 ff	               jsr  $ffd2
.0a27	68		               pla
.0a28	28		               plp
.0a29	08		               php
.0a2a	48		               pha
.0a2b	a9 8e		               lda  #b_uppercase
.0a2d	8d 1a 0b	               sta  characterset
.0a30	20 d2 ff	               jsr  $ffd2
.0a33	68		               pla
.0a34	28		               plp
.0a35	20 36 0e	               jsr  push
.0a38	48		               pha
.0a39	a9 05		               lda  #cvert
.0a3b	8d 20 d0	               sta  $d020
.0a3e	68		               pla
.0a3f	48		               pha
.0a40	a9 06		               lda  #cbleu
.0a42	8d 21 d0	               sta  $d021
.0a45	68		               pla
.0a46	48		               pha
.0a47	a9 01		               lda  #cblanc
.0a49	8d 86 02	               sta  bascol
.0a4c	68		               pla
.0a4d	20 75 0e	               jsr  pull
.0a50	60		               rts
.0a51			aide
.0a51	08		               php
.0a52	48		               pha
.0a53	a9 0e		               lda  #14
.0a55	8d 1a 0b	               sta  characterset
.0a58	20 d2 ff	               jsr  $ffd2
.0a5b	68		               pla
.0a5c	28		               plp
.0a5d	20 1b 0b	               jsr cls
.0a60	20 36 0e	               jsr  push
.0a63	a2 b1		               ldx  #<line
.0a65	a0 09		               ldy  #>line
.0a67	20 38 0b	               jsr  puts
.0a6a	20 75 0e	               jsr  pull
.0a6d	20 36 0e	               jsr  push
.0a70	a2 54		               ldx  #<headera
.0a72	a0 08		               ldy  #>headera
.0a74	20 38 0b	               jsr  puts
.0a77	20 75 0e	               jsr  pull
.0a7a	20 36 0e	               jsr  push
.0a7d	a2 7b		               ldx  #<headerb
.0a7f	a0 08		               ldy  #>headerb
.0a81	20 38 0b	               jsr  puts
.0a84	20 75 0e	               jsr  pull
.0a87	20 36 0e	               jsr  push
.0a8a	a2 b1		               ldx  #<line
.0a8c	a0 09		               ldy  #>line
.0a8e	20 38 0b	               jsr  puts
.0a91	20 75 0e	               jsr  pull
.0a94	20 36 0e	               jsr  push
.0a97	a2 b1		               ldx  #<line
.0a99	a0 09		               ldy  #>line
.0a9b	20 38 0b	               jsr  puts
.0a9e	20 75 0e	               jsr  pull
.0aa1	20 36 0e	               jsr  push
.0aa4	a2 d7		               ldx  #<shortcuts
.0aa6	a0 08		               ldy  #>shortcuts
.0aa8	20 38 0b	               jsr  puts
.0aab	20 75 0e	               jsr  pull
.0aae	20 36 0e	               jsr  push
.0ab1	a2 5d		               ldx  #<aidetext
.0ab3	a0 09		               ldy  #>aidetext
.0ab5	20 38 0b	               jsr  puts
.0ab8	20 75 0e	               jsr  pull
.0abb	20 36 0e	               jsr  push
.0abe	a2 b1		               ldx  #<line
.0ac0	a0 09		               ldy  #>line
.0ac2	20 38 0b	               jsr  puts
.0ac5	20 75 0e	               jsr  pull
.0ac8	20 60 12	               jsr  anykey
.0acb	20 1b 0b	               jsr  cls
.0ace	60		               rts
.0acf			libtest03
.0acf	08		               php
.0ad0	48		               pha
.0ad1			nexta
.0ad1	20 36 0e	               jsr  push
.0ad4	a2 da		               ldx  #<dataloc
.0ad6	a0 09		               ldy  #>dataloc
.0ad8	20 c1 0b	               jsr  putscxy
.0adb	20 75 0e	               jsr  pull
.0ade	48		               pha
.0adf	a9 07		               lda  #cyellow
.0ae1	8d 86 02	               sta  bascol
.0ae4	68		               pla
.0ae5			again
.0ae5	a9 37		               lda  #55
.0ae7	20 17 0e	               jsr  b_fac1powfac2
.0aea	20 0a 0d	               jsr  b_outsub
.0aed	68		out            pla
.0aee	28		               plp
.0aef	60		               rts
>0af0	a6		car            .byte     166
>0af1	3a 30		valeur         .word     12346

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0af3	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0af7	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0afb			libtart

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0afb			scrmaninit
.0afb	20 36 0e	               jsr  push
.0afe	a9 06		               lda  #vbleu
.0b00	8d 21 d0	               sta  vicbackcol
.0b03	a9 05		               lda  #vvert
.0b05	8d 20 d0	               sta  vicbordcol
.0b08	a9 01		               lda  #vblanc
.0b0a	8d 86 02	               sta  bascol
.0b0d	ad 00 04	               lda  scrnram
.0b10	8d 00 04	               sta  scrnram
.0b13	20 1b 0b	               jsr  cls
.0b16	20 75 0e	               jsr  pop
.0b19	60		               rts
>0b1a	8e		characterset   .byte b_uppercase
.0b1b			cls
.0b1b	08		               php
.0b1c	48		               pha
.0b1d	a9 93		               lda  #$93
.0b1f	20 32 0b	               jsr  putch
.0b22	68		               pla
.0b23	28		               plp
.0b24	60		               rts
.0b25			putnch
.0b25	08		               php
.0b26	e0 00		               cpx  #$00
.0b28	f0 06		               beq  out
.0b2a	20 d2 ff	again          jsr  $ffd2
.0b2d	ca		               dex
.0b2e	d0 fa		               bne  again
.0b30	28		out            plp
.0b31	60		               rts
.0b32			putch
.0b32	08		               php
.0b33	20 d2 ff	               jsr  $ffd2
.0b36	28		               plp
.0b37	60		               rts
.0b38			puts
.0b38	20 36 0e	               jsr  push
.0b3b	86 fb		               stx  zpage1
.0b3d	84 fc		               sty  zpage1+1
.0b3f	a0 00		               ldy  #0
.0b41	b1 fb		next           lda  (zpage1),y
.0b43	f0 09		               beq  exit
.0b45	20 32 0b	               jsr  putch
.0b48	20 3d 0f	               jsr  inczp1
.0b4b	4c 41 0b	               jmp  next
.0b4e	20 75 0e	exit           jsr  pop
.0b51	60		               rts
.0b52			gotoxy
.0b52	08		               php
.0b53	18		               clc
.0b54	8a		               txa
.0b55	48		               pha
.0b56	98		               tya
.0b57	aa		               tax
.0b58	68		               pla
.0b59	a8		               tay
.0b5a	20 f0 ff	               jsr  kplot
.0b5d	28		               plp
.0b5e	60		               rts
.0b5f			cursor
=$0286			bascol    =    $0286
.0b5f	08		               php            ;tourlou
.0b60	48		               pha
.0b61	90 12		               bcc  restore
.0b63	20 f0 ff	               jsr  kplot
.0b66	8c 87 0b	               sty  cx
.0b69	8e 88 0b	               stx  cy
.0b6c	ad 86 02	               lda  bascol
.0b6f	8d 89 0b	               sta  bcol
.0b72	4c 84 0b	               jmp  out
.0b75	ae 88 0b	restore        ldx  cy
.0b78	ac 87 0b	               ldy  cx
.0b7b	20 f0 ff	               jsr  kplot
.0b7e	ad 89 0b	               lda  bcol
.0b81	8d 86 02	               sta  bascol
.0b84	68		out            pla
.0b85	28		               plp
.0b86	60		               rts
>0b87	00		cx   .byte     $00
>0b88	00		cy   .byte     $00
>0b89	00		bcol .byte     $00
.0b8a			cursave
.0b8a	08		               php
.0b8b	38		               sec
.0b8c	20 5f 0b	               jsr  cursor
.0b8f	28		               plp
.0b90	60		               rts
.0b91			curput
.0b91	08		               php
.0b92	18		               clc
.0b93	20 5f 0b	               jsr  cursor
.0b96	28		               plp
.0b97	60		               rts
.0b98			putsxy
.0b98	20 36 0e	               jsr  push
.0b9b	86 fb		               stx  zpage1
.0b9d	84 fc		               sty  zpage1+1
.0b9f	a0 00		               ldy  #$00
.0ba1	b1 fb		               lda  (zpage1),y
.0ba3	aa		               tax
.0ba4	20 3d 0f	               jsr  inczp1
.0ba7	b1 fb		               lda  (zpage1),y
.0ba9	a8		               tay
.0baa	20 52 0b	               jsr  gotoxy
.0bad	20 3d 0f	               jsr  inczp1
.0bb0	a6 fb		               ldx  zpage1
.0bb2	a4 fc		               ldy  zpage1+1
.0bb4	20 38 0b	               jsr  puts
.0bb7	20 75 0e	               jsr  pop
.0bba	60		               rts
>0bbb	00 00		straddr   .word     $00
>0bbd	00		px        .byte     $00
>0bbe	00		py        .byte     $00
>0bbf	00 00		zp1       .word     $00
.0bc1			putscxy
.0bc1	20 36 0e	               jsr  push
.0bc4	84 fc		               sty  zpage1+1
.0bc6	86 fb		               stx  zpage1
.0bc8	ad 86 02	               lda  bascol
.0bcb	8d eb 0b	               sta  bc
.0bce	a0 00		               ldy #$00
.0bd0	b1 fb		               lda  (zpage1),y
.0bd2	8d 86 02	               sta  bascol
.0bd5	20 3d 0f	               jsr  inczp1
.0bd8	a6 fb		               ldx  zpage1
.0bda	a4 fc		               ldy  zpage1+1
.0bdc	20 98 0b	               jsr  putsxy
.0bdf	ad eb 0b	               lda  bc
.0be2	8d 86 02	               sta  bascol
.0be5	20 75 0e	               jsr  pop
.0be8	60		               rts
>0be9	00 00		straddr  .word      $00
>0beb	00		bc       .byte      $00
>0bec	00 00		zp1      .word      $00
.0bee			putrahex
.0bee	08		               php
.0bef	48		               pha
.0bf0	20 68 10	               jsr  atohex
.0bf3	a9 07		               lda  #<a2hexstr
.0bf5	a0 10		               ldy  #>a2hexstr
.0bf7	20 38 0b	               jsr  puts
.0bfa	68		               pla
.0bfb	28		               plp
.0bfc	60		               rts
.0bfd			kputrahexxy
.0bfd			bputrahexxy
.0bfd			putrahexxy
.0bfd	08		               php
.0bfe	20 68 10	               jsr  atohex
.0c01	a9 04		               lda  #<a2hexpos
.0c03	a0 10		               ldy  #>a2hexpos
.0c05	20 98 0b	               jsr  putsxy
.0c08	68		               pla
.0c09	28		               plp
.0c0a	60		               rts
.0c0b			putrahexcxy
.0c0b	08		               php
.0c0c	20 68 10	               jsr  atohex
.0c0f	a9 04		               lda  #<a2hexpos
.0c11	a0 10		               ldy  #>a2hexpos
.0c13	20 c1 0b	               jsr  putscxy
.0c16	68		               pla
.0c17	28		               plp
.0c18	60		               rts
.0c19			setinverse
.0c19	48		               pha
.0c1a	a9 12		               lda  #$12
.0c1c	20 d2 ff	               jsr  $ffd2
.0c1f	68		               pla
.0c20	60		               rts
.0c21			clrinverse
.0c21	48		               pha
.0c22	a9 92		               lda  #$92
.0c24	20 d2 ff	               jsr  $ffd2
.0c27	68		               pla
.0c28	60		               rts

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2-math.asm

.0c29			b_math_template
.0c29	20 36 0e				jsr	push
.0c2c	20 75 0e				jsr	pop
.0c2f	60					rts
>0c30	00		b_bufflenght	.byte	$00
>0c31	00 00 00 00	b_multresult	.word 	$0000,$0000,$0000
>0c35	00 00
.0c37			b_pr_ax_str
.0c37	20 36 0e				jsr	push
.0c3a	20 cd bd				jsr	b_axout
.0c3d	20 75 0e				jsr	pop
.0c40	60					rts
.0c41			b_getascnum
.0c41	20 36 0e				jsr	push
.0c44	20 bf e3				jsr	b_intcgt		; Initialyse charget
.0c47	20 61 0c				jsr	b_clearbuff	; Clear basic input buffer
.0c4a	20 f9 ab				jsr	b_prompt		; Prompt for ? and fill buffer by reading...
.0c4d	86 7a					stx	$7a			; X and Y points to $01ff on return.
.0c4f	84 7b					sty	$7b
.0c51	20 73 00				jsr	b_chrget
.0c54	20 f3 bc				jsr	b_ascflt		; Convert ASCII string at 0200 to FAC1 FP.
.0c57	20 dd bd				jsr	b_facasc		; Converts FAC1 to ASCII string at 100.
.0c5a	20 f7 0c				jsr	b_getbufflen	; Calculate lenght of buff and store in var.
.0c5d	20 75 0e				jsr	pop
.0c60	60					rts
.0c61			b_clearbuff
.0c61	20 36 0e				jsr	push
.0c64	a9 00					lda	#$00
.0c66	a0 59					ldy	#$59
.0c68	99 00 02	clear		sta	$0200,y		; Clear Basic input buffer
.0c6b	88					dey
.0c6c	d0 fa					bne	clear		; 60 bytes.
.0c6e	20 75 0e				jsr	pop
.0c71	60					rts
.0c72			b_printbuff
.0c72	20 36 0e				jsr	push
.0c75	a9 00					lda	#$00			; Set $22 to point to string at 100
.0c77	85 22					sta	$22
.0c79	a9 01					lda	#$01
.0c7b	85 23					sta	$23
.0c7d	ad 30 0c				lda	b_bufflenght
.0c80	20 24 ab				jsr	b_strout
.0c83	20 75 0e				jsr	pop
.0c86	60					rts
.0c87			b_insub
.0c87	20 36 0e				jsr	push
.0c8a	20 bf e3				jsr	b_intcgt	; Initialize CHRGET.
.0c8d	20 61 0c				jsr	b_clearbuff
.0c90	20 f9 ab				jsr	b_prompt
.0c93	86 7a					stx	$7a
.0c95	84 7b					sty	$7b
.0c97	20 73 00				jsr	b_chrget
.0c9a	20 f3 bc				jsr	b_ascflt	; Convert ascii string to floating point in FAC1.
.0c9d	20 75 0e				jsr	pop
.0ca0	60					rts
.0ca1			b_readmemfloat
.0ca1	20 36 0e				jsr	push
.0ca4	20 bf e3				jsr	b_intcgt	; Initialize CHRGET.
.0ca7	a2 83					ldx	#$83		; Set pointer to fvar as location for var minus 1
.0ca9	a0 c5					ldy	#$c5
.0cab	86 7a					stx	$7a
.0cad	84 7b					sty	$7b
.0caf	20 73 00				jsr	b_chrget
.0cb2	20 f3 bc				jsr	b_ascflt	; Convert ascii string to floating point in FAC1.
.0cb5	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0cb8	20 f7 0c				jsr	b_getbufflen
.0cbb	20 75 0e				jsr	pop
.0cbe	60					rts
.0cbf			b_mul2fptomem
.0cbf	20 36 0e				jsr	push
.0cc2	20 87 0c				jsr	b_insub		; Input first number.
.0cc5	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057.
.0cc8	20 87 0c				jsr	b_insub		; Input second number.
.0ccb	a9 57					lda	#$57
.0ccd	a0 00					ldy	#$00			; Point to 1st number.
.0ccf	20 28 ba				jsr	b_f1xfv		; FAC1 = FAC1 X FVAR.
.0cd2	a2 31					ldx	#<b_multresult	; Set pointer to area to copy result to.
.0cd4	a0 0c					ldy	#>b_multresult
.0cd6	20 d4 bb				jsr	b_f1tmem		; Copy FAC1 to memory.
.0cd9	20 75 0e				jsr	pop
.0cdc	60					rts
.0cdd			b_mul2fptoasc
.0cdd	20 36 0e				jsr	push
.0ce0	20 87 0c				jsr	b_insub		; Get first number.
.0ce3	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057.
.0ce6	20 87 0c				jsr	b_insub	;	 Get second number.
.0ce9	a9 57					lda	#$57
.0ceb	a0 00					ldy	#$00			; Set pointer to FVAR.
.0ced	20 28 ba				jsr	b_f1xfv		; FAC1 = FAC1 x FVAR.
.0cf0	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0cf3	20 75 0e				jsr	pop
.0cf6	60					rts
.0cf7			b_getbufflen
.0cf7	20 36 0e				jsr	push
.0cfa	a0 ff					ldy	#$ff
.0cfc	c8		nxtchar		iny				; Determine lenght of string by ...
.0cfd	b9 00 01				lda	$0100,y		; ... searching for $00 EOS byte.
.0d00	d0 fa					bne	nxtchar
.0d02	c8					iny
.0d03	8c 30 0c				sty	b_bufflenght	; Store buffer lenght in common variable.
.0d06	20 75 0e				jsr	pop
.0d09	60					rts
.0d0a			b_outsub
.0d0a	20 36 0e				jsr	push
.0d0d	20 f7 0c				jsr	b_getbufflen	; Calculate lenght of buff and store in var.
.0d10	20 72 0c				jsr	b_printbuff	; Print buffer content on output device.
.0d13	20 f7 0c				jsr	b_getbufflen	; Calculate lenght of buff and store in var.
.0d16	20 75 0e				jsr	pop
.0d19	60					rts
.0d1a			b_fac1x10
.0d1a	20 36 0e				jsr	push
.0d1d	20 87 0c				jsr	b_insub
.0d20	20 e2 ba				jsr	b_f1x10	; FAC1 = FAC1 X 10
.0d23	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0d26	20 75 0e				jsr	pop
.0d29	60					rts
.0d2a			b_fac1d10
.0d2a	20 36 0e				jsr	push
.0d2d	20 87 0c				jsr	b_insub		; Get first number.
.0d30	20 2b bc				jsr	b_sgnf1
.0d33	48					pha
.0d34	20 fe ba				jsr	b_f1d10		; FAC1 = FAC1 / 10
.0d37	68					pla
.0d38	aa					tax
.0d39	e8					inx
.0d3a	d0 04					bne	notneg
.0d3c	a9 80					lda	#$80		; On force le bit de signe ...
.0d3e	85 66					sta	$66		; de FAC1 a 1 (neg)
.0d40	20 dd bd	notneg		jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0d43	20 75 0e				jsr	pop
.0d46	60					rts
.0d47			b_fac1square
.0d47	20 36 0e				jsr	push
.0d4a	20 87 0c				jsr	b_insub		; Get first number.
.0d4d	20 0c bc				jsr	b_f1tf2		; Copy FAC1 to FAC2.
.0d50	a5 61					lda	$61			; get exponent of FAC1
.0d52	20 2b ba				jsr	b_f1xf2		; FAC1 = FAC1 X FAC2
.0d55	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0d58	20 75 0e				jsr	pop
.0d5b	60					rts
.0d5c			b_fvardfac1
.0d5c	20 36 0e				jsr	push
.0d5f	20 87 0c				jsr	b_insub		; Get first number.
.0d62	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.0d65	20 87 0c				jsr	b_insub		; Get second number.
.0d68	a9 57					lda	#$57
.0d6a	a0 00					ldy	#$00
.0d6c	20 0f bb				jsr	b_fvdf1		; FAC1 = FVAR / FAC1
.0d6f	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0d72	20 75 0e				jsr	pop
.0d75	60					rts
.0d76			b_fac2dfac1
.0d76	20 36 0e				jsr	push
.0d79	20 87 0c				jsr	b_insub		; Get first number.
.0d7c	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.0d7f	20 87 0c				jsr	b_insub		; Get second number.
.0d82	a9 57					lda	#$57
.0d84	a0 00					ldy	#$00
.0d86	20 8c ba				jsr	b_memtf2		; copy memory to FAC2
.0d89	a5 61					lda	$61			; get exponent of FAC1
.0d8b	20 12 bb				jsr	b_f2df1		; FAC1 = FAC2 / FAC1
.0d8e	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0d91	20 75 0e				jsr	pop
.0d94	60					rts
.0d95			b_fac1pfvar
.0d95	20 36 0e				jsr	push
.0d98	20 87 0c				jsr	b_insub		; Get first number.
.0d9b	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.0d9e	20 87 0c				jsr	b_insub		; Get second number.
.0da1	a9 57					lda	#$57
.0da3	a0 00					ldy	#$00
.0da5	20 67 b8				jsr	b_f1pfv		; FAC1 = FAC1 + FVAR
.0da8	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0dab	20 75 0e				jsr	pop
.0dae	60					rts
.0daf			b_fac2sfac1
.0daf	20 36 0e				jsr	push
.0db2	20 87 0c				jsr	b_insub		; Get first number.
.0db5	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.0db8	20 87 0c				jsr	b_insub		; Get second number.
.0dbb	a9 57					lda	#$57
.0dbd	a0 00					ldy	#$00
.0dbf	20 8c ba				jsr	b_memtf2		; copy memory to FAC2
.0dc2	20 53 b8				jsr	b_f2sf1		; FAC1 = FAC2 + FAC1
.0dc5	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0dc8	20 75 0e				jsr	pop
.0dcb	60					rts
.0dcc			b_fvarsfac1
.0dcc	20 36 0e				jsr	push
.0dcf	20 87 0c				jsr	b_insub		; Get first number.
.0dd2	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.0dd5	20 87 0c				jsr	b_insub		; Get second number.
.0dd8	a9 57					lda	#$57
.0dda	a0 00					ldy	#$00
.0ddc	20 50 b8				jsr	b_fvsf1		; FAC1 = FVAR + FAC1
.0ddf	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0de2	20 75 0e				jsr	pop
.0de5	60					rts
.0de6			b_accpfac1
.0de6	20 36 0e				jsr	push
.0de9	48					pha
.0dea	20 87 0c				jsr	b_insub		; Get first number.
.0ded	68					pla
.0dee	20 7e bd				jsr	b_f1pacc
.0df1	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0df4	20 75 0e				jsr	pop
.0df7	60					rts
.0df8			b_fac2pfac1
.0df8	20 36 0e				jsr	push
.0dfb	20 87 0c				jsr	b_insub		; Get first number.
.0dfe	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.0e01	20 87 0c				jsr	b_insub		; Get second number.
.0e04	a9 57					lda	#$57
.0e06	a0 00					ldy	#$00
.0e08	20 8c ba				jsr	b_memtf2		; copy memory to FAC2
.0e0b	a5 61					lda	$61			; get exponent of FAC1
.0e0d	20 6a b8				jsr	b_f1pf2
.0e10	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0e13	20 75 0e				jsr	pop
.0e16	60					rts
.0e17			b_fac1powfac2
.0e17	20 36 0e				jsr	push
.0e1a	20 87 0c				jsr	b_insub		; Get first number.
.0e1d	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.0e20	20 87 0c				jsr	b_insub		; Get second number.
.0e23	a9 57					lda	#$57
.0e25	a0 00					ldy	#$00
.0e27	20 8c ba				jsr	b_memtf2		; copy memory to FAC2
.0e2a	a5 61					lda	$61			; get exponent of FAC1
.0e2c	20 7b bf				jsr	b_expon
.0e2f	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0e32	20 75 0e				jsr	pop
.0e35	60					rts

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.0e36			push
.0e36	08		          php            ; stack : flg, pcl, pch
.0e37	78		          sei
.0e38	8d 72 0e	          sta  ra        ; save a
.0e3b	68		          pla            ; stack : pcl, pch
.0e3c	8d 71 0e	          sta  rp        ; save rp
.0e3f	68		          pla            ; stack : pch
.0e40	8d 73 0e	          sta  pc        ; save pcl
.0e43	68		          pla            ; stack : -
.0e44	8d 74 0e	          sta  pc+1      ; save pch
.0e47	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0e49	48		          pha            ; stack : zp1l
.0e4a	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0e4c	48		          pha            ; stack : zp1h, zp1l
.0e4d	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0e4f	48		          pha            ; stack : zp2l, zp1h, zp1l
.0e50	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0e52	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0e53	ad 71 0e	          lda  rp        ; get rp
.0e56	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0e57	ad 72 0e	          lda  ra        ; get a
.0e5a	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0e5b	8a		          txa            ; get x
.0e5c	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e5d	98		          tya            ; get y
.0e5e	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e5f	ad 74 0e	          lda  pc+1      ; get pch
.0e62	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e63	ad 73 0e	          lda  pc        ; get pcl
.0e66	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e67	ad 71 0e	          lda  rp        ; get rp
.0e6a	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e6b	ad 72 0e	          lda  ra        ; get a
.0e6e	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e6f	58		          cli
.0e70	60		          rts
>0e71	00		rp        .byte     0
>0e72	00		ra        .byte     0
>0e73	00 00		pc        .word     0
.0e75			pull
.0e75			pop
.0e75	78		          sei
.0e76	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e77	8d aa 0e	          sta  pc        ; save pcl
.0e7a	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e7b	8d ab 0e	          sta  pc+1      ; save pch
.0e7e	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e7f	a8		          tay            ; set y
.0e80	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0e81	aa		          tax            ; set x
.0e82	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0e83	8d a9 0e	          sta  ra        ; save a
.0e86	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0e87	8d a8 0e	          sta  rp        ; save rp
.0e8a	68		          pla            ; stack : zp2l, zp1h, zp1l
.0e8b	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0e8d	68		          pla            ; stack : zp1h, zp1l
.0e8e	85 fd		          sta  zpage2    ; get zpage2 High byte
.0e90	68		          pla            ; stack : zp1l
.0e91	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0e93	68		          pla            ; stack :
.0e94	85 fb		          sta  zpage1    ; get zpage1 High byte
.0e96	ad ab 0e	          lda  pc+1      ; get pch
.0e99	48		          pha            ; stack : pch
.0e9a	ad aa 0e	          lda  pc
.0e9d	48		          pha            ; stack : pcl, pch
.0e9e	ad a8 0e	          lda  rp        ; get rp
.0ea1	48		          pha            ; stack : rp, pcl, pch
.0ea2	ad a9 0e	          lda  ra        ; set ra
.0ea5	58		          cli
.0ea6	28		          plp            ; stack : pcl, pch
.0ea7	60		          rts
>0ea8	00		rp        .byte     0
>0ea9	00		ra        .byte     0
>0eaa	00 00		pc        .word     0

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0eac			blkfill
.0eac	20 36 0e	bf0            jsr  push
.0eaf	20 6b 0f	               jsr  savezp1
.0eb2	84 fc		               sty  zpage1+1
.0eb4	a0 00		               ldy  #$00
.0eb6	84 fb		               sty  zpage1
.0eb8	91 fb		bf1            sta  (zpage1),y
.0eba	c8		               iny
.0ebb	d0 fb		               bne  bf1
.0ebd	20 7a 0f	               jsr  restzp1
.0ec0	20 75 0e	               jsr  pop
.0ec3	60		               rts
.0ec4			memfill
.0ec4	20 36 0e	               jsr  push
.0ec7	20 ac 0e	mf1            jsr  blkfill
.0eca	c8		               iny
.0ecb	ca		               dex
.0ecc	d0 f9		               bne  mf1
.0ece	20 75 0e	               jsr  pop
.0ed1	60		               rts
.0ed2			memmove
.0ed2	20 36 0e	               jsr  push
.0ed5	ba		               tsx            ; On se crée un pointeur ...
.0ed6	8a		               txa
.0ed7	18		               clc
.0ed8	69 0b		               adc  #11
.0eda	a8		               tay
.0edb	a2 06		               ldx  #$06
.0edd	b9 00 01	nextbyte       lda  $0100,y
.0ee0	99 2c 0f	               sta  words,y
.0ee3	c8		               iny
.0ee4	ca		               dex
.0ee5	d0 f6		               bne  nextbyte
.0ee7	ad 2c 0f	               lda  s
.0eea	8d 03 0f	               sta  source+1
.0eed	ad 2d 0f	               lda  s+1
.0ef0	8d 04 0f	               sta  source+2
.0ef3	ad 2e 0f	               lda  d
.0ef6	8d 00 0f	               sta  destin+1
.0ef9	ad 2f 0f	               lda  d+1
.0efc	8d 01 0f	               sta  destin+2
.0eff	ad ff ff	destin         lda  $ffff
.0f02	8d ff ff	source         sta  $ffff
.0f05	ee 00 0f	               inc  destin+1
.0f08	d0 03		               bne  src
.0f0a	ee 01 0f	               inc  destin+2
.0f0d	ee 03 0f	src            inc  source+1
.0f10	d0 03		               bne  cnt
.0f12	ee 04 0f	               inc  source+2
.0f15	ad 30 0f	cnt            lda  compte
.0f18	d0 08		               bne  decit
.0f1a	ad 31 0f	               lda  compte+1
.0f1d	f0 09		               beq  fini
.0f1f	ce 31 0f	               dec  compte+1
.0f22	ce 30 0f	decit          dec  compte
.0f25	4c ff 0e	               jmp  destin
.0f28	20 75 0e	fini           jsr  pop
.0f2b	60		               rts
.0f2c			words
>0f2c	00 00		s         .word     $0000
>0f2e	00 00		d         .word     $0000
>0f30	00 00		compte    .word     $0000
.0f32			decword
.0f32	20 36 0e	               jsr  push
.0f35	86 fd		               stx  zpage2
.0f37	84 fe		               sty  zpage2+1
.0f39	20 75 0e	               jsr  pop
.0f3c	60		               rts
.0f3d			inczpage1
.0f3d			inczp1
.0f3d	08		               php
.0f3e	48		               pha
.0f3f	e6 fb		               inc  zpage1
.0f41	a5 fb		               lda  zpage1
.0f43	d0 02		               bne  nopage
.0f45	e6 fc		               inc  zpage1+1
.0f47	68		nopage         pla
.0f48	28		               plp
.0f49	60		               rts
.0f4a			deczpage1
.0f4a			deczp1
.0f4a	08		                php
.0f4b	48		                pha
.0f4c	c6 fb		                dec  zpage1
.0f4e	d0 02		                bne  nopage
.0f50	c6 fc		                dec  zpage1+1
.0f52	68		nopage          pla
.0f53	28		                plp
.0f54	60		                rts
.0f55			inczpage2
.0f55			inczp2
.0f55	08		               php
.0f56	48		               pha
.0f57	e6 fd		               inc  zpage2
.0f59	a5 fd		               lda  zpage2
.0f5b	d0 02		               bne  nopage
.0f5d	e6 fe		               inc  zpage2+1
.0f5f	68		nopage         pla
.0f60	28		               plp
.0f61	60		               rts
.0f62			deczpage2
.0f62			deczp2
.0f62	08		               php
.0f63	c6 fd		               dec  zpage2
.0f65	d0 02		               bne  nopage
.0f67	c6 fe		               dec  zpage2+1
.0f69	28		nopage         plp
.0f6a	60		               rts
.0f6b			savezp1
.0f6b	08		               php
.0f6c	48		               pha
.0f6d	a5 fb		               lda  zpage1
.0f6f	8d fc 0f	               sta  zp1
.0f72	a5 fc		               lda  zpage1+1
.0f74	8d fd 0f	               sta  zp1+1
.0f77	68		               pla
.0f78	28		               plp
.0f79	60		               rts
.0f7a			restzp1
.0f7a	08		               php
.0f7b	48		               pha
.0f7c	ad fc 0f	               lda zp1
.0f7f	85 fb		               sta zpage1
.0f81	ad fd 0f	               lda zp1+1
.0f84	85 fc		               sta zpage1+1
.0f86	68		               pla
.0f87	28		               plp
.0f88	60		               rts
.0f89			savezp2
.0f89	08		         php
.0f8a	48		         pha
.0f8b	a5 fd		         lda zpage2
.0f8d	8d fe 0f	         sta zp2
.0f90	a5 fe		         lda zpage2+1
.0f92	8d ff 0f	         sta zp2+1
.0f95	68		         pla
.0f96	28		         plp
.0f97	60		         rts
.0f98			restzp2
.0f98	08		                php
.0f99	48		                pha
.0f9a	ad fe 0f	                lda  zp2
.0f9d	85 fd		                sta  zpage2
.0f9f	ad ff 0f	                lda  zp2+1
.0fa2	85 fe		                sta  zpage2+1
.0fa4	68		                pla
.0fa5	28		                plp
.0fa6	60		                rts
.0fa7			xy2addr
.0fa7	08		                php
.0fa8	48		                pha
.0fa9	8a		                txa
.0faa	48		                pha
.0fab	98		                tya
.0fac	48		                pha
.0fad	ad f7 0f	                lda     addr1+1
.0fb0	8d f9 0f	                sta     addr2+1
.0fb3	ad f6 0f	                lda     addr1
.0fb6	8d f8 0f	                sta     addr2
.0fb9	c0 00		                cpy     #$00
.0fbb	f0 0f		                beq     addx
.0fbd	18		moreline        clc
.0fbe	6d f5 0f	                adc     ymult
.0fc1	90 03		                bcc     norepy
.0fc3	ee f9 0f	                inc     addr2+1
.0fc6	8d f8 0f	norepy          sta     addr2
.0fc9	88		                dey
.0fca	d0 f1		                bne     moreline
.0fcc	8a		addx            txa
.0fcd	18		                clc
.0fce	6d f8 0f	                adc     addr2
.0fd1	90 03		                bcc     thatsit
.0fd3	ee f9 0f	                inc     addr2+1
.0fd6	8d f8 0f	thatsit         sta     addr2
.0fd9	68		                pla
.0fda	a8		                tay
.0fdb	68		                pla
.0fdc	aa		                tax
.0fdd	68		                pla
.0fde	28		                plp
.0fdf	60		                rts
.0fe0			loop
.0fe0	ce 00 10	               dec  loopcount
.0fe3	d0 03		               bne  norep
.0fe5	ce 01 10	               dec  loopcount+1
.0fe8	ad 00 10	norep          lda  loopcount
.0feb	c9 00		               cmp  #$00
.0fed	d0 05		               bne  out
.0fef	4d 01 10	               eor  loopcount+1
.0ff2	c9 ff		               cmp  #$ff
.0ff4	60		out            rts
>0ff5	28		ymult          .byte     40
>0ff6	00 00		addr1          .word     $0000
>0ff8	00 00		addr2          .word     $0000
>0ffa	00 00		bytecnt        .word     $0000
>0ffc	00 00		zp1            .word   $0000
>0ffe	00 00		zp2            .word   $0000
>1000	00 00		loopcount      .word     $0000

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>1002	01		a2hexcol       .byte     1              ; pour aputscxy
>1003	00		a2hexbkcol     .byte     %00000000
.1004			a2hexpos
>1004	00		a2hexpx        .byte     0              ; pour aputsxy
>1005	00		a2hexpy        .byte     0
>1006	24		a2hexprefix    .byte     "$"            ; pour aputs
>1007	00 00		a2hexstr       .word     $00
>1009	00 00		               .word     $00
>100b	00		               .byte     0              ; 0 end string
>100c	30 30 30 30	abin           .null     "00000000"
>1010	30 30 30 30 00
>1015	20 20 20 00	adec           .null     "   "
.1019			putahexfmtxy
.1019	20 36 0e	               jsr  push
.101c	20 68 10	               jsr  atohex
.101f	ae 04 10	               ldx  a2hexpx
.1022	ac 05 10	               ldy  a2hexpy
.1025	20 52 0b	               jsr  gotoxy
.1028	a2 06		               ldx  #<a2hexprefix
.102a	a0 10		               ldy  #>a2hexprefix
.102c	20 38 0b	               jsr  puts
.102f	20 75 0e	               jsr  pop
.1032	60		               rts
.1033			putahexfmt
.1033	20 36 0e	               jsr  push
.1036	20 68 10	               jsr  atohex
.1039	a2 06		               ldx  #<a2hexprefix
.103b	a0 10		               ldy  #>a2hexprefix
.103d	20 38 0b	               jsr  puts
.1040	20 75 0e	               jsr  pop
.1043	60		               rts
.1044			putahex
.1044	20 36 0e	               jsr  push
.1047	20 68 10	               jsr  atohex
.104a	a2 07		               ldx  #<a2hexstr
.104c	a0 10		               ldy  #>a2hexstr
.104e	20 38 0b	               jsr  puts
.1051	20 75 0e	               jsr  pop
.1054	60		               rts
.1055			nibtohex
.1055	08		               php
.1056	29 0f		               and  #$0f
.1058	f8		               sed
.1059	18		               clc
.105a	69 90		               adc  #$90
.105c	69 40		               adc  #$40
.105e	d8		               cld
.105f	28		               plp
.1060	60		               rts
.1061			lsra4bits
.1061	08		               php
.1062	4a		               lsr
.1063	4a		               lsr
.1064	4a		               lsr
.1065	4a		               lsr
.1066	28		               plp
.1067	60		               rts
.1068			atohex
.1068	08		               php
.1069	48		               pha
.106a	48		               pha
.106b	20 61 10	               jsr  lsra4bits
.106e	20 55 10	               jsr  nibtohex
.1071	8d 07 10	               sta  a2hexstr
.1074	68		               pla
.1075	20 55 10	               jsr  nibtohex
.1078	8d 08 10	               sta  a2hexstr+1
.107b	a9 00		               lda  #$00                ; set end of string
.107d	8d 09 10	               sta  a2hexstr+2
.1080	68		               pla
.1081	28		               plp
.1082	60		               rts
.1083			xy2hex
.1083	20 36 0e	               jsr  push
.1086	20 68 10	               jsr  atohex
.1089	8a		               txa
.108a	48		               pha
.108b	20 61 10	               jsr  lsra4bits
.108e	20 55 10	               jsr  nibtohex
.1091	8d 07 10	               sta  a2hexstr
.1094	68		               pla
.1095	20 55 10	               jsr  nibtohex
.1098	8d 08 10	               sta  a2hexstr+1
.109b	98		               tya
.109c	48		               pha
.109d	20 61 10	               jsr  lsra4bits
.10a0	20 55 10	               jsr  nibtohex
.10a3	8d 09 10	               sta  a2hexstr+2
.10a6	68		               pla
.10a7	20 55 10	               jsr  nibtohex
.10aa	8d 0a 10	               sta  a2hexstr+3
.10ad	a9 00		               lda  #$00                ; 0 ended string
.10af	8d 0b 10	               sta  a2hexstr+4
.10b2	20 75 0e	               jsr  pop
.10b5			atobin
.10b5	20 36 0e	               jsr  push
.10b8	a2 08		               ldx  #8
.10ba	a0 00		               ldy  #0
.10bc	18		               clc
.10bd	2a		nextbit        rol
.10be	48		               pha
.10bf	69 00		               adc  #$00
.10c1	29 01		               and  #$01
.10c3	20 55 10	               jsr  nibtohex
.10c6	99 0c 10	               sta  abin,y
.10c9	68		               pla
.10ca	c8		               iny
.10cb	ca		               dex
.10cc	d0 ef		               bne  nextbit
.10ce	a9 00		               lda  #0
.10d0	99 0c 10	               sta  abin,y
.10d3	20 75 0e	               jsr  pull
.10d6	60		               rts
.10d7			putabin
.10d7	20 b5 10	               jsr     atobin
.10da	20 36 0e	               jsr     push
.10dd	a2 0c		               ldx     #<abin
.10df	a0 10		               ldy     #>abin
.10e1	20 38 0b	               jsr     puts
.10e4	20 75 0e	               jsr     pop
.10e7	60		               rts
.10e8			printabin
.10e8	20 36 0e	               jsr     push
.10eb	a2 0c		               ldx     #<abin
.10ed	a0 10		               ldy     #>abin
.10ef	20 38 0b	               jsr     puts
.10f2	20 75 0e	               jsr     pop
.10f5	60		               rts
.10f6			putabinfmt
.10f6	08		               php
.10f7	48		               pha
.10f8	a9 25		               lda     #"%"
.10fa	20 32 0b	               jsr     putch
.10fd	68		               pla
.10fe	20 d7 10	               jsr     putabin
.1101	28		               plp
.1102	60		               rts
.1103			putabinxy
.1103	20 52 0b	               jsr     gotoxy
.1106	20 d7 10	               jsr     putabin
.1109	60		               rts
.110a			putabinfmtxy
.110a	20 52 0b	               jsr     gotoxy
.110d	20 f6 10	               jsr     putabinfmt
.1110	60		               rts
.1111			atodec
.1111	20 36 0e	               jsr  push
.1114	f8		               sed            ; On se place en mode décimal.
.1115	aa		               tax            ; On déplace a dans x.
.1116	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.1118	a9 00		               lda  #$00      ; 0 dans A.
.111a	18		nextbit        clc            ; Bit carry a 0.
.111b	69 01		               adc  #$01      ; Ajoute 1 a A.
.111d	90 01		               bcc  decx      ; Pas de carry, pas de report.
.111f	c8		               iny            ; On incrémente Y
.1120	ca		decx           dex            ; X=X-1
.1121	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.1123	48		               pha            ; A sur le stack.
.1124	98		               tya            ; Y dans A (MSB)
.1125	20 55 10	               jsr  nibtohex  ; a hex petsci ...
.1128	8d 15 10	               sta  adec      ; ... dans tampon.
.112b	68		               pla            ; Récupere A
.112c	48		               pha            ;
.112d	20 55 10	               jsr  nibtohex
.1130	8d 17 10	               sta  adec+2
.1133	68		               pla
.1134	6a		               ror
.1135	6a		               ror
.1136	6a		               ror
.1137	6a		               ror
.1138	20 55 10	               jsr  nibtohex
.113b	8d 16 10	               sta  adec+1
.113e	d8		               cld            ; On revient en mode binaire.
.113f	20 75 0e	               jsr  pull
.1142	60		               rts
.1143			putadec
.1143	20 36 0e	               jsr  push
.1146	20 11 11	               jsr  atodec
.1149	a2 15		               ldx  #<adec
.114b	a0 10		               ldy  #>adec+1
.114d	20 38 0b	               jsr  puts
.1150	20 75 0e	               jsr  pop
.1153	60		               rts

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>1154	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>1158	00 00 00 00 00 00 00 00 00 0d 00 00
>1164	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>1168	00 00 00 00 00 00 00 00 00 00 00 00
>1174	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>1178	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1184	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1188	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1194	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1198	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>11a4	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>11a8	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>11b4	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>11b8	00 00 00 00 00 00 00 00 00 00 00 00
>11c4	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>11c8	00 00 00 00 00 00 00 00 00 00 00 00
>11d4	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>11d8	00 00 00 00 00 00 00 00 00 00 00 00
>11e4	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>11e8	00 00 00 00 00 00 00 00 00 00 00 00
>11f4	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>11f8	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1204	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1208	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1214	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1218	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>1224	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>1228	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>1234	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>1238	00 00 00 00 00 00 00 00 00 00 00 00
>1244	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>1248	00 00 00 00 00 00 00 00 00 00 00 00
.1254			waitstop
.1254	20 36 0e	               jsr  push
.1257	20 ed f6	wait           jsr  k_stop
.125a	d0 fb		               bne  wait
.125c	20 75 0e	               jsr  pop
.125f	60		               rts
.1260			anykey
.1260	08		               php
.1261	48		               pha
.1262	a5 cb		nokey          lda 203
.1264	c9 40		               cmp #64
.1266	f0 fa		               beq nokey
.1268	20 6e 12	               jsr releasekey
.126b	68		               pla
.126c	28		               plp
.126d	60		               rts
.126e			releasekey
.126e	08		               php
.126f	48		               pha
.1270	a5 cb		keypressed     lda 203
.1272	c9 40		               cmp #64
.1274	d0 fa		               bne keypressed
.1276	68		               pla
.1277	28		               plp
.1278	60		               rts
.1279			getkey
.1279	20 e4 ff	again          jsr  getin
.127c	c9 00		               cmp  #0
.127e	f0 f9		               beq  again
.1280	60		               rts
.1281			kbflushbuff
.1281	08		               php
.1282	48		               pha
.1283	20 e4 ff	again          jsr  getin
.1286	c9 00		               cmp  #0
.1288	d0 f9		               bne  again
.128a	68		               pla
.128b	28		               plp
.128c	60		               rts
.128d			waitkey
.128d	20 36 0e	               jsr  push
.1290	8d de 12	               sta  thekey
.1293	20 e4 ff	nope           jsr  getin
.1296	20 d2 ff	               jsr  chrout
.1299	cd de 12	               cmp  thekey
.129c	d0 f5		               bne  nope
.129e	20 d2 ff	               jsr  chrout
.12a1	20 75 0e	               jsr  pop
.12a4	60		               rts
.12a5			waitspace
.12a5	20 36 0e	               jsr  push
.12a8	a9 7f		wait           lda  #$7f  ;%01111111
.12aa	8d 00 dc	               sta  $dc00
.12ad	ad 01 dc	               lda  $dc01
.12b0	29 10		               and  #$10  ;mask %00010000
.12b2	d0 f4		               bne  wait
.12b4	20 75 0e	               jsr  pop
.12b7			waitsstop
.12b7	20 36 0e	               jsr  push
.12ba	20 ed f6	wait           jsr  k_stop  ;%01111111
.12bd	d0 fb		               bne  wait
.12bf	20 75 0e	               jsr  pop
.12c2			waitreturn
.12c2	20 36 0e	               jsr  push
.12c5	ad df 12	               lda  thecount
.12c8	8d 00 04	               sta  scrnram
.12cb	a9 02		               lda  #$02
.12cd	8d 00 d8	               sta  colorram
.12d0	20 e4 ff	nope           jsr  getin
.12d3	c9 0d		nohex          cmp  #$0d
.12d5	d0 f9		               bne  nope
.12d7	ee df 12	               inc  thecount
.12da	20 75 0e	               jsr  pop
.12dd	60		               rts
>12de	00		thekey         .byte   0
>12df	01		thecount       .byte   $01

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.12e0			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.12e0	20 36 0e	                jsr push
.12e3	08		                php
.12e4	8d a4 14	                sta  rega
.12e7	68		                pla
.12e8	8d a7 14	                sta  regp
.12eb	8e a5 14	                stx  regx
.12ee	8c a6 14	                sty  regy
.12f1	ba		                tsx
.12f2	8e a8 14	                stx  regs
.12f5	68		                pla
.12f6	8d ab 14	                sta  regpcl
.12f9	8d ac 14	                sta  regpcl2
.12fc	68		                pla
.12fd	8d a9 14	                sta  regpch
.1300	8d aa 14	                sta  regpch2
.1303	ad a4 14	                lda  rega
.1306	48		                pha
.1307	20 55 10	                jsr  nibtohex
.130a	8d 4e 14	                sta  vala+1
.130d	68		                pla
.130e	20 61 10	                jsr  lsra4bits
.1311	20 55 10	                jsr  nibtohex
.1314	8d 4d 14	                sta  vala
.1317	ad a6 14	                lda  regy
.131a	48		                pha
.131b	20 55 10	                jsr  nibtohex
.131e	8d 62 14	                sta  valy+1
.1321	68		                pla
.1322	20 61 10	                jsr  lsra4bits
.1325	20 55 10	                jsr  nibtohex
.1328	8d 61 14	                sta  valy
.132b	ad a5 14	                lda  regx
.132e	48		                pha
.132f	20 55 10	                jsr  nibtohex
.1332	8d 58 14	                sta  valx+1
.1335	68		                pla
.1336	20 61 10	                jsr  lsra4bits
.1339	20 55 10	                jsr  nibtohex
.133c	8d 57 14	                sta  valx
.133f	ad a7 14	                lda  regp
.1342	48		                pha
.1343	20 55 10	                jsr  nibtohex
.1346	8d 6c 14	                sta  valp+1
.1349	68		                pla
.134a	20 61 10	                jsr  lsra4bits
.134d	20 55 10	                jsr  nibtohex
.1350	8d 6b 14	                sta  valp
.1353	ad a8 14	                lda  regs
.1356	48		                pha
.1357	20 55 10	                jsr  nibtohex
.135a	8d 76 14	                sta  vals+1
.135d	68		                pla
.135e	20 61 10	                jsr  lsra4bits
.1361	20 55 10	                jsr  nibtohex
.1364	8d 75 14	                sta  vals
.1367	18		                clc
.1368	ad ac 14	                lda regpcl2
.136b	69 01		                adc #$01
.136d	8d ac 14	                sta regpcl2
.1370	ad ac 14	                lda regpcl2
.1373	d0 03		                bne noreport
.1375	ee aa 14	                inc regpch2
.1378	ad aa 14	    noreport    lda regpch2
.137b	48		                pha
.137c	20 55 10	                jsr  nibtohex
.137f	8d 81 14	                sta  valpch+1
.1382	68		                pla
.1383	20 61 10	                jsr  lsra4bits
.1386	20 55 10	                jsr  nibtohex
.1389	8d 80 14	                sta  valpch
.138c	ad ac 14	                lda  regpcl2
.138f	48		                pha
.1390	20 55 10	                jsr  nibtohex
.1393	8d 83 14	                sta  valpcl+1
.1396	68		                pla
.1397	20 61 10	                jsr  lsra4bits
.139a	20 55 10	                jsr  nibtohex
.139d	8d 82 14	                sta  valpcl
.13a0	a5 fb		                lda  zpage1
.13a2	48		                pha
.13a3	20 55 10	                jsr  nibtohex
.13a6	8d 91 14	                sta  valz1l
.13a9	68		                pla
.13aa	20 61 10	                jsr  lsra4bits
.13ad	20 55 10	                jsr  nibtohex
.13b0	8d 92 14	                sta  valz1l+1
.13b3	a5 fc		                lda  zpage1+1
.13b5	48		                pha
.13b6	20 55 10	                jsr  nibtohex
.13b9	8d 8f 14	                sta  valz1h
.13bc	68		                pla
.13bd	20 61 10	                jsr  lsra4bits
.13c0	20 55 10	                jsr  nibtohex
.13c3	8d 90 14	                sta  valz1h+1
.13c6	a5 fd		                lda  zpage2
.13c8	48		                pha
.13c9	20 55 10	                jsr  nibtohex
.13cc	8d a0 14	                sta  valz2l
.13cf	68		                pla
.13d0	20 61 10	                jsr  lsra4bits
.13d3	20 55 10	                jsr  nibtohex
.13d6	8d a1 14	                sta  valz2l+1
.13d9	a5 fe		                lda  zpage2+1
.13db	48		                pha
.13dc	20 55 10	                jsr  nibtohex
.13df	8d 9e 14	                sta  valz2h
.13e2	68		                pla
.13e3	20 61 10	                jsr  lsra4bits
.13e6	20 55 10	                jsr  nibtohex
.13e9	8d 9f 14	                sta  valz2h+1
.13ec	20 19 0c	                jsr  setinverse
.13ef	78		                sei
.13f0	a2 46		                ldx  #<srega
.13f2	a0 14		                ldy  #>srega+1
.13f4	20 c1 0b	                jsr  putscxy
.13f7	a2 50		                ldx  #<sregx
.13f9	a0 14		                ldy  #>sregx+1
.13fb	20 c1 0b	                jsr  putscxy
.13fe	a2 5a		                ldx  #<sregy
.1400	a0 14		                ldy  #>sregy+1
.1402	20 c1 0b	                jsr  putscxy
.1405	a2 64		                ldx  #<sregp
.1407	a0 14		                ldy  #>sregp+1
.1409	20 c1 0b	                jsr  putscxy
.140c	a2 6e		                ldx  #<sregs
.140e	a0 14		                ldy  #>sregs+1
.1410	20 c1 0b	                jsr  putscxy
.1413	a2 78		                ldx  #<sregpc
.1415	a0 14		                ldy  #>sregpc+1
.1417	20 c1 0b	                jsr  putscxy
.141a	a2 86		                ldx  #<sregz1
.141c	a0 14		                ldy  #>sregz1+1
.141e	20 c1 0b	                jsr  putscxy
.1421	a2 95		                ldx  #<sregz2
.1423	a0 14		                ldy  #>sregz2+1
.1425	20 c1 0b	                jsr  putscxy
.1428	58		                cli
.1429	20 21 0c	                jsr  clrinverse
.142c	ad a9 14	                lda  regpch
.142f	48		                pha
.1430	ad ab 14	                lda  regpcl
.1433	48		                pha
.1434	ac a6 14	                ldy  regy
.1437	ae a5 14	                ldx  regx
.143a	ad a7 14	                lda  regp
.143d	48		                pha
.143e	ad a4 14	                lda  rega
.1441	28		                plp
.1442	20 75 0e	                jsr pop
.1445	60		                rts
>1446	01 00 17	srega   .byte   colr,coln,line
>1449	20 41 3a 24	        .text   ' a:$' ;4,24
>144d	00 00 00	vala    .byte   0,0,0
>1450	01 06 17	sregx   .byte   colr,coln+6,line
>1453	20 58 3a 24	        .text   ' x:$' ;4,24
>1457	00 00 00	valx    .byte   0,0,0
>145a	01 0c 17	sregy   .byte   colr,coln+12,line
>145d	20 59 3a 24	        .text   ' y:$' ;4,24
>1461	00 00 00	valy    .byte   0,0,0
>1464	01 12 17	sregp   .byte   colr,coln+18,line
>1467	20 50 3a 24	        .text   ' p:$' ;4,24
>146b	00 00 00	valp    .byte   0,0,0
>146e	01 18 17	sregs   .byte   colr,coln+24,line
>1471	20 53 3a 24	        .text   ' s:$' ;4,24
>1475	00 00 00	vals    .byte   0,0,0
>1478	01 1e 17	sregpc  .byte   colr,coln+30,line
>147b	20 50 43 3a	        .text   ' pc:$' ;4,24
>147f	24
>1480	00 00		valpch  .byte   0,0
>1482	00 00 20 00	valpcl  .byte   0,0,32,0
>1486	01 03 18	sregz1  .byte   colr,coln+3,line+1
>1489	20 5a 50 31	        .text   ' zp1:$' ;4,24
>148d	3a 24
>148f	00 00		valz1h  .byte   0,0
>1491	00 00 20 00	valz1l  .byte   0,0,32,0
>1495	01 0f 18	sregz2  .byte   colr,coln+15,line+1
>1498	20 5a 50 32	        .text   ' zp2:$' ;4,24
>149c	3a 24
>149e	00 00		valz2h  .byte   0,0
>14a0	00 00 20 00	valz2l  .byte   0,0,32,0
>14a4	00		rega    .byte   0
>14a5	00		regx    .byte   0
>14a6	00		regy    .byte   0
>14a7	00		regp    .byte   0
>14a8	00		regs    .byte   0
>14a9	00		regpch  .byte   0
>14aa	00		regpch2 .byte   0
>14ab	00		regpcl  .byte   0
>14ac	00		regpcl2 .byte   0
>14ad	00		vzp1h   .byte   0
>14ae	00		vzp1l   .byte   0
>14af	00		vzp2h   .byte   0
>14b0	00		vzp2l   .byte   0

;******  Return to file: libtest03.asm


;******  End of listing

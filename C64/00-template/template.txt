
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L template.txt -o template.prg template.asm
; Wed Oct 30 20:36:52 2024

;Offset	;Hex		;Source

;******  Processing input file: template.asm

="20240704-235234"	                Version = "20240704-235234"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c 54 08	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: template.asm

.0854			main
.0854	20 15 0b	               jsr scrmaninit
.0857	08		               php
.0858	48		               pha
.0859	a9 08		               lda  #$08
.085b	20 d2 ff	               jsr  $ffd2
.085e	68		               pla
.085f	28		               plp
.0860	20 96 08	               jsr aide
.0863	20 5b 10	               jsr anykey
.0866	20 f5 0a	               jsr template
.0869	08		               php
.086a	48		               pha
.086b	a9 09		               lda  #$09
.086d	20 d2 ff	               jsr  $ffd2
.0870	68		               pla
.0871	28		               plp
.0872	08		               php
.0873	48		               pha
.0874	a9 8e		               lda  #b_uppercase
.0876	8d 34 0b	               sta  characterset
.0879	20 d2 ff	               jsr  $ffd2
.087c	68		               pla
.087d	28		               plp
.087e	20 35 0b	               jsr  cls
.0881	48		               pha
.0882	a9 0c		               lda  #cgrismoyen
.0884	8d 20 d0	               sta  $d020
.0887	68		               pla
.0888	48		               pha
.0889	a9 0b		               lda  #cgrisfonce
.088b	8d 21 d0	               sta  $d021
.088e	68		               pla
.088f	48		               pha
.0890	a9 0f		               lda  #cgrispale
.0892	8d 86 02	               sta  bascol
.0895	68		               pla
.0896			aide
.0896	08		               php
.0897	48		               pha
.0898	a9 0e		               lda  #14
.089a	8d 34 0b	               sta  characterset
.089d	20 d2 ff	               jsr  $ffd2
.08a0	68		               pla
.08a1	28		               plp
.08a2	20 35 0b	               jsr cls
.08a5	20 43 0c	               jsr  push
.08a8	a2 cc		isx            ldx  #<line
.08aa	a0 0a		isy            ldy  #>line
.08ac	20 52 0b	               jsr  puts
.08af	20 82 0c	               jsr  pull
.08b2	20 43 0c	               jsr  push
.08b5	a2 f4		isx            ldx  #<headera
.08b7	a0 08		isy            ldy  #>headera
.08b9	20 52 0b	               jsr  puts
.08bc	20 82 0c	               jsr  pull
.08bf	20 43 0c	               jsr  push
.08c2	a2 7a		isx            ldx  #<headerb
.08c4	a0 09		isy            ldy  #>headerb
.08c6	20 52 0b	               jsr  puts
.08c9	20 82 0c	               jsr  pull
.08cc	20 43 0c	               jsr  push
.08cf	a2 fa		isx            ldx  #<shortcuts
.08d1	a0 09		isy            ldy  #>shortcuts
.08d3	20 52 0b	               jsr  puts
.08d6	20 82 0c	               jsr  pull
.08d9	20 43 0c	               jsr  push
.08dc	a2 7c		isx            ldx  #<aidetext
.08de	a0 0a		isy            ldy  #>aidetext
.08e0	20 52 0b	               jsr  puts
.08e3	20 82 0c	               jsr  pull
.08e6	20 43 0c	               jsr  push
.08e9	a2 cc		isx            ldx  #<line
.08eb	a0 0a		isy            ldy  #>line
.08ed	20 52 0b	               jsr  puts
.08f0	20 82 0c	               jsr  pull
.08f3	60		               rts
.08f4			headera
>08f4	20 20 20 20	               .text          "       SOME COMMODORE BOOK TITLE"
>08f8	20 20 20 d3 cf cd c5 20 c3 cf cd cd cf c4 cf d2
>0908	c5 20 c2 cf cf cb 20 d4 c9 d4 cc c5
>0914	0d		               .byte   $0d
>0915	20 20 20 20	               .text          "     FOR THE COMMODORE 64 OR VIC 20"
>0919	20 c6 cf d2 20 d4 c8 c5 20 c3 cf cd cd cf c4 cf
>0929	d2 c5 20 36 34 20 cf d2 20 d6 c9 c3 20 32 30
>0938	0d		               .byte   $0d
>0939	20 20 20 20	               .text          "       Book wtitten by Some Author"
>093d	20 20 20 c2 4f 4f 4b 20 57 54 49 54 54 45 4e 20
>094d	42 59 20 d3 4f 4d 45 20 c1 55 54 48 4f 52
>095b	0d		               .byte   $0d
>095c	20 20 20 20	               .text          "          ISBN 0-7156-1899-7"
>0960	20 20 20 20 20 20 c9 d3 c2 ce 20 30 2d 37 31 35
>0970	36 2d 31 38 39 39 2d 37
>0978	0d 00		               .byte   $0d,0
>097a	20 20 20 20	headerb        .text          "            template (pxx)"
>097e	20 20 20 20 20 20 20 20 54 45 4d 50 4c 41 54 45
>098e	20 28 50 58 58 29
>0994	0d		               .byte   $0d
>0995	20 20 20 20	               .text          "     (c) XXXX nom du Programmeur"
>0999	20 28 43 29 20 d8 d8 d8 d8 20 4e 4f 4d 20 44 55
>09a9	20 d0 52 4f 47 52 41 4d 4d 45 55 52
>09b5	0d		               .byte   $0d
>09b6	20 20 20 20	               .text          "      Code par Daniel Lafrance."
>09ba	20 20 c3 4f 44 45 20 50 41 52 20 c4 41 4e 49 45
>09ca	4c 20 cc 41 46 52 41 4e 43 45 2e
>09d5	0d		               .byte   $0d
>09d6	20 20 20 20	               .text   format("         Version: %s.",Version)
>09da	20 20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30
>09ea	32 34 30 37 30 34 2d 32 33 35 32 33 34 2e
>09f8	0d 00		               .byte   $0d,0
>09fa	0d		shortcuts      .byte   $0d
>09fb	20 2d 2d 2d	               .text          " -------- S H O R T - C U T S ---------"
>09ff	2d 2d 2d 2d 2d 20 d3 20 c8 20 cf 20 d2 20 d4 20
>0a0f	2d 20 c3 20 d5 20 d4 20 d3 20 2d 2d 2d 2d 2d 2d
>0a1f	2d 2d 2d
>0a22	0d 0d		               .byte   $0d, $0d
>0a24	20 54 45 4d	               .text   format(" template.: SYS%05d ($%04X)",main, main)
>0a28	50 4c 41 54 45 2e 3a 20 d3 d9 d3 30 32 31 33 32
>0a38	20 28 24 30 38 35 34 29
>0a40	0d		               .byte   $0d
>0a41	20 41 49 44	               .text   format(" aide.....: SYS%05d ($%04X)",aide, aide)
>0a45	45 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 31 39 38
>0a55	20 28 24 30 38 39 36 29
>0a5d	0d		               .byte   $0d
>0a5e	20 43 4c 53	               .text   format(" cls......: SYS%05d ($%04X)",cls, cls)
>0a62	2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 38 36 39
>0a72	20 28 24 30 c2 33 35 29
>0a7a	0d 00		               .byte   $0d,0
>0a7c	20 cc 41 4e	aidetext       .text   format(" Lancement: SYS%05d ($%04X)",template, template)
>0a80	43 45 4d 45 4e 54 3a 20 d3 d9 d3 30 32 38 30 35
>0a90	20 28 24 30 c1 c6 35 29
>0a98	0d 0d		               .byte   $0d, $0d
>0a9a	20 20 20 20	               .text   format("    ex.: SYS%05d",template)
>0a9e	45 58 2e 3a 20 d3 d9 d3 30 32 38 30 35
>0aab	0d		               .byte   $0d
>0aac	20 20 20 20	               .text   format("    for i=0to100:SYS%05d:next",template)
>0ab0	46 4f 52 20 49 3d 30 54 4f 31 30 30 3a d3 d9 d3
>0ac0	30 32 38 30 35 3a 4e 45 58 54
>0aca	0d 00		               .byte   $0d,0
>0acc	20 2d 2d 2d	line           .text          " --------------------------------------"
>0ad0	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0ae0	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0af0	2d 2d 2d
>0af3	0d 00		               .byte   $0d,0
.0af5			template
.0af5	48		               pha
.0af6	ad 20 d0	               lda vicbordcol
.0af9	8d 0c 0b	               sta byte
.0afc	a9 10		               lda #$10
.0afe	8d 20 d0	               sta vicbordcol
.0b01	20 5b 10	               jsr anykey
.0b04	ad 0c 0b	               lda byte
.0b07	8d 20 d0	               sta vicbordcol
.0b0a	68		               pla
.0b0b	60		               rts
>0b0c	00		byte           .byte 0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0b0d	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0b11	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0b15			libtart

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_vftf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0b15			scrmaninit
.0b15	20 43 0c	               jsr  push
.0b18	a9 06		               lda  #vbleu
.0b1a	8d 21 d0	               sta  vicbackcol
.0b1d	a9 05		               lda  #vvert
.0b1f	8d 20 d0	               sta  vicbordcol
.0b22	a9 01		               lda  #vblanc
.0b24	8d 86 02	               sta  bascol
.0b27	ad 00 04	               lda  scrnram
.0b2a	8d 00 04	               sta  scrnram
.0b2d	20 35 0b	               jsr  cls
.0b30	20 82 0c	               jsr  pop
.0b33	60		               rts
>0b34	8e		characterset   .byte b_uppercase
.0b35			cls
.0b35	08		               php
.0b36	48		               pha
.0b37	a9 93		               lda  #$93
.0b39	20 4c 0b	               jsr  putch
.0b3c	68		               pla
.0b3d	28		               plp
.0b3e	60		               rts
.0b3f			putnch
.0b3f	08		               php
.0b40	e0 00		               cpx  #$00
.0b42	f0 06		               beq  out
.0b44	20 d2 ff	again          jsr  $ffd2
.0b47	ca		               dex
.0b48	d0 fa		               bne  again
.0b4a	28		out            plp
.0b4b	60		               rts
.0b4c			putch
.0b4c	08		               php
.0b4d	20 d2 ff	               jsr  $ffd2
.0b50	28		               plp
.0b51	60		               rts
.0b52			puts
.0b52	20 43 0c	               jsr  push
.0b55	86 fb		               stx  zpage1
.0b57	84 fc		               sty  zpage1+1
.0b59	a0 00		               ldy  #0
.0b5b	b1 fb		next           lda  (zpage1),y
.0b5d	f0 09		               beq  exit
.0b5f	20 4c 0b	               jsr  putch
.0b62	20 4a 0d	               jsr  inczp1
.0b65	4c 5b 0b	               jmp  next
.0b68	20 82 0c	exit           jsr  pop
.0b6b	60		               rts
.0b6c			gotoxy
.0b6c	08		               php
.0b6d	18		               clc
.0b6e	8a		               txa
.0b6f	48		               pha
.0b70	98		               tya
.0b71	aa		               tax
.0b72	68		               pla
.0b73	a8		               tay
.0b74	20 f0 ff	               jsr  kplot
.0b77	28		               plp
.0b78	60		               rts
.0b79			cursor
=$0286			bascol    =    $0286
.0b79	08		               php
.0b7a	48		               pha
.0b7b	90 12		               bcc  restore
.0b7d	20 f0 ff	               jsr  kplot
.0b80	8c a1 0b	               sty  cx
.0b83	8e a2 0b	               stx  cy
.0b86	ad 86 02	               lda  bascol
.0b89	8d a3 0b	               sta  bcol
.0b8c	4c 9e 0b	               jmp  out
.0b8f	ae a2 0b	restore        ldx  cy
.0b92	ac a1 0b	               ldy  cx
.0b95	20 f0 ff	               jsr  kplot
.0b98	ad a3 0b	               lda  bcol
.0b9b	8d 86 02	               sta  bascol
.0b9e	68		out            pla
.0b9f	28		               plp
.0ba0	60		               rts
>0ba1	00		cx   .byte     $00
>0ba2	00		cy   .byte     $00
>0ba3	00		bcol .byte     $00
.0ba4			cursave
.0ba4	08		               php
.0ba5	38		               sec
.0ba6	20 79 0b	               jsr  cursor
.0ba9	28		               plp
.0baa	60		               rts
.0bab			curput
.0bab	08		               php
.0bac	18		               clc
.0bad	20 79 0b	               jsr  cursor
.0bb0	28		               plp
.0bb1	60		               rts
.0bb2			putsxy
.0bb2	20 43 0c	               jsr  push
.0bb5	86 fb		               stx  zpage1
.0bb7	84 fc		               sty  zpage1+1
.0bb9	a0 00		               ldy  #$00
.0bbb	b1 fb		               lda  (zpage1),y
.0bbd	aa		               tax
.0bbe	20 4a 0d	               jsr  inczp1
.0bc1	b1 fb		               lda  (zpage1),y
.0bc3	a8		               tay
.0bc4	20 6c 0b	               jsr  gotoxy
.0bc7	20 4a 0d	               jsr  inczp1
.0bca	a6 fb		               ldx  zpage1
.0bcc	a4 fc		               ldy  zpage1+1
.0bce	20 52 0b	               jsr  puts
.0bd1	20 82 0c	               jsr  pop
.0bd4	60		               rts
>0bd5	00 00		straddr   .word     $00
>0bd7	00		px        .byte     $00
>0bd8	00		py        .byte     $00
>0bd9	00 00		zp1       .word     $00
.0bdb			putscxy
.0bdb	20 43 0c	               jsr  push
.0bde	84 fc		               sty  zpage1+1
.0be0	86 fb		               stx  zpage1
.0be2	ad 86 02	               lda  bascol
.0be5	8d 05 0c	               sta  bc
.0be8	a0 00		               ldy #$00
.0bea	b1 fb		               lda  (zpage1),y
.0bec	8d 86 02	               sta  bascol
.0bef	20 4a 0d	               jsr  inczp1
.0bf2	a6 fb		               ldx  zpage1
.0bf4	a4 fc		               ldy  zpage1+1
.0bf6	20 b2 0b	               jsr  putsxy
.0bf9	ad 05 0c	               lda  bc
.0bfc	8d 86 02	               sta  bascol
.0bff	20 82 0c	               jsr  pop
.0c02	60		               rts
>0c03	00 00		straddr  .word      $00
>0c05	00		bc       .byte      $00
>0c06	00 00		zp1      .word      $00
.0c08			putrahex
.0c08	08		               php
.0c09	48		               pha
.0c0a	20 60 0e	               jsr  a2hex
.0c0d	a9 ff		               lda  #<a2hexstr
.0c0f	a0 0d		               ldy  #>a2hexstr
.0c11	20 52 0b	               jsr  puts
.0c14	68		               pla
.0c15	28		               plp
.0c16	60		               rts
.0c17			kputrahexxy
.0c17			bputrahexxy
.0c17			putrahexxy
.0c17	08		               php
.0c18	20 60 0e	               jsr  a2hex
.0c1b	a9 fc		               lda  #<a2hexpos
.0c1d	a0 0d		               ldy  #>a2hexpos
.0c1f	20 b2 0b	               jsr  putsxy
.0c22	68		               pla
.0c23	28		               plp
.0c24	60		               rts
.0c25			putrahexcxy
.0c25	08		               php
.0c26	20 60 0e	               jsr  a2hex
.0c29	a9 fc		               lda  #<a2hexpos
.0c2b	a0 0d		               ldy  #>a2hexpos
.0c2d	20 db 0b	               jsr  putscxy
.0c30	68		               pla
.0c31	28		               plp
.0c32	60		               rts
.0c33			setinverse
.0c33	48		               pha
.0c34	a9 12		               lda  #$12
.0c36	20 d2 ff	               jsr  $ffd2
.0c39	68		               pla
.0c3a	60		               rts
.0c3b			clrinverse
.0c3b	48		               pha
.0c3c	a9 92		               lda  #$92
.0c3e	20 d2 ff	               jsr  $ffd2
.0c41	68		               pla
.0c42	60		               rts

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.0c43			push
.0c43	08		          php            ; stack : flg, pcl, pch
.0c44	78		          sei
.0c45	8d 7f 0c	          sta  ra        ; save a
.0c48	68		          pla            ; stack : pcl, pch
.0c49	8d 7e 0c	          sta  rp        ; save rp
.0c4c	68		          pla            ; stack : pch
.0c4d	8d 80 0c	          sta  pc        ; save pcl
.0c50	68		          pla            ; stack : -
.0c51	8d 81 0c	          sta  pc+1      ; save pch
.0c54	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0c56	48		          pha            ; stack : zp1l
.0c57	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0c59	48		          pha            ; stack : zp1h, zp1l
.0c5a	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0c5c	48		          pha            ; stack : zp2l, zp1h, zp1l
.0c5d	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0c5f	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0c60	ad 7e 0c	          lda  rp        ; get rp
.0c63	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0c64	ad 7f 0c	          lda  ra        ; get a
.0c67	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0c68	8a		          txa            ; get x
.0c69	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c6a	98		          tya            ; get y
.0c6b	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c6c	ad 81 0c	          lda  pc+1      ; get pch
.0c6f	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c70	ad 80 0c	          lda  pc        ; get pcl
.0c73	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c74	ad 7e 0c	          lda  rp        ; get rp
.0c77	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c78	ad 7f 0c	          lda  ra        ; get a
.0c7b	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c7c	58		          cli
.0c7d	60		          rts
>0c7e	00		rp        .byte     0
>0c7f	00		ra        .byte     0
>0c80	00 00		pc        .word     0
.0c82			pull
.0c82			pop
.0c82	78		          sei
.0c83	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c84	8d b7 0c	          sta  pc        ; save pcl
.0c87	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c88	8d b8 0c	          sta  pc+1      ; save pch
.0c8b	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c8c	a8		          tay            ; set y
.0c8d	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0c8e	aa		          tax            ; set x
.0c8f	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0c90	8d b6 0c	          sta  ra        ; save a
.0c93	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0c94	8d b5 0c	          sta  rp        ; save rp
.0c97	68		          pla            ; stack : zp2l, zp1h, zp1l
.0c98	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0c9a	68		          pla            ; stack : zp1h, zp1l
.0c9b	85 fd		          sta  zpage2    ; get zpage2 High byte
.0c9d	68		          pla            ; stack : zp1l
.0c9e	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0ca0	68		          pla            ; stack :
.0ca1	85 fb		          sta  zpage1    ; get zpage1 High byte
.0ca3	ad b8 0c	          lda  pc+1      ; get pch
.0ca6	48		          pha            ; stack : pch
.0ca7	ad b7 0c	          lda  pc
.0caa	48		          pha            ; stack : pcl, pch
.0cab	ad b5 0c	          lda  rp        ; get rp
.0cae	48		          pha            ; stack : rp, pcl, pch
.0caf	ad b6 0c	          lda  ra        ; set ra
.0cb2	58		          cli
.0cb3	28		          plp            ; stack : pcl, pch
.0cb4	60		          rts
>0cb5	00		rp        .byte     0
>0cb6	00		ra        .byte     0
>0cb7	00 00		pc        .word     0

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0cb9			blkfill
.0cb9	20 43 0c	bf0            jsr  push
.0cbc	20 7a 0d	               jsr  savezp1
.0cbf	84 fc		               sty  zpage1+1
.0cc1	a0 00		               ldy  #$00
.0cc3	84 fb		               sty  zpage1
.0cc5	91 fb		bf1            sta  (zpage1),y
.0cc7	c8		               iny
.0cc8	d0 fb		               bne  bf1
.0cca	20 89 0d	               jsr  restzp1
.0ccd	20 82 0c	               jsr  pop
.0cd0	60		               rts
.0cd1			memfill
.0cd1	20 43 0c	               jsr  push
.0cd4	20 b9 0c	mf1            jsr  blkfill
.0cd7	c8		               iny
.0cd8	ca		               dex
.0cd9	d0 f9		               bne  mf1
.0cdb	20 82 0c	               jsr  pop
.0cde	60		               rts
.0cdf			memmove
.0cdf	20 43 0c	               jsr  push
.0ce2	ba		               tsx            ; On se crée un pointeur ...
.0ce3	8a		               txa
.0ce4	18		               clc
.0ce5	69 0b		               adc  #11
.0ce7	a8		               tay
.0ce8	a2 06		               ldx  #$06
.0cea	b9 00 01	nextbyte       lda  $0100,y
.0ced	99 39 0d	               sta  words,y
.0cf0	c8		               iny
.0cf1	ca		               dex
.0cf2	d0 f6		               bne  nextbyte
.0cf4	ad 39 0d	               lda  s
.0cf7	8d 10 0d	               sta  source+1
.0cfa	ad 3a 0d	               lda  s+1
.0cfd	8d 11 0d	               sta  source+2
.0d00	ad 3b 0d	               lda  d
.0d03	8d 0d 0d	               sta  destin+1
.0d06	ad 3c 0d	               lda  d+1
.0d09	8d 0e 0d	               sta  destin+2
.0d0c	ad ff ff	destin         lda  $ffff
.0d0f	8d ff ff	source         sta  $ffff
.0d12	ee 0d 0d	               inc  destin+1
.0d15	d0 03		               bne  src
.0d17	ee 0e 0d	               inc  destin+2
.0d1a	ee 10 0d	src            inc  source+1
.0d1d	d0 03		               bne  cnt
.0d1f	ee 11 0d	               inc  source+2
.0d22	ad 3d 0d	cnt            lda  compte
.0d25	d0 08		               bne  decit
.0d27	ad 3e 0d	               lda  compte+1
.0d2a	f0 09		               beq  fini
.0d2c	ce 3e 0d	               dec  compte+1
.0d2f	ce 3d 0d	decit          dec  compte
.0d32	4c 0c 0d	               jmp  destin
.0d35	20 82 0c	fini           jsr  pop
.0d38	60		               rts
.0d39			words
>0d39	00 00		s         .word     $0000
>0d3b	00 00		d         .word     $0000
>0d3d	00 00		compte    .word     $0000
.0d3f			decword
.0d3f	20 43 0c	               jsr  push
.0d42	86 fd		               stx  zpage2
.0d44	84 fe		               sty  zpage2+1
.0d46	20 82 0c	               jsr  pop
.0d49	60		               rts
.0d4a			inczp1
.0d4a	08		               php
.0d4b	48		               pha
.0d4c	e6 fb		               inc  zpage1
.0d4e	a5 fb		               lda  zpage1
.0d50	d0 02		               bne  nopage
.0d52	e6 fc		               inc  zpage1+1
.0d54	68		nopage         pla
.0d55	28		               plp
.0d56	60		               rts
.0d57			deczp1
.0d57	08		                php
.0d58	48		                pha
.0d59	c6 fb		                dec  zpage1
.0d5b	d0 02		                bne  nopage
.0d5d	c6 fc		                dec  zpage1+1
.0d5f	68		nopage          pla
.0d60	28		                plp
.0d61	60		                rts
.0d62			inczp2
.0d62	08		               php
.0d63	48		               pha
.0d64	e6 fd		               inc  zpage2
.0d66	a5 fd		               lda  zpage2
.0d68	d0 02		               bne  nopage
.0d6a	e6 fe		               inc  zpage2+1
.0d6c	68		nopage         pla
.0d6d	28		               plp
.0d6e	60		               rts
.0d6f			deczp2
.0d6f	08		               php
.0d70	48		               pha
.0d71	a5 fd		               lda  zpage2
.0d73	d0 02		               bne  nopage
.0d75	c6 fe		               dec  zpage2+1
.0d77	68		nopage         pla
.0d78	28		               plp
.0d79	60		               rts
.0d7a			savezp1
.0d7a	08		               php
.0d7b	48		               pha
.0d7c	a5 fb		               lda  zpage1
.0d7e	8d f6 0d	               sta  zp1
.0d81	a5 fc		               lda  zpage1+1
.0d83	8d f7 0d	               sta  zp1+1
.0d86	68		               pla
.0d87	28		               plp
.0d88	60		               rts
.0d89			restzp1
.0d89	08		               php
.0d8a	48		               pha
.0d8b	ad f6 0d	               lda zp1
.0d8e	85 fb		               sta zpage1
.0d90	ad f7 0d	               lda zp1+1
.0d93	85 fc		               sta zpage1+1
.0d95	68		               pla
.0d96	28		               plp
.0d97	60		               rts
.0d98			savezp2
.0d98	08		         php
.0d99	48		         pha
.0d9a	a5 fd		         lda zpage2
.0d9c	8d f8 0d	         sta zp2
.0d9f	a5 fe		         lda zpage2+1
.0da1	8d f9 0d	         sta zp2+1
.0da4	68		         pla
.0da5	28		         plp
.0da6	60		         rts
.0da7			restzp2
.0da7	08		                php
.0da8	48		                pha
.0da9	ad f8 0d	                lda  zp2
.0dac	85 fd		                sta  zpage2
.0dae	ad f9 0d	                lda  zp2+1
.0db1	85 fe		                sta  zpage2+1
.0db3	68		                pla
.0db4	28		                plp
.0db5	60		                rts
.0db6			xy2addr
.0db6	08		                php
.0db7	48		                pha
.0db8	8a		                txa
.0db9	48		                pha
.0dba	98		                tya
.0dbb	48		                pha
.0dbc	ad f1 0d	                lda     addr1+1
.0dbf	8d f3 0d	                sta     addr2+1
.0dc2	ad f0 0d	                lda     addr1
.0dc5	8d f2 0d	                sta     addr2
.0dc8	c0 00		                cpy     #$00
.0dca	f0 0f		                beq     addx
.0dcc	18		moreline        clc
.0dcd	6d ef 0d	                adc     ymult
.0dd0	90 03		                bcc     norepy
.0dd2	ee f3 0d	                inc     addr2+1
.0dd5	8d f2 0d	norepy          sta     addr2
.0dd8	88		                dey
.0dd9	d0 f1		                bne     moreline
.0ddb	8a		addx            txa
.0ddc	18		                clc
.0ddd	6d f2 0d	                adc     addr2
.0de0	90 03		                bcc     thatsit
.0de2	ee f3 0d	                inc     addr2+1
.0de5	8d f2 0d	thatsit         sta     addr2
.0de8	68		                pla
.0de9	a8		                tay
.0dea	68		                pla
.0deb	aa		                tax
.0dec	68		                pla
.0ded	28		                plp
.0dee	60		                rts
>0def	28		ymult          .byte     40
>0df0	00 00		addr1          .word     $0000
>0df2	00 00		addr2          .word     $0000
>0df4	00 00		bytecnt        .word     $0000
>0df6	00 00		zp1        .word   $0000
>0df8	00 00		zp2        .word   $0000

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>0dfa	01		a2hexcol       .byte     1              ; pour aputscxy
>0dfb	00		a2hexbkcol     .byte     %00000000
.0dfc			a2hexpos
>0dfc	00		a2hexpx        .byte     0              ; pour aputsxy
>0dfd	00		a2hexpy        .byte     0
>0dfe	24		a2hexprefix    .byte     "$"            ; pour aputs
>0dff	00 00		a2hexstr       .word     $00
>0e01	00 00		               .word     $00
>0e03	00		               .byte     0              ; 0 end string
>0e04	30 30 30 30	abin           .null     "00000000"
>0e08	30 30 30 30 00
>0e0d	20 20 20 00	adec           .null     "   "
.0e11			putahexfmtxy
.0e11	20 43 0c	               jsr  push
.0e14	20 60 0e	               jsr  a2hex
.0e17	ae fc 0d	               ldx  a2hexpx
.0e1a	ac fd 0d	               ldy  a2hexpy
.0e1d	20 6c 0b	               jsr  gotoxy
.0e20	a2 fe		               ldx  #<a2hexprefix
.0e22	a0 0d		               ldy  #>a2hexprefix
.0e24	20 52 0b	               jsr  puts
.0e27	20 82 0c	               jsr  pop
.0e2a	60		               rts
.0e2b			putahexfmt
.0e2b	20 43 0c	               jsr  push
.0e2e	20 60 0e	               jsr  a2hex
.0e31	a2 fe		               ldx  #<a2hexprefix
.0e33	a0 0d		               ldy  #>a2hexprefix
.0e35	20 52 0b	               jsr  puts
.0e38	20 82 0c	               jsr  pop
.0e3b	60		               rts
.0e3c			putahex
.0e3c	20 43 0c	               jsr  push
.0e3f	20 60 0e	               jsr  a2hex
.0e42	a2 ff		               ldx  #<a2hexstr
.0e44	a0 0d		               ldy  #>a2hexstr
.0e46	20 52 0b	               jsr  puts
.0e49	20 82 0c	               jsr  pop
.0e4c	60		               rts
.0e4d			nib2hex
.0e4d	08		               php
.0e4e	29 0f		               and  #$0f
.0e50	f8		               sed
.0e51	18		               clc
.0e52	69 90		               adc  #$90
.0e54	69 40		               adc  #$40
.0e56	d8		               cld
.0e57	28		               plp
.0e58	60		               rts
.0e59			lsra4bits
.0e59	08		               php
.0e5a	4a		               lsr
.0e5b	4a		               lsr
.0e5c	4a		               lsr
.0e5d	4a		               lsr
.0e5e	28		               plp
.0e5f	60		               rts
.0e60			a2hex
.0e60	08		               php
.0e61	48		               pha
.0e62	48		               pha
.0e63	20 59 0e	               jsr  lsra4bits
.0e66	20 4d 0e	               jsr  nib2hex
.0e69	8d ff 0d	               sta  a2hexstr
.0e6c	68		               pla
.0e6d	20 4d 0e	               jsr  nib2hex
.0e70	8d 00 0e	               sta  a2hexstr+1
.0e73	a9 00		               lda  #$00                ; set end of string
.0e75	8d 01 0e	               sta  a2hexstr+2
.0e78	68		               pla
.0e79	28		               plp
.0e7a	60		               rts
.0e7b			xy2hex
.0e7b	20 43 0c	               jsr  push
.0e7e	20 60 0e	               jsr  a2hex
.0e81	8a		               txa
.0e82	48		               pha
.0e83	20 59 0e	               jsr  lsra4bits
.0e86	20 4d 0e	               jsr  nib2hex
.0e89	8d ff 0d	               sta  a2hexstr
.0e8c	68		               pla
.0e8d	20 4d 0e	               jsr  nib2hex
.0e90	8d 00 0e	               sta  a2hexstr+1
.0e93	98		               tya
.0e94	48		               pha
.0e95	20 59 0e	               jsr  lsra4bits
.0e98	20 4d 0e	               jsr  nib2hex
.0e9b	8d 01 0e	               sta  a2hexstr+2
.0e9e	68		               pla
.0e9f	20 4d 0e	               jsr  nib2hex
.0ea2	8d 02 0e	               sta  a2hexstr+3
.0ea5	a9 00		               lda  #$00                ; 0 ended string
.0ea7	8d 03 0e	               sta  a2hexstr+4
.0eaa	20 82 0c	               jsr  pop
.0ead			atobin
.0ead	20 43 0c	               jsr  push
.0eb0	a2 08		               ldx  #8
.0eb2	a0 00		               ldy  #0
.0eb4	18		               clc
.0eb5	2a		nextbit        rol
.0eb6	48		               pha
.0eb7	69 00		               adc  #$00
.0eb9	29 01		               and  #$01
.0ebb	20 4d 0e	               jsr  nib2hex
.0ebe	99 04 0e	               sta  abin,y
.0ec1	68		               pla
.0ec2	c8		               iny
.0ec3	ca		               dex
.0ec4	d0 ef		               bne  nextbit
.0ec6	a9 00		               lda  #0
.0ec8	99 04 0e	               sta  abin,y
.0ecb	20 82 0c	               jsr  pull
.0ece	60		               rts
.0ecf			putabin
.0ecf	20 ad 0e	               jsr     atobin
.0ed2	20 43 0c	               jsr     push
.0ed5	a2 04		               ldx     #<abin
.0ed7	a0 0e		               ldy     #>abin
.0ed9	20 52 0b	               jsr     puts
.0edc	20 82 0c	               jsr     pop
.0edf	60		               rts
.0ee0			printabin
.0ee0	20 43 0c	               jsr     push
.0ee3	a2 04		               ldx     #<abin
.0ee5	a0 0e		               ldy     #>abin
.0ee7	20 52 0b	               jsr     puts
.0eea	20 82 0c	               jsr     pop
.0eed	60		               rts
.0eee			putabinfmt
.0eee	08		               php
.0eef	48		               pha
.0ef0	a9 25		               lda     #"%"
.0ef2	20 4c 0b	               jsr     putch
.0ef5	68		               pla
.0ef6	20 cf 0e	               jsr     putabin
.0ef9	28		               plp
.0efa	60		               rts
.0efb			putabinxy
.0efb	20 6c 0b	               jsr     gotoxy
.0efe	20 cf 0e	               jsr     putabin
.0f01	60		               rts
.0f02			putabinfmtxy
.0f02	20 6c 0b	               jsr     gotoxy
.0f05	20 ee 0e	               jsr     putabinfmt
.0f08	60		               rts
.0f09			atodec
.0f09	20 43 0c	               jsr  push
.0f0c	f8		               sed
.0f0d	aa		               tax
.0f0e	a0 00		               ldy  #$00
.0f10	a9 00		               lda  #$00
.0f12	18		nextbit        clc
.0f13	69 01		               adc  #$01
.0f15	90 01		               bcc  decx
.0f17	c8		               iny
.0f18	ca		decx           dex
.0f19	d0 f7		               bne  nextbit
.0f1b	48		               pha
.0f1c	98		               tya
.0f1d	20 4d 0e	               jsr  nib2hex
.0f20	8d 0d 0e	               sta  adec
.0f23	68		               pla
.0f24	48		               pha
.0f25	20 4d 0e	               jsr  nib2hex
.0f28	8d 0f 0e	               sta  adec+2
.0f2b	68		               pla
.0f2c	6a		               ror
.0f2d	6a		               ror
.0f2e	6a		               ror
.0f2f	6a		               ror
.0f30	20 4d 0e	               jsr  nib2hex
.0f33	8d 0e 0e	               sta  adec+1
.0f36	d8		               cld
.0f37	20 82 0c	               jsr  pull
.0f3a	60		               rts
>0f3b	00 00 00	buffer         .byte     0,0,0
.0f3e			putadec
.0f3e	20 43 0c	               jsr  push
.0f41	20 09 0f	               jsr  atodec
.0f44	a2 0d		               ldx  #<adec
.0f46	a0 0e		               ldy  #>adec+1
.0f48	20 52 0b	               jsr  puts
.0f4b	20 82 0c	               jsr  pop
.0f4e	60		               rts

;******  Return to file: template.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>0f4f	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>0f53	00 00 00 00 00 00 00 00 00 0d 00 00
>0f5f	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>0f63	00 00 00 00 00 00 00 00 00 00 00 00
>0f6f	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>0f73	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>0f7f	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>0f83	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>0f8f	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>0f93	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>0f9f	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>0fa3	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>0faf	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>0fb3	00 00 00 00 00 00 00 00 00 00 00 00
>0fbf	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>0fc3	00 00 00 00 00 00 00 00 00 00 00 00
>0fcf	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>0fd3	00 00 00 00 00 00 00 00 00 00 00 00
>0fdf	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>0fe3	00 00 00 00 00 00 00 00 00 00 00 00
>0fef	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>0ff3	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>0fff	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1003	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>100f	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1013	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>101f	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>1023	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>102f	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>1033	00 00 00 00 00 00 00 00 00 00 00 00
>103f	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>1043	00 00 00 00 00 00 00 00 00 00 00 00
.104f			waitstop
.104f	20 43 0c	               jsr  push
.1052	20 ed f6	wait           jsr  k_stop
.1055	d0 fb		               bne  wait
.1057	20 82 0c	               jsr  pop
.105a	60		               rts
.105b			anykey
.105b	08		               php
.105c	48		               pha
.105d	a5 cb		nokey          lda 203
.105f	c9 40		               cmp #64
.1061	f0 fa		               beq nokey
.1063	20 69 10	               jsr releasekey
.1066	68		               pla
.1067	28		               plp
.1068	60		               rts
.1069			releasekey
.1069	08		               php
.106a	48		               pha
.106b	a5 cb		keypressed     lda 203
.106d	c9 40		               cmp #64
.106f	d0 fa		               bne keypressed
.1071	68		               pla
.1072	28		               plp
.1073	60		               rts
.1074			getkey
.1074	20 e4 ff	again          jsr  getin
.1077	c9 00		               cmp  #0
.1079	f0 f9		               beq  again
.107b	60		               rts
.107c			kbflushbuff
.107c	08		               php
.107d	48		               pha
.107e	20 e4 ff	again          jsr  getin
.1081	c9 00		               cmp  #0
.1083	d0 f9		               bne  again
.1085	68		               pla
.1086	28		               plp
.1087	60		               rts
.1088			waitkey
.1088	20 43 0c	               jsr  push
.108b	8d d9 10	               sta  thekey
.108e	20 e4 ff	nope           jsr  getin
.1091	20 d2 ff	               jsr  chrout
.1094	cd d9 10	               cmp  thekey
.1097	d0 f5		               bne  nope
.1099	20 d2 ff	               jsr  chrout
.109c	20 82 0c	               jsr  pop
.109f	60		               rts
.10a0			waitspace
.10a0	20 43 0c	               jsr  push
.10a3	a9 7f		wait           lda  #$7f  ;%01111111
.10a5	8d 00 dc	               sta  $dc00
.10a8	ad 01 dc	               lda  $dc01
.10ab	29 10		               and  #$10  ;mask %00010000
.10ad	d0 f4		               bne  wait
.10af	20 82 0c	               jsr  pop
.10b2			waitsstop
.10b2	20 43 0c	               jsr  push
.10b5	20 ed f6	wait           jsr  k_stop  ;%01111111
.10b8	d0 fb		               bne  wait
.10ba	20 82 0c	               jsr  pop
.10bd			waitreturn
.10bd	20 43 0c	               jsr  push
.10c0	ad da 10	               lda  thecount
.10c3	8d 00 04	               sta  scrnram
.10c6	a9 02		               lda  #$02
.10c8	8d 00 d8	               sta  colorram
.10cb	20 e4 ff	nope           jsr  getin
.10ce	c9 0d		nohex          cmp  #$0d
.10d0	d0 f9		               bne  nope
.10d2	ee da 10	               inc  thecount
.10d5	20 82 0c	               jsr  pop
.10d8	60		               rts
>10d9	00		thekey         .byte   0
>10da	01		thecount       .byte   $01

;******  Return to file: template.asm


;******  End of listing

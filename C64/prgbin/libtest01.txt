
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L libtest01.txt -o libtest01.prg libtest01.asm
; Fri Apr 11 02:25:55 2025

;Offset	;Hex		;Source

;******  Processing input file: libtest01.asm

="20250405-231555 "	                Version = "20250405-231555 "

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c cc 09	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: libtest01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: libtest01.asm


;******  Processing file: strings_fr.asm

.0854			headera
>0854	20 20 20 20	               .text          "     Commodore 64 test de librarie "
>0858	20 c3 4f 4d 4d 4f 44 4f 52 45 20 36 34 20 54 45
>0868	53 54 20 44 45 20 4c 49 42 52 41 52 49 45 20
>0877	0d 00		               .byte     $0d,0
>0879	20 20 20 20	headerb        .text          "               libtest01 "
>087d	20 20 20 20 20 20 20 20 20 20 20 4c 49 42 54 45
>088d	53 54 30 31 20
>0892	0d		               .byte     $0d
>0893	20 20 20 20	               .text          "       (c) 2025 Daniel Lafrance"
>0897	20 20 20 28 43 29 20 32 30 32 35 20 c4 41 4e 49
>08a7	45 4c 20 cc 41 46 52 41 4e 43 45
>08b2	0d		               .byte     $0d
>08b3	20 20 20 20	               .text   format("       Version: %s",Version)
>08b7	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 35
>08c7	30 34 30 35 2d 32 33 31 35 35 35 20
>08d3	0d 00		               .byte     $0d,0
>08d5	0d		shortcuts      .byte     $0d
>08d6	91 91		               .byte     ucurkey,ucurkey
>08d8	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey
>08dc	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey,rcurkey
>08e0	1d
>08e1	20 d2 20 c1	               .text          " R A C C O U R C I S "
>08e5	20 c3 20 c3 20 cf 20 d5 20 d2 20 c3 20 c9 20 d3
>08f5	20
>08f6	0d		               .byte     $0d
>08f7	20 4c 49 42	               .text   format(" libtest01: SYS%05d ($%04X)",main, main)
>08fb	54 45 53 54 30 31 3a 20 d3 d9 d3 30 32 35 30 38
>090b	20 28 24 30 39 c3 c3 29
>0913	0d		               .byte     $0d
>0914	20 41 49 44	               .text   format(" aide.....: SYS%05d ($%04X)",aide, aide)
>0918	45 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 36 32 35
>0928	20 28 24 30 c1 34 31 29
>0930	0d		               .byte     $0d
>0931	20 43 4c 53	               .text   format(" cls......: SYS%05d ($%04X)",cls, cls)
>0935	2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 38 35 31
>0945	20 28 24 30 c2 32 33 29
>094d	0d 00		               .byte     $0d,0
>094f	20 cc 41 4e	aidetext       .text   format(" Lancement: SYS%05d ($%04X)",libtest01, libtest01)
>0953	43 45 4d 45 4e 54 3a 20 d3 d9 d3 30 32 37 34 35
>0963	20 28 24 30 c1 c2 39 29
>096b	0d 0d		               .byte     $0d, $0d
>096d	20 20 20 20	                .text   format("    ex.: SYS%05d",libtest01)
>0971	45 58 2e 3a 20 d3 d9 d3 30 32 37 34 35
>097e	0d		                .byte     $0d
>097f	20 20 20 20	                .text   format("    for i=0to100:SYS%05d:next",libtest01)
>0983	46 4f 52 20 49 3d 30 54 4f 31 30 30 3a d3 d9 d3
>0993	30 32 37 34 35 3a 4e 45 58 54
>099d	0d 00		                .byte     $0d,0
>099f	20 c0 c0 c0	line            .byte     $20,192,192,192,192,192,192,192,192,192
>09a3	c0 c0 c0 c0 c0 c0
>09a9	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192,192
>09ad	c0 c0 c0 c0 c0 c0
>09b3	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192,192
>09b7	c0 c0 c0 c0 c0 c0
>09bd	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192
>09c1	c0 c0 c0 c0 c0
>09c6	0d 00		                .byte     $0d,0
>09c8	01 0b 0a 00	dataloc         .byte       1,11,10,0

;******  Return to file: libtest01.asm

.09cc			main
.09cc	20 03 0b	               jsr scrmaninit
.09cf	08		               php
.09d0	48		               pha
.09d1	a9 8e		               lda  #b_uppercase
.09d3	8d 22 0b	               sta  characterset
.09d6	20 d2 ff	               jsr  $ffd2
.09d9	68		               pla
.09da	28		               plp
.09db	08		               php
.09dc	48		               pha
.09dd	a9 8e		               lda  #b_uppercase
.09df	20 d2 ff	               jsr  $ffd2
.09e2	68		               pla
.09e3	28		               plp
.09e4	08		               php
.09e5	48		               pha
.09e6	a9 08		               lda  #$08
.09e8	20 d2 ff	               jsr  $ffd2
.09eb	68		               pla
.09ec	28		               plp
.09ed	20 5b 10	               jsr anykey
.09f0	20 31 0c	               jsr  push
.09f3	48		               pha
.09f4	a9 05		               lda  #cvert
.09f6	8d 20 d0	               sta  $d020
.09f9	68		               pla
.09fa	48		               pha
.09fb	a9 06		               lda  #cbleu
.09fd	8d 21 d0	               sta  $d021
.0a00	68		               pla
.0a01	48		               pha
.0a02	a9 01		               lda  #cblanc
.0a04	8d 86 02	               sta  bascol
.0a07	68		               pla
.0a08	20 70 0c	               jsr  pull
.0a0b	20 b9 0a	               jsr libtest01
.0a0e	08		               php
.0a0f	48		               pha
.0a10	a9 09		               lda  #$09
.0a12	20 d2 ff	               jsr  $ffd2
.0a15	68		               pla
.0a16	28		               plp
.0a17	08		               php
.0a18	48		               pha
.0a19	a9 8e		               lda  #b_uppercase
.0a1b	8d 22 0b	               sta  characterset
.0a1e	20 d2 ff	               jsr  $ffd2
.0a21	68		               pla
.0a22	28		               plp
.0a23	20 23 0b	               jsr  cls
.0a26	20 31 0c	               jsr  push
.0a29	48		               pha
.0a2a	a9 05		               lda  #cvert
.0a2c	8d 20 d0	               sta  $d020
.0a2f	68		               pla
.0a30	48		               pha
.0a31	a9 06		               lda  #cbleu
.0a33	8d 21 d0	               sta  $d021
.0a36	68		               pla
.0a37	48		               pha
.0a38	a9 01		               lda  #cblanc
.0a3a	8d 86 02	               sta  bascol
.0a3d	68		               pla
.0a3e	20 70 0c	               jsr  pull
.0a41			aide
.0a41	08		               php
.0a42	48		               pha
.0a43	a9 0e		               lda  #14
.0a45	8d 22 0b	               sta  characterset
.0a48	20 d2 ff	               jsr  $ffd2
.0a4b	68		               pla
.0a4c	28		               plp
.0a4d	20 23 0b	               jsr cls
.0a50	20 31 0c	               jsr  push
.0a53	a2 9f		               ldx  #<line
.0a55	a0 09		               ldy  #>line
.0a57	20 40 0b	               jsr  puts
.0a5a	20 70 0c	               jsr  pull
.0a5d	20 31 0c	               jsr  push
.0a60	a2 54		               ldx  #<headera
.0a62	a0 08		               ldy  #>headera
.0a64	20 40 0b	               jsr  puts
.0a67	20 70 0c	               jsr  pull
.0a6a	20 31 0c	               jsr  push
.0a6d	a2 79		               ldx  #<headerb
.0a6f	a0 08		               ldy  #>headerb
.0a71	20 40 0b	               jsr  puts
.0a74	20 70 0c	               jsr  pull
.0a77	20 31 0c	               jsr  push
.0a7a	a2 9f		               ldx  #<line
.0a7c	a0 09		               ldy  #>line
.0a7e	20 40 0b	               jsr  puts
.0a81	20 70 0c	               jsr  pull
.0a84	20 31 0c	               jsr  push
.0a87	a2 9f		               ldx  #<line
.0a89	a0 09		               ldy  #>line
.0a8b	20 40 0b	               jsr  puts
.0a8e	20 70 0c	               jsr  pull
.0a91	20 31 0c	               jsr  push
.0a94	a2 d5		               ldx  #<shortcuts
.0a96	a0 08		               ldy  #>shortcuts
.0a98	20 40 0b	               jsr  puts
.0a9b	20 70 0c	               jsr  pull
.0a9e	20 31 0c	               jsr  push
.0aa1	a2 4f		               ldx  #<aidetext
.0aa3	a0 09		               ldy  #>aidetext
.0aa5	20 40 0b	               jsr  puts
.0aa8	20 70 0c	               jsr  pull
.0aab	20 31 0c	               jsr  push
.0aae	a2 9f		               ldx  #<line
.0ab0	a0 09		               ldy  #>line
.0ab2	20 40 0b	               jsr  puts
.0ab5	20 70 0c	               jsr  pull
.0ab8	60		               rts
.0ab9			libtest01
.0ab9	08		               php
.0aba	48		               pha
.0abb	20 23 0b	               jsr  cls
.0abe	a9 a6		               lda  #166
.0ac0	48		nexta          pha
.0ac1	20 31 0c	               jsr  push
.0ac4	a2 c8		               ldx  #<dataloc
.0ac6	a0 09		               ldy  #>dataloc
.0ac8	20 c9 0b	               jsr  putscxy
.0acb	20 70 0c	               jsr  pull
.0ace	48		               pha
.0acf	a9 03		               lda  #ccyan
.0ad1	8d 86 02	               sta  bascol
.0ad4	68		               pla
.0ad5	48		               pha
.0ad6	a9 98		               lda  #<$0000+(40*23)
.0ad8	8d fb 0d	               sta  loopcount
.0adb	a9 03		               lda  #>$0000+(40*23)
.0add	8d fc 0d	               sta  loopcount+1
.0ae0	68		               pla
.0ae1	20 23 0b	               jsr  cls
.0ae4	ad fa 0a	roll           lda  car
.0ae7	20 3a 0b	               jsr  putch
.0aea	20 db 0d	               jsr  loop
.0aed	08		               php
.0aee	28		               plp
.0aef	d0 f3		               bne  roll
.0af1	20 db 10	               jsr  showregs
.0af4	20 5b 10	               jsr  anykey
.0af7	68		out            pla
.0af8	28		               plp
.0af9	60		               rts
>0afa	a6		car            .byte     166

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0afb	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0aff	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0b03			libtart

;******  Return to file: libtest01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: libtest01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: libtest01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0b03			scrmaninit
.0b03	20 31 0c	               jsr  push
.0b06	a9 06		               lda  #vbleu
.0b08	8d 21 d0	               sta  vicbackcol
.0b0b	a9 05		               lda  #vvert
.0b0d	8d 20 d0	               sta  vicbordcol
.0b10	a9 01		               lda  #vblanc
.0b12	8d 86 02	               sta  bascol
.0b15	ad 00 04	               lda  scrnram
.0b18	8d 00 04	               sta  scrnram
.0b1b	20 23 0b	               jsr  cls
.0b1e	20 70 0c	               jsr  pop
.0b21	60		               rts
>0b22	8e		characterset   .byte b_uppercase
.0b23			cls
.0b23	08		               php
.0b24	48		               pha
.0b25	a9 93		               lda  #$93
.0b27	20 3a 0b	               jsr  putch
.0b2a	68		               pla
.0b2b	28		               plp
.0b2c	60		               rts
.0b2d			putnch
.0b2d	08		               php
.0b2e	e0 00		               cpx  #$00
.0b30	f0 06		               beq  out
.0b32	20 d2 ff	again          jsr  $ffd2
.0b35	ca		               dex
.0b36	d0 fa		               bne  again
.0b38	28		out            plp
.0b39	60		               rts
.0b3a			putch
.0b3a	08		               php
.0b3b	20 d2 ff	               jsr  $ffd2
.0b3e	28		               plp
.0b3f	60		               rts
.0b40			puts
.0b40	20 31 0c	               jsr  push
.0b43	86 fb		               stx  zpage1
.0b45	84 fc		               sty  zpage1+1
.0b47	a0 00		               ldy  #0
.0b49	b1 fb		next           lda  (zpage1),y
.0b4b	f0 09		               beq  exit
.0b4d	20 3a 0b	               jsr  putch
.0b50	20 38 0d	               jsr  inczp1
.0b53	4c 49 0b	               jmp  next
.0b56	20 70 0c	exit           jsr  pop
.0b59	60		               rts
.0b5a			gotoxy
.0b5a	08		               php
.0b5b	18		               clc
.0b5c	8a		               txa
.0b5d	48		               pha
.0b5e	98		               tya
.0b5f	aa		               tax
.0b60	68		               pla
.0b61	a8		               tay
.0b62	20 f0 ff	               jsr  kplot
.0b65	28		               plp
.0b66	60		               rts
.0b67			cursor
=$0286			bascol    =    $0286
.0b67	08		               php            ;tourlou
.0b68	48		               pha
.0b69	90 12		               bcc  restore
.0b6b	20 f0 ff	               jsr  kplot
.0b6e	8c 8f 0b	               sty  cx
.0b71	8e 90 0b	               stx  cy
.0b74	ad 86 02	               lda  bascol
.0b77	8d 91 0b	               sta  bcol
.0b7a	4c 8c 0b	               jmp  out
.0b7d	ae 90 0b	restore        ldx  cy
.0b80	ac 8f 0b	               ldy  cx
.0b83	20 f0 ff	               jsr  kplot
.0b86	ad 91 0b	               lda  bcol
.0b89	8d 86 02	               sta  bascol
.0b8c	68		out            pla
.0b8d	28		               plp
.0b8e	60		               rts
>0b8f	00		cx   .byte     $00
>0b90	00		cy   .byte     $00
>0b91	00		bcol .byte     $00
.0b92			cursave
.0b92	08		               php
.0b93	38		               sec
.0b94	20 67 0b	               jsr  cursor
.0b97	28		               plp
.0b98	60		               rts
.0b99			curput
.0b99	08		               php
.0b9a	18		               clc
.0b9b	20 67 0b	               jsr  cursor
.0b9e	28		               plp
.0b9f	60		               rts
.0ba0			putsxy
.0ba0	20 31 0c	               jsr  push
.0ba3	86 fb		               stx  zpage1
.0ba5	84 fc		               sty  zpage1+1
.0ba7	a0 00		               ldy  #$00
.0ba9	b1 fb		               lda  (zpage1),y
.0bab	aa		               tax
.0bac	20 38 0d	               jsr  inczp1
.0baf	b1 fb		               lda  (zpage1),y
.0bb1	a8		               tay
.0bb2	20 5a 0b	               jsr  gotoxy
.0bb5	20 38 0d	               jsr  inczp1
.0bb8	a6 fb		               ldx  zpage1
.0bba	a4 fc		               ldy  zpage1+1
.0bbc	20 40 0b	               jsr  puts
.0bbf	20 70 0c	               jsr  pop
.0bc2	60		               rts
>0bc3	00 00		straddr   .word     $00
>0bc5	00		px        .byte     $00
>0bc6	00		py        .byte     $00
>0bc7	00 00		zp1       .word     $00
.0bc9			putscxy
.0bc9	20 31 0c	               jsr  push
.0bcc	84 fc		               sty  zpage1+1
.0bce	86 fb		               stx  zpage1
.0bd0	ad 86 02	               lda  bascol
.0bd3	8d f3 0b	               sta  bc
.0bd6	a0 00		               ldy #$00
.0bd8	b1 fb		               lda  (zpage1),y
.0bda	8d 86 02	               sta  bascol
.0bdd	20 38 0d	               jsr  inczp1
.0be0	a6 fb		               ldx  zpage1
.0be2	a4 fc		               ldy  zpage1+1
.0be4	20 a0 0b	               jsr  putsxy
.0be7	ad f3 0b	               lda  bc
.0bea	8d 86 02	               sta  bascol
.0bed	20 70 0c	               jsr  pop
.0bf0	60		               rts
>0bf1	00 00		straddr  .word      $00
>0bf3	00		bc       .byte      $00
>0bf4	00 00		zp1      .word      $00
.0bf6			putrahex
.0bf6	08		               php
.0bf7	48		               pha
.0bf8	20 63 0e	               jsr  atohex
.0bfb	a9 02		               lda  #<a2hexstr
.0bfd	a0 0e		               ldy  #>a2hexstr
.0bff	20 40 0b	               jsr  puts
.0c02	68		               pla
.0c03	28		               plp
.0c04	60		               rts
.0c05			kputrahexxy
.0c05			bputrahexxy
.0c05			putrahexxy
.0c05	08		               php
.0c06	20 63 0e	               jsr  atohex
.0c09	a9 ff		               lda  #<a2hexpos
.0c0b	a0 0d		               ldy  #>a2hexpos
.0c0d	20 a0 0b	               jsr  putsxy
.0c10	68		               pla
.0c11	28		               plp
.0c12	60		               rts
.0c13			putrahexcxy
.0c13	08		               php
.0c14	20 63 0e	               jsr  atohex
.0c17	a9 ff		               lda  #<a2hexpos
.0c19	a0 0d		               ldy  #>a2hexpos
.0c1b	20 c9 0b	               jsr  putscxy
.0c1e	68		               pla
.0c1f	28		               plp
.0c20	60		               rts
.0c21			setinverse
.0c21	48		               pha
.0c22	a9 12		               lda  #$12
.0c24	20 d2 ff	               jsr  $ffd2
.0c27	68		               pla
.0c28	60		               rts
.0c29			clrinverse
.0c29	48		               pha
.0c2a	a9 92		               lda  #$92
.0c2c	20 d2 ff	               jsr  $ffd2
.0c2f	68		               pla
.0c30	60		               rts

;******  Return to file: libtest01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.0c31			push
.0c31	08		          php            ; stack : flg, pcl, pch
.0c32	78		          sei
.0c33	8d 6d 0c	          sta  ra        ; save a
.0c36	68		          pla            ; stack : pcl, pch
.0c37	8d 6c 0c	          sta  rp        ; save rp
.0c3a	68		          pla            ; stack : pch
.0c3b	8d 6e 0c	          sta  pc        ; save pcl
.0c3e	68		          pla            ; stack : -
.0c3f	8d 6f 0c	          sta  pc+1      ; save pch
.0c42	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0c44	48		          pha            ; stack : zp1l
.0c45	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0c47	48		          pha            ; stack : zp1h, zp1l
.0c48	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0c4a	48		          pha            ; stack : zp2l, zp1h, zp1l
.0c4b	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0c4d	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0c4e	ad 6c 0c	          lda  rp        ; get rp
.0c51	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0c52	ad 6d 0c	          lda  ra        ; get a
.0c55	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0c56	8a		          txa            ; get x
.0c57	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c58	98		          tya            ; get y
.0c59	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c5a	ad 6f 0c	          lda  pc+1      ; get pch
.0c5d	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c5e	ad 6e 0c	          lda  pc        ; get pcl
.0c61	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c62	ad 6c 0c	          lda  rp        ; get rp
.0c65	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c66	ad 6d 0c	          lda  ra        ; get a
.0c69	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c6a	58		          cli
.0c6b	60		          rts
>0c6c	00		rp        .byte     0
>0c6d	00		ra        .byte     0
>0c6e	00 00		pc        .word     0
.0c70			pull
.0c70			pop
.0c70	78		          sei
.0c71	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c72	8d a5 0c	          sta  pc        ; save pcl
.0c75	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c76	8d a6 0c	          sta  pc+1      ; save pch
.0c79	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c7a	a8		          tay            ; set y
.0c7b	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0c7c	aa		          tax            ; set x
.0c7d	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0c7e	8d a4 0c	          sta  ra        ; save a
.0c81	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0c82	8d a3 0c	          sta  rp        ; save rp
.0c85	68		          pla            ; stack : zp2l, zp1h, zp1l
.0c86	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0c88	68		          pla            ; stack : zp1h, zp1l
.0c89	85 fd		          sta  zpage2    ; get zpage2 High byte
.0c8b	68		          pla            ; stack : zp1l
.0c8c	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0c8e	68		          pla            ; stack :
.0c8f	85 fb		          sta  zpage1    ; get zpage1 High byte
.0c91	ad a6 0c	          lda  pc+1      ; get pch
.0c94	48		          pha            ; stack : pch
.0c95	ad a5 0c	          lda  pc
.0c98	48		          pha            ; stack : pcl, pch
.0c99	ad a3 0c	          lda  rp        ; get rp
.0c9c	48		          pha            ; stack : rp, pcl, pch
.0c9d	ad a4 0c	          lda  ra        ; set ra
.0ca0	58		          cli
.0ca1	28		          plp            ; stack : pcl, pch
.0ca2	60		          rts
>0ca3	00		rp        .byte     0
>0ca4	00		ra        .byte     0
>0ca5	00 00		pc        .word     0

;******  Return to file: libtest01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0ca7			blkfill
.0ca7	20 31 0c	bf0            jsr  push
.0caa	20 66 0d	               jsr  savezp1
.0cad	84 fc		               sty  zpage1+1
.0caf	a0 00		               ldy  #$00
.0cb1	84 fb		               sty  zpage1
.0cb3	91 fb		bf1            sta  (zpage1),y
.0cb5	c8		               iny
.0cb6	d0 fb		               bne  bf1
.0cb8	20 75 0d	               jsr  restzp1
.0cbb	20 70 0c	               jsr  pop
.0cbe	60		               rts
.0cbf			memfill
.0cbf	20 31 0c	               jsr  push
.0cc2	20 a7 0c	mf1            jsr  blkfill
.0cc5	c8		               iny
.0cc6	ca		               dex
.0cc7	d0 f9		               bne  mf1
.0cc9	20 70 0c	               jsr  pop
.0ccc	60		               rts
.0ccd			memmove
.0ccd	20 31 0c	               jsr  push
.0cd0	ba		               tsx            ; On se crée un pointeur ...
.0cd1	8a		               txa
.0cd2	18		               clc
.0cd3	69 0b		               adc  #11
.0cd5	a8		               tay
.0cd6	a2 06		               ldx  #$06
.0cd8	b9 00 01	nextbyte       lda  $0100,y
.0cdb	99 27 0d	               sta  words,y
.0cde	c8		               iny
.0cdf	ca		               dex
.0ce0	d0 f6		               bne  nextbyte
.0ce2	ad 27 0d	               lda  s
.0ce5	8d fe 0c	               sta  source+1
.0ce8	ad 28 0d	               lda  s+1
.0ceb	8d ff 0c	               sta  source+2
.0cee	ad 29 0d	               lda  d
.0cf1	8d fb 0c	               sta  destin+1
.0cf4	ad 2a 0d	               lda  d+1
.0cf7	8d fc 0c	               sta  destin+2
.0cfa	ad ff ff	destin         lda  $ffff
.0cfd	8d ff ff	source         sta  $ffff
.0d00	ee fb 0c	               inc  destin+1
.0d03	d0 03		               bne  src
.0d05	ee fc 0c	               inc  destin+2
.0d08	ee fe 0c	src            inc  source+1
.0d0b	d0 03		               bne  cnt
.0d0d	ee ff 0c	               inc  source+2
.0d10	ad 2b 0d	cnt            lda  compte
.0d13	d0 08		               bne  decit
.0d15	ad 2c 0d	               lda  compte+1
.0d18	f0 09		               beq  fini
.0d1a	ce 2c 0d	               dec  compte+1
.0d1d	ce 2b 0d	decit          dec  compte
.0d20	4c fa 0c	               jmp  destin
.0d23	20 70 0c	fini           jsr  pop
.0d26	60		               rts
.0d27			words
>0d27	00 00		s         .word     $0000
>0d29	00 00		d         .word     $0000
>0d2b	00 00		compte    .word     $0000
.0d2d			decword
.0d2d	20 31 0c	               jsr  push
.0d30	86 fd		               stx  zpage2
.0d32	84 fe		               sty  zpage2+1
.0d34	20 70 0c	               jsr  pop
.0d37	60		               rts
.0d38			inczp1
.0d38	08		               php
.0d39	48		               pha
.0d3a	e6 fb		               inc  zpage1
.0d3c	a5 fb		               lda  zpage1
.0d3e	d0 02		               bne  nopage
.0d40	e6 fc		               inc  zpage1+1
.0d42	68		nopage         pla
.0d43	28		               plp
.0d44	60		               rts
.0d45			deczp1
.0d45	08		                php
.0d46	48		                pha
.0d47	c6 fb		                dec  zpage1
.0d49	d0 02		                bne  nopage
.0d4b	c6 fc		                dec  zpage1+1
.0d4d	68		nopage          pla
.0d4e	28		                plp
.0d4f	60		                rts
.0d50			inczp2
.0d50	08		               php
.0d51	48		               pha
.0d52	e6 fd		               inc  zpage2
.0d54	a5 fd		               lda  zpage2
.0d56	d0 02		               bne  nopage
.0d58	e6 fe		               inc  zpage2+1
.0d5a	68		nopage         pla
.0d5b	28		               plp
.0d5c	60		               rts
.0d5d			deczp2
.0d5d	08		               php
.0d5e	c6 fd		               dec  zpage2
.0d60	d0 02		               bne  nopage
.0d62	c6 fe		               dec  zpage2+1
.0d64	28		nopage         plp
.0d65	60		               rts
.0d66			savezp1
.0d66	08		               php
.0d67	48		               pha
.0d68	a5 fb		               lda  zpage1
.0d6a	8d f7 0d	               sta  zp1
.0d6d	a5 fc		               lda  zpage1+1
.0d6f	8d f8 0d	               sta  zp1+1
.0d72	68		               pla
.0d73	28		               plp
.0d74	60		               rts
.0d75			restzp1
.0d75	08		               php
.0d76	48		               pha
.0d77	ad f7 0d	               lda zp1
.0d7a	85 fb		               sta zpage1
.0d7c	ad f8 0d	               lda zp1+1
.0d7f	85 fc		               sta zpage1+1
.0d81	68		               pla
.0d82	28		               plp
.0d83	60		               rts
.0d84			savezp2
.0d84	08		         php
.0d85	48		         pha
.0d86	a5 fd		         lda zpage2
.0d88	8d f9 0d	         sta zp2
.0d8b	a5 fe		         lda zpage2+1
.0d8d	8d fa 0d	         sta zp2+1
.0d90	68		         pla
.0d91	28		         plp
.0d92	60		         rts
.0d93			restzp2
.0d93	08		                php
.0d94	48		                pha
.0d95	ad f9 0d	                lda  zp2
.0d98	85 fd		                sta  zpage2
.0d9a	ad fa 0d	                lda  zp2+1
.0d9d	85 fe		                sta  zpage2+1
.0d9f	68		                pla
.0da0	28		                plp
.0da1	60		                rts
.0da2			xy2addr
.0da2	08		                php
.0da3	48		                pha
.0da4	8a		                txa
.0da5	48		                pha
.0da6	98		                tya
.0da7	48		                pha
.0da8	ad f2 0d	                lda     addr1+1
.0dab	8d f4 0d	                sta     addr2+1
.0dae	ad f1 0d	                lda     addr1
.0db1	8d f3 0d	                sta     addr2
.0db4	c0 00		                cpy     #$00
.0db6	f0 0f		                beq     addx
.0db8	18		moreline        clc
.0db9	6d f0 0d	                adc     ymult
.0dbc	90 03		                bcc     norepy
.0dbe	ee f4 0d	                inc     addr2+1
.0dc1	8d f3 0d	norepy          sta     addr2
.0dc4	88		                dey
.0dc5	d0 f1		                bne     moreline
.0dc7	8a		addx            txa
.0dc8	18		                clc
.0dc9	6d f3 0d	                adc     addr2
.0dcc	90 03		                bcc     thatsit
.0dce	ee f4 0d	                inc     addr2+1
.0dd1	8d f3 0d	thatsit         sta     addr2
.0dd4	68		                pla
.0dd5	a8		                tay
.0dd6	68		                pla
.0dd7	aa		                tax
.0dd8	68		                pla
.0dd9	28		                plp
.0dda	60		                rts
.0ddb			loop
.0ddb	ce fb 0d	               dec  loopcount
.0dde	d0 03		               bne  norep
.0de0	ce fc 0d	               dec  loopcount+1
.0de3	ad fb 0d	norep          lda  loopcount
.0de6	c9 00		               cmp  #$00
.0de8	d0 05		               bne  out
.0dea	4d fc 0d	               eor  loopcount+1
.0ded	c9 ff		               cmp  #$ff
.0def	60		out            rts
>0df0	28		ymult          .byte     40
>0df1	00 00		addr1          .word     $0000
>0df3	00 00		addr2          .word     $0000
>0df5	00 00		bytecnt        .word     $0000
>0df7	00 00		zp1            .word   $0000
>0df9	00 00		zp2            .word   $0000
>0dfb	00 00		loopcount      .word     $0000

;******  Return to file: libtest01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>0dfd	01		a2hexcol       .byte     1              ; pour aputscxy
>0dfe	00		a2hexbkcol     .byte     %00000000
.0dff			a2hexpos
>0dff	00		a2hexpx        .byte     0              ; pour aputsxy
>0e00	00		a2hexpy        .byte     0
>0e01	24		a2hexprefix    .byte     "$"            ; pour aputs
>0e02	00 00		a2hexstr       .word     $00
>0e04	00 00		               .word     $00
>0e06	00		               .byte     0              ; 0 end string
>0e07	30 30 30 30	abin           .null     "00000000"
>0e0b	30 30 30 30 00
>0e10	20 20 20 00	adec           .null     "   "
.0e14			putahexfmtxy
.0e14	20 31 0c	               jsr  push
.0e17	20 63 0e	               jsr  atohex
.0e1a	ae ff 0d	               ldx  a2hexpx
.0e1d	ac 00 0e	               ldy  a2hexpy
.0e20	20 5a 0b	               jsr  gotoxy
.0e23	a2 01		               ldx  #<a2hexprefix
.0e25	a0 0e		               ldy  #>a2hexprefix
.0e27	20 40 0b	               jsr  puts
.0e2a	20 70 0c	               jsr  pop
.0e2d	60		               rts
.0e2e			putahexfmt
.0e2e	20 31 0c	               jsr  push
.0e31	20 63 0e	               jsr  atohex
.0e34	a2 01		               ldx  #<a2hexprefix
.0e36	a0 0e		               ldy  #>a2hexprefix
.0e38	20 40 0b	               jsr  puts
.0e3b	20 70 0c	               jsr  pop
.0e3e	60		               rts
.0e3f			putahex
.0e3f	20 31 0c	               jsr  push
.0e42	20 63 0e	               jsr  atohex
.0e45	a2 02		               ldx  #<a2hexstr
.0e47	a0 0e		               ldy  #>a2hexstr
.0e49	20 40 0b	               jsr  puts
.0e4c	20 70 0c	               jsr  pop
.0e4f	60		               rts
.0e50			nibtohex
.0e50	08		               php
.0e51	29 0f		               and  #$0f
.0e53	f8		               sed
.0e54	18		               clc
.0e55	69 90		               adc  #$90
.0e57	69 40		               adc  #$40
.0e59	d8		               cld
.0e5a	28		               plp
.0e5b	60		               rts
.0e5c			lsra4bits
.0e5c	08		               php
.0e5d	4a		               lsr
.0e5e	4a		               lsr
.0e5f	4a		               lsr
.0e60	4a		               lsr
.0e61	28		               plp
.0e62	60		               rts
.0e63			atohex
.0e63	08		               php
.0e64	48		               pha
.0e65	48		               pha
.0e66	20 5c 0e	               jsr  lsra4bits
.0e69	20 50 0e	               jsr  nibtohex
.0e6c	8d 02 0e	               sta  a2hexstr
.0e6f	68		               pla
.0e70	20 50 0e	               jsr  nibtohex
.0e73	8d 03 0e	               sta  a2hexstr+1
.0e76	a9 00		               lda  #$00                ; set end of string
.0e78	8d 04 0e	               sta  a2hexstr+2
.0e7b	68		               pla
.0e7c	28		               plp
.0e7d	60		               rts
.0e7e			xy2hex
.0e7e	20 31 0c	               jsr  push
.0e81	20 63 0e	               jsr  atohex
.0e84	8a		               txa
.0e85	48		               pha
.0e86	20 5c 0e	               jsr  lsra4bits
.0e89	20 50 0e	               jsr  nibtohex
.0e8c	8d 02 0e	               sta  a2hexstr
.0e8f	68		               pla
.0e90	20 50 0e	               jsr  nibtohex
.0e93	8d 03 0e	               sta  a2hexstr+1
.0e96	98		               tya
.0e97	48		               pha
.0e98	20 5c 0e	               jsr  lsra4bits
.0e9b	20 50 0e	               jsr  nibtohex
.0e9e	8d 04 0e	               sta  a2hexstr+2
.0ea1	68		               pla
.0ea2	20 50 0e	               jsr  nibtohex
.0ea5	8d 05 0e	               sta  a2hexstr+3
.0ea8	a9 00		               lda  #$00                ; 0 ended string
.0eaa	8d 06 0e	               sta  a2hexstr+4
.0ead	20 70 0c	               jsr  pop
.0eb0			atobin
.0eb0	20 31 0c	               jsr  push
.0eb3	a2 08		               ldx  #8
.0eb5	a0 00		               ldy  #0
.0eb7	18		               clc
.0eb8	2a		nextbit        rol
.0eb9	48		               pha
.0eba	69 00		               adc  #$00
.0ebc	29 01		               and  #$01
.0ebe	20 50 0e	               jsr  nibtohex
.0ec1	99 07 0e	               sta  abin,y
.0ec4	68		               pla
.0ec5	c8		               iny
.0ec6	ca		               dex
.0ec7	d0 ef		               bne  nextbit
.0ec9	a9 00		               lda  #0
.0ecb	99 07 0e	               sta  abin,y
.0ece	20 70 0c	               jsr  pull
.0ed1	60		               rts
.0ed2			putabin
.0ed2	20 b0 0e	               jsr     atobin
.0ed5	20 31 0c	               jsr     push
.0ed8	a2 07		               ldx     #<abin
.0eda	a0 0e		               ldy     #>abin
.0edc	20 40 0b	               jsr     puts
.0edf	20 70 0c	               jsr     pop
.0ee2	60		               rts
.0ee3			printabin
.0ee3	20 31 0c	               jsr     push
.0ee6	a2 07		               ldx     #<abin
.0ee8	a0 0e		               ldy     #>abin
.0eea	20 40 0b	               jsr     puts
.0eed	20 70 0c	               jsr     pop
.0ef0	60		               rts
.0ef1			putabinfmt
.0ef1	08		               php
.0ef2	48		               pha
.0ef3	a9 25		               lda     #"%"
.0ef5	20 3a 0b	               jsr     putch
.0ef8	68		               pla
.0ef9	20 d2 0e	               jsr     putabin
.0efc	28		               plp
.0efd	60		               rts
.0efe			putabinxy
.0efe	20 5a 0b	               jsr     gotoxy
.0f01	20 d2 0e	               jsr     putabin
.0f04	60		               rts
.0f05			putabinfmtxy
.0f05	20 5a 0b	               jsr     gotoxy
.0f08	20 f1 0e	               jsr     putabinfmt
.0f0b	60		               rts
.0f0c			atodec
.0f0c	20 31 0c	               jsr  push
.0f0f	f8		               sed            ; On se place en mode décimal.
.0f10	aa		               tax            ; On déplace a dans x.
.0f11	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.0f13	a9 00		               lda  #$00      ; 0 dans A.
.0f15	18		nextbit        clc            ; Bit carry a 0.
.0f16	69 01		               adc  #$01      ; Ajoute 1 a A.
.0f18	90 01		               bcc  decx      ; Pas de carry, pas de report.
.0f1a	c8		               iny            ; On incrémente Y
.0f1b	ca		decx           dex            ; X=X-1
.0f1c	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.0f1e	48		               pha            ; A sur le stack.
.0f1f	98		               tya            ; Y dans A (MSB)
.0f20	20 50 0e	               jsr  nibtohex  ; a hex petsci ...
.0f23	8d 10 0e	               sta  adec      ; ... dans tampon.
.0f26	68		               pla            ; Récupere A
.0f27	48		               pha            ;
.0f28	20 50 0e	               jsr  nibtohex
.0f2b	8d 12 0e	               sta  adec+2
.0f2e	68		               pla
.0f2f	6a		               ror
.0f30	6a		               ror
.0f31	6a		               ror
.0f32	6a		               ror
.0f33	20 50 0e	               jsr  nibtohex
.0f36	8d 11 0e	               sta  adec+1
.0f39	d8		               cld            ; On revient en mode binaire.
.0f3a	20 70 0c	               jsr  pull
.0f3d	60		               rts
.0f3e			putadec
.0f3e	20 31 0c	               jsr  push
.0f41	20 0c 0f	               jsr  atodec
.0f44	a2 10		               ldx  #<adec
.0f46	a0 0e		               ldy  #>adec+1
.0f48	20 40 0b	               jsr  puts
.0f4b	20 70 0c	               jsr  pop
.0f4e	60		               rts

;******  Return to file: libtest01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>0f4f	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>0f53	00 00 00 00 00 00 00 00 00 0d 00 00
>0f5f	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>0f63	00 00 00 00 00 00 00 00 00 00 00 00
>0f6f	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>0f73	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>0f7f	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>0f83	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>0f8f	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>0f93	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>0f9f	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>0fa3	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>0faf	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>0fb3	00 00 00 00 00 00 00 00 00 00 00 00
>0fbf	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>0fc3	00 00 00 00 00 00 00 00 00 00 00 00
>0fcf	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>0fd3	00 00 00 00 00 00 00 00 00 00 00 00
>0fdf	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>0fe3	00 00 00 00 00 00 00 00 00 00 00 00
>0fef	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>0ff3	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>0fff	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1003	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>100f	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1013	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>101f	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>1023	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>102f	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>1033	00 00 00 00 00 00 00 00 00 00 00 00
>103f	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>1043	00 00 00 00 00 00 00 00 00 00 00 00
.104f			waitstop
.104f	20 31 0c	               jsr  push
.1052	20 ed f6	wait           jsr  k_stop
.1055	d0 fb		               bne  wait
.1057	20 70 0c	               jsr  pop
.105a	60		               rts
.105b			anykey
.105b	08		               php
.105c	48		               pha
.105d	a5 cb		nokey          lda 203
.105f	c9 40		               cmp #64
.1061	f0 fa		               beq nokey
.1063	20 69 10	               jsr releasekey
.1066	68		               pla
.1067	28		               plp
.1068	60		               rts
.1069			releasekey
.1069	08		               php
.106a	48		               pha
.106b	a5 cb		keypressed     lda 203
.106d	c9 40		               cmp #64
.106f	d0 fa		               bne keypressed
.1071	68		               pla
.1072	28		               plp
.1073	60		               rts
.1074			getkey
.1074	20 e4 ff	again          jsr  getin
.1077	c9 00		               cmp  #0
.1079	f0 f9		               beq  again
.107b	60		               rts
.107c			kbflushbuff
.107c	08		               php
.107d	48		               pha
.107e	20 e4 ff	again          jsr  getin
.1081	c9 00		               cmp  #0
.1083	d0 f9		               bne  again
.1085	68		               pla
.1086	28		               plp
.1087	60		               rts
.1088			waitkey
.1088	20 31 0c	               jsr  push
.108b	8d d9 10	               sta  thekey
.108e	20 e4 ff	nope           jsr  getin
.1091	20 d2 ff	               jsr  chrout
.1094	cd d9 10	               cmp  thekey
.1097	d0 f5		               bne  nope
.1099	20 d2 ff	               jsr  chrout
.109c	20 70 0c	               jsr  pop
.109f	60		               rts
.10a0			waitspace
.10a0	20 31 0c	               jsr  push
.10a3	a9 7f		wait           lda  #$7f  ;%01111111
.10a5	8d 00 dc	               sta  $dc00
.10a8	ad 01 dc	               lda  $dc01
.10ab	29 10		               and  #$10  ;mask %00010000
.10ad	d0 f4		               bne  wait
.10af	20 70 0c	               jsr  pop
.10b2			waitsstop
.10b2	20 31 0c	               jsr  push
.10b5	20 ed f6	wait           jsr  k_stop  ;%01111111
.10b8	d0 fb		               bne  wait
.10ba	20 70 0c	               jsr  pop
.10bd			waitreturn
.10bd	20 31 0c	               jsr  push
.10c0	ad da 10	               lda  thecount
.10c3	8d 00 04	               sta  scrnram
.10c6	a9 02		               lda  #$02
.10c8	8d 00 d8	               sta  colorram
.10cb	20 e4 ff	nope           jsr  getin
.10ce	c9 0d		nohex          cmp  #$0d
.10d0	d0 f9		               bne  nope
.10d2	ee da 10	               inc  thecount
.10d5	20 70 0c	               jsr  pop
.10d8	60		               rts
>10d9	00		thekey         .byte   0
>10da	01		thecount       .byte   $01

;******  Return to file: libtest01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.10db			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.10db	20 31 0c	                jsr push
.10de	08		                php
.10df	8d 9f 12	                sta  rega
.10e2	68		                pla
.10e3	8d a2 12	                sta  regp
.10e6	8e a0 12	                stx  regx
.10e9	8c a1 12	                sty  regy
.10ec	ba		                tsx
.10ed	8e a3 12	                stx  regs
.10f0	68		                pla
.10f1	8d a6 12	                sta  regpcl
.10f4	8d a7 12	                sta  regpcl2
.10f7	68		                pla
.10f8	8d a4 12	                sta  regpch
.10fb	8d a5 12	                sta  regpch2
.10fe	ad 9f 12	                lda  rega
.1101	48		                pha
.1102	20 50 0e	                jsr  nibtohex
.1105	8d 49 12	                sta  vala+1
.1108	68		                pla
.1109	20 5c 0e	                jsr  lsra4bits
.110c	20 50 0e	                jsr  nibtohex
.110f	8d 48 12	                sta  vala
.1112	ad a1 12	                lda  regy
.1115	48		                pha
.1116	20 50 0e	                jsr  nibtohex
.1119	8d 5d 12	                sta  valy+1
.111c	68		                pla
.111d	20 5c 0e	                jsr  lsra4bits
.1120	20 50 0e	                jsr  nibtohex
.1123	8d 5c 12	                sta  valy
.1126	ad a0 12	                lda  regx
.1129	48		                pha
.112a	20 50 0e	                jsr  nibtohex
.112d	8d 53 12	                sta  valx+1
.1130	68		                pla
.1131	20 5c 0e	                jsr  lsra4bits
.1134	20 50 0e	                jsr  nibtohex
.1137	8d 52 12	                sta  valx
.113a	ad a2 12	                lda  regp
.113d	48		                pha
.113e	20 50 0e	                jsr  nibtohex
.1141	8d 67 12	                sta  valp+1
.1144	68		                pla
.1145	20 5c 0e	                jsr  lsra4bits
.1148	20 50 0e	                jsr  nibtohex
.114b	8d 66 12	                sta  valp
.114e	ad a3 12	                lda  regs
.1151	48		                pha
.1152	20 50 0e	                jsr  nibtohex
.1155	8d 71 12	                sta  vals+1
.1158	68		                pla
.1159	20 5c 0e	                jsr  lsra4bits
.115c	20 50 0e	                jsr  nibtohex
.115f	8d 70 12	                sta  vals
.1162	18		                clc
.1163	ad a7 12	                lda regpcl2
.1166	69 01		                adc #$01
.1168	8d a7 12	                sta regpcl2
.116b	ad a7 12	                lda regpcl2
.116e	d0 03		                bne noreport
.1170	ee a5 12	                inc regpch2
.1173	ad a5 12	    noreport    lda regpch2
.1176	48		                pha
.1177	20 50 0e	                jsr  nibtohex
.117a	8d 7c 12	                sta  valpch+1
.117d	68		                pla
.117e	20 5c 0e	                jsr  lsra4bits
.1181	20 50 0e	                jsr  nibtohex
.1184	8d 7b 12	                sta  valpch
.1187	ad a7 12	                lda  regpcl2
.118a	48		                pha
.118b	20 50 0e	                jsr  nibtohex
.118e	8d 7e 12	                sta  valpcl+1
.1191	68		                pla
.1192	20 5c 0e	                jsr  lsra4bits
.1195	20 50 0e	                jsr  nibtohex
.1198	8d 7d 12	                sta  valpcl
.119b	a5 fb		                lda  zpage1
.119d	48		                pha
.119e	20 50 0e	                jsr  nibtohex
.11a1	8d 8c 12	                sta  valz1l
.11a4	68		                pla
.11a5	20 5c 0e	                jsr  lsra4bits
.11a8	20 50 0e	                jsr  nibtohex
.11ab	8d 8d 12	                sta  valz1l+1
.11ae	a5 fc		                lda  zpage1+1
.11b0	48		                pha
.11b1	20 50 0e	                jsr  nibtohex
.11b4	8d 8a 12	                sta  valz1h
.11b7	68		                pla
.11b8	20 5c 0e	                jsr  lsra4bits
.11bb	20 50 0e	                jsr  nibtohex
.11be	8d 8b 12	                sta  valz1h+1
.11c1	a5 fd		                lda  zpage2
.11c3	48		                pha
.11c4	20 50 0e	                jsr  nibtohex
.11c7	8d 9b 12	                sta  valz2l
.11ca	68		                pla
.11cb	20 5c 0e	                jsr  lsra4bits
.11ce	20 50 0e	                jsr  nibtohex
.11d1	8d 9c 12	                sta  valz2l+1
.11d4	a5 fe		                lda  zpage2+1
.11d6	48		                pha
.11d7	20 50 0e	                jsr  nibtohex
.11da	8d 99 12	                sta  valz2h
.11dd	68		                pla
.11de	20 5c 0e	                jsr  lsra4bits
.11e1	20 50 0e	                jsr  nibtohex
.11e4	8d 9a 12	                sta  valz2h+1
.11e7	20 21 0c	                jsr  setinverse
.11ea	78		                sei
.11eb	a2 41		                ldx  #<srega
.11ed	a0 12		                ldy  #>srega+1
.11ef	20 c9 0b	                jsr  putscxy
.11f2	a2 4b		                ldx  #<sregx
.11f4	a0 12		                ldy  #>sregx+1
.11f6	20 c9 0b	                jsr  putscxy
.11f9	a2 55		                ldx  #<sregy
.11fb	a0 12		                ldy  #>sregy+1
.11fd	20 c9 0b	                jsr  putscxy
.1200	a2 5f		                ldx  #<sregp
.1202	a0 12		                ldy  #>sregp+1
.1204	20 c9 0b	                jsr  putscxy
.1207	a2 69		                ldx  #<sregs
.1209	a0 12		                ldy  #>sregs+1
.120b	20 c9 0b	                jsr  putscxy
.120e	a2 73		                ldx  #<sregpc
.1210	a0 12		                ldy  #>sregpc+1
.1212	20 c9 0b	                jsr  putscxy
.1215	a2 81		                ldx  #<sregz1
.1217	a0 12		                ldy  #>sregz1+1
.1219	20 c9 0b	                jsr  putscxy
.121c	a2 90		                ldx  #<sregz2
.121e	a0 12		                ldy  #>sregz2+1
.1220	20 c9 0b	                jsr  putscxy
.1223	58		                cli
.1224	20 29 0c	                jsr  clrinverse
.1227	ad a4 12	                lda  regpch
.122a	48		                pha
.122b	ad a6 12	                lda  regpcl
.122e	48		                pha
.122f	ac a1 12	                ldy  regy
.1232	ae a0 12	                ldx  regx
.1235	ad a2 12	                lda  regp
.1238	48		                pha
.1239	ad 9f 12	                lda  rega
.123c	28		                plp
.123d	20 70 0c	                jsr pop
.1240	60		                rts
>1241	01 00 17	srega   .byte   colr,coln,line
>1244	20 41 3a 24	        .text   ' a:$' ;4,24
>1248	00 00 00	vala    .byte   0,0,0
>124b	01 06 17	sregx   .byte   colr,coln+6,line
>124e	20 58 3a 24	        .text   ' x:$' ;4,24
>1252	00 00 00	valx    .byte   0,0,0
>1255	01 0c 17	sregy   .byte   colr,coln+12,line
>1258	20 59 3a 24	        .text   ' y:$' ;4,24
>125c	00 00 00	valy    .byte   0,0,0
>125f	01 12 17	sregp   .byte   colr,coln+18,line
>1262	20 50 3a 24	        .text   ' p:$' ;4,24
>1266	00 00 00	valp    .byte   0,0,0
>1269	01 18 17	sregs   .byte   colr,coln+24,line
>126c	20 53 3a 24	        .text   ' s:$' ;4,24
>1270	00 00 00	vals    .byte   0,0,0
>1273	01 1e 17	sregpc  .byte   colr,coln+30,line
>1276	20 50 43 3a	        .text   ' pc:$' ;4,24
>127a	24
>127b	00 00		valpch  .byte   0,0
>127d	00 00 20 00	valpcl  .byte   0,0,32,0
>1281	01 03 18	sregz1  .byte   colr,coln+3,line+1
>1284	20 5a 50 31	        .text   ' zp1:$' ;4,24
>1288	3a 24
>128a	00 00		valz1h  .byte   0,0
>128c	00 00 20 00	valz1l  .byte   0,0,32,0
>1290	01 0f 18	sregz2  .byte   colr,coln+15,line+1
>1293	20 5a 50 32	        .text   ' zp2:$' ;4,24
>1297	3a 24
>1299	00 00		valz2h  .byte   0,0
>129b	00 00 20 00	valz2l  .byte   0,0,32,0
>129f	00		rega    .byte   0
>12a0	00		regx    .byte   0
>12a1	00		regy    .byte   0
>12a2	00		regp    .byte   0
>12a3	00		regs    .byte   0
>12a4	00		regpch  .byte   0
>12a5	00		regpch2 .byte   0
>12a6	00		regpcl  .byte   0
>12a7	00		regpcl2 .byte   0
>12a8	00		vzp1h   .byte   0
>12a9	00		vzp1l   .byte   0
>12aa	00		vzp2h   .byte   0
>12ab	00		vzp2l   .byte   0

;******  Return to file: libtest01.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L p027ex03.txt -o p027ex03.prg p027ex03.asm
; Mon Oct 28 22:11:31 2024

;Offset	;Hex		;Source

;******  Processing input file: p027ex03.asm

="20241028-220934"	           Version = "20241028-220934"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	2a 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	20 2a 50 52			.text " *programmation assembleur sue c64*"
>080a	4f 47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45
>081a	4d 42 4c 45 55 52 20 53 55 45 20 43 36 34 2a
>0829	00				.byte $00		;Un zéro pour indiquer la fin de cette
>082a	46 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082c	02 00				.word 2   	;Numero de la ligne Basic.
>082e	8f				.byte $8F		;Le token de la commande REM du Basic
>082f	20 2a 50 41			.text " *par daniel lafrance*"
>0833	52 20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43
>0843	45 2a
>0845	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0846	51 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0848	03 00				.word 3   	;Numero de la ligne Basic.
>084a	9e				.byte $9e		;Le token de la commande PRINT du Basic
>084b	30 32 31 33			.text format("%05d",hpgmstart)
>084f	31
>0850	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0851	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0853	4c 56 08	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: p027ex03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: p027ex03.asm

.0856			main
.0856	20 d4 0b	          jsr       scrmaninit
.0859	08		               php
.085a	48		               pha
.085b	a9 08		               lda  #$08
.085d	20 d2 ff	               jsr  $ffd2
.0860	68		               pla
.0861	28		               plp
.0862	48		               pha
.0863	a9 03		               lda  #ccyan
.0865	8d 20 d0	               sta  $d020
.0868	68		               pla
.0869	48		               pha
.086a	a9 01		               lda  #cblanc
.086c	8d 21 d0	               sta  $d021
.086f	68		               pla
.0870	48		               pha
.0871	a9 06		               lda  #cbleu
.0873	8d 86 02	               sta  bascol
.0876	68		               pla
.0877	20 9f 08	          jsr       bookinfo
.087a	20 9d 0b	          jsr       akey
.087d	20 f4 0b	          jsr       cls
.0880	20 e3 08	          jsr       help
.0883	20 9d 0b	          jsr       akey
.0886	20 1b 0b	          jsr       p027ex03
.0889	08		               php
.088a	48		               pha
.088b	a9 09		               lda  #$09
.088d	20 d2 ff	               jsr  $ffd2
.0890	68		               pla
.0891	28		               plp
.0892	08		               php
.0893	48		               pha
.0894	a9 8e		               lda  #b_uppercase
.0896	8d f3 0b	               sta  characterset
.0899	20 d2 ff	               jsr  $ffd2
.089c	68		               pla
.089d	28		               plp
.089e	60		          rts
.089f			bookinfo
.089f	08		               php
.08a0	48		               pha
.08a1	a9 0e		               lda  #14
.08a3	8d f3 0b	               sta  characterset
.08a6	20 d2 ff	               jsr  $ffd2
.08a9	68		               pla
.08aa	28		               plp
.08ab	20 f4 0b	          jsr       cls
.08ae	20 02 0d	               jsr  push
.08b1	a2 f2		isx            ldx  #<line
.08b3	a0 0a		isy            ldy  #>line
.08b5	20 11 0c	               jsr  puts
.08b8	20 41 0d	               jsr  pull
.08bb	20 02 0d	               jsr  push
.08be	a2 1a		isx            ldx  #<headera
.08c0	a0 09		isy            ldy  #>headera
.08c2	20 11 0c	               jsr  puts
.08c5	20 41 0d	               jsr  pull
.08c8	20 02 0d	               jsr  push
.08cb	a2 ba		isx            ldx  #<headerb
.08cd	a0 09		isy            ldy  #>headerb
.08cf	20 11 0c	               jsr  puts
.08d2	20 41 0d	               jsr  pull
.08d5	20 02 0d	               jsr  push
.08d8	a2 f2		isx            ldx  #<line
.08da	a0 0a		isy            ldy  #>line
.08dc	20 11 0c	               jsr  puts
.08df	20 41 0d	               jsr  pull
.08e2	60		          rts
.08e3			help
.08e3	08		               php
.08e4	48		               pha
.08e5	a9 0e		               lda  #14
.08e7	8d f3 0b	               sta  characterset
.08ea	20 d2 ff	               jsr  $ffd2
.08ed	68		               pla
.08ee	28		               plp
.08ef	20 f4 0b	          jsr       cls
.08f2	20 02 0d	               jsr  push
.08f5	a2 5d		isx            ldx  #<shortcuts
.08f7	a0 0a		isy            ldy  #>shortcuts
.08f9	20 11 0c	               jsr  puts
.08fc	20 41 0d	               jsr  pull
.08ff	20 02 0d	               jsr  push
.0902	a2 de		isx            ldx  #<helptext
.0904	a0 0a		isy            ldy  #>helptext
.0906	20 11 0c	               jsr  puts
.0909	20 41 0d	               jsr  pull
.090c	20 02 0d	               jsr  push
.090f	a2 f2		isx            ldx  #<line
.0911	a0 0a		isy            ldy  #>line
.0913	20 11 0c	               jsr  puts
.0916	20 41 0d	               jsr  pull
.0919	60		          rts
.091a			headera
>091a	20 2a 20 20	          .text               " *       Vic-20 and Commodore 64      *"
>091e	20 20 20 20 20 d6 49 43 2d 32 30 20 41 4e 44 20
>092e	c3 4f 4d 4d 4f 44 4f 52 45 20 36 34 20 20 20 20
>093e	20 20 2a
>0941	0d		          .byte     b_crlf
>0942	20 2a 20 20	          .text               " *           Tool Kit: BASIC          *"
>0946	20 20 20 20 20 20 20 20 20 d4 4f 4f 4c 20 cb 49
>0956	54 3a 20 c2 c1 d3 c9 c3 20 20 20 20 20 20 20 20
>0966	20 20 2a
>0969	0d		          .byte     b_crlf
>096a	20 2a 20 20	          .text               " *          Book by Dan Heeb.         *"
>096e	20 20 20 20 20 20 20 20 c2 4f 4f 4b 20 42 59 20
>097e	c4 41 4e 20 c8 45 45 42 2e 20 20 20 20 20 20 20
>098e	20 20 2a
>0991	0d		          .byte     b_crlf
>0992	20 2a 20 20	          .null               " *         ISBN: 0-942386-32-9        *"
>0996	20 20 20 20 20 20 20 c9 d3 c2 ce 3a 20 30 2d 39
>09a6	34 32 33 38 36 2d 33 32 2d 39 20 20 20 20 20 20
>09b6	20 20 2a 00
>09ba	0d		headerb   .byte     $0d
>09bb	20 2a 20 20	          .text               " *    Direct Use of Floating Point    *"
>09bf	20 20 c4 49 52 45 43 54 20 d5 53 45 20 4f 46 20
>09cf	c6 4c 4f 41 54 49 4e 47 20 d0 4f 49 4e 54 20 20
>09df	20 20 2a
>09e2	0d		          .byte     $0d
>09e3	20 2a 20 20	          .text               " *         page 27, exemple #3        *"
>09e7	20 20 20 20 20 20 20 50 41 47 45 20 32 37 2c 20
>09f7	45 58 45 4d 50 4c 45 20 23 33 20 20 20 20 20 20
>0a07	20 20 2a
>0a0a	0d		          .byte     $0d
>0a0b	20 2a 20 20	          .text               " *    Programmeur Daniel Lafrance.    *"
>0a0f	20 20 d0 52 4f 47 52 41 4d 4d 45 55 52 20 c4 41
>0a1f	4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e 20 20
>0a2f	20 20 2a
>0a32	0d		          .byte     $0d
>0a33	20 2a 20 20	          .text     format(   " *      Version: %s.     * ",Version)
>0a37	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>0a47	34 31 30 32 38 2d 32 32 30 39 33 34 2e 20 20 20
>0a57	20 20 2a 20
>0a5b	90 00		          .byte     b_black,b_eot
>0a5d	1f 20 12	shortcuts .byte     b_blue,b_space,b_rvs_on
>0a60	20 20 20 20	          .text               "        RACCOURCIS DES EXEMPLES       "
>0a64	20 20 20 20 d2 c1 c3 c3 cf d5 d2 c3 c9 d3 20 c4
>0a74	c5 d3 20 c5 d8 c5 cd d0 cc c5 d3 20 20 20 20 20
>0a84	20 20
>0a86	92 0d 0d	          .byte     b_rvs_off,b_crlf,b_crlf
>0a89	20 50 30 32	          .text     format(   " p027ex03: SYS %d ($%04X)",p027ex03, p027ex03)
>0a8d	37 45 58 30 33 3a 20 d3 d9 d3 20 32 38 34 33 20
>0a9d	28 24 30 c2 31 c2 29
>0aa4	0d		          .byte     b_crlf
>0aa5	20 48 45 4c	          .text     format(   " help....: SYS %d ($%04X)",help, help)
>0aa9	50 2e 2e 2e 2e 3a 20 d3 d9 d3 20 32 32 37 35 20
>0ab9	28 24 30 38 c5 33 29
>0ac0	0d		          .byte     b_crlf
>0ac1	20 43 4c 53	          .text     format(   " cls.....: SYS %d ($%04X)",cls, cls)
>0ac5	2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 33 30 36 30 20
>0ad5	28 24 30 c2 c6 34 29
>0adc	0d 00		          .byte     b_crlf,b_eot
>0ade	0d 20 1c	helptext  .byte     b_crlf,b_space,b_red
>0ae1	20 45 58 2e	          .text     format(   " ex.: SYS %d",p027ex03)
>0ae5	3a 20 d3 d9 d3 20 32 38 34 33
>0aef	0d 90 00	          .byte     b_crlf,b_black,b_eot
>0af2	20 2d 2d 2d	line      .text               " --------------------------------------"
>0af6	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0b06	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0b16	2d 2d 2d
>0b19	0d 00		          .byte     b_crlf,b_eot
.0b1b			p027ex03
.0b1b	48		          pha
.0b1c	8a		          txa
.0b1d	48		          pha
.0b1e	48		               pha
.0b1f	a9 03		               lda  #ccyan
.0b21	8d 20 d0	               sta  $d020
.0b24	68		               pla
.0b25	48		               pha
.0b26	a9 01		               lda  #cblanc
.0b28	8d 21 d0	               sta  $d021
.0b2b	68		               pla
.0b2c	48		               pha
.0b2d	a9 06		               lda  #cbleu
.0b2f	8d 86 02	               sta  bascol
.0b32	68		               pla
.0b33	20 f4 0b	          jsr  cls
.0b36	20 5b 0b	          jsr  insub
.0b39	20 dd bd	          jsr  b_facasc       ; Convertie FAC1 en ascii à $0100.
.0b3c	a0 ff		          ldy  #$ff           ; Cherche la fin de la chaine de caractère ($00)
.0b3e	c8		fndend    iny                 ; De
.0b3f	b9 00 01	          lda  $0100,y        ; Lie le caractère.
.0b42	d0 fa		          bne  fndend         ; Ce n'est pas un $00, on cherche encore.
.0b44	c8		          iny                 ; On ajuste le compte.
.0b45	98		          tya                 ; On met le compte dans acc.
.0b46	48		          pha                 ; On le sauvegarde.
.0b47	a9 00		          lda  #$00           ; On place l'adresse de la chaine $0100
.0b49	85 22		          sta  $22            ;  le $00 dans $22(lsb)
.0b4b	a9 01		          lda  #$01           ;  et le $01
.0b4d	85 23		          sta  $23            ;  dans $23(msb)
.0b4f	68		          pla                 ; On récupère le compte.
.0b50	20 f4 0b	          jsr  cls
.0b53	20 24 ab	          jsr  b_strout       ; Affiche la chaine(z) dont l'adresse est
.0b56	68		          pla                 ;  dans $22(lsb) et $23(msb)
.0b57	aa		          tax
.0b58	68		          pla
.0b59	60		          rts
>0b5a	00		byte      .byte 0
.0b5b			insub
.0b5b	48		          pha
.0b5c	8a		          txa
.0b5d	48		          pha
.0b5e	20 bf e3	          jsr  b_intcgt       ; Initialide chrget
.0b61	a9 00		          lda  #$00           ; On efface le basic input buffer
.0b63	a0 59		          ldy  #$59           ;  situé à $200 long de 89 bytes ($59)
.0b65	99 00 02	clear     sta  b_inpbuff,y    ;  en plaçant des $00 partout
.0b68	88		          dey                 ;  et ce jusqu'au
.0b69	d0 fa		          bne  clear          ;  dernier.
.0b6b	a9 89		          lda  #<ptext
.0b6d	85 22		          sta  $22
.0b6f	a9 0b		          lda  #>ptext
.0b71	85 23		          sta  $23
.0b73	a9 14		          lda  #ptextend-ptext
.0b75	20 24 ab	          jsr  b_strout       ; Affiche la chaine(z)
.0b78	20 f9 ab	          jsr  b_prompt       ; Affiche un "?" et attend une entrée.
.0b7b	86 7a		          stx  $7a            ; X et Y pointe sur $01ff au retour.
.0b7d	84 7b		          sty  $7b
.0b7f	20 73 00	          jsr  b_chrget       ; Lecture du buffer.
.0b82	20 f3 bc	          jsr  b_ascflt       ; Conversion la chaine ascii en 200 en float.
.0b85	68		          pla                 ;  dans $22(lsb) et $23(msb)
.0b86	aa		          tax
.0b87	68		          pla
.0b88	60		          rts
>0b89	0d 9c 20	ptext     .byte b_crlf, b_purple, b_space
>0b8c	c5 4e 54 45	          .text "Enter a number "
>0b90	52 20 41 20 4e 55 4d 42 45 52 20
>0b9b	90 00		          .byte b_black,b_eot
.0b9d			ptextend
.0b9d			akey
.0b9d	a9 ae		          lda  #<kmsg
.0b9f	85 22		          sta  $22
.0ba1	a9 0b		          lda  #>kmsg
.0ba3	85 23		          sta  $23
.0ba5	a9 1e		          lda  #kmsgend-kmsg
.0ba7	20 24 ab	          jsr  b_strout
.0baa	20 1a 11	          jsr  anykey
.0bad	60		          rts
>0bae	0d 1e 91 1d	kmsg      .byte b_crlf,b_green,b_crsr_up,b_crsr_right
>0bb2	d5 4e 45 20	          .text               "Une clef pour continuer!"
>0bb6	43 4c 45 46 20 50 4f 55 52 20 43 4f 4e 54 49 4e
>0bc6	55 45 52 21
>0bca	90 00		          .byte b_black,b_eot
.0bcc			kmsgend

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0bcc	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0bd0	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0bd4			libtart

;******  Return to file: p027ex03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: p027ex03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_vftf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: p027ex03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0bd4			scrmaninit
.0bd4	20 02 0d	               jsr  push
.0bd7	a9 06		               lda  #vbleu
.0bd9	8d 21 d0	               sta  vicbackcol
.0bdc	a9 05		               lda  #vvert
.0bde	8d 20 d0	               sta  vicbordcol
.0be1	a9 01		               lda  #vblanc
.0be3	8d 86 02	               sta  bascol
.0be6	ad 00 04	               lda  scrnram
.0be9	8d 00 04	               sta  scrnram
.0bec	20 f4 0b	               jsr  cls
.0bef	20 41 0d	               jsr  pop
.0bf2	60		               rts
>0bf3	8e		characterset   .byte b_uppercase
.0bf4			cls
.0bf4	08		               php
.0bf5	48		               pha
.0bf6	a9 93		               lda  #$93
.0bf8	20 0b 0c	               jsr  putch
.0bfb	68		               pla
.0bfc	28		               plp
.0bfd	60		               rts
.0bfe			putnch
.0bfe	08		               php
.0bff	e0 00		               cpx  #$00
.0c01	f0 06		               beq  out
.0c03	20 d2 ff	again          jsr  $ffd2
.0c06	ca		               dex
.0c07	d0 fa		               bne  again
.0c09	28		out            plp
.0c0a	60		               rts
.0c0b			putch
.0c0b	08		               php
.0c0c	20 d2 ff	               jsr  $ffd2
.0c0f	28		               plp
.0c10	60		               rts
.0c11			puts
.0c11	20 02 0d	               jsr  push
.0c14	86 fb		               stx  zpage1
.0c16	84 fc		               sty  zpage1+1
.0c18	a0 00		               ldy  #0
.0c1a	b1 fb		next           lda  (zpage1),y
.0c1c	f0 09		               beq  exit
.0c1e	20 0b 0c	               jsr  putch
.0c21	20 09 0e	               jsr  inczp1
.0c24	4c 1a 0c	               jmp  next
.0c27	20 41 0d	exit           jsr  pop
.0c2a	60		               rts
.0c2b			gotoxy
.0c2b	08		               php
.0c2c	18		               clc
.0c2d	8a		               txa
.0c2e	48		               pha
.0c2f	98		               tya
.0c30	aa		               tax
.0c31	68		               pla
.0c32	a8		               tay
.0c33	20 f0 ff	               jsr  kplot
.0c36	28		               plp
.0c37	60		               rts
.0c38			cursor
=$0286			bascol    =    $0286
.0c38	08		               php
.0c39	48		               pha
.0c3a	90 12		               bcc  restore
.0c3c	20 f0 ff	               jsr  kplot
.0c3f	8c 60 0c	               sty  cx
.0c42	8e 61 0c	               stx  cy
.0c45	ad 86 02	               lda  bascol
.0c48	8d 62 0c	               sta  bcol
.0c4b	4c 5d 0c	               jmp  out
.0c4e	ae 61 0c	restore        ldx  cy
.0c51	ac 60 0c	               ldy  cx
.0c54	20 f0 ff	               jsr  kplot
.0c57	ad 62 0c	               lda  bcol
.0c5a	8d 86 02	               sta  bascol
.0c5d	68		out            pla
.0c5e	28		               plp
.0c5f	60		               rts
>0c60	00		cx   .byte     $00
>0c61	00		cy   .byte     $00
>0c62	00		bcol .byte     $00
.0c63			cursave
.0c63	08		               php
.0c64	38		               sec
.0c65	20 38 0c	               jsr  cursor
.0c68	28		               plp
.0c69	60		               rts
.0c6a			curput
.0c6a	08		               php
.0c6b	18		               clc
.0c6c	20 38 0c	               jsr  cursor
.0c6f	28		               plp
.0c70	60		               rts
.0c71			putsxy
.0c71	20 02 0d	               jsr  push
.0c74	86 fb		               stx  zpage1
.0c76	84 fc		               sty  zpage1+1
.0c78	a0 00		               ldy  #$00
.0c7a	b1 fb		               lda  (zpage1),y
.0c7c	aa		               tax
.0c7d	20 09 0e	               jsr  inczp1
.0c80	b1 fb		               lda  (zpage1),y
.0c82	a8		               tay
.0c83	20 2b 0c	               jsr  gotoxy
.0c86	20 09 0e	               jsr  inczp1
.0c89	a6 fb		               ldx  zpage1
.0c8b	a4 fc		               ldy  zpage1+1
.0c8d	20 11 0c	               jsr  puts
.0c90	20 41 0d	               jsr  pop
.0c93	60		               rts
>0c94	00 00		straddr   .word     $00
>0c96	00		px        .byte     $00
>0c97	00		py        .byte     $00
>0c98	00 00		zp1       .word     $00
.0c9a			putscxy
.0c9a	20 02 0d	               jsr  push
.0c9d	84 fc		               sty  zpage1+1
.0c9f	86 fb		               stx  zpage1
.0ca1	ad 86 02	               lda  bascol
.0ca4	8d c4 0c	               sta  bc
.0ca7	a0 00		               ldy #$00
.0ca9	b1 fb		               lda  (zpage1),y
.0cab	8d 86 02	               sta  bascol
.0cae	20 09 0e	               jsr  inczp1
.0cb1	a6 fb		               ldx  zpage1
.0cb3	a4 fc		               ldy  zpage1+1
.0cb5	20 71 0c	               jsr  putsxy
.0cb8	ad c4 0c	               lda  bc
.0cbb	8d 86 02	               sta  bascol
.0cbe	20 41 0d	               jsr  pop
.0cc1	60		               rts
>0cc2	00 00		straddr  .word      $00
>0cc4	00		bc       .byte      $00
>0cc5	00 00		zp1      .word      $00
.0cc7			putrahex
.0cc7	08		               php
.0cc8	48		               pha
.0cc9	20 1f 0f	               jsr  a2hex
.0ccc	a9 be		               lda  #<a2hexstr
.0cce	a0 0e		               ldy  #>a2hexstr
.0cd0	20 11 0c	               jsr  puts
.0cd3	68		               pla
.0cd4	28		               plp
.0cd5	60		               rts
.0cd6			kputrahexxy
.0cd6			bputrahexxy
.0cd6			putrahexxy
.0cd6	08		               php
.0cd7	20 1f 0f	               jsr  a2hex
.0cda	a9 bb		               lda  #<a2hexpos
.0cdc	a0 0e		               ldy  #>a2hexpos
.0cde	20 71 0c	               jsr  putsxy
.0ce1	68		               pla
.0ce2	28		               plp
.0ce3	60		               rts
.0ce4			putrahexcxy
.0ce4	08		               php
.0ce5	20 1f 0f	               jsr  a2hex
.0ce8	a9 bb		               lda  #<a2hexpos
.0cea	a0 0e		               ldy  #>a2hexpos
.0cec	20 9a 0c	               jsr  putscxy
.0cef	68		               pla
.0cf0	28		               plp
.0cf1	60		               rts
.0cf2			setinverse
.0cf2	48		               pha
.0cf3	a9 12		               lda  #$12
.0cf5	20 d2 ff	               jsr  $ffd2
.0cf8	68		               pla
.0cf9	60		               rts
.0cfa			clrinverse
.0cfa	48		               pha
.0cfb	a9 92		               lda  #$92
.0cfd	20 d2 ff	               jsr  $ffd2
.0d00	68		               pla
.0d01	60		               rts

;******  Return to file: p027ex03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.0d02			push
.0d02	08		          php            ; stack : flg, pcl, pch
.0d03	78		          sei
.0d04	8d 3e 0d	          sta  ra        ; save a
.0d07	68		          pla            ; stack : pcl, pch
.0d08	8d 3d 0d	          sta  rp        ; save rp
.0d0b	68		          pla            ; stack : pch
.0d0c	8d 3f 0d	          sta  pc        ; save pcl
.0d0f	68		          pla            ; stack : -
.0d10	8d 40 0d	          sta  pc+1      ; save pch
.0d13	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0d15	48		          pha            ; stack : zp1l
.0d16	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0d18	48		          pha            ; stack : zp1h, zp1l
.0d19	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0d1b	48		          pha            ; stack : zp2l, zp1h, zp1l
.0d1c	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0d1e	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0d1f	ad 3d 0d	          lda  rp        ; get rp
.0d22	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0d23	ad 3e 0d	          lda  ra        ; get a
.0d26	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0d27	8a		          txa            ; get x
.0d28	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d29	98		          tya            ; get y
.0d2a	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d2b	ad 40 0d	          lda  pc+1      ; get pch
.0d2e	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d2f	ad 3f 0d	          lda  pc        ; get pcl
.0d32	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d33	ad 3d 0d	          lda  rp        ; get rp
.0d36	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d37	ad 3e 0d	          lda  ra        ; get a
.0d3a	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d3b	58		          cli
.0d3c	60		          rts
>0d3d	00		rp        .byte     0
>0d3e	00		ra        .byte     0
>0d3f	00 00		pc        .word     0
.0d41			pull
.0d41			pop
.0d41	78		          sei
.0d42	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d43	8d 76 0d	          sta  pc        ; save pcl
.0d46	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d47	8d 77 0d	          sta  pc+1      ; save pch
.0d4a	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d4b	a8		          tay            ; set y
.0d4c	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0d4d	aa		          tax            ; set x
.0d4e	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0d4f	8d 75 0d	          sta  ra        ; save a
.0d52	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0d53	8d 74 0d	          sta  rp        ; save rp
.0d56	68		          pla            ; stack : zp2l, zp1h, zp1l
.0d57	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0d59	68		          pla            ; stack : zp1h, zp1l
.0d5a	85 fd		          sta  zpage2    ; get zpage2 High byte
.0d5c	68		          pla            ; stack : zp1l
.0d5d	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0d5f	68		          pla            ; stack :
.0d60	85 fb		          sta  zpage1    ; get zpage1 High byte
.0d62	ad 77 0d	          lda  pc+1      ; get pch
.0d65	48		          pha            ; stack : pch
.0d66	ad 76 0d	          lda  pc
.0d69	48		          pha            ; stack : pcl, pch
.0d6a	ad 74 0d	          lda  rp        ; get rp
.0d6d	48		          pha            ; stack : rp, pcl, pch
.0d6e	ad 75 0d	          lda  ra        ; set ra
.0d71	58		          cli
.0d72	28		          plp            ; stack : pcl, pch
.0d73	60		          rts
>0d74	00		rp        .byte     0
>0d75	00		ra        .byte     0
>0d76	00 00		pc        .word     0

;******  Return to file: p027ex03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0d78			blkfill
.0d78	20 02 0d	bf0            jsr  push
.0d7b	20 39 0e	               jsr  savezp1
.0d7e	84 fc		               sty  zpage1+1
.0d80	a0 00		               ldy  #$00
.0d82	84 fb		               sty  zpage1
.0d84	91 fb		bf1            sta  (zpage1),y
.0d86	c8		               iny
.0d87	d0 fb		               bne  bf1
.0d89	20 48 0e	               jsr  restzp1
.0d8c	20 41 0d	               jsr  pop
.0d8f	60		               rts
.0d90			memfill
.0d90	20 02 0d	               jsr  push
.0d93	20 78 0d	mf1            jsr  blkfill
.0d96	c8		               iny
.0d97	ca		               dex
.0d98	d0 f9		               bne  mf1
.0d9a	20 41 0d	               jsr  pop
.0d9d	60		               rts
.0d9e			memmove
.0d9e	20 02 0d	               jsr  push
.0da1	ba		               tsx            ; On se crée un pointeur ...
.0da2	8a		               txa
.0da3	18		               clc
.0da4	69 0b		               adc  #11
.0da6	a8		               tay
.0da7	a2 06		               ldx  #$06
.0da9	b9 00 01	nextbyte       lda  $0100,y
.0dac	99 f8 0d	               sta  words,y
.0daf	c8		               iny
.0db0	ca		               dex
.0db1	d0 f6		               bne  nextbyte
.0db3	ad f8 0d	               lda  s
.0db6	8d cf 0d	               sta  source+1
.0db9	ad f9 0d	               lda  s+1
.0dbc	8d d0 0d	               sta  source+2
.0dbf	ad fa 0d	               lda  d
.0dc2	8d cc 0d	               sta  destin+1
.0dc5	ad fb 0d	               lda  d+1
.0dc8	8d cd 0d	               sta  destin+2
.0dcb	ad ff ff	destin         lda  $ffff
.0dce	8d ff ff	source         sta  $ffff
.0dd1	ee cc 0d	               inc  destin+1
.0dd4	d0 03		               bne  src
.0dd6	ee cd 0d	               inc  destin+2
.0dd9	ee cf 0d	src            inc  source+1
.0ddc	d0 03		               bne  cnt
.0dde	ee d0 0d	               inc  source+2
.0de1	ad fc 0d	cnt            lda  compte
.0de4	d0 08		               bne  decit
.0de6	ad fd 0d	               lda  compte+1
.0de9	f0 09		               beq  fini
.0deb	ce fd 0d	               dec  compte+1
.0dee	ce fc 0d	decit          dec  compte
.0df1	4c cb 0d	               jmp  destin
.0df4	20 41 0d	fini           jsr  pop
.0df7	60		               rts
.0df8			words
>0df8	00 00		s         .word     $0000
>0dfa	00 00		d         .word     $0000
>0dfc	00 00		compte    .word     $0000
.0dfe			decword
.0dfe	20 02 0d	               jsr  push
.0e01	86 fd		               stx  zpage2
.0e03	84 fe		               sty  zpage2+1
.0e05	20 41 0d	               jsr  pop
.0e08	60		               rts
.0e09			inczp1
.0e09	08		               php
.0e0a	48		               pha
.0e0b	e6 fb		               inc  zpage1
.0e0d	a5 fb		               lda  zpage1
.0e0f	d0 02		               bne  nopage
.0e11	e6 fc		               inc  zpage1+1
.0e13	68		nopage         pla
.0e14	28		               plp
.0e15	60		               rts
.0e16			deczp1
.0e16	08		                php
.0e17	48		                pha
.0e18	c6 fb		                dec  zpage1
.0e1a	d0 02		                bne  nopage
.0e1c	c6 fc		                dec  zpage1+1
.0e1e	68		nopage          pla
.0e1f	28		                plp
.0e20	60		                rts
.0e21			inczp2
.0e21	08		               php
.0e22	48		               pha
.0e23	e6 fd		               inc  zpage2
.0e25	a5 fd		               lda  zpage2
.0e27	d0 02		               bne  nopage
.0e29	e6 fe		               inc  zpage2+1
.0e2b	68		nopage         pla
.0e2c	28		               plp
.0e2d	60		               rts
.0e2e			deczp2
.0e2e	08		               php
.0e2f	48		               pha
.0e30	a5 fd		               lda  zpage2
.0e32	d0 02		               bne  nopage
.0e34	c6 fe		               dec  zpage2+1
.0e36	68		nopage         pla
.0e37	28		               plp
.0e38	60		               rts
.0e39			savezp1
.0e39	08		               php
.0e3a	48		               pha
.0e3b	a5 fb		               lda  zpage1
.0e3d	8d b5 0e	               sta  zp1
.0e40	a5 fc		               lda  zpage1+1
.0e42	8d b6 0e	               sta  zp1+1
.0e45	68		               pla
.0e46	28		               plp
.0e47	60		               rts
.0e48			restzp1
.0e48	08		               php
.0e49	48		               pha
.0e4a	ad b5 0e	               lda zp1
.0e4d	85 fb		               sta zpage1
.0e4f	ad b6 0e	               lda zp1+1
.0e52	85 fc		               sta zpage1+1
.0e54	68		               pla
.0e55	28		               plp
.0e56	60		               rts
.0e57			savezp2
.0e57	08		         php
.0e58	48		         pha
.0e59	a5 fd		         lda zpage2
.0e5b	8d b7 0e	         sta zp2
.0e5e	a5 fe		         lda zpage2+1
.0e60	8d b8 0e	         sta zp2+1
.0e63	68		         pla
.0e64	28		         plp
.0e65	60		         rts
.0e66			restzp2
.0e66	08		                php
.0e67	48		                pha
.0e68	ad b7 0e	                lda  zp2
.0e6b	85 fd		                sta  zpage2
.0e6d	ad b8 0e	                lda  zp2+1
.0e70	85 fe		                sta  zpage2+1
.0e72	68		                pla
.0e73	28		                plp
.0e74	60		                rts
.0e75			xy2addr
.0e75	08		                php
.0e76	48		                pha
.0e77	8a		                txa
.0e78	48		                pha
.0e79	98		                tya
.0e7a	48		                pha
.0e7b	ad b0 0e	                lda     addr1+1
.0e7e	8d b2 0e	                sta     addr2+1
.0e81	ad af 0e	                lda     addr1
.0e84	8d b1 0e	                sta     addr2
.0e87	c0 00		                cpy     #$00
.0e89	f0 0f		                beq     addx
.0e8b	18		moreline        clc
.0e8c	6d ae 0e	                adc     ymult
.0e8f	90 03		                bcc     norepy
.0e91	ee b2 0e	                inc     addr2+1
.0e94	8d b1 0e	norepy          sta     addr2
.0e97	88		                dey
.0e98	d0 f1		                bne     moreline
.0e9a	8a		addx            txa
.0e9b	18		                clc
.0e9c	6d b1 0e	                adc     addr2
.0e9f	90 03		                bcc     thatsit
.0ea1	ee b2 0e	                inc     addr2+1
.0ea4	8d b1 0e	thatsit         sta     addr2
.0ea7	68		                pla
.0ea8	a8		                tay
.0ea9	68		                pla
.0eaa	aa		                tax
.0eab	68		                pla
.0eac	28		                plp
.0ead	60		                rts
>0eae	28		ymult          .byte     40
>0eaf	00 00		addr1          .word     $0000
>0eb1	00 00		addr2          .word     $0000
>0eb3	00 00		bytecnt        .word     $0000
>0eb5	00 00		zp1        .word   $0000
>0eb7	00 00		zp2        .word   $0000

;******  Return to file: p027ex03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>0eb9	01		a2hexcol       .byte     1              ; pour aputscxy
>0eba	00		a2hexbkcol     .byte     %00000000
.0ebb			a2hexpos
>0ebb	00		a2hexpx        .byte     0              ; pour aputsxy
>0ebc	00		a2hexpy        .byte     0
>0ebd	24		a2hexprefix    .byte     "$"            ; pour aputs
>0ebe	00 00		a2hexstr       .word     $00
>0ec0	00 00		               .word     $00
>0ec2	00		               .byte     0              ; 0 end string
>0ec3	30 30 30 30	abin           .null     "00000000"
>0ec7	30 30 30 30 00
>0ecc	20 20 20 00	adec           .null     "   "
.0ed0			putahexfmtxy
.0ed0	20 02 0d	               jsr  push
.0ed3	20 1f 0f	               jsr  a2hex
.0ed6	ae bb 0e	               ldx  a2hexpx
.0ed9	ac bc 0e	               ldy  a2hexpy
.0edc	20 2b 0c	               jsr  gotoxy
.0edf	a2 bd		               ldx  #<a2hexprefix
.0ee1	a0 0e		               ldy  #>a2hexprefix
.0ee3	20 11 0c	               jsr  puts
.0ee6	20 41 0d	               jsr  pop
.0ee9	60		               rts
.0eea			putahexfmt
.0eea	20 02 0d	               jsr  push
.0eed	20 1f 0f	               jsr  a2hex
.0ef0	a2 bd		               ldx  #<a2hexprefix
.0ef2	a0 0e		               ldy  #>a2hexprefix
.0ef4	20 11 0c	               jsr  puts
.0ef7	20 41 0d	               jsr  pop
.0efa	60		               rts
.0efb			putahex
.0efb	20 02 0d	               jsr  push
.0efe	20 1f 0f	               jsr  a2hex
.0f01	a2 be		               ldx  #<a2hexstr
.0f03	a0 0e		               ldy  #>a2hexstr
.0f05	20 11 0c	               jsr  puts
.0f08	20 41 0d	               jsr  pop
.0f0b	60		               rts
.0f0c			nib2hex
.0f0c	08		               php
.0f0d	29 0f		               and  #$0f
.0f0f	f8		               sed
.0f10	18		               clc
.0f11	69 90		               adc  #$90
.0f13	69 40		               adc  #$40
.0f15	d8		               cld
.0f16	28		               plp
.0f17	60		               rts
.0f18			lsra4bits
.0f18	08		               php
.0f19	4a		               lsr
.0f1a	4a		               lsr
.0f1b	4a		               lsr
.0f1c	4a		               lsr
.0f1d	28		               plp
.0f1e	60		               rts
.0f1f			a2hex
.0f1f	08		               php
.0f20	48		               pha
.0f21	48		               pha
.0f22	20 18 0f	               jsr  lsra4bits
.0f25	20 0c 0f	               jsr  nib2hex
.0f28	8d be 0e	               sta  a2hexstr
.0f2b	68		               pla
.0f2c	20 0c 0f	               jsr  nib2hex
.0f2f	8d bf 0e	               sta  a2hexstr+1
.0f32	a9 00		               lda  #$00                ; set end of string
.0f34	8d c0 0e	               sta  a2hexstr+2
.0f37	68		               pla
.0f38	28		               plp
.0f39	60		               rts
.0f3a			xy2hex
.0f3a	20 02 0d	               jsr  push
.0f3d	20 1f 0f	               jsr  a2hex
.0f40	8a		               txa
.0f41	48		               pha
.0f42	20 18 0f	               jsr  lsra4bits
.0f45	20 0c 0f	               jsr  nib2hex
.0f48	8d be 0e	               sta  a2hexstr
.0f4b	68		               pla
.0f4c	20 0c 0f	               jsr  nib2hex
.0f4f	8d bf 0e	               sta  a2hexstr+1
.0f52	98		               tya
.0f53	48		               pha
.0f54	20 18 0f	               jsr  lsra4bits
.0f57	20 0c 0f	               jsr  nib2hex
.0f5a	8d c0 0e	               sta  a2hexstr+2
.0f5d	68		               pla
.0f5e	20 0c 0f	               jsr  nib2hex
.0f61	8d c1 0e	               sta  a2hexstr+3
.0f64	a9 00		               lda  #$00                ; 0 ended string
.0f66	8d c2 0e	               sta  a2hexstr+4
.0f69	20 41 0d	               jsr  pop
.0f6c			atobin
.0f6c	20 02 0d	               jsr  push
.0f6f	a2 08		               ldx  #8
.0f71	a0 00		               ldy  #0
.0f73	18		               clc
.0f74	2a		nextbit        rol
.0f75	48		               pha
.0f76	69 00		               adc  #$00
.0f78	29 01		               and  #$01
.0f7a	20 0c 0f	               jsr  nib2hex
.0f7d	99 c3 0e	               sta  abin,y
.0f80	68		               pla
.0f81	c8		               iny
.0f82	ca		               dex
.0f83	d0 ef		               bne  nextbit
.0f85	a9 00		               lda  #0
.0f87	99 c3 0e	               sta  abin,y
.0f8a	20 41 0d	               jsr  pull
.0f8d	60		               rts
.0f8e			putabin
.0f8e	20 6c 0f	               jsr     atobin
.0f91	20 02 0d	               jsr     push
.0f94	a2 c3		               ldx     #<abin
.0f96	a0 0e		               ldy     #>abin
.0f98	20 11 0c	               jsr     puts
.0f9b	20 41 0d	               jsr     pop
.0f9e	60		               rts
.0f9f			printabin
.0f9f	20 02 0d	               jsr     push
.0fa2	a2 c3		               ldx     #<abin
.0fa4	a0 0e		               ldy     #>abin
.0fa6	20 11 0c	               jsr     puts
.0fa9	20 41 0d	               jsr     pop
.0fac	60		               rts
.0fad			putabinfmt
.0fad	08		               php
.0fae	48		               pha
.0faf	a9 25		               lda     #"%"
.0fb1	20 0b 0c	               jsr     putch
.0fb4	68		               pla
.0fb5	20 8e 0f	               jsr     putabin
.0fb8	28		               plp
.0fb9	60		               rts
.0fba			putabinxy
.0fba	20 2b 0c	               jsr     gotoxy
.0fbd	20 8e 0f	               jsr     putabin
.0fc0	60		               rts
.0fc1			putabinfmtxy
.0fc1	20 2b 0c	               jsr     gotoxy
.0fc4	20 ad 0f	               jsr     putabinfmt
.0fc7	60		               rts
.0fc8			atodec
.0fc8	20 02 0d	               jsr  push
.0fcb	f8		               sed
.0fcc	aa		               tax
.0fcd	a0 00		               ldy  #$00
.0fcf	a9 00		               lda  #$00
.0fd1	18		nextbit        clc
.0fd2	69 01		               adc  #$01
.0fd4	90 01		               bcc  decx
.0fd6	c8		               iny
.0fd7	ca		decx           dex
.0fd8	d0 f7		               bne  nextbit
.0fda	48		               pha
.0fdb	98		               tya
.0fdc	20 0c 0f	               jsr  nib2hex
.0fdf	8d cc 0e	               sta  adec
.0fe2	68		               pla
.0fe3	48		               pha
.0fe4	20 0c 0f	               jsr  nib2hex
.0fe7	8d ce 0e	               sta  adec+2
.0fea	68		               pla
.0feb	6a		               ror
.0fec	6a		               ror
.0fed	6a		               ror
.0fee	6a		               ror
.0fef	20 0c 0f	               jsr  nib2hex
.0ff2	8d cd 0e	               sta  adec+1
.0ff5	d8		               cld
.0ff6	20 41 0d	               jsr  pull
.0ff9	60		               rts
>0ffa	00 00 00	buffer         .byte     0,0,0
.0ffd			putadec
.0ffd	20 02 0d	               jsr  push
.1000	20 c8 0f	               jsr  atodec
.1003	a2 cc		               ldx  #<adec
.1005	a0 0e		               ldy  #>adec+1
.1007	20 11 0c	               jsr  puts
.100a	20 41 0d	               jsr  pop
.100d	60		               rts

;******  Return to file: p027ex03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>100e	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>1012	00 00 00 00 00 00 00 00 00 0d 00 00
>101e	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>1022	00 00 00 00 00 00 00 00 00 00 00 00
>102e	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>1032	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>103e	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1042	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>104e	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1052	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>105e	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1062	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>106e	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1072	00 00 00 00 00 00 00 00 00 00 00 00
>107e	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1082	00 00 00 00 00 00 00 00 00 00 00 00
>108e	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1092	00 00 00 00 00 00 00 00 00 00 00 00
>109e	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>10a2	00 00 00 00 00 00 00 00 00 00 00 00
>10ae	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>10b2	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>10be	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>10c2	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>10ce	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>10d2	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>10de	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>10e2	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>10ee	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>10f2	00 00 00 00 00 00 00 00 00 00 00 00
>10fe	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>1102	00 00 00 00 00 00 00 00 00 00 00 00
.110e			waitstop
.110e	20 02 0d	               jsr  push
.1111	20 ed f6	wait           jsr  k_stop
.1114	d0 fb		               bne  wait
.1116	20 41 0d	               jsr  pop
.1119	60		               rts
.111a			anykey
.111a	08		               php
.111b	48		               pha
.111c	a5 cb		nokey          lda 203
.111e	c9 40		               cmp #64
.1120	f0 fa		               beq nokey
.1122	20 28 11	               jsr releasekey
.1125	68		               pla
.1126	28		               plp
.1127	60		               rts
.1128			releasekey
.1128	08		               php
.1129	48		               pha
.112a	a5 cb		keypressed     lda 203
.112c	c9 40		               cmp #64
.112e	d0 fa		               bne keypressed
.1130	68		               pla
.1131	28		               plp
.1132	60		               rts
.1133			getkey
.1133	20 e4 ff	again          jsr  getin
.1136	c9 00		               cmp  #0
.1138	f0 f9		               beq  again
.113a	60		               rts
.113b			kbflushbuff
.113b	08		               php
.113c	48		               pha
.113d	20 e4 ff	again          jsr  getin
.1140	c9 00		               cmp  #0
.1142	d0 f9		               bne  again
.1144	68		               pla
.1145	28		               plp
.1146	60		               rts
.1147			waitkey
.1147	20 02 0d	               jsr  push
.114a	8d 98 11	               sta  thekey
.114d	20 e4 ff	nope           jsr  getin
.1150	20 d2 ff	               jsr  chrout
.1153	cd 98 11	               cmp  thekey
.1156	d0 f5		               bne  nope
.1158	20 d2 ff	               jsr  chrout
.115b	20 41 0d	               jsr  pop
.115e	60		               rts
.115f			waitspace
.115f	20 02 0d	               jsr  push
.1162	a9 7f		wait           lda  #$7f  ;%01111111
.1164	8d 00 dc	               sta  $dc00
.1167	ad 01 dc	               lda  $dc01
.116a	29 10		               and  #$10  ;mask %00010000
.116c	d0 f4		               bne  wait
.116e	20 41 0d	               jsr  pop
.1171			waitsstop
.1171	20 02 0d	               jsr  push
.1174	20 ed f6	wait           jsr  k_stop  ;%01111111
.1177	d0 fb		               bne  wait
.1179	20 41 0d	               jsr  pop
.117c			waitreturn
.117c	20 02 0d	               jsr  push
.117f	ad 99 11	               lda  thecount
.1182	8d 00 04	               sta  scrnram
.1185	a9 02		               lda  #$02
.1187	8d 00 d8	               sta  colorram
.118a	20 e4 ff	nope           jsr  getin
.118d	c9 0d		nohex          cmp  #$0d
.118f	d0 f9		               bne  nope
.1191	ee 99 11	               inc  thecount
.1194	20 41 0d	               jsr  pop
.1197	60		               rts
>1198	00		thekey         .byte   0
>1199	01		thecount       .byte   $01

;******  Return to file: p027ex03.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L j2tester.txt -o j2tester.prg j2tester.asm
; Tue Oct 29 13:24:13 2024

;Offset	;Hex		;Source

;******  Processing input file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	2a 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	20 2a 50 52			.text " *programmation assembleur sue c64*"
>080a	4f 47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45
>081a	4d 42 4c 45 55 52 20 53 55 45 20 43 36 34 2a
>0829	00				.byte $00		;Un zéro pour indiquer la fin de cette
>082a	46 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082c	02 00				.word 2   	;Numero de la ligne Basic.
>082e	8f				.byte $8F		;Le token de la commande REM du Basic
>082f	20 2a 50 41			.text " *par daniel lafrance*"
>0833	52 20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43
>0843	45 2a
>0845	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0846	51 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0848	03 00				.word 3   	;Numero de la ligne Basic.
>084a	9e				.byte $9e		;Le token de la commande PRINT du Basic
>084b	30 32 31 33			.text format("%05d",hpgmstart)
>084f	31
>0850	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0851	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0853	4c 56 08	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: j2tester.asm

.0856			main
.0856	20 c5 0d	               jsr       scrmaninit
.0859	20 33 12	               jsr       js_init
.085c	a9 80		               lda       #$80
.085e	8d b1 0d	               sta       curcol
.0861	a9 00		               lda       #0
.0863	8d 21 d0	               sta       vicback0col
.0866	a9 02		               lda       #vrouge
.0868	8d b2 0d	               sta       brdcol
.086b	8d 20 d0	               sta       vicbordcol
.086e	20 55 0e	               jsr       cls
.0871	a9 20		               lda       #$20
.0873	09 00		               ora       #%00000000
.0875	a0 04		               ldy       #$04
.0877	a2 04		               ldx       #$04
.0879	20 2f 0b	               jsr       memfill
.087c	a9 00		               lda       #$00
.087e	a0 d8		               ldy       #$d8
.0880	20 2f 0b	               jsr       memfill
.0883	20 bf 16	               jsr       sprt_init
.0886	20 b2 0e	goagain        jsr       setinverse
.0889	a2 58		               ldx       #<bstring1
.088b	a0 09		               ldy       #>bstring1
.088d	20 55 0f	               jsr       putscxy
.0890	a2 85		               ldx       #<bstring2
.0892	a0 09		               ldy       #>bstring2
.0894	20 55 0f	               jsr       putscxy
.0897	a2 b2		               ldx       #<bstring3
.0899	a0 09		               ldy       #>bstring3
.089b	20 55 0f	               jsr       putscxy
.089e	a2 df		               ldx       #<bstring4
.08a0	a0 09		               ldy       #>bstring4
.08a2	20 55 0f	               jsr       putscxy
.08a5	20 bc 0e	               jsr       clrinverse
.08a8	a2 f6		               ldx       #<js_status1
.08aa	a0 09		               ldy       #>js_status1
.08ac	20 55 0f	               jsr       putscxy
.08af	a2 0e		               ldx       #<js_status2
.08b1	a0 0a		               ldy       #>js_status2
.08b3	20 55 0f	               jsr       putscxy
.08b6	a2 25		               ldx       #<js_status3
.08b8	a0 0a		               ldy       #>js_status3
.08ba	20 55 0f	               jsr       putscxy
.08bd	a2 3e		               ldx       #<js_status4
.08bf	a0 0a		               ldy       #>js_status4
.08c1	20 55 0f	               jsr       putscxy
.08c4	a2 57		               ldx       #<js_status5
.08c6	a0 0a		               ldy       #>js_status5
.08c8	20 55 0f	               jsr       putscxy
.08cb	a2 6d		               ldx       #<js_status6
.08cd	a0 0a		               ldy       #>js_status6
.08cf	20 55 0f	               jsr       putscxy
.08d2	a2 00		               ldx       #$00
.08d4	a0 0f		               ldy       #$0f
.08d6	20 18 0f	               jsr       gotoxy
.08d9	a9 07		               lda       #vjaune
.08db	20 84 0f	               jsr       setcurcol
.08de	a2 00		               ldx       #$00
.08e0	20 99 0f	               jsr       setbkcol
.08e3			looper
.08e3	20 4a 12	               jsr       js_scan
.08e6	20 68 14	               jsr       js_showvals
.08e9	20 4b 17	               jsr       sprt_move
.08ec			loopit
.08ec	a2 16		               ldx       #$16
.08ee	a0 11		               ldy       #$11
.08f0	20 18 0f	               jsr       gotoxy
.08f3	a9 03		               lda       #3
.08f5	20 84 0f	               jsr       setcurcol
.08f8	ee 57 09	               inc       onebyte
.08fb	ad 57 09	               lda       onebyte
.08fe	ad 30 16	               lda       js_2fire
.0901	20 4c 0d	               jsr       putabinfmt
.0904	48		               pha
.0905	ad 30 16	               lda       js_2fire
.0908	f0 42		               beq       nochange
.090a	ad 20 d0	               lda       vicbordcol
.090d	18		               clc
.090e	69 00		               adc       #$0
.0910	29 0f		               and       #$0f
.0912	8d 20 d0	               sta       vicbordcol
.0915	ad 2f 16	               lda       js_2y
.0918	c9 04		               cmp       #$04
.091a	d0 20		               bne       toborder
.091c	ad 2e 16	               lda       js_2x
.091f	c9 0b		               cmp       #$0b
.0921	30 19		               bmi       toborder
.0923	c9 1d		               cmp       #$1d
.0925	10 15		               bpl       toborder
.0927	ee 14 17	               inc       sprt_ptr
.092a	ad 14 17	               lda       sprt_ptr
.092d	20 75 10	               jsr       showregs
.0930	c9 09		               cmp       #9
.0932	90 02		               bcc       drawsptr
.0934	a9 00		               lda       #$00
.0936	8d 14 17	drawsptr       sta       sprt_ptr
.0939	20 bf 16	               jsr       sprt_init
.093c	ad 20 d0	toborder       lda       vicbordcol
.093f	38		               sec
.0940	69 00		               adc       #0
.0942	29 0f		               and       #$0f
.0944	8d 29 d0	               sta       $d029
.0947	a9 00		               lda       #$00
.0949	8d 30 16	               sta       js_2fire
.094c			nochange
.094c	e8		               inx
.094d	68		               pla
.094e	20 e1 ff	               jsr       kstop
.0951	d0 90		               bne       looper
.0953	20 66 fe	               jsr       k_warmboot
.0956	60		out            rts
>0957	00		onebyte        .byte     0
>0958	0e 40 00 00	bstring1       .byte     vbleu1,bkcol1,0,0
>095c	20 20 20 20	               .text     "      Visualisation du port jeu #2      "
>0960	20 20 56 09 13 15 01 0c 09 13 01 14 09 0f 0e 20
>0970	04 15 20 10 0f 12 14 20 0a 05 15 20 23 32 20 20
>0980	20 20 20 20
>0984	00		               .byte     0
>0985	0b 80 00 01	bstring2       .byte     vgris,bkcol2,0,1
>0989	20 50 12 0f	               .text     " Programme assembleur pour 6502 sur C64 "
>098d	07 12 01 0d 0d 05 20 01 13 13 05 0d 02 0c 05 15
>099d	12 20 10 0f 15 12 20 36 35 30 32 20 13 15 12 20
>09ad	43 36 34 20
>09b1	00		               .byte     0
>09b2	0a c0 00 02	bstring3       .byte     vrose,bkcol3,0,2
>09b6	20 20 20 20	               .text     "     par Daniel Lafrance (2024-06) C    "
>09ba	20 10 01 12 20 44 01 0e 09 05 0c 20 4c 01 06 12
>09ca	01 0e 03 05 20 28 32 30 32 34 2d 30 36 29 20 43
>09da	20 20 20 20
>09de	00		               .byte     0
>09df	07 c0 0b 04	bstring4       .byte     vjaune,bkcol3,11,4
>09e3	20 43 08 01	               .text     " Changer pointeur "
>09e7	0e 07 05 12 20 10 0f 09 0e 14 05 15 12 20
>09f5	00		               .byte     0
>09f6	0d 00 13 16	js_status1     .byte     vvert1,bkcol0,19,22
>09fa	20 20 20 15	               .text     "   up <----1> haut "
>09fe	10 20 3c 2d 2d 2d 2d 31 3e 20 08 01 15 14 20
>0a0d	00		               .byte     0
>0a0e	0e 00 13 15	js_status2     .byte     vbleu1,bkcol0,19,21
>0a12	20 04 0f 17	               .text     " down <---2-> bas "
>0a16	0e 20 3c 2d 2d 2d 32 2d 3e 20 02 01 13 20
>0a24	00		               .byte     0
>0a25	0a 00 13 14	js_status3     .byte     vrose,bkcol0,19,20
>0a29	20 0c 05 06	               .text     " left <--4--> gauche"
>0a2d	14 20 3c 2d 2d 34 2d 2d 3e 20 07 01 15 03 08 05
>0a3d	00		               .byte     0
>0a3e	07 00 13 13	js_status4     .byte     vjaune,bkcol0,19,19
>0a42	12 09 07 08	               .text     "right <-8---> droite"
>0a46	14 20 3c 2d 38 2d 2d 2d 3e 20 04 12 0f 09 14 05
>0a56	00		               .byte     0
>0a57	01 00 13 12	js_status5     .byte     vblanc,bkcol0,19,18
>0a5b	20 46 09 12	               .text     " Fire <1----> Feu"
>0a5f	05 20 3c 31 2d 2d 2d 2d 3e 20 46 05 15
>0a6c	00		               .byte     0
>0a6d	03 00 01 17	js_status6     .byte     vcyan,bkcol0,1,23
>0a71	2b 2d 3e 20	               .text     "+-> Etat de JS2:     %---FRLDU EOR #$1F"
>0a75	45 14 01 14 20 04 05 20 4a 53 32 3a 20 20 20 20
>0a85	20 25 2d 2d 2d 46 52 4c 44 55 20 45 4f 52 20 23
>0a95	24 31 46
>0a98	00		               .byte     0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0a99	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0a9d	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0aa1			libtart

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.0aa1			push
.0aa1	08		          php            ; stack : flg, pcl, pch
.0aa2	78		          sei
.0aa3	8d dd 0a	          sta  ra        ; save a
.0aa6	68		          pla            ; stack : pcl, pch
.0aa7	8d dc 0a	          sta  rp        ; save rp
.0aaa	68		          pla            ; stack : pch
.0aab	8d de 0a	          sta  pc        ; save pcl
.0aae	68		          pla            ; stack : -
.0aaf	8d df 0a	          sta  pc+1      ; save pch
.0ab2	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0ab4	48		          pha            ; stack : zp1l
.0ab5	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0ab7	48		          pha            ; stack : zp1h, zp1l
.0ab8	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0aba	48		          pha            ; stack : zp2l, zp1h, zp1l
.0abb	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0abd	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0abe	ad dc 0a	          lda  rp        ; get rp
.0ac1	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0ac2	ad dd 0a	          lda  ra        ; get a
.0ac5	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0ac6	8a		          txa            ; get x
.0ac7	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ac8	98		          tya            ; get y
.0ac9	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0aca	ad df 0a	          lda  pc+1      ; get pch
.0acd	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ace	ad de 0a	          lda  pc        ; get pcl
.0ad1	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ad2	ad dc 0a	          lda  rp        ; get rp
.0ad5	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ad6	ad dd 0a	          lda  ra        ; get a
.0ad9	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ada	58		          cli
.0adb	60		          rts
>0adc	00		rp        .byte     0
>0add	00		ra        .byte     0
>0ade	00 00		pc        .word     0
.0ae0			pull
.0ae0			pop
.0ae0	78		          sei
.0ae1	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ae2	8d 15 0b	          sta  pc        ; save pcl
.0ae5	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ae6	8d 16 0b	          sta  pc+1      ; save pch
.0ae9	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0aea	a8		          tay            ; set y
.0aeb	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0aec	aa		          tax            ; set x
.0aed	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0aee	8d 14 0b	          sta  ra        ; save a
.0af1	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0af2	8d 13 0b	          sta  rp        ; save rp
.0af5	68		          pla            ; stack : zp2l, zp1h, zp1l
.0af6	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0af8	68		          pla            ; stack : zp1h, zp1l
.0af9	85 fd		          sta  zpage2    ; get zpage2 High byte
.0afb	68		          pla            ; stack : zp1l
.0afc	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0afe	68		          pla            ; stack :
.0aff	85 fb		          sta  zpage1    ; get zpage1 High byte
.0b01	ad 16 0b	          lda  pc+1      ; get pch
.0b04	48		          pha            ; stack : pch
.0b05	ad 15 0b	          lda  pc
.0b08	48		          pha            ; stack : pcl, pch
.0b09	ad 13 0b	          lda  rp        ; get rp
.0b0c	48		          pha            ; stack : rp, pcl, pch
.0b0d	ad 14 0b	          lda  ra        ; set ra
.0b10	58		          cli
.0b11	28		          plp            ; stack : pcl, pch
.0b12	60		          rts
>0b13	00		rp        .byte     0
>0b14	00		ra        .byte     0
>0b15	00 00		pc        .word     0

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0b17			blkfill
.0b17	20 a1 0a	bf0            jsr  push
.0b1a	20 d8 0b	               jsr  savezp1
.0b1d	84 fc		               sty  zpage1+1
.0b1f	a0 00		               ldy  #$00
.0b21	84 fb		               sty  zpage1
.0b23	91 fb		bf1            sta  (zpage1),y
.0b25	c8		               iny
.0b26	d0 fb		               bne  bf1
.0b28	20 e7 0b	               jsr  restzp1
.0b2b	20 e0 0a	               jsr  pop
.0b2e	60		               rts
.0b2f			memfill
.0b2f	20 a1 0a	               jsr  push
.0b32	20 17 0b	mf1            jsr  blkfill
.0b35	c8		               iny
.0b36	ca		               dex
.0b37	d0 f9		               bne  mf1
.0b39	20 e0 0a	               jsr  pop
.0b3c	60		               rts
.0b3d			memmove
.0b3d	20 a1 0a	               jsr  push
.0b40	ba		               tsx            ; On se crée un pointeur ...
.0b41	8a		               txa
.0b42	18		               clc
.0b43	69 0b		               adc  #11
.0b45	a8		               tay
.0b46	a2 06		               ldx  #$06
.0b48	b9 00 01	nextbyte       lda  $0100,y
.0b4b	99 97 0b	               sta  words,y
.0b4e	c8		               iny
.0b4f	ca		               dex
.0b50	d0 f6		               bne  nextbyte
.0b52	ad 97 0b	               lda  s
.0b55	8d 6e 0b	               sta  source+1
.0b58	ad 98 0b	               lda  s+1
.0b5b	8d 6f 0b	               sta  source+2
.0b5e	ad 99 0b	               lda  d
.0b61	8d 6b 0b	               sta  destin+1
.0b64	ad 9a 0b	               lda  d+1
.0b67	8d 6c 0b	               sta  destin+2
.0b6a	ad ff ff	destin         lda  $ffff
.0b6d	8d ff ff	source         sta  $ffff
.0b70	ee 6b 0b	               inc  destin+1
.0b73	d0 03		               bne  src
.0b75	ee 6c 0b	               inc  destin+2
.0b78	ee 6e 0b	src            inc  source+1
.0b7b	d0 03		               bne  cnt
.0b7d	ee 6f 0b	               inc  source+2
.0b80	ad 9b 0b	cnt            lda  compte
.0b83	d0 08		               bne  decit
.0b85	ad 9c 0b	               lda  compte+1
.0b88	f0 09		               beq  fini
.0b8a	ce 9c 0b	               dec  compte+1
.0b8d	ce 9b 0b	decit          dec  compte
.0b90	4c 6a 0b	               jmp  destin
.0b93	20 e0 0a	fini           jsr  pop
.0b96	60		               rts
.0b97			words
>0b97	00 00		s         .word     $0000
>0b99	00 00		d         .word     $0000
>0b9b	00 00		compte    .word     $0000
.0b9d			decword
.0b9d	20 a1 0a	               jsr  push
.0ba0	86 fd		               stx  zpage2
.0ba2	84 fe		               sty  zpage2+1
.0ba4	20 e0 0a	               jsr  pop
.0ba7	60		               rts
.0ba8			inczp1
.0ba8	08		               php
.0ba9	48		               pha
.0baa	e6 fb		               inc  zpage1
.0bac	a5 fb		               lda  zpage1
.0bae	d0 02		               bne  nopage
.0bb0	e6 fc		               inc  zpage1+1
.0bb2	68		nopage         pla
.0bb3	28		               plp
.0bb4	60		               rts
.0bb5			deczp1
.0bb5	08		                php
.0bb6	48		                pha
.0bb7	c6 fb		                dec  zpage1
.0bb9	d0 02		                bne  nopage
.0bbb	c6 fc		                dec  zpage1+1
.0bbd	68		nopage          pla
.0bbe	28		                plp
.0bbf	60		                rts
.0bc0			inczp2
.0bc0	08		               php
.0bc1	48		               pha
.0bc2	e6 fd		               inc  zpage2
.0bc4	a5 fd		               lda  zpage2
.0bc6	d0 02		               bne  nopage
.0bc8	e6 fe		               inc  zpage2+1
.0bca	68		nopage         pla
.0bcb	28		               plp
.0bcc	60		               rts
.0bcd			deczp2
.0bcd	08		               php
.0bce	48		               pha
.0bcf	a5 fd		               lda  zpage2
.0bd1	d0 02		               bne  nopage
.0bd3	c6 fe		               dec  zpage2+1
.0bd5	68		nopage         pla
.0bd6	28		               plp
.0bd7	60		               rts
.0bd8			savezp1
.0bd8	08		               php
.0bd9	48		               pha
.0bda	a5 fb		               lda  zpage1
.0bdc	8d 54 0c	               sta  zp1
.0bdf	a5 fc		               lda  zpage1+1
.0be1	8d 55 0c	               sta  zp1+1
.0be4	68		               pla
.0be5	28		               plp
.0be6	60		               rts
.0be7			restzp1
.0be7	08		               php
.0be8	48		               pha
.0be9	ad 54 0c	               lda zp1
.0bec	85 fb		               sta zpage1
.0bee	ad 55 0c	               lda zp1+1
.0bf1	85 fc		               sta zpage1+1
.0bf3	68		               pla
.0bf4	28		               plp
.0bf5	60		               rts
.0bf6			savezp2
.0bf6	08		         php
.0bf7	48		         pha
.0bf8	a5 fd		         lda zpage2
.0bfa	8d 56 0c	         sta zp2
.0bfd	a5 fe		         lda zpage2+1
.0bff	8d 57 0c	         sta zp2+1
.0c02	68		         pla
.0c03	28		         plp
.0c04	60		         rts
.0c05			restzp2
.0c05	08		                php
.0c06	48		                pha
.0c07	ad 56 0c	                lda  zp2
.0c0a	85 fd		                sta  zpage2
.0c0c	ad 57 0c	                lda  zp2+1
.0c0f	85 fe		                sta  zpage2+1
.0c11	68		                pla
.0c12	28		                plp
.0c13	60		                rts
.0c14			xy2addr
.0c14	08		                php
.0c15	48		                pha
.0c16	8a		                txa
.0c17	48		                pha
.0c18	98		                tya
.0c19	48		                pha
.0c1a	ad 4f 0c	                lda     addr1+1
.0c1d	8d 51 0c	                sta     addr2+1
.0c20	ad 4e 0c	                lda     addr1
.0c23	8d 50 0c	                sta     addr2
.0c26	c0 00		                cpy     #$00
.0c28	f0 0f		                beq     addx
.0c2a	18		moreline        clc
.0c2b	6d 4d 0c	                adc     ymult
.0c2e	90 03		                bcc     norepy
.0c30	ee 51 0c	                inc     addr2+1
.0c33	8d 50 0c	norepy          sta     addr2
.0c36	88		                dey
.0c37	d0 f1		                bne     moreline
.0c39	8a		addx            txa
.0c3a	18		                clc
.0c3b	6d 50 0c	                adc     addr2
.0c3e	90 03		                bcc     thatsit
.0c40	ee 51 0c	                inc     addr2+1
.0c43	8d 50 0c	thatsit         sta     addr2
.0c46	68		                pla
.0c47	a8		                tay
.0c48	68		                pla
.0c49	aa		                tax
.0c4a	68		                pla
.0c4b	28		                plp
.0c4c	60		                rts
>0c4d	28		ymult          .byte     40
>0c4e	00 00		addr1          .word     $0000
>0c50	00 00		addr2          .word     $0000
>0c52	00 00		bytecnt        .word     $0000
>0c54	00 00		zp1        .word   $0000
>0c56	00 00		zp2        .word   $0000

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>0c58	01		a2hexcol       .byte     1              ; pour aputscxy
>0c59	00		a2hexbkcol     .byte     %00000000
.0c5a			a2hexpos
>0c5a	00		a2hexpx        .byte     0              ; pour aputsxy
>0c5b	00		a2hexpy        .byte     0
>0c5c	24		a2hexprefix    .byte     "$"            ; pour aputs
>0c5d	00 00		a2hexstr       .word     $00
>0c5f	00 00		               .word     $00
>0c61	00		               .byte     0              ; 0 end string
>0c62	30 30 30 30	abin           .null     "00000000"
>0c66	30 30 30 30 00
>0c6b	20 20 20 00	adec           .null     "   "
.0c6f			putahexfmtxy
.0c6f	20 a1 0a	               jsr  push
.0c72	20 be 0c	               jsr  a2hex
.0c75	ae 5a 0c	               ldx  a2hexpx
.0c78	ac 5b 0c	               ldy  a2hexpy
.0c7b	20 18 0f	               jsr  gotoxy
.0c7e	a2 5c		               ldx  #<a2hexprefix
.0c80	a0 0c		               ldy  #>a2hexprefix
.0c82	20 0a 0f	               jsr  puts
.0c85	20 e0 0a	               jsr  pop
.0c88	60		               rts
.0c89			putahexfmt
.0c89	20 a1 0a	               jsr  push
.0c8c	20 be 0c	               jsr  a2hex
.0c8f	a2 5c		               ldx  #<a2hexprefix
.0c91	a0 0c		               ldy  #>a2hexprefix
.0c93	20 0a 0f	               jsr  puts
.0c96	20 e0 0a	               jsr  pop
.0c99	60		               rts
.0c9a			putahex
.0c9a	20 a1 0a	               jsr  push
.0c9d	20 be 0c	               jsr  a2hex
.0ca0	a2 5d		               ldx  #<a2hexstr
.0ca2	a0 0c		               ldy  #>a2hexstr
.0ca4	20 0a 0f	               jsr  puts
.0ca7	20 e0 0a	               jsr  pop
.0caa	60		               rts
.0cab			nib2hex
.0cab	08		               php
.0cac	29 0f		               and  #$0f
.0cae	f8		               sed
.0caf	18		               clc
.0cb0	69 90		               adc  #$90
.0cb2	69 40		               adc  #$40
.0cb4	d8		               cld
.0cb5	28		               plp
.0cb6	60		               rts
.0cb7			lsra4bits
.0cb7	08		               php
.0cb8	4a		               lsr
.0cb9	4a		               lsr
.0cba	4a		               lsr
.0cbb	4a		               lsr
.0cbc	28		               plp
.0cbd	60		               rts
.0cbe			a2hex
.0cbe	08		               php
.0cbf	48		               pha
.0cc0	48		               pha
.0cc1	20 b7 0c	               jsr  lsra4bits
.0cc4	20 ab 0c	               jsr  nib2hex
.0cc7	8d 5d 0c	               sta  a2hexstr
.0cca	68		               pla
.0ccb	20 ab 0c	               jsr  nib2hex
.0cce	8d 5e 0c	               sta  a2hexstr+1
.0cd1	a9 00		               lda  #$00                ; set end of string
.0cd3	8d 5f 0c	               sta  a2hexstr+2
.0cd6	68		               pla
.0cd7	28		               plp
.0cd8	60		               rts
.0cd9			xy2hex
.0cd9	20 a1 0a	               jsr  push
.0cdc	20 be 0c	               jsr  a2hex
.0cdf	8a		               txa
.0ce0	48		               pha
.0ce1	20 b7 0c	               jsr  lsra4bits
.0ce4	20 ab 0c	               jsr  nib2hex
.0ce7	8d 5d 0c	               sta  a2hexstr
.0cea	68		               pla
.0ceb	20 ab 0c	               jsr  nib2hex
.0cee	8d 5e 0c	               sta  a2hexstr+1
.0cf1	98		               tya
.0cf2	48		               pha
.0cf3	20 b7 0c	               jsr  lsra4bits
.0cf6	20 ab 0c	               jsr  nib2hex
.0cf9	8d 5f 0c	               sta  a2hexstr+2
.0cfc	68		               pla
.0cfd	20 ab 0c	               jsr  nib2hex
.0d00	8d 60 0c	               sta  a2hexstr+3
.0d03	a9 00		               lda  #$00                ; 0 ended string
.0d05	8d 61 0c	               sta  a2hexstr+4
.0d08	20 e0 0a	               jsr  pop
.0d0b			atobin
.0d0b	20 a1 0a	               jsr  push
.0d0e	a2 08		               ldx  #8
.0d10	a0 00		               ldy  #0
.0d12	18		               clc
.0d13	2a		nextbit        rol
.0d14	48		               pha
.0d15	69 00		               adc  #$00
.0d17	29 01		               and  #$01
.0d19	20 ab 0c	               jsr  nib2hex
.0d1c	99 62 0c	               sta  abin,y
.0d1f	68		               pla
.0d20	c8		               iny
.0d21	ca		               dex
.0d22	d0 ef		               bne  nextbit
.0d24	a9 00		               lda  #0
.0d26	99 62 0c	               sta  abin,y
.0d29	20 e0 0a	               jsr  pull
.0d2c	60		               rts
.0d2d			putabin
.0d2d	20 0b 0d	               jsr     atobin
.0d30	20 a1 0a	               jsr     push
.0d33	a2 62		               ldx     #<abin
.0d35	a0 0c		               ldy     #>abin
.0d37	20 0a 0f	               jsr     puts
.0d3a	20 e0 0a	               jsr     pop
.0d3d	60		               rts
.0d3e			printabin
.0d3e	20 a1 0a	               jsr     push
.0d41	a2 62		               ldx     #<abin
.0d43	a0 0c		               ldy     #>abin
.0d45	20 0a 0f	               jsr     puts
.0d48	20 e0 0a	               jsr     pop
.0d4b	60		               rts
.0d4c			putabinfmt
.0d4c	08		               php
.0d4d	48		               pha
.0d4e	a9 25		               lda     #"%"
.0d50	20 c6 0e	               jsr     putch
.0d53	68		               pla
.0d54	20 2d 0d	               jsr     putabin
.0d57	28		               plp
.0d58	60		               rts
.0d59			putabinxy
.0d59	20 18 0f	               jsr     gotoxy
.0d5c	20 2d 0d	               jsr     putabin
.0d5f	60		               rts
.0d60			putabinfmtxy
.0d60	20 18 0f	               jsr     gotoxy
.0d63	20 4c 0d	               jsr     putabinfmt
.0d66	60		               rts
.0d67			atodec
.0d67	20 a1 0a	               jsr  push
.0d6a	f8		               sed
.0d6b	aa		               tax
.0d6c	a0 00		               ldy  #$00
.0d6e	a9 00		               lda  #$00
.0d70	18		nextbit        clc
.0d71	69 01		               adc  #$01
.0d73	90 01		               bcc  decx
.0d75	c8		               iny
.0d76	ca		decx           dex
.0d77	d0 f7		               bne  nextbit
.0d79	48		               pha
.0d7a	98		               tya
.0d7b	20 ab 0c	               jsr  nib2hex
.0d7e	8d 6b 0c	               sta  adec
.0d81	68		               pla
.0d82	48		               pha
.0d83	20 ab 0c	               jsr  nib2hex
.0d86	8d 6d 0c	               sta  adec+2
.0d89	68		               pla
.0d8a	6a		               ror
.0d8b	6a		               ror
.0d8c	6a		               ror
.0d8d	6a		               ror
.0d8e	20 ab 0c	               jsr  nib2hex
.0d91	8d 6c 0c	               sta  adec+1
.0d94	d8		               cld
.0d95	20 e0 0a	               jsr  pull
.0d98	60		               rts
>0d99	00 00 00	buffer         .byte     0,0,0
.0d9c			putadec
.0d9c	20 a1 0a	               jsr  push
.0d9f	20 67 0d	               jsr  atodec
.0da2	a2 6b		               ldx  #<adec
.0da4	a0 0c		               ldy  #>adec+1
.0da6	20 0a 0f	               jsr  puts
.0da9	20 e0 0a	               jsr  pop
.0dac	60		               rts

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-text-mc.asm

>0dad	00 00		scrptr         .word     $00            ; ... pointe position ecran, ...
>0daf	00 00		colptr         .word     $00            ; ... pointe position couleur, ...
>0db1	01		curcol         .byte     $01            ; ... la couleur du caractère, ...
>0db2	06		brdcol         .byte     vbleu          ; ... la couleur de la bordure et
>0db3	00		vicbkcol0      .byte     vnoir  ;$0b    ; 0,
>0db4	02		vicbkcol1      .byte     vrouge ;$0b    ; 1,
>0db5	05		vicbkcol2      .byte     vvert  ;$0b    ; 2,
>0db6	06		vicbkcol3      .byte     vbleu  ;$0b    ; et 3.
>0db7	00		inverse        .byte     $00
>0db8	00 00 00 00	scraddr        .byte     0,0,0,0,0
>0dbc	00
>0dbd	00 00 00 00	coladdr        .byte     0,0,0,0,0
>0dc1	00
>0dc2	00		bkcol          .byte     %00000000      ; Pointeur de la couleur actuelle
>0dc3	00 04		virtaddr       .word     $0400          ; L'adresse de l'ecran virtuel
=$00			bkcol0         =         %00000000      ;
=$40			bkcol1         =         %01000000
=$80			bkcol2         =         %10000000
=$c0			bkcol3         =         %11000000
.0dc5			scrmaninit
.0dc5	08		               php            ; On sauvegarde les registres
.0dc6	48		               pha
.0dc7	a9 15		               lda  #%00010101; Selectionne la plage memoire video
.0dc9	8d 18 d0	               sta  $d018     ; et le jeu de caracteeres.
.0dcc	ad 16 d0	               lda  $d016     ; 53270 Lecture valeur actuelle pour ne
.0dcf	09 10		               ora  #%00010000; modifier que le bit 4.
.0dd1	29 ef		               and  #%11101111
.0dd3	8d 16 d0	               sta  $d016 ; 53270
.0dd6	ad 11 d0	               lda  $d011     ; On ne change que le bit 6 pour
.0dd9	09 40		               ora  #%01000000; selectionner le md. couleur de
.0ddb	8d 11 d0	               sta  $d011     ; 53270   ; fond etendu.
.0dde	ad b3 0d	               lda  vicbkcol0
.0de1	8d 21 d0	               sta  $d021     ; 53281
.0de4	ad b4 0d	               lda  vicbkcol1
.0de7	8d 22 d0	               sta  $d022     ; 53282
.0dea	ad b5 0d	               lda  vicbkcol2
.0ded	8d 23 d0	               sta  $d023     ; 53283
.0df0	ad b6 0d	               lda  vicbkcol3
.0df3	8d 24 d0	               sta  $d024     ; 54284
.0df6	a5 00		               lda  bkcol0    ; On charge et utilise la couleur de ...
.0df8	8d c2 0d	               sta  bkcol     ; ... fond par defaut des caracteres.
.0dfb	20 55 0e	               jsr  cls       ; Finalement on efface l'ecran
.0dfe	68		               pla
.0dff	28		               plp
.0e00	60		               rts
.0e01			curshome
.0e01	08		               php                      ; Sauvegarde flags ...
.0e02	48		               pha                      ; ... et accumulateur
.0e03	ad c3 0d	               lda  virtaddr            ; In replace le pointeur ...
.0e06	8d ad 0d	               sta  scrptr              ; ... d'écran virtuel à sa ...
.0e09	ad c4 0d	               lda  virtaddr+1          ; ... position initiale.
.0e0c	8d ae 0d	               sta  scrptr+1
.0e0f	20 40 0e	               jsr  synccolptr          ; On synchronise le ptr couleur.
.0e12	ad b3 0d	               lda  vicbkcol0
.0e15	8d 21 d0	               sta  $d021               ; On recharge les couleurs ...
.0e18	ad b4 0d	               lda  vicbkcol1           ; ... de fond par defaut tel ...
.0e1b	8d 22 d0	               sta  $d022               ; ... que specifie dans les ...
.0e1e	ad b5 0d	               lda  vicbkcol2           ; ... les variables globales.
.0e21	8d 23 d0	               sta  $d023
.0e24	ad b6 0d	               lda  vicbkcol3
.0e27	8d 24 d0	               sta  $d024
.0e2a	68		               pla                      ; Récupère l'accumulateur ...
.0e2b	28		               plp                      ; ... et les flags
.0e2c	60		               rts
.0e2d			incscrptr
.0e2d	08		               php                      ; Sauvegarde flags ...
.0e2e	48		               pha                      ; ... et accumulateur
.0e2f	ee ad 0d	               inc  scrptr              ; Incremente le pointeur
.0e32	ad ad 0d	               lda  scrptr              ; Regarde si on doit faire un ...
.0e35	d0 03		               bne  pasdereport         ; ... report dans le MSB
.0e37	ee ae 0d	               inc  scrptr+1            ; Si oui on fait le repport
.0e3a	20 40 0e	pasdereport    jsr  synccolptr          ; On synchronise le ptr couleur.
.0e3d	68		               pla                      ; Récupère l'accumulateur ...
.0e3e	28		               plp                      ; ... et les flags
.0e3f	60		               rts
.0e40			synccolptr
.0e40	08		               php                      ; Sauvegarde flags ...
.0e41	48		               pha                      ; ... et accumulateur
.0e42	ad ad 0d	               lda  scrptr              ; Récupère le LSB du scrptr ...
.0e45	8d af 0d	               sta  colptr              ; ... pour le placer dans le colptr.
.0e48	ad ae 0d	               lda  scrptr+1            ; Récupère le mSB du scrptr, ...
.0e4b	29 03		               and  #%00000011          ; ... le converti pour pointer ...
.0e4d	09 d8		               ora  #%11011000          ; ... la RAM couleur ...
.0e4f	8d b0 0d	               sta  colptr+1            ; ... et le sauvegarde.
.0e52	68		               pla                      ; Récupère l'accumulateur ...
.0e53	28		               plp                      ; ... et les flags
.0e54	60		               rts
.0e55			cls
.0e55	20 a1 0a	               jsr  push                ; On sauvegarde les registres
.0e58	ad c3 0d	               lda  virtaddr            ; On replace le curseur d'ecran à
.0e5b	8d ad 0d	               sta  scrptr
.0e5e	ad c4 0d	               lda  virtaddr+1          ; sa position initiale, ($0400).
.0e61	8d ae 0d	               sta  scrptr+1
.0e64	20 40 0e	               jsr  synccolptr          ; On synchronise la couleur.
.0e67	20 0c 10	               jsr  scrptr2zp1          ; L'adresse actuelle dans le ZP1.
.0e6a	ad b2 0d	               lda  brdcol              ; On place la couleur ...
.0e6d	8d 20 d0	               sta  vicbordcol          ; ... de la bordure.
.0e70	ad c2 0d	               lda  bkcol               ; Associer couleur pour ...
.0e73	8d 21 d0	               sta  vicbackcol          ; ... remplir l'ecran ...
.0e76	a9 20		               lda  #$20                ; ... de caracteres espace.
.0e78	a2 04		               ldx  #4                  ; Quatre blocs de ...
.0e7a	a0 00		nextline       ldy  #0                  ; ... 256 caracteres.
.0e7c			nextcar
.0e7c	91 fb		               sta  (zpage1),y          ;
.0e7e	a5 fc		               lda  zpage1+1
.0e80	48		               pha
.0e81	29 03		               and  #%00000011
.0e83	09 d8		               ora  #%11011000
.0e85	85 fc		               sta  zpage1+1
.0e87	a9 00		               lda  #0
.0e89	91 fb		               sta  (zpage1),y
.0e8b	68		               pla
.0e8c	85 fc		               sta  zpage1+1
.0e8e	a9 20		               lda  #$20
.0e90	88		               dey
.0e91	d0 e9		               bne  nextcar
.0e93	e6 fc		               inc  zpage1+1
.0e95	ca		               dex
.0e96	d0 e4		               bne  nextcar
.0e98	a9 00		               lda  #$00
.0e9a	8d ad 0d	               sta  scrptr
.0e9d	a9 04		               lda  #$04
.0e9f	8d ae 0d	               sta  scrptr+1
.0ea2	20 40 0e	               jsr  synccolptr
.0ea5	20 e0 0a	               jsr  pop
.0ea8	60		               rts
.0ea9			setborder
.0ea9	08		               php
.0eaa	8d b2 0d	               sta  brdcol
.0ead	8d 20 d0	               sta  vicbordcol
.0eb0	28		               plp
.0eb1	60		               rts
.0eb2			setinverse
.0eb2	08		               php
.0eb3	48		               pha
.0eb4	a9 80		               lda  #%10000000
.0eb6	8d b7 0d	               sta  inverse
.0eb9	68		               pla
.0eba	28		               plp
.0ebb	60		               rts
.0ebc			clrinverse
.0ebc	08		               php
.0ebd	48		               pha
.0ebe	a9 00		               lda  #%00000000
.0ec0	8d b7 0d	               sta  inverse
.0ec3	68		               pla
.0ec4	28		               plp
.0ec5	60		               rts
.0ec6			putch
.0ec6	20 a1 0a	               jsr  push           ; On sauvegarde les registres
.0ec9	20 0c 10	               jsr  scrptr2zp1     ; Place le ptr d'ecran sur zp1
.0ecc	29 3f		               and  #%00111111     ; Masque des bits 6 et 7 pour la ouleur.
.0ece	0d c2 0d	               ora  bkcol          ; On y ajoute la couleur du fond.
.0ed1	a0 00		               ldy  #0             ; Met Y à 0
.0ed3	91 fb		               sta  (zpage1),y     ; Affiche le caractere
.0ed5	ae b0 0d	               ldx  colptr+1       ; Place le MSB du ptr de couleur
.0ed8	86 fc		               stx  zpage1+1       ; ... dans le MSB du zp1.
.0eda	ad b1 0d	               lda  curcol         ; Charge la couleur voulu dans.
.0edd	91 fb		               sta  (zpage1),y     ; ... la ram de couleur.
.0edf	20 2d 0e	               jsr  incscrptr      ; Incremente le pointeur d'ecran.
.0ee2	20 e0 0a	               jsr  pop            ; Replace tous les registres
.0ee5	60		               rts
.0ee6			z2putch
.0ee6	20 a1 0a	               jsr  push           ; On sauvegarde les registres
.0ee9	a0 00		               ldy  #$0            ; Met Y à 0
.0eeb	b1 fd		               lda  (zpage2),y     ; Charge le caractere
.0eed	20 c6 0e	               jsr  putch          ; Appel pour affichage
.0ef0	20 e0 0a	               jsr  pop            ; Replace tous les registres
.0ef3	60		               rts
.0ef4			z2puts
.0ef4	20 a1 0a	               jsr  push           ; On sauvegarde les registres
.0ef7	a0 00		               ldy  #$0            ; Met Y à 0
.0ef9	b1 fd		nextcar        lda  (zpage2),y     ; Charge le caractere
.0efb	f0 09		               beq  endstr         ; Est-ce le 0 de fin de chaine ?
.0efd	20 e6 0e	               jsr  z2putch        ; Appel pour affichage
.0f00	20 c0 0b	               jsr  inczp2         ; On pointe zp2 sur le prochain caractere.
.0f03	4c f9 0e	               jmp  nextcar        ; On passe au prochain
.0f06	20 e0 0a	endstr         jsr  pop            ; Replace tous les registres
.0f09	60		               rts
.0f0a			puts
.0f0a	20 a1 0a	               jsr  push           ; On sauvegarde les registres
.0f0d	86 fd		               stx  zpage2         ; On positionne xp2 en fonction de
.0f0f	84 fe		               sty  zpage2+1       ; l'adresse reçcu dans X et Y
.0f11	20 f4 0e	               jsr  z2puts         ; Appel pour affichage
.0f14	20 e0 0a	               jsr  pop            ; Replace tous les registres
.0f17	60		               rts
.0f18			gotoxy
.0f18	20 a1 0a	               jsr  push           ; On sauvegarde les registres
.0f1b	20 01 0e	               jsr  curshome       ;  retourne le curseur virtuel a 0,0.
.0f1e	c0 00		yagain         cpy  #0             ; Devons nous changer de ligne ?
.0f20	f0 09		               beq  setx           ; Si non, on verifi les colonnes.
.0f22	a9 28		               lda  #40            ; Si oui on ajoute 40
.0f24	20 a9 0f	               jsr  saddscrptr     ;  à l'adresse du pointeur virtuel autant
.0f27	88		               dey                 ;  de fois qu'il est spécifié dans y.
.0f28	4c 1e 0f	               jmp  yagain         ; On passe au prochain y.
.0f2b	8a		setx           txa                 ; On ajoute la valeur de X
.0f2c	20 a9 0f	               jsr  saddscrptr     ;  à l'adresse di pointeur virtuel.
.0f2f	20 40 0e	               jsr  synccolptr     ; Synchro du pointeur des couleurs
.0f32	20 e0 0a	               jsr  pop            ; Replace tous les registres
.0f35	60		               rts
.0f36			putsxy
.0f36	20 a1 0a	               jsr  push           ; On sauvegarde les registres et le zp2
.0f39	86 fd		               stx  zpage2         ; Place l'adr de chaine dans zp2
.0f3b	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.0f3d	a0 00		               ldy  #0             ; On place le compteur
.0f3f	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.0f41	aa		               tax                 ; de A à X
.0f42	20 c0 0b	               jsr  inczp2         ; On deplace le pointeur
.0f45	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.0f47	a8		               tay                 ; de A à Y
.0f48	20 18 0f	               jsr  gotoxy         ; gotoxy : X=col, Y=ligne
.0f4b	20 c0 0b	               jsr  inczp2         ; On deplace le pointeur
.0f4e	20 f4 0e	               jsr  z2puts         ; On imprime la chaine
.0f51	20 e0 0a	               jsr  pop            ; Replace tous les registres
.0f54	60		               rts
.0f55			putscxy
.0f55	20 a1 0a	               jsr  push           ; On Sauvegarde registres et zp2
.0f58	86 fd		               stx  zpage2         ; On place l'adresse de chaine dans zp2
.0f5a	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.0f5c	a0 00		               ldy  #0             ; Place le compteur
.0f5e	b1 fd		               lda  (zpage2),y     ; Charge la couleur
.0f60	8d b1 0d	               sta  curcol         ; ... et on la definie
.0f63	20 c0 0b	               jsr  inczp2         ; Pointe le prochain byte
.0f66	b1 fd		               lda  (zpage2),y     ; Récupere et sauvegarde ...
.0f68	8d c2 0d	               sta  bkcol          ; ... l'index de couleur de fond
.0f6b	20 c0 0b	               jsr  inczp2         ; Deplace le pointeur
.0f6e	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.0f70	aa		               tax                 ; ... de A à X
.0f71	20 c0 0b	               jsr  inczp2         ; Deplace le pointeur
.0f74	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.0f76	a8		               tay                 ; de A à Y
.0f77	20 18 0f	               jsr  gotoxy         ; gotoxy : X=col, y=ligne
.0f7a	20 c0 0b	               jsr  inczp2         ; Place le ptr en début de chaine
.0f7d	20 f4 0e	               jsr  z2puts         ; On imprime la chaine
.0f80	20 e0 0a	               jsr  pop
.0f83	60		               rts
.0f84			setcurcol
.0f84	08		               php
.0f85	8d b1 0d	               sta  curcol
.0f88	28		               plp
.0f89	60		               rts
.0f8a			setvicbkcol
.0f8a	08		               php
.0f8b	48		               pha
.0f8c	8a		               txa
.0f8d	29 03		               and  #$03
.0f8f	aa		               tax
.0f90	68		               pla
.0f91	9d b3 0d	               sta  vicbkcol0,x
.0f94	9d 21 d0	               sta  $d021,x
.0f97	28		               plp
.0f98	60		               rts
.0f99			setbkcol
.0f99	08		               php
.0f9a	48		               pha
.0f9b	0a		               asl
.0f9c	0a		               asl
.0f9d	0a		               asl
.0f9e	0a		               asl
.0f9f	0a		               asl
.0fa0	0a		               asl
.0fa1	29 c0		               and  #$c0
.0fa3	8d c2 0d	               sta  bkcol
.0fa6	68		               pla
.0fa7	28		               plp
.0fa8	60		               rts
.0fa9			saddscrptr
.0fa9	08		               php
.0faa	48		               pha
.0fab	18		               clc
.0fac	6d ad 0d	               adc  scrptr
.0faf	8d ad 0d	               sta  scrptr
.0fb2	90 03		               bcc  norep
.0fb4	ee ae 0d	               inc  scrptr+1
.0fb7	68		norep          pla
.0fb8	28		               plp
.0fb9	60		               rts
.0fba			scrptr2str
.0fba	20 a1 0a	               jsr  push
.0fbd	ad ae 0d	               lda  scrptr+1
.0fc0	48		               pha
.0fc1	20 b7 0c	               jsr  lsra4bits
.0fc4	20 ab 0c	               jsr  nib2hex
.0fc7	8d b8 0d	               sta  scraddr
.0fca	68		               pla
.0fcb	20 b7 0c	               jsr  lsra4bits
.0fce	20 ab 0c	               jsr  nib2hex
.0fd1	8d b9 0d	               sta  scraddr+1
.0fd4	ad ae 0d	               lda  scrptr+1
.0fd7	48		               pha
.0fd8	20 b7 0c	               jsr  lsra4bits
.0fdb	20 ab 0c	               jsr  nib2hex
.0fde	8d b8 0d	               sta  scraddr
.0fe1	68		               pla
.0fe2	20 b7 0c	               jsr  lsra4bits
.0fe5	20 ab 0c	               jsr  nib2hex
.0fe8	8d b9 0d	               sta  scraddr+1
.0feb	ad ad 0d	               lda  scrptr
.0fee	48		               pha
.0fef	20 b7 0c	               jsr  lsra4bits
.0ff2	20 ab 0c	               jsr  nib2hex
.0ff5	8d ba 0d	               sta  scraddr+2
.0ff8	8d bf 0d	               sta  coladdr+2
.0ffb	68		               pla
.0ffc	20 b7 0c	               jsr  lsra4bits
.0fff	20 ab 0c	               jsr  nib2hex
.1002	8d bb 0d	               sta  scraddr+3
.1005	8d c0 0d	               sta  coladdr+3
.1008	20 e0 0a	               jsr  pop
.100b	60		               rts
.100c			scrptr2zp1
.100c	08		               php
.100d	48		               pha
.100e	ad ad 0d	               lda  scrptr
.1011	85 fb		               sta  zpage1
.1013	ad ae 0d	               lda  scrptr+1
.1016	85 fc		               sta  zpage1+1
.1018	68		               pla
.1019	28		               plp
.101a	60		               rts
.101b			colptr2zp1
.101b	08		               php
.101c	48		               pha
.101d	ad af 0d	               lda  colptr
.1020	85 fb		               sta  zpage1
.1022	ad b0 0d	               lda  colptr+1
.1025	85 fc		               sta  zpage1+1
.1027	68		               pla
.1028	28		               plp
.1029	60		               rts
.102a			scrptr2zp2
.102a	08		               php
.102b	48		               pha
.102c	ad ad 0d	               lda  scrptr
.102f	85 fd		               sta  zpage2
.1031	ad ae 0d	               lda  scrptr+1
.1034	85 fe		               sta  zpage2+1
.1036	68		               pla
.1037	28		               plp
.1038	60		               rts
.1039			colptr2zp2
.1039	08		               php
.103a	48		               pha
.103b	ad af 0d	               lda  colptr
.103e	85 fd		               sta  zpage2
.1040	ad b0 0d	               lda  colptr+1
.1043	85 fe		               sta  zpage2+1
.1045	68		               pla
.1046	28		               plp
.1047	60		               rts
.1048			putrahex
.1048	08		               php
.1049	48		               pha
.104a	20 be 0c	               jsr     a2hex
.104d	a2 58		               ldx     #<a2hexcol
.104f	a0 0c		               ldy     #>a2hexcol
.1051	20 0a 0f	               jsr     puts
.1054	68		               pla
.1055	28		               plp
.1056	60		               rts
.1057			putrahexxy
.1057	08		               php
.1058	48		               pha
.1059	20 be 0c	               jsr  a2hex
.105c	a9 5a		               lda  #<a2hexpos
.105e	a0 0c		               ldy  #>a2hexpos
.1060	20 36 0f	               jsr  putsxy
.1063	68		               pla
.1064	28		               plp
.1065	60		               rts
.1066			putrahexcxy
.1066	08		               php
.1067	68		               pla
.1068	20 be 0c	               jsr  a2hex
.106b	a9 5a		               lda  #<a2hexpos
.106d	a0 0c		               ldy  #>a2hexpos
.106f	20 55 0f	               jsr  putscxy
.1072	68		               pla
.1073	28		               plp
.1074	60		               rts

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.1075			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=$c0			bkcol   =   bkcol3
.1075	08		                php
.1076	8d 27 12	                sta  rega
.1079	68		                pla
.107a	8d 2a 12	                sta  regp
.107d	8e 28 12	                stx  regx
.1080	8c 29 12	                sty  regy
.1083	ba		                tsx
.1084	8e 2b 12	                stx  regs
.1087	68		                pla
.1088	8d 2d 12	                sta  regpcl
.108b	8d 2e 12	                sta  regpcl2
.108e	68		                pla
.108f	8d 2c 12	                sta  regpch
.1092	ad 27 12	                lda  rega
.1095	48		                pha
.1096	20 ab 0c	                jsr  nib2hex
.1099	8d ca 11	                sta  vala+1
.109c	68		                pla
.109d	20 b7 0c	                jsr  lsra4bits
.10a0	20 ab 0c	                jsr  nib2hex
.10a3	8d c9 11	                sta  vala
.10a6	ad 29 12	                lda  regy
.10a9	48		                pha
.10aa	20 ab 0c	                jsr  nib2hex
.10ad	8d e0 11	                sta  valy+1
.10b0	68		                pla
.10b1	20 b7 0c	                jsr  lsra4bits
.10b4	20 ab 0c	                jsr  nib2hex
.10b7	8d df 11	                sta  valy
.10ba	ad 28 12	                lda  regx
.10bd	48		                pha
.10be	20 ab 0c	                jsr  nib2hex
.10c1	8d d5 11	                sta  valx+1
.10c4	68		                pla
.10c5	20 b7 0c	                jsr  lsra4bits
.10c8	20 ab 0c	                jsr  nib2hex
.10cb	8d d4 11	                sta  valx
.10ce	ad 2a 12	                lda  regp
.10d1	48		                pha
.10d2	20 ab 0c	                jsr  nib2hex
.10d5	8d eb 11	                sta  valp+1
.10d8	68		                pla
.10d9	20 b7 0c	                jsr  lsra4bits
.10dc	20 ab 0c	                jsr  nib2hex
.10df	8d ea 11	                sta  valp
.10e2	ad 2b 12	                lda  regs
.10e5	48		                pha
.10e6	20 ab 0c	                jsr  nib2hex
.10e9	8d f6 11	                sta  vals+1
.10ec	68		                pla
.10ed	20 b7 0c	                jsr  lsra4bits
.10f0	20 ab 0c	                jsr  nib2hex
.10f3	8d f5 11	                sta  vals
.10f6	ad 2c 12	                lda  regpch
.10f9	48		                pha
.10fa	20 ab 0c	                jsr  nib2hex
.10fd	8d 02 12	                sta  valpch+1
.1100	68		                pla
.1101	20 b7 0c	                jsr  lsra4bits
.1104	20 ab 0c	                jsr  nib2hex
.1107	8d 01 12	                sta  valpch
.110a	ad 2d 12	                lda  regpcl
.110d	48		                pha
.110e	20 ab 0c	                jsr  nib2hex
.1111	8d 04 12	                sta  valpcl+1
.1114	68		                pla
.1115	20 b7 0c	                jsr  lsra4bits
.1118	20 ab 0c	                jsr  nib2hex
.111b	8d 03 12	                sta  valpcl
.111e	a5 fb		                lda  zpage1
.1120	48		                pha
.1121	20 ab 0c	                jsr  nib2hex
.1124	8d 13 12	                sta  valz1l
.1127	68		                pla
.1128	20 b7 0c	                jsr  lsra4bits
.112b	20 ab 0c	                jsr  nib2hex
.112e	8d 14 12	                sta  valz1l+1
.1131	a5 fc		                lda  zpage1+1
.1133	48		                pha
.1134	20 ab 0c	                jsr  nib2hex
.1137	8d 11 12	                sta  valz1h
.113a	68		                pla
.113b	20 b7 0c	                jsr  lsra4bits
.113e	20 ab 0c	                jsr  nib2hex
.1141	8d 12 12	                sta  valz1h+1
.1144	a5 fd		                lda  zpage2
.1146	48		                pha
.1147	20 ab 0c	                jsr  nib2hex
.114a	8d 23 12	                sta  valz2l
.114d	68		                pla
.114e	20 b7 0c	                jsr  lsra4bits
.1151	20 ab 0c	                jsr  nib2hex
.1154	8d 24 12	                sta  valz2l+1
.1157	a5 fe		                lda  zpage2+1
.1159	48		                pha
.115a	20 ab 0c	                jsr  nib2hex
.115d	8d 21 12	                sta  valz2h
.1160	68		                pla
.1161	20 b7 0c	                jsr  lsra4bits
.1164	20 ab 0c	                jsr  nib2hex
.1167	8d 22 12	                sta  valz2h+1
.116a	20 b2 0e	                jsr  setinverse
.116d	78		                sei
.116e	a2 c1		                ldx  #<srega
.1170	a0 11		                ldy  #>srega+1
.1172	20 55 0f	                jsr  putscxy
.1175	a2 cc		                ldx  #<sregx
.1177	a0 11		                ldy  #>sregx+1
.1179	20 55 0f	                jsr  putscxy
.117c	a2 d7		                ldx  #<sregy
.117e	a0 11		                ldy  #>sregy+1
.1180	20 55 0f	                jsr  putscxy
.1183	a2 e2		                ldx  #<sregp
.1185	a0 11		                ldy  #>sregp+1
.1187	20 55 0f	                jsr  putscxy
.118a	a2 ed		                ldx  #<sregs
.118c	a0 11		                ldy  #>sregs+1
.118e	20 55 0f	                jsr  putscxy
.1191	a2 f8		                ldx  #<sregpc
.1193	a0 11		                ldy  #>sregpc+1
.1195	20 55 0f	                jsr  putscxy
.1198	a2 07		                ldx  #<sregz1
.119a	a0 12		                ldy  #>sregz1+1
.119c	20 55 0f	                jsr  putscxy
.119f	a2 17		                ldx  #<sregz2
.11a1	a0 12		                ldy  #>sregz2+1
.11a3	20 55 0f	                jsr  putscxy
.11a6	58		                cli
.11a7	20 bc 0e	                jsr  clrinverse
.11aa	ad 2c 12	                lda  regpch
.11ad	48		                pha
.11ae	ad 2d 12	                lda  regpcl
.11b1	48		                pha
.11b2	ac 29 12	                ldy  regy
.11b5	ae 28 12	                ldx  regx
.11b8	ad 2a 12	                lda  regp
.11bb	48		                pha
.11bc	ad 27 12	                lda  rega
.11bf	28		                plp
.11c0	60		                rts
>11c1	01 c0 00 17	srega   .byte   colr,bkcol,coln,line
>11c5	20 01 3a 24	        .text   ' a:$' ;4,24
>11c9	00 00 00	vala    .byte   0,0,0
>11cc	01 c0 06 17	sregx   .byte   colr,bkcol,coln+6,line
>11d0	20 18 3a 24	        .text   ' x:$' ;4,24
>11d4	00 00 00	valx    .byte   0,0,0
>11d7	01 c0 0c 17	sregy   .byte   colr,bkcol,coln+12,line
>11db	20 19 3a 24	        .text   ' y:$' ;4,24
>11df	00 00 00	valy    .byte   0,0,0
>11e2	01 c0 12 17	sregp   .byte   colr,bkcol,coln+18,line
>11e6	20 10 3a 24	        .text   ' p:$' ;4,24
>11ea	00 00 00	valp    .byte   0,0,0
>11ed	01 c0 18 17	sregs   .byte   colr,bkcol,coln+24,line
>11f1	20 13 3a 24	        .text   ' s:$' ;4,24
>11f5	00 00 00	vals    .byte   0,0,0
>11f8	01 c0 1e 17	sregpc  .byte   colr,bkcol,coln+30,line
>11fc	20 10 03 3a	        .text   ' pc:$' ;4,24
>1200	24
>1201	00 00		valpch  .byte   0,0
>1203	00 00 20 00	valpcl  .byte   0,0,32,0
>1207	01 c0 03 18	sregz1  .byte   colr,bkcol,coln+3,line+1
>120b	20 1a 10 31	        .text   ' zp1:$' ;4,24
>120f	3a 24
>1211	00 00		valz1h  .byte   0,0
>1213	00 00 20 00	valz1l  .byte   0,0,32,0
>1217	01 c0 0f 18	sregz2  .byte   colr,bkcol,coln+15,line+1
>121b	20 1a 10 32	        .text   ' zp2:$' ;4,24
>121f	3a 24
>1221	00 00		valz2h  .byte   0,0
>1223	00 00 20 00	valz2l  .byte   0,0,32,0
>1227	00		rega    .byte   0
>1228	00		regx    .byte   0
>1229	00		regy    .byte   0
>122a	00		regp    .byte   0
>122b	00		regs    .byte   0
>122c	00		regpch  .byte   0
>122d	00		regpcl  .byte   0
>122e	00		regpcl2 .byte   0
>122f	00		vzp1h   .byte   0
>1230	00		vzp1l   .byte   0
>1231	00		vzp2h   .byte   0
>1232	00		vzp2l   .byte   0

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-joystick.asm

=$dc00			js_2port       =    $dc00
=$dc01			js_1port       =    $dc01
=$dc02			js_2dir        =    $dc02
=$dc03			js_1dir        =    $dc03
=2			js_xoffset     =    2
=2			js_yoffset     =    2
=0			js_location    =    0
.1233			js_init
.1233	20 a1 0a	jsr  push
.1236	ad 03 dc	               lda  js_1dir
.1239	29 e0		               and  #$e0
.123b	8d 03 dc	               sta  js_1dir
.123e	ad 02 dc	               lda  js_2dir
.1241	29 e0		               and  #$e0
.1243	8d 02 dc	               sta  js_2dir
.1246	20 e0 0a	               jsr  pop
.1249	60		               rts
.124a			js_scan
.124a	20 51 12	jsr  js_1scan
.124d	20 07 13	               jsr  js_2scan
.1250	60		               rts
.1251			js_1scan
.1251	20 a1 0a	               jsr  push
.1254	ad 01 dc	               lda  js_1port
.1257	29 1f		               and  #$1f
.1259	48		               pha
.125a	49 1f		               eor  #$1f
.125c	8d bd 16	               sta  js_1status
.125f	68		               pla
.1260	c9 00		               cmp  #$00
.1262	d0 03		               bne  p1scan
.1264	4c f7 12	               jmp  port1_out
.1267	49 1f		p1scan         eor  #$1f
.1269	18		               clc
.126a	4a		js_1b0         lsr
.126b	90 14		               bcc  js_1b1
.126d	48		               pha
.126e	ee 26 16	               inc  js_1flag
.1271	ad 22 16	               lda  js_1pixy
.1274	38		               sec
.1275	e9 02		               sbc  #js_yoffset
.1277	c9 f0		               cmp  #$f0
.1279	90 02		               bcc  sto1ym
.127b	a9 00		               lda  #$00
.127d	8d 22 16	sto1ym         sta  js_1pixy
.1280	68		               pla
.1281	4a		js_1b1         lsr
.1282	90 14		               bcc  js_1b2
.1284	48		               pha
.1285	ee 26 16	               inc  js_1flag
.1288	ad 22 16	               lda  js_1pixy
.128b	18		               clc
.128c	69 02		               adc  #js_yoffset
.128e	c9 c7		               cmp  #199
.1290	90 02		               bcc  sto1yp
.1292	a9 c7		               lda  #199
.1294	8d 22 16	sto1yp         sta  js_1pixy
.1297	68		               pla
.1298	4a		js_1b2         lsr
.1299	90 20		               bcc  js_1b3
.129b	48		               pha
.129c	ee 26 16	               inc  js_1flag
.129f	ad 20 16	               lda  js_1pixx
.12a2	0d 21 16	               ora  js_1pixx+1
.12a5	f0 13		               beq  js_1b2out
.12a7	38		               sec
.12a8	ad 20 16	               lda  js_1pixx
.12ab	e9 02		               sbc  #js_xoffset
.12ad	8d 20 16	               sta  js_1pixx
.12b0	b0 08		               bcs  js_1b2out
.12b2	ad 21 16	               lda  js_1pixx+1
.12b5	f0 03		               beq  js_1b2out
.12b7	ce 21 16	               dec  js_1pixx+1
.12ba	68		js_1b2out      pla
.12bb	4a		js_1b3         lsr
.12bc	90 22		               bcc  js_1b4
.12be	48		               pha
.12bf	ee 26 16	               inc  js_1flag
.12c2	ad 21 16	               lda  js_1pixx+1
.12c5	f0 0a		               beq  incj1x
.12c7	ad 20 16	               lda  js_1pixx
.12ca	c9 3c		               cmp  #$40-4
.12cc	30 03		               bmi  incj1x
.12ce	4c df 12	               jmp  js_1b3out
.12d1	18		incj1x         clc
.12d2	ad 20 16	               lda  js_1pixx
.12d5	69 02		               adc  #js_xoffset
.12d7	8d 20 16	               sta  js_1pixx
.12da	90 03		               bcc  js_1b3out
.12dc	ee 21 16	               inc  js_1pixx+1
.12df	68		js_1b3out      pla
.12e0	4a		js_1b4          lsr                     ;Estce le bbouton fire (F)
.12e1	90 14		                bcc     port1_out       ;Oui!
.12e3	ee 26 16	                inc     js_1flag
.12e6	ee 25 16	                inc     js_1fire        ; on augmente le nombre de tir
.12e9	a2 01		js_1wait        ldx     #$01
.12eb	a0 ff		                ldy     #$ff
.12ed	c8		js_1rel         iny
.12ee	ad 01 dc	                lda     js_1port
.12f1	49 ff		                eor     #$ff
.12f3	29 10		                and     #$10
.12f5	d0 f6		                bne     js_1rel         ; des boutons
.12f7	ad 26 16	port1_out       lda     js_1flag
.12fa	f0 08		                beq     out
.12fc	20 fe 13	                jsr     js_1correct
.12ff	a9 00		                lda     #0
.1301	8d 26 16	                sta     js_1flag
.1304	20 e0 0a	out             jsr     pop
.1307			js_2scan
.1307	20 a1 0a	                jsr     push
.130a	ad 00 dc	port2           lda     js_2port
.130d	29 1f		                and     #$1f
.130f	48		                pha
.1310	49 1f		                eor     #$1f
.1312	8d be 16	                sta js_2status
.1315	68		                pla
.1316	c9 1f		                cmp	#$1f
.1318	d0 03		                bne     p2scan
.131a	4c cf 13	                jmp     port2_out
.131d	49 1f		p2scan          eor     #$1f
.131f	18		                clc
.1320	4a		js_2b0          lsr                     ;On decale js_2 bit 0 dans C
.1321	90 14		                bcc     js_2b1          ;Est-ce vers le haut (U)
.1323	48		                pha                     ;On stack la valeur
.1324	ee 31 16	                inc     js_2flag
.1327	ad 2d 16	                lda     js_2pixy        ;Oui!
.132a	38		                sec                     ;On place la carry a 1
.132b	e9 02		                sbc     #js_yoffset     ;On reduit
.132d	c9 f0		                cmp     #$f0
.132f	90 02		                bcc     sto2ym
.1331	a9 00		                lda     #$00
.1333	8d 2d 16	sto2ym          sta     js_2pixy        ; le y
.1336	68		                pla                     ;On recupere la valeur
.1337	4a		js_2b1          lsr                     ;On decale js_2 bit 0 dans C
.1338	90 14		                bcc     js_2b2          ;Est-ce vers le bas (D)
.133a	48		                pha                     ;On stack la valeur
.133b	ee 31 16	                inc     js_2flag
.133e	ad 2d 16	                lda     js_2pixy        ;Oui!
.1341	18		                clc                     ;On place la carry a 0
.1342	69 02		                adc     #js_yoffset     ;On augmente
.1344	c9 c7		                cmp     #199
.1346	90 02		                bcc     sto2yp
.1348	a9 c7		                lda     #199
.134a	8d 2d 16	sto2yp          sta     js_2pixy        ; le y
.134d	68		                pla                     ;On recupere la valeur
.134e	4a		js_2b2          lsr                     ;On decale js_2 bit 0 dans C
.134f	90 20		                bcc     js_2b3          ;Est-ce vers la gauche (L)
.1351	48		                pha                     ;On stack la valeur
.1352	ee 31 16	                inc     js_2flag
.1355	ad 2b 16	                lda     js_2pixx        ;Oui!
.1358	0d 2c 16	                ora     js_2pixx+1
.135b	f0 13		                beq     js_2b2out
.135d	38		                sec                     ;On place la carry a 1
.135e	ad 2b 16	                lda     js_2pixx        ;Oui!
.1361	e9 02		                sbc     #js_xoffset     ;On diminue
.1363	8d 2b 16	                sta     js_2pixx        ; le X
.1366	b0 08		                bcs     js_2b2out       ; de offset
.1368	ad 2c 16	                lda     js_2pixx+1
.136b	f0 03		                beq     js_2b2out
.136d	ce 2c 16	                dec     js_2pixx+1      ; sur 16 bits
.1370	68		js_2b2out       pla                     ;On recupere la valeur
.1371	4a		js_2b3          lsr                     ;On decale js_2 bit 0 dans C
.1372	90 22		                bcc     js_2b4          ;Est-ce vers la droite (R)
.1374	48		                pha                     ;On stack la valeur
.1375	ee 31 16	                inc     js_2flag
.1378	ad 2c 16	                lda     js_2pixx+1
.137b	f0 0a		                beq     incj2x
.137d	ad 2b 16	                lda     js_2pixx
.1380	c9 3e		                cmp     #$40-js_xoffset
.1382	30 03		                bmi     incj2x
.1384	4c 95 13	                jmp     js_2b3out
.1387	18		incj2x          clc                     ;On place la carry a 0
.1388	ad 2b 16	                lda     js_2pixx        ;Oui!
.138b	69 02		                adc     #js_xoffset     ;On augmente
.138d	8d 2b 16	                sta     js_2pixx        ; le X
.1390	90 03		                bcc     js_2b3out       ; de offset
.1392	ee 2c 16	                inc     js_2pixx+1      ; sur 16 bits
.1395	68		js_2b3out       pla                     ;On recupere la valeur
.1396	4a		js_2b4          lsr                     ;Estce le bbouton fire (F)
.1397	90 36		                bcc     port2_out       ;Oui!
.1399	ee 31 16	                inc     js_2flag
.139c	ee 30 16	                inc     js_2fire        ; on augmente le nombre de tir
.139f	a9 01		                lda     #%00000001
.13a1	8d 35 16	                sta     js_2events
.13a4	ad 2b 16	                lda     js_2pixx
.13a7	8d 32 16	                sta     js_2clickx
.13aa	ad 2c 16	                lda     js_2pixx+1
.13ad	8d 33 16	                sta     js_2clickx+1
.13b0	ad 2d 16	                lda     js_2pixy
.13b3	8d 34 16	                sta     js_2clicky
.13b6	ad 97 16	                lda     js_2val16a+1
.13b9	49 40		                eor     #%01000000
.13bb	8d 97 16	                sta     js_2val16a+1
.13be	a2 00		js_2wait        ldx     #$00
.13c0	a0 ff		                ldy     #$ff
.13c2	c8		js_2rel         iny
.13c3	d0 01		                bne     sr1
.13c5	e8		                inx
.13c6			sr1
.13c6	ad 00 dc	                lda     js_2port
.13c9	49 ff		                eor     #$ff
.13cb	29 10		                and     #$10
.13cd	d0 f3		                bne     js_2rel         ; des boutons
.13cf	ad 31 16	port2_out       lda     js_2flag
.13d2	f0 08		                beq     out
.13d4	20 33 14	                jsr     js_2correct
.13d7	a9 00		                lda     #0
.13d9	8d 31 16	                sta     js_2flag
.13dc	20 e0 0a	out             jsr     pop
.13df			js_corrector
.13df	08		                php
.13e0	48		                pha
.13e1	ad 26 16	                lda     js_1flag
.13e4	f0 08		                beq     check2
.13e6	20 fe 13	                jsr     js_1correct
.13e9	a9 00		                lda     #0
.13eb	8d 26 16	                sta     js_1flag
.13ee	ad 31 16	check2          lda     js_2flag
.13f1	f0 08		                beq     no_update
.13f3	20 33 14	                jsr     js_2correct
.13f6	a9 00		                lda     #0
.13f8	8d 31 16	                sta     js_2flag
.13fb	68		no_update       pla
.13fc	28		                plp
.13fd	60		                rts
.13fe			js_1correct
.13fe	08		                php
.13ff	48		                pha
.1400	ad 20 16	                lda     js_1pixx
.1403	8d 31 14	                sta     vallsb
.1406	ad 21 16	                lda     js_1pixx+1
.1409	6a		                ror                     ; ex = %0000000100000001 = 257 pixel
.140a	6e 31 14	                ror     vallsb          ; Cnnnnnnn      On divise par 8 pc les
.140d	4e 31 14	                lsr     vallsb          ; 0Cnnnnnn      caracteres de 8 pixels
.1410	4e 31 14	                lsr     vallsb          ; 00Cnnnnn
.1413	ad 31 14	                lda     vallsb          ; devient = %00100000 = 32
.1416	8d 23 16	                sta     js_1x
.1419	ad 22 16	                lda     js_1pixy
.141c	8d 31 14	                sta     vallsb
.141f	4e 31 14	                lsr     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.1422	4e 31 14	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.1425	4e 31 14	                lsr     vallsb          ; 00Cnnnnn
.1428	ad 31 14	                lda     vallsb          ; devient = %00100000 = 32
.142b	8d 24 16	                sta     js_1y
.142e	68		                pla
.142f	28		                plp
.1430	60		                rts
>1431	00		vallsb          .byte     0
>1432	00		regx            .byte     0
.1433			js_2correct
.1433	08		                php
.1434	48		                pha
.1435	ad 2b 16	                lda     js_2pixx
.1438	8d 66 14	                sta     vallsb
.143b	ad 2c 16	                lda     js_2pixx+1
.143e	6a		                ror                     ; ex = %0000000100000001 = 257 pixel
.143f	6e 66 14	                ror     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.1442	4e 66 14	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.1445	4e 66 14	                lsr     vallsb          ; 00Cnnnnn
.1448	ad 66 14	                lda     vallsb          ; devient = %00100000 = 32
.144b	8d 2e 16	                sta     js_2x
.144e	ad 2d 16	                lda     js_2pixy
.1451	8d 66 14	                sta     vallsb
.1454	4e 66 14	                lsr     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.1457	4e 66 14	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.145a	4e 66 14	                lsr     vallsb          ; 00Cnnnnn
.145d	ad 66 14	                lda     vallsb          ; devient = %00100000 = 32
.1460	8d 2f 16	                sta     js_2y
.1463	68		                pla
.1464	28		                plp
.1465	60		                rts
>1466	00		vallsb          .byte     0
>1467	00		regx            .byte     0
.1468			js_showvals
.1468	20 f8 14	                jsr     js_2showvals
.146b	60		                rts
.146c			js_1showvals
.146c	20 a1 0a	                jsr     push
.146f	ad 23 16	                lda     js_1x
.1472	20 be 0c	                jsr     a2hex
.1475	ad 5e 0c	                lda     a2hexstr+1
.1478	8d 49 16	                sta     js_1val8+19
.147b	ad 5f 0c	                lda     a2hexstr+2
.147e	8d 4a 16	                sta     js_1val8+20
.1481	ad 20 16	                lda     js_1pixx
.1484	20 be 0c	                jsr     a2hex
.1487	ad 5e 0c	                lda     a2hexstr+1
.148a	8d 68 16	                sta     js_1val16+14
.148d	ad 5f 0c	                lda     a2hexstr+2
.1490	8d 69 16	                sta     js_1val16+15
.1493	ad 21 16	                lda     js_1pixx+1
.1496	20 be 0c	                jsr     a2hex
.1499	ad 5e 0c	                lda     a2hexstr+1
.149c	8d 66 16	                sta     js_1val16+12
.149f	ad 5f 0c	                lda     a2hexstr+2
.14a2	8d 67 16	                sta     js_1val16+13
.14a5	ad 24 16	                lda     js_1y
.14a8	20 be 0c	                jsr     a2hex
.14ab	ad 5e 0c	                lda     a2hexstr+1
.14ae	8d 4d 16	                sta     js_1val8+23
.14b1	ad 5f 0c	                lda     a2hexstr+2
.14b4	8d 4e 16	                sta     js_1val8+24
.14b7	ad 22 16	                lda     js_1pixy
.14ba	20 be 0c	                jsr     a2hex
.14bd	ad 5e 0c	                lda     a2hexstr+1
.14c0	8d 6e 16	                sta     js_1val16+20
.14c3	ad 5f 0c	                lda     a2hexstr+2
.14c6	8d 6f 16	                sta     js_1val16+21
.14c9	a9 00		                lda     #0
.14cb	20 be 0c	                jsr     a2hex
.14ce	ad 5e 0c	                lda     a2hexstr+1
.14d1	8d 6c 16	                sta     js_1val16+18
.14d4	ad 5f 0c	                lda     a2hexstr+2
.14d7	8d 6d 16	                sta     js_1val16+19
.14da	ad 25 16	                lda     js_1fire
.14dd	20 be 0c	                jsr     a2hex
.14e0	ad 5f 0c	                lda     a2hexstr+2
.14e3	8d 57 16	                sta     js_1val8+33
.14e6	a2 36		                ldx     #<js_1val8
.14e8	a0 16		                ldy     #>js_1val8
.14ea	20 55 0f	                jsr     putscxy
.14ed	a2 5a		                ldx     #<js_1val16
.14ef	a0 16		                ldy     #>js_1val16
.14f1	20 55 0f	                jsr     putscxy
.14f4	20 e0 0a	                jsr     pop
.14f7	60		                rts
.14f8			js_2showvals
.14f8	20 a1 0a	                jsr     push                    ; stack : y, x, a, flg
.14fb	ad 2e 16	                lda     js_2x
.14fe	20 be 0c	                jsr     a2hex
.1501	ad 5d 0c	                lda     a2hexstr
.1504	8d 85 16	                sta     js_2val8+19
.1507	ad 5e 0c	                lda     a2hexstr+1
.150a	8d 86 16	                sta     js_2val8+20
.150d	ad 32 16	                lda     js_2clickx
.1510	20 be 0c	                jsr     a2hex
.1513	ad 5d 0c	                lda     a2hexstr
.1516	8d b3 16	                sta     js_2val16+14
.1519	ad 5e 0c	                lda     a2hexstr+1
.151c	8d b4 16	                sta     js_2val16+15
.151f	ad 33 16	                lda     js_2clickx+1
.1522	20 be 0c	                jsr     a2hex
.1525	ad 5d 0c	                lda     a2hexstr
.1528	8d b1 16	                sta     js_2val16+12
.152b	ad 5e 0c	                lda     a2hexstr+1
.152e	8d b2 16	                sta     js_2val16+13
.1531	ad 2f 16	                lda     js_2y
.1534	20 be 0c	                jsr     a2hex
.1537	ad 5d 0c	                lda     a2hexstr
.153a	8d 89 16	                sta     js_2val8+23
.153d	ad 5e 0c	                lda     a2hexstr+1
.1540	8d 8a 16	                sta     js_2val8+24
.1543	ad 34 16	                lda     js_2clicky
.1546	20 be 0c	                jsr     a2hex
.1549	ad 5d 0c	                lda     a2hexstr
.154c	8d b9 16	                sta     js_2val16+20
.154f	ad 5e 0c	                lda     a2hexstr+1
.1552	8d ba 16	                sta     js_2val16+21
.1555	a9 00		                lda     #0
.1557	20 be 0c	                jsr     a2hex
.155a	ad 5d 0c	                lda     a2hexstr
.155d	8d b7 16	                sta     js_2val16+18
.1560	ad 5e 0c	                lda     a2hexstr+1
.1563	8d b8 16	                sta     js_2val16+19
.1566	ad 30 16	                lda     js_2fire
.1569	20 be 0c	                jsr     a2hex
.156c	ad 5e 0c	                lda     a2hexstr+1
.156f	8d 93 16	                sta     js_2val8+33
.1572	a2 72		                ldx     #<js_2val8
.1574	a0 16		                ldy     #>js_2val8
.1576	20 55 0f	                jsr     putscxy
.1579	a2 96		                ldx     #<js_2val16a
.157b	a0 16		                ldy     #>js_2val16a
.157d	20 55 0f	                jsr     putscxy
.1580	a2 a5		                ldx     #<js_2val16
.1582	a0 16		                ldy     #>js_2val16
.1584	20 55 0f	                jsr     putscxy
.1587	20 e0 0a	                jsr     pop
.158a	60		                rts
.158b			js_updatecurs
.158b	20 a1 0a	                jsr     push
.158e	ad 2e 16	running         lda     js_2x
.1591	cd 1a 16	                cmp     js_x
.1594	f0 06		                beq     chky
.1596	8d 1a 16	                sta     js_x
.1599	ee ed 15	                inc     flag
.159c	ad 2f 16	chky            lda     js_2y
.159f	cd 1b 16	                cmp     js_y
.15a2	f0 06		                beq     chkflag
.15a4	8d 1b 16	                sta     js_y
.15a7	ee ed 15	                inc     flag
.15aa	ad ed 15	chkflag         lda     flag
.15ad	f0 1e		                beq     showit
.15af	ae 1c 16	                ldx     js_oldx
.15b2	ac 1d 16	                ldy     js_oldy
.15b5	20 ee 15	                jsr     js_eoraddrxy
.15b8	ae 1a 16	                ldx     js_x
.15bb	ac 1b 16	                ldy     js_y
.15be	20 ee 15	                jsr     js_eoraddrxy
.15c1	ad 1a 16	                lda     js_x
.15c4	8d 1c 16	                sta     js_oldx
.15c7	ad 1b 16	                lda     js_y
.15ca	8d 1d 16	                sta     js_oldy
.15cd	a9 00		showit          lda     #0
.15cf	8d ed 15	                sta     flag
.15d2	8d 4e 0c	                sta     addr1
.15d5	a9 04		                lda     #$04
.15d7	8d 4f 0c	                sta     addr1+1
.15da	ae 1a 16	                ldx     js_x
.15dd	ac 1b 16	                ldy     js_y
.15e0	20 14 0c	                jsr     xy2addr
.15e3	ac 50 0c	                ldy     addr2
.15e6	ae 51 0c	                ldx     addr2+1
.15e9	20 e0 0a	                jsr pop
.15ec	60		                rts
>15ed	00		flag            .byte   0
.15ee			js_eoraddrxy
.15ee	20 a1 0a	                jsr     push
.15f1	20 f6 0b	                jsr     savezp2
.15f4	a9 04		                lda     #$04
.15f6	8d 4f 0c	                sta     addr1+1
.15f9	a9 00		                lda     #0
.15fb	8d 4e 0c	                sta     addr1
.15fe	20 14 0c	                jsr     xy2addr
.1601	ac 50 0c	                ldy     addr2
.1604	84 fd		                sty     zpage2
.1606	ae 51 0c	                ldx     addr2+1
.1609	86 fe		                stx     zpage2+1
.160b	a0 00		                ldy     #0
.160d	b1 fd		                lda     (zpage2),y
.160f	49 40		                eor     #%01000000
.1611	91 fd		                sta     (zpage2),y
.1613	20 05 0c	                jsr     restzp2
.1616	20 e0 0a	                jsr     pop
.1619	60		                rts
>161a	00		js_x            .byte   0
>161b	00		js_y            .byte   0
>161c	ff		js_oldx         .byte   $ff
>161d	ff		js_oldy         .byte   $ff
>161e	00		js_oldcar       .byte   0
>161f	00		js_oldcol       .byte   0
>1620	00 00		js_1pixx        .word   0
>1622	00		js_1pixy        .byte   0
>1623	00		js_1x           .byte   0
>1624	00		js_1y           .byte   0
>1625	00		js_1fire        .byte   0
>1626	00		js_1flag        .byte   0
>1627	00 00		js_1clickx      .word   0
>1629	00		js_1clicky      .byte   0
>162a	00		js_1events      .byte   0
>162b	00 00		js_2pixx        .word   0
>162d	00		js_2pixy        .byte   0
>162e	00		js_2x           .byte   0
>162f	00		js_2y           .byte   0
>1630	00		js_2fire        .byte   0
>1631	00		js_2flag        .byte   0
>1632	00 00		js_2clickx      .word   0
>1634	00		js_2clicky      .byte   0
>1635	00		js_2events      .byte   0
=$03			js_txtcol       =       vcyan
=$00			js_txtbak       =       bkcol0
>1636	03 00 04 05	js_1val8        .byte     js_txtcol,js_txtbak,4,5
>163a	50 0f 12 14	                .text   "Port 1 (x,y):($00,$00) Fire:(0)"
>163e	20 31 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>164e	30 29 20 46 09 12 05 3a 28 30 29
>1659	00		                .byte   0
>165a	03 00 0b 07	js_1val16       .byte   js_txtcol,js_txtbak,11,7
>165e	28 18 2c 19	                .text   "(x,y):($0000,$0000)"
>1662	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29
>1671	00		                .byte   0
>1672	03 00 04 0a	js_2val8        .byte   js_txtcol,js_txtbak,4,10
>1676	43 01 12 50	                .text   "CarPos (x,y):($00,$00) Fire:(0)"
>167a	0f 13 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>168a	30 29 20 46 09 12 05 3a 28 30 29
>1695	00		                .byte   0
>1696	01 00 04 0c	js_2val16a      .byte   vblanc,js_txtbak,4,12
>169a	43 0c 09 03	                .text   "Click pos."
>169e	0b 20 10 0f 13 2e
>16a4	00		                .byte   0
>16a5	03 00 10 0c	js_2val16       .byte   js_txtcol,js_txtbak,16,12
>16a9	28 18 2c 19	                .text   "(x,y):($0000,$0000)"
>16ad	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29
>16bc	00		                .byte   0
>16bd	00		js_1status     .byte 0
>16be	00		js_2status     .byte 0

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-spriteman.asm

.16bf			sprt_init
.16bf	20 a1 0a	                jsr     push
.16c2	ad 14 17	                lda     sprt_ptr
.16c5	20 f6 17	                jsr     sprt_loadptr
.16c8	20 d8 0b	                jsr     savezp1
.16cb	20 f6 0b	                jsr     savezp2
.16ce	ad 15 d0	                lda     vic+$15 ; enable sprite 2
.16d1	09 04		                ora     #%00000100
.16d3	8d 15 d0	                sta     vic+$15
.16d6	a9 0d		                lda     #$0d
.16d8	8d fa 07	                sta     $7fa
.16db	ad d2 1a	                lda     sprt_ptr0
.16de	85 fb		                sta     zpage1
.16e0	ad d3 1a	                lda     sprt_ptr0+1
.16e3	85 fc		                sta     zpage1+1
.16e5	a9 40		                lda     #$40
.16e7	85 fd		                sta     zpage2
.16e9	a9 03		                lda     #$03
.16eb	85 fe		                sta     zpage2+1
.16ed	a0 41		                ldy     #65
.16ef	b1 fb		                lda     (zpage1),y      ; sprite y offset
.16f1	8d 39 18	                sta     sprt_yoffset
.16f4	88		                dey
.16f5	b1 fb		                lda     (zpage1),y      ; sprite x offset
.16f7	8d 38 18	                sta     sprt_xoffset
.16fa	88		                dey
.16fb	b1 fb		                lda     (zpage1),y      ; sprite color
.16fd	8d 29 d0	                sta     $d029
.1700	88		                dey
.1701	a0 3e		                ldy     #62
.1703	b1 fb		nextbyte        lda     (zpage1),y
.1705	91 fd		                sta     (zpage2),y
.1707	88		                dey
.1708	d0 f9		                bne     nextbyte
.170a	20 e7 0b	                jsr     restzp1
.170d	20 05 0c	                jsr     restzp2
.1710	20 e0 0a	                jsr     pop
.1713	60		                rts
>1714	01		sprt_ptr        .byte   $01
.1715			sprt_calcpos
.1715	20 a1 0a	                jsr     push
.1718	a9 00		                lda     #0
.171a	8d 3b 18	                sta     sprt_x+1
.171d	8d 3d 18	                sta     sprt_y+1
.1720	ad 2c 16	                lda     js_2pixx+1
.1723	18		                clc
.1724	2a		                rol
.1725	2a		                rol
.1726	8d 3b 18	                sta     sprt_x+1
.1729	ad 2b 16	                lda     js_2pixx
.172c	18		                clc
.172d	6d 38 18	                adc     sprt_xoffset
.1730	8d 3a 18	                sta     sprt_x
.1733	90 08		                bcc     norepx
.1735	ad 3b 18	                lda     sprt_x+1
.1738	09 04		                ora     #$04
.173a	8d 3b 18	                sta     sprt_x+1
.173d	ad 2d 16	norepx          lda     js_2pixy
.1740	18		                clc
.1741	6d 39 18	                adc     sprt_yoffset
.1744	8d 3c 18	                sta     sprt_y
.1747	20 e0 0a	                jsr     pop
.174a	60		                rts
.174b			sprt_move
.174b	20 a1 0a	                jsr     push
.174e	20 15 17	                jsr     sprt_calcpos
.1751	ad 3a 18	                lda     sprt_x
.1754	8d 04 d0	                sta     vic+$04
.1757	ad 3b 18	                lda     sprt_x+1
.175a	8d 10 d0	                sta     vic+$10
.175d	ad 3c 18	                lda     sprt_y
.1760	8d 05 d0	                sta     vic+$05
.1763	20 6a 17	                jsr     sprt_showpos
.1766	20 e0 0a	                jsr     pop
.1769	60		                rts
.176a			sprt_showpos
.176a	20 a1 0a	                jsr     push
.176d	ad 3a 18	                lda     sprt_x
.1770	20 be 0c	                jsr     a2hex
.1773	ad 5d 0c	                lda     a2hexstr
.1776	8d 01 1b	                sta     sprite_pos+26
.1779	ad 5e 0c	                lda     a2hexstr+1
.177c	8d 02 1b	                sta     sprite_pos+27
.177f	ad 3b 18	                lda     sprt_x+1
.1782	20 be 0c	                jsr     a2hex
.1785	ad 5d 0c	                lda     a2hexstr
.1788	8d ff 1a	                sta     sprite_pos+24
.178b	ad 5e 0c	                lda     a2hexstr+1
.178e	8d 00 1b	                sta     sprite_pos+25
.1791	ad 3c 18	                lda     sprt_y
.1794	20 be 0c	                jsr     a2hex
.1797	ad 5d 0c	                lda     a2hexstr
.179a	8d 07 1b	                sta     sprite_pos+32
.179d	ad 5e 0c	                lda     a2hexstr+1
.17a0	8d 08 1b	                sta     sprite_pos+33
.17a3	a9 00		                lda     #0
.17a5	20 be 0c	                jsr     a2hex
.17a8	ad 5d 0c	                lda     a2hexstr
.17ab	8d 05 1b	                sta     sprite_pos+30
.17ae	ad 5e 0c	                lda     a2hexstr+1
.17b1	8d 06 1b	                sta     sprite_pos+31
.17b4	a2 e7		                ldx     #<sprite_pos
.17b6	a0 1a		                ldy     #>sprite_pos
.17b8	20 55 0f	                jsr     putscxy
.17bb	20 e0 0a	                jsr     pop
.17be	60		                rts
.17bf			sprt_loadptr2
.17bf	20 a1 0a	                jsr     push
.17c2	aa		                tax
.17c3	8e 14 17	                stx     sprt_ptr
.17c6	ad d3 1a	                lda     sprt_ptr0+1
.17c9	8d f5 17	                sta     calcbuff+1
.17cc	ad d2 1a	                lda     sprt_ptr0
.17cf	8d f4 17	                sta     calcbuff
.17d2	e0 00		                cpx     #0
.17d4	f0 11		                beq     addrok
.17d6	ad f4 17	                lda     calcbuff
.17d9	18		nextx           clc
.17da	69 42		                adc     #66
.17dc	90 03		                bcc     nocarry
.17de	ee f5 17	                inc     calcbuff+1
.17e1	8d f4 17	nocarry         sta     calcbuff
.17e4	ca		                dex
.17e5	d0 f2		                bne     nextx
.17e7	ac f5 17	addrok          ldy     calcbuff+1
.17ea	ae f4 17	                ldx     calcbuff
.17ed	20 10 18	                jsr     sprt_setimage
.17f0	20 e0 0a	                jsr     pop
.17f3	60		                rts
>17f4	00 00		calcbuff        .word   $0
.17f6			sprt_loadptr
.17f6	20 a1 0a	                jsr     push
.17f9	ad 14 17	                lda     sprt_ptr
.17fc	18		                clc
.17fd	2a		                rol
.17fe	a8		                tay
.17ff	b9 d2 1a	                lda     sprt_ptr0,y
.1802	aa		                tax
.1803	b9 d3 1a	                lda     sprt_ptr0+1,y
.1806	a8		                tay
.1807	20 10 18	                jsr     sprt_setimage
.180a	20 e0 0a	                jsr     pop
.180d	60		                rts
>180e	00 00		calcbuff        .word   $0
.1810			sprt_setimage
.1810	20 a1 0a	                jsr     push
.1813	20 d8 0b	                jsr     savezp1
.1816	20 f6 0b	                jsr     savezp2
.1819	84 fc		                sty     zpage1+1
.181b	86 fb		                stx     zpage1
.181d	a0 18		                ldy     #>sprt_image
.181f	84 fe		                sty     zpage2+1
.1821	a0 3e		                ldy     #<sprt_image
.1823	84 fd		                sty     zpage2
.1825	a0 42		                ldy     #66
.1827	b1 fb		nextbyte        lda     (zpage1),y
.1829	91 fd		                sta     (zpage2),y
.182b	88		                dey
.182c	d0 f9		                bne     nextbyte
.182e	20 05 0c	                jsr     restzp2
.1831	20 e7 0b	                jsr     restzp1
.1834	20 e0 0a	                jsr     pop
.1837	60		                rts
>1838	00		sprt_xoffset    .byte   $00
>1839	00		sprt_yoffset    .byte   $00
>183a	00 00		sprt_x          .word   $0000
>183c	00 00		sprt_y          .word   $0000
>183e			sprt_image      .fill 66
>1880	00 00 00 00	sprt_crxair     .byte $00, $00, $00, $00, $00, $00 ; 6
>1884	00 00
>1886	00 66 00 00	                .byte $00, $66, $00, $00, $3c, $00 ; 12
>188a	3c 00
>188c	00 18 00 00	                .byte $00, $18, $00, $00, $00, $00 ; 18
>1890	00 00
>1892	00 00 00 00	                .byte $00, $00, $00, $00, $18, $00 ; 24
>1896	18 00
>1898	80 00 01 c0	                .byte $80, $00, $01, $c0, $18, $03 ; 30
>189c	18 03
>189e	66 66 66 c0	                .byte $66, $66, $66, $c0, $18, $03 ; 36
>18a2	18 03
>18a4	80 00 01 00	                .byte $80, $00, $01, $00, $18, $00 ; 42
>18a8	18 00
>18aa	00 00 00 00	                .byte $00, $00, $00, $00, $00, $00 ; 48
>18ae	00 00
>18b0	00 18 00 00	                .byte $00, $18, $00, $00, $3c, $00 ; 54
>18b4	3c 00
>18b6	00 66 00 00	                .byte $00, $66, $00, $00, $00, $00 ; 60
>18ba	00 00
>18bc	00 00 00 01	                .byte $00, $00, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>18c0	0c 28
>18c2	80 00 00 e0	sprt_mouse      .byte $80, $00, $00, $e0, $00, $00 ; 6
>18c6	00 00
>18c8	b8 00 00 ce	                .byte $b8, $00, $00, $ce, $00, $00 ; 12
>18cc	00 00
>18ce	83 80 00 c0	                .byte $83, $80, $00, $c0, $e0, $00 ; 18
>18d2	e0 00
>18d4	80 18 00 c0	                .byte $80, $18, $00, $c0, $3c, $00 ; 24
>18d8	3c 00
>18da	80 e0 00 c0	                .byte $80, $e0, $00, $c0, $60, $00 ; 30
>18de	60 00
>18e0	98 30 00 fc	                .byte $98, $30, $00, $fc, $18, $00 ; 36
>18e4	18 00
>18e6	c6 0c 00 03	                .byte $c6, $0c, $00, $03, $06, $00 ; 42
>18ea	06 00
>18ec	01 9c 00 00	                .byte $01, $9c, $00, $00, $f0, $00 ; 48
>18f0	f0 00
>18f2	00 40 00 00	                .byte $00, $40, $00, $00, $00, $00 ; 54
>18f6	00 00
>18f8	00 00 00 00	                .byte $00, $00, $00, $00, $00, $00 ; 60
>18fc	00 00
>18fe	00 00 00 01	                .byte $00, $00, $00, $01, $18, $31 ; 66, X,X,X color, xoffset, yoffset
>1902	18 31
>1904	00 7c 00 01	sprt_pointer    .byte $00, $7c, $00, $01, $83, $00 ; 6
>1908	83 00
>190a	06 10 c0 08	                .byte $06, $10, $c0, $08, $00, $30 ; 12
>190e	00 30
>1910	12 10 88 20	                .byte $12, $10, $88, $20, $00, $08 ; 18
>1914	00 08
>1916	40 ba 04 40	                .byte $40, $ba, $04, $40, $6c, $04 ; 24
>191a	6c 04
>191c	80 c6 02 aa	                .byte $80, $c6, $02, $aa, $82, $aa ; 30
>1920	82 aa
>1922	80 c6 02 40	                .byte $80, $c6, $02, $40, $6c, $04 ; 36
>1926	6c 04
>1928	40 ba 04 20	                .byte $40, $ba, $04, $20, $00, $08 ; 42
>192c	00 08
>192e	12 10 90 08	                .byte $12, $10, $90, $08, $00, $20 ; 48
>1932	00 20
>1934	06 10 c0 01	                .byte $06, $10, $c0, $01, $83, $00 ; 54
>1938	83 00
>193a	00 7c 00 00	                .byte $00, $7c, $00, $00, $00, $00 ; 60
>193e	00 00
>1940	00 00 00 01	                .byte $00, $00, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>1944	0c 28
>1946	55 55 55 aa	sprt_pointer2   .byte $55, $55, $55, $aa, $aa, $aa ; 6
>194a	aa aa
>194c	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 12
>1950	aa aa
>1952	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 18
>1956	aa aa
>1958	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 24
>195c	00 2a
>195e	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 30
>1962	00 2a
>1964	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 36
>1968	00 2a
>196a	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 42
>196e	00 2a
>1970	54 00 55 aa	                .byte $54, $00, $55, $aa, $aa, $aa ; 48
>1974	aa aa
>1976	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 54
>197a	aa aa
>197c	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 60
>1980	aa aa
>1982	55 55 55 01	                .byte $55, $55, $55, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>1986	0c 28
>1988	06 00 00 0f	sprt_hand       .byte $06, $00, $00, $0f, $00, $00 ; 6
>198c	00 00
>198e	19 80 00 10	                .byte $19, $80, $00, $10, $80, $00 ; 12
>1992	80 00
>1994	19 80 00 16	                .byte $19, $80, $00, $16, $b1, $8c ; 18
>1998	b1 8c
>199a	10 ca 52 10	                .byte $10, $ca, $52, $10, $84, $21 ; 24
>199e	84 21
>19a0	10 84 21 30	                .byte $10, $84, $21, $30, $84, $21 ; 30
>19a4	84 21
>19a6	50 84 21 90	                .byte $50, $84, $21, $90, $84, $21 ; 36
>19aa	84 21
>19ac	90 00 01 90	                .byte $90, $00, $01, $90, $00, $01 ; 42
>19b0	00 01
>19b2	90 7f c1 90	                .byte $90, $7f, $c1, $90, $00, $01 ; 48
>19b6	00 01
>19b8	40 ff e2 40	                .byte $40, $ff, $e2, $40, $00, $02 ; 54
>19bc	00 02
>19be	3c 00 04 02	                .byte $3c, $00, $04, $02, $00, $08 ; 60
>19c2	00 08
>19c4	03 ff f8 01	                .byte $03, $ff, $f8, $01, $12, $31 ; 66, X,X,X color, xoffset, yoffset
>19c8	12 31
>19ca	00 3e 00 01	sprt_ultraman   .byte $00, $3e, $00, $01, $c1, $c0 ; 6
>19ce	c1 c0
>19d0	0e 3e 30 08	                .byte $0e, $3e, $30, $08, $41, $08 ; 12
>19d4	41 08
>19d6	10 1c 04 10	                .byte $10, $1c, $04, $10, $22, $04 ; 18
>19da	22 04
>19dc	24 1c 12 23	                .byte $24, $1c, $12, $23, $00, $62 ; 24
>19e0	00 62
>19e2	20 08 02 47	                .byte $20, $08, $02, $47, $c1, $f1 ; 30
>19e6	c1 f1
>19e8	6a aa ab 47	                .byte $6a, $aa, $ab, $47, $c9, $f1 ; 36
>19ec	c9 f1
>19ee	20 08 02 20	                .byte $20, $08, $02, $20, $14, $02 ; 42
>19f2	14 02
>19f4	20 00 02 10	                .byte $20, $00, $02, $10, $00, $04 ; 48
>19f8	00 04
>19fa	10 7f 04 08	                .byte $10, $7f, $04, $08, $00, $08 ; 54
>19fe	00 08
>1a00	06 3e 30 01	                .byte $06, $3e, $30, $01, $c1, $c0 ; 60
>1a04	c1 c0
>1a06	00 3e 00 01	                .byte $00, $3e, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>1a0a	0c 28
>1a0c	00 1c 00 00	sprt_male       .byte $00, $1c, $00, $00, $3e, $00 ; 6
>1a10	3e 00
>1a12	00 3e 00 00	                .byte $00, $3e, $00, $00, $3e, $00 ; 12
>1a16	3e 00
>1a18	00 1c 00 00	                .byte $00, $1c, $00, $00, $08, $00 ; 18
>1a1c	08 00
>1a1e	00 ff 80 00	                .byte $00, $ff, $80, $00, $ff, $80 ; 24
>1a22	ff 80
>1a24	00 be 80 00	                .byte $00, $be, $80, $00, $9c, $80 ; 30
>1a28	9c 80
>1a2a	00 88 80 00	                .byte $00, $88, $80, $00, $be, $80 ; 36
>1a2e	be 80
>1a30	00 be 80 01	                .byte $00, $be, $80, $01, $9c, $c0 ; 42
>1a34	9c c0
>1a36	01 94 c0 00	                .byte $01, $94, $c0, $00, $14, $00 ; 48
>1a3a	14 00
>1a3c	00 14 00 00	                .byte $00, $14, $00, $00, $14, $00 ; 54
>1a40	14 00
>1a42	00 36 00 00	                .byte $00, $36, $00, $00, $77, $00 ; 60
>1a46	77 00
>1a48	00 77 00 01	                .byte $00, $77 ,$00, $01, $0c, $2f ; 66, X,X,X color, xoffset, yoffset
>1a4c	0c 2f
>1a4e	00 3c 00 00	sprt_robot      .byte $00, $3c, $00, $00, $24, $00 ; 6
>1a52	24 00
>1a54	00 66 18 00	                .byte $00, $66, $18, $00, $66, $38 ; 12
>1a58	66 38
>1a5a	00 24 38 00	                .byte $00, $24, $38, $00, $3c, $10 ; 18
>1a5e	3c 10
>1a60	00 18 10 00	                .byte $00, $18, $10, $00, $18, $10 ; 24
>1a64	18 10
>1a66	0f ff f0 08	                .byte $0f, $ff, $f0, $08, $7e, $00 ; 30
>1a6a	7e 00
>1a6c	08 7e 00 08	                .byte $08, $7e, $00, $08, $18, $00 ; 36
>1a70	18 00
>1a72	1c 18 00 1c	                .byte $1c, $18, $00, $1c, $18, $00 ; 42
>1a76	18 00
>1a78	18 3c 00 00	                .byte $18, $3c, $00, $00, $3c, $00 ; 48
>1a7c	3c 00
>1a7e	00 24 00 00	                .byte $00, $24, $00, $00, $24, $00 ; 54
>1a82	24 00
>1a84	00 24 00 03	                .byte $00, $24, $00, $03, $e7, $c0 ; 60
>1a88	e7 c0
>1a8a	03 e7 c0 01	                .byte $03, $e7, $c0, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>1a8e	0c 28
>1a90	00 1c 00 00	sprt_femme      .byte $00, $1c, $00, $00, $3e, $00 ; 6
>1a94	3e 00
>1a96	00 3e 00 00	                .byte $00, $3e, $00, $00, $3e, $00 ; 12
>1a9a	3e 00
>1a9c	00 1c 00 00	                .byte $00, $1c, $00, $00, $08, $00 ; 18
>1aa0	08 00
>1aa2	00 7f 00 00	                .byte $00, $7f, $00, $00, $ff, $80 ; 24
>1aa6	ff 80
>1aa8	00 be 80 00	                .byte $00, $be, $80, $00, $9c, $80 ; 30
>1aac	9c 80
>1aae	00 88 80 00	                .byte $00, $88, $80, $00, $9c, $80 ; 36
>1ab2	9c 80
>1ab4	00 be 80 01	                .byte $00, $be, $80, $01, $be, $c0 ; 42
>1ab8	be c0
>1aba	01 be c0 00	                .byte $01, $be, $c0, $00, $7f, $00 ; 48
>1abe	7f 00
>1ac0	00 7f 00 00	                .byte $00, $7f, $00, $00, $ff, $80 ; 54
>1ac4	ff 80
>1ac6	00 36 00 00	                .byte $00, $36, $00, $00, $77, $00 ; 60
>1aca	77 00
>1acc	00 55 00 01	                .byte $00, $55 ,$00, $01, $0c, $2f ; 66, X,X,X color, xoffset, yoffset
>1ad0	0c 2f
>1ad2	3e 18		sprt_ptr0       .word  sprt_image + (0*66)
>1ad4	80 18		sprt_ptr1       .word  sprt_image + (1*66)
>1ad6	c2 18		sprt_ptr2       .word  sprt_image + (2*66)
>1ad8	04 19		sprt_ptr3       .word  sprt_image + (3*66)
>1ada	46 19		sprt_ptr4       .word  sprt_image + (4*66)
>1adc	88 19		sprt_ptr5       .word  sprt_image + (5*66)
>1ade	ca 19		sprt_ptr6       .word  sprt_image + (6*66)
>1ae0	0c 1a		sprt_ptr7       .word  sprt_image + (7*66)
>1ae2	4e 1a		sprt_ptr8       .word  sprt_image + (8*66)
>1ae4	90 1a		sprt_ptr9       .word  sprt_image + (9*66)
>1ae6	ff		testbyte        .byte 255
=$07			sprt_txtcol     =       vjaune
=$00			sprt_txtbak     =       bkcol0
=$01			sprt_color      =       vwhite
>1ae7	07 00 04 0e	sprite_pos      .byte   sprt_txtcol,sprt_txtbak,4,14
>1aeb	53 10 12 09	                .text       "Sprite pos. (x,y):($0000,$0000)"
>1aef	14 05 20 10 0f 13 2e 20 28 18 2c 19 29 3a 28 24
>1aff	30 30 30 30 2c 24 30 30 30 30 29
>1b0a	00		                .byte   0

;******  Return to file: j2tester.asm


;******  End of listing

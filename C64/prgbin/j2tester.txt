
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L j2tester.txt -o j2tester.prg j2tester.asm
; Tue Sep 16 22:38:57 2025

;Offset	;Hex		;Source

;******  Processing input file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d000			chargen        =    $d000
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0000	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0004	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms=$e1d4  ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk=$ed09    ; Send Talk command to serial bus.
=$ed0c			slisten=$ed0c  ; Send LISTEN command to serial bus.
=$ed40			sflush=$ed40   ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2=$edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2=$edb9  ; Send TALK secondary addressto serial bus.
=$eddd			sbout=$eddd    ; Write byte to serial bus.
=$edef			sutalk=$edef   ; Send UNTalk command to serial bus.
=$edfe			sulisten=$edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh=$ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow=$ee8e  ; Set CLOCK OUT to low
=$ee97			sdathigh=$ee97 ; Set DATA OUT to High
=$eea0			sdatlow=$eea0  ; Set DATA OUT to low
=$eea9			sclkdta=$eea9  ; Read CLOCK IN and DATA IN.
=$f1ad			sbread=$f1ad   ; Read one byte from serial port.
=$f237			sstdin=$F237   ; Define serial bus as standard input; do not send TALK
=$f279			sstdout=$F279  ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen=$F3D5   ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose=$F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose=$F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose=$F642  ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout=$FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr=$ffa5    ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin=$ffc6    ; jmp ($031e) Define an input channel.
=$ffc9			chkout=$ffc9   ; jmp ($0320) Define an output channel.
=$ffcf			chrin=$ffcf    ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout=$ffd2   ; jmp ($0326) Output a character
=$ff81			cint=$ff81     ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout=$ffa8    ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall=$ffe7    ; jmp ($032c) Close all open files
=$ffc3			close=$ffc3    ; jmp ($031c) Close a logical file
=$ffcc			clrchn=$ffcc   ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin=$ffe4    ; jmp ($032a) Get a character.
=$fff3			iobase=$fff3   ; jmp $e500 Define i/o memory page
=$ff84			ioinit=$ff84   ; ($fda3) Initialize i/o devices.
=$ffb1			listen=$ffb1   ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load=$ffd5     ; jmp $f4e9 Load device to RAM.
=$ff9c			membot=$ff9c   ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop=$ff99   ; jmp $fe25 Get/Set top of ram
=$ffc0			open=$ffc0     ; jmp ($031a) Open a logical file
=$fff0			plot=$fff0     ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas=$ff87   ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim=$ffde    ; jmp $f6dd Read system clock
=$ffb7			readst=$ffb7   ; jmp $fe07 Read i/o status word
=$ff8a			restor=$ff8a   ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save=$ffd8     ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey=$ff9f   ; jmp $ea87 Scan the keyboard
=$ffed			screen=$ffed   ; jmp $e505 Return screen format
=$ff93			second=$ff93   ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs=$ffba   ; jmp $fe00 Set up a logical file
=$ff90			setmsg=$ff90   ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam=$ffbd   ; jmp $fdf9 Set up file name
=$ffdb			settim=$ffdb   ; jmp $f6e4 Set the system clock.
=$ffa2			settmo=$ffa2   ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop=$ffe1     ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk=$ffb4     ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa=$ff96     ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim=$ffea    ; jmp $f69b Update the system clock
=$ffae			unlsn=$ffae    ; jmp $edfe Send an unlisten command
=$ffab			untlk=$ffab    ; jmp $edef Send an untalk command
=$ff8d			vector=$ff8d   ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.           ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.   ;a--;---; a=dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.      ;---;a--; a=Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.   ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial. ;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.        ;--y;---; y=msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .         ;a--;---; a=file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.             ;axy;---; a=# start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode. ;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.   ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.              ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.          ;---;---; z=1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.         ;a--;---; a=len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.       ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)         ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.         ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                   ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.        ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                  ;a--;---; a=ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.              ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.         ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.              ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.         ;a--;---; a=SAor#$60
=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0008	20 54 08	libtart        jsr  main           ; Programme principale doit s'appeler "main"

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1          .word bcmd2         ;Adresse de la commande basic suivante.
>0803	01 00		               .word 1             ;Numero de la ligne Basic.
>0805	8f		               .byte $8F           ;Le token de la commande REM du Basic
>0806	2a 50 52 4f	               .text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2          .word bcmd3         ;Adresse de la commande basic suivante.
>082b	02 00		               .word 2             ;Numero de la ligne Basic.
>082d	8f		               .byte $8F           ;Le token de la commande REM du Basic
>082e	2a 50 41 52	               .text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3          .word bcmd4         ;Adresse de la commande basic suivante.
>0846	03 00		               .word 3             ;Numero de la ligne Basic.
>0848	9e		               .byte $9e           ;Le token de la commande PRINT du Basic
>0849	30 32 31 32	               .text format("%05d",hpgmstart)
>084d	39
>084e	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4          .word $0000         ;L'adresse de la commande Basic suivante.
.0851	4c 54 08	hpgmstart     jmp   main           ; Le programme principale doit s'appeler "main"

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: j2tester.asm

.0854			main
.0854	20 75 13	               jsr  scrmaninit
.0857	4c 57 08	ici            jmp  ici
.085a	20 b3 0a	               jsr  js_init
.085d	a9 80		               lda  #$80
.085f	8d 61 13	               sta  curcol
.0862	a9 00		               lda  #0
.0864	8d 21 d0	               sta  vicback0col
.0867	a9 02		               lda  #vrouge
.0869	8d 62 13	               sta  brdcol
.086c	8d 20 d0	               sta  vicbordcol
.086f	20 05 14	               jsr  cls
.0872	a9 20		               lda  #$20
.0874	09 00		               ora  #%00000000
.0876	a0 04		               ldy  #$04
.0878	a2 04		               ldx  #$04
.087a	20 e0 c0	               jsr  memfill
.087d	a9 00		               lda  #$00
.087f	a0 d8		               ldy  #$d8
.0881	20 e0 c0	               jsr  memfill
.0884	20 0b 0f	               jsr  sprt_init
.0887	20 62 14	goagain        jsr  setinverse
.088a	20 72 c0	               jsr  pushreg
.088d	a2 72		               ldx  #<bstring1
.088f	a0 09		               ldy  #>bstring1
.0891	20 0f 15	               jsr  putscxy
.0894	20 a1 c0	               jsr  popreg
.0897	20 72 c0	               jsr  pushreg
.089a	a2 9f		               ldx  #<bstring2
.089c	a0 09		               ldy  #>bstring2
.089e	20 0f 15	               jsr  putscxy
.08a1	20 a1 c0	               jsr  popreg
.08a4	20 72 c0	               jsr  pushreg
.08a7	a2 cc		               ldx  #<bstring3
.08a9	a0 09		               ldy  #>bstring3
.08ab	20 0f 15	               jsr  putscxy
.08ae	20 a1 c0	               jsr  popreg
.08b1	20 72 c0	               jsr  pushreg
.08b4	a2 f9		               ldx  #<bstring4
.08b6	a0 09		               ldy  #>bstring4
.08b8	20 0f 15	               jsr  putscxy
.08bb	20 a1 c0	               jsr  popreg
.08be	20 6c 14	               jsr  clrinverse
.08c1	20 72 c0	               jsr  pushreg
.08c4	a2 10		               ldx  #<js_status1
.08c6	a0 0a		               ldy  #>js_status1
.08c8	20 0f 15	               jsr  putscxy
.08cb	20 a1 c0	               jsr  popreg
.08ce	20 72 c0	               jsr  pushreg
.08d1	a2 28		               ldx  #<js_status2
.08d3	a0 0a		               ldy  #>js_status2
.08d5	20 0f 15	               jsr  putscxy
.08d8	20 a1 c0	               jsr  popreg
.08db	20 72 c0	               jsr  pushreg
.08de	a2 3f		               ldx  #<js_status3
.08e0	a0 0a		               ldy  #>js_status3
.08e2	20 0f 15	               jsr  putscxy
.08e5	20 a1 c0	               jsr  popreg
.08e8	20 72 c0	               jsr  pushreg
.08eb	a2 58		               ldx  #<js_status4
.08ed	a0 0a		               ldy  #>js_status4
.08ef	20 0f 15	               jsr  putscxy
.08f2	20 a1 c0	               jsr  popreg
.08f5	20 72 c0	               jsr  pushreg
.08f8	a2 71		               ldx  #<js_status5
.08fa	a0 0a		               ldy  #>js_status5
.08fc	20 0f 15	               jsr  putscxy
.08ff	20 a1 c0	               jsr  popreg
.0902	20 72 c0	               jsr  pushreg
.0905	a2 87		               ldx  #<js_status6
.0907	a0 0a		               ldy  #>js_status6
.0909	20 0f 15	               jsr  putscxy
.090c	20 a1 c0	               jsr  popreg
.090f	20 72 c0	               jsr  pushreg
.0912	a2 00		               ldx  #$00
.0914	a0 0f		               ldy  #$0f
.0916	20 d2 14	               jsr  gotoxy
.0919	20 a1 c0	               jsr  popreg
.091c	a9 07		               lda  #vjaune
.091e	20 3e 15	               jsr  setcurcol
.0921	a2 00		               ldx  #$00
.0923	20 53 15	               jsr  setbkcol
.0926	20 c8 0a	looper         jsr  js_scan        ; ****** Un prob avec j2scan.
.0929	4c 29 09	INFINIE        jmp  INFINIE          ; Un branchement infinie.
.092c	20 b4 0c	               jsr  js_showvals
.092f	20 d7 0d	               jsr  js_updatecurs
.0932	20 9d 0f	               jsr  sprt_move
.0935	a2 16		               ldx  #$16
.0937	a0 11		               ldy  #$11
.0939	20 d2 14	               jsr  gotoxy
.093c	a9 03		               lda  #3
.093e	20 3e 15	               jsr  setcurcol
.0941	ad 7c 0e	               lda  js_2fire
.0944	f0 e0		               beq  looper
.0946	ad 7b 0e	               lda  js_2y
.0949	c9 04		               cmp  #$04
.094b	d0 1d		               bne  nochange
.094d	ad 7a 0e	               lda  js_2x
.0950	c9 0b		               cmp  #$0b
.0952	30 16		               bmi  nochange
.0954	c9 1d		               cmp  #$1d
.0956	10 12		               bpl  nochange
.0958	ee 66 0f	               inc  sprt_ptr
.095b	ad 66 0f	               lda  sprt_ptr
.095e	c9 09		               cmp  #9
.0960	90 02		               bcc  drawsptr
.0962	a9 00		               lda  #$00
.0964	8d 66 0f	drawsptr       sta  sprt_ptr
.0967	20 0b 0f	               jsr  sprt_init
.096a	4c 26 09	nochange       jmp  looper
.096d	20 e1 ff	out            jsr  kstop
.0970	60		               rts
>0971	00		onebyte        .byte     0
>0972	0e 40 00 00	bstring1       .byte     vbleu1,bkcol1,0,0
>0976	20 20 20 20	               .text     "      Visualisation du port jeu #2      "
>097a	20 20 56 09 13 15 01 0c 09 13 01 14 09 0f 0e 20
>098a	04 15 20 10 0f 12 14 20 0a 05 15 20 23 32 20 20
>099a	20 20 20 20
>099e	00		               .byte     0
>099f	0b 80 00 01	bstring2       .byte     vgris,bkcol2,0,1
>09a3	20 50 12 0f	               .text     " Programme assembleur pour 6510 sur C64 "
>09a7	07 12 01 0d 0d 05 20 01 13 13 05 0d 02 0c 05 15
>09b7	12 20 10 0f 15 12 20 36 35 31 30 20 13 15 12 20
>09c7	43 36 34 20
>09cb	00		               .byte     0
>09cc	0a c0 00 02	bstring3       .byte     vrose,bkcol3,0,2
>09d0	20 20 20 20	               .text     "     par Daniel Lafrance (2024-06) C    "
>09d4	20 10 01 12 20 44 01 0e 09 05 0c 20 4c 01 06 12
>09e4	01 0e 03 05 20 28 32 30 32 34 2d 30 36 29 20 43
>09f4	20 20 20 20
>09f8	00		               .byte     0
>09f9	07 c0 0b 04	bstring4       .byte     vjaune,bkcol3,11,4
>09fd	20 43 08 01	               .text     " Changer pointeur "
>0a01	0e 07 05 12 20 10 0f 09 0e 14 05 15 12 20
>0a0f	00		               .byte     0
>0a10	0d 00 13 16	js_status1     .byte     vvert1,bkcol0,19,22
>0a14	20 20 20 15	               .text     "   up <----1> haut "
>0a18	10 20 3c 2d 2d 2d 2d 31 3e 20 08 01 15 14 20
>0a27	00		               .byte     0
>0a28	0e 00 13 15	js_status2     .byte     vbleu1,bkcol0,19,21
>0a2c	20 04 0f 17	               .text     " down <---2-> bas "
>0a30	0e 20 3c 2d 2d 2d 32 2d 3e 20 02 01 13 20
>0a3e	00		               .byte     0
>0a3f	0a 00 13 14	js_status3     .byte     vrose,bkcol0,19,20
>0a43	20 0c 05 06	               .text     " left <--4--> gauche"
>0a47	14 20 3c 2d 2d 34 2d 2d 3e 20 07 01 15 03 08 05
>0a57	00		               .byte     0
>0a58	07 00 13 13	js_status4     .byte     vjaune,bkcol0,19,19
>0a5c	12 09 07 08	               .text     "right <-8---> droite"
>0a60	14 20 3c 2d 38 2d 2d 2d 3e 20 04 12 0f 09 14 05
>0a70	00		               .byte     0
>0a71	01 00 13 12	js_status5     .byte     vblanc,bkcol0,19,18
>0a75	20 46 09 12	               .text     " Fire <1----> Feu"
>0a79	05 20 3c 31 2d 2d 2d 2d 3e 20 46 05 15
>0a86	00		               .byte     0
>0a87	03 00 01 17	js_status6     .byte     vcyan,bkcol0,1,23
>0a8b	2b 2d 3e 20	               .text     "+-> Etat de JS2:     %---FRLDU EOR #$1F"
>0a8f	45 14 01 14 20 04 05 20 4a 53 32 3a 20 20 20 20
>0a9f	20 25 2d 2d 2d 46 52 4c 44 55 20 45 4f 52 20 23
>0aaf	24 31 46
>0ab2	00		               .byte     0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-joystick-mc.asm

=$dc00			js_2port       =    $dc00          ; CIA #1 Port data A
=$dc01			js_1port       =    $dc01          ; CIA #1 Port data B
=$dc02			js_2dir        =    $dc02          ; CIA #1 Port de direction A
=$dc03			js_1dir        =    $dc03          ; CIA #1 port de direction B
=2			js_xoffset     =    2
=2			js_yoffset     =    2
=0			js_location    =    0
.0ab3			js_init
.0ab3	08		               php                 ; Sauvegarde le registre de
.0ab4	48		               pha                 ;   status et le registre a.
.0ab5	ad 03 dc	               lda  js_1dir        ; Place les bits de direction du port B
.0ab8	29 e0		               and  #$e0           ; 4-0 en entrées (0).
.0aba	8d 03 dc	               sta  js_1dir
.0abd	ad 02 dc	               lda  js_2dir        ; Place les bits de direction du port A
.0ac0	29 e0		               and  #$e0           ; 4-0 en entrées (0).
.0ac2	8d 02 dc	               sta  js_2dir
.0ac5	68		               pla                 ; Récupère le registre a et
.0ac6	28		               plp                 ;   le registre de status.
.0ac7	60		               rts
.0ac8			js_scan
.0ac8	20 cf 0a	               jsr  js_1scan       ; Scan la manette du port B.
.0acb	20 79 0b	               jsr  js_2scan       ; Scan la manette du port A.
.0ace	60		               rts
.0acf			js_1scan
.0acf	20 72 c0	               jsr  pushreg        ; Sauvegarde tous les registres.
.0ad2	ad 01 dc	               lda  js_1port       ; Lecture du port d'entrées
.0ad5	29 1f		               and  #$1f           ; Masque les bits 7, 6 et 5.
.0ad7	48		               pha                 ; Copie sur la pile.
.0ad8	49 1f		               eor  #$1f           ; Inverse tous les bits.
.0ada	8d 09 0f	               sta  js_1status     ; Sauvegarde le status.
.0add	68		               pla                 ; Récupère une copie originale.
.0ade	c9 00		               cmp  #$00           ; Si les bits sont tous 0
.0ae0	d0 03		               bne  p1scan         ; On scan le port
.0ae2	4c 68 0b	               jmp  port1_out
.0ae5	49 1f		p1scan         eor  #$1f
.0ae7	18		               clc
.0ae8	4a		js_1b0         lsr                 ; On decale js_2 bit 0 dans C
.0ae9	90 14		               bcc  js_1b1         ; Est-ce vers le haut (U)
.0aeb	48		               pha                 ; On stock la valeur
.0aec	ee 72 0e	               inc  js_1flag
.0aef	ad 6e 0e	               lda  js_1pixy       ; Oui!
.0af2	38		               sec                 ; On place la Carry a 1
.0af3	e9 02		               sbc  #js_yoffset    ; On reduit
.0af5	c9 f0		               cmp  #$f0
.0af7	90 02		               bcc  sto1ym
.0af9	a9 00		               lda  #$00
.0afb	8d 6e 0e	sto1ym         sta  js_1pixy       ; le y
.0afe	68		               pla                 ; On recupere la valeur
.0aff	4a		js_1b1         lsr                 ; On decale js_2 bit 0 dans C
.0b00	90 14		               bcc  js_1b2         ; Est-ce vers le bas (D)
.0b02	48		               pha                 ; On stack la valeur
.0b03	ee 72 0e	               inc  js_1flag
.0b06	ad 6e 0e	               lda  js_1pixy       ; Oui!
.0b09	18		               clc                 ; On place la Carry a 0
.0b0a	69 02		               adc  #js_yoffset    ; On augmente
.0b0c	c9 c7		               cmp  #199
.0b0e	90 02		               bcc  sto1yp
.0b10	a9 c7		               lda  #199
.0b12	8d 6e 0e	sto1yp         sta  js_1pixy       ; le y
.0b15	68		               pla                 ; On recupere la valeur
.0b16	4a		js_1b2         lsr                 ; On decale js_1 bit 0 dans C
.0b17	90 20		               bcc  js_1b3         ; Est-ce vers la gauche (L)
.0b19	48		               pha                 ; On stack la valeur
.0b1a	ee 72 0e	               inc  js_1flag
.0b1d	ad 6c 0e	               lda  js_1pixx       ; Oui!
.0b20	0d 6d 0e	               ora  js_1pixx+1
.0b23	f0 13		               beq  js_1b2out
.0b25	38		               sec                 ; On place la Carry a 1
.0b26	ad 6c 0e	               lda  js_1pixx       ; Oui!
.0b29	e9 02		               sbc  #js_xoffset    ; On diminue
.0b2b	8d 6c 0e	               sta  js_1pixx       ; le X
.0b2e	b0 08		               bcs  js_1b2out      ; de offset
.0b30	ad 6d 0e	               lda  js_1pixx+1
.0b33	f0 03		               beq  js_1b2out
.0b35	ce 6d 0e	               dec  js_1pixx+1     ; sur 16 bits
.0b38	68		js_1b2out      pla                 ; On recupere la valeur
.0b39	4a		js_1b3         lsr                 ; On decale js_1 bit 0 dans C
.0b3a	90 22		               bcc  js_1b4         ; Est-ce vers la droite (R)
.0b3c	48		               pha                 ; On stack la valeur
.0b3d	ee 72 0e	               inc  js_1flag
.0b40	ad 6d 0e	               lda  js_1pixx+1
.0b43	f0 0a		               beq  incj1x
.0b45	ad 6c 0e	               lda  js_1pixx
.0b48	c9 3c		               cmp  #$40-4
.0b4a	30 03		               bmi  incj1x
.0b4c	4c 5d 0b	               jmp  js_1b3out
.0b4f	18		incj1x         clc                 ; On place la Carry a 0
.0b50	ad 6c 0e	               lda  js_1pixx
.0b53	69 02		               adc  #js_xoffset    ; On augmente
.0b55	8d 6c 0e	               sta  js_1pixx       ; le X
.0b58	90 03		               bcc  js_1b3out      ; de offset
.0b5a	ee 6d 0e	               inc  js_1pixx+1     ; sur 16 bits
.0b5d	68		js_1b3out      pla                 ; On recupere la valeur
.0b5e	68		js_1b4         pla                 ; On recupere la valeur
.0b5f	4a		               lsr                 ; Est-ce le bbouton fire (F)
.0b60	90 06		               bcc  port1_out      ; Oui!
.0b62	ee 72 0e	               inc  js_1flag
.0b65	ee 71 0e	               inc  js_1fire       ; On augmente le nombre de tir
.0b68	ad 72 0e	port1_out      lda  js_1flag
.0b6b	f0 08		               beq  out
.0b6d	20 4a 0c	               jsr  js_1correct
.0b70	a9 00		               lda  #0
.0b72	8d 72 0e	               sta  js_1flag
.0b75	20 a1 c0	out            jsr  popreg         ; Récupère tous les registres.
.0b78	60		               rts
.0b79			js_2scan
.0b79	20 72 c0	               jsr  pushreg        ; Sauvegarde tous les registres.
.0b7c	ad 00 dc	port2          lda  js_2port       ; Lecture du port d'entrées.
.0b7f	29 1f		               and  #$1f           ; Masque les bits 7, 6 et 5.
.0b81	49 1f		               eor  #$1f           ; Inverse les bits 4 à 0.
.0b83	8d 0a 0f	               sta  js_2status     ; Sauvegarde le status en mémoire.
.0b86	c9 00		               cmp  #$00           ; Si des interrupteurs sont appuyé ...
.0b88	d0 03		               bne  p2scan         ; ... on cherche lesquels.
.0b8a	4c 20 0c	               jmp  port2_out      ; Si non on sort.
.0b8d	ee 7d 0e	p2scan         inc  js_2flag       ; On incrémente le témoin de changement.
.0b90	18		               clc                 ; On met le Carry à 0.
.0b91	4a		js_2b0         lsr                 ; On decale js_2 bit 0 dans Carry.
.0b92	48		               pha                 ; On stack la valeur décalée.
.0b93	90 0f		               bcc  js_2b1         ; Si pas BTNUP, on vérifi le prochain.
.0b95	ad 79 0e	               lda  js_2pixy       ; Oui!
.0b98	38		               sec                 ; On place la Carry a 1.
.0b99	e9 02		               sbc  #js_yoffset    ; Déplace le crs vrs le haut de offset.
.0b9b	c9 f0		               cmp  #$f0           ; Si posy plus basse que Viewport NTSC ...
.0b9d	90 02		               bcc  sto2ym         ; Si le crs dépasse le bas du viewport ...
.0b9f	a9 00		               lda  #$00           ; On le replace en haut.
.0ba1	8d 79 0e	sto2ym         sta  js_2pixy       ; Sauvegarde La pos. pixel de Y.
.0ba4	68		js_2b1         pla                 ; On recupere la valeur du scan décalé.
.0ba5	4a		               lsr                 ; On decale js_2 bit 0 dans Carry.
.0ba6	48		               pha                 ; On stack la valeur décalée.
.0ba7	90 0f		               bcc  js_2b2         ; Si pas BTN-BAS, on vérifi le prochain.
.0ba9	ad 79 0e	               lda  js_2pixy       ; Oui!
.0bac	18		               clc                 ; On place la Carry a 0.
.0bad	69 02		               adc  #js_yoffset    ; Déplace le crs vrs le bas de offset.
.0baf	c9 c7		               cmp  #199           ; Sommes nous dépassé le bas de l'écran?
.0bb1	90 02		               bcc  sto2yp         ; Non, on sauvegarde la position.
.0bb3	a9 c7		               lda  #199           ; Oui,
.0bb5	8d 79 0e	sto2yp         sta  js_2pixy       ; On bloque le Y à 199.
.0bb8	68		js_2b2         pla                 ; On recupere la valeur du scan décalé.
.0bb9	4a		               lsr                 ; On decale js_2 bit 0 dans C
.0bba	48		               pha                 ; On stack la valeur décalée.
.0bbb	90 1b		               bcc  js_2b3         ; Est-ce le bouton gauche (L)
.0bbd	ad 77 0e	               lda  js_2pixx       ; Oui!
.0bc0	0d 78 0e	               ora  js_2pixx+1
.0bc3	f0 13		               beq  js_2b2out
.0bc5	38		               sec                 ; On place la Carry a 1
.0bc6	ad 77 0e	               lda  js_2pixx       ; Oui!
.0bc9	e9 02		               sbc  #js_xoffset    ; On diminue
.0bcb	8d 77 0e	               sta  js_2pixx       ;  le X
.0bce	b0 08		               bcs  js_2b2out      ; de offset
.0bd0	ad 78 0e	               lda  js_2pixx+1
.0bd3	f0 03		               beq  js_2b2out
.0bd5	ce 78 0e	               dec  js_2pixx+1     ; sur 16 bits
.0bd8			js_2b2out
.0bd8	68		js_2b3         pla                 ; On recupere la valeur du scan décalé.
.0bd9	4a		               lsr                 ; On decale js_2 bit 0 dans C
.0bda	48		               pha                 ; On stack la valeur décalée.
.0bdb	90 1d		               bcc  js_2b4         ; Est-ce vers la droite (R)
.0bdd	ad 78 0e	               lda  js_2pixx+1
.0be0	f0 0a		               beq  incj2x
.0be2	ad 77 0e	               lda  js_2pixx
.0be5	c9 3e		               cmp  #$40-js_xoffset
.0be7	30 03		               bmi  incj2x
.0be9	4c fa 0b	               jmp  js_2b3out
.0bec	18		incj2x         clc                 ; On place la Carry a 0
.0bed	ad 77 0e	               lda  js_2pixx       ; Oui!
.0bf0	69 02		               adc  #js_xoffset    ; On augmente
.0bf2	8d 77 0e	               sta  js_2pixx       ;   le X
.0bf5	90 03		               bcc  js_2b3out      ; de offset
.0bf7	ee 78 0e	               inc  js_2pixx+1     ; sur 16 bits
.0bfa			js_2b3out
.0bfa	68		js_2b4         pla                 ; On recupere la valeur du scan décalé.
.0bfb	4a		               lsr                 ;Estce le bbouton fire (F)
.0bfc	90 22		               bcc  port2_out      ;Oui!
.0bfe	ee 7c 0e	               inc  js_2fire       ; On augmente le nombre de tir
.0c01	a9 01		               lda  #%00000001
.0c03	8d 81 0e	               sta  js_2events
.0c06	ad 77 0e	               lda  js_2pixx
.0c09	8d 7e 0e	               sta  js_2clickx
.0c0c	ad 78 0e	               lda  js_2pixx+1
.0c0f	8d 7f 0e	               sta  js_2clickx+1
.0c12	ad 79 0e	               lda  js_2pixy
.0c15	8d 80 0e	               sta  js_2clicky
.0c18	ad e3 0e	               lda  js_2val16a+1
.0c1b	49 40		               eor  #%01000000
.0c1d	8d e3 0e	               sta  js_2val16a+1
.0c20			port2_out
.0c20	20 7f 0c	               jsr  js_2correct
.0c23	a9 00		               lda  #0
.0c25	8d 7d 0e	               sta  js_2flag
.0c28	20 a1 c0	out            jsr  popreg         ; Récupère tous les registres.
.0c2b			js_corrector
.0c2b	08		               php
.0c2c	48		               pha
.0c2d	ad 72 0e	               lda  js_1flag
.0c30	f0 08		               beq  check2
.0c32	20 4a 0c	               jsr  js_1correct
.0c35	a9 00		               lda  #0
.0c37	8d 72 0e	               sta  js_1flag
.0c3a	ad 7d 0e	check2         lda  js_2flag
.0c3d	f0 08		               beq  no_update
.0c3f	20 7f 0c	               jsr  js_2correct
.0c42	a9 00		               lda  #0
.0c44	8d 7d 0e	               sta  js_2flag
.0c47	68		no_update      pla
.0c48	28		               plp
.0c49	60		               rts
.0c4a			js_1correct
.0c4a	08		               php
.0c4b	48		               pha
.0c4c	ad 6c 0e	               lda  js_1pixx
.0c4f	8d 7d 0c	               sta  vallsb
.0c52	ad 6d 0e	               lda  js_1pixx+1
.0c55	6a		               ror                 ; ex = %0000000100000001 = 257 pixel
.0c56	6e 7d 0c	               ror  vallsb         ; Cnnnnnnn      On divise par 8 pc les
.0c59	4e 7d 0c	               lsr  vallsb         ; 0Cnnnnnn      caracteres de 8 pixels
.0c5c	4e 7d 0c	               lsr  vallsb         ; 00Cnnnnn
.0c5f	ad 7d 0c	               lda  vallsb         ; devient = %00100000 = 32
.0c62	8d 6f 0e	               sta  js_1x
.0c65	ad 6e 0e	               lda  js_1pixy
.0c68	8d 7d 0c	               sta  vallsb
.0c6b	4e 7d 0c	               lsr  vallsb         ; Cnnnnnnn     On divise par 8 pc les
.0c6e	4e 7d 0c	               lsr  vallsb         ; 0Cnnnnnn     caracteres de 8 pixels
.0c71	4e 7d 0c	               lsr  vallsb         ; 00Cnnnnn
.0c74	ad 7d 0c	               lda  vallsb         ; devient = %00100000 = 32
.0c77	8d 70 0e	               sta  js_1y
.0c7a	68		               pla
.0c7b	28		               plp
.0c7c	60		               rts
>0c7d	00		vallsb          .byte     0
>0c7e	00		regx            .byte     0
.0c7f			js_2correct
.0c7f	08		               php
.0c80	48		               pha
.0c81	ad 77 0e	               lda  js_2pixx
.0c84	8d b2 0c	               sta  vallsb
.0c87	ad 78 0e	               lda  js_2pixx+1
.0c8a	6a		               ror                 ; ex = %0000000100000001 = 257 pixel
.0c8b	6e b2 0c	               ror  vallsb         ; Cnnnnnnn     On divise par 8 pc les
.0c8e	4e b2 0c	               lsr  vallsb         ; 0Cnnnnnn     caracteres de 8 pixels
.0c91	4e b2 0c	               lsr  vallsb         ; 00Cnnnnn
.0c94	ad b2 0c	               lda  vallsb         ; devient = %00100000 = 32
.0c97	8d 7a 0e	               sta  js_2x
.0c9a	ad 79 0e	               lda  js_2pixy
.0c9d	8d b2 0c	               sta  vallsb
.0ca0	4e b2 0c	               lsr  vallsb         ; Cnnnnnnn     On divise par 8 pc les
.0ca3	4e b2 0c	               lsr  vallsb         ; 0Cnnnnnn     caracteres de 8 pixels
.0ca6	4e b2 0c	               lsr  vallsb         ; 00Cnnnnn
.0ca9	ad b2 0c	               lda  vallsb         ; devient = %00100000 = 32
.0cac	8d 7b 0e	               sta  js_2y
.0caf	68		               pla
.0cb0	28		               plp
.0cb1	60		               rts
>0cb2	00		vallsb          .byte     0
>0cb3	00		regx            .byte     0
.0cb4			js_showvals
.0cb4	20 44 0d	               jsr  js_2showvals
.0cb7	60		               rts
.0cb8			js_1showvals
.0cb8	20 72 c0	               jsr  pushreg        ; Sauvegarde tous les registres.
.0cbb	ad 6f 0e	               lda  js_1x
.0cbe	20 92 c2	               jsr  atohex
.0cc1	ad 30 c2	               lda  a2hexstr+1
.0cc4	8d 95 0e	               sta  js_1val8+19
.0cc7	ad 31 c2	               lda  a2hexstr+2
.0cca	8d 96 0e	               sta  js_1val8+20
.0ccd	ad 6c 0e	               lda  js_1pixx
.0cd0	20 92 c2	               jsr  atohex
.0cd3	ad 30 c2	               lda  a2hexstr+1
.0cd6	8d b4 0e	               sta  js_1val16+14
.0cd9	ad 31 c2	               lda  a2hexstr+2
.0cdc	8d b5 0e	               sta  js_1val16+15
.0cdf	ad 6d 0e	               lda  js_1pixx+1
.0ce2	20 92 c2	               jsr  atohex
.0ce5	ad 30 c2	               lda  a2hexstr+1
.0ce8	8d b2 0e	               sta  js_1val16+12
.0ceb	ad 31 c2	               lda  a2hexstr+2
.0cee	8d b3 0e	               sta  js_1val16+13
.0cf1	ad 70 0e	               lda  js_1y
.0cf4	20 92 c2	               jsr  atohex
.0cf7	ad 30 c2	               lda  a2hexstr+1
.0cfa	8d 99 0e	               sta  js_1val8+23
.0cfd	ad 31 c2	               lda  a2hexstr+2
.0d00	8d 9a 0e	               sta  js_1val8+24
.0d03	ad 6e 0e	               lda  js_1pixy
.0d06	20 92 c2	               jsr  atohex
.0d09	ad 30 c2	               lda  a2hexstr+1
.0d0c	8d ba 0e	               sta  js_1val16+20
.0d0f	ad 31 c2	               lda  a2hexstr+2
.0d12	8d bb 0e	               sta  js_1val16+21
.0d15	a9 00		               lda  #0
.0d17	20 92 c2	               jsr  atohex
.0d1a	ad 30 c2	               lda  a2hexstr+1
.0d1d	8d b8 0e	               sta  js_1val16+18
.0d20	ad 31 c2	               lda  a2hexstr+2
.0d23	8d b9 0e	               sta  js_1val16+19
.0d26	ad 71 0e	               lda  js_1fire
.0d29	20 92 c2	               jsr  atohex
.0d2c	ad 31 c2	               lda  a2hexstr+2
.0d2f	8d a3 0e	               sta  js_1val8+33
.0d32	a2 82		               ldx  #<js_1val8
.0d34	a0 0e		               ldy  #>js_1val8
.0d36	20 0f 15	               jsr  putscxy
.0d39	a2 a6		               ldx  #<js_1val16
.0d3b	a0 0e		               ldy  #>js_1val16
.0d3d	20 0f 15	               jsr  putscxy
.0d40	20 a1 c0	out            jsr  popreg         ; Récupère tous les registres.
.0d43	60		               rts
.0d44			js_2showvals
.0d44	20 72 c0	               jsr  pushreg        ; Sauvegarde tous les registres.
.0d47	ad 7a 0e	               lda  js_2x
.0d4a	20 92 c2	               jsr  atohex
.0d4d	ad 2f c2	               lda  a2hexstr
.0d50	8d d1 0e	               sta  js_2val8+19
.0d53	ad 30 c2	               lda  a2hexstr+1
.0d56	8d d2 0e	               sta  js_2val8+20
.0d59	ad 7e 0e	               lda  js_2clickx
.0d5c	20 92 c2	               jsr  atohex
.0d5f	ad 2f c2	               lda  a2hexstr
.0d62	8d ff 0e	               sta  js_2val16+14
.0d65	ad 30 c2	               lda  a2hexstr+1
.0d68	8d 00 0f	               sta  js_2val16+15
.0d6b	ad 7f 0e	               lda  js_2clickx+1
.0d6e	20 92 c2	               jsr  atohex
.0d71	ad 2f c2	               lda  a2hexstr
.0d74	8d fd 0e	               sta  js_2val16+12
.0d77	ad 30 c2	               lda  a2hexstr+1
.0d7a	8d fe 0e	               sta  js_2val16+13
.0d7d	ad 7b 0e	               lda  js_2y
.0d80	20 92 c2	               jsr  atohex
.0d83	ad 2f c2	               lda  a2hexstr
.0d86	8d d5 0e	               sta  js_2val8+23
.0d89	ad 30 c2	               lda  a2hexstr+1
.0d8c	8d d6 0e	               sta  js_2val8+24
.0d8f	ad 80 0e	               lda  js_2clicky
.0d92	20 92 c2	               jsr  atohex
.0d95	ad 2f c2	               lda  a2hexstr
.0d98	8d 05 0f	               sta  js_2val16+20
.0d9b	ad 30 c2	               lda  a2hexstr+1
.0d9e	8d 06 0f	               sta  js_2val16+21
.0da1	a9 00		               lda  #0
.0da3	20 92 c2	               jsr  atohex
.0da6	ad 2f c2	               lda  a2hexstr
.0da9	8d 03 0f	               sta  js_2val16+18
.0dac	ad 30 c2	               lda  a2hexstr+1
.0daf	8d 04 0f	               sta  js_2val16+19
.0db2	ad 7c 0e	               lda  js_2fire
.0db5	20 92 c2	               jsr  atohex
.0db8	ad 30 c2	               lda  a2hexstr+1
.0dbb	8d df 0e	               sta  js_2val8+33
.0dbe	a2 be		               ldx  #<js_2val8
.0dc0	a0 0e		               ldy  #>js_2val8
.0dc2	20 0f 15	               jsr  putscxy
.0dc5	a2 e2		               ldx  #<js_2val16a
.0dc7	a0 0e		               ldy  #>js_2val16a
.0dc9	20 0f 15	               jsr  putscxy
.0dcc	a2 f1		               ldx  #<js_2val16
.0dce	a0 0e		               ldy  #>js_2val16
.0dd0	20 0f 15	               jsr  putscxy
.0dd3	20 a1 c0	out            jsr  popreg         ; Récupère tous les registres.
.0dd6	60		               rts
.0dd7			js_updatecurs
.0dd7	20 72 c0	               jsr  pushreg        ; Sauvegarde tous les registres.
.0dda	ad 7a 0e	running        lda  js_2x
.0ddd	cd 66 0e	               cmp  js_x
.0de0	f0 06		               beq     chky
.0de2	8d 66 0e	               sta  js_x
.0de5	ee 39 0e	               inc     flag
.0de8	ad 7b 0e	chky           lda  js_2y
.0deb	cd 67 0e	               cmp  js_y
.0dee	f0 06		               beq     chkflag
.0df0	8d 67 0e	               sta  js_y
.0df3	ee 39 0e	               inc     flag
.0df6	ad 39 0e	chkflag        lda  flag
.0df9	f0 1e		               beq     showit
.0dfb	ae 68 0e	               ldx  js_oldx
.0dfe	ac 69 0e	               ldy  js_oldy
.0e01	20 3a 0e	               jsr  js_eoraddrxy
.0e04	ae 66 0e	               ldx  js_x
.0e07	ac 67 0e	               ldy  js_y
.0e0a	20 3a 0e	               jsr  js_eoraddrxy
.0e0d	ad 66 0e	               lda  js_x
.0e10	8d 68 0e	               sta  js_oldx
.0e13	ad 67 0e	               lda  js_y
.0e16	8d 69 0e	               sta  js_oldy
.0e19	a9 00		showit         lda  #0
.0e1b	8d 39 0e	               sta  flag
.0e1e	8d 1e c2	               sta  addr1
.0e21	a9 04		               lda  #$04
.0e23	8d 1f c2	               sta  addr1+1
.0e26	ae 66 0e	               ldx  js_x
.0e29	ac 67 0e	               ldy  js_y
.0e2c	20 cf c1	               jsr  xy2addr
.0e2f	ac 20 c2	               ldy  addr2
.0e32	ae 21 c2	               ldx  addr2+1
.0e35	20 a1 c0	out            jsr  popreg         ; Récupère tous les registres.
.0e38	60		               rts
>0e39	00		flag            .byte   0
.0e3a			js_eoraddrxy
.0e3a	20 04 c0	               jsr  pushall
.0e3d	20 b1 c1	               jsr  savezp2
.0e40	a9 04		               lda  #$04
.0e42	8d 1f c2	               sta  addr1+1
.0e45	a9 00		               lda  #0
.0e47	8d 1e c2	               sta  addr1
.0e4a	20 cf c1	               jsr  xy2addr
.0e4d	ac 20 c2	               ldy  addr2
.0e50	84 fd		               sty  zpage2
.0e52	ae 21 c2	               ldx  addr2+1
.0e55	86 fe		               stx  zpage2+1
.0e57	a0 00		               ldy  #0
.0e59	b1 fd		               lda  (zpage2),y
.0e5b	49 40		               eor     #%01000000
.0e5d	91 fd		               sta  (zpage2),y
.0e5f	20 c0 c1	               jsr  restzp2
.0e62	20 3f c0	               jsr  popall
.0e65	60		               rts
>0e66	00		js_x           .byte   0
>0e67	00		js_y           .byte   0
>0e68	ff		js_oldx        .byte   $ff
>0e69	ff		js_oldy        .byte   $ff
>0e6a	00		js_oldcar      .byte   0
>0e6b	00		js_oldcol      .byte   0
>0e6c	00 00		js_1pixx       .word   0
>0e6e	00		js_1pixy       .byte   0
>0e6f	00		js_1x          .byte   0
>0e70	00		js_1y          .byte   0
>0e71	00		js_1fire       .byte   0
>0e72	00		js_1flag       .byte   0
>0e73	00 00		js_1clickx     .word   0
>0e75	00		js_1clicky     .byte   0
>0e76	00		js_1events     .byte   0
>0e77	00 00		js_2pixx       .word   0
>0e79	00		js_2pixy       .byte   0
>0e7a	00		js_2x          .byte   0
>0e7b	00		js_2y          .byte   0
>0e7c	00		js_2fire       .byte   0
>0e7d	00		js_2flag       .byte   0
>0e7e	00 00		js_2clickx     .word   0
>0e80	00		js_2clicky     .byte   0
>0e81	00		js_2events     .byte   0
=$03			js_txtcol      =       vcyan
=$00			js_txtbak      =       bkcol0
>0e82	03 00 04 05	js_1val8       .byte     js_txtcol,js_txtbak,4,5
>0e86	50 0f 12 14	               .null     "Port 1 (x,y):($00,$00) Fire:(0)"
>0e8a	20 31 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>0e9a	30 29 20 46 09 12 05 3a 28 30 29 00
>0ea6	03 00 0b 07	js_1val16      .byte     js_txtcol,js_txtbak,11,7
>0eaa	28 18 2c 19	               .null     "(x,y):($0000,$0000)"
>0eae	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29 00
>0ebe	03 00 04 0a	js_2val8       .byte     js_txtcol,js_txtbak,4,10
>0ec2	43 01 12 50	               .null     "CarPos (x,y):($00,$00) Fire:(0)"
>0ec6	0f 13 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>0ed6	30 29 20 46 09 12 05 3a 28 30 29 00
>0ee2	01 00 04 0c	js_2val16a     .byte     vblanc,js_txtbak,4,12
>0ee6	43 0c 09 03	               .null     "Click pos."
>0eea	0b 20 10 0f 13 2e 00
>0ef1	03 00 10 0c	js_2val16      .byte     js_txtcol,js_txtbak,16,12
>0ef5	28 18 2c 19	               .null     "(x,y):($0000,$0000)"
>0ef9	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29 00
>0f09	00		js_1status     .byte 0
>0f0a	00		js_2status     .byte 0

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-spriteman-mc.asm

.0f0b			sprt_init
.0f0b	20 04 c0	               jsr  pushall
.0f0e	ac 31 13	               ldy  sprt_ptr6+1
.0f11	ae 30 13	               ldx  sprt_ptr6
.0f14	ad 66 0f	               lda  sprt_ptr
.0f17	20 48 10	               jsr  sprt_loadptr
.0f1a	20 93 c1	               jsr  savezp1
.0f1d	20 b1 c1	               jsr  savezp2
.0f20	ad 15 d0	               lda  vic+$15 ; enable sprite 2
.0f23	09 04		               ora  #%00000100
.0f25	8d 15 d0	               sta  vic+$15
.0f28	a9 0d		               lda  #$0d
.0f2a	8d fa 07	               sta  $7fa
.0f2d	ad 24 13	               lda  sprt_ptr0
.0f30	85 fb		               sta  zpage1
.0f32	ad 25 13	               lda  sprt_ptr0+1
.0f35	85 fc		               sta  zpage1+1
.0f37	a9 40		               lda  #$40
.0f39	85 fd		               sta  zpage2
.0f3b	a9 03		               lda  #$03
.0f3d	85 fe		               sta  zpage2+1
.0f3f	a0 41		               ldy  #65
.0f41	b1 fb		               lda  (zpage1),y      ; sprite y offset
.0f43	8d 8b 10	               sta  sprt_yoffset
.0f46	88		               dey
.0f47	b1 fb		               lda  (zpage1),y      ; sprite x offset
.0f49	8d 8a 10	               sta  sprt_xoffset
.0f4c	88		               dey
.0f4d	b1 fb		               lda  (zpage1),y      ; sprite color
.0f4f	8d 29 d0	               sta  $d029
.0f52	88		               dey
.0f53	a0 3e		               ldy  #62
.0f55	b1 fb		nextbyte       lda  (zpage1),y
.0f57	91 fd		               sta  (zpage2),y
.0f59	88		               dey
.0f5a	d0 f9		               bne  nextbyte
.0f5c	20 a2 c1	               jsr  restzp1
.0f5f	20 c0 c1	               jsr  restzp2
.0f62	20 3f c0	               jsr  popall
.0f65	60		               rts
>0f66	01		sprt_ptr       .byte   $01
.0f67			sprt_calcpos
.0f67	20 72 c0	               jsr  pushreg
.0f6a	a9 00		               lda  #0
.0f6c	8d 8d 10	               sta  sprt_x+1
.0f6f	8d 8f 10	               sta  sprt_y+1
.0f72	ad 78 0e	               lda  js_2pixx+1
.0f75	18		               clc
.0f76	2a		               rol
.0f77	2a		               rol
.0f78	8d 8d 10	               sta  sprt_x+1
.0f7b	ad 77 0e	               lda  js_2pixx
.0f7e	18		               clc
.0f7f	6d 8a 10	               adc  sprt_xoffset
.0f82	8d 8c 10	               sta  sprt_x
.0f85	90 08		               bcc  norepx
.0f87	ad 8d 10	               lda  sprt_x+1
.0f8a	09 04		               ora  #$04
.0f8c	8d 8d 10	               sta  sprt_x+1
.0f8f	ad 79 0e	norepx         lda  js_2pixy
.0f92	18		               clc
.0f93	6d 8b 10	               adc  sprt_yoffset
.0f96	8d 8e 10	               sta  sprt_y
.0f99	20 a1 c0	               jsr  popreg
.0f9c	60		               rts
.0f9d			sprt_move
.0f9d	20 72 c0	               jsr  pushreg
.0fa0	20 67 0f	               jsr  sprt_calcpos
.0fa3	ad 8c 10	               lda  sprt_x
.0fa6	8d 04 d0	               sta  vic+$04
.0fa9	ad 8d 10	               lda  sprt_x+1
.0fac	8d 10 d0	               sta  vic+$10
.0faf	ad 8e 10	               lda  sprt_y
.0fb2	8d 05 d0	               sta  vic+$05
.0fb5	20 bc 0f	               jsr  sprt_showpos
.0fb8	20 a1 c0	               jsr  popreg
.0fbb	60		               rts
.0fbc			sprt_showpos
.0fbc	20 04 c0	               jsr  push
.0fbf	ad 8c 10	               lda  sprt_x
.0fc2	20 92 c2	               jsr  atohex
.0fc5	ad 2f c2	               lda  a2hexstr
.0fc8	8d 53 13	               sta  sprite_pos+26
.0fcb	ad 30 c2	               lda  a2hexstr+1
.0fce	8d 54 13	               sta  sprite_pos+27
.0fd1	ad 8d 10	               lda  sprt_x+1
.0fd4	20 92 c2	               jsr  atohex
.0fd7	ad 2f c2	               lda  a2hexstr
.0fda	8d 51 13	               sta  sprite_pos+24
.0fdd	ad 30 c2	               lda  a2hexstr+1
.0fe0	8d 52 13	               sta  sprite_pos+25
.0fe3	ad 8e 10	               lda  sprt_y
.0fe6	20 92 c2	               jsr  atohex
.0fe9	ad 2f c2	               lda  a2hexstr
.0fec	8d 59 13	               sta  sprite_pos+32
.0fef	ad 30 c2	               lda  a2hexstr+1
.0ff2	8d 5a 13	               sta  sprite_pos+33
.0ff5	a9 00		               lda  #0
.0ff7	20 92 c2	               jsr  atohex
.0ffa	ad 2f c2	               lda  a2hexstr
.0ffd	8d 57 13	               sta  sprite_pos+30
.1000	ad 30 c2	               lda  a2hexstr+1
.1003	8d 58 13	               sta  sprite_pos+31
.1006	a2 39		               ldx  #<sprite_pos
.1008	a0 13		               ldy  #>sprite_pos
.100a	20 0f 15	               jsr  putscxy
.100d	20 3f c0	               jsr  pop
.1010	60		               rts
.1011			sprt_loadptr2
.1011	20 04 c0	               jsr  push
.1014	aa		               tax
.1015	8e 66 0f	               stx  sprt_ptr
.1018	ad 25 13	               lda  sprt_ptr0+1
.101b	8d 47 10	               sta  calcbuff+1
.101e	ad 24 13	               lda  sprt_ptr0
.1021	8d 46 10	               sta  calcbuff
.1024	e0 00		               cpx  #0
.1026	f0 11		               beq  addrok
.1028	ad 46 10	               lda  calcbuff
.102b	18		nextx          clc
.102c	69 42		               adc  #66
.102e	90 03		               bcc  nocarry
.1030	ee 47 10	               inc  calcbuff+1
.1033	8d 46 10	nocarry        sta  calcbuff
.1036	ca		               dex
.1037	d0 f2		               bne  nextx
.1039	ac 47 10	addrok         ldy  calcbuff+1
.103c	ae 46 10	               ldx  calcbuff
.103f	20 62 10	               jsr  sprt_setimage
.1042	20 3f c0	               jsr  pop
.1045	60		               rts
>1046	00 00		calcbuff        .word   $0
.1048			sprt_loadptr
.1048	20 04 c0	               jsr  push
.104b	ad 66 0f	               lda  sprt_ptr
.104e	18		               clc
.104f	2a		               rol
.1050	a8		               tay
.1051	b9 24 13	               lda  sprt_ptr0,y
.1054	aa		               tax
.1055	b9 25 13	               lda  sprt_ptr0+1,y
.1058	a8		               tay
.1059	20 62 10	               jsr  sprt_setimage
.105c	20 3f c0	               jsr  pop
.105f	60		               rts
>1060	00 00		calcbuff        .word   $0
.1062			sprt_setimage
.1062	20 04 c0	               jsr  push
.1065	20 93 c1	               jsr  savezp1
.1068	20 b1 c1	               jsr  savezp2
.106b	84 fc		               sty  zpage1+1
.106d	86 fb		               stx  zpage1
.106f	a0 10		               ldy  #>sprt_image
.1071	84 fe		               sty  zpage2+1
.1073	a0 90		               ldy  #<sprt_image
.1075	84 fd		               sty  zpage2
.1077	a0 42		               ldy  #66
.1079	b1 fb		nextbyte       lda  (zpage1),y
.107b	91 fd		               sta  (zpage2),y
.107d	88		               dey
.107e	d0 f9		               bne  nextbyte
.1080	20 c0 c1	               jsr  restzp2
.1083	20 a2 c1	               jsr  restzp1
.1086	20 3f c0	               jsr  pop
.1089	60		               rts
>108a	00		sprt_xoffset   .byte     $00
>108b	00		sprt_yoffset   .byte     $00
>108c	00 00		sprt_x         .word     $0000
>108e	00 00		sprt_y         .word     $0000
>1090			sprt_image      .fill    66
>10d2	00 00 00 00	sprt_crxair    .byte     $00, $00, $00, $00, $00, $00 ; 6
>10d6	00 00
>10d8	00 66 00 00	               .byte     $00, $66, $00, $00, $3c, $00 ; 12
>10dc	3c 00
>10de	00 18 00 00	               .byte     $00, $18, $00, $00, $00, $00 ; 18
>10e2	00 00
>10e4	00 00 00 00	               .byte     $00, $00, $00, $00, $18, $00 ; 24
>10e8	18 00
>10ea	80 00 01 c0	               .byte     $80, $00, $01, $c0, $18, $03 ; 30
>10ee	18 03
>10f0	66 66 66 c0	               .byte     $66, $66, $66, $c0, $18, $03 ; 36
>10f4	18 03
>10f6	80 00 01 00	               .byte     $80, $00, $01, $00, $18, $00 ; 42
>10fa	18 00
>10fc	00 00 00 00	               .byte     $00, $00, $00, $00, $00, $00 ; 48
>1100	00 00
>1102	00 18 00 00	               .byte     $00, $18, $00, $00, $3c, $00 ; 54
>1106	3c 00
>1108	00 66 00 00	               .byte     $00, $66, $00, $00, $00, $00 ; 60
>110c	00 00
>110e	00 00 00 01	               .byte     $00, $00, $00, $01, $0c, $28 ; 66,
>1112	0c 28
>1114	80 00 00 e0	sprt_mouse     .byte     $80, $00, $00, $e0, $00, $00 ; 6
>1118	00 00
>111a	b8 00 00 ce	               .byte     $b8, $00, $00, $ce, $00, $00 ; 12
>111e	00 00
>1120	83 80 00 c0	               .byte     $83, $80, $00, $c0, $e0, $00 ; 18
>1124	e0 00
>1126	80 18 00 c0	               .byte     $80, $18, $00, $c0, $3c, $00 ; 24
>112a	3c 00
>112c	80 e0 00 c0	               .byte     $80, $e0, $00, $c0, $60, $00 ; 30
>1130	60 00
>1132	98 30 00 fc	               .byte     $98, $30, $00, $fc, $18, $00 ; 36
>1136	18 00
>1138	c6 0c 00 03	               .byte     $c6, $0c, $00, $03, $06, $00 ; 42
>113c	06 00
>113e	01 9c 00 00	               .byte     $01, $9c, $00, $00, $f0, $00 ; 48
>1142	f0 00
>1144	00 40 00 00	               .byte     $00, $40, $00, $00, $00, $00 ; 54
>1148	00 00
>114a	00 00 00 00	               .byte     $00, $00, $00, $00, $00, $00 ; 60
>114e	00 00
>1150	00 00 00 01	               .byte     $00, $00, $00, $01, $18, $31 ; 66
>1154	18 31
>1156	00 7c 00 01	sprt_pointer   .byte     $00, $7c, $00, $01, $83, $00 ; 6
>115a	83 00
>115c	06 10 c0 08	               .byte     $06, $10, $c0, $08, $00, $30 ; 12
>1160	00 30
>1162	12 10 88 20	               .byte     $12, $10, $88, $20, $00, $08 ; 18
>1166	00 08
>1168	40 ba 04 40	               .byte     $40, $ba, $04, $40, $6c, $04 ; 24
>116c	6c 04
>116e	80 c6 02 aa	               .byte     $80, $c6, $02, $aa, $82, $aa ; 30
>1172	82 aa
>1174	80 c6 02 40	               .byte     $80, $c6, $02, $40, $6c, $04 ; 36
>1178	6c 04
>117a	40 ba 04 20	               .byte     $40, $ba, $04, $20, $00, $08 ; 42
>117e	00 08
>1180	12 10 90 08	               .byte     $12, $10, $90, $08, $00, $20 ; 48
>1184	00 20
>1186	06 10 c0 01	               .byte     $06, $10, $c0, $01, $83, $00 ; 54
>118a	83 00
>118c	00 7c 00 00	               .byte     $00, $7c, $00, $00, $00, $00 ; 60
>1190	00 00
>1192	00 00 00 01	               .byte     $00, $00, $00, $01, $0c, $28 ; 66
>1196	0c 28
>1198	55 55 55 aa	sprt_pointer2  .byte     $55, $55, $55, $aa, $aa, $aa ; 6
>119c	aa aa
>119e	55 55 55 aa	               .byte     $55, $55, $55, $aa, $aa, $aa ; 12
>11a2	aa aa
>11a4	55 55 55 aa	               .byte     $55, $55, $55, $aa, $aa, $aa ; 18
>11a8	aa aa
>11aa	54 00 55 aa	               .byte     $54, $00, $55, $aa, $00, $2a ; 24
>11ae	00 2a
>11b0	54 00 55 aa	               .byte     $54, $00, $55, $aa, $00, $2a ; 30
>11b4	00 2a
>11b6	54 00 55 aa	               .byte     $54, $00, $55, $aa, $00, $2a ; 36
>11ba	00 2a
>11bc	54 00 55 aa	               .byte     $54, $00, $55, $aa, $00, $2a ; 42
>11c0	00 2a
>11c2	54 00 55 aa	               .byte     $54, $00, $55, $aa, $aa, $aa ; 48
>11c6	aa aa
>11c8	55 55 55 aa	               .byte     $55, $55, $55, $aa, $aa, $aa ; 54
>11cc	aa aa
>11ce	55 55 55 aa	               .byte     $55, $55, $55, $aa, $aa, $aa ; 60
>11d2	aa aa
>11d4	55 55 55 01	               .byte     $55, $55, $55, $01, $0c, $28 ; 66
>11d8	0c 28
>11da	06 00 00 0f	sprt_hand      .byte     $06, $00, $00, $0f, $00, $00 ; 6
>11de	00 00
>11e0	19 80 00 10	               .byte     $19, $80, $00, $10, $80, $00 ; 12
>11e4	80 00
>11e6	19 80 00 16	               .byte     $19, $80, $00, $16, $b1, $8c ; 18
>11ea	b1 8c
>11ec	10 ca 52 10	               .byte     $10, $ca, $52, $10, $84, $21 ; 24
>11f0	84 21
>11f2	10 84 21 30	               .byte     $10, $84, $21, $30, $84, $21 ; 30
>11f6	84 21
>11f8	50 84 21 90	               .byte     $50, $84, $21, $90, $84, $21 ; 36
>11fc	84 21
>11fe	90 00 01 90	               .byte     $90, $00, $01, $90, $00, $01 ; 42
>1202	00 01
>1204	90 7f c1 90	               .byte     $90, $7f, $c1, $90, $00, $01 ; 48
>1208	00 01
>120a	40 ff e2 40	               .byte     $40, $ff, $e2, $40, $00, $02 ; 54
>120e	00 02
>1210	3c 00 04 02	               .byte     $3c, $00, $04, $02, $00, $08 ; 60
>1214	00 08
>1216	03 ff f8 01	               .byte     $03, $ff, $f8, $01, $12, $31 ; 66
>121a	12 31
>121c	00 3e 00 01	sprt_ultraman  .byte     $00, $3e, $00, $01, $c1, $c0 ; 6
>1220	c1 c0
>1222	0e 3e 30 08	               .byte     $0e, $3e, $30, $08, $41, $08 ; 12
>1226	41 08
>1228	10 1c 04 10	               .byte     $10, $1c, $04, $10, $22, $04 ; 18
>122c	22 04
>122e	24 1c 12 23	               .byte     $24, $1c, $12, $23, $00, $62 ; 24
>1232	00 62
>1234	20 08 02 47	               .byte     $20, $08, $02, $47, $c1, $f1 ; 30
>1238	c1 f1
>123a	6a aa ab 47	               .byte     $6a, $aa, $ab, $47, $c9, $f1 ; 36
>123e	c9 f1
>1240	20 08 02 20	               .byte     $20, $08, $02, $20, $14, $02 ; 42
>1244	14 02
>1246	20 00 02 10	               .byte     $20, $00, $02, $10, $00, $04 ; 48
>124a	00 04
>124c	10 7f 04 08	               .byte     $10, $7f, $04, $08, $00, $08 ; 54
>1250	00 08
>1252	06 3e 30 01	               .byte     $06, $3e, $30, $01, $c1, $c0 ; 60
>1256	c1 c0
>1258	00 3e 00 01	               .byte     $00, $3e, $00, $01, $0c, $28 ; 66
>125c	0c 28
>125e	00 1c 00 00	sprt_male      .byte     $00, $1c, $00, $00, $3e, $00 ; 6
>1262	3e 00
>1264	00 3e 00 00	               .byte     $00, $3e, $00, $00, $3e, $00 ; 12
>1268	3e 00
>126a	00 1c 00 00	               .byte     $00, $1c, $00, $00, $08, $00 ; 18
>126e	08 00
>1270	00 ff 80 00	               .byte     $00, $ff, $80, $00, $ff, $80 ; 24
>1274	ff 80
>1276	00 be 80 00	               .byte     $00, $be, $80, $00, $9c, $80 ; 30
>127a	9c 80
>127c	00 88 80 00	               .byte     $00, $88, $80, $00, $be, $80 ; 36
>1280	be 80
>1282	00 be 80 01	               .byte     $00, $be, $80, $01, $9c, $c0 ; 42
>1286	9c c0
>1288	01 94 c0 00	               .byte     $01, $94, $c0, $00, $14, $00 ; 48
>128c	14 00
>128e	00 14 00 00	               .byte     $00, $14, $00, $00, $14, $00 ; 54
>1292	14 00
>1294	00 36 00 00	               .byte     $00, $36, $00, $00, $77, $00 ; 60
>1298	77 00
>129a	00 77 00 01	               .byte     $00, $77 ,$00, $01, $0c, $2f ; 66
>129e	0c 2f
>12a0	00 3c 00 00	sprt_robot     .byte     $00, $3c, $00, $00, $24, $00 ; 6
>12a4	24 00
>12a6	00 66 18 00	               .byte     $00, $66, $18, $00, $66, $38 ; 12
>12aa	66 38
>12ac	00 24 38 00	               .byte     $00, $24, $38, $00, $3c, $10 ; 18
>12b0	3c 10
>12b2	00 18 10 00	               .byte     $00, $18, $10, $00, $18, $10 ; 24
>12b6	18 10
>12b8	0f ff f0 08	               .byte     $0f, $ff, $f0, $08, $7e, $00 ; 30
>12bc	7e 00
>12be	08 7e 00 08	               .byte     $08, $7e, $00, $08, $18, $00 ; 36
>12c2	18 00
>12c4	1c 18 00 1c	               .byte     $1c, $18, $00, $1c, $18, $00 ; 42
>12c8	18 00
>12ca	18 3c 00 00	               .byte     $18, $3c, $00, $00, $3c, $00 ; 48
>12ce	3c 00
>12d0	00 24 00 00	               .byte     $00, $24, $00, $00, $24, $00 ; 54
>12d4	24 00
>12d6	00 24 00 03	               .byte     $00, $24, $00, $03, $e7, $c0 ; 60
>12da	e7 c0
>12dc	03 e7 c0 01	               .byte     $03, $e7, $c0, $01, $0c, $28 ; 66
>12e0	0c 28
>12e2	00 1c 00 00	sprt_femme     .byte     $00, $1c, $00, $00, $3e, $00 ; 6
>12e6	3e 00
>12e8	00 3e 00 00	               .byte     $00, $3e, $00, $00, $3e, $00 ; 12
>12ec	3e 00
>12ee	00 1c 00 00	               .byte     $00, $1c, $00, $00, $08, $00 ; 18
>12f2	08 00
>12f4	00 7f 00 00	               .byte     $00, $7f, $00, $00, $ff, $80 ; 24
>12f8	ff 80
>12fa	00 be 80 00	               .byte     $00, $be, $80, $00, $9c, $80 ; 30
>12fe	9c 80
>1300	00 88 80 00	               .byte     $00, $88, $80, $00, $9c, $80 ; 36
>1304	9c 80
>1306	00 be 80 01	               .byte     $00, $be, $80, $01, $be, $c0 ; 42
>130a	be c0
>130c	01 be c0 00	               .byte     $01, $be, $c0, $00, $7f, $00 ; 48
>1310	7f 00
>1312	00 7f 00 00	               .byte     $00, $7f, $00, $00, $ff, $80 ; 54
>1316	ff 80
>1318	00 36 00 00	               .byte     $00, $36, $00, $00, $77, $00 ; 60
>131c	77 00
>131e	00 55 00 01	               .byte     $00, $55 ,$00, $01, $0c, $2f ; 66
>1322	0c 2f
>1324	90 10		sprt_ptr0      .word     sprt_image + (0*66)
>1326	d2 10		sprt_ptr1      .word     sprt_image + (1*66)
>1328	14 11		sprt_ptr2      .word     sprt_image + (2*66)
>132a	56 11		sprt_ptr3      .word     sprt_image + (3*66)
>132c	98 11		sprt_ptr4      .word     sprt_image + (4*66)
>132e	da 11		sprt_ptr5      .word     sprt_image + (5*66)
>1330	1c 12		sprt_ptr6      .word     sprt_image + (6*66)
>1332	5e 12		sprt_ptr7      .word     sprt_image + (7*66)
>1334	a0 12		sprt_ptr8      .word     sprt_image + (8*66)
>1336	e2 12		sprt_ptr9      .word     sprt_image + (9*66)
>1338	ff		testbyte       .byte     255
=$07			sprt_txtcol    =         vjaune
=$40			sprt_txtbak    =         bkcol1
=$01			sprt_color     =         vwhite
>1339	07 40 04 0e	sprite_pos     .byte     sprt_txtcol,sprt_txtbak,4,14
>133d	53 10 12 09	               .null     "Sprite pos. (x,y):($0000,$0000)"
>1341	14 05 20 10 0f 13 2e 20 28 18 2c 19 29 3a 28 24
>1351	30 30 30 30 2c 24 30 30 30 30 29 00

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-text-mc.asm

>135d	00 00		scrptr         .word     $00            ; ... pointe position ecran, ...
>135f	00 00		colptr         .word     $00            ; ... pointe position couleur, ...
>1361	01		curcol         .byte     $01            ; ... la couleur du caractère, ...
>1362	06		brdcol         .byte     vbleu          ; ... la couleur de la bordure et
>1363	00		vicbkcol0      .byte     vnoir  ;$0b    ; 0,
>1364	02		vicbkcol1      .byte     vrouge ;$0b    ; 1,
>1365	05		vicbkcol2      .byte     vvert  ;$0b    ; 2,
>1366	06		vicbkcol3      .byte     vbleu  ;$0b    ; et 3.
>1367	00		inverse        .byte     $00
>1368	00 00 00 00	scraddr        .byte     0,0,0,0,0
>136c	00
>136d	00 00 00 00	coladdr        .byte     0,0,0,0,0
>1371	00
>1372	00		bkcol          .byte     %00000000      ; Pointeur de la couleur actuelle
>1373	00 04		virtaddr       .word     $0400          ; L'adresse de l'ecran virtuel
=$00			bkcol0         =         %00000000      ;
=$40			bkcol1         =         %01000000
=$80			bkcol2         =         %10000000
=$c0			bkcol3         =         %11000000
.1375			scrmaninit
.1375	08		               php            ; On sauvegarde les registres
.1376	48		               pha
.1377	a9 15		               lda  #%00010101; Selectionne la plage memoire video
.1379	8d 18 d0	               sta  $d018     ; et le jeu de caracteeres.
.137c	ad 16 d0	               lda  $d016     ; 53270 Lecture valeur actuelle pour ne
.137f	09 10		               ora  #%00010000; modifier que le bit 4.
.1381	29 ef		               and  #%11101111
.1383	8d 16 d0	               sta  $d016 ; 53270
.1386	ad 11 d0	               lda  $d011     ; On ne change que le bit 6 pour
.1389	09 40		               ora  #%01000000; selectionner le md. couleur de
.138b	8d 11 d0	               sta  $d011     ; 53270   ; fond etendu.
.138e	ad 63 13	               lda  vicbkcol0
.1391	8d 21 d0	               sta  $d021     ; 53281
.1394	ad 64 13	               lda  vicbkcol1
.1397	8d 22 d0	               sta  $d022     ; 53282
.139a	ad 65 13	               lda  vicbkcol2
.139d	8d 23 d0	               sta  $d023     ; 53283
.13a0	ad 66 13	               lda  vicbkcol3
.13a3	8d 24 d0	               sta  $d024     ; 54284
.13a6	a5 00		               lda  bkcol0    ; On charge et utilise la couleur de ...
.13a8	8d 72 13	               sta  bkcol     ; ... fond par defaut des caracteres.
.13ab	20 05 14	               jsr  cls       ; Finalement on efface l'ecran
.13ae	68		               pla
.13af	28		               plp
.13b0	60		               rts
.13b1			curshome
.13b1	08		               php                      ; Sauvegarde flags ...
.13b2	48		               pha                      ; ... et accumulateur
.13b3	ad 73 13	               lda  virtaddr            ; In replace le pointeur ...
.13b6	8d 5d 13	               sta  scrptr              ; ... d'écran virtuel à sa ...
.13b9	ad 74 13	               lda  virtaddr+1          ; ... position initiale.
.13bc	8d 5e 13	               sta  scrptr+1
.13bf	20 f0 13	               jsr  synccolptr          ; On synchronise le ptr couleur.
.13c2	ad 63 13	               lda  vicbkcol0
.13c5	8d 21 d0	               sta  $d021               ; On recharge les couleurs ...
.13c8	ad 64 13	               lda  vicbkcol1           ; ... de fond par defaut tel ...
.13cb	8d 22 d0	               sta  $d022               ; ... que specifie dans les ...
.13ce	ad 65 13	               lda  vicbkcol2           ; ... les variables globales.
.13d1	8d 23 d0	               sta  $d023
.13d4	ad 66 13	               lda  vicbkcol3
.13d7	8d 24 d0	               sta  $d024
.13da	68		               pla                      ; Récupère l'accumulateur ...
.13db	28		               plp                      ; ... et les flags
.13dc	60		               rts
.13dd			incscrptr
.13dd	08		               php                      ; Sauvegarde flags ...
.13de	48		               pha                      ; ... et accumulateur
.13df	ee 5d 13	               inc  scrptr              ; Incremente le pointeur
.13e2	ad 5d 13	               lda  scrptr              ; Regarde si on doit faire un ...
.13e5	d0 03		               bne  pasdereport         ; ... report dans le MSB
.13e7	ee 5e 13	               inc  scrptr+1            ; Si oui on fait le repport
.13ea	20 f0 13	pasdereport    jsr  synccolptr          ; On synchronise le ptr couleur.
.13ed	68		               pla                      ; Récupère l'accumulateur ...
.13ee	28		               plp                      ; ... et les flags
.13ef	60		               rts
.13f0			synccolptr
.13f0	08		               php                      ; Sauvegarde flags ...
.13f1	48		               pha                      ; ... et accumulateur
.13f2	ad 5d 13	               lda  scrptr              ; Récupère le LSB du scrptr ...
.13f5	8d 5f 13	               sta  colptr              ; ... pour le placer dans le colptr.
.13f8	ad 5e 13	               lda  scrptr+1            ; Récupère le mSB du scrptr, ...
.13fb	29 03		               and  #%00000011          ; ... le converti pour pointer ...
.13fd	09 d8		               ora  #%11011000          ; ... la RAM couleur ...
.13ff	8d 60 13	               sta  colptr+1            ; ... et le sauvegarde.
.1402	68		               pla                      ; Récupère l'accumulateur ...
.1403	28		               plp                      ; ... et les flags
.1404	60		               rts
.1405			cls
.1405	20 04 c0	               jsr  push                ; On sauvegarde les registres
.1408	ad 73 13	               lda  virtaddr            ; On replace le curseur d'ecran à
.140b	8d 5d 13	               sta  scrptr
.140e	ad 74 13	               lda  virtaddr+1          ; sa position initiale, ($0400).
.1411	8d 5e 13	               sta  scrptr+1
.1414	20 f0 13	               jsr  synccolptr          ; On synchronise la couleur.
.1417	20 c6 15	               jsr  scrptr2zp1          ; L'adresse actuelle dans le ZP1.
.141a	ad 62 13	               lda  brdcol              ; On place la couleur ...
.141d	8d 20 d0	               sta  vicbordcol          ; ... de la bordure.
.1420	ad 72 13	               lda  bkcol               ; Associer couleur pour ...
.1423	8d 21 d0	               sta  vicbackcol          ; ... remplir l'ecran ...
.1426	a9 20		               lda  #$20                ; ... de caracteres espace.
.1428	a2 04		               ldx  #4                  ; Quatre blocs de ...
.142a	a0 00		nextline       ldy  #0                  ; ... 256 caracteres.
.142c			nextcar
.142c	91 fb		               sta  (zpage1),y          ;
.142e	a5 fc		               lda  zpage1+1
.1430	48		               pha
.1431	29 03		               and  #%00000011
.1433	09 d8		               ora  #%11011000
.1435	85 fc		               sta  zpage1+1
.1437	a9 00		               lda  #0
.1439	91 fb		               sta  (zpage1),y
.143b	68		               pla
.143c	85 fc		               sta  zpage1+1
.143e	a9 20		               lda  #$20
.1440	88		               dey
.1441	d0 e9		               bne  nextcar
.1443	e6 fc		               inc  zpage1+1
.1445	ca		               dex
.1446	d0 e4		               bne  nextcar
.1448	a9 00		               lda  #$00
.144a	8d 5d 13	               sta  scrptr
.144d	a9 04		               lda  #$04
.144f	8d 5e 13	               sta  scrptr+1
.1452	20 f0 13	               jsr  synccolptr
.1455	20 3f c0	               jsr  pop
.1458	60		               rts
.1459			setborder
.1459	08		               php
.145a	8d 62 13	               sta  brdcol
.145d	8d 20 d0	               sta  vicbordcol
.1460	28		               plp
.1461	60		               rts
.1462			setinverse
.1462	08		               php
.1463	48		               pha
.1464	a9 80		               lda  #%10000000
.1466	8d 67 13	               sta  inverse
.1469	68		               pla
.146a	28		               plp
.146b	60		               rts
.146c			clrinverse
.146c	08		               php
.146d	48		               pha
.146e	a9 00		               lda  #%00000000
.1470	8d 67 13	               sta  inverse
.1473	68		               pla
.1474	28		               plp
.1475	60		               rts
.1476			putch
.1476	20 04 c0	               jsr  push           ; On sauvegarde les registres
.1479	20 c6 15	               jsr  scrptr2zp1     ; Place le ptr d'ecran sur zp1
.147c	29 3f		               and  #%00111111     ; Masque des bits 6 et 7 pour la ouleur.
.147e	48		               pha
.147f	ad 72 13	               lda  bkcol
.1482	29 c0		               and  #%11000000
.1484	8d 72 13	               sta  bkcol
.1487	68		               pla
.1488	0d 72 13	               ora  bkcol          ; On y ajoute la couleur du fond.
.148b	a0 00		               ldy  #$00           ; Met Y à 0
.148d	91 fb		               sta  (zpage1),y     ; Affiche le caractere
.148f	ae 60 13	               ldx  colptr+1       ; Place le MSB du ptr de couleur
.1492	86 fc		               stx  zpage1+1       ; ... dans le MSB du zp1.
.1494	ad 61 13	               lda  curcol         ; Charge la couleur voulu dans.
.1497	91 fb		               sta  (zpage1),y     ; ... la ram de couleur.
.1499	20 dd 13	               jsr  incscrptr      ; Incremente le pointeur d'ecran.
.149c	20 3f c0	               jsr  pop            ; Replace tous les registres
.149f	60		               rts
.14a0			z2putch
.14a0	20 04 c0	               jsr  push           ; On sauvegarde les registres
.14a3	a0 00		               ldy  #$0            ; Met Y à 0
.14a5	b1 fd		               lda  (zpage2),y     ; Charge le caractere
.14a7	20 76 14	               jsr  putch          ; Appel pour affichage
.14aa	20 3f c0	               jsr  pop            ; Replace tous les registres
.14ad	60		               rts
.14ae			z2puts
.14ae	20 04 c0	               jsr  push           ; On sauvegarde les registres
.14b1	a0 00		               ldy  #$0            ; Met Y à 0
.14b3	b1 fd		nextcar        lda  (zpage2),y     ; Charge le caractere
.14b5	f0 09		               beq  endstr         ; Est-ce le 0 de fin de chaine ?
.14b7	20 a0 14	               jsr  z2putch        ; Appel pour affichage
.14ba	20 77 c1	               jsr  inczp2         ; On pointe zp2 sur le prochain caractere.
.14bd	4c b3 14	               jmp  nextcar        ; On passe au prochain
.14c0	20 3f c0	endstr         jsr  pop            ; Replace tous les registres
.14c3	60		               rts
.14c4			puts
.14c4	20 04 c0	               jsr  push           ; On sauvegarde les registres
.14c7	86 fd		               stx  zpage2         ; On positionne xp2 en fonction de
.14c9	84 fe		               sty  zpage2+1       ; l'adresse reçcu dans X et Y
.14cb	20 ae 14	               jsr  z2puts         ; Appel pour affichage
.14ce	20 3f c0	               jsr  pop            ; Replace tous les registres
.14d1	60		               rts
.14d2			gotoxy
.14d2	20 04 c0	               jsr  push           ; On sauvegarde les registres
.14d5	20 b1 13	               jsr  curshome       ;  retourne le curseur virtuel a 0,0.
.14d8	c0 00		yagain         cpy  #0             ; Devons nous changer de ligne ?
.14da	f0 09		               beq  setx           ; Si non, on verifi les colonnes.
.14dc	a9 28		               lda  #40            ; Si oui on ajoute 40
.14de	20 63 15	               jsr  saddscrptr     ;  à l'adresse du pointeur virtuel autant
.14e1	88		               dey                 ;  de fois qu'il est spécifié dans y.
.14e2	4c d8 14	               jmp  yagain         ; On passe au prochain y.
.14e5	8a		setx           txa                 ; On ajoute la valeur de X
.14e6	20 63 15	               jsr  saddscrptr     ;  à l'adresse di pointeur virtuel.
.14e9	20 f0 13	               jsr  synccolptr     ; Synchro du pointeur des couleurs
.14ec	20 3f c0	               jsr  pop            ; Replace tous les registres
.14ef	60		               rts
.14f0			putsxy
.14f0	20 04 c0	               jsr  push           ; On sauvegarde les registres et le zp2
.14f3	86 fd		               stx  zpage2         ; Place l'adr de chaine dans zp2
.14f5	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.14f7	a0 00		               ldy  #0             ; On place le compteur
.14f9	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.14fb	aa		               tax                 ; de A à X
.14fc	20 77 c1	               jsr  inczp2         ; On deplace le pointeur
.14ff	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.1501	a8		               tay                 ; de A à Y
.1502	20 d2 14	               jsr  gotoxy         ; gotoxy : X=col, Y=ligne
.1505	20 77 c1	               jsr  inczp2         ; On deplace le pointeur
.1508	20 ae 14	               jsr  z2puts         ; On imprime la chaine
.150b	20 3f c0	               jsr  pop            ; Replace tous les registres
.150e	60		               rts
.150f			putscxy
.150f	20 04 c0	               jsr  pushall        ; On Sauvegarde registres et zp2
.1512	86 fd		               stx  zpage2         ; On place l'adresse de chaine dans zp2
.1514	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.1516	a0 00		               ldy  #0             ; Place le compteur
.1518	b1 fd		               lda  (zpage2),y     ; Charge la couleur
.151a	8d 61 13	               sta  curcol         ; ... et on la definie
.151d	20 77 c1	               jsr  inczp2         ; Pointe le prochain byte
.1520	b1 fd		               lda  (zpage2),y     ; Récupere et sauvegarde ...
.1522	8d 72 13	               sta  bkcol          ; ... l'index de couleur de fond
.1525	20 77 c1	               jsr  inczp2         ; Deplace le pointeur
.1528	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.152a	aa		               tax                 ; ... de A à X
.152b	20 77 c1	               jsr  inczp2         ; Deplace le pointeur
.152e	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.1530	a8		               tay                 ; de A à Y
.1531	20 d2 14	               jsr  gotoxy         ; gotoxy : X=col, y=ligne
.1534	20 77 c1	               jsr  inczp2         ; Place le ptr en début de chaine
.1537	20 ae 14	               jsr  z2puts         ; On imprime la chaine
.153a	20 3f c0	               jsr  popall
.153d	60		               rts
.153e			setcurcol
.153e	08		               php
.153f	8d 61 13	               sta  curcol
.1542	28		               plp
.1543	60		               rts
.1544			setvicbkcol
.1544	08		               php
.1545	48		               pha
.1546	8a		               txa
.1547	29 03		               and  #$03
.1549	aa		               tax
.154a	68		               pla
.154b	9d 63 13	               sta  vicbkcol0,x
.154e	9d 21 d0	               sta  $d021,x
.1551	28		               plp
.1552	60		               rts
.1553			setbkcol
.1553	08		               php
.1554	48		               pha
.1555	0a		               asl
.1556	0a		               asl
.1557	0a		               asl
.1558	0a		               asl
.1559	0a		               asl
.155a	0a		               asl
.155b	29 c0		               and  #$c0
.155d	8d 72 13	               sta  bkcol
.1560	68		               pla
.1561	28		               plp
.1562	60		               rts
.1563			saddscrptr
.1563	08		               php
.1564	48		               pha
.1565	18		               clc
.1566	6d 5d 13	               adc  scrptr
.1569	8d 5d 13	               sta  scrptr
.156c	90 03		               bcc  norep
.156e	ee 5e 13	               inc  scrptr+1
.1571	68		norep          pla
.1572	28		               plp
.1573	60		               rts
.1574			scrptr2str
.1574	20 04 c0	               jsr  push
.1577	ad 5e 13	               lda  scrptr+1
.157a	48		               pha
.157b	20 8b c2	               jsr  lsra4bits
.157e	20 7f c2	               jsr  nibtohex
.1581	8d 68 13	               sta  scraddr
.1584	68		               pla
.1585	20 8b c2	               jsr  lsra4bits
.1588	20 7f c2	               jsr  nibtohex
.158b	8d 69 13	               sta  scraddr+1
.158e	ad 5e 13	               lda  scrptr+1
.1591	48		               pha
.1592	20 8b c2	               jsr  lsra4bits
.1595	20 7f c2	               jsr  nibtohex
.1598	8d 68 13	               sta  scraddr
.159b	68		               pla
.159c	20 8b c2	               jsr  lsra4bits
.159f	20 7f c2	               jsr  nibtohex
.15a2	8d 69 13	               sta  scraddr+1
.15a5	ad 5d 13	               lda  scrptr
.15a8	48		               pha
.15a9	20 8b c2	               jsr  lsra4bits
.15ac	20 7f c2	               jsr  nibtohex
.15af	8d 6a 13	               sta  scraddr+2
.15b2	8d 6f 13	               sta  coladdr+2
.15b5	68		               pla
.15b6	20 8b c2	               jsr  lsra4bits
.15b9	20 7f c2	               jsr  nibtohex
.15bc	8d 6b 13	               sta  scraddr+3
.15bf	8d 70 13	               sta  coladdr+3
.15c2	20 3f c0	               jsr  pop
.15c5	60		               rts
.15c6			scrptr2zp1
.15c6	08		               php
.15c7	48		               pha
.15c8	ad 5d 13	               lda  scrptr
.15cb	85 fb		               sta  zpage1
.15cd	ad 5e 13	               lda  scrptr+1
.15d0	85 fc		               sta  zpage1+1
.15d2	68		               pla
.15d3	28		               plp
.15d4	60		               rts
.15d5			colptr2zp1
.15d5	08		               php
.15d6	48		               pha
.15d7	ad 5f 13	               lda  colptr
.15da	85 fb		               sta  zpage1
.15dc	ad 60 13	               lda  colptr+1
.15df	85 fc		               sta  zpage1+1
.15e1	68		               pla
.15e2	28		               plp
.15e3	60		               rts
.15e4			scrptr2zp2
.15e4	08		               php
.15e5	48		               pha
.15e6	ad 5d 13	               lda  scrptr
.15e9	85 fd		               sta  zpage2
.15eb	ad 5e 13	               lda  scrptr+1
.15ee	85 fe		               sta  zpage2+1
.15f0	68		               pla
.15f1	28		               plp
.15f2	60		               rts
.15f3			colptr2zp2
.15f3	08		               php
.15f4	48		               pha
.15f5	ad 5f 13	               lda  colptr
.15f8	85 fd		               sta  zpage2
.15fa	ad 60 13	               lda  colptr+1
.15fd	85 fe		               sta  zpage2+1
.15ff	68		               pla
.1600	28		               plp
.1601	60		               rts
.1602			putrahex
.1602	08		               php
.1603	48		               pha
.1604	20 92 c2	               jsr     atohex
.1607	a2 2a		               ldx     #<a2hexcol
.1609	a0 c2		               ldy     #>a2hexcol
.160b	20 c4 14	               jsr     puts
.160e	68		               pla
.160f	28		               plp
.1610	60		               rts
.1611			putrahexxy
.1611	08		               php
.1612	48		               pha
.1613	20 92 c2	               jsr  atohex
.1616	a9 2c		               lda  #<a2hexpos
.1618	a0 c2		               ldy  #>a2hexpos
.161a	20 f0 14	               jsr  putsxy
.161d	68		               pla
.161e	28		               plp
.161f	60		               rts
.1620			putrahexcxy
.1620	08		               php
.1621	68		               pla
.1622	20 92 c2	               jsr  atohex
.1625	a9 2c		               lda  #<a2hexpos
.1627	a0 c2		               ldy  #>a2hexpos
.1629	20 0f 15	               jsr  putscxy
.162c	68		               pla
.162d	28		               plp
.162e	60		               rts

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>c000	00		rp        .byte     0
>c001	00		ra        .byte     0
>c002	00 00		pc        .word     0
.c004			pushall
.c004			push
.c004	08		          php            ; stack : flg, pcl, pch
.c005	78		          sei
.c006	8d 01 c0	          sta  ra        ; save a
.c009	68		          pla            ; stack : pcl, pch
.c00a	8d 00 c0	          sta  rp        ; save rp
.c00d	68		          pla            ; stack : pch
.c00e	8d 02 c0	          sta  pc        ; save pcl
.c011	68		          pla            ; stack : -
.c012	8d 03 c0	          sta  pc+1      ; save pch
.c015	a5 fb		          lda  zpage1    ; get zpage1 low byte
.c017	48		          pha            ; stack : zp1l
.c018	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.c01a	48		          pha            ; stack : zp1h, zp1l
.c01b	a5 fd		          lda  zpage2    ; get zpage2 low byte
.c01d	48		          pha            ; stack : zp2l, zp1h, zp1l
.c01e	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.c020	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.c021	ad 00 c0	          lda  rp        ; get rp
.c024	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c025	ad 01 c0	          lda  ra        ; get a
.c028	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c029	8a		          txa            ; get x
.c02a	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c02b	98		          tya            ; get y
.c02c	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c02d	ad 03 c0	          lda  pc+1      ; get pch
.c030	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c031	ad 02 c0	          lda  pc        ; get pcl
.c034	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c035	ad 00 c0	          lda  rp        ; get rp
.c038	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c039	ad 01 c0	          lda  ra        ; get a
.c03c	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c03d	58		          cli
.c03e	60		          rts
.c03f			pullall
.c03f			pull
.c03f			popall
.c03f			pop
.c03f	78		          sei
.c040	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c041	8d 02 c0	          sta  pc        ; save pcl
.c044	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c045	8d 03 c0	          sta  pc+1      ; save pch
.c048	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c049	a8		          tay            ; set y
.c04a	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c04b	aa		          tax            ; set x
.c04c	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c04d	8d 01 c0	          sta  ra        ; save a
.c050	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c051	8d 00 c0	          sta  rp        ; save rp
.c054	68		          pla            ; stack : zp2l, zp1h, zp1l
.c055	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.c057	68		          pla            ; stack : zp1h, zp1l
.c058	85 fd		          sta  zpage2    ; get zpage2 High byte
.c05a	68		          pla            ; stack : zp1l
.c05b	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.c05d	68		          pla            ; stack :
.c05e	85 fb		          sta  zpage1    ; get zpage1 High byte
.c060	ad 03 c0	          lda  pc+1      ; get pch
.c063	48		          pha            ; stack : pch
.c064	ad 02 c0	          lda  pc
.c067	48		          pha            ; stack : pcl, pch
.c068	ad 00 c0	          lda  rp        ; get rp
.c06b	48		          pha            ; stack : rp, pcl, pch
.c06c	ad 01 c0	          lda  ra        ; set ra
.c06f	58		          cli
.c070	28		          plp            ; stack : pcl, pch
.c071	60		          rts
.c072			pushreg
.c072	08		          php            ; stack : flg, pcl, pch
.c073	78		          sei
.c074	8d 01 c0	          sta  ra        ; save a
.c077	68		          pla            ; stack : pcl, pch
.c078	8d 00 c0	          sta  rp        ; save rp
.c07b	68		          pla            ; stack : pch
.c07c	8d 02 c0	          sta  pc        ; save pcl
.c07f	68		          pla            ; stack : -
.c080	8d 03 c0	          sta  pc+1      ; save pch
.c083	ad 00 c0	          lda  rp        ; get rp
.c086	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c087	ad 01 c0	          lda  ra        ; get a
.c08a	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c08b	8a		          txa            ; get x
.c08c	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c08d	98		          tya            ; get y
.c08e	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c08f	ad 03 c0	          lda  pc+1      ; get pch
.c092	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c093	ad 02 c0	          lda  pc        ; get pcl
.c096	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c097	ad 00 c0	          lda  rp        ; get rp
.c09a	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c09b	ad 01 c0	          lda  ra        ; get a
.c09e	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c09f	58		          cli
.c0a0	60		          rts
.c0a1			pullreg
.c0a1			popreg
.c0a1	78		          sei
.c0a2	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c0a3	8d 02 c0	          sta  pc        ; save pcl
.c0a6	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c0a7	8d 03 c0	          sta  pc+1      ; save pch
.c0aa	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c0ab	a8		          tay            ; set y
.c0ac	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c0ad	aa		          tax            ; set x
.c0ae	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c0af	8d 01 c0	          sta  ra        ; save a
.c0b2	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c0b3	8d 00 c0	          sta  rp        ; save rp
.c0b6	ad 03 c0	          lda  pc+1      ; get pch
.c0b9	48		          pha            ; stack : pch
.c0ba	ad 02 c0	          lda  pc
.c0bd	48		          pha            ; stack : pcl, pch
.c0be	ad 00 c0	          lda  rp        ; get rp
.c0c1	48		          pha            ; stack : rp, pcl, pch
.c0c2	ad 01 c0	          lda  ra        ; set ra
.c0c5	58		          cli
.c0c6	28		          plp            ; stack : pcl, pch
.c0c7	60		          rts

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.c0c8			blkfill
.c0c8	20 04 c0	bf0            jsr  push
.c0cb	20 93 c1	               jsr  savezp1
.c0ce	84 fc		               sty  zpage1+1
.c0d0	a0 00		               ldy  #$00
.c0d2	84 fb		               sty  zpage1
.c0d4	91 fb		bf1            sta  (zpage1),y
.c0d6	c8		               iny
.c0d7	d0 fb		               bne  bf1
.c0d9	20 a2 c1	               jsr  restzp1
.c0dc	20 3f c0	               jsr  pop
.c0df	60		               rts
.c0e0			memfill
.c0e0	20 04 c0	               jsr  push
.c0e3	20 c8 c0	mf1            jsr  blkfill
.c0e6	c8		               iny
.c0e7	ca		               dex
.c0e8	d0 f9		               bne  mf1
.c0ea	20 3f c0	               jsr  pop
.c0ed	60		               rts
.c0ee			memmove
.c0ee	20 04 c0	               jsr  push
.c0f1	ba		               tsx            ; On se crée un pointeur ...
.c0f2	8a		               txa
.c0f3	18		               clc
.c0f4	69 0b		               adc  #11
.c0f6	a8		               tay
.c0f7	a2 06		               ldx  #$06
.c0f9	b9 00 01	nextbyte       lda  $0100,y
.c0fc	99 48 c1	               sta  words,y
.c0ff	c8		               iny
.c100	ca		               dex
.c101	d0 f6		               bne  nextbyte
.c103	ad 48 c1	               lda  s
.c106	8d 1f c1	               sta  source+1
.c109	ad 49 c1	               lda  s+1
.c10c	8d 20 c1	               sta  source+2
.c10f	ad 4a c1	               lda  d
.c112	8d 1c c1	               sta  destin+1
.c115	ad 4b c1	               lda  d+1
.c118	8d 1d c1	               sta  destin+2
.c11b	ad ff ff	destin         lda  $ffff
.c11e	8d ff ff	source         sta  $ffff
.c121	ee 1c c1	               inc  destin+1
.c124	d0 03		               bne  src
.c126	ee 1d c1	               inc  destin+2
.c129	ee 1f c1	src            inc  source+1
.c12c	d0 03		               bne  cnt
.c12e	ee 20 c1	               inc  source+2
.c131	ad 4c c1	cnt            lda  compte
.c134	d0 08		               bne  decit
.c136	ad 4d c1	               lda  compte+1
.c139	f0 09		               beq  fini
.c13b	ce 4d c1	               dec  compte+1
.c13e	ce 4c c1	decit          dec  compte
.c141	4c 1b c1	               jmp  destin
.c144	20 3f c0	fini           jsr  pop
.c147	60		               rts
.c148			words
>c148	00 00		s         .word     $0000
>c14a	00 00		d         .word     $0000
>c14c	00 00		compte    .word     $0000
.c14e			decword
.c14e	20 04 c0	               jsr  push
.c151	86 fd		               stx  zpage2
.c153	84 fe		               sty  zpage2+1
.c155	20 3f c0	               jsr  pop
.c158	60		               rts
.c159			inczpage1
.c159			inczp1
.c159	08		               php
.c15a	48		               pha
.c15b	e6 fb		               inc  zpage1
.c15d	a5 fb		               lda  zpage1
.c15f	d0 02		               bne  nopage
.c161	e6 fc		               inc  zpage1+1
.c163	68		nopage         pla
.c164	28		               plp
.c165	60		               rts
.c166			deczpage1
.c166			deczp1
.c166	08		               php
.c167	48		               pha
.c168	c6 fb		               dec  zpage1
.c16a	a5 fb		               lda  zpage1
.c16c	c9 ff		               cmp  #$ff
.c16e	f0 02		               beq  report
.c170	d0 02		               bne  nopage
.c172	c6 fc		report         dec  zpage1+1
.c174	68		nopage         pla
.c175	28		               plp
.c176	60		               rts
.c177			inczpage2
.c177			inczp2
.c177	08		               php
.c178	48		               pha
.c179	e6 fd		               inc  zpage2
.c17b	a5 fd		               lda  zpage2
.c17d	d0 02		               bne  nopage
.c17f	e6 fe		               inc  zpage2+1
.c181	68		nopage         pla
.c182	28		               plp
.c183	60		               rts
.c184			deczpage2
.c184			deczp2
.c184	08		               php
.c185	c6 fd		               dec  zpage2
.c187	a5 fd		               lda  zpage2
.c189	c9 ff		               cmp  #$ff
.c18b	f0 02		               beq  report
.c18d	d0 02		               bne  nopage
.c18f	c6 fe		report         dec  zpage2+1
.c191	28		nopage         plp
.c192	60		               rts
.c193			savezp1
.c193	08		               php
.c194	48		               pha
.c195	a5 fb		               lda  zpage1
.c197	8d 24 c2	               sta  zp1
.c19a	a5 fc		               lda  zpage1+1
.c19c	8d 25 c2	               sta  zp1+1
.c19f	68		               pla
.c1a0	28		               plp
.c1a1	60		               rts
.c1a2			restzp1
.c1a2	08		               php
.c1a3	48		               pha
.c1a4	ad 24 c2	               lda  zp1
.c1a7	85 fb		               sta  zpage1
.c1a9	ad 25 c2	               lda  zp1+1
.c1ac	85 fc		               sta  zpage1+1
.c1ae	68		               pla
.c1af	28		               plp
.c1b0	60		               rts
.c1b1			savezp2
.c1b1	08		               php
.c1b2	48		               pha
.c1b3	a5 fd		               lda  zpage2
.c1b5	8d 26 c2	               sta  zp2
.c1b8	a5 fe		               lda  zpage2+1
.c1ba	8d 27 c2	               sta  zp2+1
.c1bd	68		               pla
.c1be	28		               plp
.c1bf	60		               rts
.c1c0			restzp2
.c1c0	08		               php
.c1c1	48		               pha
.c1c2	ad 26 c2	               lda  zp2
.c1c5	85 fd		               sta  zpage2
.c1c7	ad 27 c2	               lda  zp2+1
.c1ca	85 fe		               sta  zpage2+1
.c1cc	68		               pla
.c1cd	28		               plp
.c1ce	60		               rts
.c1cf			xy2addr
.c1cf	08		               php
.c1d0	48		               pha
.c1d1	8a		               txa
.c1d2	48		               pha
.c1d3	98		               tya
.c1d4	48		               pha
.c1d5	ad 1f c2	               lda  addr1+1
.c1d8	8d 21 c2	               sta  addr2+1
.c1db	ad 1e c2	               lda  addr1
.c1de	8d 20 c2	               sta  addr2
.c1e1	c0 00		               cpy  #$00
.c1e3	f0 0f		               beq  addx
.c1e5	18		moreline       clc
.c1e6	6d 1d c2	               adc  ymult
.c1e9	90 03		               bcc  norepy
.c1eb	ee 21 c2	               inc  addr2+1
.c1ee	8d 20 c2	norepy         sta  addr2
.c1f1	88		               dey
.c1f2	d0 f1		               bne  moreline
.c1f4	8a		addx           txa
.c1f5	18		               clc
.c1f6	6d 20 c2	               adc  addr2
.c1f9	90 03		               bcc  thatsit
.c1fb	ee 21 c2	               inc  addr2+1
.c1fe	8d 20 c2	thatsit        sta  addr2
.c201	68		               pla
.c202	a8		               tay
.c203	68		               pla
.c204	aa		               tax
.c205	68		               pla
.c206	28		               plp
.c207	60		               rts
.c208			loop
.c208	ce 28 c2	               dec  loopcount
.c20b	d0 03		               bne  norep
.c20d	ce 29 c2	               dec  loopcount+1
.c210	ad 28 c2	norep          lda  loopcount
.c213	c9 00		               cmp  #$00
.c215	d0 05		               bne  out
.c217	4d 29 c2	               eor  loopcount+1
.c21a	c9 ff		               cmp  #$ff
.c21c	60		out            rts
>c21d	28		ymult          .byte     40
>c21e	00 00		addr1          .word     $0000
>c220	00 00		addr2          .word     $0000
>c222	00 00		bytecnt        .word     $0000
>c224	00 00		zp1            .word     $0000
>c226	00 00		zp2            .word     $0000
>c228	00 00		loopcount      .word     $0000

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>c22a	01		a2hexcol       .byte     1              ; pour aputscxy
>c22b	00		a2hexbkcol     .byte     %00000000
.c22c			a2hexpos
>c22c	00		a2hexpx        .byte     0              ; pour aputsxy
>c22d	00		a2hexpy        .byte     0
>c22e	24		a2hexprefix    .byte     "$"            ; pour aputs
>c22f	00 00		a2hexstr       .word     $00
>c231	00 00		               .word     $00
>c233	00		               .byte     0              ; 0 end string
>c234	01		abincol        .byte     1
>c235	00		abinbkcol      .byte     %00000000
>c236	30 30 30 30	abin           .null     "00000000"
>c23a	30 30 30 30 00
>c23f	20 20 20 00	adec           .null     "   "
.c243			putahexfmtxy
.c243	20 04 c0	               jsr  push
.c246	20 92 c2	               jsr  atohex
.c249	ae 2c c2	               ldx  a2hexpx
.c24c	ac 2d c2	               ldy  a2hexpy
.c24f	20 d2 14	               jsr  gotoxy
.c252	a2 2e		               ldx  #<a2hexprefix
.c254	a0 c2		               ldy  #>a2hexprefix
.c256	20 c4 14	               jsr  puts
.c259	20 3f c0	               jsr  pop
.c25c	60		               rts
.c25d			putahexfmt
.c25d	20 04 c0	               jsr  push
.c260	20 92 c2	               jsr  atohex
.c263	a2 2e		               ldx  #<a2hexprefix
.c265	a0 c2		               ldy  #>a2hexprefix
.c267	20 c4 14	               jsr  puts
.c26a	20 3f c0	               jsr  pop
.c26d	60		               rts
.c26e			putahex
.c26e	20 04 c0	               jsr  push
.c271	20 92 c2	               jsr  atohex
.c274	a2 2f		               ldx  #<a2hexstr
.c276	a0 c2		               ldy  #>a2hexstr
.c278	20 c4 14	               jsr  puts
.c27b	20 3f c0	               jsr  pop
.c27e	60		               rts
.c27f			nibtohex
.c27f	08		               php
.c280	29 0f		               and  #$0f
.c282	f8		               sed
.c283	18		               clc
.c284	69 90		               adc  #$90
.c286	69 40		               adc  #$40
.c288	d8		               cld
.c289	28		               plp
.c28a	60		               rts
.c28b			lsra4bits
.c28b	08		               php
.c28c	4a		               lsr
.c28d	4a		               lsr
.c28e	4a		               lsr
.c28f	4a		               lsr
.c290	28		               plp
.c291	60		               rts
.c292			atohex
.c292	08		               php
.c293	48		               pha
.c294	48		               pha
.c295	20 8b c2	               jsr  lsra4bits
.c298	20 7f c2	               jsr  nibtohex
.c29b	8d 2f c2	               sta  a2hexstr
.c29e	68		               pla
.c29f	20 7f c2	               jsr  nibtohex
.c2a2	8d 30 c2	               sta  a2hexstr+1
.c2a5	a9 00		               lda  #$00                ; set end of string
.c2a7	8d 31 c2	               sta  a2hexstr+2
.c2aa	68		               pla
.c2ab	28		               plp
.c2ac	60		               rts
.c2ad			xy2hex
.c2ad	20 04 c0	               jsr  push
.c2b0	20 92 c2	               jsr  atohex
.c2b3	8a		               txa
.c2b4	48		               pha
.c2b5	20 8b c2	               jsr  lsra4bits
.c2b8	20 7f c2	               jsr  nibtohex
.c2bb	8d 2f c2	               sta  a2hexstr
.c2be	68		               pla
.c2bf	20 7f c2	               jsr  nibtohex
.c2c2	8d 30 c2	               sta  a2hexstr+1
.c2c5	98		               tya
.c2c6	48		               pha
.c2c7	20 8b c2	               jsr  lsra4bits
.c2ca	20 7f c2	               jsr  nibtohex
.c2cd	8d 31 c2	               sta  a2hexstr+2
.c2d0	68		               pla
.c2d1	20 7f c2	               jsr  nibtohex
.c2d4	8d 32 c2	               sta  a2hexstr+3
.c2d7	a9 00		               lda  #$00                ; 0 ended string
.c2d9	8d 33 c2	               sta  a2hexstr+4
.c2dc	20 3f c0	               jsr  pop
.c2df			atobin
.c2df	20 04 c0	               jsr  push
.c2e2	a2 08		               ldx  #8
.c2e4	a0 00		               ldy  #0
.c2e6	18		               clc
.c2e7	2a		nextbit        rol
.c2e8	48		               pha
.c2e9	69 00		               adc  #$00
.c2eb	29 01		               and  #$01
.c2ed	20 7f c2	               jsr  nibtohex
.c2f0	99 36 c2	               sta  abin,y
.c2f3	68		               pla
.c2f4	c8		               iny
.c2f5	ca		               dex
.c2f6	d0 ef		               bne  nextbit
.c2f8	a9 00		               lda  #0
.c2fa	99 36 c2	               sta  abin,y
.c2fd	20 3f c0	               jsr  pull
.c300	60		               rts
.c301			abinsetmccol
.c301	20 72 c0	               jsr  pushreg
.c304	20 a1 c0	               jsr  popreg
.c307	60		               rts
.c308			putabin
.c308	20 df c2	               jsr     atobin
.c30b	20 04 c0	               jsr     push
.c30e	a2 36		               ldx     #<abin
.c310	a0 c2		               ldy     #>abin
.c312	20 c4 14	               jsr     puts
.c315	20 3f c0	               jsr     pop
.c318	60		               rts
.c319			printabin
.c319	20 04 c0	               jsr     push
.c31c	a2 36		               ldx     #<abin
.c31e	a0 c2		               ldy     #>abin
.c320	20 c4 14	               jsr     puts
.c323	20 3f c0	               jsr     pop
.c326	60		               rts
.c327			putabinfmt
.c327	08		               php
.c328	48		               pha
.c329	a9 25		               lda     #"%"
.c32b	20 76 14	               jsr     putch
.c32e	68		               pla
.c32f	20 08 c3	               jsr     putabin
.c332	28		               plp
.c333	60		               rts
.c334			putabinxy
.c334	20 d2 14	               jsr     gotoxy
.c337	20 08 c3	               jsr     putabin
.c33a	60		               rts
.c33b			putabinfmtxy
.c33b	20 d2 14	               jsr     gotoxy
.c33e	20 27 c3	               jsr     putabinfmt
.c341	60		               rts
.c342			atodec
.c342	20 04 c0	               jsr  push
.c345	f8		               sed            ; On se place en mode décimal.
.c346	aa		               tax            ; On déplace a dans x.
.c347	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.c349	a9 00		               lda  #$00      ; 0 dans A.
.c34b	18		nextbit        clc            ; Bit carry a 0.
.c34c	69 01		               adc  #$01      ; Ajoute 1 a A.
.c34e	90 01		               bcc  decx      ; Pas de carry, pas de report.
.c350	c8		               iny            ; On incrémente Y
.c351	ca		decx           dex            ; X=X-1
.c352	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.c354	48		               pha            ; A sur le stack.
.c355	98		               tya            ; Y dans A (MSB)
.c356	20 7f c2	               jsr  nibtohex  ; a hex petsci ...
.c359	8d 3f c2	               sta  adec      ; ... dans tampon.
.c35c	68		               pla            ; Récupere A
.c35d	48		               pha            ;
.c35e	20 7f c2	               jsr  nibtohex
.c361	8d 41 c2	               sta  adec+2
.c364	68		               pla
.c365	6a		               ror
.c366	6a		               ror
.c367	6a		               ror
.c368	6a		               ror
.c369	20 7f c2	               jsr  nibtohex
.c36c	8d 40 c2	               sta  adec+1
.c36f	d8		               cld            ; On revient en mode binaire.
.c370	20 3f c0	               jsr  pull
.c373	60		               rts
.c374			putadec
.c374	20 04 c0	               jsr  push
.c377	20 42 c3	               jsr  atodec
.c37a	a2 3f		               ldx  #<adec
.c37c	a0 c2		               ldy  #>adec+1
.c37e	20 c4 14	               jsr  puts
.c381	20 3f c0	               jsr  pop
.c384	60		               rts

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs-mc.asm

.c385			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
.c385	08		               php                 ; Sauvegarde le registre de status sur stack.
.c386	8d 7a c5	               sta  rega           ; Sauvegarde Acc en mémoire.
.c389	68		               pla                 ; Récupère le registre de status du stack.
.c38a	8d 7d c5	               sta  regp           ; Sauvegarde le registre de status en mémoire.
.c38d	8e 7b c5	               stx  regx           ; Sauvegarde le registre X en mémoire.
.c390	8c 7c c5	               sty  regy           ; Sauvegarde le registre Y en mémoire.
.c393	ba		               tsx                 ; Copie le registre S dans X.
.c394	8e 7e c5	               stx  regs           ; Sauvegarde le registre S en mémoire.
.c397	68		               pla                 ; Récupère le MSB de l'adresse de retour ...
.c398	8d 80 c5	               sta  regpcl         ; ... et le sauvegarde en mémoire ...
.c39b	8d 82 c5	               sta  regpcl2        ; ... une seconde fois.
.c39e	68		               pla                 ; Récupère le LSB de l'adresse de retour ...
.c39f	8d 7f c5	               sta  regpch         ; ... et le sauvegarde en mémoire ...
.c3a2	8d 81 c5	               sta  regpch2        ; ... une seconde fois.
.c3a5	ad 7a c5	               lda  rega           ; On commence par le registre Acc.
.c3a8	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c3a9	20 7f c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c3ac	8d 17 c5	               sta  vala+1         ; ... et le place dans la chaine.
.c3af	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c3b0	20 8b c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c3b3	20 7f c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c3b6	8d 16 c5	               sta  vala           ; ... et le place dans la chaine.
.c3b9	ad 7c c5	               lda  regy           ; Ensuite, le registre Y.
.c3bc	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c3bd	20 7f c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c3c0	8d 2e c5	               sta  valy+1         ; ... et le place dans la chaine.
.c3c3	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c3c4	20 8b c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c3c7	20 7f c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c3ca	8d 2d c5	               sta  valy           ; ... et le place dans la chaine.
.c3cd	ad 7b c5	               lda  regx           ; Ensuite, le registre X.
.c3d0	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c3d1	20 7f c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c3d4	8d 22 c5	               sta  valx+1         ; ... et le place dans la chaine.
.c3d7	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c3d8	20 8b c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c3db	20 7f c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c3de	8d 21 c5	               sta  valx           ; ... et le place dans la chaine.
.c3e1	ad 7d c5	               lda  regp           ; Ensuite, le registre de status.
.c3e4	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c3e5	20 7f c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c3e8	8d 39 c5	               sta  valp+1         ; ... et le place dans la chaine.
.c3eb	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c3ec	20 8b c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c3ef	20 7f c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c3f2	8d 38 c5	               sta  valp           ; ... et le place dans la chaine.
.c3f5	ad 7e c5	               lda  regs           ; Ensuite, le pointeur de stack.
.c3f8	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c3f9	20 7f c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c3fc	8d 44 c5	               sta  vals+1         ; ... et le place dans la chaine.
.c3ff	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c400	20 8b c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c403	20 7f c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c406	8d 43 c5	               sta  vals           ; ... et le place dans la chaine.
.c409	38		               sec                 ; Prépade le ADC en plaçant 0 dans Carry.
.c40a	ad 82 c5	               lda  regpcl2        ; On charge la LSB de l'adresse de retour.
.c40d	69 00		               adc  #$00           ; On y ajoute 1.
.c40f	90 03		               bcc  noreport       ; Si pas de Carry on ne fait pas de report.
.c411	ee 81 c5	               inc  regpch2        ; ... en incrémentant le MSB.
.c414	8d 82 c5	noreport       sta  regpcl2        ; On le sauvegarde.
.c417	ad 82 c5	               lda  regpcl2        ; On récupère la partie basse du compteur.
.c41a	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c41b	20 7f c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c41e	8d 54 c5	               sta  valpcl+1       ; ... et lace le code à la position "---X".
.c421	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c422	20 8b c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c425	20 7f c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c428	8d 53 c5	               sta  valpcl         ; ... et lace le code à la position "--X-".
.c42b	ad 81 c5	               lda regpch2         ; On récupère la partie haute du compteur.
.c42e	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c42f	20 7f c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c432	8d 52 c5	               sta  valpch+1       ; ... et lace le code à la position "-X--".
.c435	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c436	20 8b c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c439	20 7f c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c43c	8d 51 c5	               sta  valpch         ; ... et lace le code à la position "X---".
.c43f	a5 fb		               lda  zpage1         ; On charge le LSB de ZP1 ($fb).
.c441	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c442	20 7f c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c445	8d 65 c5	               sta  valz1l+1       ; ... et lace le code à la position "---X".
.c448	68		               pla
.c449	20 8b c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c44c	20 7f c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c44f	8d 64 c5	               sta  valz1l         ; ... et lace le code à la position "--X-".
.c452	a5 fc		               lda  zpage1+1         ; On charge le MSB de ZP1 ($fc).
.c454	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c455	20 7f c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c458	8d 63 c5	               sta  valz1h+1       ; ... et lace le code à la position "-X--".
.c45b	68		               pla
.c45c	20 8b c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c45f	20 7f c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c462	8d 62 c5	               sta  valz1h         ; ... et lace le code à la position "X---".
.c465	a5 fd		               lda  zpage2         ; On charge le LSB de ZP2 ($fd).
.c467	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c468	20 7f c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c46b	8d 76 c5	               sta  valz2l+1       ; ... et lace le code à la position "---X".
.c46e	68		               pla
.c46f	20 8b c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c472	20 7f c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c475	8d 75 c5	               sta  valz2l         ; ... et lace le code à la position "--X-".
.c478	a5 fe		               lda  zpage2+1       ; On charge le MSB de ZP2 ($fc).
.c47a	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c47b	20 7f c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c47e	8d 74 c5	               sta  valz2h+1       ; ... et lace le code à la position "-X--".
.c481	68		               pla
.c482	20 8b c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c485	20 7f c2	               jsr  nibtohex
.c488	8d 73 c5	               sta  valz2h         ; ... et lace le code à la position "X---".
.c48b	20 72 c0	               jsr  pushreg
.c48e	a2 0e		               ldx  #<srega
.c490	a0 c5		               ldy  #>srega
.c492	20 0f 15	               jsr  putscxy
.c495	20 a1 c0	               jsr  popreg
.c498	20 72 c0	               jsr  pushreg
.c49b	a2 1a		               ldx  #<sregx
.c49d	a0 c5		               ldy  #>sregx
.c49f	20 0f 15	               jsr  putscxy
.c4a2	20 a1 c0	               jsr  popreg
.c4a5	20 72 c0	               jsr  pushreg
.c4a8	a2 25		               ldx  #<sregy
.c4aa	a0 c5		               ldy  #>sregy
.c4ac	20 0f 15	               jsr  putscxy
.c4af	20 a1 c0	               jsr  popreg
.c4b2	20 72 c0	               jsr  pushreg
.c4b5	a2 31		               ldx  #<sregp
.c4b7	a0 c5		               ldy  #>sregp
.c4b9	20 0f 15	               jsr  putscxy
.c4bc	20 a1 c0	               jsr  popreg
.c4bf	20 72 c0	               jsr  pushreg
.c4c2	a2 3c		               ldx  #<sregs
.c4c4	a0 c5		               ldy  #>sregs
.c4c6	20 0f 15	               jsr  putscxy
.c4c9	20 a1 c0	               jsr  popreg
.c4cc	20 72 c0	               jsr  pushreg
.c4cf	a2 48		               ldx  #<sregpc
.c4d1	a0 c5		               ldy  #>sregpc
.c4d3	20 0f 15	               jsr  putscxy
.c4d6	20 a1 c0	               jsr  popreg
.c4d9	20 72 c0	               jsr  pushreg
.c4dc	a2 58		               ldx  #<sregz1
.c4de	a0 c5		               ldy  #>sregz1
.c4e0	20 0f 15	               jsr  putscxy
.c4e3	20 a1 c0	               jsr  popreg
.c4e6	20 72 c0	               jsr  pushreg
.c4e9	a2 69		               ldx  #<sregz2
.c4eb	a0 c5		               ldy  #>sregz2
.c4ed	20 0f 15	               jsr  putscxy
.c4f0	20 a1 c0	               jsr  popreg
.c4f3	ad 7f c5	               lda  regpch         ; On replace ls MSB l'adresse de retour ...
.c4f6	48		               pha                 ; ... à la bonne position sur la pile.
.c4f7	ad 80 c5	               lda  regpcl         ; On replace ls LSB l'adresse de retour ...
.c4fa	48		               pha                 ; ... à la bonne position sur la pile.
.c4fb	ae 7e c5	               ldx  regs           ; On replace tous les registre à leurs ...
.c4fe	9a		               txs                 ; ...
.c4ff	ac 7c c5	               ldy  regy           ; ...
.c502	ae 7b c5	               ldx  regx           ; ...
.c505	ad 7d c5	               lda  regp           ; ...
.c508	48		               pha                 ; ...
.c509	ad 7a c5	               lda  rega           ; ...
.c50c	28		               plp                 ; ... valeurs initiales
.c50d	60		               rts
>c50e	07 01 17	srega   .byte   cyellow,coln+1,line
>c511	20 20 01 3a	        .text   '  a:$' ;4,24
>c515	24
>c516	00 00 20 00	vala    .byte   0,0,32,0
>c51a	03 09 17	sregx   .byte   ccyan,coln+9,line
>c51d	20 18 3a 24	        .text   ' x:$' ;4,24
>c521	00 00 20 00	valx    .byte   0,0,32,0
>c525	0d 10 17	sregy   .byte   clightgreen,coln+16,line
>c528	20 19 3a 20	        .text   ' y: $' ;4,24
>c52c	24
>c52d	00 00 20 00	valy    .byte   0,0,32,0
>c531	08 18 17	sregp   .byte   corange,coln+24,line
>c534	20 10 3a 24	        .text   ' p:$' ;4,24
>c538	00 00 20 00	valp    .byte   0,0,32,0
>c53c	0a 1f 17	sregs   .byte   clightred,coln+31,line
>c53f	20 13 3a 24	        .text   ' s:$' ;4,24
>c543	00 00 20 20	vals    .byte   0,0,32,32,0
>c547	00
>c548	0e 01 18 20	sregpc  .byte   clightblue,coln+1,line+1,32
>c54c	20 10 03 3a	        .text   ' pc:$' ;4,24
>c550	24
>c551	00 00		valpch  .byte   0,0
>c553	00 00 20 20	valpcl  .byte   0,0,32,32,0
>c557	00
>c558	04 0d 18 20	sregz1  .byte   cpurple,coln+13,line+1,32
>c55c	20 1a 10 31	        .text   ' zp1:$' ;4,24
>c560	3a 24
>c562	00 00		valz1h  .byte   0,0
>c564	00 00 20 20	valz1l  .byte   0,0,32,32,0
>c568	00
>c569	0f 1a 18 20	sregz2  .byte   clightgray,coln+26,line+1,32
>c56d	20 1a 10 32	        .text   ' zp2:$' ;4,24
>c571	3a 24
>c573	00 00		valz2h  .byte   0,0
>c575	00 00 20 20	valz2l  .byte   0,0,32,32,0
>c579	00
>c57a	00		rega    .byte   0
>c57b	00		regx    .byte   0
>c57c	00		regy    .byte   0
>c57d	00		regp    .byte   0
>c57e	00		regs    .byte   0
>c57f	00		regpch  .byte   0
>c580	00		regpcl  .byte   0
>c581	00		regpch2 .byte   0
>c582	00		regpcl2 .byte   0
>c583	00		vzp1h   .byte   0
>c584	00		vzp1l   .byte   0
>c585	00		vzp2h   .byte   0
>c586	00		vzp2l   .byte   0

;******  Return to file: j2tester.asm


;******  End of listing

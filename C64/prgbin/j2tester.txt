
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L j2tester.txt -o j2tester.prg j2tester.asm
; Tue Sep 16 22:47:02 2025

;Offset	;Hex		;Source

;******  Processing input file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d000			chargen        =    $d000
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0000	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0004	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms=$e1d4  ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk=$ed09    ; Send Talk command to serial bus.
=$ed0c			slisten=$ed0c  ; Send LISTEN command to serial bus.
=$ed40			sflush=$ed40   ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2=$edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2=$edb9  ; Send TALK secondary addressto serial bus.
=$eddd			sbout=$eddd    ; Write byte to serial bus.
=$edef			sutalk=$edef   ; Send UNTalk command to serial bus.
=$edfe			sulisten=$edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh=$ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow=$ee8e  ; Set CLOCK OUT to low
=$ee97			sdathigh=$ee97 ; Set DATA OUT to High
=$eea0			sdatlow=$eea0  ; Set DATA OUT to low
=$eea9			sclkdta=$eea9  ; Read CLOCK IN and DATA IN.
=$f1ad			sbread=$f1ad   ; Read one byte from serial port.
=$f237			sstdin=$F237   ; Define serial bus as standard input; do not send TALK
=$f279			sstdout=$F279  ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen=$F3D5   ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose=$F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose=$F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose=$F642  ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout=$FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr=$ffa5    ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin=$ffc6    ; jmp ($031e) Define an input channel.
=$ffc9			chkout=$ffc9   ; jmp ($0320) Define an output channel.
=$ffcf			chrin=$ffcf    ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout=$ffd2   ; jmp ($0326) Output a character
=$ff81			cint=$ff81     ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout=$ffa8    ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall=$ffe7    ; jmp ($032c) Close all open files
=$ffc3			close=$ffc3    ; jmp ($031c) Close a logical file
=$ffcc			clrchn=$ffcc   ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin=$ffe4    ; jmp ($032a) Get a character.
=$fff3			iobase=$fff3   ; jmp $e500 Define i/o memory page
=$ff84			ioinit=$ff84   ; ($fda3) Initialize i/o devices.
=$ffb1			listen=$ffb1   ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load=$ffd5     ; jmp $f4e9 Load device to RAM.
=$ff9c			membot=$ff9c   ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop=$ff99   ; jmp $fe25 Get/Set top of ram
=$ffc0			open=$ffc0     ; jmp ($031a) Open a logical file
=$fff0			plot=$fff0     ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas=$ff87   ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim=$ffde    ; jmp $f6dd Read system clock
=$ffb7			readst=$ffb7   ; jmp $fe07 Read i/o status word
=$ff8a			restor=$ff8a   ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save=$ffd8     ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey=$ff9f   ; jmp $ea87 Scan the keyboard
=$ffed			screen=$ffed   ; jmp $e505 Return screen format
=$ff93			second=$ff93   ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs=$ffba   ; jmp $fe00 Set up a logical file
=$ff90			setmsg=$ff90   ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam=$ffbd   ; jmp $fdf9 Set up file name
=$ffdb			settim=$ffdb   ; jmp $f6e4 Set the system clock.
=$ffa2			settmo=$ffa2   ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop=$ffe1     ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk=$ffb4     ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa=$ff96     ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim=$ffea    ; jmp $f69b Update the system clock
=$ffae			unlsn=$ffae    ; jmp $edfe Send an unlisten command
=$ffab			untlk=$ffab    ; jmp $edef Send an untalk command
=$ff8d			vector=$ff8d   ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.           ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.   ;a--;---; a=dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.      ;---;a--; a=Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.   ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial. ;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.        ;--y;---; y=msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .         ;a--;---; a=file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.             ;axy;---; a=# start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode. ;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.   ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.              ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.          ;---;---; z=1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.         ;a--;---; a=len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.       ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)         ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.         ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                   ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.        ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                  ;a--;---; a=ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.              ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.         ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.              ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.         ;a--;---; a=SAor#$60
=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0008	20 54 08	libtart        jsr  main           ; Programme principale doit s'appeler "main"

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1          .word bcmd2         ;Adresse de la commande basic suivante.
>0803	01 00		               .word 1             ;Numero de la ligne Basic.
>0805	8f		               .byte $8F           ;Le token de la commande REM du Basic
>0806	2a 50 52 4f	               .text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2          .word bcmd3         ;Adresse de la commande basic suivante.
>082b	02 00		               .word 2             ;Numero de la ligne Basic.
>082d	8f		               .byte $8F           ;Le token de la commande REM du Basic
>082e	2a 50 41 52	               .text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3          .word bcmd4         ;Adresse de la commande basic suivante.
>0846	03 00		               .word 3             ;Numero de la ligne Basic.
>0848	9e		               .byte $9e           ;Le token de la commande PRINT du Basic
>0849	30 32 31 32	               .text format("%05d",hpgmstart)
>084d	39
>084e	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4          .word $0000         ;L'adresse de la commande Basic suivante.
.0851	4c 54 08	hpgmstart     jmp   main           ; Le programme principale doit s'appeler "main"

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: j2tester.asm

.0854			main
.0854	20 c2 88	               jsr  scrmaninit
.0857	4c 57 08	ici            jmp  ici
.085a	20 00 80	               jsr  js_init
.085d	a9 80		               lda  #$80
.085f	8d ae 88	               sta  curcol
.0862	a9 00		               lda  #0
.0864	8d 21 d0	               sta  vicback0col
.0867	a9 02		               lda  #vrouge
.0869	8d af 88	               sta  brdcol
.086c	8d 20 d0	               sta  vicbordcol
.086f	20 52 89	               jsr  cls
.0872	a9 20		               lda  #$20
.0874	09 00		               ora  #%00000000
.0876	a0 04		               ldy  #$04
.0878	a2 04		               ldx  #$04
.087a	20 e0 c8	               jsr  memfill
.087d	a9 00		               lda  #$00
.087f	a0 d8		               ldy  #$d8
.0881	20 e0 c8	               jsr  memfill
.0884	20 58 84	               jsr  sprt_init
.0887	20 af 89	goagain        jsr  setinverse
.088a	20 72 c8	               jsr  pushreg
.088d	a2 72		               ldx  #<bstring1
.088f	a0 09		               ldy  #>bstring1
.0891	20 5c 8a	               jsr  putscxy
.0894	20 a1 c8	               jsr  popreg
.0897	20 72 c8	               jsr  pushreg
.089a	a2 9f		               ldx  #<bstring2
.089c	a0 09		               ldy  #>bstring2
.089e	20 5c 8a	               jsr  putscxy
.08a1	20 a1 c8	               jsr  popreg
.08a4	20 72 c8	               jsr  pushreg
.08a7	a2 cc		               ldx  #<bstring3
.08a9	a0 09		               ldy  #>bstring3
.08ab	20 5c 8a	               jsr  putscxy
.08ae	20 a1 c8	               jsr  popreg
.08b1	20 72 c8	               jsr  pushreg
.08b4	a2 f9		               ldx  #<bstring4
.08b6	a0 09		               ldy  #>bstring4
.08b8	20 5c 8a	               jsr  putscxy
.08bb	20 a1 c8	               jsr  popreg
.08be	20 b9 89	               jsr  clrinverse
.08c1	20 72 c8	               jsr  pushreg
.08c4	a2 10		               ldx  #<js_status1
.08c6	a0 0a		               ldy  #>js_status1
.08c8	20 5c 8a	               jsr  putscxy
.08cb	20 a1 c8	               jsr  popreg
.08ce	20 72 c8	               jsr  pushreg
.08d1	a2 28		               ldx  #<js_status2
.08d3	a0 0a		               ldy  #>js_status2
.08d5	20 5c 8a	               jsr  putscxy
.08d8	20 a1 c8	               jsr  popreg
.08db	20 72 c8	               jsr  pushreg
.08de	a2 3f		               ldx  #<js_status3
.08e0	a0 0a		               ldy  #>js_status3
.08e2	20 5c 8a	               jsr  putscxy
.08e5	20 a1 c8	               jsr  popreg
.08e8	20 72 c8	               jsr  pushreg
.08eb	a2 58		               ldx  #<js_status4
.08ed	a0 0a		               ldy  #>js_status4
.08ef	20 5c 8a	               jsr  putscxy
.08f2	20 a1 c8	               jsr  popreg
.08f5	20 72 c8	               jsr  pushreg
.08f8	a2 71		               ldx  #<js_status5
.08fa	a0 0a		               ldy  #>js_status5
.08fc	20 5c 8a	               jsr  putscxy
.08ff	20 a1 c8	               jsr  popreg
.0902	20 72 c8	               jsr  pushreg
.0905	a2 87		               ldx  #<js_status6
.0907	a0 0a		               ldy  #>js_status6
.0909	20 5c 8a	               jsr  putscxy
.090c	20 a1 c8	               jsr  popreg
.090f	20 72 c8	               jsr  pushreg
.0912	a2 00		               ldx  #$00
.0914	a0 0f		               ldy  #$0f
.0916	20 1f 8a	               jsr  gotoxy
.0919	20 a1 c8	               jsr  popreg
.091c	a9 07		               lda  #vjaune
.091e	20 8b 8a	               jsr  setcurcol
.0921	a2 00		               ldx  #$00
.0923	20 a0 8a	               jsr  setbkcol
.0926	20 15 80	looper         jsr  js_scan        ; ****** Un prob avec j2scan.
.0929	4c 29 09	INFINIE        jmp  INFINIE          ; Un branchement infinie.
.092c	20 01 82	               jsr  js_showvals
.092f	20 24 83	               jsr  js_updatecurs
.0932	20 ea 84	               jsr  sprt_move
.0935	a2 16		               ldx  #$16
.0937	a0 11		               ldy  #$11
.0939	20 1f 8a	               jsr  gotoxy
.093c	a9 03		               lda  #3
.093e	20 8b 8a	               jsr  setcurcol
.0941	ad c9 83	               lda  js_2fire
.0944	f0 e0		               beq  looper
.0946	ad c8 83	               lda  js_2y
.0949	c9 04		               cmp  #$04
.094b	d0 1d		               bne  nochange
.094d	ad c7 83	               lda  js_2x
.0950	c9 0b		               cmp  #$0b
.0952	30 16		               bmi  nochange
.0954	c9 1d		               cmp  #$1d
.0956	10 12		               bpl  nochange
.0958	ee b3 84	               inc  sprt_ptr
.095b	ad b3 84	               lda  sprt_ptr
.095e	c9 09		               cmp  #9
.0960	90 02		               bcc  drawsptr
.0962	a9 00		               lda  #$00
.0964	8d b3 84	drawsptr       sta  sprt_ptr
.0967	20 58 84	               jsr  sprt_init
.096a	4c 26 09	nochange       jmp  looper
.096d	20 e1 ff	out            jsr  kstop
.0970	60		               rts
>0971	00		onebyte        .byte     0
>0972	0e 40 00 00	bstring1       .byte     vbleu1,bkcol1,0,0
>0976	20 20 20 20	               .text     "      Visualisation du port jeu #2      "
>097a	20 20 56 09 13 15 01 0c 09 13 01 14 09 0f 0e 20
>098a	04 15 20 10 0f 12 14 20 0a 05 15 20 23 32 20 20
>099a	20 20 20 20
>099e	00		               .byte     0
>099f	0b 80 00 01	bstring2       .byte     vgris,bkcol2,0,1
>09a3	20 50 12 0f	               .text     " Programme assembleur pour 6510 sur C64 "
>09a7	07 12 01 0d 0d 05 20 01 13 13 05 0d 02 0c 05 15
>09b7	12 20 10 0f 15 12 20 36 35 31 30 20 13 15 12 20
>09c7	43 36 34 20
>09cb	00		               .byte     0
>09cc	0a c0 00 02	bstring3       .byte     vrose,bkcol3,0,2
>09d0	20 20 20 20	               .text     "     par Daniel Lafrance (2024-06) C    "
>09d4	20 10 01 12 20 44 01 0e 09 05 0c 20 4c 01 06 12
>09e4	01 0e 03 05 20 28 32 30 32 34 2d 30 36 29 20 43
>09f4	20 20 20 20
>09f8	00		               .byte     0
>09f9	07 c0 0b 04	bstring4       .byte     vjaune,bkcol3,11,4
>09fd	20 43 08 01	               .text     " Changer pointeur "
>0a01	0e 07 05 12 20 10 0f 09 0e 14 05 15 12 20
>0a0f	00		               .byte     0
>0a10	0d 00 13 16	js_status1     .byte     vvert1,bkcol0,19,22
>0a14	20 20 20 15	               .text     "   up <----1> haut "
>0a18	10 20 3c 2d 2d 2d 2d 31 3e 20 08 01 15 14 20
>0a27	00		               .byte     0
>0a28	0e 00 13 15	js_status2     .byte     vbleu1,bkcol0,19,21
>0a2c	20 04 0f 17	               .text     " down <---2-> bas "
>0a30	0e 20 3c 2d 2d 2d 32 2d 3e 20 02 01 13 20
>0a3e	00		               .byte     0
>0a3f	0a 00 13 14	js_status3     .byte     vrose,bkcol0,19,20
>0a43	20 0c 05 06	               .text     " left <--4--> gauche"
>0a47	14 20 3c 2d 2d 34 2d 2d 3e 20 07 01 15 03 08 05
>0a57	00		               .byte     0
>0a58	07 00 13 13	js_status4     .byte     vjaune,bkcol0,19,19
>0a5c	12 09 07 08	               .text     "right <-8---> droite"
>0a60	14 20 3c 2d 38 2d 2d 2d 3e 20 04 12 0f 09 14 05
>0a70	00		               .byte     0
>0a71	01 00 13 12	js_status5     .byte     vblanc,bkcol0,19,18
>0a75	20 46 09 12	               .text     " Fire <1----> Feu"
>0a79	05 20 3c 31 2d 2d 2d 2d 3e 20 46 05 15
>0a86	00		               .byte     0
>0a87	03 00 01 17	js_status6     .byte     vcyan,bkcol0,1,23
>0a8b	2b 2d 3e 20	               .text     "+-> Etat de JS2:     %---FRLDU EOR #$1F"
>0a8f	45 14 01 14 20 04 05 20 4a 53 32 3a 20 20 20 20
>0a9f	20 25 2d 2d 2d 46 52 4c 44 55 20 45 4f 52 20 23
>0aaf	24 31 46
>0ab2	00		               .byte     0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-joystick-mc.asm

=$dc00			js_2port       =    $dc00          ; CIA #1 Port data A
=$dc01			js_1port       =    $dc01          ; CIA #1 Port data B
=$dc02			js_2dir        =    $dc02          ; CIA #1 Port de direction A
=$dc03			js_1dir        =    $dc03          ; CIA #1 port de direction B
=2			js_xoffset     =    2
=2			js_yoffset     =    2
=0			js_location    =    0
.8000			js_init
.8000	08		               php                 ; Sauvegarde le registre de
.8001	48		               pha                 ;   status et le registre a.
.8002	ad 03 dc	               lda  js_1dir        ; Place les bits de direction du port B
.8005	29 e0		               and  #$e0           ; 4-0 en entrées (0).
.8007	8d 03 dc	               sta  js_1dir
.800a	ad 02 dc	               lda  js_2dir        ; Place les bits de direction du port A
.800d	29 e0		               and  #$e0           ; 4-0 en entrées (0).
.800f	8d 02 dc	               sta  js_2dir
.8012	68		               pla                 ; Récupère le registre a et
.8013	28		               plp                 ;   le registre de status.
.8014	60		               rts
.8015			js_scan
.8015	20 1c 80	               jsr  js_1scan       ; Scan la manette du port B.
.8018	20 c6 80	               jsr  js_2scan       ; Scan la manette du port A.
.801b	60		               rts
.801c			js_1scan
.801c	20 72 c8	               jsr  pushreg        ; Sauvegarde tous les registres.
.801f	ad 01 dc	               lda  js_1port       ; Lecture du port d'entrées
.8022	29 1f		               and  #$1f           ; Masque les bits 7, 6 et 5.
.8024	48		               pha                 ; Copie sur la pile.
.8025	49 1f		               eor  #$1f           ; Inverse tous les bits.
.8027	8d 56 84	               sta  js_1status     ; Sauvegarde le status.
.802a	68		               pla                 ; Récupère une copie originale.
.802b	c9 00		               cmp  #$00           ; Si les bits sont tous 0
.802d	d0 03		               bne  p1scan         ; On scan le port
.802f	4c b5 80	               jmp  port1_out
.8032	49 1f		p1scan         eor  #$1f
.8034	18		               clc
.8035	4a		js_1b0         lsr                 ; On decale js_2 bit 0 dans C
.8036	90 14		               bcc  js_1b1         ; Est-ce vers le haut (U)
.8038	48		               pha                 ; On stock la valeur
.8039	ee bf 83	               inc  js_1flag
.803c	ad bb 83	               lda  js_1pixy       ; Oui!
.803f	38		               sec                 ; On place la Carry a 1
.8040	e9 02		               sbc  #js_yoffset    ; On reduit
.8042	c9 f0		               cmp  #$f0
.8044	90 02		               bcc  sto1ym
.8046	a9 00		               lda  #$00
.8048	8d bb 83	sto1ym         sta  js_1pixy       ; le y
.804b	68		               pla                 ; On recupere la valeur
.804c	4a		js_1b1         lsr                 ; On decale js_2 bit 0 dans C
.804d	90 14		               bcc  js_1b2         ; Est-ce vers le bas (D)
.804f	48		               pha                 ; On stack la valeur
.8050	ee bf 83	               inc  js_1flag
.8053	ad bb 83	               lda  js_1pixy       ; Oui!
.8056	18		               clc                 ; On place la Carry a 0
.8057	69 02		               adc  #js_yoffset    ; On augmente
.8059	c9 c7		               cmp  #199
.805b	90 02		               bcc  sto1yp
.805d	a9 c7		               lda  #199
.805f	8d bb 83	sto1yp         sta  js_1pixy       ; le y
.8062	68		               pla                 ; On recupere la valeur
.8063	4a		js_1b2         lsr                 ; On decale js_1 bit 0 dans C
.8064	90 20		               bcc  js_1b3         ; Est-ce vers la gauche (L)
.8066	48		               pha                 ; On stack la valeur
.8067	ee bf 83	               inc  js_1flag
.806a	ad b9 83	               lda  js_1pixx       ; Oui!
.806d	0d ba 83	               ora  js_1pixx+1
.8070	f0 13		               beq  js_1b2out
.8072	38		               sec                 ; On place la Carry a 1
.8073	ad b9 83	               lda  js_1pixx       ; Oui!
.8076	e9 02		               sbc  #js_xoffset    ; On diminue
.8078	8d b9 83	               sta  js_1pixx       ; le X
.807b	b0 08		               bcs  js_1b2out      ; de offset
.807d	ad ba 83	               lda  js_1pixx+1
.8080	f0 03		               beq  js_1b2out
.8082	ce ba 83	               dec  js_1pixx+1     ; sur 16 bits
.8085	68		js_1b2out      pla                 ; On recupere la valeur
.8086	4a		js_1b3         lsr                 ; On decale js_1 bit 0 dans C
.8087	90 22		               bcc  js_1b4         ; Est-ce vers la droite (R)
.8089	48		               pha                 ; On stack la valeur
.808a	ee bf 83	               inc  js_1flag
.808d	ad ba 83	               lda  js_1pixx+1
.8090	f0 0a		               beq  incj1x
.8092	ad b9 83	               lda  js_1pixx
.8095	c9 3c		               cmp  #$40-4
.8097	30 03		               bmi  incj1x
.8099	4c aa 80	               jmp  js_1b3out
.809c	18		incj1x         clc                 ; On place la Carry a 0
.809d	ad b9 83	               lda  js_1pixx
.80a0	69 02		               adc  #js_xoffset    ; On augmente
.80a2	8d b9 83	               sta  js_1pixx       ; le X
.80a5	90 03		               bcc  js_1b3out      ; de offset
.80a7	ee ba 83	               inc  js_1pixx+1     ; sur 16 bits
.80aa	68		js_1b3out      pla                 ; On recupere la valeur
.80ab	68		js_1b4         pla                 ; On recupere la valeur
.80ac	4a		               lsr                 ; Est-ce le bbouton fire (F)
.80ad	90 06		               bcc  port1_out      ; Oui!
.80af	ee bf 83	               inc  js_1flag
.80b2	ee be 83	               inc  js_1fire       ; On augmente le nombre de tir
.80b5	ad bf 83	port1_out      lda  js_1flag
.80b8	f0 08		               beq  out
.80ba	20 97 81	               jsr  js_1correct
.80bd	a9 00		               lda  #0
.80bf	8d bf 83	               sta  js_1flag
.80c2	20 a1 c8	out            jsr  popreg         ; Récupère tous les registres.
.80c5	60		               rts
.80c6			js_2scan
.80c6	20 72 c8	               jsr  pushreg        ; Sauvegarde tous les registres.
.80c9	ad 00 dc	port2          lda  js_2port       ; Lecture du port d'entrées.
.80cc	29 1f		               and  #$1f           ; Masque les bits 7, 6 et 5.
.80ce	49 1f		               eor  #$1f           ; Inverse les bits 4 à 0.
.80d0	8d 57 84	               sta  js_2status     ; Sauvegarde le status en mémoire.
.80d3	c9 00		               cmp  #$00           ; Si des interrupteurs sont appuyé ...
.80d5	d0 03		               bne  p2scan         ; ... on cherche lesquels.
.80d7	4c 6d 81	               jmp  port2_out      ; Si non on sort.
.80da	ee ca 83	p2scan         inc  js_2flag       ; On incrémente le témoin de changement.
.80dd	18		               clc                 ; On met le Carry à 0.
.80de	4a		js_2b0         lsr                 ; On decale js_2 bit 0 dans Carry.
.80df	48		               pha                 ; On stack la valeur décalée.
.80e0	90 0f		               bcc  js_2b1         ; Si pas BTNUP, on vérifi le prochain.
.80e2	ad c6 83	               lda  js_2pixy       ; Oui!
.80e5	38		               sec                 ; On place la Carry a 1.
.80e6	e9 02		               sbc  #js_yoffset    ; Déplace le crs vrs le haut de offset.
.80e8	c9 f0		               cmp  #$f0           ; Si posy plus basse que Viewport NTSC ...
.80ea	90 02		               bcc  sto2ym         ; Si le crs dépasse le bas du viewport ...
.80ec	a9 00		               lda  #$00           ; On le replace en haut.
.80ee	8d c6 83	sto2ym         sta  js_2pixy       ; Sauvegarde La pos. pixel de Y.
.80f1	68		js_2b1         pla                 ; On recupere la valeur du scan décalé.
.80f2	4a		               lsr                 ; On decale js_2 bit 0 dans Carry.
.80f3	48		               pha                 ; On stack la valeur décalée.
.80f4	90 0f		               bcc  js_2b2         ; Si pas BTN-BAS, on vérifi le prochain.
.80f6	ad c6 83	               lda  js_2pixy       ; Oui!
.80f9	18		               clc                 ; On place la Carry a 0.
.80fa	69 02		               adc  #js_yoffset    ; Déplace le crs vrs le bas de offset.
.80fc	c9 c7		               cmp  #199           ; Sommes nous dépassé le bas de l'écran?
.80fe	90 02		               bcc  sto2yp         ; Non, on sauvegarde la position.
.8100	a9 c7		               lda  #199           ; Oui,
.8102	8d c6 83	sto2yp         sta  js_2pixy       ; On bloque le Y à 199.
.8105	68		js_2b2         pla                 ; On recupere la valeur du scan décalé.
.8106	4a		               lsr                 ; On decale js_2 bit 0 dans C
.8107	48		               pha                 ; On stack la valeur décalée.
.8108	90 1b		               bcc  js_2b3         ; Est-ce le bouton gauche (L)
.810a	ad c4 83	               lda  js_2pixx       ; Oui!
.810d	0d c5 83	               ora  js_2pixx+1
.8110	f0 13		               beq  js_2b2out
.8112	38		               sec                 ; On place la Carry a 1
.8113	ad c4 83	               lda  js_2pixx       ; Oui!
.8116	e9 02		               sbc  #js_xoffset    ; On diminue
.8118	8d c4 83	               sta  js_2pixx       ;  le X
.811b	b0 08		               bcs  js_2b2out      ; de offset
.811d	ad c5 83	               lda  js_2pixx+1
.8120	f0 03		               beq  js_2b2out
.8122	ce c5 83	               dec  js_2pixx+1     ; sur 16 bits
.8125			js_2b2out
.8125	68		js_2b3         pla                 ; On recupere la valeur du scan décalé.
.8126	4a		               lsr                 ; On decale js_2 bit 0 dans C
.8127	48		               pha                 ; On stack la valeur décalée.
.8128	90 1d		               bcc  js_2b4         ; Est-ce vers la droite (R)
.812a	ad c5 83	               lda  js_2pixx+1
.812d	f0 0a		               beq  incj2x
.812f	ad c4 83	               lda  js_2pixx
.8132	c9 3e		               cmp  #$40-js_xoffset
.8134	30 03		               bmi  incj2x
.8136	4c 47 81	               jmp  js_2b3out
.8139	18		incj2x         clc                 ; On place la Carry a 0
.813a	ad c4 83	               lda  js_2pixx       ; Oui!
.813d	69 02		               adc  #js_xoffset    ; On augmente
.813f	8d c4 83	               sta  js_2pixx       ;   le X
.8142	90 03		               bcc  js_2b3out      ; de offset
.8144	ee c5 83	               inc  js_2pixx+1     ; sur 16 bits
.8147			js_2b3out
.8147	68		js_2b4         pla                 ; On recupere la valeur du scan décalé.
.8148	4a		               lsr                 ;Estce le bbouton fire (F)
.8149	90 22		               bcc  port2_out      ;Oui!
.814b	ee c9 83	               inc  js_2fire       ; On augmente le nombre de tir
.814e	a9 01		               lda  #%00000001
.8150	8d ce 83	               sta  js_2events
.8153	ad c4 83	               lda  js_2pixx
.8156	8d cb 83	               sta  js_2clickx
.8159	ad c5 83	               lda  js_2pixx+1
.815c	8d cc 83	               sta  js_2clickx+1
.815f	ad c6 83	               lda  js_2pixy
.8162	8d cd 83	               sta  js_2clicky
.8165	ad 30 84	               lda  js_2val16a+1
.8168	49 40		               eor  #%01000000
.816a	8d 30 84	               sta  js_2val16a+1
.816d			port2_out
.816d	20 cc 81	               jsr  js_2correct
.8170	a9 00		               lda  #0
.8172	8d ca 83	               sta  js_2flag
.8175	20 a1 c8	out            jsr  popreg         ; Récupère tous les registres.
.8178			js_corrector
.8178	08		               php
.8179	48		               pha
.817a	ad bf 83	               lda  js_1flag
.817d	f0 08		               beq  check2
.817f	20 97 81	               jsr  js_1correct
.8182	a9 00		               lda  #0
.8184	8d bf 83	               sta  js_1flag
.8187	ad ca 83	check2         lda  js_2flag
.818a	f0 08		               beq  no_update
.818c	20 cc 81	               jsr  js_2correct
.818f	a9 00		               lda  #0
.8191	8d ca 83	               sta  js_2flag
.8194	68		no_update      pla
.8195	28		               plp
.8196	60		               rts
.8197			js_1correct
.8197	08		               php
.8198	48		               pha
.8199	ad b9 83	               lda  js_1pixx
.819c	8d ca 81	               sta  vallsb
.819f	ad ba 83	               lda  js_1pixx+1
.81a2	6a		               ror                 ; ex = %0000000100000001 = 257 pixel
.81a3	6e ca 81	               ror  vallsb         ; Cnnnnnnn      On divise par 8 pc les
.81a6	4e ca 81	               lsr  vallsb         ; 0Cnnnnnn      caracteres de 8 pixels
.81a9	4e ca 81	               lsr  vallsb         ; 00Cnnnnn
.81ac	ad ca 81	               lda  vallsb         ; devient = %00100000 = 32
.81af	8d bc 83	               sta  js_1x
.81b2	ad bb 83	               lda  js_1pixy
.81b5	8d ca 81	               sta  vallsb
.81b8	4e ca 81	               lsr  vallsb         ; Cnnnnnnn     On divise par 8 pc les
.81bb	4e ca 81	               lsr  vallsb         ; 0Cnnnnnn     caracteres de 8 pixels
.81be	4e ca 81	               lsr  vallsb         ; 00Cnnnnn
.81c1	ad ca 81	               lda  vallsb         ; devient = %00100000 = 32
.81c4	8d bd 83	               sta  js_1y
.81c7	68		               pla
.81c8	28		               plp
.81c9	60		               rts
>81ca	00		vallsb          .byte     0
>81cb	00		regx            .byte     0
.81cc			js_2correct
.81cc	08		               php
.81cd	48		               pha
.81ce	ad c4 83	               lda  js_2pixx
.81d1	8d ff 81	               sta  vallsb
.81d4	ad c5 83	               lda  js_2pixx+1
.81d7	6a		               ror                 ; ex = %0000000100000001 = 257 pixel
.81d8	6e ff 81	               ror  vallsb         ; Cnnnnnnn     On divise par 8 pc les
.81db	4e ff 81	               lsr  vallsb         ; 0Cnnnnnn     caracteres de 8 pixels
.81de	4e ff 81	               lsr  vallsb         ; 00Cnnnnn
.81e1	ad ff 81	               lda  vallsb         ; devient = %00100000 = 32
.81e4	8d c7 83	               sta  js_2x
.81e7	ad c6 83	               lda  js_2pixy
.81ea	8d ff 81	               sta  vallsb
.81ed	4e ff 81	               lsr  vallsb         ; Cnnnnnnn     On divise par 8 pc les
.81f0	4e ff 81	               lsr  vallsb         ; 0Cnnnnnn     caracteres de 8 pixels
.81f3	4e ff 81	               lsr  vallsb         ; 00Cnnnnn
.81f6	ad ff 81	               lda  vallsb         ; devient = %00100000 = 32
.81f9	8d c8 83	               sta  js_2y
.81fc	68		               pla
.81fd	28		               plp
.81fe	60		               rts
>81ff	00		vallsb          .byte     0
>8200	00		regx            .byte     0
.8201			js_showvals
.8201	20 91 82	               jsr  js_2showvals
.8204	60		               rts
.8205			js_1showvals
.8205	20 72 c8	               jsr  pushreg        ; Sauvegarde tous les registres.
.8208	ad bc 83	               lda  js_1x
.820b	20 92 ca	               jsr  atohex
.820e	ad 30 ca	               lda  a2hexstr+1
.8211	8d e2 83	               sta  js_1val8+19
.8214	ad 31 ca	               lda  a2hexstr+2
.8217	8d e3 83	               sta  js_1val8+20
.821a	ad b9 83	               lda  js_1pixx
.821d	20 92 ca	               jsr  atohex
.8220	ad 30 ca	               lda  a2hexstr+1
.8223	8d 01 84	               sta  js_1val16+14
.8226	ad 31 ca	               lda  a2hexstr+2
.8229	8d 02 84	               sta  js_1val16+15
.822c	ad ba 83	               lda  js_1pixx+1
.822f	20 92 ca	               jsr  atohex
.8232	ad 30 ca	               lda  a2hexstr+1
.8235	8d ff 83	               sta  js_1val16+12
.8238	ad 31 ca	               lda  a2hexstr+2
.823b	8d 00 84	               sta  js_1val16+13
.823e	ad bd 83	               lda  js_1y
.8241	20 92 ca	               jsr  atohex
.8244	ad 30 ca	               lda  a2hexstr+1
.8247	8d e6 83	               sta  js_1val8+23
.824a	ad 31 ca	               lda  a2hexstr+2
.824d	8d e7 83	               sta  js_1val8+24
.8250	ad bb 83	               lda  js_1pixy
.8253	20 92 ca	               jsr  atohex
.8256	ad 30 ca	               lda  a2hexstr+1
.8259	8d 07 84	               sta  js_1val16+20
.825c	ad 31 ca	               lda  a2hexstr+2
.825f	8d 08 84	               sta  js_1val16+21
.8262	a9 00		               lda  #0
.8264	20 92 ca	               jsr  atohex
.8267	ad 30 ca	               lda  a2hexstr+1
.826a	8d 05 84	               sta  js_1val16+18
.826d	ad 31 ca	               lda  a2hexstr+2
.8270	8d 06 84	               sta  js_1val16+19
.8273	ad be 83	               lda  js_1fire
.8276	20 92 ca	               jsr  atohex
.8279	ad 31 ca	               lda  a2hexstr+2
.827c	8d f0 83	               sta  js_1val8+33
.827f	a2 cf		               ldx  #<js_1val8
.8281	a0 83		               ldy  #>js_1val8
.8283	20 5c 8a	               jsr  putscxy
.8286	a2 f3		               ldx  #<js_1val16
.8288	a0 83		               ldy  #>js_1val16
.828a	20 5c 8a	               jsr  putscxy
.828d	20 a1 c8	out            jsr  popreg         ; Récupère tous les registres.
.8290	60		               rts
.8291			js_2showvals
.8291	20 72 c8	               jsr  pushreg        ; Sauvegarde tous les registres.
.8294	ad c7 83	               lda  js_2x
.8297	20 92 ca	               jsr  atohex
.829a	ad 2f ca	               lda  a2hexstr
.829d	8d 1e 84	               sta  js_2val8+19
.82a0	ad 30 ca	               lda  a2hexstr+1
.82a3	8d 1f 84	               sta  js_2val8+20
.82a6	ad cb 83	               lda  js_2clickx
.82a9	20 92 ca	               jsr  atohex
.82ac	ad 2f ca	               lda  a2hexstr
.82af	8d 4c 84	               sta  js_2val16+14
.82b2	ad 30 ca	               lda  a2hexstr+1
.82b5	8d 4d 84	               sta  js_2val16+15
.82b8	ad cc 83	               lda  js_2clickx+1
.82bb	20 92 ca	               jsr  atohex
.82be	ad 2f ca	               lda  a2hexstr
.82c1	8d 4a 84	               sta  js_2val16+12
.82c4	ad 30 ca	               lda  a2hexstr+1
.82c7	8d 4b 84	               sta  js_2val16+13
.82ca	ad c8 83	               lda  js_2y
.82cd	20 92 ca	               jsr  atohex
.82d0	ad 2f ca	               lda  a2hexstr
.82d3	8d 22 84	               sta  js_2val8+23
.82d6	ad 30 ca	               lda  a2hexstr+1
.82d9	8d 23 84	               sta  js_2val8+24
.82dc	ad cd 83	               lda  js_2clicky
.82df	20 92 ca	               jsr  atohex
.82e2	ad 2f ca	               lda  a2hexstr
.82e5	8d 52 84	               sta  js_2val16+20
.82e8	ad 30 ca	               lda  a2hexstr+1
.82eb	8d 53 84	               sta  js_2val16+21
.82ee	a9 00		               lda  #0
.82f0	20 92 ca	               jsr  atohex
.82f3	ad 2f ca	               lda  a2hexstr
.82f6	8d 50 84	               sta  js_2val16+18
.82f9	ad 30 ca	               lda  a2hexstr+1
.82fc	8d 51 84	               sta  js_2val16+19
.82ff	ad c9 83	               lda  js_2fire
.8302	20 92 ca	               jsr  atohex
.8305	ad 30 ca	               lda  a2hexstr+1
.8308	8d 2c 84	               sta  js_2val8+33
.830b	a2 0b		               ldx  #<js_2val8
.830d	a0 84		               ldy  #>js_2val8
.830f	20 5c 8a	               jsr  putscxy
.8312	a2 2f		               ldx  #<js_2val16a
.8314	a0 84		               ldy  #>js_2val16a
.8316	20 5c 8a	               jsr  putscxy
.8319	a2 3e		               ldx  #<js_2val16
.831b	a0 84		               ldy  #>js_2val16
.831d	20 5c 8a	               jsr  putscxy
.8320	20 a1 c8	out            jsr  popreg         ; Récupère tous les registres.
.8323	60		               rts
.8324			js_updatecurs
.8324	20 72 c8	               jsr  pushreg        ; Sauvegarde tous les registres.
.8327	ad c7 83	running        lda  js_2x
.832a	cd b3 83	               cmp  js_x
.832d	f0 06		               beq     chky
.832f	8d b3 83	               sta  js_x
.8332	ee 86 83	               inc     flag
.8335	ad c8 83	chky           lda  js_2y
.8338	cd b4 83	               cmp  js_y
.833b	f0 06		               beq     chkflag
.833d	8d b4 83	               sta  js_y
.8340	ee 86 83	               inc     flag
.8343	ad 86 83	chkflag        lda  flag
.8346	f0 1e		               beq     showit
.8348	ae b5 83	               ldx  js_oldx
.834b	ac b6 83	               ldy  js_oldy
.834e	20 87 83	               jsr  js_eoraddrxy
.8351	ae b3 83	               ldx  js_x
.8354	ac b4 83	               ldy  js_y
.8357	20 87 83	               jsr  js_eoraddrxy
.835a	ad b3 83	               lda  js_x
.835d	8d b5 83	               sta  js_oldx
.8360	ad b4 83	               lda  js_y
.8363	8d b6 83	               sta  js_oldy
.8366	a9 00		showit         lda  #0
.8368	8d 86 83	               sta  flag
.836b	8d 1e ca	               sta  addr1
.836e	a9 04		               lda  #$04
.8370	8d 1f ca	               sta  addr1+1
.8373	ae b3 83	               ldx  js_x
.8376	ac b4 83	               ldy  js_y
.8379	20 cf c9	               jsr  xy2addr
.837c	ac 20 ca	               ldy  addr2
.837f	ae 21 ca	               ldx  addr2+1
.8382	20 a1 c8	out            jsr  popreg         ; Récupère tous les registres.
.8385	60		               rts
>8386	00		flag            .byte   0
.8387			js_eoraddrxy
.8387	20 04 c8	               jsr  pushall
.838a	20 b1 c9	               jsr  savezp2
.838d	a9 04		               lda  #$04
.838f	8d 1f ca	               sta  addr1+1
.8392	a9 00		               lda  #0
.8394	8d 1e ca	               sta  addr1
.8397	20 cf c9	               jsr  xy2addr
.839a	ac 20 ca	               ldy  addr2
.839d	84 fd		               sty  zpage2
.839f	ae 21 ca	               ldx  addr2+1
.83a2	86 fe		               stx  zpage2+1
.83a4	a0 00		               ldy  #0
.83a6	b1 fd		               lda  (zpage2),y
.83a8	49 40		               eor     #%01000000
.83aa	91 fd		               sta  (zpage2),y
.83ac	20 c0 c9	               jsr  restzp2
.83af	20 3f c8	               jsr  popall
.83b2	60		               rts
>83b3	00		js_x           .byte   0
>83b4	00		js_y           .byte   0
>83b5	ff		js_oldx        .byte   $ff
>83b6	ff		js_oldy        .byte   $ff
>83b7	00		js_oldcar      .byte   0
>83b8	00		js_oldcol      .byte   0
>83b9	00 00		js_1pixx       .word   0
>83bb	00		js_1pixy       .byte   0
>83bc	00		js_1x          .byte   0
>83bd	00		js_1y          .byte   0
>83be	00		js_1fire       .byte   0
>83bf	00		js_1flag       .byte   0
>83c0	00 00		js_1clickx     .word   0
>83c2	00		js_1clicky     .byte   0
>83c3	00		js_1events     .byte   0
>83c4	00 00		js_2pixx       .word   0
>83c6	00		js_2pixy       .byte   0
>83c7	00		js_2x          .byte   0
>83c8	00		js_2y          .byte   0
>83c9	00		js_2fire       .byte   0
>83ca	00		js_2flag       .byte   0
>83cb	00 00		js_2clickx     .word   0
>83cd	00		js_2clicky     .byte   0
>83ce	00		js_2events     .byte   0
=$03			js_txtcol      =       vcyan
=$00			js_txtbak      =       bkcol0
>83cf	03 00 04 05	js_1val8       .byte     js_txtcol,js_txtbak,4,5
>83d3	50 0f 12 14	               .null     "Port 1 (x,y):($00,$00) Fire:(0)"
>83d7	20 31 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>83e7	30 29 20 46 09 12 05 3a 28 30 29 00
>83f3	03 00 0b 07	js_1val16      .byte     js_txtcol,js_txtbak,11,7
>83f7	28 18 2c 19	               .null     "(x,y):($0000,$0000)"
>83fb	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29 00
>840b	03 00 04 0a	js_2val8       .byte     js_txtcol,js_txtbak,4,10
>840f	43 01 12 50	               .null     "CarPos (x,y):($00,$00) Fire:(0)"
>8413	0f 13 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>8423	30 29 20 46 09 12 05 3a 28 30 29 00
>842f	01 00 04 0c	js_2val16a     .byte     vblanc,js_txtbak,4,12
>8433	43 0c 09 03	               .null     "Click pos."
>8437	0b 20 10 0f 13 2e 00
>843e	03 00 10 0c	js_2val16      .byte     js_txtcol,js_txtbak,16,12
>8442	28 18 2c 19	               .null     "(x,y):($0000,$0000)"
>8446	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29 00
>8456	00		js_1status     .byte 0
>8457	00		js_2status     .byte 0

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-spriteman-mc.asm

.8458			sprt_init
.8458	20 04 c8	               jsr  pushall
.845b	ac 7e 88	               ldy  sprt_ptr6+1
.845e	ae 7d 88	               ldx  sprt_ptr6
.8461	ad b3 84	               lda  sprt_ptr
.8464	20 95 85	               jsr  sprt_loadptr
.8467	20 93 c9	               jsr  savezp1
.846a	20 b1 c9	               jsr  savezp2
.846d	ad 15 d0	               lda  vic+$15 ; enable sprite 2
.8470	09 04		               ora  #%00000100
.8472	8d 15 d0	               sta  vic+$15
.8475	a9 0d		               lda  #$0d
.8477	8d fa 07	               sta  $7fa
.847a	ad 71 88	               lda  sprt_ptr0
.847d	85 fb		               sta  zpage1
.847f	ad 72 88	               lda  sprt_ptr0+1
.8482	85 fc		               sta  zpage1+1
.8484	a9 40		               lda  #$40
.8486	85 fd		               sta  zpage2
.8488	a9 03		               lda  #$03
.848a	85 fe		               sta  zpage2+1
.848c	a0 41		               ldy  #65
.848e	b1 fb		               lda  (zpage1),y      ; sprite y offset
.8490	8d d8 85	               sta  sprt_yoffset
.8493	88		               dey
.8494	b1 fb		               lda  (zpage1),y      ; sprite x offset
.8496	8d d7 85	               sta  sprt_xoffset
.8499	88		               dey
.849a	b1 fb		               lda  (zpage1),y      ; sprite color
.849c	8d 29 d0	               sta  $d029
.849f	88		               dey
.84a0	a0 3e		               ldy  #62
.84a2	b1 fb		nextbyte       lda  (zpage1),y
.84a4	91 fd		               sta  (zpage2),y
.84a6	88		               dey
.84a7	d0 f9		               bne  nextbyte
.84a9	20 a2 c9	               jsr  restzp1
.84ac	20 c0 c9	               jsr  restzp2
.84af	20 3f c8	               jsr  popall
.84b2	60		               rts
>84b3	01		sprt_ptr       .byte   $01
.84b4			sprt_calcpos
.84b4	20 72 c8	               jsr  pushreg
.84b7	a9 00		               lda  #0
.84b9	8d da 85	               sta  sprt_x+1
.84bc	8d dc 85	               sta  sprt_y+1
.84bf	ad c5 83	               lda  js_2pixx+1
.84c2	18		               clc
.84c3	2a		               rol
.84c4	2a		               rol
.84c5	8d da 85	               sta  sprt_x+1
.84c8	ad c4 83	               lda  js_2pixx
.84cb	18		               clc
.84cc	6d d7 85	               adc  sprt_xoffset
.84cf	8d d9 85	               sta  sprt_x
.84d2	90 08		               bcc  norepx
.84d4	ad da 85	               lda  sprt_x+1
.84d7	09 04		               ora  #$04
.84d9	8d da 85	               sta  sprt_x+1
.84dc	ad c6 83	norepx         lda  js_2pixy
.84df	18		               clc
.84e0	6d d8 85	               adc  sprt_yoffset
.84e3	8d db 85	               sta  sprt_y
.84e6	20 a1 c8	               jsr  popreg
.84e9	60		               rts
.84ea			sprt_move
.84ea	20 72 c8	               jsr  pushreg
.84ed	20 b4 84	               jsr  sprt_calcpos
.84f0	ad d9 85	               lda  sprt_x
.84f3	8d 04 d0	               sta  vic+$04
.84f6	ad da 85	               lda  sprt_x+1
.84f9	8d 10 d0	               sta  vic+$10
.84fc	ad db 85	               lda  sprt_y
.84ff	8d 05 d0	               sta  vic+$05
.8502	20 09 85	               jsr  sprt_showpos
.8505	20 a1 c8	               jsr  popreg
.8508	60		               rts
.8509			sprt_showpos
.8509	20 04 c8	               jsr  push
.850c	ad d9 85	               lda  sprt_x
.850f	20 92 ca	               jsr  atohex
.8512	ad 2f ca	               lda  a2hexstr
.8515	8d a0 88	               sta  sprite_pos+26
.8518	ad 30 ca	               lda  a2hexstr+1
.851b	8d a1 88	               sta  sprite_pos+27
.851e	ad da 85	               lda  sprt_x+1
.8521	20 92 ca	               jsr  atohex
.8524	ad 2f ca	               lda  a2hexstr
.8527	8d 9e 88	               sta  sprite_pos+24
.852a	ad 30 ca	               lda  a2hexstr+1
.852d	8d 9f 88	               sta  sprite_pos+25
.8530	ad db 85	               lda  sprt_y
.8533	20 92 ca	               jsr  atohex
.8536	ad 2f ca	               lda  a2hexstr
.8539	8d a6 88	               sta  sprite_pos+32
.853c	ad 30 ca	               lda  a2hexstr+1
.853f	8d a7 88	               sta  sprite_pos+33
.8542	a9 00		               lda  #0
.8544	20 92 ca	               jsr  atohex
.8547	ad 2f ca	               lda  a2hexstr
.854a	8d a4 88	               sta  sprite_pos+30
.854d	ad 30 ca	               lda  a2hexstr+1
.8550	8d a5 88	               sta  sprite_pos+31
.8553	a2 86		               ldx  #<sprite_pos
.8555	a0 88		               ldy  #>sprite_pos
.8557	20 5c 8a	               jsr  putscxy
.855a	20 3f c8	               jsr  pop
.855d	60		               rts
.855e			sprt_loadptr2
.855e	20 04 c8	               jsr  push
.8561	aa		               tax
.8562	8e b3 84	               stx  sprt_ptr
.8565	ad 72 88	               lda  sprt_ptr0+1
.8568	8d 94 85	               sta  calcbuff+1
.856b	ad 71 88	               lda  sprt_ptr0
.856e	8d 93 85	               sta  calcbuff
.8571	e0 00		               cpx  #0
.8573	f0 11		               beq  addrok
.8575	ad 93 85	               lda  calcbuff
.8578	18		nextx          clc
.8579	69 42		               adc  #66
.857b	90 03		               bcc  nocarry
.857d	ee 94 85	               inc  calcbuff+1
.8580	8d 93 85	nocarry        sta  calcbuff
.8583	ca		               dex
.8584	d0 f2		               bne  nextx
.8586	ac 94 85	addrok         ldy  calcbuff+1
.8589	ae 93 85	               ldx  calcbuff
.858c	20 af 85	               jsr  sprt_setimage
.858f	20 3f c8	               jsr  pop
.8592	60		               rts
>8593	00 00		calcbuff        .word   $0
.8595			sprt_loadptr
.8595	20 04 c8	               jsr  push
.8598	ad b3 84	               lda  sprt_ptr
.859b	18		               clc
.859c	2a		               rol
.859d	a8		               tay
.859e	b9 71 88	               lda  sprt_ptr0,y
.85a1	aa		               tax
.85a2	b9 72 88	               lda  sprt_ptr0+1,y
.85a5	a8		               tay
.85a6	20 af 85	               jsr  sprt_setimage
.85a9	20 3f c8	               jsr  pop
.85ac	60		               rts
>85ad	00 00		calcbuff        .word   $0
.85af			sprt_setimage
.85af	20 04 c8	               jsr  push
.85b2	20 93 c9	               jsr  savezp1
.85b5	20 b1 c9	               jsr  savezp2
.85b8	84 fc		               sty  zpage1+1
.85ba	86 fb		               stx  zpage1
.85bc	a0 85		               ldy  #>sprt_image
.85be	84 fe		               sty  zpage2+1
.85c0	a0 dd		               ldy  #<sprt_image
.85c2	84 fd		               sty  zpage2
.85c4	a0 42		               ldy  #66
.85c6	b1 fb		nextbyte       lda  (zpage1),y
.85c8	91 fd		               sta  (zpage2),y
.85ca	88		               dey
.85cb	d0 f9		               bne  nextbyte
.85cd	20 c0 c9	               jsr  restzp2
.85d0	20 a2 c9	               jsr  restzp1
.85d3	20 3f c8	               jsr  pop
.85d6	60		               rts
>85d7	00		sprt_xoffset   .byte     $00
>85d8	00		sprt_yoffset   .byte     $00
>85d9	00 00		sprt_x         .word     $0000
>85db	00 00		sprt_y         .word     $0000
>85dd			sprt_image      .fill    66
>861f	00 00 00 00	sprt_crxair    .byte     $00, $00, $00, $00, $00, $00 ; 6
>8623	00 00
>8625	00 66 00 00	               .byte     $00, $66, $00, $00, $3c, $00 ; 12
>8629	3c 00
>862b	00 18 00 00	               .byte     $00, $18, $00, $00, $00, $00 ; 18
>862f	00 00
>8631	00 00 00 00	               .byte     $00, $00, $00, $00, $18, $00 ; 24
>8635	18 00
>8637	80 00 01 c0	               .byte     $80, $00, $01, $c0, $18, $03 ; 30
>863b	18 03
>863d	66 66 66 c0	               .byte     $66, $66, $66, $c0, $18, $03 ; 36
>8641	18 03
>8643	80 00 01 00	               .byte     $80, $00, $01, $00, $18, $00 ; 42
>8647	18 00
>8649	00 00 00 00	               .byte     $00, $00, $00, $00, $00, $00 ; 48
>864d	00 00
>864f	00 18 00 00	               .byte     $00, $18, $00, $00, $3c, $00 ; 54
>8653	3c 00
>8655	00 66 00 00	               .byte     $00, $66, $00, $00, $00, $00 ; 60
>8659	00 00
>865b	00 00 00 01	               .byte     $00, $00, $00, $01, $0c, $28 ; 66,
>865f	0c 28
>8661	80 00 00 e0	sprt_mouse     .byte     $80, $00, $00, $e0, $00, $00 ; 6
>8665	00 00
>8667	b8 00 00 ce	               .byte     $b8, $00, $00, $ce, $00, $00 ; 12
>866b	00 00
>866d	83 80 00 c0	               .byte     $83, $80, $00, $c0, $e0, $00 ; 18
>8671	e0 00
>8673	80 18 00 c0	               .byte     $80, $18, $00, $c0, $3c, $00 ; 24
>8677	3c 00
>8679	80 e0 00 c0	               .byte     $80, $e0, $00, $c0, $60, $00 ; 30
>867d	60 00
>867f	98 30 00 fc	               .byte     $98, $30, $00, $fc, $18, $00 ; 36
>8683	18 00
>8685	c6 0c 00 03	               .byte     $c6, $0c, $00, $03, $06, $00 ; 42
>8689	06 00
>868b	01 9c 00 00	               .byte     $01, $9c, $00, $00, $f0, $00 ; 48
>868f	f0 00
>8691	00 40 00 00	               .byte     $00, $40, $00, $00, $00, $00 ; 54
>8695	00 00
>8697	00 00 00 00	               .byte     $00, $00, $00, $00, $00, $00 ; 60
>869b	00 00
>869d	00 00 00 01	               .byte     $00, $00, $00, $01, $18, $31 ; 66
>86a1	18 31
>86a3	00 7c 00 01	sprt_pointer   .byte     $00, $7c, $00, $01, $83, $00 ; 6
>86a7	83 00
>86a9	06 10 c0 08	               .byte     $06, $10, $c0, $08, $00, $30 ; 12
>86ad	00 30
>86af	12 10 88 20	               .byte     $12, $10, $88, $20, $00, $08 ; 18
>86b3	00 08
>86b5	40 ba 04 40	               .byte     $40, $ba, $04, $40, $6c, $04 ; 24
>86b9	6c 04
>86bb	80 c6 02 aa	               .byte     $80, $c6, $02, $aa, $82, $aa ; 30
>86bf	82 aa
>86c1	80 c6 02 40	               .byte     $80, $c6, $02, $40, $6c, $04 ; 36
>86c5	6c 04
>86c7	40 ba 04 20	               .byte     $40, $ba, $04, $20, $00, $08 ; 42
>86cb	00 08
>86cd	12 10 90 08	               .byte     $12, $10, $90, $08, $00, $20 ; 48
>86d1	00 20
>86d3	06 10 c0 01	               .byte     $06, $10, $c0, $01, $83, $00 ; 54
>86d7	83 00
>86d9	00 7c 00 00	               .byte     $00, $7c, $00, $00, $00, $00 ; 60
>86dd	00 00
>86df	00 00 00 01	               .byte     $00, $00, $00, $01, $0c, $28 ; 66
>86e3	0c 28
>86e5	55 55 55 aa	sprt_pointer2  .byte     $55, $55, $55, $aa, $aa, $aa ; 6
>86e9	aa aa
>86eb	55 55 55 aa	               .byte     $55, $55, $55, $aa, $aa, $aa ; 12
>86ef	aa aa
>86f1	55 55 55 aa	               .byte     $55, $55, $55, $aa, $aa, $aa ; 18
>86f5	aa aa
>86f7	54 00 55 aa	               .byte     $54, $00, $55, $aa, $00, $2a ; 24
>86fb	00 2a
>86fd	54 00 55 aa	               .byte     $54, $00, $55, $aa, $00, $2a ; 30
>8701	00 2a
>8703	54 00 55 aa	               .byte     $54, $00, $55, $aa, $00, $2a ; 36
>8707	00 2a
>8709	54 00 55 aa	               .byte     $54, $00, $55, $aa, $00, $2a ; 42
>870d	00 2a
>870f	54 00 55 aa	               .byte     $54, $00, $55, $aa, $aa, $aa ; 48
>8713	aa aa
>8715	55 55 55 aa	               .byte     $55, $55, $55, $aa, $aa, $aa ; 54
>8719	aa aa
>871b	55 55 55 aa	               .byte     $55, $55, $55, $aa, $aa, $aa ; 60
>871f	aa aa
>8721	55 55 55 01	               .byte     $55, $55, $55, $01, $0c, $28 ; 66
>8725	0c 28
>8727	06 00 00 0f	sprt_hand      .byte     $06, $00, $00, $0f, $00, $00 ; 6
>872b	00 00
>872d	19 80 00 10	               .byte     $19, $80, $00, $10, $80, $00 ; 12
>8731	80 00
>8733	19 80 00 16	               .byte     $19, $80, $00, $16, $b1, $8c ; 18
>8737	b1 8c
>8739	10 ca 52 10	               .byte     $10, $ca, $52, $10, $84, $21 ; 24
>873d	84 21
>873f	10 84 21 30	               .byte     $10, $84, $21, $30, $84, $21 ; 30
>8743	84 21
>8745	50 84 21 90	               .byte     $50, $84, $21, $90, $84, $21 ; 36
>8749	84 21
>874b	90 00 01 90	               .byte     $90, $00, $01, $90, $00, $01 ; 42
>874f	00 01
>8751	90 7f c1 90	               .byte     $90, $7f, $c1, $90, $00, $01 ; 48
>8755	00 01
>8757	40 ff e2 40	               .byte     $40, $ff, $e2, $40, $00, $02 ; 54
>875b	00 02
>875d	3c 00 04 02	               .byte     $3c, $00, $04, $02, $00, $08 ; 60
>8761	00 08
>8763	03 ff f8 01	               .byte     $03, $ff, $f8, $01, $12, $31 ; 66
>8767	12 31
>8769	00 3e 00 01	sprt_ultraman  .byte     $00, $3e, $00, $01, $c1, $c0 ; 6
>876d	c1 c0
>876f	0e 3e 30 08	               .byte     $0e, $3e, $30, $08, $41, $08 ; 12
>8773	41 08
>8775	10 1c 04 10	               .byte     $10, $1c, $04, $10, $22, $04 ; 18
>8779	22 04
>877b	24 1c 12 23	               .byte     $24, $1c, $12, $23, $00, $62 ; 24
>877f	00 62
>8781	20 08 02 47	               .byte     $20, $08, $02, $47, $c1, $f1 ; 30
>8785	c1 f1
>8787	6a aa ab 47	               .byte     $6a, $aa, $ab, $47, $c9, $f1 ; 36
>878b	c9 f1
>878d	20 08 02 20	               .byte     $20, $08, $02, $20, $14, $02 ; 42
>8791	14 02
>8793	20 00 02 10	               .byte     $20, $00, $02, $10, $00, $04 ; 48
>8797	00 04
>8799	10 7f 04 08	               .byte     $10, $7f, $04, $08, $00, $08 ; 54
>879d	00 08
>879f	06 3e 30 01	               .byte     $06, $3e, $30, $01, $c1, $c0 ; 60
>87a3	c1 c0
>87a5	00 3e 00 01	               .byte     $00, $3e, $00, $01, $0c, $28 ; 66
>87a9	0c 28
>87ab	00 1c 00 00	sprt_male      .byte     $00, $1c, $00, $00, $3e, $00 ; 6
>87af	3e 00
>87b1	00 3e 00 00	               .byte     $00, $3e, $00, $00, $3e, $00 ; 12
>87b5	3e 00
>87b7	00 1c 00 00	               .byte     $00, $1c, $00, $00, $08, $00 ; 18
>87bb	08 00
>87bd	00 ff 80 00	               .byte     $00, $ff, $80, $00, $ff, $80 ; 24
>87c1	ff 80
>87c3	00 be 80 00	               .byte     $00, $be, $80, $00, $9c, $80 ; 30
>87c7	9c 80
>87c9	00 88 80 00	               .byte     $00, $88, $80, $00, $be, $80 ; 36
>87cd	be 80
>87cf	00 be 80 01	               .byte     $00, $be, $80, $01, $9c, $c0 ; 42
>87d3	9c c0
>87d5	01 94 c0 00	               .byte     $01, $94, $c0, $00, $14, $00 ; 48
>87d9	14 00
>87db	00 14 00 00	               .byte     $00, $14, $00, $00, $14, $00 ; 54
>87df	14 00
>87e1	00 36 00 00	               .byte     $00, $36, $00, $00, $77, $00 ; 60
>87e5	77 00
>87e7	00 77 00 01	               .byte     $00, $77 ,$00, $01, $0c, $2f ; 66
>87eb	0c 2f
>87ed	00 3c 00 00	sprt_robot     .byte     $00, $3c, $00, $00, $24, $00 ; 6
>87f1	24 00
>87f3	00 66 18 00	               .byte     $00, $66, $18, $00, $66, $38 ; 12
>87f7	66 38
>87f9	00 24 38 00	               .byte     $00, $24, $38, $00, $3c, $10 ; 18
>87fd	3c 10
>87ff	00 18 10 00	               .byte     $00, $18, $10, $00, $18, $10 ; 24
>8803	18 10
>8805	0f ff f0 08	               .byte     $0f, $ff, $f0, $08, $7e, $00 ; 30
>8809	7e 00
>880b	08 7e 00 08	               .byte     $08, $7e, $00, $08, $18, $00 ; 36
>880f	18 00
>8811	1c 18 00 1c	               .byte     $1c, $18, $00, $1c, $18, $00 ; 42
>8815	18 00
>8817	18 3c 00 00	               .byte     $18, $3c, $00, $00, $3c, $00 ; 48
>881b	3c 00
>881d	00 24 00 00	               .byte     $00, $24, $00, $00, $24, $00 ; 54
>8821	24 00
>8823	00 24 00 03	               .byte     $00, $24, $00, $03, $e7, $c0 ; 60
>8827	e7 c0
>8829	03 e7 c0 01	               .byte     $03, $e7, $c0, $01, $0c, $28 ; 66
>882d	0c 28
>882f	00 1c 00 00	sprt_femme     .byte     $00, $1c, $00, $00, $3e, $00 ; 6
>8833	3e 00
>8835	00 3e 00 00	               .byte     $00, $3e, $00, $00, $3e, $00 ; 12
>8839	3e 00
>883b	00 1c 00 00	               .byte     $00, $1c, $00, $00, $08, $00 ; 18
>883f	08 00
>8841	00 7f 00 00	               .byte     $00, $7f, $00, $00, $ff, $80 ; 24
>8845	ff 80
>8847	00 be 80 00	               .byte     $00, $be, $80, $00, $9c, $80 ; 30
>884b	9c 80
>884d	00 88 80 00	               .byte     $00, $88, $80, $00, $9c, $80 ; 36
>8851	9c 80
>8853	00 be 80 01	               .byte     $00, $be, $80, $01, $be, $c0 ; 42
>8857	be c0
>8859	01 be c0 00	               .byte     $01, $be, $c0, $00, $7f, $00 ; 48
>885d	7f 00
>885f	00 7f 00 00	               .byte     $00, $7f, $00, $00, $ff, $80 ; 54
>8863	ff 80
>8865	00 36 00 00	               .byte     $00, $36, $00, $00, $77, $00 ; 60
>8869	77 00
>886b	00 55 00 01	               .byte     $00, $55 ,$00, $01, $0c, $2f ; 66
>886f	0c 2f
>8871	dd 85		sprt_ptr0      .word     sprt_image + (0*66)
>8873	1f 86		sprt_ptr1      .word     sprt_image + (1*66)
>8875	61 86		sprt_ptr2      .word     sprt_image + (2*66)
>8877	a3 86		sprt_ptr3      .word     sprt_image + (3*66)
>8879	e5 86		sprt_ptr4      .word     sprt_image + (4*66)
>887b	27 87		sprt_ptr5      .word     sprt_image + (5*66)
>887d	69 87		sprt_ptr6      .word     sprt_image + (6*66)
>887f	ab 87		sprt_ptr7      .word     sprt_image + (7*66)
>8881	ed 87		sprt_ptr8      .word     sprt_image + (8*66)
>8883	2f 88		sprt_ptr9      .word     sprt_image + (9*66)
>8885	ff		testbyte       .byte     255
=$07			sprt_txtcol    =         vjaune
=$40			sprt_txtbak    =         bkcol1
=$01			sprt_color     =         vwhite
>8886	07 40 04 0e	sprite_pos     .byte     sprt_txtcol,sprt_txtbak,4,14
>888a	53 10 12 09	               .null     "Sprite pos. (x,y):($0000,$0000)"
>888e	14 05 20 10 0f 13 2e 20 28 18 2c 19 29 3a 28 24
>889e	30 30 30 30 2c 24 30 30 30 30 29 00

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-text-mc.asm

>88aa	00 00		scrptr         .word     $00            ; ... pointe position ecran, ...
>88ac	00 00		colptr         .word     $00            ; ... pointe position couleur, ...
>88ae	01		curcol         .byte     $01            ; ... la couleur du caractère, ...
>88af	06		brdcol         .byte     vbleu          ; ... la couleur de la bordure et
>88b0	00		vicbkcol0      .byte     vnoir  ;$0b    ; 0,
>88b1	02		vicbkcol1      .byte     vrouge ;$0b    ; 1,
>88b2	05		vicbkcol2      .byte     vvert  ;$0b    ; 2,
>88b3	06		vicbkcol3      .byte     vbleu  ;$0b    ; et 3.
>88b4	00		inverse        .byte     $00
>88b5	00 00 00 00	scraddr        .byte     0,0,0,0,0
>88b9	00
>88ba	00 00 00 00	coladdr        .byte     0,0,0,0,0
>88be	00
>88bf	00		bkcol          .byte     %00000000      ; Pointeur de la couleur actuelle
>88c0	00 04		virtaddr       .word     $0400          ; L'adresse de l'ecran virtuel
=$00			bkcol0         =         %00000000      ;
=$40			bkcol1         =         %01000000
=$80			bkcol2         =         %10000000
=$c0			bkcol3         =         %11000000
.88c2			scrmaninit
.88c2	08		               php            ; On sauvegarde les registres
.88c3	48		               pha
.88c4	a9 15		               lda  #%00010101; Selectionne la plage memoire video
.88c6	8d 18 d0	               sta  $d018     ; et le jeu de caracteeres.
.88c9	ad 16 d0	               lda  $d016     ; 53270 Lecture valeur actuelle pour ne
.88cc	09 10		               ora  #%00010000; modifier que le bit 4.
.88ce	29 ef		               and  #%11101111
.88d0	8d 16 d0	               sta  $d016 ; 53270
.88d3	ad 11 d0	               lda  $d011     ; On ne change que le bit 6 pour
.88d6	09 40		               ora  #%01000000; selectionner le md. couleur de
.88d8	8d 11 d0	               sta  $d011     ; 53270   ; fond etendu.
.88db	ad b0 88	               lda  vicbkcol0
.88de	8d 21 d0	               sta  $d021     ; 53281
.88e1	ad b1 88	               lda  vicbkcol1
.88e4	8d 22 d0	               sta  $d022     ; 53282
.88e7	ad b2 88	               lda  vicbkcol2
.88ea	8d 23 d0	               sta  $d023     ; 53283
.88ed	ad b3 88	               lda  vicbkcol3
.88f0	8d 24 d0	               sta  $d024     ; 54284
.88f3	a5 00		               lda  bkcol0    ; On charge et utilise la couleur de ...
.88f5	8d bf 88	               sta  bkcol     ; ... fond par defaut des caracteres.
.88f8	20 52 89	               jsr  cls       ; Finalement on efface l'ecran
.88fb	68		               pla
.88fc	28		               plp
.88fd	60		               rts
.88fe			curshome
.88fe	08		               php                      ; Sauvegarde flags ...
.88ff	48		               pha                      ; ... et accumulateur
.8900	ad c0 88	               lda  virtaddr            ; In replace le pointeur ...
.8903	8d aa 88	               sta  scrptr              ; ... d'écran virtuel à sa ...
.8906	ad c1 88	               lda  virtaddr+1          ; ... position initiale.
.8909	8d ab 88	               sta  scrptr+1
.890c	20 3d 89	               jsr  synccolptr          ; On synchronise le ptr couleur.
.890f	ad b0 88	               lda  vicbkcol0
.8912	8d 21 d0	               sta  $d021               ; On recharge les couleurs ...
.8915	ad b1 88	               lda  vicbkcol1           ; ... de fond par defaut tel ...
.8918	8d 22 d0	               sta  $d022               ; ... que specifie dans les ...
.891b	ad b2 88	               lda  vicbkcol2           ; ... les variables globales.
.891e	8d 23 d0	               sta  $d023
.8921	ad b3 88	               lda  vicbkcol3
.8924	8d 24 d0	               sta  $d024
.8927	68		               pla                      ; Récupère l'accumulateur ...
.8928	28		               plp                      ; ... et les flags
.8929	60		               rts
.892a			incscrptr
.892a	08		               php                      ; Sauvegarde flags ...
.892b	48		               pha                      ; ... et accumulateur
.892c	ee aa 88	               inc  scrptr              ; Incremente le pointeur
.892f	ad aa 88	               lda  scrptr              ; Regarde si on doit faire un ...
.8932	d0 03		               bne  pasdereport         ; ... report dans le MSB
.8934	ee ab 88	               inc  scrptr+1            ; Si oui on fait le repport
.8937	20 3d 89	pasdereport    jsr  synccolptr          ; On synchronise le ptr couleur.
.893a	68		               pla                      ; Récupère l'accumulateur ...
.893b	28		               plp                      ; ... et les flags
.893c	60		               rts
.893d			synccolptr
.893d	08		               php                      ; Sauvegarde flags ...
.893e	48		               pha                      ; ... et accumulateur
.893f	ad aa 88	               lda  scrptr              ; Récupère le LSB du scrptr ...
.8942	8d ac 88	               sta  colptr              ; ... pour le placer dans le colptr.
.8945	ad ab 88	               lda  scrptr+1            ; Récupère le mSB du scrptr, ...
.8948	29 03		               and  #%00000011          ; ... le converti pour pointer ...
.894a	09 d8		               ora  #%11011000          ; ... la RAM couleur ...
.894c	8d ad 88	               sta  colptr+1            ; ... et le sauvegarde.
.894f	68		               pla                      ; Récupère l'accumulateur ...
.8950	28		               plp                      ; ... et les flags
.8951	60		               rts
.8952			cls
.8952	20 04 c8	               jsr  push                ; On sauvegarde les registres
.8955	ad c0 88	               lda  virtaddr            ; On replace le curseur d'ecran à
.8958	8d aa 88	               sta  scrptr
.895b	ad c1 88	               lda  virtaddr+1          ; sa position initiale, ($0400).
.895e	8d ab 88	               sta  scrptr+1
.8961	20 3d 89	               jsr  synccolptr          ; On synchronise la couleur.
.8964	20 13 8b	               jsr  scrptr2zp1          ; L'adresse actuelle dans le ZP1.
.8967	ad af 88	               lda  brdcol              ; On place la couleur ...
.896a	8d 20 d0	               sta  vicbordcol          ; ... de la bordure.
.896d	ad bf 88	               lda  bkcol               ; Associer couleur pour ...
.8970	8d 21 d0	               sta  vicbackcol          ; ... remplir l'ecran ...
.8973	a9 20		               lda  #$20                ; ... de caracteres espace.
.8975	a2 04		               ldx  #4                  ; Quatre blocs de ...
.8977	a0 00		nextline       ldy  #0                  ; ... 256 caracteres.
.8979			nextcar
.8979	91 fb		               sta  (zpage1),y          ;
.897b	a5 fc		               lda  zpage1+1
.897d	48		               pha
.897e	29 03		               and  #%00000011
.8980	09 d8		               ora  #%11011000
.8982	85 fc		               sta  zpage1+1
.8984	a9 00		               lda  #0
.8986	91 fb		               sta  (zpage1),y
.8988	68		               pla
.8989	85 fc		               sta  zpage1+1
.898b	a9 20		               lda  #$20
.898d	88		               dey
.898e	d0 e9		               bne  nextcar
.8990	e6 fc		               inc  zpage1+1
.8992	ca		               dex
.8993	d0 e4		               bne  nextcar
.8995	a9 00		               lda  #$00
.8997	8d aa 88	               sta  scrptr
.899a	a9 04		               lda  #$04
.899c	8d ab 88	               sta  scrptr+1
.899f	20 3d 89	               jsr  synccolptr
.89a2	20 3f c8	               jsr  pop
.89a5	60		               rts
.89a6			setborder
.89a6	08		               php
.89a7	8d af 88	               sta  brdcol
.89aa	8d 20 d0	               sta  vicbordcol
.89ad	28		               plp
.89ae	60		               rts
.89af			setinverse
.89af	08		               php
.89b0	48		               pha
.89b1	a9 80		               lda  #%10000000
.89b3	8d b4 88	               sta  inverse
.89b6	68		               pla
.89b7	28		               plp
.89b8	60		               rts
.89b9			clrinverse
.89b9	08		               php
.89ba	48		               pha
.89bb	a9 00		               lda  #%00000000
.89bd	8d b4 88	               sta  inverse
.89c0	68		               pla
.89c1	28		               plp
.89c2	60		               rts
.89c3			putch
.89c3	20 04 c8	               jsr  push           ; On sauvegarde les registres
.89c6	20 13 8b	               jsr  scrptr2zp1     ; Place le ptr d'ecran sur zp1
.89c9	29 3f		               and  #%00111111     ; Masque des bits 6 et 7 pour la ouleur.
.89cb	48		               pha
.89cc	ad bf 88	               lda  bkcol
.89cf	29 c0		               and  #%11000000
.89d1	8d bf 88	               sta  bkcol
.89d4	68		               pla
.89d5	0d bf 88	               ora  bkcol          ; On y ajoute la couleur du fond.
.89d8	a0 00		               ldy  #$00           ; Met Y à 0
.89da	91 fb		               sta  (zpage1),y     ; Affiche le caractere
.89dc	ae ad 88	               ldx  colptr+1       ; Place le MSB du ptr de couleur
.89df	86 fc		               stx  zpage1+1       ; ... dans le MSB du zp1.
.89e1	ad ae 88	               lda  curcol         ; Charge la couleur voulu dans.
.89e4	91 fb		               sta  (zpage1),y     ; ... la ram de couleur.
.89e6	20 2a 89	               jsr  incscrptr      ; Incremente le pointeur d'ecran.
.89e9	20 3f c8	               jsr  pop            ; Replace tous les registres
.89ec	60		               rts
.89ed			z2putch
.89ed	20 04 c8	               jsr  push           ; On sauvegarde les registres
.89f0	a0 00		               ldy  #$0            ; Met Y à 0
.89f2	b1 fd		               lda  (zpage2),y     ; Charge le caractere
.89f4	20 c3 89	               jsr  putch          ; Appel pour affichage
.89f7	20 3f c8	               jsr  pop            ; Replace tous les registres
.89fa	60		               rts
.89fb			z2puts
.89fb	20 04 c8	               jsr  push           ; On sauvegarde les registres
.89fe	a0 00		               ldy  #$0            ; Met Y à 0
.8a00	b1 fd		nextcar        lda  (zpage2),y     ; Charge le caractere
.8a02	f0 09		               beq  endstr         ; Est-ce le 0 de fin de chaine ?
.8a04	20 ed 89	               jsr  z2putch        ; Appel pour affichage
.8a07	20 77 c9	               jsr  inczp2         ; On pointe zp2 sur le prochain caractere.
.8a0a	4c 00 8a	               jmp  nextcar        ; On passe au prochain
.8a0d	20 3f c8	endstr         jsr  pop            ; Replace tous les registres
.8a10	60		               rts
.8a11			puts
.8a11	20 04 c8	               jsr  push           ; On sauvegarde les registres
.8a14	86 fd		               stx  zpage2         ; On positionne xp2 en fonction de
.8a16	84 fe		               sty  zpage2+1       ; l'adresse reçcu dans X et Y
.8a18	20 fb 89	               jsr  z2puts         ; Appel pour affichage
.8a1b	20 3f c8	               jsr  pop            ; Replace tous les registres
.8a1e	60		               rts
.8a1f			gotoxy
.8a1f	20 04 c8	               jsr  push           ; On sauvegarde les registres
.8a22	20 fe 88	               jsr  curshome       ;  retourne le curseur virtuel a 0,0.
.8a25	c0 00		yagain         cpy  #0             ; Devons nous changer de ligne ?
.8a27	f0 09		               beq  setx           ; Si non, on verifi les colonnes.
.8a29	a9 28		               lda  #40            ; Si oui on ajoute 40
.8a2b	20 b0 8a	               jsr  saddscrptr     ;  à l'adresse du pointeur virtuel autant
.8a2e	88		               dey                 ;  de fois qu'il est spécifié dans y.
.8a2f	4c 25 8a	               jmp  yagain         ; On passe au prochain y.
.8a32	8a		setx           txa                 ; On ajoute la valeur de X
.8a33	20 b0 8a	               jsr  saddscrptr     ;  à l'adresse di pointeur virtuel.
.8a36	20 3d 89	               jsr  synccolptr     ; Synchro du pointeur des couleurs
.8a39	20 3f c8	               jsr  pop            ; Replace tous les registres
.8a3c	60		               rts
.8a3d			putsxy
.8a3d	20 04 c8	               jsr  push           ; On sauvegarde les registres et le zp2
.8a40	86 fd		               stx  zpage2         ; Place l'adr de chaine dans zp2
.8a42	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.8a44	a0 00		               ldy  #0             ; On place le compteur
.8a46	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.8a48	aa		               tax                 ; de A à X
.8a49	20 77 c9	               jsr  inczp2         ; On deplace le pointeur
.8a4c	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.8a4e	a8		               tay                 ; de A à Y
.8a4f	20 1f 8a	               jsr  gotoxy         ; gotoxy : X=col, Y=ligne
.8a52	20 77 c9	               jsr  inczp2         ; On deplace le pointeur
.8a55	20 fb 89	               jsr  z2puts         ; On imprime la chaine
.8a58	20 3f c8	               jsr  pop            ; Replace tous les registres
.8a5b	60		               rts
.8a5c			putscxy
.8a5c	20 04 c8	               jsr  pushall        ; On Sauvegarde registres et zp2
.8a5f	86 fd		               stx  zpage2         ; On place l'adresse de chaine dans zp2
.8a61	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.8a63	a0 00		               ldy  #0             ; Place le compteur
.8a65	b1 fd		               lda  (zpage2),y     ; Charge la couleur
.8a67	8d ae 88	               sta  curcol         ; ... et on la definie
.8a6a	20 77 c9	               jsr  inczp2         ; Pointe le prochain byte
.8a6d	b1 fd		               lda  (zpage2),y     ; Récupere et sauvegarde ...
.8a6f	8d bf 88	               sta  bkcol          ; ... l'index de couleur de fond
.8a72	20 77 c9	               jsr  inczp2         ; Deplace le pointeur
.8a75	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.8a77	aa		               tax                 ; ... de A à X
.8a78	20 77 c9	               jsr  inczp2         ; Deplace le pointeur
.8a7b	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.8a7d	a8		               tay                 ; de A à Y
.8a7e	20 1f 8a	               jsr  gotoxy         ; gotoxy : X=col, y=ligne
.8a81	20 77 c9	               jsr  inczp2         ; Place le ptr en début de chaine
.8a84	20 fb 89	               jsr  z2puts         ; On imprime la chaine
.8a87	20 3f c8	               jsr  popall
.8a8a	60		               rts
.8a8b			setcurcol
.8a8b	08		               php
.8a8c	8d ae 88	               sta  curcol
.8a8f	28		               plp
.8a90	60		               rts
.8a91			setvicbkcol
.8a91	08		               php
.8a92	48		               pha
.8a93	8a		               txa
.8a94	29 03		               and  #$03
.8a96	aa		               tax
.8a97	68		               pla
.8a98	9d b0 88	               sta  vicbkcol0,x
.8a9b	9d 21 d0	               sta  $d021,x
.8a9e	28		               plp
.8a9f	60		               rts
.8aa0			setbkcol
.8aa0	08		               php
.8aa1	48		               pha
.8aa2	0a		               asl
.8aa3	0a		               asl
.8aa4	0a		               asl
.8aa5	0a		               asl
.8aa6	0a		               asl
.8aa7	0a		               asl
.8aa8	29 c0		               and  #$c0
.8aaa	8d bf 88	               sta  bkcol
.8aad	68		               pla
.8aae	28		               plp
.8aaf	60		               rts
.8ab0			saddscrptr
.8ab0	08		               php
.8ab1	48		               pha
.8ab2	18		               clc
.8ab3	6d aa 88	               adc  scrptr
.8ab6	8d aa 88	               sta  scrptr
.8ab9	90 03		               bcc  norep
.8abb	ee ab 88	               inc  scrptr+1
.8abe	68		norep          pla
.8abf	28		               plp
.8ac0	60		               rts
.8ac1			scrptr2str
.8ac1	20 04 c8	               jsr  push
.8ac4	ad ab 88	               lda  scrptr+1
.8ac7	48		               pha
.8ac8	20 8b ca	               jsr  lsra4bits
.8acb	20 7f ca	               jsr  nibtohex
.8ace	8d b5 88	               sta  scraddr
.8ad1	68		               pla
.8ad2	20 8b ca	               jsr  lsra4bits
.8ad5	20 7f ca	               jsr  nibtohex
.8ad8	8d b6 88	               sta  scraddr+1
.8adb	ad ab 88	               lda  scrptr+1
.8ade	48		               pha
.8adf	20 8b ca	               jsr  lsra4bits
.8ae2	20 7f ca	               jsr  nibtohex
.8ae5	8d b5 88	               sta  scraddr
.8ae8	68		               pla
.8ae9	20 8b ca	               jsr  lsra4bits
.8aec	20 7f ca	               jsr  nibtohex
.8aef	8d b6 88	               sta  scraddr+1
.8af2	ad aa 88	               lda  scrptr
.8af5	48		               pha
.8af6	20 8b ca	               jsr  lsra4bits
.8af9	20 7f ca	               jsr  nibtohex
.8afc	8d b7 88	               sta  scraddr+2
.8aff	8d bc 88	               sta  coladdr+2
.8b02	68		               pla
.8b03	20 8b ca	               jsr  lsra4bits
.8b06	20 7f ca	               jsr  nibtohex
.8b09	8d b8 88	               sta  scraddr+3
.8b0c	8d bd 88	               sta  coladdr+3
.8b0f	20 3f c8	               jsr  pop
.8b12	60		               rts
.8b13			scrptr2zp1
.8b13	08		               php
.8b14	48		               pha
.8b15	ad aa 88	               lda  scrptr
.8b18	85 fb		               sta  zpage1
.8b1a	ad ab 88	               lda  scrptr+1
.8b1d	85 fc		               sta  zpage1+1
.8b1f	68		               pla
.8b20	28		               plp
.8b21	60		               rts
.8b22			colptr2zp1
.8b22	08		               php
.8b23	48		               pha
.8b24	ad ac 88	               lda  colptr
.8b27	85 fb		               sta  zpage1
.8b29	ad ad 88	               lda  colptr+1
.8b2c	85 fc		               sta  zpage1+1
.8b2e	68		               pla
.8b2f	28		               plp
.8b30	60		               rts
.8b31			scrptr2zp2
.8b31	08		               php
.8b32	48		               pha
.8b33	ad aa 88	               lda  scrptr
.8b36	85 fd		               sta  zpage2
.8b38	ad ab 88	               lda  scrptr+1
.8b3b	85 fe		               sta  zpage2+1
.8b3d	68		               pla
.8b3e	28		               plp
.8b3f	60		               rts
.8b40			colptr2zp2
.8b40	08		               php
.8b41	48		               pha
.8b42	ad ac 88	               lda  colptr
.8b45	85 fd		               sta  zpage2
.8b47	ad ad 88	               lda  colptr+1
.8b4a	85 fe		               sta  zpage2+1
.8b4c	68		               pla
.8b4d	28		               plp
.8b4e	60		               rts
.8b4f			putrahex
.8b4f	08		               php
.8b50	48		               pha
.8b51	20 92 ca	               jsr     atohex
.8b54	a2 2a		               ldx     #<a2hexcol
.8b56	a0 ca		               ldy     #>a2hexcol
.8b58	20 11 8a	               jsr     puts
.8b5b	68		               pla
.8b5c	28		               plp
.8b5d	60		               rts
.8b5e			putrahexxy
.8b5e	08		               php
.8b5f	48		               pha
.8b60	20 92 ca	               jsr  atohex
.8b63	a9 2c		               lda  #<a2hexpos
.8b65	a0 ca		               ldy  #>a2hexpos
.8b67	20 3d 8a	               jsr  putsxy
.8b6a	68		               pla
.8b6b	28		               plp
.8b6c	60		               rts
.8b6d			putrahexcxy
.8b6d	08		               php
.8b6e	68		               pla
.8b6f	20 92 ca	               jsr  atohex
.8b72	a9 2c		               lda  #<a2hexpos
.8b74	a0 ca		               ldy  #>a2hexpos
.8b76	20 5c 8a	               jsr  putscxy
.8b79	68		               pla
.8b7a	28		               plp
.8b7b	60		               rts

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>c800	00		rp        .byte     0
>c801	00		ra        .byte     0
>c802	00 00		pc        .word     0
.c804			pushall
.c804			push
.c804	08		          php            ; stack : flg, pcl, pch
.c805	78		          sei
.c806	8d 01 c8	          sta  ra        ; save a
.c809	68		          pla            ; stack : pcl, pch
.c80a	8d 00 c8	          sta  rp        ; save rp
.c80d	68		          pla            ; stack : pch
.c80e	8d 02 c8	          sta  pc        ; save pcl
.c811	68		          pla            ; stack : -
.c812	8d 03 c8	          sta  pc+1      ; save pch
.c815	a5 fb		          lda  zpage1    ; get zpage1 low byte
.c817	48		          pha            ; stack : zp1l
.c818	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.c81a	48		          pha            ; stack : zp1h, zp1l
.c81b	a5 fd		          lda  zpage2    ; get zpage2 low byte
.c81d	48		          pha            ; stack : zp2l, zp1h, zp1l
.c81e	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.c820	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.c821	ad 00 c8	          lda  rp        ; get rp
.c824	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c825	ad 01 c8	          lda  ra        ; get a
.c828	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c829	8a		          txa            ; get x
.c82a	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c82b	98		          tya            ; get y
.c82c	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c82d	ad 03 c8	          lda  pc+1      ; get pch
.c830	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c831	ad 02 c8	          lda  pc        ; get pcl
.c834	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c835	ad 00 c8	          lda  rp        ; get rp
.c838	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c839	ad 01 c8	          lda  ra        ; get a
.c83c	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c83d	58		          cli
.c83e	60		          rts
.c83f			pullall
.c83f			pull
.c83f			popall
.c83f			pop
.c83f	78		          sei
.c840	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c841	8d 02 c8	          sta  pc        ; save pcl
.c844	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c845	8d 03 c8	          sta  pc+1      ; save pch
.c848	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c849	a8		          tay            ; set y
.c84a	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c84b	aa		          tax            ; set x
.c84c	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c84d	8d 01 c8	          sta  ra        ; save a
.c850	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c851	8d 00 c8	          sta  rp        ; save rp
.c854	68		          pla            ; stack : zp2l, zp1h, zp1l
.c855	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.c857	68		          pla            ; stack : zp1h, zp1l
.c858	85 fd		          sta  zpage2    ; get zpage2 High byte
.c85a	68		          pla            ; stack : zp1l
.c85b	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.c85d	68		          pla            ; stack :
.c85e	85 fb		          sta  zpage1    ; get zpage1 High byte
.c860	ad 03 c8	          lda  pc+1      ; get pch
.c863	48		          pha            ; stack : pch
.c864	ad 02 c8	          lda  pc
.c867	48		          pha            ; stack : pcl, pch
.c868	ad 00 c8	          lda  rp        ; get rp
.c86b	48		          pha            ; stack : rp, pcl, pch
.c86c	ad 01 c8	          lda  ra        ; set ra
.c86f	58		          cli
.c870	28		          plp            ; stack : pcl, pch
.c871	60		          rts
.c872			pushreg
.c872	08		          php            ; stack : flg, pcl, pch
.c873	78		          sei
.c874	8d 01 c8	          sta  ra        ; save a
.c877	68		          pla            ; stack : pcl, pch
.c878	8d 00 c8	          sta  rp        ; save rp
.c87b	68		          pla            ; stack : pch
.c87c	8d 02 c8	          sta  pc        ; save pcl
.c87f	68		          pla            ; stack : -
.c880	8d 03 c8	          sta  pc+1      ; save pch
.c883	ad 00 c8	          lda  rp        ; get rp
.c886	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c887	ad 01 c8	          lda  ra        ; get a
.c88a	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c88b	8a		          txa            ; get x
.c88c	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c88d	98		          tya            ; get y
.c88e	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c88f	ad 03 c8	          lda  pc+1      ; get pch
.c892	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c893	ad 02 c8	          lda  pc        ; get pcl
.c896	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c897	ad 00 c8	          lda  rp        ; get rp
.c89a	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c89b	ad 01 c8	          lda  ra        ; get a
.c89e	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c89f	58		          cli
.c8a0	60		          rts
.c8a1			pullreg
.c8a1			popreg
.c8a1	78		          sei
.c8a2	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c8a3	8d 02 c8	          sta  pc        ; save pcl
.c8a6	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c8a7	8d 03 c8	          sta  pc+1      ; save pch
.c8aa	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c8ab	a8		          tay            ; set y
.c8ac	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c8ad	aa		          tax            ; set x
.c8ae	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c8af	8d 01 c8	          sta  ra        ; save a
.c8b2	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c8b3	8d 00 c8	          sta  rp        ; save rp
.c8b6	ad 03 c8	          lda  pc+1      ; get pch
.c8b9	48		          pha            ; stack : pch
.c8ba	ad 02 c8	          lda  pc
.c8bd	48		          pha            ; stack : pcl, pch
.c8be	ad 00 c8	          lda  rp        ; get rp
.c8c1	48		          pha            ; stack : rp, pcl, pch
.c8c2	ad 01 c8	          lda  ra        ; set ra
.c8c5	58		          cli
.c8c6	28		          plp            ; stack : pcl, pch
.c8c7	60		          rts

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.c8c8			blkfill
.c8c8	20 04 c8	bf0            jsr  push
.c8cb	20 93 c9	               jsr  savezp1
.c8ce	84 fc		               sty  zpage1+1
.c8d0	a0 00		               ldy  #$00
.c8d2	84 fb		               sty  zpage1
.c8d4	91 fb		bf1            sta  (zpage1),y
.c8d6	c8		               iny
.c8d7	d0 fb		               bne  bf1
.c8d9	20 a2 c9	               jsr  restzp1
.c8dc	20 3f c8	               jsr  pop
.c8df	60		               rts
.c8e0			memfill
.c8e0	20 04 c8	               jsr  push
.c8e3	20 c8 c8	mf1            jsr  blkfill
.c8e6	c8		               iny
.c8e7	ca		               dex
.c8e8	d0 f9		               bne  mf1
.c8ea	20 3f c8	               jsr  pop
.c8ed	60		               rts
.c8ee			memmove
.c8ee	20 04 c8	               jsr  push
.c8f1	ba		               tsx            ; On se crée un pointeur ...
.c8f2	8a		               txa
.c8f3	18		               clc
.c8f4	69 0b		               adc  #11
.c8f6	a8		               tay
.c8f7	a2 06		               ldx  #$06
.c8f9	b9 00 01	nextbyte       lda  $0100,y
.c8fc	99 48 c9	               sta  words,y
.c8ff	c8		               iny
.c900	ca		               dex
.c901	d0 f6		               bne  nextbyte
.c903	ad 48 c9	               lda  s
.c906	8d 1f c9	               sta  source+1
.c909	ad 49 c9	               lda  s+1
.c90c	8d 20 c9	               sta  source+2
.c90f	ad 4a c9	               lda  d
.c912	8d 1c c9	               sta  destin+1
.c915	ad 4b c9	               lda  d+1
.c918	8d 1d c9	               sta  destin+2
.c91b	ad ff ff	destin         lda  $ffff
.c91e	8d ff ff	source         sta  $ffff
.c921	ee 1c c9	               inc  destin+1
.c924	d0 03		               bne  src
.c926	ee 1d c9	               inc  destin+2
.c929	ee 1f c9	src            inc  source+1
.c92c	d0 03		               bne  cnt
.c92e	ee 20 c9	               inc  source+2
.c931	ad 4c c9	cnt            lda  compte
.c934	d0 08		               bne  decit
.c936	ad 4d c9	               lda  compte+1
.c939	f0 09		               beq  fini
.c93b	ce 4d c9	               dec  compte+1
.c93e	ce 4c c9	decit          dec  compte
.c941	4c 1b c9	               jmp  destin
.c944	20 3f c8	fini           jsr  pop
.c947	60		               rts
.c948			words
>c948	00 00		s         .word     $0000
>c94a	00 00		d         .word     $0000
>c94c	00 00		compte    .word     $0000
.c94e			decword
.c94e	20 04 c8	               jsr  push
.c951	86 fd		               stx  zpage2
.c953	84 fe		               sty  zpage2+1
.c955	20 3f c8	               jsr  pop
.c958	60		               rts
.c959			inczpage1
.c959			inczp1
.c959	08		               php
.c95a	48		               pha
.c95b	e6 fb		               inc  zpage1
.c95d	a5 fb		               lda  zpage1
.c95f	d0 02		               bne  nopage
.c961	e6 fc		               inc  zpage1+1
.c963	68		nopage         pla
.c964	28		               plp
.c965	60		               rts
.c966			deczpage1
.c966			deczp1
.c966	08		               php
.c967	48		               pha
.c968	c6 fb		               dec  zpage1
.c96a	a5 fb		               lda  zpage1
.c96c	c9 ff		               cmp  #$ff
.c96e	f0 02		               beq  report
.c970	d0 02		               bne  nopage
.c972	c6 fc		report         dec  zpage1+1
.c974	68		nopage         pla
.c975	28		               plp
.c976	60		               rts
.c977			inczpage2
.c977			inczp2
.c977	08		               php
.c978	48		               pha
.c979	e6 fd		               inc  zpage2
.c97b	a5 fd		               lda  zpage2
.c97d	d0 02		               bne  nopage
.c97f	e6 fe		               inc  zpage2+1
.c981	68		nopage         pla
.c982	28		               plp
.c983	60		               rts
.c984			deczpage2
.c984			deczp2
.c984	08		               php
.c985	c6 fd		               dec  zpage2
.c987	a5 fd		               lda  zpage2
.c989	c9 ff		               cmp  #$ff
.c98b	f0 02		               beq  report
.c98d	d0 02		               bne  nopage
.c98f	c6 fe		report         dec  zpage2+1
.c991	28		nopage         plp
.c992	60		               rts
.c993			savezp1
.c993	08		               php
.c994	48		               pha
.c995	a5 fb		               lda  zpage1
.c997	8d 24 ca	               sta  zp1
.c99a	a5 fc		               lda  zpage1+1
.c99c	8d 25 ca	               sta  zp1+1
.c99f	68		               pla
.c9a0	28		               plp
.c9a1	60		               rts
.c9a2			restzp1
.c9a2	08		               php
.c9a3	48		               pha
.c9a4	ad 24 ca	               lda  zp1
.c9a7	85 fb		               sta  zpage1
.c9a9	ad 25 ca	               lda  zp1+1
.c9ac	85 fc		               sta  zpage1+1
.c9ae	68		               pla
.c9af	28		               plp
.c9b0	60		               rts
.c9b1			savezp2
.c9b1	08		               php
.c9b2	48		               pha
.c9b3	a5 fd		               lda  zpage2
.c9b5	8d 26 ca	               sta  zp2
.c9b8	a5 fe		               lda  zpage2+1
.c9ba	8d 27 ca	               sta  zp2+1
.c9bd	68		               pla
.c9be	28		               plp
.c9bf	60		               rts
.c9c0			restzp2
.c9c0	08		               php
.c9c1	48		               pha
.c9c2	ad 26 ca	               lda  zp2
.c9c5	85 fd		               sta  zpage2
.c9c7	ad 27 ca	               lda  zp2+1
.c9ca	85 fe		               sta  zpage2+1
.c9cc	68		               pla
.c9cd	28		               plp
.c9ce	60		               rts
.c9cf			xy2addr
.c9cf	08		               php
.c9d0	48		               pha
.c9d1	8a		               txa
.c9d2	48		               pha
.c9d3	98		               tya
.c9d4	48		               pha
.c9d5	ad 1f ca	               lda  addr1+1
.c9d8	8d 21 ca	               sta  addr2+1
.c9db	ad 1e ca	               lda  addr1
.c9de	8d 20 ca	               sta  addr2
.c9e1	c0 00		               cpy  #$00
.c9e3	f0 0f		               beq  addx
.c9e5	18		moreline       clc
.c9e6	6d 1d ca	               adc  ymult
.c9e9	90 03		               bcc  norepy
.c9eb	ee 21 ca	               inc  addr2+1
.c9ee	8d 20 ca	norepy         sta  addr2
.c9f1	88		               dey
.c9f2	d0 f1		               bne  moreline
.c9f4	8a		addx           txa
.c9f5	18		               clc
.c9f6	6d 20 ca	               adc  addr2
.c9f9	90 03		               bcc  thatsit
.c9fb	ee 21 ca	               inc  addr2+1
.c9fe	8d 20 ca	thatsit        sta  addr2
.ca01	68		               pla
.ca02	a8		               tay
.ca03	68		               pla
.ca04	aa		               tax
.ca05	68		               pla
.ca06	28		               plp
.ca07	60		               rts
.ca08			loop
.ca08	ce 28 ca	               dec  loopcount
.ca0b	d0 03		               bne  norep
.ca0d	ce 29 ca	               dec  loopcount+1
.ca10	ad 28 ca	norep          lda  loopcount
.ca13	c9 00		               cmp  #$00
.ca15	d0 05		               bne  out
.ca17	4d 29 ca	               eor  loopcount+1
.ca1a	c9 ff		               cmp  #$ff
.ca1c	60		out            rts
>ca1d	28		ymult          .byte     40
>ca1e	00 00		addr1          .word     $0000
>ca20	00 00		addr2          .word     $0000
>ca22	00 00		bytecnt        .word     $0000
>ca24	00 00		zp1            .word     $0000
>ca26	00 00		zp2            .word     $0000
>ca28	00 00		loopcount      .word     $0000

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>ca2a	01		a2hexcol       .byte     1              ; pour aputscxy
>ca2b	00		a2hexbkcol     .byte     %00000000
.ca2c			a2hexpos
>ca2c	00		a2hexpx        .byte     0              ; pour aputsxy
>ca2d	00		a2hexpy        .byte     0
>ca2e	24		a2hexprefix    .byte     "$"            ; pour aputs
>ca2f	00 00		a2hexstr       .word     $00
>ca31	00 00		               .word     $00
>ca33	00		               .byte     0              ; 0 end string
>ca34	01		abincol        .byte     1
>ca35	00		abinbkcol      .byte     %00000000
>ca36	30 30 30 30	abin           .null     "00000000"
>ca3a	30 30 30 30 00
>ca3f	20 20 20 00	adec           .null     "   "
.ca43			putahexfmtxy
.ca43	20 04 c8	               jsr  push
.ca46	20 92 ca	               jsr  atohex
.ca49	ae 2c ca	               ldx  a2hexpx
.ca4c	ac 2d ca	               ldy  a2hexpy
.ca4f	20 1f 8a	               jsr  gotoxy
.ca52	a2 2e		               ldx  #<a2hexprefix
.ca54	a0 ca		               ldy  #>a2hexprefix
.ca56	20 11 8a	               jsr  puts
.ca59	20 3f c8	               jsr  pop
.ca5c	60		               rts
.ca5d			putahexfmt
.ca5d	20 04 c8	               jsr  push
.ca60	20 92 ca	               jsr  atohex
.ca63	a2 2e		               ldx  #<a2hexprefix
.ca65	a0 ca		               ldy  #>a2hexprefix
.ca67	20 11 8a	               jsr  puts
.ca6a	20 3f c8	               jsr  pop
.ca6d	60		               rts
.ca6e			putahex
.ca6e	20 04 c8	               jsr  push
.ca71	20 92 ca	               jsr  atohex
.ca74	a2 2f		               ldx  #<a2hexstr
.ca76	a0 ca		               ldy  #>a2hexstr
.ca78	20 11 8a	               jsr  puts
.ca7b	20 3f c8	               jsr  pop
.ca7e	60		               rts
.ca7f			nibtohex
.ca7f	08		               php
.ca80	29 0f		               and  #$0f
.ca82	f8		               sed
.ca83	18		               clc
.ca84	69 90		               adc  #$90
.ca86	69 40		               adc  #$40
.ca88	d8		               cld
.ca89	28		               plp
.ca8a	60		               rts
.ca8b			lsra4bits
.ca8b	08		               php
.ca8c	4a		               lsr
.ca8d	4a		               lsr
.ca8e	4a		               lsr
.ca8f	4a		               lsr
.ca90	28		               plp
.ca91	60		               rts
.ca92			atohex
.ca92	08		               php
.ca93	48		               pha
.ca94	48		               pha
.ca95	20 8b ca	               jsr  lsra4bits
.ca98	20 7f ca	               jsr  nibtohex
.ca9b	8d 2f ca	               sta  a2hexstr
.ca9e	68		               pla
.ca9f	20 7f ca	               jsr  nibtohex
.caa2	8d 30 ca	               sta  a2hexstr+1
.caa5	a9 00		               lda  #$00                ; set end of string
.caa7	8d 31 ca	               sta  a2hexstr+2
.caaa	68		               pla
.caab	28		               plp
.caac	60		               rts
.caad			xy2hex
.caad	20 04 c8	               jsr  push
.cab0	20 92 ca	               jsr  atohex
.cab3	8a		               txa
.cab4	48		               pha
.cab5	20 8b ca	               jsr  lsra4bits
.cab8	20 7f ca	               jsr  nibtohex
.cabb	8d 2f ca	               sta  a2hexstr
.cabe	68		               pla
.cabf	20 7f ca	               jsr  nibtohex
.cac2	8d 30 ca	               sta  a2hexstr+1
.cac5	98		               tya
.cac6	48		               pha
.cac7	20 8b ca	               jsr  lsra4bits
.caca	20 7f ca	               jsr  nibtohex
.cacd	8d 31 ca	               sta  a2hexstr+2
.cad0	68		               pla
.cad1	20 7f ca	               jsr  nibtohex
.cad4	8d 32 ca	               sta  a2hexstr+3
.cad7	a9 00		               lda  #$00                ; 0 ended string
.cad9	8d 33 ca	               sta  a2hexstr+4
.cadc	20 3f c8	               jsr  pop
.cadf			atobin
.cadf	20 04 c8	               jsr  push
.cae2	a2 08		               ldx  #8
.cae4	a0 00		               ldy  #0
.cae6	18		               clc
.cae7	2a		nextbit        rol
.cae8	48		               pha
.cae9	69 00		               adc  #$00
.caeb	29 01		               and  #$01
.caed	20 7f ca	               jsr  nibtohex
.caf0	99 36 ca	               sta  abin,y
.caf3	68		               pla
.caf4	c8		               iny
.caf5	ca		               dex
.caf6	d0 ef		               bne  nextbit
.caf8	a9 00		               lda  #0
.cafa	99 36 ca	               sta  abin,y
.cafd	20 3f c8	               jsr  pull
.cb00	60		               rts
.cb01			abinsetmccol
.cb01	20 72 c8	               jsr  pushreg
.cb04	20 a1 c8	               jsr  popreg
.cb07	60		               rts
.cb08			putabin
.cb08	20 df ca	               jsr     atobin
.cb0b	20 04 c8	               jsr     push
.cb0e	a2 36		               ldx     #<abin
.cb10	a0 ca		               ldy     #>abin
.cb12	20 11 8a	               jsr     puts
.cb15	20 3f c8	               jsr     pop
.cb18	60		               rts
.cb19			printabin
.cb19	20 04 c8	               jsr     push
.cb1c	a2 36		               ldx     #<abin
.cb1e	a0 ca		               ldy     #>abin
.cb20	20 11 8a	               jsr     puts
.cb23	20 3f c8	               jsr     pop
.cb26	60		               rts
.cb27			putabinfmt
.cb27	08		               php
.cb28	48		               pha
.cb29	a9 25		               lda     #"%"
.cb2b	20 c3 89	               jsr     putch
.cb2e	68		               pla
.cb2f	20 08 cb	               jsr     putabin
.cb32	28		               plp
.cb33	60		               rts
.cb34			putabinxy
.cb34	20 1f 8a	               jsr     gotoxy
.cb37	20 08 cb	               jsr     putabin
.cb3a	60		               rts
.cb3b			putabinfmtxy
.cb3b	20 1f 8a	               jsr     gotoxy
.cb3e	20 27 cb	               jsr     putabinfmt
.cb41	60		               rts
.cb42			atodec
.cb42	20 04 c8	               jsr  push
.cb45	f8		               sed            ; On se place en mode décimal.
.cb46	aa		               tax            ; On déplace a dans x.
.cb47	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.cb49	a9 00		               lda  #$00      ; 0 dans A.
.cb4b	18		nextbit        clc            ; Bit carry a 0.
.cb4c	69 01		               adc  #$01      ; Ajoute 1 a A.
.cb4e	90 01		               bcc  decx      ; Pas de carry, pas de report.
.cb50	c8		               iny            ; On incrémente Y
.cb51	ca		decx           dex            ; X=X-1
.cb52	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.cb54	48		               pha            ; A sur le stack.
.cb55	98		               tya            ; Y dans A (MSB)
.cb56	20 7f ca	               jsr  nibtohex  ; a hex petsci ...
.cb59	8d 3f ca	               sta  adec      ; ... dans tampon.
.cb5c	68		               pla            ; Récupere A
.cb5d	48		               pha            ;
.cb5e	20 7f ca	               jsr  nibtohex
.cb61	8d 41 ca	               sta  adec+2
.cb64	68		               pla
.cb65	6a		               ror
.cb66	6a		               ror
.cb67	6a		               ror
.cb68	6a		               ror
.cb69	20 7f ca	               jsr  nibtohex
.cb6c	8d 40 ca	               sta  adec+1
.cb6f	d8		               cld            ; On revient en mode binaire.
.cb70	20 3f c8	               jsr  pull
.cb73	60		               rts
.cb74			putadec
.cb74	20 04 c8	               jsr  push
.cb77	20 42 cb	               jsr  atodec
.cb7a	a2 3f		               ldx  #<adec
.cb7c	a0 ca		               ldy  #>adec+1
.cb7e	20 11 8a	               jsr  puts
.cb81	20 3f c8	               jsr  pop
.cb84	60		               rts

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs-mc.asm

.cb85			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
.cb85	08		               php                 ; Sauvegarde le registre de status sur stack.
.cb86	8d 7a cd	               sta  rega           ; Sauvegarde Acc en mémoire.
.cb89	68		               pla                 ; Récupère le registre de status du stack.
.cb8a	8d 7d cd	               sta  regp           ; Sauvegarde le registre de status en mémoire.
.cb8d	8e 7b cd	               stx  regx           ; Sauvegarde le registre X en mémoire.
.cb90	8c 7c cd	               sty  regy           ; Sauvegarde le registre Y en mémoire.
.cb93	ba		               tsx                 ; Copie le registre S dans X.
.cb94	8e 7e cd	               stx  regs           ; Sauvegarde le registre S en mémoire.
.cb97	68		               pla                 ; Récupère le MSB de l'adresse de retour ...
.cb98	8d 80 cd	               sta  regpcl         ; ... et le sauvegarde en mémoire ...
.cb9b	8d 82 cd	               sta  regpcl2        ; ... une seconde fois.
.cb9e	68		               pla                 ; Récupère le LSB de l'adresse de retour ...
.cb9f	8d 7f cd	               sta  regpch         ; ... et le sauvegarde en mémoire ...
.cba2	8d 81 cd	               sta  regpch2        ; ... une seconde fois.
.cba5	ad 7a cd	               lda  rega           ; On commence par le registre Acc.
.cba8	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.cba9	20 7f ca	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.cbac	8d 17 cd	               sta  vala+1         ; ... et le place dans la chaine.
.cbaf	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.cbb0	20 8b ca	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.cbb3	20 7f ca	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.cbb6	8d 16 cd	               sta  vala           ; ... et le place dans la chaine.
.cbb9	ad 7c cd	               lda  regy           ; Ensuite, le registre Y.
.cbbc	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.cbbd	20 7f ca	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.cbc0	8d 2e cd	               sta  valy+1         ; ... et le place dans la chaine.
.cbc3	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.cbc4	20 8b ca	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.cbc7	20 7f ca	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.cbca	8d 2d cd	               sta  valy           ; ... et le place dans la chaine.
.cbcd	ad 7b cd	               lda  regx           ; Ensuite, le registre X.
.cbd0	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.cbd1	20 7f ca	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.cbd4	8d 22 cd	               sta  valx+1         ; ... et le place dans la chaine.
.cbd7	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.cbd8	20 8b ca	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.cbdb	20 7f ca	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.cbde	8d 21 cd	               sta  valx           ; ... et le place dans la chaine.
.cbe1	ad 7d cd	               lda  regp           ; Ensuite, le registre de status.
.cbe4	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.cbe5	20 7f ca	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.cbe8	8d 39 cd	               sta  valp+1         ; ... et le place dans la chaine.
.cbeb	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.cbec	20 8b ca	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.cbef	20 7f ca	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.cbf2	8d 38 cd	               sta  valp           ; ... et le place dans la chaine.
.cbf5	ad 7e cd	               lda  regs           ; Ensuite, le pointeur de stack.
.cbf8	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.cbf9	20 7f ca	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.cbfc	8d 44 cd	               sta  vals+1         ; ... et le place dans la chaine.
.cbff	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.cc00	20 8b ca	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.cc03	20 7f ca	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.cc06	8d 43 cd	               sta  vals           ; ... et le place dans la chaine.
.cc09	38		               sec                 ; Prépade le ADC en plaçant 0 dans Carry.
.cc0a	ad 82 cd	               lda  regpcl2        ; On charge la LSB de l'adresse de retour.
.cc0d	69 00		               adc  #$00           ; On y ajoute 1.
.cc0f	90 03		               bcc  noreport       ; Si pas de Carry on ne fait pas de report.
.cc11	ee 81 cd	               inc  regpch2        ; ... en incrémentant le MSB.
.cc14	8d 82 cd	noreport       sta  regpcl2        ; On le sauvegarde.
.cc17	ad 82 cd	               lda  regpcl2        ; On récupère la partie basse du compteur.
.cc1a	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.cc1b	20 7f ca	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.cc1e	8d 54 cd	               sta  valpcl+1       ; ... et lace le code à la position "---X".
.cc21	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.cc22	20 8b ca	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.cc25	20 7f ca	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.cc28	8d 53 cd	               sta  valpcl         ; ... et lace le code à la position "--X-".
.cc2b	ad 81 cd	               lda regpch2         ; On récupère la partie haute du compteur.
.cc2e	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.cc2f	20 7f ca	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.cc32	8d 52 cd	               sta  valpch+1       ; ... et lace le code à la position "-X--".
.cc35	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.cc36	20 8b ca	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.cc39	20 7f ca	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.cc3c	8d 51 cd	               sta  valpch         ; ... et lace le code à la position "X---".
.cc3f	a5 fb		               lda  zpage1         ; On charge le LSB de ZP1 ($fb).
.cc41	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.cc42	20 7f ca	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.cc45	8d 65 cd	               sta  valz1l+1       ; ... et lace le code à la position "---X".
.cc48	68		               pla
.cc49	20 8b ca	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.cc4c	20 7f ca	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.cc4f	8d 64 cd	               sta  valz1l         ; ... et lace le code à la position "--X-".
.cc52	a5 fc		               lda  zpage1+1         ; On charge le MSB de ZP1 ($fc).
.cc54	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.cc55	20 7f ca	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.cc58	8d 63 cd	               sta  valz1h+1       ; ... et lace le code à la position "-X--".
.cc5b	68		               pla
.cc5c	20 8b ca	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.cc5f	20 7f ca	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.cc62	8d 62 cd	               sta  valz1h         ; ... et lace le code à la position "X---".
.cc65	a5 fd		               lda  zpage2         ; On charge le LSB de ZP2 ($fd).
.cc67	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.cc68	20 7f ca	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.cc6b	8d 76 cd	               sta  valz2l+1       ; ... et lace le code à la position "---X".
.cc6e	68		               pla
.cc6f	20 8b ca	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.cc72	20 7f ca	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.cc75	8d 75 cd	               sta  valz2l         ; ... et lace le code à la position "--X-".
.cc78	a5 fe		               lda  zpage2+1       ; On charge le MSB de ZP2 ($fc).
.cc7a	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.cc7b	20 7f ca	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.cc7e	8d 74 cd	               sta  valz2h+1       ; ... et lace le code à la position "-X--".
.cc81	68		               pla
.cc82	20 8b ca	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.cc85	20 7f ca	               jsr  nibtohex
.cc88	8d 73 cd	               sta  valz2h         ; ... et lace le code à la position "X---".
.cc8b	20 72 c8	               jsr  pushreg
.cc8e	a2 0e		               ldx  #<srega
.cc90	a0 cd		               ldy  #>srega
.cc92	20 5c 8a	               jsr  putscxy
.cc95	20 a1 c8	               jsr  popreg
.cc98	20 72 c8	               jsr  pushreg
.cc9b	a2 1a		               ldx  #<sregx
.cc9d	a0 cd		               ldy  #>sregx
.cc9f	20 5c 8a	               jsr  putscxy
.cca2	20 a1 c8	               jsr  popreg
.cca5	20 72 c8	               jsr  pushreg
.cca8	a2 25		               ldx  #<sregy
.ccaa	a0 cd		               ldy  #>sregy
.ccac	20 5c 8a	               jsr  putscxy
.ccaf	20 a1 c8	               jsr  popreg
.ccb2	20 72 c8	               jsr  pushreg
.ccb5	a2 31		               ldx  #<sregp
.ccb7	a0 cd		               ldy  #>sregp
.ccb9	20 5c 8a	               jsr  putscxy
.ccbc	20 a1 c8	               jsr  popreg
.ccbf	20 72 c8	               jsr  pushreg
.ccc2	a2 3c		               ldx  #<sregs
.ccc4	a0 cd		               ldy  #>sregs
.ccc6	20 5c 8a	               jsr  putscxy
.ccc9	20 a1 c8	               jsr  popreg
.cccc	20 72 c8	               jsr  pushreg
.cccf	a2 48		               ldx  #<sregpc
.ccd1	a0 cd		               ldy  #>sregpc
.ccd3	20 5c 8a	               jsr  putscxy
.ccd6	20 a1 c8	               jsr  popreg
.ccd9	20 72 c8	               jsr  pushreg
.ccdc	a2 58		               ldx  #<sregz1
.ccde	a0 cd		               ldy  #>sregz1
.cce0	20 5c 8a	               jsr  putscxy
.cce3	20 a1 c8	               jsr  popreg
.cce6	20 72 c8	               jsr  pushreg
.cce9	a2 69		               ldx  #<sregz2
.cceb	a0 cd		               ldy  #>sregz2
.cced	20 5c 8a	               jsr  putscxy
.ccf0	20 a1 c8	               jsr  popreg
.ccf3	ad 7f cd	               lda  regpch         ; On replace ls MSB l'adresse de retour ...
.ccf6	48		               pha                 ; ... à la bonne position sur la pile.
.ccf7	ad 80 cd	               lda  regpcl         ; On replace ls LSB l'adresse de retour ...
.ccfa	48		               pha                 ; ... à la bonne position sur la pile.
.ccfb	ae 7e cd	               ldx  regs           ; On replace tous les registre à leurs ...
.ccfe	9a		               txs                 ; ...
.ccff	ac 7c cd	               ldy  regy           ; ...
.cd02	ae 7b cd	               ldx  regx           ; ...
.cd05	ad 7d cd	               lda  regp           ; ...
.cd08	48		               pha                 ; ...
.cd09	ad 7a cd	               lda  rega           ; ...
.cd0c	28		               plp                 ; ... valeurs initiales
.cd0d	60		               rts
>cd0e	07 01 17	srega   .byte   cyellow,coln+1,line
>cd11	20 20 01 3a	        .text   '  a:$' ;4,24
>cd15	24
>cd16	00 00 20 00	vala    .byte   0,0,32,0
>cd1a	03 09 17	sregx   .byte   ccyan,coln+9,line
>cd1d	20 18 3a 24	        .text   ' x:$' ;4,24
>cd21	00 00 20 00	valx    .byte   0,0,32,0
>cd25	0d 10 17	sregy   .byte   clightgreen,coln+16,line
>cd28	20 19 3a 20	        .text   ' y: $' ;4,24
>cd2c	24
>cd2d	00 00 20 00	valy    .byte   0,0,32,0
>cd31	08 18 17	sregp   .byte   corange,coln+24,line
>cd34	20 10 3a 24	        .text   ' p:$' ;4,24
>cd38	00 00 20 00	valp    .byte   0,0,32,0
>cd3c	0a 1f 17	sregs   .byte   clightred,coln+31,line
>cd3f	20 13 3a 24	        .text   ' s:$' ;4,24
>cd43	00 00 20 20	vals    .byte   0,0,32,32,0
>cd47	00
>cd48	0e 01 18 20	sregpc  .byte   clightblue,coln+1,line+1,32
>cd4c	20 10 03 3a	        .text   ' pc:$' ;4,24
>cd50	24
>cd51	00 00		valpch  .byte   0,0
>cd53	00 00 20 20	valpcl  .byte   0,0,32,32,0
>cd57	00
>cd58	04 0d 18 20	sregz1  .byte   cpurple,coln+13,line+1,32
>cd5c	20 1a 10 31	        .text   ' zp1:$' ;4,24
>cd60	3a 24
>cd62	00 00		valz1h  .byte   0,0
>cd64	00 00 20 20	valz1l  .byte   0,0,32,32,0
>cd68	00
>cd69	0f 1a 18 20	sregz2  .byte   clightgray,coln+26,line+1,32
>cd6d	20 1a 10 32	        .text   ' zp2:$' ;4,24
>cd71	3a 24
>cd73	00 00		valz2h  .byte   0,0
>cd75	00 00 20 20	valz2l  .byte   0,0,32,32,0
>cd79	00
>cd7a	00		rega    .byte   0
>cd7b	00		regx    .byte   0
>cd7c	00		regy    .byte   0
>cd7d	00		regp    .byte   0
>cd7e	00		regs    .byte   0
>cd7f	00		regpch  .byte   0
>cd80	00		regpcl  .byte   0
>cd81	00		regpch2 .byte   0
>cd82	00		regpcl2 .byte   0
>cd83	00		vzp1h   .byte   0
>cd84	00		vzp1l   .byte   0
>cd85	00		vzp2h   .byte   0
>cd86	00		vzp2l   .byte   0

;******  Return to file: j2tester.asm


;******  End of listing

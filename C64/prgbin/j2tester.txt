
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L j2tester.txt -o j2tester.prg j2tester.asm
; Fri May 23 23:00:03 2025

;Offset	;Hex		;Source

;******  Processing input file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1          .word bcmd2         ;Adresse de la commande basic suivante.
>0803	01 00		               .word 1             ;Numero de la ligne Basic.
>0805	8f		               .byte $8F           ;Le token de la commande REM du Basic
>0806	2a 50 52 4f	               .text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2          .word bcmd3         ;Adresse de la commande basic suivante.
>082b	02 00		               .word 2             ;Numero de la ligne Basic.
>082d	8f		               .byte $8F           ;Le token de la commande REM du Basic
>082e	2a 50 41 52	               .text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3          .word bcmd4         ;Adresse de la commande basic suivante.
>0846	03 00		               .word 3             ;Numero de la ligne Basic.
>0848	9e		               .byte $9e           ;Le token de la commande PRINT du Basic
>0849	30 32 31 32	               .text format("%05d",hpgmstart)
>084d	39
>084e	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4          .word $0000         ;L'adresse de la commande Basic suivante.
.0851	4c 54 08	hpgmstart     jmp   main           ; Le programme principale doit s'appeler "main"

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: j2tester.asm

.0854			main
.0854	20 27 0e	               jsr       scrmaninit
.0857	20 b2 12	               jsr       js_init
.085a	a9 80		               lda       #$80
.085c	8d 13 0e	               sta       curcol
.085f	a9 00		               lda       #0
.0861	8d 21 d0	               sta       vicback0col
.0864	a9 02		               lda       #vrouge
.0866	8d 14 0e	               sta       brdcol
.0869	8d 20 d0	               sta       vicbordcol
.086c	20 b7 0e	               jsr       cls
.086f	a9 20		               lda       #$20
.0871	09 00		               ora       #%00000000
.0873	a0 04		               ldy       #$04
.0875	a2 04		               ldx       #$04
.0877	20 7f 0b	               jsr       memfill
.087a	a9 00		               lda       #$00
.087c	a0 d8		               ldy       #$d8
.087e	20 7f 0b	               jsr       memfill
.0881	20 3d 17	               jsr       sprt_init
.0884	20 14 0f	goagain        jsr       setinverse
.0887	a2 56		               ldx       #<bstring1
.0889	a0 09		               ldy       #>bstring1
.088b	20 c1 0f	               jsr       putscxy
.088e	a2 83		               ldx       #<bstring2
.0890	a0 09		               ldy       #>bstring2
.0892	20 c1 0f	               jsr       putscxy
.0895	a2 b0		               ldx       #<bstring3
.0897	a0 09		               ldy       #>bstring3
.0899	20 c1 0f	               jsr       putscxy
.089c	a2 dd		               ldx       #<bstring4
.089e	a0 09		               ldy       #>bstring4
.08a0	20 c1 0f	               jsr       putscxy
.08a3	20 1e 0f	               jsr       clrinverse
.08a6	a2 f4		               ldx       #<js_status1
.08a8	a0 09		               ldy       #>js_status1
.08aa	20 c1 0f	               jsr       putscxy
.08ad	a2 0c		               ldx       #<js_status2
.08af	a0 0a		               ldy       #>js_status2
.08b1	20 c1 0f	               jsr       putscxy
.08b4	a2 23		               ldx       #<js_status3
.08b6	a0 0a		               ldy       #>js_status3
.08b8	20 c1 0f	               jsr       putscxy
.08bb	a2 3c		               ldx       #<js_status4
.08bd	a0 0a		               ldy       #>js_status4
.08bf	20 c1 0f	               jsr       putscxy
.08c2	a2 55		               ldx       #<js_status5
.08c4	a0 0a		               ldy       #>js_status5
.08c6	20 c1 0f	               jsr       putscxy
.08c9	a2 6b		               ldx       #<js_status6
.08cb	a0 0a		               ldy       #>js_status6
.08cd	20 c1 0f	               jsr       putscxy
.08d0	a2 00		               ldx       #$00
.08d2	a0 0f		               ldy       #$0f
.08d4	20 84 0f	               jsr       gotoxy
.08d7	a9 07		               lda       #vjaune
.08d9	20 f0 0f	               jsr       setcurcol
.08dc	a2 00		               ldx       #$00
.08de	20 05 10	               jsr       setbkcol
.08e1			looper
.08e1	20 c7 12	               jsr       js_scan
.08e4	20 e6 14	               jsr       js_showvals
.08e7	20 c9 17	               jsr       sprt_move
.08ea			loopit
.08ea	a2 16		               ldx       #$16
.08ec	a0 11		               ldy       #$11
.08ee	20 84 0f	               jsr       gotoxy
.08f1	a9 03		               lda       #3
.08f3	20 f0 0f	               jsr       setcurcol
.08f6	ee 55 09	               inc       onebyte
.08f9	ad 55 09	               lda       onebyte
.08fc	ad ae 16	               lda       js_2fire
.08ff	20 b1 0d	               jsr       putabinfmt
.0902	48		               pha
.0903	ad ae 16	               lda       js_2fire
.0906	f0 42		               beq       nochange
.0908	ad 20 d0	               lda       vicbordcol
.090b	18		               clc
.090c	69 00		               adc       #$0
.090e	29 0f		               and       #$0f
.0910	8d 20 d0	               sta       vicbordcol
.0913	ad ad 16	               lda       js_2y
.0916	c9 04		               cmp       #$04
.0918	d0 20		               bne       toborder
.091a	ad ac 16	               lda       js_2x
.091d	c9 0b		               cmp       #$0b
.091f	30 19		               bmi       toborder
.0921	c9 1d		               cmp       #$1d
.0923	10 15		               bpl       toborder
.0925	ee 92 17	               inc       sprt_ptr
.0928	ad 92 17	               lda       sprt_ptr
.092b	20 e1 10	               jsr       showregs
.092e	c9 09		               cmp       #9
.0930	90 02		               bcc       drawsptr
.0932	a9 00		               lda       #$00
.0934	8d 92 17	drawsptr       sta       sprt_ptr
.0937	20 3d 17	               jsr       sprt_init
.093a	ad 20 d0	toborder       lda       vicbordcol
.093d	38		               sec
.093e	69 00		               adc       #0
.0940	29 0f		               and       #$0f
.0942	8d 29 d0	               sta       $d029
.0945	a9 00		               lda       #$00
.0947	8d ae 16	               sta       js_2fire
.094a			nochange
.094a	e8		               inx
.094b	68		               pla
.094c	20 e1 ff	               jsr       kstop
.094f	d0 90		               bne       looper
.0951	20 66 fe	               jsr       k_warmboot
.0954	60		out            rts
>0955	00		onebyte        .byte     0
>0956	0e 40 00 00	bstring1       .byte     vbleu1,bkcol1,0,0
>095a	20 20 20 20	               .text     "      Visualisation du port jeu #2      "
>095e	20 20 56 09 13 15 01 0c 09 13 01 14 09 0f 0e 20
>096e	04 15 20 10 0f 12 14 20 0a 05 15 20 23 32 20 20
>097e	20 20 20 20
>0982	00		               .byte     0
>0983	0b 80 00 01	bstring2       .byte     vgris,bkcol2,0,1
>0987	20 50 12 0f	               .text     " Programme assembleur pour 6502 sur C64 "
>098b	07 12 01 0d 0d 05 20 01 13 13 05 0d 02 0c 05 15
>099b	12 20 10 0f 15 12 20 36 35 30 32 20 13 15 12 20
>09ab	43 36 34 20
>09af	00		               .byte     0
>09b0	0a c0 00 02	bstring3       .byte     vrose,bkcol3,0,2
>09b4	20 20 20 20	               .text     "     par Daniel Lafrance (2024-06) C    "
>09b8	20 10 01 12 20 44 01 0e 09 05 0c 20 4c 01 06 12
>09c8	01 0e 03 05 20 28 32 30 32 34 2d 30 36 29 20 43
>09d8	20 20 20 20
>09dc	00		               .byte     0
>09dd	07 c0 0b 04	bstring4       .byte     vjaune,bkcol3,11,4
>09e1	20 43 08 01	               .text     " Changer pointeur "
>09e5	0e 07 05 12 20 10 0f 09 0e 14 05 15 12 20
>09f3	00		               .byte     0
>09f4	0d 00 13 16	js_status1     .byte     vvert1,bkcol0,19,22
>09f8	20 20 20 15	               .text     "   up <----1> haut "
>09fc	10 20 3c 2d 2d 2d 2d 31 3e 20 08 01 15 14 20
>0a0b	00		               .byte     0
>0a0c	0e 00 13 15	js_status2     .byte     vbleu1,bkcol0,19,21
>0a10	20 04 0f 17	               .text     " down <---2-> bas "
>0a14	0e 20 3c 2d 2d 2d 32 2d 3e 20 02 01 13 20
>0a22	00		               .byte     0
>0a23	0a 00 13 14	js_status3     .byte     vrose,bkcol0,19,20
>0a27	20 0c 05 06	               .text     " left <--4--> gauche"
>0a2b	14 20 3c 2d 2d 34 2d 2d 3e 20 07 01 15 03 08 05
>0a3b	00		               .byte     0
>0a3c	07 00 13 13	js_status4     .byte     vjaune,bkcol0,19,19
>0a40	12 09 07 08	               .text     "right <-8---> droite"
>0a44	14 20 3c 2d 38 2d 2d 2d 3e 20 04 12 0f 09 14 05
>0a54	00		               .byte     0
>0a55	01 00 13 12	js_status5     .byte     vblanc,bkcol0,19,18
>0a59	20 46 09 12	               .text     " Fire <1----> Feu"
>0a5d	05 20 3c 31 2d 2d 2d 2d 3e 20 46 05 15
>0a6a	00		               .byte     0
>0a6b	03 00 01 17	js_status6     .byte     vcyan,bkcol0,1,23
>0a6f	2b 2d 3e 20	               .text     "+-> Etat de JS2:     %---FRLDU EOR #$1F"
>0a73	45 14 01 14 20 04 05 20 4a 53 32 3a 20 20 20 20
>0a83	20 25 2d 2d 2d 46 52 4c 44 55 20 45 4f 52 20 23
>0a93	24 31 46
>0a96	00		               .byte     0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0a97	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0a9b	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0a9f			libtart

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>0a9f	00		rp        .byte     0
>0aa0	00		ra        .byte     0
>0aa1	00 00		pc        .word     0
.0aa3			pushall
.0aa3			push
.0aa3	08		          php            ; stack : flg, pcl, pch
.0aa4	78		          sei
.0aa5	8d a0 0a	          sta  ra        ; save a
.0aa8	68		          pla            ; stack : pcl, pch
.0aa9	8d 9f 0a	          sta  rp        ; save rp
.0aac	68		          pla            ; stack : pch
.0aad	8d a1 0a	          sta  pc        ; save pcl
.0ab0	68		          pla            ; stack : -
.0ab1	8d a2 0a	          sta  pc+1      ; save pch
.0ab4	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0ab6	48		          pha            ; stack : zp1l
.0ab7	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0ab9	48		          pha            ; stack : zp1h, zp1l
.0aba	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0abc	48		          pha            ; stack : zp2l, zp1h, zp1l
.0abd	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0abf	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0ac0	ad 9f 0a	          lda  rp        ; get rp
.0ac3	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0ac4	ad a0 0a	          lda  ra        ; get a
.0ac7	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0ac8	8a		          txa            ; get x
.0ac9	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0aca	98		          tya            ; get y
.0acb	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0acc	ad a2 0a	          lda  pc+1      ; get pch
.0acf	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ad0	ad a1 0a	          lda  pc        ; get pcl
.0ad3	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ad4	ad 9f 0a	          lda  rp        ; get rp
.0ad7	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ad8	ad a0 0a	          lda  ra        ; get a
.0adb	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0adc	58		          cli
.0add	60		          rts
.0ade			pullall
.0ade			pull
.0ade			popall
.0ade			pop
.0ade	78		          sei
.0adf	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ae0	8d a1 0a	          sta  pc        ; save pcl
.0ae3	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ae4	8d a2 0a	          sta  pc+1      ; save pch
.0ae7	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ae8	a8		          tay            ; set y
.0ae9	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0aea	aa		          tax            ; set x
.0aeb	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0aec	8d a0 0a	          sta  ra        ; save a
.0aef	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0af0	8d 9f 0a	          sta  rp        ; save rp
.0af3	68		          pla            ; stack : zp2l, zp1h, zp1l
.0af4	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0af6	68		          pla            ; stack : zp1h, zp1l
.0af7	85 fd		          sta  zpage2    ; get zpage2 High byte
.0af9	68		          pla            ; stack : zp1l
.0afa	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0afc	68		          pla            ; stack :
.0afd	85 fb		          sta  zpage1    ; get zpage1 High byte
.0aff	ad a2 0a	          lda  pc+1      ; get pch
.0b02	48		          pha            ; stack : pch
.0b03	ad a1 0a	          lda  pc
.0b06	48		          pha            ; stack : pcl, pch
.0b07	ad 9f 0a	          lda  rp        ; get rp
.0b0a	48		          pha            ; stack : rp, pcl, pch
.0b0b	ad a0 0a	          lda  ra        ; set ra
.0b0e	58		          cli
.0b0f	28		          plp            ; stack : pcl, pch
.0b10	60		          rts
.0b11			pushreg
.0b11	08		          php            ; stack : flg, pcl, pch
.0b12	78		          sei
.0b13	8d a0 0a	          sta  ra        ; save a
.0b16	68		          pla            ; stack : pcl, pch
.0b17	8d 9f 0a	          sta  rp        ; save rp
.0b1a	68		          pla            ; stack : pch
.0b1b	8d a1 0a	          sta  pc        ; save pcl
.0b1e	68		          pla            ; stack : -
.0b1f	8d a2 0a	          sta  pc+1      ; save pch
.0b22	ad 9f 0a	          lda  rp        ; get rp
.0b25	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0b26	ad a0 0a	          lda  ra        ; get a
.0b29	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0b2a	8a		          txa            ; get x
.0b2b	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b2c	98		          tya            ; get y
.0b2d	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b2e	ad a2 0a	          lda  pc+1      ; get pch
.0b31	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b32	ad a1 0a	          lda  pc        ; get pcl
.0b35	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b36	ad 9f 0a	          lda  rp        ; get rp
.0b39	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b3a	ad a0 0a	          lda  ra        ; get a
.0b3d	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b3e	58		          cli
.0b3f	60		          rts
.0b40			pullreg
.0b40			popreg
.0b40	78		          sei
.0b41	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b42	8d a1 0a	          sta  pc        ; save pcl
.0b45	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b46	8d a2 0a	          sta  pc+1      ; save pch
.0b49	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0b4a	a8		          tay            ; set y
.0b4b	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0b4c	aa		          tax            ; set x
.0b4d	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0b4e	8d a0 0a	          sta  ra        ; save a
.0b51	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0b52	8d 9f 0a	          sta  rp        ; save rp
.0b55	ad a2 0a	          lda  pc+1      ; get pch
.0b58	48		          pha            ; stack : pch
.0b59	ad a1 0a	          lda  pc
.0b5c	48		          pha            ; stack : pcl, pch
.0b5d	ad 9f 0a	          lda  rp        ; get rp
.0b60	48		          pha            ; stack : rp, pcl, pch
.0b61	ad a0 0a	          lda  ra        ; set ra
.0b64	58		          cli
.0b65	28		          plp            ; stack : pcl, pch
.0b66	60		          rts

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0b67			blkfill
.0b67	20 a3 0a	bf0            jsr  push
.0b6a	20 26 0c	               jsr  savezp1
.0b6d	84 fc		               sty  zpage1+1
.0b6f	a0 00		               ldy  #$00
.0b71	84 fb		               sty  zpage1
.0b73	91 fb		bf1            sta  (zpage1),y
.0b75	c8		               iny
.0b76	d0 fb		               bne  bf1
.0b78	20 35 0c	               jsr  restzp1
.0b7b	20 de 0a	               jsr  pop
.0b7e	60		               rts
.0b7f			memfill
.0b7f	20 a3 0a	               jsr  push
.0b82	20 67 0b	mf1            jsr  blkfill
.0b85	c8		               iny
.0b86	ca		               dex
.0b87	d0 f9		               bne  mf1
.0b89	20 de 0a	               jsr  pop
.0b8c	60		               rts
.0b8d			memmove
.0b8d	20 a3 0a	               jsr  push
.0b90	ba		               tsx            ; On se crée un pointeur ...
.0b91	8a		               txa
.0b92	18		               clc
.0b93	69 0b		               adc  #11
.0b95	a8		               tay
.0b96	a2 06		               ldx  #$06
.0b98	b9 00 01	nextbyte       lda  $0100,y
.0b9b	99 e7 0b	               sta  words,y
.0b9e	c8		               iny
.0b9f	ca		               dex
.0ba0	d0 f6		               bne  nextbyte
.0ba2	ad e7 0b	               lda  s
.0ba5	8d be 0b	               sta  source+1
.0ba8	ad e8 0b	               lda  s+1
.0bab	8d bf 0b	               sta  source+2
.0bae	ad e9 0b	               lda  d
.0bb1	8d bb 0b	               sta  destin+1
.0bb4	ad ea 0b	               lda  d+1
.0bb7	8d bc 0b	               sta  destin+2
.0bba	ad ff ff	destin         lda  $ffff
.0bbd	8d ff ff	source         sta  $ffff
.0bc0	ee bb 0b	               inc  destin+1
.0bc3	d0 03		               bne  src
.0bc5	ee bc 0b	               inc  destin+2
.0bc8	ee be 0b	src            inc  source+1
.0bcb	d0 03		               bne  cnt
.0bcd	ee bf 0b	               inc  source+2
.0bd0	ad eb 0b	cnt            lda  compte
.0bd3	d0 08		               bne  decit
.0bd5	ad ec 0b	               lda  compte+1
.0bd8	f0 09		               beq  fini
.0bda	ce ec 0b	               dec  compte+1
.0bdd	ce eb 0b	decit          dec  compte
.0be0	4c ba 0b	               jmp  destin
.0be3	20 de 0a	fini           jsr  pop
.0be6	60		               rts
.0be7			words
>0be7	00 00		s         .word     $0000
>0be9	00 00		d         .word     $0000
>0beb	00 00		compte    .word     $0000
.0bed			decword
.0bed	20 a3 0a	               jsr  push
.0bf0	86 fd		               stx  zpage2
.0bf2	84 fe		               sty  zpage2+1
.0bf4	20 de 0a	               jsr  pop
.0bf7	60		               rts
.0bf8			inczpage1
.0bf8			inczp1
.0bf8	08		               php
.0bf9	48		               pha
.0bfa	e6 fb		               inc  zpage1
.0bfc	a5 fb		               lda  zpage1
.0bfe	d0 02		               bne  nopage
.0c00	e6 fc		               inc  zpage1+1
.0c02	68		nopage         pla
.0c03	28		               plp
.0c04	60		               rts
.0c05			deczpage1
.0c05			deczp1
.0c05	08		                php
.0c06	48		                pha
.0c07	c6 fb		                dec  zpage1
.0c09	d0 02		                bne  nopage
.0c0b	c6 fc		                dec  zpage1+1
.0c0d	68		nopage          pla
.0c0e	28		                plp
.0c0f	60		                rts
.0c10			inczpage2
.0c10			inczp2
.0c10	08		               php
.0c11	48		               pha
.0c12	e6 fd		               inc  zpage2
.0c14	a5 fd		               lda  zpage2
.0c16	d0 02		               bne  nopage
.0c18	e6 fe		               inc  zpage2+1
.0c1a	68		nopage         pla
.0c1b	28		               plp
.0c1c	60		               rts
.0c1d			deczpage2
.0c1d			deczp2
.0c1d	08		               php
.0c1e	c6 fd		               dec  zpage2
.0c20	d0 02		               bne  nopage
.0c22	c6 fe		               dec  zpage2+1
.0c24	28		nopage         plp
.0c25	60		               rts
.0c26			savezp1
.0c26	08		               php
.0c27	48		               pha
.0c28	a5 fb		               lda  zpage1
.0c2a	8d b7 0c	               sta  zp1
.0c2d	a5 fc		               lda  zpage1+1
.0c2f	8d b8 0c	               sta  zp1+1
.0c32	68		               pla
.0c33	28		               plp
.0c34	60		               rts
.0c35			restzp1
.0c35	08		               php
.0c36	48		               pha
.0c37	ad b7 0c	               lda zp1
.0c3a	85 fb		               sta zpage1
.0c3c	ad b8 0c	               lda zp1+1
.0c3f	85 fc		               sta zpage1+1
.0c41	68		               pla
.0c42	28		               plp
.0c43	60		               rts
.0c44			savezp2
.0c44	08		         php
.0c45	48		         pha
.0c46	a5 fd		         lda zpage2
.0c48	8d b9 0c	         sta zp2
.0c4b	a5 fe		         lda zpage2+1
.0c4d	8d ba 0c	         sta zp2+1
.0c50	68		         pla
.0c51	28		         plp
.0c52	60		         rts
.0c53			restzp2
.0c53	08		                php
.0c54	48		                pha
.0c55	ad b9 0c	                lda  zp2
.0c58	85 fd		                sta  zpage2
.0c5a	ad ba 0c	                lda  zp2+1
.0c5d	85 fe		                sta  zpage2+1
.0c5f	68		                pla
.0c60	28		                plp
.0c61	60		                rts
.0c62			xy2addr
.0c62	08		                php
.0c63	48		                pha
.0c64	8a		                txa
.0c65	48		                pha
.0c66	98		                tya
.0c67	48		                pha
.0c68	ad b2 0c	                lda     addr1+1
.0c6b	8d b4 0c	                sta     addr2+1
.0c6e	ad b1 0c	                lda     addr1
.0c71	8d b3 0c	                sta     addr2
.0c74	c0 00		                cpy     #$00
.0c76	f0 0f		                beq     addx
.0c78	18		moreline        clc
.0c79	6d b0 0c	                adc     ymult
.0c7c	90 03		                bcc     norepy
.0c7e	ee b4 0c	                inc     addr2+1
.0c81	8d b3 0c	norepy          sta     addr2
.0c84	88		                dey
.0c85	d0 f1		                bne     moreline
.0c87	8a		addx            txa
.0c88	18		                clc
.0c89	6d b3 0c	                adc     addr2
.0c8c	90 03		                bcc     thatsit
.0c8e	ee b4 0c	                inc     addr2+1
.0c91	8d b3 0c	thatsit         sta     addr2
.0c94	68		                pla
.0c95	a8		                tay
.0c96	68		                pla
.0c97	aa		                tax
.0c98	68		                pla
.0c99	28		                plp
.0c9a	60		                rts
.0c9b			loop
.0c9b	ce bb 0c	               dec  loopcount
.0c9e	d0 03		               bne  norep
.0ca0	ce bc 0c	               dec  loopcount+1
.0ca3	ad bb 0c	norep          lda  loopcount
.0ca6	c9 00		               cmp  #$00
.0ca8	d0 05		               bne  out
.0caa	4d bc 0c	               eor  loopcount+1
.0cad	c9 ff		               cmp  #$ff
.0caf	60		out            rts
>0cb0	28		ymult          .byte     40
>0cb1	00 00		addr1          .word     $0000
>0cb3	00 00		addr2          .word     $0000
>0cb5	00 00		bytecnt        .word     $0000
>0cb7	00 00		zp1            .word   $0000
>0cb9	00 00		zp2            .word   $0000
>0cbb	00 00		loopcount      .word     $0000

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>0cbd	01		a2hexcol       .byte     1              ; pour aputscxy
>0cbe	00		a2hexbkcol     .byte     %00000000
.0cbf			a2hexpos
>0cbf	00		a2hexpx        .byte     0              ; pour aputsxy
>0cc0	00		a2hexpy        .byte     0
>0cc1	24		a2hexprefix    .byte     "$"            ; pour aputs
>0cc2	00 00		a2hexstr       .word     $00
>0cc4	00 00		               .word     $00
>0cc6	00		               .byte     0              ; 0 end string
>0cc7	30 30 30 30	abin           .null     "00000000"
>0ccb	30 30 30 30 00
>0cd0	20 20 20 00	adec           .null     "   "
.0cd4			putahexfmtxy
.0cd4	20 a3 0a	               jsr  push
.0cd7	20 23 0d	               jsr  atohex
.0cda	ae bf 0c	               ldx  a2hexpx
.0cdd	ac c0 0c	               ldy  a2hexpy
.0ce0	20 84 0f	               jsr  gotoxy
.0ce3	a2 c1		               ldx  #<a2hexprefix
.0ce5	a0 0c		               ldy  #>a2hexprefix
.0ce7	20 76 0f	               jsr  puts
.0cea	20 de 0a	               jsr  pop
.0ced	60		               rts
.0cee			putahexfmt
.0cee	20 a3 0a	               jsr  push
.0cf1	20 23 0d	               jsr  atohex
.0cf4	a2 c1		               ldx  #<a2hexprefix
.0cf6	a0 0c		               ldy  #>a2hexprefix
.0cf8	20 76 0f	               jsr  puts
.0cfb	20 de 0a	               jsr  pop
.0cfe	60		               rts
.0cff			putahex
.0cff	20 a3 0a	               jsr  push
.0d02	20 23 0d	               jsr  atohex
.0d05	a2 c2		               ldx  #<a2hexstr
.0d07	a0 0c		               ldy  #>a2hexstr
.0d09	20 76 0f	               jsr  puts
.0d0c	20 de 0a	               jsr  pop
.0d0f	60		               rts
.0d10			nibtohex
.0d10	08		               php
.0d11	29 0f		               and  #$0f
.0d13	f8		               sed
.0d14	18		               clc
.0d15	69 90		               adc  #$90
.0d17	69 40		               adc  #$40
.0d19	d8		               cld
.0d1a	28		               plp
.0d1b	60		               rts
.0d1c			lsra4bits
.0d1c	08		               php
.0d1d	4a		               lsr
.0d1e	4a		               lsr
.0d1f	4a		               lsr
.0d20	4a		               lsr
.0d21	28		               plp
.0d22	60		               rts
.0d23			atohex
.0d23	08		               php
.0d24	48		               pha
.0d25	48		               pha
.0d26	20 1c 0d	               jsr  lsra4bits
.0d29	20 10 0d	               jsr  nibtohex
.0d2c	8d c2 0c	               sta  a2hexstr
.0d2f	68		               pla
.0d30	20 10 0d	               jsr  nibtohex
.0d33	8d c3 0c	               sta  a2hexstr+1
.0d36	a9 00		               lda  #$00                ; set end of string
.0d38	8d c4 0c	               sta  a2hexstr+2
.0d3b	68		               pla
.0d3c	28		               plp
.0d3d	60		               rts
.0d3e			xy2hex
.0d3e	20 a3 0a	               jsr  push
.0d41	20 23 0d	               jsr  atohex
.0d44	8a		               txa
.0d45	48		               pha
.0d46	20 1c 0d	               jsr  lsra4bits
.0d49	20 10 0d	               jsr  nibtohex
.0d4c	8d c2 0c	               sta  a2hexstr
.0d4f	68		               pla
.0d50	20 10 0d	               jsr  nibtohex
.0d53	8d c3 0c	               sta  a2hexstr+1
.0d56	98		               tya
.0d57	48		               pha
.0d58	20 1c 0d	               jsr  lsra4bits
.0d5b	20 10 0d	               jsr  nibtohex
.0d5e	8d c4 0c	               sta  a2hexstr+2
.0d61	68		               pla
.0d62	20 10 0d	               jsr  nibtohex
.0d65	8d c5 0c	               sta  a2hexstr+3
.0d68	a9 00		               lda  #$00                ; 0 ended string
.0d6a	8d c6 0c	               sta  a2hexstr+4
.0d6d	20 de 0a	               jsr  pop
.0d70			atobin
.0d70	20 a3 0a	               jsr  push
.0d73	a2 08		               ldx  #8
.0d75	a0 00		               ldy  #0
.0d77	18		               clc
.0d78	2a		nextbit        rol
.0d79	48		               pha
.0d7a	69 00		               adc  #$00
.0d7c	29 01		               and  #$01
.0d7e	20 10 0d	               jsr  nibtohex
.0d81	99 c7 0c	               sta  abin,y
.0d84	68		               pla
.0d85	c8		               iny
.0d86	ca		               dex
.0d87	d0 ef		               bne  nextbit
.0d89	a9 00		               lda  #0
.0d8b	99 c7 0c	               sta  abin,y
.0d8e	20 de 0a	               jsr  pull
.0d91	60		               rts
.0d92			putabin
.0d92	20 70 0d	               jsr     atobin
.0d95	20 a3 0a	               jsr     push
.0d98	a2 c7		               ldx     #<abin
.0d9a	a0 0c		               ldy     #>abin
.0d9c	20 76 0f	               jsr     puts
.0d9f	20 de 0a	               jsr     pop
.0da2	60		               rts
.0da3			printabin
.0da3	20 a3 0a	               jsr     push
.0da6	a2 c7		               ldx     #<abin
.0da8	a0 0c		               ldy     #>abin
.0daa	20 76 0f	               jsr     puts
.0dad	20 de 0a	               jsr     pop
.0db0	60		               rts
.0db1			putabinfmt
.0db1	08		               php
.0db2	48		               pha
.0db3	a9 25		               lda     #"%"
.0db5	20 28 0f	               jsr     putch
.0db8	68		               pla
.0db9	20 92 0d	               jsr     putabin
.0dbc	28		               plp
.0dbd	60		               rts
.0dbe			putabinxy
.0dbe	20 84 0f	               jsr     gotoxy
.0dc1	20 92 0d	               jsr     putabin
.0dc4	60		               rts
.0dc5			putabinfmtxy
.0dc5	20 84 0f	               jsr     gotoxy
.0dc8	20 b1 0d	               jsr     putabinfmt
.0dcb	60		               rts
.0dcc			atodec
.0dcc	20 a3 0a	               jsr  push
.0dcf	f8		               sed            ; On se place en mode décimal.
.0dd0	aa		               tax            ; On déplace a dans x.
.0dd1	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.0dd3	a9 00		               lda  #$00      ; 0 dans A.
.0dd5	18		nextbit        clc            ; Bit carry a 0.
.0dd6	69 01		               adc  #$01      ; Ajoute 1 a A.
.0dd8	90 01		               bcc  decx      ; Pas de carry, pas de report.
.0dda	c8		               iny            ; On incrémente Y
.0ddb	ca		decx           dex            ; X=X-1
.0ddc	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.0dde	48		               pha            ; A sur le stack.
.0ddf	98		               tya            ; Y dans A (MSB)
.0de0	20 10 0d	               jsr  nibtohex  ; a hex petsci ...
.0de3	8d d0 0c	               sta  adec      ; ... dans tampon.
.0de6	68		               pla            ; Récupere A
.0de7	48		               pha            ;
.0de8	20 10 0d	               jsr  nibtohex
.0deb	8d d2 0c	               sta  adec+2
.0dee	68		               pla
.0def	6a		               ror
.0df0	6a		               ror
.0df1	6a		               ror
.0df2	6a		               ror
.0df3	20 10 0d	               jsr  nibtohex
.0df6	8d d1 0c	               sta  adec+1
.0df9	d8		               cld            ; On revient en mode binaire.
.0dfa	20 de 0a	               jsr  pull
.0dfd	60		               rts
.0dfe			putadec
.0dfe	20 a3 0a	               jsr  push
.0e01	20 cc 0d	               jsr  atodec
.0e04	a2 d0		               ldx  #<adec
.0e06	a0 0c		               ldy  #>adec+1
.0e08	20 76 0f	               jsr  puts
.0e0b	20 de 0a	               jsr  pop
.0e0e	60		               rts

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-text-mc.asm

>0e0f	00 00		scrptr         .word     $00            ; ... pointe position ecran, ...
>0e11	00 00		colptr         .word     $00            ; ... pointe position couleur, ...
>0e13	01		curcol         .byte     $01            ; ... la couleur du caractère, ...
>0e14	06		brdcol         .byte     vbleu          ; ... la couleur de la bordure et
>0e15	00		vicbkcol0      .byte     vnoir  ;$0b    ; 0,
>0e16	02		vicbkcol1      .byte     vrouge ;$0b    ; 1,
>0e17	05		vicbkcol2      .byte     vvert  ;$0b    ; 2,
>0e18	06		vicbkcol3      .byte     vbleu  ;$0b    ; et 3.
>0e19	00		inverse        .byte     $00
>0e1a	00 00 00 00	scraddr        .byte     0,0,0,0,0
>0e1e	00
>0e1f	00 00 00 00	coladdr        .byte     0,0,0,0,0
>0e23	00
>0e24	00		bkcol          .byte     %00000000      ; Pointeur de la couleur actuelle
>0e25	00 04		virtaddr       .word     $0400          ; L'adresse de l'ecran virtuel
=$00			bkcol0         =         %00000000      ;
=$40			bkcol1         =         %01000000
=$80			bkcol2         =         %10000000
=$c0			bkcol3         =         %11000000
.0e27			scrmaninit
.0e27	08		               php            ; On sauvegarde les registres
.0e28	48		               pha
.0e29	a9 15		               lda  #%00010101; Selectionne la plage memoire video
.0e2b	8d 18 d0	               sta  $d018     ; et le jeu de caracteeres.
.0e2e	ad 16 d0	               lda  $d016     ; 53270 Lecture valeur actuelle pour ne
.0e31	09 10		               ora  #%00010000; modifier que le bit 4.
.0e33	29 ef		               and  #%11101111
.0e35	8d 16 d0	               sta  $d016 ; 53270
.0e38	ad 11 d0	               lda  $d011     ; On ne change que le bit 6 pour
.0e3b	09 40		               ora  #%01000000; selectionner le md. couleur de
.0e3d	8d 11 d0	               sta  $d011     ; 53270   ; fond etendu.
.0e40	ad 15 0e	               lda  vicbkcol0
.0e43	8d 21 d0	               sta  $d021     ; 53281
.0e46	ad 16 0e	               lda  vicbkcol1
.0e49	8d 22 d0	               sta  $d022     ; 53282
.0e4c	ad 17 0e	               lda  vicbkcol2
.0e4f	8d 23 d0	               sta  $d023     ; 53283
.0e52	ad 18 0e	               lda  vicbkcol3
.0e55	8d 24 d0	               sta  $d024     ; 54284
.0e58	a5 00		               lda  bkcol0    ; On charge et utilise la couleur de ...
.0e5a	8d 24 0e	               sta  bkcol     ; ... fond par defaut des caracteres.
.0e5d	20 b7 0e	               jsr  cls       ; Finalement on efface l'ecran
.0e60	68		               pla
.0e61	28		               plp
.0e62	60		               rts
.0e63			curshome
.0e63	08		               php                      ; Sauvegarde flags ...
.0e64	48		               pha                      ; ... et accumulateur
.0e65	ad 25 0e	               lda  virtaddr            ; In replace le pointeur ...
.0e68	8d 0f 0e	               sta  scrptr              ; ... d'écran virtuel à sa ...
.0e6b	ad 26 0e	               lda  virtaddr+1          ; ... position initiale.
.0e6e	8d 10 0e	               sta  scrptr+1
.0e71	20 a2 0e	               jsr  synccolptr          ; On synchronise le ptr couleur.
.0e74	ad 15 0e	               lda  vicbkcol0
.0e77	8d 21 d0	               sta  $d021               ; On recharge les couleurs ...
.0e7a	ad 16 0e	               lda  vicbkcol1           ; ... de fond par defaut tel ...
.0e7d	8d 22 d0	               sta  $d022               ; ... que specifie dans les ...
.0e80	ad 17 0e	               lda  vicbkcol2           ; ... les variables globales.
.0e83	8d 23 d0	               sta  $d023
.0e86	ad 18 0e	               lda  vicbkcol3
.0e89	8d 24 d0	               sta  $d024
.0e8c	68		               pla                      ; Récupère l'accumulateur ...
.0e8d	28		               plp                      ; ... et les flags
.0e8e	60		               rts
.0e8f			incscrptr
.0e8f	08		               php                      ; Sauvegarde flags ...
.0e90	48		               pha                      ; ... et accumulateur
.0e91	ee 0f 0e	               inc  scrptr              ; Incremente le pointeur
.0e94	ad 0f 0e	               lda  scrptr              ; Regarde si on doit faire un ...
.0e97	d0 03		               bne  pasdereport         ; ... report dans le MSB
.0e99	ee 10 0e	               inc  scrptr+1            ; Si oui on fait le repport
.0e9c	20 a2 0e	pasdereport    jsr  synccolptr          ; On synchronise le ptr couleur.
.0e9f	68		               pla                      ; Récupère l'accumulateur ...
.0ea0	28		               plp                      ; ... et les flags
.0ea1	60		               rts
.0ea2			synccolptr
.0ea2	08		               php                      ; Sauvegarde flags ...
.0ea3	48		               pha                      ; ... et accumulateur
.0ea4	ad 0f 0e	               lda  scrptr              ; Récupère le LSB du scrptr ...
.0ea7	8d 11 0e	               sta  colptr              ; ... pour le placer dans le colptr.
.0eaa	ad 10 0e	               lda  scrptr+1            ; Récupère le mSB du scrptr, ...
.0ead	29 03		               and  #%00000011          ; ... le converti pour pointer ...
.0eaf	09 d8		               ora  #%11011000          ; ... la RAM couleur ...
.0eb1	8d 12 0e	               sta  colptr+1            ; ... et le sauvegarde.
.0eb4	68		               pla                      ; Récupère l'accumulateur ...
.0eb5	28		               plp                      ; ... et les flags
.0eb6	60		               rts
.0eb7			cls
.0eb7	20 a3 0a	               jsr  push                ; On sauvegarde les registres
.0eba	ad 25 0e	               lda  virtaddr            ; On replace le curseur d'ecran à
.0ebd	8d 0f 0e	               sta  scrptr
.0ec0	ad 26 0e	               lda  virtaddr+1          ; sa position initiale, ($0400).
.0ec3	8d 10 0e	               sta  scrptr+1
.0ec6	20 a2 0e	               jsr  synccolptr          ; On synchronise la couleur.
.0ec9	20 78 10	               jsr  scrptr2zp1          ; L'adresse actuelle dans le ZP1.
.0ecc	ad 14 0e	               lda  brdcol              ; On place la couleur ...
.0ecf	8d 20 d0	               sta  vicbordcol          ; ... de la bordure.
.0ed2	ad 24 0e	               lda  bkcol               ; Associer couleur pour ...
.0ed5	8d 21 d0	               sta  vicbackcol          ; ... remplir l'ecran ...
.0ed8	a9 20		               lda  #$20                ; ... de caracteres espace.
.0eda	a2 04		               ldx  #4                  ; Quatre blocs de ...
.0edc	a0 00		nextline       ldy  #0                  ; ... 256 caracteres.
.0ede			nextcar
.0ede	91 fb		               sta  (zpage1),y          ;
.0ee0	a5 fc		               lda  zpage1+1
.0ee2	48		               pha
.0ee3	29 03		               and  #%00000011
.0ee5	09 d8		               ora  #%11011000
.0ee7	85 fc		               sta  zpage1+1
.0ee9	a9 00		               lda  #0
.0eeb	91 fb		               sta  (zpage1),y
.0eed	68		               pla
.0eee	85 fc		               sta  zpage1+1
.0ef0	a9 20		               lda  #$20
.0ef2	88		               dey
.0ef3	d0 e9		               bne  nextcar
.0ef5	e6 fc		               inc  zpage1+1
.0ef7	ca		               dex
.0ef8	d0 e4		               bne  nextcar
.0efa	a9 00		               lda  #$00
.0efc	8d 0f 0e	               sta  scrptr
.0eff	a9 04		               lda  #$04
.0f01	8d 10 0e	               sta  scrptr+1
.0f04	20 a2 0e	               jsr  synccolptr
.0f07	20 de 0a	               jsr  pop
.0f0a	60		               rts
.0f0b			setborder
.0f0b	08		               php
.0f0c	8d 14 0e	               sta  brdcol
.0f0f	8d 20 d0	               sta  vicbordcol
.0f12	28		               plp
.0f13	60		               rts
.0f14			setinverse
.0f14	08		               php
.0f15	48		               pha
.0f16	a9 80		               lda  #%10000000
.0f18	8d 19 0e	               sta  inverse
.0f1b	68		               pla
.0f1c	28		               plp
.0f1d	60		               rts
.0f1e			clrinverse
.0f1e	08		               php
.0f1f	48		               pha
.0f20	a9 00		               lda  #%00000000
.0f22	8d 19 0e	               sta  inverse
.0f25	68		               pla
.0f26	28		               plp
.0f27	60		               rts
.0f28			putch
.0f28	20 a3 0a	               jsr  push           ; On sauvegarde les registres
.0f2b	20 78 10	               jsr  scrptr2zp1     ; Place le ptr d'ecran sur zp1
.0f2e	29 3f		               and  #%00111111     ; Masque des bits 6 et 7 pour la ouleur.
.0f30	48		               pha
.0f31	ad 24 0e	               lda  bkcol
.0f34	29 c0		               and  #%11000000
.0f36	8d 24 0e	               sta  bkcol
.0f39	68		               pla
.0f3a	0d 24 0e	               ora  bkcol          ; On y ajoute la couleur du fond.
.0f3d	a0 00		               ldy  #$00           ; Met Y à 0
.0f3f	91 fb		               sta  (zpage1),y     ; Affiche le caractere
.0f41	ae 12 0e	               ldx  colptr+1       ; Place le MSB du ptr de couleur
.0f44	86 fc		               stx  zpage1+1       ; ... dans le MSB du zp1.
.0f46	ad 13 0e	               lda  curcol         ; Charge la couleur voulu dans.
.0f49	91 fb		               sta  (zpage1),y     ; ... la ram de couleur.
.0f4b	20 8f 0e	               jsr  incscrptr      ; Incremente le pointeur d'ecran.
.0f4e	20 de 0a	               jsr  pop            ; Replace tous les registres
.0f51	60		               rts
.0f52			z2putch
.0f52	20 a3 0a	               jsr  push           ; On sauvegarde les registres
.0f55	a0 00		               ldy  #$0            ; Met Y à 0
.0f57	b1 fd		               lda  (zpage2),y     ; Charge le caractere
.0f59	20 28 0f	               jsr  putch          ; Appel pour affichage
.0f5c	20 de 0a	               jsr  pop            ; Replace tous les registres
.0f5f	60		               rts
.0f60			z2puts
.0f60	20 a3 0a	               jsr  push           ; On sauvegarde les registres
.0f63	a0 00		               ldy  #$0            ; Met Y à 0
.0f65	b1 fd		nextcar        lda  (zpage2),y     ; Charge le caractere
.0f67	f0 09		               beq  endstr         ; Est-ce le 0 de fin de chaine ?
.0f69	20 52 0f	               jsr  z2putch        ; Appel pour affichage
.0f6c	20 10 0c	               jsr  inczp2         ; On pointe zp2 sur le prochain caractere.
.0f6f	4c 65 0f	               jmp  nextcar        ; On passe au prochain
.0f72	20 de 0a	endstr         jsr  pop            ; Replace tous les registres
.0f75	60		               rts
.0f76			puts
.0f76	20 a3 0a	               jsr  push           ; On sauvegarde les registres
.0f79	86 fd		               stx  zpage2         ; On positionne xp2 en fonction de
.0f7b	84 fe		               sty  zpage2+1       ; l'adresse reçcu dans X et Y
.0f7d	20 60 0f	               jsr  z2puts         ; Appel pour affichage
.0f80	20 de 0a	               jsr  pop            ; Replace tous les registres
.0f83	60		               rts
.0f84			gotoxy
.0f84	20 a3 0a	               jsr  push           ; On sauvegarde les registres
.0f87	20 63 0e	               jsr  curshome       ;  retourne le curseur virtuel a 0,0.
.0f8a	c0 00		yagain         cpy  #0             ; Devons nous changer de ligne ?
.0f8c	f0 09		               beq  setx           ; Si non, on verifi les colonnes.
.0f8e	a9 28		               lda  #40            ; Si oui on ajoute 40
.0f90	20 15 10	               jsr  saddscrptr     ;  à l'adresse du pointeur virtuel autant
.0f93	88		               dey                 ;  de fois qu'il est spécifié dans y.
.0f94	4c 8a 0f	               jmp  yagain         ; On passe au prochain y.
.0f97	8a		setx           txa                 ; On ajoute la valeur de X
.0f98	20 15 10	               jsr  saddscrptr     ;  à l'adresse di pointeur virtuel.
.0f9b	20 a2 0e	               jsr  synccolptr     ; Synchro du pointeur des couleurs
.0f9e	20 de 0a	               jsr  pop            ; Replace tous les registres
.0fa1	60		               rts
.0fa2			putsxy
.0fa2	20 a3 0a	               jsr  push           ; On sauvegarde les registres et le zp2
.0fa5	86 fd		               stx  zpage2         ; Place l'adr de chaine dans zp2
.0fa7	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.0fa9	a0 00		               ldy  #0             ; On place le compteur
.0fab	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.0fad	aa		               tax                 ; de A à X
.0fae	20 10 0c	               jsr  inczp2         ; On deplace le pointeur
.0fb1	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.0fb3	a8		               tay                 ; de A à Y
.0fb4	20 84 0f	               jsr  gotoxy         ; gotoxy : X=col, Y=ligne
.0fb7	20 10 0c	               jsr  inczp2         ; On deplace le pointeur
.0fba	20 60 0f	               jsr  z2puts         ; On imprime la chaine
.0fbd	20 de 0a	               jsr  pop            ; Replace tous les registres
.0fc0	60		               rts
.0fc1			putscxy
.0fc1	20 a3 0a	               jsr  push           ; On Sauvegarde registres et zp2
.0fc4	86 fd		               stx  zpage2         ; On place l'adresse de chaine dans zp2
.0fc6	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.0fc8	a0 00		               ldy  #0             ; Place le compteur
.0fca	b1 fd		               lda  (zpage2),y     ; Charge la couleur
.0fcc	8d 13 0e	               sta  curcol         ; ... et on la definie
.0fcf	20 10 0c	               jsr  inczp2         ; Pointe le prochain byte
.0fd2	b1 fd		               lda  (zpage2),y     ; Récupere et sauvegarde ...
.0fd4	8d 24 0e	               sta  bkcol          ; ... l'index de couleur de fond
.0fd7	20 10 0c	               jsr  inczp2         ; Deplace le pointeur
.0fda	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.0fdc	aa		               tax                 ; ... de A à X
.0fdd	20 10 0c	               jsr  inczp2         ; Deplace le pointeur
.0fe0	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.0fe2	a8		               tay                 ; de A à Y
.0fe3	20 84 0f	               jsr  gotoxy         ; gotoxy : X=col, y=ligne
.0fe6	20 10 0c	               jsr  inczp2         ; Place le ptr en début de chaine
.0fe9	20 60 0f	               jsr  z2puts         ; On imprime la chaine
.0fec	20 de 0a	               jsr  pop
.0fef	60		               rts
.0ff0			setcurcol
.0ff0	08		               php
.0ff1	8d 13 0e	               sta  curcol
.0ff4	28		               plp
.0ff5	60		               rts
.0ff6			setvicbkcol
.0ff6	08		               php
.0ff7	48		               pha
.0ff8	8a		               txa
.0ff9	29 03		               and  #$03
.0ffb	aa		               tax
.0ffc	68		               pla
.0ffd	9d 15 0e	               sta  vicbkcol0,x
.1000	9d 21 d0	               sta  $d021,x
.1003	28		               plp
.1004	60		               rts
.1005			setbkcol
.1005	08		               php
.1006	48		               pha
.1007	0a		               asl
.1008	0a		               asl
.1009	0a		               asl
.100a	0a		               asl
.100b	0a		               asl
.100c	0a		               asl
.100d	29 c0		               and  #$c0
.100f	8d 24 0e	               sta  bkcol
.1012	68		               pla
.1013	28		               plp
.1014	60		               rts
.1015			saddscrptr
.1015	08		               php
.1016	48		               pha
.1017	18		               clc
.1018	6d 0f 0e	               adc  scrptr
.101b	8d 0f 0e	               sta  scrptr
.101e	90 03		               bcc  norep
.1020	ee 10 0e	               inc  scrptr+1
.1023	68		norep          pla
.1024	28		               plp
.1025	60		               rts
.1026			scrptr2str
.1026	20 a3 0a	               jsr  push
.1029	ad 10 0e	               lda  scrptr+1
.102c	48		               pha
.102d	20 1c 0d	               jsr  lsra4bits
.1030	20 10 0d	               jsr  nibtohex
.1033	8d 1a 0e	               sta  scraddr
.1036	68		               pla
.1037	20 1c 0d	               jsr  lsra4bits
.103a	20 10 0d	               jsr  nibtohex
.103d	8d 1b 0e	               sta  scraddr+1
.1040	ad 10 0e	               lda  scrptr+1
.1043	48		               pha
.1044	20 1c 0d	               jsr  lsra4bits
.1047	20 10 0d	               jsr  nibtohex
.104a	8d 1a 0e	               sta  scraddr
.104d	68		               pla
.104e	20 1c 0d	               jsr  lsra4bits
.1051	20 10 0d	               jsr  nibtohex
.1054	8d 1b 0e	               sta  scraddr+1
.1057	ad 0f 0e	               lda  scrptr
.105a	48		               pha
.105b	20 1c 0d	               jsr  lsra4bits
.105e	20 10 0d	               jsr  nibtohex
.1061	8d 1c 0e	               sta  scraddr+2
.1064	8d 21 0e	               sta  coladdr+2
.1067	68		               pla
.1068	20 1c 0d	               jsr  lsra4bits
.106b	20 10 0d	               jsr  nibtohex
.106e	8d 1d 0e	               sta  scraddr+3
.1071	8d 22 0e	               sta  coladdr+3
.1074	20 de 0a	               jsr  pop
.1077	60		               rts
.1078			scrptr2zp1
.1078	08		               php
.1079	48		               pha
.107a	ad 0f 0e	               lda  scrptr
.107d	85 fb		               sta  zpage1
.107f	ad 10 0e	               lda  scrptr+1
.1082	85 fc		               sta  zpage1+1
.1084	68		               pla
.1085	28		               plp
.1086	60		               rts
.1087			colptr2zp1
.1087	08		               php
.1088	48		               pha
.1089	ad 11 0e	               lda  colptr
.108c	85 fb		               sta  zpage1
.108e	ad 12 0e	               lda  colptr+1
.1091	85 fc		               sta  zpage1+1
.1093	68		               pla
.1094	28		               plp
.1095	60		               rts
.1096			scrptr2zp2
.1096	08		               php
.1097	48		               pha
.1098	ad 0f 0e	               lda  scrptr
.109b	85 fd		               sta  zpage2
.109d	ad 10 0e	               lda  scrptr+1
.10a0	85 fe		               sta  zpage2+1
.10a2	68		               pla
.10a3	28		               plp
.10a4	60		               rts
.10a5			colptr2zp2
.10a5	08		               php
.10a6	48		               pha
.10a7	ad 11 0e	               lda  colptr
.10aa	85 fd		               sta  zpage2
.10ac	ad 12 0e	               lda  colptr+1
.10af	85 fe		               sta  zpage2+1
.10b1	68		               pla
.10b2	28		               plp
.10b3	60		               rts
.10b4			putrahex
.10b4	08		               php
.10b5	48		               pha
.10b6	20 23 0d	               jsr     atohex
.10b9	a2 bd		               ldx     #<a2hexcol
.10bb	a0 0c		               ldy     #>a2hexcol
.10bd	20 76 0f	               jsr     puts
.10c0	68		               pla
.10c1	28		               plp
.10c2	60		               rts
.10c3			putrahexxy
.10c3	08		               php
.10c4	48		               pha
.10c5	20 23 0d	               jsr  atohex
.10c8	a9 bf		               lda  #<a2hexpos
.10ca	a0 0c		               ldy  #>a2hexpos
.10cc	20 a2 0f	               jsr  putsxy
.10cf	68		               pla
.10d0	28		               plp
.10d1	60		               rts
.10d2			putrahexcxy
.10d2	08		               php
.10d3	68		               pla
.10d4	20 23 0d	               jsr  atohex
.10d7	a9 bf		               lda  #<a2hexpos
.10d9	a0 0c		               ldy  #>a2hexpos
.10db	20 c1 0f	               jsr  putscxy
.10de	68		               pla
.10df	28		               plp
.10e0	60		               rts

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.10e1			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=$c0			bkcol   =   bkcol3
.10e1	20 a3 0a	                jsr push
.10e4	08		                php
.10e5	8d a5 12	                sta  rega
.10e8	68		                pla
.10e9	8d a8 12	                sta  regp
.10ec	8e a6 12	                stx  regx
.10ef	8c a7 12	                sty  regy
.10f2	ba		                tsx
.10f3	8e a9 12	                stx  regs
.10f6	68		                pla
.10f7	8d ac 12	                sta  regpcl
.10fa	8d ad 12	                sta  regpcl2
.10fd	68		                pla
.10fe	8d aa 12	                sta  regpch
.1101	8d ab 12	                sta  regpch2
.1104	ad a5 12	                lda  rega
.1107	48		                pha
.1108	20 10 0d	                jsr  nibtohex
.110b	8d 4f 12	                sta  vala+1
.110e	68		                pla
.110f	20 1c 0d	                jsr  lsra4bits
.1112	20 10 0d	                jsr  nibtohex
.1115	8d 4e 12	                sta  vala
.1118	ad a7 12	                lda  regy
.111b	48		                pha
.111c	20 10 0d	                jsr  nibtohex
.111f	8d 63 12	                sta  valy+1
.1122	68		                pla
.1123	20 1c 0d	                jsr  lsra4bits
.1126	20 10 0d	                jsr  nibtohex
.1129	8d 62 12	                sta  valy
.112c	ad a6 12	                lda  regx
.112f	48		                pha
.1130	20 10 0d	                jsr  nibtohex
.1133	8d 59 12	                sta  valx+1
.1136	68		                pla
.1137	20 1c 0d	                jsr  lsra4bits
.113a	20 10 0d	                jsr  nibtohex
.113d	8d 58 12	                sta  valx
.1140	ad a8 12	                lda  regp
.1143	48		                pha
.1144	20 10 0d	                jsr  nibtohex
.1147	8d 6d 12	                sta  valp+1
.114a	68		                pla
.114b	20 1c 0d	                jsr  lsra4bits
.114e	20 10 0d	                jsr  nibtohex
.1151	8d 6c 12	                sta  valp
.1154	ad a9 12	                lda  regs
.1157	48		                pha
.1158	20 10 0d	                jsr  nibtohex
.115b	8d 77 12	                sta  vals+1
.115e	68		                pla
.115f	20 1c 0d	                jsr  lsra4bits
.1162	20 10 0d	                jsr  nibtohex
.1165	8d 76 12	                sta  vals
.1168	18		                clc
.1169	ad ad 12	                lda regpcl2
.116c	69 01		                adc #$01
.116e	8d ad 12	                sta regpcl2
.1171	ad ad 12	                lda regpcl2
.1174	d0 03		                bne noreport
.1176	ee ab 12	                inc regpch2
.1179	ad ab 12	    noreport    lda regpch2
.117c	48		                pha
.117d	20 10 0d	                jsr  nibtohex
.1180	8d 82 12	                sta  valpch+1
.1183	68		                pla
.1184	20 1c 0d	                jsr  lsra4bits
.1187	20 10 0d	                jsr  nibtohex
.118a	8d 81 12	                sta  valpch
.118d	ad ad 12	                lda  regpcl2
.1190	48		                pha
.1191	20 10 0d	                jsr  nibtohex
.1194	8d 84 12	                sta  valpcl+1
.1197	68		                pla
.1198	20 1c 0d	                jsr  lsra4bits
.119b	20 10 0d	                jsr  nibtohex
.119e	8d 83 12	                sta  valpcl
.11a1	a5 fb		                lda  zpage1
.11a3	48		                pha
.11a4	20 10 0d	                jsr  nibtohex
.11a7	8d 92 12	                sta  valz1l
.11aa	68		                pla
.11ab	20 1c 0d	                jsr  lsra4bits
.11ae	20 10 0d	                jsr  nibtohex
.11b1	8d 93 12	                sta  valz1l+1
.11b4	a5 fc		                lda  zpage1+1
.11b6	48		                pha
.11b7	20 10 0d	                jsr  nibtohex
.11ba	8d 90 12	                sta  valz1h
.11bd	68		                pla
.11be	20 1c 0d	                jsr  lsra4bits
.11c1	20 10 0d	                jsr  nibtohex
.11c4	8d 91 12	                sta  valz1h+1
.11c7	a5 fd		                lda  zpage2
.11c9	48		                pha
.11ca	20 10 0d	                jsr  nibtohex
.11cd	8d a1 12	                sta  valz2l
.11d0	68		                pla
.11d1	20 1c 0d	                jsr  lsra4bits
.11d4	20 10 0d	                jsr  nibtohex
.11d7	8d a2 12	                sta  valz2l+1
.11da	a5 fe		                lda  zpage2+1
.11dc	48		                pha
.11dd	20 10 0d	                jsr  nibtohex
.11e0	8d 9f 12	                sta  valz2h
.11e3	68		                pla
.11e4	20 1c 0d	                jsr  lsra4bits
.11e7	20 10 0d	                jsr  nibtohex
.11ea	8d a0 12	                sta  valz2h+1
.11ed	20 14 0f	                jsr  setinverse
.11f0	78		                sei
.11f1	a2 47		                ldx  #<srega
.11f3	a0 12		                ldy  #>srega+1
.11f5	20 c1 0f	                jsr  putscxy
.11f8	a2 51		                ldx  #<sregx
.11fa	a0 12		                ldy  #>sregx+1
.11fc	20 c1 0f	                jsr  putscxy
.11ff	a2 5b		                ldx  #<sregy
.1201	a0 12		                ldy  #>sregy+1
.1203	20 c1 0f	                jsr  putscxy
.1206	a2 65		                ldx  #<sregp
.1208	a0 12		                ldy  #>sregp+1
.120a	20 c1 0f	                jsr  putscxy
.120d	a2 6f		                ldx  #<sregs
.120f	a0 12		                ldy  #>sregs+1
.1211	20 c1 0f	                jsr  putscxy
.1214	a2 79		                ldx  #<sregpc
.1216	a0 12		                ldy  #>sregpc+1
.1218	20 c1 0f	                jsr  putscxy
.121b	a2 87		                ldx  #<sregz1
.121d	a0 12		                ldy  #>sregz1+1
.121f	20 c1 0f	                jsr  putscxy
.1222	a2 96		                ldx  #<sregz2
.1224	a0 12		                ldy  #>sregz2+1
.1226	20 c1 0f	                jsr  putscxy
.1229	58		                cli
.122a	20 1e 0f	                jsr  clrinverse
.122d	ad aa 12	                lda  regpch
.1230	48		                pha
.1231	ad ac 12	                lda  regpcl
.1234	48		                pha
.1235	ac a7 12	                ldy  regy
.1238	ae a6 12	                ldx  regx
.123b	ad a8 12	                lda  regp
.123e	48		                pha
.123f	ad a5 12	                lda  rega
.1242	28		                plp
.1243	20 de 0a	                jsr pop
.1246	60		                rts
>1247	01 00 17	srega   .byte   colr,coln,line
>124a	20 01 3a 24	        .text   ' a:$' ;4,24
>124e	00 00 00	vala    .byte   0,0,0
>1251	01 06 17	sregx   .byte   colr,coln+6,line
>1254	20 18 3a 24	        .text   ' x:$' ;4,24
>1258	00 00 00	valx    .byte   0,0,0
>125b	01 0c 17	sregy   .byte   colr,coln+12,line
>125e	20 19 3a 24	        .text   ' y:$' ;4,24
>1262	00 00 00	valy    .byte   0,0,0
>1265	01 12 17	sregp   .byte   colr,coln+18,line
>1268	20 10 3a 24	        .text   ' p:$' ;4,24
>126c	00 00 00	valp    .byte   0,0,0
>126f	01 18 17	sregs   .byte   colr,coln+24,line
>1272	20 13 3a 24	        .text   ' s:$' ;4,24
>1276	00 00 00	vals    .byte   0,0,0
>1279	01 1e 17	sregpc  .byte   colr,coln+30,line
>127c	20 10 03 3a	        .text   ' pc:$' ;4,24
>1280	24
>1281	00 00		valpch  .byte   0,0
>1283	00 00 20 00	valpcl  .byte   0,0,32,0
>1287	01 03 18	sregz1  .byte   colr,coln+3,line+1
>128a	20 1a 10 31	        .text   ' zp1:$' ;4,24
>128e	3a 24
>1290	00 00		valz1h  .byte   0,0
>1292	00 00 20 00	valz1l  .byte   0,0,32,0
>1296	01 0f 18	sregz2  .byte   colr,coln+15,line+1
>1299	20 1a 10 32	        .text   ' zp2:$' ;4,24
>129d	3a 24
>129f	00 00		valz2h  .byte   0,0
>12a1	00 00 20 00	valz2l  .byte   0,0,32,0
>12a5	00		rega    .byte   0
>12a6	00		regx    .byte   0
>12a7	00		regy    .byte   0
>12a8	00		regp    .byte   0
>12a9	00		regs    .byte   0
>12aa	00		regpch  .byte   0
>12ab	00		regpch2 .byte   0
>12ac	00		regpcl  .byte   0
>12ad	00		regpcl2 .byte   0
>12ae	00		vzp1h   .byte   0
>12af	00		vzp1l   .byte   0
>12b0	00		vzp2h   .byte   0
>12b1	00		vzp2l   .byte   0

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-joystick.asm

=$dc00			js_2port       =    $dc00          ; CIA #1 Port data A
=$dc01			js_1port       =    $dc01          ; CIA #1 Port data B
=$dc02			js_2dir        =    $dc02          ; CIA #1 Port de direction A
=$dc03			js_1dir        =    $dc03          ; CIA #1 port de direction B
=2			js_xoffset     =    2
=2			js_yoffset     =    2
=0			js_location    =    0
.12b2			js_init
.12b2	08		               php                 ; Sauvegarde le registre de
.12b3	48		               pha                 ;   status et le registre a.
.12b4	ad 03 dc	               lda  js_1dir        ; Place les bits de direction du port B
.12b7	29 e0		               and  #$e0           ; 4-0 en entrées (0).
.12b9	8d 03 dc	               sta  js_1dir
.12bc	ad 02 dc	               lda  js_2dir        ; Place les bits de direction du port A
.12bf	29 e0		               and  #$e0           ; 4-0 en entrées (0).
.12c1	8d 02 dc	               sta  js_2dir
.12c4	68		               pla                 ; Récupère le registre a et
.12c5	28		               plp                 ;   le registre de status.
.12c6	60		               rts
.12c7			js_scan
.12c7	20 ce 12	               jsr  js_1scan       ; Scan la manette du port B.
.12ca	20 85 13	               jsr  js_2scan       ; Scan la manette du port A.
.12cd	60		               rts
.12ce			js_1scan
.12ce	20 11 0b	               jsr  pushreg        ; Sauvegarde tous les registres.
.12d1	ad 01 dc	               lda  js_1port
.12d4	29 1f		               and  #$1f
.12d6	48		               pha
.12d7	49 1f		               eor  #$1f
.12d9	8d 3b 17	               sta  js_1status
.12dc	68		               pla
.12dd	c9 00		               cmp  #$00
.12df	d0 03		               bne  p1scan
.12e1	4c 74 13	               jmp  port1_out
.12e4	49 1f		p1scan         eor  #$1f
.12e6	18		               clc
.12e7	4a		js_1b0         lsr                 ; On decale js_2 bit 0 dans C
.12e8	90 14		               bcc  js_1b1         ; Est-ce vers le haut (U)
.12ea	48		               pha                 ; On stock la valeur
.12eb	ee a4 16	               inc  js_1flag
.12ee	ad a0 16	               lda  js_1pixy       ; Oui!
.12f1	38		               sec                 ; On place la carry a 1
.12f2	e9 02		               sbc  #js_yoffset    ; On reduit
.12f4	c9 f0		               cmp  #$f0
.12f6	90 02		               bcc  sto1ym
.12f8	a9 00		               lda  #$00
.12fa	8d a0 16	sto1ym         sta  js_1pixy       ; le y
.12fd	68		               pla                 ; On recupere la valeur
.12fe	4a		js_1b1         lsr                 ; On decale js_2 bit 0 dans C
.12ff	90 14		               bcc  js_1b2         ; Est-ce vers le bas (D)
.1301	48		               pha                 ; On stack la valeur
.1302	ee a4 16	               inc  js_1flag
.1305	ad a0 16	               lda  js_1pixy       ; Oui!
.1308	18		               clc                 ; On place la carry a 0
.1309	69 02		               adc  #js_yoffset    ; On augmente
.130b	c9 c7		               cmp  #199
.130d	90 02		               bcc  sto1yp
.130f	a9 c7		               lda  #199
.1311	8d a0 16	sto1yp         sta  js_1pixy       ; le y
.1314	68		               pla                 ; On recupere la valeur
.1315	4a		js_1b2         lsr                 ; On decale js_1 bit 0 dans C
.1316	90 20		               bcc  js_1b3         ; Est-ce vers la gauche (L)
.1318	48		               pha                 ; On stack la valeur
.1319	ee a4 16	               inc  js_1flag
.131c	ad 9e 16	               lda  js_1pixx       ; Oui!
.131f	0d 9f 16	               ora  js_1pixx+1
.1322	f0 13		               beq  js_1b2out
.1324	38		               sec                 ; On place la carry a 1
.1325	ad 9e 16	               lda  js_1pixx       ; Oui!
.1328	e9 02		               sbc  #js_xoffset    ; On diminue
.132a	8d 9e 16	               sta  js_1pixx       ; le X
.132d	b0 08		               bcs  js_1b2out      ; de offset
.132f	ad 9f 16	               lda  js_1pixx+1
.1332	f0 03		               beq  js_1b2out
.1334	ce 9f 16	               dec  js_1pixx+1     ; sur 16 bits
.1337	68		js_1b2out      pla                 ; On recupere la valeur
.1338	4a		js_1b3         lsr                 ; On decale js_1 bit 0 dans C
.1339	90 22		               bcc  js_1b4         ; Est-ce vers la droite (R)
.133b	48		               pha                 ; On stack la valeur
.133c	ee a4 16	               inc  js_1flag
.133f	ad 9f 16	               lda  js_1pixx+1
.1342	f0 0a		               beq  incj1x
.1344	ad 9e 16	               lda  js_1pixx
.1347	c9 3c		               cmp  #$40-4
.1349	30 03		               bmi  incj1x
.134b	4c 5c 13	               jmp  js_1b3out
.134e	18		incj1x         clc                 ; On place la carry a 0
.134f	ad 9e 16	               lda  js_1pixx
.1352	69 02		               adc  #js_xoffset    ; On augmente
.1354	8d 9e 16	               sta  js_1pixx       ; le X
.1357	90 03		               bcc  js_1b3out      ; de offset
.1359	ee 9f 16	               inc  js_1pixx+1     ; sur 16 bits
.135c	68		js_1b3out      pla                 ; On recupere la valeur
.135d	4a		js_1b4         lsr                 ; Est-ce le bbouton fire (F)
.135e	90 14		               bcc  port1_out      ; Oui!
.1360	ee a4 16	               inc  js_1flag
.1363	ee a3 16	               inc  js_1fire       ; On augmente le nombre de tir
.1366	a2 01		js_1wait       ldx  #$01
.1368	a0 ff		               ldy  #$ff
.136a	c8		js_1rel        iny
.136b	ad 01 dc	               lda  js_1port
.136e	49 ff		               eor  #$ff
.1370	29 10		               and  #$10
.1372	d0 f6		               bne  js_1rel        ;  des boutons
.1374	ad a4 16	port1_out      lda  js_1flag
.1377	f0 08		               beq  out
.1379	20 7c 14	               jsr  js_1correct
.137c	a9 00		               lda  #0
.137e	8d a4 16	               sta  js_1flag
.1381	20 40 0b	out            jsr  popreg         ; Récupère tous les registres.
.1384	60		               rts
.1385			js_2scan
.1385	20 11 0b	               jsr  pushreg        ; Sauvegarde tous les registres.
.1388	ad 00 dc	port2          lda  js_2port
.138b	29 1f		               and  #$1f
.138d	48		               pha
.138e	49 1f		               eor  #$1f
.1390	8d 3c 17	               sta  js_2status
.1393	68		               pla
.1394	c9 1f		               cmp #$1f
.1396	d0 03		               bne  p2scan
.1398	4c 4d 14	               jmp  port2_out
.139b	49 1f		p2scan         eor  #$1f
.139d	18		               clc
.139e	4a		js_2b0         lsr                 ; On decale js_2 bit 0 dans C
.139f	90 14		               bcc  js_2b1         ; Est-ce vers le haut (U)
.13a1	48		               pha                 ; On stack la valeur
.13a2	ee af 16	               inc  js_2flag
.13a5	ad ab 16	               lda  js_2pixy       ; Oui!
.13a8	38		               sec                 ; On place la carry a 1
.13a9	e9 02		               sbc  #js_yoffset    ; On reduit
.13ab	c9 f0		               cmp  #$f0
.13ad	90 02		               bcc  sto2ym
.13af	a9 00		               lda  #$00
.13b1	8d ab 16	sto2ym         sta  js_2pixy       ; le y
.13b4	68		               pla                 ; On recupere la valeur
.13b5	4a		js_2b1         lsr                 ; On decale js_2 bit 0 dans C
.13b6	90 14		               bcc  js_2b2         ; Est-ce vers le bas (D)
.13b8	48		               pha                 ; On stack la valeur
.13b9	ee af 16	               inc  js_2flag
.13bc	ad ab 16	               lda  js_2pixy       ; Oui!
.13bf	18		               clc                 ; On place la carry a 0
.13c0	69 02		               adc  #js_yoffset    ; On augmente
.13c2	c9 c7		               cmp  #199
.13c4	90 02		               bcc  sto2yp
.13c6	a9 c7		               lda  #199
.13c8	8d ab 16	sto2yp         sta  js_2pixy       ; le y
.13cb	68		               pla                 ; On recupere la valeur
.13cc	4a		js_2b2         lsr                 ; On decale js_2 bit 0 dans C
.13cd	90 20		               bcc  js_2b3         ; Est-ce vers la gauche (L)
.13cf	48		               pha                    ;On stack la valeur
.13d0	ee af 16	               inc  js_2flag
.13d3	ad a9 16	               lda  js_2pixx       ; Oui!
.13d6	0d aa 16	               ora  js_2pixx+1
.13d9	f0 13		               beq  js_2b2out
.13db	38		               sec                 ; On place la carry a 1
.13dc	ad a9 16	               lda  js_2pixx       ; Oui!
.13df	e9 02		               sbc  #js_xoffset    ; On diminue
.13e1	8d a9 16	               sta  js_2pixx       ;  le X
.13e4	b0 08		               bcs  js_2b2out      ; de offset
.13e6	ad aa 16	               lda  js_2pixx+1
.13e9	f0 03		               beq  js_2b2out
.13eb	ce aa 16	               dec  js_2pixx+1     ; sur 16 bits
.13ee	68		js_2b2out      pla                 ; On recupere la valeur
.13ef	4a		js_2b3         lsr                 ; On decale js_2 bit 0 dans C
.13f0	90 22		               bcc  js_2b4         ; Est-ce vers la droite (R)
.13f2	48		               pha                 ; On stack la valeur
.13f3	ee af 16	               inc  js_2flag
.13f6	ad aa 16	               lda  js_2pixx+1
.13f9	f0 0a		               beq  incj2x
.13fb	ad a9 16	               lda  js_2pixx
.13fe	c9 3e		               cmp  #$40-js_xoffset
.1400	30 03		               bmi  incj2x
.1402	4c 13 14	               jmp  js_2b3out
.1405	18		incj2x         clc                 ; On place la carry a 0
.1406	ad a9 16	               lda  js_2pixx       ; Oui!
.1409	69 02		               adc  #js_xoffset    ; On augmente
.140b	8d a9 16	               sta  js_2pixx       ;   le X
.140e	90 03		               bcc  js_2b3out      ; de offset
.1410	ee aa 16	               inc  js_2pixx+1     ; sur 16 bits
.1413	68		js_2b3out      pla                 ; On recupere la valeur
.1414	4a		js_2b4         lsr                 ;Estce le bbouton fire (F)
.1415	90 36		               bcc  port2_out      ;Oui!
.1417	ee af 16	               inc  js_2flag
.141a	ee ae 16	               inc  js_2fire       ; On augmente le nombre de tir
.141d	a9 01		               lda  #%00000001
.141f	8d b3 16	               sta  js_2events
.1422	ad a9 16	               lda  js_2pixx
.1425	8d b0 16	               sta  js_2clickx
.1428	ad aa 16	               lda  js_2pixx+1
.142b	8d b1 16	               sta  js_2clickx+1
.142e	ad ab 16	               lda  js_2pixy
.1431	8d b2 16	               sta  js_2clicky
.1434	ad 15 17	               lda  js_2val16a+1
.1437	49 40		               eor  #%01000000
.1439	8d 15 17	               sta  js_2val16a+1
.143c	a2 00		js_2wait       ldx  #$00
.143e	a0 ff		               ldy  #$ff
.1440	c8		js_2rel        iny
.1441	d0 01		               bne  sr1
.1443	e8		               inx
.1444			sr1
.1444	ad 00 dc	               lda  js_2port
.1447	49 ff		               eor  #$ff
.1449	29 10		               and  #$10
.144b	d0 f3		               bne  js_2rel        ;   des boutons
.144d	ad af 16	port2_out      lda  js_2flag
.1450	f0 08		               beq  out
.1452	20 b1 14	               jsr  js_2correct
.1455	a9 00		               lda  #0
.1457	8d af 16	               sta  js_2flag
.145a	20 40 0b	out            jsr  popreg         ; Récupère tous les registres.
.145d			js_corrector
.145d	08		               php
.145e	48		               pha
.145f	ad a4 16	               lda  js_1flag
.1462	f0 08		               beq  check2
.1464	20 7c 14	               jsr  js_1correct
.1467	a9 00		               lda  #0
.1469	8d a4 16	               sta  js_1flag
.146c	ad af 16	check2         lda  js_2flag
.146f	f0 08		               beq  no_update
.1471	20 b1 14	               jsr  js_2correct
.1474	a9 00		               lda  #0
.1476	8d af 16	               sta  js_2flag
.1479	68		no_update      pla
.147a	28		               plp
.147b	60		               rts
.147c			js_1correct
.147c	08		               php
.147d	48		               pha
.147e	ad 9e 16	               lda  js_1pixx
.1481	8d af 14	               sta  vallsb
.1484	ad 9f 16	               lda  js_1pixx+1
.1487	6a		               ror                 ; ex = %0000000100000001 = 257 pixel
.1488	6e af 14	               ror  vallsb         ; Cnnnnnnn      On divise par 8 pc les
.148b	4e af 14	               lsr  vallsb         ; 0Cnnnnnn      caracteres de 8 pixels
.148e	4e af 14	               lsr  vallsb         ; 00Cnnnnn
.1491	ad af 14	               lda  vallsb         ; devient = %00100000 = 32
.1494	8d a1 16	               sta  js_1x
.1497	ad a0 16	               lda  js_1pixy
.149a	8d af 14	               sta  vallsb
.149d	4e af 14	               lsr  vallsb         ; Cnnnnnnn     On divise par 8 pc les
.14a0	4e af 14	               lsr  vallsb         ; 0Cnnnnnn     caracteres de 8 pixels
.14a3	4e af 14	               lsr  vallsb         ; 00Cnnnnn
.14a6	ad af 14	               lda  vallsb         ; devient = %00100000 = 32
.14a9	8d a2 16	               sta  js_1y
.14ac	68		               pla
.14ad	28		               plp
.14ae	60		               rts
>14af	00		vallsb          .byte     0
>14b0	00		regx            .byte     0
.14b1			js_2correct
.14b1	08		               php
.14b2	48		               pha
.14b3	ad a9 16	               lda  js_2pixx
.14b6	8d e4 14	               sta  vallsb
.14b9	ad aa 16	               lda  js_2pixx+1
.14bc	6a		               ror                 ; ex = %0000000100000001 = 257 pixel
.14bd	6e e4 14	               ror  vallsb         ; Cnnnnnnn     On divise par 8 pc les
.14c0	4e e4 14	               lsr  vallsb         ; 0Cnnnnnn     caracteres de 8 pixels
.14c3	4e e4 14	               lsr  vallsb         ; 00Cnnnnn
.14c6	ad e4 14	               lda  vallsb         ; devient = %00100000 = 32
.14c9	8d ac 16	               sta  js_2x
.14cc	ad ab 16	               lda  js_2pixy
.14cf	8d e4 14	               sta  vallsb
.14d2	4e e4 14	               lsr  vallsb         ; Cnnnnnnn     On divise par 8 pc les
.14d5	4e e4 14	               lsr  vallsb         ; 0Cnnnnnn     caracteres de 8 pixels
.14d8	4e e4 14	               lsr  vallsb         ; 00Cnnnnn
.14db	ad e4 14	               lda  vallsb         ; devient = %00100000 = 32
.14de	8d ad 16	               sta  js_2y
.14e1	68		               pla
.14e2	28		               plp
.14e3	60		               rts
>14e4	00		vallsb          .byte     0
>14e5	00		regx            .byte     0
.14e6			js_showvals
.14e6	20 76 15	               jsr  js_2showvals
.14e9	60		               rts
.14ea			js_1showvals
.14ea	20 11 0b	               jsr  pushreg        ; Sauvegarde tous les registres.
.14ed	ad a1 16	               lda  js_1x
.14f0	20 23 0d	               jsr  atohex
.14f3	ad c3 0c	               lda  a2hexstr+1
.14f6	8d c7 16	               sta  js_1val8+19
.14f9	ad c4 0c	               lda  a2hexstr+2
.14fc	8d c8 16	               sta  js_1val8+20
.14ff	ad 9e 16	               lda  js_1pixx
.1502	20 23 0d	               jsr  atohex
.1505	ad c3 0c	               lda  a2hexstr+1
.1508	8d e6 16	               sta  js_1val16+14
.150b	ad c4 0c	               lda  a2hexstr+2
.150e	8d e7 16	               sta  js_1val16+15
.1511	ad 9f 16	               lda  js_1pixx+1
.1514	20 23 0d	               jsr  atohex
.1517	ad c3 0c	               lda  a2hexstr+1
.151a	8d e4 16	               sta  js_1val16+12
.151d	ad c4 0c	               lda  a2hexstr+2
.1520	8d e5 16	               sta  js_1val16+13
.1523	ad a2 16	               lda  js_1y
.1526	20 23 0d	               jsr  atohex
.1529	ad c3 0c	               lda  a2hexstr+1
.152c	8d cb 16	               sta  js_1val8+23
.152f	ad c4 0c	               lda  a2hexstr+2
.1532	8d cc 16	               sta  js_1val8+24
.1535	ad a0 16	               lda  js_1pixy
.1538	20 23 0d	               jsr  atohex
.153b	ad c3 0c	               lda  a2hexstr+1
.153e	8d ec 16	               sta  js_1val16+20
.1541	ad c4 0c	               lda  a2hexstr+2
.1544	8d ed 16	               sta  js_1val16+21
.1547	a9 00		               lda  #0
.1549	20 23 0d	               jsr  atohex
.154c	ad c3 0c	               lda  a2hexstr+1
.154f	8d ea 16	               sta  js_1val16+18
.1552	ad c4 0c	               lda  a2hexstr+2
.1555	8d eb 16	               sta  js_1val16+19
.1558	ad a3 16	               lda  js_1fire
.155b	20 23 0d	               jsr  atohex
.155e	ad c4 0c	               lda  a2hexstr+2
.1561	8d d5 16	               sta  js_1val8+33
.1564	a2 b4		               ldx  #<js_1val8
.1566	a0 16		               ldy  #>js_1val8
.1568	20 c1 0f	               jsr  putscxy
.156b	a2 d8		               ldx  #<js_1val16
.156d	a0 16		               ldy  #>js_1val16
.156f	20 c1 0f	               jsr  putscxy
.1572	20 40 0b	out            jsr  popreg         ; Récupère tous les registres.
.1575	60		               rts
.1576			js_2showvals
.1576	20 11 0b	               jsr  pushreg        ; Sauvegarde tous les registres.
.1579	ad ac 16	               lda  js_2x
.157c	20 23 0d	               jsr  atohex
.157f	ad c2 0c	               lda  a2hexstr
.1582	8d 03 17	               sta  js_2val8+19
.1585	ad c3 0c	               lda  a2hexstr+1
.1588	8d 04 17	               sta  js_2val8+20
.158b	ad b0 16	               lda  js_2clickx
.158e	20 23 0d	               jsr  atohex
.1591	ad c2 0c	               lda  a2hexstr
.1594	8d 31 17	               sta  js_2val16+14
.1597	ad c3 0c	               lda  a2hexstr+1
.159a	8d 32 17	               sta  js_2val16+15
.159d	ad b1 16	               lda  js_2clickx+1
.15a0	20 23 0d	               jsr  atohex
.15a3	ad c2 0c	               lda  a2hexstr
.15a6	8d 2f 17	               sta  js_2val16+12
.15a9	ad c3 0c	               lda  a2hexstr+1
.15ac	8d 30 17	               sta  js_2val16+13
.15af	ad ad 16	               lda  js_2y
.15b2	20 23 0d	               jsr  atohex
.15b5	ad c2 0c	               lda  a2hexstr
.15b8	8d 07 17	               sta  js_2val8+23
.15bb	ad c3 0c	               lda  a2hexstr+1
.15be	8d 08 17	               sta  js_2val8+24
.15c1	ad b2 16	               lda  js_2clicky
.15c4	20 23 0d	               jsr  atohex
.15c7	ad c2 0c	               lda  a2hexstr
.15ca	8d 37 17	               sta  js_2val16+20
.15cd	ad c3 0c	               lda  a2hexstr+1
.15d0	8d 38 17	               sta  js_2val16+21
.15d3	a9 00		               lda  #0
.15d5	20 23 0d	               jsr  atohex
.15d8	ad c2 0c	               lda  a2hexstr
.15db	8d 35 17	               sta  js_2val16+18
.15de	ad c3 0c	               lda  a2hexstr+1
.15e1	8d 36 17	               sta  js_2val16+19
.15e4	ad ae 16	               lda  js_2fire
.15e7	20 23 0d	               jsr  atohex
.15ea	ad c3 0c	               lda  a2hexstr+1
.15ed	8d 11 17	               sta  js_2val8+33
.15f0	a2 f0		               ldx  #<js_2val8
.15f2	a0 16		               ldy  #>js_2val8
.15f4	20 c1 0f	               jsr  putscxy
.15f7	a2 14		               ldx  #<js_2val16a
.15f9	a0 17		               ldy  #>js_2val16a
.15fb	20 c1 0f	               jsr  putscxy
.15fe	a2 23		               ldx  #<js_2val16
.1600	a0 17		               ldy  #>js_2val16
.1602	20 c1 0f	               jsr  putscxy
.1605	20 40 0b	out            jsr  popreg         ; Récupère tous les registres.
.1608	60		               rts
.1609			js_updatecurs
.1609	20 11 0b	               jsr  pushreg        ; Sauvegarde tous les registres.
.160c	ad ac 16	running        lda  js_2x
.160f	cd 98 16	               cmp  js_x
.1612	f0 06		               beq     chky
.1614	8d 98 16	               sta  js_x
.1617	ee 6b 16	               inc     flag
.161a	ad ad 16	chky           lda  js_2y
.161d	cd 99 16	               cmp  js_y
.1620	f0 06		               beq     chkflag
.1622	8d 99 16	               sta  js_y
.1625	ee 6b 16	               inc     flag
.1628	ad 6b 16	chkflag        lda  flag
.162b	f0 1e		               beq     showit
.162d	ae 9a 16	               ldx  js_oldx
.1630	ac 9b 16	               ldy  js_oldy
.1633	20 6c 16	               jsr  js_eoraddrxy
.1636	ae 98 16	               ldx  js_x
.1639	ac 99 16	               ldy  js_y
.163c	20 6c 16	               jsr  js_eoraddrxy
.163f	ad 98 16	               lda  js_x
.1642	8d 9a 16	               sta  js_oldx
.1645	ad 99 16	               lda  js_y
.1648	8d 9b 16	               sta  js_oldy
.164b	a9 00		showit         lda  #0
.164d	8d 6b 16	               sta  flag
.1650	8d b1 0c	               sta  addr1
.1653	a9 04		               lda  #$04
.1655	8d b2 0c	               sta  addr1+1
.1658	ae 98 16	               ldx  js_x
.165b	ac 99 16	               ldy  js_y
.165e	20 62 0c	               jsr  xy2addr
.1661	ac b3 0c	               ldy  addr2
.1664	ae b4 0c	               ldx  addr2+1
.1667	20 40 0b	out            jsr  popreg         ; Récupère tous les registres.
.166a	60		               rts
>166b	00		flag            .byte   0
.166c			js_eoraddrxy
.166c	20 a3 0a	               jsr  pushall
.166f	20 44 0c	               jsr  savezp2
.1672	a9 04		               lda  #$04
.1674	8d b2 0c	               sta  addr1+1
.1677	a9 00		               lda  #0
.1679	8d b1 0c	               sta  addr1
.167c	20 62 0c	               jsr  xy2addr
.167f	ac b3 0c	               ldy  addr2
.1682	84 fd		               sty  zpage2
.1684	ae b4 0c	               ldx  addr2+1
.1687	86 fe		               stx  zpage2+1
.1689	a0 00		               ldy  #0
.168b	b1 fd		               lda  (zpage2),y
.168d	49 40		               eor     #%01000000
.168f	91 fd		               sta  (zpage2),y
.1691	20 53 0c	               jsr  restzp2
.1694	20 de 0a	               jsr  popall
.1697	60		               rts
>1698	00		js_x           .byte   0
>1699	00		js_y           .byte   0
>169a	ff		js_oldx        .byte   $ff
>169b	ff		js_oldy        .byte   $ff
>169c	00		js_oldcar      .byte   0
>169d	00		js_oldcol      .byte   0
>169e	00 00		js_1pixx       .word   0
>16a0	00		js_1pixy       .byte   0
>16a1	00		js_1x          .byte   0
>16a2	00		js_1y          .byte   0
>16a3	00		js_1fire       .byte   0
>16a4	00		js_1flag       .byte   0
>16a5	00 00		js_1clickx     .word   0
>16a7	00		js_1clicky     .byte   0
>16a8	00		js_1events     .byte   0
>16a9	00 00		js_2pixx       .word   0
>16ab	00		js_2pixy       .byte   0
>16ac	00		js_2x          .byte   0
>16ad	00		js_2y          .byte   0
>16ae	00		js_2fire       .byte   0
>16af	00		js_2flag       .byte   0
>16b0	00 00		js_2clickx     .word   0
>16b2	00		js_2clicky     .byte   0
>16b3	00		js_2events     .byte   0
=$03			js_txtcol      =       vcyan
=$00			js_txtbak      =       bkcol0
>16b4	03 00 04 05	js_1val8       .byte     js_txtcol,js_txtbak,4,5
>16b8	50 0f 12 14	               .null     "Port 1 (x,y):($00,$00) Fire:(0)"
>16bc	20 31 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>16cc	30 29 20 46 09 12 05 3a 28 30 29 00
>16d8	03 00 0b 07	js_1val16      .byte     js_txtcol,js_txtbak,11,7
>16dc	28 18 2c 19	               .null     "(x,y):($0000,$0000)"
>16e0	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29 00
>16f0	03 00 04 0a	js_2val8       .byte     js_txtcol,js_txtbak,4,10
>16f4	43 01 12 50	               .null     "CarPos (x,y):($00,$00) Fire:(0)"
>16f8	0f 13 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>1708	30 29 20 46 09 12 05 3a 28 30 29 00
>1714	01 00 04 0c	js_2val16a     .byte     vblanc,js_txtbak,4,12
>1718	43 0c 09 03	               .null     "Click pos."
>171c	0b 20 10 0f 13 2e 00
>1723	03 00 10 0c	js_2val16      .byte     js_txtcol,js_txtbak,16,12
>1727	28 18 2c 19	               .null     "(x,y):($0000,$0000)"
>172b	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29 00
>173b	00		js_1status     .byte 0
>173c	00		js_2status     .byte 0

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-spriteman.asm

.173d			sprt_init
.173d	20 a3 0a	                jsr     push
.1740	ad 92 17	                lda     sprt_ptr
.1743	20 74 18	                jsr     sprt_loadptr
.1746	20 26 0c	                jsr     savezp1
.1749	20 44 0c	                jsr     savezp2
.174c	ad 15 d0	                lda     vic+$15 ; enable sprite 2
.174f	09 04		                ora     #%00000100
.1751	8d 15 d0	                sta     vic+$15
.1754	a9 0d		                lda     #$0d
.1756	8d fa 07	                sta     $7fa
.1759	ad 50 1b	                lda     sprt_ptr0
.175c	85 fb		                sta     zpage1
.175e	ad 51 1b	                lda     sprt_ptr0+1
.1761	85 fc		                sta     zpage1+1
.1763	a9 40		                lda     #$40
.1765	85 fd		                sta     zpage2
.1767	a9 03		                lda     #$03
.1769	85 fe		                sta     zpage2+1
.176b	a0 41		                ldy     #65
.176d	b1 fb		                lda     (zpage1),y      ; sprite y offset
.176f	8d b7 18	                sta     sprt_yoffset
.1772	88		                dey
.1773	b1 fb		                lda     (zpage1),y      ; sprite x offset
.1775	8d b6 18	                sta     sprt_xoffset
.1778	88		                dey
.1779	b1 fb		                lda     (zpage1),y      ; sprite color
.177b	8d 29 d0	                sta     $d029
.177e	88		                dey
.177f	a0 3e		                ldy     #62
.1781	b1 fb		nextbyte        lda     (zpage1),y
.1783	91 fd		                sta     (zpage2),y
.1785	88		                dey
.1786	d0 f9		                bne     nextbyte
.1788	20 35 0c	                jsr     restzp1
.178b	20 53 0c	                jsr     restzp2
.178e	20 de 0a	                jsr     pop
.1791	60		                rts
>1792	01		sprt_ptr        .byte   $01
.1793			sprt_calcpos
.1793	20 a3 0a	                jsr     push
.1796	a9 00		                lda     #0
.1798	8d b9 18	                sta     sprt_x+1
.179b	8d bb 18	                sta     sprt_y+1
.179e	ad aa 16	                lda     js_2pixx+1
.17a1	18		                clc
.17a2	2a		                rol
.17a3	2a		                rol
.17a4	8d b9 18	                sta     sprt_x+1
.17a7	ad a9 16	                lda     js_2pixx
.17aa	18		                clc
.17ab	6d b6 18	                adc     sprt_xoffset
.17ae	8d b8 18	                sta     sprt_x
.17b1	90 08		                bcc     norepx
.17b3	ad b9 18	                lda     sprt_x+1
.17b6	09 04		                ora     #$04
.17b8	8d b9 18	                sta     sprt_x+1
.17bb	ad ab 16	norepx          lda     js_2pixy
.17be	18		                clc
.17bf	6d b7 18	                adc     sprt_yoffset
.17c2	8d ba 18	                sta     sprt_y
.17c5	20 de 0a	                jsr     pop
.17c8	60		                rts
.17c9			sprt_move
.17c9	20 a3 0a	                jsr     push
.17cc	20 93 17	                jsr     sprt_calcpos
.17cf	ad b8 18	                lda     sprt_x
.17d2	8d 04 d0	                sta     vic+$04
.17d5	ad b9 18	                lda     sprt_x+1
.17d8	8d 10 d0	                sta     vic+$10
.17db	ad ba 18	                lda     sprt_y
.17de	8d 05 d0	                sta     vic+$05
.17e1	20 e8 17	                jsr     sprt_showpos
.17e4	20 de 0a	                jsr     pop
.17e7	60		                rts
.17e8			sprt_showpos
.17e8	20 a3 0a	                jsr     push
.17eb	ad b8 18	                lda     sprt_x
.17ee	20 23 0d	                jsr  atohex
.17f1	ad c2 0c	                lda     a2hexstr
.17f4	8d 7f 1b	                sta     sprite_pos+26
.17f7	ad c3 0c	                lda     a2hexstr+1
.17fa	8d 80 1b	                sta     sprite_pos+27
.17fd	ad b9 18	                lda     sprt_x+1
.1800	20 23 0d	                jsr  atohex
.1803	ad c2 0c	                lda     a2hexstr
.1806	8d 7d 1b	                sta     sprite_pos+24
.1809	ad c3 0c	                lda     a2hexstr+1
.180c	8d 7e 1b	                sta     sprite_pos+25
.180f	ad ba 18	                lda     sprt_y
.1812	20 23 0d	                jsr  atohex
.1815	ad c2 0c	                lda     a2hexstr
.1818	8d 85 1b	                sta     sprite_pos+32
.181b	ad c3 0c	                lda     a2hexstr+1
.181e	8d 86 1b	                sta     sprite_pos+33
.1821	a9 00		                lda     #0
.1823	20 23 0d	                jsr  atohex
.1826	ad c2 0c	                lda     a2hexstr
.1829	8d 83 1b	                sta     sprite_pos+30
.182c	ad c3 0c	                lda     a2hexstr+1
.182f	8d 84 1b	                sta     sprite_pos+31
.1832	a2 65		                ldx     #<sprite_pos
.1834	a0 1b		                ldy     #>sprite_pos
.1836	20 c1 0f	                jsr     putscxy
.1839	20 de 0a	                jsr     pop
.183c	60		                rts
.183d			sprt_loadptr2
.183d	20 a3 0a	                jsr     push
.1840	aa		                tax
.1841	8e 92 17	                stx     sprt_ptr
.1844	ad 51 1b	                lda     sprt_ptr0+1
.1847	8d 73 18	                sta     calcbuff+1
.184a	ad 50 1b	                lda     sprt_ptr0
.184d	8d 72 18	                sta     calcbuff
.1850	e0 00		                cpx     #0
.1852	f0 11		                beq     addrok
.1854	ad 72 18	                lda     calcbuff
.1857	18		nextx           clc
.1858	69 42		                adc     #66
.185a	90 03		                bcc     nocarry
.185c	ee 73 18	                inc     calcbuff+1
.185f	8d 72 18	nocarry         sta     calcbuff
.1862	ca		                dex
.1863	d0 f2		                bne     nextx
.1865	ac 73 18	addrok          ldy     calcbuff+1
.1868	ae 72 18	                ldx     calcbuff
.186b	20 8e 18	                jsr     sprt_setimage
.186e	20 de 0a	                jsr     pop
.1871	60		                rts
>1872	00 00		calcbuff        .word   $0
.1874			sprt_loadptr
.1874	20 a3 0a	                jsr     push
.1877	ad 92 17	                lda     sprt_ptr
.187a	18		                clc
.187b	2a		                rol
.187c	a8		                tay
.187d	b9 50 1b	                lda     sprt_ptr0,y
.1880	aa		                tax
.1881	b9 51 1b	                lda     sprt_ptr0+1,y
.1884	a8		                tay
.1885	20 8e 18	                jsr     sprt_setimage
.1888	20 de 0a	                jsr     pop
.188b	60		                rts
>188c	00 00		calcbuff        .word   $0
.188e			sprt_setimage
.188e	20 a3 0a	                jsr     push
.1891	20 26 0c	                jsr     savezp1
.1894	20 44 0c	                jsr     savezp2
.1897	84 fc		                sty     zpage1+1
.1899	86 fb		                stx     zpage1
.189b	a0 18		                ldy     #>sprt_image
.189d	84 fe		                sty     zpage2+1
.189f	a0 bc		                ldy     #<sprt_image
.18a1	84 fd		                sty     zpage2
.18a3	a0 42		                ldy     #66
.18a5	b1 fb		nextbyte        lda     (zpage1),y
.18a7	91 fd		                sta     (zpage2),y
.18a9	88		                dey
.18aa	d0 f9		                bne     nextbyte
.18ac	20 53 0c	                jsr     restzp2
.18af	20 35 0c	                jsr     restzp1
.18b2	20 de 0a	                jsr     pop
.18b5	60		                rts
>18b6	00		sprt_xoffset    .byte   $00
>18b7	00		sprt_yoffset    .byte   $00
>18b8	00 00		sprt_x          .word   $0000
>18ba	00 00		sprt_y          .word   $0000
>18bc			sprt_image      .fill 66
>18fe	00 00 00 00	sprt_crxair     .byte $00, $00, $00, $00, $00, $00 ; 6
>1902	00 00
>1904	00 66 00 00	                .byte $00, $66, $00, $00, $3c, $00 ; 12
>1908	3c 00
>190a	00 18 00 00	                .byte $00, $18, $00, $00, $00, $00 ; 18
>190e	00 00
>1910	00 00 00 00	                .byte $00, $00, $00, $00, $18, $00 ; 24
>1914	18 00
>1916	80 00 01 c0	                .byte $80, $00, $01, $c0, $18, $03 ; 30
>191a	18 03
>191c	66 66 66 c0	                .byte $66, $66, $66, $c0, $18, $03 ; 36
>1920	18 03
>1922	80 00 01 00	                .byte $80, $00, $01, $00, $18, $00 ; 42
>1926	18 00
>1928	00 00 00 00	                .byte $00, $00, $00, $00, $00, $00 ; 48
>192c	00 00
>192e	00 18 00 00	                .byte $00, $18, $00, $00, $3c, $00 ; 54
>1932	3c 00
>1934	00 66 00 00	                .byte $00, $66, $00, $00, $00, $00 ; 60
>1938	00 00
>193a	00 00 00 01	                .byte $00, $00, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>193e	0c 28
>1940	80 00 00 e0	sprt_mouse      .byte $80, $00, $00, $e0, $00, $00 ; 6
>1944	00 00
>1946	b8 00 00 ce	                .byte $b8, $00, $00, $ce, $00, $00 ; 12
>194a	00 00
>194c	83 80 00 c0	                .byte $83, $80, $00, $c0, $e0, $00 ; 18
>1950	e0 00
>1952	80 18 00 c0	                .byte $80, $18, $00, $c0, $3c, $00 ; 24
>1956	3c 00
>1958	80 e0 00 c0	                .byte $80, $e0, $00, $c0, $60, $00 ; 30
>195c	60 00
>195e	98 30 00 fc	                .byte $98, $30, $00, $fc, $18, $00 ; 36
>1962	18 00
>1964	c6 0c 00 03	                .byte $c6, $0c, $00, $03, $06, $00 ; 42
>1968	06 00
>196a	01 9c 00 00	                .byte $01, $9c, $00, $00, $f0, $00 ; 48
>196e	f0 00
>1970	00 40 00 00	                .byte $00, $40, $00, $00, $00, $00 ; 54
>1974	00 00
>1976	00 00 00 00	                .byte $00, $00, $00, $00, $00, $00 ; 60
>197a	00 00
>197c	00 00 00 01	                .byte $00, $00, $00, $01, $18, $31 ; 66, X,X,X color, xoffset, yoffset
>1980	18 31
>1982	00 7c 00 01	sprt_pointer    .byte $00, $7c, $00, $01, $83, $00 ; 6
>1986	83 00
>1988	06 10 c0 08	                .byte $06, $10, $c0, $08, $00, $30 ; 12
>198c	00 30
>198e	12 10 88 20	                .byte $12, $10, $88, $20, $00, $08 ; 18
>1992	00 08
>1994	40 ba 04 40	                .byte $40, $ba, $04, $40, $6c, $04 ; 24
>1998	6c 04
>199a	80 c6 02 aa	                .byte $80, $c6, $02, $aa, $82, $aa ; 30
>199e	82 aa
>19a0	80 c6 02 40	                .byte $80, $c6, $02, $40, $6c, $04 ; 36
>19a4	6c 04
>19a6	40 ba 04 20	                .byte $40, $ba, $04, $20, $00, $08 ; 42
>19aa	00 08
>19ac	12 10 90 08	                .byte $12, $10, $90, $08, $00, $20 ; 48
>19b0	00 20
>19b2	06 10 c0 01	                .byte $06, $10, $c0, $01, $83, $00 ; 54
>19b6	83 00
>19b8	00 7c 00 00	                .byte $00, $7c, $00, $00, $00, $00 ; 60
>19bc	00 00
>19be	00 00 00 01	                .byte $00, $00, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>19c2	0c 28
>19c4	55 55 55 aa	sprt_pointer2   .byte $55, $55, $55, $aa, $aa, $aa ; 6
>19c8	aa aa
>19ca	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 12
>19ce	aa aa
>19d0	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 18
>19d4	aa aa
>19d6	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 24
>19da	00 2a
>19dc	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 30
>19e0	00 2a
>19e2	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 36
>19e6	00 2a
>19e8	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 42
>19ec	00 2a
>19ee	54 00 55 aa	                .byte $54, $00, $55, $aa, $aa, $aa ; 48
>19f2	aa aa
>19f4	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 54
>19f8	aa aa
>19fa	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 60
>19fe	aa aa
>1a00	55 55 55 01	                .byte $55, $55, $55, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>1a04	0c 28
>1a06	06 00 00 0f	sprt_hand       .byte $06, $00, $00, $0f, $00, $00 ; 6
>1a0a	00 00
>1a0c	19 80 00 10	                .byte $19, $80, $00, $10, $80, $00 ; 12
>1a10	80 00
>1a12	19 80 00 16	                .byte $19, $80, $00, $16, $b1, $8c ; 18
>1a16	b1 8c
>1a18	10 ca 52 10	                .byte $10, $ca, $52, $10, $84, $21 ; 24
>1a1c	84 21
>1a1e	10 84 21 30	                .byte $10, $84, $21, $30, $84, $21 ; 30
>1a22	84 21
>1a24	50 84 21 90	                .byte $50, $84, $21, $90, $84, $21 ; 36
>1a28	84 21
>1a2a	90 00 01 90	                .byte $90, $00, $01, $90, $00, $01 ; 42
>1a2e	00 01
>1a30	90 7f c1 90	                .byte $90, $7f, $c1, $90, $00, $01 ; 48
>1a34	00 01
>1a36	40 ff e2 40	                .byte $40, $ff, $e2, $40, $00, $02 ; 54
>1a3a	00 02
>1a3c	3c 00 04 02	                .byte $3c, $00, $04, $02, $00, $08 ; 60
>1a40	00 08
>1a42	03 ff f8 01	                .byte $03, $ff, $f8, $01, $12, $31 ; 66, X,X,X color, xoffset, yoffset
>1a46	12 31
>1a48	00 3e 00 01	sprt_ultraman   .byte $00, $3e, $00, $01, $c1, $c0 ; 6
>1a4c	c1 c0
>1a4e	0e 3e 30 08	                .byte $0e, $3e, $30, $08, $41, $08 ; 12
>1a52	41 08
>1a54	10 1c 04 10	                .byte $10, $1c, $04, $10, $22, $04 ; 18
>1a58	22 04
>1a5a	24 1c 12 23	                .byte $24, $1c, $12, $23, $00, $62 ; 24
>1a5e	00 62
>1a60	20 08 02 47	                .byte $20, $08, $02, $47, $c1, $f1 ; 30
>1a64	c1 f1
>1a66	6a aa ab 47	                .byte $6a, $aa, $ab, $47, $c9, $f1 ; 36
>1a6a	c9 f1
>1a6c	20 08 02 20	                .byte $20, $08, $02, $20, $14, $02 ; 42
>1a70	14 02
>1a72	20 00 02 10	                .byte $20, $00, $02, $10, $00, $04 ; 48
>1a76	00 04
>1a78	10 7f 04 08	                .byte $10, $7f, $04, $08, $00, $08 ; 54
>1a7c	00 08
>1a7e	06 3e 30 01	                .byte $06, $3e, $30, $01, $c1, $c0 ; 60
>1a82	c1 c0
>1a84	00 3e 00 01	                .byte $00, $3e, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>1a88	0c 28
>1a8a	00 1c 00 00	sprt_male       .byte $00, $1c, $00, $00, $3e, $00 ; 6
>1a8e	3e 00
>1a90	00 3e 00 00	                .byte $00, $3e, $00, $00, $3e, $00 ; 12
>1a94	3e 00
>1a96	00 1c 00 00	                .byte $00, $1c, $00, $00, $08, $00 ; 18
>1a9a	08 00
>1a9c	00 ff 80 00	                .byte $00, $ff, $80, $00, $ff, $80 ; 24
>1aa0	ff 80
>1aa2	00 be 80 00	                .byte $00, $be, $80, $00, $9c, $80 ; 30
>1aa6	9c 80
>1aa8	00 88 80 00	                .byte $00, $88, $80, $00, $be, $80 ; 36
>1aac	be 80
>1aae	00 be 80 01	                .byte $00, $be, $80, $01, $9c, $c0 ; 42
>1ab2	9c c0
>1ab4	01 94 c0 00	                .byte $01, $94, $c0, $00, $14, $00 ; 48
>1ab8	14 00
>1aba	00 14 00 00	                .byte $00, $14, $00, $00, $14, $00 ; 54
>1abe	14 00
>1ac0	00 36 00 00	                .byte $00, $36, $00, $00, $77, $00 ; 60
>1ac4	77 00
>1ac6	00 77 00 01	                .byte $00, $77 ,$00, $01, $0c, $2f ; 66, X,X,X color, xoffset, yoffset
>1aca	0c 2f
>1acc	00 3c 00 00	sprt_robot      .byte $00, $3c, $00, $00, $24, $00 ; 6
>1ad0	24 00
>1ad2	00 66 18 00	                .byte $00, $66, $18, $00, $66, $38 ; 12
>1ad6	66 38
>1ad8	00 24 38 00	                .byte $00, $24, $38, $00, $3c, $10 ; 18
>1adc	3c 10
>1ade	00 18 10 00	                .byte $00, $18, $10, $00, $18, $10 ; 24
>1ae2	18 10
>1ae4	0f ff f0 08	                .byte $0f, $ff, $f0, $08, $7e, $00 ; 30
>1ae8	7e 00
>1aea	08 7e 00 08	                .byte $08, $7e, $00, $08, $18, $00 ; 36
>1aee	18 00
>1af0	1c 18 00 1c	                .byte $1c, $18, $00, $1c, $18, $00 ; 42
>1af4	18 00
>1af6	18 3c 00 00	                .byte $18, $3c, $00, $00, $3c, $00 ; 48
>1afa	3c 00
>1afc	00 24 00 00	                .byte $00, $24, $00, $00, $24, $00 ; 54
>1b00	24 00
>1b02	00 24 00 03	                .byte $00, $24, $00, $03, $e7, $c0 ; 60
>1b06	e7 c0
>1b08	03 e7 c0 01	                .byte $03, $e7, $c0, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>1b0c	0c 28
>1b0e	00 1c 00 00	sprt_femme      .byte $00, $1c, $00, $00, $3e, $00 ; 6
>1b12	3e 00
>1b14	00 3e 00 00	                .byte $00, $3e, $00, $00, $3e, $00 ; 12
>1b18	3e 00
>1b1a	00 1c 00 00	                .byte $00, $1c, $00, $00, $08, $00 ; 18
>1b1e	08 00
>1b20	00 7f 00 00	                .byte $00, $7f, $00, $00, $ff, $80 ; 24
>1b24	ff 80
>1b26	00 be 80 00	                .byte $00, $be, $80, $00, $9c, $80 ; 30
>1b2a	9c 80
>1b2c	00 88 80 00	                .byte $00, $88, $80, $00, $9c, $80 ; 36
>1b30	9c 80
>1b32	00 be 80 01	                .byte $00, $be, $80, $01, $be, $c0 ; 42
>1b36	be c0
>1b38	01 be c0 00	                .byte $01, $be, $c0, $00, $7f, $00 ; 48
>1b3c	7f 00
>1b3e	00 7f 00 00	                .byte $00, $7f, $00, $00, $ff, $80 ; 54
>1b42	ff 80
>1b44	00 36 00 00	                .byte $00, $36, $00, $00, $77, $00 ; 60
>1b48	77 00
>1b4a	00 55 00 01	                .byte $00, $55 ,$00, $01, $0c, $2f ; 66, X,X,X color, xoffset, yoffset
>1b4e	0c 2f
>1b50	bc 18		sprt_ptr0       .word  sprt_image + (0*66)
>1b52	fe 18		sprt_ptr1       .word  sprt_image + (1*66)
>1b54	40 19		sprt_ptr2       .word  sprt_image + (2*66)
>1b56	82 19		sprt_ptr3       .word  sprt_image + (3*66)
>1b58	c4 19		sprt_ptr4       .word  sprt_image + (4*66)
>1b5a	06 1a		sprt_ptr5       .word  sprt_image + (5*66)
>1b5c	48 1a		sprt_ptr6       .word  sprt_image + (6*66)
>1b5e	8a 1a		sprt_ptr7       .word  sprt_image + (7*66)
>1b60	cc 1a		sprt_ptr8       .word  sprt_image + (8*66)
>1b62	0e 1b		sprt_ptr9       .word  sprt_image + (9*66)
>1b64	ff		testbyte        .byte 255
=$07			sprt_txtcol     =       vjaune
=$00			sprt_txtbak     =       bkcol0
=$01			sprt_color      =       vwhite
>1b65	07 00 04 0e	sprite_pos      .byte   sprt_txtcol,sprt_txtbak,4,14
>1b69	53 10 12 09	                .text       "Sprite pos. (x,y):($0000,$0000)"
>1b6d	14 05 20 10 0f 13 2e 20 28 18 2c 19 29 3a 28 24
>1b7d	30 30 30 30 2c 24 30 30 30 30 29
>1b88	00		                .byte   0

;******  Return to file: j2tester.asm


;******  End of listing

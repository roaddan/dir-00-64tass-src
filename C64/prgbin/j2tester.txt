
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L j2tester.txt -o j2tester.prg j2tester.asm
; Fri May 30 19:38:25 2025

;Offset	;Hex		;Source

;******  Processing input file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0000	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0004	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0008			libtart

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1          .word bcmd2         ;Adresse de la commande basic suivante.
>0803	01 00		               .word 1             ;Numero de la ligne Basic.
>0805	8f		               .byte $8F           ;Le token de la commande REM du Basic
>0806	2a 50 52 4f	               .text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2          .word bcmd3         ;Adresse de la commande basic suivante.
>082b	02 00		               .word 2             ;Numero de la ligne Basic.
>082d	8f		               .byte $8F           ;Le token de la commande REM du Basic
>082e	2a 50 41 52	               .text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3          .word bcmd4         ;Adresse de la commande basic suivante.
>0846	03 00		               .word 3             ;Numero de la ligne Basic.
>0848	9e		               .byte $9e           ;Le token de la commande PRINT du Basic
>0849	30 32 31 32	               .text format("%05d",hpgmstart)
>084d	39
>084e	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4          .word $0000         ;L'adresse de la commande Basic suivante.
.0851	4c 54 08	hpgmstart     jmp   main           ; Le programme principale doit s'appeler "main"

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: j2tester.asm

.0854			main
.0854	20 18 c0	               jsr  scrmaninit
.0857	20 b0 0a	               jsr  js_init
.085a	a9 80		               lda  #$80
.085c	8d 04 c0	               sta  curcol
.085f	a9 00		               lda  #0
.0861	8d 21 d0	               sta  vicback0col
.0864	a9 02		               lda  #vrouge
.0866	8d 05 c0	               sta  brdcol
.0869	8d 20 d0	               sta  vicbordcol
.086c	20 a8 c0	               jsr  cls
.086f	a9 20		               lda  #$20
.0871	09 00		               ora  #%00000000
.0873	a0 04		               ldy  #$04
.0875	a2 04		               ldx  #$04
.0877	20 b2 c3	               jsr  memfill
.087a	a9 00		               lda  #$00
.087c	a0 d8		               ldy  #$d8
.087e	20 b2 c3	               jsr  memfill
.0881	20 27 0f	               jsr  sprt_init
.0884	20 05 c1	goagain        jsr  setinverse
.0887	20 44 c3	               jsr  pushreg
.088a	a2 6f		               ldx  #<bstring1
.088c	a0 09		               ldy  #>bstring1
.088e	20 b2 c1	               jsr  putscxy
.0891	20 73 c3	               jsr  popreg
.0894	20 44 c3	               jsr  pushreg
.0897	a2 9c		               ldx  #<bstring2
.0899	a0 09		               ldy  #>bstring2
.089b	20 b2 c1	               jsr  putscxy
.089e	20 73 c3	               jsr  popreg
.08a1	20 44 c3	               jsr  pushreg
.08a4	a2 c9		               ldx  #<bstring3
.08a6	a0 09		               ldy  #>bstring3
.08a8	20 b2 c1	               jsr  putscxy
.08ab	20 73 c3	               jsr  popreg
.08ae	20 44 c3	               jsr  pushreg
.08b1	a2 f6		               ldx  #<bstring4
.08b3	a0 09		               ldy  #>bstring4
.08b5	20 b2 c1	               jsr  putscxy
.08b8	20 73 c3	               jsr  popreg
.08bb	20 0f c1	               jsr  clrinverse
.08be	20 44 c3	               jsr  pushreg
.08c1	a2 0d		               ldx  #<js_status1
.08c3	a0 0a		               ldy  #>js_status1
.08c5	20 b2 c1	               jsr  putscxy
.08c8	20 73 c3	               jsr  popreg
.08cb	20 44 c3	               jsr  pushreg
.08ce	a2 25		               ldx  #<js_status2
.08d0	a0 0a		               ldy  #>js_status2
.08d2	20 b2 c1	               jsr  putscxy
.08d5	20 73 c3	               jsr  popreg
.08d8	20 44 c3	               jsr  pushreg
.08db	a2 3c		               ldx  #<js_status3
.08dd	a0 0a		               ldy  #>js_status3
.08df	20 b2 c1	               jsr  putscxy
.08e2	20 73 c3	               jsr  popreg
.08e5	20 44 c3	               jsr  pushreg
.08e8	a2 55		               ldx  #<js_status4
.08ea	a0 0a		               ldy  #>js_status4
.08ec	20 b2 c1	               jsr  putscxy
.08ef	20 73 c3	               jsr  popreg
.08f2	20 44 c3	               jsr  pushreg
.08f5	a2 6e		               ldx  #<js_status5
.08f7	a0 0a		               ldy  #>js_status5
.08f9	20 b2 c1	               jsr  putscxy
.08fc	20 73 c3	               jsr  popreg
.08ff	20 44 c3	               jsr  pushreg
.0902	a2 84		               ldx  #<js_status6
.0904	a0 0a		               ldy  #>js_status6
.0906	20 b2 c1	               jsr  putscxy
.0909	20 73 c3	               jsr  popreg
.090c	20 44 c3	               jsr  pushreg
.090f	a2 00		               ldx  #$00
.0911	a0 0f		               ldy  #$0f
.0913	20 75 c1	               jsr  gotoxy
.0916	20 73 c3	               jsr  popreg
.0919	a9 07		               lda  #vjaune
.091b	20 e1 c1	               jsr  setcurcol
.091e	a2 00		               ldx  #$00
.0920	20 f6 c1	               jsr  setbkcol
.0923	20 c5 0a	looper         jsr  js_scan        ; ****** Un prob avec j2scan.
.0926	4c 26 09	INFINIE        jmp  INFINIE          ; Un branchement infinie.
.0929	20 d0 0c	               jsr  js_showvals
.092c	20 f3 0d	               jsr  js_updatecurs
.092f	20 b9 0f	               jsr  sprt_move
.0932	a2 16		               ldx  #$16
.0934	a0 11		               ldy  #$11
.0936	20 75 c1	               jsr  gotoxy
.0939	a9 03		               lda  #3
.093b	20 e1 c1	               jsr  setcurcol
.093e	ad 98 0e	               lda  js_2fire
.0941	f0 e0		               beq  looper
.0943	ad 97 0e	               lda  js_2y
.0946	c9 04		               cmp  #$04
.0948	d0 1d		               bne  nochange
.094a	ad 96 0e	               lda  js_2x
.094d	c9 0b		               cmp  #$0b
.094f	30 16		               bmi  nochange
.0951	c9 1d		               cmp  #$1d
.0953	10 12		               bpl  nochange
.0955	ee 82 0f	               inc  sprt_ptr
.0958	ad 82 0f	               lda  sprt_ptr
.095b	c9 09		               cmp  #9
.095d	90 02		               bcc  drawsptr
.095f	a9 00		               lda  #$00
.0961	8d 82 0f	drawsptr       sta  sprt_ptr
.0964	20 27 0f	               jsr  sprt_init
.0967	4c 23 09	nochange       jmp  looper
.096a	20 e1 ff	out            jsr  kstop
.096d	60		               rts
>096e	00		onebyte        .byte     0
>096f	0e 40 00 00	bstring1       .byte     vbleu1,bkcol1,0,0
>0973	20 20 20 20	               .text     "      Visualisation du port jeu #2      "
>0977	20 20 56 09 13 15 01 0c 09 13 01 14 09 0f 0e 20
>0987	04 15 20 10 0f 12 14 20 0a 05 15 20 23 32 20 20
>0997	20 20 20 20
>099b	00		               .byte     0
>099c	0b 80 00 01	bstring2       .byte     vgris,bkcol2,0,1
>09a0	20 50 12 0f	               .text     " Programme assembleur pour 6510 sur C64 "
>09a4	07 12 01 0d 0d 05 20 01 13 13 05 0d 02 0c 05 15
>09b4	12 20 10 0f 15 12 20 36 35 31 30 20 13 15 12 20
>09c4	43 36 34 20
>09c8	00		               .byte     0
>09c9	0a c0 00 02	bstring3       .byte     vrose,bkcol3,0,2
>09cd	20 20 20 20	               .text     "     par Daniel Lafrance (2024-06) C    "
>09d1	20 10 01 12 20 44 01 0e 09 05 0c 20 4c 01 06 12
>09e1	01 0e 03 05 20 28 32 30 32 34 2d 30 36 29 20 43
>09f1	20 20 20 20
>09f5	00		               .byte     0
>09f6	07 c0 0b 04	bstring4       .byte     vjaune,bkcol3,11,4
>09fa	20 43 08 01	               .text     " Changer pointeur "
>09fe	0e 07 05 12 20 10 0f 09 0e 14 05 15 12 20
>0a0c	00		               .byte     0
>0a0d	0d 00 13 16	js_status1     .byte     vvert1,bkcol0,19,22
>0a11	20 20 20 15	               .text     "   up <----1> haut "
>0a15	10 20 3c 2d 2d 2d 2d 31 3e 20 08 01 15 14 20
>0a24	00		               .byte     0
>0a25	0e 00 13 15	js_status2     .byte     vbleu1,bkcol0,19,21
>0a29	20 04 0f 17	               .text     " down <---2-> bas "
>0a2d	0e 20 3c 2d 2d 2d 32 2d 3e 20 02 01 13 20
>0a3b	00		               .byte     0
>0a3c	0a 00 13 14	js_status3     .byte     vrose,bkcol0,19,20
>0a40	20 0c 05 06	               .text     " left <--4--> gauche"
>0a44	14 20 3c 2d 2d 34 2d 2d 3e 20 07 01 15 03 08 05
>0a54	00		               .byte     0
>0a55	07 00 13 13	js_status4     .byte     vjaune,bkcol0,19,19
>0a59	12 09 07 08	               .text     "right <-8---> droite"
>0a5d	14 20 3c 2d 38 2d 2d 2d 3e 20 04 12 0f 09 14 05
>0a6d	00		               .byte     0
>0a6e	01 00 13 12	js_status5     .byte     vblanc,bkcol0,19,18
>0a72	20 46 09 12	               .text     " Fire <1----> Feu"
>0a76	05 20 3c 31 2d 2d 2d 2d 3e 20 46 05 15
>0a83	00		               .byte     0
>0a84	03 00 01 17	js_status6     .byte     vcyan,bkcol0,1,23
>0a88	2b 2d 3e 20	               .text     "+-> Etat de JS2:     %---FRLDU EOR #$1F"
>0a8c	45 14 01 14 20 04 05 20 4a 53 32 3a 20 20 20 20
>0a9c	20 25 2d 2d 2d 46 52 4c 44 55 20 45 4f 52 20 23
>0aac	24 31 46
>0aaf	00		               .byte     0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-joystick.asm

=$dc00			js_2port       =    $dc00          ; CIA #1 Port data A
=$dc01			js_1port       =    $dc01          ; CIA #1 Port data B
=$dc02			js_2dir        =    $dc02          ; CIA #1 Port de direction A
=$dc03			js_1dir        =    $dc03          ; CIA #1 port de direction B
=2			js_xoffset     =    2
=2			js_yoffset     =    2
=0			js_location    =    0
.0ab0			js_init
.0ab0	08		               php                 ; Sauvegarde le registre de
.0ab1	48		               pha                 ;   status et le registre a.
.0ab2	ad 03 dc	               lda  js_1dir        ; Place les bits de direction du port B
.0ab5	29 e0		               and  #$e0           ; 4-0 en entrées (0).
.0ab7	8d 03 dc	               sta  js_1dir
.0aba	ad 02 dc	               lda  js_2dir        ; Place les bits de direction du port A
.0abd	29 e0		               and  #$e0           ; 4-0 en entrées (0).
.0abf	8d 02 dc	               sta  js_2dir
.0ac2	68		               pla                 ; Récupère le registre a et
.0ac3	28		               plp                 ;   le registre de status.
.0ac4	60		               rts
.0ac5			js_scan
.0ac5	20 cc 0a	               jsr  js_1scan       ; Scan la manette du port B.
.0ac8	20 84 0b	               jsr  js_2scan       ; Scan la manette du port A.
.0acb	60		               rts
.0acc			js_1scan
.0acc	20 44 c3	               jsr  pushreg        ; Sauvegarde tous les registres.
.0acf	ad 01 dc	               lda  js_1port       ; Lecture du port d'entrées
.0ad2	29 1f		               and  #$1f           ; Masque les bits 7, 6 et 5.
.0ad4	48		               pha                 ; Copie sur la pile.
.0ad5	49 1f		               eor  #$1f           ; Inverse tous les bits.
.0ad7	8d 25 0f	               sta  js_1status     ; Sauvegarde le status.
.0ada	68		               pla                 ; Récupère une copie originale.
.0adb	c9 00		               cmp  #$00           ; Si les bits sont tous 0
.0add	d0 03		               bne  p1scan         ; On scan le port
.0adf	4c 73 0b	               jmp  port1_out
.0ae2	49 1f		p1scan         eor  #$1f
.0ae4	18		               clc
.0ae5	4a		js_1b0         lsr                 ; On decale js_2 bit 0 dans C
.0ae6	90 14		               bcc  js_1b1         ; Est-ce vers le haut (U)
.0ae8	48		               pha                 ; On stock la valeur
.0ae9	ee 8e 0e	               inc  js_1flag
.0aec	ad 8a 0e	               lda  js_1pixy       ; Oui!
.0aef	38		               sec                 ; On place la Carry a 1
.0af0	e9 02		               sbc  #js_yoffset    ; On reduit
.0af2	c9 f0		               cmp  #$f0
.0af4	90 02		               bcc  sto1ym
.0af6	a9 00		               lda  #$00
.0af8	8d 8a 0e	sto1ym         sta  js_1pixy       ; le y
.0afb	68		               pla                 ; On recupere la valeur
.0afc	4a		js_1b1         lsr                 ; On decale js_2 bit 0 dans C
.0afd	90 14		               bcc  js_1b2         ; Est-ce vers le bas (D)
.0aff	48		               pha                 ; On stack la valeur
.0b00	ee 8e 0e	               inc  js_1flag
.0b03	ad 8a 0e	               lda  js_1pixy       ; Oui!
.0b06	18		               clc                 ; On place la Carry a 0
.0b07	69 02		               adc  #js_yoffset    ; On augmente
.0b09	c9 c7		               cmp  #199
.0b0b	90 02		               bcc  sto1yp
.0b0d	a9 c7		               lda  #199
.0b0f	8d 8a 0e	sto1yp         sta  js_1pixy       ; le y
.0b12	68		               pla                 ; On recupere la valeur
.0b13	4a		js_1b2         lsr                 ; On decale js_1 bit 0 dans C
.0b14	90 20		               bcc  js_1b3         ; Est-ce vers la gauche (L)
.0b16	48		               pha                 ; On stack la valeur
.0b17	ee 8e 0e	               inc  js_1flag
.0b1a	ad 88 0e	               lda  js_1pixx       ; Oui!
.0b1d	0d 89 0e	               ora  js_1pixx+1
.0b20	f0 13		               beq  js_1b2out
.0b22	38		               sec                 ; On place la Carry a 1
.0b23	ad 88 0e	               lda  js_1pixx       ; Oui!
.0b26	e9 02		               sbc  #js_xoffset    ; On diminue
.0b28	8d 88 0e	               sta  js_1pixx       ; le X
.0b2b	b0 08		               bcs  js_1b2out      ; de offset
.0b2d	ad 89 0e	               lda  js_1pixx+1
.0b30	f0 03		               beq  js_1b2out
.0b32	ce 89 0e	               dec  js_1pixx+1     ; sur 16 bits
.0b35	68		js_1b2out      pla                 ; On recupere la valeur
.0b36	4a		js_1b3         lsr                 ; On decale js_1 bit 0 dans C
.0b37	90 22		               bcc  js_1b4         ; Est-ce vers la droite (R)
.0b39	48		               pha                 ; On stack la valeur
.0b3a	ee 8e 0e	               inc  js_1flag
.0b3d	ad 89 0e	               lda  js_1pixx+1
.0b40	f0 0a		               beq  incj1x
.0b42	ad 88 0e	               lda  js_1pixx
.0b45	c9 3c		               cmp  #$40-4
.0b47	30 03		               bmi  incj1x
.0b49	4c 5a 0b	               jmp  js_1b3out
.0b4c	18		incj1x         clc                 ; On place la Carry a 0
.0b4d	ad 88 0e	               lda  js_1pixx
.0b50	69 02		               adc  #js_xoffset    ; On augmente
.0b52	8d 88 0e	               sta  js_1pixx       ; le X
.0b55	90 03		               bcc  js_1b3out      ; de offset
.0b57	ee 89 0e	               inc  js_1pixx+1     ; sur 16 bits
.0b5a	68		js_1b3out      pla                 ; On recupere la valeur
.0b5b	68		js_1b4         pla                 ; On recupere la valeur
.0b5c	4a		               lsr                 ; Est-ce le bbouton fire (F)
.0b5d	90 14		               bcc  port1_out      ; Oui!
.0b5f	ee 8e 0e	               inc  js_1flag
.0b62	ee 8d 0e	               inc  js_1fire       ; On augmente le nombre de tir
.0b65	a2 01		js_1wait       ldx  #$01
.0b67	a0 ff		               ldy  #$ff
.0b69	c8		js_1rel        iny
.0b6a	ad 01 dc	               lda  js_1port
.0b6d	49 ff		               eor  #$ff
.0b6f	29 10		               and  #$10
.0b71	d0 f6		               bne  js_1rel        ; On attend le relachement des boutons.
.0b73	ad 8e 0e	port1_out      lda  js_1flag
.0b76	f0 08		               beq  out
.0b78	20 66 0c	               jsr  js_1correct
.0b7b	a9 00		               lda  #0
.0b7d	8d 8e 0e	               sta  js_1flag
.0b80	20 73 c3	out            jsr  popreg         ; Récupère tous les registres.
.0b83	60		               rts
.0b84			js_2scan
.0b84	20 44 c3	               jsr  pushreg        ; Sauvegarde tous les registres.
.0b87	ad 00 dc	port2          lda  js_2port       ; Lecture du port d'entrées.
.0b8a	29 1f		               and  #$1f           ; Masque les bits 7, 6 et 5.
.0b8c	49 1f		               eor  #$1f           ; Inverse les bits 4 à 0.
.0b8e	8d 26 0f	               sta  js_2status     ; Sauvegarde le status en mémoire.
.0b91	c9 00		               cmp  #$00           ; Si des interrupteurs sont appuyé ...
.0b93	d0 03		               bne  p2scan         ; ... on cherche lesquels.
.0b95	4c 3c 0c	               jmp  port2_out      ; Si non on sort.
.0b98	ee 99 0e	p2scan         inc  js_2flag       ; On incrémente le témoin de changement.
.0b9b	18		               clc                 ; On met le Carry à 0.
.0b9c	4a		js_2b0         lsr                 ; On decale js_2 bit 0 dans Carry.
.0b9d	48		               pha                 ; On stack la valeur décalée.
.0b9e	90 0f		               bcc  js_2b1         ; Si pas BTNUP, on vérifi le prochain.
.0ba0	ad 95 0e	               lda  js_2pixy       ; Oui!
.0ba3	38		               sec                 ; On place la Carry a 1.
.0ba4	e9 02		               sbc  #js_yoffset    ; Déplace le crs vrs le haut de offset.
.0ba6	c9 f0		               cmp  #$f0           ; Si posy plus basse que Viewport NTSC ...
.0ba8	90 02		               bcc  sto2ym         ; Si le crs dépasse le bas du viewport ...
.0baa	a9 00		               lda  #$00           ; On le replace en haut.
.0bac	8d 95 0e	sto2ym         sta  js_2pixy       ; Sauvegarde La pos. pixel de Y.
.0baf	68		js_2b1         pla                 ; On recupere la valeur du scan décalé.
.0bb0	4a		               lsr                 ; On decale js_2 bit 0 dans Carry.
.0bb1	48		               pha                 ; On stack la valeur décalée.
.0bb2	90 0f		               bcc  js_2b2         ; Si pas BTN-BAS, on vérifi le prochain.
.0bb4	ad 95 0e	               lda  js_2pixy       ; Oui!
.0bb7	18		               clc                 ; On place la Carry a 0.
.0bb8	69 02		               adc  #js_yoffset    ; Déplace le crs vrs le bas de offset.
.0bba	c9 c7		               cmp  #199           ; Sommes nous dépassé le bas de l'écran?
.0bbc	90 02		               bcc  sto2yp         ; Non, on sauvegarde la position.
.0bbe	a9 c7		               lda  #199           ; Oui,
.0bc0	8d 95 0e	sto2yp         sta  js_2pixy       ; On bloque le Y à 199.
.0bc3	68		js_2b2         pla                 ; On recupere la valeur du scan décalé.
.0bc4	4a		               lsr                 ; On decale js_2 bit 0 dans C
.0bc5	48		               pha                 ; On stack la valeur décalée.
.0bc6	90 1b		               bcc  js_2b3         ; Est-ce le bouton gauche (L)
.0bc8	ad 93 0e	               lda  js_2pixx       ; Oui!
.0bcb	0d 94 0e	               ora  js_2pixx+1
.0bce	f0 13		               beq  js_2b2out
.0bd0	38		               sec                 ; On place la Carry a 1
.0bd1	ad 93 0e	               lda  js_2pixx       ; Oui!
.0bd4	e9 02		               sbc  #js_xoffset    ; On diminue
.0bd6	8d 93 0e	               sta  js_2pixx       ;  le X
.0bd9	b0 08		               bcs  js_2b2out      ; de offset
.0bdb	ad 94 0e	               lda  js_2pixx+1
.0bde	f0 03		               beq  js_2b2out
.0be0	ce 94 0e	               dec  js_2pixx+1     ; sur 16 bits
.0be3			js_2b2out
.0be3	68		js_2b3         pla                 ; On recupere la valeur du scan décalé.
.0be4	4a		               lsr                 ; On decale js_2 bit 0 dans C
.0be5	48		               pha                 ; On stack la valeur décalée.
.0be6	90 1d		               bcc  js_2b4         ; Est-ce vers la droite (R)
.0be8	ad 94 0e	               lda  js_2pixx+1
.0beb	f0 0a		               beq  incj2x
.0bed	ad 93 0e	               lda  js_2pixx
.0bf0	c9 3e		               cmp  #$40-js_xoffset
.0bf2	30 03		               bmi  incj2x
.0bf4	4c 05 0c	               jmp  js_2b3out
.0bf7	18		incj2x         clc                 ; On place la Carry a 0
.0bf8	ad 93 0e	               lda  js_2pixx       ; Oui!
.0bfb	69 02		               adc  #js_xoffset    ; On augmente
.0bfd	8d 93 0e	               sta  js_2pixx       ;   le X
.0c00	90 03		               bcc  js_2b3out      ; de offset
.0c02	ee 94 0e	               inc  js_2pixx+1     ; sur 16 bits
.0c05			js_2b3out
.0c05	68		js_2b4         pla                 ; On recupere la valeur du scan décalé.
.0c06	4a		               lsr                 ;Estce le bbouton fire (F)
.0c07	90 33		               bcc  port2_out      ;Oui!
.0c09	ee 98 0e	               inc  js_2fire       ; On augmente le nombre de tir
.0c0c	a9 01		               lda  #%00000001
.0c0e	8d 9d 0e	               sta  js_2events
.0c11	ad 93 0e	               lda  js_2pixx
.0c14	8d 9a 0e	               sta  js_2clickx
.0c17	ad 94 0e	               lda  js_2pixx+1
.0c1a	8d 9b 0e	               sta  js_2clickx+1
.0c1d	ad 95 0e	               lda  js_2pixy
.0c20	8d 9c 0e	               sta  js_2clicky
.0c23	ad ff 0e	               lda  js_2val16a+1
.0c26	49 40		               eor  #%01000000
.0c28	8d ff 0e	               sta  js_2val16a+1
.0c2b	a2 00		js_2wait       ldx  #$00
.0c2d	a0 ff		               ldy  #$ff
.0c2f	c8		js_2rel        iny
.0c30	d0 01		               bne  sr1
.0c32	e8		               inx
.0c33	ad 00 dc	sr1            lda  js_2port
.0c36	49 ff		               eor  #$ff
.0c38	29 10		               and  #$10
.0c3a	d0 f3		               bne  js_2rel        ; On attend le relachement du bouton FEU.
.0c3c			port2_out
.0c3c	20 9b 0c	               jsr  js_2correct
.0c3f	a9 00		               lda  #0
.0c41	8d 99 0e	               sta  js_2flag
.0c44	20 73 c3	out            jsr  popreg         ; Récupère tous les registres.
.0c47			js_corrector
.0c47	08		               php
.0c48	48		               pha
.0c49	ad 8e 0e	               lda  js_1flag
.0c4c	f0 08		               beq  check2
.0c4e	20 66 0c	               jsr  js_1correct
.0c51	a9 00		               lda  #0
.0c53	8d 8e 0e	               sta  js_1flag
.0c56	ad 99 0e	check2         lda  js_2flag
.0c59	f0 08		               beq  no_update
.0c5b	20 9b 0c	               jsr  js_2correct
.0c5e	a9 00		               lda  #0
.0c60	8d 99 0e	               sta  js_2flag
.0c63	68		no_update      pla
.0c64	28		               plp
.0c65	60		               rts
.0c66			js_1correct
.0c66	08		               php
.0c67	48		               pha
.0c68	ad 88 0e	               lda  js_1pixx
.0c6b	8d 99 0c	               sta  vallsb
.0c6e	ad 89 0e	               lda  js_1pixx+1
.0c71	6a		               ror                 ; ex = %0000000100000001 = 257 pixel
.0c72	6e 99 0c	               ror  vallsb         ; Cnnnnnnn      On divise par 8 pc les
.0c75	4e 99 0c	               lsr  vallsb         ; 0Cnnnnnn      caracteres de 8 pixels
.0c78	4e 99 0c	               lsr  vallsb         ; 00Cnnnnn
.0c7b	ad 99 0c	               lda  vallsb         ; devient = %00100000 = 32
.0c7e	8d 8b 0e	               sta  js_1x
.0c81	ad 8a 0e	               lda  js_1pixy
.0c84	8d 99 0c	               sta  vallsb
.0c87	4e 99 0c	               lsr  vallsb         ; Cnnnnnnn     On divise par 8 pc les
.0c8a	4e 99 0c	               lsr  vallsb         ; 0Cnnnnnn     caracteres de 8 pixels
.0c8d	4e 99 0c	               lsr  vallsb         ; 00Cnnnnn
.0c90	ad 99 0c	               lda  vallsb         ; devient = %00100000 = 32
.0c93	8d 8c 0e	               sta  js_1y
.0c96	68		               pla
.0c97	28		               plp
.0c98	60		               rts
>0c99	00		vallsb          .byte     0
>0c9a	00		regx            .byte     0
.0c9b			js_2correct
.0c9b	08		               php
.0c9c	48		               pha
.0c9d	ad 93 0e	               lda  js_2pixx
.0ca0	8d ce 0c	               sta  vallsb
.0ca3	ad 94 0e	               lda  js_2pixx+1
.0ca6	6a		               ror                 ; ex = %0000000100000001 = 257 pixel
.0ca7	6e ce 0c	               ror  vallsb         ; Cnnnnnnn     On divise par 8 pc les
.0caa	4e ce 0c	               lsr  vallsb         ; 0Cnnnnnn     caracteres de 8 pixels
.0cad	4e ce 0c	               lsr  vallsb         ; 00Cnnnnn
.0cb0	ad ce 0c	               lda  vallsb         ; devient = %00100000 = 32
.0cb3	8d 96 0e	               sta  js_2x
.0cb6	ad 95 0e	               lda  js_2pixy
.0cb9	8d ce 0c	               sta  vallsb
.0cbc	4e ce 0c	               lsr  vallsb         ; Cnnnnnnn     On divise par 8 pc les
.0cbf	4e ce 0c	               lsr  vallsb         ; 0Cnnnnnn     caracteres de 8 pixels
.0cc2	4e ce 0c	               lsr  vallsb         ; 00Cnnnnn
.0cc5	ad ce 0c	               lda  vallsb         ; devient = %00100000 = 32
.0cc8	8d 97 0e	               sta  js_2y
.0ccb	68		               pla
.0ccc	28		               plp
.0ccd	60		               rts
>0cce	00		vallsb          .byte     0
>0ccf	00		regx            .byte     0
.0cd0			js_showvals
.0cd0	20 60 0d	               jsr  js_2showvals
.0cd3	60		               rts
.0cd4			js_1showvals
.0cd4	20 44 c3	               jsr  pushreg        ; Sauvegarde tous les registres.
.0cd7	ad 8b 0e	               lda  js_1x
.0cda	20 62 c5	               jsr  atohex
.0cdd	ad 02 c5	               lda  a2hexstr+1
.0ce0	8d b1 0e	               sta  js_1val8+19
.0ce3	ad 03 c5	               lda  a2hexstr+2
.0ce6	8d b2 0e	               sta  js_1val8+20
.0ce9	ad 88 0e	               lda  js_1pixx
.0cec	20 62 c5	               jsr  atohex
.0cef	ad 02 c5	               lda  a2hexstr+1
.0cf2	8d d0 0e	               sta  js_1val16+14
.0cf5	ad 03 c5	               lda  a2hexstr+2
.0cf8	8d d1 0e	               sta  js_1val16+15
.0cfb	ad 89 0e	               lda  js_1pixx+1
.0cfe	20 62 c5	               jsr  atohex
.0d01	ad 02 c5	               lda  a2hexstr+1
.0d04	8d ce 0e	               sta  js_1val16+12
.0d07	ad 03 c5	               lda  a2hexstr+2
.0d0a	8d cf 0e	               sta  js_1val16+13
.0d0d	ad 8c 0e	               lda  js_1y
.0d10	20 62 c5	               jsr  atohex
.0d13	ad 02 c5	               lda  a2hexstr+1
.0d16	8d b5 0e	               sta  js_1val8+23
.0d19	ad 03 c5	               lda  a2hexstr+2
.0d1c	8d b6 0e	               sta  js_1val8+24
.0d1f	ad 8a 0e	               lda  js_1pixy
.0d22	20 62 c5	               jsr  atohex
.0d25	ad 02 c5	               lda  a2hexstr+1
.0d28	8d d6 0e	               sta  js_1val16+20
.0d2b	ad 03 c5	               lda  a2hexstr+2
.0d2e	8d d7 0e	               sta  js_1val16+21
.0d31	a9 00		               lda  #0
.0d33	20 62 c5	               jsr  atohex
.0d36	ad 02 c5	               lda  a2hexstr+1
.0d39	8d d4 0e	               sta  js_1val16+18
.0d3c	ad 03 c5	               lda  a2hexstr+2
.0d3f	8d d5 0e	               sta  js_1val16+19
.0d42	ad 8d 0e	               lda  js_1fire
.0d45	20 62 c5	               jsr  atohex
.0d48	ad 03 c5	               lda  a2hexstr+2
.0d4b	8d bf 0e	               sta  js_1val8+33
.0d4e	a2 9e		               ldx  #<js_1val8
.0d50	a0 0e		               ldy  #>js_1val8
.0d52	20 b2 c1	               jsr  putscxy
.0d55	a2 c2		               ldx  #<js_1val16
.0d57	a0 0e		               ldy  #>js_1val16
.0d59	20 b2 c1	               jsr  putscxy
.0d5c	20 73 c3	out            jsr  popreg         ; Récupère tous les registres.
.0d5f	60		               rts
.0d60			js_2showvals
.0d60	20 44 c3	               jsr  pushreg        ; Sauvegarde tous les registres.
.0d63	ad 96 0e	               lda  js_2x
.0d66	20 62 c5	               jsr  atohex
.0d69	ad 01 c5	               lda  a2hexstr
.0d6c	8d ed 0e	               sta  js_2val8+19
.0d6f	ad 02 c5	               lda  a2hexstr+1
.0d72	8d ee 0e	               sta  js_2val8+20
.0d75	ad 9a 0e	               lda  js_2clickx
.0d78	20 62 c5	               jsr  atohex
.0d7b	ad 01 c5	               lda  a2hexstr
.0d7e	8d 1b 0f	               sta  js_2val16+14
.0d81	ad 02 c5	               lda  a2hexstr+1
.0d84	8d 1c 0f	               sta  js_2val16+15
.0d87	ad 9b 0e	               lda  js_2clickx+1
.0d8a	20 62 c5	               jsr  atohex
.0d8d	ad 01 c5	               lda  a2hexstr
.0d90	8d 19 0f	               sta  js_2val16+12
.0d93	ad 02 c5	               lda  a2hexstr+1
.0d96	8d 1a 0f	               sta  js_2val16+13
.0d99	ad 97 0e	               lda  js_2y
.0d9c	20 62 c5	               jsr  atohex
.0d9f	ad 01 c5	               lda  a2hexstr
.0da2	8d f1 0e	               sta  js_2val8+23
.0da5	ad 02 c5	               lda  a2hexstr+1
.0da8	8d f2 0e	               sta  js_2val8+24
.0dab	ad 9c 0e	               lda  js_2clicky
.0dae	20 62 c5	               jsr  atohex
.0db1	ad 01 c5	               lda  a2hexstr
.0db4	8d 21 0f	               sta  js_2val16+20
.0db7	ad 02 c5	               lda  a2hexstr+1
.0dba	8d 22 0f	               sta  js_2val16+21
.0dbd	a9 00		               lda  #0
.0dbf	20 62 c5	               jsr  atohex
.0dc2	ad 01 c5	               lda  a2hexstr
.0dc5	8d 1f 0f	               sta  js_2val16+18
.0dc8	ad 02 c5	               lda  a2hexstr+1
.0dcb	8d 20 0f	               sta  js_2val16+19
.0dce	ad 98 0e	               lda  js_2fire
.0dd1	20 62 c5	               jsr  atohex
.0dd4	ad 02 c5	               lda  a2hexstr+1
.0dd7	8d fb 0e	               sta  js_2val8+33
.0dda	a2 da		               ldx  #<js_2val8
.0ddc	a0 0e		               ldy  #>js_2val8
.0dde	20 b2 c1	               jsr  putscxy
.0de1	a2 fe		               ldx  #<js_2val16a
.0de3	a0 0e		               ldy  #>js_2val16a
.0de5	20 b2 c1	               jsr  putscxy
.0de8	a2 0d		               ldx  #<js_2val16
.0dea	a0 0f		               ldy  #>js_2val16
.0dec	20 b2 c1	               jsr  putscxy
.0def	20 73 c3	out            jsr  popreg         ; Récupère tous les registres.
.0df2	60		               rts
.0df3			js_updatecurs
.0df3	20 44 c3	               jsr  pushreg        ; Sauvegarde tous les registres.
.0df6	ad 96 0e	running        lda  js_2x
.0df9	cd 82 0e	               cmp  js_x
.0dfc	f0 06		               beq     chky
.0dfe	8d 82 0e	               sta  js_x
.0e01	ee 55 0e	               inc     flag
.0e04	ad 97 0e	chky           lda  js_2y
.0e07	cd 83 0e	               cmp  js_y
.0e0a	f0 06		               beq     chkflag
.0e0c	8d 83 0e	               sta  js_y
.0e0f	ee 55 0e	               inc     flag
.0e12	ad 55 0e	chkflag        lda  flag
.0e15	f0 1e		               beq     showit
.0e17	ae 84 0e	               ldx  js_oldx
.0e1a	ac 85 0e	               ldy  js_oldy
.0e1d	20 56 0e	               jsr  js_eoraddrxy
.0e20	ae 82 0e	               ldx  js_x
.0e23	ac 83 0e	               ldy  js_y
.0e26	20 56 0e	               jsr  js_eoraddrxy
.0e29	ad 82 0e	               lda  js_x
.0e2c	8d 84 0e	               sta  js_oldx
.0e2f	ad 83 0e	               lda  js_y
.0e32	8d 85 0e	               sta  js_oldy
.0e35	a9 00		showit         lda  #0
.0e37	8d 55 0e	               sta  flag
.0e3a	8d f0 c4	               sta  addr1
.0e3d	a9 04		               lda  #$04
.0e3f	8d f1 c4	               sta  addr1+1
.0e42	ae 82 0e	               ldx  js_x
.0e45	ac 83 0e	               ldy  js_y
.0e48	20 a1 c4	               jsr  xy2addr
.0e4b	ac f2 c4	               ldy  addr2
.0e4e	ae f3 c4	               ldx  addr2+1
.0e51	20 73 c3	out            jsr  popreg         ; Récupère tous les registres.
.0e54	60		               rts
>0e55	00		flag            .byte   0
.0e56			js_eoraddrxy
.0e56	20 d6 c2	               jsr  pushall
.0e59	20 83 c4	               jsr  savezp2
.0e5c	a9 04		               lda  #$04
.0e5e	8d f1 c4	               sta  addr1+1
.0e61	a9 00		               lda  #0
.0e63	8d f0 c4	               sta  addr1
.0e66	20 a1 c4	               jsr  xy2addr
.0e69	ac f2 c4	               ldy  addr2
.0e6c	84 fd		               sty  zpage2
.0e6e	ae f3 c4	               ldx  addr2+1
.0e71	86 fe		               stx  zpage2+1
.0e73	a0 00		               ldy  #0
.0e75	b1 fd		               lda  (zpage2),y
.0e77	49 40		               eor     #%01000000
.0e79	91 fd		               sta  (zpage2),y
.0e7b	20 92 c4	               jsr  restzp2
.0e7e	20 11 c3	               jsr  popall
.0e81	60		               rts
>0e82	00		js_x           .byte   0
>0e83	00		js_y           .byte   0
>0e84	ff		js_oldx        .byte   $ff
>0e85	ff		js_oldy        .byte   $ff
>0e86	00		js_oldcar      .byte   0
>0e87	00		js_oldcol      .byte   0
>0e88	00 00		js_1pixx       .word   0
>0e8a	00		js_1pixy       .byte   0
>0e8b	00		js_1x          .byte   0
>0e8c	00		js_1y          .byte   0
>0e8d	00		js_1fire       .byte   0
>0e8e	00		js_1flag       .byte   0
>0e8f	00 00		js_1clickx     .word   0
>0e91	00		js_1clicky     .byte   0
>0e92	00		js_1events     .byte   0
>0e93	00 00		js_2pixx       .word   0
>0e95	00		js_2pixy       .byte   0
>0e96	00		js_2x          .byte   0
>0e97	00		js_2y          .byte   0
>0e98	00		js_2fire       .byte   0
>0e99	00		js_2flag       .byte   0
>0e9a	00 00		js_2clickx     .word   0
>0e9c	00		js_2clicky     .byte   0
>0e9d	00		js_2events     .byte   0
=$03			js_txtcol      =       vcyan
=$00			js_txtbak      =       bkcol0
>0e9e	03 00 04 05	js_1val8       .byte     js_txtcol,js_txtbak,4,5
>0ea2	50 0f 12 14	               .null     "Port 1 (x,y):($00,$00) Fire:(0)"
>0ea6	20 31 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>0eb6	30 29 20 46 09 12 05 3a 28 30 29 00
>0ec2	03 00 0b 07	js_1val16      .byte     js_txtcol,js_txtbak,11,7
>0ec6	28 18 2c 19	               .null     "(x,y):($0000,$0000)"
>0eca	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29 00
>0eda	03 00 04 0a	js_2val8       .byte     js_txtcol,js_txtbak,4,10
>0ede	43 01 12 50	               .null     "CarPos (x,y):($00,$00) Fire:(0)"
>0ee2	0f 13 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>0ef2	30 29 20 46 09 12 05 3a 28 30 29 00
>0efe	01 00 04 0c	js_2val16a     .byte     vblanc,js_txtbak,4,12
>0f02	43 0c 09 03	               .null     "Click pos."
>0f06	0b 20 10 0f 13 2e 00
>0f0d	03 00 10 0c	js_2val16      .byte     js_txtcol,js_txtbak,16,12
>0f11	28 18 2c 19	               .null     "(x,y):($0000,$0000)"
>0f15	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29 00
>0f25	00		js_1status     .byte 0
>0f26	00		js_2status     .byte 0

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-spriteman.asm

.0f27			sprt_init
.0f27	20 d6 c2	               jsr  pushall
.0f2a	ac 4d 13	               ldy  sprt_ptr6+1
.0f2d	ae 4c 13	               ldx  sprt_ptr6
.0f30	ad 82 0f	               lda  sprt_ptr
.0f33	20 64 10	               jsr  sprt_loadptr
.0f36	20 65 c4	               jsr  savezp1
.0f39	20 83 c4	               jsr  savezp2
.0f3c	ad 15 d0	               lda  vic+$15 ; enable sprite 2
.0f3f	09 04		               ora  #%00000100
.0f41	8d 15 d0	               sta  vic+$15
.0f44	a9 0d		               lda  #$0d
.0f46	8d fa 07	               sta  $7fa
.0f49	ad 40 13	               lda  sprt_ptr0
.0f4c	85 fb		               sta  zpage1
.0f4e	ad 41 13	               lda  sprt_ptr0+1
.0f51	85 fc		               sta  zpage1+1
.0f53	a9 40		               lda  #$40
.0f55	85 fd		               sta  zpage2
.0f57	a9 03		               lda  #$03
.0f59	85 fe		               sta  zpage2+1
.0f5b	a0 41		               ldy  #65
.0f5d	b1 fb		               lda  (zpage1),y      ; sprite y offset
.0f5f	8d a7 10	               sta  sprt_yoffset
.0f62	88		               dey
.0f63	b1 fb		               lda  (zpage1),y      ; sprite x offset
.0f65	8d a6 10	               sta  sprt_xoffset
.0f68	88		               dey
.0f69	b1 fb		               lda  (zpage1),y      ; sprite color
.0f6b	8d 29 d0	               sta  $d029
.0f6e	88		               dey
.0f6f	a0 3e		               ldy  #62
.0f71	b1 fb		nextbyte       lda  (zpage1),y
.0f73	91 fd		               sta  (zpage2),y
.0f75	88		               dey
.0f76	d0 f9		               bne  nextbyte
.0f78	20 74 c4	               jsr  restzp1
.0f7b	20 92 c4	               jsr  restzp2
.0f7e	20 11 c3	               jsr  popall
.0f81	60		               rts
>0f82	01		sprt_ptr       .byte   $01
.0f83			sprt_calcpos
.0f83	20 44 c3	               jsr  pushreg
.0f86	a9 00		               lda  #0
.0f88	8d a9 10	               sta  sprt_x+1
.0f8b	8d ab 10	               sta  sprt_y+1
.0f8e	ad 94 0e	               lda  js_2pixx+1
.0f91	18		               clc
.0f92	2a		               rol
.0f93	2a		               rol
.0f94	8d a9 10	               sta  sprt_x+1
.0f97	ad 93 0e	               lda  js_2pixx
.0f9a	18		               clc
.0f9b	6d a6 10	               adc  sprt_xoffset
.0f9e	8d a8 10	               sta  sprt_x
.0fa1	90 08		               bcc  norepx
.0fa3	ad a9 10	               lda  sprt_x+1
.0fa6	09 04		               ora  #$04
.0fa8	8d a9 10	               sta  sprt_x+1
.0fab	ad 95 0e	norepx         lda  js_2pixy
.0fae	18		               clc
.0faf	6d a7 10	               adc  sprt_yoffset
.0fb2	8d aa 10	               sta  sprt_y
.0fb5	20 73 c3	               jsr  popreg
.0fb8	60		               rts
.0fb9			sprt_move
.0fb9	20 44 c3	               jsr  pushreg
.0fbc	20 83 0f	               jsr  sprt_calcpos
.0fbf	ad a8 10	               lda  sprt_x
.0fc2	8d 04 d0	               sta  vic+$04
.0fc5	ad a9 10	               lda  sprt_x+1
.0fc8	8d 10 d0	               sta  vic+$10
.0fcb	ad aa 10	               lda  sprt_y
.0fce	8d 05 d0	               sta  vic+$05
.0fd1	20 d8 0f	               jsr  sprt_showpos
.0fd4	20 73 c3	               jsr  popreg
.0fd7	60		               rts
.0fd8			sprt_showpos
.0fd8	20 d6 c2	               jsr  push
.0fdb	ad a8 10	               lda  sprt_x
.0fde	20 62 c5	               jsr  atohex
.0fe1	ad 01 c5	               lda  a2hexstr
.0fe4	8d 6f 13	               sta  sprite_pos+26
.0fe7	ad 02 c5	               lda  a2hexstr+1
.0fea	8d 70 13	               sta  sprite_pos+27
.0fed	ad a9 10	               lda  sprt_x+1
.0ff0	20 62 c5	               jsr  atohex
.0ff3	ad 01 c5	               lda  a2hexstr
.0ff6	8d 6d 13	               sta  sprite_pos+24
.0ff9	ad 02 c5	               lda  a2hexstr+1
.0ffc	8d 6e 13	               sta  sprite_pos+25
.0fff	ad aa 10	               lda  sprt_y
.1002	20 62 c5	               jsr  atohex
.1005	ad 01 c5	               lda  a2hexstr
.1008	8d 75 13	               sta  sprite_pos+32
.100b	ad 02 c5	               lda  a2hexstr+1
.100e	8d 76 13	               sta  sprite_pos+33
.1011	a9 00		               lda  #0
.1013	20 62 c5	               jsr  atohex
.1016	ad 01 c5	               lda  a2hexstr
.1019	8d 73 13	               sta  sprite_pos+30
.101c	ad 02 c5	               lda  a2hexstr+1
.101f	8d 74 13	               sta  sprite_pos+31
.1022	a2 55		               ldx  #<sprite_pos
.1024	a0 13		               ldy  #>sprite_pos
.1026	20 b2 c1	               jsr  putscxy
.1029	20 11 c3	               jsr  pop
.102c	60		               rts
.102d			sprt_loadptr2
.102d	20 d6 c2	               jsr  push
.1030	aa		               tax
.1031	8e 82 0f	               stx  sprt_ptr
.1034	ad 41 13	               lda  sprt_ptr0+1
.1037	8d 63 10	               sta  calcbuff+1
.103a	ad 40 13	               lda  sprt_ptr0
.103d	8d 62 10	               sta  calcbuff
.1040	e0 00		               cpx  #0
.1042	f0 11		               beq  addrok
.1044	ad 62 10	               lda  calcbuff
.1047	18		nextx          clc
.1048	69 42		               adc  #66
.104a	90 03		               bcc  nocarry
.104c	ee 63 10	               inc  calcbuff+1
.104f	8d 62 10	nocarry        sta  calcbuff
.1052	ca		               dex
.1053	d0 f2		               bne  nextx
.1055	ac 63 10	addrok         ldy  calcbuff+1
.1058	ae 62 10	               ldx  calcbuff
.105b	20 7e 10	               jsr  sprt_setimage
.105e	20 11 c3	               jsr  pop
.1061	60		               rts
>1062	00 00		calcbuff        .word   $0
.1064			sprt_loadptr
.1064	20 d6 c2	               jsr  push
.1067	ad 82 0f	               lda  sprt_ptr
.106a	18		               clc
.106b	2a		               rol
.106c	a8		               tay
.106d	b9 40 13	               lda  sprt_ptr0,y
.1070	aa		               tax
.1071	b9 41 13	               lda  sprt_ptr0+1,y
.1074	a8		               tay
.1075	20 7e 10	               jsr  sprt_setimage
.1078	20 11 c3	               jsr  pop
.107b	60		               rts
>107c	00 00		calcbuff        .word   $0
.107e			sprt_setimage
.107e	20 d6 c2	               jsr  push
.1081	20 65 c4	               jsr  savezp1
.1084	20 83 c4	               jsr  savezp2
.1087	84 fc		               sty  zpage1+1
.1089	86 fb		               stx  zpage1
.108b	a0 10		               ldy  #>sprt_image
.108d	84 fe		               sty  zpage2+1
.108f	a0 ac		               ldy  #<sprt_image
.1091	84 fd		               sty  zpage2
.1093	a0 42		               ldy  #66
.1095	b1 fb		nextbyte       lda  (zpage1),y
.1097	91 fd		               sta  (zpage2),y
.1099	88		               dey
.109a	d0 f9		               bne  nextbyte
.109c	20 92 c4	               jsr  restzp2
.109f	20 74 c4	               jsr  restzp1
.10a2	20 11 c3	               jsr  pop
.10a5	60		               rts
>10a6	00		sprt_xoffset   .byte     $00
>10a7	00		sprt_yoffset   .byte     $00
>10a8	00 00		sprt_x         .word     $0000
>10aa	00 00		sprt_y         .word     $0000
>10ac			sprt_image      .fill    66
>10ee	00 00 00 00	sprt_crxair    .byte     $00, $00, $00, $00, $00, $00 ; 6
>10f2	00 00
>10f4	00 66 00 00	               .byte     $00, $66, $00, $00, $3c, $00 ; 12
>10f8	3c 00
>10fa	00 18 00 00	               .byte     $00, $18, $00, $00, $00, $00 ; 18
>10fe	00 00
>1100	00 00 00 00	               .byte     $00, $00, $00, $00, $18, $00 ; 24
>1104	18 00
>1106	80 00 01 c0	               .byte     $80, $00, $01, $c0, $18, $03 ; 30
>110a	18 03
>110c	66 66 66 c0	               .byte     $66, $66, $66, $c0, $18, $03 ; 36
>1110	18 03
>1112	80 00 01 00	               .byte     $80, $00, $01, $00, $18, $00 ; 42
>1116	18 00
>1118	00 00 00 00	               .byte     $00, $00, $00, $00, $00, $00 ; 48
>111c	00 00
>111e	00 18 00 00	               .byte     $00, $18, $00, $00, $3c, $00 ; 54
>1122	3c 00
>1124	00 66 00 00	               .byte     $00, $66, $00, $00, $00, $00 ; 60
>1128	00 00
>112a	00 00 00 01	               .byte     $00, $00, $00, $01, $0c, $28 ; 66,
>112e	0c 28
>1130	80 00 00 e0	sprt_mouse     .byte     $80, $00, $00, $e0, $00, $00 ; 6
>1134	00 00
>1136	b8 00 00 ce	               .byte     $b8, $00, $00, $ce, $00, $00 ; 12
>113a	00 00
>113c	83 80 00 c0	               .byte     $83, $80, $00, $c0, $e0, $00 ; 18
>1140	e0 00
>1142	80 18 00 c0	               .byte     $80, $18, $00, $c0, $3c, $00 ; 24
>1146	3c 00
>1148	80 e0 00 c0	               .byte     $80, $e0, $00, $c0, $60, $00 ; 30
>114c	60 00
>114e	98 30 00 fc	               .byte     $98, $30, $00, $fc, $18, $00 ; 36
>1152	18 00
>1154	c6 0c 00 03	               .byte     $c6, $0c, $00, $03, $06, $00 ; 42
>1158	06 00
>115a	01 9c 00 00	               .byte     $01, $9c, $00, $00, $f0, $00 ; 48
>115e	f0 00
>1160	00 40 00 00	               .byte     $00, $40, $00, $00, $00, $00 ; 54
>1164	00 00
>1166	00 00 00 00	               .byte     $00, $00, $00, $00, $00, $00 ; 60
>116a	00 00
>116c	00 00 00 01	               .byte     $00, $00, $00, $01, $18, $31 ; 66
>1170	18 31
>1172	00 7c 00 01	sprt_pointer   .byte     $00, $7c, $00, $01, $83, $00 ; 6
>1176	83 00
>1178	06 10 c0 08	               .byte     $06, $10, $c0, $08, $00, $30 ; 12
>117c	00 30
>117e	12 10 88 20	               .byte     $12, $10, $88, $20, $00, $08 ; 18
>1182	00 08
>1184	40 ba 04 40	               .byte     $40, $ba, $04, $40, $6c, $04 ; 24
>1188	6c 04
>118a	80 c6 02 aa	               .byte     $80, $c6, $02, $aa, $82, $aa ; 30
>118e	82 aa
>1190	80 c6 02 40	               .byte     $80, $c6, $02, $40, $6c, $04 ; 36
>1194	6c 04
>1196	40 ba 04 20	               .byte     $40, $ba, $04, $20, $00, $08 ; 42
>119a	00 08
>119c	12 10 90 08	               .byte     $12, $10, $90, $08, $00, $20 ; 48
>11a0	00 20
>11a2	06 10 c0 01	               .byte     $06, $10, $c0, $01, $83, $00 ; 54
>11a6	83 00
>11a8	00 7c 00 00	               .byte     $00, $7c, $00, $00, $00, $00 ; 60
>11ac	00 00
>11ae	00 00 00 01	               .byte     $00, $00, $00, $01, $0c, $28 ; 66
>11b2	0c 28
>11b4	55 55 55 aa	sprt_pointer2  .byte     $55, $55, $55, $aa, $aa, $aa ; 6
>11b8	aa aa
>11ba	55 55 55 aa	               .byte     $55, $55, $55, $aa, $aa, $aa ; 12
>11be	aa aa
>11c0	55 55 55 aa	               .byte     $55, $55, $55, $aa, $aa, $aa ; 18
>11c4	aa aa
>11c6	54 00 55 aa	               .byte     $54, $00, $55, $aa, $00, $2a ; 24
>11ca	00 2a
>11cc	54 00 55 aa	               .byte     $54, $00, $55, $aa, $00, $2a ; 30
>11d0	00 2a
>11d2	54 00 55 aa	               .byte     $54, $00, $55, $aa, $00, $2a ; 36
>11d6	00 2a
>11d8	54 00 55 aa	               .byte     $54, $00, $55, $aa, $00, $2a ; 42
>11dc	00 2a
>11de	54 00 55 aa	               .byte     $54, $00, $55, $aa, $aa, $aa ; 48
>11e2	aa aa
>11e4	55 55 55 aa	               .byte     $55, $55, $55, $aa, $aa, $aa ; 54
>11e8	aa aa
>11ea	55 55 55 aa	               .byte     $55, $55, $55, $aa, $aa, $aa ; 60
>11ee	aa aa
>11f0	55 55 55 01	               .byte     $55, $55, $55, $01, $0c, $28 ; 66
>11f4	0c 28
>11f6	06 00 00 0f	sprt_hand      .byte     $06, $00, $00, $0f, $00, $00 ; 6
>11fa	00 00
>11fc	19 80 00 10	               .byte     $19, $80, $00, $10, $80, $00 ; 12
>1200	80 00
>1202	19 80 00 16	               .byte     $19, $80, $00, $16, $b1, $8c ; 18
>1206	b1 8c
>1208	10 ca 52 10	               .byte     $10, $ca, $52, $10, $84, $21 ; 24
>120c	84 21
>120e	10 84 21 30	               .byte     $10, $84, $21, $30, $84, $21 ; 30
>1212	84 21
>1214	50 84 21 90	               .byte     $50, $84, $21, $90, $84, $21 ; 36
>1218	84 21
>121a	90 00 01 90	               .byte     $90, $00, $01, $90, $00, $01 ; 42
>121e	00 01
>1220	90 7f c1 90	               .byte     $90, $7f, $c1, $90, $00, $01 ; 48
>1224	00 01
>1226	40 ff e2 40	               .byte     $40, $ff, $e2, $40, $00, $02 ; 54
>122a	00 02
>122c	3c 00 04 02	               .byte     $3c, $00, $04, $02, $00, $08 ; 60
>1230	00 08
>1232	03 ff f8 01	               .byte     $03, $ff, $f8, $01, $12, $31 ; 66
>1236	12 31
>1238	00 3e 00 01	sprt_ultraman  .byte     $00, $3e, $00, $01, $c1, $c0 ; 6
>123c	c1 c0
>123e	0e 3e 30 08	               .byte     $0e, $3e, $30, $08, $41, $08 ; 12
>1242	41 08
>1244	10 1c 04 10	               .byte     $10, $1c, $04, $10, $22, $04 ; 18
>1248	22 04
>124a	24 1c 12 23	               .byte     $24, $1c, $12, $23, $00, $62 ; 24
>124e	00 62
>1250	20 08 02 47	               .byte     $20, $08, $02, $47, $c1, $f1 ; 30
>1254	c1 f1
>1256	6a aa ab 47	               .byte     $6a, $aa, $ab, $47, $c9, $f1 ; 36
>125a	c9 f1
>125c	20 08 02 20	               .byte     $20, $08, $02, $20, $14, $02 ; 42
>1260	14 02
>1262	20 00 02 10	               .byte     $20, $00, $02, $10, $00, $04 ; 48
>1266	00 04
>1268	10 7f 04 08	               .byte     $10, $7f, $04, $08, $00, $08 ; 54
>126c	00 08
>126e	06 3e 30 01	               .byte     $06, $3e, $30, $01, $c1, $c0 ; 60
>1272	c1 c0
>1274	00 3e 00 01	               .byte     $00, $3e, $00, $01, $0c, $28 ; 66
>1278	0c 28
>127a	00 1c 00 00	sprt_male      .byte     $00, $1c, $00, $00, $3e, $00 ; 6
>127e	3e 00
>1280	00 3e 00 00	               .byte     $00, $3e, $00, $00, $3e, $00 ; 12
>1284	3e 00
>1286	00 1c 00 00	               .byte     $00, $1c, $00, $00, $08, $00 ; 18
>128a	08 00
>128c	00 ff 80 00	               .byte     $00, $ff, $80, $00, $ff, $80 ; 24
>1290	ff 80
>1292	00 be 80 00	               .byte     $00, $be, $80, $00, $9c, $80 ; 30
>1296	9c 80
>1298	00 88 80 00	               .byte     $00, $88, $80, $00, $be, $80 ; 36
>129c	be 80
>129e	00 be 80 01	               .byte     $00, $be, $80, $01, $9c, $c0 ; 42
>12a2	9c c0
>12a4	01 94 c0 00	               .byte     $01, $94, $c0, $00, $14, $00 ; 48
>12a8	14 00
>12aa	00 14 00 00	               .byte     $00, $14, $00, $00, $14, $00 ; 54
>12ae	14 00
>12b0	00 36 00 00	               .byte     $00, $36, $00, $00, $77, $00 ; 60
>12b4	77 00
>12b6	00 77 00 01	               .byte     $00, $77 ,$00, $01, $0c, $2f ; 66
>12ba	0c 2f
>12bc	00 3c 00 00	sprt_robot     .byte     $00, $3c, $00, $00, $24, $00 ; 6
>12c0	24 00
>12c2	00 66 18 00	               .byte     $00, $66, $18, $00, $66, $38 ; 12
>12c6	66 38
>12c8	00 24 38 00	               .byte     $00, $24, $38, $00, $3c, $10 ; 18
>12cc	3c 10
>12ce	00 18 10 00	               .byte     $00, $18, $10, $00, $18, $10 ; 24
>12d2	18 10
>12d4	0f ff f0 08	               .byte     $0f, $ff, $f0, $08, $7e, $00 ; 30
>12d8	7e 00
>12da	08 7e 00 08	               .byte     $08, $7e, $00, $08, $18, $00 ; 36
>12de	18 00
>12e0	1c 18 00 1c	               .byte     $1c, $18, $00, $1c, $18, $00 ; 42
>12e4	18 00
>12e6	18 3c 00 00	               .byte     $18, $3c, $00, $00, $3c, $00 ; 48
>12ea	3c 00
>12ec	00 24 00 00	               .byte     $00, $24, $00, $00, $24, $00 ; 54
>12f0	24 00
>12f2	00 24 00 03	               .byte     $00, $24, $00, $03, $e7, $c0 ; 60
>12f6	e7 c0
>12f8	03 e7 c0 01	               .byte     $03, $e7, $c0, $01, $0c, $28 ; 66
>12fc	0c 28
>12fe	00 1c 00 00	sprt_femme     .byte     $00, $1c, $00, $00, $3e, $00 ; 6
>1302	3e 00
>1304	00 3e 00 00	               .byte     $00, $3e, $00, $00, $3e, $00 ; 12
>1308	3e 00
>130a	00 1c 00 00	               .byte     $00, $1c, $00, $00, $08, $00 ; 18
>130e	08 00
>1310	00 7f 00 00	               .byte     $00, $7f, $00, $00, $ff, $80 ; 24
>1314	ff 80
>1316	00 be 80 00	               .byte     $00, $be, $80, $00, $9c, $80 ; 30
>131a	9c 80
>131c	00 88 80 00	               .byte     $00, $88, $80, $00, $9c, $80 ; 36
>1320	9c 80
>1322	00 be 80 01	               .byte     $00, $be, $80, $01, $be, $c0 ; 42
>1326	be c0
>1328	01 be c0 00	               .byte     $01, $be, $c0, $00, $7f, $00 ; 48
>132c	7f 00
>132e	00 7f 00 00	               .byte     $00, $7f, $00, $00, $ff, $80 ; 54
>1332	ff 80
>1334	00 36 00 00	               .byte     $00, $36, $00, $00, $77, $00 ; 60
>1338	77 00
>133a	00 55 00 01	               .byte     $00, $55 ,$00, $01, $0c, $2f ; 66
>133e	0c 2f
>1340	ac 10		sprt_ptr0      .word     sprt_image + (0*66)
>1342	ee 10		sprt_ptr1      .word     sprt_image + (1*66)
>1344	30 11		sprt_ptr2      .word     sprt_image + (2*66)
>1346	72 11		sprt_ptr3      .word     sprt_image + (3*66)
>1348	b4 11		sprt_ptr4      .word     sprt_image + (4*66)
>134a	f6 11		sprt_ptr5      .word     sprt_image + (5*66)
>134c	38 12		sprt_ptr6      .word     sprt_image + (6*66)
>134e	7a 12		sprt_ptr7      .word     sprt_image + (7*66)
>1350	bc 12		sprt_ptr8      .word     sprt_image + (8*66)
>1352	fe 12		sprt_ptr9      .word     sprt_image + (9*66)
>1354	ff		testbyte       .byte     255
=$07			sprt_txtcol    =         vjaune
=$00			sprt_txtbak    =         bkcol0
=$01			sprt_color     =         vwhite
>1355	07 00 04 0e	sprite_pos     .byte     sprt_txtcol,sprt_txtbak,4,14
>1359	53 10 12 09	               .null     "Sprite pos. (x,y):($0000,$0000)"
>135d	14 05 20 10 0f 13 2e 20 28 18 2c 19 29 3a 28 24
>136d	30 30 30 30 2c 24 30 30 30 30 29 00

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-text-mc.asm

>c000	00 00		scrptr         .word     $00            ; ... pointe position ecran, ...
>c002	00 00		colptr         .word     $00            ; ... pointe position couleur, ...
>c004	01		curcol         .byte     $01            ; ... la couleur du caractère, ...
>c005	06		brdcol         .byte     vbleu          ; ... la couleur de la bordure et
>c006	00		vicbkcol0      .byte     vnoir  ;$0b    ; 0,
>c007	02		vicbkcol1      .byte     vrouge ;$0b    ; 1,
>c008	05		vicbkcol2      .byte     vvert  ;$0b    ; 2,
>c009	06		vicbkcol3      .byte     vbleu  ;$0b    ; et 3.
>c00a	00		inverse        .byte     $00
>c00b	00 00 00 00	scraddr        .byte     0,0,0,0,0
>c00f	00
>c010	00 00 00 00	coladdr        .byte     0,0,0,0,0
>c014	00
>c015	00		bkcol          .byte     %00000000      ; Pointeur de la couleur actuelle
>c016	00 04		virtaddr       .word     $0400          ; L'adresse de l'ecran virtuel
=$00			bkcol0         =         %00000000      ;
=$40			bkcol1         =         %01000000
=$80			bkcol2         =         %10000000
=$c0			bkcol3         =         %11000000
.c018			scrmaninit
.c018	08		               php            ; On sauvegarde les registres
.c019	48		               pha
.c01a	a9 15		               lda  #%00010101; Selectionne la plage memoire video
.c01c	8d 18 d0	               sta  $d018     ; et le jeu de caracteeres.
.c01f	ad 16 d0	               lda  $d016     ; 53270 Lecture valeur actuelle pour ne
.c022	09 10		               ora  #%00010000; modifier que le bit 4.
.c024	29 ef		               and  #%11101111
.c026	8d 16 d0	               sta  $d016 ; 53270
.c029	ad 11 d0	               lda  $d011     ; On ne change que le bit 6 pour
.c02c	09 40		               ora  #%01000000; selectionner le md. couleur de
.c02e	8d 11 d0	               sta  $d011     ; 53270   ; fond etendu.
.c031	ad 06 c0	               lda  vicbkcol0
.c034	8d 21 d0	               sta  $d021     ; 53281
.c037	ad 07 c0	               lda  vicbkcol1
.c03a	8d 22 d0	               sta  $d022     ; 53282
.c03d	ad 08 c0	               lda  vicbkcol2
.c040	8d 23 d0	               sta  $d023     ; 53283
.c043	ad 09 c0	               lda  vicbkcol3
.c046	8d 24 d0	               sta  $d024     ; 54284
.c049	a5 00		               lda  bkcol0    ; On charge et utilise la couleur de ...
.c04b	8d 15 c0	               sta  bkcol     ; ... fond par defaut des caracteres.
.c04e	20 a8 c0	               jsr  cls       ; Finalement on efface l'ecran
.c051	68		               pla
.c052	28		               plp
.c053	60		               rts
.c054			curshome
.c054	08		               php                      ; Sauvegarde flags ...
.c055	48		               pha                      ; ... et accumulateur
.c056	ad 16 c0	               lda  virtaddr            ; In replace le pointeur ...
.c059	8d 00 c0	               sta  scrptr              ; ... d'écran virtuel à sa ...
.c05c	ad 17 c0	               lda  virtaddr+1          ; ... position initiale.
.c05f	8d 01 c0	               sta  scrptr+1
.c062	20 93 c0	               jsr  synccolptr          ; On synchronise le ptr couleur.
.c065	ad 06 c0	               lda  vicbkcol0
.c068	8d 21 d0	               sta  $d021               ; On recharge les couleurs ...
.c06b	ad 07 c0	               lda  vicbkcol1           ; ... de fond par defaut tel ...
.c06e	8d 22 d0	               sta  $d022               ; ... que specifie dans les ...
.c071	ad 08 c0	               lda  vicbkcol2           ; ... les variables globales.
.c074	8d 23 d0	               sta  $d023
.c077	ad 09 c0	               lda  vicbkcol3
.c07a	8d 24 d0	               sta  $d024
.c07d	68		               pla                      ; Récupère l'accumulateur ...
.c07e	28		               plp                      ; ... et les flags
.c07f	60		               rts
.c080			incscrptr
.c080	08		               php                      ; Sauvegarde flags ...
.c081	48		               pha                      ; ... et accumulateur
.c082	ee 00 c0	               inc  scrptr              ; Incremente le pointeur
.c085	ad 00 c0	               lda  scrptr              ; Regarde si on doit faire un ...
.c088	d0 03		               bne  pasdereport         ; ... report dans le MSB
.c08a	ee 01 c0	               inc  scrptr+1            ; Si oui on fait le repport
.c08d	20 93 c0	pasdereport    jsr  synccolptr          ; On synchronise le ptr couleur.
.c090	68		               pla                      ; Récupère l'accumulateur ...
.c091	28		               plp                      ; ... et les flags
.c092	60		               rts
.c093			synccolptr
.c093	08		               php                      ; Sauvegarde flags ...
.c094	48		               pha                      ; ... et accumulateur
.c095	ad 00 c0	               lda  scrptr              ; Récupère le LSB du scrptr ...
.c098	8d 02 c0	               sta  colptr              ; ... pour le placer dans le colptr.
.c09b	ad 01 c0	               lda  scrptr+1            ; Récupère le mSB du scrptr, ...
.c09e	29 03		               and  #%00000011          ; ... le converti pour pointer ...
.c0a0	09 d8		               ora  #%11011000          ; ... la RAM couleur ...
.c0a2	8d 03 c0	               sta  colptr+1            ; ... et le sauvegarde.
.c0a5	68		               pla                      ; Récupère l'accumulateur ...
.c0a6	28		               plp                      ; ... et les flags
.c0a7	60		               rts
.c0a8			cls
.c0a8	20 d6 c2	               jsr  push                ; On sauvegarde les registres
.c0ab	ad 16 c0	               lda  virtaddr            ; On replace le curseur d'ecran à
.c0ae	8d 00 c0	               sta  scrptr
.c0b1	ad 17 c0	               lda  virtaddr+1          ; sa position initiale, ($0400).
.c0b4	8d 01 c0	               sta  scrptr+1
.c0b7	20 93 c0	               jsr  synccolptr          ; On synchronise la couleur.
.c0ba	20 69 c2	               jsr  scrptr2zp1          ; L'adresse actuelle dans le ZP1.
.c0bd	ad 05 c0	               lda  brdcol              ; On place la couleur ...
.c0c0	8d 20 d0	               sta  vicbordcol          ; ... de la bordure.
.c0c3	ad 15 c0	               lda  bkcol               ; Associer couleur pour ...
.c0c6	8d 21 d0	               sta  vicbackcol          ; ... remplir l'ecran ...
.c0c9	a9 20		               lda  #$20                ; ... de caracteres espace.
.c0cb	a2 04		               ldx  #4                  ; Quatre blocs de ...
.c0cd	a0 00		nextline       ldy  #0                  ; ... 256 caracteres.
.c0cf			nextcar
.c0cf	91 fb		               sta  (zpage1),y          ;
.c0d1	a5 fc		               lda  zpage1+1
.c0d3	48		               pha
.c0d4	29 03		               and  #%00000011
.c0d6	09 d8		               ora  #%11011000
.c0d8	85 fc		               sta  zpage1+1
.c0da	a9 00		               lda  #0
.c0dc	91 fb		               sta  (zpage1),y
.c0de	68		               pla
.c0df	85 fc		               sta  zpage1+1
.c0e1	a9 20		               lda  #$20
.c0e3	88		               dey
.c0e4	d0 e9		               bne  nextcar
.c0e6	e6 fc		               inc  zpage1+1
.c0e8	ca		               dex
.c0e9	d0 e4		               bne  nextcar
.c0eb	a9 00		               lda  #$00
.c0ed	8d 00 c0	               sta  scrptr
.c0f0	a9 04		               lda  #$04
.c0f2	8d 01 c0	               sta  scrptr+1
.c0f5	20 93 c0	               jsr  synccolptr
.c0f8	20 11 c3	               jsr  pop
.c0fb	60		               rts
.c0fc			setborder
.c0fc	08		               php
.c0fd	8d 05 c0	               sta  brdcol
.c100	8d 20 d0	               sta  vicbordcol
.c103	28		               plp
.c104	60		               rts
.c105			setinverse
.c105	08		               php
.c106	48		               pha
.c107	a9 80		               lda  #%10000000
.c109	8d 0a c0	               sta  inverse
.c10c	68		               pla
.c10d	28		               plp
.c10e	60		               rts
.c10f			clrinverse
.c10f	08		               php
.c110	48		               pha
.c111	a9 00		               lda  #%00000000
.c113	8d 0a c0	               sta  inverse
.c116	68		               pla
.c117	28		               plp
.c118	60		               rts
.c119			putch
.c119	20 d6 c2	               jsr  push           ; On sauvegarde les registres
.c11c	20 69 c2	               jsr  scrptr2zp1     ; Place le ptr d'ecran sur zp1
.c11f	29 3f		               and  #%00111111     ; Masque des bits 6 et 7 pour la ouleur.
.c121	48		               pha
.c122	ad 15 c0	               lda  bkcol
.c125	29 c0		               and  #%11000000
.c127	8d 15 c0	               sta  bkcol
.c12a	68		               pla
.c12b	0d 15 c0	               ora  bkcol          ; On y ajoute la couleur du fond.
.c12e	a0 00		               ldy  #$00           ; Met Y à 0
.c130	91 fb		               sta  (zpage1),y     ; Affiche le caractere
.c132	ae 03 c0	               ldx  colptr+1       ; Place le MSB du ptr de couleur
.c135	86 fc		               stx  zpage1+1       ; ... dans le MSB du zp1.
.c137	ad 04 c0	               lda  curcol         ; Charge la couleur voulu dans.
.c13a	91 fb		               sta  (zpage1),y     ; ... la ram de couleur.
.c13c	20 80 c0	               jsr  incscrptr      ; Incremente le pointeur d'ecran.
.c13f	20 11 c3	               jsr  pop            ; Replace tous les registres
.c142	60		               rts
.c143			z2putch
.c143	20 d6 c2	               jsr  push           ; On sauvegarde les registres
.c146	a0 00		               ldy  #$0            ; Met Y à 0
.c148	b1 fd		               lda  (zpage2),y     ; Charge le caractere
.c14a	20 19 c1	               jsr  putch          ; Appel pour affichage
.c14d	20 11 c3	               jsr  pop            ; Replace tous les registres
.c150	60		               rts
.c151			z2puts
.c151	20 d6 c2	               jsr  push           ; On sauvegarde les registres
.c154	a0 00		               ldy  #$0            ; Met Y à 0
.c156	b1 fd		nextcar        lda  (zpage2),y     ; Charge le caractere
.c158	f0 09		               beq  endstr         ; Est-ce le 0 de fin de chaine ?
.c15a	20 43 c1	               jsr  z2putch        ; Appel pour affichage
.c15d	20 49 c4	               jsr  inczp2         ; On pointe zp2 sur le prochain caractere.
.c160	4c 56 c1	               jmp  nextcar        ; On passe au prochain
.c163	20 11 c3	endstr         jsr  pop            ; Replace tous les registres
.c166	60		               rts
.c167			puts
.c167	20 d6 c2	               jsr  push           ; On sauvegarde les registres
.c16a	86 fd		               stx  zpage2         ; On positionne xp2 en fonction de
.c16c	84 fe		               sty  zpage2+1       ; l'adresse reçcu dans X et Y
.c16e	20 51 c1	               jsr  z2puts         ; Appel pour affichage
.c171	20 11 c3	               jsr  pop            ; Replace tous les registres
.c174	60		               rts
.c175			gotoxy
.c175	20 d6 c2	               jsr  push           ; On sauvegarde les registres
.c178	20 54 c0	               jsr  curshome       ;  retourne le curseur virtuel a 0,0.
.c17b	c0 00		yagain         cpy  #0             ; Devons nous changer de ligne ?
.c17d	f0 09		               beq  setx           ; Si non, on verifi les colonnes.
.c17f	a9 28		               lda  #40            ; Si oui on ajoute 40
.c181	20 06 c2	               jsr  saddscrptr     ;  à l'adresse du pointeur virtuel autant
.c184	88		               dey                 ;  de fois qu'il est spécifié dans y.
.c185	4c 7b c1	               jmp  yagain         ; On passe au prochain y.
.c188	8a		setx           txa                 ; On ajoute la valeur de X
.c189	20 06 c2	               jsr  saddscrptr     ;  à l'adresse di pointeur virtuel.
.c18c	20 93 c0	               jsr  synccolptr     ; Synchro du pointeur des couleurs
.c18f	20 11 c3	               jsr  pop            ; Replace tous les registres
.c192	60		               rts
.c193			putsxy
.c193	20 d6 c2	               jsr  push           ; On sauvegarde les registres et le zp2
.c196	86 fd		               stx  zpage2         ; Place l'adr de chaine dans zp2
.c198	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.c19a	a0 00		               ldy  #0             ; On place le compteur
.c19c	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.c19e	aa		               tax                 ; de A à X
.c19f	20 49 c4	               jsr  inczp2         ; On deplace le pointeur
.c1a2	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.c1a4	a8		               tay                 ; de A à Y
.c1a5	20 75 c1	               jsr  gotoxy         ; gotoxy : X=col, Y=ligne
.c1a8	20 49 c4	               jsr  inczp2         ; On deplace le pointeur
.c1ab	20 51 c1	               jsr  z2puts         ; On imprime la chaine
.c1ae	20 11 c3	               jsr  pop            ; Replace tous les registres
.c1b1	60		               rts
.c1b2			putscxy
.c1b2	20 d6 c2	               jsr  push           ; On Sauvegarde registres et zp2
.c1b5	86 fd		               stx  zpage2         ; On place l'adresse de chaine dans zp2
.c1b7	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.c1b9	a0 00		               ldy  #0             ; Place le compteur
.c1bb	b1 fd		               lda  (zpage2),y     ; Charge la couleur
.c1bd	8d 04 c0	               sta  curcol         ; ... et on la definie
.c1c0	20 49 c4	               jsr  inczp2         ; Pointe le prochain byte
.c1c3	b1 fd		               lda  (zpage2),y     ; Récupere et sauvegarde ...
.c1c5	8d 15 c0	               sta  bkcol          ; ... l'index de couleur de fond
.c1c8	20 49 c4	               jsr  inczp2         ; Deplace le pointeur
.c1cb	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.c1cd	aa		               tax                 ; ... de A à X
.c1ce	20 49 c4	               jsr  inczp2         ; Deplace le pointeur
.c1d1	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.c1d3	a8		               tay                 ; de A à Y
.c1d4	20 75 c1	               jsr  gotoxy         ; gotoxy : X=col, y=ligne
.c1d7	20 49 c4	               jsr  inczp2         ; Place le ptr en début de chaine
.c1da	20 51 c1	               jsr  z2puts         ; On imprime la chaine
.c1dd	20 11 c3	               jsr  pop
.c1e0	60		               rts
.c1e1			setcurcol
.c1e1	08		               php
.c1e2	8d 04 c0	               sta  curcol
.c1e5	28		               plp
.c1e6	60		               rts
.c1e7			setvicbkcol
.c1e7	08		               php
.c1e8	48		               pha
.c1e9	8a		               txa
.c1ea	29 03		               and  #$03
.c1ec	aa		               tax
.c1ed	68		               pla
.c1ee	9d 06 c0	               sta  vicbkcol0,x
.c1f1	9d 21 d0	               sta  $d021,x
.c1f4	28		               plp
.c1f5	60		               rts
.c1f6			setbkcol
.c1f6	08		               php
.c1f7	48		               pha
.c1f8	0a		               asl
.c1f9	0a		               asl
.c1fa	0a		               asl
.c1fb	0a		               asl
.c1fc	0a		               asl
.c1fd	0a		               asl
.c1fe	29 c0		               and  #$c0
.c200	8d 15 c0	               sta  bkcol
.c203	68		               pla
.c204	28		               plp
.c205	60		               rts
.c206			saddscrptr
.c206	08		               php
.c207	48		               pha
.c208	18		               clc
.c209	6d 00 c0	               adc  scrptr
.c20c	8d 00 c0	               sta  scrptr
.c20f	90 03		               bcc  norep
.c211	ee 01 c0	               inc  scrptr+1
.c214	68		norep          pla
.c215	28		               plp
.c216	60		               rts
.c217			scrptr2str
.c217	20 d6 c2	               jsr  push
.c21a	ad 01 c0	               lda  scrptr+1
.c21d	48		               pha
.c21e	20 5b c5	               jsr  lsra4bits
.c221	20 4f c5	               jsr  nibtohex
.c224	8d 0b c0	               sta  scraddr
.c227	68		               pla
.c228	20 5b c5	               jsr  lsra4bits
.c22b	20 4f c5	               jsr  nibtohex
.c22e	8d 0c c0	               sta  scraddr+1
.c231	ad 01 c0	               lda  scrptr+1
.c234	48		               pha
.c235	20 5b c5	               jsr  lsra4bits
.c238	20 4f c5	               jsr  nibtohex
.c23b	8d 0b c0	               sta  scraddr
.c23e	68		               pla
.c23f	20 5b c5	               jsr  lsra4bits
.c242	20 4f c5	               jsr  nibtohex
.c245	8d 0c c0	               sta  scraddr+1
.c248	ad 00 c0	               lda  scrptr
.c24b	48		               pha
.c24c	20 5b c5	               jsr  lsra4bits
.c24f	20 4f c5	               jsr  nibtohex
.c252	8d 0d c0	               sta  scraddr+2
.c255	8d 12 c0	               sta  coladdr+2
.c258	68		               pla
.c259	20 5b c5	               jsr  lsra4bits
.c25c	20 4f c5	               jsr  nibtohex
.c25f	8d 0e c0	               sta  scraddr+3
.c262	8d 13 c0	               sta  coladdr+3
.c265	20 11 c3	               jsr  pop
.c268	60		               rts
.c269			scrptr2zp1
.c269	08		               php
.c26a	48		               pha
.c26b	ad 00 c0	               lda  scrptr
.c26e	85 fb		               sta  zpage1
.c270	ad 01 c0	               lda  scrptr+1
.c273	85 fc		               sta  zpage1+1
.c275	68		               pla
.c276	28		               plp
.c277	60		               rts
.c278			colptr2zp1
.c278	08		               php
.c279	48		               pha
.c27a	ad 02 c0	               lda  colptr
.c27d	85 fb		               sta  zpage1
.c27f	ad 03 c0	               lda  colptr+1
.c282	85 fc		               sta  zpage1+1
.c284	68		               pla
.c285	28		               plp
.c286	60		               rts
.c287			scrptr2zp2
.c287	08		               php
.c288	48		               pha
.c289	ad 00 c0	               lda  scrptr
.c28c	85 fd		               sta  zpage2
.c28e	ad 01 c0	               lda  scrptr+1
.c291	85 fe		               sta  zpage2+1
.c293	68		               pla
.c294	28		               plp
.c295	60		               rts
.c296			colptr2zp2
.c296	08		               php
.c297	48		               pha
.c298	ad 02 c0	               lda  colptr
.c29b	85 fd		               sta  zpage2
.c29d	ad 03 c0	               lda  colptr+1
.c2a0	85 fe		               sta  zpage2+1
.c2a2	68		               pla
.c2a3	28		               plp
.c2a4	60		               rts
.c2a5			putrahex
.c2a5	08		               php
.c2a6	48		               pha
.c2a7	20 62 c5	               jsr     atohex
.c2aa	a2 fc		               ldx     #<a2hexcol
.c2ac	a0 c4		               ldy     #>a2hexcol
.c2ae	20 67 c1	               jsr     puts
.c2b1	68		               pla
.c2b2	28		               plp
.c2b3	60		               rts
.c2b4			putrahexxy
.c2b4	08		               php
.c2b5	48		               pha
.c2b6	20 62 c5	               jsr  atohex
.c2b9	a9 fe		               lda  #<a2hexpos
.c2bb	a0 c4		               ldy  #>a2hexpos
.c2bd	20 93 c1	               jsr  putsxy
.c2c0	68		               pla
.c2c1	28		               plp
.c2c2	60		               rts
.c2c3			putrahexcxy
.c2c3	08		               php
.c2c4	68		               pla
.c2c5	20 62 c5	               jsr  atohex
.c2c8	a9 fe		               lda  #<a2hexpos
.c2ca	a0 c4		               ldy  #>a2hexpos
.c2cc	20 b2 c1	               jsr  putscxy
.c2cf	68		               pla
.c2d0	28		               plp
.c2d1	60		               rts

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>c2d2	00		rp        .byte     0
>c2d3	00		ra        .byte     0
>c2d4	00 00		pc        .word     0
.c2d6			pushall
.c2d6			push
.c2d6	08		          php            ; stack : flg, pcl, pch
.c2d7	78		          sei
.c2d8	8d d3 c2	          sta  ra        ; save a
.c2db	68		          pla            ; stack : pcl, pch
.c2dc	8d d2 c2	          sta  rp        ; save rp
.c2df	68		          pla            ; stack : pch
.c2e0	8d d4 c2	          sta  pc        ; save pcl
.c2e3	68		          pla            ; stack : -
.c2e4	8d d5 c2	          sta  pc+1      ; save pch
.c2e7	a5 fb		          lda  zpage1    ; get zpage1 low byte
.c2e9	48		          pha            ; stack : zp1l
.c2ea	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.c2ec	48		          pha            ; stack : zp1h, zp1l
.c2ed	a5 fd		          lda  zpage2    ; get zpage2 low byte
.c2ef	48		          pha            ; stack : zp2l, zp1h, zp1l
.c2f0	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.c2f2	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.c2f3	ad d2 c2	          lda  rp        ; get rp
.c2f6	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c2f7	ad d3 c2	          lda  ra        ; get a
.c2fa	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c2fb	8a		          txa            ; get x
.c2fc	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2fd	98		          tya            ; get y
.c2fe	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2ff	ad d5 c2	          lda  pc+1      ; get pch
.c302	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c303	ad d4 c2	          lda  pc        ; get pcl
.c306	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c307	ad d2 c2	          lda  rp        ; get rp
.c30a	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c30b	ad d3 c2	          lda  ra        ; get a
.c30e	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c30f	58		          cli
.c310	60		          rts
.c311			pullall
.c311			pull
.c311			popall
.c311			pop
.c311	78		          sei
.c312	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c313	8d d4 c2	          sta  pc        ; save pcl
.c316	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c317	8d d5 c2	          sta  pc+1      ; save pch
.c31a	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c31b	a8		          tay            ; set y
.c31c	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c31d	aa		          tax            ; set x
.c31e	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c31f	8d d3 c2	          sta  ra        ; save a
.c322	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c323	8d d2 c2	          sta  rp        ; save rp
.c326	68		          pla            ; stack : zp2l, zp1h, zp1l
.c327	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.c329	68		          pla            ; stack : zp1h, zp1l
.c32a	85 fd		          sta  zpage2    ; get zpage2 High byte
.c32c	68		          pla            ; stack : zp1l
.c32d	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.c32f	68		          pla            ; stack :
.c330	85 fb		          sta  zpage1    ; get zpage1 High byte
.c332	ad d5 c2	          lda  pc+1      ; get pch
.c335	48		          pha            ; stack : pch
.c336	ad d4 c2	          lda  pc
.c339	48		          pha            ; stack : pcl, pch
.c33a	ad d2 c2	          lda  rp        ; get rp
.c33d	48		          pha            ; stack : rp, pcl, pch
.c33e	ad d3 c2	          lda  ra        ; set ra
.c341	58		          cli
.c342	28		          plp            ; stack : pcl, pch
.c343	60		          rts
.c344			pushreg
.c344	08		          php            ; stack : flg, pcl, pch
.c345	78		          sei
.c346	8d d3 c2	          sta  ra        ; save a
.c349	68		          pla            ; stack : pcl, pch
.c34a	8d d2 c2	          sta  rp        ; save rp
.c34d	68		          pla            ; stack : pch
.c34e	8d d4 c2	          sta  pc        ; save pcl
.c351	68		          pla            ; stack : -
.c352	8d d5 c2	          sta  pc+1      ; save pch
.c355	ad d2 c2	          lda  rp        ; get rp
.c358	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c359	ad d3 c2	          lda  ra        ; get a
.c35c	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c35d	8a		          txa            ; get x
.c35e	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c35f	98		          tya            ; get y
.c360	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c361	ad d5 c2	          lda  pc+1      ; get pch
.c364	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c365	ad d4 c2	          lda  pc        ; get pcl
.c368	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c369	ad d2 c2	          lda  rp        ; get rp
.c36c	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c36d	ad d3 c2	          lda  ra        ; get a
.c370	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c371	58		          cli
.c372	60		          rts
.c373			pullreg
.c373			popreg
.c373	78		          sei
.c374	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c375	8d d4 c2	          sta  pc        ; save pcl
.c378	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c379	8d d5 c2	          sta  pc+1      ; save pch
.c37c	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c37d	a8		          tay            ; set y
.c37e	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c37f	aa		          tax            ; set x
.c380	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c381	8d d3 c2	          sta  ra        ; save a
.c384	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c385	8d d2 c2	          sta  rp        ; save rp
.c388	ad d5 c2	          lda  pc+1      ; get pch
.c38b	48		          pha            ; stack : pch
.c38c	ad d4 c2	          lda  pc
.c38f	48		          pha            ; stack : pcl, pch
.c390	ad d2 c2	          lda  rp        ; get rp
.c393	48		          pha            ; stack : rp, pcl, pch
.c394	ad d3 c2	          lda  ra        ; set ra
.c397	58		          cli
.c398	28		          plp            ; stack : pcl, pch
.c399	60		          rts

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.c39a			blkfill
.c39a	20 d6 c2	bf0            jsr  push
.c39d	20 65 c4	               jsr  savezp1
.c3a0	84 fc		               sty  zpage1+1
.c3a2	a0 00		               ldy  #$00
.c3a4	84 fb		               sty  zpage1
.c3a6	91 fb		bf1            sta  (zpage1),y
.c3a8	c8		               iny
.c3a9	d0 fb		               bne  bf1
.c3ab	20 74 c4	               jsr  restzp1
.c3ae	20 11 c3	               jsr  pop
.c3b1	60		               rts
.c3b2			memfill
.c3b2	20 d6 c2	               jsr  push
.c3b5	20 9a c3	mf1            jsr  blkfill
.c3b8	c8		               iny
.c3b9	ca		               dex
.c3ba	d0 f9		               bne  mf1
.c3bc	20 11 c3	               jsr  pop
.c3bf	60		               rts
.c3c0			memmove
.c3c0	20 d6 c2	               jsr  push
.c3c3	ba		               tsx            ; On se crée un pointeur ...
.c3c4	8a		               txa
.c3c5	18		               clc
.c3c6	69 0b		               adc  #11
.c3c8	a8		               tay
.c3c9	a2 06		               ldx  #$06
.c3cb	b9 00 01	nextbyte       lda  $0100,y
.c3ce	99 1a c4	               sta  words,y
.c3d1	c8		               iny
.c3d2	ca		               dex
.c3d3	d0 f6		               bne  nextbyte
.c3d5	ad 1a c4	               lda  s
.c3d8	8d f1 c3	               sta  source+1
.c3db	ad 1b c4	               lda  s+1
.c3de	8d f2 c3	               sta  source+2
.c3e1	ad 1c c4	               lda  d
.c3e4	8d ee c3	               sta  destin+1
.c3e7	ad 1d c4	               lda  d+1
.c3ea	8d ef c3	               sta  destin+2
.c3ed	ad ff ff	destin         lda  $ffff
.c3f0	8d ff ff	source         sta  $ffff
.c3f3	ee ee c3	               inc  destin+1
.c3f6	d0 03		               bne  src
.c3f8	ee ef c3	               inc  destin+2
.c3fb	ee f1 c3	src            inc  source+1
.c3fe	d0 03		               bne  cnt
.c400	ee f2 c3	               inc  source+2
.c403	ad 1e c4	cnt            lda  compte
.c406	d0 08		               bne  decit
.c408	ad 1f c4	               lda  compte+1
.c40b	f0 09		               beq  fini
.c40d	ce 1f c4	               dec  compte+1
.c410	ce 1e c4	decit          dec  compte
.c413	4c ed c3	               jmp  destin
.c416	20 11 c3	fini           jsr  pop
.c419	60		               rts
.c41a			words
>c41a	00 00		s         .word     $0000
>c41c	00 00		d         .word     $0000
>c41e	00 00		compte    .word     $0000
.c420			decword
.c420	20 d6 c2	               jsr  push
.c423	86 fd		               stx  zpage2
.c425	84 fe		               sty  zpage2+1
.c427	20 11 c3	               jsr  pop
.c42a	60		               rts
.c42b			inczpage1
.c42b			inczp1
.c42b	08		               php
.c42c	48		               pha
.c42d	e6 fb		               inc  zpage1
.c42f	a5 fb		               lda  zpage1
.c431	d0 02		               bne  nopage
.c433	e6 fc		               inc  zpage1+1
.c435	68		nopage         pla
.c436	28		               plp
.c437	60		               rts
.c438			deczpage1
.c438			deczp1
.c438	08		               php
.c439	48		               pha
.c43a	c6 fb		               dec  zpage1
.c43c	a5 fb		               lda  zpage1
.c43e	c9 ff		               cmp  #$ff
.c440	f0 02		               beq  report
.c442	d0 02		               bne  nopage
.c444	c6 fc		report         dec  zpage1+1
.c446	68		nopage         pla
.c447	28		               plp
.c448	60		               rts
.c449			inczpage2
.c449			inczp2
.c449	08		               php
.c44a	48		               pha
.c44b	e6 fd		               inc  zpage2
.c44d	a5 fd		               lda  zpage2
.c44f	d0 02		               bne  nopage
.c451	e6 fe		               inc  zpage2+1
.c453	68		nopage         pla
.c454	28		               plp
.c455	60		               rts
.c456			deczpage2
.c456			deczp2
.c456	08		               php
.c457	c6 fd		               dec  zpage2
.c459	a5 fd		               lda  zpage2
.c45b	c9 ff		               cmp  #$ff
.c45d	f0 02		               beq  report
.c45f	d0 02		               bne  nopage
.c461	c6 fe		report         dec  zpage2+1
.c463	28		nopage         plp
.c464	60		               rts
.c465			savezp1
.c465	08		               php
.c466	48		               pha
.c467	a5 fb		               lda  zpage1
.c469	8d f6 c4	               sta  zp1
.c46c	a5 fc		               lda  zpage1+1
.c46e	8d f7 c4	               sta  zp1+1
.c471	68		               pla
.c472	28		               plp
.c473	60		               rts
.c474			restzp1
.c474	08		               php
.c475	48		               pha
.c476	ad f6 c4	               lda  zp1
.c479	85 fb		               sta  zpage1
.c47b	ad f7 c4	               lda  zp1+1
.c47e	85 fc		               sta  zpage1+1
.c480	68		               pla
.c481	28		               plp
.c482	60		               rts
.c483			savezp2
.c483	08		               php
.c484	48		               pha
.c485	a5 fd		               lda  zpage2
.c487	8d f8 c4	               sta  zp2
.c48a	a5 fe		               lda  zpage2+1
.c48c	8d f9 c4	               sta  zp2+1
.c48f	68		               pla
.c490	28		               plp
.c491	60		               rts
.c492			restzp2
.c492	08		               php
.c493	48		               pha
.c494	ad f8 c4	               lda  zp2
.c497	85 fd		               sta  zpage2
.c499	ad f9 c4	               lda  zp2+1
.c49c	85 fe		               sta  zpage2+1
.c49e	68		               pla
.c49f	28		               plp
.c4a0	60		               rts
.c4a1			xy2addr
.c4a1	08		               php
.c4a2	48		               pha
.c4a3	8a		               txa
.c4a4	48		               pha
.c4a5	98		               tya
.c4a6	48		               pha
.c4a7	ad f1 c4	               lda  addr1+1
.c4aa	8d f3 c4	               sta  addr2+1
.c4ad	ad f0 c4	               lda  addr1
.c4b0	8d f2 c4	               sta  addr2
.c4b3	c0 00		               cpy  #$00
.c4b5	f0 0f		               beq  addx
.c4b7	18		moreline       clc
.c4b8	6d ef c4	               adc  ymult
.c4bb	90 03		               bcc  norepy
.c4bd	ee f3 c4	               inc  addr2+1
.c4c0	8d f2 c4	norepy         sta  addr2
.c4c3	88		               dey
.c4c4	d0 f1		               bne  moreline
.c4c6	8a		addx           txa
.c4c7	18		               clc
.c4c8	6d f2 c4	               adc  addr2
.c4cb	90 03		               bcc  thatsit
.c4cd	ee f3 c4	               inc  addr2+1
.c4d0	8d f2 c4	thatsit        sta  addr2
.c4d3	68		               pla
.c4d4	a8		               tay
.c4d5	68		               pla
.c4d6	aa		               tax
.c4d7	68		               pla
.c4d8	28		               plp
.c4d9	60		               rts
.c4da			loop
.c4da	ce fa c4	               dec  loopcount
.c4dd	d0 03		               bne  norep
.c4df	ce fb c4	               dec  loopcount+1
.c4e2	ad fa c4	norep          lda  loopcount
.c4e5	c9 00		               cmp  #$00
.c4e7	d0 05		               bne  out
.c4e9	4d fb c4	               eor  loopcount+1
.c4ec	c9 ff		               cmp  #$ff
.c4ee	60		out            rts
>c4ef	28		ymult          .byte     40
>c4f0	00 00		addr1          .word     $0000
>c4f2	00 00		addr2          .word     $0000
>c4f4	00 00		bytecnt        .word     $0000
>c4f6	00 00		zp1            .word     $0000
>c4f8	00 00		zp2            .word     $0000
>c4fa	00 00		loopcount      .word     $0000

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>c4fc	01		a2hexcol       .byte     1              ; pour aputscxy
>c4fd	00		a2hexbkcol     .byte     %00000000
.c4fe			a2hexpos
>c4fe	00		a2hexpx        .byte     0              ; pour aputsxy
>c4ff	00		a2hexpy        .byte     0
>c500	24		a2hexprefix    .byte     "$"            ; pour aputs
>c501	00 00		a2hexstr       .word     $00
>c503	00 00		               .word     $00
>c505	00		               .byte     0              ; 0 end string
>c506	30 30 30 30	abin           .null     "00000000"
>c50a	30 30 30 30 00
>c50f	20 20 20 00	adec           .null     "   "
.c513			putahexfmtxy
.c513	20 d6 c2	               jsr  push
.c516	20 62 c5	               jsr  atohex
.c519	ae fe c4	               ldx  a2hexpx
.c51c	ac ff c4	               ldy  a2hexpy
.c51f	20 75 c1	               jsr  gotoxy
.c522	a2 00		               ldx  #<a2hexprefix
.c524	a0 c5		               ldy  #>a2hexprefix
.c526	20 67 c1	               jsr  puts
.c529	20 11 c3	               jsr  pop
.c52c	60		               rts
.c52d			putahexfmt
.c52d	20 d6 c2	               jsr  push
.c530	20 62 c5	               jsr  atohex
.c533	a2 00		               ldx  #<a2hexprefix
.c535	a0 c5		               ldy  #>a2hexprefix
.c537	20 67 c1	               jsr  puts
.c53a	20 11 c3	               jsr  pop
.c53d	60		               rts
.c53e			putahex
.c53e	20 d6 c2	               jsr  push
.c541	20 62 c5	               jsr  atohex
.c544	a2 01		               ldx  #<a2hexstr
.c546	a0 c5		               ldy  #>a2hexstr
.c548	20 67 c1	               jsr  puts
.c54b	20 11 c3	               jsr  pop
.c54e	60		               rts
.c54f			nibtohex
.c54f	08		               php
.c550	29 0f		               and  #$0f
.c552	f8		               sed
.c553	18		               clc
.c554	69 90		               adc  #$90
.c556	69 40		               adc  #$40
.c558	d8		               cld
.c559	28		               plp
.c55a	60		               rts
.c55b			lsra4bits
.c55b	08		               php
.c55c	4a		               lsr
.c55d	4a		               lsr
.c55e	4a		               lsr
.c55f	4a		               lsr
.c560	28		               plp
.c561	60		               rts
.c562			atohex
.c562	08		               php
.c563	48		               pha
.c564	48		               pha
.c565	20 5b c5	               jsr  lsra4bits
.c568	20 4f c5	               jsr  nibtohex
.c56b	8d 01 c5	               sta  a2hexstr
.c56e	68		               pla
.c56f	20 4f c5	               jsr  nibtohex
.c572	8d 02 c5	               sta  a2hexstr+1
.c575	a9 00		               lda  #$00                ; set end of string
.c577	8d 03 c5	               sta  a2hexstr+2
.c57a	68		               pla
.c57b	28		               plp
.c57c	60		               rts
.c57d			xy2hex
.c57d	20 d6 c2	               jsr  push
.c580	20 62 c5	               jsr  atohex
.c583	8a		               txa
.c584	48		               pha
.c585	20 5b c5	               jsr  lsra4bits
.c588	20 4f c5	               jsr  nibtohex
.c58b	8d 01 c5	               sta  a2hexstr
.c58e	68		               pla
.c58f	20 4f c5	               jsr  nibtohex
.c592	8d 02 c5	               sta  a2hexstr+1
.c595	98		               tya
.c596	48		               pha
.c597	20 5b c5	               jsr  lsra4bits
.c59a	20 4f c5	               jsr  nibtohex
.c59d	8d 03 c5	               sta  a2hexstr+2
.c5a0	68		               pla
.c5a1	20 4f c5	               jsr  nibtohex
.c5a4	8d 04 c5	               sta  a2hexstr+3
.c5a7	a9 00		               lda  #$00                ; 0 ended string
.c5a9	8d 05 c5	               sta  a2hexstr+4
.c5ac	20 11 c3	               jsr  pop
.c5af			atobin
.c5af	20 d6 c2	               jsr  push
.c5b2	a2 08		               ldx  #8
.c5b4	a0 00		               ldy  #0
.c5b6	18		               clc
.c5b7	2a		nextbit        rol
.c5b8	48		               pha
.c5b9	69 00		               adc  #$00
.c5bb	29 01		               and  #$01
.c5bd	20 4f c5	               jsr  nibtohex
.c5c0	99 06 c5	               sta  abin,y
.c5c3	68		               pla
.c5c4	c8		               iny
.c5c5	ca		               dex
.c5c6	d0 ef		               bne  nextbit
.c5c8	a9 00		               lda  #0
.c5ca	99 06 c5	               sta  abin,y
.c5cd	20 11 c3	               jsr  pull
.c5d0	60		               rts
.c5d1			putabin
.c5d1	20 af c5	               jsr     atobin
.c5d4	20 d6 c2	               jsr     push
.c5d7	a2 06		               ldx     #<abin
.c5d9	a0 c5		               ldy     #>abin
.c5db	20 67 c1	               jsr     puts
.c5de	20 11 c3	               jsr     pop
.c5e1	60		               rts
.c5e2			printabin
.c5e2	20 d6 c2	               jsr     push
.c5e5	a2 06		               ldx     #<abin
.c5e7	a0 c5		               ldy     #>abin
.c5e9	20 67 c1	               jsr     puts
.c5ec	20 11 c3	               jsr     pop
.c5ef	60		               rts
.c5f0			putabinfmt
.c5f0	08		               php
.c5f1	48		               pha
.c5f2	a9 25		               lda     #"%"
.c5f4	20 19 c1	               jsr     putch
.c5f7	68		               pla
.c5f8	20 d1 c5	               jsr     putabin
.c5fb	28		               plp
.c5fc	60		               rts
.c5fd			putabinxy
.c5fd	20 75 c1	               jsr     gotoxy
.c600	20 d1 c5	               jsr     putabin
.c603	60		               rts
.c604			putabinfmtxy
.c604	20 75 c1	               jsr     gotoxy
.c607	20 f0 c5	               jsr     putabinfmt
.c60a	60		               rts
.c60b			atodec
.c60b	20 d6 c2	               jsr  push
.c60e	f8		               sed            ; On se place en mode décimal.
.c60f	aa		               tax            ; On déplace a dans x.
.c610	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.c612	a9 00		               lda  #$00      ; 0 dans A.
.c614	18		nextbit        clc            ; Bit carry a 0.
.c615	69 01		               adc  #$01      ; Ajoute 1 a A.
.c617	90 01		               bcc  decx      ; Pas de carry, pas de report.
.c619	c8		               iny            ; On incrémente Y
.c61a	ca		decx           dex            ; X=X-1
.c61b	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.c61d	48		               pha            ; A sur le stack.
.c61e	98		               tya            ; Y dans A (MSB)
.c61f	20 4f c5	               jsr  nibtohex  ; a hex petsci ...
.c622	8d 0f c5	               sta  adec      ; ... dans tampon.
.c625	68		               pla            ; Récupere A
.c626	48		               pha            ;
.c627	20 4f c5	               jsr  nibtohex
.c62a	8d 11 c5	               sta  adec+2
.c62d	68		               pla
.c62e	6a		               ror
.c62f	6a		               ror
.c630	6a		               ror
.c631	6a		               ror
.c632	20 4f c5	               jsr  nibtohex
.c635	8d 10 c5	               sta  adec+1
.c638	d8		               cld            ; On revient en mode binaire.
.c639	20 11 c3	               jsr  pull
.c63c	60		               rts
.c63d			putadec
.c63d	20 d6 c2	               jsr  push
.c640	20 0b c6	               jsr  atodec
.c643	a2 0f		               ldx  #<adec
.c645	a0 c5		               ldy  #>adec+1
.c647	20 67 c1	               jsr  puts
.c64a	20 11 c3	               jsr  pop
.c64d	60		               rts

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.c64e			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
.c64e	08		               php                 ; Sauvegarde le registre de status sur stack.
.c64f	8d 49 c8	               sta  rega           ; Sauvegarde Acc en mémoire.
.c652	68		               pla                 ; Récupère le registre de status du stack.
.c653	8d 4c c8	               sta  regp           ; Sauvegarde le registre de status en mémoire.
.c656	8e 4a c8	               stx  regx           ; Sauvegarde le registre X en mémoire.
.c659	8c 4b c8	               sty  regy           ; Sauvegarde le registre Y en mémoire.
.c65c	ba		               tsx                 ; Copie le registre S dans X.
.c65d	8e 4d c8	               stx  regs           ; Sauvegarde le registre S en mémoire.
.c660	68		               pla                 ; Récupère le MSB de l'adresse de retour ...
.c661	8d 4f c8	               sta  regpcl         ; ... et le sauvegarde en mémoire ...
.c664	8d 51 c8	               sta  regpcl2        ; ... une seconde fois.
.c667	68		               pla                 ; Récupère le LSB de l'adresse de retour ...
.c668	8d 4e c8	               sta  regpch         ; ... et le sauvegarde en mémoire ...
.c66b	8d 50 c8	               sta  regpch2        ; ... une seconde fois.
.c66e	ad 49 c8	               lda  rega           ; On commence par le registre Acc.
.c671	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c672	20 4f c5	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c675	8d e6 c7	               sta  vala+1         ; ... et le place dans la chaine.
.c678	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c679	20 5b c5	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c67c	20 4f c5	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c67f	8d e5 c7	               sta  vala           ; ... et le place dans la chaine.
.c682	ad 4b c8	               lda  regy           ; Ensuite, le registre Y.
.c685	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c686	20 4f c5	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c689	8d fd c7	               sta  valy+1         ; ... et le place dans la chaine.
.c68c	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c68d	20 5b c5	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c690	20 4f c5	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c693	8d fc c7	               sta  valy           ; ... et le place dans la chaine.
.c696	ad 4a c8	               lda  regx           ; Ensuite, le registre X.
.c699	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c69a	20 4f c5	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c69d	8d f1 c7	               sta  valx+1         ; ... et le place dans la chaine.
.c6a0	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c6a1	20 5b c5	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c6a4	20 4f c5	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c6a7	8d f0 c7	               sta  valx           ; ... et le place dans la chaine.
.c6aa	ad 4c c8	               lda  regp           ; Ensuite, le registre de status.
.c6ad	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c6ae	20 4f c5	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c6b1	8d 08 c8	               sta  valp+1         ; ... et le place dans la chaine.
.c6b4	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c6b5	20 5b c5	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c6b8	20 4f c5	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c6bb	8d 07 c8	               sta  valp           ; ... et le place dans la chaine.
.c6be	ad 4d c8	               lda  regs           ; Ensuite, le pointeur de stack.
.c6c1	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c6c2	20 4f c5	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c6c5	8d 13 c8	               sta  vals+1         ; ... et le place dans la chaine.
.c6c8	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c6c9	20 5b c5	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c6cc	20 4f c5	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c6cf	8d 12 c8	               sta  vals           ; ... et le place dans la chaine.
.c6d2	38		               sec                 ; Prépade le ADC en plaçant 0 dans Carry.
.c6d3	ad 51 c8	               lda  regpcl2        ; On charge la LSB de l'adresse de retour.
.c6d6	69 00		               adc  #$00           ; On y ajoute 1.
.c6d8	90 03		               bcc  noreport       ; Si pas de Carry on ne fait pas de report.
.c6da	ee 50 c8	               inc  regpch2        ; ... en incrémentant le MSB.
.c6dd	8d 51 c8	noreport       sta  regpcl2        ; On le sauvegarde.
.c6e0	ad 51 c8	               lda  regpcl2        ; On récupère la partie basse du compteur.
.c6e3	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c6e4	20 4f c5	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c6e7	8d 23 c8	               sta  valpcl+1       ; ... et lace le code à la position "---X".
.c6ea	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c6eb	20 5b c5	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c6ee	20 4f c5	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c6f1	8d 22 c8	               sta  valpcl         ; ... et lace le code à la position "--X-".
.c6f4	ad 50 c8	               lda regpch2         ; On récupère la partie haute du compteur.
.c6f7	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c6f8	20 4f c5	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c6fb	8d 21 c8	               sta  valpch+1       ; ... et lace le code à la position "-X--".
.c6fe	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c6ff	20 5b c5	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c702	20 4f c5	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c705	8d 20 c8	               sta  valpch         ; ... et lace le code à la position "X---".
.c708	a5 fb		               lda  zpage1         ; On charge le LSB de ZP1 ($fb).
.c70a	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c70b	20 4f c5	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c70e	8d 34 c8	               sta  valz1l+1       ; ... et lace le code à la position "---X".
.c711	68		               pla
.c712	20 5b c5	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c715	20 4f c5	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c718	8d 33 c8	               sta  valz1l         ; ... et lace le code à la position "--X-".
.c71b	a5 fc		               lda  zpage1+1         ; On charge le MSB de ZP1 ($fc).
.c71d	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c71e	20 4f c5	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c721	8d 32 c8	               sta  valz1h+1       ; ... et lace le code à la position "-X--".
.c724	68		               pla
.c725	20 5b c5	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c728	20 4f c5	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c72b	8d 31 c8	               sta  valz1h         ; ... et lace le code à la position "X---".
.c72e	a5 fd		               lda  zpage2         ; On charge le LSB de ZP2 ($fd).
.c730	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c731	20 4f c5	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c734	8d 45 c8	               sta  valz2l+1       ; ... et lace le code à la position "---X".
.c737	68		               pla
.c738	20 5b c5	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c73b	20 4f c5	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c73e	8d 44 c8	               sta  valz2l         ; ... et lace le code à la position "--X-".
.c741	a5 fe		               lda  zpage2+1       ; On charge le MSB de ZP2 ($fc).
.c743	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c744	20 4f c5	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c747	8d 43 c8	               sta  valz2h+1       ; ... et lace le code à la position "-X--".
.c74a	68		               pla
.c74b	20 5b c5	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c74e	20 4f c5	               jsr  nibtohex
.c751	8d 42 c8	               sta  valz2h         ; ... et lace le code à la position "X---".
.c754	20 05 c1	               jsr  setinverse     ; On se place en mode inverse vidéo.
.c757	20 44 c3	               jsr  pushreg
.c75a	a2 dd		               ldx  #<srega
.c75c	a0 c7		               ldy  #>srega
.c75e	20 b2 c1	               jsr  putscxy
.c761	20 73 c3	               jsr  popreg
.c764	20 44 c3	               jsr  pushreg
.c767	a2 e9		               ldx  #<sregx
.c769	a0 c7		               ldy  #>sregx
.c76b	20 b2 c1	               jsr  putscxy
.c76e	20 73 c3	               jsr  popreg
.c771	20 44 c3	               jsr  pushreg
.c774	a2 f4		               ldx  #<sregy
.c776	a0 c7		               ldy  #>sregy
.c778	20 b2 c1	               jsr  putscxy
.c77b	20 73 c3	               jsr  popreg
.c77e	20 44 c3	               jsr  pushreg
.c781	a2 00		               ldx  #<sregp
.c783	a0 c8		               ldy  #>sregp
.c785	20 b2 c1	               jsr  putscxy
.c788	20 73 c3	               jsr  popreg
.c78b	20 44 c3	               jsr  pushreg
.c78e	a2 0b		               ldx  #<sregs
.c790	a0 c8		               ldy  #>sregs
.c792	20 b2 c1	               jsr  putscxy
.c795	20 73 c3	               jsr  popreg
.c798	20 44 c3	               jsr  pushreg
.c79b	a2 17		               ldx  #<sregpc
.c79d	a0 c8		               ldy  #>sregpc
.c79f	20 b2 c1	               jsr  putscxy
.c7a2	20 73 c3	               jsr  popreg
.c7a5	20 44 c3	               jsr  pushreg
.c7a8	a2 27		               ldx  #<sregz1
.c7aa	a0 c8		               ldy  #>sregz1
.c7ac	20 b2 c1	               jsr  putscxy
.c7af	20 73 c3	               jsr  popreg
.c7b2	20 44 c3	               jsr  pushreg
.c7b5	a2 38		               ldx  #<sregz2
.c7b7	a0 c8		               ldy  #>sregz2
.c7b9	20 b2 c1	               jsr  putscxy
.c7bc	20 73 c3	               jsr  popreg
.c7bf	20 0f c1	               jsr  clrinverse     ; On quitte le mode inverse vidéo.
.c7c2	ad 4e c8	               lda  regpch         ; On replace ls MSB l'adresse de retour ...
.c7c5	48		               pha                 ; ... à la bonne position sur la pile.
.c7c6	ad 4f c8	               lda  regpcl         ; On replace ls LSB l'adresse de retour ...
.c7c9	48		               pha                 ; ... à la bonne position sur la pile.
.c7ca	ae 4d c8	               ldx  regs           ; On replace tous les registre à leurs ...
.c7cd	9a		               txs                 ; ...
.c7ce	ac 4b c8	               ldy  regy           ; ...
.c7d1	ae 4a c8	               ldx  regx           ; ...
.c7d4	ad 4c c8	               lda  regp           ; ...
.c7d7	48		               pha                 ; ...
.c7d8	ad 49 c8	               lda  rega           ; ...
.c7db	28		               plp                 ; ... valeurs initiales
.c7dc	60		               rts
>c7dd	07 01 17	srega   .byte   cyellow,coln+1,line
>c7e0	20 20 01 3a	        .text   '  a:$' ;4,24
>c7e4	24
>c7e5	00 00 20 00	vala    .byte   0,0,32,0
>c7e9	03 09 17	sregx   .byte   ccyan,coln+9,line
>c7ec	20 18 3a 24	        .text   ' x:$' ;4,24
>c7f0	00 00 20 00	valx    .byte   0,0,32,0
>c7f4	0d 10 17	sregy   .byte   clightgreen,coln+16,line
>c7f7	20 19 3a 20	        .text   ' y: $' ;4,24
>c7fb	24
>c7fc	00 00 20 00	valy    .byte   0,0,32,0
>c800	08 18 17	sregp   .byte   corange,coln+24,line
>c803	20 10 3a 24	        .text   ' p:$' ;4,24
>c807	00 00 20 00	valp    .byte   0,0,32,0
>c80b	0a 1f 17	sregs   .byte   clightred,coln+31,line
>c80e	20 13 3a 24	        .text   ' s:$' ;4,24
>c812	00 00 20 20	vals    .byte   0,0,32,32,0
>c816	00
>c817	0e 01 18 20	sregpc  .byte   clightblue,coln+1,line+1,32
>c81b	20 10 03 3a	        .text   ' pc:$' ;4,24
>c81f	24
>c820	00 00		valpch  .byte   0,0
>c822	00 00 20 20	valpcl  .byte   0,0,32,32,0
>c826	00
>c827	04 0d 18 20	sregz1  .byte   cpurple,coln+13,line+1,32
>c82b	20 1a 10 31	        .text   ' zp1:$' ;4,24
>c82f	3a 24
>c831	00 00		valz1h  .byte   0,0
>c833	00 00 20 20	valz1l  .byte   0,0,32,32,0
>c837	00
>c838	0f 1a 18 20	sregz2  .byte   clightgray,coln+26,line+1,32
>c83c	20 1a 10 32	        .text   ' zp2:$' ;4,24
>c840	3a 24
>c842	00 00		valz2h  .byte   0,0
>c844	00 00 20 20	valz2l  .byte   0,0,32,32,0
>c848	00
>c849	00		rega    .byte   0
>c84a	00		regx    .byte   0
>c84b	00		regy    .byte   0
>c84c	00		regp    .byte   0
>c84d	00		regs    .byte   0
>c84e	00		regpch  .byte   0
>c84f	00		regpcl  .byte   0
>c850	00		regpch2 .byte   0
>c851	00		regpcl2 .byte   0
>c852	00		vzp1h   .byte   0
>c853	00		vzp1l   .byte   0
>c854	00		vzp2h   .byte   0
>c855	00		vzp2l   .byte   0

;******  Return to file: j2tester.asm


;******  End of listing

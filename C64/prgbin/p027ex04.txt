
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L p027ex04.txt -o p027ex04.prg p027ex04.asm
; Mon Oct 28 22:12:40 2024

;Offset	;Hex		;Source

;******  Processing input file: p027ex04.asm

="20241028-220934"	           Version = "20241028-220934"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	2a 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	20 2a 50 52			.text " *programmation assembleur sue c64*"
>080a	4f 47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45
>081a	4d 42 4c 45 55 52 20 53 55 45 20 43 36 34 2a
>0829	00				.byte $00		;Un zéro pour indiquer la fin de cette
>082a	46 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082c	02 00				.word 2   	;Numero de la ligne Basic.
>082e	8f				.byte $8F		;Le token de la commande REM du Basic
>082f	20 2a 50 41			.text " *par daniel lafrance*"
>0833	52 20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43
>0843	45 2a
>0845	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0846	51 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0848	03 00				.word 3   	;Numero de la ligne Basic.
>084a	9e				.byte $9e		;Le token de la commande PRINT du Basic
>084b	30 32 31 33			.text format("%05d",hpgmstart)
>084f	31
>0850	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0851	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0853	4c 56 08	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: p027ex04.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: p027ex04.asm

.0856			main
.0856	20 9a 0b	          jsr       scrmaninit
.0859	08		               php
.085a	48		               pha
.085b	a9 08		               lda  #$08
.085d	20 d2 ff	               jsr  $ffd2
.0860	68		               pla
.0861	28		               plp
.0862	48		               pha
.0863	a9 03		               lda  #ccyan
.0865	8d 20 d0	               sta  $d020
.0868	68		               pla
.0869	48		               pha
.086a	a9 01		               lda  #cblanc
.086c	8d 21 d0	               sta  $d021
.086f	68		               pla
.0870	48		               pha
.0871	a9 06		               lda  #cbleu
.0873	8d 86 02	               sta  bascol
.0876	68		               pla
.0877	20 e7 08	          jsr       bookinfo
.087a	20 63 0b	          jsr       akey
.087d	20 ba 0b	          jsr       cls
.0880	20 2b 09	          jsr       help
.0883	20 63 0b	          jsr       akey
.0886	a9 0d		          lda       #b_crlf
.0888	20 d2 ff	          jsr       $ffd2
.088b	20 98 08	          jsr       p027ex04
.088e	08		               php
.088f	48		               pha
.0890	a9 09		               lda  #$09
.0892	20 d2 ff	               jsr  $ffd2
.0895	68		               pla
.0896	28		               plp
.0897	60		          rts
.0898			p027ex04
.0898	20 86 0e	          jsr  push
.089b	48		               pha
.089c	a9 03		               lda  #ccyan
.089e	8d 20 d0	               sta  $d020
.08a1	68		               pla
.08a2	48		               pha
.08a3	a9 01		               lda  #cblanc
.08a5	8d 21 d0	               sta  $d021
.08a8	68		               pla
.08a9	48		               pha
.08aa	a9 06		               lda  #cbleu
.08ac	8d 86 02	               sta  bascol
.08af	68		               pla
.08b0	20 bf e3	          jsr  b_intcgt       ; Initialide chrget
.08b3	a2 de		          ldx  #<(floatnum-1)
.08b5	a0 08		          ldy  #>(floatnum-1)
.08b7	86 7a		          stx  $7a
.08b9	84 7b		          sty  $7b
.08bb	20 73 00	          jsr  b_chrget
.08be	20 f3 bc	          jsr  b_ascflt
.08c1	20 dd bd	          jsr  b_facasc
.08c4	a0 ff		          ldy  #$ff
.08c6	c8		sbufx     iny
.08c7	b9 00 01	          lda  $0100,y
.08ca	d0 fa		          bne  sbufx
.08cc	c8		          iny
.08cd	98		          tya
.08ce	48		          pha
.08cf	a9 00		          lda  #$00
.08d1	85 22		          sta  $22
.08d3	a9 01		          lda  #$01
.08d5	85 23		          sta  $23
.08d7	68		          pla
.08d8	20 24 ab	          jsr  b_strout
.08db	20 c5 0e	          jsr  pop
.08de	60		          rts
>08df	32 35 2e 33	floatnum  .null     "25.35e3"
>08e3	35 45 33 00
.08e7			bookinfo
.08e7	08		               php
.08e8	48		               pha
.08e9	a9 0e		               lda  #14
.08eb	8d b9 0b	               sta  characterset
.08ee	20 d2 ff	               jsr  $ffd2
.08f1	68		               pla
.08f2	28		               plp
.08f3	20 ba 0b	          jsr       cls
.08f6	20 86 0e	               jsr  push
.08f9	a2 3a		isx            ldx  #<line
.08fb	a0 0b		isy            ldy  #>line
.08fd	20 d7 0b	               jsr  puts
.0900	20 c5 0e	               jsr  pull
.0903	20 86 0e	               jsr  push
.0906	a2 62		isx            ldx  #<headera
.0908	a0 09		isy            ldy  #>headera
.090a	20 d7 0b	               jsr  puts
.090d	20 c5 0e	               jsr  pull
.0910	20 86 0e	               jsr  push
.0913	a2 02		isx            ldx  #<headerb
.0915	a0 0a		isy            ldy  #>headerb
.0917	20 d7 0b	               jsr  puts
.091a	20 c5 0e	               jsr  pull
.091d	20 86 0e	               jsr  push
.0920	a2 3a		isx            ldx  #<line
.0922	a0 0b		isy            ldy  #>line
.0924	20 d7 0b	               jsr  puts
.0927	20 c5 0e	               jsr  pull
.092a	60		          rts
.092b			help
.092b	08		               php
.092c	48		               pha
.092d	a9 0e		               lda  #14
.092f	8d b9 0b	               sta  characterset
.0932	20 d2 ff	               jsr  $ffd2
.0935	68		               pla
.0936	28		               plp
.0937	20 ba 0b	          jsr       cls
.093a	20 86 0e	               jsr  push
.093d	a2 a5		isx            ldx  #<shortcuts
.093f	a0 0a		isy            ldy  #>shortcuts
.0941	20 d7 0b	               jsr  puts
.0944	20 c5 0e	               jsr  pull
.0947	20 86 0e	               jsr  push
.094a	a2 26		isx            ldx  #<helptext
.094c	a0 0b		isy            ldy  #>helptext
.094e	20 d7 0b	               jsr  puts
.0951	20 c5 0e	               jsr  pull
.0954	20 86 0e	               jsr  push
.0957	a2 3a		isx            ldx  #<line
.0959	a0 0b		isy            ldy  #>line
.095b	20 d7 0b	               jsr  puts
.095e	20 c5 0e	               jsr  pull
.0961	60		          rts
.0962			headera
>0962	20 2a 20 20	          .text               " *       Vic-20 and Commodore 64      *"
>0966	20 20 20 20 20 d6 49 43 2d 32 30 20 41 4e 44 20
>0976	c3 4f 4d 4d 4f 44 4f 52 45 20 36 34 20 20 20 20
>0986	20 20 2a
>0989	0d		          .byte     b_crlf
>098a	20 2a 20 20	          .text               " *           Tool Kit: BASIC          *"
>098e	20 20 20 20 20 20 20 20 20 d4 4f 4f 4c 20 cb 49
>099e	54 3a 20 c2 c1 d3 c9 c3 20 20 20 20 20 20 20 20
>09ae	20 20 2a
>09b1	0d		          .byte     b_crlf
>09b2	20 2a 20 20	          .text               " *          Book by Dan Heeb.         *"
>09b6	20 20 20 20 20 20 20 20 c2 4f 4f 4b 20 42 59 20
>09c6	c4 41 4e 20 c8 45 45 42 2e 20 20 20 20 20 20 20
>09d6	20 20 2a
>09d9	0d		          .byte     b_crlf
>09da	20 2a 20 20	          .null               " *         ISBN: 0-942386-32-9        *"
>09de	20 20 20 20 20 20 20 c9 d3 c2 ce 3a 20 30 2d 39
>09ee	34 32 33 38 36 2d 33 32 2d 39 20 20 20 20 20 20
>09fe	20 20 2a 00
>0a02	0d		headerb   .byte     $0d
>0a03	20 2a 20 20	          .text               " *    Direct Use of Floating Point    *"
>0a07	20 20 c4 49 52 45 43 54 20 d5 53 45 20 4f 46 20
>0a17	c6 4c 4f 41 54 49 4e 47 20 d0 4f 49 4e 54 20 20
>0a27	20 20 2a
>0a2a	0d		          .byte     $0d
>0a2b	20 2a 20 20	          .text               " *         page 27, exemple #4        *"
>0a2f	20 20 20 20 20 20 20 50 41 47 45 20 32 37 2c 20
>0a3f	45 58 45 4d 50 4c 45 20 23 34 20 20 20 20 20 20
>0a4f	20 20 2a
>0a52	0d		          .byte     $0d
>0a53	20 2a 20 20	          .text               " *    Programmeur Daniel Lafrance.    *"
>0a57	20 20 d0 52 4f 47 52 41 4d 4d 45 55 52 20 c4 41
>0a67	4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e 20 20
>0a77	20 20 2a
>0a7a	0d		          .byte     $0d
>0a7b	20 2a 20 20	          .text     format(   " *      Version: %s.     * ",Version)
>0a7f	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>0a8f	34 31 30 32 38 2d 32 32 30 39 33 34 2e 20 20 20
>0a9f	20 20 2a 20
>0aa3	90 00		          .byte     b_black,b_eot
>0aa5	1f 20 12	shortcuts .byte     b_blue,b_space,b_rvs_on
>0aa8	20 20 20 20	          .text               "        RACCOURCIS DES EXEMPLES       "
>0aac	20 20 20 20 d2 c1 c3 c3 cf d5 d2 c3 c9 d3 20 c4
>0abc	c5 d3 20 c5 d8 c5 cd d0 cc c5 d3 20 20 20 20 20
>0acc	20 20
>0ace	92 0d 0d	          .byte     b_rvs_off,b_crlf,b_crlf
>0ad1	20 50 30 32	          .text     format(   " p027ex04: SYS %d ($%04X)",p027ex04, p027ex04)
>0ad5	37 45 58 30 34 3a 20 d3 d9 d3 20 32 32 30 30 20
>0ae5	28 24 30 38 39 38 29
>0aec	0d		          .byte     b_crlf
>0aed	20 48 45 4c	          .text     format(   " help....: SYS %d ($%04X)",help, help)
>0af1	50 2e 2e 2e 2e 3a 20 d3 d9 d3 20 32 33 34 37 20
>0b01	28 24 30 39 32 c2 29
>0b08	0d		          .byte     b_crlf
>0b09	20 43 4c 53	          .text     format(   " cls.....: SYS %d ($%04X)",cls, cls)
>0b0d	2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 33 30 30 32 20
>0b1d	28 24 30 c2 c2 c1 29
>0b24	0d 00		          .byte     b_crlf,b_eot
>0b26	0d 20 1c	helptext  .byte     b_crlf,b_space,b_red
>0b29	20 45 58 2e	          .text     format(   " ex.: SYS %d",p027ex04)
>0b2d	3a 20 d3 d9 d3 20 32 32 30 30
>0b37	0d 90 00	          .byte     b_crlf,b_black,b_eot
>0b3a	20 2d 2d 2d	line      .text               " --------------------------------------"
>0b3e	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0b4e	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0b5e	2d 2d 2d
>0b61	0d 00		          .byte     b_crlf,b_eot
.0b63			akey
.0b63	a9 74		          lda  #<kmsg
.0b65	85 22		          sta  $22
.0b67	a9 0b		          lda  #>kmsg
.0b69	85 23		          sta  $23
.0b6b	a9 1e		          lda  #kmsgend-kmsg
.0b6d	20 24 ab	          jsr  b_strout
.0b70	20 9e 12	          jsr  anykey
.0b73	60		          rts
>0b74	0d 1e 91 1d	kmsg      .byte b_crlf,b_green,b_crsr_up,b_crsr_right
>0b78	d5 4e 45 20	          .text               "Une clef pour continuer!"
>0b7c	43 4c 45 46 20 50 4f 55 52 20 43 4f 4e 54 49 4e
>0b8c	55 45 52 21
>0b90	90 00		          .byte b_black,b_eot
.0b92			kmsgend

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0b92	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0b96	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0b9a			libtart

;******  Return to file: p027ex04.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: p027ex04.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_vftf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: p027ex04.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0b9a			scrmaninit
.0b9a	20 86 0e	               jsr  push
.0b9d	a9 06		               lda  #vbleu
.0b9f	8d 21 d0	               sta  vicbackcol
.0ba2	a9 05		               lda  #vvert
.0ba4	8d 20 d0	               sta  vicbordcol
.0ba7	a9 01		               lda  #vblanc
.0ba9	8d 86 02	               sta  bascol
.0bac	ad 00 04	               lda  scrnram
.0baf	8d 00 04	               sta  scrnram
.0bb2	20 ba 0b	               jsr  cls
.0bb5	20 c5 0e	               jsr  pop
.0bb8	60		               rts
>0bb9	8e		characterset   .byte b_uppercase
.0bba			cls
.0bba	08		               php
.0bbb	48		               pha
.0bbc	a9 93		               lda  #$93
.0bbe	20 d1 0b	               jsr  putch
.0bc1	68		               pla
.0bc2	28		               plp
.0bc3	60		               rts
.0bc4			putnch
.0bc4	08		               php
.0bc5	e0 00		               cpx  #$00
.0bc7	f0 06		               beq  out
.0bc9	20 d2 ff	again          jsr  $ffd2
.0bcc	ca		               dex
.0bcd	d0 fa		               bne  again
.0bcf	28		out            plp
.0bd0	60		               rts
.0bd1			putch
.0bd1	08		               php
.0bd2	20 d2 ff	               jsr  $ffd2
.0bd5	28		               plp
.0bd6	60		               rts
.0bd7			puts
.0bd7	20 86 0e	               jsr  push
.0bda	86 fb		               stx  zpage1
.0bdc	84 fc		               sty  zpage1+1
.0bde	a0 00		               ldy  #0
.0be0	b1 fb		next           lda  (zpage1),y
.0be2	f0 09		               beq  exit
.0be4	20 d1 0b	               jsr  putch
.0be7	20 8d 0f	               jsr  inczp1
.0bea	4c e0 0b	               jmp  next
.0bed	20 c5 0e	exit           jsr  pop
.0bf0	60		               rts
.0bf1			gotoxy
.0bf1	08		               php
.0bf2	18		               clc
.0bf3	8a		               txa
.0bf4	48		               pha
.0bf5	98		               tya
.0bf6	aa		               tax
.0bf7	68		               pla
.0bf8	a8		               tay
.0bf9	20 f0 ff	               jsr  kplot
.0bfc	28		               plp
.0bfd	60		               rts
.0bfe			cursor
=$0286			bascol    =    $0286
.0bfe	08		               php
.0bff	48		               pha
.0c00	90 12		               bcc  restore
.0c02	20 f0 ff	               jsr  kplot
.0c05	8c 26 0c	               sty  cx
.0c08	8e 27 0c	               stx  cy
.0c0b	ad 86 02	               lda  bascol
.0c0e	8d 28 0c	               sta  bcol
.0c11	4c 23 0c	               jmp  out
.0c14	ae 27 0c	restore        ldx  cy
.0c17	ac 26 0c	               ldy  cx
.0c1a	20 f0 ff	               jsr  kplot
.0c1d	ad 28 0c	               lda  bcol
.0c20	8d 86 02	               sta  bascol
.0c23	68		out            pla
.0c24	28		               plp
.0c25	60		               rts
>0c26	00		cx   .byte     $00
>0c27	00		cy   .byte     $00
>0c28	00		bcol .byte     $00
.0c29			cursave
.0c29	08		               php
.0c2a	38		               sec
.0c2b	20 fe 0b	               jsr  cursor
.0c2e	28		               plp
.0c2f	60		               rts
.0c30			curput
.0c30	08		               php
.0c31	18		               clc
.0c32	20 fe 0b	               jsr  cursor
.0c35	28		               plp
.0c36	60		               rts
.0c37			putsxy
.0c37	20 86 0e	               jsr  push
.0c3a	86 fb		               stx  zpage1
.0c3c	84 fc		               sty  zpage1+1
.0c3e	a0 00		               ldy  #$00
.0c40	b1 fb		               lda  (zpage1),y
.0c42	aa		               tax
.0c43	20 8d 0f	               jsr  inczp1
.0c46	b1 fb		               lda  (zpage1),y
.0c48	a8		               tay
.0c49	20 f1 0b	               jsr  gotoxy
.0c4c	20 8d 0f	               jsr  inczp1
.0c4f	a6 fb		               ldx  zpage1
.0c51	a4 fc		               ldy  zpage1+1
.0c53	20 d7 0b	               jsr  puts
.0c56	20 c5 0e	               jsr  pop
.0c59	60		               rts
>0c5a	00 00		straddr   .word     $00
>0c5c	00		px        .byte     $00
>0c5d	00		py        .byte     $00
>0c5e	00 00		zp1       .word     $00
.0c60			putscxy
.0c60	20 86 0e	               jsr  push
.0c63	84 fc		               sty  zpage1+1
.0c65	86 fb		               stx  zpage1
.0c67	ad 86 02	               lda  bascol
.0c6a	8d 8a 0c	               sta  bc
.0c6d	a0 00		               ldy #$00
.0c6f	b1 fb		               lda  (zpage1),y
.0c71	8d 86 02	               sta  bascol
.0c74	20 8d 0f	               jsr  inczp1
.0c77	a6 fb		               ldx  zpage1
.0c79	a4 fc		               ldy  zpage1+1
.0c7b	20 37 0c	               jsr  putsxy
.0c7e	ad 8a 0c	               lda  bc
.0c81	8d 86 02	               sta  bascol
.0c84	20 c5 0e	               jsr  pop
.0c87	60		               rts
>0c88	00 00		straddr  .word      $00
>0c8a	00		bc       .byte      $00
>0c8b	00 00		zp1      .word      $00
.0c8d			putrahex
.0c8d	08		               php
.0c8e	48		               pha
.0c8f	20 a3 10	               jsr  a2hex
.0c92	a9 42		               lda  #<a2hexstr
.0c94	a0 10		               ldy  #>a2hexstr
.0c96	20 d7 0b	               jsr  puts
.0c99	68		               pla
.0c9a	28		               plp
.0c9b	60		               rts
.0c9c			kputrahexxy
.0c9c			bputrahexxy
.0c9c			putrahexxy
.0c9c	08		               php
.0c9d	20 a3 10	               jsr  a2hex
.0ca0	a9 3f		               lda  #<a2hexpos
.0ca2	a0 10		               ldy  #>a2hexpos
.0ca4	20 37 0c	               jsr  putsxy
.0ca7	68		               pla
.0ca8	28		               plp
.0ca9	60		               rts
.0caa			putrahexcxy
.0caa	08		               php
.0cab	20 a3 10	               jsr  a2hex
.0cae	a9 3f		               lda  #<a2hexpos
.0cb0	a0 10		               ldy  #>a2hexpos
.0cb2	20 60 0c	               jsr  putscxy
.0cb5	68		               pla
.0cb6	28		               plp
.0cb7	60		               rts
.0cb8			setinverse
.0cb8	48		               pha
.0cb9	a9 12		               lda  #$12
.0cbb	20 d2 ff	               jsr  $ffd2
.0cbe	68		               pla
.0cbf	60		               rts
.0cc0			clrinverse
.0cc0	48		               pha
.0cc1	a9 92		               lda  #$92
.0cc3	20 d2 ff	               jsr  $ffd2
.0cc6	68		               pla
.0cc7	60		               rts

;******  Return to file: p027ex04.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.0cc8			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.0cc8	08		                php
.0cc9	8d 7a 0e	                sta  rega
.0ccc	68		                pla
.0ccd	8d 7d 0e	                sta  regp
.0cd0	8e 7b 0e	                stx  regx
.0cd3	8c 7c 0e	                sty  regy
.0cd6	ba		                tsx
.0cd7	8e 7e 0e	                stx  regs
.0cda	68		                pla
.0cdb	8d 80 0e	                sta  regpcl
.0cde	8d 81 0e	                sta  regpcl2
.0ce1	68		                pla
.0ce2	8d 7f 0e	                sta  regpch
.0ce5	ad 7a 0e	                lda  rega
.0ce8	48		                pha
.0ce9	20 90 10	                jsr  nib2hex
.0cec	8d 1d 0e	                sta  vala+1
.0cef	68		                pla
.0cf0	20 9c 10	                jsr  lsra4bits
.0cf3	20 90 10	                jsr  nib2hex
.0cf6	8d 1c 0e	                sta  vala
.0cf9	ad 7c 0e	                lda  regy
.0cfc	48		                pha
.0cfd	20 90 10	                jsr  nib2hex
.0d00	8d 33 0e	                sta  valy+1
.0d03	68		                pla
.0d04	20 9c 10	                jsr  lsra4bits
.0d07	20 90 10	                jsr  nib2hex
.0d0a	8d 32 0e	                sta  valy
.0d0d	ad 7b 0e	                lda  regx
.0d10	48		                pha
.0d11	20 90 10	                jsr  nib2hex
.0d14	8d 28 0e	                sta  valx+1
.0d17	68		                pla
.0d18	20 9c 10	                jsr  lsra4bits
.0d1b	20 90 10	                jsr  nib2hex
.0d1e	8d 27 0e	                sta  valx
.0d21	ad 7d 0e	                lda  regp
.0d24	48		                pha
.0d25	20 90 10	                jsr  nib2hex
.0d28	8d 3e 0e	                sta  valp+1
.0d2b	68		                pla
.0d2c	20 9c 10	                jsr  lsra4bits
.0d2f	20 90 10	                jsr  nib2hex
.0d32	8d 3d 0e	                sta  valp
.0d35	ad 7e 0e	                lda  regs
.0d38	48		                pha
.0d39	20 90 10	                jsr  nib2hex
.0d3c	8d 49 0e	                sta  vals+1
.0d3f	68		                pla
.0d40	20 9c 10	                jsr  lsra4bits
.0d43	20 90 10	                jsr  nib2hex
.0d46	8d 48 0e	                sta  vals
.0d49	ad 7f 0e	                lda  regpch
.0d4c	48		                pha
.0d4d	20 90 10	                jsr  nib2hex
.0d50	8d 55 0e	                sta  valpch+1
.0d53	68		                pla
.0d54	20 9c 10	                jsr  lsra4bits
.0d57	20 90 10	                jsr  nib2hex
.0d5a	8d 54 0e	                sta  valpch
.0d5d	ad 80 0e	                lda  regpcl
.0d60	48		                pha
.0d61	20 90 10	                jsr  nib2hex
.0d64	8d 57 0e	                sta  valpcl+1
.0d67	68		                pla
.0d68	20 9c 10	                jsr  lsra4bits
.0d6b	20 90 10	                jsr  nib2hex
.0d6e	8d 56 0e	                sta  valpcl
.0d71	a5 fb		                lda  zpage1
.0d73	48		                pha
.0d74	20 90 10	                jsr  nib2hex
.0d77	8d 66 0e	                sta  valz1l
.0d7a	68		                pla
.0d7b	20 9c 10	                jsr  lsra4bits
.0d7e	20 90 10	                jsr  nib2hex
.0d81	8d 67 0e	                sta  valz1l+1
.0d84	a5 fc		                lda  zpage1+1
.0d86	48		                pha
.0d87	20 90 10	                jsr  nib2hex
.0d8a	8d 64 0e	                sta  valz1h
.0d8d	68		                pla
.0d8e	20 9c 10	                jsr  lsra4bits
.0d91	20 90 10	                jsr  nib2hex
.0d94	8d 65 0e	                sta  valz1h+1
.0d97	a5 fd		                lda  zpage2
.0d99	48		                pha
.0d9a	20 90 10	                jsr  nib2hex
.0d9d	8d 76 0e	                sta  valz2l
.0da0	68		                pla
.0da1	20 9c 10	                jsr  lsra4bits
.0da4	20 90 10	                jsr  nib2hex
.0da7	8d 77 0e	                sta  valz2l+1
.0daa	a5 fe		                lda  zpage2+1
.0dac	48		                pha
.0dad	20 90 10	                jsr  nib2hex
.0db0	8d 74 0e	                sta  valz2h
.0db3	68		                pla
.0db4	20 9c 10	                jsr  lsra4bits
.0db7	20 90 10	                jsr  nib2hex
.0dba	8d 75 0e	                sta  valz2h+1
.0dbd	20 b8 0c	                jsr  setinverse
.0dc0	78		                sei
.0dc1	a2 14		                ldx  #<srega
.0dc3	a0 0e		                ldy  #>srega+1
.0dc5	20 60 0c	                jsr  putscxy
.0dc8	a2 1f		                ldx  #<sregx
.0dca	a0 0e		                ldy  #>sregx+1
.0dcc	20 60 0c	                jsr  putscxy
.0dcf	a2 2a		                ldx  #<sregy
.0dd1	a0 0e		                ldy  #>sregy+1
.0dd3	20 60 0c	                jsr  putscxy
.0dd6	a2 35		                ldx  #<sregp
.0dd8	a0 0e		                ldy  #>sregp+1
.0dda	20 60 0c	                jsr  putscxy
.0ddd	a2 40		                ldx  #<sregs
.0ddf	a0 0e		                ldy  #>sregs+1
.0de1	20 60 0c	                jsr  putscxy
.0de4	a2 4b		                ldx  #<sregpc
.0de6	a0 0e		                ldy  #>sregpc+1
.0de8	20 60 0c	                jsr  putscxy
.0deb	a2 5a		                ldx  #<sregz1
.0ded	a0 0e		                ldy  #>sregz1+1
.0def	20 60 0c	                jsr  putscxy
.0df2	a2 6a		                ldx  #<sregz2
.0df4	a0 0e		                ldy  #>sregz2+1
.0df6	20 60 0c	                jsr  putscxy
.0df9	58		                cli
.0dfa	20 c0 0c	                jsr  clrinverse
.0dfd	ad 7f 0e	                lda  regpch
.0e00	48		                pha
.0e01	ad 80 0e	                lda  regpcl
.0e04	48		                pha
.0e05	ac 7c 0e	                ldy  regy
.0e08	ae 7b 0e	                ldx  regx
.0e0b	ad 7d 0e	                lda  regp
.0e0e	48		                pha
.0e0f	ad 7a 0e	                lda  rega
.0e12	28		                plp
.0e13	60		                rts
>0e14	01 00 00 17	srega   .byte   colr,bkcol,coln,line
>0e18	20 41 3a 24	        .text   ' a:$' ;4,24
>0e1c	00 00 00	vala    .byte   0,0,0
>0e1f	01 00 06 17	sregx   .byte   colr,bkcol,coln+6,line
>0e23	20 58 3a 24	        .text   ' x:$' ;4,24
>0e27	00 00 00	valx    .byte   0,0,0
>0e2a	01 00 0c 17	sregy   .byte   colr,bkcol,coln+12,line
>0e2e	20 59 3a 24	        .text   ' y:$' ;4,24
>0e32	00 00 00	valy    .byte   0,0,0
>0e35	01 00 12 17	sregp   .byte   colr,bkcol,coln+18,line
>0e39	20 50 3a 24	        .text   ' p:$' ;4,24
>0e3d	00 00 00	valp    .byte   0,0,0
>0e40	01 00 18 17	sregs   .byte   colr,bkcol,coln+24,line
>0e44	20 53 3a 24	        .text   ' s:$' ;4,24
>0e48	00 00 00	vals    .byte   0,0,0
>0e4b	01 00 1e 17	sregpc  .byte   colr,bkcol,coln+30,line
>0e4f	20 50 43 3a	        .text   ' pc:$' ;4,24
>0e53	24
>0e54	00 00		valpch  .byte   0,0
>0e56	00 00 20 00	valpcl  .byte   0,0,32,0
>0e5a	01 00 03 18	sregz1  .byte   colr,bkcol,coln+3,line+1
>0e5e	20 5a 50 31	        .text   ' zp1:$' ;4,24
>0e62	3a 24
>0e64	00 00		valz1h  .byte   0,0
>0e66	00 00 20 00	valz1l  .byte   0,0,32,0
>0e6a	01 00 0f 18	sregz2  .byte   colr,bkcol,coln+15,line+1
>0e6e	20 5a 50 32	        .text   ' zp2:$' ;4,24
>0e72	3a 24
>0e74	00 00		valz2h  .byte   0,0
>0e76	00 00 20 00	valz2l  .byte   0,0,32,0
>0e7a	00		rega    .byte   0
>0e7b	00		regx    .byte   0
>0e7c	00		regy    .byte   0
>0e7d	00		regp    .byte   0
>0e7e	00		regs    .byte   0
>0e7f	00		regpch  .byte   0
>0e80	00		regpcl  .byte   0
>0e81	00		regpcl2 .byte   0
>0e82	00		vzp1h   .byte   0
>0e83	00		vzp1l   .byte   0
>0e84	00		vzp2h   .byte   0
>0e85	00		vzp2l   .byte   0

;******  Return to file: p027ex04.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.0e86			push
.0e86	08		          php            ; stack : flg, pcl, pch
.0e87	78		          sei
.0e88	8d c2 0e	          sta  ra        ; save a
.0e8b	68		          pla            ; stack : pcl, pch
.0e8c	8d c1 0e	          sta  rp        ; save rp
.0e8f	68		          pla            ; stack : pch
.0e90	8d c3 0e	          sta  pc        ; save pcl
.0e93	68		          pla            ; stack : -
.0e94	8d c4 0e	          sta  pc+1      ; save pch
.0e97	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0e99	48		          pha            ; stack : zp1l
.0e9a	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0e9c	48		          pha            ; stack : zp1h, zp1l
.0e9d	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0e9f	48		          pha            ; stack : zp2l, zp1h, zp1l
.0ea0	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0ea2	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0ea3	ad c1 0e	          lda  rp        ; get rp
.0ea6	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0ea7	ad c2 0e	          lda  ra        ; get a
.0eaa	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0eab	8a		          txa            ; get x
.0eac	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ead	98		          tya            ; get y
.0eae	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0eaf	ad c4 0e	          lda  pc+1      ; get pch
.0eb2	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0eb3	ad c3 0e	          lda  pc        ; get pcl
.0eb6	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0eb7	ad c1 0e	          lda  rp        ; get rp
.0eba	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ebb	ad c2 0e	          lda  ra        ; get a
.0ebe	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ebf	58		          cli
.0ec0	60		          rts
>0ec1	00		rp        .byte     0
>0ec2	00		ra        .byte     0
>0ec3	00 00		pc        .word     0
.0ec5			pull
.0ec5			pop
.0ec5	78		          sei
.0ec6	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ec7	8d fa 0e	          sta  pc        ; save pcl
.0eca	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ecb	8d fb 0e	          sta  pc+1      ; save pch
.0ece	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ecf	a8		          tay            ; set y
.0ed0	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0ed1	aa		          tax            ; set x
.0ed2	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0ed3	8d f9 0e	          sta  ra        ; save a
.0ed6	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0ed7	8d f8 0e	          sta  rp        ; save rp
.0eda	68		          pla            ; stack : zp2l, zp1h, zp1l
.0edb	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0edd	68		          pla            ; stack : zp1h, zp1l
.0ede	85 fd		          sta  zpage2    ; get zpage2 High byte
.0ee0	68		          pla            ; stack : zp1l
.0ee1	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0ee3	68		          pla            ; stack :
.0ee4	85 fb		          sta  zpage1    ; get zpage1 High byte
.0ee6	ad fb 0e	          lda  pc+1      ; get pch
.0ee9	48		          pha            ; stack : pch
.0eea	ad fa 0e	          lda  pc
.0eed	48		          pha            ; stack : pcl, pch
.0eee	ad f8 0e	          lda  rp        ; get rp
.0ef1	48		          pha            ; stack : rp, pcl, pch
.0ef2	ad f9 0e	          lda  ra        ; set ra
.0ef5	58		          cli
.0ef6	28		          plp            ; stack : pcl, pch
.0ef7	60		          rts
>0ef8	00		rp        .byte     0
>0ef9	00		ra        .byte     0
>0efa	00 00		pc        .word     0

;******  Return to file: p027ex04.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0efc			blkfill
.0efc	20 86 0e	bf0            jsr  push
.0eff	20 bd 0f	               jsr  savezp1
.0f02	84 fc		               sty  zpage1+1
.0f04	a0 00		               ldy  #$00
.0f06	84 fb		               sty  zpage1
.0f08	91 fb		bf1            sta  (zpage1),y
.0f0a	c8		               iny
.0f0b	d0 fb		               bne  bf1
.0f0d	20 cc 0f	               jsr  restzp1
.0f10	20 c5 0e	               jsr  pop
.0f13	60		               rts
.0f14			memfill
.0f14	20 86 0e	               jsr  push
.0f17	20 fc 0e	mf1            jsr  blkfill
.0f1a	c8		               iny
.0f1b	ca		               dex
.0f1c	d0 f9		               bne  mf1
.0f1e	20 c5 0e	               jsr  pop
.0f21	60		               rts
.0f22			memmove
.0f22	20 86 0e	               jsr  push
.0f25	ba		               tsx            ; On se crée un pointeur ...
.0f26	8a		               txa
.0f27	18		               clc
.0f28	69 0b		               adc  #11
.0f2a	a8		               tay
.0f2b	a2 06		               ldx  #$06
.0f2d	b9 00 01	nextbyte       lda  $0100,y
.0f30	99 7c 0f	               sta  words,y
.0f33	c8		               iny
.0f34	ca		               dex
.0f35	d0 f6		               bne  nextbyte
.0f37	ad 7c 0f	               lda  s
.0f3a	8d 53 0f	               sta  source+1
.0f3d	ad 7d 0f	               lda  s+1
.0f40	8d 54 0f	               sta  source+2
.0f43	ad 7e 0f	               lda  d
.0f46	8d 50 0f	               sta  destin+1
.0f49	ad 7f 0f	               lda  d+1
.0f4c	8d 51 0f	               sta  destin+2
.0f4f	ad ff ff	destin         lda  $ffff
.0f52	8d ff ff	source         sta  $ffff
.0f55	ee 50 0f	               inc  destin+1
.0f58	d0 03		               bne  src
.0f5a	ee 51 0f	               inc  destin+2
.0f5d	ee 53 0f	src            inc  source+1
.0f60	d0 03		               bne  cnt
.0f62	ee 54 0f	               inc  source+2
.0f65	ad 80 0f	cnt            lda  compte
.0f68	d0 08		               bne  decit
.0f6a	ad 81 0f	               lda  compte+1
.0f6d	f0 09		               beq  fini
.0f6f	ce 81 0f	               dec  compte+1
.0f72	ce 80 0f	decit          dec  compte
.0f75	4c 4f 0f	               jmp  destin
.0f78	20 c5 0e	fini           jsr  pop
.0f7b	60		               rts
.0f7c			words
>0f7c	00 00		s         .word     $0000
>0f7e	00 00		d         .word     $0000
>0f80	00 00		compte    .word     $0000
.0f82			decword
.0f82	20 86 0e	               jsr  push
.0f85	86 fd		               stx  zpage2
.0f87	84 fe		               sty  zpage2+1
.0f89	20 c5 0e	               jsr  pop
.0f8c	60		               rts
.0f8d			inczp1
.0f8d	08		               php
.0f8e	48		               pha
.0f8f	e6 fb		               inc  zpage1
.0f91	a5 fb		               lda  zpage1
.0f93	d0 02		               bne  nopage
.0f95	e6 fc		               inc  zpage1+1
.0f97	68		nopage         pla
.0f98	28		               plp
.0f99	60		               rts
.0f9a			deczp1
.0f9a	08		                php
.0f9b	48		                pha
.0f9c	c6 fb		                dec  zpage1
.0f9e	d0 02		                bne  nopage
.0fa0	c6 fc		                dec  zpage1+1
.0fa2	68		nopage          pla
.0fa3	28		                plp
.0fa4	60		                rts
.0fa5			inczp2
.0fa5	08		               php
.0fa6	48		               pha
.0fa7	e6 fd		               inc  zpage2
.0fa9	a5 fd		               lda  zpage2
.0fab	d0 02		               bne  nopage
.0fad	e6 fe		               inc  zpage2+1
.0faf	68		nopage         pla
.0fb0	28		               plp
.0fb1	60		               rts
.0fb2			deczp2
.0fb2	08		               php
.0fb3	48		               pha
.0fb4	a5 fd		               lda  zpage2
.0fb6	d0 02		               bne  nopage
.0fb8	c6 fe		               dec  zpage2+1
.0fba	68		nopage         pla
.0fbb	28		               plp
.0fbc	60		               rts
.0fbd			savezp1
.0fbd	08		               php
.0fbe	48		               pha
.0fbf	a5 fb		               lda  zpage1
.0fc1	8d 39 10	               sta  zp1
.0fc4	a5 fc		               lda  zpage1+1
.0fc6	8d 3a 10	               sta  zp1+1
.0fc9	68		               pla
.0fca	28		               plp
.0fcb	60		               rts
.0fcc			restzp1
.0fcc	08		               php
.0fcd	48		               pha
.0fce	ad 39 10	               lda zp1
.0fd1	85 fb		               sta zpage1
.0fd3	ad 3a 10	               lda zp1+1
.0fd6	85 fc		               sta zpage1+1
.0fd8	68		               pla
.0fd9	28		               plp
.0fda	60		               rts
.0fdb			savezp2
.0fdb	08		         php
.0fdc	48		         pha
.0fdd	a5 fd		         lda zpage2
.0fdf	8d 3b 10	         sta zp2
.0fe2	a5 fe		         lda zpage2+1
.0fe4	8d 3c 10	         sta zp2+1
.0fe7	68		         pla
.0fe8	28		         plp
.0fe9	60		         rts
.0fea			restzp2
.0fea	08		                php
.0feb	48		                pha
.0fec	ad 3b 10	                lda  zp2
.0fef	85 fd		                sta  zpage2
.0ff1	ad 3c 10	                lda  zp2+1
.0ff4	85 fe		                sta  zpage2+1
.0ff6	68		                pla
.0ff7	28		                plp
.0ff8	60		                rts
.0ff9			xy2addr
.0ff9	08		                php
.0ffa	48		                pha
.0ffb	8a		                txa
.0ffc	48		                pha
.0ffd	98		                tya
.0ffe	48		                pha
.0fff	ad 34 10	                lda     addr1+1
.1002	8d 36 10	                sta     addr2+1
.1005	ad 33 10	                lda     addr1
.1008	8d 35 10	                sta     addr2
.100b	c0 00		                cpy     #$00
.100d	f0 0f		                beq     addx
.100f	18		moreline        clc
.1010	6d 32 10	                adc     ymult
.1013	90 03		                bcc     norepy
.1015	ee 36 10	                inc     addr2+1
.1018	8d 35 10	norepy          sta     addr2
.101b	88		                dey
.101c	d0 f1		                bne     moreline
.101e	8a		addx            txa
.101f	18		                clc
.1020	6d 35 10	                adc     addr2
.1023	90 03		                bcc     thatsit
.1025	ee 36 10	                inc     addr2+1
.1028	8d 35 10	thatsit         sta     addr2
.102b	68		                pla
.102c	a8		                tay
.102d	68		                pla
.102e	aa		                tax
.102f	68		                pla
.1030	28		                plp
.1031	60		                rts
>1032	28		ymult          .byte     40
>1033	00 00		addr1          .word     $0000
>1035	00 00		addr2          .word     $0000
>1037	00 00		bytecnt        .word     $0000
>1039	00 00		zp1        .word   $0000
>103b	00 00		zp2        .word   $0000

;******  Return to file: p027ex04.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>103d	01		a2hexcol       .byte     1              ; pour aputscxy
>103e	00		a2hexbkcol     .byte     %00000000
.103f			a2hexpos
>103f	00		a2hexpx        .byte     0              ; pour aputsxy
>1040	00		a2hexpy        .byte     0
>1041	24		a2hexprefix    .byte     "$"            ; pour aputs
>1042	00 00		a2hexstr       .word     $00
>1044	00 00		               .word     $00
>1046	00		               .byte     0              ; 0 end string
>1047	30 30 30 30	abin           .null     "00000000"
>104b	30 30 30 30 00
>1050	20 20 20 00	adec           .null     "   "
.1054			putahexfmtxy
.1054	20 86 0e	               jsr  push
.1057	20 a3 10	               jsr  a2hex
.105a	ae 3f 10	               ldx  a2hexpx
.105d	ac 40 10	               ldy  a2hexpy
.1060	20 f1 0b	               jsr  gotoxy
.1063	a2 41		               ldx  #<a2hexprefix
.1065	a0 10		               ldy  #>a2hexprefix
.1067	20 d7 0b	               jsr  puts
.106a	20 c5 0e	               jsr  pop
.106d	60		               rts
.106e			putahexfmt
.106e	20 86 0e	               jsr  push
.1071	20 a3 10	               jsr  a2hex
.1074	a2 41		               ldx  #<a2hexprefix
.1076	a0 10		               ldy  #>a2hexprefix
.1078	20 d7 0b	               jsr  puts
.107b	20 c5 0e	               jsr  pop
.107e	60		               rts
.107f			putahex
.107f	20 86 0e	               jsr  push
.1082	20 a3 10	               jsr  a2hex
.1085	a2 42		               ldx  #<a2hexstr
.1087	a0 10		               ldy  #>a2hexstr
.1089	20 d7 0b	               jsr  puts
.108c	20 c5 0e	               jsr  pop
.108f	60		               rts
.1090			nib2hex
.1090	08		               php
.1091	29 0f		               and  #$0f
.1093	f8		               sed
.1094	18		               clc
.1095	69 90		               adc  #$90
.1097	69 40		               adc  #$40
.1099	d8		               cld
.109a	28		               plp
.109b	60		               rts
.109c			lsra4bits
.109c	08		               php
.109d	4a		               lsr
.109e	4a		               lsr
.109f	4a		               lsr
.10a0	4a		               lsr
.10a1	28		               plp
.10a2	60		               rts
.10a3			a2hex
.10a3	08		               php
.10a4	48		               pha
.10a5	48		               pha
.10a6	20 9c 10	               jsr  lsra4bits
.10a9	20 90 10	               jsr  nib2hex
.10ac	8d 42 10	               sta  a2hexstr
.10af	68		               pla
.10b0	20 90 10	               jsr  nib2hex
.10b3	8d 43 10	               sta  a2hexstr+1
.10b6	a9 00		               lda  #$00                ; set end of string
.10b8	8d 44 10	               sta  a2hexstr+2
.10bb	68		               pla
.10bc	28		               plp
.10bd	60		               rts
.10be			xy2hex
.10be	20 86 0e	               jsr  push
.10c1	20 a3 10	               jsr  a2hex
.10c4	8a		               txa
.10c5	48		               pha
.10c6	20 9c 10	               jsr  lsra4bits
.10c9	20 90 10	               jsr  nib2hex
.10cc	8d 42 10	               sta  a2hexstr
.10cf	68		               pla
.10d0	20 90 10	               jsr  nib2hex
.10d3	8d 43 10	               sta  a2hexstr+1
.10d6	98		               tya
.10d7	48		               pha
.10d8	20 9c 10	               jsr  lsra4bits
.10db	20 90 10	               jsr  nib2hex
.10de	8d 44 10	               sta  a2hexstr+2
.10e1	68		               pla
.10e2	20 90 10	               jsr  nib2hex
.10e5	8d 45 10	               sta  a2hexstr+3
.10e8	a9 00		               lda  #$00                ; 0 ended string
.10ea	8d 46 10	               sta  a2hexstr+4
.10ed	20 c5 0e	               jsr  pop
.10f0			atobin
.10f0	20 86 0e	               jsr  push
.10f3	a2 08		               ldx  #8
.10f5	a0 00		               ldy  #0
.10f7	18		               clc
.10f8	2a		nextbit        rol
.10f9	48		               pha
.10fa	69 00		               adc  #$00
.10fc	29 01		               and  #$01
.10fe	20 90 10	               jsr  nib2hex
.1101	99 47 10	               sta  abin,y
.1104	68		               pla
.1105	c8		               iny
.1106	ca		               dex
.1107	d0 ef		               bne  nextbit
.1109	a9 00		               lda  #0
.110b	99 47 10	               sta  abin,y
.110e	20 c5 0e	               jsr  pull
.1111	60		               rts
.1112			putabin
.1112	20 f0 10	               jsr     atobin
.1115	20 86 0e	               jsr     push
.1118	a2 47		               ldx     #<abin
.111a	a0 10		               ldy     #>abin
.111c	20 d7 0b	               jsr     puts
.111f	20 c5 0e	               jsr     pop
.1122	60		               rts
.1123			printabin
.1123	20 86 0e	               jsr     push
.1126	a2 47		               ldx     #<abin
.1128	a0 10		               ldy     #>abin
.112a	20 d7 0b	               jsr     puts
.112d	20 c5 0e	               jsr     pop
.1130	60		               rts
.1131			putabinfmt
.1131	08		               php
.1132	48		               pha
.1133	a9 25		               lda     #"%"
.1135	20 d1 0b	               jsr     putch
.1138	68		               pla
.1139	20 12 11	               jsr     putabin
.113c	28		               plp
.113d	60		               rts
.113e			putabinxy
.113e	20 f1 0b	               jsr     gotoxy
.1141	20 12 11	               jsr     putabin
.1144	60		               rts
.1145			putabinfmtxy
.1145	20 f1 0b	               jsr     gotoxy
.1148	20 31 11	               jsr     putabinfmt
.114b	60		               rts
.114c			atodec
.114c	20 86 0e	               jsr  push
.114f	f8		               sed
.1150	aa		               tax
.1151	a0 00		               ldy  #$00
.1153	a9 00		               lda  #$00
.1155	18		nextbit        clc
.1156	69 01		               adc  #$01
.1158	90 01		               bcc  decx
.115a	c8		               iny
.115b	ca		decx           dex
.115c	d0 f7		               bne  nextbit
.115e	48		               pha
.115f	98		               tya
.1160	20 90 10	               jsr  nib2hex
.1163	8d 50 10	               sta  adec
.1166	68		               pla
.1167	48		               pha
.1168	20 90 10	               jsr  nib2hex
.116b	8d 52 10	               sta  adec+2
.116e	68		               pla
.116f	6a		               ror
.1170	6a		               ror
.1171	6a		               ror
.1172	6a		               ror
.1173	20 90 10	               jsr  nib2hex
.1176	8d 51 10	               sta  adec+1
.1179	d8		               cld
.117a	20 c5 0e	               jsr  pull
.117d	60		               rts
>117e	00 00 00	buffer         .byte     0,0,0
.1181			putadec
.1181	20 86 0e	               jsr  push
.1184	20 4c 11	               jsr  atodec
.1187	a2 50		               ldx  #<adec
.1189	a0 10		               ldy  #>adec+1
.118b	20 d7 0b	               jsr  puts
.118e	20 c5 0e	               jsr  pop
.1191	60		               rts

;******  Return to file: p027ex04.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>1192	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>1196	00 00 00 00 00 00 00 00 00 0d 00 00
>11a2	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>11a6	00 00 00 00 00 00 00 00 00 00 00 00
>11b2	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>11b6	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>11c2	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>11c6	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>11d2	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>11d6	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>11e2	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>11e6	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>11f2	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>11f6	00 00 00 00 00 00 00 00 00 00 00 00
>1202	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1206	00 00 00 00 00 00 00 00 00 00 00 00
>1212	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1216	00 00 00 00 00 00 00 00 00 00 00 00
>1222	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1226	00 00 00 00 00 00 00 00 00 00 00 00
>1232	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>1236	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1242	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1246	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1252	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1256	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>1262	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>1266	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>1272	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>1276	00 00 00 00 00 00 00 00 00 00 00 00
>1282	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>1286	00 00 00 00 00 00 00 00 00 00 00 00
.1292			waitstop
.1292	20 86 0e	               jsr  push
.1295	20 ed f6	wait           jsr  k_stop
.1298	d0 fb		               bne  wait
.129a	20 c5 0e	               jsr  pop
.129d	60		               rts
.129e			anykey
.129e	08		               php
.129f	48		               pha
.12a0	a5 cb		nokey          lda 203
.12a2	c9 40		               cmp #64
.12a4	f0 fa		               beq nokey
.12a6	20 ac 12	               jsr releasekey
.12a9	68		               pla
.12aa	28		               plp
.12ab	60		               rts
.12ac			releasekey
.12ac	08		               php
.12ad	48		               pha
.12ae	a5 cb		keypressed     lda 203
.12b0	c9 40		               cmp #64
.12b2	d0 fa		               bne keypressed
.12b4	68		               pla
.12b5	28		               plp
.12b6	60		               rts
.12b7			getkey
.12b7	20 e4 ff	again          jsr  getin
.12ba	c9 00		               cmp  #0
.12bc	f0 f9		               beq  again
.12be	60		               rts
.12bf			kbflushbuff
.12bf	08		               php
.12c0	48		               pha
.12c1	20 e4 ff	again          jsr  getin
.12c4	c9 00		               cmp  #0
.12c6	d0 f9		               bne  again
.12c8	68		               pla
.12c9	28		               plp
.12ca	60		               rts
.12cb			waitkey
.12cb	20 86 0e	               jsr  push
.12ce	8d 1c 13	               sta  thekey
.12d1	20 e4 ff	nope           jsr  getin
.12d4	20 d2 ff	               jsr  chrout
.12d7	cd 1c 13	               cmp  thekey
.12da	d0 f5		               bne  nope
.12dc	20 d2 ff	               jsr  chrout
.12df	20 c5 0e	               jsr  pop
.12e2	60		               rts
.12e3			waitspace
.12e3	20 86 0e	               jsr  push
.12e6	a9 7f		wait           lda  #$7f  ;%01111111
.12e8	8d 00 dc	               sta  $dc00
.12eb	ad 01 dc	               lda  $dc01
.12ee	29 10		               and  #$10  ;mask %00010000
.12f0	d0 f4		               bne  wait
.12f2	20 c5 0e	               jsr  pop
.12f5			waitsstop
.12f5	20 86 0e	               jsr  push
.12f8	20 ed f6	wait           jsr  k_stop  ;%01111111
.12fb	d0 fb		               bne  wait
.12fd	20 c5 0e	               jsr  pop
.1300			waitreturn
.1300	20 86 0e	               jsr  push
.1303	ad 1d 13	               lda  thecount
.1306	8d 00 04	               sta  scrnram
.1309	a9 02		               lda  #$02
.130b	8d 00 d8	               sta  colorram
.130e	20 e4 ff	nope           jsr  getin
.1311	c9 0d		nohex          cmp  #$0d
.1313	d0 f9		               bne  nope
.1315	ee 1d 13	               inc  thecount
.1318	20 c5 0e	               jsr  pop
.131b	60		               rts
>131c	00		thekey         .byte   0
>131d	01		thecount       .byte   $01

;******  Return to file: p027ex04.asm


;******  End of listing

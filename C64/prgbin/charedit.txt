
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Tue Apr 22 23:14:12 2025

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm

="20250422-224206"	version  = "20250422-224206"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c 54 08	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

=18			fkeyleft       =    18
=9			f1top          =    9
=$0400			scrnnewram     =    $0400
=10			charsdef       =    10
=9			grid_top       =    9
=1			grid_left      =    1
=16			grid_bot       =    grid_top + 7
=8			grid_right     =    grid_left + 7
=$0b			bordure        =    vgris
=$00			fond           =    vnoir
=$03			mesgcol        =    vcyan
=$03			menu1col1      =    vcyan
=$0e			menu1col2      =    vbleu1
=$0f			menu2col1      =    vgris2
=$0c			menu2col2      =    vgris1
=$01			flashcol       =    vblanc
=$07			whoamicol      =    vjaune
=$01			charcolor      =    vblanc
=$0f			charscolor     =    vgris2
.0854			main
.0854	20 49 24	               jsr  push
.0857	20 17 23	               jsr  scrmaninit
.085a	08		               php
.085b	48		               pha
.085c	a9 08		               lda  #$08
.085e	20 d2 ff	               jsr  $ffd2
.0861	68		               pla
.0862	28		               plp
.0863	20 e5 0a	               jsr  drawcredits
.0866	20 49 24	               jsr  push
.0869	a2 50		               ldx  #<menu_msg
.086b	a0 1e		               ldy  #>menu_msg
.086d	20 dd 23	               jsr  putscxy
.0870	20 84 24	               jsr  pull
.0873	20 d2 10	               jsr  copycharset
.0876	20 37 23	               jsr  cls
.0879	20 bc 10	               jsr  setscreenptr
.087c	20 80 0b	               jsr  setdefaultchar
.087f	20 2d 11	               jsr  staticscreen
.0882	20 ff 0f	               jsr  drawbitmap
.0885	a9 00		               lda  #$00
.0887	8d a0 09	               sta  fkeyset
.088a	20 82 11	               jsr  drawfkeys
.088d	a9 00		               lda  #$00
.088f	20 49 24	               jsr  push
.0892	a2 69		               ldx  #<blankmsg
.0894	a0 1b		               ldy  #>blankmsg
.0896	20 dd 23	               jsr  putscxy
.0899	a2 95		               ldx  #<prompt_msg
.089b	a0 1b		               ldy  #>prompt_msg
.089d	20 dd 23	               jsr  putscxy
.08a0	20 84 24	               jsr  pop
.08a3	20 c1 28	     jsr  anykey
.08a6	20 91 0d	               jsr  keyaction
.08a9	20 37 23	               jsr  cls
.08ac	20 e5 0a	               jsr  drawcredits
.08af	20 49 24	               jsr  push
.08b2	a2 d9		               ldx  #<bye_msg
.08b4	a0 1f		               ldy  #>bye_msg
.08b6	20 dd 23	               jsr  putscxy
.08b9	20 84 24	               jsr  pull
.08bc	20 49 24	               jsr  push
.08bf	a2 fb		               ldx  #<any_msg
.08c1	a0 1f		               ldy  #>any_msg
.08c3	20 dd 23	               jsr  putscxy
.08c6	20 84 24	               jsr  pull
.08c9	20 da 28	               jsr  getkey
.08cc	20 37 23	               jsr  cls
.08cf	20 84 24	endmain        jsr  pop
.08d2	60		               rts
.08d3			savetofile
.08d3	20 49 24	               jsr  pushall
.08d6	a9 b1		               lda  #<fname
.08d8	8d 26 2b	               sta  dsk_fnptr
.08db	a9 09		               lda  #>fname
.08dd	8d 27 2b	               sta  dsk_fnptr+1
.08e0	a9 0d		               lda  #(device-fname-1)
.08e2	8d 28 2b	               sta  dsk_fnlen
.08e5	ad bf 09	               lda  device
.08e8	29 0f		               and  #$0f
.08ea	8d 25 2b	               sta  dsk_lfsno
.08ed	8d 24 2b	               sta  dsk_dev
.08f0	a9 00		               lda  #<bitmapmem
.08f2	8d 20 2b	               sta  dsk_data_s
.08f5	a9 28		               lda  #>bitmapmem
.08f7	8d 21 2b	               sta  dsk_data_s+1
.08fa	a9 00		               lda  #<endofaddr
.08fc	8d 22 2b	               sta  dsk_data_e
.08ff	a9 48		               lda  #>endofaddr
.0901	8d 23 2b	               sta  dsk_data_e+1
.0904	20 49 24	               jsr  push
.0907	a2 69		               ldx  #<blankmsg
.0909	a0 1b		               ldy  #>blankmsg
.090b	20 dd 23	               jsr  putscxy
.090e	20 84 24	               jsr  pull
.0911	20 49 24	               jsr  push
.0914	a2 bb		               ldx  #<wait_msg
.0916	a0 1b		               ldy  #>wait_msg
.0918	20 dd 23	               jsr  putscxy
.091b	20 84 24	               jsr  pull
.091e	20 49 24	               jsr  push
.0921	a2 01		               ldx  #1
.0923	a0 04		               ldy  #4
.0925	20 6e 23	               jsr  gotoxy
.0928	20 84 24	               jsr  pop
.092b	20 db 29	               jsr  memtofile
.092e	20 84 24	               jsr  popall
.0931	60		               rts
.0932			loadfromfile
.0932	20 49 24	               jsr  pushall
.0935	a9 b1		               lda  #<fname
.0937	8d 26 2b	               sta  dsk_fnptr
.093a	a9 09		               lda  #>fname
.093c	8d 27 2b	               sta  dsk_fnptr+1
.093f	a9 0d		               lda  #(device-fname-1)
.0941	8d 28 2b	               sta  dsk_fnlen
.0944	ad bf 09	               lda  device
.0947	29 0f		               and  #$0f
.0949	8d 24 2b	               sta  dsk_dev
.094c	8d 25 2b	               sta  dsk_lfsno
.094f	a9 00		               lda  #<bitmapmem
.0951	8d 20 2b	               sta  dsk_data_s
.0954	a9 28		               lda  #>bitmapmem
.0956	8d 21 2b	               sta  dsk_data_s+1
.0959	a9 00		               lda  #<endofaddr
.095b	8d 22 2b	               sta  dsk_data_e
.095e	a9 48		               lda  #>endofaddr
.0960	8d 23 2b	               sta  dsk_data_e+1
.0963	20 49 24	               jsr  push
.0966	a2 69		               ldx  #<blankmsg
.0968	a0 1b		               ldy  #>blankmsg
.096a	20 dd 23	               jsr  putscxy
.096d	20 84 24	               jsr  pull
.0970	20 49 24	               jsr  push
.0973	a2 bb		               ldx  #<wait_msg
.0975	a0 1b		               ldy  #>wait_msg
.0977	20 dd 23	               jsr  putscxy
.097a	20 84 24	               jsr  pull
.097d	20 49 24	               jsr  push
.0980	a2 01		               ldx  #1
.0982	a0 04		               ldy  #4
.0984	20 6e 23	               jsr  gotoxy
.0987	20 84 24	               jsr  pop
.098a	20 13 2a	               jsr  filetomem
.098d	20 84 24	               jsr  popall
.0990	60		               rts
=10240			bitmapmem      =         charsdef * 1024     ;Calcul position ram des caracteres.
=18432			endofaddr      =         (charsdef * 1024) + (4*$800)
=61440			mstopaddr      =         $d000+(4*$800)
>0991	00 d0		startaddr      .word     $d000               ; 53248
>0993	00 f0		stopaddr       .word     mstopaddr           ; 55296
>0995	00 28		bitmapaddr     .word     bitmapmem           ; $3000, 12288
>0997	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>099b	08 04 02 01
>099f	00		editmode       .byte     0
>09a0	00		fkeyset        .byte     0
>09a1	00		currentchar    .byte     0
>09a2	00		currentkey     .byte     0
>09a3	00		previouskey    .byte     0
>09a4	00		bitmapoffset   .byte     0
>09a5	00 00		mapaddr        .word     0
>09a7	00 00		byteaddr       .word     0
>09a9	00 00		gridaddr       .word     0
>09ab	09		cursln         .byte     grid_top
>09ac	01		curscl         .byte     grid_left
>09ad	05 1b 03 12	pfname         .byte     vvert,27,3,18
>09b1	40 30 3a	fname          .text     "@0:"
>09b4	4f 52 49 47	name           .text     "origin"
>09b8	49 4e
>09ba	2e 43 48 52	ext            .null     ".chr"
>09be	00
>09bf	08		device         .byte     8

;******  Processing file: routines.asm

.09c0			screenredraw
.09c0	20 49 24	               jsr  pushall
.09c3	20 0b 22	               jsr  screendis
.09c6	20 37 23	               jsr  cls
.09c9	20 2d 11	               jsr  staticscreen
.09cc	20 ff 0f	               jsr  drawbitmap
.09cf	20 82 11	               jsr  drawfkeys
.09d2	20 49 24	               jsr  push
.09d5	a2 0d		               ldx  #13
.09d7	a0 0c		               ldy  #12
.09d9	20 6e 23	               jsr  gotoxy
.09dc	20 84 24	               jsr  pop
.09df	ad a2 09	               lda  currentkey
.09e2	20 4e 23	               jsr  putch
.09e5	20 49 24	               jsr  push
.09e8	a2 69		               ldx  #<blankmsg
.09ea	a0 1b		               ldy  #>blankmsg
.09ec	20 dd 23	               jsr  putscxy
.09ef	a2 95		               ldx  #<prompt_msg
.09f1	a0 1b		               ldy  #>prompt_msg
.09f3	20 dd 23	               jsr  putscxy
.09f6	20 84 24	               jsr  pop
.09f9	20 18 22	               jsr  screenena
.09fc	20 84 24	               jsr  popall
.09ff	60		               rts
.0a00			getfname
.0a00	20 49 24	               jsr  pushall
.0a03	20 49 24	               jsr  push
.0a06	a2 69		               ldx  #<blankmsg
.0a08	a0 1b		               ldy  #>blankmsg
.0a0a	20 dd 23	               jsr  putscxy
.0a0d	a2 ee		               ldx  #<fname_msg
.0a0f	a0 1d		               ldy  #>fname_msg
.0a11	20 dd 23	               jsr  putscxy
.0a14	20 84 24	               jsr  pop
.0a17	a2 00		               ldx  #$00
.0a19	8e 4d 0a	               stx  count
.0a1c	20 4e 0a	getanother     jsr  getalphanum
.0a1f	20 4e 23	               jsr  putch
.0a22	ae 4d 0a	               ldx  count
.0a25	9d b4 09	               sta  name,x
.0a28	ee 4d 0a	               inc  count
.0a2b	ae 4d 0a	               ldx  count
.0a2e	e0 06		               cpx  #$06
.0a30	f0 03		               beq  finish
.0a32	4c 1c 0a	               jmp  getanother
.0a35			finish
.0a35	20 49 24	               jsr  push
.0a38	a2 69		               ldx  #<blankmsg
.0a3a	a0 1b		               ldy  #>blankmsg
.0a3c	20 dd 23	               jsr  putscxy
.0a3f	a2 ad		               ldx  #<pfname
.0a41	a0 09		               ldy  #>pfname
.0a43	20 dd 23	               jsr  putscxy
.0a46	20 84 24	               jsr  pop
.0a49	20 84 24	               jsr  popall
.0a4c	60		               rts
>0a4d	00		count          .byte     0
.0a4e			getalphanum
.0a4e	20 49 24	               jsr  pushall
.0a51	20 da 28	getanother     jsr  getkey
.0a54	c9 30		               cmp  #$30      ; 0
.0a56	30 f9		               bmi  getanother
.0a58	c9 3a		               cmp  #$3a      ; 9+1
.0a5a	30 0b		               bmi  goodone
.0a5c	c9 41		isitletter     cmp  #$41      ; A
.0a5e	30 f1		               bmi  getanother
.0a60	c9 5b		               cmp  #$5b      ; Z+1
.0a62	30 03		               bmi  goodone
.0a64	4c 51 0a	               jmp  getanother
.0a67	8d 71 0a	goodone        sta  tempbyte
.0a6a	20 84 24	               jsr  popall
.0a6d	ad 71 0a	               lda  tempbyte
.0a70	60		               rts
>0a71	00		tempbyte       .byte     0
.0a72			copychar
.0a72	20 49 24	               jsr  pushall
.0a75	20 ae 0a	               jsr  getvalidkey
.0a78	ad 95 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0a7b	85 fb		               sta  zpage1
.0a7d	ad 96 09	               lda  bitmapaddr+1
.0a80	85 fc		               sta  zpage1+1
.0a82	ae e4 0a	               ldx  copykey
.0a85	bd b5 27	               lda  asciitorom,x
.0a88	aa		               tax
.0a89	e0 00		               cpx  #$00
.0a8b	f0 08		               beq  no_offset      ; sommes nous déja à 0
.0a8d	a9 08		addagain       lda  #$08
.0a8f	20 4a 13	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0a92	ca		               dex                 ; pour chaque caracteres
.0a93	d0 f8		               bne  addagain
.0a95	ad a5 09	no_offset      lda  mapaddr        ; le caractere actuel
.0a98	85 fd		               sta  zpage2         ;
.0a9a	ad a6 09	               lda  mapaddr+1      ;
.0a9d	85 fe		               sta  zpage2+1       ;
.0a9f	a0 00		               ldy  #$00
.0aa1	b1 fb		nextbyte       lda  (zpage1),y
.0aa3	91 fd		               sta  (zpage2),y
.0aa5	c8		               iny
.0aa6	c0 08		               cpy  #$08
.0aa8	d0 f7		               bne  nextbyte
.0aaa	20 84 24	out            jsr  popall
.0aad	60		               rts
.0aae			getvalidkey
.0aae	20 49 24	               jsr  pushall
.0ab1	20 49 24	               jsr  push
.0ab4	a2 69		               ldx  #<blankmsg
.0ab6	a0 1b		               ldy  #>blankmsg
.0ab8	20 dd 23	               jsr  putscxy
.0abb	a2 c5		               ldx  #<copychar_msg
.0abd	a0 1d		               ldy  #>copychar_msg
.0abf	20 dd 23	               jsr  putscxy
.0ac2	20 84 24	               jsr  pop
.0ac5	20 da 28	getgoodkey     jsr  getkey
.0ac8	8d e4 0a	               sta  copykey
.0acb	aa		               tax
.0acc	bc b5 27	               ldy  asciitorom,x
.0acf	c4 00		               cpy  $00
.0ad1	d0 0a		               bne  goodone
.0ad3	ae e4 0a	               ldx  copykey
.0ad6	e0 40		               cpx  #$40
.0ad8	f0 03		               beq  goodone
.0ada	4c c5 0a	               jmp  getgoodkey
.0add	20 4e 23	goodone        jsr  putch
.0ae0	20 84 24	               jsr  popall
.0ae3	60		               rts
>0ae4	00		copykey        .byte 0
.0ae5			drawcredits
.0ae5	20 49 24	               jsr  pushall
.0ae8	20 37 23	               jsr  cls
.0aeb	20 49 24	               jsr  push
.0aee	a2 65		               ldx  #<whoami0
.0af0	a0 1e		               ldy  #>whoami0
.0af2	20 dd 23	               jsr  putscxy
.0af5	20 84 24	               jsr  pull
.0af8	20 49 24	               jsr  push
.0afb	a2 8a		               ldx  #<whoami1
.0afd	a0 1e		               ldy  #>whoami1
.0aff	20 dd 23	               jsr  putscxy
.0b02	20 84 24	               jsr  pull
.0b05	20 49 24	               jsr  push
.0b08	a2 b1		               ldx  #<whoami2
.0b0a	a0 1e		               ldy  #>whoami2
.0b0c	20 dd 23	               jsr  putscxy
.0b0f	20 84 24	               jsr  pull
.0b12	20 49 24	               jsr  push
.0b15	a2 d6		               ldx  #<whoami3
.0b17	a0 1e		               ldy  #>whoami3
.0b19	20 dd 23	               jsr  putscxy
.0b1c	20 84 24	               jsr  pull
.0b1f	20 49 24	               jsr  push
.0b22	a2 fb		               ldx  #<whoami4
.0b24	a0 1e		               ldy  #>whoami4
.0b26	20 dd 23	               jsr  putscxy
.0b29	20 84 24	               jsr  pull
.0b2c	20 49 24	               jsr  push
.0b2f	a2 20		               ldx  #<whoami5
.0b31	a0 1f		               ldy  #>whoami5
.0b33	20 dd 23	               jsr  putscxy
.0b36	20 84 24	               jsr  pull
.0b39	20 49 24	               jsr  push
.0b3c	a2 45		               ldx  #<whoami6
.0b3e	a0 1f		               ldy  #>whoami6
.0b40	20 dd 23	               jsr  putscxy
.0b43	20 84 24	               jsr  pull
.0b46	20 49 24	               jsr  push
.0b49	a2 6a		               ldx  #<whoami7
.0b4b	a0 1f		               ldy  #>whoami7
.0b4d	20 dd 23	               jsr  putscxy
.0b50	20 84 24	               jsr  pull
.0b53	20 49 24	               jsr  push
.0b56	a2 8f		               ldx  #<whoami8
.0b58	a0 1f		               ldy  #>whoami8
.0b5a	20 dd 23	               jsr  putscxy
.0b5d	20 84 24	               jsr  pull
.0b60	20 49 24	               jsr  push
.0b63	a2 b4		               ldx  #<whoami9
.0b65	a0 1f		               ldy  #>whoami9
.0b67	20 dd 23	               jsr  putscxy
.0b6a	20 84 24	               jsr  pull
.0b6d	20 68 13	               jsr  delay
.0b70	20 68 13	               jsr  delay
.0b73	20 68 13	               jsr  delay
.0b76	20 68 13	               jsr  delay
.0b79	20 68 13	               jsr  delay
.0b7c	20 84 24	               jsr  popall
.0b7f	60		               rts
.0b80			setdefaultchar
.0b80	20 49 24	               jsr  pushall
.0b83	a9 40		               lda  #$40
.0b85	8d a2 09	               sta  currentkey
.0b88	aa		               tax
.0b89	bc b5 27	               ldy  asciitorom,x
.0b8c	8c a4 09	               sty  bitmapoffset
.0b8f	20 4a 0c	               jsr  drawkeyval
.0b92	20 ff 0f	               jsr  drawbitmap
.0b95	20 49 24	               jsr  push
.0b98	a2 0d		               ldx  #13
.0b9a	a0 0c		               ldy  #12
.0b9c	20 6e 23	               jsr  gotoxy
.0b9f	20 84 24	               jsr  pop
.0ba2	20 4e 23	               jsr  putch
.0ba5	20 49 24	               jsr  push
.0ba8	a2 11		               ldx  #17
.0baa	a0 05		               ldy  #5
.0bac	20 6e 23	               jsr  gotoxy
.0baf	20 84 24	               jsr  pop
.0bb2	20 72 27	               jsr  atodec
.0bb5	20 49 24	               jsr  push
.0bb8	a2 76		               ldx  #<adec
.0bba	a0 26		               ldy  #>adec
.0bbc	20 54 23	               jsr  puts
.0bbf	20 84 24	               jsr  pull
.0bc2	20 84 24	               jsr  popall
.0bc5	60		               rts
.0bc6			resetmenuacolor
.0bc6	20 49 24	               jsr  pushall
.0bc9	a9 03		               lda  #menu1col1
.0bcb	8d 53 20	               sta  f1abutton
.0bce	8d 89 20	               sta  f3abutton
.0bd1	8d bf 20	               sta  f5abutton
.0bd4	8d f5 20	               sta  f7abutton
.0bd7	a9 0e		               lda  #menu1col2
.0bd9	8d 6e 20	               sta  f2abutton
.0bdc	8d a4 20	               sta  f4abutton
.0bdf	8d da 20	               sta  f6abutton
.0be2	8d 10 21	               sta  f8abutton
.0be5	20 84 24	               jsr  popall
.0be8	60		               rts
.0be9			resetmenubcolor
.0be9	20 49 24	               jsr  pushall
.0bec	a9 0f		               lda  #menu2col1
.0bee	8d 2b 21	               sta  f1bbutton
.0bf1	8d 61 21	               sta  f3bbutton
.0bf4	8d 97 21	               sta  f5bbutton
.0bf7	8d cd 21	               sta  f7bbutton
.0bfa	a9 0f		               lda  #menu2col1
.0bfc	8d 46 21	               sta  f2bbutton
.0bff	8d 7c 21	               sta  f4bbutton
.0c02	8d b2 21	               sta  f6bbutton
.0c05	8d e8 21	               sta  f8bbutton
.0c08	20 84 24	               jsr  popall
.0c0b	60		               rts
.0c0c			setmenuacolor
.0c0c	20 49 24	               jsr  pushall
.0c0f	8d 53 20	               sta  f1abutton
.0c12	8d 6e 20	               sta  f2abutton
.0c15	8d 89 20	               sta  f3abutton
.0c18	8d a4 20	               sta  f4abutton
.0c1b	8d bf 20	               sta  f5abutton
.0c1e	8d da 20	               sta  f6abutton
.0c21	8d f5 20	               sta  f7abutton
.0c24	8d 10 21	               sta  f8abutton
.0c27	20 84 24	               jsr  popall
.0c2a	60		               rts
.0c2b			setmenubcolor
.0c2b	20 49 24	               jsr  pushall
.0c2e	8d 2b 21	               sta  f1bbutton
.0c31	8d 46 21	               sta  f2bbutton
.0c34	8d 61 21	               sta  f3bbutton
.0c37	8d 7c 21	               sta  f4bbutton
.0c3a	8d 97 21	               sta  f5bbutton
.0c3d	8d b2 21	               sta  f6bbutton
.0c40	8d cd 21	               sta  f7bbutton
.0c43	8d e8 21	               sta  f8bbutton
.0c46	20 84 24	               jsr  popall
.0c49	60		               rts
.0c4a			drawkeyval
.0c4a	20 49 24	               jsr  pushall
.0c4d	20 49 24	               jsr  push
.0c50	a2 01		               ldx  #1
.0c52	a0 13		               ldy  #19
.0c54	20 6e 23	               jsr  gotoxy
.0c57	20 84 24	               jsr  pop
.0c5a	ad a2 09	               lda  currentkey
.0c5d	20 4e 23	               jsr  putch
.0c60	48		               pha
.0c61	a9 3d		               lda  #'='
.0c63	20 4e 23	               jsr  putch
.0c66	a9 25		               lda  #'%'
.0c68	20 4e 23	               jsr  putch
.0c6b	68		               pla
.0c6c	20 38 27	               jsr  putabin
.0c6f	20 49 24	               jsr  push
.0c72	a2 01		               ldx  #1
.0c74	a0 14		               ldy  #20
.0c76	20 6e 23	               jsr  gotoxy
.0c79	20 84 24	               jsr  pop
.0c7c	20 49 24	               jsr  push
.0c7f	a2 4b		               ldx  #<txt1
.0c81	a0 0d		               ldy  #>txt1
.0c83	20 54 23	               jsr  puts
.0c86	20 84 24	               jsr  pull
.0c89	a9 24		               lda  #'$'
.0c8b	20 4e 23	               jsr  putch
.0c8e	ad a2 09	               lda  currentkey
.0c91	20 a5 26	               jsr  putahex
.0c94	20 49 24	               jsr  push
.0c97	a2 01		               ldx  #1
.0c99	a0 15		               ldy  #21
.0c9b	20 6e 23	               jsr  gotoxy
.0c9e	20 84 24	               jsr  pop
.0ca1	20 49 24	               jsr  push
.0ca4	a2 56		               ldx  #<txt2
.0ca6	a0 0d		               ldy  #>txt2
.0ca8	20 54 23	               jsr  puts
.0cab	20 84 24	               jsr  pull
.0cae	a9 24		               lda  #'$'
.0cb0	20 4e 23	               jsr  putch
.0cb3	ad 96 09	               lda  bitmapaddr+1
.0cb6	20 a5 26	               jsr  putahex
.0cb9	ad 95 09	               lda  bitmapaddr
.0cbc	20 a5 26	               jsr  putahex
.0cbf	20 49 24	               jsr  push
.0cc2	a2 01		               ldx  #1
.0cc4	a0 16		               ldy  #22
.0cc6	20 6e 23	               jsr  gotoxy
.0cc9	20 84 24	               jsr  pop
.0ccc	20 49 24	               jsr  push
.0ccf	a2 61		               ldx  #<txt3
.0cd1	a0 0d		               ldy  #>txt3
.0cd3	20 54 23	               jsr  puts
.0cd6	20 84 24	               jsr  pull
.0cd9	a9 24		               lda  #'$'
.0cdb	20 4e 23	               jsr  putch
.0cde	ad a4 09	               lda  bitmapoffset
.0ce1	20 a5 26	               jsr  putahex
.0ce4	20 49 24	               jsr  push
.0ce7	a2 01		               ldx  #1
.0ce9	a0 17		               ldy  #23
.0ceb	20 6e 23	               jsr  gotoxy
.0cee	20 84 24	               jsr  pop
.0cf1	20 49 24	               jsr  push
.0cf4	a2 6e		               ldx  #<txt4
.0cf6	a0 0d		               ldy  #>txt4
.0cf8	20 54 23	               jsr  puts
.0cfb	20 84 24	               jsr  pull
.0cfe	a9 24		               lda  #'$'
.0d00	20 4e 23	               jsr  putch
.0d03	ad a6 09	               lda  mapaddr+1
.0d06	20 a5 26	               jsr  putahex
.0d09	ad a5 09	               lda  mapaddr
.0d0c	20 a5 26	               jsr  putahex
.0d0f	20 49 24	               jsr  push
.0d12	a2 01		               ldx  #1
.0d14	a0 18		               ldy  #24
.0d16	20 6e 23	               jsr  gotoxy
.0d19	20 84 24	               jsr  pop
.0d1c	20 49 24	               jsr  push
.0d1f	a2 79		               ldx  #<txt5
.0d21	a0 0d		               ldy  #>txt5
.0d23	20 54 23	               jsr  puts
.0d26	20 84 24	               jsr  pull
.0d29	ad ac 09	               lda  curscl
.0d2c	20 a5 26	               jsr  putahex
.0d2f	a9 da		               lda  #$da
.0d31	20 4e 23	               jsr  putch
.0d34	ad ab 09	               lda  cursln
.0d37	20 a5 26	               jsr  putahex
.0d3a	20 84 24	               jsr  popall
.0d3d	60		               rts
>0d3e	50 45 54 53	txt0           .null     "petscii :   "
>0d42	43 49 49 20 3a 20 20 20 00
>0d4b	4b 45 59 20	txt1           .null     "key code: "
>0d4f	43 4f 44 45 3a 20 00
>0d56	42 49 54 4d	txt2           .null     "bitmap..: "
>0d5a	41 50 2e 2e 3a 20 00
>0d61	4f 46 46 53	txt3           .null     "offset..:   "
>0d65	45 54 2e 2e 3a 20 20 20 00
>0d6e	4d 41 50 41	txt4           .null     "mapaddr.: "
>0d72	44 44 52 2e 3a 20 00
>0d79	43 55 52 53	txt5           .null     "cursval.: "
>0d7d	56 41 4c 2e 3a 20 00
>0d84	53 54 41 43	txt6           .null     "stack......:"
>0d88	4b 2e 2e 2e 2e 2e 2e 3a 00
.0d91			keyaction
.0d91	20 49 24	               jsr  push
.0d94	20 da 28	loop           jsr  getkey
.0d97	c9 85		f1             cmp  #key_f1
.0d99	d0 03		               bne  f2
.0d9b	4c 19 0e	               jmp  dof1
.0d9e	c9 89		f2             cmp  #key_f2
.0da0	d0 03		               bne  f3
.0da2	4c 1f 0e	               jmp  dof2
.0da5	c9 86		f3             cmp  #key_f3
.0da7	d0 03		               bne  f4
.0da9	4c 25 0e	               jmp  dof3
.0dac	c9 8a		f4             cmp  #key_f4
.0dae	d0 03		               bne  f5
.0db0	4c 2b 0e	               jmp  dof4
.0db3	c9 87		f5             cmp  #key_f5
.0db5	d0 03		               bne  f6
.0db7	4c 31 0e	               jmp  dof5
.0dba	c9 8b		f6             cmp  #key_f6
.0dbc	d0 03		               bne  f7
.0dbe	4c 37 0e	               jmp  dof6
.0dc1	c9 88		f7             cmp  #key_f7
.0dc3	d0 03		               bne  f8
.0dc5	4c 3d 0e	               jmp  dof7
.0dc8	c9 8c		f8             cmp  #key_f8
.0dca	d0 03		               bne  ctrlx
.0dcc	4c 43 0e	               jmp  dof8
.0dcf	c9 18		ctrlx          cmp  #ctrl_x
.0dd1	d0 03		               bne  ctrlr
.0dd3	4c 49 0e	               jmp  doquit
.0dd6	c9 12		ctrlr          cmp  #ctrl_r
.0dd8	d0 06		               bne  ishex14
.0dda	20 c0 09	               jsr  screenredraw
.0ddd	4c 94 0d	               jmp  loop
.0de0	c9 14		ishex14        cmp  #$14
.0de2	d0 03		               bne  ishex12
.0de4	4c 94 0d	               jmp  loop
.0de7	c9 12		ishex12        cmp  #$12
.0de9	d0 03		               bne  reste
.0deb	4c 94 0d	               jmp  loop
.0dee			reste
.0dee	20 49 24	               jsr  push
.0df1	a2 0d		               ldx  #13
.0df3	a0 0c		               ldy  #12
.0df5	20 6e 23	               jsr  gotoxy
.0df8	20 84 24	               jsr  pop
.0dfb	20 4e 23	               jsr  putch
.0dfe	48		               pha
.0dff	ad a2 09	               lda  currentkey
.0e02	8d a3 09	               sta  previouskey
.0e05	68		               pla
.0e06	8d a2 09	               sta  currentkey
.0e09	aa		               tax
.0e0a	bc b5 27	               ldy  asciitorom,x
.0e0d	8c a4 09	               sty  bitmapoffset
.0e10	20 4a 0c	               jsr  drawkeyval
.0e13	20 ff 0f	               jsr  drawbitmap
.0e16	4c 94 0d	               jmp  loop
.0e19	20 7e 13	dof1           jsr  f1action  ;edit/reverse
.0e1c	4c 94 0d	               jmp  loop
.0e1f	20 a3 14	dof2           jsr  f2action  ;save/flip vert
.0e22	4c 94 0d	               jmp  loop
.0e25	20 5b 15	dof3           jsr  f3action  ;load/flip horz
.0e28	4c 94 0d	               jmp  loop
.0e2b	20 3c 16	dof4           jsr  f4action  ;copy/scroll r
.0e2e	4c 94 0d	               jmp  loop
.0e31	20 20 17	dof5           jsr  f5action  ;clear/scroll l
.0e34	4c 94 0d	               jmp  loop
.0e37	20 d8 17	dof6           jsr  f6action  ;fill;/scroll up
.0e3a	4c 94 0d	               jmp  loop
.0e3d	20 90 18	dof7           jsr  f7action  ;clear;/scroll down
.0e40	4c 94 0d	               jmp  loop
.0e43	20 4d 19	dof8           jsr  f8action  ; function
.0e46	4c 94 0d	               jmp  loop
.0e49	20 84 24	doquit         jsr  pop
.0e4c	60		               rts
.0e4d			editor
.0e4d	20 49 24	               jsr  push
.0e50	20 49 24	               jsr  push
.0e53	a2 69		               ldx  #<blankmsg
.0e55	a0 1b		               ldy  #>blankmsg
.0e57	20 dd 23	               jsr  putscxy
.0e5a	a2 50		               ldx  #<exit_msg
.0e5c	a0 1e		               ldy  #>exit_msg
.0e5e	20 dd 23	               jsr  putscxy
.0e61	20 84 24	               jsr  pop
.0e64	20 49 24	               jsr  push
.0e67	a2 69		               ldx  #<blankmsg
.0e69	a0 1b		               ldy  #>blankmsg
.0e6b	20 dd 23	               jsr  putscxy
.0e6e	a2 d7		               ldx  #<edit_msg
.0e70	a0 1b		               ldy  #>edit_msg
.0e72	20 dd 23	               jsr  putscxy
.0e75	20 84 24	               jsr  pop
.0e78	20 bb 0f	               jsr  setcurs
.0e7b	ad a2 09	               lda  currentkey
.0e7e	20 49 24	               jsr  push
.0e81	a2 11		               ldx  #17
.0e83	a0 05		               ldy  #5
.0e85	20 6e 23	               jsr  gotoxy
.0e88	20 84 24	               jsr  pop
.0e8b	20 72 27	               jsr  atodec
.0e8e	20 49 24	               jsr  push
.0e91	a2 76		               ldx  #<adec
.0e93	a0 26		               ldy  #>adec
.0e95	20 54 23	               jsr  puts
.0e98	20 84 24	               jsr  pull
.0e9b	20 ff 0f	               jsr  drawbitmap
.0e9e	20 da 28	ed_loop        jsr  getkey
.0ea1	c9 85		f1             cmp  #f1key
.0ea3	d0 03		               bne  cu
.0ea5	4c 8d 0f	               jmp  do_ctrlx
.0ea8	c9 91		cu             cmp  #cursu
.0eaa	d0 03		               bne  cd
.0eac	4c 38 0f	               jmp  do_up
.0eaf	c9 11		cd             cmp  #cursd
.0eb1	d0 03		               bne  cl
.0eb3	4c 4b 0f	               jmp  do_down
.0eb6	c9 9d		cl             cmp  #cursl
.0eb8	d0 03		               bne  cr
.0eba	4c 5e 0f	               jmp  do_left
.0ebd	c9 1d		cr             cmp  #cursr
.0ebf	d0 03		               bne  cx
.0ec1	4c 71 0f	               jmp  do_right
.0ec4	c9 18		cx             cmp  #ctrl_x
.0ec6	d0 03		               bne  sp
.0ec8	4c 8d 0f	               jmp  do_ctrlx
.0ecb	c9 20		sp             cmp  #$20
.0ecd	d0 03		               bne  ishex14
.0ecf	4c 84 0f	               jmp  do_swap
.0ed2	c9 14		ishex14        cmp  #$14
.0ed4	d0 03		               bne  ishex12
.0ed6	4c 84 0f	               jmp  do_swap
.0ed9	c9 12		ishex12        cmp  #$12
.0edb	d0 03		               bne  rest
.0edd	4c 84 0f	               jmp  do_swap
.0ee0			rest
.0ee0	20 49 24	               jsr  push
.0ee3	a2 0d		               ldx  #13
.0ee5	a0 0c		               ldy  #12
.0ee7	20 6e 23	               jsr  gotoxy
.0eea	20 84 24	               jsr  pop
.0eed	20 4e 23	               jsr  putch
.0ef0	48		               pha
.0ef1	ad a2 09	               lda  currentkey
.0ef4	8d a3 09	               sta  previouskey
.0ef7	68		               pla
.0ef8	8d a2 09	               sta  currentkey
.0efb	aa		               tax
.0efc	bc b5 27	               ldy  asciitorom,x
.0eff	8c a4 09	               sty  bitmapoffset
.0f02	20 4a 0c	               jsr  drawkeyval
.0f05	20 ff 0f	               jsr  drawbitmap
.0f08	20 49 24	               jsr  push
.0f0b	a2 0d		               ldx  #13
.0f0d	a0 0c		               ldy  #12
.0f0f	20 6e 23	               jsr  gotoxy
.0f12	20 84 24	               jsr  pop
.0f15	20 4e 23	               jsr  putch
.0f18	20 49 24	               jsr  push
.0f1b	a2 11		               ldx  #17
.0f1d	a0 05		               ldy  #5
.0f1f	20 6e 23	               jsr  gotoxy
.0f22	20 84 24	               jsr  pop
.0f25	20 72 27	               jsr  atodec
.0f28	20 49 24	               jsr  push
.0f2b	a2 76		               ldx  #<adec
.0f2d	a0 26		               ldy  #>adec
.0f2f	20 54 23	               jsr  puts
.0f32	20 84 24	               jsr  pull
.0f35	4c 8a 0f	               jmp  totop
.0f38	ad ab 09	do_up          lda  cursln
.0f3b	c9 09		               cmp  #grid_top
.0f3d	f0 4b		               beq  totop
.0f3f	20 dd 0f	               jsr  clrcurs
.0f42	ce ab 09	               dec  cursln
.0f45	20 bb 0f	               jsr  setcurs
.0f48	4c 8a 0f	               jmp  totop
.0f4b	ad ab 09	do_down        lda  cursln
.0f4e	c9 10		               cmp  #grid_bot
.0f50	f0 38		               beq  totop
.0f52	20 dd 0f	               jsr  clrcurs
.0f55	ee ab 09	               inc  cursln
.0f58	20 bb 0f	               jsr  setcurs
.0f5b	4c 8a 0f	               jmp  totop
.0f5e	ad ac 09	do_left        lda  curscl
.0f61	c9 01		               cmp  #grid_left
.0f63	f0 25		               beq  totop
.0f65	20 dd 0f	               jsr  clrcurs
.0f68	ce ac 09	               dec  curscl
.0f6b	20 bb 0f	               jsr  setcurs
.0f6e	4c 8a 0f	               jmp  totop
.0f71	ad ac 09	do_right       lda  curscl
.0f74	c9 08		               cmp  #grid_right
.0f76	f0 12		               beq  totop
.0f78	20 dd 0f	               jsr  clrcurs
.0f7b	ee ac 09	               inc  curscl
.0f7e	20 bb 0f	               jsr  setcurs
.0f81	4c 8a 0f	               jmp  totop
.0f84	20 94 0f	do_swap        jsr  do_eor
.0f87	20 ff 0f	               jsr  drawbitmap
.0f8a	4c 9e 0e	totop          jmp  ed_loop
.0f8d	20 dd 0f	do_ctrlx       jsr  clrcurs
.0f90	20 84 24	               jsr  pop
.0f93	60		               rts
.0f94			do_eor
.0f94	20 49 24	               jsr  push
.0f97	ad a5 09	               lda  mapaddr
.0f9a	85 fd		               sta  zpage2
.0f9c	ad a6 09	               lda  mapaddr+1
.0f9f	85 fe		               sta  zpage2+1
.0fa1	ae ab 09	               ldx  cursln     ; calcul de
.0fa4	ca		               dex            ; l'offset de
.0fa5	8a		               txa            ; la
.0fa6	29 f7		               and  #$f7      ; ligne
.0fa8	a8		               tay
.0fa9	ae ac 09	               ldx  curscl
.0fac	ca		               dex
.0fad	bd 97 09	               lda  eorval,x
.0fb0	51 fd		               eor  (zpage2),y
.0fb2	20 4a 0c	               jsr  drawkeyval
.0fb5	91 fd		               sta  (zpage2),y
.0fb7	20 84 24	               jsr  pop
.0fba	60		               rts
.0fbb			setcurs
.0fbb	20 49 24	               jsr  push
.0fbe	a2 01		               ldx  #grid_left
.0fc0	ac ab 09	               ldy  cursln
.0fc3	20 6e 23	               jsr  gotoxy
.0fc6	a9 da		               lda  #$da
.0fc8	20 4e 23	               jsr  putch
.0fcb	ae ac 09	               ldx  curscl
.0fce	e8		               inx
.0fcf	a0 08		               ldy  #grid_top-1
.0fd1	20 6e 23	               jsr  gotoxy
.0fd4	a9 da		               lda  #$da
.0fd6	20 4e 23	               jsr  putch
.0fd9	20 84 24	               jsr  pop
.0fdc	60		               rts
.0fdd			clrcurs
.0fdd	20 49 24	               jsr  push
.0fe0	a2 01		               ldx  #grid_left
.0fe2	ac ab 09	               ldy  cursln
.0fe5	20 6e 23	               jsr  gotoxy
.0fe8	a9 20		               lda  #$20
.0fea	20 4e 23	               jsr  putch
.0fed	ae ac 09	               ldx  curscl
.0ff0	e8		               inx
.0ff1	a0 08		               ldy  #grid_top-1
.0ff3	20 6e 23	               jsr  gotoxy
.0ff6	a9 20		               lda  #$20
.0ff8	20 4e 23	               jsr  putch
.0ffb	20 84 24	               jsr  pop
.0ffe	60		               rts
.0fff			drawbitmap
.0fff	20 49 24	               jsr  push
.1002	20 66 10	               jsr  calcmapaddr
.1005	ad a5 09	               lda  mapaddr        ; on pointe sur la table des bitmaps
.1008	85 fb		               sta  zpage1
.100a	ad a6 09	               lda  mapaddr+1
.100d	85 fc		               sta  zpage1+1
.100f	a0 00		drawchar       ldy  #$00
.1011	a2 09		               ldx  #grid_top      ;on replace la ...
.1013	8e 1c 10	               stx  isy+1          ;ligne de départ
.1016	20 49 24	nextline       jsr  push
.1019	a2 02		               ldx  #grid_left+1        ; la colonne
.101b	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.101d	20 6e 23	               jsr  gotoxy
.1020	20 84 24	               jsr  pop
.1023	b1 fb		               lda  (zpage1),y     ; on li une ligne
.1025	20 16 27	               jsr  atobin
.1028	20 95 10	               jsr  abintograph
.102b	20 49 24	               jsr  push
.102e	a2 6d		               ldx  #<abin
.1030	a0 26		               ldy  #>abin
.1032	20 54 23	               jsr  puts
.1035	20 84 24	               jsr  pull
.1038	ee 1c 10	               inc  isy+1
.103b	c8		               iny
.103c	c0 08		               cpy  #$08
.103e	30 d6		               bmi  nextline
.1040	20 47 10	               jsr  highlight
.1043	20 84 24	               jsr  pop
.1046	60		               rts
.1047			highlight
.1047	20 49 24	               jsr  push
.104a	ae a3 09	               ldx  previouskey
.104d	bd b5 27	               lda  asciitorom,x
.1050	aa		               tax
.1051	a9 0f		               lda  #charscolor
.1053	9d 00 d8	               sta  colorram,x
.1056	ae a2 09	               ldx  currentkey
.1059	bd b5 27	               lda  asciitorom,x
.105c	aa		               tax
.105d	a9 01		               lda  #charcolor
.105f	9d 00 d8	               sta  colorram,x
.1062	20 84 24	               jsr  pop
.1065	60		               rts
.1066			calcmapaddr
.1066	20 49 24	               jsr  push
.1069	ad 95 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.106c	85 fb		               sta  zpage1
.106e	ad 96 09	               lda  bitmapaddr+1
.1071	85 fc		               sta  zpage1+1
.1073	ae a4 09	               ldx  bitmapoffset
.1076	e0 00		               cpx  #$00
.1078	f0 08		               beq  thesame         ; sommes nous déja à 0
.107a	a9 08		addagain       lda  #$08
.107c	20 4a 13	               jsr  zp1addnum      ; on augmente de 8 byte ...
.107f	ca		               dex                 ; pour chaque caracteres
.1080	d0 f8		               bne  addagain
.1082	48		thesame        pha
.1083	a5 fb		               lda  zpage1
.1085	8d a5 09	               sta  mapaddr
.1088	a5 fc		               lda  zpage1+1
.108a	8d a6 09	               sta  mapaddr+1
.108d	68		               pla
.108e	20 4a 0c	               jsr  drawkeyval
.1091	20 84 24	out            jsr  pop
.1094	60		               rts
.1095			abintograph
.1095	20 49 24	               jsr  push
.1098	a9 6d		               lda  #<abin
.109a	85 fb		               sta  zpage1
.109c	a9 26		               lda  #>abin+1
.109e	85 fc		               sta  zpage1+1
.10a0	a0 00		               ldy  #$00
.10a2	b1 fb		nextbit        lda  (zpage1),y
.10a4	c9 30		               cmp  #$30
.10a6	f0 07		               beq  itszero
.10a8	a9 d1		itsone         lda  #$d1
.10aa	91 fb		               sta  (zpage1),y
.10ac	4c b3 10	               jmp  next
.10af	a9 2e		itszero        lda  #$2e
.10b1	91 fb		               sta  (zpage1),y
.10b3	c8		next           iny
.10b4	c0 08		               cpy  #$08
.10b6	30 ea		               bmi  nextbit
.10b8	20 84 24	               jsr  pop
.10bb	60		               rts
.10bc			setscreenptr
.10bc	20 49 24	               jsr  push
.10bf	a9 08		               lda  #$08      ; basic commande to disable ...
.10c1	20 d2 ff	               jsr  chrout    ; ... character set change.
.10c4	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.10c7	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.10c9	09 0a		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.10cb	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.10ce	20 84 24	               jsr  pop
.10d1	60		               rts
.10d2			copycharset
.10d2	20 49 24	               jsr  push
.10d5	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.10d8	29 fe		               and  #%11111110     ;254
.10da	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.10dd	a5 01		               lda  u6510map       ;$01
.10df	29 fb		               and  #%11111011     ;251
.10e1	85 01		               sta  u6510map       ;$01
.10e3	20 f8 10	               jsr  memcopy
.10e6	a5 01		               lda  u6510map       ;$01
.10e8	09 04		               ora  #%00000100
.10ea	85 01		               sta  u6510map       ;$01
.10ec	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.10ef	09 01		               ora  #%00000001     ;254
.10f1	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.10f4	20 84 24	               jsr  pop
.10f7	60		               rts
.10f8			memcopy
.10f8	20 49 24	               jsr  push
.10fb	ad 91 09	               lda  startaddr
.10fe	85 fb		               sta  zpage1
.1100	ad 92 09	               lda  startaddr+1
.1103	85 fc		               sta  zpage1+1
.1105	ad 95 09	               lda  bitmapaddr
.1108	85 fd		               sta  zpage2
.110a	ad 96 09	               lda  bitmapaddr+1
.110d	85 fe		               sta  zpage2+1
.110f	a0 00		               ldy  #$00
.1111	b1 fb		onemore        lda  (zpage1),y
.1113	91 fd		               sta  (zpage2),y
.1115	20 9e 25	               jsr  inczp1
.1118	20 b6 25	               jsr  inczp2
.111b	a5 fc		               lda  zpage1+1
.111d	cd 94 09	               cmp  stopaddr+1
.1120	d0 ef		               bne  onemore
.1122	a5 fb		               lda  zpage1
.1124	cd 93 09	               cmp  stopaddr
.1127	d0 e8		               bne  onemore
.1129	20 84 24	               jsr  pop
.112c	60		               rts
.112d			staticscreen
.112d	48		               pha
.112e	a9 0b		               lda  #bordure
.1130	8d 20 d0	               sta  $d020
.1133	68		               pla
.1134	48		               pha
.1135	a9 00		               lda  #fond
.1137	8d 21 d0	               sta  $d021
.113a	68		               pla
.113b	20 a1 12	               jsr  drawlines
.113e	20 7d 12	               jsr  drawallchars
.1141	20 e9 12	               jsr  drawgrid
.1144	20 82 11	               jsr  drawfkeys
.1147	a9 0a		               lda  #vrose
.1149	8d 38 1e	               sta  redraw_msg
.114c	20 49 24	               jsr  push
.114f	a2 69		               ldx  #<blankmsg
.1151	a0 1b		               ldy  #>blankmsg
.1153	20 dd 23	               jsr  putscxy
.1156	a2 38		               ldx  #<redraw_msg
.1158	a0 1e		               ldy  #>redraw_msg
.115a	20 dd 23	               jsr  putscxy
.115d	20 84 24	               jsr  pop
.1160	20 49 24	               jsr  push
.1163	a2 69		               ldx  #<blankmsg
.1165	a0 1b		               ldy  #>blankmsg
.1167	20 dd 23	               jsr  putscxy
.116a	a2 23		               ldx  #<quit_msg
.116c	a0 1e		               ldy  #>quit_msg
.116e	20 dd 23	               jsr  putscxy
.1171	20 84 24	               jsr  pop
.1174	20 49 24	               jsr  push
.1177	a2 00		               ldx  #0
.1179	a0 07		               ldy  #7
.117b	20 6e 23	               jsr  gotoxy
.117e	20 84 24	               jsr  pop
.1181	60		               rts
.1182			drawfkeys
.1182	20 49 24	               jsr  push
.1185	ad a0 09	               lda  fkeyset
.1188	c9 00		               cmp  #$0
.118a	d0 78		               bne  secondks
.118c	20 49 24	               jsr  push
.118f	a2 1d		               ldx  #<titremenu1
.1191	a0 20		               ldy  #>titremenu1
.1193	20 dd 23	               jsr  putscxy
.1196	20 84 24	               jsr  pull
.1199	20 49 24	               jsr  push
.119c	a2 53		               ldx  #<f1abutton
.119e	a0 20		               ldy  #>f1abutton
.11a0	20 dd 23	               jsr  putscxy
.11a3	20 84 24	               jsr  pull
.11a6	20 49 24	               jsr  push
.11a9	a2 6e		               ldx  #<f2abutton
.11ab	a0 20		               ldy  #>f2abutton
.11ad	20 dd 23	               jsr  putscxy
.11b0	20 84 24	               jsr  pull
.11b3	20 49 24	               jsr  push
.11b6	a2 89		               ldx  #<f3abutton
.11b8	a0 20		               ldy  #>f3abutton
.11ba	20 dd 23	               jsr  putscxy
.11bd	20 84 24	               jsr  pull
.11c0	20 49 24	               jsr  push
.11c3	a2 a4		               ldx  #<f4abutton
.11c5	a0 20		               ldy  #>f4abutton
.11c7	20 dd 23	               jsr  putscxy
.11ca	20 84 24	               jsr  pull
.11cd	20 49 24	               jsr  push
.11d0	a2 bf		               ldx  #<f5abutton
.11d2	a0 20		               ldy  #>f5abutton
.11d4	20 dd 23	               jsr  putscxy
.11d7	20 84 24	               jsr  pull
.11da	20 49 24	               jsr  push
.11dd	a2 da		               ldx  #<f6abutton
.11df	a0 20		               ldy  #>f6abutton
.11e1	20 dd 23	               jsr  putscxy
.11e4	20 84 24	               jsr  pull
.11e7	20 49 24	               jsr  push
.11ea	a2 f5		               ldx  #<f7abutton
.11ec	a0 20		               ldy  #>f7abutton
.11ee	20 dd 23	               jsr  putscxy
.11f1	20 84 24	               jsr  pull
.11f4	20 49 24	               jsr  push
.11f7	a2 10		               ldx  #<f8abutton
.11f9	a0 21		               ldy  #>f8abutton
.11fb	20 dd 23	               jsr  putscxy
.11fe	20 84 24	               jsr  pull
.1201	4c 79 12	               jmp end
.1204			secondks
.1204	20 49 24	               jsr  push
.1207	a2 38		               ldx  #<titremenu2
.1209	a0 20		               ldy  #>titremenu2
.120b	20 dd 23	               jsr  putscxy
.120e	20 84 24	               jsr  pull
.1211	20 49 24	               jsr  push
.1214	a2 2b		               ldx  #<f1bbutton
.1216	a0 21		               ldy  #>f1bbutton
.1218	20 dd 23	               jsr  putscxy
.121b	20 84 24	               jsr  pull
.121e	20 49 24	               jsr  push
.1221	a2 46		               ldx  #<f2bbutton
.1223	a0 21		               ldy  #>f2bbutton
.1225	20 dd 23	               jsr  putscxy
.1228	20 84 24	               jsr  pull
.122b	20 49 24	               jsr  push
.122e	a2 61		               ldx  #<f3bbutton
.1230	a0 21		               ldy  #>f3bbutton
.1232	20 dd 23	               jsr  putscxy
.1235	20 84 24	               jsr  pull
.1238	20 49 24	               jsr  push
.123b	a2 7c		               ldx  #<f4bbutton
.123d	a0 21		               ldy  #>f4bbutton
.123f	20 dd 23	               jsr  putscxy
.1242	20 84 24	               jsr  pull
.1245	20 49 24	               jsr  push
.1248	a2 97		               ldx  #<f5bbutton
.124a	a0 21		               ldy  #>f5bbutton
.124c	20 dd 23	               jsr  putscxy
.124f	20 84 24	               jsr  pull
.1252	20 49 24	               jsr  push
.1255	a2 b2		               ldx  #<f6bbutton
.1257	a0 21		               ldy  #>f6bbutton
.1259	20 dd 23	               jsr  putscxy
.125c	20 84 24	               jsr  pull
.125f	20 49 24	               jsr  push
.1262	a2 cd		               ldx  #<f7bbutton
.1264	a0 21		               ldy  #>f7bbutton
.1266	20 dd 23	               jsr  putscxy
.1269	20 84 24	               jsr  pull
.126c	20 49 24	               jsr  push
.126f	a2 e8		               ldx  #<f8bbutton
.1271	a0 21		               ldy  #>f8bbutton
.1273	20 dd 23	               jsr  putscxy
.1276	20 84 24	               jsr  pull
.1279	20 84 24	end            jsr  pop
.127c	60		               rts
.127d			drawallchars
.127d	20 49 24	               jsr push
.1280	20 49 24	               jsr  push
.1283	a2 00		               ldx  #0
.1285	a0 00		               ldy  #0
.1287	20 6e 23	               jsr  gotoxy
.128a	20 84 24	               jsr  pop
.128d	a2 00		               ldx  #$00
.128f	8a		nextc          txa
.1290	9d 00 04	               sta  scrnnewram,x
.1293	a9 0f		               lda  #charscolor
.1295	9d 00 d8	               sta  colorram,x
.1298	e8		               inx
.1299	e0 80		               cpx  #$80
.129b	d0 f2		               bne  nextc
.129d	20 84 24	               jsr  pop
.12a0	60		               rts
.12a1			drawlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.12a1	20 49 24	               jsr  push
.12a4	a2 28		               ldx  #40
.12a6	a9 40		               lda  #64
.12a8	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.12ab	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.12ae	ca		               dex
.12af	e0 10		hline          cpx  #vlinepos
.12b1	10 03		               bpl  notyet
.12b3	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.12b6	e0 00		notyet         cpx  #$00
.12b8	d0 ee		               bne  nextl
.12ba	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.12bc	85 fb		               sta  zpage1
.12be	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.12c0	85 fc		               sta  zpage1+1
.12c2	a0 00		               ldy  #0
.12c4	a9 72		               lda  #114
.12c6	91 fb		               sta  (zpage1),y
.12c8	20 58 13	               jsr  zp1add40
.12cb	a2 12		               ldx  #24-hline2
.12cd	a9 5d		               lda  #93
.12cf	91 fb		another93      sta  (zpage1),y
.12d1	20 58 13	               jsr  zp1add40
.12d4	ca		               dex
.12d5	d0 f8		               bne  another93
.12d7	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.12d9	85 fb		               sta  zpage1
.12db	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.12dd	85 fc		               sta  zpage1+1
.12df	a0 00		               ldy  #0
.12e1	a9 73		               lda  #115
.12e3	91 fb		               sta  (zpage1),y
.12e5	20 84 24	               jsr  pop
.12e8	60		               rts
.12e9			drawgrid
.12e9	20 49 24	               jsr  push
.12ec	20 0b 22	               jsr  screendis
.12ef	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.12f1	85 fb		               sta  zpage1
.12f3	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.12f5	85 fc		               sta  zpage1+1
.12f7	a2 08		               ldx  #8
.12f9	a9 65		nextbox        lda  #101
.12fb	a0 09		               ldy  #9
.12fd	91 fb		               sta  (zpage1),y
.12ff	88		               dey
.1300	a9 2e		               lda  #$2e
.1302	91 fb		nextcol        sta  (zpage1),y
.1304	88		               dey
.1305	d0 fb		               bne  nextcol
.1307	20 58 13	               jsr  zp1add40
.130a	ca		               dex
.130b	d0 ec		               bne  nextbox
.130d	a0 08		               ldy  #8
.130f	a9 77		               lda  #119
.1311	91 fb		nextlin        sta  (zpage1),y
.1313	88		               dey
.1314	d0 fb		               bne  nextlin
.1316	a9 3e		               lda  #$3e
.1318	8d eb 05	               sta  scrnnewram+(40*(12))+11
.131b	a9 70		               lda  #$70                     ;+
.131d	8d c4 05	               sta  scrnnewram+(40*(11))+12
.1320	a9 43		               lda  #$43                     ;-
.1322	8d c5 05	               sta  scrnnewram+(40*(11))+13
.1325	a9 6e		               lda  #$6e                     ;+
.1327	8d c6 05	               sta  scrnnewram+(40*(11))+14
.132a	a9 5d		               lda  #$5d                     ;|
.132c	8d ec 05	               sta  scrnnewram+(40*(12))+12
.132f	a9 5d		               lda  #$5d                     ;|
.1331	8d ee 05	               sta  scrnnewram+(40*(12))+14
.1334	a9 6d		               lda  #$6d                     ;+
.1336	8d 14 06	               sta  scrnnewram+(40*(13))+12
.1339	a9 43		               lda  #$43                     ;-
.133b	8d 15 06	               sta  scrnnewram+(40*(13))+13
.133e	a9 7d		               lda  #$7d                     ;+
.1340	8d 16 06	               sta  scrnnewram+(40*(13))+14
.1343	20 18 22	               jsr screenena
.1346	20 84 24	               jsr  pop
.1349	60		               rts
.134a			zp1addnum
.134a	08		               php
.134b	48		               pha
.134c	18		               clc
.134d	65 fb		               adc  zpage1
.134f	90 02		               bcc  nocarry
.1351	e6 fc		               inc  zpage1+1
.1353	85 fb		nocarry        sta  zpage1
.1355	68		               pla
.1356	28		               plp
.1357	60		               rts
.1358			zp1add40
.1358	08		               php
.1359	48		               pha
.135a	18		               clc
.135b	a5 fb		               lda  zpage1
.135d	69 28		               adc  #40
.135f	90 02		               bcc  nocarry
.1361	e6 fc		               inc  zpage1+1
.1363	85 fb		nocarry        sta  zpage1
.1365	68		               pla
.1366	28		               plp
.1367	60		               rts
.1368			delay
.1368	20 49 24	               jsr  push
.136b	a9 00		               lda  #$0
.136d	aa		               tax
.136e	a8		               tay
.136f	ca		xagain         dex
.1370	ca		               dex
.1371	88		yagain         dey
.1372	c0 00		               cpy  #$00
.1374	d0 fb		               bne  yagain
.1376	e0 00		               cpx  #$00
.1378	d0 f5		               bne  xagain
.137a	20 84 24	               jsr  pop
.137d	60		               rts
.137e			f1action
.137e	48		               pha
.137f	a9 ff		               lda  #$ff
.1381	8d 9f 09	               sta  editmode
.1384	ad a0 09	               lda  fkeyset
.1387	f0 03		               beq  menua
.1389	4c 43 14	               jmp  menub
.138c			menua
.138c	20 49 24	               jsr  push
.138f	a2 69		               ldx  #<blankmsg
.1391	a0 1b		               ldy  #>blankmsg
.1393	20 dd 23	               jsr  putscxy
.1396	a2 d7		               ldx  #<f1a_msg
.1398	a0 1b		               ldy  #>f1a_msg
.139a	20 dd 23	               jsr  putscxy
.139d	20 84 24	               jsr  pop
.13a0	08		               php
.13a1	48		               pha
.13a2	8a		               txa
.13a3	48		               pha
.13a4	ad 53 20	               lda  f1abutton
.13a7	48		               pha
.13a8	a9 92		               lda  #146
.13aa	8d 65 20	               sta  f1abutton+18
.13ad	a9 01		               lda  #flashcol
.13af	8d 53 20	               sta  f1abutton
.13b2	a2 53		               ldx  #<f1abutton
.13b4	a0 20		               ldy  #>f1abutton
.13b6	20 dd 23	               jsr  putscxy
.13b9	20 68 13	               jsr  delay
.13bc	a9 12		               lda  #18
.13be	8d 65 20	               sta  f1abutton+18
.13c1	68		               pla
.13c2	8d 53 20	               sta  f1abutton
.13c5	a2 53		               ldx  #<f1abutton
.13c7	a0 20		               ldy  #>f1abutton
.13c9	20 dd 23	               jsr  putscxy
.13cc	68		               pla
.13cd	aa		               tax
.13ce	68		               pla
.13cf	28		               plp
.13d0	a9 0b		               lda  #vgris
.13d2	20 0c 0c	               jsr  setmenuacolor
.13d5	a9 03		               lda  #menu1col1
.13d7	8d 53 20	               sta  f1abutton
.13da	20 82 11	               jsr  drawfkeys
.13dd	a9 0b		               lda  #vgris
.13df	8d 38 1e	               sta  redraw_msg
.13e2	20 49 24	               jsr  push
.13e5	a2 69		               ldx  #<blankmsg
.13e7	a0 1b		               ldy  #>blankmsg
.13e9	20 dd 23	               jsr  putscxy
.13ec	a2 38		               ldx  #<redraw_msg
.13ee	a0 1e		               ldy  #>redraw_msg
.13f0	20 dd 23	               jsr  putscxy
.13f3	20 84 24	               jsr  pop
.13f6	20 4d 0e	               jsr  editor
.13f9	a9 0a		               lda  #vrose
.13fb	8d 38 1e	               sta  redraw_msg
.13fe	20 49 24	               jsr  push
.1401	a2 69		               ldx  #<blankmsg
.1403	a0 1b		               ldy  #>blankmsg
.1405	20 dd 23	               jsr  putscxy
.1408	a2 38		               ldx  #<redraw_msg
.140a	a0 1e		               ldy  #>redraw_msg
.140c	20 dd 23	               jsr  putscxy
.140f	20 84 24	               jsr  pop
.1412	20 49 24	               jsr  push
.1415	a2 69		               ldx  #<blankmsg
.1417	a0 1b		               ldy  #>blankmsg
.1419	20 dd 23	               jsr  putscxy
.141c	a2 23		               ldx  #<quit_msg
.141e	a0 1e		               ldy  #>quit_msg
.1420	20 dd 23	               jsr  putscxy
.1423	20 84 24	               jsr  pop
.1426	20 49 24	               jsr  push
.1429	a2 69		               ldx  #<blankmsg
.142b	a0 1b		               ldy  #>blankmsg
.142d	20 dd 23	               jsr  putscxy
.1430	a2 7b		               ldx  #<menua_msg
.1432	a0 1d		               ldy  #>menua_msg
.1434	20 dd 23	               jsr  putscxy
.1437	20 84 24	               jsr  pop
.143a	20 c6 0b	               jsr  resetmenuacolor
.143d	20 82 11	               jsr  drawfkeys
.1440	4c 8d 14	               jmp  out
.1443			menub
.1443	20 49 24	               jsr  push
.1446	a2 69		               ldx  #<blankmsg
.1448	a0 1b		               ldy  #>blankmsg
.144a	20 dd 23	               jsr  putscxy
.144d	a2 bf		               ldx  #<f1b_msg
.144f	a0 1c		               ldy  #>f1b_msg
.1451	20 dd 23	               jsr  putscxy
.1454	20 84 24	               jsr  pop
.1457	08		               php
.1458	48		               pha
.1459	8a		               txa
.145a	48		               pha
.145b	ad 2b 21	               lda  f1bbutton
.145e	48		               pha
.145f	a9 92		               lda  #146
.1461	8d 3d 21	               sta  f1bbutton+18
.1464	a9 01		               lda  #flashcol
.1466	8d 2b 21	               sta  f1bbutton
.1469	a2 2b		               ldx  #<f1bbutton
.146b	a0 21		               ldy  #>f1bbutton
.146d	20 dd 23	               jsr  putscxy
.1470	20 68 13	               jsr  delay
.1473	a9 12		               lda  #18
.1475	8d 3d 21	               sta  f1bbutton+18
.1478	68		               pla
.1479	8d 2b 21	               sta  f1bbutton
.147c	a2 2b		               ldx  #<f1bbutton
.147e	a0 21		               ldy  #>f1bbutton
.1480	20 dd 23	               jsr  putscxy
.1483	68		               pla
.1484	aa		               tax
.1485	68		               pla
.1486	28		               plp
.1487	20 35 1b	               jsr  flipvert
.148a	20 ff 0f	               jsr  drawbitmap
.148d	68		out            pla
.148e	20 49 24	               jsr  push
.1491	a2 69		               ldx  #<blankmsg
.1493	a0 1b		               ldy  #>blankmsg
.1495	20 dd 23	               jsr  putscxy
.1498	a2 95		               ldx  #<prompt_msg
.149a	a0 1b		               ldy  #>prompt_msg
.149c	20 dd 23	               jsr  putscxy
.149f	20 84 24	               jsr  pop
.14a2	60		               rts
.14a3			f2action
.14a3	48		               pha
.14a4	a9 00		               lda  #$0
.14a6	8d 9f 09	               sta  editmode
.14a9	ad a0 09	               lda  fkeyset
.14ac	d0 4d		               bne  menub
.14ae	20 49 24	               jsr  push
.14b1	a2 69		               ldx  #<blankmsg
.14b3	a0 1b		               ldy  #>blankmsg
.14b5	20 dd 23	               jsr  putscxy
.14b8	a2 f2		               ldx  #<f2a_msg
.14ba	a0 1b		               ldy  #>f2a_msg
.14bc	20 dd 23	               jsr  putscxy
.14bf	20 84 24	               jsr  pop
.14c2	08		               php
.14c3	48		               pha
.14c4	8a		               txa
.14c5	48		               pha
.14c6	ad 6e 20	               lda  f2abutton
.14c9	48		               pha
.14ca	a9 92		               lda  #146
.14cc	8d 80 20	               sta  f2abutton+18
.14cf	a9 01		               lda  #flashcol
.14d1	8d 6e 20	               sta  f2abutton
.14d4	a2 6e		               ldx  #<f2abutton
.14d6	a0 20		               ldy  #>f2abutton
.14d8	20 dd 23	               jsr  putscxy
.14db	20 68 13	               jsr  delay
.14de	a9 12		               lda  #18
.14e0	8d 80 20	               sta  f2abutton+18
.14e3	68		               pla
.14e4	8d 6e 20	               sta  f2abutton
.14e7	a2 6e		               ldx  #<f2abutton
.14e9	a0 20		               ldy  #>f2abutton
.14eb	20 dd 23	               jsr  putscxy
.14ee	68		               pla
.14ef	aa		               tax
.14f0	68		               pla
.14f1	28		               plp
.14f2	20 72 0a	               jsr  copychar
.14f5	20 ff 0f	               jsr  drawbitmap
.14f8	4c 45 15	               jmp  out
.14fb			menub
.14fb	20 49 24	               jsr  push
.14fe	a2 69		               ldx  #<blankmsg
.1500	a0 1b		               ldy  #>blankmsg
.1502	20 dd 23	               jsr  putscxy
.1505	a2 db		               ldx  #<f2b_msg
.1507	a0 1c		               ldy  #>f2b_msg
.1509	20 dd 23	               jsr  putscxy
.150c	20 84 24	               jsr  pop
.150f	08		               php
.1510	48		               pha
.1511	8a		               txa
.1512	48		               pha
.1513	ad 46 21	               lda  f2bbutton
.1516	48		               pha
.1517	a9 92		               lda  #146
.1519	8d 58 21	               sta  f2bbutton+18
.151c	a9 01		               lda  #flashcol
.151e	8d 46 21	               sta  f2bbutton
.1521	a2 46		               ldx  #<f2bbutton
.1523	a0 21		               ldy  #>f2bbutton
.1525	20 dd 23	               jsr  putscxy
.1528	20 68 13	               jsr  delay
.152b	a9 12		               lda  #18
.152d	8d 58 21	               sta  f2bbutton+18
.1530	68		               pla
.1531	8d 46 21	               sta  f2bbutton
.1534	a2 46		               ldx  #<f2bbutton
.1536	a0 21		               ldy  #>f2bbutton
.1538	20 dd 23	               jsr  putscxy
.153b	68		               pla
.153c	aa		               tax
.153d	68		               pla
.153e	28		               plp
.153f	20 08 1b	               jsr  fliphorz
.1542	20 ff 0f	               jsr  drawbitmap
.1545	68		out            pla
.1546	20 49 24	               jsr  push
.1549	a2 69		               ldx  #<blankmsg
.154b	a0 1b		               ldy  #>blankmsg
.154d	20 dd 23	               jsr  putscxy
.1550	a2 95		               ldx  #<prompt_msg
.1552	a0 1b		               ldy  #>prompt_msg
.1554	20 dd 23	               jsr  putscxy
.1557	20 84 24	               jsr  pop
.155a	60		               rts
.155b			f3action
.155b	48		               pha
.155c	a9 00		               lda  #$0
.155e	8d 9f 09	               sta  editmode
.1561	ad a0 09	               lda  fkeyset
.1564	d0 76		               bne  menub
.1566	08		               php
.1567	48		               pha
.1568	8a		               txa
.1569	48		               pha
.156a	ad 89 20	               lda  f3abutton
.156d	48		               pha
.156e	a9 92		               lda  #146
.1570	8d 9b 20	               sta  f3abutton+18
.1573	a9 01		               lda  #flashcol
.1575	8d 89 20	               sta  f3abutton
.1578	a2 89		               ldx  #<f3abutton
.157a	a0 20		               ldy  #>f3abutton
.157c	20 dd 23	               jsr  putscxy
.157f	20 68 13	               jsr  delay
.1582	a9 12		               lda  #18
.1584	8d 9b 20	               sta  f3abutton+18
.1587	68		               pla
.1588	8d 89 20	               sta  f3abutton
.158b	a2 89		               ldx  #<f3abutton
.158d	a0 20		               ldy  #>f3abutton
.158f	20 dd 23	               jsr  putscxy
.1592	68		               pla
.1593	aa		               tax
.1594	68		               pla
.1595	28		               plp
.1596	20 49 24	               jsr  push
.1599	a2 69		               ldx  #<blankmsg
.159b	a0 1b		               ldy  #>blankmsg
.159d	20 dd 23	               jsr  putscxy
.15a0	a2 13		               ldx  #<f3a_msg
.15a2	a0 1c		               ldy  #>f3a_msg
.15a4	20 dd 23	               jsr  putscxy
.15a7	20 84 24	               jsr  pop
.15aa	20 da 28	getagain       jsr  getkey
.15ad	c9 31		               cmp  #$31
.15af	f0 0b		               beq  devok
.15b1	c9 38		               cmp  #$38
.15b3	f0 07		               beq  devok
.15b5	c9 39		               cmp  #$39
.15b7	f0 03		               beq  devok
.15b9	4c aa 15	               jmp  getagain
.15bc	8d bf 09	devok          sta  device
.15bf	20 00 0a	               jsr  getfname
.15c2	20 49 24	               jsr  push
.15c5	a2 69		               ldx  #<blankmsg
.15c7	a0 1b		               ldy  #>blankmsg
.15c9	20 dd 23	               jsr  putscxy
.15cc	a2 bb		               ldx  #<wait_msg
.15ce	a0 1b		               ldy  #>wait_msg
.15d0	20 dd 23	               jsr  putscxy
.15d3	20 84 24	               jsr  pop
.15d6	20 d3 08	               jsr  savetofile
.15d9	4c 26 16	               jmp  out
.15dc			menub
.15dc	20 49 24	               jsr  push
.15df	a2 69		               ldx  #<blankmsg
.15e1	a0 1b		               ldy  #>blankmsg
.15e3	20 dd 23	               jsr  putscxy
.15e6	a2 f9		               ldx  #<f3b_msg
.15e8	a0 1c		               ldy  #>f3b_msg
.15ea	20 dd 23	               jsr  putscxy
.15ed	20 84 24	               jsr  pop
.15f0	08		               php
.15f1	48		               pha
.15f2	8a		               txa
.15f3	48		               pha
.15f4	ad 61 21	               lda  f3bbutton
.15f7	48		               pha
.15f8	a9 92		               lda  #146
.15fa	8d 73 21	               sta  f3bbutton+18
.15fd	a9 01		               lda  #flashcol
.15ff	8d 61 21	               sta  f3bbutton
.1602	a2 61		               ldx  #<f3bbutton
.1604	a0 21		               ldy  #>f3bbutton
.1606	20 dd 23	               jsr  putscxy
.1609	20 68 13	               jsr  delay
.160c	a9 12		               lda  #18
.160e	8d 73 21	               sta  f3bbutton+18
.1611	68		               pla
.1612	8d 61 21	               sta  f3bbutton
.1615	a2 61		               ldx  #<f3bbutton
.1617	a0 21		               ldy  #>f3bbutton
.1619	20 dd 23	               jsr  putscxy
.161c	68		               pla
.161d	aa		               tax
.161e	68		               pla
.161f	28		               plp
.1620	20 93 1a	               jsr  scrollright
.1623	20 ff 0f	               jsr  drawbitmap
.1626	68		out            pla
.1627	20 49 24	               jsr  push
.162a	a2 69		               ldx  #<blankmsg
.162c	a0 1b		               ldy  #>blankmsg
.162e	20 dd 23	               jsr  putscxy
.1631	a2 95		               ldx  #<prompt_msg
.1633	a0 1b		               ldy  #>prompt_msg
.1635	20 dd 23	               jsr  putscxy
.1638	20 84 24	               jsr  pop
.163b	60		               rts
.163c			f4action
.163c	48		               pha
.163d	a9 00		               lda  #$0
.163f	8d 9f 09	               sta  editmode
.1642	ad a0 09	               lda  fkeyset
.1645	d0 79		               bne  menub
.1647	08		               php
.1648	48		               pha
.1649	8a		               txa
.164a	48		               pha
.164b	ad a4 20	               lda  f4abutton
.164e	48		               pha
.164f	a9 92		               lda  #146
.1651	8d b6 20	               sta  f4abutton+18
.1654	a9 01		               lda  #flashcol
.1656	8d a4 20	               sta  f4abutton
.1659	a2 a4		               ldx  #<f4abutton
.165b	a0 20		               ldy  #>f4abutton
.165d	20 dd 23	               jsr  putscxy
.1660	20 68 13	               jsr  delay
.1663	a9 12		               lda  #18
.1665	8d b6 20	               sta  f4abutton+18
.1668	68		               pla
.1669	8d a4 20	               sta  f4abutton
.166c	a2 a4		               ldx  #<f4abutton
.166e	a0 20		               ldy  #>f4abutton
.1670	20 dd 23	               jsr  putscxy
.1673	68		               pla
.1674	aa		               tax
.1675	68		               pla
.1676	28		               plp
.1677	20 49 24	               jsr  push
.167a	a2 69		               ldx  #<blankmsg
.167c	a0 1b		               ldy  #>blankmsg
.167e	20 dd 23	               jsr  putscxy
.1681	a2 40		               ldx  #<f4a_msg
.1683	a0 1c		               ldy  #>f4a_msg
.1685	20 dd 23	               jsr  putscxy
.1688	20 84 24	               jsr  pop
.168b	20 da 28	getagain       jsr  getkey
.168e	c9 31		               cmp  #$31
.1690	f0 0b		               beq  devok
.1692	c9 38		               cmp  #$38
.1694	f0 07		               beq  devok
.1696	c9 39		               cmp  #$39
.1698	f0 03		               beq  devok
.169a	4c 8b 16	               jmp  getagain
.169d	8d bf 09	devok          sta  device
.16a0	20 00 0a	               jsr  getfname
.16a3	20 49 24	               jsr  push
.16a6	a2 69		               ldx  #<blankmsg
.16a8	a0 1b		               ldy  #>blankmsg
.16aa	20 dd 23	               jsr  putscxy
.16ad	a2 bb		               ldx  #<wait_msg
.16af	a0 1b		               ldy  #>wait_msg
.16b1	20 dd 23	               jsr  putscxy
.16b4	20 84 24	               jsr  pop
.16b7	20 32 09	               jsr  loadfromfile
.16ba	20 c0 09	               jsr  screenredraw
.16bd	4c 0a 17	               jmp  out
.16c0			menub
.16c0	20 49 24	               jsr  push
.16c3	a2 69		               ldx  #<blankmsg
.16c5	a0 1b		               ldy  #>blankmsg
.16c7	20 dd 23	               jsr  putscxy
.16ca	a2 15		               ldx  #<f4b_msg
.16cc	a0 1d		               ldy  #>f4b_msg
.16ce	20 dd 23	               jsr  putscxy
.16d1	20 84 24	               jsr  pop
.16d4	08		               php
.16d5	48		               pha
.16d6	8a		               txa
.16d7	48		               pha
.16d8	ad 7c 21	               lda  f4bbutton
.16db	48		               pha
.16dc	a9 92		               lda  #146
.16de	8d 8e 21	               sta  f4bbutton+18
.16e1	a9 01		               lda  #flashcol
.16e3	8d 7c 21	               sta  f4bbutton
.16e6	a2 7c		               ldx  #<f4bbutton
.16e8	a0 21		               ldy  #>f4bbutton
.16ea	20 dd 23	               jsr  putscxy
.16ed	20 68 13	               jsr  delay
.16f0	a9 12		               lda  #18
.16f2	8d 8e 21	               sta  f4bbutton+18
.16f5	68		               pla
.16f6	8d 7c 21	               sta  f4bbutton
.16f9	a2 7c		               ldx  #<f4bbutton
.16fb	a0 21		               ldy  #>f4bbutton
.16fd	20 dd 23	               jsr  putscxy
.1700	68		               pla
.1701	aa		               tax
.1702	68		               pla
.1703	28		               plp
.1704	20 b8 1a	               jsr  scrollleft
.1707	20 ff 0f	               jsr  drawbitmap
.170a	68		out            pla
.170b	20 49 24	               jsr  push
.170e	a2 69		               ldx  #<blankmsg
.1710	a0 1b		               ldy  #>blankmsg
.1712	20 dd 23	               jsr  putscxy
.1715	a2 95		               ldx  #<prompt_msg
.1717	a0 1b		               ldy  #>prompt_msg
.1719	20 dd 23	               jsr  putscxy
.171c	20 84 24	               jsr  pop
.171f	60		               rts
.1720			f5action
.1720	48		               pha
.1721	a9 00		               lda  #$0
.1723	8d 9f 09	               sta  editmode
.1726	ad a0 09	               lda  fkeyset
.1729	d0 4d		               bne  menub
.172b	20 49 24	               jsr  push
.172e	a2 69		               ldx  #<blankmsg
.1730	a0 1b		               ldy  #>blankmsg
.1732	20 dd 23	               jsr  putscxy
.1735	a2 68		               ldx  #<f5a_msg
.1737	a0 1c		               ldy  #>f5a_msg
.1739	20 dd 23	               jsr  putscxy
.173c	20 84 24	               jsr  pop
.173f	08		               php
.1740	48		               pha
.1741	8a		               txa
.1742	48		               pha
.1743	ad bf 20	               lda  f5abutton
.1746	48		               pha
.1747	a9 92		               lda  #146
.1749	8d d1 20	               sta  f5abutton+18
.174c	a9 01		               lda  #flashcol
.174e	8d bf 20	               sta  f5abutton
.1751	a2 bf		               ldx  #<f5abutton
.1753	a0 20		               ldy  #>f5abutton
.1755	20 dd 23	               jsr  putscxy
.1758	20 68 13	               jsr  delay
.175b	a9 12		               lda  #18
.175d	8d d1 20	               sta  f5abutton+18
.1760	68		               pla
.1761	8d bf 20	               sta  f5abutton
.1764	a2 bf		               ldx  #<f5abutton
.1766	a0 20		               ldy  #>f5abutton
.1768	20 dd 23	               jsr  putscxy
.176b	68		               pla
.176c	aa		               tax
.176d	68		               pla
.176e	28		               plp
.176f	20 e6 1a	               jsr  clearchar
.1772	20 ff 0f	               jsr  drawbitmap
.1775	4c c2 17	               jmp  out
.1778			menub
.1778	20 49 24	               jsr  push
.177b	a2 69		               ldx  #<blankmsg
.177d	a0 1b		               ldy  #>blankmsg
.177f	20 dd 23	               jsr  putscxy
.1782	a2 31		               ldx  #<f5b_msg
.1784	a0 1d		               ldy  #>f5b_msg
.1786	20 dd 23	               jsr  putscxy
.1789	20 84 24	               jsr  pop
.178c	08		               php
.178d	48		               pha
.178e	8a		               txa
.178f	48		               pha
.1790	ad 97 21	               lda  f5bbutton
.1793	48		               pha
.1794	a9 92		               lda  #146
.1796	8d a9 21	               sta  f5bbutton+18
.1799	a9 01		               lda  #flashcol
.179b	8d 97 21	               sta  f5bbutton
.179e	a2 97		               ldx  #<f5bbutton
.17a0	a0 21		               ldy  #>f5bbutton
.17a2	20 dd 23	               jsr  putscxy
.17a5	20 68 13	               jsr  delay
.17a8	a9 12		               lda  #18
.17aa	8d a9 21	               sta  f5bbutton+18
.17ad	68		               pla
.17ae	8d 97 21	               sta  f5bbutton
.17b1	a2 97		               ldx  #<f5bbutton
.17b3	a0 21		               ldy  #>f5bbutton
.17b5	20 dd 23	               jsr  putscxy
.17b8	68		               pla
.17b9	aa		               tax
.17ba	68		               pla
.17bb	28		               plp
.17bc	20 21 1a	               jsr  scrollup
.17bf	20 ff 0f	               jsr  drawbitmap
.17c2	68		out            pla
.17c3	20 49 24	               jsr  push
.17c6	a2 69		               ldx  #<blankmsg
.17c8	a0 1b		               ldy  #>blankmsg
.17ca	20 dd 23	               jsr  putscxy
.17cd	a2 95		               ldx  #<prompt_msg
.17cf	a0 1b		               ldy  #>prompt_msg
.17d1	20 dd 23	               jsr  putscxy
.17d4	20 84 24	               jsr  pop
.17d7	60		               rts
.17d8			f6action
.17d8	48		               pha
.17d9	a9 00		               lda  #$0
.17db	8d 9f 09	               sta  editmode
.17de	ad a0 09	               lda  fkeyset
.17e1	d0 4d		               bne  menub
.17e3	20 49 24	               jsr  push
.17e6	a2 69		               ldx  #<blankmsg
.17e8	a0 1b		               ldy  #>blankmsg
.17ea	20 dd 23	               jsr  putscxy
.17ed	a2 84		               ldx  #<f6a_msg
.17ef	a0 1c		               ldy  #>f6a_msg
.17f1	20 dd 23	               jsr  putscxy
.17f4	20 84 24	               jsr  pop
.17f7	08		               php
.17f8	48		               pha
.17f9	8a		               txa
.17fa	48		               pha
.17fb	ad da 20	               lda  f6abutton
.17fe	48		               pha
.17ff	a9 92		               lda  #146
.1801	8d ec 20	               sta  f6abutton+18
.1804	a9 01		               lda  #flashcol
.1806	8d da 20	               sta  f6abutton
.1809	a2 da		               ldx  #<f6abutton
.180b	a0 20		               ldy  #>f6abutton
.180d	20 dd 23	               jsr  putscxy
.1810	20 68 13	               jsr  delay
.1813	a9 12		               lda  #18
.1815	8d ec 20	               sta  f6abutton+18
.1818	68		               pla
.1819	8d da 20	               sta  f6abutton
.181c	a2 da		               ldx  #<f6abutton
.181e	a0 20		               ldy  #>f6abutton
.1820	20 dd 23	               jsr  putscxy
.1823	68		               pla
.1824	aa		               tax
.1825	68		               pla
.1826	28		               plp
.1827	20 da 1a	               jsr  fillchar
.182a	20 ff 0f	               jsr  drawbitmap
.182d	4c 7a 18	               jmp  out
.1830			menub
.1830	20 49 24	               jsr  push
.1833	a2 69		               ldx  #<blankmsg
.1835	a0 1b		               ldy  #>blankmsg
.1837	20 dd 23	               jsr  putscxy
.183a	a2 4b		               ldx  #<f6b_msg
.183c	a0 1d		               ldy  #>f6b_msg
.183e	20 dd 23	               jsr  putscxy
.1841	20 84 24	               jsr  pop
.1844	08		               php
.1845	48		               pha
.1846	8a		               txa
.1847	48		               pha
.1848	ad b2 21	               lda  f6bbutton
.184b	48		               pha
.184c	a9 92		               lda  #146
.184e	8d c4 21	               sta  f6bbutton+18
.1851	a9 01		               lda  #flashcol
.1853	8d b2 21	               sta  f6bbutton
.1856	a2 b2		               ldx  #<f6bbutton
.1858	a0 21		               ldy  #>f6bbutton
.185a	20 dd 23	               jsr  putscxy
.185d	20 68 13	               jsr  delay
.1860	a9 12		               lda  #18
.1862	8d c4 21	               sta  f6bbutton+18
.1865	68		               pla
.1866	8d b2 21	               sta  f6bbutton
.1869	a2 b2		               ldx  #<f6bbutton
.186b	a0 21		               ldy  #>f6bbutton
.186d	20 dd 23	               jsr  putscxy
.1870	68		               pla
.1871	aa		               tax
.1872	68		               pla
.1873	28		               plp
.1874	20 59 1a	               jsr  scrolldown
.1877	20 ff 0f	               jsr  drawbitmap
.187a	68		out            pla
.187b	20 49 24	               jsr  push
.187e	a2 69		               ldx  #<blankmsg
.1880	a0 1b		               ldy  #>blankmsg
.1882	20 dd 23	               jsr  putscxy
.1885	a2 95		               ldx  #<prompt_msg
.1887	a0 1b		               ldy  #>prompt_msg
.1889	20 dd 23	               jsr  putscxy
.188c	20 84 24	               jsr  pop
.188f	60		               rts
.1890			f7action
.1890	48		               pha
.1891	a9 00		               lda  #$0
.1893	8d 9f 09	               sta  editmode
.1896	ad a0 09	               lda  fkeyset
.1899	d0 4d		               bne  menub
.189b	20 49 24	               jsr  push
.189e	a2 69		               ldx  #<blankmsg
.18a0	a0 1b		               ldy  #>blankmsg
.18a2	20 dd 23	               jsr  putscxy
.18a5	a2 a1		               ldx  #<f7a_msg
.18a7	a0 1c		               ldy  #>f7a_msg
.18a9	20 dd 23	               jsr  putscxy
.18ac	20 84 24	               jsr  pop
.18af	08		               php
.18b0	48		               pha
.18b1	8a		               txa
.18b2	48		               pha
.18b3	ad f5 20	               lda  f7abutton
.18b6	48		               pha
.18b7	a9 92		               lda  #146
.18b9	8d 07 21	               sta  f7abutton+18
.18bc	a9 01		               lda  #flashcol
.18be	8d f5 20	               sta  f7abutton
.18c1	a2 f5		               ldx  #<f7abutton
.18c3	a0 20		               ldy  #>f7abutton
.18c5	20 dd 23	               jsr  putscxy
.18c8	20 68 13	               jsr  delay
.18cb	a9 12		               lda  #18
.18cd	8d 07 21	               sta  f7abutton+18
.18d0	68		               pla
.18d1	8d f5 20	               sta  f7abutton
.18d4	a2 f5		               ldx  #<f7abutton
.18d6	a0 20		               ldy  #>f7abutton
.18d8	20 dd 23	               jsr  putscxy
.18db	68		               pla
.18dc	aa		               tax
.18dd	68		               pla
.18de	28		               plp
.18df	20 d2 10	               jsr  copycharset
.18e2	20 ff 0f	               jsr  drawbitmap
.18e5	4c 37 19	               jmp  out
.18e8	a9 00		menub          lda  #$0
.18ea	8d 9f 09	               sta  editmode
.18ed	20 49 24	               jsr  push
.18f0	a2 69		               ldx  #<blankmsg
.18f2	a0 1b		               ldy  #>blankmsg
.18f4	20 dd 23	               jsr  putscxy
.18f7	a2 64		               ldx  #<f7b_msg
.18f9	a0 1d		               ldy  #>f7b_msg
.18fb	20 dd 23	               jsr  putscxy
.18fe	20 84 24	               jsr  pop
.1901	08		               php
.1902	48		               pha
.1903	8a		               txa
.1904	48		               pha
.1905	ad cd 21	               lda  f7bbutton
.1908	48		               pha
.1909	a9 92		               lda  #146
.190b	8d df 21	               sta  f7bbutton+18
.190e	a9 01		               lda  #flashcol
.1910	8d cd 21	               sta  f7bbutton
.1913	a2 cd		               ldx  #<f7bbutton
.1915	a0 21		               ldy  #>f7bbutton
.1917	20 dd 23	               jsr  putscxy
.191a	20 68 13	               jsr  delay
.191d	a9 12		               lda  #18
.191f	8d df 21	               sta  f7bbutton+18
.1922	68		               pla
.1923	8d cd 21	               sta  f7bbutton
.1926	a2 cd		               ldx  #<f7bbutton
.1928	a0 21		               ldy  #>f7bbutton
.192a	20 dd 23	               jsr  putscxy
.192d	68		               pla
.192e	aa		               tax
.192f	68		               pla
.1930	28		               plp
.1931	20 01 1a	               jsr  reverse
.1934	20 ff 0f	               jsr  drawbitmap
.1937	68		out            pla
.1938	20 49 24	               jsr  push
.193b	a2 69		               ldx  #<blankmsg
.193d	a0 1b		               ldy  #>blankmsg
.193f	20 dd 23	               jsr  putscxy
.1942	a2 95		               ldx  #<prompt_msg
.1944	a0 1b		               ldy  #>prompt_msg
.1946	20 dd 23	               jsr  putscxy
.1949	20 84 24	               jsr  pop
.194c	60		               rts
.194d			f8action
.194d	48		               pha
.194e	a9 00		               lda  #$0
.1950	8d 9f 09	               sta  editmode
.1953	ad a0 09	               lda  fkeyset
.1956	d0 47		               bne  menub
.1958	20 49 24	               jsr  push
.195b	a2 69		               ldx  #<blankmsg
.195d	a0 1b		               ldy  #>blankmsg
.195f	20 dd 23	               jsr  putscxy
.1962	a2 a0		               ldx  #<menub_msg
.1964	a0 1d		               ldy  #>menub_msg
.1966	20 dd 23	               jsr  putscxy
.1969	20 84 24	               jsr  pop
.196c	08		               php
.196d	48		               pha
.196e	8a		               txa
.196f	48		               pha
.1970	ad 10 21	               lda  f8abutton
.1973	48		               pha
.1974	a9 92		               lda  #146
.1976	8d 22 21	               sta  f8abutton+18
.1979	a9 01		               lda  #flashcol
.197b	8d 10 21	               sta  f8abutton
.197e	a2 10		               ldx  #<f8abutton
.1980	a0 21		               ldy  #>f8abutton
.1982	20 dd 23	               jsr  putscxy
.1985	20 68 13	               jsr  delay
.1988	a9 12		               lda  #18
.198a	8d 22 21	               sta  f8abutton+18
.198d	68		               pla
.198e	8d 10 21	               sta  f8abutton
.1991	a2 10		               ldx  #<f8abutton
.1993	a0 21		               ldy  #>f8abutton
.1995	20 dd 23	               jsr  putscxy
.1998	68		               pla
.1999	aa		               tax
.199a	68		               pla
.199b	28		               plp
.199c	4c e3 19	               jmp  swapit
.199f			menub
.199f	20 49 24	               jsr  push
.19a2	a2 69		               ldx  #<blankmsg
.19a4	a0 1b		               ldy  #>blankmsg
.19a6	20 dd 23	               jsr  putscxy
.19a9	a2 7b		               ldx  #<menua_msg
.19ab	a0 1d		               ldy  #>menua_msg
.19ad	20 dd 23	               jsr  putscxy
.19b0	20 84 24	               jsr  pop
.19b3	08		               php
.19b4	48		               pha
.19b5	8a		               txa
.19b6	48		               pha
.19b7	ad e8 21	               lda  f8bbutton
.19ba	48		               pha
.19bb	a9 92		               lda  #146
.19bd	8d fa 21	               sta  f8bbutton+18
.19c0	a9 01		               lda  #flashcol
.19c2	8d e8 21	               sta  f8bbutton
.19c5	a2 e8		               ldx  #<f8bbutton
.19c7	a0 21		               ldy  #>f8bbutton
.19c9	20 dd 23	               jsr  putscxy
.19cc	20 68 13	               jsr  delay
.19cf	a9 12		               lda  #18
.19d1	8d fa 21	               sta  f8bbutton+18
.19d4	68		               pla
.19d5	8d e8 21	               sta  f8bbutton
.19d8	a2 e8		               ldx  #<f8bbutton
.19da	a0 21		               ldy  #>f8bbutton
.19dc	20 dd 23	               jsr  putscxy
.19df	68		               pla
.19e0	aa		               tax
.19e1	68		               pla
.19e2	28		               plp
.19e3	49 ff		swapit         eor  #$ff
.19e5	8d a0 09	               sta  fkeyset
.19e8	20 82 11	               jsr  drawfkeys
.19eb	68		               pla
.19ec	20 49 24	               jsr  push
.19ef	a2 69		               ldx  #<blankmsg
.19f1	a0 1b		               ldy  #>blankmsg
.19f3	20 dd 23	               jsr  putscxy
.19f6	a2 95		               ldx  #<prompt_msg
.19f8	a0 1b		               ldy  #>prompt_msg
.19fa	20 dd 23	               jsr  putscxy
.19fd	20 84 24	               jsr  pop
.1a00	60		               rts
.1a01			reverse
.1a01	20 49 24	               jsr  push
.1a04	48		               pha
.1a05	ad a5 09	               lda  mapaddr
.1a08	85 fd		               sta  $fd
.1a0a	ad a6 09	               lda  mapaddr+1
.1a0d	85 fe		               sta  $fe
.1a0f	68		               pla
.1a10	a0 00		               ldy  #$00
.1a12	b1 fd		again          lda  (zpage2),y
.1a14	49 ff		               eor  #$ff
.1a16	91 fd		               sta  (zpage2),y
.1a18	c8		               iny
.1a19	c0 08		               cpy  #$08
.1a1b	d0 f5		               bne  again
.1a1d	20 84 24	               jsr  pop
.1a20	60		               rts
.1a21			scrollup
.1a21	20 49 24	               jsr  push
.1a24	48		               pha
.1a25	ad a5 09	               lda  mapaddr
.1a28	85 fb		               sta  $fb
.1a2a	ad a6 09	               lda  mapaddr+1
.1a2d	85 fc		               sta  $fc
.1a2f	68		               pla
.1a30	48		               pha
.1a31	ad a5 09	               lda  mapaddr
.1a34	85 fd		               sta  $fd
.1a36	ad a6 09	               lda  mapaddr+1
.1a39	85 fe		               sta  $fe
.1a3b	68		               pla
.1a3c	20 b6 25	               jsr  inczp2
.1a3f	a0 00		               ldy  #$00
.1a41	b1 fb		               lda  (zpage1),y
.1a43	8d 58 1a	               sta  tmpbyte
.1a46	b1 fd		again          lda  (zpage2),y
.1a48	91 fb		               sta  (zpage1),y
.1a4a	c8		               iny
.1a4b	c0 07		               cpy  #$07
.1a4d	d0 f7		               bne  again
.1a4f	ad 58 1a	               lda  tmpbyte
.1a52	91 fb		               sta  (zpage1),y
.1a54	20 84 24	               jsr  pop
.1a57	60		               rts
>1a58	00		tmpbyte        .byte     $00
.1a59			scrolldown
.1a59	20 49 24	               jsr  push
.1a5c	48		               pha
.1a5d	ad a5 09	               lda  mapaddr
.1a60	85 fb		               sta  $fb
.1a62	ad a6 09	               lda  mapaddr+1
.1a65	85 fc		               sta  $fc
.1a67	68		               pla
.1a68	48		               pha
.1a69	ad a5 09	               lda  mapaddr
.1a6c	85 fd		               sta  $fd
.1a6e	ad a6 09	               lda  mapaddr+1
.1a71	85 fe		               sta  $fe
.1a73	68		               pla
.1a74	20 b6 25	               jsr  inczp2
.1a77	a0 07		               ldy  #$07                ;xxxxxxxx zpage1
.1a79	b1 fb		               lda  (zpage1),y          ;xxxxxxxx zpage2
.1a7b	8d 92 1a	               sta  tmpbyte             ;xxxxxxxx
.1a7e	88		again          dey                      ;xxxxxxxx
.1a7f	b1 fb		               lda  (zpage1),y          ;xxxxxxxx
.1a81	91 fd		               sta  (zpage2),y          ;xxxxxxxx
.1a83	c0 00		               cpy  #$00                ;xxxxxxxx
.1a85	d0 f7		               bne  again               ;xxxxxxxx
.1a87	a0 00		               ldy  #$00
.1a89	ad 92 1a	               lda  tmpbyte
.1a8c	91 fb		               sta  (zpage1),y
.1a8e	20 84 24	               jsr  pop
.1a91	60		               rts
>1a92	00		tmpbyte        .byte     $00
.1a93			scrollright
.1a93	20 49 24	               jsr  push
.1a96	48		               pha
.1a97	ad a5 09	               lda  mapaddr
.1a9a	85 fb		               sta  $fb
.1a9c	ad a6 09	               lda  mapaddr+1
.1a9f	85 fc		               sta  $fc
.1aa1	68		               pla
.1aa2	a0 00		               ldy  #$00
.1aa4	b1 fb		again          lda  (zpage1),y
.1aa6	18		               clc
.1aa7	6a		               ror
.1aa8	90 03		               bcc  zero
.1aaa	18		               clc
.1aab	69 80		one            adc  #$80
.1aad	91 fb		zero           sta  (zpage1),y
.1aaf	c8		               iny
.1ab0	c0 08		               cpy  #$08
.1ab2	d0 f0		               bne  again
.1ab4	20 84 24	               jsr  pop
.1ab7	60		               rts
.1ab8			scrollleft
.1ab8	20 49 24	               jsr  push
.1abb	48		               pha
.1abc	ad a5 09	               lda  mapaddr
.1abf	85 fb		               sta  $fb
.1ac1	ad a6 09	               lda  mapaddr+1
.1ac4	85 fc		               sta  $fc
.1ac6	68		               pla
.1ac7	a0 00		               ldy  #$00
.1ac9	b1 fb		again          lda  (zpage1),y
.1acb	18		               clc
.1acc	2a		               rol
.1acd	69 00		               adc  #$00
.1acf	91 fb		               sta  (zpage1),y
.1ad1	c8		               iny
.1ad2	c0 08		               cpy  #$08
.1ad4	d0 f3		               bne  again
.1ad6	20 84 24	               jsr  pop
.1ad9	60		               rts
.1ada			fillchar
.1ada	20 49 24	               jsr  push
.1add	a9 ff		               lda  #$ff
.1adf	20 f2 1a	               jsr  allsame
.1ae2	20 84 24	               jsr  pop
.1ae5	60		               rts
.1ae6			clearchar
.1ae6	20 49 24	               jsr  push
.1ae9	a9 00		               lda  #$00
.1aeb	20 f2 1a	               jsr  allsame
.1aee	20 84 24	               jsr  pop
.1af1	60		               rts
.1af2			allsame
.1af2	48		               pha
.1af3	ad a5 09	               lda  mapaddr
.1af6	85 fd		               sta  $fd
.1af8	ad a6 09	               lda  mapaddr+1
.1afb	85 fe		               sta  $fe
.1afd	68		               pla
.1afe	a0 00		               ldy  #$00
.1b00	91 fd		again          sta  (zpage2),y
.1b02	c8		               iny
.1b03	c0 08		               cpy  #$08
.1b05	d0 f9		               bne  again
.1b07	60		               rts
.1b08			fliphorz
.1b08	20 49 24	               jsr  push
.1b0b	48		               pha
.1b0c	ad a5 09	               lda  mapaddr
.1b0f	85 fd		               sta  $fd
.1b11	ad a6 09	               lda  mapaddr+1
.1b14	85 fe		               sta  $fe
.1b16	68		               pla
.1b17	a0 00		               ldy  #$00
.1b19	b1 fd		nextbyte       lda  (zpage2),y
.1b1b	a2 00		               ldx  #$00
.1b1d	2a		rolagain       rol
.1b1e	6e 34 1b	               ror  tmpbyte
.1b21	e8		               inx
.1b22	e0 08		               cpx  #$08
.1b24	30 f7		               bmi  rolagain
.1b26	ad 34 1b	               lda  tmpbyte
.1b29	91 fd		               sta  (zpage2),y
.1b2b	c8		               iny
.1b2c	c0 08		               cpy  #$08
.1b2e	30 e9		               bmi  nextbyte
.1b30	20 84 24	               jsr  pop
.1b33	60		               rts
>1b34	00		tmpbyte        .byte     $00
.1b35			flipvert
.1b35	20 49 24	               jsr  push
.1b38	48		               pha
.1b39	ad a5 09	               lda  mapaddr
.1b3c	85 fd		               sta  $fd
.1b3e	ad a6 09	               lda  mapaddr+1
.1b41	85 fe		               sta  $fe
.1b43	68		               pla
.1b44	a0 00		               ldy  #$00
.1b46	b1 fd		tostack        lda  (zpage2),y
.1b48	48		               pha
.1b49	c8		               iny
.1b4a	c0 08		               cpy  #$08
.1b4c	d0 f8		               bne  tostack
.1b4e	a0 00		               ldy  #$00
.1b50	68		fromstack      pla
.1b51	91 fd		               sta  (zpage2),y
.1b53	c8		               iny
.1b54	c0 08		               cpy  #$08
.1b56	d0 f8		               bne  fromstack
.1b58	20 84 24	               jsr  pop
.1b5b	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: strings_fr.asm

>1b5c	0a 01 05	editor_msg     .byte vrose,1,5
>1b5f	5b 45 44 49	               .null     "[editeur]"
>1b63	54 45 55 52 5d 00
>1b69	03 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>1b6d	20 20 20 20	               .null     "                                       "
>1b71	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b81	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b91	20 20 20 00
>1b95	03 00 05 92	prompt_msg     .byte     mesgcol,0,5,146
>1b99	20 55 54 49	               .null     " utilisez les clefs de fonction :"
>1b9d	4c 49 53 45 5a 20 4c 45 53 20 43 4c 45 46 53 20
>1bad	44 45 20 46 4f 4e 43 54 49 4f 4e 20 3a 00
>1bbb	03 00 05 92	wait_msg       .byte     mesgcol,0,5,146
>1bbf	20 55 4e 20	               .null     " un instant s.v.p. ... "
>1bc3	49 4e 53 54 41 4e 54 20 53 2e 56 2e 50 2e 20 2e
>1bd3	2e 2e 20 00
.1bd7			f1a_msg
>1bd7	03 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>1bdb	20 4d 4f 44	               .null     " mode edit: chr$(   )",146
>1bdf	45 20 45 44 49 54 3a 20 43 48 52 24 28 20 20 20
>1bef	29 92 00
.1bf2			f2a_msg
>1bf2	03 00 05	copy_msg       .byte     mesgcol,0,5
>1bf5	20 45 4e 54	               .null     " entez le character a copier:"
>1bf9	45 5a 20 4c 45 20 43 48 41 52 41 43 54 45 52 20
>1c09	41 20 43 4f 50 49 45 52 3a 00
.1c13			f3a_msg
>1c13	03 00 05 92	save_msg       .byte     mesgcol,0,5,146
>1c17	20 53 41 55	               .null     " sauvegarder sur quel lecteur? (1/8/9): "
>1c1b	56 45 47 41 52 44 45 52 20 53 55 52 20 51 55 45
>1c2b	4c 20 4c 45 43 54 45 55 52 3f 20 28 31 2f 38 2f
>1c3b	39 29 3a 20 00
.1c40			f4a_msg
>1c40	03 00 05 92	load_msg       .byte     mesgcol,0,5,146
>1c44	20 43 48 41	               .null     " charger de quel lecteur? (1,8,9): "
>1c48	52 47 45 52 20 44 45 20 51 55 45 4c 20 4c 45 43
>1c58	54 45 55 52 3f 20 28 31 2c 38 2c 39 29 3a 20 00
.1c68			f5a_msg
>1c68	03 00 05	clear_msg      .byte     mesgcol,0,5
>1c6b	20 45 46 46	               .null     " effacer char: chr$(   )"
>1c6f	41 43 45 52 20 43 48 41 52 3a 20 43 48 52 24 28
>1c7f	20 20 20 29 00
.1c84			f6a_msg
>1c84	03 00 05	fill_msg       .byte     mesgcol,0,5
>1c87	20 52 45 4d	               .null     " remplir char:  chr$(   )"
>1c8b	50 4c 49 52 20 43 48 41 52 3a 20 20 43 48 52 24
>1c9b	28 20 20 20 29 00
.1ca1			f7a_msg
>1ca1	03 00 05	work_msg       .byte     mesgcol,0,5
>1ca4	20 52 45 43	               .null     " recuperer les caracteres."
>1ca8	55 50 45 52 45 52 20 4c 45 53 20 43 41 52 41 43
>1cb8	54 45 52 45 53 2e 00
.1cbf			f1b_msg
>1cbf	03 00 05	invr_msg       .byte     mesgcol,0,5
>1cc2	20 42 41 53	               .null     " basculer verticalement:"
>1cc6	43 55 4c 45 52 20 56 45 52 54 49 43 41 4c 45 4d
>1cd6	45 4e 54 3a 00
.1cdb			f2b_msg
>1cdb	03 00 05	flip_msg       .byte     mesgcol,0,5
>1cde	20 42 41 53	               .null     " basculer horizontalement:"
>1ce2	43 55 4c 45 52 20 48 4f 52 49 5a 4f 4e 54 41 4c
>1cf2	45 4d 45 4e 54 3a 00
.1cf9			f3b_msg
>1cf9	03 00 05	scrollr_msg    .byte     mesgcol,0,5
>1cfc	20 44 45 46	               .null     " defiler vers la droite:"
>1d00	49 4c 45 52 20 56 45 52 53 20 4c 41 20 44 52 4f
>1d10	49 54 45 3a 00
.1d15			f4b_msg
>1d15	03 00 05	scrolll_msg    .byte     mesgcol,0,5
>1d18	20 44 45 46	               .null     " defiler vers la gauche:"
>1d1c	49 4c 45 52 20 56 45 52 53 20 4c 41 20 47 41 55
>1d2c	43 48 45 3a 00
.1d31			f5b_msg
>1d31	03 00 05	scrollu_msg    .byte     mesgcol,0,5
>1d34	20 44 45 46	               .null     " defiler vers le haut:"
>1d38	49 4c 45 52 20 56 45 52 53 20 4c 45 20 48 41 55
>1d48	54 3a 00
.1d4b			f6b_msg
>1d4b	03 00 05	scrolld_msg    .byte     mesgcol,0,5
>1d4e	20 44 45 46	               .null     " defiler vers le bas:"
>1d52	49 4c 45 52 20 56 45 52 53 20 4c 45 20 42 41 53
>1d62	3a 00
.1d64			f7b_msg
>1d64	03 00 05	rvrs_msg       .byte     mesgcol,0,5
>1d67	20 52 45 56	               .null     " reverse character:"
>1d6b	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
>1d7b	03 00 05	menua_msg      .byte     mesgcol,0,5
>1d7e	20 56 4f 55	               .null     " vous etes dirige vers le menu 1."
>1d82	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1d92	52 53 20 4c 45 20 4d 45 4e 55 20 31 2e 00
>1da0	03 00 05	menub_msg      .byte     mesgcol,0,5
>1da3	20 56 4f 55	               .null     " vous etes dirige vers le menu 2."
>1da7	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1db7	52 53 20 4c 45 20 4d 45 4e 55 20 32 2e 00
>1dc5	07 00 05	copychar_msg   .byte     vjaune,0,5
>1dc8	20 45 4e 54	               .null     " entrez le caractera a copier (?).",157,157,157
>1dcc	52 45 5a 20 4c 45 20 43 41 52 41 43 54 45 52 41
>1ddc	20 41 20 43 4f 50 49 45 52 20 28 3f 29 2e 9d 9d
>1dec	9d 00
>1dee	07 00 05	fname_msg      .byte     vjaune,0,5
>1df1	20 4e 4f 4d	               .null     " nom du fichier (6 lettres): ",$a4,$a4,$a4,$a4,$a4,$a4,".chr",157,157,157,157,157,157,157,157,157,157
>1df5	20 44 55 20 46 49 43 48 49 45 52 20 28 36 20 4c
>1e05	45 54 54 52 45 53 29 3a 20 a4 a4 a4 a4 a4 a4 2e
>1e15	43 48 52 9d 9d 9d 9d 9d 9d 9d 9d 9d 9d 00
>1e23	04 15 18 12	quit_msg       .byte     vmauve,21,24,18
>1e27	43 54 52 4c	               .text     "ctrl-x",146
>1e2b	2d 58 92
>1e2e	2d 51 55 49	               .null     "-quitter."
>1e32	54 54 45 52 2e 00
>1e38	0a 12 16 12	redraw_msg     .byte     vrose,18,22,18
>1e3c	43 54 52 4c	               .text     "ctrl-r",146
>1e40	2d 52 92
>1e43	20 52 41 46	               .null     " rafraichir."
>1e47	52 41 49 43 48 49 52 2e 00
.1e50			menu_msg
>1e50	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>1e54	43 54 52 4c	               .text     "ctrl-x",146
>1e58	2d 58 92
>1e5b	20 41 55 20	               .null     " au menu."
>1e5f	4d 45 4e 55 2e 00
>1e65	07 04 06 12	whoami0        .byte     whoamicol,4,6,18
>1e69	20 20 20 20	               .null     "                               ",146
>1e6d	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1e7d	20 20 20 20 20 20 20 20 20 20 20 92 00
>1e8a	07 04 07 12	whoami1        .byte     whoamicol,4,7,18
>1e8e	20 20 20 20	               .null     "       ",146," c h a r e d i t ",18,"       ",146
>1e92	20 20 20 92 20 43 20 48 20 41 20 52 20 45 20 44
>1ea2	20 49 20 54 20 12 20 20 20 20 20 20 20 92 00
>1eb1	07 04 08 12	whoami2        .byte     whoamicol,4,8,18
>1eb5	20 20 20 20	               .null     "                               ",146
>1eb9	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1ec9	20 20 20 20 20 20 20 20 20 20 20 92 00
>1ed6	07 04 09 12	whoami3        .byte     whoamicol,4,9,18
>1eda	20 54 49 52	               .null     " tirez de isbn : 0-942386-29-9 ",146
>1ede	45 5a 20 44 45 20 49 53 42 4e 20 3a 20 30 2d 39
>1eee	34 32 33 38 36 2d 32 39 2d 39 20 92 00
>1efb	07 04 0a 12	whoami4        .byte     whoamicol,4,10,18
>1eff	20 20 20 20	               .null     "       par john heilborn       ",146
>1f03	20 20 20 50 41 52 20 4a 4f 48 4e 20 48 45 49 4c
>1f13	42 4f 52 4e 20 20 20 20 20 20 20 92 00
>1f20	07 04 0b 12	whoami5        .byte     whoamicol,4,11,18
>1f24	20 20 20 20	               .null     "                               ",146
>1f28	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1f38	20 20 20 20 20 20 20 20 20 20 20 92 00
>1f45	07 04 0c 12	whoami6        .byte     whoamicol,4,12,18
>1f49	20 20 20 20	               .null     "     code en assembleur par    ",146
>1f4d	20 43 4f 44 45 20 45 4e 20 41 53 53 45 4d 42 4c
>1f5d	45 55 52 20 50 41 52 20 20 20 20 92 00
>1f6a	07 04 0d 12	whoami7        .byte     whoamicol,4,13,18
>1f6e	20 44 41 4e	               .null     " daniel lafrance quebec/canada ",146
>1f72	49 45 4c 20 4c 41 46 52 41 4e 43 45 20 51 55 45
>1f82	42 45 43 2f 43 41 4e 41 44 41 20 92 00
>1f8f	07 04 0e 12	whoami8        .byte     whoamicol,4,14,18
>1f93	20 20 20 20	               .null     "    version:",version,"    ",146
>1f97	56 45 52 53 49 4f 4e 3a 32 30 32 35 30 34 32 32
>1fa7	2d 32 32 34 32 30 36 20 20 20 20 92 00
>1fb4	07 04 0f 12	whoami9        .byte     whoamicol,4,15,18
>1fb8	20 20 20 20	               .null     "                               ",146
>1fbc	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1fcc	20 20 20 20 20 20 20 20 20 20 20 92 00
>1fd9	03 06 10 14	bye_msg        .byte     vcyan,6,16,20
>1fdd	20 20 20 20	               .null     "      bonjour et merci      ",146
>1fe1	20 20 42 4f 4e 4a 4f 55 52 20 45 54 20 4d 45 52
>1ff1	43 49 20 20 20 20 20 20 92 00
>1ffb	0d 05 18 12	any_msg        .byte     vvert1,5,24,18
>1fff	20 41 50 50	               .null     " appuyez une cle pour basic ",146
>2003	55 59 45 5a 20 55 4e 45 20 43 4c 45 20 50 4f 55
>2013	52 20 42 41 53 49 43 20 92 00
>201d	03 12 07	titremenu1     .byte     menu1col1,fkeyleft,f1top-2       ;133
>2020	12 20 4a 45	               .null     18," jeu de fonctions #1 ",146
>2024	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>2034	31 20 92 00
>2038	0f 12 07	titremenu2     .byte     menu2col1,fkeyleft,f1top-2       ;133
>203b	12 20 4a 45	               .null     18," jeu de fonctions #2 ",146
>203f	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>204f	32 20 92 00
>2053	03 12 09	f1abutton      .byte     menu1col1,fkeyleft,f1top       ;133
>2056	45 44 49 54	               .text     "editer carac..."
>205a	45 52 20 43 41 52 41 43 2e 2e 2e
>2065	12		               .byte     18             ; position 15
>2066	a9 20 46 31	               .null     $a9," f1 ",223,146
>206a	20 df 92 00
>206e	0e 12 0a	f2abutton      .byte     menu1col2,fkeyleft,f1top+1     ;138
>2071	43 4f 50 49	               .text     "copier un carac"
>2075	45 52 20 55 4e 20 43 41 52 41 43
>2080	12		               .byte     18   ; position 15
>2081	20 20 46 32	               .null     "  f2  ",146
>2085	20 20 92 00
>2089	03 12 0c	f3abutton      .byte     menu1col1,fkeyleft,f1top+3     ;137
>208c	53 41 56 45	               .text     "savegarder sur."
>2090	47 41 52 44 45 52 20 53 55 52 2e
>209b	12		               .byte     18            ; position 15
>209c	a9 20 46 33	               .null     $a9," f3 ",223,146
>20a0	20 df 92 00
>20a4	0e 12 0d	f4abutton      .byte     menu1col2,fkeyleft,f1top+4     ;134
>20a7	43 48 41 52	               .text     "charger de....."
>20ab	47 45 52 20 44 45 2e 2e 2e 2e 2e
>20b6	12		               .byte     18             ; position 15
>20b7	20 20 46 34	               .null     "  f4  ",146
>20bb	20 20 92 00
>20bf	03 12 0f	f5abutton      .byte     menu1col1,fkeyleft,f1top+6     ;135
>20c2	4d 45 54 54	               .text     "mettre tout a 0"
>20c6	52 45 20 54 4f 55 54 20 41 20 30
>20d1	12		               .byte     18             ; position 15
>20d2	a9 20 46 35	               .null     $a9," f5 ",223,146
>20d6	20 df 92 00
>20da	0e 12 10	f6abutton      .byte     menu1col2,fkeyleft,f1top+7    ;139
>20dd	4d 45 54 54	               .text     "mettre tout a 1"
>20e1	52 45 20 54 4f 55 54 20 41 20 31
>20ec	12		               .byte     18             ; position 15
>20ed	20 20 46 36	               .null     "  f6  ",146
>20f1	20 20 92 00
>20f5	03 12 12	f7abutton      .byte     menu1col1,fkeyleft,f1top+9    ;136
>20f8	52 45 43 55	               .text     "recuperer rom.."
>20fc	50 45 52 45 52 20 52 4f 4d 2e 2e
>2107	12		               .byte     18             ; position 15
>2108	a9 20 46 37	               .null     $a9," f7 ",223,146
>210c	20 df 92 00
>2110	0e 12 13	f8abutton      .byte     menu1col2,fkeyleft,f1top+10
>2113	41 4c 4c 45	               .text     "aller au menu2."
>2117	52 20 41 55 20 4d 45 4e 55 32 2e
>2122	12		               .byte     18             ; position 15
>2123	20 20 46 38	               .null     "  f8  ", 146
>2127	20 20 92 00
>212b	0f 12 09	f1bbutton      .byte     menu2col1,fkeyleft,f1top
>212e	42 41 53 43	               .text     "basculer vert.."
>2132	55 4c 45 52 20 56 45 52 54 2e 2e
>213d	12		               .byte     18             ; position 15
>213e	a9 20 46 31	               .null     $a9," f1 ",223,146
>2142	20 df 92 00
>2146	0c 12 0a	f2bbutton      .byte     menu2col2,fkeyleft,f1top+1
>2149	42 41 53 43	               .text     "basculer horz.."
>214d	55 4c 45 52 20 48 4f 52 5a 2e 2e
>2158	12		               .byte     18             ; position 15
>2159	20 20 46 32	               .null     "  f2  ",146
>215d	20 20 92 00
>2161	0f 12 0c	f3bbutton      .byte     menu2col1,fkeyleft,f1top+3
>2164	44 45 46 49	               .text     "defiler droite."
>2168	4c 45 52 20 44 52 4f 49 54 45 2e
>2173	12		               .byte     18             ; position 15
>2174	a9 20 46 33	               .null     $a9," f3 ",223,146
>2178	20 df 92 00
>217c	0c 12 0d	f4bbutton      .byte     menu2col2,fkeyleft,f1top+4
>217f	44 45 46 49	               .text     "defiler gauche."
>2183	4c 45 52 20 47 41 55 43 48 45 2e
>218e	12		               .byte     18             ; position 15
>218f	20 20 46 34	               .null     "  f4  ",146
>2193	20 20 92 00
>2197	0f 12 0f	f5bbutton      .byte     menu2col1,fkeyleft,f1top+6
>219a	44 45 46 49	               .text     "defiler haut..."
>219e	4c 45 52 20 48 41 55 54 2e 2e 2e
>21a9	12		               .byte     18             ; position 15
>21aa	a9 20 46 35	               .null     $a9," f5 ",223,146
>21ae	20 df 92 00
>21b2	0c 12 10	f6bbutton      .byte     menu2col2,fkeyleft,f1top+7
>21b5	44 45 46 49	               .text     "defiler bas...."
>21b9	4c 45 52 20 42 41 53 2e 2e 2e 2e
>21c4	12		               .byte     18             ; position 15
>21c5	20 20 46 36	               .null     "  f6  ",146
>21c9	20 20 92 00
>21cd	0f 12 12	f7bbutton      .byte     menu2col1,fkeyleft,f1top+9
>21d0	49 4e 56 45	               .text     "inverser bits.."
>21d4	52 53 45 52 20 42 49 54 53 2e 2e
>21df	12		               .byte     18             ; position 15
>21e0	a9 20 46 37	               .null     $a9," f7 ",223,146
>21e4	20 df 92 00
>21e8	0c 12 13	f8bbutton      .byte     menu2col2,fkeyleft,f1top+10
>21eb	41 4c 4c 45	               .text     "aller au menu1."
>21ef	52 20 41 55 20 4d 45 4e 55 31 2e
>21fa	12		               .byte     18             ; position 15
>21fb	20 20 46 38	               .null     "  f8  ", 146
>21ff	20 20 92 00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>2203	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>2207	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.220b			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-vicii.asm

.220b			screendis
.220b	08		               php
.220c	48		               pha
.220d	ad 11 d0	               lda  $d011
.2210	29 ef		               and  #%11101111
.2212	8d 11 d0	               sta  $d011
.2215	68		               pla
.2216	28		               plp
.2217	60		               rts
.2218			screenena
.2218	08		               php
.2219	48		               pha
.221a	ad 11 d0	               lda  $d011
.221d	09 10		               ora  #%00010000
.221f	8d 11 d0	               sta  $d011
.2222	68		               pla
.2223	28		               plp
.2224	60		               rts
=8192			bmpram = 8192
.2225			victohighres
.2225	08		               php
.2226	48		               pha
.2227	ad 11 d0	               lda  vicmiscfnc
.222a	09 20		               ora  #%00100000     ; 32
.222c	8d 11 d0	               sta  vicmiscfnc
.222f	ad 18 d0	               lda  vicmemptr
.2232	09 08		               ora  #%00001000     ; $08
.2234	8d 18 d0	               sta  vicmemptr
.2237	a9 ff		               lda  #$ff           ; 255
.2239	85 37		               sta  $0037
.223b	a9 1f		               lda  #$1f           ; 31
.223d	85 38		               sta  $0038
.223f	68		               pla
.2240	28		               plp
.2241	60		               rts
.2242			victonormal
.2242	08		               php
.2243	48		               pha
.2244	ad 11 d0	               lda  vicmiscfnc
.2247	29 df		               and  #%11011111     ; 233
.2249	8d 11 d0	               sta  vicmiscfnc
.224c	ad 18 d0	               lda  vicmemptr
.224f	29 f7		               and  #%11110111     ; $08
.2251	8d 18 d0	               sta  vicmemptr
.2254	a9 00		               lda  #$00
.2256	85 37		               sta  $0037
.2258	a9 a0		               lda  #$a0
.225a	85 38		               sta  $0038
.225c	20 37 23	               jsr  cls
.225f	68		               pla
.2260	28		               plp
.2261	60		               rts
.2262			vicbmpclear
.2262	20 49 24	               jsr  push
.2265	a9 04		               lda  #cmauve
.2267	20 90 22	               jsr  setvicbmpbackcol
.226a	a9 00		               lda  #<8192              ; Place le LSB de 8192 ...
.226c	85 fb		               sta  zpage1              ; ... dans le lsb de zpage1.
.226e	a9 20		               lda  #>8192              ; Place le MSB de 8192 ...
.2270	85 fc		               sta  zpage1+1            ; ... dans le Msb de zpage1.
.2272	48		               pha
.2273	a9 ff		               lda  #<$0000+(8191)
.2275	8d 61 26	               sta  loopcount
.2278	a9 1f		               lda  #>$0000+(8191)
.227a	8d 62 26	               sta  loopcount+1
.227d	68		               pla
.227e	a0 00		               ldy  #$00
.2280	a9 0f		next           lda  #$0f
.2282	91 fb		               sta  (zpage1),y
.2284	20 9e 25	               jsr  inczpage1
.2287	20 41 26	               jsr  loop
.228a	d0 f4		               bne  next
.228c	20 84 24	               jsr  pop
.228f	60		               rts
.2290			setvicbmpbackcol
.2290	20 49 24	               jsr  push
.2293	29 0f		               and  #$0f
.2295	8d c3 22	               sta  vicbmpbackcol
.2298	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.229a	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.229c	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.229e	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.22a0	48		               pha
.22a1	a9 00		               lda  #<$0000+(1024)
.22a3	8d 61 26	               sta  loopcount
.22a6	a9 04		               lda  #>$0000+(1024)
.22a8	8d 62 26	               sta  loopcount+1
.22ab	68		               pla
.22ac	a0 00		               ldy  #$00
.22ae	b1 fb		next           lda  (zpage1),y
.22b0	29 f0		               and  #$f0
.22b2	0d c3 22	               ora  vicbmpbackcol
.22b5	91 fb		               sta  (zpage1),y
.22b7	20 9e 25	               jsr  inczpage1
.22ba	20 41 26	               jsr  loop
.22bd	d0 ef		               bne  next
.22bf	20 84 24	               jsr  pop
.22c2	60		               rts
>22c3	00		vicbmpbackcol  .byte     $00
.22c4			setvicbmpforecol
.22c4	20 49 24	               jsr  push
.22c7	2a		               rol
.22c8	2a		               rol
.22c9	2a		               rol
.22ca	2a		               rol
.22cb	29 f0		               and  #$f0
.22cd	8d fb 22	               sta  vicbmpforecol
.22d0	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.22d2	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.22d4	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.22d6	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.22d8	48		               pha
.22d9	a9 00		               lda  #<$0000+(1024)
.22db	8d 61 26	               sta  loopcount
.22de	a9 04		               lda  #>$0000+(1024)
.22e0	8d 62 26	               sta  loopcount+1
.22e3	68		               pla
.22e4	a0 00		               ldy  #$00
.22e6	b1 fb		next           lda  (zpage1),y
.22e8	29 0f		               and  #$0f
.22ea	0d fb 22	               ora  vicbmpforecol
.22ed	91 fb		               sta  (zpage1),y
.22ef	20 9e 25	               jsr  inczpage1
.22f2	20 41 26	               jsr  loop
.22f5	d0 ef		               bne  next
.22f7	20 84 24	               jsr  pop
.22fa	60		               rts
>22fb	00		vicbmpforecol  .byte     $00
.22fc			bmphrcalccoords
.22fc	20 49 24	               jsr  push
.22ff	18		               clc       ; On met Carry à 0
.2300	6a		               ror       ; le bit 0 de a dans carry  ?/2
.2301	8a		               txa       ; x dans a
.2302	4a		               lsr       ; ?/4
.2303	4a		               lsr       ; ?/8 a = (ax)/8
.2304	8d 15 23	               sta  bmphrcol
.2307	98		               tya       ; Y dans a
.2308	4a		               lsr       ; ?/2
.2309	4a		               lsr       ; ?/4
.230a	4a		               lsr       ; ?/8 a=Y/8
.230b	8d 14 23	               sta  bmphrrow
.230e	48		               pha
.230f	98		               tya
.2310	20 84 24	               jsr  pop
.2313	60		               rts
.2314			vicbmpfill
>2314	00		bmphrrow       .byte     $00
>2315	00		bmphrcol       .byte     $00
>2316	00		bmphrmask      .byte     $00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.2317			scrmaninit
.2317	20 49 24	               jsr  push
.231a	a9 06		               lda  #vbleu
.231c	8d 21 d0	               sta  vicbackcol
.231f	a9 05		               lda  #vvert
.2321	8d 20 d0	               sta  vicbordcol
.2324	a9 01		               lda  #vblanc
.2326	8d 86 02	               sta  bascol
.2329	ad 00 04	               lda  scrnram
.232c	8d 00 04	               sta  scrnram
.232f	20 37 23	               jsr  cls
.2332	20 84 24	               jsr  pop
.2335	60		               rts
>2336	8e		characterset   .byte b_uppercase
.2337			cls
.2337	08		               php
.2338	48		               pha
.2339	a9 93		               lda  #$93
.233b	20 4e 23	               jsr  putch
.233e	68		               pla
.233f	28		               plp
.2340	60		               rts
.2341			putnch
.2341	08		               php
.2342	e0 00		               cpx  #$00
.2344	f0 06		               beq  out
.2346	20 d2 ff	again          jsr  $ffd2
.2349	ca		               dex
.234a	d0 fa		               bne  again
.234c	28		out            plp
.234d	60		               rts
.234e			putch
.234e	08		               php
.234f	20 d2 ff	               jsr  $ffd2
.2352	28		               plp
.2353	60		               rts
.2354			puts
.2354	20 49 24	               jsr  push
.2357	86 fb		               stx  zpage1
.2359	84 fc		               sty  zpage1+1
.235b	a0 00		               ldy  #0
.235d	b1 fb		next           lda  (zpage1),y
.235f	f0 09		               beq  exit
.2361	20 4e 23	               jsr  putch
.2364	20 9e 25	               jsr  inczp1
.2367	4c 5d 23	               jmp  next
.236a	20 84 24	exit           jsr  pop
.236d	60		               rts
.236e			gotoxy
.236e	08		               php
.236f	18		               clc
.2370	8a		               txa
.2371	48		               pha
.2372	98		               tya
.2373	aa		               tax
.2374	68		               pla
.2375	a8		               tay
.2376	20 f0 ff	               jsr  kplot
.2379	28		               plp
.237a	60		               rts
.237b			cursor
=$0286			bascol    =    $0286
.237b	08		               php            ;tourlou
.237c	48		               pha
.237d	90 12		               bcc  restore
.237f	20 f0 ff	               jsr  kplot
.2382	8c a3 23	               sty  cx
.2385	8e a4 23	               stx  cy
.2388	ad 86 02	               lda  bascol
.238b	8d a5 23	               sta  bcol
.238e	4c a0 23	               jmp  out
.2391	ae a4 23	restore        ldx  cy
.2394	ac a3 23	               ldy  cx
.2397	20 f0 ff	               jsr  kplot
.239a	ad a5 23	               lda  bcol
.239d	8d 86 02	               sta  bascol
.23a0	68		out            pla
.23a1	28		               plp
.23a2	60		               rts
>23a3	00		cx   .byte     $00
>23a4	00		cy   .byte     $00
>23a5	00		bcol .byte     $00
.23a6			cursave
.23a6	08		               php
.23a7	38		               sec
.23a8	20 7b 23	               jsr  cursor
.23ab	28		               plp
.23ac	60		               rts
.23ad			curput
.23ad	08		               php
.23ae	18		               clc
.23af	20 7b 23	               jsr  cursor
.23b2	28		               plp
.23b3	60		               rts
.23b4			putsxy
.23b4	20 49 24	               jsr  push
.23b7	86 fb		               stx  zpage1
.23b9	84 fc		               sty  zpage1+1
.23bb	a0 00		               ldy  #$00
.23bd	b1 fb		               lda  (zpage1),y
.23bf	aa		               tax
.23c0	20 9e 25	               jsr  inczp1
.23c3	b1 fb		               lda  (zpage1),y
.23c5	a8		               tay
.23c6	20 6e 23	               jsr  gotoxy
.23c9	20 9e 25	               jsr  inczp1
.23cc	a6 fb		               ldx  zpage1
.23ce	a4 fc		               ldy  zpage1+1
.23d0	20 54 23	               jsr  puts
.23d3	20 84 24	               jsr  pop
.23d6	60		               rts
>23d7	00 00		straddr   .word     $00
>23d9	00		px        .byte     $00
>23da	00		py        .byte     $00
>23db	00 00		zp1       .word     $00
.23dd			putscxy
.23dd	20 49 24	               jsr  push
.23e0	84 fc		               sty  zpage1+1
.23e2	86 fb		               stx  zpage1
.23e4	ad 86 02	               lda  bascol
.23e7	8d 07 24	               sta  bc
.23ea	a0 00		               ldy #$00
.23ec	b1 fb		               lda  (zpage1),y
.23ee	8d 86 02	               sta  bascol
.23f1	20 9e 25	               jsr  inczp1
.23f4	a6 fb		               ldx  zpage1
.23f6	a4 fc		               ldy  zpage1+1
.23f8	20 b4 23	               jsr  putsxy
.23fb	ad 07 24	               lda  bc
.23fe	8d 86 02	               sta  bascol
.2401	20 84 24	               jsr  pop
.2404	60		               rts
>2405	00 00		straddr  .word      $00
>2407	00		bc       .byte      $00
>2408	00 00		zp1      .word      $00
.240a			putrahex
.240a	08		               php
.240b	48		               pha
.240c	20 c9 26	               jsr  atohex
.240f	a9 68		               lda  #<a2hexstr
.2411	a0 26		               ldy  #>a2hexstr
.2413	20 54 23	               jsr  puts
.2416	68		               pla
.2417	28		               plp
.2418	60		               rts
.2419			kputrahexxy
.2419			bputrahexxy
.2419			putrahexxy
.2419	08		               php
.241a	20 c9 26	               jsr  atohex
.241d	a9 65		               lda  #<a2hexpos
.241f	a0 26		               ldy  #>a2hexpos
.2421	20 b4 23	               jsr  putsxy
.2424	68		               pla
.2425	28		               plp
.2426	60		               rts
.2427			putrahexcxy
.2427	08		               php
.2428	20 c9 26	               jsr  atohex
.242b	a9 65		               lda  #<a2hexpos
.242d	a0 26		               ldy  #>a2hexpos
.242f	20 dd 23	               jsr  putscxy
.2432	68		               pla
.2433	28		               plp
.2434	60		               rts
.2435			setinverse
.2435	48		               pha
.2436	a9 12		               lda  #$12
.2438	20 d2 ff	               jsr  $ffd2
.243b	68		               pla
.243c	60		               rts
.243d			clrinverse
.243d	48		               pha
.243e	a9 92		               lda  #$92
.2440	20 d2 ff	               jsr  $ffd2
.2443	68		               pla
.2444	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>2445	00		rp        .byte     0
>2446	00		ra        .byte     0
>2447	00 00		pc        .word     0
.2449			pushall
.2449			push
.2449	08		          php            ; stack : flg, pcl, pch
.244a	78		          sei
.244b	8d 46 24	          sta  ra        ; save a
.244e	68		          pla            ; stack : pcl, pch
.244f	8d 45 24	          sta  rp        ; save rp
.2452	68		          pla            ; stack : pch
.2453	8d 47 24	          sta  pc        ; save pcl
.2456	68		          pla            ; stack : -
.2457	8d 48 24	          sta  pc+1      ; save pch
.245a	a5 fb		          lda  zpage1    ; get zpage1 low byte
.245c	48		          pha            ; stack : zp1l
.245d	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.245f	48		          pha            ; stack : zp1h, zp1l
.2460	a5 fd		          lda  zpage2    ; get zpage2 low byte
.2462	48		          pha            ; stack : zp2l, zp1h, zp1l
.2463	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.2465	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.2466	ad 45 24	          lda  rp        ; get rp
.2469	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.246a	ad 46 24	          lda  ra        ; get a
.246d	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.246e	8a		          txa            ; get x
.246f	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.2470	98		          tya            ; get y
.2471	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2472	ad 48 24	          lda  pc+1      ; get pch
.2475	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2476	ad 47 24	          lda  pc        ; get pcl
.2479	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.247a	ad 45 24	          lda  rp        ; get rp
.247d	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.247e	ad 46 24	          lda  ra        ; get a
.2481	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2482	58		          cli
.2483	60		          rts
.2484			pullall
.2484			pull
.2484			popall
.2484			pop
.2484	78		          sei
.2485	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2486	8d 47 24	          sta  pc        ; save pcl
.2489	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.248a	8d 48 24	          sta  pc+1      ; save pch
.248d	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.248e	a8		          tay            ; set y
.248f	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.2490	aa		          tax            ; set x
.2491	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.2492	8d 46 24	          sta  ra        ; save a
.2495	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.2496	8d 45 24	          sta  rp        ; save rp
.2499	68		          pla            ; stack : zp2l, zp1h, zp1l
.249a	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.249c	68		          pla            ; stack : zp1h, zp1l
.249d	85 fd		          sta  zpage2    ; get zpage2 High byte
.249f	68		          pla            ; stack : zp1l
.24a0	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.24a2	68		          pla            ; stack :
.24a3	85 fb		          sta  zpage1    ; get zpage1 High byte
.24a5	ad 48 24	          lda  pc+1      ; get pch
.24a8	48		          pha            ; stack : pch
.24a9	ad 47 24	          lda  pc
.24ac	48		          pha            ; stack : pcl, pch
.24ad	ad 45 24	          lda  rp        ; get rp
.24b0	48		          pha            ; stack : rp, pcl, pch
.24b1	ad 46 24	          lda  ra        ; set ra
.24b4	58		          cli
.24b5	28		          plp            ; stack : pcl, pch
.24b6	60		          rts
.24b7			pushreg
.24b7	08		          php            ; stack : flg, pcl, pch
.24b8	78		          sei
.24b9	8d 46 24	          sta  ra        ; save a
.24bc	68		          pla            ; stack : pcl, pch
.24bd	8d 45 24	          sta  rp        ; save rp
.24c0	68		          pla            ; stack : pch
.24c1	8d 47 24	          sta  pc        ; save pcl
.24c4	68		          pla            ; stack : -
.24c5	8d 48 24	          sta  pc+1      ; save pch
.24c8	ad 45 24	          lda  rp        ; get rp
.24cb	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.24cc	ad 46 24	          lda  ra        ; get a
.24cf	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.24d0	8a		          txa            ; get x
.24d1	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.24d2	98		          tya            ; get y
.24d3	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.24d4	ad 48 24	          lda  pc+1      ; get pch
.24d7	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.24d8	ad 47 24	          lda  pc        ; get pcl
.24db	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.24dc	ad 45 24	          lda  rp        ; get rp
.24df	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.24e0	ad 46 24	          lda  ra        ; get a
.24e3	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.24e4	58		          cli
.24e5	60		          rts
.24e6			pullreg
.24e6			popreg
.24e6	78		          sei
.24e7	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.24e8	8d 47 24	          sta  pc        ; save pcl
.24eb	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.24ec	8d 48 24	          sta  pc+1      ; save pch
.24ef	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.24f0	a8		          tay            ; set y
.24f1	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.24f2	aa		          tax            ; set x
.24f3	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.24f4	8d 46 24	          sta  ra        ; save a
.24f7	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.24f8	8d 45 24	          sta  rp        ; save rp
.24fb	ad 48 24	          lda  pc+1      ; get pch
.24fe	48		          pha            ; stack : pch
.24ff	ad 47 24	          lda  pc
.2502	48		          pha            ; stack : pcl, pch
.2503	ad 45 24	          lda  rp        ; get rp
.2506	48		          pha            ; stack : rp, pcl, pch
.2507	ad 46 24	          lda  ra        ; set ra
.250a	58		          cli
.250b	28		          plp            ; stack : pcl, pch
.250c	60		          rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.250d			blkfill
.250d	20 49 24	bf0            jsr  push
.2510	20 cc 25	               jsr  savezp1
.2513	84 fc		               sty  zpage1+1
.2515	a0 00		               ldy  #$00
.2517	84 fb		               sty  zpage1
.2519	91 fb		bf1            sta  (zpage1),y
.251b	c8		               iny
.251c	d0 fb		               bne  bf1
.251e	20 db 25	               jsr  restzp1
.2521	20 84 24	               jsr  pop
.2524	60		               rts
.2525			memfill
.2525	20 49 24	               jsr  push
.2528	20 0d 25	mf1            jsr  blkfill
.252b	c8		               iny
.252c	ca		               dex
.252d	d0 f9		               bne  mf1
.252f	20 84 24	               jsr  pop
.2532	60		               rts
.2533			memmove
.2533	20 49 24	               jsr  push
.2536	ba		               tsx            ; On se crée un pointeur ...
.2537	8a		               txa
.2538	18		               clc
.2539	69 0b		               adc  #11
.253b	a8		               tay
.253c	a2 06		               ldx  #$06
.253e	b9 00 01	nextbyte       lda  $0100,y
.2541	99 8d 25	               sta  words,y
.2544	c8		               iny
.2545	ca		               dex
.2546	d0 f6		               bne  nextbyte
.2548	ad 8d 25	               lda  s
.254b	8d 64 25	               sta  source+1
.254e	ad 8e 25	               lda  s+1
.2551	8d 65 25	               sta  source+2
.2554	ad 8f 25	               lda  d
.2557	8d 61 25	               sta  destin+1
.255a	ad 90 25	               lda  d+1
.255d	8d 62 25	               sta  destin+2
.2560	ad ff ff	destin         lda  $ffff
.2563	8d ff ff	source         sta  $ffff
.2566	ee 61 25	               inc  destin+1
.2569	d0 03		               bne  src
.256b	ee 62 25	               inc  destin+2
.256e	ee 64 25	src            inc  source+1
.2571	d0 03		               bne  cnt
.2573	ee 65 25	               inc  source+2
.2576	ad 91 25	cnt            lda  compte
.2579	d0 08		               bne  decit
.257b	ad 92 25	               lda  compte+1
.257e	f0 09		               beq  fini
.2580	ce 92 25	               dec  compte+1
.2583	ce 91 25	decit          dec  compte
.2586	4c 60 25	               jmp  destin
.2589	20 84 24	fini           jsr  pop
.258c	60		               rts
.258d			words
>258d	00 00		s         .word     $0000
>258f	00 00		d         .word     $0000
>2591	00 00		compte    .word     $0000
.2593			decword
.2593	20 49 24	               jsr  push
.2596	86 fd		               stx  zpage2
.2598	84 fe		               sty  zpage2+1
.259a	20 84 24	               jsr  pop
.259d	60		               rts
.259e			inczpage1
.259e			inczp1
.259e	08		               php
.259f	48		               pha
.25a0	e6 fb		               inc  zpage1
.25a2	a5 fb		               lda  zpage1
.25a4	d0 02		               bne  nopage
.25a6	e6 fc		               inc  zpage1+1
.25a8	68		nopage         pla
.25a9	28		               plp
.25aa	60		               rts
.25ab			deczpage1
.25ab			deczp1
.25ab	08		                php
.25ac	48		                pha
.25ad	c6 fb		                dec  zpage1
.25af	d0 02		                bne  nopage
.25b1	c6 fc		                dec  zpage1+1
.25b3	68		nopage          pla
.25b4	28		                plp
.25b5	60		                rts
.25b6			inczpage2
.25b6			inczp2
.25b6	08		               php
.25b7	48		               pha
.25b8	e6 fd		               inc  zpage2
.25ba	a5 fd		               lda  zpage2
.25bc	d0 02		               bne  nopage
.25be	e6 fe		               inc  zpage2+1
.25c0	68		nopage         pla
.25c1	28		               plp
.25c2	60		               rts
.25c3			deczpage2
.25c3			deczp2
.25c3	08		               php
.25c4	c6 fd		               dec  zpage2
.25c6	d0 02		               bne  nopage
.25c8	c6 fe		               dec  zpage2+1
.25ca	28		nopage         plp
.25cb	60		               rts
.25cc			savezp1
.25cc	08		               php
.25cd	48		               pha
.25ce	a5 fb		               lda  zpage1
.25d0	8d 5d 26	               sta  zp1
.25d3	a5 fc		               lda  zpage1+1
.25d5	8d 5e 26	               sta  zp1+1
.25d8	68		               pla
.25d9	28		               plp
.25da	60		               rts
.25db			restzp1
.25db	08		               php
.25dc	48		               pha
.25dd	ad 5d 26	               lda zp1
.25e0	85 fb		               sta zpage1
.25e2	ad 5e 26	               lda zp1+1
.25e5	85 fc		               sta zpage1+1
.25e7	68		               pla
.25e8	28		               plp
.25e9	60		               rts
.25ea			savezp2
.25ea	08		         php
.25eb	48		         pha
.25ec	a5 fd		         lda zpage2
.25ee	8d 5f 26	         sta zp2
.25f1	a5 fe		         lda zpage2+1
.25f3	8d 60 26	         sta zp2+1
.25f6	68		         pla
.25f7	28		         plp
.25f8	60		         rts
.25f9			restzp2
.25f9	08		                php
.25fa	48		                pha
.25fb	ad 5f 26	                lda  zp2
.25fe	85 fd		                sta  zpage2
.2600	ad 60 26	                lda  zp2+1
.2603	85 fe		                sta  zpage2+1
.2605	68		                pla
.2606	28		                plp
.2607	60		                rts
.2608			xy2addr
.2608	08		                php
.2609	48		                pha
.260a	8a		                txa
.260b	48		                pha
.260c	98		                tya
.260d	48		                pha
.260e	ad 58 26	                lda     addr1+1
.2611	8d 5a 26	                sta     addr2+1
.2614	ad 57 26	                lda     addr1
.2617	8d 59 26	                sta     addr2
.261a	c0 00		                cpy     #$00
.261c	f0 0f		                beq     addx
.261e	18		moreline        clc
.261f	6d 56 26	                adc     ymult
.2622	90 03		                bcc     norepy
.2624	ee 5a 26	                inc     addr2+1
.2627	8d 59 26	norepy          sta     addr2
.262a	88		                dey
.262b	d0 f1		                bne     moreline
.262d	8a		addx            txa
.262e	18		                clc
.262f	6d 59 26	                adc     addr2
.2632	90 03		                bcc     thatsit
.2634	ee 5a 26	                inc     addr2+1
.2637	8d 59 26	thatsit         sta     addr2
.263a	68		                pla
.263b	a8		                tay
.263c	68		                pla
.263d	aa		                tax
.263e	68		                pla
.263f	28		                plp
.2640	60		                rts
.2641			loop
.2641	ce 61 26	               dec  loopcount
.2644	d0 03		               bne  norep
.2646	ce 62 26	               dec  loopcount+1
.2649	ad 61 26	norep          lda  loopcount
.264c	c9 00		               cmp  #$00
.264e	d0 05		               bne  out
.2650	4d 62 26	               eor  loopcount+1
.2653	c9 ff		               cmp  #$ff
.2655	60		out            rts
>2656	28		ymult          .byte     40
>2657	00 00		addr1          .word     $0000
>2659	00 00		addr2          .word     $0000
>265b	00 00		bytecnt        .word     $0000
>265d	00 00		zp1            .word   $0000
>265f	00 00		zp2            .word   $0000
>2661	00 00		loopcount      .word     $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>2663	01		a2hexcol       .byte     1              ; pour aputscxy
>2664	00		a2hexbkcol     .byte     %00000000
.2665			a2hexpos
>2665	00		a2hexpx        .byte     0              ; pour aputsxy
>2666	00		a2hexpy        .byte     0
>2667	24		a2hexprefix    .byte     "$"            ; pour aputs
>2668	00 00		a2hexstr       .word     $00
>266a	00 00		               .word     $00
>266c	00		               .byte     0              ; 0 end string
>266d	30 30 30 30	abin           .null     "00000000"
>2671	30 30 30 30 00
>2676	20 20 20 00	adec           .null     "   "
.267a			putahexfmtxy
.267a	20 49 24	               jsr  push
.267d	20 c9 26	               jsr  atohex
.2680	ae 65 26	               ldx  a2hexpx
.2683	ac 66 26	               ldy  a2hexpy
.2686	20 6e 23	               jsr  gotoxy
.2689	a2 67		               ldx  #<a2hexprefix
.268b	a0 26		               ldy  #>a2hexprefix
.268d	20 54 23	               jsr  puts
.2690	20 84 24	               jsr  pop
.2693	60		               rts
.2694			putahexfmt
.2694	20 49 24	               jsr  push
.2697	20 c9 26	               jsr  atohex
.269a	a2 67		               ldx  #<a2hexprefix
.269c	a0 26		               ldy  #>a2hexprefix
.269e	20 54 23	               jsr  puts
.26a1	20 84 24	               jsr  pop
.26a4	60		               rts
.26a5			putahex
.26a5	20 49 24	               jsr  push
.26a8	20 c9 26	               jsr  atohex
.26ab	a2 68		               ldx  #<a2hexstr
.26ad	a0 26		               ldy  #>a2hexstr
.26af	20 54 23	               jsr  puts
.26b2	20 84 24	               jsr  pop
.26b5	60		               rts
.26b6			nibtohex
.26b6	08		               php
.26b7	29 0f		               and  #$0f
.26b9	f8		               sed
.26ba	18		               clc
.26bb	69 90		               adc  #$90
.26bd	69 40		               adc  #$40
.26bf	d8		               cld
.26c0	28		               plp
.26c1	60		               rts
.26c2			lsra4bits
.26c2	08		               php
.26c3	4a		               lsr
.26c4	4a		               lsr
.26c5	4a		               lsr
.26c6	4a		               lsr
.26c7	28		               plp
.26c8	60		               rts
.26c9			atohex
.26c9	08		               php
.26ca	48		               pha
.26cb	48		               pha
.26cc	20 c2 26	               jsr  lsra4bits
.26cf	20 b6 26	               jsr  nibtohex
.26d2	8d 68 26	               sta  a2hexstr
.26d5	68		               pla
.26d6	20 b6 26	               jsr  nibtohex
.26d9	8d 69 26	               sta  a2hexstr+1
.26dc	a9 00		               lda  #$00                ; set end of string
.26de	8d 6a 26	               sta  a2hexstr+2
.26e1	68		               pla
.26e2	28		               plp
.26e3	60		               rts
.26e4			xy2hex
.26e4	20 49 24	               jsr  push
.26e7	20 c9 26	               jsr  atohex
.26ea	8a		               txa
.26eb	48		               pha
.26ec	20 c2 26	               jsr  lsra4bits
.26ef	20 b6 26	               jsr  nibtohex
.26f2	8d 68 26	               sta  a2hexstr
.26f5	68		               pla
.26f6	20 b6 26	               jsr  nibtohex
.26f9	8d 69 26	               sta  a2hexstr+1
.26fc	98		               tya
.26fd	48		               pha
.26fe	20 c2 26	               jsr  lsra4bits
.2701	20 b6 26	               jsr  nibtohex
.2704	8d 6a 26	               sta  a2hexstr+2
.2707	68		               pla
.2708	20 b6 26	               jsr  nibtohex
.270b	8d 6b 26	               sta  a2hexstr+3
.270e	a9 00		               lda  #$00                ; 0 ended string
.2710	8d 6c 26	               sta  a2hexstr+4
.2713	20 84 24	               jsr  pop
.2716			atobin
.2716	20 49 24	               jsr  push
.2719	a2 08		               ldx  #8
.271b	a0 00		               ldy  #0
.271d	18		               clc
.271e	2a		nextbit        rol
.271f	48		               pha
.2720	69 00		               adc  #$00
.2722	29 01		               and  #$01
.2724	20 b6 26	               jsr  nibtohex
.2727	99 6d 26	               sta  abin,y
.272a	68		               pla
.272b	c8		               iny
.272c	ca		               dex
.272d	d0 ef		               bne  nextbit
.272f	a9 00		               lda  #0
.2731	99 6d 26	               sta  abin,y
.2734	20 84 24	               jsr  pull
.2737	60		               rts
.2738			putabin
.2738	20 16 27	               jsr     atobin
.273b	20 49 24	               jsr     push
.273e	a2 6d		               ldx     #<abin
.2740	a0 26		               ldy     #>abin
.2742	20 54 23	               jsr     puts
.2745	20 84 24	               jsr     pop
.2748	60		               rts
.2749			printabin
.2749	20 49 24	               jsr     push
.274c	a2 6d		               ldx     #<abin
.274e	a0 26		               ldy     #>abin
.2750	20 54 23	               jsr     puts
.2753	20 84 24	               jsr     pop
.2756	60		               rts
.2757			putabinfmt
.2757	08		               php
.2758	48		               pha
.2759	a9 25		               lda     #"%"
.275b	20 4e 23	               jsr     putch
.275e	68		               pla
.275f	20 38 27	               jsr     putabin
.2762	28		               plp
.2763	60		               rts
.2764			putabinxy
.2764	20 6e 23	               jsr     gotoxy
.2767	20 38 27	               jsr     putabin
.276a	60		               rts
.276b			putabinfmtxy
.276b	20 6e 23	               jsr     gotoxy
.276e	20 57 27	               jsr     putabinfmt
.2771	60		               rts
.2772			atodec
.2772	20 49 24	               jsr  push
.2775	f8		               sed            ; On se place en mode décimal.
.2776	aa		               tax            ; On déplace a dans x.
.2777	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.2779	a9 00		               lda  #$00      ; 0 dans A.
.277b	18		nextbit        clc            ; Bit carry a 0.
.277c	69 01		               adc  #$01      ; Ajoute 1 a A.
.277e	90 01		               bcc  decx      ; Pas de carry, pas de report.
.2780	c8		               iny            ; On incrémente Y
.2781	ca		decx           dex            ; X=X-1
.2782	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.2784	48		               pha            ; A sur le stack.
.2785	98		               tya            ; Y dans A (MSB)
.2786	20 b6 26	               jsr  nibtohex  ; a hex petsci ...
.2789	8d 76 26	               sta  adec      ; ... dans tampon.
.278c	68		               pla            ; Récupere A
.278d	48		               pha            ;
.278e	20 b6 26	               jsr  nibtohex
.2791	8d 78 26	               sta  adec+2
.2794	68		               pla
.2795	6a		               ror
.2796	6a		               ror
.2797	6a		               ror
.2798	6a		               ror
.2799	20 b6 26	               jsr  nibtohex
.279c	8d 77 26	               sta  adec+1
.279f	d8		               cld            ; On revient en mode binaire.
.27a0	20 84 24	               jsr  pull
.27a3	60		               rts
.27a4			putadec
.27a4	20 49 24	               jsr  push
.27a7	20 72 27	               jsr  atodec
.27aa	a2 76		               ldx  #<adec
.27ac	a0 26		               ldy  #>adec+1
.27ae	20 54 23	               jsr  puts
.27b1	20 84 24	               jsr  pop
.27b4	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>27b5	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>27b9	00 00 00 00 00 00 00 00 00 0d 00 00
>27c5	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>27c9	00 00 00 00 00 00 00 00 00 00 00 00
>27d5	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>27d9	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>27e5	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>27e9	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>27f5	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>27f9	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>2805	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>2809	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>2815	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>2819	00 00 00 00 00 00 00 00 00 00 00 00
>2825	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>2829	00 00 00 00 00 00 00 00 00 00 00 00
>2835	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>2839	00 00 00 00 00 00 00 00 00 00 00 00
>2845	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>2849	00 00 00 00 00 00 00 00 00 00 00 00
>2855	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>2859	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>2865	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>2869	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>2875	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>2879	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>2885	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>2889	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>2895	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>2899	00 00 00 00 00 00 00 00 00 00 00 00
>28a5	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>28a9	00 00 00 00 00 00 00 00 00 00 00 00
.28b5			waitstop
.28b5	20 49 24	               jsr  push
.28b8	20 ed f6	wait           jsr  k_stop
.28bb	d0 fb		               bne  wait
.28bd	20 84 24	               jsr  pop
.28c0	60		               rts
.28c1			anykey
.28c1	08		               php
.28c2	48		               pha
.28c3	a5 cb		nokey          lda 203
.28c5	c9 40		               cmp #64
.28c7	f0 fa		               beq nokey
.28c9	20 cf 28	               jsr releasekey
.28cc	68		               pla
.28cd	28		               plp
.28ce	60		               rts
.28cf			releasekey
.28cf	08		               php
.28d0	48		               pha
.28d1	a5 cb		keypressed     lda 203
.28d3	c9 40		               cmp #64
.28d5	d0 fa		               bne keypressed
.28d7	68		               pla
.28d8	28		               plp
.28d9	60		               rts
.28da			getkey
.28da	20 e4 ff	again          jsr  getin
.28dd	c9 00		               cmp  #0
.28df	f0 f9		               beq  again
.28e1	60		               rts
.28e2			kbflushbuff
.28e2	08		               php
.28e3	48		               pha
.28e4	20 e4 ff	again          jsr  getin
.28e7	c9 00		               cmp  #0
.28e9	d0 f9		               bne  again
.28eb	68		               pla
.28ec	28		               plp
.28ed	60		               rts
.28ee			waitkey
.28ee	20 49 24	               jsr  push
.28f1	8d 3f 29	               sta  thekey
.28f4	20 e4 ff	nope           jsr  getin
.28f7	20 d2 ff	               jsr  chrout
.28fa	cd 3f 29	               cmp  thekey
.28fd	d0 f5		               bne  nope
.28ff	20 d2 ff	               jsr  chrout
.2902	20 84 24	               jsr  pop
.2905	60		               rts
.2906			waitspace
.2906	20 49 24	               jsr  push
.2909	a9 7f		wait           lda  #$7f  ;%01111111
.290b	8d 00 dc	               sta  $dc00
.290e	ad 01 dc	               lda  $dc01
.2911	29 10		               and  #$10  ;mask %00010000
.2913	d0 f4		               bne  wait
.2915	20 84 24	               jsr  pop
.2918			waitsstop
.2918	20 49 24	               jsr  push
.291b	20 ed f6	wait           jsr  k_stop  ;%01111111
.291e	d0 fb		               bne  wait
.2920	20 84 24	               jsr  pop
.2923			waitreturn
.2923	20 49 24	               jsr  push
.2926	ad 40 29	               lda  thecount
.2929	8d 00 04	               sta  scrnram
.292c	a9 02		               lda  #$02
.292e	8d 00 d8	               sta  colorram
.2931	20 e4 ff	nope           jsr  getin
.2934	c9 0d		nohex          cmp  #$0d
.2936	d0 f9		               bne  nope
.2938	ee 40 29	               inc  thecount
.293b	20 84 24	               jsr  pop
.293e	60		               rts
>293f	00		thekey         .byte   0
>2940	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-disk.asm

.2941			diskerror
.2941	20 49 24	               jsr  push
.2944	ad 24 2b	               lda  dsk_dev   ; Select device 8
.2947	85 ba		               sta  $ba       ;
.2949	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.294c	a9 6f		               lda  #$6f
.294e	85 b9		               sta  $b9       ;
.2950	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.2953	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.2956	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.2959	c9 0d		               cmp  #$0d      ; Is it CR ?
.295b	d0 f6		               bne  nextchar  ; No, get next char
.295d	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.2960	20 84 24	               jsr  pop
.2963	60		               rts
.2964			diskdir
.2964	20 49 24	               jsr  push
.2967	a9 24		               lda  #$24      ; L012C - Filename is "$"
.2969	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.296b	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.296d	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.296f	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.2971	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.2973	a9 01		               lda  #$01      ; L0138 - set ...
.2975	85 b7		               sta  $b7       ; L013A - ... length of current filename
.2977	ad 24 2b	               lda  dsk_dev   ; L013C - set 8 as ...
.297a	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.297c	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.297e	85 b9		               sta  $b9       ; L0142 - ... secondary address
.2980	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.2983	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...%10111010
.2985	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.2988	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.298a	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.298d	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.298f	85 90		               sta  $90       ; L0153 - ... kernal status word.
.2991	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.2993	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.2995	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.2998	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.299a	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.299c	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.299e	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.29a1	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.29a3	d0 28		               bne  exit      ; L0167
.29a5	a4 fb		               ldy  $fb       ; L0169
.29a7	88		               dey            ; L016b
.29a8	d0 e9		               bne  loop1     ; L016C - If not last, loop
.29aa	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.29ac	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.29af	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.29b1	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.29b4	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.29b7	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.29b9	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.29bb	aa		               tax            ; L017F - tfr a in x
.29bc	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.29be	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.29c1	4c b4 29	               jmp  loop3     ; L0185 - get another byte
.29c4	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.29c6	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.29c9	a0 02		               ldy  #$02      ; L018D - set Y to 2
.29cb	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.29cd	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.29d0	20 84 24	               jsr  pop
.29d3	60		               rts            ; L0194
.29d4			directory
.29d4	20 64 29	               jsr  diskdir
.29d7	20 41 29	               jsr  diskerror
.29da	60		               rts
.29db			memtofile
.29db	20 fe 2a	               jsr  dsk_putmesg
.29de	20 49 24	               jsr  push
.29e1	ad 28 2b	               lda  dsk_fnlen
.29e4	ae 26 2b	               ldx  dsk_fnptr      ; load fname addr. lbyte
.29e7	ac 27 2b	               ldy  dsk_fnptr+1
.29ea	20 bd ff	               jsr  setnam         ; call setnam
.29ed	ad 25 2b	               lda  dsk_lfsno
.29f0	ae 24 2b	               ldx  dsk_dev        ; specified device
.29f3	a0 00		skip           ldy  #$00
.29f5	20 ba ff	               jsr  setlfs         ; call setlfs
.29f8	ad 20 2b	               lda  dsk_data_s     ; put data start lbyte in stal
.29fb	85 c1		               sta  stal
.29fd	ad 21 2b	               lda  dsk_data_s+1   ; put data start hbyte in stal
.2a00	85 c2		               sta  stal+1
.2a02	ae 22 2b	               ldx  dsk_data_e     ; put data end lbyte in x
.2a05	ac 23 2b	               ldy  dsk_data_e+1   ; put data end hbyte in y
.2a08	a9 c1		               lda  #stal          ; start address located in $c1/$c2
.2a0a	20 d8 ff	               jsr  save           ; call save
.2a0d	90 00		               bcc  noerror        ; if carry set, a load error has happened
.2a0f	20 84 24	noerror        jsr  pop
.2a12	60		               rts
.2a13			filetomem
.2a13	20 49 24	               jsr push
.2a16	ad 28 2b	               lda dsk_fnlen  ; Loads filename lenght.
.2a19	ae 26 2b	               ldx dsk_fnptr  ; Points x and y to the filename
.2a1c	ac 27 2b	               ldy dsk_fnptr+1;pointer
.2a1f	20 bd ff	               jsr setnam     ; call setnam
.2a22	ad 25 2b	               lda dsk_lfsno  ; Loads Acc with the logical file number
.2a25	ae 24 2b	               ldx dsk_dev    ; default to device 8
.2a28	a0 01		               ldy #$01       ; not $01 means: load to address stored in file
.2a2a	20 ba ff	               jsr setlfs     ; call setlfs
.2a2d	a9 00		               lda #$00       ; $00 means: load to memory (not verify)
.2a2f	20 d5 ff	               jsr load       ; call load
.2a32	90 03		               bcc noerror      ; if carry set, a load error has happened
.2a34	20 3b 2a	               jsr  error
.2a37	20 84 24	noerror        jsr pop
.2a3a	60		               rts
.2a3b			error
.2a3b	20 49 24	               jsr  push
.2a3e	c9 01		isit01         cmp  #$01
.2a40	d0 07		               bne  isit02
.2a42	a2 8f		               ldx  #<dsk_emsg01
.2a44	a0 2a		               ldy  #>dsk_emsg01
.2a46	4c 80 2a	               jmp  printerror
.2a49	c9 02		isit02         cmp  #$02
.2a4b	d0 07		               bne  isit05
.2a4d	a2 a3		               ldx  #<dsk_emsg02
.2a4f	a0 2a		               ldy  #>dsk_emsg02
.2a51	4c 80 2a	               jmp  printerror
.2a54	c9 05		isit05         cmp  #$05
.2a56	d0 07		               bne  isit04
.2a58	a2 b6		               ldx  #<dsk_emsg05
.2a5a	a0 2a		               ldy  #>dsk_emsg05
.2a5c	4c 80 2a	               jmp  printerror
.2a5f	c9 04		isit04         cmp  #$04
.2a61	d0 07		               bne  isit1d
.2a63	a2 c6		               ldx  #<dsk_emsg04
.2a65	a0 2a		               ldy  #>dsk_emsg04
.2a67	4c 80 2a	               jmp  printerror
.2a6a	c9 1d		isit1d         cmp  #$1d
.2a6c	d0 07		               bne  isit00
.2a6e	a2 db		               ldx  #<dsk_emsg1d
.2a70	a0 2a		               ldy  #>dsk_emsg1d
.2a72	4c 80 2a	               jmp  printerror
.2a75	c9 00		isit00         cmp  #$00
.2a77	d0 0a		               bne  noerror
.2a79	a2 f1		               ldx  #<dsk_emsg00
.2a7b	a0 2a		               ldy  #>dsk_emsg00
.2a7d	4c 80 2a	               jmp  printerror
.2a80	20 54 23	printerror     jsr  puts
.2a83	20 84 24	noerror        jsr  pop
.2a86	60		               rts
>2a87	8d		dsk_msg1       .byte     141
>2a88	53 55 43 43	               .null     "succes"
>2a8c	45 53 00
>2a8f	8d		dsk_emsg01     .byte     141
>2a90	46 49 43 48	               .null     "fichier non ouvert"
>2a94	49 45 52 20 4e 4f 4e 20 4f 55 56 45 52 54 00
>2aa3	11		dsk_emsg02     .byte     17
>2aa4	45 52 52 45	               .null     "erreur d'ecriture"
>2aa8	55 52 20 44 27 45 43 52 49 54 55 52 45 00
>2ab6	11		dsk_emsg05     .byte     17
>2ab7	4c 45 43 54	               .null     "lecteur absent"
>2abb	45 55 52 20 41 42 53 45 4e 54 00
>2ac6	11		dsk_emsg04     .byte     17
>2ac7	46 49 43 48	               .null     "fichier introuvable"
>2acb	49 45 52 20 49 4e 54 52 4f 55 56 41 42 4c 45 00
>2adb	11		dsk_emsg1d     .byte     17
>2adc	45 52 52 45	               .null     "erreur de chargement"
>2ae0	55 52 20 44 45 20 43 48 41 52 47 45 4d 45 4e 54
>2af0	00
>2af1	11		dsk_emsg00     .byte     17
>2af2	42 52 45 41	               .null     "break error"
>2af6	4b 20 45 52 52 4f 52 00
.2afe			dsk_putmesg
.2afe	20 49 24	               jsr push
.2b01	a2 29		               ldx #<dsk_msg0
.2b03	a0 2b		               ldy #>dsk_msg0
.2b05	20 54 23	               jsr puts
.2b08	a9 20		               lda #$20
.2b0a	20 4e 23	               jsr putch
.2b0d	ae 26 2b	               ldx dsk_fnptr
.2b10	ac 27 2b	               ldy dsk_fnptr+1
.2b13	20 54 23	               jsr puts
.2b16	ad 25 2b	               lda dsk_lfsno
.2b19	20 c3 ff	               jsr close
.2b1c	20 84 24	               jsr pop
.2b1f	60		               rts
>2b20	00 00		dsk_data_s     .word     $0000     ; Data start example addresses
>2b22	00 20		dsk_data_e     .word     $2000     ; Data end
>2b24	08		dsk_dev        .byte     $08       ; Device number
>2b25	00		dsk_lfsno      .byte     $00       ; Logical file number
>2b26	00 00		dsk_fnptr      .word     $00       ; Pointer to filename
>2b28	00		dsk_fnlen      .byte     0         ; Number of character in filename.
>2b29	8d		dsk_msg0       .byte     141       ; Miscilinaous file message.
>2b2a	53 41 56 49	               .null     "saving "
>2b2e	4e 47 20 00

;******  Return to file: charedit.asm


;******  End of listing

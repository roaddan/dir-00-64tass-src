
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Wed Oct 22 19:41:00 2025

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm

="20250925-000001"	version  = "20250925-000001"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1          .word bcmd2         ;Adresse de la commande basic suivante.
>0803	01 00		               .word 1             ;Numero de la ligne Basic.
>0805	8f		               .byte $8F           ;Le token de la commande REM du Basic
>0806	20 50 52 4f	               .text " programmation assembleur sur c64."
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2e
>0828	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2          .word bcmd3         ;Adresse de la commande basic suivante.
>082b	02 00		               .word 2             ;Numero de la ligne Basic.
>082d	8f		               .byte $8F           ;Le token de la commande REM du Basic
>082e	20 50 41 52	               .text " par daniel lafrance."
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2e
>0843	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3          .word bcmd4         ;Adresse de la commande basic suivante.
>0846	03 00		               .word 3             ;Numero de la ligne Basic.
>0848	9e		               .byte $9e           ;Le token de la commande SYS du Basic
>0849	30 32 31 32	               .text format("%05d",hpgmstart)
>084d	39
>084e	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4          .word $0000         ;L'adresse de la commande Basic suivante.
.0851	20 55 08	hpgmstart     jsr   main           ; Le programme principale doit s'appeler "main"
.0854	60		              rts                  ; ... doit se rerminer par un RTS.

;******  Return to file: charedit.asm

=18			fkeyleft       =    18
=9			f1top          =    9
=$0400			scrnnewram     =    $0400
=10			charsdef       =    10
=9			grid_top       =    9
=1			grid_left      =    1
=16			grid_bot       =    grid_top + 7
=8			grid_right     =    grid_left + 7
=$0b			bordure        =    vgris
=$00			fond           =    vnoir
=$03			mesgcol        =    vcyan
=$03			menu1col1      =    vcyan
=$0e			menu1col2      =    vbleu1
=$0f			menu2col1      =    vgris2
=$0c			menu2col2      =    vgris1
=$01			flashcol       =    vblanc
=$07			whoamicol      =    vjaune
=$01			charcolor      =    vblanc
=$0f			charscolor     =    vgris2
.0855			main
.0855	20 de c3	               jsr  push
.0858	20 ab c2	               jsr  scrmaninit
.085b	08		               php
.085c	48		               pha
.085d	a9 08		               lda  #$08
.085f	20 d2 ff	               jsr  $ffd2
.0862	68		               pla
.0863	28		               plp
.0864	20 ef 0a	               jsr  drawcredits
.0867	20 aa c0	               jsr  sid_tada
.086a	20 4c c4	               jsr  pushreg
.086d	a2 60		               ldx  #<menu_msg
.086f	a0 1e		               ldy  #>menu_msg
.0871	20 75 c3	               jsr  putscxy
.0874	20 7b c4	               jsr  popreg
.0877	20 9f c1	               jsr  screendis
.087a	20 df 10	               jsr  copycharset
.087d	20 cb c2	               jsr  cls
.0880	20 c9 10	               jsr  setscreenptr
.0883	20 8a 0b	               jsr  setdefaultchar
.0886	20 3a 11	               jsr  staticscreen
.0889	20 0c 10	               jsr  drawbitmap
.088c	a9 00		               lda  #$00
.088e	8d aa 09	               sta  fkeyset
.0891	20 8f 11	               jsr  drawfkeys
.0894	a9 00		               lda  #$00
.0896	20 4c c4	               jsr  pushreg
.0899	a2 56		               ldx  #<blankmsg
.089b	a0 1b		               ldy  #>blankmsg
.089d	20 75 c3	               jsr  putscxy
.08a0	a2 82		               ldx  #<prompt_msg
.08a2	a0 1b		               ldy  #>prompt_msg
.08a4	20 75 c3	               jsr  putscxy
.08a7	20 7b c4	               jsr  popreg
.08aa	20 90 c7	               jsr  kbflushbuff
.08ad	20 ac c1	               jsr  screenena
.08b0	20 9b 0d	               jsr  keyaction
.08b3	20 cb c2	               jsr  cls
.08b6	20 ef 0a	               jsr  drawcredits
.08b9	20 4c c4	               jsr  pushreg
.08bc	a2 ee		               ldx  #<bye_msg
.08be	a0 1f		               ldy  #>bye_msg
.08c0	20 75 c3	               jsr  putscxy
.08c3	20 7b c4	               jsr  popreg
.08c6	20 4c c4	               jsr  pushreg
.08c9	a2 10		               ldx  #<any_msg
.08cb	a0 20		               ldy  #>any_msg
.08cd	20 75 c3	               jsr  putscxy
.08d0	20 7b c4	               jsr  popreg
.08d3	20 86 c7	               jsr  getkey
.08d6	20 cb c2	               jsr  cls
.08d9	20 19 c4	endmain        jsr  pop
.08dc	00		               brk
.08dd			savetofile
.08dd	20 de c3	               jsr  pushall
.08e0	a9 bb		               lda  #<fname
.08e2	8d bc ca	               sta  dsk_fnptr
.08e5	a9 09		               lda  #>fname
.08e7	8d bd ca	               sta  dsk_fnptr+1
.08ea	a9 0d		               lda  #(device-fname-1)
.08ec	8d be ca	               sta  dsk_fnlen
.08ef	ad c9 09	               lda  device
.08f2	29 0f		               and  #$0f
.08f4	8d bb ca	               sta  dsk_lfsno
.08f7	8d ba ca	               sta  dsk_dev
.08fa	a9 00		               lda  #<bitmapmem
.08fc	8d b6 ca	               sta  dsk_data_s
.08ff	a9 28		               lda  #>bitmapmem
.0901	8d b7 ca	               sta  dsk_data_s+1
.0904	a9 00		               lda  #<endofaddr
.0906	8d b8 ca	               sta  dsk_data_e
.0909	a9 48		               lda  #>endofaddr
.090b	8d b9 ca	               sta  dsk_data_e+1
.090e	20 4c c4	               jsr  pushreg
.0911	a2 56		               ldx  #<blankmsg
.0913	a0 1b		               ldy  #>blankmsg
.0915	20 75 c3	               jsr  putscxy
.0918	20 7b c4	               jsr  popreg
.091b	20 4c c4	               jsr  pushreg
.091e	a2 ae		               ldx  #<wait_msg
.0920	a0 1b		               ldy  #>wait_msg
.0922	20 75 c3	               jsr  putscxy
.0925	20 7b c4	               jsr  popreg
.0928	20 4c c4	               jsr  pushreg
.092b	a2 01		               ldx  #1
.092d	a0 04		               ldy  #4
.092f	20 02 c3	               jsr  gotoxy
.0932	20 7b c4	               jsr  popreg
.0935	20 71 c9	               jsr  memtofile
.0938	20 19 c4	               jsr  popall
.093b	60		               rts
.093c			loadfromfile
.093c	20 de c3	               jsr  pushall
.093f	a9 bb		               lda  #<fname
.0941	8d bc ca	               sta  dsk_fnptr
.0944	a9 09		               lda  #>fname
.0946	8d bd ca	               sta  dsk_fnptr+1
.0949	a9 0d		               lda  #(device-fname-1)
.094b	8d be ca	               sta  dsk_fnlen
.094e	ad c9 09	               lda  device
.0951	29 0f		               and  #$0f
.0953	8d ba ca	               sta  dsk_dev
.0956	8d bb ca	               sta  dsk_lfsno
.0959	a9 00		               lda  #<bitmapmem
.095b	8d b6 ca	               sta  dsk_data_s
.095e	a9 28		               lda  #>bitmapmem
.0960	8d b7 ca	               sta  dsk_data_s+1
.0963	a9 00		               lda  #<endofaddr
.0965	8d b8 ca	               sta  dsk_data_e
.0968	a9 48		               lda  #>endofaddr
.096a	8d b9 ca	               sta  dsk_data_e+1
.096d	20 4c c4	               jsr  pushreg
.0970	a2 56		               ldx  #<blankmsg
.0972	a0 1b		               ldy  #>blankmsg
.0974	20 75 c3	               jsr  putscxy
.0977	20 7b c4	               jsr  popreg
.097a	20 4c c4	               jsr  pushreg
.097d	a2 ae		               ldx  #<wait_msg
.097f	a0 1b		               ldy  #>wait_msg
.0981	20 75 c3	               jsr  putscxy
.0984	20 7b c4	               jsr  popreg
.0987	20 4c c4	               jsr  pushreg
.098a	a2 01		               ldx  #1
.098c	a0 04		               ldy  #4
.098e	20 02 c3	               jsr  gotoxy
.0991	20 7b c4	               jsr  popreg
.0994	20 a9 c9	               jsr  filetomem
.0997	20 19 c4	               jsr  popall
.099a	60		               rts
=10240			bitmapmem      =         charsdef * 1024     ;Calcul position ram des caracteres.
=18432			endofaddr      =         (charsdef * 1024) + (4*$800)
=61440			mstopaddr      =         $d000+(4*$800)
>099b	00 d0		startaddr      .word     $d000               ; 53248
>099d	00 f0		stopaddr       .word     mstopaddr           ; 55296
>099f	00 28		bitmapaddr     .word     bitmapmem           ; $3000, 12288
>09a1	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>09a5	08 04 02 01
>09a9	00		editmode       .byte     0
>09aa	00		fkeyset        .byte     0
>09ab	00		currentchar    .byte     0
>09ac	00		currentkey     .byte     0
>09ad	00		previouskey    .byte     0
>09ae	00		bitmapoffset   .byte     0
>09af	00 00		mapaddr        .word     0
>09b1	00 00		byteaddr       .word     0
>09b3	00 00		gridaddr       .word     0
>09b5	09		cursln         .byte     grid_top
>09b6	01		curscl         .byte     grid_left
>09b7	05 1b 03 12	pfname         .byte     vvert,27,3,18
>09bb	40 30 3a	fname          .text     "@0:"
>09be	4f 52 49 47	name           .text     "origin"
>09c2	49 4e
>09c4	2e 43 48 52	ext            .null     ".chr"
>09c8	00
>09c9	08		device         .byte     8

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm


;******  Processing file: routines.asm

.09ca			screenredraw
.09ca	20 4c c4	               jsr  pushreg
.09cd	20 9f c1	               jsr  screendis
.09d0	20 cb c2	               jsr  cls
.09d3	20 3a 11	               jsr  staticscreen
.09d6	20 0c 10	               jsr  drawbitmap
.09d9	20 8f 11	               jsr  drawfkeys
.09dc	20 4c c4	               jsr  pushreg
.09df	a2 0d		               ldx  #13
.09e1	a0 0c		               ldy  #12
.09e3	20 02 c3	               jsr  gotoxy
.09e6	20 7b c4	               jsr  popreg
.09e9	ad ac 09	               lda  currentkey
.09ec	20 e2 c2	               jsr  putch
.09ef	20 4c c4	               jsr  pushreg
.09f2	a2 56		               ldx  #<blankmsg
.09f4	a0 1b		               ldy  #>blankmsg
.09f6	20 75 c3	               jsr  putscxy
.09f9	a2 82		               ldx  #<prompt_msg
.09fb	a0 1b		               ldy  #>prompt_msg
.09fd	20 75 c3	               jsr  putscxy
.0a00	20 7b c4	               jsr  popreg
.0a03	20 ac c1	               jsr  screenena
.0a06	20 7b c4	               jsr  popreg
.0a09	60		               rts
.0a0a			getfname
.0a0a	20 4c c4	               jsr  pushreg
.0a0d	20 4c c4	               jsr  pushreg
.0a10	a2 56		               ldx  #<blankmsg
.0a12	a0 1b		               ldy  #>blankmsg
.0a14	20 75 c3	               jsr  putscxy
.0a17	a2 f7		               ldx  #<fname_msg
.0a19	a0 1d		               ldy  #>fname_msg
.0a1b	20 75 c3	               jsr  putscxy
.0a1e	20 7b c4	               jsr  popreg
.0a21	a2 00		               ldx  #$00
.0a23	8e 57 0a	               stx  count
.0a26	20 58 0a	getanother     jsr  getalphanum
.0a29	20 e2 c2	               jsr  putch
.0a2c	ae 57 0a	               ldx  count
.0a2f	9d be 09	               sta  name,x
.0a32	ee 57 0a	               inc  count
.0a35	ae 57 0a	               ldx  count
.0a38	e0 06		               cpx  #$06
.0a3a	f0 03		               beq  finish
.0a3c	4c 26 0a	               jmp  getanother
.0a3f			finish
.0a3f	20 4c c4	               jsr  pushreg
.0a42	a2 56		               ldx  #<blankmsg
.0a44	a0 1b		               ldy  #>blankmsg
.0a46	20 75 c3	               jsr  putscxy
.0a49	a2 b7		               ldx  #<pfname
.0a4b	a0 09		               ldy  #>pfname
.0a4d	20 75 c3	               jsr  putscxy
.0a50	20 7b c4	               jsr  popreg
.0a53	20 7b c4	               jsr  popreg
.0a56	60		               rts
>0a57	00		count          .byte     0
.0a58			getalphanum
.0a58	20 4c c4	               jsr  pushreg
.0a5b	20 86 c7	getanother     jsr  getkey
.0a5e	c9 30		               cmp  #$30      ; 0
.0a60	30 f9		               bmi  getanother
.0a62	c9 3a		               cmp  #$3a      ; 9+1
.0a64	30 0b		               bmi  goodone
.0a66	c9 41		isitletter     cmp  #$41      ; A
.0a68	30 f1		               bmi  getanother
.0a6a	c9 5b		               cmp  #$5b      ; Z+1
.0a6c	30 03		               bmi  goodone
.0a6e	4c 5b 0a	               jmp  getanother
.0a71	8d 7b 0a	goodone        sta  tempbyte
.0a74	20 7b c4	               jsr  popreg
.0a77	ad 7b 0a	               lda  tempbyte
.0a7a	60		               rts
>0a7b	00		tempbyte       .byte     0
.0a7c			copychar
.0a7c	20 de c3	               jsr  pushall
.0a7f	20 b8 0a	               jsr  getvalidkey
.0a82	ad 9f 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0a85	85 fb		               sta  zpage1
.0a87	ad a0 09	               lda  bitmapaddr+1
.0a8a	85 fc		               sta  zpage1+1
.0a8c	ae ee 0a	               ldx  copykey
.0a8f	bd d7 c7	               lda  asciitorom,x
.0a92	aa		               tax
.0a93	e0 00		               cpx  #$00
.0a95	f0 08		               beq  no_offset      ; sommes nous déja à 0
.0a97	a9 08		addagain       lda  #$08
.0a99	20 57 13	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0a9c	ca		               dex                 ; pour chaque caracteres
.0a9d	d0 f8		               bne  addagain
.0a9f	ad af 09	no_offset      lda  mapaddr        ; le caractere actuel
.0aa2	85 fd		               sta  zpage2         ;
.0aa4	ad b0 09	               lda  mapaddr+1      ;
.0aa7	85 fe		               sta  zpage2+1       ;
.0aa9	a0 00		               ldy  #$00
.0aab	b1 fb		nextbyte       lda  (zpage1),y
.0aad	91 fd		               sta  (zpage2),y
.0aaf	c8		               iny
.0ab0	c0 08		               cpy  #$08
.0ab2	d0 f7		               bne  nextbyte
.0ab4	20 19 c4	out            jsr  popall
.0ab7	60		               rts
.0ab8			getvalidkey
.0ab8	20 4c c4	               jsr  pushreg
.0abb	20 4c c4	               jsr  pushreg
.0abe	a2 56		               ldx  #<blankmsg
.0ac0	a0 1b		               ldy  #>blankmsg
.0ac2	20 75 c3	               jsr  putscxy
.0ac5	a2 cf		               ldx  #<copychar_msg
.0ac7	a0 1d		               ldy  #>copychar_msg
.0ac9	20 75 c3	               jsr  putscxy
.0acc	20 7b c4	               jsr  popreg
.0acf	20 86 c7	getgoodkey     jsr  getkey
.0ad2	8d ee 0a	               sta  copykey
.0ad5	aa		               tax
.0ad6	bc d7 c7	               ldy  asciitorom,x
.0ad9	c4 00		               cpy  $00
.0adb	d0 0a		               bne  goodone
.0add	ae ee 0a	               ldx  copykey
.0ae0	e0 40		               cpx  #$40
.0ae2	f0 03		               beq  goodone
.0ae4	4c cf 0a	               jmp  getgoodkey
.0ae7	20 e2 c2	goodone        jsr  putch
.0aea	20 7b c4	               jsr  popreg
.0aed	60		               rts
>0aee	00		copykey        .byte 0
.0aef			drawcredits
.0aef	20 4c c4	               jsr  pushreg
.0af2	20 cb c2	               jsr  cls
.0af5	20 4c c4	               jsr  pushreg
.0af8	a2 7a		               ldx  #<whoami0
.0afa	a0 1e		               ldy  #>whoami0
.0afc	20 75 c3	               jsr  putscxy
.0aff	20 7b c4	               jsr  popreg
.0b02	20 4c c4	               jsr  pushreg
.0b05	a2 9f		               ldx  #<whoami1
.0b07	a0 1e		               ldy  #>whoami1
.0b09	20 75 c3	               jsr  putscxy
.0b0c	20 7b c4	               jsr  popreg
.0b0f	20 4c c4	               jsr  pushreg
.0b12	a2 c6		               ldx  #<whoami2
.0b14	a0 1e		               ldy  #>whoami2
.0b16	20 75 c3	               jsr  putscxy
.0b19	20 7b c4	               jsr  popreg
.0b1c	20 4c c4	               jsr  pushreg
.0b1f	a2 eb		               ldx  #<whoami3
.0b21	a0 1e		               ldy  #>whoami3
.0b23	20 75 c3	               jsr  putscxy
.0b26	20 7b c4	               jsr  popreg
.0b29	20 4c c4	               jsr  pushreg
.0b2c	a2 10		               ldx  #<whoami4
.0b2e	a0 1f		               ldy  #>whoami4
.0b30	20 75 c3	               jsr  putscxy
.0b33	20 7b c4	               jsr  popreg
.0b36	20 4c c4	               jsr  pushreg
.0b39	a2 35		               ldx  #<whoami5
.0b3b	a0 1f		               ldy  #>whoami5
.0b3d	20 75 c3	               jsr  putscxy
.0b40	20 7b c4	               jsr  popreg
.0b43	20 4c c4	               jsr  pushreg
.0b46	a2 5a		               ldx  #<whoami6
.0b48	a0 1f		               ldy  #>whoami6
.0b4a	20 75 c3	               jsr  putscxy
.0b4d	20 7b c4	               jsr  popreg
.0b50	20 4c c4	               jsr  pushreg
.0b53	a2 7f		               ldx  #<whoami7
.0b55	a0 1f		               ldy  #>whoami7
.0b57	20 75 c3	               jsr  putscxy
.0b5a	20 7b c4	               jsr  popreg
.0b5d	20 4c c4	               jsr  pushreg
.0b60	a2 a4		               ldx  #<whoami8
.0b62	a0 1f		               ldy  #>whoami8
.0b64	20 75 c3	               jsr  putscxy
.0b67	20 7b c4	               jsr  popreg
.0b6a	20 4c c4	               jsr  pushreg
.0b6d	a2 c9		               ldx  #<whoami9
.0b6f	a0 1f		               ldy  #>whoami9
.0b71	20 75 c3	               jsr  putscxy
.0b74	20 7b c4	               jsr  popreg
.0b77	20 75 13	               jsr  delay
.0b7a	20 75 13	               jsr  delay
.0b7d	20 75 13	               jsr  delay
.0b80	20 75 13	               jsr  delay
.0b83	20 75 13	               jsr  delay
.0b86	20 7b c4	               jsr  popreg
.0b89	60		               rts
.0b8a			setdefaultchar
.0b8a	20 4c c4	               jsr  pushreg
.0b8d	a9 40		               lda  #$40
.0b8f	8d ac 09	               sta  currentkey
.0b92	aa		               tax
.0b93	bc d7 c7	               ldy  asciitorom,x
.0b96	8c ae 09	               sty  bitmapoffset
.0b99	20 54 0c	               jsr  drawkeyval
.0b9c	20 0c 10	               jsr  drawbitmap
.0b9f	20 4c c4	               jsr  pushreg
.0ba2	a2 0d		               ldx  #13
.0ba4	a0 0c		               ldy  #12
.0ba6	20 02 c3	               jsr  gotoxy
.0ba9	20 7b c4	               jsr  popreg
.0bac	20 e2 c2	               jsr  putch
.0baf	20 4c c4	               jsr  pushreg
.0bb2	a2 11		               ldx  #17
.0bb4	a0 05		               ldy  #5
.0bb6	20 02 c3	               jsr  gotoxy
.0bb9	20 7b c4	               jsr  popreg
.0bbc	20 1c c7	               jsr  atodec
.0bbf	20 4c c4	               jsr  pushreg
.0bc2	a2 19		               ldx  #<adec
.0bc4	a0 c6		               ldy  #>adec
.0bc6	20 e8 c2	               jsr  puts
.0bc9	20 7b c4	               jsr  popreg
.0bcc	20 7b c4	               jsr  popreg
.0bcf	60		               rts
.0bd0			resetmenuacolor
.0bd0	20 4c c4	               jsr  pushreg
.0bd3	a9 03		               lda  #menu1col1
.0bd5	8d 68 20	               sta  f1abutton
.0bd8	8d 9e 20	               sta  f3abutton
.0bdb	8d d4 20	               sta  f5abutton
.0bde	8d 0a 21	               sta  f7abutton
.0be1	a9 0e		               lda  #menu1col2
.0be3	8d 83 20	               sta  f2abutton
.0be6	8d b9 20	               sta  f4abutton
.0be9	8d ef 20	               sta  f6abutton
.0bec	8d 25 21	               sta  f8abutton
.0bef	20 7b c4	               jsr  popreg
.0bf2	60		               rts
.0bf3			resetmenubcolor
.0bf3	20 4c c4	               jsr  pushreg
.0bf6	a9 0f		               lda  #menu2col1
.0bf8	8d 40 21	               sta  f1bbutton
.0bfb	8d 76 21	               sta  f3bbutton
.0bfe	8d ac 21	               sta  f5bbutton
.0c01	8d e2 21	               sta  f7bbutton
.0c04	a9 0f		               lda  #menu2col1
.0c06	8d 5b 21	               sta  f2bbutton
.0c09	8d 91 21	               sta  f4bbutton
.0c0c	8d c7 21	               sta  f6bbutton
.0c0f	8d fd 21	               sta  f8bbutton
.0c12	20 7b c4	               jsr  popreg
.0c15	60		               rts
.0c16			setmenuacolor
.0c16	20 4c c4	               jsr  pushreg
.0c19	8d 68 20	               sta  f1abutton
.0c1c	8d 83 20	               sta  f2abutton
.0c1f	8d 9e 20	               sta  f3abutton
.0c22	8d b9 20	               sta  f4abutton
.0c25	8d d4 20	               sta  f5abutton
.0c28	8d ef 20	               sta  f6abutton
.0c2b	8d 0a 21	               sta  f7abutton
.0c2e	8d 25 21	               sta  f8abutton
.0c31	20 7b c4	               jsr  popreg
.0c34	60		               rts
.0c35			setmenubcolor
.0c35	20 4c c4	               jsr  pushreg
.0c38	8d 40 21	               sta  f1bbutton
.0c3b	8d 5b 21	               sta  f2bbutton
.0c3e	8d 76 21	               sta  f3bbutton
.0c41	8d 91 21	               sta  f4bbutton
.0c44	8d ac 21	               sta  f5bbutton
.0c47	8d c7 21	               sta  f6bbutton
.0c4a	8d e2 21	               sta  f7bbutton
.0c4d	8d fd 21	               sta  f8bbutton
.0c50	20 7b c4	               jsr  popreg
.0c53	60		               rts
.0c54			drawkeyval
.0c54	20 4c c4	               jsr  pushreg
.0c57	20 4c c4	               jsr  pushreg
.0c5a	a2 01		               ldx  #1
.0c5c	a0 13		               ldy  #19
.0c5e	20 02 c3	               jsr  gotoxy
.0c61	20 7b c4	               jsr  popreg
.0c64	ad ac 09	               lda  currentkey
.0c67	20 e2 c2	               jsr  putch
.0c6a	48		               pha
.0c6b	a9 3d		               lda  #'='
.0c6d	20 e2 c2	               jsr  putch
.0c70	a9 25		               lda  #'%'
.0c72	20 e2 c2	               jsr  putch
.0c75	68		               pla
.0c76	20 e2 c6	               jsr  putabin
.0c79	20 4c c4	               jsr  pushreg
.0c7c	a2 01		               ldx  #1
.0c7e	a0 14		               ldy  #20
.0c80	20 02 c3	               jsr  gotoxy
.0c83	20 7b c4	               jsr  popreg
.0c86	20 4c c4	               jsr  pushreg
.0c89	a2 55		               ldx  #<txt1
.0c8b	a0 0d		               ldy  #>txt1
.0c8d	20 e8 c2	               jsr  puts
.0c90	20 7b c4	               jsr  popreg
.0c93	a9 24		               lda  #'$'
.0c95	20 e2 c2	               jsr  putch
.0c98	ad ac 09	               lda  currentkey
.0c9b	20 48 c6	               jsr  putahex
.0c9e	20 4c c4	               jsr  pushreg
.0ca1	a2 01		               ldx  #1
.0ca3	a0 15		               ldy  #21
.0ca5	20 02 c3	               jsr  gotoxy
.0ca8	20 7b c4	               jsr  popreg
.0cab	20 4c c4	               jsr  pushreg
.0cae	a2 60		               ldx  #<txt2
.0cb0	a0 0d		               ldy  #>txt2
.0cb2	20 e8 c2	               jsr  puts
.0cb5	20 7b c4	               jsr  popreg
.0cb8	a9 24		               lda  #'$'
.0cba	20 e2 c2	               jsr  putch
.0cbd	ad a0 09	               lda  bitmapaddr+1
.0cc0	20 48 c6	               jsr  putahex
.0cc3	ad 9f 09	               lda  bitmapaddr
.0cc6	20 48 c6	               jsr  putahex
.0cc9	20 4c c4	               jsr  pushreg
.0ccc	a2 01		               ldx  #1
.0cce	a0 16		               ldy  #22
.0cd0	20 02 c3	               jsr  gotoxy
.0cd3	20 7b c4	               jsr  popreg
.0cd6	20 4c c4	               jsr  pushreg
.0cd9	a2 6b		               ldx  #<txt3
.0cdb	a0 0d		               ldy  #>txt3
.0cdd	20 e8 c2	               jsr  puts
.0ce0	20 7b c4	               jsr  popreg
.0ce3	a9 24		               lda  #'$'
.0ce5	20 e2 c2	               jsr  putch
.0ce8	ad ae 09	               lda  bitmapoffset
.0ceb	20 48 c6	               jsr  putahex
.0cee	20 4c c4	               jsr  pushreg
.0cf1	a2 01		               ldx  #1
.0cf3	a0 17		               ldy  #23
.0cf5	20 02 c3	               jsr  gotoxy
.0cf8	20 7b c4	               jsr  popreg
.0cfb	20 4c c4	               jsr  pushreg
.0cfe	a2 78		               ldx  #<txt4
.0d00	a0 0d		               ldy  #>txt4
.0d02	20 e8 c2	               jsr  puts
.0d05	20 7b c4	               jsr  popreg
.0d08	a9 24		               lda  #'$'
.0d0a	20 e2 c2	               jsr  putch
.0d0d	ad b0 09	               lda  mapaddr+1
.0d10	20 48 c6	               jsr  putahex
.0d13	ad af 09	               lda  mapaddr
.0d16	20 48 c6	               jsr  putahex
.0d19	20 4c c4	               jsr  pushreg
.0d1c	a2 01		               ldx  #1
.0d1e	a0 18		               ldy  #24
.0d20	20 02 c3	               jsr  gotoxy
.0d23	20 7b c4	               jsr  popreg
.0d26	20 4c c4	               jsr  pushreg
.0d29	a2 83		               ldx  #<txt5
.0d2b	a0 0d		               ldy  #>txt5
.0d2d	20 e8 c2	               jsr  puts
.0d30	20 7b c4	               jsr  popreg
.0d33	ad b6 09	               lda  curscl
.0d36	20 48 c6	               jsr  putahex
.0d39	a9 da		               lda  #$da
.0d3b	20 e2 c2	               jsr  putch
.0d3e	ad b5 09	               lda  cursln
.0d41	20 48 c6	               jsr  putahex
.0d44	20 7b c4	               jsr  popreg
.0d47	60		               rts
>0d48	50 45 54 53	txt0           .null     "petscii :   "
>0d4c	43 49 49 20 3a 20 20 20 00
>0d55	4b 45 59 20	txt1           .null     "key code: "
>0d59	43 4f 44 45 3a 20 00
>0d60	42 49 54 4d	txt2           .null     "bitmap..: "
>0d64	41 50 2e 2e 3a 20 00
>0d6b	4f 46 46 53	txt3           .null     "offset..:   "
>0d6f	45 54 2e 2e 3a 20 20 20 00
>0d78	4d 41 50 41	txt4           .null     "mapaddr.: "
>0d7c	44 44 52 2e 3a 20 00
>0d83	43 55 52 53	txt5           .null     "cursval.: "
>0d87	56 41 4c 2e 3a 20 00
>0d8e	53 54 41 43	txt6           .null     "stack......:"
>0d92	4b 2e 2e 2e 2e 2e 2e 3a 00
.0d9b			keyaction
.0d9b	20 4c c4	               jsr  pushreg
.0d9e	20 86 c7	keyloop        jsr  getkey
.0da1	c9 85		f1             cmp  #key_f1
.0da3	d0 03		               bne  f2
.0da5	4c 20 0e	               jmp  dof1
.0da8	c9 89		f2             cmp  #key_f2
.0daa	d0 03		               bne  f3
.0dac	4c 26 0e	               jmp  dof2
.0daf	c9 86		f3             cmp  #key_f3
.0db1	d0 03		               bne  f4
.0db3	4c 2c 0e	               jmp  dof3
.0db6	c9 8a		f4             cmp  #key_f4
.0db8	d0 03		               bne  f5
.0dba	4c 32 0e	               jmp  dof4
.0dbd	c9 87		f5             cmp  #key_f5
.0dbf	d0 03		               bne  f6
.0dc1	4c 38 0e	               jmp  dof5
.0dc4	c9 8b		f6             cmp  #key_f6
.0dc6	d0 03		               bne  f7
.0dc8	4c 3e 0e	               jmp  dof6
.0dcb	c9 88		f7             cmp  #key_f7
.0dcd	d0 03		               bne  f8
.0dcf	4c 44 0e	               jmp  dof7
.0dd2	c9 8c		f8             cmp  #key_f8
.0dd4	d0 03		               bne  ctrlx
.0dd6	4c 4a 0e	               jmp  dof8
.0dd9	c9 18		ctrlx          cmp  #ctrl_x
.0ddb	d0 03		               bne  ctrlr
.0ddd	4c 56 0e	               jmp  doquit
.0de0	c9 12		ctrlr          cmp  #ctrl_r
.0de2	d0 03		               bne  ishex14
.0de4	4c 50 0e	               jmp  doredraw
.0de7	c9 14		ishex14        cmp  #$14
.0de9	d0 03		               bne  ishex12
.0deb	4c 9e 0d	               jmp  keyloop
.0dee	c9 12		ishex12        cmp  #$12
.0df0	d0 03		               bne  reste
.0df2	4c 9e 0d	               jmp  keyloop
.0df5			reste
.0df5	20 4c c4	               jsr  pushreg
.0df8	a2 0d		               ldx  #13
.0dfa	a0 0c		               ldy  #12
.0dfc	20 02 c3	               jsr  gotoxy
.0dff	20 7b c4	               jsr  popreg
.0e02	20 e2 c2	               jsr  putch
.0e05	48		               pha                 ; remembers
.0e06	ad ac 09	               lda  currentkey     ; the
.0e09	8d ad 09	               sta  previouskey    ; previous key
.0e0c	68		               pla                 ;
.0e0d	8d ac 09	               sta  currentkey     ; an store current
.0e10	aa		               tax
.0e11	bc d7 c7	               ldy  asciitorom,x
.0e14	8c ae 09	               sty  bitmapoffset
.0e17	20 54 0c	               jsr  drawkeyval
.0e1a	20 0c 10	               jsr  drawbitmap
.0e1d	4c 9e 0d	               jmp  keyloop
.0e20	20 8b 13	dof1           jsr  f1action  ;edit/reverse
.0e23	4c 9e 0d	               jmp  keyloop
.0e26	20 ac 14	dof2           jsr  f2action  ;save/flip vert
.0e29	4c 9e 0d	               jmp  keyloop
.0e2c	20 60 15	dof3           jsr  f3action  ;load/flip horz
.0e2f	4c 9e 0d	               jmp  keyloop
.0e32	20 3d 16	dof4           jsr  f4action  ;copy/scroll r
.0e35	4c 9e 0d	               jmp  keyloop
.0e38	20 1d 17	dof5           jsr  f5action  ;clear/scroll l
.0e3b	4c 9e 0d	               jmp  keyloop
.0e3e	20 d1 17	dof6           jsr  f6action  ;fill;/scroll up
.0e41	4c 9e 0d	               jmp  keyloop
.0e44	20 85 18	dof7           jsr  f7action  ;clear;/scroll down
.0e47	4c 9e 0d	               jmp  keyloop
.0e4a	20 3e 19	dof8           jsr  f8action  ; function
.0e4d	4c 9e 0d	               jmp  keyloop
.0e50	20 ca 09	doredraw       jsr  screenredraw
.0e53	4c 9e 0d	               jmp  keyloop
.0e56	20 7b c4	doquit         jsr  popreg
.0e59	60		               rts
.0e5a			editor
.0e5a	20 4c c4	               jsr  pushreg
.0e5d	20 4c c4	               jsr  pushreg
.0e60	a2 56		               ldx  #<blankmsg
.0e62	a0 1b		               ldy  #>blankmsg
.0e64	20 75 c3	               jsr  putscxy
.0e67	a2 60		               ldx  #<exit_msg
.0e69	a0 1e		               ldy  #>exit_msg
.0e6b	20 75 c3	               jsr  putscxy
.0e6e	20 7b c4	               jsr  popreg
.0e71	20 4c c4	               jsr  pushreg
.0e74	a2 56		               ldx  #<blankmsg
.0e76	a0 1b		               ldy  #>blankmsg
.0e78	20 75 c3	               jsr  putscxy
.0e7b	a2 ca		               ldx  #<edit_msg
.0e7d	a0 1b		               ldy  #>edit_msg
.0e7f	20 75 c3	               jsr  putscxy
.0e82	20 7b c4	               jsr  popreg
.0e85	20 c8 0f	               jsr  setcurs
.0e88	ad ac 09	               lda  currentkey
.0e8b	20 4c c4	               jsr  pushreg
.0e8e	a2 11		               ldx  #17
.0e90	a0 05		               ldy  #5
.0e92	20 02 c3	               jsr  gotoxy
.0e95	20 7b c4	               jsr  popreg
.0e98	20 1c c7	               jsr  atodec
.0e9b	20 4c c4	               jsr  pushreg
.0e9e	a2 19		               ldx  #<adec
.0ea0	a0 c6		               ldy  #>adec
.0ea2	20 e8 c2	               jsr  puts
.0ea5	20 7b c4	               jsr  popreg
.0ea8	20 0c 10	               jsr  drawbitmap
.0eab	20 86 c7	ed_loop        jsr  getkey
.0eae	c9 85		f1             cmp  #f1key
.0eb0	d0 03		               bne  cu
.0eb2	4c 9a 0f	               jmp  do_ctrlx
.0eb5	c9 91		cu             cmp  #cursu
.0eb7	d0 03		               bne  cd
.0eb9	4c 45 0f	               jmp  do_up
.0ebc	c9 11		cd             cmp  #cursd
.0ebe	d0 03		               bne  cl
.0ec0	4c 58 0f	               jmp  do_down
.0ec3	c9 9d		cl             cmp  #cursl
.0ec5	d0 03		               bne  cr
.0ec7	4c 6b 0f	               jmp  do_left
.0eca	c9 1d		cr             cmp  #cursr
.0ecc	d0 03		               bne  cx
.0ece	4c 7e 0f	               jmp  do_right
.0ed1	c9 18		cx             cmp  #ctrl_x
.0ed3	d0 03		               bne  sp
.0ed5	4c 9a 0f	               jmp  do_ctrlx
.0ed8	c9 20		sp             cmp  #$20
.0eda	d0 03		               bne  ishex14
.0edc	4c 91 0f	               jmp  do_swap
.0edf	c9 14		ishex14        cmp  #$14
.0ee1	d0 03		               bne  ishex12
.0ee3	4c 91 0f	               jmp  do_swap
.0ee6	c9 12		ishex12        cmp  #$12
.0ee8	d0 03		               bne  rest
.0eea	4c 91 0f	               jmp  do_swap
.0eed			rest
.0eed	20 4c c4	               jsr  pushreg
.0ef0	a2 0d		               ldx  #13
.0ef2	a0 0c		               ldy  #12
.0ef4	20 02 c3	               jsr  gotoxy
.0ef7	20 7b c4	               jsr  popreg
.0efa	20 e2 c2	               jsr  putch
.0efd	48		               pha
.0efe	ad ac 09	               lda  currentkey
.0f01	8d ad 09	               sta  previouskey
.0f04	68		               pla
.0f05	8d ac 09	               sta  currentkey
.0f08	aa		               tax
.0f09	bc d7 c7	               ldy  asciitorom,x
.0f0c	8c ae 09	               sty  bitmapoffset
.0f0f	20 54 0c	               jsr  drawkeyval
.0f12	20 0c 10	               jsr  drawbitmap
.0f15	20 4c c4	               jsr  pushreg
.0f18	a2 0d		               ldx  #13
.0f1a	a0 0c		               ldy  #12
.0f1c	20 02 c3	               jsr  gotoxy
.0f1f	20 7b c4	               jsr  popreg
.0f22	20 e2 c2	               jsr  putch
.0f25	20 4c c4	               jsr  pushreg
.0f28	a2 11		               ldx  #17
.0f2a	a0 05		               ldy  #5
.0f2c	20 02 c3	               jsr  gotoxy
.0f2f	20 7b c4	               jsr  popreg
.0f32	20 1c c7	               jsr  atodec
.0f35	20 4c c4	               jsr  pushreg
.0f38	a2 19		               ldx  #<adec
.0f3a	a0 c6		               ldy  #>adec
.0f3c	20 e8 c2	               jsr  puts
.0f3f	20 7b c4	               jsr  popreg
.0f42	4c 97 0f	               jmp  totop
.0f45	ad b5 09	do_up          lda  cursln
.0f48	c9 09		               cmp  #grid_top
.0f4a	f0 4b		               beq  totop
.0f4c	20 ea 0f	               jsr  clrcurs
.0f4f	ce b5 09	               dec  cursln
.0f52	20 c8 0f	               jsr  setcurs
.0f55	4c 97 0f	               jmp  totop
.0f58	ad b5 09	do_down        lda  cursln
.0f5b	c9 10		               cmp  #grid_bot
.0f5d	f0 38		               beq  totop
.0f5f	20 ea 0f	               jsr  clrcurs
.0f62	ee b5 09	               inc  cursln
.0f65	20 c8 0f	               jsr  setcurs
.0f68	4c 97 0f	               jmp  totop
.0f6b	ad b6 09	do_left        lda  curscl
.0f6e	c9 01		               cmp  #grid_left
.0f70	f0 25		               beq  totop
.0f72	20 ea 0f	               jsr  clrcurs
.0f75	ce b6 09	               dec  curscl
.0f78	20 c8 0f	               jsr  setcurs
.0f7b	4c 97 0f	               jmp  totop
.0f7e	ad b6 09	do_right       lda  curscl
.0f81	c9 08		               cmp  #grid_right
.0f83	f0 12		               beq  totop
.0f85	20 ea 0f	               jsr  clrcurs
.0f88	ee b6 09	               inc  curscl
.0f8b	20 c8 0f	               jsr  setcurs
.0f8e	4c 97 0f	               jmp  totop
.0f91	20 a1 0f	do_swap        jsr  do_eor
.0f94	20 0c 10	               jsr  drawbitmap
.0f97	4c ab 0e	totop          jmp  ed_loop
.0f9a	20 ea 0f	do_ctrlx       jsr  clrcurs
.0f9d	20 7b c4	               jsr  popreg
.0fa0	60		               rts
.0fa1			do_eor
.0fa1	20 4c c4	               jsr  pushreg
.0fa4	ad af 09	               lda  mapaddr
.0fa7	85 fd		               sta  zpage2
.0fa9	ad b0 09	               lda  mapaddr+1
.0fac	85 fe		               sta  zpage2+1
.0fae	ae b5 09	               ldx  cursln     ; calcul de
.0fb1	ca		               dex            ; l'offset de
.0fb2	8a		               txa            ; la
.0fb3	29 f7		               and  #$f7      ; ligne
.0fb5	a8		               tay
.0fb6	ae b6 09	               ldx  curscl
.0fb9	ca		               dex
.0fba	bd a1 09	               lda  eorval,x
.0fbd	51 fd		               eor  (zpage2),y
.0fbf	20 54 0c	               jsr  drawkeyval
.0fc2	91 fd		               sta  (zpage2),y
.0fc4	20 7b c4	               jsr  popreg
.0fc7	60		               rts
.0fc8			setcurs
.0fc8	20 4c c4	               jsr  pushreg
.0fcb	a2 01		               ldx  #grid_left
.0fcd	ac b5 09	               ldy  cursln
.0fd0	20 02 c3	               jsr  gotoxy
.0fd3	a9 da		               lda  #$da
.0fd5	20 e2 c2	               jsr  putch
.0fd8	ae b6 09	               ldx  curscl
.0fdb	e8		               inx
.0fdc	a0 08		               ldy  #grid_top-1
.0fde	20 02 c3	               jsr  gotoxy
.0fe1	a9 da		               lda  #$da
.0fe3	20 e2 c2	               jsr  putch
.0fe6	20 7b c4	               jsr  popreg
.0fe9	60		               rts
.0fea			clrcurs
.0fea	20 4c c4	               jsr  pushreg
.0fed	a2 01		               ldx  #grid_left
.0fef	ac b5 09	               ldy  cursln
.0ff2	20 02 c3	               jsr  gotoxy
.0ff5	a9 20		               lda  #$20
.0ff7	20 e2 c2	               jsr  putch
.0ffa	ae b6 09	               ldx  curscl
.0ffd	e8		               inx
.0ffe	a0 08		               ldy  #grid_top-1
.1000	20 02 c3	               jsr  gotoxy
.1003	a9 20		               lda  #$20
.1005	20 e2 c2	               jsr  putch
.1008	20 7b c4	               jsr  popreg
.100b	60		               rts
.100c			drawbitmap
.100c	20 de c3	               jsr  pushall
.100f	20 73 10	               jsr  calcmapaddr
.1012	ad af 09	               lda  mapaddr        ; on pointe sur la table des bitmaps
.1015	85 fb		               sta  zpage1
.1017	ad b0 09	               lda  mapaddr+1
.101a	85 fc		               sta  zpage1+1
.101c	a0 00		drawchar       ldy  #$00
.101e	a2 09		               ldx  #grid_top      ;on replace la ...
.1020	8e 29 10	               stx  isy+1          ;ligne de départ
.1023	20 de c3	nextline       jsr  push
.1026	a2 02		               ldx  #grid_left+1        ; la colonne
.1028	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.102a	20 02 c3	               jsr  gotoxy
.102d	20 19 c4	               jsr  pop
.1030	b1 fb		               lda  (zpage1),y     ; on li une ligne
.1032	20 b9 c6	               jsr  atobin
.1035	20 a2 10	               jsr  abintograph
.1038	20 4c c4	               jsr  pushreg
.103b	a2 10		               ldx  #<abin
.103d	a0 c6		               ldy  #>abin
.103f	20 e8 c2	               jsr  puts
.1042	20 7b c4	               jsr  popreg
.1045	ee 29 10	               inc  isy+1
.1048	c8		               iny
.1049	c0 08		               cpy  #$08
.104b	30 d6		               bmi  nextline
.104d	20 54 10	               jsr  highlight
.1050	20 19 c4	               jsr  popall
.1053	60		               rts
.1054			highlight
.1054	20 4c c4	               jsr  pushreg
.1057	ae ad 09	               ldx  previouskey
.105a	bd d7 c7	               lda  asciitorom,x
.105d	aa		               tax
.105e	a9 0f		               lda  #charscolor
.1060	9d 00 d8	               sta  colorram,x
.1063	ae ac 09	               ldx  currentkey
.1066	bd d7 c7	               lda  asciitorom,x
.1069	aa		               tax
.106a	a9 01		               lda  #charcolor
.106c	9d 00 d8	               sta  colorram,x
.106f	20 7b c4	               jsr  popreg
.1072	60		               rts
.1073			calcmapaddr
.1073	20 de c3	               jsr  pushall
.1076	ad 9f 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.1079	85 fb		               sta  zpage1
.107b	ad a0 09	               lda  bitmapaddr+1
.107e	85 fc		               sta  zpage1+1
.1080	ae ae 09	               ldx  bitmapoffset
.1083	e0 00		               cpx  #$00
.1085	f0 08		               beq  thesame         ; sommes nous déja à 0
.1087	a9 08		addagain       lda  #$08
.1089	20 57 13	               jsr  zp1addnum      ; on augmente de 8 byte ...
.108c	ca		               dex                 ; pour chaque caracteres
.108d	d0 f8		               bne  addagain
.108f	48		thesame        pha
.1090	a5 fb		               lda  zpage1
.1092	8d af 09	               sta  mapaddr
.1095	a5 fc		               lda  zpage1+1
.1097	8d b0 09	               sta  mapaddr+1
.109a	68		               pla
.109b	20 54 0c	               jsr  drawkeyval
.109e	20 19 c4	out            jsr  popall
.10a1	60		               rts
.10a2			abintograph
.10a2	20 de c3	               jsr  pushall
.10a5	a9 10		               lda  #<abin
.10a7	85 fb		               sta  zpage1
.10a9	a9 c6		               lda  #>abin+1
.10ab	85 fc		               sta  zpage1+1
.10ad	a0 00		               ldy  #$00
.10af	b1 fb		nextbit        lda  (zpage1),y
.10b1	c9 30		               cmp  #$30
.10b3	f0 07		               beq  itszero
.10b5	a9 d1		itsone         lda  #$d1
.10b7	91 fb		               sta  (zpage1),y
.10b9	4c c0 10	               jmp  next
.10bc	a9 2e		itszero        lda  #$2e
.10be	91 fb		               sta  (zpage1),y
.10c0	c8		next           iny
.10c1	c0 08		               cpy  #$08
.10c3	30 ea		               bmi  nextbit
.10c5	20 19 c4	               jsr  popall
.10c8	60		               rts
.10c9			setscreenptr
.10c9	20 4c c4	               jsr  pushreg
.10cc	a9 08		               lda  #$08      ; basic commande to disable ...
.10ce	20 d2 ff	               jsr  chrout    ; ... character set change.
.10d1	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.10d4	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.10d6	09 0a		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.10d8	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.10db	20 7b c4	               jsr  popreg
.10de	60		               rts
.10df			copycharset
.10df	20 4c c4	               jsr  pushreg
.10e2	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.10e5	29 fe		               and  #%11111110     ;254
.10e7	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.10ea	a5 01		               lda  u6510map       ;$01
.10ec	29 fb		               and  #%11111011     ;251
.10ee	85 01		               sta  u6510map       ;$01
.10f0	20 05 11	               jsr  memcopy
.10f3	a5 01		               lda  u6510map       ;$01
.10f5	09 04		               ora  #%00000100
.10f7	85 01		               sta  u6510map       ;$01
.10f9	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.10fc	09 01		               ora  #%00000001     ;254
.10fe	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.1101	20 7b c4	               jsr  popreg
.1104	60		               rts
.1105			memcopy
.1105	20 de c3	               jsr  pushall
.1108	ad 9b 09	               lda  startaddr
.110b	85 fb		               sta  zpage1
.110d	ad 9c 09	               lda  startaddr+1
.1110	85 fc		               sta  zpage1+1
.1112	ad 9f 09	               lda  bitmapaddr
.1115	85 fd		               sta  zpage2
.1117	ad a0 09	               lda  bitmapaddr+1
.111a	85 fe		               sta  zpage2+1
.111c	a0 00		               ldy  #$00
.111e	b1 fb		onemore        lda  (zpage1),y
.1120	91 fd		               sta  (zpage2),y
.1122	20 33 c5	               jsr  inczp1
.1125	20 51 c5	               jsr  inczp2
.1128	a5 fc		               lda  zpage1+1
.112a	cd 9e 09	               cmp  stopaddr+1
.112d	d0 ef		               bne  onemore
.112f	a5 fb		               lda  zpage1
.1131	cd 9d 09	               cmp  stopaddr
.1134	d0 e8		               bne  onemore
.1136	20 19 c4	               jsr  popall
.1139	60		               rts
.113a			staticscreen
.113a	48		               pha
.113b	a9 0b		               lda  #bordure
.113d	8d 20 d0	               sta  $d020
.1140	68		               pla
.1141	48		               pha
.1142	a9 00		               lda  #fond
.1144	8d 21 d0	               sta  $d021
.1147	68		               pla
.1148	20 ae 12	               jsr  drawlines
.114b	20 8a 12	               jsr  drawallchars
.114e	20 f6 12	               jsr  drawgrid
.1151	20 8f 11	               jsr  drawfkeys
.1154	a9 0a		               lda  #vrose
.1156	8d 46 1e	               sta  redraw_msg
.1159	20 4c c4	               jsr  pushreg
.115c	a2 56		               ldx  #<blankmsg
.115e	a0 1b		               ldy  #>blankmsg
.1160	20 75 c3	               jsr  putscxy
.1163	a2 46		               ldx  #<redraw_msg
.1165	a0 1e		               ldy  #>redraw_msg
.1167	20 75 c3	               jsr  putscxy
.116a	20 7b c4	               jsr  popreg
.116d	20 4c c4	               jsr  pushreg
.1170	a2 56		               ldx  #<blankmsg
.1172	a0 1b		               ldy  #>blankmsg
.1174	20 75 c3	               jsr  putscxy
.1177	a2 2c		               ldx  #<quit_msg
.1179	a0 1e		               ldy  #>quit_msg
.117b	20 75 c3	               jsr  putscxy
.117e	20 7b c4	               jsr  popreg
.1181	20 4c c4	               jsr  pushreg
.1184	a2 00		               ldx  #0
.1186	a0 07		               ldy  #7
.1188	20 02 c3	               jsr  gotoxy
.118b	20 7b c4	               jsr  popreg
.118e	60		               rts
.118f			drawfkeys
.118f	20 4c c4	               jsr  pushreg
.1192	ad aa 09	               lda  fkeyset
.1195	c9 00		               cmp  #$0
.1197	d0 78		               bne  secondks
.1199	20 4c c4	               jsr  pushreg
.119c	a2 32		               ldx  #<titremenu1
.119e	a0 20		               ldy  #>titremenu1
.11a0	20 75 c3	               jsr  putscxy
.11a3	20 7b c4	               jsr  popreg
.11a6	20 4c c4	               jsr  pushreg
.11a9	a2 68		               ldx  #<f1abutton
.11ab	a0 20		               ldy  #>f1abutton
.11ad	20 75 c3	               jsr  putscxy
.11b0	20 7b c4	               jsr  popreg
.11b3	20 4c c4	               jsr  pushreg
.11b6	a2 83		               ldx  #<f2abutton
.11b8	a0 20		               ldy  #>f2abutton
.11ba	20 75 c3	               jsr  putscxy
.11bd	20 7b c4	               jsr  popreg
.11c0	20 4c c4	               jsr  pushreg
.11c3	a2 9e		               ldx  #<f3abutton
.11c5	a0 20		               ldy  #>f3abutton
.11c7	20 75 c3	               jsr  putscxy
.11ca	20 7b c4	               jsr  popreg
.11cd	20 4c c4	               jsr  pushreg
.11d0	a2 b9		               ldx  #<f4abutton
.11d2	a0 20		               ldy  #>f4abutton
.11d4	20 75 c3	               jsr  putscxy
.11d7	20 7b c4	               jsr  popreg
.11da	20 4c c4	               jsr  pushreg
.11dd	a2 d4		               ldx  #<f5abutton
.11df	a0 20		               ldy  #>f5abutton
.11e1	20 75 c3	               jsr  putscxy
.11e4	20 7b c4	               jsr  popreg
.11e7	20 4c c4	               jsr  pushreg
.11ea	a2 ef		               ldx  #<f6abutton
.11ec	a0 20		               ldy  #>f6abutton
.11ee	20 75 c3	               jsr  putscxy
.11f1	20 7b c4	               jsr  popreg
.11f4	20 4c c4	               jsr  pushreg
.11f7	a2 0a		               ldx  #<f7abutton
.11f9	a0 21		               ldy  #>f7abutton
.11fb	20 75 c3	               jsr  putscxy
.11fe	20 7b c4	               jsr  popreg
.1201	20 4c c4	               jsr  pushreg
.1204	a2 25		               ldx  #<f8abutton
.1206	a0 21		               ldy  #>f8abutton
.1208	20 75 c3	               jsr  putscxy
.120b	20 7b c4	               jsr  popreg
.120e	4c 86 12	               jmp end
.1211			secondks
.1211	20 4c c4	               jsr  pushreg
.1214	a2 4d		               ldx  #<titremenu2
.1216	a0 20		               ldy  #>titremenu2
.1218	20 75 c3	               jsr  putscxy
.121b	20 7b c4	               jsr  popreg
.121e	20 4c c4	               jsr  pushreg
.1221	a2 40		               ldx  #<f1bbutton
.1223	a0 21		               ldy  #>f1bbutton
.1225	20 75 c3	               jsr  putscxy
.1228	20 7b c4	               jsr  popreg
.122b	20 4c c4	               jsr  pushreg
.122e	a2 5b		               ldx  #<f2bbutton
.1230	a0 21		               ldy  #>f2bbutton
.1232	20 75 c3	               jsr  putscxy
.1235	20 7b c4	               jsr  popreg
.1238	20 4c c4	               jsr  pushreg
.123b	a2 76		               ldx  #<f3bbutton
.123d	a0 21		               ldy  #>f3bbutton
.123f	20 75 c3	               jsr  putscxy
.1242	20 7b c4	               jsr  popreg
.1245	20 4c c4	               jsr  pushreg
.1248	a2 91		               ldx  #<f4bbutton
.124a	a0 21		               ldy  #>f4bbutton
.124c	20 75 c3	               jsr  putscxy
.124f	20 7b c4	               jsr  popreg
.1252	20 4c c4	               jsr  pushreg
.1255	a2 ac		               ldx  #<f5bbutton
.1257	a0 21		               ldy  #>f5bbutton
.1259	20 75 c3	               jsr  putscxy
.125c	20 7b c4	               jsr  popreg
.125f	20 4c c4	               jsr  pushreg
.1262	a2 c7		               ldx  #<f6bbutton
.1264	a0 21		               ldy  #>f6bbutton
.1266	20 75 c3	               jsr  putscxy
.1269	20 7b c4	               jsr  popreg
.126c	20 4c c4	               jsr  pushreg
.126f	a2 e2		               ldx  #<f7bbutton
.1271	a0 21		               ldy  #>f7bbutton
.1273	20 75 c3	               jsr  putscxy
.1276	20 7b c4	               jsr  popreg
.1279	20 4c c4	               jsr  pushreg
.127c	a2 fd		               ldx  #<f8bbutton
.127e	a0 21		               ldy  #>f8bbutton
.1280	20 75 c3	               jsr  putscxy
.1283	20 7b c4	               jsr  popreg
.1286	20 7b c4	end            jsr  popreg
.1289	60		               rts
.128a			drawallchars
.128a	20 4c c4	               jsr pushreg
.128d	20 4c c4	               jsr  pushreg
.1290	a2 00		               ldx  #0
.1292	a0 00		               ldy  #0
.1294	20 02 c3	               jsr  gotoxy
.1297	20 7b c4	               jsr  popreg
.129a	a2 00		               ldx  #$00
.129c	8a		nextc          txa
.129d	9d 00 04	               sta  scrnnewram,x
.12a0	a9 0f		               lda  #charscolor
.12a2	9d 00 d8	               sta  colorram,x
.12a5	e8		               inx
.12a6	e0 80		               cpx  #$80
.12a8	d0 f2		               bne  nextc
.12aa	20 7b c4	               jsr  popreg
.12ad	60		               rts
.12ae			drawlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.12ae	20 de c3	               jsr  pushall
.12b1	a2 28		               ldx  #40
.12b3	a9 40		               lda  #64
.12b5	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.12b8	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.12bb	ca		               dex
.12bc	e0 10		hline          cpx  #vlinepos
.12be	10 03		               bpl  notyet
.12c0	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.12c3	e0 00		notyet         cpx  #$00
.12c5	d0 ee		               bne  nextl
.12c7	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.12c9	85 fb		               sta  zpage1
.12cb	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.12cd	85 fc		               sta  zpage1+1
.12cf	a0 00		               ldy  #0
.12d1	a9 72		               lda  #114
.12d3	91 fb		               sta  (zpage1),y
.12d5	20 65 13	               jsr  zp1add40
.12d8	a2 12		               ldx  #24-hline2
.12da	a9 5d		               lda  #93
.12dc	91 fb		another93      sta  (zpage1),y
.12de	20 65 13	               jsr  zp1add40
.12e1	ca		               dex
.12e2	d0 f8		               bne  another93
.12e4	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.12e6	85 fb		               sta  zpage1
.12e8	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.12ea	85 fc		               sta  zpage1+1
.12ec	a0 00		               ldy  #0
.12ee	a9 73		               lda  #115
.12f0	91 fb		               sta  (zpage1),y
.12f2	20 19 c4	               jsr  popall
.12f5	60		               rts
.12f6			drawgrid
.12f6	20 de c3	               jsr  pushall
.12f9	20 9f c1	               jsr  screendis
.12fc	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.12fe	85 fb		               sta  zpage1
.1300	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.1302	85 fc		               sta  zpage1+1
.1304	a2 08		               ldx  #8
.1306	a9 65		nextbox        lda  #101
.1308	a0 09		               ldy  #9
.130a	91 fb		               sta  (zpage1),y
.130c	88		               dey
.130d	a9 2e		               lda  #$2e
.130f	91 fb		nextcol        sta  (zpage1),y
.1311	88		               dey
.1312	d0 fb		               bne  nextcol
.1314	20 65 13	               jsr  zp1add40
.1317	ca		               dex
.1318	d0 ec		               bne  nextbox
.131a	a0 08		               ldy  #8
.131c	a9 77		               lda  #119
.131e	91 fb		nextlin        sta  (zpage1),y
.1320	88		               dey
.1321	d0 fb		               bne  nextlin
.1323	a9 3e		               lda  #$3e
.1325	8d eb 05	               sta  scrnnewram+(40*(12))+11
.1328	a9 70		               lda  #$70                     ;+
.132a	8d c4 05	               sta  scrnnewram+(40*(11))+12
.132d	a9 43		               lda  #$43                     ;-
.132f	8d c5 05	               sta  scrnnewram+(40*(11))+13
.1332	a9 6e		               lda  #$6e                     ;+
.1334	8d c6 05	               sta  scrnnewram+(40*(11))+14
.1337	a9 5d		               lda  #$5d                     ;|
.1339	8d ec 05	               sta  scrnnewram+(40*(12))+12
.133c	a9 5d		               lda  #$5d                     ;|
.133e	8d ee 05	               sta  scrnnewram+(40*(12))+14
.1341	a9 6d		               lda  #$6d                     ;+
.1343	8d 14 06	               sta  scrnnewram+(40*(13))+12
.1346	a9 43		               lda  #$43                     ;-
.1348	8d 15 06	               sta  scrnnewram+(40*(13))+13
.134b	a9 7d		               lda  #$7d                     ;+
.134d	8d 16 06	               sta  scrnnewram+(40*(13))+14
.1350	20 ac c1	               jsr screenena
.1353	20 19 c4	               jsr  popall
.1356	60		               rts
.1357			zp1addnum
.1357	08		               php
.1358	48		               pha
.1359	18		               clc
.135a	65 fb		               adc  zpage1
.135c	90 02		               bcc  nocarry
.135e	e6 fc		               inc  zpage1+1
.1360	85 fb		nocarry        sta  zpage1
.1362	68		               pla
.1363	28		               plp
.1364	60		               rts
.1365			zp1add40
.1365	08		               php
.1366	48		               pha
.1367	18		               clc
.1368	a5 fb		               lda  zpage1
.136a	69 28		               adc  #40
.136c	90 02		               bcc  nocarry
.136e	e6 fc		               inc  zpage1+1
.1370	85 fb		nocarry        sta  zpage1
.1372	68		               pla
.1373	28		               plp
.1374	60		               rts
.1375			delay
.1375	20 4c c4	               jsr  pushreg
.1378	a9 00		               lda  #$0
.137a	aa		               tax
.137b	a8		               tay
.137c	ca		xagain         dex
.137d	ca		               dex
.137e	88		yagain         dey
.137f	c0 00		               cpy  #$00
.1381	d0 fb		               bne  yagain
.1383	e0 00		               cpx  #$00
.1385	d0 f5		               bne  xagain
.1387	20 7b c4	               jsr  popreg
.138a	60		               rts
.138b			f1action
.138b	48		               pha
.138c	a9 ff		               lda  #$ff
.138e	8d a9 09	               sta  editmode
.1391	ad aa 09	               lda  fkeyset
.1394	f0 03		               beq  menua
.1396	4c 4e 14	               jmp  menub
.1399			menua
.1399	20 4c c4	               jsr  pushreg
.139c	a2 56		               ldx  #<blankmsg
.139e	a0 1b		               ldy  #>blankmsg
.13a0	20 75 c3	               jsr  putscxy
.13a3	a2 ca		               ldx  #<f1a_msg
.13a5	a0 1b		               ldy  #>f1a_msg
.13a7	20 75 c3	               jsr  putscxy
.13aa	20 7b c4	               jsr  popreg
.13ad	20 4c c4	               jsr  pushreg
.13b0	ad 68 20	               lda  f1abutton
.13b3	48		               pha
.13b4	a9 92		               lda  #146
.13b6	8d 7a 20	               sta  f1abutton+18
.13b9	a9 01		               lda  #flashcol
.13bb	8d 68 20	               sta  f1abutton
.13be	a2 68		               ldx  #<f1abutton
.13c0	a0 20		               ldy  #>f1abutton
.13c2	20 75 c3	               jsr  putscxy
.13c5	20 75 13	               jsr  delay
.13c8	a9 12		               lda  #18
.13ca	8d 7a 20	               sta  f1abutton+18
.13cd	68		               pla
.13ce	8d 68 20	               sta  f1abutton
.13d1	a2 68		               ldx  #<f1abutton
.13d3	a0 20		               ldy  #>f1abutton
.13d5	20 75 c3	               jsr  putscxy
.13d8	20 7b c4	               jsr  popreg
.13db	a9 0b		               lda  #vgris
.13dd	20 16 0c	               jsr  setmenuacolor
.13e0	a9 03		               lda  #menu1col1
.13e2	8d 68 20	               sta  f1abutton
.13e5	20 8f 11	               jsr  drawfkeys
.13e8	a9 0b		               lda  #vgris
.13ea	8d 46 1e	               sta  redraw_msg
.13ed	20 4c c4	               jsr  pushreg
.13f0	a2 56		               ldx  #<blankmsg
.13f2	a0 1b		               ldy  #>blankmsg
.13f4	20 75 c3	               jsr  putscxy
.13f7	a2 46		               ldx  #<redraw_msg
.13f9	a0 1e		               ldy  #>redraw_msg
.13fb	20 75 c3	               jsr  putscxy
.13fe	20 7b c4	               jsr  popreg
.1401	20 5a 0e	               jsr  editor
.1404	a9 0a		               lda  #vrose
.1406	8d 46 1e	               sta  redraw_msg
.1409	20 4c c4	               jsr  pushreg
.140c	a2 56		               ldx  #<blankmsg
.140e	a0 1b		               ldy  #>blankmsg
.1410	20 75 c3	               jsr  putscxy
.1413	a2 46		               ldx  #<redraw_msg
.1415	a0 1e		               ldy  #>redraw_msg
.1417	20 75 c3	               jsr  putscxy
.141a	20 7b c4	               jsr  popreg
.141d	20 4c c4	               jsr  pushreg
.1420	a2 56		               ldx  #<blankmsg
.1422	a0 1b		               ldy  #>blankmsg
.1424	20 75 c3	               jsr  putscxy
.1427	a2 2c		               ldx  #<quit_msg
.1429	a0 1e		               ldy  #>quit_msg
.142b	20 75 c3	               jsr  putscxy
.142e	20 7b c4	               jsr  popreg
.1431	20 4c c4	               jsr  pushreg
.1434	a2 56		               ldx  #<blankmsg
.1436	a0 1b		               ldy  #>blankmsg
.1438	20 75 c3	               jsr  putscxy
.143b	a2 85		               ldx  #<menua_msg
.143d	a0 1d		               ldy  #>menua_msg
.143f	20 75 c3	               jsr  putscxy
.1442	20 7b c4	               jsr  popreg
.1445	20 d0 0b	               jsr  resetmenuacolor
.1448	20 8f 11	               jsr  drawfkeys
.144b	4c 96 14	               jmp  out
.144e			menub
.144e	20 4c c4	               jsr  pushreg
.1451	a2 56		               ldx  #<blankmsg
.1453	a0 1b		               ldy  #>blankmsg
.1455	20 75 c3	               jsr  putscxy
.1458	a2 bd		               ldx  #<f1b_msg
.145a	a0 1c		               ldy  #>f1b_msg
.145c	20 75 c3	               jsr  putscxy
.145f	20 7b c4	               jsr  popreg
.1462	20 4c c4	               jsr  pushreg
.1465	ad 40 21	               lda  f1bbutton
.1468	48		               pha
.1469	a9 92		               lda  #146
.146b	8d 52 21	               sta  f1bbutton+18
.146e	a9 01		               lda  #flashcol
.1470	8d 40 21	               sta  f1bbutton
.1473	a2 40		               ldx  #<f1bbutton
.1475	a0 21		               ldy  #>f1bbutton
.1477	20 75 c3	               jsr  putscxy
.147a	20 75 13	               jsr  delay
.147d	a9 12		               lda  #18
.147f	8d 52 21	               sta  f1bbutton+18
.1482	68		               pla
.1483	8d 40 21	               sta  f1bbutton
.1486	a2 40		               ldx  #<f1bbutton
.1488	a0 21		               ldy  #>f1bbutton
.148a	20 75 c3	               jsr  putscxy
.148d	20 7b c4	               jsr  popreg
.1490	20 22 1b	               jsr  flipvert
.1493	20 0c 10	               jsr  drawbitmap
.1496	68		out            pla
.1497	20 4c c4	               jsr  pushreg
.149a	a2 56		               ldx  #<blankmsg
.149c	a0 1b		               ldy  #>blankmsg
.149e	20 75 c3	               jsr  putscxy
.14a1	a2 82		               ldx  #<prompt_msg
.14a3	a0 1b		               ldy  #>prompt_msg
.14a5	20 75 c3	               jsr  putscxy
.14a8	20 7b c4	               jsr  popreg
.14ab	60		               rts
.14ac			f2action
.14ac	48		               pha
.14ad	a9 00		               lda  #$0
.14af	8d a9 09	               sta  editmode
.14b2	ad aa 09	               lda  fkeyset
.14b5	d0 4b		               bne  menub
.14b7	20 4c c4	               jsr  pushreg
.14ba	a2 56		               ldx  #<blankmsg
.14bc	a0 1b		               ldy  #>blankmsg
.14be	20 75 c3	               jsr  putscxy
.14c1	a2 e5		               ldx  #<f2a_msg
.14c3	a0 1b		               ldy  #>f2a_msg
.14c5	20 75 c3	               jsr  putscxy
.14c8	20 7b c4	               jsr  popreg
.14cb	20 4c c4	               jsr  pushreg
.14ce	ad 83 20	               lda  f2abutton
.14d1	48		               pha
.14d2	a9 92		               lda  #146
.14d4	8d 95 20	               sta  f2abutton+18
.14d7	a9 01		               lda  #flashcol
.14d9	8d 83 20	               sta  f2abutton
.14dc	a2 83		               ldx  #<f2abutton
.14de	a0 20		               ldy  #>f2abutton
.14e0	20 75 c3	               jsr  putscxy
.14e3	20 75 13	               jsr  delay
.14e6	a9 12		               lda  #18
.14e8	8d 95 20	               sta  f2abutton+18
.14eb	68		               pla
.14ec	8d 83 20	               sta  f2abutton
.14ef	a2 83		               ldx  #<f2abutton
.14f1	a0 20		               ldy  #>f2abutton
.14f3	20 75 c3	               jsr  putscxy
.14f6	20 7b c4	               jsr  popreg
.14f9	20 7c 0a	               jsr  copychar
.14fc	20 0c 10	               jsr  drawbitmap
.14ff	4c 4a 15	               jmp  out
.1502			menub
.1502	20 4c c4	               jsr  pushreg
.1505	a2 56		               ldx  #<blankmsg
.1507	a0 1b		               ldy  #>blankmsg
.1509	20 75 c3	               jsr  putscxy
.150c	a2 d9		               ldx  #<f2b_msg
.150e	a0 1c		               ldy  #>f2b_msg
.1510	20 75 c3	               jsr  putscxy
.1513	20 7b c4	               jsr  popreg
.1516	20 4c c4	               jsr  pushreg
.1519	ad 5b 21	               lda  f2bbutton
.151c	48		               pha
.151d	a9 92		               lda  #146
.151f	8d 6d 21	               sta  f2bbutton+18
.1522	a9 01		               lda  #flashcol
.1524	8d 5b 21	               sta  f2bbutton
.1527	a2 5b		               ldx  #<f2bbutton
.1529	a0 21		               ldy  #>f2bbutton
.152b	20 75 c3	               jsr  putscxy
.152e	20 75 13	               jsr  delay
.1531	a9 12		               lda  #18
.1533	8d 6d 21	               sta  f2bbutton+18
.1536	68		               pla
.1537	8d 5b 21	               sta  f2bbutton
.153a	a2 5b		               ldx  #<f2bbutton
.153c	a0 21		               ldy  #>f2bbutton
.153e	20 75 c3	               jsr  putscxy
.1541	20 7b c4	               jsr  popreg
.1544	20 f5 1a	               jsr  fliphorz
.1547	20 0c 10	               jsr  drawbitmap
.154a	68		out            pla
.154b	20 4c c4	               jsr  pushreg
.154e	a2 56		               ldx  #<blankmsg
.1550	a0 1b		               ldy  #>blankmsg
.1552	20 75 c3	               jsr  putscxy
.1555	a2 82		               ldx  #<prompt_msg
.1557	a0 1b		               ldy  #>prompt_msg
.1559	20 75 c3	               jsr  putscxy
.155c	20 7b c4	               jsr  popreg
.155f	60		               rts
.1560			f3action
.1560	48		               pha
.1561	a9 00		               lda  #$0
.1563	8d a9 09	               sta  editmode
.1566	ad aa 09	               lda  fkeyset
.1569	d0 74		               bne  menub
.156b	20 4c c4	               jsr  pushreg
.156e	ad 9e 20	               lda  f3abutton
.1571	48		               pha
.1572	a9 92		               lda  #146
.1574	8d b0 20	               sta  f3abutton+18
.1577	a9 01		               lda  #flashcol
.1579	8d 9e 20	               sta  f3abutton
.157c	a2 9e		               ldx  #<f3abutton
.157e	a0 20		               ldy  #>f3abutton
.1580	20 75 c3	               jsr  putscxy
.1583	20 75 13	               jsr  delay
.1586	a9 12		               lda  #18
.1588	8d b0 20	               sta  f3abutton+18
.158b	68		               pla
.158c	8d 9e 20	               sta  f3abutton
.158f	a2 9e		               ldx  #<f3abutton
.1591	a0 20		               ldy  #>f3abutton
.1593	20 75 c3	               jsr  putscxy
.1596	20 7b c4	               jsr  popreg
.1599	20 4c c4	               jsr  pushreg
.159c	a2 56		               ldx  #<blankmsg
.159e	a0 1b		               ldy  #>blankmsg
.15a0	20 75 c3	               jsr  putscxy
.15a3	a2 06		               ldx  #<f3a_msg
.15a5	a0 1c		               ldy  #>f3a_msg
.15a7	20 75 c3	               jsr  putscxy
.15aa	20 7b c4	               jsr  popreg
.15ad	20 86 c7	getagain       jsr  getkey
.15b0	c9 31		               cmp  #$31
.15b2	f0 0b		               beq  devok
.15b4	c9 38		               cmp  #$38
.15b6	f0 07		               beq  devok
.15b8	c9 39		               cmp  #$39
.15ba	f0 03		               beq  devok
.15bc	4c ad 15	               jmp  getagain
.15bf	8d c9 09	devok          sta  device
.15c2	20 0a 0a	               jsr  getfname
.15c5	20 4c c4	               jsr  pushreg
.15c8	a2 56		               ldx  #<blankmsg
.15ca	a0 1b		               ldy  #>blankmsg
.15cc	20 75 c3	               jsr  putscxy
.15cf	a2 ae		               ldx  #<wait_msg
.15d1	a0 1b		               ldy  #>wait_msg
.15d3	20 75 c3	               jsr  putscxy
.15d6	20 7b c4	               jsr  popreg
.15d9	20 dd 08	               jsr  savetofile
.15dc	4c 27 16	               jmp  out
.15df			menub
.15df	20 4c c4	               jsr  pushreg
.15e2	a2 56		               ldx  #<blankmsg
.15e4	a0 1b		               ldy  #>blankmsg
.15e6	20 75 c3	               jsr  putscxy
.15e9	a2 f7		               ldx  #<f3b_msg
.15eb	a0 1c		               ldy  #>f3b_msg
.15ed	20 75 c3	               jsr  putscxy
.15f0	20 7b c4	               jsr  popreg
.15f3	20 4c c4	               jsr  pushreg
.15f6	ad 76 21	               lda  f3bbutton
.15f9	48		               pha
.15fa	a9 92		               lda  #146
.15fc	8d 88 21	               sta  f3bbutton+18
.15ff	a9 01		               lda  #flashcol
.1601	8d 76 21	               sta  f3bbutton
.1604	a2 76		               ldx  #<f3bbutton
.1606	a0 21		               ldy  #>f3bbutton
.1608	20 75 c3	               jsr  putscxy
.160b	20 75 13	               jsr  delay
.160e	a9 12		               lda  #18
.1610	8d 88 21	               sta  f3bbutton+18
.1613	68		               pla
.1614	8d 76 21	               sta  f3bbutton
.1617	a2 76		               ldx  #<f3bbutton
.1619	a0 21		               ldy  #>f3bbutton
.161b	20 75 c3	               jsr  putscxy
.161e	20 7b c4	               jsr  popreg
.1621	20 84 1a	               jsr  scrollright
.1624	20 0c 10	               jsr  drawbitmap
.1627	68		out            pla
.1628	20 4c c4	               jsr  pushreg
.162b	a2 56		               ldx  #<blankmsg
.162d	a0 1b		               ldy  #>blankmsg
.162f	20 75 c3	               jsr  putscxy
.1632	a2 82		               ldx  #<prompt_msg
.1634	a0 1b		               ldy  #>prompt_msg
.1636	20 75 c3	               jsr  putscxy
.1639	20 7b c4	               jsr  popreg
.163c	60		               rts
.163d			f4action
.163d	48		               pha
.163e	a9 00		               lda  #$0
.1640	8d a9 09	               sta  editmode
.1643	ad aa 09	               lda  fkeyset
.1646	d0 77		               bne  menub
.1648	20 4c c4	               jsr  pushreg
.164b	ad b9 20	               lda  f4abutton
.164e	48		               pha
.164f	a9 92		               lda  #146
.1651	8d cb 20	               sta  f4abutton+18
.1654	a9 01		               lda  #flashcol
.1656	8d b9 20	               sta  f4abutton
.1659	a2 b9		               ldx  #<f4abutton
.165b	a0 20		               ldy  #>f4abutton
.165d	20 75 c3	               jsr  putscxy
.1660	20 75 13	               jsr  delay
.1663	a9 12		               lda  #18
.1665	8d cb 20	               sta  f4abutton+18
.1668	68		               pla
.1669	8d b9 20	               sta  f4abutton
.166c	a2 b9		               ldx  #<f4abutton
.166e	a0 20		               ldy  #>f4abutton
.1670	20 75 c3	               jsr  putscxy
.1673	20 7b c4	               jsr  popreg
.1676	20 4c c4	               jsr  pushreg
.1679	a2 56		               ldx  #<blankmsg
.167b	a0 1b		               ldy  #>blankmsg
.167d	20 75 c3	               jsr  putscxy
.1680	a2 33		               ldx  #<f4a_msg
.1682	a0 1c		               ldy  #>f4a_msg
.1684	20 75 c3	               jsr  putscxy
.1687	20 7b c4	               jsr  popreg
.168a	20 86 c7	getagain       jsr  getkey
.168d	c9 31		               cmp  #$31
.168f	f0 0b		               beq  devok
.1691	c9 38		               cmp  #$38
.1693	f0 07		               beq  devok
.1695	c9 39		               cmp  #$39
.1697	f0 03		               beq  devok
.1699	4c 8a 16	               jmp  getagain
.169c	8d c9 09	devok          sta  device
.169f	20 0a 0a	               jsr  getfname
.16a2	20 4c c4	               jsr  pushreg
.16a5	a2 56		               ldx  #<blankmsg
.16a7	a0 1b		               ldy  #>blankmsg
.16a9	20 75 c3	               jsr  putscxy
.16ac	a2 ae		               ldx  #<wait_msg
.16ae	a0 1b		               ldy  #>wait_msg
.16b0	20 75 c3	               jsr  putscxy
.16b3	20 7b c4	               jsr  popreg
.16b6	20 3c 09	               jsr  loadfromfile
.16b9	20 ca 09	               jsr  screenredraw
.16bc	4c 07 17	               jmp  out
.16bf			menub
.16bf	20 4c c4	               jsr  pushreg
.16c2	a2 56		               ldx  #<blankmsg
.16c4	a0 1b		               ldy  #>blankmsg
.16c6	20 75 c3	               jsr  putscxy
.16c9	a2 13		               ldx  #<f4b_msg
.16cb	a0 1d		               ldy  #>f4b_msg
.16cd	20 75 c3	               jsr  putscxy
.16d0	20 7b c4	               jsr  popreg
.16d3	20 4c c4	               jsr  pushreg
.16d6	ad 91 21	               lda  f4bbutton
.16d9	48		               pha
.16da	a9 92		               lda  #146
.16dc	8d a3 21	               sta  f4bbutton+18
.16df	a9 01		               lda  #flashcol
.16e1	8d 91 21	               sta  f4bbutton
.16e4	a2 91		               ldx  #<f4bbutton
.16e6	a0 21		               ldy  #>f4bbutton
.16e8	20 75 c3	               jsr  putscxy
.16eb	20 75 13	               jsr  delay
.16ee	a9 12		               lda  #18
.16f0	8d a3 21	               sta  f4bbutton+18
.16f3	68		               pla
.16f4	8d 91 21	               sta  f4bbutton
.16f7	a2 91		               ldx  #<f4bbutton
.16f9	a0 21		               ldy  #>f4bbutton
.16fb	20 75 c3	               jsr  putscxy
.16fe	20 7b c4	               jsr  popreg
.1701	20 a9 1a	               jsr  scrollleft
.1704	20 0c 10	               jsr  drawbitmap
.1707	68		out            pla
.1708	20 4c c4	               jsr  pushreg
.170b	a2 56		               ldx  #<blankmsg
.170d	a0 1b		               ldy  #>blankmsg
.170f	20 75 c3	               jsr  putscxy
.1712	a2 82		               ldx  #<prompt_msg
.1714	a0 1b		               ldy  #>prompt_msg
.1716	20 75 c3	               jsr  putscxy
.1719	20 7b c4	               jsr  popreg
.171c	60		               rts
.171d			f5action
.171d	48		               pha
.171e	a9 00		               lda  #$0
.1720	8d a9 09	               sta  editmode
.1723	ad aa 09	               lda  fkeyset
.1726	d0 4b		               bne  menub
.1728	20 4c c4	               jsr  pushreg
.172b	a2 56		               ldx  #<blankmsg
.172d	a0 1b		               ldy  #>blankmsg
.172f	20 75 c3	               jsr  putscxy
.1732	a2 5b		               ldx  #<f5a_msg
.1734	a0 1c		               ldy  #>f5a_msg
.1736	20 75 c3	               jsr  putscxy
.1739	20 7b c4	               jsr  popreg
.173c	20 4c c4	               jsr  pushreg
.173f	ad d4 20	               lda  f5abutton
.1742	48		               pha
.1743	a9 92		               lda  #146
.1745	8d e6 20	               sta  f5abutton+18
.1748	a9 01		               lda  #flashcol
.174a	8d d4 20	               sta  f5abutton
.174d	a2 d4		               ldx  #<f5abutton
.174f	a0 20		               ldy  #>f5abutton
.1751	20 75 c3	               jsr  putscxy
.1754	20 75 13	               jsr  delay
.1757	a9 12		               lda  #18
.1759	8d e6 20	               sta  f5abutton+18
.175c	68		               pla
.175d	8d d4 20	               sta  f5abutton
.1760	a2 d4		               ldx  #<f5abutton
.1762	a0 20		               ldy  #>f5abutton
.1764	20 75 c3	               jsr  putscxy
.1767	20 7b c4	               jsr  popreg
.176a	20 d5 1a	               jsr  clearchar
.176d	20 0c 10	               jsr  drawbitmap
.1770	4c bb 17	               jmp  out
.1773			menub
.1773	20 4c c4	               jsr  pushreg
.1776	a2 56		               ldx  #<blankmsg
.1778	a0 1b		               ldy  #>blankmsg
.177a	20 75 c3	               jsr  putscxy
.177d	a2 2f		               ldx  #<f5b_msg
.177f	a0 1d		               ldy  #>f5b_msg
.1781	20 75 c3	               jsr  putscxy
.1784	20 7b c4	               jsr  popreg
.1787	20 4c c4	               jsr  pushreg
.178a	ad ac 21	               lda  f5bbutton
.178d	48		               pha
.178e	a9 92		               lda  #146
.1790	8d be 21	               sta  f5bbutton+18
.1793	a9 01		               lda  #flashcol
.1795	8d ac 21	               sta  f5bbutton
.1798	a2 ac		               ldx  #<f5bbutton
.179a	a0 21		               ldy  #>f5bbutton
.179c	20 75 c3	               jsr  putscxy
.179f	20 75 13	               jsr  delay
.17a2	a9 12		               lda  #18
.17a4	8d be 21	               sta  f5bbutton+18
.17a7	68		               pla
.17a8	8d ac 21	               sta  f5bbutton
.17ab	a2 ac		               ldx  #<f5bbutton
.17ad	a0 21		               ldy  #>f5bbutton
.17af	20 75 c3	               jsr  putscxy
.17b2	20 7b c4	               jsr  popreg
.17b5	20 12 1a	               jsr  scrollup
.17b8	20 0c 10	               jsr  drawbitmap
.17bb	68		out            pla
.17bc	20 4c c4	               jsr  pushreg
.17bf	a2 56		               ldx  #<blankmsg
.17c1	a0 1b		               ldy  #>blankmsg
.17c3	20 75 c3	               jsr  putscxy
.17c6	a2 82		               ldx  #<prompt_msg
.17c8	a0 1b		               ldy  #>prompt_msg
.17ca	20 75 c3	               jsr  putscxy
.17cd	20 7b c4	               jsr  popreg
.17d0	60		               rts
.17d1			f6action
.17d1	48		               pha
.17d2	a9 00		               lda  #$0
.17d4	8d a9 09	               sta  editmode
.17d7	ad aa 09	               lda  fkeyset
.17da	d0 4b		               bne  menub
.17dc	20 4c c4	               jsr  pushreg
.17df	a2 56		               ldx  #<blankmsg
.17e1	a0 1b		               ldy  #>blankmsg
.17e3	20 75 c3	               jsr  putscxy
.17e6	a2 77		               ldx  #<f6a_msg
.17e8	a0 1c		               ldy  #>f6a_msg
.17ea	20 75 c3	               jsr  putscxy
.17ed	20 7b c4	               jsr  popreg
.17f0	20 4c c4	               jsr  pushreg
.17f3	ad ef 20	               lda  f6abutton
.17f6	48		               pha
.17f7	a9 92		               lda  #146
.17f9	8d 01 21	               sta  f6abutton+18
.17fc	a9 01		               lda  #flashcol
.17fe	8d ef 20	               sta  f6abutton
.1801	a2 ef		               ldx  #<f6abutton
.1803	a0 20		               ldy  #>f6abutton
.1805	20 75 c3	               jsr  putscxy
.1808	20 75 13	               jsr  delay
.180b	a9 12		               lda  #18
.180d	8d 01 21	               sta  f6abutton+18
.1810	68		               pla
.1811	8d ef 20	               sta  f6abutton
.1814	a2 ef		               ldx  #<f6abutton
.1816	a0 20		               ldy  #>f6abutton
.1818	20 75 c3	               jsr  putscxy
.181b	20 7b c4	               jsr  popreg
.181e	20 cb 1a	               jsr  fillchar
.1821	20 0c 10	               jsr  drawbitmap
.1824	4c 6f 18	               jmp  out
.1827			menub
.1827	20 4c c4	               jsr  pushreg
.182a	a2 56		               ldx  #<blankmsg
.182c	a0 1b		               ldy  #>blankmsg
.182e	20 75 c3	               jsr  putscxy
.1831	a2 4f		               ldx  #<f6b_msg
.1833	a0 1d		               ldy  #>f6b_msg
.1835	20 75 c3	               jsr  putscxy
.1838	20 7b c4	               jsr  popreg
.183b	20 4c c4	               jsr  pushreg
.183e	ad c7 21	               lda  f6bbutton
.1841	48		               pha
.1842	a9 92		               lda  #146
.1844	8d d9 21	               sta  f6bbutton+18
.1847	a9 01		               lda  #flashcol
.1849	8d c7 21	               sta  f6bbutton
.184c	a2 c7		               ldx  #<f6bbutton
.184e	a0 21		               ldy  #>f6bbutton
.1850	20 75 c3	               jsr  putscxy
.1853	20 75 13	               jsr  delay
.1856	a9 12		               lda  #18
.1858	8d d9 21	               sta  f6bbutton+18
.185b	68		               pla
.185c	8d c7 21	               sta  f6bbutton
.185f	a2 c7		               ldx  #<f6bbutton
.1861	a0 21		               ldy  #>f6bbutton
.1863	20 75 c3	               jsr  putscxy
.1866	20 7b c4	               jsr  popreg
.1869	20 4a 1a	               jsr  scrolldown
.186c	20 0c 10	               jsr  drawbitmap
.186f	68		out            pla
.1870	20 4c c4	               jsr  pushreg
.1873	a2 56		               ldx  #<blankmsg
.1875	a0 1b		               ldy  #>blankmsg
.1877	20 75 c3	               jsr  putscxy
.187a	a2 82		               ldx  #<prompt_msg
.187c	a0 1b		               ldy  #>prompt_msg
.187e	20 75 c3	               jsr  putscxy
.1881	20 7b c4	               jsr  popreg
.1884	60		               rts
.1885			f7action
.1885	48		               pha
.1886	a9 00		               lda  #$0
.1888	8d a9 09	               sta  editmode
.188b	ad aa 09	               lda  fkeyset
.188e	d0 4b		               bne  menub
.1890	20 4c c4	               jsr  pushreg
.1893	a2 56		               ldx  #<blankmsg
.1895	a0 1b		               ldy  #>blankmsg
.1897	20 75 c3	               jsr  putscxy
.189a	a2 94		               ldx  #<f7a_msg
.189c	a0 1c		               ldy  #>f7a_msg
.189e	20 75 c3	               jsr  putscxy
.18a1	20 7b c4	               jsr  popreg
.18a4	20 4c c4	               jsr  pushreg
.18a7	ad 0a 21	               lda  f7abutton
.18aa	48		               pha
.18ab	a9 92		               lda  #146
.18ad	8d 1c 21	               sta  f7abutton+18
.18b0	a9 01		               lda  #flashcol
.18b2	8d 0a 21	               sta  f7abutton
.18b5	a2 0a		               ldx  #<f7abutton
.18b7	a0 21		               ldy  #>f7abutton
.18b9	20 75 c3	               jsr  putscxy
.18bc	20 75 13	               jsr  delay
.18bf	a9 12		               lda  #18
.18c1	8d 1c 21	               sta  f7abutton+18
.18c4	68		               pla
.18c5	8d 0a 21	               sta  f7abutton
.18c8	a2 0a		               ldx  #<f7abutton
.18ca	a0 21		               ldy  #>f7abutton
.18cc	20 75 c3	               jsr  putscxy
.18cf	20 7b c4	               jsr  popreg
.18d2	20 df 10	               jsr  copycharset
.18d5	20 0c 10	               jsr  drawbitmap
.18d8	4c 28 19	               jmp  out
.18db	a9 00		menub          lda  #$0
.18dd	8d a9 09	               sta  editmode
.18e0	20 4c c4	               jsr  pushreg
.18e3	a2 56		               ldx  #<blankmsg
.18e5	a0 1b		               ldy  #>blankmsg
.18e7	20 75 c3	               jsr  putscxy
.18ea	a2 6e		               ldx  #<f7b_msg
.18ec	a0 1d		               ldy  #>f7b_msg
.18ee	20 75 c3	               jsr  putscxy
.18f1	20 7b c4	               jsr  popreg
.18f4	20 4c c4	               jsr  pushreg
.18f7	ad e2 21	               lda  f7bbutton
.18fa	48		               pha
.18fb	a9 92		               lda  #146
.18fd	8d f4 21	               sta  f7bbutton+18
.1900	a9 01		               lda  #flashcol
.1902	8d e2 21	               sta  f7bbutton
.1905	a2 e2		               ldx  #<f7bbutton
.1907	a0 21		               ldy  #>f7bbutton
.1909	20 75 c3	               jsr  putscxy
.190c	20 75 13	               jsr  delay
.190f	a9 12		               lda  #18
.1911	8d f4 21	               sta  f7bbutton+18
.1914	68		               pla
.1915	8d e2 21	               sta  f7bbutton
.1918	a2 e2		               ldx  #<f7bbutton
.191a	a0 21		               ldy  #>f7bbutton
.191c	20 75 c3	               jsr  putscxy
.191f	20 7b c4	               jsr  popreg
.1922	20 f2 19	               jsr  reverse
.1925	20 0c 10	               jsr  drawbitmap
.1928	68		out            pla
.1929	20 4c c4	               jsr  pushreg
.192c	a2 56		               ldx  #<blankmsg
.192e	a0 1b		               ldy  #>blankmsg
.1930	20 75 c3	               jsr  putscxy
.1933	a2 82		               ldx  #<prompt_msg
.1935	a0 1b		               ldy  #>prompt_msg
.1937	20 75 c3	               jsr  putscxy
.193a	20 7b c4	               jsr  popreg
.193d	60		               rts
.193e			f8action
.193e	08		               php
.193f	48		               pha
.1940	a9 00		               lda  #$0
.1942	8d a9 09	               sta  editmode
.1945	ad aa 09	               lda  fkeyset
.1948	d0 45		               bne  menub
.194a	20 4c c4	               jsr  pushreg
.194d	a2 56		               ldx  #<blankmsg
.194f	a0 1b		               ldy  #>blankmsg
.1951	20 75 c3	               jsr  putscxy
.1954	a2 aa		               ldx  #<menub_msg
.1956	a0 1d		               ldy  #>menub_msg
.1958	20 75 c3	               jsr  putscxy
.195b	20 7b c4	               jsr  popreg
.195e	20 4c c4	               jsr  pushreg
.1961	ad 25 21	               lda  f8abutton
.1964	48		               pha
.1965	a9 92		               lda  #146
.1967	8d 37 21	               sta  f8abutton+18
.196a	a9 01		               lda  #flashcol
.196c	8d 25 21	               sta  f8abutton
.196f	a2 25		               ldx  #<f8abutton
.1971	a0 21		               ldy  #>f8abutton
.1973	20 75 c3	               jsr  putscxy
.1976	20 75 13	               jsr  delay
.1979	a9 12		               lda  #18
.197b	8d 37 21	               sta  f8abutton+18
.197e	68		               pla
.197f	8d 25 21	               sta  f8abutton
.1982	a2 25		               ldx  #<f8abutton
.1984	a0 21		               ldy  #>f8abutton
.1986	20 75 c3	               jsr  putscxy
.1989	20 7b c4	               jsr  popreg
.198c	4c d1 19	               jmp  swapit
.198f			menub
.198f	20 4c c4	               jsr  pushreg
.1992	a2 56		               ldx  #<blankmsg
.1994	a0 1b		               ldy  #>blankmsg
.1996	20 75 c3	               jsr  putscxy
.1999	a2 85		               ldx  #<menua_msg
.199b	a0 1d		               ldy  #>menua_msg
.199d	20 75 c3	               jsr  putscxy
.19a0	20 7b c4	               jsr  popreg
.19a3	20 4c c4	               jsr  pushreg
.19a6	ad fd 21	               lda  f8bbutton
.19a9	48		               pha
.19aa	a9 92		               lda  #146
.19ac	8d 0f 22	               sta  f8bbutton+18
.19af	a9 01		               lda  #flashcol
.19b1	8d fd 21	               sta  f8bbutton
.19b4	a2 fd		               ldx  #<f8bbutton
.19b6	a0 21		               ldy  #>f8bbutton
.19b8	20 75 c3	               jsr  putscxy
.19bb	20 75 13	               jsr  delay
.19be	a9 12		               lda  #18
.19c0	8d 0f 22	               sta  f8bbutton+18
.19c3	68		               pla
.19c4	8d fd 21	               sta  f8bbutton
.19c7	a2 fd		               ldx  #<f8bbutton
.19c9	a0 21		               ldy  #>f8bbutton
.19cb	20 75 c3	               jsr  putscxy
.19ce	20 7b c4	               jsr  popreg
.19d1	49 ff		swapit         eor  #$ff
.19d3	8d aa 09	               sta  fkeyset
.19d6	20 8f 11	               jsr  drawfkeys
.19d9	68		               pla
.19da	48		               pha
.19db	20 4c c4	               jsr  pushreg
.19de	a2 56		               ldx  #<blankmsg
.19e0	a0 1b		               ldy  #>blankmsg
.19e2	20 75 c3	               jsr  putscxy
.19e5	a2 82		               ldx  #<prompt_msg
.19e7	a0 1b		               ldy  #>prompt_msg
.19e9	20 75 c3	               jsr  putscxy
.19ec	20 7b c4	               jsr  popreg
.19ef	68		               pla
.19f0	28		               plp
.19f1	60		               rts
.19f2			reverse
.19f2	20 de c3	               jsr  pushall
.19f5	48		               pha
.19f6	ad af 09	               lda  mapaddr
.19f9	85 fd		               sta  $fd
.19fb	ad b0 09	               lda  mapaddr+1
.19fe	85 fe		               sta  $fe
.1a00	68		               pla
.1a01	a0 00		               ldy  #$00
.1a03	b1 fd		again          lda  (zpage2),y
.1a05	49 ff		               eor  #$ff
.1a07	91 fd		               sta  (zpage2),y
.1a09	c8		               iny
.1a0a	c0 08		               cpy  #$08
.1a0c	d0 f5		               bne  again
.1a0e	20 19 c4	               jsr  popall
.1a11	60		               rts
.1a12			scrollup
.1a12	20 de c3	               jsr  pushall
.1a15	48		               pha
.1a16	ad af 09	               lda  mapaddr
.1a19	85 fb		               sta  $fb
.1a1b	ad b0 09	               lda  mapaddr+1
.1a1e	85 fc		               sta  $fc
.1a20	68		               pla
.1a21	48		               pha
.1a22	ad af 09	               lda  mapaddr
.1a25	85 fd		               sta  $fd
.1a27	ad b0 09	               lda  mapaddr+1
.1a2a	85 fe		               sta  $fe
.1a2c	68		               pla
.1a2d	20 51 c5	               jsr  inczp2
.1a30	a0 00		               ldy  #$00
.1a32	b1 fb		               lda  (zpage1),y
.1a34	8d 49 1a	               sta  tmpbyte
.1a37	b1 fd		again          lda  (zpage2),y
.1a39	91 fb		               sta  (zpage1),y
.1a3b	c8		               iny
.1a3c	c0 07		               cpy  #$07
.1a3e	d0 f7		               bne  again
.1a40	ad 49 1a	               lda  tmpbyte
.1a43	91 fb		               sta  (zpage1),y
.1a45	20 19 c4	               jsr  popall
.1a48	60		               rts
>1a49	00		tmpbyte        .byte     $00
.1a4a			scrolldown
.1a4a	20 de c3	               jsr  pushall
.1a4d	48		               pha
.1a4e	ad af 09	               lda  mapaddr
.1a51	85 fb		               sta  $fb
.1a53	ad b0 09	               lda  mapaddr+1
.1a56	85 fc		               sta  $fc
.1a58	68		               pla
.1a59	48		               pha
.1a5a	ad af 09	               lda  mapaddr
.1a5d	85 fd		               sta  $fd
.1a5f	ad b0 09	               lda  mapaddr+1
.1a62	85 fe		               sta  $fe
.1a64	68		               pla
.1a65	20 51 c5	               jsr  inczp2
.1a68	a0 07		               ldy  #$07                ;xxxxxxxx zpage1
.1a6a	b1 fb		               lda  (zpage1),y          ;xxxxxxxx zpage2
.1a6c	8d 83 1a	               sta  tmpbyte             ;xxxxxxxx
.1a6f	88		again          dey                      ;xxxxxxxx
.1a70	b1 fb		               lda  (zpage1),y          ;xxxxxxxx
.1a72	91 fd		               sta  (zpage2),y          ;xxxxxxxx
.1a74	c0 00		               cpy  #$00                ;xxxxxxxx
.1a76	d0 f7		               bne  again               ;xxxxxxxx
.1a78	a0 00		               ldy  #$00
.1a7a	ad 83 1a	               lda  tmpbyte
.1a7d	91 fb		               sta  (zpage1),y
.1a7f	20 19 c4	               jsr  popall
.1a82	60		               rts
>1a83	00		tmpbyte        .byte     $00
.1a84			scrollright
.1a84	20 de c3	               jsr  pushall
.1a87	48		               pha
.1a88	ad af 09	               lda  mapaddr
.1a8b	85 fb		               sta  $fb
.1a8d	ad b0 09	               lda  mapaddr+1
.1a90	85 fc		               sta  $fc
.1a92	68		               pla
.1a93	a0 00		               ldy  #$00
.1a95	b1 fb		again          lda  (zpage1),y
.1a97	18		               clc
.1a98	6a		               ror
.1a99	90 03		               bcc  zero
.1a9b	18		               clc
.1a9c	69 80		one            adc  #$80
.1a9e	91 fb		zero           sta  (zpage1),y
.1aa0	c8		               iny
.1aa1	c0 08		               cpy  #$08
.1aa3	d0 f0		               bne  again
.1aa5	20 19 c4	               jsr  popall
.1aa8	60		               rts
.1aa9			scrollleft
.1aa9	20 de c3	               jsr  pushall
.1aac	48		               pha
.1aad	ad af 09	               lda  mapaddr
.1ab0	85 fb		               sta  $fb
.1ab2	ad b0 09	               lda  mapaddr+1
.1ab5	85 fc		               sta  $fc
.1ab7	68		               pla
.1ab8	a0 00		               ldy  #$00
.1aba	b1 fb		again          lda  (zpage1),y
.1abc	18		               clc
.1abd	2a		               rol
.1abe	69 00		               adc  #$00
.1ac0	91 fb		               sta  (zpage1),y
.1ac2	c8		               iny
.1ac3	c0 08		               cpy  #$08
.1ac5	d0 f3		               bne  again
.1ac7	20 19 c4	               jsr  popall
.1aca	60		               rts
.1acb			fillchar
.1acb	08		               php
.1acc	48		               pha
.1acd	a9 ff		               lda  #$ff
.1acf	20 df 1a	               jsr  allsame
.1ad2	68		               pla
.1ad3	28		               plp
.1ad4	60		               rts
.1ad5			clearchar
.1ad5	08		               php
.1ad6	48		               pha
.1ad7	a9 00		               lda  #$00
.1ad9	20 df 1a	               jsr  allsame
.1adc	68		               pla
.1add	28		               plp
.1ade	60		               rts
.1adf			allsame
.1adf	48		               pha
.1ae0	ad af 09	               lda  mapaddr
.1ae3	85 fd		               sta  $fd
.1ae5	ad b0 09	               lda  mapaddr+1
.1ae8	85 fe		               sta  $fe
.1aea	68		               pla
.1aeb	a0 00		               ldy  #$00
.1aed	91 fd		again          sta  (zpage2),y
.1aef	c8		               iny
.1af0	c0 08		               cpy  #$08
.1af2	d0 f9		               bne  again
.1af4	60		               rts
.1af5			fliphorz
.1af5	20 de c3	               jsr  pushall
.1af8	48		               pha
.1af9	ad af 09	               lda  mapaddr
.1afc	85 fd		               sta  $fd
.1afe	ad b0 09	               lda  mapaddr+1
.1b01	85 fe		               sta  $fe
.1b03	68		               pla
.1b04	a0 00		               ldy  #$00
.1b06	b1 fd		nextbyte       lda  (zpage2),y
.1b08	a2 00		               ldx  #$00
.1b0a	2a		rolagain       rol
.1b0b	6e 21 1b	               ror  tmpbyte
.1b0e	e8		               inx
.1b0f	e0 08		               cpx  #$08
.1b11	30 f7		               bmi  rolagain
.1b13	ad 21 1b	               lda  tmpbyte
.1b16	91 fd		               sta  (zpage2),y
.1b18	c8		               iny
.1b19	c0 08		               cpy  #$08
.1b1b	30 e9		               bmi  nextbyte
.1b1d	20 19 c4	               jsr  popall
.1b20	60		               rts
>1b21	00		tmpbyte        .byte     $00
.1b22			flipvert
.1b22	20 de c3	               jsr  pushall
.1b25	48		               pha
.1b26	ad af 09	               lda  mapaddr
.1b29	85 fd		               sta  $fd
.1b2b	ad b0 09	               lda  mapaddr+1
.1b2e	85 fe		               sta  $fe
.1b30	68		               pla
.1b31	a0 00		               ldy  #$00
.1b33	b1 fd		tostack        lda  (zpage2),y
.1b35	48		               pha
.1b36	c8		               iny
.1b37	c0 08		               cpy  #$08
.1b39	d0 f8		               bne  tostack
.1b3b	a0 00		               ldy  #$00
.1b3d	68		fromstack      pla
.1b3e	91 fd		               sta  (zpage2),y
.1b40	c8		               iny
.1b41	c0 08		               cpy  #$08
.1b43	d0 f8		               bne  fromstack
.1b45	20 19 c4	               jsr  popall
.1b48	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: strings_fr.asm

>1b49	0a 01 05	editor_msg     .byte vrose,1,5
>1b4c	5b 45 44 49	               .null     "[editeur]"
>1b50	54 45 55 52 5d 00
>1b56	03 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>1b5a	20 20 20 20	               .null     "                                       "
>1b5e	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b6e	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b7e	20 20 20 00
>1b82	03 00 05 92	prompt_msg     .byte     mesgcol,0,5,146
>1b86	20 55 54 49	               .null     " utilisez les clefs de fonction:       "
>1b8a	4c 49 53 45 5a 20 4c 45 53 20 43 4c 45 46 53 20
>1b9a	44 45 20 46 4f 4e 43 54 49 4f 4e 3a 20 20 20 20
>1baa	20 20 20 00
>1bae	03 00 05 92	wait_msg       .byte     mesgcol,0,5,146
>1bb2	20 55 4e 20	               .null     " un instant s.v.p. ... "
>1bb6	49 4e 53 54 41 4e 54 20 53 2e 56 2e 50 2e 20 2e
>1bc6	2e 2e 20 00
.1bca			f1a_msg
>1bca	03 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>1bce	20 4d 4f 44	               .null     " mode edit: chr$(   )",146
>1bd2	45 20 45 44 49 54 3a 20 43 48 52 24 28 20 20 20
>1be2	29 92 00
.1be5			f2a_msg
>1be5	03 00 05	copy_msg       .byte     mesgcol,0,5
>1be8	20 45 4e 54	               .null     " entez le character a copier:"
>1bec	45 5a 20 4c 45 20 43 48 41 52 41 43 54 45 52 20
>1bfc	41 20 43 4f 50 49 45 52 3a 00
.1c06			f3a_msg
>1c06	03 00 05 92	save_msg       .byte     mesgcol,0,5,146
>1c0a	20 53 41 55	               .null     " sauvegarder sur quel lecteur? (1/8/9): "
>1c0e	56 45 47 41 52 44 45 52 20 53 55 52 20 51 55 45
>1c1e	4c 20 4c 45 43 54 45 55 52 3f 20 28 31 2f 38 2f
>1c2e	39 29 3a 20 00
.1c33			f4a_msg
>1c33	03 00 05 92	load_msg       .byte     mesgcol,0,5,146
>1c37	20 43 48 41	               .null     " charger de quel lecteur? (1,8,9): "
>1c3b	52 47 45 52 20 44 45 20 51 55 45 4c 20 4c 45 43
>1c4b	54 45 55 52 3f 20 28 31 2c 38 2c 39 29 3a 20 00
.1c5b			f5a_msg
>1c5b	03 00 05	clear_msg      .byte     mesgcol,0,5
>1c5e	20 45 46 46	               .null     " effacer char: chr$(   )"
>1c62	41 43 45 52 20 43 48 41 52 3a 20 43 48 52 24 28
>1c72	20 20 20 29 00
.1c77			f6a_msg
>1c77	03 00 05	fill_msg       .byte     mesgcol,0,5
>1c7a	20 52 45 4d	               .null     " remplir char:  chr$(   )"
>1c7e	50 4c 49 52 20 43 48 41 52 3a 20 20 43 48 52 24
>1c8e	28 20 20 20 29 00
.1c94			f7a_msg
>1c94	03 00 05	work_msg       .byte     mesgcol,0,5
>1c97	20 52 45 43	               .null     " recuperer les caracteres du chargen."
>1c9b	55 50 45 52 45 52 20 4c 45 53 20 43 41 52 41 43
>1cab	54 45 52 45 53 20 44 55 20 43 48 41 52 47 45 4e
>1cbb	2e 00
.1cbd			f1b_msg
>1cbd	03 00 05	invr_msg       .byte     mesgcol,0,5
>1cc0	20 42 41 53	               .null     " basculer verticalement:"
>1cc4	43 55 4c 45 52 20 56 45 52 54 49 43 41 4c 45 4d
>1cd4	45 4e 54 3a 00
.1cd9			f2b_msg
>1cd9	03 00 05	flip_msg       .byte     mesgcol,0,5
>1cdc	20 42 41 53	               .null     " basculer horizontalement:"
>1ce0	43 55 4c 45 52 20 48 4f 52 49 5a 4f 4e 54 41 4c
>1cf0	45 4d 45 4e 54 3a 00
.1cf7			f3b_msg
>1cf7	03 00 05	scrollr_msg    .byte     mesgcol,0,5
>1cfa	20 44 45 46	               .null     " defiler vers la droite:"
>1cfe	49 4c 45 52 20 56 45 52 53 20 4c 41 20 44 52 4f
>1d0e	49 54 45 3a 00
.1d13			f4b_msg
>1d13	03 00 05	scrolll_msg    .byte     mesgcol,0,5
>1d16	20 44 45 46	               .null     " defiler vers la gauche:"
>1d1a	49 4c 45 52 20 56 45 52 53 20 4c 41 20 47 41 55
>1d2a	43 48 45 3a 00
.1d2f			f5b_msg
>1d2f	03 00 05	scrollu_msg    .byte     mesgcol,0,5
>1d32	20 44 45 46	               .null     " defiler 1 bit vers le haut:"
>1d36	49 4c 45 52 20 31 20 42 49 54 20 56 45 52 53 20
>1d46	4c 45 20 48 41 55 54 3a 00
.1d4f			f6b_msg
>1d4f	03 00 05	scrolld_msg    .byte     mesgcol,0,5
>1d52	20 44 45 46	               .null     " defiler 1 bit vers le bas:"
>1d56	49 4c 45 52 20 31 20 42 49 54 20 56 45 52 53 20
>1d66	4c 45 20 42 41 53 3a 00
.1d6e			f7b_msg
>1d6e	03 00 05	rvrs_msg       .byte     mesgcol,0,5
>1d71	20 49 4e 56	               .null     " inverser les bits:"
>1d75	45 52 53 45 52 20 4c 45 53 20 42 49 54 53 3a 00
>1d85	03 00 05	menua_msg      .byte     mesgcol,0,5
>1d88	20 56 4f 55	               .null     " vous etes dirige vers le menu 1."
>1d8c	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1d9c	52 53 20 4c 45 20 4d 45 4e 55 20 31 2e 00
>1daa	03 00 05	menub_msg      .byte     mesgcol,0,5
>1dad	20 56 4f 55	               .null     " vous etes dirige vers le menu 2."
>1db1	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1dc1	52 53 20 4c 45 20 4d 45 4e 55 20 32 2e 00
>1dcf	07 00 05	copychar_msg   .byte     vjaune,0,5
>1dd2	20 45 4e 54	               .null     " entrez le caracter a copier (?).",157,157,157
>1dd6	52 45 5a 20 4c 45 20 43 41 52 41 43 54 45 52 20
>1de6	41 20 43 4f 50 49 45 52 20 28 3f 29 2e 9d 9d 9d
>1df6	00
>1df7	07 00 05	fname_msg      .byte     vjaune,0,5
>1dfa	20 4e 4f 4d	               .null     " nom du fichier (6 lettres): ",$a4,$a4,$a4,$a4,$a4,$a4,".chr",157,157,157,157,157,157,157,157,157,157
>1dfe	20 44 55 20 46 49 43 48 49 45 52 20 28 36 20 4c
>1e0e	45 54 54 52 45 53 29 3a 20 a4 a4 a4 a4 a4 a4 2e
>1e1e	43 48 52 9d 9d 9d 9d 9d 9d 9d 9d 9d 9d 00
>1e2c	04 12 18 12	quit_msg       .byte     vmauve,18,24,18
>1e30	43 54 52 4c	               .text     "ctrl-x",146
>1e34	2d 58 92
>1e37	20 3d 20 51	               .null     " = quitter.   "
>1e3b	55 49 54 54 45 52 2e 20 20 20 00
>1e46	05 12 17 12	redraw_msg     .byte     vvert,18,23,18
>1e4a	43 54 52 4c	               .text     "ctrl-r",146
>1e4e	2d 52 92
>1e51	20 3d 20 52	               .null     " = rafraichir."
>1e55	41 46 52 41 49 43 48 49 52 2e 00
.1e60			menu_msg
>1e60	0d 12 18 12	exit_msg       .byte     vvert1,18,24,18
>1e64	43 54 52 4c	               .text     "ctrl-x",146
>1e68	2d 58 92
>1e6b	20 3d 20 41	               .null     " = au menu.   "
>1e6f	55 20 4d 45 4e 55 2e 20 20 20 00
>1e7a	07 04 06 12	whoami0        .byte     whoamicol,4,6,18
>1e7e	20 20 20 20	               .null     "                               ",146
>1e82	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1e92	20 20 20 20 20 20 20 20 20 20 20 92 00
>1e9f	07 04 07 12	whoami1        .byte     whoamicol,4,7,18
>1ea3	20 20 20 20	               .null     "       ",146," c h a r e d i t ",18,"       ",146
>1ea7	20 20 20 92 20 43 20 48 20 41 20 52 20 45 20 44
>1eb7	20 49 20 54 20 12 20 20 20 20 20 20 20 92 00
>1ec6	07 04 08 12	whoami2        .byte     whoamicol,4,8,18
>1eca	20 20 20 20	               .null     "                               ",146
>1ece	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1ede	20 20 20 20 20 20 20 20 20 20 20 92 00
>1eeb	07 04 09 12	whoami3        .byte     whoamicol,4,9,18
>1eef	20 54 49 52	               .null     " tirez de isbn : 0-942386-29-9 ",146
>1ef3	45 5a 20 44 45 20 49 53 42 4e 20 3a 20 30 2d 39
>1f03	34 32 33 38 36 2d 32 39 2d 39 20 92 00
>1f10	07 04 0a 12	whoami4        .byte     whoamicol,4,10,18
>1f14	20 20 20 20	               .null     "       par john heilborn       ",146
>1f18	20 20 20 50 41 52 20 4a 4f 48 4e 20 48 45 49 4c
>1f28	42 4f 52 4e 20 20 20 20 20 20 20 92 00
>1f35	07 04 0b 12	whoami5        .byte     whoamicol,4,11,18
>1f39	20 20 20 20	               .null     "                               ",146
>1f3d	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1f4d	20 20 20 20 20 20 20 20 20 20 20 92 00
>1f5a	07 04 0c 12	whoami6        .byte     whoamicol,4,12,18
>1f5e	20 20 20 20	               .null     "      code assembleur par      ",146
>1f62	20 20 43 4f 44 45 20 41 53 53 45 4d 42 4c 45 55
>1f72	52 20 50 41 52 20 20 20 20 20 20 92 00
>1f7f	07 04 0d 12	whoami7        .byte     whoamicol,4,13,18
>1f83	20 44 41 4e	               .null     " daniel lafrance quebec/canada ",146
>1f87	49 45 4c 20 4c 41 46 52 41 4e 43 45 20 51 55 45
>1f97	42 45 43 2f 43 41 4e 41 44 41 20 92 00
>1fa4	07 04 0e 12	whoami8        .byte     whoamicol,4,14,18
>1fa8	20 20 20 20	               .null     "    version:",version,"    ",146
>1fac	56 45 52 53 49 4f 4e 3a 32 30 32 35 30 39 32 35
>1fbc	2d 30 30 30 30 30 31 20 20 20 20 92 00
>1fc9	07 04 0f 12	whoami9        .byte     whoamicol,4,15,18
>1fcd	20 20 20 20	               .null     "                               ",146
>1fd1	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1fe1	20 20 20 20 20 20 20 20 20 20 20 92 00
>1fee	03 06 10 14	bye_msg        .byte     vcyan,6,16,20
>1ff2	20 20 20 20	               .null     "      bonjour et merci      ",146
>1ff6	20 20 42 4f 4e 4a 4f 55 52 20 45 54 20 4d 45 52
>2006	43 49 20 20 20 20 20 20 92 00
>2010	0d 05 18 12	any_msg        .byte     vvert1,5,24,18
>2014	20 41 50 50	               .null     " appuyez une cle pour basic ",146
>2018	55 59 45 5a 20 55 4e 45 20 43 4c 45 20 50 4f 55
>2028	52 20 42 41 53 49 43 20 92 00
>2032	03 12 07	titremenu1     .byte     menu1col1,fkeyleft,f1top-2       ;133
>2035	12 20 4a 45	               .null     18," jeu de fonctions #1 ",146
>2039	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>2049	31 20 92 00
>204d	0f 12 07	titremenu2     .byte     menu2col1,fkeyleft,f1top-2       ;133
>2050	12 20 4a 45	               .null     18," jeu de fonctions #2 ",146
>2054	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>2064	32 20 92 00
>2068	03 12 09	f1abutton      .byte     menu1col1,fkeyleft,f1top       ;133
>206b	45 44 49 54	               .text     "editer carac..."
>206f	45 52 20 43 41 52 41 43 2e 2e 2e
>207a	12		               .byte     18             ; position 15
>207b	a9 20 46 31	               .null     $a9," f1 ",223,146
>207f	20 df 92 00
>2083	0e 12 0a	f2abutton      .byte     menu1col2,fkeyleft,f1top+1     ;138
>2086	43 4f 50 49	               .text     "copier un carac"
>208a	45 52 20 55 4e 20 43 41 52 41 43
>2095	12		               .byte     18   ; position 15
>2096	20 20 46 32	               .null     "  f2  ",146
>209a	20 20 92 00
>209e	03 12 0c	f3abutton      .byte     menu1col1,fkeyleft,f1top+3     ;137
>20a1	53 41 56 45	               .text     "savegarder sur."
>20a5	47 41 52 44 45 52 20 53 55 52 2e
>20b0	12		               .byte     18            ; position 15
>20b1	a9 20 46 33	               .null     $a9," f3 ",223,146
>20b5	20 df 92 00
>20b9	0e 12 0d	f4abutton      .byte     menu1col2,fkeyleft,f1top+4     ;134
>20bc	43 48 41 52	               .text     "charger de....."
>20c0	47 45 52 20 44 45 2e 2e 2e 2e 2e
>20cb	12		               .byte     18             ; position 15
>20cc	20 20 46 34	               .null     "  f4  ",146
>20d0	20 20 92 00
>20d4	03 12 0f	f5abutton      .byte     menu1col1,fkeyleft,f1top+6     ;135
>20d7	4d 45 54 54	               .text     "mettre tout a 0"
>20db	52 45 20 54 4f 55 54 20 41 20 30
>20e6	12		               .byte     18             ; position 15
>20e7	a9 20 46 35	               .null     $a9," f5 ",223,146
>20eb	20 df 92 00
>20ef	0e 12 10	f6abutton      .byte     menu1col2,fkeyleft,f1top+7    ;139
>20f2	4d 45 54 54	               .text     "mettre tout a 1"
>20f6	52 45 20 54 4f 55 54 20 41 20 31
>2101	12		               .byte     18             ; position 15
>2102	20 20 46 36	               .null     "  f6  ",146
>2106	20 20 92 00
>210a	03 12 12	f7abutton      .byte     menu1col1,fkeyleft,f1top+9    ;136
>210d	52 45 43 55	               .text     "recuperer rom.."
>2111	50 45 52 45 52 20 52 4f 4d 2e 2e
>211c	12		               .byte     18             ; position 15
>211d	a9 20 46 37	               .null     $a9," f7 ",223,146
>2121	20 df 92 00
>2125	0e 12 13	f8abutton      .byte     menu1col2,fkeyleft,f1top+10
>2128	41 4c 4c 45	               .text     "aller au menu2."
>212c	52 20 41 55 20 4d 45 4e 55 32 2e
>2137	12		               .byte     18             ; position 15
>2138	20 20 46 38	               .null     "  f8  ", 146
>213c	20 20 92 00
>2140	0f 12 09	f1bbutton      .byte     menu2col1,fkeyleft,f1top
>2143	42 41 53 43	               .text     "basculer vert.."
>2147	55 4c 45 52 20 56 45 52 54 2e 2e
>2152	12		               .byte     18             ; position 15
>2153	a9 20 46 31	               .null     $a9," f1 ",223,146
>2157	20 df 92 00
>215b	0c 12 0a	f2bbutton      .byte     menu2col2,fkeyleft,f1top+1
>215e	42 41 53 43	               .text     "basculer horz.."
>2162	55 4c 45 52 20 48 4f 52 5a 2e 2e
>216d	12		               .byte     18             ; position 15
>216e	20 20 46 32	               .null     "  f2  ",146
>2172	20 20 92 00
>2176	0f 12 0c	f3bbutton      .byte     menu2col1,fkeyleft,f1top+3
>2179	44 45 46 49	               .text     "defiler droite."
>217d	4c 45 52 20 44 52 4f 49 54 45 2e
>2188	12		               .byte     18             ; position 15
>2189	a9 20 46 33	               .null     $a9," f3 ",223,146
>218d	20 df 92 00
>2191	0c 12 0d	f4bbutton      .byte     menu2col2,fkeyleft,f1top+4
>2194	44 45 46 49	               .text     "defiler gauche."
>2198	4c 45 52 20 47 41 55 43 48 45 2e
>21a3	12		               .byte     18             ; position 15
>21a4	20 20 46 34	               .null     "  f4  ",146
>21a8	20 20 92 00
>21ac	0f 12 0f	f5bbutton      .byte     menu2col1,fkeyleft,f1top+6
>21af	44 45 46 49	               .text     "defiler haut..."
>21b3	4c 45 52 20 48 41 55 54 2e 2e 2e
>21be	12		               .byte     18             ; position 15
>21bf	a9 20 46 35	               .null     $a9," f5 ",223,146
>21c3	20 df 92 00
>21c7	0c 12 10	f6bbutton      .byte     menu2col2,fkeyleft,f1top+7
>21ca	44 45 46 49	               .text     "defiler bas...."
>21ce	4c 45 52 20 42 41 53 2e 2e 2e 2e
>21d9	12		               .byte     18             ; position 15
>21da	20 20 46 36	               .null     "  f6  ",146
>21de	20 20 92 00
>21e2	0f 12 12	f7bbutton      .byte     menu2col1,fkeyleft,f1top+9
>21e5	49 4e 56 45	               .text     "inverser bits.."
>21e9	52 53 45 52 20 42 49 54 53 2e 2e
>21f4	12		               .byte     18             ; position 15
>21f5	a9 20 46 37	               .null     $a9," f7 ",223,146
>21f9	20 df 92 00
>21fd	0c 12 13	f8bbutton      .byte     menu2col2,fkeyleft,f1top+10
>2200	41 4c 4c 45	               .text     "aller au menu1."
>2204	52 20 41 55 20 4d 45 4e 55 31 2e
>220f	12		               .byte     18             ; position 15
>2210	20 20 46 38	               .null     "  f8  ", 146
>2214	20 20 92 00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-timer.asm

.c000			delai
.c000	98		            tya
.c001	48		            pha
.c002	a0 ff		 delaix     ldy #$ff
.c004	ea		 delaiy     nop
.c005	ea		            nop
.c006	ea		            nop
.c007	ea		            nop
.c008	ea		            nop
.c009	ea		            nop
.c00a	88		            dey
.c00b	d0 f7		            bne delaiy
.c00d	ca		            dex
.c00e	d0 f2		            bne delaix
.c010	68		            pla
.c011	a8		            tay
.c012	60		            rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-sid.asm

=0			sid_v1offset     =  0
=7			sid_v2offset     =  7
=14			sid_v3offset     =  14
>c013	18 08		vic_son         .byte   sid_v1offset + 24,  8        ; sid+24=54296,  15 Volume.
>c015	05 be		                .byte   sid_v1offset +  5,  190      ; sid+ 5=54277, 190 A.D.S = 0.
>c017	06 f8		                .byte   sid_v1offset +  6,  248      ; sid+ 6=54278, 248 S=Max, r=15
>c019	01 10		                .byte   sid_v1offset +  1,  $10      ;
>c01b	00 c4		                .byte   sid_v1offset +  0,  $c4      ;
>c01d	04 11		                .byte   sid_v1offset +  4,  %00010001; sid+ 4=54276,  17 V1S = Triangle.
>c01f	ff ff		                .byte   $ff,  $ff
>c021	0b 08		vic_son2        .byte   sid_v2offset + 4,    8      ; sid+24=54296,  15   Volume.
>c023	0c be		                .byte   sid_v2offset + 5,  190      ; sid+ 5=54277, 190   A.D.S = 0.
>c025	0d f8		                .byte   sid_v2offset + 6,  248      ; sid+ 6=54278, 248   S=Max, r=15
>c027	08 15		                .byte   sid_v2offset + 1,  $15      ; sid+ 1=54273,  20   Frequence = 40 * 256
>c029	07 20		                .byte   sid_v2offset + 0,  $20      ; sid+ 1=54273,  20   Frequence = 40 * 256
>c02b	0b 21		                .byte   sid_v2offset + 4,  %00100001; sid+ 4=54276,  17   V1S = Triangle.
>c02d	ff ff		                .byte   $ff,  $ff
>c02f	12 08		vic_son3        .byte   sid_v3offset + 4,    8      ; sid+24=54296,  15   Volume.
>c031	13 be		                .byte   sid_v3offset + 5,  190      ; sid+ 5=54277, 190   A.D.S = 0.
>c033	14 f8		                .byte   sid_v3offset + 6,  248      ; sid+ 6=54278, 248   S=Max, r=15
>c035	0f 19		                .byte   sid_v3offset + 1,  $19      ; sid+ 1=54273,  20   Frequence = 40 * 256
>c037	0e 1f		                .byte   sid_v3offset + 0,  $1f      ; sid+ 1=54273,  20   Frequence = 40 * 256
>c039	10 ff		                .byte   sid_v3offset + 2,  %11111111; sid+ 4=54276,  17   V1S = Triangle.
>c03b	12 41		                .byte   sid_v3offset + 4,  %01000001; sid+ 4=54276,  17   V1S = Triangle.
>c03d	ff ff		                .byte   $ff,  $ff
.c03f			sid_progtest
.c03f	20 de c3	                jsr pushall
.c042	a2 13		                ldx #<vic_son
.c044	a0 c0		                ldy #>vic_son
.c046	20 4d c0	                jsr sid_progdata
.c049	20 19 c4	                jsr popall
.c04c	60		                rts
.c04d			sid_progdata
.c04d	86 fb		                stx $fb
.c04f	84 fc		                sty $fc
.c051	a9 00		                lda #$00
.c053	aa		                tax
.c054	a8		                tay
.c055	b1 fb		sid_progcmd     lda ($fb),y        ; On programme le SID pour le son.
.c057	aa		                tax
.c058	c8		                iny
.c059	b1 fb		                lda ($fb),y
.c05b	c8		                iny
.c05c	e0 ff		                cpx #$ff
.c05e	f0 06		                beq sid_progout
.c060	9d 00 d4	                sta sid,x
.c063	4c 55 c0	                jmp sid_progcmd
.c066			sid_progout
.c066	60		                rts
.c067			sid_clear
.c067	08		                php
.c068	48		                pha
.c069	98		                tya
.c06a	48		                pha
.c06b	a9 00		                lda #$00
.c06d	a0 1d		                ldy #$1d
.c06f	88		sidclrreg       dey
.c070	08		                php
.c071	99 00 d4	                sta sid,y
.c074	28		                plp
.c075	d0 f8		                bne sidclrreg
.c077	68		                pla
.c078	a8		                tay
.c079	68		                pla
.c07a	28		                plp
.c07b	60		                rts
.c07c			sid_v1off
.c07c	08		                php
.c07d	48		                pha
.c07e	a9 10		                lda #%00010000
.c080	8d 04 d4	                sta vcreg1
.c083	68		                pla
.c084	28		                plp
.c085	60		                rts
.c086			sid_v2off
.c086	08		                php
.c087	48		                pha
.c088	a9 10		                lda #%00010000
.c08a	8d 0b d4	                sta vcreg2
.c08d	68		                pla
.c08e	28		                plp
.c08f	60		                rts
.c090			sid_v3off
.c090	08		                php
.c091	48		                pha
.c092	a9 10		                lda #%00010000
.c094	8d 12 d4	                sta vcreg3
.c097	68		                pla
.c098	28		                plp
.c099	60		                rts
.c09a			sid_alloff
.c09a	08		                php
.c09b	48		                pha
.c09c	a9 10		                lda #%00010000
.c09e	8d 04 d4	                sta vcreg1
.c0a1	8d 0b d4	                sta vcreg2
.c0a4	8d 12 d4	                sta vcreg3
.c0a7	68		                pla
.c0a8	28		                plp
.c0a9	60		                rts
.c0aa			sid_tada
.c0aa	20 de c3	                jsr pushall
.c0ad	a2 13		                ldx #<vic_son
.c0af	a0 c0		                ldy #>vic_son
.c0b1	20 4d c0	                jsr sid_progdata
.c0b4	20 19 c4	                jsr popall
.c0b7	20 63 c1	                jsr ti_dcroche
.c0ba	20 4c c4	                jsr pushreg
.c0bd	a9 d1		                lda #<re4
.c0bf	8d 00 d4	                sta sid+0
.c0c2	a9 12		                lda #>re4
.c0c4	8d 01 d4	                sta sid+1
.c0c7	20 7b c4	                jsr popreg
.c0ca	20 63 c1	                jsr ti_dcroche
.c0cd	20 4c c4	                jsr pushreg
.c0d0	a9 20		                lda #<mi4
.c0d2	8d 00 d4	                sta sid+0
.c0d5	a9 15		                lda #>mi4
.c0d7	8d 01 d4	                sta sid+1
.c0da	20 7b c4	                jsr popreg
.c0dd	20 63 c1	                jsr ti_dcroche
.c0e0	20 4c c4	                jsr pushreg
.c0e3	a9 61		                lda #<fa4
.c0e5	8d 00 d4	                sta sid+0
.c0e8	a9 16		                lda #>fa4
.c0ea	8d 01 d4	                sta sid+1
.c0ed	20 7b c4	                jsr popreg
.c0f0	20 63 c1	                jsr ti_dcroche
.c0f3	20 4c c4	                jsr pushreg
.c0f6	a9 1f		                lda #<sol4
.c0f8	8d 00 d4	                sta sid+0
.c0fb	a9 19		                lda #>sol4
.c0fd	8d 01 d4	                sta sid+1
.c100	20 7b c4	                jsr popreg
.c103	20 63 c1	                jsr ti_dcroche
.c106	20 4c c4	                jsr pushreg
.c109	a9 32		                lda #<la4
.c10b	8d 00 d4	                sta sid+0
.c10e	a9 1c		                lda #>la4
.c110	8d 01 d4	                sta sid+1
.c113	20 7b c4	                jsr popreg
.c116	20 63 c1	                jsr ti_dcroche
.c119	20 4c c4	                jsr pushreg
.c11c	a9 a6		                lda #<si4
.c11e	8d 00 d4	                sta sid+0
.c121	a9 1f		                lda #>si4
.c123	8d 01 d4	                sta sid+1
.c126	20 7b c4	                jsr popreg
.c129	20 63 c1	                jsr ti_dcroche
.c12c	20 4c c4	                jsr pushreg
.c12f	a9 88		                lda #<do5
.c131	8d 00 d4	                sta sid+0
.c134	a9 21		                lda #>do5
.c136	8d 01 d4	                sta sid+1
.c139	20 7b c4	                jsr popreg
.c13c	20 de c3	                jsr pushall
.c13f	a2 21		                ldx #<vic_son2
.c141	a0 c0		                ldy #>vic_son2
.c143	20 4d c0	                jsr sid_progdata
.c146	20 19 c4	                jsr popall
.c149	20 de c3	                jsr pushall
.c14c	a2 2f		                ldx #<vic_son3
.c14e	a0 c0		                ldy #>vic_son3
.c150	20 4d c0	                jsr sid_progdata
.c153	20 19 c4	                jsr popall
.c156	20 7f c1	                jsr ti_blanche
.c159	20 9a c0	                jsr sid_alloff
.c15c	60		                rts
>c15d	7c c0 86 c0	sid_lib_vector  .word   sid_v1off,sid_v2off,sid_v3off
>c161	90 c0
.c163			ti_dcroche
.c163	08		            php
.c164	48		            pha
.c165	8a		            txa
.c166	48		            pha
.c167	a2 10		            ldx #$10
.c169	20 00 c0	            jsr delai
.c16c	68		            pla
.c16d	aa		            tax
.c16e	68		            pla
.c16f	28		            plp
.c170	60		            rts
.c171			ti_croche
.c171	20 63 c1	            jsr ti_dcroche
.c174	20 63 c1	            jsr ti_dcroche
.c177	60		            rts
.c178			ti_noire
.c178	20 71 c1	            jsr ti_croche
.c17b	20 71 c1	            jsr ti_croche
.c17e	60		            rts
.c17f			ti_blanche
.c17f	20 78 c1	            jsr ti_noire
.c182	20 78 c1	            jsr ti_noire
.c185	60		            rts
.c186			ti_ronde
.c186	20 7f c1	            jsr ti_blanche
.c189	20 7f c1	            jsr ti_blanche
.c18c	60		            rts
>c18d	20 63 c1	ti_vector   .byte   $20, <ti_dcroche,>ti_dcroche
>c190	20 71 c1	            .byte   $20, <ti_croche,>ti_croche
>c193	20 78 c1	            .byte   $20, <ti_noire,>ti_noire
>c196	20 7f c1	            .byte   $20, <ti_blanche,>ti_blanche
>c199	20 86 c1	            .byte   $20, <ti_ronde,>ti_ronde
.c19c	20 8d c1	            jsr ti_vector

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-vicii.asm

.c19f			screendis
.c19f	08		               php
.c1a0	48		               pha
.c1a1	ad 11 d0	               lda  $d011
.c1a4	29 ef		               and  #%11101111
.c1a6	8d 11 d0	               sta  $d011
.c1a9	68		               pla
.c1aa	28		               plp
.c1ab	60		               rts
.c1ac			screenena
.c1ac	08		               php
.c1ad	48		               pha
.c1ae	ad 11 d0	               lda  $d011
.c1b1	09 10		               ora  #%00010000
.c1b3	8d 11 d0	               sta  $d011
.c1b6	68		               pla
.c1b7	28		               plp
.c1b8	60		               rts
=8192			bmpram = 8192
.c1b9			victohighres
.c1b9	08		               php
.c1ba	48		               pha
.c1bb	ad 11 d0	               lda  vicmiscfnc
.c1be	09 20		               ora  #%00100000     ; 32
.c1c0	8d 11 d0	               sta  vicmiscfnc
.c1c3	ad 18 d0	               lda  vicmemptr
.c1c6	09 08		               ora  #%00001000     ; $08
.c1c8	8d 18 d0	               sta  vicmemptr
.c1cb	a9 ff		               lda  #$ff           ; 255
.c1cd	85 37		               sta  $0037
.c1cf	a9 1f		               lda  #$1f           ; 31
.c1d1	85 38		               sta  $0038
.c1d3	68		               pla
.c1d4	28		               plp
.c1d5	60		               rts
.c1d6			victonormal
.c1d6	08		               php
.c1d7	48		               pha
.c1d8	ad 11 d0	               lda  vicmiscfnc
.c1db	29 df		               and  #%11011111     ; 233
.c1dd	8d 11 d0	               sta  vicmiscfnc
.c1e0	ad 18 d0	               lda  vicmemptr
.c1e3	29 f7		               and  #%11110111     ; $08
.c1e5	8d 18 d0	               sta  vicmemptr
.c1e8	a9 00		               lda  #$00
.c1ea	85 37		               sta  $0037
.c1ec	a9 a0		               lda  #$a0
.c1ee	85 38		               sta  $0038
.c1f0	20 cb c2	               jsr  cls
.c1f3	68		               pla
.c1f4	28		               plp
.c1f5	60		               rts
.c1f6			vicbmpclear
.c1f6	20 de c3	               jsr  push
.c1f9	a9 04		               lda  #cmauve
.c1fb	20 24 c2	               jsr  setvicbmpbackcol
.c1fe	a9 00		               lda  #<8192              ; Place le LSB de 8192 ...
.c200	85 fb		               sta  zpage1              ; ... dans le lsb de zpage1.
.c202	a9 20		               lda  #>8192              ; Place le MSB de 8192 ...
.c204	85 fc		               sta  zpage1+1            ; ... dans le Msb de zpage1.
.c206	48		               pha
.c207	a9 ff		               lda  #<$0000+(8191)
.c209	8d 02 c6	               sta  loopcount
.c20c	a9 1f		               lda  #>$0000+(8191)
.c20e	8d 03 c6	               sta  loopcount+1
.c211	68		               pla
.c212	a0 00		               ldy  #$00
.c214	a9 0f		next           lda  #$0f
.c216	91 fb		               sta  (zpage1),y
.c218	20 33 c5	               jsr  inczpage1
.c21b	20 e2 c5	               jsr  loop
.c21e	d0 f4		               bne  next
.c220	20 19 c4	               jsr  pop
.c223	60		               rts
.c224			setvicbmpbackcol
.c224	20 de c3	               jsr  push
.c227	29 0f		               and  #$0f
.c229	8d 57 c2	               sta  vicbmpbackcol
.c22c	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.c22e	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.c230	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.c232	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.c234	48		               pha
.c235	a9 00		               lda  #<$0000+(1024)
.c237	8d 02 c6	               sta  loopcount
.c23a	a9 04		               lda  #>$0000+(1024)
.c23c	8d 03 c6	               sta  loopcount+1
.c23f	68		               pla
.c240	a0 00		               ldy  #$00
.c242	b1 fb		next           lda  (zpage1),y
.c244	29 f0		               and  #$f0
.c246	0d 57 c2	               ora  vicbmpbackcol
.c249	91 fb		               sta  (zpage1),y
.c24b	20 33 c5	               jsr  inczpage1
.c24e	20 e2 c5	               jsr  loop
.c251	d0 ef		               bne  next
.c253	20 19 c4	               jsr  pop
.c256	60		               rts
>c257	00		vicbmpbackcol  .byte     $00
.c258			setvicbmpforecol
.c258	20 de c3	               jsr  push
.c25b	2a		               rol
.c25c	2a		               rol
.c25d	2a		               rol
.c25e	2a		               rol
.c25f	29 f0		               and  #$f0
.c261	8d 8f c2	               sta  vicbmpforecol
.c264	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.c266	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.c268	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.c26a	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.c26c	48		               pha
.c26d	a9 00		               lda  #<$0000+(1024)
.c26f	8d 02 c6	               sta  loopcount
.c272	a9 04		               lda  #>$0000+(1024)
.c274	8d 03 c6	               sta  loopcount+1
.c277	68		               pla
.c278	a0 00		               ldy  #$00
.c27a	b1 fb		next           lda  (zpage1),y
.c27c	29 0f		               and  #$0f
.c27e	0d 8f c2	               ora  vicbmpforecol
.c281	91 fb		               sta  (zpage1),y
.c283	20 33 c5	               jsr  inczpage1
.c286	20 e2 c5	               jsr  loop
.c289	d0 ef		               bne  next
.c28b	20 19 c4	               jsr  pop
.c28e	60		               rts
>c28f	00		vicbmpforecol  .byte     $00
.c290			bmphrcalccoords
.c290	20 de c3	               jsr  push
.c293	18		               clc       ; On met Carry à 0
.c294	6a		               ror       ; le bit 0 de a dans carry  ?/2
.c295	8a		               txa       ; x dans a
.c296	4a		               lsr       ; ?/4
.c297	4a		               lsr       ; ?/8 a = (ax)/8
.c298	8d a9 c2	               sta  bmphrcol
.c29b	98		               tya       ; Y dans a
.c29c	4a		               lsr       ; ?/2
.c29d	4a		               lsr       ; ?/4
.c29e	4a		               lsr       ; ?/8 a=Y/8
.c29f	8d a8 c2	               sta  bmphrrow
.c2a2	48		               pha
.c2a3	98		               tya
.c2a4	20 19 c4	               jsr  pop
.c2a7	60		               rts
.c2a8			vicbmpfill
>c2a8	00		bmphrrow       .byte     $00
>c2a9	00		bmphrcol       .byte     $00
>c2aa	00		bmphrmask      .byte     $00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

.c2ab			scrmaninit
.c2ab	20 4c c4	               jsr  pushreg        ; Sauvegarde tous les registres
.c2ae	20 9f c1	               jsr  screendis      ; Disable screen
.c2b1	a9 06		               lda  #vbleu         ; Place bleue pour la couleur
.c2b3	8d 21 d0	               sta  vicbackcol     ;   d'arrière plan,
.c2b6	a9 05		               lda  #vvert         ; vert pour la couleur
.c2b8	8d 20 d0	               sta  vicbordcol     ;   de la bordure d'écran,
.c2bb	a9 01		               lda  #vblanc        ;   et blanc pour la couleur du
.c2bd	8d 86 02	               sta  bascol         ; texte.
.c2c0	20 cb c2	               jsr  cls            ; Efface l'écran.
.c2c3	20 ac c1	               jsr  screenena      ; enable screen
.c2c6	20 7b c4	               jsr  popreg         ; Récupère tous les registres.
.c2c9	60		               rts
>c2ca	8e		characterset   .byte b_uppercase
.c2cb			cls
.c2cb	08		               php                 ; Sauvegarde les registres
.c2cc	48		               pha                 ;   modifiés.
.c2cd	a9 93		               lda  #$93           ; Affiche le code basic de
.c2cf	20 d2 ff	               jsr  chrout         ;   d'effacement d'écran.
.c2d2	68		               pla                 ; Récupère les registres
.c2d3	28		               plp                 ;   modifiés.
.c2d4	60		               rts
.c2d5			putnch
.c2d5	20 4c c4	               jsr  pushreg        ; Sauvegarde tous les registres.
.c2d8	20 d2 ff	again          jsr  chrout         ; On affiche A.
.c2db	ca		               dex                 ; Un de moins à faire.
.c2dc	d0 fa		               bne  again          ; Si pas à 0 on en affiche encore.
.c2de	20 7b c4	out            jsr  popreg         ; Récupère tous les registres.
.c2e1	60		               rts
.c2e2			putch
.c2e2	08		               php                 ; Sauvegarde le registre de status.
.c2e3	20 d2 ff	               jsr  chrout         ; Affiche le caractère de Acc.
.c2e6	28		               plp                 ; Récupère le registre de status.
.c2e7	60		               rts
.c2e8			puts
.c2e8	20 de c3	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.c2eb	86 fb		               stx  zpage1         ; Place l'adresse de la chaine
.c2ed	84 fc		               sty  zpage1+1       ;   dans ZP1.
.c2ef	a0 00		               ldy  #0             ; Initialise l'index du mode (ZP),Y
.c2f1	b1 fb		next           lda  (zpage1),y     ; Lit un charactère.
.c2f3	f0 09		               beq  exit           ; Si $00 on sort.
.c2f5	20 d2 ff	               jsr  chrout         ; Affiche le caractères.
.c2f8	20 33 c5	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.c2fb	4c f1 c2	               jmp  next           ; Saute chercher le prochain carac.
.c2fe	20 19 c4	exit           jsr  popall         ; Récupère registre, ZP1 et ZP2.
.c301	60		               rts
.c302			gotoxy
.c302	08		               php                 ; Sauvegarde le registre de
.c303	48		               pha                 ;   status et le registre a.
.c304	18		               clc                 ; Carry = 1 pour que kplot
.c305	8a		               txa                 ;   positionne le curseur.
.c306	48		               pha                 ; On inverse X et Y pcq kplot
.c307	98		               tya                 ;
.c308	aa		               tax                 ;   prend X comme la ligne
.c309	68		               pla                 ;
.c30a	a8		               tay                 ;   et Y comme la colonne.
.c30b	20 f0 ff	               jsr  kplot          ; Positionne le curseur
.c30e	68		               pla                 ; Récupère le registre a et
.c30f	28		               plp                 ;   le registre de status.
.c310	60		               rts
.c311			cursor
=$0286			bascol    =    $0286               ; debugme
.c311	20 4c c4	               jsr  pushreg        ; Sauvegarde tous les registres.
.c314	90 12		               bcc  restore        ; Si C=0 c'est une récupération.
.c316	20 f0 ff	               jsr  kplot          ; On récupère la position du
.c319	8c 3b c3	               sty  cx             ;   curseur et on la sauvegarde
.c31c	8e 3c c3	               stx  cy             ;   dans les vars locales.
.c31f	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.c322	8d 3d c3	               sta  bcol           ; BASIC du texte.
.c325	4c 37 c3	               jmp  out            ; c'est fini on sort.
.c328	ae 3c c3	restore        ldx  cy             ; Comme C=1, On charge x avec
.c32b	ac 3b c3	               ldy  cx             ;   la ligne, y ace  la col.
.c32e	20 f0 ff	               jsr  kplot          ; On positionne le curseur.
.c331	ad 3d c3	               lda  bcol           ; On replace la couleur par basic
.c334	8d 86 02	               sta  bascol         ;   sauvegardé.
.c337	20 7b c4	out            jsr  popreg         ; Récupère tous les registres.
.c33a	60		               rts
>c33b	00		cx   .byte     $00
>c33c	00		cy   .byte     $00
>c33d	00		bcol .byte     $00
.c33e			cursave
.c33e	08		               php
.c33f	38		               sec
.c340	20 11 c3	               jsr  cursor         ; Voir cette fonction plus haut.
.c343	28		               plp
.c344	60		               rts
.c345			curput
.c345	08		               php
.c346	18		               clc
.c347	20 11 c3	               jsr  cursor         ; Voir cette fonction plus haut.
.c34a	28		               plp
.c34b	60		               rts
.c34c			putsxy
.c34c	20 de c3	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.c34f	86 fb		               stx  zpage1         ; On place la position de la
.c351	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.c353	a0 00		               ldy  #$00           ; On charge l'index à 0.
.c355	b1 fb		               lda  (zpage1),y     ; Charge la coordonné X
.c357	aa		               tax                 ;   dans X.
.c358	20 33 c5	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.c35b	b1 fb		               lda  (zpage1),y     ; Charge la coordonnée Y
.c35d	a8		               tay                 ; dans Y.
.c35e	20 02 c3	               jsr  gotoxy         ; on positionne le curseur.
.c361	20 33 c5	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.c364	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.c366	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.c368	20 e8 c2	               jsr  puts           ;   l'affiche.
.c36b	20 19 c4	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.c36e	60		               rts
>c36f	00 00		straddr   .word     $00
>c371	00		px        .byte     $00
>c372	00		py        .byte     $00
>c373	00 00		zp1       .word     $00
.c375			putscxy
.c375	20 de c3	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.c378	86 fb		               stx  zpage1         ; On place la position de la
.c37a	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.c37c	a0 00		               ldy  #$00           ; On charge l'index à 0.
.c37e	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.c381	48		               pha                 ;   actuelle de basic.
.c382	b1 fb		               lda  (zpage1),y     ; On charge le paramètre de
.c384	8d 86 02	               sta  bascol         ;   couleur et le force a Basic.
.c387	20 33 c5	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.c38a	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.c38c	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.c38e	20 4c c3	               jsr  putsxy         ;   l'affiche.
.c391	68		               pla                 ; On replace la couleur basic
.c392	8d 86 02	               sta  bascol         ;   que nous avions sauvegardée.
.c395	20 19 c4	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.c398	60		               rts
.c399			putrahex
.c399	20 4c c4	               jsr  pushreg        ; Sauvegarde tous les registres.
.c39c	20 6c c6	               jsr  atohex         ; Conversion de a chaîne hexa.
.c39f	a2 09		               ldx  #<a2hexstr     ; Charge l'adresse de la chaîne
.c3a1	a0 c6		               ldy  #>a2hexstr     ;   hexa dans $YYXX.
.c3a3	20 e8 c2	               jsr  puts           ; Affiche la chaîne.
.c3a6	20 7b c4	               jsr  popreg         ; Récupère tous les registres.
.c3a9	60		               rts
.c3aa			kputrahexxy
.c3aa			bputrahexxy
.c3aa			putrahexxy
.c3aa	08		               php                 ; Sauvegarde le registre de
.c3ab	48		               pha                 ;   status et le registre a.
.c3ac	20 6c c6	               jsr  atohex         ; Convertion de a en hexadécimal.
.c3af	a2 06		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.c3b1	a0 c6		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.c3b3	20 4c c3	               jsr  putsxy         ; Positionne et affiche la chaîne.
.c3b6	68		               pla                 ; Récupère le registre a et
.c3b7	28		               plp                 ;   le registre de status.
.c3b8	60		               rts
.c3b9			putrahexcxy
.c3b9	20 4c c4	               jsr  pushreg        ; Sauvegarde tous les registres.
.c3bc	20 6c c6	               jsr  atohex         ; Convertion de a en hexadécimal.
.c3bf	a2 06		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.c3c1	a0 c6		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.c3c3	20 4c c3	               jsr  putsxy         ; Colore, positionne et affiche la
.c3c6	20 7b c4	               jsr  popreg         ; Récupère tous les registres.
.c3c9	60		               rts
.c3ca			setinverse
.c3ca	48		               pha
.c3cb	a9 12		               lda  #$12
.c3cd	20 d2 ff	               jsr  chrout
.c3d0	68		               pla
.c3d1	60		               rts
.c3d2			clrinverse
.c3d2	48		               pha
.c3d3	a9 92		               lda  #$92
.c3d5	20 d2 ff	               jsr  chrout
.c3d8	68		               pla
.c3d9	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>c3da	00		rp        .byte     0
>c3db	00		ra        .byte     0
>c3dc	00 00		pc        .word     0
.c3de			pushall
.c3de			push
.c3de	08		          php            ; stack : flg, pcl, pch
.c3df	78		          sei
.c3e0	8d db c3	          sta  ra        ; save a
.c3e3	68		          pla            ; stack : pcl, pch
.c3e4	8d da c3	          sta  rp        ; save rp
.c3e7	68		          pla            ; stack : pch
.c3e8	8d dc c3	          sta  pc        ; save pcl
.c3eb	68		          pla            ; stack : -
.c3ec	8d dd c3	          sta  pc+1      ; save pch
.c3ef	a5 fb		          lda  zpage1    ; get zpage1 low byte
.c3f1	48		          pha            ; stack : zp1l
.c3f2	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.c3f4	48		          pha            ; stack : zp1h, zp1l
.c3f5	a5 fd		          lda  zpage2    ; get zpage2 low byte
.c3f7	48		          pha            ; stack : zp2l, zp1h, zp1l
.c3f8	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.c3fa	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.c3fb	ad da c3	          lda  rp        ; get rp
.c3fe	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c3ff	ad db c3	          lda  ra        ; get a
.c402	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c403	8a		          txa            ; get x
.c404	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c405	98		          tya            ; get y
.c406	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c407	ad dd c3	          lda  pc+1      ; get pch
.c40a	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c40b	ad dc c3	          lda  pc        ; get pcl
.c40e	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c40f	ad da c3	          lda  rp        ; get rp
.c412	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c413	ad db c3	          lda  ra        ; get a
.c416	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c417	58		          cli
.c418	60		          rts
.c419			pullall
.c419			pull
.c419			popall
.c419			pop
.c419	78		          sei
.c41a	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c41b	8d dc c3	          sta  pc        ; save pcl
.c41e	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c41f	8d dd c3	          sta  pc+1      ; save pch
.c422	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c423	a8		          tay            ; set y
.c424	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c425	aa		          tax            ; set x
.c426	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c427	8d db c3	          sta  ra        ; save a
.c42a	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c42b	8d da c3	          sta  rp        ; save rp
.c42e	68		          pla            ; stack : zp2l, zp1h, zp1l
.c42f	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.c431	68		          pla            ; stack : zp1h, zp1l
.c432	85 fd		          sta  zpage2    ; get zpage2 High byte
.c434	68		          pla            ; stack : zp1l
.c435	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.c437	68		          pla            ; stack :
.c438	85 fb		          sta  zpage1    ; get zpage1 High byte
.c43a	ad dd c3	          lda  pc+1      ; get pch
.c43d	48		          pha            ; stack : pch
.c43e	ad dc c3	          lda  pc
.c441	48		          pha            ; stack : pcl, pch
.c442	ad da c3	          lda  rp        ; get rp
.c445	48		          pha            ; stack : rp, pcl, pch
.c446	ad db c3	          lda  ra        ; set ra
.c449	58		          cli
.c44a	28		          plp            ; stack : pcl, pch
.c44b	60		          rts
.c44c			pushreg
.c44c	08		          php            ; stack : flg, pcl, pch
.c44d	78		          sei
.c44e	8d db c3	          sta  ra        ; save a
.c451	68		          pla            ; stack : pcl, pch
.c452	8d da c3	          sta  rp        ; save rp
.c455	68		          pla            ; stack : pch
.c456	8d dc c3	          sta  pc        ; save pcl
.c459	68		          pla            ; stack : -
.c45a	8d dd c3	          sta  pc+1      ; save pch
.c45d	ad da c3	          lda  rp        ; get rp
.c460	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c461	ad db c3	          lda  ra        ; get a
.c464	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c465	8a		          txa            ; get x
.c466	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c467	98		          tya            ; get y
.c468	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c469	ad dd c3	          lda  pc+1      ; get pch
.c46c	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c46d	ad dc c3	          lda  pc        ; get pcl
.c470	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c471	ad da c3	          lda  rp        ; get rp
.c474	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c475	ad db c3	          lda  ra        ; get a
.c478	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c479	58		          cli
.c47a	60		          rts
.c47b			pullreg
.c47b			popreg
.c47b	78		          sei
.c47c	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c47d	8d dc c3	          sta  pc        ; save pcl
.c480	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c481	8d dd c3	          sta  pc+1      ; save pch
.c484	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c485	a8		          tay            ; set y
.c486	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c487	aa		          tax            ; set x
.c488	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c489	8d db c3	          sta  ra        ; save a
.c48c	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c48d	8d da c3	          sta  rp        ; save rp
.c490	ad dd c3	          lda  pc+1      ; get pch
.c493	48		          pha            ; stack : pch
.c494	ad dc c3	          lda  pc
.c497	48		          pha            ; stack : pcl, pch
.c498	ad da c3	          lda  rp        ; get rp
.c49b	48		          pha            ; stack : rp, pcl, pch
.c49c	ad db c3	          lda  ra        ; set ra
.c49f	58		          cli
.c4a0	28		          plp            ; stack : pcl, pch
.c4a1	60		          rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.c4a2			blkfill
.c4a2	20 de c3	bf0            jsr  push
.c4a5	20 6d c5	               jsr  savezp1
.c4a8	84 fc		               sty  zpage1+1
.c4aa	a0 00		               ldy  #$00
.c4ac	84 fb		               sty  zpage1
.c4ae	91 fb		bf1            sta  (zpage1),y
.c4b0	c8		               iny
.c4b1	d0 fb		               bne  bf1
.c4b3	20 7c c5	               jsr  restzp1
.c4b6	20 19 c4	               jsr  pop
.c4b9	60		               rts
.c4ba			memfill
.c4ba	20 de c3	               jsr  push
.c4bd	20 a2 c4	mf1            jsr  blkfill
.c4c0	c8		               iny
.c4c1	ca		               dex
.c4c2	d0 f9		               bne  mf1
.c4c4	20 19 c4	               jsr  pop
.c4c7	60		               rts
.c4c8			memmove
.c4c8	20 de c3	               jsr  push
.c4cb	ba		               tsx            ; On se crée un pointeur ...
.c4cc	8a		               txa
.c4cd	18		               clc
.c4ce	69 0b		               adc  #11
.c4d0	a8		               tay
.c4d1	a2 06		               ldx  #$06
.c4d3	b9 00 01	nextbyte       lda  $0100,y
.c4d6	99 22 c5	               sta  words,y
.c4d9	c8		               iny
.c4da	ca		               dex
.c4db	d0 f6		               bne  nextbyte
.c4dd	ad 22 c5	               lda  s
.c4e0	8d f9 c4	               sta  source+1
.c4e3	ad 23 c5	               lda  s+1
.c4e6	8d fa c4	               sta  source+2
.c4e9	ad 24 c5	               lda  d
.c4ec	8d f6 c4	               sta  destin+1
.c4ef	ad 25 c5	               lda  d+1
.c4f2	8d f7 c4	               sta  destin+2
.c4f5	ad ff ff	destin         lda  $ffff
.c4f8	8d ff ff	source         sta  $ffff
.c4fb	ee f6 c4	               inc  destin+1
.c4fe	d0 03		               bne  src
.c500	ee f7 c4	               inc  destin+2
.c503	ee f9 c4	src            inc  source+1
.c506	d0 03		               bne  cnt
.c508	ee fa c4	               inc  source+2
.c50b	ad 26 c5	cnt            lda  compte
.c50e	d0 08		               bne  decit
.c510	ad 27 c5	               lda  compte+1
.c513	f0 09		               beq  fini
.c515	ce 27 c5	               dec  compte+1
.c518	ce 26 c5	decit          dec  compte
.c51b	4c f5 c4	               jmp  destin
.c51e	20 19 c4	fini           jsr  pop
.c521	60		               rts
.c522			words
>c522	00 00		s         .word     $0000
>c524	00 00		d         .word     $0000
>c526	00 00		compte    .word     $0000
.c528			decword
.c528	20 de c3	               jsr  push
.c52b	86 fd		               stx  zpage2
.c52d	84 fe		               sty  zpage2+1
.c52f	20 19 c4	               jsr  pop
.c532	60		               rts
.c533			inczpage1
.c533			inczp1
.c533	08		               php
.c534	48		               pha
.c535	e6 fb		               inc  zpage1
.c537	a5 fb		               lda  zpage1
.c539	d0 02		               bne  nopage
.c53b	e6 fc		               inc  zpage1+1
.c53d	68		nopage         pla
.c53e	28		               plp
.c53f	60		               rts
.c540			deczpage1
.c540			deczp1
.c540	08		               php
.c541	48		               pha
.c542	c6 fb		               dec  zpage1
.c544	a5 fb		               lda  zpage1
.c546	c9 ff		               cmp  #$ff
.c548	f0 02		               beq  report
.c54a	d0 02		               bne  nopage
.c54c	c6 fc		report         dec  zpage1+1
.c54e	68		nopage         pla
.c54f	28		               plp
.c550	60		               rts
.c551			inczpage2
.c551			inczp2
.c551	08		               php
.c552	48		               pha
.c553	e6 fd		               inc  zpage2
.c555	a5 fd		               lda  zpage2
.c557	d0 02		               bne  nopage
.c559	e6 fe		               inc  zpage2+1
.c55b	68		nopage         pla
.c55c	28		               plp
.c55d	60		               rts
.c55e			deczpage2
.c55e			deczp2
.c55e	08		               php
.c55f	c6 fd		               dec  zpage2
.c561	a5 fd		               lda  zpage2
.c563	c9 ff		               cmp  #$ff
.c565	f0 02		               beq  report
.c567	d0 02		               bne  nopage
.c569	c6 fe		report         dec  zpage2+1
.c56b	28		nopage         plp
.c56c	60		               rts
.c56d			savezp1
.c56d	08		               php
.c56e	48		               pha
.c56f	a5 fb		               lda  zpage1
.c571	8d fe c5	               sta  zp1
.c574	a5 fc		               lda  zpage1+1
.c576	8d ff c5	               sta  zp1+1
.c579	68		               pla
.c57a	28		               plp
.c57b	60		               rts
.c57c			restzp1
.c57c	08		               php
.c57d	48		               pha
.c57e	ad fe c5	               lda  zp1
.c581	85 fb		               sta  zpage1
.c583	ad ff c5	               lda  zp1+1
.c586	85 fc		               sta  zpage1+1
.c588	68		               pla
.c589	28		               plp
.c58a	60		               rts
.c58b			savezp2
.c58b	08		               php
.c58c	48		               pha
.c58d	a5 fd		               lda  zpage2
.c58f	8d 00 c6	               sta  zp2
.c592	a5 fe		               lda  zpage2+1
.c594	8d 01 c6	               sta  zp2+1
.c597	68		               pla
.c598	28		               plp
.c599	60		               rts
.c59a			restzp2
.c59a	08		               php
.c59b	48		               pha
.c59c	ad 00 c6	               lda  zp2
.c59f	85 fd		               sta  zpage2
.c5a1	ad 01 c6	               lda  zp2+1
.c5a4	85 fe		               sta  zpage2+1
.c5a6	68		               pla
.c5a7	28		               plp
.c5a8	60		               rts
.c5a9			xy2addr
.c5a9	08		               php
.c5aa	48		               pha
.c5ab	8a		               txa
.c5ac	48		               pha
.c5ad	98		               tya
.c5ae	48		               pha
.c5af	ad f9 c5	               lda  addr1+1
.c5b2	8d fb c5	               sta  addr2+1
.c5b5	ad f8 c5	               lda  addr1
.c5b8	8d fa c5	               sta  addr2
.c5bb	c0 00		               cpy  #$00
.c5bd	f0 0f		               beq  addx
.c5bf	18		moreline       clc
.c5c0	6d f7 c5	               adc  ymult
.c5c3	90 03		               bcc  norepy
.c5c5	ee fb c5	               inc  addr2+1
.c5c8	8d fa c5	norepy         sta  addr2
.c5cb	88		               dey
.c5cc	d0 f1		               bne  moreline
.c5ce	8a		addx           txa
.c5cf	18		               clc
.c5d0	6d fa c5	               adc  addr2
.c5d3	90 03		               bcc  thatsit
.c5d5	ee fb c5	               inc  addr2+1
.c5d8	8d fa c5	thatsit        sta  addr2
.c5db	68		               pla
.c5dc	a8		               tay
.c5dd	68		               pla
.c5de	aa		               tax
.c5df	68		               pla
.c5e0	28		               plp
.c5e1	60		               rts
.c5e2			loop
.c5e2	ce 02 c6	               dec  loopcount
.c5e5	d0 03		               bne  norep
.c5e7	ce 03 c6	               dec  loopcount+1
.c5ea	ad 02 c6	norep          lda  loopcount
.c5ed	c9 00		               cmp  #$00
.c5ef	d0 05		               bne  out
.c5f1	4d 03 c6	               eor  loopcount+1
.c5f4	c9 ff		               cmp  #$ff
.c5f6	60		out            rts
>c5f7	28		ymult          .byte     40
>c5f8	00 00		addr1          .word     $0000
>c5fa	00 00		addr2          .word     $0000
>c5fc	00 00		bytecnt        .word     $0000
>c5fe	00 00		zp1            .word     $0000
>c600	00 00		zp2            .word     $0000
>c602	00 00		loopcount      .word     $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>c604	01		a2hexcol       .byte     1              ; pour aputscxy
>c605	00		a2hexbkcol     .byte     %00000000
.c606			a2hexpos
>c606	00		a2hexpx        .byte     0              ; pour aputsxy
>c607	00		a2hexpy        .byte     0
>c608	24		a2hexprefix    .byte     "$"            ; pour aputs
>c609	00 00		a2hexstr       .word     $00
>c60b	00 00		               .word     $00
>c60d	00		               .byte     0              ; 0 end string
>c60e	01		abincol        .byte     1
>c60f	00		abinbkcol      .byte     %00000000
>c610	30 30 30 30	abin           .null     "00000000"
>c614	30 30 30 30 00
>c619	20 20 20 00	adec           .null     "   "
.c61d			putahexfmtxy
.c61d	20 de c3	               jsr  push
.c620	20 6c c6	               jsr  atohex
.c623	ae 06 c6	               ldx  a2hexpx
.c626	ac 07 c6	               ldy  a2hexpy
.c629	20 02 c3	               jsr  gotoxy
.c62c	a2 08		               ldx  #<a2hexprefix
.c62e	a0 c6		               ldy  #>a2hexprefix
.c630	20 e8 c2	               jsr  puts
.c633	20 19 c4	               jsr  pop
.c636	60		               rts
.c637			putahexfmt
.c637	20 de c3	               jsr  push
.c63a	20 6c c6	               jsr  atohex
.c63d	a2 08		               ldx  #<a2hexprefix
.c63f	a0 c6		               ldy  #>a2hexprefix
.c641	20 e8 c2	               jsr  puts
.c644	20 19 c4	               jsr  pop
.c647	60		               rts
.c648			putahex
.c648	20 de c3	               jsr  push
.c64b	20 6c c6	               jsr  atohex
.c64e	a2 09		               ldx  #<a2hexstr
.c650	a0 c6		               ldy  #>a2hexstr
.c652	20 e8 c2	               jsr  puts
.c655	20 19 c4	               jsr  pop
.c658	60		               rts
.c659			nibtohex
.c659	08		               php
.c65a	29 0f		               and  #$0f
.c65c	f8		               sed
.c65d	18		               clc
.c65e	69 90		               adc  #$90
.c660	69 40		               adc  #$40
.c662	d8		               cld
.c663	28		               plp
.c664	60		               rts
.c665			lsra4bits
.c665	08		               php
.c666	4a		               lsr
.c667	4a		               lsr
.c668	4a		               lsr
.c669	4a		               lsr
.c66a	28		               plp
.c66b	60		               rts
.c66c			atohex
.c66c	08		               php
.c66d	48		               pha
.c66e	48		               pha
.c66f	20 65 c6	               jsr  lsra4bits
.c672	20 59 c6	               jsr  nibtohex
.c675	8d 09 c6	               sta  a2hexstr
.c678	68		               pla
.c679	20 59 c6	               jsr  nibtohex
.c67c	8d 0a c6	               sta  a2hexstr+1
.c67f	a9 00		               lda  #$00                ; set end of string
.c681	8d 0b c6	               sta  a2hexstr+2
.c684	68		               pla
.c685	28		               plp
.c686	60		               rts
.c687			xy2hex
.c687	20 de c3	               jsr  push
.c68a	20 6c c6	               jsr  atohex
.c68d	8a		               txa
.c68e	48		               pha
.c68f	20 65 c6	               jsr  lsra4bits
.c692	20 59 c6	               jsr  nibtohex
.c695	8d 09 c6	               sta  a2hexstr
.c698	68		               pla
.c699	20 59 c6	               jsr  nibtohex
.c69c	8d 0a c6	               sta  a2hexstr+1
.c69f	98		               tya
.c6a0	48		               pha
.c6a1	20 65 c6	               jsr  lsra4bits
.c6a4	20 59 c6	               jsr  nibtohex
.c6a7	8d 0b c6	               sta  a2hexstr+2
.c6aa	68		               pla
.c6ab	20 59 c6	               jsr  nibtohex
.c6ae	8d 0c c6	               sta  a2hexstr+3
.c6b1	a9 00		               lda  #$00                ; 0 ended string
.c6b3	8d 0d c6	               sta  a2hexstr+4
.c6b6	20 19 c4	               jsr  pop
.c6b9			atobin
.c6b9	20 de c3	               jsr  push
.c6bc	a2 08		               ldx  #8
.c6be	a0 00		               ldy  #0
.c6c0	18		               clc
.c6c1	2a		nextbit        rol
.c6c2	48		               pha
.c6c3	69 00		               adc  #$00
.c6c5	29 01		               and  #$01
.c6c7	20 59 c6	               jsr  nibtohex
.c6ca	99 10 c6	               sta  abin,y
.c6cd	68		               pla
.c6ce	c8		               iny
.c6cf	ca		               dex
.c6d0	d0 ef		               bne  nextbit
.c6d2	a9 00		               lda  #0
.c6d4	99 10 c6	               sta  abin,y
.c6d7	20 19 c4	               jsr  pull
.c6da	60		               rts
.c6db			abinsetmccol
.c6db	20 4c c4	               jsr  pushreg
.c6de	20 7b c4	               jsr  popreg
.c6e1	60		               rts
.c6e2			putabin
.c6e2	20 b9 c6	               jsr     atobin
.c6e5	20 de c3	               jsr     push
.c6e8	a2 10		               ldx     #<abin
.c6ea	a0 c6		               ldy     #>abin
.c6ec	20 e8 c2	               jsr     puts
.c6ef	20 19 c4	               jsr     pop
.c6f2	60		               rts
.c6f3			printabin
.c6f3	20 de c3	               jsr     push
.c6f6	a2 10		               ldx     #<abin
.c6f8	a0 c6		               ldy     #>abin
.c6fa	20 e8 c2	               jsr     puts
.c6fd	20 19 c4	               jsr     pop
.c700	60		               rts
.c701			putabinfmt
.c701	08		               php
.c702	48		               pha
.c703	a9 25		               lda     #"%"
.c705	20 e2 c2	               jsr     putch
.c708	68		               pla
.c709	20 e2 c6	               jsr     putabin
.c70c	28		               plp
.c70d	60		               rts
.c70e			putabinxy
.c70e	20 02 c3	               jsr     gotoxy
.c711	20 e2 c6	               jsr     putabin
.c714	60		               rts
.c715			putabinfmtxy
.c715	20 02 c3	               jsr     gotoxy
.c718	20 01 c7	               jsr     putabinfmt
.c71b	60		               rts
.c71c			atodec
.c71c	20 de c3	               jsr  push
.c71f	f8		               sed            ; On se place en mode décimal.
.c720	aa		               tax            ; On déplace a dans x.
.c721	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.c723	a9 00		               lda  #$00      ; 0 dans A.
.c725	18		nextbit        clc            ; Bit carry a 0.
.c726	69 01		               adc  #$01      ; Ajoute 1 a A.
.c728	90 01		               bcc  decx      ; Pas de carry, pas de report.
.c72a	c8		               iny            ; On incrémente Y
.c72b	ca		decx           dex            ; X=X-1
.c72c	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.c72e	48		               pha            ; A sur le stack.
.c72f	98		               tya            ; Y dans A (MSB)
.c730	20 59 c6	               jsr  nibtohex  ; a hex petsci ...
.c733	8d 19 c6	               sta  adec      ; ... dans tampon.
.c736	68		               pla            ; Récupere A
.c737	48		               pha            ;
.c738	20 59 c6	               jsr  nibtohex
.c73b	8d 1b c6	               sta  adec+2
.c73e	68		               pla
.c73f	6a		               ror
.c740	6a		               ror
.c741	6a		               ror
.c742	6a		               ror
.c743	20 59 c6	               jsr  nibtohex
.c746	8d 1a c6	               sta  adec+1
.c749	d8		               cld            ; On revient en mode binaire.
.c74a	20 19 c4	               jsr  pull
.c74d	60		               rts
.c74e			putadec
.c74e	20 de c3	               jsr  push
.c751	20 1c c7	               jsr  atodec
.c754	a2 19		               ldx  #<adec
.c756	a0 c6		               ldy  #>adec+1
.c758	20 e8 c2	               jsr  puts
.c75b	20 19 c4	               jsr  pop
.c75e	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

.c75f			waitstop
.c75f	08		            php         ;\ Sauvegarde les drapeaux
.c760	48		            pha         ;/  et l'accumulateur.
.c761	a9 00		            lda #0      ;\ Efface le tampon
.c763	85 c6		            sta 198     ;/  du clavier.
.c765	20 ed f6	wait        jsr k_stop  ; Cherche la clef [RUN/STOP].
.c768	d0 fb		            bne  wait   ;  Elle n'est pas pesée.
.c76a	68		            pla         ;\ Récupère l'accmulateur et
.c76b	28		            plp         ;/  les drapeaux.
.c76c	60		            rts
.c76d			anykey
.c76d	08		            php         ;\ Sauvegarde les drapeaux
.c76e	48		            pha         ;/  et l'accumulateur.
.c76f	a5 cb		nokey       lda 203     ; Lit la matrice de la clef actuelle dans le tampon.
.c771	c9 40		            cmp #64     ; Si 64 alors aucune clef n'est appuyée.
.c773	f0 fa		            beq nokey   ; On attend qu'il y en aie une.
.c775	20 7b c7	            jsr kbfree  ; On attend que le clavier soit relâché.
.c778	68		            pla         ;\ Récupère l'accmulateur et
.c779	28		            plp         ;/  les drapeaux.
.c77a	60		            rts
.c77b			kbfree
.c77b	08		            php         ;\ Sauvegarde les drapeaux
.c77c	48		            pha         ;/  et l'accumulateur.
.c77d	a5 cb		iskey       lda 203     ; Lit la matrice de la clef actuelle dans le tampon.
.c77f	c9 40		            cmp #64     ; Si 64 alors aucune clef n'est appuyée.
.c781	d0 fa		            bne iskey   ; On attend qu'il y en aie aucune.
.c783	68		            pla         ;\ Récupère l'accmulateur et
.c784	28		            plp         ;/  les drapeaux.
.c785	60		            rts
.c786			getkey
.c786	08		            php         ; Sauvegarde les drapeaux.
.c787	20 e4 ff	gkagain     jsr getin   ; Tente de lire une clef.
.c78a	c9 00		            cmp #0      ; 0 si aucune.
.c78c	f0 f9		            beq gkagain ; Aucune, alors on attend.
.c78e	08		            php         ; Récupère les drapeaux.
.c78f	60		            rts
.c790			kbflushbuff
.c790	08		            php         ;\ Sauvegarde les drapeaux
.c791	48		            pha         ;/  et l'accumulateur.
.c792	a9 00		            lda #0      ;\ Efface le tampon
.c794	85 c6		            sta 198     ;/  du clavier.
.c796	68		            pla         ;\ Récupère l'accmulateur et
.c797	28		            plp         ;/  les drapeaux.
.c798	60		            rts
.c799			waitkey
.c799	08		            php         ;\ Sauvegarde les drapeaux
.c79a	48		            pha         ;/  et l'accumulateur.
.c79b	8d d5 c7	            sta thekey  ; Sauvegarde la clef attendue.
.c79e	a9 00		            lda #0      ;\ Efface le tampon
.c7a0	85 c6		            sta 198     ;/  du clavier.
.c7a2	20 e4 ff	nogood      jsr getin   ; Tente de lire une clef.
.c7a5	cd d5 c7	            cmp thekey  ; La compare avec celle attendue.
.c7a8	d0 f8		            bne nogood  ; Boucle si ce l'est pas la bonne.
.c7aa	20 d2 ff	            jsr chrout  ; L'affiche quand elle est bonne.
.c7ad	68		            pla         ;\ Récupère l'accmulateur et
.c7ae	28		            plp         ;/  les drapeaux.
.c7af	60		            rts
.c7b0			waitspace
.c7b0	08		            php         ;\ Sauvegarde les drapeaux
.c7b1	48		            pha         ;/  et l'accumulateur.
.c7b2	a9 00		            lda #0      ;\ Efface le tampon
.c7b4	85 c6		            sta 198     ;/  du clavier.
.c7b6	20 ca cc	nospace     jsr showregsrev
.c7b9	a9 cb		            lda #203    ; Lit la matrice du clavier.
.c7bb	c9 3c		            cmp #60     ; 60 dans la matrice = barre d'espace appuyée.
.c7bd	d0 f7		            bne nospace
.c7bf	68		            pla         ;\ Récupère l'accmulateur et
.c7c0	28		            plp         ;/  les drapeaux.
.c7c1			waitreturn
.c7c1	08		            php         ;\ Sauvegarde les drapeaux
.c7c2	48		            pha         ;/  et l'accumulateur.
.c7c3	a9 00		            lda #0      ;\ Efface le tampon
.c7c5	85 c6		            sta 198     ;/  du clavier.
.c7c7	a9 cb		noreturn    lda #203    ; Lit la matrice du clavier.
.c7c9	c9 01		            cmp #1      ; 1 dans la matrice = [RETURN] appuyé.
.c7cb	08		            php         ; Sauvegarde les drapeaux pour la comparaison.
.c7cc	a9 00		            lda #0      ;\ Efface le tampon
.c7ce	85 c6		            sta 198     ;/  du clavier.
.c7d0	28		            plp         ; Récupère les drapeaux pour la comparaison.
.c7d1	d0 f4		            bne noreturn
.c7d3	68		            pla         ;\ Récupère l'accmulateur et
.c7d4	28		            plp         ;/  les drapeaux.
>c7d5	00		thekey      .byte   0
>c7d6	01		thecount    .byte   $01
>c7d7	00 00 00 00	asciitorom  .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>c7db	00 00 00 00 00 00 00 00 00 0d 00 00
>c7e7	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>c7eb	00 00 00 00 00 00 00 00 00 00 00 00
>c7f7	20 21 22 23	            .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>c7fb	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>c807	30 31 32 33	            .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>c80b	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>c817	00 01 02 03	            .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>c81b	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>c827	10 11 12 13	            .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>c82b	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>c837	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>c83b	00 00 00 00 00 00 00 00 00 00 00 00
>c847	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>c84b	00 00 00 00 00 00 00 00 00 00 00 00
>c857	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>c85b	00 00 00 00 00 00 00 00 00 00 00 00
>c867	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>c86b	00 00 00 00 00 00 00 00 00 00 00 00
>c877	60 61 62 63	            .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>c87b	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>c887	70 71 72 73	            .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>c88b	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>c897	40 41 42 43	            .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>c89b	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>c8a7	50 51 52 53	            .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>c8ab	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>c8b7	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>c8bb	00 00 00 00 00 00 00 00 00 00 00 00
>c8c7	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>c8cb	00 00 00 00 00 00 00 00 00 00 00 00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-disk.asm

.c8d7			diskerror
.c8d7	20 de c3	               jsr  push
.c8da	ad ba ca	               lda  dsk_dev   ; Select device 8
.c8dd	85 ba		               sta  $ba       ;
.c8df	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.c8e2	a9 6f		               lda  #$6f
.c8e4	85 b9		               sta  $b9       ;
.c8e6	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.c8e9	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.c8ec	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.c8ef	c9 0d		               cmp  #$0d      ; Is it CR ?
.c8f1	d0 f6		               bne  nextchar  ; No, get next char
.c8f3	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.c8f6	20 19 c4	               jsr  pop
.c8f9	60		               rts
.c8fa			diskdir
.c8fa	20 de c3	               jsr  push
.c8fd	a9 24		               lda  #$24      ; L012C - Filename is "$"
.c8ff	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.c901	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.c903	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.c905	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.c907	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.c909	a9 01		               lda  #$01      ; L0138 - set ...
.c90b	85 b7		               sta  $b7       ; L013A - ... length of current filename
.c90d	ad ba ca	               lda  dsk_dev   ; L013C - set 8 as ...
.c910	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.c912	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.c914	85 b9		               sta  $b9       ; L0142 - ... secondary address
.c916	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.c919	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...%10111010
.c91b	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.c91e	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.c920	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.c923	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.c925	85 90		               sta  $90       ; L0153 - ... kernal status word.
.c927	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.c929	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.c92b	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.c92e	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.c930	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.c932	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.c934	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.c937	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.c939	d0 28		               bne  exit      ; L0167
.c93b	a4 fb		               ldy  $fb       ; L0169
.c93d	88		               dey            ; L016b
.c93e	d0 e9		               bne  loop1     ; L016C - If not last, loop
.c940	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.c942	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.c945	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.c947	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.c94a	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.c94d	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.c94f	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.c951	aa		               tax            ; L017F - tfr a in x
.c952	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.c954	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.c957	4c 4a c9	               jmp  loop3     ; L0185 - get another byte
.c95a	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.c95c	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.c95f	a0 02		               ldy  #$02      ; L018D - set Y to 2
.c961	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.c963	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.c966	20 19 c4	               jsr  pop
.c969	60		               rts            ; L0194
.c96a			directory
.c96a	20 fa c8	               jsr  diskdir
.c96d	20 d7 c8	               jsr  diskerror
.c970	60		               rts
.c971			memtofile
.c971	20 94 ca	               jsr  dsk_putmesg
.c974	20 de c3	               jsr  push
.c977	ad be ca	               lda  dsk_fnlen
.c97a	ae bc ca	               ldx  dsk_fnptr      ; load fname addr. lbyte
.c97d	ac bd ca	               ldy  dsk_fnptr+1
.c980	20 bd ff	               jsr  setnam         ; call setnam
.c983	ad bb ca	               lda  dsk_lfsno
.c986	ae ba ca	               ldx  dsk_dev        ; specified device
.c989	a0 00		skip           ldy  #$00
.c98b	20 ba ff	               jsr  setlfs         ; call setlfs
.c98e	ad b6 ca	               lda  dsk_data_s     ; put data start lbyte in stal
.c991	85 c1		               sta  stal
.c993	ad b7 ca	               lda  dsk_data_s+1   ; put data start hbyte in stal
.c996	85 c2		               sta  stal+1
.c998	ae b8 ca	               ldx  dsk_data_e     ; put data end lbyte in x
.c99b	ac b9 ca	               ldy  dsk_data_e+1   ; put data end hbyte in y
.c99e	a9 c1		               lda  #stal          ; start address located in $c1/$c2
.c9a0	20 d8 ff	               jsr  save           ; call save
.c9a3	90 00		               bcc  noerror        ; if carry set, a load error has happened
.c9a5	20 19 c4	noerror        jsr  pop
.c9a8	60		               rts
.c9a9			filetomem
.c9a9	20 de c3	               jsr push
.c9ac	ad be ca	               lda dsk_fnlen  ; Loads filename lenght.
.c9af	ae bc ca	               ldx dsk_fnptr  ; Points x and y to the filename
.c9b2	ac bd ca	               ldy dsk_fnptr+1;pointer
.c9b5	20 bd ff	               jsr setnam     ; call setnam
.c9b8	ad bb ca	               lda dsk_lfsno  ; Loads Acc with the logical file number
.c9bb	ae ba ca	               ldx dsk_dev    ; default to device 8
.c9be	a0 01		               ldy #$01       ; not $01 means: load to address stored in file
.c9c0	20 ba ff	               jsr setlfs     ; call setlfs
.c9c3	a9 00		               lda #$00       ; $00 means: load to memory (not verify)
.c9c5	20 d5 ff	               jsr load       ; call load
.c9c8	90 03		               bcc noerror      ; if carry set, a load error has happened
.c9ca	20 d1 c9	               jsr  error
.c9cd	20 19 c4	noerror        jsr pop
.c9d0	60		               rts
.c9d1			error
.c9d1	20 de c3	               jsr  push
.c9d4	c9 01		isit01         cmp  #$01
.c9d6	d0 07		               bne  isit02
.c9d8	a2 25		               ldx  #<dsk_emsg01
.c9da	a0 ca		               ldy  #>dsk_emsg01
.c9dc	4c 16 ca	               jmp  printerror
.c9df	c9 02		isit02         cmp  #$02
.c9e1	d0 07		               bne  isit05
.c9e3	a2 39		               ldx  #<dsk_emsg02
.c9e5	a0 ca		               ldy  #>dsk_emsg02
.c9e7	4c 16 ca	               jmp  printerror
.c9ea	c9 05		isit05         cmp  #$05
.c9ec	d0 07		               bne  isit04
.c9ee	a2 4c		               ldx  #<dsk_emsg05
.c9f0	a0 ca		               ldy  #>dsk_emsg05
.c9f2	4c 16 ca	               jmp  printerror
.c9f5	c9 04		isit04         cmp  #$04
.c9f7	d0 07		               bne  isit1d
.c9f9	a2 5c		               ldx  #<dsk_emsg04
.c9fb	a0 ca		               ldy  #>dsk_emsg04
.c9fd	4c 16 ca	               jmp  printerror
.ca00	c9 1d		isit1d         cmp  #$1d
.ca02	d0 07		               bne  isit00
.ca04	a2 71		               ldx  #<dsk_emsg1d
.ca06	a0 ca		               ldy  #>dsk_emsg1d
.ca08	4c 16 ca	               jmp  printerror
.ca0b	c9 00		isit00         cmp  #$00
.ca0d	d0 0a		               bne  noerror
.ca0f	a2 87		               ldx  #<dsk_emsg00
.ca11	a0 ca		               ldy  #>dsk_emsg00
.ca13	4c 16 ca	               jmp  printerror
.ca16	20 e8 c2	printerror     jsr  puts
.ca19	20 19 c4	noerror        jsr  pop
.ca1c	60		               rts
>ca1d	8d		dsk_msg1       .byte     141
>ca1e	53 55 43 43	               .null     "succes"
>ca22	45 53 00
>ca25	8d		dsk_emsg01     .byte     141
>ca26	46 49 43 48	               .null     "fichier non ouvert"
>ca2a	49 45 52 20 4e 4f 4e 20 4f 55 56 45 52 54 00
>ca39	11		dsk_emsg02     .byte     17
>ca3a	45 52 52 45	               .null     "erreur d'ecriture"
>ca3e	55 52 20 44 27 45 43 52 49 54 55 52 45 00
>ca4c	11		dsk_emsg05     .byte     17
>ca4d	4c 45 43 54	               .null     "lecteur absent"
>ca51	45 55 52 20 41 42 53 45 4e 54 00
>ca5c	11		dsk_emsg04     .byte     17
>ca5d	46 49 43 48	               .null     "fichier introuvable"
>ca61	49 45 52 20 49 4e 54 52 4f 55 56 41 42 4c 45 00
>ca71	11		dsk_emsg1d     .byte     17
>ca72	45 52 52 45	               .null     "erreur de chargement"
>ca76	55 52 20 44 45 20 43 48 41 52 47 45 4d 45 4e 54
>ca86	00
>ca87	11		dsk_emsg00     .byte     17
>ca88	42 52 45 41	               .null     "break error"
>ca8c	4b 20 45 52 52 4f 52 00
.ca94			dsk_putmesg
.ca94	20 de c3	               jsr push
.ca97	a2 bf		               ldx #<dsk_msg0
.ca99	a0 ca		               ldy #>dsk_msg0
.ca9b	20 e8 c2	               jsr puts
.ca9e	a9 20		               lda #$20
.caa0	20 e2 c2	               jsr putch
.caa3	ae bc ca	               ldx dsk_fnptr
.caa6	ac bd ca	               ldy dsk_fnptr+1
.caa9	20 e8 c2	               jsr puts
.caac	ad bb ca	               lda dsk_lfsno
.caaf	20 c3 ff	               jsr close
.cab2	20 19 c4	               jsr pop
.cab5	60		               rts
>cab6	00 00		dsk_data_s     .word     $0000     ; Data start example addresses
>cab8	00 20		dsk_data_e     .word     $2000     ; Data end
>caba	08		dsk_dev        .byte     $08       ; Device number
>cabb	00		dsk_lfsno      .byte     $00       ; Logical file number
>cabc	00 00		dsk_fnptr      .word     $00       ; Pointer to filename
>cabe	00		dsk_fnlen      .byte     0         ; Number of character in filename.
>cabf	8d		dsk_msg0       .byte     141       ; Miscilinaous file message.
>cac0	53 41 56 49	               .null     "saving "
>cac4	4e 47 20 00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-std-showregs.asm

.cac8			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
.cac8	08		               php                 ; Sauvegarde le registre de status sur stack.
.cac9	8d bd cc	               sta  rega           ; Sauvegarde Acc en mémoire.
.cacc	68		               pla                 ; Récupère le registre de status du stack.
.cacd	8d c0 cc	               sta  regp           ; Sauvegarde le registre de status en mémoire.
.cad0	8e be cc	               stx  regx           ; Sauvegarde le registre X en mémoire.
.cad3	8c bf cc	               sty  regy           ; Sauvegarde le registre Y en mémoire.
.cad6	ba		               tsx                 ; Copie le registre S dans X.
.cad7	8e c1 cc	               stx  regs           ; Sauvegarde le registre S en mémoire.
.cada	68		               pla                 ; Récupère le MSB de l'adresse de retour ...
.cadb	8d c3 cc	               sta  regpcl         ; ... et le sauvegarde en mémoire ...
.cade	8d c5 cc	               sta  regpcl2        ; ... une seconde fois.
.cae1	68		               pla                 ; Récupère le LSB de l'adresse de retour ...
.cae2	8d c2 cc	               sta  regpch         ; ... et le sauvegarde en mémoire ...
.cae5	8d c4 cc	               sta  regpch2        ; ... une seconde fois.
.cae8	ad bd cc	               lda  rega           ; On commence par le registre Acc.
.caeb	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.caec	20 59 c6	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.caef	8d 5a cc	               sta  vala+1         ; ... et le place dans la chaine.
.caf2	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.caf3	20 65 c6	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.caf6	20 59 c6	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.caf9	8d 59 cc	               sta  vala           ; ... et le place dans la chaine.
.cafc	ad bf cc	               lda  regy           ; Ensuite, le registre Y.
.caff	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.cb00	20 59 c6	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.cb03	8d 71 cc	               sta  valy+1         ; ... et le place dans la chaine.
.cb06	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.cb07	20 65 c6	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.cb0a	20 59 c6	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.cb0d	8d 70 cc	               sta  valy           ; ... et le place dans la chaine.
.cb10	ad be cc	               lda  regx           ; Ensuite, le registre X.
.cb13	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.cb14	20 59 c6	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.cb17	8d 65 cc	               sta  valx+1         ; ... et le place dans la chaine.
.cb1a	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.cb1b	20 65 c6	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.cb1e	20 59 c6	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.cb21	8d 64 cc	               sta  valx           ; ... et le place dans la chaine.
.cb24	ad c0 cc	               lda  regp           ; Ensuite, le registre de status.
.cb27	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.cb28	20 59 c6	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.cb2b	8d 7c cc	               sta  valp+1         ; ... et le place dans la chaine.
.cb2e	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.cb2f	20 65 c6	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.cb32	20 59 c6	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.cb35	8d 7b cc	               sta  valp           ; ... et le place dans la chaine.
.cb38	ad c1 cc	               lda  regs           ; Ensuite, le pointeur de stack.
.cb3b	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.cb3c	20 59 c6	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.cb3f	8d 87 cc	               sta  vals+1         ; ... et le place dans la chaine.
.cb42	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.cb43	20 65 c6	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.cb46	20 59 c6	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.cb49	8d 86 cc	               sta  vals           ; ... et le place dans la chaine.
.cb4c	38		               sec                 ; Prépade le ADC en plaçant 0 dans Carry.
.cb4d	ad c5 cc	               lda  regpcl2        ; On charge la LSB de l'adresse de retour.
.cb50	69 00		               adc  #$00           ; On y ajoute 1.
.cb52	90 03		               bcc  noreport       ; Si pas de Carry on ne fait pas de report.
.cb54	ee c4 cc	               inc  regpch2        ; ... en incrémentant le MSB.
.cb57	8d c5 cc	noreport       sta  regpcl2        ; On le sauvegarde.
.cb5a	ad c5 cc	               lda  regpcl2        ; On récupère la partie basse du compteur.
.cb5d	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.cb5e	20 59 c6	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.cb61	8d 97 cc	               sta  valpcl+1       ; ... et lace le code à la position "---X".
.cb64	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.cb65	20 65 c6	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.cb68	20 59 c6	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.cb6b	8d 96 cc	               sta  valpcl         ; ... et lace le code à la position "--X-".
.cb6e	ad c4 cc	               lda regpch2         ; On récupère la partie haute du compteur.
.cb71	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.cb72	20 59 c6	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.cb75	8d 95 cc	               sta  valpch+1       ; ... et lace le code à la position "-X--".
.cb78	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.cb79	20 65 c6	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.cb7c	20 59 c6	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.cb7f	8d 94 cc	               sta  valpch         ; ... et lace le code à la position "X---".
.cb82	a5 fb		               lda  zpage1         ; On charge le LSB de ZP1 ($fb).
.cb84	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.cb85	20 59 c6	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.cb88	8d a8 cc	               sta  valz1l+1       ; ... et lace le code à la position "---X".
.cb8b	68		               pla
.cb8c	20 65 c6	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.cb8f	20 59 c6	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.cb92	8d a7 cc	               sta  valz1l         ; ... et lace le code à la position "--X-".
.cb95	a5 fc		               lda  zpage1+1         ; On charge le MSB de ZP1 ($fc).
.cb97	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.cb98	20 59 c6	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.cb9b	8d a6 cc	               sta  valz1h+1       ; ... et lace le code à la position "-X--".
.cb9e	68		               pla
.cb9f	20 65 c6	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.cba2	20 59 c6	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.cba5	8d a5 cc	               sta  valz1h         ; ... et lace le code à la position "X---".
.cba8	a5 fd		               lda  zpage2         ; On charge le LSB de ZP2 ($fd).
.cbaa	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.cbab	20 59 c6	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.cbae	8d b9 cc	               sta  valz2l+1       ; ... et lace le code à la position "---X".
.cbb1	68		               pla
.cbb2	20 65 c6	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.cbb5	20 59 c6	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.cbb8	8d b8 cc	               sta  valz2l         ; ... et lace le code à la position "--X-".
.cbbb	a5 fe		               lda  zpage2+1       ; On charge le MSB de ZP2 ($fc).
.cbbd	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.cbbe	20 59 c6	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.cbc1	8d b7 cc	               sta  valz2h+1       ; ... et lace le code à la position "-X--".
.cbc4	68		               pla
.cbc5	20 65 c6	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.cbc8	20 59 c6	               jsr  nibtohex
.cbcb	8d b6 cc	               sta  valz2h         ; ... et lace le code à la position "X---".
.cbce	20 4c c4	               jsr  pushreg
.cbd1	a2 51		               ldx  #<srega
.cbd3	a0 cc		               ldy  #>srega
.cbd5	20 75 c3	               jsr  putscxy
.cbd8	20 7b c4	               jsr  popreg
.cbdb	20 4c c4	               jsr  pushreg
.cbde	a2 5d		               ldx  #<sregx
.cbe0	a0 cc		               ldy  #>sregx
.cbe2	20 75 c3	               jsr  putscxy
.cbe5	20 7b c4	               jsr  popreg
.cbe8	20 4c c4	               jsr  pushreg
.cbeb	a2 68		               ldx  #<sregy
.cbed	a0 cc		               ldy  #>sregy
.cbef	20 75 c3	               jsr  putscxy
.cbf2	20 7b c4	               jsr  popreg
.cbf5	20 4c c4	               jsr  pushreg
.cbf8	a2 74		               ldx  #<sregp
.cbfa	a0 cc		               ldy  #>sregp
.cbfc	20 75 c3	               jsr  putscxy
.cbff	20 7b c4	               jsr  popreg
.cc02	20 4c c4	               jsr  pushreg
.cc05	a2 7f		               ldx  #<sregs
.cc07	a0 cc		               ldy  #>sregs
.cc09	20 75 c3	               jsr  putscxy
.cc0c	20 7b c4	               jsr  popreg
.cc0f	20 4c c4	               jsr  pushreg
.cc12	a2 8b		               ldx  #<sregpc
.cc14	a0 cc		               ldy  #>sregpc
.cc16	20 75 c3	               jsr  putscxy
.cc19	20 7b c4	               jsr  popreg
.cc1c	20 4c c4	               jsr  pushreg
.cc1f	a2 9b		               ldx  #<sregz1
.cc21	a0 cc		               ldy  #>sregz1
.cc23	20 75 c3	               jsr  putscxy
.cc26	20 7b c4	               jsr  popreg
.cc29	20 4c c4	               jsr  pushreg
.cc2c	a2 ac		               ldx  #<sregz2
.cc2e	a0 cc		               ldy  #>sregz2
.cc30	20 75 c3	               jsr  putscxy
.cc33	20 7b c4	               jsr  popreg
.cc36	ad c2 cc	               lda  regpch         ; On replace ls MSB l'adresse de retour ...
.cc39	48		               pha                 ; ... à la bonne position sur la pile.
.cc3a	ad c3 cc	               lda  regpcl         ; On replace ls LSB l'adresse de retour ...
.cc3d	48		               pha                 ; ... à la bonne position sur la pile.
.cc3e	ae c1 cc	               ldx  regs           ; On replace tous les registre à leurs ...
.cc41	9a		               txs                 ; ...
.cc42	ac bf cc	               ldy  regy           ; ...
.cc45	ae be cc	               ldx  regx           ; ...
.cc48	ad c0 cc	               lda  regp           ; ...
.cc4b	48		               pha                 ; ...
.cc4c	ad bd cc	               lda  rega           ; ...
.cc4f	28		               plp                 ; ... valeurs initiales
.cc50	60		               rts
>cc51	07 01 17	srega   .byte   cyellow,coln+1,line
>cc54	20 20 41 3a	        .text   '  a:$' ;4,24
>cc58	24
>cc59	00 00 20 00	vala    .byte   0,0,32,0
>cc5d	03 09 17	sregx   .byte   ccyan,coln+9,line
>cc60	20 58 3a 24	        .text   ' x:$' ;4,24
>cc64	00 00 20 00	valx    .byte   0,0,32,0
>cc68	0d 10 17	sregy   .byte   clightgreen,coln+16,line
>cc6b	20 59 3a 20	        .text   ' y: $' ;4,24
>cc6f	24
>cc70	00 00 20 00	valy    .byte   0,0,32,0
>cc74	08 18 17	sregp   .byte   corange,coln+24,line
>cc77	20 50 3a 24	        .text   ' p:$' ;4,24
>cc7b	00 00 20 00	valp    .byte   0,0,32,0
>cc7f	0a 1f 17	sregs   .byte   clightred,coln+31,line
>cc82	20 53 3a 24	        .text   ' s:$' ;4,24
>cc86	00 00 20 20	vals    .byte   0,0,32,32,0
>cc8a	00
>cc8b	0e 01 18 20	sregpc  .byte   clightblue,coln+1,line+1,32
>cc8f	20 50 43 3a	        .text   ' pc:$' ;4,24
>cc93	24
>cc94	00 00		valpch  .byte   0,0
>cc96	00 00 20 20	valpcl  .byte   0,0,32,32,0
>cc9a	00
>cc9b	04 0d 18 20	sregz1  .byte   cpurple,coln+13,line+1,32
>cc9f	20 5a 50 31	        .text   ' zp1:$' ;4,24
>cca3	3a 24
>cca5	00 00		valz1h  .byte   0,0
>cca7	00 00 20 20	valz1l  .byte   0,0,32,32,0
>ccab	00
>ccac	0f 1a 18 20	sregz2  .byte   clightgray,coln+26,line+1,32
>ccb0	20 5a 50 32	        .text   ' zp2:$' ;4,24
>ccb4	3a 24
>ccb6	00 00		valz2h  .byte   0,0
>ccb8	00 00 20 20	valz2l  .byte   0,0,32,32,0
>ccbc	00
>ccbd	00		rega    .byte   0
>ccbe	00		regx    .byte   0
>ccbf	00		regy    .byte   0
>ccc0	00		regp    .byte   0
>ccc1	00		regs    .byte   0
>ccc2	00		regpch  .byte   0
>ccc3	00		regpcl  .byte   0
>ccc4	00		regpch2 .byte   0
>ccc5	00		regpcl2 .byte   0
>ccc6	00		vzp1h   .byte   0
>ccc7	00		vzp1l   .byte   0
>ccc8	00		vzp2h   .byte   0
>ccc9	00		vzp2l   .byte   0
.ccca			showregsrev
.ccca	20 ca c3	                jsr setinverse     ; On se place en mode inverse vidéo.
.cccd	20 c8 ca	                jsr showregs
.ccd0	20 d2 c3	                jsr clrinverse     ; On quitte le mode inverse vidéo.

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d000			chargen        =    $d000
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>ccd3	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>ccd7	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms=$e1d4  ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk=$ed09    ; Send Talk command to serial bus.
=$ed0c			slisten=$ed0c  ; Send LISTEN command to serial bus.
=$ed40			sflush=$ed40   ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2=$edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2=$edb9  ; Send TALK secondary addressto serial bus.
=$eddd			sbout=$eddd    ; Write byte to serial bus.
=$edef			sutalk=$edef   ; Send UNTalk command to serial bus.
=$edfe			sulisten=$edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh=$ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow=$ee8e  ; Set CLOCK OUT to low
=$ee97			sdathigh=$ee97 ; Set DATA OUT to High
=$eea0			sdatlow=$eea0  ; Set DATA OUT to low
=$eea9			sclkdta=$eea9  ; Read CLOCK IN and DATA IN.
=$f1ad			sbread=$f1ad   ; Read one byte from serial port.
=$f237			sstdin=$F237   ; Define serial bus as standard input; do not send TALK
=$f279			sstdout=$F279  ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen=$F3D5   ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose=$F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose=$F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose=$F642  ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout=$FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr=$ffa5    ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin=$ffc6    ; jmp ($031e) Define an input channel.
=$ffc9			chkout=$ffc9   ; jmp ($0320) Define an output channel.
=$ffcf			chrin=$ffcf    ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout=$ffd2   ; jmp ($0326) Output a character
=$ff81			cint=$ff81     ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout=$ffa8    ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall=$ffe7    ; jmp ($032c) Close all open files
=$ffc3			close=$ffc3    ; jmp ($031c) Close a logical file
=$ffcc			clrchn=$ffcc   ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin=$ffe4    ; jmp ($032a) Get a character.
=$fff3			iobase=$fff3   ; jmp $e500 Define i/o memory page
=$ff84			ioinit=$ff84   ; ($fda3) Initialize i/o devices.
=$ffb1			listen=$ffb1   ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load=$ffd5     ; jmp $f4e9 Load device to RAM.
=$ff9c			membot=$ff9c   ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop=$ff99   ; jmp $fe25 Get/Set top of ram
=$ffc0			open=$ffc0     ; jmp ($031a) Open a logical file
=$fff0			plot=$fff0     ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas=$ff87   ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim=$ffde    ; jmp $f6dd Read system clock
=$ffb7			readst=$ffb7   ; jmp $fe07 Read i/o status word
=$ff8a			restor=$ff8a   ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save=$ffd8     ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey=$ff9f   ; jmp $ea87 Scan the keyboard
=$ffed			screen=$ffed   ; jmp $e505 Return screen format
=$ff93			second=$ff93   ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs=$ffba   ; jmp $fe00 Set up a logical file
=$ff90			setmsg=$ff90   ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam=$ffbd   ; jmp $fdf9 Set up file name
=$ffdb			settim=$ffdb   ; jmp $f6e4 Set the system clock.
=$ffa2			settmo=$ffa2   ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop=$ffe1     ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk=$ffb4     ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa=$ff96     ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim=$ffea    ; jmp $f69b Update the system clock
=$ffae			unlsn=$ffae    ; jmp $edfe Send an unlisten command
=$ffab			untlk=$ffab    ; jmp $edef Send an untalk command
=$ff8d			vector=$ff8d   ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.           ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.   ;a--;---; a=dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.      ;---;a--; a=Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.   ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial. ;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.        ;--y;---; y=msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .         ;a--;---; a=file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.             ;axy;---; a=# start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode. ;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.   ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.              ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.          ;---;---; z=1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.         ;a--;---; a=len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.       ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)         ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.         ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                   ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.        ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                  ;a--;---; a=ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.              ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.         ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.              ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.         ;a--;---; a=SAor#$60
=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black         =   144  ;0,  ctrl-1
=5			b_white         =   5    ;1,  ctrl-2
=28			b_red           =   28   ;2,  ctrl-3
=159			b_cyan          =   159  ;3,  ctrl-4
=156			b_purple        =   156  ;4,  ctrl-5
=30			b_green         =   30   ;5,  ctrl-6
=31			b_blue          =   31   ;6,  ctrl-7
=158			b_yellow        =   158  ;7,  ctrl-8
=129			b_orange        =   129  ;8,  C=-1
=149			b_brown         =   149  ;9,  C=-2
=150			b_ltred         =   150  ;10, C=-3
=155			b_gray3         =   155  ;11, C=-4
=155			b_grey3         =   155  ;11, C=-4
=152			b_gray2         =   152  ;12, C=-5
=152			b_grey2         =   152  ;13, C=-5
=153			b_ltgreen       =   153  ;13, C=-6
=154			b_ltblue        =   154  ;14, C=-7
=151			b_gray1         =   151  ;15, C=-8
=151			b_grey1         =   151  ;15, C=-8
=144			b_noir          =   144  ;0,  ctrl-1
=5			b_blanc         =   5    ;1,  ctrl-2
=28			b_rouge         =   28   ;2,  ctrl-3
=156			b_mauve         =   156  ;4,  ctrl-5
=30			b_vert          =   30   ;5,  ctrl-6
=31			b_bleu          =   31   ;6,  ctrl-7
=158			b_jaune         =   158  ;7,  ctrl-8
=149			b_brun          =   149  ;9,  C=-2
=150			b_rose          =   150  ;10, C=-3
=155			b_gris3         =   155  ;11, C=-4
=152			b_gris2         =   152  ;12, C=-5
=153			b_vert2         =   153  ;13, C=-6
=154			b_blue2         =   154  ;14, C=-7
=151			b_gris1         =   151  ;15, C=-8
=151			b_gris          =   151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-sid-2.asm

=$d400			sidbase =   $d400
=$d400			frelo1  =   $d400 ; 54272 - Voice 1 frequency control (low byte).
=$d401			frehi1  =   $d401 ; 54273 - Voice 1 frequency control (high byte).
=$d402			pwlo1   =   $d402 ; 54274 - Voice 1 pulse waveform width (low byte).
=$d403			pwhi1   =   $d403 ; 54275 - Voice 1 pulse waveform width (high byte).
=$d404			vcreg1  =   $d404 ; 54276 - Voice 1 control register.
=$d405			atdcy1  =   $d405 ; 54277 - Voive 1 attack/decay register.
=$d406			surel1  =   $d406 ; 54278 - Voice 1 Sustain/Release control register.
=$d407			frelo2  =   $d407 ; 54279 - Voice 2 frequency control (low byte).
=$d408			frehi2  =   $d408 ; 54280 - Voice 2 frequency control (high byte).
=$d409			pwlo2   =   $d409 ; 54281 - Voice 2 pulse waveform width (low byte).
=$d40a			pwhi2   =   $d40a ; 54282 - Voice 2 pulse waveform width (high byte).
=$d40b			vcreg2  =   $d40b ; 54283 - Voice 2 control register.
=$d40c			atdcy2  =   $d40c ; 54284 - Voive 2 attack/decay register.
=$d40d			surel2  =   $d40d ; 54285 - Voice 2 Sustain/Release control register.
=$d40e			frelo3  =   $d40e ; 54286 - Voice 2 frequency control (low byte).
=$d40f			frehi3  =   $d40f ; 54287 - Voice 2 frequency control (high byte).
=$d410			pwlo3   =   $d410 ; 54288 - Voice 2 pulse waveform width (low byte).
=$d411			pwhi3   =   $d411 ; 54289 - Voice 2 pulse waveform width (high byte).
=$d412			vcreg3  =   $d412 ; 54290 - Voice 2 control register.
=$d413			atdcy3  =   $d413 ; 54291 - Voive 2 attack/decay register.
=$d414			surel3  =   $d414 ; 54292 - Voice 2 Sustain/Release control register.
=$d415			cutlo   =   $d415 ; 54293 - Bits 0-2 = low portion of filter cutoff frequency.
=$d416			cuthi   =   $d416 ; 54294 - Filter cutoff frequency (high byte).
=$d417			reson   =   $d417 ; 54295 - Filter resonnance control register.
=$d418			sigvol  =   $d418 ; 54296 - Volume and Filter selectv register
=$d419			potx    =   $d419 ; 54297 - Read game paddle 1 (or 3) X position.
=$d41a			poty    =   $d41a ; 54298 - Read game paddle 1 (or 3) Y position.
=$d41b			random  =   $d41b ; 54299 - Read oscillator/Random number generator.
=$d41c			env3    =   $d41c ; 54300 - Envelope Generator 3 output.

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-sid-notes-ntsc.asm

=$0000			silence     = $0000 ; Silence (no frequency)
=$010c			do0   = $010C ;   16,35Hz NTSC (hex): hi: $01, lo: $0C ; (dec): lo: 12, Hi:  1
=$011c			dod0  = $011C ;   17,33Hz NTSC (hex): hi: $01, lo: $1C ; (dec): lo: 28, Hi:  1
=$012d			re0   = $012D ;   18,35Hz NTSC (hex): hi: $01, lo: $2D ; (dec): lo: 45, Hi:  1
=$013f			red0  = $013F ;   19,45Hz NTSC (hex): hi: $01, lo: $3F ; (dec): lo: 63, Hi:  1
=$0152			mi0   = $0152 ;   20,60Hz NTSC (hex): hi: $01, lo: $52 ; (dec): lo: 82, Hi:  1
=$0166			fa0   = $0166 ;   21,83Hz NTSC (hex): hi: $01, lo: $66 ; (dec): lo:102, Hi:  1
=$017b			fad0  = $017B ;   23,13Hz NTSC (hex): hi: $01, lo: $7B ; (dec): lo:123, Hi:  1
=$0192			sol0  = $0192 ;   24,50Hz NTSC (hex): hi: $01, lo: $92 ; (dec): lo:146, Hi:  1
=$01aa			sold0 = $01AA ;   25,96Hz NTSC (hex): hi: $01, lo: $AA ; (dec): lo:170, Hi:  1
=$01c3			la0   = $01C3 ;   27,50Hz NTSC (hex): hi: $01, lo: $C3 ; (dec): lo:195, Hi:  1
=$01de			lad0  = $01DE ;   29,14Hz NTSC (hex): hi: $01, lo: $DE ; (dec): lo:222, Hi:  1
=$01fa			si0   = $01FA ;   30,87Hz NTSC (hex): hi: $01, lo: $FA ; (dec): lo:250, Hi:  1
=$0219			do1   = $0219 ;   32,71Hz NTSC (hex): hi: $02, lo: $19 ; (dec): lo: 25, Hi:  2
=$0238			dod1  = $0238 ;   34,65Hz NTSC (hex): hi: $02, lo: $38 ; (dec): lo: 56, Hi:  2
=$025a			re1   = $025A ;   36,71Hz NTSC (hex): hi: $02, lo: $5A ; (dec): lo: 90, Hi:  2
=$027e			red1  = $027E ;   38,89Hz NTSC (hex): hi: $02, lo: $7E ; (dec): lo:126, Hi:  2
=$02a4			mi1   = $02A4 ;   41,21Hz NTSC (hex): hi: $02, lo: $A4 ; (dec): lo:164, Hi:  2
=$02cc			fa1   = $02CC ;   43,66Hz NTSC (hex): hi: $02, lo: $CC ; (dec): lo:204, Hi:  2
=$02f7			fad1  = $02F7 ;   46,25Hz NTSC (hex): hi: $02, lo: $F7 ; (dec): lo:247, Hi:  2
=$0324			sol1  = $0324 ;   49,00Hz NTSC (hex): hi: $03, lo: $24 ; (dec): lo: 36, Hi:  3
=$0354			sold1 = $0354 ;   51,91Hz NTSC (hex): hi: $03, lo: $54 ; (dec): lo: 84, Hi:  3
=$0386			la1   = $0386 ;   55,00Hz NTSC (hex): hi: $03, lo: $86 ; (dec): lo:134, Hi:  3
=$03bc			lad1  = $03BC ;   58,28Hz NTSC (hex): hi: $03, lo: $BC ; (dec): lo:188, Hi:  3
=$03f5			si1   = $03F5 ;   61,74Hz NTSC (hex): hi: $03, lo: $F5 ; (dec): lo:245, Hi:  3
=$0431			do2   = $0431 ;   65,41Hz NTSC (hex): hi: $04, lo: $31 ; (dec): lo: 49, Hi:  4
=$0471			dod2  = $0471 ;   69,30Hz NTSC (hex): hi: $04, lo: $71 ; (dec): lo:113, Hi:  4
=$04b4			re2   = $04B4 ;   73,41Hz NTSC (hex): hi: $04, lo: $B4 ; (dec): lo:180, Hi:  4
=$04fc			red2  = $04FC ;   77,79Hz NTSC (hex): hi: $04, lo: $FC ; (dec): lo:252, Hi:  4
=$0548			mi2   = $0548 ;   82,41Hz NTSC (hex): hi: $05, lo: $48 ; (dec): lo: 72, Hi:  5
=$0598			fa2   = $0598 ;   87,31Hz NTSC (hex): hi: $05, lo: $98 ; (dec): lo:152, Hi:  5
=$05ed			fad2  = $05ED ;   92,50Hz NTSC (hex): hi: $05, lo: $ED ; (dec): lo:237, Hi:  5
=$0648			sol2  = $0648 ;   98,00Hz NTSC (hex): hi: $06, lo: $48 ; (dec): lo: 72, Hi:  6
=$06a7			sold2 = $06A7 ;  103,83Hz NTSC (hex): hi: $06, lo: $A7 ; (dec): lo:167, Hi:  6
=$070c			la2   = $070C ;  110,00Hz NTSC (hex): hi: $07, lo: $0C ; (dec): lo: 12, Hi:  7
=$0778			lad2  = $0778 ;  116,55Hz NTSC (hex): hi: $07, lo: $78 ; (dec): lo:120, Hi:  7
=$07ea			si2   = $07EA ;  123,48Hz NTSC (hex): hi: $07, lo: $EA ; (dec): lo:234, Hi:  7
=$0862			do3   = $0862 ;  130,83Hz NTSC (hex): hi: $08, lo: $62 ; (dec): lo: 98, Hi:  8
=$08e2			dod3  = $08E2 ;  138,60Hz NTSC (hex): hi: $08, lo: $E2 ; (dec): lo:226, Hi:  8
=$0969			re3   = $0969 ;  146,83Hz NTSC (hex): hi: $09, lo: $69 ; (dec): lo:105, Hi:  9
=$09f8			red3  = $09F8 ;  155,58Hz NTSC (hex): hi: $09, lo: $F8 ; (dec): lo:248, Hi:  9
=$0a90			mi3   = $0A90 ;  164,83Hz NTSC (hex): hi: $0A, lo: $90 ; (dec): lo:144, Hi: 10
=$0b31			fa3   = $0B31 ;  174,63Hz NTSC (hex): hi: $0B, lo: $31 ; (dec): lo: 49, Hi: 11
=$0bdb			fad3  = $0BDB ;  185,00Hz NTSC (hex): hi: $0B, lo: $DB ; (dec): lo:219, Hi: 11
=$0c8f			sol3  = $0C8F ;  196,00Hz NTSC (hex): hi: $0C, lo: $8F ; (dec): lo:143, Hi: 12
=$0d4e			sold3 = $0D4E ;  207,65Hz NTSC (hex): hi: $0D, lo: $4E ; (dec): lo: 78, Hi: 13
=$0e19			la3   = $0E19 ;  220,00Hz NTSC (hex): hi: $0E, lo: $19 ; (dec): lo: 25, Hi: 14
=$0ef0			lad3  = $0EF0 ;  233,10Hz NTSC (hex): hi: $0E, lo: $F0 ; (dec): lo:240, Hi: 14
=$0fd3			si3   = $0FD3 ;  246,95Hz NTSC (hex): hi: $0F, lo: $D3 ; (dec): lo:211, Hi: 15
=$10c4			do4   = $10C4 ;  261,65Hz NTSC (hex): hi: $10, lo: $C4 ; (dec): lo:196, Hi: 16
=$11c3			dod4  = $11C3 ;  277,20Hz NTSC (hex): hi: $11, lo: $C3 ; (dec): lo:195, Hi: 17
=$12d1			re4   = $12D1 ;  293,65Hz NTSC (hex): hi: $12, lo: $D1 ; (dec): lo:209, Hi: 18
=$13f0			red4  = $13F0 ;  311,15Hz NTSC (hex): hi: $13, lo: $F0 ; (dec): lo:240, Hi: 19
=$1520			mi4   = $1520 ;  329,65Hz NTSC (hex): hi: $15, lo: $20 ; (dec): lo: 32, Hi: 21
=$1661			fa4   = $1661 ;  349,25Hz NTSC (hex): hi: $16, lo: $61 ; (dec): lo: 97, Hi: 22
=$17b6			fad4  = $17B6 ;  370,00Hz NTSC (hex): hi: $17, lo: $B6 ; (dec): lo:182, Hi: 23
=$191f			sol4  = $191F ;  392,00Hz NTSC (hex): hi: $19, lo: $1F ; (dec): lo: 31, Hi: 25
=$1a9d			sold4 = $1A9D ;  415,30Hz NTSC (hex): hi: $1A, lo: $9D ; (dec): lo:157, Hi: 26
=$1c32			la4   = $1C32 ;  440,00Hz NTSC (hex): hi: $1C, lo: $32 ; (dec): lo: 50, Hi: 28
=$1de0			lad4  = $1DE0 ;  466,20Hz NTSC (hex): hi: $1D, lo: $E0 ; (dec): lo:224, Hi: 29
=$1fa6			si4   = $1FA6 ;  493,90Hz NTSC (hex): hi: $1F, lo: $A6 ; (dec): lo:166, Hi: 31
=$2188			do5   = $2188 ;  523,30Hz NTSC (hex): hi: $21, lo: $88 ; (dec): lo:136, Hi: 33
=$2387			dod5  = $2387 ;  554,40Hz NTSC (hex): hi: $23, lo: $87 ; (dec): lo:135, Hi: 35
=$25a2			re5   = $25A2 ;  587,30Hz NTSC (hex): hi: $25, lo: $A2 ; (dec): lo:162, Hi: 37
=$27e0			red5  = $27E0 ;  622,30Hz NTSC (hex): hi: $27, lo: $E0 ; (dec): lo:224, Hi: 39
=$2a3f			mi5   = $2A3F ;  659,30Hz NTSC (hex): hi: $2A, lo: $3F ; (dec): lo: 63, Hi: 42
=$2cc2			fa5   = $2CC2 ;  698,50Hz NTSC (hex): hi: $2C, lo: $C2 ; (dec): lo:194, Hi: 44
=$2f6b			fad5  = $2F6B ;  740,00Hz NTSC (hex): hi: $2F, lo: $6B ; (dec): lo:107, Hi: 47
=$323d			sol5  = $323D ;  784,00Hz NTSC (hex): hi: $32, lo: $3D ; (dec): lo: 61, Hi: 50
=$3539			sold5 = $3539 ;  830,60Hz NTSC (hex): hi: $35, lo: $39 ; (dec): lo: 57, Hi: 53
=$3864			la5   = $3864 ;  880,00Hz NTSC (hex): hi: $38, lo: $64 ; (dec): lo:100, Hi: 56
=$3bbf			lad5  = $3BBF ;  932,40Hz NTSC (hex): hi: $3B, lo: $BF ; (dec): lo:191, Hi: 59
=$3f4c			si5   = $3F4C ;  987,80Hz NTSC (hex): hi: $3F, lo: $4C ; (dec): lo: 76, Hi: 63
=$4311			do6   = $4311 ; 1046,60Hz NTSC (hex): hi: $43, lo: $11 ; (dec): lo: 17, Hi: 67
=$470d			dod6  = $470D ; 1108,80Hz NTSC (hex): hi: $47, lo: $0D ; (dec): lo: 13, Hi: 71
=$4b45			re6   = $4B45 ; 1174,60Hz NTSC (hex): hi: $4B, lo: $45 ; (dec): lo: 69, Hi: 75
=$4fc1			red6  = $4FC1 ; 1244,60Hz NTSC (hex): hi: $4F, lo: $C1 ; (dec): lo:193, Hi: 79
=$547f			mi6   = $547F ; 1318,60Hz NTSC (hex): hi: $54, lo: $7F ; (dec): lo:127, Hi: 84
=$5985			fa6   = $5985 ; 1397,00Hz NTSC (hex): hi: $59, lo: $85 ; (dec): lo:133, Hi: 89
=$5ed7			fad6  = $5ED7 ; 1480,00Hz NTSC (hex): hi: $5E, lo: $D7 ; (dec): lo:215, Hi: 94
=$647a			sol6  = $647A ; 1568,00Hz NTSC (hex): hi: $64, lo: $7A ; (dec): lo:122, Hi:100
=$6a73			sold6 = $6A73 ; 1661,20Hz NTSC (hex): hi: $6A, lo: $73 ; (dec): lo:115, Hi:106
=$70c8			la6   = $70C8 ; 1760,00Hz NTSC (hex): hi: $70, lo: $C8 ; (dec): lo:200, Hi:112
=$777f			lad6  = $777F ; 1864,80Hz NTSC (hex): hi: $77, lo: $7F ; (dec): lo:127, Hi:119
=$7e99			si6   = $7E99 ; 1975,60Hz NTSC (hex): hi: $7E, lo: $99 ; (dec): lo:153, Hi:126
=$8622			do7   = $8622 ; 2093,20Hz NTSC (hex): hi: $86, lo: $22 ; (dec): lo: 34, Hi:134
=$8e1a			dod7  = $8E1A ; 2217,60Hz NTSC (hex): hi: $8E, lo: $1A ; (dec): lo: 26, Hi:142
=$9689			re7   = $9689 ; 2349,20Hz NTSC (hex): hi: $96, lo: $89 ; (dec): lo:137, Hi:150
=$9f82			red7  = $9F82 ; 2489,20Hz NTSC (hex): hi: $9F, lo: $82 ; (dec): lo:130, Hi:159
=$a8fe			mi7   = $A8FE ; 2637,20Hz NTSC (hex): hi: $A8, lo: $FE ; (dec): lo:254, Hi:168
=$b30a			fa7   = $B30A ; 2794,00Hz NTSC (hex): hi: $B3, lo: $0A ; (dec): lo: 10, Hi:179
=$bdad			fad7  = $BDAD ; 2960,00Hz NTSC (hex): hi: $BD, lo: $AD ; (dec): lo:173, Hi:189
=$c8f4			sol7  = $C8F4 ; 3136,00Hz NTSC (hex): hi: $C8, lo: $F4 ; (dec): lo:244, Hi:200
=$d4e6			sold7 = $D4E6 ; 3322,40Hz NTSC (hex): hi: $D4, lo: $E6 ; (dec): lo:230, Hi:212
=$e18f			la7   = $E18F ; 3520,00Hz NTSC (hex): hi: $E1, lo: $8F ; (dec): lo:143, Hi:225
=$eefe			lad7  = $EEFE ; 3729,60Hz NTSC (hex): hi: $EE, lo: $FE ; (dec): lo:254, Hi:238
=$fd31			si7   = $FD31 ; 3951,20Hz NTSC (hex): hi: $FD, lo: $31 ; (dec): lo: 49, Hi:253

;******  Return to file: charedit.asm


;******  End of listing

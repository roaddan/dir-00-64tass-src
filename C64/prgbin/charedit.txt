
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Thu Oct  2 15:23:15 2025

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm

="20250925-000001"	version  = "20250925-000001"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1          .word bcmd2         ;Adresse de la commande basic suivante.
>0803	01 00		               .word 1             ;Numero de la ligne Basic.
>0805	8f		               .byte $8F           ;Le token de la commande REM du Basic
>0806	2a 50 52 4f	               .text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2          .word bcmd3         ;Adresse de la commande basic suivante.
>082b	02 00		               .word 2             ;Numero de la ligne Basic.
>082d	8f		               .byte $8F           ;Le token de la commande REM du Basic
>082e	2a 50 41 52	               .text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3          .word bcmd4         ;Adresse de la commande basic suivante.
>0846	03 00		               .word 3             ;Numero de la ligne Basic.
>0848	9e		               .byte $9e           ;Le token de la commande SYS du Basic
>0849	30 32 31 32	               .text format("%05d",hpgmstart)
>084d	39
>084e	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4          .word $0000         ;L'adresse de la commande Basic suivante.
.0851	20 55 08	hpgmstart     jsr   main           ; Le programme principale doit s'appeler "main"
.0854	60		              rts                  ; ... doit se rerminer par un RTS.

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

=18			fkeyleft       =    18
=9			f1top          =    9
=$0400			scrnnewram     =    $0400
=10			charsdef       =    10
=9			grid_top       =    9
=1			grid_left      =    1
=16			grid_bot       =    grid_top + 7
=8			grid_right     =    grid_left + 7
=$0b			bordure        =    vgris
=$00			fond           =    vnoir
=$03			mesgcol        =    vcyan
=$03			menu1col1      =    vcyan
=$0e			menu1col2      =    vbleu1
=$0f			menu2col1      =    vgris2
=$0c			menu2col2      =    vgris1
=$01			flashcol       =    vblanc
=$07			whoamicol      =    vjaune
=$01			charcolor      =    vblanc
=$0f			charscolor     =    vgris2
.0855			main
.0855	20 5c 24	               jsr  push
.0858	20 29 23	               jsr  scrmaninit
.085b	08		               php
.085c	48		               pha
.085d	a9 08		               lda  #$08
.085f	20 d2 ff	               jsr  $ffd2
.0862	68		               pla
.0863	28		               plp
.0864	20 ec 0a	               jsr  drawcredits
.0867	20 ca 24	               jsr  pushreg
.086a	a2 5d		               ldx  #<menu_msg
.086c	a0 1e		               ldy  #>menu_msg
.086e	20 f3 23	               jsr  putscxy
.0871	20 f9 24	               jsr  popreg
.0874	20 1d 22	               jsr  screendis
.0877	20 dc 10	               jsr  copycharset
.087a	20 49 23	               jsr  cls
.087d	20 c6 10	               jsr  setscreenptr
.0880	20 87 0b	               jsr  setdefaultchar
.0883	20 37 11	               jsr  staticscreen
.0886	20 09 10	               jsr  drawbitmap
.0889	a9 00		               lda  #$00
.088b	8d a7 09	               sta  fkeyset
.088e	20 8c 11	               jsr  drawfkeys
.0891	a9 00		               lda  #$00
.0893	20 ca 24	               jsr  pushreg
.0896	a2 53		               ldx  #<blankmsg
.0898	a0 1b		               ldy  #>blankmsg
.089a	20 f3 23	               jsr  putscxy
.089d	a2 7f		               ldx  #<prompt_msg
.089f	a0 1b		               ldy  #>prompt_msg
.08a1	20 f3 23	               jsr  putscxy
.08a4	20 f9 24	               jsr  popreg
.08a7	20 0e 28	               jsr  kbflushbuff
.08aa	20 2a 22	               jsr  screenena
.08ad	20 98 0d	               jsr  keyaction
.08b0	20 49 23	               jsr  cls
.08b3	20 ec 0a	               jsr  drawcredits
.08b6	20 ca 24	               jsr  pushreg
.08b9	a2 eb		               ldx  #<bye_msg
.08bb	a0 1f		               ldy  #>bye_msg
.08bd	20 f3 23	               jsr  putscxy
.08c0	20 f9 24	               jsr  popreg
.08c3	20 ca 24	               jsr  pushreg
.08c6	a2 0d		               ldx  #<any_msg
.08c8	a0 20		               ldy  #>any_msg
.08ca	20 f3 23	               jsr  putscxy
.08cd	20 f9 24	               jsr  popreg
.08d0	20 06 28	               jsr  getkey
.08d3	20 49 23	               jsr  cls
.08d6	20 97 24	endmain        jsr  pop
.08d9	00		               brk
.08da			savetofile
.08da	20 5c 24	               jsr  pushall
.08dd	a9 b8		               lda  #<fname
.08df	8d 52 2b	               sta  dsk_fnptr
.08e2	a9 09		               lda  #>fname
.08e4	8d 53 2b	               sta  dsk_fnptr+1
.08e7	a9 0d		               lda  #(device-fname-1)
.08e9	8d 54 2b	               sta  dsk_fnlen
.08ec	ad c6 09	               lda  device
.08ef	29 0f		               and  #$0f
.08f1	8d 51 2b	               sta  dsk_lfsno
.08f4	8d 50 2b	               sta  dsk_dev
.08f7	a9 00		               lda  #<bitmapmem
.08f9	8d 4c 2b	               sta  dsk_data_s
.08fc	a9 28		               lda  #>bitmapmem
.08fe	8d 4d 2b	               sta  dsk_data_s+1
.0901	a9 00		               lda  #<endofaddr
.0903	8d 4e 2b	               sta  dsk_data_e
.0906	a9 48		               lda  #>endofaddr
.0908	8d 4f 2b	               sta  dsk_data_e+1
.090b	20 ca 24	               jsr  pushreg
.090e	a2 53		               ldx  #<blankmsg
.0910	a0 1b		               ldy  #>blankmsg
.0912	20 f3 23	               jsr  putscxy
.0915	20 f9 24	               jsr  popreg
.0918	20 ca 24	               jsr  pushreg
.091b	a2 ab		               ldx  #<wait_msg
.091d	a0 1b		               ldy  #>wait_msg
.091f	20 f3 23	               jsr  putscxy
.0922	20 f9 24	               jsr  popreg
.0925	20 ca 24	               jsr  pushreg
.0928	a2 01		               ldx  #1
.092a	a0 04		               ldy  #4
.092c	20 80 23	               jsr  gotoxy
.092f	20 f9 24	               jsr  popreg
.0932	20 07 2a	               jsr  memtofile
.0935	20 97 24	               jsr  popall
.0938	60		               rts
.0939			loadfromfile
.0939	20 5c 24	               jsr  pushall
.093c	a9 b8		               lda  #<fname
.093e	8d 52 2b	               sta  dsk_fnptr
.0941	a9 09		               lda  #>fname
.0943	8d 53 2b	               sta  dsk_fnptr+1
.0946	a9 0d		               lda  #(device-fname-1)
.0948	8d 54 2b	               sta  dsk_fnlen
.094b	ad c6 09	               lda  device
.094e	29 0f		               and  #$0f
.0950	8d 50 2b	               sta  dsk_dev
.0953	8d 51 2b	               sta  dsk_lfsno
.0956	a9 00		               lda  #<bitmapmem
.0958	8d 4c 2b	               sta  dsk_data_s
.095b	a9 28		               lda  #>bitmapmem
.095d	8d 4d 2b	               sta  dsk_data_s+1
.0960	a9 00		               lda  #<endofaddr
.0962	8d 4e 2b	               sta  dsk_data_e
.0965	a9 48		               lda  #>endofaddr
.0967	8d 4f 2b	               sta  dsk_data_e+1
.096a	20 ca 24	               jsr  pushreg
.096d	a2 53		               ldx  #<blankmsg
.096f	a0 1b		               ldy  #>blankmsg
.0971	20 f3 23	               jsr  putscxy
.0974	20 f9 24	               jsr  popreg
.0977	20 ca 24	               jsr  pushreg
.097a	a2 ab		               ldx  #<wait_msg
.097c	a0 1b		               ldy  #>wait_msg
.097e	20 f3 23	               jsr  putscxy
.0981	20 f9 24	               jsr  popreg
.0984	20 ca 24	               jsr  pushreg
.0987	a2 01		               ldx  #1
.0989	a0 04		               ldy  #4
.098b	20 80 23	               jsr  gotoxy
.098e	20 f9 24	               jsr  popreg
.0991	20 3f 2a	               jsr  filetomem
.0994	20 97 24	               jsr  popall
.0997	60		               rts
=10240			bitmapmem      =         charsdef * 1024     ;Calcul position ram des caracteres.
=18432			endofaddr      =         (charsdef * 1024) + (4*$800)
=61440			mstopaddr      =         $d000+(4*$800)
>0998	00 d0		startaddr      .word     $d000               ; 53248
>099a	00 f0		stopaddr       .word     mstopaddr           ; 55296
>099c	00 28		bitmapaddr     .word     bitmapmem           ; $3000, 12288
>099e	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>09a2	08 04 02 01
>09a6	00		editmode       .byte     0
>09a7	00		fkeyset        .byte     0
>09a8	00		currentchar    .byte     0
>09a9	00		currentkey     .byte     0
>09aa	00		previouskey    .byte     0
>09ab	00		bitmapoffset   .byte     0
>09ac	00 00		mapaddr        .word     0
>09ae	00 00		byteaddr       .word     0
>09b0	00 00		gridaddr       .word     0
>09b2	09		cursln         .byte     grid_top
>09b3	01		curscl         .byte     grid_left
>09b4	05 1b 03 12	pfname         .byte     vvert,27,3,18
>09b8	40 30 3a	fname          .text     "@0:"
>09bb	4f 52 49 47	name           .text     "origin"
>09bf	49 4e
>09c1	2e 43 48 52	ext            .null     ".chr"
>09c5	00
>09c6	08		device         .byte     8

;******  Processing file: routines.asm

.09c7			screenredraw
.09c7	20 ca 24	               jsr  pushreg
.09ca	20 1d 22	               jsr  screendis
.09cd	20 49 23	               jsr  cls
.09d0	20 37 11	               jsr  staticscreen
.09d3	20 09 10	               jsr  drawbitmap
.09d6	20 8c 11	               jsr  drawfkeys
.09d9	20 ca 24	               jsr  pushreg
.09dc	a2 0d		               ldx  #13
.09de	a0 0c		               ldy  #12
.09e0	20 80 23	               jsr  gotoxy
.09e3	20 f9 24	               jsr  popreg
.09e6	ad a9 09	               lda  currentkey
.09e9	20 60 23	               jsr  putch
.09ec	20 ca 24	               jsr  pushreg
.09ef	a2 53		               ldx  #<blankmsg
.09f1	a0 1b		               ldy  #>blankmsg
.09f3	20 f3 23	               jsr  putscxy
.09f6	a2 7f		               ldx  #<prompt_msg
.09f8	a0 1b		               ldy  #>prompt_msg
.09fa	20 f3 23	               jsr  putscxy
.09fd	20 f9 24	               jsr  popreg
.0a00	20 2a 22	               jsr  screenena
.0a03	20 f9 24	               jsr  popreg
.0a06	60		               rts
.0a07			getfname
.0a07	20 ca 24	               jsr  pushreg
.0a0a	20 ca 24	               jsr  pushreg
.0a0d	a2 53		               ldx  #<blankmsg
.0a0f	a0 1b		               ldy  #>blankmsg
.0a11	20 f3 23	               jsr  putscxy
.0a14	a2 f4		               ldx  #<fname_msg
.0a16	a0 1d		               ldy  #>fname_msg
.0a18	20 f3 23	               jsr  putscxy
.0a1b	20 f9 24	               jsr  popreg
.0a1e	a2 00		               ldx  #$00
.0a20	8e 54 0a	               stx  count
.0a23	20 55 0a	getanother     jsr  getalphanum
.0a26	20 60 23	               jsr  putch
.0a29	ae 54 0a	               ldx  count
.0a2c	9d bb 09	               sta  name,x
.0a2f	ee 54 0a	               inc  count
.0a32	ae 54 0a	               ldx  count
.0a35	e0 06		               cpx  #$06
.0a37	f0 03		               beq  finish
.0a39	4c 23 0a	               jmp  getanother
.0a3c			finish
.0a3c	20 ca 24	               jsr  pushreg
.0a3f	a2 53		               ldx  #<blankmsg
.0a41	a0 1b		               ldy  #>blankmsg
.0a43	20 f3 23	               jsr  putscxy
.0a46	a2 b4		               ldx  #<pfname
.0a48	a0 09		               ldy  #>pfname
.0a4a	20 f3 23	               jsr  putscxy
.0a4d	20 f9 24	               jsr  popreg
.0a50	20 f9 24	               jsr  popreg
.0a53	60		               rts
>0a54	00		count          .byte     0
.0a55			getalphanum
.0a55	20 ca 24	               jsr  pushreg
.0a58	20 06 28	getanother     jsr  getkey
.0a5b	c9 30		               cmp  #$30      ; 0
.0a5d	30 f9		               bmi  getanother
.0a5f	c9 3a		               cmp  #$3a      ; 9+1
.0a61	30 0b		               bmi  goodone
.0a63	c9 41		isitletter     cmp  #$41      ; A
.0a65	30 f1		               bmi  getanother
.0a67	c9 5b		               cmp  #$5b      ; Z+1
.0a69	30 03		               bmi  goodone
.0a6b	4c 58 0a	               jmp  getanother
.0a6e	8d 78 0a	goodone        sta  tempbyte
.0a71	20 f9 24	               jsr  popreg
.0a74	ad 78 0a	               lda  tempbyte
.0a77	60		               rts
>0a78	00		tempbyte       .byte     0
.0a79			copychar
.0a79	20 5c 24	               jsr  pushall
.0a7c	20 b5 0a	               jsr  getvalidkey
.0a7f	ad 9c 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0a82	85 fb		               sta  zpage1
.0a84	ad 9d 09	               lda  bitmapaddr+1
.0a87	85 fc		               sta  zpage1+1
.0a89	ae eb 0a	               ldx  copykey
.0a8c	bd 6d 28	               lda  asciitorom,x
.0a8f	aa		               tax
.0a90	e0 00		               cpx  #$00
.0a92	f0 08		               beq  no_offset      ; sommes nous déja à 0
.0a94	a9 08		addagain       lda  #$08
.0a96	20 54 13	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0a99	ca		               dex                 ; pour chaque caracteres
.0a9a	d0 f8		               bne  addagain
.0a9c	ad ac 09	no_offset      lda  mapaddr        ; le caractere actuel
.0a9f	85 fd		               sta  zpage2         ;
.0aa1	ad ad 09	               lda  mapaddr+1      ;
.0aa4	85 fe		               sta  zpage2+1       ;
.0aa6	a0 00		               ldy  #$00
.0aa8	b1 fb		nextbyte       lda  (zpage1),y
.0aaa	91 fd		               sta  (zpage2),y
.0aac	c8		               iny
.0aad	c0 08		               cpy  #$08
.0aaf	d0 f7		               bne  nextbyte
.0ab1	20 97 24	out            jsr  popall
.0ab4	60		               rts
.0ab5			getvalidkey
.0ab5	20 ca 24	               jsr  pushreg
.0ab8	20 ca 24	               jsr  pushreg
.0abb	a2 53		               ldx  #<blankmsg
.0abd	a0 1b		               ldy  #>blankmsg
.0abf	20 f3 23	               jsr  putscxy
.0ac2	a2 cc		               ldx  #<copychar_msg
.0ac4	a0 1d		               ldy  #>copychar_msg
.0ac6	20 f3 23	               jsr  putscxy
.0ac9	20 f9 24	               jsr  popreg
.0acc	20 06 28	getgoodkey     jsr  getkey
.0acf	8d eb 0a	               sta  copykey
.0ad2	aa		               tax
.0ad3	bc 6d 28	               ldy  asciitorom,x
.0ad6	c4 00		               cpy  $00
.0ad8	d0 0a		               bne  goodone
.0ada	ae eb 0a	               ldx  copykey
.0add	e0 40		               cpx  #$40
.0adf	f0 03		               beq  goodone
.0ae1	4c cc 0a	               jmp  getgoodkey
.0ae4	20 60 23	goodone        jsr  putch
.0ae7	20 f9 24	               jsr  popreg
.0aea	60		               rts
>0aeb	00		copykey        .byte 0
.0aec			drawcredits
.0aec	20 ca 24	               jsr  pushreg
.0aef	20 49 23	               jsr  cls
.0af2	20 ca 24	               jsr  pushreg
.0af5	a2 77		               ldx  #<whoami0
.0af7	a0 1e		               ldy  #>whoami0
.0af9	20 f3 23	               jsr  putscxy
.0afc	20 f9 24	               jsr  popreg
.0aff	20 ca 24	               jsr  pushreg
.0b02	a2 9c		               ldx  #<whoami1
.0b04	a0 1e		               ldy  #>whoami1
.0b06	20 f3 23	               jsr  putscxy
.0b09	20 f9 24	               jsr  popreg
.0b0c	20 ca 24	               jsr  pushreg
.0b0f	a2 c3		               ldx  #<whoami2
.0b11	a0 1e		               ldy  #>whoami2
.0b13	20 f3 23	               jsr  putscxy
.0b16	20 f9 24	               jsr  popreg
.0b19	20 ca 24	               jsr  pushreg
.0b1c	a2 e8		               ldx  #<whoami3
.0b1e	a0 1e		               ldy  #>whoami3
.0b20	20 f3 23	               jsr  putscxy
.0b23	20 f9 24	               jsr  popreg
.0b26	20 ca 24	               jsr  pushreg
.0b29	a2 0d		               ldx  #<whoami4
.0b2b	a0 1f		               ldy  #>whoami4
.0b2d	20 f3 23	               jsr  putscxy
.0b30	20 f9 24	               jsr  popreg
.0b33	20 ca 24	               jsr  pushreg
.0b36	a2 32		               ldx  #<whoami5
.0b38	a0 1f		               ldy  #>whoami5
.0b3a	20 f3 23	               jsr  putscxy
.0b3d	20 f9 24	               jsr  popreg
.0b40	20 ca 24	               jsr  pushreg
.0b43	a2 57		               ldx  #<whoami6
.0b45	a0 1f		               ldy  #>whoami6
.0b47	20 f3 23	               jsr  putscxy
.0b4a	20 f9 24	               jsr  popreg
.0b4d	20 ca 24	               jsr  pushreg
.0b50	a2 7c		               ldx  #<whoami7
.0b52	a0 1f		               ldy  #>whoami7
.0b54	20 f3 23	               jsr  putscxy
.0b57	20 f9 24	               jsr  popreg
.0b5a	20 ca 24	               jsr  pushreg
.0b5d	a2 a1		               ldx  #<whoami8
.0b5f	a0 1f		               ldy  #>whoami8
.0b61	20 f3 23	               jsr  putscxy
.0b64	20 f9 24	               jsr  popreg
.0b67	20 ca 24	               jsr  pushreg
.0b6a	a2 c6		               ldx  #<whoami9
.0b6c	a0 1f		               ldy  #>whoami9
.0b6e	20 f3 23	               jsr  putscxy
.0b71	20 f9 24	               jsr  popreg
.0b74	20 72 13	               jsr  delay
.0b77	20 72 13	               jsr  delay
.0b7a	20 72 13	               jsr  delay
.0b7d	20 72 13	               jsr  delay
.0b80	20 72 13	               jsr  delay
.0b83	20 f9 24	               jsr  popreg
.0b86	60		               rts
.0b87			setdefaultchar
.0b87	20 ca 24	               jsr  pushreg
.0b8a	a9 40		               lda  #$40
.0b8c	8d a9 09	               sta  currentkey
.0b8f	aa		               tax
.0b90	bc 6d 28	               ldy  asciitorom,x
.0b93	8c ab 09	               sty  bitmapoffset
.0b96	20 51 0c	               jsr  drawkeyval
.0b99	20 09 10	               jsr  drawbitmap
.0b9c	20 ca 24	               jsr  pushreg
.0b9f	a2 0d		               ldx  #13
.0ba1	a0 0c		               ldy  #12
.0ba3	20 80 23	               jsr  gotoxy
.0ba6	20 f9 24	               jsr  popreg
.0ba9	20 60 23	               jsr  putch
.0bac	20 ca 24	               jsr  pushreg
.0baf	a2 11		               ldx  #17
.0bb1	a0 05		               ldy  #5
.0bb3	20 80 23	               jsr  gotoxy
.0bb6	20 f9 24	               jsr  popreg
.0bb9	20 9a 27	               jsr  atodec
.0bbc	20 ca 24	               jsr  pushreg
.0bbf	a2 97		               ldx  #<adec
.0bc1	a0 26		               ldy  #>adec
.0bc3	20 66 23	               jsr  puts
.0bc6	20 f9 24	               jsr  popreg
.0bc9	20 f9 24	               jsr  popreg
.0bcc	60		               rts
.0bcd			resetmenuacolor
.0bcd	20 ca 24	               jsr  pushreg
.0bd0	a9 03		               lda  #menu1col1
.0bd2	8d 65 20	               sta  f1abutton
.0bd5	8d 9b 20	               sta  f3abutton
.0bd8	8d d1 20	               sta  f5abutton
.0bdb	8d 07 21	               sta  f7abutton
.0bde	a9 0e		               lda  #menu1col2
.0be0	8d 80 20	               sta  f2abutton
.0be3	8d b6 20	               sta  f4abutton
.0be6	8d ec 20	               sta  f6abutton
.0be9	8d 22 21	               sta  f8abutton
.0bec	20 f9 24	               jsr  popreg
.0bef	60		               rts
.0bf0			resetmenubcolor
.0bf0	20 ca 24	               jsr  pushreg
.0bf3	a9 0f		               lda  #menu2col1
.0bf5	8d 3d 21	               sta  f1bbutton
.0bf8	8d 73 21	               sta  f3bbutton
.0bfb	8d a9 21	               sta  f5bbutton
.0bfe	8d df 21	               sta  f7bbutton
.0c01	a9 0f		               lda  #menu2col1
.0c03	8d 58 21	               sta  f2bbutton
.0c06	8d 8e 21	               sta  f4bbutton
.0c09	8d c4 21	               sta  f6bbutton
.0c0c	8d fa 21	               sta  f8bbutton
.0c0f	20 f9 24	               jsr  popreg
.0c12	60		               rts
.0c13			setmenuacolor
.0c13	20 ca 24	               jsr  pushreg
.0c16	8d 65 20	               sta  f1abutton
.0c19	8d 80 20	               sta  f2abutton
.0c1c	8d 9b 20	               sta  f3abutton
.0c1f	8d b6 20	               sta  f4abutton
.0c22	8d d1 20	               sta  f5abutton
.0c25	8d ec 20	               sta  f6abutton
.0c28	8d 07 21	               sta  f7abutton
.0c2b	8d 22 21	               sta  f8abutton
.0c2e	20 f9 24	               jsr  popreg
.0c31	60		               rts
.0c32			setmenubcolor
.0c32	20 ca 24	               jsr  pushreg
.0c35	8d 3d 21	               sta  f1bbutton
.0c38	8d 58 21	               sta  f2bbutton
.0c3b	8d 73 21	               sta  f3bbutton
.0c3e	8d 8e 21	               sta  f4bbutton
.0c41	8d a9 21	               sta  f5bbutton
.0c44	8d c4 21	               sta  f6bbutton
.0c47	8d df 21	               sta  f7bbutton
.0c4a	8d fa 21	               sta  f8bbutton
.0c4d	20 f9 24	               jsr  popreg
.0c50	60		               rts
.0c51			drawkeyval
.0c51	20 ca 24	               jsr  pushreg
.0c54	20 ca 24	               jsr  pushreg
.0c57	a2 01		               ldx  #1
.0c59	a0 13		               ldy  #19
.0c5b	20 80 23	               jsr  gotoxy
.0c5e	20 f9 24	               jsr  popreg
.0c61	ad a9 09	               lda  currentkey
.0c64	20 60 23	               jsr  putch
.0c67	48		               pha
.0c68	a9 3d		               lda  #'='
.0c6a	20 60 23	               jsr  putch
.0c6d	a9 25		               lda  #'%'
.0c6f	20 60 23	               jsr  putch
.0c72	68		               pla
.0c73	20 60 27	               jsr  putabin
.0c76	20 ca 24	               jsr  pushreg
.0c79	a2 01		               ldx  #1
.0c7b	a0 14		               ldy  #20
.0c7d	20 80 23	               jsr  gotoxy
.0c80	20 f9 24	               jsr  popreg
.0c83	20 ca 24	               jsr  pushreg
.0c86	a2 52		               ldx  #<txt1
.0c88	a0 0d		               ldy  #>txt1
.0c8a	20 66 23	               jsr  puts
.0c8d	20 f9 24	               jsr  popreg
.0c90	a9 24		               lda  #'$'
.0c92	20 60 23	               jsr  putch
.0c95	ad a9 09	               lda  currentkey
.0c98	20 c6 26	               jsr  putahex
.0c9b	20 ca 24	               jsr  pushreg
.0c9e	a2 01		               ldx  #1
.0ca0	a0 15		               ldy  #21
.0ca2	20 80 23	               jsr  gotoxy
.0ca5	20 f9 24	               jsr  popreg
.0ca8	20 ca 24	               jsr  pushreg
.0cab	a2 5d		               ldx  #<txt2
.0cad	a0 0d		               ldy  #>txt2
.0caf	20 66 23	               jsr  puts
.0cb2	20 f9 24	               jsr  popreg
.0cb5	a9 24		               lda  #'$'
.0cb7	20 60 23	               jsr  putch
.0cba	ad 9d 09	               lda  bitmapaddr+1
.0cbd	20 c6 26	               jsr  putahex
.0cc0	ad 9c 09	               lda  bitmapaddr
.0cc3	20 c6 26	               jsr  putahex
.0cc6	20 ca 24	               jsr  pushreg
.0cc9	a2 01		               ldx  #1
.0ccb	a0 16		               ldy  #22
.0ccd	20 80 23	               jsr  gotoxy
.0cd0	20 f9 24	               jsr  popreg
.0cd3	20 ca 24	               jsr  pushreg
.0cd6	a2 68		               ldx  #<txt3
.0cd8	a0 0d		               ldy  #>txt3
.0cda	20 66 23	               jsr  puts
.0cdd	20 f9 24	               jsr  popreg
.0ce0	a9 24		               lda  #'$'
.0ce2	20 60 23	               jsr  putch
.0ce5	ad ab 09	               lda  bitmapoffset
.0ce8	20 c6 26	               jsr  putahex
.0ceb	20 ca 24	               jsr  pushreg
.0cee	a2 01		               ldx  #1
.0cf0	a0 17		               ldy  #23
.0cf2	20 80 23	               jsr  gotoxy
.0cf5	20 f9 24	               jsr  popreg
.0cf8	20 ca 24	               jsr  pushreg
.0cfb	a2 75		               ldx  #<txt4
.0cfd	a0 0d		               ldy  #>txt4
.0cff	20 66 23	               jsr  puts
.0d02	20 f9 24	               jsr  popreg
.0d05	a9 24		               lda  #'$'
.0d07	20 60 23	               jsr  putch
.0d0a	ad ad 09	               lda  mapaddr+1
.0d0d	20 c6 26	               jsr  putahex
.0d10	ad ac 09	               lda  mapaddr
.0d13	20 c6 26	               jsr  putahex
.0d16	20 ca 24	               jsr  pushreg
.0d19	a2 01		               ldx  #1
.0d1b	a0 18		               ldy  #24
.0d1d	20 80 23	               jsr  gotoxy
.0d20	20 f9 24	               jsr  popreg
.0d23	20 ca 24	               jsr  pushreg
.0d26	a2 80		               ldx  #<txt5
.0d28	a0 0d		               ldy  #>txt5
.0d2a	20 66 23	               jsr  puts
.0d2d	20 f9 24	               jsr  popreg
.0d30	ad b3 09	               lda  curscl
.0d33	20 c6 26	               jsr  putahex
.0d36	a9 da		               lda  #$da
.0d38	20 60 23	               jsr  putch
.0d3b	ad b2 09	               lda  cursln
.0d3e	20 c6 26	               jsr  putahex
.0d41	20 f9 24	               jsr  popreg
.0d44	60		               rts
>0d45	50 45 54 53	txt0           .null     "petscii :   "
>0d49	43 49 49 20 3a 20 20 20 00
>0d52	4b 45 59 20	txt1           .null     "key code: "
>0d56	43 4f 44 45 3a 20 00
>0d5d	42 49 54 4d	txt2           .null     "bitmap..: "
>0d61	41 50 2e 2e 3a 20 00
>0d68	4f 46 46 53	txt3           .null     "offset..:   "
>0d6c	45 54 2e 2e 3a 20 20 20 00
>0d75	4d 41 50 41	txt4           .null     "mapaddr.: "
>0d79	44 44 52 2e 3a 20 00
>0d80	43 55 52 53	txt5           .null     "cursval.: "
>0d84	56 41 4c 2e 3a 20 00
>0d8b	53 54 41 43	txt6           .null     "stack......:"
>0d8f	4b 2e 2e 2e 2e 2e 2e 3a 00
.0d98			keyaction
.0d98	20 ca 24	               jsr  pushreg
.0d9b	20 06 28	keyloop        jsr  getkey
.0d9e	c9 85		f1             cmp  #key_f1
.0da0	d0 03		               bne  f2
.0da2	4c 1d 0e	               jmp  dof1
.0da5	c9 89		f2             cmp  #key_f2
.0da7	d0 03		               bne  f3
.0da9	4c 23 0e	               jmp  dof2
.0dac	c9 86		f3             cmp  #key_f3
.0dae	d0 03		               bne  f4
.0db0	4c 29 0e	               jmp  dof3
.0db3	c9 8a		f4             cmp  #key_f4
.0db5	d0 03		               bne  f5
.0db7	4c 2f 0e	               jmp  dof4
.0dba	c9 87		f5             cmp  #key_f5
.0dbc	d0 03		               bne  f6
.0dbe	4c 35 0e	               jmp  dof5
.0dc1	c9 8b		f6             cmp  #key_f6
.0dc3	d0 03		               bne  f7
.0dc5	4c 3b 0e	               jmp  dof6
.0dc8	c9 88		f7             cmp  #key_f7
.0dca	d0 03		               bne  f8
.0dcc	4c 41 0e	               jmp  dof7
.0dcf	c9 8c		f8             cmp  #key_f8
.0dd1	d0 03		               bne  ctrlx
.0dd3	4c 47 0e	               jmp  dof8
.0dd6	c9 18		ctrlx          cmp  #ctrl_x
.0dd8	d0 03		               bne  ctrlr
.0dda	4c 53 0e	               jmp  doquit
.0ddd	c9 12		ctrlr          cmp  #ctrl_r
.0ddf	d0 03		               bne  ishex14
.0de1	4c 4d 0e	               jmp  doredraw
.0de4	c9 14		ishex14        cmp  #$14
.0de6	d0 03		               bne  ishex12
.0de8	4c 9b 0d	               jmp  keyloop
.0deb	c9 12		ishex12        cmp  #$12
.0ded	d0 03		               bne  reste
.0def	4c 9b 0d	               jmp  keyloop
.0df2			reste
.0df2	20 ca 24	               jsr  pushreg
.0df5	a2 0d		               ldx  #13
.0df7	a0 0c		               ldy  #12
.0df9	20 80 23	               jsr  gotoxy
.0dfc	20 f9 24	               jsr  popreg
.0dff	20 60 23	               jsr  putch
.0e02	48		               pha                 ; remembers
.0e03	ad a9 09	               lda  currentkey     ; the
.0e06	8d aa 09	               sta  previouskey    ; previous key
.0e09	68		               pla                 ;
.0e0a	8d a9 09	               sta  currentkey     ; an store current
.0e0d	aa		               tax
.0e0e	bc 6d 28	               ldy  asciitorom,x
.0e11	8c ab 09	               sty  bitmapoffset
.0e14	20 51 0c	               jsr  drawkeyval
.0e17	20 09 10	               jsr  drawbitmap
.0e1a	4c 9b 0d	               jmp  keyloop
.0e1d	20 88 13	dof1           jsr  f1action  ;edit/reverse
.0e20	4c 9b 0d	               jmp  keyloop
.0e23	20 a9 14	dof2           jsr  f2action  ;save/flip vert
.0e26	4c 9b 0d	               jmp  keyloop
.0e29	20 5d 15	dof3           jsr  f3action  ;load/flip horz
.0e2c	4c 9b 0d	               jmp  keyloop
.0e2f	20 3a 16	dof4           jsr  f4action  ;copy/scroll r
.0e32	4c 9b 0d	               jmp  keyloop
.0e35	20 1a 17	dof5           jsr  f5action  ;clear/scroll l
.0e38	4c 9b 0d	               jmp  keyloop
.0e3b	20 ce 17	dof6           jsr  f6action  ;fill;/scroll up
.0e3e	4c 9b 0d	               jmp  keyloop
.0e41	20 82 18	dof7           jsr  f7action  ;clear;/scroll down
.0e44	4c 9b 0d	               jmp  keyloop
.0e47	20 3b 19	dof8           jsr  f8action  ; function
.0e4a	4c 9b 0d	               jmp  keyloop
.0e4d	20 c7 09	doredraw       jsr  screenredraw
.0e50	4c 9b 0d	               jmp  keyloop
.0e53	20 f9 24	doquit         jsr  popreg
.0e56	60		               rts
.0e57			editor
.0e57	20 ca 24	               jsr  pushreg
.0e5a	20 ca 24	               jsr  pushreg
.0e5d	a2 53		               ldx  #<blankmsg
.0e5f	a0 1b		               ldy  #>blankmsg
.0e61	20 f3 23	               jsr  putscxy
.0e64	a2 5d		               ldx  #<exit_msg
.0e66	a0 1e		               ldy  #>exit_msg
.0e68	20 f3 23	               jsr  putscxy
.0e6b	20 f9 24	               jsr  popreg
.0e6e	20 ca 24	               jsr  pushreg
.0e71	a2 53		               ldx  #<blankmsg
.0e73	a0 1b		               ldy  #>blankmsg
.0e75	20 f3 23	               jsr  putscxy
.0e78	a2 c7		               ldx  #<edit_msg
.0e7a	a0 1b		               ldy  #>edit_msg
.0e7c	20 f3 23	               jsr  putscxy
.0e7f	20 f9 24	               jsr  popreg
.0e82	20 c5 0f	               jsr  setcurs
.0e85	ad a9 09	               lda  currentkey
.0e88	20 ca 24	               jsr  pushreg
.0e8b	a2 11		               ldx  #17
.0e8d	a0 05		               ldy  #5
.0e8f	20 80 23	               jsr  gotoxy
.0e92	20 f9 24	               jsr  popreg
.0e95	20 9a 27	               jsr  atodec
.0e98	20 ca 24	               jsr  pushreg
.0e9b	a2 97		               ldx  #<adec
.0e9d	a0 26		               ldy  #>adec
.0e9f	20 66 23	               jsr  puts
.0ea2	20 f9 24	               jsr  popreg
.0ea5	20 09 10	               jsr  drawbitmap
.0ea8	20 06 28	ed_loop        jsr  getkey
.0eab	c9 85		f1             cmp  #f1key
.0ead	d0 03		               bne  cu
.0eaf	4c 97 0f	               jmp  do_ctrlx
.0eb2	c9 91		cu             cmp  #cursu
.0eb4	d0 03		               bne  cd
.0eb6	4c 42 0f	               jmp  do_up
.0eb9	c9 11		cd             cmp  #cursd
.0ebb	d0 03		               bne  cl
.0ebd	4c 55 0f	               jmp  do_down
.0ec0	c9 9d		cl             cmp  #cursl
.0ec2	d0 03		               bne  cr
.0ec4	4c 68 0f	               jmp  do_left
.0ec7	c9 1d		cr             cmp  #cursr
.0ec9	d0 03		               bne  cx
.0ecb	4c 7b 0f	               jmp  do_right
.0ece	c9 18		cx             cmp  #ctrl_x
.0ed0	d0 03		               bne  sp
.0ed2	4c 97 0f	               jmp  do_ctrlx
.0ed5	c9 20		sp             cmp  #$20
.0ed7	d0 03		               bne  ishex14
.0ed9	4c 8e 0f	               jmp  do_swap
.0edc	c9 14		ishex14        cmp  #$14
.0ede	d0 03		               bne  ishex12
.0ee0	4c 8e 0f	               jmp  do_swap
.0ee3	c9 12		ishex12        cmp  #$12
.0ee5	d0 03		               bne  rest
.0ee7	4c 8e 0f	               jmp  do_swap
.0eea			rest
.0eea	20 ca 24	               jsr  pushreg
.0eed	a2 0d		               ldx  #13
.0eef	a0 0c		               ldy  #12
.0ef1	20 80 23	               jsr  gotoxy
.0ef4	20 f9 24	               jsr  popreg
.0ef7	20 60 23	               jsr  putch
.0efa	48		               pha
.0efb	ad a9 09	               lda  currentkey
.0efe	8d aa 09	               sta  previouskey
.0f01	68		               pla
.0f02	8d a9 09	               sta  currentkey
.0f05	aa		               tax
.0f06	bc 6d 28	               ldy  asciitorom,x
.0f09	8c ab 09	               sty  bitmapoffset
.0f0c	20 51 0c	               jsr  drawkeyval
.0f0f	20 09 10	               jsr  drawbitmap
.0f12	20 ca 24	               jsr  pushreg
.0f15	a2 0d		               ldx  #13
.0f17	a0 0c		               ldy  #12
.0f19	20 80 23	               jsr  gotoxy
.0f1c	20 f9 24	               jsr  popreg
.0f1f	20 60 23	               jsr  putch
.0f22	20 ca 24	               jsr  pushreg
.0f25	a2 11		               ldx  #17
.0f27	a0 05		               ldy  #5
.0f29	20 80 23	               jsr  gotoxy
.0f2c	20 f9 24	               jsr  popreg
.0f2f	20 9a 27	               jsr  atodec
.0f32	20 ca 24	               jsr  pushreg
.0f35	a2 97		               ldx  #<adec
.0f37	a0 26		               ldy  #>adec
.0f39	20 66 23	               jsr  puts
.0f3c	20 f9 24	               jsr  popreg
.0f3f	4c 94 0f	               jmp  totop
.0f42	ad b2 09	do_up          lda  cursln
.0f45	c9 09		               cmp  #grid_top
.0f47	f0 4b		               beq  totop
.0f49	20 e7 0f	               jsr  clrcurs
.0f4c	ce b2 09	               dec  cursln
.0f4f	20 c5 0f	               jsr  setcurs
.0f52	4c 94 0f	               jmp  totop
.0f55	ad b2 09	do_down        lda  cursln
.0f58	c9 10		               cmp  #grid_bot
.0f5a	f0 38		               beq  totop
.0f5c	20 e7 0f	               jsr  clrcurs
.0f5f	ee b2 09	               inc  cursln
.0f62	20 c5 0f	               jsr  setcurs
.0f65	4c 94 0f	               jmp  totop
.0f68	ad b3 09	do_left        lda  curscl
.0f6b	c9 01		               cmp  #grid_left
.0f6d	f0 25		               beq  totop
.0f6f	20 e7 0f	               jsr  clrcurs
.0f72	ce b3 09	               dec  curscl
.0f75	20 c5 0f	               jsr  setcurs
.0f78	4c 94 0f	               jmp  totop
.0f7b	ad b3 09	do_right       lda  curscl
.0f7e	c9 08		               cmp  #grid_right
.0f80	f0 12		               beq  totop
.0f82	20 e7 0f	               jsr  clrcurs
.0f85	ee b3 09	               inc  curscl
.0f88	20 c5 0f	               jsr  setcurs
.0f8b	4c 94 0f	               jmp  totop
.0f8e	20 9e 0f	do_swap        jsr  do_eor
.0f91	20 09 10	               jsr  drawbitmap
.0f94	4c a8 0e	totop          jmp  ed_loop
.0f97	20 e7 0f	do_ctrlx       jsr  clrcurs
.0f9a	20 f9 24	               jsr  popreg
.0f9d	60		               rts
.0f9e			do_eor
.0f9e	20 ca 24	               jsr  pushreg
.0fa1	ad ac 09	               lda  mapaddr
.0fa4	85 fd		               sta  zpage2
.0fa6	ad ad 09	               lda  mapaddr+1
.0fa9	85 fe		               sta  zpage2+1
.0fab	ae b2 09	               ldx  cursln     ; calcul de
.0fae	ca		               dex            ; l'offset de
.0faf	8a		               txa            ; la
.0fb0	29 f7		               and  #$f7      ; ligne
.0fb2	a8		               tay
.0fb3	ae b3 09	               ldx  curscl
.0fb6	ca		               dex
.0fb7	bd 9e 09	               lda  eorval,x
.0fba	51 fd		               eor  (zpage2),y
.0fbc	20 51 0c	               jsr  drawkeyval
.0fbf	91 fd		               sta  (zpage2),y
.0fc1	20 f9 24	               jsr  popreg
.0fc4	60		               rts
.0fc5			setcurs
.0fc5	20 ca 24	               jsr  pushreg
.0fc8	a2 01		               ldx  #grid_left
.0fca	ac b2 09	               ldy  cursln
.0fcd	20 80 23	               jsr  gotoxy
.0fd0	a9 da		               lda  #$da
.0fd2	20 60 23	               jsr  putch
.0fd5	ae b3 09	               ldx  curscl
.0fd8	e8		               inx
.0fd9	a0 08		               ldy  #grid_top-1
.0fdb	20 80 23	               jsr  gotoxy
.0fde	a9 da		               lda  #$da
.0fe0	20 60 23	               jsr  putch
.0fe3	20 f9 24	               jsr  popreg
.0fe6	60		               rts
.0fe7			clrcurs
.0fe7	20 ca 24	               jsr  pushreg
.0fea	a2 01		               ldx  #grid_left
.0fec	ac b2 09	               ldy  cursln
.0fef	20 80 23	               jsr  gotoxy
.0ff2	a9 20		               lda  #$20
.0ff4	20 60 23	               jsr  putch
.0ff7	ae b3 09	               ldx  curscl
.0ffa	e8		               inx
.0ffb	a0 08		               ldy  #grid_top-1
.0ffd	20 80 23	               jsr  gotoxy
.1000	a9 20		               lda  #$20
.1002	20 60 23	               jsr  putch
.1005	20 f9 24	               jsr  popreg
.1008	60		               rts
.1009			drawbitmap
.1009	20 5c 24	               jsr  pushall
.100c	20 70 10	               jsr  calcmapaddr
.100f	ad ac 09	               lda  mapaddr        ; on pointe sur la table des bitmaps
.1012	85 fb		               sta  zpage1
.1014	ad ad 09	               lda  mapaddr+1
.1017	85 fc		               sta  zpage1+1
.1019	a0 00		drawchar       ldy  #$00
.101b	a2 09		               ldx  #grid_top      ;on replace la ...
.101d	8e 26 10	               stx  isy+1          ;ligne de départ
.1020	20 5c 24	nextline       jsr  push
.1023	a2 02		               ldx  #grid_left+1        ; la colonne
.1025	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.1027	20 80 23	               jsr  gotoxy
.102a	20 97 24	               jsr  pop
.102d	b1 fb		               lda  (zpage1),y     ; on li une ligne
.102f	20 37 27	               jsr  atobin
.1032	20 9f 10	               jsr  abintograph
.1035	20 ca 24	               jsr  pushreg
.1038	a2 8e		               ldx  #<abin
.103a	a0 26		               ldy  #>abin
.103c	20 66 23	               jsr  puts
.103f	20 f9 24	               jsr  popreg
.1042	ee 26 10	               inc  isy+1
.1045	c8		               iny
.1046	c0 08		               cpy  #$08
.1048	30 d6		               bmi  nextline
.104a	20 51 10	               jsr  highlight
.104d	20 97 24	               jsr  popall
.1050	60		               rts
.1051			highlight
.1051	20 ca 24	               jsr  pushreg
.1054	ae aa 09	               ldx  previouskey
.1057	bd 6d 28	               lda  asciitorom,x
.105a	aa		               tax
.105b	a9 0f		               lda  #charscolor
.105d	9d 00 d8	               sta  colorram,x
.1060	ae a9 09	               ldx  currentkey
.1063	bd 6d 28	               lda  asciitorom,x
.1066	aa		               tax
.1067	a9 01		               lda  #charcolor
.1069	9d 00 d8	               sta  colorram,x
.106c	20 f9 24	               jsr  popreg
.106f	60		               rts
.1070			calcmapaddr
.1070	20 5c 24	               jsr  pushall
.1073	ad 9c 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.1076	85 fb		               sta  zpage1
.1078	ad 9d 09	               lda  bitmapaddr+1
.107b	85 fc		               sta  zpage1+1
.107d	ae ab 09	               ldx  bitmapoffset
.1080	e0 00		               cpx  #$00
.1082	f0 08		               beq  thesame         ; sommes nous déja à 0
.1084	a9 08		addagain       lda  #$08
.1086	20 54 13	               jsr  zp1addnum      ; on augmente de 8 byte ...
.1089	ca		               dex                 ; pour chaque caracteres
.108a	d0 f8		               bne  addagain
.108c	48		thesame        pha
.108d	a5 fb		               lda  zpage1
.108f	8d ac 09	               sta  mapaddr
.1092	a5 fc		               lda  zpage1+1
.1094	8d ad 09	               sta  mapaddr+1
.1097	68		               pla
.1098	20 51 0c	               jsr  drawkeyval
.109b	20 97 24	out            jsr  popall
.109e	60		               rts
.109f			abintograph
.109f	20 5c 24	               jsr  pushall
.10a2	a9 8e		               lda  #<abin
.10a4	85 fb		               sta  zpage1
.10a6	a9 26		               lda  #>abin+1
.10a8	85 fc		               sta  zpage1+1
.10aa	a0 00		               ldy  #$00
.10ac	b1 fb		nextbit        lda  (zpage1),y
.10ae	c9 30		               cmp  #$30
.10b0	f0 07		               beq  itszero
.10b2	a9 d1		itsone         lda  #$d1
.10b4	91 fb		               sta  (zpage1),y
.10b6	4c bd 10	               jmp  next
.10b9	a9 2e		itszero        lda  #$2e
.10bb	91 fb		               sta  (zpage1),y
.10bd	c8		next           iny
.10be	c0 08		               cpy  #$08
.10c0	30 ea		               bmi  nextbit
.10c2	20 97 24	               jsr  popall
.10c5	60		               rts
.10c6			setscreenptr
.10c6	20 ca 24	               jsr  pushreg
.10c9	a9 08		               lda  #$08      ; basic commande to disable ...
.10cb	20 d2 ff	               jsr  chrout    ; ... character set change.
.10ce	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.10d1	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.10d3	09 0a		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.10d5	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.10d8	20 f9 24	               jsr  popreg
.10db	60		               rts
.10dc			copycharset
.10dc	20 ca 24	               jsr  pushreg
.10df	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.10e2	29 fe		               and  #%11111110     ;254
.10e4	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.10e7	a5 01		               lda  u6510map       ;$01
.10e9	29 fb		               and  #%11111011     ;251
.10eb	85 01		               sta  u6510map       ;$01
.10ed	20 02 11	               jsr  memcopy
.10f0	a5 01		               lda  u6510map       ;$01
.10f2	09 04		               ora  #%00000100
.10f4	85 01		               sta  u6510map       ;$01
.10f6	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.10f9	09 01		               ora  #%00000001     ;254
.10fb	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.10fe	20 f9 24	               jsr  popreg
.1101	60		               rts
.1102			memcopy
.1102	20 5c 24	               jsr  pushall
.1105	ad 98 09	               lda  startaddr
.1108	85 fb		               sta  zpage1
.110a	ad 99 09	               lda  startaddr+1
.110d	85 fc		               sta  zpage1+1
.110f	ad 9c 09	               lda  bitmapaddr
.1112	85 fd		               sta  zpage2
.1114	ad 9d 09	               lda  bitmapaddr+1
.1117	85 fe		               sta  zpage2+1
.1119	a0 00		               ldy  #$00
.111b	b1 fb		onemore        lda  (zpage1),y
.111d	91 fd		               sta  (zpage2),y
.111f	20 b1 25	               jsr  inczp1
.1122	20 cf 25	               jsr  inczp2
.1125	a5 fc		               lda  zpage1+1
.1127	cd 9b 09	               cmp  stopaddr+1
.112a	d0 ef		               bne  onemore
.112c	a5 fb		               lda  zpage1
.112e	cd 9a 09	               cmp  stopaddr
.1131	d0 e8		               bne  onemore
.1133	20 97 24	               jsr  popall
.1136	60		               rts
.1137			staticscreen
.1137	48		               pha
.1138	a9 0b		               lda  #bordure
.113a	8d 20 d0	               sta  $d020
.113d	68		               pla
.113e	48		               pha
.113f	a9 00		               lda  #fond
.1141	8d 21 d0	               sta  $d021
.1144	68		               pla
.1145	20 ab 12	               jsr  drawlines
.1148	20 87 12	               jsr  drawallchars
.114b	20 f3 12	               jsr  drawgrid
.114e	20 8c 11	               jsr  drawfkeys
.1151	a9 0a		               lda  #vrose
.1153	8d 43 1e	               sta  redraw_msg
.1156	20 ca 24	               jsr  pushreg
.1159	a2 53		               ldx  #<blankmsg
.115b	a0 1b		               ldy  #>blankmsg
.115d	20 f3 23	               jsr  putscxy
.1160	a2 43		               ldx  #<redraw_msg
.1162	a0 1e		               ldy  #>redraw_msg
.1164	20 f3 23	               jsr  putscxy
.1167	20 f9 24	               jsr  popreg
.116a	20 ca 24	               jsr  pushreg
.116d	a2 53		               ldx  #<blankmsg
.116f	a0 1b		               ldy  #>blankmsg
.1171	20 f3 23	               jsr  putscxy
.1174	a2 29		               ldx  #<quit_msg
.1176	a0 1e		               ldy  #>quit_msg
.1178	20 f3 23	               jsr  putscxy
.117b	20 f9 24	               jsr  popreg
.117e	20 ca 24	               jsr  pushreg
.1181	a2 00		               ldx  #0
.1183	a0 07		               ldy  #7
.1185	20 80 23	               jsr  gotoxy
.1188	20 f9 24	               jsr  popreg
.118b	60		               rts
.118c			drawfkeys
.118c	20 ca 24	               jsr  pushreg
.118f	ad a7 09	               lda  fkeyset
.1192	c9 00		               cmp  #$0
.1194	d0 78		               bne  secondks
.1196	20 ca 24	               jsr  pushreg
.1199	a2 2f		               ldx  #<titremenu1
.119b	a0 20		               ldy  #>titremenu1
.119d	20 f3 23	               jsr  putscxy
.11a0	20 f9 24	               jsr  popreg
.11a3	20 ca 24	               jsr  pushreg
.11a6	a2 65		               ldx  #<f1abutton
.11a8	a0 20		               ldy  #>f1abutton
.11aa	20 f3 23	               jsr  putscxy
.11ad	20 f9 24	               jsr  popreg
.11b0	20 ca 24	               jsr  pushreg
.11b3	a2 80		               ldx  #<f2abutton
.11b5	a0 20		               ldy  #>f2abutton
.11b7	20 f3 23	               jsr  putscxy
.11ba	20 f9 24	               jsr  popreg
.11bd	20 ca 24	               jsr  pushreg
.11c0	a2 9b		               ldx  #<f3abutton
.11c2	a0 20		               ldy  #>f3abutton
.11c4	20 f3 23	               jsr  putscxy
.11c7	20 f9 24	               jsr  popreg
.11ca	20 ca 24	               jsr  pushreg
.11cd	a2 b6		               ldx  #<f4abutton
.11cf	a0 20		               ldy  #>f4abutton
.11d1	20 f3 23	               jsr  putscxy
.11d4	20 f9 24	               jsr  popreg
.11d7	20 ca 24	               jsr  pushreg
.11da	a2 d1		               ldx  #<f5abutton
.11dc	a0 20		               ldy  #>f5abutton
.11de	20 f3 23	               jsr  putscxy
.11e1	20 f9 24	               jsr  popreg
.11e4	20 ca 24	               jsr  pushreg
.11e7	a2 ec		               ldx  #<f6abutton
.11e9	a0 20		               ldy  #>f6abutton
.11eb	20 f3 23	               jsr  putscxy
.11ee	20 f9 24	               jsr  popreg
.11f1	20 ca 24	               jsr  pushreg
.11f4	a2 07		               ldx  #<f7abutton
.11f6	a0 21		               ldy  #>f7abutton
.11f8	20 f3 23	               jsr  putscxy
.11fb	20 f9 24	               jsr  popreg
.11fe	20 ca 24	               jsr  pushreg
.1201	a2 22		               ldx  #<f8abutton
.1203	a0 21		               ldy  #>f8abutton
.1205	20 f3 23	               jsr  putscxy
.1208	20 f9 24	               jsr  popreg
.120b	4c 83 12	               jmp end
.120e			secondks
.120e	20 ca 24	               jsr  pushreg
.1211	a2 4a		               ldx  #<titremenu2
.1213	a0 20		               ldy  #>titremenu2
.1215	20 f3 23	               jsr  putscxy
.1218	20 f9 24	               jsr  popreg
.121b	20 ca 24	               jsr  pushreg
.121e	a2 3d		               ldx  #<f1bbutton
.1220	a0 21		               ldy  #>f1bbutton
.1222	20 f3 23	               jsr  putscxy
.1225	20 f9 24	               jsr  popreg
.1228	20 ca 24	               jsr  pushreg
.122b	a2 58		               ldx  #<f2bbutton
.122d	a0 21		               ldy  #>f2bbutton
.122f	20 f3 23	               jsr  putscxy
.1232	20 f9 24	               jsr  popreg
.1235	20 ca 24	               jsr  pushreg
.1238	a2 73		               ldx  #<f3bbutton
.123a	a0 21		               ldy  #>f3bbutton
.123c	20 f3 23	               jsr  putscxy
.123f	20 f9 24	               jsr  popreg
.1242	20 ca 24	               jsr  pushreg
.1245	a2 8e		               ldx  #<f4bbutton
.1247	a0 21		               ldy  #>f4bbutton
.1249	20 f3 23	               jsr  putscxy
.124c	20 f9 24	               jsr  popreg
.124f	20 ca 24	               jsr  pushreg
.1252	a2 a9		               ldx  #<f5bbutton
.1254	a0 21		               ldy  #>f5bbutton
.1256	20 f3 23	               jsr  putscxy
.1259	20 f9 24	               jsr  popreg
.125c	20 ca 24	               jsr  pushreg
.125f	a2 c4		               ldx  #<f6bbutton
.1261	a0 21		               ldy  #>f6bbutton
.1263	20 f3 23	               jsr  putscxy
.1266	20 f9 24	               jsr  popreg
.1269	20 ca 24	               jsr  pushreg
.126c	a2 df		               ldx  #<f7bbutton
.126e	a0 21		               ldy  #>f7bbutton
.1270	20 f3 23	               jsr  putscxy
.1273	20 f9 24	               jsr  popreg
.1276	20 ca 24	               jsr  pushreg
.1279	a2 fa		               ldx  #<f8bbutton
.127b	a0 21		               ldy  #>f8bbutton
.127d	20 f3 23	               jsr  putscxy
.1280	20 f9 24	               jsr  popreg
.1283	20 f9 24	end            jsr  popreg
.1286	60		               rts
.1287			drawallchars
.1287	20 ca 24	               jsr pushreg
.128a	20 ca 24	               jsr  pushreg
.128d	a2 00		               ldx  #0
.128f	a0 00		               ldy  #0
.1291	20 80 23	               jsr  gotoxy
.1294	20 f9 24	               jsr  popreg
.1297	a2 00		               ldx  #$00
.1299	8a		nextc          txa
.129a	9d 00 04	               sta  scrnnewram,x
.129d	a9 0f		               lda  #charscolor
.129f	9d 00 d8	               sta  colorram,x
.12a2	e8		               inx
.12a3	e0 80		               cpx  #$80
.12a5	d0 f2		               bne  nextc
.12a7	20 f9 24	               jsr  popreg
.12aa	60		               rts
.12ab			drawlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.12ab	20 5c 24	               jsr  pushall
.12ae	a2 28		               ldx  #40
.12b0	a9 40		               lda  #64
.12b2	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.12b5	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.12b8	ca		               dex
.12b9	e0 10		hline          cpx  #vlinepos
.12bb	10 03		               bpl  notyet
.12bd	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.12c0	e0 00		notyet         cpx  #$00
.12c2	d0 ee		               bne  nextl
.12c4	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.12c6	85 fb		               sta  zpage1
.12c8	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.12ca	85 fc		               sta  zpage1+1
.12cc	a0 00		               ldy  #0
.12ce	a9 72		               lda  #114
.12d0	91 fb		               sta  (zpage1),y
.12d2	20 62 13	               jsr  zp1add40
.12d5	a2 12		               ldx  #24-hline2
.12d7	a9 5d		               lda  #93
.12d9	91 fb		another93      sta  (zpage1),y
.12db	20 62 13	               jsr  zp1add40
.12de	ca		               dex
.12df	d0 f8		               bne  another93
.12e1	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.12e3	85 fb		               sta  zpage1
.12e5	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.12e7	85 fc		               sta  zpage1+1
.12e9	a0 00		               ldy  #0
.12eb	a9 73		               lda  #115
.12ed	91 fb		               sta  (zpage1),y
.12ef	20 97 24	               jsr  popall
.12f2	60		               rts
.12f3			drawgrid
.12f3	20 5c 24	               jsr  pushall
.12f6	20 1d 22	               jsr  screendis
.12f9	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.12fb	85 fb		               sta  zpage1
.12fd	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.12ff	85 fc		               sta  zpage1+1
.1301	a2 08		               ldx  #8
.1303	a9 65		nextbox        lda  #101
.1305	a0 09		               ldy  #9
.1307	91 fb		               sta  (zpage1),y
.1309	88		               dey
.130a	a9 2e		               lda  #$2e
.130c	91 fb		nextcol        sta  (zpage1),y
.130e	88		               dey
.130f	d0 fb		               bne  nextcol
.1311	20 62 13	               jsr  zp1add40
.1314	ca		               dex
.1315	d0 ec		               bne  nextbox
.1317	a0 08		               ldy  #8
.1319	a9 77		               lda  #119
.131b	91 fb		nextlin        sta  (zpage1),y
.131d	88		               dey
.131e	d0 fb		               bne  nextlin
.1320	a9 3e		               lda  #$3e
.1322	8d eb 05	               sta  scrnnewram+(40*(12))+11
.1325	a9 70		               lda  #$70                     ;+
.1327	8d c4 05	               sta  scrnnewram+(40*(11))+12
.132a	a9 43		               lda  #$43                     ;-
.132c	8d c5 05	               sta  scrnnewram+(40*(11))+13
.132f	a9 6e		               lda  #$6e                     ;+
.1331	8d c6 05	               sta  scrnnewram+(40*(11))+14
.1334	a9 5d		               lda  #$5d                     ;|
.1336	8d ec 05	               sta  scrnnewram+(40*(12))+12
.1339	a9 5d		               lda  #$5d                     ;|
.133b	8d ee 05	               sta  scrnnewram+(40*(12))+14
.133e	a9 6d		               lda  #$6d                     ;+
.1340	8d 14 06	               sta  scrnnewram+(40*(13))+12
.1343	a9 43		               lda  #$43                     ;-
.1345	8d 15 06	               sta  scrnnewram+(40*(13))+13
.1348	a9 7d		               lda  #$7d                     ;+
.134a	8d 16 06	               sta  scrnnewram+(40*(13))+14
.134d	20 2a 22	               jsr screenena
.1350	20 97 24	               jsr  popall
.1353	60		               rts
.1354			zp1addnum
.1354	08		               php
.1355	48		               pha
.1356	18		               clc
.1357	65 fb		               adc  zpage1
.1359	90 02		               bcc  nocarry
.135b	e6 fc		               inc  zpage1+1
.135d	85 fb		nocarry        sta  zpage1
.135f	68		               pla
.1360	28		               plp
.1361	60		               rts
.1362			zp1add40
.1362	08		               php
.1363	48		               pha
.1364	18		               clc
.1365	a5 fb		               lda  zpage1
.1367	69 28		               adc  #40
.1369	90 02		               bcc  nocarry
.136b	e6 fc		               inc  zpage1+1
.136d	85 fb		nocarry        sta  zpage1
.136f	68		               pla
.1370	28		               plp
.1371	60		               rts
.1372			delay
.1372	20 ca 24	               jsr  pushreg
.1375	a9 00		               lda  #$0
.1377	aa		               tax
.1378	a8		               tay
.1379	ca		xagain         dex
.137a	ca		               dex
.137b	88		yagain         dey
.137c	c0 00		               cpy  #$00
.137e	d0 fb		               bne  yagain
.1380	e0 00		               cpx  #$00
.1382	d0 f5		               bne  xagain
.1384	20 f9 24	               jsr  popreg
.1387	60		               rts
.1388			f1action
.1388	48		               pha
.1389	a9 ff		               lda  #$ff
.138b	8d a6 09	               sta  editmode
.138e	ad a7 09	               lda  fkeyset
.1391	f0 03		               beq  menua
.1393	4c 4b 14	               jmp  menub
.1396			menua
.1396	20 ca 24	               jsr  pushreg
.1399	a2 53		               ldx  #<blankmsg
.139b	a0 1b		               ldy  #>blankmsg
.139d	20 f3 23	               jsr  putscxy
.13a0	a2 c7		               ldx  #<f1a_msg
.13a2	a0 1b		               ldy  #>f1a_msg
.13a4	20 f3 23	               jsr  putscxy
.13a7	20 f9 24	               jsr  popreg
.13aa	20 ca 24	               jsr  pushreg
.13ad	ad 65 20	               lda  f1abutton
.13b0	48		               pha
.13b1	a9 92		               lda  #146
.13b3	8d 77 20	               sta  f1abutton+18
.13b6	a9 01		               lda  #flashcol
.13b8	8d 65 20	               sta  f1abutton
.13bb	a2 65		               ldx  #<f1abutton
.13bd	a0 20		               ldy  #>f1abutton
.13bf	20 f3 23	               jsr  putscxy
.13c2	20 72 13	               jsr  delay
.13c5	a9 12		               lda  #18
.13c7	8d 77 20	               sta  f1abutton+18
.13ca	68		               pla
.13cb	8d 65 20	               sta  f1abutton
.13ce	a2 65		               ldx  #<f1abutton
.13d0	a0 20		               ldy  #>f1abutton
.13d2	20 f3 23	               jsr  putscxy
.13d5	20 f9 24	               jsr  popreg
.13d8	a9 0b		               lda  #vgris
.13da	20 13 0c	               jsr  setmenuacolor
.13dd	a9 03		               lda  #menu1col1
.13df	8d 65 20	               sta  f1abutton
.13e2	20 8c 11	               jsr  drawfkeys
.13e5	a9 0b		               lda  #vgris
.13e7	8d 43 1e	               sta  redraw_msg
.13ea	20 ca 24	               jsr  pushreg
.13ed	a2 53		               ldx  #<blankmsg
.13ef	a0 1b		               ldy  #>blankmsg
.13f1	20 f3 23	               jsr  putscxy
.13f4	a2 43		               ldx  #<redraw_msg
.13f6	a0 1e		               ldy  #>redraw_msg
.13f8	20 f3 23	               jsr  putscxy
.13fb	20 f9 24	               jsr  popreg
.13fe	20 57 0e	               jsr  editor
.1401	a9 0a		               lda  #vrose
.1403	8d 43 1e	               sta  redraw_msg
.1406	20 ca 24	               jsr  pushreg
.1409	a2 53		               ldx  #<blankmsg
.140b	a0 1b		               ldy  #>blankmsg
.140d	20 f3 23	               jsr  putscxy
.1410	a2 43		               ldx  #<redraw_msg
.1412	a0 1e		               ldy  #>redraw_msg
.1414	20 f3 23	               jsr  putscxy
.1417	20 f9 24	               jsr  popreg
.141a	20 ca 24	               jsr  pushreg
.141d	a2 53		               ldx  #<blankmsg
.141f	a0 1b		               ldy  #>blankmsg
.1421	20 f3 23	               jsr  putscxy
.1424	a2 29		               ldx  #<quit_msg
.1426	a0 1e		               ldy  #>quit_msg
.1428	20 f3 23	               jsr  putscxy
.142b	20 f9 24	               jsr  popreg
.142e	20 ca 24	               jsr  pushreg
.1431	a2 53		               ldx  #<blankmsg
.1433	a0 1b		               ldy  #>blankmsg
.1435	20 f3 23	               jsr  putscxy
.1438	a2 82		               ldx  #<menua_msg
.143a	a0 1d		               ldy  #>menua_msg
.143c	20 f3 23	               jsr  putscxy
.143f	20 f9 24	               jsr  popreg
.1442	20 cd 0b	               jsr  resetmenuacolor
.1445	20 8c 11	               jsr  drawfkeys
.1448	4c 93 14	               jmp  out
.144b			menub
.144b	20 ca 24	               jsr  pushreg
.144e	a2 53		               ldx  #<blankmsg
.1450	a0 1b		               ldy  #>blankmsg
.1452	20 f3 23	               jsr  putscxy
.1455	a2 ba		               ldx  #<f1b_msg
.1457	a0 1c		               ldy  #>f1b_msg
.1459	20 f3 23	               jsr  putscxy
.145c	20 f9 24	               jsr  popreg
.145f	20 ca 24	               jsr  pushreg
.1462	ad 3d 21	               lda  f1bbutton
.1465	48		               pha
.1466	a9 92		               lda  #146
.1468	8d 4f 21	               sta  f1bbutton+18
.146b	a9 01		               lda  #flashcol
.146d	8d 3d 21	               sta  f1bbutton
.1470	a2 3d		               ldx  #<f1bbutton
.1472	a0 21		               ldy  #>f1bbutton
.1474	20 f3 23	               jsr  putscxy
.1477	20 72 13	               jsr  delay
.147a	a9 12		               lda  #18
.147c	8d 4f 21	               sta  f1bbutton+18
.147f	68		               pla
.1480	8d 3d 21	               sta  f1bbutton
.1483	a2 3d		               ldx  #<f1bbutton
.1485	a0 21		               ldy  #>f1bbutton
.1487	20 f3 23	               jsr  putscxy
.148a	20 f9 24	               jsr  popreg
.148d	20 1f 1b	               jsr  flipvert
.1490	20 09 10	               jsr  drawbitmap
.1493	68		out            pla
.1494	20 ca 24	               jsr  pushreg
.1497	a2 53		               ldx  #<blankmsg
.1499	a0 1b		               ldy  #>blankmsg
.149b	20 f3 23	               jsr  putscxy
.149e	a2 7f		               ldx  #<prompt_msg
.14a0	a0 1b		               ldy  #>prompt_msg
.14a2	20 f3 23	               jsr  putscxy
.14a5	20 f9 24	               jsr  popreg
.14a8	60		               rts
.14a9			f2action
.14a9	48		               pha
.14aa	a9 00		               lda  #$0
.14ac	8d a6 09	               sta  editmode
.14af	ad a7 09	               lda  fkeyset
.14b2	d0 4b		               bne  menub
.14b4	20 ca 24	               jsr  pushreg
.14b7	a2 53		               ldx  #<blankmsg
.14b9	a0 1b		               ldy  #>blankmsg
.14bb	20 f3 23	               jsr  putscxy
.14be	a2 e2		               ldx  #<f2a_msg
.14c0	a0 1b		               ldy  #>f2a_msg
.14c2	20 f3 23	               jsr  putscxy
.14c5	20 f9 24	               jsr  popreg
.14c8	20 ca 24	               jsr  pushreg
.14cb	ad 80 20	               lda  f2abutton
.14ce	48		               pha
.14cf	a9 92		               lda  #146
.14d1	8d 92 20	               sta  f2abutton+18
.14d4	a9 01		               lda  #flashcol
.14d6	8d 80 20	               sta  f2abutton
.14d9	a2 80		               ldx  #<f2abutton
.14db	a0 20		               ldy  #>f2abutton
.14dd	20 f3 23	               jsr  putscxy
.14e0	20 72 13	               jsr  delay
.14e3	a9 12		               lda  #18
.14e5	8d 92 20	               sta  f2abutton+18
.14e8	68		               pla
.14e9	8d 80 20	               sta  f2abutton
.14ec	a2 80		               ldx  #<f2abutton
.14ee	a0 20		               ldy  #>f2abutton
.14f0	20 f3 23	               jsr  putscxy
.14f3	20 f9 24	               jsr  popreg
.14f6	20 79 0a	               jsr  copychar
.14f9	20 09 10	               jsr  drawbitmap
.14fc	4c 47 15	               jmp  out
.14ff			menub
.14ff	20 ca 24	               jsr  pushreg
.1502	a2 53		               ldx  #<blankmsg
.1504	a0 1b		               ldy  #>blankmsg
.1506	20 f3 23	               jsr  putscxy
.1509	a2 d6		               ldx  #<f2b_msg
.150b	a0 1c		               ldy  #>f2b_msg
.150d	20 f3 23	               jsr  putscxy
.1510	20 f9 24	               jsr  popreg
.1513	20 ca 24	               jsr  pushreg
.1516	ad 58 21	               lda  f2bbutton
.1519	48		               pha
.151a	a9 92		               lda  #146
.151c	8d 6a 21	               sta  f2bbutton+18
.151f	a9 01		               lda  #flashcol
.1521	8d 58 21	               sta  f2bbutton
.1524	a2 58		               ldx  #<f2bbutton
.1526	a0 21		               ldy  #>f2bbutton
.1528	20 f3 23	               jsr  putscxy
.152b	20 72 13	               jsr  delay
.152e	a9 12		               lda  #18
.1530	8d 6a 21	               sta  f2bbutton+18
.1533	68		               pla
.1534	8d 58 21	               sta  f2bbutton
.1537	a2 58		               ldx  #<f2bbutton
.1539	a0 21		               ldy  #>f2bbutton
.153b	20 f3 23	               jsr  putscxy
.153e	20 f9 24	               jsr  popreg
.1541	20 f2 1a	               jsr  fliphorz
.1544	20 09 10	               jsr  drawbitmap
.1547	68		out            pla
.1548	20 ca 24	               jsr  pushreg
.154b	a2 53		               ldx  #<blankmsg
.154d	a0 1b		               ldy  #>blankmsg
.154f	20 f3 23	               jsr  putscxy
.1552	a2 7f		               ldx  #<prompt_msg
.1554	a0 1b		               ldy  #>prompt_msg
.1556	20 f3 23	               jsr  putscxy
.1559	20 f9 24	               jsr  popreg
.155c	60		               rts
.155d			f3action
.155d	48		               pha
.155e	a9 00		               lda  #$0
.1560	8d a6 09	               sta  editmode
.1563	ad a7 09	               lda  fkeyset
.1566	d0 74		               bne  menub
.1568	20 ca 24	               jsr  pushreg
.156b	ad 9b 20	               lda  f3abutton
.156e	48		               pha
.156f	a9 92		               lda  #146
.1571	8d ad 20	               sta  f3abutton+18
.1574	a9 01		               lda  #flashcol
.1576	8d 9b 20	               sta  f3abutton
.1579	a2 9b		               ldx  #<f3abutton
.157b	a0 20		               ldy  #>f3abutton
.157d	20 f3 23	               jsr  putscxy
.1580	20 72 13	               jsr  delay
.1583	a9 12		               lda  #18
.1585	8d ad 20	               sta  f3abutton+18
.1588	68		               pla
.1589	8d 9b 20	               sta  f3abutton
.158c	a2 9b		               ldx  #<f3abutton
.158e	a0 20		               ldy  #>f3abutton
.1590	20 f3 23	               jsr  putscxy
.1593	20 f9 24	               jsr  popreg
.1596	20 ca 24	               jsr  pushreg
.1599	a2 53		               ldx  #<blankmsg
.159b	a0 1b		               ldy  #>blankmsg
.159d	20 f3 23	               jsr  putscxy
.15a0	a2 03		               ldx  #<f3a_msg
.15a2	a0 1c		               ldy  #>f3a_msg
.15a4	20 f3 23	               jsr  putscxy
.15a7	20 f9 24	               jsr  popreg
.15aa	20 06 28	getagain       jsr  getkey
.15ad	c9 31		               cmp  #$31
.15af	f0 0b		               beq  devok
.15b1	c9 38		               cmp  #$38
.15b3	f0 07		               beq  devok
.15b5	c9 39		               cmp  #$39
.15b7	f0 03		               beq  devok
.15b9	4c aa 15	               jmp  getagain
.15bc	8d c6 09	devok          sta  device
.15bf	20 07 0a	               jsr  getfname
.15c2	20 ca 24	               jsr  pushreg
.15c5	a2 53		               ldx  #<blankmsg
.15c7	a0 1b		               ldy  #>blankmsg
.15c9	20 f3 23	               jsr  putscxy
.15cc	a2 ab		               ldx  #<wait_msg
.15ce	a0 1b		               ldy  #>wait_msg
.15d0	20 f3 23	               jsr  putscxy
.15d3	20 f9 24	               jsr  popreg
.15d6	20 da 08	               jsr  savetofile
.15d9	4c 24 16	               jmp  out
.15dc			menub
.15dc	20 ca 24	               jsr  pushreg
.15df	a2 53		               ldx  #<blankmsg
.15e1	a0 1b		               ldy  #>blankmsg
.15e3	20 f3 23	               jsr  putscxy
.15e6	a2 f4		               ldx  #<f3b_msg
.15e8	a0 1c		               ldy  #>f3b_msg
.15ea	20 f3 23	               jsr  putscxy
.15ed	20 f9 24	               jsr  popreg
.15f0	20 ca 24	               jsr  pushreg
.15f3	ad 73 21	               lda  f3bbutton
.15f6	48		               pha
.15f7	a9 92		               lda  #146
.15f9	8d 85 21	               sta  f3bbutton+18
.15fc	a9 01		               lda  #flashcol
.15fe	8d 73 21	               sta  f3bbutton
.1601	a2 73		               ldx  #<f3bbutton
.1603	a0 21		               ldy  #>f3bbutton
.1605	20 f3 23	               jsr  putscxy
.1608	20 72 13	               jsr  delay
.160b	a9 12		               lda  #18
.160d	8d 85 21	               sta  f3bbutton+18
.1610	68		               pla
.1611	8d 73 21	               sta  f3bbutton
.1614	a2 73		               ldx  #<f3bbutton
.1616	a0 21		               ldy  #>f3bbutton
.1618	20 f3 23	               jsr  putscxy
.161b	20 f9 24	               jsr  popreg
.161e	20 81 1a	               jsr  scrollright
.1621	20 09 10	               jsr  drawbitmap
.1624	68		out            pla
.1625	20 ca 24	               jsr  pushreg
.1628	a2 53		               ldx  #<blankmsg
.162a	a0 1b		               ldy  #>blankmsg
.162c	20 f3 23	               jsr  putscxy
.162f	a2 7f		               ldx  #<prompt_msg
.1631	a0 1b		               ldy  #>prompt_msg
.1633	20 f3 23	               jsr  putscxy
.1636	20 f9 24	               jsr  popreg
.1639	60		               rts
.163a			f4action
.163a	48		               pha
.163b	a9 00		               lda  #$0
.163d	8d a6 09	               sta  editmode
.1640	ad a7 09	               lda  fkeyset
.1643	d0 77		               bne  menub
.1645	20 ca 24	               jsr  pushreg
.1648	ad b6 20	               lda  f4abutton
.164b	48		               pha
.164c	a9 92		               lda  #146
.164e	8d c8 20	               sta  f4abutton+18
.1651	a9 01		               lda  #flashcol
.1653	8d b6 20	               sta  f4abutton
.1656	a2 b6		               ldx  #<f4abutton
.1658	a0 20		               ldy  #>f4abutton
.165a	20 f3 23	               jsr  putscxy
.165d	20 72 13	               jsr  delay
.1660	a9 12		               lda  #18
.1662	8d c8 20	               sta  f4abutton+18
.1665	68		               pla
.1666	8d b6 20	               sta  f4abutton
.1669	a2 b6		               ldx  #<f4abutton
.166b	a0 20		               ldy  #>f4abutton
.166d	20 f3 23	               jsr  putscxy
.1670	20 f9 24	               jsr  popreg
.1673	20 ca 24	               jsr  pushreg
.1676	a2 53		               ldx  #<blankmsg
.1678	a0 1b		               ldy  #>blankmsg
.167a	20 f3 23	               jsr  putscxy
.167d	a2 30		               ldx  #<f4a_msg
.167f	a0 1c		               ldy  #>f4a_msg
.1681	20 f3 23	               jsr  putscxy
.1684	20 f9 24	               jsr  popreg
.1687	20 06 28	getagain       jsr  getkey
.168a	c9 31		               cmp  #$31
.168c	f0 0b		               beq  devok
.168e	c9 38		               cmp  #$38
.1690	f0 07		               beq  devok
.1692	c9 39		               cmp  #$39
.1694	f0 03		               beq  devok
.1696	4c 87 16	               jmp  getagain
.1699	8d c6 09	devok          sta  device
.169c	20 07 0a	               jsr  getfname
.169f	20 ca 24	               jsr  pushreg
.16a2	a2 53		               ldx  #<blankmsg
.16a4	a0 1b		               ldy  #>blankmsg
.16a6	20 f3 23	               jsr  putscxy
.16a9	a2 ab		               ldx  #<wait_msg
.16ab	a0 1b		               ldy  #>wait_msg
.16ad	20 f3 23	               jsr  putscxy
.16b0	20 f9 24	               jsr  popreg
.16b3	20 39 09	               jsr  loadfromfile
.16b6	20 c7 09	               jsr  screenredraw
.16b9	4c 04 17	               jmp  out
.16bc			menub
.16bc	20 ca 24	               jsr  pushreg
.16bf	a2 53		               ldx  #<blankmsg
.16c1	a0 1b		               ldy  #>blankmsg
.16c3	20 f3 23	               jsr  putscxy
.16c6	a2 10		               ldx  #<f4b_msg
.16c8	a0 1d		               ldy  #>f4b_msg
.16ca	20 f3 23	               jsr  putscxy
.16cd	20 f9 24	               jsr  popreg
.16d0	20 ca 24	               jsr  pushreg
.16d3	ad 8e 21	               lda  f4bbutton
.16d6	48		               pha
.16d7	a9 92		               lda  #146
.16d9	8d a0 21	               sta  f4bbutton+18
.16dc	a9 01		               lda  #flashcol
.16de	8d 8e 21	               sta  f4bbutton
.16e1	a2 8e		               ldx  #<f4bbutton
.16e3	a0 21		               ldy  #>f4bbutton
.16e5	20 f3 23	               jsr  putscxy
.16e8	20 72 13	               jsr  delay
.16eb	a9 12		               lda  #18
.16ed	8d a0 21	               sta  f4bbutton+18
.16f0	68		               pla
.16f1	8d 8e 21	               sta  f4bbutton
.16f4	a2 8e		               ldx  #<f4bbutton
.16f6	a0 21		               ldy  #>f4bbutton
.16f8	20 f3 23	               jsr  putscxy
.16fb	20 f9 24	               jsr  popreg
.16fe	20 a6 1a	               jsr  scrollleft
.1701	20 09 10	               jsr  drawbitmap
.1704	68		out            pla
.1705	20 ca 24	               jsr  pushreg
.1708	a2 53		               ldx  #<blankmsg
.170a	a0 1b		               ldy  #>blankmsg
.170c	20 f3 23	               jsr  putscxy
.170f	a2 7f		               ldx  #<prompt_msg
.1711	a0 1b		               ldy  #>prompt_msg
.1713	20 f3 23	               jsr  putscxy
.1716	20 f9 24	               jsr  popreg
.1719	60		               rts
.171a			f5action
.171a	48		               pha
.171b	a9 00		               lda  #$0
.171d	8d a6 09	               sta  editmode
.1720	ad a7 09	               lda  fkeyset
.1723	d0 4b		               bne  menub
.1725	20 ca 24	               jsr  pushreg
.1728	a2 53		               ldx  #<blankmsg
.172a	a0 1b		               ldy  #>blankmsg
.172c	20 f3 23	               jsr  putscxy
.172f	a2 58		               ldx  #<f5a_msg
.1731	a0 1c		               ldy  #>f5a_msg
.1733	20 f3 23	               jsr  putscxy
.1736	20 f9 24	               jsr  popreg
.1739	20 ca 24	               jsr  pushreg
.173c	ad d1 20	               lda  f5abutton
.173f	48		               pha
.1740	a9 92		               lda  #146
.1742	8d e3 20	               sta  f5abutton+18
.1745	a9 01		               lda  #flashcol
.1747	8d d1 20	               sta  f5abutton
.174a	a2 d1		               ldx  #<f5abutton
.174c	a0 20		               ldy  #>f5abutton
.174e	20 f3 23	               jsr  putscxy
.1751	20 72 13	               jsr  delay
.1754	a9 12		               lda  #18
.1756	8d e3 20	               sta  f5abutton+18
.1759	68		               pla
.175a	8d d1 20	               sta  f5abutton
.175d	a2 d1		               ldx  #<f5abutton
.175f	a0 20		               ldy  #>f5abutton
.1761	20 f3 23	               jsr  putscxy
.1764	20 f9 24	               jsr  popreg
.1767	20 d2 1a	               jsr  clearchar
.176a	20 09 10	               jsr  drawbitmap
.176d	4c b8 17	               jmp  out
.1770			menub
.1770	20 ca 24	               jsr  pushreg
.1773	a2 53		               ldx  #<blankmsg
.1775	a0 1b		               ldy  #>blankmsg
.1777	20 f3 23	               jsr  putscxy
.177a	a2 2c		               ldx  #<f5b_msg
.177c	a0 1d		               ldy  #>f5b_msg
.177e	20 f3 23	               jsr  putscxy
.1781	20 f9 24	               jsr  popreg
.1784	20 ca 24	               jsr  pushreg
.1787	ad a9 21	               lda  f5bbutton
.178a	48		               pha
.178b	a9 92		               lda  #146
.178d	8d bb 21	               sta  f5bbutton+18
.1790	a9 01		               lda  #flashcol
.1792	8d a9 21	               sta  f5bbutton
.1795	a2 a9		               ldx  #<f5bbutton
.1797	a0 21		               ldy  #>f5bbutton
.1799	20 f3 23	               jsr  putscxy
.179c	20 72 13	               jsr  delay
.179f	a9 12		               lda  #18
.17a1	8d bb 21	               sta  f5bbutton+18
.17a4	68		               pla
.17a5	8d a9 21	               sta  f5bbutton
.17a8	a2 a9		               ldx  #<f5bbutton
.17aa	a0 21		               ldy  #>f5bbutton
.17ac	20 f3 23	               jsr  putscxy
.17af	20 f9 24	               jsr  popreg
.17b2	20 0f 1a	               jsr  scrollup
.17b5	20 09 10	               jsr  drawbitmap
.17b8	68		out            pla
.17b9	20 ca 24	               jsr  pushreg
.17bc	a2 53		               ldx  #<blankmsg
.17be	a0 1b		               ldy  #>blankmsg
.17c0	20 f3 23	               jsr  putscxy
.17c3	a2 7f		               ldx  #<prompt_msg
.17c5	a0 1b		               ldy  #>prompt_msg
.17c7	20 f3 23	               jsr  putscxy
.17ca	20 f9 24	               jsr  popreg
.17cd	60		               rts
.17ce			f6action
.17ce	48		               pha
.17cf	a9 00		               lda  #$0
.17d1	8d a6 09	               sta  editmode
.17d4	ad a7 09	               lda  fkeyset
.17d7	d0 4b		               bne  menub
.17d9	20 ca 24	               jsr  pushreg
.17dc	a2 53		               ldx  #<blankmsg
.17de	a0 1b		               ldy  #>blankmsg
.17e0	20 f3 23	               jsr  putscxy
.17e3	a2 74		               ldx  #<f6a_msg
.17e5	a0 1c		               ldy  #>f6a_msg
.17e7	20 f3 23	               jsr  putscxy
.17ea	20 f9 24	               jsr  popreg
.17ed	20 ca 24	               jsr  pushreg
.17f0	ad ec 20	               lda  f6abutton
.17f3	48		               pha
.17f4	a9 92		               lda  #146
.17f6	8d fe 20	               sta  f6abutton+18
.17f9	a9 01		               lda  #flashcol
.17fb	8d ec 20	               sta  f6abutton
.17fe	a2 ec		               ldx  #<f6abutton
.1800	a0 20		               ldy  #>f6abutton
.1802	20 f3 23	               jsr  putscxy
.1805	20 72 13	               jsr  delay
.1808	a9 12		               lda  #18
.180a	8d fe 20	               sta  f6abutton+18
.180d	68		               pla
.180e	8d ec 20	               sta  f6abutton
.1811	a2 ec		               ldx  #<f6abutton
.1813	a0 20		               ldy  #>f6abutton
.1815	20 f3 23	               jsr  putscxy
.1818	20 f9 24	               jsr  popreg
.181b	20 c8 1a	               jsr  fillchar
.181e	20 09 10	               jsr  drawbitmap
.1821	4c 6c 18	               jmp  out
.1824			menub
.1824	20 ca 24	               jsr  pushreg
.1827	a2 53		               ldx  #<blankmsg
.1829	a0 1b		               ldy  #>blankmsg
.182b	20 f3 23	               jsr  putscxy
.182e	a2 4c		               ldx  #<f6b_msg
.1830	a0 1d		               ldy  #>f6b_msg
.1832	20 f3 23	               jsr  putscxy
.1835	20 f9 24	               jsr  popreg
.1838	20 ca 24	               jsr  pushreg
.183b	ad c4 21	               lda  f6bbutton
.183e	48		               pha
.183f	a9 92		               lda  #146
.1841	8d d6 21	               sta  f6bbutton+18
.1844	a9 01		               lda  #flashcol
.1846	8d c4 21	               sta  f6bbutton
.1849	a2 c4		               ldx  #<f6bbutton
.184b	a0 21		               ldy  #>f6bbutton
.184d	20 f3 23	               jsr  putscxy
.1850	20 72 13	               jsr  delay
.1853	a9 12		               lda  #18
.1855	8d d6 21	               sta  f6bbutton+18
.1858	68		               pla
.1859	8d c4 21	               sta  f6bbutton
.185c	a2 c4		               ldx  #<f6bbutton
.185e	a0 21		               ldy  #>f6bbutton
.1860	20 f3 23	               jsr  putscxy
.1863	20 f9 24	               jsr  popreg
.1866	20 47 1a	               jsr  scrolldown
.1869	20 09 10	               jsr  drawbitmap
.186c	68		out            pla
.186d	20 ca 24	               jsr  pushreg
.1870	a2 53		               ldx  #<blankmsg
.1872	a0 1b		               ldy  #>blankmsg
.1874	20 f3 23	               jsr  putscxy
.1877	a2 7f		               ldx  #<prompt_msg
.1879	a0 1b		               ldy  #>prompt_msg
.187b	20 f3 23	               jsr  putscxy
.187e	20 f9 24	               jsr  popreg
.1881	60		               rts
.1882			f7action
.1882	48		               pha
.1883	a9 00		               lda  #$0
.1885	8d a6 09	               sta  editmode
.1888	ad a7 09	               lda  fkeyset
.188b	d0 4b		               bne  menub
.188d	20 ca 24	               jsr  pushreg
.1890	a2 53		               ldx  #<blankmsg
.1892	a0 1b		               ldy  #>blankmsg
.1894	20 f3 23	               jsr  putscxy
.1897	a2 91		               ldx  #<f7a_msg
.1899	a0 1c		               ldy  #>f7a_msg
.189b	20 f3 23	               jsr  putscxy
.189e	20 f9 24	               jsr  popreg
.18a1	20 ca 24	               jsr  pushreg
.18a4	ad 07 21	               lda  f7abutton
.18a7	48		               pha
.18a8	a9 92		               lda  #146
.18aa	8d 19 21	               sta  f7abutton+18
.18ad	a9 01		               lda  #flashcol
.18af	8d 07 21	               sta  f7abutton
.18b2	a2 07		               ldx  #<f7abutton
.18b4	a0 21		               ldy  #>f7abutton
.18b6	20 f3 23	               jsr  putscxy
.18b9	20 72 13	               jsr  delay
.18bc	a9 12		               lda  #18
.18be	8d 19 21	               sta  f7abutton+18
.18c1	68		               pla
.18c2	8d 07 21	               sta  f7abutton
.18c5	a2 07		               ldx  #<f7abutton
.18c7	a0 21		               ldy  #>f7abutton
.18c9	20 f3 23	               jsr  putscxy
.18cc	20 f9 24	               jsr  popreg
.18cf	20 dc 10	               jsr  copycharset
.18d2	20 09 10	               jsr  drawbitmap
.18d5	4c 25 19	               jmp  out
.18d8	a9 00		menub          lda  #$0
.18da	8d a6 09	               sta  editmode
.18dd	20 ca 24	               jsr  pushreg
.18e0	a2 53		               ldx  #<blankmsg
.18e2	a0 1b		               ldy  #>blankmsg
.18e4	20 f3 23	               jsr  putscxy
.18e7	a2 6b		               ldx  #<f7b_msg
.18e9	a0 1d		               ldy  #>f7b_msg
.18eb	20 f3 23	               jsr  putscxy
.18ee	20 f9 24	               jsr  popreg
.18f1	20 ca 24	               jsr  pushreg
.18f4	ad df 21	               lda  f7bbutton
.18f7	48		               pha
.18f8	a9 92		               lda  #146
.18fa	8d f1 21	               sta  f7bbutton+18
.18fd	a9 01		               lda  #flashcol
.18ff	8d df 21	               sta  f7bbutton
.1902	a2 df		               ldx  #<f7bbutton
.1904	a0 21		               ldy  #>f7bbutton
.1906	20 f3 23	               jsr  putscxy
.1909	20 72 13	               jsr  delay
.190c	a9 12		               lda  #18
.190e	8d f1 21	               sta  f7bbutton+18
.1911	68		               pla
.1912	8d df 21	               sta  f7bbutton
.1915	a2 df		               ldx  #<f7bbutton
.1917	a0 21		               ldy  #>f7bbutton
.1919	20 f3 23	               jsr  putscxy
.191c	20 f9 24	               jsr  popreg
.191f	20 ef 19	               jsr  reverse
.1922	20 09 10	               jsr  drawbitmap
.1925	68		out            pla
.1926	20 ca 24	               jsr  pushreg
.1929	a2 53		               ldx  #<blankmsg
.192b	a0 1b		               ldy  #>blankmsg
.192d	20 f3 23	               jsr  putscxy
.1930	a2 7f		               ldx  #<prompt_msg
.1932	a0 1b		               ldy  #>prompt_msg
.1934	20 f3 23	               jsr  putscxy
.1937	20 f9 24	               jsr  popreg
.193a	60		               rts
.193b			f8action
.193b	08		               php
.193c	48		               pha
.193d	a9 00		               lda  #$0
.193f	8d a6 09	               sta  editmode
.1942	ad a7 09	               lda  fkeyset
.1945	d0 45		               bne  menub
.1947	20 ca 24	               jsr  pushreg
.194a	a2 53		               ldx  #<blankmsg
.194c	a0 1b		               ldy  #>blankmsg
.194e	20 f3 23	               jsr  putscxy
.1951	a2 a7		               ldx  #<menub_msg
.1953	a0 1d		               ldy  #>menub_msg
.1955	20 f3 23	               jsr  putscxy
.1958	20 f9 24	               jsr  popreg
.195b	20 ca 24	               jsr  pushreg
.195e	ad 22 21	               lda  f8abutton
.1961	48		               pha
.1962	a9 92		               lda  #146
.1964	8d 34 21	               sta  f8abutton+18
.1967	a9 01		               lda  #flashcol
.1969	8d 22 21	               sta  f8abutton
.196c	a2 22		               ldx  #<f8abutton
.196e	a0 21		               ldy  #>f8abutton
.1970	20 f3 23	               jsr  putscxy
.1973	20 72 13	               jsr  delay
.1976	a9 12		               lda  #18
.1978	8d 34 21	               sta  f8abutton+18
.197b	68		               pla
.197c	8d 22 21	               sta  f8abutton
.197f	a2 22		               ldx  #<f8abutton
.1981	a0 21		               ldy  #>f8abutton
.1983	20 f3 23	               jsr  putscxy
.1986	20 f9 24	               jsr  popreg
.1989	4c ce 19	               jmp  swapit
.198c			menub
.198c	20 ca 24	               jsr  pushreg
.198f	a2 53		               ldx  #<blankmsg
.1991	a0 1b		               ldy  #>blankmsg
.1993	20 f3 23	               jsr  putscxy
.1996	a2 82		               ldx  #<menua_msg
.1998	a0 1d		               ldy  #>menua_msg
.199a	20 f3 23	               jsr  putscxy
.199d	20 f9 24	               jsr  popreg
.19a0	20 ca 24	               jsr  pushreg
.19a3	ad fa 21	               lda  f8bbutton
.19a6	48		               pha
.19a7	a9 92		               lda  #146
.19a9	8d 0c 22	               sta  f8bbutton+18
.19ac	a9 01		               lda  #flashcol
.19ae	8d fa 21	               sta  f8bbutton
.19b1	a2 fa		               ldx  #<f8bbutton
.19b3	a0 21		               ldy  #>f8bbutton
.19b5	20 f3 23	               jsr  putscxy
.19b8	20 72 13	               jsr  delay
.19bb	a9 12		               lda  #18
.19bd	8d 0c 22	               sta  f8bbutton+18
.19c0	68		               pla
.19c1	8d fa 21	               sta  f8bbutton
.19c4	a2 fa		               ldx  #<f8bbutton
.19c6	a0 21		               ldy  #>f8bbutton
.19c8	20 f3 23	               jsr  putscxy
.19cb	20 f9 24	               jsr  popreg
.19ce	49 ff		swapit         eor  #$ff
.19d0	8d a7 09	               sta  fkeyset
.19d3	20 8c 11	               jsr  drawfkeys
.19d6	68		               pla
.19d7	48		               pha
.19d8	20 ca 24	               jsr  pushreg
.19db	a2 53		               ldx  #<blankmsg
.19dd	a0 1b		               ldy  #>blankmsg
.19df	20 f3 23	               jsr  putscxy
.19e2	a2 7f		               ldx  #<prompt_msg
.19e4	a0 1b		               ldy  #>prompt_msg
.19e6	20 f3 23	               jsr  putscxy
.19e9	20 f9 24	               jsr  popreg
.19ec	68		               pla
.19ed	28		               plp
.19ee	60		               rts
.19ef			reverse
.19ef	20 5c 24	               jsr  pushall
.19f2	48		               pha
.19f3	ad ac 09	               lda  mapaddr
.19f6	85 fd		               sta  $fd
.19f8	ad ad 09	               lda  mapaddr+1
.19fb	85 fe		               sta  $fe
.19fd	68		               pla
.19fe	a0 00		               ldy  #$00
.1a00	b1 fd		again          lda  (zpage2),y
.1a02	49 ff		               eor  #$ff
.1a04	91 fd		               sta  (zpage2),y
.1a06	c8		               iny
.1a07	c0 08		               cpy  #$08
.1a09	d0 f5		               bne  again
.1a0b	20 97 24	               jsr  popall
.1a0e	60		               rts
.1a0f			scrollup
.1a0f	20 5c 24	               jsr  pushall
.1a12	48		               pha
.1a13	ad ac 09	               lda  mapaddr
.1a16	85 fb		               sta  $fb
.1a18	ad ad 09	               lda  mapaddr+1
.1a1b	85 fc		               sta  $fc
.1a1d	68		               pla
.1a1e	48		               pha
.1a1f	ad ac 09	               lda  mapaddr
.1a22	85 fd		               sta  $fd
.1a24	ad ad 09	               lda  mapaddr+1
.1a27	85 fe		               sta  $fe
.1a29	68		               pla
.1a2a	20 cf 25	               jsr  inczp2
.1a2d	a0 00		               ldy  #$00
.1a2f	b1 fb		               lda  (zpage1),y
.1a31	8d 46 1a	               sta  tmpbyte
.1a34	b1 fd		again          lda  (zpage2),y
.1a36	91 fb		               sta  (zpage1),y
.1a38	c8		               iny
.1a39	c0 07		               cpy  #$07
.1a3b	d0 f7		               bne  again
.1a3d	ad 46 1a	               lda  tmpbyte
.1a40	91 fb		               sta  (zpage1),y
.1a42	20 97 24	               jsr  popall
.1a45	60		               rts
>1a46	00		tmpbyte        .byte     $00
.1a47			scrolldown
.1a47	20 5c 24	               jsr  pushall
.1a4a	48		               pha
.1a4b	ad ac 09	               lda  mapaddr
.1a4e	85 fb		               sta  $fb
.1a50	ad ad 09	               lda  mapaddr+1
.1a53	85 fc		               sta  $fc
.1a55	68		               pla
.1a56	48		               pha
.1a57	ad ac 09	               lda  mapaddr
.1a5a	85 fd		               sta  $fd
.1a5c	ad ad 09	               lda  mapaddr+1
.1a5f	85 fe		               sta  $fe
.1a61	68		               pla
.1a62	20 cf 25	               jsr  inczp2
.1a65	a0 07		               ldy  #$07                ;xxxxxxxx zpage1
.1a67	b1 fb		               lda  (zpage1),y          ;xxxxxxxx zpage2
.1a69	8d 80 1a	               sta  tmpbyte             ;xxxxxxxx
.1a6c	88		again          dey                      ;xxxxxxxx
.1a6d	b1 fb		               lda  (zpage1),y          ;xxxxxxxx
.1a6f	91 fd		               sta  (zpage2),y          ;xxxxxxxx
.1a71	c0 00		               cpy  #$00                ;xxxxxxxx
.1a73	d0 f7		               bne  again               ;xxxxxxxx
.1a75	a0 00		               ldy  #$00
.1a77	ad 80 1a	               lda  tmpbyte
.1a7a	91 fb		               sta  (zpage1),y
.1a7c	20 97 24	               jsr  popall
.1a7f	60		               rts
>1a80	00		tmpbyte        .byte     $00
.1a81			scrollright
.1a81	20 5c 24	               jsr  pushall
.1a84	48		               pha
.1a85	ad ac 09	               lda  mapaddr
.1a88	85 fb		               sta  $fb
.1a8a	ad ad 09	               lda  mapaddr+1
.1a8d	85 fc		               sta  $fc
.1a8f	68		               pla
.1a90	a0 00		               ldy  #$00
.1a92	b1 fb		again          lda  (zpage1),y
.1a94	18		               clc
.1a95	6a		               ror
.1a96	90 03		               bcc  zero
.1a98	18		               clc
.1a99	69 80		one            adc  #$80
.1a9b	91 fb		zero           sta  (zpage1),y
.1a9d	c8		               iny
.1a9e	c0 08		               cpy  #$08
.1aa0	d0 f0		               bne  again
.1aa2	20 97 24	               jsr  popall
.1aa5	60		               rts
.1aa6			scrollleft
.1aa6	20 5c 24	               jsr  pushall
.1aa9	48		               pha
.1aaa	ad ac 09	               lda  mapaddr
.1aad	85 fb		               sta  $fb
.1aaf	ad ad 09	               lda  mapaddr+1
.1ab2	85 fc		               sta  $fc
.1ab4	68		               pla
.1ab5	a0 00		               ldy  #$00
.1ab7	b1 fb		again          lda  (zpage1),y
.1ab9	18		               clc
.1aba	2a		               rol
.1abb	69 00		               adc  #$00
.1abd	91 fb		               sta  (zpage1),y
.1abf	c8		               iny
.1ac0	c0 08		               cpy  #$08
.1ac2	d0 f3		               bne  again
.1ac4	20 97 24	               jsr  popall
.1ac7	60		               rts
.1ac8			fillchar
.1ac8	08		               php
.1ac9	48		               pha
.1aca	a9 ff		               lda  #$ff
.1acc	20 dc 1a	               jsr  allsame
.1acf	68		               pla
.1ad0	28		               plp
.1ad1	60		               rts
.1ad2			clearchar
.1ad2	08		               php
.1ad3	48		               pha
.1ad4	a9 00		               lda  #$00
.1ad6	20 dc 1a	               jsr  allsame
.1ad9	68		               pla
.1ada	28		               plp
.1adb	60		               rts
.1adc			allsame
.1adc	48		               pha
.1add	ad ac 09	               lda  mapaddr
.1ae0	85 fd		               sta  $fd
.1ae2	ad ad 09	               lda  mapaddr+1
.1ae5	85 fe		               sta  $fe
.1ae7	68		               pla
.1ae8	a0 00		               ldy  #$00
.1aea	91 fd		again          sta  (zpage2),y
.1aec	c8		               iny
.1aed	c0 08		               cpy  #$08
.1aef	d0 f9		               bne  again
.1af1	60		               rts
.1af2			fliphorz
.1af2	20 5c 24	               jsr  pushall
.1af5	48		               pha
.1af6	ad ac 09	               lda  mapaddr
.1af9	85 fd		               sta  $fd
.1afb	ad ad 09	               lda  mapaddr+1
.1afe	85 fe		               sta  $fe
.1b00	68		               pla
.1b01	a0 00		               ldy  #$00
.1b03	b1 fd		nextbyte       lda  (zpage2),y
.1b05	a2 00		               ldx  #$00
.1b07	2a		rolagain       rol
.1b08	6e 1e 1b	               ror  tmpbyte
.1b0b	e8		               inx
.1b0c	e0 08		               cpx  #$08
.1b0e	30 f7		               bmi  rolagain
.1b10	ad 1e 1b	               lda  tmpbyte
.1b13	91 fd		               sta  (zpage2),y
.1b15	c8		               iny
.1b16	c0 08		               cpy  #$08
.1b18	30 e9		               bmi  nextbyte
.1b1a	20 97 24	               jsr  popall
.1b1d	60		               rts
>1b1e	00		tmpbyte        .byte     $00
.1b1f			flipvert
.1b1f	20 5c 24	               jsr  pushall
.1b22	48		               pha
.1b23	ad ac 09	               lda  mapaddr
.1b26	85 fd		               sta  $fd
.1b28	ad ad 09	               lda  mapaddr+1
.1b2b	85 fe		               sta  $fe
.1b2d	68		               pla
.1b2e	a0 00		               ldy  #$00
.1b30	b1 fd		tostack        lda  (zpage2),y
.1b32	48		               pha
.1b33	c8		               iny
.1b34	c0 08		               cpy  #$08
.1b36	d0 f8		               bne  tostack
.1b38	a0 00		               ldy  #$00
.1b3a	68		fromstack      pla
.1b3b	91 fd		               sta  (zpage2),y
.1b3d	c8		               iny
.1b3e	c0 08		               cpy  #$08
.1b40	d0 f8		               bne  fromstack
.1b42	20 97 24	               jsr  popall
.1b45	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: strings_fr.asm

>1b46	0a 01 05	editor_msg     .byte vrose,1,5
>1b49	5b 45 44 49	               .null     "[editeur]"
>1b4d	54 45 55 52 5d 00
>1b53	03 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>1b57	20 20 20 20	               .null     "                                       "
>1b5b	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b6b	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b7b	20 20 20 00
>1b7f	03 00 05 92	prompt_msg     .byte     mesgcol,0,5,146
>1b83	20 55 54 49	               .null     " utilisez les clefs de fonction:       "
>1b87	4c 49 53 45 5a 20 4c 45 53 20 43 4c 45 46 53 20
>1b97	44 45 20 46 4f 4e 43 54 49 4f 4e 3a 20 20 20 20
>1ba7	20 20 20 00
>1bab	03 00 05 92	wait_msg       .byte     mesgcol,0,5,146
>1baf	20 55 4e 20	               .null     " un instant s.v.p. ... "
>1bb3	49 4e 53 54 41 4e 54 20 53 2e 56 2e 50 2e 20 2e
>1bc3	2e 2e 20 00
.1bc7			f1a_msg
>1bc7	03 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>1bcb	20 4d 4f 44	               .null     " mode edit: chr$(   )",146
>1bcf	45 20 45 44 49 54 3a 20 43 48 52 24 28 20 20 20
>1bdf	29 92 00
.1be2			f2a_msg
>1be2	03 00 05	copy_msg       .byte     mesgcol,0,5
>1be5	20 45 4e 54	               .null     " entez le character a copier:"
>1be9	45 5a 20 4c 45 20 43 48 41 52 41 43 54 45 52 20
>1bf9	41 20 43 4f 50 49 45 52 3a 00
.1c03			f3a_msg
>1c03	03 00 05 92	save_msg       .byte     mesgcol,0,5,146
>1c07	20 53 41 55	               .null     " sauvegarder sur quel lecteur? (1/8/9): "
>1c0b	56 45 47 41 52 44 45 52 20 53 55 52 20 51 55 45
>1c1b	4c 20 4c 45 43 54 45 55 52 3f 20 28 31 2f 38 2f
>1c2b	39 29 3a 20 00
.1c30			f4a_msg
>1c30	03 00 05 92	load_msg       .byte     mesgcol,0,5,146
>1c34	20 43 48 41	               .null     " charger de quel lecteur? (1,8,9): "
>1c38	52 47 45 52 20 44 45 20 51 55 45 4c 20 4c 45 43
>1c48	54 45 55 52 3f 20 28 31 2c 38 2c 39 29 3a 20 00
.1c58			f5a_msg
>1c58	03 00 05	clear_msg      .byte     mesgcol,0,5
>1c5b	20 45 46 46	               .null     " effacer char: chr$(   )"
>1c5f	41 43 45 52 20 43 48 41 52 3a 20 43 48 52 24 28
>1c6f	20 20 20 29 00
.1c74			f6a_msg
>1c74	03 00 05	fill_msg       .byte     mesgcol,0,5
>1c77	20 52 45 4d	               .null     " remplir char:  chr$(   )"
>1c7b	50 4c 49 52 20 43 48 41 52 3a 20 20 43 48 52 24
>1c8b	28 20 20 20 29 00
.1c91			f7a_msg
>1c91	03 00 05	work_msg       .byte     mesgcol,0,5
>1c94	20 52 45 43	               .null     " recuperer les caracteres du chargen."
>1c98	55 50 45 52 45 52 20 4c 45 53 20 43 41 52 41 43
>1ca8	54 45 52 45 53 20 44 55 20 43 48 41 52 47 45 4e
>1cb8	2e 00
.1cba			f1b_msg
>1cba	03 00 05	invr_msg       .byte     mesgcol,0,5
>1cbd	20 42 41 53	               .null     " basculer verticalement:"
>1cc1	43 55 4c 45 52 20 56 45 52 54 49 43 41 4c 45 4d
>1cd1	45 4e 54 3a 00
.1cd6			f2b_msg
>1cd6	03 00 05	flip_msg       .byte     mesgcol,0,5
>1cd9	20 42 41 53	               .null     " basculer horizontalement:"
>1cdd	43 55 4c 45 52 20 48 4f 52 49 5a 4f 4e 54 41 4c
>1ced	45 4d 45 4e 54 3a 00
.1cf4			f3b_msg
>1cf4	03 00 05	scrollr_msg    .byte     mesgcol,0,5
>1cf7	20 44 45 46	               .null     " defiler vers la droite:"
>1cfb	49 4c 45 52 20 56 45 52 53 20 4c 41 20 44 52 4f
>1d0b	49 54 45 3a 00
.1d10			f4b_msg
>1d10	03 00 05	scrolll_msg    .byte     mesgcol,0,5
>1d13	20 44 45 46	               .null     " defiler vers la gauche:"
>1d17	49 4c 45 52 20 56 45 52 53 20 4c 41 20 47 41 55
>1d27	43 48 45 3a 00
.1d2c			f5b_msg
>1d2c	03 00 05	scrollu_msg    .byte     mesgcol,0,5
>1d2f	20 44 45 46	               .null     " defiler 1 bit vers le haut:"
>1d33	49 4c 45 52 20 31 20 42 49 54 20 56 45 52 53 20
>1d43	4c 45 20 48 41 55 54 3a 00
.1d4c			f6b_msg
>1d4c	03 00 05	scrolld_msg    .byte     mesgcol,0,5
>1d4f	20 44 45 46	               .null     " defiler 1 bit vers le bas:"
>1d53	49 4c 45 52 20 31 20 42 49 54 20 56 45 52 53 20
>1d63	4c 45 20 42 41 53 3a 00
.1d6b			f7b_msg
>1d6b	03 00 05	rvrs_msg       .byte     mesgcol,0,5
>1d6e	20 49 4e 56	               .null     " inverser les bits:"
>1d72	45 52 53 45 52 20 4c 45 53 20 42 49 54 53 3a 00
>1d82	03 00 05	menua_msg      .byte     mesgcol,0,5
>1d85	20 56 4f 55	               .null     " vous etes dirige vers le menu 1."
>1d89	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1d99	52 53 20 4c 45 20 4d 45 4e 55 20 31 2e 00
>1da7	03 00 05	menub_msg      .byte     mesgcol,0,5
>1daa	20 56 4f 55	               .null     " vous etes dirige vers le menu 2."
>1dae	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1dbe	52 53 20 4c 45 20 4d 45 4e 55 20 32 2e 00
>1dcc	07 00 05	copychar_msg   .byte     vjaune,0,5
>1dcf	20 45 4e 54	               .null     " entrez le caracter a copier (?).",157,157,157
>1dd3	52 45 5a 20 4c 45 20 43 41 52 41 43 54 45 52 20
>1de3	41 20 43 4f 50 49 45 52 20 28 3f 29 2e 9d 9d 9d
>1df3	00
>1df4	07 00 05	fname_msg      .byte     vjaune,0,5
>1df7	20 4e 4f 4d	               .null     " nom du fichier (6 lettres): ",$a4,$a4,$a4,$a4,$a4,$a4,".chr",157,157,157,157,157,157,157,157,157,157
>1dfb	20 44 55 20 46 49 43 48 49 45 52 20 28 36 20 4c
>1e0b	45 54 54 52 45 53 29 3a 20 a4 a4 a4 a4 a4 a4 2e
>1e1b	43 48 52 9d 9d 9d 9d 9d 9d 9d 9d 9d 9d 00
>1e29	04 12 18 12	quit_msg       .byte     vmauve,18,24,18
>1e2d	43 54 52 4c	               .text     "ctrl-x",146
>1e31	2d 58 92
>1e34	20 3d 20 51	               .null     " = quitter.   "
>1e38	55 49 54 54 45 52 2e 20 20 20 00
>1e43	05 12 17 12	redraw_msg     .byte     vvert,18,23,18
>1e47	43 54 52 4c	               .text     "ctrl-r",146
>1e4b	2d 52 92
>1e4e	20 3d 20 52	               .null     " = rafraichir."
>1e52	41 46 52 41 49 43 48 49 52 2e 00
.1e5d			menu_msg
>1e5d	0d 12 18 12	exit_msg       .byte     vvert1,18,24,18
>1e61	43 54 52 4c	               .text     "ctrl-x",146
>1e65	2d 58 92
>1e68	20 3d 20 41	               .null     " = au menu.   "
>1e6c	55 20 4d 45 4e 55 2e 20 20 20 00
>1e77	07 04 06 12	whoami0        .byte     whoamicol,4,6,18
>1e7b	20 20 20 20	               .null     "                               ",146
>1e7f	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1e8f	20 20 20 20 20 20 20 20 20 20 20 92 00
>1e9c	07 04 07 12	whoami1        .byte     whoamicol,4,7,18
>1ea0	20 20 20 20	               .null     "       ",146," c h a r e d i t ",18,"       ",146
>1ea4	20 20 20 92 20 43 20 48 20 41 20 52 20 45 20 44
>1eb4	20 49 20 54 20 12 20 20 20 20 20 20 20 92 00
>1ec3	07 04 08 12	whoami2        .byte     whoamicol,4,8,18
>1ec7	20 20 20 20	               .null     "                               ",146
>1ecb	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1edb	20 20 20 20 20 20 20 20 20 20 20 92 00
>1ee8	07 04 09 12	whoami3        .byte     whoamicol,4,9,18
>1eec	20 54 49 52	               .null     " tirez de isbn : 0-942386-29-9 ",146
>1ef0	45 5a 20 44 45 20 49 53 42 4e 20 3a 20 30 2d 39
>1f00	34 32 33 38 36 2d 32 39 2d 39 20 92 00
>1f0d	07 04 0a 12	whoami4        .byte     whoamicol,4,10,18
>1f11	20 20 20 20	               .null     "       par john heilborn       ",146
>1f15	20 20 20 50 41 52 20 4a 4f 48 4e 20 48 45 49 4c
>1f25	42 4f 52 4e 20 20 20 20 20 20 20 92 00
>1f32	07 04 0b 12	whoami5        .byte     whoamicol,4,11,18
>1f36	20 20 20 20	               .null     "                               ",146
>1f3a	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1f4a	20 20 20 20 20 20 20 20 20 20 20 92 00
>1f57	07 04 0c 12	whoami6        .byte     whoamicol,4,12,18
>1f5b	20 20 20 20	               .null     "      code assembleur par      ",146
>1f5f	20 20 43 4f 44 45 20 41 53 53 45 4d 42 4c 45 55
>1f6f	52 20 50 41 52 20 20 20 20 20 20 92 00
>1f7c	07 04 0d 12	whoami7        .byte     whoamicol,4,13,18
>1f80	20 44 41 4e	               .null     " daniel lafrance quebec/canada ",146
>1f84	49 45 4c 20 4c 41 46 52 41 4e 43 45 20 51 55 45
>1f94	42 45 43 2f 43 41 4e 41 44 41 20 92 00
>1fa1	07 04 0e 12	whoami8        .byte     whoamicol,4,14,18
>1fa5	20 20 20 20	               .null     "    version:",version,"    ",146
>1fa9	56 45 52 53 49 4f 4e 3a 32 30 32 35 30 39 32 35
>1fb9	2d 30 30 30 30 30 31 20 20 20 20 92 00
>1fc6	07 04 0f 12	whoami9        .byte     whoamicol,4,15,18
>1fca	20 20 20 20	               .null     "                               ",146
>1fce	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1fde	20 20 20 20 20 20 20 20 20 20 20 92 00
>1feb	03 06 10 14	bye_msg        .byte     vcyan,6,16,20
>1fef	20 20 20 20	               .null     "      bonjour et merci      ",146
>1ff3	20 20 42 4f 4e 4a 4f 55 52 20 45 54 20 4d 45 52
>2003	43 49 20 20 20 20 20 20 92 00
>200d	0d 05 18 12	any_msg        .byte     vvert1,5,24,18
>2011	20 41 50 50	               .null     " appuyez une cle pour basic ",146
>2015	55 59 45 5a 20 55 4e 45 20 43 4c 45 20 50 4f 55
>2025	52 20 42 41 53 49 43 20 92 00
>202f	03 12 07	titremenu1     .byte     menu1col1,fkeyleft,f1top-2       ;133
>2032	12 20 4a 45	               .null     18," jeu de fonctions #1 ",146
>2036	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>2046	31 20 92 00
>204a	0f 12 07	titremenu2     .byte     menu2col1,fkeyleft,f1top-2       ;133
>204d	12 20 4a 45	               .null     18," jeu de fonctions #2 ",146
>2051	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>2061	32 20 92 00
>2065	03 12 09	f1abutton      .byte     menu1col1,fkeyleft,f1top       ;133
>2068	45 44 49 54	               .text     "editer carac..."
>206c	45 52 20 43 41 52 41 43 2e 2e 2e
>2077	12		               .byte     18             ; position 15
>2078	a9 20 46 31	               .null     $a9," f1 ",223,146
>207c	20 df 92 00
>2080	0e 12 0a	f2abutton      .byte     menu1col2,fkeyleft,f1top+1     ;138
>2083	43 4f 50 49	               .text     "copier un carac"
>2087	45 52 20 55 4e 20 43 41 52 41 43
>2092	12		               .byte     18   ; position 15
>2093	20 20 46 32	               .null     "  f2  ",146
>2097	20 20 92 00
>209b	03 12 0c	f3abutton      .byte     menu1col1,fkeyleft,f1top+3     ;137
>209e	53 41 56 45	               .text     "savegarder sur."
>20a2	47 41 52 44 45 52 20 53 55 52 2e
>20ad	12		               .byte     18            ; position 15
>20ae	a9 20 46 33	               .null     $a9," f3 ",223,146
>20b2	20 df 92 00
>20b6	0e 12 0d	f4abutton      .byte     menu1col2,fkeyleft,f1top+4     ;134
>20b9	43 48 41 52	               .text     "charger de....."
>20bd	47 45 52 20 44 45 2e 2e 2e 2e 2e
>20c8	12		               .byte     18             ; position 15
>20c9	20 20 46 34	               .null     "  f4  ",146
>20cd	20 20 92 00
>20d1	03 12 0f	f5abutton      .byte     menu1col1,fkeyleft,f1top+6     ;135
>20d4	4d 45 54 54	               .text     "mettre tout a 0"
>20d8	52 45 20 54 4f 55 54 20 41 20 30
>20e3	12		               .byte     18             ; position 15
>20e4	a9 20 46 35	               .null     $a9," f5 ",223,146
>20e8	20 df 92 00
>20ec	0e 12 10	f6abutton      .byte     menu1col2,fkeyleft,f1top+7    ;139
>20ef	4d 45 54 54	               .text     "mettre tout a 1"
>20f3	52 45 20 54 4f 55 54 20 41 20 31
>20fe	12		               .byte     18             ; position 15
>20ff	20 20 46 36	               .null     "  f6  ",146
>2103	20 20 92 00
>2107	03 12 12	f7abutton      .byte     menu1col1,fkeyleft,f1top+9    ;136
>210a	52 45 43 55	               .text     "recuperer rom.."
>210e	50 45 52 45 52 20 52 4f 4d 2e 2e
>2119	12		               .byte     18             ; position 15
>211a	a9 20 46 37	               .null     $a9," f7 ",223,146
>211e	20 df 92 00
>2122	0e 12 13	f8abutton      .byte     menu1col2,fkeyleft,f1top+10
>2125	41 4c 4c 45	               .text     "aller au menu2."
>2129	52 20 41 55 20 4d 45 4e 55 32 2e
>2134	12		               .byte     18             ; position 15
>2135	20 20 46 38	               .null     "  f8  ", 146
>2139	20 20 92 00
>213d	0f 12 09	f1bbutton      .byte     menu2col1,fkeyleft,f1top
>2140	42 41 53 43	               .text     "basculer vert.."
>2144	55 4c 45 52 20 56 45 52 54 2e 2e
>214f	12		               .byte     18             ; position 15
>2150	a9 20 46 31	               .null     $a9," f1 ",223,146
>2154	20 df 92 00
>2158	0c 12 0a	f2bbutton      .byte     menu2col2,fkeyleft,f1top+1
>215b	42 41 53 43	               .text     "basculer horz.."
>215f	55 4c 45 52 20 48 4f 52 5a 2e 2e
>216a	12		               .byte     18             ; position 15
>216b	20 20 46 32	               .null     "  f2  ",146
>216f	20 20 92 00
>2173	0f 12 0c	f3bbutton      .byte     menu2col1,fkeyleft,f1top+3
>2176	44 45 46 49	               .text     "defiler droite."
>217a	4c 45 52 20 44 52 4f 49 54 45 2e
>2185	12		               .byte     18             ; position 15
>2186	a9 20 46 33	               .null     $a9," f3 ",223,146
>218a	20 df 92 00
>218e	0c 12 0d	f4bbutton      .byte     menu2col2,fkeyleft,f1top+4
>2191	44 45 46 49	               .text     "defiler gauche."
>2195	4c 45 52 20 47 41 55 43 48 45 2e
>21a0	12		               .byte     18             ; position 15
>21a1	20 20 46 34	               .null     "  f4  ",146
>21a5	20 20 92 00
>21a9	0f 12 0f	f5bbutton      .byte     menu2col1,fkeyleft,f1top+6
>21ac	44 45 46 49	               .text     "defiler haut..."
>21b0	4c 45 52 20 48 41 55 54 2e 2e 2e
>21bb	12		               .byte     18             ; position 15
>21bc	a9 20 46 35	               .null     $a9," f5 ",223,146
>21c0	20 df 92 00
>21c4	0c 12 10	f6bbutton      .byte     menu2col2,fkeyleft,f1top+7
>21c7	44 45 46 49	               .text     "defiler bas...."
>21cb	4c 45 52 20 42 41 53 2e 2e 2e 2e
>21d6	12		               .byte     18             ; position 15
>21d7	20 20 46 36	               .null     "  f6  ",146
>21db	20 20 92 00
>21df	0f 12 12	f7bbutton      .byte     menu2col1,fkeyleft,f1top+9
>21e2	49 4e 56 45	               .text     "inverser bits.."
>21e6	52 53 45 52 20 42 49 54 53 2e 2e
>21f1	12		               .byte     18             ; position 15
>21f2	a9 20 46 37	               .null     $a9," f7 ",223,146
>21f6	20 df 92 00
>21fa	0c 12 13	f8bbutton      .byte     menu2col2,fkeyleft,f1top+10
>21fd	41 4c 4c 45	               .text     "aller au menu1."
>2201	52 20 41 55 20 4d 45 4e 55 31 2e
>220c	12		               .byte     18             ; position 15
>220d	20 20 46 38	               .null     "  f8  ", 146
>2211	20 20 92 00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d000			chargen        =    $d000
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>2215	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>2219	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms=$e1d4  ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk=$ed09    ; Send Talk command to serial bus.
=$ed0c			slisten=$ed0c  ; Send LISTEN command to serial bus.
=$ed40			sflush=$ed40   ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2=$edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2=$edb9  ; Send TALK secondary addressto serial bus.
=$eddd			sbout=$eddd    ; Write byte to serial bus.
=$edef			sutalk=$edef   ; Send UNTalk command to serial bus.
=$edfe			sulisten=$edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh=$ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow=$ee8e  ; Set CLOCK OUT to low
=$ee97			sdathigh=$ee97 ; Set DATA OUT to High
=$eea0			sdatlow=$eea0  ; Set DATA OUT to low
=$eea9			sclkdta=$eea9  ; Read CLOCK IN and DATA IN.
=$f1ad			sbread=$f1ad   ; Read one byte from serial port.
=$f237			sstdin=$F237   ; Define serial bus as standard input; do not send TALK
=$f279			sstdout=$F279  ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen=$F3D5   ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose=$F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose=$F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose=$F642  ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout=$FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr=$ffa5    ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin=$ffc6    ; jmp ($031e) Define an input channel.
=$ffc9			chkout=$ffc9   ; jmp ($0320) Define an output channel.
=$ffcf			chrin=$ffcf    ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout=$ffd2   ; jmp ($0326) Output a character
=$ff81			cint=$ff81     ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout=$ffa8    ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall=$ffe7    ; jmp ($032c) Close all open files
=$ffc3			close=$ffc3    ; jmp ($031c) Close a logical file
=$ffcc			clrchn=$ffcc   ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin=$ffe4    ; jmp ($032a) Get a character.
=$fff3			iobase=$fff3   ; jmp $e500 Define i/o memory page
=$ff84			ioinit=$ff84   ; ($fda3) Initialize i/o devices.
=$ffb1			listen=$ffb1   ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load=$ffd5     ; jmp $f4e9 Load device to RAM.
=$ff9c			membot=$ff9c   ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop=$ff99   ; jmp $fe25 Get/Set top of ram
=$ffc0			open=$ffc0     ; jmp ($031a) Open a logical file
=$fff0			plot=$fff0     ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas=$ff87   ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim=$ffde    ; jmp $f6dd Read system clock
=$ffb7			readst=$ffb7   ; jmp $fe07 Read i/o status word
=$ff8a			restor=$ff8a   ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save=$ffd8     ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey=$ff9f   ; jmp $ea87 Scan the keyboard
=$ffed			screen=$ffed   ; jmp $e505 Return screen format
=$ff93			second=$ff93   ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs=$ffba   ; jmp $fe00 Set up a logical file
=$ff90			setmsg=$ff90   ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam=$ffbd   ; jmp $fdf9 Set up file name
=$ffdb			settim=$ffdb   ; jmp $f6e4 Set the system clock.
=$ffa2			settmo=$ffa2   ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop=$ffe1     ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk=$ffb4     ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa=$ff96     ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim=$ffea    ; jmp $f69b Update the system clock
=$ffae			unlsn=$ffae    ; jmp $edfe Send an unlisten command
=$ffab			untlk=$ffab    ; jmp $edef Send an untalk command
=$ff8d			vector=$ff8d   ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.           ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.   ;a--;---; a=dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.      ;---;a--; a=Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.   ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial. ;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.        ;--y;---; y=msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .         ;a--;---; a=file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.             ;axy;---; a=# start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode. ;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.   ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.              ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.          ;---;---; z=1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.         ;a--;---; a=len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.       ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)         ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.         ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                   ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.        ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                  ;a--;---; a=ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.              ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.         ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.              ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.         ;a--;---; a=SAor#$60
=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black         =   144  ;0,  ctrl-1
=5			b_white         =   5    ;1,  ctrl-2
=28			b_red           =   28   ;2,  ctrl-3
=159			b_cyan          =   159  ;3,  ctrl-4
=156			b_purple        =   156  ;4,  ctrl-5
=30			b_green         =   30   ;5,  ctrl-6
=31			b_blue          =   31   ;6,  ctrl-7
=158			b_yellow        =   158  ;7,  ctrl-8
=129			b_orange        =   129  ;8,  C=-1
=149			b_brown         =   149  ;9,  C=-2
=150			b_ltred         =   150  ;10, C=-3
=155			b_gray3         =   155  ;11, C=-4
=155			b_grey3         =   155  ;11, C=-4
=152			b_gray2         =   152  ;12, C=-5
=152			b_grey2         =   152  ;13, C=-5
=153			b_ltgreen       =   153  ;13, C=-6
=154			b_ltblue        =   154  ;14, C=-7
=151			b_gray1         =   151  ;15, C=-8
=151			b_grey1         =   151  ;15, C=-8
=144			b_noir          =   144  ;0,  ctrl-1
=5			b_blanc         =   5    ;1,  ctrl-2
=28			b_rouge         =   28   ;2,  ctrl-3
=156			b_mauve         =   156  ;4,  ctrl-5
=30			b_vert          =   30   ;5,  ctrl-6
=31			b_bleu          =   31   ;6,  ctrl-7
=158			b_jaune         =   158  ;7,  ctrl-8
=149			b_brun          =   149  ;9,  C=-2
=150			b_rose          =   150  ;10, C=-3
=155			b_gris3         =   155  ;11, C=-4
=152			b_gris2         =   152  ;12, C=-5
=153			b_vert2         =   153  ;13, C=-6
=154			b_blue2         =   154  ;14, C=-7
=151			b_gris1         =   151  ;15, C=-8
=151			b_gris          =   151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-vicii.asm

.221d			screendis
.221d	08		               php
.221e	48		               pha
.221f	ad 11 d0	               lda  $d011
.2222	29 ef		               and  #%11101111
.2224	8d 11 d0	               sta  $d011
.2227	68		               pla
.2228	28		               plp
.2229	60		               rts
.222a			screenena
.222a	08		               php
.222b	48		               pha
.222c	ad 11 d0	               lda  $d011
.222f	09 10		               ora  #%00010000
.2231	8d 11 d0	               sta  $d011
.2234	68		               pla
.2235	28		               plp
.2236	60		               rts
=8192			bmpram = 8192
.2237			victohighres
.2237	08		               php
.2238	48		               pha
.2239	ad 11 d0	               lda  vicmiscfnc
.223c	09 20		               ora  #%00100000     ; 32
.223e	8d 11 d0	               sta  vicmiscfnc
.2241	ad 18 d0	               lda  vicmemptr
.2244	09 08		               ora  #%00001000     ; $08
.2246	8d 18 d0	               sta  vicmemptr
.2249	a9 ff		               lda  #$ff           ; 255
.224b	85 37		               sta  $0037
.224d	a9 1f		               lda  #$1f           ; 31
.224f	85 38		               sta  $0038
.2251	68		               pla
.2252	28		               plp
.2253	60		               rts
.2254			victonormal
.2254	08		               php
.2255	48		               pha
.2256	ad 11 d0	               lda  vicmiscfnc
.2259	29 df		               and  #%11011111     ; 233
.225b	8d 11 d0	               sta  vicmiscfnc
.225e	ad 18 d0	               lda  vicmemptr
.2261	29 f7		               and  #%11110111     ; $08
.2263	8d 18 d0	               sta  vicmemptr
.2266	a9 00		               lda  #$00
.2268	85 37		               sta  $0037
.226a	a9 a0		               lda  #$a0
.226c	85 38		               sta  $0038
.226e	20 49 23	               jsr  cls
.2271	68		               pla
.2272	28		               plp
.2273	60		               rts
.2274			vicbmpclear
.2274	20 5c 24	               jsr  push
.2277	a9 04		               lda  #cmauve
.2279	20 a2 22	               jsr  setvicbmpbackcol
.227c	a9 00		               lda  #<8192              ; Place le LSB de 8192 ...
.227e	85 fb		               sta  zpage1              ; ... dans le lsb de zpage1.
.2280	a9 20		               lda  #>8192              ; Place le MSB de 8192 ...
.2282	85 fc		               sta  zpage1+1            ; ... dans le Msb de zpage1.
.2284	48		               pha
.2285	a9 ff		               lda  #<$0000+(8191)
.2287	8d 80 26	               sta  loopcount
.228a	a9 1f		               lda  #>$0000+(8191)
.228c	8d 81 26	               sta  loopcount+1
.228f	68		               pla
.2290	a0 00		               ldy  #$00
.2292	a9 0f		next           lda  #$0f
.2294	91 fb		               sta  (zpage1),y
.2296	20 b1 25	               jsr  inczpage1
.2299	20 60 26	               jsr  loop
.229c	d0 f4		               bne  next
.229e	20 97 24	               jsr  pop
.22a1	60		               rts
.22a2			setvicbmpbackcol
.22a2	20 5c 24	               jsr  push
.22a5	29 0f		               and  #$0f
.22a7	8d d5 22	               sta  vicbmpbackcol
.22aa	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.22ac	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.22ae	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.22b0	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.22b2	48		               pha
.22b3	a9 00		               lda  #<$0000+(1024)
.22b5	8d 80 26	               sta  loopcount
.22b8	a9 04		               lda  #>$0000+(1024)
.22ba	8d 81 26	               sta  loopcount+1
.22bd	68		               pla
.22be	a0 00		               ldy  #$00
.22c0	b1 fb		next           lda  (zpage1),y
.22c2	29 f0		               and  #$f0
.22c4	0d d5 22	               ora  vicbmpbackcol
.22c7	91 fb		               sta  (zpage1),y
.22c9	20 b1 25	               jsr  inczpage1
.22cc	20 60 26	               jsr  loop
.22cf	d0 ef		               bne  next
.22d1	20 97 24	               jsr  pop
.22d4	60		               rts
>22d5	00		vicbmpbackcol  .byte     $00
.22d6			setvicbmpforecol
.22d6	20 5c 24	               jsr  push
.22d9	2a		               rol
.22da	2a		               rol
.22db	2a		               rol
.22dc	2a		               rol
.22dd	29 f0		               and  #$f0
.22df	8d 0d 23	               sta  vicbmpforecol
.22e2	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.22e4	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.22e6	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.22e8	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.22ea	48		               pha
.22eb	a9 00		               lda  #<$0000+(1024)
.22ed	8d 80 26	               sta  loopcount
.22f0	a9 04		               lda  #>$0000+(1024)
.22f2	8d 81 26	               sta  loopcount+1
.22f5	68		               pla
.22f6	a0 00		               ldy  #$00
.22f8	b1 fb		next           lda  (zpage1),y
.22fa	29 0f		               and  #$0f
.22fc	0d 0d 23	               ora  vicbmpforecol
.22ff	91 fb		               sta  (zpage1),y
.2301	20 b1 25	               jsr  inczpage1
.2304	20 60 26	               jsr  loop
.2307	d0 ef		               bne  next
.2309	20 97 24	               jsr  pop
.230c	60		               rts
>230d	00		vicbmpforecol  .byte     $00
.230e			bmphrcalccoords
.230e	20 5c 24	               jsr  push
.2311	18		               clc       ; On met Carry à 0
.2312	6a		               ror       ; le bit 0 de a dans carry  ?/2
.2313	8a		               txa       ; x dans a
.2314	4a		               lsr       ; ?/4
.2315	4a		               lsr       ; ?/8 a = (ax)/8
.2316	8d 27 23	               sta  bmphrcol
.2319	98		               tya       ; Y dans a
.231a	4a		               lsr       ; ?/2
.231b	4a		               lsr       ; ?/4
.231c	4a		               lsr       ; ?/8 a=Y/8
.231d	8d 26 23	               sta  bmphrrow
.2320	48		               pha
.2321	98		               tya
.2322	20 97 24	               jsr  pop
.2325	60		               rts
.2326			vicbmpfill
>2326	00		bmphrrow       .byte     $00
>2327	00		bmphrcol       .byte     $00
>2328	00		bmphrmask      .byte     $00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

.2329			scrmaninit
.2329	20 ca 24	               jsr  pushreg        ; Sauvegarde tous les registres
.232c	20 1d 22	               jsr  screendis      ; Disable screen
.232f	a9 06		               lda  #vbleu         ; Place bleue pour la couleur
.2331	8d 21 d0	               sta  vicbackcol     ;   d'arrière plan,
.2334	a9 05		               lda  #vvert         ; vert pour la couleur
.2336	8d 20 d0	               sta  vicbordcol     ;   de la bordure d'écran,
.2339	a9 01		               lda  #vblanc        ;   et blanc pour la couleur du
.233b	8d 86 02	               sta  bascol         ; texte.
.233e	20 49 23	               jsr  cls            ; Efface l'écran.
.2341	20 2a 22	               jsr  screenena      ; enable screen
.2344	20 f9 24	               jsr  popreg         ; Récupère tous les registres.
.2347	60		               rts
>2348	8e		characterset   .byte b_uppercase
.2349			cls
.2349	08		               php                 ; Sauvegarde les registres
.234a	48		               pha                 ;   modifiés.
.234b	a9 93		               lda  #$93           ; Affiche le code basic de
.234d	20 d2 ff	               jsr  chrout         ;   d'effacement d'écran.
.2350	68		               pla                 ; Récupère les registres
.2351	28		               plp                 ;   modifiés.
.2352	60		               rts
.2353			putnch
.2353	20 ca 24	               jsr  pushreg        ; Sauvegarde tous les registres.
.2356	20 d2 ff	again          jsr  chrout         ; On affiche A.
.2359	ca		               dex                 ; Un de moins à faire.
.235a	d0 fa		               bne  again          ; Si pas à 0 on en affiche encore.
.235c	20 f9 24	out            jsr  popreg         ; Récupère tous les registres.
.235f	60		               rts
.2360			putch
.2360	08		               php                 ; Sauvegarde le registre de status.
.2361	20 d2 ff	               jsr  chrout         ; Affiche le caractère de Acc.
.2364	28		               plp                 ; Récupère le registre de status.
.2365	60		               rts
.2366			puts
.2366	20 5c 24	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.2369	86 fb		               stx  zpage1         ; Place l'adresse de la chaine
.236b	84 fc		               sty  zpage1+1       ;   dans ZP1.
.236d	a0 00		               ldy  #0             ; Initialise l'index du mode (ZP),Y
.236f	b1 fb		next           lda  (zpage1),y     ; Lit un charactère.
.2371	f0 09		               beq  exit           ; Si $00 on sort.
.2373	20 d2 ff	               jsr  chrout         ; Affiche le caractères.
.2376	20 b1 25	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.2379	4c 6f 23	               jmp  next           ; Saute chercher le prochain carac.
.237c	20 97 24	exit           jsr  popall         ; Récupère registre, ZP1 et ZP2.
.237f	60		               rts
.2380			gotoxy
.2380	08		               php                 ; Sauvegarde le registre de
.2381	48		               pha                 ;   status et le registre a.
.2382	18		               clc                 ; Carry = 1 pour que kplot
.2383	8a		               txa                 ;   positionne le curseur.
.2384	48		               pha                 ; On inverse X et Y pcq kplot
.2385	98		               tya                 ;
.2386	aa		               tax                 ;   prend X comme la ligne
.2387	68		               pla                 ;
.2388	a8		               tay                 ;   et Y comme la colonne.
.2389	20 f0 ff	               jsr  kplot          ; Positionne le curseur
.238c	68		               pla                 ; Récupère le registre a et
.238d	28		               plp                 ;   le registre de status.
.238e	60		               rts
.238f			cursor
=$0286			bascol    =    $0286               ; debugme
.238f	20 ca 24	               jsr  pushreg        ; Sauvegarde tous les registres.
.2392	90 12		               bcc  restore        ; Si C=0 c'est une récupération.
.2394	20 f0 ff	               jsr  kplot          ; On récupère la position du
.2397	8c b9 23	               sty  cx             ;   curseur et on la sauvegarde
.239a	8e ba 23	               stx  cy             ;   dans les vars locales.
.239d	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.23a0	8d bb 23	               sta  bcol           ; BASIC du texte.
.23a3	4c b5 23	               jmp  out            ; c'est fini on sort.
.23a6	ae ba 23	restore        ldx  cy             ; Comme C=1, On charge x avec
.23a9	ac b9 23	               ldy  cx             ;   la ligne, y ace  la col.
.23ac	20 f0 ff	               jsr  kplot          ; On positionne le curseur.
.23af	ad bb 23	               lda  bcol           ; On replace la couleur par basic
.23b2	8d 86 02	               sta  bascol         ;   sauvegardé.
.23b5	20 f9 24	out            jsr  popreg         ; Récupère tous les registres.
.23b8	60		               rts
>23b9	00		cx   .byte     $00
>23ba	00		cy   .byte     $00
>23bb	00		bcol .byte     $00
.23bc			cursave
.23bc	08		               php
.23bd	38		               sec
.23be	20 8f 23	               jsr  cursor         ; Voir cette fonction plus haut.
.23c1	28		               plp
.23c2	60		               rts
.23c3			curput
.23c3	08		               php
.23c4	18		               clc
.23c5	20 8f 23	               jsr  cursor         ; Voir cette fonction plus haut.
.23c8	28		               plp
.23c9	60		               rts
.23ca			putsxy
.23ca	20 5c 24	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.23cd	86 fb		               stx  zpage1         ; On place la position de la
.23cf	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.23d1	a0 00		               ldy  #$00           ; On charge l'index à 0.
.23d3	b1 fb		               lda  (zpage1),y     ; Charge la coordonné X
.23d5	aa		               tax                 ;   dans X.
.23d6	20 b1 25	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.23d9	b1 fb		               lda  (zpage1),y     ; Charge la coordonnée Y
.23db	a8		               tay                 ; dans Y.
.23dc	20 80 23	               jsr  gotoxy         ; on positionne le curseur.
.23df	20 b1 25	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.23e2	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.23e4	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.23e6	20 66 23	               jsr  puts           ;   l'affiche.
.23e9	20 97 24	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.23ec	60		               rts
>23ed	00 00		straddr   .word     $00
>23ef	00		px        .byte     $00
>23f0	00		py        .byte     $00
>23f1	00 00		zp1       .word     $00
.23f3			putscxy
.23f3	20 5c 24	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.23f6	86 fb		               stx  zpage1         ; On place la position de la
.23f8	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.23fa	a0 00		               ldy  #$00           ; On charge l'index à 0.
.23fc	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.23ff	48		               pha                 ;   actuelle de basic.
.2400	b1 fb		               lda  (zpage1),y     ; On charge le paramètre de
.2402	8d 86 02	               sta  bascol         ;   couleur et le force a Basic.
.2405	20 b1 25	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.2408	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.240a	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.240c	20 ca 23	               jsr  putsxy         ;   l'affiche.
.240f	68		               pla                 ; On replace la couleur basic
.2410	8d 86 02	               sta  bascol         ;   que nous avions sauvegardée.
.2413	20 97 24	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.2416	60		               rts
.2417			putrahex
.2417	20 ca 24	               jsr  pushreg        ; Sauvegarde tous les registres.
.241a	20 ea 26	               jsr  atohex         ; Conversion de a chaîne hexa.
.241d	a2 87		               ldx  #<a2hexstr     ; Charge l'adresse de la chaîne
.241f	a0 26		               ldy  #>a2hexstr     ;   hexa dans $YYXX.
.2421	20 66 23	               jsr  puts           ; Affiche la chaîne.
.2424	20 f9 24	               jsr  popreg         ; Récupère tous les registres.
.2427	60		               rts
.2428			kputrahexxy
.2428			bputrahexxy
.2428			putrahexxy
.2428	08		               php                 ; Sauvegarde le registre de
.2429	48		               pha                 ;   status et le registre a.
.242a	20 ea 26	               jsr  atohex         ; Convertion de a en hexadécimal.
.242d	a2 84		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.242f	a0 26		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.2431	20 ca 23	               jsr  putsxy         ; Positionne et affiche la chaîne.
.2434	68		               pla                 ; Récupère le registre a et
.2435	28		               plp                 ;   le registre de status.
.2436	60		               rts
.2437			putrahexcxy
.2437	20 ca 24	               jsr  pushreg        ; Sauvegarde tous les registres.
.243a	20 ea 26	               jsr  atohex         ; Convertion de a en hexadécimal.
.243d	a2 84		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.243f	a0 26		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.2441	20 ca 23	               jsr  putsxy         ; Colore, positionne et affiche la
.2444	20 f9 24	               jsr  popreg         ; Récupère tous les registres.
.2447	60		               rts
.2448			setinverse
.2448	48		               pha
.2449	a9 12		               lda  #$12
.244b	20 d2 ff	               jsr  chrout
.244e	68		               pla
.244f	60		               rts
.2450			clrinverse
.2450	48		               pha
.2451	a9 92		               lda  #$92
.2453	20 d2 ff	               jsr  chrout
.2456	68		               pla
.2457	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>2458	00		rp        .byte     0
>2459	00		ra        .byte     0
>245a	00 00		pc        .word     0
.245c			pushall
.245c			push
.245c	08		          php            ; stack : flg, pcl, pch
.245d	78		          sei
.245e	8d 59 24	          sta  ra        ; save a
.2461	68		          pla            ; stack : pcl, pch
.2462	8d 58 24	          sta  rp        ; save rp
.2465	68		          pla            ; stack : pch
.2466	8d 5a 24	          sta  pc        ; save pcl
.2469	68		          pla            ; stack : -
.246a	8d 5b 24	          sta  pc+1      ; save pch
.246d	a5 fb		          lda  zpage1    ; get zpage1 low byte
.246f	48		          pha            ; stack : zp1l
.2470	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.2472	48		          pha            ; stack : zp1h, zp1l
.2473	a5 fd		          lda  zpage2    ; get zpage2 low byte
.2475	48		          pha            ; stack : zp2l, zp1h, zp1l
.2476	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.2478	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.2479	ad 58 24	          lda  rp        ; get rp
.247c	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.247d	ad 59 24	          lda  ra        ; get a
.2480	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.2481	8a		          txa            ; get x
.2482	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.2483	98		          tya            ; get y
.2484	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2485	ad 5b 24	          lda  pc+1      ; get pch
.2488	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2489	ad 5a 24	          lda  pc        ; get pcl
.248c	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.248d	ad 58 24	          lda  rp        ; get rp
.2490	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2491	ad 59 24	          lda  ra        ; get a
.2494	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2495	58		          cli
.2496	60		          rts
.2497			pullall
.2497			pull
.2497			popall
.2497			pop
.2497	78		          sei
.2498	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2499	8d 5a 24	          sta  pc        ; save pcl
.249c	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.249d	8d 5b 24	          sta  pc+1      ; save pch
.24a0	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.24a1	a8		          tay            ; set y
.24a2	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.24a3	aa		          tax            ; set x
.24a4	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.24a5	8d 59 24	          sta  ra        ; save a
.24a8	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.24a9	8d 58 24	          sta  rp        ; save rp
.24ac	68		          pla            ; stack : zp2l, zp1h, zp1l
.24ad	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.24af	68		          pla            ; stack : zp1h, zp1l
.24b0	85 fd		          sta  zpage2    ; get zpage2 High byte
.24b2	68		          pla            ; stack : zp1l
.24b3	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.24b5	68		          pla            ; stack :
.24b6	85 fb		          sta  zpage1    ; get zpage1 High byte
.24b8	ad 5b 24	          lda  pc+1      ; get pch
.24bb	48		          pha            ; stack : pch
.24bc	ad 5a 24	          lda  pc
.24bf	48		          pha            ; stack : pcl, pch
.24c0	ad 58 24	          lda  rp        ; get rp
.24c3	48		          pha            ; stack : rp, pcl, pch
.24c4	ad 59 24	          lda  ra        ; set ra
.24c7	58		          cli
.24c8	28		          plp            ; stack : pcl, pch
.24c9	60		          rts
.24ca			pushreg
.24ca	08		          php            ; stack : flg, pcl, pch
.24cb	78		          sei
.24cc	8d 59 24	          sta  ra        ; save a
.24cf	68		          pla            ; stack : pcl, pch
.24d0	8d 58 24	          sta  rp        ; save rp
.24d3	68		          pla            ; stack : pch
.24d4	8d 5a 24	          sta  pc        ; save pcl
.24d7	68		          pla            ; stack : -
.24d8	8d 5b 24	          sta  pc+1      ; save pch
.24db	ad 58 24	          lda  rp        ; get rp
.24de	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.24df	ad 59 24	          lda  ra        ; get a
.24e2	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.24e3	8a		          txa            ; get x
.24e4	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.24e5	98		          tya            ; get y
.24e6	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.24e7	ad 5b 24	          lda  pc+1      ; get pch
.24ea	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.24eb	ad 5a 24	          lda  pc        ; get pcl
.24ee	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.24ef	ad 58 24	          lda  rp        ; get rp
.24f2	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.24f3	ad 59 24	          lda  ra        ; get a
.24f6	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.24f7	58		          cli
.24f8	60		          rts
.24f9			pullreg
.24f9			popreg
.24f9	78		          sei
.24fa	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.24fb	8d 5a 24	          sta  pc        ; save pcl
.24fe	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.24ff	8d 5b 24	          sta  pc+1      ; save pch
.2502	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.2503	a8		          tay            ; set y
.2504	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.2505	aa		          tax            ; set x
.2506	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.2507	8d 59 24	          sta  ra        ; save a
.250a	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.250b	8d 58 24	          sta  rp        ; save rp
.250e	ad 5b 24	          lda  pc+1      ; get pch
.2511	48		          pha            ; stack : pch
.2512	ad 5a 24	          lda  pc
.2515	48		          pha            ; stack : pcl, pch
.2516	ad 58 24	          lda  rp        ; get rp
.2519	48		          pha            ; stack : rp, pcl, pch
.251a	ad 59 24	          lda  ra        ; set ra
.251d	58		          cli
.251e	28		          plp            ; stack : pcl, pch
.251f	60		          rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.2520			blkfill
.2520	20 5c 24	bf0            jsr  push
.2523	20 eb 25	               jsr  savezp1
.2526	84 fc		               sty  zpage1+1
.2528	a0 00		               ldy  #$00
.252a	84 fb		               sty  zpage1
.252c	91 fb		bf1            sta  (zpage1),y
.252e	c8		               iny
.252f	d0 fb		               bne  bf1
.2531	20 fa 25	               jsr  restzp1
.2534	20 97 24	               jsr  pop
.2537	60		               rts
.2538			memfill
.2538	20 5c 24	               jsr  push
.253b	20 20 25	mf1            jsr  blkfill
.253e	c8		               iny
.253f	ca		               dex
.2540	d0 f9		               bne  mf1
.2542	20 97 24	               jsr  pop
.2545	60		               rts
.2546			memmove
.2546	20 5c 24	               jsr  push
.2549	ba		               tsx            ; On se crée un pointeur ...
.254a	8a		               txa
.254b	18		               clc
.254c	69 0b		               adc  #11
.254e	a8		               tay
.254f	a2 06		               ldx  #$06
.2551	b9 00 01	nextbyte       lda  $0100,y
.2554	99 a0 25	               sta  words,y
.2557	c8		               iny
.2558	ca		               dex
.2559	d0 f6		               bne  nextbyte
.255b	ad a0 25	               lda  s
.255e	8d 77 25	               sta  source+1
.2561	ad a1 25	               lda  s+1
.2564	8d 78 25	               sta  source+2
.2567	ad a2 25	               lda  d
.256a	8d 74 25	               sta  destin+1
.256d	ad a3 25	               lda  d+1
.2570	8d 75 25	               sta  destin+2
.2573	ad ff ff	destin         lda  $ffff
.2576	8d ff ff	source         sta  $ffff
.2579	ee 74 25	               inc  destin+1
.257c	d0 03		               bne  src
.257e	ee 75 25	               inc  destin+2
.2581	ee 77 25	src            inc  source+1
.2584	d0 03		               bne  cnt
.2586	ee 78 25	               inc  source+2
.2589	ad a4 25	cnt            lda  compte
.258c	d0 08		               bne  decit
.258e	ad a5 25	               lda  compte+1
.2591	f0 09		               beq  fini
.2593	ce a5 25	               dec  compte+1
.2596	ce a4 25	decit          dec  compte
.2599	4c 73 25	               jmp  destin
.259c	20 97 24	fini           jsr  pop
.259f	60		               rts
.25a0			words
>25a0	00 00		s         .word     $0000
>25a2	00 00		d         .word     $0000
>25a4	00 00		compte    .word     $0000
.25a6			decword
.25a6	20 5c 24	               jsr  push
.25a9	86 fd		               stx  zpage2
.25ab	84 fe		               sty  zpage2+1
.25ad	20 97 24	               jsr  pop
.25b0	60		               rts
.25b1			inczpage1
.25b1			inczp1
.25b1	08		               php
.25b2	48		               pha
.25b3	e6 fb		               inc  zpage1
.25b5	a5 fb		               lda  zpage1
.25b7	d0 02		               bne  nopage
.25b9	e6 fc		               inc  zpage1+1
.25bb	68		nopage         pla
.25bc	28		               plp
.25bd	60		               rts
.25be			deczpage1
.25be			deczp1
.25be	08		               php
.25bf	48		               pha
.25c0	c6 fb		               dec  zpage1
.25c2	a5 fb		               lda  zpage1
.25c4	c9 ff		               cmp  #$ff
.25c6	f0 02		               beq  report
.25c8	d0 02		               bne  nopage
.25ca	c6 fc		report         dec  zpage1+1
.25cc	68		nopage         pla
.25cd	28		               plp
.25ce	60		               rts
.25cf			inczpage2
.25cf			inczp2
.25cf	08		               php
.25d0	48		               pha
.25d1	e6 fd		               inc  zpage2
.25d3	a5 fd		               lda  zpage2
.25d5	d0 02		               bne  nopage
.25d7	e6 fe		               inc  zpage2+1
.25d9	68		nopage         pla
.25da	28		               plp
.25db	60		               rts
.25dc			deczpage2
.25dc			deczp2
.25dc	08		               php
.25dd	c6 fd		               dec  zpage2
.25df	a5 fd		               lda  zpage2
.25e1	c9 ff		               cmp  #$ff
.25e3	f0 02		               beq  report
.25e5	d0 02		               bne  nopage
.25e7	c6 fe		report         dec  zpage2+1
.25e9	28		nopage         plp
.25ea	60		               rts
.25eb			savezp1
.25eb	08		               php
.25ec	48		               pha
.25ed	a5 fb		               lda  zpage1
.25ef	8d 7c 26	               sta  zp1
.25f2	a5 fc		               lda  zpage1+1
.25f4	8d 7d 26	               sta  zp1+1
.25f7	68		               pla
.25f8	28		               plp
.25f9	60		               rts
.25fa			restzp1
.25fa	08		               php
.25fb	48		               pha
.25fc	ad 7c 26	               lda  zp1
.25ff	85 fb		               sta  zpage1
.2601	ad 7d 26	               lda  zp1+1
.2604	85 fc		               sta  zpage1+1
.2606	68		               pla
.2607	28		               plp
.2608	60		               rts
.2609			savezp2
.2609	08		               php
.260a	48		               pha
.260b	a5 fd		               lda  zpage2
.260d	8d 7e 26	               sta  zp2
.2610	a5 fe		               lda  zpage2+1
.2612	8d 7f 26	               sta  zp2+1
.2615	68		               pla
.2616	28		               plp
.2617	60		               rts
.2618			restzp2
.2618	08		               php
.2619	48		               pha
.261a	ad 7e 26	               lda  zp2
.261d	85 fd		               sta  zpage2
.261f	ad 7f 26	               lda  zp2+1
.2622	85 fe		               sta  zpage2+1
.2624	68		               pla
.2625	28		               plp
.2626	60		               rts
.2627			xy2addr
.2627	08		               php
.2628	48		               pha
.2629	8a		               txa
.262a	48		               pha
.262b	98		               tya
.262c	48		               pha
.262d	ad 77 26	               lda  addr1+1
.2630	8d 79 26	               sta  addr2+1
.2633	ad 76 26	               lda  addr1
.2636	8d 78 26	               sta  addr2
.2639	c0 00		               cpy  #$00
.263b	f0 0f		               beq  addx
.263d	18		moreline       clc
.263e	6d 75 26	               adc  ymult
.2641	90 03		               bcc  norepy
.2643	ee 79 26	               inc  addr2+1
.2646	8d 78 26	norepy         sta  addr2
.2649	88		               dey
.264a	d0 f1		               bne  moreline
.264c	8a		addx           txa
.264d	18		               clc
.264e	6d 78 26	               adc  addr2
.2651	90 03		               bcc  thatsit
.2653	ee 79 26	               inc  addr2+1
.2656	8d 78 26	thatsit        sta  addr2
.2659	68		               pla
.265a	a8		               tay
.265b	68		               pla
.265c	aa		               tax
.265d	68		               pla
.265e	28		               plp
.265f	60		               rts
.2660			loop
.2660	ce 80 26	               dec  loopcount
.2663	d0 03		               bne  norep
.2665	ce 81 26	               dec  loopcount+1
.2668	ad 80 26	norep          lda  loopcount
.266b	c9 00		               cmp  #$00
.266d	d0 05		               bne  out
.266f	4d 81 26	               eor  loopcount+1
.2672	c9 ff		               cmp  #$ff
.2674	60		out            rts
>2675	28		ymult          .byte     40
>2676	00 00		addr1          .word     $0000
>2678	00 00		addr2          .word     $0000
>267a	00 00		bytecnt        .word     $0000
>267c	00 00		zp1            .word     $0000
>267e	00 00		zp2            .word     $0000
>2680	00 00		loopcount      .word     $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>2682	01		a2hexcol       .byte     1              ; pour aputscxy
>2683	00		a2hexbkcol     .byte     %00000000
.2684			a2hexpos
>2684	00		a2hexpx        .byte     0              ; pour aputsxy
>2685	00		a2hexpy        .byte     0
>2686	24		a2hexprefix    .byte     "$"            ; pour aputs
>2687	00 00		a2hexstr       .word     $00
>2689	00 00		               .word     $00
>268b	00		               .byte     0              ; 0 end string
>268c	01		abincol        .byte     1
>268d	00		abinbkcol      .byte     %00000000
>268e	30 30 30 30	abin           .null     "00000000"
>2692	30 30 30 30 00
>2697	20 20 20 00	adec           .null     "   "
.269b			putahexfmtxy
.269b	20 5c 24	               jsr  push
.269e	20 ea 26	               jsr  atohex
.26a1	ae 84 26	               ldx  a2hexpx
.26a4	ac 85 26	               ldy  a2hexpy
.26a7	20 80 23	               jsr  gotoxy
.26aa	a2 86		               ldx  #<a2hexprefix
.26ac	a0 26		               ldy  #>a2hexprefix
.26ae	20 66 23	               jsr  puts
.26b1	20 97 24	               jsr  pop
.26b4	60		               rts
.26b5			putahexfmt
.26b5	20 5c 24	               jsr  push
.26b8	20 ea 26	               jsr  atohex
.26bb	a2 86		               ldx  #<a2hexprefix
.26bd	a0 26		               ldy  #>a2hexprefix
.26bf	20 66 23	               jsr  puts
.26c2	20 97 24	               jsr  pop
.26c5	60		               rts
.26c6			putahex
.26c6	20 5c 24	               jsr  push
.26c9	20 ea 26	               jsr  atohex
.26cc	a2 87		               ldx  #<a2hexstr
.26ce	a0 26		               ldy  #>a2hexstr
.26d0	20 66 23	               jsr  puts
.26d3	20 97 24	               jsr  pop
.26d6	60		               rts
.26d7			nibtohex
.26d7	08		               php
.26d8	29 0f		               and  #$0f
.26da	f8		               sed
.26db	18		               clc
.26dc	69 90		               adc  #$90
.26de	69 40		               adc  #$40
.26e0	d8		               cld
.26e1	28		               plp
.26e2	60		               rts
.26e3			lsra4bits
.26e3	08		               php
.26e4	4a		               lsr
.26e5	4a		               lsr
.26e6	4a		               lsr
.26e7	4a		               lsr
.26e8	28		               plp
.26e9	60		               rts
.26ea			atohex
.26ea	08		               php
.26eb	48		               pha
.26ec	48		               pha
.26ed	20 e3 26	               jsr  lsra4bits
.26f0	20 d7 26	               jsr  nibtohex
.26f3	8d 87 26	               sta  a2hexstr
.26f6	68		               pla
.26f7	20 d7 26	               jsr  nibtohex
.26fa	8d 88 26	               sta  a2hexstr+1
.26fd	a9 00		               lda  #$00                ; set end of string
.26ff	8d 89 26	               sta  a2hexstr+2
.2702	68		               pla
.2703	28		               plp
.2704	60		               rts
.2705			xy2hex
.2705	20 5c 24	               jsr  push
.2708	20 ea 26	               jsr  atohex
.270b	8a		               txa
.270c	48		               pha
.270d	20 e3 26	               jsr  lsra4bits
.2710	20 d7 26	               jsr  nibtohex
.2713	8d 87 26	               sta  a2hexstr
.2716	68		               pla
.2717	20 d7 26	               jsr  nibtohex
.271a	8d 88 26	               sta  a2hexstr+1
.271d	98		               tya
.271e	48		               pha
.271f	20 e3 26	               jsr  lsra4bits
.2722	20 d7 26	               jsr  nibtohex
.2725	8d 89 26	               sta  a2hexstr+2
.2728	68		               pla
.2729	20 d7 26	               jsr  nibtohex
.272c	8d 8a 26	               sta  a2hexstr+3
.272f	a9 00		               lda  #$00                ; 0 ended string
.2731	8d 8b 26	               sta  a2hexstr+4
.2734	20 97 24	               jsr  pop
.2737			atobin
.2737	20 5c 24	               jsr  push
.273a	a2 08		               ldx  #8
.273c	a0 00		               ldy  #0
.273e	18		               clc
.273f	2a		nextbit        rol
.2740	48		               pha
.2741	69 00		               adc  #$00
.2743	29 01		               and  #$01
.2745	20 d7 26	               jsr  nibtohex
.2748	99 8e 26	               sta  abin,y
.274b	68		               pla
.274c	c8		               iny
.274d	ca		               dex
.274e	d0 ef		               bne  nextbit
.2750	a9 00		               lda  #0
.2752	99 8e 26	               sta  abin,y
.2755	20 97 24	               jsr  pull
.2758	60		               rts
.2759			abinsetmccol
.2759	20 ca 24	               jsr  pushreg
.275c	20 f9 24	               jsr  popreg
.275f	60		               rts
.2760			putabin
.2760	20 37 27	               jsr     atobin
.2763	20 5c 24	               jsr     push
.2766	a2 8e		               ldx     #<abin
.2768	a0 26		               ldy     #>abin
.276a	20 66 23	               jsr     puts
.276d	20 97 24	               jsr     pop
.2770	60		               rts
.2771			printabin
.2771	20 5c 24	               jsr     push
.2774	a2 8e		               ldx     #<abin
.2776	a0 26		               ldy     #>abin
.2778	20 66 23	               jsr     puts
.277b	20 97 24	               jsr     pop
.277e	60		               rts
.277f			putabinfmt
.277f	08		               php
.2780	48		               pha
.2781	a9 25		               lda     #"%"
.2783	20 60 23	               jsr     putch
.2786	68		               pla
.2787	20 60 27	               jsr     putabin
.278a	28		               plp
.278b	60		               rts
.278c			putabinxy
.278c	20 80 23	               jsr     gotoxy
.278f	20 60 27	               jsr     putabin
.2792	60		               rts
.2793			putabinfmtxy
.2793	20 80 23	               jsr     gotoxy
.2796	20 7f 27	               jsr     putabinfmt
.2799	60		               rts
.279a			atodec
.279a	20 5c 24	               jsr  push
.279d	f8		               sed            ; On se place en mode décimal.
.279e	aa		               tax            ; On déplace a dans x.
.279f	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.27a1	a9 00		               lda  #$00      ; 0 dans A.
.27a3	18		nextbit        clc            ; Bit carry a 0.
.27a4	69 01		               adc  #$01      ; Ajoute 1 a A.
.27a6	90 01		               bcc  decx      ; Pas de carry, pas de report.
.27a8	c8		               iny            ; On incrémente Y
.27a9	ca		decx           dex            ; X=X-1
.27aa	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.27ac	48		               pha            ; A sur le stack.
.27ad	98		               tya            ; Y dans A (MSB)
.27ae	20 d7 26	               jsr  nibtohex  ; a hex petsci ...
.27b1	8d 97 26	               sta  adec      ; ... dans tampon.
.27b4	68		               pla            ; Récupere A
.27b5	48		               pha            ;
.27b6	20 d7 26	               jsr  nibtohex
.27b9	8d 99 26	               sta  adec+2
.27bc	68		               pla
.27bd	6a		               ror
.27be	6a		               ror
.27bf	6a		               ror
.27c0	6a		               ror
.27c1	20 d7 26	               jsr  nibtohex
.27c4	8d 98 26	               sta  adec+1
.27c7	d8		               cld            ; On revient en mode binaire.
.27c8	20 97 24	               jsr  pull
.27cb	60		               rts
.27cc			putadec
.27cc	20 5c 24	               jsr  push
.27cf	20 9a 27	               jsr  atodec
.27d2	a2 97		               ldx  #<adec
.27d4	a0 26		               ldy  #>adec+1
.27d6	20 66 23	               jsr  puts
.27d9	20 97 24	               jsr  pop
.27dc	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

.27dd			waitstop
.27dd	20 5c 24	               jsr  push
.27e0	20 ed f6	wait           jsr  k_stop
.27e3	d0 fb		               bne  wait
.27e5	20 97 24	               jsr  pop
.27e8	60		               rts
.27e9			anykey
.27e9	08		               php
.27ea	48		               pha
.27eb	a5 cb		nokey          lda 203
.27ed	c9 40		               cmp #64
.27ef	f0 fa		               beq nokey
.27f1	20 fb 27	               jsr releasekey
.27f4	a9 00		               lda #0
.27f6	85 c6		               sta 198
.27f8	68		               pla
.27f9	28		               plp
.27fa	60		               rts
.27fb			releasekey
.27fb	08		               php
.27fc	48		               pha
.27fd	a5 cb		keypressed     lda 203
.27ff	c9 40		               cmp #64
.2801	d0 fa		               bne keypressed
.2803	68		               pla
.2804	28		               plp
.2805	60		               rts
.2806			getkey
.2806	20 e4 ff	gkagain        jsr  getin
.2809	c9 00		               cmp  #0
.280b	f0 f9		               beq  gkagain
.280d	60		               rts
.280e			kbflushbuff
.280e	08		               php
.280f	48		               pha
.2810	20 e4 ff	again          jsr  getin
.2813	c9 00		               cmp  #0
.2815	d0 f9		               bne  again
.2817	68		               pla
.2818	28		               plp
.2819	60		               rts
.281a			waitkey
.281a	20 5c 24	               jsr  push
.281d	8d 6b 28	               sta  thekey
.2820	20 e4 ff	nope           jsr  getin
.2823	20 d2 ff	               jsr  chrout
.2826	cd 6b 28	               cmp  thekey
.2829	d0 f5		               bne  nope
.282b	20 d2 ff	               jsr  chrout
.282e	20 97 24	               jsr  pop
.2831	60		               rts
.2832			waitspace
.2832	20 5c 24	               jsr  push
.2835	a9 7f		wait           lda  #$7f  ;%01111111
.2837	8d 00 dc	               sta  $dc00
.283a	ad 01 dc	               lda  $dc01
.283d	29 10		               and  #$10  ;mask %00010000
.283f	d0 f4		               bne  wait
.2841	20 97 24	               jsr  pop
.2844			waitsstop
.2844	20 5c 24	               jsr  push
.2847	20 ed f6	wait           jsr  k_stop  ;%01111111
.284a	d0 fb		               bne  wait
.284c	20 97 24	               jsr  pop
.284f			waitreturn
.284f	20 5c 24	               jsr  push
.2852	ad 6c 28	               lda  thecount
.2855	8d 00 04	               sta  scrnram
.2858	a9 02		               lda  #$02
.285a	8d 00 d8	               sta  colorram
.285d	20 e4 ff	nope           jsr  getin
.2860	c9 0d		nohex          cmp  #$0d
.2862	d0 f9		               bne  nope
.2864	ee 6c 28	               inc  thecount
.2867	20 97 24	               jsr  pop
.286a	60		               rts
>286b	00		thekey         .byte   0
>286c	01		thecount       .byte   $01
>286d	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>2871	00 00 00 00 00 00 00 00 00 0d 00 00
>287d	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>2881	00 00 00 00 00 00 00 00 00 00 00 00
>288d	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>2891	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>289d	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>28a1	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>28ad	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>28b1	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>28bd	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>28c1	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>28cd	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>28d1	00 00 00 00 00 00 00 00 00 00 00 00
>28dd	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>28e1	00 00 00 00 00 00 00 00 00 00 00 00
>28ed	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>28f1	00 00 00 00 00 00 00 00 00 00 00 00
>28fd	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>2901	00 00 00 00 00 00 00 00 00 00 00 00
>290d	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>2911	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>291d	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>2921	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>292d	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>2931	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>293d	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>2941	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>294d	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>2951	00 00 00 00 00 00 00 00 00 00 00 00
>295d	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>2961	00 00 00 00 00 00 00 00 00 00 00 00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-disk.asm

.296d			diskerror
.296d	20 5c 24	               jsr  push
.2970	ad 50 2b	               lda  dsk_dev   ; Select device 8
.2973	85 ba		               sta  $ba       ;
.2975	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.2978	a9 6f		               lda  #$6f
.297a	85 b9		               sta  $b9       ;
.297c	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.297f	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.2982	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.2985	c9 0d		               cmp  #$0d      ; Is it CR ?
.2987	d0 f6		               bne  nextchar  ; No, get next char
.2989	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.298c	20 97 24	               jsr  pop
.298f	60		               rts
.2990			diskdir
.2990	20 5c 24	               jsr  push
.2993	a9 24		               lda  #$24      ; L012C - Filename is "$"
.2995	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.2997	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.2999	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.299b	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.299d	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.299f	a9 01		               lda  #$01      ; L0138 - set ...
.29a1	85 b7		               sta  $b7       ; L013A - ... length of current filename
.29a3	ad 50 2b	               lda  dsk_dev   ; L013C - set 8 as ...
.29a6	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.29a8	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.29aa	85 b9		               sta  $b9       ; L0142 - ... secondary address
.29ac	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.29af	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...%10111010
.29b1	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.29b4	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.29b6	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.29b9	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.29bb	85 90		               sta  $90       ; L0153 - ... kernal status word.
.29bd	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.29bf	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.29c1	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.29c4	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.29c6	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.29c8	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.29ca	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.29cd	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.29cf	d0 28		               bne  exit      ; L0167
.29d1	a4 fb		               ldy  $fb       ; L0169
.29d3	88		               dey            ; L016b
.29d4	d0 e9		               bne  loop1     ; L016C - If not last, loop
.29d6	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.29d8	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.29db	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.29dd	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.29e0	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.29e3	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.29e5	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.29e7	aa		               tax            ; L017F - tfr a in x
.29e8	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.29ea	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.29ed	4c e0 29	               jmp  loop3     ; L0185 - get another byte
.29f0	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.29f2	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.29f5	a0 02		               ldy  #$02      ; L018D - set Y to 2
.29f7	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.29f9	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.29fc	20 97 24	               jsr  pop
.29ff	60		               rts            ; L0194
.2a00			directory
.2a00	20 90 29	               jsr  diskdir
.2a03	20 6d 29	               jsr  diskerror
.2a06	60		               rts
.2a07			memtofile
.2a07	20 2a 2b	               jsr  dsk_putmesg
.2a0a	20 5c 24	               jsr  push
.2a0d	ad 54 2b	               lda  dsk_fnlen
.2a10	ae 52 2b	               ldx  dsk_fnptr      ; load fname addr. lbyte
.2a13	ac 53 2b	               ldy  dsk_fnptr+1
.2a16	20 bd ff	               jsr  setnam         ; call setnam
.2a19	ad 51 2b	               lda  dsk_lfsno
.2a1c	ae 50 2b	               ldx  dsk_dev        ; specified device
.2a1f	a0 00		skip           ldy  #$00
.2a21	20 ba ff	               jsr  setlfs         ; call setlfs
.2a24	ad 4c 2b	               lda  dsk_data_s     ; put data start lbyte in stal
.2a27	85 c1		               sta  stal
.2a29	ad 4d 2b	               lda  dsk_data_s+1   ; put data start hbyte in stal
.2a2c	85 c2		               sta  stal+1
.2a2e	ae 4e 2b	               ldx  dsk_data_e     ; put data end lbyte in x
.2a31	ac 4f 2b	               ldy  dsk_data_e+1   ; put data end hbyte in y
.2a34	a9 c1		               lda  #stal          ; start address located in $c1/$c2
.2a36	20 d8 ff	               jsr  save           ; call save
.2a39	90 00		               bcc  noerror        ; if carry set, a load error has happened
.2a3b	20 97 24	noerror        jsr  pop
.2a3e	60		               rts
.2a3f			filetomem
.2a3f	20 5c 24	               jsr push
.2a42	ad 54 2b	               lda dsk_fnlen  ; Loads filename lenght.
.2a45	ae 52 2b	               ldx dsk_fnptr  ; Points x and y to the filename
.2a48	ac 53 2b	               ldy dsk_fnptr+1;pointer
.2a4b	20 bd ff	               jsr setnam     ; call setnam
.2a4e	ad 51 2b	               lda dsk_lfsno  ; Loads Acc with the logical file number
.2a51	ae 50 2b	               ldx dsk_dev    ; default to device 8
.2a54	a0 01		               ldy #$01       ; not $01 means: load to address stored in file
.2a56	20 ba ff	               jsr setlfs     ; call setlfs
.2a59	a9 00		               lda #$00       ; $00 means: load to memory (not verify)
.2a5b	20 d5 ff	               jsr load       ; call load
.2a5e	90 03		               bcc noerror      ; if carry set, a load error has happened
.2a60	20 67 2a	               jsr  error
.2a63	20 97 24	noerror        jsr pop
.2a66	60		               rts
.2a67			error
.2a67	20 5c 24	               jsr  push
.2a6a	c9 01		isit01         cmp  #$01
.2a6c	d0 07		               bne  isit02
.2a6e	a2 bb		               ldx  #<dsk_emsg01
.2a70	a0 2a		               ldy  #>dsk_emsg01
.2a72	4c ac 2a	               jmp  printerror
.2a75	c9 02		isit02         cmp  #$02
.2a77	d0 07		               bne  isit05
.2a79	a2 cf		               ldx  #<dsk_emsg02
.2a7b	a0 2a		               ldy  #>dsk_emsg02
.2a7d	4c ac 2a	               jmp  printerror
.2a80	c9 05		isit05         cmp  #$05
.2a82	d0 07		               bne  isit04
.2a84	a2 e2		               ldx  #<dsk_emsg05
.2a86	a0 2a		               ldy  #>dsk_emsg05
.2a88	4c ac 2a	               jmp  printerror
.2a8b	c9 04		isit04         cmp  #$04
.2a8d	d0 07		               bne  isit1d
.2a8f	a2 f2		               ldx  #<dsk_emsg04
.2a91	a0 2a		               ldy  #>dsk_emsg04
.2a93	4c ac 2a	               jmp  printerror
.2a96	c9 1d		isit1d         cmp  #$1d
.2a98	d0 07		               bne  isit00
.2a9a	a2 07		               ldx  #<dsk_emsg1d
.2a9c	a0 2b		               ldy  #>dsk_emsg1d
.2a9e	4c ac 2a	               jmp  printerror
.2aa1	c9 00		isit00         cmp  #$00
.2aa3	d0 0a		               bne  noerror
.2aa5	a2 1d		               ldx  #<dsk_emsg00
.2aa7	a0 2b		               ldy  #>dsk_emsg00
.2aa9	4c ac 2a	               jmp  printerror
.2aac	20 66 23	printerror     jsr  puts
.2aaf	20 97 24	noerror        jsr  pop
.2ab2	60		               rts
>2ab3	8d		dsk_msg1       .byte     141
>2ab4	53 55 43 43	               .null     "succes"
>2ab8	45 53 00
>2abb	8d		dsk_emsg01     .byte     141
>2abc	46 49 43 48	               .null     "fichier non ouvert"
>2ac0	49 45 52 20 4e 4f 4e 20 4f 55 56 45 52 54 00
>2acf	11		dsk_emsg02     .byte     17
>2ad0	45 52 52 45	               .null     "erreur d'ecriture"
>2ad4	55 52 20 44 27 45 43 52 49 54 55 52 45 00
>2ae2	11		dsk_emsg05     .byte     17
>2ae3	4c 45 43 54	               .null     "lecteur absent"
>2ae7	45 55 52 20 41 42 53 45 4e 54 00
>2af2	11		dsk_emsg04     .byte     17
>2af3	46 49 43 48	               .null     "fichier introuvable"
>2af7	49 45 52 20 49 4e 54 52 4f 55 56 41 42 4c 45 00
>2b07	11		dsk_emsg1d     .byte     17
>2b08	45 52 52 45	               .null     "erreur de chargement"
>2b0c	55 52 20 44 45 20 43 48 41 52 47 45 4d 45 4e 54
>2b1c	00
>2b1d	11		dsk_emsg00     .byte     17
>2b1e	42 52 45 41	               .null     "break error"
>2b22	4b 20 45 52 52 4f 52 00
.2b2a			dsk_putmesg
.2b2a	20 5c 24	               jsr push
.2b2d	a2 55		               ldx #<dsk_msg0
.2b2f	a0 2b		               ldy #>dsk_msg0
.2b31	20 66 23	               jsr puts
.2b34	a9 20		               lda #$20
.2b36	20 60 23	               jsr putch
.2b39	ae 52 2b	               ldx dsk_fnptr
.2b3c	ac 53 2b	               ldy dsk_fnptr+1
.2b3f	20 66 23	               jsr puts
.2b42	ad 51 2b	               lda dsk_lfsno
.2b45	20 c3 ff	               jsr close
.2b48	20 97 24	               jsr pop
.2b4b	60		               rts
>2b4c	00 00		dsk_data_s     .word     $0000     ; Data start example addresses
>2b4e	00 20		dsk_data_e     .word     $2000     ; Data end
>2b50	08		dsk_dev        .byte     $08       ; Device number
>2b51	00		dsk_lfsno      .byte     $00       ; Logical file number
>2b52	00 00		dsk_fnptr      .word     $00       ; Pointer to filename
>2b54	00		dsk_fnlen      .byte     0         ; Number of character in filename.
>2b55	8d		dsk_msg0       .byte     141       ; Miscilinaous file message.
>2b56	53 41 56 49	               .null     "saving "
>2b5a	4e 47 20 00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-std-showregs.asm

.2b5e			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
.2b5e	08		               php                 ; Sauvegarde le registre de status sur stack.
.2b5f	8d 59 2d	               sta  rega           ; Sauvegarde Acc en mémoire.
.2b62	68		               pla                 ; Récupère le registre de status du stack.
.2b63	8d 5c 2d	               sta  regp           ; Sauvegarde le registre de status en mémoire.
.2b66	8e 5a 2d	               stx  regx           ; Sauvegarde le registre X en mémoire.
.2b69	8c 5b 2d	               sty  regy           ; Sauvegarde le registre Y en mémoire.
.2b6c	ba		               tsx                 ; Copie le registre S dans X.
.2b6d	8e 5d 2d	               stx  regs           ; Sauvegarde le registre S en mémoire.
.2b70	68		               pla                 ; Récupère le MSB de l'adresse de retour ...
.2b71	8d 5f 2d	               sta  regpcl         ; ... et le sauvegarde en mémoire ...
.2b74	8d 61 2d	               sta  regpcl2        ; ... une seconde fois.
.2b77	68		               pla                 ; Récupère le LSB de l'adresse de retour ...
.2b78	8d 5e 2d	               sta  regpch         ; ... et le sauvegarde en mémoire ...
.2b7b	8d 60 2d	               sta  regpch2        ; ... une seconde fois.
.2b7e	ad 59 2d	               lda  rega           ; On commence par le registre Acc.
.2b81	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.2b82	20 d7 26	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.2b85	8d f6 2c	               sta  vala+1         ; ... et le place dans la chaine.
.2b88	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.2b89	20 e3 26	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.2b8c	20 d7 26	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.2b8f	8d f5 2c	               sta  vala           ; ... et le place dans la chaine.
.2b92	ad 5b 2d	               lda  regy           ; Ensuite, le registre Y.
.2b95	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.2b96	20 d7 26	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.2b99	8d 0d 2d	               sta  valy+1         ; ... et le place dans la chaine.
.2b9c	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.2b9d	20 e3 26	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.2ba0	20 d7 26	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.2ba3	8d 0c 2d	               sta  valy           ; ... et le place dans la chaine.
.2ba6	ad 5a 2d	               lda  regx           ; Ensuite, le registre X.
.2ba9	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.2baa	20 d7 26	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.2bad	8d 01 2d	               sta  valx+1         ; ... et le place dans la chaine.
.2bb0	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.2bb1	20 e3 26	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.2bb4	20 d7 26	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.2bb7	8d 00 2d	               sta  valx           ; ... et le place dans la chaine.
.2bba	ad 5c 2d	               lda  regp           ; Ensuite, le registre de status.
.2bbd	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.2bbe	20 d7 26	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.2bc1	8d 18 2d	               sta  valp+1         ; ... et le place dans la chaine.
.2bc4	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.2bc5	20 e3 26	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.2bc8	20 d7 26	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.2bcb	8d 17 2d	               sta  valp           ; ... et le place dans la chaine.
.2bce	ad 5d 2d	               lda  regs           ; Ensuite, le pointeur de stack.
.2bd1	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.2bd2	20 d7 26	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.2bd5	8d 23 2d	               sta  vals+1         ; ... et le place dans la chaine.
.2bd8	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.2bd9	20 e3 26	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.2bdc	20 d7 26	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.2bdf	8d 22 2d	               sta  vals           ; ... et le place dans la chaine.
.2be2	38		               sec                 ; Prépade le ADC en plaçant 0 dans Carry.
.2be3	ad 61 2d	               lda  regpcl2        ; On charge la LSB de l'adresse de retour.
.2be6	69 00		               adc  #$00           ; On y ajoute 1.
.2be8	90 03		               bcc  noreport       ; Si pas de Carry on ne fait pas de report.
.2bea	ee 60 2d	               inc  regpch2        ; ... en incrémentant le MSB.
.2bed	8d 61 2d	noreport       sta  regpcl2        ; On le sauvegarde.
.2bf0	ad 61 2d	               lda  regpcl2        ; On récupère la partie basse du compteur.
.2bf3	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.2bf4	20 d7 26	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.2bf7	8d 33 2d	               sta  valpcl+1       ; ... et lace le code à la position "---X".
.2bfa	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.2bfb	20 e3 26	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.2bfe	20 d7 26	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.2c01	8d 32 2d	               sta  valpcl         ; ... et lace le code à la position "--X-".
.2c04	ad 60 2d	               lda regpch2         ; On récupère la partie haute du compteur.
.2c07	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.2c08	20 d7 26	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.2c0b	8d 31 2d	               sta  valpch+1       ; ... et lace le code à la position "-X--".
.2c0e	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.2c0f	20 e3 26	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.2c12	20 d7 26	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.2c15	8d 30 2d	               sta  valpch         ; ... et lace le code à la position "X---".
.2c18	a5 fb		               lda  zpage1         ; On charge le LSB de ZP1 ($fb).
.2c1a	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.2c1b	20 d7 26	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.2c1e	8d 44 2d	               sta  valz1l+1       ; ... et lace le code à la position "---X".
.2c21	68		               pla
.2c22	20 e3 26	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.2c25	20 d7 26	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.2c28	8d 43 2d	               sta  valz1l         ; ... et lace le code à la position "--X-".
.2c2b	a5 fc		               lda  zpage1+1         ; On charge le MSB de ZP1 ($fc).
.2c2d	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.2c2e	20 d7 26	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.2c31	8d 42 2d	               sta  valz1h+1       ; ... et lace le code à la position "-X--".
.2c34	68		               pla
.2c35	20 e3 26	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.2c38	20 d7 26	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.2c3b	8d 41 2d	               sta  valz1h         ; ... et lace le code à la position "X---".
.2c3e	a5 fd		               lda  zpage2         ; On charge le LSB de ZP2 ($fd).
.2c40	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.2c41	20 d7 26	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.2c44	8d 55 2d	               sta  valz2l+1       ; ... et lace le code à la position "---X".
.2c47	68		               pla
.2c48	20 e3 26	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.2c4b	20 d7 26	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.2c4e	8d 54 2d	               sta  valz2l         ; ... et lace le code à la position "--X-".
.2c51	a5 fe		               lda  zpage2+1       ; On charge le MSB de ZP2 ($fc).
.2c53	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.2c54	20 d7 26	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.2c57	8d 53 2d	               sta  valz2h+1       ; ... et lace le code à la position "-X--".
.2c5a	68		               pla
.2c5b	20 e3 26	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.2c5e	20 d7 26	               jsr  nibtohex
.2c61	8d 52 2d	               sta  valz2h         ; ... et lace le code à la position "X---".
.2c64	20 48 24	               jsr  setinverse     ; On se place en mode inverse vidéo.
.2c67	20 ca 24	               jsr  pushreg
.2c6a	a2 ed		               ldx  #<srega
.2c6c	a0 2c		               ldy  #>srega
.2c6e	20 f3 23	               jsr  putscxy
.2c71	20 f9 24	               jsr  popreg
.2c74	20 ca 24	               jsr  pushreg
.2c77	a2 f9		               ldx  #<sregx
.2c79	a0 2c		               ldy  #>sregx
.2c7b	20 f3 23	               jsr  putscxy
.2c7e	20 f9 24	               jsr  popreg
.2c81	20 ca 24	               jsr  pushreg
.2c84	a2 04		               ldx  #<sregy
.2c86	a0 2d		               ldy  #>sregy
.2c88	20 f3 23	               jsr  putscxy
.2c8b	20 f9 24	               jsr  popreg
.2c8e	20 ca 24	               jsr  pushreg
.2c91	a2 10		               ldx  #<sregp
.2c93	a0 2d		               ldy  #>sregp
.2c95	20 f3 23	               jsr  putscxy
.2c98	20 f9 24	               jsr  popreg
.2c9b	20 ca 24	               jsr  pushreg
.2c9e	a2 1b		               ldx  #<sregs
.2ca0	a0 2d		               ldy  #>sregs
.2ca2	20 f3 23	               jsr  putscxy
.2ca5	20 f9 24	               jsr  popreg
.2ca8	20 ca 24	               jsr  pushreg
.2cab	a2 27		               ldx  #<sregpc
.2cad	a0 2d		               ldy  #>sregpc
.2caf	20 f3 23	               jsr  putscxy
.2cb2	20 f9 24	               jsr  popreg
.2cb5	20 ca 24	               jsr  pushreg
.2cb8	a2 37		               ldx  #<sregz1
.2cba	a0 2d		               ldy  #>sregz1
.2cbc	20 f3 23	               jsr  putscxy
.2cbf	20 f9 24	               jsr  popreg
.2cc2	20 ca 24	               jsr  pushreg
.2cc5	a2 48		               ldx  #<sregz2
.2cc7	a0 2d		               ldy  #>sregz2
.2cc9	20 f3 23	               jsr  putscxy
.2ccc	20 f9 24	               jsr  popreg
.2ccf	20 50 24	               jsr  clrinverse     ; On quitte le mode inverse vidéo.
.2cd2	ad 5e 2d	               lda  regpch         ; On replace ls MSB l'adresse de retour ...
.2cd5	48		               pha                 ; ... à la bonne position sur la pile.
.2cd6	ad 5f 2d	               lda  regpcl         ; On replace ls LSB l'adresse de retour ...
.2cd9	48		               pha                 ; ... à la bonne position sur la pile.
.2cda	ae 5d 2d	               ldx  regs           ; On replace tous les registre à leurs ...
.2cdd	9a		               txs                 ; ...
.2cde	ac 5b 2d	               ldy  regy           ; ...
.2ce1	ae 5a 2d	               ldx  regx           ; ...
.2ce4	ad 5c 2d	               lda  regp           ; ...
.2ce7	48		               pha                 ; ...
.2ce8	ad 59 2d	               lda  rega           ; ...
.2ceb	28		               plp                 ; ... valeurs initiales
.2cec	60		               rts
>2ced	07 01 17	srega   .byte   cyellow,coln+1,line
>2cf0	20 20 41 3a	        .text   '  a:$' ;4,24
>2cf4	24
>2cf5	00 00 20 00	vala    .byte   0,0,32,0
>2cf9	03 09 17	sregx   .byte   ccyan,coln+9,line
>2cfc	20 58 3a 24	        .text   ' x:$' ;4,24
>2d00	00 00 20 00	valx    .byte   0,0,32,0
>2d04	0d 10 17	sregy   .byte   clightgreen,coln+16,line
>2d07	20 59 3a 20	        .text   ' y: $' ;4,24
>2d0b	24
>2d0c	00 00 20 00	valy    .byte   0,0,32,0
>2d10	08 18 17	sregp   .byte   corange,coln+24,line
>2d13	20 50 3a 24	        .text   ' p:$' ;4,24
>2d17	00 00 20 00	valp    .byte   0,0,32,0
>2d1b	0a 1f 17	sregs   .byte   clightred,coln+31,line
>2d1e	20 53 3a 24	        .text   ' s:$' ;4,24
>2d22	00 00 20 20	vals    .byte   0,0,32,32,0
>2d26	00
>2d27	0e 01 18 20	sregpc  .byte   clightblue,coln+1,line+1,32
>2d2b	20 50 43 3a	        .text   ' pc:$' ;4,24
>2d2f	24
>2d30	00 00		valpch  .byte   0,0
>2d32	00 00 20 20	valpcl  .byte   0,0,32,32,0
>2d36	00
>2d37	04 0d 18 20	sregz1  .byte   cpurple,coln+13,line+1,32
>2d3b	20 5a 50 31	        .text   ' zp1:$' ;4,24
>2d3f	3a 24
>2d41	00 00		valz1h  .byte   0,0
>2d43	00 00 20 20	valz1l  .byte   0,0,32,32,0
>2d47	00
>2d48	0f 1a 18 20	sregz2  .byte   clightgray,coln+26,line+1,32
>2d4c	20 5a 50 32	        .text   ' zp2:$' ;4,24
>2d50	3a 24
>2d52	00 00		valz2h  .byte   0,0
>2d54	00 00 20 20	valz2l  .byte   0,0,32,32,0
>2d58	00
>2d59	00		rega    .byte   0
>2d5a	00		regx    .byte   0
>2d5b	00		regy    .byte   0
>2d5c	00		regp    .byte   0
>2d5d	00		regs    .byte   0
>2d5e	00		regpch  .byte   0
>2d5f	00		regpcl  .byte   0
>2d60	00		regpch2 .byte   0
>2d61	00		regpcl2 .byte   0
>2d62	00		vzp1h   .byte   0
>2d63	00		vzp1l   .byte   0
>2d64	00		vzp2h   .byte   0
>2d65	00		vzp2l   .byte   0

;******  Return to file: charedit.asm


;******  End of listing

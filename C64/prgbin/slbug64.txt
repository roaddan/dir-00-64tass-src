
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L slbug64.txt -o slbug64.prg slbug64.asm
; Thu Sep 25 18:18:00 2025

;Offset	;Hex		;Source

;******  Processing input file: slbug64.asm

="20250924-000001"	                Version = "20250924-000001"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1          .word bcmd2         ;Adresse de la commande basic suivante.
>0803	01 00		               .word 1             ;Numero de la ligne Basic.
>0805	8f		               .byte $8F           ;Le token de la commande REM du Basic
>0806	2a 50 52 4f	               .text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2          .word bcmd3         ;Adresse de la commande basic suivante.
>082b	02 00		               .word 2             ;Numero de la ligne Basic.
>082d	8f		               .byte $8F           ;Le token de la commande REM du Basic
>082e	2a 50 41 52	               .text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3          .word bcmd4         ;Adresse de la commande basic suivante.
>0846	03 00		               .word 3             ;Numero de la ligne Basic.
>0848	9e		               .byte $9e           ;Le token de la commande SYS du Basic
>0849	30 32 31 32	               .text format("%05d",hpgmstart)
>084d	39
>084e	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4          .word $0000         ;L'adresse de la commande Basic suivante.
.0851	20 55 08	hpgmstart     jsr   main           ; Le programme principale doit s'appeler "main"
.0854	60		              rts                  ; ... doit se rerminer par un RTS.

;******  Return to file: slbug64.asm

.0855			main
.0855	20 62 12	               jsr  scrmaninit
.0858	08		               php
.0859	48		               pha
.085a	a9 0e		               lda  #14
.085c	20 d2 ff	               jsr  $ffd2
.085f	68		               pla
.0860	28		               plp
.0861	08		               php
.0862	48		               pha
.0863	a9 08		               lda  #$08
.0865	20 d2 ff	               jsr  $ffd2
.0868	68		               pla
.0869	28		               plp
.086a	a9 05		               lda  #cvert
.086c	8d 20 d0	               sta  vicbordcol
.086f	a9 06		               lda  #cbleu
.0871	8d 21 d0	               sta  vicbackcol
.0874	a9 01		               lda  #cblanc
.0876	8d 86 02	               sta  bascol
.0879	20 82 12	               jsr  cls
.087c	20 01 0b	               jsr  help
.087f	20 22 17	               jsr  anykey
.0882	20 96 08	               jsr  slbug64
.0885	20 03 14	               jsr  pushreg
.0888	a2 00		               ldx  #0
.088a	a0 00		               ldy  #0
.088c	20 b9 12	               jsr  gotoxy
.088f	20 32 14	               jsr  popreg
.0892	20 22 17	               jsr  anykey
.0895	60		               rts
.0896			slbug64
.0896	08		                php
.0897	48		                pha
.0898	ad 21 d0	                lda vicbackcol
.089b	48		                pha
.089c	a9 00		                lda #cnoir
.089e	8d 21 d0	                sta vicbackcol
.08a1	8d 20 d0	                sta vicbordcol
.08a4	20 a6 18	                jsr showregs
.08a7	20 22 17	                jsr anykey
.08aa	68		                pla
.08ab	20 03 14	               jsr  pushreg
.08ae	a2 00		               ldx  #0
.08b0	a0 00		               ldy  #0
.08b2	20 b9 12	               jsr  gotoxy
.08b5	20 32 14	               jsr  popreg
.08b8	20 03 14	               jsr  pushreg
.08bb	48		               pha
.08bc	a9 05		               lda  #cvert
.08be	8d 20 d0	               sta  $d020
.08c1	68		               pla
.08c2	48		               pha
.08c3	a9 06		               lda  #cbleu
.08c5	8d 21 d0	               sta  $d021
.08c8	68		               pla
.08c9	48		               pha
.08ca	a9 01		               lda  #cblanc
.08cc	8d 86 02	               sta  bascol
.08cf	68		               pla
.08d0	20 32 14	               jsr  popreg
.08d3	08		            php
.08d4	48		            pha
.08d5	a9 01		            lda #1
.08d7	8d 75 1b	            sta drawbox_top
.08da	8d 79 1b	            sta drawbox_curline
.08dd	a9 01		            lda #1
.08df	8d 76 1b	            sta drawbox_left
.08e2	a9 17		            lda #23
.08e4	8d 77 1b	            sta drawbox_width
.08e7	a9 08		            lda #8
.08e9	8d 78 1b	            sta drawbox_height
.08ec	a9 11		            lda #cnoir+$10+1
.08ee	8d 7a 1b	            sta drawbox_colour
.08f1	68		            pla
.08f2	28		            plp
.08f3	20 52 1b	            jsr db_drawbox
.08f6	20 03 14	                jsr  pushreg
.08f9	ad 86 02	                lda  bascol
.08fc	48		                pha
.08fd	a9 11		                lda  #cnoir+$10+1
.08ff	8d 86 02	                sta  bascol
.0902	a0 02		                ldy  #1+1
.0904	a2 01		                ldx  #1
.0906	18		                clc
.0907	20 f0 ff	                jsr  plot
.090a	a2 bd		                ldx  #<titre
.090c	a0 10		                ldy  #>titre
.090e	20 9f 12	                jsr  puts
.0911	68		                pla
.0912	8d 86 02	                sta  bascol
.0915	20 32 14	                jsr  popreg
.0918	08		            php
.0919	48		            pha
.091a	a9 03		            lda #3
.091c	8d 75 1b	            sta drawbox_top
.091f	8d 79 1b	            sta drawbox_curline
.0922	a9 03		            lda #3
.0924	8d 76 1b	            sta drawbox_left
.0927	a9 17		            lda #23
.0929	8d 77 1b	            sta drawbox_width
.092c	a9 08		            lda #8
.092e	8d 78 1b	            sta drawbox_height
.0931	a9 13		            lda #cnoir+$10+3
.0933	8d 7a 1b	            sta drawbox_colour
.0936	68		            pla
.0937	28		            plp
.0938	20 52 1b	            jsr db_drawbox
.093b	20 03 14	                jsr  pushreg
.093e	ad 86 02	                lda  bascol
.0941	48		                pha
.0942	a9 13		                lda  #cnoir+$10+3
.0944	8d 86 02	                sta  bascol
.0947	a0 04		                ldy  #3+1
.0949	a2 03		                ldx  #3
.094b	18		                clc
.094c	20 f0 ff	                jsr  plot
.094f	a2 bd		                ldx  #<titre
.0951	a0 10		                ldy  #>titre
.0953	20 9f 12	                jsr  puts
.0956	68		                pla
.0957	8d 86 02	                sta  bascol
.095a	20 32 14	                jsr  popreg
.095d	08		            php
.095e	48		            pha
.095f	a9 05		            lda #5
.0961	8d 75 1b	            sta drawbox_top
.0964	8d 79 1b	            sta drawbox_curline
.0967	a9 05		            lda #5
.0969	8d 76 1b	            sta drawbox_left
.096c	a9 17		            lda #23
.096e	8d 77 1b	            sta drawbox_width
.0971	a9 08		            lda #8
.0973	8d 78 1b	            sta drawbox_height
.0976	a9 15		            lda #cnoir+$10+5
.0978	8d 7a 1b	            sta drawbox_colour
.097b	68		            pla
.097c	28		            plp
.097d	20 52 1b	            jsr db_drawbox
.0980	20 03 14	                jsr  pushreg
.0983	ad 86 02	                lda  bascol
.0986	48		                pha
.0987	a9 15		                lda  #cnoir+$10+5
.0989	8d 86 02	                sta  bascol
.098c	a0 06		                ldy  #5+1
.098e	a2 05		                ldx  #5
.0990	18		                clc
.0991	20 f0 ff	                jsr  plot
.0994	a2 bd		                ldx  #<titre
.0996	a0 10		                ldy  #>titre
.0998	20 9f 12	                jsr  puts
.099b	68		                pla
.099c	8d 86 02	                sta  bascol
.099f	20 32 14	                jsr  popreg
.09a2	08		            php
.09a3	48		            pha
.09a4	a9 07		            lda #7
.09a6	8d 75 1b	            sta drawbox_top
.09a9	8d 79 1b	            sta drawbox_curline
.09ac	a9 07		            lda #7
.09ae	8d 76 1b	            sta drawbox_left
.09b1	a9 17		            lda #23
.09b3	8d 77 1b	            sta drawbox_width
.09b6	a9 08		            lda #8
.09b8	8d 78 1b	            sta drawbox_height
.09bb	a9 17		            lda #cnoir+$10+7
.09bd	8d 7a 1b	            sta drawbox_colour
.09c0	68		            pla
.09c1	28		            plp
.09c2	20 52 1b	            jsr db_drawbox
.09c5	20 03 14	                jsr  pushreg
.09c8	ad 86 02	                lda  bascol
.09cb	48		                pha
.09cc	a9 17		                lda  #cnoir+$10+7
.09ce	8d 86 02	                sta  bascol
.09d1	a0 08		                ldy  #7+1
.09d3	a2 07		                ldx  #7
.09d5	18		                clc
.09d6	20 f0 ff	                jsr  plot
.09d9	a2 bd		                ldx  #<titre
.09db	a0 10		                ldy  #>titre
.09dd	20 9f 12	                jsr  puts
.09e0	68		                pla
.09e1	8d 86 02	                sta  bascol
.09e4	20 32 14	                jsr  popreg
.09e7	08		            php
.09e8	48		            pha
.09e9	a9 09		            lda #9
.09eb	8d 75 1b	            sta drawbox_top
.09ee	8d 79 1b	            sta drawbox_curline
.09f1	a9 09		            lda #9
.09f3	8d 76 1b	            sta drawbox_left
.09f6	a9 17		            lda #23
.09f8	8d 77 1b	            sta drawbox_width
.09fb	a9 08		            lda #8
.09fd	8d 78 1b	            sta drawbox_height
.0a00	a9 19		            lda #cnoir+$10+9
.0a02	8d 7a 1b	            sta drawbox_colour
.0a05	68		            pla
.0a06	28		            plp
.0a07	20 52 1b	            jsr db_drawbox
.0a0a	20 03 14	                jsr  pushreg
.0a0d	ad 86 02	                lda  bascol
.0a10	48		                pha
.0a11	a9 19		                lda  #cnoir+$10+9
.0a13	8d 86 02	                sta  bascol
.0a16	a0 0a		                ldy  #9+1
.0a18	a2 09		                ldx  #9
.0a1a	18		                clc
.0a1b	20 f0 ff	                jsr  plot
.0a1e	a2 bd		                ldx  #<titre
.0a20	a0 10		                ldy  #>titre
.0a22	20 9f 12	                jsr  puts
.0a25	68		                pla
.0a26	8d 86 02	                sta  bascol
.0a29	20 32 14	                jsr  popreg
.0a2c	08		            php
.0a2d	48		            pha
.0a2e	a9 0b		            lda #11
.0a30	8d 75 1b	            sta drawbox_top
.0a33	8d 79 1b	            sta drawbox_curline
.0a36	a9 0b		            lda #11
.0a38	8d 76 1b	            sta drawbox_left
.0a3b	a9 17		            lda #23
.0a3d	8d 77 1b	            sta drawbox_width
.0a40	a9 08		            lda #8
.0a42	8d 78 1b	            sta drawbox_height
.0a45	a9 1b		            lda #cnoir+$10+11
.0a47	8d 7a 1b	            sta drawbox_colour
.0a4a	68		            pla
.0a4b	28		            plp
.0a4c	20 52 1b	            jsr db_drawbox
.0a4f	20 03 14	                jsr  pushreg
.0a52	ad 86 02	                lda  bascol
.0a55	48		                pha
.0a56	a9 1b		                lda  #cnoir+$10+11
.0a58	8d 86 02	                sta  bascol
.0a5b	a0 0c		                ldy  #11+1
.0a5d	a2 0b		                ldx  #11
.0a5f	18		                clc
.0a60	20 f0 ff	                jsr  plot
.0a63	a2 bd		                ldx  #<titre
.0a65	a0 10		                ldy  #>titre
.0a67	20 9f 12	                jsr  puts
.0a6a	68		                pla
.0a6b	8d 86 02	                sta  bascol
.0a6e	20 32 14	                jsr  popreg
.0a71	08		            php
.0a72	48		            pha
.0a73	a9 0d		            lda #13
.0a75	8d 75 1b	            sta drawbox_top
.0a78	8d 79 1b	            sta drawbox_curline
.0a7b	a9 0d		            lda #13
.0a7d	8d 76 1b	            sta drawbox_left
.0a80	a9 17		            lda #23
.0a82	8d 77 1b	            sta drawbox_width
.0a85	a9 08		            lda #8
.0a87	8d 78 1b	            sta drawbox_height
.0a8a	a9 1d		            lda #cnoir+$10+13
.0a8c	8d 7a 1b	            sta drawbox_colour
.0a8f	68		            pla
.0a90	28		            plp
.0a91	20 52 1b	            jsr db_drawbox
.0a94	20 03 14	                jsr  pushreg
.0a97	ad 86 02	                lda  bascol
.0a9a	48		                pha
.0a9b	a9 1d		                lda  #cnoir+$10+13
.0a9d	8d 86 02	                sta  bascol
.0aa0	a0 0e		                ldy  #13+1
.0aa2	a2 0d		                ldx  #13
.0aa4	18		                clc
.0aa5	20 f0 ff	                jsr  plot
.0aa8	a2 bd		                ldx  #<titre
.0aaa	a0 10		                ldy  #>titre
.0aac	20 9f 12	                jsr  puts
.0aaf	68		                pla
.0ab0	8d 86 02	                sta  bascol
.0ab3	20 32 14	                jsr  popreg
.0ab6	08		            php
.0ab7	48		            pha
.0ab8	a9 0f		            lda #15
.0aba	8d 75 1b	            sta drawbox_top
.0abd	8d 79 1b	            sta drawbox_curline
.0ac0	a9 0f		            lda #15
.0ac2	8d 76 1b	            sta drawbox_left
.0ac5	a9 17		            lda #23
.0ac7	8d 77 1b	            sta drawbox_width
.0aca	a9 08		            lda #8
.0acc	8d 78 1b	            sta drawbox_height
.0acf	a9 1f		            lda #cnoir+$10+15
.0ad1	8d 7a 1b	            sta drawbox_colour
.0ad4	68		            pla
.0ad5	28		            plp
.0ad6	20 52 1b	            jsr db_drawbox
.0ad9	20 03 14	                jsr  pushreg
.0adc	ad 86 02	                lda  bascol
.0adf	48		                pha
.0ae0	a9 1f		                lda  #cnoir+$10+15
.0ae2	8d 86 02	                sta  bascol
.0ae5	a0 10		                ldy  #15+1
.0ae7	a2 0f		                ldx  #15
.0ae9	18		                clc
.0aea	20 f0 ff	                jsr  plot
.0aed	a2 bd		                ldx  #<titre
.0aef	a0 10		                ldy  #>titre
.0af1	20 9f 12	                jsr  puts
.0af4	68		                pla
.0af5	8d 86 02	                sta  bascol
.0af8	20 32 14	                jsr  popreg
.0afb	20 a6 18	                jsr showregs
.0afe	68		                pla
.0aff	28		                plp
.0b00	60		                rts
.0b01			help
=4			left = 4
=3			top = 3
=$7			color = cjaune
.0b01	20 95 13	                jsr pushall
.0b04	20 82 12	                jsr cls
.0b07	a9 0d		                lda #$0d
.0b09	20 99 12	                jsr putch
.0b0c	20 99 12	                jsr putch
.0b0f	20 99 12	                jsr putch
.0b12	20 99 12	                jsr putch
.0b15	a9 12		                lda #b_rvs_on
.0b17	20 99 12	                jsr putch
.0b1a	20 03 14	                jsr  pushreg
.0b1d	ad 86 02	                lda  bascol
.0b20	48		                pha
.0b21	a9 07		                lda  #color
.0b23	8d 86 02	                sta  bascol
.0b26	a0 04		                ldy  #left
.0b28	a2 03		                ldx  #top+0
.0b2a	18		                clc
.0b2b	20 f0 ff	                jsr  plot
.0b2e	a2 ca		                ldx  #<tline
.0b30	a0 10		                ldy  #>tline
.0b32	20 9f 12	                jsr  puts
.0b35	68		                pla
.0b36	8d 86 02	                sta  bascol
.0b39	20 32 14	                jsr  popreg
.0b3c	20 03 14	                jsr  pushreg
.0b3f	ad 86 02	                lda  bascol
.0b42	48		                pha
.0b43	a9 07		                lda  #color
.0b45	8d 86 02	                sta  bascol
.0b48	a0 05		                ldy  #left+1
.0b4a	a2 03		                ldx  #top+0
.0b4c	18		                clc
.0b4d	20 f0 ff	                jsr  plot
.0b50	a2 63		                ldx  #<texta
.0b52	a0 0f		                ldy  #>texta
.0b54	20 9f 12	                jsr  puts
.0b57	68		                pla
.0b58	8d 86 02	                sta  bascol
.0b5b	20 32 14	                jsr  popreg
.0b5e	20 03 14	                jsr  pushreg
.0b61	ad 86 02	                lda  bascol
.0b64	48		                pha
.0b65	a9 07		                lda  #color
.0b67	8d 86 02	                sta  bascol
.0b6a	a0 04		                ldy  #left
.0b6c	a2 04		                ldx  #top+1
.0b6e	18		                clc
.0b6f	20 f0 ff	                jsr  plot
.0b72	a2 2d		                ldx  #<eline
.0b74	a0 11		                ldy  #>eline
.0b76	20 9f 12	                jsr  puts
.0b79	68		                pla
.0b7a	8d 86 02	                sta  bascol
.0b7d	20 32 14	                jsr  popreg
.0b80	20 03 14	                jsr  pushreg
.0b83	ad 86 02	                lda  bascol
.0b86	48		                pha
.0b87	a9 07		                lda  #color
.0b89	8d 86 02	                sta  bascol
.0b8c	a0 04		                ldy  #left
.0b8e	a2 05		                ldx  #top+2
.0b90	18		                clc
.0b91	20 f0 ff	                jsr  plot
.0b94	a2 2d		                ldx  #<eline
.0b96	a0 11		                ldy  #>eline
.0b98	20 9f 12	                jsr  puts
.0b9b	68		                pla
.0b9c	8d 86 02	                sta  bascol
.0b9f	20 32 14	                jsr  popreg
.0ba2	20 03 14	                jsr  pushreg
.0ba5	ad 86 02	                lda  bascol
.0ba8	48		                pha
.0ba9	a9 07		                lda  #color
.0bab	8d 86 02	                sta  bascol
.0bae	a0 05		                ldy  #left+1
.0bb0	a2 05		                ldx  #top+2
.0bb2	18		                clc
.0bb3	20 f0 ff	                jsr  plot
.0bb6	a2 7e		                ldx  #<textb
.0bb8	a0 0f		                ldy  #>textb
.0bba	20 9f 12	                jsr  puts
.0bbd	68		                pla
.0bbe	8d 86 02	                sta  bascol
.0bc1	20 32 14	                jsr  popreg
.0bc4	20 03 14	                jsr  pushreg
.0bc7	ad 86 02	                lda  bascol
.0bca	48		                pha
.0bcb	a9 07		                lda  #color
.0bcd	8d 86 02	                sta  bascol
.0bd0	a0 04		                ldy  #left
.0bd2	a2 06		                ldx  #top+3
.0bd4	18		                clc
.0bd5	20 f0 ff	                jsr  plot
.0bd8	a2 2d		                ldx  #<eline
.0bda	a0 11		                ldy  #>eline
.0bdc	20 9f 12	                jsr  puts
.0bdf	68		                pla
.0be0	8d 86 02	                sta  bascol
.0be3	20 32 14	                jsr  popreg
.0be6	20 03 14	                jsr  pushreg
.0be9	ad 86 02	                lda  bascol
.0bec	48		                pha
.0bed	a9 07		                lda  #color
.0bef	8d 86 02	                sta  bascol
.0bf2	a0 05		                ldy  #left+1
.0bf4	a2 06		                ldx  #top+3
.0bf6	18		                clc
.0bf7	20 f0 ff	                jsr  plot
.0bfa	a2 19		                ldx  #<textg
.0bfc	a0 10		                ldy  #>textg
.0bfe	20 9f 12	                jsr  puts
.0c01	68		                pla
.0c02	8d 86 02	                sta  bascol
.0c05	20 32 14	                jsr  popreg
.0c08	20 03 14	                jsr  pushreg
.0c0b	ad 86 02	                lda  bascol
.0c0e	48		                pha
.0c0f	a9 07		                lda  #color
.0c11	8d 86 02	                sta  bascol
.0c14	a0 04		                ldy  #left
.0c16	a2 07		                ldx  #top+4
.0c18	18		                clc
.0c19	20 f0 ff	                jsr  plot
.0c1c	a2 2d		                ldx  #<eline
.0c1e	a0 11		                ldy  #>eline
.0c20	20 9f 12	                jsr  puts
.0c23	68		                pla
.0c24	8d 86 02	                sta  bascol
.0c27	20 32 14	                jsr  popreg
.0c2a	20 03 14	                jsr  pushreg
.0c2d	ad 86 02	                lda  bascol
.0c30	48		                pha
.0c31	a9 07		                lda  #color
.0c33	8d 86 02	                sta  bascol
.0c36	a0 04		                ldy  #left
.0c38	a2 07		                ldx  #top+4
.0c3a	18		                clc
.0c3b	20 f0 ff	                jsr  plot
.0c3e	a2 2d		                ldx  #<eline
.0c40	a0 11		                ldy  #>eline
.0c42	20 9f 12	                jsr  puts
.0c45	68		                pla
.0c46	8d 86 02	                sta  bascol
.0c49	20 32 14	                jsr  popreg
.0c4c	20 03 14	                jsr  pushreg
.0c4f	ad 86 02	                lda  bascol
.0c52	48		                pha
.0c53	a9 07		                lda  #color
.0c55	8d 86 02	                sta  bascol
.0c58	a0 04		                ldy  #left
.0c5a	a2 08		                ldx  #top+5
.0c5c	18		                clc
.0c5d	20 f0 ff	                jsr  plot
.0c60	a2 2d		                ldx  #<eline
.0c62	a0 11		                ldy  #>eline
.0c64	20 9f 12	                jsr  puts
.0c67	68		                pla
.0c68	8d 86 02	                sta  bascol
.0c6b	20 32 14	                jsr  popreg
.0c6e	20 03 14	                jsr  pushreg
.0c71	ad 86 02	                lda  bascol
.0c74	48		                pha
.0c75	a9 07		                lda  #color
.0c77	8d 86 02	                sta  bascol
.0c7a	a0 05		                ldy  #left+1
.0c7c	a2 08		                ldx  #top+5
.0c7e	18		                clc
.0c7f	20 f0 ff	                jsr  plot
.0c82	a2 9d		                ldx  #<textc
.0c84	a0 0f		                ldy  #>textc
.0c86	20 9f 12	                jsr  puts
.0c89	68		                pla
.0c8a	8d 86 02	                sta  bascol
.0c8d	20 32 14	                jsr  popreg
.0c90	20 03 14	                jsr  pushreg
.0c93	ad 86 02	                lda  bascol
.0c96	48		                pha
.0c97	a9 07		                lda  #color
.0c99	8d 86 02	                sta  bascol
.0c9c	a0 04		                ldy  #left
.0c9e	a2 09		                ldx  #top+6
.0ca0	18		                clc
.0ca1	20 f0 ff	                jsr  plot
.0ca4	a2 2d		                ldx  #<eline
.0ca6	a0 11		                ldy  #>eline
.0ca8	20 9f 12	                jsr  puts
.0cab	68		                pla
.0cac	8d 86 02	                sta  bascol
.0caf	20 32 14	                jsr  popreg
.0cb2	20 03 14	                jsr  pushreg
.0cb5	ad 86 02	                lda  bascol
.0cb8	48		                pha
.0cb9	a9 07		                lda  #color
.0cbb	8d 86 02	                sta  bascol
.0cbe	a0 05		                ldy  #left+1
.0cc0	a2 09		                ldx  #top+6
.0cc2	18		                clc
.0cc3	20 f0 ff	                jsr  plot
.0cc6	a2 bc		                ldx  #<textd
.0cc8	a0 0f		                ldy  #>textd
.0cca	20 9f 12	                jsr  puts
.0ccd	68		                pla
.0cce	8d 86 02	                sta  bascol
.0cd1	20 32 14	                jsr  popreg
.0cd4	20 03 14	                jsr  pushreg
.0cd7	ad 86 02	                lda  bascol
.0cda	48		                pha
.0cdb	a9 07		                lda  #color
.0cdd	8d 86 02	                sta  bascol
.0ce0	a0 04		                ldy  #left
.0ce2	a2 0a		                ldx  #top+7
.0ce4	18		                clc
.0ce5	20 f0 ff	                jsr  plot
.0ce8	a2 2d		                ldx  #<eline
.0cea	a0 11		                ldy  #>eline
.0cec	20 9f 12	                jsr  puts
.0cef	68		                pla
.0cf0	8d 86 02	                sta  bascol
.0cf3	20 32 14	                jsr  popreg
.0cf6	20 03 14	                jsr  pushreg
.0cf9	ad 86 02	                lda  bascol
.0cfc	48		                pha
.0cfd	a9 07		                lda  #color
.0cff	8d 86 02	                sta  bascol
.0d02	a0 04		                ldy  #left
.0d04	a2 0b		                ldx  #top+8
.0d06	18		                clc
.0d07	20 f0 ff	                jsr  plot
.0d0a	a2 2d		                ldx  #<eline
.0d0c	a0 11		                ldy  #>eline
.0d0e	20 9f 12	                jsr  puts
.0d11	68		                pla
.0d12	8d 86 02	                sta  bascol
.0d15	20 32 14	                jsr  popreg
.0d18	20 03 14	                jsr  pushreg
.0d1b	ad 86 02	                lda  bascol
.0d1e	48		                pha
.0d1f	a9 07		                lda  #color
.0d21	8d 86 02	                sta  bascol
.0d24	a0 05		                ldy  #left+1
.0d26	a2 0b		                ldx  #top+8
.0d28	18		                clc
.0d29	20 f0 ff	                jsr  plot
.0d2c	a2 db		                ldx  #<texte
.0d2e	a0 0f		                ldy  #>texte
.0d30	20 9f 12	                jsr  puts
.0d33	68		                pla
.0d34	8d 86 02	                sta  bascol
.0d37	20 32 14	                jsr  popreg
.0d3a	20 03 14	                jsr  pushreg
.0d3d	ad 86 02	                lda  bascol
.0d40	48		                pha
.0d41	a9 07		                lda  #color
.0d43	8d 86 02	                sta  bascol
.0d46	a0 04		                ldy  #left
.0d48	a2 0c		                ldx  #top+9
.0d4a	18		                clc
.0d4b	20 f0 ff	                jsr  plot
.0d4e	a2 2d		                ldx  #<eline
.0d50	a0 11		                ldy  #>eline
.0d52	20 9f 12	                jsr  puts
.0d55	68		                pla
.0d56	8d 86 02	                sta  bascol
.0d59	20 32 14	                jsr  popreg
.0d5c	20 03 14	                jsr  pushreg
.0d5f	ad 86 02	                lda  bascol
.0d62	48		                pha
.0d63	a9 07		                lda  #color
.0d65	8d 86 02	                sta  bascol
.0d68	a0 05		                ldy  #left+1
.0d6a	a2 0c		                ldx  #top+9
.0d6c	18		                clc
.0d6d	20 f0 ff	                jsr  plot
.0d70	a2 fa		                ldx  #<textf
.0d72	a0 0f		                ldy  #>textf
.0d74	20 9f 12	                jsr  puts
.0d77	68		                pla
.0d78	8d 86 02	                sta  bascol
.0d7b	20 32 14	                jsr  popreg
.0d7e	20 03 14	                jsr  pushreg
.0d81	ad 86 02	                lda  bascol
.0d84	48		                pha
.0d85	a9 07		                lda  #color
.0d87	8d 86 02	                sta  bascol
.0d8a	a0 04		                ldy  #left
.0d8c	a2 0d		                ldx  #top+10
.0d8e	18		                clc
.0d8f	20 f0 ff	                jsr  plot
.0d92	a2 2d		                ldx  #<eline
.0d94	a0 11		                ldy  #>eline
.0d96	20 9f 12	                jsr  puts
.0d99	68		                pla
.0d9a	8d 86 02	                sta  bascol
.0d9d	20 32 14	                jsr  popreg
.0da0	20 03 14	                jsr  pushreg
.0da3	ad 86 02	                lda  bascol
.0da6	48		                pha
.0da7	a9 07		                lda  #color
.0da9	8d 86 02	                sta  bascol
.0dac	a0 04		                ldy  #left
.0dae	a2 0e		                ldx  #top+11
.0db0	18		                clc
.0db1	20 f0 ff	                jsr  plot
.0db4	a2 0c		                ldx  #<bline
.0db6	a0 11		                ldy  #>bline
.0db8	20 9f 12	                jsr  puts
.0dbb	68		                pla
.0dbc	8d 86 02	                sta  bascol
.0dbf	20 32 14	                jsr  popreg
.0dc2	20 03 14	                jsr  pushreg
.0dc5	ad 86 02	                lda  bascol
.0dc8	48		                pha
.0dc9	a9 07		                lda  #color
.0dcb	8d 86 02	                sta  bascol
.0dce	a0 04		                ldy  #left
.0dd0	a2 10		                ldx  #top+13
.0dd2	18		                clc
.0dd3	20 f0 ff	                jsr  plot
.0dd6	a2 ca		                ldx  #<tline
.0dd8	a0 10		                ldy  #>tline
.0dda	20 9f 12	                jsr  puts
.0ddd	68		                pla
.0dde	8d 86 02	                sta  bascol
.0de1	20 32 14	                jsr  popreg
.0de4	20 03 14	                jsr  pushreg
.0de7	ad 86 02	                lda  bascol
.0dea	48		                pha
.0deb	a9 07		                lda  #color
.0ded	8d 86 02	                sta  bascol
.0df0	a0 05		                ldy  #left+1
.0df2	a2 10		                ldx  #top+13
.0df4	18		                clc
.0df5	20 f0 ff	                jsr  plot
.0df8	a2 38		                ldx  #<texth
.0dfa	a0 10		                ldy  #>texth
.0dfc	20 9f 12	                jsr  puts
.0dff	68		                pla
.0e00	8d 86 02	                sta  bascol
.0e03	20 32 14	                jsr  popreg
.0e06	20 03 14	                jsr  pushreg
.0e09	ad 86 02	                lda  bascol
.0e0c	48		                pha
.0e0d	a9 07		                lda  #color
.0e0f	8d 86 02	                sta  bascol
.0e12	a0 04		                ldy  #left
.0e14	a2 11		                ldx  #top+14
.0e16	18		                clc
.0e17	20 f0 ff	                jsr  plot
.0e1a	a2 2d		                ldx  #<eline
.0e1c	a0 11		                ldy  #>eline
.0e1e	20 9f 12	                jsr  puts
.0e21	68		                pla
.0e22	8d 86 02	                sta  bascol
.0e25	20 32 14	                jsr  popreg
.0e28	20 03 14	                jsr  pushreg
.0e2b	ad 86 02	                lda  bascol
.0e2e	48		                pha
.0e2f	a9 07		                lda  #color
.0e31	8d 86 02	                sta  bascol
.0e34	a0 04		                ldy  #left
.0e36	a2 12		                ldx  #top+15
.0e38	18		                clc
.0e39	20 f0 ff	                jsr  plot
.0e3c	a2 2d		                ldx  #<eline
.0e3e	a0 11		                ldy  #>eline
.0e40	20 9f 12	                jsr  puts
.0e43	68		                pla
.0e44	8d 86 02	                sta  bascol
.0e47	20 32 14	                jsr  popreg
.0e4a	20 03 14	                jsr  pushreg
.0e4d	ad 86 02	                lda  bascol
.0e50	48		                pha
.0e51	a9 07		                lda  #color
.0e53	8d 86 02	                sta  bascol
.0e56	a0 05		                ldy  #left+1
.0e58	a2 12		                ldx  #top+15
.0e5a	18		                clc
.0e5b	20 f0 ff	                jsr  plot
.0e5e	a2 47		                ldx  #<texti
.0e60	a0 10		                ldy  #>texti
.0e62	20 9f 12	                jsr  puts
.0e65	68		                pla
.0e66	8d 86 02	                sta  bascol
.0e69	20 32 14	                jsr  popreg
.0e6c	20 03 14	                jsr  pushreg
.0e6f	ad 86 02	                lda  bascol
.0e72	48		                pha
.0e73	a9 07		                lda  #color
.0e75	8d 86 02	                sta  bascol
.0e78	a0 04		                ldy  #left
.0e7a	a2 13		                ldx  #top+16
.0e7c	18		                clc
.0e7d	20 f0 ff	                jsr  plot
.0e80	a2 2d		                ldx  #<eline
.0e82	a0 11		                ldy  #>eline
.0e84	20 9f 12	                jsr  puts
.0e87	68		                pla
.0e88	8d 86 02	                sta  bascol
.0e8b	20 32 14	                jsr  popreg
.0e8e	20 03 14	                jsr  pushreg
.0e91	ad 86 02	                lda  bascol
.0e94	48		                pha
.0e95	a9 07		                lda  #color
.0e97	8d 86 02	                sta  bascol
.0e9a	a0 05		                ldy  #left+1
.0e9c	a2 13		                ldx  #top+16
.0e9e	18		                clc
.0e9f	20 f0 ff	                jsr  plot
.0ea2	a2 66		                ldx  #<textj
.0ea4	a0 10		                ldy  #>textj
.0ea6	20 9f 12	                jsr  puts
.0ea9	68		                pla
.0eaa	8d 86 02	                sta  bascol
.0ead	20 32 14	                jsr  popreg
.0eb0	20 03 14	                jsr  pushreg
.0eb3	ad 86 02	                lda  bascol
.0eb6	48		                pha
.0eb7	a9 07		                lda  #color
.0eb9	8d 86 02	                sta  bascol
.0ebc	a0 04		                ldy  #left
.0ebe	a2 14		                ldx  #top+17
.0ec0	18		                clc
.0ec1	20 f0 ff	                jsr  plot
.0ec4	a2 2d		                ldx  #<eline
.0ec6	a0 11		                ldy  #>eline
.0ec8	20 9f 12	                jsr  puts
.0ecb	68		                pla
.0ecc	8d 86 02	                sta  bascol
.0ecf	20 32 14	                jsr  popreg
.0ed2	20 03 14	                jsr  pushreg
.0ed5	ad 86 02	                lda  bascol
.0ed8	48		                pha
.0ed9	a9 07		                lda  #color
.0edb	8d 86 02	                sta  bascol
.0ede	a0 05		                ldy  #left+1
.0ee0	a2 14		                ldx  #top+17
.0ee2	18		                clc
.0ee3	20 f0 ff	                jsr  plot
.0ee6	a2 85		                ldx  #<textk
.0ee8	a0 10		                ldy  #>textk
.0eea	20 9f 12	                jsr  puts
.0eed	68		                pla
.0eee	8d 86 02	                sta  bascol
.0ef1	20 32 14	                jsr  popreg
.0ef4	20 03 14	                jsr  pushreg
.0ef7	ad 86 02	                lda  bascol
.0efa	48		                pha
.0efb	a9 07		                lda  #color
.0efd	8d 86 02	                sta  bascol
.0f00	a0 04		                ldy  #left
.0f02	a2 15		                ldx  #top+18
.0f04	18		                clc
.0f05	20 f0 ff	                jsr  plot
.0f08	a2 0c		                ldx  #<bline
.0f0a	a0 11		                ldy  #>bline
.0f0c	20 9f 12	                jsr  puts
.0f0f	68		                pla
.0f10	8d 86 02	                sta  bascol
.0f13	20 32 14	                jsr  popreg
.0f16	a9 92		                lda #b_rvs_off
.0f18	20 99 12	                jsr putch
.0f1b	20 03 14	                jsr  pushreg
.0f1e	ad 86 02	                lda  bascol
.0f21	48		                pha
.0f22	a9 01		                lda  #cblanc
.0f24	8d 86 02	                sta  bascol
.0f27	a0 0f		                ldy  #39-24
.0f29	a2 18		                ldx  #24
.0f2b	18		                clc
.0f2c	20 f0 ff	                jsr  plot
.0f2f	a2 a4		                ldx  #<textl
.0f31	a0 10		                ldy  #>textl
.0f33	20 9f 12	                jsr  puts
.0f36	68		                pla
.0f37	8d 86 02	                sta  bascol
.0f3a	20 32 14	                jsr  popreg
.0f3d	20 d0 13	                jsr popall
.0f40	60		                rts

;******  Processing file: chaines_fr.asm

=158			headtcol        =   b_jaune
=158			normtcol        =   b_jaune
>0f41	00		nextline        .byte   0
>0f42	20 20 20 20	line            .null           "                                "
>0f46	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0f56	20 20 20 20 20 20 20 20 20 20 20 20 00
>0f63	92		texta           .byte           b_rvs_off
>0f64	20 d3 cc 2d	                .text           " SL-BUG 64 Version 4.00 "
>0f68	c2 d5 c7 20 36 34 20 d6 45 52 53 49 4f 4e 20 34
>0f78	2e 30 30 20
>0f7c	12 00		                .byte           b_rvs_on,0
>0f7e	20 20 20 20	textb           .null           "       Pour Commodore 64      "
>0f82	20 20 20 d0 4f 55 52 20 c3 4f 4d 4d 4f 44 4f 52
>0f92	45 20 36 34 20 20 20 20 20 20 00
>0f9d	20 20 c9 44	textc           .null           "  Idee Originale sur MC-6809  "
>0fa1	45 45 20 cf 52 49 47 49 4e 41 4c 45 20 53 55 52
>0fb1	20 cd c3 2d 36 38 30 39 20 20 00
>0fbc	20 20 d0 41	textd           .null           "  Par Serge Leblanc mai 1994  "
>0fc0	52 20 d3 45 52 47 45 20 cc 45 42 4c 41 4e 43 20
>0fd0	4d 41 49 20 31 39 39 34 20 20 00
>0fdb	20 d0 4f 52	texte           .null           " Port sur C64 Daniel Lafrance "
>0fdf	54 20 53 55 52 20 c3 36 34 20 c4 41 4e 49 45 4c
>0fef	20 cc 41 46 52 41 4e 43 45 20 00
>0ffa	20 20 20 20	textf           .null           "      (c) Septembre 2025      "
>0ffe	20 20 28 43 29 20 d3 45 50 54 45 4d 42 52 45 20
>100e	32 30 32 35 20 20 20 20 20 20 00
>1019	20 20 20 d6	textg           .null   format( "   Version: %-17s ",Version)
>101d	45 52 53 49 4f 4e 3a 20 32 30 32 35 30 39 32 34
>102d	2d 30 30 30 30 30 31 20 20 20 00
>1038	92		texth           .byte           b_rvs_off
>1039	20 d2 c1 c3	                .text           " RACCOURCIS "
>103d	c3 cf d5 d2 c3 c9 d3 20
>1045	12 00		                .byte           b_rvs_on,0
>1047	20 c5 58 45	texti           .null   format( " Execution.: SYS%5d ($%4X) ",slbug64,slbug64)
>104b	43 55 54 49 4f 4e 2e 3a 20 d3 d9 d3 20 32 31 39
>105b	38 20 28 24 20 38 39 36 29 20 00
>1066	20 c1 49 44	textj           .null   format( " Aide......: SYS%5d ($%4X) ",help,help)
>106a	45 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 32 38 31
>107a	37 20 28 24 20 c2 30 31 29 20 00
>1085	20 c3 cc d3	textk           .null   format( " CLS.......: SYS%5d ($%4X) ",cls,cls)
>1089	2e 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 34 37 33
>1099	38 20 28 24 31 32 38 32 29 20 00
>10a4	d5 4e 45 20	textl           .null           "Une clef pour continuer!"
>10a8	43 4c 45 46 20 50 4f 55 52 20 43 4f 4e 54 49 4e
>10b8	55 45 52 21 00
>10bd	d7 49 4e 44	titre           .null   "Window Title"
>10c1	4f 57 20 d4 49 54 4c 45 00
>10ca	b0 c0 c0 c0	tline   .byte   176,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,174,0
>10ce	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>10de	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 ae 00
>10eb	ab c0 c0 c0	mline   .byte   171,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,179,0
>10ef	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>10ff	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 b3 00
>110c	ad c0 c0 c0	bline   .byte   173,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,189,0
>1110	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>1120	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 bd 00
>112d	dd 20 20 20	eline   .byte   221,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,221,0
>1131	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1141	20 20 20 20 20 20 20 20 20 20 20 dd 00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d000			chargen        =    $d000
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>114e	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>1152	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms=$e1d4  ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk=$ed09    ; Send Talk command to serial bus.
=$ed0c			slisten=$ed0c  ; Send LISTEN command to serial bus.
=$ed40			sflush=$ed40   ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2=$edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2=$edb9  ; Send TALK secondary addressto serial bus.
=$eddd			sbout=$eddd    ; Write byte to serial bus.
=$edef			sutalk=$edef   ; Send UNTalk command to serial bus.
=$edfe			sulisten=$edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh=$ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow=$ee8e  ; Set CLOCK OUT to low
=$ee97			sdathigh=$ee97 ; Set DATA OUT to High
=$eea0			sdatlow=$eea0  ; Set DATA OUT to low
=$eea9			sclkdta=$eea9  ; Read CLOCK IN and DATA IN.
=$f1ad			sbread=$f1ad   ; Read one byte from serial port.
=$f237			sstdin=$F237   ; Define serial bus as standard input; do not send TALK
=$f279			sstdout=$F279  ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen=$F3D5   ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose=$F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose=$F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose=$F642  ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout=$FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr=$ffa5    ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin=$ffc6    ; jmp ($031e) Define an input channel.
=$ffc9			chkout=$ffc9   ; jmp ($0320) Define an output channel.
=$ffcf			chrin=$ffcf    ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout=$ffd2   ; jmp ($0326) Output a character
=$ff81			cint=$ff81     ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout=$ffa8    ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall=$ffe7    ; jmp ($032c) Close all open files
=$ffc3			close=$ffc3    ; jmp ($031c) Close a logical file
=$ffcc			clrchn=$ffcc   ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin=$ffe4    ; jmp ($032a) Get a character.
=$fff3			iobase=$fff3   ; jmp $e500 Define i/o memory page
=$ff84			ioinit=$ff84   ; ($fda3) Initialize i/o devices.
=$ffb1			listen=$ffb1   ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load=$ffd5     ; jmp $f4e9 Load device to RAM.
=$ff9c			membot=$ff9c   ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop=$ff99   ; jmp $fe25 Get/Set top of ram
=$ffc0			open=$ffc0     ; jmp ($031a) Open a logical file
=$fff0			plot=$fff0     ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas=$ff87   ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim=$ffde    ; jmp $f6dd Read system clock
=$ffb7			readst=$ffb7   ; jmp $fe07 Read i/o status word
=$ff8a			restor=$ff8a   ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save=$ffd8     ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey=$ff9f   ; jmp $ea87 Scan the keyboard
=$ffed			screen=$ffed   ; jmp $e505 Return screen format
=$ff93			second=$ff93   ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs=$ffba   ; jmp $fe00 Set up a logical file
=$ff90			setmsg=$ff90   ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam=$ffbd   ; jmp $fdf9 Set up file name
=$ffdb			settim=$ffdb   ; jmp $f6e4 Set the system clock.
=$ffa2			settmo=$ffa2   ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop=$ffe1     ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk=$ffb4     ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa=$ff96     ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim=$ffea    ; jmp $f69b Update the system clock
=$ffae			unlsn=$ffae    ; jmp $edfe Send an unlisten command
=$ffab			untlk=$ffab    ; jmp $edef Send an untalk command
=$ff8d			vector=$ff8d   ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.           ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.   ;a--;---; a=dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.      ;---;a--; a=Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.   ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial. ;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.        ;--y;---; y=msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .         ;a--;---; a=file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.             ;axy;---; a=# start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode. ;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.   ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.              ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.          ;---;---; z=1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.         ;a--;---; a=len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.       ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)         ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.         ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                   ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.        ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                  ;a--;---; a=ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.              ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.         ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.              ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.         ;a--;---; a=SAor#$60
=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black         =   144  ;0,  ctrl-1
=5			b_white         =   5    ;1,  ctrl-2
=28			b_red           =   28   ;2,  ctrl-3
=159			b_cyan          =   159  ;3,  ctrl-4
=156			b_purple        =   156  ;4,  ctrl-5
=30			b_green         =   30   ;5,  ctrl-6
=31			b_blue          =   31   ;6,  ctrl-7
=158			b_yellow        =   158  ;7,  ctrl-8
=129			b_orange        =   129  ;8,  C=-1
=149			b_brown         =   149  ;9,  C=-2
=150			b_ltred         =   150  ;10, C=-3
=155			b_gray3         =   155  ;11, C=-4
=155			b_grey3         =   155  ;11, C=-4
=152			b_gray2         =   152  ;12, C=-5
=152			b_grey2         =   152  ;13, C=-5
=153			b_ltgreen       =   153  ;13, C=-6
=154			b_ltblue        =   154  ;14, C=-7
=151			b_gray1         =   151  ;15, C=-8
=151			b_grey1         =   151  ;15, C=-8
=144			b_noir          =   144  ;0,  ctrl-1
=5			b_blanc         =   5    ;1,  ctrl-2
=28			b_rouge         =   28   ;2,  ctrl-3
=156			b_mauve         =   156  ;4,  ctrl-5
=30			b_vert          =   30   ;5,  ctrl-6
=31			b_bleu          =   31   ;6,  ctrl-7
=158			b_jaune         =   158  ;7,  ctrl-8
=149			b_brun          =   149  ;9,  C=-2
=150			b_rose          =   150  ;10, C=-3
=155			b_gris3         =   155  ;11, C=-4
=152			b_gris2         =   152  ;12, C=-5
=153			b_vert2         =   153  ;13, C=-6
=154			b_blue2         =   154  ;14, C=-7
=151			b_gris1         =   151  ;15, C=-8
=151			b_gris          =   151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-vicii.asm

.1156			screendis
.1156	08		               php
.1157	48		               pha
.1158	ad 11 d0	               lda  $d011
.115b	29 ef		               and  #%11101111
.115d	8d 11 d0	               sta  $d011
.1160	68		               pla
.1161	28		               plp
.1162	60		               rts
.1163			screenena
.1163	08		               php
.1164	48		               pha
.1165	ad 11 d0	               lda  $d011
.1168	09 10		               ora  #%00010000
.116a	8d 11 d0	               sta  $d011
.116d	68		               pla
.116e	28		               plp
.116f	60		               rts
=8192			bmpram = 8192
.1170			victohighres
.1170	08		               php
.1171	48		               pha
.1172	ad 11 d0	               lda  vicmiscfnc
.1175	09 20		               ora  #%00100000     ; 32
.1177	8d 11 d0	               sta  vicmiscfnc
.117a	ad 18 d0	               lda  vicmemptr
.117d	09 08		               ora  #%00001000     ; $08
.117f	8d 18 d0	               sta  vicmemptr
.1182	a9 ff		               lda  #$ff           ; 255
.1184	85 37		               sta  $0037
.1186	a9 1f		               lda  #$1f           ; 31
.1188	85 38		               sta  $0038
.118a	68		               pla
.118b	28		               plp
.118c	60		               rts
.118d			victonormal
.118d	08		               php
.118e	48		               pha
.118f	ad 11 d0	               lda  vicmiscfnc
.1192	29 df		               and  #%11011111     ; 233
.1194	8d 11 d0	               sta  vicmiscfnc
.1197	ad 18 d0	               lda  vicmemptr
.119a	29 f7		               and  #%11110111     ; $08
.119c	8d 18 d0	               sta  vicmemptr
.119f	a9 00		               lda  #$00
.11a1	85 37		               sta  $0037
.11a3	a9 a0		               lda  #$a0
.11a5	85 38		               sta  $0038
.11a7	20 82 12	               jsr  cls
.11aa	68		               pla
.11ab	28		               plp
.11ac	60		               rts
.11ad			vicbmpclear
.11ad	20 95 13	               jsr  push
.11b0	a9 04		               lda  #cmauve
.11b2	20 db 11	               jsr  setvicbmpbackcol
.11b5	a9 00		               lda  #<8192              ; Place le LSB de 8192 ...
.11b7	85 fb		               sta  zpage1              ; ... dans le lsb de zpage1.
.11b9	a9 20		               lda  #>8192              ; Place le MSB de 8192 ...
.11bb	85 fc		               sta  zpage1+1            ; ... dans le Msb de zpage1.
.11bd	48		               pha
.11be	a9 ff		               lda  #<$0000+(8191)
.11c0	8d b9 15	               sta  loopcount
.11c3	a9 1f		               lda  #>$0000+(8191)
.11c5	8d ba 15	               sta  loopcount+1
.11c8	68		               pla
.11c9	a0 00		               ldy  #$00
.11cb	a9 0f		next           lda  #$0f
.11cd	91 fb		               sta  (zpage1),y
.11cf	20 ea 14	               jsr  inczpage1
.11d2	20 99 15	               jsr  loop
.11d5	d0 f4		               bne  next
.11d7	20 d0 13	               jsr  pop
.11da	60		               rts
.11db			setvicbmpbackcol
.11db	20 95 13	               jsr  push
.11de	29 0f		               and  #$0f
.11e0	8d 0e 12	               sta  vicbmpbackcol
.11e3	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.11e5	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.11e7	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.11e9	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.11eb	48		               pha
.11ec	a9 00		               lda  #<$0000+(1024)
.11ee	8d b9 15	               sta  loopcount
.11f1	a9 04		               lda  #>$0000+(1024)
.11f3	8d ba 15	               sta  loopcount+1
.11f6	68		               pla
.11f7	a0 00		               ldy  #$00
.11f9	b1 fb		next           lda  (zpage1),y
.11fb	29 f0		               and  #$f0
.11fd	0d 0e 12	               ora  vicbmpbackcol
.1200	91 fb		               sta  (zpage1),y
.1202	20 ea 14	               jsr  inczpage1
.1205	20 99 15	               jsr  loop
.1208	d0 ef		               bne  next
.120a	20 d0 13	               jsr  pop
.120d	60		               rts
>120e	00		vicbmpbackcol  .byte     $00
.120f			setvicbmpforecol
.120f	20 95 13	               jsr  push
.1212	2a		               rol
.1213	2a		               rol
.1214	2a		               rol
.1215	2a		               rol
.1216	29 f0		               and  #$f0
.1218	8d 46 12	               sta  vicbmpforecol
.121b	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.121d	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.121f	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.1221	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.1223	48		               pha
.1224	a9 00		               lda  #<$0000+(1024)
.1226	8d b9 15	               sta  loopcount
.1229	a9 04		               lda  #>$0000+(1024)
.122b	8d ba 15	               sta  loopcount+1
.122e	68		               pla
.122f	a0 00		               ldy  #$00
.1231	b1 fb		next           lda  (zpage1),y
.1233	29 0f		               and  #$0f
.1235	0d 46 12	               ora  vicbmpforecol
.1238	91 fb		               sta  (zpage1),y
.123a	20 ea 14	               jsr  inczpage1
.123d	20 99 15	               jsr  loop
.1240	d0 ef		               bne  next
.1242	20 d0 13	               jsr  pop
.1245	60		               rts
>1246	00		vicbmpforecol  .byte     $00
.1247			bmphrcalccoords
.1247	20 95 13	               jsr  push
.124a	18		               clc       ; On met Carry à 0
.124b	6a		               ror       ; le bit 0 de a dans carry  ?/2
.124c	8a		               txa       ; x dans a
.124d	4a		               lsr       ; ?/4
.124e	4a		               lsr       ; ?/8 a = (ax)/8
.124f	8d 60 12	               sta  bmphrcol
.1252	98		               tya       ; Y dans a
.1253	4a		               lsr       ; ?/2
.1254	4a		               lsr       ; ?/4
.1255	4a		               lsr       ; ?/8 a=Y/8
.1256	8d 5f 12	               sta  bmphrrow
.1259	48		               pha
.125a	98		               tya
.125b	20 d0 13	               jsr  pop
.125e	60		               rts
.125f			vicbmpfill
>125f	00		bmphrrow       .byte     $00
>1260	00		bmphrcol       .byte     $00
>1261	00		bmphrmask      .byte     $00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

.1262			scrmaninit
.1262	20 03 14	               jsr  pushreg        ; Sauvegarde tous les registres
.1265	20 56 11	               jsr  screendis      ; Disable screen
.1268	a9 06		               lda  #vbleu         ; Place bleue pour la couleur
.126a	8d 21 d0	               sta  vicbackcol     ;   d'arrière plan,
.126d	a9 05		               lda  #vvert         ; vert pour la couleur
.126f	8d 20 d0	               sta  vicbordcol     ;   de la bordure d'écran,
.1272	a9 01		               lda  #vblanc        ;   et blanc pour la couleur du
.1274	8d 86 02	               sta  bascol         ; texte.
.1277	20 82 12	               jsr  cls            ; Efface l'écran.
.127a	20 63 11	               jsr  screenena      ; enable screen
.127d	20 32 14	               jsr  popreg         ; Récupère tous les registres.
.1280	60		               rts
>1281	8e		characterset   .byte b_uppercase
.1282			cls
.1282	08		               php                 ; Sauvegarde les registres
.1283	48		               pha                 ;   modifiés.
.1284	a9 93		               lda  #$93           ; Affiche le code basic de
.1286	20 d2 ff	               jsr  chrout         ;   d'effacement d'écran.
.1289	68		               pla                 ; Récupère les registres
.128a	28		               plp                 ;   modifiés.
.128b	60		               rts
.128c			putnch
.128c	20 03 14	               jsr  pushreg        ; Sauvegarde tous les registres.
.128f	20 d2 ff	again          jsr  chrout         ; On affiche A.
.1292	ca		               dex                 ; Un de moins à faire.
.1293	d0 fa		               bne  again          ; Si pas à 0 on en affiche encore.
.1295	20 32 14	out            jsr  popreg         ; Récupère tous les registres.
.1298	60		               rts
.1299			putch
.1299	08		               php                 ; Sauvegarde le registre de status.
.129a	20 d2 ff	               jsr  chrout         ; Affiche le caractère de Acc.
.129d	28		               plp                 ; Récupère le registre de status.
.129e	60		               rts
.129f			puts
.129f	20 95 13	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.12a2	86 fb		               stx  zpage1         ; Place l'adresse de la chaine
.12a4	84 fc		               sty  zpage1+1       ;   dans ZP1.
.12a6	a0 00		               ldy  #0             ; Initialise l'index du mode (ZP),Y
.12a8	b1 fb		next           lda  (zpage1),y     ; Lit un charactère.
.12aa	f0 09		               beq  exit           ; Si $00 on sort.
.12ac	20 d2 ff	               jsr  chrout         ; Affiche le caractères.
.12af	20 ea 14	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.12b2	4c a8 12	               jmp  next           ; Saute chercher le prochain carac.
.12b5	20 d0 13	exit           jsr  popall         ; Récupère registre, ZP1 et ZP2.
.12b8	60		               rts
.12b9			gotoxy
.12b9	08		               php                 ; Sauvegarde le registre de
.12ba	48		               pha                 ;   status et le registre a.
.12bb	18		               clc                 ; Carry = 1 pour que kplot
.12bc	8a		               txa                 ;   positionne le curseur.
.12bd	48		               pha                 ; On inverse X et Y pcq kplot
.12be	98		               tya                 ;
.12bf	aa		               tax                 ;   prend X comme la ligne
.12c0	68		               pla                 ;
.12c1	a8		               tay                 ;   et Y comme la colonne.
.12c2	20 f0 ff	               jsr  kplot          ; Positionne le curseur
.12c5	68		               pla                 ; Récupère le registre a et
.12c6	28		               plp                 ;   le registre de status.
.12c7	60		               rts
.12c8			cursor
=$0286			bascol    =    $0286               ; debugme
.12c8	20 03 14	               jsr  pushreg        ; Sauvegarde tous les registres.
.12cb	90 12		               bcc  restore        ; Si C=0 c'est une récupération.
.12cd	20 f0 ff	               jsr  kplot          ; On récupère la position du
.12d0	8c f2 12	               sty  cx             ;   curseur et on la sauvegarde
.12d3	8e f3 12	               stx  cy             ;   dans les vars locales.
.12d6	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.12d9	8d f4 12	               sta  bcol           ; BASIC du texte.
.12dc	4c ee 12	               jmp  out            ; c'est fini on sort.
.12df	ae f3 12	restore        ldx  cy             ; Comme C=1, On charge x avec
.12e2	ac f2 12	               ldy  cx             ;   la ligne, y ace  la col.
.12e5	20 f0 ff	               jsr  kplot          ; On positionne le curseur.
.12e8	ad f4 12	               lda  bcol           ; On replace la couleur par basic
.12eb	8d 86 02	               sta  bascol         ;   sauvegardé.
.12ee	20 32 14	out            jsr  popreg         ; Récupère tous les registres.
.12f1	60		               rts
>12f2	00		cx   .byte     $00
>12f3	00		cy   .byte     $00
>12f4	00		bcol .byte     $00
.12f5			cursave
.12f5	08		               php
.12f6	38		               sec
.12f7	20 c8 12	               jsr  cursor         ; Voir cette fonction plus haut.
.12fa	28		               plp
.12fb	60		               rts
.12fc			curput
.12fc	08		               php
.12fd	18		               clc
.12fe	20 c8 12	               jsr  cursor         ; Voir cette fonction plus haut.
.1301	28		               plp
.1302	60		               rts
.1303			putsxy
.1303	20 95 13	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.1306	86 fb		               stx  zpage1         ; On place la position de la
.1308	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.130a	a0 00		               ldy  #$00           ; On charge l'index à 0.
.130c	b1 fb		               lda  (zpage1),y     ; Charge la coordonné X
.130e	aa		               tax                 ;   dans X.
.130f	20 ea 14	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.1312	b1 fb		               lda  (zpage1),y     ; Charge la coordonnée Y
.1314	a8		               tay                 ; dans Y.
.1315	20 b9 12	               jsr  gotoxy         ; on positionne le curseur.
.1318	20 ea 14	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.131b	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.131d	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.131f	20 9f 12	               jsr  puts           ;   l'affiche.
.1322	20 d0 13	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.1325	60		               rts
>1326	00 00		straddr   .word     $00
>1328	00		px        .byte     $00
>1329	00		py        .byte     $00
>132a	00 00		zp1       .word     $00
.132c			putscxy
.132c	20 95 13	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.132f	86 fb		               stx  zpage1         ; On place la position de la
.1331	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.1333	a0 00		               ldy  #$00           ; On charge l'index à 0.
.1335	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.1338	48		               pha                 ;   actuelle de basic.
.1339	b1 fb		               lda  (zpage1),y     ; On charge le paramètre de
.133b	8d 86 02	               sta  bascol         ;   couleur et le force a Basic.
.133e	20 ea 14	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.1341	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.1343	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.1345	20 03 13	               jsr  putsxy         ;   l'affiche.
.1348	68		               pla                 ; On replace la couleur basic
.1349	8d 86 02	               sta  bascol         ;   que nous avions sauvegardée.
.134c	20 d0 13	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.134f	60		               rts
.1350			putrahex
.1350	20 03 14	               jsr  pushreg        ; Sauvegarde tous les registres.
.1353	20 23 16	               jsr  atohex         ; Conversion de a chaîne hexa.
.1356	a2 c0		               ldx  #<a2hexstr     ; Charge l'adresse de la chaîne
.1358	a0 15		               ldy  #>a2hexstr     ;   hexa dans $YYXX.
.135a	20 9f 12	               jsr  puts           ; Affiche la chaîne.
.135d	20 32 14	               jsr  popreg         ; Récupère tous les registres.
.1360	60		               rts
.1361			kputrahexxy
.1361			bputrahexxy
.1361			putrahexxy
.1361	08		               php                 ; Sauvegarde le registre de
.1362	48		               pha                 ;   status et le registre a.
.1363	20 23 16	               jsr  atohex         ; Convertion de a en hexadécimal.
.1366	a2 bd		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.1368	a0 15		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.136a	20 03 13	               jsr  putsxy         ; Positionne et affiche la chaîne.
.136d	68		               pla                 ; Récupère le registre a et
.136e	28		               plp                 ;   le registre de status.
.136f	60		               rts
.1370			putrahexcxy
.1370	20 03 14	               jsr  pushreg        ; Sauvegarde tous les registres.
.1373	20 23 16	               jsr  atohex         ; Convertion de a en hexadécimal.
.1376	a2 bd		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.1378	a0 15		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.137a	20 03 13	               jsr  putsxy         ; Colore, positionne et affiche la
.137d	20 32 14	               jsr  popreg         ; Récupère tous les registres.
.1380	60		               rts
.1381			setinverse
.1381	48		               pha
.1382	a9 12		               lda  #$12
.1384	20 d2 ff	               jsr  chrout
.1387	68		               pla
.1388	60		               rts
.1389			clrinverse
.1389	48		               pha
.138a	a9 92		               lda  #$92
.138c	20 d2 ff	               jsr  chrout
.138f	68		               pla
.1390	60		               rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>1391	00		rp        .byte     0
>1392	00		ra        .byte     0
>1393	00 00		pc        .word     0
.1395			pushall
.1395			push
.1395	08		          php            ; stack : flg, pcl, pch
.1396	78		          sei
.1397	8d 92 13	          sta  ra        ; save a
.139a	68		          pla            ; stack : pcl, pch
.139b	8d 91 13	          sta  rp        ; save rp
.139e	68		          pla            ; stack : pch
.139f	8d 93 13	          sta  pc        ; save pcl
.13a2	68		          pla            ; stack : -
.13a3	8d 94 13	          sta  pc+1      ; save pch
.13a6	a5 fb		          lda  zpage1    ; get zpage1 low byte
.13a8	48		          pha            ; stack : zp1l
.13a9	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.13ab	48		          pha            ; stack : zp1h, zp1l
.13ac	a5 fd		          lda  zpage2    ; get zpage2 low byte
.13ae	48		          pha            ; stack : zp2l, zp1h, zp1l
.13af	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.13b1	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.13b2	ad 91 13	          lda  rp        ; get rp
.13b5	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.13b6	ad 92 13	          lda  ra        ; get a
.13b9	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.13ba	8a		          txa            ; get x
.13bb	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.13bc	98		          tya            ; get y
.13bd	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.13be	ad 94 13	          lda  pc+1      ; get pch
.13c1	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.13c2	ad 93 13	          lda  pc        ; get pcl
.13c5	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.13c6	ad 91 13	          lda  rp        ; get rp
.13c9	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.13ca	ad 92 13	          lda  ra        ; get a
.13cd	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.13ce	58		          cli
.13cf	60		          rts
.13d0			pullall
.13d0			pull
.13d0			popall
.13d0			pop
.13d0	78		          sei
.13d1	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.13d2	8d 93 13	          sta  pc        ; save pcl
.13d5	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.13d6	8d 94 13	          sta  pc+1      ; save pch
.13d9	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.13da	a8		          tay            ; set y
.13db	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.13dc	aa		          tax            ; set x
.13dd	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.13de	8d 92 13	          sta  ra        ; save a
.13e1	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.13e2	8d 91 13	          sta  rp        ; save rp
.13e5	68		          pla            ; stack : zp2l, zp1h, zp1l
.13e6	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.13e8	68		          pla            ; stack : zp1h, zp1l
.13e9	85 fd		          sta  zpage2    ; get zpage2 High byte
.13eb	68		          pla            ; stack : zp1l
.13ec	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.13ee	68		          pla            ; stack :
.13ef	85 fb		          sta  zpage1    ; get zpage1 High byte
.13f1	ad 94 13	          lda  pc+1      ; get pch
.13f4	48		          pha            ; stack : pch
.13f5	ad 93 13	          lda  pc
.13f8	48		          pha            ; stack : pcl, pch
.13f9	ad 91 13	          lda  rp        ; get rp
.13fc	48		          pha            ; stack : rp, pcl, pch
.13fd	ad 92 13	          lda  ra        ; set ra
.1400	58		          cli
.1401	28		          plp            ; stack : pcl, pch
.1402	60		          rts
.1403			pushreg
.1403	08		          php            ; stack : flg, pcl, pch
.1404	78		          sei
.1405	8d 92 13	          sta  ra        ; save a
.1408	68		          pla            ; stack : pcl, pch
.1409	8d 91 13	          sta  rp        ; save rp
.140c	68		          pla            ; stack : pch
.140d	8d 93 13	          sta  pc        ; save pcl
.1410	68		          pla            ; stack : -
.1411	8d 94 13	          sta  pc+1      ; save pch
.1414	ad 91 13	          lda  rp        ; get rp
.1417	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1418	ad 92 13	          lda  ra        ; get a
.141b	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.141c	8a		          txa            ; get x
.141d	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.141e	98		          tya            ; get y
.141f	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1420	ad 94 13	          lda  pc+1      ; get pch
.1423	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1424	ad 93 13	          lda  pc        ; get pcl
.1427	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1428	ad 91 13	          lda  rp        ; get rp
.142b	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.142c	ad 92 13	          lda  ra        ; get a
.142f	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1430	58		          cli
.1431	60		          rts
.1432			pullreg
.1432			popreg
.1432	78		          sei
.1433	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1434	8d 93 13	          sta  pc        ; save pcl
.1437	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1438	8d 94 13	          sta  pc+1      ; save pch
.143b	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.143c	a8		          tay            ; set y
.143d	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.143e	aa		          tax            ; set x
.143f	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1440	8d 92 13	          sta  ra        ; save a
.1443	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1444	8d 91 13	          sta  rp        ; save rp
.1447	ad 94 13	          lda  pc+1      ; get pch
.144a	48		          pha            ; stack : pch
.144b	ad 93 13	          lda  pc
.144e	48		          pha            ; stack : pcl, pch
.144f	ad 91 13	          lda  rp        ; get rp
.1452	48		          pha            ; stack : rp, pcl, pch
.1453	ad 92 13	          lda  ra        ; set ra
.1456	58		          cli
.1457	28		          plp            ; stack : pcl, pch
.1458	60		          rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.1459			blkfill
.1459	20 95 13	bf0            jsr  push
.145c	20 24 15	               jsr  savezp1
.145f	84 fc		               sty  zpage1+1
.1461	a0 00		               ldy  #$00
.1463	84 fb		               sty  zpage1
.1465	91 fb		bf1            sta  (zpage1),y
.1467	c8		               iny
.1468	d0 fb		               bne  bf1
.146a	20 33 15	               jsr  restzp1
.146d	20 d0 13	               jsr  pop
.1470	60		               rts
.1471			memfill
.1471	20 95 13	               jsr  push
.1474	20 59 14	mf1            jsr  blkfill
.1477	c8		               iny
.1478	ca		               dex
.1479	d0 f9		               bne  mf1
.147b	20 d0 13	               jsr  pop
.147e	60		               rts
.147f			memmove
.147f	20 95 13	               jsr  push
.1482	ba		               tsx            ; On se crée un pointeur ...
.1483	8a		               txa
.1484	18		               clc
.1485	69 0b		               adc  #11
.1487	a8		               tay
.1488	a2 06		               ldx  #$06
.148a	b9 00 01	nextbyte       lda  $0100,y
.148d	99 d9 14	               sta  words,y
.1490	c8		               iny
.1491	ca		               dex
.1492	d0 f6		               bne  nextbyte
.1494	ad d9 14	               lda  s
.1497	8d b0 14	               sta  source+1
.149a	ad da 14	               lda  s+1
.149d	8d b1 14	               sta  source+2
.14a0	ad db 14	               lda  d
.14a3	8d ad 14	               sta  destin+1
.14a6	ad dc 14	               lda  d+1
.14a9	8d ae 14	               sta  destin+2
.14ac	ad ff ff	destin         lda  $ffff
.14af	8d ff ff	source         sta  $ffff
.14b2	ee ad 14	               inc  destin+1
.14b5	d0 03		               bne  src
.14b7	ee ae 14	               inc  destin+2
.14ba	ee b0 14	src            inc  source+1
.14bd	d0 03		               bne  cnt
.14bf	ee b1 14	               inc  source+2
.14c2	ad dd 14	cnt            lda  compte
.14c5	d0 08		               bne  decit
.14c7	ad de 14	               lda  compte+1
.14ca	f0 09		               beq  fini
.14cc	ce de 14	               dec  compte+1
.14cf	ce dd 14	decit          dec  compte
.14d2	4c ac 14	               jmp  destin
.14d5	20 d0 13	fini           jsr  pop
.14d8	60		               rts
.14d9			words
>14d9	00 00		s         .word     $0000
>14db	00 00		d         .word     $0000
>14dd	00 00		compte    .word     $0000
.14df			decword
.14df	20 95 13	               jsr  push
.14e2	86 fd		               stx  zpage2
.14e4	84 fe		               sty  zpage2+1
.14e6	20 d0 13	               jsr  pop
.14e9	60		               rts
.14ea			inczpage1
.14ea			inczp1
.14ea	08		               php
.14eb	48		               pha
.14ec	e6 fb		               inc  zpage1
.14ee	a5 fb		               lda  zpage1
.14f0	d0 02		               bne  nopage
.14f2	e6 fc		               inc  zpage1+1
.14f4	68		nopage         pla
.14f5	28		               plp
.14f6	60		               rts
.14f7			deczpage1
.14f7			deczp1
.14f7	08		               php
.14f8	48		               pha
.14f9	c6 fb		               dec  zpage1
.14fb	a5 fb		               lda  zpage1
.14fd	c9 ff		               cmp  #$ff
.14ff	f0 02		               beq  report
.1501	d0 02		               bne  nopage
.1503	c6 fc		report         dec  zpage1+1
.1505	68		nopage         pla
.1506	28		               plp
.1507	60		               rts
.1508			inczpage2
.1508			inczp2
.1508	08		               php
.1509	48		               pha
.150a	e6 fd		               inc  zpage2
.150c	a5 fd		               lda  zpage2
.150e	d0 02		               bne  nopage
.1510	e6 fe		               inc  zpage2+1
.1512	68		nopage         pla
.1513	28		               plp
.1514	60		               rts
.1515			deczpage2
.1515			deczp2
.1515	08		               php
.1516	c6 fd		               dec  zpage2
.1518	a5 fd		               lda  zpage2
.151a	c9 ff		               cmp  #$ff
.151c	f0 02		               beq  report
.151e	d0 02		               bne  nopage
.1520	c6 fe		report         dec  zpage2+1
.1522	28		nopage         plp
.1523	60		               rts
.1524			savezp1
.1524	08		               php
.1525	48		               pha
.1526	a5 fb		               lda  zpage1
.1528	8d b5 15	               sta  zp1
.152b	a5 fc		               lda  zpage1+1
.152d	8d b6 15	               sta  zp1+1
.1530	68		               pla
.1531	28		               plp
.1532	60		               rts
.1533			restzp1
.1533	08		               php
.1534	48		               pha
.1535	ad b5 15	               lda  zp1
.1538	85 fb		               sta  zpage1
.153a	ad b6 15	               lda  zp1+1
.153d	85 fc		               sta  zpage1+1
.153f	68		               pla
.1540	28		               plp
.1541	60		               rts
.1542			savezp2
.1542	08		               php
.1543	48		               pha
.1544	a5 fd		               lda  zpage2
.1546	8d b7 15	               sta  zp2
.1549	a5 fe		               lda  zpage2+1
.154b	8d b8 15	               sta  zp2+1
.154e	68		               pla
.154f	28		               plp
.1550	60		               rts
.1551			restzp2
.1551	08		               php
.1552	48		               pha
.1553	ad b7 15	               lda  zp2
.1556	85 fd		               sta  zpage2
.1558	ad b8 15	               lda  zp2+1
.155b	85 fe		               sta  zpage2+1
.155d	68		               pla
.155e	28		               plp
.155f	60		               rts
.1560			xy2addr
.1560	08		               php
.1561	48		               pha
.1562	8a		               txa
.1563	48		               pha
.1564	98		               tya
.1565	48		               pha
.1566	ad b0 15	               lda  addr1+1
.1569	8d b2 15	               sta  addr2+1
.156c	ad af 15	               lda  addr1
.156f	8d b1 15	               sta  addr2
.1572	c0 00		               cpy  #$00
.1574	f0 0f		               beq  addx
.1576	18		moreline       clc
.1577	6d ae 15	               adc  ymult
.157a	90 03		               bcc  norepy
.157c	ee b2 15	               inc  addr2+1
.157f	8d b1 15	norepy         sta  addr2
.1582	88		               dey
.1583	d0 f1		               bne  moreline
.1585	8a		addx           txa
.1586	18		               clc
.1587	6d b1 15	               adc  addr2
.158a	90 03		               bcc  thatsit
.158c	ee b2 15	               inc  addr2+1
.158f	8d b1 15	thatsit        sta  addr2
.1592	68		               pla
.1593	a8		               tay
.1594	68		               pla
.1595	aa		               tax
.1596	68		               pla
.1597	28		               plp
.1598	60		               rts
.1599			loop
.1599	ce b9 15	               dec  loopcount
.159c	d0 03		               bne  norep
.159e	ce ba 15	               dec  loopcount+1
.15a1	ad b9 15	norep          lda  loopcount
.15a4	c9 00		               cmp  #$00
.15a6	d0 05		               bne  out
.15a8	4d ba 15	               eor  loopcount+1
.15ab	c9 ff		               cmp  #$ff
.15ad	60		out            rts
>15ae	28		ymult          .byte     40
>15af	00 00		addr1          .word     $0000
>15b1	00 00		addr2          .word     $0000
>15b3	00 00		bytecnt        .word     $0000
>15b5	00 00		zp1            .word     $0000
>15b7	00 00		zp2            .word     $0000
>15b9	00 00		loopcount      .word     $0000

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>15bb	01		a2hexcol       .byte     1              ; pour aputscxy
>15bc	00		a2hexbkcol     .byte     %00000000
.15bd			a2hexpos
>15bd	00		a2hexpx        .byte     0              ; pour aputsxy
>15be	00		a2hexpy        .byte     0
>15bf	24		a2hexprefix    .byte     "$"            ; pour aputs
>15c0	00 00		a2hexstr       .word     $00
>15c2	00 00		               .word     $00
>15c4	00		               .byte     0              ; 0 end string
>15c5	01		abincol        .byte     1
>15c6	00		abinbkcol      .byte     %00000000
>15c7	30 30 30 30	abin           .null     "00000000"
>15cb	30 30 30 30 00
>15d0	20 20 20 00	adec           .null     "   "
.15d4			putahexfmtxy
.15d4	20 95 13	               jsr  push
.15d7	20 23 16	               jsr  atohex
.15da	ae bd 15	               ldx  a2hexpx
.15dd	ac be 15	               ldy  a2hexpy
.15e0	20 b9 12	               jsr  gotoxy
.15e3	a2 bf		               ldx  #<a2hexprefix
.15e5	a0 15		               ldy  #>a2hexprefix
.15e7	20 9f 12	               jsr  puts
.15ea	20 d0 13	               jsr  pop
.15ed	60		               rts
.15ee			putahexfmt
.15ee	20 95 13	               jsr  push
.15f1	20 23 16	               jsr  atohex
.15f4	a2 bf		               ldx  #<a2hexprefix
.15f6	a0 15		               ldy  #>a2hexprefix
.15f8	20 9f 12	               jsr  puts
.15fb	20 d0 13	               jsr  pop
.15fe	60		               rts
.15ff			putahex
.15ff	20 95 13	               jsr  push
.1602	20 23 16	               jsr  atohex
.1605	a2 c0		               ldx  #<a2hexstr
.1607	a0 15		               ldy  #>a2hexstr
.1609	20 9f 12	               jsr  puts
.160c	20 d0 13	               jsr  pop
.160f	60		               rts
.1610			nibtohex
.1610	08		               php
.1611	29 0f		               and  #$0f
.1613	f8		               sed
.1614	18		               clc
.1615	69 90		               adc  #$90
.1617	69 40		               adc  #$40
.1619	d8		               cld
.161a	28		               plp
.161b	60		               rts
.161c			lsra4bits
.161c	08		               php
.161d	4a		               lsr
.161e	4a		               lsr
.161f	4a		               lsr
.1620	4a		               lsr
.1621	28		               plp
.1622	60		               rts
.1623			atohex
.1623	08		               php
.1624	48		               pha
.1625	48		               pha
.1626	20 1c 16	               jsr  lsra4bits
.1629	20 10 16	               jsr  nibtohex
.162c	8d c0 15	               sta  a2hexstr
.162f	68		               pla
.1630	20 10 16	               jsr  nibtohex
.1633	8d c1 15	               sta  a2hexstr+1
.1636	a9 00		               lda  #$00                ; set end of string
.1638	8d c2 15	               sta  a2hexstr+2
.163b	68		               pla
.163c	28		               plp
.163d	60		               rts
.163e			xy2hex
.163e	20 95 13	               jsr  push
.1641	20 23 16	               jsr  atohex
.1644	8a		               txa
.1645	48		               pha
.1646	20 1c 16	               jsr  lsra4bits
.1649	20 10 16	               jsr  nibtohex
.164c	8d c0 15	               sta  a2hexstr
.164f	68		               pla
.1650	20 10 16	               jsr  nibtohex
.1653	8d c1 15	               sta  a2hexstr+1
.1656	98		               tya
.1657	48		               pha
.1658	20 1c 16	               jsr  lsra4bits
.165b	20 10 16	               jsr  nibtohex
.165e	8d c2 15	               sta  a2hexstr+2
.1661	68		               pla
.1662	20 10 16	               jsr  nibtohex
.1665	8d c3 15	               sta  a2hexstr+3
.1668	a9 00		               lda  #$00                ; 0 ended string
.166a	8d c4 15	               sta  a2hexstr+4
.166d	20 d0 13	               jsr  pop
.1670			atobin
.1670	20 95 13	               jsr  push
.1673	a2 08		               ldx  #8
.1675	a0 00		               ldy  #0
.1677	18		               clc
.1678	2a		nextbit        rol
.1679	48		               pha
.167a	69 00		               adc  #$00
.167c	29 01		               and  #$01
.167e	20 10 16	               jsr  nibtohex
.1681	99 c7 15	               sta  abin,y
.1684	68		               pla
.1685	c8		               iny
.1686	ca		               dex
.1687	d0 ef		               bne  nextbit
.1689	a9 00		               lda  #0
.168b	99 c7 15	               sta  abin,y
.168e	20 d0 13	               jsr  pull
.1691	60		               rts
.1692			abinsetmccol
.1692	20 03 14	               jsr  pushreg
.1695	20 32 14	               jsr  popreg
.1698	60		               rts
.1699			putabin
.1699	20 70 16	               jsr     atobin
.169c	20 95 13	               jsr     push
.169f	a2 c7		               ldx     #<abin
.16a1	a0 15		               ldy     #>abin
.16a3	20 9f 12	               jsr     puts
.16a6	20 d0 13	               jsr     pop
.16a9	60		               rts
.16aa			printabin
.16aa	20 95 13	               jsr     push
.16ad	a2 c7		               ldx     #<abin
.16af	a0 15		               ldy     #>abin
.16b1	20 9f 12	               jsr     puts
.16b4	20 d0 13	               jsr     pop
.16b7	60		               rts
.16b8			putabinfmt
.16b8	08		               php
.16b9	48		               pha
.16ba	a9 25		               lda     #"%"
.16bc	20 99 12	               jsr     putch
.16bf	68		               pla
.16c0	20 99 16	               jsr     putabin
.16c3	28		               plp
.16c4	60		               rts
.16c5			putabinxy
.16c5	20 b9 12	               jsr     gotoxy
.16c8	20 99 16	               jsr     putabin
.16cb	60		               rts
.16cc			putabinfmtxy
.16cc	20 b9 12	               jsr     gotoxy
.16cf	20 b8 16	               jsr     putabinfmt
.16d2	60		               rts
.16d3			atodec
.16d3	20 95 13	               jsr  push
.16d6	f8		               sed            ; On se place en mode décimal.
.16d7	aa		               tax            ; On déplace a dans x.
.16d8	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.16da	a9 00		               lda  #$00      ; 0 dans A.
.16dc	18		nextbit        clc            ; Bit carry a 0.
.16dd	69 01		               adc  #$01      ; Ajoute 1 a A.
.16df	90 01		               bcc  decx      ; Pas de carry, pas de report.
.16e1	c8		               iny            ; On incrémente Y
.16e2	ca		decx           dex            ; X=X-1
.16e3	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.16e5	48		               pha            ; A sur le stack.
.16e6	98		               tya            ; Y dans A (MSB)
.16e7	20 10 16	               jsr  nibtohex  ; a hex petsci ...
.16ea	8d d0 15	               sta  adec      ; ... dans tampon.
.16ed	68		               pla            ; Récupere A
.16ee	48		               pha            ;
.16ef	20 10 16	               jsr  nibtohex
.16f2	8d d2 15	               sta  adec+2
.16f5	68		               pla
.16f6	6a		               ror
.16f7	6a		               ror
.16f8	6a		               ror
.16f9	6a		               ror
.16fa	20 10 16	               jsr  nibtohex
.16fd	8d d1 15	               sta  adec+1
.1700	d8		               cld            ; On revient en mode binaire.
.1701	20 d0 13	               jsr  pull
.1704	60		               rts
.1705			putadec
.1705	20 95 13	               jsr  push
.1708	20 d3 16	               jsr  atodec
.170b	a2 d0		               ldx  #<adec
.170d	a0 15		               ldy  #>adec+1
.170f	20 9f 12	               jsr  puts
.1712	20 d0 13	               jsr  pop
.1715	60		               rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

.1716			waitstop
.1716	20 95 13	               jsr  push
.1719	20 ed f6	wait           jsr  k_stop
.171c	d0 fb		               bne  wait
.171e	20 d0 13	               jsr  pop
.1721	60		               rts
.1722			anykey
.1722	08		               php
.1723	48		               pha
.1724	a5 cb		nokey          lda 203
.1726	c9 40		               cmp #64
.1728	f0 fa		               beq nokey
.172a	20 34 17	               jsr releasekey
.172d	a9 00		               lda #0
.172f	85 c6		               sta 198
.1731	68		               pla
.1732	28		               plp
.1733	60		               rts
.1734			releasekey
.1734	08		               php
.1735	48		               pha
.1736	a5 cb		keypressed     lda 203
.1738	c9 40		               cmp #64
.173a	d0 fa		               bne keypressed
.173c	68		               pla
.173d	28		               plp
.173e	60		               rts
.173f			getkey
.173f	20 e4 ff	gkagain        jsr  getin
.1742	c9 00		               cmp  #0
.1744	f0 f9		               beq  gkagain
.1746	60		               rts
.1747			kbflushbuff
.1747	08		               php
.1748	48		               pha
.1749	20 e4 ff	again          jsr  getin
.174c	c9 00		               cmp  #0
.174e	d0 f9		               bne  again
.1750	68		               pla
.1751	28		               plp
.1752	60		               rts
.1753			waitkey
.1753	20 95 13	               jsr  push
.1756	8d a4 17	               sta  thekey
.1759	20 e4 ff	nope           jsr  getin
.175c	20 d2 ff	               jsr  chrout
.175f	cd a4 17	               cmp  thekey
.1762	d0 f5		               bne  nope
.1764	20 d2 ff	               jsr  chrout
.1767	20 d0 13	               jsr  pop
.176a	60		               rts
.176b			waitspace
.176b	20 95 13	               jsr  push
.176e	a9 7f		wait           lda  #$7f  ;%01111111
.1770	8d 00 dc	               sta  $dc00
.1773	ad 01 dc	               lda  $dc01
.1776	29 10		               and  #$10  ;mask %00010000
.1778	d0 f4		               bne  wait
.177a	20 d0 13	               jsr  pop
.177d			waitsstop
.177d	20 95 13	               jsr  push
.1780	20 ed f6	wait           jsr  k_stop  ;%01111111
.1783	d0 fb		               bne  wait
.1785	20 d0 13	               jsr  pop
.1788			waitreturn
.1788	20 95 13	               jsr  push
.178b	ad a5 17	               lda  thecount
.178e	8d 00 04	               sta  scrnram
.1791	a9 02		               lda  #$02
.1793	8d 00 d8	               sta  colorram
.1796	20 e4 ff	nope           jsr  getin
.1799	c9 0d		nohex          cmp  #$0d
.179b	d0 f9		               bne  nope
.179d	ee a5 17	               inc  thecount
.17a0	20 d0 13	               jsr  pop
.17a3	60		               rts
>17a4	00		thekey         .byte   0
>17a5	01		thecount       .byte   $01
>17a6	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>17aa	00 00 00 00 00 00 00 00 00 0d 00 00
>17b6	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>17ba	00 00 00 00 00 00 00 00 00 00 00 00
>17c6	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>17ca	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>17d6	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>17da	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>17e6	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>17ea	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>17f6	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>17fa	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>1806	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>180a	00 00 00 00 00 00 00 00 00 00 00 00
>1816	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>181a	00 00 00 00 00 00 00 00 00 00 00 00
>1826	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>182a	00 00 00 00 00 00 00 00 00 00 00 00
>1836	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>183a	00 00 00 00 00 00 00 00 00 00 00 00
>1846	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>184a	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1856	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>185a	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1866	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>186a	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>1876	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>187a	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>1886	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>188a	00 00 00 00 00 00 00 00 00 00 00 00
>1896	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>189a	00 00 00 00 00 00 00 00 00 00 00 00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-std-showregs.asm

.18a6			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
.18a6	08		               php                 ; Sauvegarde le registre de status sur stack.
.18a7	8d a1 1a	               sta  rega           ; Sauvegarde Acc en mémoire.
.18aa	68		               pla                 ; Récupère le registre de status du stack.
.18ab	8d a4 1a	               sta  regp           ; Sauvegarde le registre de status en mémoire.
.18ae	8e a2 1a	               stx  regx           ; Sauvegarde le registre X en mémoire.
.18b1	8c a3 1a	               sty  regy           ; Sauvegarde le registre Y en mémoire.
.18b4	ba		               tsx                 ; Copie le registre S dans X.
.18b5	8e a5 1a	               stx  regs           ; Sauvegarde le registre S en mémoire.
.18b8	68		               pla                 ; Récupère le MSB de l'adresse de retour ...
.18b9	8d a7 1a	               sta  regpcl         ; ... et le sauvegarde en mémoire ...
.18bc	8d a9 1a	               sta  regpcl2        ; ... une seconde fois.
.18bf	68		               pla                 ; Récupère le LSB de l'adresse de retour ...
.18c0	8d a6 1a	               sta  regpch         ; ... et le sauvegarde en mémoire ...
.18c3	8d a8 1a	               sta  regpch2        ; ... une seconde fois.
.18c6	ad a1 1a	               lda  rega           ; On commence par le registre Acc.
.18c9	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18ca	20 10 16	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18cd	8d 3e 1a	               sta  vala+1         ; ... et le place dans la chaine.
.18d0	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.18d1	20 1c 16	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18d4	20 10 16	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18d7	8d 3d 1a	               sta  vala           ; ... et le place dans la chaine.
.18da	ad a3 1a	               lda  regy           ; Ensuite, le registre Y.
.18dd	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18de	20 10 16	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18e1	8d 55 1a	               sta  valy+1         ; ... et le place dans la chaine.
.18e4	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.18e5	20 1c 16	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18e8	20 10 16	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18eb	8d 54 1a	               sta  valy           ; ... et le place dans la chaine.
.18ee	ad a2 1a	               lda  regx           ; Ensuite, le registre X.
.18f1	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18f2	20 10 16	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18f5	8d 49 1a	               sta  valx+1         ; ... et le place dans la chaine.
.18f8	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.18f9	20 1c 16	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18fc	20 10 16	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18ff	8d 48 1a	               sta  valx           ; ... et le place dans la chaine.
.1902	ad a4 1a	               lda  regp           ; Ensuite, le registre de status.
.1905	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1906	20 10 16	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1909	8d 60 1a	               sta  valp+1         ; ... et le place dans la chaine.
.190c	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.190d	20 1c 16	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1910	20 10 16	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1913	8d 5f 1a	               sta  valp           ; ... et le place dans la chaine.
.1916	ad a5 1a	               lda  regs           ; Ensuite, le pointeur de stack.
.1919	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.191a	20 10 16	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.191d	8d 6b 1a	               sta  vals+1         ; ... et le place dans la chaine.
.1920	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1921	20 1c 16	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1924	20 10 16	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1927	8d 6a 1a	               sta  vals           ; ... et le place dans la chaine.
.192a	38		               sec                 ; Prépade le ADC en plaçant 0 dans Carry.
.192b	ad a9 1a	               lda  regpcl2        ; On charge la LSB de l'adresse de retour.
.192e	69 00		               adc  #$00           ; On y ajoute 1.
.1930	90 03		               bcc  noreport       ; Si pas de Carry on ne fait pas de report.
.1932	ee a8 1a	               inc  regpch2        ; ... en incrémentant le MSB.
.1935	8d a9 1a	noreport       sta  regpcl2        ; On le sauvegarde.
.1938	ad a9 1a	               lda  regpcl2        ; On récupère la partie basse du compteur.
.193b	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.193c	20 10 16	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.193f	8d 7b 1a	               sta  valpcl+1       ; ... et lace le code à la position "---X".
.1942	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1943	20 1c 16	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1946	20 10 16	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1949	8d 7a 1a	               sta  valpcl         ; ... et lace le code à la position "--X-".
.194c	ad a8 1a	               lda regpch2         ; On récupère la partie haute du compteur.
.194f	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1950	20 10 16	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1953	8d 79 1a	               sta  valpch+1       ; ... et lace le code à la position "-X--".
.1956	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1957	20 1c 16	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.195a	20 10 16	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.195d	8d 78 1a	               sta  valpch         ; ... et lace le code à la position "X---".
.1960	a5 fb		               lda  zpage1         ; On charge le LSB de ZP1 ($fb).
.1962	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1963	20 10 16	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1966	8d 8c 1a	               sta  valz1l+1       ; ... et lace le code à la position "---X".
.1969	68		               pla
.196a	20 1c 16	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.196d	20 10 16	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1970	8d 8b 1a	               sta  valz1l         ; ... et lace le code à la position "--X-".
.1973	a5 fc		               lda  zpage1+1         ; On charge le MSB de ZP1 ($fc).
.1975	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1976	20 10 16	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1979	8d 8a 1a	               sta  valz1h+1       ; ... et lace le code à la position "-X--".
.197c	68		               pla
.197d	20 1c 16	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1980	20 10 16	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1983	8d 89 1a	               sta  valz1h         ; ... et lace le code à la position "X---".
.1986	a5 fd		               lda  zpage2         ; On charge le LSB de ZP2 ($fd).
.1988	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1989	20 10 16	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.198c	8d 9d 1a	               sta  valz2l+1       ; ... et lace le code à la position "---X".
.198f	68		               pla
.1990	20 1c 16	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1993	20 10 16	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1996	8d 9c 1a	               sta  valz2l         ; ... et lace le code à la position "--X-".
.1999	a5 fe		               lda  zpage2+1       ; On charge le MSB de ZP2 ($fc).
.199b	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.199c	20 10 16	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.199f	8d 9b 1a	               sta  valz2h+1       ; ... et lace le code à la position "-X--".
.19a2	68		               pla
.19a3	20 1c 16	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.19a6	20 10 16	               jsr  nibtohex
.19a9	8d 9a 1a	               sta  valz2h         ; ... et lace le code à la position "X---".
.19ac	20 81 13	               jsr  setinverse     ; On se place en mode inverse vidéo.
.19af	20 03 14	               jsr  pushreg
.19b2	a2 35		               ldx  #<srega
.19b4	a0 1a		               ldy  #>srega
.19b6	20 2c 13	               jsr  putscxy
.19b9	20 32 14	               jsr  popreg
.19bc	20 03 14	               jsr  pushreg
.19bf	a2 41		               ldx  #<sregx
.19c1	a0 1a		               ldy  #>sregx
.19c3	20 2c 13	               jsr  putscxy
.19c6	20 32 14	               jsr  popreg
.19c9	20 03 14	               jsr  pushreg
.19cc	a2 4c		               ldx  #<sregy
.19ce	a0 1a		               ldy  #>sregy
.19d0	20 2c 13	               jsr  putscxy
.19d3	20 32 14	               jsr  popreg
.19d6	20 03 14	               jsr  pushreg
.19d9	a2 58		               ldx  #<sregp
.19db	a0 1a		               ldy  #>sregp
.19dd	20 2c 13	               jsr  putscxy
.19e0	20 32 14	               jsr  popreg
.19e3	20 03 14	               jsr  pushreg
.19e6	a2 63		               ldx  #<sregs
.19e8	a0 1a		               ldy  #>sregs
.19ea	20 2c 13	               jsr  putscxy
.19ed	20 32 14	               jsr  popreg
.19f0	20 03 14	               jsr  pushreg
.19f3	a2 6f		               ldx  #<sregpc
.19f5	a0 1a		               ldy  #>sregpc
.19f7	20 2c 13	               jsr  putscxy
.19fa	20 32 14	               jsr  popreg
.19fd	20 03 14	               jsr  pushreg
.1a00	a2 7f		               ldx  #<sregz1
.1a02	a0 1a		               ldy  #>sregz1
.1a04	20 2c 13	               jsr  putscxy
.1a07	20 32 14	               jsr  popreg
.1a0a	20 03 14	               jsr  pushreg
.1a0d	a2 90		               ldx  #<sregz2
.1a0f	a0 1a		               ldy  #>sregz2
.1a11	20 2c 13	               jsr  putscxy
.1a14	20 32 14	               jsr  popreg
.1a17	20 89 13	               jsr  clrinverse     ; On quitte le mode inverse vidéo.
.1a1a	ad a6 1a	               lda  regpch         ; On replace ls MSB l'adresse de retour ...
.1a1d	48		               pha                 ; ... à la bonne position sur la pile.
.1a1e	ad a7 1a	               lda  regpcl         ; On replace ls LSB l'adresse de retour ...
.1a21	48		               pha                 ; ... à la bonne position sur la pile.
.1a22	ae a5 1a	               ldx  regs           ; On replace tous les registre à leurs ...
.1a25	9a		               txs                 ; ...
.1a26	ac a3 1a	               ldy  regy           ; ...
.1a29	ae a2 1a	               ldx  regx           ; ...
.1a2c	ad a4 1a	               lda  regp           ; ...
.1a2f	48		               pha                 ; ...
.1a30	ad a1 1a	               lda  rega           ; ...
.1a33	28		               plp                 ; ... valeurs initiales
.1a34	60		               rts
>1a35	07 01 17	srega   .byte   cyellow,coln+1,line
>1a38	20 20 41 3a	        .text   '  a:$' ;4,24
>1a3c	24
>1a3d	00 00 20 00	vala    .byte   0,0,32,0
>1a41	03 09 17	sregx   .byte   ccyan,coln+9,line
>1a44	20 58 3a 24	        .text   ' x:$' ;4,24
>1a48	00 00 20 00	valx    .byte   0,0,32,0
>1a4c	0d 10 17	sregy   .byte   clightgreen,coln+16,line
>1a4f	20 59 3a 20	        .text   ' y: $' ;4,24
>1a53	24
>1a54	00 00 20 00	valy    .byte   0,0,32,0
>1a58	08 18 17	sregp   .byte   corange,coln+24,line
>1a5b	20 50 3a 24	        .text   ' p:$' ;4,24
>1a5f	00 00 20 00	valp    .byte   0,0,32,0
>1a63	0a 1f 17	sregs   .byte   clightred,coln+31,line
>1a66	20 53 3a 24	        .text   ' s:$' ;4,24
>1a6a	00 00 20 20	vals    .byte   0,0,32,32,0
>1a6e	00
>1a6f	0e 01 18 20	sregpc  .byte   clightblue,coln+1,line+1,32
>1a73	20 50 43 3a	        .text   ' pc:$' ;4,24
>1a77	24
>1a78	00 00		valpch  .byte   0,0
>1a7a	00 00 20 20	valpcl  .byte   0,0,32,32,0
>1a7e	00
>1a7f	04 0d 18 20	sregz1  .byte   cpurple,coln+13,line+1,32
>1a83	20 5a 50 31	        .text   ' zp1:$' ;4,24
>1a87	3a 24
>1a89	00 00		valz1h  .byte   0,0
>1a8b	00 00 20 20	valz1l  .byte   0,0,32,32,0
>1a8f	00
>1a90	0f 1a 18 20	sregz2  .byte   clightgray,coln+26,line+1,32
>1a94	20 5a 50 32	        .text   ' zp2:$' ;4,24
>1a98	3a 24
>1a9a	00 00		valz2h  .byte   0,0
>1a9c	00 00 20 20	valz2l  .byte   0,0,32,32,0
>1aa0	00
>1aa1	00		rega    .byte   0
>1aa2	00		regx    .byte   0
>1aa3	00		regy    .byte   0
>1aa4	00		regp    .byte   0
>1aa5	00		regs    .byte   0
>1aa6	00		regpch  .byte   0
>1aa7	00		regpcl  .byte   0
>1aa8	00		regpch2 .byte   0
>1aa9	00		regpcl2 .byte   0
>1aaa	00		vzp1h   .byte   0
>1aab	00		vzp1l   .byte   0
>1aac	00		vzp2h   .byte   0
>1aad	00		vzp2l   .byte   0

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-drawbox.asm

.1aae			db_tline
.1aae	08		            php
.1aaf	48		            pha
.1ab0	a9 b0		            lda #tleft
.1ab2	8d 72 1b	            sta db_left
.1ab5	a9 c0		            lda #hline
.1ab7	8d 74 1b	            sta db_mid
.1aba	a9 ae		            lda #tright
.1abc	8d 73 1b	            sta db_right
.1abf	28		            plp
.1ac0	68		            pla
.1ac1	20 0a 1b	            jsr db_drawline
.1ac4	60		            rts
.1ac5			db_bline
.1ac5	08		            php
.1ac6	48		            pha
.1ac7	a9 ad		            lda #bleft
.1ac9	8d 72 1b	            sta db_left
.1acc	a9 c0		            lda #hline
.1ace	8d 74 1b	            sta db_mid
.1ad1	a9 bd		            lda #bright
.1ad3	8d 73 1b	            sta db_right
.1ad6	28		            plp
.1ad7	68		            pla
.1ad8	20 0a 1b	            jsr db_drawline
.1adb	60		            rts
.1adc			db_eline
.1adc	08		            php
.1add	48		            pha
.1ade	a9 dd		            lda #vline
.1ae0	8d 72 1b	            sta db_left
.1ae3	a9 20		            lda #$20
.1ae5	8d 74 1b	            sta db_mid
.1ae8	a9 dd		            lda #vline
.1aea	8d 73 1b	            sta db_right
.1aed	28		            plp
.1aee	68		            pla
.1aef	20 0a 1b	            jsr db_drawline
.1af2	60		            rts
.1af3			db_mline
.1af3	08		            php
.1af4	48		            pha
.1af5	a9 ab		            lda #mleft
.1af7	8d 72 1b	            sta db_left
.1afa	a9 c0		            lda #hline
.1afc	8d 74 1b	            sta db_mid
.1aff	a9 b3		            lda #mright
.1b01	8d 73 1b	            sta db_right
.1b04	28		            plp
.1b05	68		            pla
.1b06	20 0a 1b	            jsr db_drawline
.1b09	60		            rts
.1b0a			db_drawline
.1b0a	20 03 14	            jsr pushreg
.1b0d	ad 86 02	            lda bascol
.1b10	8d 7b 1b	            sta drawbox_bascol
.1b13	ad 7a 1b	            lda drawbox_colour
.1b16	8d 86 02	            sta bascol
.1b19	c9 10		            cmp #$10
.1b1b	30 05		            bmi noreverse
.1b1d	a9 12		            lda #18
.1b1f	20 d2 ff	            jsr chrout
.1b22			noreverse
.1b22	ae 79 1b	            ldx drawbox_curline
.1b25	ac 76 1b	            ldy drawbox_left
.1b28	18		            clc
.1b29	20 f0 ff	            jsr plot
.1b2c	ad 72 1b	            lda db_left
.1b2f	20 d2 ff	            jsr chrout
.1b32	ad 74 1b	            lda db_mid
.1b35	ae 77 1b	            ldx drawbox_width
.1b38	ca		            dex
.1b39	ca		            dex
.1b3a	20 8c 12	            jsr putnch
.1b3d	ad 73 1b	            lda db_right
.1b40	20 d2 ff	            jsr chrout
.1b43	a9 92		            lda #146
.1b45	20 d2 ff	            jsr chrout
.1b48	ad 7b 1b	            lda drawbox_bascol
.1b4b	8d 86 02	            sta bascol
.1b4e	20 32 14	            jsr popreg
.1b51	60		            rts
.1b52			db_drawbox
.1b52	20 03 14	            jsr pushreg
.1b55	ae 78 1b	            ldx drawbox_height
.1b58	ca		            dex
.1b59	20 ae 1a	            jsr db_tline
.1b5c	ca		            dex
.1b5d	f0 09		            beq lastline
.1b5f	ee 79 1b	moreline    inc drawbox_curline
.1b62	20 dc 1a	            jsr db_eline
.1b65	ca		            dex
.1b66	d0 f7		            bne moreline
.1b68	ee 79 1b	lastline    inc drawbox_curline
.1b6b	20 c5 1a	            jsr db_bline
.1b6e	20 32 14	            jsr popreg
.1b71	60		            rts
=176			tleft       =   176
=174			tright      =   174
=173			bleft       =   173
=189			bright      =   189
=171			mleft       =   171
=179			mright      =   179
=221			vline       =   221
=192			hline       =   192
>1b72	00		db_left         .byte   0
>1b73	00		db_right        .byte   0
>1b74	00		db_mid          .byte   0
>1b75	00		drawbox_top     .byte   0
>1b76	00		drawbox_left    .byte   0
>1b77	00		drawbox_width   .byte   0
>1b78	00		drawbox_height  .byte   0
>1b79	00		drawbox_curline .byte   0
>1b7a	00		drawbox_colour  .byte   0
>1b7b	00		drawbox_bascol  .byte   0

;******  Return to file: slbug64.asm


;******  End of listing
